 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2017 Priit Laes <plaes@plaes.org>.
  Copyright (c) 2017 Maxime Ripard.
  Copyright (c) 2017 Jonathan Liu.
  The Audio PLL is supposed to have 4 outputs: 3 fixed factors from
  the base (2x, 4x and 8x), and one variable divider (the one true
  pll audio).
  With sigma-delta modulation for fractional-N on the audio PLL,
  we have to use specific dividers. This means the variable divider
  can no longer be used, as the audio codec requests the exact clock
  rates we support through this mechanism. So we now hard code the
  variable divider to 1. This means the clock rates will no longer
  match the clock names.
 Not documented on A10 
 Not present on A10 
 Sentinel  },
 Sentinel  },
 M 
 P 
 mux 
 Not present on A20 
 Not documented on A20 
 Not present on A20 
 Not present on A10 
 Not present on A10 
 Not present on A10 
 Not present on A10 
 Not present on A10 
 Not present on A10 
 Not present on A10 
 M 
 P 
 mux 
 gate 
 Undocumented on A10 
 M 
 P 
 mux 
 gate 
 M 
 P 
 mux 
 gate 
 MMC output and sample clocks are not present on A10 
 M 
 P 
 mux 
 gate 
 MMC output and sample clocks are not present on A10 
 M 
 P 
 mux 
 gate 
 MMC output and sample clocks are not present on A10 
 M 
 P 
 mux 
 gate 
 MMC output and sample clocks are not present on A10 
 M 
 P 
 mux 
 gate 
 M 
 P 
 mux 
 gate 
 M 
 P 
 mux 
 gate 
 M 
 P 
 mux 
 gate 
 M 
 P 
 mux 
 gate 
 Undocumented on A10 
 M 
 P 
 mux 
 gate 
 TODO: Check whether A10 actually supports osc32k as 4th parent? 
 M 
 P 
 mux 
 gate 
 M 
 P 
 mux 
 gate 
 M 
 P 
 mux 
 gate 
 M 
 P 
 mux 
 gate 
 Undocumented on A10 
  SATA supports external clock as parent via BIT(24) and is probably an
  optional crystal or oscillator that can be connected to the
  SATA-CLKM  SATA-CLKP pins.
 TODO: GPS CLK 0x0d0 
 M 
 P 
 mux 
 gate 
 Not present on A10 
 Not present on A10 
 Clock seems to be critical only on sun4i 
 Undocumented on A10 
 TVD clock setup for A10 
 TVD clock setup for A20 
 M 
 P 
 mux 
 gate 
 Post-divider for pll-audio is hardcoded to 1 
 CLK_GPS is unimplemented 
 CLK_GPS is unimplemented 
	
	  Force VCO and PLL bias current to lowest setting. Higher
	  settings interfere with sigma-delta modulation and result
	  in audible noise and distortions when using SPDIF or I2S.
 Force the PLL-Audio-1x divider to 1 
	
	  Use the peripheral PLL6 as the AHB parent, instead of CPU 
	  AXI which have rate changes due to cpufreq.
	 
	  This is especially a big deal for the HS timer whose parent
	  clock is AHB.
	 
	  NB! These bits are undocumented in A10 manual.
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright 2016 Maxime Ripard
  Maxime Ripard <maxime.ripard@free-electrons.com>
  This clock notifier is called when the frequency of a PLL clock is
  changed. In common PLL designs, changes to the dividers take effect
  almost immediately, while changes to the multipliers (implemented
  as dividers in the feedback loop) take a few cycles to work into
  the feedback loop for the PLL to stablize.
  Sometimes when the PLL clock rate is changed, the decrease in the
  divider is too much for the decrease in the multiplier to catch up.
  The PLL clock rate will spike, and in some cases, might lock up
  completely.
  This notifier callback will gate and then ungate the clock,
  effectively resetting it, so it proceeds to work. Care must be
  taken to reparent consumers to other temporary clocks during the
  rate change, and that this notifier callback must be the first
  to be registered.
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (C) 2016 Maxime Ripard
  Maxime Ripard <maxime.ripard@free-electrons.com>
 SPDX-License-Identifier: GPL-2.0
  Copyright (c) 2017 Icenowy Zheng <icenowy@aosc.io>
  The CPU PLL is actually NP clock, with P being 1, 2 or 4. However
  P should only be used for output frequencies lower than 288 MHz.
  For now we can just model it as a multiplier clock, and force P to 1.
  The M factor is present in the register's description, but not in the
  frequency formula, and it's documented as "M is only used for backdoor
  testing", so it's not modelled and then force to 0.
 Some PLLs are input  N  div1  P. Model them as NKMP with no K 
 input divider 
 output divider 
 input divider 
 output divider 
 input divider 
 output divider 
 input divider 
 output divider 
  For Video PLLs, the output divider is described as "used for testing"
  in the user manual. So it's not modelled and forced to 0.
 input divider 
 input divider 
 input divider 
 output divider 
 input divider 
 output divider 
 input divider 
 output divider 
  The Audio PLL is supposed to have 3 outputs: 2 fixed factors from
  the base (2x and 4x), and one variable divider (the one true pll audio).
  We don't have any need for the variable divider for now, so we just
  hardcode it to match with the clock names.
 input divider 
 M 
 P 
 mux 
 M 
 P 
 mux 
 M 
 P 
 mux 
 M 
 P 
 mux 
 M 
 mux 
 gate 
 M 
 mux 
 gate 
 M 
 mux 
 gate 
 M 
 mux 
 gate 
 Also applies to EMCE 
 M 
 N 
 mux 
 gate 
 M 
 mux 
 gate 
 M 
 N 
 mux 
 gate 
 M 
 mux 
 gate 
 M 
 N 
 mux 
 gate 
 M 
 N 
 mux 
 gate 
 M 
 N 
 mux 
 gate 
 post-div 
 M 
 N 
 mux 
 gate 
 post-div 
 M 
 N 
 mux 
 gate 
 post-div 
 M 
 N 
 mux 
 gate 
 M 
 N 
 mux 
 gate 
 M 
 N 
 mux 
 gate 
 M 
 N 
 mux 
 gate 
  There are OHCI 12M clock source selection bits for 2 USB 2.0 ports.
  We will force them to 0 (12M divided from 48M).
 M 
 gate 
 M 
 gate 
 M 
 mux 
 gate 
 mux 
 gate 
 M 
 P 
 mux 
 gate 
 M 
 mux 
 gate 
 M 
 mux 
 gate 
 M 
 mux 
 gate 
 Fixed factor clocks 
  The divider of pll-audio is fixed to 24 for now, so 24576000 and 22579200
  rates can be set exactly in conjunction with sigma-delta modulation.
 Enable the lock bits on all PLLs 
	
	  Force the output divider of video PLLs to 0.
	 
	  See the comment before pll-video0 definition for the reason.
	
	  Force OHCI 12M clock sources to 00 (12MHz divided from 48MHz)
	 
	  This clock mux is still mysterious, and the code just enforces
	  it to have a valid clock parent.
	
	  Force the post-divider of pll-audio to 12 and the output divider
	  of it to 2, so 24576000 and 22579200 rates can be set exactly.
	
	  First clock parent (osc32K) is unusable for CEC. But since there
	  is no good way to force parent switch (both run with same frequency),
	  just set second clock parent here.
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2016 Chen-Yu Tsai
  Chen-Yu Tsai <wens@csie.org>
  Based on ccu-sun8i-h3.c by Maxime Ripard.
 N 
 K 
 M 
 gate 
 lock 
  The Audio PLL is supposed to have 4 outputs: 3 fixed factors from
  the base (2x, 4x and 8x), and one variable divider (the one true
  pll audio).
  With sigma-delta modulation for fractional-N on the audio PLL,
  we have to use specific dividers. This means the variable divider
  can no longer be used, as the audio codec requests the exact clock
  rates we support through this mechanism. So we now hard code the
  variable divider to 1. This means the clock rates will no longer
  match the clock names.
 N 
 M 
 gate 
 lock 
 N 
 M 
 frac enable 
 frac select 
 frac rate 0 
 frac rate 1 
 gate 
 lock 
 N 
 M 
 frac enable 
 frac select 
 frac rate 0 
 frac rate 1 
 gate 
 lock 
 N 
 K 
 M 
 gate 
 lock 
 N 
 K 
 gate 
 lock 
 post-div 
 N 
 M 
 frac enable 
 frac select 
 frac rate 0 
 frac rate 1 
 gate 
 lock 
 N 
 M 
 frac enable 
 frac select 
 frac rate 0 
 frac rate 1 
 gate 
 lock 
  The MIPI PLL has 2 modes: "MIPI" and "HDMI".
  The MIPI mode is a standard NKM-style clock. The HDMI mode is an
  integer  fractional clock with switchable multipliers and dividers.
  This is not supported here. We hardcode the PLL to MIPI mode.
 N 
 K 
 M 
 mux 
 gate 
 lock 
 N 
 M 
 frac enable 
 frac select 
 frac rate 0 
 frac rate 1 
 gate 
 lock 
 N 
 M 
 frac enable 
 frac select 
 frac rate 0 
 frac rate 1 
 gate 
 lock 
 Sentinel  },
 Sentinel  },
 M 
 P 
 mux 
 M 
 P 
 mux 
 gate 
 M 
 P 
 mux 
 gate 
 M 
 P 
 mux 
 gate 
 M 
 P 
 mux 
 gate 
 M 
 P 
 mux 
 gate 
 M 
 P 
 mux 
 gate 
 M 
 P 
 mux 
 gate 
 M 
 P 
 mux 
 gate 
 M 
 P 
 mux 
 gate 
 M 
 P 
 mux 
 gate 
 M 
 P 
 mux 
 gate 
 M 
 P 
 mux 
 gate 
 TODO emac clk not supported yet 
 M 
 P 
 mux 
 gate 
 M 
 P 
 mux 
 gate 
 M 
 P 
 mux 
 gate 
 M 
 mux 
 gate 
 M 
 mux 
 gate 
 We hardcode the divider to 1 for now 
 > 8 clock cycles at 24 MHz 
 index of 24 MHz oscillator 
 Force the PLL-Audio-1x divider to 1 
 Force PLL-MIPI to MIPI mode 
 Force AHB1 to PLL6  3 
 set PLL6 pre-div = 3 
 select PLL6  pre-div 
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (C) 2016 Maxime Ripard
  Maxime Ripard <maxime.ripard@free-electrons.com>
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2017 Icenowy Zheng <icenowy@aosc.io>
 TODO: The result of NK is required to be in [10, 88] range. 
  The Audio PLL is supposed to have 4 outputs: 3 fixed factors from
  the base (2x, 4x and 8x), and one variable divider (the one true
  pll audio).
  With sigma-delta modulation for fractional-N on the audio PLL,
  we have to use specific dividers. This means the variable divider
  can no longer be used, as the audio codec requests the exact clock
  rates we support through this mechanism. So we now hard code the
  variable divider to 1. This means the clock rates will no longer
  match the clock names.
 N 
 M 
 gate 
 lock 
 Minimum rate 
 Maximum rate 
 N 
 M 
 frac enable 
 frac select 
 frac rate 0 
 frac rate 1 
 gate 
 lock 
 TODO: The result of NM is required to be in [8, 25] range. 
 N 
 M 
 frac enable 
 frac select 
 frac rate 0 
 frac rate 1 
 gate 
 lock 
 TODO: The result of NK is required to be in [10, 77] range. 
 N 
 K 
 M 
 gate 
 lock 
 TODO: The result of NK is required to be in [21, 58] range. 
	
	  The formula of pll-periph0 (1x) is 24MHzNK2, and the formula
	  of pll-periph0-sata is 24MHzNKM6, so the postdiv here is
	  62 = 3.
 TODO: The result of NK is required to be in [21, 58] range. 
 Minimum rate 
 Maximum rate 
 N 
 M 
 frac enable 
 frac select 
 frac rate 0 
 frac rate 1 
 gate 
 lock 
 mux 
 gate 
 TODO: The result of NM is required to be in [8, 25] range. 
 N 
 M 
 frac enable 
 frac select 
 frac rate 0 
 frac rate 1 
 gate 
 lock 
  The MIPI PLL has 2 modes: "MIPI" and "HDMI".
  The MIPI mode is a standard NKM-style clock. The HDMI mode is an
  integer  fractional clock with switchable multipliers and dividers.
  This is not supported here. We hardcode the PLL to MIPI mode.
  TODO: In the MIPI mode, MN is required to be equal or lesser than 3,
  which cannot be implemented now.
 TODO: The result of NM is required to be in [8, 25] range. 
 N 
 M 
 frac enable 
 frac select 
 frac rate 0 
 frac rate 1 
 gate 
 lock 
 TODO: The N factor is required to be in [16, 75] range. 
 N 
 M 
 gate 
 lock 
 Sentinel  },
 M 
 P 
 mux 
  In datasheet here's "Reserved", however the gate exists in BSP soucre
  code.
 M 
 P 
 mux 
 gate 
 M 
 P 
 mux 
 gate 
 M 
 P 
 mux 
 gate 
 M 
 P 
 mux 
 gate 
 M 
 P 
 mux 
 gate 
 M 
 P 
 mux 
 gate 
 M 
 P 
 mux 
 gate 
 M 
 P 
 mux 
 gate 
 M 
 P 
 mux 
 gate 
 M 
 P 
 mux 
 gate 
 M 
 P 
 mux 
 gate 
  There are 3 OHCI 12M clock source selection bits in this register.
  We will force them to 0 (12M divided from 48M).
 M 
 P 
 mux 
 gate 
 M 
 P 
 mux 
 gate 
  In the SoC's user manual, the P factor is mentioned, but not used in
  the frequency formula.
  Here the factor is included, according to the BSP kernel source,
  which contains the P factor of this clock.
 M 
 P 
 mux 
 gate 
 Fixed Factor clocks 
 We hardcode the divider to 1 for now 
 copy from pll_cpu_clk 
 > 8 clock cycles at 24 MHz 
 index of 24 MHz oscillator 
  Add a regmap for the GMAC driver (dwmac-sun8i) to access the
  GMAC configuration register.
  Only this register is allowed to be written, in order to
  prevent overriding critical clock configuration.
 PLL_LOCK_CTRL_REG 
 other devices have no business accessing other registers 
 Force the PLL-Audio-1x divider to 1 
 Force PLL-MIPI to MIPI mode 
 Force OHCI 12M parent to 12M divided from 48M 
	
	  Force SYS 32k (otherwise known as LOSC throughout the CCU)
	  clock parent to LOSC output from RTC module instead of the
	  CCU's internal RC oscillator divided output.
 Gate then ungate PLL CPU after any rate changes 
 Reparent CPU during PLL CPU rate changes 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2016 Chen-Yu Tsai. All rights reserved.
 The bus clock needs to be enabled for us to access the registers 
 The reset control needs to be asserted for the controls to work 
 SPDX-License-Identifier: GPL-2.0
  Copyright (c) 2020 Yangtao Li <frank@allwinnertech.com>
 M 
 P 
 mux 
 gate 
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (C) 2016 Maxime Ripard
  Maxime Ripard <maxime.ripard@free-electrons.com>
	
	  If width is 0, GENMASK() macro may not generate expected mask (0)
	  as it falls under undefined behaviour by C standard due to shifts
	  which are equal or greater than width of left operand. This can
	  be easily avoided by explicitly checking if width is 0.
 SPDX-License-Identifier:	GPL-2.0
  Copyright (C) 2017, Intel Corporation
 Clock Manager offsets 
 PLL Clock enable bits 
 read VCO1 reg for numerator and denominator 
 read VCO1 reg for numerator and denominator 
 Read mdiv and fdiv from the fdbck register 
 read VCO1 reg for numerator and denominator 
 Read mdiv and fdiv from the fdbck register 
 Bring PLL out of reset 
 Bring PLL out of reset 
 SPDX-License-Identifier:	GPL-2.0
  Copyright (C) 2017, Intel Corporation
 EMACA bypass to bootclk @0xB0 offset 
 only applicable if parent is maca 
 only applicable if parent is macb 
 EMACA bypass to bootclk @0x88 offset 
 only applicable if parent is maca 
 only applicable if parent is macb 
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright 2011-2012 Calxeda, Inc.
   Copyright (C) 2012-2013 Altera Corporation <www.altera.com>
  Based from clk-highbank.c
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright 2011-2012 Calxeda, Inc.
   Copyright (C) 2012-2013 Altera Corporation <www.altera.com>
  Based from clk-highbank.c
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2015 Altera Corporation. All rights reserved
 SPDX-License-Identifier:	GPL-2.0
  Copyright (C) 2017, Intel Corporation
 handle the bypass first 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2015 Altera Corporation. All rights reserved
 SDMMC Group for System Manager defines 
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright 2011-2012 Calxeda, Inc.
   Copyright (C) 2012-2013 Altera Corporation <www.altera.com>
  Based from clk-highbank.c
 Clock bypass bits 
 SPDX-License-Identifier:	GPL-2.0
  Copyright (C) 2017, Intel Corporation
 clocks in AO (always on) controller 
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) 2019, Intel Corporation
 clocks in AO (always on) controller 
	
	  The l4_sp_clk feeds a 100 MHz clock to various peripherals, one of them
	  being the SP timers, thus cannot get gated.
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright 2011-2012 Calxeda, Inc.
   Copyright (C) 2012-2013 Altera Corporation <www.altera.com>
  Based from clk-highbank.c
 SDMMC Group for System Manager defines 
 QSPI clock 
 QSPI clock 
 Check for GPIO_DB_CLK by its offset 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2015 Altera Corporation. All rights reserved
 Clock Manager offsets 
 Clock bypass bits 
 read VCO1 reg for numerator and denominator 
 SPDX-License-Identifier: GPL-2.0
 Spreadtrum divider clock driver
 Copyright (C) 2017 Spreadtrum, Inc.
 Author: Chunyan Zhang <chunyan.zhang@spreadtrum.com>
 SPDX-License-Identifier: GPL-2.0
 Spreadtrum multiplexer clock driver
 Copyright (C) 2017 Spreadtrum, Inc.
 Author: Chunyan Zhang <chunyan.zhang@spreadtrum.com>
 SPDX-License-Identifier: GPL-2.0
 Spreadtrum gate clock driver
 Copyright (C) 2017 Spreadtrum, Inc.
 Author: Chunyan Zhang <chunyan.zhang@spreadtrum.com>
	
	  Each setclear gate clock has three registers:
	  common->reg			- base register
	  common->reg + offset		- set register
	  common->reg + 2  offset	- clear register
 SPDX-License-Identifier: GPL-2.0
 Spreadtrum composite clock driver
 Copyright (C) 2017 Spreadtrum, Inc.
 Author: Chunyan Zhang <chunyan.zhang@spreadtrum.com>
 SPDX-License-Identifier: GPL-2.0-only
  Unisoc SC9863A clock driver
  Copyright (C) 2019 Unisoc, Inc.
  Author: Chunyan Zhang <chunyan.zhang@unisoc.com>
 mpll_gate clocks control cpu cores, they were enabled by default 
 address base is 0x402b0000 
 lock_done	
 div_s	
 mod_en	
 sdm_en	
 refin	
 ibias	
 n		
 nint		
 kint		
 prediv	
 postdiv	
 lock_done	
 div_s	
 mod_en	
 sdm_en	
 refin	
 ibias	
 n		
 nint		
 kint		
 prediv	
 postdiv	
 lock_done	
 div_s	
 mod_en	
 sdm_en	
 refin	
 ibias	
 n		
 nint		
 kint		
 prediv	
 postdiv	
 address base is 0x40353000 
 address base is 0x40359000 
 address base is 0x4035c000 
 address base is 0x40363000 
 address base is 0x402d0000 
 address base is 0x21500000 
 address base is 0x20e00000 
 aon gate clocks 
 address base is 0x402e0000 
 mm gate clocks 
 address base is 0x60800000 
 camera sensor clocks 
 address base is 0x60900000 
 uart1_eb is for console, don't gate even if unused 
 address base is 0x71300000 
 0x21500000 
 0x402b0000 
 0x40353000 
 0x40359000 
 0x4035c000 
 0x40363000 
 0x402d0000 
 0x20e00000 
 0x402e0000 
 0x60800000 
 0x60900000 
 0x71300000 
 SPDX-License-Identifier: GPL-2.0
 Spreadtrum pll clock driver
 Copyright (C) 2015~2017 Spreadtrum, Inc.
 Author: Chunyan Zhang <chunyan.zhang@spreadtrum.com>
 table[0] indicates the number of items in this table 
 SPDX-License-Identifier: GPL-2.0
 Spreatrum SC9860 clock driver
 Copyright (C) 2017 Spreadtrum, Inc.
 Author: Chunyan Zhang <chunyan.zhang@spreadtrum.com>
 address base is 0x402b0000 
 GPLLLPLLDPLLRPLLCPLL 
 TWPLLMPLL0MPLL1 
 lock_done	
 div_s	
 mod_en	
 sdm_en	
 refin	
 ibias	
 n		
 nint		
 kint		
 prediv	
 postdiv	
 lock_done	
 div_s	
 mod_en	
 sdm_en	
 refin	
 ibias	
 n		
 nint		
 kint		
 prediv	
 postdiv	
 lock_done	
 div_s	
 mod_en	
 sdm_en	
 refin	
 ibias	
 n		
 nint		
 kint		
 prediv	
 postdiv	
 lock_done	
 div_s	
 mod_en	
 sdm_en	
 refin	
 ibias	
 n		
 nint		
 kint		
 prediv	
 postdiv	
 lock_done	
 div_s	
 mod_en	
 sdm_en	
 refin	
 ibias	
 n		
 nint		
 kint		
 prediv	
 postdiv	
 lock_done	
 div_s	
 mod_en	
 sdm_en	
 refin	
 ibias	
 n		
 nint		
 kint		
 prediv	
 postdiv	
 lock_done	
 div_s	
 mod_en	
 sdm_en	
 refin	
 ibias	
 n		
 nint		
 kint		
 prediv	
 postdiv	
 lock_done	
 div_s	
 mod_en	
 sdm_en	
 refin	
 ibias	
 n		
 nint		
 kint		
 prediv	
 postdiv	
 address base is 0x40400000 
 address base is 0x20000000 
 address base is 0x402d0000 
 address base is 0x20210000 
 address base is 0x402e0000 
 address base is 0x40880000 
 address base is 0x415e0000 
 address base is 0x60200000 
 address base is 0x61000000 
 address base is 0x61100000 
 address base is 0x62000000 
 address base is 0x62100000 
 address base is 0x63000000 
 address base is 0x63100000 
 address base is 0x70b00000 
 0x402b 
 0x4040 
 0x2000 
 0x402d 
 0x2021 
 0x402e 
 0x4088 
 0x415e 
 0x6020 
 0x6100 
 0x6110 
 0x6200 
 0x6210 
 0x6300 
 0x6310 
 0x70b0 
 SPDX-License-Identifier: GPL-2.0
 Spreadtrum clock infrastructure
 Copyright (C) 2017 Spreadtrum, Inc.
 Author: Chunyan Zhang <chunyan.zhang@spreadtrum.com>
  Copyright (C) 2012 Avionic Design GmbH
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sub license,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice (including the
  next paragraph) shall be included in all copies or substantial portions
  of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  DEALINGS IN THE SOFTWARE.
 compute checksum 
  hdmi_avi_infoframe_init() - initialize an HDMI AVI infoframe
  @frame: HDMI AVI infoframe
  hdmi_avi_infoframe_check() - check a HDMI AVI infoframe
  @frame: HDMI AVI infoframe
  Validates that the infoframe is consistent and updates derived fields
  (eg. length) based on other fields.
  Returns 0 on success or a negative error code on failure.
  hdmi_avi_infoframe_pack_only() - write HDMI AVI infoframe to binary buffer
  @frame: HDMI AVI infoframe
  @buffer: destination buffer
  @size: size of buffer
  Packs the information contained in the @frame structure into a binary
  representation that can be written into the corresponding controller
  registers. Also computes the checksum as required by section 5.3.5 of
  the HDMI 1.4 specification.
  Returns the number of bytes packed into the binary buffer or a negative
  error code on failure.
 checksum 
 start infoframe payload 
	
	  Data byte 1, bit 4 has to be set if we provide the active format
	  aspect ratio
 Bit 3 and 2 indicate if we transmit horizontalvertical bar data 
  hdmi_avi_infoframe_pack() - check a HDMI AVI infoframe,
                              and write it to binary buffer
  @frame: HDMI AVI infoframe
  @buffer: destination buffer
  @size: size of buffer
  Validates that the infoframe is consistent and updates derived fields
  (eg. length) based on other fields, after which it packs the information
  contained in the @frame structure into a binary representation that
  can be written into the corresponding controller registers. This function
  also computes the checksum as required by section 5.3.5 of the HDMI 1.4
  specification.
  Returns the number of bytes packed into the binary buffer or a negative
  error code on failure.
  hdmi_spd_infoframe_init() - initialize an HDMI SPD infoframe
  @frame: HDMI SPD infoframe
  @vendor: vendor string
  @product: product string
  Returns 0 on success or a negative error code on failure.
  hdmi_spd_infoframe_check() - check a HDMI SPD infoframe
  @frame: HDMI SPD infoframe
  Validates that the infoframe is consistent and updates derived fields
  (eg. length) based on other fields.
  Returns 0 on success or a negative error code on failure.
  hdmi_spd_infoframe_pack_only() - write HDMI SPD infoframe to binary buffer
  @frame: HDMI SPD infoframe
  @buffer: destination buffer
  @size: size of buffer
  Packs the information contained in the @frame structure into a binary
  representation that can be written into the corresponding controller
  registers. Also computes the checksum as required by section 5.3.5 of
  the HDMI 1.4 specification.
  Returns the number of bytes packed into the binary buffer or a negative
  error code on failure.
 checksum 
 start infoframe payload 
  hdmi_spd_infoframe_pack() - check a HDMI SPD infoframe,
                              and write it to binary buffer
  @frame: HDMI SPD infoframe
  @buffer: destination buffer
  @size: size of buffer
  Validates that the infoframe is consistent and updates derived fields
  (eg. length) based on other fields, after which it packs the information
  contained in the @frame structure into a binary representation that
  can be written into the corresponding controller registers. This function
  also computes the checksum as required by section 5.3.5 of the HDMI 1.4
  specification.
  Returns the number of bytes packed into the binary buffer or a negative
  error code on failure.
  hdmi_audio_infoframe_init() - initialize an HDMI audio infoframe
  @frame: HDMI audio infoframe
  Returns 0 on success or a negative error code on failure.
  hdmi_audio_infoframe_check() - check a HDMI audio infoframe
  @frame: HDMI audio infoframe
  Validates that the infoframe is consistent and updates derived fields
  (eg. length) based on other fields.
  Returns 0 on success or a negative error code on failure.
  hdmi_audio_infoframe_pack_only() - write HDMI audio infoframe to binary buffer
  @frame: HDMI audio infoframe
  @buffer: destination buffer
  @size: size of buffer
  Packs the information contained in the @frame structure into a binary
  representation that can be written into the corresponding controller
  registers. Also computes the checksum as required by section 5.3.5 of
  the HDMI 1.4 specification.
  Returns the number of bytes packed into the binary buffer or a negative
  error code on failure.
 checksum 
 start infoframe payload 
  hdmi_audio_infoframe_pack() - check a HDMI Audio infoframe,
                                and write it to binary buffer
  @frame: HDMI Audio infoframe
  @buffer: destination buffer
  @size: size of buffer
  Validates that the infoframe is consistent and updates derived fields
  (eg. length) based on other fields, after which it packs the information
  contained in the @frame structure into a binary representation that
  can be written into the corresponding controller registers. This function
  also computes the checksum as required by section 5.3.5 of the HDMI 1.4
  specification.
  Returns the number of bytes packed into the binary buffer or a negative
  error code on failure.
  hdmi_vendor_infoframe_init() - initialize an HDMI vendor infoframe
  @frame: HDMI vendor infoframe
  Returns 0 on success or a negative error code on failure.
	
	  0 is a valid value for s3d_struct, so we use a special "not set"
	  value
 for side by side (half) we also need to provide 3D_Ext_Data 
 only one of those can be supplied 
  hdmi_vendor_infoframe_check() - check a HDMI vendor infoframe
  @frame: HDMI infoframe
  Validates that the infoframe is consistent and updates derived fields
  (eg. length) based on other fields.
  Returns 0 on success or a negative error code on failure.
  hdmi_vendor_infoframe_pack_only() - write a HDMI vendor infoframe to binary buffer
  @frame: HDMI infoframe
  @buffer: destination buffer
  @size: size of buffer
  Packs the information contained in the @frame structure into a binary
  representation that can be written into the corresponding controller
  registers. Also computes the checksum as required by section 5.3.5 of
  the HDMI 1.4 specification.
  Returns the number of bytes packed into the binary buffer or a negative
  error code on failure.
 checksum 
 HDMI OUI 
 video format 
 video format 
 video format 
  hdmi_vendor_infoframe_pack() - check a HDMI Vendor infoframe,
                                 and write it to binary buffer
  @frame: HDMI Vendor infoframe
  @buffer: destination buffer
  @size: size of buffer
  Validates that the infoframe is consistent and updates derived fields
  (eg. length) based on other fields, after which it packs the information
  contained in the @frame structure into a binary representation that
  can be written into the corresponding controller registers. This function
  also computes the checksum as required by section 5.3.5 of the HDMI 1.4
  specification.
  Returns the number of bytes packed into the binary buffer or a negative
  error code on failure.
  hdmi_drm_infoframe_init() - initialize an HDMI Dynaminc Range and
  mastering infoframe
  @frame: HDMI DRM infoframe
  Returns 0 on success or a negative error code on failure.
  hdmi_drm_infoframe_check() - check a HDMI DRM infoframe
  @frame: HDMI DRM infoframe
  Validates that the infoframe is consistent.
  Returns 0 on success or a negative error code on failure.
  hdmi_drm_infoframe_pack_only() - write HDMI DRM infoframe to binary buffer
  @frame: HDMI DRM infoframe
  @buffer: destination buffer
  @size: size of buffer
  Packs the information contained in the @frame structure into a binary
  representation that can be written into the corresponding controller
  registers. Also computes the checksum as required by section 5.3.5 of
  the HDMI 1.4 specification.
  Returns the number of bytes packed into the binary buffer or a negative
  error code on failure.
 checksum 
 start infoframe payload 
  hdmi_drm_infoframe_pack() - check a HDMI DRM infoframe,
                              and write it to binary buffer
  @frame: HDMI DRM infoframe
  @buffer: destination buffer
  @size: size of buffer
  Validates that the infoframe is consistent and updates derived fields
  (eg. length) based on other fields, after which it packs the information
  contained in the @frame structure into a binary representation that
  can be written into the corresponding controller registers. This function
  also computes the checksum as required by section 5.3.5 of the HDMI 1.4
  specification.
  Returns the number of bytes packed into the binary buffer or a negative
  error code on failure.
  hdmi_vendor_any_infoframe_check() - check a vendor infoframe
 we only know about HDMI vendor infoframes 
  hdmi_vendor_any_infoframe_pack_only() - write a vendor infoframe to binary buffer
 we only know about HDMI vendor infoframes 
  hdmi_vendor_any_infoframe_pack() - check a vendor infoframe,
                                     and write it to binary buffer
  hdmi_infoframe_check() - check a HDMI infoframe
  @frame: HDMI infoframe
  Validates that the infoframe is consistent and updates derived fields
  (eg. length) based on other fields.
  Returns 0 on success or a negative error code on failure.
  hdmi_infoframe_pack_only() - write a HDMI infoframe to binary buffer
  @frame: HDMI infoframe
  @buffer: destination buffer
  @size: size of buffer
  Packs the information contained in the @frame structure into a binary
  representation that can be written into the corresponding controller
  registers. Also computes the checksum as required by section 5.3.5 of
  the HDMI 1.4 specification.
  Returns the number of bytes packed into the binary buffer or a negative
  error code on failure.
  hdmi_infoframe_pack() - check a HDMI infoframe,
                          and write it to binary buffer
  @frame: HDMI infoframe
  @buffer: destination buffer
  @size: size of buffer
  Validates that the infoframe is consistent and updates derived fields
  (eg. length) based on other fields, after which it packs the information
  contained in the @frame structure into a binary representation that
  can be written into the corresponding controller registers. This function
  also computes the checksum as required by section 5.3.5 of the HDMI 1.4
  specification.
  Returns the number of bytes packed into the binary buffer or a negative
  error code on failure.
  hdmi_infoframe_log() - log info of HDMI infoframe
  @level: logging level
  @dev: device
  @frame: HDMI infoframe
  hdmi_avi_infoframe_unpack() - unpack binary buffer to a HDMI AVI infoframe
  @frame: HDMI AVI infoframe
  @buffer: source buffer
  @size: size of buffer
  Unpacks the information contained in binary @buffer into a structured
  @frame of the HDMI Auxiliary Video (AVI) information frame.
  Also verifies the checksum as required by section 5.3.5 of the HDMI 1.4
  specification.
  Returns 0 on success or a negative error code on failure.
  hdmi_spd_infoframe_unpack() - unpack binary buffer to a HDMI SPD infoframe
  @frame: HDMI SPD infoframe
  @buffer: source buffer
  @size: size of buffer
  Unpacks the information contained in binary @buffer into a structured
  @frame of the HDMI Source Product Description (SPD) information frame.
  Also verifies the checksum as required by section 5.3.5 of the HDMI 1.4
  specification.
  Returns 0 on success or a negative error code on failure.
  hdmi_audio_infoframe_unpack() - unpack binary buffer to a HDMI AUDIO infoframe
  @frame: HDMI Audio infoframe
  @buffer: source buffer
  @size: size of buffer
  Unpacks the information contained in binary @buffer into a structured
  @frame of the HDMI Audio information frame.
  Also verifies the checksum as required by section 5.3.5 of the HDMI 1.4
  specification.
  Returns 0 on success or a negative error code on failure.
  hdmi_vendor_any_infoframe_unpack() - unpack binary buffer to a HDMI
  	vendor infoframe
  @frame: HDMI Vendor infoframe
  @buffer: source buffer
  @size: size of buffer
  Unpacks the information contained in binary @buffer into a structured
  @frame of the HDMI Vendor information frame.
  Also verifies the checksum as required by section 5.3.5 of the HDMI 1.4
  specification.
  Returns 0 on success or a negative error code on failure.
 HDMI OUI 
  hdmi_drm_infoframe_unpack_only() - unpack binary buffer of CTA-861-G DRM
                                     infoframe DataBytes to a HDMI DRM
                                     infoframe
  @frame: HDMI DRM infoframe
  @buffer: source buffer
  @size: size of buffer
  Unpacks CTA-861-G DRM infoframe DataBytes contained in the binary @buffer
  into a structured @frame of the HDMI Dynamic Range and Mastering (DRM)
  infoframe.
  Returns 0 on success or a negative error code on failure.
  hdmi_drm_infoframe_unpack() - unpack binary buffer to a HDMI DRM infoframe
  @frame: HDMI DRM infoframe
  @buffer: source buffer
  @size: size of buffer
  Unpacks the CTA-861-G DRM infoframe contained in the binary @buffer into
  a structured @frame of the HDMI Dynamic Range and Mastering (DRM)
  infoframe. It also verifies the checksum as required by section 5.3.5 of
  the HDMI 1.4 specification.
  Returns 0 on success or a negative error code on failure.
  hdmi_infoframe_unpack() - unpack binary buffer to a HDMI infoframe
  @frame: HDMI infoframe
  @buffer: source buffer
  @size: size of buffer
  Unpacks the information contained in binary buffer @buffer into a structured
  @frame of a HDMI infoframe.
  Also verifies the checksum as required by section 5.3.5 of the HDMI 1.4
  specification.
  Returns 0 on success or a negative error code on failure.
  linuxdriversvideovgastate.c -- VGA state saverestore
  Copyright 2002 James Simmons
  Copyright history from vga16fb.c:
 	Copyright 1999 Ben Pfaff and Petr Vandrovec
 	Based on VGA info at http:www.goodnet.com~tinaraFreeVGAhome.htm
 	Based on VESA framebuffer (c) 1998 Gerd Knorr
  This file is subject to the terms and conditions of the GNU General
  Public License.  See the file COPYING in the main directory of this
  archive for more details.
 if in graphics mode, no need to save 
 save regs 
 blank screen 
 save font at plane 2 
 save font at plane 3 
 save font at plane 01 
 restore regs 
 unblank screen 
 save regs 
 blank screen 
 restore font at plane 2 
 restore font at plane 3 
 restore font at plane 01 
 unblank screen 
 restore regs 
 turn off display 
 disable sequencer 
 enable palette addressing 
 unprotect vga regs 
 reenable sequencer 
 turn display on 
 disable videopalette source 
 assumes DAC is readable and writable 
 assumes DAC is readable and writable 
 exit if window is less than 32K 
		
		  save only first 32K used by vgacon
		
		  largely unused, but if required by the caller
		  we'll just save everything.
		
		  Save 8K at plane0[0], and 8K at plane1[16K]
 SPDX-License-Identifier: GPL-2.0-only
  generic display timing functions
  Copyright (c) 2012 Steffen Trumtrar <s.trumtrar@pengutronix.de>, Pengutronix
 SPDX-License-Identifier: GPL-2.0-only
  OF helpers for parsing display timings
  Copyright (c) 2012 Steffen Trumtrar <s.trumtrar@pengutronix.de>, Pengutronix
  based on of_videomode.c by Sascha Hauer <s.hauer@pengutronix.de>
  parse_timing_property - parse timing_entry from device_node
  @np: device_node with the property
  @name: name of the property
  @result: will be set to the return value
  DESCRIPTION:
  Every display_timing can be specified with either just the typical value or
  a range consisting of mintypmax. This function helps handling this
  of_parse_display_timing - parse display_timing entry from device_node
  @np: device_node with the properties
  @dt: display_timing that contains the result. I may be partially written in case of errors
  of_get_display_timing - parse a display_timing entry
  @np: device_node with the timing subnode
  @name: name of the timing node
  @dt: display_timing struct to fill
  of_get_display_timings - parse all display_timing entries from a device_node
  @np: device_node with the subnodes
 assume first child as native mode if none provided 
 if there is no child, it is useless to go on 
 should never happen, as entry was already found above 
			
			  to not encourage wrong devicetrees, fail in case of
			  an error
	
	  native_mode points to the device_node returned by of_parse_phandle
	  therefore call of_node_put on it
 SPDX-License-Identifier: GPL-2.0-only
  generic display timing functions
  Copyright (c) 2012 Steffen Trumtrar <s.trumtrar@pengutronix.de>, Pengutronix
 SPDX-License-Identifier: GPL-2.0-only
  generic videomode helper
  Copyright (c) 2012 Steffen Trumtrar <s.trumtrar@pengutronix.de>, Pengutronix
  of_get_videomode - get the videomode #<index> from devicetree
  @np: devicenode with the display_timings
  @vm: set to return value
  @index: index into list of display_timings
 	    (Set this to OF_USE_NATIVE_MODE to use whatever mode is
 	     specified as native mode in the DT.)
  DESCRIPTION:
  Get a list of all display timings and put the one
  specified by index into vm. This function should only be used, if
  only one videomode is to be retrieved. A driver that needs to work
  with multipleall videomodes should work with
  of_get_display_timings instead.
 SPDX-License-Identifier: GPL-2.0-or-later
  Driver for the Himax HX-8357 LCD Controller
  Copyright 2012 Free Electrons
	
	  The controller needs 120ms when entering in sleep mode before we can
	  send the command to go off sleep mode
	
	  The controller needs 120ms when exiting from sleep mode before we
	  can send the command to enter in sleep mode
 Reset the screen 
 The controller needs 120ms to recover from reset 
	
	  Set the interface selection pins to SPI mode, with three
	  wires
	
	  The controller needs 120ms to fully recover from exiting sleep mode
	
	  The controller needs 120ms to fully recover from exiting sleep mode
 SPDX-License-Identifier: GPL-2.0-only
   LCDBacklight Driver for Sharp Zaurus Handhelds (various models)
   Copyright (c) 2004-2006 Richard Purdie
   Based on Sharp's 2.4 Backlight Driver
   Copyright (c) 2008 Marvell International Ltd.
 	Converted to SPI device based LCDBacklight device driver
 	by Eric Miao <eric.miao@marvell.com>
 Register Addresses 
 Register Bit Definitions 
 VW Supply FET ON 
 GVSS(-8V) Power Supply ON 
 VDD(8V),SVSS(-4V) Power Supply ON 
 VW Supply FET OFF 
 GVSS(-8V) Power Supply OFF 
 VDD(8V),SVSS(-4V) Power Supply OFF 
 COM Voltage DC Bias DAC Serial Data Clock 
 COM Voltage DC Bias DAC Serial Data Out 
 DAC Power Supply ON 
 COM Power Supply ON 
 VCC5 Power Supply ON 
 DAC Power Supply OFF 
 COM Power Supply OFF 
 VCC5 Power Supply OFF 
  This is only a pseudo I2C interface. We can't use the standard kernel
  routines as the interface is write only. We just assume the data is acked...
 Set Common Voltage to M62332FP via I2C 
 Set Phase Adjust 
 Setting for VGA 
 Setting for QVGA 
 Initialize Internal Logic & Port 
 VDD(+8V), SVSS(-4V) ON 
 DAC ON 
 INIB = H, INI = L  
 PICTL[0] = H , PICTL[1] = PICTL[2] = PICTL[4] = L 
 Set Common Voltage 
 VCC5 ON, DAC ON 
 GVSS(-8V) ON, VDD ON 
 COM SIGNAL ON (PICTL[3] = L) 
 COM ON, DAC ON, VCC5_ON 
 VW ON, GVSS ON, VDD ON 
 Signals output enable 
 Set Phase Adjust 
 Initialize for Input Signals from ATI 
 60Hz x 2 frame = 16.7msec x 2 = 33.4 msec 
 (1)VW OFF 
 (2)COM OFF 
 (3)Set Common Voltage Bias 0V 
 (4)GVSS OFF 
 (5)VCC5 OFF 
 (6)Set PDWN, INIOFF, DACOFF 
 (7)DAC OFF 
 (8)VDD OFF 
 Bit 5 via GPIO_BACKLIGHT_CONT 
 SPDX-License-Identifier: GPL-2.0-or-later
  lm3533-bl.c -- LM3533 Backlight driver
  Copyright (C) 2011-2012 Texas Instruments
  Author: Johan Hovold <jhovold@gmail.com>
 until registered 
 SPDX-License-Identifier: GPL-2.0-only
  LCD Lowlevel Control Abstraction
  Copyright (C) 2003,2004 Hewlett-Packard Company
 This callback gets called when something important happens inside a
  framebuffer driver. We're looking if that important event is blanking,
  and if it is, we're switching lcd power as well ...
 CONFIG_FB 
  lcd_device_register - register a new object of lcd_device class.
  @name: the name of the new object(must be the same as the name of the
    respective framebuffer device).
  @parent: pointer to the parent's struct device .
  @devdata: an optional pointer to be stored in the device. The
    methods may retrieve it by using lcd_get_data(ld).
  @ops: the lcd operations structure.
  Creates and registers a new lcd device. Returns either an ERR_PTR()
  or a pointer to the newly allocated device.
  lcd_device_unregister - unregisters a object of lcd_device class.
  @ld: the lcd device object to be unregistered and freed.
  Unregisters a previously registered via lcd_device_register object.
  devm_lcd_device_register - resource managed lcd_device_register()
  @dev: the device to register
  @name: the name of the device
  @parent: a pointer to the parent device
  @devdata: an optional pointer to be stored for private driver use
  @ops: the lcd operations structure
  @return a struct lcd on success, or an ERR_PTR on error
  Managed lcd_device_register(). The lcd_device returned from this function
  are automatically freed on driver detach. See lcd_device_register()
  for more information.
  devm_lcd_device_unregister - resource managed lcd_device_unregister()
  @dev: the device to unregister
  @ld: the lcd device to unregister
  Deallocated a lcd allocated with devm_lcd_device_register(). Normally
  this function will not need to be called and the resource management
  code will ensure that the resource is freed.
  if this is compiled into the kernel, we need to ensure that the
  class is registered before users of the class try to register lcd's
 SPDX-License-Identifier: GPL-2.0-or-later
  (C) Copyright 2008
  Stefano Babic, DENX Software Engineering, sbabic@denx.de.
  This driver implements a lcd device for the ILITEK 922x display
  controller. The interface to the display is SPI and the display's
  memory is cyclically updated over the RGB interface.
 Register offset, see manual section 8.2 
  maximum frequency for register access
  (not for the GRAM access)
  Device ID as found in the datasheet (supports 9221 and 9222)
 Last two bits in the START BYTE 
  START_BYTE(id, rs, rw)
  Set the start byte according to the required operation.
  The start byte is defined as:
    ----------------------------------
   | 0 | 1 | 1 | 1 | 0 | ID | RS | RW |
    ----------------------------------
  @id: display's id as set by the manufacturer
  @rs: operation type bit, one of:
 	  - START_RS_INDEX	set the index register
 	  - START_RS_REG	writeread registersGRAM
  @rw: readwrite operation
 	 - START_RW_WRITE	write
 	 - START_RW_READ	read
  CHECK_FREQ_REG(spi_device s, spi_transfer x) - Check the frequency
 	for the SPI transfer. According to the datasheet, the controller
 	accept higher frequency for the GRAM transfer, but it requires
 	lower frequency when the registers are readwritten.
 	The macro sets the frequency in the spi_transfer structure if
 	the frequency exceeds the maximum value.
  @s: pointer to an SPI device
  @x: pointer to the readwrite buffer pair
  ili922x_id - id as set by manufacturer
  driver's private structure
  ili922x_read_status - read status register from display
  @spi: spi device
  @rs:  output value
	
	  we need 4-byte xfer here due to invalid dummy byte
	  received after start byte
 dummy 
  ili922x_read - read register from display
  @spi: spi device
  @reg: offset of the register to be read
  @rx:  output value
  ili922x_write - write a controller register
  @spi: struct spi_device 
  @reg: offset of the register to be written
  @value: value to be written
  ili922x_reg_dump - dump all registers
  @spi: pointer to an SPI device
  set_write_to_gram_reg - initialize the display to write the GRAM
  @spi: spi device
  ili922x_poweron - turn the display on
  @spi: spi device
  The sequence to turn on the display is taken from
  the datasheet andor the example code provided by the
  manufacturer.
 Power on 
 register 0x56 is not documented in the datasheet 
  ili922x_poweroff - turn the display off
  @spi: spi device
 Power off 
  ili922x_display_init - initialize the display by setting
 			  the configuration registers
  @spi: spi device
 Set RGB interface 
 check if the device is connected 
 SPDX-License-Identifier: GPL-2.0-only
  sky81452-backlight.c	SKY81452 backlight driver
  Copyright 2014 Skyworks Solutions Inc.
  Author : Gyungoh Yoo <jack.yoo@skyworksinc.com>
 registers 
 bit mask 
  struct sky81452_platform_data
  @name:	backlight driver name.
 		If it is not defined, default name is lcd-backlight.
  @gpiod_enable:GPIO descriptor which control EN pin
  @enable:	Enable mask for current sink channel 1, 2, 3, 4, 5 and 6.
  @ignore_pwm:	true if DPWMI should be ignored.
  @dpwm_mode:	true is DPWM dimming mode, otherwise Analog dimming mode.
  @phase_shift:true is phase shift mode.
  @short_detection_threshold:	It should be one of 4, 5, 6 and 7V.
  @boost_current_limit:	It should be one of 2300, 2750mA.
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (C) 2009-2010, Lars-Peter Clausen <lars@metafoo.de>
       PCF50633 backlight device driver
  pcf50633_bl_set_brightness_limit
  Update the brightness limit for the pc50633 backlight. The actual brightness
  will not go above the limit. This is useful to limit power drain for example
  on low battery.
  @dev: Pointer to a pcf50633 device
  @limit: The brightness limit. Valid values are 0-63
	
	  Should be different from bl_props.brightness, so we do not exit
	  update_status early the first time it's called
 SPDX-License-Identifier: GPL-2.0-or-later
  LCD driver for HP Jornada 700 series (710720728)
  Copyright (C) 2006-2009 Kristoffer Ericson <kristoffer.ericson@gmail.com>
 start by sending our set contrast cmd to mcu 
 if successful push the new value 
 lets set our default values 
 give it some time to startup 
 SPDX-License-Identifier: GPL-2.0-only
  TI LP8788 MFD - backlight driver
  Copyright 2012 Texas Instruments
  Author: Milo(Woogyom) Kim <milo.kim@ti.com>
 Register address 
	
	  Update chip configuration if platform data exists,
	  otherwise use the default settings.
 Brightness ramp updown 
 Fullscale current setting 
 Brightness control mode 
 request PWM device with the consumer name 
		
		  FIXME: pwm_apply_args() should be removed when switching to
		  the atomic PWM API.
 Initial brightness 
 Backlight device name 
 SPDX-License-Identifier: GPL-2.0-only
 driversvideobacklightplatform_lcd.c
  Copyright 2008 Simtec Electronics
 	Ben Dooks <ben@simtec.co.uk>
  Generic platform-device LCD power control interface.
 SPDX-License-Identifier: GPL-2.0-only
   Backlight Driver for the KB3886 Backlight
   Copyright (c) 2007-2008 Claudio Nieder
   Based on corgi_bl.c by Richard Purdie and kb3886 driver by Robert Woerle
  Back to driver
 SPDX-License-Identifier: GPL-2.0-only
  lms283gf05.c -- support for Samsung LMS283GF05 LCD
  Copyright (c) 2009 Marek Vasut <marek.vasut@gmail.com>
 Magic sequences supplied by manufacturer, for details refer to datasheet 
 REG, VALUE, DELAY 
 De-asserted 
 Asserted 
 De-asserted 
 Asserted 
 kick in the LCD 
 SPDX-License-Identifier: GPL-2.0-only
  l4f00242t03.c -- support for Epson L4F00242T03 LCD
  Copyright 2007-2009 Freescale Semiconductor, Inc. All Rights Reserved.
  Copyright (c) 2009 Alberto Panizzo <maramaopercheseimorto@gmail.com>
 	Inspired by Marek Vasut work in l4f00242t03.c
 tRES >= 100us 
 Do nothing, the LCD is running 
 priv->lcd_state == FB_BLANK_POWERDOWN 
 Send the display in standby 
 Do nothing, the LCD is already in standby 
 priv->lcd_state == FB_BLANK_POWERDOWN 
 power == FB_BLANK_POWERDOWN 
 Clear the screen before shutting down 
 Init the LCD 
 SPDX-License-Identifier: GPL-2.0-only
  Backlight driver for the Kinetic KTD253
  Based on code and know-how from the Samsung GT-S7710
  Gareth Phillips <gareth.phillips@samsung.com>
 Current ratio is n32 from 132 to 3232 
 Additional 10ns as safety factor 
 Additional 10ns as safety factor 
 100 us, now it doesn't look good 
 We always fall back to this when we power on 
	
	  These GPIO operations absolutely can NOT sleep so no _cansleep
	  suffixes, and no using GPIO expanders on slow buses for this!
	 
	  The maximum number of cycles of the loop is 32  so the time taken
	  should nominally be:
	  (T_LOW_NS + T_HIGH_NS + loop_time)  32
	 
	  Architectures do not always support ndelay() and we will get a few us
	  instead. If we get to a critical time limit an interrupt has likely
	  occured in the low part of the loop and we need to restart from the
	  top so we have the backlight in a known state.
 This is already right 
		
		  We need to keep the GPIO low for at least this long
		  to actually switch the KTD253 off.
		
		  These GPIO operations absolutely can NOT sleep so no
		  _cansleep suffixes, and no using GPIO expanders on
		  slow buses for this!
			
			  Something disturbed the backlight setting code when
			  running so we need to bring the PWM back to a known
			  state. This shouldn't happen too much.
 After 132 we loop back to 3232 
 Clamp brightness to hardware max 
 Clamp default brightness to max brightness 
 Bring backlight to a known off state 
 When we just enable the GPIO line we set max brightness 
 sentinel  }
 SPDX-License-Identifier: GPL-2.0-only
  Sanyo LV5207LP LED Driver
  Copyright (C) 2013 Ideas on board SPRL
  Contact: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
 SPDX-License-Identifier: GPL-2.0-or-later
  Backlight driver for HP Jornada 700 series (710720728)
  Copyright (C) 2006-2009 Kristoffer Ericson <kristoffer.ericson@gmail.com>
 check if backlight is on 
 cmd should return txdummy 
 exchange txdummy for value 
 If backlight is off then really turn it off 
 turn off backlight 
 turn on backlight 
 send command to our mcu 
	
	  at this point we expect that the mcu has accepted
	  our command and is waiting for our new value
	  please note that maximum brightness is 255,
	  but due to physical layout it is equal to 0, so we simply
	  invert the value (MAX VALUE - NEW VALUE).
	
	  If infact we get an TXDUMMY as output we are happy and dont
	  make any further comments about it
	
	  note. make sure max brightness is set otherwise
	  you will get seemingly non-related errors when
	  trying to change brightness
 SPDX-License-Identifier: GPL-2.0-only
  tdo24m - SPI-based drivers for Toppoly TDO24M series LCD panels
  Copyright (C) 2008 Marvell International Ltd.
 	Eric Miao <eric.miao@marvell.com>
 use bit 30, 31 as the indicator of command parameter number 
 reset 
 nop 
 nop 
 nop 
 Display ON 
 Output Control 
 Sleep out 
 Wake 
 Display OFF 
 Output Control 
 Sleep in 
 Deep stand by in 
 Blanking period control (1) 
 Blanking period control (2) 
 CKV timing control onoff 
 CKV 1,2 timing control 
 OEV timing control 
 ASW timing control (1) 
 ASW timing control (2) 
 Invert for normally black display 
 Display on 
 Blanking period control (1) 
 Blanking period control (2) 
 CKV timing control onoff 
 CKV 1,2 timing control 
 OEV timing control 
 ASW timing control (1) 
 ASW timing control (2) 
 Invert for normally black display 
 Display on 
 Blanking period control (1) 
 Blanking period control (2) 
 CKV timing control onoff 
 CKV 1,2 timing control 
 OEV timing control 
 ASW timing control (1) 
 ASW timing control (2) 
 Invert for normally black display 
 Display on 
 Output control 
 sleep out 
 Display mode (1) 
 Display mode (2) 
 Display mode 18-bit RGB 
 Drive system change control 
 Booster operation setup 
 Booster mode setup 
 Booster frequency setup 
 Op ampsystem clock 
 VCS voltage 
 VCOM voltage 
 External display signal 
 ASW slew rate 
 Dummy data for QuadData operation 
 Sleep out FR count (A) 
 Sleep out FR count (B) 
 Sleep out FR count (C) 
 Sleep out FR count (D) 
 Sleep out FR count (E) 
 Sleep out FR count (F) 
 Sleep out FR count (G) 
 Gamma 1 fine tuning (1) 
 Gamma 1 fine tuning (2) 
 Gamma 1 inclination adjustment 
 Gamma 1 blue offset adjustment 
 Horizontal clock cycles 
 default to VGA 
 Power down all displays on reboot, poweroff or halt 
 SPDX-License-Identifier: GPL-2.0
 Driver for ORISE Technology OTM3225A SOC for TFT LCD
  Copyright (C) 2017, EETS GmbH, Felix Brack <fb@ltec.ch>
  This driver implements a lcd device for the ORISE OTM3225A display
  controller. The control interface to the display is SPI and the display's
  memory is updated over the 16-bit RGB interface.
  The main source of information for writing this driver was provided by the
  OTM3225A datasheet from ORISE Technology. Some information arise from the
  ILI9328 datasheet from ILITEK as well as from the datasheets and sample code
  provided by Crystalfontz America Inc. who sells the CFAF240320A-032T, a 3.2"
  TFT LC display using the OTM3225A controller.
 instruction register list 
 register to write 
 data to write to 'reg' 
 delay in ms after write 
 address register using index register 
 write data to addressed register 
 execute delay if any 
 SPDX-License-Identifier: GPL-2.0-or-later
  ams369fg06 AMOLED LCD panel driver.
  Copyright (c) 2011 Samsung Electronics Co., Ltd.
  Author: Jingoo Han  <jg1.han@samsung.com>
  Derived from driversvideos6e63m0.c
 gamma value: 2.2 
 set brightness to current value after power on or resume. 
 ams369fg06 lcd panel uses 3-wire 16bits SPI Mode. 
		
		  if lcd panel was off from bootloader then
		  current lcd status is powerdown and then
		  it enables lcd panel.
	
	  when lcd panel is suspend, lcd panel becomes off
	  regardless of status.
 SPDX-License-Identifier: GPL-2.0-or-later
  Backlight Driver for Dialog DA9052 PMICs
  Copyright(c) 2012 Dialog Semiconductor Ltd.
  Author: David Dajun Chen <dchen@diasemi.com>
 SPDX-License-Identifier: GPL-2.0-only
  Backlight driver for Maxim MAX8925
  Copyright (C) 2009 Marvell International Ltd.
       Haojian Zhuang <haojian.zhuang@marvell.com>
 enable WLED output 
 disable WLED output 
 SPDX-License-Identifier: GPL-2.0-only
  Simple PWM based backlight control, board code has to setup
  1) pin configuration so PWM waveforms can output
  2) platform_data being correctly configured
 luminance scale 
  CIE lightness to PWM conversion.
  The CIE 1931 lightness formula is what actually describes how we perceive
  light:
           Y = (L  903.3)           if L ≤ 8
           Y = ((L + 16)  116)^3    if L > 8
  Where Y is the luminance, the amount of light coming out of the screen, and
  is a number between 0.0 and 1.0; and L is the lightness, how bright a human
  perceives the screen to be, and is a number between 0 and 100.
  The following function does the fixed point maths needed to implement the
  above formula.
	
	  @lightness is given as a number between 0 and 1, expressed
	  as a fixed-point number in scale
	  PWM_LUMINANCE_SCALE. Convert to a percentage, still
	  expressed as a fixed-point number, so the above formulas
	  can be applied.
  Create a default correction table for PWM values to create linear brightness
  for LED based backlights using the CIE1931 algorithm.
	
	  Once we have 4096 levels there's little point going much higher...
	  neither interactive sliders nor animation benefits from having
	  more values in the table.
 Fill the table using the cie1931 algorithm 
	
	  These values are optional and set as 0 by default, the out values
	  are modified only if a valid u32 value can be decoded.
	
	  Determine the number of brightness levels, if this property is not
	  set a default table of brightness levels will be used.
 read brightness levels from DT property 
		
		  This property is optional, if is set enables linear
		  interpolation between each of the values of brightness levels
		  and creates a new pre-computed table.
		
		  Make sure that there is at least two entries in the
		  brightness-levels table, otherwise we can't interpolate
		  between two points.
			
			  Recalculate the number of brightness levels, now
			  taking in consideration the number of interpolated
			  steps between two levels.
			
			  Create a new table of brightness levels with all the
			  interpolated steps.
			
			  Fill the interpolated table[x] = y
			  by draw lines between each (x1, y1) to (x2, y2).
 Fill in the last point, since no line starts here. 
			
			  As we use interpolation lets remove current
			  brightness levels table and replace for the
			  new interpolated table.
	
	  Multiplying by 128 means that even in pathological cases such
	  as (max_val - min_val) == nlevels the error at max_val is less
	  than 1%.
 5% 
	
	  If the enable GPIO is present, observable (either as input
	  or output) and off then the backlight is not currently active.
	
	  Synchronize the enable_gpio with the observed state of the
	  hardware.
	
	  Do not change pb->enabled here! pb->enabled essentially
	  tells us if we own one of the regulator's use counts and
	  right now we do not.
 Not booted with device tree or no phandle link to the node 
	
	  If the driver is probed from the device tree and there is a
	  phandle link pointing to the backlight node, it is safe to
	  assume that another driver will enable the backlight at the
	  appropriate time. Therefore, if it is disabled, keep it so.
 Sync up PWM state. 
	
	  The DT case will set the pwm_period_ns field to 0 and store the
	  period, parsed from the DT, in the PWM device. For the non-DT case,
	  set the period from platform data if it has not already been set
	  via the PWM lookup table.
		
		  For the DT case, only when brightness levels is defined
		  data->levels is filled. For the non-DT case, data->levels
		  can come from platform data, however is not usual.
		
		  If no brightness levels are provided and max_brightness is
		  not set, use the default brightness table. For the DT case,
		  max_brightness is set to 0 when brightness levels is not
		  specified. For the non-DT case, max_brightness is usually
		  set to some value.
 Get the PWM period (in nanoseconds) 
		
		  That only happens for the non-DT case, where platform data
		  sets the max_brightness value.
 SPDX-License-Identifier: GPL-2.0-only
   Backlight Driver for Intel-based Apples
   Copyright (c) Red Hat <mjg@redhat.com>
   Based on code from Pommed:
   Copyright (C) 2006 Nicolas Boichat <nicolas @boichat.ch>
   Copyright (C) 2006 Felipe Alfaro Solana <felipe_alfaro @linuxmail.org>
   Copyright (C) 2007 Julien BLACHE <jb@jblache.org>
   This driver triggers SMIs which cause the firmware to change the
   backlight brightness. This is icky in many ways, but it's impractical to
   get at the firmware code in order to figure out what it's actually doing.
 IO resource to allocate. 
 Backlight operations structure. 
 Module parameters. 
  Implementation for machines with Intel chipset.
  Implementation for machines with Nvidia chipset.
 Check that the hardware responds - this may not work under EFI 
 SPDX-License-Identifier: GPL-2.0-only
  Backlight driver for Wolfson Microelectronics WM831x PMICs
  Copyright 2009 Wolfson Microelectonics plc
 Enable the ISINK 
 Enable the DC-DC 
 DCDC first 
 ISINK 
 Set the new brightness 
 Drive current through the ISINK 
	 If we were in the middle of a power transition always shut down
	  for safety.
 We need platform data 
 Figure out the maximum current we can use 
 Configure the ISINK to use for feedback 
 Disable the DCDC if it was started so we can bootstrap 
 SPDX-License-Identifier: GPL-2.0-only
  Backlight Lowlevel Control Abstraction
  Copyright (C) 2003,2004 Hewlett-Packard Company
  DOC: overview
  The backlight core supports implementing backlight drivers.
  A backlight driver registers a driver using
  devm_backlight_device_register(). The properties of the backlight
  driver such as type and max_brightness must be specified.
  When the core detect changes in for example brightness or power state
  the update_status() operation is called. The backlight driver shall
  implement this operation and use it to adjust backlight.
  Several sysfs attributes are provided by the backlight core::
  - brightness         RW, set the requested brightness level
  - actual_brightness  RO, the brightness level used by the HW
  - max_brightness     RO, the maximum  brightness level supported
  See DocumentationABIstablesysfs-class-backlight for the full list.
  The backlight can be adjusted using the sysfs interface, and
  the backlight driver may also support adjusting backlight using
  a hot-key or some other platform or firmware specific way.
  The driver must implement the get_brightness() operation if
  the HW do not support all the levels that can be specified in
  brightness, thus providing user-space access to the actual level
  via the actual_brightness attribute.
  When the backlight changes this is reported to user-space using
  an uevent connected to the actual_brightness attribute.
  When brightness is set by platform specific means, for example
  a hot-key to adjust backlight, the driver must notify the backlight
  core that brightness has changed using backlight_force_update().
  The backlight driver core receives notifications from fbdev and
  if the event is FB_EVENT_BLANK and if the value of blank, from the
  FBIOBLANK ioctrl, results in a change in the backlight state the
  update_status() operation is called.
  fb_notifier_callback
  This callback gets called when something important happens inside a
  framebuffer driver. The backlight core only cares about FB_BLANK_UNBLANK
  which is reported to the driver using backlight_update_status()
  as a state change.
  There may be several fbdev's connected to the backlight device,
  in which case they are kept track of. A state change is only reported
  if there is a change in backlight for the specified fbdev.
 If we aren't interested in this event, skip it immediately ... 
 CONFIG_FB 
  backlight_force_update - tell the backlight subsystem that hardware state
    has changed
  @bd: the backlight device to update
  @reason: reason for update
  Updates the internal state of the backlight in response to a hardware event,
  and generates an uevent to notify userspace. A backlight driver shall call
  backlight_force_update() when the backlight is changed using, for example,
  a hot-key. The updated brightness is read using get_brightness() and the
  brightness value is reported using an uevent.
 deprecated - use devm_backlight_device_register() 
 Set default properties 
 backlight_device_get_by_type - find first backlight device of a type
  @type: the type of backlight device
  Look up the first backlight device of the specified type
  RETURNS:
  Pointer to backlight device if any was found. Otherwise NULL.
  backlight_device_get_by_name - Get backlight device by name
  @name: Device name
  This function looks up a backlight device by its name. It obtains a reference
  on the backlight device and it is the caller's responsibility to drop the
  reference by calling backlight_put().
  Returns:
  A pointer to the backlight device if found, otherwise NULL.
 deprecated - use devm_backlight_device_unregister() 
  backlight_register_notifier - get notified of backlight (un)registration
  @nb: notifier block with the notifier to call on backlight (un)registration
  Register a notifier to get notified when backlight devices get registered
  or unregistered.
  RETURNS:
  0 on success, otherwise a negative error code
  backlight_unregister_notifier - unregister a backlight notifier
  @nb: notifier block to unregister
  Register a notifier to get notified when backlight devices get registered
  or unregistered.
  RETURNS:
  0 on success, otherwise a negative error code
  devm_backlight_device_register - register a new backlight device
  @dev: the device to register
  @name: the name of the device
  @parent: a pointer to the parent device (often the same as @dev)
  @devdata: an optional pointer to be stored for private driver use
  @ops: the backlight operations structure
  @props: the backlight properties
  Creates and registers new backlight device. When a backlight device
  is registered the configuration must be specified in the @props
  parameter. See description of &backlight_properties.
  RETURNS:
  struct backlight on success, or an ERR_PTR on error
  devm_backlight_device_unregister - unregister backlight device
  @dev: the device to unregister
  @bd: the backlight device to unregister
  Deallocates a backlight allocated with devm_backlight_device_register().
  Normally this function will not need to be called and the resource management
  code will ensure that the resources are freed.
  of_find_backlight_by_node() - find backlight device by device-tree node
  @node: device-tree node of the backlight device
  Returns a pointer to the backlight device corresponding to the given DT
  node or NULL if no such backlight device exists or if the device hasn't
  been probed yet.
  This function obtains a reference on the backlight device and it is the
  caller's responsibility to drop the reference by calling put_device() on
  the backlight device's .dev field.
  devm_of_find_backlight - find backlight for a device
  @dev: the device
  This function looks for a property named 'backlight' on the DT node
  connected to @dev and looks up the backlight device. The lookup is
  device managed so the reference to the backlight device is automatically
  dropped on driver detach.
  RETURNS:
  A pointer to the backlight device if found.
  Error pointer -EPROBE_DEFER if the DT property is set, but no backlight
  device is found. NULL if there's no backlight property.
  if this is compiled into the kernel, we need to ensure that the
  class is registered before users of the class try to register lcd's
 SPDX-License-Identifier: GPL-2.0-only
  Backlight driver for Dialog Semiconductor DA9030DA9034
  Copyright (C) 2008 Compulab, Ltd.
 	Mike Rapoport <mike@compulab.co.il>
  Copyright (C) 2006-2008 Marvell International Ltd.
 	Eric Miao <eric.miao@marvell.com>
 adjust the WLED output current 
 SPDX-License-Identifier: GPL-2.0-only
   LCD  Backlight control code for Sharp SL-6000x (tosa)
   Copyright (c) 2005		Dirk Opfer
   Copyright (c) 2007,2008	Dmitry Baryshkov
 SetBacklightDuty 
 SetBacklightVR 
 SPDX-License-Identifier: GPL-2.0-or-later
  Backlight driver for Analog Devices ADP5520ADP5501 MFD PMICs
  Copyright 2009 Analog Devices Inc.
 Disable Ambient Light auto adjust 
			
			  MAX_BRIGHTNESS -> Enable Ambient Light auto adjust
			  restore daylight l3 sysfs brightness
 SPDX-License-Identifier: GPL-2.0-only
  Backlight driver for ArcticSand ARC_X_C_0N_0N Devices
  Copyright 2016 ArcticSand, Inc.
  Author : Brian Dodge <bdodge@arcticsand.com>
  struct arcxcnn_platform_data
  @name		: Backlight driver name (NULL will use default)
  @initial_brightness	: initial value of backlight brightness
  @leden		: initial LED string enables, upper bit is global onoff
  @led_config_0	: fading speed (period between intensity steps)
  @led_config_1	: misc settings, see datasheet
  @dim_freq		: pwm dimming frequency if in pwm mode
  @comp_config		: misc config, see datasheet
  @filter_config	: RCPWM filter config, see datasheet
  @trim_config		: full scale current trim, see datasheet
 Command Register 
   I2C Standby 
   Reset 
   Boost 
   --- Over Voltage Threshold 
   <rsvrd> Over Voltage Threshold 
   20v Over Voltage Threshold 
   24v Over Voltage Threshold 
   31.4v Over Voltage Threshold 
   part (0) or full (1) ext. comp 
 Configuration 
 Status 1 
 Status 2 
 Fading Control 
 ILED Configuration 
   config dim mode pwm 
   config dim mode internal 
 LED Enable Register 
   Full-scale current set extern 
   LED string enables mask 
   Bits of LED string enables 
 LED ISET LSB (in upper nibble) 
 ISET LSB Left Shift 
 LED ISET MSB (8 bits) 
 lower nibble of brightness goes in upper nibble of LSB register 
 remaining 8 bits of brightness go in MSB register 
 set power-onoffsave modes 
 device tree entry isn't required, defaults are OK 
 all on is default 
 for each enable in source, set bit in led enable 
 reset the device 
 Setup defaults based on power-on defaults 
 insure dim mode is not default pwm 
 constrain settings to what is possible 
 set initial brightness 
 set other register values directly 
 set initial LED Enables 
 disable all strings (ignore errors) 
 reset the device (ignore errors) 
 SPDX-License-Identifier: GPL-2.0-only
  Power control for Samsung LTV350QV Quarter VGA LCD Panel
  Copyright (C) 2006, 2007 Atmel Corporation
  The power-on and power-off sequences are taken from the
  LTV350QV-F04 data sheet from Samsung. The register definitions are
  taken from the S6F2002 command list also from Samsung. Both
  documents are distributed with the AVR32 Linux BSP CD from Atmel.
  There's still some voodoo going on here, but it's a lot better than
  in the first incarnation of the driver where all we had was the raw
  numbers from the initialization sequence.
 register index 
 register value 
 The comments are taken straight from the data sheet 
 Power On Reset Display off State 
 Power Setting Function 1 
 Power Setting Function 2 
 Instruction Setting 
 Wait more than 2 frames 
 Display On Sequence 
 Display should now be ON. Phew. 
	
	  Try to recover. Error handling probably isn't very useful
	  at this point, just make a best effort to switch the panel
	  off.
 Display Off Sequence 
 Power down setting 1 
 Wait at least 1 ms 
 Power down setting 2 
	
	  No point in trying to recover here. If we can't switch the
	  panel off, what are we supposed to do other than inform the
	  user about the failure?
 Display power should now be OFF 
 Power down all displays on reboot, poweroff or halt 
  tps65217_bl.c
  TPS65217 backlight driver
  Copyright (C) 2012 Matthias Kaehlcke
  Author: Matthias Kaehlcke <matthias@kaehlcke.net>
  This program is free software; you can redistribute it andor
  modify it under the terms of the GNU General Public License as
  published by the Free Software Foundation version 2.
  This program is distributed "as is" WITHOUT ANY WARRANTY of any
  kind, whether express or implied; without even the implied warranty
  of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
 select ISET_1 current level 
 select ISET2 current level 
 set PWM frequency 
 sentinel  },
 SPDX-License-Identifier: GPL-2.0-only
 driversvideobacklightvgg2432a4.c
  VGG2432A4 (ILI9320) LCD controller driver.
  Copyright 2007 Simtec Electronics
 	http:armlinux.simtec.co.uk
 	Ben Dooks <ben@simtec.co.uk>
 Device initialisation sequences 
 set direction and scan mode gate 
 Set VCore before anything else (VGG243237-6UFLWA) 
 Start the oscillator up before we can do anything else. 
 must wait at-lesat 10ms after starting 
 Device probe 
 SPDX-License-Identifier: GPL-2.0-or-later
  lms501kf03 TFT LCD panel driver.
  Copyright (c) 2012 Samsung Electronics Co., Ltd.
  Author: Jingoo Han  <jg1.han@samsung.com>
	
	  According to the datasheet, 120ms delay time is required.
	  After sleep out sequence, command is blocked for 120ms.
	  Thus, LDI should wait for 120ms.
 lms501kf03 lcd panel uses 3-wire 9-bit SPI Mode. 
		
		  if lcd panel was off from bootloader then
		  current lcd status is powerdown and then
		  it enables lcd panel.
	
	  when lcd panel is suspend, lcd panel becomes off
	  regardless of status.
 SPDX-License-Identifier: GPL-2.0-or-later
  Backlight driver for OMAP based boards.
  Copyright (c) 2006 Andrzej Zaborowski  <balrog@zabor.org>
 Conflicts with UART3 
 SPDX-License-Identifier: GPL-2.0-only
  gpio_backlight.c - Simple GPIO-controlled backlight
 Set the initial power state 
 Not booted with device tree or no phandle link to the node 
 sentinel  }
 SPDX-License-Identifier: GPL-2.0+
  LCD Backlight driver for RAVE SP
  Copyright (C) 2018 Zodiac Inflight Innovations
	
	  If there is a phandle pointing to the device node we can
	  assume that another device will manage the status changes.
	  If not we make sure the backlight is in a consistent state.
 SPDX-License-Identifier: GPL-2.0-only
  TI LP855x Backlight Driver
 			Copyright (C) 2011 Texas Instruments
 LP85501236 Registers 
 LP85557 Registers 
  struct lp855x_device_config
  @pre_init_device: init device function call before updating the brightness
  @reg_brightness: register address for brigthenss control
  @reg_devicectrl: register address for device control
  @post_init_device: late init device function call
 regulator for VDD input 
 regulator for ENVDDIO input 
 BL_ON = 0 before updating EPROM settings 
 BL_ON = 1 after updating EPROM settings 
  Device specific configuration flow
     a) pre_init_device(optional)
     b) update the brightness register
     c) update device control register
     d) update ROM area(optional)
     e) post_init_device(optional)
 request pwm device with the consumer name 
		
		  FIXME: pwm_apply_args() should be removed when switching to
		  the atomic PWM API.
 Fill ROM platform data if defined 
		
		  LP8555 datasheet says t_RESPONSE (time between VDDIO and
		  I2C) is 1ms.
 SPDX-License-Identifier: GPL-2.0-or-later
  Backlight driver for Analog Devices ADP8860 Backlight Devices
  Copyright 2009-2010 Analog Devices Inc.
 Manufacturer and device ID 
 Device mode and status 
 Device mode and Status Register 2 
 Interrupts enable 
 Configuration register 
 Sink enable backlight or independent 
 Backlight off timeout 
 Backlight dim timeout 
 Backlight fade in and out rates 
 Backlight (Brightness Level 1-daylight) maximum current 
 Backlight (Brightness Level 1-daylight) dim current 
 Backlight (Brightness Level 2-office) maximum current 
 Backlight (Brightness Level 2-office) dim current 
 Backlight (Brightness Level 3-dark) maximum current 
 Backlight (Brightness Level 3-dark) dim current 
 Independent sink current fade control register 
 Independent sink current control register 
 Independent Sink Current Timer Register LED[7:5] 
 Independent Sink Current Timer Register LED[4:1] 
 Independent sink current fade register 
 Independent Sink Current LED7 
 Independent Sink Current LED6 
 Independent Sink Current LED5 
 Independent Sink Current LED4 
 Independent Sink Current LED3 
 Independent Sink Current LED2 
 Independent Sink Current LED1 
 Comparator configuration 
 Second comparator configuration 
 L2 comparator reference 
 L2 hysteresis 
 L3 comparator reference 
 L3 hysteresis 
 First phototransistor ambient light level-low byte register 
 First phototransistor ambient light level-high byte register 
 Second phototransistor ambient light level-low byte register 
 Second phototransistor ambient light level-high byte register 
 Analog Devices ADP8860 Manufacturer ID 
 Analog Devices ADP8861 Manufacturer ID 
 Analog Devices ADP8863 Manufacturer ID 
 MDCR Device mode and status 
 ADP8860_CCFG Main ALS comparator level enable 
  Independent sink  LED
 Disable Ambient Light auto adjust 
			
			  MAX_BRIGHTNESS -> Enable Ambient Light auto adjust
			  restore daylight l1 sysfs brightness
 Return 13-bit conversion value for the first light sensor 
 Enable automatic ambient light sensing 
 Disable automatic ambient light sensing 
 Set user supplied ambient light zone 
 It's confirmed that the DEVID field is actually a REVID 
 SPDX-License-Identifier: GPL-2.0-only
 common properties 
 vendor properties 
 SPDX-License-Identifier: GPL-2.0-only
  Backlight driver for Pandora handheld.
  Pandora uses TWL4030 PWM0 -> TPS61161 combo for control backlight.
  Based on pwm_bl.c
  Copyright 2009,2012 Gražvydas Ignotas <notasas@gmail.com>
 range accepted by hardware 
 first disable PWM0 output, then clock 
		
		  set PWM duty cycle to max. TPS61161 seems to use this
		  to calibrate it's PWM sensitivity when it starts.
 first enable clock, then PWM0 out 
		
		  TI made it very easy to enable digital control, so easy that
		  it often triggers unintentionally and disabes PWM control,
		  so wait until 1 wire mode detection window ends.
 64 cycle period, ON position 0 
 enable PWM function in pin mux 
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) 2015-2019 Texas Instruments Incorporated -  http:www.ti.com
  Author: Tomi Valkeinen <tomi.valkeinen@ti.com>
  Based on pwm_bl.c
 check that the LEDs all have the same brightness range 
 get the default brightness from the first LED from the list 
		
		  Try to map actual LED brightness to backlight brightness
		  level
 SPDX-License-Identifier: GPL-2.0-only
  Backlight control code for Sharp Zaurus SL-5500
  Copyright 2005 John Lenz <lenz@cs.wisc.edu>
  Maintainer: Pavel Machek <pavel@ucw.cz> (unless John wants to :-)
  This driver assumes single CPU. That's okay, because collie is
  slightly old hardware, and no one is going to retrofit second CPU to
  old PDA.
 LCD power functions 
 TFTCRST | CPSOUT=0 | CPSEN 
 Set CPSD 
 TFTCRST | CPSOUT=0 | CPSEN 
 TFTCRST=1 | CPSOUT=1 | CPSEN = 0 
 TFTCRST=0 | CPSOUT=0 | CPSEN = 0 
 read comadj 
	
	  AC and non-AC are handled differently,
	  but produce same results in sharp code?
	
	  the poodle_lcd_power function is called for the first time
	  from fs_initcall, which is before locomo is activated.
	  We need to recall poodle_lcd_power here
 Set up frontlight so that screen is readable 
 SPDX-License-Identifier: GPL-2.0-only
  Backlight driver for Marvell Semiconductor 88PM8606
  Copyright (C) 2009 Marvell International Ltd.
 	Haojian Zhuang <haojian.zhuang@marvell.com>
 set WLED_ON bit as 100% 
 set WLED_ON bit as 100% 
 clear WLED_ON bit since it's not 100% 
 read current backlight 
 SPDX-License-Identifier: GPL-2.0-only
 Simple driver for Texas Instruments LM3630A Backlight driver chip
 Copyright (C) 2012 Texas Instruments
 i2c access 
 initialize chip 
 set Filter Strength Register 
 set Cofig. register 
 set boost control 
 set current A 
 set current B 
 set control 
 set brightness A and B 
 interrupt handling 
 update and get brightness 
 pwm control 
 disable sleep 
 minimum brightness is 0x04 
 disable sleep 
 update and get brightness 
 pwm control 
 disable sleep 
 minimum brightness is 0x04 
 disable sleep 
 default values 
 chip initialize 
 backlight register 
 pwm 
 interrupt enable  : irq 0 is not allowed 
 SPDX-License-Identifier: GPL-2.0-only
 Simple driver for Texas Instruments LM3639 Backlight + Flash LED driver chip
 Copyright (C) 2012 Texas Instruments
 initialize chip 
 input pins config. 
 init brightness 
 output pins config. 
 update and get brightness 
 pwm control 
 i2c control and set brigtness 
 backlight mapping mode 
 torch 
 brightness 0 means off state 
 flash 
 torch off before flash control 
 brightness 0 means off state 
 chip initialize 
 backlight 
 flash 
 torch 
 SPDX-License-Identifier: GPL-2.0-only
 Copyright (c) 2015, Sony Mobile Communications, AB.
 From DT binding 
 WLED3WLED4 control registers 
 WLED3WLED4 sink registers 
 WLED3 specific per-'string' registers below 
 WLED4 specific control registers 
 WLED4 specific sink registers 
 WLED4 specific per-'string' registers below 
 WLED5 specific control registers 
 WLED5 specific sink registers 
 WLED5 specific per-'string' registers below 
 Lock to avoid race from thread irq handler 
 Configures the brightness. Applicable for wled3, wled4 and wled5 
 Configures the cabc register. Applicable for wled4 and wled5 
	
	  Toggles the sync bit for the brightness update to take place.
	  Applicable for WLED3, WLED4 and WLED5.
	
	  Time to wait before checking the OVP status after wled module enable.
	  Applicable for WLED4 and WLED5.
	
	  Determines if the auto string detection is required.
	  Applicable for WLED4 and WLED5
 WLED4's lower limit of operation is 0.4% 
 WLED5's lower limit is 0.1% 
			
			  The hardware generates a storm of spurious OVP
			  interrupts during soft start operations. So defer
			  enabling the IRQ for 10ms to ensure that the
			  soft start is complete.
 For WLED5, get the delay based on OVP timer 
			
			  For WLED5 toggling the MOD_SYNC_BIT updates the
			  brightness
 Read configured sink configuration 
 Disable the module before starting detection 
 Set low brightness across all sinks 
 Disable all sinks 
 Iterate through the strings one by one 
 Enable feedback control 
 Enable the sink 
 Enable the module 
 Disable the module 
 Write the new sink configuration 
 Enable valid sinks 
 Disable modulator_en for unused sink 
 Enable CABC 
 Restore the feedback setting 
 Restore brightness 
	
	  Check if the OVP fault was an occasional one
	  or if it's firing continuously, the latter qualifies
	  for an auto-detection check.
	
	  Unlike WLED4, WLED5 has OVP fault density interrupt configuration
	  i.e. to count the number of OVP alarms for a certain duration before
	  triggering OVP fault interrupt. By default, number of OVP fault
	  events counted before an interrupt is fired is 32 and the time
	  interval is 12 ms. If we see one OVP fault interrupt, then that
	  should qualify for a real OVP fault condition to run auto detection
	  algorithm.
 Unlock the secure register access 
 Per sinkstring configuration 
 Per sinkstring configuration 
 Enable one of the modulators A or B based on mod_sel 
 This updates only FSC configuration in WLED5 
	
	  0000 - 38.5 V
	  0001 - 37 V ..
	  1111 - 16 V
 Keep OVP irq disabled until module is enabled 
 SPDX-License-Identifier: GPL-2.0-only
   LCD  Backlight control code for Sharp SL-6000x (tosa)
   Copyright (c) 2005		Dirk Opfer
   Copyright (c) 2007,2008	Dmitry Baryshkov
  Timing Generator
 bl_enable GP04=1 otherwise GP04=0
 TG on 
 delayed 0clk TCTL signal for VGA 
 GPOS0=powercontrol, GPOS1=GPIO, GPOS2=TCTL 
 TG LCD pannel power up 
 TG LCD GVSS 
		
		  after the pannel is powered up the first time,
		  we can access the i2c bus so probe for the DAC
 TG LCD VHSA off 
 TG LCD signal off 
 TG Off 
 default to VGA mode 
	
	  bits_per_word cannot be configured in platform data
 SPDX-License-Identifier: GPL-2.0-only
  Driver for the Cirrus EP93xx lcd backlight
  Copyright (c) 2010 H Hartley Sweeten <hsweeten@visionengravers.com>
  This driver controls the pulse width modulated brightness control output,
  BRIGHT, on the Cirrus EP9307, EP9312, and EP9315 processors.
	
	  FIXME - We don't do a request_mem_region here because we are
	  sharing the register space with the framebuffer driver (see
	  driversvideoep93xx-fb.c) and doing so will cause the second
	  loaded driver to return -EBUSY.
	 
	  NOTE: No locking is required; the framebuffer does not touch
	  this register.
 SPDX-License-Identifier: GPL-2.0-only
  linuxdriversvideobacklightaat2870_bl.c
  Copyright (c) 2011, NVIDIA Corporation.
  Author: Jin Park <jinyoungp@nvidia.com>
 current brightness 
 SPDX-License-Identifier: GPL-2.0-only
  ROHM Semiconductor BD6107 LED Driver
  Copyright (C) 2013 Ideas on board SPRL
  Contact: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
 Assert the reset line (gpiolib will handle active low) 
	
	  Request the reset GPIO line with GPIOD_OUT_HIGH meaning asserted,
	  so in the machine descriptor table (or other hardware description),
	  the line should be flagged as active low so this will assert
	  the reset.
 SPDX-License-Identifier: GPL-2.0-only
 driversvideobacklightili9320.c
  ILI9320 LCD controller driver core.
  Copyright 2007 Simtec Electronics
 	http:armlinux.simtec.co.uk
 	Ben Dooks <ben@simtec.co.uk>
	 spi message consits of:
	  first byte: ID and operation
 second message is the data to transfer 
	 fill the two messages we are going to use to send the data
	  with, the first the address followed by the data. The datasheet
	  says they should be done as two distinct cycles of the SPI CS line.
 verify we where given some information 
 allocate and initialse our state 
 Power down all displays on reboot, poweroff or halt 
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (c) Intel Corp. 2007.
  All Rights Reserved.
  Intel funded Tungsten Graphics (http:www.tungstengraphics.com) to
  develop this driver.
  This file is part of the Carillo Ranch video subsystem driver.
  Authors:
    Thomas Hellstrom <thomas-at-tungstengraphics-dot-com>
    Alan Hourihane <alanh-at-tungstengraphics-dot-com>
 The LVDS- and panel power controls sits on the
  GPIO port of the ISA bridge.
 The PLL Clock register sits on Host bridge 
 OFF 
 FULL ON 
 Make sure LVDS controller is down. 
 Power up Panel 
 Power up LVDS controller 
 Power down LVDS controller first to avoid high currents 
 SPDX-License-Identifier: GPL-2.0
  AS3711 PMIC backlight driver, using DCDC Step Up Converters
  Copyright (C) 2012 Renesas Electronics Corporation
  Author: Guennadi Liakhovetski, <g.liakhovetski@gmx.de>
 Only all equal current values are supported 
  Someone with less fragile or less expensive hardware could try to simplify
  the brightness adjustment procedure.
 Manual one current feedback pin below 
 Turn SU2 off 
 max tuning I = 31uA for voltage- and 38250uA for current-feedback 
		
		  At least one su2-auto-curr must be specified iff
		  AS3711_SU2_CURR_AUTO is used
	
	  Due to possible hardware damage I chose to block all modes,
	  unsupported on my hardware. Anyone, wishing to use any of those modes
	  will have to first review the code, then activate and test it.
 SPDX-License-Identifier: GPL-2.0-only
  iPAQ microcontroller backlight support
  Author : Linus Walleij <linus.walleij@linaro.org>
	
	  Message format:
	  Byte 0: backlight instance (usually 1)
	  Byte 1: onoff
	  Byte 2: intensity, 0-255
 SPDX-License-Identifier: GPL-2.0-or-later
  Backlight driver for Analog Devices ADP8870 Backlight Devices
  Copyright 2009-2011 Analog Devices Inc.
 Manufacturer and device ID 
 Device mode and status 
 Interrupts status 
 Interrupts enable 
 Configuration register 
 Sink enable backlight or independent 
 PWM Enable Selection Register 
 Backlight off timeout 
 Backlight dim timeout 
 Backlight fade in and out rates 
 Backlight (Brightness Level 1-daylight) maximum current 
 Backlight (Brightness Level 1-daylight) dim current 
 Backlight (Brightness Level 2-bright) maximum current 
 Backlight (Brightness Level 2-bright) dim current 
 Backlight (Brightness Level 3-office) maximum current 
 Backlight (Brightness Level 3-office) dim current 
 Backlight (Brightness Level 4-indoor) maximum current 
 Backlight (Brightness Level 4-indoor) dim current 
 Backlight (Brightness Level 5-dark) maximum current 
 Backlight (Brightness Level 5-dark) dim current 
 Independent sink current fade law register 
 Independent sink current control register 
 Independent Sink Current Timer Register LED[7:5] 
 Independent Sink Current Timer Register LED[4:1] 
 Independent sink current fade register 
 Independent Sink Current LED1 
 Independent Sink Current LED2 
 Independent Sink Current LED3 
 Independent Sink Current LED4 
 Independent Sink Current LED5 
 Independent Sink Current LED6 
 Independent Sink Current LED7 (Brightness Level 1-daylight) 
 Independent Sink Current LED7 (Brightness Level 2-bright) 
 Independent Sink Current LED7 (Brightness Level 3-office) 
 Independent Sink Current LED7 (Brightness Level 4-indoor) 
 Independent Sink Current LED7 (Brightness Level 5-dark) 
 ALS Comparator Control Register 
 Main ALS comparator level enable 
 Second ALS comparator level enable 
 Main ALS Comparator Status Register 
 Second ALS Comparator Status Register 
 L2 comparator reference 
 L2 hysteresis 
 L3 comparator reference 
 L3 hysteresis 
 L4 comparator reference 
 L4 hysteresis 
 L5 comparator reference 
 L5 hysteresis 
 First phototransistor ambient light level-low byte register 
 First phototransistor ambient light level-high byte register 
 Second phototransistor ambient light level-low byte register 
 Second phototransistor ambient light level-high byte register 
 Analog Devices AD8870 Manufacturer and device ID 
 MDCR Device mode and status 
 ADP8870_ALS1_EN Main ALS comparator level enable 
  Independent sink  LED
	
	  Use workqueue for IO since I2C operations can sleep.
 Disable Ambient Light auto adjust 
			
			  MAX_BRIGHTNESS -> Enable Ambient Light auto adjust
			  restore daylight l1 sysfs brightness
	
	  ADP8870 Rev0 requires GDWN_DIS bit set
 Return 13-bit conversion value for the first light sensor 
 Enable automatic ambient light sensing 
 Disable automatic ambient light sensing 
 Set user supplied ambient light zone 
   Backlight Driver for HP Jornada 680
   Copyright (c) 2005 Andriy Skulysh
   Based on Sharp's Corgi Backlight Driver
  This file is subject to the terms and conditions of the GNU General Public
  License.  See the file "COPYING" in the main directory of this archive
  for more details.
   linuxdriversvideoconsolesticon.c - console driver using HP's STI firmware
 	Copyright (C) 2000 Philipp Rumpf <prumpf@tux.org>
 	Copyright (C) 2002-2020 Helge Deller <deller@gmx.de>
   Based on linuxdriversvideovgacon.c and linuxdriversvideofbcon.c,
   which were
 	Created 28 Sep 1997 by Geert Uytterhoeven
 	Rewritten by Martin Mares <mj@ucw.cz>, July 1998
 	Copyright (C) 1991, 1992  Linus Torvalds
 			    1995  Jay Estabrook
 	Copyright (C) 1995 Geert Uytterhoeven
 	Copyright (C) 1993 Bjoern Brauel
 			   Roman Hodek
 	Copyright (C) 1993 Hamish Macdonald
 			   Greg Harp
 	Copyright (C) 1994 David Carter [carter@compsci.bristol.ac.uk]
 	      with work by William Rucklidge (wjr@cs.cornell.edu)
 			   Geert Uytterhoeven
 			   Jes Sorensen (jds@kom.auc.dk)
 			   Martin Apel
 	      with work by Guenther Kelleter
 			   Martin Schaller
 			   Andreas Schwab
 			   Emmanuel Marty (core@ggi-project.org)
 			   Jakub Jelinek (jj@ultra.linux.cz)
 			   Martin Mares <mj@ucw.cz>
   This file is subject to the terms and conditions of the GNU General Public
   License.  See the file COPYING in the main directory of this archive for
   more details.
 switching to graphics mode 
 borrowed from fbcon.c 
 this is the sti_struct used for this console 
 no cursor update if screen is blanked 
 usage counter 
 check if font is already used by other console 
 current font is the same as the new one 
 clear screen with old font: we now may have less rows 
 delete old font in case it is a user font 
 need to repaint screen if cols & rows are same as old font 
 free memory used by user font 
 needs refreshing 
 vga_can_do_color; 
 already initialized ? 
 SPDX-License-Identifier: GPL-2.0-only
   linuxdriversvideoconsolesticore.c -
 	core code for console driver using HP's STI firmware
 	Copyright (C) 2000 Philipp Rumpf <prumpf@tux.org>
 	Copyright (C) 2001-2020 Helge Deller <deller@gmx.de>
 	Copyright (C) 2001-2002 Thomas Bogendoerfer <tsbogend@alpha.franken.de>
  TODO:
  - call STI in virtual mode rather than in real mode
  - screen blanking with state_mgmt() in text mode STI ? 
  - try to make it work on m68k hp workstations ;)
 number of STI ROMS found and their ptrs to each struct 
 The colour indices used by STI are
    0 - Black
    1 - White
    2 - Red
    3 - YellowBrown
    4 - Green
    5 - Cyan
    6 - Blue
    7 - Magenta
  So we have the same colours as VGA (basically one bit each for R, G, B),
 # of text planes (max 3 for STI) 
 this still needs to be revisited (see archpariscmminit.c:246) ! 
	Assuming the machine has multiple STI consoles (=graphic cards) which
 	all get detected by sticon, the user may define with the linux kernel
 	parameter sti=<x> which of them will be the initial boot-console.
 	<x> is a number between 0 and MAX_STI_ROMS, with 0 as the default 
 	STI screen.
	
	  The default font can be selected in various ways.
	  a) sti_font=VGA8x16, sti_font=10x20, sti_font=1020 selects
	     an built-in Linux framebuffer font.
	  b) sti_font=<index>, where index is (1..x) with 1 selecting
	     the first HP STI ROM built-in font..
 fb font name 
	The optional linux kernel parameter "sti_font" defines which font
 	should be used by the sticon driver to draw characters to the screen.
 	Possible values are:
 	- sti_font=<fb_fontname>:
 		<fb_fontname> is the name of one of the linux-kernel built-in 
 		framebuffer font names (e.g. VGA8x16, SUN22x18). 
 		This is only available if the fonts have been statically compiled 
 		in with e.g. the CONFIG_FONT_8x16 or CONFIG_FONT_SUN12x22 options.
 	- sti_font=<number>	(<number> = 1,2,3,...)
 		most STI ROMs have built-in HP specific fonts, which can be selected
 		by giving the desired number to the sticon driver. 
 		NOTE: This number is machine and STI ROM dependend.
 	- sti_font=<height>x<width>  (e.g. sti_font=16x8)
 		<height> and <width> gives hints to the height and width of the
 		font which the user wants. The sticon driver will try to use
 		a font with this height and width, but if no suitable font is
 		found, sticon will use the default 8x8 font.
 dump extended cfg  
 STI default 
 last entry reached ? 
 check for framebuffer-font first 
 store new ptr to byte-mode font and delete old font 
 read the ROM size directly from the struct in ROM  
 check if the ROM routines in this card are compatible 
 HyperA or HyperB ? 
parisc.wiki.kernel.org"
 fall through 
	 if we can't read the ROM, bail out early.  Not being able
 check for a PCI ROM structure 
			 The ROM could have multiple architecture 
 read 16 bytes from the pci region mapper array 
 not enough memory 
	 disable STI PCI ROM. ROM and card RAM overlap and
	  leaving it enabled would force HPMCs
  on newer systems PDC gives the address of the ROM 
  in the additional address field addr[1] while on
  older Systems the PDC stores it in page0->proc_sti 
 CONFIG_PCI 
 terminate list 
  sti_init_roms() - detects all STI ROMs and stores them in sti_roms[]
 Register drivers for native & PCI cards 
 if we didn't find the given default sti, take the first one 
  index = 0 gives default sti
  index > 0 gives other stis in detection order
 Check for overflow when using 32bit STI on 64bit kernel. 
   linuxdriversvideomdacon.c -- Low level MDA based console driver
 	(c) 1998 Andrew Apted <ajapted@netspace.net.au>
       including portions (c) 1995-1998 Patrick Caulfield.
       slight improvements (c) 2000 Edward Betts <edward@debian.org>
   This file is based on the VGA console driver (vgacon.c):
 	
 	Created 28 Sep 1997 by Geert Uytterhoeven
 	Rewritten by Martin Mares <mj@ucw.cz>, July 1998
   and on the old console.c, vga.c and vesa_blank.c drivers:
 	Copyright (C) 1991, 1992  Linus Torvalds
 			    1995  Jay Estabrook
   This file is subject to the terms and conditions of the GNU General Public
   License.  See the file COPYING in the main directory of this archive for
   more details.
   Changelog:
   Paul G. (032001) Fix mdacon= boot prompt to use __setup().
 description of the hardware layout 
 Base of video memory 
 Size of video memory 
 Number of text columns 
 Number of text lines 
 Register select port 
 Register value port 
 Mode control port 
 Status and Config port 
 Graphics control port 
 current hardware state 
 console information 
 MDA register values
  MDA could easily be classified as "pre-dinosaur hardware".
 disable cursor 
 cursor start 
 cursor end 
 command line format: mdacon=<first>,<last> 
 do a memory check 
 check if we have 4K or 8K 
	 Ok, there is definitely a card registering at the correct
	  memory location, so now we do an IO port test.
 Edward: These two mess `tests' mess up my cursor on bootup 
 cursor low register 
 cursor low register 
	 See if the card is a Hercules, by checking whether the vsync
	  bit of the status register is changing.  This test lasts for
	  approximately 110th of a second.
 horizontal total 
 horizontal displayed 
 horizontal sync pos 
 horizontal sync width 
 vertical total 
 vertical total adjust 
 vertical displayed 
 vertical sync pos 
 interlace mode 
 maximum scanline 
 cursor start 
 cursor end 
 start address 
 cursor location 
 cursor looks ugly during boot-up, so turn it off 
 reverse video 
 make the first MDA console visible 
 con_set_default_unimap(c->vc_num); 
	 Underline and reverse-video are mutually exclusive on MDA.
	  Since reverse-video is used for cursors and selected areas,
	  it takes precedence. 
 reverse 
 underline 
 intensity  
 blink  
	 The attribute is just a bit vector:
	 
	 	Bit 0..1 : intensity (0..2)
	 	Bit 2    : underline
	 	Bit 3    : reverse
	 	Bit 7    : blink
 redrawing needed 
 Tell console.c that it has to restore the screen itself 
 disable video 
 maximum realistic size 
   The console `switch' structure for the MDA based console
   linuxdriversvideovgacon.c -- Low level VGA based console driver
 	Created 28 Sep 1997 by Geert Uytterhoeven
 	Rewritten by Martin Mares <mj@ucw.cz>, July 1998
   This file is based on the old console.c, vga.c and vesa_blank.c drivers.
 	Copyright (C) 1991, 1992  Linus Torvalds
 			    1995  Jay Estabrook
 	User definable mapping table and font loading by Eugene G. Crosser,
 	<crosser@average.org>
 	Improved loadable fontUTF-8 support by H. Peter Anvin
 	Feb-Sep 1995 <peter.anvin@linux.org>
 	Colour palette handling, by Simon Tatham
 	17-Jun-95 <sgt20@cam.ac.uk>
 	if 512 char mode is already enabled don't re-enable it,
 	because it causes screen to flicker, by Mitja Horvat
 	5-May-96 <mitja.horvat@guest.arnes.si>
 	Use 2 outw instead of 4 outb_p to reduce erroneous text
 	flashing on RHS of screen during heavy console scrolling .
 	Oct 1996, Paul Gortmaker.
   This file is subject to the terms and conditions of the GNU General Public
   License.  See the file COPYING in the main directory of this archive for
   more details.
 VGA does not support fontwidths != 8 
   Interface used by the world
 Description of the hardware situation 
 Base of video memory 
 End of video memory 
 Size of video memory 
 Video register select port 
 Video register value port 
 Number of text columns 
 Number of text lines 
 Do we support colors? 
 Height of default screen font 
 Card type 
 last vc_origin offset before wrap 
 force text mode - used by kernel modesetting 
	
	  Disabling scrollback is required for the Braillex ib80-piezo
	  Braille reader made by F.H. Papenmeier (Germany).
	  Use the "no-scroll" bootflag.
  By replacing the four outb_p with two back to back outw, we can reduce
  the window of opportunity to see text mislocated to the RHS of the
  console during heavy scrolling activity. However there is the remote
  possibility that some pre-dinosaur hardware won't like the back to back
  IO. Since the Xservers get away with it, we should be able to as well.
	
	  ddprintk might set the console position from interrupt
	  handlers, thus the write has to be IRQ-atomic.
 boot_params.screen_info reasonably initialized? 
 VGA16 modes are not handled by VGACON 
 320x2004 
 640x2004 
 640x3504 
 640x4804 
 800x6004 (VESA) 
 Monochrome display 
 If not, it is color. 
				
				  Normalise the palette registers, to point
				  the 16 screen colours to the first 16
				  DAC entries.
				
				  Now set the DAC registers back to their
				  default values
	
	       Find out if there is a graphics card present.
	       Are there smarter methods around?
 This may be suboptimal but is a safe bet - go with it 
	
	  We cannot be loaded as a module, therefore init is always 1,
	  but vgacon_init can be called more than once, and init will
	  not be 1.
 set dimensions manually if init != 0 since vc_resize() will fail 
 Only set the default if the user didn't deliberately override it 
 When closing the active console, reset video origin 
 deprotect registers 
 reprotect registers 
	
	  We need to save screen size here as it's the only way
	  we can spot the screen has been resized and we need to
	  set size of freshly allocated screens ourselves.
	 We can only copy out the size of the video buffer here,
 Redrawing not needed 
 structure holding original VGA register settings 
 Sequencer Index reg.   
 CRT-Contr. Index reg.  
 Miscellaneous register 
 CRT-Controller:00h 
 CRT-Controller:01h 
 CRT-Controller:04h 
 CRT-Controller:05h 
 CRT-Controller:07h 
 CRT-Controller:10h 
 CRT-Controller:11h 
 CRT-Controller:17h 
 Seq-Controller:01h 
 save original values of VGA controller registers 
 HorizontalTotal 
 HorizDisplayEnd 
 StartHorizRetrace 
 EndHorizRetrace 
 Overflow 
 StartVertRetrace 
 EndVertRetrace 
 ModeControl 
 assure that video is enabled 
 "0x20" is VIDEO_ENABLE_bit in register 01 of sequencer 
 test for vertical retrace in process.... 
	
	  Set <End of vertical retrace> to minimum (0) and
	  <Start of vertical Retrace> to maximum (incl. overflow)
	  Result: turn off vertical sync (VSync) pulse.
 StartVertRetrace 
 maximum value 
 EndVertRetrace 
 minimum (bits 0..3)  
 Overflow 
 bits 9,10 of vert. retrace 
		
		  Set <End of horizontal retrace> to minimum (0) and
		   <Start of horizontal Retrace> to maximum
		  Result: turn off horizontal sync (HSync) pulse.
 StartHorizRetrace 
 maximum 
 EndHorizRetrace 
 minimum (0) 
 restore both index registers 
 restore original values of VGA controller registers 
 HorizontalTotal 
 HorizDisplayEnd 
 StartHorizRetrace 
 EndHorizRetrace 
 Overflow 
 StartVertRetrace 
 EndVertRetrace 
 ModeControl 
 ClockingMode 
 restore indexcontrol registers 
 Unblank 
 Tell console.c that it has to restore the screen itself 
 Normal blanking 
 Obsolete 
 VESA blanking 
  PIO_FONT support.
  The font loading code goes back to the codepage package by
  Joel Hoffman (joel@wam.umd.edu). (He reports that the original
  reference is: "From: p. 307 of _Programmer's Guide to PC & PS2
  Video Systems_ by Richard Wilton. 1987.  Microsoft Press".)
  Change for certain monochrome monitors by Yury Shevchuck
  (sizif@botik.yaroslavl.su).
 Pauline Middelink <middelin@polyware.iaf.nl> reports that we
	
	  All fonts are loaded in slot 0 (0:1 for 512 ch)
 Return to default font not supported 
 First, the Sequencer 
 CPU writes only to map 2 
 Sequential addressing 
 Clear synchronous reset 
 Now, the graphics controller, select map 2 
 disable odd-even addressing 
 map start at A000:0000 
		
		  In 512-character mode, the character map is not contiguous if
		  we want to remain EGA compatible -- which we do
 First, the sequencer, Synchronous reset 
 CPU writes to maps 0 and 1 
 odd-even addressing 
 Character Map Select 
 clear synchronous reset 
 Now, the graphics controller, select map 0 for CPU 
 enable even-odd addressing 
 map starts at b800:0 or b000:0 
 if 512 char mode is already enabled don't re-enable it. 
		 256-char: enable intensity bit
 clear address flip-flop 
 color plane enable register 
		 Wilton (1987) mentions the following; I don't know what
				 force hi font mask to 0, so we always clear
  Adjust the screen to fit a font of a certain height
 Number of video rows we end up with 
 Scan lines to actually display-1 
	 Reprogram the CRTC for the new font size
	   Note: the attempt to read the overflow register will fail
	   on an EGA, but using 0xff for the previous value appears to
	   be OK for EGA text modes in the range 257-512 scan lines, so I
	   guess we don't need to worry about it.
	   The same applies for the spill bits in the font size and cursor
	   registers; they are write-only on EGA, but it appears that they
 CRTC overflow register 
 Font size register 
 Vertical display end reg 
 Overflow register 
  Font size register 
 CRTC overflow register 
 Font size 
 Vertical display limit 
 void size to cause regs to be rewritten 
 Adjust console size 
		
		  Ho ho!  Someone (svgatextmode, eh?) may have reprogrammed
		  the video mode!  Set the new defaults then and go away.
 who knows 
 We don't play origin tricks in graphic modes 
 Nor we write to blanked screens 
		 This is a gross hack, but here is the only place we can
		  set bootup console parameters without messing up generic
		  console initialization routines.
	 We can't copy in more than the size of the video buffer,
   The console `switch' structure for the VGA based console
 SPDX-License-Identifier: GPL-2.0-only
  newport_con.c: Abscon for newport hardware
  (C) 1998 Thomas Bogendoerfer (tsbogend@alpha.franken.de)
  (C) 1999 Ulf Carlsson (ulfc@thepuffingruop.com)
  This driver is based on sgicons.c and cons_newport.
  Copyright (C) 1996 David S. Miller (davem@davemloft.net)
  Copyright (C) 1997 Miguel de Icaza (miguel@nuclecu.unam.mx)
 CONFIG_LOGO_SGI_CLUT224 
 turn off popup plane 
 Clear the screen. 
  calculate the actual screen size by reading
  the video timing out of the VC2
 should be enough 
 I don't know all affected revisions 
 free memory used by user font 
 Can't be __init, do_take_over_console may call it later 
 Set the color and drawing mode. 
 Set coordinates for bitmap operation. 
 Go, baby, go... 
 Clear the area behing the string 
 Set the color and drawing mode. 
 Set coordinates for bitmap operation. 
 Go, baby, go... 
 unblank console 
 blank console 
	 ladis: when I grow up, there will be a day... and more sizes will
 usage counter 
 check if font is already used by other console 
 current font is the same as the new one 
 old font is user font 
 it's time to disable the logo now.. 
 we only support one Newport as console 
 ioremap cannot fail 
 SPDX-License-Identifier: GPL-2.0-only
   linuxdriversvideodummycon.c -- A dummy console driver
   To be used if there's no other console driver (e.g. for plain VGA text)
   available, usually until fbcon takes console over.
   Dummy console driver
 set by Kconfig. Use 80x25 for 640x480 and 160x64 for 1280x1024 
 These are both protected by the console_lock 
 Ignore erases 
 Redraw, so that we get putc(s) for output done while blanked 
   The console `switch' structure for the dummy console
   Most of the operations are dummies.
   Convert a logo in ASCII PNM format to C source suitable for inclusion in
   the Linux kernel
   (C) Copyright 2001-2003 by Geert Uytterhoeven <geert@linux-m68k.org>
   --------------------------------------------------------------------------
   This file is subject to the terms and conditions of the GNU General Public
   License. See the file COPYING in the main directory of the Linux
   distribution for more details.
 monochrome blackwhite 
 16 colors VGA text palette 
 224 colors 
 256 levels grayscale 
 Skip leading whitespace 
 Ignore comments 'till end of line 
 Parse decimal number 
	 some PBM are 'broken'; GiMP for example exports a PBM without space
	  between the digits. This is Ok cause we know a PBM can only have a '1'
 open image file 
 check file type and read file header 
 Plain PBMPGMPPM 
 Binary PBMPGMPPM 
 allocate image data 
 read image data 
 Plain PBM 
 Plain PGM 
 Plain PPM 
 close file 
 open logo file 
    fputs("\n", out);
    fputs("   DO NOT EDIT THIS FILE!\n", out);
    fputs(" \n", out);
    fprintf(out, "   It was automatically generated from %s\n", filename);
    fputs(" \n", out);
    fprintf(out, "   Linux logo %s\n", logoname);
 close logo file 
 validate image 
 write file header 
 write logo data 
 write logo structure and file footer 
 validate image 
 write file header 
 write logo data 
 write logo structure and file footer 
 validate image 
 write file header 
 write logo data 
 write logo clut 
 write logo structure and file footer 
 validate image 
 write file header 
 write logo data 
 write logo structure and file footer 
 SPDX-License-Identifier: GPL-2.0-only
   Linux logo to be displayed on boot
   Copyright (C) 1996 Larry Ewing (lewing@isc.tamu.edu)
   Copyright (C) 1996,1998 Jakub Jelinek (jj@sunsite.mff.cuni.cz)
   Copyright (C) 2001 Greg Banks <gnb@alphalink.com.au>
   Copyright (C) 2001 Jan-Benedict Glaw <jbglaw@lug-owl.de>
   Copyright (C) 2003 Geert Uytterhoeven <geert@linux-m68k.org>
  Logos are located in the initdata, and will be freed in kernel_init.
  Use late_init to mark the logos as freed to prevent any further use.
 logo's are marked __initdata. Use __ref to tell
  modpost that it is intended that this function uses data
  marked __initdata.
 Generic Linux logo 
 SuperH Linux logo 
 Generic Linux logo 
 SuperH Linux logo 
 Generic Linux logo 
 DEC Linux logo on MIPSMIPS64 or ALPHA 
 Macintosh Linux logo on m68k 
 PA-RISC Linux logo 
 SGI Linux logo on MIPSMIPS64 
 Sun Linux logo 
 SuperH Linux logo 
   linuxdriversvideotgafb.c -- DEC 21030 TGA frame buffer device
 	Copyright (C) 1995 Jay Estabrook
 	Copyright (C) 1997 Geert Uytterhoeven
 	Copyright (C) 1999,2000 Martin Lucina, Tom Zerucha
 	Copyright (C) 2002 Richard Henderson
 	Copyright (C) 2006, 2007  Maciej W. Rozycki
   This file is subject to the terms and conditions of the GNU General Public
   License. See the file COPYING in the main directory of this archive for
   more details.
  Local functions.
   Frame buffer operations
   PCI registration operations
 CONFIG_PCI 
   TC registration operations
 CONFIG_TC 
       tgafb_check_var - Optional function.  Validates a var passed in.
       @var: frame buffer variable screen structure
       @info: frame buffer structure that represents a single frame buffer
	 Some of the acceleration routines assume the line width is
       tgafb_set_par - Optional function.  Alters the hardware state.
       @info: frame buffer structure that represents a single frame buffer
 Encode video timings.  
 Store other useful values in par.  
 First, disable video.  
 Write the DEEP register.  
 wait for not busy 
 wait for not busy 
 Write some more registers.  
 Calculate & write the PLL.  
 Write some more registers.  
 Init video timing regs.  
 Initialise RAMDAC. 
 Init BT485 RAMDAC registers.  
 cursor 64x64 
 cursor off, for now 
 Fill palette registers.  
 Init BT459 RAMDAC registers.  
 Fill the palette.  
 24-plane or 24plusZ 
 Init BT463 RAMDAC registers.  
 Fill the palette.  
 Fill window type table after start of vertical retrace.  
 Finally, enable video scan (and pray for the monitor... :-) 
       tgafb_setcolreg - Optional function. Sets a color register.
       @regno: boolean, 0 copy local, 1 get_user() function
       @red: frame buffer colormap structure
       @green: The green value which can be up to 16 bits wide
       @blue:  The blue value which can be up to 16 bits wide.
       @transp: If supported the alpha value which can be up to 16 bits wide.
       @info: frame buffer info structure
       tgafb_blank - Optional function.  Blanks the display.
       @blank: the blank mode we want.
       @info: frame buffer structure that represents a single frame buffer
 Unblanking 
 Normal blanking 
 VESA blank (vsync off) 
 VESA blank (hsync off) 
 Poweroff 
   Acceleration.
 A shift below cannot cope with.  
 Crop the image to the screen.  
 Expand the color values to fill 32-bits.  
	 ??? Would be nice to notice colour changes elsewhere, so
	 Acquire proper alignment; set up the PIXELMASK register
 Enable opaque stipple mode.  
		 Handle common case of imaging a single character, in
 Avoid a shift by 32; width > 0 implied.  
			 The image data is bit big endian; we need
		 Handle another common case in which accel_putcs
		   generates a large bitmap, which happens to be aligned.
		   Allow the tail to be misaligned.  This case is 
		   interesting because we've not got to hold partial
		 Finally, handle the generic case of misaligned start.
		   Here we split the write into 16-bit spans.  This allows
		   us to use only one pixel mask, instead of four as would
 Disable opaque stipple mode.  
 Crop the image to the screen.  
 Now copy the image, color_expanding via the palette. 
       tgafb_imageblit - REQUIRED function. Can use generic routines if
                         non acclerated hardware and packed pixel based.
                         Copies a image from system memory to the screen.
       @info: frame buffer structure that represents a single frame buffer
       @image: structure defining the image.
 If a mono image, regardless of FB depth, go do it. 
	 For copies that aren't pixel expansion, there's little we
	 ??? There is a DMA write mode; I wonder if that could be
 If 24-plane FB and the image is 8-plane with CLUT, we can do it. 
 Silently return... 
       tgafb_fillrect - REQUIRED function. Can use generic routines if 
                        non acclerated hardware and packed pixel based.
                        Draws a rectangle on the screen.               
       @info: frame buffer structure that represents a single frame buffer
       @rect: structure defining the rectagle and operation.
 Crop the rectangle to the screen.  
	 ??? We could implement ROP_XOR with opaque fill mode
	   and a RasterOp setting of GXxor, but as far as I can
	   tell, this mode is not actually used in the kernel.
 Expand the color value to fill 8 pixels.  
	 The DATA register holds the fill mask for block fill mode.
 Enable block fill mode.  
	 We can fill 2k pixels per operation.  Notice blocks that fit
	   the width of the screen so that we can take advantage of this
	 The write into the frame buffer must be aligned to 4 bytes,
	   but we are allowed to encode the offset within the word in
 Disable block fill mode.  
       tgafb_copyarea - REQUIRED function. Can use generic routines if
                        non acclerated hardware and packed pixel based.
                        Copies on area of the screen to another area.
       @info: frame buffer structure that represents a single frame buffer
       @area: structure defining the source and destination.
 Handle the special case of copying entire lines, e.g. during scrolling.
   We can avoid a lot of needless computation in this case.  In the 8bpp
   case we need to use the COPY64 registers instead of mask writes into 
 Set up the MODE and PIXELSHIFT registers.  
 Reset the MODE register to normal.  
 Set up the MODE and PIXELSHIFT registers.  
 Reset the MODE register to normal.  
 The (almost) general case of backward copy in 8bpp mode.  
 Do acceleration only if we are aligned on 8 pixels 
	 Compute the offsets and alignments in the frame buffer.
 Next copy full words at a time.  
 Finally copy the unaligned head of the span.  
 Set up the MODE and PIXELSHIFT registers.  
 Reset the MODE register to normal.  
 The top left corners must be in the virtual screen.  
 Clip the destination.  
 The source must be completely inside the virtual screen.  
 Detect copies of the entire line.  
	 ??? The documentation is unclear to me exactly how the pixelshift
	   register works in 32bpp mode.  Since I don't have hardware to test,
   Initialisation
	
	  These are needed by fb_set_logo_truepalette(), so we
	  set them here for 24-plane cards.
 We just use this to catch switches out of graphics mode. 
 A bit of overkill for BASE_ADDR reset. 
 1280x1024 @ 72 Hz, 76.8 kHz hsync 
 Enable device in PCI config.  
 Allocate the fb and par structures.  
 Request the mem regions.  
 Map the framebuffer.  
 Grab info about the card.  
 Setup framebuffer.  
 This should give a reasonable default video mode.  
 !MODULE 
   Modularisation
 SPDX-License-Identifier: GPL-2.0-only
 	HP300 Topcat framebuffer support (derived from macfb of all things)
 	Phil Blundell <philb@gnu.org> 1998
 	DIO-II, colour map and Catseye support by
 	Kars de Jong <jongk@linux-m68k.org>, May 2004.
 These defines match the X window system 
 blitter regs 
 use MSBs 
	
	   Set a single color register. The values supplied are
	   already rounded down to the hardware's capabilities
	   (according to the entries in the `var' structure). Return
	   != 0 for invalid regno.
 0 unblank, 1 blank, 2 no vsync, 3 no hsync, 4 off 
 Foreground 
 Background 
	
	  Since we also access the framebuffer directly, we have to wait
	  until the block mover is finished
 Common to all HP framebuffers 
 Frame buffer width 		
 Frame buffer height		
 Display width		
 Display height		
 Number of colour planes	
 Frame buffer offset		
 This is the magic incantation the HP X server uses to make Catseye boards work. 
 Catseye status 
 VB 
 TCNTRL 
 ACNTRL 
 PNCNTRL 
 RUG CommandStatus 
 Overlay Mask 
 Ram Select 
	
	 	Fill in the available video resolution
	
	 	Give the hardware a bit of a prod and work out how many bits per
	 	pixel are supported.
	
	 	Enable readingwriting of all the planes.
	
	 	Clear the screen.
	
	 	Let there be consoles..
  Check that the secondary ID indicates that we have some hope of working with this
  framebuffer.  The catseye boards are pretty much like topcats and we can muddle through.
  Initialise the framebuffer
	 Topcats can be on the internal IO bus or real DIO devices.
	  The internal variant sits at 0x560000; it has primary
	  and secondary ID registers just like the DIO version.
	  So we merge the two detection routines.
	 
	  Perhaps this #define should be in a global header file:
	  I believe it's common to all internal fbs, not just topcat.
   linuxdriversvideooffb.c -- Open Firmware based frame buffer device
 	Copyright (C) 1997 Geert Uytterhoeven
   This driver is partly based on the PowerMac console driver:
 	Copyright (C) 1996 Paul Mackerras
   This file is subject to the terms and conditions of the GNU General Public
   License. See the file COPYING in the main directory of this archive for
   more details.
 Supported palette hacks 
 ATI Mach64 
 ATI Rage128 
 ATI Rage Mobility M3 Head A 
 ATI Rage Mobility M3 Head B 
 ATI Radeon 
 IBM GXT2000 
 ATI R5xx 
 qemu vga 
 Definitions used by the Avivo palette hack 
       Set a single color register. The values supplied are already
       rounded down to the hardware's capabilities (according to the
       entries in the var structure). Return != 0 for invalid regno.
 Clear PALETTE_ACCESS_CNTL in DAC_CNTL 
 Set palette index & data 
 Set PALETTE_ACCESS_CNTL in DAC_CNTL 
 Set palette index & data 
 Set palette index & data (could be smarter) 
 Write to both LUTs for now 
       Blank the display.
 Clear PALETTE_ACCESS_CNTL in DAC_CNTL 
 Set palette index & data 
 Set PALETTE_ACCESS_CNTL in DAC_CNTL 
 Set palette index & data 
 On avivo, initialize palette control 
 Look for AVIVO initialized by SLOF 
 This will match most R5xx 
 RGB 555 
 RGB 565 
 RGB 888 
 set offb aperture size for generic probing 
	 Ok, now we try to figure out the address of the framebuffer.
	 
	  Unfortunately, Open Firmware doesn't provide a standard way to do
	  so. All we can do is a dodgy heuristic that happens to work in
	  practice. On most machines, the "address" property contains what
	  we need, though not on Matrox cards found in IBM machines. What I've
	  found that appears to give good results is to go through the PCI
	  ranges and pick one that is both big enough and if possible encloses
	  the "address" property. If none match, we pick the biggest
 Hack for when BootX is passing us 
 kludge for valkyrie 
 Check if we have a MacOS display without a node spec 
		 The old code tried to work out which node was the MacOS
		  display based on the address. I'm dropping that since the
		  lack of a node spec only happens with old BootX versions
		  (users can update) and with this code, they'll still get
		  a display (just not the palette hacks).
 SPDX-License-Identifier: GPL-2.0-only
  udlfb.c -- Framebuffer driver for DisplayLink USB controller
  Copyright (C) 2009 Roberto De Ioris <roberto@unbit.it>
  Copyright (C) 2009 Jaya Kumar <jayakumar.lkml@gmail.com>
  Copyright (C) 2009 Bernie Thompson <bernie@plugable.com>
  Layout is based on skeletonfb by James Simmons and Geert Uytterhoeven,
  usb-skeleton by GregKH.
  Device-specific portions based on information from Displaylink, with work
  from Florian Echtler, Henrik Bjerregaard Pedersen, and others.
  There are many DisplayLink-based graphics products, all with unique PIDs.
  So we match on DisplayLink's VID + Vendor-Defined Interface Class (0xff)
  We also require a match on SubClass (0x00) and Protocol (0x00),
  which is compatible with all known USB 2.0 era graphics chips and firmware,
  but allows DisplayLink to increment those for any future incompatible chips
 module options 
 Allow fbcon to open framebuffer 
 Detect mmap writes using page faults 
 Optionally disable shadow framebuffer 
 Optionally force a pixel resolution limit 
 dlfb keeps a list of urbs for efficient bulk transfers 
  All DisplayLink bulk operations start with 0xAF, followed by specific code
  All operations are written to buffers which then later get sent to device
  Map FB_BLANK_ to DisplayLink register
  DLReg FB_BLANK_
  ----- -----------------------------
   0x00 FB_BLANK_UNBLANK (0)
   0x01 FB_BLANK (1)
   0x03 FB_BLANK_VSYNC_SUSPEND (2)
   0x05 FB_BLANK_HSYNC_SUSPEND (3)
   0x07 FB_BLANK_POWERDOWN (4) Note: requires modeset to come back
 the base pointer is 16 bits wide, 0x20 is hi byte. 
  DisplayLink HW has separate 16bpp and 8bpp framebuffers.
  In 24bpp modes, the low 323 RGB bits go in the 8bpp framebuffer
  This is kind of weird because the controller takes some
  register values in a different byte order than other registers.
  LFSR is linear feedback shift register. The reason we have this is
  because the display controller needs to minimize the clock depth of
  various counters used in the display path. So this code reverses the
  provided value into the lfsr16 value by counting backwards to get
  the value that needs to be set in the hardware comparator to get the
  same actual count. This makes sense once you read above a couple of
  times and think about it from a hardware perspective.
 This is the lfsr value that the hw starts with 
  This does LFSR conversion on the value that is to be written.
  See LFSR explanation above for more detail.
  This takes a standard fbdev screeninfo struct and all of its monitor mode
  details and converts them into the DisplayLink equivalent register commands.
 x display start 
 x display end 
 y display start 
 y display end 
 x end count is active + blanking - 1 
 libdlo hardcodes hsync start to 1 
 hsync end is width of sync pulse + 1 
 hpixels is active pixels 
 yendcount is vertical active + vertical blanking 
 libdlo hardcodes vsync start to 0 
 vsync end is width of vsync pulse 
 vpixels is active pixels 
 convert picoseconds to 5kHz multiple for pclk5k = x  1E125k 
  This takes a standard fbdev screeninfo struct that was fetched or prepared
  and then generates the appropriate command sequence that then drives the
  display controller.
	
	 This first section has to do with setting the base address on the
	 controller  associated with the display. There are 2 base
	 pointers, currently, we only  use the 16 bpp segment.
 set base for 16bpp segment to 0 
 set base for 8bpp segment to end of fb 
  Trims identical data from front and back of line
  Sets new front buffer address and width
  And returns byte count of identical pixels
  Assumes CPU natural alignment (unsigned long)
  for back and front buffer ptrs and width
  Render a command stream for an encoded horizontal line segment of pixels.
  A command buffer holds several commands.
  It always begins with a fresh command header
  (the protocol doesn't require this, but we enforce it to allow
  multiple buffers to be potentially encoded and sent in parallel).
  A single command encodes one contiguous horizontal line of pixels
  The function relies on the client to do all allocation, so that
  rendering can be done directly to output buffers (e.g. USB URBs).
  The function fills the supplied command buffer, providing information
  on where it left off, so the client may call in again with additional
  buffers if the line will take several buffers to complete.
  A single command can transmit a maximum of 256 pixels,
  regardless of the compression ratio (protocol design limit).
  To the hardware, 0 for a size byte means 256
  Rather than 256 pixel commands which are either rl or raw encoded,
  the rlx command simply assumes alternating raw and rl spans within one cmd.
  This has a slightly larger header overhead, but produces more even results.
  It also processes all data (read and write) in a single pass.
  Performance benchmarks of common cases show it having just slightly better
  compression than 256 pixel raw or rle commands, with similar CPU consumpion.
  But for very rl friendly data, will compress not quite as well.
  we'll know this later 
  we'll know this later 
 note: the framebuffer may change under us, so we must test for underflow 
 go back and fill in raw pixel count 
 immediately after raw data is repeat byte 
 Then start another raw pixel span 
 finalize last RAW span 
 undo unused byte 
 Fill leftover bytes with no-ops 
  There are 3 copies of every pixel: The front buffer that the fbdev
  client renders to, the actual framebuffer across the USB bus in hardware
  (that we can only write to, slowly, and can never read), and (optionally)
  our shadow copy that tracks what's been sent to that hardware buffer.
 lost pixels is set 
 lost_pixels is set 
 Send partial buffer remaining before exiting 
 Kcycles 
  Path triggered by usermode clients who write to filesystem
  e.g. cat filename > devfb1
  Not used by X Windows or text-mode console. But useful for testing.
  Slow because of extra copy and we must assume all pixels dirty.
 hardware has native COPY command (see libdlo), but not worth it for fbcon 
  NOTE: fb_defio.c is holding info->fbdefio.mutex
    Touching ANY framebuffer memory that triggers a page fault
    in fb_defio will cause a deadlock, when it also tries to
    grab the same mutex.
 walk the written page list and render each to device 
 Send partial buffer remaining before exiting 
 Kcycles 
 TODO: Update X server to get this from sysfs instead 
 TODO: Help propose a standard fb.h ioctl to report mmap damage 
		
		  If we have a damage-aware client, turn fb_defio "off"
		  To avoid perf imact of unnecessary page fault handling.
		  Done by resetting the delay for this fb_info to a very
		  long period. Pages will become writable and stay that way.
		  Reset to normal value when all clients have closed this fb.
 taken from vesafb 
 1:5:5:5 
 0:5:6:5 
  It's common for several clients to have framebuffer open simultaneously.
  e.g. both fbcon and X. Makes things interesting.
  Assumes caller is holding info->lock (for open and release at least)
	
	  fbcon aggressively connects to first framebuffer it finds,
	  preventing other clients (X) from working properly. Usually
	  not what the user wants. Fail by default with option to enable.
 If the USB device is gone, we don't accept new opens 
 enable defio at last moment if not disabled by client 
 Assume info structure is freed after this point 
  Assumes caller is holding info->lock mutex (for open and release at least)
  Check whether a video mode is supported by the DisplayLink chip
  We start from monitor's modes, so don't need to filter that here
 set device-specific elements of var unrelated to mode 
 clear the activate field because it causes spurious miscompares 
 paint greenscreen 
 To fonzi the jukebox (e.g. make blanking changes take effect) 
 copy 
 from address
 one pixel 
 to address 
  In order to come back from full DPMS off, we need to set the mode again
 returning from powerdown requires a fresh modeset 
 seems like a render op is needed to have blank change take effect 
  Assumes &info->lock held by caller
  Assumes no active clients have framebuffer open
		
		  Alloc system memory for virtual framebuffer
		
		  Second framebuffer copy to mirror the framebuffer state
		  on the physical USB device. We can function without this.
		  But with imperfect damage info we may send pixels over USB
		  that were, in fact, unchanged - wasting limited USB bandwidth
  1) Get EDID from hw, or use sw default
  2) Parse into various fb_info structs
  3) Allocate virtual framebuffer memory to back highest res mode
  Parses EDID into three places used by various parts of fbdev:
  fb_var_screeninfo contains the timing of the monitor's preferred mode
  fb_info.monspecs is full parsed EDID info, including monspecs.modedb
  fb_info.modelist is a linked list of all monitor & VESA modes which work
  If EDID is not readablevalid, then modelist is all VESA modes,
  monspecs is NULL, and fb_var_screeninfo is set to safe VESA mode
  Returns 0 if successful
 only use mutex if info has been registered 
 parent device is used otherwise 
	
	  Try to (re)read EDID from hardware first
	  EDID data may return, but not parse as valid
	  Try again a few times, in case of e.g. analog cable noise
 If that fails, use a previously returned EDID if available 
 If that fails, use the default EDID we were handed 
 If we've got modes, let's pick a best default mode 
 if we've removed topbest mode 
 If everything else has failed, fall back to safe default mode 
		
		  Add the standard VESA modes to our modelist
		  Since we don't have EDID, there may be modes that
		  overspec monitor andor are incorrect aspect ratio, etc.
		  But at least the user has a chance to choose
		
		  default to resolution safe for projectors
		  (since they are most common case without EDID)
 If we have good mode and no active clients
		
		  with mode size info, we can now alloc our framebuffer.
 We only support write of entire EDID at once, no offset
  This is necessary before we can communicate with the display controller.
 vendor specific 
 if not found, look in configuration descriptor 
 descriptor length 
 vendor descriptor type 
 version (2 bytes) 
 length after type 
 the fixed header we've already parsed 
 max_area 
 allow udlfb to load for now even if firmware unrecognized 
 usb initialization 
 default to maximum 
 allocates framebuffer driver structure, not framebuffer memory 
 We don't register a new USB class. Our client interface is dlfbev 
 ready to begin using device 
 we virtualize until all fb clients release. Then we free 
 When non-active we'll update virtual framebuffer, but no new urbs 
 this function will wait for all in-flight urbs to complete 
 remove udlfb's sysfs interfaces 
 success 
 syncasync unlink faults aren't errors 
 reset to actual 
 keep waiting and freeing, until we've got 'em all 
 have reserved one with sem 
 Free each separately allocated piece 
 urb->transfer_buffer_length set to actual before submit 
 Wait for an in-flight buffer to complete and get re-queued 
 reserved one with limit_sem 
 set to actual payload len 
 because no one else will 
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (C) 2008-2009 MontaVista Software Inc.
  Copyright (C) 2008-2009 Texas Instruments Inc
  Based on the LCD driver for TI Avalanche processors written by
  Ajay Singh and Shalom Hai.
 LCD Status Register 
 LCD DMA Control Register 
 LCD Control Register 
 LCD Raster Control Register 
 LCD Raster Timing 2 Register 
 LCD Block 
 Interrupt Registers available only in Version 2 
 Clock registers available only on Version 2 
	
	  LCDC has 2 ping pong DMA channels, channel 0
	  and channel 1.
 Sharp LCD035Q3DG01 
 Sharp LK043T1DG01 
 Hitachi SP10Q010 
 Densitron 84-0023-001T 
 Enable the Raster Engine of the LCD Controller 
 Put LCDC in reset for several cycles 
 Write 1 to reset LCDC 
 Bring LCDC out of reset 
 Above reset sequence doesnot reset register context 
 Disable the Raster Engine of the LCD Controller 
 return if already disabled 
 init reg to clear PLM (loading mode) fields 
	
	  The Raster enable bit must be set after all other control fields are
	  set.
 Configure the Burst Size and fifo threhold of DMA 
 Set the AC Bias Period and Number of Transisitons per Interrupt 
	
	  LCDC Version 2 adds some extra bits that increase the allowable
	  size of the horizontal timing registers.
	  remember that the registers use 0 to represent 1 so all values
	  that get set into register need to be decremented by 1
 Mask off the bits we want to change 
 AC bias applicable only for Pasive panels 
 enable additional interrupts here 
 Set the Panel Width 
 Pixels per line = (PPL + 1)16 
		
		  0x3F in bits 4..9 gives max horizontal resolution = 1024
		  pixels.
		
		  0x7F in bits 4..10 gives max horizontal resolution = 2048
		  pixels.
 Set the Panel Height 
 Set bits 9:0 of Lines Per Pixel 
 Set bit 10 of Lines Per Pixel 
 Set the Raster Order of the Frame Buffer 
 Truecolor has hardware independent palette 
 Update the palette in the hw as needed. 
 DMA has to be disabled 
 Write 1 to reset 
 Configure the LCD clock divisor. 
 Configure the DMA burst size and fifo threshold. 
 Configure the vertical and horizontal sync properties. 
 Configure for disply 
 Configure FDD 
 IRQ handler for version 2 of LCDC 
		
		  Must disable raster before changing state of any control bit.
		  And also must be disabled before clearing the PL loading
		  interrupt via the following write to the status register. If
		  this is done after then one gets multiple PL done interrupts.
 Disable PL completion interrupt 
 Setup and start data loading mode 
		 Set only when controller is disabled and at the end of
		  active frame
 IRQ handler for version 1 LCDC 
		
		  Must disable raster before changing state of any control bit.
		  And also must be disabled before clearing the PL loading
		  interrupt via the following write to the status register. If
		  this is done after then one gets multiple PL done interrupts.
 Disable PL completion inerrupt 
 Setup and start data loading mode 
 RGB 565 
 disable DMA  
  Function to wait for vertical sync which for this LCD peripheral
  translates into waiting for the current raster frame to complete.
	
	  Set flag to 0 and wait for isr to set to 1. It would seem there is a
	  race condition here where the ISR could have occurred just before or
	  just after this set. But since we are just coarsely waiting for
	  a frame to complete then that's OK. i.e. if the frame completed
	  just before this code executed then we have to wait another full
	  frame time but there is no way to avoid such a situation. On the
	  other hand if the frame completed just after then we don't need
	  to wait long at all. Either way we are guaranteed to return to the
	  user immediately after a frame completion which is all that is
	  required.
  Set new x,y offsets in the virtual display for the visible area and switch
  to the new mode.
 Determine LCD IP Version 
 allocate frame buffer 
 allocate palette buffer 
 Initialize fbinfo 
 initialize var_screeninfo 
 initialize the vsync wait queue 
 Register the Frame Buffer  
 SPDX-License-Identifier: GPL-2.0-only
  linuxdriversvideoep93xx-fb.c
  Framebuffer support for the EP93xx series.
  Copyright (C) 2007 Bluewater Systems Ltd
  Author: Ryan Mallon
  Copyright (c) 2009 H Hartley Sweeten <hsweeten@visionengravers.com>
  Based on the Cirrus Logic ep93xxfb driver, and various other ep93xxfb
  drivers.
 Vertical Frame Timing Registers 
 SW locked 
 SW locked 
 SW locked 
 SW locked 
 SW locked 
 Horizontal Frame Timing Registers 
 SW locked 
 SW locked 
 SW locked 
 SW locked 
 SW locked 
 Frame Buffer Memory Configuration Registers 
 SW locked 
 Other Video Registers 
 SW locked 
 SW locked 
 Blink Control Registers 
 Hardware Cursor Registers 
 LUT Registers 
 Video Signature Registers 
 Minimum  Maximum resolutions supported 
  Write to one of the locked raster registers.
	
	  We don't need a lock or delay here since the raster register
	  block will remain unlocked until the next access.
 Maximum 16bpp -> used memory is maximum xy2 bytes 
	
	  There is a bug in the ep93xx framebuffer which causes problems
	  if bit 27 of the physical address is set.
	  See: https:marc.info?l=linux-arm-kernel&m=110061245502000&w=2
	  There does not seem to be any official errata for this, but I
	  have confirmed the problem exists on my hardware (ep9315) at
	  least.
	
	  FIXME - We don't do a request_mem_region here because we are
	  sharing the register space with the backlight driver (see
	  driversvideobacklightep93xx_bl.c) and doing so will cause
	  the second loaded driver to return -EBUSY.
	 
	  NOTE: No locking is required; the backlight does not touch
	  any of the framebuffer registers.
 SPDX-License-Identifier: GPL-2.0-only
 apollo video HW definitions 
  Control Registers.   IOBASE + $x
  Note: these are the MemoryIO BASE definitions for a mono card set to the
  alternate address
  Control 3A and 3B serve identical functions except that 3A
  deals with control 1 and 3b deals with Color LUT reg.
 Base address of 1 plane board. 
 Status register.  Read 
 Write Enable Register Write 
 Device ID Register. Read 
 Raster Operation reg. Write Word 
 Diagnostic Memory Request. Write Word 
 Control Register 0.  ReadWrite 
 Control Register 1.  ReadWrite 
 Control Register 3a. ReadWrite 
 Control Register 2. ReadWrite 
 CREG 0 
 010x.xxxx 
 100x.xxxx 
 111x.xxxx 
 xxx1.1111 
 other bits are Shift value 
 CREG 1 
 1xxx.xxxx 
 1xxx.xxxx 	
 0xxx.xxxx 	
 0xxx.xxxx 
 xIxx.xxxx 
 xxx1.xxxx 
 xxx0.xxxx 
 xxxx.1xxx 
 xxxx.xx1x 
 xxxx.xxx0 
 xxxx.xxx1 
 no reset sync 
 CREG 2 
  Following 3 defines are common to 1, 4 and 8 plane.
 00xx.xxxx 	
 01xx.xxxx 	
#define S_DATA_PLN  0xC0  11xx.xxxx 	 normal, each data access =16-bits in
 CREG 3ACREG 3B 
 1000.0000 
 ROP REG  -  all one nibble 
       NOTE : this is used r0,r1,r2,r3  
 frame buffer operations 
  Initialization
 now we have registered we can safely setup the hardware 
 	linuxdriversvideopmagb-b-fb.c
 	PMAGB-B TURBOchannel Smart Frame Buffer (SFB) card support,
 	derived from:
 	"HP300 Topcat framebuffer support (derived from macfb of all things)
 	Phil Blundell <philb@gnu.org> 1998", the original code can be
 	found in the file hpfb.c in the same directory.
 	DECstation related code Copyright (C) 1999, 2000, 2001 by
 	Michael Engel <engel@unix-ag.org>,
 	Karsten Merker <merker@linuxtag.org> and
 	Harald Koerfgen.
 	Copyright (c) 2005, 2006  Maciej W. Rozycki
 	This file is subject to the terms and conditions of the GNU General
 	Public License.  See the file COPYING in the main directory of this
 	archive for more details.
  Set the palette.
 The cmap fields are 16 bits    
 wide, but the hardware colormap 
 registers are only 8 bits wide 
  Turn the hardware cursor off.
  Set up screen parameters.
  Determine oscillator configuration.
 select Osc0 
 nominally max. 20.5us 
 select Osc1 
 nominally max. 20.5us 
 reselect OscX 
 Request the IO MEM resource.  
 MMIO mapping setup.  
 Frame buffer mapping setup.  
  Initialize the framebuffer.
 SPDX-License-Identifier: GPL-2.0-only
 tcx.c: TCX frame buffer driver
  Copyright (C) 2003, 2006 David S. Miller (davem@davemloft.net)
  Copyright (C) 1996,1998 Jakub Jelinek (jj@ultra.linux.cz)
  Copyright (C) 1996 Miguel de Icaza (miguel@nuclecu.unam.mx)
  Copyright (C) 1996 Eddie C. Dost (ecd@skynet.be)
  Driver layout based loosely on tgafb.c, see that file for credits.
  Local functions.
   Frame buffer operations
 THC definitions 
 The contents are unknown 
 hsync timing 
 vsync timing 
 cursor x,y position (16 bits each) 
 cursor mask bits 
 what to show where mask enabled 
 Reset control plane so that WID is 8-bit plane. 
       tcx_setcolreg - Optional function. Sets a color register.
       @regno: boolean, 0 copy local, 1 get_user() function
       @red: frame buffer colormap structure
       @green: The green value which can be up to 16 bits wide
       @blue:  The blue value which can be up to 16 bits wide.
       @transp: If supported the alpha value which can be up to 16 bits wide.
       @info: frame buffer info structure
       tcx_blank - Optional function.  Blanks the display.
       @blank: the blank mode we want.
       @info: frame buffer structure that represents a single frame buffer
 Unblanking 
 Normal blanking 
 VESA blank (vsync off) 
 VESA blank (hsync off) 
 Poweroff 
   Initialisation
 Initialize brooktree DAC. 
 color planes 
 overlay plane 
   controlfb.c -- frame buffer device for the PowerMac 'control' display
   Created 12 July 1998 by Dan Jacobowitz <dan@debian.org>
   Copyright (C) 1998 Dan Jacobowitz
   Copyright (C) 2001 Takashi Oe
   Mmap code by Michel Lanners <mlan@cpu.lu>
   Frame buffer structure from:
     driversvideochipsfb.c -- frame buffer device for
     Chips & Technologies 65550 chip.
     Copyright (C) 1998 Paul Mackerras
     This file is derived from the Powermac "chips" driver:
     Copyright (C) 1997 Fabio Riccardi.
     And from the frame buffer device for Open Firmware-initialized devices:
     Copyright (C) 1997 Geert Uytterhoeven.
   Hardware information from:
     control.c: Console support for PowerMac "control" display adaptor.
     Copyright (C) 1996 Paul Mackerras
   Updated to 2.5 framebuffer API by Ben Herrenschmidt
   <benh@kernel.crashing.org>, Paul Mackerras <paulus@samba.org>,
   and James Simmons <jsimmons@infradead.org>.
   This file is subject to the terms and conditions of the GNU General Public
   License. See the file COPYING in the main directory of this archive for
   more details.
 control register access macro 
 Internal variables 
 tell clut what addr to fill	
 send one color channel at	
 a time...			
  End of controlfb_ops implementation  
  Set screen start address according to var offset values
 Now how about actually saying, Make it so! 
 Some things in here probably don't need to be done each time. 
		
		  check if only xoffset or yoffset differs.
		  this prevents flickers in typical VT switch case.
 Turn off display 
 Turn on display 
 CONFIG_BOOTX_TEXT 
 Work out which banks of VRAM we have installed. 
 danj: I guess the card just ignores writes to nonexistant VRAM... 
	
	  Set VRAM in 2MB (bank 1) mode
	  VRAM Bank 2 will be accessible through offset 0x600000 if present
	  and VRAM Bank 1 will not respond at that offset even if present
	
	  Set VRAM in 2MB (bank 2) mode
	  VRAM Bank 1 will be accessible through offset 0x000000 if present
	  and VRAM Bank 2 will not respond at that offset even if present
			
			  vram bank 2 only
			
			  4 MB vram
		
		  vram bank 1 only
  Get the monitor sense value.
  Note that this can be called before calibrate_delay,
  so we can't use udelay.
 drive all lines high 
 turn off drivers 
 drive each sense line low in turn and collect the other 2 
 drive A low 
 drive B low 
 drive C low 
 turn off drivers 
  Various translation functions  
 ~ 200 MHz dot clock 
  calculate the clock paramaters to be sent to CUDA according to given
  pixclock in pico second.
  This routine takes a user-supplied var, and picks the best vmodecmode
  from it.
	
	  adjust xres and vxres so that the corresponding memory widths are
	  32-byte aligned
  Convert hardware data in par to an fb_var_screeninfo
 RGB 555 
 RGB 888 
	
	  10^12  clock_params[0]  (3906400  clock_params[1]
	 			       2^clock_params[2])
	  (10^12  clock_params[0]  (3906400  clock_params[1]))
	  >> clock_params[2]
 (255990.17  clock_params[0]  clock_params[1]) >> clock_params[2] 
  The functions for controlfb_ops 
  Checks a var structure
  Applies current var to display
	
	  make sure start addr will be 32-byte aligned
  Private mmap since we want to have a different caching on the framebuffer
  for controlfb.
  Note there's no locking in here; it's done in fb_mmap() in fbmem.c.
 framebuffer 
  Set misc info vars for this driver
 Fill fb_info 
 Fill fix common fields 
  Parse user specified options (`video=controlfb:')
  finish off the driver initialization and register
 Try to pick a video mode out of NVRAM if we have one. 
 Initialize info structure 
 Setup default var 
 This shouldn't happen! 
 Apply default var 
 Register with fbdev layer 
  find "control" and initialize
 save it for cleanups 
 Map in frame buffer and registers 
 use the big-endian aperture (??) 
 map at most 8MB for the frame buffer 
 XXX not in prom? 
 SPDX-License-Identifier: GPL-2.0-only
 ffb.c: CreatorElite3D frame buffer driver
  Copyright (C) 2003, 2006 David S. Miller (davem@davemloft.net)
  Copyright (C) 1997,1998,1999 Jakub Jelinek (jj@ultra.linux.cz)
  Driver layout based loosely on tgafb.c, see that file for credits.
  Local functions.
   Frame buffer operations
 Register layout and definitions 
 DFB 422 mode write to A 
 DFB 422 mode with line doubling 
 DFB 24bit mode write to B 
 DFB 422 mode write to B 
 DFB 422 mode with line doubling 
 16bit mode Z planes 
 8bit mode Z planes 
 SFB 422 mode write to AB 
 SFB 422 mode with line doubling 
 Draw operations 
 Pixel processor control 
 Force WID 
 Auxiliary clip 
 Depth cue 
 Alpha blend 
 View clip 
 Area pattern 
 Transparent background 
 Z source 
 Y source 
 X source 
 Color (BGR) source 
 Next vertex registers 
 Setup unit vertex state register 
 Control registers 
 New 3dRAM III support regs 
 User Control 
 4-bit Manufacturing Revision 
 Timing Generator 
 Video Enable 
 Device Identification 
 Device Part Number 
 Device Revision 
 AFB m3 or m6 
 screen is blanked 
 DAC has inverted cursor logic 
 Disable cursor.  
	 We just use this to catch switches out of
	  graphics mode.
 	ffb_fillrect - Draws a rectangle on the screen.
 	@info: frame buffer structure that represents a single frame buffer
 	@rect: structure defining the rectagle and operation.
 	ffb_copyarea - Copies on area of the screen to another area.
 	@info: frame buffer structure that represents a single frame buffer
 	@area: structure defining the source and destination.
 	ffb_imageblit - Copies a image from system memory to the screen.
 	@info: frame buffer structure that represents a single frame buffer
 	@image: structure defining the image.
 	ffb_setcolreg - Sets a color register.
 	@regno: boolean, 0 copy local, 1 get_user() function
 	@red: frame buffer colormap structure
 	@green: The green value which can be up to 16 bits wide
 	@blue:  The blue value which can be up to 16 bits wide.
 	@transp: If supported the alpha value which can be up to 16 bits wide.
 	@info: frame buffer info structure
 	ffb_blank - Optional function.  Blanks the display.
 	@blank: the blank mode we want.
 	@info: frame buffer structure that represents a single frame buffer
 Unblanking 
 Normal blanking 
 VESA blank (vsync off) 
 VESA blank (hsync off) 
 Poweroff 
   Initialisation
 Framebuffer length is the same regardless of resolution. 
	 Don't mention copyarea, so SCROLL_REDRAW is always
	  used.  It is the fastest on this chip.
 FBINFO_HWACCEL_COPYAREA | 
	 Elite3D has different DAC revision numbering, and no DAC revisions
	  have the reversed meaning of cursor enable.  Otherwise, Pacifica 1
	  ramdacs with manufacturing revision less than 3 have inverted
	  cursor logic.  We identify Pacifica 1 as not Pacifica 2, the
	  latter having a part number value of 0x236e.
	 Unblank it just to be sure.  When there are multiple
	  FFBAFB cards in the system, or it is not the OBP
	  chosen console, it will have video outputs off in
	  the DAC.
  driversvideocirrusfb.c - driver for Cirrus Logic chipsets
  Copyright 1999-2001 Jeff Garzik <jgarzik@pobox.com>
  Contributors (thanks, all!)
 	David Eger:
 	Overhaul for Linux 2.6
       Jeff Rugen:
       Major contributions;  Motorola PowerStack (PPC and PCI) support,
       GD54xx, 1280x1024 mode support, change MCLK based on VCLK.
 	Geert Uytterhoeven:
 	Excellent code review.
 	Lars Hecking:
 	Amiga updates and testing.
  Original cirrusfb author:  Frank Neumann
  Based on retz3fb.c and cirrusfb.c:
       Copyright (C) 1997 Jes Sorensen
       Copyright (C) 1996 Frank Neumann
  Format this code with GNU indent '-kr -i8 -pcs' options.
  This file is subject to the terms and conditions of the GNU General Public
  License.  See the file COPYING in the main directory of this archive
  for more details.
  debugging and utility macros
 disable runtime assertions? 
 #define CIRRUSFB_NDEBUG 
 debugging assertions 
  chipset information
 board types 
 GD5434 
 GD5426 
 GD5426 or GD5428 
 GD5426 or GD5428 
 GD5446 
 GD543x4x 
 GD546264 
 GD5465 
  per-board-type information, used for enumerating and abstracting
  chip-specific information
  NOTE: MUST be in the same order as enum cirrus_board in order to
  use direct indexing on this array
  NOTE: '__initdata' cannot be used as some of this info
  is required at runtime.  Maybe separate into an init-only and
  a run-time table?
 ASCII name of chipset 
 maximum video clock 
 for  14bpp, 8bpp 1516bpp, 24bpp, 32bpp - numbers from xorg code 
 init SR07 during init_vgachip() 
 write SR1F during init_vgachip() 
 construct bit 19 of screen start address 
 initial SR07 value, then for each mode 
 SR1F VGA initial register value 
 guess 
 the SD64P4 have a higher max. videoclock 
 guess 
 guess 
 guess 
 for the GD5430.  GD5446 can do more... 
 taken from X11 code 
 taken from X11 code 
 GD-5440 is same id 
 MacPicasso likely 
 Picasso 4 is 5446 
 CL Laguna 
 CL Laguna 3D 
 CL Laguna 3DA
 CONFIG_PCI 
 Board type 
 Offset of registers in first Zorro device 
 Size of video RAM in first Zorro device 
 If zero, use autoprobe on RAM device 
 Offset of video RAM in first Zorro device 
 Zorro ID of RAM device 
 Zorro ID of optional second RAM device 
 0x02000000 for 64 MiB boards 
 CONFIG_ZORRO 
 CIRRUSFB_DEBUG 
 info about board 
 Shadow of special function register 
 BEGIN PROTOTYPES 
--- Interface used by the world ------------------------------------------
--- Internal routines ----------------------------------------------------
 CIRRUSFB_DEBUG 
 END   PROTOTYPES 
 BEGIN Interface Used by the World 
--- Open devfbx ---------------------------------------------------------
--- Close devfbx --------------------------------------------------------
 END   Interface used by the World 
 BEGIN Hardware specific Routines 
 Check if the MCLK is not a better clock source 
 Read MCLK value 
	 Determine if we should use MCLK instead of VCLK, and if so, what we
	  should divide it by to get VCLK
 convert from ps to kHz 
	 If the frequency is greater than we can support, we might be able
	
	  Additional constraint: 8bpp uses DAC clock doubling to allow maximum
	  pixel clock
	 If we have a 1MB 5434, we need to put ourselves in a mode where
 memory size in pixels 
 use highest possible virtual resolution 
 truncate xoffset and yoffset to maximum if too high 
	cirrusfb_set_par_foo()
	actually writes the values for a new video mode into the hardware,
 unlock register VGA_CRTC_H_TOTAL..CRT7 
 previously: 0x00) 
 if debugging is enabled, all parameters get output before writing 
  + 128: Compatible read 
 LineCompare bit #9 
 LineCompare bit #8 
 set VCLK0 
 hardware RefClock: 14.31818 MHz 
 formula: VClk = (OSC  N)  (D  (1+P)) 
 Example: VClk = (14.31818  91)  (23  (1+1)) = 28.325 MHz 
		 if freq is close to mclk or mclk2 select mclk
		  as clock source
 6 bit denom; ONLY 5434!!! (bugged me 10 days) 
 Laguna chipset has reversed clock registers 
 1280x1024 
		 mode control: VGA_CRTC_START_HI enable, ROTATE(?), 16bit
 don't know if it would hurt to also program this if no interlaced 
 mode is used, but I feel better this way.. :-) 
 interlace control 
 adjust horizontalvertical sync type (lowhigh), use VCLK3 
 enable display memory & CRTC IO address for color mode 
 text cursor on and start line 
 text cursor end line 
	
	 
	  1 bpp
	 
 programming for different color depths 
 mode register 
 SR07 
 Extended Sequencer Mode 
 evtl d0 bei 1 bit? avoid FIFO underruns..? 
 ## vorher d0 avoid FIFO underruns..? 
 do nothing 
 pixel mask: pass-through for first plane 
 hidden dac reg: 1280x1024 
 hidden dac: nothing 
 memory mode: oddeven, ext. memory 
 plane mask: only write to first plane 
	
	 
	  8 bpp
	 
 Fast Page-Mode writes 
 ### INCOMPLETE!! 
 do nothing 
 mode register: 256 color mode 
 hidden dac reg: 1280x1024 
 hidden dac: nothing 
	
	 
	  16 bpp
	 
 Fast Page-Mode writes 
 Fast Page-Mode writes 
 Extended Sequencer Mode: 256c col. mode 
 We already set SRF and SR1F 
 mode register: 256 color mode 
 FIXME: CONFIG_PCI and CONFIG_ZORRO may be defined both 
 hidden dac reg: nothing special 
	
	 
	  24 bpp
	 
 Fast Page-Mode writes 
 Fast Page-Mode writes 
 Extended Sequencer Mode: 256c col. mode 
 We already set SRF and SR1F 
 mode register: 256 color mode 
 hidden dac reg: 8-8-8 mode (24 or 32) 
	
	 
	  unknownunsupported bpp
	 
 offset overflow bit 
 screen start addr #16-18, fastpagemode cycles 
 screen start address bit 19 
 pixel panning 
 [ EGS: SetOffset(); ] 
 From SetOffset(): Turn on VideoEnable bit in Attribute controller 
 no tiles 
 finally, turn on everything - turn off "FullBandwidth" bit 
 also, set "DotClock%2" bit where requested 
 FB_VMODE_CLOCK_HALVE in linuxfb.h not defined anymore ?
    if (var->vmode & FB_VMODE_CLOCK_HALVE)
	tmp |= 0x08;
 for some reason incomprehensible to me, cirrusfb requires that you write
	cirrusfb_pan_display()
	performs display panning - provided hardware permits this
 no range checks for xoffset and yoffset,   
 as fb_pan_display has already done this 
 base is already correct 
 lower 8 + 8 bits of screen start address 
 0xf2 is %11110010, exclude tmp bits 
 construct bits 16, 17 and 18 of screen start address 
 construct bit 19 of screen start address 
	 write pixel panning value to AR33; this does not quite work in 8bpp
	 
	  ### Piccolo..? Will this work?
	
	  Blank the screen if blank_mode != 0, else unblank. If blank == NULL
	  then the caller blanks by setting the CLUT (Color Look Up Table)
	  to all black. Return 0 if blanking succeeded, != 0 if un-blanking
	  failed due to e.g. a video mode which doesn't support it.
	  Implements VESA suspend and powerdown modes on hardware that
	  supports disabling hsyncvsync:
	    blank_mode == 2: suspend vsync
	    blank_mode == 3: suspend hsync
	    blank_mode == 4: powerdown
 Undo current 
 clear "FullBandwidth" bit 
 set "FullBandwidth" bit 
 Let fbcon do a soft blank for us 
 END   Hardware specific Routines 
 BEGIN Internal Routines 
 reset board globally 
 disable flickerfixer 
 mode 
 from Klaus' NetBSD driver: 
 put blitter into 542x compat 
 Nothing to do to reset the board. 
 make sure RAM size set by this point 
 the P4 is not fully initialized here; I rely on it having been 
 inited under AmigaOS already, which seems to work just fine    
 (Klaus advised to do it this way)			      
 EGS: 0x16 
 EGS: 0x0e 
 reset sequencer logic 
 FullBandwidth (video off) and 89 dot clock 
 "magic cookie" - doesn't make any sense to me.. 
      vga_wgfx(cinfo->regbase, CL_GRA, 0xce);   
 unlock all extension registers 
 plane mask: nothing 
 character map select: doesn't even matter in gx mode 
 memory mode: chain4, ext. memory 
 controller-internal base address of video memory 
  vga_wseq(cinfo->regbase, CL_SEQR8, 0x00); 
 EEPROM control: shouldn't be necessary to write to this at all.. 
 graphics cursor X position (incomplete; position gives rem. 3 bits 
 graphics cursor Y position (..."... ) 
 graphics cursor attributes 
 graphics cursor pattern address 
 writing these on a P4 might give problems..  
 configuration readback and ext. color 
 signature generator 
 Screen A preset row scan: none 
 Text cursor start: disable text cursor 
 Text cursor end: - 
 text cursor location high: 0 
 text cursor location low: 0 
 Underline Row scanline: - 
 ### add 0x40 for text modes with > 30 MHz pixclock 
 ext. display controls: ext.adr. wrap 
 SetReset registers: - 
 SetReset enable: - 
 Color Compare: - 
 Data Rotate: - 
 Read Map Select: - 
 Mode: conf. for 1642 color mode, no oddeven, readwrite mode 0 
 Miscellaneous: memory map base address, graphics mode 
 Color Don't care: involve all planes 
 Bit Mask: no mask at all 
 (5434 can't have bit 3 set for bitblt) 
	 Graphics controller mode extensions: finer granularity,
	  8byte data latches
 Color Key compare: - 
 Color Key compare mask: - 
 Miscellaneous control: - 
 Background color byte 1: - 
  vga_wgfx (cinfo->regbase, CL_GR10, 0x00); 
  vga_wgfx (cinfo->regbase, CL_GR11, 0x00); 
 Attribute Controller palette registers: "identity mapping" 
 Attribute Controller mode: graphics mode 
 Overscan color reg.: reg. 0 
 Color Plane enable: Enable all 4 planes 
 Color Select: - 
 Pixel mask: no mask 
 BLT Startstatus: Blitter reset 
 - " -	   : "end-of-reset" 
 misc... 
 Hidden DAC register: - 
 only works on Zorro boards 
 XXX not ok for multiple boards 
 nothing to switch 
 nothing to switch 
 nothing to switch 
 do nothing  break;
 do nothing 
 CONFIG_ZORRO 
 Linux 2.6-style  accelerated functions 
 AlpineSD64 does not work at 24bpp ??? 
 clear background first 
 Pulled the logic from XFree86 Cirrus driver to get the memory size,
  based on the DRAM bandwidth bit and DRAM bank switching bit.  This
  works with 1MB, 2MB and 4MB configurations (which the Motorola boards
		 64-bit DRAM data bus width; assume 2MB.
		  Also indicates 2MB memory on the 5430.
		 If DRAM bank switching is enabled, there must be
		  twice as much memory installed. (4MB on the 5434)
 TODO: Handling of GD54465480 (see XF86 sources ...) 
 This is a best-guess for now 
 if system didn't claim this region, we would... 
 CONFIG_PCI 
 CONFIG_ZORRO 
 function table of the above functions 
 Fill fix common fields 
 monochrome: only 1 memory plane 
 8 bit and above: Use whole memory area 
 FIXME: map region at 0xB8000 if available, fill in here 
 sanity checks 
 set all the vital stuff 
 should never happen 
 FIXME: this forces VGA.  alternatives? 
 if the system didn't claim this region, we would... 
 CONFIG_PCI 
 Quirk for 64 MiB Picasso IV 
 MCLK select etc. 
 CONFIG_ZORRO 
       Modularization
 about the following functions - I have used the same names for the 
 functions as Markus Wild did in his Retina driver for NetBSD as    
 they just made sense for this purpose. Apart from that, I wrote    
 these functions myself.					    
 WGen() - write into one of the externalgeneral registers 
 Picasso II specific hack 
	      if (regnum == VGA_PEL_IR || regnum == VGA_PEL_D ||
 RGen() - read out one of the externalgeneral registers 
 Picasso II specific hack 
	      if (regnum == VGA_PEL_IR || regnum == VGA_PEL_D ||
 AttrOn() - turn on VideoEnable for Attribute controller 
 if we're just in "write value" mode, write back the 
 same value as before to not modify anything 
 turn on video bit 
      vga_w(cinfo->regbase, VGA_ATT_IW, 0x20); 
 dummy write on Reg0 to be on "write index" mode next time 
 WHDR() - write into the Hidden DAC register 
 as the HDR is the only extension register that requires special treatment
  (the other extension registers are accessible just like the "ordinary"
  registers of their functional group) here is a specialized routine for
  accessing the HDR
 Klaus' hint for correct access to HDR on some boards 
 first write 0 to pixel mask (3c6) 
 next read dummy from pixel address (3c8) 
 now do the usual stuff to access the HDR 
 now first reset HDR access counter 
 and at the end, restore the mask value 
 ## is this mask always 0xff? 
 WSFR() - write to the "special function register" (SFR) 
 The Picasso has a second register for switching the monitor bit 
 writing an arbitrary value to this one causes the monitor switcher 
 to flip to Amiga display 
 WClut - set CLUT entry (range: 0..63) 
 address write mode register is not translated.. 
 but DAC data register IS, at least for Picasso II 
 RClut - read CLUT entry (range 0..63) 
	cirrusfb_WaitBLT()
	Wait for the BitBLT engine to complete a possible earlier job
 FIXME: use interrupts instead 
	cirrusfb_BitBLT()
	perform accelerated "scrolling"
 pitch: set to line_length 
 dest pitch low 
 dest pitch hi 
 source pitch low 
 source pitch hi 
 BLT width: actual number of pixels - 1 
 BLT width low 
 BLT width hi 
 BLT height: actual number of lines -1 
 BLT height low 
 BLT width hi 
 BLT destination 
 BLT dest low 
 BLT dest mid 
 BLT dest hi 
 BLT source 
 BLT src low 
 BLT src mid 
 BLT src hi 
 BLT mode 
 BLT mode 
 BLT ROP: SrcCopy 
 BLT ROP 
 and finally: GO! 
 BLT Startstatus 
	cirrusfb_BitBLT()
	perform accelerated "scrolling"
 if source adr < dest addr, do the Blt backwards 
 if src and dest are on the same line, check x 
 standard case: forward blitting 
		 this means start addresses are at the end,
		  counting backwards
	cirrusfb_RectFill()
	perform accelerated rectangle fill
 This is a ColorExpand Blt, using the 
 same color for foreground and background 
  bestclock() - determine closest possible clock lower(?) than the
  desired pixel clock
 -------------------------------------------------------------------------
  debugging functions
  -------------------------------------------------------------------------
  cirrusfb_dbg_print_regs
  @regbase: If using newmmio, the newmmio base address, otherwise %NULL
  @reg_class: type of registers to read: %CRT, or %SEQ
  DESCRIPTION:
  Dumps the given list of VGA CRTC registers.  If @base is %NULL,
  old-style IO ports are queried for information, otherwise MMIO is
  used at the given @base address to query the information.
 should never occur 
  cirrusfb_dbg_reg_dump
  @base: If using newmmio, the newmmio base address, otherwise %NULL
  DESCRIPTION:
  Dumps a list of interesting VGA and CIRRUSFB registers.  If @base is %NULL,
  old-style IO ports are queried for information, otherwise MMIO is
  used at the given @base address to query the information.
 CIRRUSFB_DEBUG 
   linuxdriversvideopxafb.c
   Copyright (C) 1999 Eric A. Thomas.
   Copyright (C) 2004 Jean-Frederic Clere.
   Copyright (C) 2004 Ian Campbell.
   Copyright (C) 2004 Jeff Lackey.
    Based on sa1100fb.c Copyright (C) 1999 Eric A. Thomas
   which in turn is
    Based on acornfb.c Copyright (C) Russell King.
  This file is subject to the terms and conditions of the GNU General Public
  License.  See the file COPYING in the main directory of this archive for
  more details.
 	        Intel PXA250210 LCD Controller Frame Buffer Driver
  Please direct your questions and comments on this driver to the following
  email address:
 	linux-arm-kernel@lists.arm.linux.org.uk
  Add support for overlay1 and overlay2 based on pxafb_overlay.c:
    Copyright (C) 2004, Intel Corporation
      20030827: <yu.tang@intel.com>
      20040310: <stanley.cai@intel.com>
      20041028: <yan.yin@intel.com>
    Copyright (C) 2006-2008 Marvell International Ltd.
    All Rights Reserved
  Complain if VAR is out of range.
 Bits which should not be set in machine configuration structures 
	
	  We need to handle two requests being made at the same time.
	  There are two important cases:
	   1. When we are changing VT (C_REENABLE) while unblanking
	      (C_ENABLE) We must perform the unblanking, which will
	      do our REENABLE for us.
	   2. When we are blanking, but immediately unblank before
	      we have blanked.  We do the "REENABLE" thing here as
	      well, just to be sure.
	
	  If inverse mode was selected, invert all the colours
	  rather than the register number.  The register number
	  is what you poke into the framebuffer to produce the
	  colour you requested.
	
	  If greyscale is true, then we convert the RGB value
	  to greyscale no matter what visual we are using.
		
		  16-bit True Colour.  We encode the RGB value
		  according to the RGB bitfield information.
 calculate pixel depth, transparency bit included, >=16bpp formats _only_ 
 calculate 4-bit BPP value for LCCR3 and OVLxC1 
 18-bitspixel packed 
 19-bitspixel packed 
 18-bitspixel unpacked 
 19-bitspixel unpacked 
   pxafb_var_to_lccr3():
     Convert a bits per pixel value to the correct bit pattern for LCCR3
   NOTE: for PXA27x with overlays support, the LCCR3_PDFOR_x bits have an
   implication of the acutal use of transparency bit,  which we handle it
   here separatedly. See PXA27x Developer's Manual, Section <<7.4.6 Pixel
   Formats>> for the valid combination of PDFOR, PAL_FOR for various BPP.
   Transparency for palette pixel formats is not supported at the moment.
 set the RGBT bitfields of fb_var_screeninf according to
  var->bits_per_pixel and given depth
 indexed pixel formats 
 RGBT555 
 RGB565 
 RGB666 
 RGBT666 
 RGBT887 
 RGB888 
 RGBT888 
   pxafb_display_dma_period()
     Calculate the minimum period (in picoseconds) between two DMA
     requests for the LCD controller.  If we hit this, it means we're
     doing nothing but LCD DMA.
	
	  Period = pixclock  bits_per_byte  bytes_per_transfer
	                memory_bits_per_pixel;
  Select the smallest mode that allows the desired resolution to be
  displayed. If desired parameters can be rounded up.
 set the initial RGBA bitfields 
 make sure each line is aligned on word boundary 
 we don't support xpan, force xres_virtual to be equal to xres 
 check for limits 
   pxafb_check_var():
     Get the video params out of 'var'. If a value doesn't fit, round it up,
     if it's too big, return -EINVAL.
     Round up in the following order: bits_per_pixel, xres,
     yres, xres_virtual, yres_virtual, xoffset, yoffset, grayscale,
     bitfields, horizontal timing, vertical timing.
 do a test conversion to BPP fields to check the color formats 
  pxafb_set_par():
 	Set the user defined part of the display for the specified console
		
		  Some people have weird ideas about wanting static
		  pseudocolor maps.  I suspect their user space
		  applications are broken.
	 Only take .xoffset, .yoffset and .vmode & FB_VMODE_YWRAP from what
	  was passed in and copy the rest from the old screeninfo.
  pxafb_blank():
 	Blank the display by setting all palette values to zero.  Note, the
  	16 bpp mode does not really use the palette, so this will not
       blank the display in all modes.
 TODO if (pxafb_blank_helper) pxafb_blank_helper(blank); 
 TODO if (pxafb_blank_helper) pxafb_blank_helper(blank); 
 Depending on the enable status of overlay12, the DMA should be
  updated from FDADRx (when disabled) or FBRx (when enabled).
 no support for framebuffer console on overlay 
 unblank the base framebuffer 
 no support for YUV format on overlay1 
 for YUV packed formats, bpp = 'minimum bpp of YUV components' 
 each line must start at a 32-bit word boundary 
 xres must align on 32-bit word boundary 
	 We assume that user will use at most video_mem_size for overlay fb,
	  anyway, it's useless to use 16bpp main plane and 24bpp overlay
 mask all IUBSEOFSOF interrupts 
 CONFIG_FB_PXA_OVERLAY 
  Calculate the PCD value from the clock rate (in picoseconds).
  We take account of the PPCR clock setting.
  From PXA Developer's Manual:
    PixelClock =      LCLK
                 -------------
                 2 ( PCD + 1 )
    PCD =      LCLK
          ------------- - 1
          2(PixelClock)
  Where:
    LCLK = LCDMemory Clock
    PCD = LCCR3[7:0]
  PixelClock here is in Hz while the pixclock argument given is the
  period in picoseconds. Hence PixelClock = 1  ( pixclock  10^-12 )
  The function get_lclk_frequency_10khz returns LCLK in units of
  10khz. Calling the result of this function lclk gives us the
  following
     PCD = (lclk  10^4 )  ( pixclock  10^-12 )
           -------------------------------------- - 1
                           2
  Factoring the 10^4 and 10^-12 out gives 10^-8 == 1  100000000 as used below.
	 FIXME: Need to take into account Double Pixel Clock mode
	  (DPC) bit? or perhaps set it based on the various clock
 no need for this, since we should subtract 1 anyway. they cancel 
 pcd += 1;  
  Some touchscreens need hsync information from the video driver to
  function correctly. We export it here.  Note that 'hsync_time' and
  the value returned from pxafb_get_hsync_time() is the reciprocal
  of the hsync period in seconds.
 If display is blankedsuspended, hsync isn't active 
 flip back and forth between palette and frame buffer 
 disable controller until all registers are set up 
	 1. make it an even number of commands to align on 32-bit boundary
	  2. add the interrupt command to the end of the chain so we can
	     keep track of the end of the transfer
 continue to execute next command 
 stop the processor in case it executed "wait for sync" cmd 
 don't send interrupts for fifo underruns on channel 6 
 begin sending 
 quick disable 
 if it is a software delay, flush and delay 
 leave 2 commands for INTERRUPT and WAIT_FOR_SYNC 
 FIXME: make this configurable 
 CONFIG_FB_PXA_SMARTPANEL 
	
	  If we have a dual scan LCD, we need to halve
	  the YRES parameter.
  pxafb_activate_var():
 	Configures LCD Controller based on entries in var parameter.
 	Settings are only written to the controller if changes were made.
 Update shadow copy atomically 
	
	  Only update the registers if the controller is enabled
	  and something has changed.
  NOTE!  The following functions are purely helpers for set_ctrlr_state.
  Do not call them directly; set_ctrlr_state does the correct serialisation
  to ensure that things happen in the right way 100% of time time.
 	-- rmk
 enable LCD controller clock 
 Sequence from 11.7.10 
 Clear LCD Status Register 
 disable LCD controller clock 
   pxafb_handle_irq: Handle 'LCD DONE' interrupts.
  This function must be called from task context only, since it will
  sleep when disabling the LCD controller, or if we get two contending
  processes trying to alter state.
	
	  Hack around fbcon initialisation.
		
		  Disable controller for clock change.  If the
		  controller is already disabled, then do nothing.
 TODO __pxafb_lcd_power(fbi, 0); 
		
		  Disable controller
		
		  Enable the controller after clock change.  Only
		  do this if we were disabled for the clock change.
 TODO __pxafb_lcd_power(fbi, 1); 
		
		  Re-enable the controller only if it was already
		  enabled.  This is so we reprogram the control
		  registers.
		
		  Re-enable the controller after PM.  This is not
		  perfect - think about the case where we were doing
		  a clock change, and we suspended half-way through.
		
		  Power up the LCD screen, enable controller, and
		  turn on the backlight.
  Our LCD controller task (which is called when we blank or unblank)
  via keventd.
  CPU clock speed change handler.  We need to adjust the LCD timing
  parameters when the CPU clock is adjusted by the power management
  subsystem.
  TODO: Determine why f->new != 10get_lclk_frequency_10khz()
 TODO struct cpufreq_freqs f = data; 
  Power management hooks.  Note that we won't be called from IRQ context,
  unlike the blank functions above, so we may sleep.
 fall back to backward compatibility way 
	 decide video memory size as follows:
	  1. default to mode of maximum resolution
	  2. allow platform to override
	  3. allow module parameter to override
 Alloc the pxafb_info and pseudo_palette in one step 
 place overlay(s) on top of base 
 could be made table driven or similar?... 
 Check for various illegal bit-combinations. Currently only
	
	  On purpose, neither lccrX registers nor video memory size can be
	  specified through device-tree, they are considered more a debug hack
	  available through command line.
	
	  This makes sure that our colour bitfield
	  descriptors are correctly initialised.
	
	  Ok, now enable the LCD controller
 sentinel  }
 sunxvr1000.c: Sun XVR-1000 fb driver for sparc64 systems
  License: GPL
  Copyright (C) 2010 David S. Miller (davem@davemloft.net)
 Fill fix common fields 
 Framebuffer length is the same regardless of resolution. 
 sunxvr2500.c: Sun 3DLABS XVR-2500 et al. fb driver for sparc64 systems
  License: GPL
  Copyright (C) 2007 David S. Miller (davem@davemloft.net)
 Fill fix common fields 
	 XXX 'linebytes' is often wrong, it is equal to the width
	  XXX with depth of 32 on my XVR-2500 which is clearly not
	  XXX right.  So we don't try to use it.
  linuxdriversvideoarcfb.c -- FB driver for Arc monochrome LCD board
  Copyright (C) 2005, Jaya Kumar <jayalk@intworks.biz>
  This file is subject to the terms and conditions of the GNU General Public
  License. See the file COPYING in the main directory of this archive for
  more details.
  Layout is based on skeletonfb.c by James Simmons and Geert Uytterhoeven.
  This driver was written to be used with the Arc LCD board. Arc uses a
  set of KS108 chips that control individual 64x64 LCD matrices. The board
  can be paneled in a variety of setups such as 2x1=128x64, 4x4=256x256 and
  so on. The interface between the board and the host is TTL based GPIO. The
  GPIO requirements are 8 writable data lines and 4+n lines for control. On a
  GPIO-less system, the board can be tested by connecting the respective sigs
  up to a parallel port connector. The driver requires the IO addresses for
  data and control GPIO at load time. It is unable to probe for the
  existence of the LCD so it must be told at load time whether it should
  be enabled or not.
  Todo:
  - testing with 4x4
  - testing with interrupt hw
  General notes:
  - User must set tuhold. It's in microseconds. According to the 108 spec,
    the hold time is supposed to be at least 1 microsecond.
  - User must set num_cols=x num_rows=y, eg: x=2 means 128
  - User must set arcfb_enable=1 to enable it
  - User must set dio_addr=0xIOADDR cio_addr=0xIOADDR
 ks108 chipset specific defines and code 
 main arcfb functions 
 not arc generated interrupt 
  here we handle a specific page on the lcd. the complexity comes from
  the fact that the fb is laidout in 8xX vertical columns. we extract
  each write of 8 vertical pixels. then we shift out as we move along
  X. That's what rightshift does. bitmask selects the desired input bit.
  here we handle the entire vertical page of the update. we write across
  lcd chips. update_page uses the upperleft values to decide which
  chip to select for the right. upper is needed for setting the page
  desired for the write.
  here we handle horizontal blocks for the update. update_vert will
  handle spaning multiple pages. we break out each horizontal
  block in to individual blocks no taller than 64 pixels.
  here we start the process of splitting out the fb update into
  individual blocks of pixels. we end up splitting into 64x64 blocks
  and finally down to 64x8 pages.
 align the request first 
 update the physical lcd 
 update the physical lcd 
 update the physical lcd 
 illegal to wait on arc if no irq will occur 
			 wait until the Arc has generated an interrupt
  this is the access path from userspace. they can seek and write to
  the fb. it's inefficient for them to do anything less than 648
  writes since we update the lcd in each write() anyway.
 modded from epson 1355 
	 We need a flat backing store for the Arc's
 this inits the lcd but doesn't clear dirty pixels 
 if we were told to splash the screen, we just clear it 
 SPDX-License-Identifier: GPL-2.0-only
  framebuffer driver for VBE 2.0 compliant graphic boards
  switching to graphics mode happens at boot time (while
  running in real mode, see archi386bootvideo.S).
  (c) 1998 Gerd Knorr <kraxel@goldbach.in-berlin.de>
 --------------------------------------------------------------------- 
 disable mtrr 
 Set amount of memory to be used 
 Set total amount of memory 
 pmi for palette changes ??? 
 0..nothing, 1..ypan, 2..ywrap 
 --------------------------------------------------------------------- 
 no return value 
 EAX 
 EBX 
 ECX 
 EDX 
 EDI 
  Try VGA registers first...
  Fallback to the PMI....
 no return value 
 EAX 
 EBX 
 ECX 
 EDX 
 EDI 
 ESI 
	
	   Set a single color register. The values supplied are
	   already rounded down to the hardware's capabilities
	   (according to the entries in the `var' structure). Return
	   != 0 for invalid regno.
 1:5:5:5 
 0:5:6:5 
 ignore error return of fb_get_options 
	   size_vmode -- that is the amount of memory needed for the
	                  used video mode, i.e. the minimum amount of
	   size_total -- all video memory we have. Used for mtrr
	                  entries, resource allocation and bounds
	   size_remap -- the amount of video memory we are going to
	                  use for vesafb.  With modern cards it is no
	                  option to simply use size_total as that
		 We cannot make this fatal. Sometimes this comes from magic
 set vesafb aperture size for generic probing 
 not available or some DOS TSR ... 
				
				  memory areas not supported (yet?)
				 
				  Rules are: we have to set up a descriptor for the requested
				  memory area and pass it in the ES register to the BIOS function.
 some dummy values for timing to make fbset happy 
	 request failure does not faze us, as vgacon probably has this
 Find the largest power-of-two 
 Try and find a power of two to add 
  linuxdriversvideohecubafb.c -- FB driver for HecubaApollo controller
  Copyright (C) 2006, Jaya Kumar
  This work was sponsored by CIS(M) Sdn Bhd
  This file is subject to the terms and conditions of the GNU General Public
  License. See the file COPYING in the main directory of this archive for
  more details.
  Layout is based on skeletonfb.c by James Simmons and Geert Uytterhoeven.
  This work was possible because of apollo display code from E-Ink's website
  http:support.eink.comcommunity
  All information used to write this code is from public material made
  available by E-Ink on its support site. Some commands such as 0xA4
  were found by looping through cmd=0x00 thru 0xFF and supplying random
  values. There are other commands that the display is capable of,
  beyond the 5 used here but they are more complex.
  This driver is written to be used with the Hecuba display architecture.
  The actual display chip is called Apollo and the interface electronics
  it needs is called Hecuba.
  It is intended to be architecture independent. A board specific driver
  must be used to perform all the physical IO interactions. An example
  is provided as n411.c
 Display specific information 
 main hecubafb functions 
 set data 
 set DS low 
 wait for ack 
 set DS hi 
 wait for ack to clear 
 command so set CD to high 
 actually strobe with command 
 clear CD back to low 
 this is called back from the deferred io workqueue 
  this is the slow path from userspace. they can seek and write to
  the fb. it's inefficient to do anything less than a full screen draw
 pick up board specific routines 
 try to count device specific driver, if can't, platform recalls 
 this inits the dpy 
 SPDX-License-Identifier: GPL-2.0-only
 cg3.c: CGTHREE frame buffer driver
  Copyright (C) 2003, 2006 David S. Miller (davem@davemloft.net)
  Copyright (C) 1996,1998 Jakub Jelinek (jj@ultra.linux.cz)
  Copyright (C) 1996 Miguel de Icaza (miguel@nuclecu.unam.mx)
  Copyright (C) 1997 Eddie C. Dost (ecd@skynet.be)
  Driver layout based loosely on tgafb.c, see that file for credits.
  Local functions.
   Frame buffer operations
 Control Register Constants 
 Status Register Constants 
 Offset of interesting structures in the OBIO space 
       cg3_setcolreg - Optional function. Sets a color register.
       @regno: boolean, 0 copy local, 1 get_user() function
       @red: frame buffer colormap structure
       @green: The green value which can be up to 16 bits wide
       @blue:  The blue value which can be up to 16 bits wide.
       @transp: If supported the alpha value which can be up to 16 bits wide.
       @info: frame buffer info structure
  The cg3 palette is loaded with 4 color values at each time
  so you end up with: (rgb)(r), (gb)(rg), (b)(rgb), and so on.
  We keep a sw copy of the hw cmap to assist us in this esoteric
  loading procedure.
 (x4)3 
 (x4)4 
       cg3_blank - Optional function.  Blanks the display.
       @blank: the blank mode we want.
       @info: frame buffer structure that represents a single frame buffer
 Unblanking 
 Normal blanking 
 VESA blank (vsync off) 
 VESA blank (hsync off) 
 Poweroff 
   Initialisation
 1152 x 900, 66 Hz 
 1152 x 900, 76 Hz 
 640 x 480, cgRDI 
 SPDX-License-Identifier: GPL-2.0
 sbuslib.c: Helper library for SBUS framebuffer drivers.
  Copyright (C) 2003 David S. Miller (davem@redhat.com)
 VM_IO | VM_DONTEXPAND | VM_DONTDUMP are set by remap_pfn_range() 
 Each page, see which map applies 
	case FBIOGCURSOR32:	 This is not implemented yet.
  linuxdriversvideovga16.c -- VGA 16-color framebuffer driver
  Copyright 1999 Ben Pfaff <pfaffben@debian.org> and Petr Vandrovec <VANDROVE@vc.cvut.cz>
  Based on VGA info at http:www.goodnet.com~tinaraFreeVGAhome.htm
  Based on VESA framebuffer (c) 1998 Gerd Knorr <kraxel@goldbach.in-berlin.de>
  This file is subject to the terms and conditions of the GNU General
  Public License.  See the file COPYING in the main directory of this
  archive for more details.  
 --------------------------------------------------------------------- 
  card parameters
	 structure holding original VGA register settings when the
 Sequencer Index reg.   
 CRT-Contr. Index reg.  
 Miscellaneous register 
 CRT-Controller:00h 
 CRT-Controller:01h 
 CRT-Controller:04h 
 CRT-Controller:05h 
 CRT-Controller:07h 
 CRT-Controller:10h 
 CRT-Controller:11h 
 CRT-Controller:17h 
 Seq-Controller:01h 
 --------------------------------------------------------------------- 
 name should not depend on EGAVGA 
 The VGA's weird architecture often requires that we read a byte and
   write a byte to the same location.  It doesn't matter what byte
   we write, however.  This is because all the action goes on behind
   the scenes in the VGA's 32-bit latch register, and reading and writing
   video memory just invokes latch behavior.
   To avoid race conditions (is this necessary?), reading and writing
   the memory byte should be done with a single instruction.  One
   suitable instruction is the x86 bitwise OR.  The following
   read-modify-write routine should optimize to one such bitwise
 Set the Graphics Mode Register, and return its previous value.
 Select the Bit Mask Register and return its value. 
 Set the value of the Bit Mask Register.  It must already have been
 Set the Data Rotate Register and return its old value. 
   Bits 0-2 are rotate count, bits 3-4 are logical operation
 Set the Enable SetReset Register and return its old value.  
 Set the SetReset Register and return its old value. 
 Return the value in the Graphics Address Register. 
 Set the value in the Graphics Address Register. 
 FIXME !!! font height. Fugde for now.
	 if we support CFB4, then we must! support xoffset with pixel
 reset flip-flop 
 8bpp 
 12.587 , 0x00, 0x08},
 14.161 , 0x04, 0x08},
 25.175 , 0x00, 0x00},
 28.322 , 0x04, 0x00},
 bad ,    0x00, 0x00}};
 no support on EGA 
 blank_end + 2 <= total + 5 
 disable linecompare 
 1 scanline, no linecmp 
 0x02 -> DISP_END, 0x08 -> BLANK_START 
 0x40 -> DISP_END 
 BLANK_START 
 disabled IRQ 
 blank_end + 1 <= ytotal + 2 
	par->crtc[VGA_CRTC_V_BLANK_END] = pos & 0xFF;  0x7F for original VGA,
 256, cfb8 
 16, vgap 
 3DA 
 enable CPU, ports 0x3Dx, positive sync 
 pixel clock == vga clock  2 
 pixel clock == vga clock 
 0 for EGA, 0xFF for VGA 
 FIXME !!! Fudge font height. 
 Enable graphics register modification 
 update misc output register 
 synchronous reset on 
 write sequencer registers 
 synchronous reset off 
 deprotect CRT registers 0-7 
 write CRT registers 
 write graphics controller registers 
 write attribute controller registers 
 reset flip-flop 
 Wait for screen to stabilize. 
 ! 0x3BA 
 some clones need it 
 unblank screen 
	
	   Set a single color register. The values supplied are
	   already rounded down to the hardware's capabilities
	   (according to the entries in the `var' structure). Return
	   != 0 for invalid regno.
 gray = 0.30R + 0.59G + 0.11B 
 The following VESA blanking code is taken from vgacon.c.  The VGA
   blanking code was originally by Huang shi chao, and modified by
   Christoph Rimek (chrimek@toppoint.de) and todd j. derr
 save original values of VGA controller registers 
sti();
 HorizontalTotal 
 HorizDisplayEnd 
 StartHorizRetrace 
 EndHorizRetrace 
 Overflow 
 StartVertRetrace 
 EndVertRetrace 
 ModeControl 
 ClockingMode 
 assure that video is enabled 
 "0x20" is VIDEO_ENABLE_bit in register 01 of sequencer 
 test for vertical retrace in process.... 
	
	  Set <End of vertical retrace> to minimum (0) and
	  <Start of vertical Retrace> to maximum (incl. overflow)
	  Result: turn off vertical sync (VSync) pulse.
 bits 9,10 of vert. retrace 
		
		  Set <End of horizontal retrace> to minimum (0) and
		   <Start of horizontal Retrace> to maximum
		  Result: turn off horizontal sync (HSync) pulse.
 restore both index registers 
 restore original values of VGA controller registers 
 HorizontalTotal 
 HorizDisplayEnd 
 StartHorizRetrace 
 EndHorizRetrace 
 Overflow 
 StartVertRetrace 
 EndVertRetrace 
 ModeControl 
 ClockingMode 
 restore indexcontrol registers 
 0 unblank, 1 blank, 2 no vsync, 3 no hsync, 4 off 
 Unblank 
 blank 
 VESA blanking 
 we can do memset... 
	 We could use hardware clipping but on many cards you get around
 clip the destination 
	
	  We could use hardware clipping but on many cards you get around
	  hardware clipping by writing to framebuffer directly.
 update sx1,sy1 
 the source must be completely inside the virtual screen 
 fill latches 
	
	  Draw logo 
 XXX unshare VGA regions 
 XXX share VGA_FB_PHYS and IO region with vgacon and others 
 name should not depend on EGAVGA 
 supports rectangles with widths of multiples of 8 
  linuxdriversvideoskeletonfb.c -- Skeleton for a frame buffer device
   Modified to new api Jan 2001 by James Simmons (jsimmons@transvirtual.com)
   Created 28 Dec 1997 by Geert Uytterhoeven
   I have started rewriting this driver as a example of the upcoming new API
   The primary goal is to remove the console code from fbdev and place it
   into fbcon.c. This reduces the code and makes writing a new fbdev driver
   easy since the author doesn't need to worry about console internals. It
   also allows the ability to run fbdev without a consoletty system on top 
   of it. 
   First the roles of struct fb_info and struct display have changed. Struct
   display will go away. The way the new framebuffer console code will
   work is that it will act to translate data about the ttyconsole in 
   struct vc_data to data in a device independent way in struct fb_info. Then
   various functions in struct fb_ops will be called to store the device 
   dependent state in the par field in struct fb_info and to change the 
   hardware to that state. This allows a very clean separation of the fbdev
   layer from the console layer. It also allows one to use fbdev on its own
   which is a bounus for embedded devices. The reason this approach works is  
   for each framebuffer device when used as a ttyconsole device is allocated
   a set of virtual terminals to it. Only one virtual terminal can be active 
   per framebuffer device. We already have all the data we need in struct 
   vc_data so why store a bunch of colormaps and other fbdev specific data
   per virtual terminal. 
   As you can see doing this makes the con parameter pretty much useless
   for struct fb_ops functions, as it should be. Also having struct  
   fb_var_screeninfo and other data in fb_info pretty much eliminates the 
   need for get_fix and get_var. Once all drivers use the fix, var, and cmap
   fbcon can be written around these fields. This will also eliminate the
   need to regenerate struct fb_var_screeninfo, struct fb_fix_screeninfo
   struct fb_cmap every time get_var, get_fix, get_cmap functions are called
   as many drivers do now. 
   This file is subject to the terms and conditions of the GNU General Public
   License. See the file COPYING in the main directory of this archive for
   more details.
       This is just simple sample code.
       No warranty that it actually compiles.
       Even less warranty that it actually works :-)
  Driver data
   If your driver supports multiple boards, you should make the  
   below data types arrays, or allocate them dynamically (using kmalloc()). 
  This structure defines the hardware state of the graphics card. Normally
  you place this in a header file in linuxincludevideo. This file usually
  also includes register information. That allows other driver subsystems
  and userland applications the ability to use the same header file to 
  avoid duplicate work and easy porting of software. 
  Here we define the default structs fb_fix_screeninfo and fb_var_screeninfo
  if we don't use modedb. If we do use modedb see xxxfb_init how to use it
  to get a fb_var_screeninfo. Otherwise define a default var as well. 
      	Modern graphical hardware not only supports pipelines but some 
       also support multiple monitors where each display can have its  
       its own unique data. In this case each display could be  
       represented by a separate framebuffer device thus a separate 
       struct fb_info. Now the struct xxx_par represents the graphics
       hardware state thus only one exist per card. In this case the 
       struct xxx_par for each graphics card would be shared between 
       every struct fb_info that represents a framebuffer on that card. 
       This allows when one display changes it video resolution (info->var) 
       the other displays know instantly. Each display can always be
       aware of the entire hardware state that affects it because they share
       the same xxx_par struct. The other side of the coin is multiple
       graphics cards that pass data around until it is finally displayed
       on one monitor. Such examples are the voodoo 1 cards and high end
       NUMA graphics servers. For this case we have a bunch of pars, each
       one that represents a graphics state, that belong to one struct 
       fb_info. Their you would want to have par point to a array of device
       states and have each struct fb_ops function deal with all those 
       states. I hope this covers every possible hardware design. If not
       feel free to send your ideas at jsimmons@users.sf.net 
       If your driver supports multiple boards or it supports multiple 
       framebuffers, you should make these arrays, or allocate them 
       dynamically using framebuffer_alloc() and free them with
       framebuffer_release().
      Each one represents the state of the hardware. Most hardware have
      just one hardware state. These here represent the default state(s). 
 	xxxfb_open - Optional function. Called when the framebuffer is
 		     first accessed.
 	@info: frame buffer structure that represents a single frame buffer
 	@user: tell us if the userland (value=1) or the console is accessing
 	       the framebuffer. 
 	This function is the first function called in the framebuffer api.
 	Usually you don't need to provide this function. The case where it 
 	is used is to change from a text mode hardware state to a graphics
  	mode state. 
 	Returns negative errno on error, or zero on success.
 	xxxfb_release - Optional function. Called when the framebuffer 
 			device is closed. 
 	@info: frame buffer structure that represents a single frame buffer
 	@user: tell us if the userland (value=1) or the console is accessing
 	       the framebuffer. 
 	
 	Thus function is called when we close devfb or the framebuffer 
 	console system is released. Usually you don't need this function.
 	The case where it is usually used is to go from a graphics state
 	to a text mode state.
 	Returns negative errno on error, or zero on success.
       xxxfb_check_var - Optional function. Validates a var passed in. 
       @var: frame buffer variable screen structure
       @info: frame buffer structure that represents a single frame buffer 
 	Checks to see if the hardware supports the state requested by
 	var passed in. This function does not alter the hardware state!!! 
 	This means the data stored in struct fb_info and struct xxx_par do 
       not change. This includes the var inside of struct fb_info. 
 	Do NOT change these. This function can be called on its own if we
 	intent to only test a mode and not actually set it. The stuff in 
 	modedb.c is a example of this. If the var passed in is slightly 
 	off by what the hardware can support then we alter the var PASSED in
 	to what we can do.
       For values that are off, this function must round them _up_ to the
       next value that is supported by the hardware.  If the value is
       greater than the highest value supported by the hardware, then this
       function must return -EINVAL.
       Exception to the above rule:  Some drivers have a fixed mode, ie,
       the hardware is already set at boot up, and cannot be changed.  In
       this case, it is more acceptable that this function just return
       a copy of the currently working var (info->var). Better is to not
       implement this function, as the upper layer will do the copying
       of the current var for you.
       Note:  This is the only function where the contents of var can be
       freely adjusted after the driver has been registered. If you find
       that you have code outside of this function that alters the content
       of var, then you are doing something wrong.  Note also that the
       contents of info->var must be left untouched at all times after
       driver registration.
 	Returns negative errno on error, or zero on success.
 ... 
       xxxfb_set_par - Optional function. Alters the hardware state.
       @info: frame buffer structure that represents a single frame buffer
 	Using the fb_var_screeninfo in fb_info we set the resolution of the
 	this particular framebuffer. This function alters the par AND the
 	fb_fix_screeninfo stored in fb_info. It doesn't not alter var in 
 	fb_info since we are using that data. This means we depend on the
 	data in var inside fb_info to be supported by the hardware. 
       This function is also used to recoverrestore the hardware to a
       known working state.
 	xxxfb_check_var is always called before xxxfb_set_par to ensure that
       the contents of var is always valid.
 	Again if you can't change the resolution you don't need this function.
       However, even if your hardware does not support mode changing,
       a set_par might be needed to at least initialize the hardware to
       a known working state, especially if it came back from another
       process that also modifies the same hardware, such as X.
       If this is the case, a combination such as the following should work:
       static int xxxfb_check_var(struct fb_var_screeninfo var,
                                 struct fb_info info)
       {
               var = info->var;
               return 0;
       }
       static int xxxfb_set_par(struct fb_info info)
       {
               init your hardware here
       }
 	Returns negative errno on error, or zero on success.
 ... 
   	xxxfb_setcolreg - Optional function. Sets a color register.
       @regno: Which register in the CLUT we are programming 
       @red: The red value which can be up to 16 bits wide 
 	@green: The green value which can be up to 16 bits wide 
 	@blue:  The blue value which can be up to 16 bits wide.
 	@transp: If supported, the alpha value which can be up to 16 bits wide.
       @info: frame buffer info structure
   	Set a single color register. The values supplied have a 16 bit
   	magnitude which needs to be scaled in this function for the hardware. 
 	Things to take into consideration are how many color registers, if
 	any, are supported with the current color visual. With truecolor mode
 	no color palettes are supported. Here a pseudo palette is created
 	which we store the value in pseudo_palette in struct fb_info. For
 	pseudocolor mode we have a limited color palette. To deal with this
 	we can program what color is displayed for a particular pixel value.
 	DirectColor is similar in that we can program each color field. If
 	we have a static colormap we don't need to implement this function. 
 	Returns negative errno on error, or zero on success.
 no. of hw registers 
      Program hardware... do anything you want with transp
 grayscale works only partially under directcolor 
 grayscale = 0.30R + 0.59G + 0.11B 
     Directcolor:
        var->{color}.offset contains start of bitfield
        var->{color}.length contains length of bitfield
        {hardwarespecific} contains width of DAC
        pseudo_palette[X] is programmed to (X << red.offset) |
                                           (X << green.offset) |
                                           (X << blue.offset)
        RAMDAC[X] is programmed to (red, green, blue)
        color depth = SUM(var->{color}.length)
      Pseudocolor:
         var->{color}.offset is 0 unless the palette index takes less than
                             bits_per_pixel bits and is stored in the upper
                             bits of the pixel value
         var->{color}.length is set so that 1 << length is the number of
                             available palette entries
         pseudo_palette is not used
         RAMDAC[X] is programmed to (red, green, blue)
         color depth = var->{color}.length
      Static pseudocolor:
         same as Pseudocolor, but the RAMDAC is not programmed (read-only)
      Mono01Mono10:
         Has only 2 values, black on white or white on black (fg on bg),
         var->{color}.offset is 0
         white = (1 << var->{color}.length) - 1, black = 0
         pseudo_palette is not used
         RAMDAC does not exist
         color depth is always 2
      Truecolor:
         does not use RAMDAC (usually has 3 of them).
         var->{color}.offset contains start of bitfield
         var->{color}.length contains length of bitfield
         pseudo_palette is programmed to (red << red.offset) |
                                         (green << green.offset) |
                                         (blue << blue.offset) |
                                         (transp << transp.offset)
         RAMDAC does not exist
         color depth = SUM(var->{color}.length})
       The color depth is used by fbcon for choosing the logo and also
       for color palette transformation if color depth < 4
       As can be seen from the above, the field bits_per_pixel is _NOT_
       a criteria for describing the color visual.
       A common mistake is assuming that bits_per_pixel <= 8 is pseudocolor,
       and higher than that, truedirectcolor.  This is incorrect, one needs
       to look at the fix->visual.
       Another common mistake is using bits_per_pixel to calculate the color
       depth.  The bits_per_pixel field does not directly translate to color
       depth. You have to compute for the color depth (using the color
       bitfields) and fix->visual as seen above.
      This is the point where the color is converted to something that
      is acceptable by the hardware.
      This is the point where the function feeds the color to the hardware
      palette after converting the colors to something acceptable by
      the hardware. Note, only FB_VISUAL_DIRECTCOLOR and
      FB_VISUAL_PSEUDOCOLOR visuals need to write to the hardware palette.
      If you have code that writes to the hardware CLUT, and it's not
      any of the above visuals, then you are doing something wrong.
     This is the point were you need to fill up the contents of
      info->pseudo_palette. This structure is used _only_ by fbcon, thus
      it only contains 16 entries to match the number of colors supported
      by the console. The pseudo_palette is used only if the visual is
      in directcolor or truecolor mode.  With other visuals, the
      pseudo_palette is not used. (This might change in the future.)
      The contents of the pseudo_palette is in raw pixel format.  Ie, each
      entry can be written directly to the framebuffer without any conversion.
      The pseudo_palette is (void ).  However, if using the generic
      drawing functions (cfb_imageblit, cfb_fillrect), the pseudo_palette
      must be casted to (u32 ) _regardless_ of the bits per pixel. If the
      driver is using its own drawing functions, then it can use whatever
      size it wants.
 ... 
       xxxfb_pan_display - NOT a required function. Pans the display.
       @var: frame buffer variable screen structure
       @info: frame buffer structure that represents a single frame buffer
 	Pan (or wrap, depending on the `vmode' field) the display using the
   	`xoffset' and `yoffset' fields of the `var' structure.
   	If the values don't fit, return -EINVAL.
       Returns negative errno on error, or zero on success.
      If your hardware does not support panning, _do_ _not_ implement this
      function. Creating a dummy function will just confuse user apps.
      Note that even if this function is fully functional, a setting of
      0 in both xpanstep and ypanstep means that this function will never
      get called.
 ... 
       xxxfb_blank - NOT a required function. Blanks the display.
       @blank_mode: the blank mode we want. 
       @info: frame buffer structure that represents a single frame buffer
       Blank the screen if blank_mode != FB_BLANK_UNBLANK, else unblank.
       Return 0 if blanking succeeded, != 0 if un-blanking failed due to
       e.g. a video mode which doesn't support it.
       Implements VESA suspend and powerdown modes on hardware that supports
       disabling hsyncvsync:
       FB_BLANK_NORMAL = display is blanked, syncs are on.
       FB_BLANK_HSYNC_SUSPEND = hsync off
       FB_BLANK_VSYNC_SUSPEND = vsync off
       FB_BLANK_POWERDOWN =  hsync and vsync off
       If implementing this function, at least support FB_BLANK_UNBLANK.
       Return !0 for any modes that are unimplemented.
 ... 
 ------------ Accelerated Functions --------------------- 
  We provide our own functions if we have hardware acceleration
  or non packed pixel format layouts. If we have no hardware 
  acceleration, we can use a generic unaccelerated function. If using
  a pack pixel format just use the functions in cfb_.c. Each file 
  has one of the three different accel functions we support.
       xxxfb_fillrect - REQUIRED function. Can use generic routines if 
 		 	 non acclerated hardware and packed pixel based.
 			 Draws a rectangle on the screen.		
       @info: frame buffer structure that represents a single frame buffer
 	@region: The structure representing the rectangular region we 
 		 wish to draw to.
 	This drawing operation placesremoves a retangle on the screen 
 	depending on the rastering operation with the value of color which
 	is in the current color depth format.
	Meaning of struct fb_fillrect
 	@dx: The x and y corrdinates of the upper left hand corner of the 
 	@dy: area we want to draw to. 
 	@width: How wide the rectangle is we want to draw.
 	@height: How tall the rectangle is we want to draw.
 	@color:	The color to fill in the rectangle with. 
 	@rop: The raster operation. We can draw the rectangle with a COPY
 	      of XOR which provides erasing effect. 
       xxxfb_copyarea - OBSOLETE function.
                        Copies one area of the screen to another area.
                        Will be deleted in a future version
       @info: frame buffer structure that represents a single frame buffer
       @area: Structure providing the data to copy the framebuffer contents
 	       from one region to another.
       This drawing operation copied a rectangular area from one area of the
 	screen to another area.
       @dx: The x and y coordinates of the upper left hand corner of the
 	@dy: destination area on the screen.
       @width: How wide the rectangle is we want to copy.
       @height: How tall the rectangle is we want to copy.
       @sx: The x and y coordinates of the upper left hand corner of the
       @sy: source area on the screen.
       xxxfb_imageblit - REQUIRED function. Can use generic routines if
                         non acclerated hardware and packed pixel based.
                         Copies a image from system memory to the screen. 
       @info: frame buffer structure that represents a single frame buffer
 	@image:	structure defining the image.
       This drawing operation draws a image on the screen. It can be a 
 	mono image (needed for font handling) or a color image (needed for
 	tux). 
       @dx: The x and y coordinates of the upper left hand corner of the
 	@dy: destination area to place the image on the screen.
       @width: How wide the image is we want to copy.
       @height: How tall the image is we want to copy.
       @fg_color: For mono bitmap images this is color data for     
       @bg_color: the foreground and background of the image to
 		   write directly to the frmaebuffer.
 	@depth:	How many bits represent a single pixel for this image.
 	@data: The actual data used to construct the image on the display.
 	@cmap: The colormap used for color images.   
  The generic function, cfb_imageblit, expects that the bitmap scanlines are
  padded to the next byte.  Most hardware accelerators may require padding to
  the next u16 or the next u32.  If that is the case, the driver can specify
  this by setting info->pixmap.scan_align = 2 or 4.  See a more
  comprehensive description of the pixmap below.
 	xxxfb_cursor - 	OPTIONAL. If your hardware lacks support
 			for a cursor, leave this field NULL.
       @info: frame buffer structure that represents a single frame buffer
 	@cursor: structure defining the cursor to draw.
       This operation is used to set or alter the properities of the
 	cursor.
 	Returns negative errno on error, or zero on success.
       @set: 	Which fields we are altering in struct fb_cursor 
 	@enable: Disable or enable the cursor 
       @rop: 	The bit operation we want to do. 
       @mask:  This is the cursor mask bitmap. 
       @dest:  A image of the area we are going to display the cursor.
 		Used internally by the driver.	 
       @hot:	The hot spot. 
 	@image:	The actual data for the cursor image.
       NOTES ON FLAGS (cursor->set):
       FB_CUR_SETIMAGE - the cursor image has changed (cursor->image.data)
       FB_CUR_SETPOS   - the cursor position has changed (cursor->image.dx|dy)
       FB_CUR_SETHOT   - the cursor hot spot has changed (cursor->hot.dx|dy)
       FB_CUR_SETCMAP  - the cursor colors has changed (cursor->fg_color|bg_color)
       FB_CUR_SETSHAPE - the cursor bitmask has changed (cursor->mask)
       FB_CUR_SETSIZE  - the cursor size has changed (cursor->width|height)
       FB_CUR_SETALL   - everything has changed
       NOTES ON ROPs (cursor->rop, Raster Operation)
       ROP_XOR         - cursor->image.data XOR cursor->mask
       ROP_COPY        - curosr->image.data AND cursor->mask
       OTHER NOTES:
       - fbcon only supports a 2-color cursor (cursor->image.depth = 1)
       - The fb_cursor structure, @cursor, _will_ always contain valid
         fields, whether any particular bitfields in cursor->set is set
         or not.
 	xxxfb_sync - NOT a required function. Normally the accel engine 
 		     for a graphics card take a specific amount of time.
 		     Often we have to wait for the accelerator to finish
 		     its operation before we can write to the framebuffer
 		     so we can have consistent display output. 
       @info: frame buffer structure that represents a single frame buffer
       If the driver has implemented its own hardware-based drawing function,
       implementing this function is highly recommended.
       Frame buffer operations
 Needed !!!   
 Obsolete     
 Needed !!!   
 Optional !!! 
 ------------------------------------------------------------------------- 
       Initialization
 static int __init xxfb_probe (struct platform_device pdev) -- for platform devs 
 or &pdev->dev 
      Dynamically allocate info and par
 goto error path 
      Here we set the screen_base to the virtual memory address
      for the framebuffer. Usually we obtain the resource address
      from the bus layer and then translate it to virtual memory
      space via ioremap. Consult ioport.h. 
    info->pseudo_palette = pseudo_palette;  The pseudopalette is an
					     16-member array
      Set up flags to indicate what sort of acceleration your
      driver can provide (panwrapcopyareaetc.) and whether it
      is a module -- see FBINFO_ in includelinuxfb.h
      If your hardware can support any of the hardware accelerated functions
      fbcon performance will improve if info->flags is set properly.
      FBINFO_HWACCEL_COPYAREA - hardware moves
      FBINFO_HWACCEL_FILLRECT - hardware fills
      FBINFO_HWACCEL_IMAGEBLIT - hardware mono->color expansion
      FBINFO_HWACCEL_YPAN - hardware can pan display in y-axis
      FBINFO_HWACCEL_YWRAP - hardware can wrap display in y-axis
      FBINFO_HWACCEL_DISABLED - supports hardware accels, but disabled
      FBINFO_READS_FAST - if set, prefer moves over mono->color expansion
      FBINFO_MISC_TILEBLITTING - hardware can do tile blits
      NOTE: These are for fbcon use only.
 This stage is optional 
      The struct pixmap is a scratch pad for the drawing functions. This
      is where the monochrome bitmap is constructed by the higher layers
      and then passed to the accelerator.  For drivers that uses
      cfb_imageblit, you can skip this part.  For those that have a more
      rigorous requirement, this stage is needed
     PIXMAP_SIZE should be small enough to optimize drawing, but not
      large enough that memory is wasted.  A safe size is
      (max_xres  max_font_height8). max_xres is driver dependent,
      max_font_height is 32.
 goto error 
      FB_PIXMAP_SYSTEM - memory is in system ram
      FB_PIXMAP_IO     - memory is iomapped
      FB_PIXMAP_SYNC   - if set, will call fb_sync() per access to pixmap,
                         usually if FB_PIXMAP_IO is set.
      Currently, FB_PIXMAP_IO is unimplemented.
      scan_align is the number of padding for each scanline.  It is in bytes.
      Thus for accelerators that need padding to the next u32, put 4 here.
      buf_align is the amount to be padded for the buffer. For example,
      the i810fb needs a scan_align of 2 but expects it to be fed with
      dwords, so a buf_align = 4 is required.
     access_align is how many bits can be accessed from the framebuffer
      ie. some epson cards allow 16-bit access only.  Most drivers will
      be safe with u32 here.
      NOTE: This field is currently unused.
 End optional stage 
      This should give a reasonable default video mode. The following is
      done when we can set a video mode. 
 This has to be done! 
      The following is done in the case of having hardware with a static 
      mode. If we are setting the mode ourselves we don't call this. 
      For drivers that can...
      Does a call to fb_set_par() before register_framebuffer needed?  This
      will depend on you and the hardware.  If you are sure that your driver
      is the only device in the system, a call to fb_set_par() is safe.
      Hardware in x86 systems has a VGA core.  Calling set_par() at this
      point will corrupt the VGA console, so it might be safer to skip a
      call to set_par here and just allow fbcon to do it for you.
 xxxfb_set_par(info); 
 or platform_set_drvdata(pdev, info) 
       Cleanup
 static void xxxfb_remove(struct platform_device pdev) 
 or platform_get_drvdata(pdev); 
 ... 
 	xxxfb_suspend - Optional but recommended function. Suspend the device.
 	@dev: PCI device
 	@msg: the suspend event code.
       See Documentationdriver-apipmdevices.rst for more information
 suspend here 
 	xxxfb_resume - Optional but recommended function. Resume the device.
 	@dev: PCI device
       See Documentationdriver-apipmdevices.rst for more information
 resume here 
 CONFIG_PM 
 For PCI drivers 
 optional but recommended 
 optional but recommended 
	
	   For kernel boot options (in 'video=xxxfb:<options>' format)
 non PCI, platform drivers 
 for platform devices 
 	xxxfb_suspend - Optional but recommended function. Suspend the device.
 	@dev: platform device
 	@msg: the suspend event code.
       See Documentationdriver-apipmdevices.rst for more information
 suspend here 
 	xxxfb_resume - Optional but recommended function. Resume the device.
 	@dev: platform device
       See Documentationdriver-apipmdevices.rst for more information
 resume here 
 CONFIG_PM 
 optional but recommended 
 optional but recommended 
       Setup
  Only necessary if your driver takes special options,
  otherwise we fall back on the generic fb_setup().
 Parse user specified options (`video=xxxfb:') 
 MODULE 
	
	   For kernel boot options (in 'video=xxxfb:<options>' format)
 CONFIG_PCI 
 ------------------------------------------------------------------------- 
       Modularization
  linuxdriversvideohgafb.c -- Hercules graphics adaptor frame buffer device
       Created 25 Nov 1999 by Ferenc Bakonyi (fero@drama.obuda.kando.hu)
       Based on skeletonfb.c by Geert Uytterhoeven and
                mdacon.c by Andrew Apted
  History:
  - Revision 0.1.8 (23 Oct 2002): Ported to new framebuffer api.
  - Revision 0.1.7 (23 Jan 2001): fix crash resulting from MDA only cards 
 				   being detected as Hercules.	 (Paul G.)
  - Revision 0.1.6 (17 Aug 2000): new style structs
                                  documentation
  - Revision 0.1.5 (13 Mar 2000): spinlocks instead of saveflags();cli();etc
                                  minor fixes
  - Revision 0.1.4 (24 Jan 2000): fixed a bug in hga_card_detect() for 
                                   HGA-only systems
  - Revision 0.1.3 (22 Jan 2000): modified for the new fb_info structure
                                  screen is cleared after rmmod
                                  virtual resolutions
                                  module parameter 'nologo={0|1}'
                                  the most important: boot logo :)
  - Revision 0.1.0  (6 Dec 1999): faster scrolling and minor fixes
  - First release  (25 Nov 1999)
  This file is subject to the terms and conditions of the GNU General Public
  License.  See the file COPYING in the main directory of this archive
  for more details.
 Description of the hardware layout 
 Base of video memory 
 Size of video memory 
 0 = txt, 1 = gfx mode 
 Register select port 
 Register value port 
 Mode control port 
 Status and Config port 
 Graphics control port 
 HGA register values 
 Global locks 
 Framebuffer driver structures 
 (not sure) 
 Don't assume that tty1 will be the initial current console. 
 -------------------------------------------------------------------------
  Low level hardware functions
 magic 
 horizontal total 
 horizontal displayed 
 horizontal sync pos 
 horizontal sync width 
 vertical total 
 vertical total adjust 
 vertical displayed 
 vertical sync pos 
 interlace mode 
 maximum scanline 
 cursor start 
 cursor end 
 start address 
 cursor location 
 horizontal total 
 horizontal displayed 
 horizontal sync pos 
 horizontal sync width 
 vertical total 
 vertical total adjust 
 vertical displayed 
 vertical sync pos 
 interlace mode 
 maximum scanline 
 cursor start 
 cursor end 
 start address 
 cursor location 
	void __iomem dest = hga_vram;
	char logo = linux_logo_bw;
	int x, y;
	
	for (y = 134; y < 134 + 80 ; y++)  this needs some cleanup 
		for (x = 0; x < 10 ; x++)
			writeb(~(logo++),(dest + HGA_ROWADDR(y) + x + 40));
 start address 
 disable video 
 do a memory check 
	 Ok, there is definitely a card registering at the correct
	  memory location, so now we do an IO port test.
 cursor low register 
 cursor low register 
	 See if the card is a Hercules, by checking whether the vsync
	  bit of the status register is changing.  This test lasts for
	  approximately 110th of a second.
 	hgafb_open - open the framebuffer device
 	@info: pointer to fb_info object containing info for current hga board
 	@init: open by console system or userland.
 	hgafb_release - open the framebuffer device
 	@info: pointer to fb_info object containing info for current hga board
 	@init: open by console system or userland.
 	hgafb_setcolreg - set color registers
 	@regno:register index to set
 	@red:red value, unused
 	@green:green value, unused
 	@blue:blue value, unused
 	@transp:transparency value, unused
 	@info:unused
 	This callback function is used to set the color registers of a HGA
 	board. Since we have only two fixed colors only @regno is checked.
 	A zero is returned on success and 1 for failure.
 	hga_pan_display - pan or wrap the display
 	@var:contains new xoffset, yoffset and vmode values
 	@info:pointer to fb_info object containing info for current hga board
 	This function looks only at xoffset, yoffset and the %FB_VMODE_YWRAP
 	flag in @var. If input parameters are correct it calls hga_pan() to 
 	program the hardware. @info->var is updated to the new values.
 	A zero is returned on success and %-EINVAL for failure.
 	hgafb_blank - (un)blank the screen
 	@blank_mode:blanking method to use
 	@info:unused
 	
 	Blank the screen if blank_mode != 0, else unblank. 
 	Implements VESA suspend and powerdown modes on hardware that supports 
 	disabling hsyncvsync:
 		@blank_mode == 2 means suspend vsync,
 		@blank_mode == 3 means suspend hsync,
 		@blank_mode == 4 means powerdown.
  Accel functions
 ------------------------------------------------------------------------- 
  Functions in fb_info
 ------------------------------------------------------------------------- 
	
	   Initialization
 -------------------------------------------------------------------------
   Modularization
 SPDX-License-Identifier: GPL-2.0
  Framebuffer driver for EFIUEFI based system
  (c) 2006 Edgar Hucek <gimli@dark-green.com>
  Original efi driver written by Gerd Knorr <kraxel@goldbach.in-berlin.de>
 For drm_get_panel_orientation_quirk 
 For DRM_MODE_PANEL_ORIENTATION_ 
 dev with BAR covering the efifb 
	
	   Set a single color register. The values supplied are
	   already rounded down to the hardware's capabilities
	   (according to the entries in the `var' structure). Return
	   != 0 for invalid regno.
  If fbcon deffered console takeover is configured, the intent is for the
  framebuffer to show the boot graphics (e.g. vendor logo) until there is some
  (error) message to display. But the boot graphics may have been destroyed by
  e.g. option ROM output, detect this and restore the boot graphics.
  On x86 some firmwares use a low non native resolution for the display when
  they have shown some text messages. While keeping the bgrt filled with info
  for the native resolution. If the bgrt image intended for the native
  resolution still fits, it will be displayed very close to the right edge of
  the display looking quite bad. This function checks for this.
	
	  All x86 firmwares horizontally center the image (the yoffset
	  calculations differ between boards, but xoffset is predictable).
 Avoid flashing the logo if we're going to print std probe messages 
 bgrt_tab.status is unreliable, so we don't check it 
 Only background? 
 Positive header height means upside down row order 
 FB base matches BAR of a disabled device 
	
	  Generic drivers must not be registered if a framebuffer exists.
	  If a native driver was probed, the display hardware was already
	  taken and attempting to use the system framebuffer is dangerous.
	 We don't get linelength from UGA Draw Protocol, only from
	  EFI Graphics Protocol.  So if it's not in DMI, and it's not
	  passed in from the user, we really can't use the framebuffer.
 just assume they're all unset if any are 
	   size_vmode -- that is the amount of memory needed for the
	                  used video mode, i.e. the minimum amount of
	   size_total -- all video memory we have. Used for
	                  entries, ressource allocation and bounds
	   size_remap -- the amount of video memory we are going to
	                  use for efifb.  With modern cards it is no
	                  option to simply use size_total as that
		 We cannot make this fatal. Sometimes this comes from magic
		
		  If the UEFI memory map covers the efifb region, we may only
		  remap it using the attributes the memory map prescribes.
 some dummy values for timing to make fbset happy 
 SPDX-License-Identifier: GPL-2.0-only
   linuxdriversvideovt8500lcdfb.c
   Copyright (C) 2010 Alexey Charkov <alchark@gmail.com>
  Based on skeletonfb.c and pxafb.c
 16bpp 
 palettized 
 non-palettized 
 RGB565 
 Equal depths per channel 
 wait ;
 Unmask End of Frame interrupt 
 Mask back to reduce unwanted interrupt traffic 
  vt8500lcd_blank():
 	Blank the display by setting all palette values to zero.  Note,
  	True Color modes do not really use the palette, so this will not
       blank the display in all modes.
 try allocating the framebuffer 
	
	  Ok, now enable the LCD controller
   Fast C2P (Chunky-to-Planar) Conversion
   Copyright (C) 2003-2008 Geert Uytterhoeven
   This file is subject to the terms and conditions of the GNU General Public
   License. See the file COPYING in the main directory of this archive
   for more details.
       Perform a full C2P step on 16 8-bit pixels, stored in 4 32-bit words
       containing
         - 16 8-bit chunky pixels on input
         - permutated planar data (2 planes per 32-bit word) on output
       Array containing the permutation indices of the planar data after c2p
       Store a full block of iplan2 data after c2p conversion
       Store a partial block of iplan2 data after c2p conversion
       c2p_iplan2 - Copy 8-bit chunky image data to an interleaved planar
       frame buffer with 2 bytes of interleave
       @dst: Starting address of the planar frame buffer
       @dx: Horizontal destination offset (in pixels)
       @dy: Vertical destination offset (in pixels)
       @width: Image width (in pixels)
       @height: Image height (in pixels)
       @dst_nextline: Frame buffer offset to the next line (in bytes)
       @src_nextline: Image offset to the next line (in bytes)
       @bpp: Bits per pixel of the planar frame buffer (2, 4, or 8)
 Single destination word 
 Multiple destination words 
 Leading bits 
 Main chunk 
 Trailing bits 
  SuperH Mobile LCDC Framebuffer
  Copyright (c) 2008 Magnus Damm
  This file is subject to the terms and conditions of the GNU General Public
  License.  See the file "COPYING" in the main directory of this archive
  for more details.
 ----------------------------------------------------------------------------
  Overlay register definitions
  struct sh_mobile_lcdc_overlay - LCDC display overlay
  @channel: LCDC channel this overlay belongs to
  @cfg: Overlay configuration
  @info: Frame buffer device
  @index: Overlay index (0-3)
  @base: Overlay registers base address
  @enabled: True if the overlay is enabled
  @mode: Overlay blending mode (alpha blend or ROP3)
  @alpha: Global alpha blending value (0-255, for alpha blending mode)
  @rop3: Raster operation (for ROP3 mode)
  @fb_mem: Frame buffer virtual memory address
  @fb_size: Frame buffer size in bytes
  @dma_handle: Frame buffer DMA address
  @base_addr_y: Overlay base address (RGB or luma component)
  @base_addr_c: Overlay base address (chroma component)
  @pan_y_offset: Panning linear offset in bytes (luma component)
  @format: Current pixelf format
  @xres: Horizontal visible resolution
  @xres_virtual: Horizontal total resolution
  @yres: Vertical visible resolution
  @yres_virtual: Vertical total resolution
  @pitch: Overlay line pitch
  @pos_x: Horizontal overlay position
  @pos_y: Vertical overlay position
 2 channel LCDC must share fourcc setting 
 -----------------------------------------------------------------------------
  Registers access
 -----------------------------------------------------------------------------
  Clock management
 -----------------------------------------------------------------------------
  Display, panel and deferred IO
 enable clocks before accessing hardware 
	
	  It's possible to get here without anything on the pagelist via
	  sh_mobile_lcdc_deferred_io_touch() or via a userspace fsync()
	  invocation. In the former case, the acceleration routines are
	  stepped in to when using the framebuffer console causing the
	  workqueue to be scheduled without any dirty pages on the list.
	 
	  Despite this, a panel update is still needed given that the
	  acceleration routines have their own methods for writing in
	  that still need to be updated.
	 
	  The fsync() and empty pagelist case could be optimized for,
	  but we don't bother, as any application exhibiting such
	  behaviour is fundamentally broken anyways.
 trigger panel update 
 HDMI must be enabled before LCDC configuration 
 -----------------------------------------------------------------------------
  Format helpers
 -----------------------------------------------------------------------------
  Start, stop and IRQ
 Acknowledge interrupts and disable further VSYNC End IRQs. 
 figure out if this interrupt is for main or sub lcd 
 wake up channel and disable clocks 
 Frame End 
 VSYNC End 
	 Enable VSync End interrupt and be careful not to acknowledge any
	  pending interrupt.
 start or stop the lcdc 
 wait until power is appliedstopped on all channels 
 stop dotclock 
 setup SYS bus 
 horizontal configuration 
 HTCN 
 HDCN 
 HSYNP 
 HSYNW 
 vertical configuration 
 VTLN 
 VDLN 
 VSYNP 
 VSYNW 
 Adjust horizontal synchronisation for HDMI 
  __sh_mobile_lcdc_start - Configure and start the LCDC
  @priv: LCDC device
  Configure all enabled channels and start the LCDC device. All external
  devices (clocks, MERAM, panels, ...) are not touched by this function.
	 Enable LCDC channels. Read data from external memory, avoid using the
	  BEU for now.
 Stop the LCDC first and disable all interrupts. 
 Configure power supply, dot clocks and start them. 
 Power supply 
		 FIXME: sh7724 can only use 42, 48, 54 and 60 for the divider
		  denominator.
 Setup geometry, format, frame buffer memory and operation mode. 
		 When using deferred IO mode, configure the LCDC for one-shot
		  operation and enable the frame end interrupt. Otherwise use
		  continuous read mode.
 Word and long word swap. 
 Enable the display output. 
 enable clocks before accessing the hardware 
 reset 
 Compute frame buffer base address and pitch for each channel. 
 Start the LCDC. 
	 Setup deferred IO, tell the board code to enable the panels, and
	  turn backlight on.
 clean up deferred io and ask board code to disable panel 
		 deferred io mode:
		  flush frame, and wait for frame end interrupt
		  clean up deferred io and enable clock
 stop the lcdc 
 stop clocks 
	 Make sure the virtual resolution is at least as big as the visible
	  resolution.
		 Default to RGB and JPEG color-spaces for RGB and YUV formats
		  respectively.
 RGB 565 
 RGB 888 
 RGBA 888 
 Make sure we don't exceed our allocated memory. 
 -----------------------------------------------------------------------------
  Frame buffer operations - Overlays
	 If the Y offset hasn't changed, the C offset hasn't either. There's
	  nothing to do in that case.
 Set the source address for the next refresh 
 Overlay blanking. Disable the overlay when blanked. 
	 Prevent the backlight from receiving a blanking event by returning
	  a non-zero value.
 Allocate and initialize the frame buffer device. 
	 Initialize fixed screen information. Restrict pan to 2 lines steps
	  for NV12 and NV21.
 Initialize variable screen information. 
	 Use the legacy API by default for RGB formats, and the FOURCC API
	  for YUV formats.
 -----------------------------------------------------------------------------
  Frame buffer operations - main frame buffer
 only FB_VISUAL_TRUECOLOR supported 
	 If the Y offset hasn't changed, the C offset hasn't either. There's
	  nothing to do in that case.
 Set the source address for the next refresh 
 More framebuffer users are active 
 Display has been re-plugged, framebuffer is free now, reconfigure 
 Couldn't reconfigure, hopefully, can continue as before 
  Locking: both .fb_release() and .fb_open() are called with info->lock held if
  user == 1, or with console sem held, if user == 0.
 Nothing to reconfigure, when called from fbcon 
	 If board code provides us with a list of available modes, make sure
	  we use one of them. Find the mode closest to the requested one. The
	  distance between two modes is defined as the size of the
	  non-overlapping parts of the two rectangles.
 We can only round up. 
 If no available mode can be used, return an error. 
 only accept the forced_fourcc for dual channel configurations 
  Screen blanking. Behavior is as follows:
  FB_BLANK_UNBLANK: screen unblanked, clocks enabled
  FB_BLANK_NORMAL: screen blanked, clocks enabled
  FB_BLANK_VSYNC,
  FB_BLANK_HSYNC,
  FB_BLANK_POWEROFF: screen blanked, clocks disabled
 blank the screen? 
 turn clocks on? 
 turn clocks off? 
		 make sure the screen is updated with the black fill before
		  switching the clocks off. one vsync is not enough since
		  blanking may occur in the middle of a refresh. deferred io
		  mode will reenable the clocks and update the screen in time,
 deferred io mode: disable clock to save power 
	 Allocate and initialize the frame buffer device. Create the modes
	  list and allocate the color map.
	 Initialize fixed screen information. Restrict pan to 2 lines steps
	  for NV12 and NV21.
	 Initialize variable screen information using the first mode as
	  default.
	 Use the legacy API by default for RGB formats, and the FOURCC API
	  for YUV formats.
 -----------------------------------------------------------------------------
  Backlight
 -----------------------------------------------------------------------------
  Power management
 turn off LCDC hardware 
 -----------------------------------------------------------------------------
  Framebuffer notifier
 -----------------------------------------------------------------------------
  Proberemove and driver initexit
 SUBLCD only supports SYS interface 
 Validate the format. 
	 The default Y virtual resolution is twice the panel size to allow for
	  double-buffering.
 Allocate frame buffer memory. 
 Validate the format. 
	 Iterate through the modes to validate them and find the highest
	  resolution.
 NV12NV21 buffers must have even number of lines 
	 Use the first mode as default. The default Y virtual resolution is
	  twice the panel size to allow for double-buffering.
 Allocate frame buffer memory. 
 Initialize the transmitter device if present. 
 probe the backlight is there is one defined 
 for dual channel LCDC (MAIN + SUB) force shared format setting 
 Enable runtime PM. 
   linuxdriversvideosa1100fb.c
   Copyright (C) 1999 Eric A. Thomas
    Based on acornfb.c Copyright (C) Russell King.
  This file is subject to the terms and conditions of the GNU General Public
  License.  See the file COPYING in the main directory of this archive for
  more details.
 	        StrongARM 1100 LCD Controller Frame Buffer Driver
  Please direct your questions and comments on this driver to the following
  email address:
 	linux-arm-kernel@lists.arm.linux.org.uk
  Clean patches should be sent to the ARM Linux Patch System.  Please see the
  following web page for more information:
 	https:www.arm.linux.org.ukdeveloperpatchesinfo.shtml
  Thank you.
  Known problems:
 	- With the Neponset plugged into an Assabet, LCD powerdown
 	  doesn't work (LCD stays powered up).  Therefore we shouldn't
 	  blank the screen.
 	- We don't limit the CPU clock rate nor the mode selection
 	  according to the available SDRAM bandwidth.
  Other notes:
 	- Linear grayscale palettes and the kernel.
 	  Such code does not belong in the kernel.  The kernel frame buffer
 	  drivers do not expect a linear colourmap, but a colourmap based on
 	  the VT100 standard mapping.
 	  If your _userspace_ requires a linear colourmap, then the setup of
 	  such a colourmap belongs _in userspace_, not in the kernel.  Code
 	  to set the colourmap correctly from user space has been sent to
 	  David Neuer.  It's around 8 lines of C code, plus another 4 to
 	  detect if we are using grayscale.
 	- The following must never be specified in a panel definition:
 	     LCCR0_LtlEnd, LCCR3_PixClkDiv, LCCR3_VrtSnchL, LCCR3_HorSnchL
 	- The following should be specified:
 	     either LCCR0_Color or LCCR0_Mono
 	     either LCCR0_Sngl or LCCR0_Dual
 	     either LCCR0_Act or LCCR0_Pas
 	     either LCCR3_OutEnH or LCCD3_OutEnL
 	     either LCCR3_PixRsEdg or LCCR3_PixFlEdg
 	     either LCCR3_ACBsDiv or LCCR3_ACBsCntOff
  Code Status:
  19990401:
 	- Driver appears to be working for Brutus 320x200x8bpp mode.  Other
 	  resolutions are working, but only the 8bpp mode is supported.
 	  Changes need to be made to the palette encode and decode routines
 	  to support 4 and 16 bpp modes.  
 	  Driver is not designed to be a module.  The FrameBuffer is statically
 	  allocated since dynamic allocation of a 300k buffer cannot be 
 	  guaranteed. 
  19990617:
 	- FrameBuffer memory is now allocated at run-time when the
 	  driver is initialized.    
  20000410: Nicolas Pitre <nico@fluxnic.net>
 	- Big cleanup for dynamic selection of machine type at run time.
  20000719: Jamey Hicks <jamey@crl.dec.com>
 	- Support for Bitsy aka Compaq iPAQ H3600 added.
  20000807: Tak-Shing Chan <tchan.rd@idthk.com>
 	       Jeff Sutherland <jsutherland@accelent.com>
 	- Resolved an issue caused by a change made to the Assabet's PLD 
 	  earlier this year which broke the framebuffer driver for newer 
 	  Phase 4 Assabets.  Some other parameters were changed to optimize
 	  for the Sharp display.
  20000809: Kunihiko IMAI <imai@vasara.co.jp>
 	- XP860 support added
  20000819: Mark Huang <mhuang@livetoy.com>
 	- Allows standard options to be passed on the kernel command line
 	  for most common passive displays.
  20000829:
 	- ssave_flags_clilocal_irq_save
 	- remove unneeded extra save_flags_cli in sa1100fb_enable_lcd_controller
  20001010: Erik Mouw <J.A.K.Mouw@its.tudelft.nl>
 	- Updated LART stuff. Fixed some minor bugs.
  20001030: Murphy Chen <murphy@mail.dialogue.com.tw>
 	- Pangolin support added
  20001031: Roman Jordan <jor@hoeft-wessel.de>
 	- Huw Webpanel support added
  20001123: Eric Peng <ericpeng@coventive.com>
 	- Freebird add
  20010207: Jamey Hicks <jamey.hicks@compaq.com> 
 	       Cliff Brake <cbrake@accelent.com>
 	- Added PM callback
  20010526: <rmk@arm.linux.org.uk>
 	- Fix 16bpp so that (a) we use the right colours rather than some
 	  totally random colour depending on what was in page 0, and (b)
 	  we don't de-reference a NULL pointer.
 	- remove duplicated implementation of consistent_alloc()
 	- convert dma address types to dma_addr_t
 	- remove unused 'montype' stuff
 	- remove redundant zero inits of init_var after the initial
 	  memset.
 	- remove allow_modeset (acornfb idea does not belong here)
  20010528: <rmk@arm.linux.org.uk>
 	- massive cleanup - move machine dependent data into structures
 	- I've left various #warnings in - if you see one, and know
 	  the hardware concerned, please get in contact with me.
  20010531: <rmk@arm.linux.org.uk>
 	- Fix LCCR1 HSW value, fix all machine type specifications to
 	  keep values in line.  (Please check your machine type specs)
  20010610: <rmk@arm.linux.org.uk>
 	- Fiddle with the LCD controller from task context only; mainly
 	  so that we can run with interrupts on, and sleep.
 	- Convert #warnings into #errors.  No pain, no gain. ;)
  20010614: <rmk@arm.linux.org.uk>
 	- Make the palette BPS value for 12bpp come out correctly.
 	- Take notice of "greyscale" on any colour depth.
 	- Make truecolor visuals use the RGB channel encoding information.
  20010702: <rmk@arm.linux.org.uk>
 	- Fix colourmap problems.
  20010713: <abraham@2d3d.co.za>
 	- Added support for the ICP LCD-Kit01 on LART. This LCD is
 	  manufactured by Prime View, model no V16C6448AB
  20010723: <rmk@arm.linux.org.uk>
 	- Hand merge version from handhelds.org CVS tree.  See patch
 	  notes for 5951 for more information.
 	- Drop 12bpp (it's 16bpp with different colour register mappings).
 	- This hardware can not do direct colour.  Therefore we don't
 	  support it.
  20010727: <rmk@arm.linux.org.uk>
 	- Halve YRES on dual scan LCDs.
  20010822: <rmk@arm.linux.org.uk>
 	- Add bw iPAQ pixclock value.
  20011012: <rmk@arm.linux.org.uk>
 	- Add patch 6811 and clean up stork definitions.
  Complain if VAR is out of range.
	
	  We need to handle two requests being made at the same time.
	  There are two important cases:
	   1. When we are changing VT (C_REENABLE) while unblanking (C_ENABLE)
	      We must perform the unblanking, which will do our REENABLE for us.
	   2. When we are blanking, but immediately unblank before we have
	      blanked.  We do the "REENABLE" thing here as well, just to be sure.
  Convert bits-per-pixel to a hardware palette PBS value.
	
	  If inverse mode was selected, invert all the colours
	  rather than the register number.  The register number
	  is what you poke into the framebuffer to produce the
	  colour you requested.
	
	  If greyscale is true, then we convert the RGB value
	  to greyscale no mater what visual we are using.
		
		  12 or 16-bit True Colour.  We encode the RGB value
		  according to the RGB bitfield information.
   sa1100fb_display_dma_period()
     Calculate the minimum period (in picoseconds) between two DMA
     requests for the LCD controller.  If we hit this, it means we're
     doing nothing but LCD DMA.
	
	  Period = pixclock  bits_per_byte  bytes_per_transfer
	 		 memory_bits_per_pixel;
   sa1100fb_check_var():
     Round up in the following order: bits_per_pixel, xres,
     yres, xres_virtual, yres_virtual, xoffset, yoffset, grayscale,
     bitfields, horizontal timing, vertical timing.
	
	  Copy the RGB parameters for this display
	  from the machine specific parameters.
  sa1100fb_set_par():
 	Set the user defined part of the display for the specified console
		
		  Some people have weird ideas about wanting static
		  pseudocolor maps.  I suspect their user space
		  applications are broken.
	
	  Set (any) board control register to handle new color depth
	
	  Make sure the user isn't doing something stupid.
  Formal definition of the VESA spec:
   On
   	This refers to the state of the display when it is in full operation
   Stand-By
   	This defines an optional operating state of minimal power reduction with
   	the shortest recovery time
   Suspend
   	This refers to a level of power management in which substantial power
   	reduction is achieved by the display.  The display can have a longer 
   	recovery time from this state than from the Stand-by state
   Off
   	This indicates that the display is consuming the lowest level of power
   	and is non-operational. Recovery from this state may optionally require
   	the user to manually power on the monitor
   Now, the fbdev driver adds an additional state, (blank), where they
   turn off the video (maybe by colormap tricks), but don't mess with the
   video itself: think of it semantically between on and Stand-By.
   So here's what we should do in our fbdev blank routine:
   	VESA_NO_BLANKING (mode 0)	Video on,  frontback light on
   	VESA_VSYNC_SUSPEND (mode 1)  	Video on,  frontback light off
   	VESA_HSYNC_SUSPEND (mode 2)  	Video on,  frontback light off
   	VESA_POWERDOWN (mode 3)		Video off, frontback light off
   This will match the matrox implementation.
  sa1100fb_blank():
 	Blank the display by setting all palette values to zero.  Note, the 
  	12 and 16 bpp modes don't really use the palette, so this will not
       blank the display in all modes.  
 skip over the palette 
	.fb_set_cmap	= sa1100fb_set_cmap,
  Calculate the PCD value from the clock rate (in picoseconds).
  We take account of the PPCR clock setting.
 make up for integer math truncations 
  sa1100fb_activate_var():
 	Configures LCD Controller based on entries in var parameter.  Settings are      
 	only written to the controller if changes were made.  
	
	  If we have a dual scan LCD, then we need to halve
	  the YRES parameter.
 Update shadow copy atomically 
	
	  Only update the registers if the controller is enabled
	  and something has changed.
  NOTE!  The following functions are purely helpers for set_ctrlr_state.
  Do not call them directly; set_ctrlr_state does the correct serialisation
  to ensure that things happen in the right way 100% of time time.
 	-- rmk
	
	  Enable GPIO<9:2> for LCD use if:
	   1. Active display, or
	   2. Color Dual Passive display
	 
	  see table 11.8 on page 11-27 in the SA1100 manual
	    -- Erik.
	 
	  SA1110 spec update nr. 25 says we can and should
	  clear LDD15 to 12 for 4 or 8bpp modes with active
	  panels.  
		
		  SA-1100 requires the GPIO direction register set
		  appropriately for the alternate function.  Hence
		  we set it here via bitmask rather than excessive
		  fiddling via the GPIO subsystem - and even then
		  we'll still have to deal with GAFR.
	
	  Make sure the mode bits are present in the first palette entry
 enable LCD controller clock 
 Sequence from 11.7.10 
 Clear LCD Status Register 
 Enable LCD Disable Done Interrupt 
 Disable LCD Controller 
 disable LCD controller clock 
   sa1100fb_handle_irq: Handle 'LCD DONE' interrupts.
  This function must be called from task context only, since it will
  sleep when disabling the LCD controller, or if we get two contending
  processes trying to alter state.
	
	  Hack around fbcon initialisation.
		
		  Disable controller for clock change.  If the
		  controller is already disabled, then do nothing.
		
		  Disable controller
		
		  Enable the controller after clock change.  Only
		  do this if we were disabled for the clock change.
		
		  Re-enable the controller only if it was already
		  enabled.  This is so we reprogram the control
		  registers.
		
		  Re-enable the controller after PM.  This is not
		  perfect - think about the case where we were doing
		  a clock change, and we suspended half-way through.
		
		  Power up the LCD screen, enable controller, and
		  turn on the backlight.
  Our LCD controller task (which is called when we blank or unblank)
  via keventd.
  CPU clock speed change handler.  We need to adjust the LCD timing
  parameters when the CPU clock is adjusted by the power management
  subsystem.
  Power management hooks.  Note that we won't be called from IRQ context,
  unlike the blank functions above, so we may sleep.
  sa1100fb_map_video_memory():
       Allocates the DRAM memory for the frame buffer.  This buffer is  
 	remapped into a non-cached, non-buffered, memory region to  
       allow palette and pixel writes to occur without flushing the 
       cache.  Once this area is remapped, all virtual memory
       access to the video memory should occur at the new region.
	
	  We reserve one page for the palette, plus the size
	  of the framebuffer.
		
		  FIXME: this is actually the wrong thing to place in
		  smem_start.  But fbdev suffers from the problem that
		  it needs an API which doesn't exist (in this case,
		  dma_writecombine_mmap)
 Fake monspecs to fill in fbinfo structure 
	
	  People just don't seem to get this.  We don't support
	  anything but correct entries now, so panic if someone
	  does something stupid.
 Copy the RGB bitfield overrides 
 Initialize video memory 
	
	  This makes sure that our colour bitfield
	  descriptors are correctly initialised.
 This driver cannot be unloaded at the moment 
  broadsheetfb.c -- FB driver for E-Ink Broadsheet controller
  Copyright (C) 2008, Jaya Kumar
  This file is subject to the terms and conditions of the GNU General Public
  License. See the file COPYING in the main directory of this archive for
  more details.
  Layout is based on skeletonfb.c by James Simmons and Geert Uytterhoeven.
  This driver is written to be used with the Broadsheet display controller.
  It is intended to be architecture independent. A board specific driver
  must be used to perform all the physical IO interactions.
 track panel specific parameters 
 table of panel specific parameters to be indexed into by the board drivers 
 standard 6" on TFT backplane 
 custom 3.7" flexible on PET or steel 
 standard 9.7" on TFT backplane 
 main broadsheetfb functions 
 wait for ready to go hi. (lo is busy) 
 cs lo, dc lo for cmd, we lo for each data, db as usual 
 strobe wr 
 wait for ready to go hi. (lo is busy) 
 cs lo, dc lo for cmd, we lo for each data, db as usual 
 functions for waveform manipulation 
 disable arral saemipu mode 
  The caller must guarantee that the data to be rewritten is entirely
  contained within this sector. That is, data_start_addr + data_len
  must be less than sector_start_addr + sector_size.
 the start address of the sector is the 0th byte of that sector 
	
	  check if there is head data that we need to readback into our sector
	  buffer first
		
		  we need to read every byte up till the start address of our
		  data and we put it into our sector buffer.
 now we copy our data into the right place in the sector buffer 
	
	  now we check if there is a tail section of the sector that we need to
	  readback.
 now we read this tail into our sector buffer 
 if we got here we have the full sector that we want to rewrite. 
 first erase the sector 
 now write it 
 try to enforce reasonable min max on waveform 
 upper level functions that manipulate the display and other stuff 
 did the controller really set it? 
 setup waveform 
 the controller needs a second 
 y1 must be a multiple of 4 so drop the lower bits 
 y2 must be a multiple of 4 , but - 1 so up the lower bits 
 this is called back from the deferred io workqueue 
 height increment is fixed per page 
 walk the written page list and swizzle the data 
 just starting so assign first page 
 this page is consecutive so increase our height 
 page not consecutive, issue previous update first 
 start over with our non consecutive page 
 if we still have any pages to update we do so now 
 its a full screen update, just do it 
  this is the slow path from userspace. they can seek and write to
  the fb. it's inefficient to do anything less than a full screen draw
 pick up board specific routines 
 try to count device specific driver, if can't, platform recalls 
 set cmap 
 this inits the dpy 
   linuxdriversvideopm3fb.c -- 3DLabs Permedia3 frame buffer device
   Copyright (C) 2001 Romain Dolbeau <romain@dolbeau.org>.
   Ported to 2.6 kernel on 1 May 2007 by Krzysztof Helt <krzysztof.h1@wp.pl>
 	based on pm2fb.c
   Based on code written by:
 	   Sven Luther, <luther@dpt-info.u-strasbg.fr>
 	   Alan Hourihane, <alanh@fairlite.demon.co.uk>
 	   Russell King, <rmk@arm.linux.org.uk>
   Based on linuxdriversvideoskeletonfb.c:
 	Copyright (C) 1997 Geert Uytterhoeven
   Based on linuxdrivervideopm2fb.c:
 	Copyright (C) 1998-1999 Ilario Nardinocchi (nardinoc@CS.UniBO.IT)
 	Copyright (C) 1999 Jakub Jelinek (jakub@redhat.com)
   This file is subject to the terms and conditions of the GNU General Public
   License. See the file COPYING in the main directory of this archive for
   more details.
  Driver data
  This structure defines the hardware state of the graphics card. Normally
  you place this in a header file in linuxincludevideo. This file usually
  also includes register information. That allows other driver subsystems
  and userland applications the ability to use the same header file to
  avoid duplicate work and easy porting of software.
 virtual address of p_regs 
 video flags before blanking 
 screen base in 128 bits unit 
  Here we define the default structs fb_fix_screeninfo and fb_var_screeninfo
  if we don't use modedb. If we do use modedb see pm3fb_init how to use it
  to get a fb_var_screeninfo. Otherwise define a default var as well.
  Utility functions
 Calculating various clock parameters 
 acceleration 
 invert bits in bitmask 
 size in lines of FB 
 Disable LocalBuffer. better safe than sorry 
 GXcopy 
 GXxor 
 ROP Ox3 is GXcopy 
(sx > dx ) ? (sx - dx) : (dx - sx); 
(sy > dy ) ? (sy - dy) : (dy - sy); 
 Ox3 is GXcopy 
 ROP Ox3 is GXcopy 
 end of acceleration functions 
 	Hardware Cursor support.
 just to force soft_cursor() call 
 Too large of a cursor or wrong bpp :-( 
	
	  If the cursor is not be changed this means either we want the
	  current cursor state (if enable is set) or we want to query what
	  we can do with the cursor (if enable is not set)
 the X11 driver says one should use these color registers 
 Upper 4 bits of bitmap data 
 Lower 4 bits of bitmap 
 write the mode to registers 
 ! __BIG_ENDIAN 
 ! __BIG_ENDIAN 
	
	  Oxygen VX1 - it appears that setting PM3VideoControl and
	  then PM3RD_SyncControl to the same SYNC settings undoes
	  any net change - they seem to xor together.  Only set the
	  sync options in PM3RD_SyncControl.  --rmk
 ClkPreScale 
 ClkFeedBackScale 
 ClkPostScale 
	
	   PM3_WRITE_DAC_REG(par, PM3RD_IndexControl, 0x00);
	
	   PM3_SLOW_WRITE_REG(par, PM3RD_IndexControl, 0x00);
  hardware independent functions
 set predefined mode for bits_per_pixel settings 
 it is assumed BGRA order 
 could sometimes be 8 
 Can't mmap if this is on 
	pm3fb_clear_memory(info, 0);
 no. of hw registers 
 grayscale works only partially under directcolor 
 grayscale = 0.30R + 0.59G + 0.11B 
	 Directcolor:
	    var->{color}.offset contains start of bitfield
	    var->{color}.length contains length of bitfield
	    {hardwarespecific} contains width of DAC
	    pseudo_palette[X] is programmed to (X << red.offset) |
	 					(X << green.offset) |
	 					(X << blue.offset)
	    RAMDAC[X] is programmed to (red, green, blue)
	    color depth = SUM(var->{color}.length)
	 
	  Pseudocolor:
	 	var->{color}.offset is 0
	 	var->{color}.length contains width of DAC or the number
	 			of unique colors available (color depth)
	 	pseudo_palette is not used
	 	RAMDAC[X] is programmed to (red, green, blue)
	 	color depth = var->{color}.length
	
	  This is the point where the color is converted to something that
	  is acceptable by the hardware.
	
	  Oxygen VX1 - it appears that setting PM3VideoControl and
	  then PM3RD_SyncControl to the same SYNC settings undoes
	  any net change - they seem to xor together.  Only set the
	  sync options in PM3RD_SyncControl.  --rmk
	
	   Frame buffer operations
 ------------------------------------------------------------------------- 
	
	   Initialization
 mmio register are already mapped when this function is called 
 the pm3fb_fix.smem_start is also set 
 request full aperture size 
 Linear frame buffer - request region and map it. 
 TODO: card-specific stuff, before accessing any FB memory 
 For Appian Jeronimo 2000 board second head 
	 pm3 split up memory, replicates, and do a lot of
	  nasty stuff IMHO ;-)
 Let's check for wrapover, write will fail at 16MB boundary 
 Clear first 32MB ; 0 is 0, no need to byteswap 
 different value, different RAM... 
 for pci drivers 
	
	  Dynamically allocate info and par
	
	  Here we set the screen_base to the virtual memory address
	  for the framebuffer.
 Registers - request region and map it. 
 Linear frame buffer - request region and map it. 
	
	  This should give a reasonable default video mode. The following is
	  done when we can set a video mode.
	
	  For drivers that can...
	
	   Cleanup
 For PCI drivers 
	
	   Setup
  Only necessary if your driver takes special options,
  otherwise we fall back on the generic fb_setup().
 Parse user specified options (`video=pm3fb:') 
 MODULE 
	
	   For kernel boot options (in 'video=pm3fb:<options>' format)
  linuxdriversvideoatafb.c -- Atari builtin chipset frame buffer device
   Copyright (C) 1994 Martin Schaller & Roman Hodek
  This file is subject to the terms and conditions of the GNU General Public
  License.  See the file COPYING in the main directory of this archive
  for more details.
  History:
    - 03 Jan 95: Original version by Martin Schaller: The TT driver and
                 all the device independent stuff
    - 09 Jan 95: Roman: I've added the hardware abstraction (hw_switch)
                 and wrote the Falcon, ST(E), and External drivers
                 based on the original TT driver.
    - 07 May 95: Martin: Added colormap operations for the external driver
    - 21 May 95: Martin: Added support for overscan
 		  Andreas: some bug fixes for this
    -    Jul 95: Guenther Kelleter <guenther@pool.informatik.rwth-aachen.de>:
                 Programmable Falcon video modes
                 (thanks to Christian Cartus for documentation
                 of VIDEL registers).
    - 27 Dec 95: Guenther: Implemented user definable video modes "user[0-7]"
                 on minor 24...31. "user0" may be set on commandline by
                 "R<x>;<y>;<depth>". (Makes sense only on Falcon)
                 Video mode switch on Falcon now done at next VBL interrupt
                 to avoid the annoying right shift of the screen.
    - 23 Sep 97: Juergen: added xres_virtual for cards like ProMST
                 The external-part is legacy, therefore hardware-specific
                 functions like panninghardwarescrollingblanking isn't
 				  supported.
    - 29 Sep 97: Juergen: added Romans suggestion for pan_display
 				  (var->xoffset was changed even if no set_screen_base avail.)
 	 - 05 Oct 97: Juergen: extfb (PACKED_PIXEL) is FB_PSEUDOCOLOR 'cause
 				  we know how to set the colors
 				  ext_palette: read from ext_colors (former MV300_colors)
 							    write to ext_colors and RAMDAC
  To do:
    - For the Falcon it is not possible to set random video modes on
      SM124 and SCTV, only the bootup resolution is supported.
 modes for switch on OverScan 
 default resolution (0=none) 
	
	  Hardware parameters for current mode
			 Here are fields for storing a video mode, as direct
			  parameters for the hardware.
 auxiliary information 
 Nothing needed for external mode 
 Don't calculate an own resolution, and thus don't change the one found when
  booting (currently used for the Falcon to keep settings for internal video
 base address of screen 
 (only for Overscan) 
 external video handling 
  not needed - atafb will never support panninghardwarescroll with external
  static unsigned int external_yres_virtual;
  JOE <joe@amber.dinoco.de>:
  added card type for external driver, is only needed for
  colormap handling.
  The MV300 mixes the color registers. So we need an array of munged
  indices in order to access the correct reg.
 ATAFB_EXT 
  struct fb_ops {
 	 openrelease and usage marking
 	struct module owner;
 	int (fb_open)(struct fb_info info, int user);
 	int (fb_release)(struct fb_info info, int user);
 	 For framebuffers with strange non linear layouts or that do not
 	 work with normal memory mapped access
 	ssize_t (fb_read)(struct file file, char __user buf, size_t count, loff_t ppos);
 	ssize_t (fb_write)(struct file file, const char __user buf, size_t count, loff_t ppos);
 	 checks var and eventually tweaks it to something supported,
 	 DOES NOT MODIFY PAR 
 	int (fb_check_var)(struct fb_var_screeninfo var, struct fb_info info);
 	 set the video mode according to info->var 
 	int (fb_set_par)(struct fb_info info);
 	 set color register 
 	int (fb_setcolreg)(unsigned int regno, unsigned int red, unsigned int green,
 			    unsigned int blue, unsigned int transp, struct fb_info info);
 	 set color registers in batch 
 	int (fb_setcmap)(struct fb_cmap cmap, struct fb_info info);
 	 blank display 
 	int (fb_blank)(int blank, struct fb_info info);
 	 pan display 
 	int (fb_pan_display)(struct fb_var_screeninfo var, struct fb_info info);
 	 The meat of the drawing engine 
 	 Draws a rectangle 
 	void (fb_fillrect) (struct fb_info info, const struct fb_fillrect rect);
 	 Copy data from area to another 
 	void (fb_copyarea) (struct fb_info info, const struct fb_copyarea region);
 	 Draws a image to the display 
 	void (fb_imageblit) (struct fb_info info, const struct fb_image image);
 	 Draws cursor 
 	int (fb_cursor) (struct fb_info info, struct fb_cursor cursor);
 	 wait for blit idle, optional 
 	int (fb_sync)(struct fb_info info);
 	 perform fb specific ioctl (optional) 
 	int (fb_ioctl)(struct fb_info info, unsigned int cmd,
 			unsigned long arg);
 	 Handle 32bit compat ioctl (optional) 
 	int (fb_compat_ioctl)(struct fb_info info, unsigned int cmd,
 			unsigned long arg);
 	 perform fb specific mmap 
 	int (fb_mmap)(struct fb_info info, struct vm_area_struct vma);
  } ;
 ++roman: This structure abstracts from the underlying hardware (ST(e),
  TT, or Falcon.
  int (detect)(void)
    This function should detect the current video mode settings and
    store them in atafb_predefined[0] for later reference by the
    user. Return the index+1 of an equivalent predefined mode or 0
    if there is no such.
  int (encode_fix)(struct fb_fix_screeninfo fix,
                    struct atafb_par par)
    This function should fill in the 'fix' structure based on the
    values in the 'par' structure.
  !!! Obsolete, perhaps !!!
  int (decode_var)(struct fb_var_screeninfo var,
                    struct atafb_par par)
    Get the video params out of 'var'. If a value doesn't fit, round
    it up, if it's too big, return EINVAL.
    Round up in the following order: bits_per_pixel, xres, yres,
    xres_virtual, yres_virtual, xoffset, yoffset, grayscale, bitfields,
    horizontal timing, vertical timing.
  int (encode_var)(struct fb_var_screeninfo var,
                    struct atafb_par par);
    Fill the 'var' structure based on the values in 'par' and maybe
    other values read out of the hardware.
  void (get_par)(struct atafb_par par)
    Fill the hardware's 'par' structure.
    !!! Used only by detect() !!!
  void (set_par)(struct atafb_par par)
    Set the hardware according to 'par'.
  void (set_screen_base)(void s_base)
    Set the base address of the displayed frame buffer. Only called
    if yres_virtual > yres or xres_virtual > xres.
  int (blank)(int blank_mode)
    Blank the screen if blank_mode != 0, else unblank. If blank == NULL then
    the caller blanks by setting the CLUT to all black. Return 0 if blanking
    succeeded, !=0 if un-blanking failed due to e.g. a video mode which
    doesn't support it. Implements VESA suspend and powerdown modes on
    hardware that supports disabling hsyncvsync:
        blank_mode == 2: suspend vsync, 3:suspend hsync, 4: powerdown.
	
	  yres_virtual == 0 means use hw-scrolling if possible, else yres
 autodetect 
 xres-grayscale 
 red green blue tran
 st low 
 st mid 
 st high 
 tt low 
 tt mid 
 tt high 
 vga2 
 vga4 
 vga16 
 vga256 
 falh2 
 falh16 
	
	   Atari Video Modes
	 
	   If you change these, make sure to update DEFMODE_ as well!
	
	   STTT Video Modes
 320x200, 15 kHz, 60 Hz (ST low) 
 640x200, 15 kHz, 60 Hz (ST medium) 
 640x400, 30.25 kHz, 63.5 Hz (ST high) 
 320x480, 15 kHz, 60 Hz (TT low) 
 640x480, 29 kHz, 57 Hz (TT medium) 
 1280x960, 29 kHz, 60 Hz (TT high) 
	
	   VGA Video Modes
 640x480, 31 kHz, 60 Hz (VGA) 
 640x400, 31 kHz, 70 Hz (VGA) 
	
	   Falcon HiRes Video Modes
 896x608, 31 kHz, 60 Hz (Falcon High) 
 default modes 
 "tt-high" for TT 
 "vga70" for Falcon 
 "st-high" for STE 
 "vga" for external 
 ------------------- TT specific functions ---------------------- 
 these may be incorrect 
 yres_virtual == 0 means use maximum 
 only set screen_base if really necessary 
	 Determine the connected monitor: The DMA sound must be
	  disabled before reading the MFP GPIP, because the Sound
	  Done Signal and the Monochrome Detect are XORed together!
	 
	  Even on a TT, we should look if there is a DMA sound. It was
	  announced that the Eagle is TT compatible, but only the PCM is
	  missing...
 wait a while for things to settle down 
 ATAFB_TT 
 ------------------- Falcon specific functions ---------------------- 
 Falcon connected monitor 
 Falcon ram bus width (for vid_control) 
 f[Hz] 
 t[ps] (=1f) 
 standard timing in clock cycles, not pixel 
 hsync initialized in falcon_detect() 
 or-mask for hw.falcon.sync to set this clock 
 ditto, for hw.falcon.vid_control 
 VIDEL-prescale values [mon_type][pixel_length from VCO] 
 Default hsync timing [mon_type] in picoseconds 
 no smooth scrolling with longword aligned video mem 
 Is this ok or should it be DIRECTCOLOR? 
 width of pixel in clock cycles 
	Get the video params out of 'var'. If a value doesn't fit, round
	it up, if it's too big, return EINVAL.
	Round up in the following order: bits_per_pixel, xres, yres,
	xres_virtual, yres_virtual, xoffset, yoffset, grayscale, bitfields,
	horizontal timing, vertical timing.
	There is a maximum of screen resolution determined by pixelclock
	and minimum frame rate -- (X+hmarg.)(Y+vmarg.)vfmin <= pixelclock.
	In interlace mode this is     "         "     vfmin <= pixelclock.
	Additional constraints: hfreq.
	Frequency range for multisync monitors is given via command line.
	For TV and SM124 both frequencies are fixed.
	X % 16 == 0 to fit 8x?? font (except 1 bitplane modes must use X%32 == 0)
	Y % 16 == 0 to fit 8x16 font
	Y % 8 == 0 if Y<400
	Currently interlace and doubleline mode in var are ignored.
	On SM124 and TV only the standard resolutions can be used.
 Reject uninitialized mode 
 packed pixel mode 
 hicolor, no overlay 
 Skip all calculations. VGATVSC1224 only supported. 
 Current par will be new par 
 Don't forget this 
 Only some fixed resolutions < 640x400 
 2 planes must use STE compatibility mode 
	 Total and visible scanline length must be a multiple of one longword,
	  this and the console fontwidth yields the alignment for xres and
	  xres_virtual.
	  TODO: this way "odd" fontheights are not supported
	 
	  Special case in STE mode: blank and graphic positions don't align,
	  avoid trash at right margin
 backward bug-compatibility 
 single or double pixel width 
 SM124 supports only 640x400, this is rejected above 
 SM124-mode is special 
 TODO set all margins 
 set some minimal margins which center the screen 
 F_MON_VGA 
 Double pixel width only for hicolor 
 Default values are used for vert.hor. timing if no pixelclock given. 
 Choose master pixelclock depending on hor. timing 
 Choose largest pixelclock <= wanted clock 
 Internal unit is [single lines per (half-)frame] 
 # lines in half frame 
 External unit is [lines per full frame] 
 External unit is [double lines per frame] 
 VIDEL doesn't synchronize on short offset 
 Is video bus bandwidth (32MBs) too low for this resolution? 
 this is definitely wrong if bus clock != 32MHz 
 include sync lengths in rightlower margin for all calculations 
	 ! In all calculations of margins we use # of lines in half frame
	  (which is a full frame in non-interlace mode), so we can switch
	  between interlace and non-interlace without messing around
	  with these.
 Set base_offset 128 and video bus width 
 base_offset 64 
 Pixelclock 
 External or internal clock 
 Pixellength and prescale 
	
	  Horizontal timing: unit = [master clock cycles]
	  unit of hxx-registers: [master clock cycles  prescale]
	  Hxx-registers are 9 bit wide
	 
	  1 line = ((hht + 2)  2  prescale) clock cycles
	 
	  graphic output = hdb & 0x200 ?
	         ((hht + 2)  2 - hdb + hde)  prescale - hdboff + hdeoff:
	         (hht + 2  - hdb + hde)  prescale - hdboff + hdeoff
	  (this must be a multiple of plen128bpp, on VGA pixels
	   to the right may be cut off with a bigger right margin)
	 
	  start of graphics relative to start of 1st halfline = hdb & 0x200 ?
	         (hdb - hht - 2)  prescale + hdboff :
	         hdb  prescale + hdboff
	 
	  end of graphics relative to start of 1st halfline =
	         (hde + hht + 2)  prescale + hdeoff
 Calculate VIDEL registers 
 Offsets depend on video mode 
	 Offsets are in clock cycles, divide by prescale to
	  calculate hd[be]-registers
 gend1 is for hde (gend-gstart multiple of align), shifter's xres 
 gend2 is for hbb, visible xres (rest to gend1 is cut off by hblank) 
	par->HHT = (gend2 + plen  right_margin  prescale)  2 - 2;
 One more Videl constraint: data fetch of two lines must not overlap 
 if this happens increase margins, decrease hfreq. 
 compensate for non matching hde and hbb 
  check hor. frequency 
 ++guenther:   ^^^^^^^^^^^^^^^^^^^ can't remember why I did this 
 Too high -> enlarge margin 
 Vxx-registers 
	 All Vxx must be odd in non-interlace, since frame starts in the middle
	  of the first displayed line!
	  One frame consists of VFT+1 half lines. VFT+1 must be even in
	  non-interlace, odd in interlace mode for synchronisation.
	  Vxx-registers are 11 bit wide
 must begin on odd halfline 
 VDE now half lines per (half-)frame 
 vbb,vss,vft must be even in interlace mode 
 V-frequency check, hope I didn't create any loop here. 
 Interlace and doubleline are mutually exclusive. 
 Too high -> try again with doubleline 
 Too low -> try again with interlace 
 Doubleline too low -> clear doubleline and enlarge margins 
 Doubleline too high -> enlarge margins 
 Interlace, too high -> enlarge margins 
 !!! only for VGA !!! 
 possible frequencies: 25.175 or 32MHz 
	 visible y resolution:
	  Graphics display starts at line VDB and ends at line
	  VDE. If interlace mode off unit of VC-registers is
	  half lines, else lines.
	
	  to get bpp, we must examine f_shift and st_shift.
	  f_shift is valid if any of bits no. 10, 8 or 4
	  is set. Priority in f_shift is: 10 ">" 8 ">" 4, i.e.
	  if bit 10 set then bit 8 and bit 4 don't care...
	  If all these bits are 0 get display depth from st_shift
	  (as for ST and STE)
 2 colors 
 hicolor 
 8 bitplanes 
 if (hw->st_shift == 0x200) 
 yres_virtual == 0 means use maximum 
 TODO change this 
 hdX-offsets 
 Right margin includes hsync 
 can't use this in ste_mode, because hbb is +1 off 
 Lower margin includes vsync 
 round down to full lines 
 round up 
 round up 
 what is this for? 
 derived parameters 
 only set screen_base if really necessary 
 Don't touch any other registers if we keep the default resolution 
	 Tell vbl-handler to change video mode.
	  We change modes only on next VBL, to avoid desynchronisation
	  (a shift to the right and wrap around by a random number of pixels
	  in all monochrome modes).
	  This seems to work on my Falcon.
 Enable external pixelclock. This code only for ScreenWonder 
 Turn off external clocks. Read sets all output bits to 1. 
 write enables Falcon palette, 0: 4 planes 
 write enables STE palette 
			 IMPORTANT:
			  set st_shift 0, so we can tell the screen-depth if f_shift == 0.
			  Writing 0 to f_shift enables 4 plane Falcon mode but
			  doesn't set st_shift. st_shift != 0 (!= 4planes) is impossible
			  with Falcon palette.
 now back to Falcon palette mode 
 writing to st_shift changed scn_width and vid_mode 
 shouldn't happen 
	 ++guenther: we can switch off graphics by changing VDB and VDE,
	  so VIDEL doesn't hog the bus while saving.
	  (this may affect usleep()).
 this doesn't work on SM124 
 disable graphics output (this speeds up the CPU) ... 
 ... and blank all lines 
 use VESA suspend modes on VGA monitors 
 Determine connected monitor and set monitor parameters 
 bit 1 of fhw: 1=32 bit ram bus, 0=16 bit 
 PAL...NTSC 
 not 50, since TOS defaults to 49.9x Hz 
 initialize hsync-len 
 Detected mode is always the "autodetect" slot 
 ATAFB_FALCON 
 ------------------- ST(E) specific functions ---------------------- 
 these are incorrect 
 yres_virtual == 0 means use maximum 
 only set screen_base if really necessary 
	 Determine the connected monitor: The DMA sound must be
	  disabled before reading the MFP GPIP, because the Sound
	  Done Signal and the Monochrome Detect are XORed together!
 wait a while for things to settle down 
 Setup Screen Memory 
 ATAFB_STE 
 Switching the screen size should be done during vsync, otherwise
  the margins may get messed up. This is a well known problem of
  the ST's video system.
  Unfortunately there is hardly any way to find the vsync, as the
  vertical blank interrupt is no longer in time on machines with
  overscan type modifications.
  We can, however, use Timer B to safely detect the black shoulder,
  but then we've got to guess an appropriate delay to find the vsync.
  This might not work on every machine.
  martin_rogge @ ki.maus.de, 8th Aug 1995
 SWITCH_ACIA may be used for Falcon (ScreenBlaster III internal!) 
 TOS does it this way, don't ask why 
 ------------------- External Video ---------------------- 
		 The letters 'n' and 'i' in the "atavideo=external:" stand
 Use STATIC if we don't know how to access color registers 
 truecolor 
 these are surely incorrect 
 ATAFB_EXT 
 ------ This is the same for most hardware types -------- 
 Setup Screen Memory 
 ------------ Interfaces to hardware functions ------------ 
 =========================================================== 
 ============== Hardware Independent Functions ============= 
 =========================================================== 
 used for hardware scrolling 
 fbhw->encode_fix() must be called with fb_info->mm_lock held
  if it is called after the register_framebuffer() - not a case here
 Get fix directly (case con == -1 before)??
 No longer called by fbcon!
 Still called by set_var internally
 Note: smem_start derives from phys_screen_base, not screen_base! 
  generic drawing routines; imageblit needs updating for image depth > 1
	
	  We could use hardware clipping but on many cards you get around
	  hardware clipping by writing to framebuffer directly.
 clip the destination 
 update sx,sy 
 the source must be completely inside the virtual screen 
	
	  We could use hardware clipping but on many cards you get around
	  hardware clipping by writing to framebuffer directly like we are
	  doing here.
 used for font data
 (un)blankpoweroff
  0 = unblank
  1 = blank
  2 = suspend vsync
  3 = suspend hsync
  4 = off
	
	  New fbcon interface ...
	  check var by decoding var into hw par, rounding if necessary,
 Validate wanted screen parameters 
 if ((err = ata_decode_var(var, &par)))
 Encode (possibly rounded) screen parameters 
	 actually set hw par by decoding var, then setting hardware from
 Decode wanted screen parameters 
 Set new videomode 
 First try the user supplied mode 
 failed 
 Next is the autodetected one 
 autodetect 
 If that also failed, try some default modes... 
 try default1, default2... 
 ok 
	 Format is: <xres>;<yres>;<depth>;<plane organ.>;
	             <screen mem addr>
	 	      [;<screen mem length>[;<vgaiobase>[;<bits-per-col>[;<colorreg-type>
	 	      [;<xres-virtual>]]]]]
	 
	  092397	Juergen
	  <xres_virtual>:	hardware's x-resolution (f.e. ProMST)
	 
	  Even xres_virtual is available, we neither support panning nor hw-scrolling!
 true color 
 ATAFB_EXT 
	 Format to config extended internal video hardware like OverScan:
	  "internal:<xres>;<yres>;<xres_max>;<yres_max>;<offset>"
	  Explanation:
	  <xres>: x-resolution
	  <yres>: y-resolution
	  The following are only needed if you have an overscan which
	  needs a black border:
	  <xres_max>: max. length of a line in pixels your OverScan hardware would allow
	  <yres_max>: max. number of lines your OverScan hardware would allow
	  <offset>: Offset from physical beginning to visible beginning
	 	  of screen in bytes
	 Format for monitor capabilities is: <Vmin>;<Vmax>;<Hmin>;<Hmax>
	  <V> vertical freq. in Hz
	  <H> horizontal freq. in kHz
 ATAFB_FALCON 
	 Format of user defined video mode is: <xres>;<yres>;<depth>
 external pixelclock in kHz --> ps 
 ATAFB_STE 
 no default driver included 
 Nobody will ever see this message :-) 
 Multisync monitor capabilities 
 Atari-TOS defaults if no boot option present 
 ATAFB_EXT 
			 On a '040+, the cache mode of video RAM must be set to
		 Map the video memory (physical address given) to somewhere
		  in the kernel address space.
 ATAFB_EXT 
	strcpy(fb_info.mode->name, "Atari Builtin ");
 try to set default (detected; requested) var
 reads hw state into current par, which may not be sane yet
 tries to read from HW which may not be initialized yet
 so set sane var first, then call atafb_set_par
 TODO: This driver cannot be unloaded yet 
 Unblank before kexec 
  linuxdriversvideoamifb.c -- Amiga builtin chipset frame buffer device
     Copyright (C) 1995-2003 Geert Uytterhoeven
           with work by Roman Zippel
  This file is based on the Atari frame buffer device (atafb.c):
     Copyright (C) 1994 Martin Schaller
                        Roman Hodek
           with work by Andreas Schwab
                        Guenther Kelleter
  and on the original Amiga console driver (amicon.c):
     Copyright (C) 1993 Hamish Macdonald
                        Greg Harp
     Copyright (C) 1994 David Carter [carter@compsci.bristol.ac.uk]
           with work by William Rucklidge (wjr@cs.cornell.edu)
                        Geert Uytterhoeven
                        Jes Sorensen (jds@kom.auc.dk)
  History:
    - 24 Jul 96: Copper generates now vblank interrupt and
                 VESA Power Saving Protocol is fully implemented
    - 14 Jul 96: Rework and hopefully last ECS bugs fixed
    -  7 Mar 96: Hardware sprite support by Roman Zippel
    - 18 Feb 96: OCS and ECS support by Roman Zippel
                 Hardware functions completely rewritten
    -  2 Dec 95: AGA version by Geert Uytterhoeven
  This file is subject to the terms and conditions of the GNU General Public
  License. See the file COPYING in the main directory of this archive
  for more details.
 define at least one fb driver, this will change later 
   Generic video timings
   ---------------------
   Timings used by the frame buffer interface:
   +----------+---------------------------------------------+----------+-------+
   |          |                ^                            |          |       |
   |          |                |upper_margin                |          |       |
   |          |                v                            |          |       |
   +----------###############################################----------+-------+
   |          #                ^                            #          |       |
   |          #                |                            #          |       |
   |          #                |                            #          |       |
   |          #                |                            #          |       |
   |   left   #                |                            #  right   | hsync |
   |  margin  #                |       xres                 #  margin  |  len  |
   |<-------->#<---------------+--------------------------->#<-------->|<----->|
   |          #                |                            #          |       |
   |          #                |                            #          |       |
   |          #                |                            #          |       |
   |          #                |yres                        #          |       |
   |          #                |                            #          |       |
   |          #                |                            #          |       |
   |          #                |                            #          |       |
   |          #                |                            #          |       |
   |          #                |                            #          |       |
   |          #                |                            #          |       |
   |          #                |                            #          |       |
   |          #                |                            #          |       |
   |          #                v                            #          |       |
   +----------###############################################----------+-------+
   |          |                ^                            |          |       |
   |          |                |lower_margin                |          |       |
   |          |                v                            |          |       |
   +----------+---------------------------------------------+----------+-------+
   |          |                ^                            |          |       |
   |          |                |vsync_len                   |          |       |
   |          |                v                            |          |       |
   +----------+---------------------------------------------+----------+-------+
   Amiga video timings
   -------------------
   The Amiga native chipsets uses another timing scheme:
      - hsstrt:   Start of horizontal synchronization pulse
      - hsstop:   End of horizontal synchronization pulse
      - htotal:   Last value on the line (i.e. line length = htotal + 1)
      - vsstrt:   Start of vertical synchronization pulse
      - vsstop:   End of vertical synchronization pulse
      - vtotal:   Last line value (i.e. number of lines = vtotal + 1)
      - hcenter:  Start of vertical retrace for interlace
   You can specify the blanking timings independently. Currently I just set
   them equal to the respective synchronization values:
      - hbstrt:   Start of horizontal blank
      - hbstop:   End of horizontal blank
      - vbstrt:   Start of vertical blank
      - vbstop:   End of vertical blank
   Horizontal values are in color clock cycles (280 ns), vertical values are in
   scanlines.
   (0, 0) is somewhere in the upper-left corner :-)
   Amiga visible window definitions
   --------------------------------
   Currently I only have values for AGA, SHRES (28 MHz dotclock). Feel free to
   make corrections andor additions.
   Within the above synchronization specifications, the visible window is
   defined by the following parameters (actual register resolutions may be
   different; all horizontal values are normalized with respect to the pixel
   clock):
      - diwstrt_h:   Horizontal start of the visible window
      - diwstop_h:   Horizontal stop + 1() of the visible window
      - diwstrt_v:   Vertical start of the visible window
      - diwstop_v:   Vertical stop of the visible window
      - ddfstrt:     Horizontal start of display DMA
      - ddfstop:     Horizontal stop of display DMA
      - hscroll:     Horizontal display output delay
   Sprite positioning:
      - sprstrt_h:   Horizontal start - 4 of sprite
      - sprstrt_v:   Vertical start of sprite
   () Even Commodore did it wrong in the AGA monitor drivers by not adding 1.
   Horizontal values are in dotclock cycles (35 ns), vertical values are in
   scanlines.
   (0, 0) is somewhere in the upper-left corner :-)
   Dependencies (AGA, SHRES (35 ns dotclock))
   -------------------------------------------
   Since there are much more parameters for the Amiga display than for the
   frame buffer interface, there must be some dependencies among the Amiga
   display parameters. Here's what I found out:
      - ddfstrt and ddfstop are best aligned to 64 pixels.
      - the chipset needs 64 + 4 horizontal pixels after the DMA start before
	the first pixel is output, so diwstrt_h = ddfstrt + 64 + 4 if you want
	to display the first pixel on the line too. Increase diwstrt_h for
	virtual screen panning.
      - the display DMA always fetches 64 pixels at a time (fmode = 3).
      - ddfstop is ddfstrt+#pixels - 64.
      - diwstop_h = diwstrt_h + xres + 1. Because of the additional 1 this can
	be 1 more than htotal.
      - hscroll simply adds a delay to the display output. Smooth horizontal
	panning needs an extra 64 pixels on the left to prefetch the pixels that
	`fall off' on the left.
      - if ddfstrt < 192, the sprite DMA cycles are all stolen by the bitplane
	DMA, so it's best to make the DMA start as late as possible.
      - you really don't want to make ddfstrt < 128, since this will steal DMA
	cycles from the other DMA channels (audio, floppy and Chip RAM refresh).
      - I make diwstop_h and diwstop_v as large as possible.
   General dependencies
   --------------------
      - all values are SHRES pixel (35ns)
		  table 1:fetchstart  table 2:prefetch    table 3:fetchsize
		  ------------------  ----------------    -----------------
   Pixclock     # SHRES|HIRES|LORES # SHRES|HIRES|LORES # SHRES|HIRES|LORES
   -------------#------+-----+------#------+-----+------#------+-----+------
   Bus width 1x #   16 |  32 |  64  #   16 |  32 |  64  #   64 |  64 |  64
   Bus width 2x #   32 |  64 | 128  #   32 |  64 |  64  #   64 |  64 | 128
   Bus width 4x #   64 | 128 | 256  #   64 |  64 |  64  #   64 | 128 | 256
      - chipset needs 4 pixels before the first pixel is output
      - ddfstrt must be aligned to fetchstart (table 1)
      - chipset needs also prefetch (table 2) to get first pixel data, so
	ddfstrt = ((diwstrt_h - 4) & -fetchstart) - prefetch
      - for horizontal panning decrease diwstrt_h
      - the length of a fetchline must be aligned to fetchsize (table 3)
      - if fetchstart is smaller than fetchsize, then ddfstrt can a little bit
	moved to optimize use of dma (useful for OCSECS overscan displays)
      - ddfstop is ddfstrt + ddfsize - fetchsize
      - If C= didn't change anything for AGA, then at following positions the
	dma bus is already used:
	ddfstrt <  48 -> memory refresh
		<  96 -> disk dma
		< 160 -> audio dma
		< 192 -> sprite 0 dma
		< 416 -> sprite dma (32 per sprite)
      - in accordance with the hardware reference manual a hardware stop is at
	192, but AGA (ECS?) can go below this.
   DMA priorities
   --------------
   Since there are limits on the earliest start value for display DMA and the
   display of sprites, I use the following policy on horizontal panning and
   the hardware cursor:
      - if you want to start display DMA too early, you lose the ability to
	do smooth horizontal panning (xpanstep 1 -> 64).
      - if you want to go even further, you lose the hardware cursor too.
   IMHO a hardware cursor is more important for X than horizontal scrolling,
   so that's my motivation.
   Implementation
   --------------
   ami_decode_var() converts the frame buffer values to the Amiga values. It's
   just a `straightforward' implementation of the above rules.
   Standard VGA timings
   --------------------
	       xres  yres    left  right  upper  lower    hsync    vsync
	       ----  ----    ----  -----  -----  -----    -----    -----
      80x25     720   400      27     45     35     12      108        2
      80x30     720   480      27     45     30      9      108        2
   These were taken from a XFree86 configuration file, recalculated for a 28 MHz
   dotclock (Amigas don't have a 25 MHz dotclock) and converted to frame buffer
   generic timings.
   As a comparison, graphicsmonitor.h suggests the following:
	       xres  yres    left  right  upper  lower    hsync    vsync
	       ----  ----    ----  -----  -----  -----    -----    -----
      VGA       640   480      52    112     24     19    112 -      2 +
      VGA70     640   400      52    112     27     21    112 -      2 -
   Sync polarities
   ---------------
      VSYNC    HSYNC    Vertical size    Vertical total
      -----    -----    -------------    --------------
	+        +           Reserved          Reserved
	+        -                400               414
	-        +                350               362
	-        -                480               496
   Source: CL-GD542X Technical Reference Manual, Cirrus Logic, Oct 1992
   Broadcast video timings
   -----------------------
   According to the CCIR and RETMA specifications, we have the following values:
   CCIR -> PAL
   -----------
      - a scanline is 64 µs long, of which 52.48 µs are visible. This is about
	736 visible 70 ns pixels per line.
      - we have 625 scanlines, of which 575 are visible (interlaced); after
	rounding this becomes 576.
   RETMA -> NTSC
   -------------
      - a scanline is 63.5 µs long, of which 53.5 µs are visible.  This is about
	736 visible 70 ns pixels per line.
      - we have 525 scanlines, of which 485 are visible (interlaced); after
	rounding this becomes 484.
   Thus if you want a PAL compatible display, you have to do the following:
      - set the FB_SYNC_BROADCAST flag to indicate that standard broadcast
	timings are to be used.
      - make sure upper_margin + yres + lower_margin + vsync_len = 625 for an
	interlaced, 312 for a non-interlaced and 156 for a doublescanned
	display.
      - make sure left_margin + xres + right_margin + hsync_len = 1816 for a
	SHRES, 908 for a HIRES and 454 for a LORES display.
      - the left visible part begins at 360 (SHRES; HIRES:180, LORES:90),
	left_margin + 2  hsync_len must be greater or equal.
      - the upper visible part begins at 48 (interlaced; non-interlaced:24,
	doublescanned:12), upper_margin + 2  vsync_len must be greater or
	equal.
      - ami_encode_var() calculates margins with a hsync of 5320 ns and a vsync
	of 4 scanlines
   The settings for a NTSC compatible display are straightforward.
   Note that in a strict sense the PAL and NTSC standards only define the
   encoding of the color part (chrominance) of the video signal and don't say
   anything about horizontalvertical synchronization nor refresh rates.
							    -- Geert --
	
	  Custom Chipset Definitions
	
	  BPLCON0 -- Bitplane Control Register 0
 Bit plane used count 
 HAM mode 
 Double playfield 
 Enable colorburst 
 Genlock audio enable 
 Ultrahi res enable 
 Super hi res mode 
 Bypass LUT - AGA 
 AGA 
 Light pen enable 
 Interlace 
 External resync 
 ECS enable 
	
	  BPLCON2 -- Bitplane Control Register 2
 Bitplane to be used for ZD - AGA 
 Enable ZD with ZDBPSELx - AGA 
 Enable ZD with palette bit #31 - AGA 
 Kill EHB mode - AGA 
 Color table accesses read, not write - AGA 
 SOG output pin high - AGA 
 PF2 priority over PF1 
 PF2 priority wrt sprites 
 ditto PF1 
	
	  BPLCON3 -- Bitplane Control Register 3 (AGA)
 Bits to select color register bank 
 Bits for color table offset when PF2 
 Color register writes go to low bits 
 Sprite resolution bits 
 Border blanked? 
 Border transparent? 
 ZD pin is 14 MHz (HIRES) clock output 
 Sprites in border? 
 BLANK programmable 
	
	  BPLCON4 -- Bitplane Control Register 4 (AGA)
 bitplane color XOR field 
 4 high bits for even sprite colors 
 4 high bits for odd sprite colors 
	
	  BEAMCON0 -- Beam Control Register
 Disable hardware limits 
 Disable light pen latch 
 Enable variable vertical blank 
 Disable longshort line toggle 
 Composite syncblank 
 Enable variable vertical sync 
 Enable variable horizontal sync 
 Enable variable beam counters 
 Enable alternate horizontal beam counter 
 Set decodes for PAL 
 Enable variable composite sync 
 Blank enable (no longer used on AGA) 
 CSY polarity 
 VSY polarity 
 HSY polarity 
	
	  FMODE -- Fetch Mode Control Register (AGA)
 Sprite scan-doubling 
 Use PF2 modulus every other line 
 Sprite page mode 
 Sprite 32 bit fetch 
 Bitplane page mode 
 Bitplane 32 bit fetch 
	
	  Tags used to indicate a specific Pixel Clock
	 
	  clk_shift is the shift value to get the timings in 35 ns units
	
	  Tags used to indicate the specific chipset
	
	  Tags used to indicate the memory bandwidth
	
	  Clock Definitions, Maximum Display Depth
	 
	  These depend on the E-Clock or the Chipset, so they are filled in
	  dynamically
 SHRESHIRESLORES: index = clk_shift 
 SHRESHIRESLORES: index = clk_shift 
	
	  Broadcast Video Timings
	 
	  Horizontal values are in 35 ns (SHRES) units
	  Vertical values are in interlaced scanlines
 PAL Window Limits 
 NTSC Window Limits 
	
	  Various macros
  FIXME: Use C variants of the code marked with #ifdef __mc68000__
  in the driver. It shouldn't negatively affect the performance and
  is required for APUS support (once it is re-added to the kernel).
  Needs to be tested on the hardware though..
 if x1 is not a constant, this macro won't make real sense :-) 
 We know a bit about the numbers, so we can do it this way 
	
	  Chip RAM we reserve for the Frame Buffer
	 
	  This defines the Maximum Virtual Screen Size
	  (Setable per kernel options?)
 AGA (2MB) : max 12801024256  
 AGA (1MB) : max 1024768256   
 ECS (2MB) : max 1280102416   
 ECS (1MB) : max 102476816    
 OCS       : max ca. 80060016 
 max 64644 
	
	  This is the earliest allowed start of fetching display data.
	  Only if you really want no hardware cursor and audio,
	  set this to 128, but let it better at 192
	
	  Copper Instructions
	
	  Hardware Cursor API Definitions
	  These used to be in linuxfb.h, but were preliminary and used by
	  amifb only anyway
 width and height of the cursor in 
 pixels (zero if no cursor)	
 cursor size in display pixels 
 colormap entry for cursor color1 
 colormap entry for cursor color2 
 field with [height][width]        
	
	  Hardware Cursor
 Number of framesflash toggle 
	
	  Current Video Mode
 General Values 
 vmode 
 vmode 
 vmode 
 vmode 
 vmode 
 vmode 
 vmode 
 vmode 
 vmode 
 vmode 
 vmode 
 vmode 
 vmode 
 vmode 
 modulo for next line 
 modulo for next plane 
 Cursor Values 
 movecursor 
 movecursor 
 OCS Hardware Registers 
 vmode, pan (Note: physical address) 
 vmode, pan (Note: physical address) 
 vmode 
 vmode 
 vmode 
 vmode 
 Additional ECS Hardware Registers 
 vmode 
 vmode 
 vmode 
 vmode 
 vmode 
 vmode 
 vmode 
 vmode 
 vmode 
 vmode 
 vmode 
 Additional AGA Hardware Registers 
 vmode 
	
	   Saved color entry 0 so we can restore it when unblanking
	
	  Latches for Display Changes during VBlank
 Change the Video Mode 
 Update the Video Mode 
 (Un)Blank the Screen (±1) 
 Move the Cursor 
	
	  Various Flags
 Screen is Blanked 
 Screen is laced 
	
	  Predefined Video Modes
	 
	
	   AmigaOS Video Modes
	 
	   If you change these, make sure to update DEFMODE_ as well!
 640x200, 15 kHz, 60 Hz (NTSC) 
 640x400, 15 kHz, 60 Hz interlaced (NTSC) 
 640x256, 15 kHz, 50 Hz (PAL) 
 640x512, 15 kHz, 50 Hz interlaced (PAL) 
 640x480, 29 kHz, 57 Hz 
 640x960, 29 kHz, 57 Hz interlaced 
 640x200, 15 kHz, 72 Hz 
 640x400, 15 kHz, 72 Hz interlaced 
 640x400, 29 kHz, 68 Hz 
 640x800, 29 kHz, 68 Hz interlaced 
 800x300, 23 kHz, 70 Hz 
 800x600, 23 kHz, 70 Hz interlaced 
 640x200, 27 kHz, 57 Hz doublescan 
 640x400, 27 kHz, 57 Hz 
 640x800, 27 kHz, 57 Hz interlaced 
 640x256, 27 kHz, 47 Hz doublescan 
 640x512, 27 kHz, 47 Hz 
 640x1024, 27 kHz, 47 Hz interlaced 
	
	   VGA Video Modes
 640x480, 31 kHz, 60 Hz (VGA) 
 640x400, 31 kHz, 70 Hz (VGA) 
	
	   A2024 video modes
	   These modes don't work yet because there's no A2024 driver.
 1024x800, 10 Hz 
 1024x800, 15 Hz 
 for mode probing 
	
	  Some default modes
 "pal" for PAL OCSECS 
 "ntsc" for NTSC OCSECS 
 "pal-lace" for flicker fixed PAL (A3000) 
 "ntsc-lace" for flicker fixed NTSC (A3000) 
 "vga70" for AGA 
 interleaved or normal bitplanes 
 monitor hfreq lower limit (Hz) 
 monitor hfreq upper limit (Hz) 
 monitor vfreq lower limit (Hz) 
 monitor vfreq upper limit (Hz) 
	
	  Macros for the conversion from real world values to hardware register
	  values
	 
	  This helps us to keep our attention on the real stuff...
	 
	  Hardware limits for AGA:
	 
	 	parameter  min    max  step
	 	---------  ---   ----  ----
	 	diwstrt_h    0   2047     1
	 	diwstrt_v    0   2047     1
	 	diwstop_h    0   4095     1
	 	diwstop_v    0   4095     1
	 
	 	ddfstrt      0   2032    16
	 	ddfstop      0   2032    16
	 
	 	htotal       8   2048     8
	 	hsstrt       0   2040     8
	 	hsstop       0   2040     8
	 	vtotal       1   4096     1
	 	vsstrt       0   4095     1
	 	vsstop       0   4095     1
	 	hcenter      0   2040     8
	 
	 	hbstrt       0   2047     1
	 	hbstop       0   2047     1
	 	vbstrt       0   4095     1
	 	vbstop       0   4095     1
	 
	  Horizontal values are in 35 ns (SHRES) pixels
	  Vertical values are in half scanlines
 bplcon1 (smooth scrolling) 
 diwstrtdiwstopdiwhigh (visible display window) 
 ddfstrtddfstop (display DMA) 
 hsstrthsstophtotalvsstrtvsstopvtotalhcenter (sync timings) 
 hbstrthbstopvbstrtvbstop (blanking timings) 
 colour 
 sprpossprctl (sprite positioning) 
 get current vertical position of beam 
	
	  Copper Initialisation List
	
	  Long FrameShort Frame Copper List
	  Don't change the order, build_copper()rebuild_copper() rely on this
	
	  Pixel modes for Bitplanes and Sprites
  35 ns 
  70 ns 
 140 ns 
  35 ns 
  70 ns 
 140 ns 
	
	  Fetch modes for Bitplanes and Sprites
 1x 
 2x 
 4x 
 1x 
 2x 
 4x 
 --------------------------- Hardware routines --------------------------- 
	
	  Get the video params out of `var'. If a value doesn't fit, round
	  it up, if it's too big, return -EINVAL.
	
	  Find a matching Pixel Clock
	
	  Check the Geometry Values
	
	  FB_VMODE_SMOOTH_XPAN will be cleared, if one of the following
	  checks failed and smooth scrolling is not possible
	
	  Vertical and Horizontal Timings
 Initialize sync with some reasonable values for pwrsave 
 PAL video mode 
			 NTSC video mode
			  In the AGA chipset seems to be hardware bug with BPC3_BRDRBLNK
			  and NTSC activated, so than better let diwstop_h <= 1812
 Programmable video mode 
	
	  Checking the DMA timing
	
	  smallest window start value without turn off other dma cycles
	  than sprite1-7, unless you change min_fstrt
	
	  smallest window start value where smooth scrolling is possible
	
	  Check if there is enough time to update the bitplane pointers for ywrap
	
	  Bitplane calculations and check the Memory Requirements
	
	  Hardware Register Values
	
	  Fill the `var' structure based on the values in `par' and maybe
	  other values read out of the hardware.
	
	  Update hardware
	
	  Pan or Wrap the Display
	 
	  This call looks only at xoffset, yoffset and the FB_VMODE_YWRAP flag
	  in `var'.
	
	  Change the video mode (called by VBlank interrupt)
	
	  The minimum period for audio depends on htotal
	
	  (Un)Blank the screen (called by VBlank interrupt)
 FIXME: check the return value + test the change 
 FIXME: check the return value + test the change 
	
	  Initialise the Copper Initialisation List
	
	  Rebuild the Copper List
	 
	  We only change the things that are not static
	
	  Build the Copper List
	 Format for monitor capabilities is: <Vmin>;<Vmax>;<Hmin>;<Hmax>
	  <V> vertical freq. in Hz
	  <H> horizontal freq. in kHz
 Validate wanted screen parameters 
 Encode (possibly rounded) screen parameters 
 Decode wanted screen parameters 
 Set new videomode 
 Set VBlank trigger 
 Update fix for new screen parameters 
 override SCROLL_REDRAW 
	
	  Set a single color register. The values supplied are already
	  rounded down to the hardware's capabilities (according to the
	  entries in the var structure). Return != 0 for invalid regno.
	
	  Update the corresponding Hardware Color Register, unless it's Color
	  Register 0 and the screen is blanked.
	 
	  VBlank is switched off to protect bplcon3 or ecs_palette[] from
	  being changed by ami_do_blank() during the VBlank.
	
	  Blank the display.
	
	  Pan or Wrap the Display
	 
	  This call looks only at xoffset, yoffset and the FB_VMODE_YWRAP flag
		
		  TODO: There will be problems when xpan!=1, so some columns
		  on the right side will never be seen
	
	   Compose two values, using a bitmask as decision value
	   This is equivalent to (a & mask) | (b & ~mask)
	
	   Unaligned forward bit copy using 32-bit or 64-bit memory accesses
 Same alignment for source and dest
 Single word
 Multiple destination words
 Leading bits
 Main chunk
 Trailing bits
 Different alignment for source and dest
 Single destination word
 Single source word
 Single source word
 2 source words
 Multiple destination words
 Leading bits
 Single source word
 2 source words
 Main chunk
 Trailing bits
 Single source word
 2 source words
	
	   Unaligned reverse bit copy using 32-bit or 64-bit memory accesses
 Same alignment for source and dest
 Single word
 Multiple destination words
 Leading bits
 Main chunk
 Trailing bits
 Different alignment for source and dest
 Single destination word
 Single source word
 Single source word
 2 source words
 Multiple destination words
 Leading bits
 Single source word
 2 source words
 Main chunk
 Trailing bits
 Single source word
 2 source words
	
	   Unaligned forward inverting bit copy using 32-bit or 64-bit memory
	   accesses
 Same alignment for source and dest
 Single word
 Multiple destination words
 Leading bits
 Main chunk
 Trailing bits
 Different alignment for source and dest
 Single destination word
 Single source word
 Single source word
 2 source words
 Multiple destination words
 Leading bits
 Single source word
 2 source words
 Main chunk
 Trailing bits
 Single source word
 2 source words
	
	   Unaligned 32-bit pattern fill using 3264-bit memory accesses
 Single word
 Multiple destination words
 Leading bits
 Main chunk
 Trailing bits
	
	   Unaligned 32-bit pattern xor using 3264-bit memory accesses
 Single word
 Multiple destination words
 Leading bits
 Main chunk
 Trailing bits
	
	  We could use hardware clipping but on many cards you get around
	  hardware clipping by writing to framebuffer directly.
 clip the destination 
 update sx,sy 
 the source must be completely inside the virtual screen 
 set or clear 
	
	  We could use hardware clipping but on many cards you get around
	  hardware clipping by writing to framebuffer directly like we are
	  doing here.
	
	  Amiga Frame Buffer Specific ioctls
	
	  Flash the cursor (called by VBlank interrupt)
	
	  VBlank Display Interrupt
	
	  Allocate, Clear and Align a Block of Chip Memory
	
	  Initialisation
 OCS means no SHRES 
 CONFIG_FB_AMIGA_OCS 
 CONFIG_FB_AMIGA_ECS 
 CONFIG_FB_AMIGA_AGA 
 CONFIG_FB_AMIGA_OCS 
 CONFIG_FB_AMIGA_OCS 
	
	  Calculate the Pixel Clock Values for this Machine
 SHRES:  35 ns  28 MHz 
 HIRES:  70 ns  14 MHz 
 LORES: 140 ns   7 MHz 
	
	  Replace the Tag Values with the Real Pixel Clock Values
		
		   These are for a typical Amiga monitor (e.g. A1960)
	
	  access the videomem with writethrough cache
	
	  Make sure the Copper has something to do
	
	  Enable Display DMA
  linuxdriversvideostifb.c - 
  Low level Frame buffer driver for HP workstations with 
  STI (standard text interface) video firmware.
  Copyright (C) 2001-2006 Helge Deller <deller@gmx.de>
  Portions Copyright (C) 2001 Thomas Bogendoerfer <tsbogend@alpha.franken.de>
  Based on:
  - linuxdriversvideoartistfb.c -- Artist frame buffer driver
 	Copyright (C) 2000 Philipp Rumpf <prumpf@tux.org>
    - based on skeletonfb, which was
 	Created 28 Dec 1997 by Geert Uytterhoeven
  - HP Xhp cfb-based X11 window driver for XFree86
 	(c)Copyright 1992 Hewlett-Packard Co.
   The following graphics display devices (NGLE family) are supported by this driver:
   HPA4070A	known as "HCRX", a 1280x1024 color device with 8 planes
   HPA4071A	known as "HCRX24", a 1280x1024 color device with 24 planes,
 		optionally available with a hardware accelerator as HPA4071A_Z
   HPA1659A	known as "CRX", a 1280x1024 color device with 8 planes
   HPA1439A	known as "CRX24", a 1280x1024 color device with 24 planes,
 		optionally available with a hardware accelerator.
   HPA1924A	known as "GRX", a 1280x1024 grayscale device with 8 planes
   HPA2269A	known as "Dual CRX", a 1280x1024 color device with 8 planes,
 		implements support for two displays on a single graphics card.
   HP710C	internal graphics support optionally available on the HP9000s710 SPU,
 		supports 1280x1024 color displays with 8 planes.
   HP710G	same as HP710C, 1280x1024 grayscale only
   HP710L	same as HP710C, 1024x768 color only
   HP712	internal graphics support on HP9000s712 SPU, supports 640x480, 
 		1024x768 or 1280x1024 color displays on 8 planes (Artist)
  This file is subject to the terms and conditions of the GNU General Public
  License.  See the file COPYING in the main directory of this archive
  for more details.
 TODO:
 	- 1bpp mode is completely untested
 	- add support for hw acceleration
 	- add hardware cursor
 	- automatically disable double buffering (e.g. on RDI precisionbook laptop)
 on supported graphic devices you may:
  #define FALLBACK_TO_1BPP to fall back to 1 bpp, or
 debug sti register accesses 
 for HP-UX compatibility 
 REGION_BASE(fb_info, index) returns the virtual address for region <index> 
 visible screen dim in pixels  
 ------------------- chipset specific functions -------------------------- 
 offsets to graphic-chip internal registers 
 DEBUG_STIFB_REGS 
 for enablingdisabling screen 	
 Pixel data is indexed (pseudo) color 
 Pixels in each longword transfer (4) 
 Pixels in each longword transfer (32) 
 Each pixel is size (8)d transfer (1) 
 Each bit goes through FGBG color(8) 
 FB address is Long aligned (pixel) 
 8 bit overlay 
 Application Buffer 0, Indexed 
 Application Buffer 1, Indexed 
 Application Buffer 0, Fractional 8-8-8 
 Attribute Bitmap 
 Each write hits ( 8) bits in depth 
 Each write hits (32) bits in depth 
 Data register reloaded by direct access 
 Mask register reloaded by direct access 
 Mask contains Object Count valid bits 
 BufferNumbers used by SETUP_ATTR_ACCESS() 
	 REG_6 seems to have special values when run on a 
	   RDI precisionbook parisc laptop (INTERNAL_EG_DX1024 or
	   INTERNAL_EG_X1024).  The values are:
		0x2f0: internal (LCD) & external display enabled
		0x2a0: external display only
		0x000: zero on standard artist graphic cards
 	 Write RAMDAC pixel read mask register so all overlay
	  planes are display-enabled.  (CRX24 uses Bt462 pixel
	  read mask register for overlay planes, not image planes).
 change fb->id temporarily to fool SETUP_FB() 
 typedef of LUT (Colormap) BLT Control Register 
 Note assumption that fields are packed left-to-right 
 Within destination LUT 
 Cursor, image, overlay 
 set enable, zero reserved fields 
 CRX24 
 Offset points to start of LUT.  Adjust for within LUT 
 set enable, zero reserved fields 
 Expect lutIndex to be 0 or 1 for image cmaps, 2 or 3 for overlay cmaps 
 Offset points to start of LUT.  Adjust for within LUT 
 Write overlay transparency mask so only entry 255 is transparent 
 Hardware setup for full-depth write to "magic" location 
 Now prepare to write to the "magic" location 
 Finally, write a zero to clear the mask 
 FIXME! 
 FIXME! 
	
	  In order to work around an ELK hardware problem (Buffy doesn't
	  always flush it's buffers when writing to the attribute
	  planes), at least 4 pixels must be written to the attribute
	  planes starting at (X == 1280) and (Y != to the last Y written
	  by BIF):
 ELK_DEVICE_ID 
 It's safe to use scanline zero: 
 ELK Hardware Kludge 
 Finally, set the Control Plane Register back to zero: 
 Hardware setup 
 Write foreground color 
 Write zeroes to overlay planes 		       
 0x00000800 should be enough, but lets clear all 4 bits 
 0x00000100 should be enough, but lets clear all 4 bits 
 clear screen 
		 Paint attribute planes for default case.
 clear overlay planes 
		
		  Also need to counteract ITE settings 
 clear screen 
 RESET 
 Return pointer to in-memory structure holding ELK device-dependent ROM values. 
 data byte == LSB 
 Get pointer to unpacked bytelong data in ROM 
 Tomcat supports several resolutions: 1280x1024, 1024x768, 640x480 
  jump to the correct ROM table  
 Pack every fourth byte from ROM into structure 
 Pack every fourth byte from ROM into structure 
 HCRX specific boot-time initialization 
 Initialize Hyperbowl registers 
 First write to Hyperbowl must happen twice (bug) 
 Set lut 0 to be the direct color 
 First write to Hyperbowl must happen twice (bug) 
 ------------------- driver specific functions --------------------------- 
 gray = 0.30R + 0.59G + 0.11B 
 Offset wi LUT 
 Load entire LUT 
 0x100 is same as used in WRITE_IMAGE_COLOR() 
 cleanup colormap hardware 
 HCRX specific initialization 
	
	if (id == S9000_ID_HCRX)
		hyperInitSprite(fb);
	else
		ngleInitSprite(fb);
 Initialize the image planes.  
 Clear attribute planes on non HCRX devices. 
 0=enable screen 
 ------------ Interfaces to hardware functions ------------ 
   Initialization
 set struct to a known state 
 store upper 32bits of the graphics id 
 only supported cards are allowed 
		 Visualize cards can run either in "double buffer" or
 		  "standard" mode. Depending on the mode, the card reports
		  a different device name, e.g. "INTERNAL_EG_DX1024" in double
		  buffer mode and "INTERNAL_EG_X1024" in standard mode.
		  Since this driver only supports standard mode, we check
		  if the device name contains the string "DX" and tell the
 default to 8 bpp on most graphic chips 
 get (virtual) io region base addr 
 Reject any device not in the NGLE family 
 CRXA1659A 
 GRX, grayscale but else same as A1659A 
 HP9000710 Any (may be a grayscale device) 
 Dual CRX, behaves else like a CRX 
		 FIXME: TomCat supports two heads:
		  fb.iobase = REGION_BASE(fb_info,3);
		  fb.screen_base = ioremap(REGION_BASE(fb_info,2),xxx);
 CRX24A1439A 
 HyperdriveHCRX 
 Artist 
 default to 1 bpp 
 get framebuffer physical and virtual base addr & len (64bit ready) 
 default 
 limit fbsize to max visible screen size 
 well, sort of 
 This has to be done !!! 
 save for unregister_framebuffer() 
   Cleanup
 SPDX-License-Identifier: GPL-2.0-only
 cg14.c: CGFOURTEEN frame buffer driver
  Copyright (C) 2003, 2006 David S. Miller (davem@davemloft.net)
  Copyright (C) 1996,1998 Jakub Jelinek (jj@ultra.linux.cz)
  Copyright (C) 1995 Miguel de Icaza (miguel@nuclecu.unam.mx)
  Driver layout based loosely on tgafb.c, see that file for credits.
  Local functions.
   Frame buffer operations
 Master Control Reg 
 Packed Pixel Reg 
 Test Mode Status Regs 
 Master Status Reg 
 Fault Status Reg 
 Revision & Impl 
 Clock Control Reg 
 Test Mode Read Back 
 Monitor Operation Data Reg 
 Aux Control 
 Hor Counter 
 Vert Counter 
 Hor Blank Start 
 Hor Blank Clear 
 Hor Sync Start 
 Hor Sync Clear 
 Composite Sync Clear 
 Vert Blank Start 
 Vert Blank Clear 
 Vert Sync Start 
 Vert Sync Clear 
 Fault Status Address 
 Address Registers 
 Pixel Clock Generator 
 Frame Base Row 
 VBC Master Control 
 VBC refresh 
 VBC Config 
 HWFull screen 
 Enable plane 0 
 Color selection plane 
 Cursor Control Reg 
 Cursor x,y position 
 Cursor x,y position 
 Enable plane 0 autoinc 
 Color selection autoinc 
 Address Register 
 Gamma table 
 Register Select 
 Mode Register 
 Color look up table (clut) 
 Each one of these arrays hold the color lookup table (for 256
  colors) for each MDI page (I assume then there should be 4 MDI
  pages, I still wonder what they are.  I have seen NeXTStep split
  the screen in four parts, while operating in 24 bits mode.  Each
  integer holds 4 values: alpha value (transparency channel, thanks
  go to John Stone (johns@umr.edu) from OpenBSD), red, green and blue
  I currently use the clut instead of the Xlut
 i wonder what the 'd' is for 
	 We just use this to catch switches out of
	  graphics mode.
       cg14_setcolreg - Optional function. Sets a color register.
       @regno: boolean, 0 copy local, 1 get_user() function
       @red: frame buffer colormap structure
       @green: The green value which can be up to 16 bits wide
       @blue:  The blue value which can be up to 16 bits wide.
       @transp: If supported the alpha value which can be up to 16 bits wide.
       @info: frame buffer info structure
 FIXME 
   Initialisation
   linuxdriversvideoarkfb.c -- Frame buffer device driver for ARK 2000PV
   with ICS 5342 dac (it is easy to add support for different dacs).
   Copyright (c) 2007 Ondrej Zajicek <santiago@crfreenet.org>
   This file is subject to the terms and conditions of the GNU General Public
   License.  See the file COPYING in the main directory of this archive for
   more details.
   Code is based on s3fb
 Why should fb driver call console functions? because console_lock() 
 ------------------------------------------------------------------------- 
 CRT timing register sets 
 const struct vga_regset ark_v_blank_end_regs[]    = {{0x16, 0, 6}, VGA_REGSET_END};
 ------------------------------------------------------------------------- 
 Module parameters 
 ------------------------------------------------------------------------- 
 ------------------------------------------------------------------------- 
 image data is MSB-first, fb structure is MSB-first too 
 arkfb_iplan_imageblit silently assumes that almost everything is 8-pixel aligned 
 arkfb_iplan_fillrect silently assumes that almost everything is 8-pixel aligned 
 image data is MSB-first, fb structure is high-nibble-in-low-byte-first 
 arkfb_cfb4_imageblit silently assumes that almost everything is 8-pixel aligned 
 ------------------------------------------------------------------------- 
 ------------------------------------------------------------------------- 
 ICS5342 DAC 
 LSB is set to distinguish unused slots 
 pd4 - allow only posdivider 4 (r=2) 
 270 MHz should be upper bound for VCO clock according to specs,
 only postdivider 4 (r=2) is valid in mode DAC_PSEUDO8_16 
 estimation 
 ------------------------------------------------------------------------- 
 Set VGA misc register  
 Open framebuffer 
 Close framebuffer 
 Validate passed in var 
 Find appropriate format 
 Do not allow to have real resoulution larger than virtual 
 Round up xres_virtual to have proper alignment of lines 
 Check whether have enough memory 
 Interlaced mode is broken 
 Set video mode from par 
 in 4bpp supports 8p wide tiles only, any tiles otherwise 
 supports 8x16 tiles only 
 Unlock registers 
 Blank screen and turn off sync 
 Set default values 
 ARK specific initialization 
 enable linear framebuffer and full memory access 
 4 MB linear framebuffer size 
 Set the FIFO threshold register 
 It is fascinating way to store 5-bit value in 8-bit register 
 Set the offset register 
 fix for hi-res textmode 
 Set mode-specific register values 
 basic VGA mode 
 8bit pixel path 
 basic VGA mode 
 8bit pixel path 
 basic VGA mode 
 8bit pixel path 
 8bpp accel mode 
 8bit pixel path 
 16bit pixel path 
 16bpp accel mode 
 16bit pixel path 
 16bpp accel mode 
 16bit pixel path 
 8bpp accel mode ??? 
 16bit pixel path 
 32bpp accel mode 
 16bit pixel path 
 Set interlaced mode startend register 
 Device and screen back on 
 Set a colour register 
 Set the display blanking state 
 Pan the display 
 Calculate the offset 
 Set the offset 
 ------------------------------------------------------------------------- 
 Frame buffer operations 
 ------------------------------------------------------------------------- 
 PCI probe 
 Ignore secondary VGA device because there is no VGA arbitration 
 Allocate and fill driver data structure 
 Prepare PCI device 
 Map physical IO memory address into kernel space 
 FIXME get memsize 
 Prepare startup mode 
 Record a reference to the driver data 
 Error handling 
	pci_disable_device(dev); 
 PCI remove 
		pci_disable_device(dev); 
 PCI suspend 
 PCI resume 
 List of boards that we are trying to support 
 Cleanup 
 Driver Initialisation 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2012, Microsoft Corporation.
  Author:
    Haiyang Zhang <haiyangz@microsoft.com>
  Hyper-V Synthetic Video Frame Buffer Driver
  This is the driver for the Hyper-V Synthetic Video, which supports
  screen resolution up to Full HD 1920x1080 with 32 bit color on Windows
  Server 2012, and 1600x1200 with 16 bit color on Windows Server 2008 R2
  or earlier.
  It also solves the double mouse cursor issue of the emulated video mode.
  The default screen resolution is 1152x864, which may be changed by a
  kernel parameter:
      video=hyperv_fb:<width>x<height>
      For example: video=hyperv_fb:1280x1024
  Portrait orientation is also supported:
      For example: video=hyperv_fb:864x1152
  When a Windows 10 RS5+ host is used, the virtual machine screen
  resolution is obtained from the host. The "video=hyperv_fb" option is
  not needed, but still can be used to overwrite what the host specifies.
  The VM resolution on the host could be set by executing the powershell
  "set-vmvideo" command. For example
      set-vmvideo -vmname name -horizontalresolution:1920 \
  -verticalresolution:1200 -resolutiontype single
  Gen 1 VMs also support direct using VM's physical memory for framebuffer.
  It could improve the efficiency and performance for framebuffer and VM.
  This requires to allocate contiguous physical memory from Linux kernel's
  CMA memory allocator. To enable this, supply a kernel parameter to give
  enough memory space to CMA allocator for framebuffer. For example:
     cma=130m
  This gives 130MB memory to CMA allocator that can be allocated to
  framebuffer. For reference, 8K resolution (7680x4320) takes about
  127MB memory.
 Hyper-V Synthetic Video Protocol definitions and structures 
 size of message after this field 
 size of this header + payload after this field
 CURSOR_MAX_X at most 
 CURSOR_MAX_Y at most 
 hotspot relative to upper-left of pointer image 
 top left corner 
 bottom right corner, exclusive 
 FB driver definitions and structures 
 default screen width 
 default screen height 
 fb device is ready 
 The value of 'update' before hibernation 
 If true, the VSC notifies the VSP on every framebuffer change 
 If true, need to copy from deferred IO mem to framebuffer mem 
 Memory for deferred IO and frame buffer itself 
 Dirty rectangle, protected by delayed_refresh_lock 
 FB size for deferred IO 
 Send message to Hyper-V host 
 Send screen resolution info to host 
 Send mouse pointer info to host 
 Send updated screen area (dirty rectangle) location to host 
 Deferred IO callback 
	
	  Merge dirty pages. It is possible that last page cross
	  over the end of frame buffer row yres. This is taken care of
	  in synthvid_update function by clamping the y2
	  value to yres.
 Copy from dio space to mmio address 
  Actions on received messages from host:
  Complete the wait event.
  Or, reply with screen and cursor info.
 Complete the wait event 
 Reply with screen and cursor info 
 Receive callback for messages from the host 
 Check if the ver1 version is equal or greater than ver2 
 Check synthetic video protocol version with the host 
 Get current resolution from the host 
 Connect to VSP (Virtual Service Provider) on host 
 Negotiate the protocol version with host 
 Send VRAM and Situation messages to the host 
 Send VRAM location 
 Send pointer and situation update 
  Delayed work callback:
  It is scheduled to call whenever update request is received and it has
  not been called in last HVFB_ONDEMAND_THROTTLE time interval.
 Reset the request flag 
 Store the dirty rectangle to local variables 
 Clear dirty rectangle 
 Copy the dirty rectangle to frame buffer memory 
 Refresh 
  Control the on-demand refresh frequency. It schedules a delayed
  screen update if it has not yet.
 Merge dirty rectangle 
 Schedule a delayed screen update if not yet 
 Framebuffer operation handlers 
 get fb_blank to set the colormap to all black 
 Get options from kernel paramenter "video=" 
  Allocate enough contiguous physical memory.
  Return physical address if succeeded or -1 if failed.
 Call alloc_pages if the size is less than 2^MAX_ORDER 
 Allocate from CMA 
 Release contiguous physical memory 
 Get framebuffer memory from Hyper-V video pci space 
		
		  For Gen 1 VM, we can directly use the contiguous memory
		  from VM. If we succeed, deferred IO happens directly
		  on this allocated framebuffer memory, avoiding extra
		  memory copy.
	
	  Cannot use the contiguous physical memory.
	  Allocate mmio space for framebuffer.
	
	  Map the VRAM cacheable for performance. This is also required for
	  VM Connect to display properly for ARM64 Linux VM, as the host also
	  maps the VRAM cacheable.
 Allocate memory for deferred IO 
 Physical address of FB device 
 Virtual address of FB device 
 framebuffer is reallocated, clear screen_info to avoid misuse from kexec 
 Release the framebuffer 
 Connect to VSP 
 Set up fb_info 
 Initialize deferred IO 
 Send config to host 
 1 means do suspend 
 0 means do resume 
 end of list  }
 Synthetic Video Device GUID 
 	linuxdriversvideopmag-ba-fb.c
 	PMAG-BA TURBOchannel Color Frame Buffer (CFB) card support,
 	derived from:
 	"HP300 Topcat framebuffer support (derived from macfb of all things)
 	Phil Blundell <philb@gnu.org> 1998", the original code can be
 	found in the file hpfb.c in the same directory.
 	Based on digital document:
  	"PMAG-BA TURBOchannel Color Frame Buffer
 	 Functional Specification", Revision 1.2, August 27, 1990
 	DECstation related code Copyright (C) 1999, 2000, 2001 by
 	Michael Engel <engel@unix-ag.org>,
 	Karsten Merker <merker@linuxtag.org> and
 	Harald Koerfgen.
 	Copyright (c) 2005, 2006  Maciej W. Rozycki
 	Copyright (c) 2005  James Simmons
 	This file is subject to the terms and conditions of the GNU General
 	Public License.  See the file COPYING in the main directory of this
 	archive for more details.
  Set the palette.
 The cmap fields are 16 bits    
 wide, but the hardware colormap 
 registers are only 8 bits wide 
  Turn the hardware cursor off.
 Request the IO MEM resource.  
 MMIO mapping setup.  
 Frame buffer mapping setup.  
  Initialize the framebuffer.
 SPDX-License-Identifier: GPL-2.0-only
  linuxdriversvideosstfb.c -- voodoo graphics frame buffer
      Copyright (c) 2000-2002 Ghozlane Toumi <gtoumi@laposte.net>
      Created 15 Jan 2000 by Ghozlane Toumi
  Contributions (and many thanks) :
  032001 James Simmons   <jsimmons@infradead.org>
  042001 Paul Mundt      <lethal@chaoticdreams.org>
  052001 Urs Ganse       <ursg@uni.de>
 	(initial work on voodoo2 port, interlace)
  092002 Helge Deller    <deller@gmx.de>
 	(enable driver on big-endian machines (hppa), ioctl fixes)
  122002 Helge Deller    <deller@gmx.de>
 	(port driver to new frambuffer infrastructure)
  012003 Helge Deller    <deller@gmx.de>
 	(initial work on fb hardware acceleration for voodoo2)
  082006 Alan Cox 	   <alan@redhat.com>
 	Remove never finished and bogus 2432bit support
 	Clean up macro abuse
 	Minor tidying for format.
  122006 Helge Deller    <deller@gmx.de>
 	add sysclassgraphicsfbXvgapass sysfs-interface
 	add module option "mode_option" to set initial screen mode
 	use fbdev default videomode database
 	remove debug functions from ioctl
  The voodoo1 has the following memory mapped address space:
  0x000000 - 0x3fffff : registers              (4MB)
  0x400000 - 0x7fffff : linear frame buffer    (4MB)
  0x800000 - 0xffffff : texture memory         (8MB)
  misc notes, TODOs, toASKs, and deep thoughts
-TODO: at one time or another test that the mode is acceptable by the monitor
-ASK: Can I choose different ordering for the color bitfields (rgba argb ...)
      which one should i use ? is there any preferred one ? It seems ARGB is
      the one ...
-TODO: in  set_var check the validity of timings (hsync vsync)...
-TODO: check and recheck the use of sst_wait_idle : we don't flush the fifo via
       a nop command. so it's ok as long as the commands we pass don't go
       through the fifo. warning: issuing a nop command seems to need pci_fifo
-FIXME: in case of failure in the init sequence, be sure we return to a safe
        state.
- FIXME: Use accelerator for 2D scroll
-FIXME: 4MB boards have banked memory (FbiInit2 bits 1 & 20)
  debug info
  SST_DEBUG : enable debugging
  SST_DEBUG_REG : debug registers
    0 :  no debug
    1 : dac calls, [un]set_bits, FbiInit
    2 : insane debug level (log every register readwrite)
  SST_DEBUG_FUNC : functions
    0 : no debug
    1 : function call  debug ioctl
    2 : variables
    3 : flood . you don't want to do that. trust me.
  SST_DEBUG_VAR : debug displayvar structs
    0 : no debug
    1 : dumps display, fb_var
  sstfb specific ioctls:
    		toggle vga (0x46db) : toggle vga_pass_through
  Includes
 initialized by setup 
 enable VGA passthrough cable 
 mem size in MB, 0 = autodetect 
 use clipping (slower, safer) 
 force FBI freq in Mhz . Dangerous 
 slow PCI settings 
  Possible default video modes: 800x600@60, 640x480@75, 1024x768@76, 640x480@60
  debug functions
  (SST_DEBUG_REG > 0) 
  (SST_DEBUG_REG > 0) 
  hardware access functions
 register access 
  wait for the fbi chip. ASK: what happens if the fbi is stuck ?
  the FBI is supposed to be ready if we receive 5 time
  in a row a "idle" answer to our requests
 if (doFBINOP) __sst_write(vbase, NOPCMD, 0); 
 FIXME basically, this is a busy wait. maybe not that good. oh well;
  this is a small loop after all.
 XXX  do something to avoid hanging the machine if the voodoo is out 
 dac access 
 dac_read should be remaped to FbiInit2 (via the pci reg init_enable) 
 udelay(10); 
 indexed access to tiatt dacs 
 compute the m,n,p  , returns the real freq
  (ics datasheet :  N <-> N1 , P <-> N2)
  Fout= Fref  (M+2)( 2^P  (N+2))
   we try to get close to the asked freq
   with P as high, and M as low as possible
  range:
  tiatt : 0 <= M <= 255; 0 <= P <= 3; 0<= N <= 63
  ics    : 1 <= M <= 127; 0 <= P <= 3; 1<= N <= 31
  we'll use the lowest limitation, should be precise enouth
 f  2^P = vco should be less than VCOmax ~ 250 MHz for ics
 calc 2  m so we can round it later
 we get the lowest m , allowing 0.5% error in freq
 unlikely, but who knows ? 
  clear lfb screen
 clear screen 
       sstfb_check_var - Optional function.  Validates a var passed in.
       @var: frame buffer variable screen structure
       @info: frame buffer structure that represents a single frame buffer
 	Limit to the abilities of a single chip as SLI is not supported
 	by this driver.
 validity tests 
 Voodoo 2 limits 
 Voodoo limits 
 it seems that the fbi uses tiles of 64x16 pixels to "map" the mem 
 FIXME: i don't like this... looks wrong 
	
	  correct the color bit fields
 var->{red|green|blue}.msb_right = 0; 
 RGB 565  LfbMode 0 
       sstfb_set_par - Optional function.  Alters the hardware state.
       @info: frame buffer structure that represents a single frame buffer
 We need par->pll 
		 voodoo2 has 32 pixel wide tiles , BUT strange things
 voodoo1 has 64 pixels wide tiles. 
sst_unset_bits (FBIINIT0, FBI_RESET);  reenable FBI ? 
 everything is reset. we enable fbiinit23 remap : dac access ok 
 set video clock 
 disable fbiinit23 remap 
 restore fbiinit23 
 | (15 << TILES_IN_X_SHIFT) 
		  | (2 << VCLK_2X_SEL_DEL_SHIFT)
 try with vclk_in_delay =0 (bits 29:30) , vclk_out_delay =0 (bits(27:28)
 in (near) future set them accordingly to revision + resolution (cf glide)
 first understand what it stands for :)
 FIXME: there are some artefacts... check for the vclk_in_delay
 lets try with 6ns delay in both vclk_out & in...
 doh... they're still there :\
 as the only value of importance for us in fbiinit6 is tiles in X (lsb),
   and as reading fbinit 6 will return crap (see FBIINIT6_DEFAULT) we just
   write our value. BTW due to the dac unable to read odd number of tiles, this
 disables fbiinit writes 
	 set lfbmode : set mode + front buffer for readswrites
	 Enable byte-swizzle functionality in hardware.
	  With this enabled, all our read- and write-accesses to
	  the voodoo framebuffer can be done in native format, and
	  the hardware will automatically convert it to little-endian.
	
	  Set "clipping" dimensions. If clipping is disabled and
	  writes to offscreen areas of the framebuffer are performed,
	  the "behaviour is undefined" (_very_ undefined) - Urs
	 btw, it requires enabling pixel pipeline in LFBMODE .
	   off screen readwrites will just wrap and readprint pixels
 no clipping : direct access, no pipeline 
       sstfb_setcolreg - Optional function. Sets a color register.
       @regno: hardware colormap register
       @red: frame buffer colormap structure
       @green: The green value which can be up to 16 bits wide
       @blue:  The blue value which can be up to 16 bits wide.
       @transp: If supported the alpha value which can be up to 16 bits wide.
       @info: frame buffer info structure
 setget VGA pass_through mode 
  Screen-to-Screen BitBlt 2D command (for the bmove fb op.) - Voodoo2 only
 | BIT(14)  | BIT(15) );
  FillRect 2D command (solidfill or invert (via ROP_XOR)) - Voodoo2 only
 | BIT(14)  | BIT(15) | BIT(16) );
  get lfb size 
 force memsize 
 checks for 4mb lfb, then 2, then defaults to 1 
  DAC detection routines 
 fbi should be idle, and fifo emty and mem disabled 
 supposed to detect AT&T ATT20C409 and Ti TVP3409 ramdacs 
 backdoor 
 read 4 times RMR 
 the fifth time,  CR0 is read 
 the 6th, manufacturer id register 
the 7th, device ID register 
 backdoor 
 read 4 times RMR 
 the fifth time,  CR0 is read 
 the 6th, manufacturer id register 
the 7th, device ID register 
  try to detect ICS5342  ramdac
  we get the 1st byte (M value) of preset f1,f7 and fB
  why those 3 ? mmmh... for now, i'll do it the glide way...
  and ask questions later. anyway, it seems that all the freq registers are
  really at their default state (cf specs) so i ask again, why those 3 regs ?
  mmmmh.. it seems that's much more ugly than i thought. we use f0 and fA for
  pll programming, so in fact, we hope that the f1, f7 & fB won't be
  touched...
  is it really safe ? how can i reset this ramdac ? geee...
 f1 
 f7 
 fB 
  gfx, video, pci fifo should be reset, dram refresh disabled
  see detect_dac
 enable indexed mode 
 backdoor 
 1 time:  RMR 
 2 RMR 
 5 CR0 
	 so, now we are in indexed mode . dunno if its common, but
 power up the dac & return to "normal" non-indexed mode 
 CLK0, f0 
 selects freq f0 for clock 0 
 CLK1, fA 
 selects freq fA for clock 1 
 backdoor 
 read 4 times RMR 
 the fifth time,  CR0 is read 
 backdoor 
 read 4 times RMR 
 cr0 
  detect dac type
  prerequisite : write to FbiInitx enabled, video and fbi and pci fifo reset,
  dram refresh disabled, FbiInit remaped.
  TODO: mmh.. maybe i should put the "prerequisite" in the func ...
  Internal Routines
 disable video clock 
 enable writing to init registers, disable pci fifo 
 reset video 
 reset gfx + pci fifo 
 unreset fifo 
	sst_unset_bits(FBIINIT0, FIFO_RESET);
 unreset FBI 
	sst_unset_bits(FBIINIT0, FBI_RESET);
 disable dram refresh 
 remap fbinit23 to dac 
 detect dac type 
FIXME watch it: we are not in a safe state, bad bad bad.
 set graphic clock 
 disable fbiinit remap 
 defaults init registers 
 FbiInit0: unreset gfx, unreset fifo 
 reset video, gfx, fifo, disable dram + remap fbiinit23 
 set 20Mhz gfx clock 
 TODO maybe shutdown the dac, vrefresh and so on... 
	 maybe keep fbiinit and PCI_INIT_enable in the fb_info struct
  Interface to the world
 sstfb_fillrect 
 sstfb_copyarea 
 Enable device in PCI config. 
 Allocate the fb and par structures.  
 FIXME 
	
	  According to the specs, the linelength must be of 1024 pixels
	  and the 24bpp mode is in fact a 32 bpp mode (and both are in
	  fact dithered to 16bit).
 default value, for 24 or 32bit: 4096 
 register fb 
 no voodoo detected 
       linuxdriversvideomaxinefb.c
 	DECstation 5000xx onboard framebuffer support ... derived from:
 	"HP300 Topcat framebuffer support (derived from macfb of all things)
 	Phil Blundell <philb@gnu.org> 1998", the original code can be
       found in the file hpfb.c in the same directory.
       DECstation related code Copyright (C) 1999,2000,2001 by
       Michael Engel <engel@unix-ag.org> and
       Karsten Merker <merker@linuxtag.org>.
       This file is subject to the terms and conditions of the GNU General
       Public License.  See the file COPYING in the main directory of this
       archive for more details.
  Changes:
  20010127 removed debugging and testing code, fixed fb_ops
             initialization which had caused a crash before,
             general cleanup, first official release (KM)
 bootinfo.h defines the machine type values, needed when checking 
 whether are really running on a maxine, KM                       
 Handle the funny Inmos RamDACvideo controller ... 
 Set the palette 
 value to be written into the palette reg. 
 The cmap fields are 16 bits    
 wide, but the harware colormap 
 registers are only 8 bits wide 
 Validate we're on the proper machine type 
 Framebuffer display memory base address 
 Clear screen 
 erase hardware cursor 
		
		   if (i&0x8 == 0)
		   maxinefb_ims332_write_register (IMS332_REG_CURSOR_RAM + i, 0x0f);
		   else
		   maxinefb_ims332_write_register (IMS332_REG_CURSOR_RAM + i, 0xf0);
 SPDX-License-Identifier: GPL-2.0-only
  smscufx.c -- Framebuffer driver for SMSC UFX USB controller
  Copyright (C) 2011 Steve Glendinning <steve.glendinning@shawell.net>
  Copyright (C) 2009 Roberto De Ioris <roberto@unbit.it>
  Copyright (C) 2009 Jaya Kumar <jayakumar.lkml@gmail.com>
  Copyright (C) 2009 Bernie Thompson <bernie@plugable.com>
  Based on udlfb, with work from Florian Echtler, Henrik Bjerregaard Pedersen,
  and others.
  Works well with Bernie Thompson's X DAMAGE patch to xf86-video-fbdev
  available from http:git.plugable.com
  Layout is based on skeletonfb by James Simmons and Geert Uytterhoeven,
  usb-skeleton by GregKH.
  TODO: Propose standard fb.h ioctl for reporting damage,
  using _IOWR() and one of the existing area structs from fb.h
  Consider these ioctls deprecated, but they're still used by the
  DisplayLink X server as yet - need both to be modified in tandem
  when new ioctl(s) are ready.
 -BULK_SIZE as per usb-skeleton. Can we get full page and avoid overhead? 
 fb_deferred_io.delay in jiffies 
 "disable" with long delay 
 &udev->dev 
 true when physical usb device not present 
 0 = update virtual buffer, but no usb traffic 
 1 = a render op failed. Need screen refresh 
 null until we read edid from hw or get from sysfs 
 module options 
 Optionally allow fbcon to consume first framebuffer 
 Optionally enable fb_defio mmap support 
 ufx keeps a list of urbs for efficient bulk transfers 
 reads a control register 
 writes a control register 
 If display is unblanked, then blank it 
 return success if display is already blanked 
 request the DC to blank the display 
 return success immediately if we don't have to wait 
 timed out waiting for display to blank 
 If display is blanked, then unblank it 
 return success if display is already unblanked 
 request the DC to unblank the display 
 return success immediately if we don't have to wait 
 timed out waiting for display to unblank 
 If display is enabled, then disable it 
 return success if display is already disabled 
 request the DC to disable the display 
 return success immediately if we don't have to wait 
 timed out waiting for display to disable 
 If display is disabled, then enable it 
 return success if display is already enabled 
 request the DC to enable the display 
 return success immediately if we don't have to wait 
 timed out waiting for display to enable 
 calculates PLL divider settings for a desired target frequency 
								 final returned value is equal to calculated value - 1
 sets analog bit PLL configuration values 
 convert pixclock (in ps) to frequency (in Hz) 
 clk_pixel = 12 clk_pixel_pll 
 Keep BYPASS and RESET signals asserted until configured 
 shut everything down before changing timing 
 set horizontal timings 
 set vertical timings 
 Set the frame length register (#pix  2 bytespixel) 
 enable desired output interface & disable others 
 set the sync polarities & enable bit 
 start everything back up 
 Unblank the display 
 enable RGB pad 
 enable VDAC 
 command word 
 length word 
 frame base address 
 color mode and horizontal resolution 
 vertical resolution 
 packed data 
 assume we have enough space to transfer at least one line 
 calculate the maximum number of lines we could fit in 
 but we might not need this many 
 Path triggered by usermode clients who write to filesystem
  e.g. cat filename > devfb1
  Not used by X Windows or text-mode console. But useful for testing.
 NOTE: fb_defio.c is holding info->fbdefio.mutex
    Touching ANY framebuffer memory that triggers a page fault
    in fb_defio will cause a deadlock, when it also tries to
 walk the written page list and render each to device 
		 create a rectangle of full screen width that encloses the
 TODO: Update X server to get this from sysfs instead 
 TODO: Help propose a standard fb.h ioctl to report mmap damage 
		 If we have a damage-aware client, turn fb_defio "off"
		  To avoid perf imact of unnecessary page fault handling.
		  Done by resetting the delay for this fb_info to a very
		  long period. Pages will become writable and stay that way.
		  Reset to normal value when all clients have closed this fb.
 taken from vesafb 
 1:5:5:5 
 0:5:6:5 
 It's common for several clients to have framebuffer open simultaneously.
  e.g. both fbcon and X. Makes things interesting.
	 fbcon aggressively connects to first framebuffer it finds,
	  preventing other clients (X) from working properly. Usually
 If the USB device is gone, we don't accept new opens 
 enable defio at last moment if not disabled by client 
  Called when all client interfaces to start transactions have been disabled,
  and all references to our device instance (ufx_data) are released.
  Every transaction must have a reference, so we know are fully spun down
 this function will wait for all in-flight urbs to complete 
 Assume info structure is freed after this point 
 ref taken in probe() as part of registering framebfufer 
  Assumes caller is holding info->lock mutex (for open and release at least)
 We can't free fb_info here - fbmem will touch it when we return 
 Check whether a video mode is supported by the chip
 TODO: support dynamically changing framebuffer size 
 set device-specific elements of var unrelated to mode 
 paint greenscreen 
 re-enable defio if previously disabled by damage tracking 
 In order to come back from full DPMS off, we need to set the mode again 
 Assumes &info->lock held by caller
		
		  Alloc system memory for virtual framebuffer
 sets up I2C Controller for 100 Kbps, std. speed, 7-bit addr, master,
 disable the controller before it can be reprogrammed 
	 Setup the clock count registers
 (6+8) = 14 clks @ 2.5 MHz = 5.6 uS 
 set speed to std mode 
 7-bit (not 10-bit) addressing 
 enable restart conditions and master mode 
 Set normal tx using target address 0 
 Enable the controller 
 sets the I2C port mux and target address 
 A0h is std for any EDID, right shifted by one 
 wait for BUSY to clear, with a timeout of 50ms with 10ms sleeps. if no
 if BUSY is clear, check for error 
 perform the first 10 retries without delay 
 reads a 128-byte EDID block from the currently selected port and TAR 
 Read the 128-byte EDID as 2 bursts of 64 bytes 
 all FF's in the first 16 bytes indicates nothing is connected 
 1) use sw default
  2) Parse into various fb_info structs
  3) Allocate virtual framebuffer memory to back highest res mode
  Parses EDID into three places used by various parts of fbdev:
  fb_var_screeninfo contains the timing of the monitor's preferred mode
  fb_info.monspecs is full parsed EDID info, including monspecs.modedb
  fb_info.modelist is a linked list of all monitor & VESA modes which work
  If EDID is not readablevalid, then modelist is all VESA modes,
  monspecs is NULL, and fb_var_screeninfo is set to safe VESA mode
 only use mutex if info has been registered 
	 Try to (re)read EDID from hardware first
	  EDID data may return, but not parse as valid
 If that fails, use a previously returned EDID if available 
 If that fails, use the default EDID we were handed 
 If we've got modes, let's pick a best default mode 
 if we've removed topbest mode 
 If everything else has failed, fall back to safe default mode 
		 Add the standard VESA modes to our modelist
		  Since we don't have EDID, there may be modes that
		  overspec monitor andor are incorrect aspect ratio, etc.
		  But at least the user has a chance to choose
		 default to resolution safe for projectors
		  (since they are most common case without EDID)
 If we have good mode and no active clients 
 with mode size info, we can now alloc our framebuffer 
 usb initialization 
 we need to wait for both usb and fbdev to spin down on disconnect 
 matching kref_put in usb .disconnect fn 
 matching kref_put in free_framebuffer_work 
 our generic struct device  
 We don't register a new USB class. Our client interface is fbdev 
 allocates framebuffer driver structure, not framebuffer memory 
 ready to begin using device 
 ref for framebuffer 
 last ref from kref_init 
 we virtualize until all fb clients release. Then we free 
 When non-active we'll update virtual framebuffer, but no new urbs 
 if clients still have us open, will be freed on last close 
 release reference taken by kref_init in probe() 
 consider ufx_data freed 
 syncasync unlink faults aren't errors 
 reset to actual 
	 When using fb_defio, we deadlock if up() is called
 keep waiting and freeing, until we've got 'em all 
 Getting interrupted means a leak, but ok at shutdown
 have reserved one with sem 
 Free each separately allocated piece 
 urb->transfer_buffer_length set to actual before submit 
 Wait for an in-flight buffer to complete and get re-queued 
 reserved one with limit_sem 
 set to actual payload len 
 because no one else will 
 driversvideos1d13xxxfb.c
  (c) 2004 Simtec Electronics
  (c) 2005 Thibaut VARENE <varenet@parisc-linux.org>
  (c) 2009 Kristoffer Ericson <kristoffer.ericson@gmail.com>
  Driver for Epson S1D13xxx series framebuffer chips
  Adapted from
   linuxdriversvideoskeletonfb.c
   linuxdriversvideoepson1355fb.c
   linuxdriversvideoepsons1d13xxxfb.c (2.4 driver by Epson)
  TODO: - handle dual screen display (CRT and LCD at the same time).
 	 - check_var(), mode change, etc.
 	 - probably not SMP safe :)
        - support all bitblt operations on all cards
  This file is subject to the terms and conditions of the GNU General Public
  License. See the file COPYING in the main directory of this archive for
  more details.
  set this to enable debugging on general functions
  set this to enable debugging on 2D acceleration
  we make sure only one bitblt operation is running
  list of card production ids
  List of card strings
  here we define the default struct fb_fix_screeninfo
 make sure the hardware can cope with us 
 framebuffer control functions
       s1d13xxxfb_set_par - Alters the hardware state.
       @info: frame buffer structure
 	Using the fb_var_screeninfo in fb_info we set the depth of the
 	framebuffer. This function alters the par AND the
 	fb_fix_screeninfo stored in fb_info. It doesn't not alter var in
 	fb_info since we are using that data. This means we depend on the
 	data in var inside fb_info to be supported by the hardware.
 	xxxfb_check_var is always called before xxxfb_set_par to ensure this.
 	XXX TODO: write proper s1d13xxxfb_check_var(), without which that
 	function is quite useless.
 LCD 
 read colour control 
 CRT 
 read colour control 
 LCD 
 CRT 
 	s1d13xxxfb_setcolreg - sets a color register.
 	@regno: Which register in the CLUT we are programming
 	@red: The red value which can be up to 16 bits wide
 	@green: The green value which can be up to 16 bits wide
 	@blue:  The blue value which can be up to 16 bits wide.
 	@transp: If supported the alpha value which can be up to 16 bits wide.
 	@info: frame buffer info structure
 	Returns negative errno on error, or zero on success.
 deal with creating pseudo-palette entries 
       s1d13xxxfb_blank - blanks the display.
       @blank_mode: the blank mode we want.
       @info: frame buffer structure that represents a single frame buffer
       Blank the screen if blank_mode != 0, else unblank. Return 0 if
       blanking succeeded, != 0 if un-blanking failed due to e.g. a
       video mode which doesn't support it. Implements VESA suspend
       and powerdown modes on hardware that supports disabling hsyncvsync:
       blank_mode == 2: suspend vsync
       blank_mode == 3: suspend hsync
       blank_mode == 4: powerdown
       Returns negative errno on error, or zero on success.
 let fbcon do a soft blank for us 
 	s1d13xxxfb_pan_display - Pans the display.
 	@var: frame buffer variable screen structure
 	@info: frame buffer structure that represents a single frame buffer
 	Pan (or wrap, depending on the `vmode' field) the display using the
 	`yoffset' field of the `var' structure (`xoffset'  not yet supported).
 	If the values don't fit, return -EINVAL.
 	Returns negative errno on error, or zero on success.
 not yet ... 
 LCD 
 CRT 
 functions to handle bitblt acceleration
 	bltbit_wait_bitclear - waits for change in register value
 	@info : frambuffer structure
 	@bit  : value currently in register
 	@timeout : ...
 	waits until value changes FROM bit
 	s1d13xxxfb_bitblt_copyarea - accelerated copyarea function
 	@info : framebuffer structure
 	@area : fb_copyarea structure
 	supports (atleast) S1D13506
 bytes per xres line 
 reverse, calculate the last pixel in rectangle 
 not reverse, calculate the first pixel in rectangle 
 (y  xres) + (bpp  x) 
 set source address 
 set destination address 
 program height and width 
 negative direction ROP 
 positive direction ROP  {
 set for rectangel mode and not linear 
 setup the bpp 1 = 16bpp, 0 = 8bpp
 set words per xres 
 initialize the engine 
 wait to complete 
 	s1d13xxxfb_bitblt_solidfill - accelerated solidfill function
 	@info : framebuffer structure
 	@rect : fb_fillrect structure
 	supports (atleast 13506)
 grab spinlock 
 bytes per x width 
 bytes to starting point 
 We split the destination into the three registers 
 give information regarding rectangel width 
 give information regarding rectangel height 
 set foreground color 
 set rectangual region of memory (rectangle and not linear) 
 set operation mode SOLID_FILL 
 set bits per pixel (1 = 16bpp, 0 = 8bpp) 
 set the memory offset for the bblt in word sizes 
 and away we go.... 
 wait until its done 
 let others play 
 framebuffer information structures 
 gets replaced at chip detection time 
 	s1d13xxxfb_fetch_hw_state - Configure the framebuffer according to
 	hardware setup.
 	@info: frame buffer structure
 	We setup the framebuffer structures according to the current
 	hardware setup. On some machines, the BIOS will have filled
 	the chip registers with such info, on others, these values will
 	have been written in some init procedure. In any case, the
 	software values needs to match the hardware ones. This is what
 	this function ensures.
 	Note: some of the hardcoded values here might need some love to
 	work on various chips, and might need to no longer be hardcoded.
 general info 
 CRT 
 4 bpp 
 8 bpp 
 16 bpp 
 LCD info 
 crt 
 disable output & enable powersave 
 enable platform-dependent hardware glue, if any 
 resource[0] is VRAM, resource[1] is registers 
 production id is top 6 bits 
 revision id is lower 2 bits 
 looks like we got it in our list 
 activate acceleration 
 perform "manual" chip initialization, if needed 
 disable display 
 backup all registers 
 now activate power save mode 
 awaken the chip 
 do not let go until SDRAM "wakes up" 
 will write RO regs, should get away with it :) 
 XXX kmalloc()'d when? 
 CONFIG_PM 
 SPDX-License-Identifier: GPL-2.0
  SH7760SH7763 LCDC Framebuffer driver.
  (c) 2006-2008 MSC Vertriebsges.m.b.H.,
              Manuel Lauss <mano@roarinelk.homelinux.net>
  (c) 2008 Nobuhiro Iwamatsu <iwamatsu.nobuhiro@renesas.com>
  PLEASE HAVE A LOOK AT Documentationfbsh7760fb.rst!
  Thanks to Siegfried Schaefer <s.schaefer at schaefer-edv.de>
      for his original source and testing!
  sh7760_setcolreg get from driversvideosh_mobile_lcdcfb.c
 display information 
 physical address 
 rotation enabled? 
 vsync irq event 
 wait_for_lps - wait until power supply has reached a certain state. 
 endisable the LCDC 
 only FB_VISUAL_TRUECOLOR supported 
 get color info from register value 
 TODO: add some more validation here 
  sh7760fb_set_par - set videomode.
  NOTE: The rotation, grayscale and DSTN codepaths are
      totally untested!
 rotate only works with xres <= 320 
 calculate LCDC reg vals from display parameters 
 get color info from register value 
 shut down LCDC before changing display parameters 
 pixclock 
 polarities 
 colordepth 
 rotate 
 Power Management 
 Power Supply Ctrl 
 display resolution 
 hv sync signals 
 AC modulation sig 
 6 bpp == 8 bpp 
 if rotated, stride must be power of 2 
 not P-o-2, round up 
 set display mem start address 
	
	  for DSTN need to set address for lower half.
	  I (mlau) don't know which address to set it to,
	  so I guessed at (stride  yres2).
 mem for lower half of DSTN 
 panel on! 
 allocate the framebuffer memory. This memory must be in Area3,
  (dictated by the DMA engine) and contiguous, at a 512 byte boundary.
 get color info from register value 
	 min VRAM: xres_min = 16, yres_min = 1, bpp = 1: 2byte -> 1 page
 disable vsync irq 
 fixup color register bitpositions. These are fixed by hardware 
	 set the DON2 bit now, before cmap allocation, as it will randomize
	  palette memory.
  Permedia2 framebuffer driver.
  2.52.6 driver:
  Copyright (c) 2003 Jim Hague (jim.hague@acm.org)
  based on 2.4 driver:
  Copyright (c) 1998-2000 Ilario Nardinocchi (nardinoc@CS.UniBO.IT)
  Copyright (c) 1999 Jakub Jelinek (jakub@redhat.com)
  and additional input from James Simmon's port of Hannu Mallat's tdfx
  driver.
  I have a Creative Graphics Blaster Exxtreme card - pm2fb on x86. I
  have no access to other pm2fb implementations. Sparc (and thus
  hopefully other big-endian) devices now work, thanks to a lot of
  testing work by Ron Murray. I have no access to CVision hardware,
  and therefore for now I am omitting the CVision code.
  Multiple boards support has been on the TODO list for ages.
  Don't expect this to change.
  This file is subject to the terms and conditions of the GNU General Public
  License. See the file COPYING in the main directory of this archive for
  more details.
  Driver data
  The XFree GLINT driver will (I think to implement hardware cursor
  support on TVP4010 and similar where there is no RAMDAC - see
  comment in set_video) always request +ve sync regardless of what
  the mode requires. This screws me because I have a Sun
  fixed-frequency monitor which absolutely has to have -ve sync. So
  these flags allow the user to specify that requests for +ve sync
  should be silently turned in -ve sync.
  The hardware state of the graphics card that isn't part of the
  screeninfo.
 Board type 
 virtual address of p_regs 
 memclock 
 video flags before blanking 
 MemConfig reg at probe 
 MemControl reg at probe 
 BootAddress reg at probe 
  Here we define the default structs fb_fix_screeninfo and fb_var_screeninfo
  if we don't use modedb.
  Default video mode. In case the modedb doesn't work.
 "640x480, 8 bpp @ 60 Hz 
  Utility functions
  partial products for the supported horizontal resolutions.
 Restore stashed memory config information from probe 
 no overlay 
 8bit 
	
	  The hardware is little-endian. When used in big-endian
	  hosts, the on-chip aperture settings are used where
	  possible to translate from host to card byte order.
 RGB->BGR 
		
		  We can't use the aperture to translate host to
		  card byte order here, so we switch to BGR mode
		  in pm2fb_set_par().
 B->B 
 HL->LH 
 RGBA->ABGR 
 We don't use aperture two, so this may be superflous 
	
	  The hardware cursor needs +vsync to recognise vert retrace.
	  We may not be using the hardware cursor, but the X Glint
	  driver may well. So always set +hsync+vsync and then set
	  the RAMDAC to invert the sync if necessary.
 invert hsync 
 invert vsync 
 invert hsync 
 invert vsync 
 	pm2fb_check_var - Optional function. Validates a var passed in.
 	@var: frame buffer variable screen structure
 	@info: frame buffer structure that represents a single frame buffer
 	Checks to see if the hardware supports the state requested by
 	var passed in.
 	Returns negative errno on error, or zero on success.
 permedia cannot blit over 2048 
 could sometimes be 8 
 Can't mmap if this is on 
 	pm2fb_set_par - Alters the hardware state.
 	@info: frame buffer structure that represents a single frame buffer
 	Using the fb_var_screeninfo in fb_info we set the resolution of the
 	this particular framebuffer.
 8-bit DAC 
 FIXME! 
	
	  Settings calculated. Now write them out.
 	pm2fb_setcolreg - Sets a color register.
 	@regno: boolean, 0 copy local, 1 get_user() function
 	@red: frame buffer colormap structure
 	@green: The green value which can be up to 16 bits wide
 	@blue:  The blue value which can be up to 16 bits wide.
 	@transp: If supported the alpha value which can be up to 16 bits wide.
 	@info: frame buffer info structure
 	Set a single color register. The values supplied have a 16 bit
 	magnitude which needs to be scaled in this function for the hardware.
 	Pretty much a direct lift from tdfxfb.c.
 	Returns negative errno on error, or zero on success.
 no. of hw registers 
	
	  Program hardware... do anything you want with transp
 grayscale works only partially under directcolor 
 grayscale = 0.30R + 0.59G + 0.11B 
	 Directcolor:
	    var->{color}.offset contains start of bitfield
	    var->{color}.length contains length of bitfield
	    {hardwarespecific} contains width of DAC
	    cmap[X] is programmed to
	    (X << red.offset) | (X << green.offset) | (X << blue.offset)
	    RAMDAC[X] is programmed to (red, green, blue)
	 
	  Pseudocolor:
	     uses offset = 0 && length = DAC register width.
	     var->{color}.offset is 0
	     var->{color}.length contains width of DAC
	     cmap is not used
	     DAC[X] is programmed to (red, green, blue)
	  Truecolor:
	     does not use RAMDAC (usually has 3 of them).
	     var->{color}.offset contains start of bitfield
	     var->{color}.length contains length of bitfield
	     cmap is programmed to
	     (red << red.offset) | (green << green.offset) |
	     (blue << blue.offset) | (transp << transp.offset)
	     RAMDAC does not exist
		 example here assumes 8 bit DAC. Might be different
 hey, there is bug in transp handling... 
 Truecolor has hardware independent palette 
 	pm2fb_pan_display - Pans the display.
 	@var: frame buffer variable screen structure
 	@info: frame buffer structure that represents a single frame buffer
 	Pan (or wrap, depending on the `vmode' field) the display using the
 	`xoffset' and `yoffset' fields of the `var' structure.
 	If the values don't fit, return -EINVAL.
 	Returns negative errno on error, or zero on success.
 	pm2fb_blank - Blanks the display.
 	@blank_mode: the blank mode we want.
 	@info: frame buffer structure that represents a single frame buffer
 	Blank the screen if blank_mode != 0, else unblank. Return 0 if
 	blanking succeeded, != 0 if un-blanking failed due to e.g. a
 	video mode which doesn't support it. Implements VESA suspend
 	and powerdown modes on hardware that supports disabling hsyncvsync:
 	blank_mode == 2: suspend vsync
 	blank_mode == 3: suspend hsync
 	blank_mode == 4: powerdown
 	Returns negative errno on error, or zero on success.
 Screen: On 
 Screen: Off 
 VSync: Off 
 HSync: Off 
 HSync: Off, VSync: Off 
 invert bits 
 reverse byte order 
 GXcopy & UNIT_ENABLE 
 clear area 
 BitMapPackEachScanline 
 clear area 
 	Hardware cursor support.
 push it outside display 
	
	  If the cursor is not be changed this means either we want the
	  current cursor state (if enable is set) or we want to query what
	  we can do with the cursor (if enable is not set)
 the X11 driver says one should use these color registers 
 Upper 4 bits of bitmap data 
 Lower 4 bits of bitmap 
 just to force soft_cursor() call 
 Too large of a cursor or wrong bpp :-( 
	
	  If the cursor is not be changed this means either we want the
	  current cursor state (if enable is set) or we want to query what
	  we can do with the cursor (if enable is not set)
 bitmap data 
 mask 
 ------------ Hardware Independent Functions ------------ 
   Frame buffer operations
  PCI stuff
  Device initialisation
  Initialise and allocate resource for PCI device.
  @pdev:	PCI device.
  @id:		PCI device ID.
	
	  PM2 has a 64k register file, mapped twice in 128k. Lower
	  map is little-endian, upper map is big-endian.
 Registers - request region and map it. 
 Stash away memory register info for use when we reset the board 
 Now work out how big lfb is going to be. 
 Linear frame buffer - request region and map it. 
	
	  Our driver data
  Device removal.
  Release all device resources.
  @pdev:	PCI device to clean up.
  Parse user specified options.
  This is, comma-separated options following `video=pm2fb:'.
   Cleanup
   driversvideochipsfb.c -- frame buffer device for
   Chips & Technologies 65550 chip.
   Copyright (C) 1998-2002 Paul Mackerras
   This file is derived from the Powermac "chips" driver:
   Copyright (C) 1997 Fabio Riccardi.
   And from the frame buffer device for Open Firmware-initialized devices:
   Copyright (C) 1997 Geert Uytterhoeven.
   This file is subject to the terms and conditions of the GNU General Public
   License. See the file COPYING in the main directory of this archive for
   more details.
  Since we access the display with inboutb to fixed port numbers,
  we can only handle one 6555x chip.  -- paulus
 extension registers 
 flat panel registers 
 CRTC registers 
 graphics registers 
 sequencer registers 
 attribute registers - slightly strange 
  Exported functions
 Set line length (doublewords)
 15 bit (555) color mode
 Disable palettes
 16 bit blitter mode
 p->var.bits_per_pixel == 8 
 Set line length (doublewords)
 8 bit color mode
 Graphics gamma enable
 8 bit blitter mode
 get fb_blank to set the colormap to all black 
 { 0x12, 0x40 }, -- 3400 needs 40, 2400 needs 48, no way to tell 
 set default memory clock 
 memory clock ratio 
 set misc output reg 
 FIXME: Assumes 1MB frame buffer, but 65550 supports 1MB or 2MB.
  "3500" PowerBook G3 (the original PB G3) has 2MB.
  2400 has 1MB composed of 2 Mitsubishi M5M4V4265CTP DRAM chips.
   Motherboard actually supports 2MB -- there are two blank locations
   for a second pair of DRAMs.  (Thanks, Apple!)
  3400 has 1MB (I think).  Don't know if it's expandable.
 -- Tim Seufert
 1MB 
 Use big-endian aperture
	 we should use pci_enable_device here, but,
	   the device doesn't declare its IO ports in its BARs
 enable memory and IO space 
 turn on the backlight 
 CONFIG_PMAC_BACKLIGHT 
 CONFIG_PM 
   linuxdriversvideops3fb.c -- PS3 GPU frame buffer device
 	Copyright (C) 2006 Sony Computer Entertainment Inc.
 	Copyright 2006, 2007 Sony Corporation
   This file is based on :
   linuxdriversvideovfb.c -- Virtual frame buffer device
 	Copyright (C) 2002 James Simmons
 	Copyright (C) 1997 Geert Uytterhoeven
   This file is subject to the terms and conditions of the GNU General Public
   License. See the file COPYING in the main directory of this archive for
   more details.
 vsync on head A 
 vsync on head B 
 flip head A 
 flip head B 
 queue head A 
 queue head B 
 gpu internals 
 frame count 
 onoff flip with vsync 
 fb_open count 
 num of frame buffers 
 start of fullscreen DDR fb 
 start of actual DDR fb 
 60 Hz broadcast modes (modes "1" to "5") 
 480i 
 480p 
 720p 
 1080i 
 1080p 
 50 Hz broadcast modes (modes "6" to "10") 
 576i 
 576p 
 720p 
 1080i 
 1080p 
 60 Hz broadcast modes (full resolution versions of modes "1" to "5") 
 480if 
 480pf 
 720pf 
 1080if 
 1080pf 
 50 Hz broadcast modes (full resolution versions of modes "6" to "10") 
 576if 
 576pf 
 720pf 
 1080if 
 1080pf 
 VESA modes (modes "11" to "13") 
 WXGA 
 SXGA 
 WUXGA 
 number of bytes per pixel 
 maximum values 
 progressiveinterlaced must match 
 minimum resolution 
 minimum margins 
 resolution + margins may not exceed native parameters 
 exact match 
 resolution difference 
 Non-fullscreen broadcast mode 
 minimum resolution 
 minimum virtual resolution 
 minimum margins 
 extra margins 
 fixed fields 
 Full broadcast modes have the full mode bit set 
 single buffer 
       Setting the video mode has been split into two parts.
       First part, xxxfb_check_var, must not write anything
       to hardware, it should only verify and adjust var.
       This means it doesn't alter par but it does use hardware
       data from it to check this var.
 Virtual screen 
 We support ARGB8888 only 
 Rotation is not supported 
 Memory limit 
      This routine actually sets the video mode.
 Keep the special bits we cannot set using fb_var_screeninfo 
 Start of the virtual frame buffer (relative to fullscreen) 
 Clear XDR frame buffer memory 
 Clear DDR frame buffer memory 
       Set a single color register. The values supplied are already
       rounded down to the hardware's capabilities (according to the
       entries in the var structure). Return != 0 for invalid regno.
       As we have a virtual frame buffer, we need our own mmap function
      Blank the display
 mute on 
 unblank 
 mute off 
      ioctl
 Force, in case only special bits changed 
 single buffer 
 VSYNC 
 fbcon opens ps3fb 
 for flip with vsync 
 get gpu context handle 
 vsync interrupt 
 Clear memory to prevent kernel info leakage into userspace 
 != ps3fb_mode, to trigger change 
	
	  The GPU command buffer is at the start of video memory
	  As we don't use the full command buffer, we can put the actual
	  frame buffer at offset GPU_FB_START and save some precious XDR
	  memory
 flip off 
 SPDX-License-Identifier: GPL-2.0-only
  Frame Buffer Device for Toshiba Mobile IO(TMIO) controller
  Copyright(C) 2005-2006 Chris Humbert
  Copyright(C) 2005 Dirk Opfer
  Copytight(C) 2007,2008 Dmitry Baryshkov
  Based on:
 	driversvideow100fb.c
 	code written by SharpLineo for 2.4 kernels
 Why should fb driver call console functions? because console_lock() 
  accelerator commands
 a FIFO is always allocated, even if acceleration is not used 
  LCD Host Controller Configuration Register
  This iomem area supports only 16-bit IO.
 Command				
 Revision ID			
 LCD Control Reg Base Addr Low	
 LCD Control Reg Base Addr High	
 Unified Gated Clock Control	
 Gated Clock Control		
 Unified Software Clear		
 VRAM Timing Control		
 0x61 VRAM Refresh Control		
 VRAM Access Control		
 0x63	VRAM Status			
 VRAM Block Control		
  LCD Control Register
  This iomem area supports only 16-bit IO.
 Unified Interrupt Status	
 VRAM Horizontal Pixel Number	
 Command FIFO Start Address Low	
 Command FIFO Start Address High 
 Command FIFO Size		
 Command FIFO Writeable Size	
 BitBLT Interrupt Enable	
 BitBLT Interrupt Status and Clear 
 Command Count Status		
 BitBLT Execution Status	
 Command Low			
 Command High			
 Command FIFO Clear		
 CMOS Camera IF Control		
 Hardware Test			
 LCDC Clock and Reset Control	
 LCDC Control			
 LCDC Output Pin Control	
 LCD Interrupt Status		
 LCD Interrupt Mask		
 LCD Interrupt Enable		
 Graphics Display Start Address Low 
 Graphics Display Start Address High 
 VRAM Horizontal Pixel Count Low 
 VRAM Horizontal Pixel Count High 
 Graphic Mode(VRAM access enable) 
 Horizontal Total		
 Horizontal Display Start	
 H-Sync Start			
 H-Sync End			
 Horizontal Number of Pixels	
 Vertical Total			
 Vertical Display Start		
 V-Sync Start			
 V-Sync End			
 Current Display Line Number	
 Interrupt Line Number		
 Sync Polarity			
 MISC(RGB565 mode)		
 Video Interface H-Sync Start	
 Video Interface Vertical Start	
 Video Interface Vertical End	
 Video Interface V-Sync Start	
 Video  CMOS Camera Interface Select 
 VI Data Write Start Address Low 
 VI Data Write Start Address High 
 VI Data Read Start Address Low	
 VI Data Read Start Address High 
 VI Picture Data Display Start Timing 
 VI Picture Data Display End Timing 
 Video Interface Enable		
 VideoCamera Select		
 Video Picture Horizontal Wait Count 
 Video Picture Horizontal Size	
 Video Picture Vertical Wait Count 
 Video Picture Vertical Size	
 PLHPIX				
 XStart				
 XCK High Width			
 STH Start			
 Vertical Total			
 YCK Start Wait			
 YST Start			
 #PPOL Start			
 PREC Width			
 VCLK High Width		
 Output Control			
--------------------------------------------------------------------------
  reasons for an interrupt:
 	uis	bbisc	lcdis
 	0100	0001	accelerator command completed
  	2000	0001	vsync start
  	2000	0002	display start
  	2000	0004	line number match(0x1ff mask???)
	
	  We were in polling mode and now we got correct irq.
	  Switch back to IRQ-based sync of command FIFO
--------------------------------------------------------------------------
  Turns off the LCD controller and LCD host controller.
  Initializes the LCD host controller.
 wait for device to settle 
 base address enable 
 VRAMRC, VRAMTC 
 VRAMSTS, VRAMAC 
 wait for device to settle 
  Sets the LCD controller's output resolution and pixel clock
 RGB565 mode 
 VRAM enable 
 sync polarity 
 wait for device to settle 
 STOP_CKP 
 wait for device to settle 
 STOP_CKP|SOFT_RESET
--------------------------------------------------------------------------
	
	  This code can be called with interrupts disabled.
	  So instead of relaying on irq to trigger the event,
	  poll the state till the necessary command is executed.
  Writes an accelerator command to the accelerator's FIFO.
  Wait for the accelerator to finish its operations before writing
  to the framebuffer for consistent display output.
 blit active 
--------------------------------------------------------------------------
 Select the smallest mode that allows the desired resolution to be
  displayed.  If desired, the x and y parameters can be rounded up to
  match the selected mode.
 mm 
 mm 
	
	  everything is done in lcdbl drivers.
	  this is purely to make sysfs happy and work.
--------------------------------------------------------------------------
	
	  This is the only way ATM to disable the fb
err_set_par:
	
	  The fb should be usable even if interrupts are disabled (and they are
	  during suspendresume). Switch temporary to forced polling.
--------------------------------------------------------------------------
		
		  FIXME
  linuxdriversvideovt8623fb.c - fbdev driver for
  integrated graphic core in VIA VT8623 [CLE266] chipset
  Copyright (c) 2006-2007 Ondrej Zajicek <santiago@crfreenet.org>
  This file is subject to the terms and conditions of the GNU General Public
  License.  See the file COPYING in the main directory of this archive for
  more details.
  Code is based on s3fb, some parts are from David Boucher's viafb
  (http:davesdomain.org.ukviafb)
 Why should fb driver call console functions? because console_lock() 
 ------------------------------------------------------------------------- 
	{16,  {10, 5, 0}, {5, 5, 0},  {0, 5, 0}, {0, 0, 0}, 0,
 CRT timing register sets 
 ------------------------------------------------------------------------- 
 Module parameters 
 ------------------------------------------------------------------------- 
 ------------------------------------------------------------------------- 
 image data is MSB-first, fb structure is MSB-first too 
 vt8623fb_iplan_imageblit silently assumes that almost everything is 8-pixel aligned 
 vt8623fb_iplan_fillrect silently assumes that almost everything is 8-pixel aligned 
 image data is MSB-first, fb structure is high-nibble-in-low-byte-first 
 vt8623fb_cfb4_imageblit silently assumes that almost everything is 8-pixel aligned 
 ------------------------------------------------------------------------- 
 Set VGA misc register  
 Set clock registers 
 PLL reset 
 Find appropriate format 
 Do not allow to have real resoulution larger than virtual 
 Round up xres_virtual to have proper alignment of lines 
 Check whether have enough memory 
 Text mode is limited to 256 kB of memory 
 Interlaced mode not supported 
 in 4bpp supports 8p wide tiles only, any tiles otherwise 
 + 0 is OK 
 supports 8x16 tiles only 
 Unlock registers 
 Device, screen and sync off 
 Set default values 
 Clear HV Skew 
 DIDVP bus
 DIDVP bus
 FIFO read threshold
 FIFO depth
 enable MMIO ?
 Set SR15 according to number of bits per pixel 
 Device and screen back on 
 ((transp & 0xFF00) << 16) 
 Calculate the offset 
 Set the offset 
 ------------------------------------------------------------------------- 
 Frame buffer operations 
 PCI probe 
 Ignore secondary VGA device because there is no VGA arbitration 
 Allocate and fill driver data structure 
 Prepare PCI device 
 Map physical IO memory address into kernel space 
 Find how many physical memory there is on card 
 Prepare startup mode 
 Record a reference to the driver data 
 Error handling 
	pci_disable_device(dev); 
 PCI remove 
		pci_disable_device(dev); 
 PCI suspend 
 PCI resume 
 CONFIG_PM_SLEEP 
 List of boards that we are trying to support 
 Cleanup 
 Driver Initialisation 
 ------------------------------------------------------------------------- 
 Modularization 
   valkyriefb.c -- frame buffer device for the PowerMac 'valkyrie' display
   Created 8 August 1998 by 
   Martin Costabel <costabel@wanadoo.fr> and Kevin Schoedel
   Vmode-switching changes and vmode 1517 modifications created 29 August
   1998 by Barry K. Nathan <barryn@pobox.com>.
   Ported to m68k Macintosh by David Huggins-Daines <dhd@debian.org>
   Derived directly from:
    controlfb.c -- frame buffer device for the PowerMac 'control' display
    Copyright (C) 1998 Dan Jacobowitz <dan@debian.org>
    pmc-valkyrie.c -- Console support for PowerMac "valkyrie" display adaptor.
    Copyright (C) 1997 Paul Mackerras.
   and indirectly:
   Frame buffer structure from:
     driversvideochipsfb.c -- frame buffer device for
     Chips & Technologies 65550 chip.
     Copyright (C) 1998 Paul Mackerras
     This file is derived from the Powermac "chips" driver:
     Copyright (C) 1997 Fabio Riccardi.
     And from the frame buffer device for Open Firmware-initialized devices:
     Copyright (C) 1997 Geert Uytterhoeven.
   Hardware information from:
     control.c: Console support for PowerMac "control" display adaptor.
     Copyright (C) 1996 Paul Mackerras
   This file is subject to the terms and conditions of the GNU General Public
   License. See the file COPYING in the main directory of this archive for
   more details.
  Exported functions
 Sets the video mode according to info->var 
 Reset the valkyrie 
 Initialize display timing registers 
 Turn on display 
   Blank the screen if blank_mode != 0, else unblank. If blank_mode == NULL
   then the caller blanks by setting the CLUT (Color Look Up Table) to all
   black. Return 0 if blanking succeeded, != 0 if un-blanking failed due
   to e.g. a video mode which doesn't support it. Implements VESA suspend
   and powerdown modes on hardware that supports disabling hsyncvsync:
     blank_mode == 2: suspend vsync
     blank_mode == 3: suspend hsync
     blank_mode == 4: powerdown
 unblank 
 get caller to set CLUT to all black 
		
		  [kps] Value extracted from MacOS. I don't know
		  whether this bit disables hsync or vsync, or
		  whether the hardware can do the other as well.
 tell clut which address to fill 
 send one color channel at a time 
 Try to pick a video mode out of NVRAM if we have one. 
	
	  Reduce the pixel size if we don't have enough VRAM or bandwidth.
 I'm not sure about this one 
 Hardcoded addresses... welcome to 68k Macintosh country :-) 
 ppc (!CONFIG_MAC) 
 ppc (!CONFIG_MAC) 
 Map in frame buffer and registers 
 "can't happen" 
  Get the monitor sense value.
 release all lines 
 drive each sense line low in turn and collect the other 2 
 drive A low 
 drive B low 
 drive C low 
  This routine takes a user-supplied var,
  and picks the best vmodecmode from it.
 [bkn] I did a major overhaul of this function.
  Much of the old code was "swiped by jonh from atyfb.c". Because
  macmodes has mac_var_to_vmode, I felt that it would be better to
  rework this function to use that, instead of reinventing the wheel to
  add support for vmode 17. This was reinforced by the fact that
  the previously swiped atyfb.c code is no longer there.
  So, I swiped and adapted platinum_var_to_par (from platinumfb.c), replacing
  most, but not all, of the old code in the process. One side benefit of
  swiping the platinumfb code is that we now have more comprehensible error
  messages when a vmodecmode switch fails. (Most of the error messages are
  platinumfb.c, but I added two of my own, and I also changed some commas
  into colons to make the messages more consistent with other Linux error
  messages.) In addition, I think the new code might fix some vmode-
  switching oddities, but I'm not sure.
  There may be some more opportunities for cleanup in here, but this is a
  good start...
 Check if we know about the wanted video mode 
 Fix must already be inited above 
 ywrapstep, xpanstep, ypanstep 
  Parse user specified options (`video=valkyriefb:')
 SPDX-License-Identifier: GPL-2.0-or-later
  Driver for Aeroflex Gaisler SVGACTRL framebuffer device.
  2011 (c) Aeroflex Gaisler AB
  Full documentation of the core can be found here:
  https:www.gaisler.comproductsgrlibgrip.pdf
  Contributors: Kristoffer Glembo <kristoffer@gaisler.com>
 0x00 
 0x04 
 0x08 
 0x0C 
 0x10 
 0x14 
 0x18 
 0x20 
 16 entry pseudo palette used by fbcon in true color mode 
 = 1 if framebuffer is allocated in main memory 
 640x480 @ 60 Hz 
 800x600 @ 60 Hz 
 800x600 @ 72 Hz 
 1024x768 @ 60 Hz 
 Which clocks that are available can be read out in these registers 
 offset, length, msb-right 
 Size of CLUT 
 grayscale = 0.30R + 0.59G + 0.11B 
 In PSEUDOCOLOR we use the hardware CLUT 
 Truecolor uses the pseudo palette 
 Set framebuffer base address  
	 Expecting: "grvga: modestring, [addr:<framebuffer physical address>], [size:<framebuffer size>]
	 
	  If modestring is custom:<custom mode string> we parse the string which then contains all videoparameters
	  If address is left out, we allocate memory,
	  if size is left out we only allocate enough to support the given mode.
 Got framebuffer base address from argument list 
 Allocate frambuffer memory 
		 Set page reserved so that mmap will work. This is necessary
		  since we'll be remapping normal memory.
 Enable framebuffer 
   linuxdriversvideomfb.c -- Low level frame buffer operations for
 				 monochrome
 	Created 5 Apr 1997 by Geert Uytterhoeven
   This file is subject to the terms and conditions of the GNU General Public
   License.  See the file COPYING in the main directory of this archive for
   more details.
       Monochrome
 check margins  ) {
 use fast_memmove or fb_memmove
   linuxdriversvideofm2fb.c -- BSC FrameMaster IIRainbow II frame buffer
 				   device
 	Copyright (C) 1998 Steffen A. Mork (linux-dev@morknet.de)
 	Copyright (C) 1999 Geert Uytterhoeven
   Written for 2.0.x by Steffen A. Mork
   Ported to 2.1.x by Geert Uytterhoeven
   Ported to new api by James Simmons
   This file is subject to the terms and conditions of the GNU General Public
   License. See the file COPYING in the main directory of this archive for
   more details.
 	Some technical notes:
 	The BSC FrameMaster II (or Rainbow II) is a simple very dumb
 	frame buffer which allows to display 24 bit true color images.
 	Each pixel is 32 bit width so it's very easy to maintain the
 	frame buffer. One long word has the following layout:
 	AARRGGBB which means: AA the alpha channel byte, RR the red
 	channel, GG the green channel and BB the blue channel.
 	The FrameMaster II supports the following video modes.
 	- PALNTSC
 	- interlacednon interlaced
 	- composite syncsyncsync over green
 	The resolution is to the following both ones:
 	- 768x576 (PAL)
 	- 768x480 (NTSC)
 	This means that pixel access per line is fixed due to the
 	fixed line width. In case of maximal resolution the frame
 	buffer needs an amount of memory of 1.769.472 bytes which
 	is near to 2 MByte (the allocated address space of Zorro2).
 	The memory is channel interleaved. That means every channel
 	owns four VRAMs. Unfortunately most FrameMasters II are
 	not assembled with memory for the alpha channel. In this
 	case it could be possible to add the frame buffer into the
 	normal memory pool.
 	At relative address 0x1ffff8 of the frame buffers base address
 	there exists a control register with the number of
 	four control bits. They have the following meaning:
 	bit value meaning
 	 0    1   0=interlaced1=non interlaced
 	 1    2   0=video out disabled1=video out enabled
 	 2    4   0=normal mode as jumpered via JP81=complement mode
 	 3    8   0=read  onboard ROM1 normal operation (required)
 	As mentioned above there are several jumper. I think there
 	is not very much information about the FrameMaster II in
 	the world so I add these information for completeness.
 	JP1  interlace selection (1-2 non interlaced2-3 interlaced)
 	JP2  wait state creation (leave as is!)
 	JP3  wait state creation (leave as is!)
 	JP4  modulate composite sync on green output (1-2 composite
 	     sync on green channel2-3 normal composite sync)
 	JP5  create test signal, shorting this jumper will create
 	     a white screen
 	JP6  sync creation (1-2 composite sync2-3 H-sync output)
 	JP8  video mode (1-2 PAL2-3 NTSC)
 	With the following jumpering table you can connect the
 	FrameMaster II to a normal TV via SCART connector:
 	JP1:  2-3
 	JP4:  2-3
 	JP6:  2-3
 	JP8:  1-2 (means PAL for Europe)
 	NOTE:
 	There is no other possibility to change the video timings
 	except the interlacednon interlaced, sync control and the
 	video mode PAL (50 Hz)NTSC (60 Hz). Inside this
 	FrameMaster II driver are assumed values to avoid anomalies
 	to a future X server. Except the pixel clock is really
 	constant at 30 MHz.
 	9 pin female video connector:
 	1  analog red 0.7 Vss
 	2  analog green 0.7 Vss
 	3  analog blue 0.7 Vss
 	4  H-sync TTL
 	5  V-sync TTL
 	6  ground
 	7  ground
 	8  ground
 	9  ground
 	Some performance notes:
 	The FrameMaster II was not designed to display a console
 	this driver would do! It was designed to display still true
 	color images. Imagine: When scroll up a text line there
 	must copied ca. 1.7 MBytes to another place inside this
 	frame buffer. This means 1.7 MByte read and 1.7 MByte write
 	over the slow 16 bit wide Zorro2 bus! A scroll of one
 	line needs 1 second so do not expect to much from this
 	driver - he is at the limit!
 	definitions
 768 x 576, 32 bpp (PAL) 
 768 x 480, 32 bpp (NTSC - not supported yet 
       Interface used by the world
       Blank the display.
       Set a single color register. The values supplied are already
       rounded down to the hardware's capabilities (according to the
       entries in the var structure). Return != 0 for invalid regno.
       Initialisation
 assigning memory to kernel space 
 make EBU color bars on display 
 white 
 yellow 
 cyan 
 green 
 magenta 
 red 
 blue 
 black 
   linuxdriversvideomacmodes.c -- Standard MacOS video modes
 	Copyright (C) 1998 Geert Uytterhoeven
       2000 - Removal of OpenFirmware dependencies by:
       - Ani Joshi
       - Brad Douglas <brad@neruo.com>
 	2001 - Documented with DocBook
 	- Brad Douglas <brad@neruo.com>
   This file is subject to the terms and conditions of the GNU General Public
   License. See the file COPYING in the main directory of this archive for
   more details.
       MacOS video mode definitions
       Order IS important! If you change these, don't forget to update
       mac_modes[] below!
 512x384, 60Hz, Non-Interlaced (15.67 MHz dot clock) 
 640x480, 60 Hz, Non-Interlaced (25.175 MHz dotclock) 
 640x480, 67Hz, Non-Interlaced (30.0 MHz dotclock) 
 640x870, 75Hz (portrait), Non-Interlaced (57.28 MHz dot clock) 
 800x600, 56 Hz, Non-Interlaced (36.00 MHz dotclock) 
 800x600, 60 Hz, Non-Interlaced (40.00 MHz dotclock) 
 800x600, 72 Hz, Non-Interlaced (50.00 MHz dotclock) 
 800x600, 75 Hz, Non-Interlaced (49.50 MHz dotclock) 
 832x624, 75Hz, Non-Interlaced (57.6 MHz dotclock) 
 1024x768, 60 Hz, Non-Interlaced (65.00 MHz dotclock) 
 1024x768, 72 Hz, Non-Interlaced (75.00 MHz dotclock) 
 1024x768, 75 Hz, Non-Interlaced (78.75 MHz dotclock) 
 1024x768, 75 Hz, Non-Interlaced (78.75 MHz dotclock) 
 1152x870, 75 Hz, Non-Interlaced (100.0 MHz dotclock) 
 1280x960, 75 Hz, Non-Interlaced (126.00 MHz dotclock) 
 1280x1024, 75 Hz, Non-Interlaced (135.00 MHz dotclock) 
 1152x768, 60 Hz, Titanium PowerBook 
 1600x1024, 60 Hz, Non-Interlaced (112.27 MHz dotclock) 
 Anyone who has timings for these? 
 VMODE_512_384_60I: 512x384, 60Hz, Interlaced (NTSC) 
 VMODE_640_480_50I: 640x480, 50Hz, Interlaced (PAL) 
 VMODE_640_480_60I: 640x480, 60Hz, Interlaced (NTSC) 
 VMODE_768_576_50I: 768x576, 50Hz (PAL full frame), Interlaced 
       Mapping between MacOS video mode numbers and video mode definitions
       These MUST be ordered in
         - increasing resolution
         - decreasing pixel clock period
 512x384 
 640x480 
 640x870 
 800x600 
 832x624 
 1024x768 
 1152x768 
 1152x870 
 1280x960 
 1280x1024 
 1600x1024 
       Mapping between monitor sense values and MacOS video mode numbers
 21" RGB 
 Portrait Monochrome 
 12" RGB
 21" RGB (Radius) 
 21" mono (Radius) 
 21" mono 
 NTSC 
 Portrait RGB 
 12"-16" multiscan 
 13"-19" multiscan 
 13"-21" multiscan 
 13"14" RGB 
 PAL 
 NTSC 
 VGA 
 16" RGB (Goldfish) 
 PAL (Alternate) 
 3rd party 19" 
 no sense lines connected at all 
 22" Apple Cinema Display 
 catch-all, must be last 
 	mac_vmode_to_var - converts vmodecmode pair to var structure
 	@vmode: MacOS video mode
 	@cmode: MacOS color mode
 	@var: frame buffer video mode structure
 	Converts a MacOS vmodecmode pair to a frame buffer video
 	mode structure.
 	Returns negative errno on error, or zero for success.
 	mac_var_to_vmode - convert var structure to MacOS vmodecmode pair
 	@var: frame buffer video mode structure
 	@vmode: MacOS video mode
 	@cmode: MacOS color mode
 	Converts a frame buffer video mode structure to a MacOS
 	vmodecmode pair.
 	Returns negative errno on error, or zero for success.
      Find the mac_mode with a matching resolution or failing that, the
      closest larger resolution. Skip modes with a shorter pixel clock period.
	
	  Having found a good resolution, find the matching pixel clock
	  or failing that, the closest longer pixel clock period.
 	mac_map_monitor_sense - Convert monitor sense to vmode
 	@sense: Macintosh monitor sense number
 	Converts a Macintosh monitor sense number to a MacOS
 	vmode number.
 	Returns MacOS vmode video mode number.
 	mac_find_mode - find a video mode
 	@var: frame buffer user defined part of display
 	@info: frame buffer info structure
 	@mode_option: video mode name (see mac_modedb[])
 	@default_bpp: default color depth in bits per pixel
 	Finds a suitable video mode.  Tries to set mode specified
 	by @mode_option.  If the name of the wanted mode begins with
 	'mac', the Mac video mode database will be used, otherwise it
 	will fall back to the standard video mode database.
 	Note: Function marked as __init and can only be used during
 	system boot.
 	Returns error code from fb_find_mode (see fb_find_mode
 	function).
 SPDX-License-Identifier: GPL-2.0-only
 linuxdriversvideos3c-fb.c
  Copyright 2008 Openmoko Inc.
  Copyright 2008-2010 Simtec Electronics
       Ben Dooks <ben@simtec.co.uk>
       http:armlinux.simtec.co.uk
  Samsung SoC Framebuffer driver
 This driver will export a number of framebuffer interfaces depending
  on the configuration passed in via the platform data. Each fb instance
  maps to a hardware window. Currently there is no support for runtime
  setting of the alpha-blending functions that each window has, so only
  window 0 is actually useful.
  Window 0 is treated specially, it is used for the basis of the LCD
  output timings and as the control for the output power-down state.
 note, the previous use of <machregs-fb.h> to get platform specific data
  has been replaced by using the platform device name to pick the correct
  configuration data for the system.
 FB_S3C_DEBUG_REGWRITE 
 irq_flags bits 
  struct s3c_fb_variant - fb variant information
  @is_2443: Set if S3C2443S3C2416 style hardware.
  @nr_windows: The number of windows.
  @vidtcon: The base for the VIDTCONx registers
  @wincon: The base for the WINxCON registers.
  @winmap: The base for the WINxMAP registers.
  @keycon: The abse for the WxKEYCON registers.
  @buf_start: Offset of buffer start registers.
  @buf_size: Offset of buffer size registers.
  @buf_end: Offset of buffer end registers.
  @osd: The base for the OSD registers.
  @osd_stride: stride of osd
  @palette: Address of palette memory, or 0 if none.
  @has_prtcon: Set if has PRTCON register.
  @has_shadowcon: Set if has SHADOWCON register.
  @has_blendcon: Set if has BLENDCON register.
  @has_clksel: Set if VIDCON0 register has CLKSEL bit.
  @has_fixvclk: Set if VIDCON1 register has FIXVCLK bits.
  struct s3c_fb_win_variant
  @has_osd_c: Set if has OSD C register.
  @has_osd_d: Set if has OSD D register.
  @has_osd_alpha: Set if can change alpha transparency for a window.
  @palette_sz: Size of palette in entries.
  @palette_16bpp: Set if palette is 16bits wide.
  @osd_size_off: If != 0, supports setting up OSD for a window; the appropriate
                 register is located at the given offset from OSD_BASE.
  @valid_bpp: 1 bit per BPP setting to show valid bits-per-pixel.
  valid_bpp bit x is set if (x+1)BPP is supported.
  struct s3c_fb_driverdata - per-device type driver data for init time.
  @variant: The variant information for this driver.
  @win: The window information for each window.
  struct s3c_fb_palette - palette information
  @r: Red bitfield.
  @g: Green bitfield.
  @b: Blue bitfield.
  @a: Alpha bitfield.
  struct s3c_fb_win - per window private data for each framebuffer.
  @windata: The platform data supplied for the window configuration.
  @parent: The hardware that this window is part of.
  @fbinfo: Pointer pack to the framebuffer info for this window.
  @variant: The variant information for this window.
  @palette_buffer: Buffercache to hold palette entries.
  @pseudo_palette: For use in TRUECOLOUR modes for entries 0..15
  @index: The window number of this window.
  @palette: The bitfields for changing rgb into a hardware palette entry.
  struct s3c_fb_vsync - vsync information
  @wait:	a queue for processes waiting for vsync
  @count:	vsync interrupt count
  struct s3c_fb - overall hardware state of the hardware
  @slock: The spinlock protection for this data structure.
  @dev: The device that we bound to, for printing, etc.
  @bus_clk: The clk (hclk) feeding our interface and possibly pixclk.
  @lcd_clk: The clk (sclk) feeding pixclk.
  @regs: The mapped hardware registers.
  @variant: Variant information for this hardware.
  @enabled: A bitmask of enabled hardware windows.
  @output_on: Flag if the physical output is enabled.
  @pdata: The platform configuration data passed with the device.
  @windows: The hardware windows that have been claimed.
  @irq_no: IRQ line number
  @irq_flags: irq flags
  @vsync_info: VSYNC-related information (count, queues...)
  s3c_fb_validate_win_bpp - validate the bits-per-pixel for this mode.
  @win: The device window.
  @bpp: The bit depth.
  s3c_fb_check_var() - framebuffer layer request to verify a given mode.
  @var: The screen information to verify.
  @info: The framebuffer device.
  Framebuffer layer call to verify the given information and allow us to
  update various information depending on the hardware capabilities.
 always ensure these are zero, for drop through cases below 
 non palletised, A:1,R:2,G:3,B:2 mode 
 666 with one bit alphatransparency 
 666 format 
 16 bpp, 565 format 
 our 24bpp is unpacked, so 32bpp 
  s3c_fb_calc_pixclk() - calculate the divider to create the pixel clock.
  @sfb: The hardware state.
  @pixclk: The pixel clock wanted, in picoseconds.
  Given the specified pixel clock, work out the necessary divider to get
  close to the output frequency.
  s3c_fb_align_word() - align pixel count to word boundary
  @bpp: The number of bits per pixel
  @pix: The value to be aligned.
  Align the given pixel count so that it will start on an 32bit word
  boundary.
  vidosd_set_size() - set OSD size for a window
  @win: the window to set OSD size for
  @size: OSD size register value
 OSD can be set up if osd_size_off != 0 for this window 
  vidosd_set_alpha() - set alpha transparency for a window
  @win: the window to set OSD size for
  @alpha: alpha register value
  shadow_protect_win() - disable updating values from shadow registers at vsync
  @win: window to protect registers for
  @protect: 1 to protect (disable updates)
  s3c_fb_enable() - Set the state of the main LCD output
  @sfb: The main framebuffer state.
  @enable: The state to set.
		 see the note in the framebuffer datasheet about
		  why you cannot take both of these bits down at the
  s3c_fb_set_par() - framebuffer request to set new framebuffer state.
  @info: The framebuffer to change.
  Framebuffer layer request to set a new mode for the specified framebuffer
 disable the window whilst we update it 
 write the buffer address 
 start and end registers stride is 8 
 write 'OSD' registers to control position of framebuffer 
 Enable DMA channel for this window 
	 note, since we have to round up the bits-per-pixel, we end up
	  relying on the bitfield information for rgba to work out
 Enable the colour keying for the window below this one 
 Set alpha value width 
  s3c_fb_update_palette() - set or schedule a palette update.
  @sfb: The hardware information.
  @win: The window being updated.
  @reg: The palette index being changed.
  @value: The computed palette value.
  Change the value of a palette register, either by directly writing to
  the palette (this requires the palette RAM to be disconnected from the
  hardware whilst this is in progress) or schedule the update for later.
  At the moment, since we have no VSYNC interrupt support, we simply set
  the palette entry directly.
  s3c_fb_setcolreg() - framebuffer layer request to change palette.
  @regno: The palette index to change.
  @red: The red field for the palette data.
  @green: The green field for the palette data.
  @blue: The blue field for the palette data.
  @transp: The transparency (alpha) field for the palette data.
  @info: The framebuffer being changed.
 true-colour, use pseudo-palette 
 unknown type 
  s3c_fb_blank() - blank or unblank the given window
  @blank_mode: The blank state from FB_BLANK_
  @info: The framebuffer to blank.
  Framebuffer layer request to change the power state.
 to FB_BLANK_NORMAL 
 disable the DMA and display 0x0 (black) 
	 Check the enabled state to see if we need to be running the
	  main LCD interface, as if there are no active windows then
	  it is highly likely that we also do not need to output
	  anything.
  s3c_fb_pan_display() - Pan the display.
  Note that the offsets can be written to the device at any time, as their
  values are latched at each vsync automatically. This also means that only
  the last call to this function will have any effect on next vsync, but
  there is no need to sleep waiting for it to prevent tearing.
  @var: The screen information to verify.
  @info: The framebuffer device.
 Offset in bytes to the start of the displayed area 
 X offset depends on the current bpp 
 Offset in bytes to the end of the displayed area 
	 Temporarily turn off per-vsync update from shadow registers until
  s3c_fb_enable_irq() - enable framebuffer interrupts
  @sfb: main hardware state
 IRQ disabled, enable it 
  s3c_fb_disable_irq() - disable framebuffer interrupts
  @sfb: main hardware state
 IRQ enabled, disable it 
 VSYNC interrupt, accept it 
	 We only support waiting for VSYNC for now, so it's safe
	  to always disable irqs here.
  s3c_fb_wait_for_vsync() - sleep until next VSYNC interrupt or timeout
  @sfb: main hardware state
  @crtc: head index.
  s3c_fb_missing_pixclock() - calculates pixel clock
  @mode: The video mode to change.
  Calculate the pixel clock when none has been given through platform data.
  s3c_fb_alloc_memory() - allocate display memory for framebuffer window
  @sfb: The base resources for the hardware.
  @win: The window to initialise memory for.
  Allocate memory for the given framebuffer.
  s3c_fb_free_memory() - free the display memory for the given window
  @sfb: The base resources for the hardware.
  @win: The window to free the display memory for.
  Free the display memory allocated by s3c_fb_alloc_memory().
  s3c_fb_release_win() - release resources for a framebuffer window.
  @sfb: The base resources for the hardware.
  @win: The window to cleanup the resources for.
  Release the resources that where claimed for the hardware window,
  such as the framebuffer instance and any memory claimed for it.
  s3c_fb_probe_win() - register an hardware window
  @sfb: The base resources for the hardware
  @win_no: The window number
  @variant: The variant information for this window.
  @res: Pointer to where to place the resultant window.
  Allocate and do the basic initialisation for one of the hardware's graphics
  windows.
 setup the rbg positions for the window's palette 
 Set RGB 5:6:5 as default 
 Set 8bpp or 8bpp and 1bit alpha 
 setup the initial video mode from the window 
 prepare to actually start the framebuffer 
 create initial colour map 
 run the check_var and set_par on our configuration. 
  s3c_fb_set_rgb_timing() - set video timing for rgb interface.
  @sfb: The base resources for the hardware.
  Set horizontal and vertical lcd rgb interface timing.
 1:1 clock 
  s3c_fb_clear_win() - clear hardware window registers.
  @sfb: The base resources for the hardware.
  @win: The window to process.
  Reset the specific window registers to a known state.
 setup gpio and output polarity controls 
 set video clock running at under-run 
 zero all windows before we do anything 
 initialise colour key controls 
 we have the register setup, start allocating framebuffers 
  s3c_fb_remove() - Cleanup on module finalisation
  @pdev: The platform device we are bound to.
  Shutdown and then release all the resources that the driver allocated
  on initialisation.
 use the blank function to push into power-down 
 setup gpio and output polarity controls 
 set video clock running at under-run 
 zero all windows before we do anything 
 restore framebuffers 
 setup gpio and output polarity controls 
 S3C2443S3C2416 style hardware 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2007 Google, Inc.
  Copyright (C) 2012 Intel, Inc.
 updates base 
   Freescale i.MX Frame Buffer device driver
   Copyright (C) 2004 Sascha Hauer, Pengutronix
    Based on acornfb.c Copyright (C) Russell King.
  This file is subject to the terms and conditions of the GNU General Public
  License.  See the file COPYING in the main directory of this archive for
  more details.
  Please direct your questions and comments on this driver to the following
  email address:
 	linux-arm-kernel@lists.arm.linux.org.uk
  Complain if VAR is out of range.
 bit fields in imxfb.h 
 bit fields in imxfb.h 
 bit fields in imxfb.h 
 Used fb-mode. Can be set on kernel command line, therefore file-static. 
  These are the bitfields for each
  display depth that we support.
	
	  These are the addresses we mapped
	  the framebuffer memory region to.
 sentinel 
 sentinel 
  Minimum X and Y resolutions
 Actually this really is 18bit support, the lowest 2 bits of each colour
  are unused in hardware. We claim to have 24bit support to make software
  like X work, which does not support 18bit.
	
	  If inverse mode was selected, invert all the colours
	  rather than the register number.  The register number
	  is what you poke into the framebuffer to produce the
	  colour you requested.
	
	  If greyscale is true, then we convert the RGB value
	  to greyscale no mater what visual we are using.
		
		  12 or 16-bit True Colour.  We encode the RGB value
		  according to the RGB bitfield information.
   imxfb_check_var():
     Round up in the following order: bits_per_pixel, xres,
     yres, xres_virtual, yres_virtual, xoffset, yoffset, grayscale,
     bitfields, horizontal timing, vertical timing.
 add sync polarities 
	
	  The LCDC AUS Mode Control Register does not exist on imx1.
	
	  Copy the RGB parameters for this display
	  from the machine specific parameters.
  imxfb_set_par():
 	Set the user defined part of the display for the specified console
		
		  Some people have weird ideas about wanting static
		  pseudocolor maps.  I suspect their user space
		  applications are broken.
 panning offset 0 (0 pixel offset)        
 disable hardware cursor 
	
	  RMCR_LCDC_EN_MX1 is present on i.MX1 only, but doesn't hurt
	  on other SoCs
  imxfb_activate_var():
 	Configures LCD Controller based on entries in var parameter.  Settings are
 	only written to the controller if changes were made.
 physical screen start address	    
 dmacr = 0 is no valid value, as we need DMA control marks. 
	
	  fsl,aus-mode is optional
		
		  imxfb does not support more modes, we choose only the native
		  mode.
	 Calculate maximum bytes used per pixel. In most cases this should
	
	  The LCDC controller does not have an enable bit. The
	  controller starts directly when the clocks are enabled.
	  If the clocks are enabled when the controller is not yet
	  programmed with proper register values (enabled at the
	  bootloader, for example) then it just goes into some undefined
	  state.
	  To avoid this issue, let's enable and disable LCDC IPG clock
	  so that we force some kind of 'reset' to the LCDC block.
	
	  This makes sure that our colour bitfield
	  descriptors are correctly initialised.
	
	  For modes > 8bpp, the color map is bypassed.
	  Therefore, 256 entries are enough.
  linuxdriversvideoq40fb.c -- Q40 frame buffer device
  Copyright (C) 2001
       Richard Zidlicky <rz@linux-m68k.org>
   This file is subject to the terms and conditions of the GNU General Public
   License. See the file COPYING in the main directory of this archive for
   more details.
       Set a single color register. The values supplied have a 16 bit
       magnitude.
       Return != 0 for invalid regno.
 mapped in q40config.c 
 not as module for now 
 SPDX-License-Identifier: GPL-2.0-only
  Frame buffer driver for the Carmine GPU.
  The driver configures the GPU as follows
  - FB0 is display 0 with unique memory area
  - FB1 is display 1 with unique memory area
  - both display use 32 bit colors
  The initial video mode can be supplied via two different ways:
  - as a string that is passed to fb_find_mode() (module option fb_mode_str)
  - as an integer that picks the video mode from carmine_modedb[] (module
    option fb_mode)
  If nothing is used than the initial video mode will be the
  CARMINEFB_DEFAULT_VIDEO_MODE member of the carmine_modedb[].
  Carminefb displays:
  0b000 None
  0b001 Display 0
  0b010 Display 1
 640x480 
 800x600 
 Set default cursor position 
 Set default display mode 
 Set default frame size to layer mode register 
 Set default pos and size 
 Set default origin address 
 Set default display address 
 Set default display position 
 Set default blend mode 
 default transparency mode 
 Set default read skip parameter 
	
	  display timing. Parameters are decreased by one because hardware
	  spec is 0 to (n - 1)
 clock 
 enable video output and layer 0 
 Initialize Carmine 
 Sets internal clock 
 Video signal output is turned off 
 Software reset 
 IO mode settings 
 DRAM initial sequence 
 Executes DLL reset 
 Initialize the write back register 
 Initialize the Kottos registers 
 Set DC offsets 
	 The memory area tends to be very large (256 MiB). Remap only what
	  is required for that largest resolution to avoid remaps at run
	  time
 disable clock, etc 
 in case we use only fb1 and not fb1 
 deactivate display(s) and switch clocks 
 SPDX-License-Identifier: GPL-2.0-or-later
  macfb.c: Generic framebuffer for Macs whose colourmapsmodes we
  don't know how to set.
  (c) 1999 David Huggins-Daines <dhd@debian.org>
  Primarily based on vesafb.c, by Gerd Knorr
  (c) 1998 Gerd Knorr <kraxel@cs.tu-berlin.de>
  Also uses information and code from:
  The original macfb.c from Linuxmac68k 2.0, by Alan Cox, Juergen
  Mellinger, Mikael Forselius, Michael Schmitz, and others.
  valkyriefb.c, by Martin Costabel, Kevin Schoedel, Barry Nathan, Dan
  Jacobowitz, Paul Mackerras, Fabio Riccardi, and Geert Uytterhoeven.
  The VideoToolbox "Bugs" web page at
  http:rajsky.psych.nyu.eduTipsVideoBugs.html
 Common DAC base address for the LC, RBV, Valkyrie, and IIvx 
 Some addresses for the DAFB 
 Address for the built-in Civic framebuffer in Quadra AVs 
 GSC (Gray Scale Controller) base address 
 CSC (Color Screen Controller) base address 
 word aligned 
 word aligned 
 a guess as to purpose 
 OFFSET: 0x00 
 OFFSET: 0x10 
 OFFSET: 0x20 
 OFFSET: 0x28 
 OFFSET: 0x2C 
 0x40 
 0x42 
 0x46 
 The registers in these structs are in NuBus slot space 
 TFBClutWDataReg, offset 0x90018 
 TFBClutAddrReg, offset 0x9001C 
 width in mm at 72 dpi 
  Unlike the Valkyrie, the DAFB cannot set individual colormap
  registers.  Therefore, we do what the MacOS driver does (no
  kidding!) and simply set them one by one until we hit the one we
  want.
	
	  fbdev will set an entire colourmap, but X won't.  Hopefully
	  this should accommodate both of them
 Stab in the dark trying to reset the CLUT pointer 
 Loop until we get to the register we want 
 V8 and Brazil seem to use the same DAC.  Sonora does as well. 
	 On these chips, the CLUT register numbers are spread out
	  across the register space.  Thus:
	  In 8bpp, all regnos are valid.
	  In 4bpp, the regnos are 0x0f, 0x1f, 0x2f, etc, etc
	  In 2bpp, the regnos are 0x3f, 0x7f, 0xbf, 0xff
 send one color channel at a time 
 RAM-Based Video 
	 From the VideoToolbox driver.  Seems to be saying that
	  regno #254 and #255 are the important ones for 1-bit color,
	  regno #252-255 are the important ones for 2-bit color, etc.
 reset clut? (VideoToolbox sez "not necessary") 
 tell clut which address to use. 
 send one color channel at a time. 
 Macintosh Display Card (824) 
 the nop's are there to order writes. 
 Toby frame buffer 
 Jet frame buffer 
  Civic framebuffer -- Quadra AV built-in video.  A chip
  called Sebastian holds the actual color palettes, and
  apparently, there are two different banks of 512K RAM
  which can act as separate framebuffers for doing video
  input and viewing the screen at the same time!  The 840AV
  Can add another 1MB RAM to give the two framebuffers
  1MB RAM apiece.
 Set the register address 
	
	  Grab a status word and do some checking;
	  Then finally write the clut!
  The CSC is the framebuffer on the PowerBook 190 series
  (and the 5300 too, but that's a PowerMac). This function
  brought to you in part by the ECSC driver for MkLinux.
 mklinux on PB 5300 waits for 260 ns 
	
	  Set a single color register. The values supplied are
	  already rounded down to the hardware's capabilities
	  (according to the entries in the `var' structure).
	  Return non-zero for invalid regno.
 We shouldn't get here 
 1:5:5:5 
 0:5:6:5 
		
		  24-bit colour almost doesn't exist on 68k Macs --
		  https:support.apple.comkbTA28634 (Old Article: 10992)
 enable experimental CLUT code 
 See valkyriefb.c 
 Note: physical address (since 2.1.127) 
	
	  This is actually redundant with the initial mappings.
	  However, there are some non-obvious aspects to the way
	  those mappings are set up, so this is in fact the safest
	  way to ensure that this driver will work on every possible Mac
 Fill in the available video resolution 
 Some dummy values for timing to make fbset happy 
		
		  Should actually be FB_VISUAL_DIRECTCOLOR, but this
		  works too
	
	  We take a wild guess that if the video physical address is
	  in nubus slot space, that the nubus card is driving video.
	  Penguin really ought to tell us whether we are using internal
	  video or not.
	  Hopefully we only find one of them.  Otherwise our NuBus
	  code is really broken :-)
 If it's not a NuBus card, it must be internal video 
		
		  DAFB Quadras
		  Note: these first four have the v7 DAFB, which is
		  known to be rather unlike the ones used in the
		  other models
		
		  LC II uses the V8 framebuffer
		
		  IIvi, IIvx use the "Brazil" framebuffer (which is
		  very much like the V8, it seems, and probably uses
		  the same DAC)
		
		  LC III (and friends) use the Sonora framebuffer
		  Incidentally this is also used in the non-AV models
		  of the x100 PowerMacs
		  These do in fact seem to use the same DAC interface
		  as the LC II.
		
		  IIci and IIsi use the infamous RBV chip
		  (the IIsi is just a rebadged and crippled
		  IIci in a different case, BTW)
		
		  AVs use the Civic framebuffer
		
		  Assorted weirdos
		  We think this may be like the LC II
		
		  We think this may be like the LC II
		
		  And we do mean "weirdos"
		
		  These don't have colour, so no need to worry
		
		  Powerbooks are particularly difficult.  Many of
		  them have separate framebuffers for external and
		  internal video, which is admittedly pretty cool,
		  but will be a bit of a headache to support here.
		  Also, many of them are grayscale, and we don't
		  really support that.
		
		  Slot 0 ROM says TIM. No external video. B&W.
		
		  Internal is GSC, External (if present) is ViSC
 no external video 
		
		  Internal is TIM, External is ViSC
		
		  Internal is CSC, External is Keystone+Ariel.
 external video is optional 
 SPDX-License-Identifier: GPL-2.0-only
 linuxdriversvideosm501fb.c
  Copyright (c) 2006 Simtec Electronics
 	Vincent Sanders <vince@simtec.co.uk>
 	Ben Dooks <ben@simtec.co.uk>
  Framebuffer driver for the Silicon Motion SM501
 SM501 memory address.
  This structure is used to track memory usage within the SM501 framebuffer
  allocation. The sm_addr field is stored as an offset as it is often used
  against both the physical and mapped addresses.
 offset from base of sm501 fb. 
 private data that is shared between all frambuffers 
 fb info for both heads 
 framebuffer resource 
 registers resource 
 2d registers resource 
 our platform data 
 pm: crt ctrl save 
 set to swap rgb=>bgr 
 remapped registers 
 2d remapped registers 
 remapped framebuffer 
 length of remapped region 
 per-framebuffer private data 
 Helper functions 
 sm501fb_sync_regs()
  This call is mainly for PCI bus systems where we need to
  ensure that any writes to the bus are completed before the
  next phase, or after completing a function.
 sm501_alloc_mem
  This is an attempt to lay out memory for the two framebuffers and
  everything else
  |fbmem_res->start					       fbmem_res->end|
  |									     |
  |fb[0].fix.smem_start    |	      |fb[1].fix.smem_start    |     2K	     |
  |-> fb[0].fix.smem_len <-| spare   |-> fb[1].fix.smem_len <-|-> cursors <-|
  The "spare" space is for the 2d engine data
  the fixed is space for the cursors (2x1Kbyte)
  we need to allocate memory for the 2D acceleration engine
  command list and the data for the engine to deal with.
  - all allocations must be 128bit aligned
  - cursors are 64x64x2 bits (1Kbyte)
 adjust available memory. 
		 round down, some programs such as directfb do not draw
		  0,0 correctly unless the start is aligned to a page start.
		 check to see if we have panel memory allocated
 sm501fb_ps_to_hz
  Converts a period in picoseconds to Hz.
  Note, we try to keep this in Hz to minimise rounding with
  the limited PLL settings on the SM501.
 10^12  picosecond period gives frequency in Hz 
 sm501fb_hz_to_ps is identical to the opposite transform 
 sm501fb_setup_gamma
  Programs a linear 1.0 gamma ramp in case the gamma
  correction is enabled without programming anything else.
 set gamma values 
 Advance RGB by 1,1,1.
 sm501fb_check_var
  check common variables for both panel and crt
 check we can fit these values into the registers 
 hdisplay end and hsync start 
 vdisplay end and vsync start 
 hard limits of device 
 check our line length is going to be 128 bit aligned 
 check the virtual size 
 can cope with 8,16 or 32bpp 
 set rgb positions and validate bpp 
  sm501fb_check_var_crt():
  check the parameters for the CRT head, and either bring them
  back into range, or return -EINVAL.
 sm501fb_check_var_pnl():
  check the parameters for the CRT head, and either bring them
  back into range, or return -EINVAL.
 sm501fb_set_par_common
  set common registers for framebuffers
 pixelclock in Hz 
 pixelclock the 501 can achieve in Hz 
 stop compiler warnings 
 allocate fb memory within 501 
 set start of framebuffer to the screen 
 program CRT clock  
 update fb layer with actual clock used 
 sm501fb_set_par_geometry
  set the geometry registers for specified framebuffer.
 set framebuffer width and display width 
 program horizontal total 
 program horizontal sync 
 program vertical total 
 program vertical sync 
 sm501fb_pan_crt
  pan the CRT display output within an virtual framebuffer
 sm501fb_pan_pnl
  pan the panel display output within an virtual framebuffer
 sm501fb_set_par_crt
  Set the CRT video mode from the fb_info structure
 control register 
 activate new configuration 
 enable CRT DAC - note 0 is on!
 set the sync polarities before we check data source  
 the head is displaying panel data... 
 fill if >3 free slots 
 CRT displays CRT data 
 enable CRT timing 
 enable CRT plane 
 enable panel power 
 FPVDDEN 
 DATA 
 VBIASEN 
 disable panel power 
 sm501fb_set_par_pnl
  Set the panel video mode from the fb_info structure
 activate this new configuration 
 update control register 
 fill if >3 free slots 
 panel plane top left and bottom right location 
 program panel control register 
 enable PANEL timing 
 enable PANEL gfx plane 
 ensure the panel interface is not tristated at this point 
 power the panel up 
 chan_to_field
  convert a colour value into a field position
  from pxafb.c
 sm501fb_setcolreg
  set the colour mapping for modes that support palettised data
 true-colour, use pseuo-palette 
 unknown type 
 sm501fb_blank_pnl
  Blank or un-blank the panel interface
 sm501fb_blank_crt
  Blank or un-blank the crt interface
 sm501fb_cursor
  set or change the hardware cursor parameters
 check not being asked to exceed capabilities 
 set data 
y += cursor->image.height;
		 SM501 cursor is a two bpp 64x64 bitmap this routine
		  clears it to transparent then combines the cursor
		  shape plane with the colour plane to set the
 ensure cursor data flushed 
 sm501fb_crtsrc_show
  device attribute code to show where the crt output is sourced from
 sm501fb_crtsrc_show
  device attribute code to set where the crt output is sourced from
 Prepare the device_attr for registration with sysfs later 
 sm501fb_show_regs
  show the primary sm501 registers
 sm501fb_debug_show_crt
  show the crt control and cursor registers
 sm501fb_debug_show_pnl
  show the panel control and cursor registers
 acceleration operations 
 wait for the 2d engine to be ready 
 source clip 
 source Area not within virtual screen, skipping 
 dest clip 
 Destination Area not within virtual screen, skipping 
 set the base addresses 
 set the window width 
 set window stride 
 set data format 
 2d compare mask 
 2d mask 
 source and destination x y 
 wh 
 do area move 
 Rectangle not within virtual screen, skipping 
 set the base addresses 
 set the window width 
 set window stride 
 set data format 
 2d compare mask 
 2d mask 
 colour 
 x y 
 wh 
 do rectangle fill 
 sm501_init_cursor
  initialise hw cursor parameters
 initialise the colour registers 
 sm501fb_info_start
  fills the par structure claiming resources and remapping etc.
 we currently do not use the IRQ 
	 allocate, reserve and remap resources for display
	 allocate, reserve and remap resources for 2d
 allocate, reserve resources for framebuffer 
 clear framebuffer memory - avoids garbage data on unused fb 
 clear palette ram - undefined at power on 
 enable display controller 
 enable 2d controller 
 setup cursors 
 everything is setup 
 disable display controller 
 ensure we set the correct source register 
 stop compiler warnings 
 check to see if our routing allows this 
 update ops dependent on what we've been passed 
 fixed data 
 screenmode 
 Now build modedb from EDID 
 TODO read the mode from the current display 
 edid_data is no longer needed, free it 
 initialise and set the palette 
 default platform data if none is supplied (ie, PCI device) 
 Do not initialise if we've not been given any platform data 
 Free up anything allocated by sm501fb_init_fb 
 allocate our framebuffers 
 Get EDID 
 probe for the presence of each panel 
 get the resources for both of the framebuffers 
 we registered, return ok 
   Cleanup
 blank the relevant interface to ensure unit power minimised 
 tell consolefb driver we are suspending 
 backup copies in case chip is powered down over suspend 
 re-activate the configuration 
 restore the data 
 suspend and resume support 
 store crt control to resume with 
 turn off the clocks, in case the device is not powered down 
 restore the items we want to be saved for crt control 
 SPDX-License-Identifier: GPL-2.0-only
  Simplest possible simple frame-buffer driver, as a platform device
  Copyright (c) 2013, Stephen Warren
  Based on q40fb.c, which was:
  Copyright (C) 2001 Richard Zidlicky <rz@linux-m68k.org>
  Also based on offb.c, which was:
  Copyright (C) 1997 Geert Uytterhoeven
  Copyright (C) 1996 Paul Mackerras
  Clock handling code.
  Here we handle the clocks property of our "simple-framebuffer" dt node.
  This is necessary so that we can make sure that any clocks needed by
  the display engine that the bootloader set up for us (and for which it
  provided a simplefb dt node), stay up, for the life of the simplefb
  driver.
  When the driver unloads, we cleanly disable, and then release the clocks.
  We only complain about errors here, no action is taken as the most likely
  error can only happen due to a mismatch between the bootloader which set
  up simplefb, and the clock definitions in the device tree. Chances are
  that there are no adverse effects, and if there are, a clean teardown of
  the fb probe will not help us much either. So just complain and carry on,
  and hope that the user actually gets a working fb at the end of things.
  Regulator handling code.
  Here we handle the num-supplies and vin-supply properties of our
  "simple-framebuffer" dt node. This is necessary so that we can make sure
  that any regulators needed by the display hardware that the bootloader
  set up for us (and for which it provided a simplefb dt node), stay up,
  for the life of the simplefb driver.
  When the driver unloads, we cleanly disable, and then release the
  regulators.
  We only complain about errors here, no action is taken as the most likely
  error can only happen due to a mismatch between the bootloader which set
  up simplefb, and the regulator definitions in the device tree. Chances are
  that there are no adverse effects, and if there are, a clean teardown of
  the fb probe will not help us much either. So just complain and carry on,
  and hope that the user actually gets a working fb at the end of things.
 Count the number of regulator supplies 
 Get all the regulators 
 32 is max size of property name 
 Enable all the regulators 
	
	  Generic drivers must not be registered if a framebuffer exists.
	  If a native driver was probed, the display hardware was already
	  taken and attempting to use the system framebuffer is dangerous.
  Xen para-virtual frame buffer device
  Copyright (C) 2005-2006 Anthony Liguori <aliguori@us.ibm.com>
  Copyright (C) 2006-2008 Red Hat, Inc., Markus Armbruster <armbru@redhat.com>
   Based on linuxdriversvideoq40fb.c
   This file is subject to the terms and conditions of the GNU General Public
   License. See the file COPYING in the main directory of this archive for
   more details.
  TODO:
  Switch to grant tables when they become capable of dealing with the
  frame buffer.
	int			x1, y1, x2, y2;	 dirty rectangle,
 XENFB_TYPE_UPDATE wanted 
 XENFB_TYPE_RESIZE ok 
 protected by resize_lock 
 ditto 
 caller ensures !xenfb_queue_full() 
 ensure ring space available 
 ensure ring contents visible 
 caller ensures !xenfb_queue_full() 
 caller ensures !xenfb_queue_full() 
 Combine with dirty rectangle: 
 Can't send right now, stash it in the dirty rectangle 
 Clear dirty rectangle: 
 Can't resize past initial width and height 
	
	  No in events recognized, simply ignore them all.
	  If you need to recognize some, see xen-kbdfront's
	  input_handler() for how to do that.
 Flush dirty rectangle: 
 Limit kernel param videoram amount to what is in xenstore 
 If requested res does not fit in available memory, use default 
 set up shared page 
 abusing framebuffer_alloc() to allocate pseudo_palette 
 complete the abuse: 
 don't print again 
 Prevent xenfb refresh 
		
		  Work around xenbus race condition: If backend goes
		  through InitWait to Connected fast enough, we can
		  get Connected twice here.
 no InitWait seen yet, fudge it 
 Missed the backend's CLOSING state 
 Nothing to do if running in dom0. 
 SPDX-License-Identifier: GPL-2.0-only
   linuxdriversvideowmt_ge_rops.c
   Accelerators for raster operations using WonderMedia Graphics Engine
   Copyright (C) 2010 Alexey Charkov <alchark@gmail.com>
 Pattern 0 color 
 Only one ROP engine is presently supported. 
 sentinel  }
   linuxdriversvideoiplan2p4.c -- Low level frame buffer operations for
 				      interleaved bitplanes à la Atari (4
 				      planes, 2 bytes interleave)
 	Created 5 Apr 1997 by Geert Uytterhoeven
   This file is subject to the terms and conditions of the GNU General Public
   License.  See the file COPYING in the main directory of this archive for
   more details.
	  bmove() has to distinguish two major cases: If both, source and
	   destination, start at even addresses or both are at odd
	   addresses, just the first odd and last even column (if present)
	   require special treatment (memmove_col()). The rest between
	   then can be copied by normal operations, because all adjacent
	   bytes are affected and are to be stored in the same order.
	     The pathological case is when the move should go from an odd
	   address to an even or vice versa. Since the bytes in the plane
	   words must be assembled in new order, it seems wisest to make
	   all movements by memmove_col().
 odd->odd or even->even 
 odd->even or even->odd 
  BRIEF MODULE DESCRIPTION
 	Au1100 LCD Driver.
  Rewritten for 2.6 by Embedded Alley Solutions
  	<source@embeddedalley.com>, based on submissions by
   	Karl Lessard <klessard@sunrisetelecom.com>
   	<c.pellegrin@exadron.com>
  PM support added by Rodolfo Giometti <giometti@linux.it>
  Cursor enabledisable by Rodolfo Giometti <giometti@linux.it>
  Copyright 2002 MontaVista Software
  Author: MontaVista Software, Inc.
 		ppopov@mvista.com or source@mvista.com
  Copyright 2002 Alchemy Semiconductor
  Author: Alchemy Semiconductor
  Based on:
  linuxdriversvideoskeletonfb.c -- Skeleton for a frame buffer device
   Created 28 Dec 1997 by Geert Uytterhoeven
   This program is free software; you can redistribute	 it andor modify it
   under  the terms of	 the GNU General  Public License as published by the
   Free Software Foundation;  either version 2 of the	License, or (at your
   option) any later version.
   THIS  SOFTWARE  IS PROVIDED	  ``AS	IS'' AND   ANY	EXPRESS OR IMPLIED
   WARRANTIES,	  INCLUDING, BUT NOT  LIMITED  TO, THE IMPLIED WARRANTIES OF
   MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN
   NO	EVENT  SHALL   THE AUTHOR  BE	 LIABLE FOR ANY	  DIRECT, INDIRECT,
   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   NOT LIMITED	  TO, PROCUREMENT OF  SUBSTITUTE GOODS	OR SERVICES; LOSS OF
   USE, DATA,	OR PROFITS; OR	BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
   ANY THEORY OF LIABILITY, WHETHER IN	 CONTRACT, STRICT LIABILITY, OR TORT
   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
   THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   You should have received a copy of the  GNU General Public License along
   with this program; if not, write  to the Free Software Foundation, Inc.,
   675 Mass Ave, Cambridge, MA 02139, USA.
 Bitfields format supported by the controller. Note that the order of formats
  SHOULD be the same as in the LCD_CONTROL_SBPPF field, so we can retrieve the
  right pixel format by doing rgb_bitfields[LCD_CONTROL_SBPPF_XXX >> LCD_CONTROL_SBPPF]
     Red, 	   Green, 	 Blue, 	     Transp   
 The last is used to describe 12bpp format 
 fb_blank
  Blank the screen. Depending on the mode, the screen will be
  activated with the backlight color, or desactivated
 Turn on panel 
 drain writebuffer 
 Turn off panel 
 drain writebuffer 
  Set hardware with var settings. This will enable the controller with a specific
  mode, normally validated with the fb_check_var method
 Update var-dependent FB info 
 palettized 
 non-palettized 
 depth=16 
 mono 
 Determine BPP mode and format 
		 Second panel display seconf half of screen if possible,
 180 ) {
 should be divisable by 8 
 Resume controller 
 fb_setcolreg
  Set color in LCD palette.
 Convert color to grayscale 
 Place color in the pseudopalette 
 COLOR TFT PALLETTIZED (use RGB 565) 
 COLOR STN MODE 
 MONOCHROME MODE 
 fb_pan_display
  Pan display in x andor y as specified
 No support for X panning for now! 
 TODO: Wait for current frame to finished 
 fb_mmap
  Map video memory in user space. We don't use the generic fb_mmap method mainly
  to allow the use of the TLB streaming flag (CCA=6)
CCA=6
-------------------------------------------------------------------------
 Panel option 
 Unsupported option 
 Allocate new device private 
 Allocate region for our registers and map them 
 Allocate the framebuffer to the maximum screen size  nbr of video buffers 
 load the panel info into the var struct 
 Set hw registers 
 Register new framebuffer 
 Clean up all probe data 
 Blank the LCD 
 Unblank the LCD 
  linuxdriversvideos3fb.c -- Frame buffer device driver for S3 TrioVirge
  Copyright (c) 2006-2007 Ondrej Zajicek <santiago@crfreenet.org>
  This file is subject to the terms and conditions of the GNU General Public
  License.  See the file COPYING in the main directory of this archive for
  more details.
  Code is based on David Boucher's viafb (http:davesdomain.org.ukviafb)
  which is based on the code of neofb.
 Why should fb driver call console functions? because console_lock() 
 ------------------------------------------------------------------------- 
 CRT timing register sets 
 set 0x43 bit 2 to 0 
 ------------------------------------------------------------------------- 
 Module parameters 
 ------------------------------------------------------------------------- 
 Trio 3D1X2X 
 all other chips 
	
	  some Virge cards have external MUX to switch chip I2C bus between
	  DDC and extension pins - switch it do DDC
	vga_wseq(par->state.vgabase, 0x08, 0x06); - not needed, already unlocked 
 some Virge need this or the DDC is ignored 
 CONFIG_FB_S3_DDC 
 ------------------------------------------------------------------------- 
 Set font in S3 fast text mode 
 ------------------------------------------------------------------------- 
 image data is MSB-first, fb structure is MSB-first too 
 s3fb_iplan_imageblit silently assumes that almost everything is 8-pixel aligned 
 s3fb_iplan_fillrect silently assumes that almost everything is 8-pixel aligned 
 image data is MSB-first, fb structure is high-nibble-in-low-byte-first 
 s3fb_cfb4_imageblit silently assumes that almost everything is 8-pixel aligned 
 ------------------------------------------------------------------------- 
 Set VGA misc register  
 Set S3 clock registers 
 n and two bits of r 
 remaining highest bit of r 
 Activate clock - write 0, 1, 0 to seq15 bit 5 
 | 0x80; 
 Open framebuffer 
 Close framebuffer 
 Validate passed in var 
 Find appropriate format 
	 32bpp mode is not supported on VIRGE VX,
 Do not allow to have real resoulution larger than virtual 
 Round up xres_virtual to have proper alignment of lines 
 Check whether have enough memory 
 Set video mode from par 
 in 4bpp supports 8p wide tiles only, any tiles otherwise 
 supports 8x16 tiles only 
 Unlock registers 
 Blank screen and turn off sync 
 Set default values 
 S3 specific initialization 
 enable linear framebuffer 
 enable sequencer access to framebuffer above 256 kB 
	svga_wcrt_mask(par->state.vgabase, 0x33, 0x08, 0x08);  
	svga_wcrt_mask(par->state.vgabase, 0x43, 0x01, 0x01);  
 no DDR ?	
 no DDR ?	
 Clear strange HSlen bits 
	svga_wcrt_mask(par->state.vgabase, 0x58, 0x03, 0x03); 
	svga_wcrt_mask(par->state.vgabase, 0x53, 0x12, 0x13);  
	svga_wcrt_mask(par->state.vgabase, 0x40, 0x08, 0x08);  
 Set the offset register 
 M parameter 
 N parameter 
 L parameter 
 L parameter 
 Disable hardware graphics cursor 
 Disable Streams engine 
 S3 virge DX hack 
 S3 virge VX hack 
 screen remains blank sometimes without this 
 enable Data Transfer Position Control (DTPC) 
 Set mode-specific register values 
 Set additional registers like in 8-bit mode 
 Disable enhanced mode 
 Set additional registers like in 8-bit mode 
 disable enhanced mode 
 Set additional registers like in 8-bit mode 
 disable enhanced mode 
 VIRGE VX case 
 Set interlaced mode startend register 
 Set Data Transfer Position 
 + 2 is needed for VirgeVX, does no harm on other cards 
 Device and screen back on 
 Set a colour register 
 Set the display blanking state 
 Pan the display 
 Calculate the offset 
 Set the offset 
 ------------------------------------------------------------------------- 
 Frame buffer operations 
 ------------------------------------------------------------------------- 
 PCI probe 
 Ignore secondary VGA device because there is no VGA arbitration 
 Allocate and fill driver data structure 
 Prepare PCI device 
 Map physical IO memory address into kernel space 
 Unlock regs 
 Identify chip type 
 Find how many physical memory there is on card 
 0x36 register is accessible even if other registers are locked 
 8MB -- only 4MB usable for display 
 4MB with 32-bit bus 
 4MB 
 2MB on 365 Trio3D 
 2MB 
 4MB 
 2MB 
 2MB 
 4MB 
 6MB 
 8MB 
 off-screen memory 
 4MB 
 2MB 
 Find MCLK frequency 
 Restore locks 
 Enable MMIO if needed 
 enable MMIO 
 fill all other info->var's fields 
 Prepare startup mode 
 maximize virtual vertical size for fast scrolling 
 Record a reference to the driver data 
 Error handling 
	pci_disable_device(dev); 
 PCI remove 
		pci_disable_device(dev); 
 PCI suspend 
 PCI resume 
 List of boards that we are trying to support 
 Parse user specified options 
 Cleanup 
 Driver Initialisation 
 ------------------------------------------------------------------------- 
 Modularization 
 sunxvr500.c: Sun 3DLABS XVR-500 Expert3D fb driver for sparc64 systems
  License: GPL
  Copyright (C) 2007 David S. Miller (davem@davemloft.net)
 XXX This device has a 'dev-comm' property which apparently is
  XXX a pointer into the openfirmware's address space which is
  XXX a shared area the kernel driver can use to keep OBP
  XXX informed about the current resolution setting.  The idea
  XXX is that the kernel can change resolutions, and as long
  XXX as the values in the 'dev-comm' area are accurate then
  XXX OBP can still render text properly to the console.
  XXX
  XXX I'm still working out the layout of this and whether there
  XXX are any signatures we need to look for etc.
 My XVR-500 comes up, at 1280x768 and a FB base register value of
  0x04000000, the following video layout register values:
  RAMDAC_VID_WH	0x03ff04ff
  RAMDAC_VID_CFG	0x1a0b0088
  RAMDAC_VID_32FB_0	0x04000000
  RAMDAC_VID_32FB_1	0x04800000
  RAMDAC_VID_8FB_0	0x05000000
  RAMDAC_VID_8FB_1	0x05200000
  RAMDAC_VID_XXXFB	0x05400000
  RAMDAC_VID_YYYFB	0x05c00000
  RAMDAC_VID_ZZZFB	0x05e00000
 Video layout registers 
 (height-1)<<16 | (width-1) 
 0x1a000088|(linesz_log2<<16) 
 PCI base 32bpp FB buffer 0 
 PCI base 32bpp FB buffer 1 
 PCI base 8bpp FB buffer 0 
 PCI base 8bpp FB buffer 1 
 PCI base of XXX FB 
 PCI base of YYY FB 
 PCI base of ZZZ FB 
 CLUT registers 
 XXX This is a bit of a hack.  I can't figure out exactly how the
  XXX two 8bpp areas of the framebuffer work.  I imagine there is
  XXX a WID attribute somewhere else in the framebuffer which tells
  XXX the ramdac which of the two 8bpp framebuffer regions to take
  XXX the pixel from.  So, for now, render into both regions to make
  XXX sure the pixel shows up.
 Fill fix common fields 
	 Read the PCI base register of the frame buffer, which we
	  need in order to interpret the RAMDAC_VID_FB values in
	  the ramdac correctly.
  linuxdriversvideon411.c -- Platform device for N411 EPD kit
  Copyright (C) 2008, Jaya Kumar
  This file is subject to the terms and conditions of the GNU General Public
  License. See the file COPYING in the main directory of this archive for
  more details.
  Layout is based on skeletonfb.c by James Simmons and Geert Uytterhoeven.
  This driver is written to be used with the Hecuba display controller
  board, and tested with the EInk 800x600 display in 1 bit mode.
  The interface between Hecuba and the host is TTL based GPIO. The
  GPIO requirements are 8 writable data lines and 6 lines for control.
  Only 4 of the controls are actually used here but 6 for future use.
  The driver requires the IO addresses for data and control GPIO at
  load time. It is also possible to use this display with a standard
  PC parallel port.
  General notes:
  - User must set dio_addr=0xIOADDR cio_addr=0xIOADDR c2io_addr=0xIOADDR
	 for init, we want the following setup to be set:
	WUP = lo
	ACK = hi
	DS = hi
	RW = hi
	CD = lo
 write WUP to lo, DS to hi, RW to hi, CD to lo 
 check ACK is not lo 
 have to wait while display resets 
 if we were told to splash the screen, we just clear it 
 request our platform independent driver 
 this _add binds hecubafb to n411. hecubafb refcounts n411 
 SPDX-License-Identifier: GPL-2.0-only
 p9100.c: P9100 frame buffer driver
  Copyright (C) 2003, 2006 David S. Miller (davem@davemloft.net)
  Copyright 1999 Derrick J Brashear (shadow@dementia.org)
  Driver layout based loosely on tgafb.c, see that file for credits.
  Local functions.
   Frame buffer operations
 P9100 control registers 
 P9100 command registers 
 P9100 framebuffer memory 
 3 bits: 2=8bpp 3=16bpp 5=32bpp 7=24bpp 
 0 = off, 1 = on 
 Registers for the system control 
 Registers for the video control 
 Registers for the video control 
 Registers for IBM RGB528 Palette 
       p9100_setcolreg - Optional function. Sets a color register.
       @regno: boolean, 0 copy local, 1 get_user() function
       @red: frame buffer colormap structure
       @green: The green value which can be up to 16 bits wide
       @blue:  The blue value which can be up to 16 bits wide.
       @transp: If supported the alpha value which can be up to 16 bits wide.
       @info: frame buffer info structure
       p9100_blank - Optional function.  Blanks the display.
       @blank: the blank mode we want.
       @info: frame buffer structure that represents a single frame buffer
 Unblanking 
 Normal blanking 
 VESA blank (vsync off) 
 VESA blank (hsync off) 
 Poweroff 
 Make it look like a cg3. 
   Initialisation
 This is the framebuffer and the only resource apps can mmap.  
   linuxdriversvideoamba-clcd.c
  Copyright (C) 2001 ARM Limited, by David A Rusling
  Updated to 2.5, Deep Blue Solutions Ltd.
  This file is subject to the terms and conditions of the GNU General Public
  License.  See the file COPYING in the main directory of this archive
  for more details.
   ARM PrimeCell PL110 Color LCD Controller
 This is limited to 16 characters when displayed by X startup 
	
	  Disable CLCD clock source.
	
	  Enable the CLCD clock source.
	
	  Bring up by first enabling..
	
	  and now apply power.
	
	  Turn on backlight
	
	  finally, enable the interface.
 Old way of specifying what can be used 
 But mask out 444 modes as they weren't supported 
 Only TFT panels can do RGB888BGR888 
 If we can't do 5551, reject 
 If we can't do 444, 5551 or 565, reject 
		
		  Green length can be 4, 5 or 6 depending whether
		  we're operating in 444, 5551 or 565 mode.
			
			  PL110 officially only supports RGB555,
			  but may be wired up to allow RGB565.
 If we can't do 888, reject 
	
	  >= 16bpp displays have separate colour component bitfields
	  encoded in the pixel data.  Calculate their position from
	  the bitfield length defined above.
			
			  The requested format was not possible, try just
			  our capabilities.  One of BGR or RGB must be
			  supported.
   Set a single color register. The values supplied have a 16 bit
   magnitude.  Return != 0 for invalid regno.
		
		  3.2.11: if we're configured for big endian
		  byte order, the palette entries are swapped.
   Blank the screen if blank_mode != 0, else unblank. If blank == NULL
   then the caller blanks by setting the CLUT (Color Look Up Table) to all
   black. Return 0 if blanking succeeded, != 0 if un-blanking failed due
   to e.g. a video mode which doesn't support it. Implements VESA suspend
   and powerdown modes on hardware that supports disabling hsyncvsync:
     blank_mode == 2: suspend vsync
     blank_mode == 3: suspend hsync
     blank_mode == 4: powerdown
	
	  ARM PL111 always has IENB at 0x1c; it's only PL110
	  which is reversed on some platforms.
	
	  Make sure that the bitfields are set appropriately.
	
	  Allocate colourmap.
	
	  Ensure interrupts are disabled.
 Set up some inversion flags 
		
		  To preserve backwards compatibility, the IPC (inverted
		  pixel clock) flag needs to be set on any display that
		  doesn't explicitly specify that the pixel clock is
		  active on the negative or positive edge.
 Look up the optional backlight device 
 Only directly connected DPI panels supported for now 
 Bypass pixel clock divider 
 TFT display, vert. comp. interrupt at the start of the back porch 
 Match the setup with known variants 
	
	  If we actually physically connected the R lines to B and
	  vice versa
	
	  Fetch the panel endpoint.
		
		  max_bandwidth is in bytes per second and pixclock in
		  pico-seconds, so the maximum allowed bits per pixel is
		    8  max_bandwidth  (PICOS2KHZ(pixclock)  1000)
		  Rearrange this calculation to avoid overflow and then ensure
		  result is a valid format.
 SPDX-License-Identifier: GPL-2.0-only
   WonderMedia WM8505 Frame Buffer device driver
   Copyright (C) 2010 Ed Spiridonov <edo.rus@gmail.com>
     Based on vt8500lcdfb.c
 I know the purpose only of few registers, so clear unknown 
 Set frame buffer address 
	
	  Set in-memory picture format to RGB
	  0x31C sets the correct color mode (RGB565) for WM8650
	  Bit 8+9 (0x300) are ignored on WM8505 as reserved
 Virtual buffer size 
 black magic ;) 
 try allocating the framebuffer 
  Xilinx TFT frame buffer driver
  Author: MontaVista Software, Inc.
          source@mvista.com
  2002-2007 (c) MontaVista Software, Inc.
  2007 (c) Secret Lab Technologies, Ltd.
  2009 (c) Xilinx Inc.
  This file is licensed under the terms of the GNU General Public License
  version 2.  This program is licensed "as is" without any warranty of any
  kind, whether express or implied.
  This driver was based on au1100fb.c by MontaVista rewritten for 2.6
  by Embedded Alley Solutions <source@embeddedalley.com>, which in turn
  was based on skeletonfb.c, Skeleton for a frame buffer device by
  Geert Uytterhoeven.
  Xilinx calls it "TFT LCD Controller" though it can also be used for
  the VGA port on the Xilinx ML40x board. This is a hardware display
  controller for a 640x480 resolution TFT or VGA screen.
  The interface to the framebuffer is nice and simple.  There are two
  control registers.  The first tells the LCD interface where in memory
  the frame buffer is (only the 11 most significant bits are used, so
  don't start thinking about scrolling).  The second allows the LCD to
  be turned on or off as well as rotated 180 degrees.
  In case of direct BUS access the second control register will be at
  an offset of 4 as compared to the DCR access where the offset is 1
  i.e. REG_CTRL. So this is taken care in the function
  xilinx_fb_out32 where it left shifts the offset 2 times in case of
  direct BUS access.
  The hardware only handles a single mode: 640x480 24 bit true
  color. Each pixel gets a word (32 bits) of memory.  Within each word,
  the 8 most significant bits are ignored, the next 8 bits are the red
  level, the next 8 bits are the green level and the 8 least
  significant bits are the blue level.  Each row of the LCD uses 1024
  words, but only the first 640 pixels are displayed with the other 384
  words being ignored.  There are 480 rows.
 passed to fb_alloc_cmap() 
 ML300403 reference design framebuffer driver platform data struct 
 Flag to rotate display 180 degrees 
 Physical dimensions of screen in mm 
 resolution of screen in pixels 
 resolution of memory buffer 
	 Physical address of framebuffer memory; If non-zero, driver
	  will use provided memory address instead of allocating one from
	  the consistent pool.
  Default xilinxfb configuration
  Here are the default fb_fix_screeninfo and fb_var_screeninfo structures
 1 = BUS, 0 = DCR 
 LITTLE ENDIAN IO functions 
 FB driver info record 
	phys_addr_t	regs_phys;	 phys. address of the control
					  registers
	void __iomem	regs;		 virt. address of the control
					  registers
 virt. address of the frame buffer 
 phys. address of the frame buffer 
 Flag, was the fb memory alloced? 
 features of the driver 
 Fake palette of 16 colors 
  The XPS TFT Controller can be accessed through BUS or DCR interface.
  To perform the readwrite on the registers we need to check on
  which bus its connected and call the appropriate write API.
		 Convert color to grayscale.
		  grayscale = 0.30R + 0.59G + 0.11B
 fbi->fix.visual is always FB_VISUAL_TRUECOLOR 
 We only handle 8 bits of each color. 
 turn on panel 
 turn off panel 
 success 
 ---------------------------------------------------------------------
  Bus independent setupteardown
 Allocate the framebuffer memory 
 Clear (turn to black) the framebuffer 
 Tell the hardware where the frame buffer is 
 Endianness detection 
 Turn on the display 
 Fill struct fb_info 
 Allocate a colour map 
 Register new frame buffer 
 Put a banner in the log (for DEBUG) 
 Put a banner in the log (for DEBUG) 
 success 
 Turn off the display 
 Turn off the display 
 Release the resources, as allocated based on interface 
 ---------------------------------------------------------------------
  OF bus binding
 Copy with the default pdata (not a ptr reference!) 
 Allocate the driver data region 
	
	  To check whether the core is connected directly to DCR or BUS
	  interface and initialize the tft_access accordingly.
	
	  Fill the resource structure if its direct BUS interface
	  otherwise fill the dcr_host structure.
 Match table for of_platform binding 
 SPDX-License-Identifier: GPL-2.0-only
   linuxdriversvideocyber2000fb.c
   Copyright (C) 1998-2002 Russell King
   MIPS and 50xx clock support
   Copyright (C) 2001 Bradley D. LaRonde <brad@ltc.com>
   32 bit support, text color and panning fixes for modes != 8 bit
   Copyright (C) 2002 Denis Oliver Kropp <dok@directfb.org>
  Integraphics CyberPro 2000, 2010 and 5000 frame buffer device
  Based on cyberfb.c.
  Note that we now use the new fbcon fix, var and cmap scheme.  We do
  still have to check which console is the currently displayed one
  however, especially for the colourmap stuff.
  We also use the new hotplug PCI subsystem.  I'm not sure if there
  are any such cards, but I'm erring on the side of caution.  We don't
  want to go pop just because someone does have one.
  Note that this doesn't work fully in the case of multiple CyberPro
  cards with grabbers.  We currently can only attach to the first
  CyberPro card found.
  When we're in truecolour mode, we power down the LUT RAM as a power
  saving feature.  Also, when we enter any of the powersaving modes
  (except soft blanking) we power down the RAMDACs.  This saves about
  1W, which is roughly 8% of the power consumption of a NetWinder
  (which, incidentally, is about the same saving as a 2.5in hard disk
  entering standby mode.)
	
	  Clock divisors
	
	  RAMDAC control register is both of these or'ed together
  Our access methods.
 -------------------- Hardware specific routines ------------------------- 
  Hardware Cyber2000 Acceleration
  ===========================================================================
     Set a single color register. Return != 0 for invalid regno.
	
	  Pseudocolour:
	 	   8     8
	  pixel ----+---->  red lut  --> red dac
	 	      |  8
	 	      +----> green lut --> green dac
	 	      |  8
	 	      +---->  blue lut --> blue dac
	
	  Direct colour:
	 	   n     rl
	  pixel ----+---->  red lut  --> red dac
	 	      |  gl
	 	      +----> green lut --> green dac
	 	      |  bl
	 	      +---->  blue lut --> blue dac
	  n = bpp, rl = red length, gl = green length, bl = blue length
			
			  The 6 bits of the green component are applied
			  to the high 6 bits of the LUT.
			
			  The 5 bits of each colour component are
			  applied to the high 5 bits of the LUT.
			
			  The 5 bits of each colour component are
			  applied to the high 5 bits of the LUT.
		
		  Since this is only used for the first 16 colours, we
		  don't have to care about overflowing for regno >= 32
	
	  True colour:
	 	   n     rl
	  pixel ----+----> red dac
	 	      |  gl
	 	      +----> green dac
	 	      |  bl
	 	      +----> blue dac
	  n = bpp, rl = red length, gl = green length, bl = blue length
	
	  Now set our pseudo palette for the CFB162432 drivers.
	
	  Hardware
	
	  Other
 prevent card lock-up observed on x86 with CyberPro 2000 
	
	  Blank palette
 Attribute controller registers 
 PLL registers 
	
	  Set up accelerator registers
	
	  Convert to bytes and shift two extra bits because DAC
	  can only start on 4 byte aligned data.
	
	  overflow - graphics reg 0x11
	  0=VTOTAL:10 1=VDEND:10 2=VRSTART:10 3=VBSTART:10
	  4=LINECOMP:10 5-IVIDEO 6=FIXCNT
 woody: set the interlaced bit... 
 FIXME: what about doublescan? 
  The following was discovered by a good monitor, bit twiddling, theorising
  and but mostly luck.  Strangely, it looks like everyone elses' PLL!
  Clock registers:
    fclock = fpll  div2
    fpll   = fref  mult  div1
  where:
    fref = 14.318MHz (69842ps)
    mult = reg0xb0.7:0
    div1 = (reg0xb1.5:0 + 1)
    div2 =  2^(reg0xb1.7:6)
    fpll should be between 115 and 260 MHz
   (8696ps and 3846ps)
	
	  Step 1:
	    find div2 such that 115MHz < fpll < 260MHz
	    and 0 <= div2 < 4
	
	  Step 2:
	   Given pll_ps and ref_ps, find:
	     pll_ps  0.995 < pll_ps_calc < pll_ps  1.005
	   where { 1 < best_div1 < 32, 1 < best_mult < 256 }
	     pll_ps_calc = best_div1  (ref_ps  best_mult)
		
		  Find the multiplier for this divisor
		
		  Is the multiplier within the correct range?
		
		  Calculate the actual clock period from this multiplier
		  and divisor, and estimate the error.
		
		  If we hit an exact value, there is no point in continuing.
	
	  Step 3:
	   combine values
 Set VFSEL when VCO > 180MHz (5.556 ps). 
     Set the User Defined Part of the Display
 PSEUDOCOLOUR, 256 
 DIRECTCOLOUR, 64k or 32k 
 RGB565, 64k 
 RGB555, 32k 
 RGB444, 4k + transparency? 
 TRUECOLOUR, 16m 
 TRUECOLOUR, 16m 
 RGB565, 64k 
 RGB555, 32k 
 RGB444, 4k + transparency? 
 TRUECOLOUR, 16m 
 TRUECOLOUR, 16m 
	
	  Sigh, this is absolutely disgusting, but caused by
	  the way the fbcon developers want to separate out
	  the "checking" and the "setting" of the video mode.
	 
	  If the mode is not suitable for the hardware here,
	  we can't prevent it being set by returning an error.
	 
	  In theory, since NetWinders contain just one VGA card,
	  we should never end up hitting this problem.
	
	  Same here - if the size of the video mode exceeds the
	  available RAM, we can't prevent this mode being set.
	 
	  In theory, since NetWinders contain just one VGA card,
	  we should never end up hitting this problem.
	
	  8bpp displays are always pseudo colour.  16bpp and above
	  are direct colour or true colour, depending on whether
	  the RAMDAC palettes are bypassed.  (Direct colour has
	  palettes, true colour does not.)
     Pan or Wrap the Display
     (Un)Blank the display.
   Blank the screen if blank_mode != 0, else unblank. If
   blank == NULL then the caller blanks by setting the CLUT
   (Color Look Up Table) to all black. Return 0 if blanking
   succeeded, != 0 if un-blanking failed due to e.g. a
   video mode which doesn't support it. Implements VESA
   suspend and powerdown modes on hardware that supports
   disabling hsyncvsync:
     blank_mode == 2: suspend vsync
     blank_mode == 3: suspend hsync
     blank_mode == 4: powerdown
   wms...Enable VESA DMPS compatible powerdown mode
   run "setterm -powersave powerdown" to take advantage
 powerdown - both sync lines down 
 hsync off 
 vsync off 
 soft blank 
 unblank 
 turn on ramdacs 
	
	  Soft blankunblank the display.
 soft blank 
 unblank 
 turn off ramdacs 
  This is the only "static" reference to the internal data structures
  of this driver.  It is here solely at the moment to support the other
  CyberPro modules external to this driver.
  Enable access to the extended registers
  Disable access to the extended registers
  Attach a capturetv driver to the core CyberX0X0 driver.
  Detach a capturetv driver from the core CyberX0X0 driver.
 bit is inverted 
 bit is inverted 
 CONFIG_FB_CYBER2000_DDC 
  These parameters give
  640x480, hsync 31.5kHz, vsync 60Hz
 some of these are questionable when we have a BIOS 
  Initialise the CyberPro hardware.  On the CyberPro5XXXX,
  ensure that we're using the correct PLL (5XXX's may be
  programmed to use an additional set of PLLs.)
 24.576 MHz 
 14.31818 MHz (69841?) 
		
		  Free the colourmap
  Parse Cyber2000fb options.  Usage:
   video=cyber2000:font:fontname
  MODULE  
  The CyberPro chips can be placed on many different bus types.
  This probe function is common to all bus types.  The bus-specific
  probe function is expected to have:
   - enabled access to the linear memory region
   - memory mapped access to the registers
   - initialised mem_ctl1 and mem_ctl2 appropriately.
	
	  Get the video RAM size and width from the VGA register.
	  This should have been already initialised by the BIOS,
	  but if it's garbage, claim default 1MB VRAM (woody)
	
	  Determine the size of the memory.
	fb_set_var(&cfb->fb.var, -1, &cfb->fb); 
	
	  Calculate the hsync and vsync frequencies.  Note that
	  we split the 1e12 constant up so that we can preserve
	  the precision and fit the results into 32-bit registers.
	   (1953125000  512 = 1e12)
	
	  Reprogram the MEM_CTL1 and MEM_CTL2 registers
	
	  Restore the old video mode and the palette.
	  We also need to tell fbcon to redraw the console.
  We need to wake up the CyberPro, and make sure its in linear memory
  mode.  Unfortunately, this is specific to the platform and card that
  we are running on.
  On x86 and ARM, should we be initialising the CyberPro first via the
  IO registers, and then the MMIO registers to catch all cases?  Can we
  end up in the situation where the chip is in MMIO mode, but not awake
  on an x86 system?
	
	  SPARC does not have an "outb" instruction, so we generate
	  IO cycles storing into a reserved memory space at
	  physical address 0x3000000
	
	  Most other machine types are "normal", so
	  we use the standard IO-based wakeup.
	
	  Allow the CyberPro to accept PCI burst accesses
	
	  Bring up the hardware.  This is expected to enable access
	  to the linear memory region, and allow access to the memory
	  mapped registers.  Also, mem_ctl1 and mem_ctl2 must be
	  initialised.
	
	  Use MCLK from BIOS. FIXME: what about hotplug?
	
	  MCLK on the NetWinder and the Shark is fixed at 75MHz
	
	  Our driver data
  Re-initialise the CyberPro hardware
	Not yet
 	{ PCI_VENDOR_ID_INTERG, PCI_DEVICE_ID_INTERG_1682,
 		PCI_ANY_ID, PCI_ANY_ID, 0, 0, ID_IGA_1682 },
  I don't think we can use the "module_init" stuff here because
  the fbcon stuff may not be initialised yet.  Hence the #ifdef
  around module_init.
  Tony: "module_init" is now required
 SPDX-License-Identifier: GPL-2.0-only
 cg6.c: CGSIX (GX, GXplus, TGX) frame buffer driver
  Copyright (C) 2003, 2006 David S. Miller (davem@davemloft.net)
  Copyright (C) 1996,1998 Jakub Jelinek (jj@ultra.linux.cz)
  Copyright (C) 1996 Miguel de Icaza (miguel@nuclecu.unam.mx)
  Copyright (C) 1996 Eddie C. Dost (ecd@skynet.be)
  Driver layout based loosely on tgafb.c, see that file for credits.
  Local functions.
   Frame buffer operations
 Offset of interesting structures in the OBIO space 
  Brooktree is the video dac and is funny to program on the cg6.
  (it's even funnier on the cg3)
  The FBC could be the frame buffer control
  The FHC could is the frame buffer hardware control.
 FHC definitions 
 FBC mode definitions 
 THC definitions 
 The contents are unknown 
 hsync timing 
 vsync timing 
 cursor x,y position (16 bits each) 
 cursor mask bits 
 what to show where mask enabled 
 Hide the cursor. 
	 We just use this to catch switches out of
	  graphics mode.
 	cg6_fillrect -	Draws a rectangle on the screen.
 	@info: frame buffer structure that represents a single frame buffer
 	@rect: structure defining the rectagle and operation.
 CG6 doesn't handle ROP_XOR 
 	cg6_copyarea - Copies one area of the screen to another area.
 	@info: frame buffer structure that represents a single frame buffer
 	@area: Structure providing the data to copy the framebuffer contents
 		from one region to another.
 	This drawing operation copies a rectangular area from one area of the
 	screen to another area.
 	cg6_imageblit -	Copies a image from system memory to the screen.
 	@info: frame buffer structure that represents a single frame buffer
 	@image: structure defining the image.
 	cg6_setcolreg - Sets a color register.
 	@regno: boolean, 0 copy local, 1 get_user() function
 	@red: frame buffer colormap structure
 	@green: The green value which can be up to 16 bits wide
 	@blue:  The blue value which can be up to 16 bits wide.
 	@transp: If supported the alpha value which can be up to 16 bits wide.
 	@info: frame buffer info structure
 	cg6_blank - Blanks the display.
 	@blank: the blank mode we want.
 	@info: frame buffer structure that represents a single frame buffer
 Unblanking 
 Normal blanking 
 VESA blank (vsync off) 
 VESA blank (hsync off) 
 Poweroff 
   Initialisation
 Initialize Brooktree DAC 
 color planes 
 overlay plane 
 Hide the cursor. 
 Turn off stuff in the Transform Engine. 
 Take care of bugs in old revisions. 
	 Set things in the FBC. Bad things appear to happen if we do
	  back to back storeloads on the mode register, so copy it
   driversvideoimsttfb.c -- frame buffer device for IMS TwinTurbo
   This file is derived from the powermac console "imstt" driver:
   Copyright (C) 1997 Sigurdur Asgeirsson
   With additional hacking by Jeffrey Kuskin (jsk@mojave.stanford.edu)
   Modified by Danilo Beuche 1998
   Some register values added by Damien Doligez, INRIA Rocquencourt
   Various cleanups by Paul Mundt (lethal@chaoticdreams.org)
   This file was written by Ryan Nielsen (ran@krazynet.com)
   Most of the frame buffer device stuff was copied from atyfb.c
   This file is subject to the terms and conditions of the GNU General Public
   License. See the file COPYING in the main directory of this archive for
   more details.
 Enforce In-order Execution of IO 
 TwinTurbo (Cosmo) registers 
 0x00 
 0x04 
 0x08 
 0x0C 
 0x10 
 0x14 
 0x18 
 0x20 
 0x24 
 0x28 
 Scan Timing Generator Registers 
 0x30 
 0x34 
 0x38 
 0x3C 
 0x40 
 0x44 
 0x48 
 0x4C 
 0x50 
 0x54 
 0x58 
 0x5C 
 0x60 
 Screen Refresh Generator Registers 
 0x64 
 0x68 
 0x6C 
 0x70 
 0x74 
 RAM Refresh Generator Registers 
 0x78 
 0x7C 
 0x88 
 System Registers 
 0x80 
 0x84 
 0x8C 
 0x90 
 0x94 
 PCI Registers 
 IBM 624 RAMDAC Direct Registers 
 IBM 624 RAMDAC Indirect Registers 
 (0x01) Miscellaneous Clock Control 
 (0x00) Sync Control 
 (0x00) Horizontal Sync Position 
 (0x00) Power Management 
 (0x02) DAC Operation 
 (0x00) Palette Control 
 (0x01) System Clock Control 
 () Pixel Format  [bpp >> 3 + 2] 
 () 8 BitsPixel Control 
 () 16 BitsPixel Control  [bit 1=1 for 565] 
 () 24 BitsPixel Control 
 () 32 BitsPixel Control 
 (0x05) Pixel PLL Control 1 
 (0x00) Pixel PLL Control 2 
 () System Clock N (System PLL Reference Divider) 
 () System Clock M (System PLL VCO Divider) 
 () System Clock P 
 () System Clock C 
	
	  Dot clock rate is 20MHz  (m + 1)  ((n + 1)  (p ? 2  p : 1)
	  c is charge pump bias which depends on the VCO frequency  
 () Pixel M 0 
 () Pixel N 0 
 () Pixel P 0 
 () Pixel C 0 
 (0x00) Cursor Control 
 () Cursor X position, low 8 bits 
 () Cursor X position, high 8 bits 
 () Cursor Y position, low 8 bits 
 () Cursor Y position, high 8 bits 
 () Cursor Hot Spot X 
 () Cursor Hot Spot Y 
 () Advanced Cursor Control Enable 
 () Advanced Cursor Attribute 
 () Cursor 1 Red 
 () Cursor 1 Green 
 () Cursor 1 Blue 
 () Cursor 2 Red 
 () Cursor 2 Green 
 () Cursor 2 Blue 
 () Cursor 3 Red 
 () Cursor 3 Green 
 () Cursor 3 Blue 
 () Border Color Red 
 () Border Color Green 
 () Border Color Blue 
 (0x00) Miscellaneous Control 1 
 (0x00) Miscellaneous Control 2 
 (0x00) Miscellaneous Control 3 
 (0x00) Key ControlDB Operation 
 TI TVP 3030 RAMDAC Direct Registers 
 0  PaletteCursor RAM Write AddressIndex 
 1  Palette Data RAM Data 
 2  Pixel Read-Mask 
 3  PaletteCursor RAM Read Address 
 4  CursorOverscan Color Write Address 
 5  CursorOverscan Color Data 
 6  reserved 
 7  CursorOverscan Color Read Address 
 8  reserved 
 9  Direct Cursor Control 
 10 Index Data 
 11 Cursor RAM Data 
 12 Cursor-Position X LSB 
 13 Cursor-Position X MSB 
 14 Cursor-Position Y LSB 
 15 Cursor-Position Y MSB 
 TI TVP 3030 RAMDAC Indirect Registers 
 Silicon Revision [RO] 
 Indirect Cursor Control 	(0x00) 
 Byte Router Control 	(0xe4) 
 Latch Control 		(0x06) 
 True Color Control  	(0x80) 
 Multiplex Control		(0x98) 
 Clock Selection		(0x07) 
 Palette Page		(0x00) 
 General Control 		(0x00) 
 Miscellaneous Control	(0x00) 
 PLL Address 
 Pixel Clock PLL Data 
 Memory Clock PLL Data 
 Loop Clock PLL Data 
 Color-Key Overlay Low 
 Color-Key Overlay High 
 Color-Key Red Low 
 Color-Key Red High 
 Color-Key Green Low 
 Color-Key Green High 
 Color-Key Blue Low 
 Color-Key Blue High 
 Color-Key Control 		(0x00) 
 MCLKLoop Clock Control	(0x18) 
 Sense Test			(0x00) 
 Test Mode Data 
 CRC Remainder LSB [RO] 
 CRC Remainder MSB [RO] 
 CRC  Bit Select [WO] 
 Device ID [RO] 		(0x30) 
 Software Reset [WO] 
	
	  Note that colors in X are correct only if all video data is
	  passed through the palette in the DAC.  That is, "indirect
	  color" must be configured.  This is the case for the IBM DAC
	  used in the 2MB and 4MB cards, at least.
 Values of the tvp which change depending on colormode x resolution 
 Memory Loop Config 0x39 
 P value of LCKL PLL 
  PCI driver prototypes
  Register access
 .25  ;
 .27_  ;
 .6_  ;
    From what I (jsk) can gather poking around with MacsBug,
    bits 8 and 9 in the SCR register control endianness
    correction (byte swapping).  These bits must be set according
    to the color depth as follows:
        Color depth    Bit 9   Bit 8
        ==========     =====   =====
           8bpp          0       0
          16bpp          0       1
          32bpp          1       1
		 case 0x400000:
 RGB 555 or 565 
 RGB 888 
 RGBA 8888 
 PADDRWPDATA are the same as TVPPADDRWTVPPDATA 
 screws up X 
 0x200000 
 initialize the card 
 set default values for DAC registers 
	if (par->ramdac == IBM)
		imstt_cursor_init(info);
 IMS,tt128mbA 
 IMS,tt3d 
 MODULE 
  Silicon Motion SM7XX frame buffer device
  Copyright (C) 2006 Silicon Motion Technology Corp.
  Authors:  Ge Wang, gewang@siliconmotion.com
 	     Boyod boyod.yang@siliconmotion.com.cn
  Copyright (C) 2009 Lemote, Inc.
  Author:   Wu Zhangjin, wuzhangjin@gmail.com
  Copyright (C) 2011 Igalia, S.L.
  Author:   Javier M. Mellid <jmunhoz@igalia.com>
  This file is subject to the terms and conditions of the GNU General Public
  License. See the file COPYING in the main directory of this archive for
  more details.
  Framebuffer driver for Silicon Motion SM710, SM712, SM721 and SM722 chips
  Private structure
 linear frame buffer 
 drawing processor control regs 
 video processor control regs 
 capture processor control regs 
 memory map IO port 
 Memory Map IO starting address 
			 SM712 Mode table.
  mode#0: 640 x 480  16Bpp  60Hz 
  Init_MISC 
  Init_SR0_SR4 
  Init_SR10_SR24 
  Init_SR30_SR75 
  Init_SR80_SR93 
  Init_SRA0_SRAF 
  Init_GR00_GR08 
  Init_AR00_AR14 
  Init_CR00_CR18 
  Init_CR30_CR4D 
  Init_CR90_CRA7 
  mode#1: 640 x 480  24Bpp  60Hz 
  Init_MISC 
  Init_SR0_SR4 
  Init_SR10_SR24 
  Init_SR30_SR75 
  Init_SR80_SR93 
  Init_SRA0_SRAF 
  Init_GR00_GR08 
  Init_AR00_AR14 
  Init_CR00_CR18 
  Init_CR30_CR4D 
  Init_CR90_CRA7 
  mode#0: 640 x 480  32Bpp  60Hz 
  Init_MISC 
  Init_SR0_SR4 
  Init_SR10_SR24 
  Init_SR30_SR75 
  Init_SR80_SR93 
  Init_SRA0_SRAF 
  Init_GR00_GR08 
  Init_AR00_AR14 
  Init_CR00_CR18 
  Init_CR30_CR4D 
  Init_CR90_CRA7 
  mode#2: 800 x 600  16Bpp  60Hz 
  Init_MISC 
  Init_SR0_SR4 
  Init_SR10_SR24 
  Init_SR30_SR75 
  Init_SR80_SR93 
  Init_SRA0_SRAF 
  Init_GR00_GR08 
  Init_AR00_AR14 
  Init_CR00_CR18 
  Init_CR30_CR4D 
  Init_CR90_CRA7 
  mode#3: 800 x 600  24Bpp  60Hz 
  Init_SR0_SR4 
  Init_SR10_SR24 
  Init_SR30_SR75 
  Init_SR80_SR93 
  Init_SRA0_SRAF 
  Init_GR00_GR08 
  Init_AR00_AR14 
  Init_CR00_CR18 
  Init_CR30_CR4D 
  Init_CR90_CRA7 
  mode#7: 800 x 600  32Bpp  60Hz 
  Init_MISC 
  Init_SR0_SR4 
  Init_SR10_SR24 
  Init_SR30_SR75 
  Init_SR80_SR93 
  Init_SRA0_SRAF 
  Init_GR00_GR08 
  Init_AR00_AR14 
  Init_CR00_CR18 
  Init_CR30_CR4D 
  Init_CR90_CRA7 
 We use 1024x768 table to light 1024x600 panel for lemote 
  mode#4: 1024 x 600  16Bpp  60Hz  
  Init_MISC 
  Init_SR0_SR4 
  Init_SR10_SR24 
  Init_SR30_SR75 
  Init_SR80_SR93 
  Init_SRA0_SRAF 
  Init_GR00_GR08 
  Init_AR00_AR14 
  Init_CR00_CR18 
  Init_CR30_CR4D 
  Init_CR90_CRA7 
  1024 x 768  16Bpp  60Hz 
  Init_MISC 
  Init_SR0_SR4 
  Init_SR10_SR24 
  Init_SR30_SR75 
  Init_SR80_SR93 
  Init_SRA0_SRAF 
  Init_GR00_GR08 
  Init_AR00_AR14 
  Init_CR00_CR18 
  Init_CR30_CR4D 
  Init_CR90_CRA7 
  mode#5: 1024 x 768  24Bpp  60Hz 
  Init_MISC 
  Init_SR0_SR4 
  Init_SR10_SR24 
  Init_SR30_SR75 
  Init_SR80_SR93 
  Init_SRA0_SRAF 
  Init_GR00_GR08 
  Init_AR00_AR14 
  Init_CR00_CR18 
  Init_CR30_CR4D 
  Init_CR90_CRA7 
  mode#4: 1024 x 768  32Bpp  60Hz 
  Init_MISC 
  Init_SR0_SR4 
  Init_SR10_SR24 
  Init_SR30_SR75 
  Init_SR80_SR93 
  Init_SRA0_SRAF 
  Init_GR00_GR08 
  Init_AR00_AR14 
  Init_CR00_CR18 
  Init_CR30_CR4D 
  Init_CR90_CRA7 
  mode#6: 320 x 240  16Bpp  60Hz 
  Init_MISC 
  Init_SR0_SR4 
  Init_SR10_SR24 
  Init_SR30_SR75 
  Init_SR80_SR93 
  Init_SRA0_SRAF 
  Init_GR00_GR08 
  Init_AR00_AR14 
  Init_CR00_CR18 
  Init_CR30_CR4D 
  Init_CR90_CRA7 
  mode#8: 320 x 240  32Bpp  60Hz 
  Init_MISC 
  Init_SR0_SR4 
  Init_SR10_SR24 
  Init_SR30_SR75 
  Init_SR80_SR93 
  Init_SRA0_SRAF 
  Init_GR00_GR08 
  Init_AR00_AR14 
  Init_CR00_CR18 
  Init_CR30_CR4D 
  Init_CR90_CRA7 
 process command line options, get vga parameter 
 set bit 5:4 = 01 (write LCD RAM only) 
 chan_to_field
  convert a colour value into a field position
  from pxafb.c
 clear DPMS setting 
 Screen On: HSync: On, VSync : On 
 Screen Off: HSync: On, VSync : On   Soft blank 
 Screen On: HSync: On, VSync : Off 
 Screen On: HSync: Off, VSync : On 
 Screen On: HSync: Off, VSync : Off 
		
		  1632 bit true-colour, use pseudo-palette for 16 base color
 color depth 8 bit 
 unknown type 
 init SEQ register SR00 - SR04 
 init SEQ register SR10 - SR24 
 init SEQ register SR30 - SR75 
 init SEQ register SR80 - SR93 
 init SEQ register SRA0 - SRAF 
 init Graphic register GR00 - GR08 
 init Attribute register AR00 - AR14 
 init CRTC register CR00 - CR18 
 init CRTC register CR30 - CR4D 
 side-effect, don't write to CR3B-CR3F 
 init CRTC register CR90 - CRA7 
 set VPR registers 
 set data width 
 sanity checks 
 set valid default bpp 
  Unmap in the memory mapped IO registers
  Map in the screen memory
 on SM720, the framebuffer starts at the 1 MB offset 
 XXX: is it safe for SM720 on Big-Endian? 
  Unmap in the screen memory
  We need to wake up the device and make sure its in linear memory mode.
		
		  Assume SM712 graphics chip has 4MB VRAM.
		 
		  FIXME: SM712 can have 2MB VRAM, which is used on earlier
		  laptops, such as IBM Thinkpad 240X. This driver would
		  probably crash on those machines. If anyone gets one of
		  those and is willing to help, run "git blame" and send me
		  an E-mail.
 8 MB 
 16 MB 
 illegal, fallback to 4 MB 
 4 MB 
 unknown hardware 
 get mode parameter from smtc_scr_info 
	
	  No parameter, default resolution is 1024x768-16.
	 
	  FIXME: earlier laptops, such as IBM Thinkpad 240X, has a 800x600
	  panel, also see the comments about Thinkpad 240X above.
	
	  Loongson MIPS netbooks use 1024x600 LCD panels, which is the original
	  target platform of this driver, but nearly all old x86 laptops have
	  1024x768. Lighting 768 panels using 600's timings would partially
	  garble the display, so we don't want that. But it's not possible to
	  distinguish them reliably.
	 
	  So we change the default to 768, but keep 600 as-is on MIPS.
 enable SMTC chip 
 Map address and memory detection 
 set MCLK = 14.31818  (0x16  0x2) 
 enable PCI burst 
 enable word swap 
 probe and decide resolution 
 can support 32 bpp 
	
	  The screen would be temporarily garbled when sm712fb takes over
	  vesafb or VGA text mode. Zero the framebuffer.
  0x710 (LynxEM)
  0x712 (LynxEM+)
  0x720 (Lynx3DM, Lynx3DM+)
	 set the hw in sleep mode use external clock and self memory refresh
	  so that we can turn off internal PLLs later on
 additionally turn off all function blocks including internal PLLs 
 reinit hardware 
 set MCLK = 14.31818   (0x16  0x2) 
 enable PCI burst 
  BRIEF MODULE DESCRIPTION
 	Au1200 LCD Driver.
  Copyright 2004-2005 AMD
  Author: AMD
  Based on:
  linuxdriversvideoskeletonfb.c -- Skeleton for a frame buffer device
   Created 28 Dec 1997 by Geert Uytterhoeven
   This program is free software; you can redistribute	 it andor modify it
   under  the terms of	 the GNU General  Public License as published by the
   Free Software Foundation;  either version 2 of the	License, or (at your
   option) any later version.
   THIS  SOFTWARE  IS PROVIDED	  ``AS	IS'' AND   ANY	EXPRESS OR IMPLIED
   WARRANTIES,	  INCLUDING, BUT NOT  LIMITED  TO, THE IMPLIED WARRANTIES OF
   MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN
   NO	EVENT  SHALL   THE AUTHOR  BE	 LIABLE FOR ANY	  DIRECT, INDIRECT,
   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   NOT LIMITED	  TO, PROCUREMENT OF  SUBSTITUTE GOODS	OR SERVICES; LOSS OF
   USE, DATA,	OR PROFITS; OR	BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
   ANY THEORY OF LIABILITY, WHETHER IN	 CONTRACT, STRICT LIABILITY, OR TORT
   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
   THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   You should have received a copy of the  GNU General Public License along
   with this program; if not, write  to the Free Software Foundation, Inc.,
   675 Mass Ave, Cambridge, MA 02139, USA.
 platform_data 
 Private, per-framebuffer management information (independent of the panel itself) 
 FB driver info record 
 FrameBuffer memory map 
 LCD controller restrictions 
 fixme: this needs to go away ? 
 Default number of visible screen buffer to allocate 
 Default maximum number of fb devices to create 
 Default window configuration entry to use (see windows[]) 
 default is zero 
 default is zero 
 winctrl1[FRM,CCO,PO,PIPE] 
  Default window configurations
 Index 0 
 mode_backcolor	 0x006600ff,
 mode_colorkey,msk 0, 0,
 xres, yres, xpos, ypos  0, 0, 0, 0,
 mode_winctrl1  LCD_WINCTRL1_FRM_16BPP565 |
 mode_winenable LCD_WINENABLE_WEN0,
 xres, yres, xpos, ypos  100, 100, 100, 100,
 mode_winctrl1  LCD_WINCTRL1_FRM_16BPP565 |
 mode_winenable LCD_WINENABLE_WEN1,
 xres, yres, xpos, ypos  0, 0, 0, 0,
 mode_winctrl1  LCD_WINCTRL1_FRM_16BPP565 |
 mode_winenable 0,
 xres, yres, xpos, ypos  0, 0, 0, 0,
 mode_winctrl1  LCD_WINCTRL1_FRM_16BPP565 |
 mode_winenable 0,
 Index 1 
 mode_backcolor	 0x006600ff,
 mode_colorkey,msk 0, 0,
 xres, yres, xpos, ypos  320, 240, 5, 5,
 mode_winctrl1  LCD_WINCTRL1_FRM_24BPP |
 mode_winenable LCD_WINENABLE_WEN0,
 xres, yres, xpos, ypos  0, 0, 0, 0,
 mode_winctrl1  LCD_WINCTRL1_FRM_16BPP565
 mode_winenable 0,
 xres, yres, xpos, ypos  100, 100, 0, 0,
 mode_winctrl1  LCD_WINCTRL1_FRM_16BPP565 |
 mode_winenable 0
 xres, yres, xpos, ypos  200, 25, 0, 0,
 mode_winctrl1  LCD_WINCTRL1_FRM_16BPP565 |
 mode_winenable 0,
 Index 2 
 mode_backcolor	 0x006600ff,
 mode_colorkey,msk 0, 0,
 xres, yres, xpos, ypos  0, 0, 0, 0,
 mode_winctrl1  LCD_WINCTRL1_FRM_16BPP565 |
 mode_winenable LCD_WINENABLE_WEN0,
 xres, yres, xpos, ypos  0, 0, 0, 0,
 mode_winctrl1  LCD_WINCTRL1_FRM_16BPP565 |
 mode_winenable 0,
 xres, yres, xpos, ypos  0, 0, 0, 0,
 mode_winctrl1  LCD_WINCTRL1_FRM_32BPP |
 mode_winenable 0
 xres, yres, xpos, ypos  0, 0, 0, 0,
 mode_winctrl1  LCD_WINCTRL1_FRM_16BPP565 |
 mode_winenable 0,
 Need VGA 640 @ 24bpp, @ 32bpp 
 Need VGA 800 @ 24bpp, @ 32bpp 
 Need VGA 1024 @ 24bpp, @ 32bpp 
  Controller configurations for various panels.
 Full name <vendor>_<model> 
 FB monitor specs 
 panel timings 
 Minimum horizontal resolution 
 Maximum horizontal resolution 
 Minimum vertical resolution 
 Maximum vertical resolution 
 fixme: Maybe a modedb for the CRT ? otherwise panels should be as-is 
 List of panels known to work with the AU1200 LCD controller.
  To add a new panel, enter the same specifications as the
  Generic_TFT one, and MAKE SURE that it doesn't conflicts
  with the controller restrictions. Restrictions are:
  STN color panels: max_bpp <= 12
  STN mono panels: max_bpp <= 4
  TFT panels: max_bpp <= 16
  max_xres <= 800
  max_yres <= 600
 QVGA 320x240 H:33.3kHz V:110Hz 
 4=24Mhz 
 VGA 640x480 H:30.3kHz V:58Hz 
 4=24Mhz 
 SVGA 800x600 H:46.1kHz V:69Hz 
 2=48Mhz 
 XVGA 1024x768 H:56.2kHz V:70Hz 
 1 
 XVGA XVGA 1280x1024 H:68.5kHz V:65Hz 
 1 
 Samsung 1024x768 TFT 
 SCB 0x1 4=24Mhz 
 SCB 0x0 
 SCB 0x0 
 Toshiba 640x480 TFT 
 4=24Mhz 
 Sharp 320x240 TFT 
16=6Mhz
 96MHz AUXPLL 
 Toppoly TD070WGCB2 7" 856x480 TFT 
 4=24Mhz 
 how many bits are needed for each pixel format 
 FIX!!! NOT CHECKING FOR COMPLETE OFFSCREEN YET 
 Check for off-screen adjustments 
 Off-screen to the right 
 off by 1 ??? 
printk("off screen right\n");
 Off-screen to the bottom 
 off by 1 ??? 
printk("off screen bottom\n");
 Off-screen to the left 
printk("off screen left\n");
 Off-screen to the top 
 fixme: fb_offset += ((0-ypos)fb_pars[plane].line_length); 
printk("off screen top\n");
 record settings 
 Disable the window while making changes, then restore WINEN 
 drain writebuffer 
 select winbuf0 
 drain writebuffer 
	
	  Perform global setupinit of LCD controller
 Make sure all windows disabled 
 drain writebuffer 
	
	  Ensure everything is disabled before reconfiguring
 Wait for vertical sync period 
disable the controller
clear interrupts
 drain writebuffer 
wait for controller to shut down
 Call shutdown of current panel (if up) 
		 this must occur last, because if an external clock is driving
		    the controller, the clock cannot be turned off before first
			shutting down the controller.
 Newpanel == NULL indicates a shutdown operation only 
	
	  Setup clocking if internal LCD clock source (assumes sys_auxpll valid)
 10% slack 
	
	  Configure panel timings
 drain writebuffer 
	 fixme: Check window settings to make sure still valid
	
	  Re-enable screen now that it is configured
 drain writebuffer 
 Call init of panel 
 FIX!!!! not appropriate on panel change!!! Global setupinit 
 Setup Color Key - FIX!!! 
 Setup HWCursor - FIX!!! Need to support this eventually 
 Windowplane setup 
 FRM,CCO,PO,PIPE 
 drain writebuffer 
 Inline helpers 
#define panel_is_dual(panel)  ((panel->mode_screen & LCD_SCREEN_PT) == LCD_SCREEN_PT_010)
#define panel_is_active(panel)((panel->mode_screen & LCD_SCREEN_PT) == LCD_SCREEN_PT_010)
 Bitfields format supported by the controller. 
     Red, 	   Green, 	 Blue, 	     Transp   
-------------------------------------------------------------------------
 Helpers 
 FIX!!!! This also needs to take the window pixel format into account!!! 
 Update var-dependent FB info 
 palettized 
 non-palettized 
 mono FIX!!! mono 8 and 4 bits 
-------------------------------------------------------------------------
 AU1200 framebuffer driver 
 fb_check_var
  Validate var settings with hardware restrictions and modify it if necessary
	 Make sure that the mode respect all LCD controller and
 No need for virtual resolution support 
 Virtual screen is to big, abort 
 FIX!!!! what are the implicaitons of ignoring this for windows ??? 
	 The max LCD clock is fixed to 48MHz (value of AUX_CLK). The pixel
	  clock can only be obtain by dividing this value by an even integer.
 STN 8bit mono panel support is up to 6MHz pixclock 
 Other STN panel support is up to 12MHz  
 Set bitfield accordingly 
			 16bpp True color.
			 32bpp True color.
 fb_set_par
  Set hardware with var settings. This will enable the controller with a
  specific mode, normally validated with the fb_check_var method
 fb_setcolreg
  Set color in LCD palette.
 Convert color to grayscale 
 Place color in the pseudopalette 
FIX!!! panel_is_active(fbdev->panel)) {
 COLOR TFT PALLETTIZED (use RGB 565) 
panel_is_color(fbdev->panel)) {
 COLOR STN MODE 
 MONOCHROME MODE 
 fb_blank
  Blank the screen. Depending on the mode, the screen will be
  activated with the backlight color, or desactivated
 Short-circuit screen blanking 
 printk("turn on panel\n"); 
 printk("turn off panel\n"); 
 FB_BLANK_NORMAL is a soft blank 
 fb_mmap
  Map video memory in user space. We don't use the generic fb_mmap
  method mainly to allow the use of the TLB streaming flag (CCA=6)
 SCREEN_SIZE: user cannot reset size, must switch panel choice 
 limit brightness pwm duty to >= 301600
 drain writebuffer 
 brightness
 drain writebuffer 
 Window control register 0 
 Window control register 1 
 program buffer line width 
 Window control register 2 
 Buffer line width programmed with WIN_SIZE 
 drain writebuffer 
 Window control register 0 
 Window control register 1 
 Window control register 2 
 drain writebuffer 
-------------------------------------------------------------------------
 Nothing to do for now, just clear any pending interrupt 
 drain writebuffer 
-------------------------------------------------------------------------
 AU1200 LCD device probe helpers 
 Copy monitor specs from panel data 
	 fixme: we're setting up LCD controller windows, so these dont give a
	damn as to what the monitor specs are (the panel itself does, but that
	 We first try the user mode passed in argument. If that failed,
	  or if no one has been specified, we default to the first mode of the
 drv_info.opt_mode, 
-------------------------------------------------------------------------
		 Panel option - can be panel name,
			 First check for index, which allows
 AU1200 LCD controller device driver 
 Setup driver with options 
 Point to the panel selected 
 Allocate the framebuffer to the maximum screen size 
 Init FB data 
 Register new framebuffer 
 Start display and show logo on boot 
 Now hook interrupt too 
 Kickstart the panel 
 Clean up all probe data 
 Turn off the panel 
 Clean up all probe data 
 drain writebuffer 
 Kickstart the panel 
 CONFIG_PM 
 SPDX-License-Identifier: GPL-2.0-only
  tdfxfb.c
  Author: Hannu Mallat <hmallat@cc.hut.fi>
  Copyright © 1999 Hannu Mallat
  All rights reserved
  Created      : Thu Sep 23 18:17:43 1999, hmallat
  Last modified: Tue Nov  2 21:19:47 1999, hmallat
  I2C part copied from the i2c-voodoo3.c driver by:
  Frodo Looijaard <frodol@dds.nl>,
  Philip Edelbrock <phil@netroedge.com>,
  Ralph Metzler <rjkm@thp.uni-koeln.de>, and
  Mark D. Studebaker <mdsxyz123@yahoo.com>
  Lots of the information here comes from the Daryll Strauss' Banshee
  patches to the XF86 server, and the rest comes from the 3dfx
  Banshee specification. I'm very much indebted to Daryll for his
  work on the X server.
  Voodoo3 support was contributed Harold Oga. Lots of additions
  (proper acceleration, 24 bpp, hardware cursor) and bug fixes by Attila
  Kesmarki. Thanks guys!
  Voodoo1 and Voodoo2 support aren't relevant to this driver as they
  behave very differently from the Voodoo345. For anyone wanting to
  use frame buffer on the Voodoo12, see the sstfb driver (which is
  located at http:www.sourceforge.netprojectssstfb).
  While I _am_ grateful to 3Dfx for releasing the specs for Banshee,
  I do wish the next version is a bit more complete. Without the XF86
  patches I couldn't have gotten even this far... for instance, the
  extensions to the VGA register set go completely unmentioned in the
  spec! Also, lots of references are made to the 'SST core', but no
  spec is publicly available, AFAIK.
  The structure of this driver comes pretty much from the Permedia
  driver by Ilario Nardinocchi, which in turn is based on skeletonfb.
  TODO:
  - multihead support (basically need to support an array of fb_infos)
  - support other architectures (PPC, Alpha); does the fact that the VGA
    core can be accessed only thru IO (not memory mapped) complicate
    things?
  Version history:
  0.1.4 (released 2002-05-28)	ported over to new fbdev api by James Simmons
  0.1.3 (released 1999-11-02)	added Attila's panning support, code
 				reorg, hwcursor address page size alignment
 				(for mmapping both frame buffer and regs),
 				and my changes to get rid of hardcoded
 				VGA io register locations (uses PCI
 				configuration info now)
  0.1.2 (released 1999-10-19)	added Attila Kesmarki's bug fixes and
 				improvements
  0.1.1 (released 1999-10-07)	added Voodoo3 support by Harold Oga.
  0.1.0 (released 1999-10-06)	initial version
 "640x480, 8 bpp @ 60 Hz 
  PCI driver prototypes
  Driver data
 not implemented (yet) 
 -------------------------------------------------------------------------
 			Hardware-specific funcions
	 Note: The Voodoo3's onboard FIFO has 32 slots. This loop
  Set the color of a palette entry in 8bpp mode
 read after write makes it working 
			
			  Estimate value of n that produces target frequency
			  with current m and k
 Search neighborhood of estimated n 
				
				  Calculate PLL freqency with current m, k and
				  estimated n
				
				  If this is the closest we've come to the
				  target frequency then remember n, m and k
 CRT unprotect 
 in MB 
 BansheeVoodoo3 
 Voodoo45 
 disable block writes for SDRAM 
 ------------------------------------------------------------------------- 
	
	  Banshee doesn't support interlace, but Voodoo45 and probably
	  Voodoo3 do.
	  no direct information about device id now?
	   use max_pixclock for this...
 could sometimes be 8 
 PLL settings 
 this is all pretty standard VGA register stuffing 
 fixme: clkdiv2? 
 Banshee's nonvga stuff 
 Now change fb_fix_screeninfo according to changes in par 
 A handy macro shamelessly pinched from matroxfb 
 grayscale works only partially under directcolor 
 grayscale = 0.30R + 0.59G + 0.11B 
 Truecolor has no hardware color palettes. 
 0 unblank, 1 blank, 2 no vsync, 3 no hsync, 4 off 
 Screen: On; HSync: On, VSync: On 
 Screen: Off; HSync: On, VSync: On 
 Screen: Off; HSync: On, VSync: Off 
 Screen: Off; HSync: Off, VSync: On 
 Screen: Off; HSync: Off, VSync: Off 
  Set the starting position of the visible screen to var->yoffset
  FillRect 2D command (solidfill or invert (via ROP_XOR))
 assume always rect->height < 4096 
 assume always rect->width < 4096 
 FB_VISUAL_TRUECOLOR 
  Screen-to-Screen BitBlt 2D command (for the bmove fb op.)
 assume always area->height < 4096 
 assume always area->width < 4096 
 assume always area->height < 4096 
 assume always area->width < 4096 
 -X 
 -Y 
 assume always image->height < 4096 
 assume always image->width < 4096 
	 A count of how many free FIFO entries we've requested.
 Send four bytes at a time of data 
 Send the leftovers now 
 CONFIG_FB_3DFX_ACCEL 
 just to force soft_cursor() call 
 Too large of a cursor or wrong bpp :-( 
	
	  If the cursor is not be changed this means either we want the
	  current cursor state (if enable is set) or we want to query what
	  we can do with the cursor (if enable is not set)
 fix cursor color - XFree86 forgets to restore it properly 
		
		  Voodoo 3 and above cards use 2 monochrome cursor patterns.
		     The reason is so the card can fetch 8 words at a time
		  and are stored on chip for use for the next 8 scanlines.
		  This reduces the number of times for access to draw the
		  cursor for each screen refresh.
		     Each pattern is a bitmap of 64 bit wide and 64 bit high
		  (total of 8192 bits or 1024 bytes). The two patterns are
		  stored in such a way that pattern 0 always resides in the
		  lower half (least significant 64 bits) of a 128 bit word
		  and pattern 1 the upper half. If you examine the data of
		  the cursor image the graphics card uses then from the
		  beginning you see line one of pattern 0, line one of
		  pattern 1, line two of pattern 0, line two of pattern 1,
		  etc etc. The linear stride for the cursor is always 16 bytes
		  (128 bits) which is the maximum cursor width times two for
		  the two monochrome patterns.
 Pattern 0. Copy the cursor mask to it 
 Pattern 1. Copy the cursor bitmap to it 
 The voo GPIO registers don't have individual masks for each bit
 flush posted write 
 flush posted write 
 The GPIO pins are open drain, so the pins always remain outputs.
   We rely on the i2c-algo-bit routines to set the pins high before
 flush posted write 
 flush posted write 
 CONFIG_FB_3DFX_I2C 
       tdfxfb_probe - Device Initializiation
       @pdev:  PCI Device to initialize
       @id:    PCI Device ID
       Initializes and allocates resources for PCI device @pdev.
 Configure the default fb_fix_screeninfo first 
 reserve 8192 bits for cursor 
 the 2.4 driver says PAGE_MASK boundary is not enough for Voodoo4 
 fill all other info->var's fields 
 maximize virtual vertical length 
	
	  Our driver data
	
	  Cleanup after anything that was remappedallocated.
       tdfxfb_remove - Device removal
       @pdev:  PCI Device to cleanup
       Releases all resources allocated during the course of the driver's
       lifetime for the PCI device @pdev.
 Clean up after reserved regions 
  linuxdriversvideohitfb.c -- Hitachi LCD frame buffer device
  (C) 1999 Mihai Spatar
  (C) 2000 YAEGASHI Takeshi
  (C) 2003, 2004 Paul Mundt
  (C) 2003, 2004, 2006 Andriy Skulysh
   This file is subject to the terms and conditions of the GNU General Public
   License. See the file COPYING in the main directory of this archive for
   more details.
 RGB 565 
 RGB 565 
 SPDX-License-Identifier: GPL-2.0-only
 leo.c: LEO frame buffer driver
  Copyright (C) 2003, 2006 David S. Miller (davem@davemloft.net)
  Copyright (C) 1996-1999 Jakub Jelinek (jj@ultra.linux.cz)
  Copyright (C) 1997 Michal Rehacek (Michal.Rehacek@st.mff.cuni.cz)
  Driver layout based loosely on tgafb.c, see that file for credits.
  Local functions.
   Frame buffer operations
 SS1 only 
 SS1 only 
 CopyScroll (SS0 only) 
 CopyScrollFill (SS0 only) 
 CopyScrollFill size (SS0 only) 
 SS1 only 
 SS1 only 
 SS1 only 
 SS1 only 
 SS1 only 
 SS1 only 
 SS1 only 
 SS1 only 
 SS1 only 
 SS1 only 
 SS1 only 
 SS1 only 
 SS1 only 
 SS1 only 
 SS1 only 
 Busy wait at most 0.3 sec 
 setup screen buffer for cfb_ functions 
 hide cursor 
	 We just use this to catch switches out of
	  graphics mode.
       leo_setcolreg - Optional function. Sets a color register.
       @regno: boolean, 0 copy local, 1 get_user() function
       @red: frame buffer colormap structure
       @green: The green value which can be up to 16 bits wide
       @blue:  The blue value which can be up to 16 bits wide.
       @transp: If supported the alpha value which can be up to 16 bits wide.
       @info: frame buffer info structure
       leo_blank - Optional function.  Blanks the display.
       @blank: the blank mode we want.
       @info: frame buffer structure that represents a single frame buffer
 Unblanking 
 Normal blanking 
 VESA blank (vsync off) 
 VESA blank (hsync off) 
 Poweroff 
   Initialisation
 SPDX-License-Identifier: GPL-2.0-only
  linuxdriversvideow100fb.c
  Frame Buffer Device for ATI Imageon w100 (Wallaby)
  Copyright (C) 2002, ATI Corp.
  Copyright (C) 2004-2006 Richard Purdie
  Copyright (c) 2005 Ian Molton
  Copyright (c) 2006 Alberto Mardegan
  Rewritten for 2.6 by Richard Purdie <rpurdie@rpsys.net>
  Generic platform support by Ian Molton <spyro@f2s.com>
  and Richard Purdie <rpurdie@rpsys.net>
  w32xx support by Ian Molton
  Hardware acceleration support by Alberto Mardegan
  <mardy@users.sourceforge.net>
  Prototypes
 Pseudo palette size 
 Remapped addresses for base cfg, memmapped regs and the frame buffer itself 
 This is the offset in the w100's address space we map the current
   framebuffer memory to. We use the position of external memory as
  Sysfs functions
  Some touchscreens need hsync information from the video driver to
  function correctly. We export it here.
 If display is blankedsuspended, hsync isn't active 
  Set a palette value from rgb components
	
	  If greyscale is true, then we convert the RGB value
	  to greyscale no matter what visual we are using.
	
	  16-bit True Colour.  We encode the RGB value
	  according to the RGB bitfield information.
  Blank the display based on value in blank_mode
 Normal blanking 
 VESA blank (vsync off) 
 VESA blank (hsync off) 
 Poweroff 
 Unblanking 
 from DstType_16Bpp_444 
   Change the resolution by calling the appropriate hardware functions
 Select the smallest mode that allows the desired resolution to be
  displayed. If desired, the x and y parameters can be rounded up to
  match the selected mode.
   w100fb_check_var():
   Get the video params out of 'var'. If a value doesn't fit, round it up,
   if it's too big, return -EINVAL.
 171521; 
  w100fb_set_par():
 	Set the user defined part of the display for the specified console
   by looking at the values in info.var
   Frame buffer operations
 Remap the chip base address 
 Map the register space 
 Identify the chip 
 Remap the framebuffer 
 171521; 
 ------------------- chipset specific functions -------------------------- 
 Prevent display updates 
 Enable display updates 
  Initialization of critical w100 hardware
	 This is what the fpga_init code does on reset. May be wrong
 Set up CIF 
 Setup cfgINTF_CNTL and cfgCPU defaults 
 set up the apertures 
 Set the hardware to 565 colour 
 Initialise the GPIO lines 
 system clock auto changing? 
 The PLL Fout is determined by (XtalFreq(M+1))  ((N_int+1) + (N_fac8)) 
 12.5MHz Crystal PLL Table 
freq     M   N_int    N_fac  tfgoal  lock_time 
  50.00 MHz 
  75.00 MHz 
 100.00 MHz 
 125.00 MHz 
 150.00 MHz 
 Terminator 
 14.318MHz Crystal PLL Table 
freq     M   N_int    N_fac  tfgoal  lock_time 
 tfgoal guessed 
  50.05 MHz 
 tfgoal guessed 
  75.08 MHz 
 100.10 MHz 
 16MHz Crystal PLL Table 
freq     M   N_int    N_fac  tfgoal  lock_time 
 tfgoal guessed 
 tfgoal guessed 
 tfgoal guessed 
 tfgoal guessed 
 Select the test clock source and reset 
 set reset 
 clear reset 
 Run clock test 
 Give the test time to complete 
 Return the result 
 Initial Settings 
 power down 
 not reset 
 Hi-Z 
 VCO gain = 0 
 VCO frequency range control = off 
 current offset inside VCO = 0 
	 Wai Ming 80 percent of VDD 1.3V gives 1.04V, minimum operating voltage is 1.08V
	  therefore, commented out the following lines
	  tf80 meant tf100
 set VCO input = 0.8  VDD 
 set VCO input = 0.2  VDD 
 Success 
 slow VCO config 
 Error 
  w100_pll_calibration
 PLL Reset And Lock 
 set VCO input = 0.5  VDD 
 reset time 
 enable charge pump 
 normal 
 set VCO input = Hi-Z, disable DAC 
 lock time 
 PLL locked 
 auto mode 
 disable fast to normal 
 disable normal to fast 
 Set system clock source to XTAL whilst adjusting the PLL! 
 auto mode 
 reenable fast to normal 
 reenable normal to fast  
 freq = target frequency of the PLL 
 Set up an initial state.  Some valuesfields set
 Pfast = 1 
 Pslow = 1 
 Dynamic 
 Dynamic 
 Dynamic 
 Dynamic 
 Dynamic 
 Dynamic 
 Dynamic 
 Dynamic 
 Dynamic 
 P = 2 
 Dynamic 
 M = 1 
 N = 1.0 
 uses VCO clock 
 Hi-Z 
 normal mode (0, 1, 3) 
 PM4,ENG 
 PM4,ENG 
 manual mode 
  Setup the w100 clocks for the specified mode
 w3200 doesn't like undefined bits being set so zero register values first 
 Hack for overlay in ext memory 
 Map Internal Memory at FB Base 
		 Unmap External Memory - value is probably irrelevant but may have meaning
 Map Internal Memory to its default location 
 Map External Memory at FB Base 
 See if the mode has been rotated 
 180 degree 
 else 0 degree 
 270 degree 
 90 degree 
 w32xx doesn't like undefined bits 
 Zaurus needs this 
 0 
 180 
 90 
 270 
 panel xres, not mode 
 Set the pixel clock source and divider 
  Work out how long the sync pulse lasts
  Value is 1(time in seconds)
 bit20=0 
 bit31:24=0xff 
 bit18=0 
 bit19=1 
 wait 1us 
 CKE: Tri-State 
 bit30=1 
 CLK: Stop 
 bit0=0 
 bit2=1 
 VSync timeout = 30[ms] > 16.8[ms] 
 set vline pos  
 disable vline irq 
 clear vline irq status 
 enable vline irq 
 clear vline irq status 
 disable vline irq 
 clear vline irq status 
   linuxdriversvideovfb.c -- Virtual frame buffer device
       Copyright (C) 2002 James Simmons
 	Copyright (C) 1997 Geert Uytterhoeven
   This file is subject to the terms and conditions of the GNU General Public
   License. See the file COPYING in the main directory of this archive for
   more details.
       RAM we reserve for the frame buffer. This defines the maximum screen
       size
       The default can be overridden if the driver is compiled as a module
 1 MB 
 disabled by default 
       Internal routines
       Setting the video mode has been split into two parts.
       First part, xxxfb_check_var, must not write anything
       to hardware, it should only verify and adjust var.
       This means it doesn't alter par but it does use hardware
       data from it to check this var. 
	
	   FB_VMODE_CONUPDATE and FB_VMODE_SMOOTH_XPAN are equal!
	   as FB_VMODE_SMOOTH_XPAN is only used internally
	
	   Some very basic checks
	
	   Memory limit
	
	  Now that we checked it we alter var. The reason being is that the video
	  mode passed in might not work but slight changes to it might make it 
	  work. This way we let the user know what is acceptable.
 RGBA 5551 
 RGB 565 
 RGB 888 
 RGBA 8888 
 This routine actually sets the video mode. It's in here where we
  the hardware state info->par and fix which can be affected by the 
  change in par. For this driver it doesn't do much. 
       Set a single color register. The values supplied are already
       rounded down to the hardware's capabilities (according to the
       entries in the var structure). Return != 0 for invalid regno.
 no. of hw registers 
	
	  Program hardware... do anything you want with transp
 grayscale works only partially under directcolor 
 grayscale = 0.30R + 0.59G + 0.11B 
	 Directcolor:
	    var->{color}.offset contains start of bitfield
	    var->{color}.length contains length of bitfield
	    {hardwarespecific} contains width of RAMDAC
	    cmap[X] is programmed to (X << red.offset) | (X << green.offset) | (X << blue.offset)
	    RAMDAC[X] is programmed to (red, green, blue)
	 
	  Pseudocolor:
	     var->{color}.offset is 0 unless the palette index takes less than
	                         bits_per_pixel bits and is stored in the upper
	                         bits of the pixel value
	     var->{color}.length is set so that 1 << length is the number of available
	                         palette entries
	     cmap is not used
	     RAMDAC[X] is programmed to (red, green, blue)
	 
	  Truecolor:
	     does not use DAC. Usually 3 are present.
	     var->{color}.offset contains start of bitfield
	     var->{color}.length contains length of bitfield
	     cmap is programmed to (red << red.offset) | (green << green.offset) |
	                       (blue << blue.offset) | (transp << transp.offset)
	     RAMDAC does not exist
 expect 8 bit DAC 
 hey, there is bug in transp handling... 
 Truecolor has hardware independent palette 
       Pan or Wrap the Display
       This call looks only at xoffset, yoffset and the FB_VMODE_YWRAP flag
       Most drivers don't need their own mmap function 
  The virtual framebuffer driver is only enabled if explicitly
  requested by passing 'video=vfb:' (or any actual options).
 Test disable for backwards compatibility 
  MODULE  
       Initialisation
	
	  For real video cards we use ioremap.
 MODULE 
 SPDX-License-Identifier: GPL-2.0-only
   linuxdriversvideoacornfb.c
   Copyright (C) 1998-2001 Russell King
  Frame buffer code for Acorn platforms
  NOTE: Most of the modes with X!=640 will disappear shortly.
  NOTE: Startup setting of HS & VS polarity not supported.
        (do we need to support it if we're coming up in 640x480?)
  FIXME: (things broken by the "new improved" FBCON API)
   - Blanking 8bpp displays with VIDC
  Default resolution.
  NOTE that it has to be supported in the table towards
  the end of this file.
  define this to debug the video mode selection
  Translation from RISC OS monitor types to actual
  HSYNC and VSYNC frequency ranges.  These are
  probably not right, but they're the best info I
  have.  Allow 1% either way on the nominal for TVs.
 TV		
 Multi Freq	
 Hi-res mono	
 VGA		
 SVGA		
 set by setup.c 
 VIDC20 has a different set of rules from the VIDC:
   hcr  : must be multiple of 4
   hswr : must be even
   hdsr : must be even
   hder : must be even
   vcr  : >= 2, (interlace, must be odd)
   vswr : >= 1
   vdsr : >= 1
   vder : >= vdsr
 should be FB_SYNC_COMP 
 RiscPC doesn't use the VIDC's VRAM control. 
	 The data bus width is dependent on both the type
	  and amount of video memory.
	      DRAM	32bit low
	  1MB VRAM	32bit
	  2MB VRAM	64bit
  We have to take note of the VIDC20's 16-bit palette here.
  The VIDC20 looks up a 16 bit pixel as follows:
    bits   111111
           5432109876543210
    red            ++++++++  (8 bits,  7 to 0)
   green       ++++++++      (8 bits, 11 to 4)
    blue   ++++++++          (8 bits, 15 to 8)
  We use a pixel which looks like:
    bits   111111
           5432109876543210
    red               +++++  (5 bits,  4 to  0)
   green         +++++       (5 bits,  9 to  5)
    blue    +++++            (5 bits, 14 to 10)
 Palette register pointer auto-increments 
  Before selecting the timing parameters, adjust
  the resolution to fit the rules.
 xres must be even 
	
	  We don't allow xres_virtual to differ from xres
	
	  Now, find a value for yres_virtual which allows
	  us to do ywrap scrolling.  The value of
	  yres_virtual must be such that the end of the
	  displayable frame buffer must be aligned with
	  the start of a font line.
	
	  If minimum screen size is greater than that we have
	  available, reject it.
	 Find int 'y', such that y  fll == s  sam < maxsize
	  y = s  sam  fll; s = maxsize  sam
			
			  failed, use ypan
	
	  Fix yres & yoffset if needed.
 hsync_len must be even 
 left_margin must be even 
 right_margin must be even 
	
	  hs(Hz) = 10^12  (pixclock  xtotal)
	  vs(Hz) = hs(Hz)  ytotal
	 
	  No need to do long long divisions or anything
	  like that if you factor it correctly
	
	  FIXME: Find the font height
	
	  Check to see if the pixel rate is valid.
	
	  Validate and adjust the resolution to
	  match the video generator hardware.
	
	  Validate the timing against the
	  monitor hardware.
  Everything after here is initialisation!!!
 320x256 @ 50Hz 
 640x250 @ 50Hz, 15.6 kHz hsync 
 640x256 @ 50Hz, 15.6 kHz hsync 
 640x512 @ 50Hz, 26.8 kHz hsync 
 640x250 @ 70Hz, 31.5 kHz hsync 
 640x256 @ 70Hz, 31.5 kHz hsync 
 640x352 @ 70Hz, 31.5 kHz hsync 
 640x480 @ 60Hz, 31.5 kHz hsync 
 800x600 @ 56Hz, 35.2 kHz hsync 
 896x352 @ 60Hz, 21.8 kHz hsync 
 1024x 768 @ 60Hz, 48.4 kHz hsync 
 1280x1024 @ 60Hz, 63.8 kHz hsync 
	
	  setup initial parameters
  setup acornfb options:
   mon:hmin-hmax:vmin-vmax:dpms:width:height
 	Set monitor parameters:
 		hmin   = horizontal minimum frequency (Hz)
 		hmax   = horizontal maximum frequency (Hz)	(optional)
 		vmin   = vertical minimum frequency (Hz)
 		vmax   = vertical maximum frequency (Hz)	(optional)
 		dpms   = DPMS supported?			(optional)
 		width  = width of picture in mm.		(optional)
 		height = height of picture in mm.		(optional)
  montype:type
 	Set RISC-OS style monitor type:
 		0 (or tv)	- TV frequency
 		1 (or multi)	- Multi frequency
 		2 (or hires)	- Hi-res monochrome
 		3 (or vga)	- VGA
 		4 (or svga)	- SVGA
 		auto, or option missing
 				- try hardware detect
  dram:size
 	Set the amount of DRAM to use for the frame buffer
 	(even if you have VRAM).
 	size can optionally be followed by 'M' or 'K' for
 	MB or KB respectively.
  Detect type of monitor connected
   For now, we just assume SVGA
	
	  Try to select a suitable default mode
	
	  If vram_size is set, we are using VRAM in
	  a Risc PC.  However, if the user has specified
	  an amount of DRAM then use that instead.
	
	  Limit maximum screen size.
		
		  RiscPC needs to allocate the DRAM memory
		  for the framebuffer if we are not using
		  VRAM.
	
	  Lookup the timing for this resolution.  If we can't
	  find it, then we can't restore it if we change
	  the resolution, so we disable this feature.
		
		  If we found an exact match, all ok.
		
		  If we found an exact match, all ok.
	
	  If we didn't find an exact match, try the
	  generic database.
 SPDX-License-Identifier: GPL-2.0-only
  driversvideopvr2fb.c
  Frame buffer and fbcon support for the NEC PowerVR2 found within the Sega
  Dreamcast.
  Copyright (c) 2001 M. R. Brown <mrbrown@0xd6.org>
  Copyright (c) 2001 - 2008  Paul Mundt <lethal@linux-sh.org>
  This driver is mostly based on the excellent amifb and vfb sources.  It uses
  an odd scheme for converting hardware values tofrom framebuffer values,
  here are some hacked-up formulas:
   The Dreamcast has screen offsets from each side of its four borders and
   the start offsets of the display window.  I used these values to calculate
   'pseudo' values (think of them as placeholders) for the fb video mode, so
   that when it came time to convert these values back into their hardware
   values, I could just add mode- specific offsets to get the correct mode
   settings:
       left_margin = diwstart_h - borderstart_h;
       right_margin = borderstop_h - (diwstart_h + xres);
       upper_margin = diwstart_v - borderstart_v;
       lower_margin = borderstop_v - (diwstart_h + yres);
       hsync_len = borderstart_h + (hsync_total - borderstop_h);
       vsync_len = borderstart_v + (vsync_total - borderstop_v);
   Then, when it's time to convert back to hardware settings, the only
   constants are the borderstart_ offsets, all other values are derived from
   the fb video mode:
        PAL
       borderstart_h = 116;
       borderstart_v = 44;
       ...
       borderstop_h = borderstart_h + hsync_total - hsync_len;
       ...
       diwstart_v = borderstart_v - upper_margin;
   However, in the current implementation, the borderstart values haven't had
   the benefit of being fully researched, so some modes may be broken.
 2D video registers 
 Pixel clocks, one for TV output, doubled for VGA output 
 This is for 60Hz - the VTOTAL is doubled for interlaced modes 
 Supported cable types 
 Supported video output types 
 Supported palette types 
  This describes the current video mode
 Clocksline 
 Linesfield 
 Horizontal offset of the display field 
	unsigned int diwstart_v;	 Vertical offset of the display field, for
 Address of image within VRAM 
 Is the display interlaced? 
 Are scanlines output twice? (doublescan) 
 Is horizontal pixel-doubling enabled? 
 MMIO base 
  We do all updating, blanking, etc. during the vertical retrace period
 Change the video mode 
 Update the video mode 
 (Un)Blank the screen 
 Is the screen blanked? 
      Broadcast video modes (PAL and NTSC).  I'm unfamiliar with
      PAL-M and PAL-N, but from what I've read both modes parallel PAL and
      NTSC, so it shouldn't be a problem (I hope).
 640x480 @ 60Hz interlaced (NTSC) 
 640x240 @ 60Hz (NTSC) 
 XXX: Broken! Don't use... 
 640x480 @ 60hz (VGA) 
 RGB 565 
 RGB 888 
 ARGB 8888 
	
	  We only support the hardware palette for 16 and 32bpp. It's also
	  expected that the palette format has been set by the time we get
	  here, so we don't waste time setting it again.
 RGB 565 
 RGB 888 
 ARGB 8888 
  Determine the cable type and initialize the cable output format.  Don't do
  anything if the cable type has been overidden (via "cable:XX").
 Now select the output format (either composite or other) 
	 XXX: Save the previous val first, as this reg is also AICA
	
	  XXX: It's possible that a user could use a VGA box, change the cable
	  type in hardware (i.e. switch from VGA<->composite), then change
	  modes (i.e. switching to another VT).  If that happens we should
	  automagically change the output format to cope, but currently I
	  don't have a VGA box to make sure this works properly.
	
	  XXX: Need to be more creative with this (i.e. allow doublecan for
	  PALNTSC output).
 XXX: Check for start values here... 
 XXX: Check hardware for PAL-compatibility 
 NTSC video output 
 VGA mode 
 XXX: What else needs to be checked? 
		
		  XXX: We have a little freedom in VGA modes, what ranges
		  should be here (i.e. hsyncvsync totals, etc.)?
 Calculate the remainding offsets 
	
	  XXX: Need to be more creative with this (i.e. allow doublecan for
	  PALNTSC output).
 PAL video output 
 XXX: Should be using a range here ... ? 
 NTSC video output 
 Check memory sizes 
 Update the start address of the display image 
  Initialize the video mode.  Currently, the 16bpp and 24bpp modes aren't
  very stable.  It's probably due to the fact that a lot of the 2D video
  registers are still undocumented.
 hsync and vsync totals 
 column height, modulo, row width 
	 since we're "panning" within vram, we need to offset things based
 display address, long and short fields 
 border horizontal, border vertical, border color 
 display window start position 
 misc. settings 
 clock doubler (for VGA), scan doubler, display enable 
 bits per pixel 
	 video enable, color sync, interlace,
|4) << 4), DISP_SYNCCONF);
 Simulate blanking by making the border cover the entire screen 
			
			   Clamp the unsigned nr_pages to zero so that the
			   error handling works. And leave ret at whatever
			   -errno value was returned from GUP.
			
			  Use -EINVAL to represent a mildly desperate guess at
			  why we got fewer pages (maybe even zero pages) than
			  requested.
 Half-assed contig check 
 As we do this in one shot, it's either all or nothing.. 
 Not contiguous, writeout per-page instead.. 
 CONFIG_PVR2_DMA 
  pvr2fb_common_init
  Common init code for the PVR2 chips.
  This mostly takes care of the common aspects of the fb setup and
  registration. It's expected that the board-specific init code has
  already setup pvr2_fix with something meaningful at this point.
  Device info reporting is also done here, as well as picking a sane
  default from the modedb. For board-specific modelines, simply define
  a per-board modedb.
  Also worth noting is that the cable and video output types are likely
  always going to be VGA for the PCI-based PVR2 boards, but we leave this
  in for flexibility anyways. Who knows, maybe someone has tv-out on a
  PCI-based version of these things ;-)
Must write PIXDEPTH to register before anything is displayed - so force init 
 Make a guess at the monitor based on the attached cable 
 Not VGA, using a TV (taken from acornfb) 
	
	  XXX: This needs to pull default video output via BIOS or other means
	
	  Nothing exciting about the DC PVR2 .. only a measly 8MiB.
 RAM starts here 
 registers start here 
 CONFIG_SH_DREAMCAST 
	
	  Slightly more exciting than the DC PVR2 .. 16MiB!
 CONFIG_PCI 
  Parse command arguments.  Supported arguments are:
     inverse                             Use inverse color maps
     cable:composite|rgb|vga             Override the video cable type
     output:NTSC|PAL|VGA                 Override the video output format
     <xres>x<yres>[-<bpp>][@<refresh>]   or,
     <name>[-<bpp>][@<refresh>]          Startup using this video mode
   linuxdriversvideo68328fb.c -- Low level implementation of the
                                    mc68x328 LCD frame buffer device
 	Copyright (C) 2003 Georges Menie
   This driver assumes an already configured controller (e.g. from config.c)
   Keep the code clean of board specific initialization.
   This code has not been tested with colors, colormap management functions
   are minimal (no colormap data written to the 68328 registers...)
   initial version of this driver:
     Copyright (C) 1998,1999 Kenneth Albanowski <kjahds@kjahds.com>,
                             The Silver Hammer Group, Ltd.
   this version is based on :
   linuxdriversvideovfb.c -- Virtual frame buffer device
       Copyright (C) 2002 James Simmons
 	Copyright (C) 1997 Geert Uytterhoeven
   This file is subject to the terms and conditions of the GNU General Public
   License. See the file COPYING in the main directory of this archive for
   more details.
       Interface used by the world
       Internal routines
       Setting the video mode has been split into two parts.
       First part, xxxfb_check_var, must not write anything
       to hardware, it should only verify and adjust var.
       This means it doesn't alter par but it does use hardware
       data from it to check this var. 
	
	   FB_VMODE_CONUPDATE and FB_VMODE_SMOOTH_XPAN are equal!
	   as FB_VMODE_SMOOTH_XPAN is only used internally
	
	   Some very basic checks
	
	   Memory limit
	
	  Now that we checked it we alter var. The reason being is that the video
	  mode passed in might not work but slight changes to it might make it 
	  work. This way we let the user know what is acceptable.
 RGBA 5551 
 RGB 565 
 RGB 888 
 RGBA 8888 
 This routine actually sets the video mode. It's in here where we
  the hardware state info->par and fix which can be affected by the 
  change in par. For this driver it doesn't do much. 
       Set a single color register. The values supplied are already
       rounded down to the hardware's capabilities (according to the
       entries in the var structure). Return != 0 for invalid regno.
 no. of hw registers 
	
	  Program hardware... do anything you want with transp
 grayscale works only partially under directcolor 
 grayscale = 0.30R + 0.59G + 0.11B 
	 Directcolor:
	    var->{color}.offset contains start of bitfield
	    var->{color}.length contains length of bitfield
	    {hardwarespecific} contains width of RAMDAC
	    cmap[X] is programmed to (X << red.offset) | (X << green.offset) | (X << blue.offset)
	    RAMDAC[X] is programmed to (red, green, blue)
	  
	  Pseudocolor:
	     uses offset = 0 && length = RAMDAC register width.
	     var->{color}.offset is 0
	     var->{color}.length contains width of DAC
	     cmap is not used
	     RAMDAC[X] is programmed to (red, green, blue)
	  Truecolor:
	     does not use DAC. Usually 3 are present.
	     var->{color}.offset contains start of bitfield
	     var->{color}.length contains length of bitfield
	     cmap is programmed to (red << red.offset) | (green << green.offset) |
	                       (blue << blue.offset) | (transp << transp.offset)
	     RAMDAC does not exist
 expect 8 bit DAC 
 hey, there is bug in transp handling... 
 Truecolor has hardware independent palette 
       Pan or Wrap the Display
       This call looks only at xoffset, yoffset and the FB_VMODE_YWRAP flag
       Most drivers don't need their own mmap function 
 this is uClinux (no MMU) specific code 
       Initialisation
	
	   initialize the default mode from the LCD controller registers
 MODULE 
  linuxdriversvideometronomefb.c -- FB driver for Metronome controller
  Copyright (C) 2008, Jaya Kumar
  This file is subject to the terms and conditions of the GNU General Public
  License. See the file COPYING in the main directory of this archive for
  more details.
  Layout is based on skeletonfb.c by James Simmons and Geert Uytterhoeven.
  This work was made possible by help and equipment support from E-Ink
  Corporation. https:www.eink.com
  This driver is written to be used with the Metronome display controller.
  It is intended to be architecture independent. A board specific driver
  must be used to perform all the physical IO interactions. An example
  is provided as am200epd.c
 Display specific information 
 frame differs from image. frame includes non-visible pixels 
 frame width 
 frame height 
 sdlew 
 sdosz 
 sdor 
 sdces 
 sdcer 
 gdspl 
 gdr1 
 sdshr 
 gdspp 
 gdspw 
 dispc 
 vdlc 
 dsi 
 dsic 
 the waveform structure that is coming from userspace firmware 
 main metronomefb functions 
 here we decode the incoming waveform file and populate metromem 
	 calculating trn. trn is something used to index into
	the waveform. presumably selecting the right one for the
	desired temperature. it works out the offset of the first
 check temperature range table checksum 
 check waveform mode table address checksum 
 check waveform temperature table address checksum 
	 here we do the real work of putting the waveform into the
	 setup display command
	we can't immediately set the opcode since the controller
	will try parse the command before we've set it all up
 set the args ( 2 bytes ) for display 
 border update 
 the rest are 0 
 display cmd 
 setup power up command 
 pwr up pseudo cmd 
 set pwr1,2,3 to 1024 
 the rest are 0 
	 setup config command
	we can't immediately set the opcode since the controller
 the rest are 0 
 config cmd 
	 setup init command
	we can't immediately set the opcode since the controller
	will try parse the command before we've set it all up
 set the args ( 2 bytes ) for init 
 the rest are 0 
 init cmd 
 copy from vm to metromem 
 swizzle from vm to metromem and recalc cksum at the same time
 this is called back from the deferred io workqueue 
 walk the written page list and swizzle the data 
  this is the slow path from userspace. they can seek and write to
  the fb. it is based on fb_sys_write
 pick up board specific routines 
 try to count device specific driver, if can't, platform recalls 
	 we have two blocks of memory.
	info->screen_base which is vm, and is the fb used by apps.
	par->metromem which is physically contiguous memory and
	contains the display controller commands, waveform,
	processed image data and padding. this is the data pulled
	by the device's LCD controller and pushed to Metronome.
	the metromem memory is allocated by the board driver and
	 we need to add a spare page because our csum caching scheme walks
 this table caches per page csum values. 
	 the physical framebuffer that we use is setup by
	  the platform device driver. It will provide us
 after this point we should have a framebuffer 
	 load the waveform in. assume mode 3, temp 31 for now
		a) request the waveform file from userspace
 set cmap 
 SPDX-License-Identifier: GPL-2.0-or-later
   pxa3xx-gcu.c - Linux kernel module for PXA3xx graphics controllers
   This driver needs a DirectFB counterpart in user space, communication
   is handled via mmap()ed memory areas and an ioctl.
   Copyright (c) 2009 Daniel Mack <daniel@caiaq.de>
   Copyright (c) 2009 Janine Kropp <nin@directfb.org>
   Copyright (c) 2009 Denis Oliver Kropp <dok@directfb.org>
  WARNING: This controller is attached to System Bus 2 of the PXA which
  needs its arbiter to be enabled explicitly (CKENB & 1<<9).
  There is currently no way to do this from Linux, so you need to teach
  your bootloader for now.
 #define PXA3XX_GCU_DEBUG 
 #define PXA3XX_GCU_DEBUG_TIMER 
 disable interrupts 
 reset hardware 
 set up the ring buffer pointers 
 enable all IRQs except EOB 
 ring base address 
 ring tail address 
 ring length 
			 There is no more data prepared by the userspace.
			  Set hw_running = 0 and wait for the next userspace
 set ring buffer length to zero 
 Clear the interrupt 
	 Does not need to be atomic. There's a lock in user space,
	 Does not need to be atomic. There's a lock in user space,
 Misc device layer 
  provide an empty .open callback, so the core sets file->private_data
  for us.
	 Does not need to be atomic. There's a lock in user space,
 Last word reserved for batch buffer end command 
 Wait for a free buffer 
	
	  Get buffer from free list
 Copy data from user into buffer 
 Append batch buffer end command 
	
	  Add buffer to ready list
 hand out the shared data area 
		 hand out the MMIO base for direct register access
 init the timer structure 
	 we allocate the misc device structure as part of our own allocation,
	  so we can get a pointer to our priv structure later on with
	  container_of(). This isn't really necessary as we have a fixed minor
 handle IO resources 
 enable the clock 
 request the IRQ 
 allocate dma memory 
 register misc device 
   Driver for AT91 LCD Controller
   Copyright (C) 2007 Atmel Corporation
  This file is subject to the terms and conditions of the GNU General Public
  License.  See the file COPYING in the main directory of this archive for
  more details.
 LCD Controller info data structure, stored in device platform_data 
 configurable parameters 
 words 
 words 
 some bl->props field just changed 
	 REVISIT there may be a meaningful difference between
	  fb_blank and power ... there seem to be some cases
	  this doesn't handle correctly.
 contrast pwm can be 'inverted' 
 have some default contrastbacklight settings 
 STN display 
 Turn off the LCD controller and the DMA controller 
 Wait for the LCDC core to become idle 
 Wait for DMA engine to become idle... 
 Set framebuffer DMA base address and pixel offset 
 	atmel_lcdfb_alloc_video_memory - Allocate framebuffer memory
 	@sinfo: the frame buffer to allocate memory for
  	
  	This function is called only from the atmel_lcdfb_probe()
  	so no locking by fb_info->mm_lock around smem_len setting is needed.
       atmel_lcdfb_check_var - Validates a var passed in.
       @var: frame buffer variable screen structure
       @info: frame buffer structure that represents a single frame buffer
 	Checks to see if the hardware supports the state requested by
 	var passed in. This function does not alter the hardware
 	state!!!  This means the data stored in struct fb_info and
 	struct atmel_lcdfb_info do not change. This includes the var
 	inside of struct fb_info.  Do NOT change these. This function
 	can be called on its own if we intent to only test a mode and
 	not actually set it. The stuff in modedb.c is a example of
 	this. If the var passed in is slightly off by what the
 	hardware can support then we alter the var PASSED in to what
 	we can do. If the hardware doesn't support mode change a
 	-EINVAL will be returned by the upper layers. You don't need
 	to implement this function then. If you hardware doesn't
 	support changing the resolution then this function is not
 	needed. In this case the driver would just provide a var that
 	represents the static state the screen is in.
 	Returns negative errno on error, or zero on success.
 choose a suitable mode if possible 
 Do not allow to have real resoulution larger than virtual 
 Force same alignment for each line 
 Saturate vertical and horizontal timings at maximum values 
 Some parameters can't be zero 
 Older SOCs use IBGR:555 rather than BGR:565. 
 RGB:5X5 mode 
 BGR:5X5 mode 
 RGB:888 mode 
 BGR:888 mode 
  LCD reset sequence
       atmel_lcdfb_set_par - Alters the hardware state.
       @info: frame buffer structure that represents a single frame buffer
 	Using the fb_var_screeninfo in fb_info we set the resolution
 	of the this particular framebuffer. This function alters the
 	par AND the fb_fix_screeninfo stored in fb_info. It doesn't
 	not alter var in fb_info since we are using that data. This
 	means we depend on the data in var inside fb_info to be
 	supported by the hardware.  atmel_lcdfb_check_var is always called
 	before atmel_lcdfb_set_par to ensure this.  Again if you can't
 	change the resolution you don't need this function.
 Re-initialize the DMA engine... 
 ...set frame size and burst length = 8 words (?) 
 Now, the LCDC core... 
 Set pixel clock 
 Initialize control register 2 
 Vertical timing 
 Horizontal timing 
 Horizontal value (aka line size) 
 Display size 
 FIFO Threshold: Use formula from data sheet 
 Toggle LCD_MODE every frame 
 Disable all interrupts 
 Enable FIFO & DMA errors 
 ...wait for DMA engine to become idle... 
   	atmel_lcdfb_setcolreg - Optional function. Sets a color register.
       @regno: Which register in the CLUT we are programming
       @red: The red value which can be up to 16 bits wide
 	@green: The green value which can be up to 16 bits wide
 	@blue:  The blue value which can be up to 16 bits wide.
 	@transp: If supported the alpha value which can be up to 16 bits wide.
       @info: frame buffer info structure
   	Set a single color register. The values supplied have a 16 bit
   	magnitude which needs to be scaled in this function for the hardware.
 	Things to take into consideration are how many color registers, if
 	any, are supported with the current color visual. With truecolor mode
 	no color palettes are supported. Here a pseudo palette is created
 	which we store the value in pseudo_palette in struct fb_info. For
 	pseudocolor mode we have a limited color palette. To deal with this
 	we can program what color is displayed for a particular pixel value.
 	DirectColor is similar in that we can program each color field. If
 	we have a static colormap we don't need to implement this function.
 	Returns negative errno on error, or zero on success. In an
 	ideal world, this would have been the case, but as it turns
 	out, the other drivers return 1 on failure, so that's what
 	we're going to do.
 old style I+BGR:555 
				
				  TODO: intensity bit. Maybe something like
				    ~(red[10] ^ green[10] ^ blue[10]) & 1
 new style BGR:565  RGB:565 
 let fbcon do a soft blank for us 
 reset DMA and FIFO to avoid screen shifting 
  LCD controller task (to reset the LCD)
 Allocate colormap 
 sentinel  }
 Enable LCDC Clocks 
 Initialize video memory 
 use a pre-allocated memory buffer 
		
		  Don't clear the framebuffer -- someone may have set
		  up a splash image.
 allocate memory buffer 
 LCDC registers 
 Initialize PWM for contrast or backlight ("off") 
 interrupt 
	 Some operations on the LCDC might sleep and
	
	  Tell the world that we're ready to go
 Power up the LCDC screen 
	
	  We don't want to handle interrupts while the clock is
	  stopped. It may take forever.
 Enable FIFO & DMA errors 
 SPDX-License-Identifier: GPL-2.0-only
 bw2.c: BWTWO frame buffer driver
  Copyright (C) 2003, 2006 David S. Miller (davem@davemloft.net)
  Copyright (C) 1996,1998 Jakub Jelinek (jj@ultra.linux.cz)
  Copyright (C) 1996 Miguel de Icaza (miguel@nuclecu.unam.mx)
  Copyright (C) 1997 Eddie C. Dost (ecd@skynet.be)
  Driver layout based loosely on tgafb.c, see that file for credits.
  Local functions.
   Frame buffer operations
 OBio addresses for the bwtwo registers 
 Status Register Constants 
 Control Register Constants 
 Status Register Constants 
       bw2_blank - Optional function.  Blanks the display.
       @blank: the blank mode we want.
       @info: frame buffer structure that represents a single frame buffer
 Unblanking 
 Normal blanking 
 VESA blank (vsync off) 
 VESA blank (hsync off) 
 Poweroff 
   Initialisation
 SPDX-License-Identifier: GPL-2.0-or-later
  Cirrus Logic CLPS711X FB driver
  Copyright (C) 2014 Alexander Shiyan <shc_work@mail.ru>
  Based on driver by Russell King <rmk@arm.linux.org.uk>
 Registers relative to LCDCON 
 gray = 0.30R + 0.58G + 0.11B 
 LCDCON must only be changed while the LCD is disabled 
 Return happy 
 Physical address should be aligned to 256 MiB 
 Force disable LCD on any mismatch 
 Setup start FB address 
 Clean FB memory 
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright 2008 Freescale Semiconductor, Inc. All Rights Reserved.
   Freescale DIU Frame Buffer device driver
   Authors: Hongjun Chen <hong-jun.chen@freescale.com>
            Paul Widmer <paul.widmer@freescale.com>
            Srikanth Srinivasan <srikanth.srinivasan@freescale.com>
            York Sun <yorksun@freescale.com>
    Based on imxfb.c Copyright (C) 2004 S.Hauer, Pengutronix
 1 for plane 0, 2 for planes 1 & 2 each 
 HW cursor parameters 
 INT_STATUSINT_MASK field descriptions 
 Vsync interrupt  
 Vsync interrupt for write back operation 
 Under run exception interrupt 
 Display parameters error interrupt 
 Lines before vsync. interrupt 
  List of supported video modes
  The first entry is the default video mode.  The remain entries are in
  order if increasing resolution and frequency.  The 320x240-60 mode is
  the initial AOI for the second and third planes.
 Plane 0, only one AOI that fills the screen 
 Plane 1, first AOI 
 Plane 1, second AOI 
 Plane 2, first AOI 
 Plane 2, second AOI 
 aoi display x offset to physical screen 
 aoi display y offset to physical screen 
  struct fsl_diu_data - per-DIU data structure
  @dma_addr: DMA address of this structure
  @fsl_diu_info: fb_info objects, one per AOI
  @dev_attr: sysfs structure
  @irq: IRQ
  @monitor_port: the monitor port this DIU is connected to
  @diu_reg: pointer to the DIU hardware registers
  @reg_lock: spinlock for register access
  @dummy_aoi: video buffer for the 4x4 32-bit dummy AOI
  dummy_ad: DIU Area Descriptor for the dummy AOI
  @ad[]: Area Descriptors for each real AOI
  @gamma: gamma color table
  @cursor: hardware cursor data
  @blank_cursor: blank cursor for hiding cursor
  @next_cursor: scratch space to build load cursor
  @edid_data: EDID information buffer
  @has_edid: whether or not the EDID buffer is valid
  This data structure must be allocated with 32-byte alignment, so that the
  internal fields can be aligned properly.
 It's easier to parse the cursor data as little-endian 
 Blank cursor data -- used to hide the cursor 
 Scratch cursor data -- used to build new cursor 
 Determine the DMA address of a member of the fsl_diu_data structure 
  fsl_diu_name_to_port - convert a port name to a monitor port enum
  Takes the name of a monitor port ("dvi", "lvds", or "dlvds") and returns
  the enum fsl_diu_monitor_port that corresponds to that string.
  For compatibility with older versions, a number ("0", "1", or "2") is also
  supported.
  If the string is unknown, DVI is assumed.
  If the particular port is not supported by the platform, another port
  (platform-specific) is chosen instead.
  Workaround for failed writing desc register of planes.
  Needed with MPC5121 DIU rev 2.0 silicon.
 AOI0 closed 
 AOI1 open 
 AOI0 closed 
 AOI1 open 
 AOI0 open 
 AOI0 was open 
 AOI1 is open 
 move AOI1 to the first 
 AOI1 was closed 
 close AOI 0 
 AOI1 is open 
 move AOI1 to the first 
 AOI1 was closed 
 close AOI 0 
 AOI1 is not the first in the chain 
 AOI0 is open, must be the first 
 AOI1 is the first in the chain 
 close AOI 1 
 AOI1 is not the first in the chain 
 AOI0 is open, must be the first 
 AOI1 is the first in the chain 
 close AOI 1 
  Checks to see if the hardware supports the state requested by var passed
  in. This function does not alter the hardware state! If the var passed in
  is slightly off by what the hardware can support then we alter the var
  PASSED in to what we can do. If the hardware doesn't support mode change
  a -EINVAL will be returned by the upper layers.
 Copy nonstd field tofrom sync for fbset usage 
 Prep for DIU init  - gamma table, cursor table 
 Program DIU registers 
 Set background to grey 
 Horizontal and vertical configuration register 
 BP_H 
 PW_H 
 FP_H 
 BP_V 
 PW_V  
 FP_V  
	
	  The PLUT register is defined differently on the MPC5121 than it
	  is on other SOCs.  Unfortunately, there's no documentation that
	  explains how it's supposed to be programmed, so for now, we leave
	  it at the default value on the MPC5121.
	 
	  For other SOCs, program it for the highest priority, which will
	  reduce the chance of underrun. Technically, we should scale the
	  priority to match the screen resolution, but doing that properly
	  requires delicate fine-tuning for each use-case.
 Enable the DIU 
  Using the fb_var_screeninfo in fb_info we set the aoi of this
  particular framebuffer. It is a light version of fsl_diu_set_par.
 AOI should not be greater than display size 
  fsl_diu_get_pixel_format: return the pixel format for a given color depth
  The pixel format is a 32-bit value that determine which bits in each
  pixel are to be used for each color.  This is the default function used
  if the platform does not define its own version.
 0x88883316 
 0x88082219 
 0x65053118 
  Copies a cursor image from user space to the proper place in driver
  memory so that the hardware can display the cursor image.
  Cursor data is represented as a sequence of 'width' bits packed into bytes.
  That is, the first 8 bits are in the first byte, the second 8 bits in the
  second byte, and so on.  Therefore, the each row of the cursor is (width +
  7)  8 bytes of 'data'
  The DIU only supports cursors up to 32x32 (MAX_CURS).  We reject cursors
  larger than this, so we already know that 'width' <= 32.  Therefore, we can
  simplify our code by using a 32-bit big-endian integer ("line") to read in
  a single line of pixels, and only look at the top 'width' bits of that
  integer.
  This could result in an unaligned 32-bit read.  For example, if the cursor
  is 24x24, then the first three bytes of 'image' contain the pixel data for
  the top line of the cursor.  We do a 32-bit read of 'image', but we look
  only at the top 24 bits.  Then we increment 'image' by 3 bytes.  The next
  read is unaligned.  The only problem is that we might read past the end of
  'image' by 1-3 bytes, but that should not cause any problems.
  Set a hardware cursor.  The image data for the cursor is passed via the
  fb_cursor object.
 The cursor size has changed 
		
		  The DIU cursor is a fixed size, so when we get this
		  message, instead of resizing the cursor, we just clear
		  all the image data, in expectation of new data.  However,
		  in tests this control does not appear to be normally
		  called.
 The cursor position has changed (cursor->image.dx|dy) 
	
	  FB_CUR_SETIMAGE - the cursor image has changed
	  FB_CUR_SETCMAP  - the cursor colors has changed
	  FB_CUR_SETSHAPE - the cursor bitmask has changed
		
		  Determine the size of the cursor image data.  Normally,
		  it's 8x16.
 Use 32-bit operations on the data to improve performance 
	
	  Show or hide the cursor.  The cursor data is always stored in the
	  'cursor' memory block, and the actual cursor position is always in
	  the DIU's CURS_POS register.  To hide the cursor, we redirect the
	  CURSOR register to a blank cursor.  The show the cursor, we
	  redirect the CURSOR register to the real cursor data.
  Using the fb_var_screeninfo in fb_info we set the resolution of this
  particular framebuffer. This function alters the fb_fix_screeninfo stored
  in fb_info. It does not alter var in fb_info since we are using that
  data. This means we depend on the data in var inside fb_info to be
  supported by the hardware. fsl_diu_check_var is always called before
  fsl_diu_set_par to ensure this.
 Alloc & dealloc each time resolutionbpp change 
 Memory allocation for framebuffer 
 AOI should not be greater than display size 
 Disable chroma keying function 
  Set a single color register. The values supplied have a 16 bit magnitude
  which needs to be scaled in this function for the hardware. Things to take
  into consideration are how many color registers, if any, are supported with
  the current color visual. With truecolor mode no color palettes are
  supported. Here a pseudo palette is created which we store the value in
  pseudo_palette in struct fb_info. For pseudocolor mode we have a limited
  color palette.
	
	  If greyscale is true, then we convert the RGB value
	  to greyscale no matter what visual we are using.
		
		  16-bit True Colour.  We encode the RGB value
		  according to the RGB bitfield information.
  Pan (or wrap, depending on the `vmode' field) the display using the
  'xoffset' and 'yoffset' fields of the 'var' structure. If the values
  don't fit, return -EINVAL.
 No change, do nothing 
 set panel information 
 set panel winformation 
 Force table reload 
 enable underrun detection 
 enable vertical sync 
 turn on fb if count == 1
 free boot splash memory on first devfb0 open 
 turn off fb if count == 0
 Disable interrupts only if all AOIs are closed 
 Now build modedb from EDID 
		
		  For plane 0 we continue and look into
		  driver's internal modedb.
 Still not found, use preferred mode from database if any 
		
		  Get preferred timing. If not found,
		  first mode in database will be used.
 This is the workaround for underrun 
  Power management hooks. Note that we won't be called from IRQ context,
  unlike the blank functions above, so we may sleep.
 CONFIG_PM 
		 All AOIs need adjust pixel format
		  fsl_diu_set_par only change the pixsel format here
 DMA addr of fsl_diu_data struct 
	
	  dma_alloc_coherent() uses a page allocator, so the address is
	  always page-aligned.  We need the memory to be 32-byte aligned,
	  so that's good.  However, if one day the allocator changes, we
	  need to catch that.  It's not worth the effort to handle unaligned
	  alloctions now because it's highly unlikely to ever be a problem.
		
		  We store the physical address of the AD in the reserved
		  'paddr' field of the AD itself.
 Initialize the AOI data structure 
 Get the EDID data from the device tree, if present 
 Get the IRQ of the DIU 
 Initialize the dummy Area Descriptor 
	
	  Let DIU continue to display splash screen if it was pre-initialized
	  by the bootloader; otherwise, clear the display.
	
	  Older versions of U-Boot leave interrupts enabled, so disable
	  all of them and clear the status register.
	
	  For kernel boot options (in 'video=xxxfb:<options>' format)
	
	  Must to verify set_pixel_clock. If not implement on platform,
	  then that means that there is no platform support for the DIU.
	
	  Freescale PLRU requires 138 times the cache size to do a proper
	  displacement flush
 SPDX-License-Identifier: GPL-2.0-only
  Frame buffer driver for Trident TGUI, Blade and Image series
  Copyright 2001, 2002 - Jani Monoses   <jani@iv.ro>
  Copyright 2009 Krzysztof Helt <krzysztof.h1@wp.pl>
  CREDITS:(in order of appearance)
 	skeletonfb.c by Geert Uytterhoeven and other fb code in driversvideo
 	Special thanks ;) to Mattia Crivellini <tia@mclink.it>
 	much inspired by the XFree86 4.x Trident driver sources
 	by Alan Hourihane the FreeVGA project
 	Francesco Salvestrini <salvestrini@users.sf.net> XP support,
 	code, suggestions
  TODO:
 	timing value tweaking so it looks good on every monitor in every mode
 iospace virtual memory address 
 engine operation... 
 defaults which are normally overriden by user values 
 video mode 
 VIA MPV4 integrated version 
 case CYBERBLDAEXPm8:  Strange 
 case CYBERBLDAEXPm16: Strange 
 disable drive - don't drive hi 
 drive low 
 disable drive - don't drive hi 
 drive low 
 not sure if this check is OK 
 no getscl 
  Blade specific acceleration.
  BladeXP specific acceleration functions
 Timeout 
 Reset engine 
  Image specific acceleration functions
  TGUI 944096XX acceleration
 disable clipping 
  Accel functions called by the upper layers
  Hardware access functions
 flip-flop to index 
 Goto New Mode 
 Unprotect registers 
 Enable MMIO 
 Goto New Mode 
 Unprotect registers 
 Disable MMIO 
  Return flat panel's maximum x resolution 
 Set pitch 
 chips older than TGUI9660 have only 1 width bit in AddColReg 
 touching the other one breaks I2CDDC 
 For resolutions smaller than FP resolution stretch 
 For resolutions smaller than FP resolution center 
 Address of first shown pixel in display memory 
 Set dotclock frequency 
 Set number of lines for flat panels
  If we see that FP is active we assume we have one.
  Otherwise we have a CRT display. User can override.
 Try detecting the video memory size 
 If memory size provided by user 
 XP 
 XP 
 XP 
 XP 
 XP 
 XP 
 See if we can handle the video mode described in var 
 230MHz for most 3D chips 
 check color depth 
 check whether resolution fits on panel and in memory 
 various resolution checks 
 prevent from position overflow for acceleration 
 acceleration requires line length to be power of 2 
 datasheet specifies how to set panning only up to 4 MB 
 The clock is doubled for 32 bpp 
 Pan the display 
 Set the hardware to the requested video mode 
		
		  on flat panels with native size larger
		  than requested resolution decide whether
		  we stretch or center
 vertical timing values 
 horizontal timing values 
 higher bits of vertical timing values 
 line compare bit 10 
FIXME	if (info->var.vmode & FB_VMODE_DOUBLE) tmp |= 0x80;   double scan for 200 line modes 
 enable linear addressing 
 enable access extended memory 
 enable GE for text acceleration 
 both IO, linear enable 
 MMIO & PCI read and write burst enable 
 set char clock 8 dots wide 
 enable 4 maps because needed in chain4 mode 
 memory mode enable bitmaps ?? 
 convert from picoseconds to kHz 
 divide clock by 2 if 32bpp chain4 mode display and CPU path 
 no CGA compat, allow 256 col 
 graphics mode 
 planes? 
 graphics mode and support 256 color modes 
 planes 
 horizontal pel panning 
 colors 
 flip-flop to index 
 enable attr 
 Set one color register 
 RGB 565 
 ARGB 8888 
 Try blanking the screen. For flat panels it does nothing 
 Read DPMS Control 
 Screen: On, HSync: On, VSync: On 
 Screen: Off, HSync: On, VSync: On 
 Screen: Off, HSync: Off, VSync: On 
 Screen: Off, HSync: On, VSync: Off 
 Screen: Off, HSync: Off, VSync: Off 
 let fbcon do a softblank for us 
 If PCI id is 0x9660 then further detect chip type 
 3DImage family left 
 TGUI 944096XX family 
 setup MMIO region 
 setup framebuffer memory 
 fill all other info->var's fields 
 Prepare startup mode 
 List of boards that we are trying to support 
  Parse user specified options (`video=trident:')
  example:
 	video=trident:800x600,bpp=16,noaccel
   platinumfb.c -- frame buffer device for the PowerMac 'platinum' display
   Copyright (C) 1998 Franz Sirl
   Frame buffer structure from:
     driversvideocontrolfb.c -- frame buffer device for
     Apple 'control' display chip.
     Copyright (C) 1998 Dan Jacobowitz
   Hardware information from:
     platinum.c: Console support for PowerMac "platinum" display adaptor.
     Copyright (C) 1996 Paul Mackerras and Mark Abene
   This file is subject to the terms and conditions of the GNU General Public
   License. See the file COPYING in the main directory of this archive for
   more details.
  Frame buffer device API
  internal functions
  Interface used by the world
  Checks a var structure
  Applies current var to display
   Blank the screen if blank_mode != 0, else unblank. If blank == NULL
   then the caller blanks by setting the CLUT (Color Look Up Table) to all
   black. Return 0 if blanking succeeded, != 0 if un-blanking failed due
   to e.g. a video mode which doesn't support it. Implements VESA suspend
   and powerdown modes on hardware that supports disabling hsyncvsync:
     blank_mode == 2: suspend vsync
     blank_mode == 3: suspend hsync
     blank_mode == 4: powerdown
 [danj] I think there's something fishy about those constants... 
	struct fb_info_platinum info = (struct fb_info_platinum ) fb;
	int	ctrl;
	ctrl = le32_to_cpup(&info->platinum_regs->ctrl.r) | 0x33;
	if (blank)
		--blank_mode;
	if (blank & VESA_VSYNC_SUSPEND)
		ctrl &= ~3;
	if (blank & VESA_HSYNC_SUSPEND)
		ctrl &= ~0x30;
	out_le32(&info->platinum_regs->ctrl.r, ctrl);
 TODO: Figure out how the heck to powerdown this thing! 
 tell clut what addr to fill	
 send one color channel at	
 a time...			
 Now how about actually saying, Make it so! 
 Some things in here probably don't need to be done each time. 
 Initialize display timing registers 
 turn display off 
 out_be32(&platinum_regs->reg[27].r, 0x2aa); 
 turn display on 
  Set misc info vars for this driver
 Fill fb_info 
 Fill fix common fields 
 will be updated later 
	
	  Reduce the pixel size if we don't have enough VRAM.
 Setup default var 
 This shouldn't happen! 
 Initialize info structure 
 Apply default var 
 Register with fbdev layer 
  Get the monitor sense value.
  Note that this can be called before calibrate_delay,
  so we can't use udelay.
 turn off drivers 
 drive each sense line low in turn and collect the other 2 
 drive A low 
 drive B low 
 drive C low 
 turn off drivers 
  This routine takes a user-supplied var, and picks the best vmodecmode from it.
  It also updates the var structure to the actual mode data obtained
  Parse user specified options (`video=platinumfb:')
	 Do not try to request register space, they overlap with the
	  northbridge and that can fail. Only request framebuffer
 frame buffer - map only 4MB 
 registers 
 XXX not in prom? 
 Grok total video ram 
 select max vram 
 switch in vram 
 builtin 1MB vram, always there 
	
	  Try to determine whether we have an old or a new DACula.
 Unmap frame buffer and registers 
 SPDX-License-Identifier: GPL-2.0-or-later
   CobaltSEAD3 LCD frame buffer driver.
   Copyright (C) 2008  Yoichi Yuasa <yuasa@linux-mips.org>
   Copyright (C) 2012  MIPS Technologies, Inc.
  Cursor position address
  \X  0    1    2  ...  14   15
  Y+----+----+----+---+----+----+
  0|0x00|0x01|0x02|...|0x0e|0x0f|
   +----+----+----+---+----+----+
  1|0x40|0x41|0x42|...|0x4e|0x4f|
   +----+----+----+---+----+----+
 execute 4 times continuously 
   linuxdriversvideoiplan2p2.c -- Low level frame buffer operations for
 				      interleaved bitplanes à la Atari (2
 				      planes, 2 bytes interleave)
 	Created 5 Apr 1997 by Geert Uytterhoeven
   This file is subject to the terms and conditions of the GNU General Public
   License.  See the file COPYING in the main directory of this archive for
   more details.
	  bmove() has to distinguish two major cases: If both, source and
	   destination, start at even addresses or both are at odd
	   addresses, just the first odd and last even column (if present)
	   require special treatment (memmove_col()). The rest between
	   then can be copied by normal operations, because all adjacent
	   bytes are affected and are to be stored in the same order.
	     The pathological case is when the move should go from an odd
	   address to an even or vice versa. Since the bytes in the plane
	   words must be assembled in new order, it seems wisest to make
	   all movements by memmove_col().
 odd->odd or even->even 
 odd->even or even->odd 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2008
  Guennadi Liakhovetski, DENX Software Engineering, <lg@denx.de>
  Copyright 2004-2007 Freescale Semiconductor, Inc. All Rights Reserved.
 SDC Registers 
 Register bits 
 Display Interface registers 
 DI_DISP_SIG_POL bits 
 DI_DISP_IF_CONF bits 
 true = inverted 
 true = rising edge 
 true = active high 
 240x320 @ 60 Hz 
 240x33 @ 60 Hz 
 640x480 @ 60 Hz 
 NTSC TV output 
 PAL TV output 
 TV output VGA mode, 640x480 @ 65 Hz 
 MX3 specific framebuffer information. 
 Protects fb-ops 
 current var info 
 Used fb-mode and bpp. Can be set on kernel command line, therefore file-static. 
 Returns enabled flag before uninit 
 This enables the channel 
 Just re-activate the same buffer 
	
	  Attention! Without this msleep the channel keeps generating
	  interrupts. Next sdc_set_brightness() is going to be called
	  from mx3fb_blank().
  sdc_set_window_pos() - set window position of the respective plane.
  @mx3fb:	mx3fb context.
  @channel:	IPU DMAC channel ID.
  @x_pos:	X coordinate relative to the top left corner to place window at.
  @y_pos:	Y coordinate relative to the top left corner to place window at.
  @return:	0 on success or negative error code on failure.
  sdc_init_panel() - initialize a synchronous LCD panel.
  @mx3fb:		mx3fb context.
  @panel:		panel type.
  @pixel_clk:		desired pixel clock frequency in Hz.
  @width:		width of panel in pixels.
  @height:		height of panel in pixels.
  @h_start_width:	number of pixel clocks between the HSYNC signal pulse
 			and the start of valid data.
  @h_sync_width:	width of the HSYNC signal in units of pixel clocks.
  @h_end_width:	number of pixel clocks between the end of valid data
 			and the HSYNC signal for next line.
  @v_start_width:	number of lines between the VSYNC signal pulse and the
 			start of valid data.
  @v_sync_width:	width of the VSYNC signal in units of lines
  @v_end_width:	number of lines between the end of valid data and the
 			VSYNC signal for next frame.
  @sig:		bitfield of signal polarities for LCD interface.
  @return:		0 on success or negative error code on failure.
 Init panel size and blanking periods 
 Init clocking 
	
	  Calculate divider: fractional part is 4 bits so simply multiple by
	  2^4 to get fractional part, as long as we stay under ~250MHz and on
	  i.MX31 it (HSP_CLK) is <= 178MHz. Currently 128.267MHz
 Divider less than 4 
	
	  DISP3_IF_CLK_DOWN_WR is half the divider value and 2 fraction bits
	  fewer. Subtract 1 extra from DISP3_IF_CLK_DOWN_WR based on timing
	  debug. DISP3_IF_CLK_UP_WR is 0
 DI settings 
  sdc_set_color_key() - set the transparent color key for SDC graphic plane.
  @mx3fb:	mx3fb context.
  @channel:	IPU DMAC channel ID.
  @enable:	boolean to enable or disable color keyl.
  @color_key:	24-bit RGB color to use as transparent color key.
  @return:	0 on success or negative error code on failure.
  sdc_set_global_alpha() - set global alpha blending modes.
  @mx3fb:	mx3fb context.
  @enable:	boolean to enable or disable global alpha blending. If disabled,
 		per pixel blending is used.
  @alpha:	global alpha value.
  @return:	0 on success or negative error code on failure.
 This might be board-specific 
  mx3fb_set_fix() - set fixed framebuffer parameters from variable settings.
  @fbi:	framebuffer information pointer
  @return:	0 on success or negative error code on failure.
 We only need one interrupt, it will be re-enabled as needed 
	
	  Ignore xoffset and yoffset update,
	  because pan display handles this case.
 Total cleanup 
		
		  sg[0] points to fb smem_start address
		  and is actually active in controller.
	
	  Preserve xoffset and yoffest in case they are
	  inactive in controller as fb is blanked.
  mx3fb_set_par() - set framebuffer parameters and change the operating mode.
  @fbi:	framebuffer information pointer.
  @return:	0 on success or negative error code on failure.
  mx3fb_check_var() - check and adjust framebuffer variable parameters.
  @var:	framebuffer variable parameters
  @fbi:	framebuffer information pointer
 Preserve sync flags 
	
	  If greyscale is true, then we convert the RGB value
	  to greyscale no matter what visual we are using.
		
		  16-bit True Colour.  We encode the RGB value
		  according to the RGB bitfield information.
	 Attention!
	  Do not call sdc_disable_channel() for a channel that is disabled
	  already! This will result in a kernel NULL pointer dereference
	  (mx3_fbi->txd is NULL). Hide the fact, that all blank modes are
	  handled equally by this driver.
 Give LCD time to update - enough for 50 and 60 Hz 
  mx3fb_blank() - blank the display.
  @blank:	blank value for the panel
  @fbi:	framebuffer information pointer
  mx3fb_pan_display() - pan or wrap the display
  @var:	variable screen buffer information.
  @fbi:	framebuffer information pointer.
  We look only at xoffset, yoffset and the FB_VMODE_YWRAP flag
 No change, do nothing 
	
	  We enable the End of Frame interrupt, which will free a tx-descriptor,
	  which we will need for the next dmaengine_prep_slave_sg(). The
	  IRQ-handler will disable the IRQ again.
	
	  Emulate original mx3fb behaviour: each new call to idmac_tx_submit()
	  should switch to another buffer
  This structure contains the pointers to the control functions that are
  invoked by the core framebuffer driver to perform operations like
  blitting, rectangle filling, copy regions and cursor definition.
  Power management hooks.      Note that we won't be called from IRQ context,
  unlike the blank functions above, so we may sleep.
  Suspends the framebuffer and blanks the screen. Power management support
  Resumes the framebuffer and unblanks the screen. Power management support
  Main framebuffer functions
  mx3fb_map_video_memory() - allocates the DRAM memory for the frame buffer.
  @fbi:	framebuffer information pointer
  @mem_len:	length of mapped memory
  @lock:	do not lock during initialisation
  @return:	Error code indicating success or failure
  This buffer is remapped into a non-cached, non-buffered, memory region to
  allow palette and pixel writes to occur without flushing the cache. Once this
  area is remapped, all virtual memory access to the video memory should occur
  at the new region.
 Clear the screen 
  mx3fb_unmap_video_memory() - de-allocate frame buffer memory.
  @fbi:	framebuffer information pointer
  @return:	error code indicating success or failure
  mx3fb_init_fbinfo() - initialize framebuffer information object.
  @dev: the device
  @ops:	framebuffer device operations
  @return:	initialized framebuffer structure.
 Allocate sufficient memory for the fb structure 
 Allocate colormap 
 Default Y virtual size is 2x panel size 
 set Display Interface clock period 
 Might need to trigger HSP clock change - see 44.3.3.8.5 
	
	  Display Interface (DI) and Synchronous Display Controller (SDC)
	  registers
 IDMAC interface 
  Parse user specified options (`video=mx3fb:')
  example:
  	video=mx3fb:bpp=16
  OpenCores VGALCD 2.0 core frame buffer driver
  Copyright (C) 2013 Stefan Kristiansson, stefan.kristiansson@saunalahti.fi
  This file is licensed under the terms of the GNU General Public License
  version 2.  This program is licensed "as is" without any warranty of any
  kind, whether express or implied.
 OCFB register defines 
 Video Enable 
 HSync Interrupt Enable 
 8-bit Pseudo Color Enable
 Color Depth 8 
 Color Depth 16 
 Color Depth 24 
 Color Depth 32 
 Burst Length 1 
 Burst Length 2 
 Burst Length 4 
 Burst Length 8 
 640x480 @ 60 Hz, 31.5 kHz hsync 
 flag indicating whether the regs are little endian accessed 
 Physical and virtual addresses of framebuffer 
 Disable display 
 Register framebuffer address 
 Detect endianess 
 Horizontal timings 
 Vertical timings 
 Total length of frame 
 enable palette 
 maximum (8) VBL (video memory burst length) 
 Enable output 
 grayscale = 0.30R + 0.59G + 0.11B 
 Video mode setup 
 Allocate framebuffer memory 
 Clear framebuffer 
 Setup and enable the framebuffer 
 Allocate color map 
 Register framebuffer 
 Disable display 
  Init and exit routines
   SGI GBE frame buffer driver
   Copyright (C) 1999 Silicon Graphics, Inc. - Jeffrey Newquist
   Copyright (C) 2002 Vivien Chappelier <vivien.chappelier@linux-mips.org>
   This file is subject to the terms and conditions of the GNU General Public
   License. See the file COPYING in the main directory of this archive for
   more details.
 SGI O2 
 macro for fastest write-though access to the framebuffer 
   RAM we reserve for the frame buffer. This defines the maximum screen
   size
 0 turned off, 1 turned on 
 default CRT mode 
 640x480, 60 Hz, Non-Interlaced (25.175 MHz dotclock) 
 picoseconds 
 default LCD mode 
 1600x1024, 8 bpp 
 default modedb mode 
 640x480, 60 Hz, Non-Interlaced (25.172 MHz dotclock) 
 1600x1024 SGI flatpanel 1600sw 
 1600x1024, 8 bpp 
 Turn on dotclock PLL 
  Function:	gbe_turn_off
  Parameters:	(None)
  Description:	This should turn off the monitor and gbe.  This is used
               when switching between the serial console and the graphics
               console.
 check if pixel counter is on 
 turn off DMA 
	 We have to wait through two vertical retrace periods before
 wait for vpixen_off 
 turn off pixel counter 
 turn off dot clock 
 reset the frame DMA FIFO 
	
	  Check if pixel counter is off, for unknown reason this
	  code hangs Visual Workstations
 turn on dot clock 
 turn on pixel counter 
 turn on DMA 
   Blank the display.
 0 unblank, 1 blank, 2 no vsync, 3 no hsync, 4 off 
 unblank 
 blank 
 Nothing 
   Setup flatpanel related registers.
 Turn on the flat panel 
	 Determine valid resolution and timing
	  GBE crystal runs at 20Mhz or 27Mhz
	  pll_m, pll_n, pll_p define the following frequencies
	  fvco = pll_m  20Mhz  pll_n
 Resolution to high 
 set video timing information 
 setup dot clock PLL 
 do not start yet 
 setup pixel counter 
 setup video timing signals 
 setup internal timing signals 
 allow blank to wrap around 
 turn off sync on green 
   Set the hardware according to 'par'.
 Monitor resolution 
 Bytes per pixel 
 turn off GBE 
 set timing info 
 initialize DIDs 
 Initialize interrupts 
	 HACK:
	   The GBE hardware uses a tiled memory to screen mapping. Tiles are
	   blocks of 512x128, 256x128 or 128x128 pixels, respectively for 8bit,
	   16bit and 32 bit modes (64 kB). They cover the screen with partial
	   tiles on the right andor bottom of the screen if needed.
	   For example in 640x480 8 bit mode the mapping is:
	   <-------- 640 ----->
	   <---- 512 ----><128|384 offscreen>
	   ^  ^
	   | 128    [tile 0]        [tile 1]
	   |  v
	   ^
	   4 128    [tile 2]        [tile 3]
	   8  v
	   0  ^
	   128    [tile 4]        [tile 5]
	   |  v
	   |  ^
	   v  96    [tile 6]        [tile 7]
	   32 offscreen
	   Tiles have the advantage that they can be allocated individually in
	   memory. However, this mapping is not linear at all, which is not
	   really convenient. In order to support linear addressing, the GBE
	   DMA hardware is fooled into thinking the screen is only one tile
	   large and but has a greater height, so that the DMA transfer covers
	   the same region.
	   Tiles are still allocated as independent chunks of 64KB of
	   continuous physical memory and remapped so that the kernel sees the
	   framebuffer as a continuous virtual memory. The GBE tile table is
	   set up so that each tile references one of these 64k blocks:
	   GBE -> tile list    framebuffer           TLB   <------------ CPU
	          [ tile 0 ] -> [ 64KB ]  <- [ 16x 4KB page entries ]     ^
	             ...           ...              ...       linear virtual FB
	          [ tile n ] -> [ 64KB ]  <- [ 16x 4KB page entries ]     v
	   The GBE hardware is then told that the buffer is 512tweaked_height,
	   with tweaked_height = real_widthreal_heightpixels_per_tile.
	   Thus the GBE hardware will scan the first tile, filing the first 64k
	   covered region of the screen, and then will proceed to the next
	   tile, until the whole screen is covered.
	   Here is what would happen at 640x480 8bit:
	   normal tiling               linear
	   ^   11111111111111112222    11111111111111111111  ^
	   128 11111111111111112222    11111111111111111111 102 lines
	       11111111111111112222    11111111111111111111  v
	   V   11111111111111112222    11111111222222222222
	       33333333333333334444    22222222222222222222
	       33333333333333334444    22222222222222222222
	       <      512     >        <  256 >               102640+256 = 64k
	   NOTE: The only mode for which this is not working is 800x600 8bit,
	   as 800600512 = 937.5 which is not integer and thus causes
	   flickering.
	   I guess this is not so important as one can use 640x480 8bit or
	   800x600 16bit anyway.
 Tell gbe about the tiles table location 
 tile_ptr -> [ tile 1 ] -> FB mem 
             [ tile 2 ] -> FB mem 
               ...                
 do not start 
 Initialize the framebuffer 
 compute tweaked height 
 turn off DID and overlay DMA 
 Turn off mouse cursor 
 Turn on GBE 
 Initialize the gamma map 
 Initialize the color map 
   Set a single color register. The values supplied are already
   rounded down to the hardware's capabilities (according to the
   entries in the var structure). Return != 0 for invalid regno.
 wait for the color map FIFO to have a free entry 
   Check video mode validity, eventually modify var to best match.
 Limit bpp to 8, 16, and 32 
 Check the mode can be mapped linearly with the tile table trick. 
 This requires width x height x bytespixel be a multiple of 512 
 No grayscale for now 
 Adjust virtual resolution, if necessary 
 No grayscale for now 
 Memory limit 
 Virtual resolution too high 
 RGB 1555 
 RGB 8888 
 check range 
 remap using the fastest write-through mode on architecture 
 try not polluting the cache when possible 
 VM_IO | VM_DONTEXPAND | VM_DONTDUMP are set by remap_pfn_range() 
 look for the starting tile 
 remap each tile separately 
  sysfs
  Initialization
 memory was allocated at boot time 
		 try to allocate memory with the classical allocator
 map framebuffer memory into tiles table 
 reset GBE 
 turn on default video mode 
   linuxdriversvideoiplan2p8.c -- Low level frame buffer operations for
 				      interleaved bitplanes à la Atari (8
 				      planes, 2 bytes interleave)
 	Created 5 Apr 1997 by Geert Uytterhoeven
   This file is subject to the terms and conditions of the GNU General Public
   License.  See the file COPYING in the main directory of this archive for
   more details.
 Copies a 8 plane column from 's', height 'h', to 'd'. 
 This expands a 8 bit color into two longs for two movepl (8 plane)
  operations.
	  bmove() has to distinguish two major cases: If both, source and
	   destination, start at even addresses or both are at odd
	   addresses, just the first odd and last even column (if present)
	   require special treatment (memmove_col()). The rest between
	   then can be copied by normal operations, because all adjacent
	   bytes are affected and are to be stored in the same order.
	     The pathological case is when the move should go from an odd
	   address to an even or vice versa. Since the bytes in the plane
	   words must be assembled in new order, it seems wisest to make
	   all movements by memmove_col().
 odd->odd or even->even 
 odd->even or even->odd 
 SPDX-License-Identifier: GPL-2.0-only
  Frame buffer device for IBM GXT4500P6500P and GXT4000P6000P
  display adaptors
  Copyright (C) 2006 Paul Mackerras, IBM Corp. <paulus@samba.org>
 GXT4500P registers 
 Registers in PCI config space 
 Misc controlstatus registers 
 Framebuffer control registers 
 "Direct" framebuffer access registers 
 maps DFA_PIX_ to pixel size in bytes 
 Display timing generator registers 
 PLLRAMDAC registers 
 Hardware cursor 
 Window attribute table 
 0 vs. 3 is a guess 
 ORd in to other values 
 4-bit value gets << 6 
 select B buffer if 1 
 disables gamma cmap 
 controls overlay 
 Indexed by DFA_PIX_ values 
 Colormap array; 1k entries of 4 bytes each 
 pixel format, see DFA_PIX_ values 
 PLL parameters 
 ref clock period in picoseconds 
 ref clock divisor 
 VCO divisor 
 first post-divisor 
 second post-divisor 
 used in color blits 
 mode requested by user 
 default mode: 1280x1024 @ 60 Hz, 8 bpp 
 List of supported cards 
 Card-specific information 
 period of PLL reference clock in ps 
  The refclk and VCO dividers appear to use a linear feedback shift
  register, which gets reloaded when it reaches a terminal value, at
  which point the divider output is toggled.  Thus one can obtain
  whatever divisor is required by putting the appropriate value into
  the reload register.  For a divisor of N, one puts the value from
  the LFSR sequence that comes N-1 places before the terminal value
  into the reload register.
 1 		      0x3f, 0x00, 0x20, 0x10, 0x28, 0x14, 0x2a, 0x15, 0x0a,
 10 	0x25, 0x32, 0x19, 0x0c, 0x26, 0x13, 0x09, 0x04, 0x22, 0x11,
 20 	0x08, 0x24, 0x12, 0x29, 0x34, 0x1a, 0x2d, 0x36, 0x1b, 0x0d,
 30 	0x06, 0x23, 0x31, 0x38, 0x1c, 0x2e, 0x17, 0x0b, 0x05, 0x02,
 40 	0x21, 0x30, 0x18, 0x2c, 0x16, 0x2b, 0x35, 0x3a, 0x1d, 0x0e,
 50 	0x27, 0x33, 0x39, 0x3c, 0x1e, 0x2f, 0x37, 0x3b, 0x3d, 0x3e,
 60 	0x1f, 0x0f, 0x07, 0x03, 0x01,
 2 		            0x00, 0x80, 0xc0, 0xe0, 0xf0, 0x78, 0xbc, 0x5e,
 10 	0x2f, 0x17, 0x0b, 0x85, 0xc2, 0xe1, 0x70, 0x38, 0x9c, 0x4e,
 20 	0xa7, 0xd3, 0xe9, 0xf4, 0xfa, 0xfd, 0xfe, 0x7f, 0xbf, 0xdf,
 30 	0xef, 0x77, 0x3b, 0x1d, 0x8e, 0xc7, 0xe3, 0x71, 0xb8, 0xdc,
 40 	0x6e, 0xb7, 0x5b, 0x2d, 0x16, 0x8b, 0xc5, 0xe2, 0xf1, 0xf8,
 50 	0xfc, 0x7e, 0x3f, 0x9f, 0xcf, 0x67, 0xb3, 0xd9, 0x6c, 0xb6,
 60 	0xdb, 0x6d, 0x36, 0x9b, 0x4d, 0x26, 0x13, 0x89, 0xc4, 0x62,
 70 	0xb1, 0xd8, 0xec, 0xf6, 0xfb, 0x7d, 0xbe, 0x5f, 0xaf, 0x57,
 80 	0x2b, 0x95, 0x4a, 0x25, 0x92, 0x49, 0xa4, 0x52, 0x29, 0x94,
 90 	0xca, 0x65, 0xb2, 0x59, 0x2c, 0x96, 0xcb, 0xe5, 0xf2, 0x79,
 100 	0x3c, 0x1e, 0x0f, 0x07, 0x83, 0x41, 0x20, 0x90, 0x48, 0x24,
 110 	0x12, 0x09, 0x84, 0x42, 0xa1, 0x50, 0x28, 0x14, 0x8a, 0x45,
 120 	0xa2, 0xd1, 0xe8, 0x74, 0xba, 0xdd, 0xee, 0xf7, 0x7b, 0x3d,
 130 	0x9e, 0x4f, 0x27, 0x93, 0xc9, 0xe4, 0x72, 0x39, 0x1c, 0x0e,
 140 	0x87, 0xc3, 0x61, 0x30, 0x18, 0x8c, 0xc6, 0x63, 0x31, 0x98,
 150 	0xcc, 0xe6, 0x73, 0xb9, 0x5c, 0x2e, 0x97, 0x4b, 0xa5, 0xd2,
 160 	0x69,
 only deal with range 5MHz - 300MHz 
 keep pll in range 350..600 MHz 
 turn off DTG for now 
 set PLL registers 
 work around erratum 
 turn off hardware cursor 
 reset raster engine 
 set display timing generator registers 
 calculate stride in DFA aperture 
 Set up framebuffer definition 
 XXX add proper FB allocation here someday 
 Set up framebuffer access by CPU 
	
	  Set up window attribute table.
	  We set all WAT entries the same so it doesn't matter what the
	  window ID (WID) plane contains.
 Set sync polarity etc. 
 PCI functions 
 Set byte-swapping for DFA aperture for all pixel sizes 
 __LITTLE_ENDIAN 
 not sure what this means but fgl23 driver does that 
	pci_write_config_dword(pdev, CFG_ENDIAN0 + 4, 0x400000);
 supported chipsets 
 SPDX-License-Identifier: GPL-2.0-only
  A framebuffer driver for VBE 2.0+ compliant video cards
  (c) 2007 Michal Januszewski <spock@gentoo.org>
      Loosely based upon the vesafb driver.
 has v86d been started by uvesafb? 
 enable mtrr by default 
 enable blanking by default 
 0: scroll, 1: ypan, 2: ywrap 
 use PMI for palette changes 
 ignore CRTC settings 
 don't try DDC transfers 
 set amt. of memory to be used 
 set total amount of memory 
 maximum pixel clock 
 maximum vertical frequency 
 maximum horizontal frequency 
 force use of a specific VBE mode 
  A handler for replies from userspace.
  Make sure each message passes consistency checks and if it does,
  find the kernel part of the task struct, copy the registers and
  the buffer contents and then complete the task.
 Sanity checks for the buffer length. 
  Execute a uvesafb task.
  Returns 0 if the task is executed successfully.
  A message sent to the userspace consists of the uvesafb_task
  struct and (optionally) a buffer. The uvesafb_task struct is
  a simplified version of uvesafb_ktask (its kernel counterpart)
  containing only the register values, flags and the length of
  the buffer.
  Each message is assigned a sequence number (increased linearly)
  and a random ack number. The sequence number is used as a key
  for the uvfb_tasks array which holds pointers to uvesafb_ktask
  structs for all requests.
	
	  Check whether the message isn't longer than the maximum
	  allowed by connector.
 uvesafb_task structure 
 Buffer 
	
	  Save the message ack number so that we can find the kernel
	  part of this task when a reply is received from userspace.
 If all slots are taken -- bail out. 
 Save a pointer to the kernel part of the task struct. 
		
		  Try to start the userspace helper if sending
		  the request failed the first time.
  Free a uvesafb_ktask struct.
  Prepare a uvesafb_ktask struct to be used again.
  Allocate and prepare a uvesafb_ktask struct.
		
		  We have an exact match in terms of resolution
		  and depth.
	
	  Convert string pointers and the mode list pointer into
	  usable addresses. Print informational messages about the
	  video adapter and its vendor.
 Count available modes. 
 Get info about all available modes. 
		
		  We only want modes that are supported with the current
		  hardware configuration, color, graphics and that have
		  support for the LFB.
		
		  Handle 8bpp modes and modes with broken color component
		  lengths.
  The Protected Mode Interface is 32-bit x86 code, so we only run it on
  x86 and not x86_64.
 CONFIG_X86_32 
  Check whether a video mode is supported by the Video BIOS and is
  compatible with the monitor limits.
			
			  If the maximum pixel clock wasn't specified in
			  the EDID block, set it to 300 MHz.
	
	  If we don't get all necessary data from the EDID block,
	  mark it as incompatible with the GTF and set nocrtc so
	  that we always use the default BIOS refresh rate.
 Kernel command line overrides. 
	
	  In case DDC transfers are not supported, the user can provide
	  monitor limits manually. Lower limits are set to "safe" values.
 Add VBE modes to the modelist. 
 Add valid VESA modes to our modelist. 
	
	  Get the VBE state buffer size. We want all available
	  hardware state data (CL = 0x0f).
 The protected mode interface is not available on non-x86. 
 Has the user requested a specific VESA mode? 
				
				  With pixclock set to 0, the default BIOS
				  timings will be used in set_par().
 Count the modes in the modelist 
	
	  Convert the modelist into a modedb so that we can use it with
	  fb_find_mode().
 fb_find_mode() failed 
 Look for a matching VBE mode. 
	
	  If we are not VBE3.0+ compliant, we're done -- the BIOS will
	  ignore our timings anyway.
	
	  We support palette modifications for 8 bpp modes only, so
	  there can never be more than 256 entries.
 Use VGA registers if mode is VGA-compatible. 
 no return value 
 EAX 
 EBX 
 ECX 
 EDX 
 EDI 
 ESI 
 CONFIG_X86_32 
 CONFIG_X86 
 1:5:5:5 
 0:5:6:5 
		
		  For modes with bpp > 8, we only set the pseudo palette in
		  the fb_info struct. We rely on uvesafb_setcolreg to do all
		  sanity checking.
	
	  It turns out it's not the best idea to do panning via vm86,
	  so we only allow it if we have a PMI.
 no return value 
 EAX 
 EBX 
 ECX 
 EDX 
 EDI 
 CONFIG_X86 
 standby 
 powerdown 
 First, try to set the standard 80x25 text mode. 
	
	  Now try to restore whatever hardware state we might have
	  saved when the fb device was first opened.
 use LFB 
 use CRTC data 
		
		  The mode switch might have failed because we tried to
		  use our own timings.  Try again with the default timings.
 For 8bpp modes, always try to set the DAC to 8 bits. 
	
	  If pixclock is set to 0, then we're using default BIOS timings
	  and thus don't have to perform any checks here.
 Use default refresh rate 
	
	  Various apps will use bits_per_pixel to set the color depth,
	  which is theoretically incorrect, but which we'll try to handle
	  here.
	
	  Check whether we have remapped enough memory for this mode.
	  We might be called at an early stage, when we haven't remapped
	  any memory yet, in which case we simply skip the check.
 Disable blanking if the user requested so. 
	
	  Find out how much IO memory is required for the mode with
	  the highest resolution.
	
	    size_vmode -- that is the amount of memory needed for the
	                  used video mode, i.e. the minimum amount of
	                  memory we need.
	
	    size_total -- all video memory we have. Used for mtrr
	                  entries, resource allocation and bounds
	                  checking.
	
	    size_remap -- the amount of video memory we are going to
	                  use for vesafb.  With modern cards it is no
	                  option to simply use size_total as th
	                  wastes plenty of kernel address space.
	
	  We have to set yres_virtual here because when setup_var() was
	  called, smem_len wasn't defined yet.
 Find the largest power-of-two 
 Try and find a power of two to add 
 !MODULE 
  driversvideoasiliantfb.c
   frame buffer driver for Asiliant 69000 chip
   Copyright (C) 2001-2003 Saito.K & Jeanne
   from drivervideochipsfb.c and,
   driversvideoasiliantfb.c -- frame buffer device for
   Asiliant 69030 chip (formerly Intel, formerly Chips & Technologies)
   Author: apc@agelectronics.co.uk
   Copyright (C) 2000 AG Electronics
   Note: the data sheets don't seem to be available from Asiliant.
   They are available by searching developer.intel.com, but are not otherwise
   linked to.
   This driver should be portable with minimal effort to the 69000 display
   chip, and to the twin-display mode of the 69030.
   Contains code from Thomas Hhenleitner <th@visuelle-maschinen.de> (thanks)
   Derived from the CT65550 driver chipsfb.c:
   Copyright (C) 1998 Paul Mackerras
   ...which was derived from the Powermac "chips" driver:
   Copyright (C) 1997 Fabio Riccardi.
   And from the frame buffer device for Open Firmware-initialized devices:
   Copyright (C) 1997 Geert Uytterhoeven.
   This file is subject to the terms and conditions of the GNU General Public
   License. See the file COPYING in the main directory of this archive for
   more details.
 Built in clock of the 69030 
 Calculate the ratios for the dot clocks without using a single long long
 Calculate the frequency required. This is hard enough. 
	 This expresses the constraint that 150kHz <= Frefn <= 5Mhz,
 3 <= m <= 257 
 But if VLD = 4, then 4m <= 1028 
			 remember there are still only 8-bits of precision in m, so
 divide m by 4, and leave VCO loop divide at 4 
 or set VCO loop divide to 1 
 LCD 
 CRT 
 set misc output reg 
 set misc output reg 
	 First check the constraint that the maximum post-VCO divisor is 32,
 Holds m-2 value for register 
 Holds n-2 value for register 
 Holds divisor bitmask 
 Set pixclock 
 Set color depth 
 24 bit packed color mode 
 Disable palettes 
 24 bit blitter mode 
 16 bit color mode 
 15 bit color mode 
 Disable palettes 
 16 bit blitter mode 
 Linear 
 8 bit color mode 
 Graphics gamma enable 
 8 bit blitter mode 
 Set up the CR registers 
 Set hardware palete 
 RGB 555 
 RGB 565 
 RGB 888 
 Reset register 
 Clocking mode 
 Plane mask 
 Memory mode 
 Data rotate 
 Graphics mode 
 Miscellaneous 
 Bit mask 
 Mode control 
 Overscan 
 Memory plane enable 
 Horizontal pixel panning 
 Start address high 
 Start address low 
 Extended Start Address 
 Extended Start Address 
 Underline location 
 CRT mode control 
 Interlace control 
 set default memory clock 
 MCLK ratio M 
 MCLK ratio N 
 MCLK divisor = 2 
 IO Control - CRT controller extensions 
 Frame buffer mapping 
 PCI burst write 
 Memory access control 
 Pixel pipeline configuration 0 
 Pixel pipeline configuration 1 
 Pixel pipeline configuration 2 
 Enable video output in attribute index register 
 2MB 
  linuxdriversvideopxa168fb.c -- Marvell PXA168 LCD Controller
   Copyright (C) 2008 Marvell International Ltd.
   All rights reserved.
   2009-02-16  adapted from original version for PXA168910
               Jun Nie <njun@marvell.com>
  This file is subject to the terms and conditions of the GNU General Public
  License. See the file COPYING in the main directory of this archive for
  more details.
 Hz 
	
	  Pseudocolor mode?
	
	  Check for 5651555.
	
	  Check for 888A888.
	
	  Determine which pixel format we're going to use.
	
	  Basic geometry sanity checks.
	
	  Check size of framebuffer.
  The hardware clock divider has an integer and a fractional
  stage:
 	clk2 = clk_in  integer_divider
 	clk_out = clk2  (1 - (fractional_divider >> 12))
  Calculate integer and fractional divider for given clk_in
  and clk_out.
	
	  Notice: The field pixclock is used by linux fb
	  is in pixel second. E.g. struct fb_videomode &
	  struct fb_var_screeninfo
	
	  Check input values.
	
	  Using PLLAXI clock.
	
	  Calc divider according to refresh rate.
 check whether divisor is too small. 
	
	  Set setting to reg.
	
	  Set bit to enable graphics DMA.
	
	  If we are in a pseudo-color mode, we need to enable
	  palette lookup.
	
	  Configure hardware pixel format.
	
	  Check red and blue pixel swap.
	  1. source data swap
	  2. panel output data swap
	
	  Configure default bits: vsync triggers DMA, gated clock
	  enable, power save enable, configure alpha registers to
	  display 100% graphics, and set pixel command.
	
	  We trigger DMA on the falling edge of vsync if vsync is
	  active low, or on the rising edge if vsync is active high.
	
	  Preserve enable flag.
	
	  Set additional mode info.
	
	  Disable panel output while we setup the display.
	
	  Configure global panel parameters.
	
	  convet var to video mode
 Calculate clock divisor. 
 Configure dma ctrl regs. 
	
	  Configure graphics DMA parameters.
	
	  Configure dumb panel ctrl regs & timings.
	
	  Re-enable panel output.
	
	  Set default value
 try to find best video mode. 
 Init settings. 
 correct pixclock. 
 Initialize private data 
	
	  Initialise static fb parameters.
	
	  Map LCD controller registers.
	
	  Allocate framebuffer memory.
	
	  Set video mode according to platform data.
	
	  init video mode data.
	
	  Fill in sane defaults.
	
	  enable controller clock
	
	  Configure default register values.
	
	  Allocate color map.
	
	  Register irq handler.
	
	  Enable GFX interrupt
	
	  Register framebuffer.
 disable DMA transfer 
 $Id: g364fb.c,v 1.3 19980828 22:43:00 tsbogend Exp $
  linuxdriversvideog364fb.c -- Mips Magnum frame buffer device
  (C) 1998 Thomas Bogendoerfer
   This driver is based on tgafb.c
 	Copyright (C) 1997 Geert Uytterhoeven 
 	Copyright (C) 1995  Jay Estabrook
   This file is subject to the terms and conditions of the GNU General Public
   License. See the file COPYING in the main directory of this archive for
   more details.
  Various defines for the G364
 Read only 
 to 0x080170 - DON'T TOUCH! 
 bits 22 to 20 of Control A 
 bits 17 and 16 of Control A 
 same as above - don't ask me why 
 bits 13 and 12 of Control A 
 to 0x080518 
 to 0x080610 - unused 
 to 0x080ff8 
 to 0x081ff8 
 unused 
 Write only 
 physical address 
   Interface used by the world
   Pan or Wrap the Display
   This call looks only at xoffset, yoffset and the FB_VMODE_YWRAP flag
   Blank the display.
   Set a single color register. Return != 0 for invalid regno.
   Initialisation
 TBD: G364 detection 
 get the resolution set by ARC console 
 setup cursor 
	
	  first set the whole cursor to transparent
	
	  switch the last two lines to cursor palette 3
	  we assume here, that FONTSIZE_X is 8
 physical address 
 get size of video memory; this is special for the JAZZ hardware 
 virtual kernel address 
  linuxdriversvideoneofb.c -- NeoMagic Framebuffer Driver
  Copyright (c) 2001-2002  Denis Oliver Kropp <dok@directfb.org>
  Card specific code is based on XFree86's neomagic driver.
  Framebuffer framework code is based on code of cyber2000fb.
  This file is subject to the terms and conditions of the GNU General
  Public License.  See the file COPYING in the main directory of this
  archive for more details.
  0.4.1
   - Cosmetic changes (dok)
  0.4
   - Toshiba Libretto support, allow modes larger than LCD size if
     LCD is disabled, keep BIOS settings if internalexternal display
     haven't been enabled explicitly
                           (Thomas J. Moore <dark@mama.indstate.edu>)
  0.3.3
   - Porting over to new fbdev api. (jsimmons)
  0.3.2
   - got rid of all floating point (dok) 
  0.3.1
   - added module license (dok)
  0.3
   - hardware accelerated clear and move for 2200 and above (dok)
   - maximum allowed dotclock is handled now (dok)
  0.2.1
   - correct panning after X usage (dok)
   - added module and kernel parameters (dok)
   - no stretching if external display is enabled (dok)
  0.2
   - initial version (dok)
  TODO
  - ioctl for internalexternal switching
  - blanking
  - 32bit depth support, maybe impossible
  - disable pan-on-sync, need specs
  BUGS
  - white margin on bootup like with tdfxfb (colormap problem?)
 --------------------------------------------------------------------- 
 --------------------------------------------------------------------- 
 FIXME: guessed values, wrong 
  neoCalcVCLK --
  Determine the closest clock frequency to the one requested.
		 NOT_DONE:  We are trying the full range of the 2200 clock.
  vgaHWInit --
       Handle the initialization, etc. of a screen.
       Return FALSE on failure.
	
	  Time Sequencer
 Font select 
 Misc 
	
	  CRTC Controller
	
	  are these unnecessary?
	  vgaHWHBlankKGA(mode, regp, 0, KGA_FIX_OVERSCAN | KGA_ENABLE_ON_ZERO);
	  vgaHWVBlankKGA(mode, regp, 0, KGA_FIX_OVERSCAN | KGA_ENABLE_ON_ZERO);
	
	  Graphics Display Controller
 only map 64k VGA memory !!!! 
 standard colormap translation 
 Protect CRTC[0-7] 
 Unprotect CRTC[0-7] 
  VGA Palette management
		
		  Turn off screen and disable sequencer.
 Synchronous Reset 
 disable the display 
		
		  Reenable sequencer, then turn on screen.
 reenable display 
 clear synchronousreset 
 Ensure CRTC registers 0-7 are unlocked by clearing bit 7 or CRTC[17] 
 -------------------- Hardware specific routines ------------------------- 
  Hardware Acceleration for Neo2200+
  ndev->neo.waitfifo_calls++;
  ndev->neo.waitfifo_sum += requested_fifo_space;
	 FIXME: does not work
	   if (neo_fifo_space < requested_fifo_space)
	   {
	   neo_fifo_waitcycles++;
	   while (1)
	   {
	   neo_fifo_space = (neo2200->bltStat >> 8);
	   if (neo_fifo_space >= requested_fifo_space)
	   break;
	   }
	   }
	   else
	   {
	   neo_fifo_cache_hits++;
	   }
	   neo_fifo_space -= requested_fifo_space;
 --------------------------------------------------------------------- 
 Is the mode larger than the LCD panel? 
 Is the mode one of the acceptable sizes? 
 PSEUDOCOLOUR, 256 
 DIRECTCOLOUR, 64k 
 TRUECOLOUR, 16m 
 TRUECOLOUR, 16m 
	 we must round yresxres down, we already rounded yxres_virtual up
 Blank the screen 
	
	  This will allocate the datastructure and initialize all of the
	  generic VGA registers.
	
	  The default value assigned by vgaHW.c is 0x41, but this does
	  not work for NeoMagic.
 FIXME: guessed values 
 Vertical Extension 
 Fast write bursts on unless disabled. 
 VESA Bios sets this to 0x80! 
 Initialize: by default, we want display config register to be read 
 Enable any user specified display devices. 
 If the user did not specify any display devices, then... 
 Default to internal (i.e., LCD) only. 
 If we are using a fixed mode, then tell the chip we are. 
 Setup shadow register locking. 
 External CRT only mode: 
 We need to program the VCLK for external display only mode. 
 Internal LCD only mode: 
 Simultaneous internalexternal (LCDCRT) mode: 
 Don't program the VCLK when using the LCD. 
	
	  If the screen is to be stretched, turn on stretching for the
	  various modes.
	 
	  OPTION_LCD_STRETCH means stretching should be turned off!
 LCD only 
 Needs testing.  KEM -- 24 May 98 
 Needs testing.  KEM -- 24 May 98 
 No stretching in these modes. 
	
	  If the screen is to be centerd, turn on the centering for the
	  various modes.
			
			  No centering required when the requested display width
			  equals the panel width.
 Calculate the horizontal and vertical offsets. 
 Stretched modes cannot be centered. 
 Needs testing.  KEM -- 24 May 98 
 Needs testing.  KEM -- 24 May 98 
 No centering in these modes. 
	
	  Calculate the VCLK that most closely matches the requested dot
	  clock.
 Since we program the clocks ourselves, always use VCLK3. 
 alread unlocked above 
 BOGUS  vga_wgfx(NULL, 0x09, 0x26); 
 don't know what this is, but it's 0 from bootup anyway 
 was set to 0x01 by my bios in text and vesa modes 
	
	  The color mode needs to be set before calling vgaHWRestore
	  to ensure the DAC is initialized properly.
	 
	  NOTE: Make sure we don't change bits make sure we don't change
	  any reserved bits.
 Save bits 7:4 
 Save bits 6:4 
	
	  In some rare cases a lockup might occur if we don't delay
	  here. (Reported by Miles Lane)
mdelay(200);
	
	  Disable horizontal and vertical graphics and text expansions so
	  that vgaHWRestore works properly.
	
	  Sleep for 200ms to make sure that the two operations above have
	  had time to take effect.
	
 linear colormap for non palettized modes 
 PseudoColor, 256 
 TrueColor, 64k 
 TrueColor, 16m 
 Save bits 3:0 
 VESA Bios sets bit 1! 
par->SingleAddrPage  );
par->DualAddrPage  );
 Save bits 7:2 
 Save bits 7:6,4:2 
 Save bits 7,4:3 
 Save bits 5:3 
 Save bits 7:5 and bits 3:0 
 Program VCLK3 if needed. 
 Save bits 3:0 
 Gives 5x faster framebuffer writes !!! 
 Program vertical extension register 
 Turn on screen 
 Calling this also locks offset registers required in update_start 
     Pan or Wrap the Display
	
	  These are the generic starting address registers.
	
	  Make sure we don't clobber some other bits that might already
	  have been set. NOTE: NM2200 has a writable bit 3, but it shouldn't
	  be needed.
     (Un)Blank the display.
	
	   Blank the screen if blank_mode != 0, else unblank.
	   Return 0 if blanking succeeded, != 0 if un-blanking failed due to
	   e.g. a video mode which doesn't support it. Implements VESA suspend
	   and powerdown modes for monitors, and backlight control on LCDs.
	     blank_mode == 0: unblanked (backlight on)
	     blank_mode == 1: blank (backlight on)
	     blank_mode == 2: suspend vsync (backlight off)
	     blank_mode == 3: suspend hsync (backlight off)
	     blank_mode == 4: powerdown (backlight off)
	 
	   wms...Enable VESA DPMS compatible powerdown mode
	   run "setterm -powersave powerdown" to take advantage
	
	  Read back the register bits related to display configuration. They might
	  have been changed underneath the driver via Fn key stroke.
	 In case we blank the screen, we want to store the possibly new
	  configuration in the driver. During un-blank, we re-apply this setting,
	  since the LCD bit will be cleared in order to switch off the backlight.
 powerdown - both sync lines down 
 Disable sequencer 
 LCD off 
 Do we still need this ? 
 attempt to turn off backlight on toshiba; also turns off external 
 HCI_SET 
 HCI_BACKLIGHT 
 HCI_DISABLE 
 hsync off 
 Disable sequencer 
 LCD off 
 vsync off 
 Disable sequencer 
 LCD off 
 just blank screen (backlight stays on) 
 Disable sequencer 
		
		  During a blank operation with the LID shut, we might store "LCD off"
		  by mistake. Due to timing issues, the BIOS may switch the lights
		  back on, and we turn it back off once we "unblank".
		 
		  So here is an attempt to implement ">=" - if we are in the process
		  of unblanking, and the LCD bit is unset in the driver but set in the
		  register, we must keep it.
 LCD normal 
 no hsyncvsync suppression 
 unblank 
 Enable sequencer 
 LCD normal 
 no hsyncvsync suppression 
 Do we still need this ? 
 attempt to re-enable backlightexternal on toshiba 
 HCI_SET 
 HCI_BACKLIGHT 
 HCI_ENABLE 
	default:	 Anything else we don't understand; return 1 to tell
 set blt control 
               NEO_BC3_DST_XY_ADDR  |
               NEO_BC3_SRC_XY_ADDR  |
 Start with the lower right corner 
 set blt control 
 The data is padded for the hardware
			 FIXME. There is a bug with accelerated color-expanded
			  transfers in 24 bit mode if the image being transferred
			  is less than 16 bits wide. This is due to insufficient
			  padding when writing the image. We need to adjust
		 We don't currently support hardware acceleration if image
 NEO_BC3_DST_XY_ADDR |
      par->neo2200->dstStart = (image->dy << 16) | (image->dx & 0xffff);
static void
neofb_draw_cursor(struct fb_info info, u8 dst, u8 src, unsigned int width)
{
	memset_io(info->sprite.addr, 0xff, 1);
}
static int
neofb_cursor(struct fb_info info, struct fb_cursor cursor)
{
	struct neofb_par par = (struct neofb_par ) info->par;
	 Disable cursor 
	write_le32(NEOREG_CURSCNTL, ~NEO_CURS_ENABLE, par);
	if (cursor->set & FB_CUR_SETPOS) {
		u32 x = cursor->image.dx;
		u32 y = cursor->image.dy;
		info->cursor.image.dx = x;
		info->cursor.image.dy = y;
		write_le32(NEOREG_CURSX, x, par);
		write_le32(NEOREG_CURSY, y, par);
	}
	if (cursor->set & FB_CUR_SETSIZE) {
		info->cursor.image.height = cursor->image.height;
		info->cursor.image.width = cursor->image.width;
	}
	if (cursor->set & FB_CUR_SETHOT)
		info->cursor.hot = cursor->hot;
	if (cursor->set & FB_CUR_SETCMAP) {
		if (cursor->image.depth == 1) {
			u32 fg = cursor->image.fg_color;
			u32 bg = cursor->image.bg_color;
			info->cursor.image.fg_color = fg;
			info->cursor.image.bg_color = bg;
			fg = ((fg & 0xff0000) >> 16) | ((fg & 0xff) << 16) | (fg & 0xff00);
			bg = ((bg & 0xff0000) >> 16) | ((bg & 0xff) << 16) | (bg & 0xff00);
			write_le32(NEOREG_CURSFGCOLOR, fg, par);
			write_le32(NEOREG_CURSBGCOLOR, bg, par);
		}
	}
	if (cursor->set & FB_CUR_SETSHAPE)
		fb_load_cursor_image(info);
	if (info->cursor.enable)
		write_le32(NEOREG_CURSCNTL, NEO_CURS_ENABLE, par);
	return 0;
}
 --------------------------------------------------------------------- 
unsigned long addr;
 Clear framebuffer, it's all white in memory after boot 
	 Allocate Cursor drawing pad.
	info->fix.smem_len -= PAGE_SIZE;
	addr = info->fix.smem_start + info->fix.smem_len;
	write_le32(NEOREG_CURSMEMPOS, ((0x000f & (addr >> 10)) << 8) |
					((0x0ff0 & (addr >> 10)) >> 4), par);
	addr = (unsigned long) info->screen_base + info->fix.smem_len;
 Eventually we will have i2c support.
 Determine the panel type 
 Determine panel width -- used in NeoValidMode. 
 640x480@60
 800x600@60
 1024x768@60
 1280x1024@60 panel support needs to be added 
 640x480@60
	info->sprite.size = CursorMem;
	info->sprite.scan_align = 1;
	info->sprite.buf_align = 1;
	info->sprite.flags = FB_PIXMAP_IO;
	info->sprite.outbuf = neofb_draw_cursor;
		
		  Free the colourmap
 --------------------------------------------------------------------- 
	
	  Calculate the hsync and vsync frequencies.  Note that
	  we split the 1e12 constant up so that we can preserve
	  the precision and fit the results into 32-bit registers.
	   (1953125000  512 = 1e12)
	
	  Our driver data
  init in-kernel code  
  MODULE  
 MODULE 
 linuxdriversvideos3c2410fb.c
 	Copyright (c) 2004,2005 Arnaud Patard
 	Copyright (c) 2004-2008 Ben Dooks
  S3C2410 LCD Framebuffer Driver
  This file is subject to the terms and conditions of the GNU General Public
  License.  See the file COPYING in the main directory of this archive for
  more details.
  Driver based on skeletonfb.c, sa1100fb.c and others.
 Debugging stuff 
 useful functions 
 s3c2410fb_set_lcdaddr
  initialise lcd controller address pointers
 s3c2410fb_calc_pixclk()
  calculate divisor for clk->pixclk
	 pixclk is in picoseconds, our clock is in Hz
	 
	  Hz -> picoseconds is  10^-12
 div  2^12 
 div  5^12 
 	s3c2410fb_check_var():
 	Get the video params out of 'var'. If a value doesn't fit, round it up,
 	if it's too big, return -EINVAL.
 validate xy resolution 
 choose default mode if possible 
 it is always the size as the display 
 copy lcd settings 
 set display type 
 set rgb positions 
 8 bpp 332 
 12 bpp 444 
 16 bpp, 565 format 
 16 bpp, 5551 format 
 24 bpp 888 and 8 dummy 
 s3c2410fb_calculate_stn_lcd_regs
  calculate register values from var settings
 invalid pixel depth 
 update XY info 
 s3c2410fb_calculate_tft_lcd_regs
  calculate register values from var settings
 invalid pixel depth 
 update XY info 
 s3c2410fb_activate_var
  activate (set) the controller from the given framebuffer
  information
 write new registers 
 set lcd address pointers 
       s3c2410fb_set_par - Alters the hardware state.
       @info: frame buffer structure that represents a single frame buffer
 activate this new configuration 
 enable IRQ 
 from pxafb.c 
	 dprintk("setcol: regno=%d, rgb=%d,%d,%d\n",
 true-colour, use pseudo-palette 
 currently assume RGB 5-6-5 mode 
 unknown type 
 s3c2410fb_lcd_enable
  shutdown the lcd controller
       s3c2410fb_blank
 	@blank_mode: the blank mode we want.
 	@info: frame buffer structure that represents a single frame buffer
 	Blank the screen if blank_mode != 0, else unblank. Return 0 if
 	blanking succeeded, != 0 if un-blanking failed due to e.g. a
 	video mode which doesn't support it. Implements VESA suspend
 	and powerdown modes on hardware that supports disabling hsyncvsync:
 	Returns negative errno on error, or zero on success.
  s3c2410fb_map_video_memory():
 	Allocates the DRAM memory for the frame buffer.  This buffer is
 	remapped into a non-cached, non-buffered, memory region to
 	allow palette and pixel writes to occur without flushing the
 	cache.  Once this area is remapped, all virtual memory
 	access to the video memory should occur at the new region.
 prevent initial garbage on screen 
  s3c2410fb_init_registers - Initialise all LCD-related registers
 Initialise LCD with values from haret 
 modify the gpio(s) with interrupts set (bjd) 
 ensure temporary palette disabled 
		 it seems the only way to know exactly
		  if the palette wrote ok, is to check
		  to see if the value verifies ok
 retry 
 work out change, <0 for speed-up 
 Stop the video 
 find maximum required memory size for display 
 Initialize video memory 
 create device files 
   Cleanup
 suspend and resume support for the lcd controller 
	 sleep before disabling the clock, we need to ensure
	  the LCD DMA engine is not going to get back on the bus
 re-activate our display after resume 
 SPDX-License-Identifier: GPL-2.0-only
  i740fb - framebuffer driver for Intel740
  Copyright (c) 2011 Ondrej Zary
  Based on old i740fb driver (c) 2001-2002 Andrey Ulanov <drey@rt.mipt.ru>
  which was partially based on:
   VGA 16-color framebuffer driver (c) 1999 Ben Pfaff <pfaffben@debian.org>
 	and Petr Vandrovec <VANDROVE@vc.cvut.cz>
   i740 driver from XFree86 (c) 1998-1999 Precision Insight, Inc., Cedar Park,
 	Texas.
   i740fb by Patrick LERDA, v0.9
 i740 specific registers 
	
	  Would like to calculate these values automatically, but a generic
	  algorithm does not seem possible.  Note: These FIFO water mark
	  values were tested on several cards and seem to eliminate the
	  all of the snow and vertical banding, but fine adjustments will
	  probably be required for other cards.
 clock calculation from i740fb by Patrick LERDA 
 66.67 MHz 
 450 MHz 
	
	  Get the video params out of 'var'.
	  If a value doesn't fit, round it up, if it's too big, return -EINVAL.
 disable linecompare 
 1 scanline, no linecmp 
 disabled IRQ 
 0x7F for VGA, but some SVGA chips require all 8 bits to be set 
 3DA 
 0 for EGA, 0xFF for VGA 
 0rrrrrgg gggbbbbb 
 rrrrrggg gggbbbbb 
 ...ignore the last bit. 
 Unimplemented on i740 
 Set the MCLK freq 
 100 MHz -- use as default 
 Calculate the extended CRTC regs 
 Set the overscan color to 0. (NOTE: This only affects >8bpp mode) 
 Calculate VCLK that most closely matches the requested dot clock 
 Since we program the clocks ourselves, always use VCLK2. 
 Calculate the FIFO Watermark and Burst Length. 
 disable the display 
 enable palette access 
 reenable display 
 disable palette access 
 update misc output register 
 synchronous reset on 
 write sequencer registers 
 synchronous reset off 
 deprotect CRT registers 0-7 
 write CRT registers 
 write graphics controller registers 
 write attribute controller registers 
 reset flip-flop 
 Wait for screen to stabilize. 
		
		  The last bit does not seem to have any effect on the start
		  address register in 24bpp mode, so...
 ...ignore the last bit. 
 Turn the screen onoff 
 Set the DPMS mode 
 Let fbcon do a soft blank for us 
 ------------------------------------------------------------------------- 
 detect memory size 
 detect memory type 
 fill all other info->var's fields 
 maximize virtual vertical size for fast scrolling 
	pci_disable_device(dev); 
		pci_disable_device(dev); 
 do nothing if framebuffer is not active 
 CONFIG_PM_SLEEP 
   Fast C2P (Chunky-to-Planar) Conversion
   Copyright (C) 2003-2008 Geert Uytterhoeven
   This file is subject to the terms and conditions of the GNU General Public
   License. See the file COPYING in the main directory of this archive
   for more details.
       Perform a full C2P step on 32 8-bit pixels, stored in 8 32-bit words
       containing
         - 32 8-bit chunky pixels on input
         - permutated planar data (1 plane per 32-bit word) on output
       Array containing the permutation indices of the planar data after c2p
       Store a full block of planar data after c2p conversion
       Store a partial block of planar data after c2p conversion
       c2p_planar - Copy 8-bit chunky image data to a planar frame buffer
       @dst: Starting address of the planar frame buffer
       @dx: Horizontal destination offset (in pixels)
       @dy: Vertical destination offset (in pixels)
       @width: Image width (in pixels)
       @height: Image height (in pixels)
       @dst_nextline: Frame buffer offset to the next line (in bytes)
       @dst_nextplane: Frame buffer offset to the next plane (in bytes)
       @src_nextline: Image offset to the next line (in bytes)
       @bpp: Bits per pixel of the planar frame buffer (1-8)
 Single destination word 
 Multiple destination words 
 Leading bits 
 Main chunk 
 Trailing bits 
 SPDX-License-Identifier: GPL-2.0-or-later
  Driver for the Solomon SSD1307 OLED controller
  Copyright 2012 Free Electrons
 Cached address ranges 
	
	  The screen is divided in pages, each having a height of 8
	  pixels, and the width of the screen. When sending a byte of
	  data to the controller, it gives the 8 bits for the current
	  column. I.e, the first byte are the 8 bits of the first
	  column, then the 8 bits for the second column, etc.
	 
	 
	  Representation of the screen, assuming it is 5 bits
	  wide. Each letter-number combination is a bit that controls
	  one pixel.
	 
	  A0 A1 A2 A3 A4
	  B0 B1 B2 B3 B4
	  C0 C1 C2 C3 C4
	  D0 D1 D2 D3 D4
	  E0 E1 E2 E3 E4
	  F0 F1 F2 F3 F4
	  G0 G1 G2 G3 G4
	  H0 H1 H2 H3 H4
	 
	  If you want to update this screen, you need to send 5 bytes:
	   (1) A0 B0 C0 D0 E0 F0 G0 H0
	   (2) A1 B1 C1 D1 E1 F1 G1 H1
	   (3) A2 B2 C2 D2 E2 F2 G2 H2
	   (4) A3 B3 C3 D3 E3 F3 G3 H3
	   (5) A4 B4 C4 D4 E4 F4 G4 H4
 Last page may be partial 
 Enable the PWM 
 Set initial contrast 
 Set segment re-map 
 Set COM direction 
 Set multiplex ratio value 
 set display offset value 
 Set clock frequency 
 Set Set Area Color Mode ONOFF & Low Power Display Mode 
 Set precharge period in number of ticks from the internal clock 
 Set COM pins configuration 
 Set VCOMH 
 Turn on the DC-DC Charge Pump 
 Set lookup table 
 Switch to horizontal addressing mode 
 Clear the screen 
 Turn on the display 
 Setup display timing 
 Reset the screen 
 	linuxdriversvideopmag-aa-fb.c
 	Copyright 2002 Karsten Merker <merker@debian.org>
 	PMAG-AA TurboChannel framebuffer card support ... derived from
 	pmag-ba-fb.c, which is Copyright (C) 1999, 2000, 2001 by
 	Michael Engel <engel@unix-ag.org>, Karsten Merker <merker@debian.org>
 	and Harald Koerfgen <hkoerfg@web.de>, which itself is derived from
 	"HP300 Topcat framebuffer support (derived from macfb of all things)
 	Phil Blundell <philb@gnu.org> 1998"
 	Copyright (c) 2016  Maciej W. Rozycki
 	This file is subject to the terms and conditions of the GNU General
 	Public License.  See the file COPYING in the main directory of this
 	archive for more details.
 	2002-09-28  Karsten Merker <merker@linuxtag.org>
 		Version 0.01: First try to get a PMAG-AA running.
 	2003-02-24  Thiemo Seufer  <seufer@csv.ica.uni-stuttgart.de>
 		Version 0.02: Major code cleanup.
 	2003-09-21  Thiemo Seufer  <seufer@csv.ica.uni-stuttgart.de>
 		Hardware cursor support.
 	2016-02-21  Maciej W. Rozycki  <macro@linux-mips.org>
 		Version 0.03: Rewritten for the new FB and TC APIs.
 Version information 
  Bt455 RAM DAC register base offset (rel. to TC slot base address).
  Bt431 cursor generator offset (rel. to TC slot base address).
  Begin of PMAG-AA framebuffer memory relative to TC slot address,
  resolution is 1280x1024x1 (8 bits deep, but only LSB is used).
 0 unblanks, any other blanks. 
 Request the IO MEM resource. 
 MMIO mapping setup. 
 Frame buffer mapping setup. 
 Init colormap. 
 Init hardware cursor. 
  Initialise the framebuffer.
 SPDX-License-Identifier: GPL-2.0-only
  linuxdriversvideoomap2omapfb-sysfs.c
  Copyright (C) 2008 Nokia Corporation
  Author: Tomi Valkeinen <tomi.valkeinen@nokia.com>
  Some code and ideas taken from driversvideoomap driver
  by Imre Deak.
	
	  Since the VRAM for this FB is not allocated at the moment we don't
	  need to do any further parameter checking at this point.
 detach unused overlays 
 FIXME error handling? 
 SPDX-License-Identifier: GPL-2.0-only
  linuxdriversvideoomap2omapfb-ioctl.c
  Copyright (C) 2008 Nokia Corporation
  Author: Tomi Valkeinen <tomi.valkeinen@nokia.com>
  Some code and ideas taken from driversvideoomap driver
  by Imre Deak.
 XXX uses only the first overlay 
 Take the locks in a specific order to keep lockdep happy 
		
		  This plane's memory was freed, can't enable it
		  until it's reallocated.
 Release the locks in a specific order to keep lockdep happy 
 Release the locks in a specific order to keep lockdep happy 
 xxx 
 MANUAL_UPDATE 
 AUTO_UPDATE 
 XXX this color key handling is a hack... 
		
		  It's possible that the FB doesn't support a mode
		  that is supported by the overlay, so call the
		  following here.
 DSS1 never returns an error here, so we neither 
r = -EINVAL;
	 LCD and CTRL tests do the same thing for backward
		
		  We don't have the ability to get this vram info anymore.
		  Fill in something that should keep the applications working.
 SPDX-License-Identifier: GPL-2.0-only
  VRFB Rotation Engine
  Copyright (C) 2009 Nokia Corporation
  Author: Tomi Valkeinen <tomi.valkeinen@nokia.com>
#define DEBUG
 Assuming SDRAM pagesize= 1024 
 1024 = 2^5  2^5 
 bitmap of reserved contexts 
  Access to this happens from client drivers or the PM core after wake-up.
  For the first case we require locking at the driver level, for the second
  we don't need locking, since no drivers will run until after the wake-up
  has finished.
  This the extra space needed in the VRFB physical area for VRFB to safely wrap
  any memory accesses to the invisible part of the virtual view to the physical
  area.
 i=1..32 
 Virtual views provided by VRFB are limited to 2048x2048. 
	 For YUV2 and UYVY modes VRFB needs to handle pixels a bit
 first resource is the register res, the rest are vrfb contexts 
 SPDX-License-Identifier: GPL-2.0-only
  linuxdriversvideoomap2omapfb-main.c
  Copyright (C) 2008 Nokia Corporation
  Author: Tomi Valkeinen <tomi.valkeinen@nokia.com>
  Some code and ideas taken from driversvideoomap driver
  by Imre Deak.
 first match with nonstd field 
 then try exact match of bpp and colors 
	 match with bpp if user has not filled color fields
 XXX: some applications seem to set virtual res to 0. 
 One needs to check for both VRFB and OMAPFB limitations. 
  Consider if VRFB assisted rotation is in use and if the virtual space for
  the zero degree view needs to be mapped. The need for mapping also acts as
  the trigger for setting up the hardware on the context in question. This
  ensures that one does not attempt to access the virtual view before the
  hardware is serving the address translations.
	 We need to reconfigure VRFB if the resolution changes, if yuv mode
 XXX we shouldn't allow this when framebuffer is mmapped 
 Now one can ioremap the 0 angle view 
 used by openwrite in fbmem.c 
 used by openwrite in fbmem.c 
 used by mmap in fbmem.c 
 12bpp is stored in 16 bits 
 check new var and possibly modify it to be ok 
 When no memory is allocated ignore the size check 
 pixclock in ps, the rest in pixclock 
  ---------------------------------------------------------------------------
  fbdev framework callbacks
  ---------------------------------------------------------------------------
 setup overlay according to the fb 
 apply var to the overlay 
 the fb is not available. disable the overlay 
 checks var and eventually tweaks it to something supported,
 set the video mode according to info->var 
 vm_ops.open won't be called for mmap itself. 
 Store a single color palette entry into a pseudo palette or the hardware
  palette if one is available. For now we support only 16bpp and thus store
  the entry only to the pseudo palette.
struct omapfb_info ofbi = FB2OFB(fbi);
struct omapfb2_device fbdev = ofbi->fbdev;
 XXX 
switch (plane->color_mode) {
		
		   if (fbdev->ctrl->setcolreg)
		   r = fbdev->ctrl->setcolreg(regno, red, green, blue,
		   transp, update_hw_pal);
		 FB_BLANK_NORMAL could be implemented.
 XXX fb_read and fb_write are needed for VRFB 
 XXX needed for VRFB 
.fb_write	= omapfb_write,
 unmap the 0 angle rotation 
 allocate fbmem using display resolution as reference 
		 allocate memory automatically only for fb0, or if
 initialize fb_info, var, fix to something sane based on the display 
 if there's no display, let's just guess some basic values 
 free the reserved fbmem 
 allocate fb_infos 
 assign these early, so that fb alloc can use them 
 assign overlays for the fbs 
 allocate fb memories 
 setup fb_infos 
 Enable fb0 
	 this is quite a hack, but I wanted to use the modedb and for
 If check_timings is not present compare xres and yres 
 skip repeated pixel modes 
		
		  We don't care if the connect succeeds or not. We just want to
		  connect as many displays as possible.
	
	  Search with the display name from the user or the board file,
	  comparing to display names and aliases
 def_name given but not found 
 then look for DT alias display0 
 return the first display we have in the list 
 FIXME: wait till completion of pending events 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2009 Nokia Corporation
  Author: Tomi Valkeinen <tomi.valkeinen@nokia.com>
  Some code and ideas taken from driversvideoomap driver
  by Imre Deak.
 SPDX-License-Identifier: GPL-2.0-only
  OMAP5 HDMI CORE IP driver library
  Copyright (C) 2014 Texas Instruments Incorporated
  Authors:
 	Yong Zhi
 	Mythri pk
 	Archit Taneja <archit@ti.com>
 	Tomi Valkeinen <tomi.valkeinen@ti.com>
 only 24 bit color depth used for now 
 HDMI_DEEP_COLOR_24BIT 
 HDMI_DEEP_COLOR_30BIT 
 HDMI_DEEP_COLOR_36BIT 
 FULL RANGE 
 DSS L3 ICLK 
 ns 
 ns 
 ns 
 ns 
 ns 
 SFR_DIV 
 SFR clock in kHz 
 Reset 
 Standard (0) or Fast (1) Mode 
 Standard Mode SCL High counter 
 Standard Mode SCL Low counter 
 Fast Mode SCL High Counter 
 Fast Mode SCL Low Counter 
 SDA Hold Time 
 NACK_POL to high 
 NACK_MASK to unmasked 
 ARBITRATION_POL to high 
 ARBITRATION_MASK to unmasked 
 DONE_POL to high 
 DONE_MASK to unmasked 
 Mask I2C interrupts 
	
	  TODO: We use polling here, although we probably should use proper
	  interrupts.
 clear ERROR and DONE 
 I2CM_ERROR 
 I2CM_DONE 
 video core 
 It is always 1
 Always 0 - need to confirm 
 DSS_HDMI_CORE_VIDEO_CONFIG 
 Set hsync, vsync and data-enable polarity  
 set x resolution 
 set y resolution 
 set horizontal blanking pixels 
 set vertial blanking pixels 
 set horizontal sync offset 
 set vertical sync offset 
 set horizontal sync pulse width 
  set vertical sync pulse width 
 select DVI mode 
 24 bit color depth 
 COLOR_DEPTH 
 BYPASS_EN 
 PP_EN 
 YCC422_EN 
 PP_STUFFING 
 YCC422_STUFFING 
 OUTPUT_SELECTOR 
 24 bit color depth 
 CSC_COLORDEPTH 
 for 24 bit color depth 
 VIDEO_MAPPING 
 support limited range with 24 bit color depth for now 
 Master IRQ mask 
 Mask all the interrupts in HDMI core 
 Clear all the current interrupt bits 
 Unmute interrupts 
 video config 
 support limited range with 24 bit color depth for now 
	
	  configure core video part, set software reset in the core
 Mute audio before configuring 
 Set the N parameter 
	
	  CTS manual mode. Automatic mode is not supported when using audio
	  parallel interface.
 Layout of Audio Sample Packets: 2-channel or multichannels 
 Configure IEC-609580 Validity bits 
 Channel 0 is valid 
 Channels 1, 2 setting 
 Channel 3 setting 
 Configure IEC-60958 User bits 
 TODO: should be set by user. 
 Configure IEC-60958 Channel Status word 
 CGMSA 
 Copyright 
 Category 
 PCM audio mode 
 Source number 
 Channel number right 0  
 Channel number right 1
 Channel number right 2  
 Channel number right 3
 Channel number left 0  
 Channel number left 1
 Channel number left 2  
 Channel number left 3
 Clock accuracy and sample rate 
 Original sample rate and word length 
 Enable FIFO empty and full interrupts 
 Configure GPA 
 select HBRSPDIF interfaces 
 select HBRSPDIF interfaces 
 enable two channels in GPA 
 select HBRSPDIF interfaces 
 enable six channels in GPA 
 select HBRSPDIF interfaces 
 enable eight channels in GPA 
 disable HBR 
 enable PCUV 
 enable GPA FIFO full and empty mask 
 set polarity of GPA FIFO empty interrupts 
 unmute audio 
 channel count and coding type fields in AUDICONF0 are swapped 
 only 16-bit word length supported atm 
 Audio channels settings 
 DMA settings 
 in number of samples 
 audio FIFO format settings for 16-bit samples
 only LPCM atm 
 only allowed option 
 disable startstop signals of IEC 60958 blocks 
 configure DMA and audio FIFO format
 configure the core 
 configure CEA 861 audio infoframe 
 SPDX-License-Identifier: GPL-2.0-only
  linuxdriversvideoomap2dssdispc.c
  Copyright (C) 2009 Nokia Corporation
  Author: Tomi Valkeinen <tomi.valkeinen@nokia.com>
  Some code and ideas taken from driversvideoomap driver
  by Imre Deak.
 DISPC 
 swap GFX & WB fifos 
 no DISPC_IRQ_FRAMEDONETV on this SoC 
 revert to the OMAP4 mechanism of DISPC Smart Standby operation 
 PIXEL_INC is not added to the last pixel of a line 
 POL_FREQ has ALIGN bit 
 maps which plane is using a fifo. fifo-id -> plane-id 
 DISPC_CONTROL & DISPC_CONFIG lock
	 used for all color formats for OMAP3 and earlier
	  and for RGB and Y color component on OMAP4
	 used for UV component for
	  OMAP_DSS_COLOR_YUV2, OMAP_DSS_COLOR_UYVY, OMAP_DSS_COLOR_NV12
	  color formats on OMAP4
 used to maintain a count of the above fields 
RR(IRQENABLE);
RR(CONTROL);
 enable last, because LCD & DIGIT enable are here 
 clear spurious SYNC_LOST_DIGIT interrupts 
	
	  enable last so IRQs won't trigger before
	  the context is fully restored
 YUV -> RGB 
 RGB -> YUV 
 Configure burst size always to maximum size 
 burst multiplier is always x8 (see dispc_configure_burst_sizes()) 
	
	  This is partially implemented to support only disabling of
	  the gamma table.
		
		  By default fifos are mapped directly to overlays, fifo 0 to
		  ovl 0, fifo 1 to ovl 1, etc.
	
	  The GFX fifo on OMAP4 is smaller than the other fifos. The small fifo
	  causes problems with certain use cases, like using the tiler in 2D
	  mode. The below hack swaps the fifos of GFX and WB planes, thus
	  giving GFX plane a larger fifo. WB but should work fine with a
	  smaller fifo.
 GFX BUF top to WB 
 GFX BUF bottom to WB 
 WB BUF top to GFX 
 WB BUF bottom to GFX 
	
	  Setup default fifo thresholds.
	
	  configure the preload to the pipeline's high threhold, if HT it's too
	  large for the preload field, set the threshold to the maximum value
	  that can be held by the preload register
	
	  All sizes are in bytes. Both the buffer and burst are made of
	  buffer_units, and the fifo thresholds must be buffer_unit aligned.
	
	  We use the same low threshold for both fifomerge and non-fifomerge
	  cases, but for fifomerge we calculate the high threshold using the
	  combined fifo size
		
		  Most optimal configuration for writeback is to push out data
		  to the interconnect the moment writeback pushes enough pixels
		  in the FIFO to form a burst
	
	  HACK: NV12 color format and MFLAG seem to have problems working
	  together: using two displays, and having an NV12 overlay on one of
	  the displays will cause underflowssynclosts when MFLAG_CTRL=2.
	  Changing MFLAG thresholds and PRELOAD to certain values seem to
	  remove the errors, but there doesn't seem to be a clear logic on
	  which values work and which not.
	 
	  As a work-around, set force MFLAG to always on.
 MFLAG_CTRL = force always on 
 MFLAG_START = disable 
		
		  Simulation team suggests below thesholds:
		  HT = fifosize  5  8;
		  LT = fifosize  4  8;
		
		  Simulation team suggests below thesholds:
		  HT = fifosize  5  8;
		  LT = fifosize  4  8;
 RESIZEENABLE and VERTICALTAPS 
 VRESIZECONF and HRESIZECONF 
 LINEBUFFERSPLIT 
	
	  field 0 = even field = bottom field
	  field 1 = odd field = top field
 reset chroma resampling for RGB formats  
 UV is subsampled by 2 horizontally and vertically 
 UV is downsampled by 2 horizontally and vertically 
 For YUV422 with 90270 rotation, we don't upsample chroma 
 UV is subsampled by 2 horizontally 
 UV is downsampled by 2 horizontally 
 must use FIR for YUV422 if rotated 
 set H scaling 
 set V scaling 
	
	  OMAP45 Errata i631:
	  NV12 in 1D mode must use ROTATION=1. Otherwise DSS will fetch extra
	  rows beyond the framebuffer, which may cause OCP error.
 DOUBLESTRIDE 
 FIXME CLUT formats 
	
	  field 0 = even field = bottom field
	  field 1 = odd field = top field
		
		  If the pixel format is YUV or UYVY divide the width
		  of the image by 2 for 0 and 180 degree rotation.
		 If the pixel format is YUV or UYVY divide the width
		  of the image by 2  for 0 degree and 180 degree
 FIXME CLUT formats 
 width & height are overlay sizes, convert to fb sizes 
	
	  field 0 = even field = bottom field
	  field 1 = odd field = top field
 mirroring 
	
	  field 0 = even field = bottom field
	  field 1 = odd field = top field
  This function is used to avoid synclosts in OMAP3, because of some
  undocumented horizontal position and timing related limitations.
 FIXME add checks for 3-tap filter once the limitations are known 
	
	  Pixel data should be prepared before visible display point starts.
	  So, atleast DS-2 lines must have already been fetched by DISPC
	  during nonactive - pos_x period.
	
	  All lines need to be refilled during the nonactive period of which
	  only one line can be loaded during the active period. So, atleast
	  DS - 1 lines should be loaded during nonactive period.
	
	  FIXME how to determine the 'A' factor
	  for the no downscaling case ?
	
	  If the overlaywriteback is in mem to mem mode, there are no
	  downscaling limitations with respect to pixel clock, return 1 as
	  required core clock to represent that we have sufficient enough
	  core clock to do maximum downscaling
 verify that we're inside the limits of scaler 
		
		  when downscaling the bottom field may have to start several
		  source lines below the top field. Unfortunately ACCUI
		  registers will only hold the fractional part of the offset
		  so the integer part must be added to the base address of the
		  bottom field.
 Fields are independent but interleaved in memory. 
 flush posted write 
 TODO: OMAP4+ supports interlace for LCD outputs 
 always use the 'rf' setting 
 always set ALIGN bit when available 
 change name to mode? 
 DISPC common registers 
 DISPC channel specific registers 
 Video pipeline coefficient registers 
 start from OMAP_DSS_VIDEO1 
 calculate clock rates using dividers in cinfo 
			
			  For OMAP23 the DISPC fclk is the same as LCD's logic
			  clock, which means we're configuring DISPC fclk here
			  also. Thus we need to use the calculated lck. For
			  OMAP4+ the DISPC fclk is a separate clock.
 clear the irqstatus for newly enabled irqs 
 SIDLEMODE: smart idle 
 SIDLEMODE: no idle 
 Exclusively enable DISPC_CORE_CLK and set divider to 1 
 Use DISPC_DIVISOR.LCD, instead of DISPC_DIVISOR1.LCD 
 FUNCGATED 
 ensure the dispc_irq_handler sees the values above 
 DISPC HW IP initialisation 
 ensure the dispc_irq_handler sees the is_enabled value 
 wait for current handler to finish before turning the DISPC off 
	
	  The reset value for load mode is 0 (OMAP_DSS_LOAD_CLUT_AND_FRAME)
	  but we always initialize it to 2 (OMAP_DSS_LOAD_FRAME_ONLY) in
	  _omap_dispc_initial_config(). We can thus use it to detect if
	  we have lost register context.
 ensure the dispc_irq_handler sees the is_enabled value 
 SPDX-License-Identifier: GPL-2.0-only
  linuxdriversvideoomap2dssvenc.c
  Copyright (C) 2009 Nokia Corporation
  Author: Tomi Valkeinen <tomi.valkeinen@nokia.com>
  VENC settings from TI's DSS driver
 Venc registers 
 from TRM 
 863 
 624 
 from TRM 
 the magical sleep that makes things work 
 XXX more info? What bug this circumvents? 
 S-Video 
 Reset WSS data when the TV standard changes. 
 Invert due to VENC_L21_WC_CTL:INV=1 
 Invert due to VENC_L21_WC_CTL:INV=1 
 VENC HW IP initialisation 
 SPDX-License-Identifier: GPL-2.0-only
  HDMI driver for OMAP5
  Copyright (C) 2014 Texas Instruments Incorporated
  Authors:
 	Yong Zhi
 	Mythri pk
 	Archit Taneja <archit@ti.com>
 	Tomi Valkeinen <tomi.valkeinen@ti.com>
		
		  If we get both connect and disconnect interrupts at the same
		  time, turn off the PHY, clear interrupts, and restart, which
		  raises connect interrupt if a cable is connected, or nothing
		  if cable is not connected.
		
		  We always get bogus CONNECT & DISCONNECT interrupts when
		  setting the PHY to LDOON. To ignore those, we force the RXDET
		  line to 0 until the PHY power state has been changed.
 FORCE_RXDET_HIGH 
 RXDET_LINE 
 Make selection of HDMI in DSS 
 disable and clear irqs 
 bypass TV gamma table 
 tv size 
 TODO: proper interlace support 
 No-idle mode 
 Audio callbacks 
 HDMI HW IP initialisation 
 SPDX-License-Identifier: GPL-2.0-only
  linuxdriversvideoomap2dssdisplay.c
  Copyright (C) 2009 Nokia Corporation
  Author: Tomi Valkeinen <tomi.valkeinen@nokia.com>
  Some code and ideas taken from driversvideoomap driver
  by Imre Deak.
	
	  Note: this presumes all the displays are either using DT or non-DT,
	  which normally should be the case. This also presumes that all
	  displays either have an DT alias, or none has.
 Use 'label' property for name, if it exists 
  ref count of the found device is incremented.
  ref count of from-device is decremented.
 SPDX-License-Identifier: GPL-2.0-only
  linuxdriversvideoomap2dssdispc_coefs.c
  Copyright (C) 2011 Texas Instruments
  Author: Chandrabhanu Mahapatra <cmahapatra@ti.com>
		
		  When upscaling more than two times, blockiness and outlines
		  around the image are observed when M8 tables are used. M11,
		  M16 and M19 tables are used to prevent this.
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2012 Texas Instruments Ltd
  Author: Archit Taneja <archit@ti.com>
 SPDX-License-Identifier: GPL-2.0-only
  linuxdriversvideoomap2dssdsi.c
  Copyright (C) 2009 Nokia Corporation
  Author: Tomi Valkeinen <tomi.valkeinen@nokia.com>
 DSI Protocol Engine 
 DSIPHY_SCP 
 DSI_PLL_CTRL_SCP 
 Global interrupts 
 Virtual channel interrupts 
 ComplexIO interrupts 
 DSI PLL HSDIV indices 
 inputs 
 outputs 
 space for a copy used by the interrupt handler 
 first busyloop to see if the bit changes right away 
 then loop for 500ms, sleeping for 1ms in between 
 IRQ is not for us 
 flush posted write 
 flush posted write 
 flush posted write 
	 make a copy and unlock, so that isrs can unregister
 dsi->irq_lock has to be locked by the caller 
 clear the irqstatus for newly enabled irqs 
 flush posted writes 
 dsi->irq_lock has to be locked by the caller 
 dsi->irq_lock has to be locked by the caller 
 dsi->irq_lock has to be locked by the caller 
 check for duplicate entry and find a free slot 
	 A dummy read using the SCP interface to any DSIPHY register is
	  required after DSIPHY reset to complete the reset of the DSI complex
 IF_EN 
 DSI FCLK source is DSS_CLK_FCK 
 DSI FCLK source is dsi_pll_hsdiv_dsi_clk 
 LP_CLK_DIVISOR 
 LP_RX_SYNCHRO_ENABLE 
 CIO_CLK_ICG 
 CIO_CLK_ICG 
 DSI-PLL power command 0x3 is not working 
 PLL_PWR_CMD 
 PLL_PWR_STATUS 
	
	  Note: SCP CLK is not required on OMAP3, but it is required on OMAP4.
 XXX PLL does not come out of reset without this... 
	 XXX ... but if left on, we get problems when planes do not
 PWR_CMD 
 PWR_STATUS 
 line buffer on OMAP3 is 1024 x 24bits 
	 XXX: for some reason using full buffer size causes
	  considerable TX slowdown with update sizes that fill the
 VP1_LINE_BUFFER_SIZE 
 512x24 bits 
 682x24 bits 
 853x24 bits 
 1024x24 bits 
 1194x24 bits 
 1365x24 bits 
 1920x24 bits 
 clear the unused lanes 
 convert time in ns to ddr ticks, rounding up 
 calculate timings 
 1  DDR_CLK = 2  UI 
 min 40ns + 4UI	max 85ns + 6UI 
 min 145ns + 10UI 
 min max(8UI, 60ns+4UI) 
 min 100ns 
 tlpx min 50n 
 min 60ns 
 min 38ns, max 95ns 
 min tclk-prepare + tclk-zero = 300ns 
 program timings 
 DCCEN = disable 
 CLKINP_DIVBY2EN = enable 
 CLKINP_SEL = enable 
 lane masks have lane 0 at lsb. mask_p for positive lines, n for negative 
	
	  Bits in REGLPTXSCPDAT4TO0DXDY:
	  17: DY0 18: DX0
	  19: DY1 20: DX1
	  21: DY2 22: DX2
	  23: DY3 24: DX3
	  25: DY4 26: DX4
 Set the lane override configuration 
 REGLPTXSCPDAT4TO0DXDY 
 Enable lane override 
 ENLPTXSCPDAT 
 Disable lane override 
 ENLPTXSCPDAT 
 Reset the lane override configuration 
 REGLPTXSCPDAT4TO0DXDY 
 return bitmask of enabled lanes, lane0 being the lsb 
	 A dummy read using the SCP interface to any DSIPHY register is
	  required after DSIPHY reset to complete the reset of the DSI complex
 set TX STOP MODE timer to maximum for this operation 
 FORCE_TX_STOP_MODE_IO 
 STOP_STATE_X16_IO 
 STOP_STATE_X4_IO 
 STOP_STATE_COUNTER_IO 
		 ULPS is exited by Mark-1 state for 1ms, followed by
		  stop state. DSS HW cannot do this via the normal
		  ULPS exit sequence, as after reset the DSS HW thinks
		  that we are not in ULPS mode, and refuses to send the
		  sequence. So we need to send the ULPS exit sequence
		  manually by setting positive lines high and negative lines
		  low for 1ms.
 LP_CLK_ENABLE 
 Keep Mark-1 state for 1ms (as per DSI spec) 
		 Disable the override. The lanes should be set to Mark-11
 FORCE_TX_STOP_MODE_IO 
 DDR_CLK_ALWAYS_ON 
 LP_CLK_ENABLE 
 DDR_CLK_ALWAYS_ON 
DSSDBG("TX FIFO vc %d: size %d, add %d\n", i, size, add); 
DSSDBG("RX FIFO vc %d: size %d, add %d\n", i, size, add); 
 FORCE_TX_STOP_MODE_IO 
 Wait for completion only if TE_ENTE_START is still set 
 Wait for completion only if TX_FIFO_NOT_EMPTY is still set 
 VC_BUSY 
 SOURCE, 0 = L4 
 BTA_SHORT_EN  
 BTA_LONG_EN 
 MODE, 0 = command 
 CS_TX_EN 
 ECC_TX_EN 
 MODE_SPEED, high speed onoff 
 OCP_WIDTH = 32 bit 
 DMA_RX_REQ_NB = no dma 
 DMA_TX_REQ_NB = no dma 
 VC_BUSY 
 SOURCE, 0 = L4, 1 = video port 
 DCS_CMD_ENABLE 
 start the DDR clock by sending a NULL packet 
 RX_FIFO_NOT_EMPTY 
 RX_FIFO_NOT_EMPTY 
 BTA_EN 
 flush posted write 
	DSSDBG("\twriting %02x, %02x, %02x, %02x (%#010x)\n",
u32 val; 
 len + header 
 RX_FIFO_NOT_EMPTY 
 RX_FIFO_NOT_EMPTY 
 two byte checksum ends the packet, not included in len 
 we discard the 2 byte checksum 
 DDR_CLK_ALWAYS_ON 
 HS_BUSY 
 LP_BUSY 
 Assert TxRequestEsc for data lanes and TxUlpsClk for clk lane 
 LANEx_ULPS_SIG2 
 flush posted write and wait for SCP interface to finish the write 
 Reset LANEx_ULPS_SIG2 
 flush posted write and wait for SCP interface to finish the write 
 ticks in DSI_FCK 
 LP_RX_TO 
 LP_RX_TO_X16 
 LP_RX_TO_X4 
 LP_RX_COUNTER 
 ticks in DSI_FCK 
 TA_TO 
 TA_TO_X16 
 TA_TO_X8 
 TA_TO_COUNTER 
 ticks in DSI_FCK 
 FORCE_TX_STOP_MODE_IO 
 STOP_STATE_X16_IO 
 STOP_STATE_X4_IO 
 STOP_STATE_COUNTER_IO 
 ticks in TxByteClkHS 
 HS_TX_TO 
 HS_TX_TO_X16 
 HS_TX_TO_X8 (4 really) 
 HS_TX_TO_COUNTER 
		
		  Don't use line buffers if width is greater than the video
		  port's line buffer size
 Use maximum number of line buffers in command mode 
 LINE_BUFFER 
 VP_DE_POL 
 VP_HSYNC_POL 
 VP_VSYNC_POL 
 VP_VSYNC_START 
 VP_VSYNC_END 
 VP_HSYNC_START 
 VP_HSYNC_END 
	
	  0 = TX FIFO packets sent or LPS in corresponding blanking periods
	  1 = Long blanking packets are sent in corresponding blanking periods
 BLANKING_MODE 
 HFP_BLANKING 
 HBP_BLANKING 
 HSA_BLANKING 
  According to section 'HS Command Mode Interleaving' in OMAP TRM, Scenario 3
  results in maximum transition time for data and clock lanes to enter and
  exit HS mode. Hence, this is the scenario where the least amount of command
  mode data can be interleaved. We program the minimum amount of TXBYTECLKHS
  clock cycles that can be used to interleave command mode data in HS so that
  all scenarios are satisfied.
	
	  If DDR_CLK_ALWAYS_ON is set, we need to consider HS mode transition
	  time of data lanes only, if it isn't set, we need to consider HS
	  transition time of both data and clock lanes. HS transition time
	  of Scenario 3 is considered.
  According to section 'LP Command Mode Interleaving' in OMAP TRM, Scenario 1
  results in maximum transition time for data lanes to enter and exit LP mode.
  Hence, this is the scenario where the least amount of command mode data can
  be interleaved. We program the minimum amount of bytes that can be
  interleaved in LP so that all scenarios are satisfied.
 time required for a LP transition, in TXBYTECLKHS 
 time left for interleaving commands, in CLKIN4DDR 
 period of LP transmit escape clock, in CLKIN4DDR 
 Period of TXBYTECLKHS clock, in CLKIN4DDR 
 cmd mode data that can be interleaved, in bytes 
 maximum LP transition time according to Scenario 1 
 CLKIN4DDR = 16  TXBYTECLKHS 
 XXX what values for the timeouts? 
 CS_RX_EN 
 ECC_RX_EN 
 TX_FIFO_ARBITRATION 
 VP_CLK_RATIO, always 1, see errata
 VP_DATA_BUS_WIDTH 
 VP_CLK_POL 
 TRIGGER_RESET_MODE 
 EOT_ENABLE 
 DCS_CMD_ENABLE 
 DCS_CMD_CODE, 1=start, 0=continue 
 min 8UI 
 min 60ns + 52UI 
 TODO: Implement a video mode check_timings function 
 TL = t_HS + HSA + t_HE + HFP + ceil((WC + 6)  NDL) + HBP 
 HBP 
 HFP 
 HSA 
 VBP 
 VFP 
 VSA 
 WINDOW_SYNC 
 VACT 
 TL 
 MODE, 1 = video mode 
 MODE, 0 = command mode 
	 NOTE: packet_payload has to be equal to N  bytespl, where N is
 1 byte for DCS cmd 
 TE_SIZE 
 TE_EN 
 TE_START 
	 We put SIDLEMODE to no-idle for the duration of the transfer,
	  because DSS interrupts are not capable of waking up the CPU and the
	  framedone interrupt could be delayed for quite a long time. I think
	  the same goes for any DSS interrupts, but for some reason I have not
	  seen the problem anywhere else than here.
		 disable LP_RX_TO, so that we can receive TE.  Time to wait
 LP_RX_TO 
 SIDLEMODE back to smart-idle 
 enable LP_RX_TO again after the TE 
 LP_RX_TO 
	 XXX While extremely unlikely, we could get FRAMEDONE interrupt after
	  250ms which would conflict with this timeout work. What should be
	  done is first cancel the transfer on the HW, and then cancel the
	  possibly scheduled framedone work. However, cancelling the transfer
	  on the HW is buggy, and would probably require resetting the whole
	 Note: We get FRAMEDONE when DISPC has finished sending pixels and
	  turns itself off. However, DSI still has the pixels in its buffers,
	  and is sending the data.
 Display funcs 
	
	  override interlace, logic level and edge related parameters in
	  omap_video_timings with default values
 enable interface 
 disable interface 
 pixel packet size 
 note: this is not quite accurate 
 PRINT_VERBOSE_VM_TIMINGS 
	
	  Here we should calculate minimum txbyteclk to be able to send the
	  frame in time, and also to handle TE. That's not very simple, though,
	  especially as we go to LP between each pixel packet due to HW
	  "feature". So let's just estimate very roughly and multiply by 1.5.
 pixels 
 pixels 
 byteclks 
	
	  When there are no line buffers, DISPC and DSI must have the
	  same tput. Otherwise DISPC tput needs to be higher than DSI's.
 DSI tput must be over the min requirement 
 When non-burst mode, DSI tput must be below max requirement. 
 DSI htot to match the panel's nominal pck 
 fail if there would be no time for blanking 
 total DSI blanking needed to achieve panel's TL 
 DISPC htot to match the DSI TL 
 verify that the DSI and DISPC TLs are the same 
 setup DSI videomode 
 we need to take cycles from hbp 
 we need to take cycles from hsa 
 setup DISPC videomode 
 we need to take cycles from hbp 
 we need to take cycles from hsa 
	
	  In burst mode we can let the dispc pck be arbitrarily high, but it
	  limits our scaling abilities. So for now, don't aim too high.
 these limits should come from the panel driver 
  Return a hardcoded channel for the DSI output. This should work for
  current use cases, but this can be later expanded to either resolve
  the channel in some more dynamic manner, or get the channel as a user
  parameter.
 DSI1 HW IP initialisation 
 DSI VCs initialization 
	 DSI on OMAP3 doesn't have register DSI_GNQ, set number
 NB_DATA_LANES 
 ensure the irq handler sees the is_enabled value 
 wait for current handler to finish before turning the DSI off 
 ensure the irq handler sees the is_enabled value 
 SPDX-License-Identifier: GPL-2.0-only
  HDMI wrapper
  Copyright (C) 2013 Texas Instruments Incorporated
 flush posted write 
 PHY_PWR_CMD 
 Return if already the state 
 Command for power control of HDMI PHY 
 Status of the power control of HDMI PHY 
 PLL_PWR_CMD 
 Command for power control of HDMI PLL 
 wait till PHY_PWR_STATUS is set 
 HDMI_TIMING_MASTER_24BIT 
 SPDX-License-Identifier: GPL-2.0-only
  HDMI PLL
  Copyright (C) 2013 Texas Instruments Incorporated
 Fint 
 adjust m2 so that the clkdco will be high enough 
 adjust clkdco with fractional mf 
 sigma-delta 
 SPDX-License-Identifier: GPL-2.0-only
  linuxdriversvideoomap2dssmanager.c
  Copyright (C) 2009 Nokia Corporation
  Author: Tomi Valkeinen <tomi.valkeinen@nokia.com>
  Some code and ideas taken from driversvideoomap driver
  by Imre Deak.
		
		  OMAP3 supports only graphics source transparency color key
		  and alpha blending simultaneously. See TRM 15.4.2.4.2.2
		  Alpha Mode.
 fifohandcheck should be used only with stallmode 
	
	  io pad mode can be only checked by using dssdev connected to the
	  manager. Ignore checking these for now, add checks when manager
	  is capable of holding information related to the connected interface
 SPDX-License-Identifier: GPL-2.0-only
 Copyright (C) 2014 Texas Instruments Ltd
 CIO_CLK_ICG 
 CIO_CLK_ICG 
 PLL_POWER_ON_ALL 
	
	  DRA7x PLL CTRL's PLL_PWR_STATUS seems to always return 0,
	  so we have to use fixed delay here.
 PLL_POWER_OFF 
 PLL CONTROL 
 CLOCK CONTROL 
 CLKIN 
 SPDX-License-Identifier: GPL-2.0-only
  HDMI interface DSS driver for TI's OMAP4 family of SoCs.
  Copyright (C) 2010-2011 Texas Instruments Incorporated - https:www.ti.com
  Authors: Yong Zhi
 	Mythri pk <mythripk@ti.com>
		
		  If we get both connect and disconnect interrupts at the same
		  time, turn off the PHY, clear interrupts, and restart, which
		  raises connect interrupt if a cable is connected, or nothing
		  if cable is not connected.
 Make selection of HDMI in DSS 
 disable and clear irqs 
 bypass TV gamma table 
 tv size 
 Audio callbacks 
 HDMI HW IP initialisation 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2014 Texas Instruments
  Author: Tomi Valkeinen <tomi.valkeinen@ti.com>
  As omapdss panel drivers are omapdss specific, but we want to define the
  DT-data in generic manner, we convert the compatible strings of the panel and
  encoder nodes from "panel-foo" to "omapdss,panel-foo". This way we can have
  both correct DT data and omapdss specific drivers.
  When we get generic panel drivers to the kernel, this file will be removed.
 prepend compatible property strings with "omapdss," 
 is it already prefixed? 
	
	  of_graph_get_remote_port_parent() prints an error if there is no
	  portports node. To avoid that, check first that there's the node.
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2012 Texas Instruments
  Author: Tomi Valkeinen <tomi.valkeinen@ti.com>
 dispc.irq_lock has to be locked by the caller 
 check for duplicate entry 
 found the correct isr 
 Called from dss.c. Note that we don't touch clocks here,
  but we presume they are on because we got an IRQ. However,
  an irq handler may turn the clocks off, so we may not have
 IRQ is not for us 
	 Ack the interrupt. Do it here before clocks are possibly turned
 flush posted write 
	 make a copy and unlock, so that isrs can unregister
	
	  there's SYNC_LOST_DIGIT waiting after enabling the DSS,
	  so clear it
	
	  When we disable LCD output, we need to wait for FRAMEDONE to know
	  that DISPC has finished with the LCD output.
 if we couldn't register for framedone, just sleep and exit 
 ignore any sync lost interrupts 
	
	  Digit output produces some sync lost interrupts during the first
	  frame when enabling. Those need to be ignored, so we register for the
	  sync lost irq to prevent the error handler from triggering.
 wait for the first evsync 
	
	  When we disable the digit output, we need to wait for FRAMEDONE to
	  know that DISPC has finished with the output.
		
		  omap 23 don't have framedone irq for TV, so we need to use
		  vsyncs for this.
		
		  We need to wait for both even and odd vsyncs. Note that this
		  is not totally reliable, as we could get a vsync interrupt
		  before we disable the output, which leads to timeout in the
		  wait_for_completion.
 if we couldn't register the irq, just sleep and exit 
 SPDX-License-Identifier: GPL-2.0
 TODO: When implemented, query deep color mode here. 
	
	  When using deep color, the default N value (as in the HDMI
	  specification) yields to an non-integer CTS. Hence, we
	  modify it while keeping the restrictions described in
	  section 7.2.1 of the HDMI 1.4a specification.
 Calculate CTS. See HDMI 1.3a or 1.4a specifications 
 SPDX-License-Identifier: GPL-2.0-only
  linuxdriversvideoomap2dssdss_features.c
  Copyright (C) 2010 Texas Instruments
  Author: Archit Taneja <archit@ti.com>
 Defines a generic omap register field 
 This struct is assigned to one of the below during initialization 
 OMAP_DSS_CHANNEL_LCD 
 OMAP_DSS_CHANNEL_DIGIT 
 OMAP_DSS_CHANNEL_LCD 
 OMAP_DSS_CHANNEL_DIGIT 
 OMAP_DSS_CHANNEL_LCD 
 OMAP_DSS_CHANNEL_DIGIT 
 OMAP_DSS_CHANNEL_LCD 
 OMAP_DSS_CHANNEL_LCD 
 OMAP_DSS_CHANNEL_DIGIT 
 OMAP_DSS_CHANNEL_LCD2 
 OMAP_DSS_CHANNEL_LCD 
 OMAP_DSS_CHANNEL_DIGIT 
 OMAP_DSS_CHANNEL_LCD2 
 OMAP_DSS_CHANNEL_LCD 
 OMAP_DSS_CHANNEL_DIGIT 
 OMAP_DSS_CHANNEL_LCD 
 OMAP_DSS_CHANNEL_DIGIT 
 OMAP_DSS_CHANNEL_LCD 
 OMAP_DSS_CHANNEL_DIGIT 
 OMAP_DSS_CHANNEL_LCD 
 OMAP_DSS_CHANNEL_LCD 
 OMAP_DSS_CHANNEL_DIGIT 
 OMAP_DSS_CHANNEL_LCD2 
 OMAP_DSS_CHANNEL_LCD 
 OMAP_DSS_CHANNEL_DIGIT 
 OMAP_DSS_CHANNEL_LCD2 
 OMAP_DSS_CHANNEL_LCD3 
 OMAP_DSS_GFX 
 OMAP_DSS_VIDEO1 
 OMAP_DSS_VIDEO2 
 OMAP_DSS_GFX 
 OMAP_DSS_VIDEO1 
 OMAP_DSS_VIDEO2 
 OMAP_DSS_GFX 
 OMAP_DSS_VIDEO1 
 OMAP_DSS_VIDEO2 
 OMAP_DSS_VIDEO3 
 OMAP_DSS_WB 
 OMAP_DSS_GFX 
 OMAP_DSS_VIDEO1 
 OMAP_DSS_VIDEO2 
 OMAP_DSS_GFX 
 OMAP_DSS_VIDEO1 
 OMAP_DSS_VIDEO2 
 OMAP_DSS_GFX 
 OMAP_DSS_VIDEO1 
 OMAP_DSS_VIDEO2 
 OMAP_DSS_GFX 
 OMAP_DSS_VIDEO1 
 OMAP_DSS_VIDEO2 
 OMAP_DSS_VIDEO3 
	
	  Assuming the line width buffer to be 768 pixels as OMAP2 DISPC
	  scaler cannot scale a image with width more than 768.
 OMAP2 DSS Features 
 OMAP3 DSS Features 
  AM35xx DSS Features. This is basically OMAP3 DSS Features without the
  vdds_dsi regulator.
 OMAP4 DSS Features 
 For OMAP4430 ES 1.0 revision 
 For OMAP4430 ES 2.0, 2.1 and 2.2 revisions 
 For all the other OMAP4 versions 
 OMAP5 DSS Features 
 Functions returning values related to a DSS feature 
 DSS has_feature check 
 SPDX-License-Identifier: GPL-2.0-only
  linuxdriversvideoomap2dssdss.c
  Copyright (C) 2009 Nokia Corporation
  Author: Tomi Valkeinen <tomi.valkeinen@nokia.com>
  Some code and ideas taken from driversvideoomap driver
  by Imre Deak.
 SDI_PDIV 
 SDI_PRSEL 
 SDI_BWSEL 
 SDI_PLL_FREQSEL 
 SDI_PLL_REGN 
 SDI_PLL_REGM 
 Reset SDI PLL 
 SDI_PLL_SYSRESET 
 wait 2x PCLK 
 Lock SDI PLL 
 SDI_PLL_GOBIT 
 Waiting for PLL lock request to complete 
 Clearing PLL_GO bit 
 Waiting for PLL to lock 
 Waiting for SDI reset to complete 
 Reset SDI PLL 
 SDI_PLL_SYSRESET 
 Reset SDI PLL 
 SDI_PLL_SYSRESET 
 DISPC_CLK_SWITCH 
 DSIx_CLK_SWITCH 
 LCDx_CLK_SWITCH 
		 LCD_CLK source is the same as DISPC_FCLK source for
 venc out selection. 0 = comp, 1 = svideo 
 DAC Power-Down Control 
 Complain about invalid selections 
 Select only if we have options 
 VENC_HDMI_SWITCH 
 DEBUGFS 
	
	  fck div max is really 16, but the divider range has gaps. The range
	  from 1 to 6 has no gaps, so let's use that as a max.
 DSS HW IP initialisation 
 Select DPLL 
 venc dac demen 
 venc clock 4x enable 
 venc clock mode = normal 
	
	  HACK
	  We don't have a working driver for rfbi, so skip it here always.
	  Otherwise dss will never get probed successfully, as it will wait
	  for rfbi to get probed.
 add all the child devices as components 
	
	  Set an arbitrarily high tput request to ensure OPP100.
	  What we should really do is to make a request to stay in OPP100,
	  without any tput requirements, but that is not currently possible
	  via the PM layer.
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2011 Texas Instruments
  Author: Tomi Valkeinen <tomi.valkeinen@ti.com>
  We have 4 levels of cache for the dispc settings. First two are in SW and
  the latter two in HW.
        set_info()
           v
  +--------------------+
  |     user_info      |
  +--------------------+
           v
         apply()
           v
  +--------------------+
  |       info         |
  +--------------------+
           v
       write_regs()
           v
  +--------------------+
  |  shadow registers  |
  +--------------------+
           v
  VFP or lcddigit_enable
           v
  +--------------------+
  |      registers     |
  +--------------------+
	
	  True if overlay is to be enabled. Used to check and calculate configs
	  for the overlay before it is enabled in the HW.
	 If true, GO bit is up and shadow registers cannot be written.
 If true, dispc output is enabled 
 If true, a display is enabled using this manager 
 protects dss_data 
 lock for blocking functions 
	
	  Initialize some of the lcd_config fields for TV manager, this lets
	  us prevent checking if the manager is LCD or TV at some places
  A LCD manager's stallmode decides whether it is in manual or auto update. TV
  manager is always auto update, stallmode field for TV manager is false by
  default
 collect the infos to be tested into the array 
  check manager and overlay settings using overlay_info from data->info
  check manager and overlay settings using overlay_info from ovl->info if
  dirty and from data->info otherwise
 to catch FRAMEDONE 
 to catch GO bit going down 
 to write new values to registers 
 to set GO bit 
			
			  NOTE: we don't check extra_info flags for disabled
			  managers, once the manager is enabled, the extra_info
			  related manager changes will be taken in by HW.
 to write new values to registers 
 to set GO bit 
				
				  NOTE: we check extra_info flags even for
				  disabled overlays, as extra_infos need to be
				  always written.
 to write new values to registers 
 to set GO bit 
 to write new values to registers 
 to set GO bit 
 returns true if an extra_info field is currently being updated 
 wait until no extra_info updates are pending 
		 4 iterations is the worst case:
		  1 - initial iteration, dirty = true (between VFP and VSYNC)
		  2 - first VSYNC, dirty = true
		  3 - dirty = false, shadow_dirty = true
		 4 iterations is the worst case:
		  1 - initial iteration, dirty = true (between VFP and VSYNC)
		  2 - first VSYNC, dirty = true
		  3 - dirty = false, shadow_dirty = true
		
		  We can't do much here, as this function can be called from
		  vsync interrupt.
 This will leave fifo configurations in a nonoptimal state 
	 note: write also when op->enabled == false, so that the ovl gets
 Commit overlay settings 
 lcd_config parameters 
 clear busy, updating flags, shadow_dirty flags 
 call framedone handlers for manual update displays 
 Configure overlays 
 Configure manager 
 wait for pending extra_info updates to ensure the ovl is disabled 
	
	  For a manual update display, there is no guarantee that the overlay
	  is really disabled in HW, we may need an extra update from this
	  manager before the configurations can go in. Return an error if the
	  overlay needed an update from the manager.
	 
	  TODO: Instead of returning an error, try to do a dummy manager update
	  here to disable the overlay in hardware. Use the GATED fields in
	  the DISPC_CONFIG registers to do a dummy update.
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2009 Nokia Corporation
  Author: Tomi Valkeinen <tomi.valkeinen@nokia.com>
  Some code and ideas taken from driversvideoomap driver
  by Imre Deak.
 detach old manager 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2009 Nokia Corporation
  Author: Tomi Valkeinen <tomi.valkeinen@nokia.com>
  Some code and ideas taken from driversvideoomap driver
  by Imre Deak.
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2014 Texas Instruments Incorporated
 first busyloop to see if the bit changes right away 
 then loop for 500ms, sleeping for 1ms in between 
 PLL_STOPMODE 
 PLL_REGN 
 PLL_REGM 
 M4 
 M5 
 M6 
 M7 
 PLL_FREQSEL 
 PLL_SELFREQDCO 
 PLL_REFEN 
 PHY_CLKINEN 
 M4_CLOCK_EN 
 M5_CLOCK_EN 
 HSDIVBYPASS 
 REFSEL = sysclk 
 M6_CLOCK_EN 
 M7_CLOCK_EN 
 PLL_GO 
 PHY_CLKINEN 
 M4_CLOCK_EN 
 M5_CLOCK_EN 
 HSDIVBYPASS 
 M6_CLOCK_EN 
 M7_CLOCK_EN 
 PLL_REGM 
 PLL_REGN 
 PLL_HIGHFREQ divide by 2 
 PLL_REFEN 
 PHY_CLKINEN 
 REFSEL = SYSCLK 
 PLL_SELFREQDCO 
 PLL_REGSD 
 PLL_REGM2 
 PLL_REGM_F 
 PLL_GO 
 SPDX-License-Identifier: GPL-2.0-only
  ti_hdmi_4xxx_ip.c
  HDMI TI81xx, TI38xx, TI OMAP4 etc IP driver Library
  Copyright (C) 2010-2011 Texas Instruments Incorporated - https:www.ti.com
  Authors: Yong Zhi
 	Mythri pk <mythripk@ti.com>
 Turn on CLK for DDC 
 IN_PROG 
 Abort transaction 
 IN_PROG 
 Clk SCL Devices 
 HDMI_CORE_DDC_STATUS_IN_PROG 
 Clear FIFO 
 HDMI_CORE_DDC_STATUS_IN_PROG 
 HDMI_CORE_DDC_STATUS_IN_PROG 
 Load Segment Address Register 
 Load Slave Address Register 
 Load Offset Address Register 
 Load Byte Count 
 Set DDC_CMD 
 HDMI_CORE_DDC_STATUS_BUS_LOW 
 HDMI_CORE_DDC_STATUS_NO_ACK 
 IN_PROG 
 FIFO_EMPTY 
 video core 
 HDMI_CORE_VIDEO_CONFIG 
 sys_ctrl1 default configuration not tunable 
 Vid_Mode 
 dither truncation configuration 
 HDMI_Ctrl 
 TMDS_CTRL 
 enablerepeat the infoframe 
 enablerepeat the packet 
 HDMI 
 HDMI core 
 video config 
	
	  configure core video part
	  set software reset in the core
 power down off 
 release software reset in the core 
 enablerepeat the infoframe 
 wakeup 
	
	  Parameters for generation of Audio Clock Recovery packets
 Set ACR clock divisor 
	
	  Use TMDS clock for ACR packets. For devices that use
	  the MCLK, this is the first part of the MCLK initialization.
 For devices using MCLK, this completes its initialization. 
 Override of SPDIF sample frequency with value in I2S_CHST4 
	
	  Set IEC-60958-3 channel status word. It is passed to the IP
	  just as it is received. The user of the driver is responsible
	  for its contents.
 yes, this is correct: status[3] goes to CHST4 register 
 yes, this is correct: status[4] goes to CHST5 register 
 set I2S parameters 
 Audio channels and mode parameters 
 Audio channel mappings 
	 TODO: Make channel mapping dynamic. For now, map channels
	  in the ALSA order: FLFRRLRRCLFESLSR. Remapping is needed as
	  HDMI speaker order is different. See CEA-861 Section 6.6.2.
	
	  Set audio info frame type, version and length as
	  described in HDMI 1.4a Section 8.2.2 specification.
	  Checksum calculation is defined in Section 5.3.5.
	
	  The OMAP HDMI IP requires to use the 8-channel channel code when
	  transmitting more than two channels.
	
	  TODO: Add MPEG and SPD enable and repeat cfg when EDID parsing
	  is available.
	
	  In the IEC-60958 status word, check if the audio sample word length
	  is 16-bit as several optimizations can be performed in such case.
 I2S configuration. See Phillips' specification 
	
	  The I2S input word length is twice the length given in the IEC-60958
	  status word. If the word size is greater than
	  20 bits, increment by one.
 convert sample frequency to a number 
 Audio clock regeneration settings 
 Audio channels settings 
	
	  the HDMI IP needs to enable four stereo channels when transmitting
	  more than 2 audio channels.  Similarly, the channel count in the
	  Audio InfoFrame has to match the sample_present bits (some channels
	  are padded with zeroes)
 use sample frequency from channel status word 
 enable ACR packets 
 disable direct streaming digital audio 
 use parallel audio interface 
 DMA settings 
 in number of samples 
 audio FIFO format settings 
 disable startstop signals of IEC 60958 blocks 
 configure DMA and audio FIFO format
 configure the core
 configure CEA 861 audio infoframe
 SPDX-License-Identifier: GPL-2.0-only
  linuxdriversvideoomap2dsscore.c
  Copyright (C) 2009 Nokia Corporation
  Author: Tomi Valkeinen <tomi.valkeinen@nokia.com>
  Some code and ideas taken from driversvideoomap driver
  by Imre Deak.
 CONFIG_FB_OMAP2_DSS_DEBUGFS 
 CONFIG_FB_OMAP2_DSS_DEBUGFS 
 PLATFORM DEVICE 
 INIT 
 SPDX-License-Identifier: GPL-2.0-only
  linuxdriversvideoomap2dssoverlay.c
  Copyright (C) 2009 Nokia Corporation
  Author: Tomi Valkeinen <tomi.valkeinen@nokia.com>
  Some code and ideas taken from driversvideoomap driver
  by Imre Deak.
  Checks if replication logic should be used. Only use when overlay is in
  RGB12U or RGB16 mode, and video port width interface is 18bpp or 24bpp
 SPDX-License-Identifier: GPL-2.0-only
  linuxdriversvideoomap2dsssdi.c
  Copyright (C) 2009 Nokia Corporation
  Author: Tomi Valkeinen <tomi.valkeinen@nokia.com>
	
	  DSS fclk gives us very few possibilities, so finding a good pixel
	  clock may not be possible. We try multiple times to find the clock,
	  each time widening the pixel clock range we look for, up to
	  +- 1MHz.
 15.5.9.1.2 
	
	  LCLK and PCLK divisors are located in shadow registers, and we
	  normally write them to DISPC registers when enabling the output.
	  However, SDI uses pck-free as source clock for its PLL, and pck-free
	  is affected by the divisors. And as we need the PLL before enabling
	  the output, we need to write the divisors early.
	 
	  It seems just writing to the DISPC register is enough, and we don't
	  need to care about the shadow register mechanism for pck-free. The
	  exact reason for this is unknown.
 We have SDI only on OMAP3, where it's on port 1 
 SPDX-License-Identifier: GPL-2.0-only
  HDMI PHY
  Copyright (C) 2013 Texas Instruments Incorporated
	
	  Read address 0 in order to get the SCP reset done completed
	  Dummy access performed to make sure reset is done
	
	  In OMAP5+, the HFBITCLK must be divided by 2 before issuing the
	  HDMI_PHYPWRCMD_LDOON command.
	
	  If the hfbitclk != lfbitclk, it means the lfbitclk was configured
	  to be used for TMDS.
	
	  Write to phy address 0 to configure the clock
	  use HFBITCLK write HDMI_TXPHY_TX_CONTROL_FREQOUT field
 Write to phy address 1 to start HDMI line (TXVALID and TMDSCLKEN) 
 Setup max LDO voltage 
 SPDX-License-Identifier: GPL-2.0-only
  linuxdriversvideoomap2dssdpi.c
  Copyright (C) 2009 Nokia Corporation
  Author: Tomi Valkeinen <tomi.valkeinen@nokia.com>
  Some code and ideas taken from driversvideoomap driver
  by Imre Deak.
 only used in non-DT mode 
	
	  XXX we can't currently use DSI PLL for DPI with OMAP3, as the DSI PLL
	  would also be used for DISPC fclk. Meaning, when the DPI output is
	  disabled, DISPC clock will be disabled, and TV out will stop.
 this shouldn't happen 
 inputs 
 outputs 
	
	  Odd dividers give us uneven duty cycle, causing problem when level
	  shifted. So skip all odd dividers when the pixel clock is on the
	  higher side.
	
	  Odd dividers give us uneven duty cycle, causing problem when level
	  shifted. So skip all odd dividers when the pixel clock is on the
	  higher side.
	
	  DSS fck gives us very few possibilities, so finding a good pixel
	  clock may not be possible. We try multiple times to find the clock,
	  each time widening the pixel clock range we look for, up to
	  +- ~15MHz.
 do initial setup with the PLL to see if it is operational 
 On DRA7 we need to set a mux to use the PLL 
  Return a hardcoded channel for the DPI output. This should work for
  current use cases, but this can be later expanded to either resolve
  the channel in some more dynamic manner, or get the channel as a user
  parameter.
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2013 Texas Instruments
  Author: Tomi Valkeinen <tomi.valkeinen@ti.com>
		
		  It's the first call, we have to find a port subnode
		  within this node or within an optional 'ports' node.
 release the 'ports' node 
 SPDX-License-Identifier: GPL-2.0-or-later
  TPO TD043MTEA1 Panel driver
  Author: Gražvydas Ignotas <notasas@gmail.com>
  Converted to new DSS device model: Tomi Valkeinen <tomi.valkeinen@ti.com>
 gamma bits [9:8] 
 gamma bits [7:0] 
 wait for panel to stabilize 
 wait for at least 2 vsyncs before cutting off power 
	
	  If we are resuming from system suspend, SPI clocks might not be
	  enabled yet, so we'll program the LCD from SPI PM resume callback.
 SPDX-License-Identifier: GPL-2.0-only
  TPD12S015 HDMI ESD protection & level shifter chip driver
  Copyright (C) 2013 Texas Instruments
  Author: Tomi Valkeinen <tomi.valkeinen@ti.com>
 DC-DC converter needs at max 300us to get to 90% of 5V 
 SPDX-License-Identifier: GPL-2.0-only
  HDMI Connector driver
  Copyright (C) 2013 Texas Instruments
  Author: Tomi Valkeinen <tomi.valkeinen@ti.com>
 HPD GPIO 
 SPDX-License-Identifier: GPL-2.0-only
  LCD panel driver for Sharp LS037V7DW01
  Copyright (C) 2013 Texas Instruments
  Author: Tomi Valkeinen <tomi.valkeinen@ti.com>
 low = reset active min 20 us 
 high = power on 
 low = 480x640, high = 240x320 
 high = conventional horizontal scanning 
 high = conventional vertical scanning 
 wait couple of vsyncs until enabling the LCD 
 wait at least 5 vsyncs after disabling the LCD 
 lcd INI 
 lcd RESB 
 lcd MO 
 lcd LR 
 lcd UD 
 SPDX-License-Identifier: GPL-2.0-only
  LG.Philips LB035Q02 LCD Panel driver
  Copyright (C) 2013 Texas Instruments
  Author: Tomi Valkeinen <tomi.valkeinen@ti.com>
  Based on a driver by: Steve Sakoman <steve@sakoman.com>
 used for non-DT boot, to be removed 
 register index 
 register value 
 Init sequence from page 28 of the lb035q02 spec 
 SPDX-License-Identifier: GPL-2.0-only
  TFP410 DPI-to-DVI encoder driver
  Copyright (C) 2013 Texas Instruments
  Author: Tomi Valkeinen <tomi.valkeinen@ti.com>
 SPDX-License-Identifier: GPL-2.0-or-later
  NEC NL8048HL11 Panel driver
  Copyright (C) 2010 Texas Instruments Inc.
  Author: Erik Gilling <konkers@android.com>
  Converted to new DSS device model: Tomi Valkeinen <tomi.valkeinen@ti.com>
  NEC PIX Clock Ratings
  MIN:21.8MHz TYP:23.8MHz MAX:25.7MHz
 register address write 
 register data write 
 Initialization Sequence 
 nec_8048_spi_send(spi, REG, VAL) 
 XXX the panel spec doesn't mention any QVGA pin?? 
 reinitialize the panel 
 SPDX-License-Identifier: GPL-2.0-only
  OPA362 analog video amplifier with outputpower control
  Copyright (C) 2014 Golden Delicious Computers
  Author: H. Nikolaus Schaller <hns@goldelico.com>
  based on encoder-tfp410
  Copyright (C) 2013 Texas Instruments
  Author: Tomi Valkeinen <tomi.valkeinen@ti.com>
 we can only drive a COMPOSITE output 
 SPDX-License-Identifier: GPL-2.0-only
  Generic MIPI DPI Panel Driver
  Copyright (C) 2013 Texas Instruments
  Author: Tomi Valkeinen <tomi.valkeinen@ti.com>
 used for non-DT boot, to be removed 
 SPDX-License-Identifier: GPL-2.0-only
  Generic DSI Command Mode panel driver
  Copyright (C) 2013 Texas Instruments
  Author: Tomi Valkeinen <tomi.valkeinen@ti.com>
 #define DEBUG 
 DSI Virtual channel. Hardcoded for now. 
	unsigned long	hw_guard_end;	 next value of jiffies when we can
					  issue the next sleep inout command
 max guard time in jiffies 
 panel HW configuration from DT or platform data 
 runtime variables 
 dsicm_wake_up will restart the timer 
 reset the panel 
 assert reset 
 wait after releasing reset 
 BL | BCTRL 
 XXX no need to send this every frame, but dsi break if not done 
 note: no bus_unlock here. unlock is in framedone_cb 
 possible panel bug 
	 plen 1 or 2 goes into short packet. until checksum error is fixed,
	  use short packets. plen 32 works, but bigger packets seem to cause
 TODO: ulps, backlight 
 reset, to be sure that the panel is in a valid state 
 SPDX-License-Identifier: GPL-2.0-only
  Sony ACX565AKM LCD Panel driver
  Copyright (C) 2010 Nokia Corporation
  Original Driver Author: Imre Deak <imre.deak@nokia.com>
  Based on panel-generic.c by Tomi Valkeinen <tomi.valkeinen@nokia.com>
  Adapted to new DSS2 framework: Roger Quadros <roger.quadros@nokia.com>
	unsigned long	hw_guard_end;		 next value of jiffies
						   when we can issue the
 max guard time in jiffies 
		
		  Between the command and the response data there is a
		  dummy clock cycle. Add an extra bit after the command
		  word to account for this.
	
	  We have to keep 120msec between sleep inout commands.
	  (8.2.15, 8.2.16).
----------------------Backlight Control-------------------------
--------------------Auto Brightness control via Sysfs---------------------
 always used when CABC is not supported 
FIXME tweak me 
	
	  We have to meet all the following delay requirements:
	  1. tRW: reset pulse width 10usec (7.12.1)
	  2. tRT: reset cancel time 5msec (7.12.1)
	  3. Providing PCLK,HS,VS signals for 2 frames = ~50msec worst
	     case (7.6.2)
	  4. 120msec before the sleep out command (7.12.1)
 5msec between sleep out and the next command. (8.2.16) 
	
	  We have to provide PCLK,HS,VS signals for 2 frames (worst case
	  ~50msec) after sending the sleep in command and asserting the
	  reset signal. We probably could assert the reset wo the delay
	  but we still delay to avoid possible artifacts. (7.6.1)
 FIXME need to tweak this delay 
	
	  After reset we have to wait 5 msec before the first
	  command can be sent.
 SPDX-License-Identifier: GPL-2.0-only
  Toppoly TD028TTEC1 panel support
  Copyright (C) 2008 Nokia Corporation
  Author: Tomi Valkeinen <tomi.valkeinen@nokia.com>
  Neo 1973 code (jbt6k74.c):
  Copyright (C) 2006-2007 by OpenMoko, Inc.
  Author: Harald Welte <laforge@openmoko.org>
  Ported and adapted from Neo 1973 U-Boot by:
  H. Nikolaus Schaller <hns@goldelico.com>
 three times command zero 
 deep standby out 
 RGB IF on, RAM write off, QVGA through, SIGCON enable 
 Quad mode off 
 AVDD on, XVDD on 
 Output control 
 Sleep mode off 
 at this point we have like 50% grey 
 initialize register set 
	
	  default of 0x02 in JBT_REG_ASW_SLEW responsible for 72Hz requirement
	  to avoid red  blue flicker
 keep to not break older DTB 
 sentinel  }
 SPDX-License-Identifier: GPL-2.0-only
  Generic DVI Connector driver
  Copyright (C) 2013 Texas Instruments
  Author: Tomi Valkeinen <tomi.valkeinen@ti.com>
 if there are extensions, read second block 
 SPDX-License-Identifier: GPL-2.0-only
  Analog TV Connector driver
  Copyright (C) 2013 Texas Instruments
  Author: Tomi Valkeinen <tomi.valkeinen@ti.com>
 $XFree86$ 
 $XdotOrg$ 
  Mode initializing code (CRT2 section)
  for SiS 300305540630730,
      SiS 315550[M]650651[M]661[FGM]X[M]74x[GX]330[M]76x[GX],
      XGI V3XTV5V8, Z7
  (Universal module for Linux kernel framebuffer and X.orgXFree86 4.x)
  Copyright (C) 2001-2005 by Thomas Winischhofer, Vienna, Austria
  If distributed as part of the Linux kernel, the following license terms
  apply:
   This program is free software; you can redistribute it andor modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the named License,
   or any later version.
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
   GNU General Public License for more details.
   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA
  Otherwise, the following license terms apply:
   Redistribution and use in source and binary forms, with or without
   modification, are permitted provided that the following conditions
   are met:
   1) Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
   2) Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation andor other materials provided with the distribution.
   3) The name of the author may not be used to endorse or promote products
      derived from this software without specific prior written permission.
   THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
   THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
   THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  Author: 	Thomas Winischhofer <thomas@winischhofer.net>
  Formerly based on non-functional code-fragements for 300 series by SiS, Inc.
  Used by permission.
 302LVELV: Set EMI values 
 301302LV: Set PWD 
 Needed for Compal 1400x1050 (EMI) 
 Needed for InventecCompaq 1280x1024 (EMI) 
 Needed for Asus A2H 1024x768 (EMI) 
0x8d,0x08,0x92,0x8f,0x40,
0x50,
 OK, but sticks to left edge 
0x2b,0x13,
0x6f,0x2f,0x63,0x92,0x0f,0x40,
 Perfect 
 0x00 SiS_NTSCPhase 
 0x01 SiS_PALPhase 
 0x02 SiS_PALMPhase 
 0x03 SiS_PALNPhase 
 0x05 SiS_SpecialPhaseM 
 0x08 SiS_NTSCPhase2 
 0x09 SiS_PALPhase2 
 0x0a SiS_PALMPhase2 
 0x0b SiS_PALNPhase2 
 0x0d SiS_SpecialPhaseM 
 0x10 SiS_SpecialPhase 
 0x11 SiS_SpecialPhaseJ 
 301C  302ELV extended Part2 TV registers (4 tap scaler) 
 NTSC, 525i, 525p 
 PAL 
 750p 
 1080i 
 661 et al LCD data structure (2.03.00) 
 1024x768 
  type|CR37|   HDE   |   VDE   |    HT   |    VT   |   hss    | hse   
  | vss     |    vse  |clck|  clock  |CRT2DataP|CRT2DataP|idx     
					      VESA    non-VESA  noscale 
 1280x1024 
 1400x1050 
 1600x1200 
 1280x768 (_2) 
 1280x720 
 1280x800 (_2) 
 1680x1050 
 1280x800_3 
 800x600 
 1280x854 
 variant 2 
 315 
         HELPER: LockUnlock CRT2          
            HELPER: Write SR11             
    HELPER: Get Pointer to LCD structure   
    Use the BIOS tables only for LVDS panels; TMDS is unreliable
     due to the variaty of panels the BIOS doesn't know about.
     Exception: If the BIOS has better knowledge (such as in case
     of machines with a 301C and a panel that does not support DDC)
     use the BIOS data as well.
    Use the BIOS tables only for LVDS panels; TMDS is unreliable
     due to the variaty of panels the BIOS doesn't know about.
     Exception: If the BIOS has better knowledge (such as in case
     of machines with a 301C and a panel that does not support DDC)
     use the BIOS data as well.
           Adjust Rate for CRT2            
 LVDS 
 Look backwards in table for matching CRT2 mode 
    Look through the whole mode-section of the table from the beginning
     for a matching CRT2 mode if no mode was found yet.
              Get rate index               
 Do NOT check for UseCustomMode here, will skrew up FIFO 
            STORE CRT2 INFO in CR34        
 Store CRT1 ModeNo in CR34 
    HELPER: GET SOME DATA FROM BIOS ROM    
          HELPER: DELAY FUNCTIONS          
 CONFIG_FB_SIS_300 
 315 series, LVDS; Special 
 315 series, all bridges 
 CONFIG_FB_SIS_315 
    HELPER: WAIT-FOR-RETRACE FUNCTIONS     
               HELPER: MISC                
 Check for revision != A0 only 
 YPrPb = 0x08 
 Scart = 0x04 
 = YPrPb = 0x08 
 = Scart = 0x04 - TW 
       GET VIDEO BRIDGE CONFIG INFO        
 Setup general purpose IO for Chrontel communication 
 ACPI register 0x3c: GP Event 1 IO mode select 
 ACPI register 0x3a: GP Pin Level (lowhigh) 
 Mode 0x03 is never in driver mode 
 Reset LCDA setting if not driver mode 
 New CR layout 
 CONFIG_FB_SIS_315 
 LVDSCHRONTEL (LCDTV) and 301BDH (LCD) can only be slave in 8bpp modes 
           DETERMINE YPbPr MODE            
    Note: This variable is only used on 30xLV systems.
     CR38 has a different meaning on LVDSCH7019 systems.
     On 661 and later, these bits moved to CR35.
     On 301, 301B, only HiVision 1080i is supported.
     On 30xLV, 301C, only YPbPr 1080i is supported.
           DETERMINE TVMode flag           
 0x40 
 0x80 
 0x40 
 Translate HiVisionYPbPr to our new flags 
 661 and later 
               GET LCD INFO                
 Translate my LCDResInfo to BIOS value 
 HSync start 
 HSync end 
 VSync start 
 VSync end 
 Alternative 1600x1200@60 timing for 1600x1200 LCDA 
 For broken BIOSes: Assume 1024x768 
 Very old BIOSes only know 7 sizes (NetVista 2179, 1.01g) 
 Translate 300 series LCDRes to 315 series for unified usage 
 Translate to our internal types 
 Verified working 
 SiS LVDS 
 Need temp below! 
 These mustcan't scale no matter what 
 Dual link, Pass 1:1 BIOS default, etc. 
 Pass 1:1 
 Always center screen on LVDS (if scaling is disabled) 
 Always center screen on SiS LVDS (if scaling is disabled) 
 By default, pass 1:1 on SiS TMDS (if scaling is supported) 
 88  ; SiS_Pr->PanelVRE  =    6;
 Data above for TMDS (projector); get from BIOS for LVDS 
 ? 
 ? 
 Special cases 
 DontExpand overrule 
 No scaling for this mode on any panel (LCD=CRT2)
 TMDS only 
 LVDS only 
 SiS TMDS special (Averatec 6200 series) 
 SiS LVDS 
 SiS LVDS 
 neg hv sync, RGB24(D0 = 0) 
 Special cases 
 Don't pass 1:1 by default (TMDS special) 
 (In)validate LCDPass11 flag 
 LVDS DDA 
 VESA timing 
                 GET VCLK                  
 30xBLV 
  LCD 
 Correct those whose IndexGEN doesn't match VBVCLK array 
  TV 
 VGA2 
 Better VGA2 clock for 1280x1024@75 
 If not programming CRT2 
   LVDS  
 Special Timing: Barco iQ Pro R series 
 Special Timing: 848x480 and 856x480 parallel lvds panels 
 if(resinfo == SIS_RI_1360x768) VCLKIndex = ?; 
 if(resinfo == SIS_RI_1360x768) VCLKIndex = ?; 
 if not programming CRT2 
 1024x768-70 
 1024x768-75 
        SET CRT2 MODE TYPE REGISTERS       
 ---- 300 series ---- 
 For 301BDH: (with LCD via LVDS) 
 CONFIG_FB_SIS_300 
 ------- 315330 series ------ 
 CONFIG_FB_SIS_315 
 LVDS 
 LVDS can only be slave in 8bpp modes 
 LCDA 
 unsigned char bridgerev = SiS_GetReg(SiS_Pr->SiS_Part4Port,0x01); 
	 The following is nearly unpreditable and varies from machine
	  to machine. Especially the 301DH seems to be a real trouble
	  maker. Some BIOSes simply set the registers (like in the
	  NoLCD-if-statements here), some set them according to the
	  LCDA stuff. It is very likely that some machines are not
	  treated correctly in the following, very case-orientated
	  code. What do I do then...?
 740 variants match for 30xB, 301B-DH, 30xLV 
 For all bridges 
	 The following two are responsible for eventually wrong colors
	  in TV output. The DH (VB_NoLCD) conditions are unknown; the
	  b0 was found in some 651 machine (Pim; P4_23=0xe5); the b1 version
	  in a 650 box (Jake). What is the criteria?
	  Addendum: Another combination 651+301B-DH(b1) (Rapo) needs same
	  treatment like the 651+301B-DH(b0) case. Seems more to be the
	  chipset than the bridge revision.
 Fixes "TV-blue-bug" on 315+301 
 For 301   
 For 30xLV 
 For 301B-DH 
 Set on 651M650, clear on 315650 
 (bridgerev != 0xb0)  {
 For 30xB, 301C 
 CONFIG_FB_SIS_315 
 LVDS 
            GET RESOLUTION DATA            
 DoubleScanMode-check done in CheckCalcCustomMode()! 
 BIOS bug - does this regardless of scaling 
           GET CRT2 TIMING DATA            
 LCD 
 patch index 
 Pass 1:1 only (center-screen handled outside) 
 This is never called for the panel's native resolution 
 since Pass1:1 will not be set in this case 
 TV 
 if(SiS_Pr->SiS_VGAVDE > 480) SiS_Pr->SiS_TVMode &= (~TVSetTVSimuMode); 
 Not in NTSC or YPBPR mode (except 1080i)! 
 LVDS, 301B-DH (if running on LCD) 
 1600x1200 LCDA 
 1600x1200 LVDS 
 This handles custom modes and custom panels 
 301BDH needs LVDS Data 
 Need LVDS Data for LCD on 301B-DH 
         GET LVDS DES (SKEW) DATA          
 Some special cases 
 Trumpion 
 640x480 on LVDS 
 LCD 
 non-pass 1:1 only, see above 
 Verified for Averatec 6240 
 Verified for Asus A4L 
 Not verified yet FIXME 
 640x480 only? 
           DISABLE VIDEO BRIDGE            
 NEVER use any variables (VBInfo), this will be called
  from outside the context of modeswitch!
  MUST call getVBType before calling this
 ===== For 30xBCLV ===== 
 300 series 
 CONFIG_FB_SIS_300 
 315 series 
 if(SiS_Pr->ChipType < SIS_340) {
}
 CONFIG_FB_SIS_315 
 ============ For 301 ================ 
 disable VB 
 disable lock mode 
 disable CRT2 
 ============ For LVDS =============
 300 series 
 CONFIG_FB_SIS_300 
 315 series 
if(SiS_Pr->ChipType < SIS_340) {  
 } 
 SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x13,0xff); 
 DirectDVD PAL?
 VB clock  4 ? 
 CONFIG_FB_SIS_315 
 315 series 
 LVDS 
            ENABLE VIDEO BRIDGE            
 NEVER use any variables (VBInfo), this will be called
  from outside the context of a mode switch!
  MUST call getVBType before calling this
 ====== For 301B et al  ====== 
 300 series 
 Enable CRT2 
 lock mode 
 enable VB processor 
 CONFIG_FB_SIS_300 
 315 series 
 unsigned short  emidelay=0; 
if(SiS_Pr->ChipType < SIS_340) { 
}
 enable CRT2 
 Enable "LVDS PLL power on" (even on 301C) 
 Enable "LVDS Driver Power on" (even on 301C) 
 Reset 
 emidelay = SISGETROMW((romptr + 0x22)); 
                                              (P4_30|0x40)  
 Compal 1400x1050: 0x05, 0x60, 0x00                YES  (1.10.7w;  CR36=69)      
 Compal 1400x1050: 0x0d, 0x70, 0x40                YES  (1.10.7x;  CR36=69)      
 Acer   1280x1024: 0x12, 0xd0, 0x6b                NO   (1.10.9k;  CR36=73)      
 Compaq 1280x1024: 0x0d, 0x70, 0x6b                YES  (1.12.04b; CR36=03)      
 Clevo   1024x768: 0x05, 0x60, 0x33                NO   (1.10.8e;  CR36=12, DL!) 
 Clevo   1024x768: 0x0d, 0x70, 0x40 (if type == 3) YES  (1.10.8y;  CR36=?2)      
 Clevo   1024x768: 0x05, 0x60, 0x33 (if type != 3) YES  (1.10.8y;  CR36=?2)      
 Asus    1024x768: ?                                ?   (1.10.8o;  CR36=?2)      
 Asus    1024x768: 0x08, 0x10, 0x3c (problematic)  YES  (1.10.8q;  CR36=22)      
		   EMI_30 is read at driver start; however, the BIOS sets this
		    (if it is used) only if the LCD is in use. In case we caught
		    the machine while on TV output, this bit is not set and we
		    don't know if it should be set - hence our detection is wrong.
		    Work-around this here:
 1280x1024 
 1400x1050 
 BIOS values 
 1600x1200 - unknown 
 BIOS values don't work so well sometimes 
 r30 = 0x60; r31 = 0x05; r32 = 0x60; r33 = 0x33;     
 r30 = 0x20; r31 = 0x05; r32 = 0x60; r33 = 0x33;     
 r30 = 0x60; r31 = 0x0d; r32 = 0x70; r33 = 0x40;     
 r30 = 0x20; r31 = 0x0d; r32 = 0x70; r33 = 0x40;     
 Reset 
 SET_EMI 
SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x2a,0x80);
 Enable 
SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x2a,0x7f);
 CONFIG_FB_SIS_315 
 ============  For 301 ================ 
 lock mode 
 enable CRT2 
 BVBDOENABLE=1 
 enable VB processor 
 =================== For LVDS ================== 
 300 series 
 CONFIG_FB_SIS_300 
 315 series 
if(SiS_Pr->ChipType < SIS_340) {  
}
 CONFIG_FB_SIS_315 
 310 series 
 LVDS 
         SET PART 1 REGISTER GROUP         
 Set CRT2 OFFSET  PITCH 
 Set CRT2 sync and PanelLink mode 
 LVDS 
 Don't care about 121824 bit mode - TV is via VGA, not PL 
 ---- 300 series --- 
 630 - 301B(-DH) 
 630 - 301 
 CONFIG_FB_SIS_300 
 ------- 315 series ------ 
 315 - LVDS 
 315 - TMDS 
 Imitate BIOS bug 
 CONFIG_FB_SIS_315 
 Set CRT2 FIFO on 300540630730 
 get CRT1 ModeNo 
 Get VCLK 
 Get colordepth 
 Get VCLK 
 Get color depth 
 Get MCLK 
 BIOS BUG (2.04.5d, 2.04.6a use ah here, which is unset!) 
 -- do it like the BIOS anyway... 
 CRT1 Request Period 
 Get VCLK  
 Get VCLK 
 Get colordepth 
 If mode <= 0x13, we just restore everything 
 Set CRT2 FIFO on 315330 series 
 Set Part 1  SiS bridge slave mode 
 CR0   CR1   CR2   CR3   CR4   CR5   CR6   CR7   
 CR8   CR9   SR0A  SR0B  SR0C  SR0D  SR0E  CR0F  
 CR10  CR11  CR12  CR13  CR14  CR15  CR16  CR17  
 The following is only done if bridge is in slave mode: 
 BIOS: == 1600 
 Max HT, 0x2020, results in 0x3ff in registers 
 results in 0x2000 in registers 
 Max VT, 0x0801, results in 0x7ff in registers 
 SR01: HalfDCLK[3], 89 div dotclock[0] 
 CR14: (text mode: underline location) 
 CR17: na 
 SR0E, dither[7] 
 ? 
 Setup panel link
  This is used for LVDS, LCDA and Chrontel TV output
  300LVDS+TV, 300301B-DH, 315LVDS+TV, 315LCDA
 is lvds if really LVDS, or 301B-DH with external LVDS transmitter 
 is really sis if sis bridge, but not 301B-DH 
 Horizontal 
 BPLHDESKEW[2:0]   
 BPLHDESKEW[10:3]  
 BPLHDEE  
 BPLHRS 
 BPLHRE 
 Vertical 
 BPLVRS 
 BPLVRE  
 Chrontel 701x operates in 24bit mode (8-8-8, 2x12bit multiplexed) via VGA2 
 BPLVDEE 
 BPLVDES 
 Vertical scaling 
 300 series 
 BPLVCFACT 
 CONFIG_FB_SIS_300 
 315 series 
 Horizontal scaling 
 1f = ( (VGAHDE  65536)  ( (VGAHDE  65536)  HDE ) ) - 1
 BPLHCFACT  
 Blps = lcdhdee(lcdhdes+HDE) + 64 
 Blpe = lBlps+32 
 Bflml = 0 
 BDxFIFOSTOP = (HDE4)128 
 BDxWadrst0 
 BDxWadroff = HDE488 
 BDxWadrst1 = BDxWadrst0 + BDxWadroff  VDE 
 CONFIG_FB_SIS_315 
 Set Part 1 
 1. Horizontal setup 
 ------------- 300 series --------------
 BTVGA2HT 0x08,0x09 
 CRT2 Horizontal Total 
 CRT2 Horizontal Total Overflow [7:4] 
 BTVGA2HDEE 0x0A,0x0C 
 CRT2 Horizontal Display Enable End 
 bx  BTVGA2HRS 0x0B,0x0C 
 CONFIG_FB_SIS_300 
 ------------------- 315330 series --------------- 
 BTVGA2HT 0x08,0x09 
 CRT2 Horizontal Total 
 CRT2 Horizontal Total Overflow [7:4] 
 BTVGA2HDEE 0x0A,0x0C 
 CRT2 Horizontal Display Enable End 
 CONFIG_FB_SIS_315 
 315330 series 
 (VGAHRS-3)8 
 (VGAHRE-3)8 
 HWCursor bug! 
 CRT2 Horizontal Retrace Start 
 CRT2 Horizontal Retrace End 
 Overflow 
 2. Vertical setup 
 CRT2 Vertical Total 
 CRT2 Vertical Display Enable End 
 Overflow 
  BTVGA2VRS     0x10,0x11   
  BTVGA2VRE     0x11        
 CRT2 Vertical Retrace Start 
 CRT2 Vert. Retrace End; Overflow 
 3. Panel delay compensation 
 ---------- 300 series -------------- 
 Panel Link Delay Compensation; (Software Command Reset; Power Saving) 
 CONFIG_FB_SIS_300 
 --------------- 315330 series ---------------
 Panel Link Delay Compensation 
 < 661 
 CONFIG_FB_SIS_315 
 Slavemode 
 For 301BDH with LCD, we set up the Panel Link 
         SET PART 2 REGISTER GROUP         
 For ECS A907. Highly preliminary. 
 The BIOS code (1.16.51,56) is obviously a fragment! 
 15 
 1b 
 21 
 5a 
 21 
 5a 
 Not always for LV, see SetGrp2 
 651+301C, for 1280x768 - do I really need that? 
 SiS_PALPhase 
 SiS_NTSCPhase 
 SiS_PALPhase2 
 SiS_PALPhase : SiS_NTSCPhase 
 SiS_PALPhase2 : SiS_NTSCPhase2 
 SiS_PALMPhase : SiS_PALNPhase 
 SiS_PALMPhase2 : SiS_PALNPhase2 
 SiS_SpecialPhaseM 
 SiS_SpecialPhaseJ 
 SiS_SpecialPhase 
 NTSC, YPbPr 525 
 From 1.10.7w - doesn't make sense 
 OK 
 From here: Part2 LCD setup 
 RHACTE = HDE - 1 
 Enable dithering; only do this for 32bpp mode 
 Checked for 1024x768, 1280x1024, 1400x1050, 1600x1200 
             Clevo dual-link 1024x768 
 		   Compaq 1280x1024 has HT 1696 sometimes (calculation OK, if given HT is correct)  
		   Acer: OK, but uses different setting for VESA timing at 6408001024 and 640x400 
 if(SiS_Pr->SiS_VGAVDE == 525) tempax += 0x3c;     
 lcdvdes 
 lcdvdee 
 Non-expanding: lcdvdes = tempcx = VT-1; lcdvdee = tempbx = VDE-1 
 lcdvdes  
 lcdvdee  
 ? 
 non-expanding: lcdvrs = ((VT + VDE)  2) - 10 
 lcdvrs 
 OK for Averatec 1280x800 (301C) 
 OK for Asus A4L 1280x800 
 Higher bridgeoffset shifts to the LEFT 
 lcdhdes 
 lcdhdee 
 lcdhrs 
 lcdhre 
 CRT2-LCD from table 
         SET PART 3 REGISTER GROUP         
         SET PART 4 REGISTER GROUP         
 ? why not 0x10? 
 ? 
 sic! 
 Calc Linebuffer max address and setclear decimode 
 Correct 
 Otherwise white line or garbage at right edge 
 See EnDisableBridge() 
 LCD-too-dark-error-source, see FinalizeLCD() 
 301B 
         SET PART 5 REGISTER GROUP         
     MODIFY CRT1 GROUP FOR SLAVE MODE      
 Pass 1:1 not supported here 
 xSTN 
 xSTN 
 xSTN 
 xSTN 
 xSTN 
 Works better with calculated numbers 
              SET CRT2 ECLK                
           SET UP CHRONTEL CHIPS           
 Chrontel 7005 - I assume that it does not come with a 315 series chip 
 We don't support modes >800x600 
 0x40=76uA (PAL); 0x03=15bit non-multi RGB
 Black level for PAL (105)
 upper nibble=71uA (NTSC), 0x03=15bit non-multi RGB
 Black level for NTSC (113)
 Mode register 
 Start active video register 
 Position overflow register 
 Horiz Position register 
 Vertical Position register 
       Set minimum flicker filter for Luma channel (SR1-0=00),
                minimum text enhancement (S3-2=10),
   	        maximum flicker filter for Chroma channel (S5-4=10)
	        =00101000=0x28 (When reading, S1-0->S3-2, and S3-2->S1-0!)
       Set video bandwidth
            High bandwidth Luma composite video filter(S0=1)
            low bandwidth Luma S-video filter (S2-1=00)
	    disable peak filter in S-video channel (S3=0)
	    high bandwidth Chroma Filter (S5-4=11)
	    =00110001=0x31
 old: 3103 
       Register 0x3D does not exist in non-macrovision register map
            (Maybe this is a macrovision register?)
       Register 0x10 only contains 1 writable bit (S0) for sensing,
             all other bits a read-only. Macrovision?
       Register 0x11 only contains 3 writable bits (S0-S2) for
             contrast enhancement (set to 010 -> gain 1 Yout = 1716(Yin-30) )
       Clear DSEN
 ---- NTSC ---- 
 640x480 overscan: Mode 16 
 loop filter off 
 ACIV on, no need to set FSCI 
 800x600 overscan: Mode 23 
 0x18-0x1f: FSCI 469,762,048 
 Loop filter on for mode 23 
 ACIV off, need to set FSCI 
 ----- 640x480 underscan; Mode 17 
 loop filter off 
 ----- 800x600 underscan: Mode 24 
 (FSCI was 0x1f1c71c7 - this is for mode 22) 
 FSCI for mode 24 is 428,554,851 
 198b3a63 
 loop filter off for mode 24 
               SiS_SetCH70xxANDOR(SiS_Pr,0x21,0x00,0xFE);	 ACIV off, need to set FSCI 
#endif          All alternatives wrong (datasheet wrong?), don't use FSCI 
	       SiS_SetCH70xxANDOR(SiS_Pr,0x20,0x00,0xEF);	  loop filter off 
               SiS_SetCH70xxANDOR(SiS_Pr,0x21,0x01,0xFE);
            }
         }
      } else {						 ---- PAL ---- 
	 We don't play around with FSCI in PAL mode 
	SiS_SetCH70xxANDOR(SiS_Pr, 0x20, 0x00, 0xEF);	 loop filter off 
	SiS_SetCH70xxANDOR(SiS_Pr, 0x21, 0x01, 0xFE);	 ACIV on 
      }
#endif   300 
   } else {
       Chrontel 7019 - assumed that it does not come with a 300 series chip 
#ifdef CONFIG_FB_SIS_315
      unsigned short temp;
       We don't support modes >1024x768 
      if (resindex > 6) return;
      temp = CHTVRegData[resindex].Reg[0];
      if(SiS_Pr->SiS_TVMode & TVSetNTSCJ) temp |= 0x10;
      SiS_SetCH701x(SiS_Pr,0x00,temp);
      SiS_SetCH701x(SiS_Pr,0x01,CHTVRegData[resindex].Reg[1]);
      SiS_SetCH701x(SiS_Pr,0x02,CHTVRegData[resindex].Reg[2]);
      SiS_SetCH701x(SiS_Pr,0x04,CHTVRegData[resindex].Reg[3]);
      SiS_SetCH701x(SiS_Pr,0x03,CHTVRegData[resindex].Reg[4]);
      SiS_SetCH701x(SiS_Pr,0x05,CHTVRegData[resindex].Reg[5]);
      SiS_SetCH701x(SiS_Pr,0x06,CHTVRegData[resindex].Reg[6]);
      temp = CHTVRegData[resindex].Reg[7];
      if(SiS_Pr->SiS_TVMode & TVSetNTSCJ) temp = 0x66;
      SiS_SetCH701x(SiS_Pr,0x07,temp);
      SiS_SetCH701x(SiS_Pr,0x08,CHTVRegData[resindex].Reg[8]);
      SiS_SetCH701x(SiS_Pr,0x15,CHTVRegData[resindex].Reg[9]);
      SiS_SetCH701x(SiS_Pr,0x1f,CHTVRegData[resindex].Reg[10]);
      SiS_SetCH701x(SiS_Pr,0x0c,CHTVRegData[resindex].Reg[11]);
      SiS_SetCH701x(SiS_Pr,0x0d,CHTVRegData[resindex].Reg[12]);
      SiS_SetCH701x(SiS_Pr,0x0e,CHTVRegData[resindex].Reg[13]);
      SiS_SetCH701x(SiS_Pr,0x0f,CHTVRegData[resindex].Reg[14]);
      SiS_SetCH701x(SiS_Pr,0x10,CHTVRegData[resindex].Reg[15]);
      temp = SiS_GetCH701x(SiS_Pr,0x21) & ~0x02;
 D1 should be set for PAL, PAL-N and NTSC-J,
      if(SiS_Pr->SiS_TVMode & (TVSetPALN | TVSetNTSCJ)) temp |= 0x02;
      SiS_SetCH701x(SiS_Pr,0x21,temp);
#endif	 315 
   }
#ifdef SIS_CP
   SIS_CP_INIT301_CP3
#endif
}
#ifdef CONFIG_FB_SIS_315   ----------- 315 series only ---------- 
void
SiS_Chrontel701xBLOn(struct SiS_Private SiS_Pr)
{
   unsigned short temp;
    Enable Chrontel 7019 LCD panel backlight 
   if(SiS_Pr->SiS_IF_DEF_CH70xx == 2) {
      if(SiS_Pr->ChipType == SIS_740) {
	 SiS_SetCH701x(SiS_Pr,0x66,0x65);
      } else {
	 temp = SiS_GetCH701x(SiS_Pr,0x66);
	 temp |= 0x20;
	 SiS_SetCH701x(SiS_Pr,0x66,temp);
      }
   }
}
void
SiS_Chrontel701xBLOff(struct SiS_Private SiS_Pr)
{
   unsigned short temp;
    Disable Chrontel 7019 LCD panel backlight 
   if(SiS_Pr->SiS_IF_DEF_CH70xx == 2) {
      temp = SiS_GetCH701x(SiS_Pr,0x66);
      temp &= 0xDF;
      SiS_SetCH701x(SiS_Pr,0x66,temp);
   }
}
static void
SiS_ChrontelPowerSequencing(struct SiS_Private SiS_Pr)
{
  static const unsigned char regtable[]      = { 0x67, 0x68, 0x69, 0x6a, 0x6b };
  static const unsigned char table1024_740[] = { 0x01, 0x02, 0x01, 0x01, 0x01 };
  static const unsigned char table1400_740[] = { 0x01, 0x6e, 0x01, 0x01, 0x01 };
  static const unsigned char asus1024_740[]  = { 0x19, 0x6e, 0x01, 0x19, 0x09 };
  static const unsigned char asus1400_740[]  = { 0x19, 0x6e, 0x01, 0x19, 0x09 };
  static const unsigned char table1024_650[] = { 0x01, 0x02, 0x01, 0x01, 0x02 };
  static const unsigned char table1400_650[] = { 0x01, 0x02, 0x01, 0x01, 0x02 };
  const unsigned char tableptr = NULL;
  int i;
   Set up Power updown timing 
  if(SiS_Pr->ChipType == SIS_740) {
     if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768) {
	if(SiS_Pr->SiS_CustomT == CUT_ASUSL3000D) tableptr = asus1024_740;
	else    			          tableptr = table1024_740;
     } else if((SiS_Pr->SiS_LCDResInfo == Panel_1280x1024) ||
	       (SiS_Pr->SiS_LCDResInfo == Panel_1400x1050) ||
	       (SiS_Pr->SiS_LCDResInfo == Panel_1600x1200)) {
	if(SiS_Pr->SiS_CustomT == CUT_ASUSL3000D) tableptr = asus1400_740;
        else					  tableptr = table1400_740;
     } else return;
  } else {
     if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768) {
	tableptr = table1024_650;
     } else if((SiS_Pr->SiS_LCDResInfo == Panel_1280x1024) ||
	       (SiS_Pr->SiS_LCDResInfo == Panel_1400x1050) ||
	       (SiS_Pr->SiS_LCDResInfo == Panel_1600x1200)) {
	tableptr = table1400_650;
     } else return;
  }
  for(i=0; i<5; i++) {
     SiS_SetCH701x(SiS_Pr, regtable[i], tableptr[i]);
  }
}
static void
SiS_SetCH701xForLCD(struct SiS_Private SiS_Pr)
{
  const unsigned char tableptr = NULL;
  unsigned short tempbh;
  int i;
  static const unsigned char regtable[] = {
		0x1c, 0x5f, 0x64, 0x6f, 0x70, 0x71,
		0x72, 0x73, 0x74, 0x76, 0x78, 0x7d, 0x66
  };
  static const unsigned char table1024_740[] = {
		0x60, 0x02, 0x00, 0x07, 0x40, 0xed,
		0xa3, 0xc8, 0xc7, 0xac, 0xe0, 0x02, 0x44
  };
  static const unsigned char table1280_740[] = {
		0x60, 0x03, 0x11, 0x00, 0x40, 0xe3,
		0xad, 0xdb, 0xf6, 0xac, 0xe0, 0x02, 0x44
  };
  static const unsigned char table1400_740[] = {
		0x60, 0x03, 0x11, 0x00, 0x40, 0xe3,
		0xad, 0xdb, 0xf6, 0xac, 0xe0, 0x02, 0x44
  };
  static const unsigned char table1600_740[] = {
		0x60, 0x04, 0x11, 0x00, 0x40, 0xe3,
		0xad, 0xde, 0xf6, 0xac, 0x60, 0x1a, 0x44
  };
  static const unsigned char table1024_650[] = {
		0x60, 0x02, 0x00, 0x07, 0x40, 0xed,
		0xa3, 0xc8, 0xc7, 0xac, 0x60, 0x02
  };
  static const unsigned char table1280_650[] = {
		0x60, 0x03, 0x11, 0x00, 0x40, 0xe3,
		0xad, 0xdb, 0xf6, 0xac, 0xe0, 0x02
  };
  static const unsigned char table1400_650[] = {
		0x60, 0x03, 0x11, 0x00, 0x40, 0xef,
		0xad, 0xdb, 0xf6, 0xac, 0x60, 0x02
  };
  static const unsigned char table1600_650[] = {
		0x60, 0x04, 0x11, 0x00, 0x40, 0xe3,
		0xad, 0xde, 0xf6, 0xac, 0x60, 0x1a
  };
  if(SiS_Pr->ChipType == SIS_740) {
     if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768)       tableptr = table1024_740;
     else if(SiS_Pr->SiS_LCDResInfo == Panel_1280x1024) tableptr = table1280_740;
     else if(SiS_Pr->SiS_LCDResInfo == Panel_1400x1050) tableptr = table1400_740;
     else if(SiS_Pr->SiS_LCDResInfo == Panel_1600x1200) tableptr = table1600_740;
     else return;
  } else {
     if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768)       tableptr = table1024_650;
     else if(SiS_Pr->SiS_LCDResInfo == Panel_1280x1024) tableptr = table1280_650;
     else if(SiS_Pr->SiS_LCDResInfo == Panel_1400x1050) tableptr = table1400_650;
     else if(SiS_Pr->SiS_LCDResInfo == Panel_1600x1200) tableptr = table1600_650;
     else return;
  }
  tempbh = SiS_GetCH701x(SiS_Pr,0x74);
  if((tempbh == 0xf6) || (tempbh == 0xc7)) {
     tempbh = SiS_GetCH701x(SiS_Pr,0x73);
     if(tempbh == 0xc8) {
        if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768) return;
     } else if(tempbh == 0xdb) {
        if(SiS_Pr->SiS_LCDResInfo == Panel_1280x1024) return;
	if(SiS_Pr->SiS_LCDResInfo == Panel_1400x1050) return;
     } else if(tempbh == 0xde) {
        if(SiS_Pr->SiS_LCDResInfo == Panel_1600x1200) return;
     }
  }
  if(SiS_Pr->ChipType == SIS_740) tempbh = 0x0d;
  else     			  tempbh = 0x0c;
  for(i = 0; i < tempbh; i++) {
     SiS_SetCH701x(SiS_Pr, regtable[i], tableptr[i]);
  }
  SiS_ChrontelPowerSequencing(SiS_Pr);
  tempbh = SiS_GetCH701x(SiS_Pr,0x1e);
  tempbh |= 0xc0;
  SiS_SetCH701x(SiS_Pr,0x1e,tempbh);
  if(SiS_Pr->ChipType == SIS_740) {
     tempbh = SiS_GetCH701x(SiS_Pr,0x1c);
     tempbh &= 0xfb;
     SiS_SetCH701x(SiS_Pr,0x1c,tempbh);
     SiS_SetReg(SiS_Pr->SiS_Part1Port,0x2d,0x03);
     tempbh = SiS_GetCH701x(SiS_Pr,0x64);
     tempbh |= 0x40;
     SiS_SetCH701x(SiS_Pr,0x64,tempbh);
     tempbh = SiS_GetCH701x(SiS_Pr,0x03);
     tempbh &= 0x3f;
     SiS_SetCH701x(SiS_Pr,0x03,tempbh);
  }
}
static void
SiS_ChrontelResetVSync(struct SiS_Private SiS_Pr)
{
  unsigned char temp, temp1;
  temp1 = SiS_GetCH701x(SiS_Pr,0x49);
  SiS_SetCH701x(SiS_Pr,0x49,0x3e);
  temp = SiS_GetCH701x(SiS_Pr,0x47);
  temp &= 0x7f;	 Use external VSYNC 
  SiS_SetCH701x(SiS_Pr,0x47,temp);
  SiS_LongDelay(SiS_Pr, 3);
  temp = SiS_GetCH701x(SiS_Pr,0x47);
  temp |= 0x80;	 Use internal VSYNC 
  SiS_SetCH701x(SiS_Pr,0x47,temp);
  SiS_SetCH701x(SiS_Pr,0x49,temp1);
}
static void
SiS_Chrontel701xOn(struct SiS_Private SiS_Pr)
{
  unsigned short temp;
  if(SiS_Pr->SiS_IF_DEF_CH70xx == 2) {
     if(SiS_Pr->ChipType == SIS_740) {
        temp = SiS_GetCH701x(SiS_Pr,0x1c);
        temp |= 0x04;	 Invert XCLK phase 
        SiS_SetCH701x(SiS_Pr,0x1c,temp);
     }
     if(SiS_IsYPbPr(SiS_Pr)) {
        temp = SiS_GetCH701x(SiS_Pr,0x01);
	temp &= 0x3f;
	temp |= 0x80;	 Enable YPrPb (HDTV) 
	SiS_SetCH701x(SiS_Pr,0x01,temp);
     }
     if(SiS_IsChScart(SiS_Pr)) {
        temp = SiS_GetCH701x(SiS_Pr,0x01);
	temp &= 0x3f;
	temp |= 0xc0;	 Enable SCART + CVBS 
	SiS_SetCH701x(SiS_Pr,0x01,temp);
     }
     if(SiS_Pr->ChipType == SIS_740) {
        SiS_ChrontelResetVSync(SiS_Pr);
        SiS_SetCH701x(SiS_Pr,0x49,0x20);    Enable TV path 
     } else {
        SiS_SetCH701x(SiS_Pr,0x49,0x20);    Enable TV path 
        temp = SiS_GetCH701x(SiS_Pr,0x49);
        if(SiS_IsYPbPr(SiS_Pr)) {
           temp = SiS_GetCH701x(SiS_Pr,0x73);
	   temp |= 0x60;
	   SiS_SetCH701x(SiS_Pr,0x73,temp);
        }
        temp = SiS_GetCH701x(SiS_Pr,0x47);
        temp &= 0x7f;
        SiS_SetCH701x(SiS_Pr,0x47,temp);
        SiS_LongDelay(SiS_Pr, 2);
        temp = SiS_GetCH701x(SiS_Pr,0x47);
        temp |= 0x80;
        SiS_SetCH701x(SiS_Pr,0x47,temp);
     }
  }
}
static void
SiS_Chrontel701xOff(struct SiS_Private SiS_Pr)
{
  unsigned short temp;
   Complete power down of LVDS 
  if(SiS_Pr->SiS_IF_DEF_CH70xx == 2) {
     if(SiS_Pr->ChipType == SIS_740) {
        SiS_LongDelay(SiS_Pr, 1);
	SiS_GenericDelay(SiS_Pr, 5887);
	SiS_SetCH701x(SiS_Pr,0x76,0xac);
	SiS_SetCH701x(SiS_Pr,0x66,0x00);
     } else {
        SiS_LongDelay(SiS_Pr, 2);
	temp = SiS_GetCH701x(SiS_Pr,0x76);
	temp &= 0xfc;
	SiS_SetCH701x(SiS_Pr,0x76,temp);
	SiS_SetCH701x(SiS_Pr,0x66,0x00);
     }
  }
}
static void
SiS_ChrontelResetDB(struct SiS_Private SiS_Pr)
{
     unsigned short temp;
     if(SiS_Pr->ChipType == SIS_740) {
        temp = SiS_GetCH701x(SiS_Pr,0x4a);   Version ID 
        temp &= 0x01;
        if(!temp) {
           if(SiS_WeHaveBacklightCtrl(SiS_Pr)) {
	      temp = SiS_GetCH701x(SiS_Pr,0x49);
	      SiS_SetCH701x(SiS_Pr,0x49,0x3e);
	   }
	    Reset Chrontel 7019 datapath 
           SiS_SetCH701x(SiS_Pr,0x48,0x10);
           SiS_LongDelay(SiS_Pr, 1);
           SiS_SetCH701x(SiS_Pr,0x48,0x18);
	   if(SiS_WeHaveBacklightCtrl(SiS_Pr)) {
	      SiS_ChrontelResetVSync(SiS_Pr);
	      SiS_SetCH701x(SiS_Pr,0x49,temp);
	   }
        } else {
	    Clearsetclear GPIO 
           temp = SiS_GetCH701x(SiS_Pr,0x5c);
	   temp &= 0xef;
	   SiS_SetCH701x(SiS_Pr,0x5c,temp);
	   temp = SiS_GetCH701x(SiS_Pr,0x5c);
	   temp |= 0x10;
	   SiS_SetCH701x(SiS_Pr,0x5c,temp);
	   temp = SiS_GetCH701x(SiS_Pr,0x5c);
	   temp &= 0xef;
	   SiS_SetCH701x(SiS_Pr,0x5c,temp);
	   temp = SiS_GetCH701x(SiS_Pr,0x61);
	   if(!temp) {
	      SiS_SetCH701xForLCD(SiS_Pr);
	   }
        }
     } else {  650 
         Reset Chrontel 7019 datapath 
        SiS_SetCH701x(SiS_Pr,0x48,0x10);
        SiS_LongDelay(SiS_Pr, 1);
        SiS_SetCH701x(SiS_Pr,0x48,0x18);
     }
}
static void
SiS_ChrontelInitTVVSync(struct SiS_Private SiS_Pr)
{
     unsigned short temp;
     if(SiS_Pr->ChipType == SIS_740) {
        if(SiS_WeHaveBacklightCtrl(SiS_Pr)) {
           SiS_ChrontelResetVSync(SiS_Pr);
        }
     } else {
        SiS_SetCH701x(SiS_Pr,0x76,0xaf);   Power up LVDS block 
        temp = SiS_GetCH701x(SiS_Pr,0x49);
        temp &= 1;
        if(temp != 1) {   TV block powered? (0 = yes, 1 = no) 
	   temp = SiS_GetCH701x(SiS_Pr,0x47);
	   temp &= 0x70;
	   SiS_SetCH701x(SiS_Pr,0x47,temp);   enable VSYNC 
	   SiS_LongDelay(SiS_Pr, 3);
	   temp = SiS_GetCH701x(SiS_Pr,0x47);
	   temp |= 0x80;
	   SiS_SetCH701x(SiS_Pr,0x47,temp);   disable VSYNC 
        }
     }
}
static void
SiS_ChrontelDoSomething3(struct SiS_Private SiS_Pr, unsigned short ModeNo)
{
     unsigned short temp,temp1;
     if(SiS_Pr->ChipType == SIS_740) {
        temp = SiS_GetCH701x(SiS_Pr,0x61);
        if(temp < 1) {
           temp++;
	   SiS_SetCH701x(SiS_Pr,0x61,temp);
        }
        SiS_SetCH701x(SiS_Pr,0x66,0x45);   Panel power on 
        SiS_SetCH701x(SiS_Pr,0x76,0xaf);   All power on 
        SiS_LongDelay(SiS_Pr, 1);
        SiS_GenericDelay(SiS_Pr, 5887);
     } else {   650 
        temp1 = 0;
        temp = SiS_GetCH701x(SiS_Pr,0x61);
        if(temp < 2) {
           temp++;
	   SiS_SetCH701x(SiS_Pr,0x61,temp);
	   temp1 = 1;
        }
        SiS_SetCH701x(SiS_Pr,0x76,0xac);
        temp = SiS_GetCH701x(SiS_Pr,0x66);
        temp |= 0x5f;
        SiS_SetCH701x(SiS_Pr,0x66,temp);
        if(ModeNo > 0x13) {
           if(SiS_WeHaveBacklightCtrl(SiS_Pr)) {
	      SiS_GenericDelay(SiS_Pr, 1023);
	   } else {
	      SiS_GenericDelay(SiS_Pr, 767);
	   }
        } else {
           if(!temp1)
	      SiS_GenericDelay(SiS_Pr, 767);
        }
        temp = SiS_GetCH701x(SiS_Pr,0x76);
        temp |= 0x03;
        SiS_SetCH701x(SiS_Pr,0x76,temp);
        temp = SiS_GetCH701x(SiS_Pr,0x66);
        temp &= 0x7f;
        SiS_SetCH701x(SiS_Pr,0x66,temp);
        SiS_LongDelay(SiS_Pr, 1);
     }
}
static void
SiS_ChrontelDoSomething2(struct SiS_Private SiS_Pr)
{
     unsigned short temp;
     SiS_LongDelay(SiS_Pr, 1);
     do {
       temp = SiS_GetCH701x(SiS_Pr,0x66);
       temp &= 0x04;   PLL stable? -> bail out 
       if(temp == 0x04) break;
       if(SiS_Pr->ChipType == SIS_740) {
           Power down LVDS output, PLL normal operation 
          SiS_SetCH701x(SiS_Pr,0x76,0xac);
       }
       SiS_SetCH701xForLCD(SiS_Pr);
       temp = SiS_GetCH701x(SiS_Pr,0x76);
       temp &= 0xfb;   Reset PLL 
       SiS_SetCH701x(SiS_Pr,0x76,temp);
       SiS_LongDelay(SiS_Pr, 2);
       temp = SiS_GetCH701x(SiS_Pr,0x76);
       temp |= 0x04;   PLL normal operation 
       SiS_SetCH701x(SiS_Pr,0x76,temp);
       if(SiS_Pr->ChipType == SIS_740) {
          SiS_SetCH701x(SiS_Pr,0x78,0xe0);	 PLL loop filter 
       } else {
          SiS_SetCH701x(SiS_Pr,0x78,0x60);
       }
       SiS_LongDelay(SiS_Pr, 2);
    } while(0);
    SiS_SetCH701x(SiS_Pr,0x77,0x00);   MV? 
}
static void
SiS_ChrontelDoSomething1(struct SiS_Private SiS_Pr)
{
     unsigned short temp;
     temp = SiS_GetCH701x(SiS_Pr,0x03);
     temp |= 0x80;	 Set datapath 1 to TV   
     temp &= 0xbf;	 Set datapath 2 to LVDS 
     SiS_SetCH701x(SiS_Pr,0x03,temp);
     if(SiS_Pr->ChipType == SIS_740) {
        temp = SiS_GetCH701x(SiS_Pr,0x1c);
        temp &= 0xfb;	 Normal XCLK phase 
        SiS_SetCH701x(SiS_Pr,0x1c,temp);
        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x2d,0x03);
        temp = SiS_GetCH701x(SiS_Pr,0x64);
        temp |= 0x40;	 ? Bit not defined 
        SiS_SetCH701x(SiS_Pr,0x64,temp);
        temp = SiS_GetCH701x(SiS_Pr,0x03);
        temp &= 0x3f;	 D1 input to both LVDS and TV 
        SiS_SetCH701x(SiS_Pr,0x03,temp);
	if(SiS_Pr->SiS_CustomT == CUT_ASUSL3000D) {
	   SiS_SetCH701x(SiS_Pr,0x63,0x40);  LVDS off 
	   SiS_LongDelay(SiS_Pr, 1);
	   SiS_SetCH701x(SiS_Pr,0x63,0x00);  LVDS on 
	   SiS_ChrontelResetDB(SiS_Pr);
	   SiS_ChrontelDoSomething2(SiS_Pr);
	   SiS_ChrontelDoSomething3(SiS_Pr, 0);
	} else {
           temp = SiS_GetCH701x(SiS_Pr,0x66);
           if(temp != 0x45) {
              SiS_ChrontelResetDB(SiS_Pr);
              SiS_ChrontelDoSomething2(SiS_Pr);
              SiS_ChrontelDoSomething3(SiS_Pr, 0);
           }
	}
     } else {  650 
        SiS_ChrontelResetDB(SiS_Pr);
        SiS_ChrontelDoSomething2(SiS_Pr);
        temp = SiS_GetReg(SiS_Pr->SiS_P3d4,0x34);
        SiS_ChrontelDoSomething3(SiS_Pr,temp);
        SiS_SetCH701x(SiS_Pr,0x76,0xaf);   All power on, LVDS normal operation 
     }
}
#endif   315 series  
      MAIN: SET CRT2 REGISTER GROUP        
bool
SiS_SetCRT2Group(struct SiS_Private SiS_Pr, unsigned short ModeNo)
{
#ifdef CONFIG_FB_SIS_300
   unsigned char  ROMAddr  = SiS_Pr->VirtualRomBase;
#endif
   unsigned short ModeIdIndex, RefreshRateTableIndex;
   SiS_Pr->SiS_SetFlag |= ProgrammingCRT2;
   if(!SiS_Pr->UseCustomMode) {
      SiS_SearchModeID(SiS_Pr, &ModeNo, &ModeIdIndex);
   } else {
      ModeIdIndex = 0;
   }
    Used for shifting CR33 
   SiS_Pr->SiS_SelectCRT2Rate = 4;
   SiS_UnLockCRT2(SiS_Pr);
   RefreshRateTableIndex = SiS_GetRatePtr(SiS_Pr, ModeNo, ModeIdIndex);
   SiS_SaveCRT2Info(SiS_Pr,ModeNo);
   if(SiS_Pr->SiS_SetFlag & LowModeTests) {
      SiS_DisableBridge(SiS_Pr);
      if((SiS_Pr->SiS_IF_DEF_LVDS == 1) && (SiS_Pr->ChipType == SIS_730)) {
         SiS_SetReg(SiS_Pr->SiS_Part1Port,0x00,0x80);
      }
      SiS_SetCRT2ModeRegs(SiS_Pr, ModeNo, ModeIdIndex);
   }
   if(SiS_Pr->SiS_VBInfo & DisableCRT2Display) {
      SiS_LockCRT2(SiS_Pr);
      SiS_DisplayOn(SiS_Pr);
      return true;
   }
   SiS_GetCRT2Data(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex);
    Set up Panel Link for LVDS and LCDA 
   SiS_Pr->SiS_LCDHDES = SiS_Pr->SiS_LCDVDES = 0;
   if( (SiS_Pr->SiS_IF_DEF_LVDS == 1) ||
       ((SiS_Pr->SiS_VBType & VB_NoLCD) && (SiS_Pr->SiS_VBInfo & SetCRT2ToLCD)) ||
       ((SiS_Pr->ChipType >= SIS_315H) && (SiS_Pr->SiS_VBType & VB_SIS30xBLV)) ) {
      SiS_GetLVDSDesData(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex);
   }
   if(SiS_Pr->SiS_SetFlag & LowModeTests) {
      SiS_SetGroup1(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex);
   }
   if(SiS_Pr->SiS_VBType & VB_SISVB) {
      if(SiS_Pr->SiS_SetFlag & LowModeTests) {
	 SiS_SetGroup2(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex);
#ifdef CONFIG_FB_SIS_315
	 SiS_SetGroup2_C_ELV(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex);
#endif
	 SiS_SetGroup3(SiS_Pr, ModeNo, ModeIdIndex);
	 SiS_SetGroup4(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex);
#ifdef CONFIG_FB_SIS_315
	 SiS_SetGroup4_C_ELV(SiS_Pr, ModeNo, ModeIdIndex);
#endif
	 SiS_SetGroup5(SiS_Pr, ModeNo, ModeIdIndex);
	 SiS_SetCRT2Sync(SiS_Pr, ModeNo, RefreshRateTableIndex);
	  For 301BDH (Panel link initialization): 
	 if((SiS_Pr->SiS_VBType & VB_NoLCD) && (SiS_Pr->SiS_VBInfo & SetCRT2ToLCD)) {
	    if(!((SiS_Pr->SiS_SetFlag & SetDOSMode) && ((ModeNo == 0x03) || (ModeNo == 0x10)))) {
	       if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) {
		  SiS_ModCRT1CRTC(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex);
	       }
            }
	    SiS_SetCRT2ECLK(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex);
	 }
      }
   } else {
      SiS_SetCRT2Sync(SiS_Pr, ModeNo, RefreshRateTableIndex);
      SiS_ModCRT1CRTC(SiS_Pr,ModeNo,ModeIdIndex,RefreshRateTableIndex);
      SiS_SetCRT2ECLK(SiS_Pr,ModeNo,ModeIdIndex,RefreshRateTableIndex);
      if(SiS_Pr->SiS_SetFlag & LowModeTests) {
	 if(SiS_Pr->SiS_IF_DEF_CH70xx != 0) {
	    if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) {
	       if(SiS_Pr->SiS_IF_DEF_CH70xx == 2) {
#ifdef CONFIG_FB_SIS_315
		  SiS_SetCH701xForLCD(SiS_Pr);
#endif
	       }
	    }
	    if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
	       SiS_SetCHTVReg(SiS_Pr,ModeNo,ModeIdIndex,RefreshRateTableIndex);
	    }
	 }
      }
   }
#ifdef CONFIG_FB_SIS_300
   if(SiS_Pr->ChipType < SIS_315H) {
      if(SiS_Pr->SiS_SetFlag & LowModeTests) {
	 if(SiS_Pr->SiS_UseOEM) {
	    if((SiS_Pr->SiS_UseROM) && (SiS_Pr->SiS_UseOEM == -1)) {
	       if((ROMAddr[0x233] == 0x12) && (ROMAddr[0x234] == 0x34)) {
		  SiS_OEM300Setting(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex);
	       }
	    } else {
	       SiS_OEM300Setting(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex);
	    }
	 }
	 if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
	    if((SiS_Pr->SiS_CustomT == CUT_BARCO1366) ||
	       (SiS_Pr->SiS_CustomT == CUT_BARCO1024)) {
	       SetOEMLCDData2(SiS_Pr, ModeNo, ModeIdIndex,RefreshRateTableIndex);
	    }
	    SiS_DisplayOn(SiS_Pr);
         }
      }
   }
#endif
#ifdef CONFIG_FB_SIS_315
   if(SiS_Pr->ChipType >= SIS_315H) {
      if(SiS_Pr->SiS_SetFlag & LowModeTests) {
	 if(SiS_Pr->ChipType < SIS_661) {
	    SiS_FinalizeLCD(SiS_Pr, ModeNo, ModeIdIndex);
	    SiS_OEM310Setting(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex);
	 } else {
	    SiS_OEM661Setting(SiS_Pr, ModeNo, ModeIdIndex, RefreshRateTableIndex);
	 }
	 SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x01,0x40);
      }
   }
#endif
   if(SiS_Pr->SiS_SetFlag & LowModeTests) {
      SiS_EnableBridge(SiS_Pr);
   }
   SiS_DisplayOn(SiS_Pr);
   if(SiS_Pr->SiS_IF_DEF_CH70xx == 1) {
      if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
	  Disable LCD panel when using TV 
	 SiS_SetRegSR11ANDOR(SiS_Pr,0xFF,0x0C);
      } else {
	  Disable TV when using LCD 
	 SiS_SetCH70xxANDOR(SiS_Pr,0x0e,0x01,0xf8);
      }
   }
   if(SiS_Pr->SiS_SetFlag & LowModeTests) {
      SiS_LockCRT2(SiS_Pr);
   }
   return true;
}
     ENABLEDISABLE LCD BACKLIGHT (SIS)    
void
SiS_SiS30xBLOn(struct SiS_Private SiS_Pr)
{
   Switch on LCD backlight on SiS30xLV 
  SiS_DDC2Delay(SiS_Pr,0xff00);
  if(!(SiS_GetReg(SiS_Pr->SiS_Part4Port,0x26) & 0x02)) {
     SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x26,0x02);
     SiS_WaitVBRetrace(SiS_Pr);
  }
  if(!(SiS_GetReg(SiS_Pr->SiS_Part4Port,0x26) & 0x01)) {
     SiS_SetRegOR(SiS_Pr->SiS_Part4Port,0x26,0x01);
  }
}
void
SiS_SiS30xBLOff(struct SiS_Private SiS_Pr)
{
   Switch off LCD backlight on SiS30xLV 
  SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x26,0xFE);
  SiS_DDC2Delay(SiS_Pr,0xff00);
}
          DDC RELATED FUNCTIONS            
static void
SiS_SetupDDCN(struct SiS_Private SiS_Pr)
{
  SiS_Pr->SiS_DDC_NData = ~SiS_Pr->SiS_DDC_Data;
  SiS_Pr->SiS_DDC_NClk  = ~SiS_Pr->SiS_DDC_Clk;
  if((SiS_Pr->SiS_DDC_Index == 0x11) && (SiS_Pr->SiS_SensibleSR11)) {
     SiS_Pr->SiS_DDC_NData &= 0x0f;
     SiS_Pr->SiS_DDC_NClk  &= 0x0f;
  }
}
#ifdef CONFIG_FB_SIS_300
static unsigned char 
SiS_SetTrumpBlockLoop(struct SiS_Private SiS_Pr, unsigned char dataptr)
{
  int i, j, num;
  unsigned short tempah,temp;
  unsigned char mydataptr;
  for(i=0; i<20; i++) {				 Do 20 attempts to write 
     mydataptr = dataptr;
     num = mydataptr++;
     if(!num) return mydataptr;
     if(i) {
        SiS_SetStop(SiS_Pr);
	SiS_DDC2Delay(SiS_Pr,SiS_I2CDELAYSHORT  2);
     }
     if(SiS_SetStart(SiS_Pr)) continue;		 Set start condition 
     tempah = SiS_Pr->SiS_DDC_DeviceAddr;
     temp = SiS_WriteDDC2Data(SiS_Pr,tempah);	 Write DAB (S0=0=write) 
     if(temp) continue;				    (ERROR: no ack) 
     tempah = mydataptr++;
     temp = SiS_WriteDDC2Data(SiS_Pr,tempah);	 Write register number 
     if(temp) continue;				    (ERROR: no ack) 
     for(j=0; j<num; j++) {
        tempah = mydataptr++;
        temp = SiS_WriteDDC2Data(SiS_Pr,tempah); Write DAB (S0=0=write) 
	if(temp) break;
     }
     if(temp) continue;
     if(SiS_SetStop(SiS_Pr)) continue;
     return mydataptr;
  }
  return NULL;
}
static bool
SiS_SetTrumpionBlock(struct SiS_Private SiS_Pr, unsigned char dataptr)
{
  SiS_Pr->SiS_DDC_DeviceAddr = 0xF0;  		 DAB (Device Address Byte) 
  SiS_Pr->SiS_DDC_Index = 0x11;			 Bit 0 = SC;  Bit 1 = SD 
  SiS_Pr->SiS_DDC_Data  = 0x02;			 Bitmask in IndexReg for Data 
  SiS_Pr->SiS_DDC_Clk   = 0x01;			 Bitmask in IndexReg for Clk 
  SiS_SetupDDCN(SiS_Pr);
  SiS_SetSwitchDDC2(SiS_Pr);
  while(dataptr) {
     dataptr = SiS_SetTrumpBlockLoop(SiS_Pr, dataptr);
     if(!dataptr) return false;
  }
  return true;
}
#endif
 The Chrontel 700x is connected to the 630730 via
static bool
SiS_SetChReg(struct SiS_Private SiS_Pr, unsigned short reg, unsigned char val, unsigned short myor)
{
  unsigned short temp, i;
  for(i=0; i<20; i++) {				 Do 20 attempts to write 
     if(i) {
	SiS_SetStop(SiS_Pr);
	SiS_DDC2Delay(SiS_Pr,SiS_I2CDELAYSHORT  4);
     }
     if(SiS_SetStart(SiS_Pr)) continue;					 Set start condition 
     temp = SiS_WriteDDC2Data(SiS_Pr, SiS_Pr->SiS_DDC_DeviceAddr);	 Write DAB (S0=0=write) 
     if(temp) continue;							    (ERROR: no ack) 
     temp = SiS_WriteDDC2Data(SiS_Pr, (reg | myor));			 Write RAB (700x: set bit 7, see datasheet) 
     if(temp) continue;							    (ERROR: no ack) 
     temp = SiS_WriteDDC2Data(SiS_Pr, val);				 Write data 
     if(temp) continue;							    (ERROR: no ack) 
     if(SiS_SetStop(SiS_Pr)) continue;					 Set stop condition 
     SiS_Pr->SiS_ChrontelInit = 1;
     return true;
  }
  return false;
}
 Write to Chrontel 700x 
void
SiS_SetCH700x(struct SiS_Private SiS_Pr, unsigned short reg, unsigned char val)
{
  SiS_Pr->SiS_DDC_DeviceAddr = 0xEA;  		 DAB (Device Address Byte) 
  SiS_DDC2Delay(SiS_Pr,SiS_I2CDELAYSHORT);
  if(!(SiS_Pr->SiS_ChrontelInit)) {
     SiS_Pr->SiS_DDC_Index = 0x11;		 Bit 0 = SC;  Bit 1 = SD 
     SiS_Pr->SiS_DDC_Data  = 0x02;		 Bitmask in IndexReg for Data 
     SiS_Pr->SiS_DDC_Clk   = 0x01;		 Bitmask in IndexReg for Clk 
     SiS_SetupDDCN(SiS_Pr);
  }
  if( (!(SiS_SetChReg(SiS_Pr, reg, val, 0x80))) &&
      (!(SiS_Pr->SiS_ChrontelInit)) ) {
     SiS_Pr->SiS_DDC_Index = 0x0a;
     SiS_Pr->SiS_DDC_Data  = 0x80;
     SiS_Pr->SiS_DDC_Clk   = 0x40;
     SiS_SetupDDCN(SiS_Pr);
     SiS_SetChReg(SiS_Pr, reg, val, 0x80);
  }
}
 Write to Chrontel 701x 
 Parameter is [Data (S15-S8) | Register no (S7-S0)] 
void
SiS_SetCH701x(struct SiS_Private SiS_Pr, unsigned short reg, unsigned char val)
{
  SiS_Pr->SiS_DDC_Index = 0x11;			 Bit 0 = SC;  Bit 1 = SD 
  SiS_Pr->SiS_DDC_Data  = 0x08;			 Bitmask in IndexReg for Data 
  SiS_Pr->SiS_DDC_Clk   = 0x04;			 Bitmask in IndexReg for Clk 
  SiS_SetupDDCN(SiS_Pr);
  SiS_Pr->SiS_DDC_DeviceAddr = 0xEA;		 DAB (Device Address Byte) 
  SiS_SetChReg(SiS_Pr, reg, val, 0);
}
static
void
SiS_SetCH70xx(struct SiS_Private SiS_Pr, unsigned short reg, unsigned char val)
{
  if(SiS_Pr->SiS_IF_DEF_CH70xx == 1)
     SiS_SetCH700x(SiS_Pr, reg, val);
  else
     SiS_SetCH701x(SiS_Pr, reg, val);
}
static unsigned short
SiS_GetChReg(struct SiS_Private SiS_Pr, unsigned short myor)
{
  unsigned short tempah, temp, i;
  for(i=0; i<20; i++) {				 Do 20 attempts to read 
     if(i) {
	SiS_SetStop(SiS_Pr);
	SiS_DDC2Delay(SiS_Pr,SiS_I2CDELAYSHORT  4);
     }
     if(SiS_SetStart(SiS_Pr)) continue;					 Set start condition 
     temp = SiS_WriteDDC2Data(SiS_Pr,SiS_Pr->SiS_DDC_DeviceAddr);	 Write DAB (S0=0=write) 
     if(temp) continue;							        (ERROR: no ack) 
     temp = SiS_WriteDDC2Data(SiS_Pr,SiS_Pr->SiS_DDC_ReadAddr | myor);	 Write RAB (700x: | 0x80) 
     if(temp) continue;							        (ERROR: no ack) 
     if (SiS_SetStart(SiS_Pr)) continue;				 Re-start 
     temp = SiS_WriteDDC2Data(SiS_Pr,SiS_Pr->SiS_DDC_DeviceAddr | 0x01); DAB (S0=1=read) 
     if(temp) continue;							        (ERROR: no ack) 
     tempah = SiS_ReadDDC2Data(SiS_Pr);					 Read byte 
     if(SiS_SetStop(SiS_Pr)) continue;					 Stop condition 
     SiS_Pr->SiS_ChrontelInit = 1;
     return tempah;
  }
  return 0xFFFF;
}
 Read from Chrontel 700x 
 Parameter is [Register no (S7-S0)] 
unsigned short
SiS_GetCH700x(struct SiS_Private SiS_Pr, unsigned short tempbx)
{
  unsigned short result;
  SiS_Pr->SiS_DDC_DeviceAddr = 0xEA;		 DAB 
  SiS_DDC2Delay(SiS_Pr,SiS_I2CDELAYSHORT);
  if(!(SiS_Pr->SiS_ChrontelInit)) {
     SiS_Pr->SiS_DDC_Index = 0x11;		 Bit 0 = SC;  Bit 1 = SD 
     SiS_Pr->SiS_DDC_Data  = 0x02;		 Bitmask in IndexReg for Data 
     SiS_Pr->SiS_DDC_Clk   = 0x01;		 Bitmask in IndexReg for Clk 
     SiS_SetupDDCN(SiS_Pr);
  }
  SiS_Pr->SiS_DDC_ReadAddr = tempbx;
  if( ((result = SiS_GetChReg(SiS_Pr,0x80)) == 0xFFFF) &&
      (!SiS_Pr->SiS_ChrontelInit) ) {
     SiS_Pr->SiS_DDC_Index = 0x0a;
     SiS_Pr->SiS_DDC_Data  = 0x80;
     SiS_Pr->SiS_DDC_Clk   = 0x40;
     SiS_SetupDDCN(SiS_Pr);
     result = SiS_GetChReg(SiS_Pr,0x80);
  }
  return result;
}
 Read from Chrontel 701x 
 Parameter is [Register no (S7-S0)] 
unsigned short
SiS_GetCH701x(struct SiS_Private SiS_Pr, unsigned short tempbx)
{
  SiS_Pr->SiS_DDC_Index = 0x11;			 Bit 0 = SC;  Bit 1 = SD 
  SiS_Pr->SiS_DDC_Data  = 0x08;			 Bitmask in IndexReg for Data 
  SiS_Pr->SiS_DDC_Clk   = 0x04;			 Bitmask in IndexReg for Clk 
  SiS_SetupDDCN(SiS_Pr);
  SiS_Pr->SiS_DDC_DeviceAddr = 0xEA;		 DAB 
  SiS_Pr->SiS_DDC_ReadAddr = tempbx;
  return SiS_GetChReg(SiS_Pr,0);
}
 Read from Chrontel 70xx 
 Parameter is [Register no (S7-S0)] 
static
unsigned short
SiS_GetCH70xx(struct SiS_Private SiS_Pr, unsigned short tempbx)
{
  if(SiS_Pr->SiS_IF_DEF_CH70xx == 1)
     return SiS_GetCH700x(SiS_Pr, tempbx);
  else
     return SiS_GetCH701x(SiS_Pr, tempbx);
}
void
SiS_SetCH70xxANDOR(struct SiS_Private SiS_Pr, unsigned short reg,
		unsigned char myor, unsigned short myand)
{
  unsigned short tempbl;
  tempbl = (SiS_GetCH70xx(SiS_Pr, (reg & 0xFF)) & myand) | myor;
  SiS_SetCH70xx(SiS_Pr, reg, tempbl);
}
 Our own DDC functions 
static
unsigned short
SiS_InitDDCRegs(struct SiS_Private SiS_Pr, unsigned int VBFlags, int VGAEngine,
                unsigned short adaptnum, unsigned short DDCdatatype, bool checkcr32,
		unsigned int VBFlags2)
{
     unsigned char ddcdtype[] = { 0xa0, 0xa0, 0xa0, 0xa2, 0xa6 };
     unsigned char flag, cr32;
     unsigned short        temp = 0, myadaptnum = adaptnum;
     if(adaptnum != 0) {
	if(!(VBFlags2 & VB2_SISTMDSBRIDGE)) return 0xFFFF;
	if((VBFlags2 & VB2_30xBDH) && (adaptnum == 1)) return 0xFFFF;
     }
      adapternum for SiS bridges: 0 = CRT1, 1 = LCD, 2 = VGA2 
     SiS_Pr->SiS_ChrontelInit = 0;    force re-detection! 
     SiS_Pr->SiS_DDC_SecAddr = 0;
     SiS_Pr->SiS_DDC_DeviceAddr = ddcdtype[DDCdatatype];
     SiS_Pr->SiS_DDC_Port = SiS_Pr->SiS_P3c4;
     SiS_Pr->SiS_DDC_Index = 0x11;
     flag = 0xff;
     cr32 = SiS_GetReg(SiS_Pr->SiS_P3d4,0x32);
#if 0
     if(VBFlags2 & VB2_SISBRIDGE) {
	if(myadaptnum == 0) {
	   if(!(cr32 & 0x20)) {
	      myadaptnum = 2;
	      if(!(cr32 & 0x10)) {
	         myadaptnum = 1;
		 if(!(cr32 & 0x08)) {
		    myadaptnum = 0;
		 }
	      }
	   }
        }
     }
#endif
     if(VGAEngine == SIS_300_VGA) {		 300 series 
        if(myadaptnum != 0) {
	   flag = 0;
	   if(VBFlags2 & VB2_SISBRIDGE) {
	      SiS_Pr->SiS_DDC_Port = SiS_Pr->SiS_Part4Port;
              SiS_Pr->SiS_DDC_Index = 0x0f;
	   }
        }
	if(!(VBFlags2 & VB2_301)) {
	   if((cr32 & 0x80) && (checkcr32)) {
              if(myadaptnum >= 1) {
	         if(!(cr32 & 0x08)) {
		     myadaptnum = 1;
		     if(!(cr32 & 0x10)) return 0xFFFF;
                 }
	      }
	   }
	}
	temp = 4 - (myadaptnum  2);
	if(flag) temp = 0;
     } else {						 315330 series 
	 here we simplify: 0 = CRT1, 1 = CRT2 (VGA, LCD) 
	if(VBFlags2 & VB2_SISBRIDGE) {
	   if(myadaptnum == 2) {
	      myadaptnum = 1;
	   }
	}
        if(myadaptnum == 1) {
	   flag = 0;
	   if(VBFlags2 & VB2_SISBRIDGE) {
	      SiS_Pr->SiS_DDC_Port = SiS_Pr->SiS_Part4Port;
              SiS_Pr->SiS_DDC_Index = 0x0f;
	   }
        }
        if((cr32 & 0x80) && (checkcr32)) {
           if(myadaptnum >= 1) {
	      if(!(cr32 & 0x08)) {
	         myadaptnum = 1;
		 if(!(cr32 & 0x10)) return 0xFFFF;
	      }
	   }
        }
        temp = myadaptnum;
        if(myadaptnum == 1) {
           temp = 0;
	   if(VBFlags2 & VB2_LVDS) flag = 0xff;
        }
	if(flag) temp = 0;
    }
    SiS_Pr->SiS_DDC_Data = 0x02 << temp;
    SiS_Pr->SiS_DDC_Clk  = 0x01 << temp;
    SiS_SetupDDCN(SiS_Pr);
    return 0;
}
static unsigned short
SiS_WriteDABDDC(struct SiS_Private SiS_Pr)
{
   if(SiS_SetStart(SiS_Pr)) return 0xFFFF;
   if(SiS_WriteDDC2Data(SiS_Pr, SiS_Pr->SiS_DDC_DeviceAddr)) {
      return 0xFFFF;
   }
   if(SiS_WriteDDC2Data(SiS_Pr, SiS_Pr->SiS_DDC_SecAddr)) {
      return 0xFFFF;
   }
   return 0;
}
static unsigned short
SiS_PrepareReadDDC(struct SiS_Private SiS_Pr)
{
   if(SiS_SetStart(SiS_Pr)) return 0xFFFF;
   if(SiS_WriteDDC2Data(SiS_Pr, (SiS_Pr->SiS_DDC_DeviceAddr | 0x01))) {
      return 0xFFFF;
   }
   return 0;
}
static unsigned short
SiS_PrepareDDC(struct SiS_Private SiS_Pr)
{
   if(SiS_WriteDABDDC(SiS_Pr)) SiS_WriteDABDDC(SiS_Pr);
   if(SiS_PrepareReadDDC(SiS_Pr)) return (SiS_PrepareReadDDC(SiS_Pr));
   return 0;
}
static void
SiS_SendACK(struct SiS_Private SiS_Pr, unsigned short yesno)
{
   SiS_SetSCLKLow(SiS_Pr);
   if(yesno) {
      SiS_SetRegANDOR(SiS_Pr->SiS_DDC_Port,
		      SiS_Pr->SiS_DDC_Index,
		      SiS_Pr->SiS_DDC_NData,
		      SiS_Pr->SiS_DDC_Data);
   } else {
      SiS_SetRegANDOR(SiS_Pr->SiS_DDC_Port,
		      SiS_Pr->SiS_DDC_Index,
		      SiS_Pr->SiS_DDC_NData,
		      0);
   }
   SiS_SetSCLKHigh(SiS_Pr);
}
static unsigned short
SiS_DoProbeDDC(struct SiS_Private SiS_Pr)
{
    unsigned char mask, value;
    unsigned short  temp, ret=0;
    bool failed = false;
    SiS_SetSwitchDDC2(SiS_Pr);
    if(SiS_PrepareDDC(SiS_Pr)) {
         SiS_SetStop(SiS_Pr);
         return 0xFFFF;
    }
    mask = 0xf0;
    value = 0x20;
    if(SiS_Pr->SiS_DDC_DeviceAddr == 0xa0) {
       temp = (unsigned char)SiS_ReadDDC2Data(SiS_Pr);
       SiS_SendACK(SiS_Pr, 0);
       if(temp == 0) {
           mask = 0xff;
	   value = 0xff;
       } else {
           failed = true;
	   ret = 0xFFFF;
       }
    }
    if(!failed) {
       temp = (unsigned char)SiS_ReadDDC2Data(SiS_Pr);
       SiS_SendACK(SiS_Pr, 1);
       temp &= mask;
       if(temp == value) ret = 0;
       else {
          ret = 0xFFFF;
          if(SiS_Pr->SiS_DDC_DeviceAddr == 0xa0) {
             if(temp == 0x30) ret = 0;
          }
       }
    }
    SiS_SetStop(SiS_Pr);
    return ret;
}
static
unsigned short
SiS_ProbeDDC(struct SiS_Private SiS_Pr)
{
   unsigned short flag;
   flag = 0x180;
   SiS_Pr->SiS_DDC_DeviceAddr = 0xa0;
   if(!(SiS_DoProbeDDC(SiS_Pr))) flag |= 0x02;
   SiS_Pr->SiS_DDC_DeviceAddr = 0xa2;
   if(!(SiS_DoProbeDDC(SiS_Pr))) flag |= 0x08;
   SiS_Pr->SiS_DDC_DeviceAddr = 0xa6;
   if(!(SiS_DoProbeDDC(SiS_Pr))) flag |= 0x10;
   if(!(flag & 0x1a)) flag = 0;
   return flag;
}
static
unsigned short
SiS_ReadDDC(struct SiS_Private SiS_Pr, unsigned short DDCdatatype, unsigned char buffer)
{
   unsigned short flag, length, i;
   unsigned char chksum,gotcha;
   if(DDCdatatype > 4) return 0xFFFF;
   flag = 0;
   SiS_SetSwitchDDC2(SiS_Pr);
   if(!(SiS_PrepareDDC(SiS_Pr))) {
      length = 127;
      if(DDCdatatype != 1) length = 255;
      chksum = 0;
      gotcha = 0;
      for(i=0; i<length; i++) {
	 buffer[i] = (unsigned char)SiS_ReadDDC2Data(SiS_Pr);
	 chksum += buffer[i];
	 gotcha |= buffer[i];
	 SiS_SendACK(SiS_Pr, 0);
      }
      buffer[i] = (unsigned char)SiS_ReadDDC2Data(SiS_Pr);
      chksum += buffer[i];
      SiS_SendACK(SiS_Pr, 1);
      if(gotcha) flag = (unsigned short)chksum;
      else flag = 0xFFFF;
   } else {
      flag = 0xFFFF;
   }
   SiS_SetStop(SiS_Pr);
   return flag;
}
 Our private DDC functions
unsigned short
SiS_HandleDDC(struct SiS_Private SiS_Pr, unsigned int VBFlags, int VGAEngine,
              unsigned short adaptnum, unsigned short DDCdatatype, unsigned char buffer,
	      unsigned int VBFlags2)
{
   unsigned char  sr1f, cr17=1;
   unsigned short result;
   if(adaptnum > 2)
      return 0xFFFF;
   if(DDCdatatype > 4)
      return 0xFFFF;
   if((!(VBFlags2 & VB2_VIDEOBRIDGE)) && (adaptnum > 0))
      return 0xFFFF;
   if(SiS_InitDDCRegs(SiS_Pr, VBFlags, VGAEngine, adaptnum, DDCdatatype, false, VBFlags2) == 0xFFFF)
      return 0xFFFF;
   sr1f = SiS_GetReg(SiS_Pr->SiS_P3c4,0x1f);
   SiS_SetRegANDOR(SiS_Pr->SiS_P3c4,0x1f,0x3f,0x04);
   if(VGAEngine == SIS_300_VGA) {
      cr17 = SiS_GetReg(SiS_Pr->SiS_P3d4,0x17) & 0x80;
      if(!cr17) {
         SiS_SetRegOR(SiS_Pr->SiS_P3d4,0x17,0x80);
         SiS_SetReg(SiS_Pr->SiS_P3c4,0x00,0x01);
         SiS_SetReg(SiS_Pr->SiS_P3c4,0x00,0x03);
      }
   }
   if((sr1f) || (!cr17)) {
      SiS_WaitRetrace1(SiS_Pr);
      SiS_WaitRetrace1(SiS_Pr);
      SiS_WaitRetrace1(SiS_Pr);
      SiS_WaitRetrace1(SiS_Pr);
   }
   if(DDCdatatype == 0) {
      result = SiS_ProbeDDC(SiS_Pr);
   } else {
      result = SiS_ReadDDC(SiS_Pr, DDCdatatype, buffer);
      if((!result) && (DDCdatatype == 1)) {
         if((buffer[0] == 0x00) && (buffer[1] == 0xff) &&
	    (buffer[2] == 0xff) && (buffer[3] == 0xff) &&
	    (buffer[4] == 0xff) && (buffer[5] == 0xff) &&
	    (buffer[6] == 0xff) && (buffer[7] == 0x00) &&
	    (buffer[0x12] == 1)) {
	    if(!SiS_Pr->DDCPortMixup) {
	       if(adaptnum == 1) {
	          if(!(buffer[0x14] & 0x80)) result = 0xFFFE;
	       } else {
	          if(buffer[0x14] & 0x80)    result = 0xFFFE;
	       }
	    }
	 }
      }
   }
   SiS_SetReg(SiS_Pr->SiS_P3c4,0x1f,sr1f);
   if(VGAEngine == SIS_300_VGA) {
      SiS_SetRegANDOR(SiS_Pr->SiS_P3d4,0x17,0x7f,cr17);
   }
   return result;
}
 Generic I2C functions for Chrontel & DDC --------- 
static void
SiS_SetSwitchDDC2(struct SiS_Private SiS_Pr)
{
  SiS_SetSCLKHigh(SiS_Pr);
  SiS_WaitRetrace1(SiS_Pr);
  SiS_SetSCLKLow(SiS_Pr);
  SiS_WaitRetrace1(SiS_Pr);
}
unsigned short
SiS_ReadDDC1Bit(struct SiS_Private SiS_Pr)
{
   SiS_WaitRetrace1(SiS_Pr);
   return ((SiS_GetReg(SiS_Pr->SiS_P3c4,0x11) & 0x02) >> 1);
}
 Set I2C start condition 
 This is done by a SD high-to-low transition while SC is high 
static unsigned short
SiS_SetStart(struct SiS_Private SiS_Pr)
{
  if(SiS_SetSCLKLow(SiS_Pr)) return 0xFFFF;			 (SC->low)  
  SiS_SetRegANDOR(SiS_Pr->SiS_DDC_Port,
		  SiS_Pr->SiS_DDC_Index,
		  SiS_Pr->SiS_DDC_NData,
		  SiS_Pr->SiS_DDC_Data);        		 SD->high 
  if(SiS_SetSCLKHigh(SiS_Pr)) return 0xFFFF;			 SC->high 
  SiS_SetRegANDOR(SiS_Pr->SiS_DDC_Port,
		  SiS_Pr->SiS_DDC_Index,
		  SiS_Pr->SiS_DDC_NData,
		  0x00);					 SD->low = start condition 
  if(SiS_SetSCLKHigh(SiS_Pr)) return 0xFFFF;			 (SC->low) 
  return 0;
}
 Set I2C stop condition 
 This is done by a SD low-to-high transition while SC is high 
static unsigned short
SiS_SetStop(struct SiS_Private SiS_Pr)
{
  if(SiS_SetSCLKLow(SiS_Pr)) return 0xFFFF;			 (SC->low) 
  SiS_SetRegANDOR(SiS_Pr->SiS_DDC_Port,
		  SiS_Pr->SiS_DDC_Index,
		  SiS_Pr->SiS_DDC_NData,
		  0x00);					 SD->low   
  if(SiS_SetSCLKHigh(SiS_Pr)) return 0xFFFF;			 SC->high  
  SiS_SetRegANDOR(SiS_Pr->SiS_DDC_Port,
		  SiS_Pr->SiS_DDC_Index,
		  SiS_Pr->SiS_DDC_NData,
		  SiS_Pr->SiS_DDC_Data);			 SD->high = stop condition 
  if(SiS_SetSCLKHigh(SiS_Pr)) return 0xFFFF;			 (SC->high) 
  return 0;
}
 Write 8 bits of data 
static unsigned short
SiS_WriteDDC2Data(struct SiS_Private SiS_Pr, unsigned short tempax)
{
  unsigned short i,flag,temp;
  flag = 0x80;
  for(i = 0; i < 8; i++) {
    SiS_SetSCLKLow(SiS_Pr);					 SC->low 
    if(tempax & flag) {
      SiS_SetRegANDOR(SiS_Pr->SiS_DDC_Port,
		      SiS_Pr->SiS_DDC_Index,
		      SiS_Pr->SiS_DDC_NData,
		      SiS_Pr->SiS_DDC_Data);			 Write bit (1) to SD 
    } else {
      SiS_SetRegANDOR(SiS_Pr->SiS_DDC_Port,
		      SiS_Pr->SiS_DDC_Index,
		      SiS_Pr->SiS_DDC_NData,
		      0x00);					 Write bit (0) to SD 
    }
    SiS_SetSCLKHigh(SiS_Pr);					 SC->high 
    flag >>= 1;
  }
  temp = SiS_CheckACK(SiS_Pr);					 Check acknowledge 
  return temp;
}
static unsigned short
SiS_ReadDDC2Data(struct SiS_Private SiS_Pr)
{
  unsigned short i, temp, getdata;
  getdata = 0;
  for(i = 0; i < 8; i++) {
    getdata <<= 1;
    SiS_SetSCLKLow(SiS_Pr);
    SiS_SetRegANDOR(SiS_Pr->SiS_DDC_Port,
		    SiS_Pr->SiS_DDC_Index,
		    SiS_Pr->SiS_DDC_NData,
		    SiS_Pr->SiS_DDC_Data);
    SiS_SetSCLKHigh(SiS_Pr);
    temp = SiS_GetReg(SiS_Pr->SiS_DDC_Port,SiS_Pr->SiS_DDC_Index);
    if(temp & SiS_Pr->SiS_DDC_Data) getdata |= 0x01;
  }
  return getdata;
}
static unsigned short
SiS_SetSCLKLow(struct SiS_Private SiS_Pr)
{
  SiS_SetRegANDOR(SiS_Pr->SiS_DDC_Port,
		  SiS_Pr->SiS_DDC_Index,
		  SiS_Pr->SiS_DDC_NClk,
		  0x00);					 SetSCLKLow()  
  SiS_DDC2Delay(SiS_Pr,SiS_I2CDELAYSHORT);
  return 0;
}
static unsigned short
SiS_SetSCLKHigh(struct SiS_Private SiS_Pr)
{
  unsigned short temp, watchdog=1000;
  SiS_SetRegANDOR(SiS_Pr->SiS_DDC_Port,
		  SiS_Pr->SiS_DDC_Index,
		  SiS_Pr->SiS_DDC_NClk,
		  SiS_Pr->SiS_DDC_Clk);  			 SetSCLKHigh()  
  do {
    temp = SiS_GetReg(SiS_Pr->SiS_DDC_Port,SiS_Pr->SiS_DDC_Index);
  } while((!(temp & SiS_Pr->SiS_DDC_Clk)) && --watchdog);
  if (!watchdog) {
  	return 0xFFFF;
  }
  SiS_DDC2Delay(SiS_Pr,SiS_I2CDELAYSHORT);
  return 0;
}
 Check I2C acknowledge 
 Returns 0 if ack ok, non-0 if ack not ok 
static unsigned short
SiS_CheckACK(struct SiS_Private SiS_Pr)
{
  unsigned short tempah;
  SiS_SetSCLKLow(SiS_Pr);				            (SC->low) 
  SiS_SetRegANDOR(SiS_Pr->SiS_DDC_Port,
		  SiS_Pr->SiS_DDC_Index,
		  SiS_Pr->SiS_DDC_NData,
		  SiS_Pr->SiS_DDC_Data);			    (SD->high) 
  SiS_SetSCLKHigh(SiS_Pr);				            SC->high = clock impulse for ack 
  tempah = SiS_GetReg(SiS_Pr->SiS_DDC_Port,SiS_Pr->SiS_DDC_Index);  Read SD 
  SiS_SetSCLKLow(SiS_Pr);				            SC->low = end of clock impulse 
  if(tempah & SiS_Pr->SiS_DDC_Data) return 1;			    Ack OK if bit = 0 
  return 0;
}
 End of I2C functions ----------------------- 
 =============== SiS 315330 O.E.M. ================= 
#ifdef CONFIG_FB_SIS_315
static unsigned short
GetRAMDACromptr(struct SiS_Private SiS_Pr)
{
  unsigned char  ROMAddr = SiS_Pr->VirtualRomBase;
  unsigned short romptr;
  if(SiS_Pr->ChipType < SIS_330) {
     romptr = SISGETROMW(0x128);
     if(SiS_Pr->SiS_VBType & VB_SIS30xB)
        romptr = SISGETROMW(0x12a);
  } else {
     romptr = SISGETROMW(0x1a8);
     if(SiS_Pr->SiS_VBType & VB_SIS30xB)
        romptr = SISGETROMW(0x1aa);
  }
  return romptr;
}
static unsigned short
GetLCDromptr(struct SiS_Private SiS_Pr)
{
  unsigned char  ROMAddr = SiS_Pr->VirtualRomBase;
  unsigned short romptr;
  if(SiS_Pr->ChipType < SIS_330) {
     romptr = SISGETROMW(0x120);
     if(SiS_Pr->SiS_VBType & VB_SIS30xBLV)
        romptr = SISGETROMW(0x122);
  } else {
     romptr = SISGETROMW(0x1a0);
     if(SiS_Pr->SiS_VBType & VB_SIS30xBLV)
        romptr = SISGETROMW(0x1a2);
  }
  return romptr;
}
static unsigned short
GetTVromptr(struct SiS_Private SiS_Pr)
{
  unsigned char  ROMAddr = SiS_Pr->VirtualRomBase;
  unsigned short romptr;
  if(SiS_Pr->ChipType < SIS_330) {
     romptr = SISGETROMW(0x114);
     if(SiS_Pr->SiS_VBType & VB_SIS30xBLV)
        romptr = SISGETROMW(0x11a);
  } else {
     romptr = SISGETROMW(0x194);
     if(SiS_Pr->SiS_VBType & VB_SIS30xBLV)
        romptr = SISGETROMW(0x19a);
  }
  return romptr;
}
static unsigned short
GetLCDPtrIndexBIOS(struct SiS_Private SiS_Pr)
{
  unsigned short index;
  if((IS_SIS650) && (SiS_Pr->SiS_VBType & VB_SISLVDS)) {
     if(!(SiS_IsNotM650orLater(SiS_Pr))) {
        if((index = SiS_GetReg(SiS_Pr->SiS_P3d4,0x36) & 0xf0)) {
	   index >>= 4;
	   index = 3;
	   if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) index += 2;
           else if(!(SiS_Pr->SiS_SetFlag & LCDVESATiming)) index++;
           return index;
	}
     }
  }
  index = SiS_GetBIOSLCDResInfo(SiS_Pr) & 0x0F;
  if(SiS_Pr->SiS_LCDResInfo == Panel_1400x1050)      index -= 5;
  if(SiS_Pr->SiS_VBType & VB_SIS301C) {   1.15.20 and later (not VB specific) 
     if(SiS_Pr->SiS_LCDResInfo == Panel_1600x1200) index -= 5;
     if(SiS_Pr->SiS_LCDResInfo == Panel_1280x768) index -= 5;
  } else {
     if(SiS_Pr->SiS_LCDResInfo == Panel_1600x1200) index -= 6;
  }
  index--;
  index = 3;
  if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) index += 2;
  else if(!(SiS_Pr->SiS_SetFlag & LCDVESATiming)) index++;
  return index;
}
static unsigned short
GetLCDPtrIndex(struct SiS_Private SiS_Pr)
{
  unsigned short index;
  index = ((SiS_GetBIOSLCDResInfo(SiS_Pr) & 0x0F) - 1)  3;
  if(SiS_Pr->SiS_LCDInfo & DontExpandLCD)         index += 2;
  else if(!(SiS_Pr->SiS_SetFlag & LCDVESATiming)) index++;
  return index;
}
static unsigned short
GetTVPtrIndex(struct SiS_Private SiS_Pr)
{
  unsigned short index;
  index = 0;
  if(SiS_Pr->SiS_TVMode & TVSetPAL) index = 1;
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) index = 2;
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToYPbPr525750) index = 0;
  index <<= 1;
  if((SiS_Pr->SiS_VBInfo & SetInSlaveMode) &&
     (SiS_Pr->SiS_TVMode & TVSetTVSimuMode)) {
     index++;
  }
  return index;
}
static unsigned int
GetOEMTVPtr661_2_GEN(struct SiS_Private SiS_Pr, int addme)
{
   unsigned short index = 0, temp = 0;
   if(SiS_Pr->SiS_TVMode & TVSetPAL)   index = 1;
   if(SiS_Pr->SiS_TVMode & TVSetPALM)  index = 2;
   if(SiS_Pr->SiS_TVMode & TVSetPALN)  index = 3;
   if(SiS_Pr->SiS_TVMode & TVSetNTSCJ) index = 6;
   if(SiS_Pr->SiS_TVMode & TVSetNTSC1024) {
      index = 4;
      if(SiS_Pr->SiS_TVMode & TVSetPALM)  index++;
      if(SiS_Pr->SiS_TVMode & TVSetNTSCJ) index = 7;
   }
   if(SiS_Pr->SiS_VBType & VB_SIS30xBLV) {
      if((!(SiS_Pr->SiS_VBInfo & SetInSlaveMode)) ||
         (SiS_Pr->SiS_TVMode & TVSetTVSimuMode)) {
	 index += addme;
	 temp++;
      }
      temp += 0x0100;
   }
   return (unsigned int)(index | (temp << 16));
}
static unsigned int
GetOEMTVPtr661_2_OLD(struct SiS_Private SiS_Pr)
{
   return (GetOEMTVPtr661_2_GEN(SiS_Pr, 8));
}
#if 0
static unsigned int
GetOEMTVPtr661_2_NEW(struct SiS_Private SiS_Pr)
{
   return (GetOEMTVPtr661_2_GEN(SiS_Pr, 6));
}
#endif
static int
GetOEMTVPtr661(struct SiS_Private SiS_Pr)
{
   int index = 0;
   if(SiS_Pr->SiS_TVMode & TVSetPAL)          index = 2;
   if(SiS_Pr->SiS_ROMNew) {
      if(SiS_Pr->SiS_TVMode & TVSetYPbPr525i) index = 4;
      if(SiS_Pr->SiS_TVMode & TVSetYPbPr525p) index = 6;
      if(SiS_Pr->SiS_TVMode & TVSetYPbPr750p) index = 8;
      if(SiS_Pr->SiS_TVMode & TVSetHiVision)  index = 10;
   } else {
      if(SiS_Pr->SiS_TVMode & TVSetHiVision)  index = 4;
      if(SiS_Pr->SiS_TVMode & TVSetYPbPr525i) index = 6;
      if(SiS_Pr->SiS_TVMode & TVSetYPbPr525p) index = 8;
      if(SiS_Pr->SiS_TVMode & TVSetYPbPr750p) index = 10;
   }
   if(SiS_Pr->SiS_TVMode & TVSetTVSimuMode) index++;
   return index;
}
static void
SetDelayComp(struct SiS_Private SiS_Pr, unsigned short ModeNo)
{
  unsigned char  ROMAddr = SiS_Pr->VirtualRomBase;
  unsigned short delay=0,index,myindex,temp,romptr=0;
  bool dochiptest = true;
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
     SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x20,0xbf);
  } else {
     SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x35,0x7f);
  }
   Find delay (from ROM, internal tables, PCI subsystem) 
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToRAMDAC) {			 ------------ VGA 
     if((SiS_Pr->SiS_UseROM) && (!(SiS_Pr->SiS_ROMNew))) {
        romptr = GetRAMDACromptr(SiS_Pr);
     }
     if(romptr) delay = ROMAddr[romptr];
     else {
        delay = 0x04;
        if(SiS_Pr->SiS_VBType & VB_SIS30xB) {
	   if(IS_SIS650) {
	      delay = 0x0a;
	   } else if(IS_SIS740) {
	      delay = 0x00;
	   } else {
	      delay = 0x0c;
	   }
	} else if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
           delay = 0x00;
	}
     }
  } else if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD|SetCRT2ToLCDA)) {   ----------	LCDLCDA 
     bool gotitfrompci = false;
      Could we detect a PDC for LCD or did we get a user-defined? If yes, use it 
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
	if(SiS_Pr->PDC != -1) {
           SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2d,0xf0,((SiS_Pr->PDC >> 1) & 0x0f));
	   SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x35,0x7f,((SiS_Pr->PDC & 0x01) << 7));
	   return;
	}
     } else {
	if(SiS_Pr->PDCA != -1) {
	   SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2d,0x0f,((SiS_Pr->PDCA << 3) & 0xf0));
	   SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x20,0xbf,((SiS_Pr->PDCA & 0x01) << 6));
	   return;
	}
     }
      Custom Panel? 
     if(SiS_Pr->SiS_LCDResInfo == Panel_Custom) {
        if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
	   delay = 0x00;
	   if((SiS_Pr->PanelXRes <= 1280) && (SiS_Pr->PanelYRes <= 1024)) {
	      delay = 0x20;
	   }
	   SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2d,0x0f,delay);
	} else {
	   delay = 0x0c;
	   if(SiS_Pr->SiS_VBType & VB_SIS301C) {
	      delay = 0x03;
	      if((SiS_Pr->PanelXRes > 1280) && (SiS_Pr->PanelYRes > 1024)) {
	         delay = 0x00;
	      }
	   } else if(SiS_Pr->SiS_VBType & VB_SISLVDS) {
	      if(IS_SIS740) delay = 0x01;
	      else          delay = 0x03;
	   }
	   SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2d,0xf0,delay);
	}
        return;
     }
 This is a piece of typical SiS crap: They code the OEM LCD
     switch(SiS_Pr->SiS_CustomT) {
     case CUT_COMPAQ1280:
     case CUT_COMPAQ12802:
	if(SiS_Pr->SiS_LCDResInfo == Panel_1280x1024) {
	   gotitfrompci = true;
	   dochiptest = false;
	   delay = 0x03;
	}
	break;
     case CUT_CLEVO1400:
     case CUT_CLEVO14002:
	gotitfrompci = true;
	dochiptest = false;
	delay = 0x02;
	break;
     case CUT_CLEVO1024:
     case CUT_CLEVO10242:
        if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768) {
	   gotitfrompci = true;
	   dochiptest = false;
	   delay = 0x33;
	   SiS_SetReg(SiS_Pr->SiS_Part1Port,0x2D,delay);
	   delay &= 0x0f;
	}
	break;
     }
      Could we find it through the PCI ID? If no, use ROM or table 
     if(!gotitfrompci) {
        index = GetLCDPtrIndexBIOS(SiS_Pr);
        myindex = GetLCDPtrIndex(SiS_Pr);
        if(IS_SIS650 && (SiS_Pr->SiS_VBType & VB_SISLVDS)) {
           if(SiS_IsNotM650orLater(SiS_Pr)) {
              if((SiS_Pr->SiS_UseROM) && (!(SiS_Pr->SiS_ROMNew))) {
	          Always use the second pointer on 650; some BIOSes 
                  still carry old 301 data at the first location    
	          romptr = SISGETROMW(0x120);                       
	          if(SiS_Pr->SiS_VBType & VB_SIS302LV)              
	         romptr = SISGETROMW(0x122);
	         if(!romptr) return;
	         delay = ROMAddr[(romptr + index)];
	      } else {
                 delay = SiS310_LCDDelayCompensation_650301LV[myindex];
	      }
          } else {
             delay = SiS310_LCDDelayCompensation_651301LV[myindex];
	     if(SiS_Pr->SiS_VBType & (VB_SIS302LV | VB_SIS302ELV))
	        delay = SiS310_LCDDelayCompensation_651302LV[myindex];
          }
        } else if(SiS_Pr->SiS_UseROM 			      &&
		  (!(SiS_Pr->SiS_ROMNew))		      &&
	          (SiS_Pr->SiS_LCDResInfo != Panel_1280x1024) &&
		  (SiS_Pr->SiS_LCDResInfo != Panel_1280x768)  &&
		  (SiS_Pr->SiS_LCDResInfo != Panel_1280x960)  &&
		  (SiS_Pr->SiS_LCDResInfo != Panel_1600x1200)  &&
		  ((romptr = GetLCDromptr(SiS_Pr)))) {
	    Data for 1280x1024 wrong in 301B BIOS 
	    Data for 1600x1200 wrong in 301C BIOS 
	   delay = ROMAddr[(romptr + index)];
        } else if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
	   if(IS_SIS740) delay = 0x03;
	   else          delay = 0x00;
	} else {
           delay = SiS310_LCDDelayCompensation_301[myindex];
	   if(SiS_Pr->SiS_VBType & VB_SISLVDS) {
	      if(IS_SIS740) delay = 0x01;
	      else if(SiS_Pr->ChipType <= SIS_315PRO) delay = SiS310_LCDDelayCompensation_3xx301LV[myindex];
	      else          delay = SiS310_LCDDelayCompensation_650301LV[myindex];
	   } else if(SiS_Pr->SiS_VBType & VB_SIS301C) {
	      if(IS_SIS740) delay = 0x01;   ? 
	      else          delay = 0x03;
	      if(SiS_Pr->SiS_LCDResInfo == Panel_1600x1200) delay = 0x00;  experience 
	   } else if(SiS_Pr->SiS_VBType & VB_SIS30xB) {
	      if(IS_SIS740) delay = 0x01;
	      else          delay = SiS310_LCDDelayCompensation_3xx301B[myindex];
	   }
        }
     }   got it from PCI 
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
	SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2D,0x0F,((delay << 4) & 0xf0));
	dochiptest = false;
     }
  } else if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {			 ------------ TV 
     index = GetTVPtrIndex(SiS_Pr);
     if(IS_SIS650 && (SiS_Pr->SiS_VBType & VB_SISLVDS)) {
        if(SiS_IsNotM650orLater(SiS_Pr)) {
           if((SiS_Pr->SiS_UseROM) && (!(SiS_Pr->SiS_ROMNew))) {
	       Always use the second pointer on 650; some BIOSes 
               still carry old 301 data at the first location    
               romptr = SISGETROMW(0x114);			   
	       if(SiS_Pr->SiS_VBType & VB_SIS302LV)              
	      romptr = SISGETROMW(0x11a);
	      if(!romptr) return;
	      delay = ROMAddr[romptr + index];
	   } else {
	      delay = SiS310_TVDelayCompensation_301B[index];
	   }
        } else {
           switch(SiS_Pr->SiS_CustomT) {
	   case CUT_COMPAQ1280:
	   case CUT_COMPAQ12802:
	   case CUT_CLEVO1400:
	   case CUT_CLEVO14002:
	      delay = 0x02;
	      dochiptest = false;
	      break;
	   case CUT_CLEVO1024:
	   case CUT_CLEVO10242:
	      delay = 0x03;
	      dochiptest = false;
   	      break;
	   default:
              delay = SiS310_TVDelayCompensation_651301LV[index];
	      if(SiS_Pr->SiS_VBType & VB_SIS302LV) {
	         delay = SiS310_TVDelayCompensation_651302LV[index];
	      }
	   }
        }
     } else if((SiS_Pr->SiS_UseROM) && (!(SiS_Pr->SiS_ROMNew))) {
        romptr = GetTVromptr(SiS_Pr);
	if(!romptr) return;
	delay = ROMAddr[romptr + index];
     } else if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
        delay = SiS310_TVDelayCompensation_LVDS[index];
     } else {
	delay = SiS310_TVDelayCompensation_301[index];
        if(SiS_Pr->SiS_VBType & VB_SIS30xBLV) {
	   if(IS_SIS740) {
	      delay = SiS310_TVDelayCompensation_740301B[index];
	       LV: use 301 data? BIOS bug? 
	   } else {
              delay = SiS310_TVDelayCompensation_301B[index];
	      if(SiS_Pr->SiS_VBType & VB_SIS301C) delay = 0x02;
	   }
	}
     }
     if(SiS_LCDAEnabled(SiS_Pr)) {
	delay &= 0x0f;
	dochiptest = false;
     }
  } else return;
   Write delay 
  if(SiS_Pr->SiS_VBType & VB_SISVB) {
     if(IS_SIS650 && (SiS_Pr->SiS_VBType & VB_SISLVDS) && dochiptest) {
        temp = (SiS_GetReg(SiS_Pr->SiS_P3d4,0x36) & 0xf0) >> 4;
        if(temp == 8) {		 1400x1050 BIOS (COMPAL) 
	   delay &= 0x0f;
	   delay |= 0xb0;
        } else if(temp == 6) {
           delay &= 0x0f;
	   delay |= 0xc0;
        } else if(temp > 7) {	 1280x1024 BIOS (which one?) 
	   delay = 0x35;
        }
        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x2D,delay);
     } else {
        SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2D,0xF0,delay);
     }
  } else {   LVDS 
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
        SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2D,0xF0,delay);
     } else {
        if(IS_SIS650 && (SiS_Pr->SiS_IF_DEF_CH70xx != 0)) {
           delay <<= 4;
           SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2D,0x0F,delay);
        } else {
           SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2D,0xF0,delay);
        }
     }
  }
}
static void
SetAntiFlicker(struct SiS_Private SiS_Pr, unsigned short ModeNo, unsigned short ModeIdIndex)
{
  unsigned char  ROMAddr = SiS_Pr->VirtualRomBase;
  unsigned short index,temp,temp1,romptr=0;
  if(SiS_Pr->SiS_TVMode & (TVSetYPbPr750p|TVSetYPbPr525p)) return;
  if(ModeNo<=0x13)
     index = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].VB_StTVFlickerIndex;
  else
     index = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].VB_ExtTVFlickerIndex;
  temp = GetTVPtrIndex(SiS_Pr);
  temp >>= 1;  	   0: NTSCYPbPr, 1: PAL, 2: HiTV 
  temp1 = temp;
  if(SiS_Pr->SiS_UseROM && (!(SiS_Pr->SiS_ROMNew))) {
     if(SiS_Pr->ChipType >= SIS_661) {
        temp1 = GetOEMTVPtr661(SiS_Pr);
        temp1 >>= 1;
        romptr = SISGETROMW(0x260);
        if(SiS_Pr->ChipType >= SIS_760) {
	   romptr = SISGETROMW(0x360);
	}
     } else if(SiS_Pr->ChipType >= SIS_330) {
        romptr = SISGETROMW(0x192);
     } else {
        romptr = SISGETROMW(0x112);
     }
  }
  if(romptr) {
     temp1 <<= 1;
     temp = ROMAddr[romptr + temp1 + index];
  } else {
     temp = SiS310_TVAntiFlick1[temp][index];
  }
  temp <<= 4;
  SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x0A,0x8f,temp);   index 0A D[6:4] 
}
static void
SetEdgeEnhance(struct SiS_Private SiS_Pr, unsigned short ModeNo,unsigned short ModeIdIndex)
{
  unsigned char  ROMAddr = SiS_Pr->VirtualRomBase;
  unsigned short index,temp,temp1,romptr=0;
  temp = temp1 = GetTVPtrIndex(SiS_Pr) >> 1; 	 0: NTSCYPbPr, 1: PAL, 2: HiTV 
  if(ModeNo <= 0x13)
     index = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].VB_StTVEdgeIndex;
  else
     index = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].VB_ExtTVEdgeIndex;
  if(SiS_Pr->SiS_UseROM && (!(SiS_Pr->SiS_ROMNew))) {
     if(SiS_Pr->ChipType >= SIS_661) {
        romptr = SISGETROMW(0x26c);
        if(SiS_Pr->ChipType >= SIS_760) {
	   romptr = SISGETROMW(0x36c);
	}
	temp1 = GetOEMTVPtr661(SiS_Pr);
        temp1 >>= 1;
     } else if(SiS_Pr->ChipType >= SIS_330) {
        romptr = SISGETROMW(0x1a4);
     } else {
        romptr = SISGETROMW(0x124);
     }
  }
  if(romptr) {
     temp1 <<= 1;
     temp = ROMAddr[romptr + temp1 + index];
  } else {
     temp = SiS310_TVEdge1[temp][index];
  }
  temp <<= 5;
  SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x3A,0x1F,temp);   index 0A D[7:5] 
}
static void
SetYFilter(struct SiS_Private SiS_Pr, unsigned short ModeNo,unsigned short ModeIdIndex)
{
  unsigned short index, temp, i, j;
  if(ModeNo <= 0x13) {
     index = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].VB_StTVYFilterIndex;
  } else {
     index = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].VB_ExtTVYFilterIndex;
  }
  temp = GetTVPtrIndex(SiS_Pr) >> 1;   0: NTSCYPbPr, 1: PAL, 2: HiTV 
  if(SiS_Pr->SiS_TVMode & TVSetNTSCJ)	     temp = 1;   NTSC-J uses PAL 
  else if(SiS_Pr->SiS_TVMode & TVSetPALM)    temp = 3;   PAL-M 
  else if(SiS_Pr->SiS_TVMode & TVSetPALN)    temp = 4;   PAL-N 
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) temp = 1;   HiVision uses PAL 
  if(SiS_Pr->SiS_VBType & VB_SIS30xBLV) {
     for(i=0x35, j=0; i<=0x38; i++, j++) {
        SiS_SetReg(SiS_Pr->SiS_Part2Port,i,SiS310_TVYFilter2[temp][index][j]);
     }
     for(i=0x48; i<=0x4A; i++, j++) {
        SiS_SetReg(SiS_Pr->SiS_Part2Port,i,SiS310_TVYFilter2[temp][index][j]);
     }
  } else {
     for(i=0x35, j=0; i<=0x38; i++, j++) {
        SiS_SetReg(SiS_Pr->SiS_Part2Port,i,SiS310_TVYFilter1[temp][index][j]);
     }
  }
}
static void
SetPhaseIncr(struct SiS_Private SiS_Pr, unsigned short ModeNo, unsigned short ModeIdIndex)
{
  unsigned char  ROMAddr = SiS_Pr->VirtualRomBase;
  unsigned short index,temp,i,j,resinfo,romptr=0;
  unsigned int  lindex;
  if(!(SiS_Pr->SiS_VBInfo & SetCRT2ToTV)) return;
   NTSC-J data not in BIOS, and already set in SetGroup2 
  if(SiS_Pr->SiS_TVMode & TVSetNTSCJ) return;
  if((SiS_Pr->ChipType >= SIS_661) || SiS_Pr->SiS_ROMNew) {
     lindex = GetOEMTVPtr661_2_OLD(SiS_Pr) & 0xffff;
     lindex <<= 2;
     for(j=0, i=0x31; i<=0x34; i++, j++) {
        SiS_SetReg(SiS_Pr->SiS_Part2Port,i,SiS_TVPhase[lindex + j]);
     }
     return;
  }
   PAL-M, PAL-N not in BIOS, and already set in SetGroup2 
  if(SiS_Pr->SiS_TVMode & (TVSetPALM | TVSetPALN)) return;
  if(ModeNo<=0x13) {
     resinfo = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ResInfo;
  } else {
     resinfo = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_RESINFO;
  }
  temp = GetTVPtrIndex(SiS_Pr);
 0: NTSC Graphics, 1: NTSC Text,    2: PAL Graphics,
  if(SiS_Pr->SiS_UseROM) {
     romptr = SISGETROMW(0x116);
     if(SiS_Pr->ChipType >= SIS_330) {
        romptr = SISGETROMW(0x196);
     }
     if(SiS_Pr->SiS_VBType & VB_SIS30xBLV) {
        romptr = SISGETROMW(0x11c);
	if(SiS_Pr->ChipType >= SIS_330) {
	   romptr = SISGETROMW(0x19c);
	}
	if((SiS_Pr->SiS_VBInfo & SetInSlaveMode) && (!(SiS_Pr->SiS_TVMode & TVSetTVSimuMode))) {
	   romptr = SISGETROMW(0x116);
	   if(SiS_Pr->ChipType >= SIS_330) {
              romptr = SISGETROMW(0x196);
           }
	}
     }
  }
  if(romptr) {
     romptr += (temp << 2);
     for(j=0, i=0x31; i<=0x34; i++, j++) {
        SiS_SetReg(SiS_Pr->SiS_Part2Port,i,ROMAddr[romptr + j]);
     }
  } else {
     index = temp % 2;
     temp >>= 1;           0:NTSC, 1:PAL, 2:HiTV 
     for(j=0, i=0x31; i<=0x34; i++, j++) {
        if(!(SiS_Pr->SiS_VBType & VB_SIS30xBLV))
	   SiS_SetReg(SiS_Pr->SiS_Part2Port,i,SiS310_TVPhaseIncr1[temp][index][j]);
        else if((!(SiS_Pr->SiS_VBInfo & SetInSlaveMode)) || (SiS_Pr->SiS_TVMode & TVSetTVSimuMode))
           SiS_SetReg(SiS_Pr->SiS_Part2Port,i,SiS310_TVPhaseIncr2[temp][index][j]);
        else
           SiS_SetReg(SiS_Pr->SiS_Part2Port,i,SiS310_TVPhaseIncr1[temp][index][j]);
     }
  }
  if((SiS_Pr->SiS_VBType & VB_SIS30xBLV) && (!(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision))) {
     if((!(SiS_Pr->SiS_TVMode & (TVSetPAL | TVSetYPbPr525p | TVSetYPbPr750p))) && (ModeNo > 0x13)) {
        if((resinfo == SIS_RI_640x480) ||
	   (resinfo == SIS_RI_800x600)) {
	   SiS_SetReg(SiS_Pr->SiS_Part2Port,0x31,0x21);
	   SiS_SetReg(SiS_Pr->SiS_Part2Port,0x32,0xf0);
	   SiS_SetReg(SiS_Pr->SiS_Part2Port,0x33,0xf5);
	   SiS_SetReg(SiS_Pr->SiS_Part2Port,0x34,0x7f);
	} else if(resinfo == SIS_RI_1024x768) {
	   SiS_SetReg(SiS_Pr->SiS_Part2Port,0x31,0x1e);
	   SiS_SetReg(SiS_Pr->SiS_Part2Port,0x32,0x8b);
	   SiS_SetReg(SiS_Pr->SiS_Part2Port,0x33,0xfb);
	   SiS_SetReg(SiS_Pr->SiS_Part2Port,0x34,0x7b);
	}
     }
  }
}
static void
SetDelayComp661(struct SiS_Private SiS_Pr, unsigned short ModeNo,
                unsigned short ModeIdIndex, unsigned short RTI)
{
   unsigned short delay = 0, romptr = 0, index, lcdpdcindex;
   unsigned char  ROMAddr = SiS_Pr->VirtualRomBase;
   if(!(SiS_Pr->SiS_VBInfo & (SetCRT2ToTV | SetCRT2ToLCD | SetCRT2ToLCDA | SetCRT2ToRAMDAC)))
      return;
    1. New ROM: VGA2 and LCDLCDA-Pass1:1 
    (If a custom mode is used, Pass1:1 is always set; hence we do this:) 
   if(SiS_Pr->SiS_ROMNew) {
      if((SiS_Pr->SiS_VBInfo & SetCRT2ToRAMDAC) 			||
         ((SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) &&
	  (SiS_Pr->SiS_LCDInfo & LCDPass11))) {
         index = 25;
         if(SiS_Pr->UseCustomMode) {
	    index = SiS_Pr->CSRClock;
         } else if(ModeNo > 0x13) {
            index = SiS_GetVCLK2Ptr(SiS_Pr,ModeNo,ModeIdIndex,RTI);
            index = SiS_Pr->SiS_VCLKData[index].CLOCK;
         }
	 if(index < 25) index = 25;
         index = ((index  25) - 1) << 1;
         if((ROMAddr[0x5b] & 0x80) || (SiS_Pr->SiS_VBInfo & (SetCRT2ToRAMDAC | SetCRT2ToLCD))) {
	    index++;
	 }
	 romptr = SISGETROMW(0x104);
         delay = ROMAddr[romptr + index];
         if(SiS_Pr->SiS_VBInfo & (SetCRT2ToRAMDAC | SetCRT2ToLCD)) {
            SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2d,0xf0,((delay >> 1) & 0x0f));
            SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x35,0x7f,((delay & 0x01) << 7));
         } else {
            SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2d,0x0f,((delay << 3) & 0xf0));
	    SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x20,0xbf,((delay & 0x01) << 6));
         }
         return;
      }
   }
    2. Old ROM: VGA2 and LCDLCDA-Pass 1:1 
   if(SiS_Pr->UseCustomMode) delay = 0x04;
   else if(ModeNo <= 0x13)   delay = 0x04;
   else                      delay = (SiS_Pr->SiS_RefIndex[RTI].Ext_PDC >> 4);
   delay |= (delay << 8);
   if(SiS_Pr->ChipType >= XGI_20) {
      delay = 0x0606;
      if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
	 delay = 0x0404;
         if(SiS_Pr->SiS_XGIROM) {
	     index = GetTVPtrIndex(SiS_Pr);
	     if((romptr = SISGETROMW(0x35e))) {
	        delay = (ROMAddr[romptr + index] & 0x0f) << 1;
		delay |= (delay << 8);
	     }
	 }
	 if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) {
	    if(SiS_Pr->ChipType == XGI_40 && SiS_Pr->ChipRevision == 0x02) {
	       delay -= 0x0404;
	    }
	 }
      }
   } else if(SiS_Pr->ChipType >= SIS_340) {
      delay = 0x0606;
      if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
         delay = 0x0404;
      }
       TODO (eventually) 
   } else if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
       3. TV 
      index = GetOEMTVPtr661(SiS_Pr);
      if(SiS_Pr->SiS_ROMNew) {
         romptr = SISGETROMW(0x106);
	 if(SiS_Pr->SiS_VBType & VB_UMC) romptr += 12;
         delay = ROMAddr[romptr + index];
      } else {
         delay = 0x04;
	 if(index > 3) delay = 0;
      }
   } else if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) {
       4. LCD, LCDA (for new ROM only LV and non-Pass 1:1) 
      if( (SiS_Pr->SiS_LCDResInfo != Panel_Custom) &&
          ((romptr = GetLCDStructPtr661_2(SiS_Pr))) ) {
	 lcdpdcindex = (SiS_Pr->SiS_VBType & VB_UMC) ? 14 : 12;
	  For LVDS (and sometimes TMDS), the BIOS must know about the correct value 
	 delay = ROMAddr[romptr + lcdpdcindex + 1];	 LCD  
	 delay |= (ROMAddr[romptr + lcdpdcindex] << 8);	 LCDA 
      } else {
          TMDS: Set our own, since BIOS has no idea 
	  (This is done on >=661 only, since <661 is calling this only for LVDS) 
         if(!(SiS_Pr->SiS_LCDInfo & LCDPass11)) {
	    switch(SiS_Pr->SiS_LCDResInfo) {
	    case Panel_1024x768:  delay = 0x0008; break;
	    case Panel_1280x720:  delay = 0x0004; break;
	    case Panel_1280x768:
	    case Panel_1280x768_2:delay = 0x0004; break;
	    case Panel_1280x800:
	    case Panel_1280x800_2:delay = 0x0004; break;  Verified for 1280x800 
	    case Panel_1280x854:  delay = 0x0004; break;  FIXME 
	    case Panel_1280x1024: delay = 0x1e04; break;
	    case Panel_1400x1050: delay = 0x0004; break;
	    case Panel_1600x1200: delay = 0x0400; break;
	    case Panel_1680x1050: delay = 0x0e04; break;
	    default:
               if((SiS_Pr->PanelXRes <= 1024) && (SiS_Pr->PanelYRes <= 768)) {
	          delay = 0x0008;
	       } else if((SiS_Pr->PanelXRes == 1280) && (SiS_Pr->PanelYRes == 1024)) {
	          delay = 0x1e04;
               } else if((SiS_Pr->PanelXRes <= 1400) && (SiS_Pr->PanelYRes <= 1050)) {
	          delay = 0x0004;
	       } else if((SiS_Pr->PanelXRes <= 1600) && (SiS_Pr->PanelYRes <= 1200)) {
	          delay = 0x0400;
               } else
	          delay = 0x0e04;
	       break;
	    }
         }
	  Override by detected or user-set values 
	  (but only if, for some reason, we can't read value from BIOS) 
         if((SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) && (SiS_Pr->PDC != -1)) {
            delay = SiS_Pr->PDC & 0x1f;
         }
         if((SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) && (SiS_Pr->PDCA != -1)) {
            delay = (SiS_Pr->PDCA & 0x1f) << 8;
         }
      }
   }
   if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
      delay >>= 8;
      SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2d,0x0f,((delay << 3) & 0xf0));
      SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x20,0xbf,((delay & 0x01) << 6));
   } else {
      SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x2d,0xf0,((delay >> 1) & 0x0f));
      SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x35,0x7f,((delay & 0x01) << 7));
   }
}
static void
SetCRT2SyncDither661(struct SiS_Private SiS_Pr, unsigned short ModeNo, unsigned short RTI)
{
   unsigned short infoflag;
   unsigned char  temp;
   if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) {
      if(ModeNo <= 0x13) {
         infoflag = SiS_GetRegByte(SiS_Pr->SiS_P3ca+2);
      } else if(SiS_Pr->UseCustomMode) {
         infoflag = SiS_Pr->CInfoFlag;
      } else {
         infoflag = SiS_Pr->SiS_RefIndex[RTI].Ext_InfoFlag;
      }
      if(!(SiS_Pr->SiS_LCDInfo & LCDPass11)) {
         infoflag = SiS_GetReg(SiS_Pr->SiS_P3d4,0x37);  No longer check D5 
      }
      infoflag &= 0xc0;
      if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
         temp = (infoflag >> 6) | 0x0c;
         if(SiS_Pr->SiS_LCDInfo & LCDRGB18Bit) {
	    temp ^= 0x04;
	    if(SiS_Pr->SiS_ModeType >= Mode24Bpp) temp |= 0x10;
	 }
         SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x1a,0xe0,temp);
      } else {
         temp = 0x30;
         if(SiS_Pr->SiS_LCDInfo & LCDRGB18Bit) temp = 0x20;
         temp |= infoflag;
         SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x19,0x0f,temp);
         temp = 0;
         if(SiS_Pr->SiS_LCDInfo & LCDRGB18Bit) {
	    if(SiS_Pr->SiS_ModeType >= Mode24Bpp) temp |= 0x80;
	 }
         SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x1a,0x7f,temp);
      }
   }
}
static void
SetPanelParms661(struct SiS_Private SiS_Pr)
{
   unsigned char  ROMAddr = SiS_Pr->VirtualRomBase;
   unsigned short romptr, temp1, temp2;
   if(SiS_Pr->SiS_VBType & (VB_SISLVDS | VB_SIS30xC)) {
      SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x24,0x0f);
   }
   if(SiS_Pr->SiS_VBType & VB_SISLVDS) {
      if(SiS_Pr->LVDSHL != -1) {
         SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x24,0xfc,SiS_Pr->LVDSHL);
      }
   }
   if(SiS_Pr->SiS_ROMNew) {
      if((romptr = GetLCDStructPtr661_2(SiS_Pr))) {
         if(SiS_Pr->SiS_VBType & VB_SISLVDS) {
            temp1 = (ROMAddr[romptr] & 0x03) | 0x0c;
	    temp2 = 0xfc;
	    if(SiS_Pr->LVDSHL != -1) {
	      temp1 &= 0xfc;
	      temp2 = 0xf3;
	    }
	    SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x24,temp2,temp1);
         }
	 if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
            temp1 = (ROMAddr[romptr + 1] & 0x80) >> 1;
            SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x0d,0xbf,temp1);
	 }
      }
   }
}
static void
SiS_OEM310Setting(struct SiS_Private SiS_Pr, unsigned short ModeNo, unsigned short ModeIdIndex, unsigned short RRTI)
{
   if((SiS_Pr->SiS_ROMNew) && (SiS_Pr->SiS_VBType & VB_SISLVDS)) {
      SetDelayComp661(SiS_Pr, ModeNo, ModeIdIndex, RRTI);
      if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) {
         SetCRT2SyncDither661(SiS_Pr, ModeNo, RRTI);
         SetPanelParms661(SiS_Pr);
      }
   } else {
      SetDelayComp(SiS_Pr,ModeNo);
   }
   if((SiS_Pr->SiS_VBType & VB_SISVB) && (SiS_Pr->SiS_VBInfo & SetCRT2ToTV)) {
      SetAntiFlicker(SiS_Pr,ModeNo,ModeIdIndex);
      SetPhaseIncr(SiS_Pr,ModeNo,ModeIdIndex);
      SetYFilter(SiS_Pr,ModeNo,ModeIdIndex);
      if(SiS_Pr->SiS_VBType & VB_SIS301) {
         SetEdgeEnhance(SiS_Pr,ModeNo,ModeIdIndex);
      }
   }
}
static void
SiS_OEM661Setting(struct SiS_Private SiS_Pr, unsigned short ModeNo,
			unsigned short ModeIdIndex, unsigned short RRTI)
{
   if(SiS_Pr->SiS_VBType & VB_SISVB) {
      SetDelayComp661(SiS_Pr, ModeNo, ModeIdIndex, RRTI);
      if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) {
         SetCRT2SyncDither661(SiS_Pr, ModeNo, RRTI);
         SetPanelParms661(SiS_Pr);
      }
      if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
         SetPhaseIncr(SiS_Pr, ModeNo, ModeIdIndex);
         SetYFilter(SiS_Pr, ModeNo, ModeIdIndex);
         SetAntiFlicker(SiS_Pr, ModeNo, ModeIdIndex);
         if(SiS_Pr->SiS_VBType & VB_SIS301) {
            SetEdgeEnhance(SiS_Pr, ModeNo, ModeIdIndex);
         }
      }
   }
}
 FinalizeLCD
static void
SiS_FinalizeLCD(struct SiS_Private SiS_Pr, unsigned short ModeNo, unsigned short ModeIdIndex)
{
  unsigned short tempcl,tempch,tempbl,tempbh,tempbx,tempax,temp;
  unsigned short resinfo,modeflag;
  if(!(SiS_Pr->SiS_VBType & VB_SISLVDS)) return;
  if(SiS_Pr->SiS_ROMNew) return;
  if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) {
     if(SiS_Pr->LVDSHL != -1) {
        SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x24,0xfc,SiS_Pr->LVDSHL);
     }
  }
  if(SiS_Pr->SiS_LCDResInfo == Panel_Custom) return;
  if(SiS_Pr->UseCustomMode) return;
  switch(SiS_Pr->SiS_CustomT) {
  case CUT_COMPAQ1280:
  case CUT_COMPAQ12802:
  case CUT_CLEVO1400:
  case CUT_CLEVO14002:
     return;
  }
  if(ModeNo <= 0x13) {
     resinfo = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ResInfo;
     modeflag =  SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
  } else {
     resinfo = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_RESINFO;
     modeflag =  SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
  }
  if(IS_SIS650) {
     if(!(SiS_GetReg(SiS_Pr->SiS_P3d4, 0x5f) & 0xf0)) {
        if(SiS_Pr->SiS_CustomT == CUT_CLEVO1024) {
	   SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x1e,0x02);
	} else {
           SiS_SetRegOR(SiS_Pr->SiS_Part1Port,0x1e,0x03);
	}
     }
  }
  if(SiS_Pr->SiS_CustomT == CUT_CLEVO1024) {
     if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768) {
         Maybe all panels? 
        if(SiS_Pr->LVDSHL == -1) {
           SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x24,0xfc,0x01);
	}
	return;
     }
  }
  if(SiS_Pr->SiS_CustomT == CUT_CLEVO10242) {
     if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) {
        if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768) {
	   if(SiS_Pr->LVDSHL == -1) {
	       Maybe all panels? 
              SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x24,0xfc,0x01);
	   }
	   if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
	      tempch = SiS_GetReg(SiS_Pr->SiS_P3d4,0x36) >> 4;
	      if(tempch == 3) {
	         SiS_SetReg(SiS_Pr->SiS_Part1Port,0x18,0x02);
	         SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1b,0x25);
	         SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1c,0x00);
	         SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1d,0x1b);
	      }
	   }
	   return;
	}
     }
  }
  if(SiS_Pr->SiS_VBInfo & (SetCRT2ToLCD | SetCRT2ToLCDA)) {
     if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768) {
	if(SiS_Pr->SiS_VBType & VB_SISEMI) {
	   SiS_SetReg(SiS_Pr->SiS_Part4Port,0x2a,0x00);
#ifdef SET_EMI
	   SiS_SetRegAND(SiS_Pr->SiS_Part4Port,0x30,0x0c);
#endif
	   SiS_SetReg(SiS_Pr->SiS_Part4Port,0x34,0x10);
	}
     } else if(SiS_Pr->SiS_LCDResInfo == Panel_1280x1024) {
        if(SiS_Pr->LVDSHL == -1) {
            Maybe ACER only? 
           SiS_SetRegANDOR(SiS_Pr->SiS_Part4Port,0x24,0xfc,0x01);
	}
     }
     tempch = SiS_GetReg(SiS_Pr->SiS_P3d4,0x36) >> 4;
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCDA) {
	if(SiS_Pr->SiS_LCDResInfo == Panel_1400x1050) {
	   SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1f,0x76);
	} else if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768) {
	   if(tempch == 0x03) {
	      SiS_SetReg(SiS_Pr->SiS_Part1Port,0x18,0x02);
	      SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1b,0x25);
	      SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1c,0x00);
	      SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1d,0x1b);
	   }
	   if(SiS_Pr->Backup && (SiS_Pr->Backup_Mode == ModeNo)) {
	      SiS_SetReg(SiS_Pr->SiS_Part1Port,0x14,SiS_Pr->Backup_14);
	      SiS_SetReg(SiS_Pr->SiS_Part1Port,0x15,SiS_Pr->Backup_15);
	      SiS_SetReg(SiS_Pr->SiS_Part1Port,0x16,SiS_Pr->Backup_16);
	      SiS_SetReg(SiS_Pr->SiS_Part1Port,0x17,SiS_Pr->Backup_17);
	      SiS_SetReg(SiS_Pr->SiS_Part1Port,0x18,SiS_Pr->Backup_18);
	      SiS_SetReg(SiS_Pr->SiS_Part1Port,0x19,SiS_Pr->Backup_19);
	      SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1a,SiS_Pr->Backup_1a);
	      SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1b,SiS_Pr->Backup_1b);
	      SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1c,SiS_Pr->Backup_1c);
	      SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1d,SiS_Pr->Backup_1d);
	   } else if(!(SiS_Pr->SiS_LCDInfo & DontExpandLCD)) {	 1.10.8w 
	      SiS_SetReg(SiS_Pr->SiS_Part1Port,0x14,0x90);
	      if(ModeNo <= 0x13) {
	         SiS_SetReg(SiS_Pr->SiS_Part1Port,0x18,0x11);
		 if((resinfo == 0) || (resinfo == 2)) return;
		 SiS_SetReg(SiS_Pr->SiS_Part1Port,0x18,0x18);
		 if((resinfo == 1) || (resinfo == 3)) return;
	      }
	      SiS_SetReg(SiS_Pr->SiS_Part1Port,0x18,0x02);
	      if((ModeNo > 0x13) && (resinfo == SIS_RI_1024x768)) {
	         SiS_SetReg(SiS_Pr->SiS_Part1Port,0x18,0x02);   1.10.7u 
#if 0
	         tempbx = 806;   0x326 			  other older BIOSes 
		 tempbx--;
		 temp = tempbx & 0xff;
		 SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1b,temp);
		 temp = (tempbx >> 8) & 0x03;
		 SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x1d,0xf8,temp);
#endif
	      }
	   } else if(ModeNo <= 0x13) {
	      if(ModeNo <= 1) {
		 SiS_SetReg(SiS_Pr->SiS_Part1Port,0x18,0x70);
		 SiS_SetReg(SiS_Pr->SiS_Part1Port,0x19,0xff);
		 SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1b,0x48);
		 SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1d,0x12);
	      }
	      if(!(modeflag & HalfDCLK)) {
		 SiS_SetReg(SiS_Pr->SiS_Part1Port,0x14,0x20);
		 SiS_SetReg(SiS_Pr->SiS_Part1Port,0x15,0x1a);
		 SiS_SetReg(SiS_Pr->SiS_Part1Port,0x16,0x28);
		 SiS_SetReg(SiS_Pr->SiS_Part1Port,0x17,0x00);
		 SiS_SetReg(SiS_Pr->SiS_Part1Port,0x18,0x4c);
		 SiS_SetReg(SiS_Pr->SiS_Part1Port,0x19,0xdc);
		 if(ModeNo == 0x12) {
		    switch(tempch) {
		       case 0:
			  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x18,0x95);
			  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x19,0xdc);
			  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1a,0x10);
			  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1b,0x95);
			  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1c,0x48);
			  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1d,0x12);
			  break;
		       case 2:
			  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x18,0x95);
			  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1b,0x48);
			  break;
		       case 3:
			  SiS_SetReg(SiS_Pr->SiS_Part1Port,0x1b,0x95);
			  break;
		    }
		 }
	      }
	   }
	}
     } else {
        tempcl = tempbh = SiS_GetReg(SiS_Pr->SiS_Part2Port,0x01);
	tempcl &= 0x0f;
	tempbh &= 0x70;
	tempbh >>= 4;
	tempbl = SiS_GetReg(SiS_Pr->SiS_Part2Port,0x04);
	tempbx = (tempbh << 8) | tempbl;
	if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768) {
	   if((resinfo == SIS_RI_1024x768) || (!(SiS_Pr->SiS_LCDInfo & DontExpandLCD))) {
	      if(SiS_Pr->SiS_SetFlag & LCDVESATiming) {
	      	 tempbx = 770;
	      } else {
	         if(tempbx > 770) tempbx = 770;
		 if(SiS_Pr->SiS_VGAVDE < 600) {
		    tempax = 768 - SiS_Pr->SiS_VGAVDE;
		    tempax >>= 4;  				  1.10.7w; 1.10.6s: 3;  
		    if(SiS_Pr->SiS_VGAVDE <= 480)  tempax >>= 4;  1.10.7w; 1.10.6s: < 480; >>=1; 
		    tempbx -= tempax;
		 }
	      }
	   } else return;
	}
	temp = tempbx & 0xff;
	SiS_SetReg(SiS_Pr->SiS_Part2Port,0x04,temp);
	temp = ((tempbx & 0xff00) >> 4) | tempcl;
	SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x01,0x80,temp);
     }
  }
}
#endif
  =================  SiS 300 O.E.M. ================== 
#ifdef CONFIG_FB_SIS_300
static void
SetOEMLCDData2(struct SiS_Private SiS_Pr, unsigned short ModeNo,unsigned short ModeIdIndex,
		unsigned short RefTabIndex)
{
  unsigned short crt2crtc=0, modeflag, myindex=0;
  unsigned char  temp;
  int i;
  if(ModeNo <= 0x13) {
     modeflag = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_ModeFlag;
     crt2crtc = SiS_Pr->SiS_SModeIDTable[ModeIdIndex].St_CRT2CRTC;
  } else {
     modeflag = SiS_Pr->SiS_EModeIDTable[ModeIdIndex].Ext_ModeFlag;
     crt2crtc = SiS_Pr->SiS_RefIndex[RefTabIndex].Ext_CRT2CRTC;
  }
  crt2crtc &= 0x3f;
  if(SiS_Pr->SiS_CustomT == CUT_BARCO1024) {
     SiS_SetRegAND(SiS_Pr->SiS_Part1Port,0x13,0xdf);
  }
  if(SiS_Pr->SiS_CustomT == CUT_BARCO1366) {
     if(modeflag & HalfDCLK) myindex = 1;
     if(SiS_Pr->SiS_SetFlag & LowModeTests) {
        for(i=0; i<7; i++) {
           if(barco_p1[myindex][crt2crtc][i][0]) {
	      SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,
	                      barco_p1[myindex][crt2crtc][i][0],
	   	   	      barco_p1[myindex][crt2crtc][i][2],
			      barco_p1[myindex][crt2crtc][i][1]);
	   }
        }
     }
     temp = SiS_GetReg(SiS_Pr->SiS_Part1Port,0x00);
     if(temp & 0x80) {
        temp = SiS_GetReg(SiS_Pr->SiS_Part1Port,0x18);
        temp++;
        SiS_SetReg(SiS_Pr->SiS_Part1Port,0x18,temp);
     }
  }
}
static unsigned short
GetOEMLCDPtr(struct SiS_Private SiS_Pr, int Flag)
{
  unsigned char  ROMAddr = SiS_Pr->VirtualRomBase;
  unsigned short tempbx=0,romptr=0;
  static const unsigned char customtable300[] = {
	0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
	0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
  };
  static const unsigned char customtable630[] = {
	0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
	0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
  };
  if(SiS_Pr->ChipType == SIS_300) {
    tempbx = SiS_GetReg(SiS_Pr->SiS_P3d4,0x36) & 0x0f;
    if(SiS_Pr->SiS_VBType & VB_SIS301) tempbx &= 0x07;
    tempbx -= 2;
    if(!(SiS_Pr->SiS_SetFlag & LCDVESATiming)) tempbx += 4;
    if(SiS_Pr->SiS_LCDResInfo == Panel_1024x768) {
       if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) tempbx += 3;
    }
    if(SiS_Pr->SiS_UseROM) {
       if(ROMAddr[0x235] & 0x80) {
          tempbx = SiS_Pr->SiS_LCDTypeInfo;
          if(Flag) {
	     romptr = SISGETROMW(0x255);
	     if(romptr) tempbx = ROMAddr[romptr + SiS_Pr->SiS_LCDTypeInfo];
	     else       tempbx = customtable300[SiS_Pr->SiS_LCDTypeInfo];
             if(tempbx == 0xFF) return 0xFFFF;
          }
	  tempbx <<= 1;
	  if(!(SiS_Pr->SiS_SetFlag & LCDVESATiming)) tempbx++;
       }
    }
  } else {
    if(Flag) {
       if(SiS_Pr->SiS_UseROM) {
          romptr = SISGETROMW(0x255);
	  if(romptr) tempbx = ROMAddr[romptr + SiS_Pr->SiS_LCDTypeInfo];
	  else 	     tempbx = 0xff;
       } else {
          tempbx = customtable630[SiS_Pr->SiS_LCDTypeInfo];
       }
       if(tempbx == 0xFF) return 0xFFFF;
       tempbx <<= 2;
       if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) tempbx += 2;
       if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) tempbx++;
       return tempbx;
    }
    tempbx = SiS_Pr->SiS_LCDTypeInfo << 2;
    if(SiS_Pr->SiS_VBInfo & SetInSlaveMode) tempbx += 2;
    if(SiS_Pr->SiS_LCDInfo & DontExpandLCD) tempbx++;
  }
  return tempbx;
}
static void
SetOEMLCDDelay(struct SiS_Private SiS_Pr, unsigned short ModeNo,unsigned short ModeIdIndex)
{
  unsigned char  ROMAddr = SiS_Pr->VirtualRomBase;
  unsigned short index,temp,romptr=0;
  if(SiS_Pr->SiS_LCDResInfo == Panel_Custom) return;
  if(SiS_Pr->SiS_UseROM) {
     if(!(ROMAddr[0x237] & 0x01)) return;
     if(!(ROMAddr[0x237] & 0x02)) return;
     romptr = SISGETROMW(0x24b);
  }
 The Panel Compensation Delay should be set according to tables
  if(SiS_Pr->PDC != -1) return;
  temp = GetOEMLCDPtr(SiS_Pr, 0);
  if(SiS_Pr->UseCustomMode)
     index = 0;
  else
     index = SiS_Pr->SiS_VBModeIDTable[ModeIdIndex].VB_LCDDelayIndex;
  if(SiS_Pr->ChipType != SIS_300) {
     if(romptr) {
	romptr += (temp  2);
	romptr = SISGETROMW(romptr);
	romptr += index;
	temp = ROMAddr[romptr];
     } else {
	if(SiS_Pr->SiS_VBType & VB_SISVB) {
    	   temp = SiS300_OEMLCDDelay2[temp][index];
	} else {
           temp = SiS300_OEMLCDDelay3[temp][index];
        }
     }
  } else {
     if(SiS_Pr->SiS_UseROM && (ROMAddr[0x235] & 0x80)) {
	if(romptr) {
	   romptr += (temp  2);
	   romptr = SISGETROMW(romptr);
	   romptr += index;
	   temp = ROMAddr[romptr];
	} else {
	   temp = SiS300_OEMLCDDelay5[temp][index];
	}
     } else {
        if(SiS_Pr->SiS_UseROM) {
	   romptr = ROMAddr[0x249] | (ROMAddr[0x24a] << 8);
	   if(romptr) {
	      romptr += (temp  2);
	      romptr = SISGETROMW(romptr);
	      romptr += index;
	      temp = ROMAddr[romptr];
	   } else {
	      temp = SiS300_OEMLCDDelay4[temp][index];
	   }
	} else {
	   temp = SiS300_OEMLCDDelay4[temp][index];
	}
     }
  }
  temp &= 0x3c;
  SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x13,~0x3C,temp);   index 0A D[6:4] 
}
static void
SetOEMLCDData(struct SiS_Private SiS_Pr, unsigned short ModeNo, unsigned short ModeIdIndex)
{
#if 0   Unfinished; Data table missing 
  unsigned char  ROMAddr = SiS_Pr->VirtualRomBase;
  unsigned short index,temp;
  if((SiS_Pr->SiS_UseROM) {
     if(!(ROMAddr[0x237] & 0x01)) return;
     if(!(ROMAddr[0x237] & 0x04)) return;
      No rom pointer in BIOS header! 
  }
  temp = GetOEMLCDPtr(SiS_Pr, 1);
  if(temp == 0xFFFF) return;
  index = SiS_Pr->SiS_VBModeIDTable[ModeIdIndex]._VB_LCDHIndex;
  for(i=0x14, j=0; i<=0x17; i++, j++) {
      SiS_SetReg(SiS_Pr->SiS_Part1Port,i,SiS300_LCDHData[temp][index][j]);
  }
  SiS_SetRegANDOR(SiS_SiS_Part1Port,0x1a, 0xf8, (SiS300_LCDHData[temp][index][j] & 0x07));
  index = SiS_Pr->SiS_VBModeIDTable[ModeIdIndex]._VB_LCDVIndex;
  SiS_SetReg(SiS_SiS_Part1Port,0x18, SiS300_LCDVData[temp][index][0]);
  SiS_SetRegANDOR(SiS_SiS_Part1Port,0x19, 0xF0, SiS300_LCDVData[temp][index][1]);
  SiS_SetRegANDOR(SiS_SiS_Part1Port,0x1A, 0xC7, (SiS300_LCDVData[temp][index][2] & 0x38));
  for(i=0x1b, j=3; i<=0x1d; i++, j++) {
      SiS_SetReg(SiS_Pr->SiS_Part1Port,i,SiS300_LCDVData[temp][index][j]);
  }
#endif
}
static unsigned short
GetOEMTVPtr(struct SiS_Private SiS_Pr)
{
  unsigned short index;
  index = 0;
  if(!(SiS_Pr->SiS_VBInfo & SetInSlaveMode))  index += 4;
  if(SiS_Pr->SiS_VBType & VB_SISVB) {
     if(SiS_Pr->SiS_VBInfo & SetCRT2ToSCART)  index += 2;
     else if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) index += 3;
     else if(SiS_Pr->SiS_TVMode & TVSetPAL)   index += 1;
  } else {
     if(SiS_Pr->SiS_TVMode & TVSetCHOverScan) index += 2;
     if(SiS_Pr->SiS_TVMode & TVSetPAL)        index += 1;
  }
  return index;
}
static void
SetOEMTVDelay(struct SiS_Private SiS_Pr, unsigned short ModeNo, unsigned short ModeIdIndex)
{
  unsigned char  ROMAddr = SiS_Pr->VirtualRomBase;
  unsigned short index,temp,romptr=0;
  if(SiS_Pr->SiS_UseROM) {
     if(!(ROMAddr[0x238] & 0x01)) return;
     if(!(ROMAddr[0x238] & 0x02)) return;
     romptr = SISGETROMW(0x241);
  }
  temp = GetOEMTVPtr(SiS_Pr);
  index = SiS_Pr->SiS_VBModeIDTable[ModeIdIndex].VB_TVDelayIndex;
  if(romptr) {
     romptr += (temp  2);
     romptr = SISGETROMW(romptr);
     romptr += index;
     temp = ROMAddr[romptr];
  } else {
     if(SiS_Pr->SiS_VBType & VB_SISVB) {
        temp = SiS300_OEMTVDelay301[temp][index];
     } else {
        temp = SiS300_OEMTVDelayLVDS[temp][index];
     }
  }
  temp &= 0x3c;
  SiS_SetRegANDOR(SiS_Pr->SiS_Part1Port,0x13,~0x3C,temp);
}
static void
SetOEMAntiFlicker(struct SiS_Private SiS_Pr, unsigned short ModeNo, unsigned short ModeIdIndex)
{
  unsigned char  ROMAddr = SiS_Pr->VirtualRomBase;
  unsigned short index,temp,romptr=0;
  if(SiS_Pr->SiS_UseROM) {
     if(!(ROMAddr[0x238] & 0x01)) return;
     if(!(ROMAddr[0x238] & 0x04)) return;
     romptr = SISGETROMW(0x243);
  }
  temp = GetOEMTVPtr(SiS_Pr);
  index = SiS_Pr->SiS_VBModeIDTable[ModeIdIndex].VB_TVFlickerIndex;
  if(romptr) {
     romptr += (temp  2);
     romptr = SISGETROMW(romptr);
     romptr += index;
     temp = ROMAddr[romptr];
  } else {
     temp = SiS300_OEMTVFlicker[temp][index];
  }
  temp &= 0x70;
  SiS_SetRegANDOR(SiS_Pr->SiS_Part2Port,0x0A,0x8F,temp);
}
static void
SetOEMPhaseIncr(struct SiS_Private SiS_Pr, unsigned short ModeNo,unsigned short ModeIdIndex)
{
  unsigned char  ROMAddr = SiS_Pr->VirtualRomBase;
  unsigned short index,i,j,temp,romptr=0;
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToHiVision) return;
  if(SiS_Pr->SiS_TVMode & (TVSetNTSC1024 | TVSetNTSCJ | TVSetPALM | TVSetPALN)) return;
  if(SiS_Pr->SiS_UseROM) {
     if(!(ROMAddr[0x238] & 0x01)) return;
     if(!(ROMAddr[0x238] & 0x08)) return;
     romptr = SISGETROMW(0x245);
  }
  temp = GetOEMTVPtr(SiS_Pr);
  index = SiS_Pr->SiS_VBModeIDTable[ModeIdIndex].VB_TVPhaseIndex;
  if(SiS_Pr->SiS_VBType & VB_SIS30xBLV) {
     for(i=0x31, j=0; i<=0x34; i++, j++) {
        SiS_SetReg(SiS_Pr->SiS_Part2Port,i,SiS300_Phase2[temp][index][j]);
     }
  } else {
     if(romptr) {
        romptr += (temp  2);
	romptr = SISGETROMW(romptr);
	romptr += (index  4);
        for(i=0x31, j=0; i<=0x34; i++, j++) {
	   SiS_SetReg(SiS_Pr->SiS_Part2Port,i,ROMAddr[romptr + j]);
	}
     } else {
        for(i=0x31, j=0; i<=0x34; i++, j++) {
           SiS_SetReg(SiS_Pr->SiS_Part2Port,i,SiS300_Phase1[temp][index][j]);
	}
     }
  }
}
static void
SetOEMYFilter(struct SiS_Private SiS_Pr, unsigned short ModeNo, unsigned short ModeIdIndex)
{
  unsigned char  ROMAddr = SiS_Pr->VirtualRomBase;
  unsigned short index,temp,i,j,romptr=0;
  if(SiS_Pr->SiS_VBInfo & (SetCRT2ToSCART | SetCRT2ToHiVision | SetCRT2ToYPbPr525750)) return;
  if(SiS_Pr->SiS_UseROM) {
     if(!(ROMAddr[0x238] & 0x01)) return;
     if(!(ROMAddr[0x238] & 0x10)) return;
     romptr = SISGETROMW(0x247);
  }
  temp = GetOEMTVPtr(SiS_Pr);
  if(SiS_Pr->SiS_TVMode & TVSetPALM)      temp = 8;
  else if(SiS_Pr->SiS_TVMode & TVSetPALN) temp = 9;
   NTSCJ uses NTSC filters 
  index = SiS_Pr->SiS_VBModeIDTable[ModeIdIndex].VB_TVYFilterIndex;
  if(SiS_Pr->SiS_VBType & VB_SIS30xBLV) {
      for(i=0x35, j=0; i<=0x38; i++, j++) {
       	SiS_SetReg(SiS_Pr->SiS_Part2Port,i,SiS300_Filter2[temp][index][j]);
      }
      for(i=0x48; i<=0x4A; i++, j++) {
     	SiS_SetReg(SiS_Pr->SiS_Part2Port,i,SiS300_Filter2[temp][index][j]);
      }
  } else {
      if((romptr) && (!(SiS_Pr->SiS_TVMode & (TVSetPALM|TVSetPALN)))) {
         romptr += (temp  2);
	 romptr = SISGETROMW(romptr);
	 romptr += (index  4);
	 for(i=0x35, j=0; i<=0x38; i++, j++) {
       	    SiS_SetReg(SiS_Pr->SiS_Part2Port,i,ROMAddr[romptr + j]);
         }
      } else {
         for(i=0x35, j=0; i<=0x38; i++, j++) {
       	    SiS_SetReg(SiS_Pr->SiS_Part2Port,i,SiS300_Filter1[temp][index][j]);
         }
      }
  }
}
static unsigned short
SiS_SearchVBModeID(struct SiS_Private SiS_Pr, unsigned short ModeNo)
{
   unsigned short ModeIdIndex;
   unsigned char  VGAINFO = SiS_Pr->SiS_VGAINFO;
   if(ModeNo <= 5) ModeNo |= 1;
   for(ModeIdIndex=0; ; ModeIdIndex++) {
      if(SiS_Pr->SiS_VBModeIDTable[ModeIdIndex].ModeID == ModeNo) break;
      if(SiS_Pr->SiS_VBModeIDTable[ModeIdIndex].ModeID == 0xFF)    return 0;
   }
   if(ModeNo != 0x07) {
      if(ModeNo > 0x03) return ModeIdIndex;
      if(VGAINFO & 0x80) return ModeIdIndex;
      ModeIdIndex++;
   }
   if(VGAINFO & 0x10) ModeIdIndex++;    400 lines 
	                                else 350 lines 
   return ModeIdIndex;
}
static void
SiS_OEM300Setting(struct SiS_Private SiS_Pr, unsigned short ModeNo, unsigned short ModeIdIndex,
		  unsigned short RefTableIndex)
{
  unsigned short OEMModeIdIndex = 0;
  if(!SiS_Pr->UseCustomMode) {
     OEMModeIdIndex = SiS_SearchVBModeID(SiS_Pr,&ModeNo);
     if(!(OEMModeIdIndex)) return;
  }
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToLCD) {
     SetOEMLCDDelay(SiS_Pr, ModeNo, OEMModeIdIndex);
     if(SiS_Pr->SiS_IF_DEF_LVDS == 1) {
        SetOEMLCDData(SiS_Pr, ModeNo, OEMModeIdIndex);
     }
  }
  if(SiS_Pr->UseCustomMode) return;
  if(SiS_Pr->SiS_VBInfo & SetCRT2ToTV) {
     SetOEMTVDelay(SiS_Pr, ModeNo,OEMModeIdIndex);
     if(SiS_Pr->SiS_VBType & VB_SISVB) {
        SetOEMAntiFlicker(SiS_Pr, ModeNo, OEMModeIdIndex);
    	SetOEMPhaseIncr(SiS_Pr, ModeNo, OEMModeIdIndex);
       	SetOEMYFilter(SiS_Pr, ModeNo, OEMModeIdIndex);
     }
  }
}
#endif
 SPDX-License-Identifier: GPL-2.0-or-later
  SiS 300540630[S]730[S]
  SiS 315[E|PRO]550[M]65x[M]66x[F|M|G]X[M]74x[GX]330[M]76x[GX]
  XGI V3XTV5V8, Z7
  frame buffer driver for Linux kernels >= 2.4.14 and >=2.6.3
  Linux kernel specific extensions to init.cinit301.c
  Copyright (C) 2001-2005 Thomas Winischhofer, Vienna, Austria.
  Author:	Thomas Winischhofer <thomas@winischhofer.net>
 Wide screen: Ignore rateindex 
 Wide screen: Ignore rateindex 
 Do this? 
 Wide screen: Ignore rateindex 
 $XFree86$ 
 $XdotOrg$ 
  Mode initializing code (CRT1 section) for
  for SiS 300305540630730,
      SiS 315550[M]650651[M]661[FGM]X[M]74x[GX]330[M]76x[GX],
      XGI Volari V3XTV5V8, Z7
  (Universal module for Linux kernel framebuffer and X.orgXFree86 4.x)
  Copyright (C) 2001-2005 by Thomas Winischhofer, Vienna, Austria
  If distributed as part of the Linux kernel, the following license terms
  apply:
   This program is free software; you can redistribute it andor modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the named License,
   or any later version.
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
   GNU General Public License for more details.
   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA
  Otherwise, the following license terms apply:
   Redistribution and use in source and binary forms, with or without
   modification, are permitted provided that the following conditions
   are met:
   1) Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
   2) Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation andor other materials provided with the distribution.
   3) The name of the author may not be used to endorse or promote products
      derived from this software without specific prior written permission.
   THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
   IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
   NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
   THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
   THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  Author: 	Thomas Winischhofer <thomas@winischhofer.net>
  Formerly based on non-functional code-fragements for 300 series by SiS, Inc.
  Used by permission.
         POINTER INITIALIZATION            
 lowest value LVDSLCDA 
 lowest value 301 
 300 
 630, 730 
 not supported on 300 series 
 not supported on 300 series 
 not supported on 300 series 
 not supported on 300 series 
 not supported on 300 series 
 not supported on 300 series 
 not supported on 300 series 
 not supported on 300 series 
 not supported on 300 series 
 not supported on 300 series 
 not supported on 300 series 
 not supported on 300 series 
 340 + XGI 
 761 - preliminary 
 760 
 661741 
 330 
 550, 650, 740 
 315 
            HELPER: Get ModeID             
 OVER1280 only? 
          HELPER: SetReg, GetReg           
      HELPER: DisplayOn, DisplayOff        
        HELPER: Init Port Addresses        
             HELPER: GetSysFlags           
 661 and newer: NEVER write non-zero to SR11[7:4] 
 (SR11 is used for DDC and in enabledisablebridge) 
 You should use the macros, not these flags directly 
         HELPER: Init PCI & Engines        
       Set - PCI LINEAR ADDRESSING ENABLE (0x80)
            - RELOCATED VGA IO ENABLED (0x20)
            - MMIO ENABLED (0x01)
        Leave other bits untouched.
        - Enable 2D (0x40)
         - Enable 3D (0x02)
         - Enable 3D Vertex command fetch (0x10) ?
         - Enable 3D command parser (0x08) ?
 See above 
        - Enable 3D GL transformation engine (0x80)
         - Enable 2D (0x40)
         - Enable 3D vertex command fetch (0x10)
         - Enable 3D command parser (0x08)
         - Enable 3D (0x02)
 See above 
 No 3D engine ! 
        - Enable 2D (0x40)
         - disable 3D
             HELPER: SetLVDSetc            
 Check for SiS30x first 
 Save power status (and error check) - UNUSED 
 Not yet supported 
          HELPER: Enable DSTNFSTN         
            HELPER: Get modeflag           
        HELPER: Determine ROM usage        
 XGI ROMs don't qualify 
 I very much assume 761, 340 and newer will use new layout 
	  300: We check if the code starts below 0x220 by
	   checking the jmp instruction at the beginning
	   of the BIOS image.
	  Sony's VAIO BIOS 1.09 follows the standard, so perhaps
	   the others do as well
 315330 series stick to the standard(s) 
 Find out about LCD data table entry size 
 0.94, 2.05.00+ 
 2.00.00 - 2.02.00 
 2.03.00 - <2.05.00 
 UMC data layout abandoned at 2.05.00 
        HELPER: SET SEGMENT REGISTERS      
             HELPER: GetVBType             
 Check if 30xB DH version (no LCD support, use Panel Link instead) 
 VB_SIS302ELV; 
           HELPER: Check RAM size          
           HELPER: Get DRAM type           
 Do I need this? SR17 seems to be zero anyway... 
 TODO 
 315, 330 
           HELPER: ClearBuffer             
           HELPER: SearchModeID            
 400 lines 
 else 350 lines 
 400 lines  
 else 350 lines  
 else 200 lines  
            HELPER: GetModePtr             
         HELPERS: Get some indices         
           HELPER: LowModeTests            
        HELPER: OPENCLOSE CRT1 CRTC       
 This locks some CRTC registers. We don't want that. 
 Enable CRT1 gating 
           HELPER: GetColorDepth           
 Do NOT check UseCustomMode, will skrew up FIFO 
             HELPER: GetOffset             
                   SEQ                     
 or "display off"  
 determine whether to force x8 dotclock 
                  MISC                     
                  CRTC                     
 Unlock CRTC 
                   ATT                     
	  Pixel shift. If screen on LCD or TV is shifted left or right,
	   this might be the cause.
 315, 330 don't do this 
 reset 3da  
 set index  
 set data   
 reset 3da  
 set index  
 set data   
 Enable Attribute  
                   GRC                     
 256 color disable 
          CLEAR EXTENDED REGISTERS         
                 RESET VCLK                
                  SYNC                     
                  CRTC2                   
 Alternate for 1600x1200 LCDA 
 unlock cr0-7 
               OFFSET & PITCH              
  (partly overruled by SetPitch() in XF86) 
                  VCLK                     
 Alternate for 1600x1200 LCDA 
                  FIFO                     
 Get VCLK  
 Get half colordepth 
 Get MCLK  
 Write CRTCPU threshold low, CRTEngine threshold high 
 What is this? 
 Write CRTCPU threshold high 
 64  bit    BQ=2   
 64  bit    BQ=1   
 128 bit    BQ=2   
 128 bit    BQ=1   
 64  bit    BQ=2   
 64  bit    BQ=1   
 128 bit    BQ=2   
 128 bit    BQ=1   
 Get VCLK  
 Get MCLK  16 
 Get half colordepth 
 Write CRTCPU threshold low, CRTEngine threshold high 
 What is this? 
 Write CRTCPU threshold high (gap = 3) 
 Write foreground and background queue 
 GUI grant timer (PCI config 0xA3) 
 CONFIG_FB_SIS_300 
 disable auto-threshold 
              MODE REGISTERS               
 DAC speed 
 Was == 203 or < 234 which made no sense 
 Disable DPMS 
 data = (Hsync  8) - ((Htotal  8)  2) + 3 
 76x+LFB 
 XGI: Nothing. 
 TODO: Check SiS340 
 TODO: Find out about IOAddress2 
 SR00 - SR04 
 GR00 - GR08 
 SR06 
 SR21 
 MISC 
                 LOAD DAC                  
 301B-DH LCD 
 LCDA 
 Programming CRT1 
 for n < 3 
 for m < 9 
         SET CRT1 REGISTER GROUP           
       HELPER: VIDEO BRIDGE PROG CLK       
 VB programming clock 
 Can we do this on any chipset? 
    HELPER: SET VIDEOCAPTURE REGISTERS    
    SiS65x and XGI set up some sort of "lock mode" for text
     which locks CRT2 in some way to CRT1 timing. Disable
     this here.
 Fiddle with capture regs 
 (BIOS does NOT unlock) 
 Fiddle with video regs 
 !!! This does not support modes < 0x13 !!! 
     HELPER: SET AGP TIMING FOR SiS760     
                 SiSSetMode()              
 Don't use FSTN mode for CRT1 
 Initrestore some VB registers 
 Get VB information (connectors, connected devices) 
 Check memory size (kernel framebuffer driver only) 
 Set mode on CRT1 
 Set mode on CRT2 
 We never lock registers in XF86 
 Fix sync 
 CR0 
 CR1 
 CR2 
 CR3 
 CR4 
 CR5 
 CR6 
 CR7 
 CR9 
 SRE 
 CR10 
 CR11 
 CR12 
 CR15 
 CR16 
 SRA 
 SRB 
 SRC 
 1:1 data: use data set by setcrt1crtc() 
 OK for LCDA, LVDS 
 not 2 ! 
 Stupid hack for 640x400320x200 
 Horizontal display enable end 
 Horizontal retrace (=sync) start 
 Horizontal blank end 
 Horizontal retrace (=sync) end 
 Vertical 
 Vertical display enable end 
 Vertical retrace (=sync) start 
 Vertical blank end 
 Vertical retrace (=sync) end 
	 Terrible hack, but correct CRTC data for
	  these modes only produces a black screen...
	  (HRE is 0, leading into a too large C and
	  a negative D. The CRT controller does not
	  seem to like correcting HRE to 50)
 SPDX-License-Identifier: GPL-2.0-or-later
  SiS 300540630[S]730[S],
  SiS 315[E|PRO]550[M]65x[M]66x[F|M|G]X[M]74x[GX]330[M]76x[GX],
  XGI V3XTV5V8, Z7
  frame buffer driver for Linux kernels >= 2.4.14 and >=2.6.3
  Copyright (C) 2001-2005 Thomas Winischhofer, Vienna, Austria.
  Author:	Thomas Winischhofer <thomas@winischhofer.net>
  Author of (practically wiped) code base:
 		SiS (www.sis.com)
 		Copyright (C) 1999 Silicon Integrated Systems, Inc.
  See http:www.winischhofer.net for more information and updates
  Originally based on the VBE 2.0 compliant graphic boards framebuffer driver,
  which is (c) 1998 Gerd Knorr <kraxel@goldbach.in-berlin.de>
 ---------------------- Prototypes ------------------------- 
 Interface used by the world 
 Interface to the low level console driver 
 fbdev routines 
 Internal heap routines 
 ------------------ Internal helper routines ----------------- 
 ------------- Parameter parsing -------------- 
 We don't know the hardware specs yet and there is no ivideo 
 Clean VESA mode number from other flags 
 We don't know the hardware specs yet and there is no ivideo 
 This does some fuzzy mode naming detection 
 We don't know the hardware specs yet and there is no ivideo 
 We don't know the hardware specs yet and there is no ivideo 
 We don't know the hardware specs yet and there is no ivideo 
 ----------- Various detection routines ----------- 
	    EDID V1 rev 1 and 2: Search for monitor descriptor
	     to extract ranges
	    Otherwise: Get a range from the list of supported
	     Estabished Timings. This is not entirely accurate,
	     because fixed frequency monitors are not supported
	     that way.
 Number of retrys 
 -------------- Mode validation --------------- 
 Skip for 320x200, 320x240, 640x400 
 30 
 31 
 32 
 33 
 on 
 blank 
 no vsync 
 no hsync 
 off 
 ------------- Callbacks from init.cinit301.c  -------------- 
 ----------- FBDev related routines for all series ----------- 
 We need to set pitch for CRT1 if bridge is in slave mode, too 
 We must not set the pitch for CRT2 if bridge is in slave mode 
 >=2.6.12's fbcon clears the screen anyway 
		 If acceleration to be used? Need to know
		  before prepost_set_mode()
 calculate base bpp dep. 
 Slave modes on LVDS and 301B-DH 
 x=x & y=y & c=c -> assume depth change 
 x!=x | y!=y & c=c -> invalid pixclock 
 Sic, sisfb_parm_rate - want to know originally desired rate here 
 Eventually recalculate timing and clock 
 Adapt RGB settings 
 Truncate offsets to maximum if too high 
 Set everything else to 0 
 ----------- FBDev related routines for all series ---------- 
 For communication with X driver 
 ----------------  fb_ops structures ----------------- 
 ---------------- Chip generation dependent routines ---------------- 
 for SiS 540 VGA 
 for SiS 630730 VGA 
 for SiS 550 VGA 
 for SiS 650651740 VGA 
 for SiS 661741660760761 VGA 
 -------------- video bridge device detection --------------- 
 No CRT2 on XGI Z7 
 PALNTSC is stored on SR16 on such machines 
	 Check given parms for hardware compatibility.
	  (Cannot do this in the search_xx routines since we don't
	  know what hardware we are running on then)
 Detectset TV plug & type 
 default: 480i 
 Copy forceCRT1 option to CRT1off if option is given 
 ------------------ Sensing routines ------------------ 
 Determine and detect attached devices on SiS30x 
 LCD detection only for TMDS bridges 
 If LCD already set up by BIOS, skip it 
 Check DDC capabilities 
 Read DDC data 
 Number of retrys 
 No digital device 
 First detailed timing preferred timing? 
 Determine and detect attached TV's on Chrontel 
 Chrontel 700x 
 Set general purpose IO for Chrontel communication 
 See Chrontel TB31 for explanation 
 Read power status 
 Power all outputs 
 Sense connected TV devices 
 Set general purpose IO for Chrontel communication 
 Chrontel 7019 
 No CRT2 on XGI Z7 
 Deprecated 
 Deprecated 
 Deprecated 
 Deprecated 
 Deprecated 
 Deprecated 
 Deprecated 
 Deprecated 
 Deprecated 
 Deprecated 
 Deprecated 
 Deprecated 
 Deprecated 
 Deprecated 
 Deprecated 
 Deprecated 
 Deprecated 
 Deprecated 
 ---------- Engine initialization routines ------------ 
 Initialize command queue (we use MMIO only) 
 BEFORE THIS IS CALLED, THE ENGINES MUST BE SYNC'ED 
			 Must disable dual pipe on XGI_40. Can't do
			  this in MMIO mode, because it requires
			  settingclearing a bit in the MMIO fire trigger
			  register.
 For broken BIOSes: Assume 1024x768, RGB18 
 Save the current PanelDelayCompensation if the LCD is currently used 
 Currently on LCD? If yes, read current pdc 
 Let option override detection 
 Try to find about LCDA 
 Save PDC 
 Currently on LCD? If yes, read current pdc 
 New ROM invalidates other PDC resp. 
 Save EMI 
 Let user override detected PDCs (all bridges) 
 -------------------- Memory manager routines ---------------------- 
	 Calculate heap start = end of memory for console
	 
	  CCCCCCCCDDDDDDDDDDDDDDDDDDDDDDDDDDDDHHHHQQQQQQQQQQ
	  C = console, D = heap, H = HWCursor, Q = cmd-queue
	 
	  On 76x in UMA+LFB mode, the layout is as follows:
	  DDDDDDDDDDDCCCCCCCCCCCCCCCCCCCCCCCCHHHHQQQQQQQQQQQ
	  where the heap is the entire UMA area, eventually
	  into the LFB area if the given mem parameter is
	  higher than the size of the UMA memory.
	 
	  Basically given by "mem" parameter
	 
	  maximum = videosize - cmd_queue - hwcursor
	            (results in a heap of size 0)
	  default = SiS 300: depends on videosize
	            SiS 315330340XGI: 32k below max
 Use default for secondary card for now (FIXME) 
		 For the first card, make this heap the "global" one
		  for old DRM (which could handle only one card)
 sis_free: u32 because "base" is offset inside video ram, can never be >4GB 
 --------------------- SetMode routines ------------------------- 
	 Check if MMIO and engines are enabled,
	  and sync in case they are. Can't use
	  ivideo->accel here, as this might have
	  been changed before this is called.
 MMIO and 2D3D engine enabled? 
			 Don't care about TurboQueue. It's
			  enough to know that the engines
			  are enabled
			 Check that any queue mode is
			  enabled, and that the queue
			  is not in the state of "reset"
 Clear LCDADualEdge and YPbPr bits 
 Clear LCDADualEdge and YPbPr bits 
 Clear PAL-M  PAL-N bits 
 disable CRT2 
 Clear PAL flag (now in CR35) 
 Leave overscan bit alone 
 Use only LCDA and HiVisionYPbPr bits 
 Fix SR11 for 661 and later 
 Not supported by hardware 
 Not supported by hardware 
 Now we actually HAVE changed the display mode 
 We can't switch off CRT1 if bridge is in slave mode 
 Eventually sync engines 
 (Re-)Initialize chip engines 
 arg[0]: 0 = off, 1 = on, 99 = query 
 Query 
 more to come 
 Need to check crt2 type first for fstndstn 
	 First, try the official pci ROM functions (except
	  on integrated chipsets which have no ROM).
 Otherwise do it the conventional way. 
 Channel A 128bit 
 Channel B 64bit 
 32bit 
 Rank No 
 Test 
 Test 
 Write data 
 Read data 
 Assume 125Mhz MCLK 
 Assume 125Mhz ECLK 
 DAC speed 
 DDC, power save 
 Ram type (assuming 0, BIOS 0xa5 step 8) 
 ---- 
 DAC pedestal (BIOS 0xe5) 
 linear & relocated io & disable a0000 
 unlock crt2 
 Lock CRT2 
 ? 
 Need to map max FB size for finding out about RAM size 
 ? 
 8MB, 64bit default 
 PCI 
 AGP 
 Sense CRT1 
 Set default mode, don't clear screen 
 Display off 
 Save mode number in CR34 
 Let everyone know what the current mode is 
 TODO 
 Enable linear mode, disable 0xa0000 address decoding 
	 We disable a0000 address decoding, because
	  - if running on x86, if the card is disabled, it means
	    that another card is in the system. We don't want
	    to interphere with that primary card's textmode.
	  - if running on non-x86, there usually is no VGA window
	    at a0000.
 Need to map max FB size for finding out about RAM size 
 TODO 
 Non-interleaving 
 No tiling 
 Single 3216 
 Dual 168 
 XGI_40 
 DDRII 
 DDR 
 ! 
 EMRS2 
 EMRS3 
 EMRS1 
 MRS1 
 MRS1 
 DDR2 dual frequency mode 
 GPIO control 
 GPIOH EN 
 GPIOH 
 VGA enable 
 Misc 
 Unlock SR 
 Clear some regs 
 PCI linear mode, RelIO enabled, A0000 decoding disabled 
 40 and 20? 
 =0x28 Z7 ? 
				 TODO: set CR5f &0xf1 | 0x01 for version 6570
				  of nforce 2 ROM
	 RAM type:
	 
	  0 == DDR1, 1 == DDR2, 2..7 == reserved?
	 
	  The code seems to written so that regb should equal ramtype,
	  however, so far it has been hardcoded to 0. Enable other values only
	  on XGI Z9, as it passes the POST, and add a warning for others.
 reg = 0x00; 
 DDR2 
 DDR1 
 SiS_SetReg(SISSR, 0x16, 0x0c);  
 ! 
 RAM size 
 ! 
 Set default mode, don't clear screen 
 Disable read-cache 
 Enable read-cache 
 Sense CRT1 
 Set default mode, don't clear screen 
 Display off 
 Save mode number in CR34 
 Let everyone know what the current mode is 
 pdc(a), scalelcd, special timing, lvdshl handled below 
 Patch special cases 
 ivideo->chip is ok 
 Find PCI systems for ChrontelGPIO communication setup 
 Find out about current video mode 
 Search and copy ROM image 
 Find systems for special custom timing 
 Check if our Z7 chip is actually Z9 
 GPIOG EN 
 GPIOG 
 POST card in case this has not been done by the BIOS 
			if((ivideo->chip == SIS_315H)   ||
			   (ivideo->chip == SIS_315)    ||
			   (ivideo->chip == SIS_315PRO) ||
			   (ivideo->chip == SIS_330)) {
				sisfb_post_sis315330(pdev);
 Find out about RAM size 
 Enable PCI addressing and MMIO 
 Enable PCI_LINEAR_ADDRESSING and MMIO_ENABLE  
 Enable 2D accelerator engine 
 Determine the size of the command queue 
	 Engines are no longer initialized here; this is
	  now done after the first mode-switch (if the
	  submitted var has its acceleration flags set).
 Calculate the base of the (unused) hw cursor 
 Initialize offscreen memory manager 
 Used for clearing the screen only, therefore respect our mem limit 
 Decide on which CRT2 device to use 
				 Chrontel 700x TV detection often unreliable, therefore
				  use a different default order on such machines
 Set up the default var according to chosen default display mode 
 Maximize regardless of sisfb_max at startup 
 Enlist us 
 if mode = "none" 
                PCI DEVICE HANDLING                
 Unmap 
 Release mem regions 
	 If device was disabled when starting, disable
	  it when quitting.
 Unregister the framebuffer 
 OK, our ivideo is gone for good from here. 
	 TODO: Restore the initial mode
	  This sounds easy but is as good as impossible
	  on many machines with SiS chip and video bridge
	  since text modes are always set up differently
	  from machine to machine. Depends on the type
	  of integration between chipset and bridge.
                      MODULE                       
 Need to check crt2 type first for fstndstn 
  MODULE  
 _GPL only for new symbols. 
 SPDX-License-Identifier: GPL-2.0-or-later
  SiS 300540630[S]730[S],
  SiS 315[E|PRO]550[M]650651[M]661[F|M]X740[M]741[GX]330[M]760[GX],
  XGI V3XTV5V8, Z7
  frame buffer driver for Linux kernels >= 2.4.14 and >=2.6.3
  2D acceleration part
  Based on the XFree86X.org driver which is
      Copyright (C) 2001-2005 by Thomas Winischhofer, Vienna, Austria
  Author: Thomas Winischhofer <thomas@winischhofer.net>
 			(see http:www.winischhofer.net
 			for more information and updates)
 dest = 0;            0,      GXclear,        0 
 dest &= src;         DSa,    GXand,          0x1 
 dest = src & ~dest;  SDna,   GXandReverse,   0x2 
 dest = src;          S,      GXcopy,         0x3 
 dest &= ~src;        DSna,   GXandInverted,  0x4 
 dest = dest;         D,      GXnoop,         0x5 
 dest = ^src;         DSx,    GXxor,          0x6 
 dest |= src;         DSo,    GXor,           0x7 
 dest = ~src & ~dest; DSon,   GXnor,          0x8 
 dest ^= ~src ;       DSxn,   GXequiv,        0x9 
 dest = ~dest;        Dn,     GXInvert,       0xA 
 dest = src|~dest ;   SDno,   GXorReverse,    0xB 
 dest = ~src;         Sn,     GXcopyInverted, 0xC 
 dest |= ~src;        DSno,   GXorInverted,   0xD 
 dest = ~src|~dest;   DSan,   GXnand,         0xE 
 dest = 0xFF;         1,      GXset,          0xF 
 same ROP but with Pattern as Source 
 dest = 0;            0,      GXclear,        0 
 dest &= src;         DPa,    GXand,          0x1 
 dest = src & ~dest;  PDna,   GXandReverse,   0x2 
 dest = src;          P,      GXcopy,         0x3 
 dest &= ~src;        DPna,   GXandInverted,  0x4 
 dest = dest;         D,      GXnoop,         0x5 
 dest = ^src;         DPx,    GXxor,          0x6 
 dest |= src;         DPo,    GXor,           0x7 
 dest = ~src & ~dest; DPon,   GXnor,          0x8 
 dest ^= ~src ;       DPxn,   GXequiv,        0x9 
 dest = ~dest;        Dn,     GXInvert,       0xA 
 dest = src|~dest ;   PDno,   GXorReverse,    0xB 
 dest = ~src;         Pn,     GXcopyInverted, 0xC 
 dest |= ~src;        DPno,   GXorInverted,   0xD 
 dest = ~src|~dest;   DPan,   GXnand,         0xE 
 dest = 0xFF;         1,      GXset,          0xF 
 300 series ----------------------------------------------------- 
 315330340 series ---------------------------------------------- 
 Set command - not needed, both 0 
 SiSSetupCMDFlag(BITBLT | SRCVIDEO) 
 The chip is smart enough to know the direction 
	 Although the chip knows the direction to use
	  if the source and destination areas overlap,
	  that logic fails if we fiddle with the bitmap
	  addresses. Therefore, we check if the source
	  and destination blitting areas overlap and
	  adapt the bitmap addresses synchronously
	  if the coordinates exceed the valid range.
	  The the areas do not overlap, we do our
	  normal check.
 --------------------------------------------------------------------- 
 The exported routines 
 Clipping 
 Clipping 
 SPDX-License-Identifier: GPL-2.0-or-later
  Geode GX framebuffer driver.
    Copyright (C) 2006 Arcom Control Systems Ltd.
  This driver assumes that the BIOS has created a virtual PCI device header
  for the video device. The PCI header is assumed to contain the following
  BARs:
     BAR0 - framebuffer memory
     BAR1 - graphics processor registers
     BAR2 - display controller registers
     BAR3 - video processor and flat panel control registers.
  16 MiB of framebuffer memory is assumed to be available.
 Modes relevant to the GX (taken from modedb.c) 
 640x480-60 VESA 
 640x480-75 VESA 
 640x480-85 VESA 
 800x600-60 VESA 
 800x600-75 VESA 
 800x600-85 VESA 
 1024x768-60 VESA 
 1024x768-75 VESA 
 1024x768-85 VESA 
 1280x960-60 VESA 
 1280x960-85 VESA 
 1280x1024-60 VESA 
 1280x1024-75 VESA 
 1280x1024-85 VESA 
 1600x1200-60 VESA 
 1600x1200-75 VESA 
 1600x1200-85 VESA 
 The only mode the DCON has is 1200x900 
 Enough video memory? 
 FIXME: Check timing parameters here? 
 grayscale = 0.30R + 0.59G + 0.11B 
 Truecolor has hardware independent palette 
	 Set the 16MiB aligned base address of the graphics memory region
 No HW acceleration for now. 
 Alloc enough space for the pseudo palette. 
	 there's no point in setting PCI states; we emulate PCI, so
 Figure out if this is a TFT or CRT part 
 Clear the frame buffer of garbage. 
 SPDX-License-Identifier: GPL-2.0-or-later
  driversvideogeodedisplay_gx1.c
    -- Geode GX1 display controller
  Copyright (C) 2005 Arcom Control Systems Ltd.
  Based on AMD's original 2.4 driver:
    Copyright (C) 2004 Advanced Micro Devices, Inc.
 Calculate the total size of both DIMM0 and DIMM1. 
 look at DIMM1 next 
 Unlock the display controller registers. 
 Blank the display and disable the timing generator. 
 Wait for pending memory requests before disabling the FIFO load. 
 Disable FIFO load and compression. 
 Setup DCLK and its divisor. 
 FIXME: may need to divide DCLK by 2 sometimes? 
	 Wait for the clock generatation to settle.  This is needed since
	  some of the register writes that follow require that clock to be
 FIXME: seems a little long 
	
	  Setup new mode.
 Clear all unused feature bits. 
 Set FIFO priority (default 65) and enable. 
 FIXME: increase fifo priority for 1280x1024 modes? 
 FIXME: Set pixel and line double bits if necessary. 
 Framebuffer start offset. 
 Line delta and line buffer length. 
 Output configuration. Enable panel data, set pixel format. 
 Enable timing generator, sync and FP data. 
 Horizontal and vertical timings. 
 Write final register values. 
 delay after TIMING_CFG. FIXME: perhaps a little long 
 Relock display controller registers 
	 FIXME: write line_length and bpp to Graphics Pipeline GP_BLT_STATUS
 Hardware palette is in RGB 6-6-6 format. 
 SPDX-License-Identifier: GPL-2.0-or-later
 Geode LX framebuffer driver
  Copyright (C) 2006-2007, Advanced Micro Devices,Inc.
 TODO
  Support panel scaling
  Add acceleration
  Add support for interlacing (TV out)
  Support compression
 This is the complete list of PLL frequencies that we can set -
  we will choose the closest match to the incoming clock.
  freq is the frequency of the dotclock  1000 (for example,
  24823 = 24.983 Mhz).
  pllval is the corresponding PLL value
 Wait 100us for the PLL to lock 
 Now, loop for the lock bit 
 Clear the reset bit 
 Set the clock based on the frequency specified by the current mode 
 Note:  This assumes that the video is in a quitet state 
 Turn off the VGA and video enable 
 turn off the panel 
 Turn off the display 
 Turn off the TGEN 
 Wait 1000 usecs to ensure that the TGEN is clear 
 Turn off the FIFO loader 
 Lastly, wait for the GP to go idle 
 Set the video request register 
 Set up the polarities 
 Turn the CRT dacs back on 
 Turn the panel on (if it isn't already) 
 The number of pages is (PMAX - PMIN)+1 
 PMAX 
 PMIN 
 The page size is 4k 
 The frame buffer size is reported by a VSM in VSA II 
 Virtual Register Class    = 0x02                     
 VG_MEM_SIZE (1MB units)   = 0x00                     
 Unlock the DC registers 
 Set output mode 
 Clear the various buffers 
 FIXME:  Adjust for panning here 
 FIXME: Add support for interlacing 
 FIXME: Add support for scaling 
 Default scaling params 
 FIXME:  Support compression 
 Set default watermark values 
 Display fifo enable 
 default priority 
 Set the frame dirty mode 
 Enable video data 
 Enable graphics 
 Turn on the timing generator 
 Update timings immediately 
 Palette bypass in > 8 bpp modes 
 Always center the display 
 Set the current BPP mode 
 Now - set up the timings 
 And re-enable the graphics output 
 Write the two main configuration registers 
 Lock the DC registers 
 Hardware palette is in RGB 8-8-8 format. 
 CRT power saving modes. 
 Power onoff flat panel 
 wait for the BLT engine to stop being busy 
 save MSRs 
 save registers 
 save the display controller palette 
 save the video processor palette 
 save the horizontal filter coefficients 
 save the vertical filter coefficients 
 save video coeff ram 
 a bunch of registers require GP_RASTER_MODE to be set first 
 FIXME: restore LUT data 
 don't restore these registers 
 unlock the DC; runs first 
 disable all while restoring 
 set all ram to dirty 
 don't restore these registers 
 restore the palette 
 restore the horizontal filter coefficients 
 restore the vertical filter coefficients 
 case VP_VDC:  
 don't restore these registers 
 restore video processor palette 
 restore video coeff ram 
 Flat Panel 
 don't restore these registers 
 control the panel 
 power on the panel if not already power{ed,ing} on 
 power down the panel if not already power{ed,ing} down 
 turn everything on 
 do this last; it will enable the FIFO load 
 lock the door behind us 
 SPDX-License-Identifier: GPL-2.0-or-later
    Copyright (C) 2007 Advanced Micro Devices, Inc.
    Copyright (C) 2008 Andres Salomon <dilinger@debian.org>
 wait for the BLT engine to stop being busy 
 save MSRs 
 save registers 
 save the palette 
 wait for the PLL to lock 
 PLL set, unlock 
 don't restore these registers 
 unlock the DC; runs first 
 write without the enables 
 write without the enables 
 don't restore these registers 
 restore the palette 
 don't enable video yet 
 don't enable CRT yet 
 don't restore these registers 
 Flat Panel 
 shut down the engine 
 turn off the flat panel 
 turn off display 
 power on the panel if not already power{ed,ing} on 
 power down the panel if not already power{ed,ing} down 
 turn everything on 
 do this last; it will enable the FIFO load 
 lock the door behind us 
 SPDX-License-Identifier: GPL-2.0-or-later
  driversvideogeodevideo_cs5530.c
    -- CS5530 video device
  Copyright (C) 2005 Arcom Control Systems Ltd.
  Based on AMD's original 2.4 driver:
    Copyright (C) 2004 Advanced Micro Devices, Inc.
  CS5530 PLL table. This maps pixclocks to the appropriate PLL register
  value.
 ps 
  25.1750 MHz 
  28.3220 
  31.5000 
  36.0000 
  37.5000 
  40.0000 
  44.9000 
  49.5000 
  50.0000 
  50.3500 
  54.0000 
  56.2500 
  56.3916 
  56.6444 
  59.0000 
  63.0000 
  65.0000 
  67.5000 
  70.8000 
  72.0000 
  75.0000 
  78.7500 
  80.0000 
  89.8000 
  94.5000 
  99.0000 
 100.0000 
 108.0000 
 112.5000 
 130.0000 
 135.0000 
 157.5000 
 162.0000 
 175.0000 
 189.0000 
 202.0000 
 232.0000 
 Search the table for the closest pixclock. 
 set reset and bypass 
 wait for PLL to settle 
 clear reset 
 clear bypass 
 Clear bits from existing mode. 
 Set default sync skew and power sequence delays.  
 Enable DACs, hsync and vsync for CRTs 
 Enable panel power and data if using a flat panel. 
 Sync polarities. 
 SPDX-License-Identifier: GPL-2.0-or-later
  Geode LX framebuffer driver.
  Copyright (C) 2007 Advanced Micro Devices, Inc.
  Built from gxfb (which is Copyright (C) 2006 Arcom Control Systems Ltd.)
 Most of these modes are sorted in ascending order, but
  since the first entry in this table is the "default" mode,
  we try to make it something sane - 640x480-60 is sane
 640x480-60 
 640x400-70 
 640x480-70 
 640x480-72 
 640x480-75 
 640x480-85 
 640x480-90 
 640x480-100 
 640x480-60 
 800x600-56 
 800x600-60 
 800x600-70 
 800x600-72 
 800x600-75 
 800x600-85 
 800x600-90 
 800x600-100 
 800x600-60 
 1024x768-60 
 1024x768-70 
 1024x768-72 
 1024x768-75 
 1024x768-85 
 1024x768-90 
 1024x768-100 
 1024x768-60 
 1152x864-60 
 1152x864-70 
 1152x864-72 
 1152x864-75 
 1152x864-85 
 1152x864-90 
 1152x864-100 
 1152x864-60 
 1280x1024-60 
 1280x1024-70 
 1280x1024-72 
 1280x1024-75 
 1280x1024-85 
 1280x1024-90 
 1280x1024-100 
 1280x1024-60 
 1600x1200-60 
 1600x1200-70 
 1600x1200-72 
 1600x1200-75 
 1600x1200-85 
 1600x1200-90 
 1600x1200-100 
 1600x1200-60 
 1920x1440-60 
 1920x1440-70 
 1920x1440-72 
 1920x1440-75 
 1920x1440-85 
 The only mode the DCON has is 1200x900 
 Enough video memory? 
 grayscale = 0.30R + 0.59G + 0.11B 
 Truecolor has hardware independent palette 
 No HW acceleration for now. 
 Alloc enough space for the pseudo palette. 
	 there's no point in setting PCI states; we emulate PCI, so
 Set up the desired outputs 
 Set up the mode database 
	 Clear the screen of garbage, unless noclear was specified,
 Set the mode 
 SPDX-License-Identifier: GPL-2.0-or-later
  Geode GX video processor device.
    Copyright (C) 2006 Arcom Control Systems Ltd.
    Portions from AMD's original 2.4 driver:
      Copyright (C) 2004 Advanced Micro Devices, Inc.
  Tables of register settings for various DOTCLKs.
 ps 
  24.9230 
  25.1750 
  28.3220 
  31.5000 
  36.0000 
  37.5000 
  40.0000 
  44.9000 
  49.5000 
  50.0000 
  50.3500 
  54.0000 
  56.2500 
  56.3916 
  56.6444 
  59.0000 
  63.0000 
  65.0000 
  67.5000 
  70.8000 
  72.0000 
  74.4810 
  75.0000 
  78.7500 
  80.0000 
  89.8000 
  94.5000 
  99.0000 
 100.0000 
 108.0000 
 112.5000 
 130.0000 
 135.0000 
 157.5000 
 162.0000 
 172.798  
 175.5000 
 189.0000 
 202.5000 
 229.5000 
  25.1750 
  28.3220 
  31.5000 
  36.0000 
  37.5000 
  40.0000 
  44.9000 
  49.5000 
  50.0000 
  50.3500 
  54.0000 
  56.2500 
  56.3916 
  56.6444 
  59.0000 
  63.0000 
  65.0000 
  67.5000 
  70.8000 
  72.0000 
  75.0000 
  78.7500 
  80.0000 
  89.8000 
  94.5000 
  99.0000 
 100.0000 
 108.0000 
 112.5000 
 130.0000 
 135.0000 
 157.5000 
 162.0000 
 175.5000 
 189.0000 
 202.5000 
 229.5000 
 Rev. 1 Geode GXs use a 14 MHz reference clock instead of 48 MHz. 
 Search the table for the closest pixclock. 
 Program new M, N and P. 
 Program dividers. 
 Clear reset bit to start PLL. 
 Wait for LOCK bit. 
 Set up the DF pad select MSR 
 Turn off the panel 
 Set timing 1 
 Timing 2 
 Set bits that are always on for TFT 
 Configure sync polarity 
  Set the dither control 
 Enable the FP data and power (in case the BIOS didn't) 
 Unblank the panel 
 Write the display configuration 
 Disable hsync and vsync 
 Clear bits from existing mode. 
 Set default sync skew.  
 Enable hsync and vsync. 
 Disable gamma correction 
 Power up the CRT DACs 
		 Only change the sync polarities if we are running
		  in CRT mode.  The FP polarities will be handled in
 Power down the CRT DACs if in FP mode 
 Enable the display logic 
 Set up the DACS to blank normally 
 Enable the external DAC VREF? 
 Set up the flat panel (if it is enabled) 
 CRT power saving modes. 
 Power onoff flat panel. 
 SPDX-License-Identifier: GPL-2.0-or-later
  driversvideogeodegx1fb_core.c
    -- Geode GX1 framebuffer driver
  Copyright (C) 2005 Arcom Control Systems Ltd.
 Modes relevant to the GX1 (taken from modedb.c) 
 640x480-60 VESA 
 640x480-75 VESA 
 640x480-85 VESA 
 800x600-60 VESA 
 800x600-75 VESA 
 800x600-85 VESA 
 1024x768-60 VESA 
 1024x768-75 VESA 
 1024x768-85 VESA 
 1280x960-60 VESA 
 1280x960-85 VESA 
 1280x1024-60 VESA 
 1280x1024-75 VESA 
 1280x1024-85 VESA 
 Maximum resolution is 1280x1024. 
 Only 16 bpp and 8 bpp is supported by the hardware. 
 Enough video memory? 
 FIXME: Check timing parameters here? 
 grayscale = 0.30R + 0.59G + 0.11B 
 Truecolor has hardware independent palette 
 No HW acceleration for now. 
 Alloc enough space for the pseudo palette. 
 CRT and panel options 
 fall back to CRT if no panel is specified 
 GX1 display controller and CS5530 video device 
 Clear the frame buffer of garbage. 
 SPDX-License-Identifier: GPL-2.0-or-later
  Geode GX display controller.
    Copyright (C) 2005 Arcom Control Systems Ltd.
    Portions from AMD's original 2.4 driver:
      Copyright (C) 2004 Advanced Micro Devices, Inc.
 The number of pages is (PMAX - PMIN)+1 
 PMAX 
 PMIN 
 The page size is 4k 
 FB size can be obtained from the VSA II 
 Virtual register class = 0x02 
 VG_MEM_SIZE(512Kb units) = 0x00 
 Must be a multiple of 8 bytes. 
 Unlock the display controller registers. 
 Disable the timing generator. 
 Wait for pending memory requests before disabling the FIFO load. 
 Disable FIFO load and compression. 
 Setup DCLK and its divisor. 
	
	  Setup new mode.
 Clear all unused feature bits. 
 Set FIFO priority (default 65) and enable. 
 FIXME: increase fifo priority for 1280x1024 and higher modes? 
 Framebuffer start offset. 
 Line delta and line buffer length. 
 Enable graphics and video data and unmask address lines. 
 Set pixel format. 
 Enable timing generator. 
 Horizontal and vertical timings. 
 Write final register values. 
 Relock display controller registers 
 Hardware palette is in RGB 8-8-8 format. 
 SPDX-License-Identifier: GPL-2.0-or-later
  Framebuffer driver for TI OMAP boards
  Copyright (C) 2004 Nokia Corporation
  Author: Imre Deak <imre.deak@nokia.com>
  Acknowledgements:
    Alex McMains <aam@ridgerun.com>       - Original driver
    Juha Yrjola <juha.yrjola@nokia.com>   - Original driver and improvements
    Dirk Behme <dirk.behme@de.bosch.com>  - changes for 2.6 kernel API
    Texas Instruments                     - H3 support
 dummy device for clocks 
  ---------------------------------------------------------------------------
  LCD panel
  ---------------------------------------------------------------------------
  ---------------------------------------------------------------------------
  LCD controller and LCD DMA
  ---------------------------------------------------------------------------
  Allocate resources needed for LCD controller and LCD DMA operations. Video
  memory is allocated from system memory according to the virtual display
  size, except if a bigger memory size is specified explicitly as a kernel
  parameter.
 kernelmodule vram parameters override boot tagsboard config 
 12 bpp is packed in 16 bits 
 Must be called with fbdev->rqueue_mutex held. 
  ---------------------------------------------------------------------------
  fbdev framework callbacks and the ioctl interface
  ---------------------------------------------------------------------------
 Called each time the omapfb device is opened 
 Called when the omapfb device is closed. We make sure that any pending
 Store a single color palette entry into a pseudo palette or the hardware
  palette if one is available. For now we support only 16bpp and thus store
  the entry only to the pseudo palette.
  Set fb_info.fix fields and also updates fbdev.
  When calling this fb_info.var must be set up already.
 12bpp is stored in 16 bits 
  Check the values in var against our capabilities and in case of out of
  bound values try to adjust them.
 Try to keep yres_virtual first 
 Still doesn't fit. Shrink yres_virtual too 
 Recheck this, as the virtual size changed. 
 pixclock in ps, the rest in pixclock 
 TODO: get these from panel->config 
  Set new x,y offsets in the virtual display for the visible area and switch
  to the new mode.
 Set mirror to vertical axis and switch to the new mode. 
  Check values in var, try to adjust them in case of out of bound values if
  possible, or return error.
  Switch to a new mode. The parameters for it has been check already by
  omapfb_check_var.
		
		  This plane's memory was freed, can't enable it
		  until it's reallocated.
		
		  size == 0 is a special case, for which we
		  don't check  adjust the screen parameters.
		  This isn't a problem since the plane can't
		  be reenabled unless its size is > 0.
 Revert changes. 
				
				  Set these explicitly to indicate that the
				  plane memory is dealloce'd, the other
				  screen parameters in var  fix are invalid.
 no client registered yet 
 For lcd testing 
  Ioctl interface. Part of the kernel mode frame buffer API is duplicated
  here to be accessible by user mode code.
  Callback table for the frame buffer framework. Some of these pointers
  will be changed according to the current setting of fb_info->accel_flags.
  ---------------------------------------------------------------------------
  Sysfs interface
  ---------------------------------------------------------------------------
 omapfbX sysfs entries 
 panel sysfs entries 
 ctrl sysfs entries 
  ---------------------------------------------------------------------------
  LDM callbacks
  ---------------------------------------------------------------------------
 Initialize system fb_info object and set the default video mode.
  The frame buffer memory already allocated by lcddma_init
 Release the fb_info object 
  Free driver resources. Can be called to rollback an aborted initialization
  sequence.
 nothing to free 
  Called by LDM binding to probe and attach a new device.
  Initialization sequence:
    1. allocate system omapfb_device structure
    2. select controller type according to platform configuration
       init LCD panel
    3. init LCD controller and LCD DMA
    4. init system fb_info structure for all planes
    5. setup video mode for first plane and enable it
    6. enable LCD panel
    7. register sysfs attributes
    OMAPFB_ACTIVE: register system fb_info structure for all planes
 Set DMA priority for EMIFF access to highest 
 GFX plane is enabled by default 
 Delay actual initialization until the LCD is registered 
 Called when the device is being detached from the driver 
 FIXME: wait till completion of pending events 
 PM suspend 
 PM resume 
 Process kernel command line parameters 
 Register both the driver and the device 
 Register the driver with LDM 
 SPDX-License-Identifier: GPL-2.0-or-later
  LCD panel support for the Palm Zire71
  Original version : Romain Goyet
  Current version : Laurent Gonzalez
  Modified for zire71 : Marek Vasut
 SPDX-License-Identifier: GPL-2.0-or-later
  File: driversvideoomaplcd-htcherald.c
  LCD panel support for the HTC Herald
  Copyright (C) 2009 Cory Maccarrone <darkstar6262@gmail.com>
  Copyright (C) 2009 Wing Linux
  Based on the lcd_htcwizard.c file from the linwizard project:
  Copyright (C) linwizard.sourceforge.net
  Author: Angelo Arrifano <miknix@gmail.com>
  Based on lcd_h4 by Imre Deak <imre.deak@nokia.com>
 Found on WIZ200 (miknix) and some HERA110 models (darkstar62) 
 15 
 SPDX-License-Identifier: GPL-2.0-or-later
  OMAP1 internal LCD controller
  Copyright (C) 2004 Nokia Corporation
  Author: Imre Deak <imre.deak@nokia.com>
 enabled IRQs 
	
	  Preserve the DONE mask, since we still want to get the
	  final DONE irq. It will be disabled in the IRQ handler.
  Configure the LCD DMA according to the current mode specified by parameters
  in lcdc.fbdev and fbdev->var.
		
		  YUV support is only for external mode when we have the
		  YUV window embedded in a 16bpp frame buffer.
 Set virtual xres elem size 
 Setup transformations 
			
			  Disable IRQ_DONE. The status bit will be cleared
			  only when the controller is reenabled and we don't
			  want to get more interrupts.
	
	  Clear these interrupt status bits.
	  Sync_lost, FUF bits were cleared by disabling the LCD controller
	  LOADED_PALETTE can be cleared this way only in palette only
	  load mode. In other load modes it's cleared by disabling the
	  controller.
  Change to a new video mode. We defer this to a later time to avoid any
  flicker and not to mess up the current LCD DMA context. For this we disable
  the LCD controller, which will generate a DONE irq after the last frame has
  been transferred. Then it'll be safe to reconfigure both the LCD controller
  as well as the LCD DMA.
		 FIXME: other BPPs.
		  bpp1: code  0,     size 256
		  bpp2: code  0x1000 size 256
		  bpp4: code  0x2000 size 256
		  bpp12: code 0x4000 size 32
  Configure the LCD DMA for a palette load operation and do the palette
  downloading synchronously. We don't use the frame+palette load mode of
  the controller, since the palette can always be downloaded separately.
 The controller gets disabled in the irq handler 
 Used only in internal controller mode 
 FIXME: try to adjust logic clock divider as well 
 FIXME:if (machine_is_omap_palmte()) { 
 PalmTE uses alternate TFT setting in 8BPP mode 
	} 
 update panel info with the exact clock 
  Configure the LCD controller, download the color palette and start a looped
  DMA transfer of the frame image data. Called only in internal
  controller mode.
 Setup and start LCD DMA 
 This will start the actual DMA transfer 
 PM code called only in internal controller mode 
	 FIXME:
	  According to errata some platforms have a clock rate limitiation
 SPDX-License-Identifier: GPL-2.0-or-later
  LCD panel support for the TI OMAP H3 board
  Copyright (C) 2004 Nokia Corporation
  Author: Imre Deak <imre.deak@nokia.com>
 GPIO1 and GPIO2 of TPS65010 send LCD_ENBKL and LCD_ENVDD signals 
 GPIO1 and GPIO2 of TPS65010 send LCD_ENBKL and LCD_ENVDD signals 
 SPDX-License-Identifier: GPL-2.0-or-later
  LCD panel support for Palm Tungsten|T
  Current version : Marek Vasut <marek.vasut@gmail.com>
  Modified from lcd_inn1510.c
GPIO11 - backlight
GPIO12 - screen blanking
GPIO13 - screen blanking
 SPDX-License-Identifier: GPL-2.0-or-later
  Epson HWA742 LCD controller driver
  Copyright (C) 2004-2005 Nokia Corporation
  Authors:     Juha Yrjölä   <juha.yrjola@nokia.com>
 	        Imre Deak     <imre.deak@nokia.com>
  YUV support: Jussi Laako   <jussi.laako@nokia.com>
 Reserve 4 request slots for requests in irq context 
	
	  @req_lock: protect request slots pool and its tracking lists
	  @req_sema: counter; slot allocators from task contexts must
	             push it down before acquiring a slot. This
	             guarantees that atomic contexts will always have
	             a minimum of IRQ_REQ_POOL_SIZE slots available.
	 CSOnTime 0, WEOnTime 2 ns, REOnTime 2 ns,
	  AccessTime 2 ns + 12.2 ns (regs),
	  WEOffTime = WEOnTime + 1 ns,
	  REOffTime = REOnTime + 16 ns (regs),
	  CSOffTime = REOffTime + 1 ns
	  ReadCycle = 2ns + 2SYSCLK  (regs),
	  WriteCycle = 2SYSCLK + 2 ns,
	 CSOnTime 0, WEOnTime 2 ns, REOnTime 2 ns,
	  AccessTime 2 ns + 4  SYSCLK + 26 (lut),
	  WEOffTime = WEOnTime + 1 ns,
	  REOffTime = REOnTime + 4SYSCLK + 26 ns (lut),
	  CSOffTime = REOffTime + 1 ns
	  ReadCycle = 2ns + 4SYSCLK + 26 ns (lut),
	  WriteCycle = 2SYSCLK + 2 ns,
	  CSPulseWidth = 10 ns
 Source is the PLL 
 else source is ext clk, or oscillator 
 HZ 
 time to transfer one pixel (16bpp) in ps 
		
		  The external interface might have a rate limitation,
		  if so, we have to maximize our transfer rate.
 ps 
 time to update one line in ps 
		
		  transfer speed too low, we might have to use both
		  HS and VS
 decent transfer speed, we'll always use only VS 
		
		  HS or'ed with VS doesn't work, use the active high
		  TE signal based on HNDP  VNDP
		
		  Use HS or'ed with VS as a TE signal if both are needed
		  or VNDP if only vsync is needed.
 ps 
 ps 
 set VS to 120% of HS to minimize VS detection time 
 minimize HS too 
 Enable sleep mode 
 Disable sleep mode 
 Loop until PLL output is stabilized 
 SPDX-License-Identifier: GPL-2.0-or-later
  OMAP1 Special OptimiSed Screen Interface support
  Copyright (C) 2004-2005 Nokia Corporation
  Author: Juha Yrjölä <juha.yrjola@nokia.com>
 timing for read and write access 
	
	  if last_access is the same as current we don't have to change
	  the timings
	
	  Make sure that after conversion it still holds that:
	  reoff > reon, recyc >= reoff, actim > reon
 reon will be exactly one sossi tick 
 values less then 3 result in the SOSSI block resetting itself 
	
	  access time (data hold time) will be exactly one sossi
	  tick
	
	  Make sure that after conversion it still holds that:
	  weoff > weon, wecyc >= weoff
 weon will be exactly one sossi tick 
 values less then 3 result in the SOSSI block resetting itself 
 TE logic 
 WE 
 CS active low 
 WE 
 CS active low 
 Before reading we must check if some writings are going on 
 no CS on SOSSI, so ignore cson, csoff, cs_pulsewidth 
	
	  We set explicitly the the bus_pick_count as well, although
	  with remappingreordering disabled it will be calculated by HW
	  as (32  bus_pick_width).
 HS or VS 
 VS only 
 CMD#DATA 
 CMD#DATA 
 CMD#DATA 
		
		  Wait for the sync signal and start the transfer only
		  then. We can't seem to be able to use HW sync DMA for
		  this since LCD DMA shows huge latencies, as if it
		  would ignore some of the DMA requests from SoSSI.
 Just start the transfer right away. 
 CMD#DATA 
	
	  We need the parent clock rate, which we might divide further
	  depending on the timing requirements of the controller. See
	  _set_timings.
 Reset and enable the SoSSI module 
 DMACK_REQ 
 Enable and reset the SoSSI block 
 Take SoSSI out of reset 
 Component code 
 DMA_MODE 
 REORDERING 
 SPDX-License-Identifier: GPL-2.0-or-later
  LCD panel support for the Palm Tungsten E
  Original version : Romain Goyet <r.goyet@gmail.com>
  Current version : Laurent Gonzalez <palmte.linux@free.fr>
 SPDX-License-Identifier: GPL-2.0-or-later
  Based on driversvideoomaplcd_inn1510.c
  LCD panel support for the Amstrad E3 (Delta) videophone.
  Copyright (C) 2006 Jonathan McDowell <noodles@earth.li>
 LCD class device section 
 omapfb panel section 
 platform driver section 
 SPDX-License-Identifier: GPL-2.0-or-later
  LCD panel support for the TI OMAP1510 Innovator board
  Copyright (C) 2004 Nokia Corporation
  Author: Imre Deak <imre.deak@nokia.com>
 SPDX-License-Identifier: GPL-2.0-or-later
  LCD panel support for the TI OMAP OSK board
  Copyright (C) 2004 Nokia Corporation
  Author: Imre Deak <imre.deak@nokia.com>
  Adapted for OSK by <dirk.behme@de.bosch.com>
 configure PWL pin 
 Enable PWL unit 
 Set PWL level 
 set GPIO2 high (lcd power enabled) 
 Set PWL level to zero 
 Disable PWL unit 
 set GPIO2 low 
 SPDX-License-Identifier: GPL-2.0-or-later
  LCD driver for MIPI DBI-C  DCS compatible LCDs
  Copyright (C) 2006 Nokia Corporation
  Author: Imre Deak <imre.deak@nokia.com>
	unsigned long	hw_guard_end;		 next value of jiffies
						   when we can issue the
 max guard time in jiffies 
			 Arrange for the extra clock before the first
			  data bit.
	
	  When we enable the panel, it seems we _have_ to sleep
	  120 ms before sending the init string. When disabling the
	  panel we'll sleep for the duration of 2 frames, so that the
	  controller can still provide the PCLK,HS,VS signals.
 24 bit -> 16 bit 
	 Each sleep out command will trigger a self diagnostic and flip
	 Bit6 if the test passes.
	
	  A final ESD work might be called before returning,
	  so do this without holding the lock.
 SPDX-License-Identifier: GPL-2.0-or-later
  LCD panel support for the TI OMAP1610 Innovator board
  Copyright (C) 2004 Nokia Corporation
  Author: Imre Deak <imre.deak@nokia.com>
 configure GPIO(14, 15) as outputs 
 set GPIO14 and GPIO15 high 
 set GPIO13, GPIO14 and GPIO15 low 
 SPDX-License-Identifier: GPL-2.0-or-later
  linuxdriversvideommpcommon.c
  This driver is a common framework for Marvell Display Controller
  Copyright (C) 2012 Marvell Technology Group Ltd.
  Authors: Zhou Zhu <zzhu3@marvell.com>
  Get modelist write pointer of modelist.
  It also returns modelist number
  this function fetches modelist from phypanel:
    for HDMIparallel or dsi to hdmi cases, get from phy
    or get from panel
  panel list is used to pair panelpath when pathpanel registered
  path list is used for both buffer driver and platdriver
  plat driver do path registerunregister
  panel driver do panel registerunregister
  buffer driver get registered path
  mmp_register_panel - register panel to panel_list and connect to path
  @p: panel to be registered
  this function provides interface for panel drivers to register panel
  to panel_list and connect to path which matchs panel->plat_path_name.
  no error returns when no matching path is found as path register after
  panel register is permitted.
 add 
 try to register to path 
  mmp_unregister_panel - unregister panel from panel_list and disconnect
  @p: panel to be unregistered
  this function provides interface for panel drivers to unregister panel
  from panel_list and disconnect from path.
  mmp_get_path - get path by name
  @p: path name
  this function checks path name in path_list and return matching path
  return NULL if no matching path
  mmp_register_path - init and register path by path_info
  @p: path info provided by display controller
  this function init by path info and register path to path_list
  this function also try to connect path with panel by name
 path set 
 get panel 
 default op set: if already set by driver, never cover it 
 step3: init overlays 
 add to pathlist 
  mmp_unregister_path - unregister and destroy path
  @p: path to be destroyed.
  this function registers path and destroys it.
 del from pathlist 
 deinit overlays 
 SPDX-License-Identifier: GPL-2.0-or-later
  linuxdriversvideommppaneltpo_tj032md01bw.c
  active panel using spi interface to do init
  Copyright (C) 2012 Marvell Technology Group Ltd.
  Authors:  Guoqing Li <ligq@marvell.com>
           Lisa Du <cldu@marvell.com>
           Zhou Zhu <zzhu3@marvell.com>
 get configs from platform data 
 setup spi related info 
 SPDX-License-Identifier: GPL-2.0-or-later
  linuxdriversvideommpfbmmpfb.c
  Framebuffer driver for Marvell Display controller.
  Copyright (C) 2012 Marvell Technology Group Ltd.
  Authors: Zhou Zhu <zzhu3@marvell.com>
	
	  Pseudocolor mode?
	
	  Check for YUV422PLANAR.
	
	  Check for YUV420PLANAR.
	
	  Check for YUV422PACK.
	
	  Check for 5651555.
	
	  Check for 888A888.
  fb framework has its limitation:
  1. input coloroutput color is not seprated
  2. fb_videomode not include output color
  so for fb usage, we keep a output format which is not changed
   then it's added for mmpmode
 no defined flag in fb, use vmode>>3
	
	  Basic geometry sanity checks.
	
	  Check size of framebuffer.
 TODO 
 set pix_fmt 
 set var according to best video mode
 fix to 2 yres 
 set windowpath according to new videomode 
 set window related info 
 set address always 
 for power on, always set addresswindow again 
 set window related info 
 set address always 
 get videomodes from path 
 put videomode list to info structure 
 set videomode[0] as default mode 
 Initialise static fb parameters.
 For FB framework: Allocate color map and Register framebuffer
 initialize fb 
 init fb 
 get display path by name 
 get overlay 
 set fetch used 
	
	  if get modes success, means not hotplug panels, use caculated buffer
	  or use default size
 fix to 2 yres 
 Allocate framebuffer memory: size = modes xy 4 
 fb power on 
 SPDX-License-Identifier: GPL-2.0-or-later
  linuxdriversvideommphwmmp_spi.c
  using the spi in LCD controler for commands send
  Copyright (C) 2012 Marvell Technology Group Ltd.
  Authors:  Guoqing Li <ligq@marvell.com>
           Lisa Du <cldu@marvell.com>
           Zhou Zhu <zzhu3@marvell.com>
  spi_write - write command to the SPI port
  @spi:  the SPI device.
  @data: can be 81632-bit, MSB justified data to write.
  Wait bus transfer complete IRQ.
  The caller is expected to perform the necessary locking.
  Returns:
    %-ETIMEDOUT	timeout occurred
    0			success
 clear ISR 
 SPI start to send command 
	
	  After set mode it need a time to pull up the spi singals,
	  or it would cause the wrong waveform when send spi command,
	  especially on pxa910h
 set bus num to 5 to avoid conflict with other spi hosts 
 SPDX-License-Identifier: GPL-2.0-or-later
  linuxdriversvideommphwmmp_ctrl.c
  Marvell MMP series Display Controller support
  Copyright (C) 2012 Marvell Technology Group Ltd.
  Authors:  Guoqing Li <ligq@marvell.com>
           Lisa Du <cldu@marvell.com>
           Zhou Zhu <zzhu3@marvell.com>
 clear clock only 
 assert win supported 
 FIXME: assert addr supported 
 FIXME: assert videomode supported 
 polarity of timing signals 
 interface rb_swap setting 
 vsync ctrl 
 set pixclock div 
	
	  LCD Global control(LCD_TOP_CTRL) should be configed before
	  any other LCD registers readwrite, or there maybe issues.
 disable all interrupts 
 Configure IOPAD: should be parallel only 
 Select path clock source 
	
	  Configure default bits: vsync triggers DMA,
	  power save enable, configure alpha registers to
	  display 100% graphics, and set pixel command.
 Configure default register values 
	
	  1.enable multiple burst request in DMA AXI
	  bus arbiter for faster read if not tv path;
	  2.enable horizontal smooth filter;
 init driver data 
 createregister platform device 
 get resources from platform data 
 get configs from platform data 
 allocate 
 map registers.
 request irq 
 get clock 
 init global regs 
 init pathes from machine info and register them 
 get from config and machine info 
 path init 
 SPDX-License-Identifier: GPL-2.0
 Raise SCL and SDA 
 Fix detection using BIOS tables 
&& conn == ddc_dvi &&
 SPDX-License-Identifier: GPL-2.0-only
 $Id: aty128fb.c,v 1.1.1.1.36.1 19991211 09:03:05 Exp $
   linuxdriversvideoaty128fb.c -- Frame buffer device for ATI Rage128
   Copyright (C) 1999-2003, Brad Douglas <brad@neruo.com>
   Copyright (C) 1999, Anthony Tong <atong@uiuc.edu>
                 Ani Joshi  Jeff Garzik
                       - Code cleanup
                 Michel Danzer <michdaen@iiic.ethz.ch>
                       - 1516 bit cleanup
                       - fix panning
                 Benjamin Herrenschmidt
                       - pmac-specific PM stuff
 			- various fixes & cleanups
                 Andreas Hundt <andi@convergence.de>
                       - FB_ACTIVATE fixes
 		  Paul Mackerras <paulus@samba.org>
 			- Convert to new framebuffer API,
 			  fix colormap setting at 16 bitspixel (565)
 		  Paul Mundt 
 		  	- PCI hotplug
 		  Jon Smirl <jonsmirl@yahoo.com>
  			- PCI ID update
  			- replace ROM BIOS search
   Based off of Geert's atyfb.c and vfb.c.
   TODO:
 		- monitor sensing (DDC)
               - virtual display
 		- other platform support (only ppcx86 supported)
 		- hardware cursor support
     Please cc: your patches to brad@neruo.com.
  A special note of gratitude to ATI's devrel for providing documentation,
  example code and hardware. Thanks Nitya.	-atong and brad
 CONFIG_BOOTX_TEXT 
 Debug flag 
 default mode 
 640x480, 60 Hz, Non-Interlaced (25.175 MHz dotclock) 
 CONFIG_PPC_PMAC 
 default to 1024x768 at 75Hz on PPC - this will work
 1024x768, 75 Hz, Non-Interlaced (78.75 MHz dotclock) 
 CONFIG_PPC_PMAC 
 default modedb mode 
 640x480, 60 Hz, Non-Interlaced (25.172 MHz dotclock) 
 Chip generations 
 Must match above enum 
  PCI driver prototypes
 supported Rage128 chipsets 
 packed BIOS settings 
 !CONFIG_PPC 
 onboard memory information 
 various memory configurations 
 PLL constants 
 register values for a specific mode 
 PLL and others      
 remapped mmio       
 onboard video ram   
 onboard mem info    
 free slots in FIFO (64 max) 
 see aty128fb_setcolreg 
 used for TRUECOLOR 
       Internal routines
      Functions to read fromwrite to the mmio registers
     	- endian conversions may possibly be avoided by
         using the other register aperture. TODO.
      Functions to read fromwrite to the pll registers
 return true when the PLL has completed an atomic update 
 should be more than enough
 reset engine?? 
 tell PLL to update 
 write to the scratch register to test rw functionality 
 restore value
  Accelerator engine functions
 use old pio mode 
 3D scaler not spoken here 
 setup engine offset registers 
 setup engine pitch registers 
 set the default scissor register to max dimensions 
 set the drawing controls registers 
 clear the line drawing registers 
 set brush color registers 
 white 
 black 
 set source color registers 
 white 
 black 
 default write mask 
 Wait for all the writes to be completed before returning 
 convert depth values to their register representation 
  PLL informations retreival
 Fix from ATI for problem with Rage128 hardware not leaving ROM enabled 
 Very simple test to make sure it appeared 
 Look for the PCI data to check the ROM type 
	 Check the PCI data signature. If it's wrong, we still assume a normal
	  x86 ROM for now, until I've verified this works everywhere.
	  The goal here is more to phase out Open Firmware images.
	 
	  Currently, we only look at the first PCI data, we could iteratre and
	  deal with them all, and we should use fb_bios_start relative to start
	  of image and not relative start of ROM, but so far, I never found a
	  dual-image ATI card.
	 
	  typedef struct {
	  	u32	signature;	+ 0x00
	  	u16	vendor;		+ 0x04
	  	u16	device;		+ 0x06
	  	u16	reserved_1;	+ 0x08
	  	u16	dlen;		+ 0x0a
	  	u8	drevision;	+ 0x0c
	  	u8	class_hi;	+ 0x0d
	  	u16	class_lo;	+ 0x0e
	  	u16	ilen;		+ 0x10
	  	u16	irevision;	+ 0x12
	  	u8	type;		+ 0x14
	  	u8	indicator;	+ 0x15
	  	u16	reserved_2;	+ 0x16
	  } pci_data_t;
	 I simplified this code as we used to miss the signatures in
	  a lot of case. It's now closer to XFree, we just don't check
	  for signatures at all... Something better will have to be done
	  if we end up having conflicts
 ndef(__sparc__) 
 fill in known card constants if pll_block is not available 
	 instead of a table lookup, assume OF has properly
	  setup the PLL registers and use their values
 from documentation 
 23000 on some cards? 
 same as mclk 
  CRTC programming
 Program the CRTC registers 
 Disable ATOMIC updating.  Is this the right place? 
 input 
	 check for mode eligibility
 convert (and round up) and validate 
 convert depth into ATI register depth 
 convert register depth to bytes per pixel 
 make sure there is enough video ram for the mode 
 check to make sure h_total and v_total are in range 
 0x3f = max hwidth 
 0x1f = max vwidth 
 fill in pixel info 
 fun with masking 
 do conversions 
| LVDS_EN);
 register values for post dividers 
 select PPLL_DIV_3 
 reset PLL 
 write the reference divider 
 write feedback and post dividers 
 no horiz crtc adjustment 
 clear the reset, just in case 
 in .01 MHz 
 convert units to 10 kHz 
 adjust pixel clock if necessary 
 now, find an acceptable divider 
 calculate feedback divider 
 round up to multiple of 8 
  This actually sets the video mode.
 clear all registers that may interfere with mode setting 
 turn off i2c 
 turn off interrupts 
 turn video off 
 make aperture do 32 bit swapping 
 make aperture do 16 bit swapping 
 turn the video back on 
 CONFIG_BOOTX_TEXT 
   encodedecode the User Defined Part of the Display
   Pan or Wrap the Display
 Must be multiple of 8 and 3 
   Helper function to store a single palette register
 vmode and cmode deprecated 
 CONFIG_PPC_PMAC 
  MODULE  
 Backlight 
 Get and convert the value 
 No locking of bl_curve since we read a single value 
 We turn off the LCD completely instead of just dimming the backlight.
  This provides greater power saving and the display is useless without
  backlight anyway
 That one prevents proper CRT output with LCD off 
 Could be extended to Rage128Pro LVDS output too 
 CONFIG_FB_ATY128_BACKLIGHT 
   Initialisation
 CONFIG_PPC_PMAC 
 Get the chip revision 
 range check to make sure 
 fill in info 
 Indicate sleep capability 
#if 0  Disable the early video resume hack for now as it's causing problems,
        among others we now rely on the PCI core restoring the config space
        for us, which isn't the case with that hack, and that code path causes
        various things to be called with interrupts off while they shouldn't.
        I'm leaving the code in as it can be useful for debugging purposes
 Find default mode 
			 iMacs need that resolution
			  PowerMac2,1 first r128 iMacs
			  PowerMac2,2 summer 2000 iMacs
			  PowerMac4,1 january 2001 iMacs "flower power"
 iBook SE 
 PowerBook Firewire (Pismo), iBook Dual USB 
 PowerBook Titanium 
 CONFIG_PPC_PMAC 
	var.accel_flags |= FB_ACCELF_TEXT; FIXME Will add accel later 
 setup the DAC the way we like it 
 turn off bus mastering, just in case 
 success! 
 register a card    ++ajoshi 
 Enable device in PCI config 
 We have the resources. Now virtualize them 
 Virtualize mmio region 
 Grab memory size from the card 
 How does this relate to the resource length from the PCI hardware?
 Virtualize the framebuffer 
 Set up info->fix 
 If we can't test scratch registers, something is seriously wrong 
 __sparc__ 
 CONFIG_PCI 
       Blank the display.
   Set a single color register. The values supplied are already
   rounded down to the hardware's capabilities (according to the
   entries in the var structure). Return != 0 for invalid regno.
		
		  With the 5-6-5 split of bits for RGB at 16 bitspixel, we
		  have 32 slots for R and B values but 64 slots for G values.
		  Thus the R and B values go in one slot but the G value
		  goes in a different slot, and we have to avoid disturbing
		  the other fields in the slots we touch.
 out param: u32	backlight value: 0 to 15 
 in param: u32	backlight value: 0 to 15 
	 Set the chip into the appropriate suspend mode (we use D2,
	  D3 would require a complete re-initialisation of the chip,
	  including PCI config registers, clocks, AGP configuration, ...)
	 
	  For resume, the core will have already brought us back to D0
		 Make sure CRTC2 is reset. Remove that the day we decide to
		  actually use CRTC2 and replace it with real code for disabling
		  the CRTC2 output during sleep
 Set the power management mode to be PCI based 
 Use this magic value for now 
	 We don't do anything but D2, for now we return 0, but
	  we may want to change that. How do we know if the BIOS
	  can properly take care of D3 ? Also, with swsusp, we
	  know we'll be rebooted, ...
	 HACK ALERT ! Once I find a proper way to say to each driver
	  individually what will happen with it's PCI slot, I'll change
	  that. On laptops, the AGP slot is just unclocked, so D2 is
	  expected, while on desktops, the card is powered off
 CONFIG_PPC_PMAC 
 Make sure engine is reset 
 Blank display and LCD 
 Sleep 
	 On powermac, we have hooks to properly suspendresume AGP now,
	  use them here. We'll ultimately need some generic support here,
	  but the generic code isn't quite ready for that yet
 CONFIG_PPC_PMAC 
	 We need a way to make sure the fbdev layer will _not_ touch the
	  framebuffer before we put the chip to suspend state. On 2.4, I
	  used dummy fb ops, 2.5 need proper support for this at the
	  fbdev level
	 PCI state will have been restored by the core, so
	  we should be in D0 now with our config space fully
	  restored
 Wakeup chip 
 Restore display & engine 
 Refresh 
 Unblank 
	 On powermac, we have hooks to properly suspendresume AGP now,
	  use them here. We'll ultimately need some generic support here,
	  but the generic code isn't quite ready for that yet
 CONFIG_PPC_PMAC 
 SPDX-License-Identifier: GPL-2.0
  Try to find monitor informations & EDID data out of the Open Firmware
  device-tree. This also contains some "hacks" to work around a few machine
  models with broken OF probing by hard-coding known EDIDs for some Mac
  laptops internal LVDS panel. (XXX: not done yet)
	 OF says "LCD" for DFP as well, we discriminate from the caller of this
	  function
	 We didn't find the EDID in the leaf node, some cards will actually
	  put EDID1EDID2 in the parent, look for these (typically M6 tipb).
	  single-head cards have hdno == -1 and skip this step
				 Maybe check for LVDS_GEN_CNTL here ? I need to check out
				  what OF does when booting with lid closed
 CONFIG_PPC || CONFIG_SPARC 
	
	  Some panels only work properly with some divider combinations
			 Assume high active syncs for now until ATI tells me more... maybe we
			  can probe register values here ?
 Mark panel infos valid 
 Try to extract the connector informations from the BIOS. This
  doesn't quite work yet, but it's output is still useful for
  debugging
	 Don't do much more at this point but displaying the data if
	  DEBUG is enabled
  Probe physical connection of a CRT. This code comes from XFree
  as well and currently is only implemented for the CRT DAC, the
  code for the TVDAC is commented out in XFree as "non working"
     the monitor either wasn't connected or it is a non-DDC CRT.
      try to probe it
  Parse the "monitor_layout" string if any. This code is mostly
  copied from XFree's radeon driver
  Probe display on both primary and secondary card's connector (if any)
  by various available techniques (i2c, OF device tree, BIOS, ...) and
  try to retrieve EDID. The algorithm here comes from XFree's radeon
  driver
		
		  If user specified a monitor_layout option, use it instead
		  of auto-detecting. Maybe we should only use this argument
		  on the first radeon card probed or provide a way to specify
		  a layout for each card ?
 CONFIG_FB_RADEON_I2C 
		
		  Auto-detecting display type (well... trying to ...)
 DEBUG 
		
		  Old single head cards
 CONFIG_PPC || CONFIG_SPARC 
 CONFIG_FB_RADEON_I2C 
		
		  Check for cards with reversed DACs or TMDS controllers using BIOS
		
		  Probe primary head (DVI or laptop internal panel)
 CONFIG_PPC || CONFIG_SPARC 
 CONFIG_FB_RADEON_I2C 
		
		  Probe secondary head (mostly VGA, can be DVI)
 CONFIG_PPC || defined(CONFIG_SPARC) 
 CONFIG_FB_RADEON_I2C 
		
		  If we only detected port 2, we swap them, if none detected,
		  assume CRT (maybe fallback to old BIOS_SCRATCH stuff ? or look
		  at FP registers ?)
		
		  Deal with reversed TMDS
 Always keep internal TMDS as primary head 
  This function applies any archmodelmachine specific fixups
  to the panel info. It may eventually alter EDID block as
  well or whatever is specific to a given model and not probed
  properly by the default code
	
	  LCD Flat panels should use fixed dividers, we enfore that on
	  PPC only for now...
 CONFIG_PPC 
  Fill up panel infos from a mode definition, either returned by the EDID
  or from the default mode when we can't do any better
	 We use a default of 200ms for the panel power delay, 
	  I need to have a real schedule() instead of mdelay's in the panel code.
	  we might be possible to figure out a better power delay either from
	  MacOS OF tree or from the EDID block (proprietary extensions ?)
  Build the modedb for head 1 (head 2 will come later), check panel infos
  from either BIOS or EDID, and pick up the default mode
	
	  Fill default var first
	
	  First check out what BIOS has to say
	
	  Parse EDID detailed timings and deduce panel infos if any. Right now
	  we only deal with first entry returned by parse_EDID, we may do better
	  some day...
	
	  Do any additional platformarch fixups to the panel infos
	
	  If we have some valid panel infos, we setup the default mode based on
	  those
	
	  Now build modedb from EDID
	
	  Finally, if we don't have panel infos we need to figure some (or
	  we try to read it from card), we try to pick a default mode
	  and create some panel infos. Whatever...
	
	  Apply passed-in mode option if any
 JS20 
 JS21 
 JS12JS21JS22 
 QS21 
 QS22 
	
	  Still no mode, let's pick up a default from the db
 get preferred timing 
 otherwise, get first mode in database 
		 Make sure that whatever mode got selected is actually in the
		  modelist or the kernel may die
  The code below is used to pick up a mode in check_var and
  set_var. It should be made generic
  This is used when looking for modes. We assign a "distance" value
  to a mode in the modedb depending how "close" it is from what we
  are looking for.
  Currently, we don't compare that much, we could do better but
  the current fbcon doesn't quite mind ;)
  This function is called by check_var, it gets the passed in mode parameter, and
  outputs a valid mode matching the passed-in one as closely as possible.
  We need something better ultimately. Things like fbcon basically pass us out
  current mode with xresyres hacked, while things like XFree will actually
  produce a full timing that we should respect as much as possible.
  This is why I added the FB_ACTIVATE_FIND that is used by fbcon. Without this,
  we do a simple spec match, that's all. With it, we actually look for a mode in
  either our monitor modedb or the vesa one if none
 Start with a copy of the requested mode 
 Check if we have a modedb built from EDID 
 Check if we have a scaler allowing any fancy mode 
	 If we have a scaler and are passed FB_ACTIVATE_TEST or
	  FB_ACTIVATE_NOW, just do basic checking and return if the
	  mode match
		 We don't have an RMX, validate timings. If we don't have
	 	  monspecs, we should be paranoid and not let use go above
		  640x480-60, but I assume userland knows what it's doing here
		  (though I may be proven wrong...)
 Now look for a mode in the database 
			 If the new mode is at least as good as the previous one,
			  then it's our new candidate
 If we have a scaler, we allow any mode from the database 
 If we have found a match, return it 
 If we haven't and don't have a scaler, fail 
 SPDX-License-Identifier: GPL-2.0
   ATI Mach64 Hardware Acceleration
       Generic Mach64 routines
 this is for DMA GUI engine! work in progress 
 reset engine 
 enable engine 
 ensure engine is not locked up by clearing any FIFO or 
 HOST errors 
 determine modal information from global mode structure 
 In 24 bpp, the engine is in 8 bpp - this requires that all 
 horizontal coordinates and widths must be adjusted 
 On GTC (RagePro), we need to reset the 3D engine before 
 Reset engine, enable, and clear any engine errors 
 Ensure that vga page pointers are set to zero - the upper 
 page pointers are set to 1 to handle overflows in the 
 lower page 
 ---- Setup standard engine context ---- 
 All GUI registers here are FIFOed - therefore, wait for 
 the appropriate number of empty FIFO entries 
 enable all registers to be loaded for context loads 
 set destination pitch to modal pitch, set offset to zero 
 zero these registers (set them to a known state) 
 set destination drawing attributes 
 set source pitch to modal pitch, set offset to zero 
 set these registers to a known state 
 set source pixel retrieving attributes 
 set host attributes 
 set pattern attributes 
 set scissors to modal size 
 set background color to minimum value (usually BLACK) 
 set foreground color to maximum value (usually WHITE) 
 set write mask to effect all pixel bits 
 set foreground mix to overpaint and background mix to 
 no-effect 
 set primary source pixel channel to foreground color 
 register 
 set compare functionality to false (no-effect on 
 destination) 
 set pixel depth 
 insure engine is idle before leaving 
       Accelerated functions
 perform rectangle fill 
 In 24 bpp, the engine is in 8 bpp - this requires that all 
 horizontal coordinates and widths must be adjusted 
 In 24 bpp, the engine is in 8 bpp - this requires that all 
 horizontal coordinates and widths must be adjusted 
 In 24 bpp, the engine is in 8 bpp - this requires that all 
 horizontal coordinates and widths must be adjusted 
		
		  since Rage 3D IIc we have DP_HOST_TRIPLE_EN bit
		  this hwaccelerated triple has an issue with not aligned data
 manual triple each pixel 
 next bit 
 next byte 
 SPDX-License-Identifier: GPL-2.0-only
  Backlight code for ATI Radeon based graphic cards
  Copyright (c) 2000 Ani Joshi <ajoshi@kernel.crashing.org>
  Copyright (c) 2003 Benjamin Herrenschmidt <benh@kernel.crashing.org>
  Copyright (c) 2006 Michael Hanselmann <linux-kernel@hansmi.ch>
 Get and convert the value 
 No locking of bl_curve since we read a single value 
	 We turn off the LCD completely instead of just dimming the
	  backlight. This provides some greater power saving and the display
	  is useless without backlight anyway.
		 Asic bug, when turning off LVDS_ON, we have to make sure
		   RADEON_PIXCLK_LVDS_ALWAYS_ON bit is off
	 Pardon me for that hack... maybe some day we can figure out in what
	  direction backlight should work on a given panel?
 SPDX-License-Identifier: GPL-2.0
 	driversvideoatyradeon_pm.c
 	Copyright 2003,2004 Ben. Herrenschmidt <benh@kernel.crashing.org>
 	Copyright 2004 Paul Mackerras <paulus@samba.org>
 	This is the power management code for ATI radeon chipsets. It contains
 	some dynamic clock PM enabledisable code similar to what X.org does,
 	some D2-state (APM-style) sleepwakeup code for use on some PowerMacs,
 	and the necessary bits to re-initialize from scratch a few chips found
 	on PowerMacs as well. The later could be extended to more platforms
 	provided the memory controller configuration code be made more generic,
 	and you can get the proper mode register commands for your RAMs.
 	Those things may be found in the BIOS image...
  Workarounds for bugs in PC laptops:
  - enable D2 sleep in some IBM Thinkpads
  - special case for Samsung P35
  Whitelist by subsystem vendordevice because
  its the subsystem vendor's fault!
 (arbitrary) Name 
 Subsystem Vendor ID 
 Subsystem Device ID 
 modify pm_mode 
 changed reinit_func 
 we found a device that requires workaround 
 not found 
 defined(CONFIG_PM) && defined(CONFIG_X86) 
 defined(CONFIG_PM) && defined(CONFIG_X86) 
 RV100 
 R100 
 RV350 (M10M11) 
 for RV350M10M11, no delays are required. 
 Default 
 Force Core Clocks 
	 XFree doesn't do that case, but we had this code from Apple and it
	  seem necessary for proper suspendresume operations
		 Weird  ... X is _un_ forcing clocks here, I think it's
		  doing backward. Imitate it for now...
 Hrm... same shit, X doesn't do that but I have to 
 R100 
 M10M11 
		 Some releases of vbios have set DISABLE_MC_MCLKA
		  and DISABLE_MC_MCLKB bits in the vbios table.  Setting these
		  bits will cause HW hang when reading video memory with dynamic
		  clocking enabled.
 If both bits are set, then check the active channels 
 R300 
 Others 
	 When DRI is enabled, setting DYN_STOP_LAT to zero can cause some R200
	  to lockup randomly, leave them as set by BIOS.
RAGE_6::A11 A12 A12N1 A13, RV250::A11 A12, R300
 RV200::A11 A12 RV250::A11 A12 
 RV200::A11 A12, RV250::A11 A12 
 X doesn't do that ... hrm, we do on mobility && Macs 
 CONFIG_PPC 
 First 
 Set v2clk to 65MHz 
 Force Core Clocks 
 Force Display clocks	
 Switch off LVDS interface 
 Enable System power management 
 because both INPLL and OUTPLL take the same lock, that's why. 
	 BUS_CNTL1__MOBILE_PLATORM_SEL setting is northbridge chipset
	  and radeon chip dependent. Thus we only enable it on Mac for
	  now (until we get more info on how to compute the correct
	  value for various X86 bridges).
 AGP PLL control 
 440BX
 Solano2M 
 ACPI mode 
 because both INPLL and OUTPLL take the same lock, that's why. 
					DISP_PWR_MAN__AUTO_PWRUP_EN|
 D2 
 disable display request & disable display 
 Setting up the DLL range for write 
 Check which channels are enabled 
 Power Up 
 This is the code for the Aluminium PowerBooks M10  iBooks M11 
 Disable refresh 
 Configure and enable M & SPLLs 
 CONFIG_PPC 
 Program the SDRAM 
 Restore memory refresh 
 Here come the desktop RV200 "QW" card 
 Disable refresh 
 Reset memory 
 The M6 
 Disable refresh 
 Reset memory 
 DLL 
 MLCK  YCLK sync 
 Program Mode Register 
 Complete & re-enable refresh 
 And finally, the M7..M9 models, including M9+ (RV280) 
 Disable refresh 
 Reset memory 
 DLL 
 MLCK  YCLK sync 
 M6, M7 and M9 so far ... 
 M9+ (iBook G4) 
 Complete & re-enable refresh 
 Reset the PAD_CTLR_STRENGTH & wait for it to be stable 
 Switch SPLL to PCI source 
 Reconfigure SPLL charge pump, VCO gain, duty cycle 
 Set SPLL feedback divider 
 Power up SPLL 
 Release SPLL reset 
 Select SCLK source  
 Reconfigure MPLL charge pump, VCO gain, duty cycle 
 Set MPLL feedback divider 
 Power up MPLL 
 Un-reset MPLL 
 Select source for MCLK 
	 GACK ! I though we didn't have a DDA on Radeon's anymore
	  here we rewrite with the same value, ... I suppose we clear
	  some bits that are already clear ? Or maybe this 0x2ec
	  register is something new ?
 Spread spectrum PLLL off 
 Spread spectrum disabled 
	 The trace shows read & rewrite of LVDS_PLL_CNTL here with same
	  value, not sure what for...
	 GACK (bis) ! I though we didn't have a DDA on Radeon's anymore
	  here we rewrite with the same value, ... I suppose we clearset
	  some bits that are already clearset ?
 Enable spread spectrum 
 Enable LVDS interface 
 Enable LVDS_PLL 
 The trace reads that one here, waiting for something to settle down ? 
	 Ugh ? SS_TST_DEC is supposed to be a read register in the
	  R300 register spec at least...
	 Reconfigure SPLL charge pump, VCO gain, duty cycle,
	  probably useless since we already did it ...
	 Restore our "reference" PPLL divider set by firmware
	  according to proper spread spectrum calculations
 Switch pixel clock to firmware default div 0 
 Restore a bunch of registers first 
 Hrm... 
 Reset the PAD CTLR 
	 Some PLLs are Read & written identically in the trace here...
	  I suppose it's actually to switch them all off & reset,
	  let's assume off is what we want. I'm just doing that for all major PLLs now.
 Clear tiling, reset swappers 
	 Some black magic with TV_DAC_CNTL, we should restore those from backups
	  rather than hard coding...
 More registers restored 
 Hrmmm ... What is that ? 
 Restore Memory Controller configuration 
 Make sure CRTC's dont touch memory 
 Disable SDRAM refresh 
 Restore XTALIN routing (CLK_PIN_CNTL) 
 Switch MCLK, YCLK and SCLK PLLs to PCI source & force them ON 
 Force all clocks on in SCLK 
 Restore the M_SPLL_REF_FB_DIV, MPLL_AUX_CNTL and SPLL_AUX_CNTL values 
 Now restore the major PLLs settings, keeping them off & reset though 
 Restore MC DLL state and switch it offreset too  
 Switch MDLL off & reset 
	 Setup some black magic bits in PLL_PWRMGT_CNTL. Hrm... we saved
	  0xa1100007... and MacOS writes 0xa1000007 ..
 Restore more stuffs 
 More PLL initial configuration 
 What for ? 
 a guess 
 Now we actually start MCLK and SCLK 
 Full reset sdrams, this also re-inits the MDLL 
 Fill palettes 
 Restore TMDS 
 Set LVDS registers but keep interface & pll down 
 Restore GPIOPAD state 
 write some stuff to the framebuffer... 
 Restore a few more things 
 Take care of spread spectrum & PPLLs now 
	 GRRRR... I can't figure out the proper LVDS power sequence, and the
	  code I have for blankunblank doesn't quite work on some laptop models
	  it seems ... Hrm. What I have here works most of the time ...
0x00f460d6);
0xfecfa666);
0x141555ff);
0xfecfa666);
0x141555ff);
0x00009249);
 Restore a bunch of registers first 
 Reset the PAD CTLR 
	 Some PLLs are Read & written identically in the trace here...
	  I suppose it's actually to switch them all off & reset,
	  let's assume off is what we want. I'm just doing that for all major PLLs now.
 Clear tiling, reset swappers 
	 Some black magic with TV_DAC_CNTL, we should restore those from backups
	  rather than hard coding...
 MacOS sets that to 0 !!! 
 Disable SDRAM refresh 
 Restore XTALIN routing (CLK_PIN_CNTL) 
 Force MCLK to be PCI sourced and forced ON 
 Force SCLK to be PCI sourced with a bunch forced 
 Clear VCLK_ECP_CNTL & PIXCLKS_CNTL  
 Setup MCLK_MISC, non dynamic mode 
 Set back the default clock dividers 
 PPLL and P2PLL default values & off 
 S and M PLLs are reset & off, configure them 
 Default values for MDLL ... fixme 
 XXXX
 Clear HTOTAL_CNTL & HTOTAL2_CNTL 
 All outputs off 
 Restore Memory Controller configuration 
 Now we actually start MCLK and SCLK 
 Full reset sdrams, this also re-inits the MDLL 
 Fill palettes 
 Restore TV stuff, make sure TV DAC is down 
	 Restore GPIOS. MacOS does some magic here with one of the GPIO bits,
	  possibly related to the weird PLL related workarounds and to the
	  fact that CLK_PIN_CNTL is tweaked in ways I don't fully understand,
	  but we keep things the simple way here
	 Now do things with SCLK_MORE_CNTL. Force bits are already set, copy
	  high bits from backup
 write some stuff to the framebuffer... 
0x3f );
0x000081bb );
0x0020300c
 Restore a few more things 
 Restore PPLL, spread spectrum & LVDS 
 Not ready yet 
 XXX use save_regs[35]? 
 XXX or save_regs[42]? 
 XXX ? 
 palette stuff and BIOS_1_SCRATCH... 
 0 
 CONFIG_PPC 
	 Set the chip into appropriate suspend mode (we use D2,
	  D3 would require a compete re-initialization of the chip,
	  including PCI config registers, clocks, AGP conf, ...)
		 Disable dynamic power management of clocks for the
		  duration of the suspendresume process
 Save some registers 
		 Prepare mobility chips for suspend.
 Program V2CLK 
 Disable IO PADs 
 Set low current 
 Prepare chip for power management 
 Reset the MDLL 
				 because both INPLL and OUTPLL take the same
 Switch PCI power management to D2. 
		 The chip seems to need us to whack the PM register
		  repeatedly until it sticks. We do that -prior- to
		  calling pci_set_power_state()
 Reset the SDRAM controller  
 Restore some registers 
 Restore registers first 
 init sdram controller 
	 For suspend-to-disk, we cheat here. We don't suspend anything and
	  let fbcon continue drawing until we are all set. That shouldn't
	  really cause any problem at this point, provided that the wakeup
	  code knows that any state in memory may not match the HW
 about to take snapshot 
 before restoring snapshot 
 Make sure engine is reset 
 Blank display and LCD 
 Sleep 
	 On powermac, we have hooks to properly suspendresume AGP now,
	  use them here. We'll ultimately need some generic support here,
	  but the generic code isn't quite ready for that yet
 CONFIG_PPC_PMAC 
	 If we support wakeup from poweroff, we save all regs we can including cfg
	  space
		 Always disable dynamic clocks or weird things are happening when
		  the chip goes off (basically the panel doesn't shut down properly
		  and we crash on wakeup),
		  also, we want the saved regs context to have no dynamic clocks in
		  it, we'll restore the dynamic clocks state on wakeup
 Switch off LVDS interface 
	 If we support D2, we go to it (should be fixed later with a flag forcing
	  D3 only for some laptops)
	 PCI state will have been restored by the core, so
	  we should be in D0 now with our config space fully
	  restored
 Wakeup chip 
		 If we support D2, try to resume... we should check what was our
		  state though... (were we really in D2 state ?). Right now, this code
		  is only enable on Macs so it's fine.
 Restore display & engine 
 Refresh 
 Unblank 
	 On powermac, we have hooks to properly suspendresume AGP now,
	  use them here. We'll ultimately need some generic support here,
	  but the generic code isn't quite ready for that yet
 CONFIG_PPC_PMAC 
 Check status of dynclk 
 CONFIG_PPC 
 CONFIG_PM 
 EnableDisable dynamic clocks: TODO add sysfs access 
	 Check if we can power manage on suspendresume. We can do
	  D2 on M6, M7 and M9, and we can resume from D3 cold a few other
	  "Mac" cards, but that's all. We need more infos about what the
	  BIOS does tho. Right now, all this PM stuff is pmac-only for that
	  reason. --BenH
		 We can restart Jasper (M10 chip in albooks), BlueStone (7500 chip
		  in some desktop G4s), Via (M9+ chip on iBook G4) and
		  Snowy (M11 chip on iBook G4 manufactured after July 2005)
 Not ready yet 
		 If any of the above is set, we assume the machine can sleepresume.
		  It's a bit of a "shortcut" but will work fine. Ideally, we need infos
		  from the platform about what happens to the chip...
		  Now we tell the platform about our capability
#if 0  Disable the early video resume hack for now as it's causing problems, among
        others we now rely on the PCI core restoring the config space for us, which
        isn't the case with that hack, and that code path causes various things to
        be called with interrupts off while they shouldn't. I'm leaving the code in
        as it can be useful for debugging purposes
		 Power down TV DAC, that saves a significant amount of power,
		  we'll have something better once we actually have some TVOut
		  support
 defined(CONFIG_PPC_PMAC) 
 defined(CONFIG_PM) 
 SPDX-License-Identifier: GPL-2.0
 the accelerated functions here are patterned after the 
  "ACCEL_MMIO" ifdef branches in XFree86
  --dte
  Ugly workaround  
	
	  On some platforms, the video memory is mapped at 0 in radeon chip space
	  (like PPCs) by the firmware. X will always move it up so that it's seen
	  by the chip to be at the same address as the PCI BAR.
	  That means that when switching back from X, there is a mismatch between
	  the offsets programmed into the engine. This means that potentially,
	  accel operations done before radeonfb has a chance to re-init the engine
	  will have incorrect offsets, and potentially trash system memory !
	 
	  The correct fix is for fbcon to never call any accel op before the engine
	  has properly been re-initialized (by a call to set_var), but this is a
	  complex fix. This workaround in the meantime, called before every accel
	  operation, makes sure the offsets are in sync.
 contains, like GMC_DST_32BPP 
 i.e. GMC_DST_32BPP 
 FIXME 
 disable 3D engine 
		 This needs to be double checked with ATI. Latest X driver
		  completely "forgets" to set this register on < r3xx, and
		  we used to just write 0 there... I'll keep the 0 and update
		  that when we have sorted things out on X side.
	 We re-read MC_FB_LOCATION from card as it can have been
	  modified by XFree drivers (ouch !)
 clear line drawing regs 
 set brush color regs 
 set source color regs 
 default write mask 
   ATI Frame Buffer Device Driver Core
 	Copyright (C) 2004  Alex Kern <alex.kern@gmx.de>
 	Copyright (C) 1997-2001  Geert Uytterhoeven
 	Copyright (C) 1998  Bernd Harries
 	Copyright (C) 1998  Eddie C. Dost  (ecd@skynet.be)
   This driver supports the following ATI graphics chips:
     - ATI Mach64
   To do: add support for
     - ATI Rage128 (from aty128fb.c)
     - ATI Radeon (from radeonfb.c)
   This driver is partly based on the PowerMac console driver:
 	Copyright (C) 1996 Paul Mackerras
   and on the PowerMac ATImach64 display driver:
 	Copyright (C) 1997 Michael AK Tesch
 	      with work by Jon Howell
 			   Harry AC Eaton
 			   Anthony Tong <atong@uiuc.edu>
   Generic LCD support written by Daniel Mantione, ported from 2.4.20 by Alex Kern
   Many Thanks to Ville Syrjälä for patches and fixing nasting 16 bit color bug.
   This file is subject to the terms and conditions of the GNU General Public
   License. See the file COPYING in the main directory of this archive for
   more details.
   Many thanks to Nitya from ATI devrel for support and patience !
  TODO:
    - cursor support on all cards and all ramdacs.
    - cursor parameters controlable via ioctl()s.
    - guess PLL and MCLK based on the original PLL register values initialized
      by Open Firmware (if they are initialized). BIOS is done
    (Anyone with Mac to help with this?)
  Debug flags.
#define DEBUG
 Make sure n  PAGE_SIZE is protected at end of Aperture for GUI-regs 
  - must be large enough to catch all GUI-Regs   
  - must be aligned to a PAGE boundary           
 FIXME: remove the FAIL definition 
 EXT_VERT_STRETCH 
 write addr byte 
 write the register value 
 write addr byte 
 read the register value 
#else  defined(CONFIG_PMAC_BACKLIGHT) || defined(CONFIG_FB_ATY_BACKLIGHT) ||
#endif  defined(CONFIG_PMAC_BACKLIGHT) || defined(CONFIG_FB_ATY_BACKLIGHT) ||
  ATIReduceRatio --
  Reduce a fraction by factoring out the largest common divider of the
  fraction's numerator and denominator.
  The Hardware parameters for each card
  Frame buffer device API
  Internal routines
  Interface used by the world
 640x480, 60 Hz, Non-Interlaced (25.175 MHz dotclock) 
 640x480 @ 60 Hz, 31.5 kHz hsync 
 top -> down is an evolution of mach64 chipset, any corrections? 
 FIXME what is this chip? 
 make sets shorter 
#define ATI_CHIP_264GTDVD  ?
 Mach64 GX 
 CONFIG_FB_ATY_GX 
 FIXME what is this chip? 
 CONFIG_FB_ATY_CT 
  Last page of 8 MB (4 MB on ISA) aperture is MMIO,
  unless the auxiliary register aperture is used.
 CONFIG_FB_ATY_GX 
 CONFIG_FB_ATY_CT 
 CONFIG_FB_ATY_GX 
 CONFIG_FB_ATY_CT 
  Apple monitor sense
 drive outputs high 
 turn off outputs 
 get primary sense value 
 drive each sense line low in turn and collect the other 2 
 drive A low 
 drive A high again 
 drive B low 
 drive B high again 
 drive C low 
 turn off outputs 
 defined(CONFIG_PPC) 
 ------------------------------------------------------------------------- 
  CRTC programming
 switch to non shadow registers 
 save stretching 
 switch to shadow registers 
 CONFIG_FB_ATY_GENERIC_LCD 
 stop CRTC 
 update non-shadow registers first 
 temporarily disable stretching 
 turn off CRT 
 after setting the CRTC registers we should set the LCD registers. 
 switch to shadow registers 
 restore CRTC selection & shadow state and enable stretching 
 CONFIG_FB_ATY_GENERIC_LCD 
 input 
 convert (and round up) and validate 
VCLK_DAC_PM_EN | USE_SHADOWED_VEND |
			
			  We cannot display the mode on the LCD. If the CRT is
			  enabled we can turn off the LCD.
			  If the CRT is off, it isn't a good idea to switch it
			  on; we don't know if one is connected. So it's better
			  to fail then.
aty_st_lcd(LCD_GEN_CNTL, crtc->lcd_gen_cntl, par);
		 bpp -> bytespp, 1,4 -> 0; 8 -> 2; 15,16 -> 1; 24 -> 6; 32 -> 5
		const u8 DFP_h_sync_dly_LT[] = { 0, 2, 1, 6, 5 };
		
		  This is horror! When we simulate, say 640x480 on an 800x600
		  LCD monitor, the CRTC should be programmed 800x600 values for
		  the non visible part, but 640x480 for the visible part.
		  This code has been tested on a laptop with it's 1400x1050 LCD
		  monitor and a conventional monitor both switched on.
		  Tested modes: 1280x1024, 1152x864, 1024x768, 800x600,
		  works with little glitches also with DOUBLESCAN modes
DFP_h_sync_dly[ ( bpp + 1 )  3 ]; par->lcd_hsync_dly;
 CONFIG_FB_ATY_GENERIC_LCD 
FAIL_MAX("h_sync_wid too large", h_sync_wid, 0x1f);
FAIL_MAX("v_sync_wid too large", v_sync_wid, 0x1f);
 output 
 crtc->gen_cntl = aty_ld_le32(CRTC_GEN_CNTL, par) & CRTC_PRESERVED_MASK; 
 Enable doublescan mode if requested 
 Enable interlaced mode if requested 
TVCLK_PM_EN | VCLK_DAC_PM_EN |
 | LOCK_8DOT;
 MOBILITY M1 tested, FIXME: LT 
				
				  The horizontal blender misbehaves when
				  HDisplay is less than a certain threshold
				  (440 for a 1024-wide panel).  It doesn't
				  stretch such modes enough.  Use pixel
				  replication instead of blending to stretch
				  modes that can be made to exactly fit the
				  panel width.  The undocumented "NoLCDBlend"
				  option allows the pixel-replicated mode to
				  be slightly wider or narrower than the
				  panel width.  It also causes a mode that is
				  exactly half as wide as the panel to be
				  pixel-replicated, rather than blended.
 Out of the do { ... } while (0) 
			
			  Don't use vertical blending if the mode is too wide
			  or not vertically stretched.
 copy to shadow crtc 
 CONFIG_FB_ATY_GENERIC_LCD 
 FIXME: display FIFO low watermark values 
 input 
 convert 
 RGB 555 
 RGB 565 
 RGB 888 
 ARGB 8888 
 output 
	
	  In double scan mode, the vertical parameters are doubled,
	  so we need to halve them to get the right values.
	  In interlaced mode the values are already correct,
	  so no correction is necessary.
 ------------------------------------------------------------------------- 
 hack 
 DEBUG 
 Don't forget MEM_CNTL 
 GT 
 Initialize the graphics engine 
 CONFIG_BOOTX_TEXT 
 dump non shadow CRTC, pll, LCD registers 
 CRTC registers 
 PLL registers 
 CONFIG_FB_ATY_CT 
 LCD registers 
 CONFIG_FB_ATY_GENERIC_LCD 
 DEBUG 
  OpenRelease the frame buffer device
 clear interrupt 
 clear interrupt 
 enable interrupt 
 re-enable interrupt 
 disable interrupt 
		
		  Now reset the default display config, we have
		  no idea what the program(s) which mmap'd the
		  chip did to the configuration, nor whether it
		  restored it correctly.
  Pan or Wrap the Display
  This call looks only at xoffset, yoffset and the FB_VMODE_YWRAP flag
 ATY\00 
 ATY\01 
 1,2,3,4,8 
 2 or 4 
 1,2,3,4,8 
 1,2,3,4,6,8,12 
 0-16383 
 0-15 
 0-7 
 0-2047 
 0-2047 
 ATY\02 
 ATY\03 
 __sparc__ 
aty_calc_pll_ct(info, &pll->ct);
 DEBUG && CONFIG_FB_ATY_CT 
 VM_IO | VM_DONTEXPAND | VM_DONTDUMP are set by remap_pfn_range() 
 propagate off changes 
 Each page, see which map applies 
 __sparc__ 
 Power management routines. Those are used for PowerBook sleep.
 Sleep 
 Wakeup 
 CONFIG_PPC_PMAC 
 Idle & reset engine 
 Blank display and LCD 
	
	  Because we may change PCI D state ourselves, we need to
	  first save the config space content so the core can
	  restore it properly on resume.
 Set chip to "suspend" mode 
	
	  PCI state will have been restored by the core, so
	  we should be in D0 now with our config space fully
	  restored
 Restore display 
 Refresh 
 Unblank 
 CONFIG_PM_SLEEP 
  defined(CONFIG_PCI) 
 Backlight 
 Get and convert the value 
 No locking of bl_curve since we read a single value 
 CONFIG_PCI 
 CONFIG_FB_ATY_BACKLIGHT 
  Initialisation
 defined(__i386__) && defined(CONFIG_FB_ATY_GENERIC_LCD) 
 FIXME: clockchipRAMDAC probing? 
 CONFIG_FB_ATY_GX 
 for many chips, the mclk is 67 MHz for SDRAM, 63 MHz otherwise 
 Mobility + 32bit memory interface need halved XCLK. 
	
	  The Apple iBook1 uses non-standard memory frequencies.
	  We detect it and set the frequency manually.
 Allow command line to override clocks. 
 CONFIG_FB_ATY_CT 
 save previous video mode 
 0xF used instead of MEM_SIZE_ALIAS 
	
	  Reg Block 0 (CT-compatible block) is at mmio_start
	  Reg Block 1 (multimedia extensions) is at mmio_start - 0x400
 GT 
	
	  Disable register access through the linear aperture
	  if the auxiliary aperture is used so we can access
	  the full 8 MB of video RAM on 8 MB boards.
		
		  Only the ioremap_wc()'d area will get WC here
		  since ioremap_uc() was used on the entire PCI BAR.
		
		  these bits let the 101 powerbook
		  wake up from sleep -- paulus
		
		  FIXME: The NVRAM stuff should be put in a Mac-specific file,
		         as it applies to all Mac video cards
 G3 PowerBook with 1024x768 LCD 
 iBook with 800x600 LCD 
 !CONFIG_PPC 
 CONFIG_FB_ATY_CT 
 restore video mode 
 CONFIG_ATARI && !MODULE 
  Blank the display.
  Set a single color register. The values supplied are already
  rounded down to the hardware's capabilities (according to the
  entries in the var structure). Return != 0 for invalid regno.
  !! 4 & 8 =  PSEUDO, > 8 = DIRECTCOLOR
 DAC_CNTL | 0x2 turns off the extra brightness for gt 
	
	  Map memory-mapped registers.
	
	  Map in big-endian aperture.
	
	  Figure mmap addresses from PCI config space.
	  Split Framebuffer in big- and little-endian halfs.
 nothing  ;
		
		  Map the framebuffer a second time, this time without
		  the braindead _PAGE_IE setting. This is used by the
		  fixed Xserver, but we need to maintain the old mapping
		  to stay compatible with older ones...
		
		  Here comes the old framebuffer mapping with _PAGE_IE
		  set for the big endian half of the framebuffer...
		
		  Fix PROMs idea of MEM_CNTL settings...
 Turn off all undocumented bits. 
		
		  Read the PLL to figure actual Refresh Rate.
 DPRINTK("CLOCK_CNTL %02x\n", clock_cntl); 
		
		  PLL Reference Divider M:
		
		  PLL Feedback Divider N (Dependent on CLOCK_CNTL):
		
		  PLL Post Divider P (Dependent on CLOCK_CNTL):
		
		  PLL Divider Q:
		
		  Target Frequency:
		 
		       T  M
		  Q = -------
		       2  R
		 
		  where R is XTALIN (= 14318 or 29498 kHz).
 __sparc__ 
	
	  To support an LCD panel, we should know it's dimensions and
	   it's desired pixel clock.
	  There are two ways to do it:
	   - Check the startup video mode and calculate the panel
	     size from it. This is unreliable.
	   - Read it from the driver information table in the video BIOS.
 Address of driver information table is at offset 0x78. 
 Check for the driver information table signature. 
 Rage LT pro 
 Rage mobility 
 Rage XC 
 Rage XL 
		
		  The most important information is the panel size at
		  offset 25 and 27, but there's some other nice information
		  which we print to the screen.
		
		  We now need to determine the crtc parameters for the
		  LCD monitor. This is tricky, because they are not stored
		  individually in the BIOS. Instead, the BIOS contains a
		  table of display modes that work for this monitor.
		 
		  The idea is that we search for a mode of the same dimensions
		  as the dimensions of the LCD monitor. Say our LCD monitor
		  is 800x600 pixels, we search for a 800x600 monitor.
		  The CRTC parameters we find here are the ones that we need
		  to use to simulate other resolutions on the LCD screen.
 To do: Switch to CRT if possible. 
 CONFIG_FB_ATY_GENERIC_LCD 
 The BIOS starts with 0xaa55. 
 check for frequncy table 
 __i386__ 
	
	  By using strong UC we force the MTRR to never have an
	  effect on the MMIO region on both non-PAT and PAT systems.
	
	  Enable memory-space accesses using config-space
	  command register.
 Use the big-endian aperture 
 Map in frame buffer 
	
	  The framebuffer is not always 8 MiB, that's just the size of the
	  PCI BAR. We temporarily abuse smem_len here to store the size
	  of the BAR. aty_init() will later correct it to match the actual
	  framebuffer size.
	 
	  On devices that don't have the auxiliary register aperture, the
	  registers are housed at the top end of the framebuffer PCI BAR.
	  aty_fudge_framebuffer_len() is used to reduce smem_len to not
	  overlap with the registers.
 according to ATI, we should use clock 3 for acelerated mode 
 !__sparc__ 
 Enable device in PCI config 
 Find which resource to use 
 Reserve space 
 Allocate framebuffer 
 Setup "info" structure 
 Init chip & register framebuffer 
	
	  Add devfb mmap values.
 __sparc__ 
 CONFIG_PCI 
 something invalid 
		
		  Map the video memory (physical address given)
		  to somewhere in the kernel address space.
 Fake! 
 Fake! 
 Medusa ST-IO ISA Adapter etc. 
 Panther 1 ISA Adapter (Gerald) 
 Fake pci_id for correct_chipset() 
 CONFIG_ATARI 
 restore video mode 
 CONFIG_FB_ATY_GX 
 CONFIG_FB_ATY_CT 
 CONFIG_PCI 
		
		  Why do we need this silly Mach64 argument?
		  We are already here because of mach64= so its redundant.
  MODULE  
	
	  HP OmniBook 500's BIOS doesn't like the state of the
	  hardware after atyfb has been used. Restore the hardware
	  to the original state to allow successful reboots.
 SPDX-License-Identifier: GPL-2.0
   ATI Mach64 CTVTGTLT Support
 write addr byte 
 read the register value 
 write addr byte 
 write the register value 
  by Daniel Mantione
                                   <daniel.mantione@freepascal.org>
  ATI Mach64 CT clock synthesis description.
  All clocks on the Mach64 can be calculated using the same principle:
        XTALIN  x  FB_DIV
  CLK = ----------------------
        PLL_REF_DIV  POST_DIV
  XTALIN is a fixed speed clock. Common speeds are 14.31 MHz and 29.50 MHz.
  PLL_REF_DIV can be set by the user, but is the same for all clocks.
  FB_DIV can be set by the user for each clock individually, it should be set
  between 128 and 255, the chip will generate a bad clock signal for too low
  values.
  x depends on the type of clock; usually it is 2, but for the MCLK it can also
  be set to 4.
  POST_DIV can be set by the user for each clock individually, Possible values
  are 1,2,4,8 and for some clocks other values are available too.
  CLK is of course the clock speed that is generated.
  The Mach64 has these clocks:
  MCLK			The clock rate of the chip
  XCLK			The clock rate of the on-chip memory
  VCLK0		First pixel clock of first CRT controller
  VCLK1    Second pixel clock of first CRT controller
  VCLK2		Third pixel clock of first CRT controller
  VCLK3    Fourth pixel clock of first CRT controller
  VCLK			Selected pixel clock, one of VCLK0, VCLK1, VCLK2, VCLK3
  V2CLK		Pixel clock of the second CRT controller.
  SCLK			Multi-purpose clock
  - MCLK and XCLK use the same FB_DIV
  - VCLK0 .. VCLK3 use the same FB_DIV
  - V2CLK is needed when the second CRTC is used (can be used for dualhead);
    i.e. CRT monitor connected to laptop has different resolution than built
    in LCD monitor.
  - SCLK is not available on all cards; it is know to exist on the Rage LT-PRO,
    Rage XL and Rage Mobility. It is know not to exist on the Mach64 VT.
  - V2CLK is not available on all cards, most likely only the Rage LT-PRO,
    the Rage XL and the Rage Mobility
  SCLK can be used to:
  - Clock the chip instead of MCLK
  - Replace XTALIN with a user defined frequency
  - Generate the pixel clock for the LCD monitor (instead of VCLK)
   It can be quite hard to calculate XCLK and MCLK if they don't run at the
   same frequency. Luckily, until now all cards that need asynchrone clock
   speeds seem to have SCLK.
   So this driver uses SCLK to clock the chip and XCLK to clock the memory.
 ------------------------------------------------------------------------- 
   PLL programming (Mach64 CT family)
  This procedure sets the display fifo. The display fifo is a buffer that
  contains data read from the video memory that waits to be processed by
  the CRT controller.
  On the more modern Mach64 variants, the chip doesn't calculate the
  interval after which the display fifo has to be reloaded from memory
  automatically, the driver has to do it instead.
 FIFO is 64 bits wide in accelerator mode ... 
 ... but only 32 bits in VGA mode. 
	 If we don't do this, 32 bits for multiplier & divider won't be
 Determine DSP precision first 
 Move on to dsp_off 
    if (bpp == 0)
        dsp_on = ((multiplier  20 << vshift) + divider)  divider;
 Calculate rounding factor and apply it to dsp_on 
 Last but not least:  dsp_xclks 
 Get register values. 
 FIXME: use the VTBGTB {3,6,12} post dividers if they're better suited 
    pll->vclk_post_div <<= 6;
 VCLK = PLL_VCLKVCLKx_POST 
 Set ECP (scaleroverlay clock) divider 
aty_calc_pll_ct(info, &pll->ct);
 turn off LCD 
 Temporarily switch to accelerator mode 
 Reset VCLK generator 
 Set post-divider 
 Set extended post-divider 
 Set feedback divider 
 End VCLK generator reset 
 Restore mode register 
 restore LCD 
 Allow BIOS to override 
	 Exit if the user does not want us to tamper with the clock
 FIXME: use the VTBGTB 3 post divider if it's better suited 
 Override PLL_EXT_CNTL & 0x07. 
 | FORCE_DCLK_TRI_STATE ;
 mclk == xclk 
		
		 The chip clock is not equal to the memory clock.
		 Therefore we will use sclk to clock the chip.
 mclk == sclk 
 Disable the extra precision pixel clock controls since we do not use them. 
		
		 This disables the sclk, crashes the computer as reported:
		 aty_st_pll_ct(SPLL_CNTL2, 3, info);
		
		 So it seems the sclk must be enabled before it is used;
		 so PLL_GEN_CNTL must be programmed after the sclk.
		
		  SCLK has been started. Wait for the PLL to lock. 5 ms
		  should be enough according to mach64 programmer's guide.
 	driversvideoatyradeon_base.c
 	framebuffer driver for ATI Radeon chipset video boards
 	Copyright 2003	Ben. Herrenschmidt <benh@kernel.crashing.org>
 	Copyright 2000	Ani Joshi <ajoshi@kernel.crashing.org>
 	i2c bits from Luca Tettamanti <kronos@kronoz.cjb.net>
 	
 	Special thanks to ATI DevRel team for their hardware donations.
 	...Insert GPL boilerplate here...
 	Significant portions of this driver apdated from XFree86 Radeon
 	driver which has the following copyright notice:
 	Copyright 2000 ATI Technologies Inc., Markham, Ontario, and
                      VA Linux Systems Inc., Fremont, California.
 	All Rights Reserved.
 	Permission is hereby granted, free of charge, to any person obtaining
 	a copy of this software and associated documentation files (the
 	"Software"), to deal in the Software without restriction, including
 	without limitation on the rights to use, copy, modify, merge,
 	publish, distribute, sublicense, andor sell copies of the Software,
 	and to permit persons to whom the Software is furnished to do so,
 	subject to the following conditions:
 	The above copyright notice and this permission notice (including the
 	next paragraph) shall be included in all copies or substantial
 	portions of the Software.
 	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  	EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 	MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 	NON-INFRINGEMENT.  IN NO EVENT SHALL ATI, VA LINUX SYSTEMS ANDOR
 	THEIR SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 	WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 	DEALINGS IN THE SOFTWARE.
 	XFree86 driver authors:
 	   Kevin E. Martin <martin@xfree86.org>
 	   Rickard E. Faith <faith@valinux.com>
 	   Alan Hourihane <alanh@fairlite.demon.co.uk>
 CONFIG_PPC 
 MOVE THAT TO includevideo
 Radeon Xpress 200m 
 Mobility M6 
 Radeon VE7000 
 Radeon IGP320M (U1) 
 Radeon IGP320 (A3) 
 IGP330M340M350M (U2) 
 IGP330340350 (A4) 
 Mobility 7000 IGP 
 7000 IGP (A4+) 
 8500 AIW 
 87008800 
 8500 
 9100 
 Mobility M7 
 7500 
 Mobility M9 
 9000Pro 
 Mobility 9100 IGP (U3) 
 9100 IGP (A5) 
 Mobility 9200 (M9+) 
 9200 
 9500 
 9600TX  FireGL Z1 
 97009500ProFireGL X1 
 Mobility M10M11 
 9600FireGL T2 
 9800ProFileGL X2 
 Newer stuff 
 Original Radeon7200 
 these common regs are cleared before mode setting so they do not
  interfere with anything
  globals
 Note about this function: we have some rare cases where we must not schedule,
  this typically happen with our special "wake up early" hook which allows us to
  wake up the graphic chip (and thus get the console back) before everything else
  on some machines that support that mechanism. At this point, interrupts are off
  and scheduling is not permitted
 Called if (rinfo->errata & CHIP_ERRATA_PLL_DUMMYREADS) is set 
 we can't deal with posted writes here ... 
 Initiate flush 
	 Ensure FIFO is empty, ie, make sure the flush commands
	  has reached the cache
 Wait for the flush to complete 
 ensure FIFO is empty before waiting for idle 
	 If this is a primary card, there is a shadow copy of the
	  ROM somewhere in the first meg. We will just ignore the copy
	  and use the ROM directly.
 Fix from ATI for problem with Radeon hardware not leaving ROM enabled 
 Very simple test to make sure it appeared 
 Look for the PCI data to check the ROM type 
	 Check the PCI data signature. If it's wrong, we still assume a normal x86 ROM
	  for now, until I've verified this works everywhere. The goal here is more
	  to phase out Open Firmware images.
	 
	  Currently, we only look at the first PCI data, we could iteratre and deal with
	  them all, and we should use fb_bios_start relative to start of image and not
	  relative start of ROM, but so far, I never found a dual-image ATI card
	 
	  typedef struct {
	  	u32	signature;	+ 0x00
	  	u16	vendor;		+ 0x04
	  	u16	device;		+ 0x06
	  	u16	reserved_1;	+ 0x08
	  	u16	dlen;		+ 0x0a
	  	u8	drevision;	+ 0x0c
	  	u8	class_hi;	+ 0x0d
	  	u16	class_lo;	+ 0x0e
	  	u16	ilen;		+ 0x10
	  	u16	irevision;	+ 0x12
	  	u8	type;		+ 0x14
	  	u8	indicator;	+ 0x15
	  	u16	reserved_2;	+ 0x16
	  } pci_data_t;
 Locate the flat panel infos, do some sanity checking !!! 
	 I simplified this code as we used to miss the signatures in
	  a lot of case. It's now closer to XFree, we just don't check
	  for signatures at all... Something better will have to be done
	  if we end up having conflicts
 Locate the flat panel infos, do some sanity checking !!! 
  Read XTAL (ref clock), SCLK and MCLK from Open Firmware device
  tree. Hopefully, ATI OF driver is kind enough to fill these
 CONFIG_PPC || CONFIG_SPARC 
  Read PLL infos from chip registers
	 Ugh, we cut interrupts, bad bad bad, but we want some precision
	  here, so... --BenH
 Flush PCI buffers ? 
 we're done, hopefully these are sane values 
  Retrieve PLL infos by different means (BIOS, Open Firmware, register probing...)
	
	  In the case nothing works, these are defaults; they are mostly
	  incomplete, however.  It does provide ppll_max and _min values
	  even for most other methods, however.
	
	  Retrieve PLL infos from Open Firmware first
 CONFIG_PPC || CONFIG_SPARC 
	
	  Check out if we have an X86 which gave us some PLL informations
	  and if yes, retrieve them
	
	  We didn't get PLL parameters from either OF or BIOS, we try to
	  probe them
	
	  Fall back to already-set defaults...
	
	  Some methods fail to retrieve SCLK and MCLK values, we apply default
	  settings in this case (200Mhz). If that really happens often, we
	  could fetch from registers instead...
	 XXX I'm adjusting xres_virtual to the pitch, that may help XFree
	  with some panels, though I don't quite like this solution
		
		  TODO:  set mirror accordingly for non-Mobility chipsets with 2 CRTC's
		         and do something better using 2nd CRTC instead of just hackish
		         routing to second output
 We don't do a full switch-off on a simple mode switch 
			 Asic bug, when turning off LVDS_ON, we have to make sure
			  RADEON_PIXCLK_LVDS_ALWAYS_ON bit is off
 todo: powerdown DAC
 default 
			 For 565, the green component is mixed one order
			  below
 Make sure we are on first palette 
 Make sure we are on first palette 
 CRTC regs 
 FP regs 
 PLL regs 
 Workaround from XFree 
	         A temporal workaround for the occasional blanking on certain laptop
		  panels. This appears to related to the PLL divider registers
		  (fail to lock?). It occurs even when all dividers are the same
		  with their old settings. In this case we really don't need to
		  fiddle with PLL registers. By doing this we can avoid the blanking
		  problem with some panels.
			 We still have to force a switch to selected PPLL div thanks to
			  an XFree86 driver bug which will switch it away in some cases
 Swich VCKL clock input to CPUCLK so it stays fed while PPLL updates
 Reset PPLL & enable atomic update 
 Switch to selected PPLL divider 
 Set PPLL ref. div 
			 When restoring console mode, use saved PPLL_REF_DIV
			  setting.
 R300 uses ref_div_acc field as real ref divider 
 Set PPLL divider 3 & post divider
 Write update 
 Wait read update complete 
	 FIXME: Certain revisions of R300 can't recover here.  Not sure of
	   the cause yet, but this workaround will mask the problem for now.
	   Other chips usually will pass at the very first test, so the
 Clear reset & atomic update 
 We may want some locking ... oh well 
 Switch back VCLK source to PPLL 
  Timer function for delayed LVDS panel power updown
  Apply a video mode. This will apply the whole register set, including
  the PLL registers, to the card
 Apply surface registers 
  Calculate the PLL values for a given mode
	 Check if the DVO port is enabled and sourced from the primary CRTC. I'm
	  not sure which model starts having FP2_GEN_CNTL, I assume anything more
	  recent than an r(v)100...
	 XXX I had reports of flicker happening with the cinema display
	  on TMDS1 that seem to be fixed if I also forbit odd dividers in
	  this case. This could just be a bandwidth calculation issue, I
	  haven't implemented the bandwidth code yet, but in the meantime,
	  forcing uses_dvo to 1 fixes it and shouln't have bad side effects,
	  I haven't seen a case were were absolutely needed an odd PLL
	  divider. I'll find a better fix once I have more infos on the
	  real cause of the problem.
 FP2 path not enabled 
		 Not all chip revs have the same format for this register,
		  extract the source selection
			 sourced from transform unit, check for transform unit
			  own source
 sourced from CRTC2 -> exit 
 so we end up on CRTC1, let's set uses_dvo to 1 now 
		 If we output to the DVO port (external TMDS), we don't allow an
		  odd PLL divider as those aren't supported on this path
	 If we fall through the bottom, try the "default value"
	 If we fall through the bottom, try the "default value"
	 We always want engine to be idle on a mode switch, even
	  if we won't actually change the mode
 x100 
 max 
 max 
 Clear auto-center etc... 
 INREG(DAC_CNTL) |  DAC_MASK_ALL | DAC_VGA_ADR_EN |
 We first calculate the engine pitch 
 Then, re-multiply it to get the CRTC pitch 
	
	  It looks like recent chips have a problem with SURFACE_CNTL,
	  setting SURF_TRANSLATION_DIS completely disables the
	  swapper as well, so we leave it unset now.
	 Setup swapping on both apertures, though we currently
	  only use aperture 0, enabling swapper on aperture 1
	  won't harm
 Clear surface registers 
 We use PPLL_DIV_3 
 Calculate PPLL value if necessary 
 DFP 
 TMDS_PLL_EN bit is reversed on RV (and mobility) chips 
 do it! 
 (re)initialize the engine 
 Update fix 
 Update debug text engine 
 Fill fix common fields 
  This reconfigure the card's internal memory map. In theory, we'd like
  to setup the card's memory at the same address as it's PCI bus address,
  and the AGP aperture right after that so that system RAM on 32 bits
  machines at least, is directly accessible. However, doing so would
  conflict with the current XFree drivers...
  Ultimately, I hope XFree, GATOS and ATI binary drivers will all agree
  on the proper way to set this up and duplicate this here. In the meantime,
  I put the card's memory at 0 in card space and AGP at some random high
  local (0xe0000000 for now) that will be changed by XFreeDRI anyway
 First, we disable display to avoid interfering 
 Set framebuffer to be at the same address as set in PCI BAR 
	 Set AGP to be just after the framebuffer on a 256Mb boundary. This
	  assumes the FB isn't mapped to 0xf0000000 or above, but this is
	  always the case on PPCs afaik.
	 Fixup the display base addresses & engine offsets while we
	  are at it as well
 Restore display settings 
 CONFIG_PPC 
 framebuffer size 
 This is supposed to fix the crtc2 noise problem. 
              This is to workaround the asic bug for RMX, some versions
                of BIOS doesn't have this register initialized correctly.
 mem size is bits [28:0], mask off the rest 
	
	  Hack to get around some busted production M6's
	  reporting no ram
	
	  Now try to identify VRAM type
	 This may not be correct, as some cards can have half of channel disabled
	  ToDo: identify these cases
  Sysfs
 Enable device in PCI config 
 Set base addrs 
 request the mem regions 
 map the regions 
	
	  Check for errata
	 On PPC, we obtain the OF device-node pointer to the firmware
	  data for this chip
 CONFIG_PPC || CONFIG_SPARC 
	 On PPC, the firmware sets up a memory mapping that tends
	  to cause lockups when enabling the engine. We reconfigure
	  the card internal memory mappings properly
 CONFIG_PPC 
 Get VRAM size and type 
	
	  Map the BIOS ROM if any and retrieve PLL parameters from
	  the BIOS. We skip that on mobility chips as the real panel
	  values we need aren't in the ROM but in the BIOS image in
	  memory. This is definitely not the best meacnism though,
	  we really need the arch code to tell us which is the "primary"
	  video adapter to use the memory image (or better, the arch
	  should provide us a copy of the BIOS image to shield us from
	  archs who would store that elsewhere andor could initialize
	  more than one adapter during boot).
	
	  On x86, the primary display on laptop may have it's BIOS
	  ROM elsewhere, try to locate it at the legacy memory hole.
	  We probably need to make sure this is the primary display,
	  but that is difficult without some arch support.
	 If both above failed, try the BIOS ROM again for mobility
	  chips
 Get informations about the board's PLL 
 Register I2C bus 
 set all the vital stuff 
 Probe screen types 
 Build mode list, check out panel native model 
 Register some sysfs stuff (should be done better) 
	 save current mode regs before we switch into the new one
	  so we can restore this upon __exit
 Setup Power Management capabilities 
		 -2 is special: means  ON on mobility chips and do not
		  change on others
 Register with fbdev layer 
  MODULE  
 SPDX-License-Identifier: GPL-2.0
   ATI Mach64 GX Support
 Definitions for the ICS 2595 == ATI 18818_1 Clockchip 
  14.33 MHz  (exact   14.31818) 
 really 43 on ICS 2595 !!!  
 ohne Prescaler 
 159.38 MHz  (really 170.486) 
  80.00 MHz  (        85.565) 
 mit Prescaler 2, 4, 8 
  10.00 MHz  (really  10.697) 
       Support Functions
       IBM RGB514 DAC and Clock Chip
 right addr byte 
 left addr byte 
 8 bpp 
 555 
 XRGB 
 VRAM Mask Low 
 Horizontal Sync Control 
 Power Management 
 Misc Clock Control 
 Misc Control 2 
 Pixel Format 
 Misc Control 2  16 BPP Control  32 BPP Control 
	
	   FIXME: use real calculations instead of using fixed values from the old
	          driver
 pixlock rounding limit (arbitrary) 
 (df<<6) | vco_div_count 
 ref_div_count 
  7395 ps  135.2273 MHz 
  9977 ps  100.2273 MHz 
 12509 ps   79.9432 MHz 
 13394 ps   74.6591 MHz 
 15378 ps   65.0284 MHz 
 17460 ps   57.2727 MHz 
 33145 ps   30.1705 MHz 
 DAC Operation 
 PLL Control 1 
 Misc Control 1 
 PLL Ref. Divider Input 
 Sync Control 
 Power Management 
 F0  M0 
 F1  N0 
       ATI 68860-B DAC
(info->mach64DAC8Bit ? 0x00 : 0x01)  ;
	 The following assumes that the BIOS has correctly set R7 of the
	  Device Setup Register A at boot time.
       AT&T 21C498 DAC
 info->mach64DAC8Bit  )
       ATI 18818  ICS 2595 Clock Chip
 in 0.01 MHz 
 Calculate the programming word 
 MHz100 = 257 
 + 0.5 round 
 default for now 
 delay for 50 (15) ms 
 Program the clock chip 
 Strobe = 0 
 Strobe = 0 
 Send start bits 
 Start bit 
 Read  ~Write 
 Location 0..4 
 delay for 1 ms 
 Clear DAC Counter 
 delay for 50 (15) ms 
       STG 1703 Clock Chip
 in 0.01 MHz 
 u32 post_divider; 
 Calculate the programming word 
 14.32 MHz 
 Calculate program word 
 fuer nix 
 default for now 
 Program clock 
 Clear DAC Counter 
       Chrontel 8398 Clock Chip
 in 0.01 MHz 
 u32 post_divider; 
 Calculate the programming word 
 Calculate program word 
 8 bit scale this 
 14.31818  65536 
 43..256 
 4..32 
 8 bit scale 
 default for now 
 Program clock 
 Clear DAC Counter 
       AT&T 20C408 Clock Chip
 in 0.01 MHz 
 u32 post_divider; 
 Calculate the programming word 
 14.32 MHz 
 Calculate program word 
 fuer nix 
 default for now 
 Program clock 
 delay for 400 us 
 delay for 400 us 
 Clear DAC Counter 
       Unsupported DAC and Clock Chip
 new in 2.2.3p1 from Geert. ???????? 
 SPDX-License-Identifier: GPL-2.0
   ATI Mach64 CTVTGTLT Cursor Support
  The hardware cursor definition requires 2 bits per pixel. The
  Cursor size reguardless of the visible cursor size is 64 pixels
  by 64 lines. The total memory required to define the cursor is
  16 bytes  line for 64 lines or 1024 bytes of data. The data
  must be in a contigiuos format. The 2 bit cursor code values are
  as follows:
 	00 - pixel colour = CURSOR_CLR_0
 	01 - pixel colour = CURSOR_CLR_1
 	10 - pixel colour = transparent (current display pixel)
 	11 - pixel colour = 1's complement of current display pixel
 	Cursor Offset        64 pixels		 Actual Displayed Area
             \_________________________
 	      |			|	|	|
 	      |<--------------->|	|	|
 	      | CURS_HORZ_OFFSET|	|	|
 	      |			|_______|	|  64 Lines
 	      |			   ^	|	|
 	      |			   |	|	|
 	      |		CURS_VERT_OFFSET|	|
 	      |			   |	|	|
 	      |____________________|____|	|
  The Screen position of the top left corner of the displayed
  cursor is specificed by CURS_HORZ_VERT_POSN. Care must be taken
  when the cursor hot spot is not the top left corner and the
  physical cursor position becomes negative. It will be displayed
  if either the horizontal or vertical cursor position is negative
  If x becomes negative the cursor manager must adjust the CURS_HORZ_OFFSET
  to a larger number and saturate CUR_HORZ_POSN to zero.
  if Y becomes negative, CUR_VERT_OFFSET must be adjusted to a larger number,
  CUR_OFFSET must be adjusted to a point to the appropriate line in the cursor
  definitation and CUR_VERT_POSN must be saturated to zero.
       Hardware Cursor support.
 set position 
		
		  In doublescan mode, the cursor location
		  and heigh also needs to be doubled.
 Set color map 
 Clear cursor image with 1010101010...
 Upper 4 bits of mask data
 Lower 4 bits of mask
 Upper 4 bits of mask data
 Lower 4 bits of mask
			
			  If cursor size is not a multiple of 8 characters
			  we must pad it with transparent pattern (0xaaaa).
 Scratch pad 64 bytes wide 
 and 64 lines tall. 
 SPDX-License-Identifier: GPL-2.0-only
  driversmb862xxmb862xxfb_accel.c
  Fujitsu CarmineCoral-P(A)Lime framebuffer driver acceleration support
  (C) 2007 Alexander Shishkin <virtuoso@slind.org>
  (C) 2009 Valentin Sitdikov <v.sitdikov@gmail.com>
  (C) 2009 Siemens AG
 Set raster operation 
  Fill in the cmd array GDC FIFO commands to draw a 1bit image.
  Make sure cmd has enough room!
 set colors and raster operation regs 
 Set raster operation 
 and the image 
  Fill in the cmd array GDC FIFO commands to draw a 8bit image.
  Make sure cmd has enough room!
  Fill in the cmd array GDC FIFO commands to draw a 16bit image.
  Make sure cmd has enough room!
	 We could use hardware clipping but on many cards you get around
 Set raster operation 
 Set raster operation 
 cmd[1] set earlier 
FIXME: add right define 
 SPDX-License-Identifier: GPL-2.0-only
  Coral-P(A)Lime I2C adapter driver
  (C) 2011 DENX Software Engineering, Anatolij Gustschin <agust@denx.de>
 SPDX-License-Identifier: GPL-2.0-only
  driversmb862xxmb862xxfb.c
  Fujitsu CarmineCoral-P(A)Lime framebuffer driver
  (C) 2008 Anatolij Gustschin <agust@denx.de>
  DENX Software Engineering
 Mode for Prime View PM070WL4 TFT LCD Panel 
 16 bitspixel, 16MB, 133MHz, SDRAM memory mode value 
 Helpers 
 unsupported type 
 check if these values fit into the registers 
	
	  can cope with 8,16 or 2432bpp if resulting
	  pitch is divisible by 64 without remainder
 line length is going to be 128 bit aligned 
 set rgb positions and validate bpp 
  set display parameters
 disp off 
 set display reference clock div. 
 disp dimension, format 
 both HW-cursors off 
 timings 
 display on 
 downscaling 
 upscaling 
 framebuffer ops 
 initialize fb_info data 
 get the disp mode from active display cfg 
 check and possibly fix bpp 
	
	  reserve space for capture buffers and two cursors
	  at the end of vram: 720x576  2  2.2 + 64x64  16.
  show some display controller and cursor registers
 Get Interrupt Status 
 Clear interrupt status 
 Get status 
 Clear status 
  GDC (Lime, Coral(BQ), Mint, ...) on host bus
 interrupt status 
 display off 
 disable interrupts 
  common types
 end  }
 relocate gdc registers space 
 wait at least 20 bus cycles 
 Clear interrupt status 
	
	  Set io mode first! Spec. says IC may be destroyed
	  if not set to SSTL2LVCMOS before init.
 DRAM init 
 DLL reset done? 
 warm up 
 check for engine module revision 
 set up vram 
 MB86295MB86296 
 MB86297 
 should never occur 
 display off 
   linuxdriversvideoconsolebitblit.c -- BitBlitting Operation
   Originally from the 'accel_' routines in driversvideoconsolefbcon.c
       Copyright (C) 2004 Antonino Daplas <adaplas @pol.net>
   This file is subject to the terms and conditions of the GNU General Public
   License.  See the file COPYING in the main directory of this archive for
   more details.
  Accelerated handlers.
	 buf is always NULL except when in monochrome mode, so in this case
	   it's a gain to check buf against NULL even though kfree() handles
   Generic function for frame buffer with packed pixels of any depth.
       Copyright (C)  1999-2005 James Simmons <jsimmons@www.infradead.org>
   This file is subject to the terms and conditions of the GNU General Public
   License.  See the file COPYING in the main directory of this archive for
   more details.
  NOTES:
   This is for cfb packed pixels. Iplan and such are incorporated in the
   drivers that need them.
   FIXME
   Also need to add code to deal with cards endians that are different than
   the native cpu endians. I also need to deal with MSB position in the word.
   The two functions or copying forward and backward could be split up like
   the ones for filling, i.e. in aligned and unaligned versions. This would
   help moving some redundant computations and branches out of the loop, too.
       Generic bitwise copy algorithm
	
	  If you suspect bug in this function, compare it with this simple
	  memmove implementation.
 Same alignment for source and dest
 Single word
 Multiple destination words
 Leading bits
 Main chunk
 Trailing bits
 Different alignment for source and dest 
 Single destination word
 Single source word
 Single source word
 2 source words
 Multiple destination words
			 We must always remember the last value read, because in case
			SRC and DST overlap bitwise (e.g. when moving just one pixel in
			1bpp), we always collect one full long for DST and that might
			overlap with the current long from SRC. We store this value in
 Leading bits
 Single source word
 2 source words
 Main chunk
 Trailing bits
 Single source word
 2 source words
       Generic bitwise copy algorithm, operating backward
	
	  If you suspect bug in this function, compare it with this simple
	  memmove implementation.
 Same alignment for source and dest
 Single word
 Multiple destination words
 Leading bits
 Main chunk
 Trailing bits
 Different alignment for source and dest
 Single destination word
 Single source word
 Single source word
 2 source words
 Multiple destination words
			 We must always remember the last value read, because in case
			SRC and DST overlap bitwise (e.g. when moving just one pixel in
			1bpp), we always collect one full long for DST and that might
			overlap with the current long from SRC. We store this value in
 Leading bits
 Single source word
 2 source words
 Main chunk
 Trailing bits
 Single source word
 2 source words
	 if the beginning of the target area might overlap with the end of
 split the base of the framebuffer into a long-aligned address and the
 index of the first bit
 add offset of source and target area
   linuxdriversvideoconsolefbcon_ud.c -- Software Rotation - 180 degrees
       Copyright (C) 2005 Antonino Daplas <adaplas @pol.net>
   This file is subject to the terms and conditions of the GNU General Public
   License.  See the file COPYING in the main directory of this archive for
   more details.
  Rotation 180 degrees
	 buf is always NULL except when in monochrome mode, so in this case
	   it's a gain to check buf against NULL even though kfree() handles
   Generic Bit Block Transfer for frame buffers located in system RAM with
   packed pixels of any depth.
   Based almost entirely from cfbcopyarea.c (which is based almost entirely
   on Geert Uytterhoeven's copyarea routine)
       Copyright (C)  2007 Antonino Daplas <adaplas@pol.net>
   This file is subject to the terms and conditions of the GNU General Public
   License.  See the file COPYING in the main directory of this archive for
   more details.
       Generic bitwise copy algorithm
 Same alignment for source and dest 
 Single word 
 Multiple destination words 
 Leading bits 
 Main chunk 
 Trailing bits 
 Different alignment for source and dest 
 Single destination word 
 Single source word 
 Single source word 
 2 source words 
 Multiple destination words 
			 We must always remember the last value read,
			    because in case SRC and DST overlap bitwise (e.g.
			    when moving just one pixel in 1bpp), we always
			    collect one full long for DST and that might
			    overlap with the current long from SRC. We store
 Leading bits 
 Single source word 
 2 source words 
 Main chunk 
 Trailing bits 
 Single source word 
 2 source words 
       Generic bitwise copy algorithm, operating backward
 Same alignment for source and dest 
 Single word 
 Multiple destination words 
 Leading bits 
 Main chunk 
 Trailing bits 
 Different alignment for source and dest 
 Single destination word 
 Single source word 
 Single source word 
 2 source words 
 Multiple destination words 
			 We must always remember the last value read,
			    because in case SRC and DST overlap bitwise (e.g.
			    when moving just one pixel in 1bpp), we always
			    collect one full long for DST and that might
			    overlap with the current long from SRC. We store
 Leading bits 
 Single source word 
 2 source words 
 Main chunk 
 Trailing bits 
 Single source word 
 2 source words 
	 if the beginning of the target area might overlap with the end of
	 split the base of the framebuffer into a long-aligned address and
 add offset of source and target area 
   linuxdriversvideofbcmap.c -- Colormap handling for frame buffer devices
 	Created 15 Jun 1997 by Geert Uytterhoeven
 	2001 - Documented with DocBook
 	- Brad Douglas <brad@neruo.com>
   This file is subject to the terms and conditions of the GNU General Public
   License.  See the file COPYING in the main directory of this archive for
   more details.
 	fb_alloc_cmap_gfp - allocate a colormap
 	@cmap: frame buffer colormap structure
 	@len: length of @cmap
 	@transp: boolean, 1 if there is transparency, 0 otherwise
 	@flags: flags for kmalloc memory allocation
 	Allocates memory for a colormap @cmap.  @len is the
 	number of entries in the palette.
 	Returns negative errno on error, or zero on success.
       fb_dealloc_cmap - deallocate a colormap
       @cmap: frame buffer colormap structure
       Deallocates a colormap that was previously allocated with
       fb_alloc_cmap().
 	fb_copy_cmap - copy a colormap
 	@from: frame buffer colormap structure
 	@to: frame buffer colormap structure
 	Copy contents of colormap from @from to @to.
 	fb_set_cmap - set the colormap
 	@cmap: frame buffer colormap structure
 	@info: frame buffer info structure
 	Sets the colormap @cmap for a screen of device @info.
 	Returns negative errno on error, or zero on success.
 	fb_default_cmap - get default colormap
 	@len: size of palette for a depth
 	Gets the default colormap for a specific screen depth.  @len
 	is the size of the palette for a particular screen depth.
 	Returns pointer to a frame buffer colormap structure.
 	fb_invert_cmaps - invert all defaults colormaps
 	Invert all default colormaps.
       Visible symbols for modules
   Generic fillrect for frame buffers in system RAM with packed pixels of
   any depth.
   Based almost entirely from cfbfillrect.c (which is based almost entirely
   on Geert Uytterhoeven's fillrect routine)
       Copyright (C)  2007 Antonino Daplas <adaplas@pol.net>
   This file is subject to the terms and conditions of the GNU General Public
   License.  See the file COPYING in the main directory of this archive for
   more details.
       Aligned pattern fill using 3264-bit memory accesses
 Single word 
 Multiple destination words 
 Leading bits 
 Main chunk 
 Trailing bits 
       Unaligned generic pattern fill using 3264-bit memory accesses
       The pattern must have been expanded to a full 3264-bit value
       Leftright are the appropriate shifts to convert to the pattern to be
       used for the next 3264-bit word
 Single word 
 Multiple destination words 
 Leading bits 
 Main chunk 
 Trailing bits 
       Aligned pattern invert using 3264-bit memory accesses
 Single word 
 Multiple destination words 
 Leading bits 
 Main chunk 
 Trailing bits 
       Unaligned generic pattern invert using 3264-bit memory accesses
       The pattern must have been expanded to a full 3264-bit value
       Leftright are the appropriate shifts to convert to the pattern to be
       used for the next 3264-bit word
 Single word 
 Multiple destination words 
 Leading bits 
 Main chunk 
 Trailing bits 
 FIXME For now we support 1-32 bpp only 
 rotate pattern to the correct start position 
  linuxdriversvideofbmon.c
  Copyright (C) 2002 James Simmons <jsimmons@users.sf.net>
  Credits:
  The EDID Parser is a conglomeration from the following sources:
    1. SciTech SNAP Graphics Architecture
       Copyright (C) 1991-2002 SciTech Software, Inc. All rights reserved.
    2. XFree86 4.3.0, interpret_edid.c
       Copyright 1998 by Egbert Eich <Egbert.Eich@Physik.TU-Darmstadt.DE>
    3. John Fremlin <vii@users.sourceforge.net> and
       Ani Joshi <ajoshi@unixbox.com>
  Generalized Timing Formula is derived from:
       GTF Spreadsheet by Andy Morrish (1597)
       available at https:www.vesa.org
  This file is subject to the terms and conditions of the GNU General Public
  License.  See the file COPYING in the main directory of this archive
  for more details.
  EDID parser
 define this for verbose EDID parsing output 
 DEC FR-PCXAV-YZ 
 ViewSonic PF775a 
 Sharp UXGA? 
		 Only if display is GTF capable will
 vfmin 
 vfmax 
 hfmin 
 hfmax 
 pixclock - 170 MHz
 GTF 
 checksum passed, everything's good 
 Chromaticity data 
 DMT mode found 
 in EDID 1.3 the meaning of 0 changed to 16:10 (prior 1:1) 
 Check the mode we got is within valid spec of the monitor 
  fb_create_modedb - create video mode database
  @edid: EDID data
  @dbsize: database size
  @specs: monitor specifications, may be NULL
  RETURNS: struct fb_videomode, @dbsize contains length of database
  DESCRIPTION:
  This function builds a mode database using the contents of the EDID
  data
 Yikes, EDID data is totally useless 
  fb_destroy_modedb - destroys mode database
  @modedb: mode database to destroy
  DESCRIPTION:
  Destroy mode database created by fb_create_modedb
 estimate monitor limits based on modes supported 
	
	  Workaround for buggy EDIDs that sets that the first
	  detailed timing is preferred but has not detailed
	  timing specified
  VESA Generalized Timing Formula (GTF)
  fb_get_vblank - get vertical blank time
  @hfreq: horizontal freq
  DESCRIPTION:
  vblank = right_margin + vsync_len + left_margin
     given: right_margin = 1 (V_FRONTPORCH)
            vsync_len    = 3
            flyback      = 550
                           flyback  hfreq
            left_margin  = --------------- - vsync_len
                            1000000
  fb_get_hblank_by_freq - get horizontal blank time given hfreq
  @hfreq: horizontal freq
  @xres: horizontal resolution in pixels
  DESCRIPTION:
            xres  duty_cycle
  hblank = ------------------
            100 - duty_cycle
  duty cycle = percent of htotal assigned to inactive display
  duty cycle = C - (MHfreq)
  where: C = ((offset - scale factor)  blank_scale)
             -------------------------------------- + scale factor
                         256
         M = blank_scale  gradient
  fb_get_hblank_by_dclk - get horizontal blank time given pixelclock
  @dclk: pixelclock in Hz
  @xres: horizontal resolution in pixels
  DESCRIPTION:
            xres  duty_cycle
  hblank = ------------------
            100 - duty_cycle
  duty cycle = percent of htotal assigned to inactive display
  duty cycle = C - (M  h_period)
  where: h_period = SQRT(100 - C + (0.4  xres  M)dclk) + C - 100
                    -----------------------------------------------
                                     2  M
         M = 300;
         C = 30;
  fb_get_hfreq - estimate hsync
  @vfreq: vertical refresh rate
  @yres: vertical resolution
  DESCRIPTION:
           (yres + front_port)  vfreq  1000000
  hfreq = -------------------------------------
           (1000000 - (vfreq  FLYBACK)
  fb_get_mode - calculates video mode using VESA GTF
  @flags: if: 0 - maximize vertical refresh rate
              1 - vrefresh-driven calculation;
              2 - hscan-driven calculation;
              3 - pixelclock-driven calculation;
  @val: depending on @flags, ignored, vrefresh, hsync or pixelclock
  @var: pointer to fb_var_screeninfo
  @info: pointer to fb_info
  DESCRIPTION:
  Calculates video mode based on monitor specs using VESA GTF.
  The GTF is best for VESA GTF compliant monitors but is
  specifically formulated to work for older monitors as well.
  If @flag==0, the function will attempt to maximize the
  refresh rate.  Otherwise, it will calculate timings based on
  the flag and accompanying value.
  If FB_IGNOREMON bit is set in @flags, monitor specs will be
  ignored and @var will be filled with the calculated timings.
  All calculations are based on the VESA GTF Spreadsheet
  available at VESA's public ftp (https:www.vesa.org).
  NOTES:
  The timings generated by the GTF will be different from VESA
  DMT.  It might be a good idea to keep a table of standard
  VESA modes as well.  The GTF may also not work for some displays,
  such as, and especially, analog TV.
  REQUIRES:
  A valid info->monspecs, otherwise 'safe numbers' will be used.
	
	  If monspecs are invalid, use values that are enough
	  for 640x480@60
 maximize refresh rate 
 vrefresh driven 
 hsync driven 
 pixelclock driven 
 prevent division by zero in KHZ2PICOS macro 
 prevent division by zero 
 a mode must have htotal and vtotal != 0 or it is invalid 
  of_get_fb_videomode - get a fb_videomode from devicetree
  @np: device_node with the timing specification
  @fb: will be set to the return value
  @index: index into the list of display timings in devicetree
  DESCRIPTION:
  This function is expensive and should only be used, if only one mode is to be
  read from DT. To get multiple modes start with of_get_display_timings ond
  work with that instead.
 CONFIG_OF 
 CONFIG_VIDEOMODE_HELPERS 
 CONFIG_FB_MODE_HELPERS 
  fb_validate_mode - validates var against monitor capabilities
  @var: pointer to fb_var_screeninfo
  @info: pointer to fb_info
  DESCRIPTION:
  Validates video mode against monitor capabilities specified in
  info->monspecs.
  REQUIRES:
  A valid info->monspecs.
	
	  If monspecs are invalid, use values that are enough
	  for 640x480@60
  We need to ensure that the EDID block is only returned for
  the primary graphics adapter.
   linuxdriversvideoconsolefbcon_ccw.c -- Software Rotation - 270 degrees
       Copyright (C) 2005 Antonino Daplas <adaplas @pol.net>
   This file is subject to the terms and conditions of the GNU General Public
   License.  See the file COPYING in the main directory of this archive for
   more details.
  Rotation 270 degrees
	 buf is always NULL except when in monochrome mode, so in this case
	   it's a gain to check buf against NULL even though kfree() handles
 SPDX-License-Identifier: GPL-2.0-or-later
  fbsysfs.c - framebuffer device class and attributes
  Copyright (c) 2004 James Simmons <jsimmons@infradead.org>
  Note:  currently there's only stubs for framebuffer_alloc and
  framebuffer_release here.  The reson for that is that until all drivers
  are converted to use it a sysfsification will open OOPSable races.
  framebuffer_alloc - creates a new frame buffer info structure
  @size: size of driver private data, can be zero
  @dev: pointer to the device for this fb, this can be NULL
  Creates a new frame buffer info structure. Also reserves @size bytes
  for driver private data (info->par). info->par (if any) will be
  aligned to sizeof(long).
  Returns the new structure, or NULL if an error occurred.
  framebuffer_release - marks the structure available for freeing
  @info: frame buffer info structure
  Drop the reference count of the device embedded in the
  framebuffer info structure.
 might again call into fb_blank 
	struct fb_info fb_info = dev_get_drvdata(device);
	struct fb_info fb_info = dev_get_drvdata(device);
	struct fb_info fb_info = dev_get_drvdata(device);
	struct fb_info fb_info = dev_get_drvdata(device);
	struct fb_info fb_info = dev_get_drvdata(device);
	 Some drivers don't use framebuffer_alloc(), but those also
	  don't have backlights.
	 If there has been an error in the input data, we won't
	  reach this loop.
	 Some drivers don't use framebuffer_alloc(), but those also
	  don't have backlights.
 When cmap is added back in it should be a binary attribute
  not a text one. Consideration should also be given to converting
 This function generates a linear backlight curve
      0: off
    1-7: min
  8-127: linear from min to max
   linuxdriversvideofbcon.c -- Low level frame buffer based console driver
 	Copyright (C) 1995 Geert Uytterhoeven
   This file is based on the original Amiga console driver (amicon.c):
 	Copyright (C) 1993 Hamish Macdonald
 			   Greg Harp
 	Copyright (C) 1994 David Carter [carter@compsci.bristol.ac.uk]
 	      with work by William Rucklidge (wjr@cs.cornell.edu)
 			   Geert Uytterhoeven
 			   Jes Sorensen (jds@kom.auc.dk)
 			   Martin Apel
   and on the original Atari console driver (atacon.c):
 	Copyright (C) 1993 Bjoern Brauel
 			   Roman Hodek
 	      with work by Guenther Kelleter
 			   Martin Schaller
 			   Andreas Schwab
   Hardware cursor support added by Emmanuel Marty (core@ggi-project.org)
   Smart redraw scrolling, arbitrary font width support, 512char font support
   and software scrollback added by 
                          Jakub Jelinek (jj@ultra.linux.cz)
   Random hacking by Martin Mares <mj@ucw.cz>
 	2001 - Documented with DocBook
 	- Brad Douglas <brad@neruo.com>
   The low level operations for the various display memory organizations are
   now in separate source files.
   Currently the following organizations are supported:
     o afb			Amiga bitplanes
     o cfb{2,4,8,16,24,32}	Packed pixels
     o ilbm			Amiga interleaved bitplanes
     o iplan2p[248]		Atari interleaved bitplanes
     o mfb			Monochrome
     o vga			VGA charactersattributes
   To do:
     - Implement 16 plane mode (iplan2p16)
   This file is subject to the terms and conditions of the GNU General Public
   License.  See the file COPYING in the main directory of this archive for
   more details.
 MSch: for IRQ probe 
 For counting font checksums 
  FIXME: Locking
  - fbcon state itself is protected by the console_lock, and the code does a
    pretty good job at making sure that lock is held everywhere it's needed.
  - access to the registered_fb array is entirely unprotected. This should use
    proper object lifetime handling, i.e. getput_fb_info. This also means
    switching from indices to proper pointers for fb_info everywhere.
  - fbcon doesn't bother with fb_lockunlock at all. This is buggy, since it
    means concurrent access to the same fbdev from both fbcon and userspace
    will blow up. To fix this all fbcon calls from fbmem.c need to be moved out
    of fb_lockunlock protected sections, since otherwise we'll recurse and
    deadlock eventually. Aside: Due to these deadlock issues the fbdev code in
    fbmem.c cannot use locking asserts, and there's lots of callers which get
    the rules wrong, e.g. fbsysfs.c entirely missed fb_lockunlock calls too.
 the logo can be shown 
 draw the logo to a console 
 do not show the logo 
 logo_shown is an index to vc_cons when >= 0; otherwise follows FBCON_LOGO
 console mappings 
 CONFIG_FRAMEBUFFER_CONSOLE_DETECT_PRIMARY 
 font data 
 current fb_info 
 console rotation 
   Interface used by the world
   Internal routines
 CONFIG_FRAMEBUFFER_CONSOLE_ROTATION 
 0 or 1 
		
		  Scale down 16-colors to 4 colors. Default 4-color palette
		  is grayscale. However, simply dividing the values by 4
		  will not work, as colors 1, 2 and 3 will be scaled-down
		  to zero rendering them invisible.  So empirically convert
		  colors to a sane 4-level grayscale.
 black 
 white 
 gray 
 intense white 
		
		  Last 8 entries of default 16-color palette is a more intense
		  version of the first 8 (i.e., same chrominance, different
		  luminance).
 FIXME: we should sort out the unbind locking instead 
	 instead we just fail to flash the cursor if we can't get
 Need to make room for the logo 
	
	  remove underline attribute from erase character
	  if black and white framebuffer.
 We can scroll screen down 
 MODULE 
 CONFIG_MISC_TILEBLITTING 
		
		  If oldinfo and newinfo are driving the same hardware,
		  the fb_release() method of oldinfo may attempt to
		  restore the hardware state.  This will leave the
		  newinfo in an undefined state. Thus, a call to
		  fb_set_par() may be needed for the newinfo.
 	set_con2fb_map - map console to frame buffer device
 	@unit: virtual console number to map
 	@newidx: frame buffer index to map virtual console to
       @user: user request
 	Maps a virtual console @unit to a frame buffer device
 	@newidx.
 	This should be called with the console lock held.
	
	  If old fb is not mapped to any of the consoles,
	  fbcon should release it.
   Low Level Operations
 NOTE: fbcon cannot be __init: it may be called from do_take_over_console later 
 This should not happen 
	
	   If num_registered_fb is zero, this is a call for the dummy part.
	   The frame buffer devices weren't initialized yet.
	
	  Instead of blindly using registered_fb[0], we use info_idx, set by
	  fb_console_init();
 Setup default font 
	 If we are not the first console on this
	
	  We must always set the mode. The mode of the previous console
	  driver could be in the same resolution but we are using different
	  hardware so we have to initialize the hardware.
	 
	  We need to do it in fbcon_init() to prevent screen corruption.
	
	   ++guenther: console.c:vc_allocate() relies on initializing
	   vc_{cols,rows}, but we must not set those if we are only
	   resizing the console.
 ====================================================================== 
  fbcon_XXX routines - interface used by the world
   This system is now divided into two levels because of complications
   caused by hardware scrolling. Top level functions:
 	fbcon_clear(), fbcon_putc(), fbcon_clear_margins()
   handles y values in range [0, scr_height-1] that correspond to real
   screen positions. y_wrap shift means that first line of bitmap may be
   anywhere on this display. These functions convert lineoffsets to
   bitmap offsets and deal with the wrap-around case by splitting blits.
 	fbcon_clear_physical_8()    -- of original fbcon_XXX fns.
 	fbcon_putc_physical_8()	    -- (font width != 8) may be added later
   WARNING:
   At the moment fbcon_putc() cannot blit across vertical wrap boundary
   Implies should only really hardware scroll in rows. Only reason for
   restriction is simplicity & efficiency at the moment.
		
		  If the font dimensions are not an integral of the display
		  dimensions then the ops->clear below won't end up clearing
		  the margins.  Call clear_margins here in case the logo
		  bitmap stretched into the margin area.
 Split blits that cross physical y_wrap boundary 
 NOTE: We subtract two lines from these pointers 
	
	  ++Geert: Only use ywrapypan if the console is in text mode
	  ++Andrew: Only use ypan on hardware text mode when scrolling the
	            whole screen (prevents flicker).
 Maximum realistic size 
 Maximum realistic size 
 size = height  pitch  charcount 
		
		  If user font, ensure that a possible change to user font
		  height or width will not allow a font data out-of-bounds access.
		  NOTE: must use original charcount in calculation as font
		  charcount can change and cannot be used to determine the
		  font data allocated size.
	
	  FIXME: If we have multiple fbdev's loaded, we need to
	  update all info->currcon.  Perhaps, we can place this
	  in a centralized structure, but this might break some
	  drivers.
	 
	  info->currcon = vc->vc_num;
	
	  make sure we don't unnecessarily trip the memcmp()
	  in fb_set_var()
 This is protected above by initmem_freed 
 setclear vc_hi_font_mask and update vc attrs accordingly 
 ++Edmund: reorder the attribute bits 
 ++Edmund: reorder the attribute bits 
   User asked to set font; we are guaranteed that
 	a) width and height are in range 1..32
 	b) charcount does not exceed 512
   but lets not assume that, since someone might someday want to use larger
   fonts. And charcount of 512 is small for unicode support.
   However, user space gives the font in 32 rows , regardless of
   actual font height. So a new API is needed if support for larger fonts
   is ever implemented.
	 Is there a reason why fbconsole couldn't handle any charcount >256?
 Make sure drawing engine can handle the font 
 Make sure driver can handle the font length 
 usage counter 
	 Since linux has a nice crc32 function use it for counting font
 Check if the same font is on some other console already 
	
	  If framebuffer is capable of less than 16 colors,
	  use default palette of fbcon.
 Should not happen 
 As we might be inside of softback, we may work with non-contiguous buffer,
 Clear cursor, restore saved data 
 before deletion, ensure that mode is not in use 
 CONFIG_VT_HW_CONSOLE_BINDING 
 called with console_lock held 
		 This is sort of like set_con2fb_map, except it maps
		  the consoles to no device and then releases the
		  oldinfo to free memory and cancel the cursor blink
		  timer. I can imagine this just becoming part of
		  set_con2fb_map where new_idx is -1
 called with console_lock held 
 CONFIG_FRAMEBUFFER_DETECT_PRIMARY 
 called with console_lock held 
   The console `switch' structure for the frame buffer based console
 We may get called in atomic context 
   Generic 1-bit or 8-bit source to 1-32 bit destination expansion
   for frame buffer located in system RAM with packed pixels of any depth.
   Based almost entirely on cfbimgblt.c
       Copyright (C)  April 2007 Antonino Daplas <adaplas@pol.net>
   This file is subject to the terms and conditions of the GNU General Public
   License.  See the file COPYING in the main directory of this archive for
   more details.
 Draw the penguin 
 write leading bits 
 Did the bitshift spill bits to the next long? 
 write trailing bits 
  fast_imageblit - optimized monochrome color expansion
  Only if:  bits_per_pixel == 8, 16, or 32
            image->width is divisible by pixeldword (ppw);
            fix->line_legth is divisible by 4;
            beginning and end of a scanline is dword aligned
  linuxdriversvideoconsolesoftcursor.c
  Generic software cursor for frame buffer devices
   Created 14 Nov 2002 by James Simmons
  This file is subject to the terms and conditions of the GNU General
  Public License.  See the file COPYING in the main directory of this
  archive for more details.
   Generic BitBLT function for frame buffer with packed pixels of any depth.
       Copyright (C)  June 1999 James Simmons
   This file is subject to the terms and conditions of the GNU General Public
   License.  See the file COPYING in the main directory of this archive for
   more details.
  NOTES:
     This function copys a image from system memory to video memory. The
   image can be a bitmap where each 0 represents the background color and
   each 1 represents the foreground color. Great for font handling. It can
   also be a color image. This is determined by image_depth. The color image
   must be laid out exactly in the same format as the framebuffer. Yes I know
   their are cards with hardware that coverts images of various depths to the
   framebuffer depth. But not every card has this. All images must be rounded
   up to the nearest byte. For example a bitmap 12 bits wide must be two 
   bytes width. 
   Tony: 
   Incorporate mask tables similar to fbcon-cfb.c in 2.4 API.  This speeds 
   up the code significantly.
   Code for depths not multiples of BITS_PER_LONG is still kludgy, which is
   still processed a bit at a time.   
   Also need to add code to deal with cards endians that are different than
   the native cpu endians. I also need to deal with MSB position in the word.
 Draw the penguin 
 write leading bits 
 Did the bitshift spill bits to the next long? 
 write trailing bits 
  fast_imageblit - optimized monochrome color expansion
  Only if:  bits_per_pixel == 8, 16, or 32
            image->width is divisible by pixeldword (ppw);
            fix->line_legth is divisible by 4;
            beginning and end of a scanline is dword aligned
   linuxdriversvideomodedb.c -- Standard video mode database management
 	Copyright (C) 1999 Geert Uytterhoeven
 	2001 - Documented with DocBook
 	- Brad Douglas <brad@neruo.com>
   This file is subject to the terms and conditions of the GNU General Public
   License. See the file COPYING in the main directory of this archive for
   more details.
   Standard video mode definitions (taken from XFree86)
 640x400 @ 70 Hz, 31.5 kHz hsync 
 640x480 @ 60 Hz, 31.5 kHz hsync 
 800x600 @ 56 Hz, 35.15 kHz hsync 
 1024x768 @ 87 Hz interlaced, 35.5 kHz hsync 
 640x400 @ 85 Hz, 37.86 kHz hsync 
 640x480 @ 72 Hz, 36.5 kHz hsync 
 640x480 @ 75 Hz, 37.50 kHz hsync 
 800x600 @ 60 Hz, 37.8 kHz hsync 
 640x480 @ 85 Hz, 43.27 kHz hsync 
 1152x864 @ 89 Hz interlaced, 44 kHz hsync 
 800x600 @ 72 Hz, 48.0 kHz hsync 
 1024x768 @ 60 Hz, 48.4 kHz hsync 
 640x480 @ 100 Hz, 53.01 kHz hsync 
 1152x864 @ 60 Hz, 53.5 kHz hsync 
 800x600 @ 85 Hz, 55.84 kHz hsync 
 1024x768 @ 70 Hz, 56.5 kHz hsync 
 1280x1024 @ 87 Hz interlaced, 51 kHz hsync 
 800x600 @ 100 Hz, 64.02 kHz hsync 
 1024x768 @ 76 Hz, 62.5 kHz hsync 
 1152x864 @ 70 Hz, 62.4 kHz hsync 
 1280x1024 @ 61 Hz, 64.2 kHz hsync 
 1400x1050 @ 60Hz, 63.9 kHz hsync 
 1400x1050 @ 75,107 Hz, 82,392 kHz +hsync +vsync
 1400x1050 @ 60 Hz, ? kHz +hsync +vsync
 1024x768 @ 85 Hz, 70.24 kHz hsync 
 1152x864 @ 78 Hz, 70.8 kHz hsync 
 1280x1024 @ 70 Hz, 74.59 kHz hsync 
 1600x1200 @ 60Hz, 75.00 kHz hsync 
 1152x864 @ 84 Hz, 76.0 kHz hsync 
 1280x1024 @ 74 Hz, 78.85 kHz hsync 
 1024x768 @ 100Hz, 80.21 kHz hsync 
 1280x1024 @ 76 Hz, 81.13 kHz hsync 
 1600x1200 @ 70 Hz, 87.50 kHz hsync 
 1152x864 @ 100 Hz, 89.62 kHz hsync 
 1280x1024 @ 85 Hz, 91.15 kHz hsync 
 1600x1200 @ 75 Hz, 93.75 kHz hsync 
 1680x1050 @ 60 Hz, 65.191 kHz hsync 
 1600x1200 @ 85 Hz, 105.77 kHz hsync 
 1280x1024 @ 100 Hz, 107.16 kHz hsync 
 1800x1440 @ 64Hz, 96.15 kHz hsync  
 1800x1440 @ 70Hz, 104.52 kHz hsync  
 512x384 @ 78 Hz, 31.50 kHz hsync 
 512x384 @ 85 Hz, 34.38 kHz hsync 
 320x200 @ 70 Hz, 31.5 kHz hsync, 8:5 aspect ratio 
 320x240 @ 60 Hz, 31.5 kHz hsync, 4:3 aspect ratio 
 320x240 @ 72 Hz, 36.5 kHz hsync 
 400x300 @ 56 Hz, 35.2 kHz hsync, 4:3 aspect ratio 
 400x300 @ 60 Hz, 37.8 kHz hsync 
 400x300 @ 72 Hz, 48.0 kHz hsync 
 480x300 @ 56 Hz, 35.2 kHz hsync, 8:5 aspect ratio 
 480x300 @ 60 Hz, 37.8 kHz hsync 
 480x300 @ 63 Hz, 39.6 kHz hsync 
 480x300 @ 72 Hz, 48.0 kHz hsync 
 1920x1200 @ 60 Hz, 74.5 Khz hsync 
 1152x768, 60 Hz, PowerBook G4 Titanium I and II 
 1366x768, 60 Hz, 47.403 kHz hsync, WXGA 16:9 aspect ratio 
 1280x800, 60 Hz, 47.403 kHz hsync, WXGA 16:10 aspect ratio 
 720x576i @ 50 Hz, 15.625 kHz hsync (PAL RGB) 
 800x520i @ 50 Hz, 15.625 kHz hsync (PAL RGB) 
 864x480 @ 60 Hz, 35.15 kHz hsync 
 0 640x350-85 VESA 
 1 640x400-85 VESA 
 2 720x400-85 VESA 
 3 640x480-60 VESA 
 4 640x480-72 VESA 
 5 640x480-75 VESA 
 6 640x480-85 VESA 
 7 800x600-56 VESA 
 8 800x600-60 VESA 
 9 800x600-72 VESA 
 10 800x600-75 VESA 
 11 800x600-85 VESA 
 12 1024x768i-43 VESA 
 13 1024x768-60 VESA 
 14 1024x768-70 VESA 
 15 1024x768-75 VESA 
 16 1024x768-85 VESA 
 17 1152x864-75 VESA 
 18 1280x960-60 VESA 
 19 1280x960-85 VESA 
 20 1280x1024-60 VESA 
 21 1280x1024-75 VESA 
 22 1280x1024-85 VESA 
 23 1600x1200-60 VESA 
 24 1600x1200-65 VESA 
 25 1600x1200-70 VESA 
 26 1600x1200-75 VESA 
 27 1600x1200-85 VESA 
 28 1792x1344-60 VESA 
 29 1792x1344-75 VESA 
 30 1856x1392-60 VESA 
 31 1856x1392-75 VESA 
 32 1920x1440-60 VESA 
 33 1920x1440-75 VESA 
 34 1920x1200-60 RB VESA 
 35 1920x1200-60 VESA 
 36 1920x1200-75 VESA 
 37 1920x1200-85 VESA 
 38 2560x1600-60 RB VESA 
 39 2560x1600-60 VESA 
 40 2560x1600-75 VESA 
 41 2560x1600-85 VESA 
 42 2560x1600-120 RB VESA 
 CONFIG_FB_MODE_HELPERS 
 	fb_try_mode - test a video mode
 	@var: frame buffer user defined part of display
 	@info: frame buffer info structure
 	@mode: frame buffer video mode structure
 	@bpp: color depth in bits per pixel
 	Tries a video mode to test it's validity for device @info.
 	Returns 1 on success.
  fb_find_mode - finds a valid video mode
  @var: frame buffer user defined part of display
  @info: frame buffer info structure
  @mode_option: string video mode to find
  @db: video mode database
  @dbsize: size of @db
  @default_mode: default video mode to fall back to
  @default_bpp: default color depth in bits per pixel
  Finds a suitable video mode, starting with the specified mode
  in @mode_option with fallback to @default_mode.  If
  @default_mode fails, all modes in the video mode database will
  be tried.
  Valid mode specifiers for @mode_option::
      <xres>x<yres>[M][R][-<bpp>][@<refresh>][i][p][m]
  or ::
      <name>[-<bpp>][@<refresh>]
  with <xres>, <yres>, <bpp> and <refresh> decimal numbers and
  <name> a string.
  If 'M' is present after yres (and before refreshbpp if present),
  the function will compute the timings using VESA(tm) Coordinated
  Video Timings (CVT).  If 'R' is present after 'M', will compute with
  reduced blanking (for flatpanels).  If 'i' or 'p' are present, compute
  interlaced or progressive mode.  If 'm' is present, add margins equal
  to 1.8% of xres rounded down to 8 pixels, and 1.8% of yres. The char
  'i', 'p' and 'm' must be after 'M' and 'R'. Example::
      1024x768MR-8@60m - Reduced blank with margins at 60Hz.
  NOTE: The passed struct @var is _not_ cleared!  This allows you
  to supply values for e.g. the grayscale and accel_flags fields.
  Returns zero for failure, 1 if using specified @mode_option,
  2 if using specified @mode_option with an ignored refresh rate,
  3 if default mode is used, 4 if fall back to any valid mode.
 Set up defaults 
 Did the user specify a video mode? 
			
			  If the caller has provided a custom mode database and
			  a valid monspecs structure, we look for the mode with
			  the highest refresh rate.  Otherwise we play it safe
			  it and try to find a mode with a refresh rate closest
			  to the standard 60 Hz.
				
				  Penalize modes with resolutions smaller
				  than requested.
  fb_var_to_videomode - convert fb_var_screeninfo to fb_videomode
  @mode: pointer to struct fb_videomode
  @var: pointer to struct fb_var_screeninfo
  fb_videomode_to_var - convert fb_videomode to fb_var_screeninfo
  @var: pointer to struct fb_var_screeninfo
  @mode: pointer to struct fb_videomode
  fb_mode_is_equal - compare 2 videomodes
  @mode1: first videomode
  @mode2: second videomode
  RETURNS:
  1 if equal, 0 if not
  fb_find_best_mode - find best matching videomode
  @var: pointer to struct fb_var_screeninfo
  @head: pointer to struct list_head of modelist
  RETURNS:
  struct fb_videomode, NULL if none found
  IMPORTANT:
  This function assumes that all modelist entries in
  info->modelist are valid.
  NOTES:
  Finds best matching videomode which has an equal or greater dimension than
  var->xres and var->yres.  If more than 1 videomode is found, will return
  the videomode with the highest refresh rate
  fb_find_nearest_mode - find closest videomode
  @mode: pointer to struct fb_videomode
  @head: pointer to modelist
  Finds best matching videomode, smaller or greater in dimension.
  If more than 1 videomode is found, will return the videomode with
  the closest refresh rate.
  fb_match_mode - find a videomode which exactly matches the timings in var
  @var: pointer to struct fb_var_screeninfo
  @head: pointer to struct list_head of modelist
  RETURNS:
  struct fb_videomode, NULL if none found
  fb_add_videomode - adds videomode entry to modelist
  @mode: videomode to add
  @head: struct list_head of modelist
  NOTES:
  Will only add unmatched mode entries
  fb_delete_videomode - removed videomode entry from modelist
  @mode: videomode to remove
  @head: struct list_head of modelist
  NOTES:
  Will remove all matching mode entries
  fb_destroy_modelist - destroy modelist
  @head: struct list_head of modelist
  fb_videomode_to_modelist - convert mode array to mode list
  @modedb: array of struct fb_videomode
  @num: number of entries in array
  @head: struct list_head of modelist
 get the first detailed mode and the very first mode 
 first detailed timing is preferred 
 find best mode based on display width and height 
 use first detailed mode 
 last resort, use the very first mode 
   linuxdriversvideoconsolefbcon_rotate.c -- Software Rotation
       Copyright (C) 2005 Antonino Daplas <adaplas @pol.net>
   This file is subject to the terms and conditions of the GNU General Public
   License.  See the file COPYING in the main directory of this archive for
   more details.
  linuxdriversvideofbcvt.c - VESA(TM) Coordinated Video Timings
  Copyright (C) 2005 Antonino Daplas <adaplas@pol.net>
       Based from the VESA(TM) Coordinated Video Timing Generator by
       Graham Loveridge April 9, 2003 available at
       http:www.elo.utfsm.cl~elo212docsCVTd6r1.xls
  This file is subject to the terms and conditions of the GNU General Public
  License.  See the file COPYING in the main directory of this archive
  for more details.
 4:3      
 16:9     
 16:10    
 5:4      
 15:9     
 reserved 
 reserved 
 custom   
 returns hperiod  1000 
 returns ideal duty cycle  1000 
  fb_find_mode_cvt - calculate mode using VESA(TM) CVT
  @mode: pointer to fb_videomode; xres, yres, refresh and vmode must be
         pre-filled with the desired values
  @margins: add margin to calculation (1.8% of xres and yres)
  @rb: compute with reduced blanking (for flatpanels)
  RETURNS:
  0 for success
  @mode is filled with computed values.  If interlaced, the refresh field
  will be filled with the field rate (2x the frame rate)
  DESCRIPTION:
  Computes video timings using VESA(TM) Coordinated Video Timings
   linuxdriversvideofb_notify.c
   Copyright (C) 2006 Antonino Daplas <adaplas@pol.net>
 	2001 - Documented with DocBook
 	- Brad Douglas <brad@neruo.com>
  This file is subject to the terms and conditions of the GNU General Public
  License.  See the file COPYING in the main directory of this archive
  for more details.
 	fb_register_client - register a client notifier
 	@nb: notifier block to callback on events
 	Return: 0 on success, negative error code on failure.
 	fb_unregister_client - unregister a client notifier
 	@nb: notifier block to callback on events
 	Return: 0 on success, negative error code on failure.
  fb_notifier_call_chain - notify clients of fb_events
  @val: value passed to callback
  @v: pointer passed to callback
  Return: The return value of the last notifier function
   linuxdriversvideofb_defio.c
   Copyright (C) 2006 Jaya Kumar
  This file is subject to the terms and conditions of the GNU General Public
  License. See the file COPYING in the main directory of this archive
  for more details.
 to support deferred IO 
 this is to find and return the vmalloc-ed fb pages 
 Skip if deferred io is compiled-in but disabled on this fbdev 
 Kill off the delayed work 
 Run it immediately 
 vm_ops->page_mkwrite handler 
	 this is a callback we get when userspace first tries to
	write to the page. we schedule a workqueue. that workqueue
	will eventually mkclean the touched pages and execute the
	deferred framebuffer IO. then if userspace touches a page
 protect against the workqueue changing the page list 
 first write in this cycle, notify the driver 
	
	  We want the page to remain locked from ->page_mkwrite until
	  the PTE is marked dirty to avoid page_mkclean() being called
	  before the PTE is updated, which would leave the page ignored
	  by defio.
	  Do this by locking the page here and informing the caller
	  about it with VM_FAULT_LOCKED.
	 we loop through the pagelist before adding in order
		 this check is to catch the case where a new
		process could start writing to the same page
		through a new pte. this new access can cause the
		mkwrite even when the original ps's pte is marked
 come back after delay to process the deferred IO 
 workqueue callback 
 here we mkclean the pages, then do all deferred IO 
 driver's callback with pagelist 
 clear the list 
 set a default of 1 s 
 clear out the mapping that we setup 
  linuxdriversvideofb_sys_read.c - Generic file operations where
  framebuffer is in system RAM
  Copyright (C) 2007 Antonino Daplas <adaplas@pol.net>
  This file is subject to the terms and conditions of the GNU General Public
  License.  See the file COPYING in the main directory of this archive
  for more details.
   linuxdriversvideoconsoletileblit.c -- Tile Blitting Operation
       Copyright (C) 2004 Antonino Daplas <adaplas @pol.net>
   This file is subject to the terms and conditions of the GNU General Public
   License.  See the file COPYING in the main directory of this archive for
   more details.
   linuxdriversvideofb_cmdline.c
   Copyright (C) 2014 Intel Corp
   Copyright (C) 1994 Martin Schaller
 	2001 - Documented with DocBook
 	- Brad Douglas <brad@neruo.com>
  This file is subject to the terms and conditions of the GNU General Public
  License.  See the file COPYING in the main directory of this archive
  for more details.
  Authors:
     Vetter <danie.vetter@ffwll.ch>
  fb_get_options - get kernel boot parameters
  @name:   framebuffer name as it would appear in
           the boot parameter line
           (video=<name>:<options>)
  @option: the option will be stored here
  NOTE: Needed to maintain backwards compatibility
 No match, pass global option 
 	video_setup - process command line options
 	@options: string of options
 	Process command line options for frame buffer subsystem.
 	NOTE: This function is a __setup and __init function.
             It only stores the options.  Drivers have to call
             fb_get_options() as necessary.
 named 
 global 
  Common utility functions for VGA-based graphics cards.
  Copyright (c) 2006-2007 Ondrej Zajicek <santiago@crfreenet.org>
  This file is subject to the terms and conditions of the GNU General Public
  License.  See the file COPYING in the main directory of this archive for
  more details.
  Some parts are based on David Boucher's viafb (http:davesdomain.org.ukviafb)
 Write a CRT register value spread across multiple registers 
 Write a sequencer register value spread across multiple registers 
 ------------------------------------------------------------------------- 
 Set graphics controller registers to sane values 
 All standard GFX registers (GR00 - GR08) 
	vga_wgfx(regbase, VGA_GFX_MODE, 0x20); 
	vga_wgfx(regbase, VGA_GFX_MODE, 0x40); 
	vga_wgfx(regbase, VGA_GFX_MISC, 0x01); 
 Set attribute controller registers to sane values 
 All standard ATC registers (AR00 - AR14) 
	svga_wattr(regbase, VGA_ATC_MODE, 0x41); 
 Set sequencer registers to sane values 
 Standard sequencer registers (SR01 - SR04), SR00 is not set 
	vga_wseq(regbase, VGA_SEQ_MEMORY_MODE, VGA_SR04_EXT_MEM | VGA_SR04_SEQ_MODE | VGA_SR04_CHN_4M); 
 Set CRTC registers to sane values 
 Standard CRT registers CR03 CR08 CR09 CR14 CR17 
 Enable vertical retrace EVRA 
 svga_wseq_mask(regbase, 0x1, 0x00, 0x01);    
 0x4f 
 Oddeven memory mode 
 Misc graphics register - text mode enable 
 Attribute Mode Control Register - text mode, blinking and line graphics 
 Horizontal Pixel Panning Register  
  0  
 ------------------------------------------------------------------------- 
			fb[i  4] = font[i];
 Copy area in text (tileblit) mode 
  colstride is halved in this function because u16 are used 
			dst2 = src2;
 Fill area in text (tileblit) mode 
 Write text in text (tileblit) mode 
 Set cursor in text (tileblit) mode 
 disable cursor 
 set cursor position 
 set cursor end 
 set cursor start and enable it 
 Get capabilities of accelerator based on the mode 
 can only support 256 8x16 bitmap 
 ------------------------------------------------------------------------- 
   Compute PLL settings (M, N, R)
   F_VCO = (F_BASE  M)  N
   F_OUT = F_VCO  (2^R)
 overflow check 
	 It is usually better to have greater VCO clock
	   because of better frequency stability.
 VCO bounds check 
 ------------------------------------------------------------------------- 
 Check CRT timing values 
 Check horizontal total 
 Check horizontal display and blank start 
 Check horizontal sync start 
 Check horizontal blank end (or length) 
 Check horizontal sync end (or length) 
 Check vertical total 
 Check vertical display and blank start 
 Check vertical sync start 
 Check vertical blank end (or length) 
 Check vertical sync end  (or length) 
 Set CRT timing registers 
 Set horizontal and vertical sync pulse polarity in misc register 
 ------------------------------------------------------------------------- 
   Generic fillrect for frame buffers with packed pixels of any depth.
       Copyright (C)  2000 James Simmons (jsimmons@linux-fbdev.org)
   This file is subject to the terms and conditions of the GNU General Public
   License.  See the file COPYING in the main directory of this archive for
   more details.
  NOTES:
   Also need to add code to deal with cards endians that are different than
   the native cpu endians. I also need to deal with MSB position in the word.
       Aligned pattern fill using 3264-bit memory accesses
 Single word
 Multiple destination words
 Leading bits
 Main chunk
 Trailing bits
       Unaligned generic pattern fill using 3264-bit memory accesses
       The pattern must have been expanded to a full 3264-bit value
       Leftright are the appropriate shifts to convert to the pattern to be
       used for the next 3264-bit word
 Single word
 Multiple destination words
 Leading bits
 Main chunk
 Trailing bits
       Aligned pattern invert using 3264-bit memory accesses
 Single word
 Multiple destination words
 Leading bits
 Main chunk
 Trailing bits
       Unaligned generic pattern invert using 3264-bit memory accesses
       The pattern must have been expanded to a full 3264-bit value
       Leftright are the appropriate shifts to convert to the pattern to be
       used for the next 3264-bit word
 Single word
 Multiple destination words
 Leading bits
 Main chunk
 Trailing bits
 FIXME For now we support 1-32 bpp only 
 rotate pattern to the correct start position 
  driversvideofb_ddc.c - DDCEDID read support.
   Copyright (C) 2006 Dennis Munsie <dmunsie@cecropia.com>
  This file is subject to the terms and conditions of the GNU General Public
  License.  See the file COPYING in the main directory of this archive
  for more details.
		 For some old monitors we need the
		  following process to initializestop DDC
 Do the real work 
	 Release the DDC lines when done or the Apple Cinema HD display
	  will switch off
   linuxdriversvideofbmem.c
   Copyright (C) 1994 Martin Schaller
 	2001 - Documented with DocBook
 	- Brad Douglas <brad@neruo.com>
  This file is subject to the terms and conditions of the GNU General Public
  License.  See the file COPYING in the main directory of this archive
  for more details.
       Frame buffer device initialization and setup routines
  Helpers
  Data padding functions.
  we need to lock this section since fb_cursor
  may use fb_imageblit()
	 If IO mapped, we need to sync before access, no sharing of
	  the pixmap is done
 See if we fit in the remaining pixmap space 
		 We do not fit. In order to be able to re-use the buffer,
		  we must ensure no asynchronous DMA'ing or whatever operation
		  is in progress, we sync for that.
 palette_cmap provides space for only 16 colors at once 
	
	  We have to create a temporary palette since console palette is only
	  16 colors long.
 Bug: Doesn't obey msb_right ... (who needs that?) 
  Three (3) kinds of logo maps exist.  linux_logo_clut224 (>16 colors),
  linux_logo_vga16 (16 colors) and linux_logo_mono (2 colors).  Depending on
  the visual format and color depth of the framebuffer, the DAC, the
  pseudo_palette, and the logo data will be adjusted accordingly.
  Case 1 - linux_logo_clut224:
  Color exceeds the number of console colors (16), thus we set the hardware DAC
  using fb_set_cmap() appropriately.  The "needs_cmapreset"  flag will be set.
  For visuals that require color info from the pseudo_palette, we also construct
  one for temporary use. The "needs_directpalette" or "needs_truepalette" flags
  will be set.
  Case 2 - linux_logo_vga16:
  The number of colors just matches the console colors, thus there is no need
  to set the DAC or the pseudo_palette.  However, the bitmap is packed, ie,
  each byte contains color information for two pixels (upper and lower nibble).
  To be consistent with fb_imageblit() usage, we therefore separate the two
  nibbles into separate bytes. The "depth" flag will be set to 4.
  Case 3 - linux_logo_mono:
  This is similar with Case 2.  Each byte contains information for 8 pixels.
  We isolate each bit and expand each into a byte. The "depth" flag will
  be set to 1.
 Return if the frame buffer is not mapped or suspended 
 FIXME: logo_ex supports only truecolor fb. 
 !CONFIG_FB_LOGO_EXTRA 
 CONFIG_FB_LOGO_EXTRA 
 assume console colormap 
 Return if no suitable logo was found 
 What depth we asked for might be different from what we get 
 CONFIG_LOGO 
  We hold a reference to the fb_info in file->private_data,
  but if the current registered fb has changed, we don't
  actually want to use it.
  So look up the fb_info using the inode minor number,
  and just verify it against the reference we have.
 make sure we don't delete the videomode of current var 
	 When using FOURCC mode, make sure the red, green, blue and
	  transp fields are set to 0.
 bitfill_aligned() assumes that it's at least 8x8 
 Too huge resolution causes multiplication overflow. 
 might again call into fb_blank 
		
		  The framebuffer needs to be accessed decrypted, be sure
		  SME protection is removed ahead of the call
	
	  Ugh. This can be either the frame buffer mapping, or
	  if pgoff points past it, the mmio mapping.
 __BIG_ENDIAN 
 is the generic aperture base the same as the HW one 
 is the generic aperture base inside the hw base->hw base+size 
 check all firmware fbs and kick off if the base addr overlaps 
 Not fatal 
 this may free fb info 
  remove_conflicting_framebuffers - remove firmware-configured framebuffers
  @a: memory range, users of which are to be removed
  @name: requesting driver name
  @primary: also kick vga16fb if present
  This function removes framebuffer devices (initialized by firmwarebootloader)
  which use memory range described by @a. If @a is NULL all such devices are
  removed.
  remove_conflicting_pci_framebuffers - remove firmware-configured framebuffers for PCI devices
  @pdev: PCI device
  @name: requesting driver name
  This function removes framebuffer devices (eg. initialized by firmware)
  using memory range configured for any of @pdev's memory bars.
  The function assumes that PCI device with shadowed ROM drives a primary
  display and so kicks out vga16fb.
 	register_framebuffer - registers a frame buffer device
 	@fb_info: frame buffer info structure
 	Registers a frame buffer device @fb_info.
 	Returns negative errno on error, or zero for success.
 	unregister_framebuffer - releases a frame buffer device
 	@fb_info: frame buffer info structure
 	Unregisters a frame buffer device @fb_info.
 	Returns negative errno on error, or zero for success.
       This function will also notify the framebuffer console
       to release the driver.
       This is meant to be called within a driver's module_exit()
       function. If this is called outside module_exit(), ensure
       that the driver implements fb_open() and fb_release() to
       check that no processes are using the device.
 	fb_set_suspend - low level driver signals suspend
 	@info: framebuffer affected
 	@state: 0 = resuming, !=0 = suspending
 	This is meant to be used by low level drivers to
  	signal suspendresume to the core & clients.
 	It must be called with the console semaphore held
 	fbmem_init - init frame buffer subsystem
 	Initialize the frame buffer subsystem.
 	NOTE: This function is _only_ to be called by driverscharmem.c.
   linuxdriversvideoconsolefbcon_ud.c -- Software Rotation - 90 degrees
       Copyright (C) 2005 Antonino Daplas <adaplas @pol.net>
   This file is subject to the terms and conditions of the GNU General Public
   License.  See the file COPYING in the main directory of this archive for
   more details.
  Rotation 90 degrees
	 buf is always NULL except when in monochrome mode, so in this case
	   it's a gain to check buf against NULL even though kfree() handles
  linuxdriversvideorivafbdev.c - nVidia RIVA 128TNTTNT2 fb driver
  Maintained by Ani Joshi <ajoshi@shell.unixbox.com>
  Copyright 1999-2000 Jeff Garzik
  Contributors:
 	Ani Joshi:  Lots of debugging and cleanup work, really helped
 	get the driver going
 	Ferenc Bakonyi:  Bug fixes, cleanup, modularization
 	Jindrich Makovicka:  Accel code help, hw cursor, mtrr
 	Paul Richards:  Bug fixes, updates
  Initial template from skeletonfb.c, created 28 Dec 1997 by Geert Uytterhoeven
  Includes riva_hw.c from nVidia, see copyright below.
  KGI code provided the basis for state storage, init, and mode switching.
  This file is subject to the terms and conditions of the GNU General Public
  License.  See the file COPYING in the main directory of this archive
  for more details.
  Known bugs and issues:
 	restoring text mode fails
 	doublescan modes are broken
 version number of this driver 
 ------------------------------------------------------------------------- 
  various helpful macros and constants
 macro that allows you to set overflow bits 
 HW cursor parameters 
 ------------------------------------------------------------------------- 
  prototypes
 ------------------------------------------------------------------------- 
  card identification
 NF2IGP version, GeForce 4 MX, NV18
 terminate list 
 ------------------------------------------------------------------------- 
  global variables
 command line data, set in rivafb_setup() 
 Autodetect later 
 from GGI 
 ATTR 
 CRT  
 0x10 
 0x20 
 0x30 
 0x40 
 GRA  
 SEQ  
 MISC 
  Backlight control
 We do not have any information about which values are allowed, thus
  we used safe values.
 Get and convert the value 
 No locking on bl_curve since accessing a single value 
 backlight bit 
 level 
 CONFIG_FB_RIVA_BACKLIGHT 
 ------------------------------------------------------------------------- 
  MMIO access macros
 ------------------------------------------------------------------------- 
  cursor stuff
  rivafb_load_cursor_image - load cursor image to hardware
  @data8: address to monochrome bitmap (1 = foreground color, 0 = background)
  @par:  pointer to private data
  @w:    width of cursor image in pixels
  @h:    height of cursor image in scanlines
  @bg:   background color (ARGB1555) - alpha bit determines opacity
  @fg:   foreground color (ARGB1555)
  DESCRIPTiON:
  Loads cursor image based on a monochrome source and mask bitmap.  The
  image bits determines the color of the pixel, 0 for background, 1 for
  foreground.  Only the affected region (as determined by @w and @h 
  parameters) will be updated.
  CALLED FROM:
  rivafb_cursor()
 ------------------------------------------------------------------------- 
  general utility functions
  riva_wclut - set CLUT entry
  @chip: pointer to RIVA_HW_INST object
  @regnum: register number
  @red: red component
  @green: green component
  @blue: blue component
  DESCRIPTION:
  Sets color register @regnum.
  CALLED FROM:
  rivafb_setcolreg()
  riva_rclut - read fromCLUT register
  @chip: pointer to RIVA_HW_INST object
  @regnum: register number
  @red: red component
  @green: green component
  @blue: blue component
  DESCRIPTION:
  Reads red, green, and blue from color register @regnum.
  CALLED FROM:
  rivafb_setcolreg()
  riva_save_state - saves current chip state
  @par: pointer to riva_par object containing info for current riva board
  @regs: pointer to riva_regs object
  DESCRIPTION:
  Saves current chip state to @regs.
  CALLED FROM:
  rivafb_probe()
 from GGI 
  riva_load_state - loads current chip state
  @par: pointer to riva_par object containing info for current riva board
  @regs: pointer to riva_regs object
  DESCRIPTION:
  Loads chip state from @regs.
  CALLED FROM:
  riva_load_video_mode()
  rivafb_probe()
  rivafb_remove()
 from GGI 
  riva_load_video_mode - calculate timings
  @info: pointer to fb_info object containing info for current riva board
  DESCRIPTION:
  Calculate some timings and then send em off to riva_load_state().
  CALLED FROM:
  rivafb_set_par()
 time to calculate 
 interlace off 
 important for HW cursor 
  rivafb_do_maximize - 
  @info: pointer to fb_info object containing info for current riva board
  @var: standard kernel fb changeable data
  @nom: nom
  @den: den
  DESCRIPTION:
  .
  RETURNS:
  -EINVAL on failure, 0 on success
  CALLED FROM:
  rivafb_check_var()
 use highest possible virtual resolution 
 acceleration routines 
  Set ROP.  Translate X rop into ROP3.  Internal routine.
  riva_get_cmap_len - query current color map length
  @var: standard kernel fb changeable data
  DESCRIPTION:
  Get current color map length.
  RETURNS:
  Length of color map
  CALLED FROM:
  rivafb_setcolreg()
 reasonable default 
 256 entries (2^8), 8 bpp and RGB8888 
 32 entries (2^5), 16 bpp, RGB555 
 64 entries (2^6), 16 bpp, RGB565 
 should not occur 
 ------------------------------------------------------------------------- 
  framebuffer operations
 save the DAC for Riva128 
 vgaHWunlock() + riva unlock (0x7F) 
 translating from pixels->bytes 
 The Riva128 supports RGB555 only 
 0rrrrrgg gggbbbbb 
 rrrrrggg gggbbbbb 
 calculate modeline if supported by monitor 
 truncate xoffset and yoffset to maximum if too high 
 vgaHWunlock() + riva unlock (0x7F) 
  rivafb_pan_display
  @var: standard kernel fb changeable data
  @info: pointer to fb_info object containing info for current riva board
  DESCRIPTION:
  Pan (or wrap, depending on the `vmode' field) the display using the
  `xoffset' and `yoffset' fields of the `var' structure.
  If the values don't fit, return -EINVAL.
  This call looks only at xoffset, yoffset and the FB_VMODE_YWRAP flag
 screen onoff 
 sync onoff 
  rivafb_setcolreg
  @regno: register index
  @red: red component
  @green: green component
  @blue: blue component
  @transp: transparency
  @info: pointer to fb_info object containing info for current riva board
  DESCRIPTION:
  Set a single color register. The values supplied have a 16 bit
  magnitude.
  RETURNS:
  Return != 0 for invalid regno.
  CALLED FROM:
  fbcmap.c:fb_set_cmap()
 gray = 0.30R + 0.59G + 0.11B 
		
		  The Riva128 2D engine requires color information in
		  TrueColor format even if framebuffer is in DirectColor
 "transparent" stuff is completely ignored. 
 do nothing 
  rivafb_fillrect - hardware accelerated color fill function
  @info: pointer to fb_info structure
  @rect: pointer to fb_fillrect structure
  DESCRIPTION:
  This function fills up a region of framebuffer memory with a solid
  color with a choice of two different ROP's, copy or invert.
  CALLED FROM:
  framebuffer hook
  rivafb_copyarea - hardware accelerated blit function
  @info: pointer to fb_info structure
  @region: pointer to fb_copyarea structure
  DESCRIPTION:
  This copies an area of pixels from one location to another
  CALLED FROM:
  framebuffer hook
  rivafb_imageblit: hardware accelerated color expand function
  @info: pointer to fb_info structure
  @image: pointer to fb_image structure
  DESCRIPTION:
  If the source is a monochrome bitmap, the function fills up a a region
  of framebuffer memory with pixels whose color is determined by the bit
  setting of the bitmap, 1 - foreground, 0 - background.
  If the source is not a monochrome bitmap, color expansion is not done.
  In this case, it is channeled to a software function.
  CALLED FROM:
  framebuffer hook
  rivafb_cursor - hardware cursor function
  @info: pointer to info structure
  @cursor: pointer to fbcursor structure
  DESCRIPTION:
  A cursor function that supports displaying a cursor image via hardware.
  Within the kernel, copy and invert rops are supported.  If exported
  to user space, only the copy rop will be supported.
  CALLED FROM
  framebuffer hook
 ------------------------------------------------------------------------- 
  initialization helper functions
 kernel interface 
 Accel seems to not work properly on NV30 yet...
 CONFIG_FB_RIVA_I2C 
 respect mode options 
 get first mode in database as fallback 
 get preferred timing 
 if user specified flatpanel, we respect that 
 ------------------------------------------------------------------------- 
  PCI bus
 GeForce 256 
 GeForce2 MX 
 GeForce2 
 GeForce4 MX 
 GeForce4 MX (8x AGP) 
 nForce 
 nForce2 
 GeForce3 
 GeForce4 Ti 
 GeForce4 Ti (8x AGP) 
 GeForceFX 5800 
 GeForceFX 5600 
 GeForceFX 5200 
 GeForceFX 5900 
 GeForceFX 5700 
 TNT, TNT2 
 Riva128 
 unknown architecture 
 enable IO and mem if not already done 
		 Riva128's PRAMIN is in the "framebuffer" space
		  Since these cards were never made with more than 8 megabytes
		  we can safely allocate this separately.
 ------------------------------------------------------------------------- 
  initialization
 !MODULE 
 ------------------------------------------------------------------------- 
  modularization
  linuxdriversvideorivafbdev-i2c.c - nVidia i2c
  Maintained by Ani Joshi <ajoshi@shell.unixbox.com>
  Copyright 2004 Antonino A. Daplas <adaplas @pol.net>
  Based on radeonfb-i2c.c
  This file is subject to the terms and conditions of the GNU General Public
  License.  See the file COPYING in the main directory of this archive
  for more details.
 Raise SCL and SDA 
 $XConsortium: nv_driver.c main3 19961028 05:13:37 kaleb $ 
  Copyright 1996-1997  David J. McKay
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  DAVID J. MCKAY BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
  OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
  GPL licensing note -- nVidia is allowing a liberal interpretation of
  the documentation restriction above, to merely say that this nVidia's
  copyright and disclaimer should be included with all code derived
  from this source.  -- Jeff Garzik <jgarzik@pobox.com>, 01Nov99 
 Hacked together from mga driver and 3.3.4 NVIDIA driver by Jarno Paananen
 $XFree86: xcprogramsXserverhwxfree86driversnvnv_setup.c,v 1.18 2002080
 this might not be a good default for the chips below 
 default 
				
				  SDRAM 128 ZX.
			
			  SGRAM 128.
				
				  SDRAM 128 ZX.
			
			  SGRAM 128.
 known laptop chips 
 Fix me, need x86 DDC code 
 \
|                                                                           |
|       Copyright 1993-1999 NVIDIA, Corporation.  All rights reserved.      |
|                                                                           |
|     NOTICE TO USER:   The source code  is copyrighted under  U.S. and     |
|     international laws.  Users and possessors of this source code are     |
|     hereby granted a nonexclusive,  royalty-free copyright license to     |
|     use this code in individual and commercial software.                  |
|                                                                           |
|     Any use of this source code must include,  in the user documenta-     |
|     tion and  internal comments to the code,  notices to the end user     |
|     as follows:                                                           |
|                                                                           |
|       Copyright 1993-1999 NVIDIA, Corporation.  All rights reserved.      |
|                                                                           |
|     NVIDIA, CORPORATION MAKES NO REPRESENTATION ABOUT THE SUITABILITY     |
|     OF  THIS SOURCE  CODE  FOR ANY PURPOSE.  IT IS  PROVIDED  "AS IS"     |
|     WITHOUT EXPRESS OR IMPLIED WARRANTY OF ANY KIND.  NVIDIA, CORPOR-     |
|     ATION DISCLAIMS ALL WARRANTIES  WITH REGARD  TO THIS SOURCE CODE,     |
|     INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY, NONINFRINGE-     |
|     MENT,  AND FITNESS  FOR A PARTICULAR PURPOSE.   IN NO EVENT SHALL     |
|     NVIDIA, CORPORATION  BE LIABLE FOR ANY SPECIAL,  INDIRECT,  INCI-     |
|     DENTAL, OR CONSEQUENTIAL DAMAGES,  OR ANY DAMAGES  WHATSOEVER RE-     |
|     SULTING FROM LOSS OF USE,  DATA OR PROFITS,  WHETHER IN AN ACTION     |
|     OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,  ARISING OUT OF     |
|     OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOURCE CODE.     |
|                                                                           |
|     U.S. Government  End  Users.   This source code  is a "commercial     |
|     item,"  as that  term is  defined at  48 C.F.R. 2.101 (OCT 1995),     |
|     consisting  of "commercial  computer  software"  and  "commercial     |
|     computer  software  documentation,"  as such  terms  are  used in     |
|     48 C.F.R. 12.212 (SEPT 1995)  and is provided to the U.S. Govern-     |
|     ment only as  a commercial end item.   Consistent with  48 C.F.R.     |
|     12.212 and  48 C.F.R. 227.7202-1 through  227.7202-4 (JUNE 1995),     |
|     all U.S. Government End Users  acquire the source code  with only     |
|     those rights set forth herein.                                        |
|                                                                           |
  GPL licensing note -- nVidia is allowing a liberal interpretation of
  the documentation restriction above, to merely say that this nVidia's
  copyright and disclaimer should be included with all code derived
  from this source.  -- Jeff Garzik <jgarzik@pobox.com>, 01Nov99 
 $XFree86: xcprogramsXserverhwxfree86driversnvriva_hw.c,v 1.33 20020805 20:47:06 mvojkovi Exp $ 
  This file is an OS-agnostic file used to make RIVA 128 and RIVA TNT
  operate identically (except TNT has more memory and better 3D quality.
\
 The video arbitration routines calculate some "magic" numbers.  Fixes      
 the snow seen when accessing the framebuffer without it.                   
 It just works (I hope).                                                    
 freq in KHz 
 lwm detect. 
 lwm -> sync. 
 fbi bus cycles (1 req + 1 busy) 
 2 edge sync.  may be very close to edge so just put one. 
 arb_hp_req 
 ap_hp_req   tiling pipeline 
 tc_req     latency fifo 
 fb_cas_n_  memory request to fbio block 
 sm_d_rdv   data returned from fbio block 
 fb.rd.d.Put_gc   need to accumulate 256 bits for read 
 64 bit bus 
 64 bit bus 
 Margin of error 
 Margin of error 
 mclk_extra = 4;  
 2 edge sync.  may be very close to edge so just put one. 
 fbi_d_rdv_n 
 Fbi_d_rdata 
 crtfifo load 
 Mp can get in with a burst of 8. 
 Extra clocks determined by heuristics 
 Mclk latency in us 
 Minimum Mclk latency in us 
 nvclk latency in us 
 nvclk latency in us 
 Mclk latency in us 
 MBs 
 self generating page miss 
 One higher priority before 
 self generating page miss 
 if MA0 conflict 
 Video has separate read return path 
 Wait for video 
 CRT Page miss 
 other latency 
 fixed point <= float_point - 1.  Fixes that 
 bpp  pclk8 
 self generating page miss 
 MA0 page miss 
 if MA0 conflict 
 fixed point <= float_point - 1.  Fixes that 
           Another concern, only for high pclks so don't do this
           with video:
           What happens if the latency to fetch the cbs is so large that
           fifo empties.  In that case we need to have an alternate clwm value
           based off the total burst fetch
          us_crt = (cbs  1000  1000) (8width)mclk_freq ;
          us_crt = us_crt + us_m + us_n + us_p + (4  1000  1000)mclk_freq;
          clwm_mt = us_crt  crtc_drain_rate(10001000);
          clwm_mt ++;
          if(clwm_mt > clwm)
              clwm = clwm_mt;
 Finally, a heuristic check when width == 64 bits 
Large number to fail 
        Overfill check:
 Amount of overfill 
 pclk cycles to drain 
 bytes drained. 
 Can't adjust anymore! 
 reduce the burst size 
 Have some margin 
 Can't adjust anymore! 
  printf("CRT LWM: %f bytes, prog: 0x%x, bs: 256\n", clwm, data ); 
  printf("VID LWM: %f bytes, prog: 0x%x, bs: %d\n, ", vlwm, data, vbs ); 
\
                          RIVA Mode State Routines                          
  Calculate the Video Clock parameters for the PLL.
 non-zero: MNPclock values assigned.  zero: error (not set) 
  Calculate extended mode parameters (SVGA) and save in a 
  mode state structure.
      Save mode parameters.
 this is not bitsPerPixel, it's 8,15,16,32 
      Extended RIVA registers.
 Paul Richards: below if block borks things in kernel for some reason 
 Tony: Below is needed to set hardware in DirectColor 
  Load fixed function state and pre-calculatedstored state.
              Initialize state for the RivaTriangle3D05 routines.
      Load HW fixed function state.
              Make sure frame buffer config gets set before loading PRAMIN.
              Make sure frame buffer config gets set before loading PRAMIN.
      Load HW mode state.
      Turn off VBlank enable and reset.
      Set interrupt enable.
      Set current state pointer.
      Reset FIFO free and empty counts.
 Free count from first subchannel 
      Save current HW state.
      Unlock extended registers.
      Set start address.
      4 pixel pan register.
\
                      Probe RIVA Chip Configuration                         
      Fill in chip configuration.
              SDRAM 128 ZX.
          SGRAM 128.
      Set chip functions.
      Fill in chip configuration.
      Set chip functions.
 turn on big endian register access 
      Fill in chip configuration.
 can't set this here 
      Set chip functions.
      Save this so future SW know whats it's dealing with.
      Chip specific configuration.
      Fill in FIFO pointers.
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (c) Intel Corp. 2007.
  All Rights Reserved.
  Intel funded Tungsten Graphics (http:www.tungstengraphics.com) to
  develop this driver.
  This file is part of the Vermilion Range fb driver.
  Authors:
    Thomas Hellström <thomas-at-tungstengraphics-dot-com>
    Michel Dänzer <michel-at-tungstengraphics-dot-com>
    Alan Hourihane <alanh-at-tungstengraphics-dot-com>
 #define VERMILION_DEBUG 
  Allocate a contiguous vram area and make its linear kernel map
  uncached.
		
		  Really try hard to get the needed memory.
		  We need memory below the first 32MB, so we
		  add the __GFP_DMA flag that guarantees that we are
		  below the first 16MB.
	
	  It seems like __get_free_pages only ups the usage count
	  of the first page. This doesn't work with fault mapping, so
	  up the usage count once more (XXX: should use split_page or
	  compound page).
	
	  Change caching policy of the linear kernel map to avoid
	  mapping type conflicts with user-space mappings.
  Free a contiguous vram area and reset its linear kernel map
  mapping type.
		
		  Reset the linear kernel map caching policy.
		
		  Decrease the usage count on the pages we've used
		  to compensate for upping when allocating.
  Free allocated vram.
  Allocate vram. Currently we try to allocate contiguous areas from the
  __GFP_DMA zone and puzzle them together. A better approach would be to
  allocate one contiguous area for scanout and use one-page allocations for
  offscreen areas. This requires user-space and GPU virtual mappings.
  Find the GPU to use with our display controller.
  Find a contiguous vram area that contains a given offset from vram start.
  Remap the MMIO register spaces of the VDC and the GPU.
  Unmap the VDC and GPU register spaces.
  Release and uninit the VDC and GPU.
  Free up allocated resources for a device.
  Device initialization.
  We initialize one vml_par struct per device and one vml_info
  struct per pipe. Currently we have only one pipe.
	
	  Save registers here?
	
	  Restore registers here.
	
	  Accept a 20% diff.
 Wait for vblank. For now, just wait for a 50Hz cycle (20ms)) 
 Disable the MDVO pad 
 Disable display planes 
 Wait for vblank for the disable to take effect 
 Next, disable display pipes 
 just to force soft_cursor() call 
	
	  We need to restart list traversal for each item, since we
	  release the list mutex in the loop.
		
		  First, try the current mode which might not be
		  completely validated with respect to the pixel clock.
			
			  Didn't work. Try to find another mode,
			  that matches this subsys.
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (c) Intel Corp. 2007.
  All Rights Reserved.
  Intel funded Tungsten Graphics (http:www.tungstengraphics.com) to
  develop this driver.
  This file is part of the Carillo Ranch video subsystem driver.
  Authors:
    Thomas Hellstrom <thomas-at-tungstengraphics-dot-com>
    Alan Hourihane <alanh-at-tungstengraphics-dot-com>
 The PLL Clock register sits on Host bridge 
	    
	      There are more clocks, but they are disabled on the CR board.
  linuxdriversvideosavagesavagefb-i2c.c - S3 Savage DDC2
  Copyright 2004 Antonino A. Daplas <adaplas @pol.net>
  Based partly on rivafb-i2c.c
  This file is subject to the terms and conditions of the GNU General Public
  License.  See the file COPYING in the main directory of this archive
  for more details.
 I2C serial communications interface 
 DDC2 monitor communications interface 
 based on vt8365 documentation 
 flush posted write 
 flush posted write 
 Raise SCL and SDA 
 try to get from firmware 
-- linux-c --
   linuxdriversvideosavagesavage_accel.c -- Hardware Acceleration
       Copyright (C) 2004 Antonino Daplas<adaplas@pol.net>
       All Rights Reserved
   This file is subject to the terms and conditions of the GNU General Public
   License. See the file COPYING in the main directory of this archive for
   more details.
 ROP_COPY 
 ROP_XOR  
  linuxdriversvideosavagefb.c -- S3 Savage Framebuffer Driver
  Copyright (c) 2001-2002  Denis Oliver Kropp <dok@directfb.org>
                           Sven Neumann <neo@directfb.org>
  Card specific code is based on XFree86's savage driver.
  Framebuffer framework code is based on code of cyber2000fb and tdfxfb.
  This file is subject to the terms and conditions of the GNU General
  Public License.  See the file COPYING in the main directory of this
  archive for more details.
  0.4.0 (neo)
   - hardware accelerated clear and move
  0.3.2 (dok)
   - wait for vertical retrace before writing to cr67
     at the beginning of savagefb_set_par
   - use synchronization registers cr23 and cr26
  0.3.1 (dok)
   - reset 3D engine
   - don't return alpha bits for 32bit format
  0.3.0 (dok)
   - added WaitIdle functions for all Savage types
   - do WaitIdle before mode switching
   - code cleanup
  0.2.0 (dok)
   - first working version
  TODO
  - clock validations in decode_var
  BUGS
  - white margin on bootup
 --------------------------------------------------------------------- 
 --------------------------------------------------------------------- 
 Synchronous Reset 
 End Reset 
		
		  Turn off screen and disable sequencer.
 start synchronous reset 
 disable the display 
		
		  Reenable sequencer, then turn on screen.
 reenable display 
 clear synchronous reset 
	 Ensure CRTC registers 0-7 are unlocked by clearing bit 7 or
	
	  Time Sequencer
 Font select 
 Misc 
	
	  CRTC Controller
	
	  are these unnecessary?
	  vgaHWHBlankKGA(mode, regp, 0, KGA_FIX_OVERSCAN|KGA_ENABLE_ON_ZERO);
	  vgaHWVBlankKGA(mode, regp, 0, KGA_FIX_OVERSCAN|KGA_ENABLE_ON_ZERO);
	
	  Graphics Display Controller
 only map 64k VGA memory !!!! 
 standard colormap translation 
 -------------------- Hardware specific routines ------------------------- 
  Hardware Acceleration for SavageFB
 Wait for fifo space 
 Wait for idle accelerator 
 Disable BCI 
 Setup BCI command overflow buffer 
 Program shadow status update. 
 Enable BCI and command overflow buffer 
 Disable BCI 
 Program shadow status update 
 Enable BCI without the COB 
 Disable BCI 
 Setup BCI command overflow buffer 
 Disable shadow status update 
 Enable BCI and command overflow buffer 
 Turn on 16-bit register access. 
 Set stride to use GBD. 
 Enable 2D engine. 
 Setup plane masks 
 enable all write planes 
 enable all read planes 
 Now set the GBD 
	
	  I don't know why, sending this twice fixes the initial black screen,
	  prevents X from crashing at least in Toshiba laptops with SavageIX.
	  --Tony
 work out suitable timings 
 This function is used to debug, it prints out the contents of s3 regs 
 --------------------------------------------------------------------- 
 unlock extended seq regs 
 now save all the extended regs we need 
 extended mode timing regs 
 save seq extended regs for DCLK PLL programming 
 Save flat panel expansion registers. 
 now save MIU regs 
 unlock extended seq regs 
 now restore all the extended regs we need 
 extended mode timing regs 
 save seq extended regs for DCLK PLL programming 
 Save flat panel expansion registers. 
 now save MIU regs 
 calculate modeline if supported by monitor 
 Is the mode larger than the LCD panel? 
	 we must round yresxres down, we already rounded yxres_virtual up
, refresh; 
 10ns = 100MHz 
	
	  This will allocate the datastructure and initialize all of the
	  generic VGA registers.
 We need to set CR67 whether or not we use the BIOS. 
 8bpp, 2 pixelsclock 
 8bpp, 1 pixelclock 
 15bpp, 2 pixelclock 
 15bpp, 1 pixelsclock 
 16bpp, 2 pixelclock 
 16bpp, 1 pixelsclock 
	
	  Either BIOS use is disabled, or we failed to find a suitable
	  match.  Fall back to traditional register-crunching.
FIXME:psav->pci_burst)
 m = 107; n = 4; r = 2; 
 MCLK == 286000 
      reg->SR11 = 125; 
 display fifo 
 Set frame buffer description. 
 Use GBD 
 --------------------------------------------------------------------- 
     Set a single color register. Return != 0 for invalid regno.
	
	  Some SavageMX and IX systems go nuts when trying to exit the
	  server after WindowMaker has displayed a gradient background.  I
	  haven't been able to find what causes it, but a non-destructive
	  switch to mode 3 here seems to eliminate the issue.
par->CR67 & ~0x0c, par); 
 restore extended regs 
 Restore DCLK registers. 
 Restore flat panel expansion registers. 
 extended mode timing registers 
 restore the desired video mode with cr67 
 following part not present in X11 driver 
 end of part 
 other mode timing and extended regs 
 memory timings 
 unlock extended seq regs 
	 Restore extended sequencer regs for MCLK. SR10 == 255 indicates
	  that we should leave the default SR10 and SR11 values there.
 restore extended seq regs for dclk 
 load new m, n pll values for dclk & mclk 
 now write out cr67 in full, possibly starting STREAMS 
 program the start address registers 
 Set ramdac limits 
     Pan or Wrap the Display
 SR31 bit 4 - FP enable 
 SR31 bit 4 - FP enable 
 --------------------------------------------------------------------- 
 Clear framebuffer, it's all white in memory after boot 
 unprotect CRTC[0-7] 
 unlock extended regs 
 unlock sys regs 
 Unlock system registers. 
 Next go on to detect amount of installed ram 
 for register CR36 (CONFG_REG1), 
 get amount of vram installed 
 Compute the amount of video memory and offscreen memory. 
		
		  The Savage4 has one ugly special case to consider.  On
		  systems with 4 banks of 2Mx32 SDRAM, the BIOS says 4MB
		  when it really means 8MB.  Why do it the same when you
		  can do it different...
 memory control 1 
 How did we get here? 
 reset graphics engine to avoid memory corruption 
 clear reset flag 
	
	  reset memory interface, 3D engine, AGP master, PCI master,
	  master engine unit, motion compensationLPB
 clear reset flags 
 Savage ramdac speeds 
 detect current mclk 
 check for DVIflat panel 
 clear bit 1 
0x04 ) {
 Check LCD panel parrmation 
		 OK, I admit it.  I don't know how to limit the max dot clock
		  for LCD panels of various sizes.  I thought I copied the
		  formula from the BIOS, but many users have parrmed me of
		  my folly.
		 
		  Instead, I'll abandon any attempt to automatically limit the
		  clock, and add an LCDClock option to XF86Config.  Some day,
		  I should come back to this.
 These are the bits in CR6B 
			
			  If the LCD is active and panel expansion is enabled,
			  we probably want to kill the HW cursor.
		
		  The Savage4 and ProSavage have COB coherency bugs which
		  render the buffer useless.  We disable it.
 We use 128kB for the COB on all chips. 
 FIFO size + padding for commands 
 --------------------------------------------------------------------- 
 FIXME: can't be negative 
 if a panel was detected, default to a CVT mode instead 
		 FIXME: if we know there is only the panel
 maximize virtual vertical length 
	
	  The clipping coordinates are masked with 0xFFF, so limit our
	  virtual resolutions to these sizes.
	
	  Calculate the hsync and vsync frequencies.  Note that
	  we split the 1e12 constant up so that we can preserve
	  the precision and fit the results into 32-bit registers.
	   (1953125000  512 = 1e12)
	
	  Our driver data
	
	  For PM_EVENT_FREEZE, do not power down so the console
	  can remain active.
	
	  The adapter was not powered down coming back from a
	  PM_EVENT_FREEZE.
  exit-time only  
  init in-kernel code  
 !MODULE 
 \
|                                                                           |
|       Copyright 2003 NVIDIA, Corporation.  All rights reserved.           |
|                                                                           |
|     NOTICE TO USER:   The source code  is copyrighted under  U.S. and     |
|     international laws.  Users and possessors of this source code are     |
|     hereby granted a nonexclusive,  royalty-free copyright license to     |
|     use this code in individual and commercial software.                  |
|                                                                           |
|     Any use of this source code must include,  in the user documenta-     |
|     tion and  internal comments to the code,  notices to the end user     |
|     as follows:                                                           |
|                                                                           |
|       Copyright 2003 NVIDIA, Corporation.  All rights reserved.           |
|                                                                           |
|     NVIDIA, CORPORATION MAKES NO REPRESENTATION ABOUT THE SUITABILITY     |
|     OF  THIS SOURCE  CODE  FOR ANY PURPOSE.  IT IS  PROVIDED  "AS IS"     |
|     WITHOUT EXPRESS OR IMPLIED WARRANTY OF ANY KIND.  NVIDIA, CORPOR-     |
|     ATION DISCLAIMS ALL WARRANTIES  WITH REGARD  TO THIS SOURCE CODE,     |
|     INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY, NONINFRINGE-     |
|     MENT,  AND FITNESS  FOR A PARTICULAR PURPOSE.   IN NO EVENT SHALL     |
|     NVIDIA, CORPORATION  BE LIABLE FOR ANY SPECIAL,  INDIRECT,  INCI-     |
|     DENTAL, OR CONSEQUENTIAL DAMAGES,  OR ANY DAMAGES  WHATSOEVER RE-     |
|     SULTING FROM LOSS OF USE,  DATA OR PROFITS,  WHETHER IN AN ACTION     |
|     OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,  ARISING OUT OF     |
|     OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOURCE CODE.     |
|                                                                           |
|     U.S. Government  End  Users.   This source code  is a "commercial     |
|     item,"  as that  term is  defined at  48 C.F.R. 2.101 (OCT 1995),     |
|     consisting  of "commercial  computer  software"  and  "commercial     |
|     computer  software  documentation,"  as such  terms  are  used in     |
|     48 C.F.R. 12.212 (SEPT 1995)  and is provided to the U.S. Govern-     |
|     ment only as  a commercial end item.   Consistent with  48 C.F.R.     |
|     12.212 and  48 C.F.R. 227.7202-1 through  227.7202-4 (JUNE 1995),     |
|     all U.S. Government End Users  acquire the source code  with only     |
|     those rights set forth herein.                                        |
|                                                                           |
  GPL Licensing Note - According to Mark Vojkovich, author of the Xorg
  XFree86 'nv' driver, this source code is provided under MIT-style licensing
  where the source code is provided "as is" without warranty of any kind.
  The only usage restriction is for the copyright notices to be retained
  whenever code is used.
  Antonino Daplas <adaplas@pol.net> 2005-03-11
  Override VGA IO routines.
 turn on big endian register access 
 can't set this here 
 really means the CRTC is slaved 
 8 bit registers 
 look for known laptop chips 
 NV4 doesn't support FlatPanels 
 \
|                                                                           |
|       Copyright 1993-2003 NVIDIA, Corporation.  All rights reserved.      |
|                                                                           |
|     NOTICE TO USER:   The source code  is copyrighted under  U.S. and     |
|     international laws.  Users and possessors of this source code are     |
|     hereby granted a nonexclusive,  royalty-free copyright license to     |
|     use this code in individual and commercial software.                  |
|                                                                           |
|     Any use of this source code must include,  in the user documenta-     |
|     tion and  internal comments to the code,  notices to the end user     |
|     as follows:                                                           |
|                                                                           |
|       Copyright 1993-2003 NVIDIA, Corporation.  All rights reserved.      |
|                                                                           |
|     NVIDIA, CORPORATION MAKES NO REPRESENTATION ABOUT THE SUITABILITY     |
|     OF  THIS SOURCE  CODE  FOR ANY PURPOSE.  IT IS  PROVIDED  "AS IS"     |
|     WITHOUT EXPRESS OR IMPLIED WARRANTY OF ANY KIND.  NVIDIA, CORPOR-     |
|     ATION DISCLAIMS ALL WARRANTIES  WITH REGARD  TO THIS SOURCE CODE,     |
|     INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY, NONINFRINGE-     |
|     MENT,  AND FITNESS  FOR A PARTICULAR PURPOSE.   IN NO EVENT SHALL     |
|     NVIDIA, CORPORATION  BE LIABLE FOR ANY SPECIAL,  INDIRECT,  INCI-     |
|     DENTAL, OR CONSEQUENTIAL DAMAGES,  OR ANY DAMAGES  WHATSOEVER RE-     |
|     SULTING FROM LOSS OF USE,  DATA OR PROFITS,  WHETHER IN AN ACTION     |
|     OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,  ARISING OUT OF     |
|     OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOURCE CODE.     |
|                                                                           |
|     U.S. Government  End  Users.   This source code  is a "commercial     |
|     item,"  as that  term is  defined at  48 C.F.R. 2.101 (OCT 1995),     |
|     consisting  of "commercial  computer  software"  and  "commercial     |
|     computer  software  documentation,"  as such  terms  are  used in     |
|     48 C.F.R. 12.212 (SEPT 1995)  and is provided to the U.S. Govern-     |
|     ment only as  a commercial end item.   Consistent with  48 C.F.R.     |
|     12.212 and  48 C.F.R. 227.7202-1 through  227.7202-4 (JUNE 1995),     |
|     all U.S. Government End Users  acquire the source code  with only     |
|     those rights set forth herein.                                        |
|                                                                           |
  GPL Licensing Note - According to Mark Vojkovich, author of the Xorg
  XFree86 'nv' driver, this source code is provided under MIT-style licensing
  where the source code is provided "as is" without warranty of any kind.
  The only usage restriction is for the copyright notices to be retained
  whenever code is used.
  Antonino Daplas <adaplas@pol.net> 2005-03-11
 $XFree86: xcprogramsXserverhwxfree86driversnvnv_hw.c,v 1.4 20031103 05:11:25 tsi Exp $ 
\
 The video arbitration routines calculate some "magic" numbers.  Fixes      
 the snow seen when accessing the framebuffer without it.                   
 It just works (I hope).                                                    
 freq in KHz 
 lwm detect. 
 lwm -> sync. 
 fbi bus cycles (1 req + 1 busy) 
 2 edge sync.  may be very close to edge so just put one. 
 arb_hp_req 
 ap_hp_req   tiling pipeline 
 tc_req     latency fifo 
 fb_cas_n_  memory request to fbio block 
 sm_d_rdv   data returned from fbio block 
 fb.rd.d.Put_gc   need to accumulate 256 bits for read 
 64 bit bus 
 64 bit bus 
 Margin of error 
 Margin of error 
 Margin of error 
 Margin of error 
 2 edge sync.  may be very close to edge so just put one. 
 fbi_d_rdv_n 
 Fbi_d_rdata 
 crtfifo load 
 Mp can get in with a burst of 8. 
 Extra clocks determined by heuristics 
 Mclk latency in us 
 Minimum Mclk latency in us 
 nvclk latency in us 
 nvclk latency in us 
 Mclk latency in us 
 MBs 
 self generating page miss 
 One higher priority before 
 self generating page miss 
 if MA0 conflict 
 Video has separate read return path 
 Wait for video 
 CRT Page miss 
 other latency 
 fixed point <= float_point - 1.  Fixes that 
 bpp  pclk8 
 self generating page miss 
 MA0 page miss 
 if MA0 conflict 
 fixed point <= float_point - 1.  Fixes that 
 Finally, a heuristic check when width == 64 bits 
Large number to fail 
		
		   Overfill check:
 Amount of overfill 
 pclk cycles to drain 
 bytes drained. 
 Can't adjust anymore! 
 reduce the burst size 
 Have some margin 
 Can't adjust anymore! 
		  printf("CRT LWM: %f bytes, prog: 0x%x, bs: 256\n",
\
                          RIVA Mode State Routines                          
  Calculate the Video Clock parameters for the PLL.
 fixed at x4 for now 
  Calculate extended mode parameters (SVGA) and save in a
  mode state structure.
	
	  Save mode parameters.
 this is not bitsPerPixel, it's 8,15,16,32 
	
	  Extended RIVA registers.
 DirectColor 
 SPDX-License-Identifier: GPL-2.0-only
  Backlight code for nVidia based graphic cards
  Copyright 2004 Antonino Daplas <adaplas@pol.net>
  Copyright (c) 2006 Michael Hanselmann <linux-kernel@hansmi.ch>
 We do not have any information about which values are allowed, thus
  we used safe values.
 Get and convert the value 
 No locking of bl_curve since we read a single value 
 backlight bit 
  linuxdriversvideonvidianvidia-i2c.c - nVidia i2c
  Copyright 2004 Antonino A. Daplas <adaplas @pol.net>
  Based on rivafb-i2c.c
  This file is subject to the terms and conditions of the GNU General Public
  License.  See the file COPYING in the main directory of this archive
  for more details.
 Raise SCL and SDA 
 try to get from firmware 
  linuxdriversvideonvidianv_of.c
  Copyright 2004 Antonino A. Daplas <adaplas @pol.net>
  Based on rivafb-i2c.c
  This file is subject to the terms and conditions of the GNU General Public
  License.  See the file COPYING in the main directory of this archive
  for more details.
  linuxdriversvideonvidianvidia.c - nVidia fb driver
  Copyright 2004 Antonino Daplas <adaplas@pol.net>
  This file is subject to the terms and conditions of the GNU General Public
  License.  See the file COPYING in the main directory of this archive
  for more details.
 HW cursor parameters 
 command line data, set in nvidiafb_setup() 
 Autodetect later 
		 Begin flat panel hacks.
		  This is unfortunate, but some chips need this register
		  tweaked or else you get artifacts where adjacent pixels are
		  swapped.  There are no hard rules for what to set here so all
		  we can do is experiment and apply hacks.
 At least one NV34 laptop needs this workaround. 
 end flat panel hacks 
		
		  Turn off screen and disable sequencer.
 Synchronous Reset 
 disable the display 
		
		  Reenable sequencer, then turn on screen.
 reenable display 
 End Reset 
 Ensure CRTC registers 0-7 are unlocked by clearing bit 7 of CRTC[17] 
	
	  Set all CRTC values.
 interlace off 
	
	  Calculate the extended registers.
 turn on LFB swapping 
 Update debug text engine 
 gray = 0.30R + 0.59G + 0.11B 
 "transparent" stuff is completely ignored. 
 do nothing 
 RGBA 8888 
 calculate modeline if supported by monitor 
	
	  If we're on a flat panel, check if the mode is outside of the
	  panel dimensions. If so, cap it and try for the next best mode
	  before bailing out.
 screen onoff 
 sync onoff 
  Because the VGA registers are not mapped linearly in its MMIO space,
  restrict VGA register saving and restore to x86 only, where legacy VGA IO
  access is legal. Consequently, we must also check if the device is the
  primary display.
 X86 
 CONFIG_PM_SLEEP 
 maximize virtual vertical length 
 pci-e 
 wrong endian 
 GeForce 256 
 GeForce2 MX 
 GeForce2 
 GeForce4 MX 
 GeForce4 MX (8x AGP) 
 nForce 
 nForce2 
 GeForce3 
 GeForce4 Ti 
 GeForce4 Ti (8x AGP) 
 GeForceFX 5800 
 GeForceFX 5600 
 GeForceFX 5200 
 GeForceFX 5900 
 GeForceFX 5700 
 GeForce 6800 
 GeForce 6800 
 GeForce 6800 
 GeForce 6600 
 GeForce 6200 
 GeForce 7200, 7300, 7400 
 GeForce 7800 
 GeForce 6800 
 GeForce 6200 
 GeForce 6100 
 GeForce 7900 
 GeForce 7600 
 TNT, TNT2 
 unknown architecture 
 enable IO and mem if not already done 
 Limit amount of vram to 64 MB 
 ------------------------------------------------------------------------- 
  initialization
 !MODULE 
 ------------------------------------------------------------------------- 
  modularization
 \
|                                                                           |
|       Copyright 1993-2003 NVIDIA, Corporation.  All rights reserved.      |
|                                                                           |
|     NOTICE TO USER:   The source code  is copyrighted under  U.S. and     |
|     international laws.  Users and possessors of this source code are     |
|     hereby granted a nonexclusive,  royalty-free copyright license to     |
|     use this code in individual and commercial software.                  |
|                                                                           |
|     Any use of this source code must include,  in the user documenta-     |
|     tion and  internal comments to the code,  notices to the end user     |
|     as follows:                                                           |
|                                                                           |
|       Copyright 1993-2003 NVIDIA, Corporation.  All rights reserved.      |
|                                                                           |
|     NVIDIA, CORPORATION MAKES NO REPRESENTATION ABOUT THE SUITABILITY     |
|     OF  THIS SOURCE  CODE  FOR ANY PURPOSE.  IT IS  PROVIDED  "AS IS"     |
|     WITHOUT EXPRESS OR IMPLIED WARRANTY OF ANY KIND.  NVIDIA, CORPOR-     |
|     ATION DISCLAIMS ALL WARRANTIES  WITH REGARD  TO THIS SOURCE CODE,     |
|     INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY, NONINFRINGE-     |
|     MENT,  AND FITNESS  FOR A PARTICULAR PURPOSE.   IN NO EVENT SHALL     |
|     NVIDIA, CORPORATION  BE LIABLE FOR ANY SPECIAL,  INDIRECT,  INCI-     |
|     DENTAL, OR CONSEQUENTIAL DAMAGES,  OR ANY DAMAGES  WHATSOEVER RE-     |
|     SULTING FROM LOSS OF USE,  DATA OR PROFITS,  WHETHER IN AN ACTION     |
|     OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,  ARISING OUT OF     |
|     OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOURCE CODE.     |
|                                                                           |
|     U.S. Government  End  Users.   This source code  is a "commercial     |
|     item,"  as that  term is  defined at  48 C.F.R. 2.101 (OCT 1995),     |
|     consisting  of "commercial  computer  software"  and  "commercial     |
|     computer  software  documentation,"  as such  terms  are  used in     |
|     48 C.F.R. 12.212 (SEPT 1995)  and is provided to the U.S. Govern-     |
|     ment only as  a commercial end item.   Consistent with  48 C.F.R.     |
|     12.212 and  48 C.F.R. 227.7202-1 through  227.7202-4 (JUNE 1995),     |
|     all U.S. Government End Users  acquire the source code  with only     |
|     those rights set forth herein.                                        |
|                                                                           |
  GPL Licensing Note - According to Mark Vojkovich, author of the Xorg
  XFree86 'nv' driver, this source code is provided under MIT-style licensing
  where the source code is provided "as is" without warranty of any kind.
  The only usage restriction is for the copyright notices to be retained
  whenever code is used.
  Antonino Daplas <adaplas@pol.net> 2005-03-11
 There is a HW race condition with videoram command buffers.
   You can't jump to the location of your put offset.  We write put
   at the jump offset + SKIPS dwords with noop padding in between
 copy   
 invert 
 copy  
 invert 
 set to something invalid 
 -- linux-c --
   linuxdriversvideoi810-i2c.c -- Intel 810815 I2C support
       Copyright (C) 2004 Antonino Daplas<adaplas@pol.net>
       All Rights Reserved
   This file is subject to the terms and conditions of the GNU General Public
   License. See the file COPYING in the main directory of this archive for
   more details.
 bit locations in the registers 
 define this for verbose EDID parsing output 
 flush posted write 
 flush posted write 
 Raise SCL and SDA 
 -- linux-c --
   linuxdriversvideoi810_main.c -- Intel 810 frame buffer device
       Copyright (C) 2001 Antonino Daplas<adaplas@pol.net>
       All Rights Reserved      
       Contributors:
          Michael Vogt <mvogt@acm.org> - added support for Intel 815 chipsets
                                         and enabling the power-on state of 
                                         external VGA connectors for 
                                         secondary displays
          Fredrik Andersson <krueger@shell.linux.se> - alpha testing of
                                         the VESA GTF
          Brad Corrion <bcorrion@web-co.com> - alpha testing of customized
                                         timings support
 	The code framework is a modification of vfb.c by Geert Uytterhoeven.
       DotClock and PLL calculations are partly based on i810_driver.c 
               in xfree86 v4.0.3 by Precision Insight.
       Watermark calculation and tables are based on i810_wmark.c 
               in xfre86 v4.0.3 by Precision Insight.  Slight modifications 
               only to allow for integer operations instead of floating point.
   This file is subject to the terms and conditions of the GNU General Public
   License. See the file COPYING in the main directory of this archive for
   more details.
  voffset - framebuffer offset in MiB from aperture start address.  In order for
  the driver to work with X, we must try to use memory holes left untouched by X. The
  following table lists where X's different surfaces start at.
  ---------------------------------------------
  :                :  64 MiB     : 32 MiB      :
  ----------------------------------------------
  : FrontBuffer    :   0         :  0          :
  : DepthBuffer    :   48        :  16         :
  : BackBuffer     :   56        :  24         :
  ----------------------------------------------
  So for chipsets with 64 MiB Aperture sizes, 32 MiB for v_offset is okay, allowing up to
  15 + 1 MiB of Framebuffer memory.  For 32 MiB Aperture sizes, a v_offset of 8 MiB should
  work, allowing 7 + 1 MiB of Framebuffer memory.
  Note, the size of the hole may change depending on how much memory you allocate to X,
  and how the memory is split up between these surfaces.
  Note: Anytime the DepthBuffer or FrontBuffer is overlapped, X would still run but with
  DRI disabled.  But if the Frontbuffer is overlapped, X will fail to load.
  Experiment with v_offset to find out which works best for you.
 For 32 MiB Aper size, 8 should be the default 
 Chipset Specific Functions 
 Initialization 
 PCI 
 mvo: added i815 PCI-ID 
------------------------------------------------------------
                 Hardware Low Level Routines                 
  i810_screen_off - turns offon display
  @mmio: address of register space
  @mode: on or off
  DESCRIPTION:
  Blanksunblanks the display
  i810_dram_off - turns offon dram refresh
  @mmio: address of register space
  @mode: on or off
  DESCRIPTION:
  Turns off DRAM refresh.  Must be off for only 2 vsyncs
  before data becomes corrupt
  i810_protect_regs - allows rwro mode of certain VGA registers
  @mmio: address of register space
  @mode: protectunprotect
  DESCRIPTION:
  The IBM VGA standard allows protection of certain VGA registers.  
  This will  protect or unprotect them. 
  i810_load_pll - loads values for the hardware PLL clock
  @par: pointer to i810fb_par structure
  DESCRIPTION:
  Loads the P, M, and N registers.  
  i810_load_vga - load standard VGA registers
  @par: pointer to i810fb_par structure
  DESCRIPTION:
  Load values to VGA registers
 interlace 
  i810_load_vgax - load extended VGA registers
  @par: pointer to i810fb_par structure
  DESCRIPTION:
  Load values to extended VGA registers
  i810_load_2d - load grahics registers
  @par: pointer to i810fb_par structure
  DESCRIPTION:
  Load values to graphics registers
  i810_hires - enables high resolution mode
  @mmio: address of register space
 Stop LCD displays from flickering 
  i810_load_pitch - loads the characters per line of the display
  @par: pointer to i810fb_par structure
  DESCRIPTION:
  Loads the characters per line
  i810_load_color - loads the color depth of the display
  @par: pointer to i810fb_par structure
  DESCRIPTION:
  Loads the color depth of the display and the graphics engine
  i810_load_regs - loads all registers for the mode
  @par: pointer to i810fb_par structure
  DESCRIPTION:
  Loads registers
                    VGA State Restore                       
restore interlace
                          VGA State Save                              
                     Helpers                                
  get_line_length - calculates buffer pitch in bytes
  @par: pointer to i810fb_par structure
  @xres_virtual: virtual resolution of the frame
  @bpp: bits per pixel
  DESCRIPTION:
  Calculates buffer pitch in bytes.  
  i810_calc_dclk - calculates the P, M, and N values of a pixelclock value
  @freq: target pixelclock in picoseconds
  @m: where to write M register
  @n: where to write N register
  @p: where to write P register
  DESCRIPTION:
  Based on the formula Freq_actual = (4MFreq_ref)(N^P)
  Repeatedly computes the Freq until the actual Freq is equal to
  the target Freq or until the loop count is zero.  In the latter
  case, the actual frequency nearest the target will be used.
	
	  find P such that target freq is 16x reference freq (Hz). 
                 Hardware Cursor Routines                   
  i810_enable_cursor - show or hide the hardware cursor
  @mmio: address of register space
  @mode: show (1) or hide (0)
  Description:
  Shows or hides the hardware cursor
  i810_init_cursor - initializes the cursor
  @par: pointer to i810fb_par structure
  DESCRIPTION:
  Initializes the cursor registers
                     Framebuffer hook helpers                       
  i810_round_off -  Round off values to capability of hardware
  @var: pointer to fb_var_screeninfo structure
  DESCRIPTION:
  @var contains user-defined information for the mode to be set.
  This will try modify those values to ones nearest the
  capability of the hardware
	
	   Presently supports only these configurations 
 round of horizontal timings to nearest 8 pixels 
  set_color_bitfields - sets rgba fields
  @var: pointer to fb_var_screeninfo
  DESCRIPTION:
  The length, offset and ordering  for each color field 
  (red, green, blue)  will be set as specified 
  by the hardware
 RGB 888   
 RGBA 8888 
  i810_check_params - check if contents in var are valid
  @var: pointer to fb_var_screeninfo
  @info: pointer to fb_info
  DESCRIPTION:
  This will check if the framebuffer size is sufficient 
  for the current mode and if the user's monitor has the 
  required specifications to display the current mode.
	
	   Memory limit
	
	  Monitor limit
  encode_fix - fill up fb_fix_screeninfo structure
  @fix: pointer to fb_fix_screeninfo
  @info: pointer to fb_info
  DESCRIPTION:
  This will set up parameters that are unmodifiable by the user.
  decode_var - modify par according to contents of var
  @var: pointer to fb_var_screeninfo
  @par: pointer to i810fb_par
  DESCRIPTION:
  Based on the contents of @var, @par will be dynamically filled up.
  @par contains all information necessary to modify the hardware. 
  i810fb_getcolreg - gets red, green and blue values of the hardware DAC
  @regno: DAC index
  @red: red
  @green: green
  @blue: blue
  @transp: transparency (alpha)
  @info: pointer to fb_info
  DESCRIPTION:
  Gets the red, green and blue values of the hardware DAC as pointed by @regno
  and writes them to @red, @green and @blue respectively
            Framebuffer device-specific hooks                    
 RGB 555 
 RGB 565 
 RGB 888 
 RGBA 8888 
                          Power Management                            
                   AGP resource allocation                            
                     Initialization                            
  i810_init_monspecs
  @info: pointer to device specific info structure
  DESCRIPTION:
  Sets the user monitor's horizontal and vertical
  frequency limits
  i810_init_defaults - initializes default values to use
  @par: pointer to i810fb_par structure
  @info: pointer to current fb_info structure
  i810_init_device - initialize device
  @par: pointer to i810fb_par structure
 mvo: enable external vga-connector (for laptops) 
                      De-initialization                        
                           Modularization                           
 MODULE 
-- linux-c --
   linuxdriversvideoi810_accel.c -- Hardware Acceleration
       Copyright (C) 2001 Antonino Daplas<adaplas@pol.net>
       All Rights Reserved      
   This file is subject to the terms and conditions of the GNU General Public
   License. See the file COPYING in the main directory of this archive for
   more details.
 ROP_COPY 
 ROP_XOR  
 Macros 
 BLT Engine Routines 
  wait_for_space - check ring buffer free space
  @space: amount of ringbuffer space needed in bytes
  @par: pointer to i810fb_par structure
  DESCRIPTION:
  The function waits until a free space from the ringbuffer
  is available 
  wait_for_engine_idle - waits for all hardware engines to finish
  @par: pointer to i810fb_par structure
  DESCRIPTION:
  This waits for lring(0), iring(1), and batch(3), etc to finish and
  waits until ringbuffer is empty.
 flush 
 begin_iring - prepares the ringbuffer 
  @space: length of sequence in dwords
  @par: pointer to i810fb_par structure
  DESCRIPTION:
  Checkswaits for sufficient space in ringbuffer of size
  space.  Returns the tail of the buffer
  end_iring - advances the buffer
  @par: pointer to i810fb_par structure
  DESCRIPTION:
  This advances the tail of the ringbuffer, effectively
  beginning the execution of the graphics instruction sequence.
  source_copy_blit - BLIT transfer operation
  @dwidth: width of rectangular graphics data
  @dheight: height of rectangular graphics data
  @dpitch: bytes per line of destination buffer
  @xdir: direction of copy (left to right or right to left)
  @src: address of first pixel to read from
  @dest: address of first pixel to write to
  @from: source address
  @where: destination address
  @rop: raster operation
  @blit_bpp: pixel format which can be different from the 
             framebuffer's pixelformat
  @par: pointer to i810fb_par structure
  DESCRIPTION:
  This is a BLIT operation typically used when doing
  a 'Copy and Paste'
  color_blit - solid color BLIT operation
  @width: width of destination
  @height: height of destination
  @pitch: pixels per line of the buffer
  @dest: address of first pixel to write to
  @where: destination
  @rop: raster operation
  @what: color to transfer
  @blit_bpp: pixel format which can be different from the 
             framebuffer's pixelformat
  @par: pointer to i810fb_par structure
  DESCRIPTION:
  A BLIT operation which can be used for  color fillrectangular fill
  mono_src_copy_imm_blit - color expand from system memory to framebuffer
  @dwidth: width of destination
  @dheight: height of destination
  @dpitch: pixels per line of the buffer
  @dsize: size of bitmap in double words
  @dest: address of first byte of pixel;
  @rop: raster operation
  @blit_bpp: pixelformat to use which can be different from the 
             framebuffer's pixelformat
  @src: address of image data
  @bg: backgound color
  @fg: forground color
  @par: pointer to i810fb_par structure
  DESCRIPTION:
  A color expand operation where the  source data is placed in the 
  ringbuffer itself. Useful for drawing text. 
  REQUIREMENT:
  The end of a scanline must be padded to the next word.
  i810fb_iring_enable - enablesdisables the ringbuffer
  @mode: enable or disable
  @par: pointer to i810fb_par structure
  DESCRIPTION:
  Enables or disables the ringbuffer, effectively enabling or
  disabling the instructionacceleration engine.
  i810fb_init_ringbuffer - initialize the ringbuffer
  @par: pointer to i810fb_par structure
  DESCRIPTION:
  Initializes the ringbuffer by telling the device the
  size and location of the ringbuffer.  It also sets 
  the head and tail pointers = 0
-- linux-c --
   linuxdriversvideoi810_main.h -- Intel 810 Non-discrete Video Timings 
                                      (VESA GTF)
       Copyright (C) 2001 Antonino Daplas<adaplas@pol.net>
       All Rights Reserved      
   This file is subject to the terms and conditions of the GNU General Public
   License. See the file COPYING in the main directory of this archive for
   more details.
  FIFO and Watermark tables - based almost wholly on i810_wmark.c in 
  XFree86 v4.03 by Precision Insight.  Slightly modified for integer 
  operation, instead of float
  i810fb_encode_registers - encode @var to hardware register values
  @var: pointer to var structure
  @par: pointer to hardware par structure
  DESCRIPTION: 
  Timing values in @var will be converted to appropriate
  register values of @par.  
 Horizontal 
 htotal 
 xres 
 hblank 
 hsync 
 Vertical 
 vtotal 
 vsync  
 yres 
 vblank 
 sync polarity 
 interlace 
 overlay 
  i810_get_watermark - gets watermark
  @var: pointer to fb_var_screeninfo
  @par: pointer to i810fb_par structure
  DESCRIPTION:
  Gets the required watermark based on 
  pixelclock and RAMBUS frequency.
  RETURNS:
  watermark
-- linux-c --
   linuxdriversvideoi810_dvt.c -- Intel 810 Discrete Video Timings (Intel)
       Copyright (C) 2001 Antonino Daplas<adaplas@pol.net>
       All Rights Reserved      
   This file is subject to the terms and conditions of the GNU General Public
   License. See the file COPYING in the main directory of this archive for
   more details.
 640x480 @ 60Hz 
 640x480 @ 70Hz 
 640x480 @ 72Hz 
 640x480 @ 75Hz 
 640x480 @ 85Hz 
 800x600 @ 56Hz 
 800x600 @ 60Hz 
 800x600 @ 70Hz 
 800x600 @ 72Hz 
 800x600 @ 75Hz 
 800x600 @ 85Hz 
 1024x768 @ 60Hz 
 1024x768 @ 70Hz 
 1024x768 @ 75Hz           
 1024x768 @ 85Hz 
 1152x864 @ 60Hz  
 1152x864 @ 70Hz 
 1152x864 @ 72Hz 
 1152x864 @ 75Hz 
 1152x864 @ 85Hz 
 1280x960 @ 60Hz 
 1280x960 @ 75Hz 
 1280x960 @ 85Hz 
 1600x1200 @ 60Hz 
 1600x1200 @ 65 Hz 
 1600x1200 @ 70 Hz 
 1600x1200 @ 72 Hz 
 1600x1200 @ 75 Hz 
 1600x1200 @ 85 Hz 
 overlay 
 SPDX-License-Identifier: GPL-2.0-only
  Hardware accelerated Matrox Millennium I, II, Mystique, G100, G200, G400 and G450.
  (c) 1998-2002 Petr Vandrovec <vandrove@vc.cvut.cz>
  Version: 1.64 20020610
  See matroxfb_base.c for contributors.
 MGA-TVO I2C for G200, G400 
 primary head DDC for Mystique(?), G100, G200, G400 
 primary head DDC for Millennium, Millennium II 
 secondary head DDC for G400 
 We must reset GENIODATA very often... XFree plays with this register 
 software I2C functions 
 Register maven bus even on G450G550 
 no __setup required 
 SPDX-License-Identifier: GPL-2.0-only
  Hardware accelerated Matrox Millennium I, II, Mystique, G100, G200 and G400
  (c) 1998-2002 Petr Vandrovec <vandrove@vc.cvut.cz>
  Version: 1.65 20020814
  MTRR stuff: 1998 Tom Rini <trini@kernel.crashing.org>
  Contributors: "menion?" <menion@mindless.com>
                      Betatesting, fixes, ideas
                "Kurt Garloff" <garloff@suse.de>
                      Betatesting, fixes, ideas, videomodes, videomodes timmings
                "Tom Rini" <trini@kernel.crashing.org>
                      MTRR stuff, PPC cleanups, betatesting, fixes, ideas
                "Bibek Sahu" <scorpio@dodds.net>
                      Access device through readb|w|l and write b|w|l
                      Extensive debugging stuff
                "Daniel Haun" <haund@usa.net>
                      Testing, hardware cursor fixes
                "Scott Wood" <sawst46+@pitt.edu>
                      Fixes
                "Gerd Knorr" <kraxel@goldbach.isdn.cs.tu-berlin.de>
                      Betatesting
                "Kelly French" <targon@hazmat.com>
                "Fernando Herrera" <fherrera@eurielec.etsit.upm.es>
                      Betatesting, bug reporting
                "Pablo Bianucci" <pbian@pccp.com.ar>
                      Fixes, ideas, betatesting
                "Inaky Perez Gonzalez" <inaky@peloncho.fis.ucm.es>
                      Fixes, enhandcements, ideas, betatesting
                "Ryuichi Oikawa" <roikawa@rr.iiij4u.or.jp>
                      PPC betatesting, PPC support, backward compatibility
                "Paul Womar" <Paul@pwomar.demon.co.uk>
                "Owen Waller" <O.Waller@ee.qub.ac.uk>
                      PPC betatesting
                "Thomas Pornin" <pornin@bolet.ens.fr>
                      Alpha betatesting
                "Pieter van Leuven" <pvl@iae.nl>
                "Ulf Jaenicke-Roessler" <ujr@physik.phy.tu-dresden.de>
                      G100 testing
                "H. Peter Arvin" <hpa@transmeta.com>
                      Ideas
                "Cort Dougan" <cort@cs.nmt.edu>
                      CHRP fixes and PReP cleanup
                "Mark Vojkovich" <mvojkovi@ucsd.edu>
                      G400 support
  (following author is not in any relation with this code, but his code
   is included in this driver)
  Based on framebuffer driver for VBE 2.0 compliant graphic boards
      (c) 1998 Gerd Knorr <kraxel@cs.tu-berlin.de>
  (following author is not in any relation with this code, but his ideas
   were used when writing this driver)
 		 FreeVBEAF (Matrox), "Shawn Hargreaves" <shawn@talula.demon.co.uk>
 accelerate as 8bpp video 
 disable linearization 
 turn off acceleration!!! 
			 Great. Source has 32bit aligned lines, so we can feed them
 Special case for 1..8bit widths 
 Special case for 9..15bit widths 
 Tell... well, why bother... 
 Hope that there are at least three readable bytes beyond the end of bitmap 
		 Danger! image->depth is useless: logo painting code always
		   passes framebuffer color depth here, although logo data are
		   always 8bpp and info->pseudo_palette is changed to contain
		   logo palette to be used (but only for truedirect-color... sic...).
 SPDX-License-Identifier: GPL-2.0-only
  Hardware accelerated Matrox Millennium I, II, Mystique, G100, G200, G400 and G450.
  (c) 1998-2002 Petr Vandrovec <vandrove@vc.cvut.cz>
  Portions Copyright (c) 2001 Matrox Graphics Inc.
  Version: 1.65 20020814
  See matroxfb_base.c for contributors.
 maybe it is GDIV2 on G100 ?! 
 only for devices older than G450 
 they must be in POS order 
 black 
 white 
 red 
 read MCLK and give up... 
 select PCI clock until we have setup oscilator... 
 powerup system PLL, select PCI clock 
		 !!! you must not access device if MCLK is not running !!!
		   Doing so cause immediate PCI lockup :-( Maybe they should
		   generate ABORT or IO (parity...) error and Linux should
		   recover from this... (kill driverprocess). But world is not
		 (bit 2 of PCI_OPTION_REG must be 0... and bits 0,1 must not
 select PLL 
 select specified system clock source 
 Clear PLL + enable for CRTC2 
 Enable CRTC2 
 Stop VIDEO PLL 
 Disable CRTC2 
 Powerdown CRTC2 
 Use reference directly 
 Use pixel PLL 
			 PIXEL and VIDEO PLL must not use same frequency. We modify N
			   of PIXEL PLL in such case because of VIDEO PLL may be source
			   of TVO clocks, and chroma subcarrier is derived from its
 Use video PLL 
 0-50 
 34-62 
 42-78 
 62-92 
 74-108 
 94-122 
 108-132 
 120-168 
 G450 
 0-54 
 38-70 
 56-96 
 80-114 
 102-144 
 132-166 
 154-182 
 170-204 
 powerup everything 
 disable outputs 
 enable output; CRTC12 selection is in CRTC2 ctl 
 Poweroff DAC2 
				 HELP! If we boot without DFP connected to DVI, we can
				   poweroff TMDS. But if we boot with DFP connected,
				   TMDS generated clocks are used instead of ALL pixclocks
				   available... If someone knows which register
 Poweroff TMDS 
 Now set timming related variables... 
 case 4: not supported by MGA1064 DAC 
 unsupported depth 
 256 entries 
 0..31, 128..159 
 with p15 == 0 
 with p15 == 1 
 0..63 
 NEED_DAC1064 
 should be only FB_SYNC_COMP 
 should be only FB_SYNC_COMP 
 G 
 minfo->features.DAC1064.vco_freq_min = 120000; 
 maybe cmdline MCLK= ?, doc says gclk=44MHz, mclk=66MHz... it was 5583 with old values 
 BIOS environ 
 flags, maybe 0x10 = SDRAM, 0x00 = SGRAM??? 
 G100 wants 0x10, G200 SGRAM does not care... 
 reg50, & 0x0F, & 0x3000 (only 0x0000, 0x1000, 0x2000 (0x3000 disallowed and treated as 0) 
 there should be flags & 0x03 & case 01else 
 and we should first select source and after that we should wait for PLL 
 and we are waiting for PLL with oscilator disabled... Is it right? 
 minfo->capable.cfb4 = 0; ... preinitialized by 0 
 do not modify settings 
 switch all clocks to PCI source 
 switch clocks to their real PLL source(s) 
 disable memory refresh 
 set memory interface parameters 
 first set up memory interface with disabled memory interface clocks 
 start memory clocks 
 value is written to memory chips only if old != new 
 minfo->hw.MXoptionReg = minfo->values.reg.opt; 
 Init system clocks 
 stop crtc2 
 stop cursor 
 stop crtc1 
 set legacy VGA clock sources for DOSEmu or VMware... 
 restore crtc1 
 restore cursor 
 restore crtc2 
 there are some instabilities if in_div > 19 && vco < 61000 
 my sample: >118 
 minfo->capable.cfb4 = 0; ... preinitialized by 0 
		 we must do this always, BIOS does not do it for us
 it should help with G100 
 if found and bridging Matrox, do some strange stuff 
 disable back-to-back & SERR 
 ??? 
 ??? 
 ??? 
 FIXME... 
 either leave MCLK as is... or they were set in preinit 
 SPDX-License-Identifier: GPL-2.0-only
  Hardware accelerated Matrox Millennium I, II, Mystique, G100, G200, G400 and G450.
  (c) 1998-2002 Petr Vandrovec <vandrove@vc.cvut.cz>
  Portions Copyright (c) 2001 Matrox Graphics Inc.
  Version: 1.65 20020814
  See matroxfb_base.c for contributors.
 Definition of the various controls 
 Return: positive number: id found
           -EINVAL:         id not found, return failure
	
	  Check if changed.
	
	  Check limits.
	
	  Store new value.
 | 0x40 for SCART 
 maybe cve2 has requirement 800 < hlen < 1184 
 burst length 
 x sync point 
 in field lines 
 upper blanking 
 y sync point 
 ps
 ps
 ps
 ps
 4433618.750 Hz
 ps
 ps
 ps
 ps
 ps
 3579545.454 Hz
 ps
 lines
 00: chroma subcarrier 
 test 
 modified by code (F9 written...) 
 ? not written 
 08 
 09 
 0A 
 0B 
 0C 
 ? not written 
		0x3F, 0x03,  0E-0F 
 10-11 
 12 
 13 
 14-16 
 17-18 
 19 
 1A 
 1B 
 1C 
 1D 
		0x89, 0x03,  1E-1F 
		0x72,	 20 
 21 
		0x72,	 22 
 23 
 24 
 25 
 26 
 27 
 28 
 29 
 2A-2B 
 2C 
 2D-2E 
 2F-30 
 31-32 
 33 
 34 
 35 written multiple times 
 36 not written 
 37 
 38 
 39 
 3A 
 3B 
 3C-3D 
 3E written multiple times 
 3F not written 
 00: chroma subcarrier 
 test 
 modified by code (F9 written...) 
 ? not written 
 08 
 09 
 0A 
 0B 
 0C 
 ? not written 
 0E-0F 
 10-11 
 12 
 13 
 14-16 
 17-18 
 19 
 1A 
 1B 
 1C 
 1D 
0x89, 0x02,  1E-1F 
 1E-1F 
0x5F,	 20 
 20 
 21 
0x5F,	 22 
 22 
 23 
 24 
 25 
 26 
 27 
 28 
 29 
 2A-2B 
 2C 
 2D-2E 
 2F-30 
 31-32 
 33 
 34 
 35 written multiple times 
 36 not written 
 37 
 38 
 39 
 3A 
 3B 
 3C-3D 
 3E written multiple times 
 never written 
		 We must program clocks before CRTC2, otherwise interlaced mode
 SPDX-License-Identifier: GPL-2.0-only
  Hardware accelerated Matrox Millennium I, II, Mystique, G100, G200 and G400
  (c) 1998-2002 Petr Vandrovec <vandrove@vc.cvut.cz>
  Portions Copyright (c) 2001 Matrox Graphics Inc.
  Version: 1.65 20020814
  MTRR stuff: 1998 Tom Rini <trini@kernel.crashing.org>
  Contributors: "menion?" <menion@mindless.com>
                      Betatesting, fixes, ideas
                "Kurt Garloff" <garloff@suse.de>
                      Betatesting, fixes, ideas, videomodes, videomodes timmings
                "Tom Rini" <trini@kernel.crashing.org>
                      MTRR stuff, PPC cleanups, betatesting, fixes, ideas
                "Bibek Sahu" <scorpio@dodds.net>
                      Access device through readb|w|l and write b|w|l
                      Extensive debugging stuff
                "Daniel Haun" <haund@usa.net>
                      Testing, hardware cursor fixes
                "Scott Wood" <sawst46+@pitt.edu>
                      Fixes
                "Gerd Knorr" <kraxel@goldbach.isdn.cs.tu-berlin.de>
                      Betatesting
                "Kelly French" <targon@hazmat.com>
                "Fernando Herrera" <fherrera@eurielec.etsit.upm.es>
                      Betatesting, bug reporting
                "Pablo Bianucci" <pbian@pccp.com.ar>
                      Fixes, ideas, betatesting
                "Inaky Perez Gonzalez" <inaky@peloncho.fis.ucm.es>
                      Fixes, enhandcements, ideas, betatesting
                "Ryuichi Oikawa" <roikawa@rr.iiij4u.or.jp>
                      PPC betatesting, PPC support, backward compatibility
                "Paul Womar" <Paul@pwomar.demon.co.uk>
                "Owen Waller" <O.Waller@ee.qub.ac.uk>
                      PPC betatesting
                "Thomas Pornin" <pornin@bolet.ens.fr>
                      Alpha betatesting
                "Pieter van Leuven" <pvl@iae.nl>
                "Ulf Jaenicke-Roessler" <ujr@physik.phy.tu-dresden.de>
                      G100 testing
                "H. Peter Arvin" <hpa@transmeta.com>
                      Ideas
                "Cort Dougan" <cort@cs.nmt.edu>
                      CHRP fixes and PReP cleanup
                "Mark Vojkovich" <mvojkovi@ucsd.edu>
                      G400 support
                "David C. Hansen" <haveblue@us.ibm.com>
                      Fixes
                "Ian Romanick" <idr@us.ibm.com>
                      Find PInS data in BIOS on PowerPC systems.
  (following author is not in any relation with this code, but his code
   is included in this driver)
  Based on framebuffer driver for VBE 2.0 compliant graphic boards
      (c) 1998 Gerd Knorr <kraxel@cs.tu-berlin.de>
  (following author is not in any relation with this code, but his ideas
   were used when writing this driver)
 		 FreeVBEAF (Matrox), "Shawn Hargreaves" <shawn@talula.demon.co.uk>
 10ns = 100MHz 
 or 0x09 
 bitplanes 
 CRTC 0..7, 9, 16..19, 21, 22 are reprogrammed by Matrox Millennium code... Hope that by MGA1064 too 
 GCTL is ignored when not using 0xA0000 aperture 
 Whole ATTR is ignored in PowerGraphics mode 
 standard timmings are in 8pixels, but for interleaved we cannot 
 do it for 4bpp (because of (4bpp >> 1(interleaved))4 == 0) 
 using 16 or more pixels per unit can save us 
 divider can be from 1 to 8 
 G200 cannot work with (ht & 7) == 6 
 blanking 
 sync start 
 end hor. blanking 
 FIXME: Enable vidrst only on G400, and only if TV-out is used 
 enable horizontal and vertical vidrst 
 disp end 
 vblanking start 
 & 0xFF ;
 & 0xFF ;
 & 0xFF ;
 & 0xFF ;
 & 0xFF ;
 Check for 'IBM .(V....TVO' string - it means TVO BIOS 
	 On PowerPC cards, the PInS offset isn't stored at the end of the
	  BIOS image.  Instead, you must search the entire BIOS image for
	  the magic PInS signature.
	 
	  This actually applies to all OpenFirmware base cards.  Since these
	  cards could be put in a MIPS or SPARC system, should the condition
	  be something different?
 ignore 4MB, 8MB, module clocks 
 Millennium 
 Millennium II, Mystique 
 memory config 
 G100, G200 
 G400 
 Mine 16MB G450 with SDRAM DDR 
 DAC1064, Ti3026 
 DAC1064, Ti3026 
 SPDX-License-Identifier: GPL-2.0-only
  Hardware accelerated Matrox Millennium I, II, Mystique, G100, G200, G400 and G450.
  (c) 1998-2002 Petr Vandrovec <vandrove@vc.cvut.cz>
  Portions Copyright (c) 2001 Matrox Graphics Inc.
  Version: 1.65 20020814
 gray = 0.30R + 0.59G + 0.11B 
		case 32: 
 enable CRTC2 
 source from secondary pixel PLL 
 no vidrst when in monitor mode 
 Enable HV vidrst 
 source from VDOCLK 
 enable vvidrst & hvidrst 
 MGA TVO is our clock source 
 source from pixclock 
 PIXPLL is our clock source 
 connect CRTC2 to DAC 
 interlaced, second field is bigger, as G450 apparently ignores it 
 0x10000000 is VIDRST polarity 
 preload 
 field #0 is smaller, so... 
 field #1 vmemory start 
 field #0 vmemory start 
 vmemory start 
 data control 
 line compare 
 disable CRTC2, CRTC1->DAC1, PLL as clock source 
  This function is called before the register_framebuffer so
  no locking is needed.
 TBD 
 no accel... 
 cmap 
 CRTC2 delay 
 mask out reserved bits + field number (oddeven) 
 compatibility stuff 
                 Only one writer, aligned int value...
 do something... 
 W,H, virtual W,H 
 offset 
 depth 
 gray 
 R 
 G 
 B 
 alpha 
 nonstd 
 display size 
 accel flags 
 no sync info 
 PAGE_MASK? 
 check yres on first head... 
 return memory back to primary head 
 hardware is CRTC2 incapable... 
 we do not have __setup() yet 
 SPDX-License-Identifier: GPL-2.0-only
  Hardware accelerated Matrox Millennium I, II, Mystique, G100, G200, G400 and G450.
  (c) 1998-2002 Petr Vandrovec <vandrove@vc.cvut.cz>
  Portions Copyright (c) 2001 Matrox Graphics Inc.
  Version: 1.65 20020814
  See matroxfb_base.c for contributors.
 Definition of the various controls 
 Return: positive number: id found
           -EINVAL:         id not found, return failure
 2702700060 == 2700000059.94005994 
 if h2postinfeed have not been assigned, return zero (error) 
			df |= 0x00; 
 00: chroma subcarrier 
 ? not written 
 modified by code (F9 written...) 
 ? not written 
 08 
 09 
 0A 
 0B 
 0C 
 ? not written 
 0E-0F 
 10-11 
 12 
 13 
 14-16 
 17-18 
 19 
 1A 
 1B 
 1C 
 1D 
 1E-1F 
 20 
 21 
 22 
 23 
 24 
 25 
 26 
 27 
 28 
 29 
 2A-2B 
 2C 
 2D-2E 
 2F-30 
 31-32 
 33 
 34 
 35 written multiple times 
 36 not written 
 37 
 38 
 39 
 3A 
 3B 
 3C-3D 
 3E written multiple times 
 3F not written 
 00: chroma subcarrier 
 ? not written 
 modified by code (F9 written...) 
 ? not written 
 08 
 09 
 0A 
 0B 
 0C 
 ? not written 
 0E-0F 
 10-11 
 12 
 13 
 14-16 
 17-18 
 19 
 1A 
 1B 
 1C 
 1D 
 1E-1F 
 20 
 21 
 22 
 23 
 24 
 25 
 26 
 27 
 28 
 29 
 2A-2B 
 2C 
 2D-2E 
 2F-30 
 31-32 
 33 
 34 
 35 written multiple times 
 36 not written 
 37 
 38 
 39 
 3A 
 3B 
 3C-3D 
 3E written multiple times 
 never written 
 Set deflicker 
 set gamma 
 Set contrast  brightness 
 Set saturation 
 Set HUE 
 fetch oscillator state? 
 get 0x82 
 xmiscctrl 
 removed code... 
 or read |= 0xF0 ? 
 removed code here... 
 real code begins here? 
 chroma subcarrier 
 ... 
 ... 
 saturation #1 
 saturation #2 
 hue 
 ... 
 read 0x80 
 ugh... 
 read 0x7C 
 read 0x00 
 read 0x82 
 04 1A 91 or 05 21 91 
 4D 50 52 or 4E 05 45 
 0049 or 004F 
 0004 or 0004 
 0458 or 045E 
 05DA or 051B 
 00CC or 00CF 
 007D or 007F 
 007C or 007E 
 03CB or 03CE 
 0000 or 0000 
 0044 or 003A 
 05DA or 051B 
 04BC or 046A 
 004D or 004E 
 saturation #1 
 saturation #2 
 whoops 
 oh, saturation #1 again 
 oh, saturation #2 again 
 hue 
 problems with memory? 
 yes, matrox must have problems in memory area... 
 load gamma correction stuff 
 0x10 or anything ored with it 
 output mode 
 1:1 
 or issue warning? 
 last (first? middle?) line in picture can have different length 
 hlen - 2 
 ... 
 hblanking end 
 100% 
 100% 
 who knows 
 htotal - 2 
 vblanking end 
 stop vblanking 
 something end... [A6]+1..[A8] 
 something start... 0..[A4]-1 
 vertical line count - 1 
 horizontal vidrst pos 
 0 <= hcrt <= htotal - 2 
 vertical vidrst pos 
 moves picture updown and so on... 
 Fix this... 0..VTotal 
 Verify! 
 Where 94208 came from? 
			 Now we have to compute input buffer length.
			   If you want any picture, it must be between
			     4 + lmargin + xres
			   and
			     94208  hdec
			   If you want perfect picture even on the top
			   of screen, it must be also
			     0x3C0000  i  hdec + Q - R  hdec
			   where
			        R      Qmin   Qmax
			     0x07000   0x5AE  0x5BF
			     0x08000   0x5CF  0x5FF
			     0x0C000   0x653  0x67F
			     0x10000   0x6F8  0x6FF
 < 0x40 || > 0x80 is bad... 0x80 is questionable 
 'valid' input line length 
 32768 
 FIXME: 146?! 
 output: SVideoComposite 
 htotal... 
 ?? 
 hsync len 
 hblank end 
 hblank start 
 htotal + 1 
 vsync?! 
 ignored? 
 ignored? 
 vtotal - 1 
 hor vidrst 
 vert vidrst 
 ignored? 
 output: monitor 
 ??? 
 must be set... 
 defaults to 0x10: test signal 
 defaults to 0x2C: too bright 
 makes picture stable 
 output: monitor 
 ??? 
 must be set... 
 defaults to 0x10: test signal 
 defaults to 0x2C: too bright 
 makes picture stable 
 start whole thing 
	
	  Check if changed.
	
	  Check limits.
	
	  Store new value.
 Tweak some things for this old chip 
	
	  Set all parameters to its initial values.
 SPDX-License-Identifier: GPL-2.0-only
  Hardware accelerated Matrox Millennium I, II, Mystique, G100, G200 and G400
  (c) 1998-2002 Petr Vandrovec <vandrove@vc.cvut.cz>
  Portions Copyright (c) 2001 Matrox Graphics Inc.
  Version: 1.65 20020814
  MTRR stuff: 1998 Tom Rini <trini@kernel.crashing.org>
  Contributors: "menion?" <menion@mindless.com>
                      Betatesting, fixes, ideas
                "Kurt Garloff" <garloff@suse.de>
                      Betatesting, fixes, ideas, videomodes, videomodes timmings
                "Tom Rini" <trini@kernel.crashing.org>
                      MTRR stuff, PPC cleanups, betatesting, fixes, ideas
                "Bibek Sahu" <scorpio@dodds.net>
                      Access device through readb|w|l and write b|w|l
                      Extensive debugging stuff
                "Daniel Haun" <haund@usa.net>
                      Testing, hardware cursor fixes
                "Scott Wood" <sawst46+@pitt.edu>
                      Fixes
                "Gerd Knorr" <kraxel@goldbach.isdn.cs.tu-berlin.de>
                      Betatesting
                "Kelly French" <targon@hazmat.com>
                "Fernando Herrera" <fherrera@eurielec.etsit.upm.es>
                      Betatesting, bug reporting
                "Pablo Bianucci" <pbian@pccp.com.ar>
                      Fixes, ideas, betatesting
                "Inaky Perez Gonzalez" <inaky@peloncho.fis.ucm.es>
                      Fixes, enhandcements, ideas, betatesting
                "Ryuichi Oikawa" <roikawa@rr.iiij4u.or.jp>
                      PPC betatesting, PPC support, backward compatibility
                "Paul Womar" <Paul@pwomar.demon.co.uk>
                "Owen Waller" <O.Waller@ee.qub.ac.uk>
                      PPC betatesting
                "Thomas Pornin" <pornin@bolet.ens.fr>
                      Alpha betatesting
                "Pieter van Leuven" <pvl@iae.nl>
                "Ulf Jaenicke-Roessler" <ujr@physik.phy.tu-dresden.de>
                      G100 testing
                "H. Peter Arvin" <hpa@transmeta.com>
                      Ideas
                "Cort Dougan" <cort@cs.nmt.edu>
                      CHRP fixes and PReP cleanup
                "Mark Vojkovich" <mvojkovi@ucsd.edu>
                      G400 support
                "Samuel Hocevar" <sam@via.ecp.fr>
                      Fixes
                "Anton Altaparmakov" <AntonA@bigfoot.com>
                      G400 MAXnon-MAX distinction
                "Ken Aaker" <kdaaker@rchland.vnet.ibm.com>
                      memtype extension (needed for GXT130P RS6000 adapter)
                "Uns Lider" <unslider@miranda.org>
                      G100 PLNWT fixes
                "Denis Zaitsev" <zzz@cd-club.ru>
                      Fixes
                "Mike Pieper" <mike@pieper-family.de>
                      TVOut enhandcements, V4L2 control interface.
                "Diego Biurrun" <diego@biurrun.de>
                      DFP testing
  (following author is not in any relation with this code, but his code
   is included in this driver)
  Based on framebuffer driver for VBE 2.0 compliant graphic boards
      (c) 1998 Gerd Knorr <kraxel@cs.tu-berlin.de>
  (following author is not in any relation with this code, but his ideas
   were used when writing this driver)
 		 FreeVBEAF (Matrox), "Shawn Hargreaves" <shawn@talula.demon.co.uk>
 --------------------------------------------------------------------- 
  card parameters
 --------------------------------------------------------------------- 
 W,H, W, H (virtual) load xres,xres_virtual
 virtual -> visible no offset 
 depth -> load bits_per_pixel 
 greyscale ? 
 R 
 G 
 B 
 transparency 
 standard pixel format 
 accel flags 
 No sync info 
 --------------------------------------------------------------------- 
 Make sure that displays are compatible 
 No update pending anymore 
 Clear any pending field interrupts 
 Flush pending pan-at-vbl request... 
 --------------------------------------------------------------------- 
 FB_ACTIVATE_VBL and we can acquire interrupts? Honor FB_ACTIVATE_VBL then... 
 Abort any pending change 
	 Currently we are holding big kernel lock on all dead & usecount updates.
	  Destroy everything after all users release it. Especially do not unregister
	  framebuffer and iounmap memory, neither fbmem nor fbcon-cfb does not check
	  for device unplugged when in use.
	  In future we should point mmio.vbase & video.vbase somewhere where we can
	  write data without causing too much damage...
 destroy it later 
	
	  OpenRelease the frame buffer device
 doc says 64; 32 is OK for G400 
 doc says 64; 32 is OK for G400 
 on G400, 16 really does not work 
 pseudocolor... 16 entries HW palette 
 pseudocolor... 256 entries HW palette 
 directcolor... 16 entries SW palette 
 Mystique: truecolor, 16 entries SW palette, HW palette hardwired into 1:1 mapping 
 directcolor... 16 entries SW palette 
 Mystique: truecolor, 16 entries SW palette, HW palette hardwired into 1:1 mapping 
 directcolor... 16 entries SW palette 
 Mystique: truecolor, 16 entries SW palette, HW palette hardwired into 1:1 mapping 
 return something reasonable... or panic()? 
 There is hardware bug that no line can cross 4MB boundary 
 give up for CFB24, it is impossible to easy workaround it 
 for other try to do something 
 sorry 
 or 128 if you do not need PAGE ALIGNED address 
 YDSTLEN contains only signed 16bit value 
	 we must round yresxres down, we already rounded yxres_virtual up
 an artificial value - 15 
	
	   Set a single color register. The values supplied are
	   already rounded down to the hardware's capabilities
	   (according to the entries in the `var' structure). Return
	   != 0 for invalid regno.
 gray = 0.30R + 0.59G + 0.11B 
 for 1:5:5:5 
 8:8:8:8 
 8 for 8bpp, 4 for 16bpp, 2 for 32bpp 
 CRTC1 delays 
	 BTW, on my PIII450 with G400, reading M_INSTS1
	   byte makes this call about 12% slower (1.70 vs. 2.05 us
		 Only one writer, aligned int value...
 0 unblank, 1 blank, 2 no vsync, 3 no hsync, 4 off 
 works ??? 
	.fb_fillrect =	<set by matrox_cfbX_init>, 
	.fb_copyarea =	<set by matrox_cfbX_init>, 
	.fb_imageblit =	<set by matrox_cfbX_init>, 
	.fb_cursor =	<set by matrox_cfbX_init>, 
 9-F 
 textmode with (default) VGA8x16 
 textmode hardwired to VGA8x8 
 initialized by setup, see explanation at end of file (search for MODULE_PARM_DESC) 
 "matroxfb:mem:xxxxxM" 
 cannot be changed, option_precise_width==0 must imply noaccel 
 "matroxfb:inv24" 
 "matroxfb:cross4MB" 
 "matroxfb:disabled" 
 "matroxfb:noaccel" 
 "matroxfb:nopan" 
 "matroxfb:nopciretry" 
 "matroxfb:novga" 
 "matroxfb:nobios" 
 "matroxfb:init" 
 "matroxfb:inverse" 
 "matroxfb:sgram" 
 "matroxfb:nomtrr" 
 "matroxfb:grayscale" 
 "matroxfb:dev:xxxxx" 
 "matroxfb:vesa:xxxxx" 
 "matroxfb:depth:xxxxx" 
 "matroxfb:xres:xxxxx" 
 "matroxfb:yres:xxxxx" 
 "matroxfb:upper:xxxxx" 
 "matroxfb:lower:xxxxx" 
 "matroxfb:vslen:xxxxx" 
 "matroxfb:left:xxxxx" 
 "matroxfb:right:xxxxx" 
 "matroxfb:hslen:xxxxx" 
 "matroxfb:pixclock:xxxxx" 
 "matroxfb:sync:xxxxx" 
 "matroxfb:fv:xxxxx" 
 "matroxfb:fh:xxxxxk" 
 "matroxfb:maxclk:xxxxM" 
 "matroxfb:dfp 
 "matroxfb:dfp:xxx 
 "matroxfb:memtype:xxx" 
 "matroxfb:outputs:xxx" 
 "matroxfb:mode:xxxxx" or "matroxfb:xxxxx" 
 must be X2MB (really it must be 2 or X4MB) 
 at least 2MB 
 CONFIG_FB_MATROX_MILLENIUM 
 CONFIG_FB_MATROX_MYSTIQUE 
 from doc it looks like that accelerator can draw only to low 16MB :-( Direct accesses & displaying are OK for
 #define DEVF_recycled	0x0040	
 #define DEVF_recycled	0x0080	
 no doc, no vxres... 
 if you'll find how to drive DFP... 
 640x480 @ 60Hz, 31.5 kHz 
 !MODULE 
 Nullify this option for subsequent adapters 
 set default values... 
 convert mem (autodetect k, M) 
 clear BIG_ENDIAN 
 disable palette snooping 
 select non-DMA memory for PCI_MGA_DATA, otherwise dump of PCI cfg space can lock PCI bus 
 maybe preinit() candidate, but it is same... for all devices... at this time... 
 TBD 
 static settings 
 Prefer panning for scroll under MC vieweredit 
 We have hw-assisted bmove 
 And fillrect 
 And imageblit 
 And we support both horizontal 
 And vertical panning 
 mode database is marked __init!!! 
 !MODULE 
 mode modifiers 
 fv, fh, maxclk limits was specified 
 > 500MHz 
 250MHz 
 1MHz 
 FIXME: Where to move this?! 
 Note: mac_vmode_to_var() does not set all parameters 
 !MODULE 
 CONFIG_PPC_PMAC 
		vesafb_defined.yres_virtual = 65536;  large enough to be INF, but small enough
 Normalize values (namely yres_virtual) 
	 And put it into "current" var. Do NOT program hardware yet, or we'll not take over
	  vgacon correctly. fbcon_startup will call fb_set_par for us, WITHOUT check_var,
	  and unfortunately it will do it BEFORE vgacon contents is saved, so it won't work
 We do not have to set currcon to 0... register_framebuffer do it for us on first console
	 there is no console on this fb... but we have to initialize hardware
		 We have to use FB_ACTIVATE_FORCE, as we had to put vesafb_defined to the fbcon.var
 not match... 
 not requested one... 
 DEVFLAGS 
 subsequent heads always needs initialization and must not enable BIOS 
  init-time only  
 132 x 43 text 
 132 x 50 text 
 132 x 60 text 
 10-FF 
 default must be first 
 fh from kHz to Hz 
 1kHz minimum 
 maxclk 
 kHz -> Hz, MHz -> kHz 
 kHz -> Hz, 1MHz minimum 
 fix VESA number 
 mask out clearscreen, acceleration and so on 
 static settings 
 accept all new devices... 
  exit-time only  
  init in-kernel code  
 nodisabled does not exist 
 noenabled does not exist 
 nosgram == sdram 
 never return failure, user can hotplug matrox later... 
  init module code  
 never return failure; user can hotplug matrox later... 
 MODULE 
  Hardware accelerated Matrox PCI cards - G450G550 PLL control.
  (c) 2001-2002 Petr Vandrovec <vandrove@vc.cvut.cz>
  Portions Copyright (c) 2001 Matrox Graphics Inc.
  Version: 1.64 20020610
  This file is subject to the terms and conditions of the GNU General Public
  License. See the file COPYING in the main directory of this archive for
  more details.
 do not mask high byte so we'll catch NO_MORE_MNP 
				p |= 0x00; 
 udelay(1)... but DAC_in is much slower... 
				 DVI PLL preferred for frequencies up to
 Setting this breaks PC systems so don't do it 
 matroxfb_DAC_out(minfo, M1064_XDVICLKCTRL, tmp); 
				 == is important; due to nextpll algorithm we get
				   sorted equally good frequencies from lower VCO 
				   frequency to higher - with <= lowest wins, while
					 all else being equal except VCO,
					  choose VCO not near (within 116th or so) VCOmin
					  (freqs near VCOmin aren't as stable)
 VideoPLL and PixelPLL matched: do nothing... In all other cases we should get at least one frequency 
 It must be greater than number of possible PLL values.
 SPDX-License-Identifier: GPL-2.0-only
  Hardware accelerated Matrox Millennium I, II, Mystique, G100, G200 and G400
  (c) 1998-2002 Petr Vandrovec <vandrove@vc.cvut.cz>
  Portions Copyright (c) 2001 Matrox Graphics Inc.
  Version: 1.65 20020814
  MTRR stuff: 1998 Tom Rini <trini@kernel.crashing.org>
  Contributors: "menion?" <menion@mindless.com>
                      Betatesting, fixes, ideas
                "Kurt Garloff" <garloff@suse.de>
                      Betatesting, fixes, ideas, videomodes, videomodes timmings
                "Tom Rini" <trini@kernel.crashing.org>
                      MTRR stuff, PPC cleanups, betatesting, fixes, ideas
                "Bibek Sahu" <scorpio@dodds.net>
                      Access device through readb|w|l and write b|w|l
                      Extensive debugging stuff
                "Daniel Haun" <haund@usa.net>
                      Testing, hardware cursor fixes
                "Scott Wood" <sawst46+@pitt.edu>
                      Fixes
                "Gerd Knorr" <kraxel@goldbach.isdn.cs.tu-berlin.de>
                      Betatesting
                "Kelly French" <targon@hazmat.com>
                "Fernando Herrera" <fherrera@eurielec.etsit.upm.es>
                      Betatesting, bug reporting
                "Pablo Bianucci" <pbian@pccp.com.ar>
                      Fixes, ideas, betatesting
                "Inaky Perez Gonzalez" <inaky@peloncho.fis.ucm.es>
                      Fixes, enhandcements, ideas, betatesting
                "Ryuichi Oikawa" <roikawa@rr.iiij4u.or.jp>
                      PPC betatesting, PPC support, backward compatibility
                "Paul Womar" <Paul@pwomar.demon.co.uk>
                "Owen Waller" <O.Waller@ee.qub.ac.uk>
                      PPC betatesting
                "Thomas Pornin" <pornin@bolet.ens.fr>
                      Alpha betatesting
                "Pieter van Leuven" <pvl@iae.nl>
                "Ulf Jaenicke-Roessler" <ujr@physik.phy.tu-dresden.de>
                      G100 testing
                "H. Peter Arvin" <hpa@transmeta.com>
                      Ideas
                "Cort Dougan" <cort@cs.nmt.edu>
                      CHRP fixes and PReP cleanup
                "Mark Vojkovich" <mvojkovi@ucsd.edu>
                      G400 support
  (following author is not in any relation with this code, but his code
   is included in this driver)
  Based on framebuffer driver for VBE 2.0 compliant graphic boards
      (c) 1998 Gerd Knorr <kraxel@cs.tu-berlin.de>
  (following author is not in any relation with this code, but his ideas
   were used when writing this driver)
 		 FreeVBEAF (Matrox), "Shawn Hargreaves" <shawn@talula.demon.co.uk>
 transparent, transparent, transparent, transparent 
 transparent, 0, 1, 2 
 0, 1, transparent, complement 
 transparent, transparent, 0, 1 
 ext.signal ODD\EVEN 
 ext.signal EVEN\ODD 
 ??? do not understand... but it works... !!! 
 ??? do not understand... but it works... !!! 
 paletized 
 5:45:2 instead of 4:38:3 
 4:38:3 (or 5:45:2) 
 - 
 - 
 2MB RAM, 512K  4 
 >2MB RAM, 512K  8 & more 
 L0,H0,L1,H1... 
 H0,L0,H1,L1... 
 VGA MEMORY, 8BIT PIXEL 
 CLK2 is TTL source
 not CLK2 is TTL source 
 CLK2 and not CLK2 is ECL source 
 disable & poweroff internal clock 
 or 8, bit 3 is ignored 
 PSEL high selects directcolor 
 PSEL high selects truecolor or pseudocolor 
 2,4,6,8,10,12,14,16, division applied to LOOP PLL after divide by 2^P 
 MKC4 
 MKC4 
 dot clock divided by loop pclk N prescaler 
 set lm to any possible value 
 div 2 
 default... 
 change from 0x80 to 0x40 
 or _8_1, they are same 
 or _4_1, they are same 
 XLATCHCTRL should be _4_1  _2_1... Why is not? (_2_1 is used every time) 
 XLATCHCTRL is: for (A) use _4_3 (?_8_3 is same? TBD), for (B) it is set in setpclk 
 XLATCHCTRL should be _2_1  _1_1... Why is not? (_2_1 is used every time) 
 TODO: failed 
 set SYNC 
 set DELAY 
 set HWCURSOR 
 set interleaving 
 set DAC 
 save pclk 
 stop pclk 
 set pclk to new mclk 
 wait for PLL to lock 
 output pclk on mclk pin 
 stop MCLK 
 set mclk to new freq 
 wait for PLL to lock 
 output MCLK to MCLK pin 
 stop PCLK 
 restore pclk 
 wait for PLL to lock 
 agrhh... setting up PLL is very slow on Millennium... 
 Mystique PLL is locked in few ms, but Millennium PLL lock takes about 0.15 s... 
 Maybe even we should call schedule() ? 
 wait for PLL only if PLL clock requested (always for PowerMode, never for VGA) 
 isMilleniumII(minfo); 
 preserve VGA IO, BIOS and PPC 
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright 2011 Florian Tobias Schandinat <FlorianSchandinat@gmx.de>
  driver for Silicon Image SiI 164 PanelLink Transmitter
 check vendor id and device id 
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright 1998-2008 VIA Technologies, Inc. All Rights Reserved.
  Copyright 2001-2008 S3 Graphics, Inc. All Rights Reserved.
  Index, Mask, Value 
 Set panel power sequence timing 
 T1: VDD on - Data on. Each increment is 1 ms. (50ms = 031h) 
 T2: Data on - Backlight on. Each increment is 2 ms. (210ms = 068h) 
 T3: Backlight off -Data off. Each increment is 2 ms. (210ms = 068h)
 T4: Data off - VDD off. Each increment is 1 ms. (50ms = 031h) 
 T5: VDD off - VDD on. Each increment is 100 ms. (500ms = 04h) 
 LVDS output power up 
 turn on back light 
 Index, Mask, Value 
 Common settings: 
 Input Data Mode Select 
 Sense VT1636 LVDS Transmiter 
 Check vendor ID first: 
 Check Chip ID: 
 Graphics DPA settings: 
 LVDS Transmitter DPA settings: 
 Graphics DPA settings: 
 LVDS Transmitter DPA settings: 
 Graphics DPA settings: 
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright 1998-2008 VIA Technologies, Inc. All Rights Reserved.
  Copyright 2001-2008 S3 Graphics, Inc. All Rights Reserved.
 Hot-Plug Priority: DVI > CRT
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright 1998-2008 VIA Technologies, Inc. All Rights Reserved.
  Copyright 2001-2008 S3 Graphics, Inc. All Rights Reserved.
 according to VIA Technologies these values are based on experiment 
 LCD Scaling Parameter 1 
 LCD Scaling Parameter 2 
 LCD Scaling Parameter 3 
 LCD Scaling Parameter 4 
 LCD Scaling Parameter 5 
 LCD Scaling Parameter 6 
 LCD Scaling Parameter 7 
 LCD Scaling Parameter 8 
 LCD Scaling Parameter 9 
 LCD Scaling Parameter 10 
 LCD Scaling Parameter 11 
 LCD Scaling Parameter 12 
 LCD Scaling Parameter 13 
 LCD Scaling Parameter 14 
	{VIACR, CR07, 0x10, 0x10},  [0] vertical total (bit 8)
					[1] vertical display end (bit 8)
					[2] vertical retrace start (bit 8)
					[3] start vertical blanking (bit 8)
					[4] line compare (bit 8)
					[5] vertical total (bit 9)
					[6] vertical display end (bit 9)
	{VIACR, CR08, 0xFF, 0x00},  [0-4] preset row scan
	{VIACR, CR09, 0xDF, 0x40},  [0-4] max scan line
					[5] start vertical blanking (bit 9)
					[6] line compare (bit 9)
	{VIACR, CR0A, 0xFF, 0x1E},  [0-4] cursor start
	{VIACR, CR0B, 0xFF, 0x00},  [0-4] cursor end
 [0-7] cursor location (high) 
 [0-7] cursor location (low) 
	{VIACR, CR11, 0xF0, 0x80},  [0-3] vertical retrace end
					[6] memory refresh bandwidth
	{VIACR, CR14, 0xFF, 0x00},  [0-4] underline location
					[5] divide memory address clock by 4
	{VIACR, CR17, 0xFF, 0x63},  [0-1] mapping of display address 13-14
					[2] divide scan line clock by 2
					[3] divide memory address clock by 2
					[5] address wrap
					[6] byte mode select
 [0-7] line compare 
 IGA1 FIFO Depth_Select 
 IGA2 FIFO Depth_Select 
 IGA1 FIFO Threshold Select 
 IGA2 FIFO Threshold Select 
 IGA1 FIFO High Threshold Select 
 IGA2 FIFO High Threshold Select 
 IGA1 Display Queue Expire Num 
 IGA2 Display Queue Expire Num 
 Definition Fetch Count Registers
 IGA1 Fetch Count Register 
 IGA2 Fetch Count Register 
 {R,G,B} 
 Index 0x00~0x03 
 Index 0x04~0x07 
 Index 0x08~0x0B 
 Index 0x0C~0x0F 
 Index 0x10~0x13 
 Index 0x14~0x17 
 Index 0x18~0x1B 
 Index 0x1C~0x1F 
 Index 0x20~0x23 
 Index 0x24~0x27 
 Index 0x28~0x2B 
 Index 0x2C~0x2F 
 Index 0x30~0x33 
 Index 0x34~0x37 
 Index 0x38~0x3B 
 Index 0x3C~0x3F 
 Index 0x40~0x43 
 Index 0x44~0x47 
 Index 0x48~0x4B 
 Index 0x4C~0x4F 
 Index 0x50~0x53 
 Index 0x54~0x57 
 Index 0x58~0x5B 
 Index 0x5C~0x5F 
 Index 0x60~0x63 
 Index 0x64~0x67 
 Index 0x68~0x6B 
 Index 0x6C~0x6F 
 Index 0x70~0x73 
 Index 0x74~0x77 
 Index 0x78~0x7B 
 Index 0x7C~0x7F 
 Index 0x80~0x83 
 Index 0x84~0x87 
 Index 0x88~0x8B 
 Index 0x8C~0x8F 
 Index 0x90~0x93 
 Index 0x94~0x97 
 Index 0x98~0x9B 
 Index 0x9C~0x9F 
 Index 0xA0~0xA3 
 Index 0xA4~0xA7 
 Index 0xA8~0xAB 
 Index 0xAC~0xAF 
 Index 0xB0~0xB3 
 Index 0xB4~0xB7 
 Index 0xB8~0xBB 
 Index 0xBC~0xBF 
 Index 0xC0~0xC3 
 Index 0xC4~0xC7 
 Index 0xC8~0xCB 
 Index 0xCC~0xCF 
 Index 0xD0~0xD3 
 Index 0xD4~0xD7 
 Index 0xD8~0xDB 
 Index 0xDC~0xDF 
 Index 0xE0~0xE3 
 Index 0xE4~0xE7 
 Index 0xE8~0xEB 
 Index 0xEC~0xEF 
 Index 0xF0~0xF3 
 Index 0xF4~0xF7 
 Index 0xF8~0xFB 
 Index 0xFC~0xFF 
 structure with function pointers to support clock control 
Set IGA path for each device
 looks like the OLPC has its display wired to DVP1 and LVDS2 
 bit mask of palette 
	
	TODO: Can we enabledisable these devices? How?
	if (devices & VIA_LDVP0)
	if (devices & VIA_LDVP1)
 always set to 1 
 line compare should set all bits = 1 (extend modes) 
 line compare should set all bits = 1 (extend modes) 
viafb_write_reg_mask(CR32, VIACR, 0x01, BIT0); 
 If K8M800, enable Prefetch Mode. 
if (bit_num==8) timing_value = timing_value >>8; 
 Write Registers 
DEBUG_MSG(KERN_INFO "Table Size : %x!!\n",ItemNum ); 
			 If resolution > 1280x1024, expire length = 64, else
			 If resolution > 1280x1024, expire length = 64, else
			 If resolution > 1280x1024, expire length = 64,
 Set Display FIFO Depath Select 
 Set Display FIFO Threshold Select 
 Set FIFO High Threshold Select 
 Set Display Queue Expire Num 
			 If resolution > 1280x1024, expire length = 64,
			 If resolution > 1280x1024, expire length = 64,
			 If resolution > 1280x1024, expire length = 64,
 Set Display FIFO Depath Select 
 Patch LCD in IGA2 case 
 Set Display FIFO Depath Select 
 Set Display FIFO Threshold Select 
 Set FIFO High Threshold Select 
 Set Display Queue Expire Num 
 X1 frequency 
 Set VCLK
 Fire! 
 select external clock 
Set IGA path for each device 
 Check revision of CLE266 Chip 
 CR4F only define in CLE266.CX chip 
 restore orignal CR4F value 
 Determine which 2D engine we have 
 we should check support by hardware layout.
 TMDS on PCIE, we set DFPLOW as default. 
 set DVP1 default for DVI 
	If CX700,two singel LCD, we need to reassign
 access Primary Display's LUT 
 turn off LCK 
 turn on LCK 
 access Secondary Display's LUT 
 set IGA1 DAC for default 
 turn off CRT screen (IGA1) 
 turn on CRT screen (IGA1) 
	If viafb_LCD2_ON, on cx700, internal lvds's information
 For dual channel LCD: 
 Set to Dual LVDS channel. 
 For LCD+DFP: 
 Set to LVDS1 + TMDS channel. 
 Set to single TMDS channel. 
 For dual channel LCD: 
 Set to Dual LVDS channel. 
 Set to LVDS0 + LVDS1 channel. 
 Write Common Setting for Video Mode 
 magic required on VX900 for correct modesetting on IGA1 
 probably this should go to the scaling code one day 
 VX900 hw scale on IGA2 
 Fill VPIT Parameters 
 Write Misc Register 
 Write Sequencer 
 Write Graphic Controller 
 Write Attribute Controller 
 Update Patch Register 
 Update Refresh Rate Setting 
 Clear On Screen 
 CRT set mode 
		 Patch if set_hres is not 8 alignment (1366) to viafb_setmode
		to 8 alignment (1368),there is several pixels (2 pixels)
 IGA1 doesn't have LCD scaling, so set it center. 
 IGA1 doesn't have LCD scaling, so set it center. 
 If set mode normally, save resolution information for hot-plug . 
CONFIG_FB_VIA_X_COMPATIBILITY
 OLPC DCON only supports 50 Hz 
 to enable second display channel. 
 to disable second display channel. 
 DVP0 Clock Polarity and Adjust: 
 DVP0 Clock and Data Pads Driving: 
 DVP1 Clock Polarity and Adjust: 
 DVP1 Clock and Data Pads Driving: 
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright 1998-2008 VIA Technologies, Inc. All Rights Reserved.
  Copyright 2001-2008 S3 Graphics, Inc. All Rights Reserved.
 CLE266 Software Power Sequence 
 {Mask}, {Data}, {Delay} 
 LCD Horizontal Scaling Factor Register 
 LCD Vertical Scaling Factor Register 
 LCD Horizontal Scaling Factor Register 
 LCD Vertical Scaling Factor Register 
 Two dual channel LCD (Internal LVDS + External LVDS): 
		 If we have an external LVDS, such as VT1636, we should
 Two single channel LCD (Internal LVDS + Internal LVDS): 
		 If we have found external LVDS, just use it,
 Check for VT1631: 
 OLPC XO-1.5 panel 
 LCD Scaling Enable 
 Check if expansion for horizontal 
 Load Horizontal Scaling Factor 
 Horizontal scaling enabled 
 Horizontal scaling disabled 
 Check if expansion for vertical 
 Load Vertical Scaling Factor 
 Vertical scaling enabled 
 Vertical scaling disabled 
 Fetch Count 
 LCD Set Mode 
 Get panel table Pointer 
 disable scaling 
 Fetch count for IGA2 only 
 If K8M800, enable LCD Prefetch Mode. 
 Patch for non 32bit alignment mode 
 Use second power sequence control: 
 Turn off power sequence. 
 Turn off back light. 
 Use first power sequence control: 
 Turn off power sequence. 
 Turn off back light. 
 Power off LVDS channel. 
 Use first power sequence control: 
 Use hardware control power sequence. 
 Turn on back light. 
 Turn on hardware power sequence. 
 Use second power sequence control: 
 Use hardware control power sequence. 
 Turn on back light. 
 Turn on hardware power sequence. 
 Power on LVDS channel. 
 DI1 pad off 
 Backlight off           
 24 bit DI data paht off 
 Disable expansion bit   
 Simultaneout disabled   
 DI1 pad on 
 Backlight on            
 24 bit DI data paht on  
 LCD enabled             
 Software control power sequence 
 Disable LCD 
 Software control power sequence 
 Enable LCD 
 Dual & Dithering 
 Determine LCD DI Port by hardware layout. 
Do nothing, lcd port is specified by module parameter 
 Rom address 
 Compare pattern 
 Get the start of Table 
 0x1B means BIOS offset position 
 Get the start of biosver structure 
 18 means BIOS version position. 
		 The offset should be 44, but the
 pRom += 44; 
 release memory 
 SPDX-License-Identifier: GPL-2.0-only
  Support for viafb GPIO ports.
  Copyright 2009 Jonathan Corbet <corbet@lwn.net>
  The ports we know about.  Note that the port-25 gpios are not
  mentioned in the datasheet.
 Data sheet name 
 Guess - not in datasheet 
 aka DISPCLKI0 
 aka DISPCLKO0 
 DISPCLKI1 
 DISPCLKO1 
  This structure controls the active GPIOs, which may be a subset
  of those which are known.
  GPIO access functions
 output enable 
  Set the input direction.  I'm not sure this is right; we should
  be able to do input without disabling output.
  Manage the software enable bit.
 CONFIG_PM 
  Look up a specific gpio and return the number it was assigned.
  Platform device stuff.
	
	  Set up entries for all GPIOs which have been configured to
	  operate as such (as opposed to as i2c ports).
	
	  Enable the ports.  They come in pairs, with a single
	  enable bit for both.
	
	  Get registered.
 Dynamic 
	
	  Get unregistered.
	
	  Disable the ports.
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright 1998-2009 VIA Technologies, Inc. All Rights Reserved.
  Copyright 2001-2008 S3 Graphics, Inc. All Rights Reserved.
  There can only be one set of these, so there's no point in having
  them be dynamically allocated...
 Passed in from core 
  Allow other viafb subdevices to look up a specific adapter
  by port name.
 i2c_set_adapdata(adapter, adap_cfg); 
 Raise SCL and SDA 
 FIXME: PCIDEV 
 Still try to make the rest 
		
		  Only remove those entries in the array that we've
		  actually used (and thus initialized algo_data)
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright 1998-2008 VIA Technologies, Inc. All Rights Reserved.
  Copyright 2001-2008 S3 Graphics, Inc. All Rights Reserved.
  ClkRange, DVP0, DVP0DataDriving,  DVP0ClockDriving, DVP1,
  CR96, SR2A[5], SR1B[1], SR2A[4], SR1E[2], CR9B,
 LCKVCK < 30000000 will use this value 
 30000000 < LCKVCK < 50000000 will use this value 
 50000000 < LCKVCK < 70000000 will use this value 
 70000000 < LCKVCK < 100000000 will use this value 
 100000000 < LCKVCK < 15000000 will use this value 
 15000000 < LCKVCK will use this value 
  ClkRange,DVP0, DVP0DataDriving,  DVP0ClockDriving, DVP1,
   CR96, SR2A[5], SR1B[1], SR2A[4], SR1E[2], CR9B,
 LCKVCK < 30000000 will use this value 
 30000000 < LCKVCK < 50000000 will use this value 
 50000000 < LCKVCK < 70000000 will use this value 
 70000000 < LCKVCK < 100000000 will use this value 
 100000000 < LCKVCK < 15000000 will use this value 
 15000000 < LCKVCK will use this value 
 For VT3364: 
  ClkRange,DVP0, DVP0DataDriving,  DVP0ClockDriving, DVP1,
   CR96, SR2A[5], SR1B[1], SR2A[4], SR1E[2], CR9B,
 LCKVCK < 30000000 will use this value 
 30000000 < LCKVCK < 50000000 will use this value 
 50000000 < LCKVCK < 70000000 will use this value 
 70000000 < LCKVCK < 100000000 will use this value 
 100000000 < LCKVCK < 15000000 will use this value 
 15000000 < LCKVCK will use this value 
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright 1998-2009 VIA Technologies, Inc. All Rights Reserved.
  Copyright 2001-2008 S3 Graphics, Inc. All Rights Reserved.
 video mode 
 Added for specifying active devices.
Added for specify lcd output port
 supported output devices on each IGP
  only CX700, VX800, VX855, VX900 were documented
  VIA_CRT should be everywhere
  VIA_6C can be onle pre-CX700 (probably only on CLE266) as 6C is used for PLL
  source selection on CX700 and later
  K400 seems to support VIA_96, VIA_DVP1, VIA_LVDS{1,2} as in viamode.c
 Just tell the accel name 
 Sanity check 
 HW neither support interlacte nor double-scaned mode 
	 the refresh rate is not important here, as we only want to know
	  whether the resolution exists
	 Based on var passed in to calculate the refresh,
	  because our driver use some modes special.
 Adjust var according to our driver's own table 
 Set one color register 
 clear DPMS setting 
 Screen: On, HSync: On, VSync: On 
 control CRT monitor power management 
 Screen: Off, HSync: Off, VSync: On 
 control CRT monitor power management 
 Screen: Off, HSync: On, VSync: Off 
 control CRT monitor power management 
 Screen: Off, HSync: Off, VSync: Off 
 control CRT monitor power management 
 LCD ouput does not support hw cursors (at least on VN896) 
 Rule: device on iga1 path are the primary device. 
 get device status 
 Get lcd attributes 
 1. Modify the active status of devices. 
	 2. Keep the order of devices, so we can set corresponding
	    Note: The previous of active_dev is primary device,
 LCD only 
 CRT+DVI 
 DVI+CRT 
 CRT+LCD 
 LCD+CRT 
 DVI+LCD 
 LCD+DVI 
 CRT only 
 DVI only 
 LCD only 
Initialize to avoid unexpected behavior 
  The proc filesystem readwrite function, a simple proc implement to
  getset the value of DPA  DVP0,   DVP0DataDriving,  DVP0ClockDriving, DVP1,
  DVP1Driving, DFPHigh, DFPLow CR96,   SR2A[5], SR1B[1], SR2A[4], SR1E[2],
  CR9B,    SR65,    CR97,    CR99
Ensure end string 
Ensure end string 
Ensure end string 
 CONFIG_FB_VIA_DIRECT_PROCFS 
 CONFIG_FB_VIA_DIRECT_PROCFS 
 parent dir 
 CONFIG_FB_VIA_DIRECT_PROCFS 
 should be always CRT 
 seems to be usually DVP1 
 FIXME: what is this? 
	 Allocate fb_info and _par here, also including some other needed
	  variables
	
	  The framebuffer will have been successfully mapped by
	  the core (or we'd not be here), but we still need to
	  set up our own accounting.
  These are called out of via-core for now.
 Apply XO-1.5-specific configuration. 
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright 2011 Florian Tobias Schandinat <FlorianSchandinat@gmx.de>
  driver for VIA VT1632 DVI Transmitter
 check vendor id and device id 
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright 1998-2008 VIA Technologies, Inc. All Rights Reserved.
  Copyright 2001-2008 S3 Graphics, Inc. All Rights Reserved.
  Figure out an appropriate bytes-per-pixel setting.
 Preserve the reserved bits 
 Lowest 2 bits to zero gives us no rotation 
 blackness 
 pattern inversion 
 pattern copy 
 whiteness 
 ROP=SRCCOPY 
 blackness 
 pattern inversion 
 pattern copy 
 whiteness 
 ROP=SRCCOPY 
	
	  Set aside a chunk of framebuffer memory for the camera
	  driver.  Someday this driver probably needs a proper allocator
	  for fbmem; for now, we just have to do this before the
	  framebuffer initializes itself.
	 
	  As for the size: the engine can handle three frames,
	  16 bits deep, up to VGA resolution.
 Initialize registers to reset the 2D engine 
 Init AGP and VQ regs 
 Enable VQ 
 Set Cursor Image Base Address 
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright 1998-2008 VIA Technologies, Inc. All Rights Reserved.
  Copyright 2001-2008 S3 Graphics, Inc. All Rights Reserved.
 Turn on ouputting pad 
= DFP Low Pad on =
 DFP Low Pad on 
 DVP0 Pad on 
 DVP0DVP1 Pad on 
	     SR3E[1]Multi-function selection:
 Check for VT1632: 
		
		  Currently only support 12bits,dual edge,add 24bits mode later
 DVI Set Mode 
 Sense DVI Connector 
 DI1 Pad on 
 CR6B[0]VCK Input Selection: 1 = External clock. 
		 CR91[4] VDD On [3] Data On [2] VEE On [1] Back Light Off
		 CR93[7] DI1 Data Source Selection: 1 = DSP2.
		   CR93[5] DI1 Clock Source: 1 = internal.
		   CR93[4] DI1 Clock Polarity.
 DVP0DVP1 Pad on 
		 SR3E[1]Multi-function selection:
		 CR91[4] VDD On [3] Data On [2] VEE On [1] Back Light Off
		CR9B[4] DVP1 Data Source Selection: 1 = From secondary
 Restore status 
 Query Flat Panel's EDID Table Version Through DVI Connector 
 Found EDID1 Table 
 Get Panel Size Using EDID1 Table 
 The first two byte must be zero. 
 To get max pixel clock. 
 If Disable DVI, turn off pad 
 Turn off TMDS power. 
 Reset data driving first: 
 If Enable DVI, turn off pad 
			clear CR91[5] to direct on display period
fix dvi cann't be enabled with MB VT5718C4 - Al Zhang 
			clear CR91[5] to direct on display period
fix DVI cannot enable on EPIA-M board 
 Turn on Display period in the panel path. 
 Turn on TMDS power. 
 Disable LCD Scaling 
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright 2011 Florian Tobias Schandinat <FlorianSchandinat@gmx.de>
  driver for VIA VT1631 LVDS Transmitter
 check vendor id and device id 
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright 2011 Florian Tobias Schandinat <FlorianSchandinat@gmx.de>
  generic EDID driver
 as EDID devices can be connecteddisconnected just add the driver 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright 1998-2009 VIA Technologies, Inc. All Rights Reserved.
  Copyright 2001-2008 S3 Graphics, Inc. All Rights Reserved.
  Copyright 2009 Jonathan Corbet <corbet@lwn.net>
  Core code for the Via multifunction framebuffer device.
  The default port config.
  The OLPC XO-1.5 puts the camera power and reset lines onto
  GPIO 2C.
  We currently only support one viafb device (will there ever be
  more than one?), so just declare it globally here.
  Basic register access; spinlock required.
 ---------------------------------------------------------------------- 
  Interrupt management.  We have a single IRQ line for a lot of
  different functions, so we need to share it.  The design here
  is that we don't want to reimplement the shared IRQ code here;
  we also want to avoid having contention for a single handler thread.
  So each subdev driver which needs interrupts just requests
  them directly from the kernel.  We just have what's needed for
  overall access to the interrupt control register.
  Which interrupts are enabled now?
  Allow subdevs to ask for specific interrupts to be enabled.  These
  functions must be called with reg_lock held
 Disable entirely 
 ---------------------------------------------------------------------- 
  Currently, the camera driver is the only user of the DMA code, so we
  only compile it in if the camera driver is being built.  Chances are,
  most viafb systems will not need to have this extra code for a while.
  As soon as another user comes long, the ifdef can be removed.
  Access to the DMA engine.  This currently provides what the camera
  driver needs (i.e. outgoing only) but is easily expandable if need
  be.
  There are four DMA channels in the vx855.  For now, we only
  use one of them, though.  Most of the time, the DMA channel
  will be idle, so we keep the IRQ handler unregistered except
  when some subsystem has indicated an interest.
  This mutex protects viafb_dma_users and our global interrupt
  registration state; it also serializes access to the DMA
  engine.
  The VX855 DMA descriptor (used for sg transfers) looks
  like this.
 Low part of phys addr 
 High 12 bits of addr 
 Offset into FB memory 
 Size, 16-byte units 
 "tile mode" setting 
 Next descriptor addr 
 Fill out to 64 bytes 
  Flags added to the "next descriptor low" pointers
 ??? Just has to be there 
 Final segment 
  The completion IRQ handler.
  Indicate a need for DMA functionality.
	
	  Only VX855 is supported currently.
	
	  Note the new user and set up our interrupt handler
	  if need be.
  Do a scattergather DMA copy from FB memory.  You must have done
  a successful call to viafb_request_dma() first.
	
	  Get a place to put the descriptors.
	
	  Fill them in.
 VIA driver does this 
	
	  Program the engine.
	
	  Now we just wait until the interrupt handler says
	  we're done.  Except that, actually, we need to wait a little
	  longer: the interrupts seem to jump the gun a little and we
	  get corrupted frames sometimes.
	
	  Clean up and we're done.
 Reset int enable 
 CONFIG_VIDEO_VIA_CAMERA 
 ---------------------------------------------------------------------- 
  Figure out how big our framebuffer memory is.  Kind of ugly,
  but evidently we can't trust the information found in the
  fbdev configuration area.
 Get the BIOS-configured framebuffer size from PCI configuration space
 search for the "FUNCTION3" device in this chipset 
case CN750_FUNCTION3: 
16M 
32M 
64M 
32M 
8M 
16M 
32M 
64M 
128M 
256M 
 Only on VX855875 
512M 
32M 
  Figure out and map our MMIO regions.
	
	  Hook up to the device registers.  Note that we soldier
	  on if it fails; the framebuffer can operate (without
	  acceleration) without this region.
	
	  Map in framebuffer memory.  For now, failure here is
	  fatal.  Unfortunately, in the absence of significant
	  vmalloc space, failure here is also entirely plausible.
	  Eventually we want to move away from mapping this
	  entire region.
 try to map less memory on failure, 8 MB should be still enough 
  Create our subsidiary devices.
	
	  Ignore return values.  Even if some of the devices
	  fail to be created, we'll still be able to use some
	  of the rest.
  Power management functions
	
	  "I've occasionally hit a few drivers that caused suspend
	  failures, and each and every time it was a driver bug, and
	  the right thing to do was to just ignore the error and suspend
	  anyway - returning an error code and trying to undo the suspend
	  is not what anybody ever really wants, even if our model
	 _allows_ for it."
	  -- Linus Torvalds, Dec. 7, 2009
 Now bring back any subdevs 
	
	  Global device initialization.
	
	  Set up interrupts and create our subdevices.  Continue even if
	  some things fail.
	
	  Set up the framebuffer device
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright 2011 Florian Tobias Schandinat <FlorianSchandinat@gmx.de>
  driver for VIA VT1621(M) TV Encoder
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright 1998-2008 VIA Technologies, Inc. All Rights Reserved.
  Copyright 2001-2008 S3 Graphics, Inc. All Rights Reserved.
  Copyright 2011 Florian Tobias Schandinat <FlorianSchandinat@gmx.de>
  clock and PLL management functions
 enable reset 
 disable reset 
 enable reset 
 disable reset 
 enable reset 
 disable reset 
 enable reset 
 disable reset 
 enable reset 
 disable reset 
 0x06 should be the same 
		 The OLPC XO-1.5 cannot suspendresume reliably if the
		  IGA1IGA2 clocks are set as on or off (memory rot
		  occasionally happens during suspend under such
		  configurations).
		 
		  The only known stable scenario is to leave this bits as-is,
		  which in their default states are documented to enable the
		  clock only when it is needed.
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright 2011 Florian Tobias Schandinat <FlorianSchandinat@gmx.de>
  infrastructure for devices connected via I2C
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright 1998-2008 VIA Technologies, Inc. All Rights Reserved.
  Copyright 2001-2008 S3 Graphics, Inc. All Rights Reserved.
====================================================================
                      Gamma Function Implementation
====================================================================
 8 bpp mode can't adjust gamma 
 Enable Gamma 
 Fill IGA1 Gamma Table 
	 If adjust Gamma value in SAMM, fill IGA1,
 Switch to IGA2 Gamma Table 
 Fill IGA2 Gamma Table 
 Enable Gamma 
 Reading gamma table to get color value 
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright 1998-2008 VIA Technologies, Inc. All Rights Reserved.
  Copyright 2001-2008 S3 Graphics, Inc. All Rights Reserved.
  Copyright 2010 Florian Tobias Schandinat <FlorianSchandinat@gmx.de>
  basic modesetting functions
 unlock timing registers 
 lock timing registers 
 reset timing control 
 secondary display supports only quadword aligned memory 
	 spec does not say that first adapter skips 3 bits but old
	  code did it and seems to be reasonable in analogy to 2nd adapter
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright 2011 Florian Tobias Schandinat <FlorianSchandinat@gmx.de>
  driver for VIA VT1622(M) Digital TV Encoder
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright 2011 Florian Tobias Schandinat <FlorianSchandinat@gmx.de>
  driver for Chrontel CH7301 DVI Transmitter
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright 1998-2008 VIA Technologies, Inc. All Rights Reserved.
  Copyright 2001-2008 S3 Graphics, Inc. All Rights Reserved.
 LCD Panel Type                      
 LCD Timing Control 0                
 LCD Timing Control 1                
 LCD Power Sequence Control 0        
 LCD Power Sequence Control 1        
 LCD Power Sequence Control 2        
 LCD Power Sequence Control 3        
 LCD Power Sequence Control 4        
 LCD Power Sequence Control 5        
 2412 bit LVDS Data off             
 Video Mode Table for VT3314 chipset
 Common Setting for Video Mode 
Horizontal Retrace Start bit[11] should be 0
 Default FIFO For IGA2 
 LCD scaling Factor 
 LCD scaling Factor 
 LCD scaling Factor 
 LCD scaling Factor 
 LCD Panel Type 
 LCD Timing Control 0 
 LCD Timing Control 1 
 LCD Power Sequence Control 0 
 LCD Power Sequence Control 1 
 LCD Power Sequence Control 2 
 LCD Power Sequence Control 3 
 LCD Power Sequence Control 4 
 LCD Power Sequence Control 5 
 2412 bit LVDS Data off 
 Unlock Register                 
 Display FIFO threshold Control  
 Display FIFO Control            
 GFX PREQ threshold              
 GFX PREQ threshold              
 Memory Control 0                
 Power Management Control 0      
 Power Management Control        
 Sequencer Arbiter Control 0     
 Sequencer Arbiter Control 1     
 Display Arbiter Control 1       
 Power Management Control 5      
 Power Management Control 1      
 Power Management Control 2      
 Power Mangement 3                  
 Default FIFO For IGA2              
 Extended FIFO On                   
 LCD Panel Type                     
 LCD Timing Control 0               
 LCD Timing Control 1               
 LCD Power Sequence Control 0       
 LCD Power Sequence Control 1       
 LCD Power Sequence Control 2       
 LCD Power Sequence Control 3       
 LCD Power Sequence Control 4       
 LCD Power Sequence Control 5       
 2412 bit LVDS Data off            
 DVP0        ; DVP0 Clock Skew 
 DFP high    ; DFPH Clock Skew 
 DFP low           ; DFPL Clock Skew
 DVI on DVP1       ; DVP1 Clock Skew
 For VT3324: Common Setting for Video Mode 
 delayed E3_ECK 
 Clear VCK Plus. 
 LCD Panel Type                      
 LCD Timing Control 0                
 LCD Timing Control 1                
 Second power sequence control       
 LCD Power Sequence Control 0        
 LCD Power Sequence Control 1        
 LCD Power Sequence Control 2        
 LCD Power Sequence Control 3        
 LCD Power Sequence Control 4        
 LCD Power Sequence Control 5        
 2412 bit LVDS Data off             
 delayed E3_ECK 
 LCD Panel Type                      
 LCD Timing Control 0                
 LCD Timing Control 1                
 Second power sequence control       
 2412 bit LVDS Data off             
 TMDSLVDS control register.         
 Video Mode Table 
 Common Setting for Video Mode 
 Mode:1024X768 
 struct VPITTable {
	unsigned char  Misc;
	unsigned char  SR[StdSR];
	unsigned char  CR[StdCR];
	unsigned char  GR[StdGR];
	unsigned char  AR[StdAR];
 Msic 
 Sequencer 
 Graphic Controller 
 Attribute Controller 
 Mode Table       
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright 1998-2008 VIA Technologies, Inc. All Rights Reserved.
  Copyright 2001-2008 S3 Graphics, Inc. All Rights Reserved.
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright 2011 Florian Tobias Schandinat <FlorianSchandinat@gmx.de>
  driver for VIA VT1636 LVDS Transmitter
 check vendor id and device id 
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright 2011 Florian Tobias Schandinat <FlorianSchandinat@gmx.de>
  driver for VIA VT1625(M) HDTV Encoder
   linuxdriversvideokyrofbdev.c
   Copyright (C) 2002 STMicroelectronics
   Copyright (C) 2003, 2004 Paul Mundt
  This file is subject to the terms and conditions of the GNU General Public
  License.  See the file COPYING in the main directory of this archive
  for more details.
  PCI Definitions
 640x480, 16bpp @ 60 Hz 
 Virtual address of PCI register region 
 Offset from start of vid mem to next free region 
 Offset from start of vid mem to overlay 
 Interleaved YUV and 422 mode Y stride 
 422 mode U & V stride 
 global graphics card info structure (one per card) 
 PCI driver prototypes 
 640x350 @ 85Hz 
 640x400 @ 85Hz 
 720x400 @ 85Hz 
 640x480 @ 60Hz 
 640x480 @ 72Hz 
 640x480 @ 75Hz 
 640x480 @ 85Hz 
 800x600 @ 56Hz 
 800x600 @ 60Hz 
 800x600 @ 72Hz 
 800x600 @ 75Hz 
 800x600 @ 85Hz 
 1024x768 @ 60Hz 
 1024x768 @ 70Hz 
 1024x768 @ 75Hz 
 1024x768 @ 85Hz 
 1152x864 @ 75Hz 
 1280x960 @ 60Hz 
 1280x960 @ 85Hz 
 1280x1024 @ 60Hz 
 1280x1024 @ 75Hz 
 1280x1024 @ 85Hz 
 1600x1200 @ 60Hz 
 1600x1200 @ 65Hz 
 1600x1200 @ 70Hz 
 1600x1200 @ 75Hz 
 1600x1200 @ 85Hz 
 1792x1344 @ 60Hz 
 1792x1344 @ 75Hz 
 1856x1392 @ 60Hz 
 1856x1392 @ 75Hz 
 1920x1440 @ 60Hz 
 1920x1440 @ 75Hz 
  This needs to be kept ordered corresponding to kyro_modedb.
 Accessors 
 Turn off display 
 Bring us out of VGA and into Hi-Res mode, if not already. 
 Turn on display in new mode 
		
		  Can only create one overlay without resetting the card or
		  changing display mode
	 Overlays are addressed in multiples of 16bytes or 32bytes, so make
	  sure the start offset is on an appropriate boundary.
 probably haven't called CreateOverlay yet 
 Stop Ramdac Output 
 Start Ramdac Output 
 HeightWidth of picture in mm 
 Timing information. All values are in picoseconds 
	 par->PIXCLK is in 100Hz units. Convert to picoseconds -
	  ensuring we do not exceed 32 bit precision
	
	  XXX: Enabling this really screws over the pixclock value when we
	  read it back with fbset. As such, leaving this commented out appears
	  to do the right thing (at least for now) .. bearing in mind that we
	  have infact already done the KHZ2PICOS conversion in both the modedb
	  and kyro_var. -- PFM.
	var->pixclock = 1000000000  (par->PIXCLK  10);
	 the header file claims we should use picoseconds
	  - nobody else does though, the all use pixels and lines
	  of h and v sizes. Both options here.
	
	  If we're being called by __fb_try_mode(), then we don't want to
	  override any of the var settings that we've already parsed
	  from our modedb. -- PFM.
 Actual resolution 
 pixel depth 
 Refresh rate 
 time for a line in ns 
 time for a frame in ns (precision in 32bpp) 
 Calculate refresh rate and horrizontal clocks 
 calculate horizontal timings 
 calculate vertical timings 
 length of a line in bytes    
 Invalid register 
 This should give a reasonable default video mode 
 Reset the board 
 Sync up the PLL 
   linuxdriversvideokyroSTG4000OverlayDevice.c
   Copyright (C) 2000 Imagination Technologies Ltd
   Copyright (C) 2002 STMicroelectronics
  This file is subject to the terms and conditions of the GNU General Public
  License.  See the file COPYING in the main directory of this archive
  for more details.
 HW Defines 
 Primary surface 
 Overlay surface 
 Decimation and Scaling 
clipped on-screen pixel position of overlay 
clipped pixel pos of source data within buffer thses need to be 128 bit word aligned 
 on-screen pixel position of overlay 
 Set Overlay address to default 
 Set Overlay U address 
 Set Overlay V address 
 Set Overlay Size 
 Set Overlay Vt Decimation 
 Set Overlay format to default value 
 Set Vertical scaling to default 
 Set to no scaling 
 Set Horizontal Scaling to default 
 Set to no scaling 
 Set Blend mode to Alpha Blend 
	 ????? SG 08112001 Surely this isn't the alpha blend mode,
	   hopefully its overwrite
 Stride in 16 byte words - 16Bpp 
 Format is 16bits so num 16 byte words is width8 
 inWidth % 8 
 Round up to next 16byte boundary 
 Y component is 8bits so num 16 byte words is width16 
 inWidth % 16 
 Round up to next 16byte boundary 
 Set Overlay address and Format mode 
 Overlay format to Linear 
 Overlay format to Planer 
 Only bits 24:4 of the Overlay address 
 Y component is 8bits so num 32 byte words is width32 
 inWidth % 16 
 Round up to next 32byte boundary 
 Align U,V data to 32byte boundary 
 Align U,V data to 32byte boundary 
	 Set Overlay YUV pixel format
	  Make sure that LUT not used - ??????
 Only support Planer or UYVY linear formats 
 In bytes 
 Enable Overlay 
 Set video stream control 
 video stream 
 Vertical decimationscaling 
 Get Src Top and Bottom 
 on-screen overlay 
	 First work out the position we are to display as offset from the
	  source of the buffer
 fixed point scale factor 
 At this point ulSrc represents the input decimator 
 the number number of lines that will go into the scaler 
 vertical decimation factor scaled up to nearest integer 
 Decimation 
 Horizontal decimationscaling 
	
	  Now we handle the horizontal case, this is a simplified version of
	  the vertical case in that we decimate by factors of 2.  as we are
	  working in words we should always be able to decimate by these
	  factors.  as we always have to have a buffer which is aligned to a
	  whole number of 128 bit words, we must align the left side to the
	  lowest to the next lowest 128 bit boundary, and the right hand edge
	  to the next largets boundary, (in a similar way to how we didi it in
	  PMX1) as the left and right hand edges are aligned to these
	  boundaries normally this only becomes an issue when we are chopping
	  of one of the sides We shall work out vertical stuff first
 first work out the position we are to display as offset from the source of the buffer 
 source pixels per dest pixel <<11 
 then number of destination pixels out we are 
 this replaces the code which was making a decision as to use either ulFxOffset or ulSrcX1 
 then number of destination pixels out we are 
		
		  we must align these to our 128 bit boundaries. we shall
		  round down the pixel pos to the nearest 8 pixels.
 shift fxscale until it is in the range of the scaler 
		
		  to try and get the best values We first try and use
		  srcdwdest for the scale factor, then we move onto src-1
		 
		  we want to check to see if we will need to clip data, if so
		  then we should clip our source so that we don't need to
			
			  we must align the right hand edge to the next 32
			  pixel` boundary, must be on a 256 boundary so u, and
			  v are 128 bit aligned
			
			  we must align the right hand edge to the next
			  8pixel` boundary
 this is the input size line store needs to cope with 
		
		  use unclipped value to work out scale factror this is the
		  scale factor we want we shall now work out the horizonal
		  decimation and scaling
 input pixels to scaler; 
 We may need to do more here if we really have a HW rev < 5 
 Vertical Scaling 
	 Calculate new output line stride, this is always the number of 422
	   words in the line buffer, so it doesn't matter if the
	   mode is 420. Then set the vertical scale register.
 DAC_LS_CTRL = stride 
	 Now set up the overlay size using the modified width and height
	   from decimate and scaling calculations
 Set Video Window Start 
 Set Video Window End 
	 Finally set up the rest of the overlay regs in the order
	   done in the IMG driver
   linuxdriversvideokyroSTG4000VTG.c
   Copyright (C) 2002 STMicroelectronics
  This file is subject to the terms and conditions of the GNU General Public
  License.  See the file COPYING in the main directory of this archive
  for more details.
 Reset the VGA registers 
 Just for Delay 
 Pull-out the VGA registers from reset 
 Stop Ver and Hor Sync Generator 
 Start Ver and Hor Sync Generator 
 Horizontal 
 Vertical 
 Need to calculate the right border 
 Work out the Border 
 Border the same for Vertical and Horizontal 
 Get Timing values for Horizontal 
 Get Timing values for Vertical 
 Set Hor Timing 1, 2, 3 
 Set Ver Timing 1, 2, 3 
 Set Verical and Horizontal Polarity 
 +hsync -vsync 
 -hsync +vsync 
 -hsync -vsync 
 +hsync -vsync 
   linuxdriversvideokyroSTG4000InitDevice.c
   Copyright (C) 2000 Imagination Technologies Ltd
   Copyright (C) 2002 STMicroelectronics
  This file is subject to the terms and conditions of the GNU General Public
  License.  See the file COPYING in the main directory of this archive
  for more details.
 SDRAM fixed settings 
 Reset values 
 reserved bit, do not reset 
 Core clock freq 
 Reference Clock freq 
 PCI Registers 
 Misc 
 PLL Clock 
 scale numbers by 2^8 for fixed point calc 
 Minimum multiplier 
 Max 
 Minimum divisor 
 Max 
 Min output divider (shift) 
 Max 
 Min VCO rate 
 Max VCO rate 
 Min VCO rate (restricted) 
 Max VCO rate (restricted) 
 Min VCO rate (restricted) 
 Max VCO rate 
 Max VCO rate (restricted) 
 Get memory tpye and chip speed indexs from the SubSysDevID 
 Program SD-RAM interface 
 Translate clock in Hz 
 in Hz 
 in Hz 
	 Work out acceptable clock
	  The method calculates ~ +- 0.4% (1256)
 Scale clock required for use in calculations 
 Iterate through post divider values 
 loop for pre-divider from min to max  
 estimate required feedback multiplier 
 F = ClkRequired  R  (2^OD)  Fref 
 compensate for accuracy 
			
			  We should be close to our target frequency (if it's
			  achievable with current OD & R) let's iterate
			  through F for best fit
 Calc VCO at full accuracy 
				
				  Check it's within restricted VCO range
				  unless of course the desired frequency is
				  above the restricted range, then test
				  against VCO limit
 Clock = VCO  (2^OD) 
 Is this clock good enough? 
 is this better, ( aim for highest Score) 
			--------------------------------------------------------------------------
                             Here we want to use a scoring system which will take account of both the
                            value at the phase comparater and the VCO output
                             to do this we will use a cumulative score between the two
                          The way this ends up is that we choose the first value in the loop anyway
                          but we shall keep this code in case new restrictions come into play
	
	   did we find anything?
	   Then return RFOD
 Disable Primary Core Thread0 
 Disable Primary Core Thread1 
 Need to play around to reset TA 
 Set Core PLL Control to Core PLL Mode  
 Send bits 0:7 of the Core PLL Mode register 
	 Without some delay between the PCI config writes the clock does
	   not reliably set when the code is compiled -O3
 Send bits 8:15 of the Core PLL Mode register 
 Enable Primary Core Thread0 
 Enable Primary Core Thread1 
   linuxdriversvideokyroSTG4000Ramdac.c
   Copyright (C) 2002 STMicroelectronics
  This file is subject to the terms and conditions of the GNU General Public
  License.  See the file COPYING in the main directory of this archive
  for more details.
 128 bit bus width      
 Make sure DAC is in Reset 
 Set Pixel Format 
 Set LUT not used from 16bpp to 32 bpp ??? 
 Set for 32 bits per pixel 
 Workout Bus transfer bandwidth according to pixel format 
 Get Screen Stride in pixels 
 Set Primary size info 
 Set Pixel Clock 
 Set DAC PLL Mode 
 tmp |= ((P-1) | ((F-2) << 2) | ((R-2) << 11)); 
 Set Prim Address 
 Set Cursor details with HW Cursor disabled 
 Set Video Window 
 Set DAC Border Color to default 
 Set Graphics and Overlay Burst Control 
 Set CRC Trigger to default 
 Set Video Port Control to default 
 Ramdac control, turning output to the screen on and off 
 Disable DAC for Graphics Stream Control 
 Enable DAC for Graphics Stream Control 
  intelfb
  Linux framebuffer driver for Intel(R) 865G integrated graphics chips.
  Copyright © 2002, 2003 David Dawes <dawes@xfree86.org>
                    2004 Sylvain Meyer
  This driver consists of two parts.  The first part (intelfbdrv.c) provides
  the basic fbdev interfaces, is derived in part from the radeonfb and
  vesafb drivers, and is covered by the GPL.  The second part (intelfbhw.c)
  provides the code to program the hardware.  Most of it is derived from
  the i810i830 XFree86 driver.  The HW-specific code is covered here
  under a dual license (GPL and MITXFree86 license).
  Author: David Dawes
 $DHD: intelfbintelfbhw.c,v 1.9 20030627 15:06:25 dawes Exp $ 
 I8xx 
 I9xx 
 Find the bridge device.  It is always 0:0.0 
 Get the fb aperture size and "stolen" memory amount. 
		 915, 945 and 965 chipsets support a 256MB aperture.
		   Aperture size is determined by inspected the
	 Stolen memory size is reduced by the GTT and the popup.
 Check if enough video memory. 
 Check if xy limits are OK. 
 Check for doublescan modes. 
 Check if clock is OK. 
 Blank the screen. 
 Turn plane A on or off 
 Flush 
 Turn offon the HW cursor 
 Set DPMS level 
 Check which pipe is connected to an active display plane. 
 keep old default behaviour - prefer PIPE_A 
 Impossible that no pipe is selected - return PIPE_A 
 Read in as much of the HW state as possible. 
 This seems to be a problem with the 852GM855GM 
 Read in as much of the HW state as possible. 
 Split the M parameter into M1 and M2. 
 no point optimising too much - brute force m 
 Split the P parameter into P1 and P2. 
 slightly bias the error for bigger clocks 
 It is assumed that hw is filled in with the initial state information. 
 Disable VGA 
 Set which pipe's registers will be set. 
 Use ADPA register for sync control. 
 sync polarity 
 Connect correct pipe to the analog port DAC 
 Set DPMS state to D0 (on) 
 Desired clock in kHz 
 Check for overflow. 
 Use display plane A. 
 Set CRTC registers. 
 the chip adds 2 halflines automatically 
 Adjust for register values, and check for overflow. 
 Check stride alignment. 
 Set the palette to 8-bit mode. 
 Program a (non-VGA) video mode. 
 Assume single pipe 
 Disable VGA 
 turn off pipe 
 Disable planes A and B. 
 Wait for vblank. For now, just wait for a 50Hz cycle (20ms)) 
 Disable Sync 
 do some funky magic - xyzzy 
 turn off PLL 
 Set PLL parameters 
 Enable PLL 
 Set DVOs BC 
 undo funky magic 
 Set ADPA 
 Set pipe parameters 
 even lines first 
 non-interlaced 
 clear all status bits only 
 Enable pipe 
 Enable sync 
 setup display plane 
		
		       i830M errata: the display plane must be enabled
		       to allow writes to the other bits in the plane
		       control register.
 Enable plane 
 forward declarations 
 Try again 
	
	  Send a flush, then wait until the ring is empty.  This is what
	  the XFree86 driver does, and actually it doesn't seem a lot worse
	  than the recommended method (both have problems).
 Flush the ring buffer if it's enabled. 
 Stop the 2D engine, and turn off the ring buffer. 
  Enable the ring buffer, and initialise the 2D engine.
  It is assumed that the graphics engine has been stopped by previously
  calling intelfb_2d_stop().
 Initialise the primary ring buffer. 
 2D fillrect (solid fill or invert) 
 size in bytes of a padded scanline 
 Total bytes of padded scanline data to write out. 
	
	  Check if the glyph data exceeds the immediate mode limit.
	  It would take a large font (1K pixels) to hit this limit.
 Src data is packaged a dword (32-bit) at a time. 
	
	  Ring has to be padded to a quad word. But because the command starts
	   with 7 bytes, pad only if there is an even number of ndwords
 HW cursor functions. 
 Flush changes 
 Flush changes 
	
	  Sets the position. The coordinates are assumed to already
	  have any offset adjusted. Assume that the cursor is never
	  completely off-screen, and that x, y are always >= 0.
 non-interlaced 
 not us 
 clear status bits 0-15 ASAP and don't touch bits 16-31 
 i830 DRM uses ffff 
 non-interlaced 
 clear IRQ requests 
  intelfb
  Linux framebuffer driver for Intel(R) 830M845G852GM855GM865G915G915GM
  945G945GM945GME965G965GM integrated graphics chips.
  Copyright © 2002, 2003 David Dawes <dawes@xfree86.org>
                    2004 Sylvain Meyer
                    2006 David Airlie
  This driver consists of two parts.  The first part (intelfbdrv.c) provides
  the basic fbdev interfaces, is derived in part from the radeonfb and
  vesafb drivers, and is covered by the GPL.  The second part (intelfbhw.c)
  provides the code to program the hardware.  Most of it is derived from
  the i810i830 XFree86 driver.  The HW-specific code is covered here
  under a dual license (GPL and MITXFree86 license).
  Author: David Dawes
 $DHD: intelfbintelfbdrv.c,v 1.20 20030627 15:17:40 dawes Exp $ 
  Changes:
     012003 - Initial driver (0.1.0), no mode switching, no acceleration.
 		This initial version is a basic core that works a lot like
 		the vesafb driver.  It must be built-in to the kernel,
 		and the initial video mode must be set with vga=XXX at
 		boot time.  (David Dawes)
     012003 - Version 0.2.0: Mode switching added, colormap support
 		implemented, Y panning, and soft screen blanking implemented.
 		No acceleration yet.  (David Dawes)
     012003 - Version 0.3.0: fbcon acceleration support added.  Module
 		option handling added.  (David Dawes)
     012003 - Version 0.4.0: fbcon HW cursor support added.  (David Dawes)
     012003 - Version 0.4.1: Add auto-generation of built-in modes.
 		(David Dawes)
     022003 - Version 0.4.2: Add check for active non-CRT devices, and
 		mode validation checks.  (David Dawes)
     022003 - Version 0.4.3: Check when the VC is in graphics mode so that
 		acceleration is disabled while an XFree86 server is running.
 		(David Dawes)
     022003 - Version 0.4.4: Monitor DPMS support.  (David Dawes)
     022003 - Version 0.4.5: Basic XFree86 + fbdev working.  (David Dawes)
     022003 - Version 0.5.0: Modify to work with the 2.5.32 kernel as well
 		as 2.4.x kernels.  (David Dawes)
     022003 - Version 0.6.0: Split out HW-specifics into a separate file.
 		(David Dawes)
     022003 - Version 0.7.0: Test on 852GM855GM.  Acceleration and HW
 		cursor are disabled on this platform.  (David Dawes)
     022003 - Version 0.7.1: Test on 845G.  Acceleration is disabled
 		on this platform.  (David Dawes)
     022003 - Version 0.7.2: Test on 830M.  Acceleration and HW
 		cursor are disabled on this platform.  (David Dawes)
     022003 - Version 0.7.3: Fix 8-bit modes for mobile platforms
 		(David Dawes)
     022003 - Version 0.7.4: Add checks for FB and FBCON_HAS_CFB configured
 		in the kernel, and add mode bpp verification and default
 		bpp selection based on which FBCON_HAS_CFB are configured.
 		(David Dawes)
     022003 - Version 0.7.5: Add basic packageinstall scripts based on the
 		DRI packaging scripts.  (David Dawes)
     042003 - Version 0.7.6: Fix typo that affects builds with SMP-enabled
 		kernels.  (David Dawes, reported by Anupam).
     062003 - Version 0.7.7:
               Fix Makefile.kernel build problem (Tsutomu Yasuda).
 		Fix mis-placed #endif (2.4.21 kernel).
     092004 - Version 0.9.0 - by Sylvain Meyer
               Port to linux 2.6 kernel fbdev
               Fix HW accel and HW cursor on i845G
               Use of agpgart for fb memory reservation
               Add mtrr support
     102004 - Version 0.9.1
               Use module_param instead of old MODULE_PARM
               Some cleanup
     112004 - Version 0.9.2
               Add vram option to reserve more memory than stolen by BIOS
               Fix intelfbhw_pan_display typo
               Add __initdata annotations
     042008 - Version 0.9.5
               Add support for 965G965GM. (Maik Broemme <mbroemme@plusserver.de>)
     082008 - Version 0.9.6
               Add support for 945GME. (Phil Endecott <spam_from_intelfb@chezphil.org>)
  Limiting the class to PCI_CLASS_DISPLAY_VGA prevents function 1 of the
  mobile chipsets from being registered.
 Global data 
 fb ops 
 PCI driver module table 
 Module descriptionparameters 
	
	  These are the built-in options analogous to the module parameters
	  defined above.
	 
	  The syntax is:
	 
	     video=intelfb:[mode][,<param>=<val>] ...
	 
	  e.g.,
	 
	     video=intelfb:1024x768-16@75,accel=0
                         driver init  cleanup                
 un-register I2C bus 
 Reserve pixmap space. 
	 set early this option because it could be changed by tv encoder
 Enable device. 
 Set base addresses. 
 Reserve the fb and MMIO regions 
 Get the chipset info. 
 Set these from the options. 
 Framebuffer parameters - Use all the stolen memory if >= vram 
 Allocate space for the ring buffer and HW cursor if enabled. 
 Use agpgart to manage the GATT 
 get the current gatt info 
 set the mem offsets - set them after the already used pages 
 Allocate memories (which aren't stolen) 
 Map the fb and MMIO regions 
 ioremap only up to the end of used aperture 
 update framebuffer memory parameters 
 starts at offset 0 
 release agpgart 
	
	  Check if the LVDS port or any DVO ports are enabled.  If so,
	  don't allow mode switching
 Initialise dinfo and related data. 
 If an initial mode was programmed at boot time, get its details. 
 remap fb address 
 register I2C bus 
 Save the initial register state. 
 read active pipe 
 Cursor initialisation 
 2d acceleration init 
                        helper functions                      
                 Various initialisation functions             
 Dummy timing values (assume 60Hz) 
 Allow use of half of the video ram for panning 
 Update dinfo to match the active video mode. 
 Make sure the line length is a aligned correctly. 
 fbops functions 
                        fbdev interface                       
 Good pitches to allow tiling.  Don't care about pitches < 1024. 
 update the pitch 
 Check for a supported bpp. 
	
	  Disable VCO prior to timing register change.
 Whenif we have our own ioctls. 
 ROP_XOR 
 If XFree killed the cursor - restore it 
		 save the bitmap to restore it when XFree will
 Copyright 2006 Dave Airlie <airlied@linux.ie>
All Rights Reserved.
Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the "Software"),
to deal in the Software without restriction, including without limitation
on the rights to use, copy, modify, merge, publish, distribute, sub
license, andor sell copies of the Software, and to permit persons to whom
the Software is furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice (including the next
paragraph) shall be included in all copies or substantial portions of the
Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
THE COPYRIGHT HOLDERS ANDOR THEIR SUPPLIERS BE LIABLE FOR ANY CLAIM,
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
USE OR OTHER DEALINGS IN THE SOFTWARE.
 bit locations in the registers 
 Raise SCL and SDA 
 everyone has at least a single analog output 
 setup the DDC bus for analog output 
	 need to add the output busses for each device
	   - this function is very incomplete
	   - i915GM has LVDS and TVOUT for example
 has some LVDS + tv-out 
 SDVO ports have a single control bus - 2 devices 
 TODO: initialize the SDVO 
 I830SDVOInit(pScrn, i, DVOB); 
 set up SDVOC 
 TODO: initialize the SDVO 
 I830SDVOInit(pScrn, i, DVOC); 
 SPDX-License-Identifier: GPL-2.0-or-later
  Filename:  target_core_pr.c
  This file contains SPC-3 compliant persistent reservations and
  legacy SPC-2 reservations with compatible reservation handling (CRH=1)
  (c) Copyright 2009-2013 Datera, Inc.
  Nicholas A. Bellinger <nab@kernel.org>
  Used for Specify Initiator Ports Capable Bit (SPEC_I_PT)
		
		  From spc4r17 5.7.3 Exceptions to SPC-2 RESERVE and RELEASE
		  behavior
		 
		  A RESERVE(6) or RESERVE(10) command shall complete with GOOD
		  status, but no reservation shall be established and the
		  persistent reservation shall not be changed, if the command
		  is received from a) and b) below.
		 
		  A RELEASE(6) or RELEASE(10) command shall complete with GOOD
		  status, but the persistent reservation shall not be released,
		  if the command is received from a) and b)
		 
		  a) An I_T nexus that is a persistent reservation holder; or
		  b) An I_T nexus that is registered if a registrants only or
		     all registrants type persistent reservation is present.
		 
		  In all other cases, a RESERVE(6) command, RESERVE(10) command,
		  RELEASE(6) command, or RELEASE(10) command shall be processed
		  as defined in SPC-2.
		
		  Following spc2r20 5.5.1 Reservations overview:
		 
		  If a logical unit has executed a PERSISTENT RESERVE OUT
		  command with the REGISTER or the REGISTER AND IGNORE
		  EXISTING KEY service action and is still registered by any
		  initiator, all RESERVE commands and all RELEASE commands
		  regardless of initiator shall conflict and shall terminate
		  with a RESERVATION CONFLICT status.
	
	  This is currently the case for target_core_mod passthrough struct se_cmd
	  ops
  Begin SPC-3SPC-4 Persistent Reservations emulation support
  This function is called by those initiator ports who are NOT
  the active PR reservation holder when a reservation is present.
 Conflict by default 
 ALL_REG, REG_ONLY 
 Write Exclusive 
	int legacy = 0;  Act like a legacy device and return
		
		  Some commands are only allowed for the persistent reservation
		  holder.
		
		  Some commands are only allowed for registered I_T Nexuses.
		
		  Each registered I_T Nexus is a reservation holder.
	
	  Referenced from spc4r17 table 45 for NON PR holder access
 Allowed Write Exclusive 
		
		  This follows PERSISTENT_RESERVE_OUT service actions that
		  are allowed in the presence of various reservations.
		  See spc4r17, table 46
 Handled by CRH=1 in target_scsi2_reservation_release() 
 Handled by CRH=1 in target_scsi2_reservation_reserve() 
 Conflict for legacy 
 Allowed Write Exclusive 
 Allowed Write Exclusive 
 Allowed 
		ret = 0;  Allowed CDBs 
		break;
	default:
		other_cdb = 1;
		break;
	}
	 
	if (!ret && !other_cdb) {
		pr_debug("Allowing explicit CDB: 0x%02x for %s"
			" reservation holder\n", cdb[0],
			core_scsi3_pr_dump_type(pr_reg_type));
		return ret;
	}
	 
	if (we && !registered_nexus) {
		if (cmd->data_direction == DMA_TO_DEVICE) {
			 
			pr_debug("%s Conflict for unregistered nexus"
				" %s CDB: 0x%02x to %s reservation\n",
				transport_dump_cmd_direction(cmd),
				se_sess->se_node_acl->initiatorname, cdb[0],
				core_scsi3_pr_dump_type(pr_reg_type));
			return 1;
		} else {
			 
			if (!registered_nexus) {
				pr_debug("Allowing implicit CDB: 0x%02x"
					" for %s reservation on unregistered"
					" nexus\n", cdb[0],
					core_scsi3_pr_dump_type(pr_reg_type));
			}
			return 0;
		}
	} else if ((reg_only) || (all_reg)) {
		if (registered_nexus) {
			 
			pr_debug("Allowing implicit CDB: 0x%02x for %s"
				" reservation\n", cdb[0],
				core_scsi3_pr_dump_type(pr_reg_type));
			return 0;
		}
       } else if (we && registered_nexus) {
               if (cmd->data_direction == DMA_FROM_DEVICE) {
                       pr_debug("Allowing READ CDB: 0x%02x for %s"
                               " reservation\n", cdb[0],
                               core_scsi3_pr_dump_type(pr_reg_type));
                       return 0;
               }
	}
	pr_debug("%s Conflict for %sregistered nexus %s CDB: 0x%2x"
		" for %s reservation\n", transport_dump_cmd_direction(cmd),
		(registered_nexus) ? "" : "un",
		se_sess->se_node_acl->initiatorname, cdb[0],
		core_scsi3_pr_dump_type(pr_reg_type));
	return 1;  Conflict by default 
}
static sense_reason_t
target_scsi3_pr_reservation_check(struct se_cmd cmd)
{
	struct se_device dev = cmd->se_dev;
	struct se_session sess = cmd->se_sess;
	u32 pr_reg_type;
	bool isid_mismatch = false;
	if (!dev->dev_pr_res_holder)
		return 0;
	pr_reg_type = dev->dev_pr_res_holder->pr_res_type;
	cmd->pr_res_key = dev->dev_pr_res_holder->pr_res_key;
	if (dev->dev_pr_res_holder->pr_reg_nacl != sess->se_node_acl)
		goto check_nonholder;
	if (dev->dev_pr_res_holder->isid_present_at_reg) {
		if (dev->dev_pr_res_holder->pr_reg_bin_isid !=
		    sess->sess_bin_isid) {
			isid_mismatch = true;
			goto check_nonholder;
		}
	}
	return 0;
check_nonholder:
	if (core_scsi3_pr_seq_non_holder(cmd, pr_reg_type, isid_mismatch))
		return TCM_RESERVATION_CONFLICT;
	return 0;
}
static u32 core_scsi3_pr_generation(struct se_device dev)
{
	u32 prg;
	 
	spin_lock(&dev->dev_reservation_lock);
	prg = dev->t10_pr.pr_generation++;
	spin_unlock(&dev->dev_reservation_lock);
	return prg;
}
static struct t10_pr_registration __core_scsi3_do_alloc_registration(
	struct se_device dev,
	struct se_node_acl nacl,
	struct se_lun lun,
	struct se_dev_entry dest_deve,
	u64 mapped_lun,
	unsigned char isid,
	u64 sa_res_key,
	int all_tg_pt,
	int aptpl)
{
	struct t10_pr_registration pr_reg;
	pr_reg = kmem_cache_zalloc(t10_pr_reg_cache, GFP_ATOMIC);
	if (!pr_reg) {
		pr_err("Unable to allocate struct t10_pr_registration\n");
		return NULL;
	}
	INIT_LIST_HEAD(&pr_reg->pr_reg_list);
	INIT_LIST_HEAD(&pr_reg->pr_reg_abort_list);
	INIT_LIST_HEAD(&pr_reg->pr_reg_aptpl_list);
	INIT_LIST_HEAD(&pr_reg->pr_reg_atp_list);
	INIT_LIST_HEAD(&pr_reg->pr_reg_atp_mem_list);
	atomic_set(&pr_reg->pr_res_holders, 0);
	pr_reg->pr_reg_nacl = nacl;
	 
	if (dest_deve) {
		pr_reg->pr_reg_deve = dest_deve;
	} else {
		rcu_read_lock();
		pr_reg->pr_reg_deve = target_nacl_find_deve(nacl, mapped_lun);
		if (!pr_reg->pr_reg_deve) {
			rcu_read_unlock();
			pr_err("Unable to locate PR deve %s mapped_lun: %llu\n",
				nacl->initiatorname, mapped_lun);
			kmem_cache_free(t10_pr_reg_cache, pr_reg);
			return NULL;
		}
		kref_get(&pr_reg->pr_reg_deve->pr_kref);
		rcu_read_unlock();
	}
	pr_reg->pr_res_mapped_lun = mapped_lun;
	pr_reg->pr_aptpl_target_lun = lun->unpacked_lun;
	pr_reg->tg_pt_sep_rtpi = lun->lun_rtpi;
	pr_reg->pr_res_key = sa_res_key;
	pr_reg->pr_reg_all_tg_pt = all_tg_pt;
	pr_reg->pr_reg_aptpl = aptpl;
	 
	if (isid != NULL) {
		pr_reg->pr_reg_bin_isid = get_unaligned_be64(isid);
		snprintf(pr_reg->pr_reg_isid, PR_REG_ISID_LEN, "%s", isid);
		pr_reg->isid_present_at_reg = 1;
	}
	return pr_reg;
}
static int core_scsi3_lunacl_depend_item(struct se_dev_entry );
static void core_scsi3_lunacl_undepend_item(struct se_dev_entry );
static struct t10_pr_registration __core_scsi3_alloc_registration(
	struct se_device dev,
	struct se_node_acl nacl,
	struct se_lun lun,
	struct se_dev_entry deve,
	u64 mapped_lun,
	unsigned char isid,
	u64 sa_res_key,
	int all_tg_pt,
	int aptpl)
{
	struct se_dev_entry deve_tmp;
	struct se_node_acl nacl_tmp;
	struct se_lun_acl lacl_tmp;
	struct se_lun lun_tmp, next, dest_lun;
	const struct target_core_fabric_ops tfo = nacl->se_tpg->se_tpg_tfo;
	struct t10_pr_registration pr_reg, pr_reg_atp, pr_reg_tmp, pr_reg_tmp_safe;
	int ret;
	 
	pr_reg = __core_scsi3_do_alloc_registration(dev, nacl, lun, deve, mapped_lun,
						    isid, sa_res_key, all_tg_pt,
						    aptpl);
	if (!pr_reg)
		return NULL;
	 
	if (!all_tg_pt)
		return pr_reg;
	 
	spin_lock(&dev->se_port_lock);
	list_for_each_entry_safe(lun_tmp, next, &dev->dev_sep_list, lun_dev_link) {
		if (!percpu_ref_tryget_live(&lun_tmp->lun_ref))
			continue;
		spin_unlock(&dev->se_port_lock);
		spin_lock(&lun_tmp->lun_deve_lock);
		list_for_each_entry(deve_tmp, &lun_tmp->lun_deve_list, lun_link) {
			 
			if (!deve_tmp->se_lun_acl)
				continue;
			lacl_tmp = rcu_dereference_check(deve_tmp->se_lun_acl,
						lockdep_is_held(&lun_tmp->lun_deve_lock));
			nacl_tmp = lacl_tmp->se_lun_nacl;
			 
			if (nacl == nacl_tmp)
				continue;
			 
			if (tfo != nacl_tmp->se_tpg->se_tpg_tfo)
				continue;
			 
			if (strcmp(nacl->initiatorname, nacl_tmp->initiatorname))
				continue;
			kref_get(&deve_tmp->pr_kref);
			spin_unlock(&lun_tmp->lun_deve_lock);
			 
			ret = core_scsi3_lunacl_depend_item(deve_tmp);
			if (ret < 0) {
				pr_err("core_scsi3_lunacl_depend"
						"_item() failed\n");
				percpu_ref_put(&lun_tmp->lun_ref);
				kref_put(&deve_tmp->pr_kref, target_pr_kref_release);
				goto out;
			}
			 
			dest_lun = rcu_dereference_check(deve_tmp->se_lun,
				kref_read(&deve_tmp->pr_kref) != 0);
			pr_reg_atp = __core_scsi3_do_alloc_registration(dev,
						nacl_tmp, dest_lun, deve_tmp,
						deve_tmp->mapped_lun, NULL,
						sa_res_key, all_tg_pt, aptpl);
			if (!pr_reg_atp) {
				percpu_ref_put(&lun_tmp->lun_ref);
				core_scsi3_lunacl_undepend_item(deve_tmp);
				goto out;
			}
			list_add_tail(&pr_reg_atp->pr_reg_atp_mem_list,
				      &pr_reg->pr_reg_atp_list);
			spin_lock(&lun_tmp->lun_deve_lock);
		}
		spin_unlock(&lun_tmp->lun_deve_lock);
		spin_lock(&dev->se_port_lock);
		percpu_ref_put(&lun_tmp->lun_ref);
	}
	spin_unlock(&dev->se_port_lock);
	return pr_reg;
out:
	list_for_each_entry_safe(pr_reg_tmp, pr_reg_tmp_safe,
			&pr_reg->pr_reg_atp_list, pr_reg_atp_mem_list) {
		list_del(&pr_reg_tmp->pr_reg_atp_mem_list);
		core_scsi3_lunacl_undepend_item(pr_reg_tmp->pr_reg_deve);
		kmem_cache_free(t10_pr_reg_cache, pr_reg_tmp);
	}
	kmem_cache_free(t10_pr_reg_cache, pr_reg);
	return NULL;
}
int core_scsi3_alloc_aptpl_registration(
	struct t10_reservation pr_tmpl,
	u64 sa_res_key,
	unsigned char i_port,
	unsigned char isid,
	u64 mapped_lun,
	unsigned char t_port,
	u16 tpgt,
	u64 target_lun,
	int res_holder,
	int all_tg_pt,
	u8 type)
{
	struct t10_pr_registration pr_reg;
	if (!i_port || !t_port || !sa_res_key) {
		pr_err("Illegal parameters for APTPL registration\n");
		return -EINVAL;
	}
	pr_reg = kmem_cache_zalloc(t10_pr_reg_cache, GFP_KERNEL);
	if (!pr_reg) {
		pr_err("Unable to allocate struct t10_pr_registration\n");
		return -ENOMEM;
	}
	INIT_LIST_HEAD(&pr_reg->pr_reg_list);
	INIT_LIST_HEAD(&pr_reg->pr_reg_abort_list);
	INIT_LIST_HEAD(&pr_reg->pr_reg_aptpl_list);
	INIT_LIST_HEAD(&pr_reg->pr_reg_atp_list);
	INIT_LIST_HEAD(&pr_reg->pr_reg_atp_mem_list);
	atomic_set(&pr_reg->pr_res_holders, 0);
	pr_reg->pr_reg_nacl = NULL;
	pr_reg->pr_reg_deve = NULL;
	pr_reg->pr_res_mapped_lun = mapped_lun;
	pr_reg->pr_aptpl_target_lun = target_lun;
	pr_reg->pr_res_key = sa_res_key;
	pr_reg->pr_reg_all_tg_pt = all_tg_pt;
	pr_reg->pr_reg_aptpl = 1;
	pr_reg->pr_res_scope = 0;  Always LUN_SCOPE 
	pr_reg->pr_res_type = type;
	 
	if (isid != NULL) {
		pr_reg->pr_reg_bin_isid = get_unaligned_be64(isid);
		snprintf(pr_reg->pr_reg_isid, PR_REG_ISID_LEN, "%s", isid);
		pr_reg->isid_present_at_reg = 1;
	}
	 
	snprintf(pr_reg->pr_iport, PR_APTPL_MAX_IPORT_LEN, "%s", i_port);
	snprintf(pr_reg->pr_tport, PR_APTPL_MAX_TPORT_LEN, "%s", t_port);
	pr_reg->pr_reg_tpgt = tpgt;
	 
	pr_reg->pr_res_holder = res_holder;
	list_add_tail(&pr_reg->pr_reg_aptpl_list, &pr_tmpl->aptpl_reg_list);
	pr_debug("SPC-3 PR APTPL Successfully added registration%s from"
			" metadata\n", (res_holder) ? "+reservation" : "");
	return 0;
}
static void core_scsi3_aptpl_reserve(
	struct se_device dev,
	struct se_portal_group tpg,
	struct se_node_acl node_acl,
	struct t10_pr_registration pr_reg)
{
	char i_buf[PR_REG_ISID_ID_LEN] = { };
	core_pr_dump_initiator_port(pr_reg, i_buf, PR_REG_ISID_ID_LEN);
	spin_lock(&dev->dev_reservation_lock);
	dev->dev_pr_res_holder = pr_reg;
	spin_unlock(&dev->dev_reservation_lock);
	pr_debug("SPC-3 PR [%s] Service Action: APTPL RESERVE created"
		" new reservation holder TYPE: %s ALL_TG_PT: %d\n",
		tpg->se_tpg_tfo->fabric_name,
		core_scsi3_pr_dump_type(pr_reg->pr_res_type),
		(pr_reg->pr_reg_all_tg_pt) ? 1 : 0);
	pr_debug("SPC-3 PR [%s] RESERVE Node: %s%s\n",
		tpg->se_tpg_tfo->fabric_name, node_acl->initiatorname,
		i_buf);
}
static void __core_scsi3_add_registration(struct se_device , struct se_node_acl ,
				struct t10_pr_registration , enum register_type, int);
static int __core_scsi3_check_aptpl_registration(
	struct se_device dev,
	struct se_portal_group tpg,
	struct se_lun lun,
	u64 target_lun,
	struct se_node_acl nacl,
	u64 mapped_lun)
{
	struct t10_pr_registration pr_reg, pr_reg_tmp;
	struct t10_reservation pr_tmpl = &dev->t10_pr;
	unsigned char i_port[PR_APTPL_MAX_IPORT_LEN] = { };
	unsigned char t_port[PR_APTPL_MAX_TPORT_LEN] = { };
	u16 tpgt;
	 
	snprintf(i_port, PR_APTPL_MAX_IPORT_LEN, "%s", nacl->initiatorname);
	snprintf(t_port, PR_APTPL_MAX_TPORT_LEN, "%s",
			tpg->se_tpg_tfo->tpg_get_wwn(tpg));
	tpgt = tpg->se_tpg_tfo->tpg_get_tag(tpg);
	 
	spin_lock(&pr_tmpl->aptpl_reg_lock);
	list_for_each_entry_safe(pr_reg, pr_reg_tmp, &pr_tmpl->aptpl_reg_list,
				pr_reg_aptpl_list) {
		if (!strcmp(pr_reg->pr_iport, i_port) &&
		     (pr_reg->pr_res_mapped_lun == mapped_lun) &&
		    !(strcmp(pr_reg->pr_tport, t_port)) &&
		     (pr_reg->pr_reg_tpgt == tpgt) &&
		     (pr_reg->pr_aptpl_target_lun == target_lun)) {
			 
			rcu_read_lock();
			pr_reg->pr_reg_deve = target_nacl_find_deve(nacl, mapped_lun);
			if (!pr_reg->pr_reg_deve) {
				pr_err("Unable to locate PR APTPL %s mapped_lun:"
					" %llu\n", nacl->initiatorname, mapped_lun);
				rcu_read_unlock();
				continue;
			}
			kref_get(&pr_reg->pr_reg_deve->pr_kref);
			rcu_read_unlock();
			pr_reg->pr_reg_nacl = nacl;
			pr_reg->tg_pt_sep_rtpi = lun->lun_rtpi;
			list_del(&pr_reg->pr_reg_aptpl_list);
			spin_unlock(&pr_tmpl->aptpl_reg_lock);
			 
			__core_scsi3_add_registration(dev, nacl, pr_reg, 0, 0);
			 
			if (pr_reg->pr_res_holder)
				core_scsi3_aptpl_reserve(dev, tpg,
						nacl, pr_reg);
			 
			spin_lock(&pr_tmpl->aptpl_reg_lock);
			pr_tmpl->pr_aptpl_active = 1;
		}
	}
	spin_unlock(&pr_tmpl->aptpl_reg_lock);
	return 0;
}
int core_scsi3_check_aptpl_registration(
	struct se_device dev,
	struct se_portal_group tpg,
	struct se_lun lun,
	struct se_node_acl nacl,
	u64 mapped_lun)
{
	if (dev->dev_reservation_flags & DRF_SPC2_RESERVATIONS)
		return 0;
	return __core_scsi3_check_aptpl_registration(dev, tpg, lun,
						     lun->unpacked_lun, nacl,
						     mapped_lun);
}
static void __core_scsi3_dump_registration(
	const struct target_core_fabric_ops tfo,
	struct se_device dev,
	struct se_node_acl nacl,
	struct t10_pr_registration pr_reg,
	enum register_type register_type)
{
	struct se_portal_group se_tpg = nacl->se_tpg;
	char i_buf[PR_REG_ISID_ID_LEN] = { };
	core_pr_dump_initiator_port(pr_reg, i_buf, PR_REG_ISID_ID_LEN);
	pr_debug("SPC-3 PR [%s] Service Action: REGISTER%s Initiator"
		" Node: %s%s\n", tfo->fabric_name, (register_type == REGISTER_AND_MOVE) ?
		"_AND_MOVE" : (register_type == REGISTER_AND_IGNORE_EXISTING_KEY) ?
		"_AND_IGNORE_EXISTING_KEY" : "", nacl->initiatorname,
		i_buf);
	pr_debug("SPC-3 PR [%s] registration on Target Port: %s,0x%04x\n",
		 tfo->fabric_name, tfo->tpg_get_wwn(se_tpg),
		tfo->tpg_get_tag(se_tpg));
	pr_debug("SPC-3 PR [%s] for %s TCM Subsystem %s Object Target"
		" Port(s)\n",  tfo->fabric_name,
		(pr_reg->pr_reg_all_tg_pt) ? "ALL" : "SINGLE",
		dev->transport->name);
	pr_debug("SPC-3 PR [%s] SA Res Key: 0x%016Lx PRgeneration:"
		" 0x%08x  APTPL: %d\n", tfo->fabric_name,
		pr_reg->pr_res_key, pr_reg->pr_res_generation,
		pr_reg->pr_reg_aptpl);
}
static void __core_scsi3_add_registration(
	struct se_device dev,
	struct se_node_acl nacl,
	struct t10_pr_registration pr_reg,
	enum register_type register_type,
	int register_move)
{
	const struct target_core_fabric_ops tfo = nacl->se_tpg->se_tpg_tfo;
	struct t10_pr_registration pr_reg_tmp, pr_reg_tmp_safe;
	struct t10_reservation pr_tmpl = &dev->t10_pr;
	struct se_dev_entry deve;
	 
	pr_reg->pr_res_generation = (register_move) ?
			dev->t10_pr.pr_generation++ :
			core_scsi3_pr_generation(dev);
	spin_lock(&pr_tmpl->registration_lock);
	list_add_tail(&pr_reg->pr_reg_list, &pr_tmpl->registration_list);
	__core_scsi3_dump_registration(tfo, dev, nacl, pr_reg, register_type);
	spin_unlock(&pr_tmpl->registration_lock);
	 
	if (!pr_reg->pr_reg_all_tg_pt || register_move)
		goto out;
	 
	list_for_each_entry_safe(pr_reg_tmp, pr_reg_tmp_safe,
			&pr_reg->pr_reg_atp_list, pr_reg_atp_mem_list) {
		struct se_node_acl nacl_tmp = pr_reg_tmp->pr_reg_nacl;
		list_del(&pr_reg_tmp->pr_reg_atp_mem_list);
		pr_reg_tmp->pr_res_generation = core_scsi3_pr_generation(dev);
		spin_lock(&pr_tmpl->registration_lock);
		list_add_tail(&pr_reg_tmp->pr_reg_list,
			      &pr_tmpl->registration_list);
		__core_scsi3_dump_registration(tfo, dev, nacl_tmp, pr_reg_tmp,
					       register_type);
		spin_unlock(&pr_tmpl->registration_lock);
		 
		rcu_read_lock();
		deve = pr_reg_tmp->pr_reg_deve;
		if (deve) {
			set_bit(DEF_PR_REG_ACTIVE, &deve->deve_flags);
			core_scsi3_lunacl_undepend_item(deve);
			pr_reg_tmp->pr_reg_deve = NULL;
		}
		rcu_read_unlock();
	}
out:
	 
	rcu_read_lock();
	deve = pr_reg->pr_reg_deve;
	if (deve) {
		set_bit(DEF_PR_REG_ACTIVE, &deve->deve_flags);
		kref_put(&deve->pr_kref, target_pr_kref_release);
		pr_reg->pr_reg_deve = NULL;
	}
	rcu_read_unlock();
}
static int core_scsi3_alloc_registration(
	struct se_device dev,
	struct se_node_acl nacl,
	struct se_lun lun,
	struct se_dev_entry deve,
	u64 mapped_lun,
	unsigned char isid,
	u64 sa_res_key,
	int all_tg_pt,
	int aptpl,
	enum register_type register_type,
	int register_move)
{
	struct t10_pr_registration pr_reg;
	pr_reg = __core_scsi3_alloc_registration(dev, nacl, lun, deve, mapped_lun,
						 isid, sa_res_key, all_tg_pt,
						 aptpl);
	if (!pr_reg)
		return -EPERM;
	__core_scsi3_add_registration(dev, nacl, pr_reg,
			register_type, register_move);
	return 0;
}
static struct t10_pr_registration __core_scsi3_locate_pr_reg(
	struct se_device dev,
	struct se_node_acl nacl,
	unsigned char isid)
{
	struct t10_reservation pr_tmpl = &dev->t10_pr;
	struct t10_pr_registration pr_reg, pr_reg_tmp;
	spin_lock(&pr_tmpl->registration_lock);
	list_for_each_entry_safe(pr_reg, pr_reg_tmp,
			&pr_tmpl->registration_list, pr_reg_list) {
		 
		if (pr_reg->pr_reg_nacl != nacl)
			continue;
		 
		if (!pr_reg->isid_present_at_reg) {
			atomic_inc_mb(&pr_reg->pr_res_holders);
			spin_unlock(&pr_tmpl->registration_lock);
			return pr_reg;
		}
		 
		if (!isid)
			continue;
		if (strcmp(isid, pr_reg->pr_reg_isid))
			continue;
		atomic_inc_mb(&pr_reg->pr_res_holders);
		spin_unlock(&pr_tmpl->registration_lock);
		return pr_reg;
	}
	spin_unlock(&pr_tmpl->registration_lock);
	return NULL;
}
static struct t10_pr_registration core_scsi3_locate_pr_reg(
	struct se_device dev,
	struct se_node_acl nacl,
	struct se_session sess)
{
	struct se_portal_group tpg = nacl->se_tpg;
	unsigned char buf[PR_REG_ISID_LEN] = { };
	unsigned char isid_ptr = NULL;
	if (tpg->se_tpg_tfo->sess_get_initiator_sid != NULL) {
		tpg->se_tpg_tfo->sess_get_initiator_sid(sess, &buf[0],
					PR_REG_ISID_LEN);
		isid_ptr = &buf[0];
	}
	return __core_scsi3_locate_pr_reg(dev, nacl, isid_ptr);
}
static void core_scsi3_put_pr_reg(struct t10_pr_registration pr_reg)
{
	atomic_dec_mb(&pr_reg->pr_res_holders);
}
static int core_scsi3_check_implicit_release(
	struct se_device dev,
	struct t10_pr_registration pr_reg)
{
	struct se_node_acl nacl = pr_reg->pr_reg_nacl;
	struct t10_pr_registration pr_res_holder;
	int ret = 0;
	spin_lock(&dev->dev_reservation_lock);
	pr_res_holder = dev->dev_pr_res_holder;
	if (!pr_res_holder) {
		spin_unlock(&dev->dev_reservation_lock);
		return ret;
	}
	if (pr_res_holder == pr_reg) {
		 
		__core_scsi3_complete_pro_release(dev, nacl, pr_reg, 0, 1);
		ret = 1;
		 
	} else if (pr_reg->pr_reg_all_tg_pt &&
		  (!strcmp(pr_res_holder->pr_reg_nacl->initiatorname,
			  pr_reg->pr_reg_nacl->initiatorname)) &&
		  (pr_res_holder->pr_res_key == pr_reg->pr_res_key)) {
		pr_err("SPC-3 PR: Unable to perform ALL_TG_PT=1"
			" UNREGISTER while existing reservation with matching"
			" key 0x%016Lx is present from another SCSI Initiator"
			" Port\n", pr_reg->pr_res_key);
		ret = -EPERM;
	}
	spin_unlock(&dev->dev_reservation_lock);
	return ret;
}
static void __core_scsi3_free_registration(
	struct se_device dev,
	struct t10_pr_registration pr_reg,
	struct list_head preempt_and_abort_list,
	int dec_holders)
	__releases(&pr_tmpl->registration_lock)
	__acquires(&pr_tmpl->registration_lock)
{
	const struct target_core_fabric_ops tfo =
			pr_reg->pr_reg_nacl->se_tpg->se_tpg_tfo;
	struct t10_reservation pr_tmpl = &dev->t10_pr;
	struct se_node_acl nacl = pr_reg->pr_reg_nacl;
	struct se_dev_entry deve;
	char i_buf[PR_REG_ISID_ID_LEN] = { };
	lockdep_assert_held(&pr_tmpl->registration_lock);
	core_pr_dump_initiator_port(pr_reg, i_buf, PR_REG_ISID_ID_LEN);
	if (!list_empty(&pr_reg->pr_reg_list))
		list_del(&pr_reg->pr_reg_list);
	 
	if (dec_holders)
		core_scsi3_put_pr_reg(pr_reg);
	spin_unlock(&pr_tmpl->registration_lock);
	 
	while (atomic_read(&pr_reg->pr_res_holders) != 0) {
		pr_debug("SPC-3 PR [%s] waiting for pr_res_holders\n",
				tfo->fabric_name);
		cpu_relax();
	}
	rcu_read_lock();
	deve = target_nacl_find_deve(nacl, pr_reg->pr_res_mapped_lun);
	if (deve)
		clear_bit(DEF_PR_REG_ACTIVE, &deve->deve_flags);
	rcu_read_unlock();
	spin_lock(&pr_tmpl->registration_lock);
	pr_debug("SPC-3 PR [%s] Service Action: UNREGISTER Initiator"
		" Node: %s%s\n", tfo->fabric_name,
		pr_reg->pr_reg_nacl->initiatorname,
		i_buf);
	pr_debug("SPC-3 PR [%s] for %s TCM Subsystem %s Object Target"
		" Port(s)\n", tfo->fabric_name,
		(pr_reg->pr_reg_all_tg_pt) ? "ALL" : "SINGLE",
		dev->transport->name);
	pr_debug("SPC-3 PR [%s] SA Res Key: 0x%016Lx PRgeneration:"
		" 0x%08x\n", tfo->fabric_name, pr_reg->pr_res_key,
		pr_reg->pr_res_generation);
	if (!preempt_and_abort_list) {
		pr_reg->pr_reg_deve = NULL;
		pr_reg->pr_reg_nacl = NULL;
		kmem_cache_free(t10_pr_reg_cache, pr_reg);
		return;
	}
	 
	list_add_tail(&pr_reg->pr_reg_abort_list, preempt_and_abort_list);
}
void core_scsi3_free_pr_reg_from_nacl(
	struct se_device dev,
	struct se_node_acl nacl)
{
	struct t10_reservation pr_tmpl = &dev->t10_pr;
	struct t10_pr_registration pr_reg, pr_reg_tmp, pr_res_holder;
	bool free_reg = false;
	 
	spin_lock(&dev->dev_reservation_lock);
	pr_res_holder = dev->dev_pr_res_holder;
	if ((pr_res_holder != NULL) &&
	    (pr_res_holder->pr_reg_nacl == nacl)) {
		__core_scsi3_complete_pro_release(dev, nacl, pr_res_holder, 0, 1);
		free_reg = true;
	}
	spin_unlock(&dev->dev_reservation_lock);
	 
	spin_lock(&pr_tmpl->registration_lock);
	if (pr_res_holder && free_reg)
		__core_scsi3_free_registration(dev, pr_res_holder, NULL, 0);
	list_for_each_entry_safe(pr_reg, pr_reg_tmp,
			&pr_tmpl->registration_list, pr_reg_list) {
		if (pr_reg->pr_reg_nacl != nacl)
			continue;
		__core_scsi3_free_registration(dev, pr_reg, NULL, 0);
	}
	spin_unlock(&pr_tmpl->registration_lock);
}
void core_scsi3_free_all_registrations(
	struct se_device dev)
{
	struct t10_reservation pr_tmpl = &dev->t10_pr;
	struct t10_pr_registration pr_reg, pr_reg_tmp, pr_res_holder;
	spin_lock(&dev->dev_reservation_lock);
	pr_res_holder = dev->dev_pr_res_holder;
	if (pr_res_holder != NULL) {
		struct se_node_acl pr_res_nacl = pr_res_holder->pr_reg_nacl;
		__core_scsi3_complete_pro_release(dev, pr_res_nacl,
						  pr_res_holder, 0, 0);
	}
	spin_unlock(&dev->dev_reservation_lock);
	spin_lock(&pr_tmpl->registration_lock);
	list_for_each_entry_safe(pr_reg, pr_reg_tmp,
			&pr_tmpl->registration_list, pr_reg_list) {
		__core_scsi3_free_registration(dev, pr_reg, NULL, 0);
	}
	spin_unlock(&pr_tmpl->registration_lock);
	spin_lock(&pr_tmpl->aptpl_reg_lock);
	list_for_each_entry_safe(pr_reg, pr_reg_tmp, &pr_tmpl->aptpl_reg_list,
				pr_reg_aptpl_list) {
		list_del(&pr_reg->pr_reg_aptpl_list);
		kmem_cache_free(t10_pr_reg_cache, pr_reg);
	}
	spin_unlock(&pr_tmpl->aptpl_reg_lock);
}
static int core_scsi3_tpg_depend_item(struct se_portal_group tpg)
{
	return target_depend_item(&tpg->tpg_group.cg_item);
}
static void core_scsi3_tpg_undepend_item(struct se_portal_group tpg)
{
	target_undepend_item(&tpg->tpg_group.cg_item);
	atomic_dec_mb(&tpg->tpg_pr_ref_count);
}
static int core_scsi3_nodeacl_depend_item(struct se_node_acl nacl)
{
	if (nacl->dynamic_node_acl)
		return 0;
	return target_depend_item(&nacl->acl_group.cg_item);
}
static void core_scsi3_nodeacl_undepend_item(struct se_node_acl nacl)
{
	if (!nacl->dynamic_node_acl)
		target_undepend_item(&nacl->acl_group.cg_item);
	atomic_dec_mb(&nacl->acl_pr_ref_count);
}
static int core_scsi3_lunacl_depend_item(struct se_dev_entry se_deve)
{
	struct se_lun_acl lun_acl;
	 
	lun_acl = rcu_dereference_check(se_deve->se_lun_acl,
				kref_read(&se_deve->pr_kref) != 0);
	if (!lun_acl)
		return 0;
	return target_depend_item(&lun_acl->se_lun_group.cg_item);
}
static void core_scsi3_lunacl_undepend_item(struct se_dev_entry se_deve)
{
	struct se_lun_acl lun_acl;
	 
	lun_acl = rcu_dereference_check(se_deve->se_lun_acl,
				kref_read(&se_deve->pr_kref) != 0);
	if (!lun_acl) {
		kref_put(&se_deve->pr_kref, target_pr_kref_release);
		return;
	}
	target_undepend_item(&lun_acl->se_lun_group.cg_item);
	kref_put(&se_deve->pr_kref, target_pr_kref_release);
}
static sense_reason_t
core_scsi3_decode_spec_i_port(
	struct se_cmd cmd,
	struct se_portal_group tpg,
	unsigned char l_isid,
	u64 sa_res_key,
	int all_tg_pt,
	int aptpl)
{
	struct se_device dev = cmd->se_dev;
	struct se_portal_group dest_tpg = NULL, tmp_tpg;
	struct se_session se_sess = cmd->se_sess;
	struct se_node_acl dest_node_acl = NULL;
	struct se_dev_entry dest_se_deve = NULL;
	struct t10_pr_registration dest_pr_reg, local_pr_reg, pr_reg_e;
	struct t10_pr_registration pr_reg_tmp, pr_reg_tmp_safe;
	LIST_HEAD(tid_dest_list);
	struct pr_transport_id_holder tidh_new, tidh, tidh_tmp;
	unsigned char buf, ptr, proto_ident;
	const unsigned char i_str = NULL;
	char iport_ptr = NULL, i_buf[PR_REG_ISID_ID_LEN];
	sense_reason_t ret;
	u32 tpdl, tid_len = 0;
	u32 dest_rtpi = 0;
	 
	tidh_new = kzalloc(sizeof(struct pr_transport_id_holder), GFP_KERNEL);
	if (!tidh_new) {
		pr_err("Unable to allocate tidh_new\n");
		return TCM_INSUFFICIENT_REGISTRATION_RESOURCES;
	}
	INIT_LIST_HEAD(&tidh_new->dest_list);
	tidh_new->dest_tpg = tpg;
	tidh_new->dest_node_acl = se_sess->se_node_acl;
	local_pr_reg = __core_scsi3_alloc_registration(cmd->se_dev,
				se_sess->se_node_acl, cmd->se_lun,
				NULL, cmd->orig_fe_lun, l_isid,
				sa_res_key, all_tg_pt, aptpl);
	if (!local_pr_reg) {
		kfree(tidh_new);
		return TCM_INSUFFICIENT_REGISTRATION_RESOURCES;
	}
	if (core_scsi3_lunacl_depend_item(local_pr_reg->pr_reg_deve)) {
		kfree(tidh_new);
		kref_put(&local_pr_reg->pr_reg_deve->pr_kref,
			 target_pr_kref_release);
		kmem_cache_free(t10_pr_reg_cache, local_pr_reg);
		return TCM_INSUFFICIENT_REGISTRATION_RESOURCES;
	}
	tidh_new->dest_pr_reg = local_pr_reg;
	list_add_tail(&tidh_new->dest_list, &tid_dest_list);
	if (cmd->data_length < 28) {
		pr_warn("SPC-PR: Received PR OUT parameter list"
			" length too small: %u\n", cmd->data_length);
		ret = TCM_INVALID_PARAMETER_LIST;
		goto out;
	}
	buf = transport_kmap_data_sg(cmd);
	if (!buf) {
		ret = TCM_INSUFFICIENT_REGISTRATION_RESOURCES;
		goto out;
	}
	 
	tpdl = get_unaligned_be32(&buf[24]);
	if ((tpdl + 28) != cmd->data_length) {
		pr_err("SPC-3 PR: Illegal tpdl: %u + 28 byte header"
			" does not equal CDB data_length: %u\n", tpdl,
			cmd->data_length);
		ret = TCM_INVALID_PARAMETER_LIST;
		goto out_unmap;
	}
	 
	ptr = &buf[28];
	while (tpdl > 0) {
		struct se_lun dest_lun, tmp_lun;
		proto_ident = (ptr[0] & 0x0f);
		dest_tpg = NULL;
		spin_lock(&dev->se_port_lock);
		list_for_each_entry(tmp_lun, &dev->dev_sep_list, lun_dev_link) {
			tmp_tpg = tmp_lun->lun_tpg;
			 
			if (tmp_tpg->proto_id != proto_ident)
				continue;
			dest_rtpi = tmp_lun->lun_rtpi;
			iport_ptr = NULL;
			i_str = target_parse_pr_out_transport_id(tmp_tpg,
					ptr, &tid_len, &iport_ptr);
			if (!i_str)
				continue;
			 
			if (tpg->se_tpg_tfo->sess_get_initiator_sid &&
			    dev->dev_attrib.enforce_pr_isids &&
			    !iport_ptr) {
				pr_warn("SPC-PR: enforce_pr_isids is set but a isid has not been sent in the SPEC_I_PT data for %s.",
					i_str);
				ret = TCM_INVALID_PARAMETER_LIST;
				spin_unlock(&dev->se_port_lock);
				goto out_unmap;
			}
			atomic_inc_mb(&tmp_tpg->tpg_pr_ref_count);
			spin_unlock(&dev->se_port_lock);
			if (core_scsi3_tpg_depend_item(tmp_tpg)) {
				pr_err(" core_scsi3_tpg_depend_item()"
					" for tmp_tpg\n");
				atomic_dec_mb(&tmp_tpg->tpg_pr_ref_count);
				ret = TCM_LOGICAL_UNIT_COMMUNICATION_FAILURE;
				goto out_unmap;
			}
			 
			mutex_lock(&tmp_tpg->acl_node_mutex);
			dest_node_acl = __core_tpg_get_initiator_node_acl(
						tmp_tpg, i_str);
			if (dest_node_acl)
				atomic_inc_mb(&dest_node_acl->acl_pr_ref_count);
			mutex_unlock(&tmp_tpg->acl_node_mutex);
			if (!dest_node_acl) {
				core_scsi3_tpg_undepend_item(tmp_tpg);
				spin_lock(&dev->se_port_lock);
				continue;
			}
			if (core_scsi3_nodeacl_depend_item(dest_node_acl)) {
				pr_err("configfs_depend_item() failed"
					" for dest_node_acl->acl_group\n");
				atomic_dec_mb(&dest_node_acl->acl_pr_ref_count);
				core_scsi3_tpg_undepend_item(tmp_tpg);
				ret = TCM_LOGICAL_UNIT_COMMUNICATION_FAILURE;
				goto out_unmap;
			}
			dest_tpg = tmp_tpg;
			pr_debug("SPC-3 PR SPEC_I_PT: Located %s Node: %s Port RTPI: %u\n",
				dest_tpg->se_tpg_tfo->fabric_name,
				dest_node_acl->initiatorname, dest_rtpi);
			spin_lock(&dev->se_port_lock);
			break;
		}
		spin_unlock(&dev->se_port_lock);
		if (!dest_tpg) {
			pr_err("SPC-3 PR SPEC_I_PT: Unable to locate"
					" dest_tpg\n");
			ret = TCM_INVALID_PARAMETER_LIST;
			goto out_unmap;
		}
		pr_debug("SPC-3 PR SPEC_I_PT: Got %s data_length: %u tpdl: %u"
			" tid_len: %d for %s + %s\n",
			dest_tpg->se_tpg_tfo->fabric_name, cmd->data_length,
			tpdl, tid_len, i_str, iport_ptr);
		if (tid_len > tpdl) {
			pr_err("SPC-3 PR SPEC_I_PT: Illegal tid_len:"
				" %u for Transport ID: %s\n", tid_len, ptr);
			core_scsi3_nodeacl_undepend_item(dest_node_acl);
			core_scsi3_tpg_undepend_item(dest_tpg);
			ret = TCM_INVALID_PARAMETER_LIST;
			goto out_unmap;
		}
		 
		dest_se_deve = core_get_se_deve_from_rtpi(dest_node_acl,
					dest_rtpi);
		if (!dest_se_deve) {
			pr_err("Unable to locate %s dest_se_deve from destination RTPI: %u\n",
				dest_tpg->se_tpg_tfo->fabric_name,
				dest_rtpi);
			core_scsi3_nodeacl_undepend_item(dest_node_acl);
			core_scsi3_tpg_undepend_item(dest_tpg);
			ret = TCM_INVALID_PARAMETER_LIST;
			goto out_unmap;
		}
		if (core_scsi3_lunacl_depend_item(dest_se_deve)) {
			pr_err("core_scsi3_lunacl_depend_item()"
					" failed\n");
			kref_put(&dest_se_deve->pr_kref, target_pr_kref_release);
			core_scsi3_nodeacl_undepend_item(dest_node_acl);
			core_scsi3_tpg_undepend_item(dest_tpg);
			ret = TCM_LOGICAL_UNIT_COMMUNICATION_FAILURE;
			goto out_unmap;
		}
		pr_debug("SPC-3 PR SPEC_I_PT: Located %s Node: %s"
			" dest_se_deve mapped_lun: %llu\n",
			dest_tpg->se_tpg_tfo->fabric_name,
			dest_node_acl->initiatorname, dest_se_deve->mapped_lun);
		 
		pr_reg_e = __core_scsi3_locate_pr_reg(dev, dest_node_acl,
					iport_ptr);
		if (pr_reg_e) {
			core_scsi3_put_pr_reg(pr_reg_e);
			core_scsi3_lunacl_undepend_item(dest_se_deve);
			core_scsi3_nodeacl_undepend_item(dest_node_acl);
			core_scsi3_tpg_undepend_item(dest_tpg);
			ptr += tid_len;
			tpdl -= tid_len;
			tid_len = 0;
			continue;
		}
		 
		tidh_new = kzalloc(sizeof(struct pr_transport_id_holder),
				GFP_KERNEL);
		if (!tidh_new) {
			pr_err("Unable to allocate tidh_new\n");
			core_scsi3_lunacl_undepend_item(dest_se_deve);
			core_scsi3_nodeacl_undepend_item(dest_node_acl);
			core_scsi3_tpg_undepend_item(dest_tpg);
			ret = TCM_LOGICAL_UNIT_COMMUNICATION_FAILURE;
			goto out_unmap;
		}
		INIT_LIST_HEAD(&tidh_new->dest_list);
		tidh_new->dest_tpg = dest_tpg;
		tidh_new->dest_node_acl = dest_node_acl;
		tidh_new->dest_se_deve = dest_se_deve;
		 
		dest_lun = rcu_dereference_check(dest_se_deve->se_lun,
				kref_read(&dest_se_deve->pr_kref) != 0);
		dest_pr_reg = __core_scsi3_alloc_registration(cmd->se_dev,
					dest_node_acl, dest_lun, dest_se_deve,
					dest_se_deve->mapped_lun, iport_ptr,
					sa_res_key, all_tg_pt, aptpl);
		if (!dest_pr_reg) {
			core_scsi3_lunacl_undepend_item(dest_se_deve);
			core_scsi3_nodeacl_undepend_item(dest_node_acl);
			core_scsi3_tpg_undepend_item(dest_tpg);
			kfree(tidh_new);
			ret = TCM_INSUFFICIENT_REGISTRATION_RESOURCES;
			goto out_unmap;
		}
		tidh_new->dest_pr_reg = dest_pr_reg;
		list_add_tail(&tidh_new->dest_list, &tid_dest_list);
		ptr += tid_len;
		tpdl -= tid_len;
		tid_len = 0;
	}
	transport_kunmap_data_sg(cmd);
	 
	list_for_each_entry_safe(tidh, tidh_tmp, &tid_dest_list, dest_list) {
		dest_tpg = tidh->dest_tpg;
		dest_node_acl = tidh->dest_node_acl;
		dest_se_deve = tidh->dest_se_deve;
		dest_pr_reg = tidh->dest_pr_reg;
		list_del(&tidh->dest_list);
		kfree(tidh);
		memset(i_buf, 0, PR_REG_ISID_ID_LEN);
		core_pr_dump_initiator_port(dest_pr_reg, i_buf, PR_REG_ISID_ID_LEN);
		__core_scsi3_add_registration(cmd->se_dev, dest_node_acl,
					dest_pr_reg, 0, 0);
		pr_debug("SPC-3 PR [%s] SPEC_I_PT: Successfully"
			" registered Transport ID for Node: %s%s Mapped LUN:"
			" %llu\n", dest_tpg->se_tpg_tfo->fabric_name,
			dest_node_acl->initiatorname, i_buf, (dest_se_deve) ?
			dest_se_deve->mapped_lun : 0);
		if (dest_pr_reg == local_pr_reg)
			continue;
		core_scsi3_nodeacl_undepend_item(dest_node_acl);
		core_scsi3_tpg_undepend_item(dest_tpg);
	}
	return 0;
out_unmap:
	transport_kunmap_data_sg(cmd);
out:
	 
	list_for_each_entry_safe(tidh, tidh_tmp, &tid_dest_list, dest_list) {
		bool is_local = false;
		dest_tpg = tidh->dest_tpg;
		dest_node_acl = tidh->dest_node_acl;
		dest_se_deve = tidh->dest_se_deve;
		dest_pr_reg = tidh->dest_pr_reg;
		if (dest_pr_reg == local_pr_reg)
			is_local = true;
		list_del(&tidh->dest_list);
		kfree(tidh);
		 
		list_for_each_entry_safe(pr_reg_tmp, pr_reg_tmp_safe,
				&dest_pr_reg->pr_reg_atp_list,
				pr_reg_atp_mem_list) {
			list_del(&pr_reg_tmp->pr_reg_atp_mem_list);
			core_scsi3_lunacl_undepend_item(pr_reg_tmp->pr_reg_deve);
			kmem_cache_free(t10_pr_reg_cache, pr_reg_tmp);
		}
		kmem_cache_free(t10_pr_reg_cache, dest_pr_reg);
		core_scsi3_lunacl_undepend_item(dest_se_deve);
		if (is_local)
			continue;
		core_scsi3_nodeacl_undepend_item(dest_node_acl);
		core_scsi3_tpg_undepend_item(dest_tpg);
	}
	return ret;
}
static int core_scsi3_update_aptpl_buf(
	struct se_device dev,
	unsigned char buf,
	u32 pr_aptpl_buf_len)
{
	struct se_portal_group tpg;
	struct t10_pr_registration pr_reg;
	unsigned char tmp[512], isid_buf[32];
	ssize_t len = 0;
	int reg_count = 0;
	int ret = 0;
	spin_lock(&dev->dev_reservation_lock);
	spin_lock(&dev->t10_pr.registration_lock);
	 
	list_for_each_entry(pr_reg, &dev->t10_pr.registration_list,
			pr_reg_list) {
		tmp[0] = '\0';
		isid_buf[0] = '\0';
		tpg = pr_reg->pr_reg_nacl->se_tpg;
		 
		if (pr_reg->isid_present_at_reg)
			snprintf(isid_buf, 32, "initiator_sid=%s\n",
					pr_reg->pr_reg_isid);
		 
		if (dev->dev_pr_res_holder == pr_reg) {
			snprintf(tmp, 512, "PR_REG_START: %d"
				"\ninitiator_fabric=%s\n"
				"initiator_node=%s\n%s"
				"sa_res_key=%llu\n"
				"res_holder=1\nres_type=%02x\n"
				"res_scope=%02x\nres_all_tg_pt=%d\n"
				"mapped_lun=%llu\n", reg_count,
				tpg->se_tpg_tfo->fabric_name,
				pr_reg->pr_reg_nacl->initiatorname, isid_buf,
				pr_reg->pr_res_key, pr_reg->pr_res_type,
				pr_reg->pr_res_scope, pr_reg->pr_reg_all_tg_pt,
				pr_reg->pr_res_mapped_lun);
		} else {
			snprintf(tmp, 512, "PR_REG_START: %d\n"
				"initiator_fabric=%s\ninitiator_node=%s\n%s"
				"sa_res_key=%llu\nres_holder=0\n"
				"res_all_tg_pt=%d\nmapped_lun=%llu\n",
				reg_count, tpg->se_tpg_tfo->fabric_name,
				pr_reg->pr_reg_nacl->initiatorname, isid_buf,
				pr_reg->pr_res_key, pr_reg->pr_reg_all_tg_pt,
				pr_reg->pr_res_mapped_lun);
		}
		if ((len + strlen(tmp) >= pr_aptpl_buf_len)) {
			pr_err("Unable to update renaming APTPL metadata,"
			       " reallocating larger buffer\n");
			ret = -EMSGSIZE;
			goto out;
		}
		len += sprintf(buf+len, "%s", tmp);
		 
		snprintf(tmp, 512, "target_fabric=%s\ntarget_node=%s\n"
			"tpgt=%hu\nport_rtpi=%hu\ntarget_lun=%llu\nPR_REG_END:"
			" %d\n", tpg->se_tpg_tfo->fabric_name,
			tpg->se_tpg_tfo->tpg_get_wwn(tpg),
			tpg->se_tpg_tfo->tpg_get_tag(tpg),
			pr_reg->tg_pt_sep_rtpi, pr_reg->pr_aptpl_target_lun,
			reg_count);
		if ((len + strlen(tmp) >= pr_aptpl_buf_len)) {
			pr_err("Unable to update renaming APTPL metadata,"
			       " reallocating larger buffer\n");
			ret = -EMSGSIZE;
			goto out;
		}
		len += sprintf(buf+len, "%s", tmp);
		reg_count++;
	}
	if (!reg_count)
		len += sprintf(buf+len, "No Registrations or Reservations");
out:
	spin_unlock(&dev->t10_pr.registration_lock);
	spin_unlock(&dev->dev_reservation_lock);
	return ret;
}
static int __core_scsi3_write_aptpl_to_file(
	struct se_device dev,
	unsigned char buf)
{
	struct t10_wwn wwn = &dev->t10_wwn;
	struct file file;
	int flags = O_RDWR | O_CREAT | O_TRUNC;
	char path;
	u32 pr_aptpl_buf_len;
	int ret;
	loff_t pos = 0;
	path = kasprintf(GFP_KERNEL, "%spraptpl_%s", db_root,
			&wwn->unit_serial[0]);
	if (!path)
		return -ENOMEM;
	file = filp_open(path, flags, 0600);
	if (IS_ERR(file)) {
		pr_err("filp_open(%s) for APTPL metadata"
			" failed\n", path);
		kfree(path);
		return PTR_ERR(file);
	}
	pr_aptpl_buf_len = (strlen(buf) + 1);  Add extra for NULL 
	ret = kernel_write(file, buf, pr_aptpl_buf_len, &pos);
	if (ret < 0)
		pr_debug("Error writing APTPL metadata file: %s\n", path);
	fput(file);
	kfree(path);
	return (ret < 0) ? -EIO : 0;
}
static sense_reason_t core_scsi3_update_and_write_aptpl(struct se_device dev, bool aptpl)
{
	unsigned char buf;
	int rc, len = PR_APTPL_BUF_LEN;
	if (!aptpl) {
		char null_buf = "No Registrations or Reservations\n";
		rc = __core_scsi3_write_aptpl_to_file(dev, null_buf);
		dev->t10_pr.pr_aptpl_active = 0;
		pr_debug("SPC-3 PR: Set APTPL Bit Deactivated\n");
		if (rc)
			return TCM_LOGICAL_UNIT_COMMUNICATION_FAILURE;
		return 0;
	}
retry:
	buf = vzalloc(len);
	if (!buf)
		return TCM_OUT_OF_RESOURCES;
	rc = core_scsi3_update_aptpl_buf(dev, buf, len);
	if (rc < 0) {
		vfree(buf);
		len = 2;
		goto retry;
	}
	rc = __core_scsi3_write_aptpl_to_file(dev, buf);
	if (rc != 0) {
		pr_err("SPC-3 PR: Could not update APTPL\n");
		vfree(buf);
		return TCM_LOGICAL_UNIT_COMMUNICATION_FAILURE;
	}
	dev->t10_pr.pr_aptpl_active = 1;
	vfree(buf);
	pr_debug("SPC-3 PR: Set APTPL Bit Activated\n");
	return 0;
}
static sense_reason_t
core_scsi3_emulate_pro_register(struct se_cmd cmd, u64 res_key, u64 sa_res_key,
		bool aptpl, bool all_tg_pt, bool spec_i_pt, enum register_type register_type)
{
	struct se_session se_sess = cmd->se_sess;
	struct se_device dev = cmd->se_dev;
	struct se_lun se_lun = cmd->se_lun;
	struct se_portal_group se_tpg;
	struct t10_pr_registration pr_reg, pr_reg_p, pr_reg_tmp;
	struct t10_reservation pr_tmpl = &dev->t10_pr;
	unsigned char isid_buf[PR_REG_ISID_LEN] = { };
	unsigned char isid_ptr = NULL;
	sense_reason_t ret = TCM_NO_SENSE;
	int pr_holder = 0, type;
	if (!se_sess || !se_lun) {
		pr_err("SPC-3 PR: se_sess || struct se_lun is NULL!\n");
		return TCM_LOGICAL_UNIT_COMMUNICATION_FAILURE;
	}
	se_tpg = se_sess->se_tpg;
	if (se_tpg->se_tpg_tfo->sess_get_initiator_sid) {
		se_tpg->se_tpg_tfo->sess_get_initiator_sid(se_sess, &isid_buf[0],
				PR_REG_ISID_LEN);
		isid_ptr = &isid_buf[0];
	}
	 
	pr_reg = core_scsi3_locate_pr_reg(dev, se_sess->se_node_acl, se_sess);
	if (!pr_reg) {
		if (res_key) {
			pr_warn("SPC-3 PR: Reservation Key non-zero"
				" for SA REGISTER, returning CONFLICT\n");
			return TCM_RESERVATION_CONFLICT;
		}
		 
		if (!sa_res_key)
			return 0;
		if (!spec_i_pt) {
			 
			if (core_scsi3_alloc_registration(cmd->se_dev,
					se_sess->se_node_acl, cmd->se_lun,
					NULL, cmd->orig_fe_lun, isid_ptr,
					sa_res_key, all_tg_pt, aptpl,
					register_type, 0)) {
				pr_err("Unable to allocate"
					" struct t10_pr_registration\n");
				return TCM_INSUFFICIENT_REGISTRATION_RESOURCES;
			}
		} else {
			 
			ret = core_scsi3_decode_spec_i_port(cmd, se_tpg,
					isid_ptr, sa_res_key, all_tg_pt, aptpl);
			if (ret != 0)
				return ret;
		}
		return core_scsi3_update_and_write_aptpl(dev, aptpl);
	}
	 ok, existing registration 
	if ((register_type == REGISTER) && (res_key != pr_reg->pr_res_key)) {
		pr_err("SPC-3 PR REGISTER: Received"
		       " res_key: 0x%016Lx does not match"
		       " existing SA REGISTER res_key:"
		       " 0x%016Lx\n", res_key,
		       pr_reg->pr_res_key);
		ret = TCM_RESERVATION_CONFLICT;
		goto out;
	}
	if (spec_i_pt) {
		pr_err("SPC-3 PR REGISTER: SPEC_I_PT"
			" set on a registered nexus\n");
		ret = TCM_INVALID_PARAMETER_LIST;
		goto out;
	}
	 
	if (pr_reg->pr_reg_all_tg_pt && !all_tg_pt) {
		pr_err("SPC-3 PR REGISTER: ALL_TG_PT=1"
			" registration exists, but ALL_TG_PT=1 bit not"
			" present in received PROUT\n");
		ret = TCM_INVALID_CDB_FIELD;
		goto out;
	}
	 
	if (sa_res_key) {
		 
		pr_reg->pr_res_generation = core_scsi3_pr_generation(cmd->se_dev);
		pr_reg->pr_res_key = sa_res_key;
		pr_debug("SPC-3 PR [%s] REGISTER%s: Changed Reservation"
			 " Key for %s to: 0x%016Lx PRgeneration:"
			 " 0x%08x\n", cmd->se_tfo->fabric_name,
			 (register_type == REGISTER_AND_IGNORE_EXISTING_KEY) ? "_AND_IGNORE_EXISTING_KEY" : "",
			 pr_reg->pr_reg_nacl->initiatorname,
			 pr_reg->pr_res_key, pr_reg->pr_res_generation);
	} else {
		 
		type = pr_reg->pr_res_type;
		pr_holder = core_scsi3_check_implicit_release(cmd->se_dev,
							      pr_reg);
		if (pr_holder < 0) {
			ret = TCM_RESERVATION_CONFLICT;
			goto out;
		}
		spin_lock(&pr_tmpl->registration_lock);
		 
		if (pr_reg->pr_reg_all_tg_pt) {
			list_for_each_entry_safe(pr_reg_p, pr_reg_tmp,
					&pr_tmpl->registration_list,
					pr_reg_list) {
				if (!pr_reg_p->pr_reg_all_tg_pt)
					continue;
				if (pr_reg_p->pr_res_key != res_key)
					continue;
				if (pr_reg == pr_reg_p)
					continue;
				if (strcmp(pr_reg->pr_reg_nacl->initiatorname,
					   pr_reg_p->pr_reg_nacl->initiatorname))
					continue;
				__core_scsi3_free_registration(dev,
						pr_reg_p, NULL, 0);
			}
		}
		 
		__core_scsi3_free_registration(cmd->se_dev, pr_reg, NULL, 1);
		pr_reg = NULL;
		 
		if (pr_holder &&
		    (type == PR_TYPE_WRITE_EXCLUSIVE_REGONLY ||
		     type == PR_TYPE_EXCLUSIVE_ACCESS_REGONLY)) {
			list_for_each_entry(pr_reg_p,
					&pr_tmpl->registration_list,
					pr_reg_list) {
				target_ua_allocate_lun(
					pr_reg_p->pr_reg_nacl,
					pr_reg_p->pr_res_mapped_lun,
					0x2A,
					ASCQ_2AH_RESERVATIONS_RELEASED);
			}
		}
		spin_unlock(&pr_tmpl->registration_lock);
	}
	ret = core_scsi3_update_and_write_aptpl(dev, aptpl);
out:
	if (pr_reg)
		core_scsi3_put_pr_reg(pr_reg);
	return ret;
}
unsigned char core_scsi3_pr_dump_type(int type)
{
	switch (type) {
	case PR_TYPE_WRITE_EXCLUSIVE:
		return "Write Exclusive Access";
	case PR_TYPE_EXCLUSIVE_ACCESS:
		return "Exclusive Access";
	case PR_TYPE_WRITE_EXCLUSIVE_REGONLY:
		return "Write Exclusive Access, Registrants Only";
	case PR_TYPE_EXCLUSIVE_ACCESS_REGONLY:
		return "Exclusive Access, Registrants Only";
	case PR_TYPE_WRITE_EXCLUSIVE_ALLREG:
		return "Write Exclusive Access, All Registrants";
	case PR_TYPE_EXCLUSIVE_ACCESS_ALLREG:
		return "Exclusive Access, All Registrants";
	default:
		break;
	}
	return "Unknown SPC-3 PR Type";
}
static sense_reason_t
core_scsi3_pro_reserve(struct se_cmd cmd, int type, int scope, u64 res_key)
{
	struct se_device dev = cmd->se_dev;
	struct se_session se_sess = cmd->se_sess;
	struct se_lun se_lun = cmd->se_lun;
	struct t10_pr_registration pr_reg, pr_res_holder;
	struct t10_reservation pr_tmpl = &dev->t10_pr;
	char i_buf[PR_REG_ISID_ID_LEN] = { };
	sense_reason_t ret;
	if (!se_sess || !se_lun) {
		pr_err("SPC-3 PR: se_sess || struct se_lun is NULL!\n");
		return TCM_LOGICAL_UNIT_COMMUNICATION_FAILURE;
	}
	 
	pr_reg = core_scsi3_locate_pr_reg(cmd->se_dev, se_sess->se_node_acl,
				se_sess);
	if (!pr_reg) {
		pr_err("SPC-3 PR: Unable to locate"
			" PR_REGISTERED pr_reg for RESERVE\n");
		return TCM_LOGICAL_UNIT_COMMUNICATION_FAILURE;
	}
	 
	if (res_key != pr_reg->pr_res_key) {
		pr_err("SPC-3 PR RESERVE: Received res_key: 0x%016Lx"
			" does not match existing SA REGISTER res_key:"
			" 0x%016Lx\n", res_key, pr_reg->pr_res_key);
		ret = TCM_RESERVATION_CONFLICT;
		goto out_put_pr_reg;
	}
	 
	if (scope != PR_SCOPE_LU_SCOPE) {
		pr_err("SPC-3 PR: Illegal SCOPE: 0x%02x\n", scope);
		ret = TCM_INVALID_PARAMETER_LIST;
		goto out_put_pr_reg;
	}
	 
	spin_lock(&dev->dev_reservation_lock);
	pr_res_holder = dev->dev_pr_res_holder;
	if (pr_res_holder) {
		 
		if (!is_reservation_holder(pr_res_holder, pr_reg)) {
			struct se_node_acl pr_res_nacl = pr_res_holder->pr_reg_nacl;
			pr_err("SPC-3 PR: Attempted RESERVE from"
				" [%s]: %s while reservation already held by"
				" [%s]: %s, returning RESERVATION_CONFLICT\n",
				cmd->se_tfo->fabric_name,
				se_sess->se_node_acl->initiatorname,
				pr_res_nacl->se_tpg->se_tpg_tfo->fabric_name,
				pr_res_holder->pr_reg_nacl->initiatorname);
			spin_unlock(&dev->dev_reservation_lock);
			ret = TCM_RESERVATION_CONFLICT;
			goto out_put_pr_reg;
		}
		 
		if ((pr_res_holder->pr_res_type != type) ||
		    (pr_res_holder->pr_res_scope != scope)) {
			struct se_node_acl pr_res_nacl = pr_res_holder->pr_reg_nacl;
			pr_err("SPC-3 PR: Attempted RESERVE from"
				" [%s]: %s trying to change TYPE andor SCOPE,"
				" while reservation already held by [%s]: %s,"
				" returning RESERVATION_CONFLICT\n",
				cmd->se_tfo->fabric_name,
				se_sess->se_node_acl->initiatorname,
				pr_res_nacl->se_tpg->se_tpg_tfo->fabric_name,
				pr_res_holder->pr_reg_nacl->initiatorname);
			spin_unlock(&dev->dev_reservation_lock);
			ret = TCM_RESERVATION_CONFLICT;
			goto out_put_pr_reg;
		}
		 
		spin_unlock(&dev->dev_reservation_lock);
		ret = 0;
		goto out_put_pr_reg;
	}
	 
	pr_reg->pr_res_scope = scope;
	pr_reg->pr_res_type = type;
	pr_reg->pr_res_holder = 1;
	dev->dev_pr_res_holder = pr_reg;
	core_pr_dump_initiator_port(pr_reg, i_buf, PR_REG_ISID_ID_LEN);
	pr_debug("SPC-3 PR [%s] Service Action: RESERVE created new"
		" reservation holder TYPE: %s ALL_TG_PT: %d\n",
		cmd->se_tfo->fabric_name, core_scsi3_pr_dump_type(type),
		(pr_reg->pr_reg_all_tg_pt) ? 1 : 0);
	pr_debug("SPC-3 PR [%s] RESERVE Node: %s%s\n",
			cmd->se_tfo->fabric_name,
			se_sess->se_node_acl->initiatorname,
			i_buf);
	spin_unlock(&dev->dev_reservation_lock);
	if (pr_tmpl->pr_aptpl_active)
		core_scsi3_update_and_write_aptpl(cmd->se_dev, true);
	ret = 0;
out_put_pr_reg:
	core_scsi3_put_pr_reg(pr_reg);
	return ret;
}
static sense_reason_t
core_scsi3_emulate_pro_reserve(struct se_cmd cmd, int type, int scope,
		u64 res_key)
{
	switch (type) {
	case PR_TYPE_WRITE_EXCLUSIVE:
	case PR_TYPE_EXCLUSIVE_ACCESS:
	case PR_TYPE_WRITE_EXCLUSIVE_REGONLY:
	case PR_TYPE_EXCLUSIVE_ACCESS_REGONLY:
	case PR_TYPE_WRITE_EXCLUSIVE_ALLREG:
	case PR_TYPE_EXCLUSIVE_ACCESS_ALLREG:
		return core_scsi3_pro_reserve(cmd, type, scope, res_key);
	default:
		pr_err("SPC-3 PR: Unknown Service Action RESERVE Type:"
			" 0x%02x\n", type);
		return TCM_INVALID_CDB_FIELD;
	}
}
static void __core_scsi3_complete_pro_release(
	struct se_device dev,
	struct se_node_acl se_nacl,
	struct t10_pr_registration pr_reg,
	int explicit,
	int unreg)
{
	const struct target_core_fabric_ops tfo = se_nacl->se_tpg->se_tpg_tfo;
	char i_buf[PR_REG_ISID_ID_LEN] = { };
	int pr_res_type = 0, pr_res_scope = 0;
	lockdep_assert_held(&dev->dev_reservation_lock);
	core_pr_dump_initiator_port(pr_reg, i_buf, PR_REG_ISID_ID_LEN);
	 
	if (dev->dev_pr_res_holder) {
		pr_res_type = dev->dev_pr_res_holder->pr_res_type;
		pr_res_scope = dev->dev_pr_res_holder->pr_res_scope;
		dev->dev_pr_res_holder->pr_res_type = 0;
		dev->dev_pr_res_holder->pr_res_scope = 0;
		dev->dev_pr_res_holder->pr_res_holder = 0;
		dev->dev_pr_res_holder = NULL;
	}
	if (!unreg)
		goto out;
	spin_lock(&dev->t10_pr.registration_lock);
	list_del_init(&pr_reg->pr_reg_list);
	 
	if (!list_empty(&dev->t10_pr.registration_list) &&
	    ((pr_res_type == PR_TYPE_WRITE_EXCLUSIVE_ALLREG) ||
	     (pr_res_type == PR_TYPE_EXCLUSIVE_ACCESS_ALLREG))) {
		dev->dev_pr_res_holder =
			list_entry(dev->t10_pr.registration_list.next,
				   struct t10_pr_registration, pr_reg_list);
		dev->dev_pr_res_holder->pr_res_type = pr_res_type;
		dev->dev_pr_res_holder->pr_res_scope = pr_res_scope;
		dev->dev_pr_res_holder->pr_res_holder = 1;
	}
	spin_unlock(&dev->t10_pr.registration_lock);
out:
	if (!dev->dev_pr_res_holder) {
		pr_debug("SPC-3 PR [%s] Service Action: %s RELEASE cleared"
			" reservation holder TYPE: %s ALL_TG_PT: %d\n",
			tfo->fabric_name, (explicit) ? "explicit" :
			"implicit", core_scsi3_pr_dump_type(pr_res_type),
			(pr_reg->pr_reg_all_tg_pt) ? 1 : 0);
	}
	pr_debug("SPC-3 PR [%s] RELEASE Node: %s%s\n",
		tfo->fabric_name, se_nacl->initiatorname,
		i_buf);
	 
	pr_reg->pr_res_holder = pr_reg->pr_res_type = pr_reg->pr_res_scope = 0;
}
static sense_reason_t
core_scsi3_emulate_pro_release(struct se_cmd cmd, int type, int scope,
		u64 res_key)
{
	struct se_device dev = cmd->se_dev;
	struct se_session se_sess = cmd->se_sess;
	struct se_lun se_lun = cmd->se_lun;
	struct t10_pr_registration pr_reg, pr_reg_p, pr_res_holder;
	struct t10_reservation pr_tmpl = &dev->t10_pr;
	sense_reason_t ret = 0;
	if (!se_sess || !se_lun) {
		pr_err("SPC-3 PR: se_sess || struct se_lun is NULL!\n");
		return TCM_LOGICAL_UNIT_COMMUNICATION_FAILURE;
	}
	 
	pr_reg = core_scsi3_locate_pr_reg(dev, se_sess->se_node_acl, se_sess);
	if (!pr_reg) {
		pr_err("SPC-3 PR: Unable to locate"
			" PR_REGISTERED pr_reg for RELEASE\n");
		return TCM_LOGICAL_UNIT_COMMUNICATION_FAILURE;
	}
	 
	spin_lock(&dev->dev_reservation_lock);
	pr_res_holder = dev->dev_pr_res_holder;
	if (!pr_res_holder) {
		 
		spin_unlock(&dev->dev_reservation_lock);
		goto out_put_pr_reg;
	}
	if (!is_reservation_holder(pr_res_holder, pr_reg)) {
		 
		spin_unlock(&dev->dev_reservation_lock);
		goto out_put_pr_reg;
	}
	 
	if (res_key != pr_reg->pr_res_key) {
		pr_err("SPC-3 PR RELEASE: Received res_key: 0x%016Lx"
			" does not match existing SA REGISTER res_key:"
			" 0x%016Lx\n", res_key, pr_reg->pr_res_key);
		spin_unlock(&dev->dev_reservation_lock);
		ret = TCM_RESERVATION_CONFLICT;
		goto out_put_pr_reg;
	}
	 
	if ((pr_res_holder->pr_res_type != type) ||
	    (pr_res_holder->pr_res_scope != scope)) {
		struct se_node_acl pr_res_nacl = pr_res_holder->pr_reg_nacl;
		pr_err("SPC-3 PR RELEASE: Attempted to release"
			" reservation from [%s]: %s with different TYPE "
			"andor SCOPE  while reservation already held by"
			" [%s]: %s, returning RESERVATION_CONFLICT\n",
			cmd->se_tfo->fabric_name,
			se_sess->se_node_acl->initiatorname,
			pr_res_nacl->se_tpg->se_tpg_tfo->fabric_name,
			pr_res_holder->pr_reg_nacl->initiatorname);
		spin_unlock(&dev->dev_reservation_lock);
		ret = TCM_RESERVATION_CONFLICT;
		goto out_put_pr_reg;
	}
	 
	__core_scsi3_complete_pro_release(dev, se_sess->se_node_acl,
					  pr_reg, 1, 0);
	spin_unlock(&dev->dev_reservation_lock);
	if ((type != PR_TYPE_WRITE_EXCLUSIVE_REGONLY) &&
	    (type != PR_TYPE_EXCLUSIVE_ACCESS_REGONLY) &&
	    (type != PR_TYPE_WRITE_EXCLUSIVE_ALLREG) &&
	    (type != PR_TYPE_EXCLUSIVE_ACCESS_ALLREG)) {
		 
		goto write_aptpl;
	}
	spin_lock(&pr_tmpl->registration_lock);
	list_for_each_entry(pr_reg_p, &pr_tmpl->registration_list,
			pr_reg_list) {
		 
		if (pr_reg_p == pr_reg)
			continue;
		target_ua_allocate_lun(pr_reg_p->pr_reg_nacl,
				pr_reg_p->pr_res_mapped_lun,
				0x2A, ASCQ_2AH_RESERVATIONS_RELEASED);
	}
	spin_unlock(&pr_tmpl->registration_lock);
write_aptpl:
	if (pr_tmpl->pr_aptpl_active)
		core_scsi3_update_and_write_aptpl(cmd->se_dev, true);
out_put_pr_reg:
	core_scsi3_put_pr_reg(pr_reg);
	return ret;
}
static sense_reason_t
core_scsi3_emulate_pro_clear(struct se_cmd cmd, u64 res_key)
{
	struct se_device dev = cmd->se_dev;
	struct se_node_acl pr_reg_nacl;
	struct se_session se_sess = cmd->se_sess;
	struct t10_reservation pr_tmpl = &dev->t10_pr;
	struct t10_pr_registration pr_reg, pr_reg_tmp, pr_reg_n, pr_res_holder;
	u64 pr_res_mapped_lun = 0;
	int calling_it_nexus = 0;
	 
	pr_reg_n = core_scsi3_locate_pr_reg(cmd->se_dev,
			se_sess->se_node_acl, se_sess);
	if (!pr_reg_n) {
		pr_err("SPC-3 PR: Unable to locate"
			" PR_REGISTERED pr_reg for CLEAR\n");
		return TCM_LOGICAL_UNIT_COMMUNICATION_FAILURE;
	}
	 
	if (res_key != pr_reg_n->pr_res_key) {
		pr_err("SPC-3 PR REGISTER: Received"
			" res_key: 0x%016Lx does not match"
			" existing SA REGISTER res_key:"
			" 0x%016Lx\n", res_key, pr_reg_n->pr_res_key);
		core_scsi3_put_pr_reg(pr_reg_n);
		return TCM_RESERVATION_CONFLICT;
	}
	 
	spin_lock(&dev->dev_reservation_lock);
	pr_res_holder = dev->dev_pr_res_holder;
	if (pr_res_holder) {
		struct se_node_acl pr_res_nacl = pr_res_holder->pr_reg_nacl;
		__core_scsi3_complete_pro_release(dev, pr_res_nacl,
						  pr_res_holder, 0, 0);
	}
	spin_unlock(&dev->dev_reservation_lock);
	 
	spin_lock(&pr_tmpl->registration_lock);
	list_for_each_entry_safe(pr_reg, pr_reg_tmp,
			&pr_tmpl->registration_list, pr_reg_list) {
		calling_it_nexus = (pr_reg_n == pr_reg) ? 1 : 0;
		pr_reg_nacl = pr_reg->pr_reg_nacl;
		pr_res_mapped_lun = pr_reg->pr_res_mapped_lun;
		__core_scsi3_free_registration(dev, pr_reg, NULL,
					calling_it_nexus);
		 
		if (!calling_it_nexus)
			target_ua_allocate_lun(pr_reg_nacl, pr_res_mapped_lun,
				0x2A, ASCQ_2AH_RESERVATIONS_PREEMPTED);
	}
	spin_unlock(&pr_tmpl->registration_lock);
	pr_debug("SPC-3 PR [%s] Service Action: CLEAR complete\n",
		cmd->se_tfo->fabric_name);
	core_scsi3_update_and_write_aptpl(cmd->se_dev, false);
	core_scsi3_pr_generation(dev);
	return 0;
}
static void __core_scsi3_complete_pro_preempt(
	struct se_device dev,
	struct t10_pr_registration pr_reg,
	struct list_head preempt_and_abort_list,
	int type,
	int scope,
	enum preempt_type preempt_type)
{
	struct se_node_acl nacl = pr_reg->pr_reg_nacl;
	const struct target_core_fabric_ops tfo = nacl->se_tpg->se_tpg_tfo;
	char i_buf[PR_REG_ISID_ID_LEN] = { };
	lockdep_assert_held(&dev->dev_reservation_lock);
	core_pr_dump_initiator_port(pr_reg, i_buf, PR_REG_ISID_ID_LEN);
	 
	if (dev->dev_pr_res_holder)
		__core_scsi3_complete_pro_release(dev, nacl,
						  dev->dev_pr_res_holder, 0, 0);
	dev->dev_pr_res_holder = pr_reg;
	pr_reg->pr_res_holder = 1;
	pr_reg->pr_res_type = type;
	pr_reg->pr_res_scope = scope;
	pr_debug("SPC-3 PR [%s] Service Action: PREEMPT%s created new"
		" reservation holder TYPE: %s ALL_TG_PT: %d\n",
		tfo->fabric_name, (preempt_type == PREEMPT_AND_ABORT) ? "_AND_ABORT" : "",
		core_scsi3_pr_dump_type(type),
		(pr_reg->pr_reg_all_tg_pt) ? 1 : 0);
	pr_debug("SPC-3 PR [%s] PREEMPT%s from Node: %s%s\n",
		tfo->fabric_name, (preempt_type == PREEMPT_AND_ABORT) ? "_AND_ABORT" : "",
		nacl->initiatorname, i_buf);
	 
	if (preempt_and_abort_list)
		list_add_tail(&pr_reg->pr_reg_abort_list,
				preempt_and_abort_list);
}
static void core_scsi3_release_preempt_and_abort(
	struct list_head preempt_and_abort_list,
	struct t10_pr_registration pr_reg_holder)
{
	struct t10_pr_registration pr_reg, pr_reg_tmp;
	list_for_each_entry_safe(pr_reg, pr_reg_tmp, preempt_and_abort_list,
				pr_reg_abort_list) {
		list_del(&pr_reg->pr_reg_abort_list);
		if (pr_reg_holder == pr_reg)
			continue;
		if (pr_reg->pr_res_holder) {
			pr_warn("pr_reg->pr_res_holder still set\n");
			continue;
		}
		pr_reg->pr_reg_deve = NULL;
		pr_reg->pr_reg_nacl = NULL;
		kmem_cache_free(t10_pr_reg_cache, pr_reg);
	}
}
static sense_reason_t
core_scsi3_pro_preempt(struct se_cmd cmd, int type, int scope, u64 res_key,
		u64 sa_res_key, enum preempt_type preempt_type)
{
	struct se_device dev = cmd->se_dev;
	struct se_node_acl pr_reg_nacl;
	struct se_session se_sess = cmd->se_sess;
	LIST_HEAD(preempt_and_abort_list);
	struct t10_pr_registration pr_reg, pr_reg_tmp, pr_reg_n, pr_res_holder;
	struct t10_reservation pr_tmpl = &dev->t10_pr;
	u64 pr_res_mapped_lun = 0;
	int all_reg = 0, calling_it_nexus = 0;
	bool sa_res_key_unmatched = sa_res_key != 0;
	int prh_type = 0, prh_scope = 0;
	if (!se_sess)
		return TCM_LOGICAL_UNIT_COMMUNICATION_FAILURE;
	pr_reg_n = core_scsi3_locate_pr_reg(cmd->se_dev, se_sess->se_node_acl,
				se_sess);
	if (!pr_reg_n) {
		pr_err("SPC-3 PR: Unable to locate"
			" PR_REGISTERED pr_reg for PREEMPT%s\n",
			(preempt_type == PREEMPT_AND_ABORT) ? "_AND_ABORT" : "");
		return TCM_RESERVATION_CONFLICT;
	}
	if (pr_reg_n->pr_res_key != res_key) {
		core_scsi3_put_pr_reg(pr_reg_n);
		return TCM_RESERVATION_CONFLICT;
	}
	if (scope != PR_SCOPE_LU_SCOPE) {
		pr_err("SPC-3 PR: Illegal SCOPE: 0x%02x\n", scope);
		core_scsi3_put_pr_reg(pr_reg_n);
		return TCM_INVALID_PARAMETER_LIST;
	}
	spin_lock(&dev->dev_reservation_lock);
	pr_res_holder = dev->dev_pr_res_holder;
	if (pr_res_holder &&
	   ((pr_res_holder->pr_res_type == PR_TYPE_WRITE_EXCLUSIVE_ALLREG) ||
	    (pr_res_holder->pr_res_type == PR_TYPE_EXCLUSIVE_ACCESS_ALLREG)))
		all_reg = 1;
	if (!all_reg && !sa_res_key) {
		spin_unlock(&dev->dev_reservation_lock);
		core_scsi3_put_pr_reg(pr_reg_n);
		return TCM_INVALID_PARAMETER_LIST;
	}
	 
	if (!pr_res_holder || (pr_res_holder->pr_res_key != sa_res_key)) {
		 
		spin_lock(&pr_tmpl->registration_lock);
		list_for_each_entry_safe(pr_reg, pr_reg_tmp,
				&pr_tmpl->registration_list, pr_reg_list) {
			 
			if (!all_reg) {
				if (pr_reg->pr_res_key != sa_res_key)
					continue;
				sa_res_key_unmatched = false;
				calling_it_nexus = (pr_reg_n == pr_reg) ? 1 : 0;
				pr_reg_nacl = pr_reg->pr_reg_nacl;
				pr_res_mapped_lun = pr_reg->pr_res_mapped_lun;
				__core_scsi3_free_registration(dev, pr_reg,
					(preempt_type == PREEMPT_AND_ABORT) ? &preempt_and_abort_list :
						NULL, calling_it_nexus);
			} else {
				 
				if ((sa_res_key) &&
				     (pr_reg->pr_res_key != sa_res_key))
					continue;
				sa_res_key_unmatched = false;
				calling_it_nexus = (pr_reg_n == pr_reg) ? 1 : 0;
				if (calling_it_nexus)
					continue;
				pr_reg_nacl = pr_reg->pr_reg_nacl;
				pr_res_mapped_lun = pr_reg->pr_res_mapped_lun;
				__core_scsi3_free_registration(dev, pr_reg,
					(preempt_type == PREEMPT_AND_ABORT) ? &preempt_and_abort_list :
						NULL, 0);
			}
			if (!calling_it_nexus)
				target_ua_allocate_lun(pr_reg_nacl,
					pr_res_mapped_lun, 0x2A,
					ASCQ_2AH_REGISTRATIONS_PREEMPTED);
		}
		spin_unlock(&pr_tmpl->registration_lock);
		 
		if (sa_res_key_unmatched) {
			spin_unlock(&dev->dev_reservation_lock);
			core_scsi3_put_pr_reg(pr_reg_n);
			return TCM_RESERVATION_CONFLICT;
		}
		 
		if (pr_res_holder && all_reg && !(sa_res_key)) {
			__core_scsi3_complete_pro_preempt(dev, pr_reg_n,
				(preempt_type == PREEMPT_AND_ABORT) ? &preempt_and_abort_list : NULL,
				type, scope, preempt_type);
			if (preempt_type == PREEMPT_AND_ABORT)
				core_scsi3_release_preempt_and_abort(
					&preempt_and_abort_list, pr_reg_n);
		}
		spin_unlock(&dev->dev_reservation_lock);
		if (pr_tmpl->pr_aptpl_active)
			core_scsi3_update_and_write_aptpl(cmd->se_dev, true);
		core_scsi3_put_pr_reg(pr_reg_n);
		core_scsi3_pr_generation(cmd->se_dev);
		return 0;
	}
	 
	prh_type = pr_res_holder->pr_res_type;
	prh_scope = pr_res_holder->pr_res_scope;
	 
	if (pr_reg_n != pr_res_holder)
		__core_scsi3_complete_pro_release(dev,
						  pr_res_holder->pr_reg_nacl,
						  dev->dev_pr_res_holder, 0, 0);
	 
	spin_lock(&pr_tmpl->registration_lock);
	list_for_each_entry_safe(pr_reg, pr_reg_tmp,
			&pr_tmpl->registration_list, pr_reg_list) {
		calling_it_nexus = (pr_reg_n == pr_reg) ? 1 : 0;
		if (calling_it_nexus)
			continue;
		if (pr_reg->pr_res_key != sa_res_key)
			continue;
		pr_reg_nacl = pr_reg->pr_reg_nacl;
		pr_res_mapped_lun = pr_reg->pr_res_mapped_lun;
		__core_scsi3_free_registration(dev, pr_reg,
				(preempt_type == PREEMPT_AND_ABORT) ? &preempt_and_abort_list : NULL,
				calling_it_nexus);
		 
		target_ua_allocate_lun(pr_reg_nacl, pr_res_mapped_lun, 0x2A,
				ASCQ_2AH_REGISTRATIONS_PREEMPTED);
	}
	spin_unlock(&pr_tmpl->registration_lock);
	 
	__core_scsi3_complete_pro_preempt(dev, pr_reg_n,
			(preempt_type == PREEMPT_AND_ABORT) ? &preempt_and_abort_list : NULL,
			type, scope, preempt_type);
	 
	if ((prh_type != type) || (prh_scope != scope)) {
		spin_lock(&pr_tmpl->registration_lock);
		list_for_each_entry_safe(pr_reg, pr_reg_tmp,
				&pr_tmpl->registration_list, pr_reg_list) {
			calling_it_nexus = (pr_reg_n == pr_reg) ? 1 : 0;
			if (calling_it_nexus)
				continue;
			target_ua_allocate_lun(pr_reg->pr_reg_nacl,
					pr_reg->pr_res_mapped_lun, 0x2A,
					ASCQ_2AH_RESERVATIONS_RELEASED);
		}
		spin_unlock(&pr_tmpl->registration_lock);
	}
	spin_unlock(&dev->dev_reservation_lock);
	 
	if (preempt_type == PREEMPT_AND_ABORT) {
		core_tmr_lun_reset(dev, NULL, &preempt_and_abort_list, cmd);
		core_scsi3_release_preempt_and_abort(&preempt_and_abort_list,
						pr_reg_n);
	}
	if (pr_tmpl->pr_aptpl_active)
		core_scsi3_update_and_write_aptpl(cmd->se_dev, true);
	core_scsi3_put_pr_reg(pr_reg_n);
	core_scsi3_pr_generation(cmd->se_dev);
	return 0;
}
static sense_reason_t
core_scsi3_emulate_pro_preempt(struct se_cmd cmd, int type, int scope,
		u64 res_key, u64 sa_res_key, enum preempt_type preempt_type)
{
	switch (type) {
	case PR_TYPE_WRITE_EXCLUSIVE:
	case PR_TYPE_EXCLUSIVE_ACCESS:
	case PR_TYPE_WRITE_EXCLUSIVE_REGONLY:
	case PR_TYPE_EXCLUSIVE_ACCESS_REGONLY:
	case PR_TYPE_WRITE_EXCLUSIVE_ALLREG:
	case PR_TYPE_EXCLUSIVE_ACCESS_ALLREG:
		return core_scsi3_pro_preempt(cmd, type, scope, res_key,
					      sa_res_key, preempt_type);
	default:
		pr_err("SPC-3 PR: Unknown Service Action PREEMPT%s"
			" Type: 0x%02x\n", (preempt_type == PREEMPT_AND_ABORT) ? "_AND_ABORT" : "", type);
		return TCM_INVALID_CDB_FIELD;
	}
}
static sense_reason_t
core_scsi3_emulate_pro_register_and_move(struct se_cmd cmd, u64 res_key,
		u64 sa_res_key, int aptpl, int unreg)
{
	struct se_session se_sess = cmd->se_sess;
	struct se_device dev = cmd->se_dev;
	struct se_dev_entry dest_se_deve = NULL;
	struct se_lun se_lun = cmd->se_lun, tmp_lun;
	struct se_node_acl pr_res_nacl, pr_reg_nacl, dest_node_acl = NULL;
	struct se_portal_group se_tpg, dest_se_tpg = NULL;
	const struct target_core_fabric_ops dest_tf_ops = NULL, tf_ops;
	struct t10_pr_registration pr_reg, pr_res_holder, dest_pr_reg;
	struct t10_reservation pr_tmpl = &dev->t10_pr;
	unsigned char buf;
	const unsigned char initiator_str;
	char iport_ptr = NULL, i_buf[PR_REG_ISID_ID_LEN] = { };
	u32 tid_len, tmp_tid_len;
	int new_reg = 0, type, scope, matching_iname;
	sense_reason_t ret;
	unsigned short rtpi;
	unsigned char proto_ident;
	if (!se_sess || !se_lun) {
		pr_err("SPC-3 PR: se_sess || struct se_lun is NULL!\n");
		return TCM_LOGICAL_UNIT_COMMUNICATION_FAILURE;
	}
	se_tpg = se_sess->se_tpg;
	tf_ops = se_tpg->se_tpg_tfo;
	 
	pr_reg = core_scsi3_locate_pr_reg(cmd->se_dev, se_sess->se_node_acl,
				se_sess);
	if (!pr_reg) {
		pr_err("SPC-3 PR: Unable to locate PR_REGISTERED"
			" pr_reg for REGISTER_AND_MOVE\n");
		return TCM_LOGICAL_UNIT_COMMUNICATION_FAILURE;
	}
	 
	if (res_key != pr_reg->pr_res_key) {
		pr_warn("SPC-3 PR REGISTER_AND_MOVE: Received"
			" res_key: 0x%016Lx does not match existing SA REGISTER"
			" res_key: 0x%016Lx\n", res_key, pr_reg->pr_res_key);
		ret = TCM_RESERVATION_CONFLICT;
		goto out_put_pr_reg;
	}
	 
	if (!sa_res_key) {
		pr_warn("SPC-3 PR REGISTER_AND_MOVE: Received zero"
			" sa_res_key\n");
		ret = TCM_INVALID_PARAMETER_LIST;
		goto out_put_pr_reg;
	}
	 
	buf = transport_kmap_data_sg(cmd);
	if (!buf) {
		ret = TCM_INSUFFICIENT_REGISTRATION_RESOURCES;
		goto out_put_pr_reg;
	}
	rtpi = get_unaligned_be16(&buf[18]);
	tid_len = get_unaligned_be32(&buf[20]);
	transport_kunmap_data_sg(cmd);
	buf = NULL;
	if ((tid_len + 24) != cmd->data_length) {
		pr_err("SPC-3 PR: Illegal tid_len: %u + 24 byte header"
			" does not equal CDB data_length: %u\n", tid_len,
			cmd->data_length);
		ret = TCM_INVALID_PARAMETER_LIST;
		goto out_put_pr_reg;
	}
	spin_lock(&dev->se_port_lock);
	list_for_each_entry(tmp_lun, &dev->dev_sep_list, lun_dev_link) {
		if (tmp_lun->lun_rtpi != rtpi)
			continue;
		dest_se_tpg = tmp_lun->lun_tpg;
		dest_tf_ops = dest_se_tpg->se_tpg_tfo;
		if (!dest_tf_ops)
			continue;
		atomic_inc_mb(&dest_se_tpg->tpg_pr_ref_count);
		spin_unlock(&dev->se_port_lock);
		if (core_scsi3_tpg_depend_item(dest_se_tpg)) {
			pr_err("core_scsi3_tpg_depend_item() failed"
				" for dest_se_tpg\n");
			atomic_dec_mb(&dest_se_tpg->tpg_pr_ref_count);
			ret = TCM_LOGICAL_UNIT_COMMUNICATION_FAILURE;
			goto out_put_pr_reg;
		}
		spin_lock(&dev->se_port_lock);
		break;
	}
	spin_unlock(&dev->se_port_lock);
	if (!dest_se_tpg || !dest_tf_ops) {
		pr_err("SPC-3 PR REGISTER_AND_MOVE: Unable to locate"
			" fabric ops from Relative Target Port Identifier:"
			" %hu\n", rtpi);
		ret = TCM_INVALID_PARAMETER_LIST;
		goto out_put_pr_reg;
	}
	buf = transport_kmap_data_sg(cmd);
	if (!buf) {
		ret = TCM_INSUFFICIENT_REGISTRATION_RESOURCES;
		goto out_put_pr_reg;
	}
	proto_ident = (buf[24] & 0x0f);
	pr_debug("SPC-3 PR REGISTER_AND_MOVE: Extracted Protocol Identifier:"
			" 0x%02x\n", proto_ident);
	if (proto_ident != dest_se_tpg->proto_id) {
		pr_err("SPC-3 PR REGISTER_AND_MOVE: Received"
			" proto_ident: 0x%02x does not match ident: 0x%02x"
			" from fabric: %s\n", proto_ident,
			dest_se_tpg->proto_id,
			dest_tf_ops->fabric_name);
		ret = TCM_INVALID_PARAMETER_LIST;
		goto out;
	}
	initiator_str = target_parse_pr_out_transport_id(dest_se_tpg,
			&buf[24], &tmp_tid_len, &iport_ptr);
	if (!initiator_str) {
		pr_err("SPC-3 PR REGISTER_AND_MOVE: Unable to locate"
			" initiator_str from Transport ID\n");
		ret = TCM_INVALID_PARAMETER_LIST;
		goto out;
	}
	transport_kunmap_data_sg(cmd);
	buf = NULL;
	pr_debug("SPC-3 PR [%s] Extracted initiator %s identifier: %s"
		" %s\n", dest_tf_ops->fabric_name, (iport_ptr != NULL) ?
		"port" : "device", initiator_str, (iport_ptr != NULL) ?
		iport_ptr : "");
	 
	pr_reg_nacl = pr_reg->pr_reg_nacl;
	matching_iname = (!strcmp(initiator_str,
				  pr_reg_nacl->initiatorname)) ? 1 : 0;
	if (!matching_iname)
		goto after_iport_check;
	if (!iport_ptr || !pr_reg->isid_present_at_reg) {
		pr_err("SPC-3 PR REGISTER_AND_MOVE: TransportID: %s"
			" matches: %s on received I_T Nexus\n", initiator_str,
			pr_reg_nacl->initiatorname);
		ret = TCM_INVALID_PARAMETER_LIST;
		goto out;
	}
	if (!strcmp(iport_ptr, pr_reg->pr_reg_isid)) {
		pr_err("SPC-3 PR REGISTER_AND_MOVE: TransportID: %s %s"
			" matches: %s %s on received I_T Nexus\n",
			initiator_str, iport_ptr, pr_reg_nacl->initiatorname,
			pr_reg->pr_reg_isid);
		ret = TCM_INVALID_PARAMETER_LIST;
		goto out;
	}
after_iport_check:
	 
	mutex_lock(&dest_se_tpg->acl_node_mutex);
	dest_node_acl = __core_tpg_get_initiator_node_acl(dest_se_tpg,
				initiator_str);
	if (dest_node_acl)
		atomic_inc_mb(&dest_node_acl->acl_pr_ref_count);
	mutex_unlock(&dest_se_tpg->acl_node_mutex);
	if (!dest_node_acl) {
		pr_err("Unable to locate %s dest_node_acl for"
			" TransportID%s\n", dest_tf_ops->fabric_name,
			initiator_str);
		ret = TCM_INVALID_PARAMETER_LIST;
		goto out;
	}
	if (core_scsi3_nodeacl_depend_item(dest_node_acl)) {
		pr_err("core_scsi3_nodeacl_depend_item() for"
			" dest_node_acl\n");
		atomic_dec_mb(&dest_node_acl->acl_pr_ref_count);
		dest_node_acl = NULL;
		ret = TCM_INVALID_PARAMETER_LIST;
		goto out;
	}
	pr_debug("SPC-3 PR REGISTER_AND_MOVE: Found %s dest_node_acl:"
		" %s from TransportID\n", dest_tf_ops->fabric_name,
		dest_node_acl->initiatorname);
	 
	dest_se_deve = core_get_se_deve_from_rtpi(dest_node_acl, rtpi);
	if (!dest_se_deve) {
		pr_err("Unable to locate %s dest_se_deve from RTPI:"
			" %hu\n",  dest_tf_ops->fabric_name, rtpi);
		ret = TCM_INVALID_PARAMETER_LIST;
		goto out;
	}
	if (core_scsi3_lunacl_depend_item(dest_se_deve)) {
		pr_err("core_scsi3_lunacl_depend_item() failed\n");
		kref_put(&dest_se_deve->pr_kref, target_pr_kref_release);
		dest_se_deve = NULL;
		ret = TCM_LOGICAL_UNIT_COMMUNICATION_FAILURE;
		goto out;
	}
	pr_debug("SPC-3 PR REGISTER_AND_MOVE: Located %s node %s LUN"
		" ACL for dest_se_deve->mapped_lun: %llu\n",
		dest_tf_ops->fabric_name, dest_node_acl->initiatorname,
		dest_se_deve->mapped_lun);
	 
	spin_lock(&dev->dev_reservation_lock);
	pr_res_holder = dev->dev_pr_res_holder;
	if (!pr_res_holder) {
		pr_warn("SPC-3 PR REGISTER_AND_MOVE: No reservation"
			" currently held\n");
		spin_unlock(&dev->dev_reservation_lock);
		ret = TCM_INVALID_CDB_FIELD;
		goto out;
	}
	 
	if (!is_reservation_holder(pr_res_holder, pr_reg)) {
		pr_warn("SPC-3 PR REGISTER_AND_MOVE: Calling I_T"
			" Nexus is not reservation holder\n");
		spin_unlock(&dev->dev_reservation_lock);
		ret = TCM_RESERVATION_CONFLICT;
		goto out;
	}
	 
	if ((pr_res_holder->pr_res_type == PR_TYPE_WRITE_EXCLUSIVE_ALLREG) ||
	    (pr_res_holder->pr_res_type == PR_TYPE_EXCLUSIVE_ACCESS_ALLREG)) {
		pr_warn("SPC-3 PR REGISTER_AND_MOVE: Unable to move"
			" reservation for type: %s\n",
			core_scsi3_pr_dump_type(pr_res_holder->pr_res_type));
		spin_unlock(&dev->dev_reservation_lock);
		ret = TCM_RESERVATION_CONFLICT;
		goto out;
	}
	pr_res_nacl = pr_res_holder->pr_reg_nacl;
	 
	type = pr_res_holder->pr_res_type;
	scope = pr_res_holder->pr_res_type;
	 
	dest_pr_reg = __core_scsi3_locate_pr_reg(dev, dest_node_acl,
					iport_ptr);
	if (!dest_pr_reg) {
		struct se_lun dest_lun = rcu_dereference_check(dest_se_deve->se_lun,
				kref_read(&dest_se_deve->pr_kref) != 0);
		spin_unlock(&dev->dev_reservation_lock);
		if (core_scsi3_alloc_registration(cmd->se_dev, dest_node_acl,
					dest_lun, dest_se_deve, dest_se_deve->mapped_lun,
					iport_ptr, sa_res_key, 0, aptpl, 2, 1)) {
			ret = TCM_INSUFFICIENT_REGISTRATION_RESOURCES;
			goto out;
		}
		spin_lock(&dev->dev_reservation_lock);
		dest_pr_reg = __core_scsi3_locate_pr_reg(dev, dest_node_acl,
						iport_ptr);
		new_reg = 1;
	}
	 
	__core_scsi3_complete_pro_release(dev, pr_res_nacl,
					  dev->dev_pr_res_holder, 0, 0);
	 
	dev->dev_pr_res_holder = dest_pr_reg;
	dest_pr_reg->pr_res_holder = 1;
	dest_pr_reg->pr_res_type = type;
	pr_reg->pr_res_scope = scope;
	core_pr_dump_initiator_port(pr_reg, i_buf, PR_REG_ISID_ID_LEN);
	 
	if (!new_reg)
		dest_pr_reg->pr_res_generation = pr_tmpl->pr_generation++;
	spin_unlock(&dev->dev_reservation_lock);
	pr_debug("SPC-3 PR [%s] Service Action: REGISTER_AND_MOVE"
		" created new reservation holder TYPE: %s on object RTPI:"
		" %hu  PRGeneration: 0x%08x\n", dest_tf_ops->fabric_name,
		core_scsi3_pr_dump_type(type), rtpi,
		dest_pr_reg->pr_res_generation);
	pr_debug("SPC-3 PR Successfully moved reservation from"
		" %s Fabric Node: %s%s -> %s Fabric Node: %s %s\n",
		tf_ops->fabric_name, pr_reg_nacl->initiatorname,
		i_buf, dest_tf_ops->fabric_name,
		dest_node_acl->initiatorname, (iport_ptr != NULL) ?
		iport_ptr : "");
	 
	core_scsi3_lunacl_undepend_item(dest_se_deve);
	core_scsi3_nodeacl_undepend_item(dest_node_acl);
	core_scsi3_tpg_undepend_item(dest_se_tpg);
	 
	if (unreg) {
		spin_lock(&pr_tmpl->registration_lock);
		__core_scsi3_free_registration(dev, pr_reg, NULL, 1);
		spin_unlock(&pr_tmpl->registration_lock);
	} else
		core_scsi3_put_pr_reg(pr_reg);
	core_scsi3_update_and_write_aptpl(cmd->se_dev, aptpl);
	core_scsi3_put_pr_reg(dest_pr_reg);
	return 0;
out:
	if (buf)
		transport_kunmap_data_sg(cmd);
	if (dest_se_deve)
		core_scsi3_lunacl_undepend_item(dest_se_deve);
	if (dest_node_acl)
		core_scsi3_nodeacl_undepend_item(dest_node_acl);
	core_scsi3_tpg_undepend_item(dest_se_tpg);
out_put_pr_reg:
	core_scsi3_put_pr_reg(pr_reg);
	return ret;
}
sense_reason_t
target_scsi3_emulate_pr_out(struct se_cmd cmd)
{
	struct se_device dev = cmd->se_dev;
	unsigned char cdb = &cmd->t_task_cdb[0];
	unsigned char buf;
	u64 res_key, sa_res_key;
	int sa, scope, type, aptpl;
	int spec_i_pt = 0, all_tg_pt = 0, unreg = 0;
	sense_reason_t ret;
	 
	if (cmd->se_dev->dev_reservation_flags & DRF_SPC2_RESERVATIONS) {
		pr_err("Received PERSISTENT_RESERVE CDB while legacy"
			" SPC-2 reservation is held, returning"
			" RESERVATION_CONFLICT\n");
		return TCM_RESERVATION_CONFLICT;
	}
	 
	if (!cmd->se_sess)
		return TCM_LOGICAL_UNIT_COMMUNICATION_FAILURE;
	if (cmd->data_length < 24) {
		pr_warn("SPC-PR: Received PR OUT parameter list"
			" length too small: %u\n", cmd->data_length);
		return TCM_PARAMETER_LIST_LENGTH_ERROR;
	}
	 
	sa = (cdb[1] & 0x1f);
	scope = (cdb[2] & 0xf0);
	type = (cdb[2] & 0x0f);
	buf = transport_kmap_data_sg(cmd);
	if (!buf)
		return TCM_LOGICAL_UNIT_COMMUNICATION_FAILURE;
	 
	res_key = get_unaligned_be64(&buf[0]);
	sa_res_key = get_unaligned_be64(&buf[8]);
	 
	if (sa != PRO_REGISTER_AND_MOVE) {
		spec_i_pt = (buf[20] & 0x08);
		all_tg_pt = (buf[20] & 0x04);
		aptpl = (buf[20] & 0x01);
	} else {
		aptpl = (buf[17] & 0x01);
		unreg = (buf[17] & 0x02);
	}
	 
	if (dev->dev_attrib.force_pr_aptpl)
		aptpl = 1;
	transport_kunmap_data_sg(cmd);
	buf = NULL;
	 
	if (spec_i_pt && (sa != PRO_REGISTER))
		return TCM_INVALID_PARAMETER_LIST;
	 
	if (!spec_i_pt && (sa != PRO_REGISTER_AND_MOVE) &&
	    (cmd->data_length != 24)) {
		pr_warn("SPC-PR: Received PR OUT illegal parameter"
			" list length: %u\n", cmd->data_length);
		return TCM_PARAMETER_LIST_LENGTH_ERROR;
	}
	 
	switch (sa) {
	case PRO_REGISTER:
		ret = core_scsi3_emulate_pro_register(cmd,
			res_key, sa_res_key, aptpl, all_tg_pt, spec_i_pt, REGISTER);
		break;
	case PRO_RESERVE:
		ret = core_scsi3_emulate_pro_reserve(cmd, type, scope, res_key);
		break;
	case PRO_RELEASE:
		ret = core_scsi3_emulate_pro_release(cmd, type, scope, res_key);
		break;
	case PRO_CLEAR:
		ret = core_scsi3_emulate_pro_clear(cmd, res_key);
		break;
	case PRO_PREEMPT:
		ret = core_scsi3_emulate_pro_preempt(cmd, type, scope,
					res_key, sa_res_key, PREEMPT);
		break;
	case PRO_PREEMPT_AND_ABORT:
		ret = core_scsi3_emulate_pro_preempt(cmd, type, scope,
					res_key, sa_res_key, PREEMPT_AND_ABORT);
		break;
	case PRO_REGISTER_AND_IGNORE_EXISTING_KEY:
		ret = core_scsi3_emulate_pro_register(cmd,
			0, sa_res_key, aptpl, all_tg_pt, spec_i_pt, REGISTER_AND_IGNORE_EXISTING_KEY);
		break;
	case PRO_REGISTER_AND_MOVE:
		ret = core_scsi3_emulate_pro_register_and_move(cmd, res_key,
				sa_res_key, aptpl, unreg);
		break;
	default:
		pr_err("Unknown PERSISTENT_RESERVE_OUT service"
			" action: 0x%02x\n", sa);
		return TCM_INVALID_CDB_FIELD;
	}
	if (!ret)
		target_complete_cmd(cmd, SAM_STAT_GOOD);
	return ret;
}
static sense_reason_t
core_scsi3_pri_read_keys(struct se_cmd cmd)
{
	struct se_device dev = cmd->se_dev;
	struct t10_pr_registration pr_reg;
	unsigned char buf;
	u32 add_len = 0, off = 8;
	if (cmd->data_length < 8) {
		pr_err("PRIN SA READ_KEYS SCSI Data Length: %u"
			" too small\n", cmd->data_length);
		return TCM_INVALID_CDB_FIELD;
	}
	buf = transport_kmap_data_sg(cmd);
	if (!buf)
		return TCM_LOGICAL_UNIT_COMMUNICATION_FAILURE;
	put_unaligned_be32(dev->t10_pr.pr_generation, buf);
	spin_lock(&dev->t10_pr.registration_lock);
	list_for_each_entry(pr_reg, &dev->t10_pr.registration_list,
			pr_reg_list) {
		 
		if (off + 8 <= cmd->data_length) {
			put_unaligned_be64(pr_reg->pr_res_key, &buf[off]);
			off += 8;
		}
		 
		add_len += 8;
	}
	spin_unlock(&dev->t10_pr.registration_lock);
	put_unaligned_be32(add_len, &buf[4]);
	target_set_cmd_data_length(cmd, 8 + add_len);
	transport_kunmap_data_sg(cmd);
	return 0;
}
static sense_reason_t
core_scsi3_pri_read_reservation(struct se_cmd cmd)
{
	struct se_device dev = cmd->se_dev;
	struct t10_pr_registration pr_reg;
	unsigned char buf;
	u64 pr_res_key;
	u32 add_len = 0;
	if (cmd->data_length < 8) {
		pr_err("PRIN SA READ_RESERVATIONS SCSI Data Length: %u"
			" too small\n", cmd->data_length);
		return TCM_INVALID_CDB_FIELD;
	}
	buf = transport_kmap_data_sg(cmd);
	if (!buf)
		return TCM_LOGICAL_UNIT_COMMUNICATION_FAILURE;
	put_unaligned_be32(dev->t10_pr.pr_generation, &buf[0]);
	spin_lock(&dev->dev_reservation_lock);
	pr_reg = dev->dev_pr_res_holder;
	if (pr_reg) {
		 
		add_len = 16;
		put_unaligned_be32(add_len, &buf[4]);
		if (cmd->data_length < 22)
			goto err;
		 
		if ((pr_reg->pr_res_type == PR_TYPE_WRITE_EXCLUSIVE_ALLREG) ||
		    (pr_reg->pr_res_type == PR_TYPE_EXCLUSIVE_ACCESS_ALLREG))
			pr_res_key = 0;
		else
			pr_res_key = pr_reg->pr_res_key;
		put_unaligned_be64(pr_res_key, &buf[8]);
		 
		buf[21] = (pr_reg->pr_res_scope & 0xf0) |
			  (pr_reg->pr_res_type & 0x0f);
	}
	target_set_cmd_data_length(cmd, 8 + add_len);
err:
	spin_unlock(&dev->dev_reservation_lock);
	transport_kunmap_data_sg(cmd);
	return 0;
}
static sense_reason_t
core_scsi3_pri_report_capabilities(struct se_cmd cmd)
{
	struct se_device dev = cmd->se_dev;
	struct t10_reservation pr_tmpl = &dev->t10_pr;
	unsigned char buf;
	u16 len = 8;  Hardcoded to 8. 
	if (cmd->data_length < 6) {
		pr_err("PRIN SA REPORT_CAPABILITIES SCSI Data Length:"
			" %u too small\n", cmd->data_length);
		return TCM_INVALID_CDB_FIELD;
	}
	buf = transport_kmap_data_sg(cmd);
	if (!buf)
		return TCM_LOGICAL_UNIT_COMMUNICATION_FAILURE;
	put_unaligned_be16(len, &buf[0]);
	buf[2] |= 0x10;  CRH: Compatible Reservation Hanlding bit. 
	buf[2] |= 0x08;  SIP_C: Specify Initiator Ports Capable bit 
	buf[2] |= 0x04;  ATP_C: All Target Ports Capable bit 
	buf[2] |= 0x01;  PTPL_C: Persistence across Target Power Loss bit 
	 
	buf[3] |= 0x80;
	 
	buf[3] |= 0x10;  ALLOW COMMANDs field 001b 
	 
	if (pr_tmpl->pr_aptpl_active)
		buf[3] |= 0x01;
	 
	buf[4] |= 0x80;  PR_TYPE_EXCLUSIVE_ACCESS_ALLREG 
	buf[4] |= 0x40;  PR_TYPE_EXCLUSIVE_ACCESS_REGONLY 
	buf[4] |= 0x20;  PR_TYPE_WRITE_EXCLUSIVE_REGONLY 
	buf[4] |= 0x08;  PR_TYPE_EXCLUSIVE_ACCESS 
	buf[4] |= 0x02;  PR_TYPE_WRITE_EXCLUSIVE 
	buf[5] |= 0x01;  PR_TYPE_EXCLUSIVE_ACCESS_ALLREG 
	target_set_cmd_data_length(cmd, len);
	transport_kunmap_data_sg(cmd);
	return 0;
}
static sense_reason_t
core_scsi3_pri_read_full_status(struct se_cmd cmd)
{
	struct se_device dev = cmd->se_dev;
	struct se_node_acl se_nacl;
	struct se_portal_group se_tpg;
	struct t10_pr_registration pr_reg, pr_reg_tmp;
	struct t10_reservation pr_tmpl = &dev->t10_pr;
	unsigned char buf;
	u32 add_desc_len = 0, add_len = 0;
	u32 off = 8;  off into first Full Status descriptor 
	int format_code = 0, pr_res_type = 0, pr_res_scope = 0;
	int exp_desc_len, desc_len;
	bool all_reg = false;
	if (cmd->data_length < 8) {
		pr_err("PRIN SA READ_FULL_STATUS SCSI Data Length: %u"
			" too small\n", cmd->data_length);
		return TCM_INVALID_CDB_FIELD;
	}
	buf = transport_kmap_data_sg(cmd);
	if (!buf)
		return TCM_LOGICAL_UNIT_COMMUNICATION_FAILURE;
	put_unaligned_be32(dev->t10_pr.pr_generation, &buf[0]);
	spin_lock(&dev->dev_reservation_lock);
	if (dev->dev_pr_res_holder) {
		struct t10_pr_registration pr_holder = dev->dev_pr_res_holder;
		if (pr_holder->pr_res_type == PR_TYPE_WRITE_EXCLUSIVE_ALLREG ||
		    pr_holder->pr_res_type == PR_TYPE_EXCLUSIVE_ACCESS_ALLREG) {
			all_reg = true;
			pr_res_type = pr_holder->pr_res_type;
			pr_res_scope = pr_holder->pr_res_scope;
		}
	}
	spin_unlock(&dev->dev_reservation_lock);
	spin_lock(&pr_tmpl->registration_lock);
	list_for_each_entry_safe(pr_reg, pr_reg_tmp,
			&pr_tmpl->registration_list, pr_reg_list) {
		se_nacl = pr_reg->pr_reg_nacl;
		se_tpg = pr_reg->pr_reg_nacl->se_tpg;
		add_desc_len = 0;
		atomic_inc_mb(&pr_reg->pr_res_holders);
		spin_unlock(&pr_tmpl->registration_lock);
		 
		exp_desc_len = target_get_pr_transport_id_len(se_nacl, pr_reg,
					&format_code);
		if (exp_desc_len < 0 ||
		    exp_desc_len + add_len > cmd->data_length) {
			pr_warn("SPC-3 PRIN READ_FULL_STATUS ran"
				" out of buffer: %d\n", cmd->data_length);
			spin_lock(&pr_tmpl->registration_lock);
			atomic_dec_mb(&pr_reg->pr_res_holders);
			break;
		}
		 
		put_unaligned_be64(pr_reg->pr_res_key, &buf[off]);
		off += 8;
		off += 4;  Skip Over Reserved area 
		 
		if (pr_reg->pr_reg_all_tg_pt)
			buf[off] = 0x02;
		 
		if (pr_reg->pr_res_holder) {
			buf[off++] |= 0x01;
			buf[off++] = (pr_reg->pr_res_scope & 0xf0) |
				     (pr_reg->pr_res_type & 0x0f);
		} else if (all_reg) {
			buf[off++] |= 0x01;
			buf[off++] = (pr_res_scope & 0xf0) |
				     (pr_res_type & 0x0f);
		} else {
			off += 2;
		}
		off += 4;  Skip over reserved area 
		 
		if (!pr_reg->pr_reg_all_tg_pt) {
			u16 sep_rtpi = pr_reg->tg_pt_sep_rtpi;
			put_unaligned_be16(sep_rtpi, &buf[off]);
			off += 2;
		} else
			off += 2;  Skip over RELATIVE TARGET PORT IDENTIFIER 
		buf[off+4] = se_tpg->proto_id;
		 
		desc_len = target_get_pr_transport_id(se_nacl, pr_reg,
				&format_code, &buf[off+4]);
		spin_lock(&pr_tmpl->registration_lock);
		atomic_dec_mb(&pr_reg->pr_res_holders);
		if (desc_len < 0)
			break;
		 
		put_unaligned_be32(desc_len, &buf[off]);
		off += 4;
		 
		add_desc_len = (24 + desc_len);
		off += desc_len;
		add_len += add_desc_len;
	}
	spin_unlock(&pr_tmpl->registration_lock);
	 
	put_unaligned_be32(add_len, &buf[4]);
	target_set_cmd_data_length(cmd, 8 + add_len);
	transport_kunmap_data_sg(cmd);
	return 0;
}
sense_reason_t
target_scsi3_emulate_pr_in(struct se_cmd cmd)
{
	sense_reason_t ret;
	 
	if (cmd->se_dev->dev_reservation_flags & DRF_SPC2_RESERVATIONS) {
		pr_err("Received PERSISTENT_RESERVE CDB while legacy"
			" SPC-2 reservation is held, returning"
			" RESERVATION_CONFLICT\n");
		return TCM_RESERVATION_CONFLICT;
	}
	switch (cmd->t_task_cdb[1] & 0x1f) {
	case PRI_READ_KEYS:
		ret = core_scsi3_pri_read_keys(cmd);
		break;
	case PRI_READ_RESERVATION:
		ret = core_scsi3_pri_read_reservation(cmd);
		break;
	case PRI_REPORT_CAPABILITIES:
		ret = core_scsi3_pri_report_capabilities(cmd);
		break;
	case PRI_READ_FULL_STATUS:
		ret = core_scsi3_pri_read_full_status(cmd);
		break;
	default:
		pr_err("Unknown PERSISTENT_RESERVE_IN service"
			" action: 0x%02x\n", cmd->t_task_cdb[1] & 0x1f);
		return TCM_INVALID_CDB_FIELD;
	}
	if (!ret)
		target_complete_cmd(cmd, SAM_STAT_GOOD);
	return ret;
}
sense_reason_t
target_check_reservation(struct se_cmd cmd)
{
	struct se_device dev = cmd->se_dev;
	sense_reason_t ret;
	if (!cmd->se_sess)
		return 0;
	if (dev->se_hba->hba_flags & HBA_FLAGS_INTERNAL_USE)
		return 0;
	if (!dev->dev_attrib.emulate_pr)
		return 0;
	if (dev->transport_flags & TRANSPORT_FLAG_PASSTHROUGH_PGR)
		return 0;
	spin_lock(&dev->dev_reservation_lock);
	if (dev->dev_reservation_flags & DRF_SPC2_RESERVATIONS)
		ret = target_scsi2_reservation_check(cmd);
	else
		ret = target_scsi3_pr_reservation_check(cmd);
	spin_unlock(&dev->dev_reservation_lock);
	return ret;
}
 SPDX-License-Identifier: GPL-2.0-or-later
  Filename:  target_core_rd.c
  This file contains the Storage Engine <-> Ramdisk transport
  specific functions.
  (c) Copyright 2003-2013 Datera, Inc.
  Nicholas A. Bellinger <nab@kernel.org>
	rd_build_device_space():
		
		  Reserve extra element for chain entry
 Don't need backing pages for NULLIO 
	
	  prot_length=8byte dif data
	  tot sg needed = rd_page_count  (PGSZblock_size) 
	  		   (prot_lengthblock_size) + pad
	  PGSZ canceled each other.
 rd page completed, next one please 
 since we increment, the first sg entry is correct 
 Unknown device type, not connected 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2013 Shaohua Li <shli@kernel.org>
  Copyright (C) 2014 Red Hat, Inc.
  Copyright (C) 2015 Arrikto, Inc.
  Copyright (C) 2017 Chinamobile, Inc.
  DOC: Userspace IO
  Userspace IO
  -------------
  Define a shared-memory interface for LIO to pass SCSI commands and
  data to userspace for processing. This is to allow backends that
  are too complex for in-kernel support to be possible.
  It uses the UIO framework to do a lot of the device-creation and
  introspection work for us.
  See the .h file for how the ring is laid out. Note that while the
  command ring is defined, the particulars of the data area are
  not. Offset values in the command entry point to other locations
  internal to the mmap-ed area. There is separate space outside the
  command ring for data buffers. This leaves maximum flexibility for
  moving buffer allocations, or even page flipping or other
  allocation techniques, without altering the command ring layout.
  SECURITY:
  The user process must be assumed to be malicious. There's no way to
  prevent it breaking the command ring protocol if it wants, but in
  order to prevent other issues we must only ever read data from
  the shared memory area, not offsets or sizes. This applies to
  command ring entries as well as the mailbox. Extra code needed for
  this may have a 'UAM' comment.
 For mailbox plus cmd ring, the size is fixed 8MB 
 Offset of cmd ring is size of mailbox 
  For data area, the default block size is PAGE_SIZE and
  the default total size is 256K  PAGE_SIZE.
  Default number of global data blocks(512K  PAGE_SIZE)
  when the unmap thread will be started.
 wake up thread waiting for reply 
 Offset of data area from start of mb 
 Must add data_off and mb_addr to get the address 
	 Can't use se_cmd when cleaning up expired cmds, because if
  To avoid dead lock the mutex lock order should always be:
  mutex_lock(&root_udev_mutex);
  ...
  mutex_lock(&tcmu_dev->cmdr_lock);
  mutex_unlock(&tcmu_dev->cmdr_lock);
  ...
  mutex_unlock(&root_udev_mutex);
 multicast group 
 Our generic netlink family 
 Count the number of already allocated pages 
 try to get new zeroed page from the mm 
 start value of dbi + 1 must not be a valid dbi 
 Get the next dbi 
 Do not add more than udev->data_blk_size to iov 
	
	  The following code will gather and map the blocks to the same iovec
	  when the blocks are all next to each other.
 dbi is not next to previous dbi, so start new iov 
 write offset relative to mb_addr 
 start value of dbi + 1 must not be a valid dbi 
 We prepare the IOVs for DMA_FROM_DEVICE transfer direction 
  Some ring helper functions. We don't assume size is a power of 2 so
  we can't use circ_buf.h.
 Keep 1 byte unused or we can't tell full from empty 
 start value of dbi + 1 must not be a valid dbi 
 set length to 0 to abort outer loop 
		
		  For bidi case, the first count blocks are for Data-Out
		  buffer blocks, and before gathering the Data-In buffer
		  the Data-Out buffer blocks should be skipped.
  We can't queue a command until we have space available on the cmd ring.
  Called with ring lock held.
 UAM 
	
	  If cmd end-of-ring space is too small then we need space for a NOP plus
	  original cmd - cmds are internally contiguous.
  We have to allocate data buffers before we can queue a command.
  Returns -1 on error (not enough space) or number of needed iovs on success
  Called with ring lock held.
 try to check and get the data blocks as needed 
	
	  For backwards compat if qfull_time_out is not set use
	  cmd_time_out and if that's not set use the default time out.
 UAM 
 Insert a PAD if end-of-ring space is too small 
 not used for PAD 
 UAM 
  queue_cmd_ring - queue cmd to ring or internally
  @tcmu_cmd: cmd to queue
  @scsi_err: TCM error code if failure (-1) returned.
  Returns:
  -1 we cannot queue internally or to the ring.
   0 success
   1 internally queued to wait for ring memory to free.
 size of data buffer needed 
	
	  Must be a certain minimum size for response sense info, but
	  also may be larger if the iov array is large.
		
		  Don't leave commands partially setup because the unmap
		  thread might need the blocks to make forward progress.
 prepare iov list and copy data to data area if necessary 
 Handle BIDI commands 
 All offsets relative to mb_addr, not start of entry! 
  queue_tmr_ring - queue tmr info to ring or internally
  @udev: related tcmu_dev
  @tmr: tcmu_tmr containing tmr info to queue
  Returns:
   0 success
   1 internally queued to wait for ring memory to free.
 First we check for aborted commands in qfull_queue 
 Commands on qfull queue have no id yet 
	
	  cmd has been completed already from timeout, just reclaim
	  data area space and free cmd
 Get Data-In buffer before clean up 
 TODO: 
		
		  Keep this command after completion, since userspace still
		  needs the data buffer. Mark it with TCMU_CMD_BIT_KEEP_BUF
		  and reset potential TCMU_CMD_BIT_EXPIRED, so we don't accept
		  a second completion later.
		  Userspace can free the buffer later by writing the cmd_id
		  to new action attribute free_kept_buf.
			
			  tmr was requeued, so just put all tmrs back in
			  the queue
		
		  Flush max. up to end of cmd ring since current entry might
		  be a padding that is shorter than sizeof(entry)
		
		  Allocated blocks exceeded global block limit, currently no
		  more pending or waiting commands so try to reclaim blocks.
 Upper layer should drain all requests before calling this 
 There can be left over TMR cmds. Remove them. 
			
			  We were not able to even start the command, so
			  fail with busy to allow a retry in case runner
			  was only temporarily down. If the device is being
			  removed then LIO core will do the right thing and
			  fail the retry.
			
			  Ignore scsi_ret for now. target_complete_cmd
			  drops it.
			
			  cmd was requeued, so just put all cmds back in
			  the queue
  mmap code from uio.c. Copied here because we want to hook mmap()
  and this stuff must come along.
	
	  Userspace messed up and passed in a address not in the
	  data iov passed to it.
 release ref from tcmu_vma_open 
	
	  We need to subtract mi because userspace uses offset = NPAGE_SIZE
	  to use mem[N].
 For the vmalloc()ed cmd area pages 
 For the dynamically growing data area pages 
 Ensure the mmap is exactly the right size 
 O_EXCL not supported for char devs, so fake it? 
		 Cmds with KEEP_BUF set are no longer on the ring, but
		  userspace still holds the data buffer. If userspace closes
		  we implicitly free these cmds and buffers, since after new
		  open the (new ?) userspace cannot find the cmd in the ring
		  and thus never will release the buffer by writing cmd_id to
		  free_kept_buf action attribute.
	
	  We only freed data space, not ring space. Therefore we dont call
	  run_tmr_queue, but call run_qfull_queue if tmr_list is empty.
 Wait during an add as the listener may not be up yet 
 If the old string exists, free it 
 mailbox fits in first part of CMDR space 
 Default in Idle state 
 Initialise the mailbox of the ring buffer 
 User can set hw_block_size before enable the device 
 Other attributes can be configured in userspace 
	 If user didn't explicitly disable netlink reply support, use
	  module scope setting.
	
	  Get a ref incase userspace does a close on the uio device before
	  LIO has initiated tcmu_free_device.
 release ref from init 
 release ref from configure 
 complete IO that has executed successfully 
 fail IO waiting to be queued 
				
				  Userspace was not able to start the
				  command or it is retryable.
 hard failure 
	
	  ring is empty and qfull queue never contains aborted commands.
	  So TMRs in tmr queue do not contain relevant cmd_ids.
	  After a ring reset userspace should do a fresh start, so
	  even LUN RESET message is no longer relevant.
	  Therefore remove all TMRs from qfull queue
 Check if device has been configured before 
 Check if device has been configured before 
 Check if device has been configured before 
	
	  We only freed data space, not ring space. Therefore we dont call
	  run_tmr_queue, but call run_qfull_queue if tmr_list is empty.
 Try to complete the finished commands first 
 Skip the udevs in idle 
			
			  The last bit is dbi_max, so it is not possible
			  reclaim any blocks.
 The current udev will goto idle state 
 Here will truncate the data area from off 
 Release the block pages 
		
		  If cmd_time_out is disabled but qfull is set deadline
		  will only reflect the qfull timeout. Ignore it.
 SPDX-License-Identifier: GPL-2.0-or-later
  SCSI Primary Commands (SPC) parsing and emulation.
  (c) Copyright 2002-2013 Datera, Inc.
  Nicholas A. Bellinger <nab@kernel.org>
	
	  Set SCCS for MAINTENANCE_IN + REPORT_TARGET_PORT_GROUPS.
	
	  Set TPGS field for explicit andor implicit ALUA access type
	  and opteration.
	 
	  See spc4r17 section 6.4.2 Table 135
 Set RMB (removable media) for tape devices 
 SPC-4 
	
	  NORMACA and HISUP = 0, RESPONSE DATA FORMAT = 2
	 
	  SPC4 says:
	    A RESPONSE DATA FORMAT field set to 2h indicates that the
	    standard INQUIRY data is in the format defined in this
	    standard. Response data format values less than 2h are
	    obsolete. Response data format values greater than 2h are
	    reserved.
	
	  Enable SCCS and TPGS fields for Emulated ALUA
	
	  Set Third-Party Copy (3PC) bit to indicate support for EXTENDED_COPY
	
	  Set Protection (PROTECT) bit when DIF has been enabled on the
	  device, and the fabric supports VERIFY + PASS.  Also report
	  PROTECT=1 if sess_prot_type has been configured to allow T10-PI
	  to unprotected devices.
 CmdQue=1 
	
	  ASCII data fields described as being left-aligned shall have any
	  unused bytes at the end of the field (i.e., highest offset) and the
	  unused bytes shall be filled with ASCII space characters (20h).
	
	  Set the VERSION DESCRIPTOR fields
 Set additional length to 91 
 unit serial number 
 Extra Byte for NULL Terminator 
  Generate NAA IEEE Registered Extended designator
	
	  Start NAA IEEE Registered Extended IdentifierDesignator
 IEEE COMPANY_ID 
	
	  Generate up to 36 bits of VENDOR SPECIFIC IDENTIFIER starting on
	  byte 3 bit 3-0 for NAA IEEE Registered Extended DESIGNATOR field
	  format, followed by 64 bits of VENDOR SPECIFIC IDENTIFIER EXTENSION
	  to complete the payload.  These are based from VPD=0x80 PRODUCT SERIAL
	  NUMBER set via vpd_unit_serial in target_core_configfs.c to ensure
	  per device uniqeness.
  Device identification VPD, for a complete list of
  DESIGNATOR TYPEs see spc4r17 Table 459.
	
	  NAA IEEE Registered Extended Assigned designator format, see
	  spc4r17 section 7.7.3.6.5
	 
	  We depend upon a target_core_modConfigFS provided
	  syskernelconfigtargetcore$HBA$DEVwwnvpd_unit_serial
	  value in order to return the NAA id.
 CODE SET == Binary 
 Set ASSOCIATION == addressed logical unit: 0)b 
 IdentifierDesignator type == NAA identifier 
 IdentifierDesignator length 
 NAA IEEE Registered Extended designator 
	
	  T10 Vendor Identifier Page, see spc4r17 section 7.7.3.4
 For Vendor field 
 For VPD Header 
 For Vendor field 
 For : 
 For NULL Terminator 
 ASCII 
 T10 Vendor ID 
 left align Vendor ID and pad with spaces 
 Extra Byte for NULL Terminator 
 Identifier Length 
 Header size for Designation descriptor 
		
		  Relative target port identifer, see spc4r17
		  section 7.7.3.7
		 
		  Get the PROTOCOL IDENTIFIER as defined by spc4r17
		  section 7.5.1 Table 362
 CODE SET == Binary 
 Set PIV=1 
 Set ASSOCIATION == target port: 01b 
 DESIGNATOR TYPE == Relative target port identifer 
 Skip over Reserved 
 DESIGNATOR LENGTH 
		 Skip over Obsolete field in RTPI payload
 Header size + Designation descriptor 
		
		  Target port group identifier, see spc4r17
		  section 7.7.3.8
		 
		  Get the PROTOCOL IDENTIFIER as defined by spc4r17
		  section 7.5.1 Table 362
 CODE SET == Binary 
 Set PIV=1 
 Set ASSOCIATION == target port: 01b 
 DESIGNATOR TYPE == Target port group identifier 
 Skip over Reserved 
 DESIGNATOR LENGTH 
 Skip over Reserved Field 
 Header size + Designation descriptor 
		
		  Logical Unit Group identifier, see spc4r17
		  section 7.7.3.8
 CODE SET == Binary 
 DESIGNATOR TYPE == Logical Unit Group identifier 
 Skip over Reserved 
 DESIGNATOR LENGTH 
 Skip over Reserved Field 
 Header size + Designation descriptor 
		
		  SCSI name string designator, see spc4r17
		  section 7.7.3.11
		 
		  Get the PROTOCOL IDENTIFIER as defined by spc4r17
		  section 7.5.1 Table 362
 CODE SET == UTF-8 
 Set PIV=1 
 Set ASSOCIATION == target port: 01b 
 DESIGNATOR TYPE == SCSI name string 
 Skip over Reserved and length 
		
		  SCSI name string identifer containing, $FABRIC_MOD
		  dependent information.  For LIO-Target and iSCSI
		  Target Port, this means "<iSCSI name>,t,0x<TPGT> in
		  UTF-8 encoding.
 Include  NULL terminator ;
		
		  The null-terminated, null-padded (see 4.4.2) SCSI
		  NAME STRING field contains a UTF-8 format string.
		  The number of bytes in the SCSI NAME STRING field
		  (i.e., the value in the DESIGNATOR LENGTH field)
		  shall be no larger than 256 and shall be a multiple
		  of four.
 Header size + Designation descriptor 
		
		  Target device designator
 CODE SET == UTF-8 
 Set PIV=1 
 Set ASSOCIATION == target device: 10b 
 DESIGNATOR TYPE == SCSI name string 
 Skip over Reserved and length 
		
		  SCSI name string identifer containing, $FABRIC_MOD
		  dependent information.  For LIO-Target and iSCSI
		  Target Port, this means "<iSCSI name>" in
		  UTF-8 encoding.
 Include  NULL terminator ;
		
		  The null-terminated, null-padded (see 4.4.2) SCSI
		  NAME STRING field contains a UTF-8 format string.
		  The number of bytes in the SCSI NAME STRING field
		  (i.e., the value in the DESIGNATOR LENGTH field)
		  shall be no larger than 256 and shall be a multiple
		  of four.
 Header size + Designation descriptor 
 Page Length for VPD 0x83 
 Extended INQUIRY Data VPD Page 
	
	  Set GRD_CHK + REF_CHK for TYPE1 protection, or GRD_CHK
	  only for TYPE3 protection.
 logical unit supports type 1 and type 3 protection 
 Set HEADSUP, ORDSUP, SIMPSUP 
 If WriteCache emulation is enabled, set V_SUP 
 If an LBA map is present set R_SUP 
 Block Limits VPD page 
	
	  Following spc3r22 section 6.5.3 Block Limits VPD page, when
	  emulate_tpu=1 or emulate_tpws=1 we will be expect a
	  different page length for Thin Provisioning.
 Set WSNZ to 1 
	
	  Set MAXIMUM COMPARE AND WRITE LENGTH
	
	  Set OPTIMAL TRANSFER LENGTH GRANULARITY
	
	  Set MAXIMUM TRANSFER LENGTH
	 
	  XXX: Currently assumes single PAGE_SIZE per scatterlist for fabrics
	  enforcing maximum HW scatter-gather-list entry limit
	
	  Set OPTIMAL TRANSFER LENGTH
	
	  Exit now if we don't support TP.
	
	  Set MAXIMUM UNMAP LBA COUNT
	
	  Set MAXIMUM UNMAP BLOCK DESCRIPTOR COUNT
	
	  Set OPTIMAL UNMAP GRANULARITY
	
	  UNMAP GRANULARITY ALIGNMENT
 Set the UGAVALID bit 
	
	  MAXIMUM WRITE SAME LENGTH
 Block Device Characteristics VPD page 
 Thin Provisioning VPD 
	
	  From spc3r22 section 6.5.4 Thin Provisioning VPD page:
	 
	  The PAGE LENGTH field is defined in SPC-4. If the DP bit is set to
	  zero, then the page length shall be set to 0004h.  If the DP bit
	  is set to one, then the page length shall be set to the value
	  defined in table 162.
	
	  Set Hardcoded length mentioned above for DP=0
	
	  The THRESHOLD EXPONENT field indicates the threshold set size in
	  LBAs as a power of 2 (i.e., the threshold set size is equal to
	  2(threshold exponent)).
	 
	  Note that this is currently set to 0x00 as mkp says it will be
	  changing again.  We can enable this once it has settled in T10
	  and is actually used by LinuxSCSI ML code.
	
	  A TPU bit set to one indicates that the device server supports
	  the UNMAP command (see 5.25). A TPU bit set to zero indicates
	  that the device server does not support the UNMAP command.
	
	  A TPWS bit set to one indicates that the device server supports
	  the use of the WRITE SAME (16) command (see 5.42) to unmap LBAs.
	  A TPWS bit set to zero indicates that the device server does not
	  support the use of the WRITE SAME (16) command to unmap LBAs.
	
	  The unmap_zeroes_data set means that the underlying device supports
	  REQ_OP_DISCARD and has the discard_zeroes_data bit set. This
	  satisfies the SBC requirements for LBPRZ, meaning that a subsequent
	  read will return zeroes after an UNMAP or WRITE SAME (16) to an LBA
	  See sbc4r36 6.6.4.
 Referrals VPD page 
 supported vital product data pages 
	
	  Only report the INQUIRY EVPD=1 pages after a valid NAA
	  Registered Extended LUN WWN has been set via ConfigFS
	  during device creationrestart.
 No changeable values for now 
 No changeable values for now 
 GLTSD: No implicit save of log parameters 
 D_SENSE: Descriptor format sense data for 64bit sectors 
	
	  From spc4r23, 7.4.7 Control mode page
	 
	  The QUEUE ALGORITHM MODIFIER field (see table 368) specifies
	  restrictions on the algorithm used for reordering commands
	  having the SIMPLE task attribute (see SAM-4).
	 
	                     Table 368 -- QUEUE ALGORITHM MODIFIER field
	                          Code      Description
	                           0h       Restricted reordering
	                           1h       Unrestricted reordering allowed
	                           2h to 7h    Reserved
	                           8h to Fh    Vendor specific
	 
	  A value of zero in the QUEUE ALGORITHM MODIFIER field specifies that
	  the device server shall order the processing sequence of commands
	  having the SIMPLE task attribute such that data integrity is maintained
	  for that I_T nexus (i.e., if the transmission of new SCSI transport protocol
	  requests is halted at any time, the final value of all data observable
	  on the medium shall be the same as if all the commands had been processed
	  with the ORDERED task attribute).
	 
	  A value of one in the QUEUE ALGORITHM MODIFIER field specifies that the
	  device server may reorder the processing sequence of commands having the
	  SIMPLE task attribute in any manner. Any data integrity exposures related to
	  command sequence order shall be explicitly handled by the application client
	  through the selection of appropriate ommands and task attributes.
	
	  From spc4r17, section 7.4.6 Control mode Page
	 
	  Unit Attention interlocks control (UN_INTLCK_CTRL) to code 00b
	 
	  00b: The logical unit shall clear any unit attention condition
	  reported in the same I_T_L_Q nexus transaction as a CHECK CONDITION
	  status and shall not establish a unit attention condition when a com-
	  mand is completed with BUSY, TASK SET FULL, or RESERVATION CONFLICT
	  status.
	 
	  10b: The logical unit shall not clear any unit attention condition
	  reported in the same I_T_L_Q nexus transaction as a CHECK CONDITION
	  status and shall not establish a unit attention condition when
	  a command is completed with BUSY, TASK SET FULL, or RESERVATION
	  CONFLICT status.
	 
	  11b a The logical unit shall not clear any unit attention condition
	  reported in the same I_T_L_Q nexus transaction as a CHECK CONDITION
	  status and shall establish a unit attention condition for the
	  initiator port associated with the I_T nexus on which the BUSY,
	  TASK SET FULL, or RESERVATION CONFLICT status is being returned.
	  Depending on the status, the additional sense code shall be set to
	  PREVIOUS BUSY STATUS, PREVIOUS TASK SET FULL STATUS, or PREVIOUS
	  RESERVATION CONFLICT STATUS. Until it is cleared by a REQUEST SENSE
	  command, a unit attention condition shall be established only once
	  for a BUSY, TASK SET FULL, or RESERVATION CONFLICT status regardless
	  to the number of commands completed with one of those status codes.
 TARGET_UA_INTLCK_CTRL_CLEAR 
	
	  From spc4r17, section 7.4.6 Control mode Page
	 
	  Task Aborted Status (TAS) bit set to zero.
	 
	  A task aborted status (TAS) bit set to zero specifies that aborted
	  tasks shall be terminated by the device server without any response
	  to the application client. A TAS bit set to one specifies that tasks
	  aborted by the actions of an I_T nexus other than the I_T nexus on
	  which the command was received shall be completed with TASK ABORTED
	  status (see SAM-4).
	
	  From spc4r30, section 7.5.7 Control mode page
	 
	  Application Tag Owner (ATO) bit set to one.
	 
	  If the ATO bit is set to one the device server shall not modify the
	  LOGICAL BLOCK APPLICATION TAG field and, depending on the protection
	  type, shall not modify the contents of the LOGICAL BLOCK REFERENCE
	  TAG field.
 No changeable values for now 
 Write Cache Enable 
 Disabled Read Ahead 
 No changeable values for now 
	
	  I believe that the WP bit (bit 7) in the mode header is the same for
	  all device types..
 WP bit 
 DPOFUA bit 
 LONGLBA 
	
	  Skip over MODE DATA LENGTH + MEDIUM TYPE fields to byte 3 for
	  MODE_SENSE_10 and byte 2 for MODE_SENSE (6).
 DEVICE-SPECIFIC PARAMETER 
	
	  SBC only allows us to enable FUA and DPO together.  Fortunately
	  DPO is explicitly specified as a hint, so a noop is a perfectly
	  valid implementation.
 BLOCK DESCRIPTOR 
	
	  For now we only include a block descriptor for disk (SBC)
	  devices; other command sets use a slightly different format.
			
			  Tricky way to say all subpage 00h for
			  subpage==0, all subpages for subpage==0xff
			  (and we just checked above that those are
			  the only two possibilities).
	
	  We don't intend to implement:
	   - obsolete page 03h "format parameters" (checked by Solaris)
	
	  If no struct se_session pointer is present, this struct se_cmd is
	  coming via a target_core_mod PASSTHROUGH op, and not through
	  a $FABRIC_MOD.  In that case, report LUN=0 only.
		
		  We determine the correct LUN LIST LENGTH even once we
		  have reached the initial allocation length.
		  See SPC2-R20 7.19.
	
	  See SPC3 r07, page 159.
	
	  If no LUNs are accessible, report virtual LUN 0.
		
		  The SPC-2 RESERVE does not contain a size in the SCSI CDB.
		  Assume the passthrough or $FABRIC_MOD will tell us about it.
		
		  Do implicit HEAD_OF_QUEUE processing for INQUIRY.
		  See spc4r17 section 5.3
		
		  Do implicit HEAD_OF_QUEUE processing for REPORT_LUNS
		  See spc4r17 section 5.3
			
			  MAINTENANCE_IN from SCC-2
			  Check for emulated MI_REPORT_TARGET_PGS
			
			  GPCMD_SEND_KEY from multi media commands
			
			  MAINTENANCE_OUT from SCC-2
			  Check for emulated MO_SET_TARGET_PGS.
			
			  GPCMD_SEND_KEY from multi media commands
 SPDX-License-Identifier: GPL-2.0-or-later
  Filename:  target_core_tpg.c
  This file contains generic Target Portal Group related functions.
  (c) Copyright 2002-2013 Datera, Inc.
  Nicholas A. Bellinger <nab@kernel.org>
	__core_tpg_get_initiator_node_acl():
 	mutex_lock(&tpg->acl_node_mutex); must be held when calling
	core_tpg_get_initiator_node_acl():
	
	  Obtain se_node_acl->acl_kref using fabric driver provided
	  initiatorname[] during node acl endpoint lookup driven by
	  new se_session login.
	 
	  The reference is held until se_session shutdown -> release
	  occurs via fabric driver invoked transport_deregister_session()
	  or transport_free_session() code.
	core_tpg_add_node_to_devs():
		
		  By default in LIO-Target $FABRIC_MOD,
		  demo_mode_write_protect is ON, or READ_ONLY;
			
			  Allow only optical drives to issue RW in default RO
			  demo mode.
		
		  Check to see if there are any existing persistent reservation
		  APTPL pre-registrations that need to be enabled for this dynamic
		  LUN ACL now..
	
	  When allocating a dynamically generated node_acl, go ahead
	  and take the extra kref now before returning to the fabric
	  driver caller.
	 
	  Note this reference will be released at session shutdown
	  time within transport_free_session() code.
	
	  Here we only create demo-mode MappedLUNs from the active
	  TPG LUNs if the fabric is not explicitly asking for
	  tpg_check_demo_mode_login_only() == 1.
	
	  Wait for last target_put_nacl() to complete in target_complete_nacl()
	  for active fabric session transport_deregister_session() callbacks.
	core_tpg_set_initiator_node_queue_depth():
	
	  Allow the setting of se_node_acl queue_depth to be idempotent,
	  and not force a session shutdown event if the value is not
	  changing.
	
	  User has requested to change the queue depth for a Initiator Node.
	  Change the value in the Node's struct se_node_acl, and call
	  target_set_nacl_queue_depth() to set the new queue depth.
	
	  Shutdown all pending sessions to force session reinstatement.
	core_tpg_set_initiator_node_tag():
 	Initiator nodeacl tags are not used internally, but may be used by
 	userspace to emulate aliases or groups.
 	Returns length of newly-set tag or -EINVAL.
 Does not change se_wwn->priv. 
	
	  For the typical case where core_tpg_register() is called by a
	  fabric driver from target_core_fabric_ops->fabric_make_tpg()
	  configfs context, use the original tf_ops pointer already saved
	  by target-core in target_fabric_make_wwn().
	 
	  Otherwise, for special cases like iscsi-target discovery TPGs
	  the caller is responsible for setting ->se_tpg_tfo ahead of
	  calling core_tpg_register().
	
	  Release any remaining demo-mode generated se_node_acl that have
	  not been released because of TFO->tpg_check_demo_mode_cache() == 1
	  in transport_deregister_session().
	
	  rcu_dereference_raw protected by se_lun->lun_group symlink
	  reference to se_device->dev_group.
	
	  Wait for any active IO references to percpu se_lun->lun_ref to
	  be released.  Also, se_lun->lun_ref is now used by PR and ALUA
	  logic when referencing a remote target port during ALL_TGT_PT=1
	  and generating UNIT_ATTENTIONs for ALUA access state transition.
 SPDX-License-Identifier: GPL-2.0-or-later
  Filename:  target_core_fabric_lib.c
  This file contains generic high level protocol identifier and PR
  handlers for TCM fabric modules
  (c) Copyright 2010-2013 Datera, Inc.
  Nicholas A. Bellinger <nab@linux-iscsi.org>
  See SPC4, section 7.5 "Protocol specific parameters" for details
  on the formats implemented in this file.
 Skip over 'naa. prefix 
	
	  We convert the ASCII formatted N Port name into a binary
	  encoded TransportID.
	
	  The FC Transport ID is a hardcoded 24-byte length
	
	  Only null terminate the last field.
	 
	  From spc4r37 section 7.6.4.6: TransportID for initiator ports using
	  SCSI over iSCSI.
	 
	  Table 507 TPID=0 Initiator device TransportID
	 
	  The null-terminated, null-padded (see 4.3.2) ISCSI NAME field shall
	  contain the iSCSI name of an iSCSI initiator node (see RFC 7143).
	  The first ISCSI NAME field byte containing an ASCII null character
	  terminates the ISCSI NAME field without regard for the specified
	  length of the iSCSI TransportID or the contents of the ADDITIONAL
	  LENGTH field.
		
		  Set FORMAT CODE 01b for iSCSI Initiator port TransportID
		  format.
		
		  From spc4r37 Section 7.6.4.6
		 
		  Table 508 TPID=1 Initiator port TransportID.
		 
		  The ISCSI NAME field shall not be null-terminated
		  (see 4.3.2) and shall not be padded.
		 
		  The SEPARATOR field shall contain the five ASCII
		  characters ",i,0x".
		 
		  The null-terminated, null-padded ISCSI INITIATOR SESSION ID
		  field shall contain the iSCSI initiator session identifier
		  (see RFC 3720) in the form of ASCII characters that are the
		  hexadecimal digits converted from the binary iSCSI initiator
		  session identifier value. The first ISCSI INITIATOR SESSION
		  ID field byte containing an ASCII null character terminates
		  the ISCSI INITIATOR SESSION ID field without regard for the
		  specified length of the iSCSI TransportID or the contents
		  of the ADDITIONAL LENGTH field.
 ASCII Character: "," 
 ASCII Character: "i" 
 ASCII Character: "," 
 ASCII Character: "0" 
 ASCII Character: "x" 
	
	  The ADDITIONAL LENGTH field specifies the number of bytes that follow
	  in the TransportID. The additional length shall be at least 20 and
	  shall be a multiple of four.
	
	  Increment value for total payload + header length for
	  full status descriptor
	
	  Add extra byte for NULL terminator
	
	  If there is ISID present with the registration, use format code:
	  01b: iSCSI Initiator port TransportID format
	 
	  If there is not an active iSCSI session, use format code:
	  00b: iSCSI Initiator device TransportID format
 For ",i,0x" ASCII separator 
	
	  The ADDITIONAL LENGTH field specifies the number of bytes that follow
	  in the TransportID. The additional length shall be at least 20 and
	  shall be a multiple of four.
	
	  Increment value for total payload + header length for
	  full status descriptor
	
	  Check for FORMAT CODE 00b or 01b from spc4r17, section 7.5.4.6:
	 
	        TransportID for initiator ports using SCSI over iSCSI,
	        from Table 388 -- iSCSI TransportID formats.
	 
	     00b     Initiator port is identified using the world wide unique
	             SCSI device name of the iSCSI initiator
	             device containing the initiator port (see table 389).
	     01b     Initiator port is identified using the world wide unique
	             initiator port identifier (see table 390).10b to 11b
	             Reserved
	
	  If the caller wants the TransportID Length, we set that value for the
	  entire iSCSI Tarnsport ID now.
 The shift works thanks to integer promotion rules 
 Add four bytes for iSCSI Transport ID header 
	
	  Check for ',i,0x' separator between iSCSI Name and iSCSI Initiator
	  Session ID as defined in Table 390 - iSCSI initiator port TransportID
	  format.
 Terminate iSCSI Name 
 Skip over ",i,0x" separator 
		
		  Go ahead and do the lower case conversion of the received
		  12 ASCII characters representing the ISID in the TransportID
		  for comparison against the running iSCSI session's ISID from
		  iscsi_target.c:lio_sess_get_initiator_sid()
			
			  The first ISCSI INITIATOR SESSION ID field byte
			  containing an ASCII null character terminates the
			  ISCSI INITIATOR SESSION ID field without regard for
			  the specified length of the iSCSI TransportID or the
			  contents of the ADDITIONAL LENGTH field.
	
	  Most transports use a fixed length 24 byte identifier.
		
		  Assume the FORMAT CODE 00b from spc4r17, 7.5.4.7 TransportID
		  for initiator ports using SCSI over SAS Serial SCSI Protocol.
 SPDX-License-Identifier: GPL-2.0-or-later
  Filename:  target_core_transport.c
  This file contains the Generic Target Engine Core.
  (c) Copyright 2002-2013 Datera, Inc.
  Nicholas A. Bellinger <nab@kernel.org>
 This code ensures unique mib indexes are handed out. 
  Allocate a new row index for the entry type specified
  transport_init_session - initialize a session object
  @se_sess: Session object pointer.
  The caller must have zero-initialized @se_sess before calling this function.
	
	  Drivers like iscsi and loop do not call target_stop_session
	  during session shutdown so we have to drop the ref taken at init
	  time here.
  transport_alloc_session - allocate a session object and initialize it
  @sup_prot_ops: bitmask that defines which T10-PI modes are supported.
  transport_alloc_session_tags - allocate target driver private data
  @se_sess:  Session pointer.
  @tag_num:  Maximum number of in-flight commands between initiator and target.
  @tag_size: Size in bytes of the private data a target driver associates with
 	      each command.
  transport_init_session_tags - allocate a session and target driver private data
  @tag_num:  Maximum number of in-flight commands between initiator and target.
  @tag_size: Size in bytes of the private data a target driver associates with
 	      each command.
  @sup_prot_ops: bitmask that defines which T10-PI modes are supported.
  Called with spin_lock_irqsave(&struct se_portal_group->session_lock called.
	
	  Used by struct se_node_acl's under ConfigFS to locate active se_session-t
	 
	  Only set for struct se_session's that will actually be moving IO.
	  eg: NOT discovery sessions.
		
		 
		  Determine if fabric allows for T10-PI feature bits exposed to
		  initiators for device backends with !dev->dev_attrib.pi_prot_type.
		 
		  If so, then always save prot_type on a per se_node_acl node
		  basis and re-instate the previous sess_prot_type to avoid
		  disabling PI from below any previously initiator side
		  registered LUNs.
		
		  If the fabric module supports an ISID based TransportID,
		  save this value in binary from the fabric I_T Nexus now.
		
		  The se_nacl->nacl_sess pointer will be set to the
		  last active I_T Nexus for each struct se_node_acl.
	
	  If the fabric driver is using percpu-ida based pre allocation
	  of IO descriptor tags, go ahead and perform that setup now..
	
	  Go ahead and perform any remaining fabric setup that is
	  required before transport_register_session().
 Include NULL terminator 
	
	  Used by struct se_node_acl's under ConfigFS to locate active struct se_session
		
		  If the session list is empty, then clear the pointer.
		  Otherwise, set the struct se_session pointer from the tail
		  element of the per struct se_node_acl active session list.
	
	  Drop the se_node_acl->nacl_kref obtained from within
	  core_tpg_get_initiator_node_acl().
		
		  Also determine if we need to drop the extra ->cmd_kref if
		  it had been previously dynamically generated, and
		  the endpoint is not caching dynamic ACLs.
	
	  Since the session is being removed, release SPC-2
	  reservations held by the session that is disappearing.
	
	  If last kref is dropping now for an explicit NodeACL, awake sleeping
	  ->acl_free_comp caller to wakeup configfs se_node_acl->acl_group
	  removal context from within transport_free_session() code.
	 
	  For dynamic ACL, target_put_nacl() uses target_complete_nacl()
	  to release all remaining generate_node_acl=1 created ACL resources.
  This function is called by the target core after the target core has
  finished processing a SCSI command or SCSI TMF. Both the regular command
  processing code and the code for aborting commands can call this
  function. CMD_T_STOP is set if and only if another thread is waiting
  inside transport_wait_for_tasks() for t_transport_stop_comp.
	
	  Determine if frontend context caller is requesting the stopping of
	  this command for frontend exceptions.
	
	  Some fabric modules like tcm_loop can release their internally
	  allocated IO reference and struct se_cmd now.
	 
	  Fabric modules are expected to return '1' here if the se_cmd being
	  passed is released at this point, or zero if not being released.
	
	  Clear struct se_cmd->se_lun before the handoff to FE.
  Used when asking transport to copy Sense Data from the underlying
  LinuxSCSI struct scsi_cmnd
		
		  Allow the fabric driver to unmap any resources before
		  releasing the descriptor via TFO->release_cmd().
		
		  To do: establish a unit attention condition on the I_T
		  nexus associated with cmd. See also the paragraph "Aborting
		  commands" in SAM.
 May be called from interrupt context so must not sleep. 
  Handle QUEUE_FULL  -EAGAIN and -ENOMEM status
	
	  Check if the Protocol Identifier Valid (PIV) bit is set..
	 
	  from spc3r23.pdf section 7.5.1
	
	  The VPD identification association..
	 
	  from spc3r23.pdf Section 7.6.3.1 Table 297
	
	  The VPD identifier type..
	 
	  from spc3r23.pdf Section 7.6.3.1 Table 298
 Binary 
 ASCII 
 UTF-8 
 offset to start of the identifier 
	
	  The VPD Code Set (encoding)
	 
	  from spc3r23.pdf Section 7.6.3.1 Table 296
 Binary 
 ASCII 
 UTF-8 
	
	  Check if fabric enforced maximum SGL entries per IO descriptor
	  exceeds se_cmd->data_length.  If true, set SCF_UNDERFLOW_BIT +
	  residual_count and reduce original cmd->data_length to maximum
	  length based on single PAGE_SIZE entry scatter-lists.
		
		  If an existing CDB overflow is present, calculate new residual
		  based on CDB size minus fabric maximum transfer length.
		 
		  If an existing CDB underflow is present, calculate new residual
		  based on original cmd->data_length minus fabric maximum transfer
		  length.
		 
		  Otherwise, set the underflow residual based on cmd->data_length
		  minus fabric maximum transfer length.
		
		  Reset sbc_check_prot() calculated protection payload
		  length based upon the new smaller MTL.
  target_cmd_size_check - Check whether there will be a residual.
  @cmd: SCSI command.
  @size: Data buffer size derived from CDB. The data buffer size provided by
    the SCSI transport driver is available in @cmd->data_length.
  Compare the data buffer size from the CDB with the data buffer limit from the transport
  header. Set @cmd->residual_count and SCF_OVERFLOW_BIT or SCF_UNDERFLOW_BIT if necessary.
  Note: target drivers set @cmd->data_length by calling __target_init_cmd().
  Return: TCM_NO_SENSE
		
		  For READ command for the overflow case keep the existing
		  fabric provided ->data_length. Otherwise for the underflow
		  case, reset ->data_length to the smaller SCSI expected data
		  transfer length.
			
			  Do not truncate ->data_length for WRITE command to
			  dump all payload
			
			  Some fabric drivers like iscsi-target still expect to
			  always reject overflow writes.  Reject this case until
			  full fabric driver level support for overflow writes
			  is introduced tree-wide.
  Used by fabric modules containing a local struct se_cmd within their
  fabric dependent per IO descriptor.
  Preserves the value of @cmd->tag.
	
	  Check if SAM Task Attribute emulation is enabled for this
	  struct se_device storage object
	
	  Ensure that the received CDB is less than the max (252 + 8) bytes
	  for VARIABLE_LENGTH_CMD
	
	  If the received CDB is larger than TCM_MAX_COMMAND_SIZE,
	  allocate the additional extended CDB buffer now..  Otherwise
	  setup the pointer from __t_task_cdb to t_task_cdb.
	
	  Copy the original CDB into cmd->
	
	  Copy the CDB here to allow trace_target_cmd_complete() to
	  print the cdb to the trace buffers.
  Used by fabric module frontends to queue tasks directly.
  May only be used from process context.
	
	  Set TRANSPORT_NEW_CMD state and CMD_T_ACTIVE to ensure that
	  outstanding descriptors are handled correctly during shutdown via
	  transport_wait_for_tasks()
	 
	  Also, we don't take cmd->t_state_lock here as we only expect
	  this to be called for initial descriptor submission.
	
	  transport_generic_new_cmd() is already handling QUEUE_FULL,
	  so follow TRANSPORT_NEW_CMD processing thread context usage
	  and call transport_generic_request_failure() if necessary..
	
	  Reject SCSI data overflow with map_mem_to_cmd() as incoming
	  scatterlists already have been set to follow what the fabric
	  passes for the original expected data transfer length.
  target_init_cmd - initialize se_cmd
  @se_cmd: command descriptor to init
  @se_sess: associated se_sess for endpoint
  @sense: pointer to SCSI sense buffer
  @unpacked_lun: unpacked LUN to reference for struct se_lun
  @data_length: fabric expected data transfer length
  @task_attr: SAM task attribute
  @data_dir: DMA data direction
  @flags: flags for command submission from target_sc_flags_tables
  Task tags are supported if the caller has set @se_cmd->tag.
  Returns:
 	- less than zero to signal active IO shutdown failure.
 	- zero on success.
  If the fabric driver calls target_stop_session, then it must check the
  return code and handle failures. This will never fail for other drivers,
  and the return code can be ignored.
	
	  Signal bidirectional data payloads to target-core
	
	  Initialize se_cmd for target operation.  From this point
	  exceptions are handled by sending exception status via
	  target_core_fabric_ops->queue_status() callback
	
	  Obtain struct se_cmd->cmd_kref reference. A second kref_get here is
	  necessary for fabrics using TARGET_SCF_ACK_KREF that expect a second
	  kref_put() to happen during fabric packet acknowledgement.
  target_submit_prep - prepare cmd for submission
  @se_cmd: command descriptor to prep
  @cdb: pointer to SCSI CDB
  @sgl: struct scatterlist memory for unidirectional mapping
  @sgl_count: scatterlist count for unidirectional mapping
  @sgl_bidi: struct scatterlist memory for bidirectional READ mapping
  @sgl_bidi_count: scatterlist count for bidirectional READ mapping
  @sgl_prot: struct scatterlist memory protection information
  @sgl_prot_count: scatterlist count for protection information
  @gfp: gfp allocation type
  Returns:
 	- less than zero to signal failure.
 	- zero on success.
  If failure is returned, lio will the callers queue_status to complete
  the cmd.
	
	  Locate se_lun pointer and attach it to struct se_cmd
	
	  Save pointers for SGLs containing protection information,
	  if present.
	
	  When a non zero sgl_count has been passed perform SGL passthrough
	  mapping for pre-allocated fabric memory instead of having target
	  core perform an internal SGL allocation..
  target_submit - perform final initialization and submit cmd to LIO core
  @se_cmd: command descriptor to submit
  target_submit_prep must have been called on the cmd, and this must be
  called from process context.
		
		  A work-around for tcm_loop as some userspace code via
		  scsi-generic do not memset their associated read buffers,
		  so go ahead and do that here for type non-data CDBs.  Also
		  note that this is currently guaranteed to be a single SGL
		  for this case by target core in target_setup_cmd_from_cdb()
		  -> transport_generic_cmd_sequencer().
	
	  Check if we need to delay processing because of ALUA
	  ActiveNonOptimized primary access state..
  target_submit_cmd - lookup unpacked lun and submit uninitialized se_cmd
  @se_cmd: command descriptor to submit
  @se_sess: associated se_sess for endpoint
  @cdb: pointer to SCSI CDB
  @sense: pointer to SCSI sense buffer
  @unpacked_lun: unpacked LUN to reference for struct se_lun
  @data_length: fabric expected data transfer length
  @task_attr: SAM task attribute
  @data_dir: DMA data direction
  @flags: flags for command submission from target_sc_flags_tables
  Task tags are supported if the caller has set @se_cmd->tag.
  This may only be called from process context, and also currently
  assumes internal allocation of fabric payload buffer by target-core.
  It also assumes interal target core SGL memory allocation.
  This function must only be used by drivers that do their own
  sync during shutdown and does not use target_stop_session. If there
  is a failure this function will call into the fabric driver's
  queue_status with a CHECK_CONDITION.
	
	  We have a ref to the lun at this point, but the cmds could
	  complete before we unplug, so grab a ref to the se_device so we
	  can call back into the backend.
 Previous call took what we were queued to submit 
  target_queue_submission - queue the cmd to run on the LIO workqueue
  @se_cmd: command descriptor to submit
  target_submit_tmr - lookup unpacked lun and submit uninitialized se_cmd
                      for TMR CDBs
  @se_cmd: command descriptor to submit
  @se_sess: associated se_sess for endpoint
  @sense: pointer to SCSI sense buffer
  @unpacked_lun: unpacked LUN to reference for struct se_lun
  @fabric_tmr_ptr: fabric context for TMR req
  @tm_type: Type of TM request
  @gfp: gfp type for caller
  @tag: referenced task tag for TMR_ABORT_TASK
  @flags: submit cmd flags
  Callable from all contexts.
	
	  FIXME: Currently expect caller to handle se_cmd->se_tmr_req
	  allocation failure.
 See target_submit_cmd for commentary 
	
	  For callback during failure handling, push this work off
	  to process context with TMR_LUN_DOES_NOT_EXIST status.
  Handle SAM-esque emulation for generic transport request failures.
	
	  For SAM Task Attribute emulation for failed struct se_cmd
		
		  No SENSE Data payload for this case, set SCSI Status
		  and queue the response to $FABRIC_MOD.
		 
		  Uses linuxincludescsiscsi.h SAM status codes defs
		
		  For UA Interlock Code 11b, a RESERVATION CONFLICT will
		  establish a UNIT ATTENTION with PREVIOUS RESERVATION
		  CONFLICT STATUS.
		 
		  See spc4r17, section 7.4.6 Control Mode Page, Table 349
		
		  Check for an existing UNIT ATTENTION condition after
		  target_handle_task_attr() has done SAM task attr
		  checking, and possibly have already defered execution
		  out to target_restart_delayed_cmds() context.
	
	  Perform WRITE_INSERT of PI using software emulation when backend
	  device has PI enabled, if the transport has not already generated
	  PI using hardware WRITE_INSERT offload.
	
	  Check for the existence of HEAD_OF_QUEUE, and if true return 1
	  to allow the passed struct se_cmd list of tasks to the front of the list.
		
		  For SIMPLE and UNTAGGED Task Attribute commands
		
		  We will account for this when we dequeue from the delayed
		  list.
	
	  We may have no non ordered cmds when this function started or we
	  could have raced with the last simplehead cmd completing, so kick
	  the delayed handler here.
	
	  Determine if frontend context caller is requesting the stopping of
	  this command for frontend exceptions.
	 
	  If the received CDB has already been aborted stop processing it here.
  Process all commands up to the last received ORDERED task attribute which
  requires another blocking boundary
			
			  Check if we started with:
			  [ordered] [simple] [ordered]
			  and we are now at the last ordered so we have to wait
			  for the simple cmd.
  Called from IO completion to determine which dormantdelayed
  and ordered cmds need to have their tasks added to the execution queue.
	
	  If a fabric driver ->write_pending() or ->queue_data_in() callback
	  has returned neither -ENOMEM or -EAGAIN, assume it's fatal and
	  the same callbacks should not be retried.  Return CHECK_CONDITION
	  if a scsi_status is not already set.
	 
	  If a fabric driver ->queue_status() has returned non zero, always
	  keep retrying no matter what..
	
	  Check if we need to send a sense buffer from
	  the struct se_cmd in question. We do NOT want
	  to take this path of the IO has been marked as
	  needing to be treated like a "normal read". This
	  is the case if it's a tape read, and either the
	  FM, EOM, or ILI bits are set, but there is no
	  sense data.
 queue status if not treating this as a normal read 
	
	  -EAGAIN or -ENOMEM signals retry of ->write_pending() andor
	  ->queue_data_in() callbacks from new process context.
	 
	  Otherwise for other errors, transport_complete_qf() will send
	  CHECK_CONDITION via ->queue_status() instead of attempting to
	  retry associated fabric driver data-transfer callbacks.
	
	  Check if we need to move delayeddormant tasks from cmds on the
	  delayed execution list after a HEAD_OF_QUEUE or ORDERED Task
	  Attribute.
	
	  Check to schedule QUEUE_FULL work, or execute an existing
	  cmd->transport_qf_callback()
	
	  Check if we need to send a sense buffer from
	  the struct se_cmd in question. We do NOT want
	  to take this path of the IO has been marked as
	  needing to be treated like a "normal read". This
	  is the case if it's a tape read, and either the
	  FM, EOM, or ILI bits are set, but there is no
	  sense data.
	
	  Check for a callback, used by amongst other things
	  XDWRITE_READ_10 and COMPARE_AND_WRITE emulation.
		
		  if this is a READ-type IO, but SCSI status
		  is set, then skip returning data and just
		  return the status -- unless this IO is marked
		  as needing to be treated as a normal read,
		  in which case we want to go ahead and return
		  the data. This happens, for example, for tape
		  reads with the FM, EOM, or ILI bits set, with
		  no sense data.
		
		  Perform READ_STRIP of PI using software emulation when
		  backend had PI enabled, if the transport will not be
		  performing hardware READ_STRIP offload.
		
		  Check if we need to send READ payload for BIDI-COMMAND
	
	  Check for saved t_data_sg that may be used for COMPARE_AND_WRITE
	  emulation, and free + reset pointers if necessary..
		
		  Release special case READ buffer payload required for
		  SG_TO_MEM_NOALLOC to function with COMPARE_AND_WRITE
	
	  We need to take into account a possible offset here for fabrics like
	  tcm_loop who may be using a contig buffer from the SCSI midlayer for
	  control CDBs passed as SGLs via transport_generic_map_mem_to_cmd()
 >1 page. use vmap 
 convert sg[] to pages[] 
  Allocate any required resources to execute the command.  For writes we
  might not have the payload yet, so notify the fabric via a call to
  ->write_pending instead. Otherwise place it on the execution queue.
	
	  Determine if the TCM fabric module has already allocated physical
	  memory, and is directly calling transport_generic_map_mem_to_cmd()
	  beforehand.
		
		  Special case for COMPARE_AND_WRITE with fabrics
		  using SCF_PASSTHROUGH_SG_TO_MEM_NOALLOC.
	
	  If this command is not a write we can execute it right here,
	  for write buffers we need to notify the fabric driver first
	  and let it call back once the write buffers are ready.
	
	  Determine if frontend context caller is requesting the stopping of
	  this command for frontend exceptions.
  Call target_put_sess_cmd() and wait until target_release_cmd_kref(@cmd) has
  finished.
  This function is called by frontend drivers after processing of a command
  has finished.
  The protocol for ensuring that either the regular frontend command
  processing flow or target_handle_abort() code drops one reference is as
  follows:
  - Calling .queue_data_in(), .queue_status() or queue_tm_rsp() will cause
    the frontend driver to call this function synchronously or asynchronously.
    That will cause one reference to be dropped.
  - During regular command processing the target core sets CMD_T_COMPLETE
    before invoking one of the .queue_() functions.
  - The code that aborts commands skips commands and TMFs for which
    CMD_T_COMPLETE has been set.
  - CMD_T_ABORTED is set atomically after the CMD_T_COMPLETE check for
    commands that will be aborted.
  - If the CMD_T_ABORTED flag is set but CMD_T_TAS has not been set
    transport_generic_free_cmd() skips its call to target_put_sess_cmd().
  - For aborted commands for which CMD_T_TAS has been set .queue_status() will
    be called and will drop a reference.
  - For aborted commands for which CMD_T_TAS has not been set .aborted_task()
    will be called. target_handle_abort() will drop the final reference.
		
		  Handle WRITE failure case where transport_generic_new_cmd()
		  has already added se_cmd to state_list, but fabric has
		  failed command before IO submission.
  target_get_sess_cmd - Verify the session is accepting cmds and take ref
  @se_cmd:	command descriptor to add
  @ack_kref:	Signal that fabric will perform an ack target_put_sess_cmd()
	
	  Add a second kref if the fabric caller is expecting to handle
	  fabric acknowledgement that requires two target_put_sess_cmd()
	  invocations before se_cmd descriptor release.
  target_put_sess_cmd - decrease the command reference count
  @se_cmd:	command to drop a reference from
  Returns 1 if and only if this target_put_sess_cmd() call caused the
  refcount to drop to zero. Returns zero otherwise.
  Convert a transport state bitmask into a string. The caller is
  responsible for freeing the returned pointer.
  target_stop_session - Stop new IO from being queued on the session.
  @se_sess:    session to stop
  target_wait_for_sess_cmds - Wait for outstanding commands
  @se_sess:    session to wait for active IO
  Prevent that new percpu_ref_tryget_live() calls succeed and wait until
  all references to the LUN have been released. Called during LUN shutdown.
  transport_wait_for_tasks - set CMD_T_STOP and wait for t_transport_stop_comp
  @cmd: command to wait on
 LOGICAL UNIT NOT SUPPORTED 
 INVALID COMMAND OPERATION CODE 
 INVALID COMMAND OPERATION CODE 
 INVALID FIELD IN CDB 
 BUS DEVICE RESET FUNCTION OCCURRED 
 WRITE ERROR 
 NOT ENOUGH UNSOLICITED DATA 
 INVALID FIELD IN CDB 
 INVALID FIELD IN PARAMETER LIST 
 TOO MANY TARGET DESCRIPTORS 
 UNSUPPORTED TARGET DESCRIPTOR TYPE CODE 
 TOO MANY SEGMENT DESCRIPTORS 
 UNSUPPORTED SEGMENT DESCRIPTOR TYPE CODE 
 PARAMETER LIST LENGTH ERROR 
 WRITE ERROR 
 UNEXPECTED_UNSOLICITED_DATA 
 PROTOCOL SERVICE CRC ERROR 
 NA 
 READ ERROR 
 FAILED RETRANSMISSION REQUEST 
 WRITE PROTECTED 
 LOGICAL BLOCK ADDRESS OUT OF RANGE 
 MISCOMPARE DURING VERIFY OPERATION 
 LOGICAL BLOCK GUARD CHECK FAILED 
 LOGICAL BLOCK APPLICATION TAG CHECK FAILED 
 LOGICAL BLOCK REFERENCE TAG CHECK FAILED 
 COPY TARGET DEVICE NOT REACHABLE 
		
		  Returning ILLEGAL REQUEST would cause immediate IO errors on
		  Solaris initiators.  Returning NOT READY instead means the
		  operations will be retried a finite number of times and we
		  can survive intermittent errors.
 LOGICAL UNIT COMMUNICATION FAILURE 
		
		  From spc4r22 section5.7.7,5.7.8
		  If a PERSISTENT RESERVE OUT command with a REGISTER service action
		  or a REGISTER AND IGNORE EXISTING KEY service action or
		  REGISTER AND MOVE service actionis attempted,
		  but there are insufficient device server resources to complete the
		  operation, then the command shall be terminated with CHECK CONDITION
		  status, with the sense key set to ILLEGAL REQUEST,and the additonal
		  sense code set to INSUFFICIENT REGISTRATION RESOURCES.
 INSUFFICIENT REGISTRATION RESOURCES 
 INVALID FIELD IN COMMAND INFORMATION UNIT 
  translate_sense_reason - translate a sense reason into T10 key, asc and ascq
  @cmd: SCSI command in which the resulting sense buffer or SCSI status will
    be stored.
  @reason: LIO sense reason code. If this argument has the value
    TCM_CHECK_CONDITION_UNIT_ATTENTION, try to dequeue a unit attention. If
    dequeuing a unit attention fails due to multiple commands being processed
    concurrently, set the command status to BUSY.
  Return: 0 upon success or -EINVAL if the sense buffer is too small.
  target_send_busy - Send SCSI BUSY status back to the initiator
  @cmd: SCSI command for which to send a BUSY reply.
  Note: Only call this function if target_submit_cmd() failed.
 SPDX-License-Identifier: GPL-2.0-or-later
  Filename:  target_core_pscsi.c
  This file contains the generic target mode <-> Linux SCSI subsystem plugin.
  (c) Copyright 2003-2013 Datera, Inc.
  Nicholas A. Bellinger <nab@kernel.org>
	pscsi_attach_hba():
  	pscsi_get_sh() used scsi_host_lookup() to locate struct Scsi_Host.
 	from the passed SCSI Host ID.
	
	  Release the struct Scsi_Host
	
	  Otherwise, locate struct Scsi_Host from the original passed
	  pSCSI Host ID and enable for phba mode
 12 bytes 
	
	  If MODE_SENSE still returns zero, set the default value to 1024.
	
	  Use sdev->inquiry data from driversscsiscsi_scan.c:scsi_add_lun()
 Query VPD 
 Unit Serial Number 
 Query VPD 
 Device Identifier 
 Grab a pointer to the Identification descriptor 
	
	  Setup our standard INQUIRY info into se_dev->t10_wwn
	
	  Locate VPD WWN Information used for various purposes within
	  the Storage Engine.
		
		  If VPD Unit Serial returned GOOD status, try
		  VPD Device Identification page (0x83).
	
	  For TYPE_TAPE, attempt to determine blocksize with MODE_SENSE.
  Called with struct Scsi_Host->host_lock called.
	
	  Claim exclusive struct block_device access to struct scsi_device
	  for TYPE_DISK and TYPE_ZBC using supplied udev_path
  Called with struct Scsi_Host->host_lock called.
	
	  If not running in PHV_LLD_SCSI_HOST_NO mode, locate the
	  struct Scsi_Host we will need to bring the TCMpSCSI object online
		
		  For the newer PHV_VIRTUAL_HOST_ID struct scsi_device
		  reference, we enforce that udev_path has been set
		
		  If no scsi_host_id= was passed for PHV_VIRTUAL_HOST_ID,
		  use the original TCM hba ID to reference LinuxSCSI Host No
		  and enable for PHV_LLD_SCSI_HOST_NO mode.
		
		  Functions will release the held struct scsi_host->host_lock
		  before calling calling pscsi_add_device_to_list() to register
		  struct scsi_device with target_core_mod.
		
		  Release exclusive pSCSI internal struct block_device claim for
		  struct scsi_device with TYPE_DISK or TYPE_ZBC
		  from pscsi_create_type_disk()
		
		  For HBA mode PHV_LLD_SCSI_HOST_NO, release the reference
		  to struct Scsi_Host now.
	
	  Special case for REPORT_LUNs handling where pscsi_plugin_task has
	  not been allocated because TCM is handling the emulation directly.
	
	  Hack to make sure that Write-Protect modepage is set if RO mode is
	  forced.
 XXX: TCM_LOGICAL_UNIT_COMMUNICATION_FAILURE 
	
	  Hack to correctly obtain the initiator requested blocksize for
	  TYPE_TAPE.  Since this value is dependent upon each tape media,
	  struct scsi_device->sector_size will not contain the correct value
	  by default, so we go ahead and set it so
	  TRANSPORT(dev)->get_blockdev() returns the correct value to the
	  storage engine.
		
		  check for TAPE device reads with
		  FMEOMILI set, so that we can get data
		  back despite framework assumption that a
		  check condition means there is no data
			
			  is sense data valid, fixed format,
			  and have FM, EOM, or ILI set?
 valid, fixed format 
 FM, EOM, or ILI 
 key==NO_SENSE 
	
	  Use bio_malloc() following the comment in for bio -> struct request
	  in blockblk-core.c:blk_make_request()
		
		  We only have one page of data in each sg element,
		  we can not cross a page boundary.
				
				  Calls bio_kmalloc() and sets bio->bi_end_io()
				
				  Clear the pointer so that another bio will
				  be allocated with pscsi_get_bio() above.
	
	  Dynamically alloc cdb space, since it may be larger than
	  TCM_MAX_COMMAND_SIZE
	pscsi_get_device_type():
 SPDX-License-Identifier: GPL-2.0-or-later
  Filename:  target_core_device.c (based on iscsi_target_device.c)
  This file contains the TCM Virtual Device and Disk Transport
  agnostic related functions.
  (c) Copyright 2003-2013 Datera, Inc.
  Nicholas A. Bellinger <nab@kernel.org>
 not static, needed by tpg.c 
		
		  Use the se_portal_group->tpg_virt_lun0 to allow for
		  REPORT_LUNS, et al to be returned when no active
		  MappedLUN=0 exists for this Initiator Port.
		
		  Force WRITE PROTECT for virtual LUN 0
	
	  RCU reference protected by percpu se_lun->lun_ref taken above that
	  must drop to zero (including initial reference) before this se_lun
	  pointer can be kfree_rcu() by the final se_lun->lun_group put via
	  target_core_fabric_configfs.c:target_fabric_port_release
  This function is called from core_scsi3_emulate_pro_register_and_move()
  and core_scsi3_decode_spec_i_port(), and will increment &deve->pr_kref
  when a matching rtpi is found.
  Called with rcu_read_lock or nacl->device_list_lock held.
	
	  rcu_dereference_raw protected by se_lun->lun_group symlink
	  reference to se_device->dev_group.
	
	  If the MappedLUN entry is being disabled, the entry in
	  lun->lun_deve_list must be removed now before clearing the
	  struct se_dev_entry pointers below as logic in
	  core_alua_do_transition_tg_pt() depends on these being present.
	 
	  deve->se_lun_acl will be NULL for demo-mode created LUNs
	  that have not been explicitly converted to MappedLUNs ->
	  struct se_lun_acl, but we remove deve->lun_link from
	  lun->lun_deve_list. This also means that active UAs and
	  NodeACL context specific PR metadata for demo-mode
	  MappedLUN deve will be released below..
	
	  Disable struct se_dev_entry LUN ACL mapping
	
	  Before firing off RCU callback, wait for any in process SPEC_I_PT=1
	  or REGISTER_AND_MOVE PR operation to complete.
      core_clear_lun_from_tpg():
	
	  Allocate the next RELATIVE TARGET PORT IDENTIFIER for this struct se_device
	  Here is the table from spc4r17 section 7.7.3.8.
	 
	     Table 473 -- RELATIVE TARGET PORT IDENTIFIER field
	 
	  Code      Description
	  0h        Reserved
	  1h        Relative port 1, historically known as port A
	  2h        Relative port 2, historically known as port B
	  3h to FFFFh    Relative port 3 through 65 535
		
		  Make sure RELATIVE TARGET PORT IDENTIFIER is unique
		  for 16-bit wrap..
	
	  Limit max_sectors to a PAGE_SIZE aligned value for modern
	  transport_allocate_data_tasks() operation.
	
	  Update LUN maps for dynamically added initiators when
	  generate_node_acl is enabled.
      core_dev_del_lun():
	
	  rcu_dereference_raw protected by se_lun->lun_group symlink
	  reference to se_device->dev_group.
	
	  Check to see if there are any existing persistent reservation APTPL
	  pre-registrations that need to be enabled for this LUN ACL..
	
	  Print LinuxSCSI style INQUIRY formatting to the kernel ring buffer
	
	  Use OpenFabrics IEEE Company ID: 00 14 05
 Preload the default INQUIRY const values 
  Check if the underlying struct block_device request_queue supports
  the QUEUE_FLAG_DISCARD bit for UNMAPWRITE_SAME in SCSI + TRIM
  in ATA and we need to set TPE=1
	
	  Currently hardcoded to 1 in LinuxSCSI code..
  Convert from blocksize advertised to the initiator to the 512 byte
  units unconditionally used by the Linux block layer.
	
	  We add the device early to the idr, so it can be used
	  by backend modules during configuration. We do not want
	  to allow other callers to access partially setup devices,
	  so we skip them here.
  target_for_each_device - iterate over configured devices
  @fn: iterator function
  @data: pointer to data that will be passed to fn
  fn must return 0 to continue looping over devices. non-zero will break
  from the loop and return that value to the caller.
	
	  Add early so modules like tcmu can use during its
	  configuration.
	
	  Use cyclic to try and avoid collisions with devices
	  that were recently removed.
	
	  XXX: there is not much point to have two different values here..
	
	  Align max_hw_sectors down to PAGE_SIZE IO transfers
	
	  Setup work_queue for QUEUE_FULL
  Common CDB parsing for kernel and user passthrough.
	
	  For REPORT LUNS we always need to emulate the response, for everything
	  else, pass it up.
	
	  With emulate_pr disabled, all reservation requests should fail,
	  regardless of whether or not TRANSPORT_FLAG_PASSTHROUGH_PGR is set.
	
	  For PERSISTENT RESERVE INOUT, RELEASE, and RESERVE we need to
	  emulate the response, since tcmu does not have the information
	  required to process these commands.
 Set DATA_CDB flag for ops that should have it 
 SPDX-License-Identifier: GPL-2.0-or-later
  Filename:  target_core_stat.c
  Modern ConfigFS group context specific statistics based on original
  target_core_mib.c code
  (c) Copyright 2006-2013 Datera, Inc.
  Nicholas A. Bellinger <nab@linux-iscsi.org>
  SCSI Device Table
  SCSI Target Device Table
  SCSI Logical Unit Table
 FIXME: scsiLuDefaultLun 
 scsiLuWwnName 
 scsiLuPeripheralType 
 scsiLuStatus 
 scsiLuState 
 scsiLuNumCommands 
 scsiLuReadMegaBytes 
 scsiLuWrittenMegaBytes 
 scsiLuInResets 
 FIXME: scsiLuOutTaskSetFullStatus 
 FIXME: scsiLuHSInCommands 
 scsiLuCreationTime 
  Called from target_core_configfs.c:target_core_make_subdev() to setup
  the target statistics groups + configfs CITs located in target_core_stat.c
  SCSI Port Table
 FIXME: scsiPortBusyStatuses  
  SCSI Target Port Table
 FIXME: scsiTgtPortHsInCommands 
  SCSI Transport Table
 scsiTransportType 
 scsiTransportDevName 
  Called from target_core_fabric_configfs.c:target_fabric_make_lun() to setup
  the target port statistics groups + configfs CITs located in target_core_stat.c
  SCSI Authorized Initiator Table
 scsiInstIndex 
 scsiDeviceIndex 
 scsiAuthIntrTgtPortIndex 
 scsiAuthIntrIndex 
 scsiAuthIntrDevOrPort 
 scsiAuthIntrName 
 FIXME: scsiAuthIntrLunMapIndex 
 scsiAuthIntrAttachedTimes 
 scsiAuthIntrOutCommands 
 scsiAuthIntrReadMegaBytes 
 scsiAuthIntrWrittenMegaBytes 
 FIXME: scsiAuthIntrHSOutCommands 
 scsiAuthIntrLastCreation 
 FIXME: scsiAuthIntrRowStatus 
  SCSI Attached Initiator Port Table
 scsiInstIndex 
 scsiDeviceIndex 
 scsiPortIndex 
 scsiAttIntrPortIndex 
 scsiAttIntrPortAuthIntrIdx 
 scsiAttIntrPortName+scsiAttIntrPortIdentifier 
  Called from target_core_fabric_configfs.c:target_fabric_make_mappedlun() to setup
  the target MappedLUN statistics groups + configfs CITs located in target_core_stat.c
 SPDX-License-Identifier: GPL-2.0-or-later
  Filename:  target_core_hba.c
  This file contains the TCM HBA Transport related functions.
  (c) Copyright 2003-2013 Datera, Inc.
  Nicholas A. Bellinger <nab@kernel.org>
			
			  Wait for any outstanding backend driver ->rcu_head
			  callbacks to complete post TBO->free_device() ->
			  call_rcu(), before allowing backend driver module
			  unload of target_backend_ops->owner to proceed.
 SPDX-License-Identifier: GPL-2.0-or-later
  Filename:  target_core_iblock.c
  This file contains the Storage Engine  <-> Linux BlockIO transport
  specific functions.
  (c) Copyright 2003-2013 Datera, Inc.
  Nicholas A. Bellinger <nab@kernel.org>
 max # of bios to submit at a time 
	
	  Enable write same emulation for IBLOCK and use 0xFFFF as
	  the smaller WRITE_SAME(10) only has a two-byte block count.
	
	  Each se_device has a per cpu work this can be run from. We
	  shouldn't have multiple threads on the same cpu calling this
	  at the same time.
		
		  Bump the ib_bio_err_cnt and release bio.
	
	  Only allocate as many vector entries as the bio code allows us to,
	  we'll loop later on until we have handled the whole request.
	
	  The block layer handles nested plugs, so just plugunplug to handle
	  fabric drivers that didn't support batching and multi bio cmds.
  Implement SYCHRONIZE CACHE.  Note that we can't handle lba ranges and must
  always flush the whole cache.
	
	  If the Immediate bit is set, queue up the GOOD response
	  for this SYNCHRONIZE_CACHE op.
	
	  Fall back to block_execute_write_same() slow-path if
	  incoming WRITE_SAME payload does not contain zeros.
 Always in 512 byte units for LinuxBlock 
 virtual start sector must be in integrity interval units 
		
		  Force writethrough using REQ_FUA if a volatile write cache
		  is not enabled, or if initiator set the Force Unit Access bit.
		
		  XXX: if the length the device accepts is shorter than the
		 	length of the SG list entry this will cause and
		 	endless loop.  Better hope no driver uses huge pages.
 Always in 512 byte units for LinuxBlock 
 convert offset-bytes to offset-lbas 
 SPDX-License-Identifier: GPL-2.0-or-later
  SCSI Block Commands (SBC) parsing and emulation.
  (c) Copyright 2002-2013 Datera, Inc.
  Nicholas A. Bellinger <nab@kernel.org>
	
	  SBC-2 says:
	    If the PMI bit is set to zero and the LOGICAL BLOCK
	    ADDRESS field is not set to zero, the device server shall
	    terminate the command with CHECK CONDITION status with
	    the sense key set to ILLEGAL REQUEST and the additional
	    sense code set to INVALID FIELD IN CDB.
	 
	  In SBC-3, these fields are obsolete, but some SCSI
	  compliance tests actually check this, so we might as well
	  follow SBC-2.
	
	  Set P_TYPE and PROT_EN bits for DIF support
		
		  Only override a device's pi_prot_type if no T10-PI is
		  available, and sess_prot_type has been explicitly enabled.
	
	  Set Thin Provisioning Enable bit following sbc3r22 in section
	  READ CAPACITY (16) byte 14 if emulate_tpu or emulate_tpws is enabled.
		
		  LBPRZ signifies that zeroes will be read back from an LBA after
		  an UNMAP or WRITE SAME w unmap bit (sbc3r36 5.16.2)
	
	  See sbc3r36 section 5.25
	  Immediate bit should be set since there is nothing to complete
	  POWER CONDITION MODIFIER 0h
	
	  See sbc3r36 section 5.25
	  POWER CONDITION 0h START_VALID - process START and LOEJ
	
	  See sbc3r36 section 5.25
	  LOEJ 0h - nothing to load or unload
	  START 1h - we are ready
 WRITE_SAME_32 via VARIABLE_LENGTH_CMD 
	
	  Use the explicit range when non zero is supplied, otherwise calculate
	  the remaining range based on ->get_blocks() - starting LBA.
	
	  Use 8-bit sector value.  SBC-3 says:
	 
	    A TRANSFER LENGTH field set to zero specifies that 256
	    logical blocks shall be written.  Any other value
	    specifies the number of logical blocks that shall be
	    written.
  Used for VARIABLE_LENGTH_CDB WRITE_32 and READ_32 variants
  For VARIABLE_LENGTH_CDB w 32 byte extended CDBs
	
	  Sanity check for LBA wrap and request past end of device.
 We always have ANC_SUP == 0 so setting ANCHOR is always an error 
	
	  Special case for WRITE_SAME w UNMAP=1 that ends up getting
	  translated into block discard requests within backend code.
	
	  From sbc3r22.pdf section 5.48 XDWRITEREAD (10) command
	 
	  1) read the specified logical block(s);
	  2) transfer logical blocks from the data-out buffer;
	  3) XOR the logical blocks transferred from the data-out buffer with
	     the logical blocks read, storing the resulting XOR data in a buffer;
	  4) if the DISABLE WRITE bit is set to zero, then write the logical
	     blocks transferred from the data-out buffer; and
	  5) transfer the resulting XOR data to the data-in buffer.
	
	  Copy the scatterlist WRITE buffer located at cmd->t_data_sg
	  into the locally allocated buf
	
	  Now perform the XOR against the BIDI read memory located at
	  cmd->t_mem_bidi_list
	
	  Unlock ->caw_sem originally obtained during sbc_compare_and_write()
	  before the original READ IO submission.
  compare @cmp_len bytes of @read_sgl with @cmp_sgl. On miscompare, fill
  @miscmp_off and return TCM_MISCOMPARE_VERIFY.
	
	  Compare SCSI READ payload against verify payload
	
	  Handle early failure in transport_generic_request_failure(),
	  which will not have taken ->caw_sem yet..
	
	  Handle special case for zero-length COMPARE_AND_WRITE
	
	  Immediately exit + release dev->caw_sem if command has already
	  been failed with a non-zero SCSI status.
		
		  SBC-4 r15: 5.3 COMPARE AND WRITE command
		  In the sense data (see 4.18 and SPC-5) the offset from the
		  start of the Data-Out Buffer to the first byte of data that
		  was not equal shall be reported in the INFORMATION field.
	
	  Currently assumes NoLB=1 and SGLs are PAGE_SIZE..
	
	  Save the original SGL + nents values before updating to new
	  assignments, to be released in transport_free_pages() ->
	  transport_reset_sgl_orig()
	
	  Now reset ->execute_cmd() to the normal sbc_execute_rw() handler
	  for submitting the adjusted SGL to write instance user-data.
	
	  In the MISCOMPARE or failure case, unlock ->caw_sem obtained in
	  sbc_compare_and_write() before the original READ IO submission.
	
	  Submit the READ first for COMPARE_AND_WRITE to perform the
	  comparision using SGLs at cmd->t_bidi_data_sg..
	
	  Reset cmd->data_length to individual block_size in order to not
	  confuse backend drivers that depend on this value matching the
	  size of the IO being submitted.
	
	  Unlock of dev->caw_sem to occur in compare_and_write_callback()
	  upon MISCOMPARE, or in compare_and_write_done() upon completion
	  of WRITE instance user-data.
		
		  See if the fabric supports T10-PI, and the session has been
		  configured to allow export PROTECT=1 feature bit with backend
		  devices that don't support T10-PI.
	
	  In case protection information exists over the wire
	  we modify command data length to describe pure data.
	  The actual transfer length is data length + protection
	  length
 see explanation in spc_emulate_modesense 
		
		  Setup BIDI XOR callback to be run after IO completion.
			
			  Use WRITE_32 and READ_32 opcodes for the emulated
			  XDWRITE_READ_32 logic.
			
			  Setup BIDI XOR callback to be run during after IO
			  completion.
		
		  Currently enforce COMPARE_AND_WRITE for a single sector
		
		  Double size because we have two buffers, note that
		  zero is not an error..
		
		  Follow sbcr26 with WRITE_SAME (10) and check for the existence
		  of byte 1 bit 3 UNMAP instead of original reserved field
		
		  There are still clients out there which use these old SCSI-2
		  commands. This mainly happens when running VMs with legacy
		  guest systems, connected via SCSI command pass-through to
		  iSCSI targets. Make them happy and return status GOOD.
 reject any command that we don't have a handler for 
 We never set ANC_SUP 
 First UNMAP block descriptor starts at 8 byte offset 
 SPDX-License-Identifier: GPL-2.0-or-later
  Filename: target_core_ua.c
  This file contains logic for SPC-3 Unit Attention emulation
  (c) Copyright 2009-2013 Datera, Inc.
  Nicholas A. Bellinger <nab@kernel.org>
	
	  From sam4r14, section 5.14 Unit attention condition:
	 
	  a) if an INQUIRY command enters the enabled command state, the
	     device server shall process the INQUIRY command and shall neither
	     report nor clear any unit attention condition;
	  b) if a REPORT LUNS command enters the enabled command state, the
	     device server shall process the REPORT LUNS command and shall not
	     report any unit attention condition;
	  e) if a REQUEST SENSE command enters the enabled command state while
	     a unit attention condition exists for the SCSI initiator port
	     associated with the I_T nexus on which the REQUEST SENSE command
	     was received, then the device server shall process the command
	     and either:
		
		  Do not report the same UNIT ATTENTION twice..
		
		  Attach the highest priority Unit Attention to
		  the head of the list following sam4r14,
		  Section 5.14 Unit Attention Condition:
		 
		  POWER ON, RESET, OR BUS DEVICE RESET OCCURRED highest
		  POWER ON OCCURRED or
		  DEVICE INTERNAL RESET
		  SCSI BUS RESET OCCURRED or
		  MICROCODE HAS BEEN CHANGED or
		  protocol specific
		  BUS DEVICE RESET FUNCTION OCCURRED
		  I_T NEXUS LOSS OCCURRED
		  COMMANDS CLEARED BY POWER LOSS NOTIFICATION
		  all others                                    Lowest
		 
		  Each of the ASCQ codes listed above are defined in
		  the 29h ASC family, see spc4r17 Table D.1
			
			  Incoming Family 29h ASCQ codes will override
			  Family 2AHh ASCQ codes for Unit Attention condition.
  Dequeue a unit attention from the unit attention list. This function
  returns true if the dequeuing succeeded and if @key, @asc and @ascq have
  been set.
 LOGICAL UNIT NOT SUPPORTED 
	
	  The highest priority Unit Attentions are placed at the head of the
	  struct se_dev_entry->ua_list, and will be returned in CHECK_CONDITION +
	  sense data for the received CDB.
		
		  For ua_intlck_ctrl code not equal to 00b, only report the
		  highest priority UNIT_ATTENTION and ASCASCQ without
		  clearing it.
		
		  Otherwise for the default 00b, release the UNIT ATTENTION
		  condition.  Return the ASCASCQ of the highest priority UA
		  (head of the list) in the outgoing CHECK_CONDITION + sense.
	
	  The highest priority Unit Attentions are placed at the head of the
	  struct se_dev_entry->ua_list.  The First (and hence highest priority)
	  ASCASCQ will be returned in REQUEST_SENSE payload data for the
	  matching struct se_lun.
	 
	  Once the returning ASCASCQ values are set, we go ahead and
	  release all of the Unit Attention conditions for the associated
	  struct se_lun.
 SPDX-License-Identifier: GPL-2.0-or-later
  Filename:  target_core_configfs.c
  This file contains ConfigFS logic for the Generic Target Engine project.
  (c) Copyright 2008-2013 Datera, Inc.
  Nicholas A. Bellinger <nab@kernel.org>
  based on configfs Copyright (C) 2005 Oracle.  All rights reserved.
  Attributes for syskernelconfigtarget
 validate new db root before accepting it 
  Called from struct target_core_group_ops->make_group()
		
		  Below are some hardcoded request_module() calls to automatically
		  local fabric modules when the following is called:
		 
		  mkdir -p syskernelconfigtarget$MODULE_NAME
		 
		  Note that this does not limit which TCM fabric module can be
		  registered, but simply provids auto loading logic for modules with
		  mkdir(2) system calls with known TCM fabric modules.
			
			  Automatically load the LIO Target fabric module when the
			  following is called:
			 
			  mkdir -p $CONFIGFStargetiscsi
			
			  Automatically load the tcm_loop fabric module when the
			  following is called:
			 
			  mkdir -p $CONFIGFStargetloopback
	
	  On a successful target_core_get_fabric() look, the returned
	  struct target_fabric_configfs tf will contain a usage reference.
  Called from struct target_core_group_ops->drop_item()
  All item attributes appearing in syskerneltarget appear here.
  Provides Fabrics Groups and Item Attributes for syskernelconfigtarget
##############################################################################
 Start functions called by external Target Fabrics Modules
############################################################################
	
	  We at least require tfo->fabric_make_wwn(), tfo->fabric_drop_wwn()
	  tfo->fabric_make_tpg() and tfo->fabric_drop_tpg() in
	  target_core_fabric_configfs.c WWN+TPG group context code.
			
			  Wait for any outstanding fabric se_deve_entry->rcu_head
			  callbacks to complete post kfree_rcu(), before allowing
			  fabric driver unload of TFO->module to proceed.
##############################################################################
 Stop functions called by external Target Fabrics Modules
############################################################################
 Start functions for struct config_item_type tb_dev_attrib_cit 
	
	  XXX We can't use sizeof(dev->t10_wwn.model) (INQUIRY_MODEL_LEN + 1)
	  here without potentially breaking existing setups, so continue to
	  truncate one byte shorter than what can be carried in INQUIRY.
	
	  We expect this value to be non-zero when generic Block Layer
	  Discard supported is detected iblock_create_virtdevice().
	
	  We expect this value to be non-zero when generic Block Layer
	  Discard supported is detected iblock_create_virtdevice().
 0 is only allowed value for non-supporting backends 
 always zero, but attr needs to remain RW to avoid userspace breakage 
	
	  We expect this value to be non-zero when generic Block Layer
	  Discard supported is detected iblock_configure_device().
  Note, this can only be called on unexported SE Device Object.
  dev_attrib attributes for devices using the target core SBCSPC
  interpreter.  Any backend using spc_parse_cdb should be using
  these.
  Minimal dev_attrib attributes for devices passing through CDBs.
  In this case we only provide a few read-only attributes for
  backwards compatibility.
  pr related dev_attrib attributes for devices passing through CDBs,
  but allowing in core pr emulation.
 End functions for struct config_item_type tb_dev_attrib_cit 
  Start functions for struct config_item_type tb_dev_wwn_cit 
	
	  SPC 4.3.1:
	  ASCII data fields shall contain only ASCII printable characters
	  (i.e., code values 20h to 7Eh) and may be terminated with one or
	  more ASCII null (00h) characters.
  STANDARD and VPD page 0x83 T10 Vendor Identification
 +2 to allow for a trailing (stripped) '\n' and null-terminator 
 Strip any newline added from userspace. 
	
	  Check to see if any active exports exist.  If they do exist, fail
	  here as changing this information on the fly (underneath the
	  initiator side OS dependent multipath code) could cause negative
	  effects.
 +2 to allow for a trailing (stripped) '\n' and null-terminator 
 Strip any newline added from userspace. 
	
	  Check to see if any active exports exist.  If they do exist, fail
	  here as changing this information on the fly (underneath the
	  initiator side OS dependent multipath code) could cause negative
	  effects.
 +2 to allow for a trailing (stripped) '\n' and null-terminator 
 Strip any newline added from userspace. 
	
	  Check to see if any active exports exist.  If they do exist, fail
	  here as changing this information on the fly (underneath the
	  initiator side OS dependent multipath code) could cause negative
	  effects.
	
	  The IEEE COMPANY_ID field should contain a 24-bit canonical
	  form OUI assigned by the IEEE.
	
	  Check to see if any active exports exist. If they do exist, fail
	  here as changing this information on the fly (underneath the
	  initiator side OS dependent multipath code) could cause negative
	  effects.
  VPD page 0x80 Unit serial
	
	  If LinuxSCSI subsystem_api_t plugin got a VPD Unit Serial
	  from the struct scsi_device level firmware, do not allow
	  VPD Unit Serial to be emulated.
	 
	  Note this struct scsi_device could also be emulating VPD
	  information from its driversscsi LLD.  But for now we assume
	  it is doing 'the right thing' wrt a world wide unique
	  VPD Unit Serial Number that OS dependent multipath can depend on.
	
	  Check to see if any active $FABRIC_MOD exports exist.  If they
	  do exist, fail here as changing this information on the fly
	  (underneath the initiator side OS dependent multipath code)
	  could cause negative effects.
	
	  This currently assumes ASCII encoding for emulated VPD Unit Serial.
	 
	  Also, strip any newline added from the userspace
	  echo $UUID > $TARGET$HBA$STORAGE_OBJECTwwnvpd_unit_serial
  VPD page 0x83 Protocol Identifier
  Generic wrapper for dumping VPD identifiers by association.
 VPD page 0x83 Association: Logical Unit 
 VPD page 0x83 Association: Target Port 
 VPD page 0x83 Association: SCSI Target Device 
  End functions for struct config_item_type tb_dev_wwn_cit 
  Start functions for struct config_item_type tb_dev_pr_cit 
		
		  PR APTPL Metadata for Reservation
		
		  PR APTPL Metadata for Target Port
  End functions for struct config_item_type tb_dev_pr_cit 
  Start functions for struct config_item_type tb_dev_cit 
	
	  Any ALUA logical unit alias besides "NULL" means we will be
	  making a new group association.
		
		  core_alua_get_lu_gp_by_name() will increment reference to
		  struct t10_alua_lu_gp.  This reference is released with
		  core_alua_get_lu_gp_by_name below().
		
		  Clearing an existing lu_gp association, and replacing
		  with NULL
		
		  Removing existing association of lu_gp_mem with lu_gp
	
	  Associate lu_gp_mem with lu_gp_new.
  Used in target_core_fabric_configfs.c to verify valid se_device symlink
  within target_fabric_port_link()
 End functions for struct config_item_type tb_dev_cit 
 Start functions for struct config_item_type target_core_alua_lu_gp_cit 
 Extra byte for NULL terminator 
 End functions for struct config_item_type target_core_alua_lu_gp_cit 
 Start functions for struct config_item_type target_core_alua_lu_gps_cit 
	
	  core_alua_free_lu_gp() is called from target_core_alua_lu_gp_ops->release()
	  -> target_core_alua_lu_gp_release()
 End functions for struct config_item_type target_core_alua_lu_gps_cit 
 Start functions for struct config_item_type target_core_alua_tg_pt_gp_cit 
 LBA DEPENDENT is only allowed with implicit ALUA 
 Extra byte for NULL terminator 
 End functions for struct config_item_type target_core_alua_tg_pt_gp_cit 
 Start functions for struct config_item_type tb_alua_tg_pt_gps_cit 
	
	  core_alua_free_tg_pt_gp() is called from target_core_alua_tg_pt_gp_ops->release()
	  -> target_core_alua_tg_pt_gp_release().
 End functions for struct config_item_type tb_alua_tg_pt_gps_cit 
 Start functions for struct config_item_type target_core_alua_cit 
  target_core_alua_cit is a ConfigFS group that lives under
  syskernelconfigtargetcorealua.  There are default groups
  corealualu_gps and corealuatg_pt_gps that are attached to
  target_core_alua_cit in target_core_init_configfs() below.
 End functions for struct config_item_type target_core_alua_cit 
 Start functions for struct config_item_type tb_dev_stat_cit 
 End functions for struct config_item_type tb_dev_stat_cit 
 Start functions for struct config_item_type target_core_hba_cit 
	
	  Add core$HBA$DEValuadefault_tg_pt_gp
	
	  Add core$HBA$DEVstatistics default groups
	
	  core_alua_free_tg_pt_gp() is called from ->default_tg_pt_gp
	  directly from target_core_alua_tg_pt_gp_release().
	
	  se_dev is released from target_core_dev_item_ops->release()
	
	  Special case for subsystem plugins that have "_" in their names.
	  Namely rd_direct and rd_mcp..
 Terminate for se_plugin_str 
 Skip to start of plugin dependent ID 
 Terminate for se_plugin_str 
 Skip to start of plugin dependent ID 
	
	  Load up TCM subsystem plugins if they have not already been loaded.
	
	  core_delete_hba() is called from target_core_hba_item_ops->release()
	  -> target_core_hba_release()
 Stop functions for struct config_item_type target_core_hba_cit 
	
	  Create $CONFIGFStargetcore default group for HBA <-> Storage Object
	  and ALUA Logical Unit Group and Target Port Group infrastructure.
	
	  Create ALUA infrastructure under syskernelconfigtargetcorealua
	
	  Add ALUA Logical Unit Group and Target Port Group ConfigFS
	  groups under syskernelconfigtargetcorealua
	
	  Add corealualu_gpsdefault_lu_gp
	
	  Register the target_core_mod subsystem with configfs.
	
	  Register built-in RAMDISK subsystem logic for virtual LUN 0
	
	  We expect subsys->su_group.default_groups to be released
	  by configfs subsystem provider logic..
 SPDX-License-Identifier: GPL-2.0-or-later
  Filename:  target_core_alua.c
  This file contains SPC-3 compliant asymmetric logical unit assigntment (ALUA)
  (c) Copyright 2009-2013 Datera, Inc.
  Nicholas A. Bellinger <nab@kernel.org>
  REPORT REFERRALS
  See sbc3r35 section 5.23
	
	  Set the RETURN DATA LENGTH set in the header of the DataIN Payload
  REPORT_TARGET_PORT_GROUPS
  See spc4r17 section 6.27
	
	  Skip over RESERVED area to first Target port group descriptor
	  depending on the PARAMETER DATA FORMAT type..
		
		  Check if the Target port group and Target port descriptor list
		  based on tg_pt_gp_members count will fit into the response payload.
		  Otherwise, bump rd_len to let the initiator know we have exceeded
		  the allocation length and the response is truncated.
		
		  PREF: Preferred target port bit, determine if this
		  bit should be set for port group.
		
		  Set the ASYMMETRIC ACCESS State
		
		  Set supported ASYMMETRIC ACCESS State bits
		
		  TARGET PORT GROUP
 Skip over Reserved 
		
		  STATUS CODE
		
		  Vendor Specific field
		
		  TARGET PORT COUNT
			
			  Start Target Port descriptor format
			 
			  See spc4r17 section 6.2.7 Table 247
 Skip over Obsolete 
			
			  Set RELATIVE TARGET PORT IDENTIFIER
	
	  Set the RETURN DATA LENGTH set in the header of the DataIN Payload
	
	  Fill in the Extended header parameter data format if requested
		
		  Set the implicit transition time (in seconds) for the application
		  client to use as a base for it's transition timeout value.
		 
		  Use the current tg_pt_gp_mem -> tg_pt_gp membership from the LUN
		  this CDB was received upon to determine this value individually
		  for ALUA target port group.
  SET_TARGET_PORT_GROUPS for explicit ALUA operation.
  See spc4r17 section 6.35
 Skip over RESERVED area in header 
	
	  Determine if explicit ALUA via SET_TARGET_PORT_GROUPS is allowed
	  for the local tg_pt_gp.
 Skip over RESERVED area in header 
		
		  Check the received ALUA access state, and determine if
		  the state is a primary or secondary target port asymmetric
		  access state.
			
			  If the SET TARGET PORT GROUPS attempts to establish
			  an invalid combination of target port asymmetric
			  access states or attempts to establish an
			  unsupported target port asymmetric access state,
			  then the command shall be terminated with CHECK
			  CONDITION status, with the sense key set to ILLEGAL
			  REQUEST, and the additional sense code set to INVALID
			  FIELD IN PARAMETER LIST.
		
		  If the ASYMMETRIC ACCESS STATE field (see table 267)
		  specifies a primary target port asymmetric access state,
		  then the TARGET PORT GROUP OR TARGET PORT field specifies
		  a primary target port group for which the primary target
		  port asymmetric access state shall be changed. If the
		  ASYMMETRIC ACCESS STATE field specifies a secondary target
		  port asymmetric access state, then the TARGET PORT GROUP OR
		  TARGET PORT field specifies the relative target port
		  identifier (see 3.1.120) of the target port for which the
		  secondary target port asymmetric access state shall be
		  changed.
			
			  Locate the matching target port group ID from
			  the global tg_pt_gp list
			
			  Extract the RELATIVE TARGET PORT IDENTIFIER to identify
			  the Target Port in question for the the incoming
			  SET_TARGET_PORT_GROUPS op.
			
			  Locate the matching relative target port identifier
			  for the struct se_device storage object.
 XXX: racy unlock
	
	  Set SCF_ALUA_NON_OPTIMIZED here, this value will be checked
	  later to determine if processing of this cmd needs to be
	  temporarily delayed for the ActiveNonOptimized primary access state.
 Only need to check for cdb actually containing LBAs 
	
	  Allowed CDBs for ALUA_ACCESS_STATE_STANDBY as defined by
	  spc4r17 section 5.9.2.4.4
	
	  Allowed CDBs for ALUA_ACCESS_STATE_UNAVAILABLE as defined by
	  spc4r17 section 5.9.2.4.5
	
	  Allowed CDBs for ALUA_ACCESS_STATE_TRANSITION as defined by
	  spc4r17 section 5.9.2.5
  return 1: Is used to signal LUN not accessible, and check conditionnot ready
  return 0: Used to signal success
  return -1: Used to signal failure, and invalid cdb field
	
	  First, check for a struct se_port specific secondary ALUA target port
	  access state: OFFLINE
	
	  Process ALUA_ACCESS_STATE_ACTIVE_OPTIMIZED in a separate conditional
	  statement so the compiler knows explicitly to check this case first.
	  For the Optimized ALUA access state case, we want to process the
	  incoming fabric cmd ASAP..
	
	  OFFLINE is a secondary ALUA target port group access state, that is
	  handled above with struct se_lun->lun_tg_pt_secondary_offline=1
  Check implicit and explicit ALUA state change request.
	
	  OPTIMIZED, NON-OPTIMIZED, STANDBY and UNAVAILABLE are
	  defined as primary target port asymmetric access states.
		
		  OFFLINE state is defined as a secondary target port
		  asymmetric access state.
			
			  Transitioning is set internally and by tcmu daemon,
			  and cannot be selected through a STPG.
  Used by fabric modules to determine when we need to delay processing
  for the ActiveNonOptimized paths..
	
	  The ALUA ActiveNonOptimized access state delay can be disabled
	  in via configfs with a value of zero
	
	  struct se_cmd->alua_nonop_delay gets set by a target port group
	  defined interval in core_alua_state_nonoptimized()
		
		  After an implicit target port asymmetric access state
		  change, a device server shall establish a unit attention
		  condition for the initiator port associated with every I_T
		  nexus with the additional sense code set to ASYMMETRIC
		  ACCESS STATE CHANGED.
		 
		  After an explicit target port asymmetric access state
		  change, a device server shall establish a unit attention
		  condition with the additional sense code set to ASYMMETRIC
		  ACCESS STATE CHANGED for the initiator port associated with
		  every I_T nexus other than the I_T nexus on which the SET
		  TARGET PORT GROUPS command
			
			  spc4r37 p.242:
			  After an explicit target port asymmetric access
			  state change, a device server shall establish a
			  unit attention condition with the additional sense
			  code set to ASYMMETRIC ACCESS STATE CHANGED for
			  the initiator port associated with every I_T nexus
			  other than the I_T nexus on which the SET TARGET
			  PORT GROUPS command was received.
			
			  se_deve->se_lun_acl pointer may be NULL for a
			  entry created without explicit Node+MappedLUN ACLs
 Nothing to be done here 
	
	  Save the old primary ALUA access state, and set the current state
	  to ALUA_ACCESS_STATE_TRANSITION.
	
	  Check for the optional ALUA primary state transition delay
	
	  Set the current primary ALUA access state to the requested new state
	
	  Update the ALUA metadata buf that has been allocated in
	  core_alua_do_port_transition(), this metadata will be written
	  to struct file.
	 
	  Note that there is the case where we do not want to update the
	  metadata when the saved metadata is being parsed in userspace
	  when setting the existing port access state and access status.
	 
	  Also note that the failure to write out the ALUA metadata to
	  struct file does NOT affect the actual ALUA transition.
	
	  For storage objects that are members of the 'default_lu_gp',
	  we only do transition on the passed l_tp_pt_gp, and not
	  on all of the matching target port groups IDs in default_lu_gp.
		
		  core_alua_do_transition_tg_pt() will always return
		  success.
	
	  For all other LU groups aside from 'default_lu_gp', walk all of
	  the associated storage objects looking for a matching target port
	  group ID from the local target port group.
			
			  If the target behavior port asymmetric access state
			  is changed for any target port group accessible via
			  a logical unit within a LU group, the target port
			  behavior group asymmetric access states for the same
			  target port group accessible via other logical units
			  in that LU group will also change.
			
			  core_alua_do_transition_tg_pt() will always return
			  success.
	
	  Set the secondary ALUA target port access state to OFFLINE
	  or release the previously secondary state for struct se_lun
	
	  Do the optional transition delay after we set the secondary
	  ALUA access state.
	
	  See if we need to update the ALUA fabric port metadata for
	  secondary state and status
	
	  The lu_gp->lu_gp_id may only be set once..
	
	  Once we have reached this point, config_item_put() has
	  already been called from target_core_alua_drop_lu_gp().
	 
	  Here, we remove the lu_gp from the global list so that
	  no associations can be made while we are releasing
	  struct t10_alua_lu_gp.
	
	  Allow struct t10_alua_lu_gp  referenced by core_alua_get_lu_gp_by_name()
	  in target_core_configfs.c:target_core_store_alua_lu_gp() to be
	  released with core_alua_put_lu_gp_from_name()
	
	  Release reference to struct t10_alua_lu_gp  from all associated
	  struct se_device.
		
		 
		  lu_gp_mem is associated with a single
		  struct se_device->dev_alua_lu_gp_mem, and is released when
		  struct se_device is released via core_alua_free_lu_gp_mem().
		 
		  If the passed lu_gp does NOT match the default_lu_gp, assume
		  we want to re-associate a given lu_gp_mem with default_lu_gp.
  Called with struct t10_alua_lu_gp_member->lu_gp_mem_lock
  Called with struct t10_alua_lu_gp_member->lu_gp_mem_lock
	
	  Enable both explicit and implicit ALUA support by default
	
	  Set the default ActiveNonOptimized Delay in milliseconds
	
	  Enable all supported states
	
	  The tg_pt_gp->tg_pt_gp_id may only be set once..
	
	  Once we have reached this point, config_item_put() has already
	  been called from target_core_alua_drop_tg_pt_gp().
	 
	  Here we remove tg_pt_gp from the global list so that
	  no associations OR explicit ALUA via SET_TARGET_PORT_GROUPS
	  can be made while we are releasing struct t10_alua_tg_pt_gp.
	
	  Allow a struct t10_alua_tg_pt_gp_member  referenced by
	  core_alua_get_tg_pt_gp_by_name() in
	  target_core_configfs.c:target_core_store_alua_tg_pt_gp()
	  to be released with core_alua_put_tg_pt_gp_from_name().
	
	  Release reference to struct t10_alua_tg_pt_gp from all associated
	  struct se_port.
		
		  If the passed tg_pt_gp does NOT match the default_tg_pt_gp,
		  assume we want to re-associate a given tg_pt_gp_mem with
		  default_tg_pt_gp.
	
	  rcu_dereference_raw protected by se_lun->lun_group symlink
	  reference to se_device->dev_group.
	
	  Any ALUA target port group alias besides "NULL" means we will be
	  making a new group association.
		
		  core_alua_get_tg_pt_gp_by_name() will increment reference to
		  struct t10_alua_tg_pt_gp.  This reference is released with
		  core_alua_put_tg_pt_gp_from_name() below.
		
		  Clearing an existing tg_pt_gp association, and replacing
		  with the default_tg_pt_gp.
	
	  rcu_dereference_raw protected by se_lun->lun_group symlink
	  reference to se_device->dev_group.
		
		  Associate this struct se_device with the default ALUA
		  LUN Group.
 SPDX-License-Identifier: GPL-2.0-or-later
  Filename:  target_core_tmr.c
  This file contains SPC-3 task management infrastructure
  (c) Copyright 2009-2013 Datera, Inc.
  Nicholas A. Bellinger <nab@kernel.org>
	
	  If command already reached CMD_T_COMPLETE state within
	  target_complete_cmd() or CMD_T_FABRIC_STOP due to shutdown,
	  this se_cmd has been passed to fabric driver and will
	  not be aborted.
	 
	  Otherwise, obtain a local se_cmd->cmd_kref now for TMR
	  ABORT_TASK + LUN_RESET for CMD_T_ABORTED processing as
	  long as se_cmd->cmd_kref is still active unless zero.
			
			  skip task management functions, including
			  tmr->task_cmd
	
	  Release all pending and outgoing TMRs aside from the received
	  LUN_RESET tmr..
		
		  If this function was called with a valid pr_res_key
		  parameter (eg: for PROUT PREEMPT_AND_ABORT service action
		  skip non registration key matching TMRs.
  core_tmr_drain_state_list() - abort SCSI commands associated with a device
  @dev:       Device for which to abort outstanding SCSI commands.
  @prout_cmd: Pointer to the SCSI PREEMPT AND ABORT if this function is called
              to realize the PREEMPT AND ABORT functionality.
  @tmr_sess:  Session through which the LUN RESET has been received.
  @tas:       Task Aborted Status (TAS) bit from the SCSI control mode page.
              A quote from SPC-4, paragraph "7.5.10 Control mode page":
              "A task aborted status (TAS) bit set to zero specifies that
              aborted commands shall be terminated by the device server
              without any response to the application client. A TAS bit set
              to one specifies that commands aborted by the actions of an I_T
              nexus other than the I_T nexus on which the command was
              received shall be completed with TASK ABORTED status."
  @preempt_and_abort_list: For the PREEMPT AND ABORT functionality, a list
              with registrations that will be preempted.
	
	  Complete outstanding commands with TASK_ABORTED SAM status.
	 
	  This is following sam4r17, section 5.6 Aborting commands, Table 38
	  for TMR LUN_RESET:
	 
	  a) "Yes" indicates that each command that is aborted on an I_T nexus
	  other than the one that caused the SCSI device condition is
	  completed with TASK ABORTED status, if the TAS bit is set to one in
	  the Control mode page (see SPC-4). "No" indicates that no status is
	  returned for aborted commands.
	 
	  d) If the logical unit reset is caused by a particular I_T nexus
	  (e.g., by a LOGICAL UNIT RESET task management function), then "yes"
	  (TASK_ABORTED status) applies.
	 
	  Otherwise (e.g., if triggered by a hard reset), "no"
	  (no TASK_ABORTED SAM status) applies.
	 
	  Note that this seems to be independent of TAS (Task Aborted Status)
	  in the Control Mode Page.
			
			  For PREEMPT_AND_ABORT usage, only process commands
			  with a matching reservation key.
			
			  Not aborting PROUT PREEMPT_AND_ABORT CDB..
	  TASK_ABORTED status bit, this is configurable via ConfigFS
	  struct se_device attributes.  spc4r17 section 7.4.6 Control mode page
	 
	  A task aborted status (TAS) bit set to zero specifies that aborted
	  tasks shall be terminated by the device server without any response
	  to the application client. A TAS bit set to one specifies that tasks
	  aborted by the actions of an I_T nexus other than the I_T nexus on
	  which the command was received shall be completed with TASK ABORTED
	  status (see SAM-4).
	
	  Determine if this se_tmr is coming from a $FABRIC_MOD
	  or struct se_device passthrough..
	
	  Clear any legacy SPC-2 reservation when called during
	  LOGICAL UNIT RESET
 SPDX-License-Identifier: GPL-2.0-or-later
  Filename: target_core_xcopy.c
  This file contains support for SPC-4 Extended-Copy offload with generic
  TCM backends.
  Copyright (c) 2011-2013 Datera, Inc. All rights reserved.
  Author:
  Nicholas A. Bellinger <nab@daterainc.com>
  target_xcopy_locate_se_dev_e4_iter - compare XCOPY NAA device identifiers
  @se_dev: device being considered for match
  @dev_wwn: XCOPY requested NAA dev_wwn
  @return: 1 on match, 0 on no-match
 cmd with NULL sess indicates no associated $FABRIC_MOD 
	
	  Extract RELATIVE INITIATOR PORT IDENTIFIER
	
	  Check for supported code set, association, and designator type
	
	  Check for matching 16 byte length for NAA IEEE Registered Extended
	  Assigned designator
	
	  Check for NAA IEEE Registered Extended Assigned header..
		
		  Determine if the source designator matches the local device
		
		  Determine if the destination designator matches the local
		  device. If @cscd_index corresponds to both source (stdi) and
		  destination (dtdi), or dtdi comes after stdi, then
		  XCOL_DEST_RECV_OP wins.
 spc4r37 6.4.3.4 CSCD DESCRIPTOR LIST LENGTH field 
	
	  Generate an IEEE Registered Extended designator based upon the
	  se_device the XCOPY was received upon..
		
		  Check target descriptor identification with 0xE4 type, and
		  compare the current index with the CSCD descriptor IDs in
		  the segment descriptor. Use VPD 0x83 WWPN matching ..
	
	  If a matching IEEE NAA 0x83 descriptor for the requested device
	  is not located on this node, return COPY_ABORTED with ASQASQC
	  0x0d0x02 - COPY_TARGET_DEVICE_NOT_REACHABLE to request the
	  initiator to fall back to normal copy method.
 spc4r37 6.4.3.5 SEGMENT DESCRIPTOR LIST LENGTH field 
		
		  Check segment descriptor type code for block -> block
  Start xcopy_pt ops
 xpt_cmd is on the stack, nothing to free here 
  End xcopy_pt_ops
  target_xcopy_setup_pt_cmd - set up a pass-through command
  @xpt_cmd:	 Data structure to initialize.
  @xop:	 Describes the XCOPY operation received from an initiator.
  @se_dev:	 Backend device to associate with @xpt_cmd if
 		 @remote_port == true.
  @cdb:	 SCSI CDB to be copied into @xpt_cmd.
  @remote_port: If false, use the LUN through which the XCOPY command has
 		 been received. If true, use @se_dev->xcopy_lun.
  Set up a SCSI command (READ or WRITE) that will be used to execute an
  XCOPY command.
	
	  Setup LUN+port to honor reservations based upon xop->op_origin for
	  X-COPY PUSH or X-COPY PULL based upon where the CDB was received.
	
	  Break up XCOPY IO into hw_max_sectors sized IO based on the
	  smallest max_sectors between src_dev + dev_dev, or
			
			  (Re)allocate a buffer large enough to hold the XCOPY
			  IO size, which can be reused each read  write loop.
	
	  The XCOPY command was aborted after some data was transferred.
	  Terminate command with CHECK CONDITION status, with the sense key
	  set to COPY ABORTED.
  Returns TCM_NO_SENSE upon success or a sense code != TCM_NO_SENSE if parsing
  fails.
	
	  Determine TARGET DESCRIPTOR LIST LENGTH + SEGMENT DESCRIPTOR LIST LENGTH
	
	  skip over the target descriptors until segment descriptors
	  have been passed - CSCD ids are needed to determine src and dest.
	
	  Set SNLID=1 (Supports no List ID)
	
	  MAXIMUM TARGET DESCRIPTOR COUNT
	
	  MAXIMUM SEGMENT DESCRIPTOR COUNT
	
	  MAXIMUM DESCRIPTOR LIST LENGTH
	
	  MAXIMUM SEGMENT LENGTH
	
	  MAXIMUM INLINE DATA LENGTH for SA 0x04 (NOT SUPPORTED)
	
	  HELD DATA LIMIT
	
	  MAXIMUM STREAM DEVICE TRANSFER SIZE
	
	  TOTAL CONCURRENT COPIES
	
	  MAXIMUM CONCURRENT COPIES
	
	  DATA SEGMENT GRANULARITY (log 2)
	
	  INLINE DATA GRANULARITY log 2)
	
	  HELD DATA GRANULARITY
	
	  IMPLEMENTED DESCRIPTOR LIST LENGTH
	
	  List of implemented descriptor type codes (ordered)
 Copy Block to Block device 
 Identification descriptor target descriptor 
	
	  AVAILABLE DATA (n-3)
 SPDX-License-Identifier: GPL-2.0-or-later
  Filename:  target_core_file.c
  This file contains the Storage Engine <-> FILEIO transport specific functions
  (c) Copyright 2005-2013 Datera, Inc.
  Nicholas A. Bellinger <nab@kernel.org>
	
	  Use O_DSYNC by default instead of O_SYNC to forgo syncing
	  of pure timestamp updates.
	
	  Optionally allow fd_buffered_io=1 to be enabled for people
	  who want use the fs buffer cache as an WriteCache mechanism.
	 
	  This means that in event of a hard failure, there is a risk
	  of silent data-loss if the SCSI client has not performed a
	  forced unit access (FUA) write, or issued SYNCHRONIZE_CACHE
	  to write-out the entire device cache.
	
	  If using a block backend with this struct file, we extract
	  fd_dev->fd_[block,dev]_size from struct block_device.
	 
	  Otherwise, we use the passed fd_size= from configfs
		
		  Determine the number of bytes from i_size_read() minus
		  one (1) logical sector from underlying struct block_device
		
		  Enable write same emulation for IBLOCK and use 0xFFFF as
		  the smaller WRITE_SAME(10) only has a two-byte block count.
		
		  Limit UNMAP emulation to 8k Number of LBAs (NoLB)
		
		  Currently hardcoded to 1 in LinuxSCSI code..
		
		  Limit WRITE_SAME w UNMAP=0 emulation to 8k Number of LBAs (NoLB)
		  based upon struct iovec limit for vfs_writev()
		
		  Return zeros and GOOD status even if the READ did not return
		  the expected virt_size for struct file wo a backing struct
		  block_device.
				
				  Short read case:
				  Probably some one truncate file under us.
				  We must explicitly zero sg-pages to prevent
				  expose uninizialized pages to userspace.
	
	  If the Immediate bit is set, queue up the GOOD response
	  for this SYNCHRONIZE_CACHE op
	
	  Determine if we will be flushing the entire device.
 The backend is block device, use discard 
 The backend is normal file, use fallocate 
	
	  Call vectorized fileio functions to map struct scatterlist
	  physical memory addresses to struct iovec virtual memory.
		
		  Perform implicit vfs_fsync_range() for fd_do_writev() ops
		  for SCSI WRITEs with Forced Unit Access (FUA) set.
		  Allow this to happen independent of WCE=0 setting.
	
	  We are currently limited by the number of iovecs (2048) per
	  single vfs_[writev,readv] call.
	
	  When using a file that references an underlying struct block_device,
	  ensure dev_size is always based on the current inode size in order
	  to handle underlying block_device resize operations.
 SPDX-License-Identifier: GPL-2.0-or-later
 Filename: target_core_fabric_configfs.c
  This file contains generic fabric module configfs infrastructure for
  TCM v4.x code
  (c) Copyright 2010-2013 Datera, Inc.
  Nicholas A. Bellinger <nab@linux-iscsi.org>
 Start of tfc_tpg_mappedlun_cit 
	
	  Ensure that the source port exists
	
	  Make sure the SymLink is going to the same $FABRIC$WWNtpgt_$TPGT
	
	  If this struct se_node_acl was dynamically generated with
	  tpg_1attribgenerate_node_acls=1, use the existing
	  deve->lun_access_ro value, which will be true when
	  tpg_1attribdemo_mode_write_protect=1
	
	  Determine the actual mapped LUN value user wants..
	 
	  This value is what the SCSI Initiator actually sees the
	  $FABRIC$WWPN$TPGTlunlun_ as on their SCSI Initiator Ports.
 wp=1 means lun_access_ro=true 
 End of tfc_tpg_mappedlun_cit 
 Start of tfc_tpg_mappedlun_port_cit 
 End of tfc_tpg_mappedlun_port_cit 
 Start of tfc_tpg_nacl_base_cit 
	
	  Make sure user is creating iscsi$IQN$TPGTacls$INITIATORlun_$ID.
	
	  Determine the Mapped LUN value.  This is what the SCSI Initiator
	  Port will actually see.
 End of tfc_tpg_nacl_base_cit 
 Start of tfc_node_fabric_stats_cit 
  This is used as a placeholder for struct se_node_acl->acl_fabric_stat_group
  to allow fabrics access to ->acl_fabric_stat_group->default_groups[]
 End of tfc_wwn_fabric_stats_cit 
 Start of tfc_tpg_nacl_cit 
	
	  struct se_node_acl free is done in target_fabric_nacl_base_release()
 End of tfc_tpg_nacl_cit 
 Start of tfc_tpg_np_base_cit 
 End of tfc_tpg_np_base_cit 
 Start of tfc_tpg_np_cit 
	
	  struct se_tpg_np is released via target_fabric_np_base_release()
 End of tfc_tpg_np_cit 
 Start of tfc_tpg_port_cit 
		
		  Call the optional fabric_post_link() to allow a
		  fabric module to setup any additional state once
		  core_dev_add_lun() has been called..
		
		  Call the optional fabric_pre_unlink() to allow a
		  fabric module to release any additional stat before
		  core_dev_del_lun() is called.
 End of tfc_tpg_port_cit 
 Start of tfc_tpg_port_stat_cit 
 End of tfc_tpg_port_stat_cit 
 Start of tfc_tpg_lun_cit 
 End of tfc_tpg_lun_cit 
 Start of tfc_tpg_base_cit 
 + 1 for final NULL in the array 
 End of tfc_tpg_base_cit 
 Start of tfc_tpg_cit 
 End of tfc_tpg_cit 
 Start of tfc_wwn_fabric_stats_cit 
  This is used as a placeholder for struct se_wwn->fabric_stat_group
  to allow fabrics access to ->fabric_stat_group->default_groups[]
 End of tfc_wwn_fabric_stats_cit 
 Start of tfc_wwn_cit 
 SPDX-License-Identifier: GPL-2.0-or-later
  This file contains the main functions related to Initiator Node Attributes.
  (c) Copyright 2007-2013 Datera, Inc.
  Author: Nicholas A. Bellinger <nab@linux-iscsi.org>
	
	  Reenable disabled nopin_timeout timer for all iSCSI connections.
 SPDX-License-Identifier: GPL-2.0-or-later
  This file contains the iSCSI Virtual Device and Disk Transport
  agnostic related functions.
  (c) Copyright 2007-2013 Datera, Inc.
  Author: Nicholas A. Bellinger <nab@linux-iscsi.org>
	
	  This is a discovery session, the single queue slot was already
	  assigned in iscsi_login_zero_tsih().  Since only Logout and
	  Text Opcodes are allowed during discovery we do not have to worry
	  about the HBA's queue depth here.
	
	  This is a normal session, set the Session's CmdSN window to the
	  struct se_node_acl->queue_depth.  The value in struct se_node_acl->queue_depth
	  has already been validated as a legal value in
	  core_set_queue_depth_for_node().
 SPDX-License-Identifier: GPL-2.0-or-later
  This file houses the main functions for the iSCSI CHAP support
  (c) Copyright 2007-2013 Datera, Inc.
  Author: Nicholas A. Bellinger <nab@linux-iscsi.org>
	
	  Set CHAP_C, and copy the generated challenge into c_str.
 Tie the challenge length to the digest size 
	
	  Set Identifier.
	
	  Generate Challenge.
	
	  Extract CHAP_N.
 Include the terminating NULL in the compare 
	
	  Extract CHAP_R.
	
	  One way authentication has succeeded, return now if mutual
	  authentication is not enabled.
	
	  Get CHAP_I.
	
	  RFC 1994 says Identifier is no more than octet (8 bits).
	
	  Get CHAP_C.
	
	  During mutual authentication, the CHAP_C generated by the
	  initiator must not match the original CHAP_C generated by
	  the target.
	
	  Generate CHAP_N and CHAP_R for mutual authentication.
 To handle both endiannesses 
	
	  Convert received challenge to binary hex.
	
	  Generate CHAP_N and CHAP_R.
	
	  Convert response from binary hex to ascii hext.
 SPDX-License-Identifier: GPL-2.0-or-later
  This file contains main functions related to iSCSI DataSequenceInOrder=No
  and DataPDUInOrder=No.
  (c) Copyright 2007-2013 Datera, Inc.
  Author: Nicholas A. Bellinger <nab@linux-iscsi.org>
 	Generate count random values into array.
 	Use 0x80000000 to mark generates valued in array[].
 	Builds PDU andor Sequence list, called while DataSequenceInOrder=No
 	or DataPDUInOrder=No.
	
	  Do nothing if no OOO shenanigans
 SPDX-License-Identifier: GPL-2.0-or-later
  Modern ConfigFS group context specific iSCSI statistics based on original
  iscsi_target_mib.c code
  Copyright (c) 2011-2013 Datera, Inc.
  Author: Nicholas A. Bellinger <nab@linux-iscsi.org>
 Instance Attributes Table 
  iSCSI MIB Tables
  Instance Attributes Table
  Instance Session Failure Stats Table
  Target Attributes Table
  Target Login Stats Table
  Target Logout Stats Table
  Session Stats Table
 SPDX-License-Identifier: GPL-2.0-or-later
  This file contains the login functions used by the iSCSI Target driver.
  (c) Copyright 2007-2013 Datera, Inc.
  Author: Nicholas A. Bellinger <nab@linux-iscsi.org>
 TCP_NODELAY 
 ipv6_addr_v4mapped() 
  Used by iscsi_target_nego.c:iscsi_target_locate_portal() to setup
  per struct iscsi_conn libcrypto contexts for crc32c and crc32-intel
	
	  Setup slicing by CRC32C algorithm for RX and TX libcrypto contexts
	  which will default to crc32c_intel.ko for cpu_has_xmm4_2, or fallback
	  to software 1x8 byte slicing from crc32c.ko
	
	  If the Time2Retain handler has expired, the session is already gone.
	
	  Generate a random Status sequence number (statsn) for the new
	  iSCSI connection.
 	This is the leading connection of a new session,
 	or session reinstatement.
	
	  The FFP CmdSN window values will be allocated from the TPG's
	  Initiator Node's ACL once the login has been successfully completed.
	
	  Assign a new TPG Session Handle.  Note this is protected with
	  struct iscsi_portal_group->np_login_sem from iscsit_access_np().
	
	  Create the default params from user defined values..
	
	  Need to send TargetPortalGroupTag back in first login response
	  on any iSCSI connection where the Initiator provides TargetName.
	  See 5.3.1.  Login Phase Start
	 
	  In our case, we have already located the struct iscsi_tiqn at this point.
	
	  Workaround for Initiators that have broken connection recovery logic.
	 
	  "We would really like to get rid of this." Linux-iSCSI.org team
	
	  Set RDMAExtensions=Yes by default for iSER enabled network portals
		
		  Make MaxRecvDataSegmentLength PAGE_SIZE aligned for
		  Immediate Data + Unsolicited Data-OUT if necessary..
		
		  ISER currently requires that ImmediateData + Unsolicited
		  Data be disabled when protection  signature MRs are enabled.
 	Add a new connection to an existing session.
	
	  If the Time2Retain handler has expired, the session is already gone.
	
	  Stop the Time2Retain timer if this is a failed session, we restart
	  the timer if the login is not successful.
	
	  Need to send TargetPortalGroupTag back in first login response
	  on any iSCSI connection where the Initiator provides TargetName.
	  See 5.3.1.  Login Phase Start
	 
	  In our case, we have already located the struct iscsi_tiqn at this point.
	
	  By following item 5 in the login table,  if we have found
	  an existing ISID and a validexisting TSIH and an existing
	  CID we do connection reinstatement.  Currently we dont not
	  support it so we send back an non-zero status class to the
	  initiator and release the new connection.
	
	  Check for any connection recovery entries containing CID.
	  We use the original ExpStatSN sent in the first login request
	  to acknowledge commands for the failed connection.
	 
	  Also note that an explict logout may have already been sent,
	  but the response may not be sent due to additional connection
	  loss.
	
	  Else we follow item 4 from the login table in that we have
	  found an existing ISID and a validexisting TSIH and a new
	  CID we go ahead and continue to add a new connection to the
	  session.
	
	  FIXME: Unsolicited NopIN support for ISER
	
	  SCSI Initiator -> SCSI Target Port Mapping
		
		  Determine CPU mask to ensure connection's RX and TX kthreads
		  are scheduled on the same CPU.
		
		  Wakeup the sleeping iscsi_target_rx_thread() now that
		  iscsi_conn is in TARG_CONN_STATE_LOGGED_IN state.
	
	  Determine CPU mask to ensure connection's RX and TX kthreads
	  are scheduled on the same CPU.
	
	  Wakeup the sleeping iscsi_target_rx_thread() now that
	  iscsi_conn is in TARG_CONN_STATE_LOGGED_IN state.
	
	  This used the TA_LOGIN_TIMEOUT constant because at this
	  point we do not have access to ISCSI_TPG_ATTRIB(tpg)->login_timeout
	
	  Setup the np->np_sockaddr from the passed sockaddr setup
	  in iscsi_target_configfs.c code..
	
	  Set SO_REUSEADDR, and disable Nagle Algorithm with TCP_NODELAY.
 Pretend to be an ipv4 socket 
 Pretend to be an ipv4 socket 
	
	  Setup the initial iscsi_login values from the leading
	  login request PDU.
	
	  If login negotiation fails check if the Time2Retain timer
	  needs to be restarted.
 Get another socket 
 Get another socket 
	
	  Perform the remaining iSCSI connection initialization items..
	
	  This will process the first login request + payload..
	
	  Used by iscsit_tx_login_rsp() for Login Resonses PDUs
	  when Status-Class != 0.
		
		  This is the leading connection of a new session.
		  We wait until after authentication to check for
		  session reinstatement.
		
		  Add a new connection to an existing session.
		  We check for a non-existant session in
		  iscsi_login_non_zero_tsih_s2() below based
		  on ISIDTSIH, but wait until after authentication
		  to check for connection reinstatement, etc.
	
	  SessionType: Discovery
	 
	  	Locates Default Portal
	 
	  SessionType: Normal
	 
	  	Locates Target Portal from NP -> Target IQN
 Get another socket 
		
		  We break and exit here unless another sock_accept() call
		  is expected.
 SPDX-License-Identifier: GPL-2.0-or-later
  This file contains main functions related to iSCSI Parameter negotiation.
  (c) Copyright 2007-2013 Datera, Inc.
  Author: Nicholas A. Bellinger <nab@linux-iscsi.org>
 struct kvec 
 #warning Add extension keys 
	
	  The format for setting the initial parameter definitions are:
	 
	  Parameter name:
	  Initial value:
	  Allowable phase:
	  Scope:
	  Allowable senders:
	  Typerange:
	  Use:
	
	  Extra parameters for ISER from RFC-5046
	
	  RFC 1994
	
	  RFC 2945
			
			  Required for gPXE iSCSI boot client
			
			  Required for Mellanox Flexboot PXE boot ROM
			
			  Required for gPXE iSCSI boot client
			
			  Reject is not fatal for [I,O]FMarkInt,  and causes
			  [I,O]FMarker to be reset to No. (See iSCSI v20 A.3.2)
 #warning FIXME: Add check for X-ExtensionKey here 
	
	  Key name length must not exceed 63 bytes. (See iSCSI v20 5.1)
		
		  Special case to set MAXXMITDATASEGMENTLENGTH from the
		  target requested MaxRecvDataSegmentLength, even though
		  this key is not sent over the wire.
			
			  At this point iscsi_check_acceptor_state() will have
			  set ops->MaxRecvDataSegmentLength from the original
			  initiator provided value.
 SPDX-License-Identifier: GPL-2.0
 SPDX-License-Identifier: GPL-2.0-or-later
  This file contains the iSCSI Target specific Task Management functions.
  (c) Copyright 2007-2013 Datera, Inc.
  Author: Nicholas A. Bellinger <nab@linux-iscsi.org>
 	Called from iscsit_handle_task_mgt_cmd().
	
	  Do the real work in transport_generic_do_tmr().
	
	  Do the real work in transport_generic_do_tmr().
	
	  Temporary check to prevent connection recovery for
	  connections with a differing MaxDataSegmentLength.
	
	  Command can now be reassigned to a new connection.
	  The task management response must be sent before the
	  reassignment actually happens.  See iscsi_tmr_post_handler().
	
	  Reset the StatSN so a new one for this commands new connection
	  will be assigned.
	  Reset the ExpStatSN as well so we may receive Status SNACKs.
	
	  The Initiator must not send a R2T SNACK with a Begrun less than
	  the TMR TASK_REASSIGN's ExpDataSN.
	
	  The TMR TASK_REASSIGN's ExpDataSN contains the next R2TSN the
	  Initiator is expecting.  The Target controls all WRITE operations
	  so if we have received all DataOUT we can safety ignore Initiator.
	
	  Special case to deal with DataSequenceInOrder=No and Non-Immeidate
	  Unsolicited DataOut.
	
	  iscsit_build_r2ts_for_cmd() can handle the rest from here.
	
	  The Initiator must not send a Data SNACK with a BegRun less than
	  the TMR TASK_REASSIGN's ExpDataSN.
	
	  The TMR TASK_REASSIGN's ExpDataSN contains the next DataSN the
	  Initiator is expecting.
	
	  Reset the StatSN so a new one for this commands new connection
	  will be assigned.
	  Reset the ExpStatSN as well so we may receive Status SNACKs.
 	Handles special after-the-fact actions related to TMRs.
 	Right now the only one that its really needed for is
 	connection recovery releated TASK_REASSIGN.
 	Nothing to do here, but leave it for good measure. :-)
	
	  The command was in the process of receiving Unsolicited DataOUT when
	  the connection failed.
	
	  The Initiator is requesting R2Ts starting from zero,  skip
	  checking acknowledged R2Ts and start checking struct iscsi_r2ts
	  greater than zero.
	
	  We now check that the PDUs in DataOUT sequences below
	  the TMR TASK_REASSIGN ExpDataSN (R2TSN the Initiator is
	  expecting next) have all the DataOUT they require to complete
	  the DataOUT sequence.  First scan from R2TSN 0 to TMR
	  TASK_REASSIGN ExpDataSN-1.
	 
	  If we have not received all DataOUT in question,  we must
	  make sure to make the appropriate changes to values in
	  struct iscsi_cmd (and elsewhere depending on session parameters)
	  so iscsit_build_r2ts_for_cmd() in iscsit_task_reassign_complete_write()
	  will resend a new R2T for the DataOUT sequences in question.
		
		  Safely ignore Recovery R2Ts and R2Ts that have completed
		  DataOUT sequences.
		
		                  DataSequenceInOrder=Yes:
		 
		  Taking into account the iSCSI implementation requirement of
		  MaxOutstandingR2T=1 while ErrorRecoveryLevel>0 and
		  DataSequenceInOrder=Yes, we must take into consideration
		  the following:
		 
		                   DataSequenceInOrder=No:
		 
		  Taking into account that the Initiator controls the (possibly
		  random) PDU Order in (possibly random) Sequence Order of
		  DataOUT the target requests with R2Ts,  we must take into
		  consideration the following:
		 
		       DataPDUInOrder=Yes for DataSequenceInOrder=[Yes,No]:
		 
		  While processing non-complete R2T DataOUT sequence requests
		  the Target will re-request only the total sequence length
		  minus current received offset.  This is because we must
		  assume the initiator will continue sending DataOUT from the
		  last PDU before the connection failed.
		 
		       DataPDUInOrder=No for DataSequenceInOrder=[Yes,No]:
		 
		  While processing non-complete R2T DataOUT sequence requests
		  the Target will re-request the entire DataOUT sequence if
		  any single PDU is missing from the sequence.  This is because
		  we have no logical method to determine the next PDU offset,
		  and we must assume the Initiator will be sending any random
		  PDU offset in the current sequence after TASK_REASSIGN
		  has completed.
	
	  We now drop all unacknowledged R2Ts, ie: ExpDataSN from TMR
	  TASK_REASSIGN to the last R2T in the list..  We are also careful
	  to check that the Initiator is not requesting R2Ts for DataOUT
	  sequences it has already completed.
	 
	  Free each R2T in question and adjust values in struct iscsi_cmd
	  accordingly so iscsit_build_r2ts_for_cmd() do the rest of
	  the work after the TMR TASK_REASSIGN Response is sent.
		
		  Skip up to the R2T Sequence number provided by the
		  iSCSI TASK_REASSIGN TMR
				   DataSequenceInOrder=Yes:
		 
		  Taking into account the iSCSI implementation requirement of
		  MaxOutstandingR2T=1 while ErrorRecoveryLevel>0 and
		  DataSequenceInOrder=Yes, it's safe to subtract the R2Ts
		  entire transfer length from the commands R2T offset marker.
		 
		 		   DataSequenceInOrder=No:
		 
		  We subtract the difference from struct iscsi_seq between the
		  current offset and original offset from cmd->write_data_done
		  for account for DataOUT PDUs already received.  Then reset
		  the current offset to the original and zero out the current
		  burst length,  to make sure we re-request the entire DataOUT
		  sequence.
 	Performs sanity checks TMR TASK_REASSIGN's ExpDataSN for
 	a given struct iscsi_cmd.
	
	  For READs the TMR TASK_REASSIGNs ExpDataSN contains the next DataSN
	  of DataIN the Initiator is expecting.
	 
	  Also check that the Initiator is not re-requesting DataIN that has
	  already been acknowledged with a DataAck SNACK.
	
	  For WRITEs the TMR TASK_REASSIGNs ExpDataSN contains the next R2TSN
	  for R2Ts the Initiator is expecting.
	 
	  Do the magic in iscsit_task_reassign_prepare_write().
 SPDX-License-Identifier: GPL-2.0-or-later
  This file contains main functions related to the iSCSI Target Core Driver.
  (c) Copyright 2007-2013 Datera, Inc.
  Author: Nicholas A. Bellinger <nab@linux-iscsi.org>
  Note that IQN formatting is expected to be done in userspace, and
  no explict IQN format checks are done here.
	
	  Wait for accesses to said struct iscsi_tiqn to end.
	
	  iscsit_set_tiqn_shutdown sets tiqn->tiqn_state = TIQN_STATE_SHUTDOWN
	  while holding tiqn->tiqn_state_lock.  This means that all subsequent
	  attempts to access this struct iscsi_tiqn will fail from both transport
	  fabric and control code paths.
	
	  Determine if the network portal is accepting storage traffic.
	
	  Determine if the portal group is accepting storage traffic.
	
	  Here we serialize access across the TIQN+TPG Tuple.
			
			  Increment the np_exports reference count now to
			  prevent iscsit_del_np() below from being called
			  while iscsi_tpg_add_network_portal() is called.
	
	  Locate the existing struct iscsi_np if already active..
	
	  Increment the np_exports reference count now to prevent
	  iscsit_del_np() below from being run while a new call to
	  iscsi_tpg_add_network_portal() for a matching iscsi_np is
	  active.  We don't need to hold np->np_thread_lock at this
	  point because iscsi_np has not been added to g_np_list yet.
		
		  We need to send the signal to wakeup LinuxNet
		  which may be sleeping in sock_accept()..
 XXX: this probably wants it to be it's own unwind step.. 
	
	  Shutdown discovery sessions and disable discovery TPG
	
	  Perform the kref_put now if se_cmd has already been setup by
	  scsit_setup_scsi_cmd()
  Map some portion of the allocated scatterlist to an iovec, suitable for
  kernel sockets to copy data inout.
	
	  We know each entry in t_data_sg contains a page.
 FIXME; Add checks for AdditionalHeaderSegment 
		
		  From RFC-3720 Section 10.3.1:
		 
		  "Either or both of R and W MAY be 1 when either the
		   Expected Data Transfer Length andor Bidirectional Read
		   Expected Data Transfer Length are 0"
		 
		  For this case, go ahead and clear the unnecssary bits
		  to avoid any confusion with ->data_direction.
	
	  Figure out the SAM Task Attribute for the incoming SCSI CDB
	
	  Initialize struct se_cmd descriptor from target_core_mod infrastructure
	
	  Check if we need to delay processing because of ALUA
	  ActiveNonOptimized primary access state..
	
	  Check the CmdSN against ExpCmdSNMaxCmdSN here if
	  the Immediate Bit is not set, and no Immediate
	  Data is attached.
	 
	  A PDUCmdSN carrying Immediate Data can only
	  be processed after the DataCRC has passed.
	  If the DataCRC fails, the CmdSN MUST NOT
	  be acknowledged. (See below)
	
	  If no Immediate Data is attached, it's OK to return now.
	
	  Early CHECK_CONDITIONs with ImmediateData never make it to command
	  execution.  These exceptions are processed in CmdSN order using
	  iscsit_check_received_cmdsn() in iscsit_get_immediate_data() below.
	
	  Call directly into transport_generic_new_cmd() to perform
	  the backend memory allocation.
	
	  Special case for Unsupported SAM WRITE Opcodes and ImmediateData=Yes.
		
		  A PDUCmdSN carrying Immediate Data passed
		  DataCRC, check against ExpCmdSNMaxCmdSN if
		  Immediate Bit is not set.
		
		  Immediate Data failed DataCRC and ERL>=1,
		  silently drop this PDU and let the initiator
		  plug the CmdSN gap.
		 
		  FIXME: Send Unsolicited NOPIN with reserved
		  TTT here to help the initiator figure out
		  the missing CmdSN, although they should be
		  intelligent enough to determine the missing
		  CmdSN and issue a retry to plug the sequence.
 immed_ret == IMMEDIATE_DATA_CANNOT_RECOVER 
	
	  Allocation iovecs needed for struct socket operations for
	  traditional iSCSI block IO.
 iscsit_map_iovec has already checked for invalid sg pointers 
 iSCSI write 
		
		  Special case for dealing with Unsolicited DataOUT
		  and Unsupported SAM WRITE Opcodes and SE resource allocation
		  failures;
 Something's amiss if we're not in WRITE_PENDING state... 
			
			  Check if a delayed TASK_ABORTED status needs to
			  be sent now if the ISCSI_FLAG_CMD_FINAL has been
			  received with the unsolicited data out.
		
		  For the normal solicited data path:
		 
		  Check for a delayed TASK_ABORTED status and dump any
		  incoming data out payload if one exists.  Also, when the
		  ISCSI_FLAG_CMD_FINAL is set to denote the end of the current
		  data out sequence, we decrement outstanding_r2ts.  Once
		  outstanding_r2ts reaches zero, go ahead and send the delayed
		  TASK_ABORTED status.
	
	  Perform DataSN, DataSequenceInOrder, DataPDUInOrder, and
	  within-command recovery checks before receiving the payload.
	
	  Increment post receive data and CRC values or perform
	  within-command recovery.
		
		  Handle extra special case for out of order
		  Unsolicited Data Out.
 DATAOUT_CANNOT_RECOVER 
	
	  This is not a response to a Unsolicited NopIN, which means
	  it can either be a NOPOUT ping request (with a valid ITT),
	  or a NOPOUT not requesting a NOPIN (with a reserved ITT).
	  Either way, make sure we allocate an struct iscsi_cmd, as both
	  can contain ping data.
	
	  Initiator is expecting a NopIN ping reply..
	
	  This was a response to a unsolicited NOPIN ping.
	
	  Otherwise, initiator is not expecting a NOPIN is response.
	  Just ignore for now.
	
	  Handle NOP-OUT payload for traditional iSCSI sockets
					
					  Silently drop this PDU and let the
					  initiator plug the CmdSN gap.
		
		  Attach ping data to struct iscsi_cmd->buf_ptr.
	
	  TASK_REASSIGN for ERL=2  connection stays inside of
	  LIO-Target $FABRIC_MOD
	
	  Locate the struct se_lun for all TMRs not related to ERL=2 TASK_REASSIGN
		
		  Perform sanity checks on the ExpDataSN only if the
		  TASK_REASSIGN was successful.
	
	  Found the referenced task, send to transport for processing.
	
	  Could not find the referenced LUN, task, or Task Management
	  command not authorized or supported.  Change state and
	  let the tx_thread send the response.
	 
	  For connection recovery, this is also the default action for
	  TMR TASK_REASSIGN.
 #warning FIXME: Support Text Command parameters besides SendTargets 
 '=' confirmed in strncmp 
					
					  Silently drop this PDU and let the
					  initiator plug the CmdSN gap.
	
	  A Logout Request with a CLOSECONNECTION reason code for a CID
	  can arrive on a connection with a differing CID.
		
		  Handle all different cid CLOSECONNECTION requests in
		  iscsit_logout_post_handler_diffcid() as to give enough
		  time for any non immediate command's CmdSN to be
		  acknowledged on the connection in question.
		 
		  Here we simply make sure the CID is still around.
	
	  We need to sleep in these cases (by returning 1) until the Logout
	  Response gets sent in the tx thread.
	
	  Immediate commands are executed, well, immediately.
	  Non-Immediate Logout Commands are executed in CmdSN order.
	
	  SNACK_DATA and SNACK_R2T are both 0,  so check which function to
	  call from inside iscsi_send_recovery_datain_or_r2t().
 FIXME: Support R-Data SNACK 
		
		  Special case: length of immediate data exceeds the data
		  buffer size derived from the CDB.
 #warning iscsi_build_conn_drop_async_message() only sends out on connections
	
	  Only send a Asynchronous Message on connections whos network
	  interface is still functional.
	
	  Be paranoid and double check the logic for now.
	
	  Special case for successfully execution w both DATAIN
	  and Sense Data.
	
	  The actual shutting down of Sessions andor Connections
	  for CLOSESESSION and CLOSECONNECTION Logout Requests
	  is done in scsi_logout_post_handler().
		
		  For CLOSECONNECTION logout requests carrying
		  a matching logout CID -> local CID, the reference
		  for the local CID will have been incremented in
		  iscsi_logout_closeconnection().
		 
		  For CLOSECONNECTION logout requests carrying
		  a different CID than the connection it arrived
		  on, the connection responding to cmd->logout_cid
		  is stopped in iscsit_logout_post_handler_diffcid().
		
		  If the connection is still active from our point of view
		  force connection recovery to occur.
 	Unsolicited NOPIN, either requesting a response or not.
	
	  NOPOUT Ping Data is attached to struct iscsi_cmd->buf_ptr.
	  NOPOUT DataSegmentLength is at struct iscsi_cmd->buf_ptr_size.
 	@recovery: If called from iscsi_task_reassign_complete_write() for
 		connection recovery.
	
	  Attach SENSE DATA payload to iSCSI Response PDU
 iqn + "TargetName=" + \0 
	
	  Locate pointer to iqn.eui. string for ICF_SENDTARGETS_SINGLE
	  explicit case..
		
		  Skip over '=' character..
			 If demo_mode_discovery=0 and generate_node_acls=0
			  (demo mode dislabed) do not return
			  TargetName+TargetAddress unless a NodeACL exists.
	
	  Reset maxcmdsn_inc in multi-part text payload exchanges to
	  correctly increment MaxCmdSN for each response answering a
	  non immediate text request with a valid CmdSN.
	
	  bitmap_id is assigned from iscsit_global->ts_bitmap from
	  within iscsit_start_kthreads()
	 
	  Here we use bitmap_id to determine which CPU that this
	  iSCSI connection's RXTX threads will be scheduled to
	  execute upon.
	
	  This should never be reached..
 more drs 
 all done 
			 Still must send status,
	
	  Allow ourselves to be interrupted by SIGINT so that a
	  connection recovery  failure event can be triggered externally.
		
		  Ensure that both TX and RX per connection kthreads
		  are scheduled to run on the same CPU.
	
	  Avoid the normal connection failure code-path if this connection
	  is still within LOGIN mode, and iscsi_np process context is
	  responsible for cleaning up the early connection failure.
		
		  Ensure that both TX and RX per connection kthreads
		  are scheduled to run on the same CPU.
				
				  Set the PDU to 0xff so it will intentionally
				  hit default in the switch below.
	
	  Allow ourselves to be interrupted by SIGINT so that a
	  connection recovery  failure event can be triggered externally.
	
	  Wait for iscsi_post_login_handler() to complete before allowing
	  incoming iscsitcp socket IO, andor failing the connection.
	
	  We expect this function to only ever be called from either RX or TX
	  thread context via iscsit_close_connection() once the other context
	  has been reset -> returned sleeping pre-handler state.
				
				  LIO's abort path owns the cleanup for this,
				  so put it back on the list and let
				  aborted_task handle it.
	
	  Always up conn_logout_comp for the traditional TCP and HW_OFFLOAD
	  case just in case the RX Thread in iscsi_target_rx_opcode() is
	  sleeping and the logout response never got sent because the
	  connection failed.
	 
	  However for iser-target, isert_wait4logout() is using conn_logout_comp
	  to signal logout response TX interrupt completion.  Go ahead and skip
	  this for iser since isert_rx_opcode() does not wait on logout failure,
	  and to avoid iscsi_conn pointer dereference in iser-target code.
	
	  During Connection recovery drop unacknowledged out of order
	  commands for this connection, and prepare the other commands
	  for reallegiance.
	 
	  During normal operation clear the out of order commands (but
	  do not free the struct iscsi_ooo_cmdsn's) and release all
	  struct iscsi_cmds.
	
	  Handle decrementing session or connection usage count if
	  a logout response was not able to be sent because the
	  connection failed.  Fall back to Session Recovery here.
	
	  Attempt to let the Initiator know this connection failed by
	  sending an Connection Dropped Async Message on another
	  active connection.
	
	  If connection reinstatement is being performed on this connection,
	  up the connection reinstatement semaphore that is being blocked on
	  in iscsit_cause_connection_reinstatement().
	
	  If connection reinstatement is being performed on this connection
	  by receiving a REMOVECONNFORRECOVERY logout request, up the
	  connection wait rcfr semaphore that is being blocked on
	  an iscsit_connection_reinstatement_rcfr().
	
	  If any other processes are accessing this connection pointer we
	  must wait until they have completed.
	
	  Make sure that if one connection fails in an non ERL=2 iSCSI
	  Session that they all fail.
	
	  If this was not the last connection in the session, and we are
	  performing session reinstatement or falling back to ERL=0, call
	  iscsit_stop_session() without sleeping to shutdown the other
	  active connections.
	
	  If this was the last connection in the session and one of the
	  following is occurring:
	 
	  Session Reinstatement is not being performed, and are falling back
	  to ERL=0 call iscsit_close_session().
	 
	  Session Logout was requested.  iscsit_close_session() will be called
	  elsewhere.
	 
	  Session Continuation is not being performed, start the Time2Retain
	  handler and check if sleep_on_sess_wait_sem is active.
  If the iSCSI Session for the iSCSI Initiator Node exists,
  forcefully shutdown the iSCSI NEXUS.
	
	  transport_deregister_session_configfs() will clear the
	  struct se_node_acl->nacl_sess pointer now as a iscsi_np process context
	  can be setting it again with __transport_register_session() in
	  iscsi_post_login_handler() again after the iscsit_stop_session()
	  completes in iscsi_np context.
	
	  If any other processes are accessing this session pointer we must
	  wait until they have completed.  If we are in an interrupt (the
	  time2retain handler) and contain and active session usage count we
	  restart the timer and exit.
	
	  Traditional iscsitcp will invoke this logic from TX thread
	  context during session logout, so clear tx_thread_active and
	  sleep if iscsit_close_connection() has not already occured.
	 
	  Since iser-target invokes this logic from it's own workqueue,
	  always sleep waiting for RXTX thread shutdown to complete
	  within iscsit_close_connection().
 	Return of 0 causes the TX thread to restart.
 SPDX-License-Identifier: GPL-2.0-or-later
  This file contains error recovery level two functions used by
  the iSCSI Target driver.
  (c) Copyright 2007-2013 Datera, Inc.
  Author: Nicholas A. Bellinger <nab@linux-iscsi.org>
 	FIXME: Does RData SNACK apply here as well?
 	Called with cr->conn_recovery_cmd_lock help.
	
	  Allocate an struct iscsi_conn_recovery for this connection.
	  Each struct iscsi_cmd contains an struct iscsi_conn_recovery pointer
	  (struct iscsi_cmd->cr) so we need to allocate this before preparing the
	  connection's command list for connection recovery.
	
	  Only perform connection recovery on ISCSI_OP_SCSI_CMD or
	  ISCSI_OP_NOOP_OUT opcodes.  For all other opcodes call
	  list_del_init(&cmd->i_conn_node); to release the command to the
	  session pool and remove it from the connection's list.
	 
	  Also stop the DataOUT timer, which will be restarted after
	  sending the TMR response.
		
		  Special case where commands greater than or equal to
		  the session's ExpCmdSN are attached to the connection
		  list but not to the out of order CmdSN list.  The one
		  obvious case is when a command with immediate data
		  attached must only check the CmdSN against ExpCmdSN
		  after the data is received.  The special case below
		  is when the connection fails before data is received,
		  but also may apply to other PDUs, so it has been
		  made generic here.
		
		  Add the struct iscsi_cmd to the connection recovery cmd list
	
	  Fill in the various values in the preallocated struct iscsi_conn_recovery.
 SPDX-License-Identifier: GPL-2.0-or-later
  This file contains iSCSI Target Portal Group related functions.
  (c) Copyright 2007-2013 Datera, Inc.
  Author: Nicholas A. Bellinger <nab@linux-iscsi.org>
	
	  Save iscsi_ops pointer for special case discovery TPG that
	  doesn't exist as se_wwn->wwn_group within configfs.
 First Assigned LIO Session ID 
	
	  By default we disable authentication for discovery sessions,
	  this can be changed with:
	 
	  syskernelconfigtargetiscsidiscovery_authenforce_discovery_auth
	
	  Make sure that AuthMethod does not contain None as an option
	  unless explictly disabled.  Set the default to CHAP if authentication
	  is enforced (as per default), and remove the NONE option.
	
	  iscsit_del_np() will shutdown struct iscsi_np when last TPG reference is released.
		
		  We are the parent tpg network portal.  Release all of the
		  child tpg_np's (eg: the non ISCSI_TCP ones) on our parent
		  list first.
		
		  We are not the parent ISCSI_TCP tpg network portal.  Release
		  our own network portals from the child list.
 SPDX-License-Identifier: GPL-2.0-or-later
  This file contains the iSCSI Target DataIN value generation functions.
  (c) Copyright 2007-2013 Datera, Inc.
  Author: Nicholas A. Bellinger <nab@linux-iscsi.org>
 	For Normal and Recovery DataSequenceInOrder=Yes and DataPDUInOrder=Yes.
 	For Normal and Recovery DataSequenceInOrder=No and DataPDUInOrder=Yes.
 	For Normal and Recovery DataSequenceInOrder=Yes and DataPDUInOrder=No.
 	For Normal and Recovery DataSequenceInOrder=No and DataPDUInOrder=No.
 SPDX-License-Identifier: GPL-2.0-or-later
  This file contains the iSCSI Target specific utility functions.
  (c) Copyright 2007-2013 Datera, Inc.
  Author: Nicholas A. Bellinger <nab@linux-iscsi.org>
 ipv6_addr_equal() 
  May be called from software interrupt (timer) context for allocating
  iSCSI NopINs.
	
	  This is the proper method of checking received CmdSN against
	  ExpCmdSN and MaxCmdSN values, as well as accounting for out
	  or order CmdSNs due to multiple connection sessions andor
	  CRC failures.
  Commands may be received out of order if MCS is in use.
  Ensure they are executed in CmdSN order.
		
		  Existing callers for iscsit_sequence_cmd() will silently
		  ignore commands with CMDSN_LOWER_THAN_EXP, so force this
		  return for CMDSN_MAXCMDSN_OVERRUN as well..
	
	  Scan through the inactive connection recovery list's command list.
	  If init_task_tag matches the command is still alligent.
	
	  Scan through the active connection recovery list's command list.
	  If init_task_tag matches the command is ready to be reassigned.
	
	 NOPIN timeout is disabled.
	
	  Set iov_off used by padding and data digest tx_data() calls below
	  in order to determine proper offset into cmd->iov_data[]
	
	  Perform sendpage() for each page in the scatterlist
       This function is used for mainly sending a ISCSI_TARG_LOGIN_RSP PDU
       back to the Initiator when an expection condition occurs with the
       errors set in status_class and status_detail.
       Parameters:     iSCSI Connection, Status Class, Status Detail.
       Returns:        0 on success, -1 on error.
 Save initiator name, ip address and time, if it is a failed login 
 SPDX-License-Identifier: GPL-2.0-or-later
  This file contains error recovery level zero functions used by
  the iSCSI Target driver.
  (c) Copyright 2007-2013 Datera, Inc.
  Author: Nicholas A. Bellinger <nab@linux-iscsi.org>
 	Used to set values in struct iscsi_cmd that iscsit_dataout_check_sequence()
 	checks against to determine a PDU's Offset+Length is within the current
 	DataOUT Sequence.  Used for DataSequenceInOrder=Yes only.
	
	  Still set seq_start_offset and seq_end_offset for Unsolicited
	  DataOUT, even if DataSequenceInOrder=No.
	
	  We do the within-command recovery checks here as it is
	  the first function called in iscsi_check_pre_dataout().
	  Basically, if we are in within-command recovery and
	  the PDU does not contain the offset the sequence needs,
	  dump the payload.
	 
	  This only applies to DataPDUInOrder=Yes, for
	  DataPDUInOrder=No we only re-request the failed PDU
	  and check that all PDUs in a sequence are received
	  upon end of sequence.
		
		  Set the struct iscsi_seq pointer to reuse later.
	
	  Perform various MaxBurstLength and ISCSI_FLAG_CMD_FINAL sanity
	  checks for the current Unsolicited DataOUT Sequence.
		
		  Ignore ISCSI_FLAG_CMD_FINAL checks while DataPDUInOrder=No, end of
		  sequence checks are handled in
		  iscsit_dataout_datapduinorder_no_fbit().
	
	  For DataSequenceInOrder=Yes: Check that the offset and offset+length
	  is within range as defined by iscsi_set_dataout_sequence_values().
	 
	  For DataSequenceInOrder=No: Check that an struct iscsi_seq exists for
	  offset+length tuple.
		
		  Due to possibility of recovery DataOUT sent by the initiator
		  fullfilling an Recovery R2T, it's best to just dump the
		  payload here, instead of erroring out.
		
		  Set the struct iscsi_seq pointer to reuse later.
	
	  Perform various MaxBurstLength and ISCSI_FLAG_CMD_FINAL sanity
	  checks for the current DataOUT Sequence.
		
		  Ignore ISCSI_FLAG_CMD_FINAL checks while DataPDUInOrder=No, end of
		  sequence checks are handled in
		  iscsit_dataout_datapduinorder_no_fbit().
	
	  Considering the target has no method of re-requesting DataOUT
	  by DataSN, if we receieve a greater DataSN than expected we
	  assume the functions for DataPDUInOrder=[Yes,No] below will
	  handle it.
	 
	  If the DataSN is less than expected, dump the payload.
	
	  For DataSequenceInOrder=Yes: If the offset is greater than the global
	  DataPDUInOrder=Yes offset counter in struct iscsi_cmd a protcol error has
	  occurred and fail the connection.
	 
	  For DataSequenceInOrder=No: If the offset is greater than the per
	  sequence DataPDUInOrder=Yes offset counter in struct iscsi_seq a protocol
	  error has occurred and fail the connection.
	
	  The rest of this function is only called when DataPDUInOrder=No.
 	Called from iscsit_handle_data_out() before DataOUT Payload is received
 	and CRC computed.
 	Called from iscsit_handle_data_out() after DataOUT Payload is received
 	and CRC computed.
	
	  Only start Time2Retain timer when the associated TPG is still in
	  an ACTIVE (eg: not disabled or shutdown) state.
 SPDX-License-Identifier: GPL-2.0-or-later
  This file contains the configfs implementation for iSCSI Target mode
  from the LIO-Target Project.
  (c) Copyright 2007-2013 Datera, Inc.
  Author: Nicholas A. Bellinger <nab@linux-iscsi.org>
 Start items for lio_target_portal_cit 
 Stop items for lio_target_portal_cit 
 Start items for lio_target_np_cit 
 Skip over leading "[" 
 Terminate the unbracketed IPv6 address 
 Skip over the \0 
 Terminate string for IP 
 Skip over ":" 
 Terminate string for IP 
 Skip over ":" 
	
	  Assume ISCSI_TCP by default.  Other network portals for other
	  iSCSI fabrics:
	 
	  Traditional iSCSI over SCTP (initial support)
	  iSERTCP (TODO, hardware available)
	  iSERSCTP (TODO, software emulation with osc-iwarp)
	  iSERIB (TODO, hardware available)
	 
	  can be enabled with attributes under
	  syskernelconfigiscsi$IQN$TPGnp$IP:$PORT
	 
 End items for lio_target_np_cit 
 Start items for lio_target_nacl_attrib_cit 
 End items for lio_target_nacl_attrib_cit 
 Start items for lio_target_nacl_auth_cit 
  One-way authentication userid
 End items for lio_target_nacl_auth_cit 
 Start items for lio_target_nacl_param_cit 
 End items for lio_target_nacl_param_cit 
 Start items for lio_target_acl_cit 
 End items for lio_target_acl_cit 
 Start items for lio_target_tpg_attrib_cit 
 End items for lio_target_tpg_attrib_cit 
 Start items for lio_target_tpg_auth_cit 
 End items for lio_target_tpg_auth_cit 
 Start items for lio_target_tpg_param_cit 
 Kill newline 			\
 End items for lio_target_tpg_param_cit 
 Start items for lio_target_tpg_cit 
 End items for lio_target_tpg_cit 
 Start items for lio_target_tiqn_cit 
	
	  Only tpgt_# directory groups can be created below
	  targetiscsiiqn.superturodiskarry
 Skip ahead of "tpgt_" 
		
		  iscsit_tpg_disable_portal_group() assumes force=1
	
	  iscsit_tpg_del_portal_group() assumes force=1
 End items for lio_target_tiqn_cit 
 Start LIO-Target TIQN struct contig_item lio_target_cit 
 End LIO-Target TIQN struct contig_lio_target_cit 
 Start lio_target_discovery_auth_cit 
		
		  Reset the AuthMethod key to CHAP.
		
		  Reset the AuthMethod key to CHAP,None
 End lio_target_discovery_auth_cit 
 Start functions for target_core_fabric_ops 
	
	  iSCSI Initiator Session Identifier from RFC-3720.
	
	  Only report fabric_prot_type if t10_pi has also been enabled
	  for incoming ib_isert sessions.
  This function calls iscsit_inc_session_usage_count() on the
  struct iscsi_session in question.
 SPDX-License-Identifier: GPL-2.0-or-later
  This file contains main functions related to iSCSI Parameter negotiation.
  (c) Copyright 2007-2013 Datera, Inc.
  Author: Nicholas A. Bellinger <nab@linux-iscsi.org>
 skip 0x 
		
		  For SessionType=Normal
		
		  For SessionType=Discovery
 SRP, SPKM1, SPKM2 and KRB5 are unsupported 
			
			  For non-leading connections, double check that the
			  received InitiatorName matches the existing session's
			  struct iscsi_node_acl.
	
	  Before sending the last login response containing the transition
	  bit for full-feature-phase, go ahead and start up TXRX threads
	  now to avoid potential resource allocation failures after the
	  final login response has been sent.
	
	  If iscsi_target_do_login_rx() has been invoked by ->sk_data_ready()
	  before initial PDU processing in iscsi_target_start_negotiation()
	  has completed, go ahead and retry until it's cleared.
	 
	  Otherwise if the TCP connection drops while this is occuring,
	  iscsi_target_start_negotiation() will detect the failure, call
	  cancel_delayed_work_sync(&conn->login_work), and cleanup the
	  remaining iscsi connection resources from iscsi_np process context.
	
	  LOGIN_FLAGS_READ_ACTIVE is cleared so that sk_data_ready
	  could be triggered again after this.
	 
	  LOGIN_FLAGS_WRITE_ACTIVE is cleared after we successfully
	  process a login PDU, so that sk_state_chage can do login
	  cleanup as needed if the socket is closed. If a delayed work is
	  ongoing (LOGIN_FLAGS_WRITE_ACTIVE or LOGIN_FLAGS_READ_ACTIVE),
	  sk_state_change will leave the cleanup to the delayed work or
	  it will schedule a delayed work to do cleanup.
	
	  If the TCP connection has dropped, go ahead and set LOGIN_FLAGS_CLOSED,
	  but only queue conn->login_work -> iscsi_target_do_login_rx()
	  processing if LOGIN_FLAGS_INITIAL_PDU has already been cleared.
	 
	  When iscsi_target_do_login_rx() runs, iscsi_target_sk_check_close()
	  will detect the dropped TCP connection from delayed workqueue context.
	 
	  If LOGIN_FLAGS_INITIAL_PDU is still set, which means the initial
	  iscsi_target_start_negotiation() is running, iscsi_target_do_login()
	  via iscsi_target_sk_check_close() or iscsi_target_start_negotiation()
	  via iscsi_target_sk_check_and_clear() is responsible for detecting the
	  dropped TCP connection in iscsi_np process context, and cleaning up
	  the remaining iscsi connection resources.
 	NOTE: We check for existing sessions or connections AFTER the initiator
 	has been successfully authenticated in order to protect against faked
 	ISIDTSIH combinations.
				
				  Check to make sure the TCP connection has not
				  dropped asynchronously while session reinstatement
				  was occuring in this kthread context, before
				  transitioning to full feature phase operation.
  Processes the first Login Request..
	
	  Locate the initial keys expected from the Initiator node in
	  the first login request in order to progress with the login phase.
	
	  See 5.3.  Login Phase.
	
	  Convert the incoming InitiatorName to lowercase following
	  RFC-3720 3.2.6.1. section c) that says that iSCSI IQNs
	  are NOT case sensitive.
	
	  Use default portal group for discovery sessions.
		
		  Setup crc32c modules from libcrypto
		
		  Serialize access across the discovery struct iscsi_portal_group to
		  process login attempt.
	
	  Locate Target IQN from Storage Node.
	
	  Locate Target Portal Group from Storage Node.
	
	  Setup crc32c modules from libcrypto
	
	  Serialize access across the struct iscsi_portal_group to
	  process login attempt.
	
	  conn->sess->node_acl will be set when the referenced
	  struct iscsi_session is located from received ISID+TSIH in
	  iscsi_login_non_zero_tsih_s2().
	
	  This value is required in iscsi_login_zero_tsih_s2()
	
	  Locate incoming Initiator IQN reference from Storage Node.
	
	  Setup pre-allocated tags based upon allowed per NodeACL CmdSN
	  depth for non immediate commands, plus extra tags for immediate
	  commands.
	 
	  Also enforce a ISCSIT_MIN_TAGS to prevent unnecessary contention
	  in per-cpu-ida tag allocation logic + small queue_depth.
	
	  If iscsi_target_do_login returns zero to signal more PDU
	  exchanges are required to complete the login, go ahead and
	  clear LOGIN_FLAGS_INITIAL_PDU but only if the TCP connection
	  is still active.
	 
	  Otherwise if TCP connection dropped asynchronously, go ahead
	  and perform connection cleanup now.
 SPDX-License-Identifier: GPL-2.0-or-later
  This file contains error recovery level one used by the iSCSI Target driver.
  (c) Copyright 2007-2013 Datera, Inc.
  Author: Nicholas A. Bellinger <nab@linux-iscsi.org>
 	Used to dump excess datain payload for certain error recovery
 	situations.  Receive in OFFLOAD_BUF_SIZE max of datain per rx_data().
 	dump_padding_digest denotes if padding and data digests need
 	to be dumped.
 	Used for retransmitting R2Ts from a R2T SNACK request.
	
	  If the struct iscsi_r2t has not been sent yet, we can safely
	  ignore retransmission
	  of the R2TSN in question.
	
	  Make sure the initiator is not requesting retransmission
	  of R2TSNs already acknowledged by a TMR TASK_REASSIGN.
 	Generates Offsets and NextBurstLength based on Begrun and Runlength
 	carried in a Data SNACK or ExpDataSN in TMR TASK_REASSIGN.
 	For DataSequenceInOrder=Yes and DataPDUInOrder=[Yes,No] only.
 	FIXME: How is this handled for a RData SNACK?
 	Generates Offsets and NextBurstLength based on Begrun and Runlength
 	carried in a Data SNACK or ExpDataSN in TMR TASK_REASSIGN.
 	For DataSequenceInOrder=No and DataPDUInOrder=[Yes,No] only.
 	FIXME: How is this handled for a RData SNACK?
	
	  Calculate read_data_done for all sequences containing a
	  first_datasn and last_datasn less than the BegRun.
	 
	  Locate the struct iscsi_seq the BegRun lies within and calculate
	  NextBurstLenghth up to the DataSN based on MaxRecvDataSegmentLength.
	 
	  Also use struct iscsi_seq->seq_send_order to determine where to start.
		
		  No data has been transferred for this DataIN sequence, so the
		  seq->first_datasn and seq->last_datasn have not been set.
		
		  This DataIN sequence is precedes the received BegRun, add the
		  total xfer_len of the sequence to read_data_done and reset
		  seq->pdu_send_order.
		
		  The BegRun lies within this DataIN sequence.
			
			  For DataPDUInOrder=Yes, while the first DataSN of
			  the sequence is less than the received BegRun, add
			  the MaxRecvDataSegmentLength to read_data_done and
			  to the sequence's next_burst_len;
			 
			  For DataPDUInOrder=No, while the first DataSN of the
			  sequence is less than the received BegRun, find the
			  struct iscsi_pdu of the DataSN in question and add the
			  MaxRecvDataSegmentLength to read_data_done and to the
			  sequence's next_burst_len;
		
		  This DataIN sequence is larger than the received BegRun,
		  reset seq->pdu_send_order and continue.
	
	  Make sure the initiator is not requesting retransmission
	  of DataSNs already acknowledged by a Data ACK SNACK.
	
	  Make sure BegRun and RunLength in the Data SNACK are sane.
	  Note: (cmd->data_sn - 1) will carry the maximum DataSN sent.
	
	  FIXME: This will not work for bidi commands.
 #warning FIXME: Status SNACK needs to be dependent on OPCODE!!! 
	
	  For Data ACK SNACK, BegRun is the next expected DataSN.
	  (see iSCSI v19: 10.16.6)
	
	  Get an struct iscsi_pdu pointer to the first PDU, and total PDU count
	  of the DataOUT sequence.
	
	  Loop through the ending DataOUT Sequence checking each struct iscsi_pdu.
	  The following ugly logic does batching of not received PDUs.
		
		  Set recovery = 1 for any missing, CRC failed, or timed
		  out PDUs to let the DataOUT logic know that this sequence
		  has not been completed yet.
		 
		  Also, only send a Recovery R2T for ISCSI_PDU_NOT_RECEIVED.
		  We assume if the PDU either failed CRC or timed out
		  that a Recovery R2T has already been sent.
	
	  We attach the struct iscsi_ooo_cmdsn entry to the out of order
	  list in increasing CmdSN order.
	  This allows iscsi_execute_ooo_cmdsns() to detect any
	  additional CmdSN holes while performing delayed execution.
		
		  CmdSN is greater than the tail of the list.
			
			  CmdSN is either lower than the head,  or somewhere
			  in the middle.
 Insert before this entry 
 	Removes an struct iscsi_ooo_cmdsn from a session's list,
 	called with struct iscsi_session->cmdsn_mutex held.
 	Called either:
 	1. With sess->cmdsn_mutex held from iscsi_execute_ooo_cmdsns()
 	or iscsi_check_received_cmdsn().
 	2. With no locks held directly from iscsi_handle_XXX_pdu() functions
 	for immediate commands.
		
		  Go ahead and send the CHECK_CONDITION status for
		  any SCSI CDB exceptions that may have occurred.
		
		  Special case for delayed CmdSN with Immediate
		  Data andor Unsolicited Data Out attached.
		
		  The default handler.
 	NOTE: Called from interrupt (timer) context.
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2016 Chelsio Communications, Inc.
		
		  No point in stalling here when np_thread
		  is in state RESETSHUTDOWNEXIT - bail
  CPL connection rx data ack: host ->
  Send RX credits through an RX_DATA_ACK CPL message.
  Returns the number of credits sent.
	
	  Specify the largest window that will fit in opt0. The
	  remainder will be specified in the rx_data_ack.
 Find output route 
	
	  Return the number of 16-byte credits used by the flowc request.
	  Pass back the nparams and actual flowc length if requested.
  set up ulp submode 
 simultaneous close 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2016 Chelsio Communications, Inc.
  cxgbit_is_ofld_imm - check whether a packet can be sent as immediate data
  @skb: the packet
  Returns true if a packet can be sent as an offload WR with immediate
  data.  We currently use the same limit as for Ethernet packets.
  cxgbit_sgl_len - calculates the size of an SGL of the given capacity
  @n: the number of SGL entries
  Calculates the number of flits needed for a scattergather list that
  can hold the given number of entries.
  cxgbit_calc_tx_flits_ofld - calculate # of flits for an offload packet
  @skb: the packet
  Returns the number of flits needed for the given offload packet.
  These packets are already fully constructed and no additional headers
  will be added.
		
		  Assumes the initial credits is large enough to support
		  fw_flowc_wr plus largest possible first payload
	
	  We know each entry in t_data_sg contains a page.
  cxgbit_seq_pdu_inorder()
  @csk: pointer to cxgbit socket structure
  This function checks whether data sequence and data
  pdu are in order.
  Return: returns -1 on error, 0 if data sequence and
  data pdu are in order, 1 if data sequence or data pdu
  is not in order.
	
	  Special case for Unsupported SAM WRITE Opcodes and ImmediateData=Yes.
		
		  A PDUCmdSN carrying Immediate Data passed
		  DataCRC, check against ExpCmdSNMaxCmdSN if
		  Immediate Bit is not set.
		
		  Immediate Data failed DataCRC and ERL>=1,
		  silently drop this PDU and let the initiator
		  plug the CmdSN gap.
		 
		  FIXME: Send Unsolicited NOPIN with reserved
		  TTT here to help the initiator figure out
		  the missing CmdSN, although they should be
		  intelligent enough to determine the missing
		  CmdSN and issue a retry to plug the sequence.
 immed_ret == IMMEDIATE_DATA_CANNOT_RECOVER 
			
			  drop this PDU and let the
			  initiator plug the CmdSN gap.
	
	  Handle NOP-OUT payload for traditional iSCSI sockets
		
		  Attach ping data to struct iscsi_cmd->buf_ptr.
			
			  drop this PDU and let the
			  initiator plug the CmdSN gap.
	
	  Setup the initial iscsi_login values from the leading
	  login request PDU.
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2016 Chelsio Communications, Inc.
 cdev list lock 
 48(BHS) + 256(AHS) + 8(Digest) 
 usually there's just one frag 
 get a reference to the last page, we don't own it 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2016 Chelsio Communications, Inc.
	
	  the fifth address needs to be repeated in the next ppod, so do
	  not move sg
	
	  the ddp tag will be used for the ttt in the outgoing r2t pdu
			 Abort the TCP conn if DDP is not complete to
			  avoid any possibility of DDP after freeing
			  the cmd.
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2010 Cisco Systems, Inc.
 XXX TBD some includes may be extraneous 
  Dump cmd state for debugging.
 undo get from lookup at recv 
  Send response.
	
	  Test underflow and overflow with one mask.  Usually both are off.
	  Bidirectional commands are not handled yet.
	
	  Send response.
		
		  Generate a TASK_SET_FULL status to notify the initiator
		  to reduce it's queue_depth after the se_cmd response has
		  been re-queued by target-core.
	
	  Drop the extra ACK_KREF reference taken by target_submit_cmd()
	  ahead of ft_check_stop_free() -> transport_generic_free_cmd()
	  final se_cmd->cmd_kref put.
  Send TX_RDY (transfer ready).
 Signal QUEUE_FULL 
 Only if it is 'Exchange Responder' 
		 Target is 'exchange responder' and sending XFER_READY
		  to 'exchange initiator (initiator)'
  FC sequence response handler for follow-on sequences (data) and aborts.
 XXX need to find cmd if queued 
 write data 
 command 
 transfer ready 
 transfer ready 
  Send a FCP response including SCSI status and optional FCP rsp_code.
  status is SAM_STAT_GOOD (zero) iff code is valid.
  This is used in error cases, such as allocation failures.
  Send error or task management response.
  Send error or task management response.
  Always frees the cmd and associated state.
  Handle Task Management Request.
		
		  FCP4r01 indicates having a combination of
		  tm_flags set is invalid.
 FIXME: Add referenced task tag for ABORT_TASK 
  Send status from completed task management request.
	
	  Drop the extra ACK_KREF reference taken by target_submit_tmr()
	  ahead of ft_check_stop_free() -> transport_generic_free_cmd()
	  final se_cmd->cmd_kref put.
  Handle incoming FCP command.
 hold frame during cmd 
 undo get from lookup 
  Handle incoming FCP frame.
  Caller has verified that the frame is type FCP.
 command 
 write data 
 transfer ready 
 SRR, perhaps 
 undo get from lookup 
  Send new command to target.
 not handling longer CDBs yet 
	
	  Check for FCP task management flags
 TBD not supported by tcm_fc yet 
	
	  Locate the SAM Task Attr from fc_pri_ta
	
	  Use a single se_cmd->cmd_kref as we expect to release se_cmd
	  directly from ft_check_stop_free callback in response path.
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2010 Cisco Systems, Inc.
  Portions based on tcm_loop_fabric_scsi.c and libfcfc_fcp.c
  Copyright (c) 2007 Intel Corporation. All rights reserved.
  Copyright (c) 2008 Red Hat, Inc.  All rights reserved.
  Copyright (c) 2008 Mike Christie
  Copyright (c) 2009 Rising Tide, Inc.
  Copyright (c) 2009 Linux-iSCSI.org
  Copyright (c) 2009 Nicholas A. Bellinger <nab@linux-iscsi.org>
 XXX TBD some includes may be extraneous 
  Deliver read data back to initiator.
  XXX TBD handle resource problems later.
	
	  Setup to use first mem list entry, unless no data.
 no scattergather in skb for odd word length due to fc_seq_send() 
			
			  If lport's has capability of Large Send Offload LSO)
			  , then allow 'frame_len' to be as big as 'lso_max'
			  if indicated transfer length is >= lport->lso_max
			
			  Setup the frame's max payload which is used by base
			  driver to indicate HW about max frame size, so that
			  HW can do fragmentation appropriately based on
			  "gso_max_size" of underline netdev.
			
			  Go ahead and set TASK_SET_FULL status ignoring the
			  rest of the DataIN, and immediately attempt to
			  send the response via ft_queue_status() in order
			  to notify the initiator that it should reduce it's
			  per LUN queue_depth.
  Receive write data frame.
		
		  Since DDP (Large Rx offload) was setup for this request,
		  payload is expected to be copied directly to user buffers.
		
		  Invalidate HW DDP context if it was setup for respective
		  command. Invalidation of HW DDP context is requited in both
		  situation (success and error).
		
		  If "Sequence Initiative (TSI)" bit set in f_ctl, means last
		  write data frame is received successfully where payload is
		  posted directly to user buffer and only the last frame's
		  header is posted in receive queue.
		 
		  If "Sequence Initiative (TSI)" bit is not set, means error
		  condition w.r.t. DDP, hence drop the packet and let explict
		  ABORTS from other end of exchange timer trigger the recovery.
	
	  Setup to use first mem list entry, unless no data.
  Handle and cleanup any HW specific resources if
  received ABORTS, errors, timeouts.
 Cleanup the DDP context in HW if DDP was setup 
				
				  "ddp_done" trigger invalidation of HW
				  specific DDP context
				
				  Resetting same variable to indicate HW's
				  DDP context has been invalidated to avoid
				  re_invalidation of same context (context is
				  identified using ep->xid)
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2010 Cisco Systems, Inc.
 XXX TBD some includes may be extraneous 
  Lookup or allocate target local port.
  Caller holds ft_lport_lock.
  Delete a target local port.
  Caller holds ft_lport_lock.
  Add local port.
  Called thru fc_lport_iterate().
  Delete local port.
  Called thru fc_lport_iterate().
  Notification of local port change from libfc.
  Create or delete local port and associated tport.
  Hash function for FC_IDs.
  Find session in local port.
  Sessions and hash lists are RCU-protected.
  A reference is taken which must be eventually freed.
  Allocate session and enter it in the hash for the local port.
  Caller holds ft_lport_lock.
 ref for table entry 
  Unhash the session.
  Caller holds ft_lport_lock.
  Delete session from hash.
  Caller holds ft_lport_lock.
  Delete all sessions from tport.
  Caller holds ft_lport_lock.
 release from table 
  TCM ops for sessions.
  Remove session and send PRLO.
  This is called when the ACL is being deleted or queue depth is changing.
 XXX Send LOGO or PRLO 
 let transport deregister happen 
 XXX TBD probably not what is needed 
  libfc ops involving sessions.
 not a target for this local port 
	
	  If both target and initiator bits are off, the SPP is invalid.
	
	  Create session (image pair) only if requested by
	  EST_IMG_PAIR flag and if the requestor is an initiator.
 XXX TBD - clearing actions.  unit attn, see 4.10 
	
	  OR in our service parameters with other provider (initiator), if any.
  ft_prli() - Handle incoming or outgoing PRLI for the FCP target
  @rdata: remote port private
  @spp_len: service parameter page length
  @rspp: received service parameter page (NULL for outgoing PRLI)
  @spp: response service parameter page
  Returns spp response code.
 release from table 
 XXX TBD - clearing actions.  unit attn, see 4.10 
  Handle incoming FCP request.
  Caller has verified that the frame is type FCP.
 TBD XXX - if FCP_CMND, send PRLO 
 must do ft_sess_put() 
  Provider ops for libfc.
 SPDX-License-Identifier: GPL-2.0-or-later
  Filename:  tcm_fc.c
  This file contains the configfs implementation for TCM_fc fabric node.
  Based on tcm_loop_configfs.c
  Copyright (c) 2010 Cisco Systems, Inc.
  Copyright (c) 2009,2010 Rising Tide, Inc.
  Copyright (c) 2009,2010 Linux-iSCSI.org
  Copyright (c) 2009,2010 Nicholas A. Bellinger <nab@linux-iscsi.org>
  Parse WWN.
  If strict, we require lower-case hex and colon separators to be sure
  the name is the same as what would be generated by ft_format_wwn()
  so the name and wwn are mapped one-to-one.
  ACL auth ops.
  ACL ops.
  Add ACL for an initiator.  The ACL is named arbitrarily.
  The port_name andor node_name are attributes.
  local_port port_group (tpg) ops.
	
	  Name must be "tpgt_" followed by the index.
 Wait for sessions to be freed thru RCU, for BUG_ON below 
  Verify that an lport is configured to use the tcm_fc module, and return
  the target port group that should be used.
  The caller holds ft_lport_lock.
  target config instance ops.
  Add lport to allowed config.
  The name is the WWPN in lower-case ASCII, colon-separated bytes.
	
	  This tag is used when forming SCSI Name identifier in EVPD=1 0x83
	  to represent the SCSI Target Port.
	
	  Setup function pointers for generic logic in
	  target_core_fabric_configfs.c
  This file contains the LinuxSCSI LLD virtual SCSI initiator driver
  for emulated SAS initiator ports
  © Copyright 2011-2013 Datera, Inc.
  Licensed to the Linux Foundation under the General Public License (GPL) version 2.
  Author: Nicholas A. Bellinger <nab@risingtidesystems.com>
  This program is free software; you can redistribute it andor modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
  Called from struct target_core_fabric_ops->check_stop_free()
  Used with root_device_register() in tcm_loop_alloc_core_bus() below
	
	  Ensure that this tl_tpg reference from the incoming sc->device->id
	  has already been configured via tcm_loop_make_naa_tpg().
		
		  loopback transport doesn't support
		  WRITE_GENERATE, READ_STRIP protection
		  information operations, go ahead unprotected.
  ->queuecommand can be and usually is called from interrupt context, so
  defer the actual submission to a workqueue.
  Called from SCSI EH process context to issue a LUN_RESET TMR
  to struct scsi_device
	
	  Locate the tl_nexus and se_sess pointers
	
	  Locate the tcm_loop_hba_t pointer
  Called from SCSI EH process context to issue a LUN_RESET TMR
  to struct scsi_device
	
	  Locate the tcm_loop_hba_t pointer
	
	  Locate the tcm_loop_hba_t pointer
	
	  Locate the tl_tpg pointer from TargetID in sc->device->id
	
	  Assign the struct tcm_loop_hba pointer to struct Scsi_Host->hostdata
	
	  Setup single ID, Channel and LUN for now..
  Called from tcm_loop_make_scsi_hba() in tcm_loop_configfs.c
  Called from tcm_loop_fabric_init() in tcl_loop_fabric.c to load the emulated
  tcm_loop SCSI bus.
	
	  Return the passed NAA identifier for the Target Port
	
	  This Tag is used when forming SCSI Name identifier in EVPD=1 0x83
	  to represent the SCSI Target Port.
  Returning (1) here allows for target_core_mod struct se_node_acl to be generated
  based upon the incoming fabric dependent SCSI Initiator Port
  Allow I_T Nexus full READ-WRITE access without explict Initiator Node ACLs for
  local virtual LinuxSCSI LLD passthrough into VM hypervisor guest
  Because TCM_Loop does not use explict ACLs and MappedLUNs, this will
  never be called for TCM_Loop by target_core_fabric_configfs.c code.
  It has been added here as a nop for target_fabric_tf_ops_check()
	
	  Since LinuxSCSI has already sent down a struct scsi_cmnd
	  sc->sc_data_direction of DMA_TO_DEVICE with struct scatterlist array
	  memory, and memory has already been mapped to struct se_cmd->t_mem_list
	  format with transport_generic_map_mem_to_cmd().
	 
	  We now tell TCM to add this WRITE CDB directly into the TCM storage
	  object execution queue.
 Wake up tcm_loop_issue_tmr(). 
 Start items for tcm_loop_port_cit 
	
	  Add LinuxSCSI struct scsi_device by HCTL
	
	  Remove LinuxSCSI struct scsi_device by HCTL
 End items for tcm_loop_port_cit 
 Start items for tcm_loop_nexus_cit 
	
	  Release the SCSI I_T Nexus to the emulated Target Port
 End items for tcm_loop_nexus_cit 
	
	  Shutdown the active I_T nexus if 'NULL' is passed..
	
	  Otherwise make sure the passed virtual Initiator port WWN matches
	  the fabric protocol_id set in tcm_loop_make_scsi_hba(), and call
	  tcm_loop_make_nexus()
 Skip over "fc." 
	
	  Clear any trailing newline for the NAA WWN
 Start items for tcm_loop_naa_cit 
	
	  Register the tl_tpg as a emulated TCM Target Endpoint
	
	  Release the I_T Nexus for the Virtual target link if present
	
	  Deregister the tl_tpg as a emulated TCM Target Endpoint
 End items for tcm_loop_naa_cit 
 Start items for tcm_loop_cit 
	
	  Determine the emulated Protocol Identifier and Target Port Name
	  based on the incoming configfs directory name.
 Skip over "fc." 
	
	  Call device_register(tl_hba->dev) to register the emulated
	  LinuxSCSI LLD of type struct Scsi_Host at tl_hba->sh after
	  device_register() callbacks in tcm_loop_driver_probe()
	
	  Call device_unregister() on the original tl_hba->dev.
	  tcm_loop_fabric_scsi.c:tcm_loop_release_adapter() will
	  release tl_hba;
 Start items for tcm_loop_cit 
 End items for tcm_loop_cit 
 SPDX-License-Identifier: GPL-2.0-or-later
  SBP2 target driver (SCSI over IEEE1394 in target mode)
  Copyright (C) 2011  Chris Boot <bootc@bootc.net>
 FireWire address region for management and command block address handlers 
 unit_specifier_id: NCITST10 
 unit_sw_version: 1155D Rev 4 
 command_set_specifier_id: NCITST10 
 command_set: SPC-2 
 command_set_revision: 0 
 firmware_revision: 1 
 FIXME: abortwait on tasks 
			
			  SBP-2 R4 says we should return access denied, but
			  that can confuse initiators. Instead we need to
			  treat this like a reconnect, but send the login
			  response block like a fresh login.
			 
			  This is required particularly in the case of Apple
			  devices booting off the FireWire target, where
			  the firmware has an active login to the target. When
			  the OS takes control of the session it issues its own
			  LOGIN rather than a RECONNECT. To avoid the machine
			  waiting until the reconnect_hold expires, we can skip
			  the ACCESS_DENIED errors to speed things up.
	
	  check exclusive bit in login request
	  reject with access_denied if any logins present
	
	  check exclusive bit in any existing login descriptor
	  reject with access_denied if any exclusive logins present
	
	  check we haven't exceeded the number of allowed logins
	  reject with resources_unavailable if we have
 only take the latest reconnect_hold into account 
 FIXME: implement 
 update the node details 
 could be called while tearing down the session 
 check for bus reset and make node_id invalid 
 still waiting for reconnect 
 reconnect timeout has expired 
 ignored 
 ignored as we don't send unsolicited status 
 turn offset into the offset from the start of the block 
 AGENT_STATE 
 AGENT_RESET 
 ORB_POINTER 
 DOORBELL 
 UNSOLICITED_STATUS_ENABLE 
 Format specified by this standard 
 Reserved for future standardization 
 Vendor-dependent 
 Dummy ORB 
 used to double-check we haven't been issued an AGENT_RESET 
 read in the ORB 
 check the next_ORB field 
 don't process this request, just check next_ORB 
 check if we should carry on processing 
  Simple wrapper around fw_run_transaction that retries the transaction several
  times in case of failure, with an exponential backoff.
  Wrapper around sbp_run_transaction that gets the card, destination,
  generation and speed out of the request's session.
 only used for printk until we do TMRs 
  DMA_TO_DEVICE = read from initiator (SCSI WRITE)
  DMA_FROM_DEVICE = write to initiator (SCSI READ)
 FIXME: take page_size into account 
	
	  Drop the extra ACK_KREF reference taken by target_submit_cmd()
	  ahead of sbp_check_stop_free() -> transport_generic_free_cmd()
	  final se_cmd->cmd_kref put.
 sfmt 
 current, fixed 
 deferred, fixed 
 current, descriptor 
 deferred, descriptor 
		
		  TODO: SBP-3 specifies what we should do with descriptor
		  format sense data
 status 
 valid 
 mark, eom, ili 
 sense_key 
 XXX sense_code 
 XXX sense_qualifier 
 information 
 CDB-dependent 
 fru 
 sense_key-dependent 
 fetch the ORB from the initiator 
 Response to ORB, next_ORB absent 
 write the status block back to the initiator 
  Called after command (no data transfer) or after the write (to device)
  operation is completed
	
	  Number of entries in the final unit directory:
	   - all of those in the template
	   - management_agent
	   - unit_characteristics
	   - reconnect_timeout
	   - unit unique ID
	   - one for each LUN
	 
	   MUST NOT include leaf or sub-directory entries
 allocate num_entries + 4 for the header and unique ID leaf 
 directory_length 
 directory_id 
 unit directory template 
 management_agent 
 unit_characteristics 
 reconnect_timeout 
 unit unique ID (leaf is just after LUNs) 
		
		  rcu_dereference_raw protected by se_lun->lun_group symlink
		  reference to se_device->dev_group.
 logical_unit_number 
 unit unique ID leaf 
 default attribute values 
 XXX: force-shutdown sessions instead? 
 XXX: also check against current count? 
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) 2018 Cadence Design Systems Inc.
  Author: Boris Brezillon <boris.brezillon@bootlin.com>
  i3c_device_do_priv_xfers() - do I3C SDR private transfers directed to a
 				specific device
  @dev: device with which the transfers should be done
  @xfers: array of transfers
  @nxfers: number of transfers
  Initiate one or several private SDR transfers with @dev.
  This function can sleep and thus cannot be called in atomic context.
  Return: 0 in case of success, a negative error core otherwise.
  i3c_device_get_info() - get I3C device information
  @dev: device we want information on
  @info: the information object to fill in
  Retrieve I3C dev info.
  i3c_device_disable_ibi() - Disable IBIs coming from a specific device
  @dev: device on which IBIs should be disabled
  This function disable IBIs coming from a specific device and wait for
  all pending IBIs to be processed.
  Return: 0 in case of success, a negative error core otherwise.
  i3c_device_enable_ibi() - Enable IBIs coming from a specific device
  @dev: device on which IBIs should be enabled
  This function enable IBIs coming from a specific device and wait for
  all pending IBIs to be processed. This should be called on a device
  where i3c_device_request_ibi() has succeeded.
  Note that IBIs from this device might be received before this function
  returns to its caller.
  Return: 0 in case of success, a negative error core otherwise.
  i3c_device_request_ibi() - Request an IBI
  @dev: device for which we should enable IBIs
  @req: setup requested for this IBI
  This function is responsible for pre-allocating all resources needed to
  process IBIs coming from @dev. When this function returns, the IBI is not
  enabled until i3c_device_enable_ibi() is called.
  Return: 0 in case of success, a negative error core otherwise.
  i3c_device_free_ibi() - Free all resources needed for IBI handling
  @dev: device on which you want to release IBI resources
  This function is responsible for de-allocating resources previously
  allocated by i3c_device_request_ibi(). It should be called after disabling
  IBIs with i3c_device_disable_ibi().
  i3cdev_to_dev() - Returns the device embedded in @i3cdev
  @i3cdev: I3C device
  Return: a pointer to a device object.
  dev_to_i3cdev() - Returns the I3C device containing @dev
  @dev: device object
  Return: a pointer to an I3C device object.
  i3c_device_match_id() - Returns the i3c_device_id entry matching @i3cdev
  @i3cdev: I3C device
  @id_table: I3C device match table
  Return: a pointer to an i3c_device_id object or NULL if there's no match.
  i3c_driver_register_with_owner() - register an I3C device driver
  @drv: driver to register
  @owner: module that owns this driver
  Register @drv to the core.
  Return: 0 in case of success, a negative error core otherwise.
  i3c_driver_unregister() - unregister an I3C device driver
  @drv: driver to unregister
  Unregister @drv.
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) 2018 Cadence Design Systems Inc.
  Author: Boris Brezillon <boris.brezillon@bootlin.com>
  i3c_bus_maintenance_lock - Lock the bus for a maintenance operation
  @bus: I3C bus to take the lock on
  This function takes the bus lock so that no other operations can occur on
  the bus. This is needed for all kind of bus maintenance operation, like
  - enablingdisabling slave events
  - re-triggering DAA
  - changing the dynamic address of a device
  - relinquishing mastership
  - ...
  The reason for this kind of locking is that we don't want drivers and core
  logic to rely on I3C device information that could be changed behind their
  back.
  i3c_bus_maintenance_unlock - Release the bus lock after a maintenance
 			      operation
  @bus: I3C bus to release the lock on
  Should be called when the bus maintenance operation is done. See
  i3c_bus_maintenance_lock() for more details on what these maintenance
  operations are.
  i3c_bus_normaluse_lock - Lock the bus for a normal operation
  @bus: I3C bus to take the lock on
  This function takes the bus lock for any operation that is not a maintenance
  operation (see i3c_bus_maintenance_lock() for a non-exhaustive list of
  maintenance operations). Basically all communications with I3C devices are
  normal operations (HDR, SDR transfers or CCC commands that do not change bus
  state or I3C dynamic address).
  Note that this lock is not guaranteeing serialization of normal operations.
  In other words, transfer requests passed to the I3C master can be submitted
  in parallel and I3C master drivers have to use their own locking to make
  sure two different communications are not inter-mixed, or access to the
  outputinput queue is not done while the engine is busy.
  i3c_bus_normaluse_unlock - Release the bus lock after a normal operation
  @bus: I3C bus to release the lock on
  Should be called when a normal operation is done. See
  i3c_bus_normaluse_lock() for more details on what these normal operations
  are.
 Addresses 0 to 7 are reserved. 
	
	  Reserve broadcast address and all addresses that might collide
	  with the broadcast address when facing a single bit error.
	
	  I3CI2C frequency may have been overridden, check that user-provided
	  values are not exceeding max possible frequency.
  i3c_master_get_free_addr() - get a free address on the bus
  @master: I3C master object
  @start_addr: where to start searching
  This function must be called with the bus lock held in write mode.
  Return: the first free address starting at @start_addr (included) or -ENOMEM
  if there's no more address available.
  i3c_master_entdaa_locked() - start a DAA (Dynamic Address Assignment)
 				procedure
  @master: master used to send frames on the bus
  Send a ENTDAA CCC command to start a DAA procedure.
  Note that this function only sends the ENTDAA CCC command, all the logic
  behind dynamic address assignment has to be handled in the I3C master
  driver.
  This function must be called with the bus lock held in write mode.
  Return: 0 in case of success, a positive I3C error code if the error is
  one of the official Mx error codes, and a negative error code otherwise.
  i3c_master_disec_locked() - send a DISEC CCC command
  @master: master used to send frames on the bus
  @addr: a valid I3C slave address or %I3C_BROADCAST_ADDR
  @evts: events to disable
  Send a DISEC CCC command to disable some or all events coming from a
  specific slave, or all devices if @addr is %I3C_BROADCAST_ADDR.
  This function must be called with the bus lock held in write mode.
  Return: 0 in case of success, a positive I3C error code if the error is
  one of the official Mx error codes, and a negative error code otherwise.
  i3c_master_enec_locked() - send an ENEC CCC command
  @master: master used to send frames on the bus
  @addr: a valid I3C slave address or %I3C_BROADCAST_ADDR
  @evts: events to disable
  Sends an ENEC CCC command to enable some or all events coming from a
  specific slave, or all devices if @addr is %I3C_BROADCAST_ADDR.
  This function must be called with the bus lock held in write mode.
  Return: 0 in case of success, a positive I3C error code if the error is
  one of the official Mx error codes, and a negative error code otherwise.
  i3c_master_defslvs_locked() - send a DEFSLVS CCC command
  @master: master used to send frames on the bus
  Send a DEFSLVS CCC command containing all the devices known to the @master.
  This is useful when you have secondary masters on the bus to propagate
  device information.
  This should be called after all I3C devices have been discovered (in other
  words, after the DAA procedure has finished) and instantiated in
  &i3c_master_controller_ops->bus_init().
  It should also be called if a master ACKed an Hot-Join request and assigned
  a dynamic address to the device joining the bus.
  This function must be called with the bus lock held in write mode.
  Return: 0 in case of success, a positive I3C error code if the error is
  one of the official Mx error codes, and a negative error code otherwise.
 No other master on the bus, skip DEFSLVS. 
 Skip the I3C dev representing this master. 
	
	  When the device does not have IBI payload GETMRL only returns 2
	  bytes of data.
	
	  ->init_dyn_addr should have been reserved before that, so, if we're
	  trying to apply a pre-reserved dynamic address, we should not try
	  to reserve the address slot a second time.
	
	  We don't attach devices to the controller until they are
	  addressable on the bus.
 Do not attach the master device itself. 
 Do not detach the master device itself. 
  i3c_master_do_daa() - do a DAA (Dynamic Address Assignment)
  @master: master doing the DAA
  This function is instantiating an I3C device object and adding it to the
  I3C device list. All device information are automatically retrieved using
  standard CCC commands.
  The I3C device object is returned in case the master wants to attach
  private data to it using i3c_dev_set_master_data().
  This function must be called with the bus lock held in write mode.
  Return: a 0 in case of success, an negative error code otherwise.
  i3c_master_set_info() - set master device information
  @master: master used to send frames on the bus
  @info: I3C device information
  Set master device info. This should be called from
  &i3c_master_controller_ops->bus_init().
  Not all &i3c_device_info fields are meaningful for a master device.
  Here is a list of fields that should be properly filled:
  - &i3c_device_info->dyn_addr
  - &i3c_device_info->bcr
  - &i3c_device_info->dcr
  - &i3c_device_info->pid
  - &i3c_device_info->hdr_cap if %I3C_BCR_HDR_CAP bit is set in
    &i3c_device_info->bcr
  This function must be called with the bus lock held in maintenance mode.
  Return: 0 if @info contains valid information (not every piece of
  information can be checked, but we can at least make sure @info->dyn_addr
  and @info->bcr are correct), -EINVAL otherwise.
  i3c_master_bus_init() - initialize an I3C bus
  @master: main master initializing the bus
  This function is following all initialisation steps described in the I3C
  specification:
  1. Attach I2C devs to the master so that the master can fill its internal
     device table appropriately
  2. Call &i3c_master_controller_ops->bus_init() method to initialize
     the master controller. That's usually where the bus mode is selected
     (pure bus or mixed fastslow bus)
  3. Instruct all devices on the bus to drop their dynamic address. This is
     particularly important when the bus was previously configured by someone
     else (for example the bootloader)
  4. Disable all slave events.
  5. Reserve address slots for I3C devices with init_dyn_addr. And if devices
     also have static_addr, try to pre-assign dynamic addresses requested by
     the FW with SETDASA and attach corresponding statically defined I3C
     devices to the master.
  6. Do a DAA (Dynamic Address Assignment) to assign dynamic addresses to all
     remaining I3C devices
  Once this is done, all I3C and I2C devices should be usable.
  Return: a 0 in case of success, an negative error code otherwise.
	
	  First attach all devices with static definitions provided by the
	  FW.
	
	  Now execute the controller specific ->bus_init() routine, which
	  might configure its internal logic to match the bus limitations.
	
	  The master device should have been instantiated in ->bus_init(),
	  complain if this was not the case.
	
	  Reset all dynamic address that may have been assigned before
	  (assigned by the bootloader for example).
 Disable all slave events before starting DAA. 
	
	  Reserve init_dyn_addr first, and then try to pre-assign dynamic
	  address and retrieve device information if needed.
	  In case pre-assign dynamic address fails, setting dynamic address to
	  the requested init_dyn_addr is retried after DAA is done in
	  i3c_master_add_i3c_dev_locked().
		
		  We don't reserve a dynamic address for devices that
		  don't explicitly request one.
		
		  Only try to createattach devices that have a static
		  address. Other devices will be createdattached when
		  DAA happens, and the requested dynamic address will
		  be set using SETNEWDA once those devices become
		  addressable.
  i3c_master_add_i3c_dev_locked() - add an I3C slave to the bus
  @master: master used to send frames on the bus
  @addr: I3C slave dynamic address assigned to the device
  This function is instantiating an I3C device object and adding it to the
  I3C device list. All device information are automatically retrieved using
  standard CCC commands.
  The I3C device object is returned in case the master wants to attach
  private data to it using i3c_dev_set_master_data().
  This function must be called with the bus lock held in write mode.
  Return: a 0 in case of success, an negative error code otherwise.
		
		  We need to restore the IBI state too, so let's save the
		  IBI information and try to restore them after olddev has
		  been detached+released and its IBI has been stopped and
		  the associated resources have been freed.
	
	  Depending on our previous state, the expected dynamic address might
	  differ:
	  - if the device already had a dynamic address assigned, let's try to
	    re-apply this one
	  - if the device did not have a dynamic address and the firmware
	    requested a specific address, pick this one
	  - in any other case, keep the address automatically assigned by the
	    master
		
		  Try to apply the expected dynamic address. If it fails, keep
		  the address assigned by the master.
	
	  Now is time to try to restore the IBI setup. If we're lucky,
	  everything works as before, otherwise, all we can do is complain.
	  FIXME: maybe we should add callback to inform the driver that it
	  should request the IBI again instead of trying to hide that from
	  him.
	
	  The I3C Specification does not clearly say I2C devices with 10-bit
	  address are supported. These devices can't be passed properly through
	  DEFSLVS command.
 LVR is encoded in reg[2]. 
	
	  The manufacturer ID can't be 0. If reg[1] == 0 that means we're
	  dealing with an I2C device.
	
	  The user might want to limit I2C and I3C speed in case some devices
	  on the bus are not supporting typical rates, or if the bus topology
	  prevents it from using max possible rate.
 Doing transfers to different devices is not supported. 
 FIXME: Should we allow i3c masters to override these values? 
	
	  We silently ignore failures here. The bus should keep working
	  correctly even if one or more i2c devices are not registered.
  i3c_master_queue_ibi() - Queue an IBI
  @dev: the device this IBI is coming from
  @slot: the IBI slot used to store the payload
  Queue an IBI to the controller workqueue. The IBI handler attached to
  the dev will be called from a workqueue context.
  i3c_generic_ibi_free_pool() - Free a generic IBI pool
  @pool: the IBI pool to free
  Free all IBI slots allated by a generic IBI pool.
	
	  If the number of freed slots is not equal to the number of allocated
	  slots we have a leak somewhere.
  i3c_generic_ibi_alloc_pool() - Create a generic IBI pool
  @dev: the device this pool will be used for
  @req: IBI setup request describing what the device driver expects
  Create a generic IBI pool based on the information provided in @req.
  Return: a valid IBI pool in case of success, an ERR_PTR() otherwise.
  i3c_generic_ibi_get_free_slot() - Get a free slot from a generic IBI pool
  @pool: the pool to query an IBI slot on
  Search for a free slot in a generic IBI pool.
  The slot should be returned to the pool using i3c_generic_ibi_recycle_slot()
  when it's no longer needed.
  Return: a pointer to a free slot, or NULL if there's no free slot available.
  i3c_generic_ibi_recycle_slot() - Return a slot to a generic IBI pool
  @pool: the pool to return the IBI slot to
  @s: IBI slot to recycle
  Add an IBI slot back to its generic IBI pool. Should be called from the
  master driver struct_master_controller_ops->recycle_ibi() method.
  i3c_master_register() - register an I3C master
  @master: master used to send frames on the bus
  @parent: the parent device (the one that provides this I3C master
 	    controller)
  @ops: the master controller operations
  @secondary: true if you are registering a secondary master. Will return
 	       -ENOTSUPP if set to true since secondary masters are not yet
 	       supported
  This function takes care of everything for you:
  - creates and initializes the I3C bus
  - populates the bus with static I2C devs if @parent->of_node is not
    NULL
  - registers all I3C devices added by the controller during bus
    initialization
  - registers the I2C adapter and all I2C devices
  Return: 0 in case of success, a negative error code otherwise.
 We do not support secondary masters yet. 
	
	  Expose our I3C bus as an I2C adapter so that I2C devices are exposed
	  through the I2C subsystem.
	
	  We're done initializing the bus and the controller, we can now
	  register I3C devices discovered during the initial DAA.
  i3c_master_unregister() - unregister an I3C master
  @master: master used to send frames on the bus
  Basically undo everything done in i3c_master_register().
  Return: 0 in case of success, a negative error code otherwise.
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) 2018 Cadence Design Systems Inc.
  Author: Boris Brezillon <boris.brezillon@bootlin.com>
	
	  First make sure that all transactions (block of transfers separated
	  by a STOP marker) fit in the FIFOs.
 RR0[7:1] = addr[6:0] 
 RR0[15:13] = addr[9:7] 
 RR0[0] = ~XOR(addr[6:0]) 
 Only update PRESCL_CTRL1 if the I3C SCL limitation has changed. 
 Configure PP_LOW to meet I3C slave limitations. 
 Disable I3C master before updating PRESCL_CTRL1. 
 Prepare RR slots before launching DAA. 
	
	  Clear all retaining registers filled during DAA. We already
	  have the addressed assigned to them in the addrs array.
	
	  Clear slots that ended up not being used. Can be caused by I3C
	  device creation failure or when the I3C device was already known
	  by the system but with a different address (in this case the device
	  already has a slot and does not need a new one).
 Unmask Hot-Join and Mastership request interrupts. 
 Every value greater than 3 is not valid. 
 CTLR_THD_DEL value is encoded. 
 Calculate OD and PP low. 
 Get an address for the master. 
	
	  Enable Hot-Join, and, when a Hot-Join request happens, disable all
	  events coming from this device.
	 
	  We will issue ENTDAA afterwards from the threaded IRQ handler.
	
	  Configure data hold delay based on device-specific data.
	 
	  MIPI I3C Specification 1.0 defines non-zero minimal tHD_PP timing on
	  master output. This setting allows to meet this timing on master's
	  SoC outputs, regardless of PCB balancing.
	
	  FIXME: maybe we should report the FIFO OVF errors to the upper
	  layer.
 Consume data from the FIFO if it's not been done already. 
 sentinel  },
 Device ID0 is reserved to describe this master. 
 SPDX-License-Identifier: GPL-2.0
  Silvaco dual-role I3C master driver
  Copyright (C) 2020 Silvaco
  Author: Miquel RAYNAL <miquel.raynal@bootlin.com>
  Based on a work from: Conor Culhane <conor.culhane@silvaco.com>
 Master Mode Registers 
 This parameter depends on the implementation and may be tuned 
  struct svc_i3c_master - Silvaco I3C Master structure
  @base: I3C master controller
  @dev: Corresponding device
  @regs: Memory mapping
  @free_slots: Bit array of available slots
  @addrs: Array containing the dynamic addresses of each attached device
  @descs: Array of descriptors, one per attached device
  @hj_work: Hot-join work
  @ibi_work: IBI work
  @irq: Main interrupt
  @pclk: System clock
  @fclk: Fast clock (bus)
  @sclk: Slow clock (other events)
  @xferqueue: Transfer queue structure
  @xferqueue.list: List member
  @xferqueue.cur: Current ongoing transfer
  @xferqueue.lock: Queue lock
  @ibi: IBI structure
  @ibi.num_slots: Number of slots available in @ibi.slots
  @ibi.slots: Available IBI slots
  @ibi.tbq_slot: To be queued IBI slot
  @ibi.lock: IBI lock
 Prevent races between transfers 
 Prevent races within IBI handlers 
  struct svc_i3c_i2c_dev_data - Device specific data
  @index: Index in the master tables corresponding to this device
  @ibi: IBI slot index in the master structure
  @ibi_pool: IBI pool associated to this device
	
	  This delay is necessary after the emission of a stop, otherwise eg.
	  repeating IBIs do not get detected. There is a note in the manual
	  about it, stating that the stop condition might not be settled
	  correctly if a start condition follows too rapidly.
 Acknowledge the incoming interrupt with the AUTOIBI mechanism 
 Wait for IBIWON, should take approximately 100us 
 Clear the interrupt status 
 Handle the critical responses to IBI's 
	
	  If an error happened, we probably got interrupted and the exchange
	  timedout. In this case we just drop everything, emit a stop and wait
	  for the slave to interrupt again.
 Handle the non critical tasks 
 Clear the interrupt status 
 Handle the interrupt in a non atomic context 
 Timings derivation 
	
	  Using I3C Push-Pull mode, target is 12.5MHz80ns period.
	  Simplest configuration is using a 50% duty-cycle of 40ns.
	
	  Using I3C Open-Drain mode, target is 4.17MHz240ns with a
	  duty-cycle tuned so that high levels are filetered out by
	  the 50ns filter (target being 40ns).
		
		  Using I2C Fm+ mode, target is 1MHz1000ns, the difference
		  between the high and low period does not really matter.
		
		  Using I2C Fm mode, target is 0.4MHz2500ns, with the same
		  constraints as the FM+ mode.
 Master core's registration 
 Disable master 
 Enterproceed with DAA 
		
		  Either one slave will send its ID, or the assignment process
		  is done.
			
			  We only care about the 48-bit provisional ID yet to
			  be sure a device does not nack an address twice.
			  Otherwise, we would just need to flush the RX FIFO.
 We do not care about the BCR and DCR yet 
				
				  All devices received and acked they dynamic
				  address, this is the natural end of the DAA
				  procedure.
				
				  A slave device nacked the address, this is
				  allowed only once, DAA will be stopped and
				  then resumed. The same device is supposed to
				  answer again immediately and shall ack the
				  address this time.
 Wait for the slave to be ready to receive its address 
 Give the slave device a suitable dynamic address 
 Create the IBIRULES register for both cases 
 IBI rules cannot be applied to devices with MSb=1 
 IBI rules cannot be applied to devices with MSb=1 
 Device list cannot be handled by hardware 
 No list can be properly handled, return an error 
 Pick the first list that can be handled by hardware, randomly 
 Register all devices who participated to the core 
 Configure IBI auto-rules 
		
		  The last byte to be sent over the bus must either have the
		  "end" bit set or be written in MWDATABE.
 No software support for CCC commands targeting more than one slave 
 Broadcasted message 
 Directed message 
 Clear pending warnings 
 Set RX and TX tigger levels, flush FIFOs 
 Register the master 
 sentinel  },
 SPDX-License-Identifier: GPL-2.0
  Copyright (c) 2018 Synopsys, Inc. andor its affiliates.
  Author: Vitor Soares <vitor.soares@synopsys.com>
 For now don't support Hot-Join 
 Prepare DAT before launching DAA. 
 Information regarding the FIFOsQUEUEs depth 
 SPDX-License-Identifier: BSD-3-Clause
  Copyright (c) 2020, MIPI Alliance, Inc.
  Author: Nicolas Pitre <npitre@baylibre.com>
  I3C HCI v1.0v1.1 Command Descriptor Handling
  Address Assignment Command
  Immediate Data Transfer Command
  Regular Data Transfer Command
  Combo Transfer (Write + WriteRead) Command
  Internal Control Command
 Data Transfer Speed and Mode 
 we consumed all the data with the cmd descriptor 
 this should never happen 
 we use an Immediate Data Transfer Command 
 we use a Regular Data Transfer Command 
 we use an Immediate Data Transfer Command 
 we use a Regular Data Transfer Command 
 we use an Immediate Data Transfer Command 
 we use a Regular Data Transfer Command 
	
	  Simple for now: we allocate a temporary DAT entry, do a single
	  DAA, register the device which will allocate its own DAT entry
	  via the core callback, then free the temporary DAT entry.
	  Loop until there is no more devices to assign an address to.
	  Yes, there is room for improvements.
 no more devices to be assigned 
		
		  TODO: Extend the subsystem layer to allow for registering
		  new device and provide BCRDCRPID at the same time.
 SPDX-License-Identifier: BSD-3-Clause
  Copyright (c) 2020, MIPI Alliance, Inc.
  Author: Nicolas Pitre <npitre@baylibre.com>
  I3C HCI v2.0 Command Descriptor Handling
  Note: The I3C HCI v2.0 spec is still in flux. The code here will change.
  Unified Data Transfer Command
  Address Assignment Command
 we consumed all the data with the cmd descriptor 
 we consumed all the data with the cmd descriptor 
 no more devices to be assigned 
		
		  TODO: Extend the subsystem layer to allow for registering
		  new device and provide BCRDCRPID at the same time.
 SPDX-License-Identifier: BSD-3-Clause
  Copyright (c) 2020, MIPI Alliance, Inc.
  Author: Nicolas Pitre <npitre@baylibre.com>
 Extended Capability Header 
 ought to go in a table if this grows too much 
 skip header 
 TODO: will be needed when I3C core does more than SDR 
 skip header 
 remember auto-command register location for later use 
 hci->schedcmd_regs = base; 
 hci->NCM_regs = base; 
 TODO confirm size 
 reset the FPGA 
 some arbitrary limit 
 SPDX-License-Identifier: BSD-3-Clause
  Copyright (c) 2020, MIPI Alliance, Inc.
  Author: Nicolas Pitre <npitre@baylibre.com>
  Note: The I3C HCI v2.0 spec is still in flux. The IBI support is based on
  v1.x of the spec and v2.0 will likely be split out.
  Software Parameter Values (somewhat arb itrary for now).
  Some of them could be determined at run time eventually.
 max: 8 
 max: 255 
 max: 8 
 max: 255 
 max: 256 bytes equivalent 
 max: 1023 
  Ring Header Preamble
 Preamble Section Size 
 Ring Header Size 
 HC Max Header Count 
 Driver Max Header Count 
  Ring Header (Per-Ring Bundle)
 CommandResponse Ring 
 Ring Scatter Gather Support 
 Buffer Vs. List Pointer 
  Data Buffer Descriptor (in memory)
 Buffer Vs. List Pointer 
 Interrupt on Completion 
 trickery to avoid compiler warnings on 32-bit build targets 
 IBIs 
 For now we only use ring 0 
 store cmd descriptor 
 first word of Data Buffer Descriptor Structure 
 2nd and 3rd words of Data Buffer Descriptor Structure 
 remember corresponding xfer struct 
 remember corresponding ringentry for this xfer structure 
		
		  We may update the hardware view of the enqueue pointer
		  only if we didn't reach its dequeue pointer.
 the ring is full 
 take care to update the hardware enqueue pointer atomically 
 stop the ring 
		
		  We're deep in it if ever this condition is ever met.
		  Hardware might still be writing to memory, etc.
		  Better suspend the world than risking silent corruption.
		
		  At the time the abort happened, the xfer might have
		  completed already. If not then replace corresponding
		  descriptor entries with a no-op.
 store no-op cmd descriptor 
 disassociate this xfer struct 
 and unmap it 
 restart the ring 
 TODO: do something about it? 
 take care to update the software dequeue pointer atomically 
 let's find all we can about this IBI 
 we no longer care 
 the address changed unexpectedly 
 validate what we've got 
 this IBI sequence is not yet complete 
 determine who this is for 
	
	  This ring model is not suitable for zero-copy processing of IBIs.
	  We have the data chunk ring wrap-around to deal with, meaning
	  that the payload might span multiple chunks beginning at the
	  end of the ring and wrap to the start of the ring. Furthermore
	  there is no guarantee that those chunks will be released in order
	  and in a timely manner by the upper driver. So let's just copy
	  them to a discrete buffer. In practice they're supposed to be
	  small anyway.
 copy first part of the payload 
 copy second part if any 
 we wrap back to the start and copy remaining data 
 submit it 
 take care to update the ibi dequeue pointer atomically 
 update the chunk pointer 
 and tell the hardware about freed chunks 
 SPDX-License-Identifier: BSD-3-Clause
  Copyright (c) 2020, MIPI Alliance, Inc.
  Author: Nicolas Pitre <npitre@baylibre.com>
  PIO Access Area
  Handy status bit combinations
	
	  Let's initialize data thresholds to half of the actual FIFO size.
	  The start thresholds aren't used (set to 0) as the FIFO is always
	  serviced before the corresponding command is queued.
 those are expressed as 2^[n+1), so just sub 1 if not 0 
 size is 2^(n+1) and threshold is 2^n i.e. already halved 
	
	  Let's raise an interrupt as soon as there is one free cmd slot
	  or one available response or IBI. For IBI data let's use half the
	  IBI queue size within allowed bounds.
 Disable all IRQs but allow all status bits 
 Always accept error interrupts (will be activated on first xfer) 
 bail out if FIFO hasn't reached the threshold value yet 
 extract data from FIFO 
 trailing data is retrieved upon response reception 
 extract data from FIFO 
		
		  There are trailing bytes in the last word.
		  Fetch it and extract bytes in an endian independent way.
		  Unlike the TX case, we must not write memory past the
		  end of the destination buffer.
 bail out if FIFO free space is below set threshold 
 we can fill up to that TX threshold 
 push data into the FIFO 
		
		  There are trailing bytes to send. We can simply load
		  them from memory as a word which will keep those bytes
		  in their proper place even on a BE system. This will
		  also get some bytes past the actual buffer but no one
		  should care as they won't be sent out.
 preserve word  to become partial 
 treat last word specially because of partial word issues 
			
			  Like in hci_pio_do_trailing_rx(), preserve original
			  word to be stored partially then store bytes it
			  in an endian independent way.
 let's pretend it is a prog error... any of them  
			
			  Response availability implies RX completion.
			  Retrieve trailing RX data if any.
			  Note that short reads are possible.
 we consumed data meant for next xfer 
 then process the RX list pointer 
		
		  We're about to give back ownership of the xfer structure
		  to the waiting instance. Make sure no reference to it
		  still exists.
		
		  Always process the data FIFO before sending the command
		  so needed TX data or RX space is available upfront.
		
		  Then queue our response request. This will also process
		  the response FIFO in case it got suddenly filled up
		  with results from previous commands.
		
		  Finally send the command.
		
		  And move on.
 link xfer instances together and initialize data count 
	
	  To safely dequeue a transfer request, it must be either entirely
	  processed, or not yet processed at all. If our request tail is
	  reachable from either the data or resp list that means the command
	  was submitted and not yet completed.
	
	  The command was completed, or wasn't yet submitted.
	  Unlink it from the que if the later.
 return true if we actually unqueued something 
	
	  Life is tough. We must invalidate the hardware state and
	  discard everything that is still queued.
 TODO: this ought to be more sophisticated eventually 
 this may happen when an error is signaled with ROC unset 
 dump states on programming errors 
 just bust out everything with pending responses for now 
 ... and half-way TX transfers if any 
 then reset the hardware 
 write the threshold reg only if it changes 
 determine our IBI queue threshold value 
 bail out if we don't have that amount of data ready 
 extract the data from the IBI port 
		
		  There are trailing bytes in the last word.
		  Fetch it and extract bytes in an endian independent way.
		  Unlike the TX case, we must not write past the end of
		  the destination buffer.
	
	  We have a new IBI. Try to set up its payload retrieval.
	  When returning true, the IBI data has to be consumed whether
	  or not we are set up to capture it. If we return true with
	  ibi->slot == NULL that means the data payload has to be
	  drained out of the IBI port and dropped.
 was the last segment: submit it and leave 
			
			  No slot but a non-zero count. This is the result
			  of some error and the payload must be drained.
			  This normally does not happen therefore no need
			  to be extra optimized here.
 try to move to the next segment right away 
 target address changed before last segment 
 SPDX-License-Identifier: BSD-3-Clause
  Copyright (c) 2020, MIPI Alliance, Inc.
  Author: Nicolas Pitre <npitre@baylibre.com>
  Device Characteristic Table
 SPDX-License-Identifier: BSD-3-Clause
  Copyright (c) 2020, MIPI Alliance, Inc.
  Author: Nicolas Pitre <npitre@baylibre.com>
  Core driver code with main interface to the I3C subsystem.
  Host Controller Capabilities and Operation Registers
 HCI Version (in BCD) 
 Hot-Join ACKNACK Control 
 DMAPIO Mode Selector 
 Include I3C Broadcast Address 
 Master Device Address 
 Dynamic Address is Valid 
 master handoff capable 
 endian selection possible 
 Core Reset 
 Cmd Sequence Underflow 
 HC Cancelled Reset 
 HC Internal Error 
 cascaded PIO interrupt 
 Device Address Table 
 Device Characteristics Table 
 PIO Offset 
 IBI Notify Control 
 Rejected Target Interrupt Request 
 Rejected Master Request Control 
 Rejected Hot-Join Control 
 the HC_CONTROL_RESUME bit is RW1C so just read and write back 
 located here rather than pio.c because needed bits are in core reg space 
 located here rather than dct.c because needed bits are in core reg space 
 silence the const qualifier warning with a cast 
 v1.0 does not have PIO cascaded notification bits 
 Validate HCI hardware version 
 known versions 
 version 1.0 
 version 1.1 
 version 2.0 
	
	  Now let's reset the hardware.
	  SOFT_RST must be clear before we write to it.
	  Then we must wait until it clears again.
 Disable all interrupts and allow all signal updates 
 Make sure our data ordering fits the host's 
 Select our command descriptor model 
 Try activating DMA operations first 
 If no DMA, try PIO 
 temporary for dev_printk's, to be replaced in i3c_master_register 
 SPDX-License-Identifier: BSD-3-Clause
  Copyright (c) 2020, MIPI Alliance, Inc.
  Author: Nicolas Pitre <npitre@baylibre.com>
  Device Address Table Structure
	DAT_0_I2C_DEVICE		W0_BIT_(31) 
	DAT_0_SIR_REJECT		W0_BIT_(13) 
	DAT_0_IBI_PAYLOAD		W0_BIT_(12) 
 use a bitmap for faster free slot search 
 clear them 
 default flags 
 SPDX-License-Identifier: GPL-2.0
 SOLOS_ATTR_RO(DspVersion)
 SOLOS_ATTR_RO(CommonHandshake)
 SOLOS_ATTR_RO(DeltACTATPds)
 SOLOS_ATTR_RO(DeltACTATPus)
         iphase.c: Device driver for Interphase ATM PCI adapter cards 
                    Author: Peter Wang  <pwang@iphase.com>            
		   Some fixes: Arnaldo Carvalho de Melo <acme@conectiva.com.br>
                   Interphase Corporation  <www.iphase.com>           
                               Version: 1.0                           
      This software may be used and distributed according to the terms
      of the GNU General Public License (GPL), incorporated herein by reference.
      Drivers based on this skeleton fall under the GPL and must retain
      the authorship (implicit copyright) notice.
      This program is distributed in the hope that it will be useful, but
      WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
      General Public License for more details.
      Modified from an incomplete driver for Interphase 5575 1KVC 1M card which 
      was originally written by Monalisa Agrawal at UNH. Now this driver 
      supports a variety of varients of Interphase ATM PCI (i)Chip adapter 
      card family (See www.iphase.comproductsClassSheet.cfm?ClassID=ATM) 
      in terms of PHY type, the size of control memory and the size of 
      packet memory. The following are the change log and history:
          Bugfix the Mona's UBR driver.
          Modify the basic memory allocation and dma logic.
          Port the driver to the latest kernel from 2.0.46.
          Complete the ABR logic of the driver, and added the ABR work-
              around for the hardware anormalies.
          Add the CBR support.
	  Add the flow control logic to the driver to allow rate-limit VC.
          Add 4K VC support to the board with 512K control memory.
          Add the support of all the variants of the Interphase ATM PCI 
          (i)Chip adapter cards including x575 (155M OC3 and UTP155), x525
          (25M UTP25) and x531 (DS3 and E3).
          Add SMP support.
      Support and updates available at: ftp:ftp.iphase.compubatm
static uint IADebugFlag =  IF_IADBG_ERR | IF_IADBG_CBR| IF_IADBG_INIT_ADAPTER
 IA_LIB 
 ia_hack_tcq 
 while 
 Get the next available descriptor number from TCQ 
 get system time 
 0x2  ) {
 Wait for 10 Micro sec 
 last descriptor 	 	   
 vcstatus->cnt 
 Wait for 10 Micro sec 
 state is idle 
 foundLockUp 
 if an ABR VC 
 Conversion of 24-bit cellrate (cellssec) to 16-bit floating point format.
  +----+----+------------------+-------------------------------+
  |  R | NZ |  5-bit exponent  |        9-bit mantissa         |
  +----+----+------------------+-------------------------------+
    R = reserved (written as 0)
    NZ = 0 if 0 cellssec; 1 otherwise
    if NZ = 1, rate = 1.mmmmmmmmm x 2^(eeeee) cellssec
 Number of bits in mantissa 
 Number of bits in exponent 
 Conversion of 16-bit floating point format to 24-bit cellrate (cellssec).
 FFRED initialization 
 sanity check 
 (2  (srv_p->nrm +1)) 
 i.e 2n = 2 << (n-1) 
 RFRED initialization 	
 IpAdjustTrafficParams 
 IaFFrednInsertCbrSched 
 Starting at an arbitrary location, place the entries into the table
 as smoothly as possible
 get modulo
 If this is the first time, start the table loading for this connection
 as close to entryPoint as possible.
 Adding 2 helps to prevent clumping
 Wrap if necessary
 Point to the next location
 in the table that would be  smoothest
 get new integer part
 calc new fractional part
 Continuously check around this ideal value until a null
 location is encountered.
set index and read in value
 If another VC at this location, we have to keep looking
 Wrap if necessary
 set table index
 Wrap if necessary
 set table index and read in value
 while 
 Move this VCI number into this location of the CBR Sched table.
 while  
 IaFFrednCbrEnable 
	
	  Issue a command to enable writes to the NOVRAM
	
	  issue the write command
	 
	  Send the data, starting with D15, then D14, and so on for 16 bits
	
	  disable writes again
	
	  Read the first bit that was clocked with the falling edge of the
	  the last command data clock
	
	  Now read the rest of the bits, the next bit read is D14, then D13,
	  and so on.
 Enable RSOP loss of signal interrupt. 
 Clear error counters. 
 Clear "PMCTST" in master test register. 
 __SNMP__ 
 IA_LIB END 
 pad end of buffer with blanks 
 close xdump(... 
 CONFIG_ATM_IA_DEBUG 
-- some utilities and memory allocation stuff will come here -------------  
 regval = readl((u32)ia_cmds->maddr);
----------------------------- Receiving side stuff --------------------------  
 closing the receiving size will cause too many excp int   
u_short ptr;  
 TODO: update exception stat
 pwang_test
 mask 1st 3 bits to get the actual descno.   
 update the read pointer  - maybe we shud do this in the end  
	 get the buffer desc entry.  
		update stuff. - doesn't seem to be any update necessary  
 make the ptr point to the corresponding buffer desc entry   
 might want to check the status bits for errors   
	  
		build DLE.	  
 pwang_test
 Build the DLE structure   
 We don't know this do we ??   
 shud take care of wrap around here too.   
 Increment transaction counter   
 do something   
	 Basically recvd an interrupt for receiving a packet.  
	A descriptor would have been written to the packet complete   
	queue. Get all the descriptors and set up dma to move the   
	packets till the packet complete queue is empty..  
 probably need to handle the exception queue also.   
	 need to handle the raw incoming cells. This deepnds on   
	whether we have programmed to receive the raw cells or not.  
   free all the dles done, that is just update our own dle read pointer   
   DMA is done, just get all the recevie buffers from the rx dma queue  
	and push them up to the higher layer protocol. Also free the desc  
 free the DMAed skb   
 no VCC related housekeeping done as yet. lets see   
 get real pkt length  pwang_test
 Display the packet   
   if the interrupts are masked because there were no free desc available,  
 RX_EXCP_RCVD | RX_PKT_RCVD),
	 Make only this VCI in the vc table valid and let all   
 mask the last 6 bits and OR it with 3 for 1K VCs   
	 Also keep a list of open rx vcs so that we can attach them with  
 for UBR  later may need to add CBR logic 
    spin_lock_init(&iadev->rx_lock); 
 Allocate 4k bytes - more aligned than needed (4k boundary) 
	 the end of the dle q points to the entry after the last  
 write the upper 20 bits of the start address to rx list address register   
 We know this is 32bit bus addressed so the following is safe 
	 Receive side control memory map  
	   -------------------------------  
		Buffer descr	0x0000 (736 - 23K)  
		VP Table	0x5c00 (256 - 512)  
		Except q	0x5e00 (128 - 512)  
		Free buffer q	0x6000 (1K - 2K)  
		Packet comp q	0x6800 (1K - 2K)  
		Reass Table	0x7000 (1K - 2K)  
		VC Table	0x7800 (1K - 2K)  
		ABR VC Table	0x8000 (1K - 32K)  
 Base address for Buffer Descriptor Table   
 Set the buffer size register   
 Initialize each entry in the Buffer Descriptor Table   
 Fill the FREEQ with all the free descriptors.   
 Packet Complete Queue 
 Exception Queue 
 Load local copy of FREEQ and PCQ ptrs 
 just for check - no VP TBL   
 VP Table   
 writew(0x0b80, iadev->reass_reg+VP_LKUP_BASE);   
	 initialize VP Table for invalid VPIs  
		- I guess we can write all 1s or 0x000f in the entire memory  
		  space or something similar.  
 This seems to work and looks right to me too !!!   
 initialize Reassembly table to I don't know what ????   
		 shift the reassembly pointer by 3 + lower 3 bits of   
		vc_lkup_base register (=3 for 1K VCs) and the last byte   
		is those low 3 bits.   
		Shall program this later.  
 for invalid VCI   
 ABR VC table 
 Initialize other registers   
 VP Filter Register set for VC Reassembly only   
	 Packet Timeout Count  related Registers : 
	   Set packet timeout to occur in about 3 seconds
	   Set Packet Aging Interval count register to overflow in about 4 us
 initiate the desc_tble 
 to clear the interrupt status register - read it   
 Mask Register - clear it   
 Mode Register   
	The memory map suggested in appendix A and the coding for it.   
	Keeping it around just in case we change our mind later.  
		Buffer descr	0x0000 (128 - 4K)  
		UBR sched	0x1000 (1K - 4K)  
		UBR Wait q	0x2000 (1K - 4K)  
		Commn queues	0x3000 Packet Ready, Trasmit comp(0x3100)  
					(128 - 256) each  
		extended VC	0x4000 (1K - 8K)  
		ABR sched	0x6000	and ABR wait queue (1K - 2K) each  
		CBR sched	0x7000 (as needed)  
		VC table	0x8000 (1K - 32K)  
 free the DMAed skb  
 Revenge of the 2 dle (skb + trailer) used in ia_pkt_tx() 
 Hold the rate-limited skb for flow control 
 find pcr 
	 store the most significant 4 bits of vci as the last 4 bits   
		of first part of atm header.  
	   store the last 12 bits of vci as first 12 bits of the second  
		part of the atm header.  
 check the following for different traffic classes   
 Allocate 4k (boundary aligned) bytes 
 write the upper 20 bits of the start address to tx list address register   
	  
	   Transmit side control memory map  
	   --------------------------------    
	 Buffer descr 	0x0000 (128 - 4K)  
	 Commn queues	0x1000	Transmit comp, Packet ready(0x1400)   
					(512 - 1K) each  
					TCQ - 4K, PRQ - 5K  
	 CBR Table 	0x1800 (as needed) - 6K  
	 UBR Table	0x3000 (1K - 4K) - 12K  
	 UBR Wait queue	0x4000 (1K - 4K) - 16K  
	 ABR sched	0x5000	and ABR wait queue (1K - 2K) each  
				ABR Tbl - 20K, ABR Wq - 22K   
	 extended VC	0x6000 (1K - 8K) - 24K  
	 VC Table	0x8000 (1K - 32K) - 32K  
	  
	Between 0x2000 (8K) and 0x3000 (12K) there is 4K space left for VBR Tbl  
	and Wait q, which can be allotted later.  
 Buffer Descriptor Table Base address   
 initialize each entry in the buffer descriptor table   
 Communication Queues base address   
 Transmit Complete Queue   
 Fill the TCQ with all the free descriptors.   
 Packet Ready Queue   
 Load local copy of PRQ and TCQ ptrs 
 Just for safety initializing the queue to have desc 1 always   
 Fill the PRQ with all the free descriptors.   
 desc 1 in all entries   
 CBR Table   
 for 1K VC board, CBR_PTR_BASE is 0 
 Charlie's logic is wrong ? 
 CBR_PTR;
 Initialize the CBR Schedualing Table 
 UBR scheduling Table and wait queue   
	 initialize all bytes of UBR scheduler table and wait queue to 0   
		- SCHEDSZ is 1K (# of entries).  
		- UBR Table size is 4K  
		- UBR wait queue is 4K  
	   since the table and wait queues are contiguous, all the bytes   
	   can be initialized by one memeset.
 ABR scheduling Table(0x5000-0x57ff) and wait queue(0x5800-0x5fff)  
	 initialize all bytes of ABR scheduler table and wait queue to 0   
		- SCHEDSZ is 1K (# of entries).  
		- ABR Table size is 2K  
		- ABR wait queue is 2K  
	   since the table and wait queues are contiguous, all the bytes   
	   can be initialized by one memeset.
 Other Initialization   
 Max Rate Register   
 Set Idle Header Reigisters to be sure   
 Program ABR UBR Priority Register  as  PRI_ABR_UBR_EQUAL 
 RM Cell Protocol ID and Message Type   
 Mode Register 1   
 Mode Register 0   
 Interrupt Status Register - read to clear   
 Interrupt Mask Reg- don't mask TCQ_NOT_EMPTY interrupt generation   
 do something   
 Clear this bit by writing a 1 to it.   
 do something  
----------------------------- entries --------------------------------  
	 The device has been identified and registered. Now we read   
	   necessary configuration info like memory base address,   
 find mapping size of board   
 enable bus mastering 
	  
	  Delay at least 1us before doing any mem accesses (how 'bout 10?)  
 mapping the physical address to a virtual address in address space   
 ioremap is not resolved ???   
 filling the iphase dev structure   
 Bus Interface Control Registers   
 Segmentation Control Registers   
 Reassembly Control Registers   
 Front end DMA control registers   
 RAM - Segmentation RAm and Reassembly RAM   
 lets print out the above   
 lets try reading the MAC address   
 reset SAR   
 @@@ should release IRQ on error   
 enabling memory + master   
	 Maybe we should reset the front end, initialize Bus Interface Control   
 shud be removed l8r   
 resolve compiler complaint 
 Get iadev->carrier_detect status 
 reset reass table
 reset vc table
 Drain the packets
 Device dependent initialization   
 Copy real rfred registers into the local copy 
 Copy real ffred registers into the local copy 
	 Get a descriptor number from our free descriptor queue  
	   We get the descr number from the TCQ now, since I am using  
	   the TCQ as a free buffer queue. Initially TCQ will be   
	   initialized with all the descriptors and is hence, full.  
 return SUCCESS 
 remember the desc and vcc mapping 
	 Put the descriptor number in the packet ready queue  
		and put the updated write pointer in the DLE field   
	 Figure out the exact length of the packet and padding required to 
 Put the packet in a tx buffer    
big endian 
 not needed - dummy bytes   
 Display the packet   
 Build the buffer descriptor   
 points to the corresponding entry   
 Huh ? p.115 of users guide describes this as a read-only register 
 Build the DLE structure   
 wr_ptr->bytes = swap_byte_order(total_len); didn't seem to affect?? 
 hw bug - DLEs of 0x2d, 0x2e, 0x2f cause DMA lockup 
 end is not to be used for the DLE q   
 Build trailer dle 
 end is not to be used for the DLE q 
 Increment transaction counter   
 add flow control logic  
 vcc->tx_quota = 3  iavcc->saved_tx_quota  4;
 Disable phy interrupts 
 De-register device   
 SPDX-License-Identifier: GPL-2.0-only
  nicstar.c
  Device driver supporting CBR for IDT 7720177211 "NICStAR" based cards.
  IMPORTANT: The included file nicstarmac.c was NOT WRITTEN BY ME.
             It was taken from the frle-0.22 device driver.
             As the file doesn't have a copyright notice, in the file
             nicstarmac.copyright I put the copyright notice from the
             frle-0.22 device driver.
             Some code is based on the nicstar driver by M. Welsh.
  Author: Rui Prior (rprior@inescn.pt)
  PowerPC support by Jay Talbott (jay_talbott@mcg.mot.com) April 1999
  (C) INESC 1999
  IMPORTANT INFORMATION
  There are currently three types of spinlocks:
  1 - Per card interrupt spinlock (to protect structures and such)
  2 - Per SCQ scq spinlock
  3 - Per card resource spinlock (to access registers, etc.)
  These must NEVER be grabbed in reverse order.
 Header files 
 CONFIG_ATM_NICSTAR_USE_SUNI 
 CONFIG_ATM_NICSTAR_USE_IDT77105 
 Additional code 
 Configurable parameters 
 Do not touch these 
 TX_DEBUG 
 RX_DEBUG 
 GENERAL_DEBUG 
 EXTRA_DEBUG 
 Macros 
 Function declarations 
 Global variables 
 Functions 
 don't increment index 
 Stop everything 
 De-register device 
 Disable PCI device 
 Free up resources 
 terminate list 
 Initialized to remove compile warning 
 PHY_LOOPBACK 
 address must be dword aligned 
 SRAM read command 
 count range now is 0..3 instead of 1..4 
 to use increments of 4 
	 Note: DR# registers are the first 4 dwords in nicstar's memspace,
 NS_PCI_LATENCY 
 Clear timer overflow 
 Software reset 
 PHY reset 
 Sync UTOPIA with SAR clock 
 Detect PHY type 
 Clear an eventual pending interrupt 
 PHY_LOOPBACK 
 PHY_LOOPBACK 
 Determine SRAM size 
 card->rct_size == 16384 
 Initialize the nicstar eepromeprom stuff, for the MAC addr 
 Set the VPIVCI MSb mask to zero so we can receive OAM cells 
 Initialize TSQ 
 Initialize RSQ 
 Initialize SCQ0, the only VBR SCQ used 
 These last two won't be used 
 but are initialized, just in case... 
 Initialize TSTs 
 Initialize RCT. AAL type is set on opening the VC. 
 RCQ_SUPPORT 
 Initialize buffer levels 
 To prevent push_rxbufs from enabling the interrupt 
 Pre-allocate some huge buffers 
 Allocate large buffers 
 Not used 
 Due to the implementation of push_rxbufs() this is 1, not 0 
 Test for strange behaviour which leads to crashes 
 Allocate small buffers 
 Not used 
 Test for strange behaviour which leads to crashes 
 Allocate iovec buffers 
 Configure NICStAR 
 (card->rct_size == 16384) 
 Register device 
 CONFIG_ATM_NICSTAR_USE_SUNI 
 CONFIG_ATM_NICSTAR_USE_IDT77105 
 Only enabled if RCQ_SUPPORT 
 Only enabled if ENABLE_TSQFIE 
 For variable rate SCQ vcc must be NULL 
 vcc must be != NULL 
 The handles passed must be pointers to the sk_buff containing the small
 BARF 
 save so we can unmap later 
 GENERAL_DEBUG 
 (!sm_addr) 
 buf_type == BUF_LG 
 (!lg_addr) 
 (buf_type == BUF_LG) 
 Transmit Status Indicator has been written to T. S. Queue 
 Incomplete CS-PDU has been transmitted 
 Transmit Status Queue 78 full 
 Timer overflow 
 PHY device interrupt signal active 
 Small Buffer Queue is full 
 Large Buffer Queue is full 
 Receive Status Queue is full 
 Complete CS-PDU received 
 Raw cell received 
 RCQ_SUPPORT 
		 NOTE: the following procedure may keep a raw cell pending until the
		   next interrupt. As this preliminary support is only meant to
 Small buffer queue is empty 
 Large buffer queue empty 
 Receive Status Queue is 78 full 
 target cell rate, and absolute value 
	int n = 0;		 Number of entries in the TST. Initialized to remove
	int frscdi = 0;		 Index of the SCD. Initialized to remove the compiler
				   warning. How I wish compilers were clever enough to
				   tell which variables can truly be used
 tx or rx vc already in use by another vcc 
	 NOTE: You are not allowed to modify an open connection's QOS. To change
	   that, remove the ATM_VF_PARTIAL flag checking. There may be other changes
 Check requested cell rate and availability of SCD 
 Open the connection in hardware 
 vcc->qos.aal == ATM_AAL0 
 RCQ_SUPPORT 
			 If the last entry is not a TSR, place one in the SCQ in order to
 Free all TST entries 
 remove all references to vcc before deleting it 
 RX_DEBUG 
	 It would be very complicated to keep the two TSTs synchronized while
	   assuring that writes are only made to the inactive TST. So, for now I
 Fill procedure 
 End of fill procedure 
 TBD flags, not CPU flags 
 Multiple of 48 
 (vcc->qos.aal == ATM_AAL0) 
 i.e., 48 bytes 
 Payload type 1 - end of pdu 
 Force the VPIVCI to be the same as in VCC struct 
 flag indicating at least on entry was serviced 
 At most two empty, as stated in the 77201 errata 
 Skip the one or two possible empty entries 
 already increased by 1 
 Rebuild the header 
 To reach this point, the AAL layer can only be AAL5 
 No buffers in the queue 
		 IMPORTANT: a pointer to the sk_buff containing the small or large
		   buffer is stored as iovec base, NOT a pointer to the
 NS_PRV_IOVCNT(iovb) >= 2 
 EXTRA_DEBUG 
 This works correctly regardless of the endianness of the host 
 By this point we (hopefully) have a complete SDU without errors. 
 Just a small buffer 
 skb points to a small buffer 
 One small plus one large buffer 
 skb points to a large buffer 
 len > NS_SMBUFSIZE, the usual case 
 Must push a huge buffer 
 No buffers in the queue 
 Copy the small buffer to the huge buffer 
 Free the small buffer 
 Copy all large buffers to the huge buffer and free them 
 EXTRA_DEBUG 
 Dump 25.6 Mbps PHY registers 
	 Now there's a 25.6 Mbps PHY driver this code isn't needed. I left it
 0 - Dump 25.6 Mbps PHY registers 
 Dump TST 
 0 
 a long is the same size as a pointer or bigger 
 EXTRA_DEBUG 
 Probably it isn't worth spinning 
 SPDX-License-Identifier: GPL-2.0-or-later
  Madge Horizon ATM Adapter driver.
  Copyright (C) 1995-1999  Madge Networks Ltd.
  IMPORTANT NOTE: Madge Networks no longer makes the adapters
  supported by this driver and makes no commitment to maintain it.
  CREDITS
  Driver and documentation by:
  Chris Aston        Madge Networks
  Giuliano Procida   Madge Networks
  Simon Benham       Madge Networks
  Simon Johnson      Madge Networks
  Various Others     Madge Networks
  Some inspiration taken from other drivers by:
  Alexandru Cucos    UTBv
  Kari Mettinen      University of Helsinki
  Werner Almesberger EPFL LRC
  Theory of Operation
  I Hardware, detection, initialisation and shutdown.
  1. Supported Hardware
  This driver should handle all variants of the PCI Madge ATM adapters
  with the Horizon chipset. These are all PCI cards supporting PIO, BM
  DMA and a form of MMIO (registers only, not internal RAM).
  The driver is only known to work with SONET and UTP Horizon Ultra
  cards at 155Mbs. However, code is in place to deal with both the
  original Horizon and 25Mbs operation.
  There are two revisions of the Horizon ASIC: the original and the
  Ultra. Details of hardware bugs are in section III.
  The ASIC version can be distinguished by chip markings but is NOT
  indicated by the PCI revision (all adapters seem to have PCI rev 1).
  I believe that:
  Horizon       => Collage  25 PCI Adapter (UTP and STP)
  Horizon Ultra => Collage 155 PCI Client (UTP or SONET)
  Ambassador x  => Collage 155 PCI Server (completely different)
  Horizon (25Mbs) is fitted with UTP and STP connectors. It seems to
  have a Madge B154 plus glue logic serializer. I have also found a
  really ancient version of this with slightly different glue. It
  comes with the revision 0 (140-025-01) ASIC.
  Horizon Ultra (155Mbs) is fitted with either a Pulse Medialink
  output (UTP) or an HP HFBR 5205 output (SONET). It has either
  Madge's SAMBA framer or a SUNI-lite device (early versions). It
  comes with the revision 1 (140-027-01) ASIC.
  2. Detection
  All Horizon-based cards present with the same PCI Vendor and Device
  IDs. The standard Linux 2.2 PCI API is used to locate any cards and
  to enable bus-mastering (with appropriate latency).
  ATM_LAYER_STATUS in the control register distinguishes between the
  two possible physical layers (25 and 155). It is not clear whether
  the 155 cards can also operate at 25Mbps. We rely on the fact that a
  card operates at 155 if and only if it has the newer Horizon Ultra
  ASIC.
  For 155 cards the two possible framers are probed for and then set
  up for loop-timing.
  3. Initialisation
  The card is reset and then put into a known state. The physical
  layer is configured for normal operation at the appropriate speed;
  in the case of the 155 cards, the framer is initialised with
  line-based timing; the internal RAM is zeroed and the allocation of
  buffers for RX and TX is made; the Burnt In Address is read and
  copied to the ATM ESI; various policy settings for RX (VPI bits,
  unknown VCs, oam cells) are made. Ideally all policy items should be
  configurable at module load (if not actually on-demand), however,
  only the vpi vs vci bit allocation can be specified at insmod.
  4. Shutdown
  This is in response to module_cleaup. No VCs are in use and the card
  should be idle; it is reset.
  II Driver software (as it should be)
  0. Traffic Parameters
  The traffic classes (not an enumeration) are currently: ATM_NONE (no
  traffic), ATM_UBR, ATM_CBR, ATM_VBR and ATM_ABR, ATM_ANYCLASS
  (compatible with everything). Together with (perhaps only some of)
  the following items they make up the traffic specification.
  struct atm_trafprm {
    unsigned char traffic_class; traffic class (ATM_UBR, ...)
    int           max_pcr;       maximum PCR in cells per second
    int           pcr;           desired PCR in cells per second
    int           min_pcr;       minimum PCR in cells per second
    int           max_cdv;       maximum CDV in microseconds
    int           max_sdu;       maximum SDU in bytes
  };
  Note that these denote bandwidth available not bandwidth used; the
  possibilities according to ATMF are:
  Real Time (cdv and max CDT given)
  CBR(pcr)             pcr bandwidth always available
  rtVBR(pcr,scr,mbs)   scr bandwidth always available, up to pcr at mbs too
  Non Real Time
  nrtVBR(pcr,scr,mbs)  scr bandwidth always available, up to pcr at mbs too
  UBR()
  ABR(mcr,pcr)         mcr bandwidth always available, up to pcr (depending) too
  mbs is max burst size (bucket)
  pcr and scr have associated cdvt values
  mcr is like scr but has no cdtv
  cdtv may differ at each hop
  Some of the above items are qos items (as opposed to traffic
  parameters). We have nothing to do with qos. All except ABR can have
  their traffic parameters converted to GCRA parameters. The GCRA may
  be implemented as a (real-number) leaky bucket. The GCRA can be used
  in complicated ways by switches and in simpler ways by end-stations.
  It can be used both to filter incoming cells and shape out-going
  cells.
  ATM Linux actually supports:
  ATM_NONE() (no traffic in this direction)
  ATM_UBR(max_frame_size)
  ATM_CBR(maxmin_pcr, max_cdv, max_frame_size)
  0 or ATM_MAX_PCR are used to indicate maximum available PCR
  A traffic specification consists of the AAL type and separate
  traffic specifications for either direction. In ATM Linux it is:
  struct atm_qos {
  struct atm_trafprm txtp;
  struct atm_trafprm rxtp;
  unsigned char aal;
  };
  AAL types are:
  ATM_NO_AAL    AAL not specified
  ATM_AAL0      "raw" ATM cells
  ATM_AAL1      AAL1 (CBR)
  ATM_AAL2      AAL2 (VBR)
  ATM_AAL34     AAL34 (data)
  ATM_AAL5      AAL5 (data)
  ATM_SAAL      signaling AAL
  The Horizon has support for AAL frame types: 0, 34 and 5. However,
  it does not implement AAL 34 SAR and it has a different notion of
  "raw cell" to ATM Linux's (48 bytes vs. 52 bytes) so neither are
  supported by this driver.
  The Horizon has limited support for ABR (including UBR), VBR and
  CBR. Each TX channel has a bucket (containing up to 31 cell units)
  and two timers (PCR and SCR) associated with it that can be used to
  govern cell emissions and host notification (in the case of ABR this
  is presumably so that RM cells may be emitted at appropriate times).
  The timers may either be disabled or may be set to any of 240 values
  (determined by the clock crystal, a fixed (?) per-device divider, a
  configurable divider and a configurable timer preload value).
  At the moment only UBR and CBR are supported by the driver. VBR will
  be supported as soon as ATM for Linux supports it. ABR support is
  very unlikely as RM cell handling is completely up to the driver.
  1. TX (TX channel setup and TX transfer)
  The TX half of the driver owns the TX Horizon registers. The TX
  component in the IRQ handler is the BM completion handler. This can
  only be entered when tx_busy is true (enforced by hardware). The
  other TX component can only be entered when tx_busy is false
  (enforced by driver). So TX is single-threaded.
  Apart from a minor optimisation to not re-select the last channel,
  the TX send component works as follows:
  Atomic test and set tx_busy until we succeed; we should implement
  some sort of timeout so that tx_busy will never be stuck at true.
  If no TX channel is set up for this VC we wait for an idle one (if
  necessary) and set it up.
  At this point we have a TX channel ready for use. We wait for enough
  buffers to become available then start a TX transmit (set the TX
  descriptor, schedule transfer, exit).
  The IRQ component handles TX completion (stats, free buffer, tx_busy
  unset, exit). We also re-schedule further transfers for the same
  frame if needed.
  TX setup in more detail:
  TX open is a nop, the relevant information is held in the hrz_vcc
  (vcc->dev_data) structure and is "cached" on the card.
  TX close gets the TX lock and clears the channel from the "cache".
  2. RX (Data Available and RX transfer)
  The RX half of the driver owns the RX registers. There are two RX
  components in the IRQ handler: the data available handler deals with
  fresh data that has arrived on the card, the BM completion handler
  is very similar to the TX completion handler. The data available
  handler grabs the rx_lock and it is only released once the data has
  been discarded or completely transferred to the host. The BM
  completion handler only runs when the lock is held; the data
  available handler is locked out over the same period.
  Data available on the card triggers an interrupt. If the data is not
  suitable for our existing RX channels or we cannot allocate a buffer
  it is flushed. Otherwise an RX receive is scheduled. Multiple RX
  transfers may be scheduled for the same frame.
  RX setup in more detail:
  RX open...
  RX close...
  III Hardware Bugs
  0. Byte vs Word addressing of adapter RAM.
  A design feature; see the .h file (especially the memory map).
  1. Bus Master Data Transfers (original Horizon only, fixed in Ultra)
  The host must not start a transmit direction transfer at a
  non-four-byte boundary in host memory. Instead the host should
  perform a byte, or a two byte, or one byte followed by two byte
  transfer in order to start the rest of the transfer on a four byte
  boundary. RX is OK.
  Simultaneous transmit and receive direction bus master transfers are
  not allowed.
  The simplest solution to these two is to always do PIO (never DMA)
  in the TX direction on the original Horizon. More complicated
  solutions are likely to hurt my brain.
  2. Loss of buffer on close VC
  When a VC is being closed, the buffer associated with it is not
  returned to the pool. The host must store the reference to this
  buffer and when opening a new VC then give it to that new VC.
  The host intervention currently consists of stacking such a buffer
  pointer at VC close and checking the stack at VC open.
  3. Failure to close a VC
  If a VC is currently receiving a frame then closing the VC may fail
  and the frame continues to be received.
  The solution is to make sure any received frames are flushed when
  ready. This is currently done just before the solution to 2.
  4. PCI bus (original Horizon only, fixed in Ultra)
  Reading from the data port prior to initialisation will hang the PCI
  bus. Just don't do that then! We don't.
  IV To Do List
  . Timer code may be broken.
  . Allow users to specify buffer allocation split for TX and RX.
  . Deal once and for all with buggy VC close.
  . Handle interrupted andor non-blocking operations.
  . Change some macros to functions and move from .h to .c.
  . Try to limit the number of TX frames each VC may have queued, in
    order to reduce the chances of TX buffer exhaustion.
  . Implement VBR (bucket and timers not understood) and ABR (need to
    do RM cells manually); also no Linux support for either.
  . Implement QoS changes on open VCs (involves extracting parts of VC open
    and close into separate functions and using them to make changes).
 globals 
 access functions 
 Read  Write Horizon registers 
 Read  Write to a given address in Horizon buffer memory.
   Interrupts must be disabled between the address register and data
 wr_regl (dev, MEM_WR_ADDR_REG_OFF, (u32) addr);
 wr_regl (dev, MEM_RD_ADDR_REG_OFF, (u32) addr);
 specialised access functions 
 RX 
 TX 
 Update or query one configuration parameter of a particular channel. 
 dump functions 
 VPIVCI <-> (RX) channel conversions 
 RX channels are 10 bit integers, these fns are quite paranoid 
 decode RX queue entries 
 Cell Transmit Rate Values
  the cell transmit rate (cells per sec) can be set to a variety of
  different values by specifying two parameters: a timer preload from
  1 to 16 (stored as 0 to 15) and a clock divider (2 to the power of
  an exponent from 0 to 14; the special value 15 disables the timer).
  cellrate = baserate  (preload  2^divider)
  The maximum cell rate that can be specified is therefore just the
  base rate. Halving the preload is equivalent to adding 1 to the
  divider and so values 1 to 8 of the preload are redundant except
  in the case of a maximal divider (14).
  Given a desired cell rate, an algorithm to determine the preload
  and divider is:
  a) x = baserate  cellrate, want p  2^d = x (as far as possible)
  b) if x > 16  2^14 then set p = 16, d = 14 (min rate), done
     if x <= 16 then set p = x, d = 0 (high rates), done
  c) now have 16 < x <= 2^18, or 1 < x16 <= 2^14 and we want to
     know n such that 2^(n-1) < x16 <= 2^n, so slide a bit until
     we find the range (n will be between 1 and 14), set d = n
  d) Also have 8 < x2^n <= 16, so set p nearest x2^n
  The algorithm used below is a minor variant of the above.
  The base rate is derived from the oscillator frequency (Hz) using a
  fixed divider:
  baserate = freq  32 in the case of some Unknown Card
  baserate = freq  8  in the case of the Horizon        25
  baserate = freq  8  in the case of the Horizon Ultra 155
  The Horizon cards have oscillators and base rates as follows:
  Card               Oscillator  Base Rate
  Unknown Card       33 MHz      1.03125 MHz (33 MHz = PCI freq)
  Horizon        25  32 MHz      4       MHz
  Horizon Ultra 155  40 MHz      5       MHz
  The following defines give the base rates in Hz. These were
  previously a factor of 100 larger, no doubt someone was using
  cps100.
 d is an exponent
 p ranges from 1 to a power of 2
 note: rounding the rate down means rounding 'p' up
 br_exp and br_man are used to avoid overflowing (cmaxp2^d) in
 the tests below. We could think harder about exact possibilities
 of failure...
 avoid div by zero
 (br >>br_exp) <<br_exp == br and
 br_exp <= CR_MAXPEXP+CR_MIND
 Equivalent to: B <= (c << (MAXPEXP+MIND))
 take care of rounding
 but p must be non-zero
 but p must be non-zero
 round_up 
 but p must be non-zero
 at this point we have
 d == MIND and (c << (MAXPEXP+MIND)) < B
 Equivalent to: B <= (c << (MAXPEXP+d))
 c << (MAXPEXP+d-1) < B <= c << (MAXPEXP+d)
 1 << (MAXPEXP-1) < B2^dc <= 1 << MAXPEXP
 MAXP2 < Bc2^d <= MAXP
 take care of rounding
 round_up 
 at this point we have
 d == MAXD and (c << (MAXPEXP+MAXD)) < B
 but we cannot go any higher
 take care of rounding
 paranoia
 actual rate is not returned
 should never happen as round_nearest always succeeds
 within tolerance
 intolerant, try rounding instead
 Listen on a VC 
 is there any guarantee that we don't get two simulataneous
 identical calls of this function from different processes? yes
 rate_lock
 u16?
 very serious error, should never occur
 clean up?
 Give back spare buffer
 should never occur
 but easy to recover from
 Channel is currently disabled so change its status to idle
 do we really need to save the flags again?
 rxer->rate = make_rate (qos->peak_cells);
 change vc rate for a given vc 
 free an skb (as per ATM device driver documentation) 
 cancel listen on a VC 
 I suppose this could happen once we deal with _NONE traffic properly
 XXX Is this all really necessary? We can rely on the rx_data_av
 handler to discard frames that remain queued for delivery. If the
 worry is that immediately reopening the channel (perhaps by a
 different process) may cause some data to be mis-delivered then
 there may still be a simpler solution (such as busy-waiting on
 rx_busy once the channel is disabled or before a new one is
 opened - does this leave any holes?). Arguably setting up and
 tearing down the TX and RX halves of each virtual circuit could
 most safely be done within ?x_busy protected regions.
 OK, current changes are that Simon's marker is disabled and we DO
 look for NULL rxer elsewhere. The code here seems flush frames
 and then remember the last dead cell belonging to the channel
 just disabled - the cell gets relinked at the next vc_open.
 However, when all VCs are closed or only a few opened there are a
 handful of buffers that are unusable.
 Does anyone feel like documenting spare_buffers properly?
 Does anyone feel like fixing this in a nicer way?
 Flush any data which is left in the channel
 Change the rx channel port to something different to the RX
 channel we are trying to close to force Horizon to flush the rx
 channel read and write pointers.
 Select this RX channel. Flush doesn't seem to work unless we
 select an RX channel before hand
 Attempt to flush a frame on this RX channel
 Force Horizon to flush rx channel read and write pointers as before
 schedule RX transfers 
 Note on tail recursion: a GCC developer said that it is not likely
 to be fixed soon, so do not define TAILRECUSRIONWORKS unless you
 are sure it does as you may otherwise overflow the kernel stack.
 giving this fn a return value would help GCC, allegedly
 bytes waiting for RX transfer
 this code follows the TX code but (at the moment) there is only
 one region - the skb itself. I don't know if this will change,
 but it doesn't hurt to have the code here, disabled.
 start next transfer within same region
 rx_bytes == 0 -- we're between regions
 regions remaining to transfer
 start a new region
 rx_regions == 0
 that's all folks - end of frame
 dev->rx_iovec = 0;
 VC layer stats
 end of our responsibility
 note: writing RX_COUNT clears any interrupt condition
 allow another RX thread to start
 and we all bless optimised tail calls
 grrrrrrr!
 handle RX bus master complete events 
 clear interrupt condition on adapter
 (queue to) become the next TX thread 
 allow another TX thread to start 
 schedule TX transfers 
 bytes in current region waiting for TX transfer
 start next transfer within same region
 end of last region
 tx_bytes == 0 -- we're between regions
 regions remaining to transfer
 start a new region
 tx_regions == 0
 that's all folks - end of frame
 VC layer stats
 free the skb
 note: writing TX_COUNT clears any interrupt condition
 and we all bless optimised tail calls
 grrrrrrr!
 handle TX bus master complete events 
 clear interrupt condition on adapter
 move RX Q pointer to next item in circular buffer 
 called only from IRQ sub-handler
 handle RX data received by device 
 called from IRQ handler
 try to grab rx lock (not possible during RX bus mastering)
 lock is cleared if we fail now, ow after bus master completion
 (at least) bus-mastering breaks if we try to handle a
 zero-length frame, besides AAL5 does not support them
 if no vcc is assigned to this channel, we should drop the frame
 (is this what SIMONS etc. was trying to achieve?)
 remember this so we can push it later
 remember this so we can flush it later
 prepare socket buffer
 simple transfer
 dev->rx_regions = 0;
 dev->rx_iovec = 0;
 do the business
 do we count this?
 do we count this?
 do we count this?
 Wait update complete ? SPONG
 RX was aborted
 interrupt handler 
 definitely for us
 In the interests of fairness, the handlers below are
 called in sequence and without immediate return to the head of
 the while loop. This is only of issue for slow hosts (or when
 debugging messages are on). Really slow hosts may find a fast
 sender keeps them permanently in the IRQ handler. :(
 (only an issue for slow hosts) RX completion goes before
 rx_data_av as the former implies rx_busy and so the latter
 would just abort. If it reschedules another transfer
 (continuing the same frame) then it will not clear rx_busy.
 (only an issue for slow hosts) TX completion goes before RX
 data available as it is a much shorter routine - there is the
 chance that any further transfers it schedules will be complete
 by the time of the return to the head of the while loop
 housekeeping 
 just stats at the moment
 collect device-specific (not driveratm-linux) stats here
 find an idle channel for TX and set it up 
 called with tx_busy set
 better would be to fail immediately, the caller can then decide whether
 to wait or drop (depending on whether this is UBR etc.)
 delay a bit here
 got an idle channel
 tx_idle ensures we look for idle channels in RR order
 set up the channel we found
 Initialise the cell header in the transmit channel descriptor
 a.k.a. prepare the channel and remember that we have done so.
 Update the transmit channel record.
 xBR channel
 Update the PCR counter preload value etc.
 SCR timer
 Bucket size...
 ... and fullness
 Initialise the read and write buffer pointers
 idle TX channels should have identical pointers
 spin_unlock... return -E...
 I wonder if gcc would get rid of one of the pointer aliases
 Initialise the CRC
 Write the Cell Header
 Payload Type, CLP and GFC would go here if non-zero
 send a frame 
 signed for error return 
 don't understand this
 where would be a better place for this? housekeeping?
 wey-hey! 
 wait until TX is free and grab lock
 Wait for enough space to be available in transmit buffer memory.
 should be number of cells needed + 2 (according to hardware docs)
 = ((framelen+8)+47)  48 + 2
 = (framelen+7)  48 + 3, hmm... faster to put addition inside XXX
 replace with timer and sleep, add dev->tx_buffers_queue (max 1 entry)
 what is the appropriate delay? implement a timeout? (depending on line speed?)
 mdelay (1);
 what happens if we kill (current_pid, SIGKILL) ?
 Select a channel to transmit the frame on.
 Are we currently transmitting this VC on one of the channels?
 Find and set up an idle channel.
 TX start transfer
 remember this so we can free it later
 scatter gather transfer
 @@@ needs rewritten 
 simple transfer
 and do the business
 reset a card 
 why not set RESET_HORIZON to one and wait for the card to
 reassert that bit as zero? Like so:
 old reset code retained:
 just guessing here
 read the burnt in address 
 DI must be valid around rising SK edge
 wake Serial EEPROM and send 110 (READ) command
 we could check that we have DO = 0 here
 initialise a card 
 Reset the card to get everything in a known state
 Clear all the buffer memory
 All transmit eight channels are set up as AAL5 ABR channels with
 a 16us cell spacing. Why?
 Channel 0 gets the free buffer at 100h, channel 1 gets the free
 buffer at 110h etc.
 initialise the read and write buffer pointers
 set the status of the initial buffers to empty
 Use space bufn3 at the moment for tx buffers
 Initialise the transmit free buffer count
 Initialise all of the receive channels to be AAL5 disabled with
 an interrupt threshold of 0
 Use space bufn4 at the moment for rx buffers
 Initialise the receive free buffer count
 Initialize Horizons registers
 TX config
 RX config. Use 10-x VC bits, x VP bits, non user cells in channel 0.
 RX line config
 Set the max AAL5 cell count to be just enough to contain the
 largest AAL5 frame that the user wants to receive
 Enable receive
 Drive the OE of the LEDs then turn the green LED on
 Test for a 155-capable card
 Select 155 mode... make this a choice (or: how do we detect
 external line speed and switch?)
 test SUNI-lite vs SAMBA
 Register 0x00 in the SUNI will have some of bits 3-7 set, and
 they will always be zero for the SAMBA.  Ha!  Bloody hardware
 engineers.  It'll never work.
 SUNI
 Reset, just in case
 Configure transmit FIFO
 Set line timed mode
 SAMBA
 Reset, just in case
 Turn off diagnostic loopback and enable line-timed mode
 Turn on transmit outputs
 Select 25 mode
 Madge B154 setup
 none required?
 in the card I have, EEPROM
 addresses 0, 1, 2 contain 0
 addresess 5, 6 etc. contain ffff
 NB: Madge prefix is 00 00 f6 (which is 00 00 6f in Ethernet bit order)
 the read_bia routine gets the BIA in Ethernet bit order
 Enable RX_Q and ?X_COMPLETE interrupts only
 check max_sdu 
 check pcr 
 something like this should be part of ATM Linux
 we are assuming non-UBR, and non-special values of pcr
 !! max_pcr = UNSPEC (0) is equivalent to max_pcr = MAX (-1)
 easier to #define ATM_MAX_PCR 0 and have all rates unsigned?
 [this would get rid of next two conditionals]
 each limit unspecified or not violated
 open VC 
 allocated late
 UNSPEC is deprecated, remove this code eventually
 max speed for the moment
 check AAL and remember it
 we would if it were 48 bytes and not 52!
 we would if I knew how do the SAR!
 TX traffic parameters
 there are two, interrelated problems here: 1. the reservation of
 PCR is not a binary choice, we are given bounds andor a
 desirable value; 2. the device is only capable of certain values,
 most of which are not integers. It is almost certainly acceptable
 to be off by a maximum of 1 to 10 cps.
 Pragmatic choice: always store an integral PCR as that which has
 been allocated, even if we allocate a little (or a lot) less,
 after rounding. The actual allocation depends on what we can
 manage with our rate selection algorithm. The rate selection
 algorithm is given an integral PCR and a tolerance and told
 whether it should round the value up or down if the tolerance is
 exceeded; it returns: a) the actual rate selected (rounded up to
 the nearest integer), b) a bit pattern to feed to the timer
 register, and c) a failure value if no applicable rate exists.
 Part of the job is done by atm_pcr_goal which gives us a PCR
 specification which says: EITHER grab the maximum available PCR
 (and perhaps a lower bound which we must not pass), OR grab this
 amount, rounding down if you have to (and perhaps a lower bound
 which we must not pass) OR grab this amount, rounding up if you
 have to (and perhaps an upper bound which we must not pass). If any
 bounds ARE passed we fail. Note that rounding is only rounding to
 match device limitations, we do not round down to satisfy
 bandwidth availability even if this would not violate any given
 lower bound.
 Note: telephony = 64kbs = 48 byte cell payload @ 5003 cellss
 (say) so this is not even a binary fixpoint cell rate (but this
 device can do it). To avoid this sort of hassle we use a
 tolerance parameter (currently fixed at 10 cps).
 set up defaults for no traffic
 who knows what would actually happen if you try and send on this?
 we take "the PCR" as a rate-cap
 not reserved
 reserve min, allow up to max
 ?
 down vs. up, remaining bandwidth vs. unlimited bandwidth!!
 should really have: once someone gets unlimited bandwidth
 that no more non-UBR channels can be opened until the
 unlimited one closes?? For the moment, round_down means
 greedy people actually get something and not nothing
 slight race (no locking) here so we may get -EAGAIN
 later; the greedy bastards would deserve it :)
 not really clear what further checking is needed
 int scr = atm_scr_goal (txtp);
 just for fun
 just for fun
 see comments for PCR with CBR above
 slight race (no locking) here so we may get -EAGAIN
 later; the greedy bastards would deserve it :)
 not really clear what further checking is needed
 error = atm_scr_check (txtp, vcc.tx_rate);
 bucket calculations (from a piece of paper...) cell bucket
 capacity must be largest integer smaller than m(p-s)p + 1
 where m = max burst size, p = pcr, s = scr
 RX traffic parameters
 set up defaults for no traffic
 not reserved
 reserve min
 ?
 slight race (no locking) here so we may get -EAGAIN
 later; the greedy bastards would deserve it :)
 not really clear what further checking is needed
 int scr = atm_scr_goal (rxtp);
 just for fun
 slight race (no locking) here so we may get -EAGAIN
 later; the greedy bastards would deserve it :)
 not really clear what further checking is needed
 error = atm_scr_check (rxtp, vcc.rx_rate);
 late abort useful for diagnostics
 get space for our vcc stuff and copy parameters into it
 clear error and grab cell rate resource lock
 really consume cell rates
 release lock and exit on error
 this is "immediately before allocating the connection identifier
 in hardware" - so long as the next call does not fail :)
 any errors here are very serious and should never occur
 this link allows RX frames through
 success, set elements of atm_vcc
 indicate readiness
 close VC 
 indicate unreadiness
 let any TX on this channel that has started complete
 no restart, just keep trying
 remove record of any tx_channel having been setup for this channel
 disable RXing - it tries quite hard
 forget the vcc - no more skbs will be pushed
 atomically release our rate reservation
 free our structure
 say the VPIVCI is free again
 proc file contents 
 more diagnostics here? 
 adapter slot free, read resources from PCI configuration space
 XXX DEV_LABEL is a guess 
 perhaps we should be nice: deregister all adapters and abort?
 grab IRQ and install handler - move this someplace more sensible
 irqflags guess 
 name guess 
 enable bus master accesses
 frobnicate latency (upwards, usually)
 these next three are performance hacks
 Allocate cell rates and remember ASIC version
 Fibre: ATM_OC3_PCR = 1555200000827026053 - 2953
 Copper: (WRONG) we want 6 into the above, close to 25Mbs
 Copper: (plagarise!) 25600000827026053 - n53
 to be really pedantic, this should be ATM_OC3c_PCR
 NOT "|= ultra" !
 rate changes spinlock
 on-board memory access spinlock; we want atomic reads and
 writes to adapter memory (handles IRQ and SMP)
 vpi in 0..4, vci in 6..10
 module entry 
 check arguments
 get the juice
 module exit 
 SPDX-License-Identifier: GPL-2.0-or-later
  Madge Ambassador ATM Adapter driver.
  Copyright (C) 1995-1999  Madge Networks Ltd.
  dedicated to the memory of Graham Gordon 1971-1998  
  Theory of Operation
  I Hardware, detection, initialisation and shutdown.
  1. Supported Hardware
  This driver is for the PCI ATMizer-based Ambassador card (except
  very early versions). It is not suitable for the similar EISA "TR7"
  card. Commercially, both cards are known as Collage Server ATM
  adapters.
  The loader supports image transfer to the card, image start and few
  other miscellaneous commands.
  Only AAL5 is supported with vpi = 0 and vci in the range 0 to 1023.
  The cards are big-endian.
  2. Detection
  Standard PCI stuff, the early cards are detected and rejected.
  3. Initialisation
  The cards are reset and the self-test results are checked. The
  microcode image is then transferred and started. This waits for a
  pointer to a descriptor containing details of the host-based queues
  and buffers and various parameters etc. Once they are processed
  normal operations may begin. The BIA is read using a microcode
  command.
  4. Shutdown
  This may be accomplished either by a card reset or via the microcode
  shutdown command. Further investigation required.
  5. Persistent state
  The card reset does not affect PCI configuration (good) or the
  contents of several other "shared run-time registers" (bad) which
  include doorbell and interrupt control as well as EEPROM and PCI
  control. The driver must be careful when modifying these registers
  not to touch bits it does not use and to undo any changes at exit.
  II Driver software
  0. Generalities
  The adapter is quite intelligent (fast) and has a simple interface
  (few features). VPI is always zero, 1024 VCIs are supported. There
  is limited cell rate support. UBR channels can be capped and ABR
  (explicit rate, but not EFCI) is supported. There is no CBR or VBR
  support.
  1. Driver <-> Adapter Communication
  Apart from the basic loader commands, the driver communicates
  through three entities: the command queue (CQ), the transmit queue
  pair (TXQ) and the receive queue pairs (RXQ). These three entities
  are set up by the host and passed to the microcode just after it has
  been started.
  All queues are host-based circular queues. They are contiguous and
  (due to hardware limitations) have some restrictions as to their
  locations in (bus) memory. They are of the "full means the same as
  empty so don't do that" variety since the adapter uses pointers
  internally.
  The queue pairs work as follows: one queue is for supply to the
  adapter, items in it are pending and are owned by the adapter; the
  other is the queue for return from the adapter, items in it have
  been dealt with by the adapter. The host adds items to the supply
  (TX descriptors and free RX buffer descriptors) and removes items
  from the return (TX and RX completions). The adapter deals with out
  of order completions.
  Interrupts (card to host) and the doorbell (host to card) are used
  for signalling.
  1. CQ
  This is to communicate "open VC", "close VC", "get stats" etc. to
  the adapter. At most one command is retired every millisecond by the
  card. There is no out of order completion or notification. The
  driver needs to check the return code of the command, waiting as
  appropriate.
  2. TXQ
  TX supply items are of variable length (scatter gather support) and
  so the queue items are (more or less) pointers to the real thing.
  Each TX supply item contains a unique, host-supplied handle (the skb
  bus address seems most sensible as this works for Alphas as well,
  there is no need to do any endian conversions on the handles).
  TX return items consist of just the handles above.
  3. RXQ (up to 4 of these with different lengths and buffer sizes)
  RX supply items consist of a unique, host-supplied handle (the skb
  bus address again) and a pointer to the buffer data area.
  RX return items consist of the handle above, the VC, length and a
  status word. This just screams "oh so easy" doesn't it?
  Note on RX pool sizes:
  Each pool should have enough buffers to handle a back-to-back stream
  of minimum sized frames on a single VC. For example:
    frame spacing = 3us (about right)
    delay = IRQ lat + RX handling + RX buffer replenish = 20 (us)  (a guess)
    min number of buffers for one VC = 1 + delayspacing (buffers)
    delayspacing = latency = (20+2)3 = 7 (buffers)  (rounding up)
  The 20us delay assumes that there is no need to sleep; if we need to
  sleep to get buffers we are going to drop frames anyway.
  In fact, each pool should have enough buffers to support the
  simultaneous reassembly of a separate frame on each VC and cope with
  the case in which frames complete in round robin cell fashion on
  each VC.
  Only one frame can complete at each cell arrival, so if "n" VCs are
  open, the worst case is to have them all complete frames together
  followed by all starting new frames together.
    desired number of buffers = n + delayspacing
  These are the extreme requirements, however, they are "n+k" for some
  "k" so we have only the constant to choose. This is the argument
  rx_lats which current defaults to 7.
  Actually, "n ? n+k : 0" is better and this is what is implemented,
  subject to the limit given by the pool size.
  4. Driver locking
  Simple spinlocks are used around the TX and RX queue mechanisms.
  Anyone with a faster, working method is welcome to implement it.
  The adapter command queue is protected with a spinlock. We always
  wait for commands to complete.
  A more complex form of locking is used around parts of the VC open
  and close functions. There are three reasons for a lock: 1. we need
  to do atomic rate reservation and release (not used yet), 2. Opening
  sometimes involves two adapter commands which must not be separated
  by another command on the same VC, 3. the changes to RX pool size
  must be atomic. The lock needs to work over context switches, so we
  use a semaphore.
  III Hardware Features and Microcode Bugs
  1. Byte Ordering
  %^"$&%^$&^"$(%^$#&^%$(&#%$(&^#%!"!"!!
  2. Memory access
  All structures that are not accessed using DMA must be 4-byte
  aligned (not a problem) and must not cross 4MB boundaries.
  There is a DMA memory hole at E0000000-E00000FF (groan).
  TX fragments (DMA read) must not cross 4MB boundaries (would be 16MB
  but for a hardware bug).
  RX buffers (DMA write) must not cross 16MB boundaries and must
  include spare trailing bytes up to the next 4-byte boundary; they
  will be written with rubbish.
  The PLX likes to prefetch; if reading up to 4 u32 past the end of
  each TX fragment is not a problem, then TX can be made to go a
  little faster by passing a flag at init that disables a prefetch
  workaround. We do not pass this flag. (new microcode only)
  Now we:
  . Note that alloc_skb rounds up size to a 16byte boundary.  
  . Ensure all areas do not traverse 4MB boundaries.
  . Ensure all areas do not start at a E00000xx bus address.
  (I cannot be certain, but this may always hold with Linux)
  . Make all failures cause a loud message.
  . Discard non-conforming SKBs (causes TX failure or RX fill delay).
  . Discard non-conforming TX fragment descriptors (the TX fails).
  In the future we could:
  . Allow RX areas that traverse 4MB (but not 16MB) boundaries.
  . Segment TX areas into somemore fragments, when necessary.
  . Relax checks for non-DMA items (ignore hole).
  . Give scatter-gather (iovec) requirements using ???. (?)
  3. VC close is broken (only for new microcode)
  The VC close adapter microcode command fails to do anything if any
  frames have been received on the VC but none have been transmitted.
  Frames continue to be reassembled and passed (with IRQ) to the
  driver.
  IV To Do List
  . Fix bugs!
  . Timer code may be broken.
  . Deal with buggy VC close (somehow) in microcode 12.
  . Handle interrupted andor non-blocking writes - is this a job for
    the protocol layer?
  . Add code to break up TX fragments when they span 4MB boundaries.
  . Add SUNI phy layer (need to know where SUNI lives on card).
  . Implement a tx_alloc fn to (a) satisfy TX alignment etc. and (b)
    leave extra headroom space for Ambassador TX descriptors.
  . Understand these elements of struct atm_vcc: recvq (proto?),
    sleep, callback, listenq, backlog_quota, reply and user_back.
  . Adjust TXRX skb allocation to favour IP with LANECLIP (configurable).
  . Impose a TX-pending limit (2?) on each VC, help avoid TX q overflow.
  . Decide whether RX buffer recycling is or can be made completely safe;
    turn it back on. It looks like Werner is going to axe this.
  . Implement QoS changes on open VCs (involves extracting parts of VC open
    and close into separate functions and using them to make changes).
  . Hack on command queue so that someone can issue multiple commands and wait
    on the last one (OR only "no-op" or "wait" commands are waited for).
  . Eliminate need for while-schedule around do_command.
 globals 
 access to adapter 
 dump routines 
be32_to_cpu (cmd->request));
be32_to_cpu (cmd->args.par[i]));
 check memory areas for use by Ambassador 
 see limitations under Hardware Features 
 assumes length > 0
 free an skb (as per ATM device driver documentation) 
 TX completion 
 VC layer stats
 free the descriptor
 free the skb
 RX completion 
 unused: u16 lec_id = be16_to_cpu (rx->lec_id);
 XXX move this in and add to VC stats ???
 prepare socket buffer
 VC layer stats
 end of our responsibility
 someone fix this (message), please!
 drop stats incremented in atm_charge
 should we count this?
 this is an adapter bug, only in new version of microcode
  Note on queue handling.
  Here "give" and "take" refer to queue entries and a queue (pair)
  rather than frames to or from the host or adapter. Empty frame
  buffers are given to the RX queue pair and returned unused or
  containing RX frames. TX frames (well, pointers to TX fragment
  lists) are given to the TX queue pair, completions are returned.
 command queue 
 I really don't like this, but it's the best I can do at the moment
 also, the callers are responsible for byte order as the microcode
 sometimes does 16-bit accesses (yuk yuk yuk)
 if not full...
 remember my slot for later
 copy command in
 mail the command
 these comments were in a while-loop before, msleep removes the loop
 go to sleep
 PRINTD (DBG_CMD, "wait: sleeping %lu for command", timeout);
 wait for my slot to be reached (all waiters are here or above, until...)
 wait on my slot (... one gets to its slot, and... )
 update queue (... moves the queue along to the next slot)
 copy command out
 TX queue pair 
 hand over the TX and ring the bell
 deal with TX completion
 mark unused again
 remove item
 RX queue pairs 
 hand over the RX buffer
 deal with RX completion
 mark unused again
 remove item
 RX Pool handling 
 pre: buffers_wanted = 0, post: pending = 0 
   we are not quite like the fill pool routines as we cannot just
     remove one buffer, we have to remove all of them, but we might as
 the pool may also be emptied via the interrupt handler 
 cast needed as there is no %? for pointer differences
 top up all RX pools
 enable host interrupts 
 disable host interrupts 
 interrupt handling 
 for us or someone else sharing the same interrupt
 definitely for us
 make rate (not quite as much fun as Horizon) 
 hush gcc
 hush gcc
 rates in cells per second, ITU format (nasty 16-bit floating-point)
 given 5-bit e and 9-bit m:
 rate = EITHER (1+m2^9)2^e    OR 0
 bits = EITHER 1<<14 | e<<9 | m OR 0
 (bit 15 is "reserved", bit 14 "non-zero")
 smallest rate is 0 (special representation)
 largest rate is (1+511512)2^31 = 4290772992 (< 2^32-1)
 smallest non-zero rate is (1+0512)2^0 = 1 (> 0)
 simple algorithm:
 find position of top bit, this gives e
 remove top bit and shift (rounding if feeling clever) by 9-e
 ucode bug: please don't set bit 14! so 0 rate not representable
 larger than largest representable rate
 representable rate
 invariant: rate = man2^(exp-31)
 man has top bit set
 rate = (2^31+(man-2^31))2^(exp-31)
 rate = (1+(man-2^31)2^31)2^exp
 a nop on 32-bit systems
 rate = (1+man2^32)2^exp
 exp is in the range 0 to 31, man is in the range 0 to 2^32-1
 time to lose significance... we want m in the range 0 to 2^9-1
 rounding presents a minor problem... we first decide which way
 we are rounding (based on given rounding direction and possibly
 the bits of the mantissa that are to be discarded).
 just truncate
 check all bits that we are discarding
 no need to check for round up outside of range
 check msb that we are discarding
 no need to check for round up outside of range
 zero rate - not representable
 (1<<14) |  (exp<<9) | man;
 Linux ATM Operations 
 some are not yet implemented while others do not make sense for
 this device
 Open a VC 
 hush gcc
 hush gcc
 hush gcc
 hush gcc
 UNSPEC is deprecated, remove this code eventually
 traffic parameters
 we take "the PCR" as a rate-cap
 no rate cap
 PRINTD (DBG_QOS, "request for non-UBRABR denied");
 do nothing
 choose an RX pool (arranged in increasing size)
 PRINTD (DBG_QOS, "request for non-UBRABR denied");
 get space for our vcc stuff
 no failures beyond this point
 we are not really "immediately before allocating the connection
 identifier in hardware", but it will just have to do!
 RXer on the channel already, just modify rate...
 vpi 0
 ... and TX flags, preserving the RX pool
 vpi 0
 no RXer on the channel, just open (with pool zero)
 vpi 0
 grow RX buffer pool 
 TXer on the channel already
 switch (from pool zero) to this pool, preserving the TX bits
 vpi 0
 no TXer on the channel, open the VC (with no rate info)
 vpi 0
 this link allows RX frames through
 indicate readiness
 Close a VC 
 indicate unreadiness
 disable TXing
 RXer still on the channel, just modify rate... XXX not really needed
 vpi 0
 ... and clear TX rate flags (XXX to stop RM cell output?), preserving RX pool
 no RXer on the channel, close channel
 vpi 0
 disable RXing
 this is (the?) one reason why we need the amb_vcc struct
 TXer still on the channel, just go to pool zero XXX not really needed
 vpi 0
 no TXer on the channel, close the VC
 vpi 0
 forget the rxer - no more skbs will be pushed
 shrink RX buffer pool 
 free our structure
 say the VPIVCI is free again
 Send 
 this is a driver private field so we have to set it ourselves,
 despite the fact that we are _required_ to use it to check for a
 pop function
 ?
 allocate memory for fragments
 Change QoS on a VC 
 int amb_change_qos (struct atm_vcc  atm_vcc, struct atm_qos  qos, int flags);
 Free RX Socket Buffer 
 This may be unsafe for various reasons that I cannot really guess
 at. However, I note that the ATM layer calls kfree_skb rather
 than dev_kfree_skb at this point so we are least covered as far
 as buffer locking goes. There may be bugs if pcap clones RX skbs.
 success
 just do what the ATM layer would have done
 Proc File Output 
 more diagnostics here? 
 suni block etc?
 Operation Structure 
 housekeeping 
 could collect device-specific (not driveratm-linux) stats here
 last resort refill once every ten seconds
 creation of communication queues 
 destruction of communication queues 
 all queues assumed empty
 includes txq.in, txq.out, rxq[].in and rxq[].out
 basic loader commands and error handling 
 centisecond timeouts - guessing away here
   do a command
     Set the return value to zero, set the command type and set the
     valid entry to the right magic value. The payload is already
     correctly byte-ordered so we leave it alone. Hit the doorbell
     with the bus address of this structure.
 dump_registers (dev);
 dump_loader_block (lb);
 wait for start command to acknowledge...
 loader: determine loader version 
 loader: write memory data blocks 
 loader: verify memory data blocks 
 loader: start microcode 
 reset card 
 put card into reset state
 wait a short while
 put card into known good state
 clear all interrupts just in case
 clear self-test done flag
 take card out of reset state
 4.2 second wait
 half second time-out
 get results of self-test
 XXX double check byte-order
 better return value?
 transfer and start the microcode 
 First record contains just the start address 
 give adapter parameters 
 the other "a" items are set up by the adapter
 disable fast PLX prefetching
 pass the structure
 2.2 second wait (must not touch doorbell during 2 second DMA test)
 give the adapter another half second?
 get microcode version
 get end station address
 fix up the PLX-mapped window base address to match the block
 the kernel stack had better not ever cross a 1Gb boundary!
 amb_talk 
 create_queues, ucode_init 
 get_loader_version 
 amb_reset 
 set up known dev items straight away
 flags (currently only dead)
 Allocate cell rates (fibre)
 ATM_OC3_PCR = 1555200000827026053 - 2953
 to be really pedantic, this should be ATM_OC3c_PCR
 semaphore for txerrxer modifications - we cannot use a
 spinlock as the critical region needs to switch processes
 queue manipulation spinlocks; we want atomic reads and
 writes to the queue descriptors (handles IRQ and SMP)
 consider replacing "int pending" -> "atomic_t available"
 => problem related to who gets to move queue pointers
 enable bus master accesses
 frobnicate latency (upwards, usually)
 read resources from PCI configuration space
 check IO region
 grab (but share) IRQ and install handler
 register our address
 0 bits for vpi, 10 bits for vci
 enable host interrupts
 the drain should not be necessary
 buffers sizes should be greater than zero and strictly increasing
 module stuff 
 module entry 
 get the juice
 module exit 
 SPDX-License-Identifier: GPL-2.0-only
 driversatmatmtcp.c - ATM over TCP "device" driver 
 Written 1997-2000 by Werner Almesberger, EPFL LRCICA 
 "raw" AAL5 transport 
 control VCC; NULL if detached 
 non-zero if persistent 
 simplifies life 
  Hairy code ahead: the control VCC may be closed while we're still
  waiting for an answer, so we need to re-validate out_vcc every once
  in a while.
 Nothing.... Isn't this simple :-)  -- REW 
 just in case ... 
 Initializer quietens GCC warning 
  Device operations for the virtual ATM devices created by ATMTCP.
  Device operations for the ATMTCP control device.
 @@@ losing AAL in transit ... 
 SPDX-License-Identifier: GPL-2.0-only
 driversatmuPD98402.c - NEC uPD98402 (PHY) declarations 
 Written 1995-2000 by Werner Almesberger, EPFL LRCICA 
 link diagnostics 
 SONETSDH framing 
 loopback mode 
		 unused fields are reported as -1, but we must not "adjust"
 clear interrupt cause 
 clear performance events 
 ignore frequency adj 
 clear overflows 
 clear interrupts 
 enable them 
 clear kernel counters 
 let SAR driver worry about stopping interrupts 
 module_exit not defined so not unloadable 
  he.c
  ForeRunnerHE ATM Adapter driver for ATM on Linux
  Copyright (C) 1999-2001  Naval Research Laboratory
  This library is free software; you can redistribute it andor
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; either
  version 2.1 of the License, or (at your option) any later version.
  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.
  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  he.c
  ForeRunnerHE ATM Adapter driver for ATM on Linux
  Copyright (C) 1999-2001  Naval Research Laboratory
  Permission to use, copy, modify and distribute this software and its
  documentation is hereby granted, provided that both the copyright
  notice and this permission notice appear in all copies of the software,
  derivative works or modified versions, and any portions thereof, and
  that both notices appear in supporting documentation.
  NRL ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION AND
  DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES WHATSOEVER
  RESULTING FROM THE USE OF THIS SOFTWARE.
  This driver was written using the "Programmer's Reference Manual for
  ForeRunnerHE(tm)", MANU0361-01 - Rev. A, 082198.
  AUTHORS:
	chas williams <chas@cmf.nrl.navy.mil>
	eric kinzie <ekinzie@cmf.nrl.navy.mil>
  NOTES:
	4096 supported 'connections'
	group 0 is used for all traffic
	interrupt queue 0 is used for all interrupts
	aal0 support (based on work from ulrich.u.muller@nokia.com)
 still confused about this 
 #undef HE_DEBUG 
 !HE_DEBUG 
 HE_DEBUG 
 declarations 
 globals 
 Read from EEPROM = 0000 0011b 
 0 
 0 
 0 
 0 
 0 
 0 
 1 
 1 
 Clock to read fromwrite to the EEPROM 
 section 2.12 connection memory access 
 flush posted writes 
 figure 2.2 connection id 
 2.5.1 per connection transmit state registers 
	 from page 2-20
	 
	  NOTE While the transmit connection is active, bits 23 through 0
	       of this register must not be written by the host.  Byte
	       enables should be used during normal operation when writing
	       the most significant byte.
 2.7.1 per connection receive state registers 
 need to remove from he_devs 
 cps to atm forum format 
 5.1.7 cs block initialization 
 rate grid timer reload values 
		 2.4 internal transmit function
		 
	 	  we initialize the first row in the rate grid.
		  values are period (in clock cycles) of timer
 table 5.2 (4 cells per lbuf) 
 table 5.3, 5.4, 5.5, 5.6, 5.7 
 table 5.8 
 table 5.9 
 table 5.1 (4 cells per lbuf) 
 table 5.3, 5.4, 5.5, 5.6, 5.7 
 table 5.8 
 table 5.9 
 initialize rate grid group table 
 initialize rate controller groups 
 initialize tNrm lookup table 
	 the manual makes reference to a routine in a sample driver
	   for proper configuration; fortunately, we only need this
 initialize rate to group table 
	
	  2.4 transmit internal functions
	  
	  we construct a copy of the rate grid used by the scheduler
	  in order to construct the rate to group table below
	
	  2.4 transmit internal function
	 
	  this table maps the upper 5 bits of exponent and mantissa
	  of the atm forum representation of the rate into an index
	  on rate grid  
		 
			instead of ' 512', use '>> 9' to prevent a call
			to divdu3 on x86 platforms
 2.2.1 minimum payload rate is 10 cps 
 pick nearest rate instead? 
		
		  each table entry is 16 bits: (rate grid index (8 bits)
		  and a buffer limit (8 bits)
		  there are two table entries in each 32-bit register
 this is pretty, but avoids _divdu3 and is mostly correct 
 bitmap table 
 rbpl_virt 64-bit pointers 
 large buffer pool 
 rx buffer ready queue 
 tx buffer ready queue 
	 2.9.3.5  tail offset for each interrupt queue is located after the
 2.9.3.2 interrupt queue mapping registers 
	
	  pci bus controller initialization 
 4.3 pci bus controller-specific initialization 
	 from table 3.9
	 
	  LAT_TIMER = 1 + AVG_LAT + BURST_SIZEBUS_SIZE
	  
	  AVG_LAT: The average first data readwrite latency [maximum 16 clock cycles]
	  BURST_SIZE: 1536 bytes (read) for 622, 768 bytes (read) for 155 [192 clock cycles]
	 
 4.4 card reset 
 16 ms 
 4.5 set bus width 
 4.7 read prom contents 
 4.6 set host endianess 
 4 cells 
 8 cells 
 __BIG_ENDIAN 
 4.8 sdram controller initialization 
 4.9 initialize rnum value 
 4.10 initialize the interrupt queues 
 4.11 enable pci bus controller state machines 
	
	  atm network controller initialization
 5.1.1 generic configuration state 
	
	 		local (cell) buffer memory map
	                     
	              HE155                          HE622
	                                                       
	         0 ____________1023 bytes  0 _______________________2047 bytes
	          |            |            |                   |   |
	          |  utility   |            |        rx0        |   |
	         5|____________|         255|___________________| u |
	         6|            |         256|                   | t |
	          |            |            |                   | i |
	          |    rx0     |     row    |        tx         | l |
	          |            |            |                   | i |
	          |            |         767|___________________| t |
	       517|____________|         768|                   | y |
	  row  518|            |            |        rx1        |   |
	          |            |        1023|___________________|___|
	          |            |
	          |    tx      |
	          |            |
	          |            |
	      1535|____________|
	      1536|            |
	          |    rx1     |
	      2047|____________|
	 
 total 4096 connections 
 5.1.2 configure hardware dependent registers 
 5.1.3 initialize connection memory 
	
	 	transmit connection memory map
	 
	                   tx memory
	           0x0 ___________________
	              |                   |
	              |                   |
	              |       TSRa        |
	              |                   |
	              |                   |
	        0x8000|___________________|
	              |                   |
	              |       TSRb        |
	        0xc000|___________________|
	              |                   |
	              |       TSRc        |
	        0xe000|___________________|
	              |       TSRd        |
	        0xf000|___________________|
	              |       tmABR       |
	       0x10000|___________________|
	              |                   |
	              |       tmTPD       |
	              |___________________|
	              |                   |
	                       ....
	       0x1ffff|___________________|
	 
	 
	
	 	receive connection memory map
	 
	           0x0 ___________________
	              |                   |
	              |                   |
	              |       RSRa        |
	              |                   |
	              |                   |
	        0x8000|___________________|
	              |                   |
	              |             rx01 |
	              |       LBM         |   link lists of local
	              |             tx    |   buffer memory 
	              |                   |
	        0xd000|___________________|
	              |                   |
	              |      rmABR        |
	        0xe000|___________________|
	              |                   |
	              |       RSRb        |
	              |___________________|
	              |                   |
	                       ....
	        0xffff|___________________|
 5.1.4 initialize local buffer free pools linked lists 
 10% of r0+r1 buffers 
 5% of r0+r1 buffers 
 5.1.5 initialize intermediate receive queues 
 5.1.6 application tunable parameters 
 5.1.7 cs block initialization 
 5.1.8 cs block connection memory initialization 
 5.1.10 initialize host structures 
 host status page 
 initialize framer 
 CONFIG_ATM_HE_USE_SUNI 
 this really should be in suni.c but for now... 
 5.1.12 enable transmit and receive 
 atm linux initialization 
 disable interrupts 
 disable recv and transmit 
 CONFIG_ATM_HE_USE_SUNI 
 2.10.1.2 receive
  aal5 packets can optionally return the tcp checksum in the lower
  16 bits of the crc (RSR0_TCP_CKSUM)
 2.10.1.5 raw cell receive 
 2.10.1.2 aal5 receive 
 2.1.6 transmit buffer return queue 
 && !TBRQ_MULTIPLE(he_dev->tbrq_head) 
 table 3.42 -- rbpl_tail should never be set to rbpl_head 
 shouldn't happen unless small buffers enabled 
 see 8.1.1 -- check all queues 
 8.1.2 controller errata; flush posted writes 
 8.1.2 controller errata 
 && !IRQ_PENDING )
 clear interrupt 
 flush posted writes 
 new_tail = he_dev->tpdrq_tail; 
	
	  check to see if we are about to set the tail == head
	  if true, update the head pointer from the adapter
	  to see if this is really the case (reading the queue
	  head for every enqueue would be unnecessarily slow)
			
			  FIXME
			  push tpd onto a transmit backlog queue
			  after service_tbrq, service the backlog
			  for now, we just drop the pdu
 2.1.5 transmit packet descriptor ready queue 
 flush posted writes 
 means round down, technically 
 2.3.3.1 open connection ubr 
 2.3.3.2 open connection cbr 
 8.2.3 cbr scheduler wrap problem -- limit to 90% total link rate 
 also protects he_dev->cs_stper[] 
 find an unused cs_stper register 
 flush posted writes 
		 5.1.11 last parameter initialized should be
 flush posted writes 
 2.7.2.2 close receive operation 
 wait for previous close (if any) to finish 
 flush posted writes 
		 2.1.2
		 
		  ... the host must first stop queueing packets to the TPDRQ
		  on the connection to be closed, then wait for all outstanding
		  packets to be transmitted and their buffers returned to the
		  TBRQ. When the last packet on the connection arrives in the
		  TBRQ, the host issues the close command to the adapter.
 2.3.1.1 generic close operations with flush 
 also clears TSR4_SESSION_ENDED 
 flush posted writes 
 queue tpd; start new tpd 
			tpd->skb = NULL;	 not the last fragment
 CONFIG_ATM_HE_USE_SUNI 
 CONFIG_ATM_HE_USE_SUNI 
 flush posted writes 
 eeprom routines  -- see 4.7 
 Turn on write enable 
 Send READ instruction 
 Next, we need to send the byte address to read from 
 Turn off write enable 
 Now, we can read data from the EEPROM by clocking it in 
 SPDX-License-Identifier: GPL-2.0-only
 driversatmzatm.c - ZeitNet ZN122x device driver 
 Written 1995-2000 by Werner Almesberger, EPFL LRCICA 
  TODO:
  Minor features
   - support 64 kB SDUs (will have to use multibuffer batches then :-( )
   - proper use of CDV, credit = max(1,CDVTPCR)
   - AAL0
   - better receive timestamps
   - OAM
  NULL pointer checking
  Very extensive activity logging. Greatly improves bug detection speed but
  costs a few Mbps if enabled.
 CONFIG_ATM_ZATM_DEBUG 
#define RING_BUSY	1	 indication from do_tx that PDU has to be
 RX0, RX1, TX0, TX1 
 entry size in bytes 
-------------------------------- utilities --------------------------------
------------------------------- free lists --------------------------------
  Free buffer head structure:
    [0] pointer to buffer (for SAR)
    [1] buffer descr link pointer (for SAR)
    [2] back pointer to skb (for poll_rx)
    [3] data
    ...
 pointer to buffer (for SAR) 
 buffer descriptor link pointer (for SAR) 
 back pointer to skb (for poll_rx) 
 for 32 byte alignment 
 use_pool isn't reentrant 
 64B... 
 ... 64kB 
----------------------------------- RX ------------------------------------
 probably a stupid idea 
 maybe this saves us a few interrupts 
			 fix this - we may want to receive 64kB SDUs
 set up VC descriptor 
 should also handle VPI @@@ 
 disable receiver 
 why oh why ... ? 
 set VPIVCI split (use all VCIs and give what's left to VPIs) 
 prepare free buffer pools 
----------------------------------- TX ------------------------------------
 @@@ should check alignment 
 @@@ would fail on CLP 
 mark as invalid 
  BUG BUG BUG: Doesn't handle "new-style" rate specification yet.
 @@@ should use max_cdv ! 
 initialize ring 
 set up VC descriptor 
 initialize shapers 
------------------------------- interrupts --------------------------------
 don't handle RD 
 don't handle IND 
 @@@ should try to recover 
 @@@ handle RCRn 
----------------------------- (E)EPROM access -----------------------------
 select EPROM 
 deselect EPROM 
 assumes ESI_LEN == 6 
--------------------------------- entries ---------------------------------
 reset uPD98401 
uPD98401_BURST4,GMR);
 reset again to rebuild memory pointers 
 TODO: should shrink allocation now 
 loop if wrapping ... 
 define memory regions 
 @@@ no VPI for now 
 ??? 
 receive pool 
 shapers 
 free pool 
 create mailboxes 
		
		  Alignment provided by dma_alloc_coherent() isn't enough
		  for this device.
 enable interrupts 
 enable TX & RX 
 deallocate memory 
 @@@ AAL0 
 for zatm_close after open_rx 
 @@@ 
 module_exit not defined so not unloadable 
 SPDX-License-Identifier: GPL-2.0-only
  adummy.c: a dummy ATM driver
 version definition 
 globals 
 We want them in dev's root folder 
 SPDX-License-Identifier: GPL-2.0-or-later
 lanai.c -- Copyright 1999-2003 by Mitchell Blank Jr <mitch@sfgoth.com>
  This driver supports ATM cards based on the Efficient "Lanai"
  chipset such as the Speedstream 3010 and the ENI-25p.  The
  Speedstream 3060 is currently not supported since we don't
  have the code to drive the on-board Alcatel DSL chipset (yet).
  Thanks to Efficient for supporting this project with hardware,
  documentation, and by answering my questions.
  Things not working yet:
  o  We don't support the Speedstream 3060 yet - this card has
     an on-board DSL modem chip by Alcatel and the driver will
     need some extra code added to handle it
  o  Note that due to limitations of the Lanai only one VCC can be
     in CBR at once
  o We don't currently parse the EEPROM at all.  The code is all
    there as per the spec, but it doesn't actually work.  I think
    there may be some issues with the docs.  Anyway, do NOT
    enable it yet - bugs in that code may actually damage your
    hardware!  Because of this you should hardware an ESI before
    trying to use this in a LANE or MPOA environment.
  o  AAL0 is stubbed in but the actual rxtx path isn't written yet:
 	vcc_tx_aal0() needs to send or queue a SKB
 	vcc_tx_unqueue_aal0() needs to attempt to send queued SKBs
 	vcc_rx_aal0() needs to handle AAL0 interrupts
     This isn't too much work - I just wanted to get other things
     done first.
  o  lanai_change_qos() isn't written yet
  o  There aren't any ioctl's yet -- I'd like to eventually support
     setting loopback and LED modes that way.
  o  If the segmentation engine or DMA gets shut down we should restart
     card as per section 17.0i.  (see lanai_reset)
  o setsockopt(SO_CIRANGE) isn't done (although despite what the
    API says it isn't exactly commonly implemented)
 Version history:
    v.1.00 -- 26-JUL-2003 -- PCIDMA updates
    v.0.02 -- 11-JAN-2000 -- Endian fixes
    v.0.01 -- 30-NOV-1999 -- Initial release
 -------------------- TUNABLE PARAMATERS: 
  Maximum number of VCIs per card.  Setting it lower could theoretically
  save some memory, but since we allocate our vcc list with get_free_pages,
  it's not really likely for most architectures
  Enable extra debugging
  Debug _all_ register operations with card, except the memory test.
  Also disables the timed poll to prevent extra chattiness.  This
  isn't for normal use
  The programming guide specifies a full test of the on-board SRAM
  at initialization time.  Undefine to remove this
  This is the number of (4 byte) service entries that we will
  try to allocate at startup.  Note that we will end up with
  one PAGE_SIZE's worth regardless of what this is set to
 TODO: make above a module load-time option 
  We normally read the onboard EEPROM in order to discover our MAC
  address.  Undefine to _not_ do this
 #define READ_EEPROM  
 TODO: make above a module load-time option (also) 
  Depth of TX fifo (in 128 byte units; range 2-31)
  Smaller numbers are better for network latency
  Larger numbers are better for PCI latency
  I'm really sure where the best tradeoff is, but the BSD driver uses
  7 and it seems to work ok.
 TODO: make above a module load-time option 
  How often (in jiffies) we will try to unstick stuck connections -
  shouldn't need to happen much
 TODO: make above a module load-time option 
  When allocating an AAL5 receiving buffer, try to make it at least
  large enough to hold this many max_sdu sized PDUs
 TODO: make above a module load-time option 
  Same for transmitting buffer
 TODO: make above a module load-time option 
  When allocating an AAL0 transmiting buffer, how many cells should fit.
  Remember we'll end up with a PAGE_SIZE of them anyway, so this isn't
  really critical
 TODO: make above a module load-time option 
  How large should we make the AAL0 receiving buffer.  Remember that this
  is shared between all AAL0 VC's
 TODO: make above a module load-time option 
  Should we use Lanai's "powerdown" feature when no vcc's are bound?
 #define USE_POWERDOWN 
 TODO: make above a module load-time option (also) 
 -------------------- DEBUGGING AIDS: 
 !DEBUG 
 DEBUG 
 !DEBUG_RW 
 -------------------- DATA DEFINITIONS: 
 DMA buffer in host memory for TX, RX, or service list. 
 From get_free_pages 
 One past last byte 
 Pointer to current host location 
 Forward declaration 
  This is the card-specific per-vcc data.  Note that unlike some other
  drivers there is NOT a 1-to-1 correspondance between these and
  atm_vcc's - each one of these represents an actual 2-way vcc, but
  an atm_vcc can be 1-way and share with a 1-way vcc in the other
  direction.  To make it weirder, there can even be 0-way vccs
  bound to us, waiting to do a change_qos
 Base of VCC's registers 
 # of atm_vcc's who reference us 
 atm_vcc who is receiver 
 atm_vcc who is transmitter 
 last endptr from service entry 
 # of cells dropped - buffer overflow 
 # of cells dropped - closed vci 
 # of cells dropped - bad HEC 
 # of cells dropped - rx fifo overflow 
 number of bound vccs 
 Currently just NUM_VCI 
 VCCs with tx backlog 
 VCCs with transmit space 
 AAL0 RX buffers 
 CONFIG[12] registers 
 STATUS register 
 TODO - look at race conditions with maintence of conf1conf2 
 TODO - transmit locking: should we use _irq not _irqsave? 
 TODO - organize above in some rational fashion (see <asmcache.h>) 
  Each device has two bitmaps for each VCC (baclog_vccs and transmit_ready)
  This function iterates one of these, calling a given function for each
  vci with their bit set
 -------------------- BUFFER  UTILITIES: 
  Lanai needs DMA buffers aligned to 256 bytes of at least 1024 bytes -
  usually any page allocation will do.  Just to be safe in case
  PAGE_SIZE is insanely tiny, though...
  Allocate a buffer in host RAM for service list, RX, or TX
  Returns buf->start==NULL if no memory
  Note that the size will be rounded up 2^n bytes, and
  if we can't allocate that we'll settle for something smaller
  until minbytes
 max lanai buffer size 
		
		  Technically we could use non-consistent mappings for
		  everything, but the way the lanai uses DMA memory would
		  make that a terrific pain.  This is much simpler.
 Success 
 Lanai requires 256-byte alignment of DMA bufs 
 size of buffer in bytes 
 size of buffer as "card order" (0=1k .. 7=128k) 
 This can only happen if PAGE_SIZE is gigantic, but just in case 
 -------------------- PORT IO UTILITIES: 
 Registers (and their bit-fields) 
 Reset; read for chip type; bits: 
 Board revision 
 Board ID 
 25.6M adapter card 
 Endian setting 
 Interrupt status 
 Interrupt status (masked) 
 Interrupt acknowledge 
 Interrupt acknowledge (masked) 
 Get status + enabledisable 
 Get status + endi (masked) 
 Interrupt control enable 
 Interrupt control disable 
 Status 
 PROM_DATA pin 
 Interrupt being delayed 
 SOOL alarm 
 LOCD alarm 
 LED (HAPPI) output 
 GPIN pin 
 Butt register is pending 
 Config word 1; bits: 
 PROM_DATA pin 
 PROM_CLK pin 
 PCI BM reads; values: 
   Plain memory read 
   Memory read line 
   Memory read multiple 
 Turn on DMA 
 Turn off clocks 
 Clock&loop mode; values: 
   Normal - no loop 
 Mode of LED; values: 
   !SOOL 
   0     
   1     
   !LOCD 
   GPIN  
   !GPIN 
 Toggle for reset 
 Loopback PHY 
 Loopback lanai 
 Config word 2; bits: 
 >512 VCIs? 
 Make PTI=7 RM, not OAM 
 Ignore RX VPI value 
 Drop cells w HEC errors 
 Treat VCI=0 normally 
 Deal with CBR traffic 
 Trashing incoming cells 
 Trashing outgoing cells 
 Turn trashing on 
 Statistics; bits: 
 FIFO overflowed 
 HEC was bad 
 VCI not open 
 VCC buffer full 
 Service stuff; bits: 
 size of service buffer 
 set address of buffer 
 ServWrite Pointer 
 ServRead Pointer 
 FIFO Transmit Depth 
 Butt register 
 Ping count 
 DMA address 
 Same as conf2_write(), but defers IO if we're powered down 
 USE_POWERDOWN 
	
	  If we don't delay a little while here then we can end up
	  leaving the card in a VERY weird state and lock up the
	  PCI bus.  This isn't documented anywhere but I've convinced
	  myself after a lot of painful experimentation
 -------------------- CARD SRAM UTILITIES: 
 The SRAM is mapped into normal PCI memory space - the only catch is
  that it is only 16-bits wide but must be accessed as 32-bit.  The
  16 high bits will be zero.  We don't hide this, since they get
  programmed mostly like discrete registers anyway
 Again, half don't really exist 
 -------------------- CARD-BASED VCC TABLE UTILITIES: 
 vcc table 
 Location1, plus bits: 
 size of RX buffer 
 RM cell action; values: 
   discard 
   input as AAL0 
   pipe to coscheduler 
   pipe non-RM too 
 Input OAM cells as AAL0 
 Reassembly mode 
   discard 
   non-AAL5 mode 
   AAL5, intr. each PDU 
   AAL5 wo per-PDU intr 
 Location2 
 RX CRC claculation space 
 RX writeptr, plus bits: 
 Last PDU had EFCI bit 
 Had error, dropping 
 Trashing 
 RX bufstart, plus bits: 
 RX readptr 
 TX ICG 
 Location1, plus bits: 
 size of TX buffer 
 use ABR (doesn't work) 
 Location2 
 TX CRC claculation space 
 TX Readptr, plus bits: 
 ? 
 TX Endptr, plus bits: 
 PDU mode; values: 
 TX Writeptr 
 # of next CBR VCI in ring 
 "bozo bit" 
 -------------------- COMPUTE SIZE OF AN AAL5 PDU: 
 How many bytes will an AAL5 PDU take to transmit - remember that:
    o  we need to add 8 bytes for length, CPI, UU, and CRC
    o  we need to round up to 48 bytes for cells
 -------------------- FREE AN ATM SKB: 
 -------------------- TURN VCCS ON AND OFF: 
 ??? 
 RXADDR1_OAM_PRESERVE |	--- no OAM support yet 
 ??? 
 ??? 
 This one must be last! 
 Shutdown receiving on card 
 We were never bound to a VCI 
 15.1.1 - set to trashing, wait one cell time (15us) 
 15.1.2 - clear rest of entries 
 Shutdown transmitting on card.
  Unfortunately the lanai needs us to wait until all the data
  drains out of the buffer before we can dealloc it, so this
  can take awhile -- up to 370ms for a full 128KB buffer
  assuming everone else is quiet.  In theory the time is
  boundless if there's a CBR VCC holding things up.
 We were never bound to a VCI 
 15.2.1 - wait for queue to drain 
	
	  We need to wait for the VCC to drain but don't wait forever.  We
	  give each 1K of buffer size 1128th of a second to clear out.
	  TODO: maybe disable CBR if we're about to timeout?
 Is TX buffer empty? 
 Has there been any progress? 
 15.2.2 - clear out all tx registers 
 -------------------- MANAGING AAL0 RX BUFFER: 
 -------------------- EEPROM UTILITIES: 
 Offsets of data in the EEPROM 
 Stub functions to use if EEPROM reading is disabled 
 READ_EEPROM 
 start with both clock and data high 
 Command=read + address 
 send start bit 
 write command out 
 Let new data settle 
 look for ack 
 No ack seen 
 read back result 
 look again for ack 
 Spurious ack 
 finish read 
 read a big-endian 4-byte value out of eeprom 
 Checksumvalidate EEPROM contents 
 First, see if we can get an ASCIIZ string out of the copyright 
 Validate checksum 
 Verify MAC address 
 Verify serial number 
 Verify magic number 
 READ_EEPROM 
 -------------------- INTERRUPT HANDLING UTILITIES: 
 Interrupt types 
 Statistics counter overflow 
 SOOL changed state 
 LOCD changed state 
 LED (HAPPI) changed state 
 GPIN changed state 
 PING_COUNT fulfilled 
 Lanai wants bus 
 CBR sched hit VCI 0 
 Service list overflow 
 TX magic list mismatch 
 Non-AAL5 buffer half filled 
 Non-AAL5 data available 
 Service list entries available 
 Target abort sent by lanai 
 Abort rcv'd as bus master 
 No response to bus master 
 Parity error on PCI 
 Sets of the above 
 All interrupts 
 Some status pin changed 
 DMA engine got shut down 
 Segmentation got shut down 
 -------------------- CARDPCI STATUS: 
 -------------------- VCC TX BUFFER UTILITIES: 
 space left in tx buffer in bytes 
 Leave "bubble" - if start==end it looks empty 
 test if VCC is currently backlogged 
 Bit fields in the segmentation buffer descriptor 
 Add 32-bit descriptor with its padding 
 Hope the values REALLY don't matter 
 Add 32-bit AAL5 trailer and leave room for its CRC 
 Update "butt" register to specify new WritePtr 
	
	  Since the "butt register" is a shared resounce on the card we
	  serialize all accesses to it through this spinlock.  This is
	  mostly just paranoia since the register is rarely "busy" anyway
	  but is needed for correctness.
	
	  We need to check if the "butt busy" bit is set before
	  updating the butt register.  In theory this should
	  never happen because the ATM card is plenty fast at
	  updating the register.  Still, we should make sure
	
	  Before we tall the card to start work we need to be sure 100% of
	  the info in the service buffer has been written before we tell
	  the card about it
  Add one AAL5 PDU to lvcc's transmit buffer.  Caller garauntees there's
  space available.  "pdusize" is the number of bytes the PDU will take
 Try to fill the buffer - don't call unless there is backlog 
 No room for this packet - put it back on queue 
 Given an skb that we want to transmit either send it now or queue 
 Already backlogged 
 No space for this PDU 
 Remember to increment lvcc->tx.atmvcc->stats->tx 
 -------------------- VCC RX BUFFER UTILITIES: 
 unlike the _tx_ cousins, this doesn't update ptr 
 Make sure that these copies don't get reordered 
 Receive AAL5 data on a VCC with a particular endptr 
 Recover the second-to-last word to get true pdu length 
	
	  Before we actually read from the buffer, make sure the memory
	  changes have arrived
 Make sure size matches padding 
 Remember to get read_lock(&vcc_sklist_lock) while looking up VC 
 Remember to increment lvcc->rx.atmvcc->stats->rx 
 -------------------- MANAGING HOST-BASED VCC TABLE: 
 Decide whether to use vmalloc or get_zeroed_page for VCC table 
 Allocate a fresh lanai_vcc, with the appropriate things cleared 
 Setup a RX buffer for a currently unbound AAL5 vci 
 Setup a TX buffer for a currently unbound AAL5 vci 
 We already were bound in the other direction 
 This vcc was never bound 
 -------------------- RESET CARD: 
 TODO 
	 The following is just a hack until we write the real
	  resetter - at least ack whatever interrupt sent us
	  here
 -------------------- SERVICE LIST UTILITIES: 
  Allocate service buffer and tell card about it
 Clear ServWrite register to be safe 
 ServiceStuff register contains size and address of buffer 
 Bitfields in service list 
 Was from transmission 
 RXed PDU was trashed 
 RXed PDU had CRC error 
 RXed PDU had CI set 
 RXed PDU had CLP set 
 RX Stream mode 
 Handle one thing from the service list - returns true if it marked a
  VCC ready for xmit
 segmentation interrupt 
 Try transmitting on all VCIs that we marked ready to serve 
 Run service queue -- called from interrupt context or with
  interrupts otherwise disabled and with the lanai->servicelock
  lock held
 -------------------- GATHER STATISTICS: 
 -------------------- POLLING TIMER: 
 Try to undequeue 1 backlogged vcc 
 !DEBUG_RW 
 USE_POWERDOWN 
 If we can grab the spinlock, check if any services need to be run 
 ...and see if any backlogged VCs can make progress 
 unfortunately linux has no read_trylock() currently 
 !DEBUG_RW 
 -------------------- INTERRUPT SERVICE: 
 The rest of the interrupts are pretty rare 
 No need to ack 
	
	  If we're powered down we shouldn't be generating any interrupts -
	  so assume that this is a shared interrupt line and it's for someone
	  else
 Must be for someone else 
 Maybe we've been unplugged? 
 TODO - it would be nice if we could use the "delayed interrupt" system
    to some advantage
 -------------------- CHECK BOARD IDREV: 
  The board id and revision are stored both in the reset register and
  in the PCI configuration space - the documentation says to check
  each of them.  If revp!=NULL we store the revision there
 -------------------- PCI INITIALIZATIONSHUTDOWN: 
 Set latency timer to zero as per lanai docs 
 -------------------- VPIVCI ALLOCATION: 
  We _can_ use VCI==0 for normal traffic, but only for UBR (or we'll
  get a CBRZERO interrupt), and we can use it only if no one is receiving
  AAL0 traffic (since they will use the same queue) - according to the
  docs we shouldn't even use it for AAL0 traffic
 return true if vci is currently unused, or if requested qos is
  compatible
 -------------------- MANAGE CBR: 
  CBR ICG is stored as a fixed-point number with 4 fractional bits.
  Note that storing a number greater than 2046.0 will result in
  incorrect shaping
  ICG is related to PCR with the formula PCR = MAXPCR  (ICG + 1)
  where MAXPCR is (according to the docs) 25600000(548),
  which is equal to (3125<<9)27.
  Solving for ICG, we get:
     ICG = MAXPCRPCR - 1
     ICG = (3125<<9)(27PCR) - 1
     ICG = ((3125<<9) - (27PCR))  (27PCR)
  The end result is supposed to be a fixed-point number with FRAC_BITS
  bits of a fractional part, so we keep everything in the numerator
  shifted by that much as we compute
 1 = Round PCR down, i.e. round ICG _up_ 
 Use maximum bandwidth 
 -------------------- OPERATIONS: 
 setup a newly detected device 
 Basic device fields 
 3.2: PCI initialization 
 3.3: Reset lanai and PHY 
	
	  3.4: Turn on endian mode for big-endian hardware
	    We don't actually want to do this - the actual bit fields
	    in the endian register are not documented anywhere.
	    Instead we do the bit-flipping ourselves on big-endian
	    hardware.
	 
	  3.5: get the board IDrev by reading the reset register
 3.6: read EEPROM 
 3.7: re-reset PHY, do loopback tests, setup PHY 
 TODO - loopback tests 
 3.83.9: test and initialize card SRAM 
 3.10: initialize lanai registers 
 ???  CONFIG2_PTI7_MODE;
 CBR defaults to no limit 
 Make sure that all that made it 
 3.11: initialize loop mode (i.e. turn looping off) 
 We're now done initializing this card 
 called when device is being shutdown, and all vcc's are gone - higher
  levels will deallocate the atm device for us
 close a vcc 
 open a vcc on the card to vpivci 
 we don't support partial open - it's not really useful anyway 
	
	  Make sure everything made it to RAM before we tell the card about
	  the VCC
 NOTE - this next line is technically invalid - we haven't unshared skb 
const struct atm_qos qos, int flags)
 TODO: need to write this 
 At this point, "left" should be the VCI we're looking for 
 Note that we re-use "left" here since we're done with it 
 CONFIG_PROC_FS 
 -------------------- HOOKS: 
 initialize one probed card 
 terminal entry 
 SPDX-License-Identifier: GPL-2.0
  this file included by nicstar.c
  nicstarmac.c
  Read this ForeRunner's MAC address from epromeeprom
   This was the original definition
#define osp_MicroDelay(microsec) \
    do { int _i = 4microsec; while (--_i > 0) { __SLOW_DOWN_IO; }} while (0)
  The following tables represent the timing diagrams found in
  the Data Sheet for the Xicor X25020 EEProm.  The #defines below
  represent the bits in the NICStAR's General Purpose register
  that must be toggled for the corresponding actions on the EEProm
  to occur.
 Write Data To EEProm from SI line on rising edge of CLK 
 Read Data From EEProm on falling edge of CLK 
 Chip select high 
 Chip select low (active low) 
 Clock high 
 Clock low  
 Serial input data high 
 Serial input data low 
 Read Status Register = 0000 0101b 
 0 
 0 
 0 
 0 
 0 
 1 
 0 
 1 
  0  
 Read from EEPROM = 0000 0011b 
	
	   CS_HIGH | CLK_HIGH,
 0 
 0 
 0 
 0 
 0 
 0 
 1 
 1 
 Clock to read fromwrite to the eeprom 
  This routine will clock the Read_Status_reg function into the X2520
  eeprom, then pull the result from bit 16 of the NicSTaR's General Purpose 
  register.  
 Send read instruction 
 Done sending instruction - now pull data off of bit 16, MSB first 
 Data clocked out of eeprom on falling edge of clock 
  0  
  This routine will clock the Read_data function into the X2520
  eeprom, followed by the address to read from, through the NicSTaR's General
  Purpose register.  
 Send READ instruction 
 Next, we need to send the byte address to read from 
 Now, we can read data from the eeprom by clocking it in 
	
	  turn chip select off
  This routine will be the interface to the ReadPromByte function
  above.
 SPDX-License-Identifier: GPL-2.0-or-later
 driversatmfirestream.c - FireStream 155 (MB86697) and
                             FireStream  50 (MB86695) device driver 
 Written & (C) 2000 by R.E.Wolff@BitWizard.nl 
  Copied snippets from zatm.c by Werner Almesberger, EPFL LRCICA 
  and ambassador.c Copyright (C) 1995-1999  Madge Networks Ltd 
 for request_region 
 According to measurements (but they look suspicious to me!) done in
  '97, 37% of the packets are one cell in size. So it pays to have
  buffers allocated at that size. A large jump in percentage of
  packets occurs at packets around 536 bytes in length. So it also
  pays to have those pre-allocated. Unfortunately, we can't fully
  take advantage of this as the majority of the packets is likely to
  be TCPIP (As where obviously the measurement comes from) There the
  link would be opened with say a 1500 byte MTU, and we can't handle
  smaller buffers more efficiently than the larger ones. -- REW
 Due to the way Linux memory management works, specifying "576" as
  an allocation size here isn't going to help. They are allocated
  from 1024-byte regions anyway. With the size of the sk_buffs (quite
 This is all guesswork. Hard numbers to back this up or disprove this, 
 The last entry should be about 64k. However, the "buffer size" is
  passed to the chip in a 16 bit field. I don't know how "65536"
 log2:                 7     8     9    10    11    12    14     16 
 debug 
 log2:                 10    10    9    8     7     6     5      5  
 sumlog2:              17    18    18   18    18    18    19     21 
 mem allocated:        128k  256k  256k 256k  256k  256k  512k   2M 
 tot mem: almost 4M 
 NP is shorter, so that it fits on a single line. 
 Small hardware gotcha:
   The FS50 CAM (VPVC match registers) always take the lowest channel
   number that matches. This is not a problem.
   However, they also ignore whether the channel is enabled or
   not. This means that if you allocate channel 0 to 1.2 and then
   channel 1 to 0.0, then disabeling channel 0 and writing 0 to the
   match channel for channel 0 will "steal" the traffic from channel
   1, even if you correctly disable channel 0.
   Workaround: 
   - When disabling channels, write an invalid VPVC value to the
   match register. (We use 0xffffffff, which in the worst case 
   matches VPVC = <maxVP><maxVC>, but I expect it not to match
   anything as some "when not in use, program to 0" bits are now
   programmed to 1...)
   - Don't initialize the match registers to 0, as 0.0 is a valid
   channel.
 Optimization hints and tips.
   The FireStream chips are very capable of reducing the amount of
   "interrupt-traffic" for the CPU. This driver requests an interrupt on EVERY
   action. You could try to minimize this a bit. 
   Besides that, the userspace->kernel copy and the PCI bus are the
   performance limiting issues for this driver.
   You could queue up a bunch of outgoing packets without telling the
   FireStream. I'm not sure that's going to win you much though. The
   Linux layer won't tell us in advance when it's not going to give us
   any more packets in a while. So this is tricky to implement right without
   introducing extra delays. 
   -- REW
 The strings that define what the RX queue entry is all about. 
 Fujitsu: Please tell me which ones can have a pointer to a 
 FIXME: The strings between 30-40 might be wrong. 
 changed here to make loopback 
 -1 signals end of list 
 Safetyfeature: If the card interrupts more than this number of times
   in a jiffy (1100th of a second) then we just disable the interrupt and
   print a message. This prevents the system from hanging. 
   150000 packets per second is close to the limit a PC is going to have
 100
 Interrupts work now. Unlike serial cards, ATM cards don't work all
 100
   This driver can spew a whole lot of debugging output at you. If you
   need maximum performance, you should disable the DEBUG define. To
   aid in debugging in the field, I'm leaving the compile-time debug
   features enabled, and disable them "runtime". That allows me to
   instruct people with problems to enable debugging without requiring
   them to recompile... -- REW
 nothing 
 I didn't forget to set this to zero before shipping. Hit me with a stick 
 XXX Add rx_buf_sizes, and rx_pool_sizes As per request Amar. -- REW 
 DEBUG 
 DEBUG 
 free an skb (as per ATM device driver documentation) 
 Hmm. If this is ATM specific, why isn't there an ATM routine for this?
 It seems the ATM forum recommends this horribly complicated 16bit
  floating point format. Turns out the Ambassador uses the exact same
  encoding. I just copied it over. If Mitch agrees, I'll move it over
  to the atm_misc file or something like that. (and remove it from 
  here and the ambassador driver) -- REW
 The good thing about this format is that it is monotonic. So, 
   a conversion routine need not be very complicated. To be able to
   round "nearest" we need to take along a few extra bits. Lets
   put these after 16 bits, so that we can just return the top 16
   bits of the 32bit number as the result:
   int mr (unsigned int rate, int r) 
     {
     int e = 16+9;
     static int round[4]={0, 0, 0xffff, 0x8000};
     if (!rate) return 0;
     while (rate & 0xfc000000) {
       rate >>= 1;
       e++;
     }
     while (! (rate & 0xfe000000)) {
       rate <<= 1;
       e--;
     }
 Now the mantissa is in positions bit 16-25. Excepf for the "hidden 1" that's in bit 26.
     rate &= ~0x02000000;
 Next add in the exponent
     rate |= e << (16+9);
 And perform the rounding:
     return (rate + round[r]) >> 16;
   }
   14 lines-of-code. Compare that with the 120 that the Ambassador
   guys needed. (would be 8 lines shorter if I'd try to really reduce
   the number of lines:
   int mr (unsigned int rate, int r) 
   {
     int e = 16+9;
     static int round[4]={0, 0, 0xffff, 0x8000};
     if (!rate) return 0;
     for (;  rate & 0xfc000000 ;rate >>= 1, e++);
     for (;!(rate & 0xfe000000);rate <<= 1, e--);
     return ((rate & ~0x02000000) | (e << (16+9)) + round[r]) >> 16;
   }
   Exercise for the reader: Remove one more line-of-code, without
   cheating. (Just joining two lines is cheating). (I know it's
   possible, don't think you've beat me if you found it... If you
   manage to lose two lines or more, keep me updated! ;-)
 make rate (not quite as much fun as Horizon) 
 hush gcc 
 hush gcc 
	 rates in cells per second, ITU format (nasty 16-bit floating-point)
	   given 5-bit e and 9-bit m:
	   rate = EITHER (1+m2^9)2^e    OR 0
	   bits = EITHER 1<<14 | e<<9 | m OR 0
	   (bit 15 is "reserved", bit 14 "non-zero")
	   smallest rate is 0 (special representation)
	   largest rate is (1+511512)2^31 = 4290772992 (< 2^32-1)
	   smallest non-zero rate is (1+0512)2^0 = 1 (> 0)
	   simple algorithm:
	   find position of top bit, this gives e
	   remove top bit and shift (rounding if feeling clever) by 9-e
	 Ambassador ucode bug: please don't set bit 14! so 0 rate not
	   representable.  This should move into the ambassador driver
 larger than largest representable rate 
 representable rate 
 invariant: rate = man2^(exp-31) 
		 man has top bit set
		   rate = (2^31+(man-2^31))2^(exp-31)
		   rate = (1+(man-2^31)2^31)2^exp 
 a nop on 32-bit systems 
		 rate = (1+man2^32)2^exp
		   exp is in the range 0 to 31, man is in the range 0 to 2^32-1
		   time to lose significance... we want m in the range 0 to 2^9-1
		   rounding presents a minor problem... we first decide which way
		   we are rounding (based on given rounding direction and possibly
		   the bits of the mantissa that are to be discarded).
 just truncate 
 check all bits that we are discarding 
 no need to check for round up outside of range 
 check msb that we are discarding 
 no need to check for round up outside of range 
 zero rate - not representable 
 (1<<14) |  (exp<<9) | man;
 FireStream access routines 
 For DEEP-DOWN debugging these can be rigged to intercept accesses to
	 XXX Sanity check: the write pointer can be checked to be 
  udelay (5); 
 Test the "other" way one day... -- REW 
 This is for AAL0 where we put the chip in streaming mode 
 Process a real txdone entry. 
 Here we get the tx purge inhibit command ... 
 Action, I believe, is "don't do anything". -- REW 
 Single buffer packet 
 Fall through for streaming mode 
 Packet received OK.... 
		case 0x17: AAL 5 CRC32 error. IFF the length field is nonzero, a buffer
  Reassembly abort: no buffers. 
 Silently increment error counter. 
 Hmm. Haven't written the code to handle the others yet... -- REW 
  struct fs_receive_config rc;
  struct FS_QENTRY qe; 
 XXX AAL0 
 XXX handle qos parameters (rate limiting) ? 
 Increment the channel numer: take a free one next time.  
 We only have 32 channels 
 If we need to do RX, AND the RX is inuse, try the next 
 If we need to do TX, AND the TX is inuse, try the next 
 Ok, both are free! (or not needed) 
		 Allocate the "open" entry from the high priority txq. This makes
		   it most likely that the chip will notice it. It also prevents us
		   from having to wait for completion. On the other hand, we may
		   need to wait for completion anyway, to see if it completed
 XXX Change to VBR -- PVDL 
 ??? 
		 Docs are vague about this atm_hdr field. By the way, the FS
			 XXX Hmm. officially we're only allowed to do this if rounding 
 no rate cap 
 Just copied over the bits from Fujitsu -- REW 
 Unused 
 Unused 
 Unused 
 UTOPIA address, UDF, HEC: Unused -> 0 
		tc->rtag[0] = 0;  What should I do with routing tags??? 
		 We now use the "submit_command" function to submit commands to
		   the firestream. There is a define up near the definition of
		   that routine that switches this routine between immediate write
		   to the immediate command registers and queuing the commands in
		   the HPTXQ for execution. This last technique might be more
		   efficient if we know we're going to submit a whole lot of
		   commands in one go, but this driver is not setup to be able to
		   use such a construct. So it probably doen't matter much right
 The command is IMMediate and INQueue. The parameters are out-of-line.. 
 XXX Cleanup? -- Would just calling fs_close work??? -- REW 
 XXX clear tx inuse. Close TX part? 
 XXX -- Use defines. 
 Indicate we're done! 
		 We're going to wait for the last packet to get sent on this VC. It would
		   be impolite not to send them don't you think? 
		   XXX
		   We don't know which packets didn't get sent. So if we get interrupted in 
		   this sleep_on, we'll lose any reference to these packets. Memory leak!
		   On the other hand, it's awfully convenient that we can abort a "close" that
	 See App note XXX (Unpublished as of now) for the reason for the 
QE_CMD_IMM_INQ| vcc->channo, 0,0,0);
 This means that this is configured as a receive channel 
			 Disable the receive filter. Is 00 indeed an invalid receive
			   channel? -- REW.  Yes it is. -- Hang. Ok. I'll use -1
 Oops out of mem 
 Some function placeholders for functions we don't yet support. 
 ioctl:          fs_ioctl, 
 change_qos:     fs_change_qos, 
 For now implement these internally here...   
 phy_put:        fs_phy_put, 
 phy_get:        fs_phy_get, 
 The Windows driver says: 
	 Switch off FireStream Retry Limit Threshold 
	 The register at 0x28 is documented as "reserved", no further
                               PHY routines                              
 "PHY_CLEARALL means clear all registers. Numregisters is in "val". 
 Undocumented delay 
	 The "internal registers are documented to all reset to zero, but 
	   comments & code in the Windows driver indicates that the pools are
	 The same goes for the match channel registers, although those are
	 The Windows driver DOES write 0 to these registers somewhere in
	   the init sequence. However, a small hardware-feature, will
	   prevent reception of data on VPIVCI = 00 (Unless the channel
	   allocated happens to have no disabled channels that have a lower
 Clear the match channel registers. 
		 Configuration for the receive queue: 0: interrupt immediately,
		   no pre-warning to empty queues: We do our best to keep the
 This seems to be unreliable.... 
 Check if this gets going again if a pool ever runs out.  -- Yes, it
   does. I've seen "receive abort: no buffers" and things started
		
		  FIXME: following code encodes and decodes
		  machine pointers (could be 64-bit) into a
		  32-bit register.
 XXX Atomic_inc? 
 Configuration ? 
	 Aaargh! I'm ashamed. This costs more lines-of-code than the actual 
 print the bits in the ISR register. 
		 The FS_DEBUG things are unnecessary here. But this way it is
 items mentioned on RBRQ0 are from FP 0 or 1. 
 We don't use shadow registers. 
	 10ms  100 is 1 second. That should be enough, as AN3:9 says it takes
 This bit is documented as "RESERVED" 
 Try again after 10ms. 
 XXX fix for fs155 
 AN3: 10 
 XXX PHY 
 XXX Loopback mode enable... 
 That's what hang's driver does. Program to 0 
 XXX FS155 );
 Cal prescale etc 
 AN3: 11 
 AN3: 12 
 Changed from 0xff to 0x5a 
		  | (num   CELLOSCONF_COST)); after a hint from Hang. 
 Magic value by Hang 
		 We can chose the split arbitrarily. We might be able to 
 Address bits we can't use should be compared to 0. 
		 Manual (AN9, page 6) says ASF1=0 means compare Utopia address
		  too.  I can't find ASF1 anywhere. Anyway, we AND with just the
		  other bits, then compare with 0, which is exactly what we
 XXX Clean up..... 
 bitsbyte  , GFP_KERNEL);
 XXX Clean up..... 
 -- RAS1 : FS155 and 50 differ. Default (0) should be OK for both 
 -- RAS2 : FS50 only: Default is OK. 
 DMAMODE, default should be OK. -- REW 
 XXX undo all previous stuff... 
	 We want to be notified of most things. Just the statistics count
 We don't use shadow registers. 
 XXX Hit all the tx channels too! 
 XXX Wait a while for the chip to release all buffers. 
		 Hang the chip in "reset", prevent it clobbering memory that is
 SPDX-License-Identifier: GPL-2.0-only
  Driver for the Solos PCI ADSL2+ card, designed to support Linux by
   Traverse Technologies -- https:www.traverse.com.au
   Xrio Limited          -- http:www.xrio.com
  Copyright © 2008 Traverse Technologies
  Copyright © 2008 Intel Corporation
  Authors: Nathan Williams <nathan@traverse.com.au>
           David Woodhouse <dwmw2@infradead.org>
           Treker Chen <treker@xrio.com>
 For FPGA versions <= 2
 Old boards use ATMEL AD45DB161D flash 
 FPGA flash page size
 Solos flash page size
 FPGA block size
 Solos block size
 Current boards use M25PM25PE SPI flash 
 Sometimes it has a newline, sometimes it doesn't. 
		 We know we have enough space allocated for this; we allocated 
  Status packet has fields separated by \n, starting with a version number
  for the information therein. Fields are....
      packet version
      RxBitRate	(version >= 1)
      TxBitRate	(version >= 1)
      State		(version >= 1)
      LocalSNRMargin	(version >= 1)
      LocalLineAttn	(version >= 1)
 Anything but 'Showtime' is down 
 HardwareVersion 
 HardwareVariant 
 New FPGAs require driver version before permitting flash upgrades 
 Set mode to Chip Erase 
 Clear write flag 
 Set mode to Block Write 
 dev_info(&card->dev->dev, "Set FPGA Flash mode to Block Write\n"); 
 Copy block to buffer, swapping each 16 bits for Atmel flash 
 Specify block number and then trigger flash write 
 If we're up and running, just kick the tasklet to process TXRX 
	
	  Since fpga_tx() is going to need to read the flags under its lock,
	  it can return them to us so that we don't have to hit PCI MMIO
	  again for the same information
				 Use netdev_alloc_skb() because it adds NET_SKB_PAD of
				  headroom, and ensures we can route packets back out an
				  Ethernet interface (for example) without having to
				  reallocate. Adding NET_IP_ALIGN also ensures that both
 FIXME: Not really, surely? 
 Allocate RX skbs for any ports which need them 
			 Unlike the MMIO case (qv) we can't add NET_IP_ALIGN
			  here; the FPGA can only DMA to addresses which are
 We'll have to try again later 
 Remove any yet-to-be-transmitted packets from the pending queue 
	 Hold up vcc_destroy_socket() (our caller) until solos_bh() in the
	   tasklet has finished processing any incoming packets (and, more to
	 Theoretically we could just schedule the tasklet here, but
	
	  The queue lock is required for _writing_ to tx_mask, but we're
	  OK to read it here without locking. The only potential update
	  that we could race with is in fpga_queue() where it sets a bit
	  for a new port... but it's going to call this function again if
	  it's doing that, anyway.
 We're done with this skb already 
 Clean up and free oldskb now it's gone 
 For non-DMA TX, write the 'TX start' bit for all four ports simultaneously 
 This does _not_ include the size of the header 
 Stopped using Atmel flash after 0.03-38 
 All known FPGA versions so far 
 Fallback to MMIO doesn't work 
 Set RX empty flag for all ports 
 Disable IRQs 
 Reset FPGA 
 Release device from reset 
 SPDX-License-Identifier: GPL-2.0-or-later
  A FORE Systems 200E-series driver for ATM on Linux.
  Christophe Lizzi (lizzi@cnam.fr), October 1999-March 2003.
  Based on the PCA-200E driver from Uwe Dannowski (Uwe.Dannowski@inf.tu-dresden.de).
  This driver simultaneously supports PCA-200E and SBA-200E adapters
  on i386, alpha (untested), powerpc, sparc and sparc64 architectures.
 defer interrupt work to a tasklet 
 enable the debugging code of the buffer supply queues 
 ensure correct handling of 52-byte AAL0 SDUs expected by atmdump-like apps 
 override .config 
 currently unused 
 allocate and align a chunk of memory intended to hold the data behing exchanged
 free a chunk of memory 
  Allocate a DMA consistent chunk of memory intended to act as a communication
  mechanism (to hold descriptors, status, queues, etc.) shared by the driver
  and the adapter.
 returned chunks are page-aligned 
  Free a DMA consistent chunk of memory.
 first, reset the board to prevent further interrupts or data transfers 
 then, release all allocated resources 
 nothing to do for that state 
 nothing to do for that state 
 nothing to do for that state 
 nothing to do for that state 
 XXX shouldn't we start by deregistering the device? 
 nothing to do for that state 
     on big-endian hosts, the board is configured to convert
     on big-endian hosts, the board is configured to convert
 this is a 1 bit register 
 gain access to the PCA specific registers  
 request the PCA board to convert the endianess of slave RAM accesses 
     raise latency from 32 (default) to 192, as this seems to prevent NIC
       lockups (under heavy rx loads) due to continuous 'FIFO OUT full' condition.
 MAC address is stored as little-endian 
 CONFIG_PCI 
 gain access to the SBA specific registers  
 XXX hardwired interrupt level 
 get the supported DVMA burst sizes 
 CONFIG_SBUS 
 free copy of misaligned data 
 remove DMA mapping 
 vcc closed since the time the entry was submitted for tx? 
 vcc closed then immediately re-opened? 
		 when a vcc is closed, some PDUs may be still pending in the tx queue.
		   if the same vcc is immediately re-opened, those pending PDUs must
		   not be popped after the completion of their emission, as they refer
		   to the prior incarnation of that vcc. otherwise, sk_atm(vcc)->sk_wmem_alloc
		   would be decremented by the size of the (unrelated) skb, possibly
		   leading to a negative sk->sk_wmem_alloc count, ultimately freezing the vcc.
		   we thus bind the tx entry to the current incarnation of the vcc
		   when the entry is submitted for tx. When the tx later completes,
		   if the incarnation number of the tx entry does not match the one
		   of the vcc, then this implies that the vcc has been closed then re-opened.
 notify tx completion 
 check error condition 
 take the first buffer in the free buffer list 
 decrease accordingly the number of free rx buffers 
 compute total PDU length 
 reassemble segments 
 rebuild rx buffer address from rsd handle 
 Make device DMA transfer visible to CPU.  
 Now let the device get at it again.  
 push PDU 
 rebuild rx buffer address from rsd handle 
 re-insert the buffer into the free buffer list 
 then increment the number of free rx buffers 
 no more received PDUs 
 rewrite the rpd address to ack the received PDU 
 fairly balance the VCs over (identical) buffer schemes 
 the MTU is not used by the cp, except in the case of AAL0 
 XXX depends on CDVT 
 compute the data cells to idle cells ratio from the tx PCR 
 disable rate control 
 pseudo-CBR bandwidth requested? 
 reserve bandwidth 
 compute rate control parameters 
 new incarnation of the vcc 
 VC unusable before this flag is set 
 the vc is no longer considered as "in use" by fore200e_open() 
 release reserved bandwidth, if any 
 skip 4-byte cell header 
 this simply NUKES the PCA board 
 try to free completed tx queue entries 
 retry once again? 
     The dma_map call above implies a dma_sync so the device can use it,
      thus no explicit dma_sync call is necessary here.
 set tx rate control information 
 set the ATM header, common to all cells conveying the PDU 
 size is expressed in 32 byte blocks 
 shift the address, as we are in a bitfield 
 currently unused 
 not implemented 
 update rate control parameters 
 probably meaningless with SBA boards 
 allocate the array of receive buffers 
 allocate the receive buffer body 
 insert the buffer into the free buffer list 
 all the buffers are free, initially 
 allocate and align the array of status words 
 allocate and align the array of receive buffer descriptors 
 get the base address of the cp resident buffer supply queue entries 
 fill the host resident and cp resident buffer supply queue entries 
 allocate and align the array of status words 
 allocate and align the array of receive PDU descriptors 
 get the base address of the cp resident rx queue entries 
 fill the host resident and cp resident rx entries 
 set the head entry of the queue 
 allocate and align the array of status words 
 allocate and align the array of transmit PDU descriptors 
 get the base address of the cp resident tx queue entries 
 fill the host resident and cp resident tx entries 
         although there is a one-to-one mapping of tx queue entries and tpds,
	   we do not write here the DMA (physical) base address of each tpd into
	   the related cp resident entry, because the cp relies on this write
 set the head and tail entries of the queue 
 allocate and align the array of status words 
 get the base address of the cp resident cmd queue entries 
 fill the host resident and cp resident cmd entries 
 set the head entry of the queue 
 enable cp to host interrupts 
 issue the initialize command 
 the i960 monitor doesn't accept any new character if it has something to say 
 reported to be required by SBA cards on some sparc64 hosts 
 all done, board initialization is now complete 
 print bus-specific information 
 CONFIG_PCI 
 SPDX-License-Identifier: GPL-2.0-only
  driversatmsuni.c - SUNI PHY driver
  Supports the following:
  	PMC PM5346 SUNI LITE
  	PMC PM5350 SUNI 155 ULTRA
  	PMC PM5355 SUNI 622
 Written 1995-2000 by Werner Almesberger, EPFL LRCICA 
 latch counters 
 SONET_INS_FRAME is one-shot only 
  SONET vs. SDH Configuration
  Z0INS (register 0x06): 0 for SONET, 1 for SDH
  ENSS (register 0x3D): 0 for SONET, 1 for SDH
  LEN16 (register 0x28): 0 for SONET, 1 for SDH (na for SUNI 155 QUAD)
  LEN16 (register 0x50): 0 for SONET, 1 for SDH (na for SUNI 155 QUAD)
  S[1:0] (register 0x46): 00 for SONET, 10 for SDH
 interrupt on loss of signal 
 ... and clear SUNI interrupts 
 clear SUNI counters 
 clear kernel counters 
 let SAR driver worry about stopping interrupts 
 reset SUNI 
 disable all tests 
 idle cells 
  Copyright (c) 2000 ATecoM GmbH 
  The author may be reached at ecd@atecom.com.
  This program is free software; you can redistribute  it andor modify it
  under  the terms of  the GNU General  Public License as published by the
  Free Software Foundation;  either version 2 of the  License, or (at your
  option) any later version.
  THIS  SOFTWARE  IS PROVIDED   ``AS  IS'' AND   ANY  EXPRESS OR   IMPLIED
  WARRANTIES,   INCLUDING, BUT NOT  LIMITED  TO, THE IMPLIED WARRANTIES OF
  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN
  NO  EVENT  SHALL   THE AUTHOR  BE    LIABLE FOR ANY   DIRECT,  INDIRECT,
  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
  NOT LIMITED   TO, PROCUREMENT OF  SUBSTITUTE GOODS  OR SERVICES; LOSS OF
  USE, DATA,  OR PROFITS; OR  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  ANY THEORY OF LIABILITY, WHETHER IN  CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  You should have received a copy of the  GNU General Public License along
  with this program; if not, write  to the Free Software Foundation, Inc.,
  675 Mass Ave, Cambridge, MA 02139, USA.
 CONFIG_ATM_IDT77252_USE_SUNI 
  Debug HACKs.
 does not work, yet. 
  SCQ Handling.
  FBQ Handling.
  RSQ Handling.
  TSQ handling.
  ATM Interface.
 IO and Utility Bus                                                       
 0 
 0 
 0 
 0 
 0 
 1 
 0 
 1 
 0 
 0 
 0 
 0 
 1 
 1 
 0 
 0 
 0 
 0 
 0 
 0 
 0 
 0 
 1 
 1 
 0 
 0 
 0 
 0 
 0 
 0 
 1 
 0 
 HAVE_EEPROM 
 SCQ Handling                                                              
 RSQ Handling                                                              
 TSQ Handling                                                              
	
	  Fill Soft TST.
 FBQ Handling                                                              
 ATM Interface                                                             
 e > 9 
 XXX: make this configurable 
 XXX: make this configurable 
 Let SAR drop Video 
 Interrupt handler                                                         
 no interrupt for us 
 reset interrupt 
 entry written to TSQ  
 Incomplete CS-PDU has  
 TSQ 78 full           
 Timer overflow         
 Got complete CS-PDU    
 RSQ is 78 full        
 RSQ is full            
 Raw cell received      
 PHY device interrupt   
 enable receive path                  
 interrupt on complete PDU		
 interrupt enable on raw cells        
 interrupt on RSQ almost full         
 interrupt on timer overflow          
 interrupt on low free buffers        
 transmit operation enable            
 interrupt on transmit status         
 interrupt on transmit underrun       
 interrupt on TSQ almost full         
 enable PHY interrupts		
 Test RAW cell receive. 
 enable receive path           
 interrupt on complete PDU     
 interrupt enable on raw cells 
 interrupt on RSQ almost full  
 interrupt on timer overflow   
 interrupt on low free buffers 
 transmit operation enable     
 interrupt on transmit status  
 interrupt on xmit underrun    
 interrupt on TSQ almost full  
 Initialisation and Deinitialization of IDT77252                           
 set SRAM layout for THIS card 
 Initialize TCT 
 Initialize RCT 
 Initialize rate table  
 Fill RDF and AIR tables. 
 Initialize TSTs 
 last two are jumps 
 Initialize ABRSTD and Receive FIFO 
   P C I   C O N F I G U R A T I O N                           
 Set PCI Retry-Timeout and TRDY timeout 
 Reset Timer register 
   C H E C K   A N D   I N I T   S R A M                       
 preset size of connecton table, so that init_sram() knows about it 
 Use maximum fifo size 
 Receive Status Queue is 8k 
 Set CLP on idle cells 
 Do not send idle cells 
  A L L O C   R A M   A N D   S E T   V A R I O U S   T H I N G S 
 Initialize TSQ 
 Initialize RSQ 
 Little Endian Order   
 Initialize RAW Cell Handle Register  
	
	  this is a jhs hack to get around special functionality in the
	  phy driver for the atecom hardware; the functionality doesn't
	  exist in the linux atm suni driver
	 
	  it isn't the right way to do things, but as the guy from NIST
	  said, talking about their measurement of the fine structure
	  constant, "it's good enough for government work."
 HAVE_EEPROM 
	
	  XXX: <hack>
 jhs: was "tmp = dev_get(tname);" 
	
	  XXX: <hack>
 Set Maximum Deficit Count for now. 
 Probing of IDT77252 ABR SAR                                               
   P C I   C O N F I G U R A T I O N                           
   G E N E R I C   R E S E T                                   
 Software reset 
 Do the IO remapping... 
 CONFIG_ATM_IDT77252_USE_SUNI 
 SPDX-License-Identifier: GPL-2.0-only
 driversatmidt77105.c - IDT77105 (PHY) driver 
 Written 1999 by Greg Banks, NEC Australia <gnb@linuxfan.com>. Based on suni.c 
 link diagnostics 
 device back-pointer 
 storage of MCR reg while signal lost 
  Retrieve the value of one of the IDT77105's counters.
  `counter' is one of the IDT77105_CTRSEL_ constants.
 write the counter bit into PHY register 6 
 read the low 8 bits from register 4 
 read the high 8 bits from register 5 
  Timer function called every second to gather statistics
  from the 77105. This is done because the hw registers
  will overflow if not read at least once per second. The
  kernel's stats are much higher precision. Also, having
  a separate copy of the stats allows implementation of
  an ioctl which gathers the stats without zero'ing them.
  A separate timer func which handles restarting PHY chips which
  have had the cable re-inserted after being pulled out. This is
  done by polling the Good Signal Bit in the Interrupt Status
  register every 5 seconds. The other technique (checking Good
  Signal Bit in the interrupt handler) cannot be used because PHY
  interrupts need to be disabled when the cable is pulled out
  to avoid lots of spurious cell error interrupts.
 side effect: clears all interrupt status bits 
 Found signal again 
 flush the receive FIFO 
 re-enable interrupts 
 side effect: clears all interrupt status bits 
 Rx Signal Condition Change - line went up or down 
 signal detected again 
 This should not happen (restart timer does it) but JIC 
 signal lost 
                  Disable interrupts and stop all transmission and
                  reception - the restart timer will restore these.
 Rx FIFO Overrun -- perform a FIFO flush 
 normally don't care - just report in stats 
 initialise dev->signal from Good Signal Bit 
 initialise loop mode from hardware 
 enable interrupts, e.g. on loss of signal 
 clear 77105 counters 
 clear kernel counters 
 disable interrupts 
 detach private struct from atm_dev & free 
 turn off timers 
 SPDX-License-Identifier: GPL-2.0-only
 driversatmeni.c - Efficient Networks ENI155P device driver 
 Written 1995-2000 by Werner Almesberger, EPFL LRCICA 
  TODO:
  Show stoppers
   none
  Minor
   - OAM support
   - fix bugs listed below
  KNOWN BUGS:
  - may run into JK-JK bug and deadlock
  - should allocate UBR channel first
  - buffer space allocation algorithm is stupid
    (RX: should be maxSDU+maxdelayrate
     TX: should be maxSDU+min(maxSDU,maxdelayrate) )
  - doesn't support OAM cells
  - eni_put_free may hang if not putting memory fragments that _complete_
    2^n block (never happens in real life, though)
  NULL pointer checking
  Very extensive activity logging. Greatly improves bug detection speed but
  costs a few Mbps if enabled.
 CONFIG_ATM_ENI_DEBUG 
  NExx   must not be equal at end
  EExx   may be equal at end
  xxPJOK verify validity of pointer jumps
  xxPMOK operating on a circular buffer of "c" words
 Readwrite registers on card 
-------------------------------- utilities --------------------------------
dump_mem(eni_dev);
 we don't have more than 2^64 of anything ... 
 silence GCC 
 never leak data 
dump_mem(eni_dev);
dump_mem(eni_dev);
----------------------------------- RX ------------------------------------
 immediately halt adapter 
 dump useful information 
 really stop it 
 GCC, shut up 
 PDU plus descriptor 
 @@@ actually, skip is always == 1 ... 
 may work with some PCI chipsets ... 
 works only with some PCI chipsets ... 
 recommended 
 probably useless if RX_4W, RX_8W, ... 
	
	  Can I move the dma_wr pointer by 2j+1 positions without overwriting
	  data that hasn't been read (position of dma_rd) yet ?
 @@@ +1 is ugly 
 could do a full fallback, but that might be more expensive 
  TODO: should check whether direct copies (without DMA setup, dequeuing on
  interrupt, etc.) aren't much faster for AAL0
 no HEC 
 -trailer(2)+header(1) 
 ^ trailer length (8) 
 clear IN_SERVICE flag 
	
	  If new data has arrived between evaluating the while condition and
	  clearing IN_SERVICE, we wouldn't be notified until additional data
	  follows. So we have to loop again to be sure.
 nasty but we try to go on anyway 
 @@@ nope, doesn't work 
 set up VCI descriptor 
 descr, read = 0 
 write, state, count = 0 
 now it counts 
 block receiver 
 wait for receiver to become idle 
 discard pending cell 
 don't accept any new ones 
 wait for RX queue to drain 
 transition service->rx: rxing++, servicing-- 
----------------------------------- TX ------------------------------------
 don't complain anymore 
 may work with some PCI chipsets ... 
 recommended 
 probably useless if TX_8W or TX_16W 
 probably useless if TX_4W, TX_8W, ... 
 in words 
 Enable this for testing with the "align" program 
 should work now 
	
	  Potential future IP speedup: make hard_header big enough to put
	  segmentation descriptor directly into PDU. Saves: 4 slave writes,
	  1 DMA xfer & 2 DMA'ed bytes (protocol layering is for wimps :-)
 check space in buffer 
			 cell without HEC plus segmentation header (includes
 add AAL5 trailer 
 add segmentation header 
	
	  Can I move tx_pos by size bytes without getting closer than TX_GAP
	  to the read pointer ? TX_GAP means to leave some space for what
	  the manual calls "too close".
 check DMA 
	dma_size = 3;  JK for descriptor and final fill, plus final size
 prepare DMA queue entries 
 @@@ well, this doesn't work anyway 
 JK for AAL5 trailer - AAL0 doesn't need it, but who cares ... 
 store frame 
printk("dsc = 0x%08lx\n",(unsigned long) readl(tx->send+tx->tx_pos4));
 2^(((x+2)^2-(x+2))2+1) 
 else fail later 
 for gcc 
 nothing to do 
 wait for TX queue to drain 
		
		  Looping a few times in here is probably far cheaper than
		  keeping track of TX completions all the time, so let's poll
		  a bit ...
--------------------------------- common ----------------------------------
 may become useful again when tuning things 
	
	  Must handle these two right now, because reading ISA doesn't clear
	  them, so they re-occur and we never make it to the tasklet. Since
	  they're rare, we don't mind the occasional invocation of eni_tasklet
	  with eni_dev->events == 0.
 poll_tx ? 
 poll_rx ? 
--------------------------------- entries ---------------------------------
  0- 3 
  4- 7 
  8-11 
 12-15 
 16-19 
 20-23 
 24-27 
 28-31 
 10 usecs  \
 10 usecs  \
 start operation 
 send address 
 get ack 
 get ack 
 stop operation 
 id may not be present in ASIC Tonga boards - check this @@@ 
 TODO: should shrink allocation now 
 TODO: check for non-SUNI, check for TAXI ? 
 determine addresses of internal tables 
 initialize memory management 
 clear VCI table 
	
	  byte_addr  free (k)
	  0x00000000     512  VCI table
	  0x00004000	  496  RX DMA
	  0x00005000	  492  TX DMA
	  0x00006000	  488  service list
	  0x00007000	  484  buffers
	  0x00080000	    0  end (512kB)
 Tonga uses SBus INTReq1 
 clear Midway interrupts 
 deallocate memory 
foo();
 for eni_close after open_rx 
 should power down SUNI while !ref_count @@@ 
	
	  Walk through the send buffer and patch the rate information in all
	  segmentation buffer descriptors of this VCC.
 FPGA  },
 ASIC  },
 dummy for sizeof 
 @@@ since exit routine not defined, this module can not be unloaded 
 SPDX-License-Identifier: GPL-2.0-or-later
  vt1211.c - driver for the VIA VT1211 Super-IO chip integrated hardware
             monitoring features
  Copyright (C) 2006 Juerg Haefliger <juergh@gmail.com>
  This driver is based on the driver for kernel 2.4 by Mark D. Studebaker
  and its port to kernel 2.6 by Lars Ekman.
 ---------------------------------------------------------------------
  Registers
  The sensors are defined as follows.
  Sensor          Voltage Mode   Temp Mode   Notes (from the datasheet)
  --------        ------------   ---------   --------------------------
  Reading 1                      temp1       Intel thermal diode
  Reading 3                      temp2       Internal thermal diode
  UCH1Reading2   in0            temp3       NTC type thermistor
  UCH2            in1            temp4       +2.5V
  UCH3            in2            temp5       VccP
  UCH4            in3            temp6       +5V
  UCH5            in4            temp7       +12V
  3.3V            in5                        Internal VDD (+3.3V)
 Voltages (in) numbered 0-5 (ix) 
 Temperatures (temp) numbered 0-6 (ix) 
 Fans numbered 0-1 (ix) 
 PWMs numbered 0-1 (ix) 
 Auto points numbered 0-3 (ap) 
 Miscellaneous registers 
 In, temp & fan alarm bits 
 ---------------------------------------------------------------------
  Data structures and manipulation thereof
 true if following fields are valid 
 In jiffies 
 Register values 
 Read once at init time 
 Read once at init time 
 ix = [0-5] 
 ix = [0-6] 
  in5 (ix = 5) is special. It's the internal 3.3V so it's scaled in the
  driver according to the VT1211 BIOS porting guide
  temp1 (ix = 0) is an intel thermal diode which is scaled in user space.
  temp2 (ix = 1) is the internal temp diode so it's scaled in the driver
  according to some measurements that I took on an EPIA M10000.
  temp3-7 are thermistor based so the driver returns the voltage measured at
  the pin (range 0V - 2.2V).
 ---------------------------------------------------------------------
  Super-IO constants and functions
  Configuration index port registers
  The vt1211 can live at 2 different addresses so we need to probe both
 Configuration registers 
 logical device number 
 device ID 
 device revision 
 HW monitor active 
 base IO address 
 VT1211 device ID 
 VT1211 logical device numbers 
 HW monitor 
 ---------------------------------------------------------------------
  Device IO access
 registers cache is refreshed after 1 second 
 read VID 
 voltage (in) registers 
 temp registers 
 fan & pwm registers 
 pwm & temp auto point registers 
 alarm registers 
 ---------------------------------------------------------------------
  Voltage sysfs interfaces
  ix = [0-5]
 ---------------------------------------------------------------------
  Temperature sysfs interfaces
  ix = [0-6]
 ---------------------------------------------------------------------
  Fan sysfs interfaces
  ix = [0-1]
 sync the data cache 
 ---------------------------------------------------------------------
  PWM sysfs interfaces
  ix = [0-1]
 sync the data cache 
			
			  disable SmartGuardian if both PWM outputs are
			  disabled
 calculate tmp = log2(val) 
 sync the data cache 
 sync the data cache 
 ---------------------------------------------------------------------
  PWM auto point definitions
  ix = [0-1]
  ap = [0-3]
  pwm[ix+1]_auto_point[ap+1]_temp mapping table:
  Note that there is only a single set of temp auto points that controls both
  PWM controllers. We still create 2 sets of sysfs files to make it look
  more consistent even though they map to the same registers.
  ix ap : description
  -------------------
  0  0  : pwm12 off temperature        (pwm_auto_temp[0])
  0  1  : pwm12 low speed temperature  (pwm_auto_temp[1])
  0  2  : pwm12 high speed temperature (pwm_auto_temp[2])
  0  3  : pwm12 full speed temperature (pwm_auto_temp[3])
  1  0  : pwm12 off temperature        (pwm_auto_temp[0])
  1  1  : pwm12 low speed temperature  (pwm_auto_temp[1])
  1  2  : pwm12 high speed temperature (pwm_auto_temp[2])
  1  3  : pwm12 full speed temperature (pwm_auto_temp[3])
 sync the data cache 
  pwm[ix+1]_auto_point[ap+1]_pwm mapping table:
  Note that the PWM auto points 0 & 3 are hard-wired in the VT1211 and can't
  be changed.
  ix ap : description
  -------------------
  0  0  : pwm1 off                   (pwm_auto_pwm[0][0], hard-wired to 0)
  0  1  : pwm1 low speed duty cycle  (pwm_auto_pwm[0][1])
  0  2  : pwm1 high speed duty cycle (pwm_auto_pwm[0][2])
  0  3  : pwm1 full speed            (pwm_auto_pwm[0][3], hard-wired to 255)
  1  0  : pwm2 off                   (pwm_auto_pwm[1][0], hard-wired to 0)
  1  1  : pwm2 low speed duty cycle  (pwm_auto_pwm[1][1])
  1  2  : pwm2 high speed duty cycle (pwm_auto_pwm[1][2])
  1  3  : pwm2 full speed            (pwm_auto_pwm[1][3], hard-wired to 255)
 ---------------------------------------------------------------------
  Miscellaneous sysfs interfaces (VRM, VID, name, and (legacy) alarms)
 ---------------------------------------------------------------------
  Device attribute structs
 ---------------------------------------------------------------------
  Device registration and initialization
 set VRM 
 Read (and initialize) UCH config 
	
	  Initialize the interrupt mode (if request at module load time).
	  The VT1211 implements 3 different modes for clearing interrupts:
	  0: Clear INT when status register is read. Regenerate INT as long
	     as temp stays above hysteresis limit.
	  1: Clear INT when status register is read. DON'T regenerate INT
	     until temp falls below hysteresis limit and exceeds hot limit
	     again.
	  2: Clear INT when temp falls below max limit.
	 
	  The driver only allows to force mode 0 since that's the only one
	  that makes sense for 'sensors'
 Fill in some hard wired values into our data struct 
 Initialize the VT1211 chip 
 Create sysfs interface files 
 Register device 
 Sets global pdev as a side effect 
 SPDX-License-Identifier: GPL-2.0-or-later
  lm93.c - Part of lm_sensors, Linux kernel modules for hardware monitoring
  AuthorMaintainer: Mark M. Hoffman <mhoffman@lightlink.com>
 	Copyright (c) 2004 Utilitek Systems, Inc.
  derived in part from lm78.c:
 	Copyright (c) 1998, 1999  Frodo Looijaard <frodol@dds.nl>
  derived in part from lm85.c:
 	Copyright (c) 2002, 2003 Philip Pokorny <ppokorny@penguincomputing.com>
 	Copyright (c) 2003       Margit Schubert-While <margitsw@t-online.de>
  derived in part from w83l785ts.c:
 	Copyright (c) 2003-2004 Jean Delvare <jdelvare@suse.de>
  Ported to Linux 2.6 by Eric J. Bowersox <ericb@aspsys.com>
 	Copyright (c) 2005 Aspen Systems, Inc.
  Adapted to 2.6.20 by Carsten Emde <cbe@osadl.org>
 	Copyright (c) 2006 Carsten Emde, Open Source Automation Development Lab
  Modified for mainline integration by Hans J. Koch <hjk@hansjkoch.de>
 	Copyright (c) 2007 Hans J. Koch, Linutronix GmbH
 LM93 REGISTER ADDRESSES 
 miscellaneous 
 alarm values start here 
 voltage inputs: in1-in16 (nr => 0-15) 
 temperature inputs: temp1-temp4 (nr => 0-3) 
 temp[1-4]_auto_boost (nr => 0-3) 
 #PROCHOT inputs: prochot1-prochot2 (nr => 0-1) 
 fan tach inputs: fan1-fan4 (nr => 0-3) 
 pwm outputs: pwm1-pwm2 (nr => 0-1, reg => 0-3) 
 GPIO input state 
 vid inputs: vid1-vid2 (nr => 0-1) 
 vccp1 & vccp2: VID relative inputs (nr => 0-1) 
 temp[1-4]_auto_boost_hyst 
 temp[1-4]_auto_pwm_[min|hyst] 
 prochot_override & prochot_interval 
 temp[1-4]_auto_base (nr => 0-3) 
 temp[1-4]_auto_offsets (step => 0-11) 
 #PROCHOT & #VRDHOT PWM ramp control 
 miscellaneous 
 error masks 
 LM93 REGISTER VALUES 
 LM94 REGISTER VALUES 
 SMBus capabilities 
 Addresses to scan 
 Insmod parameters 
 Driver data 
 LM93 BLOCK READ COMMANDS 
  ALARMS: SYSCTL format described further below
  REG: 64 bits in 8 registers, as immediately below
  Client-specific data
 In jiffies 
 client update function 
 true if following fields are valid 
 register values, arranged by block read groups 
	
	  temp1 - temp4: unfiltered readings
	  temp1 - temp2: filtered readings
 vin1 - vin16: readings 
 prochot1 - prochot2: readings 
 fan counts 1-4 => 14-bits, LE, left justified 
 block6 has a lot of data we don't need 
 vin1 - vin16: low and high limits 
 fan count limits 1-4 => same format as block5 
 pwm control registers (2 pwms, 4 regs) 
 autopwm base temp and offset temp registers 
 master config register 
 VID1 & VID2 => register format, 6-bits, right justified 
 prochot1 - prochot2: limits 
 vccp1 & vccp2 (in7 & in8): VID relative limits (register format) 
 GPIO input state (register format, i.e. inverted) 
 #PROCHOT override (register format) 
 #PROCHOT intervals (register format) 
 Fan Boost Temperatures (register format) 
 Fan Boost Hysteresis (register format) 
 Temperature Zone Min. PWM & Hysteresis (register format) 
 #PROCHOT & #VRDHOT PWM Ramp Control 
 miscellaneous setup regs 
	
	  The two PWM CTL2  registers can read something other than what was
	  last written for the OVR_DC field (duty cycle override).  So, we
	  save the user-commanded value here.
  VID:	mV
  REG: 6-bits, right justified, always using Intel VRMVRD 10
 min, max, and nominal register values, per channel (u8) 
  Values from the datasheet. They're here for documentation only.
  static const u8 lm93_vin_reg_nom[16] = {
  0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0,
  0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x40, 0xc0,
  };
 min, max, and nominal voltage readings, per channel (mV)
  Values from the datasheet. They're here for documentation only.
  static const unsigned long lm93_vin_val_nom[16] = {
  927,  927,  927, 1200, 1500, 1500, 1200, 1200,
  3300, 5000, 2500, 1969,  984,  984,  309, 3300,
  };
  IN: mV, limits determined by channel nr
  REG: scaling determined by channel nr
 range limit 
 try not to lose too much precision here 
 convert 
 vid in mV, upper == 0 indicates low limit, otherwise upper limit 
  vid in mV , upper == 0 indicates low limit, otherwise upper limit
  upper also determines which nibble of the register is returned
  (the other nibble will be 0x0)
  TEMP: 11000 degrees C (-128C to +127C)
  REG: 1Cbit, two's complement
  TEMP: 11000 degrees C (-128C to +127C)
  REG: 1Cbit, two's complement
 Determine 4-bit temperature offset resolution 
 mode: 0 => 1Cbit, nonzero => 0.5Cbit 
  This function is common to all 4-bit temperature offsets
  reg is 4 bits right justified
  mode 0 => 1Cbit, mode !0 => 0.5Cbit
  This function is common to all 4-bit temperature offsets
  returns 4 bits right justified
  mode 0 => 1Cbit, mode !0 => 0.5Cbit
 0 <= nr <= 3 
 temp1-temp2 (nr=0,1) use lower nibble 
 temp3-temp4 (nr=2,3) use upper nibble 
  TEMP: 110 degrees C (0C to +15C (mode 0) or +7.5C (mode non-zero))
  REG: 1.0Cbit (mode 0) or 0.5Cbit (mode non-zero)
  0 <= nr <= 3
 temp1-temp2 (nr=0,1) use lower nibble 
 temp3-temp4 (nr=2,3) use upper nibble 
  PWM: 0-255 per sensors documentation
  REG: 0-13 as mapped below... right justified
   0.00%  0x40, 
  31.25%  0x60, 
  43.75%  0x80, 
  56.25%  0xa0, 
  68.75%  0xc0, 
  81.25%  0xe0, 
  93.75%  0xff, 
 14, 15 are reserved and should never occur 
   0.00%  0x40, 
  28.57%  0x52, 
  35.71%  0x64, 
  42.86%  0x76, 
  50.00%  0x89, 
  57.14%  0xb6, 
  85.71%  0xff, 
 14, 15 are reserved and should never occur 
 round up to nearest match 
 can fall through with i==13 
  RPM: (82.5 to 1350000)
  REG: 14-bits, LE, left justified
  PWM FREQ: HZ
  REG: 0-7 as mapped below
 round up to nearest match 
 can fall through with i==0 
  TIME: 1100 seconds
  REG: 0-7 as mapped below
 round up to nearest match 
 can fall through with i==8 
  RAMP: 1100 seconds
  REG: 50mSbit 4-bits right justified
  PROCHOT: 0-255, 0 => 0%, 255 => > 96.6%
  REG: (same)
  PROCHOT-INTERVAL: 73 - 37200 (1100 seconds)
  REG: 0-9 as mapped below
 round up to nearest match 
 can fall through with i==9 
  GPIO: 0-255, GPIO0 is LSB
  REG: inverted
  alarm bitmask definitions
  The LM93 has nearly 64 bits of error status... I've pared that down to
  what I think is a useful subset in order to fit it into 32 bits.
  Especially note that the #VRD_HOT alarms are missing because we provide
  that information as values in another sysfs file.
  If libsensors is extended to support 64 bit values, this could be revisited.
 retry in case of read errors 
 <TODO> what to return in case of error? 
 <TODO> how to handle write errors? 
 retry in case of read errors 
 <TODO> what to return in case of error? 
 <TODO> how to handle write errors? 
  read block data into values, retry if not expected length
  fbn => index to lm93_block_read_cmds table
  (Fixed Block Number - section 14.5.2 of LM93 datasheet)
 <TODO> what to do in case of error? 
 update routine for data that has no corresponding SMBus block command 
 temp1 - temp4: limits 
 config register 
 vid1 - vid2: values 
 prochot1 - prochot2: limits 
 vccp1 - vccp2: VID relative limits 
 GPIO input state 
 #PROCHOT override state 
 #PROCHOT intervals 
 Fan Boost Temperature registers 
 Fan Boost Temperature Hyst. registers 
 Temperature Zone Min. PWM & Hysteresis registers 
 #PROCHOT & #VRDHOT PWM Ramp Control register 
 misc setup registers 
 write back alarm values to clear 
 update routine which uses SMBus block data commands 
 in1 - in16: values & limits 
 temp1 - temp4: values 
 prochot1 - prochot2: values 
 fan1 - fan4: values & limits 
 pmw control registers 
 alarm values 
 autopwm registers 
 update routine which uses SMBus byteword data commands only 
 in1 - in16: values & limits 
 temp1 - temp4: values 
 prochot1 - prochot2: values 
 fan1 - fan4: values & limits 
 pwm control registers 
 alarm values 
 autopwm (base temp) registers 
 autopwm (offset temp) registers 
 following are the sysfs callback functions 
 force 0.5Cbit mode 
 force 0.5Cbit mode 
 force 0.5Cbit mode 
  some tedious bit-twiddling here to deal with the register format:
 	data->sf_tach_to_pwm: (tach to pwm mapping bits)
 		bit |  7  |  6  |  5  |  4  |  3  |  2  |  1  |  0
 		     T4:P2 T4:P1 T3:P2 T3:P1 T2:P2 T2:P1 T1:P2 T1:P1
 	data->sfc2: (enable bits)
 		bit |  3  |  2  |  1  |  0
 		       T4    T3    T2    T1
 extract the relevant mapping 
 if there's a mapping and it's enabled 
  helper function - must grab data->update_lock before calling
  fan is 0-3, indicating fan1-fan4
 insert the new mapping and write it out 
 insert the enable bit and write it out 
 sanity test, ignore the write otherwise 
 can't enable if pwm freq is 22.5KHz 
 show user commanded value if enabled 
 show present hw value if manual pwm disabled 
 save user commanded value 
 manual override enabled ? 
 enable manual override, set PWM to max 
 enable manual override 
 disable manual override 
  helper function - must grab data->update_lock before calling
  pwm is 0-1, indicating pwm1-pwm2
  this disables smart tach for all tach channels bound to the given pwm
 collapse the mapping into a mask of enable bits 
 disable smart tach according to the mask 
 ctl4 == 0 -> 22.5KHz -> disable smart tach 
 configure VID pin input thresholds 
 enable #ALERT pin 
 enable ASF mode for BMC status registers 
 set sleep state to S0 
 unmask #VRDHOT and dynamic VCCP (if nec) error events 
 start monitoring 
 spin until ready 
 Return 0 if detection is successful, -ENODEV otherwise 
 detection 
 choose update routine based on bus capabilities 
 housekeeping 
 initialize the chip 
 SPDX-License-Identifier: GPL-2.0-or-later
  sbrmi.c - hwmon driver for a SB-RMI mailbox
            compliant AMD SoC device.
  Copyright (C) 2020-2021 Advanced Micro Devices, Inc.
 Do not allow setting negative power limit 
 Mask for Status Register bit[1] 
 Software Interrupt for triggering 
  SB-RMI supports soft mailbox service request to MP1 (power management
  firmware) through SBRMI inboundoutbound message registers.
  SB-RMI message IDs
 SB-RMI registers 
 Each client has this additional data 
	
	  Enable the SB-RMI Software alert status
	  by writing 0 to bit 4 of Control register(0x1)
 Indicate firmware a command is to be serviced 
 Write the command to SBRMI::InBndMsg_inst0 
	
	  For both read and write the initiator (BMC) writes
	  Command Data In[31:0] to SBRMI::InBndMsg_inst[4:1]
	  SBRMI_x3C(MSB):SBRMI_x39(LSB)
	
	  Write 0x01 to SBRMI::SoftwareInterrupt to notify firmware to
	  perform the requested read or write command
	
	  Firmware will write SBRMI::Status[SwAlertSts]=1 to generate
	  an ALERT (if enabled) to initiator (BMC) to indicate completion
	  of the requested command
	
	  For a read operation, the initiator (BMC) reads the firmware
	  response Command Data Out[31:0] from SBRMI::OutBndMsg_inst[4:1]
	  {SBRMI_x34(MSB):SBRMI_x31(LSB)}.
	
	  BMC must write 1'b1 to SBRMI::Status[SwAlertSts] to clear the
	  ALERT to initiator
 hwmon power attributes are in microWatt 
	
	  hwmon power attributes are in microWatt
	  mailbox readwrite is in mWatt
 Enable alert for SB-RMI sequence 
 Cache maximum power limit 
 SPDX-License-Identifier: GPL-2.0-or-later
  w83792d.c - Part of lm_sensors, Linux kernel modules for hardware
 	       monitoring
  Copyright (C) 2004, 2005 Winbond Electronics Corp.
 			    Shane Huang,
 			    Rudolf Marek <r.marek@assembler.cz>
  Note:
  1. This driver is only for 2.6 kernel, 2.4 kernel need a different driver.
  2. This driver is only for Winbond W83792D C version device, there
      are also some motherboards with B version W83792D device. The
      calculation method to in6-in7(measured value, limits) is a little
      different between C and B version. C or B version can be identified
      by CR[0x49h].
  Supports following chips:
  Chip		#vin	#fanin	#pwm	#temp	wchipid	vendid	i2c	ISA
  w83792d	9	7	7	3	0x7a	0x5ca3	yes	no
 Addresses to scan 
 Insmod parameters 
 The W83792D registers 
 Vcore A in DataSheet 
 Vcore B in DataSheet 
 VIN0 in DataSheet 
 VIN1 in DataSheet 
 VIN2 in DataSheet 
 VIN3 in DataSheet 
 5VCC in DataSheet 
 5VSB in DataSheet 
 VBAT in DataSheet 
 Low Bits I in DataSheet 
 Low Bits II in DataSheet 
 Vcore A High Limit in DataSheet 
 Vcore B High Limit in DataSheet 
 VIN0 High Limit in DataSheet 
 VIN1 High Limit in DataSheet 
 VIN2 High Limit in DataSheet 
 VIN3 High Limit in DataSheet 
 5VCC High Limit in DataSheet 
 5VSB High Limit in DataSheet 
 VBAT High Limit in DataSheet 
 Vcore A Low Limit in DataSheet 
 Vcore B Low Limit in DataSheet 
 VIN0 Low Limit in DataSheet 
 VIN1 Low Limit in DataSheet 
 VIN2 Low Limit in DataSheet 
 VIN3 Low Limit in DataSheet 
 5VCC Low Limit in DataSheet 
 5VSB Low Limit in DataSheet 
 VBAT Low Limit in DataSheet 
 FAN 1 Count in DataSheet 
 FAN 2 Count in DataSheet 
 FAN 3 Count in DataSheet 
 FAN 4 Count in DataSheet 
 FAN 5 Count in DataSheet 
 FAN 6 Count in DataSheet 
 FAN 7 Count in DataSheet 
 FAN 1 Count Low Limit in DataSheet 
 FAN 2 Count Low Limit in DataSheet 
 FAN 3 Count Low Limit in DataSheet 
 FAN 4 Count Low Limit in DataSheet 
 FAN 5 Count Low Limit in DataSheet 
 FAN 6 Count Low Limit in DataSheet 
 FAN 7 Count Low Limit in DataSheet 
 FAN Configuration in DataSheet 
 contains FAN2 and FAN1 Divisor 
 contains FAN4 and FAN3 Divisor 
 contains FAN6 and FAN5 Divisor 
 contains FAN7 Divisor. 
 FAN 1 Duty Cycle, be used to control 
 FAN 2 Duty Cycle, be used to control 
 FAN 3 Duty Cycle, be used to control 
 FAN 4 Duty Cycle, be used to control 
 FAN 5 Duty Cycle, be used to control 
 FAN 6 Duty Cycle, be used to control 
 FAN 7 Duty Cycle, be used to control 
 TEMP 1 in DataSheet 
 TEMP 1 Over in DataSheet 
 TEMP 1 Hyst in DataSheet 
 TEMP 2 in DataSheet 
 TEMP 2(0.5 deg) in DataSheet 
 TEMP 2 Over High part in DataSheet 
 TEMP 2 Over Low part in DataSheet 
 TEMP 2 Thyst High part in DataSheet 
 TEMP 2 Thyst Low part in DataSheet 
 TEMP 3 in DataSheet 
 TEMP 3(0.5 deg) in DataSheet 
 TEMP 3 Over High part in DataSheet 
 TEMP 3 Over Low part in DataSheet 
 TEMP 3 Thyst High part in DataSheet 
 TEMP 3 Thyst Low part in DataSheet 
 SmartFanI: Fan1 target value 
 SmartFanI: Fan2 target value 
 SmartFanI: Fan3 target value 
 (bit3-0)SmartFan Fan1 tolerance 
 (bit7-4)SmartFan Fan2 tolerance 
 (bit3-0)SmartFan Fan3 tolerance 
 SmartFanII: Fan1 temp point 1 
 SmartFanII: Fan1 temp point 2 
 SmartFanII: Fan1 temp point 3 
 SmartFanII: Fan1 temp point 4 
 SmartFanII: Fan2 temp point 1 
 SmartFanII: Fan2 temp point 2 
 SmartFanII: Fan2 temp point 3 
 SmartFanII: Fan2 temp point 4 
 SmartFanII: Fan3 temp point 1 
 SmartFanII: Fan3 temp point 2 
 SmartFanII: Fan3 temp point 3 
 SmartFanII: Fan3 temp point 4 
 (bit3-0) SmartFanII: Fan1 Non-Stop 
 (bit7-4) SmartFanII: Fan1 Level 1 
 (bit7-4) SmartFanII: Fan1 Level 2 
 (bit3-0) SmartFanII: Fan1 Level 3 
 (bit3-0) SmartFanII: Fan2 Non-Stop 
 (bit7-4) SmartFanII: Fan2 Level 1 
 (bit7-4) SmartFanII: Fan2 Level 2 
 (bit3-0) SmartFanII: Fan2 Level 3 
 (bit3-0) SmartFanII: Fan3 Non-Stop 
 (bit7-4) SmartFanII: Fan3 Level 1 
 (bit7-4) SmartFanII: Fan3 Level 2 
 (bit3-0) SmartFanII: Fan3 Level 3 
 realtime status register1 
 realtime status register2 
 realtime status register3 
 Bit 5: Case Open status bit 
 Bit 7: Case Open CLR_CHSReset bit 
 control in0in1 's limit modifiability 
  Conversions. Rounding and limit checking is only done on the TO_REG
  variants. Note that you should be a bit careful with which arguments
  these macros are called: arguments may be evaluated more than once.
  Fixing this is just not worth it.
 for temp1 
 for temp2 and temp3, because they need additional resolution 
 true if following fields are valid 
 In jiffies 
 Register value 
 Register value 
 Register value 
 Additional resolution to voltage in6-0 
 Register value 
 Register value 
 current, over, thyst 
 Register value 
 Register encoding, shifted right 
 The 7 PWM outputs 
 realtime status register encoding,combined 
 Chassis status 
 Smart FanI: Fan1,2,3 target value 
 Fan1,2,3 tolerance(Smart Fan III) 
 Smart FanII: Fan1,2,3 temperature points 
 Smart FanII: Fan1,2,3 duty cycle levels 
 in7 and in8 do not have low bits, but the formula still works 
  The SMBus locks itself. The Winbond W83792D chip has a bank register,
  but the driver only accesses registers in bank 0, so we don't have
  to switch banks and lock access between switches.
 following are the sysfs callback functions 
  Note: we save and restore the fan minimum here, because its value is
  determined in part by the fan divisor.  This follows the principle of
  least surprise; the user doesn't expect the fan minimum to change just
  because the divisor changed.
u8 reg;
 Save fan_min 
 Restore fan_min 
 readwrite the temperature1, includes measured value and limits 
 readwrite the temperature2-3, includes measured value and limits 
 get realtime status of all sensors items: voltage, temp, fan 
 manual mode 
thermal cruiseSmart Fan I 
 Smart Fan II 
 manual mode 
 Smart Fan II 
 thermal cruiseSmart Fan I 
 PWM mode 
 DC mode 
 Force cache refresh 
 For Smart Fan I  Thermal Cruise 
 For Smart Fan IThermal Cruise and Smart Fan II 
 For Smart Fan II 
 Return 0 if detection is successful, -ENODEV otherwise 
 Check for Winbond ID if in bank 0 
 is Bank0 
	
	  If Winbond chip, address of chip and W83792D_REG_I2C_ADDR
	  should match
  Put it now into bank 0 and Vendor ID High Byte 
 Determine the chip type. 
 Initialize the chip 
 A few vars need to be filled upon startup 
 Register sysfs hooks 
	
	  Read GPIO enable register to check if pins for fan 4,5 are used as
	  GPIO
	
	  Clear the bit6 of W83792D_REG_VID_IN_B(set it into 0):
	  W83792D_REG_VID_IN_B bit6 = 0: the highlow limit of
	  vin0vin1 can be modified by user;
	  W83792D_REG_VID_IN_B bit6 = 1: the highlow limit of
	  vin0vin1 auto-updated, can NOT be modified by user.
 Start monitoring 
 Update the voltages measured value and limits 
 Update the Fan measured value and limits 
 Update the PWMDC Value and PWMDC flag 
 Update the Fan Divisor 
 Update the realtime status 
 Update CaseOpen status and it's CLR_CHS. 
 Update Thermal CruiseSmart Fan I target value 
 Update Smart Fan III tolerance 
 Update Smart Fan II temperature points 
 Update Smart Fan II duty cycle levels 
 SPDX-License-Identifier: GPL-2.0-or-later
  A hwmon driver for the IBM System Director Active Energy Manager (AEM)
  temperaturepowerenergy sensors and capping functionality.
  Copyright (C) 2008 IBM
  Author: Darrick J. Wong <darrick.wong@oracle.com>
 AEM 2.x has more energy registers 
 AEM 2.x needs more sensor files 
 In jiffies 
 Function and buffer to update sensors 
	
	  AEM 1.x sensors:
	  Available sensors:
	  Energy meter
	  Power meter
	 
	  AEM 2.x sensors:
	  Two energy meters
	  Two power meters
	  Two temperature sensors
	  Six power cap registers
 sysfs attrs 
 energy use in mJ 
 power sampling interval in ms 
 Everything past here is for AEM2 only 
 power caps in dW 
 exhaust temperature in C 
 Data structures returned by the AEM firmware 
 These are used to find AEM1 instances 
 These are used to find AEM2 instances 
 These are used to query sensors 
 Data structures to talk to the IPMI layer 
 Functions to talk to the IPMI layer 
 Initialize IPMI address, message buffers and user data 
 Initialize IPMI address 
 Initialize message buffers 
 Create IPMI messaging interface user 
 Send an IPMI command 
 Dispatch IPMI messages to callers 
 Sensor support functions 
 Read a sensor value; must be called with data->lock held 
 Use preallocated rx buffer 
 AEM registers are 1, 2, 4 or 8 bytes 
 Update AEM energy registers 
 Update all AEM1 sensors 
 Update all AEM2 sensors 
 Delete an AEM instance 
 Probe functions for AEM1 devices 
 Retrieve version and module handle for an AEM1 instance 
 Find and initialize one AEM1 instance 
 Copy instance data 
 Create sub-device for this fw instance 
 Set up IPMI interface 
 Register with hwmon 
 Find sensors 
 Add to our list of AEM devices 
 Find and initialize all AEM1 instances 
 Probe functions for AEM2 devices 
 Retrieve version and module handle for an AEM2 instance 
 Find and initialize one AEM2 instance 
 Copy instance data 
 Create sub-device for this fw instance 
 Set up IPMI interface 
 Register with hwmon 
 Find sensors 
 Add to our list of AEM devices 
 Find and initialize all AEM2 instances 
 Probe a BMC for AEM firmware instances 
 Ignore probe errors; they won't cause problems 
 Handle BMC deletion 
 sysfs support functions 
 AEM device name 
 AEM device version 
 Display power use 
 Display energy use 
 Display power interval registers 
 Set power interval registers 
 Discover sensors on an AEM device 
 Set up read-only sensors 
 Set up read-write sensors 
 sysfs support functions for AEM2 sensors 
 Display temperature use 
 Display power-capping registers 
 Remove sensors attached to an AEM device 
 Sensor probe functions 
 Description of AEM1 sensors 
 Description of AEM2 sensors 
 Set up AEM1 sensor attrs 
 Set up AEM2 sensor attrs 
 Module initexit routines 
 SPDX-License-Identifier: GPL-2.0-or-later
  via686a.c - Part of lm_sensors, Linux kernel modules
 	       for hardware monitoring
  Copyright (c) 1998 - 2002  Frodo Looijaard <frodol@dds.nl>,
 			      Kyösti Mälkki <kmalkki@cc.hut.fi>,
 			      Mark Studebaker <mdsxyz123@yahoo.com>,
 			      and Bob Dougherty <bobd@stanford.edu>
  (Some conversion-factor data were contributed by Jonathan Teh Soon Yew
  <j.teh@iname.com> and Alex van Kaam <darkside@chello.nl>.)
  Supports the Via VT82C686A, VT82C686B south bridges.
  Reports all as a 686A.
  Warning - only supports a single device.
  If force_addr is set to anything different from 0, we forcibly enable
  the device at the given address.
  The Via 686a southbridge has a LM78-like chip integrated on the same IC.
  This driver is a customized copy of lm78.c
 Many VIA686A constants specified below 
 Length of ISA address segment 
 The VIA686A registers 
 ins numbered 0-4 
 fans numbered 1-2 
 temps numbered 1-3 
 bits 7-6 
 2 = bits 5-4, 3 = bits 7-6 
  The following register sets temp interrupt mode (bits 1-0 for temp1,
  3-2 for temp2, 5-4 for temp3).  Modes are:
  00 interrupt stays as long as value is out-of-range
  01 interrupt is cleared once register is read (default)
  10 comparator mode- like 00, but ignores hysteresis
  11 same as 00
 We'll just assume that you want to set all 3 simultaneously: 
  Conversions. Limit checking is only done on the TO_REG
  variants.
  VOLTAGE CONVERSIONS (Bob Dougherty) 
  From HWMon.cpp (Copyright 1998-2000 Jonathan Teh Soon Yew):
  voltagefactor[0]=1.252628; (26281.25=2102.4)    Vccp
  voltagefactor[1]=1.252628; (26281.25=2102.4)    +2.5V
  voltagefactor[2]=1.672628; (26281.67=1573.7)    +3.3V
  voltagefactor[3]=2.62628;  (26282.60=1010.8)    +5V
  voltagefactor[4]=6.32628;  (26286.30=417.14)    +12V
  in[i]=(data[i+2]25.0+133)voltagefactor[i];
  That is:
  volts = (25regVal+133)factor
  regVal = (voltsfactor-133)25
  (These conversions were contributed by Jonathan Teh Soon Yew
  <j.teh@iname.com>)
	
	  To avoid floating point, we multiply constants by 10 (100 for +12V).
	  Rounding is done (120500 is actually 133000 - 12500).
	  Remember that val is expressed in 0.001Vbit, which is why we divide
	  by an additional 10000 (100000 for +12V): 1000 for val and 10 (100)
	  for the constants.
	
	  To avoid floating point, we multiply constants by 10 (100 for +12V).
	  We also multiply them by 1000 because we want 0.001Vbit for the
	  output value. Rounding is done.
 FAN RPM CONVERSIONS 
  Higher register values = slower fans (the fan's strobe gates a counter).
  But this chip saturates back at 0, not at 255 like all the other chips.
  So, 0 means 0 RPM
 TEMP CONVERSIONS (Bob Dougherty) 
  linear fits from HWMon.cpp (Copyright 1998-2000 Jonathan Teh Soon Yew)
 	if(temp<169)
 		return double(temp)0.427-32.08;
 	else if(temp>=169 && temp<=202)
 		return double(temp)0.582-58.16;
 	else
 		return double(temp)0.924-127.33;
  A fifth-order polynomial fits the unofficial data (provided by Alex van
  Kaam <darkside@chello.nl>) a bit better.  It also give more reasonable
  numbers on my machine (ie. they agree with what my BIOS tells me).
  Here's the fifth-order fit to the 8-bit data:
  temp = 1.625093e-10val^5 - 1.001632e-07val^4 + 2.457653e-05val^3 -
 	2.967619e-03val^2 + 2.175144e-01val - 7.090067e+0.
  (2000-10-25- RFD: thanks to Uwe Andersen <uandersen@mayah.com> for
  finding my typos in this formula!)
  Alas, none of the elegant function-fit solutions will work because we
  aren't allowed to use floating point in the kernel and doing it with
  integers doesn't provide enough precision.  So we'll do boring old
  look-up table stuff.  The unofficial data (see below) have effectively
  7-bit resolution (they are rounded to the nearest degree).  I'm assuming
  that the transfer function of the device is monotonic and smooth, so a
  smooth function fit to the data will allow us to get better precision.
  I used the 5th-order poly fit described above and solved for
  VIA register values 0-255.  I 10 before rounding, so we get tenth-degree
  precision.  (I could have done all 1024 values for our 10-bit readings,
  but the function is very linear in the useful range (0-80 deg C), so
  we'll just use linear interpolation for 10-bit readings.)  So, temp_lut
  is the temp at via register values 0-255:
  the original LUT values from Alex van Kaam <darkside@chello.nl>
  (for via register values 12-240):
  {-50,-49,-47,-45,-43,-41,-39,-38,-37,-35,-34,-33,-32,-31,
  -30,-29,-28,-27,-26,-25,-24,-24,-23,-22,-21,-20,-20,-19,-18,-17,-17,-16,-15,
  -15,-14,-14,-13,-12,-12,-11,-11,-10,-9,-9,-8,-8,-7,-7,-6,-6,-5,-5,-4,-4,-3,
  -3,-2,-2,-1,-1,0,0,1,1,1,3,3,3,4,4,4,5,5,5,6,6,7,7,8,8,9,9,9,10,10,11,11,12,
  12,12,13,13,13,14,14,15,15,16,16,16,17,17,18,18,19,19,20,20,21,21,21,22,22,
  22,23,23,24,24,25,25,26,26,26,27,27,27,28,28,29,29,30,30,30,31,31,32,32,33,
  33,34,34,35,35,35,36,36,37,37,38,38,39,39,40,40,41,41,42,42,43,43,44,44,45,
  45,46,46,47,48,48,49,49,50,51,51,52,52,53,53,54,55,55,56,57,57,58,59,59,60,
  61,62,62,63,64,65,66,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,83,84,
  85,86,88,89,91,92,94,96,97,99,101,103,105,107,109,110};
  Here's the reverse LUT.  I got it by doing a 6-th order poly fit (needed
  an extra term for a good fit to these inverse data!) and then
  solving for each temp value from -50 to 110 (the useable range for
  this chip).  Here's the fit:
  viaRegVal = -1.160370e-10val^6 +3.193693e-08val^5 - 1.464447e-06val^4
  - 2.525453e-04val^3 + 1.424593e-02val^2 + 2.148941e+00val +7.275808e+01)
  Note that n=161:
  Converting temps to (8-bit) hyst and over registers
  No interpolation here.
  The +50 is because the temps start at -50
 for 8-bit temperature hyst and over registers 
 for 10-bit temperature readings 
 no interpolation for these 
 do some linear interpolation 
  For each registered chip, we need to keep some data in memory.
  The structure is dynamically allocated.
 true if following fields are valid 
 In jiffies 
 Register value 
 Register value 
 Register value 
 Register value 
 Register value 
 Register value 10 bit 
 Register value 
 Register value 
 Register encoding, shifted right 
 Register encoding, combined 
 pointer to the (only) via686a 
 following are the sysfs callback functions 
 7 voltage sensors 
 3 temperatures 
 2 Fans 
 Alarms 
 This is called when the module is loaded 
 Reserve the ISA region 
 Initialize the VIA686A chip 
 Register sysfs hooks 
 Start monitoring 
 Configure temp interrupt mode for continuous-interrupt operation 
 Pre-read fan clock divisor values 
		
		  add in lower 2 bits
		  temp1 uses bits 7-6 of VIA686A_REG_TEMP_LOW1
		  temp2 uses bits 5-4 of VIA686A_REG_TEMP_LOW23
		  temp3 uses bits 7-6 of VIA686A_REG_TEMP_LOW23
 Sets global pdev as a side effect 
	
	  Always return failure here.  This is to allow other drivers to bind
	  to this pci device.  We don't really want to have control over the
	  pci device, we only wanted to read as few register values from it.
 SPDX-License-Identifier: GPL-2.0-only
  max31722 - hwmon driver for Maxim Integrated MAX31722MAX31723 SPI
  digital thermometer and thermostats.
  Copyright (c) 2016, Intel Corporation.
 Keep 12 bits and multiply by the scale of 62.5 millidegreesbit. 
	
	  Set SD bit to 0 so we can have continuous measurements.
	  Set resolution to 12 bits for maximum precision.
 There is nothing we can do about this ... 
 SPDX-License-Identifier: GPL-2.0-or-later
  smsc47m192.c - Support for hardware monitoring block of
 		  SMSC LPC47M192 and compatible Super IO chips
  Copyright (C) 2006  Hartmut Rick <linux@rick.claranet.de>
  Derived from lm78.c and other chip drivers.
 Addresses to scan 
 SMSC47M192 registers 
 generalised scaling with integer rounding 
 Conversions 
 smsc47m192 internally scales voltage measurements 
  TEMP: 0.001 degC units (-128C to +127C)
  REG: 1Cbit, two's complement
 true if following fields are valid 
 In jiffies 
 Register value 
 Register value 
 Register value 
 Register value 
 Register value 
 Register value 
 Register value 
 Register encoding, combined 
 Register encoding, combined 
		
		  first offset is temp_offset[0] if SFR bit 4 is set,
		  temp_offset[1] otherwise
 Voltages 
 Temperatures 
		
		  offset[0] and offset[1] share the same register,
		  SFR bit 4 activates offset[0]
 VID 
 Alarms 
 select cycle mode (pause 1 sec between updates) 
 initialize alarm limits 
 start monitoring 
 Return 0 if detection is successful, -ENODEV otherwise 
 Detection criteria from sensors_detect script 
 Initialize the SMSC47M192 chip 
 sysfs hooks 
 Pin 110 is either in4 (+12V) or VID4 
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (C) 2017 IBM Corp.
  Driver for the Nuvoton W83773G SMBus temperature sensor IC.
  Supported models: W83773G
 W83773 has 3 channels 
 The W83773 registers 
 this is the number of sensors in the device 
 offset value equals to (high_byte << 3 | low_byte >> 5)  125 
	
	  For valid rates, interval can be calculated as
	 	interval = (1 << (8 - rate))  62.5;
	  Rounded rate is therefore
	 	rate = 8 - __fls(interval  8  (62.5  7));
	  Use clamp_val() to avoid overflows, and to ensure valid input
	  for __fls.
 Set the conversion rate to 2 Hz 
 SPDX-License-Identifier: GPL-2.0-or-later
  ntc_thermistor.c - NTC Thermistors
   Copyright (C) 2010 Samsung Electronics
   MyungJoo Ham <myungjoo.ham@samsung.com>
  Used as index in a zero-terminated array, holes not allowed so
  that NTC_LAST is the first empty array entry.
  A compensation table should be sorted by the values of .ohm
  in descending order.
  The following compensation tables are from the specification of Murata NTC
  Thermistors Datasheet
  The following compensation tables are from the specifications in EPCOS NTC
  Thermistors Datasheets
		
		  This fallback uses a raw read and then
		  assumes the ADC is 12 bits, scaling with
		  a factor 1000 to get to microvolts.
 Assume 12 bit ADC with vref at pullup_uv 
 Usage of vendor name "ntc" is deprecated 
 status change should be possible if not always on. 
	
	  Handle special cases: Resistance is higher than or equal to
	  resistance in first table entry, or resistance is lower or equal
	  to resistance in last table entry.
	  In these cases, return i_low == i_high, either pointing to the
	  beginning or to the end of the table depending on the condition.
 Do a binary search on compensation table 
		
		  start <= mid < end
		  data->comp[start].ohm > ohm >= data->comp[end].ohm
		 
		  We could check for "ohm == data->comp[mid].ohm" here, but
		  that is a quite unlikely condition, and we would have to
		  check again after updating start. Check it at the end instead
		  for simplicity.
			
			  ohm >= data->comp[start].ohm might be true here,
			  since we set start to mid + 1. In that case, we are
			  done. We could keep going, but the condition is quite
			  likely to occur, so it is worth checking for it.
		
		  start <= end
		  data->comp[start].ohm >= ohm >= data->comp[end].ohm
	
	  start == end
	  ohm >= data->comp[end].ohm
	
	  First multiplying the table temperatures with 1000 to get to
	  millicentigrades (which is what we want) and then interpolating
	  will give the best precision.
 Either one of the two is required. 
 SPDX-License-Identifier: GPL-2.0-only
  w83793.c - Linux kernel driver for hardware monitoring
  Copyright (C) 2006 Winbond Electronics Corp.
 	      Yuan Mu
 	      Rudolf Marek <r.marek@assembler.cz>
  Copyright (C) 2009-2010 Sven Anders <anders@anduras.de>, ANDURAS AG.
 		Watchdog driver part
 		(Based partially on fschmd driver,
 		 Copyright 2007-2008 by Hans de Goede)
  Supports following chips:
  Chip	#vin	#fanin	#pwm	#temp	wchipid	vendid	i2c	ISA
  w83793	10	12	8	6	0x7b	0x5ca3	yes	no
 Default values 
 2 minute default timeout 
 Addresses to scan 
 Insmod parameters 
 default timeout in minutes 
  Address 0x00, 0x0d, 0x0e, 0x0f in all three banks are reserved
  as ID, Bank Select registers
  only crit and crit_hyst affect real-time alarm status
  current crit crit_hyst warn warn_hyst
 SMI MASK4 
 Current, High, Low 
 Vcore A	
 Vcore B	
 Vtt		
 VSEN1	
 VSEN2	
 +3VSEN	
 +12VSEN	
 5VDD		
 5VSB		
 VBAT		
 Low Bits of Vcore AB Vtt ReadHighLow 
 High byte 
 High byte 
 Unit in 0.1 second 
 Unit in 0.1 second 
 bit field, fan1 is bit0, fan2 is bit1 ... 
 true if following fields are valid 
 In jiffies 
	unsigned long last_nonvolatile;	 In jiffies, last time we update the
					  nonvolatile registers
 Register value, readhighlow 
 Additional resolution for VCore AB Vtt 
 Only fan1- fan5 has own pins 
 Register value combine 
 Register value combine 
 current, crit, crit_hyst,warn, warn_hyst 
 Additional resolution TD1-TD4 
	u8 temp_mode[2];	 byte 0: Temp D1-D4 mode each has 2 bits
				  byte 1: Temp R1,R2 mode, each has 1 bit
 If reached all fan will be at full speed 
 Temp controls which pwm fan, bit field 
 Register value, each Temp has 1 bit 
 Register value 
 Register value 
 All fan default pwm, next poweron valid 
 Register value 
 realtime status registers 
 Temp tolerance(Smart Fan III) 
 Smart FanII: Fan duty cycle 
 Smart FanII: Temp level point 
 watchdog 
 member of the watchdog_data_list 
 must be unique to avoid sysfs conflict 
 watchdog timeout in minutes 
  Somewhat ugly :( global data pointer list with all devices, so that
  we can find our device data as when using misc_register. There is no
  other method to get to one's device data from the open file-op and
  for usage in the reboot notifier callback.
 Note this lock not only protect list access, but also data.kref access 
  Release our data struct when we're detached from the i2c client and all
  references to our watchdog device are released
 BEEP_ENABLE 
 Write 0 to clear chassis alarm 
 Force cache refresh 
 Only TD1-TD4 have low bits 
  TD1-TD4
  each has 4 mode:(2 bits)
  0:	Stop monitor
  1:	Use internal temp sensor(default)
  2:	Reserved
  3:	Use sensor in Intel CPU and get result by PECI
  TR1-TR2
  each has 2 mode:(1 bit)
  0:	Disable temp sensor monitor
  1:	To enable temp sensors monitor
 0 disable, 6 PECI 
 for the internal sensor, found out if diode or thermistor 
 transform the sysfs interface values into table above 
 transform diode or thermistor into internal enable 
 Unit in 0.1s 
 Unit in 0.1s 
 SETUP_TEMP_CRITICAL 
  Temp SmartFan control
  TEMP_FAN_MAP
  Temp channel control which pwm fan, bitfield, bit 0 indicate pwm1...
  It's possible two or more temp channels control the same fan, w83793
  always prefers to pick the most critical request and applies it to
  the related Fan.
  It's possible one fan is not in any mapping of 6 temp channels, this
  means the fan is manual mode
  TEMP_PWM_ENABLE
  Each temp channel has its own SmartFan mode, and temp channel
  control fans that are set by TEMP_FAN_MAP
  0:	SmartFanII mode
  1:	Thermal Cruise Mode
  TEMP_CRUISE
  Target temperature in thermal cruise mode, w83793 will try to turn
  fan speed to keep the temperature of target device around this
  temperature.
  TEMP_TOLERANCE
  If Temp higher or lower than target with this tolerance, w83793
  will take actions to speed up or slow down the fan to keep the
  temperature within the tolerance range.
 +2 to transform into 2 and 3 to conform with sysfs intf 
 TEMP_TOLERANCE 
 TEMP_TOLERANCE 
 only Vcore AB and Vtt have additional 2 bits precision 
 voltage inputs 5VDD and 5VSB needs 150mV offset 
 fix the limit values of 5VDD and 5VSB to ALARM mechanism 
 Fan6-Fan12 
 Pwm4-Pwm8 
 Start monitoring 
  Watchdog routines
 Set Timeout value (in Minutes) 
 Set Timeout value (in Minutes) 
 Set initial timeout 
 Enable Soft Watchdog 
 Disable Soft Watchdog 
	
	  We get called from driverscharmisc.c with misc_mtx hold, and we
	  call misc_register() from  w83793_probe() with watchdog_data_mutex
	  hold, as misc_register() takes the misc_mtx lock, this is a possible
	  deadlock, so we use mutex_trylock here.
 Check, if device is already open 
	
	  Increase data reference counter (if not already done).
	  Note we can never not have found data, so we don't check for this
 Check, if device is already open and possibly issue error 
 Enable Soft Watchdog 
 Store pointer to data into filp's private data 
 Decrease data reference counter 
 Clear it in case it was set with a previous write 
 	Notifier for system down
 Disable each registered watchdog 
 	The WDT needs to learn about soft shutdowns in order to
 	turn the timebomb registers off.
  Init  remove routines
 Unregister the watchdog (if registered) 
 Tell the watchdog code the client is gone 
 Reset Configuration Register to Disable Watch Dog Registers 
 Decrease data reference counter 
 Return 0 if detection is successful, -ENODEV otherwise 
 Check Winbond vendor ID 
	
	  If Winbond chip, address of chip and W83793_REG_I2C_ADDR
	  should match
 Determine the chip type now 
	
	  Store client pointer in our data struct for watchdog usage
	  (where the client is found through a data ptr instead of the
	  otherway around)
 Initialize the chip 
	
	  Only fan 1-5 has their own input pins,
	  Pwm 1-3 has their own pins
 check the function of pins 49-56 
 has VIDB 
 pwm 4,5 
 fan 6 
 fan 7 
 fan 8 
 check the function of pins 37-40 
 has VIDA 
 fan 9 
 fan 10 
 fan 11 
 fan 12 
 fan 8, second location 
 fan 9, second location 
 fan 10, second location 
 fan 11, second location 
 fan 12, second location 
 check the temp1-6 mode, ignore former AMDSI selected inputs 
 Register sysfs hooks 
 Watchdog initialization 
 Register boot notifier 
	
	  Enable Watchdog registers.
	  Set Configuration Register to Enable Watch Dog Registers
	  (Bit 2) = XXXX, X1XX.
 Set the default watchdog timeout 
 Check, if last reboot was caused by watchdog 
 Disable Soft Watchdog during initialiation 
	
	  We take the data_mutex lock early so that watchdog_open() cannot
	  run when misc_register() has completed, but we've not yet added
	  our data to the watchdog_data_list (and set the default timeout)
 Register our watchdog part 
 Unregister hwmon device 
 Unregister sysfs hooks 
	
	  They are somewhat "stable" registers, and to update them every time
	  takes so much time, it's just not worthy. Update them in a long
	  interval to avoid exception.
 update voltage limits 
 Update the Fan measured value and limits 
 Update the voltages measured value and limits 
  Ignore the possibility that somebody change bank outside the driver
  Must be called with data->update_lock held, except during initialization
 read 0x0 from the chip 
 Must be called with data->update_lock held, except during initialization 
 SPDX-License-Identifier: GPL-2.0-or-later
  g760a - Driver for the Global Mixed-mode Technology Inc. G760A
 	   fan speed PWM controller chip
  Copyright (C) 2007  Herbert Valerio Riedel <hvr@gnu.org>
  Complete datasheet is available at GMT's website:
  http:www.gmt.com.twproductdatasheetEDS-760A.pdf
 +-20% off 
 below 1920rpm 
 register data is read (and cached) at most once per second 
 board specific parameters 
 default 32kHz 
 default P=2 
 g760a register cache 
 In jiffies 
 PWM (period) count number; 0xff stops fan 
   formula: cnt = (CLK  30)(rpm  P) 
	u8 fan_sta;  bit 0: set when actual fan speed more than 20%
		        outside requested fan speed
		      bit 1: set when fan speed below 1920 rpm
 readwrite wrappers 
  sysfs attributes
  new-style driver model code
 setup default configuration for now 
 SPDX-License-Identifier: GPL-2.0-or-later
  lm70.c
  The LM70 is a temperature sensor chip from National Semiconductor (NS).
  Copyright (C) 2006 Kaiwan N Billimoria <kaiwan@designergraphix.com>
  The LM70 communicates with a host processor via an SPIMicrowire Bus
  interface. The complete datasheet is available at National's website
  here:
  http:www.national.compfLMLM70.html
 original NS LM70 
 TI TMP121TMP123 
 NS LM71 
 NS LM74 
 TI TMP122TMP124 
 sysfs hook function 
	
	  spi_read() requires a DMA-safe buffer; so we use
	  spi_write_then_read(), transmitting 0 bytes.
	
	  LM70:
	  The "raw" temperature read into rxbuf[] is a 16-bit signed 2's
	  complement value. Only the MSB 11 bits (1 sign + 10 temperature
	  bits) are meaningful; the LSB 5 bits are to be discarded.
	  See the datasheet.
	 
	  Further, each bit represents 0.25 degrees Celsius; so, multiply
	  by 0.25. Also multiply by 1000 to represent in millidegrees
	  Celsius.
	  So it's equivalent to multiplying by 0.25  1000 = 250.
	 
	  LM74 and TMP121TMP122TMP123TMP124:
	  13 bits of 2's complement data, discard LSB 3 bits,
	  resolution 0.0625 degrees celsius.
	 
	  LM71:
	  14 bits of 2's complement data, discard LSB 2 bits,
	  resolution 0.0312 degrees celsius.
 millidegrees Celsius 
----------------------------------------------------------------------
 signaling is SPI_MODE_0 
 NOTE:  we assume 8-bit words, and convert to 16 bits manually 
 SPDX-License-Identifier: GPL-2.0-or-later
  IBM PowerNV platform sensors for temperaturefanvoltagepower
  Copyright (C) 2014 IBM
 Sensor suffix name from DT 
  Enumerates all the types of sensors in the POWERNV platform and does index
  into 'struct sensor_group'
  'compatible' string properties for sensor types as defined in old
  PowerNV firmware (skiboot). These are ordered as 'enum sensors'.
 matches property 'sensor-type' 
 An opaque id of the firmware for each sensor 
 Total count of sensors from each group 
 Total number of sensor groups 
 Convert temperature to milli-degrees 
 Convert power to micro-watts 
	
	  Core temp pretty print
			
			  The digital thermal sensors are associated
			  with a core.
	
	  Membuffer pretty print
  This function translates the DT node name into the 'hwmon' attribute name.
  IBMPOWERNV device node appear like cooling-fan#2-data, amb-temp#1-thrs etc.
  which need to be mapped as fan2_input, temp1_max respectively before
  populating them inside hwmon device class.
	
	  Let's check if we have a newer device tree
	
	  We don't use the OPAL index on newer device trees
		
		  add attributes for labels, min and max
  Iterate through the device tree for each child of 'sensors' node, create
  a sysfs attribute file, the file is named by translating the DT node name
  to the name required by the higher 'hwmon' driver like fan1_input, temp1_max
  etc..
		
		  Newer device trees use a "sensor-data" property
		  name for input.
		
		  If we can not parse the node name, it means we are
		  running on a newer device tree. We can just forget
		  about the OPAL index and use a defaut value for the
		  hwmon attribute name
			
			  For the label attribute, we can reuse the
			  "properties" of the previous "input"
			  attribute. They are related to the same
			  sensor.
 Create sysfs attribute data for each sensor found in the DT 
 Finally, register with hwmon 
 SPDX-License-Identifier: GPL-2.0-or-later
  lm92 - Hardware monitoring driver
  Copyright (C) 2005-2008  Jean Delvare <jdelvare@suse.de>
  Based on the lm90 driver, with some ideas taken from the lm_sensors
  lm92 driver as well.
  The LM92 is a sensor chip made by National Semiconductor. It reports
  its own temperature with a 0.0625 deg resolution and a 0.33 deg
  accuracy. Complete datasheet can be obtained from National's website
  at:
    http:www.national.compfLMLM92.html
  This driver also supports the MAX6635 sensor chip made by Maxim.
  This chip is compatible with the LM92, but has a lesser accuracy
  (1.0 deg). Complete datasheet can be obtained from Maxim's website
  at:
    http:www.maxim-ic.comquick_view2.cfmqv_pk3074
  Since the LM92 was the first chipset supported by this driver, most
  comments will refer to this chipset, but are actually general and
  concern all supported chipsets, unless mentioned otherwise.
  Support could easily be added for the National Semiconductor LM76
  and Maxim MAX6633 and MAX6634 chips, which are mostly compatible
  with the LM92.
  The LM92 and MAX6635 have 2 two-state pins for address selection,
  resulting in 4 possible addresses.
 The LM92 registers 
 8-bit, RW 
 16-bit, RO 
 16-bit, RW 
 16-bit, RW 
 16-bit, RW 
 16-bit, RW 
 16-bit, RO, LM92 only 
  The LM92 uses signed 13-bit values with LSB = 0.0625 degree Celsius,
  left-justified in 16-bit registers. No rounding is done, with such
  a resolution it's just not worth it. Note that the MAX6635 doesn't
  make use of the 4 lower bits for limits (i.e. effective resolution
  for limits is 1 degree Celsius).
 Alarm flags are stored in the 3 LSB of the temperature register 
 Client data (each client gets its own) 
 false until following fields are valid 
 in jiffies 
 registers values 
 index with enum temp_index 
  Sysfs attributes and callback functions
  Detection and registration
 Start the conversions if needed 
 Return 0 if detection is successful, -ENODEV otherwise 
 Initialize the chipset 
  Module and driver stuff
 SPDX-License-Identifier: GPL-2.0-or-later
  adt7x10.c - Part of lm_sensors, Linux kernel modules for hardware
 	 monitoring
  This driver handles the ADT7410 and compatible digital temperature sensors.
  Hartmut Knaack <knaack.h@gmx.de> 2012-07-22
  based on lm75.c by Frodo Looijaard <frodol@dds.nl>
  and adt7410.c from iio-staging by Sonic Zhang <sonic.zhang@analog.com>
  ADT7X10 status
  ADT7X10 config
  ADT7X10 masks
 straight from the datasheet 
 Each client has this additional data 
 true if registers valid 
 In jiffies 
	s16			temp[4];	 Register values,
						   0 = input
						   1 = high
						   2 = low
 hysteresis offset 
 input 
 high 
 low 
 critical 
 check for new value 
 in 13 bit mode, bits 0-2 are status flags - mask them out 
	
	  temperature is stored in twos complement format, in steps of
	  1128°C
-----------------------------------------------------------------------
 sysfs attributes for hwmon 
	
	  hysteresis is stored as a 4 bit offset in the device, convert it
	  to an absolute value
 min has positive offset, others have negative 
 convert absolute hysteresis value to a 4 bit delta value 
 configure as specified 
	
	  Set to 16 bit resolution, continous conversion and comparator mode.
 Register sysfs hooks 
	
	  The I2C device will already have it's own 'name' attribute, but for
	  the SPI device we need to register it. name will only be non NULL if
	  the device doesn't register the 'name' attribute on its own.
 CONFIG_PM_SLEEP 
 SPDX-License-Identifier: GPL-2.0-or-later
  nct7904.c - driver for Nuvoton NCT7904D.
  Copyright (c) 2015 Kontron
  Author: Vadim V. Vlasov <vvlasov@dev.rtsoft.ru>
  Copyright (c) 2019 Advantech
  Author: Amy.Shih <amy.shih@advantech.com.tw>
  Copyright (c) 2020 Advantech
  Author: Yuechao Zhao <yuechao.zhao@advantech.com.cn>
  Supports the following chips:
  Chip        #vin  #fan  #pwm  #temp  #dts  chip ID
  nct7904d     20    12    4     5      8    0xc5
 Any bank 
 Any bank 
 Any bank 
 Counted from 1 
#define VSEN_MAX		21	 VSEN1..14, 3VDD, VBAT, V3VSB,
 Counted from 1 
 Counted from 1 
 Counted from 1 
 Counted from 1 
 Bank 0 
 Bank 0 
 Bank 0 
 Bank 1; 2 regs (HVLV) per sensor 
 Bank 1; 2 regs (HVLV) per sensor 
 Bank 1; 2 regs (HVLV) per sensor 
 Bank 1; 2 regs (HVLV) per sensor 
 Bank 0; SMI Status Register 
 Bank 0; SMI Status Register 
 Bank 0; SMI Status Register 
 Bank 0; SMI Status Register 
 Bank 0; SMI Status Register 
 Bank 0; 2 regs (HVLV) per sensor 
 Bank 0; same as VSEN2_HV 
 Bank 0; 2 regs in VSEN range 
 Bank 1; 1 reg for LTD 
 Bank 1; 1 reg for LTD 
 Bank 1; 1 reg for LTD 
 Bank 1; 1 reg for LTD 
 Bank 1; 1 reg for LTD 
 Bank 1; 1 reg for LTD 
 Bank 1; 1 reg for LTD 
 Bank 1; 1 reg per sensor 
 Bank 1; 1 reg per sensor 
 Bank 1; 1 reg per sensor 
 Bank 1; 1 reg per sensor 
 Bank 1; 1 reg per sensor 
 Bank 0; 2 regs (HVLV) per sensor 
 Bank 1; 2 regs (HVLV) per sensor 
 Bank 1; 2 regs (HVLV) per sensor 
 Bank 0; 2 regs (HVLV) per sensor 
 Bank 2 
 Bank 2; PECI Function Enable 
 Bank 2; TSI Control Register 
 Bank 3; 1 reg per channel 
 Bank 3; 1 reg per channel 
 WO Lock Watchdog Register 
 RO Watchdog Enable Register 
 RO Watchdog Status Register 
 RW Watchdog Timer Register 
 Enable soft watchdog timer 
 Disable soft watchdog timer 
 1 minute default timeout 
The timeout range is 1-255 minutes
 0: TR mode, 1: TD mode 
 Access functions 
 Read 1-byte register. Returns unsigned reg or -ERRNO on error. 
  Read 2-byte register. Returns register in big-endian format or
  -ERRNO on error.
 Write 1-byte register. Returns 0 or -ERRNO on error. 
 If there is new alarm showing up 
 Needs to clean the alarm if alarm existing 
 Not used 
 0.002V scale 
 0.006V scale 
 0.002V scale 
 0.006V scale 
 0.002V scale 
 0.006V scale 
 If there is new alarm showing up 
 Needs to clean the alarm if alarm existing 
 TD 
 TR 
 TSI 
 PECI 
 0.002V scale 
 0.006V scale 
 Return 0 if detection is successful, -ENODEV otherwise 
 Determine the chip type. 
 dummy, skipped in is_visible 
  Watchdog Function
 Enable soft watchdog timer 
	
	  The NCT7904 is very special in watchdog function.
	  Its minimum unit is minutes. And wdt->timeout needs
	  to match the actual timeout selected. So, this needs
	  to be: wdt->timeout = timeout  60  60.
	  For example, if the user configures a timeout of
	  119 seconds, the actual timeout will be 60 seconds.
	  So, wdt->timeout must then be set to 60 seconds.
	
	  Note:
	  NCT7904 does not support refreshing WDT_TIMER_REG register when
	  the watchdog is active. Please disable watchdog before feeding
	  the watchdog and enable it again.
 Disable soft watchdog timer 
 feed watchdog 
 Enable soft watchdog timer 
 Setup sensor groups. 
 FANIN attributes 
	
	  VSEN attributes
	 
	  Note: voltage sensors overlap with external temperature
	  sensors. So, if we ever decide to support the latter
	  we will have to adjust 'vsen_mask' accordingly.
 CPU_TEMP attributes 
 TR1 
 TR2 
 TR3 
 TR4 
 LTD 
 Multi-Function detecting for Volt and TRTD 
 Reserved 
 PECI 
 Enable DTS & PECI 
 Enable DTS & TSI 
 Check DTS enable status 
 Read all of SMI status register to clear alarms 
 Watchdog initialization 
 Set default timeout 
 SPDX-License-Identifier: GPL-2.0-or-later
  abituguru.c Copyright (c) 2005-2006 Hans de Goede <hdegoede@redhat.com>
  This driver supports the sensor part of the first and second revision of
  the custom Abit uGuru chip found on Abit uGuru motherboards. Note: because
  of lack of specs the CPURAM voltage & frequency control is not supported!
 Banks 
 1x 3 bytes 
 16x volt and temp 
 3x 5 bytes 
 fans 
 max nr of sensors in bank1, a bank1 sensor can be in, temp or nc 
  Warning if you increase one of the 2 MAX defines below to 10 or higher you
  should adjust the belonging _NAMES_LENGTH macro for the 2 digit number!
 max nr of sensors in bank2, currently mb's with max 6 fans are known 
 max nr of pwm outputs, currently mb's with max 5 pwm outputs are known 
 uGuru sensor bank 1 flags 			     
  temp over warn 
  volt over max 
  volt under min 
 temp is over warn 
 volt is over max 
 volt is under min 
 uGuru sensor bank 2 flags 			     
   fan under min 
 uGuru sensor bank common flags 
 beep if alarm 
 shutdown if alarm 
 uGuru fan PWM (speed control) flags 
 enable speed control 
 Values used for conversion 
 RPM 
 Bank1 sensor types 
  In many cases we need to wait for the uGuru to reach a certain status, most
  of the time it will reach this status within 30 - 90 ISA reads, and thus we
  can best busy wait. This define gives the total amount of reads to try.
  However sometimes older versions of the uGuru seem to be distracted and they
  do not respond for a long time. To handle this we sleep before each of the
  last ABIT_UGURU_WAIT_TIMEOUT_SLEEP tries.
  Normally all expected status in abituguru_ready, are reported after the
  first read, but sometimes not and we need to poll.
 Maximum 3 retries on timedout readswrites, delay 200 ms before retrying 
 Maximum 2 timeouts in abituguru_update_device, iow 3 in a row is an error 
 utility macros 
 Macros to help calculate the sysfs_names array length 
  sum of strlen of: in??_input\0, in??_{min,max}\0, in??_{min,max}_alarm\0,
  in??_{min,max}_alarm_enable\0, in??_beep\0, in??_shutdown\0
  sum of strlen of: temp??_input\0, temp??_max\0, temp??_crit\0,
  temp??_alarm\0, temp??_alarm_enable\0, temp??_beep\0, temp??_shutdown\0
  sum of strlen of: fan?_input\0, fan?_min\0, fan?_alarm\0,
  fan?_alarm_enable\0, fan?_beep\0, fan?_shutdown\0
  sum of strlen of: pwm?_enable\0, pwm?_auto_channels_temp\0,
  pwm?_auto_point{1,2}_pwm\0, pwm?_auto_point{1,2}_temp\0
 IN_NAMES_LENGTH > TEMP_NAMES_LENGTH so assume all bank1 sensors are in 
  All the macros below are named identical to the oguru and oguru2 programs
  reverse engineered by Olle Sandberg, hence the names might not be 100%
  logical. I could come up with better names, but I prefer keeping the names
  identical so that this driver can be compared with his work more easily.
 Two io-ports are used by uGuru 
 Used to tell uGuru what to read and to read the actual data 
 Mostly used to check if uGuru is busy 
 uGuru status' 
 Ready to be written 
 Ready to be read 
 More input 
 Ready to be written 
 Constants 
 in (Volt) sensors go up to 3494 mV, temp to 255000 millidegrees Celsius 
  Min  Max allowed values for sensor2 (fan) alarm threshold, these values
  correspond to 300-3000 RPM
  Register 0 is a bitfield, 1 and 2 are pwm settings (255 = 100%), 3 and 4
  are temperature trip points.
  Min  Max allowed values for pwm_settings. Note: pwm1 (CPU fan) is a
  special case the minimum allowed pwm% setting for this is 30% (77) on
  some MB's this special case is handled in the code!
 Insmod parameters 
 Default verbose is 2, since this driver is still in the testing phase 
  For the Abit uGuru, we need to keep some data in memory.
  The structure is dynamically allocated, at the same time when a new
  abituguru device is allocated.
 hwmon registered device 
 protect access to data and uGuru 
 In jiffies 
 uguru base address 
 is the uguru in ready state? 
	unsigned char update_timeouts;	
					  number of update timeouts since last
					  successful update
	
	  The sysfs attr and their names are generated automatically, for bank1
	  we cannot use a predefined array because we don't know beforehand
	  of a sensor is a volt or a temp sensor, for bank2 and the pwms its
	  easier todo things the same way.  For in sensors we have 9 (temp 7)
	  sysfs entries per sensor, for bank2 and pwms 6.
 Buffer to store the dynamically generated sysfs names 
 Bank 1 data 
 number of and addresses of [0] in, [1] temp sensors 
	
	  This array holds 3 entries per sensor for the bank 1 sensor settings
	  (flags, min, max for voltage  flags, warn, shutdown for temp).
	
	  Maximum value for each sensor used for scaling in mVmillidegrees
	  Celsius.
 Bank 2 data, ABIT_UGURU_MAX_BANK2_SENSORS entries for bank2 
 actual number of bank2 sensors found 
 flags, min 
 Alarms 2 bytes for bank1, 1 byte for bank2 
 Fan PWM (speed control) 5 bytes per PWM 
 actual number of pwms found 
 wait till the uguru is in the specified state 
		
		  sleep a bit before our last few tries, see the comment on
		  this where ABIT_UGURU_WAIT_TIMEOUT_SLEEP is defined.
 Put the uguru in ready for input state 
 Reset?  Prepare for next readwrite cycle 
 Wait till the uguru is ready 
 Cmd port MUST be read now and should contain 0xAC 
	
	  After this the ABIT_UGURU_DATA port should contain
	  ABIT_UGURU_STATUS_INPUT
  Send the bank and then sensor address to the uGuru for the next readwrite
  cycle. This function gets called as the first part of a readwrite by
  abituguru_read and abituguru_write. This function should never be
  called by any other function.
	
	  assume the caller does error handling itself if it has not requested
	  any retries, and thus be quiet.
		
		  Make sure the uguru is ready and then send the bank address,
		  after this the uguru is no longer "ready".
		
		  Wait till the uguru is ABIT_UGURU_STATUS_INPUT state again
		  and send the sensor addr
  Read count bytes from sensor sensor_addr in bank bank_addr and store the
  result in buf, retry the send address part of the read retries times.
 Send the address 
 And read the data 
 Last put the chip back in ready state 
  Write count bytes from buf to sensor sensor_addr in bank bank_addr, the send
  address part of the write is always retried ABIT_UGURU_MAX_RETRIES times.
	
	  We use the ready timeout as we have to wait for 0xAC just like the
	  ready function
 Send the address 
 And write the data 
	
	  Now we need to wait till the chip is ready to be read again,
	  so that we can read 0xAC as confirmation that our write has
	  succeeded.
 Cmd port MUST be read now and should contain 0xAC 
 Last put the chip back in ready state 
  Detect sensor type. Temp and Volt sensors are enabled with
  different masks and will ignore enable masks not meant for them.
  This enables us to test what kind of sensor we're dealing with.
  By setting the alarm thresholds so that we will always get an
  alarm for sensor type X and then enabling the sensor as sensor type
  X, if we then get an alarm it is a sensor of type X.
 error is the most common used retval :| 
 If overriden by the user return the user selected type 
 First read the sensor and the current settings 
 Test val is sane  usable for sensor type detection. 
		
		  assume no sensor is there for sensors for which we can't
		  determine the sensor type because their reading is too close
		  to their limits, this usually means no sensor is there.
	
	  Volt sensor test, enable volt low alarm, set min value ridiculously
	  high, or vica versa if the reading is very high. If its a volt
	  sensor this should always give us an alarm.
	
	  Now we need 20 ms to give the uguru time to read the sensors
	  and raise a voltage alarm
 Check for alarm and check the alarm is a volt low alarm. 
	
	  Temp sensor test, enable sensor as a temp sensor, set beep value
	  ridiculously low (but not too low, otherwise uguru ignores it).
	  If its a temp sensor this should always give us an alarm.
	
	  Now we need 50 ms to give the uguru time to read the sensors
	  and raise a temp alarm
 Check for alarm and check the alarm is a temp high alarm. 
	
	  Restore original settings, failing here is really BAD, it has been
	  reported that some BIOS-es hang when entering the uGuru menu with
	  invalid settings present in the uGuru, so we try this 3 times.
  These functions try to find out how many sensors there are in bank2 and how
  many pwms there are. The purpose of this is to make sure that we don't give
  the user the possibility to change settings for non-existent sensors  pwm.
  The uGuru will happily read  write whatever memory happens to be after the
  memory storing the PWM settings when readingwriting to a PWM which is not
  there. Notice even if we detect a PWM which doesn't exist we normally won't
  write to it, unless the user tries to change the settings.
  Although the uGuru allows reading (settings) from non existing bank2
  sensors, my version of the uGuru does seem to stop writing to them, the
  write function above aborts in this case with:
  "CMD reg does not hold 0xAC after write"
  Notice these 2 tests are non destructive iow read-only tests, otherwise
  they would defeat their purpose. Although for the bank2_sensors detection a
  readwrite test would be feasible because of the reaction above, I've
  however opted to stay on the safe side.
		
		  0x89 are the known used bits:
		  -0x80 enable shutdown
		  -0x08 enable beep
		  -0x01 enable alarm
		  All other bits should be 0, but on some motherboards
		  0x40 (bit 6) is also high for some of the fans??
 check if the threshold is within the allowed range 
		
		  0x80 is the enable bit and the low
		  nibble is which temp sensor to use,
		  the other bits should be 0
		
		  the low nibble must correspond to one of the temp sensors
		  we've found
 check if all other settings are within the allowed range 
 special case pwm1 min pwm% 
 check that min temp < max temp and min pwm < max pwm 
  Following are the sysfs callback functions. These functions expect:
  sensor_device_attribute_2->index:   sensor addressoffset in the bank
  sensor_device_attribute_2->nr:      register offset, bitmask or NA.
 this check can be done before taking the lock 
	
	  See if the alarm bit for this sensor is set, and if the
	  alarm matches the type of alarm we're looking for (for volt
	  it can be either low or high). The type is stored in a few
	  readonly bits in the settings part of the relevant sensor.
	  The bitmask of the type is passed to us in attr->nr.
 Fan PWM (speed control) 
 special case pwm1 min pwm% 
 this check can be done before taking the lock 
 this check needs to be done after taking the lock 
	
	  We need to walk to the temp sensor addresses to find what
	  the userspace id of the configured temp sensor is.
 Sysfs attr templates, the real entries are generated automatically. 
	
	  El weirdo probe order, to keep the sysfs order identical to the
	  BIOS and window-appliction listing order.
 See if the uGuru is ready 
	
	  Completely read the uGuru this has 2 purposes:
	  - testread  see if one really is there.
	  - make an in memory copy of all the uguru settings for future use.
	
	  Note: We don't know how many bank2 sensors  pwms there really are,
	  but in order to "detect" this we need to read the maximum amount
	  anyways. If we read sensorspwms not there we'll just read crap
	  this can't hurt. We need the detection because we don't want
	  unwanted writes, which will hurt!
 Detect sensor types and fill the sysfs attr for bank1 
 res 1 (temp) sensors have 7 sysfs entries, 0 (in) 9 
 Detect number of sensors and fill the sysfs attr for bank2 (fans) 
 Detect number of sensors and fill the sysfs attr for pwms 
 Fail safe check, this should never happen! 
 Register sysfs hooks 
 success 
 fake a complete successful read if no update necessary. 
 success! 
 handle timeout condition 
 No overflow please 
 Just a timeout, fake a successful read 
 On success set last_updated 
	
	  make sure all communications with the uguru are done and no new
	  ones are started
 See if the uGuru is still ready 
 CONFIG_PM 
	
	  See if there is an uguru there. After a reboot uGuru will hold 0x00
	  at DATA and 0xAC, when this driver has already been loaded once
	  DATA will hold 0x08. For most uGuru's CMD will hold 0xAC in either
	  scenario but some will hold 0x00.
	  Some uGuru's initially hold 0x09 at DATA and will only hold 0x08
	  after reading CMD first, so CMD must be read first!
 No uGuru found 
 safety check, refuse to load on non Abit motherboards 
www.abit.com.tw")))
 SPDX-License-Identifier: GPL-2.0-only
  Driver for Linear Technology LTC2990 power monitor
  Copyright (C) 2014 Topic Embedded Products
  Author: Mike Looijmans <mike.looijmans@topic.nl>
 Enabled measurements for mode bits 2..0 
 Enabled measurements for mode bits 4..3 
 Return the converted value from the given register in uV or mC 
 temp, 0.0625 degreesLSB 
 Vx-Vy, 19.42uVLSB 
 Vcc, 305.18uVLSB, 2.5V offset 
 Vx, 305.18uVLSB 
 won't happen, keep compiler happy 
 Setup continuous mode 
 Trigger once to start continuous conversion 
 SPDX-License-Identifier: GPL-2.0-or-later
  k8temp.c - Linux kernel module for hardware monitoring
  Copyright (C) 2006 Rudolf Marek <r.marek@assembler.cz>
  Inspired from the w83785 and amd756 drivers.
 registers values 
 sensor presence bits - SEL_CORE, SEL_PLACE 
 meaning of SEL_CORE is inverted 
	
	  Differentiate between AM2 and ASB1.
	  See "Constructing the processor Name String" in "Revision
	  Guide for AMD NPT Family 0Fh Processors" (33610).
 Single core 
 Dual core 
 feature available since SH-C0, exclude older revisions 
	
	  AMD NPT family 0fh, i.e. RevF and RevG:
	  meaning of SEL_CORE bit is inverted
	
	  RevG desktop CPUs (i.e. no socket S1G1 or ASB1 parts) need
	  additional offset, otherwise reported temperature is below
	  ambient temperature
 Select sensor 0, core0 
 now we know if we can change core andor sensor 
 Select sensor 1, core0 
 prepare for next selection 
 if temp is 0 -49C is unlikely 
 Select sensor 0, core1 
 if temp is 0 -49C is unlikely 
 SPDX-License-Identifier: GPL-2.0-or-later
  fschmd.c
  Copyright (C) 2007 - 2009 Hans de Goede <hdegoede@redhat.com>
   Merged Fujitsu Siemens hwmon driver, supporting the Poseidon, Hermes,
   Scylla, Heracles, Heimdall, Hades and Syleus chips
   Based on the original 2.4 fscscy, 2.6 fscpos, 2.6 fscher and 2.6
   (candidate) fschmd drivers:
   Copyright (C) 2006 Thilo Cestonaro
 			<thilo.cestonaro.external@fujitsu-siemens.com>
   Copyright (C) 2004, 2005 Stefan Ott <stefan@desire.ch>
   Copyright (C) 2003, 2004 Reinhard Nissl <rnissl@gmx.de>
   Copyright (c) 2001 Martin Knoblauch <mkn@teraport.de, knobi@knobisoft.de>
   Copyright (C) 2000 Hermann Jung <hej@odn.de>
 Addresses to scan 
 Insmod parameters 
  The FSCHMD registers and other defines
 chip identification 
 global control and status 
 watchdog 
 the same as trigger 
 voltages, weird order is to keep the same order as the old drivers 
 pos 
 her 
 scy 
 hrc 
 hmd 
 hds 
 syl 
  minimum pwm at which the fan is driven (pwm can be increased depending on
  the temp. Notice that for the scy some fans share there minimum speed.
  Also notice that with the scy the sensor order is different than with the
  other chips, this order was in the 2.4 driver and kept for consistency.
 pos 
 her 
 scy 
 hrc 
 hmd 
 hds 
 syl 
 actual fan speed 
 pos 
 her 
 scy 
 hrc 
 hmd 
 hds 
 syl 
 fan status registers 
 pos 
 her 
 scy 
 hrc 
 hmd 
 hds 
 syl 
 fan ripple  divider registers 
 pos 
 her 
 scy 
 hrc 
 hmd 
 hds 
 syl 
 Fan status register bitmasks 
 called fault by FSC! 
 actual temperature registers 
 pos 
 her 
 scy 
 hrc 
 hmd 
 hds 
 syl 
 temperature state registers 
 pos 
 her 
 scy 
 hrc 
 hmd 
 hds 
 syl 
  temperature high limit registers, FSC does not document these. Proven to be
  there with field testing on the fscher and fschrc, already supported  used
  in the fscscy 2.4 driver. FSC has confirmed that the fschmd has registers
  at these addresses, but doesn't want to confirm they are the same as with
  the fscher??
 pos 
 her 
 scy 
 hrc 
 hmd 
 hds 
 syl 
  These were found through experimenting with an fscher, currently they are
  not used, but we keep them around for future reference.
  On the fscsyl AUTOP1 lives at 0x#c (so 0x5c for fan1, 0x6c for fan2, etc),
  AUTOP2 lives at 0x#e, and 0x#1 is a bitmask defining which temps influence
  the fan speed.
  static const u8 FSCHER_REG_TEMP_AUTOP1[] =	{ 0x73, 0x83, 0x93 };
  static const u8 FSCHER_REG_TEMP_AUTOP2[] =	{ 0x75, 0x85, 0x95 };
 temp status register bitmasks 
 there only really is an alarm if the sensor is working and alert == 1 
  Functions declarations
  Driver data (common to all clients)
  Client data (each client gets its own)
 member of the watchdog_data_list 
 must be unique to avoid sysfs conflict 
 false until following fields are valid 
 in jiffies 
 register values 
 chip revision 
 global control register 
 watchdog control register 
 watchdog status register 
 watchdog counter preset on trigger val 
 voltage 
 temperature 
 status of sensor 
 high temp limit, notice: undocumented! 
 fans revolutions per second 
 fan status 
 fan min value for rps 
 divider for rps 
  Global variables to hold information read from special DMI tables, which are
  available on FSC machines with an fscher or later chip. There is no need to
  protect these with a lock as they are only modified from our attach function
  which always gets called with the i2c-core lock held and never accessed
  before the attach function is done with them.
  Somewhat ugly :( global data pointer list with all fschmd devices, so that
  we can find our device data as when using misc_register there is no other
  method to get to ones device data from the open fop.
 Note this lock not only protect list access, but also data.kref access 
  Release our data struct when we're detached from the i2c client and all
  references to our watchdog device are released
  Sysfs attr show  store functions
 bit 0 set means sensor working ok, so no fault! 
 bits 2..7 reserved => mask with 3 
 supported values: 2, 4, 8 
 bits 2..7 reserved => mask with 0x03 
 0 = allow turning off (except on the syl), 1-255 = 50-100% 
 reg: 0 = allow turning off (except on the syl), 1-255 = 50-100% 
  The FSC hwmon family has the ability to force an attached alert led to flash
  from software, we export this as an alert_led sysfs attr
  Watchdog routines
 0-x array index -> 1-x module param 
 2 second or 60 second resolution? 
 Write new timeout value 
 Write new control register, do not trigger! 
	
	  Don't store the stop flag in our watchdog control register copy, as
	  its a write only bit (read always returns 0)
	
	  We get called from driverscharmisc.c with misc_mtx hold, and we
	  call misc_register() from fschmd_probe() with watchdog_data_mutex
	  hold, as misc_register() takes the misc_mtx lock, this is a possible
	  deadlock, so we use mutex_trylock here.
 Note we can never not have found data, so we don't check for this 
 Start the watchdog 
 Clear it in case it was set with a previous write 
  Detect, register, unregister and update device functions
  DMI decode routine to read voltage scaling factors from special DMI tables,
  which are available on FSC machines with an fscher or later chip.
	
	  dmi code ugliness, we get passed the address of the contents of
	  a complete DMI record, but in the form of a dmi_header pointer, in
	  reality this address holds header->length bytes of which the header
	  are the first 4 bytes
 We are looking for OEM-specific type 185 
	
	  we are looking for what Siemens calls "subtype" 19, the subtype
	  is stored in byte 5 of the dmi block
	
	  After the subtype comes 1 unknown byte and then blocks of 5 bytes,
	  consisting of what Siemens calls an "Entity" number, followed by
	  2 16-bit words in LSB first order
 entity 1 - 3: voltage multiplier and offset 
 Our in sensors order and the DMI order differ 
 Check for twice the same entity 
 entity 7: reference voltage 
 Check for twice the same entity 
		
		  According to the docs there should be separate dmi entries
		  for the mult's and offsets of in3-5 of the syl, but on
		  my test machine these are not present
 Detect & Identify the chip 
	
	  Store client pointer in our data struct for watchdog usage
	  (where the client is found through a data ptr instead of the
	  otherway around)
		
		  The Poseidon has hardwired temp limits, fill these
		  in for the alarm resetting code
 Read the special DMI table for fscher and newer chips 
 Read in some never changing registers 
 Poseidon doesn't have TEMP_LIMIT registers 
 Poseidon doesn't have a FAN_MIN register for its 3rd fan 
	
	  We take the data_mutex lock early so that watchdog_open() cannot
	  run when misc_register() has completed, but we've not yet added
	  our data to the watchdog_data_list (and set the default timeout)
 Register our watchdog part 
 will also free data for us 
 Unregister the watchdog (if registered) 
 Tell the watchdog code the client is gone 
	
	  Check if registered in case we're called from fschmd_detect
	  to cleanup after an error
 The fscpos doesn't have TEMP_LIMIT registers 
			
			  reset alarm if the alarm condition is gone,
			  the chip doesn't do this itself
 The fscpos third fan doesn't have a fan_min 
 reset fan status if speed is back to > 0 
 SPDX-License-Identifier: GPL-2.0
  Fan Control HDL CORE driver
  Copyright 2019 Analog Devices Inc.
 register map 
 IRQ sources 
 pulses per revolution 
  The core calculates the temperature as:
 	T = raw  509.3140064  65535) - 280.2308787
	
	  PWM_PERIOD is a RO register set by the core. It should never be 0.
	  For now we are trusting the HW...
 should we return error, EAGAIN maybe? 
	
	  The tacho period should be:
	       TACH = 60(ppr  rpm), where rpm is revolutions per second
	       and ppr is pulses per revolution.
	  Given the tacho period, we can multiply it by the input clock
	  so that we know how many clocks we need to have this period.
	  From this, we can derive the RPM value.
		
		  The formula for the temperature is:
		       T = (ADC  501.3743  2^bits) - 273.6777
		  It's multiplied by 1000 to have millidegrees as
		  specified by the hwmon sysfs interface.
 clear it now 
  This core has two main ways of changing the PWM duty cycle. It is done,
  either by a request from userspace (writing on pwm1_input) or by the
  core itself. When the change is done by the core, it will use predefined
  parameters to evaluate the tach signal and, on that case we cannot set them.
  On the other hand, when the request is done by the user, with some arbitrary
  value that the core does not now about, we have to provide the tach
  parameters so that, the core can evaluate the signal. On the IRQ handler we
  distinguish this by using the ADI_IRQ_SRC_TEMP_INCREASE interrupt. This tell
  us that the CORE requested a new duty cycle. After this, there is 5s delay
  on which the core waits for the fan rotation speed to stabilize. After this
  we get ADI_IRQ_SRC_PWM_CHANGED irq where we will decide if we need to set
  the tach parameters or not on the next tach measurement cycle (corresponding
  already to the ney duty cycle) based on the %ctl->hw_pwm_req flag.
 hardware requested a new pwm 
		
		  if the pwm changes on behalf of software,
		  we need to provide new tacho parameters to the core.
		  Wait for the next measurement for that...
 get 25% tolerance 
 set new tacho parameters 
 clear all interrupts 
 get fan pulses per revolution 
 1, 2 and 4 are the typical and accepted values 
	
	  Enable all IRQs
 bring the device out of reset 
 temperature threshold below which PWM should be 0% 
 temperature threshold above which PWM should be 25% 
 temperature threshold below which PWM should be 25% 
 temperature threshold above which PWM should be 50% 
 temperature threshold below which PWM should be 50% 
 temperature threshold above which PWM should be 75% 
 temperature threshold below which PWM should be 75% 
 temperature threshold above which PWM should be 100% 
 SPDX-License-Identifier: GPL-2.0-or-later
  ds1621.c - Part of lm_sensors, Linux kernel modules for hardware
 	      monitoring
  Christian W. Zuckschwerdt  <zany@triq.net>  2000-11-23
  based on lm75.c by Frodo Looijaard <frodol@dds.nl>
  Ported to Linux 2.6 by Aurelien Jarno <aurelien@aurel32.net> with
  the help of Jean Delvare <jdelvare@suse.de>
  The DS1621 device is a digital temperaturethermometer with 9-bit
  resolution, a thermal alarm output (Tout), and user-defined minimum
  and maximum temperature thresholds (TH and TL).
  The DS1625, DS1631, DS1721, and DS1731 are pin compatible with the DS1621
  and similar in operation, with slight variations as noted in the device
  datasheets (please refer to www.maximintegrated.com for specific
  device information).
  Since the DS1621 was the first chipset supported by this driver,
  most comments will refer to this chipset, but are actually general
  and concern all supported chipsets, unless mentioned otherwise.
 Supported devices 
 Insmod parameters 
  The ConfigurationStatus register
  - DS1621:
    7    6    5    4    3    2    1    0
  |Done|THF |TLF |NVB | X  | X  |POL |1SHOT|
  - DS1625:
    7    6    5    4    3    2    1    0
  |Done|THF |TLF |NVB | 1  | 0  |POL |1SHOT|
  - DS1631, DS1731:
    7    6    5    4    3    2    1    0
  |Done|THF |TLF |NVB | R1 | R0 |POL |1SHOT|
  - DS1721:
    7    6    5    4    3    2    1    0
  |Done| X  | X  | U  | R1 | R0 |POL |1SHOT|
  Where:
  - 'X' is Reserved
  - 'U' is Undefined
 ds1721 conversion rates: {CLSB, time(ms), resolution bit setting} 
  9-bits (0.5,  93.75, RES[0..1] = 0 
 10-bits (0.25, 187.5, RES[0..1] = 1 
 11-bits (0.125,  375, RES[0..1] = 2 
 12-bits (0.0625, 750, RES[0..1] = 3 
 The DS1621 temperature registers 
 input, word, RO 
 min, word, RW 
 max, word, RW 
 byte, RW 
 no data 
 no data 
 no data 
 The DS1621 configuration register 
 Conversions 
 Each client has this additional data 
 true if following fields are valid 
 In jiffies 
 device type 
 Register values, word 
 Register encoding, combined 
	u8 zbits;			 Resolution encoded as number of
 Conversion rate in milliseconds 
  TEMP: 0.001Cbit (-55C to +125C)
  REG:
   - 1621, 1625: 0.5Cbit, 7 zero-bits
   - 1631, 1721, 1731: 0.0625Cbit, 4 zero-bits
 switch to continuous conversion mode 
 setup output polarity 
 start conversion 
 reset alarms if necessary 
 input > min 
 input < max 
 Convert rate into resolution bits 
 shhh, we're hiding update_interval 
 Initialize the DS1621 chip 
 This is the driver that will be inserted 
 SPDX-License-Identifier: GPL-2.0-only
 Hwmon client for industrial IO devices
  Copyright (c) 2011 Jonathan Cameron
  struct iio_hwmon_state - device instance state
  @channels:		filled with array of channels from iio
  @num_channels:	number of channels in channels (saves counting twice)
  @attr_group:		the group of attributes
  @groups:		null terminated array of attribute groups
  @attrs:		null terminated array of attribute pointers.
  Assumes that IIO and hwmon operate in the same base units.
  This is supposed to be true, but needs verification for
  new channel types.
 mili-Watts to micro-Watts conversion 
 count how many attributes we have 
 SPDX-License-Identifier: GPL-2.0-or-later
  A hwmon driver for the IBM PowerExecutive temperaturepower sensors
  Copyright (C) 2007 IBM
  Author: Darrick J. Wong <darrick.wong@oracle.com>
 In jiffies 
 Create attributes 
 Create IPMI messaging interface user 
 Initialize message 
 Does this BMC support PowerExecutive? 
 Register the BMC as a HWMON class device 
 finally add the new bmc data to the bmc data list 
 Now go find all the sensors 
 SPDX-License-Identifier: GPL-2.0
  Synaptics AS370 SoC Hardware Monitoring Driver
  Copyright (C) 2018 Synaptics Incorporated
  Author: Jisheng Zhang <jszhang@kernel.org>
 SPDX-License-Identifier: GPL-2.0-or-later
  Driver for Linear Technology LTC4151 High Voltage I2C Current
  and Voltage Monitor
  Copyright (C) 2011 AppearTV AS
  Derived from:
   Driver for Linear Technology LTC4261 I2C Negative Voltage Hot
   Swap Controller
   Copyright (C) 2010 Ericsson AB.
  Datasheet: http:www.linear.comdocsDatasheet4151fc.pdf
 chip registers 
 in jiffies 
 in micro ohms 
 Registers 
	
	  The chip's AD updates 6 times per second
	  (Conversion Rate 6 - 9 Hz)
 Read all registers 
 Return the voltage from the given register in mV 
 500uV resolution. Convert to mV. 
		
		  20uV resolution. Convert to current as measured with
		  a given sense resistor, in mA.
 25 mV per increment 
 If we get here, the developer messed up 
  Input voltages.
 Currents (via sense resistor) 
  Finally, construct an array of pointers to members of the above objects,
  as required for sysfs_create_group()
 1 mOhm if not set via DT 
 This is the driver that will be inserted 
 SPDX-License-Identifier: GPL-2.0-or-later
  asb100.c - Part of lm_sensors, Linux kernel modules for hardware
 	      monitoring
  Copyright (C) 2004 Mark M. Hoffman <mhoffman@lightlink.com>
  (derived from w83781d.c)
  Copyright (C) 1998 - 2003  Frodo Looijaard <frodol@dds.nl>,
 			      Philip Edelbrock <phil@netroedge.com>, and
 			      Mark Studebaker <mdsxyz123@yahoo.com>
  This driver supports the hardware sensor chips: Asus ASB100 and
  ASB100-A "BACH".
  ASB100-A supports pwm1, while plain ASB100 does not.  There is no known
  way for the driver to tell which one is there.
  Chip		#vin	#fanin	#pwm	#temp	wchipid	vendid	i2c	ISA
  asb100	7	3	1	4	0x31	0x0694	yes	no
 I2C addresses to scan 
 Voltage IN registers 0-6 
 FAN IN registers 1-3 
 TEMPERATURE registers 1-4 
 bit 7 -> enable, bits 0-3 -> duty cycle 
  CONVERSIONS
  Rounding and limit checking is only done on the TO_REG variants.
 These constants are a guess, consistent w w83781d 
  IN: 11000 V (0V to 4.08V)
  REG: 16mVbit
 These constants are a guess, consistent w w83781d 
  TEMP: 0.001Cbit (-128C to +127C)
  REG: 1Cbit, two's complement
  PWM: 0 - 255 per sensors documentation
  REG: (6.25% duty cycle per bit)
  FAN DIV: 1, 2, 4, or 8 (defaults to 2)
  REG: 0, 1, 2, or 3 (respectively) (defaults to 1)
  For each registered client, we need to keep some data in memory. That
  data is pointed to by client->data. The structure itself is
  dynamically allocated, at the same time the client itself is allocated.
 In jiffies 
 array of 2 pointers to subclients 
 true if following fields are valid 
 Register value 
 Register value 
 Register value 
 Register value 
 Register value 
 Register value (0 and 3 are u8 only) 
 Register value (0 and 3 are u8 only) 
 Register value (0 and 3 are u8 only) 
 Register encoding, right justified 
 Register encoding 
 Register encoding, combined 
 Register encoding, combined 
 7 Voltages 
 3 Fans 
  Note: we save and restore the fan minimum here, because its value is
  determined in part by the fan divisor.  This follows the principle of
  least surprise; the user doesn't expect the fan minimum to change just
  because the divisor changed.
 fan 1 
 fan 2 
 fan 3 
 4 Temp. Sensors 
 VID 
 VRM 
 Alarms 
 1 PWM 
 keep the enable bit 
 keep the duty cycle bits 
 Undo inits in case of errors 
 Return 0 if detection is successful, -ENODEV otherwise 
 If we're in bank 0 
 Check for ASB100 ID (low byte) 
 Check for ASB100 ID (high byte ) 
 Put it now into bank 0 and Vendor ID High Byte 
 Determine the chip type. 
 Attach secondary lm75 clients 
 Initialize the chip 
 A few vars need to be filled upon startup 
 Register sysfs hooks 
  The SMBus locks itself, usually, but nothing may access the chip between
  bank switches.
 switch banks 
 switch to subclient 
 convert from ISA to LM75 I2C addresses 
 TEMP 
 CONFIG 
 HYST 
 MAX 
 switch banks 
 switch to subclient 
 convert from ISA to LM75 I2C addresses 
 CONFIG 
 HYST 
 MAX 
 Start monitoring 
 7 voltage inputs 
 3 fan inputs 
 4 temperature inputs 
 VID and fan divisors 
 PWM 
 alarms 
 SPDX-License-Identifier: GPL-2.0-or-later
    Copyright (C) 2006 by Hans Edgington <hans@edgington.nl>              
    Copyright (C) 2007-2011 Hans de Goede <hdegoede@redhat.com>           
 Hardware monitor logical device 
 Hardware monitor logical device 
 Key to enable Super-IO 
 Key to disable Super-IO 
 Logical device select 
 Device ID (2 bytes) 
 Device revision 
 Fintek ID (2 bytes) 
 Logical device enable 
 Logical device address (2 bytes) 
 Manufacturers ID 
 Chipset ID 
 Chipset ID 
 Chipset ID 
 Chipset ID 
 Chipset ID 
 Chipset ID 
 Chipset ID 
 Chipset ID 
 Chipset ID 
 Chipset ID 
 Chipset ID 
 Chipset ID 
 Chipset ID 
 Chipset ID 
 Chipset ID 
 f7188x only 
 f7188x only 
 f7188x only 
 F81866 only 
 F81866 only 
 F81866 only 
 Lowest detectable fanspeed 
 Both f71869f and f71869e, reg. compatible and same id 
 f81801u too, same id 
 +1 fan which is monitor + simple pwm only 
 +1 fan which is monitor only 
 Super-IO Function prototypes 
 temp numbering start (0 or 1) 
 true if following fields are valid 
 In jiffies 
 In jiffies 
 Register Values 
	
	  Note: all models have max 3 temperature channels, but on some
	  they are addressed as 0-2 and on others as 1-3, so for coding
	  convenience we reserve space for 4 channels
 2 hysts stored per reg 
 Sysfs in 
 Sysfs Fan 
 Sysfs Temp 
 PWM and Auto point control 
 Sysfs misc 
  Temp attr for the f71858fg, the f71858fg is special as it has its
  temperature indexes start at 0 (the others start at 1)
 Temp attr for the standard models 
	
	  Should really be temp1_max_alarm, but older versions did not handle
	  the max and crit alarms separately and lm_sensors v2 depends on the
	  presence of temp#_alarm files. The same goes for temp23 _alarm.
 Should be temp2_max_alarm, see temp1_alarm note 
 Should be temp3_max_alarm, see temp1_alarm note 
 Temp attr for models which can beep on temp alarm 
  Temp attr for the f8000
  Note on the f8000 temp_ovt (crit) is used as max, and temp_high (max)
  is used as hysteresis value to clear alarms
  Also like the f71858fg its temperature indexes start at 0
 in attr for all models 
 For models with in1 alarm capability 
 Fan  PWM attr common to all models 
 Attr for the third fan of the f71808a, which only has manual pwm 
 Attr for models which can beep on Fan alarm 
  PWM attr for the f71862fg, fewer pwms and fewer zones per pwm than the
  standard models
  PWM attr for the f71808ef71869, almost identical to the f71862fg, but the
  pwm setting when the temperature is above the pwmX_auto_point1_temp can be
  programmed instead of being hardcoded to 0xff
 PWM attr for the standard models 
 Fan attr specific to the f8000 (4th fan input can only measure speed) 
  PWM attr for the f8000, zones mapped to temp instead of to pwm!
  Also the register block at offset A0 maps to TEMP1 (so our temp2, as the
  F8000 starts counting temps at 0), B0 maps the TEMP2 and C0 maps to TEMP0
 Super IO functions 
 Don't step on other drivers' IO space by accident 
 according to the datasheet the key must be send twice! 
 Update once every 60 seconds 
 Get High & boundary temps
 All but the f71858fg  f8000 have this register 
 Update every second 
 Some models have 1 more fan with limited capabilities 
 Sysfs Interface 
 TEMP_TABLE_SEL 1 or 3 ? 
 convert abs to relative and check 
 convert value to register contents 
 PWM mode 
 RPM mode 
 PWM mode 
 RPM mode 
 Normal auto mode 
 Manual mode 
 Thermostat mode 
 Manual mode 
 Special case for F8000 pwm channel 3 which only does auto mode 
 Special case for F8000 auto PWM mode  Thermostat mode 
 Normal auto mode 
 Thermostat mode 
 The f71858fg does not support manual RPM mode 
 Manual 
 Normal auto mode 
 PWM mode 
 RPM mode 
 PWM mode 
 RPM mode 
 Prevent negative numbers 
 Sanity check the pwm setting 
 This is a non fatal condition 
 Check for unsupported auto pwm settings 
 This is a non fatal condition 
 Register sysfs interface files 
				
				  The f71858fg temperature alarms behave as
				  the f8000 alarms in this mode
 These always have signed auto point temps 
 to select correct fanpwm reg bank! 
 Ensure banked pwm registers point to right bank 
 Some types have 1 extra fan with limited functionality 
 Will unregister the sysfs files for us 
 f71882fg_remove() also frees our data 
 Ignore 3 LSB 
 SPDX-License-Identifier: GPL-2.0-or-later
  adm1021.c - Part of lm_sensors, Linux kernel modules for hardware
 	       monitoring
  Copyright (c) 1998, 1999  Frodo Looijaard <frodol@dds.nl> and
 			     Philip Edelbrock <phil@netroedge.com>
 Addresses to scan 
 adm1021 constants specified below 
 The adm1021 registers 
 Read-only 
 For nr in 0-1 
 0x41 = AD, 0x49 = TI, 0x4D = Maxim, 0x23 = Genesys , 0x54 = Onsemi 
 ADM1021 = 0x0X, ADM1023 = 0x3X 
 These use different addresses for readingwriting 
 These are for the ADM1023's additional precision on the remote temp sensor 
 limits 
 For nr in 0-1 
 write-only 
 Initial values 
  Note: Even though I left the low and high limits named os and hyst,
  they don't quite work like a thermostat the way the LM75 does.  I.e.,
  a lower temp than THYST actually triggers an alarm instead of
  clearing it.  Weird, ey?   --Phil
 Each client has this additional data 
 true if following fields are valid 
 !=0 if device in low power mode 
 In jiffies 
 Register values 
 Special values for ADM1023 only 
 (amalysh) read only mode, otherwise any limit's writing confuse BIOS 
			
			  The ADM1023 provides 3 extra bits of precision for
			  the remote sensor in extra registers.
 Return 0 if detection is successful, -ENODEV otherwise 
 Check unused bits 
 Determine the chip type. 
 extra checks for LM84 and MAX1617 to avoid misdetections 
 fail if any of the additional register reads failed 
		
		  Fail for negative temperatures and negative high limits.
		  This check also catches read errors on the tested registers.
 fail if all registers hold the same value 
		
		  LM84 Mfr ID is in a different place,
		  and it has more unused bits.
 fail if low limits are larger than high limits 
 Enable ADC and disable suspend mode 
 Set Conversion rate to 1sec (this can be tinkered with) 
 Initialize the ADM1021 chip 
 SPDX-License-Identifier: GPL-2.0-or-later
  tc654.c - Linux kernel modules for fan speed controller
  Copyright (C) 2016 Allied Telesis Labs NZ
 RPM Output 1 
 RPM Output 2 
 Fan Fault 1 Threshold 
 Fan Fault 2 Threshold 
 Configuration 
 Status 
 Fan Speed Duty Cycle 
 Manufacturer Identification 
 Version Identification 
 Macros to easily index the registers 
 Config register bits 
 Resolution Selection 
 Duty Cycle Control 
 Shutdown Mode 
 Status register bits 
 Fan 2 Fault 
 Fan 1 Fault 
 RPM resolution for RPM Output registers 
 25 RPM resolution 
 50 RPM resolution 
 Convert to the fan fault RPM threshold from register value 
 50 RPM resolution 
 Convert to register value from the fan fault RPM threshold 
 Register data is read (and cached) at most once per second. 
 update mutex 
 tc654 register cache 
 in jiffies 
	u8 rpm_output[2];	 The fan RPM data for fans 1 and 2 is then
				  written to registers RPM1 and RPM2
	u8 fan_fault[2];	 The Fan Fault Threshold Registers are used to
				  set the fan fault threshold levels for fan 1
				  and fan 2
	u8 config;	 The Configuration Register is an 8-bit read
			  writable multi-function control register
			    7: Fan Fault Clear
			       1 = Clear Fan Fault
			       0 = Normal Operation (default)
			    6: Resolution Selection for RPM Output Registers
			       RPM Output Registers (RPM1 and RPM2) will be
			       set for
			       1 = 25 RPM (9-bit) resolution
			       0 = 50 RPM (8-bit) resolution (default)
			    5: Duty Cycle Control Method
			       The V OUT duty cycle will be controlled via
			       1 = the SMBus interface.
			       0 = via the V IN analog input pin. (default)
			  4,3: Fan 2 Pulses Per Rotation
			       00 = 1
			       01 = 2 (default)
			       10 = 4
			       11 = 8
			  2,1: Fan 1 Pulses Per Rotation
			       00 = 1
			       01 = 2 (default)
			       10 = 4
			       11 = 8
			    0: Shutdown Mode
			       1 = Shutdown mode.
			       0 = Normal operation. (default)
	u8 status;	 The Status register provides all the information
			  about what is going on within the TC654TC655
			  devices.
			  7,6: Unimplemented, Read as '0'
			    5: Over-Temperature Fault Condition
			       1 = Over-Temperature condition has occurred
			       0 = Normal operation. V IN is less than 2.6V
			    4: RPM2 Counter Overflow
			       1 = Fault condition
			       0 = Normal operation
			    3: RPM1 Counter Overflow
			       1 = Fault condition
			       0 = Normal operation
			    2: V IN Input Status
			       1 = V IN is open
			       0 = Normal operation. voltage present at V IN
			    1: Fan 2 Fault
			       1 = Fault condition
			       0 = Normal operation
			    0: Fan 1 Fault
			       1 = Fault condition
			       0 = Normal operation
	u8 duty_cycle;	 The DUTY_CYCLE register is a 4-bit read
			  writable register used to control the duty
			  cycle of the V OUT output.
 helper to grab and cache data, at most one time per second 
 upon error, encode it in return value 
  sysfs attributes
 Driver data 
  device probe and removal
 SPDX-License-Identifier: GPL-2.0-only
   Driver for the ADT7411 (I2CSPI 8 channel 10 bit ADC & temperature-sensor)
   Copyright (C) 2008, 2010 Pengutronix
   TODO: SPI, use power-down mode for suspend?, interrupt handling?
 for "atomic" device accesses 
  When reading a register containing (up to 4) lsb, all associated
  msb-registers get locked by the hardware. After _one_ of those msb is read,
  _all_ are unlocked. In order to use this locking correctly, reading lsbmsb
  is protected here with a mutex, too.
 force update 
 10 bit signed 
 8 bit signed 
	
	  We must only write zero to bit 1 and bit 2 and only one to bit 3
	  according to the datasheet.
	
	  We must only write zero to bit 1 and only one to bit 3 according to
	  the datasheet.
 enable monitoring 
 force update on first occasion 
 SPDX-License-Identifier: GPL-2.0-or-later
  Hardware monitoring driver for Maxim MAX6621
  Copyright (c) 2017 Mellanox Technologies. All rights reserved.
  Copyright (c) 2017 Vadim Pasternak <vadimp@mellanox.com>
 Error codes 
#define MAX6621_TRAN_FAILED	0x8100	
					  PECI transaction failed for more
					  than the configured number of
					  consecutive retries.
#define MAX6621_POOL_DIS	0x8101	
					  Polling disabled for requested
					  socketdomain.
#define MAX6621_POOL_UNCOMPLETE	0x8102	
					  First poll not yet completed for
					  requested socketdomain (on
					  startup).
#define MAX6621_SD_DIS		0x8103	
					  Read maximum temperature requested,
					  but no socketsdomains enabled or
					  all enabled socketsdomains have
					  errors; or read maximum temperature
					  address requested, but read maximum
					  temperature was not called.
#define MAX6621_ALERT_DIS	0x8104	
					  Get alert socketdomain requested,
					  but no alert active.
 Intel spec PECI error min value. 
 Intel spec PECI error max value. 
  struct max6621_data - private data:
  @client: I2C client;
  @regmap: register map handle;
  @input_chan2reg: mapping from channel to register;
 Skip channels which are not physically conncted. 
			
			  Bit MAX6621_REG_TEMP_SHIFT represents 1 degree step.
			  The temperature is given in two's complement and 8
			  bits is used for the register conversion.
			
			  Set val to zero to recover the case, when reading
			  MAX6621_TEMP_ALERT_CAUSE_REG results in for example
			  MAX6621_ALERT_DIS. Reading will return with error,
			  but in such case alarm should be returned as 0.
 Do not report error if alert is disabled. 
			
			  Clear the alert automatically, using send-byte
			  smbus protocol for clearing alert.
 Clamp to allowed range to prevent overflow. 
 Clamp to allowed range to prevent overflow. 
 Set CONFIG0 register masking temperature alerts and PEC. 
 Set CONFIG1 register for PEC access retry number. 
 Sync registers with hardware. 
 Verify which temperature input registers are enabled. 
 SPDX-License-Identifier: GPL-2.0-or-later
  w83791d.c - Part of lm_sensors, Linux kernel modules for hardware
 	       monitoring
  Copyright (C) 2006-2007 Charles Spirakis <bezaur@gmail.com>
  Supports following chips:
  Chip		#vin	#fanin	#pwm	#temp	wchipid	vendid	i2c	ISA
  w83791d	10	5	5	3	0x71	0x5ca3	yes	no
  The w83791d chip appears to be part way between the 83781d and the
  83792d. Thus, this file is derived from both the w83792d.c and
  w83781d.c files.
  The w83791g chip is the same as the w83791d but lead-free.
 Addresses to scan 
 Insmod parameters 
 The W83791D registers 
 VCOREA in DataSheet 
 VINR0 in DataSheet 
 +3.3VIN in DataSheet 
 VDD5V in DataSheet 
 +12VIN in DataSheet 
 -12VIN in DataSheet 
 -5VIN in DataSheet 
 5VSB in DataSheet 
 VBAT in DataSheet 
 VINR1 in DataSheet 
 VCOREA High Limit in DataSheet 
 VINR0 High Limit in DataSheet 
 +3.3VIN High Limit in DataSheet 
 VDD5V High Limit in DataSheet 
 +12VIN High Limit in DataSheet 
 -12VIN High Limit in DataSheet 
 -5VIN High Limit in DataSheet 
 5VSB High Limit in DataSheet 
 VBAT High Limit in DataSheet 
 VINR1 High Limit in DataSheet 
 VCOREA Low Limit in DataSheet 
 VINR0 Low Limit in DataSheet 
 +3.3VIN Low Limit in DataSheet 
 VDD5V Low Limit in DataSheet 
 +12VIN Low Limit in DataSheet 
 -12VIN Low Limit in DataSheet 
 -5VIN Low Limit in DataSheet 
 5VSB Low Limit in DataSheet 
 VBAT Low Limit in DataSheet 
 VINR1 Low Limit in DataSheet 
 FAN 1 Count in DataSheet 
 FAN 2 Count in DataSheet 
 FAN 3 Count in DataSheet 
 FAN 4 Count in DataSheet 
 FAN 5 Count in DataSheet 
 FAN 1 Count Low Limit in DataSheet 
 FAN 2 Count Low Limit in DataSheet 
 FAN 3 Count Low Limit in DataSheet 
 FAN 4 Count Low Limit in DataSheet 
 FAN 5 Count Low Limit in DataSheet 
 PWM 1 duty cycle register in DataSheet 
 PWM 2 duty cycle register in DataSheet 
 PWM 3 duty cycle register in DataSheet 
 PWM 4 duty cycle register in DataSheet 
 PWM 5 duty cycle register in DataSheet 
 PWM 1 target temperature for temp 1 
 PWM 2 target temperature for temp 2 
 PWM 3 target temperature for temp 3 
 PWM 12 temperature tolerance 
 PWM 3 temperature tolerance 
 FAN 12 configuration 
 FAN 3 configuration 
 contains FAN1 and FAN2 Divisor 
 contains FAN3 Divisor 
 contains FAN4 and FAN5 Divisor 
 TEMP 1 in DataSheet 
 TEMP 1 Over in DataSheet 
 TEMP 1 Hyst in DataSheet 
 TEMP 2 in DataSheet 
 TEMP 2(0.5 deg) in DataSheet 
 TEMP 2 Over High part in DataSheet 
 TEMP 2 Over Low part in DataSheet 
 TEMP 2 Thyst High part in DataSheet 
 TEMP 2 Thyst Low part in DataSheet 
 TEMP 3 in DataSheet 
 TEMP 3(0.5 deg) in DataSheet 
 TEMP 3 Over High part in DataSheet 
 TEMP 3 Over Low part in DataSheet 
 TEMP 3 Thyst High part in DataSheet 
 TEMP 3 Thyst Low part in DataSheet 
 BEEP Control Register 1 
 BEEP Control Register 2 
 BEEP Control Register 3 
 realtime status register1 
 realtime status register2 
 realtime status register3 
  The SMBus locks itself. The Winbond W83791D has a bank select register
  (index 0x4e), but the driver only accesses registers in bank 0. Since
  we don't switch banks, we don't need any special code to handle
  locking access between bank switches
  The analog voltage inputs have 16mV LSB. Since the sysfs output is
  in mV as would be measured on the chip input pin, need to just
  multiplydivide by 16 to translate fromto register values.
 for temp1 which is 8-bit resolution, LSB = 1 degree Celsius 
  for temp2 and temp3 which are 9-bit resolution, LSB = 0.5 degree Celsius
  Assumes the top 8 bits are the integral amount and the bottom 8 bits
  are the fractional amount. Since we only have 0.5 degree resolution,
  the bottom 7 bits will always be zero
 for thermal cruise target temp, 7-bits, LSB = 1 degree Celsius 
 for thermal cruise temp tolerance, 4-bits, LSB = 1 degree Celsius 
 fan divisors max out at 128 
 true if following fields are valid 
 In jiffies 
 volts 
 Register value 
 Register value 
 Register value 
 fans 
 Register value 
 Register value 
 Register encoding, shifted right 
 Temperature sensors 
 current, over, thyst 
	s16 temp_add[2][3];	 fixed point value. Top 8 bits are the
				  integral part, bottom 8 bits are the
				  fractional part. We only use the top
				  9 bits as the resolution is only
				  to the 0.5 degree C...
				  two sensors with three values
				  (cur, over, hyst)
 PWMs 
 pwm duty cycle 
	u8 pwm_enable[3];	 pwm enable status for fan 1-3
				  (fan 4-5 only support manual mode)
 pwm 1-3 target temperature 
 pwm 1-3 temperature tolerance 
 Misc 
 realtime status register encoding,combined 
 Global beep enable 
 Mask off specific beeps 
 Register encoding, combined 
 hwmon-vid 
 following are the sysfs callback functions 
  Note: The bitmask for the beep enabledisable is different than
  the bitmask for the alarm.
  Note: we save and restore the fan minimum here, because its value is
  determined in part by the fan divisor.  This follows the principle of
  least surprise; the user doesn't expect the fan minimum to change just
  because the divisor changed.
 Save fan_min 
 Bit 2 of fans 0-2 is stored in the vbat register (bits 5-7) 
 Restore fan_min 
 readwrite PWMs 
 For Smart Fan I  Thermal Cruise 
 readwrite the temperature1, includes measured value and limits 
 readwrite temperature2-3, includes measured value and limits 
  Note: The bitmask for the beep enabledisable is different than
  the bitmask for the alarm.
 get realtime status of all sensors items: voltage, temp, fan 
 Beep control 
	
	  The beep_enable state overrides any enabling request from
	  the masks
 Keep the full mask value in sync with the current enable 
	
	  The global control is in the second beep control register
	  so only need to update that register
 cpu voltage regulation information 
	
	  No lock needed as vrm is internal to the driver
	  (not read from a chip register) and so is not
	  updated in w83791d_update_device()
  Separate group of attributes for fanpwm 4-5. Their pins can also be
  in use for GPIO in which case their sysfs-interface should not be made
  available
 Return 0 if detection is successful, -ENODEV otherwise 
 Check for Winbond ID if in bank 0 
	
	  If Winbond chip, address of chip and W83791D_REG_I2C_ADDR
	  should match
 We want bank 0 and Vendor ID high byte 
 Verify it is a Winbond w83791d 
 Initialize the chip 
	
	  If the fan_div is changed, make sure there is a rational
	  fan_min in place
 Register sysfs hooks 
 Check if pins of fanpwm 4-5 are in use as GPIO 
 Everything is ready, now register the working device 
	
	  The difference between reset and init is that reset
	  does a hard reset of the chip via index 0x40, bit 7,
	  but init simply forces certain registers to have "sane"
	  values. The hope is that the BIOS has done the right
	  thing (which is why the default is reset=0, init=0),
	  but if not, reset is the hard hammer and init
	  is the soft mallet both of which are trying to whack
	  things into place...
	  NOTE: The data sheet makes a distinction between
	  "power on defaults" and "reset by MR". As far as I can tell,
	  the hard reset puts everything into a power-on state so I'm
	  not sure what "reset by MR" means or how it can happen.
 keep some BIOS settings when we... 
 ... reset the chip and ... 
 ... disable power-on abnormal beep 
 disable the global beep (not done by hard reset) 
 Make sure monitoring is turned on for add-ons 
 Start monitoring 
 Update the voltages measured value and limits 
 Update the fan counts and limits 
 Update the Fan measured value and limits 
 Update the fan divisor 
		
		  The fan divisor for fans 0-2 get bit 2 from
		  bits 5-7 respectively of vbat register
 Update PWM duty cycle 
 Update PWM enable status 
 Update PWM target temperature 
 Update PWM temperature tolerance 
 Update the first temperature sensor 
 Update the rest of the temperature sensors 
 Update the realtime status 
 Update the beep configuration information 
 Extract global beep enable flag 
 Update the cpu voltage information 
	
	  temperature math is signed, but only print out the
	  bits that matter
 SPDX-License-Identifier: GPL-2.0
  Analog Devices LTC2947 high precision power and energy monitor over SPI
  Copyright 2019 Analog Devices Inc.
 SPDX-License-Identifier: GPL-2.0-only
  INA3221 Triple CurrentVoltage Monitor
  Copyright (C) 2016 Texas Instruments Incorporated - https:www.ti.com
 	Andrew F. Davis <afd@ti.com>
 Configuration 
 Status Flags 
 Warning Flags 
 Alert Flags: SF is the summation-alert flag 
 sentinel 
  struct ina3221_input - channel input source specific information
  @label: label of channel input source
  @shunt_resistor: shunt resistor value of channel input source
  @disconnected: connection status of channel input source
  struct ina3221_data - device specific information
  @pm_dev: Device pointer for pm runtime
  @regmap: Register map of the device
  @fields: Register fields of the device
  @inputs: Array of channel input source specific structures
  @lock: mutex lock to serialize sysfs attribute accesses
  @reg_config: Register value of INA3221_CONFIG
  @summation_shunt_resistor: equivalent shunt resistor value for summation
  @single_shot: running in single-shot operating mode
 Summation channel checks shunt resistor values 
  Helper function to return the resistor value for current summation.
  There is a condition to calculate current summation -- all the shunt
  resistor values should be the same, so as to simply fit the formula:
      current summation = shunt voltage summation  shunt resistor
  Returns the equivalent shunt resistor value on success or 0 on failure
 Found the reference shunt resistor value 
 No summation if resistor values are different 
 Lookup table for Bus and Shunt conversion times in usec 
 Lookup table for number of samples using in averaging mode 
 Converting update_interval in msec to conversion time in usec 
 Bisect the result to Bus and Shunt conversion times 
 Converting CONFIG register value to update_interval in usec 
 Calculate total conversion time 
 Polling the CVRF bit to make sure read data is ready 
	
	  Shunt Voltage Sum register has 14-bit value with 1-bit shift
	  Other Shunt Voltage registers have 12 bits with 3-bit shift
 Return in msec 
	
	  Translate shunt channel index to sensor channel index except
	  the 7th channel (6 since being 0-aligned) is for summation.
 Write CONFIG register to trigger a single-shot measurement 
		
		  Scale of shunt voltage (uV): LSB is 40uV
		  Scale of bus voltage (mV): LSB is 8mV
 Write CONFIG register to trigger a single-shot measurement 
 Scale of shunt voltage: LSB is 40uV (40000nV) 
 Return current in mA 
 No actual register read if channel is disabled 
 Return 0 for alert flags 
 Update reg_config accordingly 
 Update Bus and Shunt voltage conversion times 
 Update reg_config accordingly 
 clamp current 
 clamp voltage 
	
	  Formula to convert voltage_uv to register value:
	      regval = (voltage_uv  scale) << shift
	  Note:
	      The scale is 40uV for all shunt voltage registers
	      Shunt Voltage Sum register left-shifts 1 bit
	      All other Shunt Voltage registers shift 3 bits
	  Results:
	      SHUNT_SUM: (1  40uV) << 1 = 1  20uV
	      SHUNT[1-3]: (1  40uV) << 3 = 1  5uV
 Bypass if enable status is not being changed 
 For enabling routine, increase refcount and resume() at first 
 Enable or disable the channel 
 Cache the latest config register value 
 For disabling routine, decrease refcount or suspend() at last 
 0-align channel ID 
 0-align channel ID 
 Ignore in0_ 
 Hide label node if label is not provided 
 0: dummy, skipped in is_visible 
 1-3: input voltage Channels 
 4-6: shunt voltage Channels 
 7: summation of shunt voltage channels 
 1-3: current channels
 4: summation of current channels 
 Extra attribute groups 
 Update summation_shunt_resistor for summation channel 
 shunt resistance 
 Log the disconnected channel input 
 Save the connected input label if available 
 Overwrite default shunt resistor value optionally 
 Compatible with non-DT platforms 
 The driver will be reset, so use reset value 
 Clear continuous bit to use single-shot mode 
 Disable channels if their inputs are disconnected 
 Initialize summation_shunt_resistor for summation channel control 
 Enable PM runtime -- status is suspended by default 
 Initialize (resume) the device 
 Match the refcount with number of enabled channels 
 pm_runtime_put_noidle() will decrease the PM refcount until 0 
 pm_runtime_put_noidle() will decrease the PM refcount until 0 
 Save config register value and enable cache-only 
 Set to power-down mode for power saving 
 Software reset the chip 
 Restore cached register values to hardware 
 Restore config register value to hardware 
 Initialize summation channel control 
		
		  Take all three channels into summation by default
		  Shunt measurements of disconnected channels should
		  be 0, so it does not matter for summation.
 sentinel  }
 sentinel  }
 SPDX-License-Identifier: GPL-2.0-or-later
  AD7314 digital temperature sensor driver for AD7314, ADT7301 and ADT7302
  Copyright 2010 Analog Devices Inc.
  Conversion to hwmon from IIO done by Jonathan Cameron <jic23@cam.ac.uk>
  AD7314 temperature masks
  ADT7301 and ADT7302 temperature masks
		
		  Documented as a 13 bit twos complement register
		  with a sign bit - which is a 14 bit 2's complement
		  register.  1lsb - 31.25 milli degrees centigrade
 SPDX-License-Identifier: GPL-2.0-or-later
  w83627hf.c - Part of lm_sensors, Linux kernel modules for hardware
 		monitoring
  Copyright (c) 1998 - 2003  Frodo Looijaard <frodol@dds.nl>,
 			      Philip Edelbrock <phil@netroedge.com>,
 			      and Mark Studebaker <mdsxyz123@yahoo.com>
  Ported to 2.6 by Bernhard C. Schrenk <clemy@clemy.org>
  Copyright (c) 2007 - 1012  Jean Delvare <jdelvare@suse.de>
  Supports following chips:
  Chip		#vin	#fanin	#pwm	#temp	wchipid	vendid	i2c	ISA
  w83627hf	9	3	2	3	0x20	0x5ca3	no	yes(LPC)
  w83627thf	7	3	3	3	0x90	0x5ca3	no	yes(LPC)
  w83637hf	7	3	3	3	0x80	0x5ca3	no	yes(LPC)
  w83687thf	7	3	3	3	0x90	0x5ca3	no	yes(LPC)
  w83697hf	8	2	2	2	0x60	0x5ca3	no	yes(LPC)
  For other winbond chips, and for i2c support in the above chips,
  use w83781d.c.
  Note: automatic ("cruise") fan control for 697, 637 & 627thf not
  supported yet.
 modified from kernelincludetraps.c 
 Register: Logical device select 
 logical device numbers for superio_select (below) 
 w83627hf only 
 w83627thf only 
 w83627thf only 
 Register: Device ID 
 w83627thf only 
 w83627thf only 
 w83627thf only 
 w83687thf only 
 w83687thf only 
 w83687thf only 
 Constants specified below 
 Alignment of the base address 
 Offset & size of IO region we are interested in 
 Where are the sensors addressdata registers relative to the region offset 
 The W83781D registers 
 The W83782D registers for nr=7,8 are in bank 5 
 nr:0-2 for fans:1-3 
 these are zero-based, unlike config constants above 
 FAN 1 mode 
 FAN 2 mode 
 FAN AUX mode 
 697HF637HF687THF too 
 697HF637HF687THF too 
 637HF687THF too 
 637HF687THF too 
 Only for the 627HF 
 697HF687THF too 
 697HF687THF too 
 687THF too 
 Sensor selection 
  Conversions. Limit checking is only done on the TO_REG
  variants. Note that you should be a bit careful with which arguments
  these macros are called: arguments may be evaluated more than once.
  Fixing this is just not worth it.
  TEMP: 0.001Cbit (-128C to +127C)
  REG: 1Cbit, two's complement
	
	  Only 5 dividers (1 2 4 8 16)
	  Search for the nearest available frequency
 Clock bit 8 -> 180 kHz or 24 MHz 
 This should not happen but anyway... 
 Minimum divider value is 0x01 and maximum is 0x7F 
 The highest we can do 
 Use 24 MHz clock 
 The lowest we can do 
 Use 180 kHz clock 
  For each registered chip, we need to keep some data in memory.
  The structure is dynamically allocated.
 true if following fields are valid 
 In jiffies 
 Register value 
 Register value 
 Register value 
 Register value 
 Register value 
 Register value 
 Register value 
 Register value 
 Register encoding, shifted right 
 Register encoding, combined 
 Register encoding, combined 
 Register encoding, combined 
 Register value 
	u8 pwm_enable[3];	 1 = manual
				  2 = thermal cruise (also called SmartFan I)
				  3 = fan speed cruise
 Register value 
	u16 sens[3];		 1 = pentium diode; 2 = 3904 diode;
				  4 = thermistor
 Register value, 627THF637HF687THF only 
 Remember extra register values over suspendresume 
 Restore limits 
 skip missing sensors 
 Fixup BIOS bugs 
 Force re-reading all values 
 CONFIG_PM 
 use a different set of functions for in0 
 use VRM9 calculation 
 use VRM8 (standard) calculation 
 use VRM9 calculation 
 use VRM8 (standard) calculation 
 use VRM9 calculation 
 use VRM8 (standard) calculation 
 preserve beep enable 
  Note: we save and restore the fan minimum here, because its value is
  determined in part by the fan divisor.  This follows the principle of
  least surprise; the user doesn't expect the fan minimum to change just
  because the divisor changed.
 Save fan_min 
 Restore fan_min 
 bits 0-3 are reserved  in 627THF 
 modes 1, 2 and 3 are supported 
 PIICeleron diode 
 3904 
 thermistor 
 No device at all 
 Initialize the chip 
 A few vars need to be filled upon startup 
 Register common device attributes 
 Register chip-specific device attributes 
 Convert VID to voltage based on VRM 
 Registers 0x50-0x5f are banked 
 Not strictly necessary, but play it safe for now 
		
		  Some other driver reserved the address space for itself.
		  We don't want to fail driver instantiation because of that,
		  so display a warning and keep going.
 Make sure these GPIO pins are enabled 
	
	  Make sure the pins are configured for input
	  There must be at least five (VRM 9), and possibly 6 (VRM 10)
		
		  Some other driver reserved the address space for itself.
		  We don't want to fail driver instantiation because of that,
		  so display a warning and keep going.
 Make sure these GPIO pins are enabled 
 Make sure the pins are configured for input 
 Minimize conflicts with other winbond i2c-only clients...  
 disable i2c subclients... how to disable main i2c client?? 
 force i2c address to relatively uncommon address 
 Read VID only once 
 Read VRM & OVT Config only once 
 Enable temp2 
 Enable temp3 
 Start monitoring 
 Enable VBAT monitoring if needed 
 skip missing sensors 
 bits 0-3 are reserved  in 627THF 
 Sets global pdev as a side effect 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2012 ARM Limited
 SPDX-License-Identifier: GPL-2.0+
  Hardware monitoring driver for MAX127.
  Copyright (c) 2020 Facebook Inc.
  MAX127 Control Byte. Refer to MAX127 datasheet, Table 1 "Control-Byte
  Format" for details.
  MAX127 channel input ranges. Refer to MAX127 datasheet, Table 3 "Range
  and Polarity Selection" for details.
 10V 
 5V 
  MAX127 returns 2 bytes at read:
    - the first byte contains data[11:4].
    - the second byte contains data[3:0] (MSB) and 4 dummy 0s (LSB).
  Refer to MAX127 datasheet, "Read a Conversion (Read Cycle)" section
  for details.
	
	  MAX127's data coding is binary in unipolar mode with 1 LSB =
	  (Full-Scale4096) and two’s complement binary in bipolar mode
	  with 1 LSB = [(2 x |FS|)4096].
	  Refer to MAX127 datasheet, "Transfer Function" section for
	  details.
 RNG=0, BIP=0 
 RNG=0, BIP=1 
 RNG=1, BIP=0 
 RNG=1, BIP=1 
 RNG=0, BIP=0 
 RNG=0, BIP=1 
 RNG=1, BIP=0 
 RNG=1, BIP=1 
 SPDX-License-Identifier: GPL-2.0-only
 linuxdrivershwmons3c-hwmon.c
  Copyright (C) 2005, 2008, 2009 Simtec Electronics
 	http:armlinux.simtec.co.uk
 	Ben Dooks <ben@simtec.co.uk>
  S3C24XXS3C64XX ADC hwmon support
  struct s3c_hwmon - ADC hwmon client information
  @lock: Access lock to serialise the conversions.
  @client: The client we registered with the S3C ADC core.
  @hwmon_dev: The hwmon device we created.
  @attr: The holders for the channel attributes.
  s3c_hwmon_read_ch - read a value from a given adc channel.
  @dev: The device.
  @hwmon: Our state.
  @channel: The channel we're reading from.
  Read a value from the @channel with the proper locking and sleep until
  either the read completes or we timeout awaiting the ADC core to get
  back to us.
  s3c_hwmon_show_raw - show a conversion from the raw channel number.
  @dev: The device that the attribute belongs to.
  @attr: The attribute being read.
  @buf: The result buffer.
  This show deals with the raw attribute, registered for each possible
  ADC channel. This does a conversion and returns the raw (un-scaled)
  value returned from the hardware.
 CONFIG_SENSORS_S3C_RAW 
  s3c_hwmon_ch_show - show value of a given channel
  @dev: The device that the attribute belongs to.
  @attr: The attribute being read.
  @buf: The result buffer.
  Read a value from the ADC and scale it before returning it to the
  caller. The scale factor is gained from the channel configuration
  passed via the platform data when the device was registered.
  s3c_hwmon_label_show - show label name of the given channel.
  @dev: The device that the attribute belongs to.
  @attr: The attribute being read.
  @buf: The result buffer.
  Return the label name of a given channel
  s3c_hwmon_create_attr - create hwmon attribute for given channel.
  @dev: The device to create the attribute on.
  @cfg: The channel configuration passed from the platform data.
  @channel: The ADC channel number to process.
  Create the scaled attribute for use with hwmon from the specified
  platform data in @pdata. The sysfs entry is handled by the routine
  s3c_hwmon_ch_show().
  The attribute name is taken from the configuration data if present
  otherwise the name is taken by concatenating in_ with the channel
  number.
 if this has a name, add a label 
  s3c_hwmon_probe - device probe entry.
  @dev: The device being probed.
 Register with the core ADC driver. 
 add attributes for our adc devices. 
 register with the hwmon core 
 SPDX-License-Identifier: GPL-2.0-or-later
  adm9240.c	Part of lm_sensors, Linux kernel modules for hardware
 		monitoring
  Copyright (C) 1999	Frodo Looijaard <frodol@dds.nl>
 			Philip Edelbrock <phil@netroedge.com>
  Copyright (C) 2003	Michiel Rook <michiel@grendelproject.nl>
  Copyright (C) 2005	Grant Coady <gcoady.lk@gmail.com> with valuable
 				guidance from Jean Delvare
  Driver supports	Analog Devices		ADM9240
 			Dallas Semiconductor	DS1780
 			National Semiconductor	LM81
  ADM9240 is the reference, DS1780 and LM81 are register compatibles
  Voltage	Six inputs are scaled by chip, VID also reported
  Temperature	Chip temperature to 0.5'C, maximum and max_hysteris
  Fans		2 fans, low speed alarm, automatic fan clock divider
  Alarms	16-bit map of active alarms
  Analog Out	0..1250 mV output
  Chassis Intrusion: clear CI latch with 'echo 0 > intrusion0_alarm'
  Test hardware: Intel SE440BX-2 desktop motherboard --Grant
  LM81 extended temp reading not implemented
 Addresses to scan 
 ADM9240 registers 
 0..5 
 0..1 
 0, 1 = high, hyst 
 generalised scaling with integer rounding 
 adm9240 internally scales voltage measurements 
 temperature range: -40..125, 127 disables temperature alarm 
 two fans, each with low fan speed limit 
 error 
 analog out 0..1250mV 
 per client data 
 rw	fan1_div, read-only accessor 
 --	vrm set on startup, no accessor 
 write new fan div, callers must hold data->update_lock 
  set fan speed low limit:
  - value is zero: disable fan speed low limit alarm
  - value is below fan speed measurement range: enable fan speed low
    limit alarm to be asserted while fan speed too slow to measure
  - otherwise: select fan clock divider to suit fan speed low limit,
    measurement code may adjust registers to ensure fan speed reading
 keep > 0 
 sensor chip detect and driver install 
 Return 0 if detection is successful, -ENODEV otherwise 
 verify chip: reg address should match i2c address 
 check known chip manufacturer 
 successful detect, print chip info 
 need this to report vid as mV 
 measurement cycle running: report state 
 cold start: open limits before starting chip 
 start measurement cycle 
 read fan divs 
 adjust fan clock divider on overflow 
 SPDX-License-Identifier: GPL-2.0-or-later
  max1619.c - Part of lm_sensors, Linux kernel modules for hardware
              monitoring
  Copyright (C) 2003-2004 Oleksij Rempel <bug-track@fisher-privat.net>
                          Jean Delvare <jdelvare@suse.de>
  Based on the lm90 driver. The MAX1619 is a sensor chip made by Maxim.
  It reports up to two temperatures (its own plus up to
  one external one). Complete datasheet can be
  obtained from Maxim's website at:
    http:pdfserv.maxim-ic.comendsMAX1619.pdf
  The MAX1619 registers
  Conversions
  Client data (each client gets its own)
 false until following fields are valid 
 in jiffies 
 registers values 
 index with enum temp_index 
 If OVERT polarity is low, reverse alarm bit 
  Sysfs stuff
 Return 0 if detection is successful, -ENODEV otherwise 
 detection 
 identification 
	
	  Start the conversions.
 2 Hz 
 run 
 Initialize the MAX1619 chip 
 SPDX-License-Identifier: GPL-2.0-or-later
  lm83.c - Part of lm_sensors, Linux kernel modules for hardware
           monitoring
  Copyright (C) 2003-2009  Jean Delvare <jdelvare@suse.de>
  Heavily inspired from the lm78, lm75 and adm1021 drivers. The LM83 is
  a sensor chip made by National Semiconductor. It reports up to four
  temperatures (its own plus up to three external ones) with a 1 deg
  resolution and a 3-4 deg accuracy. Complete datasheet can be obtained
  from National's website at:
    http:www.national.compfLMLM83.html
  Since the datasheet omits to give the chip stepping code, I give it
  here: 0x03 (at register 0xff).
  Also supports the LM82 temp sensor, which is basically a stripped down
  model of the LM83.  Datasheet is here:
  http:www.national.compfLMLM82.html
  Addresses to scan
  Address is selected using 2 three-level pins, resulting in 9 possible
  addresses.
  The LM83 registers
  Manufacturer ID is 0x01 for National Semiconductor.
  Conversions and various macros
  The LM83 uses signed 8-bit values with LSB = 1 degree Celsius.
  Client data (each client gets its own)
 false until following fields are valid 
 in jiffies 
 registers values 
	s8 temp[9];	 0..3: input 1-4,
			   4..7: high limit 1-4,
 bitvector, combined 
  Sysfs stuff
 Individual alarm files 
 Raw alarm file for compatibility 
  Real code
 Return 0 if detection is successful, -ENODEV otherwise 
 Detection 
 Identification 
 National Semiconductor 
 identification failed 
	
	  Register sysfs hooks
	  The LM82 can only monitor one external diode which is
	  at the same register as the LM83 temp3 entry - so we
	  declare 1 and 3 common, and then 2 and 4 only for the LM83.
  Driver data (common to all clients)
 SPDX-License-Identifier: GPL-2.0-only
  aht10.c - Linux hwmon driver for AHT10 Temperature and Humidity sensor
  Copyright (C) 2020 Johannes Cornelis Draaijer
  Poll intervals (in milliseconds)
  I2C command delays (in microseconds)
  Command bytes
  Flags in the answer bytecommand
    struct aht10_data - All the data required to operate an AHT10 chip
    @client: the i2c client associated with the AHT10
    @lock: a mutex that is used to prevent parallel access to the
           i2c client
    @min_poll_interval: the minimum poll interval
                    While the poll rate limit is not 100% necessary,
                    the datasheet recommends that a measurement
                    is not performed too often to prevent
                    the chip from warming up due to the heat it generates.
                    If it's unwanted, it can be ignored setting it to
                    it to 0. Default value is 2000 ms
    @previous_poll_time: the previous time that the AHT10
                         was polled
    @temperature: the latest temperature value received from
                  the AHT10
    @humidity: the latest humidity value received from the
               AHT10
	
	  Prevent simultaneous access to the i2c
	  client and previous_poll_time
  aht10_init() - Initialize an AHT10 chip
  @client: the i2c client associated with the AHT10
  @data: the data associated with this AHT10 chip
  Return: 0 if succesfull, 1 if not
  aht10_polltime_expired() - check if the minimum poll interval has
                                   expired
  @data: the data containing the time to compare
  Return: 1 if the minimum poll interval has expired, 0 if not
  aht10_read_values() - read and parse the raw data from the AHT10
  @aht10_data: the struct aht10_data to use for the lock
  Return: 0 if succesfull, 1 if not
  aht10_interval_write() - store the given minimum poll interval.
  Return: 0 on success, -EINVAL if a value lower than the
          AHT10_MIN_POLL_INTERVAL is given
  aht10_interval_read() - read the minimum poll interval
                             in milliseconds
  aht10_temperature1_read() - read the temperature in millidegrees
  aht10_humidity1_read() - read the relative humidity in millipercent
 SPDX-License-Identifier: GPL-2.0-or-later
  corsair-cpro.c - Linux driver for Corsair Commander Pro
  Copyright (C) 2020 Marius Zachmann <mail@mariuszachmann.de>
  This driver uses hid reports to communicate with the device to allow hidraw userspace drivers
  still being used. The device does not use report ids. When using hidraw and this driver
  simultaniously, reports could be switched.
#define CTL_GET_TMP_CNCT	0x10	
					  returns in bytes 1-4 for each temp sensor:
					  0 not connected
					  1 connected
#define CTL_GET_TMP		0x11	
					  send: byte 1 is channel, rest zero
					  rcv:  returns temp for channel in centi-degree celsius
					  in bytes 1 and 2
					  returns 0x11 in byte 0 if no sensor is connected
#define CTL_GET_VOLT		0x12	
					  send: byte 1 is rail number: 0 = 12v, 1 = 5v, 2 = 3.3v
					  rcv:  returns millivolt in bytes 1,2
					  returns error 0x10 if request is invalid
#define CTL_GET_FAN_CNCT	0x20	
					  returns in bytes 1-6 for each fan:
					  0 not connected
					  1 3pin
					  2 4pin
#define CTL_GET_FAN_RPM		0x21	
					  send: byte 1 is channel, rest zero
					  rcv:  returns rpm in bytes 1,2
#define CTL_GET_FAN_PWM		0x22	
					  send: byte 1 is channel, rest zero
					  rcv:  returns pwm in byte 1 if it was set
					 	 returns error 0x12 if fan is controlled via
					 	 fan_target or fan curve
#define CTL_SET_FAN_FPWM	0x23	
					  set fixed pwm
					  send: byte 1 is fan number
					  send: byte 2 is percentage from 0 - 100
#define CTL_SET_FAN_TARGET	0x24	
					  set target rpm
					  send: byte 1 is fan number
					  send: byte 2-3 is target
					  device accepts all values from 0x00 - 0xFFFF
 whenever buffer is used, lock before send_usb_cmd 
 converts response error in buffer to errno 
 success 
 called invalid command 
 called GET_VOLT  GET_TMP with invalid arguments 
 requested temps of disconnected sensors 
 requested pwm of not pwm controlled channels 
 send command, check for error in response, response in ccp->buffer 
 only copy buffer when requested 
 requests and returns single data values depending on channel 
 The Corsair Commander Pro uses values from 0-100 
 how to read target values from the device is unknown 
 driver returns last set value or 0			
 read fan connection status and set labels 
 read temp sensor connection status 
 temp and fan connection status only updates when device is powered on 
  When compiling this driver as built-in, hwmon initcalls will get called before the
  hid driver and this driver would fail to register. late_initcall solves this.
 SPDX-License-Identifier: GPL-2.0-or-later
  adcxx.c
  The adcxx4s is an AD converter family from National Semiconductor (NS).
  Copyright (c) 2008 Marc Pignat <marc.pignat@hevs.ch>
  The adcxx4s communicates with a host processor via an SPIMicrowire Bus
  interface. This driver supports the whole family of devices with name
  ADC<bb><c>S<sss>, where
   bb is the resolution in number of bits (8, 10, 12)
   c is the number of channels (1, 2, 4, 8)
   sss is the maximum conversion speed (021 for 200 kSPS, 051 for 500 kSPS
    and 101 for 1 MSPS)
  Complete datasheets are available at National's website here:
  http:www.national.comdsDCADC<bb><c>S<sss>.pdf
  Handling of 8, 10 and 12 bits converters are the same, the
  unavailable bits are 0 :)
 in millivolts 
 sysfs hook function 
 other bits are don't care 
 The minimum reference is 0 for this chip family 
----------------------------------------------------------------------
 set a default value for the reference 
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (C) 2008, 2010 Davide Rizzo <elpa.rizzo@gmail.com>
  The LM95241 is a sensor chip made by National Semiconductors.
  It reports up to three temperatures (its own plus up to two external ones).
  Complete datasheet can be obtained from National's website at:
    http:www.national.comds.cgiLMLM95241.pdf
 LM95241 registers 
 LM95241 specific bitfields 
 Client data (each client gets its own) 
 in jiffies 
 in milli-seconds 
 false until following fields are valid 
 registers values 
 Conversions 
 Return 0 if detection is successful, -ENODEV otherwise 
 Fill the i2c board info 
 Initialize the LM95241 chip 
 Driver data (common to all clients) 
 SPDX-License-Identifier: GPL-2.0-or-later
  Driver for Linear Technology LTC4222 Dual Hot Swap controller
  Copyright (c) 2014 Guenter Roeck
 chip registers 
  Fault register bits
 Return the voltage from the given register in mV or mA 
 1.25 mV resolution. Convert to mV. 
 31.25 mV resolution. Convert to mV. 
		
		  62.5 uV resolution. Convert to current as measured with
		  an 1 mOhm sense resistor, in mA. If a different sense
		  resistor is installed, calculate the actual current by
		  dividing the reported current by the sense resistor value
		  in mOhm.
 Clear reported faults in chip register 
 Voltages 
  Voltage alarms
  UVOV faults are associated with the input voltage, and power bad and fet
  faults are associated with the output voltage.
 Current (via sense resistor) 
 Overcurrent alarm 
 Clear faults 
 SPDX-License-Identifier: GPL-2.0-only
  emc1403.c - SMSC Thermal Driver
  Copyright (C) 2008 Intel Corp
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 	Sensors. We pass the actual i2c register to the methods.
  EMC14x2 uses a different register and different bits to report alarm and
  fault status. For simplicity, provide a separate attribute group for this
  chip series.
  Since we can not re-use the same attribute names, create a separate attribute
  array.
 Check if thermal chip is SMSC and EMC1403 or EMC1423 
 internal diode high byte 
 external diode 1 high byte 
 status 
 external diode 1 low byte 
 external diode fault 
 external diode 2 high byte 
 external diode 2 low byte 
 internal diode low byte 
 externl diode 3 high byte 
 external diode 3 low byte 
 high limit status 
 low limit status 
 therm limit status 
 Last digit of chip name indicates number of channels 
 SPDX-License-Identifier: GPL-2.0-or-later
  adm1025.c
  Copyright (C) 2000       Chen-Yuan Wu <gwu@esoft.com>
  Copyright (C) 2003-2009  Jean Delvare <jdelvare@suse.de>
  The ADM1025 is a sensor chip made by Analog Devices. It reports up to 6
  voltages (including its own power source) and up to two temperatures
  (its own plus up to one external one). Voltages are scaled internally
  (which is not the common way) with ratios such that the nominal value
  of each voltage correspond to a register value of 192 (which means a
  resolution of about 0.5% of the nominal value). Temperature values are
  reported with a 1 deg resolution and a 3 deg accuracy. Complete
  datasheet can be obtained from Analog's website at:
    https:www.onsemi.comPowerSolutionsproduct.do?id=ADM1025
  This driver also supports the ADM1025A, which differs from the ADM1025
  only in that it has "open-drain VID inputs while the ADM1025 has
  on-chip 100k pull-ups on the VID inputs". It doesn't make any
  difference for us.
  This driver also supports the NE1619, a sensor chip made by Philips.
  That chip is similar to the ADM1025A, with a few differences. The only
  difference that matters to us is that the NE1619 has only two possible
  addresses while the ADM1025A has a third one. Complete datasheet can be
  obtained from Philips's website at:
    http:www.semiconductors.philips.compipNE1619DS.html
  Since the ADM1025 was the first chipset supported by this driver, most
  comments will refer to this chipset, but are actually general and
  concern all supported chipsets, unless mentioned otherwise.
  Addresses to scan
  ADM1025 and ADM1025A have three possible addresses: 0x2c, 0x2d and 0x2e.
  NE1619 has two possible addresses: 0x2c and 0x2d.
  The ADM1025 registers
  Conversions and various macros
  The ADM1025 uses signed 8-bit values for temperatures.
  Client data (each client gets its own)
 false until following fields are valid 
 in jiffies 
 register value 
 register value 
 register value 
 register value 
 register value 
 register value 
 register values, combined 
 register values, combined 
  Sysfs stuff
  Real code
 Return 0 if detection is successful, -ENODEV otherwise 
 Check for unused bits 
 Identification 
	
	  Set high limits
	  Usually we avoid setting limits on driver init, but it happens
	  that the ADM1025 comes with stupid default limits (all registers
	  set to 0). In case the chip has not gone through any limit
	  setting yet, we better set the high limits to the max so that
	  no alarm triggers.
	
	  Start the conversions
 Initialize the ADM1025 chip 
 sysfs hooks 
 Pin 11 is either in4 (+12V) or VID4 
 SPDX-License-Identifier: GPL-2.0-or-later
  gl518sm.c - Part of lm_sensors, Linux kernel modules for hardware
              monitoring
  Copyright (C) 1998, 1999 Frodo Looijaard <frodol@dds.nl> and
  Kyosti Malkki <kmalkki@cc.hut.fi>
  Copyright (C) 2004 Hong-Gunn Chew <hglinux@gunnet.org> and
  Jean Delvare <jdelvare@suse.de>
  Ported to Linux 2.6 by Hong-Gunn Chew with the help of Jean Delvare
  and advice of Greg Kroah-Hartman.
  Notes about the port:
  Release 0x00 of the GL518SM chipset doesn't support reading of in0,
  in1 nor in2. The original driver had an ugly workaround to get them
  anyway (changing limits and watching alarms trigger and wear off).
  We did not keep that part of the original driver in the Linux 2.6
  version, since it was making the driver significantly more complex
  with no real benefit.
 Addresses to scan 
 Many GL518 constants specified below 
 The GL518 registers 
  Conversions. Rounding and limit checking is only done on the TO_REG
  variants. Note that you should be a bit careful with which arguments
  these macros are called: arguments may be evaluated more than once.
  Fixing this is just not worth it.
 Each client has this additional data 
 true if following fields are valid 
 In jiffies 
 Register values; [0] = VDD 
 Register values; [0] = VDD 
 Register values; [0] = VDD 
 Register encoding, shifted right 
 Boolean 
 Register values 
 Register values 
 Register values 
 Register value 
 Register value 
 Boolean 
  Registers 0x07 to 0x0c are word-sized, others are byte-sized
  GL518 uses a high-byte first convention, which is exactly opposite to
  the SMBus standard.
  Sysfs stuff
  Real code
 Return 0 if detection is successful, -ENODEV otherwise 
 Now, we do the remaining detection. 
 Determine the chip type. 
  Called when we have found a new GL518SM.
  Note that we preserve D4:NoFan2 and D2:beep_enable.
 Make sure we leave D7:Reset untouched 
 Comparator mode (D3=0), standby mode (D6=0) 
 Never interrupts 
 Clear status register (D5=1), start (D6=1) 
 Initialize the GL518SM chip 
 sysfs hooks 
 SPDX-License-Identifier: GPL-2.0-only
  max1111.c - +2.7V, Low-Power, Multichannel, Serial 8-bit ADCs
  Based on archarmmach-pxacorgi_ssp.c
  Copyright (C) 2004-2005 Richard Purdie
  Copyright (C) 2008 Marvell International Ltd.
 	Eric Miao <eric.miao@marvell.com>
 MAX1111 Commands 
 NOTE: bit 4 is ignored 
 protect msg, xfer and buffers from multiple access 
 writing to drvdata struct is not thread safe, wait on mutex 
  NOTE: SPI devices do not have a default 'name' attribute, which is
  likely to be used by hwmon applications to distinguish between
  different devices, explicitly add a name attribute here.
	
	  Assume the reference voltage to be 2.048V or 4.096V, with an 8-bit
	  sample. The LSB weight is 8mV or 16mV depending on the chip type.
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2020 Sartura Ltd.
  Driver for the TI TPS23861 PoE PSE.
  Author: Robert Marko <robert.marko@sartura.hr>
 Measurment beyond clamp voltage 
 Insufficient voltage delta 
 0.652 degrees Celsius 
 3.662 mV 
 255 mOhm 
 62.260 uA 
 61.039 uA 
 11.0966 Ohm
 15.7216 Ohm
 SPDX-License-Identifier: GPL-2.0-or-later
  max31790.c - Part of lm_sensors, Linux kernel modules for hardware
              monitoring.
  (C) 2015 by Il Han <corone.il.han@gmail.com>
 MAX31790 registers 
 Fan Config register bits 
 Fan Dynamics register bits 
  Client data (each client gets its own)
 zero until following fields are valid 
 in jiffies 
 register values 
		
		  If a fault bit is set, we need to write into one of the fan
		  configuration registers to clear it. Note that this also
		  clears the fault for the companion channel if enabled.
			
			  Disable RPM mode; otherwise disabling fan speed
			  monitoring is not possible.
			
			  The chip sets MAX31790_FAN_CFG_TACH_INPUT_EN on its
			  own if MAX31790_FAN_CFG_RPM_MODE is set.
			  Do it here as well to reflect the actual register
			  value in the cache.
	
	  Initialize the max31790 chip
 SPDX-License-Identifier: GPL-2.0-or-later
  dell-smm-hwmon.c -- Linux driver for accessing the SMM BIOS on Dell laptops.
  Copyright (C) 2001  Massimo Dal Zotto <dz@debian.org>
  Hwmon integration:
  Copyright (C) 2011  Jean Delvare <jdelvare@suse.de>
  Copyright (C) 2013, 2014  Guenter Roeck <linux@roeck-us.net>
  Copyright (C) 2014, 2015  Pali Rohár <pali@kernel.org>
 lock for sensors writes 
  Call the System Management Mode BIOS. Code provided by Jonathan Buzzard.
 SMM requires CPU 0 
  Call the System Management Mode BIOS.
  Read the fan status.
  Read the fan speed in RPM.
  Read the fan type.
 I8K_SMM_GET_FAN_TYPE SMM call is expensive, so cache values 
  Read the fan nominal rpm for specific fan speed.
  Enable or disable automatic BIOS fan control support
  Set the fan speed (off, low, high, ...).
  Read the cpu temperature.
	
	  Sometimes the temperature sensor returns 0x99, which is out of range.
	  In this case we retry (once) before returning an error.
	 # 1003655137 00000058 00005a4b
	 # 1003655138 00000099 00003a80 <--- 0x99 = 153 degrees
	 # 1003655139 00000054 00005c52
	
	  Return -ENODATA for all invalid temperatures.
	 
	  Known instances are the 0x99 value as seen above as well as
	  0xc1 (193), which may be returned when trying to read the GPU
	  temperature if the system supports a GPU and it is currently
	  turned off.
  Read the Fn key status.
  Read the power status.
  Procfs interface
  Print the information for proci8k.
 11100 µs 
   580 µs 
   580 µs 
   580 µs 
   580 µs 
   750 µs 
 14700 µs 
	
	  Info:
	 
	  1)  Format version (this will change if format changes)
	  2)  BIOS version
	  3)  BIOS machine ID
	  4)  Cpu temperature
	  5)  Left fan status
	  6)  Right fan status
	  7)  Left fan speed
	  8)  Right fan speed
	  9)  AC power
	  10) Fn Key status
 Register the proc entry 
  Hwmon interface
				
				  There is no command for retrieve the current status
				  from BIOS, and userspacefirmware itself can change
				  it.
				  Thus we can only provide write-only access for now.
 Mark nominal speed table as invalid in case of error 
  Only use for machines which need some special configuration
  in order to work correctly (e.g. if autoconfig fails on this machines).
 UK Inspiron 6400  
  On some machines once I8K_SMM_GET_FAN_TYPE is issued then CPU fan speed
  randomly going up and down due to bug in Dell SMM or BIOS. Here is blacklist
  of affected Dell machines for which we disallow I8K_SMM_GET_FAN_TYPE call.
  See bug: https:bugzilla.kernel.orgshow_bug.cgi?id=100121
  On some machines all fan related SMM functions implemented by Dell BIOS
  firmware freeze kernel for about 500ms. Until Dell fixes these problems fan
  support for affected blacklisted Dell machines stay disabled.
  See bug: https:bugzilla.kernel.orgshow_bug.cgi?id=195751
	
	  Set fan multiplier and maximal fan speed from dmi config
	  Values specified in module parameters override values from dmi
 Must not be 0 
		
		  Autodetect fan multiplier based on nominal rpm
		  If fan reports rpm value too high then set multiplier to 1
 Fan multiplier was specified in module param or in dmi 
  Probe for the presence of a supported laptop.
	
	  Get DMI information
	
	  Get SMM Dell signature
 SPDX-License-Identifier: GPL-2.0-or-later
  lm63.c - driver for the National Semiconductor LM63 temperature sensor
           with integrated fan control
  Copyright (C) 2004-2008  Jean Delvare <jdelvare@suse.de>
  Based on the lm90 driver.
  The LM63 is a sensor chip made by National Semiconductor. It measures
  two temperatures (its own and one external one) and the speed of one
  fan, those speed it can additionally control. Complete datasheet can be
  obtained from National's website at:
    http:www.national.compfLMLM63.html
  The LM63 is basically an LM86 with fan speed monitoring and control
  capabilities added. It misses some of the LM86 features though:
   - No low limit for local temperature.
   - No critical limit for local temperature.
   - Critical limit for remote temperature can be changed only once. We
     will consider that the critical limit is read-only.
  The datasheet isn't very clear about what the tachometer reading is.
  I had a explanation from National Semiconductor though. The two lower
  bits of the read value have to be masked out. The value is still 16 bit
  in width.
  Addresses to scan
  Address is fully defined internally and cannot be changed except for
  LM64 which has one pin dedicated to address selection.
  LM63 and LM96163 have address 0x4c.
  LM64 can have address 0x18 or 0x4e.
  The LM63 registers
  Conversions and various macros
  For tachometer counts, the LM63 uses 16-bit values.
  For local temperature and high limit, remote critical limit and hysteresis
  value, it uses signed 8-bit values with LSB = 1 degree Celsius.
  For remote temperature, low and high limits, it uses signed 11-bit values
  with LSB = 0.125 degree Celsius, left-justified in 16-bit registers.
  For LM64 the actual remote diode temperature is 16 degree Celsius higher
  than the register reading. Remote temperature setpoints have to be
  adapted accordingly.
  Client data (each client gets its own)
 false until following fields are valid 
 zero until lut fields are valid 
 in jiffies 
 in jiffies 
 in milliseconds 
 8 or 12 
 registers values 
	u16 fan[2];	 0: input
	u8 pwm1[13];	 0: current output
	s8 temp8[15];	 0: local input
			   1: local high limit
			   2: remote critical limit
	s16 temp11[4];	 0: remote input
			   1: remote low limit
			   2: remote high limit
 remote input (unsigned) 
 true if unsigned remote upper limits 
  Update the lookup table register cache.
  client->update_lock must be held when calling this function.
 tachometer enabled  
 order matters for fan1_input 
 order matters for temp2_input 
  Trip points in the lookup table should be in ascending order for both
  temperatures and PWM output values.
  Sysfs callback functions and files
 register is read-only 
	
	  Only let the user switch to automatic mode if the lookup table
	  looks sane.
  There are 8bit registers for both local(temp1) and remote(temp2) sensor.
  For remote sensor registers temp2_offset has to be considered,
  for local sensor it must not.
  So we need separate 8bit accessors for local and remote sensor.
 lookup table 
		
		  Use unsigned temperature unless its value is zero.
		  If it is zero, use signed temperature.
  Hysteresis register holds a relative value, while we want to present
  an absolute to user-space
  And now the other way around, user-space provides an absolute
  hysteresis value and we have to store a relative one
  Set conversion rate.
  client->update_lock must be held when calling this function.
 Shift calculations to avoid rounding errors 
 find the nearest update rate 
 Individual alarm files 
 Raw alarm file for compatibility 
  On LM63, temp2_crit can be set only once, which should be job
  of the bootloader.
  On LM64, temp2_crit can always be set.
  On LM96163, temp2_crit can be set if bit 1 of the configuration
  register is true.
  Real code
 Return 0 if detection is successful, -ENODEV otherwise 
 National Semiconductor 
  Ideally we shouldn't have to initialize anything, since the BIOS
  should have taken care of everything
 Start converting if needed 
 standby 
 Tachometer is always enabled on LM64 
 We may need pwm1_freq before ever updating the client data 
	
	  For LM96163, check if high resolution PWM
	  and unsigned temperature format is enabled.
 Show some debug info about the LM63 configuration 
 Set the device type 
 Initialize chip 
 Register sysfs hooks 
 tachometer enabled 
  Driver data (common to all clients)
 SPDX-License-Identifier: GPL-2.0+
  hwmon driver for Aquacomputer D5 Next watercooling pump
  The D5 Next sends HID reports (with ID 0x01) every second to report sensor values
  (coolant temperature, pump and fan speed, voltage, current and power). It responds to
  Get_Report requests, but returns a dummy value of no use.
  Copyright 2021 Aleksa Savic <savicaleksa83@gmail.com>
 In seconds 
 Register offsets for the D5 Next pump 
 Labels for provided values 
 How many times the device was powered on 
 Info provided with every report 
 Sensor readings 
 Aquacomputer D5 Next 
 Request to initialize after the HID bus to ensure it's not being loaded before 
 SPDX-License-Identifier: GPL-2.0-only
  w83l786ng.c - Linux kernel driver for hardware monitoring
  Copyright (c) 2007 Kevin Lo <kevlo@kevlo.org>
  Supports following chips:
  Chip		#vin	#fanin	#pwm	#temp	wchipid	vendid	i2c	ISA
  w83l786ng	3	2	2	2	0x7b	0x5ca3	yes	no
 Addresses to scan 
 Insmod parameters 
 TEMP 0 in DataSheet 
 TEMP 0 Over in DataSheet 
 TEMP 0 Hyst in DataSheet 
 TEMP 1 in DataSheet 
 TEMP 1 Over in DataSheet 
 TEMP 1 Hyst in DataSheet 
 FAN Duty Cycle, be used to control 
 for temp 
  The analog voltage inputs have 8mV LSB. Since the sysfs output is
  in mV as would be measured on the chip input pin, need to just
  multiplydivide by 8 to translate fromto register values.
 true if following fields are valid 
 In jiffies 
	unsigned long last_nonvolatile;	 In jiffies, last time we update the
	u8 pwm_mode[2];	 0->DC variable voltage
	u8 pwm_enable[2];  1->manual
 Update the voltages measured value and limits 
 Update the fan counts and limits 
 Update the fan divisor 
 Update the temperature sensors 
 Update Smart Fan III tolerance 
 following are the sysfs callback functions 
  Note: we save and restore the fan minimum here, because its value is
  determined in part by the fan divisor.  This follows the principle of
  least surprise; the user doesn't expect the fan minimum to change just
  because the divisor changed.
 Save fan_min 
 Restore fan_min 
 readwrite the temperature, includes measured value and limits 
 only modes 1 and 2 are supported 
 For Smart Fan IThermal Cruise and Smart Fan II 
 Detection 
 Identification 
 Winbond 
 W83L786NG 
 Start monitoring 
 Initialize the chip 
 A few vars need to be filled upon startup 
 Update the fan divisor 
 SPDX-License-Identifier: GPL-2.0
  Intel MAX 10 BMC HWMON Driver
  Copyright (C) 2018-2020 Intel Corporation. All rights reserved.
	
	  BMC Firmware will return 0xdeadbeef if the sensor value is invalid
	  at that time. This usually happens on sensor channels which connect
	  to external pluggable modules, e.g. QSFP temperature and voltage.
	  When the QSFP is unplugged from cage, driver will get 0xdeadbeef
	  from their registers.
 SPDX-License-Identifier: GPL-2.0-only
  hwmon.c - part of lm_sensors, Linux kernel modules for hardware monitoring
  This file defines the sysfs class "hwmon", for use by sensors drivers.
  Copyright (C) 2005 Mark M. Hoffman <mhoffman@lightlink.com>
  Thermal zone information
 hwmon tzdata list entry 
 Reference to hwmon device 
 sensor index 
 thermal zone device 
 Thermal zone handling 
  The complex conditional is necessary to avoid a cyclic dependency
  between hwmon and thermal_sys modules.
	
	  If CONFIG_THERMAL_OF is disabled, this returns -ENODEV,
	  so ignore that error but forward any other error.
 IS_REACHABLE(CONFIG_THERMAL) && ... 
 sysfs attribute management 
 The attribute is invisible if there is no template string 
  Chip attributes are not attribute templates but actual sysfs attributes.
  See hwmon_genattr() for special handling.
 Complain about invalid characters in hwmon name attribute 
 terminating NULL plus &hwdev->groups 
			
			  Don't worry about hwdev; hwmon_dev_release(), called
			  from device_unregister(), will free it.
  hwmon_device_register_with_groups - register w hwmon
  @dev: the parent device
  @name: hwmon name attribute
  @drvdata: driver data to attach to created device
  @groups: List of attribute groups to create
  hwmon_device_unregister() must be called when the device is no
  longer needed.
  Returns the pointer to the new device.
  hwmon_device_register_with_info - register w hwmon
  @dev: the parent device
  @name: hwmon name attribute
  @drvdata: driver data to attach to created device
  @chip: pointer to hwmon chip information
  @extra_groups: pointer to list of additional non-standard attribute groups
  hwmon_device_unregister() must be called when the device is no
  longer needed.
  Returns the pointer to the new device.
  hwmon_device_register - register w hwmon
  @dev: the device to register
  hwmon_device_unregister() must be called when the device is no
  longer needed.
  Returns the pointer to the new device.
  hwmon_device_unregister - removes the previously registered class device
  @dev: the class device to destroy
  devm_hwmon_device_register_with_groups - register w hwmon
  @dev: the parent device
  @name: hwmon name attribute
  @drvdata: driver data to attach to created device
  @groups: List of attribute groups to create
  Returns the pointer to the new device. The new device is automatically
  unregistered with the parent device.
  devm_hwmon_device_register_with_info - register w hwmon
  @dev:	the parent device
  @name:	hwmon name attribute
  @drvdata:	driver data to attach to created device
  @chip:	pointer to hwmon chip information
  @groups:	pointer to list of driver specific attribute groups
  Returns the pointer to the new device. The new device is automatically
  unregistered with the parent device.
  devm_hwmon_device_unregister - removes a previously registered hwmon device
  @dev: the parent device of the device to unregister
 Open access to 0x295-0x296 on MSI MS-7031 
 MSI 
 MS-7031 
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (c) 2012 Guenter Roeck <linux@roeck-us.net>
  based on max1668.c
  Copyright (c) 2011 David George <david.george@ska.ac.za>
 Report local sensor as temp1 
  Map device tree  platform data register bit map to chip bit map.
  Applies to alert register and over-temperature register.
 ms per channel, worst case 
 in milli-seconds 
 in degrees C 
 In jiffies 
 true if following fields are valid 
 1x local and up to 7x remote 
 [nr][0]=temp [1]=ext [2]=max [3]=crit 
 Diode fault status bits on MAX6581 are right shifted by one bit 
 disable the offset for channel if the new offset is 0 
 There is no offset for local temperature so starting from temp2 
 channel number 
 attribute index within channel 
 offset reg is only supported on max6581 remote channels 
  max6697_is_visible uses the index into the following array to determine
  if attributes should be created or not. Any change in order or content
  must be matched in max6697_is_visible.
	
	  Don't touch configuration if neither platform data nor OF
	  configuration was specified. If that is the case, use the
	  current chip configuration.
 SPDX-License-Identifier: GPL-2.0-or-later
  gl520sm.c - Part of lm_sensors, Linux kernel modules for hardware
 	       monitoring
  Copyright (c) 1998, 1999  Frodo Looijaard <frodol@dds.nl>,
 			     Kyösti Mälkki <kmalkki@cc.hut.fi>
  Copyright (c) 2005	Maarten Deprez <maartendeprez@users.sourceforge.net>
 Type of the extra sensor 
 Addresses to scan 
  Many GL520 constants specified below
  One of the inputs can be configured as either temp or voltage.
  That's why _TEMP2 and _IN4 access the same register
 The GL520 registers 
 Client data 
 false until the following fields are valid 
 in jiffies 
 [0] = VVD 
 [0] = VDD 
 [0] = VDD 
  Registers 0x07 to 0x0c are word-sized, others are byte-sized
  GL520 uses a high-byte first convention
 Temp1 and Vin4 are the same input 
  Sysfs stuff
  Real code
 Return 0 if detection is successful, -ENODEV otherwise 
 Determine the chip type. 
 Called when we have found a new GL520SM. 
 If IRQ# is disabled, we can safely force comparator mode 
 Enable monitoring if needed 
 Initialize the GL520SM chip 
 sysfs hooks 
 SPDX-License-Identifier: GPL-2.0
  Driver for Texas Instruments TMP512, TMP513 power monitor chips
  TMP513:
  ThermalPower Management with Triple Remote and
  Local Temperature Sensor and Current Shunt Monitor
  Datasheet: https:www.ti.comlitgpntmp513
  TMP512:
  ThermalPower Management with Dual Remote
 	and Local Temperature Sensor and Current Shunt Monitor
  Datasheet: https:www.ti.comlitgpntmp512
  Copyright (C) 2019 Eric Tremblay <etremblay@distech-controls.com>
  This program is free software; you can redistribute it andor modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; version 2 of the License.
 Common register definition
 TMP513 specific register definition
 Common attrs, and NULL
 Default config
 Mask and shift
 Alarms
 Max and Min value
 Max possible value is -256 to +256 but datasheet indicated -40 to 125.
 Set the shift based on the gain 8=4, 4=3, 2=2, 1=1
		
		  The valus is read in voltage in the chip but reported as
		  current to the user.
		  2's complement number shifted by one to four depending
		  on the pga gain setting. 1lsb = 10uV
 1lsb = 4mV
 Power = (current  BusVoltage)  5000
 Current = (ShuntVoltage  CalibrationRegister)  4096
 1lsb = 0.0625 degrees centigrade
 1lsb = 0.5 degrees centigrade
 Programmer goofed
		
		  The user enter current value and we convert it to
		  voltage. 1lsb = 10uV
 1lsb = 4mV
 1lsb = 0.0625 degrees centigrade
 1lsb = 0.5 degrees centigrade
 Programmer goofed
  Calibrate the tmp51x following the datasheet method
	
	  If shunt_uohms is equal to 0, the calibration should be set to 0.
	  The consequence will be that the current and power measurement engine
	  of the sensor will not work. Temperature and voltage sensing will
	  continue to work.
	
	  Calculate the minimal bit resolution for the current and the power.
	  Those values will be used during register interpretation.
  Initialize the configuration and calibration registers.
 nFactor configuration
 Read the status register before using as the datasheet propose
 Check if shunt value is compatible with pga-gain
 SPDX-License-Identifier: GPL-2.0-only
   w83795.c - Linux kernel driver for hardware monitoring
   Copyright (C) 2008 Nuvoton Technology Corp.
                 Wei Song
   Copyright (C) 2010 Jean Delvare <jdelvare@suse.de>
   Supports following chips:
   Chip       #vin   #fanin #pwm #temp #dts wchipid  vendid  i2c  ISA
   w83795g     21     14     8     6     8    0x79   0x5ca3  yes   no
   w83795adg   18     14     2     6     8    0x79   0x5ca3  yes   no
 Addresses to scan 
 Multi-Function Pin Ctrl Registers 
  only crit and crit_hyst affect real-time alarm status
  current crit crit_hyst warn warn_hyst
 TD1TR1 
 TD2TR2 
 TD3TR3 
 TD4TR4 
 TR5 
 TR6 
 Current, HL, LL 
 VSEN1 
 VSEN2 
 VSEN3 
 VSEN4 
 VSEN5 
 VSEN6 
 VSEN7 
 VSEN8 
 VSEN9 
 VSEN10 
 VSEN11 
 VTT 
 3VDD 
 3VSB 
 VBAT 
 VSEN12 
 VSEN13 
 VSEN14 
 VSEN15 
 VSEN16 
 VSEN17 
 VSEN1-4 
 VSEN5-8 
 VSEN9-11 
 VTT, 3VDD, 3VSB, 3VBAT 
 VSEN12 
 VSEN13 
 VSEN14 
 VSEN15 
 VSEN16 
 VSEN17 
 HighLow LSB shift, LSB No. 
 VSEN1 
 VSEN2 
 VSEN3 
 VSEN4 
 VSEN5 
 VSEN6 
 VSEN7 
 VSEN8 
 VSEN9 
 VSEN10 
 VSEN11 
 VTT 
 3VDD 
 3VSB	
 VBAT	
 VSEN12 
 VSEN13 
 VSEN14 
 VSEN15 
 VSEN16 
 VSEN17 
 3VDD, 3VSB and VBAT: 6 mVbit; other inputs: 2 mVbit 
 Best fit for cksel = 0 
 cksel = 1 can't beat this 
 Best fit for cksel = 1 
 Choose the closest one 
 In jiffies 
 Enable monitor VIN or not 
 Only in2-0 can have this 
 Register value, readhighlow 
 LSB Register value, highlow 
 has gain: in17-20  8 
 Enable fan14-1 or not 
 Register value combine 
 Register value combine 
 Enable monitor temp6-1 or not 
 current, crit, crit_hyst, warn, warn_hyst 
 Bit vector, 0 = TR, 1 = TD 
 Register value 
	u8 enable_dts;		
				  Enable PECI and SB-TSI,
				  bit 0: =1 enable, =0 disable,
				  bit 1: =1 AMD SB-TSI, =0 Intel PECI
 Enable monitor DTS temp 
 Register value 
 Register value 
 Register value 
	u8 has_pwm;		
				  795g supports 8 pwm, 795adg only supports 2,
				  no config register, only affected by chip
				  type
	u8 pwm[8][5];		
				  Register value, output, freq, start,
				   non stop, stop time
 CLKIN frequency in kHz 
 Register value 
 Register value 
 Register value 
	u16 target_speed[8];	
				  Register value, target speed for speed
				  cruise
 tolerance of target speed 
 TTTI, CTFS, HCT, HOT 
 6 temp, tempdcpwm, 7 registers 
 Register value 
 Register value 
 Register value 
  Hardware access
  We assume that nobdody can change the bank outside the driver.
 Must be called with data->update_lock held, except during initialization 
 If the same bank is already set, nothing to do 
 Change to new bank, preserve all other bits 
 Must be called with data->update_lock held, except during initialization 
 Arbitrary 
 Arbitrary 
 Must be called with data->update_lock held, except during initialization 
 Read the voltage limits 
 Read the fan limits 
 Silent false gcc warning 
		
		  Each register contains LSB for 2 fans, but we want to
		  read it only once to save time
 Read the temperature limits 
 Read the DTS limits 
 Read beep settings 
 Read temperature source selection 
 Read automatic fan speed control settings 
 Read SmartFanIV trip points 
 Read setup PWM 
 Update the voltages value 
 in0-2 can have dynamic limits (W83795G only) 
 Update fan 
 Update temperature 
 Update dts temperature 
 Update pwm output 
	
	  Update intrusion and alarms
	  It is important to read intrusion first, because reading from
	  register SMI STS6 clears the interrupt status temporarily.
 Switch to interrupt status for intrusion if needed 
 Switch to real-time alarms 
 Restore original configuration if needed 
  Sysfs attributes
 BEEP_ENABLE 
 Write 0 to clear chassis alarm 
 Clear status and force cache refresh 
 Speed cruise mode 
 Thermal cruise or SmartFan IV mode 
 Manual mode 
 Clear speed cruise mode bits 
 Clear thermal cruise mode bits 
 DC 
 PWM 
  Check whether a given temperature source can ever be useful.
  Returns the number of selectable temperature channels which are
  enabled.
 Analog 
 Digital 
 Pick high nibble 
 Pick low nibble 
 Look-up the actual temperature channel number 
 Shouldn't happen 
 Check if request can be fulfilled 
 No match 
 Thermal diode 
 Thermistor 
 Only for temp1-4 (temp5-6 can only be thermistor) 
 Thermal diode 
 Thermistor 
 showstore VIN 
 calculate this value again by sensors as sensors3.conf 
  Don't change the attribute order, _max, _min and _beep are accessed by index
  somewhere else in the code
  Don't change the attribute order, _beep is accessed by index
  somewhere else in the code
  Don't change the attribute order, _beep is accessed by index
  somewhere else in the code
  Don't change the attribute order, _beep is accessed by index
  somewhere else in the code
  Driver interface
 in kHz 
 Start monitoring if needed 
	
	  Special case for rev. A chips; can't be checked first because later
	  revisions emulate this for compatibility
 Return 0 if detection is successful, -ENODEV otherwise 
 Check Nuvoton vendor ID 
 Check device ID 
	
	  If Nuvoton chip, address of chip and W83795_REG_I2C_ADDR
	  should match
	
	  Check 795 chip type: 795G or 795ADG
	  Usually we don't write to chips during detection, but here we don't
	  quite have the choice; hopefully it's OK, we are about to return
	  success anyway
 We need a wrapper that fits in w83795_handle_files 
 Return immediately if VRM isn't configured 
 Voltage limits in dynamic mode, switch to read-only 
 Check pins that can be used for either temperature or voltage monitoring 
 config is a 2-bit value 
 Voltage monitoring 
 Thermal diode 
 Thermistor 
 Initialize the chip 
 Check which voltages and fans are present 
 Check which analog temperatures and extra voltages are present 
 Check DTS enable status 
 Report PECI Tbase values 
 pwm and smart fan 
 Check if BEEP pin is available 
 The W83795G has a dedicated BEEP pin 
		
		  The W83795ADG has a shared pin for OVT# and BEEP, so you
		  can't have both
 SPDX-License-Identifier: GPL-2.0-or-later
  emc2103.c - Support for SMSC EMC2103
  Copyright (c) 2010 SMSC
 Addresses scanned 
 equation 4 from datasheet: rpm = (3932160  multipler)  count 
  2103-2 and 2103-4's 3rd temperature sensor can be connected to two diodes
  in anti-parallel mode, and in this configuration both can be read
  independently (so we have 4 temperature inputs).  The device can't
  detect if it's connected in this mode, so we have to manually enable
  it.  Default is to leave the device in the state it's already in (-1).
  This parameter allows APD mode to be optionally forced on or off
 0-7 multiples of 0.125 
 registers are valid 
 num of temp sensors 
 in jiffies 
 internal + 3 external 
 no fractional part 
 no fractional part 
  Note: we also update the fan target here, because its value is
  determined in part by the fan clock divider.  This follows the principle
  of least surprise; the user doesn't expect the fan target to change just
  because the divider changed.
 No change 
 update fan target if high byte is not disabled 
 invalidate data to force re-read from hardware 
 high byte of 0xff indicates disabled so return 0 
 Datasheet states 16384 as maximum RPM target (table 3.2) 
 sensors present on all models 
 extra temperature sensors only present on 2103-2 and 2103-4 
 extra temperature sensors only present on 2103-2 and 2103-4 in APD mode 
 2103-2 and 2103-4 have 3 external diodes, 2103-1 has 1 
 2103-1 only has 1 external diode 
 2103-2 and 2103-4 have 3 or 4 external diodes 
 detect current state of hardware 
 force APD state if module parameter is set 
 force APD mode off 
 force APD mode on 
 sysfs hooks 
 LIST END  }
 Return 0 if detection is successful, -ENODEV otherwise 
 SPDX-License-Identifier: GPL-2.0-or-later
  lm90.c - Part of lm_sensors, Linux kernel modules for hardware
           monitoring
  Copyright (C) 2003-2010  Jean Delvare <jdelvare@suse.de>
  Based on the lm83 driver. The LM90 is a sensor chip made by National
  Semiconductor. It reports up to two temperatures (its own plus up to
  one external one) with a 0.125 deg resolution (1 deg for local
  temperature) and a 3-4 deg accuracy.
  This driver also supports the LM89 and LM99, two other sensor chips
  made by National Semiconductor. Both have an increased remote
  temperature measurement accuracy (1 degree), and the LM99
  additionally shifts remote temperatures (measured and limits) by 16
  degrees, which allows for higher temperatures measurement.
  Note that there is no way to differentiate between both chips.
  When device is auto-detected, the driver will assume an LM99.
  This driver also supports the LM86, another sensor chip made by
  National Semiconductor. It is exactly similar to the LM90 except it
  has a higher accuracy.
  This driver also supports the ADM1032, a sensor chip made by Analog
  Devices. That chip is similar to the LM90, with a few differences
  that are not handled by this driver. Among others, it has a higher
  accuracy than the LM90, much like the LM86 does.
  This driver also supports the MAX6657, MAX6658 and MAX6659 sensor
  chips made by Maxim. These chips are similar to the LM86.
  Note that there is no easy way to differentiate between the three
  variants. We use the device address to detect MAX6659, which will result
  in a detection as max6657 if it is on address 0x4c. The extra address
  and features of the MAX6659 are only supported if the chip is configured
  explicitly as max6659, or if its address is not 0x4c.
  These chips lack the remote temperature offset feature.
  This driver also supports the MAX6654 chip made by Maxim. This chip can
  be at 9 different addresses, similar to MAX6680MAX6681. The MAX6654 is
  otherwise similar to MAX6657MAX6658MAX6659. Extended range is available
  by setting the configuration register accordingly, and is done during
  initialization. Extended precision is only available at conversion rates
  of 1 Hz and slower. Note that extended precision is not enabled by
  default, as this driver initializes all chips to 2 Hz by design.
  This driver also supports the MAX6646, MAX6647, MAX6648, MAX6649 and
  MAX6692 chips made by Maxim.  These are again similar to the LM86,
  but they use unsigned temperature values and can report temperatures
  from 0 to 145 degrees.
  This driver also supports the MAX6680 and MAX6681, two other sensor
  chips made by Maxim. These are quite similar to the other Maxim
  chips. The MAX6680 and MAX6681 only differ in the pinout so they can
  be treated identically.
  This driver also supports the MAX6695 and MAX6696, two other sensor
  chips made by Maxim. These are also quite similar to other Maxim
  chips, but support three temperature sensors instead of two. MAX6695
  and MAX6696 only differ in the pinout so they can be treated identically.
  This driver also supports ADT7461 and ADT7461A from Analog Devices as well as
  NCT1008 from ON Semiconductor. The chips are supported in both compatibility
  and extended mode. They are mostly compatible with LM90 except for a data
  format difference for the temperature value registers.
  This driver also supports the SA56004 from Philips. This device is
  pin-compatible with the LM86, the EDEDP parts are also address-compatible.
  This driver also supports the G781 from GMT. This device is compatible
  with the ADM1032.
  This driver also supports TMP451 and TMP461 from Texas Instruments.
  Those devices are supported in both compatibility and extended mode.
  They are mostly compatible with ADT7461 except for local temperature
  low byte register and max conversion rate.
  Since the LM90 was the first chipset supported by this driver, most
  comments will refer to this chipset, but are actually general and
  concern all supported chipsets, unless mentioned otherwise.
  Addresses to scan
  Address is fully defined internally and cannot be changed except for
  MAX6659, MAX6680 and MAX6681.
  LM86, LM89, LM90, LM99, ADM1032, ADM1032-1, ADT7461, ADT7461A, MAX6649,
  MAX6657, MAX6658, NCT1008 and W83L771 have address 0x4c.
  ADM1032-2, ADT7461-2, ADT7461A-2, LM89-1, LM99-1, MAX6646, and NCT1008D
  have address 0x4d.
  MAX6647 has address 0x4e.
  MAX6659 can have address 0x4c, 0x4d or 0x4e.
  MAX6654, MAX6680, and MAX6681 can have address 0x18, 0x19, 0x1a, 0x29,
  0x2a, 0x2b, 0x4c, 0x4d or 0x4e.
  SA56004 can have address 0x48 through 0x4F.
  The LM90 registers
 MAX664666476649665466576658665966956696 registers 
  SA56004 registers 
 Maximum conversion rate in ms 
 TMP451TMP461 registers 
  Device flags
 ADT7461 extended mode	
 Device features 
 temperature offset register	
 extended remote limit	
 3rd upper (emergency) limit	
 emergency alarm		
 3rd temperature sensor	
 Broken alert		
 extended temperature support
 Pause conversion for config	
 LM90 status 
 local THERM limit tripped 
 remote THERM limit tripped 
 remote is an open circuit 
 remote low temp limit tripped 
 remote high temp limit tripped 
 local low temp limit tripped 
 local high temp limit tripped 
 remote2 THERM limit tripped 
 remote2 is an open circuit 
 remote2 low temp limit tripped 
 remote2 high temp limit tripped 
 remote emergency limit tripped 
 remote2 emergency limit tripped 
 local emergency limit tripped 
  Driver data (common to all clients)
  chip type specific parameters
 Capabilities 
 Which alarm bits trigger ALERT# 
 Upper 8 bits for max669596 
 Maximum conversion rate register value 
 Extended local temp register (optional) 
  TEMP8 register index
 max6659 and max669596 
 max6659 and max669596 
 max669596 only 
 max669596 only 
  TEMP11 register index
 except max6646, max66575859, and max669596 
 max669596 only 
 max669596 only 
 max669596 only 
  Client data (each client gets its own)
 true if register values are valid 
 in jiffies 
 in milliseconds 
 Current configuration register value 
 Original configuration register value 
 Original conversion rate register value 
 Which alarm bits trigger ALERT# 
 Upper 8 bits for max669596 
 Maximum conversion rate 
 local extension register offset 
 registers values 
 bitvector (upper 8 bits for max669596) 
  Support functions
  The ADM1032 supports PEC but not on write byte transactions, so we need
  to explicitly ask for a transaction without PEC.
  It is assumed that client->update_lock is held (unless we are in
  detection or initialization steps). This matters when PEC is enabled,
  because we don't want the address pointer to change between the write
  byte and the read byte transactions.
	
	  There is a trick here. We have to read two registers to have the
	  sensor temperature, but we have to beware a conversion could occur
	  between the readings. The datasheet says we should either use
	  the one-shot conversion register, which we don't want to do
	  (disables hardware monitoring) or monitor the busy bit, which is
	  impossible (we can't read the values and monitor that bit at the
	  exact same time). So the solution used here is to read the high
	  byte once, then the low byte, then the high byte again. If the new
	  high byte matches the old one, then we have a valid reading. Else
	  we have to read the low byte again, and now we believe we have a
	  correct reading.
  client->update_lock must be held when calling this function (unless we are
  in detection or initialization steps), and while a remote channel other
  than channel 0 is selected. Also, calling code must make sure to re-select
  external channel 0 before releasing the lock. This is necessary because
  various registers have different meanings as a result of selecting a
  non-default remote channel.
 Save config and pause conversion 
 Set conv rate 
 Revert change to config 
  Set conversion rate.
  client->update_lock must be held when calling this function (unless we are
  in detection or initialization steps).
 Shift calculations to avoid rounding errors 
 find the nearest update rate 
 lower 8 bit of alarms 
		
		  Re-enable ALERT# output if it was originally enabled and
		  relevant alarms are all clear
  Conversions
  For local temperatures and limits, critical limits and the hysteresis
  value, the LM90 uses signed 8-bit values with LSB = 1 degree Celsius.
  For remote temperatures and limits, it uses signed 11-bit values with
  LSB = 0.125 degree Celsius, left-justified in 16-bit registers.  Some
  Maxim chips use unsigned values.
  ADT7461 in compatibility mode is almost identical to LM90 except that
  attempts to write values that are outside the range 0 < temp < 127 are
  treated as the boundary value.
  ADT7461 in "extended mode" operation uses unsigned integers offset by
  64 (e.g., 0 -> -64 degC).  The range is restricted to -64..191 degC.
 pec used for ADM1032 only 
 +16 degrees offset for temp2 for the LM99 
 +16 degrees offset for temp2 for the LM99 
 prevent integer underflow 
 +16 degrees offset for temp2 for the LM99 
 +16 degrees offset for temp2 for the LM99 
 prevent integer underflow 
 +16 degrees offset for temp2 for the LM99 
 prevent integer underflow 
 Return 0 if detection is successful, -ENODEV otherwise 
 detection and identification 
 Make compiler happy 
 National Semiconductor 
 LM90 
 LM89LM99 
 LM86 
 Analog Devices 
 ADM1032 
			
			  The ADM1032 supports PEC, but only if combined
			  transactions are not used.
 ADT7461 
 ADT7461A, NCT1008 
 Maxim 
		
		  We read MAX6659_REG_R_REMOTE_EMERG twice, and re-read
		  LM90_REG_R_MAN_ID in between. If MAX6659_REG_R_REMOTE_EMERG
		  exists, both readings will reflect the same value. Otherwise,
		  the readings will be different.
		
		  The MAX6657, MAX6658 and MAX6659 do NOT have a chip_id
		  register. Reading from that address will return the last
		  read value, which in our case is those of the man_id
		  register. Likewise, the config1 register seems to lack a
		  low nibble, so the value will be those of the previous
		  read, so in our case those of the man_id register.
		  MAX6659 has a third set of upper temperature limit registers.
		  Those registers also return values on MAX6657 and MAX6658,
		  thus the only way to detect MAX6659 is by its address.
		  For this reason it will be mis-detected as MAX6657 if its
		  address is 0x4C.
		
		  Even though MAX6695 and MAX6696 do not have a chip ID
		  register, reading it returns 0x01. Bit 4 of the config1
		  register is unused and should return zero when read. Bit 0 of
		  the status2 register is unused and should return zero when
		  read.
		 
		  MAX6695 and MAX6696 have an additional set of temperature
		  limit registers. We can detect those chips by checking if
		  one of those registers exists.
		
		  The chip_id register of the MAX6680 and MAX6681 holds the
		  revision of the chip. The lowest bit of the config1 register
		  is unused and should return zero when read, so should the
		  second to last bit of config1 (software reset).
		
		  The chip_id register of the MAX664666476649 holds the
		  revision of the chip. The lowest 6 bits of the config1
		  register are unused and should return zero when read.
		
		  The chip_id of the MAX6654 holds the revision of the chip.
		  The lowest 3 bits of the config1 register are unused and
		  should return zero when read.
 WinbondNuvoton 
 W83L771WG 
 W83L771AWGASG 
  NXP SemiconductorPhilips 
 GMT 
 G781 
 identification failed 
 Restore initial configuration 
	
	  Start the conversions.
 500ms; 2Hz conversion rate 
 Check Temperature Range Select 
	
	  Put MAX6680MAX8881 into extended resolution (bit 0x10,
	  0.125 degree resolution) and range (0x08, extend range
	  to -64 degree) mode for the remote temperature sensor.
	
	  Put MAX6654 into extended range (0x20, extend minimum range from
	  0 degrees to -64 degrees). Note that extended resolution is not
	  possible on the MAX6654 unless conversion rate is set to 1 Hz or
	  slower, which is intentionally not done by default.
	
	  Select external channel 0 for max669596
	
	  Interrupt is enabled by default on reset, but it may be disabled
	  by bootloader, unmask it.
 run 
 Set the device type 
	
	  Different devices have different alarm bits triggering the
	  ALERT# output
 Set chip capabilities 
 Set maximum conversion rate 
 Initialize the LM90 chip 
	
	  The 'pec' attribute is attached to the i2c device and thus created
	  separately.
		
		  Disable ALERT# output, because these chips don't implement
		  SMBus alert correctly; they should only hold the alert line
		  low briefly.
 SPDX-License-Identifier: GPL-2.0-or-later
  lm75.c - Part of lm_sensors, Linux kernel modules for hardware
 	 monitoring
  Copyright (c) 1998, 1999  Frodo Looijaard <frodol@dds.nl>
  This driver handles the LM75 and compatible digital temperature sensors.
 keep sorted in alphabetical order 
  struct lm75_params - lm75 configuration parameters.
  @set_mask:		Bits to set in configuration register when configuring
 			the chip.
  @clr_mask:		Bits to clear in configuration register when configuring
 			the chip.
  @default_resolution:	Default number of bits to represent the temperature
 			value.
  @resolution_limits:	Limit register resolution. Optional. Should be set if
 			the resolution of limit registers does not match the
 			resolution of the temperature register.
  @resolutions:	List of resolutions associated with sample times.
 			Optional. Should be set if num_sample_times is larger
 			than 1, and if the resolution changes with sample times.
 			If set, number of entries must match num_sample_times.
  @default_sample_time:Sample time to be set by default.
  @num_sample_times:	Number of possible sample times to be set. Optional.
 			Should be set if the number of sample times is larger
 			than one.
  @sample_times:	All the possible sample times to be set. Mandatory if
 			num_sample_times is larger than 1. If set, number of
 			entries must match num_sample_times.
 Addresses scanned 
 The LM75 registers 
 Each client has this additional data 
 In bits, 9 to 16 
 In ms 
-----------------------------------------------------------------------
 The structure below stores the configuration values of the supported devices.
  In case of being supported multiple configurations, the default one must
  always be the first element of the array
 not one-shot mode 
 11-bit mode 
 11-bit mode 
 11-bit mode 
 12-bit mode
 12-bit mode 
 not one-shot mode 
 12-bit mode 
 not one-shot mode 
 12-bit mode 
 not one-shot mode 
 12-bit mode 
 not one-shot mode
 8 samples  second 
 no one-shot mode
 12-bit mode 
 not one-shot mode
 12-bit mode 
 not one-shot mode
 12-bit mode 
 not one-shot mode
 not one-shot mode, Conversion rate 37Hz 
not one-shot mode
 not one-shot mode, 27.5 ms sample rate 
	
	  Resolution of limit registers is assumed to be the same as the
	  temperature input register resolution unless given explicitly.
	 Set to LM75 resolution (9 bits, 12 degree C) and range.
	  Then tweak to be more precise when appropriate.
 Save default sample time and resolution
 Enable the power 
 Cache original configuration 
 LIST END  }
 Return 0 if detection is successful, -ENODEV otherwise 
	
	  Now, we do the remaining detection. There is no identification-
	  dedicated register so we have to rely on several tricks:
	  unused bits, registers cycling over 8-address boundaries,
	  addresses 0x04-0x07 returning the last read value.
	  The cycling+unused addresses combination is not tested,
	  since it would significantly slow the detection down and would
	  hardly add any value.
	 
	  The National Semiconductor LM75A is different than earlier
	  LM75s.  It has an ID byte of 0xaX (where X is the chip
	  revision, with 1 being the only revision in existence) in
	  register 7, and unused registers return 0xff rather than the
	  last read value.
	 
	  Note that this function only detects the original National
	  Semiconductor LM75 and the LM75A. Clones from other vendors
	  aren't detected, on purpose, because they are typically never
	  found on PC hardware. They are found on embedded designs where
	  they can be instantiated explicitly so detection is not needed.
	  The absence of identification registers on all these clones
	  would make their exhaustive detection very difficult and weak,
	  and odds are that the driver would bind to unsupported devices.
 Unused bits 
 First check for LM75A 
		
		  LM75A returns 0xff on unused registers so
		  just to be sure we check for that too.
 Traditional style LM75 detection 
 Unused addresses 
	
	  It is very unlikely that this is a LM75 if both
	  hysteresis and temperature limit registers are 0.
 Addresses cycling 
 CONFIG_PM 
 SPDX-License-Identifier: GPL-2.0-or-later
  An hwmon driver for the Microchip TC74
  Copyright 2015 Maciej Szmigiero <mail@maciej.szmigiero.name>
  Based on ad7414.c:
 	Copyright 2006 Stefan Roese, DENX Software Engineering
 	Copyright 2008 Sean MacLennan, PIKA Technologies
 	Copyright 2008 Frank Edelhaeuser, Spansion Inc.
 TC74 registers 
 atomic read data updates 
 validity of fields below 
 In jiffies 
 Temp value in dC 
 not ready yet 
 Make sure the chip is powered up. 
 SPDX-License-Identifier: GPL-2.0-or-later
 Sensirion SHTC1 humidity and temperature sensor driver
  Copyright (C) 2014 Sensirion AG, Switzerland
  Author: Johannes Winkelmann <johannes.winkelmann@sensirion.com>
 commands (high precision mode) 
 commands (low precision mode) 
 command for reading the ID register 
  constants for reading the ID register
  SHTC1: 0x0007 with mask 0x003f
  SHTW1: 0x0007 with mask 0x003f
  SHTC3: 0x0807 with mask 0x083f
 delays for non-blocking i2c commands, both in us 
 in jiffies 
 in us 
 1000  temperature in dgr C 
 1000  relative humidity in %RH 
	
	  In blocking mode (clock stretching mode) the I2C bus
	  is blocked for other traffic, thus the call to i2c_master_recv()
	  will wait until the data is ready. For non blocking mode, we
	  have to wait ourselves.
 sysfs attributes 
		
		  From datasheet:
		  T = -45 + 175  ST  2^16
		  RH = 100  SRH  2^16
		 
		  Adapted for integer fixed point (3 digit) arithmetic.
 device ID table 
 SPDX-License-Identifier: GPL-2.0-only
  LM73 Sensor driver
  Based on LM75
  Copyright (C) 2007, CenoSYS (www.cenosys.com).
  Copyright (C) 2009, Bollore telecom (www.bolloretelecom.eu).
  Guillaume Ligneul <guillaume.ligneul@gmail.com>
  Adrien Demarez <adrien.demarez@bolloretelecom.eu>
  Jeremy Laine <jeremy.laine@bolloretelecom.eu>
  Chris Verges <kg4ysn@gmail.com>
 Addresses scanned 
 LM73 registers 
 0x0190, byte-swapped 
 11-bits (0.25000 CLSB): RES1 Bit = 0, RES0 Bit = 0 
 12-bits (0.12500 CLSB): RES1 Bit = 0, RES0 Bit = 1 
 13-bits (0.06250 CLSB): RES1 Bit = 1, RES0 Bit = 0 
 14-bits (0.03125 CLSB): RES1 Bit = 1, RES0 Bit = 1 
 control register value 
-----------------------------------------------------------------------
 Write value 
	 use integer division instead of equivalent right shift to
	
	  Convert the desired conversion rate into register bits.
	  res is already initialized, and everything past the second-to-last
	  value in the array is treated as belonging to the last value
	  in the array.
-----------------------------------------------------------------------
 sysfs attributes for hwmon 
-----------------------------------------------------------------------
 device probe and removal 
 LIST END  }
 Return 0 if detection is successful, -ENODEV otherwise 
	
	  Do as much detection as possible with byte reads first, as word
	  reads can confuse other devices.
 Check device ID 
 SPDX-License-Identifier: GPL-2.0-or-later
  sbtsi_temp.c - hwmon driver for a SBI Temperature Sensor Interface (SB-TSI)
                 compliant AMD SoC temperature device.
  Copyright (c) 2020, Google Inc.
  Copyright (c) 2020, Kun Yi <kunyi@google.com>
  SB-TSI registers only support SMBus byte data access. "_INT" registers are
  the integer part of a temperature value or limit, and "_DEC" registers are
  corresponding decimal parts.
 RO 
 RO 
 RO 
 RW 
 RW 
 RW 
 RW 
 RW 
 Each client has this additional data 
  From SB-TSI spec: CPU temperature readings and limit registers encode the
  temperature in increments of 0.125 from 0 to 255.875. The "high byte"
  register encodes the base-2 of the integer portion, and the upper 3 bits of
  the "low byte" encode in base-2 the decimal portion.
  e.g. INT=0x19, DEC=0x20 represents 25.125 degrees Celsius
  Therefore temperature in millidegree Celsius =
    (INT + DEC  256)  1000 = (INT  8 + DEC  32)  125
  Inversely, given temperature in millidegree Celsius
    INT = (TEMP  125)  8
    DEC = ((TEMP  125) % 8)  32
  Caller have to make sure temp doesn't exceed 255875, the max valid value.
		
		  ReadOrder bit specifies the reading order of integer and
		  decimal part of CPU temp for atomic reads. If bit == 0,
		  reading integer part triggers latching of the decimal part,
		  so integer part should be read first. If bit == 1, read
		  order should be reversed.
 SPDX-License-Identifier: GPL-2.0-or-later
  atxp1.c - kernel module for setting CPU VID and general purpose
 	     IOs using the Attansic ATXP1 chip.
  The ATXP1 can reside on I2C addresses 0x37 or 0x4e. The chip is
  not auto-detected by the driver and must be instantiated explicitly.
  See Documentationi2cinstantiating-devices.rst for more information.
 VID output register 
 VID input from CPU 
 General purpose IO register 1 
 General purpose IO register 2 
 Detected CPU VRM 
 Update local register data 
 sys file functions for cpu0_vid 
 Calculate VID 
	
	  If output enabled, use control register value.
	  Otherwise original CPU VID
 Nothing changed, aborting 
 Write every 25 mV step to increase stability 
  CPU core reference voltage
  unit: millivolt
 sys file functions for GPIO1 
  GPIO1 data register
  unit: Four bit as hex (e.g. 0x0f)
 sys file functions for GPIO2 
  GPIO2 data register
  unit: Eight bit as hex (e.g. 0xff)
 Get VRM 
 SPDX-License-Identifier: GPL-2.0-or-later
  g762 - Driver for the Global Mixed-mode Technology Inc. fan speed
         PWM controller chips from G762 family, i.e. G762 and G763
  Copyright (C) 2013, Arnaud EBALARD <arno@natisbad.org>
  This work is based on a basic version for 2.6.31 kernel developed
  by Olivier Mouchet for LaCie. Updates and correction have been
  performed to run on recent kernels. Additional features, like the
  ability to configure various characteristics via .dts file or
  board init file have been added. Detailed datasheet on which this
  development is based is available here:
   http:natisbad.orgNASrefsGMT_EDS-762_763-080710-0.2.pdf
  Headers from previous developments have been kept below:
  Copyright (c) 2009 LaCie
  Author: Olivier Mouchet <olivier.mouchet@gmail.com>
  based on g760a code written by Herbert Valerio Riedel <hvr@gnu.org>
  Copyright (C) 2007  Herbert Valerio Riedel <hvr@gnu.org>
  g762: minimal datasheet available at:
        http:www.gmt.com.twproductdatasheetEDS-762_3.pdf
 Config register bits 
 enable fan_fail signal 
 enable fan_out_of_control 
 out mode: PWM or DC 
 fan mode: closedopen-loop 
 clock divisor value 
 PWM polarity 
 pulse per fan revolution 
 fan gear mode 
 fan startup voltage 
 fan fail 
 fan out of control 
 Config register values 
 Register data is read (and cached) at most once per second. 
  Extract pulse count per fan revolution value (2 or 4) from given
  FAN_CMD1 register value.
  Extract fan clock divisor (1, 2, 4 or 8) from given FAN_CMD1
  register value.
  Extract fan gear mode multiplier value (0, 2 or 4) from given
  FAN_CMD2 register value.
 update mutex 
 board specific parameters. 
 g762 register cache 
 in jiffies 
 controls fan rotation speed in closed-loop mode 
 provides access to current fan RPM value 
	u8 fan_sta;   bit 0: set when actual fan speed is more than
		              25% outside requested fan speed
		       bit 1: set when no transition occurs on fan
		              pin for 0.7s
 controls fan rotation speed in open-loop mode 
	u8 fan_cmd1;    0: FG_PLS_ID0 FG pulses count per revolution
		            0: 2 counts per revolution
		            1: 4 counts per revolution
		         1: PWM_POLARITY 1: negative_duty
		                         0: positive_duty
		       2,3: [FG_CLOCK_ID0, FG_CLK_ID1]
		               00: Divide fan clock by 1
		               01: Divide fan clock by 2
		               10: Divide fan clock by 4
		               11: Divide fan clock by 8
		         4: FAN_MODE 1:closed-loop, 0:open-loop
		         5: OUT_MODE 1:PWM, 0:DC
		         6: DET_FAN_OOC enable "fan ooc" status
		         7: DET_FAN_FAIL enable "fan fail" status
	u8 fan_cmd2;  0,1: FAN_STARTV 0,1,2,3 -> 0,32,64,96 dac_code
		       2,3: FG_GEAR_MODE
		               00: multiplier = 1
		               01: multiplier = 2
		               10: multiplier = 4
		         4: Mask ALERT# (g763 only)
  Convert count value from fan controller register (FAN_SET_CNT) into fan
  speed RPM value. Note that the datasheet documents a basic formula;
  influence of additional parameters (fan clock divisor, fan gear mode)
  have been infered from examples in the datasheet and tests.
 setting cnt to 255 stops the fan 
  Convert fan RPM value from sysfs into count value for fan controller
  register (FAN_SET_CNT).
 to stop the fan, set cnt to 255 
 helper to grab and cache data, at most one time per second 
 upon error, encode it in return value 
 helpers for writing hardware parameters 
  Set input clock frequency received on CLK pin of the chip. Accepted values
  are between 0 and 0xffffff. If zero is given, then default frequency
  (32,768Hz) is used. Note that clock frequency is a characteristic of the
  system but an internal parameter, i.e. value is not passed to the device.
 Set pwm mode. Accepts either 0 (PWM mode) or 1 (DC mode) 
 Set fan clock divisor. Accepts either 1, 2, 4 or 8. 
 Set fan gear mode. Accepts either 0, 1 or 2. 
 Set number of fan pulses per revolution. Accepts either 2 or 4. 
 Set fan mode. Accepts either 1 (open-loop) or 2 (closed-loop). 
		
		  BUG FIX: if SET_CNT register value is 255 then, for some
		  unknown reason, fan will not rotate as expected, no matter
		  the value of SET_OUT (to be specific, this seems to happen
		  only in PWM mode). To workaround this bug, we give SET_CNT
		  value of 254 if it is 255 when switching to open-loop.
 Set PWM polarity. Accepts either 0 (positive duty) or 1 (negative duty) 
  Set pwm value. Accepts values between 0 (stops the fan) and
  255 (full speed). This only makes sense in open-loop mode.
  Set fan RPM value. Can be called both in closed and open-loop mode
  but effect will only be seen after closed-loop mode is configured.
 Set fan startup voltage. Accepted values are either 0, 1, 2 or 3. 
  Helper to import hardware characteristics from .dts file and push
  those to the chip.
  Grab clock (a required property), enable it, get (fixed) clock frequency
  and store it. Note: upon success, clock has been prepared and enabled; it
  must later be unprepared and disabled (e.g. during module unloading) by a
  call to g762_of_clock_disable(). Note that a reference to clock is kept
  in our private data structure to be used in this function.
  Helper to import hardware characteristics from .dts file and push
  those to the chip.
  sysfs attributes
  Read function for fan1_input sysfs file. Return current fan RPM value, or
  0 if fan is out of control.
 reverse logic: fan out of control reporting is enabled low 
  Read and write functions for pwm1_mode sysfs file. Get and set fan speed
  control mode i.e. PWM (1) or DC (0).
  Read and write functions for fan1_div sysfs file. Get and set fan
  controller prescaler value
  Read and write functions for fan1_pulses sysfs file. Get and set number
  of tachometer pulses per fan revolution.
  Read and write functions for pwm1_enable. Get and set fan speed control mode
  (i.e. closed or open-loop).
  Following documentation about hwmon's sysfs interface, a pwm1_enable node
  should accept the following:
   0 : no fan speed control (i.e. fan at full speed)
   1 : manual fan speed control enabled (use pwm[1-]) (open-loop)
   2+: automatic fan speed control enabled (use fan[1-]_target) (closed-loop)
  but we do not accept 0 as this mode is not natively supported by the chip
  and it is not emulated by g762 driver. -EINVAL is returned in this case.
  Read and write functions for pwm1 sysfs file. Get and set pwm value
  (which affects fan speed) in open-loop mode. 0 stops the fan and 255
  makes it run at full speed.
  Read and write function for fan1_target sysfs file. Getset the fan speed in
  closed-loop mode. Speed is given as a RPM value; then the chip will regulate
  the fan speed using pulses from fan tachometer.
  Refer to rpm_from_cnt() implementation above to get info about count number
  calculation.
  Also note that due to rounding errors it is possible that you don't read
  back exactly the value you have set.
 read function for fan1_fault sysfs file. 
  read function for fan1_alarm sysfs file. Note that OOC condition is
  enabled low
 Driver data 
  Enable both fan failure detection and fan out of control protection. The
  function does not protect changeaccess to data structure; it must thus
  only be called during initialization.
 Enable fan failure detection and fan out of control protection 
 Get configuration via DT ... 
 ... or platform_data 
 SPDX-License-Identifier: GPL-2.0-or-later
  A hwmon driver for the Analog Devices ADT7462
  Copyright (C) 2008 IBM
  Author: Darrick J. Wong <darrick.wong@oracle.com>
 Addresses to scan 
 ADT7462 registers 
 cfg0 
 cfg1 
 cfg2 
 cfg3 
  The chip can measure 13 different voltage sources:
  1. +12V1 (pin 7)
  2. Vccp1+2.5V+1.8V+1.5V (pin 23)
  3. +12V3 (pin 22)
  4. +5V (pin 21)
  5. +1.25V+0.9V (pin 19)
  6. +2.5V+1.8V (pin 15)
  7. +3.3v (pin 13)
  8. +12V2 (pin 8)
  9. VbattFSB_Vtt (pin 26)
  A. +3.3V+1.2V1 (pin 25)
  B. Vccp2+2.5V+1.8V+1.5V (pin 24)
  C. +1.5V ICH (only if BOTH pin 2829 are set to +1.5V)
  D. +1.5V 3GPIO (only if BOTH pin 2829 are set to +1.5V)
  Each of these 13 has a factor to convert raw to voltage.  Even better,
  the pins can be connected to other sensors (tachgpiohotetc), which
  makes the bookkeeping tricky.
  Some, but not all, of these voltages have lowhigh limits.
 datasheet only mentions a revision 4 
 How often do we reread sensors values? (In jiffies) 
 How often do we reread sensor limit values? (In jiffies) 
 datasheet says to divide this number by the fan reading to get fan rpm 
 In jiffies 
 In jiffies 
 bits 6-7 are quarter pieces of temp 
 only one per chip 
  16-bit registers on the ADT7462 are low-byte first.  The data sheet says
  that the low byte must be read before the high byte.
 For some reason these registers are not contiguous. 
 Voltage registers are scattered everywhere 
 Provide labels for sysfs 
 Multipliers are actually in uV, not mV. 
 Map Trange register values to mC 
		
		  Reading the fractional register locks the integral
		  register until both have been read.
 convert from uV to mV 
 convert mV to uV 
 convert from uV to mV 
 convert mV to uV 
 convert from uV to mV 
 Only the MSB of the min fan period is stored... 
 package things up 
 tmax = tmin + trange 
 trange = tmax - tmin 
 off 
 manual 
 automatic 
 off 
 manual 
 temp[1234] only 
 temp1 & temp4  
 Return 0 if detection is successful, -ENODEV otherwise 
 SPDX-License-Identifier: GPL-2.0-or-later
  thmc50.c - Part of lm_sensors, Linux kernel modules for hardware
 	      monitoring
  Copyright (C) 2007 Krzysztof Helt <krzysztof.h1@wp.pl>
  Based on 2.4 driver by Frodo Looijaard <frodol@dds.nl> and
  Philip Edelbrock <phil@netroedge.com>
 Addresses to scan 
 Insmod parameters 
 Many THMC50 constants specified below 
 The THMC50 registers 
  The mirror status register cannot be used as
  reading it does not clear alarms.
 Each client has this additional data 
 In jiffies 
 !=0 if it is ADM1022 in temp3 mode 
 true if following fields are valid 
 Register values 
 There is only one PWM mode = DC 
 Temperatures 
 for ADM1022 3rd temperature mode 
 Return 0 if detection is successful, -ENODEV otherwise 
 enable 2nd remote temp 
 set up to at least 1 
 start the chip if it is in standby mode 
 sysfs hooks 
 Register additional ADM1022 sysfs hooks 
 SPDX-License-Identifier: GPL-2.0-or-later
  powr1220.c - Driver for the Lattice POWR1220 programmable power supply
  and monitor. Users can read all ADC inputs along with their labels
  using the sysfs nodes.
  Copyright (c) 2014 Echo360 https:www.echo360.com
  Scott Kanowitz <skanowitz@echo360.com> <scott.kanowitz@gmail.com>
 the next value is in jiffies 
 values 
 Reads the specified ADC channel 
		
		  figure out if we need to use the attenuator for
		  high inputs or inputs that we don't yet have a measurement
		  for. We dynamically set the attenuator depending on the
		  max reading.
 set the attenuator and mux 
		
		  wait at least Tconvert time (200 us) for the
		  conversion to complete
 get the ADC reading 
 get the upper half of the reading 
 now convert the reading to a voltage 
 Shows the voltage associated with the specified ADC channel 
 Shows the maximum setting associated with the specified ADC channel 
 Shows the label associated with the specified ADC channel 
 SPDX-License-Identifier: GPL-2.0+
  Raspberry Pi voltage sensor driver
  Based on firmwareraspberrypi.c by Noralf Trønnes
  Copyright (C) 2018 Stefan Wahren <stefan.wahren@i2se.com>
 Request firmware to clear sticky bits 
	
	  We can't run faster than the sticky shift (100ms) since we get
	  flipping in the sticky bits that are cleared.
 Parent driver assure that firmware is correct 
 SPDX-License-Identifier: GPL-2.0
 Copyright (c) 2014-2018 Nuvoton Technology corporation.
 NPCM7XX PWM registers 
 Define the maximum PWM channel number 
 Define the Counter Register, value = 100 for match 100% 
 default all PWM channels PRESCALE2 = 1 
 NPCM7XX FAN Tacho registers 
 FAN General Definition 
 Define the maximum FAN channel number 
  Get Fan Tach Timeout (base on clock 214843.75Hz, 1 cnt = 4.654us)
  Timeout 94ms ~= 0x5000
  (The minimum FAN speed could to support ~640RPMpulse 1,
  320RPMpulse 2, ...-- 10.6Hz)
 Obtain the fan number 
 fan sample status 
	
	  Config PWM Comparator register for setting duty cycle
 write new CMR value  
 Disable PWM 
 Enable PWM 
 to check whether any fan tach is enable 
 reset status 
		
		  the interrupt enable bits do not need to be cleared before
		  it sets, the interrupt enable bits are cleared only on reset.
		  the clock unit control register is behaving in the same
		  manner that the interrupt enable register behave.
 enable interrupt 
 start to Capture 
 enable interrupt 
 start to Capture 
  Enable a background timer to poll fan tach value, (200ms  4)
  to polling all fan
	
	  Polling two module per one round,
	  FAN01 & FAN89  FAN23 & FAN1011  FAN45 & FAN1213  FAN67 & FAN1415
 clear the flag and reset the counter (TCNT) 
 reset the timer interval 
 clear capature flag, HW will auto reset the NPCM7XX_FAN_TCNTx 
 First capture, drop it 
 reset counter 
		
		  collect the enough sample,
		  (ex: 2 pulse fan need to get 2 sample)
 get enough sample or fan disable 
 compute finial average cnt per pulse 
 disable interrupt 
 stop capturing 
 disable interrupt 
 clear interrupt flag 
 stop capturing 
		
		   If timeout occurs (NPCM7XX_FAN_TIMEOUT), the fan doesn't
		   connect or speed is lower than 10.6Hz (320RPMpulse2).
		   In these situation, the RPM output should be zero.
 input capture is occurred 
 Convert the raw reading to RPM 
 Adjust NPCM7xx PWMs output frequency to ~25Khz 
 If prescale_val = 0, then the prescale output clock is stopped 
	
	  prescale_val need to decrement in one because in the PWM Prescale
	  register the Prescale value increment by one
 Setting PWM Prescale Register value register to both modules 
 stop FAN0~7 clock 
 disable all interrupt 
 clear all interrupt 
 set FAN0~7 clock prescaler 
 set FAN0~7 mode (high-to-low transition) 
 set FAN0~7 Initial CountCap 
 set FAN0~7 compare (equal to count) 
 set FAN0~7 compare value 
 set FAN0~7 fan input FANIN 0~15 
 Fan tach input clock = APB clock  prescalar, default is 255. 
 fan timer initialization 
 SPDX-License-Identifier: GPL-2.0-or-later
  STTS751 sensor driver
  Copyright (C) 2016-2017 Istituto Italiano di Tecnologia - RBCS - EDL
  Robotics, Brain and Cognitive Sciences department
  Electronic Design Laboratory
  Written by Andrea Merello <andrea.merello@gmail.com>
  Based on  LM95241 driver and LM90 driver
 STTS751-0 
 STTS751-1 
  Possible update intervals are (in mS):
  16000, 8000, 4000, 2000, 1000, 500, 250, 125, 62.5, 31.25
  However we are not going to complicate things too much and we stick to the
  approx value in mS.
  These functions converts temperature from HW format to integer format and
  vice-vers. They are (mostly) taken from lm90 driver. Unit is in mC.
 10 bits 
 11 bits 
 12 bits 
	
	  There is a trick here, like in the lm90 driver. We have to read two
	  registers to get the sensor temperature, but we have to beware a
	  conversion could occur between the readings. We could use the
	  one-shot conversion register, but we don't want to do this (disables
	  hardware monitoring). So the solution used here is to read the high
	  byte once, then the low byte, then the high byte again. If the new
	  high byte matches the old one, then we have a valid reading. Else we
	  have to read the low byte again, and now we believe we have a correct
	  reading.
  Update alert flags without waiting for cache to expire. We detects alerts
  immediately for the sake of the alert handler; we still need to deal with
  caching to workaround the fact that alarm flags int the status register,
  despite what the datasheet claims, gets always cleared on read.
	
	  Add another 10% because if we run faster than the HW conversion
	  rate we will end up in reporting incorrectly alarms.
	
	  Reset the cache if the cache time expired, or if we are sure
	  we have valid data from a device conversion, or if we know
	  our cache has been never written.
	 
	  Note that when the cache has been never written the point is
	  to correctly initialize the timestamp, rather than clearing
	  the cache values.
	 
	  Note that updating the cache timestamp when we get an alarm flag
	  is required, otherwise we could incorrectly report alarms to be zero.
 default to worst case 
 unblock alert poll 
 unblock alert poll 
 HW works in range -64C to +127.937C 
	
	  hysteresis reg is relative to therm, so the HW does not need to be
	  adjusted, we need to update our local copy only.
 HW works in range -64C to +127.937C 
 HW works in range -64C to +127.937C 
 HW works in range -64C to +127.937C 
	
	  In early development stages I've become suspicious about the chip
	  starting to misbehave if I ever set, even briefly, an invalid
	  configuration. While I'm not sure this is really needed, be
	  conservative and set rateresolution in such an order that avoids
	  passing through an invalid configuration.
 speed up: lower the resolution, then modify convrate 
 slow down: modify convrate, then raise resolution 
 lower temperaure registers always have bits 0-3 set to zero 
 smbus timeout register always have bits 0-7 set to zero 
 SPDX-License-Identifier: GPL-2.0-or-later
  lm85.c - Part of lm_sensors, Linux kernel modules for hardware
 	    monitoring
  Copyright (c) 1998, 1999  Frodo Looijaard <frodol@dds.nl>
  Copyright (c) 2002, 2003  Philip Pokorny <ppokorny@penguincomputing.com>
  Copyright (c) 2003        Margit Schubert-While <margitsw@t-online.de>
  Copyright (c) 2004        Justin Thiessen <jthiessen@penguincomputing.com>
  Copyright (C) 2007--2014  Jean Delvare <jdelvare@suse.de>
  Chip details at	      <http:www.national.comdsLMLM85.pdf>
 Addresses to scan 
 The LM85 registers 
 Fan speeds are LSB, MSB (2 bytes) 
 These are the recognized values for the above regs 
 Also known as EMC6D103:A2 
 Automated FAN control 
 IN5, IN6 and IN7 
  Conversions. Rounding and limit checking is only done on the TO_REG
  variants. Note that you should be a bit careful with which arguments
  these macros are called: arguments may be evaluated more than once.
 IN are scaled according to built-in resistors 
 .001 Volts 
EMC6D100
 FAN speed is measured using 90kHz clock 
 Temperature is reported in .001 degC increments 
  ZONEs have the following parameters:
     Limit (low) temp,           1. degC
     Hysteresis (below limit),   1. degC (0-15)
     Range of speed control,     .1 degC (2-80)
     Critical (high) temp,       1. degC
  FAN PWMs have the following parameters:
     Reference Zone,                 1, 2, 3, etc.
     Spinup time,                    .05 sec
     PWM value at limitlow temp,    1 count
     PWM Frequency,                  1. Hz
     PWM is Min or OFF below limit,  flag
     Invert PWM output,              flag
  Some chips filter the temp, others the fan.
     Filter constant (or disabled)   .1 seconds
 These are the zone temperature range encodings in .001 degree C 
 These are the PWM frequency encodings 
 1 Hz 
 1 Hz 
 1 Hz 
  Since we can't use strings, I'm abusing these numbers
    to stand in for the following meanings:
       1 -- PWM responds to Zone 1
       2 -- PWM responds to Zone 2
       3 -- PWM responds to Zone 3
      23 -- PWM responds to the higher temp of Zone 2 or 3
     123 -- PWM responds to highest of Zone 1, 2, or 3
       0 -- PWM is always at 0% (ie, off)
      -1 -- PWM is always at 100%
      -2 -- PWM responds to manual control
 Not found. 
 Always 100% 
  Chip sampling rates
  Some sensors are not updated more frequently than once per second
     so it doesn't make sense to read them more often than that.
     We cache the results and return the saved data if the driver
     is called again before a second has elapsed.
  Also, there is significant configuration data for this chip
     given the automatic PWM fan control that is possible.  There
     are about 47 bytes of config data to only 22 bytes of actual
     readings.  So, we keep the config data up to date in the cache
     when it is written and only sample it once every 1 minute
  LM85 can automatically adjust fan speeds based on temperature
  This structure encapsulates an entire Zone config.  There are
  three zones (one for each temperature input) on the lm85
 Low temp limit 
 Low limit hysteresis. (0-15) 
 Temp range, encoded 
 "All fans ON" temp limit 
	u8 max_desired; 
			  Actual "max" temperature specified.  Preserved
			  to prevent "drift" as other autofan control
			  values change.
 Register value 
 Minimum PWM value, encoded 
 Min PWM or OFF below "limit", flag 
  For each registered chip, we need to keep some data in memory.
  The structure is dynamically allocated.
 true if VID5 is configured for ADT7463 or ADT7468 
 true if following fields are valid 
 In jiffies 
 In jiffies 
 Register value 
 Register value 
 Register value 
 Register value 
 Register value 
 Register value 
 Register value 
 Register value 
 Register value 
 Register encoding 
 Decoded values 
 Decoded values 
 Register value 
 VRM version 
 Register encoding, combined 
 Config Register 5 on ADT7468 
 What size location is it? 
 Read WORD data 
 Read both bytes at once 
 Read BYTE data 
 Write WORD data 
 NOTE: ALARM is read only, so not included here 
 Write BYTE data 
 Things that change quickly 
		
		  Have to read extended bits first to "freeze" the
		  more significant bits that are read later.
		  There are 2 additional resolution bits per channel and we
		  have room for 4, so we shift them to the left.
 Three more voltage sensors 
 More alarm bits 
			
			  Have to read LSB bits after the MSB ones because
			  the reading of the MSB bits has frozen the
			  LSBs (backward from the ADM1027).
 last_reading 
 Things that don't change often 
 last_config 
 4 Fans 
 vid, vrm, alarms 
 6-pin VID (VRM 10) 
 5-pin VID (VRM 9) 
 pwm 
 PWM is always at 100% 
 PWM is always at 0% 
 PWM responds to manual control 
 PWM in automatic mode 
		
		  Here we have to choose arbitrarily one of the 5 possible
		  configurations; I go for the safest
	
	  The ADT7468 has a special high-frequency PWM output mode,
	  where all PWM outputs are driven by a 22.5 kHz clock.
	  This might confuse the user, but there's not much we can do.
 High freq. mode 
 Low freq. mode 
 Voltages 
 Temps 
 Automatic PWM control 
 Temperature settings for automatic PWM control 
 Update temp_auto_max and temp_auto_range 
 Start monitoring if needed 
 Warn about unusual configuration bits 
	
	  Differenciate between real LM96000 and Winbond WPCD377I. The latter
	  emulate the former except that it has no hardware monitoring function
	  so the readings are always 0.
 Return 0 if detection is successful, -ENODEV otherwise 
 We need to be able to do byte IO 
 Determine the chip type 
 Check for Winbond WPCD377I 
 Note: we can't tell a '100 from a '101 
 Fill in the chip specific driver values 
 Set the VRM version 
 Initialize the LM85 chip 
 sysfs hooks 
 minctl and temp_off exist on all chips except emc6d103s 
	
	  The ADT746368 have an optional VRM 10 mode where pin 21 is used
	  as a sixth digital VID input rather than an analog input.
 The EMC6D100 has 3 additional voltage inputs 
 SPDX-License-Identifier: GPL-2.0
  adm1029.c - Part of lm_sensors, Linux kernel modules for hardware monitoring
  Copyright (C) 2006 Corentin LABBE <clabbe.montjoie@gmail.com>
  Based on LM83 Driver by Jean Delvare <jdelvare@suse.de>
  Give only processor, motherboard temperatures and fan tachs
  Very rare chip please let me know if you use it
  http:www.analog.comUploadedFilesData_SheetsADM1029.pdf
  Addresses to scan
  The ADM1029 registers
  Manufacturer ID is 0x41 for Analog Devices
 Registers to be checked by adm1029_update_device() 
  Client data (each client gets its own)
 protect register access 
 false until following fields are valid 
 in jiffies 
 registers values, signed for temperature, unsigned for other stuff 
  function that update the status of the chips (temperature for example)
	
	  Use the "cache" Luke, don't recheck values
	  if there are already checked not a long time later
  Sysfs stuff
Read actual config 
 Update the value 
 Update the cache 
 Write value 
 Access rights on sysfs. 
  Real code
 Return 0 if detection is successful, -ENODEV otherwise 
	
	  ADM1029 doesn't have CHIP ID, check just MAN ID
	  For better detection we check also ADM1029_TEMP_DEVICES_INSTALLED,
	  ADM1029_REG_NB_FAN_SUPPORT and compare it with possible values
	  documented
 0x41 is Analog Devices 
		
		  There are no "official" CHIP ID, so actually
		  we use MajorMinor revision for that
 recheck config 
	
	  Initialize the ADM1029 chip
	  Check config register
 SPDX-License-Identifier: GPL-2.0-or-later
 Sensirion SHT3x-DIS humidity and temperature sensor driver.
  The SHT3x comes in many different versions, this driver is for the
  I2C version only.
  Copyright (C) 2016 Sensirion AG, Switzerland
  Author: David Frey <david.frey@sensirion.com>
  Author: Pascal Sachs <pascal.sachs@sensirion.com>
 commands (high precision mode) 
 commands (low power mode) 
 commands for periodic mode 
 commands for heater control 
 other commands 
 delays for non-blocking i2c commands, both in us 
 periodic measure commands (high precision mode) 
 0.5 measurements per second 
 1 measurements per second 
 2 measurements per second 
 4 measurements per second 
 10 measurements per second 
 periodic measure commands (low power mode) 
 0.5 measurements per second 
 1 measurements per second 
 2 measurements per second 
 4 measurements per second 
 10 measurements per second 
 temp1_max, humidity1_max 
 temp_1_max_hyst, humidity1_max_hyst 
 temp1_min, humidity1_min 
 temp_1_min_hyst, humidity1_min_hyst 
 lock for sending i2c commands 
 lock for updating driver data 
 in us
 last update in periodic mode
	
	  cached values for temperature and humidity and limits
	  the limits arrays have the following order:
	  max, max_hyst, min, min_hyst
 find next faster update interval 
	
	  From datasheet:
	  T = -45 + 175  ST  2^16
	  Adapted for integer fixed point (3 digit) arithmetic.
	
	  From datasheet:
	  RH = 100  SRH  2^16
	  Adapted for integer fixed point (3 digit) arithmetic.
	
	  Only update cached readings once per update interval in periodic
	  mode. In single shot mode the sensor measures values on demand, so
	  every time the sysfs interface is called, a measurement is triggered.
	  In periodic mode however, the measurement process is handled
	  internally by the sensor and reading out sensor values only makes
	  sense if a new reading is available.
 sysfs attributes 
  limits_update must only be called from probe or with data_lock held
  limit_store must only be called with data_lock held
	
	  ST = (T + 45)  175  2^16
	  SRH = RH  100  2^16
	  adapted for fixed point arithmetic and packed the same as
	  in limit_show()
	
	  In blocking mode (clock stretching mode) the I2C bus
	  is blocked for other traffic, thus the call to i2c_master_recv()
	  will wait until the data is ready. For non blocking mode, we
	  have to wait ourselves.
 mode did not change 
	
	  Abort periodic measure mode.
	  To do any changes to the configuration while in periodic mode, we
	  have to send a break command to the sensor, which then falls back
	  to single shot (mode = 0).
 select mode 
 select mode and command 
	
	  we require full i2c support since the sht3x uses multi-byte read and
	  writes as well as multi-byte commands which are not supported by
	  the smbus protocol
	
	  An attempt to read limits register too early
	  causes a NACK response from the chip.
	  Waiting for an empirical delay of 500 us solves the issue.
 device ID table 
 SPDX-License-Identifier: GPL-2.0-or-later
  Driver for TI ADC128D818 System Monitor with Temperature Sensor
  Copyright (c) 2014 Guenter Roeck
  Derived from lm80.c
  Copyright (C) 1998, 1999  Frodo Looijaard <frodol@dds.nl>
 			     and Philip Edelbrock <phil@netroedge.com>
 Addresses to scan
  The chip also supports addresses 0x35..0x37. Don't scan those addresses
  since they are also used by some EEPROMs, which may result in false
  positives.
 registers 
 No. of voltage entries in adc128_attrs 
 Voltage inputs visible per operation mode 
 Reference voltage in mV 
 Operation mode 
 true if following fields are valid 
 In jiffies 
	u16 in[3][8];		 Register value, normalized to 12 bit
				  0: input voltage
				  1: min limit
				  2: max limit
	s16 temp[3];		 Register value, normalized to 9 bit
				  0: sensor 1: limit 2: hyst
 alarm register value 
 10 mV LSB on limit registers 
 0.5 degrees C resolution 
	
	  Clear an alarm after reporting it to user space. If it is still
	  active, the next update sequence will set the alarm bit again.
 Voltage, visible according to num_inputs[] 
 Temperature, visible if not in mode 1 
 Check unused bits for confirmation 
	
	  Reset chip to defaults.
	  This makes most other initializations unnecessary.
 Set operation mode, if non-default 
 If external vref is selected, configure the chip to use it 
 Write advanced configuration register 
 Start monitoring 
 vref is optional. If specified, is used as chip reference voltage 
 2.56V, in mV 
 Operation mode is optional. If unspecified, keep current mode 
 Initialize the chip 
 SPDX-License-Identifier: GPL-2.0-or-later
  A hwmon driver for the Intel 5000 series chipset FB-DIMM AMB
  temperature sensors
  Copyright (C) 2007 IBM
  Author: Darrick J. Wong <darrick.wong@oracle.com>
  Ugly hack: For some reason the highest bit is set if there
  are _any_ DIMMs in the channel.  Attempting to read from
  this "high-order" AMB results in a memory bus error, so
  for now we'll just ignore that top bit, even though that
  might prevent us from seeing the 16th DIMM in the channel.
 Count the number of AMBs found 
 ignore the high-order bit, see "Ugly hack" comment above 
 Set up sysfs stuff 
 sysfs label 
 Temperature sysfs knob 
 Temperature min sysfs knob 
 Temperature mid sysfs knob 
 Temperature max sysfs knob 
 Temperature alarm sysfs knob 
 only ever going to be one of these 
 Find AMB register memory space 
 Is it big enough? 
 Copy the DIMM presence map for these two channels 
 Figure out where the AMB registers live 
 Copy the DIMM presence map for the first two channels 
 Copy the DIMM presence map for the optional second two channels 
 Set up resource regions 
 SPDX-License-Identifier: GPL-2.0-or-later
  vt8231.c - Part of lm_sensors, Linux kernel modules
 	      for hardware monitoring
  Copyright (c) 2005 Roger Lucas <vt8231@hiddenengine.co.uk>
  Copyright (c) 2002 Mark D. Studebaker <mdsxyz123@yahoo.com>
 		      Aaron M. Marsh <amarsh@sdf.lonestar.org>
  Supports VIA VT8231 South Bridge embedded sensors
  The VT8231 registers
  The reset value for the input channel configuration is used (Reg 0x4A=0x07)
  which sets the selected inputs marked with '' below if multiple options are
  possible:
 		    Voltage Mode	  Temperature Mode
 	Sensor	      Linux Id	      Linux Id	      VIA Id
 	--------      --------	      --------	      ------
 	CPU Diode	NA		temp1		0
 	UIC1		in0		temp2 		1
 	UIC2		in1 		temp3		2
 	UIC3		in2 		temp4		3
 	UIC4		in3 		temp5		4
 	UIC5		in4 		temp6		5
 	3.3V		in5		NA
  Note that the BIOS may set the configuration register to a different value
  to match the motherboard configuration.
 fans numbered 0-1 
 Voltage inputs numbered 0-5 
  Temperatures are numbered 1-6 according to the Linux kernel specification.
  In the VIA datasheet, however, the temperatures are numbered from zero.
  Since it is important that this driver can easily be compared to the VIA
  datasheet, we will use the VIA numbering within this driver and map the
  kernel sysfs device name to the VIA number in the sysfs callback.
  temps 0-5 as numbered in VIA datasheet - see later for mapping to Linux
  numbering
 voltages 0-5 
  NB  The values returned here are NOT temperatures.  The calibration curves
      for the thermistor curves are board-specific and must go in the
      sensors.conf file.  Temperature sensors are actually ten bits, but the
      VIA datasheet only considers the 8 MSBs obtained from the regtemp[]
      register.  The temperature value returned should have a magnitude of 3,
      so we use the VIA scaling as the "true" scaling and use the remaining 2
      LSBs as fractional precision.
      All the on-chip hardware temperature comparisons for the alarms are only
      8-bits wide, and compare against the 8 MSBs of the temperature.  The bits
      in the registers VT8231_REG_TEMP_LOW01 and VT8231_REG_TEMP_LOW25 are
      ignored.
  FAN RPM CONVERSIONS 
  This chip saturates back at 0, not at 255 like many the other chips.
  So, 0 means 0 RPM
 true if following fields are valid 
 In jiffies 
 Register value 
 Register value 
 Register value 
 Register value 10 bit, right aligned 
 Register value 
 Register value 
 Register value 
 Register value 
 Register encoding, shifted right 
 Register encoding 
 following are the sysfs callback functions 
 Special case for input 5 as this has 3.3V scaling built into the chip 
 Temperatures 
  Note that these map the Linux temperature sensor numbering (1-6) to the VIA
  temperature sensor numbering (0-5)
 Fans 
 Correct the fan minimum speed 
 Alarms 
 Reserve the ISA region 
 Register sysfs hooks 
 Must update device information to find out the config field 
 Set alarm flags correctly 
 Sets global pdev as a side effect 
	
	  Always return failure here.  This is to allow other drivers to bind
	  to this pci device.  We don't really want to have control over the
	  pci device, we only wanted to read as few register values from it.
	
	  We do, however, mark ourselves as using the PCI device to stop it
	  getting unloaded.
 SPDX-License-Identifier: GPL-2.0-or-later
  HWMON Driver for Dialog DA9052
  Copyright(c) 2012 Dialog Semiconductor Ltd.
  Author: David Dajun Chen <dchen@diasemi.com>
 Conversion function for VDDOUT and VBAT 
 Conversion function for ADC channels 4, 5 and 6 
 Conversion function for VBBAT 
 Equivalent to 3.9mAbit in register ICHG_AV 
 block read to avoid separation of MSB and LSB 
 Wait for an conversion done interrupt 
	
	  Degrees celsius = 1.708  (TJUNC_RES - T_OFFSET) - 108.8
	  T_OFFSET is a trim value used to improve accuracy of the result
 convert from microvolt (DT) to millivolt (hwmon) 
 TSIREF limits from datasheet 
 disable touchscreen features 
 Sample every 1ms 
 SPDX-License-Identifier: GPL-2.0-or-later
   ds620.c - Support for temperature sensor and thermostat DS620
   Copyright (C) 2010, 2011 Roland Stigge <stigge@antcom.de>
   based on ds1621.c by Christian W. Zuckschwerdt  <zany@triq.net>
  Many DS620 constants specified below
   15   14   13   12   11   10   09    08
  |Done|NVB |THF |TLF |R1  |R0  |AUTOC|1SHOT|
   07   06   05   04   03   02   01    00
  |PO2 |PO1 |A2  |A1  |A0  |    |     |     |
 The DS620 registers 
 input, word, RO 
 min, word, RW 
 max, word, RW 
 word, RW 
 no data 
 no data 
 Each client has this additional data 
 true if following fields are valid 
 In jiffies 
 Register values, word 
 switch to continuous conversion mode 
 already high at power-on, but don't trust the BIOS! 
 thermostat mode according to platform data 
 PO_LOW 
 PO_HIGH 
 always low 
 with highest precision 
 start conversion 
 reset alarms if necessary 
 Initialize the DS620 chip 
 This is the driver that will be inserted 
 SPDX-License-Identifier: GPL-2.0-or-later
  smsc47m1.c - Part of lm_sensors, Linux kernel modules
 		for hardware monitoring
  Supports the SMSC LPC47B27x, LPC47M10x, LPC47M112, LPC47M13x,
  LPC47M14x, LPC47M15x, LPC47M192, LPC47M292 and LPC47M997
  Super-IO chips.
  Copyright (C) 2002 Mark D. Studebaker <mdsxyz123@yahoo.com>
  Copyright (C) 2004-2007 Jean Delvare <jdelvare@suse.de>
  Ported to Linux 2.6 by Gabriele Gorla <gorlik@yahoo.com>
 			and Jean Delvare
 Super-I0 registers and commands 
 The register to readwrite 
 The value to readwrite 
 logical device for fans is 0x0A 
 Logical device registers 
 nr is 0 or 1 in the macros below 
 In jiffies 
 Register value 
 Register value 
 Register encoding, shifted right 
 Register encoding 
 Register value (bit 0 is disable) 
 Remember initial device state 
 Clear alarms if needed 
 Clear alarm if needed 
	
	  This chip (stupidly) stops monitoring fan speed if PWM is
	  enabled and duty cycle is 0%. This is fine if the monitoring
	  and control concern the same fan, but troublesome if they are
	  not (which could as well happen).
  Note: we save and restore the fan minimum here, because its value is
  determined in part by the fan clock divider.  This follows the principle
  of least surprise; the user doesn't expect the fan minimum to change just
  because the divider changed.
 No change 
 Preserve fan min 
 Preserve additional bits 
 preserve the other bits 
	
	  SMSC LPC47M10xLPC47M112LPC47M13x (device id 0x59), LPC47M14x
	  (device id 0x5F) and LPC47B27x (device id 0x51) have fan control.
	  The LPC47M15x and LPC47M192 chips "with hardware monitoring block"
	  can do much more besides (device id 0x60).
	  The LPC47M997 is undocumented, but seems to be compatible with
	  the LPC47M192, and has the same device id.
	  The LPC47M292 (device id 0x6B) is somewhat compatible, but it
	  supports a 3rd fan, and the pin configuration registers are
	  unfortunately different.
	  The LPC47M233 has the same device id (0x6B) but is not compatible.
	  We check the high bit of the device revision register to
	  differentiate them.
	
	  Enable only if address is set (needed at least on the
	  Compaq Presario S4000NX)
 Restore device to its initial state 
  This function can be used to:
   - test for resource conflicts with ACPI
   - request the resources
  We only allocate the IO ports we really need, to minimize the risk of
  conflicts with ACPI or with other drivers.
 register, region length 
 register, region length 
 Only check for conflicts 
 Request the resources 
	
	  If no function is properly configured, there's no point in
	  actually registering the chip.
	
	  Some values (fan min, clock dividers, pwm registers) may be
	  needed before any update is triggered, so we better read them
	  at least once here. We don't usually do it that way, but in
	  this particular case, manually reading 5 registers out of 8
	  doesn't make much sense and we're better using the existing
	  function.
 Register sysfs hooks 
 Sets global pdev as a side effect 
 SPDX-License-Identifier: GPL-2.0-only
  drivershwmonwm831x-hwmon.c - Wolfson Microelectronics WM831x PMIC
                                 hardware monitoring features.
  Copyright (C) 2009 Wolfson Microelectronics plc
 Degrees celsius = (512.18-ret)  1.0983 
  Report as a voltage since conversion depends on external components
  and that's what the ABI wants.
 SPDX-License-Identifier: GPL-2.0-or-later
  adm1026.c - Part of lm_sensors, Linux kernel modules for hardware
 	       monitoring
  Copyright (C) 2002, 2003  Philip Pokorny <ppokorny@penguincomputing.com>
  Copyright (C) 2004 Justin Thiessen <jthiessen@penguincomputing.com>
  Chip details at:
  <https:www.onsemi.comPowerSolutionsproduct.do?id=ADM1026>
 Addresses to scan 
 Many ADM1026 constants specified below 
 The ADM1026 registers 
 CONFIG2 controls FAN0GPIO0 through FAN7GPIO7 
  There are 10 general analog inputs and 7 dedicated inputs
  They are:
     0 - 9  =  AIN0 - AIN9
        10  =  Vbat
        11  =  3.3V Standby
        12  =  3.3V Main
        13  =  +5V
        14  =  Vccp (CPU core voltage)
        15  =  +12V
        16  =  -12V
  Temperatures are:
     0 - Internal
     1 - External 1
     2 - External 2
 CFG_16 in REG_CFG3 
 STATUS_16 in REG_STATUS4 
 MASK_16 in REG_MASK4 
 These are the recognized values for the above regs 
  Conversions. Rounding and limit checking is only done on the TO_REG
  variants. Note that you should be a bit careful with which arguments
  these macros are called: arguments may be evaluated more than once.
  IN are scaled according to built-in resistors.  These are the
    voltages corresponding to 34 of full scale (192 or 0xc0)
    NOTE: The -12V input needs an additional factor to account
       for the Vref pullup resistor.
       NEG12_OFFSET = SCALE  Vref  V-192 - Vref
                    = 13875  2.50  1.875 - 2500
                    = 16000
  The values in this table are based on Table II, page 15 of the
     datasheet.
 .001 Volts 
  FAN speed is measured using 22.5kHz clock and counts for 2 pulses
    and we assume a 2 pulse-per-rev fan tach signal
       22500 kHz  60 (secmin)  2 (pulse)  2 (pulserev) == 1350000
 Temperature is reported in 1 degC increments 
  Analog output is a voltage, and scaled to millivolts.  The datasheet
    indicates that the DAC could be used to drive the fans, but in our
    example board (Arima HDAMA) it isn't connected to the fans at all.
  Chip sampling rates
  Some sensors are not updated more frequently than once per second
     so it doesn't make sense to read them more often than that.
     We cache the results and return the saved data if the driver
     is called again before a second has elapsed.
  Also, there is significant configuration data for this chip
     So, we keep the config data up to date in the cache
     when it is written and only sample it once every 5 minutes
  We allow for multiple chips in a single system.
  For each registered ADM1026, we need to keep state information
  at client->data. The adm1026_data structure is dynamically
  allocated, when a new client structure is allocated.
 true if following fields are valid 
 In jiffies 
 In jiffies 
 Register value 
 Register value 
 Register value 
 Register value 
 Register value 
 Register value 
 Register value 
 Register value 
 Register value 
 Register value 
 Register value 
 Decoded value 
 Pwm control values 
 VRM version 
 Register value (DAC) 
 Register encoding, combined 
 Register encoding, combined 
 Register encoding, combined 
 Register encoding, combined 
 Decoded value 
 Register value 
 Register value 
 Register value 
 "RAM" locations 
 EEPROM, do nothing 
 "RAM" locations 
 EEPROM, do nothing 
 Things that change quickly 
			
			  NOTE: temp[] is s8 and we assume 2's complement
			    "conversion" in the assignment
 GPIO16 is MSbit of alarms, move it to gpio 
 GPIO16 
 Read the GPIO values 
 last_reading 
 Things that don't change often 
			
			  NOTE: temp_xxx[] are s8 and we assume 2's
			     complement "conversion" in the assignment
 Read the STATUSalarm masks 
 GPIO16 
 Read the GPIO values 
 Read various values from CONFIG1 
 Read the GPIO config 
 last_config 
 Now add fan readwrite functions 
 Adjust fan_min to account for new fan divisor 
 0 and 0xff are special.  Don't adjust them 
 Now add fan_div readwrite functions 
 0 <= nr < 4 
 3 < nr < 8 
 Temps 
 apply immediately 
 apply pwm1_auto_pwm_min to pwm1 
 set pwm to safe value 
 enable PWM fan control 
 Return 0 if detection is successful, -ENODEV otherwise 
 We need to be able to do byte IO 
 Now, we do the remaining detection. 
 Determine the chip type. 
 Analog Devices ADM1026 
 Not an ADM1026... 
 GPIO16 is THERM 
 Make the changes requested. 
	
	  We may need to unlockstop monitoring or soft-reset the
	     chip before we can make changes.  This hasn't been
	     tested much.  FIXME
 Make outputs 
 if GPIO0-7 is output, it isn't a FAN tach 
 Input overrides output 
 if GPIO0-7 is input, it isn't a FAN tach 
 Inverted 
 Normal overrides inverted 
 Fan overrides input and output 
 Write new configs to registers 
 Print the new config 
 Read chip config 
 Inform user of chip config 
 Read and pick apart the existing GPIO configuration 
 ... and then print it 
	
	  If the user asks us to reprogram the GPIO config, then
	  do it now.
	
	  WE INTENTIONALLY make no changes to the limits,
	    offsets, pwms, fans and zones.  If they were
	    configured, we don't want to mess with them.
	    If they weren't, the default is 100% PWM, no
	    control and will suffice until 'sensors -s'
	    can be run by the user.  We DO set the default
	    value for pwm1.auto_pwm_min to its maximum
	    so that enabling automatic pwm fan control
	    without first setting a value for pwm1.auto_pwm_min
	    will not result in potentially dangerous fan speed decrease.
 Start monitoring 
 Set MONITOR, clear interrupt acknowledge and sw reset 
 initialize fan_div[] to hardware defaults 
 Set the VRM version 
 Initialize the ADM1026 chip 
 sysfs hooks 
 SPDX-License-Identifier: GPL-2.0-only
  drivershwmonnsa320-hwmon.c
  ZyXEL NSA320 Media Servers
  hardware monitoring
  Copyright (C) 2016 Adam Baker <linux@baker-net.org.uk>
  based on a board file driver
  Copyright (C) 2012 Peter Schildmann <linux@schildmann.info>
 Tests for error return values rely upon this value being < 0x80 
  The Zyxel hwmon MCU is a Holtek HT46R065 that is factory programmed
  to perform temperature and fan speed monitoring. It is read by taking
  the active pin low. The 32 bit output word is then clocked onto the
  data line. The MSB of the data word is a magic nuber to indicate it
  has been read correctly, the next byte is the fan speed (in hundreds
  of RPM) and the last two bytes are the temperature (in tenths of a
  degree)
 lock GPIO operations 
 jiffies 
  Although this protocol looks similar to SPI the long delay
  between the active (aka chip select) signal and the shorter
  delay between clock pulses are needed for reliable operation.
  The delays provided are taken from the manufacturer kernel,
  testing suggest they probably incorporate a reasonable safety
  margin. (The single device tested became unreliable if the
  delay was reduced to 110th of this value.)
 Look up the GPIO pins to use 
 All allocations use devres so remove() is not needed. 
 SPDX-License-Identifier: GPL-2.0
  sht15.c - support for the SHT15 Temperature and Humidity Sensor
  Portions Copyright (c) 2010-2012 Savoir-faire Linux Inc.
           Jerome Oufella <jerome.oufella@savoirfairelinux.com>
           Vivien Didelot <vivien.didelot@savoirfairelinux.com>
  Copyright (c) 2009 Jonathan Cameron
  Copyright (c) 2007 Wouter Horre
  For further information, see the Documentationhwmonsht15.rst file.
 Commands 
 Min timings 
 (nsecs) clock low 
 (nsecs) clock high 
 (nsecs) data setup time 
 (msecs) soft reset time 
 Status Register Bits 
 List of supported chips 
 Actions the driver may be doing 
  struct sht15_temppair - elements of voltage dependent temp calc
  @vdd:	supply voltage in microvolts
  @d1:		see data sheet
 microvolts 
 Table 9 from datasheet - relates temperature calculation to supply voltage 
 Table from CRC datasheet, section 2.4 
  struct sht15_data - device instance specific data
  @sck:		clock GPIO line
  @data:		data GPIO line
  @read_work:		bh of interrupt handler.
  @wait_queue:		wait queue for getting values from device.
  @val_temp:		last temperature value read from device.
  @val_humid:		last humidity value read from device.
  @val_status:		last status register value read from device.
  @checksum_ok:	last value read from the device passed CRC validation.
  @checksumming:	flag used to enable the data validation with CRC.
  @state:		state identifying the action the driver is doing.
  @measurements_valid:	are the current stored measures valid (start condition).
  @status_valid:	is the current stored status valid (start condition).
  @last_measurement:	time of last measure.
  @last_status:	time of last status reading.
  @read_lock:		mutex to ensure only one read in progress at a time.
  @dev:		associate device structure.
  @hwmon_dev:		device associated with hwmon subsystem.
  @reg:		associated regulator (if specified).
  @nb:			notifier block to handle notifications of voltage
                       changes.
  @supply_uv:		local copy of supply voltage used to allow use of
                       regulator consumer if available.
  @supply_uv_valid:	indicates that an updated value has not yet been
 			obtained from the regulator and so any calculations
 			based upon it will be invalid.
  @update_supply_work:	work struct that is used to update the supply_uv.
  @interrupt_handled:	flag used to indicate a handler has been scheduled.
  sht15_crc8() - compute crc8
  @data:	sht15 specific data.
  @value:	sht15 retrieved data.
  @len:	Length of retrieved data
  This implements section 2 of the CRC datasheet.
  sht15_connection_reset() - reset the comms interface
  @data:	sht15 specific data
  This implements section 3.4 of the data sheet
  sht15_send_bit() - send an individual bit to the device
  @data:	device state data
  @val:	value of bit to be sent
 clock low time 
  sht15_transmission_start() - specific sequence for new transmission
  @data:	device state data
  Timings for this are not documented on the data sheet, so very
  conservative ones used in implementation. This implements
  figure 12 on the data sheet.
 ensure data is high and output 
  sht15_send_byte() - send a single byte to the device
  @data:	device state
  @byte:	value to be sent
  sht15_wait_for_response() - checks for ack from device
  @data:	device state
  sht15_send_cmd() - Sends a command to the device.
  @data:	device state
  @cmd:	command byte to be sent
  On entry, sck is output low, data is output pull high
  and the interrupt disabled.
  sht15_soft_reset() - send a soft reset command
  @data:	sht15 specific data.
  As described in section 3.2 of the datasheet.
 device resets default hardware status register value 
  sht15_ack() - send a ack
  @data:	sht15 specific data.
  Each byte of data is acknowledged by pulling the data line
  low for one clock pulse.
  sht15_end_transmission() - notify device of end of transmission
  @data:	device state.
  This is basically a NAK (single clock pulse, data high).
  sht15_read_byte() - Read a byte back from the device
  @data:	device state.
  sht15_send_status() - write the status register byte
  @data:	sht15 specific data.
  @status:	the byte to set the status register with.
  As described in figure 14 and table 5 of the datasheet.
  sht15_update_status() - get updated status register from device if too old
  @data:	device instance specific data.
  As described in figure 15 and table 5 of the datasheet.
		
		  Perform checksum validation on the received data.
		  Specification mentions that in case a checksum verification
		  fails, a soft reset command must be sent to the device.
  sht15_measurement() - get a new value from device
  @data:		device instance specific data
  @command:		command sent to request value
  @timeout_msecs:	timeout after which comms are assumed
 			to have failed are reset.
 Only relevant if the interrupt hasn't occurred. 
 IO error occurred 
 timeout occurred 
	
	   Perform checksum validation on the received data.
	   Specification mentions that in case a checksum verification fails,
	   a soft reset command must be sent to the device.
  sht15_update_measurements() - get updated measures from device if too old
  @data:	device state
  sht15_calc_temp() - convert the raw reading to a temperature
  @data:	device state
  As per section 4.3 of the data sheet.
 Find pointer to interpolate 
  sht15_calc_humid() - using last temperature convert raw to humid
  @data:	device state
  This is the temperature compensated version as per section 4.2 of
  the data sheet.
  The sensor is assumed to be V3, which is compatible with V4.
  Humidity conversion coefficients are shown in table 7 of the datasheet.
 milli percent 
 x 10 ^ -6 
 x 10 ^ -7 
 x 10 ^ -6 
 x 10 ^ -7 
  sht15_show_status() - show status information in sysfs
  @dev:	device.
  @attr:	device attribute.
  @buf:	sysfs buffer where information is written to.
  Will be called on read access to temp1_fault, humidity1_fault
  and heater_enable sysfs attributes.
  Returns number of bytes written into buffer, negative errno on error.
  sht15_store_heater() - change heater state via sysfs
  @dev:	device.
  @attr:	device attribute.
  @buf:	sysfs buffer to read the new heater state from.
  @count:	length of the data.
  Will be called on write access to heater_enable sysfs attribute.
  Returns number of bytes actually decoded, negative errno on error.
  sht15_show_temp() - show temperature measurement value in sysfs
  @dev:	device.
  @attr:	device attribute.
  @buf:	sysfs buffer where measurement values are written to.
  Will be called on read access to temp1_input sysfs attribute.
  Returns number of bytes written into buffer, negative errno on error.
 Technically no need to read humidity as well 
  sht15_show_humidity() - show humidity measurement value in sysfs
  @dev:	device.
  @attr:	device attribute.
  @buf:	sysfs buffer where measurement values are written to.
  Will be called on read access to humidity1_input sysfs attribute.
  Returns number of bytes written into buffer, negative errno on error.
 First disable the interrupt 
 Then schedule a reading work struct 
 Firstly, verify the line is low 
		
		  If not, then start the interrupt again - care here as could
		  have gone low in meantime so verify it hasn't!
 If still not occurred or another handler was scheduled 
 Read the data back from the device 
		
		  Ask the device for a checksum and read it back.
		  Note: the device sends the checksum byte reversed.
 Tell the device we are done 
  sht15_invalidate_voltage() - mark supply voltage invalid when notified by reg
  @nb:		associated notification structure
  @event:	voltage regulator state change event code
  @ignored:	function parameter - ignored here
  Note that as the notification code holds the regulator lock, we have
  to schedule an update of the supply voltage rather than getting it directly.
	
	  If a regulator is available,
	  query what the supply voltage actually is!
		
		  Setup a notifier block to update this if another device
		  causes the voltage to change
 Try requesting the GPIOs 
	
	  Make sure any reads from the device are done and
	  prevent new ones beginning
 SPDX-License-Identifier: GPL-2.0-or-later
  Support for the FTS Systemmonitoring Chip "Teutates"
  Copyright (C) 2016 Fujitsu Technology Solutions GmbH,
 		  Thilo Cestonaro <thilo.cestonaro@ts.fujitsu.com>
 update sensor data lock 
 readwrite register lock 
 in jiffies 
 false until following fields are valid 
 in rps 
 I2C Helper functions							     
 Data Updater Helper function						     
 Data not ready yet 
 Watchdog functions							     
	 switch watchdog resolution to minutes if timeout does not fit
	  into a byte
 watchdog not running, set timeout to a default of 60 sec. 
 Register our watchdog part 
 max timeout 255 minutes. 
 SysFS handler functions						     
 00h Temperature = Sensor Error 
 SysFS structs							     
 Temperature sensors 
 Fans 
 Voltages 
 Module initialization  remove functions				     
 detection works with revision greater or equal to 0x2b 
 Device Detect Regs must have 0x17 0x34 and 0x54 
	
	  0x10 == Baseboard Management Controller, 0x01 == Teutates
	  Device ID Reg needs to be 0x11
 Baseboard Management Controller check 
 Module Details							     
 SPDX-License-Identifier: GPL-2.0-or-later
   ads7871 - driver for TI ADS7871 AD converter
   Copyright (c) 2010 Paul Thomas <pthomas8589@gmail.com>
 	You need to have something like this in struct spi_board_info
 	{
 		.modalias	= "ads7871",
 		.max_speed_hz	= 210001000,
 		.chip_select	= 0,
 		.bus_num	= 1,
 	},
From figure 18 in the datasheet
Register addresses
AD Output Data, LS Byte
AD Output Data, MS Byte
PGA Valid Register
AD Control Register
GainMux Register
Digital IO State Register
Digital IO Control Register
RevOscillator Control Register
Serial Interface Control Register
ID Register
  From figure 17 in the datasheet
  These bits get ORed with the address to form
  the instruction byte
Instruction Bit masks
From figure 18 in the datasheet
bit masks for RevOscillator Control Register
M3 selects single ended
allows for reg = (gain << MUX_G_BV) | ...
From figure 18 in the datasheet
bit masks for RevOscillator Control Register
	
	  TODO: add support for conversions
	  other than single ended with a gain of 1
MUX_M3_BM forces single ended
This is also where the gain of the PGA would be set
	
	  on 400MHz arm9 platform the conversion
	  is already done when we do this test
result in volts10000 = (val8192)2.510000
 Configure the SPI bus 
	
	  because there is no other error checking on an SPI bus
	  we need to make sure we really have a chip
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (C) 2011 Alexander Stein <alexander.stein@systec-electronic.com>
  The LM95245 is a sensor chip made by TI  National Semiconductor.
  It reports up to two temperatures (its own plus an external one).
  This driver is based on lm95241.c
 LM95245 registers 
 general registers 
 diode configuration 
 status registers 
 limit registers 
 temperature signed 
 temperature unsigned 
 id registers 
 LM95245 specific bitfields 
 conversation rate in ms 
 Client data (each client gets its own) 
 in msecs 
 Conversions 
		
		  Local temp is always signed.
		  Remote temp has both signed and unsigned data.
		  Use signed calculation for remote if signed bit is set
		  or if reported temperature is below signed limit.
 Clamp to reasonable range to prevent overflow 
 Return 0 if detection is successful, -ENODEV otherwise 
 Initialize the LM95245 chip 
 Driver data (common to all clients) 
 SPDX-License-Identifier: GPL-2.0-or-later
 Lantiq cpu temperature sensor driver
  Copyright (C) 2017 Florian Eckert <fe@dev.tdt.de>
 gphy1 configuration register contains cpu temperature 
 get the temperature including one decimal place 
 range -38 to +154 °C, register value zero is -38.0 °C 
 scale temp to millidegree 
 available on vr9 v1.2 SoCs only 
 SPDX-License-Identifier: GPL-2.0-or-later
  lm80.c - From lm_sensors, Linux kernel modules for hardware
 	    monitoring
  Copyright (C) 1998, 1999  Frodo Looijaard <frodol@dds.nl>
 			     and Philip Edelbrock <phil@netroedge.com>
  Ported to Linux 2.6 by Tiago Sousa <mirage@kaotik.org>
 Addresses to scan 
 Many LM80 constants specified below 
 The LM80 registers 
  Conversions. Rounding and limit checking is only done on the TO_REG
  variants. Note that you should be a bit careful with which arguments
  these macros are called: arguments may be evaluated more than once.
  Fixing this is just not worth it.
  Client data (each client gets its own)
 !=0 if error occurred during last update 
 true if following fields are valid 
 In jiffies 
 Register value, 1st index is enum in_index 
 Register value, 1st index enum fan_index 
 Register encoding, shifted right 
 Register values, normalized to 16 bit 
 Register encoding, combined 
 Called when we have found a new LM80 and after read errors 
	
	  Reset all except Watchdog values and last conversion values
	  This sets fan-divs to 2, among others. This makes most other
	  initializations unnecessary
 Set 11-bit temperature resolution 
 Start monitoring 
  Sysfs stuff
  Note: we save and restore the fan minimum here, because its value is
  determined in part by the fan divisor.  This follows the principle of
  least surprise; the user doesn't expect the fan minimum to change just
  because the divisor changed.
 Save fan_min 
 Restore fan_min 
  Real code
 Return 0 if detection is successful, -ENODEV otherwise 
 First check for unused bits, common to both chip types 
	
	  The LM96080 has manufacturer and steppingdie rev registers so we
	  can just check that. The LM80 does not have such registers so we
	  have to use a more expensive trick.
 Check more unused bits for confirmation 
 Check 6-bit addressing 
 Initialize the LM80 chip 
 A few vars need to be filled upon startup 
  Driver data (common to all clients)
 SPDX-License-Identifier: GPL-2.0
  Hwmon client for disk and solid state drives with temperature sensors
  Copyright (C) 2019 Zodiac Inflight Innovations
  With input from:
     Hwmon client for S.M.A.R.T. hard disk drives with temperature sensors.
     (C) 2018 Linus Walleij
     hwmon: Driver for SCSIATA temperature sensors
     by Constantin Baranov <const@mimas.ru>, submitted September 2009
  This drive supports reporting the temperature of SATA drives. It can be
  easily extended to report the temperature of SCSI drives.
  The primary means to read drive temperatures and temperature limits
  for ATA drives is the SCT Command Transport feature set as specified in
  ATA8-ACS.
  It can be used to read the current drive temperature, temperature limits,
  and historic minimum and maximum temperatures. The SCT Command Transport
  feature set is documented in "AT Attachment 8 - ATAATAPI Command Set
  (ATA8-ACS)".
  If the SCT Command Transport feature set is not available, drive temperatures
  may be readable through SMART attributes. Since SMART attributes are not well
  defined, this method is only used as fallback mechanism.
  There are three SMART attributes which may report drive temperatures.
  Those are defined as follows (from
  http:www.cropel.comlibrarysmart-attribute-list.aspx).
  190	Temperature	Temperature, monitored by a sensor somewhere inside
 			the drive. Raw value typicaly holds the actual
 			temperature (hexadecimal) in its rightmost two digits.
  194	Temperature	Temperature, monitored by a sensor somewhere inside
 			the drive. Raw value typicaly holds the actual
 			temperature (hexadecimal) in its rightmost two digits.
  231	Temperature	Temperature, monitored by a sensor somewhere inside
 			the drive. Raw value typicaly holds the actual
 			temperature (hexadecimal) in its rightmost two digits.
  Wikipedia defines attributes a bit differently.
  190	Temperature	Value is equal to (100-temp. °C), allowing manufacturer
 	Difference or	to set a minimum threshold which corresponds to a
 	Airflow		maximum temperature. This also follows the convention of
 	Temperature	100 being a best-case value and lower values being
 			undesirable. However, some older drives may instead
 			report raw Temperature (identical to 0xC2) or
 			Temperature minus 50 here.
  194	Temperature or	Indicates the device temperature, if the appropriate
 	Temperature	sensor is fitted. Lowest byte of the raw value contains
 	Celsius		the exact temperature value (Celsius degrees).
  231	Life Left	Indicates the approximate SSD life left, in terms of
 	(SSDs) or	programerase cycles or available reserved blocks.
 	Temperature	A normalized value of 100 represents a new drive, with
 			a threshold value at 10 indicating a need for
 			replacement. A value of 0 may mean that the drive is
 			operating in read-only mode to allow data recovery.
 			Previously (pre-2010) occasionally used for Drive
 			Temperature (more typically reported at 0xC2).
  Common denominator is that the first raw byte reports the temperature
  in degrees C on almost all drives. Some drives may report a fractional
  temperature in the second raw byte.
  Known exceptions (from libatasmart):
  - SAMSUNG SV0412H and SAMSUNG SV1204H) report the temperature in 10th
    degrees C in the first two raw bytes.
  - A few Maxtor drives report an unknown or bad value in attribute 194.
  - Certain Apple SSD drives report an unknown value in attribute 190.
    Only certain firmware versions are affected.
  Those exceptions affect older ATA drives and are currently ignored.
  Also, the second raw byte (possibly reporting the fractional temperature)
  is currently ignored.
  Many drives also report temperature limits in additional SMART data raw
  bytes. The format of those is not well defined and varies widely.
  The driver does not currently attempt to report those limits.
  According to data in smartmontools, attribute 231 is rarely used to report
  drive temperatures. At the same time, several drives report SSD life left
  in attribute 231, but do not support temperature sensors. For this reason,
  attribute 231 is currently ignored.
  Following above definitions, temperatures are reported as follows.
    If SCT Command Transport is supported, it is used to read the
    temperature and, if available, temperature limits.
  - Otherwise, if SMART attribute 194 is supported, it is used to read
    the temperature.
  - Otherwise, if SMART attribute 190 is supported, it is used to read
    the temperature.
 list of instantiated devices 
 protect data buffer accesses 
 SCSI device 
 instantiating device 
 hardware monitoring device 
 local buffer 
 lowest temp in SCT status 
 highest temp in SCT status 
 have min temp 
 have max temp 
 have lower critical limit 
 have critical limit 
 min temp 
 max temp 
 lower critical limit 
 critical limit 
 log byte offsets 
 PIO Data-out 
		
		  No off.line or cc, write to dev, block count in sector count
		  field.
 PIO Data-in 
		
		  No off.line or cc, read from dev, block count in sector count
		  field.
 1 sector 
 Checksum the read value table 
  These drives will have WRITE FPDMA QUEUED command timeouts and sometimes just
  freeze until power-cycled under heavy write loads when their temperature is
  getting polled in SCT mode. The SMART mode seems to be fine, though.
  While only the 3 TB model (DT01ACA3) was actually caught exhibiting the
  problem let's play safe here to avoid data corruption and ban the whole
  DT01ACAx family.
  The models from this array are prefix-matched.
	
	  The "model" field contains just the raw SCSI INQUIRY response
	  "product identification" field, which has a width of 16 bytes.
	  This field is space-filled, but is NOT NULL-terminated.
 SCSI-ATA Translation present? 
	
	  Verify that ATA IDENTIFY DEVICE data is included in ATA Information
	  VPD and that the drive implements the SATA protocol.
 bail out if this is not a SATA device 
 Request and read temperature history table 
 data table command 
 read table 
 temperature history table 
	
	  Temperature limits per AT Attachment 8 -
	  ATAATAPI Command Set (ATA8-ACS)
 Bail out immediately if there is no inquiry data 
 Disk device? 
  The device argument points to sdev->sdev_dev. Its parent is
  sdev->sdev_gendev, which we can use to get the scsi_device pointer.
 SPDX-License-Identifier: GPL-2.0-only
  Driver for Linear Technology LTC4215 I2C Hot Swap Controller
  Copyright (C) 2009 Ira W. Snyder <iws@ovro.caltech.edu>
  Datasheet:
  http:www.linear.compcdownloadDocument.do?navId=H0,C1,C1003,C1006,C1163,P17572,D12697
 Here are names of the chip's registers (a.k.a. commands) 
 rw 
 rw 
 ro 
 rw 
 rw 
 rw 
 rw 
 in jiffies 
 Registers 
 The chip's AD updates 10 times per second 
 Read all registers 
 Return the voltage from the given register in millivolts 
 151 uV per increment 
 60.5 mV per increment 
		
		  The ADIN input is divided by 12.5, and has 4.82 mV
		  per increment, so we have the additional multiply
 If we get here, the developer messed up 
 Return the current from the sense resistor in mA 
	
	  The strange looking conversions that follow are fixed-point
	  math, since we cannot do floating point in the kernel.
	 
	  Step 1: convert sense register to microVolts
	  Step 2: convert voltage to milliAmperes
	 
	  If you play around with the V=IR equation, you come up with
	  the following: X uV  Y mOhm == Z mA
	 
	  With the resistors that are fractions of a milliOhm, we multiply
	  the voltage and resistance by 10, to shift the decimal point.
	  Now we can use the normal division operator again.
 Calculate voltage in microVolts (151 uV per increment) 
 Calculate current in milliAmperes (4 milliOhm sense resistor) 
 current in mA  voltage in mV == power in uW 
  These macros are used below in constructing device attribute objects
  for use with sysfs_create_group() to make a sysfs device file
  for each register.
 Construct a sensor_device_attribute structure for each register 
 Current 
 Power (virtual) 
 Input Voltage 
 Output Voltage 
  Finally, construct an array of pointers to members of the above objects,
  as required for sysfs_create_group()
 Initialize the LTC4215 chip 
 This is the driver that will be inserted 
 SPDX-License-Identifier: GPL-2.0-or-later
  Hardware monitoring driver for Maxim MAX6620
  Originally from L. Grunenberg.
  (C) 2012 by L. Grunenberg <contact@lgrunenberg.de>
  Copyright (c) 2021 Dell Inc. or its subsidiaries. All Rights Reserved.
  based on code written by :
  2007 by Hans J. Koch <hjk@hansjkoch.de>
  John Morris <john.morris@spirentcom.com>
  Copyright (c) 2003 Spirent Communications
  and Claus Gindhart <claus.gindhart@kontron.com>
  This module has only been tested with the MAX6620 chip.
  The datasheet was last seen at:
         http:pdfserv.maxim-ic.comendsMAX6620.pdf
  MAX 6620 registers
  Config register bits
  Failure status register bits
 Clock frequency in Hz 
 Tachometer pulses per revolution 
 Minimum and maximum values of the FAN-RPM 
  Client data (each client gets its own)
 false until following fields are valid 
 in jiffies 
 register values 
		
		  Alarms are cleared on read in case the condition that
		  caused the alarm is removed. Keep the value latched here
		  for providing the register through different alarm files.
 Setting TACH count to re-enable fan fault detection 
 Setting TACH count re-enables fan fault detection 
	
	  Set bit 4, disable other fans from going full speed on a fail
	  failure.
 Enable RPM mode 
 2 counts (001) and Rate change 100 (0.125 secs) 
 SPDX-License-Identifier: GPL-2.0-or-later
  nct7802 - Driver for Nuvoton NCT7802Y
  Copyright (C) 2014  Guenter Roeck <linux@roeck-us.net>
 7.2.32 Mode Selection Register 
  Resistance temperature detector (RTD) modes according to 7.2.32 Mode
  Selection Register
  Bit offset for sensors modes in REG_MODE.
  Valid for index 0..2, indicating RTD1..3.
  Data structures and manipulation thereof
 for multi-byte read and write operations 
 RD3 
 11 bit data 
 convert fan count to rpm 
 maximum value, assume fan is stopped 
 convert fan count to rpm 
 maximum value, assume no limit 
 voltage 
 limit 
	
	  The SMI Voltage status register is the only register giving a status
	  for voltages. A bit is set for each input crossing a threshold, in
	  both direction, but the "inside" or "outside" limits info is not
	  available. Also this register is cleared on read.
	  Note: this is not explicitly spelled out in the datasheet, but
	  from experiment.
	  To deal with this we use a status cache with one validity bit and
	  one status bit for each input. Validity is cleared at startup and
	  each time the register reports a change, and the status is processed
	  by software based on current input value and limits.
 SMI Voltage status 
 invalidate cached status for all inputs crossing a threshold 
 if cached status for requested input is invalid, update it 
 10 
 20 
 30 
 38 
 46 
 RD1 
 RD2 
 RD3 
 local 
 PECI 0 
 PECI 1 
 5 
 6 
 11 
 16 
 VCC, VCORE 
 VSEN1 
 VSEN2 
 VSEN3 
 7.2.89 Fan Control Output Type 
 7.2.91... Fan Control Output Value 
 7.2.95... Temperature to Fan mapping Relationships Register 
 4 attributes per fan 
 7.2.115... 0x80-0x83, 0x84 Temperature (X-axis) transition 
 7.2.120... 0x85-0x88 PWM (Y-axis) transition 
 7.2.124 Table 2 X-axis Transition Point 1 Register 
 7.2.129 Table 2 Y-axis Transition Point 1 Register 
 7.2.133 Table 3 X-axis Transition Point 1 Register 
 7.2.138 Table 3 Y-axis Transition Point 1 Register 
	
	  Chip identification registers are only available in bank 0,
	  so only attempt chip detection if bank 0 is selected
 Also validate lower bits of voltage and temperature registers 
 At this point we have reg >= 1 && reg <= 3 
 RTD3 only supports thermistor mode 
 Enable local temperature sensor by default 
 Enable ADC 
 Enable Vcore and VCC voltage monitoring 
 SPDX-License-Identifier: GPL-2.0-only
  Driver for Texas Instruments INA219, INA226 power monitor chips
  INA219:
  Zero Drift Bi-Directional CurrentPower Monitor with I2C Interface
  Datasheet: https:www.ti.comproductina219
  INA220:
  Bi-Directional CurrentPower Monitor with I2C Interface
  Datasheet: https:www.ti.comproductina220
  INA226:
  Bi-Directional CurrentPower Monitor with I2C Interface
  Datasheet: https:www.ti.comproductina226
  INA230:
  Bi-directional CurrentPower Monitor with I2C Interface
  Datasheet: https:www.ti.comproductina230
  Copyright (C) 2012 Lothar Felten <lothar.felten@gmail.com>
  Thanks to Jan Volkering
 common register definitions 
 readonly 
 readonly 
 readonly 
 readonly 
 INA226 register definitions 
 register count 
 settings - depend on use case 
 PGA=8 
 averages=16 
 worst case is 68.10 ms (~14.6Hz, ina219) 
 worst case delay in ms 
 bit mask for reading the averaging setting in the configuration register 
 bit number of alert functions in MaskEnable Register 
 bit mask for alert config bits of MaskEnable Register 
 common attrs, ina226 attrs and NULL 
  Both bus voltage and shunt voltage conversion times for ina226 are set
  to 0b0100 on POR, which translates to 2200 microseconds in total.
 uV 
  Available averaging rates for ina226. The indices correspond with
  the bit values expected by the chip (according to the ina226 datasheet,
  table 3 AVG bit settings, found at
  https:www.ti.comlitdssymlinkina226.pdf.
	
	  Multiply the total conversion time by the number of averages.
	  Return the result in milliseconds.
  Return the new, shifted AVG field value of CONFIG register,
  to use with regmap_update_bits
  Calibration register is set to the best value, which eliminates
  truncation errors on calculating current register in hardware.
  According to datasheet (eq. 3) the best values are 2048 for
  ina226 and 4096 for ina219. They are hardcoded as calibration_value.
  Initialize the configuration and calibration registers.
		
		  If the current value in the calibration register is 0, the
		  power and current registers will also remain at 0. In case
		  the chip has been reset let's check the calibration
		  register and reinitialize if needed.
		  We do that extra read of the calibration register if there
		  is some hint of a chip reset.
				
				  Let's make sure the power and current
				  registers have been updated before trying
				  again.
	
	  If we're here then although all write operations succeeded, the
	  chip still returns 0 in the calibration register. Nothing more we
	  can do here.
 signed register 
 signed register, result in mA 
 programmer goofed 
 programmer goofed 
  Turns alert limit values into register values.
  Opposite of the formula in ina2xx_get_value().
 programmer goofed 
	
	  Clear all alerts first to avoid accidentally triggering ALERT pin
	  due to register write sequence. Then, only enable the alert
	  if the value is non-zero.
  In order to keep calibration register value fixed, the product
  of current_lsb and shunt_resistor should also be fixed and equal
  to shunt_voltage_lsb = 1  shunt_div multiplied by 10^9 in order
  to keep the scale.
 shunt voltage 
 shunt voltage overunder voltage alert setting and alarm 
 bus voltage 
 bus voltage overunder voltage alert setting and alarm 
 calculated current 
 calculated power 
 over-limit power alert setting and alarm 
 shunt resistance 
 update interval (ina226 only) 
 pointers to created device attributes 
 set the device type 
 SPDX-License-Identifier: GPL-2.0-only
  An hwmon driver for the Analog Devices AD74161718
  Copyright (C) 2006-07 Tower Technologies
  Author: Alessandro Zummo <a.zummo@towertech.it>
  Based on lm75.c
  Copyright (C) 1998-99 Frodo Looijaard <frodol@dds.nl>
 AD7418 registers 
 number of ADC channels 
 In jiffies 
 Register values 
 read config register and clear channel bits 
 restore old configuration value 
 Initialize the AD7418 chip 
 SPDX-License-Identifier: GPL-2.0-only
  Driver for SMM665 Power Controller  Monitor
  Copyright (C) 2010 Ericsson AB.
  This driver should also work for SMM465, SMM764, and SMM766, but is untested
  for those chips. Only monitoring functionality is implemented.
  Datasheets:
  http:www.summitmicro.comprod_selectsummarySMM665SMM665B_2089_20.pdf
  http:www.summitmicro.comprod_selectsummarySMM766BSMM766B_2122.pdf
 Internal reference voltage (VREF, x 1000 
 module parameters 
  ADC channel addresses
  Command registers
  Configuration registers and register groups
 First limit register 
  Limit register bit masks
  Fault register bit definitions
  Values are merged from status registers 12,
  with status register 1 providing the upper 8 bits.
  I2C Register addresses
  The configuration register needs to be the configured base register.
  The commandstatus register address is derived from it.
   Equations given by chip manufacturer to calculate voltagetemperature values
   vref = Reference voltage on VREF_ADC pin (module parameter)
   adc  = 10bit ADC value read back from registers
 Voltage A-F and VDD 
 Voltage 12VIN 
 Voltage AIN1, AIN2 
 Temp Sensor 
  Chip dependent ADC conversion time, in uS
 ADC conversion time 
 in jiffies 
 adc values (raw) 
 fault status 
 The following values are in mV 
  smm665_read16()
  Read 16 bit value from <reg>, <reg+1>. Upper 8 bits are in <reg>.
  Read adc value.
	
	  Algorithm for reading ADC, per SMM665 datasheet
	 
	   {[S][addr][W][Ack]} {[offset][Ack]} {[S][addr][R][Nack]}
	  [wait conversion time]
	   {[S][addr][R][Ack]} {[datahi][Ack]} {[datalo][Ack][P]}
	 
	  To implement the first part of this exchange,
	  do a full read transaction and expect a failureNack.
	  This sets up the address pointer on the SMM665
	  and starts the ADC conversion.
	  Then do a two-byte read transaction.
		
		  We expect ENXIO to reflect NACK
		  (per Documentationi2cfault-codes.rst).
		  Everything else is an error.
	
	  Now read two bytes.
	 
	  Neither i2c_smbus_read_byte() nor
	  i2c_smbus_read_block_data() worked here,
	  so use i2c_smbus_read_word_swapped() instead.
	  We could also try to use i2c_master_recv(),
	  but that is not always supported.
	
	  Validateverify readback adc channel (in bit 11..14).
		
		  read status registers
 Read adc registers 
 Return converted value from given adc 
 If we get here, the developer messed up 
  These macros are used below in constructing device attribute objects
  for use with sysfs_create_group() to make a sysfs device file
  for each register.
 Construct a sensor_device_attribute structure for each register 
 Input voltages 
 Input voltages min 
 Input voltages max 
 Input voltages lcrit 
 Input voltages crit 
 critical alarms 
 Temperature 
  Finally, construct an array of pointers to members of the above objects,
  as required for sysfs_create_group()
	
	  Read limits.
	 
	  Limit registers start with register SMM665_LIMIT_BASE.
	  Each channel uses 8 registers, providing four limit values
	  per channel. Each limit value requires two registers, with the
	  high byte in the first register and the low byte in the second
	  register. The first two limits are under limit values, followed
	  by two over limit values.
	 
	  Limit register order matches the ADC register order, so we use
	  ADC register defines throughout the code to index limit registers.
	 
	  We save the first retrieved value both as "critical" and "alarm"
	  value. The second value overwrites either the critical or the
	  alarm value, depending on its configuration. This ensures that both
	  critical and alarm values are initialized, even if both registers are
	  configured as critical or non-critical.
 This is the driver that will be inserted 
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) 2020 MaxLinear, Inc.
  This driver is a hardware monitoring driver for PVT controller
  (MR75203) which is used to configure & control Moortec embedded
  analog IP to enable multiple embedded temperature sensor(TS),
  voltage monitor(VM) & process detector(PD) modules.
 PVT Common register 
 Macro Common Register 
 TS & PD Individual Macro Register 
 VM Individual Macro Register 
 SDA Slave Register 
		
		  Convert the register value to
		  degrees centigrade temperature
 Convert the N bitstream count into voltage 
	
	  The system supports 'clk_sys' to 'clk_ip' frequency ratios
	  from 2:1 to 512:1
		
		  Incase intel,vm-map property is not defined, we assume
		  incremental channel numbers.
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) Linumiz 2021
  sht4x.c - Linux hwmon driver for SHT4x Temperature and Humidity sensor
  Author: Navin Sankar Velliangiri <navin@linumiz.com>
  Poll intervals (in milliseconds)
  I2C command delays (in microseconds)
  Command Bytes
  struct sht4x_data - All the data required to operate an SHT4X chip
  @client: the i2c client associated with the SHT4X
  @lock: a mutex that is used to prevent parallel access to the i2c client
  @update_interval: the minimum poll interval
  @last_updated: the previous time that the SHT4X was polled
  @temperature: the latest temperature value received from the SHT4X
  @humidity: the latest humidity value received from the SHT4X
 atomic read data updates 
 validity of fields below 
 in milli-seconds 
 in jiffies 
  sht4x_read_values() - read and parse the raw data from the SHT4X
  @sht4x_data: the struct sht4x_data to use for the lock
  Return: 0 if successful, -ERRNO if not
 sht4x_interval_read() - read the minimum poll interval in milliseconds 
 sht4x_temperature1_read() - read the temperature in millidegrees 
 sht4x_humidity1_read() - read a relative humidity in millipercent 
	
	  we require full i2c support since the sht4x uses multi-byte read and
	  writes as well as multi-byte commands which are not supported by
	  the smbus protocol
 SPDX-License-Identifier: GPL-2.0-or-later
  fam15h_power.c - AMD Family 15h processor power monitoring
  Copyright (c) 2011-2016 Advanced Micro Devices, Inc.
  Author: Andreas Herrmann <herrmann.der.user@googlemail.com>
 D18F3 
 D18F4 
 D18F5 
 set maximum interval as 1 second 
 maximum accumulated power of a compute unit 
 accumulated power of the compute units 
 performance timestamp counter 
 onlineoffline status of current compute unit 
	
	  On Carrizo and later platforms, TdpRunAvgAccCap bit field
	  is extended to 4:31 from 4:25.
	
	  On Carrizo and later platforms, ApmTdpLimit bit field
	  is extended to 16:31 from 16:28.
	
	  Convert to microWatt
	 
	  power is in Watt provided as fixed point integer with
	  scaling factor 1(2^16).  For conversion we use
	  (10^6)(2^16) = 15625(2^10)
	
	  With the new x86 topology modelling, cpu core id actually
	  is compute unit id.
  This function is only able to be called when CPUID
  Fn8000_0007:EDX[12] is set.
	
	  Choose the first online core of each compute unit, and then
	  read their MSR value of power and ptsc in a single IPI,
	  because the MSR value of CPU core represent the compute
	  unit's.
 get any CPU on this compute unit 
	
	  With the new x86 topology modelling, x86_max_cores is the
	  compute unit number.
 check if current compute unit is online 
 the unit is microWatt 
 the interval value should be greater than 0 
 check if processor supports accumulated power 
  Newer BKDG versions have an updated recommendation on how to properly
  initialize the running average range (was: 0xE, now: 0x9). This avoids
  counter saturations resulting in bogus power readings.
  We correct this value ourselves to cope with older BIOSes.
	
	  let this quirk apply only to the current version of the
	  northbridge, since future versions may change the behavior
 result not allowed to be >= 256W 
 convert to microWatt 
 CPUID Fn8000_0007:EDX[12] indicates to support accumulated power 
	
	  determine the ratio of the compute unit power accumulator
	  sample period to the PTSC counter period by executing CPUID
	  Fn8000_0007:ECX
	
	  Milliseconds are a reasonable interval for the measurement.
	  But it shouldn't set too long here, because several seconds
	  would cause the read function to hang. So set default
	  interval as 10 ms.
	
	  though we ignore every other northbridge, we still have to
	  do the tweaking on _each_ node in MCM processors as the counters
	  are working hand-in-hand
 SPDX-License-Identifier: GPL-2.0-only
  Driver for the Texas Instruments  Burr Brown INA209
  Bidirectional CurrentPower Monitor
  Copyright (C) 2012 Guenter Roeck <linux@roeck-us.net>
  Derived from Ira W. Snyder's original driver submission
 	Copyright (C) 2008 Paul Hays <Paul.Hays@cattail.ca>
 	Copyright (C) 2008-2009 Ira W. Snyder <iws@ovro.caltech.edu>
  Aligned with ina2xx driver
 	Copyright (C) 2012 Lothar Felten <l-felten@ti.com>
 	Thanks to Jan Volkering
  Datasheet:
  https:www.ti.comlitgpnina209
 register definitions 
 PGA=8, full range 
 uOhm 
 in jiffies 
 All chip registers 
 Original configuration 
 Original calibration 
  Read a value from a device register and convert it to the
  appropriate sysfs units
 LSB=10 uV. Convert to mV. 
 LSB=4 mV, last 3 bits unused 
 LSB=1 mV, in the upper 8 bits 
 LSB=1 mV, in the upper 8 bits 
 LSB=20 mW. Convert to uW 
 LSB=1 mA (selected). Is in mA 
 programmer goofed 
  Take a value and convert it to register format, clamping the value
  to the appropriate range.
 Limit to +- 320 mV, 10 uV LSB 
		
		  Limit to 0-32000 mV, 4 mV LSB
		 
		  The last three bits aren't part of the value, but we'll
		  preserve them in their original state.
		
		  Limit to -255-0 mV, 1 mV LSB
		  Convert the value to a positive value for the register
		 
		  The value lives in the top 8 bits only, be careful
		  and keep original value of other bits.
		
		  Limit to 0-255 mV, 1 mV LSB
		 
		  The value lives in the top 8 bits only, be careful
		  and keep original value of other bits.
 20 mW LSB 
 Other registers are read-only, return access error 
  History is reset by writing 1 into bit 0 of the respective peak register.
  Since more than one peak register may be affected by the scope of a
  reset_history attribute write, use a bit mask in attr->index to identify
  which registers are affected.
	
	  All alarms are in the INA209_STATUS register. To avoid a long
	  switch statement, the mask is passed in attr->index
 Shunt voltage, history, limits, alarms 
 Bus voltage, history, limits, alarms 
 Power 
 Current 
  Finally, construct an array of pointers to members of the above objects,
  as required for sysfs_create_group()
 Restore initial configuration 
	
	  Calibrate current LSB to 1mA. Shunt is in uOhms.
	  See equation 13 in datasheet.
 Clear status register 
 This is the driver that will be inserted 
 SPDX-License-Identifier: GPL-2.0-or-later
  Driver for Texas Instruments  National Semiconductor LM95234
  Copyright (c) 2013, 2014 Guenter Roeck <linux@roeck-us.net>
  Derived from lm95241.c
  Copyright (C) 2008, 2010 Davide Rizzo <elpa.rizzo@gmail.com>
 LM95234 registers 
 Remote only 
 Remote only 
 Remote channel 1,2 
 Client data (each client gets its own) 
 in jiffies 
 false until following fields are valid 
 registers values 
 temperature (signed) 
 faultalarm status 
 critical temperature limit 
 high temperature limit 
 remote temperature offset 
 common hysteresis 
 temperature sensor type 
	
	  Read signed temperature if unsigned temperature is 0,
	  or if this is the local sensor.
 Fill value cache. Must be called with update lock held. 
 Result can be negative, so be careful with unsigned operands 
 Result can be negative, so be careful with unsigned operands 
 Accuracy is 12 degrees C 
 start conversion if necessary 
 If diode type status reports an error, try to fix it 
 Initialize the LM95234 chip 
 Driver data (common to all clients) 
 SPDX-License-Identifier: GPL-2.0+
  nzxt-kraken2.c - hwmon driver for NZXT Kraken X42X52X62X72 coolers
  The device asynchronously sends HID reports (with id 0x04) twice a second to
  communicate current fan speed, pump speed and coolant temperature.  The
  device does not respond to Get_Report requests for this status report.
  Copyright 2019-2021  Jonas Malaco <jonas@protocubo.io>
 seconds; equivalent to 4 missed updates 
 jiffies 
 unreachable 
 unreachable 
	
	  The fractional byte of the coolant temperature has been observed to
	  be in the interval [1,9], but some of these steps are also
	  consistently skipped for certain integer parts.
	 
	  For the lack of a better idea, assume that the resolution is 0.1°C,
	  and that the missing steps are artifacts of how the firmware
	  processes the raw sensor data.
	
	  Initialize ->updated to STATUS_VALIDITY seconds in the past, making
	  the initial empty data invalid for kraken2_read without the need for
	  a special case there.
	
	  Enable hidraw so existing user-space tools can continue to work.
 NZXT Kraken X42X52X62X72 
  When compiled into the kernel, initialize after the hid bus.
 SPDX-License-Identifier: GPL-2.0-or-later
  lm87.c
  Copyright (C) 2000       Frodo Looijaard <frodol@dds.nl>
                           Philip Edelbrock <phil@netroedge.com>
                           Stephen Rousset <stephen.rousset@rocketlogix.com>
                           Dan Eaton <dan.eaton@rocketlogix.com>
  Copyright (C) 2004-2008  Jean Delvare <jdelvare@suse.de>
  Original port to Linux 2.6 by Jeff Oliver.
  The LM87 is a sensor chip made by National Semiconductor. It monitors up
  to 8 voltages (including its own power source), up to three temperatures
  (its own plus up to two external ones) and up to two fans. The default
  configuration is 6 voltages, two temperatures and two fans (see below).
  Voltages are scaled internally with ratios such that the nominal value of
  each voltage correspond to a register value of 192 (which means a
  resolution of about 0.5% of the nominal value). Temperature values are
  reported with a 1 deg resolution and a 3-4 deg accuracy. Complete
  datasheet can be obtained from National's website at:
    http:www.national.compfLMLM87.html
  Some functions share pins, so not all functions are available at the same
  time. Which are depends on the hardware setup. This driver normally
  assumes that firmware configured the chip correctly. Where this is not
  the case, platform code must set the I2C client's platform_data to point
  to a u8 value to be written to the channel register.
  For reference, here is the list of exclusive functions:
   - in0+in5 (default) or temp3
   - fan1 (default) or in6
   - fan2 (default) or in7
   - VID lines (default) or IRQ lines (not handled by this driver)
  The LM87 additionally features an analog output, supposedly usable to
  control the speed of a fan. All new chips use pulse width modulation
  instead. The LM87 is the only hardware monitoring chipset I know of
  which uses amplitude modulation. Be careful when using this feature.
  This driver also supports the ADM1024, a sensor chip made by Analog
  Devices. That chip is fully compatible with the LM87. Complete
  datasheet can be obtained from Analog's website at:
    https:www.analog.comenprod0,2877,ADM1024,00.html
  Addresses to scan
  LM87 has three possible addresses: 0x2c, 0x2d and 0x2e.
  The LM87 registers
 nr in 0..5 
 nr in 0..1 
 nr in 0..1 
  Conversions and various macros
  The LM87 uses signed 8-bit values for temperatures.
 analog out is 9.80mVLSB 
 nr in 0..1 
  Client data (each client gets its own)
 false until following fields are valid 
 In jiffies 
 register value 
 original register value 
 register value 
 register value 
 register value 
 register value 
 register value 
 register value 
 min of two register values 
 min of two register values 
 register value 
 register value 
 register value, shifted right 
 register value 
 register values, combined 
 register values, combined 
  Sysfs stuff
  Note: we save and restore the fan minimum here, because its value is
  determined in part by the fan clock divider.  This follows the principle
  of least surprise; the user doesn't expect the fan minimum to change just
  because the divider changed.
  Real code
 Return 0 if detection is successful, -ENODEV otherwise 
 Now, we do the remaining detection. 
 National Semiconductor 
 Analog Devices 
 Limits are left uninitialized after power-up 
 Make sure Start is set and INT#_Clear is clear 
 Initialize the LM87 chip 
	
	  Construct the list of attributes, the list depends on the
	  configuration of the chip
  Driver data (common to all clients)
 SPDX-License-Identifier: GPL-2.0-or-later
  nct6683 - Driver for the hardware monitoring functionality of
 	     Nuvoton NCT6683DNCT6686DNCT6687D eSIO
  Copyright (C) 2013  Guenter Roeck <linux@roeck-us.net>
  Derived from nct6775 driver
  Copyright (C) 2012, 2013  Guenter Roeck <linux@roeck-us.net>
  Supports the following chips:
  Chip        #vin    #fan    #pwm    #temp  chip ID
  nct6683d     21(1)   16      8       32(1) 0xc730
  nct6686d     21(1)   16      8       32(1) 0xd440
  nct6687d     21(1)   16      8       32(1) 0xd590
  Notes:
 	(1) Total number of vin and temp inputs is 32.
  Super-IO constants and functions
 Logical device select 
 Device ID (2 bytes) 
 Logical device enable 
 Logical device address (2 bytes) 
 for later 
	
	  Try to reserve <ioreg> and <ioreg + 1> for exclusive access.
  ISA constants
 Use EC port 1 
 Common and NCT6683 specific data 
 8 bit 
 8 bit 
 8 bit 
 8 bit 
 16 bit 
 disabled 
 0x10 
 0x20 
 0x30 
 0x40 
 0x50 
 0x60 voltage sensors 
 ------------------------------------------------------- 
 IO base of EC space 
 SIO register 
 number of temperature attributes 
 number of voltage attributes 
 used to protect sensor updates 
 true if following fields are valid 
 In jiffies 
 Voltage attribute values 
 [0]=in, [1]=in_max, [2]=in_min 
 Temperature attribute values 
	s8 temp[4][NCT6683_NUM_REG_MON]; [0]=min, [1]=max, [2]=hyst,
					  [3]=crit
 Fan attribute values 
 some fan inputs can be disabled 
 Remember extra register values over suspendresume 
 true if both index and nr are used 
 LSB is 16 mV, except for the following sources, where it is 32 mV 
 unlock 
 unlock 
 max 
 crit 
 min 
 max 
 hyst 
 crit 
 Measured voltages and limits 
 Measured temperatures and limits 
 Measured fan speeds and limits 
  Sysfs callback functions
 attribute 
	
	  Voltage limits exist for Intel boards,
	  but register location and encoding is unknown
 fan index 
 attribute index 
	
	  Intel may have minimum fan speed limits,
	  but register location and encoding are unknown.
  nct6683_fan_is_visible uses the index into the following array
  to determine if attributes should be created or not.
  Any change in order or content must be matched.
  Temperature sensor type is determined by temperature source
  and can not be modified.
  0x02..0x07: Thermal diode
  0x08..0x18: Thermistor
  0x20..0x2b: Intel PECI
  0x42..0x49: AMD TSI
  Others are unspecified (not visible)
 thermal diode 
 thermistor 
 PECI 
 temp index 
 attribute index 
	
	  Intel does not have low temperature limits or temperature hysteresis
	  registers, or at least register location and encoding is unknown.
 type 
  nct6683_temp_is_visible uses the index into the following array
  to determine if attributes should be created or not.
  Any change in order or content must be matched.
 2 
 3 
 4 
 5 
 6 
 pwm index 
 Only update pwm values for Mitac boards 
 Case open detection 
	
	  Use CR registers to clear caseopen status.
	  Caseopen is activ low, clear by writing 1 into the register.
 Force cache refresh 
 Get the monitoring functions started 
 Start hardware monitoring if needed 
  There are a total of 24 fan inputs. Each can be configured as input
  or as output. A maximum of 16 inputs and 8 outputs is configurable.
  Translation from monitoring register to temperature and voltage attributes
  ==========================================================================
  There are a total of 32 monitoring registers. Each can be assigned to either
  a temperature or voltage monitoring source.
  NCT6683_REG_MON_CFG(x) defines assignment for each monitoring source.
  Temperature and voltage attribute mapping is determined by walking through
  the NCT6683_REG_MON_CFG registers. If the assigned source is
  a temperature, temp_index[n] is set to the monitor register index, and
  temp_src[n] is set to the temperature source. If the assigned source is
  a voltage, the respective values are stored in in_index[] and in_src[],
  respectively.
 Ignore invalid assignments 
 Skip if disabled or reserved 
 By default only instantiate driver if the customer ID is known 
 Register sysfs hooks 
 Force re-reading all values 
 CONFIG_PM 
 We have a known chip, find the HWM IO address 
 Activate logical device if needed 
  when Super-IO functions move to a separate file, the Super-IO
  bus will manage the lifetime of the device and this module will only keep
  track of the nct6683 driver. But since we use platform_device_alloc(), we
  must keep track of the device
	
	  initialize sio_data->kind and sio_data->sioreg.
	 
	  when Super-IO functions move to a separate file, the Super-IO
	  driver will probe 0x2e and 0x4e and auto-detect the presence of a
	  nct6683 hardware monitor, and call probe()
 platform_device_add calls probe() 
 SPDX-License-Identifier: GPL-2.0-or-later
   pc87360.c - Part of lm_sensors, Linux kernel modules
               for hardware monitoring
   Copyright (C) 2004, 2007 Jean Delvare <jdelvare@suse.de>
   Copied from smsc47m1.c:
   Copyright (C) 2002 Mark D. Studebaker <mdsxyz123@yahoo.com>
   Supports the following chips:
   Chip        #vin    #fan    #pwm    #temp   devid
   PC87360     -       2       2       -       0xE1
   PC87363     -       2       2       -       0xE8
   PC87364     -       3       3       -       0xE4
   PC87365     11      3       3       2       0xE5
   PC87366     11      3       3       3-4     0xE9
   This driver assumes that no more than one chip is present, and one of
   the standard Super-IO addresses is used (0x2E0x2F or 0x4E0x4F).
  Super-IO registers and operations
 Register: Logical device select 
 Register: Device ID 
 Register: Device activation 
 Register: Base address 
 Logical device: fans 
 Logical device: voltages 
 Logical device: temperatures 
  Logical devices
  Fan registers and conversions
 nr has to be 0 or 1 (PC8736087363) or 2 (PC873648736587366) 
  Voltage registers and conversions
  Temperature registers and conversions
  Device data
 true if following fields are valid 
 In jiffies 
 Register value 
 Register value 
 Register value 
 Register value 
 Configuration register values, combined 
 1 mVbit 
 Register value 
 Register value 
 Register value 
 Register value 
 Register value 
 Register values, combined, masked 
 Configuration register value 
 Register value 
 Register value 
 Register value 
 Register value 
 Register value 
 Register value 
 Register value, masked 
  Functions declaration
  Driver data
  Sysfs stuff
 If it wouldn't fit, change clock divisor 
 Write new divider, preserve alarm bits 
 (temp & vin) channel status register alarm bits (pdf sec.11.5.12) 
 min limit crossed 
 max limit exceeded 
 temp crit exceeded (temp only) 
  show_in_minmax_alarm() reads data from the per-channel status
  register (sec 11.5.12), not the vin event status registers (sec
  11.5.2) that (legacy) show_in_alarm() resds (via data->in_alarms)
  the +11 term below reflects the fact that VLM units 11,12,13 are
  used in the chip to measure voltage across the thermistors
  show_therm_minmax_alarm() reads data from the per-channel voltage
  status register (sec 11.5.12)
  show_temp_minmax_alarm() reads data from the per-channel status
  register (sec 12.3.7), not the temp event status registers (sec
  12.3.2) that show_temp_alarm() reads (via data->temp_alarms)
 open diode 
  Device detection, registration and update
 logical device count 
 No superio_enter 
 Identify device 
 PC87360 
 PC87363 
 PC87364 
 PC87365 
 PC87366 
 Remember the device id 
 select logical device 
 Fans 
 Voltages 
 Are we using thermistors? 
 PC87366 
				
				  These registers are not logical-device
				  specific, just that we won't need them if
				  we don't use the VLM device
 Retrieve the fans configuration from Super-IO space 
	
	  Use the correct reference voltage
	  Unless both the VLM and the TMS logical devices agree to
	  use an external Vref, the internal one is used.
 Fan clock dividers may be needed before any data is read 
 PC87366 
 Register all-or-nothing sysfs groups 
 create device attr-files for varying sysfs groups 
  ldi is the logical device index
  bank is for voltages and temperatures only
 (temp & vin) channel conversion status register flags (pdf sec.11.5.12) 
 new data ready 
 enabled channel (temp or vin) 
 propagate to alarms-reg ?? (chk val!) 
 sample ready mask 
 OTS Output Enable 
 0x87 
 0xCF 
 Forcibly enable voltage channel 
	
	  We can't blindly trust the Super-IO space configuration bit,
	  most BIOS won't set it properly
 thermistors are temp[4-6], measured on vin[11-14] 
 Forcibly enable temperature channel 
				
				  The pin may already be used by thermal
				  diodes
 Forcibly enable thermistor channel 
 Chip config as documented by National Semi. 
			
			  We voluntarily omit the bank here, in case the
			  sequence itself matters. It shouldn't be a problem,
			  since nobody else is supposed to access the
			  device at that point.
 Increase clock divider if needed and possible 
 overflow flag 
 next to overflow 
 Decrease clock divider if possible 
 min "nails" divider 
 bad accuracy 
 Write new fan min if it changed 
 Fans 
 Change clock divider if needed 
 Clear bits and write new divider 
 Voltages 
 Clear bits 
 Temperatures 
 Clear bits 
 Arbitrarily pick one of the addresses 
 Sets global pdev as a side effect 
 SPDX-License-Identifier: GPL-2.0-or-later
  ADT7410ADT7420 digital temperature sensor driver
  Copyright 2012-2013 Analog Devices Inc.
    Author: Lars-Peter Clausen <lars@metafoo.de>
 SPDX-License-Identifier: GPL-2.0-or-later
 tmp421.c
  Copyright (C) 2009 Andre Prendel <andre.prendel@gmx.de>
  Preliminary support by:
  Melvin Rook, Raymond Ng
  Driver for the Texas Instruments TMP421 SMBus temperature sensor IC.
  Supported models: TMP421, TMP422, TMP423, TMP441, TMP442
 Addresses to scan 
 The TMP421 registers 
 Flags 
 Manufacturer  Device ID's 
 Mask out status bits 
		
		  Any of OPEN or PVLD bits indicate a hardware mulfunction
		  and the conversion result may be incorrect
 Set the conversion rate to 2 Hz 
 Start conversions (disable shutdown if necessary) 
 SPDX-License-Identifier: GPL-2.0-or-later
  f71805f.c - driver for the Fintek F71805FFG and F71872FFG Super-IO
              chips integrated hardware monitoring features
  Copyright (C) 2005-2006  Jean Delvare <jdelvare@suse.de>
  The F71805FFG is a LPC Super-IO chip made by Fintek. It integrates
  complete hardware monitoring features: voltage, fan and temperature
  sensors, and manual and automatic fan speed control.
  The F71872FFG is almost the same, with two more voltages monitored,
  and 6 VID inputs.
  The F71806FFG is essentially the same as the F71872FFG. It even has
  the same chip ID, so the driver can't differentiate between.
  Super-IO constants and functions
 Logical device select 
 Device ID (2 bytes) 
 Device revision 
 Fintek ID (2 bytes) 
 Multi Function Select 1 (F71872F) 
 Logical device enable 
 Logical device address (2 bytes) 
  ISA constants
  Registers
 in nr from 0 to 10 (8-bit values) 
 fan nr from 0 to 2 (12-bit values, two registers) 
 temp nr from 0 to 2 (8-bit values) 
 pwmfan pwmnr from 0 to 2, auto point apnr from 0 to 2 
 map Fintek numbers to our numbers as follows: 9->0, 5->1, 1->2 
 status nr from 0 to 2 
 individual register bits 
  Data structures and manipulation thereof
 true if following fields are valid 
 In jiffies 
 In jiffies 
 Register values 
 The 2 least significant bits are not used 
 in0 is downscaled by a factor 2 internally 
 The 4 most significant bits are not used 
	
	  If the low limit is set below what the chip can measure,
	  store the largest possible 12-bit value in the registers,
	  so that no alarm will ever trigger.
 The highest we can do 
 Use 48 MHz clock 
 The lowest we can do 
 Use 1 MHz clock 
  Device IO access
 Must be called with data->update_lock held, except during initialization 
 Must be called with data->update_lock held, except during initialization 
  It is important to read the MSB first, because doing so latches the
  value of the LSB, so we are sure both bytes belong to the same value.
  Must be called with data->update_lock held, except during initialization
 Must be called with data->update_lock held, except during initialization 
 Limit registers cache is refreshed after 60 seconds 
 Measurement registers cache is refreshed after 1 second 
  Sysfs interface
 MANUAL 
 Automatic mode, user can't set PWM value 
 Manual mode, user can set PWM value 
 3 is diode, 4 is thermistor 
  pwm (value) files are created read-only, write permission is
  then added or removed dynamically as needed
  We don't include pwm_freq files in the arrays above, because they must be
  created conditionally (only if pwm_mode is 1 == PWM)
 We also need an indexed access to pwmN files to toggle writability 
  Device registration and initialization
	
	  Fan monitoring can be disabled. If it is, we won't be polling
	  the register values, and won't create the related sysfs files.
		
		  Clear latch full bit, else "speed mode" fan speed control
		  doesn't work
 Some voltage inputs depend on chip model and configuration 
 in4 
 in8 
 Initialize the F71805F chip 
 Register sysfs interface files 
 in4 
 in8 
 in9 (F71872FFG only) 
 in9 (F71872FFG only) 
 If control mode is PWM, create pwm_freq file 
 If PWM is in manual mode, add write permission 
 Ignore 3 LSB 
 Sets global pdev as a side effect 
 SPDX-License-Identifier: GPL-2.0-or-later
  jc42.c - driver for Jedec JC42.4 compliant temperature sensors
  Copyright (c) 2010  Ericsson AB.
  Derived from lm77.c by Andras BALI <drewie@freemail.hu>.
  JC42.4 compliant temperature sensors are typically used on memory modules.
 Addresses to scan 
 JC42 registers. All registers are 16 bit. 
 NXP and Atmel, possibly others? 
 Status bits in temperature register 
 Configuration register defines 
 Capabilities 
 Manufacturer IDs 
 Analog Devices 
 Atmel 
 Atmel 
 Maxim 
 IDT 
 Microchip 
 NXP Semiconductors 
 ON Semiconductor 
 ST Microelectronics 
 Giantec 
 Giantec, 2nd mfg ID 
 SMBUS register 
 SMBus time-out, active low 
 Supported chips 
 Analog Devices 
 Atmel 
 Giantec 
 IDT 
 Also matches TSE2002 
 Maxim 
 Microchip 
 Also matches mcp9805 
 NXP 
 ON Semiconductor 
 Also matches CAT34TS02 
 ST Microelectronics 
 Each client has this additional data 
 protect register access 
 true if extended range supported 
 In jiffies 
 original configuration 
 current configuration 
 Temperatures 
 convert from 0.001 to 0.0625 resolution 
 convert from 0.0625 to 0.001 resolution 
		
		  JC42.4 compliant chips only support four hysteresis values.
		  Pick best choice and go from there.
 1.5 degrees C 
 3.0 degrees C 
 6.0 degrees C 
 Return 0 if detection is successful, -ENODEV otherwise 
		
		  Not all chips support this register, but from a
		  quick read of various datasheets no chip appears
		  incompatible with the below attempt to disable
		  the timeout. And the whole thing is opt-in...
 Restore original configuration except hysteresis 
 CONFIG_PM 
 SPDX-License-Identifier: GPL-2.0-only
  Driver for Linear Technology LTC4245 I2C Multiple Supply Hot Swap Controller
  Copyright (C) 2008 Ira W. Snyder <iws@ovro.caltech.edu>
  This driver is based on the ds1621 and ina209 drivers.
  Datasheet:
  http:www.linear.compcdownloadDocument.do?navId=H0,C1,C1003,C1006,C1140,P19392,D13517
 Here are names of the chip's registers (a.k.a. commands) 
 readonly 
 in jiffies 
 Control registers 
 Voltage registers 
 GPIO ADC registers 
  Update the readings from the GPIO pins. If the driver has been configured to
  sample all GPIO's as analog voltages, a round-robin sampling method is used.
  Otherwise, only the configured GPIO pin is sampled.
  LOCKING: must hold data->update_lock
 no extra gpio support, we're basically done 
	
	  If the last reading was too long ago, then we mark all old GPIO
	  readings as stale by setting them to -EAGAIN
	
	  Get the current GPIO pin
	 
	  The datasheet calls these GPIO[1-3], but we'll calculate the zero
	  based array index instead, and call them GPIO[0-2]. This is much
	  easier to think about.
 Read the GPIO voltage from the GPIOADC register 
 Find the next GPIO pin to read 
	
	  Calculate the correct setting for the GPIO register so it will
	  sample the next GPIO pin
 Update the GPIO register 
 Update saved data 
 Read control registers -- 0x00 to 0x07 
 Read voltage registers -- 0x10 to 0x1c 
 Update GPIO readings 
 Return the voltage from the given register in millivolts 
 If we get here, the developer messed up 
 Return the current in the given sense register in milliAmperes 
	
	  The strange looking conversions that follow are fixed-point
	  math, since we cannot do floating point in the kernel.
	 
	  Step 1: convert sense register to microVolts
	  Step 2: convert voltage to milliAmperes
	 
	  If you play around with the V=IR equation, you come up with
	  the following: X uV  Y mOhm == Z mA
	 
	  With the resistors that are fractions of a milliOhm, we multiply
	  the voltage and resistance by 10, to shift the decimal point.
	  Now we can use the normal division operator again.
 voltage in uV 
 sense resistor 50 mOhm 
 voltage in uV 
 sense resistor 3.5 mOhm 
 voltage in uV 
 sense resistor 2.5 mOhm 
 voltage in uV 
 sense resistor 100 mOhm 
 If we get here, the developer messed up 
 Map from voltage channel index to voltage register 
 Map from current channel index to current register 
 prefer platform data 
 fallback on OF 
 Initialize the LTC4245 chip 
 This is the driver that will be inserted 
 SPDX-License-Identifier: GPL-2.0-only
  coretemp.c - Linux kernel module for hardware monitoring
  Copyright (C) 2007 Rudolf Marek <r.marek@assembler.cz>
  Inspired from many hwmon drivers
  force_tjmax only matters when TjMax can't be read from the CPU itself.
  When set, it replaces the driver's suboptimal heuristic.
 Sysfs attribute for package temp 
 Sysfs Base attr no for coretemp 
 Number of Real cores per cpu 
 String Length of attrs 
 Maximum no of basic attrs 
  Per-Core Temperature Data
  @last_updated: The time when the current temperature value was updated
 		earlier (in jiffies).
  @cpu_core_id: The CPU Core from which temperature values should be read
 		This value is passed as "id" field to rdmsrwrmsr functions.
  @status_reg: One of IA32_THERM_STATUS or IA32_PACKAGE_THERM_STATUS,
 		from where the temperature values should be read.
  @attr_size:  Total number of pre-core attrs displayed in the sysfs.
  @is_pkg_data: If this is 1, the temp_data holds pkgtemp data.
 		Otherwise, temp_data holds coretemp data.
  @valid: If this is 1, the current temperature is valid.
 Platform Data per Physical CPU 
 Keep track of how many zone pointers we allocated in init() 
 Array of zone pointers. Serialized by cpu hotplug lock 
 Check whether the time interval has elapsed 
		
		  Ignore the valid bit. In all observed cases the register
		  value is either low or zero if the valid bit is 0.
		  Return it instead of reporting an error which doesn't
		  really help at all.
 CE41x0 (Sodaville ) 
 Atom S1240 (Centerton) 
 Atom S1220 (Centerton) 
 Atom S1260 (Centerton) 
 Model 0x1c, stepping 2	
 Model 0x1c, stepping 2	
 D4xx, K4xx, N4xx, D5xx, K5xx, N5xx 
	{ 0x1c, ANY, 90000 },	 Z5xx, N2xx, possibly others
				  Note: Also matches 230 and 330,
				  which are covered by tjmax_table
	{ 0x26, ANY, 90000 },	 Atom Tunnel Creek (Exx), Lincroft (Z6xx)
				  Note: TjMax for E6xxT is 110C, but CPU type
				  is undetectable by software
 Atom Medfield (Z2460) 
 Atom Clover TrailCloverview (Z27x0) 
	{ 0x36, ANY, 100000 },	 Atom Cedar TrailCedarview (N2xxx, D2xxx)
				  Also matches S12x0 (stepping 9), covered by
				  PCI table
 The 100C is default for both mobile and non mobile CPUs 
	
	  Explicit tjmax table entries override heuristics.
	  First try PCI host bridge IDs, followed by model ID strings
	  and modelstepping information.
 Early chips have no MSR for TjMax 
		
		  Now we can detect the mobile CPU using Intel provided table
		  http:softwarecommunity.intel.comWikiMobility720.htm
		  For Core2 cores, check MSR 0x17, bit 28 1 = Mobile CPU
			
			  Trust bit 28 up to Penryn, I could not find any
			  documentation on that; if you happen to know
			  someone at Intel please ask
 Platform ID bits 52:50 (EDX starts at bit 32) 
			
			  Mobile Penryn CPU seems to be platform ID 7 or 5
			  (guesswork)
				
				  If MSR EE bit is set, set it to 90 degrees C,
				  otherwise 105 degrees C
		
		  If we don't use msr EE it means we are desktop CPU
		  (with exeception of Atom)
	
	  A new feature of current Intel(R) processors, the
	  IA32_TEMPERATURE_TARGET contains the TjMax value
		
		  If the TjMax is not plausible, an assumption
		  will be used
	
	  An assumption is made for early CPUs and unreadable MSR.
	  NOTE: the calculated value may not be correct.
	
	  Check if we have problem with errata AE18 of Core processors:
	  Readings might stop update when processor visited too deep sleep,
	  fixed for stepping D0 (6EC).
	
	  Find attr number for sysfs:
	  We map the attr number to core id of the CPU
	  The attr number is always core id + 2
	  The Pkgtemp will always show up as temp1_, if available
 Test if we can access the status register 
 We can access status register. Get Critical Temperature 
	
	  Read the still undocumented bits 8:15 of IA32_TEMPERATURE_TARGET.
	  The target temperature is available on older CPUs but not in this
	  register. Atoms don't have the register at all.
 Create sysfs interfaces 
 Remove the sysfs attributes 
 Initialize the per-zone data structures 
	
	  Don't execute this on resume as the offline callback did
	  not get executed on suspend.
	
	  CPUID.06H.EAX[0] indicates whether the CPU has thermal
	  sensors. We check this bit only, all the early CPUs
	  without thermal sensors will be filtered out.
 Check the microcode version of the CPU 
		
		  Alright, we have DTS support.
		  We are bringing the _first_ core in this pkg
		  online. So, initialize per-pkg data structures and
		  then bring this core online.
		
		  Check whether pkgtemp support is available.
		  If so, add interfaces for pkgtemp.
	
	  Check whether a thread sibling is already online. If not add the
	  interface for this CPU core.
	
	  Don't execute this on suspend as the device remove locks
	  up the machine.
 If the physical CPU device does not exist, just return 
 The core id is too big, just return 
	
	  If this is the last thread sibling, remove the CPU core
	  interface, If there is still a sibling online, transfer the
	  target cpu of that core interface to it.
	
	  If all cores in this pkg are offline, remove the device. This
	  will invoke the platform driver remove function, which cleans up
	  the rest.
	
	  Check whether this core is the target for the package
	  interface. We need to assign it to some other cpu.
	
	  CPUID.06H.EAX[0] indicates whether the CPU has thermal
	  sensors. We check this bit only, all the early CPUs
	  without thermal sensors will be filtered out.
 SPDX-License-Identifier: GPL-2.0-or-later
  sis5595.c - Part of lm_sensors, Linux kernel modules
 	       for hardware monitoring
  Copyright (C) 1998 - 2001 Frodo Looijaard <frodol@dds.nl>,
 			     Kyösti Mälkki <kmalkki@cc.hut.fi>, and
 			     Mark D. Studebaker <mdsxyz123@yahoo.com>
  Ported to Linux 2.6 by Aurelien Jarno <aurelien@aurel32.net> with
  the help of Jean Delvare <jdelvare@suse.de>
  SiS southbridge has a LM78-like chip integrated on the same IC.
  This driver is a customized copy of lm78.c
  Supports following revisions:
 	Version		PCI ID		PCI Revision
 	1		10390008	AF or less
 	2		10390008	B0 or greater
   Note: these chips contain a 0008 device which is incompatible with the
 	 5595. We recognize these by the presence of the listed
 	 "blacklist" PCI ID and refuse to load.
  NOT SUPPORTED	PCI ID		BLACKLIST PCI ID
 	 540		0008		0540
 	 550		0008		0550
 	5513		0008		5511
 	5581		0008		5597
 	5582		0008		5597
 	5597		0008		5597
 	5598		0008		55975598
 	 630		0008		0630
 	 645		0008		0645
 	 730		0008		0730
 	 735		0008		0735
  If force_addr is set to anything different from 0, we forcibly enable
  the device at the given address.
 Many SIS5595 constants specified below 
 Length of ISA address segment 
 PCI Config Registers 
 Where are the ISA addressdata registers relative to the base address 
 The SIS5595 registers 
  On the first version of the chip, the temp registers are separate.
  On the second version,
  TEMP pin is shared with IN4, configured in PCI register 0x7A.
  The registers are the same as well.
  OVER and HYST are really MAX and MIN.
  Conversions. Limit checking is only done on the TO_REG
  variants.
  IN: mV, (0V to 4.08V)
  REG: 16mVbit
  TEMP: mC (-54.12C to +157.53C)
  REG: 0.83Cbit + 52.12, two's complement
  FAN DIV: 1, 2, 4, or 8 (defaults to 2)
  REG: 0, 1, 2, or 3 (respectively) (defaults to 1)
  For each registered chip, we need to keep some data in memory.
  The structure is dynamically allocated.
 true if following fields are valid 
 In jiffies 
 == 3 if temp enabled, otherwise == 4 
 Reg. value 
 Register value 
 Register value 
 Register value 
 Register value 
 Register value 
 Register value 
 Register value 
 Register value 
 Register encoding, shifted right 
 Register encoding, combined 
 pointer to the (only) sis5595 
 4 Voltages 
 Temperature 
 2 Fans 
  Note: we save and restore the fan minimum here, because its value is
  determined in part by the fan divisor.  This follows the principle of
  least surprise; the user doesn't expect the fan minimum to change just
  because the divisor changed.
 Alarms 
 This is called when the module is loaded 
 Reserve the ISA region 
	
	  Check revision and pin registers to determine whether 4 or 5 voltages
 4 voltages, 1 temp 
 5 voltages, no temps 
 Initialize the SIS5595 chip 
 A few vars need to be filled upon startup 
 Register sysfs hooks 
 ISA access must be locked explicitly. 
 Called when we have found a new SIS5595. 
	PCI_DEVICE_ID_SI_5511, 
				 5513 chip has the 0008 device but
				 that ID shows up in other chips so we
				 use the 5511 ID for recognition
 doesn't work for some chips? 
 doesn't work for some chips! 
 Sets global pdev as a side effect 
	
	  Always return failure here.  This is to allow other drivers to bind
	  to this pci device.  We don't really want to have control over the
	  pci device, we only wanted to read as few register values from it.
 SPDX-License-Identifier: GPL-2.0-or-later
    Copyright (C) 2010-2012 Hans de Goede <hdegoede@redhat.com>           
 Insmod parameters 
 Embedded uController Logical Dev 
 Key to enable Super-IO 
 Key to disable Super-IO 
 Logical device select 
 Device ID 
 Logical device enable 
 Logical device address (2 bytes) 
 Chipset ID 
 Chipset ID 
 Watchdog registers 
 Super IO functions 
 Don't step on other drivers' IO space by accident 
	
	  According to SMSC for the commands we use the maximum time for
	  the EM to respond is 15 ms, but testing shows in practice it
	  responds within 15-32 reads, so we first busy poll, and if
	  that fails sleep a bit and try again until we are way past
	  the 15 ms maximum response time.
 (Optional) Write-Clear the EC to Host Mailbox Register 
 Set Mailbox Address Pointer to first location in Region 1 
 Write Request Packet Header 
 VREG Access Type read:0x02 write:0x03 
 # of Entries: 1 Byte (8-bit) 
 Mailbox AP to first data entry loc. 
 Write Value field 
 Write Address field 
 Execute the Random Access Command 
 Write 01h to the Host-to-EC register 
 EM Interface Polling "Algorithm" 
 Read Interrupt source Register 
 Write Clear the interrupt source bits 
 Command Completed ? 
	
	  According to SMSC we may need to retry this, but sofar I've always
	  seen this succeed in 1 try.
 Read EC-to-Host Register 
 Command Completed ? 
	
	  According to the SMSC app note we should now do:
	 
	  Set Mailbox Address Pointer to first location in Region 1 
	  outb(0x00, addr + 2);
	  outb(0x80, addr + 3);
	 
	  But if we do that things don't work, so let's not.
 Read Value field 
 Read LSB first, this will cause the matching MSB to be latched 
 Read MSB first, this will cause the matching LSN to be latched 
  Watchdog routines
 1 second or 60 second resolution? 
	
	  Remember new timeout value, but do not write as that (re)starts
	  the watchdog countdown.
	
	  The sch56xx's watchdog cannot really be started  stopped
	  it is always running, but we can avoid the timer expiring
	  from causing a system reset by clearing the output enable bit.
	 
	  The sch56xx's watchdog will set the watchdog event bit, bit 0
	  of the second interrupt source register (at base-address + 9),
	  when the timer expires.
	 
	  This will only cause a system reset if the 0-1 flank happens when
	  output enable is true. Setting output enable after the flank will
	  not cause a reset, nor will the timer expiring a second time.
	  This means we must clear the watchdog event bit in case it is set.
	 
	  The timer may still be running (after a recent watchdog_stop) and
	  mere milliseconds away from expiring, so the timer must be reset
	  first!
 1. Reset the watchdog countdown counter 
 2. Enable output 
 3. Clear the watchdog event bit if set 
 Reset the watchdog countdown counter 
 Cache the watchdog registers 
	 Since the watchdog uses a downcounter there is no register to read
	   the BIOS set timeout from (if any was set at all) ->
 seconds 
 minute 
  platform dev find, add and remove functions
	
	  Warning the order of the low  high byte is the other way around
	  as on most other superio devices!!
 SPDX-License-Identifier: GPL-2.0-or-later
    Copyright (C) 2011-2012 Hans de Goede <hdegoede@redhat.com>           
 We only support one model for now 
 FAULT in datasheet, but acts as an alarm 
 true if following fields are valid 
 In jiffies 
 Cache the values for 1 second 
 Alarms need to be explicitly write-cleared 
 Alarms need to be explicitly write-cleared 
 Read all temp + fan ctrl registers to determine which are active 
 Note failing to register the watchdog is not a fatal error 
 SPDX-License-Identifier: GPL-2.0-or-later
  i5500_temp - Driver for Intel 55005520X58 chipset thermal sensor
  Copyright (C) 2012, 2014 Jean Delvare <jdelvare@suse.de>
 Register definitions from datasheet 
 Sensor resolution : 0.5 degree C 
 SPDX-License-Identifier: GPL-2.0-or-later
 Sparx5 SoC temperature sensor driver
  Copyright (C) 2020 Lars Povlsen <lars.povlsen@microchip.com>
		
		  From register documentation:
		  Temp(C) = TEMP_SENSOR_STAT.TEMP  4096  352.2 - 109.4
		
		  Scale down by 10 from above and multiply by 1000 to
		  have millidegrees as specified by the hwmon sysfs
		  interface.
 SPDX-License-Identifier: (GPL-2.0 OR BSD-3-Clause)
 Copyright (c) 2018 Mellanox Technologies. All rights reserved.
 Copyright (c) 2018 Vadim Pasternak <vadimp@mellanox.com>
 20% 
 100% 
  Minimum and maximum FAN allowed speed in percent: from 20% to 100%. Values
  MLXREG_FAN_MAX_STATE + x, where x is between 2 and 10 are used for
  setting FAN speed dynamic minimum. For example, if value is set to 14 (40%)
  cooling levels vector will be set to 4, 4, 4, 4, 4, 5, 6, 7, 8, 9, 10 to
  introduce PWM speed in percent: 40, 40, 40, 40, 40, 50, 60. 70, 80, 90, 100.
 20 percent 
  FAN datasheet defines the formula for RPM calculations as RPM = 15t-high.
  The logic in a programmable device measures the time t-high by sampling the
  tachometer every t-sample (with the default value 11.32 uS) and increment
  a counter (N) as long as the pulse has not change:
  RPM = 15  (t-sample  (K + Regval)), where:
  Regval: is the value read from the programmable device register;
   - 0xff - represents tachometer fault;
   - 0xfe - represents tachometer minimum value , which is 4444 RPM;
   - 0x00 - represents tachometer maximum value , which is 300000 RPM;
  K: is 44 and it represents the minimum allowed samples per pulse;
  N: is equal K + Regval;
  In order to calculate RPM from the register value the following formula is
  used: RPM = 15  ((Regval + K)  11.32)  10^(-6)), which in  the
  default case is modified to:
  RPM = 15000000  100  ((Regval + 44)  1132);
  - for Regval 0x00, RPM will be 15000000  100  (44  1132) = 30115;
  - for Regval 0xfe, RPM will be 15000000  100  ((254 + 44)  1132) = 4446;
  In common case the formula is modified to:
  RPM = 15000000  100  ((Regval + samples)  divider).
  struct mlxreg_fan_tacho - tachometer data (internal use):
  @connected: indicates if tachometer is connected;
  @reg: register offset;
  @mask: fault mask;
  @prsnt: present register offset;
  struct mlxreg_fan_pwm - PWM data (internal use):
  @fan: private data;
  @connected: indicates if PWM is connected;
  @reg: register offset;
  @cooling: cooling device levels;
  @cdev: cooling device;
  struct mlxreg_fan - private data (internal use):
  @dev: basic device;
  @regmap: register map of parent device;
  @tacho: tachometer data;
  @pwm: PWM data;
  @tachos_per_drwr - number of tachometers per drawer;
  @samples: minimum allowed samples per pulse;
  @divider: divider value for tachometer RPM calculation;
			
			  Check FAN presence: FAN related bit in presence register is one,
			  if FAN is physically connected, zero - otherwise.
				
				  Map channel to presence bit - drawer can be equipped with
				  one or few FANs, while presence is indicated per drawer.
 FAN is not connected - return zero for FAN speed. 
	
	  Verify if this request is for changing allowed FAN dynamical
	  minimum. If it is - update cooling levels accordingly and update
	  state, if current state is below the newly requested minimum state.
	  For example, if current state is 5, and minimal state is to be
	  changed from 4 to 6, fan->cooling_levels[0 to 5] will be changed all
	  from 4 to 6. And state 5 (fan->cooling_levels[4]) should be
	  overwritten.
		
		  This is configuration change, which is only supported through sysfs.
		  For configuration non-zero value is to be returned to avoid thermal
		  statistics update.
 Normalize the state to the valid speed range. 
	
	  Set divider value according to the capability register, in case it
	  contains valid value. Otherwise use default value. The purpose of
	  this validation is to protect against the old hardware, in which
	  this register can return zero.
 Validate if more then one PWM is connected. 
 Validate that conf parameters are not zeros. 
 Obtain the number of FAN drawers, supported by system. 
 Set the number of tachometers per one drawer. 
 Init cooling levels per PWM state. 
 SPDX-License-Identifier: GPL-2.0-or-later
  mcp3021.c - driver for Microchip MCP3021 and MCP3221
  Copyright (C) 2008-2009, 2012 Freescale Semiconductor, Inc.
  Author: Mingkai Hu <Mingkai.hu@freescale.com>
  Reworked by Sven Schuchmann <schuchmann@schleissheimer.de>
  DT support added by Clemens Gruber <clemens.gruber@pqgruber.com>
  This driver export the value of analog input voltage to sysfs, the
  voltage unit is mV. Through the sysfs interface, lm-sensors tool
  can also display the input voltage.
 Vdd  reference voltage in millivolt 
 output format 
 10-bit resolution 
 12-bit resolution 
  Client data (each client gets its own)
 supply and reference voltage in millivolt 
 The output code of the MCP3021 is transmitted with MSB first. 
	
	  The ten-bit output code is composed of the lower 4-bit of the
	  first byte and the upper 6-bit of the second byte.
 SPDX-License-Identifier: GPL-2.0+
  Driver for the ADC on Freescale Semiconductor MC13783 and MC13892 PMICs.
  Copyright 2004-2007 Freescale Semiconductor, Inc. All Rights Reserved.
  Copyright (C) 2009 Sascha Hauer, Pengutronix
 platform device id driver data 
 ADIN7 subchannels 
		
		  BP (channel 2) reports with offset 2.4V to the actual value
		  to fit the input range of the ADC.  unit = 2.25mV = 94 mV.
	
	  input range is [0, 2.3V], val has 10 bits, so each bit
	  is worth 94 mV.
 MC13892 have 12 divider, input range is [0, 4.800V] 
 MC13783 have 0.9 divider, input range is [0, 2.555V] 
		
		  MC13892:
		  Die Temperature Read Out Code at 25C 680
		  Temperature change per LSB +0.4244C
		
		  MC13783:
		  Die Temperature Read Out Code at 25C 282
		  Temperature change per LSB -1.14C
 these are only used if MC13783_ADC_16CHANS is provided in driver data 
 last four channels may be occupied by the touchscreen 
 Register sysfs hooks 
 sentinel 
 SPDX-License-Identifier: GPL-2.0-or-later
  A hwmon driver for the Analog Devices ADT7470
  Copyright (C) 2007 IBM
  Author: Darrick J. Wong <darrick.wong@oracle.com>
 Addresses to scan 
 ADT7470 registers 
 datasheet only mentions a revision 2 
 "all temps" according to hwmon sysfs interface spec 
 How often do we reread sensors values? (In jiffies) 
 How often do we reread sensor limit values? (In jiffies) 
 Wait at least 200ms per sensor for 10 sensors 
 auto update thing won't fire more than every 2s 
 datasheet says to divide this number by the fan reading to get fan rpm 
 Config registers 1 and 2 include fields for selecting the PWM frequency 
 In jiffies 
 In jiffies 
 -1 = probe 
  16-bit registers on the ADT7470 are low-byte first.  The data sheet says
  that the low byte must be read before the high byte.
 Probe for temperature sensors.  Assumes lock is held 
 save pwm[1-4] config register 
 set manual pwm to whatever it is set to now 
 put pwm in manual mode 
 write pwm control to whatever it was 
 start reading temperature sensors 
 Delay is 200ms  number of temp sensors. 
 done reading temperature sensors 
 restore pwm[1-4] config registers 
 Only count fans if we have to 
	
	  Figure out if we need to update the shadow registers.
	  Lockless means that we may occasionally report out of
	  date data.
 These are the valid PWM frequencies to the nearest Hz 
 Round the user value given to the closest available frequency 
 Configuration Register 1 
 Configuration Register 2 
 the datasheet says that tmax = tmin + 20C 
 Return 0 if detection is successful, -ENODEV otherwise 
 Initialize the ADT7470 chip 
 Register sysfs hooks 
 SPDX-License-Identifier: GPL-2.0-or-later
  APM X-Gene SoC Hardware Monitoring Driver
  Copyright (c) 2016, Applied Micro Circuits Corporation
  Author: Loc Ho <lho@apm.com>
          Hoan Tran <hotran@apm.com>
  This driver provides the following features:
   - Retrieve CPU total power (uW)
   - Retrieve IO total power (uW)
   - Retrieve SoC temperature (milli-degree C) and alarm
 SLIMpro message defines 
 PCC defines 
  Arbitrary retries in case the remote processor is slow to respond
  to PCC commands
  This function tests and clears a bitmask then returns its old value
 Write signature for subspace 
 Write to the shared command region 
 Flip CMD COMPLETE bit 
 Copy the message to the PCC comm space 
 Ring the doorbell 
 Check for error message 
 Check for error message 
	
	  Check if sensor data is valid.
  Sensor temperaturepower functions
  This function is called to process async work queue
		
		  If PCC, send a consumer command to Platform to get info
		  If Slimpro Mailbox, get message from specific FIFO
 Enqueue to the FIFO 
  This function is called when the SLIMpro Mailbox received a message
	
	  While the driver registers with the mailbox framework, an interrupt
	  can be pending before the probe function completes its
	  initialization. If such condition occurs, just queue up the message
	  as the driver is not ready for servicing the callback.
	
	  Response message format:
	  msg[0] is the return code of the operation
	  msg[1] is the first parameter word
	  msg[2] is the second parameter word
	 
	  As message only supports dword size, just assign it.
 Check for sync query 
 Operation waiting for response 
 Enqueue to the FIFO 
 Schedule the bottom handler 
  This function is called when the PCC Mailbox received a message
	
	  While the driver registers with the mailbox framework, an interrupt
	  can be pending before the probe function completes its
	  initialization. If such condition occurs, just queue up the message
	  as the driver is not ready for servicing the callback.
 Check if platform sends interrupt 
	
	  Response message format:
	  msg[0] is the return code of the operation
	  msg[1] is the first parameter word
	  msg[2] is the second parameter word
	 
	  As message only supports dword size, just assign it.
 Check for sync query 
 Check if platform completes command 
 Operation waiting for response 
	
	  Platform notifies interrupt to OSPM.
	  OPSM schedules a consumer command to get this information
	  in a workqueue. Platform must wait until OSPM has issued
	  a consumer command that serves this notification.
 Enqueue to the FIFO 
 Schedule the bottom handler 
 Request mailbox channel 
		
		  This is the shared communication region
		  for the OS and Platform to communicate over.
		
		  pcc_chan->latency is just a Nominal value. In reality
		  the remote processor could be much slower to reply.
		  So add an arbitrary amount of wait on top of Nominal.
	
	  Schedule the bottom handler if there is a pending message.
 SPDX-License-Identifier: GPL-2.0-only
  drivershwmonapplesmc.c - driver for Apple's SMC (accelerometer, temperature
  sensors, fan control, keyboard backlight control) used in Intel-based Apple
  computers.
  Copyright (C) 2007 Nicolas Boichat <nicolas@boichat.ch>
  Copyright (C) 2010 Henrik Rydberg <rydberg@euromail.se>
  Based on hdaps.c driver:
  Copyright (C) 2005 Robert Love <rml@novell.com>
  Copyright (C) 2005 Jesper Juhl <jj@chaosbits.net>
  Fan control based on smcFanControl:
  Copyright (C) 2006 Hendrik Holtmann <holtmann@mac.com>
 data port used by Apple SMC 
 commandstatus port used by Apple SMC 
 0x300-0x31f 
 Apple SMC status bits 
 SMC has data waiting to be read 
 Will ignore any input 
 Command in progress 
 Initial wait is 8us 
 r-o ui32 
 r-o {alv (6-10 bytes) 
 r-o {alv (6-10 bytes) 
 w-o {lkb (2 bytes) 
 r-o ui8 (unused) 
 r-o sp78 (2 bytes) 
 r-o sp78 (2 bytes) 
 r-o sp78 (2 bytes) 
 rw ui16 
 r-o ui8 
 r-w ui16 
 r-o char[16] 
 List of keys used to readwrite fan speeds 
 actual speed 
 minimum speed (rw) 
 maximum speed 
 safe speed - not all models 
 target speed (manual: rw) 
 wait up to 5s for device init ... 
 ... in 50ms increments 
 msecs 
 input event threshold 
 Dynamic device node attributes 
 hwmon attributes 
 room for node file name 
 Dynamic device node group 
 format string 
 show function 
 store function 
 function argument 
 dynamic node array 
 AppleSMC entry - cached register information 
 four-letter key code 
 set when entry is successfully read once 
 bounded by APPLESMC_MAX_DATA_LENGTH 
 four-letter type code 
 0x10: func; 0x40: write; 0x80: read 
 Register lookup and registers common to all SMCs 
 register readwrite mutex 
 number of SMC registers 
 number of fans 
 number of temperature registers 
 temperature lower index bound 
 temperature upper index bound 
 size of temperature index array 
 number of light sensors 
 has motion sensor 
 has keyboard backlight 
 true when fully initialized 
 cached key entries 
 temperature key index 
  Last index written to key_at_index sysfs file, and value to use for all other
  key_at_index_ sysfs files.
  Wait for specific status bits with a mask on the SMC.
  Used before all transactions.
  This does 10 fast loops of 8us then exponentially backs off for a
  minimum total wait of 262ms. Depending on usleep_range this could
  run out past 500ms.
 send_byte - Write to SMC data port. Callers must hold applesmc_lock. 
	
	  This needs to be a separate read looking for bit 0x04
	  after bit 0x02 falls. If consolidated with the wait above
	  this extra read may not happen if status returns both
	  simultaneously and this would appear to be required.
 send_command - Write a command to the SMC. Callers must hold applesmc_lock. 
  Based on logic from the Apple driver. This is issued before any interaction
  If busy is stuck high, issue a read command to reset the SMC state machine.
  If busy is stuck high after the command then the SMC is jammed.
 This has no effect on newer (2012) SMCs 
 Read the data port until bit0 is cleared 
  Serialized IO
  Returns zero on success or a negative error on failure.
  All functions below are concurrency safe - callers should NOT hold lock.
  applesmc_read_s16 - Read 16-bit signed big endian register
  applesmc_device_init - initialize the accelerometer.  Can sleep.
  applesmc_init_smcreg_try - Try to initialize register cache. Idempotent.
  applesmc_init_smcreg - Initialize register cache.
  Retries until initialization is successful, or the operation times out.
 Device model stuff 
 Synchronize device with memorized backlight state 
 Reinitialize device on resume from hibernation 
  applesmc_calibrate - Set our "resting" values.  Callers must
  hold applesmc_lock.
 Sysfs Files 
 newer macbooks report a single 10-bit bigendian value 
 Displays sensor key as label 
 Displays degree Celsius  1000 
 Bigger than a 14-bit value 
 Module stuff 
  applesmc_destroy_nodes - remove files and free associated memory
  applesmc_create_nodes - create a two-dimensional group of sysfs files
 Create accelerometer resources 
 initial calibrate for the input device 
 initialize the input device 
 Release all resources used by the accelerometer 
  Note that DMI_MATCH(...,"MacBook") will match "MacBookPro1,1".
  So we need to put "Apple MacBook Pro" before "Apple MacBook".
 create register cache 
 SPDX-License-Identifier: GPL-2.0-only
  Driver for
   Maxim MAX16065MAX16066 12-Channel8-Channel, Flash-Configurable
   System Managers with Nonvolatile Fault Registers
   Maxim MAX16067MAX16068 6-Channel, Flash-Configurable System Managers
   with Nonvolatile Fault Registers
   Maxim MAX16070MAX16071 12-Channel8-Channel, Flash-Configurable System
   Monitors with Nonvolatile Fault Registers
  Copyright (C) 2011 Ericsson AB.
  Registers
#define MAX16065_LIMIT(l, x)	(0x48 + (l) + (x)  3)	
							  l: limit
							   0: minmax
							   1: crit
							   2: lcrit
							  x: ADC index
#define MAX16065_WARNING_OV	(1 << 3)  Set if secondary threshold is OV
 maximum number of ADC channels 
 in jiffies 
 limits are in mV 
 voltage range 
 adc values (raw) including csp_adc 
 ADC registers have 10 bit resolution. 
  Limit registers have 8 bit resolution and match upper 8 bits of ADC
  registers.
  max16065_read_adc()
  Read 16 bit value from <reg>, <reg+1>.
  Upper 8 bits are in <reg>, lower 2 bits are in bits 7:6 of <reg+1>.
 Construct a sensor_device_attribute structure for each register 
 Input voltages 
 Input voltages lcrit 
 Input voltages crit 
 Input voltages min 
 Input voltages max 
 alarms 
 Current and alarm 
  Finally, construct an array of pointers to members of the above objects,
  as required for sysfs_create_group()
 true if chip has secondary limits 
 secondary limits reflect max 
 Read scale registers, convert to range 
 Read limits 
 sysfs hooks 
			
			  Current gain is 6, 12, 24, 48 based on values in
			  bit 2,3.
 This is the driver that will be inserted 
 SPDX-License-Identifier: GPL-2.0-or-later
  Driver for Lineage Compact Power Line series of power entry modules.
  Copyright (C) 2010, 2011 Ericsson AB.
  Documentation:
   http:www.lineagepower.comoempdfCPLI2C.pdf
  This driver supports various Lineage Compact Power Line DCDC and ACDC
  converters such as CP1800, CP2000AC, CP2000DC, CP2100DC, and others.
  The devices are nominally PMBus compliant. However, most standard PMBus
  commands are not supported. Specifically, all hardware monitoring and
  status reporting commands are non-standard. For this reason, a standard
  PMBus driver can not be used.
  All Lineage CPL devices have a built-in I2C bus master selector (PCA9541).
  To ensure device access, this driver should only be used as client driver
  to the pca9541 I2C master selector driver.
 Command codes 
 offsets in data string 
 Virtual entries, to report constants 
 offsets in input string 
 offsets in fan data 
 Status register bits 
 Alarm register bits 
 4 for most devices	
 in jiffies 
 Read data string 
 Read input string 
 Read fan speeds 
 97 degrees C per datasheet 
 107 degrees C per datasheet 
  Show boolean, either a fault or an alarm.
  .nr points to the register, .index is the bit mask to check
 Voltages 
 Currents 
 Power 
 Fans 
 Temperatures 
	
	  We use the next two commands to determine if the device is really
	  there.
 sysfs hooks 
	
	  Check if input readings are supported.
	  This is the case if we can read input data,
	  and if the returned data is not all zeros.
	  Note that input alarms are always supported.
 Input string is one byte longer for some devices 
	
	  Check if fan speed readings are supported.
	  This is the case if we can read fan speed data,
	  and if the returned data is not all zeros.
	  Note that the fan alarm is always supported.
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (c) 2016 Google, Inc
 ASPEED PWM & FAN Tach Register Definition 
 ASPEED_PTCR_CTRL : 0x00 - General Control Register 
 ASPEED_PTCR_CLK_CTRL : 0x04 - Clock Control Register 
 TYPE N 
 TYPE M 
  ASPEED_PTCR_DUTY_CTRL123 : 0x080x0C0x480x4C - PWM-FAN duty control
  0123 register
 ASPEED_PTCR_TYPEM_CTRL : 0x100x180x50 - Type MNO Ctrl 0 Register 
 ASPEED_PTCR_TACH_SOURCE : 0x200x60 - Tach Source Register 
 bit [0,1] at 0x20, bit [2] at 0x60 
 ASPEED_PTCR_RESULT : 0x2c - Result Register 
 ASPEED_PTCR_CTRL_EXT : 0x40 - General Control Extension #1 Register 
 ASPEED_PTCR_CLK_EXT_CTRL : 0x44 - Clock Control Extension #1 Register 
 TYPE O 
 10b 
  5:4 Type N fan tach mode selection bit:
  00: falling
  01: rising
  10: both
  11: reserved.
 10b 
 How long we sleep in us while waiting for an RPM result. 
 return -ETIMEDOUT if we didn't get an answer. 
	
	  We need the mode to determine if the raw_data is double (from
	  counting both edges).
  The clock type is type M :
  The PWM frequency = 24MHz  (type M clock division L bit 
  type M clock division H bit  (type M PWM period bit + 1))
 SPDX-License-Identifier: GPL-2.0-or-later
  abituguru3.c
  Copyright (c) 2006-2008 Hans de Goede <hdegoede@redhat.com>
  Copyright (c) 2008 Alistair John Strachan <alistair@devzero.co.uk>
  This driver supports the sensor part of revision 3 of the custom Abit uGuru
  chip found on newer Abit uGuru motherboards. Note: because of lack of specs
  only reading the sensors and their settings is supported.
 uGuru3 bank addresses 
 uGuru3 sensor bank flags 			     
  temp over warn 
  volt over max 
  volt under min 
 temp is over warn 
 volt is over max 
 volt is under min 
   fan under min 
 beep if alarm 
 shutdown if alarm 
 sensor types 
  Timeouts  Retries, if these turn out to need a lot of fiddling we could
  convert them to params. Determined by trial and error. I assume this is
  cpu-speed independent, since the ISA-bus and not the CPU should be the
  bottleneck.
  Normally the 0xAC at the end of synchronize() is reported after the
  first read, but sometimes not and we need to poll
 utility macros 
 Macros to help calculate the sysfs_names array length 
  sum of strlen +1 of: in??_input\0, in??_{min,max}\0, in??_{min,max}_alarm\0,
  in??_{min,max}_alarm_enable\0, in??_beep\0, in??_shutdown\0, in??_label\0
  sum of strlen +1 of: temp??_input\0, temp??_max\0, temp??_crit\0,
  temp??_alarm\0, temp??_alarm_enable\0, temp??_beep\0, temp??_shutdown\0,
  temp??_label\0
  sum of strlen +1 of: fan??_input\0, fan??_min\0, fan??_alarm\0,
  fan??_alarm_enable\0, fan??_beep\0, fan??_shutdown\0, fan??_label\0
  Worst case scenario 16 in sensors (longest names_length) and the rest
  temp sensors (second longest names_length).
  All the macros below are named identical to the openguru2 program
  reverse engineered by Louis Kruger, hence the names might not be 100%
  logical. I could come up with better names, but I prefer keeping the names
  identical so that this driver can be compared with his work more easily.
 Two io-ports are used by uGuru 
  The wait_xxx functions return this on success and the last contents
  of the DATA register (0-255) on failure.
 uGuru status flags 
 Structures 
 Avoid use of flexible array members 
 + 1 -> end of sensors indicated by a sensor with name == NULL 
  For the Abit uGuru, we need to keep some data in memory.
  The structure is dynamically allocated, at the same time when a new
  abituguru3 device is allocated.
 hwmon registered device 
 protect access to data and uGuru 
 uguru base address 
 true if following fields are valid 
 In jiffies 
	
	  For convenience the sysfs attr and their names are generated
	  automatically. We have max 10 entries per sensor (for in sensors)
 Buffer to store the dynamically generated sysfs names 
 Pointer to the sensors info for the detected motherboard 
	
	  The abituguru3 supports up to 48 sensors, and thus has registers
	  sets for 48 sensors, for convenience reasons  simplicity of the
	  code we always read and store all registers for all 48 sensors
 Alarms for all 48 sensors (1 bit per sensor) 
 Value of all 48 sensors 
	
	  Settings of all 48 sensors, note in and temp sensors (the first 32
	  sensors) have 3 bytes of settings, while fans only have 2 bytes,
	  for convenience we use 3 bytes for all sensors
 Constants 
 Unknown, need DMI string , {
 Abit AW8, need DMI string , {
 AL-8, need DMI string , {
 Unknown, need DMI string , {
 Abit NI8 SLI GR, need DMI string , {
 Abit AN8 32X, need DMI string , {
 Abit AW8D, need DMI string , {
 Unknown, need DMI string , {
 Unknown, need DMI string , {
 Unknown, need DMI string , {
 Insmod parameters 
 Default verbose is 1, since this driver is still in the testing phase 
 wait while the uguru is busy (usually after a write) 
		
		  sleep a bit before our last try, to give the uGuru3 one
		  last chance to respond.
 wait till uguru is ready to be read 
		
		  sleep a bit before our last try, to give the uGuru3 one
		  last chance to respond.
  This synchronizes us with the uGuru3's protocol state machine, this
  must be done before each command.
  Read count bytes from sensor sensor_addr in bank bank_addr and store the
  result in buf
  Sensor settings are stored 1 byte per offset with the bytes
  placed add consecutive offsets.
  Following are the sysfs callback functions. These functions expect:
  sensor_device_attribute_2->index:   index into the data->sensors array
  sensor_device_attribute_2->nr:      register offset, bitmask or NA.
 are we reading a setting, or is this a normal read? 
 convert the value 
	
	  alternatively we could update the sensors settings struct for this,
	  but then its contents would differ from the windows sw ini files
	
	  See if the alarm bit for this sensor is set and if a bitmask is
	  given in attr->nr also check if the alarm matches the type of alarm
	  we're looking for (for volt it can be either low or high). The type
	  is stored in a few readonly bits in the settings of the sensor.
 Sysfs attr templates, the real entries are generated automatically. 
 Read the motherboard ID 
 Completely read the uGuru to see if one really is there 
 lookup the ID in our motherboard table 
 Fill the sysfs attr array 
 Fail safe check, this should never happen! 
 Fail safe check, this should never happen! 
 Register sysfs hooks 
 success 
 Clear data->valid while updating 
 Read alarms 
 Read in and temp sensors (3 byte settings  sensor) 
 Read temp sensors (2 byte settings  sensor) 
	
	  make sure all communications with the uguru3 are done and no new
	  ones are started
 CONFIG_PM 
www.abit.com.tw"))
	
	  At the moment, we don't care about the part of the vendor
	  DMI string contained in brackets. Truncate the string at
	  the first occurrence of a bracket. Trim any trailing space
	  from the substring.
 No match found 
  FIXME: Manual detection should die eventually; we need to collect stable
         DMI model names first before we can rely entirely on CONFIG_DMI.
	
	  See if there is an uguru3 there. An idle uGuru3 will hold 0x00 or
	  0x08 at DATA and 0xAC at CMD. Sometimes the uGuru3 will hold 0x05
	  or 0x55 at CMD instead, why is unknown.
 No uGuru3 found 
 Attempt DMI detection first 
	
	  Fall back to manual detection if there was no exact
	  board name match, or force was specified.
 SPDX-License-Identifier: GPL-2.0-or-later
   MEN 14F021P00 Board Management Controller (BMC) hwmon driver.
   This is the core hwmon driver of the MEN 14F021P00 BMC.
   The BMC monitors the board voltages which can be access with this
   driver through sysfs.
   Copyright (C) 2014 MEN Mikro Elektronik Nuernberg GmbH
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (C) 2001-2004 Aurelien Jarno <aurelien@aurel32.net>
  Ported to Linux 2.6 by Aurelien Jarno <aurelien@aurel32.net> with
  the help of Jean Delvare <jdelvare@suse.de>
 Insmod parameters 
  The PCF8591 control byte
       7    6    5    4    3    2    1    0
    |  0 |AOEF|   AIP   |  0 |AINC|  AICH   |
 Analog Output Enable Flag (analog output active if 1) 
  Analog Input Programming
  0x00 = four single ended inputs
  0x10 = three differential inputs
  0x20 = single ended and differential mixed
  0x30 = two differential inputs
 Autoincrement Flag (switch on if 1) 
  Channel selection
  0x00 = channel 0
  0x01 = channel 1
  0x02 = channel 2
  0x03 = channel 3
 Initial values 
 DAC out = 0 
 Conversions 
 following are the sysfs callback functions 
  Real code
 Initialize the PCF8591 chip 
 Register sysfs hooks 
 Register input2 if not in "two differential inputs" mode 
 Register input3 only in "four single ended inputs" mode 
 Called when we have found a new PCF8591. 
	
	  The first byte transmitted contains the conversion code of the
	  previous read cycle. FLUSH IT!
		
		  The first byte transmitted contains the conversion code of
		  the previous read cycle. FLUSH IT!
 SPDX-License-Identifier: GPL-2.0-or-later
  k10temp.c - AMD Family 10h11h12h14h15h16h17h
 		processor hardware monitoring
  Copyright (c) 2009 Clemens Ladisch <clemens@ladisch.de>
  Copyright (c) 2020 Guenter Roeck <linux@roeck-us.net>
  Implementation notes:
  - CCD register address information as well as the calculation to
    convert raw register values is from https:github.comocermanzenpower.
    The information is not confirmed from chip datasheets, but experiments
    suggest that it provides reasonable temperature values.
 Provide lock for writing to NB_SMU_IND_ADDR 
 CPUID function 0x80000001, ebx 
 DRAM controller (PCI function 2) 
 miscellaneous (PCI function 3) 
  For F15h M60h and M70h, REG_HARDWARE_THERMAL_CONTROL
  and REG_REPORTED_TEMPERATURE have been moved to
  D0F0xBC_xD820_0C64 [Hardware Temperature Control]
  D0F0xBC_xD820_0CA4 [Reported Temperature Control]
 Common for Zen CPU families (Family 17h and 18h and 19h) 
 F17h thermal registers through SMN 
 1A  LSB	
 0.25A  LSB	
 1A  LSB	
 0.31A  LSB	
 F19h thermal registers through SMN 
 1A  LSB	
 0.31A  LSB	
 19{00,20,50}X 
 29{20,50,70,90}[W]X 
 Tctl 
 Tdie 
 Tccd{1-8} 
 Show temperature labels only on Zen CPUs 
	
	  Erratum 319: The thermal sensor of Socket FAM2+ processors
	               may be unreliable.
 DDR3 memory implies socket AM3, which is good 
	
	  Unfortunately it is possible to run a socket AM3 CPU with DDR2
	  memory. We blacklist all the cores which do exist in socket AM2+
	  format. It still isn't perfect, as RB-C2 cores exist in both AM2+
	  and AM3 formats, but that's the best we can do.
 Always show Tctl 
 Zen 
 Zen+ 
 Zen APU 
 Zen+ APU 
 Zen2 Threadripper 
 Renoir 
 Lucienne 
 Zen2 
 Zen3 SP3TR 
 Zen3 Ryzen Desktop 
 Green Sardine 
 Yellow Carp 
 show Tdie 
 SPDX-License-Identifier: GPL-2.0-or-later
 Texas Instruments TMP108 SMBus temperature sensor driver
  Copyright (C) 2016 John Muir <john@jmuir.com>
 Minimum millicelcius. 
 Maximum millicelcius. 
 Configuration register bits.
  Note: these bit definitions are byte swapped.
 Sensor mode. 
 Thermostat mode. 
 Watchdog flag - TLOW 
 Watchdog flag - THIGH 
 Conversion rate. 
 Hysteresis. 
 Polarity of alert. 
 Defaults set by the hardware upon reset. 
 These bits are read-only. 
 Default 
 When M1 is set, M0 is ignored. 
 Default 
 Default 
 in milli-seconds 
 convert 12-bit TMP108 register value to milliCelsius 
 convert milliCelsius to left adjusted 12-bit TMP108 register value 
 Is it too early to return a conversion ? 
 Configuration register must be volatile to enable FL and FH. 
 Only continuous mode is supported. 
 Only comparator mode is supported. 
 SPDX-License-Identifier: GPL-2.0
  System Control and Management Interface(SCMI) based hwmon sensor driver
  Copyright (C) 2018-2021 ARM Ltd.
  Sudeep Holla <sudeep.holla@arm.com>
 SPDX-License-Identifier: GPL-2.0-or-later
  Driver for Linear Technology LTC4260 I2C Positive Voltage Hot Swap Controller
  Copyright (c) 2014 Guenter Roeck
 chip registers 
  Fault register bits
 Return the voltage from the given register in mV or mA 
 10 mV resolution. Convert to mV. 
 400 mV resolution. Convert to mV. 
		
		  300 uV resolution. Convert to current as measured with
		  an 1 mOhm sense resistor, in mA. If a different sense
		  resistor is installed, calculate the actual current by
		  dividing the reported current by the sense resistor value
		  in mOhm.
 Clear reported faults in chip register 
 Voltages 
  Voltage alarms
  UVOV faults are associated with the input voltage, and the POWER BAD and
  FET SHORT faults are associated with the output voltage.
 Current (via sense resistor) 
 Overcurrent alarm 
 Clear faults 
 SPDX-License-Identifier: GPL-2.0
  System Control and Power Interface(SCPI) based hwmon sensor driver
  Copyright (C) 2015 ARM Ltd.
  Punit Agrawal <punit.agrawal@arm.com>
 (celsius)		
 (millivolts)		
 (milliamperes)	
 (microwatts)		
 (microjoules)	
 (millicelsius)	
 (millivolts)		
 (milliamperes)	
 (microwatts)		
 (microjoules)	
 hwmon callback functions 
	
	  Temperature sensor values are treated as signed values based on
	  observation even though that is not explicitly specified, and
	  because an unsigned u64 temperature does not really make practical
	  sense especially when the temperature is below zero degrees Celsius.
	
	  Register the temperature sensors with the thermal framework
	  to allow their usage in setting up the thermal zones from
	  device tree.
	 
	  NOTE: Not all temperature sensors maybe used for thermal
	  control
		
		  The call to thermal_zone_of_sensor_register returns
		  an error for sensors that are not associated with
		  any thermal zones or if the thermal subsystem is
		  not configured.
 SPDX-License-Identifier: GPL-2.0-only
  via-cputemp.c - Driver for VIA CPU core temperature monitoring
  Copyright (C) 2009 VIA Technologies, Inc.
  based on existing coretemp.c, which is
  Copyright (C) 2007 Rudolf Marek <r.marek@assembler.cz>
  Functions declaration
  Sysfs stuff
 show label 
 Optional attributes 
 C7 A 
 C7 D 
 Nano 
 test if we can access the TEMPERATURE MSR 
 SPDX-License-Identifier: GPL-2.0-or-later
  ads7828.c - driver for TI ADS7828 8-channel AD converter and compatibles
  (C) 2007 EADS Astrium
  This driver is based on the lm75 and other lm_sensorshwmon drivers
  Written by Steve Hardy <shardy@redhat.com>
  ADS7830 support, by Guillaume Roguez <guillaume.roguez@savoirfairelinux.com>
  For further information, see the Documentationhwmonads7828.rst file.
 The ADS7828 registers 
 Single ended inputs 
 Internal vref OFF && AD ON 
 Internal vref ON && AD ON 
 Internal vref is 2.5V, 2500mV 
 External vref min value 0.05V 
 External vref max value 5.25V 
 List of supported devices 
 Client specific data 
 Command byte without channel bits 
 Resolution of the ADC sample LSB 
 Command byte C2,C1,C0 - see datasheet 
 sysfs callback function 
 Bound Vref with minmax values 
 ADS7828 uses 12-bit samples, while ADS7830 is 8-bit 
	
	  Datasheet specifies internal reference voltage is disabled by
	  default. The internal reference voltage needs to be enabled and
	  voltage needs to settle before getting valid ADC data. So perform a
	  dummy read to enable the internal reference voltage.
 SPDX-License-Identifier: GPL-2.0-or-later
  hwmon-vid.c - VIDVRMVRD voltage conversions
  Copyright (c) 2004 Rudolf Marek <r.marek@assembler.cz>
  Partly imported from i2c-vid.h of the lm_sensors project
  Copyright (c) 2002 Mark D. Studebaker <mdsxyz123@yahoo.com>
  With assistance from Trent Piepho <xyzzy@speakeasy.org>
  Common code for decoding VID pins.
  References:
  For VRM 8.4 to 9.1, "VRM x.y DC-DC Converter Design Guidelines",
  available at http:developer.intel.com.
  For VRD 10.0 and up, "VRD x.y Design Guide",
  available at http:developer.intel.com.
  AMD Athlon 64 and AMD Opteron Processors, AMD Publication 26094,
  http:support.amd.comusProcessor_TechDocs26094.PDF
  Table 74. VID Code Voltages
  This corresponds to an arbitrary VRM code of 24 in the functions below.
  These CPU models (K8 revision <= E) have 5 VID pins. See also:
  Revision Guide for AMD Athlon 64 and AMD Opteron Processors, AMD Publication 25759,
  http:www.amd.comus-enassetscontent_typewhite_papers_and_tech_docs25759.pdf
  AMD NPT Family 0Fh Processors, AMD Publication 32559,
  http:www.amd.comus-enassetscontent_typewhite_papers_and_tech_docs32559.pdf
  Table 71. VID Code Voltages
  This corresponds to an arbitrary VRM code of 25 in the functions below.
  These CPU models (K8 revision >= F) have 6 VID pins. See also:
  Revision Guide for AMD NPT Family 0Fh Processors, AMD Publication 33610,
  http:www.amd.comus-enassetscontent_typewhite_papers_and_tech_docs33610.pdf
  The 17 specification is in fact Intel Mobile Voltage Positioning -
  (IMVP-II). You can find more information in the datasheet of Max1718
  http:www.maxim-ic.comquick_view2.cfmqv_pk2452
  The 13 specification corresponds to the Intel Pentium M series. There
  doesn't seem to be any named specification for these. The conversion
  tables are detailed directly in the various Pentium M datasheets:
  https:www.intel.comdesignintarchpentiummdocs_pentiumm.htm
  The 14 specification corresponds to Intel Core series. There
  doesn't seem to be any named specification for these. The conversion
  tables are detailed directly in the various Pentium Core datasheets:
  https:www.intel.comdesignmobiledatashts309221.htm
  The 110 (VRM 11) specification corresponds to Intel Conroe based series.
  https:www.intel.comdesignprocessorapplnots313214.htm
  vrm is the VRMVRD document version multiplied by 10.
  val is the 4-bit or more VID code.
  Returned value is in mV to avoid floating point in the kernel.
  Some VID have some bits in uV scale, this is rounded to mV.
 VRD 10.0 
 compute in uV, round to mV 
 Intel Conroe 
 compute in uV, round to mV 
 Athlon64 & Opteron 
 AMD NPT 0Fh 
 AMD family 10h to 15h, serial VID 
 VRM 9.1 
 VRM 9.0 
 VRM 8.5 
 VRM 8.4 
 VRM 8.2 
 Intel IMVP-II 
 Exception for Eden ULV 500 MHz 
 Intel Core 
 compute in uV, round to mV 
 report 0 for unknown 
  After this point is the code to automatically determine which
  VRMVRD specification should be used depending on the CPU.
  The stepping_to parameter is highest acceptable stepping for current line.
  The model match must be exact for 4-bit values. For model values 0x10
  and above (extended model), all models below the parameter will match.
 Athlon Duron etc 
 Athlon 64, Opteron 
	
	  In theory, all NPT family 0Fh processors have 6 VID pins and should
	  thus use vrm 25, however in practice not all mainboards route the
	  6th VID pin because it is never needed. So we use the 5 VID pin
	  variant (vrm 24) for the models which exist today.
 NPT family 0Fh 
 future fam. 0Fh 
 NPT family 10h 
 family 11h 
 family 12h 
 family 14h 
 family 15h 
	{X86_VENDOR_INTEL, 0x6, 0x0, 0x6, ANY, 82},	 Pentium Pro,
							  Pentium II, Xeon,
							  Mobile Pentium,
 Pentium III, Xeon 
 Pentium III, Xeon 
 Pentium M (130 nm) 
 Pentium III Xeon 
 Tualatin 
 Pentium M (90 nm) 
 Intel Core (65 nm) 
	{X86_VENDOR_INTEL, 0x6, 0xF, ANY, ANY, 110},	 Intel Conroe and
 P4 
 P4 Willamette 
 P4 Northwood 
	{X86_VENDOR_INTEL, 0xF, 0x3, ANY, ANY, 100},	 Prescott and above
 Eden ESPEzra 
 Ezra T 
 Nehemiah 
 C3-M, Eden-N 
 No information 
	{X86_VENDOR_CENTAUR, 0x6, 0xA, 0xA, ANY, 13},	 C7-M, C7,
	{X86_VENDOR_CENTAUR, 0x6, 0xD, 0xD, ANY, 134},	 C7-D, C7-M, C7,
  Special case for VIA model D: there are two different possible
  VID tables, so we have to figure out first, which one must be
  used. This resolves temporary drm value 134 to 14 (Intel Core
  7-bit VID), 13 (Pentium M 6-bit VID) or 131 (Pentium M 6-bit VID
  + quirk for Eden ULV 500 MHz).
  Note: something similar might be needed for model A, I'm not sure.
 Enable quirk for Eden 
 Any CPU with family lower than 6 
 doesn't have VID 
 and now for something completely different for the non-x86 world 
 SPDX-License-Identifier: GPL-2.0-or-later
  w83781d.c - Part of lm_sensors, Linux kernel modules for hardware
 	       monitoring
  Copyright (c) 1998 - 2001  Frodo Looijaard <frodol@dds.nl>,
 			      Philip Edelbrock <phil@netroedge.com>,
 			      and Mark Studebaker <mdsxyz123@yahoo.com>
  Copyright (c) 2007 - 2008  Jean Delvare <jdelvare@suse.de>
  Supports following chips:
  Chip		#vin	#fanin	#pwm	#temp	wchipid	vendid	i2c	ISA
  as99127f	7	3	0	3	0x31	0x12c3	yes	no
  as99127f rev.2 (type_name = as99127f)	0x31	0x5ca3	yes	no
  w83781d	7	3	0	3	0x10-1	0x5ca3	yes	yes
  w83782d	9	3	2-4	3	0x30	0x5ca3	yes	yes
  w83783s	5-6	3	2	1-2	0x40	0x5ca3	yes	no
 Addresses to scan 
 Insmod parameters 
 Constants specified below 
 Length of ISA address segment 
 Where are the ISA addressdata registers relative to the base address 
 The device registers 
 in nr from 0 to 8 
 fan nr from 0 to 2 
 temp nr from 1 to 3 
 Interrupt status (W83781D, AS99127F) 
 Real-time status (W83782D, W83783S) 
 not on W83781D 
 782D783S only 
 PWM 782D (1-4) and 783S (1-2) only 
  The following are undocumented in the data sheets however we
  received the information in an email from Winbond tech support
 Sensor selection - not on 781d 
 Conversions 
 For ISA device only 
 true if following fields are valid 
 In jiffies 
 for secondary I2C addresses 
 array of 2 pointers to subclients 
 Register value - 8 & 9 for 782D only 
 Register value - 8 & 9 for 782D only 
 Register value - 8 & 9 for 782D only 
 Register value 
 Register value 
 Register value 
 Register value 
 Register value 
 Register value 
 Register value 
 Register value 
 Register encoding, shifted right 
 Register encoding, combined 
 Register encoding, combined 
 Register encoding, combined 
 Register value 
 Boolean 
	u16 sens[3];		
				  782D783S only.
				  1 = pentium diode; 2 = 3904 diode;
				  4 = thermistor
 following are the sysfs callback functions 
 TEMP2 and TEMP3  \
 TEMP1  \
 TEMP2 and TEMP3  \
 TEMP1  \
 The W83781D has a single alarm bit for temp2 and temp3 
 preserve beep enable 
 The W83781D has a single beep bit for temp2 and temp3 
  Note: we save and restore the fan minimum here, because its value is
  determined in part by the fan divisor.  This follows the principle of
  least surprise; the user doesn't expect the fan minimum to change just
  because the divisor changed.
 Save fan_min 
 w83781d and as99127f don't have extended divisor bits 
 Restore fan_min 
 only PWM2 can be enableddisabled 
 PIICeleron diode 
 3904 
 thermistor 
  Assumes that adapter is of I2C, not ISA variety.
  OTHERWISE DON'T CALL THIS
 Undo inits in case of errors 
 No clean up is done on error, it's up to the caller 
 Return 0 if detection is successful, -ENODEV otherwise 
	
	  We block updates of the ISA device to minimize the risk of
	  concurrent access to the same W83781D chip through different
	  interfaces.
 Check for Winbond or Asus ID if in bank 0 
	
	  If Winbond SMBus, check address at 0x48.
	  Asus doesn't support, except for as99127f rev.2
 Put it now into bank 0 and Vendor ID High Byte 
 Get the vendor ID 
 Determine the chip type. 
 attach secondary i2c lm75-like clients 
 Initialize the chip 
 Register sysfs hooks 
 switch banks 
 switch to subclient 
 convert from ISA to LM75 I2C addresses 
 TEMP 
 CONFIG 
 HYST 
 OVER 
 switch banks 
 switch to subclient 
 convert from ISA to LM75 I2C addresses 
 CONFIG 
 HYST 
 OVER 
	if (reset && type != as99127f) { 
					   this resets registers we don't have
					   documentation for on the as99127f
		
		  Resetting the chip has been the default for a long time,
		  but it causes the BIOS initializations (fan clock dividers,
		  thermal sensor types...) to be lost, so it is now optional.
		  It might even go away if nobody reports it as being useful,
		  as I see very little reason why this would be needed at
		  all.
 save these registers 
		
		  Reset all except Watchdog values and last conversion values
		  This sets fan-divs to 2, among others
		
		  Restore the registers and disable power-on abnormal beep.
		  This saves FAN 123 inputoutput values set by BIOS.
		
		  Disable master beep-enable (reset turns it on).
		  Individual beep_mask should be reset to off but for some
		  reason disabling this bit helps some people not get beeped
	
	  Disable power-on abnormal beep, as advised by the datasheet.
	  Already done if reset=1.
 Enable temp2 
 Enable temp3 
 Start monitoring 
 A few vars need to be filled upon startup 
 783S has no in1 
 Only W83782D on SMBus has PWM3 and PWM4 
 Only PWM2 can be disabled 
			
			  No real-time status registers, fall back to
			  interrupt status registers
 LIST END  }
  ISA related code
 ISA device, if found 
  I2C devices get this name attribute automatically, but for ISA devices
  we must create it by ourselves.
 Returns 1 if the I2C chip appears to be an alias of the ISA chip 
 No ISA chip 
 Address doesn't match 
 Chip type doesn't match 
	
	  We compare all the limit registers, the config register and the
	  interrupt mask registers
  The SMBus locks itself, usually, but nothing may access the Winbond between
  bank switches. ISA access must always be locked explicitly!
  We ignore the W83781D BUSY flag at this moment - it could lead to deadlocks,
  would slow down the W83781D access and should not be necessary.
  There are some ugly typecasts here, but the good news is - they should
  nowhere else be necessary!
 Reserve the ISA region 
 Initialize the W83781D chip 
 Register sysfs hooks 
 return 1 if a supported chip is found, 0 otherwise 
	
	  Some boards declare base+0 to base+7 as a PNP device, some base+4
	  to base+7 and some base+5 to base+6. So we better request each port
	  individually for the probing phase.
	
	  We need the timeouts for at least some W83781D-like
	  chips. But only if we read 'undefined' registers.
	
	  We should be able to change the 7 LSB of the address port. The
	  MSB (busy flag) should be clear initially, set after the write.
 We found a device, now see if it could be a W83781D 
 Not a valid I2C address 
 The busy flag should be clear again 
 Determine the chip type 
 W83781D 
 W83782D 
 Sets global pdev as a side effect 
 !CONFIG_ISA 
 CONFIG_ISA 
	
	  We register the ISA device first, so that we can skip the
	  registration of an I2C interface to the same device.
 SPDX-License-Identifier: GPL-2.0-or-later
   w83627ehf - Driver for the hardware monitoring functionality of
 		the Winbond W83627EHF Super-IO chip
   Copyright (C) 2005-2012  Jean Delvare <jdelvare@suse.de>
   Copyright (C) 2006  Yuan Mu (Winbond),
 			Rudolf Marek <r.marek@assembler.cz>
 			David Hubbard <david.c.hubbard@gmail.com>
 			Daniel J Blueman <daniel.blueman@gmail.com>
   Copyright (C) 2010  Sheng-Yuan Huang (Nuvoton) (PS00)
   Shamelessly ripped from the w83627hf driver
   Copyright (C) 2003  Mark Studebaker
   Thanks to Leon Moonen, Steve Cliffe and Grant Coady for their help
   in testing and debugging this driver.
   This driver also supports the W83627EHG, which is the lead-free
   version of the W83627EHF.
   Supports the following chips:
   Chip        #vin    #fan    #pwm    #temp  chip IDs       man ID
   w83627ehf   10      5       4       3      0x8850 0x88    0x5ca3
 					       0x8860 0xa1
   w83627dhg    9      5       4       3      0xa020 0xc1    0x5ca3
   w83627dhg-p  9      5       4       3      0xb070 0xc1    0x5ca3
   w83627uhg    8      2       2       3      0xa230 0xc1    0x5ca3
   w83667hg     9      5       3       3      0xa510 0xc1    0x5ca3
   w83667hg-b   9      5       3       4      0xb350 0xc1    0x5ca3
 used to set data->name = w83627ehf_device_names[data->sio_kind] 
  Super-IO constants and functions
 Logical device select 
 Device ID (2 bytes) 
 GPIO3, GPIO4 selection 
 Logical device enable 
 Logical device address (2 bytes) 
 VID control 
 VID data 
  ISA constants
  Not currently used:
  REG_MAN_ID has the value 0x5ca3 for all supported chips.
  REG_CHIP_ID == 0x880xa10xc1 depending on chip model.
  REG_MAN_ID is at port 0x4f
  REG_CHIP_ID is at port 0x58
 The W83627EHF registers for nr=7,8,9 are in bank 5 
 Fan clock dividers are spread over the following five registers 
 SMI STATUS #2 
 SMI MASK #3 
 SmartFan registers 
 DC or PWM output fan configuration 
 SYS FAN0 output mode and PWM mode 
 CPU FAN0 output mode and PWM mode 
 AUX FAN mode 
 CPU FAN1 mode 
 FAN Duty Cycle, be used to control 
 Advanced Fan control, some values are common for all fans 
  Conversions
 1 is PWM mode, output in ms 
  Some of the voltage inputs have internal scaling, the tables below
  contain 8 (the ADC LSB in mV)  scaling factor  100
  Data structures and manipulation thereof
 IO base of hw monitor block 
 true if following fields are valid 
 In jiffies 
 Register values 
 current register bank 
 number of in inputs we have 
 Register value 
 Register value 
 Register value 
 some fan inputs can be disabled 
 some fans don't have min register 
 0->DC variable voltage, 1->PWM variable duty cycle 
	u8 pwm_enable[4];  1->manual
			    2->thermal cruise mode (also called SmartFan I)
			    3->fan speed cruise mode
			    4->variable thermal cruise (also called
			    SmartFan III)
			    5->enhanced variable thermal cruise (also called
			    SmartFan IV)
 original value of pwm_enable 
 number of pwm 
 minimum fan speed when spinning up 
 minimum fan speed when spinning down 
 time at minimum before disabling fan 
 maximum fan speed 
 rate of change output value 
 Remember extra register values over suspendresume 
  On older chips, only registers 0x50-0x5f are banked.
  On more recent chips, all registers are banked.
  Assume that is the case and set the bank number for each access.
  Cache the bank number so it only needs to be set if it changes.
 We left-align 8-bit temperature values to make the code simpler 
 This function assumes that the caller holds data->update_lock 
 fan5 input control bit is write only, compute the value 
 fan5 input control bit is write only, compute the value 
 shut up the compiler 
 pwmcfg, tolerance mapped for i=0, i=1 to same reg 
 Fan clock dividers 
 Measured voltages and limits 
 Measured fan speeds and limits 
			
			  If we failed to measure the fan speed and clock
			  divider can be increased, let's try that for next
			  time
 Preserve min limit if possible 
 Measured temperatures and limits 
 No min limit, alarm disabled 
 No change 
		
		  Speed below this value cannot possibly be represented,
		  even with the highest divider (128)
 128 == (1 << 7) 
		
		  Speed above this value cannot possibly be represented,
		  even with the lowest divider (1)
 1 == (1 << 0) 
		
		  Automatically pick the best divider, i.e. the one such
		  that the min limit will correspond to a register value
		  in the 96..192 range
	
	  Write both the fan clock divider (if it changed) and the new
	  fan min (unconditionally)
 Give the chip time to sample a new speed value 
 Limit the temp to 0C - 15C 
 Smart Fan registers 
  pwm1 and pwm3 don't support max and step settings on all chips.
  Need to check support while generatingremoving attribute files.
 Case open detection 
 Force cache refresh 
 Not sensor 
 if fan3 and fan4 are enabled create the files for them 
 These groups handle non-standard attributes used in this device 
  Driver and device management
 Get the monitoring functions started 
 Start monitoring is needed 
 Enable temperature sensors if needed 
 Enable VBAT monitoring if needed 
 Get thermal sensor types 
 Digital source overrides analog type 
 thermistor 
 The W83627UHG is simple, only two fan inputs, no config 
 fan1 and fan2 
 fan4 and fan5 share some pins with the GPIO and serial flash 
 fan1 and fan2 
	
	  It looks like fan4 and fan5 pins can be alternatively used
	  as fan onoff switches, but fan5 control is write only :
	  We assume that if the serial interface is disabled, designers
	  connected fan5 as input unless they are emitting log 1, which
	  is not the default.
 channel 0.., name 1.. 
 channel 0.., name 1.. 
 channel 0.., name 0.. 
 channel 0.., name 1.. 
 Shouldn't happen 
 Shouldn't happen 
 shouldn't happen 
 Nothing else should be read as a string 
 Force initial bank selection 
 627EHG and 627EHF have 10 voltage inputs; 627DHG and 667HG have 9 
 667HG has 3 pwms, and 627UHG has only 2 
 Default to 3 temperature inputs, code below will adjust as needed 
 Deal with temperature register setup first. 
		
		  Temperature sources are selected with bank 0, registers 0x49
		  and 0x4a.
		
		  W83667HG-B has another temperature register at 0x7e.
		  The temperature source is selected with register 0x7d.
		  Support it if the source differs from already reported
		  sources.
		
		  Chip supports either AUXTIN or VIN3. Try to find out which
		  one.
		
		  Temperature sources for temp2 and temp3 are selected with
		  bank 0, registers 0x49 and 0x4a.
 SYSTIN 
 Adjust to have the same mapping as other source registers 
 should never happen 
		
		  Skip temp3 if source is invalid or the same as temp1
		  or temp2.
 No limit regs 
 No VIN3 
 Temperature sources are fixed 
			
			  Chip supports either AUXTIN or VIN3. Try to find
			  out which one.
 Setup input voltage scaling factors 
 Initialize the chip 
 Read VID value 
		
		  W83667HG has different pins for VID input and output, so
		  we can get the VID input values directly at logical device D
		  0xe3.
			
			  Set VID input sensibility if needed. In theory the
			  BIOS should have set it, but in practice it's not
			  always the case. We only do it for the W83627EHFEHG
			  because the W83627DHG is more complex in this
			  respect.
 6 VID pins only 
 Read fan clock dividers immediately 
 Read pwm data to save original values 
 Force initial bank selection 
 Restore limits 
 Restore other settings 
 Force re-reading all values 
 w83627ehf_find() looks for a '627 in the Super-IO config space 
 We have a known chip, find the HWM IO address 
 Activate logical device if needed 
  when Super-IO functions move to a separate file, the Super-IO
  bus will manage the lifetime of the device and this module will only keep
  track of the w83627ehf driver.
	
	  initialize sio_data->kind and sio_data->sioreg.
	 
	  when Super-IO functions move to a separate file, the Super-IO
	  driver will probe 0x2e and 0x4e and auto-detect the presence of a
	  w83627ehf hardware monitor, and call probe()
 SPDX-License-Identifier: GPL-2.0-or-later
  pwm-fan.c - Hwmon driver for fans connected to PWM lines.
  Copyright (c) 2014 Samsung Electronics Co., Ltd.
  Author: Kamil Debski <k.debski@samsung.com>
 This handler assumes self resetting edge triggered interrupt. 
 thermal cooling device callbacks 
 We always have a PWM channel. 
	
	  __set_pwm assumes that MAX_PWM  (period - 1) fits into an unsigned
	  long. Check this here to prevent the fan running at a too low
	  frequency.
 Set duty cycle to maximum allowed and enable PWM output 
 We also have a FAN channel. 
 keep ctx->pwm_state unmodified for pwm_fan_resume() 
 SPDX-License-Identifier: GPL-2.0-or-later
  dme1737.c - Driver for the SMSC DME1737, Asus A8000, SMSC SCH311x, SCH5027,
              and SCH5127 Super-IO chips integrated hardware monitoring
              features.
  Copyright (c) 2007, 2008, 2009, 2010 Juerg Haefliger <juergh@gmail.com>
  This driver is an I2CISA hybrid, meaning that it uses the I2C bus to access
  the chip registers if a DME1737, A8000, or SCH5027 is found and the ISA bus
  if a SCH311x or SCH5127 chip is found. Both types of chips have very
  similar hardware monitoring capabilities but differ in the way they can be
  accessed.
 ISA device, if found 
 Module load parameters 
 Addresses to scan 
 ---------------------------------------------------------------------
  Registers
  The sensors are defined as follows:
  Voltages                          Temperatures
  --------                          ------------
  in0   +5VTR (+5V stdby)           temp1   Remote diode 1
  in1   Vccp  (proc core)           temp2   Internal temp
  in2   VCC   (internal +3.3V)      temp3   Remote diode 2
  in3   +5V
  in4   +12V
  in5   VTR   (+3.3V stby)
  in6   Vbat
  in7   Vtrip (sch5127 only)
 Voltages (in) numbered 0-7 (ix) 
 Temperatures (temp) numbered 0-2 (ix) 
  Voltage and temperature LSBs
  The LSBs (4 bits each) are stored in 5 registers with the following layouts:
     IN_TEMP_LSB(0) = [in5, in6]
     IN_TEMP_LSB(1) = [temp3, temp1]
     IN_TEMP_LSB(2) = [in4, temp2]
     IN_TEMP_LSB(3) = [in3, in0]
     IN_TEMP_LSB(4) = [in2, in1]
     IN_TEMP_LSB(5) = [res, in7]
 Fans numbered 0-5 (ix) 
 only for fan[4-5] 
 PWMs numbered 0-2, 4-5 (ix) 
 only for pwm[0-2] 
 only for pwm[0-2] 
  The layout of the ramp rate registers is different from the other pwm
  registers. The bits for the 3 PWMs are stored in 2 registers:
     PWM_RR(0) = [OFF3, OFF2,  OFF1,  RES,   RR1E, RR1-2, RR1-1, RR1-0]
     PWM_RR(1) = [RR2E, RR2-2, RR2-1, RR2-0, RR3E, RR3-2, RR3-1, RR3-0]
 only for pwm[0-2] 
 Thermal zones 0-2 
  The layout of the hysteresis registers is different from the other zone
  registers. The bits for the 3 zones are stored in 2 registers:
     ZONE_HYST(0) = [H1-3,  H1-2,  H1-1, H1-0, H2-3, H2-2, H2-1, H2-0]
     ZONE_HYST(1) = [H3-3,  H3-2,  H3-1, H3-0, RES,  RES,  RES,  RES]
  Alarm registers and bit mapping
  The 3 8-bit alarm registers will be concatenated to a single 32-bit
  alarm value [0, ALARM3, ALARM2, ALARM1].
 Miscellaneous registers 
 ---------------------------------------------------------------------
  Misc defines
 Chip identification 
 Device ID values (global configuration register index 0x20) 
 Length of ISA address segment 
 chip-dependent features 
 bit 0 
 bit 1 
 bit 2 
 bit 3 
 bit 4 
 bits 5-10 
 bits 11-16 
 bit 17 
 ---------------------------------------------------------------------
  Data structures and manipulation thereof
 for I2C devices only 
 for ISA devices only 
 true if following fields are valid 
 in jiffies 
 in jiffies 
 pointer to IN_NOMINAL array 
 Register values 
 Nominal voltage values 
  Voltage input
  Voltage inputs have 16 bits resolution, limit values have 8 bits
  resolution.
  Temperature input
  The register values represent temperatures in 2's complement notation from
  -127 degrees C to +127 degrees C. Temp inputs have 16 bits resolution, limit
  values have 8 bits resolution.
 Temperature range 
  Temperature hysteresis
  Register layout:
     reg[0] = [H1-3, H1-2, H1-1, H1-0, H2-3, H2-2, H2-1, H2-0]
     reg[1] = [H3-3, H3-2, H3-1, H3-0, xxxx, xxxx, xxxx, xxxx]
 Fan input RPM 
  Fan TPC (tach pulse count)
  Converts a register value to a TPC multiplier or returns 0 if the tachometer
  is configured in legacy (non-tpc) mode
  Fan type
  The type of a fan is expressed in number of pulses-per-revolution that it
  emits
 Fan max RPM 
  PWM enable
  Register to enable mapping:
  000:  2  fan on zone 1 auto
  001:  2  fan on zone 2 auto
  010:  2  fan on zone 3 auto
  011:  0  fan full on
  100: -1  fan disabled
  101:  2  fan on hottest of zones 2,3 auto
  110:  2  fan on hottest of zones 1,2,3 auto
  111:  1  fan in manual mode
  PWM auto channels zone
  Register to auto channels zone mapping (ACZ is a bitfield with bit x
  corresponding to zone x+1):
  000: 001  fan on zone 1 auto
  001: 010  fan on zone 2 auto
  010: 100  fan on zone 3 auto
  011: 000  fan full on
  100: 000  fan disabled
  101: 110  fan on hottest of zones 2,3 auto
  110: 111  fan on hottest of zones 1,2,3 auto
  111: 000  fan in manual mode
 PWM frequency 
 the first two cases are special - stupid chip design! 
  PWM ramp rate
  Register layout:
     reg[0] = [OFF3,  OFF2,  OFF1,  RES,   RR1-E, RR1-2, RR1-1, RR1-0]
     reg[1] = [RR2-E, RR2-2, RR2-1, RR2-0, RR3-E, RR3-2, RR3-1, RR3-0]
 PWM ramp rate enable 
  PWM minoff
  The PWM minoff bits are part of the PMW ramp rate register 0 (see above for
  the register layout).
 ---------------------------------------------------------------------
  Device IO access
  ISA access is performed through an indexdata register pair and needs to
  be protected by a mutex during runtime (not required for initialization).
  We use data->update_lock for this and need to ensure that we acquire it
  before calling dme1737_read or dme1737_write.
 I2C device 
 ISA device 
 I2C device 
 ISA device 
 Enable a Vbat monitoring cycle every 10 mins 
 Sample register contents every 1 sec 
 In (voltage) registers 
			
			  Voltage inputs are stored as 16 bit values even
			  though they have only 12 bits resolution. This is
			  to make it consistent with the temp inputs.
 Temp registers 
			
			  Temp inputs are stored as 16 bit values even
			  though they have only 12 bits resolution. This is
			  to take advantage of implicit conversions between
			  register values (2's complement) and temp values
			  (signed decimal).
		
		  In and temp LSB registers
		  The LSBs are latched when the MSBs are read, so the order in
		  which the registers are read (MSB first, then LSB) is
		  important!
 Fan registers 
			
			  Skip reading registers if optional fans are not
			  present
 fan_max exists only for fan[5-6] 
 PWM registers 
			
			  Skip reading registers if optional PWMs are not
			  present
 pwm_config and pwm_min exist only for pwm[1-3] 
 Thermal zone registers 
 Skip reading registers if zone3 is not present 
 sch5127 zone2 registers are special 
 Alarm registers 
		
		  Bit 7 tells us if the other alarm registers are non-zero and
		  therefore also need to be read
		
		  The ISA chips require explicit clearing of alarm bits.
		  Don't worry, an alarm will come back if the condition
		  that causes it still exists
 ---------------------------------------------------------------------
  Voltage sysfs attributes
  ix = [0-7]
 ---------------------------------------------------------------------
  Temperature sysfs attributes
  ix = [0-2]
 ---------------------------------------------------------------------
  Zone sysfs attributes
  ix = [0-2]
 check config2 for non-standard temp-to-zone mapping 
 pwm_freq holds the temp range bits in the upper nibble 
 Refresh the cache 
 Modify the temp hyst value 
 Refresh the cache 
		
		  Modify the temp range value (which is stored in the upper
		  nibble of the pwm_freq register)
 ---------------------------------------------------------------------
  Fan sysfs attributes
  ix = [0-5]
 only valid for fan[5-6] 
 only valid for fan[1-4] 
 Refresh the cache 
 Modify the fan min value 
 Only valid for fan[5-6] 
 Only valid for fan[1-4] 
 ---------------------------------------------------------------------
  PWM sysfs attributes
  ix = [0-4]
 pwm[5-6] hard-wired to manual mode 
 Only valid for pwm[1-3] 
 Only valid for pwm[1-3] 
 Only valid for pwm[1-3] 
 Only valid for pwm[1-3] 
 Only valid for pwm[1-3] 
 hard-wired 
 Only valid for pwm[1-3] 
 Refresh the cache 
 Bail out if no change 
 Do some housekeeping if we are currently in auto mode 
 Save the current zone channel assignment 
 Save the current ramp rate state and disable it 
 Set the new PWM mode 
 Change permissions of pwm[ix] to read-only 
 Turn fan fully on 
 Turn on manual mode 
 Change permissions of pwm[ix] to read-writeable 
 Change permissions of pwm[ix] to read-only 
			
			  Turn on auto mode using the saved zone channel
			  assignment
 Enable PWM ramp rate if previously enabled 
 Only valid for pwm[1-3] 
 Refresh the cache 
 Set the ramp rate value 
		
		  Enabledisable the feature only if the associated PWM
		  output is in automatic mode.
 Only valid for pwm[1-3] 
 Refresh the cache 
			
			  PWM is already in auto mode so update the temp
			  channel assignment
			
			  PWM is not in auto mode so we save the temp
			  channel assignment for later use
 Only valid for pwm[1-3] 
 Refresh the cache 
		
		  There are only 2 values supported for the auto_pwm_min
		  value: 0 or auto_point1_pwm. So if the temperature drops
		  below the auto_point1_temp_hyst value, the fan either turns
		  off or runs at auto_point1_pwm duty-cycle.
 Only valid for pwm[1-3] 
 ---------------------------------------------------------------------
  Miscellaneous sysfs attributes
 ---------------------------------------------------------------------
  Sysfs device attribute defines and structs
 Voltages 0-7 
 Temperatures 1-3 
 Zones 1-3 
 Fans 1-4 
 Fans 5-6 
 PWMs 1-3 
 PWMs 5-6 
 Misc 
 for ISA devices 
  This struct holds all the attributes that are always present and need to be
  created unconditionally. The attributes that need modification of their
  permissions are created read-only and write permissions are added or removed
  on the fly when required
 Voltages 
 Temperatures 
 Zones 
  The following struct holds temp offset attributes, which are not available
  in all chips. The following chips support them:
  DME1737, SCH311x
  The following struct holds VID related attributes, which are not available
  in all chips. The following chips support them:
  DME1737
  The following struct holds temp zone 3 related attributes, which are not
  available in all chips. The following chips support them:
  DME1737, SCH311x, SCH5027
  The following struct holds temp zone hysteresis related attributes, which
  are not available in all chips. The following chips support them:
  DME1737, SCH311x
  The following struct holds voltage in7 related attributes, which
  are not available in all chips. The following chips support them:
  SCH5127
  The following structs hold the PWM attributes, some of which are optional.
  Their creation depends on the chip configuration which is determined during
  module load.
  The following struct holds auto PWM min attributes, which are not available
  in all chips. Their creation depends on the chip type which is determined
  during module load.
  The following structs hold the fan attributes, some of which are optional.
  Their creation depends on the chip configuration which is determined during
  module load.
  The permissions of the following zone attributes are changed to read-
  writeable if the chip is not locked. Otherwise they stay read-only.
  The permissions of the following zone 3 attributes are changed to read-
  writeable if the chip is not locked. Otherwise they stay read-only.
  The permissions of the following PWM attributes are changed to read-
  writeable if the chip is not locked and the respective PWM is available.
  Otherwise they stay read-only.
  Pwm[1-3] are read-writeable if the associated pwm is in manual mode and the
  chip is not locked. Otherwise they are read-only.
 ---------------------------------------------------------------------
  Super-IO functions
 ---------------------------------------------------------------------
  Device initialization
 Create a name attribute for ISA devices 
 Create standard sysfs attributes 
 Create chip-dependent sysfs attributes 
 Create fan sysfs attributes 
 Create PWM sysfs attributes 
	
	  Inform if the device is locked. Otherwise change the permissions of
	  selected attributes from read-only to read-writeable.
 Change permissions of zone sysfs attributes 
 Change permissions of chip-dependent sysfs attributes 
 Change permissions of PWM sysfs attributes 
 Change permissions of pwm[1-3] if in manual mode 
 Point to the right nominal voltages array 
 Inform if part is not monitoringstarted 
 Force monitoring 
 Inform if part is not ready 
	
	  Determine which optional fan and pwm features are enabled (only
	  valid for I2C devices)
 I2C chip 
 Check if optional fan3 input is enabled 
		
		  Fan4 and pwm3 are only available if the client's I2C address
		  is the default 0x2e. Otherwise the IOs associated with
		  these functions are used for addr enableselect.
		
		  Determine which of the optional fan[5-6] and pwm[5-6]
		  features are enabled. For this, we need to query the runtime
		  registers through the Super-IO LPC interface. Try both
		  config ports 0x2e and 0x4e.
 Fan[1-2] and pwm[1-2] are present in all chips 
 Chip-dependent features 
 Inform if fan-to-pwm mapping differs from the default 
 I2C chip 
 ISA chip 
	
	  Switch pwm[1-3] to manual mode if they are currently disabled and
	  set the duty-cycles to 0% (which is identical to the PWMs being
	  disabled).
 Initialize the default PWM auto channels zone (acz) assignments 
 pwm1 -> zone1 
 pwm2 -> zone2 
 pwm3 -> zone3 
 Set VRM 
 ---------------------------------------------------------------------
  I2C device detection and registration
	
	  Check device ID
	  We currently know about two kinds of DME1737 and SCH5027.
 Select logical device A (runtime registers) 
 Get the base address of the runtime registers 
	
	  Read the runtime registers to determine which optional features
	  are enabled and available. Bits [3:2] of registers 0x43-0x46 are set
	  to '10' if the respective feature is enabled.
 fan6 
 pwm6 
 fan5 
 pwm5 
 Return 0 if detection is successful, -ENODEV otherwise 
 Initialize the DME1737 chip 
 Create sysfs files 
 Register device 
 ---------------------------------------------------------------------
  ISA device detection and registration
	
	  Check device ID
	  We currently know about SCH3112, SCH3114, SCH3116, and SCH5127
 Select logical device A (runtime registers) 
 Get the base address of the runtime registers 
	
	  Access to the hwmon registers is through an indexdata register
	  pair located at offset 0x700x71.
 Skip chip detection if module is loaded with force_id parameter 
 Initialize the mutex 
 Initialize the chip 
 Create sysfs files 
 Register device 
 ---------------------------------------------------------------------
  Module initialization and cleanup
 Return 0 if we didn't find an ISA device 
 Sets global pdev as a side effect 
