 SPDX-License-Identifier: MIT
  Copyright 2021 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  DOC: DC FPU manipulation overview
  DC core uses FPU operations in multiple parts of the code, which requires a
  more specialized way to manage these areas' entrance. To fulfill this
  requirement, we created some wrapper functions that encapsulate
  kernel_fpu_beginend to better fit our need in the display component. In
  summary, in this file, you can find functions related to FPU operation
  management.
  dc_assert_fp_enabled - Check if FPU protection is enabled
  This function tells if the code is already under FPU protection or not. A
  function that works as an API for a set of FPU operations can use this
  function for checking if the caller invoked it after DC_FP_START(). For
  example, take a look at dcn20_fpu.c file.
  dc_fpu_begin - Enables FPU protection
  @function_name: A string containing the function name for debug purposes
    (usually __func__)
  @line: A line number where DC_FP_START was invoked for debug purpose
    (usually __LINE__)
  This function is responsible for managing the use of kernel_fpu_begin() with
  the advantage of providing an event trace for debugging.
  Note: Do not call this function directly; always use DC_FP_START().
  dc_fpu_end - Disable FPU protection
  @function_name: A string containing the function name for debug purposes
  @line: A-line number where DC_FP_END was invoked for debug purpose
  This function is responsible for managing the use of kernel_fpu_end() with
  the advantage of providing an event trace for debugging.
  Note: Do not call this function directly; always use DC_FP_END().
  Copyright 2015 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 dm_helpers_parse_edid_caps
  Parse edid caps
  @edid:	[in] pointer to edid
   edid_caps:	[in] pointer to edid caps
  @return
 	void
	 One of the four detailed_timings stores the monitor name. It's
 number of active streams 
 end of vcp_id table 
  Writes payload allocation table in immediate downstream device.
	 Accessing the connector state is required for vcpi_slots allocation
	  and directly relies on behaviour in commit check
	  that blocks before commit guaranteeing that the state
 It's OK for this to fail 
	 mst_mgr->->payloads are VC payload notify MST branch using DPCD or
	  AUX message. The sequence is slot 1-63 allocated sequence for each
	  stream. AMD ASIC stream slot allocation should follow the same
  poll pending down reply
  Clear payload allocation table before enable MST DP link.
  Polls for ACT (allocation change trigger) handled and sends
  ALLOCATE_PAYLOAD message.
 It's OK for this to fail 
 No context, redirect to dmesg. 
 Measure the output. 
 Reallocate the string buffer as needed. 
 Write the formatted string to the log buffer. 
	 some dongles read edid incorrectly the first time,
	  do check sum and retry to make sure read correct edid.
 DP Compliance Test 4.2.2.6 
 We don't need the original edid anymore 
		 connector->display_info will be parsed from EDID and saved
		  into drm_connector->display_info from edid by call stack
		  below:
		  drm_parse_ycbcr420_deep_color_info
		  drm_parse_hdmi_forum_vsdb
		  drm_parse_cea_ext
		  drm_add_display_info
		  drm_connector_update_edid_property
		 
		  drm_connector->display_info will be used by amdgpu_dm funcs,
		  like fill_stream_properties_from_drm_display_mode
 DP Compliance Test 4.2.2.3 
 TODO: something 
 TODO:
amdgpu_device_gpu_recover(dc_context->driver-context, NULL);
 add da to list in dm 
 walk the da list in DM 
 TODO: virtual DPCD 
 FPGA programming for this clock in diags framework that
 needs to go through dm layer, therefore leave dummy interace here
 TODO: add peridic detection implementation 
  Copyright 2015 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  DOC: overview
  DM provides another layer of IRQ management on top of what the base driver
  already provides. This is something that could be cleaned up, and is a
  future TODO item.
  The base driver provides IRQ source registration with DRM, handler
  registration into the base driver's IRQ table, and a handler callback
  amdgpu_irq_handler(), with which DRM calls on interrupts. This generic
  handler looks up the IRQ table, and calls the respective
  &amdgpu_irq_src_funcs.process hookups.
  What DM provides on top are two IRQ tables specifically for top-half and
  bottom-half IRQ handling, with the bottom-half implementing workqueues:
  - &amdgpu_display_manager.irq_handler_list_high_tab
  - &amdgpu_display_manager.irq_handler_list_low_tab
  They override the base driver's IRQ table, and the effect can be seen
  in the hooks that DM provides for &amdgpu_irq_src_funcs.process. They
  are all set to the DM generic handler amdgpu_dm_irq_handler(), which looks up
  DM's IRQ tables. However, in order for base driver to recognize this hook, DM
  still needs to register the IRQ with the base driver. See
  dce110_register_irq_handlers() and dcn10_register_irq_handlers().
  To expose DC's hardware interrupt toggle to the base driver, DM implements
  &amdgpu_irq_src_funcs.set hooks. Base driver calls it through
  amdgpu_irq_update() to enable or disable the interrupt.
  Private declarations.
  struct amdgpu_dm_irq_handler_data - Data for DM interrupt handlers.
  @list: Linked list entry referencing the nextprevious handler
  @handler: Handler function
  @handler_arg: Argument passed to the handler when triggered
  @dm: DM which this handler belongs to
  @irq_source: DC interrupt source that this handler is registered for
  @work: work struct
 DAL irq source which registered for this interrupt. 
  Private functions.
  dm_irq_work_func() - Handle an IRQ outside of the interrupt handler proper.
  @work: work struct
	 Call a DAL subcomponent which registered for interrupt notification
	  at INTERRUPT_LOW_IRQ_CONTEXT.
  Remove a handler and return a pointer to handler list from which the
  handler was removed.
 Found our handler. Remove it from the list. 
		 Not necessarily an error - caller may not
  unregister_all_irq_handlers() - Cleans up handlers from the DM IRQ table
  @adev: The base driver device containing the DM device
  Go through low and high context IRQ tables and deallocate handlers.
  Public functions.
  Note: caller is responsible for input validation.
  amdgpu_dm_irq_register_interrupt() - Register a handler within DM.
  @adev: The base driver device containing the DM device.
  @int_params: Interrupt parameters containing the source, and handler context
  @ih: Function pointer to the interrupt handler to register
  @handler_args: Arguments passed to the handler when the interrupt occurs
  Register an interrupt handler for the given IRQ source, under the given
  context. The context can either be high or low. High context handlers are
  executed directly within ISR context, while low context is executed within a
  workqueue, thereby allowing operations that sleep.
  Registered handlers are called in a FIFO manner, i.e. the most recently
  registered handler will be called first.
  Return: Handler data &struct amdgpu_dm_irq_handler_data containing the IRQ
          source, handler function, and args
 Lock the list, add the handler. 
	 This pointer will be stored by code which requested interrupt
	  registration.
	  The same pointer will be needed in order to unregister the
  amdgpu_dm_irq_unregister_interrupt() - Remove a handler from the DM IRQ table
  @adev: The base driver device containing the DM device
  @irq_source: IRQ source to remove the given handler from
  @ih: Function pointer to the interrupt handler to unregister
  Go through both low and high context IRQ tables, and find the given handler
  for the given irq source. If found, remove it. Otherwise, do nothing.
		 If we got here, it means we searched all irq contexts
  amdgpu_dm_irq_init() - Initialize DM IRQ management
  @adev:  The base driver device containing the DM device
  Initialize DM's high and low context IRQ tables.
  The N by M table contains N IRQ sources, with M
  &struct amdgpu_dm_irq_handler_data hooked together in a linked list. The
  list_heads are initialized here. When an interrupt n is triggered, all m
  handlers are called in sequence, FIFO according to registration order.
  The low context table requires special steps to initialize, since handlers
  will be deferred to a workqueue. See &struct irq_list_head.
 low context handler list init 
 high context handler init 
  amdgpu_dm_irq_fini() - Tear down DM IRQ management
  @adev: The base driver device containing the DM device
  Flush all work within the low context IRQ table.
		 The handler was removed from the table,
		  it means it is safe to flush all the 'work'
 Deallocate handlers from the table. 
	
	  Disable HW interrupt  for HPD and HPDRX only since FLIP and VBLANK
	  will be disabled from manage_dm_interrupts on disable CRTC.
 re-enable short pulse interrupts HW interrupt 
	
	  Renable HW interrupt  for HPD and only since FLIP and VBLANK
	  will be enabled from manage_dm_interrupts on enable CRTC.
  amdgpu_dm_irq_schedule_work - schedule all work items registered for the
  "irq_source".
get the amdgpu_dm_irq_handler_data of first item pointed by handler_list
allocate a new amdgpu_dm_irq_handler_data
copy new amdgpu_dm_irq_handler_data members from handler_data
  amdgpu_dm_irq_immediate_work
  Callback high irq work immediately, don't send to work queue
		 Call a subcomponent which registered for immediate
  amdgpu_dm_irq_handler - Generic DM IRQ handler
  @adev: amdgpu base driver device containing the DM device
  @source: Unused
  @entry: Data about the triggered interrupt
  Calls all registered high irq work immediately, and schedules work for low
  irq. The DM IRQ table is used to find the corresponding handlers.
 Call high irq work immediately 
Schedule low_irq work 
  amdgpu_dm_hpd_init - hpd setup callback.
  @adev: amdgpu_device pointer
  Setup the hpd pins used by the card (evergreen+).
  Enable the pin, set the polarity, and enable the hpd interrupts.
  amdgpu_dm_hpd_fini - hpd tear down callback.
  @adev: amdgpu_device pointer
  Tear down the hpd pins used by the card (evergreen+).
  Disable the hpd interrupts.
  Copyright 2015 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 power component interfaces 
  Copyright 2021 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  amdgpu_dm_set_psr_caps() - set link psr capabilities
  @link: link
  amdgpu_dm_link_setup_psr() - configure psr link
  @stream: stream state
  Return: true if success
  amdgpu_dm_psr_enable() - enable psr fw
  @stream: stream state
  Return: true if success
	 Calculate number of static frames before generating interrupt to
	  enter PSR.
 Init fail safe of 2 frames static
	 Round up
	  Calculate number of frames such that at least 30 ms of time has
	  passed.
  amdgpu_dm_psr_disable() - disable psr fw
  @stream:  stream state
  Return: true if success
  amdgpu_dm_psr_disable() - disable psr fw
  if psr is enabled on any stream
  Return: true if success
  Copyright 2015 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 Configuration will be deferred to stream enable. 
 Enable CRTC CRC generation if necessary. 
 Configure dithering 
		
		  Need to wait for all outstanding programming to complete
		  in commit tail since it can modify CRC related fields and
		  hardware state. Since we're holding the CRTC lock we're
		  guaranteed that no other commit work can be queued off
		  before we modify the state below.
	
	  USER REQ SRC | CURRENT SRC | BEHAVIOR
	  -----------------------------
	  None         | None        | Do nothing
	  None         | CRTC        | Disable CRTC CRC, set default to dither
	  None         | DPRX        | Disable DPRX CRC, need 'aux', set default to dither
	  None         | CRTC DITHER | Disable CRTC CRC
	  None         | DPRX DITHER | Disable DPRX CRC, need 'aux'
	  CRTC         | XXXX        | Enable CRTC CRC, no dither
	  DPRX         | XXXX        | Enable DPRX CRC, need 'aux', no dither
	  CRTC DITHER  | XXXX        | Enable CRTC CRC, set dither
	  DPRX DITHER  | XXXX        | Enable DPRX CRC, need 'aux', set dither
	
	  Reading the CRC requires the vblank interrupt handler to be
	  enabled. Keep a reference until CRC capture stops.
 Reset crc_skipped on dm state 
  amdgpu_dm_crtc_handle_crc_irq: Report to DRM the CRC on given CRTC.
  @crtc: DRM CRTC object.
  This function should be called at the end of a vblank, when the fb has been
  fully processed through the pipe.
 Early return if CRC capture is not enabled. 
	
	  Since flipping and crc enablement happen asynchronously, we - more
	  often than not - will be returning an 'uncooked' crc on first frame.
	  Probably because hw isn't ready yet. For added security, skip the
	  first two CRC values.
 Early return if CRC capture is not enabled. 
 take 3 lines margin
  Copyright 2019 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 Execute and wait for queue to become empty again. 
 Requeue the command. 
 TODO: Add wait command -- poll register for ACK
 Wait up to a second for PHY init. 
 Initialization OK 
			
			  Server likely initialized or we don't have
			  DMCUB HW support - this won't end.
 Continue spinning so we don't hang the ASIC. 
  Copyright 2017 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  dc_helper.c
   Created on: Aug 30, 2016
       Author: agrodzov
 gather all bits valuemask getting updated in this register 
 flush command if buffer is full 
 flush command if buffer is full 
 pack commands 
 todo: return void so we can decouple code running in driver from register states 
 mmio write directly 
 mmio write directly 
 todo: return void so we can decouple code running in driver from register states 
 note:  va version of this is pretty bad idea, since there is a output parameter pass by pointer
  compiler won't be able to check for size match and is prone to stack corruption type of bugs
uint32_t generic_reg_get(const struct dc_context ctx,
		uint32_t addr, int n, ...)
{
	uint32_t shift, mask;
	uint32_t field_value;
	uint32_t reg_val;
	int i = 0;
	reg_val = dm_read_reg(ctx, addr);
	va_list ap;
	va_start(ap, n);
	while (i < n) {
		shift = va_arg(ap, uint32_t);
		mask = va_arg(ap, uint32_t);
		field_value = va_arg(ap, uint32_t );
		field_value = get_reg_field_value_ex(reg_val, mask, shift);
		i++;
	}
	va_end(ap);
	return reg_val;
}
	
	  Something is terribly wrong if time out is > 3000ms.
	  3000ms is the maximum time needed for SMU to pass values back.
	  This value comes from experiments.
	 
 when reg read, there should not be any offload.
	 if reg sequence is supported and enabled, set flag to
	  indicate we want to have REG_SET, REG_UPDATE macro build
	  reg sequence command buffer rather than MMIO directly.
 caller sequence mismatch.  need to debug caller.  offload will not work!!! 
 callback to DM to poll for last submission done
  Copyright 2021 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  Copyright 2015 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 include DCE11.2 register header files 
  Private definitions
		 Revert MASTER_UPDATE_MODE to 0 because bios sets it 2
		  by default when command table is called
	 All registers used by dce11.2 match those in dce11 in offset and
	  structure
 Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 set register offset 
 set register offset with instance 
 why 8? 6 combo PHY PLL + 2 regular PLLs? 
 why 8? 6 combo PHY PLL + 2 regular PLLs? 
5124
 acquire new resources 
	do system clock  TODO PPLIB: after PPLIB implement,
	  then remove old way
 This is only for temporary 
 convert all the clock fro kHz to fix point mHz 
do memory clock
 convert all the clock fro kHz to fix point mHz  TODO: wloop data 
do memory clock
	 we don't need to call PPLIB for validation clock since they
	  also give us the highest sclk and highest mclk (UMA clock).
	  ALSO always convert UMA clock (from PPLIB)  to YCLK (HW formula):
	  YCLK = UMACLKm_memoryTypeMultiplier
	 Now notify PPLibSMU about which Watermarks sets they should select
	  depending on DPM state they are in. And update BW MGR GFX Engine and
	  Memory clock member variables for Watermarks calculations for each
	  Watermark Set
 5 GHz instead of data[7].clockInKHz to cover Overdrive 
 5 GHz instead of data[2].clockInKHz to cover Overdrive 
 5 GHz instead of data[7].clockInKHz to cover Overdrive 
 5 GHz instead of data[2].clockInKHz to cover Overdrive 
 Notify PP LibSMU which Watermarks to use for which clock ranges 
	
	   Resource + asic cap harcoding                
1.4 wa not applied by default
	
	   Create resources                             
 Create hardware sequencer 
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 Bit 0 - Display registers updated 
 Bit 2 - FBC_GRPH_COMP_EN register updated 
 Bit 3 - FBC_SRC_SEL register updated 
 Bit 4 - FBC_MIN_COMPRESSION register updated 
 Bit 5 - FBC_ALPHA_COMP_EN register updated 
 Bit 6 - FBC_ZERO_ALPHA_CHUNK_SKIP_EN register updated 
 Bit 7 - FBC_FORCE_COPY_TO_COMP_BUF register updated 
 Bit 24 - Memory write to region 0 defined by MC registers. 
 Bit 25 - Memory write to region 1 defined by MC registers 
 Bit 26 - Memory write to region 2 defined by MC registers 
 Bit 27 - Memory write to region 3 defined by MC registers. 
 Bit 28 - Memory write from any client other than MCIF 
 Bit 29 - CG statics screen signal is inactive 
LPT_ALIGNMENT (in bytes) = ROW_SIZE  #BANKS  # DRAM CHANNELS. 
LPT MC Config 
		 POSSIBLE VALUES for LPT NUM_PIPES (DRAM CHANNELS):
		  00 - 1 CHANNEL
		  01 - 2 CHANNELS
		  02 - 4 OR 6 CHANNELS
		  (Only for discrete GPU, NA for CZ)
		  03 - 8 OR 12 CHANNELS
		 The mapping for LPT NUM_BANKS is in
		  GRPH_CONTROL.GRPH_NUM_BANKS register field
		  Specifies the number of memory banks for tiling
		  purposes. Only applies to 2D and 3D tiling modes.
		  POSSIBLE VALUES:
		  00 - DCP_GRPH_NUM_BANKS_2BANK: ADDR_SURF_2_BANK
		  01 - DCP_GRPH_NUM_BANKS_4BANK: ADDR_SURF_4_BANK
		  02 - DCP_GRPH_NUM_BANKS_8BANK: ADDR_SURF_8_BANK
		 The mapping is in DMIF_ADDR_CALC.
		  ADDR_CONFIG_PIPE_INTERLEAVE_SIZE register field for
		  Carrizo specifies the memory interleave per pipe.
		  It effectively specifies the location of pipe bits in
		  the memory address.
		  POSSIBLE VALUES:
		  00 - ADDR_CONFIG_PIPE_INTERLEAVE_256B: 256 byte
		  interleave
		  01 - ADDR_CONFIG_PIPE_INTERLEAVE_512B: 512 byte
		  interleave
256B 
512B 
		 The mapping for LOW_POWER_TILING_ROW_SIZE is in
		  DMIF_ADDR_CALC.ADDR_CONFIG_ROW_SIZE register field
		  for Carrizo. Specifies the size of dram row in bytes.
		  This should match up with NOOFCOLS field in
		  MC_ARB_RAMCFG (ROW_SIZE = 4  2 ^^ columns).
		  This register DMIF_ADDR_CALC is not used by the
		  hardware as it is only used for addrlib assertions.
		  POSSIBLE VALUES:
		  00 - ADDR_CONFIG_1KB_ROW: Treat 1KB as DRAM row
		  boundary
		  01 - ADDR_CONFIG_2KB_ROW: Treat 2KB as DRAM row
		  boundary
		  02 - ADDR_CONFIG_4KB_ROW: Treat 4KB as DRAM row
4 KB 
 HW needs to do power measurement comparison. 
FBC_MIN_COMPRESSION 0 ==> 2:1 
                    1 ==> 4:1 
                    2 ==> 8:1 
                  0xF ==> 1:1 
		 Before enabling FBC first need to enable LPT if applicable
		  LPT state should always be changed (enabledisable) while FBC
 Keep track of enum controller_id FBC is attached to 
Toggle it as there is bug in HW 
 Turn off compression 
 Reset enum controller_id to undefined 
		 Whenever disabling FBC make sure LPT is disabled if LPT
 Check the hardware register 
 Check the hardware register 
 Clear content first. 
 Write address, HIGH has to be first. 
 Clear content first. 
 Write FBC Pitch. 
 Disable all pipes LPT Stutter 
 Disable Underlay pipe LPT Stutter 
 Disable LPT 
 Clear selection of Channel(s) containing Compressed Surface 
 Enable LPT Stutter from Display pipe 
 Enable Underlay pipe LPT Stutter 
	 Selection of Channel(s) containing Compressed Surface: 0xfffffff
	  will disable LPT.
		channels + 1,  not mentioned in programming guide,
 Enable LPT 
	 POSSIBLE VALUES for Low Power Tiling Mode:
	  00 - Use channel 0
	  01 - Use Channel 0 and 1
	  02 - Use Channel 0,1,2,3
	 case 2:
Use Channel 0 for LPT for DCE 11 
	 Program LOW_POWER_TILING_ROWS_PER_CHAN field which depends on
	  FBC compressed surface pitch.
	  LOW_POWER_TILING_ROWS_PER_CHAN = Roundup ((Surface Height 
	  Surface Pitch)  (Row Size  Number of Channels 
  DCE 11 Frame Buffer Compression Implementation
	 Disable region hit event, FBC_MEMORY_REGION_MASK = 0 (bits 16-19)
	  for DCE 11 regions cannot be used - does not work with SG
	 Setup events when to clear all CSM entries (effectively marking
	  current compressed data invalid)
	  For DCE 11 CSM metadata 11111 means - "Not Compressed"
	  Used as the initial value of the metadata sent to the compressor
	  after invalidation, to indicate that the compressor should attempt
	  to compress all chunks on the current pass.  Also used when the chunk
	  is not successfully written to memory.
	  When this CSM value is detected, FBC reads from the uncompressed
	  buffer. Set events according to passed in value, these events are
	  valid for DCE11:
	      - bit  0 - display register updated
	      - bit 28 - memory write from any client except from MCIF
	      - bit 29 - CG static screen signal is inactive
	  In addition, DCE11.1 also needs to set new DCE11.1 specific events
	  that are used to trigger invalidation on certain register changes,
	  for example enabling of Alpha Compression may trigger invalidation of
	  FBC once bit is set. These events are as follows:
	       - Bit 2 - FBC_GRPH_COMP_EN register updated
	       - Bit 3 - FBC_SRC_SEL register updated
	       - Bit 4 - FBC_MIN_COMPRESSION register updated
	       - Bit 5 - FBC_ALPHA_COMP_EN register updated
	       - Bit 6 - FBC_ZERO_ALPHA_CHUNK_SKIP_EN register updated
	       - Bit 7 - FBC_FORCE_COPY_TO_COMP_BUF register updated
 For DCE 11 always use one DRAM channel for LPT 
	 Check if this system has more than 1 DRAM channel; if only 1 then LPT
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 TODO store GPIO_MUX_CONTROL if we ever use it 
 TODO restore GPIO_MUX_CONTROL if we ever use it 
	 This is the public interface
	  where the input comes from client, not shifted yet
		 We use (EN) to faster switch (used in DDC GPIO).
		  So (A) is grounded, output is driven by (EN = 0)
		  to pull the line down (output == 0) and (EN=1)
		 turn off output enable, act as input pin;
		 turn on output enable, act as output pin;
		 grounding the A register then use the EN register bit
 program the pin as tri-state, pin is driven by HW 
 Interrupt mode supported only by HPD (IrqGpio) pins. 
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  Pre-requisites: headers required by header of this unit
  Post-requisites: headers required by this unit
  This unit
  @brief
  Public API
 No action if allocation failed during gpio construct
  @brief
  Creation and destruction
initialize hw_container union based on id
 TODO: currently gpio for sync and gsl does not get created, might need it later
TODO: might want to change it to init_ddc_clock
 TODO: currently gpio for sync and gsl does not get created, might need it later
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  Pre-requisites: headers required by header of this unit
  Header of this unit
  Post-requisites: headers required by this unit
  This unit
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  Pre-requisites: headers required by header of this unit
  Header of this unit
  Post-requisites: headers required by this unit
  This unit
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 in Interrupt mode we ask for SENSE bit 
 in any other modes, operate as normal GPIO 
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
		 On plug-in, there is a transient level on the pad
		  which must be discharged through the internal pull-down.
		  Enable internal pull-down, 2.5msec discharge time
			 let pins to get de-asserted
				 [anaumov] in DAL2, there was
 set the I2C pad mode 
			 read the register again,
set  DC_IO_aux_rxsel = 2'b01
 set the AUX pad mode 
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  Pre-requisites: headers required by header of this unit
  Header of this unit
  Post-requisites: headers required by this unit
  @brief
  Public API.
 allocate and initialize busyness storage 
 free business storage 
  @brief
  Private API.
TODO: gsl and sync support? create_sync and create_gsl are NULL
  @brief
  Creation and destruction
	 DDC clock and data pins should belong
	  to the same DDC block id,
		 this is from detect_sink_type,
	 [anaumov] DAL2 code returns GPIO_RESULT_NON_SPECIFIC_ERROR
	  in case of failures;
	  set_mode() is so that, in case of failure,
  Copyright 2013-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  Pre-requisites: headers required by header of this unit
 begin 
 compile time expand base address. 
 macros to expend register list macro defined in HW object header file
 GENERIC 
 HPD 
 SYNCA 
 REG(DC_GPIO_GENLK_MASK 
 DDC 
	 we don't care about the GPIO_ID for DDC
	  in DdcHandle it will use GPIO_ID_DDC_DATAGPIO_ID_DDC_CLOCK
 GPIO_I2CPAD 
 Not implemented 
 UNEXPECTED 
 function table 
  dal_hw_translate_dce120_init
  @brief
  Initialize Hw translate function pointers.
  @param
  struct hw_translate tr - [out] struct of function pointers
  Copyright 2013-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 set field name 
 set field name 
 compile time expand base address. 
 set field name 
 function table 
  dal_hw_factory_dce120_init
  @brief
  Initialize HW factory function pointers and pin info
  @param
  struct hw_factory factory - [out] struct of function pointers
TODO check ASIC CAPs
  Copyright 2013-16 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  Pre-requisites: headers required by header of this unit
  Header of this unit
 function table 
  Copyright 2013-16 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 function table 
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 set field name 
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  Pre-requisites: headers required by header of this unit
  @brief
  Returns index of first bit (starting with LSB) which is set
 GENERIC 
 HPD 
 SYNCA 
 mmDC_GPIO_GENLK_MASK 
 GPIOPAD 
 DDC 
	 we don't care about the GPIO_ID for DDC
	  in DdcHandle it will use GPIO_ID_DDC_DATAGPIO_ID_DDC_CLOCK
 GPIO_I2CPAD 
 Not implemented 
 UNEXPECTED 
  Copyright 2020 Mauro Rossi <issor.oruam@gmail.com>
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  Pre-requisites: headers required by header of this unit
  @brief
  Returns index of first bit (starting with LSB) which is set
 GENERIC 
 HPD 
 SYNCA 
 mmDC_GPIO_GENLK_MASK 
 GPIOPAD 
 DDC 
	 we don't care about the GPIO_ID for DDC
	  in DdcHandle it will use GPIO_ID_DDC_DATAGPIO_ID_DDC_CLOCK
 GPIO_I2CPAD 
 Not implemented 
 UNEXPECTED 
  Copyright 2020 Mauro Rossi <issor.oruam@gmail.com>
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 set field name 
  Copyright 2018 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  Pre-requisites: headers required by header of this unit
 begin 
 DCN 
 macros to expend register list macro defined in HW object header file
 GENERIC 
 HPD 
 REG(DC_GPIO_GENLK_MASK 
 DDC 
	 we don't care about the GPIO_ID for DDC
	  in DdcHandle it will use GPIO_ID_DDC_DATAGPIO_ID_DDC_CLOCK
	case REG(DC_GPIO_I2CPAD_A): not exit
	case REG(DC_GPIO_PWRSEQ_A):
	case REG(DC_GPIO_PAD_STRENGTH_1):
	case REG(DC_GPIO_PAD_STRENGTH_2):
	case REG(DC_GPIO_DEBUG):
 UNEXPECTED 
	case REG(DC_GPIO_SYNCA_A): not exist
not implmented
not implmented
not implmented
not implmented
 function table 
  dal_hw_translate_dcn10_init
  @brief
  Initialize Hw translate function pointers.
  @param
  struct hw_translate tr - [out] struct of function pointers
  Copyright 2013-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 begin 
 DCN 
 macros to expend register list macro defined in HW object header file
 set field name 
 set field name 
 function table 
  dal_hw_factory_dcn10_init
  @brief
  Initialize HW factory function pointers and pin info
  @param
  struct hw_factory factory - [out] struct of function pointers
TODO check ASIC CAPs
add this
  Copyright 2013-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 begin 
 DCN 
 macros to expend register list macro defined in HW object header file
 set field name 
 set field name 
 function table 
  dal_hw_factory_dcn10_init
  @brief
  Initialize HW factory function pointers and pin info
  @param
  struct hw_factory factory - [out] struct of function pointers
TODO check ASIC CAPs
add this
  Copyright 2018 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  Pre-requisites: headers required by header of this unit
 begin 
 DCN 
 macros to expend register list macro defined in HW object header file
 GENERIC 
 HPD 
 REG(DC_GPIO_GENLK_MASK 
 DDC 
	 we don't care about the GPIO_ID for DDC
	  in DdcHandle it will use GPIO_ID_DDC_DATAGPIO_ID_DDC_CLOCK
	case REG(DC_GPIO_I2CPAD_A): not exit
	case REG(DC_GPIO_PWRSEQ_A):
	case REG(DC_GPIO_PAD_STRENGTH_1):
	case REG(DC_GPIO_PAD_STRENGTH_2):
	case REG(DC_GPIO_DEBUG):
 UNEXPECTED 
	case REG(DC_GPIO_SYNCA_A): not exist
not implmented
not implmented
not implmented
not implmented
 function table 
  dal_hw_translate_dcn10_init
  @brief
  Initialize Hw translate function pointers.
  @param
  struct hw_translate tr - [out] struct of function pointers
  Copyright 2020 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  Pre-requisites: headers required by header of this unit
 begin 
 DCN 
 macros to expend register list macro defined in HW object header file
 GENERIC 
 HPD 
 REG(DC_GPIO_GENLK_MASK 
 DDC 
	 we don't care about the GPIO_ID for DDC
	  in DdcHandle it will use GPIO_ID_DDC_DATAGPIO_ID_DDC_CLOCK
	case REG(DC_GPIO_I2CPAD_A): not exit
	case REG(DC_GPIO_PWRSEQ_A):
	case REG(DC_GPIO_PAD_STRENGTH_1):
	case REG(DC_GPIO_PAD_STRENGTH_2):
	case REG(DC_GPIO_DEBUG):
 UNEXPECTED 
	case REG(DC_GPIO_SYNCA_A): not exist
not implmented
not implmented
not implmented
not implmented
 function table 
  dal_hw_translate_dcn10_init
  @brief
  Initialize Hw translate function pointers.
  @param
  struct hw_translate tr - [out] struct of function pointers
  Copyright 2020 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 begin 
 DCN 
 macros to expend register list macro defined in HW object header file
 set field name 
 set field name 
 function table 
  dal_hw_factory_dcn10_init
  @brief
  Initialize HW factory function pointers and pin info
  @param
  struct hw_factory factory - [out] struct of function pointers
TODO check ASIC CAPs
add this
  Copyright 2013-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  Pre-requisites: headers required by header of this unit
 begin 
 compile time expand base address. 
 macros to expend register list macro defined in HW object header file
 GENERIC 
 HPD 
 SYNCA 
 REG(DC_GPIO_GENLK_MASK 
 DDC 
	 we don't care about the GPIO_ID for DDC
	  in DdcHandle it will use GPIO_ID_DDC_DATAGPIO_ID_DDC_CLOCK
 GPIO_I2CPAD 
 Not implemented 
 UNEXPECTED 
 function table 
  dal_hw_translate_dcn10_init
  @brief
  Initialize Hw translate function pointers.
  @param
  struct hw_translate tr - [out] struct of function pointers
  Copyright 2013-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 set field name 
 compile time expand base address. 
 set field name 
 set field name 
 function table 
  dal_hw_factory_dcn10_init
  @brief
  Initialize HW factory function pointers and pin info
  @param
  struct hw_factory factory - [out] struct of function pointers
TODO check ASIC CAPs
  Copyright 2013-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  Pre-requisites: headers required by header of this unit
 GENERIC 
 HPD 
 SYNCA 
 mmDC_GPIO_GENLK_MASK 
 DDC 
	 we don't care about the GPIO_ID for DDC
	  in DdcHandle it will use GPIO_ID_DDC_DATAGPIO_ID_DDC_CLOCK
 GPIO_I2CPAD 
 Not implemented 
 UNEXPECTED 
 function table 
  dal_hw_translate_dce110_init
  @brief
  Initialize Hw translate function pointers.
  @param
  struct hw_translate tr - [out] struct of function pointers
  Copyright 2013-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 set field name 
 set field name 
  dal_hw_factory_dce110_init
  @brief
  Initialize HW factory function pointers and pin info
  @param
  struct hw_factory factory - [out] struct of function pointers
TODO check ASIC CAPs
  Copyright 2017 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  NOTE:
    This file is gcc-parseable HW gospel, coming straight from HW engineers.
  It doesn't adhere to Linux kernel style and sometimes will do things in odd
  ways. Unless there is something clearly wrong with it the code should
  remain as-is as it provides us with a guarantee from HW that it is correct.
ASSERT(exp == (int)exp);
  Copyright 2017 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  NOTE:
    This file is gcc-parseable HW gospel, coming straight from HW engineers.
  It doesn't adhere to Linux kernel style and sometimes will do things in odd
  ways. Unless there is something clearly wrong with it the code should
  remain as-is as it provides us with a guarantee from HW that it is correct.
REVISION#250
scaler taps calculation
mode support, voltage state and soc configuration
scale ratio support check
source format, pixel format and scan support check
bandwidth support check
writeback latency support check
re-ordering buffer support check
display io support check
total available writeback support check
maximum dispclkdppclk support check
viewport size check
total available pipes support check
urgent latency support check
prefetch check
mode support, voltage state and soc configuration
display pipe configuration
dispclk and dppclk calculation
urgent watermark
nb p-statedram clock change watermark
stutter efficiency
dcfclk deep sleep
stutter watermark
urgent latency supported
non-urgent latency tolerance
prefetch
min ttuv_blank
nb p-statedram clock change support
maximum bandwidth used
  Copyright 2017 Advanced Micro Devices, Inc.
  Copyright 2019 Raptor Engineering, LLC
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  NOTE:
    This file is gcc-parseable HW gospel, coming straight from HW engineers.
  It doesn't adhere to Linux kernel style and sometimes will do things in odd
  ways. Unless there is something clearly wrong with it the code should
  remain as-is as it provides us with a guarantee from HW that it is correct.
 Defaults from spreadsheet rev#247.
  RV2 delta: dram_clock_change_latency, max_num_dpp
 latencies 
us
us
us
us
us
%
		 below default clocks derived from STA target base on
		  slow-slow corner + 10% margin with voltages aligned to FCLK.
		 
		  Use these value if fused value doesn't make sense as earlier
 default DCF CLK DPM on RV
 MHz, = 36005.5 
 MHz, = 36005.75 
 MHz, = 36006, bypass 
 MHz, = 360012, bypass 
 default DISP CLK voltage state on RV 
 MHz, = 36003.25 
 MHz, = 36003.5 
 MHz, = 36003.75 
 MHz, = 36005.75 
 default DPP CLK voltage state on RV 
 MHz, = 36005 
 MHz, = 36005.25 
 MHz, = 36005.75 
 MHz, = 36009 
 default PHY CLK voltage state on RV 
MHz
MHz
MHz
MHz
 BW depend on FCLK, MCLK, # of channels 
 dual channel BW 
GBs
GBs
GBs
GBs
		 single channel BW
		.fabric_and_dram_bandwidth_vmax0p9 = 19.2f,
		.fabric_and_dram_bandwidth_vnom0p8 = 17.066f,
		.fabric_and_dram_bandwidth_vmid0p72 = 14.933f,
		.fabric_and_dram_bandwidth_vmin0p65 = 12.8f,
MHz
%
DCFCLK Cycles
bytes
bytes
bytes
bytes
 Depends on user class (client vs embedded, workstation, etc) 
%
kbytes
kbytes
kbytes
bit
kbytes
kbytes
pixelsdppclk
pixelsdppclk
pixelsdppclk
pixelsdppclk
%
TODO clone of something else? sr_enter_plus_exit_time?
not in formula
 for 4816 high tiles 
 For 64bpp 2 high tiles 
 Unsupported swizzle modes for dcn 
 Not supported 
 stereo can never be split 
 reset the split group if it was already considered split. 
		
		  this method requires us to always re-calculate watermark when dcc change
		  between flip.
		
		  allow us to disable dcc on the fly without re-calculating WM
		 
		  extra overhead for DCC is quite small.  for 1080p WM without
		  DCC is only 0.417us lower (urgent goes from 6.979us to 6.562us)
 TODO: Cursor calcs, not curently stored 
 Not supported 
 TODO: Fix pixel format mappings 
	dc->dml.logger = pool->base.logger;
input[in_idx].dout.output_standard;
todo: soc->sr_enter_plus_exit_time??
 Calculate set A last to keep internal var state consistent for required config 
	
	  disable optional pipe split by lower dispclk bounding box
	  at DPM0
	
	  force enabling pipe split by lower dpp clock for DPM0 to just
	  below the specify pixel_rate, so bw calc would split pipe.
		
		  Workaround for avoiding pipe-split in cases where we'd split
		  planes that are too small, resulting in splits that aren't
		  valid for the scaler.
 for low power RV2 variants, the highest voltage level we want is 0 
 we are ok with all levels 
	
	  we want a breakdown of the various stages of validation, which the
	  perf_trace macro doesn't support
 skip all but first of split pipes 
 taken care of in recout already
			
			  for cases where we have no plane, we want to validate up to 1080p
			  source size because here we are only interested in if the output
			  timing is supported or not. if we cannot support native resolution
			  of the high res display, we still want to support lower res up scale
			  to native
				
				  this method requires us to always re-calculate watermark when dcc change
				  between flip.
				
				  allow us to disable dcc on the fly without re-calculating WM
				 
				  extra overhead for DCC is quite small.  for 1080p WM without
				  DCC is only 0.417us lower (urgent goes from 6.979us to 6.562us)
			
			  Spreadsheet doesn't handle taps_c is one properly,
			  need to force Chroma to always be scaled to pass
			  bandwidth validation.
TODO: Worst case? does this change?
 Unhack dppclk: dont bother with trying to pipe split if we cannot maintain dpm0 
calc_wm_sets_and_perf_params(context, v);
		 Only 1 set is used by dcn since no noticeable
		  performance improvement was measured and due to hw bug DEGVIDCN10-254
 skip inactive pipe 
 skip all but first of split pipes 
 update previously split pipe 
 pipe not split previously needs split 
 merge previously split pipe 
 Clear plane_res and stream_res 
 for now important to do this after pipe split for building e2e params 
	
	  BW limit is set to prevent display from impacting other system functions
todo some clock not in the considerations
find a common supported voltage level
find that level conresponding dcfclk
 Ensure that the result is sane 
 TODO: This is not the proper way to obtain fabric_and_dram_bandwidth, should be min(fclk, memclk) 
 5 GHz to cover Overdrive 
	 Now notify PPLibSMU about which Watermarks sets they should select
	  depending on DPM state they are in. And update BW MGR GFX Engine and
	  Memory clock member variables for Watermarks calculations for each
	  Watermark Set. Only one watermark set for dcn1 due to hw bug DEGVIDCN10-254.
	 SOCCLK does not affect anytihng but writeback for DCN so for now we dont
	  care what the value is, hence min to overdrive level
 Notify PP LibSMU which Watermarks to use for which clock ranges 
pte_buffer_size_in_requests missing in dml
  Copyright 2017 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
	 verification code:
	  once calculation is ok we can remove it
 end of verification code 
  Copyright 2015 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 determine integer part 
 determine fractional part 
 round up LSB 
  Copyright 2015 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  NOTE:
    This file is gcc-parseable HW gospel, coming straight from HW engineers.
  It doesn't adhere to Linux kernel style and sometimes will do things in odd
  ways. Unless there is something clearly wrong with it the code should
  remain as-is as it provides us with a guarantee from HW that it is correct.
  Private Functions
initialize variables
''''''''''''''''''
 surface assignment:
 0: d0 underlay or underlay luma
 1: d0 underlay chroma
 2: d1 underlay or underlay luma
 3: d1 underlay chroma
 4: d0 graphics
 5: d1 graphics
 6: d2 graphics
 7: d3 graphics, same mode as d2
 8: d4 graphics, same mode as d2
 9: d5 graphics, same mode as d2
 ...
 maximum_number_of_surfaces-2: d1 display_write_back420 luma
 maximum_number_of_surfaces-1: d1 display_write_back420 chroma
 underlay luma and chroma surface parameters from spreadsheet
underlay0 same and graphics display pipe0
underlay1 same and graphics display pipe1
underlay0 same and graphics display pipe0
underlay1 same and graphics display pipe1
underlay0 same and graphics display pipe0
underlay1 same and graphics display pipe1
 graphics surface parameters from spreadsheet
 display_write_back420
assume display pipe1 has dwb enabled
mode check calculations:
 mode within dce ip capabilities
 fbc
 hsr
 vsr
 lb size
effective scaling source and ratios:
for graphics, non-stereo, non-interlace surfaces when the size of the source and destination are the same, only one tap is used
420 chroma has half the width, height, horizontal and vertical scaling ratios than luma
rotating a graphic or underlay surface swaps the width, height, horizontal and vertical scaling ratios
in top-bottom stereo mode there is 2:1 vertical downscaling for each eye
in side-by-side stereo mode there is 2:1 horizontal downscaling for each eye
in interlace mode there is 2:1 vertical downscaling for each field
in panning or bezel adjustment mode the source width has an extra 128 pixels
mode support checks:
the number of graphics and underlay pipes is limited by the ip support
maximum horizontal and vertical scale ratio is 4, and should not exceed the number of taps
for downscaling with the pre-downscaler, the horizontal scale ratio must be more than the ceiling of one quarter of the number of taps
the pre-downscaler reduces the line buffer source by the horizontal scale ratio
the number of lines in the line buffer has to exceed the number of vertical taps
the size of the line in the line buffer is the product of the source width and the bits per component, rounded up to a multiple of 48
the size of the line in the line buffer in the case of 10 bit per component is the product of the source width rounded up to multiple of 8 and 30.023438  3, rounded up to a multiple of 48
the size of the line in the line buffer in the case of 8 bit per component is the product of the source width rounded up to multiple of 8 and 30.023438  3, rounded up to a multiple of 48
frame buffer compression is not supported with stereo mode, rotation, or non- 888 formats
rotation is not supported with linear of stereo modes
clamp the partitions to the maxium number supported by the lb
number of memory channels for write-back client
modify number of memory channels if lpt mode is enabled
 low power tiling mode register
 0 = use channel 0
 1 = use channel 0 and 1
 2 = use channel 0,1,2,3
memory request size and latency hiding:
request size is normally 64 byte, 2-line interleaved, with full latency hiding
the display write-back requests are single line
for tiled graphics surfaces, or undelay surfaces with width higher than the maximum size for full efficiency, request size is 32 byte in 8 and 16 bpp or if the rotation is orthogonal to the tiling grain. only half is useful of the bytes in the request size in 8 bpp or in 32 bpp if the rotation is orthogonal to the tiling grain.
for undelay surfaces with width lower than the maximum size for full efficiency, requests are 4-line interleaved in 16bpp if the rotation is parallel to the tiling grain, and 8-line interleaved with 4-line latency hiding in 8bpp or if the rotation is orthogonal to the tiling grain.
underlay portrait tiling mode is not supported
graphics portrait tiling mode
underlay landscape tiling mode is only supported
graphics landscape tiling mode
requested peak bandwidth:
the peak request-per-second bandwidth is the product of the maximum source lines in per line out in the beginning
and in the middle of the frame, the ratio of the source width to the line time, the ratio of line interleaving
in memory to lines of latency hiding, and the ratio of bytes per pixel to useful bytes per request.
if the dmif data buffer size holds more than vta_ps worth of source lines, then only vsr is used.
the peak bandwidth is the peak request-per-second bandwidth times the request size.
the line buffer lines in per line out in the beginning of the frame is the vertical filter initialization value
rounded up to even and divided by the line times for initialization, which is normally three.
the line buffer lines in per line out in the middle of the frame is at least one, or the vertical scale ratio,
rounded up to line pairs if not doing line buffer prefetching.
the non-prefetching rounding up of the vertical scale ratio can also be done up to 1 (for a 0,2 pattern), 43 (for a 0,2,2 pattern),
64 (for a 0,2,2,2 pattern), or 3 (for a 2,4 pattern).
the scaler vertical filter initialization value is calculated by the hardware as the floor of the average of the
vertical scale ratio and the number of vertical taps increased by one.  add one more for possible odd line
panningbezel adjustment mode.
for the bottom interlace field an extra 50% of the vertical scale ratio is considered for this calculation.
in top-bottom stereo mode software has to set the filter initialization value manually and explicitly limit it to 4.
furthermore, there is only one line time for initialization.
line buffer prefetching is done when the number of lines in the line buffer exceeds the number of taps plus
the ceiling of the vertical scale ratio.
multi-line buffer prefetching is only done in the graphics pipe when the scaler is disabled or when upscaling and the vsr <= 0.8.'
the horizontal blank and chunk granularity factor is indirectly used indicate the interval of time required to transfer the source pixels.
the denominator of this term represents the total number of destination output pixels required for the input source pixels.
it applies when the lines in per line out is not 2 or 4.  it does not apply when there is a line buffer between the scl and blnd.
outstanding chunk request limit
if underlay buffer sharing is enabled, the data buffer size for underlay in 422 or 444 is the sum of the luma and chroma data buffer sizes.
underlay buffer sharing mode is only permitted in orthogonal rotation modes.
if there is only one display enabled, the dmif data buffer size for the graphics surface is increased by concatenating the adjacent buffers.
the memory chunk size in bytes is 1024 for the writeback, and 256 times the memory line interleaving and the bytes per pixel for graphics
and underlay.
the pipe chunk size uses 2 for line interleaving, except for the write back, in which case it is 1.
graphics and underlay data buffer size is adjusted (limited) using the outstanding chunk request limit if there is more than one
display enabled or if the dmif request buffer is not large enough for the total data buffer size.
the outstanding chunk request limit is the ceiling of the adjusted data buffer size divided by the chunk size in bytes
the adjusted data buffer size is the product of the display bandwidth and the minimum effective data buffer size in terms of time,
rounded up to the chunk size in bytes, but should not exceed the original data buffer size
data_buffer_size(i) = max_dmif_buffer_allocated  graphics_dmif_size
the effective dmif buffer size in non-fbc mode is limited by the 16 entry chunk tracker
set maximum chunk limit if only one graphic pipe is enabled
clamp maximum chunk limit in the graphic display pipe
outstanding pte request limit
in tiling mode with no rotation the sg pte requests are 8 useful pt_es, the sg row height is the page height and the sg page width x height is 64x64 for 8bpp, 64x32 for 16 bpp, 32x32 for 32 bpp
in tiling mode with rotation the sg pte requests are only one useful pte, and the sg row height is also the page height, but the sg page width and height are swapped
in linear mode the pte requests are 8 useful pt_es, the sg page width is 4096 divided by the bytes per pixel, the sg page height is 1, but there is just one row whose height is the lines of pte prefetching
the outstanding pte request limit is obtained by multiplying the outstanding chunk request limit by the peak pte request to eviction limiting ratio, rounding up to integer, multiplying by the pte requests per chunk, and rounding up to integer again
if not using peak pte request to eviction limiting, the outstanding pte request limit is the pte requests in the vblank
the pte requests in the vblank is the product of the number of pte request rows times the number of pte requests in a row
the number of pte requests in a row is the quotient of the source width divided by 256, multiplied by the pte requests per chunk, rounded up to even, multiplied by the scatter-gather row height and divided by the scatter-gather page height
the pte requests per chunk is 256 divided by the scatter-gather page width and the useful pt_es per pte request
pitch padding recommended for efficiency in linear mode
in linear mode graphics or underlay with scatter gather, a pitch that is a multiple of the channel interleave (256 bytes) times the channel-bank rotation is not efficient
if that is the case it is recommended to pad the pitch by at least 256 pixels
pixel transfer time
the dmif and mcifwr yclk(pclk) required is the one that allows the transfer of all pipe's data buffer size in memory in the time for data transfer
for dmif, pte and cursor requests have to be included.
the dram data requirement is doubled when the data request size in bytes is less than the dram channel width times the burst size (8)
the dram data requirement is also multiplied by the number of channels in the case of low power tiling
the page close-open time is determined by trc and the number of page close-opens
in tiled mode graphics or underlay with scatter-gather enabled the bytes per page close-open is the product of the memory line interleave times the maximum of the scatter-gather page width and the product of the tile width (8 pixels) times the number of channels times the number of banks.
in linear mode graphics or underlay with scatter-gather enabled and inefficient pitch, the bytes per page close-open is the line request alternation slice, because different lines are in completely different 4k address bases.
otherwise, the bytes page close-open is the chunk size because that is the arbitration slice.
pte requests are grouped by pte requests per chunk if that is more than 1. each group costs a page close-open time for dmif reads
cursor requests outstanding are limited to a group of two source lines. each group costs a page close-open time for dmif reads
the display reads and writes time for data transfer is the minimum data or cursor buffer size in time minus the mc urgent latency
the mc urgent latency is experienced more than one time if the number of dmif requests in the data buffer exceeds the request buffer size plus the request slots reserved for dmif in the dram channel arbiter queues
the dispclk required is the maximum for all surfaces of the maximum of the source pixels for first output pixel times the throughput factor, divided by the pixels per dispclk, and divided by the minimum latency hiding minus the dram speedp-state change latency minus the burst time, and the source pixels for last output pixel, times the throughput factor, divided by the pixels per dispclk, and divided by the minimum latency hiding minus the dram speedp-state change latency minus the burst time, plus the active time.
the data burst time is the maximum of the total page close-open time, total dmifmcifwr buffer size in memory divided by the dram bandwidth, and the total dmifmcifwr buffer size in memory divided by the 32 byte sclk data bus bandwidth, each multiplied by its efficiency.
the source line transfer time is the maximum for all surfaces of the maximum of the burst time plus the urgent latency times the floor of the data required divided by the buffer size for the fist pixel, and the burst time plus the urgent latency times the floor of the data required divided by the buffer size for the last pixel plus the active time.
the source pixels for the first output pixel is 512 if the scaler vertical filter initialization value is greater than 2, and it is 4 times the source width if it is greater than 4.
the source pixels for the last output pixel is the source width times the scaler vertical filter initialization value rounded up to even
the source data for these pixels is the number of pixels times the bytes per pixel times the bytes per request divided by the useful bytes per request.
for hbm memories, each channel is split into 2 pseudo-channels that are each 64 bits in width.  each
pseudo-channel may be read independently of one another.
the read burst length (bl) for hbm memories is 4, so each read command will access 32 bytes of data.
the 64 or 32 byte sized data is stored in one pseudo-channel.
it will take 4 memclk cycles or 8 yclk cycles to fetch 64 bytes of data from the hbm memory (2 read commands).
it will take 2 memclk cycles or 4 yclk cycles to fetch 32 bytes of data from the hbm memory (1 read command).
for gddr5ddr4 memories, there is additional overhead if the size of the request is smaller than 64 bytes.
the read burst length (bl) for gddr5ddr4 memories is 8, regardless of the size of the data request.
therefore it will require 8 cycles to fetch 64 or 32 bytes of data from the memory.
the memory efficiency will be 50% for the 32 byte sized data.
time to transfer data from the dmif buffer to the lb.  since the mc to dmif transfer time overlaps
with the dmif to lb transfer time, only time to transfer the last chunk  is considered.
during an mclk switch the requests from the dce ip are stored in the gmcarb.  these requests should be serviced immediately
after the mclk switch sequence and not incur an urgent latency penalty.  it is assumed that the gmcarb can hold up to 256 requests
per memory channel.  if the dce ip is urgent after the mclk switch sequence, all pending requests and subsequent requests should be
immediately serviced without a gap in the urgent requests.
the latency incurred would be the time to issue the requests and return the data for the first or last output pixel.
during an mclk switch the requests from the dce ip are stored in the gmcarb.  these requests should be serviced immediately
after the mclk switch sequence and not incur an urgent latency penalty.  it is assumed that the gmcarb can hold up to 256 requests
per memory channel.  if the dce ip is urgent after the mclk switch sequence, all pending requests and subsequent requests should be
immediately serviced without a gap in the urgent requests.
the latency incurred would be the time to issue the requests and return the data for the first or last output pixel.
cpu c-state and p-state change enable
for cpu p-state change to be possible for a yclk(pclk) and sclk level the dispclk required has to be enough for the blackout duration
for cpu c-state change to be possible for a yclk(pclk) and sclk level the dispclk required has to be enough for the blackout duration and recovery
condition for the blackout duration:
 minimum latency hiding > blackout duration + dmif burst time + line source transfer time
condition for the blackout recovery:
 recovery time >  dmif burst time + 2  urgent latency
 recovery time > (display bw  blackout duration  + (2  urgent latency + dmif burst time)dispclk - dmif size )
                   (dispclk - display bw)
the minimum latency hiding is the minimum for all pipes of one screen line time, plus one more line time if doing lb prefetch, plus the dmif data buffer size equivalent in time, minus the urgent latency.
the minimum latency hiding is  further limited by the cursor.  the cursor latency hiding is the number of lines of the cursor buffer, minus one if the downscaling is less than two, or minus three if it is more
initialize variables
nb p-state change enable
for dram speedp-state change to be possible for a yclk(pclk) and sclk level there has to be positive margin and the dispclk required has to be
below the maximum.
the dram speedp-state change margin is the minimum for all surfaces of the maximum latency hiding minus the dram speedp-state change latency,
minus the dmif burst time, minus the source line transfer time
the maximum latency hiding is the minimum latency hiding plus one source line used for de-tiling in the line buffer, plus half the urgent latency
if stutter and dram clock state change are gated before cursor then the cursor latency hiding does not limit stutter or dram clock state change
maximum_latency_hiding(i) = minimum_latency_hiding(i) + 1  vsr(i) 
      h_total(i)  pixel_rate(i) + 0.5  total_dmifmc_urgent_latency
determine the minimum dram clock change margin for each set of clock frequencies
compute the maximum clock frequuency required for the dram clock change at each set of clock frequencies
determine the minimum dram clock change margin for each display pipe
compute the maximum clock frequuency required for the dram clock change at each set of clock frequencies
determine the number of displays with margin to switch in the v_active region
determine the number of displays that don't have any dram clock change margin, but
have the same resolution.  these displays can switch in a common vblank region if
their frames are aligned.
compute the maximum number of aligned displays with no margin
dram clock change is possible, if all displays have positive margin except for one display or a group of
aligned displays with the same timing.
the display(s) with the negative margin can be switched in the v_blank region while the other
displays are in v_blank or v_active.
dram clock change is possible only in vblank if all displays are aligned and have no margin
average bandwidth
the average bandwidth with no compression is the vertical active time is the source width times the bytes per pixel divided by the line time, multiplied by the vertical scale ratio and the ratio of bytes per request divided by the useful bytes per request.
the average bandwidth with compression is the same, divided by the compression ratio
required yclk(pclk)
yclk requirement only makes sense if the dmif and mcifwr data total page close-open time is less than the time for data transfer and the total pte requests fit in the scatter-gather saw queque size
if that is the case, the yclk requirement is the maximum of the ones required by dmif and mcifwr, and the highlow yclk(pclk) is chosen accordingly
high yclk(pclk) has to be selected when dram speedp-state change is not possible.
 number of cursor lines stored in the cursor data return buffer
compute number of cursor lines stored in data return buffer
compute minimum time to read one chunk from the dmif buffer
required sclk
sclk requirement only makes sense if the total pte requests fit in the scatter-gather saw queque size
if that is the case, the sclk requirement is the maximum of the ones required by dmif and mcifwr, and the highmidlow sclk is chosen accordingly, unless that choice results in foresaking dram speednb p-state change.
the dmif and mcifwr sclk required is the one that allows the transfer of all pipe's data buffer size through the sclk bus in the time for data transfer
for dmif, pte and cursor requests have to be included.
required_sclk = high_sclk
dispclk
if dispclk is set to the maximum, ramping is not required.  dispclk required without ramping is less than the dispclk required with ramping.
if dispclk required without ramping is more than the maximum dispclk, that is the dispclk required, and the mode is not supported
if that does not happen, but dispclk required with ramping is more than the maximum dispclk, dispclk required is just the maximum dispclk
if that does not happen either, dispclk required is the dispclk required with ramping.
dispclk required without ramping is the maximum of the one required for display pipe pixel throughput, for scaler throughput, for total read request thrrougput and for dramnp p-state change if enabled.
the display pipe pixel throughput is the maximum of lines in per line out in the beginning of the frame and lines in per line out in the middle of the frame multiplied by the horizontal blank and chunk granularity factor, altogether multiplied by the ratio of the source width to the line time, divided by the line buffer pixels per dispclk throughput, and multiplied by the display pipe throughput factor.
the horizontal blank and chunk granularity factor is the ratio of the line time divided by the line time minus half the horizontal blank and chunk time.  it applies when the lines in per line out is not 2 or 4.
the dispclk required for scaler throughput is the product of the pixel rate and the scaling limits factor.
the dispclk required for total read request throughput is the product of the peak request-per-second bandwidth and the dispclk cycles per request, divided by the request efficiency.
for the dispclk required with ramping, instead of multiplying just the pipe throughput by the display pipe throughput factor, we multiply the scaler and pipe throughput by the ramping factor.
the scaling limits factor is the product of the horizontal scale ratio, and the ratio of the vertical taps divided by the scaler efficiency clamped to at least 1.
the scaling limits factor itself it also clamped to at least 1
if doing downscaling with the pre-downscaler enabled, the horizontal scale ratio should not be considered above (use "1")
 required core voltage
 the core voltage required is low if sclk, yclk(pclk)and dispclk are within the low limits
 otherwise, the core voltage required is medium if yclk (pclk) is within the low limit and sclk and dispclk are within the medium limit
 otherwise, the core voltage required is high if the three clocks are within the high limits
 otherwise, or if the mode is not supported, core voltage requirement is not applicable
required blackout recovery time
sclk deep sleep
during self-refresh, sclk can be reduced to dispclk divided by the minimum pixels in the data fifo entry, with 15% margin, but shoudl not be set to less than the request bandwidth.
the data fifo entry is 16 pixels for the writeback, 64 bytesbytes_per_pixel for the graphics, 16 pixels for the parallel rotation underlay,
and 16 bytesbytes_per_pixel for the orthogonal rotation underlay.
in parallel mode (underlay pipe), the data read from the dmifv buffer is variable and based on the pixel depth (8bbp - 16 bytes, 16 bpp - 32 bytes, 32 bpp - 64 bytes)
in orthogonal mode (underlay pipe), the data read from the dmifv buffer is fixed at 16 bytes.
urgent, stutter and nb-p_state watermark
the urgent watermark is the maximum of the urgent trip time plus the pixel transfer time, the urgent trip times to get data for the first pixel, and the urgent trip times to get data for the last pixel.
the stutter exit watermark is the self refresh exit time plus the maximum of the data burst time plus the pixel transfer time, the data burst times to get data for the first pixel, and the data burst times to get data for the last pixel.  it does not apply to the writeback.
the nb p-state change watermark is the dram speedp-state change time plus the maximum of the data burst time plus the pixel transfer time, the data burst times to get data for the first pixel, and the data burst times to get data for the last pixel.
the pixel transfer time is the maximum of the time to transfer the source pixels required for the first output pixel, and the time to transfer the pixels for the last output pixel minus the active line time.
blackout_duration is added to the urgent watermark
compute total time to request one chunk from each active display pipe
compute total time to request cursor data
unconditionally remove black out time from the nb p_state watermark
maximize the watermark to force the switch in the vb_lank region of the frame
maximize the watermark to force the switch in the vb_lank region of the frame
stutter mode enable
in the multi-display case the stutter exit or entry watermark cannot exceed the minimum latency hiding capabilities of the
display pipe.
performance metrics
 display read access efficiency (%)
 display write back access efficiency (%)
 stutter efficiency (%)
 extra underlay pitch recommended for efficiency (pixels)
 immediate flip time (us)
 latency for other clients due to urgent display read (us)
 latency for other clients due to urgent display write (us)
 average bandwidth consumed by display (no compression) (gbs)
 required dram  bandwidth (gbs)
 required sclk (m_hz)
 required rd urgent latency (us)
 nb p-state change margin (us)
dmif and mcifwr dram access efficiency
is the ratio between the ideal dram access time (which is the data buffer size in memory divided by the dram bandwidth), and the actual time which is the total page close-open time.  but it cannot exceed the dram efficiency provided by the memory subsystem
stutter efficiency
the stutter efficiency is the frame-average time in self-refresh divided by the frame-average stutter cycle duration.  only applies if the display write-back is not enabled.
the frame-average stutter cycle used is the minimum for all pipes of the frame-average data buffer size in time, times the compression rate
the frame-average time in self-refresh is the stutter cycle minus the self refresh exit latency and the burst time
the stutter cycle is the dmif buffer size reduced by the excess of the stutter exit watermark over the lb size in time.
the burst time is the data needed during the stutter cycle divided by the available bandwidth
compute the time read all the data from the dmif buffer to the lb (dram refresh period)
compute stutter efficiency assuming 60 hz refresh rate
immediate flip time
if scatter gather is enabled, the immediate flip takes a number of urgent memory trips equivalent to the pte requests in a row divided by the pte request limit.
otherwise, it may take just one urgenr memory trip
worst latency for other clients
it is the urgent latency plus the urgent burst time
dmif mc urgent latency supported in high sclk and yclk
dram speedp-state change margin
in the multi-display case the nb p-state change watermark cannot exceed the average lb size plus the dmif size or the cursor dcp buffer size
sclk required vs urgent latency
output link bit per pixel supported
  Public functions
 us 
 todo: this is a bug
		 TODO: Treat VEGAM the same as P10 for now
 us 
 64-bit
 us 
 64-bit
 us 
 us 
 us 
  Compare calculated (required) clocks against the clocks available at
  maximum voltage (max Performance Level).
 MHz to kHz 
 MHz to kHz 
 Pipes with underlay first 
 Pipes without underlay after 
  Return:
 	true -	Display(s) configuration supported.
 		In this case 'calcs_output' contains data for HW programming
 	false - Display(s) configuration not supported (not enough bandwidth).
 units: nanosecond, 16bit storage. 
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
   Function: is_in_vertical_blank
   @brief
      check the current status of CRTC to check if we are in Vertical Blank
      regioneased" state
   @return
      true if currently in blank region, false otherwise
 determine if given timing can be supported by TG 
 HW programming 
 DisableEnable Timing Generator 
	 Set MASTER_UPDATE_MODE to 0
 TODO API for AtomFirmware didn't change
 TG current status 
 return the current frame counter. Used by Linux kernel DRM 
 Get current H and V position 
 wait until TG is in beginning of vertical blank region 
	 We want to catch beginning of VBlank here, so if the first try are
	  in VBlank, we might be very close to Active, in this case wait for
	  another frame
 error - no point to wait if counter is not moving 
 error - no point to wait if counter is not moving 
 wait until TG is in beginning of active region 
 error - no point to wait if counter is not moving 
 Timing Generator Synchronization routines 
 Setups Global Swap Lock group, TimingServer or TimingClient
 Checkpoint relative to end of frame 
 This pipe will belong to GSL Group zero. 
		 Keep signal low (pending high) during 6 lines.
 DCP_GSL_PURPOSE_SURFACE_FLIP 
 Clear all the register writes done by setup_global_swap_lock 
 Settig HW default values from reg specs 
 DCP_GSL_PURPOSE_SURFACE_FLIP 
TODO Why this value here ?
 Reset slave controllers on master VSync 
 Setup trigger edge 
	 Register spec has reversed definition:
 TODO What about other sources ?
 send every signal 
 no delay 
 clear trigger status 
 disabling trigger-reset 
 clear trigger status 
 Checks whether CRTC triggered reset occurred 
 Stuff to move to other virtual HW objects 
 Move to enable accelerated mode 
 TODO: Should we move it to transform 
 Fully program CRTC timing in timing generator 
	 In case of V_TOTAL_CONTROL is on, make sure V_TOTAL_MAX and
	  V_TOTAL_MIN are equal to V_TOTAL.
 TODO: Should we move it to opp? 
 Combine with below and move YUVRGB color conversion to SW layer 
 Combine with above and move YUVRGB color conversion to SW layer 
	 This is desirable to have a constant DAC output voltage during the
	  blank time that is higher than the 0 volt reference level that the
	  DAC outputs when the NBLANK signal
	 TO DO we have to program EXT registers and we need to know LB DATA
	  format because it is used when more 10 , i.e. 12 bits per color
	 
	  m_mmDxCRTC_OVERSCAN_COLOR_EXT
	  m_mmDxCRTC_BLACK_COLOR_EXT
	  m_mmDxCRTC_BLANK_DATA_COLOR_EXT
	 Program advanced line position acc.to the best case from fetching data perspective to hide MC latency
	  and prefilling Line Buffer in V Blank (to 10 lines as LB can store max 10 lines)
 By register spec, it only takes 8 bit value
	 TODO: replace 'controller_dp_test_pattern' by 'test_pattern_mode'
	  because this is not DP-specific (which is probably somewhere in DP
 color ramp generator mixes 16-bits color 
 requested bpc 
	 RGB values of the color bars.
	  Produce two RGB colors: RGB0 - white (all Fs)
	  and RGB1 - black (all 0s)
	  (three RGB components for two colors)
 dest color (converted to the specified color format) 
 translate to bit depth 
 adjust color to the required colorFormat 
			 dst = 2^dstBpc  src  2^srcBpc = src >>
			  (srcBpc - dstBpc);
		 CRTC_TEST_PATTERN_DATA has 16 bits,
		  lowest 6 are hardwired to ZERO
		  color bits should be left aligned aligned to MSB
		  XXXXXXXXXX000000 for 10 bit,
		  XXXXXXXX00000000 for 8 bit and XXXXXX0000000000 for 6
		 We have to write the mask before data, similar to pipeline.
		  For example, for 8 bpc, if we want RGB0 to be magenta,
		  and RGB1 to be cyan,
		  we need to make 7 writes:
		  MASK   DATA
		  000001 00000000 00000000                     set mask to R0
		  000010 11111111 00000000     R0 255, 0xFF00, set mask to G0
		  000100 00000000 00000000     G0 0,   0x0000, set mask to B0
		  001000 11111111 00000000     B0 255, 0xFF00, set mask to R1
		  010000 00000000 00000000     R1 0,   0x0000, set mask to G1
		  100000 11111111 00000000     G1 255, 0xFF00, set mask to B1
		  100000 11111111 00000000     B1 255, 0xFF00
		 
		  we will make a loop of 6 in which we prepare the mask,
		  then write, then prepare the color for next write.
		  first iteration will write mask only,
		  but each next iteration color prepared in
		  previous iteration will be written within new mask,
		  the last component will written separately,
		  mask is not changing between 6th and 7th write
		  and color will be prepared by last iteration
		 write color, color values mask in CRTC_TEST_PATTERN_MASK
		  is B1, G1, R1, B0, G0, R0
			 prepare color mask, first write PATTERN_DATA
			  will have all zeros
 write color component 
			 prepare next color component,
			  will be written in the next iteration
		 write last color component,
		  it's been already prepared in the loop
 enable test pattern 
		 increment for the first ramp for one color gradation
		  1 gradation for 6-bit color is 2^10
		  gradations in 16-bit color
 enable test pattern 
 Cannot configure crc on a CRTC that is disabled 
 First, disable CRC before we configure it. 
 Program frame boundaries 
 Window A x axis start and end. 
 Window A y axis start and end. 
 Window B x axis start and end. 
 Window B y axis start and end. 
 Set crc mode and selection, and enable. Only using CRC0
 Early return if CRC is not enabled for this CRTC 
 used by enable_timing_synchronization. Not need for FPGA 
 never be called 
 used by enable_timing_synchronization. Not need for FPGA 
 never be called 
CRTC requires a minimum HBLANK = 32 pixels and o
	  Minimum HSYNC = 8 pixels
	tg110->min_h_blank = 32;
	DCE12_CRTC_Block_ARch.doc
	tg110->min_h_front_porch = 0;
	tg110->min_h_back_porch = 0;
	tg110->min_h_sync_width = 4;
	tg110->min_v_sync_width = 1;
	tg110->min_v_blank = 3;
}
  Copyright 2015 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  Private definitions
	addr = mmDCP0_DVMM_PTE_CONTROL + controller_id 
			(mmDCP1_DVMM_PTE_CONTROL- mmDCP0_DVMM_PTE_CONTROL);
	value = dm_read_reg(ctx, addr);
	set_reg_field_value(
			value, 0, DCP, controller_id,
			DVMM_PTE_CONTROL,
			DVMM_USE_SINGLE_PTE);
	set_reg_field_value_soc15(
			value, 1, DCP, controller_id,
			DVMM_PTE_CONTROL,
			DVMM_PTE_BUFFER_MODE0);
	set_reg_field_value_soc15(
			value, 1, DCP, controller_id,
			DVMM_PTE_CONTROL,
			DVMM_PTE_BUFFER_MODE1);
 disable for bringup 
		 Revert MASTER_UPDATE_MODE to 0 because bios sets it 2
		  by default when command table is called
 TODO: port code from dal2 
For ZFB case need to put DCHUB FB BASE and TOP upside down to indicate ZFB mode
Should not touch FB LOCATION (done by VBIOS on AsicInit table)
Should not touch FB LOCATION (done by VBIOS on AsicInit table)
  dce121_xgmi_enabled() - Check if xGMI is enabled
  @hws: DCE hardware sequencer object
  Return true if xGMI is enabled. False otherwise.
 PF_MAX_REGION == 0 means xgmi is disabled 
	 All registers used by dce11.2 match those in dce11 in offset and
	  structure
 Copyright 2012-15 Advanced Micro Devices, Inc.cls
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 begin 
 compile time expand base address. 
 MMHUB 
 macros to expend register list macro defined in HW object header file
	 All registers used by dce11.2 match those in dce11 in offset and
	  structure
TODO	Move to separate file and Override what is needed 
 HWSEQ regs for VG20 
5124
original logic in dal3
do system clock
 convert all the clock fro kHz to fix point mHz  TODO: wloop data 
do memory clock
	 we don't need to call PPLIB for validation clock since they
	  also give us the highest sclk and highest mclk (UMA clock).
	  ALSO always convert UMA clock (from PPLIB)  to YCLK (HW formula):
	  YCLK = UMACLKm_memoryTypeMultiplier
	 Now notify PPLibSMU about which Watermarks sets they should select
	  depending on DPM state they are in. And update BW MGR GFX Engine and
	  Memory clock member variables for Watermarks calculations for each
	  Watermark Set
 5 GHz instead of data[7].clockInKHz to cover Overdrive 
 5 GHz instead of data[2].clockInKHz to cover Overdrive 
 5 GHz instead of data[7].clockInKHz to cover Overdrive 
 5 GHz instead of data[2].clockInKHz to cover Overdrive 
 Notify PP LibSMU which Watermarks to use for which clock ranges 
 VG20 support max 6 pipes 
 TODO: Fill more data from GreenlandAsicCapability.cpp 
1.4 wa not applied by default
	
	   Create resources                             
 VG20: Pipe harvesting enabled, retrieve valid pipe fuses 
 index to valid pipe resource 
 check next valid pipe 
 valid pipe num 
 Create hardware sequencer 
  Copyright 2019 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 0x74 >> 1
 0x76 >> 1
 actual hdcp payload, will be filled later, zeroed for now
only HW
 Read KSV, need repeatedly handle 
todo version2.2
todo version2.2
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 include DCE8 register header files 
 used as index in array 
 DCE8.0 overrides 
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 TODO remove this include 
 set register offset 
 set register offset with instance 
 TODO implement when needed but for now hardcode max value
	
	   Resource + asic cap harcoding                
	
	   Create resources                             
 Create hardware sequencer 
	
	   Resource + asic cap harcoding                
	
	   Create resources                             
 Create hardware sequencer 
	
	   Resource + asic cap harcoding                
	
	   Create resources                             
 Create hardware sequencer 
  Copyright 2015 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 include DCE8 register header files 
  Private definitions
PIPE_CONTROL
  Copyright 2020 Mauro Rossi <issor.oruam@gmail.com>
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 include DCE6 register header files 
 used as index in array 
 DCE6 has CRTC_PREFETCH_EN bit in CRTC_CONTROL register 
	 DCE6 does not support CRTC_LEGACY_REQUESTOR_EN bit
 Cannot configure crc on a CRTC that is disabled 
 DCE6 has no CRTC_CRC_CNTL register, nothing to do 
 DCE6.0 overrides 
  Copyright 2020 Mauro Rossi <issor.oruam@gmail.com>
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 TODO remove this include 
 set register offset 
 set register offset with instance 
 TODO implement when needed but for now hardcode max value
	
	   Resource + asic cap harcoding                
	
	   Create resources                             
 Create hardware sequencer 
	
	   Resource + asic cap harcoding                
	
	   Create resources                             
 Create hardware sequencer 
	
	   Resource + asic cap harcoding                
	
	   Create resources                             
 Create hardware sequencer 
  Copyright 2020 Mauro Rossi <issor.oruam@gmail.com>
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 include DCE6 register header files 
  Private definitions
PIPE_CONTROL
   Check if FBC can be enabled
 FBC memory should be allocated 
 Only supports single display 
 fbc not applicable on underlay pipe 
 Only supports eDP 
 PSR should not be enabled 
 Nothing to compress 
 Only for non-linear tiling 
   Enable FBC
 Program GRPH COMPRESSED ADDRESS and PITCH 
  Front End programming
 display color depth 
 Lb color depth 
  In order to turn on surface we will program
  CRTC
  DCE6 has no bottom_pipe and no Blender HW
  We need to set 'blank_target' to false in order to turn on the display
  |-----------|------------|---------|
  |curr pipe  | set_blank  |         |
  |Surface    |blank_target|  CRCT   |
  |visibility |  argument  |         |
  |-----------|------------|---------|
  |    off    |   true     | blank   |
  |    on     |   false    | unblank |
  |-----------|------------|---------|
 DCE6 has no bottom_pipe and no Blender HW 
 DCE6 skip dce_set_blender_mode() but then proceed to 'unblank' CRTC 
 set boarder color to red 
 set boarder color to blue 
 set boarder color to green 
 set boarder color to yellow 
 set boarder color to white 
 DCE6 skips DCN TOFPGA check for transform_set_pixel_storage_depth == NULL 
		
		  The way 420 is packed, 2 channels carry Y component, 1 channel
		  alternate between Cb and Cr, so both channels need the pixel
		  value for Y
 Moved programming gamma from dc to hwss 
 Need to allocate mem before program front end for Fiji 
  Copyright 2016 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  Copyright 2016 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 Should never be hit, if it is we have an erroneous hw config
 Should never be hit, if it is we have an erroneous hw config
 Repeat for water mark set A, B, C and D. 
 clock state A 
 determine the transfer time for a quantity of data for a particular requestor.
 clock state B 
 determine the transfer time for a quantity of data for a particular requestor.
 clock state C 
 determine the transfer time for a quantity of data for a particular requestor.
 clock state D 
 determine the transfer time for a quantity of data for a particular requestor.
 clock state A 
 clock state B 
 clock state C 
 clock state D 
 clock state A 
 clock state B 
 clock state C 
 clock state D 
	
	  The DCHub arbiter has a mechanism to dynamically rate limit the DCHub request stream to the fabric.
	  If the memory controller is fully utilized and the DCHub requestors are
	  well ahead of their amortized schedule, then it is safe to prevent the next winner
	  from being committed and sent to the fabric.
	  The utilization of the memory controller is approximated by ensuring that
	  the number of outstanding requests is greater than a threshold specified
	  by the ARB_MIN_REQ_OUTSTANDING. To determine that the DCHub requestors are well ahead of the amortized schedule,
	  the slack of the next winner is compared with the ARB_SAT_LEVEL in DLG RefClk cycles.
	 
	  TODO: Revisit request limit after figure out right number. request limit for RM isn't decided yet, set maximum value (0x1FF)
	  to turn off it for now.
	REG_SET(DCHUBBUB_ARB_SAT_LEVEL, 0,
			DCHUBBUB_ARB_SAT_LEVEL, 60  refclk_mhz);
	REG_UPDATE(DCHUBBUB_ARB_DF_REQ_OUTSTAND,
 copied from DML.  might want to refactor DML to leverage from DML 
 DML : get_blk256_size 
 full 256B request 
 half 128b request 
 full 256B request 
 half 128b request 
 access_dir not known, must use most constraining 
			 reg128 is true for either horz and vert
			  but segment_order is contiguous
 Exception for 64KB_R_X 
 Init VMID 0 based on PA config
		
		  The external Reference Clock may change based on the board or
		  platform requirements and the programmable integer divide must
		  be programmed to provide a suitable DLG RefClk frequency between
		  a minimum of 20MHz and maximum of 50MHz
 HUBBUB global timer must be enabled.
  Copyright 2019 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
   andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 Reset APG 
 Enable APG 
 Disable APG 
 these are one to one 
	 if Rear Left and Right exist move RC speaker to channel 7
	  otherwise to channel 5
 FRONT Left Right Center and REAR Left Right Center are exclusive 
 This should not happen.it does so we don't get BSOD
 DisplayPort only allows for one audio stream with stream ID 0 
	 When running in "pair mode", pairs of audio channels have their own enable
 REG_UPDATE(APG_DBG_GEN_CONTROL, APG_DBG_AUDIO_CHANNEL_ENABLE, channels);
 Disable forced mem power off 
  Copyright 2019 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
   andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 Enable all clocks in the DP_STREAM_ENC 
 Assert reset to the DP_SYM32_ENC logic 
 Wait for reset to complete (to assert) 
 De-assert reset to the DP_SYM32_ENC logic 
 Wait for reset to de-assert 
 Enable idle pattern generation 
 Set the input mux for video stream source 
 Enable video transmission in main framer 
 Reset and Enable Pixel to Symbol FIFO 
 Disable Clock Ramp Adjuster FIFO 
 Reset and Enable Clock Ramp Adjuster FIFO 
 For Debug -- Enable CRC 
 Disable video transmission 
	 Wait for video stream transmission disabled
	  Larger delay to wait until VBLANK - use max retry of
	  10us5000=50ms. This covers 41.7ms of minimum 24 Hz mode +
	  a little more because we may not trust delay accuracy.
REG_WAIT(DP_SYM32_ENC_VID_STREAM_CONTROL,
		VID_STREAM_STATUS, 0,
		10, 5000);
 Disable SDP tranmission 
 Disable Pixel to Symbol FIFO 
 Disable Clock Ramp Adjuster FIFO 
 Disable DP_SYM32_ENC 
 Disable clocks in the DP_STREAM_ENC 
	 MISC0[0]   = 0    video and link clocks are asynchronous
	  MISC1[0]   = 0    interlace not supported
	  MISC1[2:1] = 0    stereo field is handled by hardware
	  MISC1[5:3] = 0    Reserved
 Interlaced not supported 
	 Double buffer enable for MSA and pixel format registers
	  Only double buffer for changing stream attributes for active streams
	  Do not double buffer when initially enabling a stream
 Pixel Encoding 
 MISC0[2:1] = 01
 MISC0[2:1] = 10
				 HW testing only, no use case yet.
				  Color depth of Y-only could be
				  8, 10, 12, 16 bits
 MISC1[7] = 1
 MISC1[6] = 1
	 For YCbCr420 and BT2020 Colorimetry Formats, VSC SDP shall be used.
	  When MISC1, bit 6, is Set to 1, a Source device uses a VSC SDP to indicate the
	  Pixel EncodingColorimetry Format and that a Sink device shall ignore MISC1, bit 7,
	  and MISC0, bits 7:1 (MISC1, bit 7, and MISC0, bits 7:1, become "don't care").
 Color depth 
 MISC0[7:5] = 000
 MISC0[7:5] = 001
 MISC0[7:5] = 010
 MISC0[7:5] = 011
 bit7 = 0
 bit3=1 
 bit7 = 0
 bit3=1, bit4=0 
 bit7 = 0
 bit2=0, bit1=1 
 bit2=1, bit1=0 
 bit3=1, bit4=1 
 bit7 = 0
 bit2=0, bit1=1 
 bit2=1, bit1=0 
 do nothing 
	 calculate from vesa timing parameters
	  h_active_start related to leading edge of sync
 start at beginning of left border 
	   MSA Packet Mapping to 32-bit Link Symbols - DP2 spec, section 2.7.4.1
	 
	                       Lane 0           Lane 1          Lane 2         Lane 3
	     MSA[0] = {             0,               0,              0,  VFREQ[47:40]}
	     MSA[1] = {             0,               0,              0,  VFREQ[39:32]}
	     MSA[2] = {             0,               0,              0,  VFREQ[31:24]}
	     MSA[3] = {  HTotal[15:8],    HStart[15:8],   HWidth[15:8],  VFREQ[23:16]}
	     MSA[4] = {  HTotal[ 7:0],    HStart[ 7:0],   HWidth[ 7:0],  VFREQ[15: 8]}
	     MSA[5] = {  VTotal[15:8],    VStart[15:8],  VHeight[15:8],  VFREQ[ 7: 0]}
	     MSA[6] = {  VTotal[ 7:0],    VStart[ 7:0],  VHeight[ 7:0],  MISC0[ 7: 0]}
	     MSA[7] = { HSP|HSW[14:8],   VSP|VSW[14:8],              0,  MISC1[ 7: 0]}
	     MSA[8] = {     HSW[ 7:0],       VSW[ 7:0],              0,             0}
 packetIndex 
 packetIndex 
 packetIndex 
	 enabledisable transmission of packet(s).
	  If enabled, packet transmission begins on the next frame
 check if dynamic metadata packet transmission is enabled 
 Enable secondary data path 
 stop generic packets on DP 
 Disable secondary data path if audio is also disabled 
 Configure for PPS packet size (128 bytes) 
 Load PPS into infoframe (SDP) registers 
		 SW should make sure VBID[6] update line number is bigger
		  than PPS transmit line number
 Send PPS data at the line number specified above. 
 Disable Generic Stream Packet 11 (GSP) transmission 
 Set the input mux for video stream source 
 Enable Audio packets 
 Program the ATP and AIP next 
 Enable secondary data path 
 Enable APG block 
 Disable Audio packets 
 Disable STP Stream Enable if other SDP GSP are also disabled 
 Disable APG block 
  Copyright 2019 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
   andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 get current status of link enabled 
 Enable clocks first 
 Reset DPHY.  Only reset if going from disable to enable 
 Configure DPHY settings 
 Configure DPHY settings 
 Shut down clock last 
 programs DP VC payload allocation 
	 --- Set MSE Stream Attribute -
	  Setup VC Payload Table on Tx Side,
	  Issue allocation change trigger
	  to commit payload on both tx and rx side
 we should clean-up table each time 
 --- wait for transaction finish 
	 send allocation change trigger (ACT)
	  this step first sends the ACT,
	  then double buffers the SAT into the hardware
	  making the new allocation active on the DP MST mode link
	 SAT_UPDATE:
	  0 - No Action
	  1 - Update SAT with trigger
	  2 - Update SAT without trigger
	 wait for update to complete
	  (i.e. SAT_UPDATE_PENDING field is set to 0)
	  No need for HW to enforce keepout.
	 Best case and worst case wait time for SAT_UPDATE_PENDING
	    best: 109 us
	    worst: 868 us
	 Best case and worst case wait time for RATE_UPDATE_PENDING
	    best: 116 ns
	    worst: 903 ns
 wait for update to be completed on the link 
 if value == 1 alt mode is disabled, otherwise it is enabled 
 enables DP PHY output for 128b132b encoding 
 Set the transmitter 
 Enable the PHY 
cntl.pll_id = clock_source;
 disable transmitter 
 disable encoder 
 disable transmitter 
  Copyright 2021 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 unused 
 unused 
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 Assume less than 6 pipes 
  Enable CRTC
  Enable CRTC - call ASIC Control Object to enable Timing generator.
 opp instance for OTG, 1 to 1 mapping and odm will adjust 
 VTG enable first is for HW workaround 
 Enable CRTC 
 disable_crtc - call ASIC Control Object to disable Timing generator. 
	 disable otg request until end of the first line
	  in the vertical blank region
 CRTC disabled, so disable  clock. 
 CRTC disabled, so disable  clock. 
		
		  MIN_MASK_EN is gone and MASK is now always enabled.
		 
		  To get it to it work with manual trigger we need to make sure
		  we program the correct bit.
 TRIGA 
 Setup manual flow control for EOF via TRIG_A
 used by enable_timing_synchronization. Not need for FPGA 
 used by enable_timing_synchronization. Not need for FPGA 
  Copyright 2016 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 Force ERAM to shutdown if DMCU is not enabled
 Set default OPTC memory power states
 Shutdown when unassigned and light sleep in VBLANK
 Power down VGA memory
 Power down VPGs
 enable all DCN clock gating 
Enable ability to power gate  don't force power on permanently
 Initialize the dccg
 Not all ASICs have DCCG sw component
		 Power up AND update implementation according to the
		  required signal (which may be different from the
		  default signal on connector).
 Check for enabled DIG to identify enabled display 
 Power gate DSCs 
 Enables outbox notifications for usb4 dpia 
 we want to turn off all dp displays before doing detection 
 if any of the displays are lit up turn them off 
 blank dp stream before power off receiver
	 If taking control over from VBIOS, we may want to optimize our first
	  mode set, so we need to skip powering down pipes until we know which
	  pipes we want to use.
	  Otherwise, if taking control is not possible, we need to power
	  everything down.
 power AFMT HDMI memory TODO: may move to disen output save power
 Set i2c to light sleep until engine is setup
 enable all DCN clock gating 
 DSC0 
 DSC1 
 DSC2 
 disable power gating 
 DCHUBP012345 
 DPP012345 
 DCS012345 
 this is not root pipe 
	
	  DMUB notifies whether restore is required.
	  Optimization to avoid sending commands when not required.
 Convert from MC address to offset into FB 
 DPMS may already disable or 
		 dpms_off status is incorrect due to fastboot
		  feature. When system resume from S4 with second
		  screen only, the dpms_off would be true but
		  VBIOS lit up eDP, so check link status too.
 free acquired resources 
disable az_endpoint
free audio
we have to dynamic arbitrate the audio endpoints
we free the resource, need reset is_audio_acquired
 Reset Back End
 New dc_state in the process of being applied to hardware. 
  Copyright 2019 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 TODO: change include headers amdincludeasic_reg after upstream
TODO: correct dispclkdppclk voltage level determination
 begin 
  macros to expend register list macro defined in HW object header file
 DCN 
 TODO awful hack. fixup dcn20_dwb.h 
 NBIO 
 MMHUB 
 CLOCK 
MPC_RMU_REG_LIST_DCN3AG(2),
 6:1 downscaling ratio: 10006 = 166.666
upto true 4K
 -1 = disable,
 This is previously known to cause hang on S3 cycles if enabled
 -1 = disable
 Create a minimal link encoder object not associated with a particular
  physical connector.
  resource_funcs.link_enc_create_minimal
 Light sleep by default, no need to power down here
 Mapping of VPG, AFMT, DME register blocks to DIO block instance 
 For B0 only. C->F, D->G.
	 Mapping of VPG register blocks to HPO DP block instance:
	  VPG[6] -> HPO_DP[0]
	  VPG[7] -> HPO_DP[1]
	  VPG[8] -> HPO_DP[2]
	  VPG[9] -> HPO_DP[3]
	 Mapping of APG register blocks to HPO DP block instance:
	  APG[0] -> HPO_DP[0]
	  APG[1] -> HPO_DP[1]
	  APG[2] -> HPO_DP[2]
	  APG[3] -> HPO_DP[3]
 allocate HPO stream encoder and create VPG sub-block 
 allocate HPO link encoder 
		 DCN3.1 FPGA Workaround
		  Need to enable HPO DP Stream Encoder before setting OTG master enable.
		  To do so, move calling function enable_stream_timing to only be done AFTER calling
		  function core_link_enable_stream
		
		  Immediate flip can be set dynamically after enabling the plane.
		  We need to require support for immediate flip or underflow can be
		  intermittently experienced depending on peak bw requirements.
	 We don't recalculate clocks for 0 pipe configs, which can block
	  S0i3 as high clocks will block low power states
	  Override any clocks that can block S0i3 to min here
 always should be vlevel 0
 TODO
	 Set B:
	  TODO
	 Set C:
	  TODO
	 Set D:
	  TODO
	 Set A:
	  All clocks min required
	 
	  Set A calculated last so that following calculations are based on Set A
 TODO: remove: 
 end remove
 Disable fast_validate to set min dcfclk in alculate_wm_and_dlg
 Default clock levels are used for diags, which may lead to overclocking.
 Prepass to find max clocks independent of voltage level. 
 loop backwards
 Clocks dependent on voltage level. 
 Clocks independent of voltage level. 
	
	   Resource + asic cap harcoding                
1.4 wa applied by default
 Color pipeline capabilities 
 must use gamma_corr
 no OGAM ROM on DCN301
2
 read VBIOS LTTPR caps 
 interop bit is implicit 
 Init the vm_helper
	
	   Create resources                             
 Clock Sources for Pixel Clock
 todo: not reuse phy_pll registers 
 TODO: DCCG 
 TODO: IRQ 
 HUBBUB 
 HUBPs, DPPs, OPPs and TGs 
 PSR 
 ABM 
 MPC and DSC 
 DWB and MMHUBBUB 
 AUX and I2C 
 YELLOW CARP B0 has 4 DPIA's 
 Audio, Stream Encoders including HPO and virtual, MPC 3D LUTs 
 HW Sequencer and Plane caps 
  Copyright 2019 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
   andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 Do nothing 
	00 - DP_AUX_DPHY_RX_DETECTION_THRESHOLD__1to2 : 12
	01 - DP_AUX_DPHY_RX_DETECTION_THRESHOLD__3to4 : 34
	02 - DP_AUX_DPHY_RX_DETECTION_THRESHOLD__7to8 : 78
	03 - DP_AUX_DPHY_RX_DETECTION_THRESHOLD__15to16 : 1516
	04 - DP_AUX_DPHY_RX_DETECTION_THRESHOLD__31to32 : 3132
	05 - DP_AUX_DPHY_RX_DETECTION_THRESHOLD__63to64 : 6364
	06 - DP_AUX_DPHY_RX_DETECTION_THRESHOLD__127to128 : 127128
	07 - DP_AUX_DPHY_RX_DETECTION_THRESHOLD__255to256 : 255256
	AUX_REG_UPDATE_5(AUX_DPHY_RX_CONTROL0,
	AUX_RX_START_WINDOW = 1 [6:4]
	AUX_RX_RECEIVE_WINDOW = 1 default is 2 [10:8]
	AUX_RX_HALF_SYM_DETECT_LEN  = 1 [13:12] default is 1
	AUX_RX_TRANSITION_FILTER_EN = 1 [16] default is 1
	AUX_RX_ALLOW_BELOW_THRESHOLD_PHASE_DETECT [17] is 0  default is 0
	AUX_RX_ALLOW_BELOW_THRESHOLD_START [18] is 1  default is 1
	AUX_RX_ALLOW_BELOW_THRESHOLD_STOP [19] is 1  default is 1
	AUX_RX_PHASE_DETECT_LEN,  [21,20] = 0x3 default is 3
	AUX_RX_DETECTION_THRESHOLD [30:28] = 1
AUX_DPHY_TX_REF_CONTROL'AUX_TX_REF_DIV HW default is 0x32;
 Set AUX_TX_REF_DIV Divider to generate 2 MHz reference from refclk
 27MHz -> 0xd
 100MHz -> 0x32
 48MHz -> 0x18
from display_init
 Set TMDS_CTL0 to 1.  This is a legacy setting.
HW default is 5
	 set the flag to indicate whether driver poll the I2C data pin
	  while doing the DP sink detect
	if (dal_adapter_service_is_feature_supported(as,
		FEATURE_DP_SINK_DETECT_POLL_DATA_PIN))
		enc10->base.features.flags.bits.
	 For DCE 8.0 and 8.1, by design, UNIPHY is hardwired to DIG_BE.
	  SW always assign DIG_FE 1:1 mapped to DIG_FE for non-MST UNIPHY.
	  SW assign DIG_FE to non-MST UNIPHY first and MST last. So prefer
	  DIG is per UNIPHY and used by SST DP, eDP, HDMI, DVI and LVDS.
	  Prefer DIG assignment is decided by board design.
	  For DCE 8.0, there are only max 6 UNIPHYs, we assume board design
	  and VBIOS will filter out 7 UNIPHY for DCE 8.0.
	  By this, adding DIGG should not hurt DCE 8.0.
	  This will let DCE 8.1 share DCE 8.0 as much as possible
 default to one to mirror Windows behavior 
 Override features with DCE-specific values 
 DPIA equivalent of link_transmitter_control. 
 reset training complete 
 Enable transmitter and encoder. 
 0 for SST; 5 for MST 
		 DIG_BE_CNTL.DIG_HPD_SELECT set to 5 (hpdsel - 1) to indicate HPD pin
		  unused by DPIA.
 Enable transmitter and encoder. 
 0 for SST; 5 for MST 
		 DIG_BE_CNTL.DIG_HPD_SELECT set to 5 (hpdsel - 1) to indicate HPD pin
		  unused by DPIA.
 Disable transmitter and encoder. 
 0 for SST; 5 for MST 
 0 for SST; 5 for MST 
 [Note] no need to check hw_internal_rev once phy mux selection is ready
		
		  B0 phys use a new set of registers to check whether alt mode is disabled.
		  if value == 1 alt mode is disabled, otherwise it is enabled.
 [Note] need to change TRANSMITTER_UNIPHY_CD to FG once phy mux selection is ready
 in usb c dp2 mode, max lane count is 2 
 [Note] no need to check hw_internal_rev once phy mux selection is ready
  Copyright 2019 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
   andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  Copyright 2018 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 phase  modulo = dpp pipe clk  dpp global clk
 use FF at the end
DTO must be enabled to generate a 0Hz clock output
 enabled to select one of the DTBCLKs for pipe 
 select one of the PHYD32CLKs as the source for symclk32_se 
 set refclk as the source for symclk32_se 
 select one of the PHYD32CLKs as the source for symclk32_le 
 set refclk as the source for symclk32_le 
DTO must be enabled to generate a 0 Hz clock output
Disable DTO
 Force PHYSYMCLK on and Select phyd32clk as the source of clock which is output to PHY through DCIO 
 Controls the generation of pixel valid for OTG in (OTG -> HPO case) 
	 Mode	                DTBDTO Rate       DTBCLK_DTO<x>_DIV Register
	  ODM 4:1 combine      pixel rate4      2
	  ODM 2:1 combine      pixel rate2      4
	  non-DSC 4:2:0 mode   pixel rate2      4
	  DSC native 4:2:0     pixel rate2      4
	  DSC native 4:2:2     pixel rate2      4
	  Other modes          pixel rate        8
 phase  modulo = dtbclk  dtbclk ref
		 The recommended programming sequence to enable DTBCLK DTO to generate
		  valid pixel HPO DPSTREAM ENCODER, specifies that DTO source select should
		  be set only after DTO is enabled
 phase  modulo = dtbclk  dtbclk ref
REG_UPDATE(DCCG_AUDIO_DTO_SOURCE,
		DCCG_AUDIO_DTBCLK_DTO_USE_512FBR_DTO, 1);
  04 - DCCG_AUDIO_DTO_SEL_AUDIO_DTO_DTBCLK
  03 - DCCG_AUDIO_DTO_SEL_NO_AUDIO_DTO
	
	  Assume refclk is sourced from xtalin
	  expect 24MHz
	 Set HPO stream encoder to use refclk to avoid case where PHY is
	  disabled and SYMCLK32 for HPO SE is sourced from PHYD32CLK which
	  will cause DCN to hang.
  Copyright 2012-20 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  Copyright 2016 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 NOTE: This is not a generic setup_gsl function (hence the suffix as_lock)
  This is only used to lock pipes in pipe splitting case with immediate flip
  Ordinary MPCOTG locks suppress VUPDATE which doesn't help with immediate,
  so we get tearing with freesync since we cannot flip multiple pipes
  atomically.
  We use GSL for this:
  - immediate flip: find first available GSL group if not already assigned
                    program gsl with that group, set current OTG as master
                    and always us 0x4 = AND of flip_ready from all pipes
  - vsync flip: disable GSL if used
  Groups in stream_res are stored as +1 from HW registers, i.e.
  gsl_0 <=> pipe_ctx->stream_res.gsl_group == 1
  Using a magic value like -1 would require tracking all initsresets
		 return if group already assigned since GSL was set up
		  for vsync flip, we would unassign so it can't be "left over"
 set gsl group reg field and mark resource used 
 invalid case
 if not in use, just return
 unset gsl group reg field and mark resource free 
 at this point we want to program whether it's to enable or disable 
 disable power gating 
 DCHUBP012345 
 DPP012345 
 DCS012345 
	
	  set MICROSECOND_TIME_BASE_DIV
	  100Mhz refclk -> 0x120264
	  27Mhz refclk -> 0x12021b
	  48Mhz refclk -> 0x120230
	 
	
	  set MILLISECOND_TIME_BASE_DIV
	  100Mhz refclk -> 0x1186a0
	  27Mhz refclk -> 0x106978
	  48Mhz refclk -> 0x10bb80
	 
 This value is dependent on the hardware pipeline delay so set once per SOC 
 Blank pixel data during initialization 
 program opp dpg blank color 
 get the OTG active size 
 get the OPTC source 
 DSC0 
 DSC1 
 DSC2 
 DSC3 
 DSC4 
 DSC5 
 DPP0 
 DPP1 
 DPP2 
 DPP3 
 DPP4 
 DPP5 
		
		  Do not power gate DPP5, should be left at HW default, power on permanently.
		  PG on Pipe5 is De-featured, attempting to put it to PG state may result in hard
		  reset.
		  REG_UPDATE(DOMAIN11_PG_CONFIG,
		 		DOMAIN11_POWER_GATE, power_gate);
		 
		  REG_WAIT(DOMAIN11_PG_STATUS,
		 		DOMAIN11_PGFSM_PWR_STATUS, pwr_status,
		  		1, 1000);
 DCHUBP0 
 DCHUBP1 
 DCHUBP2 
 DCHUBP3 
 DCHUBP4 
 DCHUBP5 
		
		  Do not power gate DCHUB5, should be left at HW default, power on permanently.
		  PG on Pipe5 is De-featured, attempting to put it to PG state may result in hard
		  reset.
		  REG_UPDATE(DOMAIN10_PG_CONFIG,
		 		DOMAIN10_POWER_GATE, power_gate);
		 
		  REG_WAIT(DOMAIN10_PG_STATUS,
		 		DOMAIN10_PGFSM_PWR_STATUS, pwr_status,
		 		1, 1000);
 disable HW used by plane.
  note:  cannot disable until disconnect is complete
	 In flip immediate with pipe splitting case GSL is used for
	  synchronization so we must disable it when the plane is disabled.
 ODM combine 4:1 case 
	 by upper caller loop, pipe0 is parent pipe and be called first.
	  back end is set up by for pipe0. Other children pipe share back end
	  with pipe 0. No program is needed.
 TODO check if timing_changed, disable stream if timing changed 
	 HW program guide assume display already disable
	  by unplug sequence. OTG assume stop.
 VTG is  within DCHUB command block. DCFCLK is always on 
 DRR should set trigger event to monitor surface update event
	 Event triggers and num frames initialized for DRR, but can be
	  later updated for PSR use. Note DRR trigger events are generated
	  regardless of whether num frames met.
 TODO program crtc source select for non-virtual signal
 TODO program FMT 
 TODO setup link_enc 
 TODO set stream attributes 
 TODO program audio 
 TODO enable stream if timing changed 
 TODO unblank stream if DP 
	
	  program OGAM only for the top pipe
	  if there is a pipe split then fix diagnostic is required:
	  how to pass OGAM parameter for stream.
	  if programming for all pipes is required then remove condition
	  pipe_ctx->top_pipe == NULL ,but then fix the diagnostic.
		
		  there is no ROM
	
	  if above if is not executed then 'params' equal to 0 and set in bypass
	 handle here the optimized cases when de-gamma ROM could be used.
	 
		
		  if we are here, we did not handle correctly.
		  fix is required for this use case
 get opp dpg blank color 
if (dc->debug.sanity_checks) {
	dcn10_verify_allow_pstate_change_high(dc);
}
 enable DCFCLK current DCHUB 
 initialize HUBP on power up 
 make sure OPP_PIPE_CLOCK_EN = 1 
 TODO: enabledisable in dm as per update type.
	if (plane_state) {
		DC_LOG_DC(dc->ctx->logger,
				"Pipe:%d 0x%x: addr hi:0x%x, "
				"addr low:0x%x, "
				"src: %d, %d, %d,"
				" %d; dst: %d, %d, %d, %d;\n",
				pipe_ctx->pipe_idx,
				plane_state,
				plane_state->address.grph.addr.high_part,
				plane_state->address.grph.addr.low_part,
				plane_state->src_rect.x,
				plane_state->src_rect.y,
				plane_state->src_rect.width,
				plane_state->src_rect.height,
				plane_state->dst_rect.x,
				plane_state->dst_rect.y,
				plane_state->dst_rect.width,
				plane_state->dst_rect.height);
		DC_LOG_DC(dc->ctx->logger,
				"Pipe %d: width, height, x, y         format:%d\n"
				"viewport:%d, %d, %d, %d\n"
				"recout:  %d, %d, %d, %d\n",
				pipe_ctx->pipe_idx,
				plane_state->format,
				pipe_ctx->plane_res.scl_data.viewport.width,
				pipe_ctx->plane_res.scl_data.viewport.height,
				pipe_ctx->plane_res.scl_data.viewport.x,
				pipe_ctx->plane_res.scl_data.viewport.y,
				pipe_ctx->plane_res.scl_data.recout.width,
				pipe_ctx->plane_res.scl_data.recout.height,
				pipe_ctx->plane_res.scl_data.recout.x,
				pipe_ctx->plane_res.scl_data.recout.y);
		print_rq_dlg_ttu(dc, pipe_ctx);
	}
 Program system aperture settings
	if (dc->debug.sanity_checks) {
		dcn10_verify_allow_pstate_change_high(dc);
	}
	 use TG master update lock to lock everything on the TG
	  therefore only top pipe need to lock
 no reason it should take this long for immediate flips 
	 In flip immediate and pipe splitting case, we need to use GSL
	  for synchronization. Only do setup on locking and on flip type change.
 Exit on unchanged, unused pipe 
 Detect pipe enabledisable 
 Detect plane change 
 Detect top pipe only changes 
 Detect odm changes 
 Detect global sync changes 
	
	  Detect opp  tg change, only set on change, not on enable
	  Assume mpcc inst = pipe index, if not this code needs to be updated
	  since mpcc is what is affected by these. In fact all of our sequence
	  makes this assumption at the moment with how hubp reset is matched to
	  same index mpcc reset.
	
	  Detect mpcc blending changes, only dpp inst and opp matter here,
	  mpccs getting removedinserted update connected ones during their own
	  programming
 Detect dppclk change 
 Check for scl update 
 Check for vp update 
 Detect dlgtturq updates 
 Detect pipe interdependent updates 
 Detect any other updates to tturqdlg 
	 TODO: Need input parameter to tell current DCHUB pipe tie to which OTG
	  VTG is within DCHUBBUB which is commond block share by each pipe HUBP.
	  VTG is 1:1 mapping with OTG. Each pipe HUBP will select which VTG
 program the input csc
TODO :for CNVC set scale and bias registers if necessary
 MPCC inst is equal to pipe index in practice
 scaler configuration 
 Any updates are handled in dc interface, just need to apply existing for plane enable 
	 Any updates are handled in dc interface, just need
 dppcm gamut remap
call the dcn2 method which uses mpc csc
 Only need to unblank on top pipe 
 Only update TG on top pipe 
	 dcn10_translate_regamma_to_hw_format takes 750us to finish
	  only do gamma programming for powering on, internal memcmp to avoid
	  updating on slave planes
	 If the pipe has been enabled or has a different opp, we
	  should reprogram the fmt. This deals with cases where
	  interation between mpc and odm combine on different streams
	  causes a different pipe to be chosen to odm combine with.
 Carry over GSL groups in case the context is changing. 
turn off triple buffer for full update
 Set pipe update flags and lock pipes 
 OTG blank before disabling all front ends 
 Disconnect mpcc 
	
	  Program all updated pipes, order matters for mpcc setup. Start with
	  top pipe and program all pipes that follow in order
 Program secondary blending tree and writeback pipes 
	
	  If we are enabling a pipe, we need to wait for pending clear as this is a critical
	  part of the enable operation otherwise, DM may request an immediate flip which
	  will cause HW to perform an "immediate enable" (as opposed to "vsync enable") which
	  is unsupported on DCN.
 WA to apply WM setting
 WA for stutter underflow during MPO transitions when adding 2nd plane 
 program dchubbub watermarks 
 decrease compbuf size 
 program dchubbub watermarks 
 increase compbuf size 
 recalculate DML parameters 
 apply updated bandwidth parameters 
 update hubp configs for all pipes 
 set the OPTC source mux 
 set MCIF_WB buffer and arbitration configuration 
 Enable MCIF_WB 
 Enable DWB 
 TODO: add sequence to enabledisable warmup 
 always repeat 
 VMID cannot be 0 for vm context 
 Call Helper to track VMID use
 only 3 items below are used by unblank 
 TODO - DP2.0 HW: Set ODM mode in dp hpo encoder here 
 DPMS may already disable or 
		 dpms_off status is incorrect due to fastboot
		  feature. When system resume from S4 with second
		  screen only, the dpms_off would be true but
		  VBIOS lit up eDP, so check link status too.
 free acquired resources 
disable az_endpoint
free audio
we have to dynamic arbitrate the audio endpoints
we free the resource, need reset is_audio_acquired
	 by upper caller loop, parent pipe: pipe0, will be reset last.
	  back end share by all pipes and will be disable only when disable
	  parent pipe.
 Reset Back End
 input to MPCC is always RGB, by default leave black_color at 0
	
	  TODO: remove hack
	  Note: currently there is a bug in init_hw such that
	  on resume from hibernate, BIOS sets up MPCC0, and
	  we do mpcc_remove but the mpcc cannot go to idle
	  after remove. This cause us to pick mpcc1 here,
	  which causes a pstate hang for yet unknown reason.
 If there is no full update, don't need to touch MPC tree
 check if this MPCC is already being used 
 remove MPCC if being used 
 Call MPC to insert new plane 
	 For MST, there are multiply stream go to only one link.
	  connect DIG back_end to front_end while enable_stream and
	  disconnect them during disable_stream
	  BY this, it is logic clean to separate stream and link
 enable early control to avoid corruption on DP monitor
 enable audio only within mode set 
 if using dynamic meta, don't set up generic infopackets 
 Initialize the dccg
Enable ability to power gate  don't force power on permanently
 Specific to FPGA dccg and registers
 Blank pixel data with OPP DPG 
 Reset all MPCC muxes 
 initialize OPP mpc_tree parameter 
dc->res_pool->opps[i]->mpc_tree_params.opp_id = dc->res_pool->opps[i]->inst;
dc->res_pool->opps[i]->mpc_tree_params.opp_list = NULL;
to do
 initialize DWB pointer to MCIF_WB 
  Copyright 2018 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
	 According the hardware spec, we need to poll for the lowest
	  bit of PAGE_TABLE_BASE_ADDR_LO32 = 1 any time a GPUVM
	  context is updated. We can't use REG_WAIT here since we
	  don't have a seperate field to wait on.
	 
	  TODO: Confirm timeout  poll interval with hardware team
 VM setup timed out 
 Note: per hardware spec PAGE_TABLE_BASE_ADDR_LO32 must be programmed last in sequence 
  Copyright 2016 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
Temp, put CM in bypass mode
 Setting de gamma bypass for now 
	 determine which gamut_remap coefficients (A or B) we are using
	  currently. select the alternate set to double buffer
	  the update so gamut_remap is updated on frame boundary
 value stored in dbg reg will be 1 greater than mode we want 
 Bypass if type is bypass or hw 
	 determine which CSC coefficients (A or B) we are using
	  currently.  select the alternate set to double buffer
	  the CSC update so CSC is updated on frame boundary
program blnd lut RAM A
program blnd lut RAM B
program shaper RAM A
program shaper RAM B
  select ramA or ramB, or bypass
  select color channel size 10 or 12 bits
  select 3dlut size 17x17x17 or 9x9x9
  load selected lut with 10 bits color channels
  Copyright 2012-17 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 we only support 1 adapter currently 
 Set DWB source size 
 source size is not equal the source size, then enable cropping. 
 Set CAPTURE_RATE 
 Set CNV output pixel depth 
 Only chroma scaling (sub-sampling) is supported in DCN2 
 disable power gating 
REG_UPDATE_5(WB_EC_CONFIG, DISPCLK_R_WB_GATE_DIS, 1,
			 DISPCLK_G_WB_GATE_DIS, 1, DISPCLK_G_WBSCL_GATE_DIS, 1,
			 WB_LB_LS_DIS, 1, WB_LUT_LS_DIS, 1);
 Set WB_ENABLE (not double buffered; capture not enabled) 
 Set CNV parameters 
 Set scaling parameters 
 Enable DWB capture enable (double buffered) 
 disable warmup
 disable CNV 
 disable WB 
 soft reset 
 enable power gating 
REG_UPDATE_5(WB_EC_CONFIG, DISPCLK_R_WB_GATE_DIS, 0,
			 DISPCLK_G_WB_GATE_DIS, 0, DISPCLK_G_WBSCL_GATE_DIS, 0,
			 WB_LB_LS_DIS, 0, WB_LUT_LS_DIS, 0);
 Only chroma scaling (sub-sampling) is supported in DCN2 
	
	  Check if the caller has already locked CNV registers.
	  If so: assume the caller will unlock, so don't touch the lock.
	  If not: lock them for this update, then unlock after the
	  update is complete.
 Lock DWB registers 
 Set CNV parameters 
 Set scaling parameters 
 Unlock DWB registers 
 Program scaling mode 
 Program output size 
 Program round offsets 
 Program clamp values 
 Program outside pixel strategy to use edge pixels 
 horizontal scale 
 vertical scale 
 horizontal scale 
 vertical scale 
  Copyright 2016 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 BGAM has no ROM, and definition is different, can't reuse same dump
REG_GET(CM_BLNDGAM_CONTROL,
		CM_BLNDGAM_LUT_MODE, &s->rgam_lut_mode);
hardcode default
FORMAT_CONTROL. FORMAT_CNV16                                 	default 0: U0.16S.1.15;         1: U1.15 S.1.14
FORMAT_CONTROL. CNVC_BYPASS_MSB_ALIGN          				default 0: disabled              1: enabled
FORMAT_CONTROL. CLAMP_POSITIVE                               	default 0: disabled              1: enabled
FORMAT_CONTROL. CLAMP_POSITIVE_C                          	default 0: disabled              1: enabled
 ARGB16161616_UNORM 
 if input adjustments exist, program icsc with those values
compute the maximum number of lines that we can fit in the line buffer
 +5 to ceil 
 +5 to ceil 
 +5 to ceil 
 420 mode: using 3rd mem from Y, Cr and Cb 
 todo: clarify what to program these to 
0x1404
  Copyright 2017 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 Object IF functions 
 Macro definitios for REG_SET macros
 API functions (external or via structure->function_pointer) 
 This returns the capabilities for a single DSC encoder engine. Number of slices and total throughput
  can be doubled, tripled etc. by using additional DSC engines.
 v1.2 - DP spec defined it in reverse order and we kept it 
	 Maximum total throughput with all the slices combined. This is different from how DP spec specifies it.
	  Our decoder's total throughput in Pixs is equal to DISPCLK. This is then shared between slices.
	  The value below is the absolute maximum value. The actual throughput may be lower, but it'll always
	  be sufficient to process the input pixel rate fed into a single DSC engine.
	 For pixel clock bigger than a single-pipe limit we'll need two engines, which then doubles our
	  throughput and number of slices, but also introduces a lower limit of 2 slices
 TODO DSC: This is actually image width limitation, not a slice width. This should be added to the criteria to use ODM.
 (including 64 overlap pixels for eDP MSO mode) 
 116th of a bit 
 this function read dsc related register fields to be logged later in dcn10_log_hw_state
  into a dcn_dsc_state struct.
 This module's internal functions 
 DC_LOG_DSC("\trc_parameter_set %d", pps->rc_parameter_set); 
 Validate input parameters 
 6.0 <= bits_per_pixel <= 63.9375
 v1.1 line buffer depth range:
 v1.2 line buffer depth range:
 Copy input config 
 TODO: in addition to validating slice height (pic height must be divisible by slice height),
 see what happens when the same condition doesn't apply for slice_widthpic_width.
 NOTE: We don't support DSC_PIXFMT_SIMPLE_YCBCR422 
 Non-PPS values 
reg_vals->disable_ich                 = 0;
 PPS values 
 Updates dsc_reg_values::reg_vals::xxx fields based on the values from computed params.
  This is required because dscc_compute_dsc_parameters returns a modified PPS, which in turn
  affects non-PPS register values.
 pps_computed will have the "expanded" values; need to shift them to make them fit for regs.
 dsccif registers
 dscc registers
	REG_SET_2(DSCC_CONFIG1, 0,
		DSCC_RATE_CONTROL_BUFFER_MODEL_SIZE, reg_vals->rc_buffer_model_size,
  Copyright 2012-2021 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 The format of default addr is 48:12 of the 48 bit addr
 The format of highlow are 48:18 of the 48 bit addr
 1 = system physical memory 
 DLG - Per hubp 
 DLG - Per lumachroma 
 TTU - per hubp 
 TTU - per lumachroma 
 Assumed surf0 is luma and 1 is chroma 
 disable_dlg_test_mode Set 9th bit to 1 to disable "dv" mode 
	
	if (VSTARTUP_START - (VREADY_OFFSET+VUPDATE_WIDTH+VUPDATE_OFFSET)htotal)
	<= OTG_V_BLANK_END
		Set HUBP_VREADY_AT_OR_AFTER_VSYNC = 1
	else
		Set HUBP_VREADY_AT_OR_AFTER_VSYNC = 0
	 otg is locked when this func is called. Register are double buffered.
	  disable the requestors is not needed
 DCN2 (GFX10), the following GFX fields are deprecated. They can be set but they will not be used:
 	NUM_BANKS
 	NUM_SE
 	NUM_RB_PER_SE
 	RB_ALIGNED
  Other things can be defaulted, since they never change:
 	PIPE_ALIGNED = 0
 	META_LINEAR = 0
  In GFX10, only these apply:
 	PIPE_INTERLEAVE
 	NUM_PIPES
 	MAX_COMPRESSED_FRAGS
 	SW_MODE
	 Program data and meta surface pitch (calculation from addrlib)
	  444 or 420 luma
 Chroma pitch zero can cause system hang! 
 Program rotation angle and horz mirror - no mirror 
 swap for ABGR format 
 Mapping is same as ipp programming (cnvc) 
we use crossbar already
 ARGB16161616_UNORM 
we use crossbar already
 don't see the need of program the xbar in DCN 1.0 
 no shift of the cursor HDL schedule 
 used to shift the cursor chunk request deadline 
 set to HW mode 
 for DMDATA flip, need to use SURFACE_UPDATE_LOCK 
 toggle DMDATA_UPDATED and set repeat and size 
 set DMDATA address 
 set to SW mode before loading data 
 toggle DMDATA_SW_UPDATED to start loading sequence 
 load data into hubp dmdata buffer 
 Note that DL_DELTA must be programmed if we want to use TTU mode 
 load dmdata into HUBP buffer in SW mode 
program flip type
 Program VMID reg
 turn off stereo if not in stereo
	 HW automatically latch rest of address register on write to
	  DCSURF_PRIMARY_SURFACE_ADDRESS if SURFACE_UPDATE_LOCK is not used
	 
	  program high first and then the low addr, order matters!
		 DCN1.0 does not support const color
		  TODO: program DCHUBBUB_RET_PATH_DCC_CFGx_01
		  base on address->grph.dcc_const_color
		  x = 0, 2, 4, 6 for pipe 0, 1, 2, 3 for rgb and luma
		  x = 1, 3, 5, 7 for pipe 0, 1, 2, 3 for chroma
			 init sequence workaround: in case HUBP is
			  power gated, this wait would timeout.
			 
			  we just wrote reg_val to non-0, if it stay 0
			  it means HUBP is gated
	
	  Guard aganst cursor_set_position() from being called with invalid
	  attributes
	 
	  TODO: Look at combining cursor_set_position() and
	  cursor_set_attributes() into cursor_update()
 Rotated cursor widthheight and hotspots tweaks for offset calculation
 not visible beyond right edge
 not visible beyond left edge
 not visible beyond bottom edge
 not visible beyond top edge
 TODO Handle surface pixel formats other than 4:4:4 
 Requester 
 DLG - Per hubp 
 DLG - Per lumachroma 
 TTU - per hubp 
 TTU - per lumachroma 
 Assumed surf0 is luma and 1 is chroma 
 Rest of hubp 
 Requestor Regs 
 DLG - Per hubp 
 DLG - Per lumachroma 
 TTU - per hubp 
 TTU - per lumachroma 
 Assumed surf0 is luma and 1 is chroma 
  Copyright 2012-17 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 should never happen, bug 
 Even tap coefficient (bits 1:0 fixed to 0) 
 Writeread control for even coefficient 
 Odd tap coefficient (bits 1:0 fixed to 0) 
 Writeread control for odd coefficient 
Calculate ratio
Program ratio
 Program taps
 Calculate phase
 Program phase
 Program LUT coefficients
Calculate ratio
Program ratio
 Program taps
 Calculate phase
 Program phase
 Program LUT coefficients
  Copyright 2016 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 DML: get_bytes_per_element 
 copied from DML.  might want to refactor DML to leverage from DML 
 DML : get_blk256_size 
 full 256B request 
 half 128b request 
 full 256B request 
 half 128b request 
 implement section 1.6.2.1 of DCN1_Programming_Guide.docx 
 access_dir not known, must use most constraining 
			 reg128 is true for either horz and vert
			  but segment_order is contiguous
 Exception for 64KB_R_X 
 Init VMID 0 based on PA config
For ZFB case need to put DCHUB FB BASE and TOP upside down to indicate ZFB mode
This field defines the 24 MSBs, bits [47:24] of the 48 bit AGP Base
This field defines the bottom range of the AGP aperture and represents the 24
MSBs, bits [47:24] of the 48 address bits
This field defines the top range of the AGP aperture and represents the 24
MSBs, bits [47:24] of the 48 address bits
Should not touch FB LOCATION (done by VBIOS on AsicInit table)
This field defines the 24 MSBs, bits [47:24] of the 48 bit AGP Base
This field defines the bottom range of the AGP aperture and represents the 24
MSBs, bits [47:24] of the 48 address bits
This field defines the top range of the AGP aperture and represents the 24
MSBs, bits [47:24] of the 48 address bits
Should not touch FB LOCATION (should be done by VBIOS)
This field defines the 24 MSBs, bits [47:24] of the 48 bit AGP Base
This field defines the bottom range of the AGP aperture and represents the 24
MSBs, bits [47:24] of the 48 address bits
This field defines the top range of the AGP aperture and represents the 24
MSBs, bits [47:24] of the 48 address bits
 DC hub reference frequency must be around 50Mhz, otherwise there may be
 overflowunderflow issues when doing HUBBUB programming
 HUBBUB global timer must be enabled.
	
	  Need to clamp to max of the register values (i.e. no wrap)
	  for dcn1, all wm registers are 21-bit wide
	
	  There's a special case when going from p-state support to p-state unsupported
	  here we are going to LOWER watermarks to go to dummy p-state only, but this has
	  to be done prepare_bandwidth, not optimize
 164KB for DCN2.0 
  Copyright 2016 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  Copyright 2018 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 phase  modulo = dpp pipe clk  dpp global clk
 use FF at the end
 DCN20 has never been validated for non-xtalin as reference
 frequency.  There's actually no way for DC to determine what
 frequency a non-xtalin source is.
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 not valid used case! 
	 determine which CSC coefficients (A or B) we are using
	  currently.  select the alternate set to double buffer
	  the CSC update so CSC is updated on frame boundary
	 determine which CSC coefficients (A or B) we are using
	  currently.  select the alternate set to double buffer
	  the CSC update so CSC is updated on frame boundary
hw fixed in new review
		this will only work if OTG is locked.
		 if we were to support OTG unlock case,
		 the workaround will be more complex
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 color ramp generator mixes 16-bits color 
 requested bpc 
	 RGB values of the color bars.
	  Produce two RGB colors: RGB0 - white (all Fs)
	  and RGB1 - black (all 0s)
	  (three RGB components for two colors)
 dest color (converted to the specified color format) 
 translate to bit depth 
 set DPG dimentions 
 set DPG offset 
 adjust color to the required colorFormat 
			 dst = 2^dstBpc  src  2^srcBpc = src >>
			  (srcBpc - dstBpc);
		 DPG_COLOUR registers are 16-bit MSB aligned value with bits 3:0 hardwired to ZERO.
		  XXXXXXXXXX000000 for 10 bit,
		  XXXXXXXX00000000 for 8 bit,
		  XXXXXX0000000000 for 6 bits
 enable test pattern 
		 increment for the first ramp for one color gradation
		  1 gradation for 6-bit color is 2^10
		  gradations in 16-bit color
 enable test pattern 
 16-bit MSB aligned value. Bits 3:0 of this field are hardwired to ZERO 
	 Specifies the number of extra left edge pixels that are supplied to
	  the 422 horizontal chroma sub-sample filter.
	  Note that when left edge pixel is not "0", fmt pixel encoding can be in either 420 or 422 mode
 Constructor, Destructor               
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  Enable CRTC
  Enable CRTC - call ASIC Control Object to enable Timing generator.
	 TODO FPGA wait for answer
	  OTG_MASTER_UPDATE_MODE != CRTC_MASTER_UPDATE_MODE
	  OTG_MASTER_UPDATE_LOCK != CRTC_MASTER_UPDATE_LOCK
	 opp instance for OTG. For DCN1.0, ODM is remoed.
	  OPP and OPTC should 1:1 mapping
 VTG enable first is for HW workaround 
 Enable CRTC 
  DRR double buffering control to select buffer point
  for V_TOTAL, H_TOTAL, VTOTAL_MIN, VTOTAL_MAX, VTOTAL_MIN_SEL and VTOTAL_MAX_SEL registers
  Options: anytime, start of frame, dp start of frame (range timing)
 For the below, I'm not sure how your GSL parameters are stored in your env,
  so I will assume a gsl_params struct for now
  There are (MAX_OPTC+1)2 gsl groups available for use.
  In each group (assign an OTG to a group by setting OTG_GSLX_EN = 1,
  set one of the OTGs to be the master (OTG_GSL_MASTER_EN = 1) and the rest are slaves.
 Use the gsl allow flip as the master update lock 
 You can control the GSL timing by limiting GSL to a window (X,Y) 
 DSC encoder frame start controls: x = h position, line_num = # of lines from vstartup 
 Set DSC-related configuration.
    dsc_mode: 0 disables DSC, other values enable DSC in specified format
    sc_bytes_per_pixel: Bytes per pixel in u3.28 format
    dsc_slice_width: Slice width in pixels
TEMP: Need to figure out inheritance model here.
	 TODO: In pseudocode but does not affect maximus, delete comment if we dont need on asic
	  REG_SET(OTG_GLOBAL_CONTROL2, 0, GLOBAL_UPDATE_LOCK_EN, 1);
	  Program OTG register MASTER_UPDATE_LOCK_DB_XY to the position before DP frame start
	  REG_SET_2(OTG_GLOBAL_CONTROL1, 0,
	 		MASTER_UPDATE_LOCK_DB_X, 160,
	 		MASTER_UPDATE_LOCK_DB_Y, 240);
	 2 pieces of memory required for up to 5120 displays, 4 for up to 8192,
	  however, for ODM combine we can simplify by always using 4.
	  To make sure there's no overlap, each instance "reserves" 2 memories and
	  they are uniquely combined here.
 Work around VBIOS not updating OPTC_NUM_OF_INPUT_SEGMENT 
 accessing slave OTG registers 
 disable slave OTG 
 wait until disabled 
 assign slave OTG to be controlled by master update lock 
 accessing master OTG registers 
 saving update lock state, not sure if it's needed 
 unlocking master OTG 
 calculate when to enable slave OTG 
	
	  set master OTG to unlock when VH
	  counters reach calculated values
 lock master OTG 
 accessing slave OTG registers 
	
	  enable slave OTG, the OTG is locked with
	  master's update lock, so it will not run
 accessing master OTG registers 
	
	  unlock master OTG. When master HV counters reach
	  DB_XY point, slave OTG will start
 accessing slave OTG registers 
 wait for slave OTG to start running
 accessing master OTG registers 
 disable the XY point
restore master update lock
 accessing slave OTG registers 
 restore slave to be controlled by it's own 
 used by enable_timing_synchronization. Not need for FPGA 
 used by enable_timing_synchronization. Not need for FPGA 
	Minimum HSYNC = 8 pixels asked By HW in the first place for no actual reason. Oculus Rift S will not light up with 8 as it's hsyncWidth is 6. Changing it to 4 to fix that issue.
 Copyright 2016 Advanced Micro Devices, Inc.
  Copyright 2019 Raptor Engineering, LLC
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 SRExitTime
todo
 SRExitTime
 Defaults that get patched on driver load from firmware. 
Extra state, no dispclk ramping
Extra state, no dispclk ramping
 begin 
 DCN 
 TODO awful hack. fixup dcn20_dwb.h 
 NBIO 
 MMHUB 
upto 5K
	 Links supporting dynamically assigned link encoder will be assigned next
	  available encoder if one not already assigned.
 TODO: un-hardcode
 TODO - DP2.0 HW: calculate requested_sym_clk for UHBR rates 
 If this ASSERT fails, dsc was not released properly 
 Always do 1-to-1 mapping when number of DSCs is same as number of pipes 
 Return old DSC to avoid the need for re-programming 
 Find first free DSC 
 Get a DSC if required and available 
 The number of DSCs can be less than the number of pipes 
 Get a DSC if required and available 
 Not supported 
 HACTIVE halved for odm combine 
 Calculate new vp and recout for left pipe 
 Need at least 16 pixels width per side 
 Calculate new vp and recout for right pipe 
 HACTIVE halved for odm combine 
 Need at least 16 pixels width per side 
		 todo:
		pipes[pipe_cnt].pipe.src.dynamic_metadata_enable = 0;
		pipes[pipe_cnt].pipe.src.dcc = 0;
 todo: rotation?
 12 vblank 
 36 bytes dp, 32 hdmi 
 Treat 4to1 mpc combine as an mpo of 2 2-to-1 combines 
 In case there is no signal, set dp with 4 lanes to allow max config 
 todo: default max for now, until there is logic reflecting this in dc
fill up the audio sample rate (unit in kHz)
		
		  For graphic plane, cursor number is 1, nv12 is 0
		  bw calculations due to cursor onoff
vp_widthhratio
vp_heightvratio
when is_hsplit != 1
when is_hsplit != 1
Lb only or Full scl
 stereo is not split 
Lb only or Full scl
support always scale
 populate writeback information 
 two memory piece for luma 
 two memory piece for chroma 
 packed mode 
 p010 
 there is 4bit fraction 
 Writeback MCIF_WB arbitration parameters 
wb_arb_params = &context->res_ctx.pipe_ctx[i].stream->writeback_info[j].mcif_arb_params;
 4 bit fraction, ms 
 assume 4 watermark sets have the same value 
 Validate DSC config, dsc count validation is already done 
 Only need to validate top pipe 
		 first check the prev dc state:
		  if this primary pipe has a bottom pipe in prev. state
		  and if the bottom pipe is still available (which it should be),
		  pick that pipe as secondary
		  Same logic applies for ODM pipes
		
		  if this primary pipe does not have a bottom pipe in prev. state
		  start backward and find a pipe that did not used to be a bottom pipe in
		  prev. dc state. This way we make sure we keep the same assignment as
		  last state and will not have to reprogram every pipe
		
		  We should never hit this assert unless assignments are shuffled around
		  if this happens we will prob. hit a vsync tdr
		
		  search backwards for the second pipe to keep pipe
		  assignment more consistent
 merge previously split odm pipes since mode support needs to make the decision 
 Clear plane_res and stream_res 
 merge previously mpc split pipes since mode support needs to make the decision 
 Clear plane_res and stream_res 
		
		  Workaround for avoiding pipe-split in cases where we'd split
		  planes that are too small, resulting in splits that aren't
		  valid for the scaler.
 TODO: fix dc bugs and remove this split threshold thing 
 WA: Mode timing with borders may not work well with pipe split, avoid for this corner case 
 Avoid split loop looks for lowest voltage level that allows most unsplit pipes possible 
 Impossible to not split this pipe 
 Split loop sets which pipe should be split based on dml outputs and dc flags 
420 format workaround
If need split for mpc but 2 way split already
 2 -> 4 MPC 
 2 -> 2 MPC 
 2 -> 1 MPC 
If need split for mpc but 4 way split already
 4 -> 2 MPC 
 4 -> 1 MPC 
 ODM -> MPC transition 
If need split for odm but 2 way split already
 2 -> 4 ODM 
 2 -> 2 ODM 
 NOT expected yet 
 exit ODM 
If need split for odm but 4 way split already
 NOT expected yet 
 4 -> 2 ODM 
 NOT expected yet 
 exit ODM 
 MPC -> ODM transition 
 NOT expected yet 
 Adjust dppclk when split is forced, do not bother with dispclk 
initialize pipe_just_split_from to invalid idx
 Skip 2nd half of already split pipe 
 We do not support mpo + odm at the moment 
 pipe not split previously needs split 
 merge should already have been done 
 Actual dsc count per stream dsc validation
 only pipe 0 is read for voltage and dcfsoc clocks 
	
	  Zstate is allowed in following scenarios:
	  	1. Single eDP with PSR enabled
	  	2. 0 planes (No memory requests)
	  	3. Single eDP without PSR but > 5ms stutter period
 Writeback MCIF_WB arbitration parameters 
save a original dppclock copy
  This must be noinline to ensure anything that deals with FP registers
  is contained within this call; previously our compiling with hard-float
  would result in fp instructions being emitted outside of the boundaries
  of the DC_FP_STARTEND macros, which makes sense as the compiler has no
  idea about what is wrapped and what is not
  This is largely just a workaround to avoid breakage introduced with 5.6,
  ideally all fp-using code should be moved into its own file, only that
  should be compiled with hard-float, and all code exported from there
  should be strictly wrapped with DC_FP_STARTEND
Unsafe due to current pipe merge and split logic
 Best case, we support full UCLK switch latency
 Fallback: Try to only support G6 temperature read latency
 ERROR: fallback is supposed to always work.
 First pass - cap all clocks higher than the reported max
 Second pass - remove all duplicate clock states
 Accounting for SOCDCF relationship, we can go as high as
 506Mhz in Vmin.
 FCLK:UCLK ratio is 1.08
 Duplicate the last state, DML always an extra state identical to max state to work
 NV14 
 NV12 and NV10 
			 SMU cannot set DCF clock to anything equal to or higher than SOC clock
	
	   Resource + asic cap harcoding                
1.4 wa not applied by default
 Color pipeline capabilities 
 no OGAM ROM on DCN2, only MPC ROM
dcn2.0x
 Init the vm_helper
	
	   Create resources                             
 todo: not reuse phy_pll registers 
 Notify PP LibSMU which Watermarks to use for which clock ranges 
 mem input -> ipp -> dpp -> opp -> TG 
 IF NV12, set PG function pointer to NULL. It's not that
 PG isn't supported for NV12, it's that we don't want to
 program the registers because that will cause more power
 to be consumed. We could have created dcn20_init_hw to get
 the same effect by checking ASIC rev, but there was a
 request at some point to not check ASIC rev on hw sequencer.
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 wbif programming guide:
  1. set up wbif parameter:
     unsigned long long   luma_address[4];       4 frame buffer
     unsigned long long   chroma_address[4];
     unsigned int	   luma_pitch;
     unsigned int	   chroma_pitch;
     unsigned int         warmup_pitch=0x10;     256B align, the page size is 4KB when it is 0x10
     unsigned int	   slice_lines;           slice size
     unsigned int         time_per_pixel;         time per pixel, in ns
     unsigned int         arbitration_slice;      0: 512 bytes 1: 1024 bytes 2: 2048 Bytes
     unsigned int         max_scaled_time;        used for QOS generation
     unsigned int         swlock=0x0;
     unsigned int         cli_watermark[4];      4 group urgent watermark
     unsigned int         pstate_watermark[4];   4 group pstate watermark
     unsigned int         sw_int_en;              Software interrupt enable, frame end and overflow
     unsigned int         sw_slice_int_en;        slice end interrupt enable
     unsigned int         sw_overrun_int_en;      overrun error interrupt enable
     unsigned int         vce_int_en;             VCE interrupt enable, frame end and overflow
     unsigned int         vce_slice_int_en;       VCE slice end interrupt enable, frame end and overflow
  2. configure wbif register
     a. call mmhubbub_config_wbif()
  3. Enable wbif
     call set_wbif_bufmgr_enable();
  4. wbif_dump_status(), option, for debug purpose
     the bufmgr status can show the progress of write back, can be used for debug purpose
 sw lock buffer0~buffer3, default is 0 
 buffer address for packing mode or Luma in planar mode 
 right eye sub-buffer address offset for packing mode or Luma in planar mode 
 buffer address for Chroma in planar mode (unused in packing mode) 
 right eye offset for packing mode or Luma in planar mode 
 buffer address for packing mode or Luma in planar mode 
 right eye sub-buffer address offset for packing mode or Luma in planar mode 
 buffer address for Chroma in planar mode (unused in packing mode) 
 right eye offset for packing mode or Luma in planar mode 
 buffer address for packing mode or Luma in planar mode 
 right eye sub-buffer address offset for packing mode or Luma in planar mode 
 buffer address for Chroma in planar mode (unused in packing mode) 
 right eye offset for packing mode or Luma in planar mode 
 buffer address for packing mode or Luma in planar mode 
 right eye sub-buffer address offset for packing mode or Luma in planar mode 
 buffer address for Chroma in planar mode (unused in packing mode) 
 right eye offset for packing mode or Luma in planar mode 
	 setup luma & chroma size
	  should be enough to contain a whole frame Luma data,
	  the programmed value is frame buffer size [27:8], 256-byte aligned
 enable address fence 
 setup pitch, the programmed value is [15:8], 256B align 
 Set pitch for MC cache warm up mode 
 Pitch is 256 bytes aligned. The default pitch is 4K 
 default is 0x10 
 Programmed by the video driver based on the CRTC timing (for DWB) 
 Programming dwb watermark 
 Watermark to generate urgent in MCIF_WB_CLI, value is determined by MCIF_WB_CLI_WATERMARK_MASK. 
 Program in ns. A formula will be provided in the pseudo code to calculate the value. 
 urgent_watermarkA 
 urgent_watermarkB 
 urgent_watermarkC 
 urgent_watermarkD 
 Programming nb pstate watermark 
 nbp_state_change_watermarkA 
 nbp_state_change_watermarkB 
 nbp_state_change_watermarkC 
 nbp_state_change_watermarkD 
 max_scaled_time 
 slice_lines 
 Set arbitration unit for LumaChroma 
 arb_unit=2 should be chosen for more efficiency 
 Arbitration size, 0: 512 bytes 1: 1024 bytes 2: 2048 Bytes 
 Set interrupt mask 
 Enable Mcifwb 
 disable buffer manager 
 set which group of pstate watermark to use and set wbif watermark change request 
static void mmhubbub2_wbif_watermark_change_req(struct mcif_wb mcif_wb, unsigned int wm_set)
{
	struct dcn20_mmhubbub mcif_wb20 = TO_DCN20_MMHUBBUB(mcif_wb);
	uint32_t change_req;
	REG_GET(SMU_WM_CONTROL, MCIF_WB0_WM_CHG_REQ, &change_req);
	change_req = (change_req == 0) ? 1 : 0;
	REG_UPDATE(SMU_WM_CONTROL, MCIF_WB0_WM_CHG_SEL, wm_set);
	REG_UPDATE(SMU_WM_CONTROL, MCIF_WB0_WM_CHG_REQ, change_req);
}
 Set watermark change interrupt disable bit 
static void mmhubbub2_set_wbif_watermark_change_int_disable(struct mcif_wb mcif_wb, unsigned int ack_int_dis)
{
	struct dcn20_mmhubbub mcif_wb20 = TO_DCN20_MMHUBBUB(mcif_wb);
	REG_UPDATE(SMU_WM_CONTROL, MCIF_WB0_WM_CHG_ACK_INT_DIS, ack_int_dis);
}
 Read watermark change interrupt status 
unsigned int mmhubbub2_get_wbif_watermark_change_int_status(struct mcif_wb mcif_wb)
{
	struct dcn20_mmhubbub mcif_wb20 = TO_DCN20_MMHUBBUB(mcif_wb);
	uint32_t irq_status;
	REG_GET(SMU_WM_CONTROL, MCIF_WB0_WM_CHG_ACK_INT_STATUS, &irq_status);
	return irq_status;
}
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 RBR
 HBR
HBR2
HBR3
 this function reads dsc related register fields to be logged later in dcn10_log_hw_state
  into a dcn_dsc_state struct.
 in usb c dp2 mode, max lane count is 2 
 if value == 1 alt mode is disabled, otherwise it is enabled 
	00 - DP_AUX_DPHY_RX_DETECTION_THRESHOLD__1to2 : 12
	01 - DP_AUX_DPHY_RX_DETECTION_THRESHOLD__3to4 : 34
	02 - DP_AUX_DPHY_RX_DETECTION_THRESHOLD__7to8 : 78
	03 - DP_AUX_DPHY_RX_DETECTION_THRESHOLD__15to16 : 1516
	04 - DP_AUX_DPHY_RX_DETECTION_THRESHOLD__31to32 : 3132
	05 - DP_AUX_DPHY_RX_DETECTION_THRESHOLD__63to64 : 6364
	06 - DP_AUX_DPHY_RX_DETECTION_THRESHOLD__127to128 : 127128
	07 - DP_AUX_DPHY_RX_DETECTION_THRESHOLD__255to256 : 255256
	AUX_REG_UPDATE_5(AUX_DPHY_RX_CONTROL0,
	AUX_RX_START_WINDOW = 1 [6:4]
	AUX_RX_RECEIVE_WINDOW = 1 default is 2 [10:8]
	AUX_RX_HALF_SYM_DETECT_LEN  = 1 [13:12] default is 1
	AUX_RX_TRANSITION_FILTER_EN = 1 [16] default is 1
	AUX_RX_ALLOW_BELOW_THRESHOLD_PHASE_DETECT [17] is 0  default is 0
	AUX_RX_ALLOW_BELOW_THRESHOLD_START [18] is 1  default is 1
	AUX_RX_ALLOW_BELOW_THRESHOLD_STOP [19] is 1  default is 1
	AUX_RX_PHASE_DETECT_LEN,  [21,20] = 0x3 default is 3
	AUX_RX_DETECTION_THRESHOLD [30:28] = 1
AUX_DPHY_TX_REF_CONTROL'AUX_TX_REF_DIV HW default is 0x32;
 Set AUX_TX_REF_DIV Divider to generate 2 MHz reference from refclk
 27MHz -> 0xd
 100MHz -> 0x32
 48MHz -> 0x18
 Set TMDS_CTL0 to 1.  This is a legacy setting.
	 set the flag to indicate whether driver poll the I2C data pin
	  while doing the DP sink detect
	if (dal_adapter_service_is_feature_supported(as,
		FEATURE_DP_SINK_DETECT_POLL_DATA_PIN))
		enc10->base.features.flags.bits.
	 For DCE 8.0 and 8.1, by design, UNIPHY is hardwired to DIG_BE.
	  SW always assign DIG_FE 1:1 mapped to DIG_FE for non-MST UNIPHY.
	  SW assign DIG_FE to non-MST UNIPHY first and MST last. So prefer
	  DIG is per UNIPHY and used by SST DP, eDP, HDMI, DVI and LVDS.
	  Prefer DIG assignment is decided by board design.
	  For DCE 8.0, there are only max 6 UNIPHYs, we assume board design
	  and VBIOS will filter out 7 UNIPHY for DCE 8.0.
	  By this, adding DIGG should not hurt DCE 8.0.
	  This will let DCE 8.1 share DCE 8.0 as much as possible
 default to one to mirror Windows behavior 
 Override features with DCE-specific values 
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
   andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
		 enable transmission of packet(s) -
 send packet(s) every frame 
 select line number to send packets on 
 DP_SEC_GSP[x]_LINE_REFERENCE - keep default value REFER_TO_DP_SOF 
 choose which generic packet control to use 
 invalid HW packet index 
 for bring up, disable dp double  TODO 
Always add mandatory packets first followed by optional ones
 stop generic packets 0,1 on HDMI 
 stop generic packets 2,3 on HDMI 
 stop generic packets 4,5 on HDMI 
 stop generic packets 6,7 on HDMI 
 Update GSP7 SDP 128 byte long 
	 TODOFPGA Figure out a proper number for max_retries polling for lock
	  use 50 for now.
 Configure for PPS packet size (128 bytes) 
 We need turn on clock before programming AFMT block
	 Poll dig_update_lock is not locked -> asic internal signal
	  assumes otg master lock will unlock it
REG_WAIT(AFMT_VBI_PACKET_CONTROL, AFMT_GENERIC_LOCK_STATUS, 0, 10, max_retries);
 Wait for HWSW GSP memory access conflict to go away 
 Clear HWSW memory access conflict flag 
 write generic packet header 
	 Write generic packet content 128 bytes long. Four sets are used (indexes 7
	  through 10) to fit 128 bytes.
 Set DSC-related configuration.
    dsc_mode: 0 disables DSC, other values enable DSC in specified format
    sc_bytes_per_pixel: Bytes per pixel in u3.28 format
    dsc_slice_width: Slice width in pixels
 Load PPS into infoframe (SDP) registers 
 Enable Generic Stream Packet 7 (GSP) transmission 
REG_UPDATE(DP_SEC_CNTL,
	DP_SEC_GSP7_ENABLE, 1);
		 SW should make sure VBID[6] update line number is bigger
		  than PPS transmit line number
		 Send PPS data at the line number specified above.
		  DP spec requires PPS to be sent only when it changes, however since
		  decoder has to be able to handle its change on every frame, we're
		  sending it always (i.e. on every frame) to reduce the chance it'd be
		  missed by decoder. If it turns out required to send PPS only when it
		  changes, we can use DP_SEC_GSP7_SEND register.
 Disable Generic Stream Packet 7 (GSP) transmission 
 this function read dsc related register fields to be logged later in dcn10_log_hw_state
  into a dcn_dsc_state struct.
if dsc is enabled, continue to read
 Set Dynamic Metadata-configuration.
    enable_dme:         TRUE: enables Dynamic Metadata Enfine, FALSE: disables DME
    hubp_requestor_id:  HUBP physical instance that is the source of dynamic metadata
                        only needs to be set when enable_dme is TRUE
    dmdata_mode:        dynamic metadata packet type: DP, HDMI, or Dolby Vision
    Ensure the OTG master update lock is set when changing DME configuration.
		 Use default line reference DP_SOF for bringup.
		  Should use OTG_SOF for DRR cases
 check if dynamic metadata packet transmission is enabled 
 YCbCr 4:2:0 : Computed VID_M will be 2X the input rate 
this logic should be the same in get_pixel_clock_parameters() 
		 M  N = Fstream  Flink
		  m_vid  n_vid = pixel rate  link rate
 enable auto measurement 
		 auto measurement need 1 full 0x8000 symbol cycle to kick in,
		  therefore program initial value for Mvid and Nvid
 make sure stream is disabled before resetting steer fifo 
 set DIG_START to 0x1 to reset FIFO 
 write 0 to take the FIFO out of reset 
	 switch DP encoder to CRTC data, but reset it the fifo first. It may happen
	  that it overflows during mode transition, and sometimes doesn't recover.
	 wait 100us for DIGDP logic to prime
	  (i.e. a few video lines)
	 the hardware would start sending video at the start of the next DP
	  frame (i.e. rising edge of the vblank).
	  NOTE: We used to program DP_VID_STREAM_DIS_DEFER = 2 here, but this
	  register has no effect on enable transition! HW always guarantees
	  VID_STREAM enable at start of next frame, and this is not
	  programmable
  Copyright 2020 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 ?
 ?
 ?
 writeback_line_buffer_buffer_size = 656640
 SRExitTime
 TODO: set this to actual min DCFCLK 
 ?
 ?
 ?
upto 8K
 -1 = disable,
 -1 = disable
 6:1 downscaling ratio: 10006 = 166.666 
 NBIO 
 DCN 
 Mapping of VPG, AFMT, DME register blocks to DIO block instance 
 If max DCFCLK is greater than the max DCFCLK STA target, insert into the DCFCLK STA target array 
 If max DCFCLK is less than the max DCFCLK STA target, cap values and remove duplicates 
 Update size of array since we "removed" duplicates 
 Calculate optimal dcfclk for each uclk 
 Calculate optimal uclk for each dcfclk sta target 
 create the final dcfclk and uclk table 
 Fill all states with max values of all other clocks 
 Populate from bw_params for DTBCLK, SOCCLK 
 These clocks cannot come from bw_params, always fill from dcn3_02_soc[1] 
 FCLK, PHYCLK_D18, DSCCLK 
 re-init DML with updated bb 
	
	   Resource + asic cap harcoding                
1.4 wa applied by derfault
 total size = mall per channel  num channels  1024  1024 
 Color pipeline capabilities 
 must use gamma_corr
 no OGAM ROM on DCN3
3
 Init the vm_helper
	
	   Create resources                             
 Clock Sources for Pixel Clock
 todo: not reuse phy_pll registers 
 DCCG 
 PP Lib and SMU interfaces 
 DML 
 IRQ 
 HUBBUB 
 HUBPs, DPPs, OPPs and TGs 
 PSR 
 ABMs 
 MPC and DSC 
 DWB and MMHUBBUB 
 AUX and I2C 
 Audio, Stream Encoders including HPO and virtual, MPC 3D LUTs 
 HW Sequencer and Plane caps 
  Copyright 2020 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  Copyright 2020 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 DPP0 
 DPP1 
 DPP2 
 DPP3 
 DPP4 
 DCHUBP0 
 DCHUBP1 
 DCHUBP2 
 DCHUBP3 
 DCHUBP4 
 DSC0 
 DSC1 
 DSC2 
 DSC3 
 DSC4 
 Copyright 2018 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 Copyright 2016 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 begin 
 DCN 
 NBIO 
 MMHUB 
	
	   Resource + asic cap harcoding                
1.5 wa applied by default
 Color pipeline capabilities 
 no OGAM ROM on DCN2
a0 only, remove later
	
	   Create resources                             
 todo: not reuse phy_pll registers 
 mem input -> ipp -> dpp -> opp -> TG 
  Copyright 2012-17 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  Copyright 2016 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
TEMP: Need to figure out inheritance model here.
	 Check maximum number of pixels supported by Timing Generator
	  (Currently will never fail, in order to fail needs display which
	  needs more than 8192 horizontal and
	  more than 8192 vertical total pixels)
 used by enable_timing_synchronization. Not need for FPGA 
 used by enable_timing_synchronization. Not need for FPGA 
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
limit to combo_phy
 if value == 1 alt mode is disabled, otherwise it is enabled
	 set the flag to indicate whether driver poll the I2C data pin
	  while doing the DP sink detect
	 if (dal_adapter_service_is_feature_supported(as,
	  FEATURE_DP_SINK_DETECT_POLL_DATA_PIN))
	  enc10->base.features.flags.bits.
	  DP_SINK_DETECT_POLL_DATA_PIN = true;
	 For DCE 8.0 and 8.1, by design, UNIPHY is hardwired to DIG_BE.
	  SW always assign DIG_FE 1:1 mapped to DIG_FE for non-MST UNIPHY.
	  SW assign DIG_FE to non-MST UNIPHY first and MST last. So prefer
	  DIG is per UNIPHY and used by SST DP, eDP, HDMI, DVI and LVDS.
	  Prefer DIG assignment is decided by board design.
	  For DCE 8.0, there are only max 6 UNIPHYs, we assume board design
	  and VBIOS will filter out 7 UNIPHY for DCE 8.0.
	  By this, adding DIGG should not hurt DCE 8.0.
	  This will let DCE 8.1 share DCE 8.0 as much as possible
 default to one to mirror Windows behavior 
 Override features with DCE-specific values 
  Copyright 2016 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 Constructor, Destructor               
  Copyright 2018 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 vbios handles it 
  Copyright 2016 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 Blank pixel data during initialization 
 program opp dpg blank color 
 get the OTG active size 
 get the OPTC source 
 MC_VM_FB_LOCATION_TOP is in pages, actual top should add 1 
 bit 23:0 in register map to bit 47:24 in address 
			 Power up AND update implementation according to the
			  required signal (which may be different from the
			  default signal on connector).
 Blank pixel data with OPP DPG 
 Reset all MPCC muxes 
 initialize OPP mpc_tree parameter 
To do: number of MPCC != number of opp
 initialize DWB pointer to MCIF_WB 
 end of FPGA. Below if real ASIC 
 power AFMT HDMI memory TODO: may move to disen output save power
 enable all DCN clock gating 
 trigger HW to start disconnect plane from stream on the next vsync 
 check if this plane is being used by an MPCC in the secondary blending chain 
 remove MPCC from secondary if being used 
 check if this MPCC is already being used for this plane (dpp) in the primary blending chain 
Already reset
the input to MPCC is RGB
	 DCN1.0 has output CM before MPC which seems to screw with
	  pre-multiplied alpha. This is a wa hopefully unnecessary for DCN2.
	
	  TODO: remove hack
	  Note: currently there is a bug in init_hw such that
	  on resume from hibernate, BIOS sets up MPCC0, and
	  we do mpcc_remove but the mpcc cannot go to idle
	  after remove. This cause us to pick mpcc1 here,
	  which causes a pstate hang for yet unknown reason.
 If there is no full update, don't need to touch MPC tree
 check if this plane is being used by an MPCC in the secondary blending chain 
 remove MPCC from secondary if being used 
 check if this MPCC is already being used for this plane (dpp) in the primary blending chain 
 remove MPCC if being used 
 Call MPC to insert new plane 
	 use TG master update lock to lock everything on the TG
	  therefore only top pipe need to lock
 always repeat 
 only 3 items below are used by unblank 
check whether it is half the rate
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  Copyright 2020 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  DOC: DC STAT Interface
  These interfaces are called without acquiring DAL and DC locks.
  Hence, there is limitations on whese interfaces can access. Only
  variables exclusively defined for these interfaces can be modified.
   Function: dc_stat_get_dmub_notification
   @brief
 		Calls dmub layer to retrieve dmub notification
   @param
 		[in] dc: dc structure
 		[in] notify: dmub notification structure
   @return
      None
	
	  This function is called without dal and dc locks, so
	  we shall not modify any dc, dc_dmub_srv or dmub variables
	  except variables exclusively accessed by this function
 For HPDHPD RX, convert dpia port index into link index 
   Function: dc_stat_get_dmub_dataout
   @brief
 		Calls dmub layer to retrieve dmub gpint dataout
   @param
 		[in] dc: dc structure
 		[in] dataout: dmub gpint dataout
   @return
      None
  Copyright 2015 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 DC interface (public) 
 DC core (private) 
  Private functions
  Public functions
register_flip_interrupt(surface);
   Function: dc_plane_get_status
   @brief
      Looks up the pipe context of plane_state and updates the pending status
      of the pipe context. Then returns plane_state->status
   @param [in] plane_state: pointer to the plane_state to get the status of
 remove this if above assert never hit 
 Find the current plane state and set its pending bit to false 
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 DP to Dual link DVI converter 
 CV smart dongle slave address for retrieving supported HDTV modes
 DVI-HDMI dongle slave address for retrieving dongle signature
 "AMD" 
 "6140063500G"
 DP-HDMI dongle slave address for retrieving dongle signature
 "DP-HDMI ADAPTOR"
 end of transmition '\x4' 
 SCDC Address defines (HDMI 2.0)
sink has a delay different from an Active Converter
 Assume we have no valid DP passive dongle connected 
 Read DP-HDMI dongle I2c (no response interpreted as DP-DVI dongle)
 Passive HDMI dongles can sometimes fail here without retrying
 Check if Type 2 dongle.
 Check EOT 
 Check signature 
		 If its not the right signature,
 Multiply by 1000 to convert to kHz. 
	TODO: len of payload data for i2c and aux is uint8!!!!,
			 should not set mot (middle of transaction) to 0
			  if there are pending read payloads
			 should set mot (middle of transaction) to 0
			  since it is the last payload to send
 set mot (middle of transaction) to false if it is the last payload 
 dc_link_aux_transfer_raw() - Attempt to transfer
  the given aux payload.  This function does not perform
  retries or handle error states.  The reply is returned
  in the payload->reply and the result through
  operation_result.  Returns the number of bytes transferred,
  or -1 on a failure.
 dc_link_aux_transfer_with_retries() - Attempt to submit an
  aux payload, retrying on timeouts, defers, and busy states
  as outlined in the DP spec.  Returns true if the request
  was successful.
  Unless you want to implement your own retry semantics, this
  is probably the one you want.
 Do not try to access nonexistent DDC pin. 
test only function
Lower than 340 Scramble bit from SCDC caps
Source Version = 1
Read Request from SCDC caps
  Copyright 2018 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 Call HWSS to setup HUBBUB for address config 
		 Pre-init system aperture startend for all HUBP instances (if not gating?)
		  or cache system aperture if using power gating
  Copyright 2015 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 used as index in array of black_color_format 
 BlackColorFormat_RGB_FullRange 
 BlackColorFormat_RGB_Limited 
 BlackColorFormat_YUV_TV 
 BlackColorFormat_YUV_CV 
 BlackColorFormat_YUV_SuperAA 
 visual confirm debug 
 TODO: correct values below 
	
	  Remove default and add case for all color space
	  so when we forget to add new color space
	  compiler will give a warning
 fefault is sRGB black (full range). 
 default is sRGB black 0. 
 Not applicable if the pipe is not primary, save 300ms of boot time 
 red 
 orange 
 yellow 
 green 
 blue 
 purple 
 set border color to red 
 set border color to pink 
 set border color to blue 
 set border color to cyan 
 set border color to green 
 set border color to yellow 
 set border color to white 
 set border color to orange 
 Determine the overscan color based on the top-most (desktop) plane's context 
 HDR10, ARGB2101010 - set border color to red 
 FreeSync 2 ARGB2101010 - set border color to pink 
 HDR10, FP16 - set border color to blue 
 FreeSync 2 HDR - set border color to green 
 SDR - set border color to Gray 
 Determine the overscan color based on the bottom-most plane's context 
 LINEAR Surface - set border color to red 
 Copyright 2015 Advanced Micro Devices, Inc. 
 1 lttpr repeater
 2 lttpr repeaters
 3 lttpr repeaters
 4 lttpr repeaters
 5 lttpr repeaters
 6 lttpr repeaters
 7 lttpr repeaters
 8 lttpr repeaters
 invalid value
 Link should always be assigned encoder when en-disabling. 
	 If the current pixel clock source is not DTO(happens after
	  switching from HDMI passive dongle to DP on the same connector),
	  switch the pixel clock source to DTO.
 TODO - DP2.0 HW: notify link rate change here 
 start from eDP version 1.2, SINK_STAUS indicate the sink is ready.
MAx T9
 use absolute time stamp to constrain max T7
 start from eDP version 1.2, SINK_STAUS indicate the sink is ready.
MAx T7 is 50ms
 Link should always be assigned encoder when en-disabling. 
 Clear current link setting.
 MST disable link only when no stream use the link 
 set the sink to SST mode after disabling the link 
 call Encoder to set lane settings 
	 Access link encoder based on whether it is statically
	  or dynamically assigned to a link.
 disable any test pattern that might be active 
 Clear current link setting. 
				 notify audio driver for
 un-mute audio 
				 TODO: audio should be per stream rather than
	 7 fractional digits decimal precision for bytes per pixel is enough because DSC
	  bits per pixel precision is 116th of a pixel, which means bytes per pixel precision is
	  1168 = 1128 of a byte, or 0.0078125 decimal
 The stream with these settings can be sent (unblanked) only after DSC was enabled on RX first,
  i.e. after dp_enable_dsc_on_rx() had been called
 Enable DSC hw block 
 Enable DSC in encoder 
 PPS SDP is set elsewhere because it has to be done after DIG FE is connected to DIG BE 
 Enable DSC in OPTC 
 disable DSC in OPTC 
 disable DSC in stream encoder 
 disable DSC block 
  For dynamic bpp change case, dsc is programmed with MASTER_UPDATE_LOCK enabled;
  hence PPS info packet update need to use frame update instead of immediate update.
  Added parameter immediate_update for this purpose.
  The decision to use frame update is hard-coded in function dp_update_dsc_config(),
  which is the only place where a "false" would be passed in for param immediate_update.
  immediate_update is only applicable when DSC is enabled.
 Enable DSC hw block 
 disable DSC PPS in stream encoder 
	 Enable PHY PLL at target bit rate
	    UHBR10 = 10Gbps (SYMCLK32 = 312.5MHz)
	    UBR13.5 = 13.5Gbps (SYMCLK32 = 421.875MHz)
	    UHBR20 = 20Gbps (SYMCLK32 = 625MHz)
 DP2.0 HW: call transmitter control to enable PHY 
 DCCG muxing and DTBCLK DTO 
 DP2.0 HW: call transmitter control to disable PHY 
  Copyright 2017 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  dc_debug.c
   Created on: Nov 3, 2016
       Author: yonsun
		 get_position() returns CRTC verticalhorizontal counter
		  hence not applicable for underlay pipe
  dc_status_to_str - convert dc_status to a human readable string
  @status: dc_status to be converted
  Return:
  A string describing the DC status.
 Copyright 2021 Advanced Micro Devices, Inc. All rights reserved.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 Check whether stream is supported by DIG link encoders. 
 Loop over created link encoder objects. 
			 Need to check link signal type rather than stream signal type which may not
			  yet match.
 DIGs do not support DP2.0 streams with 128b132b encoding. 
 LINK_ENC_CFG_STEADY 
 Return stream using DIG link encoder resource. NULL if unused. 
		 stream ptr of stream in dc_state used to update correct entry in
		  link_enc_assignments table.
				 Only add link encoder back to availability pool if not being
				  used by any other stream (i.e. removing SST stream or last MST stream).
		 stream ptr of stream in dc_state used to update correct entry in
		  link_enc_assignments table.
 Attempted to add an encoder assignment for a stream not in dc_state. 
 Return first available DIG link encoder. 
 Check for availability of link encoder eng_id. 
 An encoder is available if it is still in the availability pool. 
		 MST streams share the same link and should share the same encoder.
		  If a stream that has already been assigned a link encoder uses as the
		  same link as the stream checking for availability, it is an MST stream
		  and should use the same link encoder.
 Test for display_endpoint_id equality. 
 Clear all link encoder assignments. 
 Release DIG link encoder resources before running assignment algorithm. 
 (a) Assign DIG link encoders to physical (unmappable) endpoints first. 
 Skip stream if not supported by DIG link encoder. 
 Physical endpoints have a fixed mapping to DIG link encoders. 
 (b) Retain previous assignments for mappable endpoints if encoders still available. 
 Skip stream if not supported by DIG link encoder. 
 (c) Then assign encoders to remaining mappable endpoints. 
 Skip stream if not supported by DIG link encoder. 
 Mappable endpoints have a flexible mapping to DIG link encoders. 
 Skip if encoder assignment retained in step (b) above. 
			 For MST, multiple streams will share the same link  display
			  endpoint. These streams should use the same link encoder
			  assigned to that endpoint.
 Update transient assignments. 
 Current state mode will be set to steady once this state committed. 
 Only DIG link encoders. 
 dm_output_to_console("%s: No link using DIG(%d).\n", __func__, eng_id);
 Add assigned encoders to list. 
 An encoder is not available if it has already been assigned to a different endpoint. 
 (1) No. valid entries same as stream count. 
 (2) Matching stream ptrs. 
 (3) Each endpoint assigned unique encoder. 
 (4) Assigned encoders not in available pool. 
 (5) All streams have valid link encoders. 
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  Private functions
 increment dc_sink_id_count because we don't want two sinks with same ID
 unless they are actually the same
  Public functions
  Protected functions - visible only inside of DC (not visible in DM)
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  Private functions
		 Update link encoder resource tracking variables. These are used for
		  the dynamic assignment of link encoders to streams. Virtual links
		  are not assigned encoder resources on creation.
   Function: program_hpd_filter
   @brief
      Programs HPD filter on associated HPD line
   @param [in] delay_on_connect_in_ms: Connect filter timeout
   @param [in] delay_on_disconnect_in_ms: Disconnect filter timeout
   @return
      true on success, false otherwise
 Verify feature is supported 
 Program hpd filter 
 Program hpd filter to allow DP signal to settle 
		 500:	not able to detect MST <-> SST switch as HPD is low for
		  only 100ms on DELL U2413
		  0: some passive dongle still show aux mode instead of i2c
		  20-50: not enough to hide bouncing HPD with passive dongle.
		  also see intermittent i2c read issues.
 Don't program hpd filter 
 Obtain HPD handle 
 Setup HPD filtering 
 Release HPD handle 
  dc_link_detect_sink() - Determine if there is a sink connected
  @link: pointer to the dc link
  @type: Returned connection type
  Does not detect downstream devices, such as MST sinks
  or display connected through active dongles
in case it is not on
 Link may not have physical HPD pin. 
 todo: may need to lock gpio access 
 TODO: need to do the actual detection 
		 MST does not use I2COverAux, but there is the
		  SPECIAL use case for "immediate dwnstrm device
		  access" (EPR#370830).
  dc_link_is_dp_sink_present() - Check if there is a native DP
  or passive DP-HDMI dongle connected
 Open GPIO and set it to I2C mode 
	 Note: this GpioMode_Input will be converted
	  to GpioConfigType_I2cAuxDualMode in GPIO component,
	  which indicates we need additional delay
	
	  Read GPIO: DP sink is present if both clock and data pins are zero
	 
	  [WA] plug-unplug DP cable, sometimes customer board has
	  one short pulse on clk_pin(1V, < 1ms). DP will be config to HDMIDVI
	  then monitor can't br light up. Add retry 3 times
	  But in real passive dongle, it need additional 3ms to detect
  @brief
  Detect output sink type
 Use basic signal type for link without physical connector. 
	 Internal digital encoder will detect only dongles
	  that require digital signal
	 Detection mechanism is different
	  for different native connectors.
	  LVDS connector supports only LVDS signal;
	  PCIE is a bus slot, the actual connector needs to be detected first;
	  eDP connector supports only eDP signal;
	  HDMI should check straps for audio
 PCIE detects the actual connector on add-on board 
 ZAZTODO implement PCIE add-on card detection 
		 check audio support:
		  if native HDMI is not supported, switch to DVI
		 DP HPD short pulse. Passive DP dongle will not
		  have short pulse
			 Check whether DP signal detected: if not -
			  we assume signal is DVI; it could be corrected
			  to HDMI after dongle detection
link->dpcd_caps.dpcd_rev.raw = 0;
	 HDMI doesn't tell us its HDCP(1.4) capability, so assume to always be capable,
	  we can poll for bksv but some displays have an issue with this. Since its so rare
	  for a display to not be 1.4 capable, this assumtion is ok
 Read DPCD 00101h to find out the number of lanes currently set
		 First DPCD read after VDD ON can fail if the particular board
		  does not have HPD pin wired correctly. So if DPCD read fails,
		  which it should never happen, retry a few times. Target worst
		  case scenario of 80 ms.
 Read DPCD 00100h to find if standard link rates are set
			 If standard link rates are not being used,
			  Read DPCD 00115h to find the edp link rate set used
 edp_supported_link_rates_count = 0 for DP
 Link Rate not found. Seamless boot may not work.
 Read DPCD 00003h to find the max down spread.
			 In case of fallback to SST when topology discovery below fails
			  HDCP caps will be querried again later by the upper layer (caller
 DP SST branch 
 DP passive dongles 
	
	  something is terribly wrong if time out is > 200ms. (5Hz)
	  500 microseconds  400 tries us 200 ms
 ask the link if alt mode is enabled, if so return ok 
  dc_link_detect() - Detect if a sink is attached to a given link
  link->local_sink is created or destroyed as needed.
  This does not create remote sinks but will trigger DM
  to start MST detection if a branch is detected.
 30ms
 need to re-write OUI and brightness in resume case
TODO: use cached
 From Disconnected-to-Connected. 
 wa HPD high coming too early
 if alt mode times out, return false 
				 Need to setup mst link_cap struct here
				  otherwise dc_link_detect() will leave mst link_cap
				  empty which leads to allocate_mst_payload() has "0"
				  pbn_per_slot value leading to exception on dc_fixpt_div()
				
				  This call will initiate MST topology discovery. Which
				  will detect MST ports and add new DRM connector DRM
				  framework. Then read EDID via remote i2c over aux. In
				  the end, will notify DRM detect result and save EDID
				  into DRM framework.
				 
				  .detect is called by .fill_modes.
				  .fill_modes is called by user mode ioctl
				  DRM_IOCTL_MODE_GETCONNECTOR.
				 
				  .get_modes is called by .fill_modes.
				 
				  call .get_modes, AMDGPU DM implementation will create
				  new dc_sink and add to dc_link. For long HPD plug
				  inout, MST has its own handle.
				 
				  Therefore, just after dc_create, link->sink is not
				  created for MST until user mode app calls
				  DRM_IOCTL_MODE_GETCONNECTOR.
				 
				  Need check ->sink usages in case ->sink = NULL
				  TODO: s3 resume check
 Active SST downstream branch device unplug
 Downstream unplug 
 disable audio for non DP to HDMI active sst converter 
 link switch from MST to non-MST stop topology manager
 For seamless boot, to skip verify link cap, we read UEFI settings and set them as verified.
 switch() 
 dc_sink_create returns a new reference 
			
			  Abort detection for non-DP connectors if we have
			  no EDID
			 
			  DP needs to report as connected if HDP is high
			  even if we have no EDID in order to go to
			  fail-safe mode
 Check if edid is the same
			
			  TODO debug why Dell 2413 doesn't like
			   two link trainings
 verify link cap for SST non-seamless boot
 If edid is the same, then discard new sink and revert back to original sink
 HDMI-DVI Dongle 
 Connectivity log: detection 
 From Connected-to-Disconnected. 
		 When we unplug a passive DP-HDMI dongle connection, dongle_max_pix_clk
		   is not cleared. If we emulate a DP signal on this connection, it thinks
		   the dongle is still there and limits the number of modes we can emulate.
		   Clear dongle_max_pix_clk on disconnect to fix this
 get out of low power state 
 Go back to power optimized state 
 TODO: #DAL3 Implement id to str function.
	 Update link encoder tracking variables. These are used for the dynamic
	  assignment of link encoders to streams.
		 Look for device tag that matches connector signal,
		  CRT for rgb, LCD for other supported signal tyes
 Look for channel mapping corresponding to connector and device tag 
	
	  TODO check if GPIO programmed correctly
	 
	  If GPIO isn't programmed correctly HPD might not rise or drain
	  fast enough, leading to bounces.
 Initialized irq source for hpd and hpd rx 
 Dummy Init for linkid 
 TODO: Initialize link : funcs->link_init 
 Set indicator for dpia link so that ddc won't be created 
 Set dpia port index : 0 to number of dpia ports 
 TODO: Create link encoder 
 Some docks seem to NAK I2C writes to segment pointer with mot=0. 
 Handle dpia case 
  Public functions
	
	  Must use preferred_link_setting, not reported_link_cap or verified_link_cap,
	  since struct preferred_link_setting won't be reset after S3.
 in ms
 30ms
 Reduce link bandwidth between failed link training attempts. 
 check for seamless boot
 get link settings for video mode timing 
	 Train with fallback when enabling DPIA link. Conventional links are
	  trained with fallback during sink detection.
	
	  Temporary wa to get DP2.0 link rates to work with SST.
	  TODO DP2.0 - Workaround: Remove wa if and when the issue is resolved.
in case it is not on
 TODO - DP2.0 HW: calculate 32 symbol clock for HPO encoder 
 during mode switch we do DP_SET_POWER off then on, and OUI is lost
 during mode set we do DP_SET_POWER off then on, aux writes are lost
 TODO: use cached if known
	 sink signal type after MST branch is MST. Multiple MST sinks
	  share one link. Link DP PHY is enable or training only once.
 clear payload table 
	 to make sure the pending down rep can be processed
	  before enabling the link
 set the sink to MST mode before enabling the link 
	
	  Get retimer settings from sbios for passing SI eye test for DCE11
	  The setting values are varied based on board revision and port id
	  Therefore the setting values of each ports is passed by sbios.
 Check if current bios contains ext Hdmi settings
 Validate settings from bios integrated info table
 Start Ext-Hdmi programming
 Apply 3G settings 
			 Based on DP159 specs, APPLY_RX_TX_CHANGE bit in 0x0A
			  needs to be set to 1 on every 0xA-0xC write.
 Query current value from offset 0xA 
 Set APPLY_RX_TX_CHANGE bit to 1 
 Apply 3G settings 
 Apply 3G settings 
				 Based on DP159 specs, APPLY_RX_TX_CHANGE bit in 0x0A
				  needs to be set to 1 on every 0xA-0xC write.
 Query current value from offset 0xA 
 Set APPLY_RX_TX_CHANGE bit to 1 
 Program additional settings if using 640x480 resolution 
 Write offset 0xFF to 0x01 
 Write offset 0x00 to 0x23 
 Write offset 0xff to 0x00 
 Program Slave Address for tuning single integrity 
 Write offset 0x0A to 0x13 
 Write offset 0x0A to 0x17 
 Write offset 0x0B to 0xDA or 0xD8 
 Write offset 0x0A to 0x17 
 Write offset 0x0C to 0x1D or 0x91 
 Write offset 0x0A to 0x17 
 Program additional settings if using 640x480 resolution 
 Write offset 0xFF to 0x01 
 Write offset 0x00 to 0x23 
 Write offset 0xff to 0x00 
 Program Slave Address for tuning single integrity
	
	  TODO: implement call for dp_set_hw_test_pattern
	  it is needed for compliance testing
	 Here we need to specify that encoder output settings
	  need to be calculated as for the set mode,
	  it will lead to querying dynamic link capabilities
	  which should be done before enable output
 SST DP, eDP 
 MST disable link only when no stream use the link 
 DP159, Retimer settings 
 PI3EQX1204, Redriver settings 
enable_link
	 There's some scenarios where driver is unloaded with display
	  still enabled. When driver is reloaded, it may cause a display
	  to not light up if there is a mismatch between old and new
	  link settings. Need to call disable first before enabling at
	  new link settings.
 Check Pixel Encoding 
 Invalid Pixel Encoding
888 and 666 should always be supported
 These color depths are currently not supported 
	 A hack to avoid failing any modes for EDID override feature on
	  topology change such as lower quality cable for DP or different dongle
 Passive Dongle 
 Active Dongle
			 Disable brightness ramping when the display is blanked
			  as it can hang the DMCU
 Set power optimization flag 
 Enable or Disable PSR 
 updateSinkPsrDpcdConfig
 Check for PSR v2
		 For PSR v2 selective update.
		  Indicates whether sink should start capturing
		  immediately following active scan line,
		  or starting with the 2nd active scan line.
		For PSR v2, determines whether Sink should generate
		  IRQ_HPD when CRC mismatch is detected.
			 dmcu -1 for all controller id values,
			  therefore +1 here
 Hardcoded for now.  Can be Pcie or Uniphy (or Unknown)
PhyId is associated with the transmitter id
 only = 1 in KV 
 2 frames before enter PSR. 
	 half a frame
	  (units in 100 lines, i.e. a value of 1 represents 100 lines)
skip power down the single pipe since it blocks the cstate
	 SMU will perform additional powerdown sequence.
	  For unsupported ASICs, set psr_level flag to skip PSR
	   static screen notification to SMU.
	   (Always set for DAL2, did not check ASIC)
	 Complete PSR entry before aborting to prevent intermittent
	  freezes on certain eDPs
	 Controls additional delay after remote frame capture before
	  continuing power down, default = 0
	 psr_enabled == 0 indicates setup_psr did not succeed, but this
	  should not happen since firmware should be running at this point
 PSR residency measurements only supported on DMCUB 
 Kbits to MBytes 
	
	  margin 5300ppm + 300ppm ~ 0.6% as per spec, factor is 1.006
	  The unit of 5464Mbytessec is an arbitrary unit chosen based on
	  common multiplier to render an integer PBN for all link ratelane
	  counts combinations
	  calculate
	  peak_kbps = (10061000)
	  peak_kbps = (6454)
	  peak_kbps = 8    convert to bytes
 TODO: Rename stream_enc to dio_stream_enc?
 if DRM proposed_table has more than one new payload 
 copy proposed_table to link, add stream encoder 
 exit j loop 
 new vcp_id 
 update link->mst_stream_alloc_table with work_table 
 Add 0.5(1VCP_Y_PRECISION) to round up to decimal precision
  Payload allocationdeallocation for SST introduced in DP2.0
 slot X.Y for SST payload deallocate 
 calculate VC payload and update branch with new payload allocation table
TODO - DP2.0 Logging: Instead of hpo_dp_stream_enc pointer, log instance id
 program DP source TX for payload 
 poll for ACT handled 
 Failures will result in blackscreen and errors logged
 slot X.Y for SST payload allocate 
	 Always return DC_OK.
	  If part of sequence fails, log failure(s) and show blackscreen
 convert link_mst_stream_alloc_table to dm dp_mst_stream_alloc_table
  because stream_encoder is not exposed to dm
 Link encoder may have been dynamically assigned to non-physical display endpoint. 
	 enable_link_dp_mst already check link->enabled_stream_count
	  and stream is in link->stream[]. This is called during set mode,
	  stream_enc is available.
 get calculate VC payload for stream: stream_alloc 
 program DP source TX for payload 
 send down message 
 slot X.Y for only current stream 
 decrease throttled vcp size 
 send ALLOCATE_PAYLOAD sideband message with updated pbn 
 notify immediate branch device table update 
 update mst stream allocation table software state 
 update mst stream allocation table hardware state 
 poll for immediate branch device ACT handled 
 notify immediate branch device table update 
 update mst stream allocation table software state 
 update mst stream allocation table hardware state 
 poll for immediate branch device ACT handled 
 send ALLOCATE_PAYLOAD sideband message with updated pbn 
 increase throttled vcp size 
 Link encoder may have been dynamically assigned to non-physical display endpoint. 
	 deallocate_mst_payload is called before disable link. When mode or
	  disableenable monitor, new stream is created which is not in link
	  stream[] yet. For this, payload is not allocated yet, so de-alloc
	  should not done. For new mode set, map_resources will get engine
	  for new stream, so stream_enc->id should be validated until here.
 slot X.Y 
 TODO: which component is responsible for remove payload table? 
stream_enc_inst
 Initialize PHY ID with ABCDE - 01234 mapping except when it is B0
look up the link_enc_assignment for the current pipe_ctx
 Add flag to guard new A0 DIG mapping
 Add flag to guard B0 implementation
 enum ID 1-4 maps to DPIA PHY ID 0-3
 for non DPIA mode over B0, ABCDE maps to 01564
 Clear phy_idx for non-physical display endpoints. 
  Enable clock, Configure lane count, and Enable Link Encoder
	 Workaround for FPGA HPO capture DP link data:
	  HPO capture will set link to active mode
	  This workaround is required to get a capture from start of frame
 Set link active 
 Enable DP_STREAM_ENC 
 Set DPS PPS SDP (AKA "info frames") 
 Allocate Payload 
 MST case
 NOTE: This makes assumption that pipe_ctx index is same as stream index 
 SST case
 Enable VPG before building infoframe
 Do not touch link on seamless boot optimization. 
 Still enable stream features & audio on seamless boot for DP external displays 
 eDP lit up by bios already, no need to enable again. 
		 Have to setup DSC before DIG FE and BE are connected (which happens before the
		  link training). This is to make sure the bandwidth sent to DIG BE won't be
		  bigger than what the link andor DIG BE can handle. VBID[6]CompressedStream_flag
		  will be automatically set at a later time when the video is enabled
		  (DP_VID_STREAM_EN = 1).
			 Abort stream enable unless the failure was due to
			  DP link training - some DP monitors will recover and
			  show the stream anyway. But MST displays can't proceed
			  without link training.
 turn off otg test pattern if enable 
		 This second call is needed to reconfigure the DIG
		  as a workaround for the incorrect value being applied
		  from transmitter control.
 Set DPS PPS SDP (AKA "info frames") 
 if (IS_FPGA_MAXIMUS_DC(dc->ctx->dce_environment))
Need to inform that sink is going to use legacy HDMI mode.
vbios only handles 165Mhz.
 DP159, Retimer settings 
 PI3EQX1204, Redriver settings 
		 In DP1.x SST mode, our encoder will go to TPS1
		  when link is on but stream is off.
		  Disabling link before stream will avoid exposing TPS1 pattern
		  during the disable sequence as it will confuse some receivers
		  state machine.
		  In DP2 or MST mode, our encoder will stay video active
   dc_link_enable_hpd_filter:
      If enable is true, programs HPD filter on associated HPD line using
      delay_on_disconnectdelay_on_connect values dependent on
      link->connector_signal
      If enable is false, programs HPD filter on associated HPD line with no
      delays on connect or disconnect
   @link:   pointer to the dc link
   @enable: boolean specifying whether to enable hbd
 Obtain HPD handle 
 Setup HPD filtering 
 Release HPD handle 
	 Retrain with preferred link settings only relevant for
	  DP signal type
	  Check for non-DP signal or if passive dongle present
 Stream not found 
 Cannot retrain link if backend is off 
 Retrain now, or wait until next stream update to apply 
		 For 8b10b encoding:
		  link rate is defined in the unit of LINK_RATE_REF_FREQ_IN_KHZ per DP byte per lane.
		  data bandwidth efficiency is 80% with additional 3% overhead if FEC is supported.
		 For 128b132b encoding:
		  link rate is defined in the unit of 10mbps per lane.
		  total data bandwidth efficiency is always 96.71%.
 overall effective link bandwidth = link rate per lane  lane count  total data bandwidth efficiency 
 bytes per sec 
 8 bits per byte
		 Account for FEC overhead.
		  We have to do it based on caps,
		  and not based on FEC being set ready,
		  because FEC is set ready too late in
		  the process to correctly be picked up
		  by mode enumeration.
		 
		  There's enough zeros at the end of 'kbps'
		  that make the below operation 100% precise
		  for our purposes.
		  'long long' makes it work even for HDMI 2.1
		  max bandwidth (and much, much bigger bandwidths
		  than that, actually).
		 
		  NOTE: Reducing link BW by 3% may not be precise
		  because it may be a stream BT that increases by 3%, and so
		  11.03 = 0.970873 factor should have been used instead,
		  but the difference is minimal and is in a safe direction,
		  which all works well around potential ambiguity of DP 1.4a spec.
	 Links supporting dynamically assigned link encoder will be assigned next
	  available encoder if one not already assigned.
 CONFIG_DRM_AMD_DC_DCN 
Only YOnly make reduce bandwidth by 13 compares to RGB
  Copyright 2015 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
Travis
Nutmeg
 do nothing 
 maximum pre emphasis level allowed for each voltage swing level
		 This link training fallback array is ordered by
		  link bandwidth from highest to lowest.
		  DP specs makes it a normative policy to always
		  choose the next highest link bandwidth during
		  link training fallback.
 overwrite the delay if rev > 1.1
		 DP 1.2 or later - retrieve delay through
	 Access link encoder capability based on whether it is statically
	  or dynamically assigned to a link.
	 Access link encoder capability based on whether it is statically
	  or dynamically assigned to a link.
		 WA for some MUX chips that will power down with eDP and lose supported
		  link rate set for eDP 1.4. Source reads DPCD 0x010 again to ensure
		  MUX chip gets link rate set back before link training.
 TODO link_prop.INTERNAL 
	
	 DpcdAddress_TrainingPatternSet
 concatenate everything into one buffer
 0x00103 - 0x00102
		 for eDP write in 2 parts because the 5-byte burst is
		 causing issues on some eDP panels (EPR#366724)
 write it all in (1 + number-of-lanes)-byte burst
LANEx_CR_DONE bits All 1's?
 we find the maximum of the requested settings across all lanes
 and set this maximum for all lanes
 Determine what the maximum of the requested settings are
	 make sure the requested settings are
 make sure the pre-emphasis matches the voltage swing
 Only used for channel equalization 
 Note: also check that TPS4 is a supported feature
 2. update DPCD
			 EPR #361076 - write as a 5-byte burst,
			  but only for the 1-st iteration
 3. wait for receiver to lock-on
		 4. Read lane status and requested
 5. check CR done
 6. check CHEQ done
 7. update VSPEPC2 in lt_settings
	 najeeb - The synaptics MST hub can put the LT in
	 infinite loop by switching the VS
	 between level 0 and level 1 continuously, here
 1. call HWSS to set lane settings
 2. update DPCD of the receiver
			 EPR #361076 - write as a 5-byte burst,
 3. wait receiver to lock-on
		 4. Read lane status and requested drive
		 settings as set by the sink
 5. check CR done
 6. max VS reached
 7. same lane settings
		 Note: settings are the same for all lanes,
 8. update VSPEPC2 in lt_settings
 4. mainlink output idle pattern
	
	  5. post training adjust if required
	  If the upstream DPTX and downstream DPRX both support TPS4,
	  TPS4 must be used instead of POST_LT_ADJ_REQ.
		 delay 5ms after Main Link output idle pattern and then check
		  DPCD 0202h.
parse lane status
		
		  check lanes status
			 if one of the channel equalization, clock
			  recovery or symbol lock is dropped
			  consider it as (link has been
			  dropped) dp sink status has changed
 Initialize link settings 
	 TODO hard coded to SS for now
	  lt_settings.link_settings.link_spread =
	  dal_display_path_is_ss_supported(
	  path_mode->display_path) ?
	  LINK_SPREAD_05_DOWNSPREAD_30KHZ :
	  LINK_SPREAD_DISABLED;
 TODO: should decide link spread when populating link_settings 
 Override link spread 
 Override lane settings 
 Override HW lane settings with BIOS forced values if present 
 Initialize training timings 
 1 lttpr repeater
 2 lttpr repeaters
 3 lttpr repeaters
 4 lttpr repeaters
 5 lttpr repeaters
 6 lttpr repeaters
 7 lttpr repeaters
 8 lttpr repeaters
 invalid value
 aux timeout is already set to extended 
 RESETSET lttpr mode to enable non transparent mode 
			 Driver does not need to train the first hop. Skip DPCD read and clear
			  AUX_RD_INTERVAL for DPTX-to-DPIA hop.
 Set training not in progress
 Connectivity log: link training 
 TODO - DP2.0 Log: add connectivity log for FFE PRESET 
 program ASIC PHY settings
 Notify DP sink the PHY settings from source 
 1. Perform_clock_recovery_sequence. 
 transmit training pattern for clock recovery 
 call HWSS to set lane settings
 wait receiver to lock-on
 2. Perform_channel_equalization_sequence. 
 transmit training pattern for channel equalization. 
 call HWSS to set lane settings
 wait receiver to lock-on. 
 3. Perform_link_training_int. 
 Mainlink output idle pattern. 
 clear training pattern set 
 poll for intra-hop disable 
 0b = 2 ms, 1b = 1 ms 
	 (128b132b_TRAINING_AUX_RD_INTERVAL value + 1) 
	  INTERVAL_UNIT. The maximum is 256 ms
 Transmit 128b132b_TPS1 over Main-Link 
 Set TRAINING_PATTERN_SET to 01h 
 Adjust TX_FFE_PRESET_VALUE and Transmit 128b132b_TPS2 over Main-Link 
 Set loop counter to start from 1 
 Set TRAINING_PATTERN_SET to 02h and TX_FFE_PRESET_VALUE in one AUX transaction 
 poll for channel EQ done 
 pass 
 poll for EQ interlane align done 
 pass 
 Assumption: assume hardware has transmitted eq pattern 
 initiate CDS done sequence 
 poll for CDS interlane align done and symbol lock 
 pass 
 1. set link rate, lane count and spread. 
		 2. perform link training (set link training done
		   to false is done as well)
 TODO - DP2.0 Link: remove legacy_dp2_lt logic 
 decide training settings 
 reset previous training states 
 configure link prior to entering training mode 
	 enter training mode:
	  Per DP specs starting from here, DPTX device shall not issue
	  Non-LT AUX transactions inside training mode.
 exit training mode and switch to video idle 
 dump debug data 
	 Dynamically assigned link encoders associated with stream rather than
	  link.
	 We need to do this before the link training to ensure the idle pattern in SST
	  mode will be sent right after the link training
				 ASSR is bound to fail with unsigned PSP
				  verstage used during devlopment phase.
				  Report and continue with eDP panel mode to
				  perform eDP link training with right settings
 @todo Consolidate USB4 DP and DPx.x training. 
 Transmit idle pattern once training successful. 
		 latest link training still fail, skip delay and keep PHY on
 Abort link training if failure due to sink being unplugged. 
			 Fail link training if reduced link bandwidth no longer meets
			  stream requirements.
		
		  dp clock source is not initialized for some reason.
		  Should not happen, CLOCK_SOURCE_ID_EXTERNAL will be used
 Disable MST on link. Use only local sink. 
 Re-enable MST on link. 
	 Begin Sync LT. During this time,
	  DPCD:600h must not be powered down.
Clear any existing preferred settings.
 Setup MST Mode 
 Disable link 
 Enable link 
 Set FEC enable 
 Attempt to train with given link training settings 
 Set link rate, lane count and spread. 
	 2. perform link training (set link training done
	   to false is done as well)
 3. Sync LT must skip TRAINING_PATTERN_SET:0 (video pattern)
 4. print status message
	 If input parameter is set, shut down phy.
	  Still shouldn't turn off dp_receiver (DPCD:600h)
	 Links supporting dynamically assigned link encoder will be assigned next
	  available encoder if one not already assigned.
	 Links supporting dynamically assigned link encoder will be assigned next
	  available encoder if one not already assigned.
 get max link encoder capability 
 Lower link settings based on sink's link cap 
	
	  account for lttpr repeaters cap
	  notes: repeaters do not snoop in the DPRX Capabilities addresses (3.6.3).
	 The HW reads 16 bytes from 200h on HPD,
	  but if we get an AUX_DEFER, the HW cannot retry
	  and this causes the CTS tests 4.3.2.1 - 3.2.4 to
	  fail, so we now explicitly read 6 bytes which is
	  the req from the above mentioned test cases.
	 
	  For DP 1.4 we need to read those from 2002h range.
		 Read 14 bytes in a single read and then copy only the required fields.
1. Check that Link Status changed, before re-training.
parse lane status
		 check status of lanes 0,1
		  changed DpcdAddress_Lane01Status (0x202)
			 if one of the channel equalization, clock
			  recovery or symbol lock is dropped
			  consider it as (link has been
			  dropped) dp sink status has changed
 Check interlane align.
		2. Check that we can handle interrupt: Not in FS DOS,
		   Not in "Display Timeout" state, Link is trained.
	 link training starts with the maximum common settings
	  supported by both sink and ASIC.
 Accept reported capabilities if link supports flexible encoder mapping or encoder already in use. 
		 TODO - should we check link encoder's max link caps here?
		  How do we know which link encoder to check from?
 Grant extended timeout request 
 TODO implement override and monitor patch later 
	 try to train the link from high to low to
	  find the physical link capability
 disable PHY done possible by BIOS, will be done by driver itself 
	 Temporary Renoir-specific workaround for SWDEV-215184;
	  PHY will sometimes be in bad state on hotplugging display from certain USB-C dongle,
	  so add extra cycle of enabling and disabling the PHY before first link training.
		 always disable the link before trying another
		  setting or before returning we'll enable it later
		  based on the actual mode we're driving
	 Link Training failed for all Link Settings
	   (Lane Count is still unknown)
		 If all LT fails for all settings,
		  set verified = failed safe (1 lane low)
	 in DP compliance test, DPR-120 may have
	  a random value in its MAX_LINK_BW dpcd field.
	  We map it to the maximum supported link rate that
	  is smaller than MAX_LINK_BW in this case.
 find current index 
 find next index 
  function: set link rate and lane count fallback based
  on current link setting and last link training result
  return value:
 			true - link setting could be set
 			false - has reached minimum setting
 					and no further fallback could be done
 According to spec, VSC SDP should be used if pixel format is YCbCr420 
always DP fail safe mode
 TODO: DYNAMIC_VALIDATION needs to be implemented 
	if (flags.DYNAMIC_VALIDATION == 1 &&
		link->verified_link_cap.lane_count != LANE_COUNT_UNKNOWN)
		link_setting = &link->verified_link_cap;
		 remember the biggest mode here, during
		  initial link training (to get
		  verified_link_cap), LS sends event about
		  cannot train at reported cap to upper
		  layer and upper layer will re-enumerate modes.
		  this is not necessary if the lower
		  verified_link_cap is enough to drive
 TODO: DYNAMIC_VALIDATION needs to be implemented 
		 if (flags.DYNAMIC_VALIDATION == 1)
			dpsst->max_req_bw_for_verified_linkcap = dal_max(
	 search for the minimum link setting that:
	  1. is supported according to the link training result
	  2. could support the bw requested by the timing
	
	  edp_supported_link_rates_count is only valid for eDP v1.4 or higher.
	  Per VESA eDP spec, "The DPCD revision for eDP v1.4 is 13h"
	 search for the minimum link setting that:
	  1. is supported according to the link training result
	  2. could support the bw requested by the timing
	 if preferred is specified through AMDDP, use it, if it's enough
	  to drive the mode
	 MST doesn't perform link training for now
	  TODO: add MST specific link training routine
Short Pulse IRQ
	
	  Don't handle RX IRQ unless one of following is met:
	  1) The link is established (cur_link_settings != unknown)
	  2) We know we're dealing with a branch device, SST or MST
DpcdAddress_PSR_Enable_Cfg
DpcdAddress_PSR_Error_Status
DPCD 2006h   ERROR STATUS
DPCD 2008h   SINK PANEL SELF REFRESH STATUS
 Acknowledge and clear error bits 
DpcdAddress_PSR_Error_Status
 PSR error, disable and re-enable PSR 
			 No error is detect, PSR is active.
			  We should return with IRQ_HPD handled without
			  checking for loss of sync since PSR would have
			  powered down main link.
 Set preferred link settings 
 TODO Raven hbr2 compliance eye output is unstable
  (toggling on and off) with debugger break
  This caueses intermittent PHY automation failure
 get phy test pattern and pattern parameters from DP receiver 
	get post cursor 2 parameters
	  For DP 1.1a or eariler, this DPCD register's value is 0
	  For DP 1.2 or later:
	  Bits 1:0 = POST_CURSOR2_LANE0; Bits 3:2 = POST_CURSOR2_LANE1
	  Bits 5:4 = POST_CURSOR2_LANE2; Bits 7:6 = POST_CURSOR2_LANE3
 translate request 
 CP2520 pattern is unstable, temporarily use TPS4 instead 
 CP2520 pattern is unstable, temporarily use TPS4 instead 
 Square pattern data is 1 byte (DP spec)
 prepare link training settings 
	Usage: Measure DP physical lane signal
	  by DP SI test equipment automatically.
	  PHY test pattern request is generated by equipment via HPD interrupt.
	  HPD needs to be active all the time. HPD should be active
	  all the time. Do not touch it.
	  forward request to DS
 get link test pattern and pattern parameters 
 black and white 
 6 bits
 8 bits
 10 bits
 12 bits
 get audio test mode and test pattern parameters
 read pattern periods for requested channels when sawTooth pattern is requested
 read period for each channel
 translate sampling rate
 ACK first to let DP RX test box monitor LT sequence 
 no acknowledge request is needed again 
 send request acknowledgment 
	 For use cases related to down stream connection status change,
	  PSR and device auto test, refer to function handle_sst_hpd_irq
	  All the "handle_hpd_irq_xxx()" methods
		  should be called only after
		  dal_dpsst_ls_read_hpd_irq_data
		  Order of calls is important too
 PSR-related error was detected and handled 
	 If PSR-related error handled, Main link may be off,
	  so do not handle as a normal sink status change interrupt.
 check if we have MST msg and return since we poll for it 
	 For now we only handle 'Downstream port status' case.
	  If we got sink count changed it means
	  Downstream port status changed,
	  then DM should call DC to do the detection.
 Connectivity log: link loss 
	 reasons for HPD RX:
	  1. Link Loss - ie Re-train the Link
	  2. MST sideband message
	  3. Automated Test - ie. Internal Commit
	  4. CP (copy protection) - (not interesting for DM???)
	  5. DRR
	  6. Downstream Port status changed
	  -ie. Detect - this the only one
	  which is interesting for DM because
	  it must call dc_link_detect.
query dpcd for version and mst cap addresses
 read IEEE branch device id 
 decode converter info
 DPCD 0x5 bit 0 = 1, it indicate it's branch device 
		 At this point we don't know is it DVI or HDMI or DP++,
 CTS 4.2.2.7 expects source to read Detailed Capabilities Info : 00080h-0008F.
Handle DP case as DONGLE_NONE
Handle DP++ active converter case, process DP++ case as HDMI case according DP1.4 spec
YCBCR capability only for HDMI case
		 0010FA active dongles (DP-VGA, DP-DLDVI converters) power down
		  all internal circuits including AUX communication preventing
		  reading DPCD table and EDID (spec violation).
		  Encoder will skip DP RX power down on disable_output to
 TODO: May need work around for other dongles. 
 Read additional sink caps defined in source specific DPCD area
  This function currently only reads from SinkCapability address (DP_SOURCE_SINK_CAP)
	
	  Logic to determine LTTPR mode
 Check DP tunnel LTTPR mode debug option. 
		 By reading LTTPR capability, RX assumes that we will enable
		  LTTPR extended aux timeout if LTTPR is present.
 Attempt to train in LTTPR transparent mode if repeater count exceeds 8. 
	 DP_ADAPTER_CAP - DP_DPCD_REV + 1 == 16 and also DP_DSC_BITS_PER_PIXEL_INC - DP_DSC_SUPPORT + 1 == 16,
	  which means size 16 will be good for both of those DPCD register block reads
	Only need to read 1 byte starting from DP_DPRX_FEATURE_ENUMERATION_LIST.
 30ms
	 if extended timeout is supported in hardware,
	  default to LTTPR timeout (3.2ms) first as a WA for DP link layer
	  CTS 4.2.1.1 regression introduced by CTS specs requirement update.
 Read DP tunneling information. 
	 Delay 1 ms if AUX CH is in power down state. Based on spec
	  section 2.3.1.2, if AUX CH may be powered down due to
	  write to DPCD 600h = 2. Sink AUX CH is monitoring differential
	  signal and may need up to 1 ms before being able to reply.
	 Sink may need to configure internals based on vendor, so allow some
	  time before proceeding with possibly vendor specific transactions
	 Error condition checking...
	  It is impossible for Sink to report Max Lane Count = 0.
	  It is possible for Sink to report Max Link Rate = 0, if it is
	  an eDP device that is reporting specialized link rates in the
	  SUPPORTED_LINK_RATE table.
 read sink count 
 read sink ieee oui 
 Quirk Apple MBP 2017 15" Retina panel: Wrong DP_MAX_LINK_RATE 
 Read DSC and FEC sink capabilities if DP revision is 1.4 and up 
 Connectivity log: detection 
	 dc init_hw has power encoder using default
	  signal for connector. For native DP, no
	  need to power up encoder again. If not native
	  DP, hw_init may need check signal or power up
	  encoder here.
 TODO save sink caps in link->sink 
 LinkRate is normally stored as a multiplier of 0.27 Gbps per lane. Do the translation.
 Rate_1 (RBR)		- 1.62 GbpsLane
 Rate_2			- 2.16 GbpsLane
 Rate_3			- 2.43 GbpsLane
 Rate_4 (HBR)		- 2.70 GbpsLane
 Rate_5 (RBR2)	- 3.24 GbpsLane
 Rate_6			- 4.32 GbpsLane
 Rate_7 (HBR2)	- 5.40 GbpsLane
 Rate_8 (HBR3)	- 8.10 GbpsLane
	
	  edp_supported_link_rates_count is only valid for eDP v1.4 or higher.
	  Per VESA eDP spec, "The DPCD revision for eDP v1.4 is 13h"
 Read DPCD 00010h - 0001Fh 16 bytes at one shot
 DPCD register reports per-lane link rate = 16-bit link rate capability
 value X 200 kHz. Need multiplier to find link rate in kHz.
 disable bit depth reduction 
 restore bitdepth reduction 
 Reset CRTC Test Pattern if it is currently running and request is VideoMode 
 Set CRTC Test Pattern 
 Unblank Stream 
		 TODO:m_pHwss->MuteAudioEndpoint
		  (pPathMode->pDisplayPath, false);
 Reset Test Pattern state 
 Check for PHY Test Patterns 
 Set DPCD Lane Settings before running test pattern 
 Blank stream if running test pattern 
			TODO:
			  m_pHwss->
			  MuteAudioEndpoint(pPathMode->pDisplayPath, true);
 Blank stream 
 Set Test Pattern state 
TODO:&& !pPathMode->pDisplayPath->IsTargetPoweredOn())
			 tell receiver that we are sending qualification
			  pattern DP 1.2 or later - DP receiver's link quality
			  pattern is set using DPCD LINK_QUAL_LANEx_SET
			  register (0x10B~0x10E)\
			 tell receiver that we are sending qualification
			  pattern DP 1.1a or earlier - DP receiver's link
			  quality pattern is set using
			  DPCD TRAINING_PATTERN_SET -> LINK_QUAL_PATTERN_SET
			  register (0x102). We will use v_1.3 when we are
			  setting test pattern for DP 1.1.
 update MSA to requested color space 
 sb17 bit 7 Dynamic Range: 0 = VESA range, 1 = CTA range
 CRTC Patterns 
 Set Test Pattern state 
set edp panel mode in receiver
	 We need to explicitly check that connector
	  is not DP. Some Travis_VGA get reported
	  by video bios as DP.
			 alternate scrambler reset is required for Travis
			  for the case when external chip does not
			  provide sink device id, alternate scrambler
			  scheme will  be overriden later by querying
			  Encoder features
			 alternate scrambler reset is required for Travis
			  for the case when external chip does not provide
			  sink device id, alternate scrambler scheme will
			  be overriden later by querying Encoder feature
	 FEC has to be "set ready" before the link training.
	  The policy is to always train with FEC
	  if the sink supports it and leave it enabled on link.
	  If FEC is not supported, disable it.
	 Access link encoder based on whether it is statically
	  or dynamically assigned to a link.
	 Access link encoder based on whether it is statically
	  or dynamically assigned to a link.
			 Accord to DP spec, FEC enable sequence can first
			  be transmitted anytime after 1000 LL codes have
			  been transmitted on the link after link training
			  completion. Using 1 lane RBR should have the maximum
			  time for transmitting 1000 LL codes which is 6.173 us.
			  So use 7 microseconds delay instead.
 needed? where to get?
 needed? where to get?
 OLEDs have no PWM, they can only use AUX
 On non-supported panels dpcd_read usually succeeds with 0 returned 
 we read default from 0x320 because we expect BIOS wrote it there
 regular get_backlight_nit reads from panel set at 0x326
 if < 5 nits or > 5000, it might be wrong readback
 invalid input
 Read DPCD 00100h to find if standard link rates are set
 Read DPCD 00115h to find the edp link rate set used
 Read DPCD 00101h to find out the number of lanes currently set
 TODO - DP2.0 Link: Fix get_lane_status to handle LTTPR offset (SST and MST)
 TODO - DP2.0 Payload: Read and log the payload table from downstream branch
	
	  wait for ACT handled
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
			 initialize with firmware data first, no all
			  ASIC have DCCG SW component. FPGA or
			  simulation need initialization of
			  dccg_ref_clock_inKhz, dchub_ref_clock_inKhz
			  with xtalin_clock_inKhz
 multi streams supported 
 multi streams not supported 
		 find the total number of streams available via the
		  AZALIA_F0_CODEC_PIN_CONTROL_RESPONSE_CONFIGURATION_DEFAULT
		  registers (one for each pin) starting from pin 1
		  up to the max number of audio pins.
		  We stop on the first pin where
		  PORT_CONNECTIVITY == 1 (as instructed by HW team).
 disable refresh rates higher than 60Hz for now 
Check for mpc split
Get odm split index
  This is a preliminary vp size calculation to allow us to check taps support.
  The result is completely overridden afterwards.
	
	  Only the leftmost ODM pipe should be offset by a nonzero distance
 Handle h & v split 
			 extra pixels in the division remainder need to go to pipes after
			  the extra pixel index minus one(epimo) defined here as:
 odm 
 rightmost pipe is the remainder recout 
 ODM combine cases with MPO we can get negative widths 
Swap surf_src height and width since scaling ratios are in recout rotation
  We completely calculate vp offset, size and inits here based entirely on scaling
  ratios and recout for pixel perfect pipe combine.
	
	  First of the taps starts sampling pixel number <init_int_part> corresponding to recout
	  pixel 1. Next recout pixel samples int part of <init + scaling ratio> and so on.
	  All following calculations are based on this logic.
	 
	  Init calculated according to formula:
	  	init = (scaling_ratio + number_of_taps + 1)  2
	  	init_bot = init + scaling_ratio
	  	to get pixel perfect combine add the fraction from calculating vp offset
	
	  If viewport has non 0 offset and there are more taps than covered by init then
	  we should decrease the offset and increase init so we are never sampling
	  outside of viewport.
	
	  If taps are sampling outside of viewport at end of recout and there are more pixels
	  available in the surface we should increase the viewport size, regardless set vp to
	  only what is used.
	 We did all the math assuming we are scanning same direction as display does,
	  however mirrorrotation changes how vp scans vs how it is offset. If scan direction
	  is flipped we simply need to calculate offset from the other side of plane.
	  Note that outside of viewport all scaling hardware works in recout space.
	
	  recout full is what the recout would have been if we didnt clip
	  the source plane at all. We only care about left(ro_lb) and top(ro_tb)
	  offsets of recout within recout full because those are the directions
	  we scan from and therefore the only ones that affect inits.
	
	  Work in recout rotation since that requires less transformations
	 Timing borders are part of vactive that we are also supposed to skip in addition
	  to any stream dst offset. Since dm logic assumes dst is in addressable
	  space we need to add the left and top borders to dst offsets temporarily.
	  TODO: fix in DM, stream dst is supposed to be in vactive
 Calculate H and V active size 
 depends on h_active 
 depends on pixel format 
 depends on scaling ratios and recout, does not calculate offset yet 
 Stopgap for validation of ODM + MPO on one side of screen case 
	
	  LB calculations depend on vp size, hv_active and scaling ratios
	  Setting line buffer pixel depth to 24bpp yields banding
	  on certain displays, such as the Sharp 4k. 36bpp is needed
	  to support SURFACE_PIXEL_FORMAT_GRPH_ARGB16161616 and
	  SURFACE_PIXEL_FORMAT_GRPH_ABGR16161616 with actual > 10 bpc
	  precision on at least DCN display engines. However, at least
	  Carrizo with DCE_VERSION_11_0 does not like 36 bpp lb depth,
	  so use only 30 bpp on DCE_VERSION_11_0. Testing with DCE 11.2 and 8.3
	  did not show such problems, so this seems to be the exception.
 Try 24 bpp linebuffer 
	
	  Depends on recout, scaling ratios, h_active and taps
	  May need to re-check lb size after this in some obscure scenario
	
	  Handle side by side and top bottom 3d recout offsets after vp calculation
	  since 3d is special and needs to calculate vp as if there is no recout offset
	  This may break with rotation, good thing we aren't mixing hw rotation and 3d
 Clamp minimum viewport size 
	
	  We add a preferred pipe mapping to avoid the chance that
	  MPCCs already in use will need to be reassigned to other trees.
	  For example, if we went with the strict, assign backwards logic:
	 
	  (State 1)
	  Display A on, no surface, top pipe = 0
	  Display B on, no surface, top pipe = 1
	 
	  (State 2)
	  Display A on, no surface, top pipe = 0
	  Display B on, surface enable, top pipe = 1, bottom pipe = 5
	 
	  (State 3)
	  Display A on, surface enable, top pipe = 0, bottom pipe = 5
	  Display B on, surface enable, top pipe = 1, bottom pipe = 4
	 
	  The state 2->3 transition requires remapping MPCC 5 from display B
	  to display A.
	 
	  However, with the preferred pipe logic, state 2 would look like:
	 
	  (State 2)
	  Display A on, no surface, top pipe = 0
	  Display B on, surface enable, top pipe = 1, bottom pipe = 4
	 
	  This would then cause 2->3 to not require remapping any MPCCs.
	
	  search backwards for the second pipe to keep pipe
	  assignment more consistent
  A free_pipe for a stream is defined here as a pipe
  that has no surface attached yet
 Re-use pipe already acquired for this stream if available
	
	  At this point we have no re-useable pipe for this stream and we need
	  to acquire an idle one to satisfy the request
 retain new surface, but only once per stream 
 assign new surfaces
 release pipe for plane
			 Second condition is to avoid setting NULL to top pipe
			  of tail pipe making it look like head pipe in subsequent
			  deletes
			
			  For head pipe detach surfaces from pipe for tail
			  pipe just zero it out
 Start at the plane we've just released, and move all the planes one index forward to "trim" the array 
 If output color space is changed, need to reprogram info frames 
  dc_is_stream_unchanged() - Compare two stream states for equivalence.
  Checks if there a difference between the two states
  that would require a mode change.
  Does not compare cursor position or attributes.
  dc_is_stream_scaling_unchanged() - Compare scaling rectangles of two streams.
 TODO: release audio object 
we have enough audio endpoint, find the matching inst
 use engine id to find free audio 
not found the matching one, first come first serve
  dc_add_stream_to_ctx() - Add a new dc_stream_state to a dc_state.
  dc_remove_stream_from_ctx() - Remove a stream from a dc_state.
 Release primary pipe 
 Release link encoder from stream in new dc_state. 
 Trim back arrays 
 We are looking for non dp, non virtual stream 
 update actual pixel clock on all streams 
 Check for enabled DIG to identify enabled display 
 tg_inst not found
 Read DPP->MPCC->OPP Pipe from HW State
 TODO: Check Linux 
 hw resource was assigned to other stream 
 acquire new resources 
	 Allocate DP HPO Stream Encoder based on signal, hw capabilities
	  and link settings
 TODO: Add check if ASIC support and EDID audio 
		
		  Audio assigned in order first come first get.
		  There are asics which has number of audio
		  resources less then number of pipes
 Add ABM to the resource if on EDP 
  dc_resource_state_copy_construct_current() - Creates a new dc_state from existing state
  Is a shallow copy.  Increments refcounts on existing streams and planes.
  @dc: copy out of dc->current_state
  @dst_ctx: copy into this
  dc_validate_global_state() - Determine if HW can support a given state
  Checks HW resource availability and bandwidth requirement.
  @dc: dc struct for this driver
  @new_ctx: state to be validated
  @fast_validate: set to true if only yesno to support matters
  Return: DC_OK if the result can be programmed.  Otherwise, an error code.
	
	  Update link encoder to stream assignment.
	  TODO: Split out reason allocation from validation.
			 Switch to dp clock source only if there is
			  no non dp stream that shares the same timing
			  with the dp stream.
 For gamut we recalc checksum 
start of the Gamut data. 
 Initialize header 
	 InfoFrameVersion_3 is defined by CEA861F (Section 6.4), but shall
	
	  IDO-defined (Y2,Y1,Y0 = 1,1,1) shall not be used by devices built
	  according to HDMI 2.0 spec (Section 10.1)
 Y0_Y1_Y2 : The pixel encoding 
 H14b AVI InfoFrame has extension on Y-field from 2 bits to 3 bits 
 A0 = 1 Active Format Information valid 
 B0, B1 = 3; Bar info data is valid 
 S0, S1 : Underscan  Overscan 
 TODO: un-hardcode scan type 
 C0, C1 : Colorimetry 
 TODO: un-hardcode aspect ratio 
 Active Format Aspect ratio - same as Picture Aspect Ratio. 
 TODO: un-hardcode cn0_cn1 and itc 
 TODO : We should handle YCC quantization 
 but we do not have matrix calculation 
todo, add 3DStereo support
 Based on HDMI specs hdmi vic needs to be converted to cea vic when 3D is enabled
 If VIC >= 128, the Source shall use AVI InfoFrame Version 3
	 If (C1, C0)=(1, 1) and (EC2, EC1, EC0)=(1, 1, 1),
	  the Source shall use 20 AVI InfoFrame Version 4
	 pixel repetition
	  PR0 - PR3 start from 0 whereas pHwPathMode->mode.timing.flags.pixel
	 Bar Info
	  barTop:    Line Number of End of Top Bar.
	  barBottom: Line Number of Start of Bottom Bar.
	  barLeft:   Pixel Number of End of Left Bar.
     Additional Colorimetry Extension
      Used in conduction with C0-C1 and EC0-EC2
      0 = DCI-P3 RGB (D65)
      1 = DCI-P3 RGB (theater)
 check_sum - Calculate AFMT_AVI_INFO0 ~ AFMT_AVI_INFO3 
 one byte complement 
 Store in hw_path_mode 
 SPD info packet for FreeSync 
	 Check if Freesync is supported. Return if false. If true,
	  set the corresponding bit in the info packet
 SPD info packet for FreeSync 
	 Check if Freesync is supported. Return if false. If true,
	  set the corresponding bit in the info packet
 HDR Static Metadata info packet for HDR10 
 context refcount should not be overridden 
 default all packets to invalid 
 HDMi and DP have different info packets
 acquire new resources 
  Note: We need to disable output if clock sources change,
  since bios does optimization and doesn't apply if changing
  PHY when not already disabled.
 DIG link encoder resource assignment for stream changed. 
	 special case - Formatter can only reduce by 4 bits at most.
	  When reducing from 12 to 6 bits,
	  HW recommends we use trunc with round mode
	  (if we did nothing, trunc to 10 bits would be used)
	  note that any 12->10 bit reduction is ignored prior to DCE8,
	  as the input was 10 bits.
	 spatial dither
	  note that spatial modes 1-3 are never used
 temporal dither
 TODO: validate audio ASIC caps, encoder 
 check if surface has invalid dimensions 
 TODO For now validates pixel format only 
original logic when no audio info
audio sample packet AP = .25 for layout0, 1 for layout1
dts takes the same as type 2: AP = 0.25
check which one take more bandwidth
AP =1
not support
  Copyright 2015 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  DOC: Overview
  DC is the OS-agnostic component of the amdgpu DC driver.
  DC maintains and validates a set of structs representing the state of the
  driver and writes that state to AMD hardware
  Main DC HW structs:
  struct dc - The central struct.  One per driver.  Created on driver load,
  destroyed on driver unload.
  struct dc_context - One per driver.
  Used as a backpointer by most other structs in dc.
  struct dc_link - One per connector (the physical DP, HDMI, miniDP, or eDP
  plugpoints).  Created on driver load, destroyed on driver unload.
  struct dc_sink - One per display.  Created on boot or hotplug.
  Destroyed on shutdown or hotunplug.  A dc_link can have a local sink
  (the display directly attached).  It may also have one or more remote
  sinks (in the Multi-Stream Transport case)
  struct resource_pool - One per driver.  Represents the hw blocks not in the
  main pipeline.  Not directly accessible by dm.
  Main dc state structs:
  These structs can be created and destroyed as needed.  There is a full set of
  these structs in dc->current_state representing the currently programmed state.
  struct dc_state - The global DC state to track global state information,
  such as bandwidth values.
  struct dc_stream_state - Represents the hw configuration for the pipeline from
  a framebuffer to a display.  Maps one-to-one with dc_sink.
  struct dc_plane_state - Represents a framebuffer.  Each stream has at least one,
  and may have more in the Multi-Plane Overlay case.
  struct resource_context - Represents the programmable state of everything in
  the resource_pool.  Not directly accessible by dm.
  struct pipe_ctx - A member of struct resource_context.  Represents the
  internal hardware pipeline components.  Each dc_plane_state has either
  one or two (in the pipe-split case).
  Private functions
 next BIOS object table connector 
 Create a link for each usb4 dpia port 
 FPGA case - Allocate HPO DP link encoder 
 Create additional DIG link encoder objects if fewer than the platform
  supports were created during link construction. This can happen if the
  number of physical connectors is less than the number of DIGs.
	 A platform without USB4 DPIA endpoints has a fixed mapping between DIG
	  link encoders and physical display endpoints and does not require
	  additional link encoder objects.
	 Create as many link encoder objects as the platform supports. DPIA
	  endpoints can be programmably mapped to any DIG.
 Destroy any additional DIG link encoder objects created by
  create_link_encoders().
  NB: Must only be called after destroy_links().
	 A platform without USB4 DPIA endpoints has a fixed mapping between DIG
	  link encoders and physical display endpoints and does not require
	  additional link encoder objects.
   dc_stream_adjust_vmin_vmax:
   Looks up the pipe context of dc_stream_state and updates the
   vertical_total_min and vertical_total_max of the DRR, Dynamic Refresh
   Rate, which is a power-saving feature that targets reducing panel
   refresh rate while the screen is static
   @dc:     dc reference
   @stream: Initial dc stream state
   @adjust: Updated parameters for vertical_total_min and vertical_total_max
   Function: dc_stream_get_last_vrr_vtotal
   @brief
      Looks up the pipe context of dc_stream_state and gets the
      last VTOTAL used by DRR (Dynamic Refresh Rate)
   @param [in] dc: dc reference
   @param [in] stream: Initial dc stream state
   @param [in] adjust: Updated parameters for vertical_total_min and
   vertical_total_max
			 Only execute if a function pointer has been defined for
			  the DC version in question
 TODO: Support multiple streams 
crc window can't be null
set crc window
 Stream not found 
set mux routing info
 Stream not found 
set mux routing info
  dc_stream_configure_crc() - Configure CRC capture for the given stream.
  @dc: DC Object
  @stream: The stream to configure CRC on.
  @enable: Enable CRC if true, disable otherwise.
  @crc_window: CRC window (xy startend) information
  @continuous: Capture CRC on every frame if true. Otherwise, only capture
               once.
  By default, only CRC0 is configured, and the entire frame is used to
  calculate the crc.
 Stream not found 
 By default, capture the full frame 
 Default to the union of both windows 
 Only call if supported 
  dc_stream_get_crc() - Get CRC values for the given stream.
  @dc: DC object
  @stream: The DC stream state of the stream to get CRCs from.
  @r_cr: CRC value for the first of the 3 channels stored here.
  @g_y:  CRC value for the second of the 3 channels stored here.
  @b_cb: CRC value for the third of the 3 channels stored here.
  dc_stream_configure_crc needs to be called beforehand to enable CRCs.
  Return false if stream is not found, or if CRCs are not enabled.
 Stream not found 
 OPP FMT dyn expansion updates
 Create logger 
 Allocate memory for the vm_helper
	 Resource should construct all asic specific resources.
	  This should be the only place where we need to parse the asic id
 Create BIOS parser 
 Create GPIO service 
 set i2c speed if not done by the respective dcnxxx__resource.c 
	 Creation of current_state must occur after dc->dml
	  is initialized in dc_create_resource_pool because
	  on creation it copies the contents of dc->dml
	 Create additional DIG link encoder objects if fewer than the platform
	  supports were created during link construction.
 Initialise DIG link encoder resource tracking variables. 
 Checks if interdependent update function pointer is NULL or not, takes care of DCE110 case 
 Copied conditions that were previously in dce110_apply_ctx_for_surface
 check if timing_changed, disable stream
 only looking for first odm pipe
 Timeout 100 ms 
 Must set to false to start with, due to OR in update function 
  Public functions
 Populate versioning information 
		 Add tg to the set, search rest of the tg's for ones with
		  same timing, add all tgs with same timing to the group
 set first unblanked pipe as master 
 remove any other unblanked pipes as they have already been synced 
 Support seamless boot on EDP displays only 
 Check for enabled DIG to identify enabled display 
 tg_inst not found
 block DSC for now, as VBIOS does not currently support DSC timings 
  Applies given context to HW and copy it into current context.
  It's up to the user to release the src context afterwards.
	 re-program planes for existing stream, in case we need to
	  free up plane resource for later use
 use new pipe config in new context 
 Program hardware 
 Program all planes within new context
		
		  enable stereo
		  TODO rework dc_enable_stereo call to work with validation sets?
 Must wait for no flips to be pending before doing optimize bw 
 pplib is notified if disp_num changed 
find pipe idx for the given stream
for release pipe_idx is not required
 Must set to false to start with, due to OR in update function 
 Perform updates here which need to be deferred until next vupdate
  i.e. blnd lut, 3dlut, and shaper lut bypass regs are double buffered
  but forcing lut memory to shutdown state is immediate. This causes
  single frame corruption as lut gets disabled mid-frame unless shutdown
  is deferred until after entering bypass.
 CONFIG_DRM_AMD_DC_DCN 
	 Each context must have their own instance of VBA and in order to
	  initialize and obtain IP and SOC the base DML instance from DC is
	  initially copied into every context
		 During DCC onoff, stutter period is calculated before
		  DCC has fully transitioned. This results in incorrect
		  stutter period calculation. Triggering a full update will
		  recalculate stutter period.
		 different bytes per element will require full bandwidth
		  and DML calculation
		 todo: below are HW dependent, we should add a hook to
		  DCEN resource and validated there.
			 swizzled mode requires RQ to be setup properly,
			  thus need to run DML to calculate RQ settings
 This should be UPDATE_TYPE_FAST if nothing has changed. 
 Making dst rect smaller requires a bandwidth change 
 Making src rect bigger requires a bandwidth change 
 Reset all flags
 some stream updates require passive update 
  dc_check_update_surfaces_for_stream() - Determine update type (fast, med, or full)
  See :c:type:`enum surface_update_type <surface_update_type>` for explanation of update types
 If there's an available clock comparator, we use that.
 Else we fallback to mem compare.
	 Note: this being updated after mode set is currently not a use case
	  however if it arises OCSC would need to be reprogrammed at the
	  minimum
 update current stream with writeback info 
 Use temporarry context for validating new DSC config 
 Stream updates
 Full fe update
 for dpms, keep acquired resources
 if otg funcs defined check if blanked before programming
		 Optimize seamless boot flag keeps clocks and watermarks high until
		  first flip. After first flip, optimization is required to lower
		  bandwidth. Important to note that it is expected UEFI will
		  only light up a single display on POST, therefore we only expect
		  one stream with seamless boot flag set.
		 Lock the top pipe while updating plane addrs, since freesync requires
		   plane addr update event triggers to be synchronized.
		   top_pipe_to_program is expected to never be NULL
 Stream updates
		
		  In case of turning off screen, no need to program front end a second time.
		  just return after program blank.
set logical flag for lockunlock use
triple buffer for VUpdate  only
 force vsync flip when reconfiguring pipes to prevent underflow 
 Update Type FULL, Surface updates
 Full fe update
turn off triple buffer for full update
 Update Type FAST, Surface updates
 GSL has to be used for flip immediate
 Perform requested Updates 
program triple buffer after lock based on flip type
only enable triplebuffer for  fast_update
 Fire manual trigger only when bottom plane is flipped
 initialize scratch memory for building context 
		
		  Previous frame finished and HW is ready for optimization.
		 
		  Only relevant for DCN behavior where we can guarantee the optimization
		  is safe to apply - retain the legacy behavior for DCE.
update current_State
 Legacy optimization path for DCE. 
  dc_interrupt_set() - Enabledisable an AMD hw interrupt source
		 Zero out the current context so that on resume we start with
		  clean state, and dc hw programming optimizations will not
		  cause any trouble.
 Preserve refcount 
 Preserve display mode lib 
  dc_link_add_remote_sink() - Create a sink and attach it to an existing link
  EDID length is in bytes
	
	  Treat device as no EDID device if EDID
	  parsing fails
  dc_link_remove_remote_sink() - Remove a remote sink from a dc_link
  Note that this just removes the struct dc_sink - it doesn't
  program hardware or alter other members of dc_link
 shrink array to remove empty place 
 enabledisable eDP PSR without specify stream for eDP 
  blank all streams, and set min and max memory clock to
  lowest and highest DPM level, respectively
  set min memory clock to the min required for current mode,
  max to maxDPM, and unblank streams
 cleanup on driver unload 
  dc_enable_dmub_notifications - Returns whether dmub notification can be enabled
  @dc: dc structure
  Returns: True to enable dmub notifications, False otherwise
 YELLOW_CARP B0 USB4 DPIA needs dmub notifications for interrupts 
 dmub aux needs dmub notifications to be enabled 
  dc_process_dmub_aux_transfer_async - Submits aux command to dmub via inbox message
                                       Sets port index appropriately for legacy DDC
  @dc: dc structure
  @link_index: link index
  @payload: aux payload
  Returns: True if successful, False if failure
 For dpia, ddc_pin is set to NULL 
 set aux action 
		 ddc_hw_inst has dpia port index for dpia links
		  and ddc instance for legacy links
   Function: dc_process_dmub_set_config_async
   @brief
 		Submits set_config command to dmub via inbox message
   @param
 		[in] dc: dc structure
 		[in] link_index: link index
 		[in] payload: aux payload
 		[out] notify: set_config immediate reply
 	@return
 		True if successful, False if failure
 prepare SET_CONFIG command 
 command is not processed by dmub 
 command processed by dmub, if ret_status is 1, it is completed instantly 
 cmd pending, will receive notification via outbox 
   Function: dc_process_dmub_set_mst_slots
   @brief
 		Submits mst slot allocation command to dmub via inbox message
   @param
 		[in] dc: dc structure
 		[in] link_index: link index
 		[in] mst_alloc_slots: mst slots to be allotted
 		[out] mst_slots_in_use: mst slots in use returned in failure case
 	@return
 		DC_OK if successful, DC_ERROR if failure
 prepare MST_ALLOC_SLOTS command 
 command is not processed by dmub 
 command processed by dmub, if ret_status is 1 
 command processing error 
 command processed and we have a status of 2, mst not enabled in dpia 
 previously configured mst alloc and used slots did not match 
  dc_disable_accelerated_mode - disable accelerated mode
  @dc: dc structure
   dc_notify_vsync_int_state() - notifies vsync enabledisable state
   @dc: dc structure
 	@stream: stream where vsync int state changed
 	@enable: whether vsync is enabled or disabled
   Called when vsync is enableddisabled
 	Will notify DMUB to startstop ABM interrupts after steady state is reached
find primary pipe associated with stream
 Determine panel inst 
 SPDX-License-Identifier: MIT
  Copyright 2021 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 Configure link as prescribed in link_setting; set LTTPR mode; and
  Initialize link training settings.
  Abort link training if sink unplug detected.
  @param link DPIA link being trained.
  @param[in] link_setting Lane count, link rate and downspread control.
  @param[out] lt_settings Link settings and drive settings (voltage swing and pre-emphasis).
 Configure lttpr mode 
 Set link rate, lane count and spread. 
 prepare set_config payload 
 set_config should return ACK if successful 
 Build SET_CONFIG message data payload for specified message type. 
 Assume all lanes have same drive settings. 
 Message type not supported by helper function. 
 Convert DC training pattern to DPIA training stage. 
 TPS not supported by helper function. 
 Write training pattern to DPCD. 
 DpcdAddress_TrainingPatternSet 
 Execute clock recovery phase of link training for specified hop in display
  path.in non-transparent mode:
  - Driver issues both DPCD and SET_CONFIG transactions.
  - TPS1 is transmitted for any hops downstream of DPOA.
  - Drive (VSPE) only transmitted for the hop immediately downstream of DPOA.
  - CR for the first hop (DPTX-to-DPIA) is assumed to be successful.
  @param link DPIA link being trained.
  @param lt_settings link_setting and drive settings (voltage swing and pre-emphasis).
  @param hop The Hop in display path. DPRX = 0.
 Number of hopsrepeaters in display path. 
 Number of consecutive attempts with same VS or PE. 
 From DP spec, CR read interval is always 100us. 
	 Cap of LINK_TRAINING_MAX_CR_RETRY attempts at clock recovery.
	  Fix inherited from perform_clock_recovery_sequence() -
	  the DP equivalent of this function:
	  Required for Synaptics MST hub which can put the LT in
	  infinite loop by switching the VS between level 0 and level 1
	  continuously.
 DPTX-to-DPIA 
			 Send SET_CONFIG(SET_LINK:LC,LR,LTTPR) to notify DPOA that
			  non-transparent link training has started.
			  This also enables the transmission of clk_sync packets.
			 CR for this hop is considered successful as long as
			  SET_CONFIG message is acknowledged by DPOA.
 DPOA-to-x 
 Instruct DPOA to transmit TPS1 then update DPCD. 
		 Update DPOA drive settings then DPCD. DPOA does only adjusts
		  drive settings for hops immediately downstream.
 Read status and adjustment requests from DPCD. 
 Check if clock recovery successful. 
		 Count number of attempts with same drive settings.
		  Note: settings are the same for all lanes,
		  so comparing first lane is sufficient.
 Update VSPE. 
 Abort link training if clock recovery failed due to HPD unplug. 
 Execute clock recovery phase of link training in transparent LTTPR mode:
  - Driver only issues DPCD transactions and leaves USB4 tunneling (SET_CONFIG) messages to DPIA.
  - Driver writes TPS1 to DPCD to kick off training.
  - Clock recovery (CR) for link is handled by DPOA, which reports result to DPIA on completion.
  - DPIA communicates result to driver by updating CR status when driver reads DPCD.
  @param link DPIA link being trained.
  @param lt_settings link_setting and drive settings (voltage swing and pre-emphasis).
 Number of consecutive attempts with same VS or PE. 
	 Cap of LINK_TRAINING_MAX_CR_RETRY attempts at clock recovery.
	  Fix inherited from perform_clock_recovery_sequence() -
	  the DP equivalent of this function:
	  Required for Synaptics MST hub which can put the LT in
	  infinite loop by switching the VS between level 0 and level 1
	  continuously.
		 Write TPS1 (not VS or PE) to DPCD to start CR phase.
		  DPIA sends SET_CONFIG(SET_LINK) to notify DPOA to
		  start link training.
 Read status and adjustment requests from DPCD. 
 Check if clock recovery successful. 
		 Count number of attempts with same drive settings.
		  Note: settings are the same for all lanes,
		  so comparing first lane is sufficient.
 Update VSPE. 
 Abort link training if clock recovery failed due to HPD unplug. 
 Execute clock recovery phase of link training for specified hop in display
  path.
  @param link DPIA link being trained.
  @param lt_settings link_setting and drive settings (voltage swing and pre-emphasis).
  @param hop The Hop in display path. DPRX = 0.
 Return status read interval during equalization phase. 
 Check debug option for extending aux read interval. 
 Execute equalization phase of link training for specified hop in display
  path in non-transparent mode:
  - driver issues both DPCD and SET_CONFIG transactions.
  - TPSx is transmitted for any hops downstream of DPOA.
  - Drive (VSPE) only transmitted for the hop immediately downstream of DPOA.
  - EQ for the first hop (DPTX-to-DPIA) is assumed to be successful.
  - DPRX EQ only reported successful when both DPRX and DPIA requirements
  (clk sync packets sent) fulfilled.
  @param link DPIA link being trained.
  @param lt_settings link_setting and drive settings (voltage swing and pre-emphasis).
  @param hop The Hop in display path. DPRX = 0.
 Number of hopsrepeaters in display path. 
	 Training pattern is TPS4 for repeater;
	  TPS234 for DPRX depending on what it supports.
 DPTX-to-DPIA equalization always successful. 
 Instruct DPOA to transmit TPSn then update DPCD. 
		 Update DPOA drive settings then DPCD. DPOA only adjusts
		  drive settings for hop immediately downstream.
		 Extend wait time on second equalisation attempt on final hop to
		  ensure clock sync packets have been sent.
 Read status and adjustment requests from DPCD. 
 CR can still fail during EQ phase. Fail training if CR fails. 
 Update VSPE. 
 Abort link training if equalization failed due to HPD unplug. 
 Execute equalization phase of link training for specified hop in display
  path in transparent LTTPR mode:
  - driver only issues DPCD transactions leaves USB4 tunneling (SET_CONFIG) messages to DPIA.
  - driver writes TPSx to DPCD to notify DPIA that is in equalization phase.
  - equalization (EQ) for link is handled by DPOA, which reports result to DPIA on completion.
  - DPIA communicates result to driver by updating EQ status when driver reads DPCD.
  @param link DPIA link being trained.
  @param lt_settings link_setting and drive settings (voltage swing and pre-emphasis).
  @param hop The Hop in display path. DPRX = 0.
 Read status and adjustment requests from DPCD. 
 CR can still fail during EQ phase. Fail training if CR fails. 
 Update VSPE. 
 Abort link training if equalization failed due to HPD unplug. 
 Execute equalization phase of link training for specified hop in display
  path.
  @param link DPIA link being trained.
  @param lt_settings link_setting and drive settings (voltage swing and pre-emphasis).
  @param hop The Hop in display path. DPRX = 0.
 End training of specified hop in display path. 
 End training of specified hop in display path.
  In transparent LTTPR mode:
  - driver clears training pattern for the specified hop in DPCD.
  In non-transparent LTTPR mode:
  - in addition to clearing training pattern, driver issues USB4 tunneling
  (SET_CONFIG) messages to notify DPOA when training is done for first hop
  (DPTX-to-DPIA) and last hop (DPRX).
  @param link DPIA link being trained.
  @param hop The Hop in display path. DPRX = 0.
 Number of hopsrepeaters in display path. 
 DPTX-to-DPIA 
			 Send SET_CONFIG(SET_TRAINING:0xff) to notify DPOA that
			  DPTX-to-DPIA hop trained. No DPCD write needed for first hop.
 DPOA-to-x 
 Write 0x0 to TRAINING_PATTERN_SET 
 Notify DPOA that non-transparent link training of DPRX done. 
 non-LTTPR or transparent LTTPR. 
 Write 0x0 to TRAINING_PATTERN_SET 
 When aborting training of specified hop in display path, clean up by:
  - Attempting to clear DPCD TRAINING_PATTERN_SET, LINK_BW_SET and LANE_COUNT_SET.
  - Sending SET_CONFIG(SET_LINK) with lane count and link rate set to 0.
  @param link DPIA link being trained.
  @param hop The Hop in display path. DPRX = 0.
 Abandon clean-up if sink unplugged. 
 Number of hopsrepeaters in display path. 
 Current hop. 
 Configure link as prescribed in link_setting and set LTTPR mode. 
	 Train each hop in turn starting with the one closest to DPTX.
	  In transparent or non-LTTPR mode, train only the final hop (DPRX).
 Clock recovery. 
 Equalization. 
 Stop training hop. 
	 Double-check link status if training successful; gracefully abort
	  training of current hop if training failed due to message tunneling
	  failure; end training of hop if training ended conventionally and
	  falling back to lower bandwidth settings possible.
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  Private functions
 Copy audio modes 
 TODO - Remove this translation 
		 TODO - WindowDM has implemented,
 EDID CAP translation for HDMI 2.0 
 If using dynamic encoder assignment, wait till stream committed to assign encoder. 
  dc_stream_get_status_from_state - Get stream status from given dc state
  @state: DC state to find the stream status in
  @stream: The stream to get the stream status for
  The given stream is expected to exist in the given dc state. Otherwise, NULL
  will be returned.
  dc_stream_get_status() - Get current stream status of the given stream state
  @stream: The stream to get the stream status for.
  The given stream is expected to exist in dc->current_state. Otherwise, NULL
  will be returned.
  dc_optimize_timing_for_fsft() - dc to optimize timing
  dc_stream_set_cursor_attributes() - Update cursor attributes and set cursor surface address
 disable idle optimizations while updating cursor 
 re-enable idle optimizations if necessary 
 disable idle optimizations if enabling cursor 
 re-enable idle optimizations if necessary 
 recalculate and apply DML parameters 
dynamic update
 enable writeback 
 writeback pipe already enabled, only need to update 
 Enable writeback pipe from scratch
	stream->writeback_info[dwb_pipe_inst].wb_enabled = false;
dynamic update
 remove writeback info for disabled writeback pipes from stream 
 trim the array 
 recalculate and apply DML parameters 
 disable writeback 
 Stream not found, by default we'll assume HUBP fetched dm data 
 Dynamic metadata is only supported on HDMI or DP 
 Check hardware support 
  Copyright 2021 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  Partition the entire DPCD address space
  XXX: This partitioning must cover the entire DPCD address space,
  and must contain no gaps or overlapping address ranges.
	
	  The FEC registers are contiguous
 all remaining DPCD addresses 
	
	  find current partition
	  this loop spins forever if partition map above is not surjective
  Ranges of DPCD addresses that must be read in a single transaction
  XXX: Do not allow any two address ranges in this array to overlap
  extend addresses to read all mandatory blocks together
  Reduce the AUX reply down to the values the caller requested
	
	  If the address is same, address was not extended.
	  So we do not need to free any memory.
	  The data is in original buffer(reduced_data).
 size of the remaining partitioned address space 
 size of the next partition to be read from 
  Copyright 2012-17 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 Truncate 8-bit signed value to 6-bit signed value 
  Copyright 2019 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Author: AMD
 This module's internal functions 
 default DSC policy target bitrate limit is 16bpp 
 default DSC policy enables DSC only when needed 
 Forward Declerations 
 Mask bpp increment dpcd field to avoid reading other fields
		 dsc_bpp_increment_div should onl be 1, 2, 4, 8 or 16, but rather than rejecting invalid values,
		  we'll accept all and get it into range. This also makes the above check against 0 redundant,
		  but that one stresses out the override will be only used if it's not 0.
 Extended caps 
 branch decoder DPCD DSC data can be null for non branch device
 If DSC is possbile, get DSC bandwidth range based on [min_bpp, max_bpp] target bitrate range and
  timing's pixel clock and uncompressed bandwidth.
  If DSC is not possible, leave 'range' untouched.
 This is a static HW query, so we can use any DSC
 Returns 'false' if no intersection was found for at least one capability.
  It also implicitly validates some sink caps against invalid value of zero.
 TODO DSC: Remove this workaround for N422 and 420 once it's fixed, or move it to get_dsc_encoder_caps()
 Decide DSC bandwidth range based on signal, timing, specs specific and input min and max
  requirements.
  The range output includes decided minmax target bpp, the respective bandwidth requirements
  and native timing bandwidth requirement when DSC is not used.
 apply signal, timing, specs and explicitly specified DSC range requirements 
 populate output structure 
 native stream bandwidth 
 max dsc target bpp 
 min dsc target bpp 
 Decides if DSC should be used and calculates target bpp if it should, applying DSC policy.
  Returns:
      - 'true' if target bpp is decided
      - 'false' if target bpp cannot be decided (e.g. cannot fit even with min DSC bpp),
 enable max bpp even dsc is not needed 
 use max target bpp allowed 
 use target bpp that can take entire target bandwidth 
 Increment sice number in available sice numbers stops if possible, or just increment if not
 Get next bigger num slices available in common caps
 No available slices found
 Numbers of slices found - get the next bigger number
 No biger number of slices found
 Decrement sice number in available sice numbers stops if possible, or just decrement if not. Stop at zero.
 Get next bigger num slices available in common caps
 No numbers of slices found
 Numbers of slices found - get the next smaller number
 No smaller number of slices found
 Choose next bigger number of slices if the requested number of slices is not available
 Get next bigger num slices available in common caps
 No available slices found
 Numbers of slices found - get the equal or next bigger number
 Attempts to set DSC configuration for the stream, applying DSC policy.
  Returns 'true' if successful or 'false' if not.
  Parameters:
  dsc_sink_caps       - DSC sink decoder capabilities (from DPCD)
  dsc_enc_caps        - DSC encoder capabilities
  target_bandwidth_kbps  - Target bandwidth to fit the stream into.
                           If 0, do not calculate target bpp.
  timing              - The stream timing to fit into 'target_bandwidth_kbps' or apply
                        maximum compression to, if 'target_badwidth == 0'
  dsc_cfg             - DSC configuration to use if it was possible to come up with
                        one for the given inputs.
                        The target bitrate after DSC can be calculated by multiplying
                        dsc_cfg.bits_per_pixel (in U6.4 format) by pixel rate, e.g.
                        dsc_stream_bitrate_kbps = (int)ceil(timing->pix_clk_khz  dsc_cfg.bits_per_pixel  16.0);
 Intersect decoder with encoder DSC caps and validate DSC settings
 Validate available DSC settings against the mode timing
 Validate color format (and pick up the throughput values)
 Validate branch's maximum throughput
 Color depth
 Slice width (i.e. number of slices per line)
 DSC TODO: Maybe try increasing the number of slices first?
 Fall back to max slices if min slices is not working out
 Fall back to min slices if max slices is not possible
 Slice height (i.e. number of slices per column): start with policy and pick the first one that height is divisible by.
 For 4:2:0 make sure the slice height is divisible by 2 as well.
 For the case when pic_height < dsc_policy.min_sice_height
 Final decission: can we do DSC or not?
 Fill out the rest of DSC settings
 use target bpp that can take entire target bandwidth 
 DSC Policy: Use minimum number of slices that fits the pixel clock 
	 DSC Policy: Use max available slices
	  (in our case 4 for or 8, depending on the mode)
	 DSC Policy: Use slice height recommended
	  by VESA DSC Spreadsheet user guide
	 DSC Policy: follow DP specs with an internal upper limit to 16 bpp
	  for better interoperability
 assume no YCbCr422 native support 
 DP specs limits to 8 
 DP specs limits to 3 x bpc 
 DP specs limits to 6 
 DP specs limits to 1.5 x bpc assume bpc is an even number 
 internal upper limit, default 16 bpp 
 apply override 
 enable DSC when not needed, default false 
  Copyright 2017 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  calc_rc_params - reads the user's cmdline mode
  @rc: DC internal DSC parameters
  @pps: DRM struct with all required DSC values
  This function expects a drm_dsc_config data struct with all the required DSC
  values previously filled out by our driver and based on this information it
  computes some of the DSC values.
  @note This calculation requires float point operation, most of it executes
  under kernel_fpu_{begin,end}.
  calc_dsc_bytes_per_pixel - calculate bytes per pixel
  @pps: DRM struct with all required DSC values
  Based on the information inside drm_dsc_config, this function calculates the
  total of bytes per pixel.
  @note This calculation requires float point operation, most of it executes
  under kernel_fpu_{begin,end}.
  Return:
  Return the number of bytes per pixel
  Copyright 2018 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
			
			  program DPP DTO phase and modulo as below
			  phase = ceiling(dpp_pipe_clk_mhz  10)
			  module = trunc(dpp_global_clk_mhz  10)
			 
			  storing frequencies in registers allow dmcub fw
			  to run time lower clocks when possible for power saving
			 
			  ceiling phase and truncate modulo guarentees the divided
			  down per pipe dpp clock has high enough frequency
				 phase > modulo result in screen corruption
				  ie phase = 30, mod = 29 for 4k@60 HDMI
				  in these case we don't want pipe clock to be divided
			
			   set phase to 10 if dpp isn't used to
			   prevent hard hang if access dpp register
			   on unused pipe
			 
			   DTO should be on to divide down un-used
			   pipe clock for power saving
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 RBR
 HBR
HBR2
HBR3
TODO: need to implement a proper lane mapping for Renoir.
	 set the flag to indicate whether driver poll the I2C data pin
	  while doing the DP sink detect
	if (dal_adapter_service_is_feature_supported(as,
		FEATURE_DP_SINK_DETECT_POLL_DATA_PIN))
		enc10->base.features.flags.bits.
	 For DCE 8.0 and 8.1, by design, UNIPHY is hardwired to DIG_BE.
	  SW always assign DIG_FE 1:1 mapped to DIG_FE for non-MST UNIPHY.
	  SW assign DIG_FE to non-MST UNIPHY first and MST last. So prefer
	  DIG is per UNIPHY and used by SST DP, eDP, HDMI, DVI and LVDS.
	  Prefer DIG assignment is decided by board design.
	  For DCE 8.0, there are only max 6 UNIPHYs, we assume board design
	  and VBIOS will filter out 7 UNIPHY for DCE 8.0.
	  By this, adding DIGG should not hurt DCE 8.0.
	  This will let DCE 8.1 share DCE 8.0 as much as possible
 default to one to mirror Windows behavior 
 Override features with DCE-specific values 
  Copyright 2016-2020 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 Copyright 2018 Advanced Micro Devices, Inc.
  Copyright 2019 Raptor Engineering, LLC
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
todo
 SRExitTime
Extra state, no dispclk ramping
 begin 
 DCN 
 TODO awful hack. fixup dcn20_dwb.h 
 NBIO 
 MMHUB 
 4 audio endpoints.  4 audio streams
 maybe 3 because the last two used for USB-c
 only pipe 0 is read for voltage and dcfsoc clocks 
 WM Set D 
 WM Set C 
 WM Set B 
 WM Set A 
	
	  DML favors voltage over p-state, but we're more interested in
	  supporting p-state over voltage. We can't support p-state in
	  prefetch mode > 0 so try capping the prefetch mode to start.
		
		  If mode is unsupported or there's still no p-state support then
		  fall back to favoring voltage.
		 
		  We don't actually support prefetch mode 2, so require that we
		  at least support prefetch mode 1.
 We only support full screen mpo with ODM 
initialize pipe_just_split_from to invalid idx
 Skip 2nd half of already split pipe 
 pipe not split previously needs split 
 merge should already have been done 
 Actual dsc count per stream dsc validation
Unsafe due to current pipe merge and split logic
  Some of the functions further below use the FPU, so we need to wrap this
  with DC_FP_START()DC_FP_END(). Use the same approach as for
  dcn20_validate_bandwidth in dcn20_resource.c.
 Copy dcn2_1_soc.clock_limits to clock_limits to avoid copying over null states later 
 loop backwards
 clk_table[1] is reserved for min DF PState.  skip here to fill in later. 
 fill in min DF PState 
 duplicate last level 
 RV1 support max 4 pipes 
 align to our worst case block width 
pool->base.res_cap = &res_cap_nv10_FPGA_2pipe_dsc;
	
	   Resource + asic cap harcoding                
 max pipe num for ASIC before check pipe fuses 
1.4 wa applied by default
 Color pipeline capabilities 
 no OGAM ROM on DCN2
 Init the vm_helper
	
	   Create resources                             
 todo: not reuse phy_pll registers 
 mem input -> ipp -> dpp -> opp -> TG 
		 if pipe is disabled, skip instance of HW pipe,
		  i.e, skip ASIC register instance
  Copyright 2016 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 Temporary read settings, future will get values from kmd directly 
 work around for Renoir s0i3, if register is programmed, bypass golden init.
 If user hotplug a HDMI monitor while in monitor off,
  OS will do a mode set (with output timing) but keep output off.
  In this case DAL will ask vbios to power up the pll in the PHY.
  If user unplug the monitor (while we are on monitor off) or
  system attempt to enter modern standby (which we will disable PLL),
  PHY will hang on the next mode set attempt.
  if enable PLL follow by disable PLL (without executing lane enabledisable),
  RDPCS_PHY_DP_MPLLB_STATE remains 1,
  which indicate that PLL disable attempt actually didn't go through.
  As a workaround, insert PHY lane enabledisable before PLL disable.
 Copyright 2018 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  In DCN2.1, the non-double buffered version of the following 4 DLG registers are used in RTL.
  As a result, if SW updates any of these registers during a mode change,
  the current frame before the mode change will use the new value right away
  and can lead to generating incorrect request deadlines and incorrect TTUQoS behavior.
  REFCYC_PER_VM_GROUP_FLIP[22:0]
  REFCYC_PER_VM_GROUP_VBLANK[22:0]
  REFCYC_PER_VM_REQ_FLIP[22:0]
  REFCYC_PER_VM_REQ_VBLANK[22:0]
  REFCYC_PER_VM__FLIP affects the deadline of the VM requests generated
  when flipping to a new surface
  REFCYC_PER_VM__VBLANK affects the deadline of the VM requests generated
  during prefetch  period of a frame. The prefetch starts at a pre-determined
  number of lines before the display active per frame
  DCN may underflow due to incorrectly programming these registers
  during VM stage of prefetchiflip. First lines of display active
  or a sub-region of active using a new surface will be corrupted
  until the VM data returns at flipmode change transitions
  Work around:
  workaround is always opt to use the more aggressive settings.
  On any mode switch, if the new reg values are smaller than the current values,
  then update the regs with the new values.
  Link to the ticket: http:ontrack-internal.amd.combrowseDEDCN21-142
	 otg is locked when this func is called. Register are double buffered.
	  disable the requestors is not needed
for stereo
 DC supports NV12 only at the moment 
 The format of highlow are 48:18 of the 48 bit addr
 Requester - Per hubp 
 DLG - Per hubp 
 DLG - Per lumachroma 
 TTU - per hubp 
 TTU - per lumachroma 
 Assumed surf0 is luma and 1 is chroma 
 Host VM deadline regs 
 TODO: remove after performance is stable.
 TODO: remove after performance is stable.
 TODO: remove after performance is stable.
 TODO: remove after performance is stable.
 DEDCN21-133: Inconsistent row starting line for flip between DPTE and Meta
 This is a chicken bit to enable the ECO fix.
hubp[i].HUBPREQ_DEBUG.HUBPREQ_DEBUG[26] = 1;
 Copyright 2018 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
Init DCHVM block
Poll until RIOMMU_ACTIVE = 1
Reflect the power status of DCHUBBUB
Start rIOMMU prefetching
 Enable dynamic clock gating
Poll until HOSTVM_PREFETCH_DONE = 1
Note: hack
 Init VMID 0 based on PA config
 Repeat for water mark set A, B, C and D. 
 clock state A 
 determine the transfer time for a quantity of data for a particular requestor.
 clock state B 
 determine the transfer time for a quantity of data for a particular requestor.
 clock state C 
 determine the transfer time for a quantity of data for a particular requestor.
 clock state D 
 determine the transfer time for a quantity of data for a particular requestor.
 clock state A 
 clock state B 
 clock state C 
 clock state D 
 clock state A 
 clock state B 
 clock state C 
 clock state D 
	
	  The DCHub arbiter has a mechanism to dynamically rate limit the DCHub request stream to the fabric.
	  If the memory controller is fully utilized and the DCHub requestors are
	  well ahead of their amortized schedule, then it is safe to prevent the next winner
	  from being committed and sent to the fabric.
	  The utilization of the memory controller is approximated by ensuring that
	  the number of outstanding requests is greater than a threshold specified
	  by the ARB_MIN_REQ_OUTSTANDING. To determine that the DCHub requestors are well ahead of the amortized schedule,
	  the slack of the next winner is compared with the ARB_SAT_LEVEL in DLG RefClk cycles.
	 
	  TODO: Revisit request limit after figure out right number. request limit for Renoir isn't decided yet, set maximum value (0x1FF)
	  to turn off it for now.
 164KB for DCN2.0 
  Copyright 2019 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  @brief
  Trigger Source Select
  ASIC-dependent, actual values for register programming
	 This register resides in DP back end block;
	 This register resides in DP back end block;
	 This register resides in DP back end block;
	 This register resides in DP back end block;
	 This register resides in DP back end block;
 Disable PHY Bypass mode to setup the test pattern 
	 For 10-bit PRBS or debug symbols
 Enable debug symbols on the lanes 
 Disable PRBS mode 
 Program debug symbols to be output 
 Enable phy bypass mode to enable the test pattern 
	 This register resides in DP back end block;
 invalid source select DIG
 Write Training Pattern 
 Set HW Register Training Complete to false 
 Disable PHY Bypass mode to output Training Pattern 
 Disable PRBS mode 
 if psp set panel mode, dal should be program it 
 Disable PHY Bypass mode to setup the test pattern 
 program correct panel mode
 A PRBS23 pattern is used for most DP electrical measurements. 
 Enable PRBS symbols on the lanes 
 For PRBS23 Set bit DPHY_PRBS_SEL=1 and Set bit DPHY_PRBS_EN=1 
 Enable phy bypass mode to enable the test pattern 
 Disable PHY Bypass mode to setup the test pattern 
 A PRBS7 pattern is used for most DP electrical measurements. 
 Enable PRBS symbols on the lanes 
 For PRBS7 Set bit DPHY_PRBS_SEL=0 and Set bit DPHY_PRBS_EN=1 
 Enable phy bypass mode to enable the test pattern 
 Disable PHY Bypass mode to setup the test pattern 
 Enable debug symbols on the lanes 
 Enable PHY bypass mode to enable the test pattern 
 TODO is it really needed ? 
 Program 80 bit custom pattern 
 Enable phy bypass mode to enable the test pattern 
	 previously there is a register DP_HBR2_EYE_PATTERN
	  that is enabled to get the pattern.
	  But it does not work with the latest spec change,
	  so we are programming the following registers manually.
	 
	  The following settings have been confirmed
 Disable PHY Bypass mode to setup the test pattern 
 Setup DIG encoder in DP SST mode 
 ensure normal panel mode. 
	 no vbid after BS (SR)
	  DP_LINK_FRAMING_CNTL changed history Sandra Liu
 swap every BS with SR 
 select cp2520 patterns 
 pre-DCE11 can only generate CP2520 pattern 2 
 set link training complete 
 disable video stream 
 Disable PHY Bypass mode to setup the test pattern 
	 previously there is a register DP_HBR2_EYE_PATTERN
	  that is enabled to get the pattern.
	  But it does not work with the latest spec change,
	  so we are programming the following registers manually.
	 
	  The following settings have been confirmed
 Disable PHY Bypass mode to setup the test pattern 
 Setup DIG encoder in DP SST mode 
 ensure normal panel mode. 
	 no vbid after BS (SR)
	  DP_LINK_FRAMING_CNTL changed history Sandra Liu
 DCE6 has no DP_DPHY_SCRAM_CNTL register, skip swap BS with SR 
 select cp2520 patterns 
 pre-DCE11 can only generate CP2520 pattern 2 
 set link training complete 
 disable video stream 
 Disable PHY Bypass mode to setup the test pattern 
 program correct panel mode 
	 restore LINK_FRAMING_CNTL and DPHY_SCRAMBLER_BS_COUNT
	  in case we were doing HBR2 compliance pattern before
 set link training complete 
 Disable PHY Bypass mode to setup the test pattern 
 Disable PRBS mode 
 program correct panel mode 
	 restore LINK_FRAMING_CNTL
	  in case we were doing HBR2 compliance pattern before
 DCE6 has no DP_DPHY_SCRAM_CNTL register, skip DPHY_SCRAMBLER_BS_COUNT restore 
 set link training complete 
 Disable PHY Bypass mode to setup the test pattern 
 Disable PRBS mode 
 return value is bit-vector 
 set number of lanes 
 setup scrambler 
 set number of lanes 
 DCE6 has no DP_DPHY_SCRAM_CNTL register, skip setup scrambler 
 14 window (the maximum allowed) 
		In DCE 11, we are able to pre-program a Force SR register
		  to be able to trigger SR symbol after 5 idle patterns
		  transmitted. Upon PSR Exit, DMCU can trigger
		  DPHY_LOAD_BS_COUNT_START = 1. Upon writing 1 to
		  DPHY_LOAD_BS_COUNT_START and the internal counter
		  reaches DPHY_LOAD_BS_COUNT, the next BS symbol will be
		  replaced by SR symbol once.
 reset training pattern 
 reset training complete 
 reset panel mode 
 Associate HPD with DIG_BE 
	 This handles the case of HDMI downgrade to DVI we don't want to
	  we don't want to cap the pixel clock if the DDI is not DVI.
 DVI only support RGB pixel encoding 
connect DVI via adpater's HDMI connector
 DVI supports 68bpp single-link and 1016bpp dual-link 
 DCE11 HW does not support 420 
	 set the flag to indicate whether driver poll the I2C data pin
	  while doing the DP sink detect
	if (dal_adapter_service_is_feature_supported(as,
		FEATURE_DP_SINK_DETECT_POLL_DATA_PIN))
		enc110->base.features.flags.bits.
	 For DCE 8.0 and 8.1, by design, UNIPHY is hardwired to DIG_BE.
	  SW always assign DIG_FE 1:1 mapped to DIG_FE for non-MST UNIPHY.
	  SW assign DIG_FE to non-MST UNIPHY first and MST last. So prefer
	  DIG is per UNIPHY and used by SST DP, eDP, HDMI, DVI and LVDS.
	  Prefer DIG assignment is decided by board design.
	  For DCE 8.0, there are only max 6 UNIPHYs, we assume board design
	  and VBIOS will filter out 7 UNIPHY for DCE 8.0.
	  By this, adding DIGG should not hurt DCE 8.0.
	  This will let DCE 8.1 share DCE 8.0 as much as possible
 default to one to mirror Windows behavior 
 Override features with DCE-specific values 
	 reinitialize HPD.
	  hpd_initialize() will pass DIG_FE id to HW context.
	  All other routine within HW context will use fe_engine_offset
	  as DIG_FE id even caller pass DIG_FE id.
 DP SST 
 LVDS 
 TMDS-DVI 
 TMDS-HDMI 
 DP MST 
 invalid mode ! 
 TODO: still need depth or just pass in adjusted pixel clock? 
 Enable the PHY 
 TODO: still need depth or just pass in adjusted pixel clock? 
 Enable the PHY 
 enables DP PHY output 
 Enable the PHY 
	 number_of_lanes is used for pixel clock adjust,
	  but it's not passed to asic_control.
	  We need to set number of lanes manually.
 TODO: check if undefined works 
 enables DP PHY output in MST mode 
 Enable the PHY 
	 number_of_lanes is used for pixel clock adjust,
	  but it's not passed to asic_control.
	  We need to set number of lanes manually.
 TODO: check if undefined works 
 enables DP PHY output 
 Enable the PHY 
	 number_of_lanes is used for pixel clock adjust,
	  but it's not passed to asic_control.
	  We need to set number of lanes manually.
 TODO: check if undefined works 
 enables DP PHY output in MST mode 
 Enable the PHY 
	 number_of_lanes is used for pixel clock adjust,
	  but it's not passed to asic_control.
	  We need to set number of lanes manually.
 TODO: check if undefined works 
  @brief
  Disable transmitter and its encoder
 OF_SKIP_POWER_DOWN_INACTIVE_ENCODER 
	 Power-down RX and disable GPU PHY should be paired.
	  Disabling PHY without powering down RX may cause
	 There is a case for the DP active dongles
	  where we want to disable the PHY but keep RX powered,
	  for those we need to ignore DP Sink interrupt
	  by checking lane count that has been set
 disable transmitter 
 disable encoder 
 translate lane settings 
 post cursor 2 setting only applies to HBR2 link rate 
			 this is passed to VBIOS
 call VBIOS table to set voltage swing and pre-emphasis 
 set DP PHY test and training patterns 
 invalid phy pattern 
 set DP PHY test and training patterns 
 invalid phy pattern 
 programs DP MST VC payload allocation 
 For CZ, there are only 3 pipes. So Virtual channel is up 3.
	 --- Set MSE Stream Attribute -
	  Setup VC Payload Table on Tx Side,
	  Issue allocation change trigger
 we should clean-up table each time 
 --- wait for transaction finish 
	 send allocation change trigger (ACT) ?
	  this step first sends the ACT,
	  then double buffers the SAT into the hardware
	 DP_MSE_SAT_UPDATE:
	  0 - No Action
	  1 - Update SAT with trigger
	 wait for update to complete
	  (i.e. DP_MSE_SAT_UPDATE field is reset to 0)
	  then wait for the transmission
	  of at least 16 MTP headers on immediate local link.
	  i.e. DP_MSE_16_MTP_KEEPOUT field (read only) is reset to 0
	  a value of 1 indicates that DP MST mode
	  is in the 16 MTP keepout region after a VC has been added.
	  MST stream bandwidth (VC rate) can be configured
 bit field DP_MSE_SAT_UPDATE is set to 1 already 
 Set Default link settings 
 Higher link settings based on feature supported 
	 set the flag to indicate whether driver poll the I2C data pin
	  while doing the DP sink detect
	if (dal_adapter_service_is_feature_supported(as,
		FEATURE_DP_SINK_DETECT_POLL_DATA_PIN))
		enc110->base.features.flags.bits.
	 For DCE 8.0 and 8.1, by design, UNIPHY is hardwired to DIG_BE.
	  SW always assign DIG_FE 1:1 mapped to DIG_FE for non-MST UNIPHY.
	  SW assign DIG_FE to non-MST UNIPHY first and MST last. So prefer
	  DIG is per UNIPHY and used by SST DP, eDP, HDMI, DVI and LVDS.
	  Prefer DIG assignment is decided by board design.
	  For DCE 8.0, there are only max 6 UNIPHYs, we assume board design
	  and VBIOS will filter out 7 UNIPHY for DCE 8.0.
	  By this, adding DIGG should not hurt DCE 8.0.
	  This will let DCE 8.1 share DCE 8.0 as much as possible
 default to one to mirror Windows behavior 
 Override features with DCE-specific values 
  Copyright 2012-16 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
=========================================
 <num_taps>    = 2
 <num_phases>  = 16
 <scale_ratio> = 0.833333 (inputoutput)
 <sharpness>   = 0
 <CoefType>    = ModifiedLanczos
 <CoefQuant>   = s1.10
 <CoefOut>     = s1.12
=========================================
=========================================
 <num_taps>    = 3
 <num_phases>  = 16
 <scale_ratio> = 0.83333 (inputoutput)
 <sharpness>   = 0
 <CoefType>    = ModifiedLanczos
 <CoefQuant>   = 1.10
 <CoefOut>     = 1.12
=========================================
=========================================
 <num_taps>    = 3
 <num_phases>  = 16
 <scale_ratio> = 1.16666 (inputoutput)
 <sharpness>   = 0
 <CoefType>    = ModifiedLanczos
 <CoefQuant>   = 1.10
 <CoefOut>     = 1.12
=========================================
=========================================
 <num_taps>    = 3
 <num_phases>  = 16
 <scale_ratio> = 1.49999 (inputoutput)
 <sharpness>   = 0
 <CoefType>    = ModifiedLanczos
 <CoefQuant>   = 1.10
 <CoefOut>     = 1.12
=========================================
=========================================
 <num_taps>    = 3
 <num_phases>  = 16
 <scale_ratio> = 1.83332 (inputoutput)
 <sharpness>   = 0
 <CoefType>    = ModifiedLanczos
 <CoefQuant>   = 1.10
 <CoefOut>     = 1.12
=========================================
=========================================
 <num_taps>    = 4
 <num_phases>  = 16
 <scale_ratio> = 0.83333 (inputoutput)
 <sharpness>   = 0
 <CoefType>    = ModifiedLanczos
 <CoefQuant>   = 1.10
 <CoefOut>     = 1.12
=========================================
=========================================
 <num_taps>    = 4
 <num_phases>  = 16
 <scale_ratio> = 1.16666 (inputoutput)
 <sharpness>   = 0
 <CoefType>    = ModifiedLanczos
 <CoefQuant>   = 1.10
 <CoefOut>     = 1.12
=========================================
=========================================
 <num_taps>    = 4
 <num_phases>  = 16
 <scale_ratio> = 1.49999 (inputoutput)
 <sharpness>   = 0
 <CoefType>    = ModifiedLanczos
 <CoefQuant>   = 1.10
 <CoefOut>     = 1.12
=========================================
=========================================
 <num_taps>    = 4
 <num_phases>  = 16
 <scale_ratio> = 1.83332 (inputoutput)
 <sharpness>   = 0
 <CoefType>    = ModifiedLanczos
 <CoefQuant>   = 1.10
 <CoefOut>     = 1.12
=========================================
=========================================
 <num_taps>    = 2
 <num_phases>  = 64
 <scale_ratio> = 0.833333 (inputoutput)
 <sharpness>   = 0
 <CoefType> = ModifiedLanczos
 <CoefQuant> = s1.10
 <CoefOut> = s1.12
=========================================
=========================================
 <num_taps>    = 3
 <num_phases>  = 64
 <scale_ratio> = 0.83333 (inputoutput)
 <sharpness>   = 0
 <CoefType>    = ModifiedLanczos
 <CoefQuant>   = 1.10
 <CoefOut>     = 1.12
=========================================
=========================================
 <num_taps>    = 3
 <num_phases>  = 64
 <scale_ratio> = 1.16666 (inputoutput)
 <sharpness>   = 0
 <CoefType>    = ModifiedLanczos
 <CoefQuant>   = 1.10
 <CoefOut>     = 1.12
=========================================
=========================================
 <num_taps>    = 3
 <num_phases>  = 64
 <scale_ratio> = 1.49999 (inputoutput)
 <sharpness>   = 0
 <CoefType>    = ModifiedLanczos
 <CoefQuant>   = 1.10
 <CoefOut>     = 1.12
=========================================
=========================================
 <num_taps>    = 3
 <num_phases>  = 64
 <scale_ratio> = 1.83332 (inputoutput)
 <sharpness>   = 0
 <CoefType>    = ModifiedLanczos
 <CoefQuant>   = 1.10
 <CoefOut>     = 1.12
=========================================
=========================================
 <num_taps>    = 4
 <num_phases>  = 64
 <scale_ratio> = 0.83333 (inputoutput)
 <sharpness>   = 0
 <CoefType>    = ModifiedLanczos
 <CoefQuant>   = 1.10
 <CoefOut>     = 1.12
=========================================
=========================================
 <num_taps>    = 4
 <num_phases>  = 64
 <scale_ratio> = 1.16666 (inputoutput)
 <sharpness>   = 0
 <CoefType>    = ModifiedLanczos
 <CoefQuant>   = 1.10
 <CoefOut>     = 1.12
=========================================
=========================================
 <num_taps>    = 4
 <num_phases>  = 64
 <scale_ratio> = 1.49999 (inputoutput)
 <sharpness>   = 0
 <CoefType>    = ModifiedLanczos
 <CoefQuant>   = 1.10
 <CoefOut>     = 1.12
=========================================
=========================================
 <num_taps>    = 4
 <num_phases>  = 64
 <scale_ratio> = 1.83332 (inputoutput)
 <sharpness>   = 0
 <CoefType>    = ModifiedLanczos
 <CoefQuant>   = 1.10
 <CoefOut>     = 1.12
=========================================
=========================================
 <num_taps>    = 5
 <num_phases>  = 64
 <scale_ratio> = 0.83333 (inputoutput)
 <sharpness>   = 0
 <CoefType>    = ModifiedLanczos
 <CoefQuant>   = 1.10
 <CoefOut>     = 1.12
=========================================
=========================================
 <num_taps>    = 5
 <num_phases>  = 64
 <scale_ratio> = 1.16666 (inputoutput)
 <sharpness>   = 0
 <CoefType>    = ModifiedLanczos
 <CoefQuant>   = 1.10
 <CoefOut>     = 1.12
=========================================
=========================================
 <num_taps>    = 5
 <num_phases>  = 64
 <scale_ratio> = 1.49999 (inputoutput)
 <sharpness>   = 0
 <CoefType>    = ModifiedLanczos
 <CoefQuant>   = 1.10
 <CoefOut>     = 1.12
=========================================
=========================================
 <num_taps>    = 5
 <num_phases>  = 64
 <scale_ratio> = 1.83332 (inputoutput)
 <sharpness>   = 0
 <CoefType>    = ModifiedLanczos
 <CoefQuant>   = 1.10
 <CoefOut>     = 1.12
=========================================
=========================================
 <num_taps>    = 6
 <num_phases>  = 64
 <scale_ratio> = 0.83333 (inputoutput)
 <sharpness>   = 0
 <CoefType>    = ModifiedLanczos
 <CoefQuant>   = 1.10
 <CoefOut>     = 1.12
=========================================
=========================================
 <num_taps>    = 6
 <num_phases>  = 64
 <scale_ratio> = 1.16666 (inputoutput)
 <sharpness>   = 0
 <CoefType>    = ModifiedLanczos
 <CoefQuant>   = 1.10
 <CoefOut>     = 1.12
=========================================
=========================================
 <num_taps>    = 6
 <num_phases>  = 64
 <scale_ratio> = 1.49999 (inputoutput)
 <sharpness>   = 0
 <CoefType>    = ModifiedLanczos
 <CoefQuant>   = 1.10
 <CoefOut>     = 1.12
=========================================
=========================================
 <num_taps>    = 6
 <num_phases>  = 64
 <scale_ratio> = 1.83332 (inputoutput)
 <sharpness>   = 0
 <CoefType>    = ModifiedLanczos
 <CoefQuant>   = 1.10
 <CoefOut>     = 1.12
=========================================
=========================================
 <num_taps>    = 7
 <num_phases>  = 64
 <scale_ratio> = 0.83333 (inputoutput)
 <sharpness>   = 0
 <CoefType>    = ModifiedLanczos
 <CoefQuant>   = 1.10
 <CoefOut>     = 1.12
=========================================
=========================================
 <num_taps>    = 7
 <num_phases>  = 64
 <scale_ratio> = 1.16666 (inputoutput)
 <sharpness>   = 0
 <CoefType>    = ModifiedLanczos
 <CoefQuant>   = 1.10
 <CoefOut>     = 1.12
=========================================
=========================================
 <num_taps>    = 7
 <num_phases>  = 64
 <scale_ratio> = 1.49999 (inputoutput)
 <sharpness>   = 0
 <CoefType>    = ModifiedLanczos
 <CoefQuant>   = 1.10
 <CoefOut>     = 1.12
=========================================
=========================================
 <num_taps>    = 7
 <num_phases>  = 64
 <scale_ratio> = 1.83332 (inputoutput)
 <sharpness>   = 0
 <CoefType>    = ModifiedLanczos
 <CoefQuant>   = 1.10
 <CoefOut>     = 1.12
=========================================
=========================================
 <num_taps>    = 8
 <num_phases>  = 64
 <scale_ratio> = 0.83333 (inputoutput)
 <sharpness>   = 0
 <CoefType>    = ModifiedLanczos
 <CoefQuant>   = 1.10
 <CoefOut>     = 1.12
=========================================
=========================================
 <num_taps>    = 8
 <num_phases>  = 64
 <scale_ratio> = 1.16666 (inputoutput)
 <sharpness>   = 0
 <CoefType>    = ModifiedLanczos
 <CoefQuant>   = 1.10
 <CoefOut>     = 1.12
=========================================
=========================================
 <num_taps>    = 8
 <num_phases>  = 64
 <scale_ratio> = 1.49999 (inputoutput)
 <sharpness>   = 0
 <CoefType>    = ModifiedLanczos
 <CoefQuant>   = 1.10
 <CoefOut>     = 1.12
=========================================
=========================================
 <num_taps>    = 8
 <num_phases>  = 64
 <scale_ratio> = 1.83332 (inputoutput)
 <sharpness>   = 0
 <CoefType>    = ModifiedLanczos
 <CoefQuant>   = 1.10
 <CoefOut>     = 1.12
=========================================
  Copyright 2018 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 bits are transmitted serially, starting from MSB 
	 The display sends ACK by preventing the SDA from going high
	  after the SCL pulse we use to send our last data bit.
	  If the SDA goes high after that bit, it's a NACK
 read ACK bit 
	 The data bits are read from MSB to LSB;
	  bit is read while SCL is high
 read only whole byte 
	 send the acknowledge bit:
	  SDA low means ACK, SDA high means NACK
	 The I2C communications stop signal is:
	  the SDA going high from low, while the SCL is high.
	 The I2C communications start signal is:
	  the SDA going low from high, while the SCL is high.
 i2c_engine is busy by VBios, lets wait and retry 
 send sync (start  repeated start) 
 process payload 
 send stop if not 'mot' or operation failed 
  Copyright 2012-16 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 set ramping boundary 
 setDMCUParam_Pipe 
 notifyDMCUMsg 
 Check for max backlight condition
 Take MSB of fractional part since backlight is not max
 waitDMCUReadyForCmd 
 setDMCUParam_BL 
 write ramp 
 setDMCUParam_Cmd 
 notifyDMCUMsg 
 UpdateRequestedBacklightLevel 
 waitDMCUReadyForCmd 
	 return backlight in hardware format which is unsigned 17 bits, with
	  1 bit integer and 16 bit fractional
	 return backlight in hardware format which is unsigned 17 bits, with
	  1 bit integer and 16 bit fractional
 setDMCUParam_ABMLevel 
 notifyDMCUMsg 
  Copyright 2012-16 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 PSR related commands 
 Enable or disable Fractional PWM 
 PSP FW version
Register access policy version
 Do nothing
 Enable write access to IRAM 
 Disable write access to IRAM to allow dynamic sleep state 
 Enable write access to IRAM 
 Write address to IRAM_RD_ADDR in DMCU_IRAM_RD_CTRL 
 Read data from IRAM_RD_DATA in DMCU_IRAM_RD_DATA
	 Disable write access to IRAM after finished using IRAM
	  in order to allow dynamic sleep state
 waitDMCUReadyForCmd 
 setDMCUParam_Cmd 
 notifyDMCUMsg 
 Enable static screen interrupts for PSR supported display 
 Disable the interrupt coming from other displays. 
 Driver uses case 1 for unconfigured 
		 CZNL only has 4 CRTC!!
		  really valid.
		  There is no interrupt enable mask for these instances.
		 CZNL only has 4 CRTC!!
		  These are here because they are defined in HW regspec,
		  but not really valid. There is no interrupt enable mask
		  for these instances.
 waitDMCUReadyForCmd 
 setDMCUParam_PSRHostConfigData 
 setDMCUParam_Cmd 
 notifyDMCUMsg 
 microcontroller is not running 
 DMCU is not running 
 DMCU is not running 
 waitDMCUReadyForCmd 
 setDMCUParam_Cmd 
 notifyDMCUMsg 
 Enable write access to IRAM 
 Write address to IRAM_RD_ADDR and read from DATA register 
 Disable write access to IRAM to allow dynamic sleep state 
 Wait until microcontroller is ready to process interrupt 
 Set PWM fractional enabledisable 
 Set command to enable or disable fractional PWM microcontroller 
 Notify microcontroller of new command 
 Ensure command has been executed before continuing 
  5 4 3 2 1 0
  F E D C B A - bit 0 is A, bit 5 is F
	  Definition of DC_DMCU_SCRATCH
	   0 : firmare not loaded
	   1 : PSP load DMCU FW but not initialized
	   2 : Firmware already initialized
 Wait until microcontroller is ready to process interrupt 
 Set initialized ramping boundary value 
 Set backlight ramping stepsize 
 Set command to initialize microcontroller 
 Notify microcontroller of new command 
 Ensure command has been executed before continuing 
 Check state is initialized
 If microcontroller is not in running state, fail
 Retrieve and cache the DMCU firmware version. 
 Initialize DMCU to use fractional PWM or not 
 If microcontroller is not running, do nothing 
 Enable write access to IRAM 
 Disable write access to IRAM to allow dynamic sleep state 
 Wait until microcontroller is ready to process interrupt 
 Set command to signal IRAM is loaded and to initialize IRAM 
 Notify microcontroller of new command 
 Ensure command has been executed before continuing 
 If microcontroller is not running, do nothing 
 Enable write access to IRAM 
 Write address to IRAM_RD_ADDR in DMCU_IRAM_RD_CTRL 
 Read data from IRAM_RD_DATA in DMCU_IRAM_RD_DATA
	 Disable write access to IRAM after finished using IRAM
	  in order to allow dynamic sleep state
 If microcontroller is not running, do nothing 
 waitDMCUReadyForCmd 
 setDMCUParam_Cmd 
 notifyDMCUMsg 
	 Below loops 1000 x 500us = 500 ms.
	   Exit PSR may need to wait 1-2 frames to power up. Timeout after at
	   least a few frames. Should never hit the max retry assert below.
 assert if max retry hit 
 If microcontroller is not running, do nothing 
 Enable static screen interrupts for PSR supported display 
 Disable the interrupt coming from other displays. 
 Driver uses case 1 for unconfigured 
		 CZNL only has 4 CRTC!!
		  really valid.
		  There is no interrupt enable mask for these instances.
		 CZNL only has 4 CRTC!!
		  These are here because they are defined in HW regspec,
		  but not really valid. There is no interrupt enable mask
		  for these instances.
 waitDMCUReadyForCmd 
 setDMCUParam_PSRHostConfigData 
 setDMCUParam_Cmd 
 notifyDMCUMsg 
 waitDMCUReadyForCmd 
 If microcontroller is not running, do nothing 
 waitDMCUReadyForCmd 
 setDMCUParam_Cmd 
 notifyDMCUMsg 
 microcontroller is not running 
 If microcontroller is not running, do nothing 
 waitDMCUReadyForCmd 
 setDMCUParam_Cmd 
 notifyDMCUMsg 
 waitDMCUReadyForCmd 
 If microcontroller is not running, do nothing 
 waitDMCUReadyForCmd 
 setDMCUParam_Cmd 
 notifyDMCUMsg 
 waitDMCUReadyForCmd 
 If microcontroller is not running, do nothing 
 waitDMCUReadyForCmd 
 setDMCUParam_Cmd 
 notifyDMCUMsg 
 waitDMCUReadyForCmd 
 If microcontroller is not running, do nothing 
 clear SCP interrupt 
 nack 
(CONFIG_DRM_AMD_DC_DCN)
 If microcontroller is not running, do nothing 
 waitDMCUReadyForCmd 
 build up nitification data 
 setDMCUParam_Cmd 
 notifyDMCUMsg 
 If microcontroller is not running, do nothing 
 waitDMCUReadyForCmd 
 build up nitification data 
 setDMCUParam_Cmd 
 notifyDMCUMsg 
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  calculate_fb_and_fractional_fb_divider - Calculates feedback and fractional
                                           feedback dividers values
  @calc_pll_cs:	    Pointer to clock source information
  @target_pix_clk_100hz:   Desired frequency in 100 Hz
  @ref_divider:            Reference divider (already known)
  @post_divider:           Post Divider (already known)
  @feedback_divider_param: Pointer where to store
 			    calculated feedback divider value
  @fract_feedback_divider_param: Pointer where to store
 			    calculated fract feedback divider value
  return:
  It fills the locations pointed by feedback_divider_param
 					and fract_feedback_divider_param
  It returns	- true if feedback divider not 0
 		- false should never happen)
 additional factor, since we divide by 10 afterwards 
Round to the number of precision
  The following code replace the old code (ullfeedbackDivider + 5)10
  for example if the difference between the number
  of fractional feedback decimal point and the fractional FB Divider precision
  calc_fb_divider_checking_tolerance - Calculates Feedback and
                                       Fractional Feedback divider values
 		                        for passed Reference and Post divider,
                                       checking for tolerance.
  @calc_pll_cs:	Pointer to clock source information
  @pll_settings:	Pointer to PLL settings
  @ref_divider:	Reference divider (already known)
  @post_divider:	Post Divider (already known)
  @tolerance:		Tolerance for Calculated Pixel Clock to be within
  return:
   It fills the PLLSettings structure with PLL Dividers values
   if calculated values are within required tolerance
   It returns	- true if error is within tolerance
 		- false if error is not within tolerance
Actual calculated value
found good values
 This is err_tolerance  10000 = 0.0025 - acceptable error of 0.25%
 1) Find Post divider ranges 
 2) Find Reference divider ranges
  When SS is enabled, or for Display Port even without SS,
  pll_settings->referenceDivider is not zero.
  So calculate PPLL FB and fractional FB divider
 If some parameters are invalid we could have scenario when  "min">"max"
  which produced endless loop later.
  We should investigate why we get the wrong parameters.
  But to follow the similar logic when "adjustedPixelClock" is set to be 0
  it is better to return here than cause system hangwatchdog timeout later.
 3) Try to find PLL dividers given ranges
  starting with minimal error tolerance.
 x1.25
 x1.5
 x2.0
  Calculate PLL Dividers for given Clock Value.
  First will call VBIOS Adjust Exec table to check if requested Pixel clock
  will be Adjusted based on usage.
  Then it will calculate PLL Dividers for this Adjusted clock using preferred
  method (Maximum VCO frequency).
  \return
      Calculation error in units of 0.01%
	 Check if reference clock is external (not pciextalin)
	 HW Dce80 spec:
	 00 - PCIE_REFCLK, 01 - XTALIN,    02 - GENERICA,    03 - GENERICB
	 VBIOS by default enables DP SS (spread on IDCLK) for DCE 8.0 always
	  (we do not care any more from SI for some older DP Sink which
 Check VBIOS AdjustPixelClock Exec table 
		 Should never happen, ASSERT and fill up values to be able
 Calculate Dividers 
Calculate Dividers by HDMI object, no SS case or SS case 
Calculate Dividers by default object, no SS case or SS case 
 Calculate Dividers 
Call ASICControl to process ATOMBIOS Exec table
 compute SS_AMOUNT_FBDIV & SS_AMOUNT_NFRAC_SLIP & SS_AMOUNT_DSFRAC
 6 decimal point support in fractional feedback divider 
	spreadSpectrumPercentage is in the unit of .01%,
 compute SS_STEP_SIZE_DSFRAC 
 SS_STEP_SIZE_DSFRAC_DEC = Int(SS_STEP_SIZE  2 ^ 16  10)
 Pixel clock PLL has been programmed to generate desired pixel clock,
 TODO is it OK to return true not doing anything ??
	
	 24 bit mode: TMDS clock = 1.0 x pixel clock  (1:1)
	 30 bit mode: TMDS clock = 1.25 x pixel clock (5:4)
	 36 bit mode: TMDS clock = 1.5 x pixel clock  (3:2)
	 48 bit mode: TMDS clock = 2 x pixel clock    (2:1)
	
	 24 bit mode: TMDS clock = 1.0 x pixel clock  (1:1)
	 30 bit mode: TMDS clock = 1.25 x pixel clock (5:4)
	 36 bit mode: TMDS clock = 1.5 x pixel clock  (3:2)
	 48 bit mode: TMDS clock = 2 x pixel clock    (2:1)
	 First disable SS
	  ATOMBIOS will enable by default SS on PLL for DP,
	  do not disable it here
ATOMBIOS expects pixel rate adjusted by deep color ratio)
	 Enable SS
	  ATOMBIOS will enable by default SS for DP on PLL ( DP ID clock),
	  based on HW display PLL team, SS control settings should be programmed
	  during PLL Reset, but they do not have effect
 Resync deep color DTO 
 Set DTO values: phase = target clock, modulo = reference clock 
 Enable DTO 
	 First disable SS
	  ATOMBIOS will enable by default SS on PLL for DP,
	  do not disable it here
ATOMBIOS expects pixel rate adjusted by deep color ratio)
 Resync deep color DTO 
 If Pixel Clock is 0 it means Power Down Pll
Call ASICControl to process ATOMBIOS Exec table
			 NOTE: In case VBLANK syncronization is enabled, MODULO may
			  not be programmed equal to DPREFCLK
			 NOTE: There is agreement with VBIOS here that MODULO is
			  programmed equal to DPREFCLK, in which case PHASE will be
			  equivalent to pixel clock.
 this table is use to find 1.001 and 1.001 pixel rates from non-precise pixel rate 
 1.001 rates
25.2MHz   ->   25.17
59.4Mhz   ->   59.340
74.25Mhz  ->   74.1758
126Mhz    ->  125.87
148.5Mhz  ->  148.3516
168Mhz    ->  167.83
222.75Mhz ->  222.527
257.4Mhz  ->  257.1429
297Mhz    ->  296.7033
343.2Mhz  ->  342.857
396Mhz    ->  395.6
409.5Mhz  ->  409.091
445.5Mhz  ->  445.055
468Mhz    ->  467.5325
519.75Mhz ->  519.231
526.5Mhz  ->  525.974
546Mhz    ->  545.455
594Mhz    ->  593.4066
624Mhz    ->  623.377
693Mhz    ->  692.308
702Mhz    ->  701.2987
792Mhz    ->  791.209
891Mhz    ->  890.1099
1188Mhz   -> 1186.8131
 1.001 rates
27Mhz
54Mhz
108Mhz
		 NOTE: In case VBLANK syncronization is enabled,
		  we need to set modulo to default DPREFCLK first
		  dce112_program_pix_clk does not set default DPREFCLK
 For these signal types Driver to program DP_DTO without calling VBIOS Command table
 Set DTO values: phase = target clock, modulo = reference clock
 Set DTO values: phase = target clock, modulo = reference clock
 For other signal types(HDMI_TYPE_A, DVI) Driver still to call VBIOS Command table
 Adjust for HDMI Type A deep color 
 Constructor                           
		 for HDMI check SS percentage,
 invalid input, do nothing 
			 Keep previous precision from ATOMBIOS for these
			 in case new precision set by ATOMBIOS for these
			 (otherwise all code in DCE specific classes
			 for all previous ASICs would need
			 to be updated for SS calculations,
			 Audio SS compensation and DP DTO SS compensation
 structure normally used with PLL ranges from ATOMBIOS; DS on by default 
 when 0 use minInputPxlClkPLLFrequencyInKHz from firmwareInfo
 when 0 use maxInputPxlClkPLLFrequencyInKHz from firmwareInfo
numberOfFractFBDividerDecimalPoints
number of decimal point to round off for fractional feedback divider value
structure for HDMI, no SS or SS% <= 0.06% for 27 MHz Ref clock 
 when 0 use minInputPxlClkPLLFrequencyInKHz from firmwareInfo
 when 0 use maxInputPxlClkPLLFrequencyInKHz from firmwareInfo
numberOfFractFBDividerDecimalPoints
number of decimal point to round off for fractional feedback divider value
 PLL only from here on 
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
   Function: regamma_config_regions_and_segments
      build regamma curve by using predefined hw points
      uses interface parameters ,like EDID coeff.
  @param   : parameters   interface parameters
   @return void
   @note
   @see
 	set_truncation
 	1) set truncation depth: 0 for 18 bpp or 1 for 24 bpp
 	2) enable truncation
 	3) HW remove 12bit FMT support for DCE11 power saving reason.
Disable truncation
  8bpc trunc on YCbCr422
  10bpc trunc on YCbCr422
 on other format-to do 
Set truncation depth and Enable truncation
 	dce60_set_truncation
 	1) set truncation depth: 0 for 18 bpp or 1 for 24 bpp
 	2) enable truncation
 	3) HW remove 12bit FMT support for DCE11 power saving reason.
 DCE6 has no FMT_TRUNCATE_MODE bit in FMT_BIT_DEPTH_CONTROL reg 
Disable truncation
  8bpc trunc on YCbCr422
  10bpc trunc on YCbCr422
 on other format-to do 
Set truncation depth and Enable truncation
 	set_spatial_dither
 	1) set spatial dithering mode: pattern of seed
 	2) set spatial dithering depth: 0 for 18bpp or 1 for 24bpp
 	3) set random seed
 	4) set random mode
 		lfsr is reset every frame or not reset
 		RGB dithering method
 		0: RGB data are all dithered with x^28+x^3+1
 		1: R data is dithered with x^28+x^3+1
 		G data is dithered with x^28+X^9+1
 		B data is dithered with x^28+x^13+1
 		enable high pass filter or not
 	5) enable spatical dithering
Disable spatial (random) dithering
 only use FRAME_COUNTER_MAX if frameRandom == 1
	 Set seed for random values for
	  spatial dithering for R,G,B channels
	 FMT_OFFSET_R_Cr  31:16 0x0 Setting the zero
	  offset for the RCr channel, lower 4LSB
	  is forced to zeros. Typically set to 0
	  RGB and 0x80000 YCbCr.
	 FMT_OFFSET_G_Y   31:16 0x0 Setting the zero
	  offset for the GY  channel, lower 4LSB is
	  forced to zeros. Typically set to 0 RGB
	  and 0x80000 YCbCr.
	 FMT_OFFSET_B_Cb  31:16 0x0 Setting the zero
	  offset for the BCb channel, lower 4LSB is
	  forced to zeros. Typically set to 0 RGB and
	  0x80000 YCbCr.
	 Disable High pass filter
	  Reset only at startup
	  Set RGB data dithered with x^28+x^3+1
	 Set spatial dithering bit depth
	  Set spatial dithering mode
	  (default is Seed patterrn AAAA...)
	  Enable spatial dithering
 	SetTemporalDither (Frame Modulation)
 	1) set temporal dither depth
 	2) select pattern: from hard-coded pattern or programmable pattern
 	3) select optimized strips for BGR or RGB LCD sub-pixel
 	4) set s matrix
 	5) set t matrix
 	6) set grey level for 0.25, 0.5, 0.75
 	7) enable temporal dithering
Disable temporal (frame modulation) dithering first
 no 10bpc dither on DCE11
 Set temporal dithering depth
Select legacy pattern based on FRC and Temporal level
Set s matrix
Set t matrix
Select patterns for 0.25, 0.5 and 0.75 grey level
Enable bit reduction by temporal (frame modulation) dithering
 	Set Clamping
 	1) Set clamping format based on bpc - 0 for 6bpc (No clamping)
 		1 for 8 bpc
 		2 for 10 bpc
 		3 for 12 bpc
 		7 for programable
 	2) Enable clamp if Limited range requested
Set clamp control
set the defaults
 	Set Clamping for DCE6 parts
 	1) Set clamping format based on bpc - 0 for 6bpc (No clamping)
 		1 for 8 bpc
 		2 for 10 bpc
 		3 for 12 bpc
 		7 for programable
 	2) Enable clamp if Limited range requested
Set clamp control
 DCE6 does have FMT_CLAMP_COMPONENT_{R,G,B} registers 
 	set_pixel_encoding
 	Set Pixel Encoding
 		0: RGB 4:4:4 or YCbCr 4:4:4 or YOnly
 		1: YCbCr 4:2:2
 	dce60_set_pixel_encoding
 	DCE6 has no FMT_SUBSAMPLING_{MODE,ORDER} bits in FMT_CONTROL reg
 	Set Pixel Encoding
 		0: RGB 4:4:4 or YCbCr 4:4:4 or YOnly
 		1: YCbCr 4:2:2
 Program source select
 Use HW default source select for FMT_MEMORYx_CONTROL 
 Use that value for FMT_SRC_SELECT as well
 Turn on the memory 
00 - 10-bit -> 12-bit dynamic expansion
01 - 8-bit  -> 12-bit dynamic expansion
otherwise last two bits are zero
 clear previous phase lock status
 poll until FMT_420_PIXEL_PHASE_LOCKED become 1
	 dithering is affected by <CrtcSourceSelect>, hence should be
	 dithering is affected by <CrtcSourceSelect>, hence should be
 Constructor, Destructor               
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 AZALIA_F0_CODEC_ENDPOINT_INDEX  endpoint index  
 AZALIA_F0_CODEC_ENDPOINT_DATA  endpoint data  
 AZALIA_F0_CODEC_ENDPOINT_INDEX  endpoint index  
 AZALIA_F0_CODEC_ENDPOINT_DATA  endpoint data  
 pass through whole array 
				 format has multiply entries, choose one with
 format found, save it's index 
 return index 
For HDMI, calculate if specified sample rates can fit into a given timing 
 For two channels supported return whatever sink support,unmodified
 Based on HDMI spec 1.3 Table 7.5 
	 Also do some calculation for the available Audio Bandwidth for the
	  8 ch (i.e. for the Layout 1 => ch > 2)
based on HDMI spec 1.3 Table 7.5 
for Control Period 
	 Number of Audio Packets (multiplied by 10) per Line (for 8 ch number
	  of Audio samples per line multiplied by 10 - Layout 1)
Number of samples multiplied by 10, per second 
Number of Audio samples per second 
	 @todo do it after deep color is implemented
	  8xx - deep color bandwidth scaling
	  Extra bandwidth is avaliable in deep color bc link runs faster than
	  pixel rate. This has the effect of allowing more tmds characters to
	  be transmitted during blank
check limitation
 limit frequencies 
For DP SST, calculate if specified sample rates can fit into a given timing 
 do nothing 
For DP MST, calculate if specified sample rates can fit into a given timing 
 do nothing  
 exposenot expose HBR capability to Audio driver 
 set high bit rate audio capable
 set video latency in in ms2+1 
 set audio latency in in ms2+1 
 Speaker Allocation 
	
	uint32_t value;
	 LFE_PLAYBACK_LEVEL = LFEPBL
	  LFEPBL = 0 : Unknown or refer to other information
	  LFEPBL = 1 : 0dB playback
	  LFEPBL = 2 : +10dB playback
	  LFE_BL = 3 : Reserved
	 todo: according to reg spec LFE_PLAYBACK_LEVEL is read only.
 set audio for output signal 
  Audio Descriptors   
 pass through all formats 
 those are unsupported, skip programming 
 check if supported 
 adjust specific properties 
 fill audio format data 
 if 
 for 
 todo: this reg global.  why program global register? 
 check for 192khz8-Ch support for HBR requirements 
 Audio and Video Lipsync 
get display name string length 
	
	write the port ID:
	PORT_ID0 = display index
	PORT_ID1 = 16bit BDF
	(format MSB->LSB: 8bit Bus, 5bit Device, 3bit Function)
write the 18 char monitor string 
 todo: wall clk related functionality probably belong to clock_src.
 search pixel clock value for Azalia HDMI Audio 
	 audio_dto_phase= 24  10,000;
	 audio_dto_module = PCLKFrequency  10,000;
	 Reported dpDtoSourceClockInkhz value for
	  DCE8 already adjusted for SS, do not need any
	  adjustment here anymore
	audio_dto_phase = 24  10,000;
	audio_dto_module = dpDtoSourceClockInkhz  10,000;
		DTO0 Programming goal:
		-generate 24MHz, 128Fs from 24MHz
		-use DTO0 when an active HDMI port is connected
 calculate DTO settings 
		 On TNSI, Program DTO source select and DTO select before
		programming DTO modulo and DTO phase. These bits must be
		programmed first, otherwise there will be no HDMI audio at boot
		up. This is a HW sequence change (different from old ASICs).
		Caution when changing this programming sequence.
		HDMI enabled, using DTO0
 module 
 phase 
		DTO1 Programming goal:
		-generate 24MHz, 512Fs, 128Fs from 24MHz
		-default is to used DTO1, and switch to DTO0 when an audio
		master HDMI port is connected
		-use as default for DP
		 Program DTO select before programming DTO modulo and DTO
			 DCCG_AUDIO_DTO2_USE_512FBR_DTO, 1)
			  Select 512fs for DP TODO: web register definition
			  does not match register header file
			  DCE11 version it's commented out while DCE8 it's set to 1
 module 
 phase 
		DTO0 Programming goal:
		-generate 24MHz, 128Fs from 24MHz
		-use DTO0 when an active HDMI port is connected
 calculate DTO settings 
		 On TNSI, Program DTO source select and DTO select before
		programming DTO modulo and DTO phase. These bits must be
		programmed first, otherwise there will be no HDMI audio at boot
		up. This is a HW sequence change (different from old ASICs).
		Caution when changing this programming sequence.
		HDMI enabled, using DTO0
 module 
 phase 
		DTO1 Programming goal:
		-generate 24MHz, 128Fs from 24MHz (DCE6 does not support 512Fs)
		-default is to used DTO1, and switch to DTO0 when an audio
		master HDMI port is connected
		-use as default for DP
		 Program DTO select before programming DTO modulo and DTO
			 DCCG_AUDIO_DTO2_USE_512FBR_DTO, 1)
			  Cannot select 512fs for DP
			 
			  DCE6 has no DCCG_AUDIO_DTO2_USE_512FBR_DTO mask
 module 
 phase 
 DCE6 has no DCCG_AUDIO_DTO2_USE_512FBR_DTO mask in DCCG_AUDIO_DTO_SOURCE reg 
 initialize HW state 
	 we only need to program the following registers once, so we only do
	 Suport R5 - 32khz
	  Suport R6 - 44.1khz
	  Suport R7 - 48khz
disable clock gating before write to endpoint register
Keep alive bit to verify HW block in BU. 
  Copyright 2012-16 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 Max clock values for each state indexed by "enum clocks_state": 
 ClocksStateInvalid - should not be used 
 ClocksStateUltraLow - not expected to be used for DCE 8.0 
 ClocksStateLow 
 ClocksStateNominal 
 ClocksStatePerformance 
ClocksStateInvalid - should not be used
ClocksStateUltraLow - currently by HW design team not supposed to be used
ClocksStateLow
ClocksStateNominal
ClocksStatePerformance
ClocksStateInvalid - should not be used
ClocksStateUltraLow - currently by HW design team not supposed to be used
ClocksStateLow
ClocksStateNominal
ClocksStatePerformance
ClocksStateInvalid - should not be used
ClocksStateUltraLow - currently by HW design team not supposed to be used
ClocksStateLow
ClocksStateNominal
ClocksStatePerformance
 SW will adjust DP REF Clock average value for all purposes
  (DP DTO  DP Audio DTO and DP GTC)
 if clock is spread for all cases:
 -if SS enabled on DP Ref clock and HW de-spreading enabled with SW
 calculations for DS_INCRDS_MODULO (this is planned to be default case)
 -if SS enabled on DP Ref clock and HW de-spreading enabled with HW
 calculations (not planned to be used, but average clock should still
 be valid)
 -if SS enabled on DP Ref clock and HW de-spreading disabled
 (should not be case with CIK) then SW should program all rates
 generated according to average value (case as with previous ASICs)
 ASSERT DP Reference Clock source is from DFS
	 Read the mmDENTIST_DISPCLK_CNTL to get the currently
 Convert DENTIST_DPREFCLK_WDIVIDERto actual divider
 Calculate the current DFS clock, in kHz.
 unit: in_khz before mode set, get pixel clock from context. ASIC register
  may not be programmed yet
 do not check under lay 
		 raise clock state for HBR32 if required. Confirmed with HW DCEDPCS
		  logic for HBR3 still needs Nominal (0.8V) on VDDC rail
	 Iterate from highest supported to lowest valid state, and update
	  lowest RequiredState with the lowest state that satisfies
	  all required clocks
 set max clock state for high phyclock, invalid on exceeding display clock 
 Make sure requested clock isn't lower than minimum threshold
 Prepare to program display clock
 Cache the fixed display clock
	 from power down, we need mark the clock state as ClocksStateNominal
 Prepare to program display clock
 Make sure requested clock isn't lower than minimum threshold
	 from power down, we need mark the clock state as ClocksStateNominal
Program DP ref Clock
VBIOS will determine DPREFCLK frequency, so we don't set it
update the maximum display clock for each power state
		Do not allow bad VBIOSSBIOS to override with invalid values,
		 Based on VBIOS, VBIOS will keep entry for GPU PLL SS
		  even if SS not enabled and in that case
		  SSInfo.spreadSpectrumPercentage !=0 would be sign
		  that SS is enabled
				 TODO: Currently for DP Reference clock we
				  need only SS percentage for
		 Based on VBIOS, VBIOS will keep entry for DPREFCLK SS
		  even if SS not enabled and in that case
		  SSInfo.spreadSpectrumPercentage !=0 would be sign
		  that SS is enabled
				 Currently for DP Reference clock we
				  need only SS percentage for
  dce121_clock_patch_xgmi_ss_info() - Save XGMI spread spectrum info
  @clk_mgr: clock manager base structure
  Reads from VBIOS the XGMI spread spectrum info and saves it within
  the dce clock manager. This operation will overwrite the existing dprefclk
  SS values if the vBIOS query succeeds. Otherwise, it does nothing. It also
  sets the ->xgmi_enabled flag.
			 Currently for DP Reference clock we
			  need only SS percentage for
 only notify active stream 
 Round v_refresh
	
	  Some asics do not give us sclk levels, so we just report the actual
	  required sclk
	
	  even maximum level could not satisfy requirement, this
	  is unexpected at this stage, should have been caught at
	  validation time
	
	  As workaround for >4x4K lightup set dcfclock to min_engine_clock value.
	  This is not required for less than 5 displays,
	  thus don't request decfclk in dc to avoid impact
	  on power saving.
	 
 TODO: dce11.2
 TODO: is this still applicable?
TODO: WA for dal3 linux, investigate why this works 
 get max clock state from PPLIB 
TODO: WA for dal3 linux, investigate why this works 
 get max clock state from PPLIB 
TODO: WA for dal3 linux, investigate why this works 
 get max clock state from PPLIB 
TODO: WA for dal3 linux, investigate why this works 
		
		  When xGMI is enabled, the display clk needs to be adjusted
		  with the WAFL link's SS percentage.
  Copyright 2017 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 lock cursor registers 
 Flag passed in structure differentiates cursor enabledisable. 
 Update if it differs from cached state. 
 unlock cursor registers 
 Lock cursor registers 
 Program cursor control 
 unsupported 
	
	  Program cursor size -- NOTE: HW spec specifies that HW register
	  stores size as (height - 1, width - 1)
 Program cursor surface address 
	 SURFACE_ADDRESS_HIGH: Higher order bits (39:32) of hardware cursor
	  surface base address in byte. It is 4K byte aligned.
	  The correct way to program cursor surface address is to first write
	  to CUR_SURFACE_ADDRESS_HIGH, and then write to CUR_SURFACE_ADDRESS
 Unlock Cursor registers. 
 set to bypass mode first before change 
 If prescale is in use, then legacy lut should be bypassed 
 power on LUT memory 
 enable all 
 256 entry mode 
 LUT-256, unsigned, integer, new u0.12 format 
 start from index 0 
 power off LUT memory 
 bypass prescale, enable legacy LUT 
 DCE6 does not have CURSOR2_DEGAMMA_MODE bit in DEGAMMA_CONTROL reg 
 Constructor, Destructor               
  Copyright 2019 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
	 return backlight in hardware format which is unsigned 17 bits, with
	  1 bit integer and 16 bit fractional
	 return backlight in hardware format which is unsigned 17 bits, with
	  1 bit integer and 16 bit fractional
 TODO: Optimize by only reading back final 4 bytes
 Copy iramtable into cw7
 Fw will copy from cw7 to fw_state
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
	 It must not be 0, so we have to restore them
	  Bios bug wa - period resets to zero,
	  restoring to cache values which is always correct
		 TODO: Note: This should not really happen since VBIOS
		  should have initialized PWM registers on boot.
 Have driver take backlight control
 TakeBacklightControl(true)
 Enable the backlight output
 Unlock group 2 backlight registers
	
	  1. Find  16 bit backlight active duty cycle, where 0 <= backlight
	  active duty cycle <= backlight period
	 1.1 Apply bitmask for backlight period value based on value of BITCNT
 e.g. maskedPwmPeriod = 0x24 when bitCount is 6 
	 1.2 Calculate integer active duty cycle required upper 16 bits
	  contain integer component, lower 16 bits contain fractional component
	  of active duty cycle e.g. 0x21BDC0 = 0xEFF0  0x24
	 1.3 Calculate 16 bit active duty cycle from integer and fractional
	  components shift by bitCount then mask 16 bits and add rounding bit
	  from MSB of fraction e.g. 0x86F7 = ((0x21BDC0 >> 6) & 0xFFF) + 0
	
	  2. Program register with updated value
 2.1 Lock group 2 backlight registers 
 2.2 Write new active duty cycle
 2.3 Unlock group 2 backlight registers 
 3 Wait for pending bit to be cleared 
  Copyright 2018 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  Copyright 2019 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 do nothing 
  Convert dmcub psr state to dmcu psr state.
  Get PSR state from firmware.
 Send gpint command and wait for ack
 GPINT was executed, get response
 Return invalid state when GPINT times out
 Assert if max retry hit
  Set PSR version.
  EnableDisable PSR.
 Send header only
	 Below loops 1000 x 500us = 500 ms.
	   Exit PSR may need to wait 1-2 frames to power up. Timeout after at
	   least a few frames. Should never hit the max retry assert below.
 assert if max retry hit 
  Set PSR level.
  Set PSR power optimization flags.
  Setup PSR by programming phy registers and sending psr hw context values to firmware.
TODO: refactor for multi edp support
 First, set the psr version
 Program DP DPHY fast training registers
 Program DP_SEC_CNTL1 register to set transmission GPS0 line num and priority to high
 Hw insts
 Misc
  Send command to PSR to force static ENTER and ignore all state changes until exit
  Get PSR residency from firmware.
 Send gpint command and wait for ack 
  Construct PSR object.
  Allocate and initialize PSR object.
  Deallocate PSR object.
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
   andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
	 TODOFPGA Figure out a proper number for max_retries polling for lock
	  use 50 for now.
we need turn on clock before programming AFMT block
		 poll dig_update_lock is not locked -> asic internal signal
		  assume otg master lock will unlock it
		REG_WAIT(AFMT_VBI_PACKET_CONTROL, AFMT_GENERIC_LOCK_STATUS,
 check if HW reading GSP memory 
		 HW does is not reading GSP memory not reading too long ->
		  something wrong. clear GPS memory access and notify?
		  hw SW is writing to GSP memory
 choose which generic packet to use 
	 write generic packet header
	 write generic packet contents
	  (we never use last 4 bytes)
 force double-buffered packet update 
		 enable transmission of packet(s) -
 send packet(s) every frame 
 select line number to send packets on 
 choose which generic packet control to use 
 invalid HW packet index 
 setup stream encoder in dp mode 
 asynchronous mode 
full range
bt709
the input timing is in VESA spec format with Interlace flag =1
 set pixel encoding 
				 HW testing only, no use case yet.
				  Color depth of Y-only could be
		 Note: DP_MSA_MISC1 bit 7 is the indicator
		  of Y-only mode.
		  This bit is set in HW if register
 set color depth 
 set dynamic range and YCbCr range 
 bit7 = 0
full range
 bit3=1 
 bit7 = 0
limited range
 bit3=1, bit4=0 
 bit7 = 0
bt601
 bit2=0, bit1=1 
 bit2=1, bit1=0 
 bit3=1, bit4=1 
 bit7 = 0
bt709
 bit2=0, bit1=1 
 bit2=1, bit1=0 
limited range
 do nothing 
 MSA_MISC1 
	 dcn new register
	  dc_crtc_timing is vesa dmt struct. data from edid
		 calcuate from vesa timing parameters
		  h_active_start related to leading edge of sync
 start at begining of left border 
 start at begining of left border 
 HWDITH include border or overscan 
 setup stream encoder in hdmi mode 
 setup HDMI engine 
			 enable HDMI data scrambler
			  HDMI_CLOCK_CHANNEL_RATE_MORE_340M
			  Clock channel frequency is 14 of character rate.
 TODO: New feature for DCE11, still need to implement 
			 enable HDMI data scrambler
			  HDMI_CLOCK_CHANNEL_FREQ_EQUAL_TO_CHAR_RATE
			  Clock channel frequency is the same
			  as character rate
 following belongs to audio 
 setup stream encoder in dvi mode 
 setup stream encoder in LVDS mode 
 wait for update to be completed on the link 
 i.e. DP_MSE_RATE_UPDATE_PENDING field (read only) 
 is reset to 0 (not pending) 
we need turn on clock before programming AFMT block
 for bring up, disable dp double  TODO 
 stop generic packets 0 & 1 on HDMI 
 stop generic packets 2 & 3 on HDMI 
 stop generic packets 2 & 3 on HDMI 
 packetIndex 
 packetIndex 
 packetIndex 
	 enabledisable transmission of packet(s).
	  If enabled, packet transmission begins on the next frame
	 This bit is the master enable bit.
	 When enabling secondary stream engine,
	 this master bit must also be set.
	 This register shared with audio info frame.
	 Therefore we need to enable master bit
	 if at least on of the fields is not 0
 stop generic packets on DP 
	 this register shared with audio info frame.
	  therefore we need to keep master enabled
	 Note: For CZ, we are changing driver default to disable
	  stream deferred to next VBLANK. If results are positive, we
	  will make the same change to all DCE versions. There are a
	  handful of panels that cannot handle disable stream at
	  HBLANK and will result in a white line flash across the
stream not enabled
	 Specify the video stream disable point
	 Larger delay to wait until VBLANK - use max retry of
	  10us3000=30ms. This covers 16.6ms of typical 60 Hz mode +
	  a little more because we may not trust delay accuracy.
 disable DP stream 
	 the encoder stops sending the video stream
	  at the start of the vertical blanking.
	  Poll for DP_VID_STREAM_STATUS == 0
	 Tell the DP encoder to ignore timing from CRTC, must be done after
	  the polling. If we set DP_STEER_FIFO_RESET before DP stream blank is
	  complete, stream status will be stuck in video stream enabled state,
	  i.e. DP_VID_STREAM_STATUS stuck at 1.
 output video stream to link encoder 
		 M  N = Fstream  Flink
		 m_vid  n_vid = pixel rate  link rate
 enable auto measurement 
		 auto measurement need 1 full 0x8000 symbol cycle to kick in,
		  therefore program initial value for Mvid and Nvid
 set DIG_START to 0x1 to resync FIFO 
 switch DP encoder to CRTC data 
	 wait 100us for DIGDP logic to prime
	 (i.e. a few video lines)
	 the hardware would start sending video at the start of the next DP
	 frame (i.e. rising edge of the vblank).
	 NOTE: We used to program DP_VID_STREAM_DIS_DEFER = 2 here, but this
	 register has no effect on enable transition! HW always guarantees
	 VID_STREAM enable at start of next frame, and this is not
	 programmable
 25.2MHz1.001
 25.2MHz1.001
 25.2MHz
 27MHz 
 27MHz1.001
 27MHz1.001
 54MHz
 54MHz1.001
 74.25MHz1.001
 74.25MHz
 148.5MHz1.001
 148.5MHz
 these are one to one 
	 if Rear Left and Right exist move RC speaker to channel 7
	  otherwise to channel 5
 FRONT Left Right Center and REAR Left Right Center are exclusive 
 for other hdmi features 
 for Control Period 
 Number of Audio Packets per Line 
 search for exact pixel clock in table 
 not match 
 match found 
 not found 
	 See HDMI spec  the table entry under
 This should not happen.it does so we don't get BSOD
 setup the audio stream source select (audio -> dig mapping) 
 Channel allocation 
	 For now still do calculation, although this field is ignored when
 HDMI_AUDIO_PACKET_CONTROL 
 AFMT_AUDIO_PACKET_CONTROL 
 AFMT_AUDIO_PACKET_CONTROL2 
 HDMI_ACR_PACKET_CONTROL 
 Program audio clock sampleregeneration parameters 
 HDMI_ACR_32_0__HDMI_ACR_CTS_32_MASK 
 HDMI_ACR_32_1__HDMI_ACR_N_32_MASK 
 HDMI_ACR_44_0__HDMI_ACR_CTS_44_MASK 
 HDMI_ACR_44_1__HDMI_ACR_N_44_MASK 
 HDMI_ACR_48_0__HDMI_ACR_CTS_48_MASK 
 HDMI_ACR_48_1__HDMI_ACR_N_48_MASK 
	 Video driver cannot know in advance which sample rate will
	   be used by HD Audio driver
	   HDMI_ACR_PACKET_CONTROL__HDMI_ACR_N_MULTIPLE field is
	 AFMT_60958_0__AFMT_60958_CS_CHANNEL_NUMBER_L_MASK &
 AFMT_60958_1 AFMT_60958_CS_CHALNNEL_NUMBER_R 
	AFMT_60958_2 now keep this settings until
 --- DP Audio packet configurations --- 
 ATP Configuration 
 Asyncauto-calc timestamp mode 
	 --- The following are the registers
 AFMT_AUDIO_PACKET_CONTROL 
 AFMT_AUDIO_PACKET_CONTROL2 
 Program the ATP and AIP next 
 AFMT_INFOFRAME_CONTROL0 
 AFMT_60958_0__AFMT_60958_CS_CLOCK_ACCURACY_MASK 
 DCE810 does not have this register 
	 wait for AFMT clock to turn on,
	  expectation: this should complete in 1-2 reads
	 
	  REG_WAIT(AFMT_CNTL, AFMT_AUDIO_CLOCK_ON, !!enable, 1, 10);
	 
	  TODO: wait for clock_on does not work well. May need HW
	  program sequence. But audio seems work normally even without wait
	  for clock_on status change
 Enable Audio packets 
 Program the ATP and AIP next 
 Program STREAM_ENABLE after all the other enables. 
 Disable Audio packets 
	 This register shared with encoder info frame. Therefore we need to
  Copyright 2012-16 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  Copyright 2018 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 start I2C transfer 
	 all transactions were executed and HW buffer became empty
	  (even though it actually happens when status becomes DONE)
	
	  this is the case when HW used for communication, I2C_SW_STATUS
	  could be zero
		 after reading the status,
		  if the I2C operation executed successfully
		  (i.e. DC_I2C_STATUS_DONE = 1) then the I2C controller
		  should read data bytes from I2C circular data buffer
 TODO Warning ? 
	 Write the I2C address and I2C data
	  into the hardware circular buffer, one byte per entry.
	  As an example, the 7-bit I2C slave address for CRT monitor
	  for reading DDCEDID information is 0b1010001.
	  For an I2C send operation, the LSB must be programmed to 0;
	  for I2C receive operation, the LSB must be programmed to 1.
 we have checked I2c not used by DMCU, set SW use I2C REQ to 1 to indicate SW using it
 we have checked I2c not used by DMCU, set SW use I2C REQ to 1 to indicate SW using it
set SW requested I2c speed to default, if API calls in it will be override later
 Program pin select 
 Program time limit 
pre-dcn
	 Program HW priority
	  set to High - interrupt software I2C at any time
	  Enable restart of SW I2C that was interrupted by HW
	  disable queuing of software while I2C is in use by HW
 Reset HW engine 
 if used by SW, safe to reset 
 HW I2c engine - clock gating feature 
for HW HDCP Ri polling failure wa test
 Release I2C after reset, so HW or DMCU could use it 
 i2c_engine is busy by VBios, lets wait and retry 
	 We need following:
	  transaction length will not exceed
	  the number of free bytes in HW buffer (minus one for address)
 obtain timeout value before submitting request 
 wait until transaction proceed 
 update transaction status 
  Copyright 2012-16 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  defines the various methods of bit reduction available for use 
 00 - BITS2:0 Bypass 
 01 - hard coded coefficient TV RGB 
 04 - programmable OUTPUT CSC coefficient 
 TODO: correct values below 
 Set bypass 
 1 - Replace out of bound pixels with edge 
 Set bypass 
 DCE6 has no SCL_MODE register, skip scale mode programming 
 DCE6 has no SCL_MODE register, skip scale mode programming 
 DCE6 has no SCL_BOUNDARY_MODE bit, skip replace out of bound pixels 
We need to disable power gating on coeff memory to do programming
		we always program N2 + 1 phases, total phases N, but N2-1 are just mirror
We need to restore power gating on coeff memory to initial state
 TODO: add stereo support 
 DCE6 h_init_luma setting inspired by DCE110 
 DCE6 h_init_chroma setting inspired by DCE110 
 DCE6 has SCL_HORZ_FILTER_INIT_RGB_LUMA register 
 DCE6 has SCL_HORZ_FILTER_INIT_CHROMA register 
 should never happen, bug 
Use all three pieces of memory always
 Clear SCL_F_SHARP_CONTROL value to 0 
 1. Program overscan 
 2. Program taps and configuration 
 3. Calculate and program ratio, filter initialization 
 4. Program vertical filters 
 5. Program horizontal filters 
 6. Program the viewport 
 7. Set bit to flip to new coefficient memory 
Use whole line buffer memory always
 Clear SCL_F_SHARP_CONTROL value to 0 
 1. Program overscan 
 2. Program taps and configuration 
 3. Calculate and program ratio, DCE6 filter initialization 
 DCE6 has specific calculate_inits() function 
 DCE6 has specific program_scl_ratios_inits() function 
 4. Program vertical filters 
 5. Program horizontal filters 
 6. Program the viewport 
 DCE6 has no SCL_COEF_UPDATE_COMPLETE bit to flip to new coefficient memory 
 DCE6 DATA_FORMAT register does not support ALPHA_EN 
  set_clamp
  @param depth : bit depth to set the clamp to (should match denorm)
  @brief
      Programs clamp according to panel bit depth.
	 At the clamp block the data will be MSB aligned, so we set the max
	  clamp accordingly.
	  For example, the max value for 6 bits MSB aligned (14 bit bus) would
	  be "11 1111 0000 0000" in binary, so 0x3F00.
 6bit MSB aligned on 14 bit bus '11 1111 0000 0000' 
 8bit MSB aligned on 14 bit bus '11 1111 1100 0000' 
 10bit MSB aligned on 14 bit bus '11 1111 1111 0000' 
 12bit MSB aligned on 14 bit bus '11 1111 1111 1100' 
 Invalid clamp bit depth 
  set_round
  @brief
      Programs RoundTruncate
  @param [in] mode  :round or truncate
  @param [in] depth :bit depth to roundtruncate to
 OUT_ROUND_TRUNC_MODE 3:0 0xA Output data round or truncate mode
 POSSIBLE VALUES:
      00 - truncate to u0.12
      01 - truncate to u0.11
      02 - truncate to u0.10
      03 - truncate to u0.9
      04 - truncate to u0.8
      05 - reserved
      06 - truncate to u0.14
      07 - truncate to u0.13		set_reg_field_value(
			value,
			clamp_max,
			OUT_CLAMP_CONTROL_R_CR,
			OUT_CLAMP_MAX_R_CR);
      08 - round to u0.12
      09 - round to u0.11
      10 - round to u0.10
      11 - round to u0.9
      12 - round to u0.8
      13 - reserved
      14 - round to u0.14
      15 - round to u0.13
  set up bit depth 
 Invalid dcp_out_trunc_round_depth 
  set up round or truncate 
 Invalid dcp_out_trunc_round_mode 
  set_dither
  @brief
      Programs Dither
  @param [in] dither_enable        : enable dither
  @param [in] dither_mode           : dither mode to set
  @param [in] dither_depth          : bit depth to dither to
  @param [in] frame_random_enable    : enable frame random
  @param [in] rgb_random_enable      : enable rgb random
  @param [in] highpass_random_enable : enable highpass random
 Invalid dcp_spatial_dither_mode 
 Invalid dcp_spatial_dither_depth 
  write the register 
  dce_transform_bit_depth_reduction_program
  @brief
      Programs the DCP bit depth reduction registers (Clamp, RoundTruncate,
       Dither) for dce
  @param depth : bit depth to set the clamp to (should match denorm)
 Invalid clamp bit depth 
 Default to 12 bit truncation without rounding 
 Don't enable dithering if truncation is enabled 
			
			  Invalid truncateround depth. Setting here to 12bit
			  to prevent use-before-initialize errors.
  dce60_transform_bit_depth_reduction program
  @brief
      Programs the DCP bit depth reduction registers (Clamp, RoundTruncate,
       Dither) for dce
  @param depth : bit depth to set the clamp to (should match denorm)
 Invalid clamp bit depth 
 Default to 12 bit truncation without rounding 
 Don't enable dithering if truncation is enabled 
			
			  Invalid truncateround depth. Setting here to 12bit
			  to prevent use-before-initialize errors.
 DCE6 has no OUT_CLAMP_CONTROL_ registers - set_clamp() is skipped 
	 Find number of pixels that can fit into a single LB entry and
	  take floor of the value since we cannot store a single pixel
 6364 for 6 bit output color depth 
		 Unity for 8 bit output color depth
 10231024 for 10 bit output color depth 
 40954096 for 12 bit output color depth 
 not valid used case! 
		we should use unsupported capabilities
 DATA_FORMAT in DCE6 does not have PIXEL_DEPTH and PIXEL_EXPAN_MODE masks 
		we should use unsupported capabilities
   Function: dal_transform_wide_gamut_set_gamut_remap
   @param [in] const struct xfm_grph_csc_adjustment adjust
   @return
      void
   @note calculate and apply color temperature adjustment to in Rgb color space
   @see
 Bypass if type is bypass or hw 
 Fail if in_taps are impossible 
	
	  Set taps according to this policy (in this order)
	  - Use 1 for no scaling
	  - Use input taps
	  - Use 4 and reduce as required by line buffer size
	  - Decide chroma taps if chroma is scaled
	 
	  Ignore input chroma taps. Decide based on non-chroma
 reduce v_taps if needed but ensure we have at least two 
 reduce chroma v_taps if needed but ensure we have at least two 
 we've got valid taps 
 by pass 
 TV RGB 
 YCbCr601 
 YCbCr709 
 by pass 
 TV RGB 
 YCbCr601 
 YCbCr709 
 by pass 
  We did everything ,now program DxOUTPUT_CSC_CONTROL 
 currently parameter not in use 
		
		  HW default false we program locally defined matrix
		  HW default true  we use predefined hw matrix and we
		  do not need to program matrix
		  OEM wants the HW default via runtime parameter.
			 program the matrix with default values from this
	 configure the what we programmed :
	  1. Default values from this file
	  2. Use hardware default from ROM_A and we do not need to program
 Power on LUT memory 
 Program REGAMMA_LUT_DATA 
  we are done with DCP LUT memory; re-enable low power mode 
 Setup regions 
 Program PWL 
 Constructor, Destructor               
0x6B0
0x6B0
  Copyright 2016 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 new for 64bpp from HW 
 0 for invalid 
 fake 
 fake 
 set a 
 set d 
 set a 
 set d 
 set a 
 set d 
 set a 
 set d 
 set a 
 set d 
 set a 
 set d 
 set a 
 set b 
 set c 
 set d 
 set a 
 set b 
 set c 
 set d 
 set a 
 set b 
 set c 
 set d 
 set a 
 set b 
 set c 
 set d 
 set a 
 set b 
 set c 
 set d 
 set a 
 set b 
 set c 
 set d 
 GFX9 
		 TODO: DCP0_GRPH_CONTROL__GRPH_SE_ENABLE where to get info
		GRPH_SE_ENABLE, 1,
		GRPH_Z, 0);
 GFX8 
 01 - DCP_GRPH_COLOR_EXPANSION_MODE_ZEXP: zero expansion for YCbCr 
		
				GRPH_Z, 0);
 GFX6 but reuses gfx8 struct 
 DCE6 has no GRPH_MICRO_TILE_MODE mask 
 01 - DCP_GRPH_COLOR_EXPANSION_MODE_ZEXP: zero expansion for YCbCr 
		
				GRPH_Z, 0);
 not used in DCE6 
 DCE6 has no HW rotation, skip rotation_angles declaration 
 DCE6 has no HW rotation, skip ROTATION_ANGLE_ processing 
 DCE6 has no HW_ROTATION register, skip setting rotation_angles 
 no swap 
			todo: doesn't look like we handle BGRA here,
 ABGR formats 
 shouldn't this get float too? 
 not used in DCE6 
return double of frame time
TODO: should we use pixel format normalized pixel clock here?
 avoid division by zero 
 avoid division by zero
high register MUST be programmed first
high register MUST be programmed first
 not supported 
  Copyright 2016 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 Not lock pipe when blank 
 DCE6 has no BLND_V_UPDATE_LOCK register 
 todo: why do we need this at boot? is dce_enable_fe_clock enough? 
 TODO: implement 
 TODO: implement 
 Only use LUT for 8 bit formats 
  Copyright 2020 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
   dmub_enable_outbox_notification - Sends inbox cmd to dmub to enable outbox1
                                     messages with interrupt. Dmub sends outbox1
                                     message and triggers outbox1 interrupt.
  @dc: dc structure
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 enable AUX before request SW to access AUX 
DP_AUX block as part of the enable sequence
poll HW to make sure reset it done
if (field)
 request SW to access AUX 
 clear_aux_error 
 force_default_calibrate 
 bug? why AUXN update EN and OVERRIDE_EN 1 by 1 while AUX P toggles OVERRIDE? 
 set the delay and the number of bytes to write 
	 The length include
	  the 4 bit header and the 20 bit address
	  (that is 3 byte).
	  If the requested length is non zero this means
	  an addition byte specifying the length is required.
 program action and address and payload data (if 'is_write') 
		 Load the HW buffer with the Data to be sent.
		  This is relevant for write operation.
		  For read, the data recived data will be
		  processed in process_channel_reply().
 In case HPD is LOW, exit AUX transaction 
 Need at least the status byte 
 ACK 
 First byte was already used to get the command status 
 Do not overflow buffer 
caller pass NULL pointer
 poll to make sure that SW_DONE is asserted 
 in case HPD is LOW, exit AUX transaction 
	 Note that the following bits are set in 'status.bits'
	  during CTS 4.2.1.2 (FW 3.3.1):
	  AUX_SW_RX_MIN_COUNT_VIOL, AUX_SW_RX_INVALID_STOP,
	  AUX_SW_RX_RECV_NO_DET, AUX_SW_RX_RECV_INVALID_H.
	 
	  AUX_SW_RX_MIN_COUNT_VIOL is an internal,
	  HW debugging bit and should be ignored.
		time_elapsed >= aux_engine->timeout_period
		   AUX_SW_STATUS__AUX_SW_HPD_DISCON = at this point
 1-Update polling timeout period 
 2-Update aux timeout period length and multiplier 
 XXX: Workaround to configure ddc channels for aux transactions 
ms
 sink requested more time to complete the write via AUX_ACKM 
					 retry reading the write status until complete
					  NOTE: payload is modified here
 polling_timeout_period is in us 
 Check whether a DEFER had occurred before the timeout.
 If so, treat timeout as a DEFER.
					
					  DP 1.4, 2.8.2:  AUX Transaction ResponseReply Timeouts
					  According to the DP spec there should be 3 retries total
					  with a 400us wait inbetween each. Hardware already waits
					  for 550us therefore no wait is required here.
  Copyright 2015 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 include DCE10 register header files 
  Private definitions
PIPE_CONTROL
		 Revert MASTER_UPDATE_MODE to 0 because bios sets it 2
		  by default when command table is called
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 set register offset 
 set register offset with instance 
 TODO implement when needed but for now hardcode max value
			 Store first available for MST second display
			  in daisy chain use case
	
	  below can happen in cases when stream encoder is acquired:
	  1) for second MST display in chain, so preferred engine already
	  acquired;
	  2) for another link, which preferred engine already acquired by any
	  MST configuration.
	 
	  If signal is of DP type and preferred engine not found, return last available
	 
	  TODO - This is just a patch up and a generic solution is
	  required for non DP connectors.
	
	  Resource + asic cap harcoding                
 Create hardware sequencer 
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
                   D I G E N C O D E R C O N T R O L
 dual link 2.7GHz 
 single link 1.62GHz 
 We need to convert from KHz units into 10KHz units 
 dual link 2.7GHz 
 single link 1.62GHz 
 We need to convert from KHz units into 10KHz units 
                   TRANSMITTER CONTROL
			 on INIT this bit should be set according to the
			  phisycal connector
			  Bit0: dual link connector flag
			  =0 connector is single link connector
			  =1 connector is dual link connector
 connector object id 
 votage swing and pre-emphsis 
 if dual-link 
			 on ENABLEDISABLE this bit should be set according to
			  actual timing (number of lanes)
			  Bit0: dual link connector flag
			  =0 connector is single link connector
			  =1 connector is dual link connector
			 link rate, half for dual link
			  We need to convert from KHz units into 20KHz units
			 link rate, half for dual link
			  We need to convert from KHz units into 10KHz units
	 00 - coherent mode
	  01 - incoherent mode
		 Bit2: Transmitter Link selection
		  =0 when bit0=0, single link ACE, when bit0=1,
		  master link ACE
		  =1 when bit0=0, single link BDF, when bit0=1,
		  master link BDF
		 Bit3: Transmitter data source selection
		  =0 DIGA is data source.
		  =1 DIGB is data source.
		  This bit is only useful when ucAction= ATOM_ENABLE
		 Bit4: DP connector flag
		  =0 connector is none-DP connector
		  =1 connector is DP connector
	 Bit[7:6]: Transmitter selection
	  =0 UNIPHY_ENCODER: UNIPHYAB
	  =1 UNIPHY1_ENCODER: UNIPHYCD
	  =2 UNIPHY2_ENCODER: UNIPHYEF
	  =3 reserved
 fill information based on the action 
			 on INIT this bit should be set according to the
			  phisycal connector
			  Bit0: dual link connector flag
			  =0 connector is single link connector
			  =1 connector is dual link connector
 connector object id 
 votage swing and pre-emphsis 
			 on ENABLEDISABLE this bit should be set according to
			  actual timing (number of lanes)
			  Bit0: dual link connector flag
			  =0 connector is single link connector
			  =1 connector is dual link connector
 if dual-link 
			 on ENABLEDISABLE this bit should be set according to
			  actual timing (number of lanes)
			  Bit0: dual link connector flag
			  =0 connector is single link connector
			  =1 connector is dual link connector
			 link rate, half for dual link
			  We need to convert from KHz units into 20KHz units
			 link rate, half for dual link
			  We need to convert from KHz units into 10KHz units
	 00 - coherent mode
	  01 - incoherent mode
		 Bit2: Transmitter Link selection
		  =0 when bit0=0, single link ACE, when bit0=1,
		  master link ACE
		  =1 when bit0=0, single link BDF, when bit0=1,
		  master link BDF
		 Bit3: Transmitter data source selection
		  =0 DIGA is data source.
		  =1 DIGB is data source.
		  This bit is only useful when ucAction= ATOM_ENABLE
	 Bit[7:6]: Transmitter selection
	  =0 UNIPHY_ENCODER: UNIPHYAB
	  =1 UNIPHY1_ENCODER: UNIPHYCD
	  =2 UNIPHY2_ENCODER: UNIPHYEF
	  =3 reserved
			 on INIT this bit should be set according to the
			  phisycal connector
			  Bit0: dual link connector flag
			  =0 connector is single link connector
			  =1 connector is dual link connector
 connector object id 
 votage swing and pre-emphsis 
			 on ENABLEDISABLE this bit should be set according to
			  actual timing (number of lanes)
			  Bit0: dual link connector flag
			  =0 connector is single link connector
			  =1 connector is dual link connector
 if dual-link 
			 link rate, half for dual link
			  We need to convert from KHz units into 20KHz units
			 link rate, half for dual link
			  We need to convert from KHz units into 10KHz units
	 00 - coherent mode
	  01 - incoherent mode
		 Bit2: Transmitter Link selection
		  =0 when bit0=0, single link ACE, when bit0=1,
		  master link ACE
		  =1 when bit0=0, single link BDF, when bit0=1,
		  master link BDF
		 Bit3: Transmitter data source selection
		  =0 DIGA is data source.
		  =1 DIGB is data source.
		  This bit is only useful when ucAction= ATOM_ENABLE
	 Bit[7:6]: Transmitter selection
	  =0 UNIPHY_ENCODER: UNIPHYAB
	  =1 UNIPHY1_ENCODER: UNIPHYCD
	  =2 UNIPHY2_ENCODER: UNIPHYEF
	  =3 reserved
 00 - coherent mode 
	
	  In SITN case, caller have to set usPixelClock as following:
	  DP mode: usPixelClock = DP_LINK_CLOCK10
	  (DP_LINK_CLOCK = 1.62GHz, 2.7GHz, 5.4GHz)
	  DVI single link mode: usPixelClock = pixel clock
	  DVI dual link mode: usPixelClock = pixel clock
	  HDMI mode: usPixelClock = pixel clock  deep_color_ratio
	  (=1: 8bpp, =1.25: 10bpp, =1.5:12bpp, =2: 16bpp)
	  LVDS mode: usPixelClock = pixel clock
	
	  In SITN case, caller have to set usPixelClock as following:
	  DP mode: usPixelClock = DP_LINK_CLOCK10
	  (DP_LINK_CLOCK = 1.62GHz, 2.7GHz, 5.4GHz)
	  DVI single link mode: usPixelClock = pixel clock
	  DVI dual link mode: usPixelClock = pixel clock
	  HDMI mode: usPixelClock = pixel clock  deep_color_ratio
	  (=1: 8bpp, =1.25: 10bpp, =1.5:12bpp, =2: 16bpp)
	  LVDS mode: usPixelClock = pixel clock
                   SET PIXEL CLOCK
 We need to convert from 100Hz units into 10KHz units 
 video bios did not define this: 
 Caller doesn't need to init this portion 
 video bios did not define this: 
 Caller doesn't need to init this portion 
 We need to convert from 100Hz units into 10KHz units 
		 clkV5.ucMiscInfo bit[3:2]= HDMI panel bit depth: =0: 24bpp
		  =1:30bpp, =2:32bpp
		  driver choose program it itself, i.e. here we program it
		  to 888 by default.
 yes this is correct, the atom define is wrong 
 yes this is correct, the atom define is wrong 
		 Note: VBIOS still wants to use ucCRTC name which is now
		  1 byte in ULONG
		 typedef struct _CRTC_PIXEL_CLOCK_FREQ
		 {
		  target the pixel clock to drive the CRTC timing.
		  ULONG ulPixelClock:24;
		  0 means disable PPLLDCPLL. Expanded to 24 bits comparing to
		  previous version.
		  ATOM_CRTC1~6, indicate the CRTC controller to
		  ULONG ucCRTC:8;
		  drive the pixel clock. not used for DCPLL case.
		 }CRTC_PIXEL_CLOCK_FREQ;
		 union
		 {
		  pixel clock and CRTC id frequency
		  CRTC_PIXEL_CLOCK_FREQ ulCrtcPclkFreq;
		  ULONG ulDispEngClkFreq; dispclk frequency
		 };
 We need to convert from 100 Hz units into 10KHz units 
		 clkV6.ucMiscInfo bit[3:2]= HDMI panel bit depth: =0:
		  24bpp =1:30bpp, =2:32bpp
		  driver choose program it itself, i.e. here we pass required
		  target rate that includes deep color.
		 Note: VBIOS still wants to use ucCRTC name which is now
		  1 byte in ULONG
		 typedef struct _CRTC_PIXEL_CLOCK_FREQ
		 {
		  target the pixel clock to drive the CRTC timing.
		  ULONG ulPixelClock:24;
		  0 means disable PPLLDCPLL. Expanded to 24 bits comparing to
		  previous version.
		  ATOM_CRTC1~6, indicate the CRTC controller to
		  ULONG ucCRTC:8;
		  drive the pixel clock. not used for DCPLL case.
		 }CRTC_PIXEL_CLOCK_FREQ;
		 union
		 {
		  pixel clock and CRTC id frequency
		  CRTC_PIXEL_CLOCK_FREQ ulCrtcPclkFreq;
		  ULONG ulDispEngClkFreq; dispclk frequency
		 };
                   ENABLE PIXEL CLOCK SS
 convert back to unit of 10KHz 
 Unexpected PLL value!! 
 Unexpected PLL value!! 
		 Both amounts need to be left shifted first before bit
		  comparison. Otherwise, the result will always be zero here
		 ATOM_PPLL_SS_TYPE_V3_P0PLL; this is pixel clock only,
		  not for SI display clock.
 Unexpected PLL value!! 
		 Both amounts need to be left shifted first before bit
		  comparison. Otherwise, the result will always be zero here
                   ADJUST DISPLAY PLL
	 We need to convert from KHz units into 10KHz units and then convert
		 Convert output pixel clock back 10KHz-->KHz: multiply
		  original pixel clock in KHz by ratio
	 We need to convert from KHz units into 10KHz units and then convert
		 Convert output pixel clock back 10KHz-->KHz: multiply
		  original pixel clock in KHz by ratio
                   DAC ENCODER CONTROL
	 We need to convert from KHz units into 10KHz units
	  it looks as if the TvControl do not care about pixel clock
                   DAC OUTPUT CONTROL
                   SET CRTC TIMING
	 VBIOS does not expect any value except zero into this call, for
	  underscan use another entry ProgramOverscan call but when mode
	  1776x1000 with the overscan 72x44 .e.i. 1920x1080 @30 DAL2 is ok,
	  but when same ,but 60 Hz there is corruption
	  DAL1 does not allow the mode 1776x1000@60
		 original DAL code has this condition to apply tis for
		  non-TVCV only due to complex MV testing for possible
		  impact
		  if (pACParameters->signal != SignalType_YPbPr &&
		   pACParameters->signal != SignalType_Composite &&
		   pACParameters->signal != SignalType_SVideo)
		 HW will deduct 0.5 line from 2nd feild.
		  i.e. for 1080i, it is 2 lines for 1st field, 2.5
		  lines for the 2nd feild. we need input as 5 instead
		  of 4, but it is 4 either from Edid data
		  (spec CEA 861) or CEA timing table.
 bios usH_Size wants h addressable size 
 bios usH_Blanking_Time wants borders included in blanking 
 bios usV_Size wants v addressable size 
 bios usV_Blanking_Time wants borders included in blanking 
	 bios usHSyncOffset is the offset from the end of h addressable,
	  our horizontalSyncStart is the offset from the beginning
	 bios usHSyncOffset is the offset from the end of v addressable,
	  our verticalSyncStart is the offset from the beginning of
	 we assume that overscan from original timing does not get bigger
	  than 255
	  we will program all the borders in the Set CRTC Overscan call below
		 original DAL code has this condition to apply this
		  for non-TVCV only
		  due to complex MV testing for possible impact
		  if ( pACParameters->signal != SignalType_YPbPr &&
		   pACParameters->signal != SignalType_Composite &&
		   pACParameters->signal != SignalType_SVideo)
			 HW will deduct 0.5 line from 2nd feild.
			  i.e. for 1080i, it is 2 lines for 1st field,
			  2.5 lines for the 2nd feild. we need input as 5
			  instead of 4.
			  but it is 4 either from Edid data (spec CEA 861)
			  or CEA timing table.
                   ENABLE CRTC
                   ENABLE CRTC MEM REQ
                   DISPLAY PLL
 Invalid Inpute!! 
 We need to convert from KHz units into 10KHz units 
Invalid Input!!
 We need to convert from KHz units into 10KHz units 
		 True display clock is returned by VBIOS if DFS bypass
                   EXTERNAL ENCODER CONTROL
 we need use _PS_Alloc struct 
 check if encoder supports external encoder control table 
	 Fill information based on the action
	 
	  Bit[6:4]: indicate external encoder, applied to all functions.
	  =0: external encoder1, mapped to external encoder enum id1
	  =1: external encoder2, mapped to external encoder enum id2
	 
	  enum ObjectEnumId
	  {
	   EnumId_Unknown = 0,
	   EnumId_1,
	   EnumId_2,
	  };
		 output display connector type. Only valid in encoder
		 EXTERNAL_ENCODER_CONTROL_PARAMETERS_V3 pixel clock unit in
		  10KHz
		  output display device pixel clock frequency in unit of 10KHz.
		  Only valid in setup and enableoutput
		 Indicate display output signal type drive by external
			 Bit[0]: indicate link rate, =1: 2.7Ghz, =0: 1.62Ghz,
			 output color depth Indicate encoder data bpc format
			  in DP mode, only valid in encoder setup in DP mode.
		 Indicate how many lanes used by external encoder, only valid
                   ENABLE DISPLAY POWER GATING
                   SET DCE CLOCK
 only program clock frequency if display clock is used; VBIOS will program DPREFCLK 
 We need to convert from KHz units into 10KHz units 
 Convert from 10KHz units back to KHz 
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 Invalid object id 
 get the I2C info 
 getBiosObject will return MXM object 
 Invalid object id 
	 Pixel clock pll information. We need to convert from 10KHz units into
		 Since there is no information on the SS, report conservative
 unit of 0.01% 
		 Since there is no information on the SS,report conservative
 unit of 0.01% 
	 Pixel clock pll information. We need to convert from 10KHz units into
	 There should be only one entry in the SS info table for Memory Clock
		 Since there is no information for external SS, report
 unit of 0.01% 
				 if it is centermode, the exact SS Percentage
				  will be round up of half of the percentage
	 There should be only one entry in the SS info table for Engine Clock
		 Since there is no information for external SS, report
 unit of 0.01% 
				 if it is centermode, the exact SS Percentage
				  will be round up of half of the percentage
	 Pixel clock pll information. We need to convert from 10KHz units into
	 There should be only one entry in the SS info table for Memory Clock
		 Since there is no information for external SS, report
 unit of 0.01% 
				 if it is centermode, the exact SS Percentage
				  will be round up of half of the percentage
	 There should be only one entry in the SS info table for Engine Clock
		 Since there is no information for external SS, report
 unit of 0.01% 
				 if it is centermode, the exact SS Percentage
				  will be round up of half of the percentage
 Remote Display 
 Is allowed minimum BL level 
 Used starting from CI 
		 VBIOS introduced new defines for Version 3, same values as
		   before, so now use these new ones for Version 3.
		  Shouldn't affect field VBIOS's V3 as define values are still
		   same.
		  #define SS_MODE_V3_CENTRE_SPREAD_MASK                0x01
		  #define SS_MODE_V3_EXTERNAL_SS_MASK                  0x02
		  Old VBIOS defines:
		  #define ATOM_SS_CENTRE_SPREAD_MODE_MASK        0x00000001
		  #define ATOM_EXTERNAL_SS_MASK                  0x00000002
		 Older VBIOS (in field) always provides SS percentage in 0.01%
 #define SS_MODE_V3_PERCENTAGE_DIV_BY_1000_MASK 0x10 
 convert [10KHz] into [KHz] 
 Invalid object 
  bios_parser_get_spread_spectrum_info
  Get spread spectrum information from the ASIC_InternalSS_Info(ver 2.1 or
  ver 3.1) or SS_Info table from the VBIOS. Currently ASIC_InternalSS_Info
  ver 2.1 can co-exist with SS_Info table. Expect ASIC_InternalSS_Info ver 3.1,
  there is only one entry for each signal ss id.  However, there is
  no planning of supporting multiple spread Sprectum entry for EverGreen
  @dcb:     pointer to the DC BIOS
  @signal:  ASSignalType to be converted to info index
  @index:   number of entries that match the converted info index
  @ss_info: sprectrum information structure,
  return:   Bios parser result code
 check for bad input 
 signal translation 
			 there can not be more then one entry for Internal
 there can not be more then one entry for SS Info table 
  get_ss_info_from_tbl
  Get spread sprectrum information from the ASIC_InternalSS_Info Ver 2.1 or
  SS_Info table from the VBIOS
  There can not be more than 1 entry for  ASIC_InternalSS_Info Ver 2.1 or
  SS_Info.
  @bp:      pointer to the BIOS parser
  @id:      spread sprectrum info index
  @ss_info: sprectrum information structure,
  return:   BIOS parser result code
 check for bad input, if ss_info is not NULL 
 for SS_Info table only support DP and LVDS 
  get_ss_info_from_internal_ss_info_tbl_V2_1
  Get spread sprectrum information from the ASIC_InternalSS_Info table Ver 2.1
  from the VBIOS
  There will not be multiple entry for Ver 2.1
  @bp:    pointer to the Bios parser
  @id:    spread sprectrum info index
  @info:  sprectrum information structure,
  return: Bios parser result code
 convert [10KHz] into [KHz] 
  get_ss_info_from_ss_info_table
  Get spread sprectrum information from the SS_Info table from the VBIOS
  if the pointer to info is NULL, indicate the caller what to know the number
  of entries that matches the id
  for, the SS_Info table, there should not be more than 1 entry match.
  @bp:      pointer to the Bios parser
  @id:      spread sprectrum id
  @ss_info: sprectrum information structure,
  return:   Bios parser result code
 exist of the SS_Info table 
 check for bad input, pSSinfo can not be NULL 
 have to convert from Internal_SS format to SS_Info format 
		 there will be only one entry for each display type in SS_info
 We need to convert from 10KHz units into KHz units
 usHActive does not include borders, according to VBIOS team
	 usHBlanking_Time includes borders, so we should really be subtracting
	 doesn't have borders, so we should be okay leaving this as is for
 usVActive does not include borders, according to VBIOS team
	 usVBlanking_Time includes borders, so we should really be subtracting
	 doesn't have borders, so we should be okay leaving this as is for
 Get minimum supported refresh rate
Drr panel support can be reported by VBIOS
 We need to convert from 10KHz units into KHz units 
 usHActive does not include borders, according to VBIOS team 
	 usHBlanking_Time includes borders, so we should really be subtracting
	 doesn't have borders, so we should be okay leaving this as is for
 usVActive does not include borders, according to VBIOS team
	 usVBlanking_Time includes borders, so we should really be subtracting
	 doesn't have borders, so we should be okay leaving this as is for
 Drr panel support can be reported by VBIOS
 Get supported refresh rate
  bios_parser_get_encoder_cap_info - get encoder capability
                                     information of input object id
  @dcb:       pointer to the DC BIOS
  @object_id: object id
  @info:      encoder cap information structure
  return: Bios parser result code
  get_encoder_cap_record - Get encoder cap record for the object
  @bp:      pointer to the BIOS parser
  @object:  ATOM object
  return:   atom encoder cap record
  note:     search all records to find the ATOM_ENCODER_CAP_RECORD_V2 record
 Invalid object 
  bios_parser_get_ss_entry_number
  Get Number of SpreadSpectrum Entry from the ASIC_InternalSS_Info table from
  the VBIOS that match the SSid (to be converted from signal)
  @dcb:    pointer to the DC BIOS
  @signal: ASSignalType to be converted to SSid
  return: number of SS Entry that match the signal
  get_ss_entry_number_from_ss_info_tbl
  Get Number of spread spectrum entry from the SS_Info table from the VBIOS.
  @bp:  pointer to the BIOS parser
  @id:  spread spectrum id
  return: number of SS Entry that match the id
  note: There can only be one entry for each id for SS_Info Table
 SS_Info table exist 
 have to convert from Internal_SS format to SS_Info format 
  get_ss_entry_number
  Get spread sprectrum information from the ASIC_InternalSS_Info Ver 2.1 or
  SS_Info table from the VBIOS
  There can not be more than 1 entry for  ASIC_InternalSS_Info Ver 2.1 or
  SS_Info.
  @bp:    pointer to the BIOS parser
  @id:    spread sprectrum info index
  return: Bios parser result code
  get_ss_entry_number_from_internal_ss_info_tbl_v2_1
  Get NUmber of spread sprectrum entry from the ASIC_InternalSS_Info table
  Ver 2.1 from the VBIOS
  There will not be multiple entry for Ver 2.1
  @bp:    pointer to the BIOS parser
  @id:    spread sprectrum info index
  return: number of SS Entry that match the id
  get_ss_entry_number_from_internal_ss_info_tbl_V3_1
  Get Number of SpreadSpectrum Entry from the ASIC_InternalSS_Info table of
  the VBIOS that matches id
  @bp:    pointer to the BIOS parser
  @id:    spread sprectrum id
  return: number of SS Entry that match the id
  bios_parser_get_gpio_pin_info
  Get GpioPin information of input gpio id
  @dcb:     pointer to the DC BIOS
  @gpio_id: GPIO ID
  @info:    GpioPin information structure
  return:   Bios parser result code
  note:
   to get the GPIO PIN INFO, we need:
   1. get the GPIO_ID from other object table, see GetHPDInfo()
   2. in DATA_TABLE.GPIO_Pin_LUT, search all records, to get the registerA
   offsetmask
 get the GPIO_I2C info 
 get data count 
 get the GPIO_I2C_INFO 
 do NOT check for id.id == 0 
 Invalid object id 
 Invalid device Id 
 initialize the revision to 0 which is invalid revision 
 Unidentified device ID, return empty support mask. 
  bios_parser_set_scratch_critical_state - update critical state
                                           bit in VBIOS scratch register
  @dcb:    pointer to the DC BIOS
  @state:  set or reset state
  get_integrated_info_v8
  @brief
  Get V8 integrated BIOS information
  @param
  bios_parser bp - [in]BIOS parser handler to get master data table
  integrated_info info - [out] store and output integrated info
  return:
  enum bp_result - BP_RESULT_OK if information is available,
                   BP_RESULT_BADBIOSTABLE otherwise.
 Convert [10KHz] into [KHz] 
	
	  system_config: Bit[0] = 0 : PCIE power gating disabled
	                        = 1 : PCIE power gating enabled
	                 Bit[1] = 0 : DDR-PLL shut down disabled
	                        = 1 : DDR-PLL shut down enabled
	                 Bit[2] = 0 : DDR-PLL power down disabled
	                        = 1 : DDR-PLL power down enabled
 Convert [10KHz] into [KHz] 
  get_integrated_info_v8
  @brief
  Get V8 integrated BIOS information
  @param
  bios_parser bp - [in]BIOS parser handler to get master data table
  integrated_info info - [out] store and output integrated info
  return:
  enum bp_result - BP_RESULT_OK if information is available,
                   BP_RESULT_BADBIOSTABLE otherwise.
 Convert [10KHz] into [KHz] 
	
	  system_config: Bit[0] = 0 : PCIE power gating disabled
	                        = 1 : PCIE power gating enabled
	                 Bit[1] = 0 : DDR-PLL shut down disabled
	                        = 1 : DDR-PLL shut down enabled
	                 Bit[2] = 0 : DDR-PLL power down disabled
	                        = 1 : DDR-PLL power down enabled
 Convert [10KHz] into [KHz] 
  construct_integrated_info
  @brief
  Get integrated BIOS information based on table revision
  @param
  bios_parser bp - [in]BIOS parser handler to get master data table
  integrated_info info - [out] store and output integrated info
  return:
  enum bp_result - BP_RESULT_OK if information is available,
                   BP_RESULT_BADBIOSTABLE otherwise.
 Don't need to check major revision as they are all 1 
 Sort voltage table from low to high
 swap j and j - 1
 the end of the list 
 return if the record not found 
 get slot sizes 
 get info for each connector in the slot 
 no more slots present in bios 
 fail 
 all data is valid 
 bios scratch register communication 
 COMMANDS 
 still use.  should probably retire and program directly 
 SW init and patch 
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 Fall back to old bios parser for older asics 
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 Temporarily add in defines until ObjectID.h patch is updated in a few days 
 GENERIC_OBJECT_ID_BRACKET_LAYOUT 
 GENERICOBJECT_BRACKET_LAYOUT_ENUM_ID1 
 GENERICOBJECT_BRACKET_LAYOUT_ENUM_ID2 
 initialize the revision to 0 which is invalid revision 
 BIOS oject table displaypath is per connector.
  There is extra path not for connector. BIOS fill its encoderid as 0
		 If display_objid is generic object id,  the encoderObj
		  extencoderobjId should be 0
	 Encoder's Source is GPU.  BIOS does not provide GPU, since all
	  displaypaths point to same GPU (0x1100).  Hardcode GPU object type
		 TODO: since num of src must be less than 2.
		  If found in for loop, should break.
		  DAL2 implementation may be changed too
 break; 
 break; 
 from graphics_object_id, find display path which includes the object_id 
		 Both Generic and Connector Object ID
		  will be stored on display_objid
 get the I2C info 
 get the GPIO_I2C info 
 TODO: is version change? 
 get data count 
 still valid 
	 If we don't find the entry that we are looking for then
	   we will return BP_Result_BadBiosTable.
 get the GPIO_I2C_INFO 
 TODO: check how to get register offset for en, Y, etc. 
 Invalid object 
  bios_parser_get_gpio_pin_info
  Get GpioPin information of input gpio id
  @dcb:     pointer to the DC BIOS
  @gpio_id: GPIO ID
  @info:    GpioPin information structure
  return: Bios parser result code
  note:
   to get the GPIO PIN INFO, we need:
   1. get the GPIO_ID from other object table, see GetHPDInfo()
   2. in DATA_TABLE.GPIO_Pin_LUT, search all records,
 	to get the registerA  offsetmask
 Temporary hard code gpio pin info 
 Invalid device Id 
 getBiosObject will return MXM object 
 Invalid object id 
 BIOS no longer provides this 
 BIOS no longer uses target clock.  Always enable for now 
 TODO LVDS not support anymore? 
		 atom_firmware: DAL only get data from dce_info table.
		  if data within smu_info is needed for DAL, VBIOS should
		  copy it into dce_info
 BIOS no longer uses target clock.  Always enable for now 
 TODO LVDS not support anymore? 
		 atom_firmware: DAL only get data from dce_info table.
		  if data within smu_info is needed for DAL, VBIOS should
		  copy it into dce_info
  bios_parser_get_spread_spectrum_info
  Get spread spectrum information from the ASIC_InternalSS_Info(ver 2.1 or
  ver 3.1) or SS_Info table from the VBIOS. Currently ASIC_InternalSS_Info
  ver 2.1 can co-exist with SS_Info table. Expect ASIC_InternalSS_Info
  ver 3.1,
  there is only one entry for each signal ss id.  However, there is
  no planning of supporting multiple spread Sprectum entry for EverGreen
  @dcb:     pointer to the DC BIOS
  @signal:  ASSignalType to be converted to info index
  @index:   number of entries that match the converted info index
  @ss_info: sprectrum information structure,
  return: Bios parser result code
 check for bad input 
 there can not be more then one entry for SS Info table 
 check for bad input 
 TODO: previous vv1_3, should v2_1 
 We need to convert from 10KHz units into KHz units 
 usHActive does not include borders, according to VBIOS team 
	 usHBlanking_Time includes borders, so we should really be
	  subtractingborders duing this translation, but LVDS generally
	  doesn't have borders, so we should be okay leaving this as is for
	  now.  May need to revisit if we ever have LVDS with borders
 usVActive does not include borders, according to VBIOS team
	 usVBlanking_Time includes borders, so we should really be
	  subtracting borders duing this translation, but LVDS generally
	  doesn't have borders, so we should be okay leaving this as is for
	  now. May need to revisit if we ever have LVDS with borders
 not provided by VBIOS 
 not provided by VBIOS 
 not provided by VBIOS
 not provided by VBIOS
 Unidentified device ID, return empty support mask. 
	 TODO: DAL2 atomfirmware implementation does not need this.
	  why DAL3 need this?
  bios_parser_set_scratch_critical_state - update critical state bit
                                           in VBIOS scratch register
  @dcb:   pointer to the DC BIO
  @state: set or reset state
 Pixel clock pll information. 
 We need to convert from 10KHz units into KHz units 
 27MHz for Vega10: 
 Hardcode frequency if BIOS gives no DCE Ref Clk 
dp_phy_ref_clk is not correct for atom_display_controller_info_v4_2, but we don't use it
 Get GPU PLL VCO Clock 
 VBIOS gives in 10KHz 
 Vega12 
 Vega20 
 We need to convert from 10KHz units into KHz units.
 27MHz for Vega10 & Vega12; 100MHz for Vega20 
 Hardcode frequency if BIOS gives no DCE Ref Clk 
dp_phy_ref_clk is not correct for atom_display_controller_info_v4_2, but we don't use it
 Get GPU PLL VCO Clock 
 100MHz expected 
 50MHz expected 
 Get SMU Display PLL VCO Frequency in KHz
 should not come here, keep as backup, as was before 
 We need to convert from 10KHz units into KHz units.
 Invalid object 
 Invalid object 
  get_integrated_info_v11
  @brief
  Get V8 integrated BIOS information
  @param
  bios_parser bp - [in]BIOS parser handler to get master data table
  integrated_info info - [out] store and output integrated info
  @return
  enum bp_result - BP_RESULT_OK if information is available,
                   BP_RESULT_BADBIOSTABLE otherwise.
	
	 system_config: Bit[0] = 0 : PCIE power gating disabled
	                       = 1 : PCIE power gating enabled
	                Bit[1] = 0 : DDR-PLL shut down disabled
	                       = 1 : DDR-PLL shut down enabled
	                Bit[2] = 0 : DDR-PLL power down disabled
	                       = 1 : DDR-PLL power down enabled
 TODO - review 
 Convert [10KHz] into [KHz] 
 Convert [10KHz] into [KHz] 
 TODO
	
	 system_config: Bit[0] = 0 : PCIE power gating disabled
	                       = 1 : PCIE power gating enabled
	                Bit[1] = 0 : DDR-PLL shut down disabled
	                       = 1 : DDR-PLL shut down enabled
	                Bit[2] = 0 : DDR-PLL power down disabled
	                       = 1 : DDR-PLL power down enabled
	
	 system_config: Bit[0] = 0 : PCIE power gating disabled
	                       = 1 : PCIE power gating enabled
	                Bit[1] = 0 : DDR-PLL shut down disabled
	                       = 1 : DDR-PLL shut down enabled
	                Bit[2] = 0 : DDR-PLL power down disabled
	                       = 1 : DDR-PLL power down enabled
  construct_integrated_info
  @brief
  Get integrated BIOS information based on table revision
  @param
  bios_parser bp - [in]BIOS parser handler to get master data table
  integrated_info info - [out] store and output integrated info
  @return
  enum bp_result - BP_RESULT_OK if information is available,
                   BP_RESULT_BADBIOSTABLE otherwise.
 Sort voltage table from low to high
 swap j and j - 1
 the end of the list 
 return if the record not found 
 get slot sizes 
 get info for each connector in the slot 
 no more slots present in bios 
 fail 
 all data is valid 
	 Each data table offset in data table list is 2 bytes,
	  we can use that to iterate through listOfdatatables
	  without knowing the name of each member.
 TODO: There is data bytes alignment issue, disable it for now.
 ver.4.4 or higher 
	 COMMANDS 
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 ENCODER_OBJECT_ID_NUTMEG 
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 Unsupported DCE 
 real implementations 
 Wrong controller id 
  dal_cmd_table_helper_transmitter_bp_to_atom - Translate the Transmitter to the
                                     corresponding ATOM BIOS value
  @t: transmitter
  returns: output digitalTransmitter
      =00: Digital Transmitter1 ( UNIPHY linkAB )
      =01: Digital Transmitter2 ( UNIPHY linkCD )
      =02: Digital Transmitter3 ( UNIPHY linkEF )
 Invalid Transmitter Type! 
	 there are three transmitter blocks, each one has two links 4-lanes
	  each, A+B, C+D, E+F, Uniphy A, C and E are enumerated as link 0 in
	  each transmitter block B, D and F as link 1, third transmitter block
	  has non splitable links (UniphyE and UniphyF can not be configured
	  separately to drive two different streams)
		 Bit2: Link Select
		  =0: PHY linkACE
		  =1: PHY linkBDF
	 Bit[4:3]: Transmitter Selection
	  =00: Digital Transmitter1 ( UNIPHY linkAB )
	  =01: Digital Transmitter2 ( UNIPHY linkCD )
	  =02: Digital Transmitter3 ( UNIPHY linkEF )
	  =03: Reserved
 We need to convert from KHz units into 10KHz units 
 Unsupported clock source id 
 Invalid encoder id 
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 Unsupported DCE 
 real implementations 
	 TODO :case CONTROLLER_ID_UNDERLAY0:
		atom_id = ATOM_UNDERLAY_PIPE0;
		return true;
 Wrong controller id 
  dal_cmd_table_helper_transmitter_bp_to_atom2 - Translate the Transmitter to the
                                      corresponding ATOM BIOS value
   @t: transmitter
   returns: digitalTransmitter
      =00: Digital Transmitter1 ( UNIPHY linkAB )
      =01: Digital Transmitter2 ( UNIPHY linkCD )
      =02: Digital Transmitter3 ( UNIPHY linkEF )
 Invalid Transmitter Type! 
	TODO:case CLOCK_SOURCE_ID_DCPLL:
		ref_clk_src_id = ENCODER_REFCLK_SRC_DCPLL;
		return true;
 Unsupported clock source id 
 Invalid encoder id 
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
                   D I G E N C O D E R C O N T R O L
                   TRANSMITTER CONTROL
color_depth not used any more, driver has deep color factor in the Phyclk
color_depth not used any more, driver has deep color factor in the Phyclk
                   SET PIXEL CLOCK
		 Note: VBIOS still wants to use ucCRTC name which is now
		  1 byte in ULONG
		 typedef struct _CRTC_PIXEL_CLOCK_FREQ
		 {
		  target the pixel clock to drive the CRTC timing.
		  ULONG ulPixelClock:24;
		  0 means disable PPLLDCPLL. Expanded to 24 bits comparing to
		  previous version.
		  ATOM_CRTC1~6, indicate the CRTC controller to
		  ULONG ucCRTC:8;
		  drive the pixel clock. not used for DCPLL case.
		 }CRTC_PIXEL_CLOCK_FREQ;
		 union
		 {
		  pixel clock and CRTC id frequency
		  CRTC_PIXEL_CLOCK_FREQ ulCrtcPclkFreq;
		  ULONG ulDispEngClkFreq; dispclk frequency
		 };
                   SET CRTC TIMING
 bios usH_Size wants h addressable size 
 bios usH_Blanking_Time wants borders included in blanking 
 bios usV_Size wants v addressable size 
 bios usV_Blanking_Time wants borders included in blanking 
	 bios usHSyncOffset is the offset from the end of h addressable,
	  our horizontalSyncStart is the offset from the beginning
	  of h addressable
	 bios usHSyncOffset is the offset from the end of v addressable,
	  our verticalSyncStart is the offset from the beginning of
	  v addressable
	 we assume that overscan from original timing does not get bigger
	  than 255
	  we will program all the borders in the Set CRTC Overscan call below
		 original DAL code has this condition to apply this
		  for non-TVCV only
		  due to complex MV testing for possible impact
		  if ( pACParameters->signal != SignalType_YPbPr &&
		   pACParameters->signal != SignalType_Composite &&
		   pACParameters->signal != SignalType_SVideo)
			 HW will deduct 0.5 line from 2nd feild.
			  i.e. for 1080i, it is 2 lines for 1st field,
			  2.5 lines for the 2nd feild. we need input as 5
			  instead of 4.
			  but it is 4 either from Edid data (spec CEA 861)
			  or CEA timing table.
 ATOM_DOUBLE_CLOCK_MODE 
                   ENABLE CRTC
                   DISPLAY PLL
                   EXTERNAL ENCODER CONTROL
 TODO 
                   ENABLE DISPLAY POWER GATING
                   SET DCE CLOCK
		 only program clock frequency if display clock is used;
		  VBIOS will program DPREFCLK
		  We need to convert from KHz units into 10KHz units
 Convert from 10KHz units back to KHz 
                   GET SMU CLOCK INFO
 TODO add switch for table vrsion 
 Get Specific Clock 
                   LVTMA CONTROL
 TODO add switch for table vrsion 
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
	 On any ASIC after DCE80, we manually program the DIG_FE
	  selection (see connect_dig_be_to_fe function of the link
	  encoder), so translation should always return 0 (no FE).
 Should not happen 
 Unhandle action in driver.!! 
 Unhandle action in driver! 
 Unhandle action in driver! 
 Unhandle action in driver! 
 function table 
  dal_cmd_tbl_helper_dce110_get_table
  @brief
  Initialize command table helper functions
  @param
  const struct command_table_helper h - [out] struct of functions
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
	 On any ASIC after DCE80, we manually program the DIG_FE
	  selection (see connect_dig_be_to_fe function of the link
	  encoder), so translation should always return 0 (no FE).
 Should not happen 
 Unhandle action in driver.!! 
 Unhandle action in driver! 
 Unhandle action in driver! 
 Unhandle action in driver! 
 function table 
  dal_cmd_tbl_helper_dce110_get_table
  @brief
  Initialize command table helper functions
  @param
  const struct command_table_helper h - [out] struct of functions
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 Unhandle action in driver.!! 
			 for VCE encoding,
			  we need to pass in ATOM_PPLL_INVALID
 When programming DP DTO PLL ID should be invalid 
 check when this will happen! 
 Unhandle action in driver! 
  Copyright 2020 Mauro Rossi <issor.oruam@gmail.com>
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 Unhandle action in driver.!! 
			 for VCE encoding,
			  we need to pass in ATOM_PPLL_INVALID
 When programming DP DTO PLL ID should be invalid 
 check when this will happen! 
 Unhandle action in driver! 
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
	 On any ASIC after DCE80, we manually program the DIG_FE
	  selection (see connect_dig_be_to_fe function of the link
	  encoder), so translation should always return 0 (no FE).
			 for VCE encoding,
			  we need to pass in ATOM_PPLL_INVALID
 When programming DP DTO PLL ID should be invalid 
 Should not happen 
 Unhandle action in driver.!! 
 Unhandle action in driver! 
 function table 
  dal_cmd_tbl_helper_dce110_get_table
  @brief
  Initialize command table helper functions
  @param
  const struct command_table_helper h - [out] struct of functions
  Copyright 2020 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
   andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
	 TODOFPGA Figure out a proper number for max_retries polling for lock
	  use 50 for now.
	 poll dig_update_lock is not locked -> asic internal signal
	  assume otg master lock will unlock it
	 REG_WAIT(AFMT_VBI_PACKET_CONTROL, AFMT_GENERIC_LOCK_STATUS,
	  		0, 10, max_retries);
 TODO: Check if this is required 
 check if HW reading GSP memory 
	 HW does is not reading GSP memory not reading too long ->
	  something wrong. clear GPS memory access and notify?
	  hw SW is writing to GSP memory
 choose which generic packet to use 
	 write generic packet header
	  (4th byte is for GENERIC0 only)
	 write generic packet contents
	  (we never use last 4 bytes)
	  there are 8 (0-7) mmDIG0_AFMT_GENERIC0_x registers
	 atomically update double-buffered GENERIC0 registers in immediate mode
	  (update at next block_update when block_update_lock == 0).
  Copyright 2020 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 Init VMID 0 based on PA config
	
	  The DCHub arbiter has a mechanism to dynamically rate limit the DCHub request stream to the fabric.
	  If the memory controller is fully utilized and the DCHub requestors are
	  well ahead of their amortized schedule, then it is safe to prevent the next winner
	  from being committed and sent to the fabric.
	  The utilization of the memory controller is approximated by ensuring that
	  the number of outstanding requests is greater than a threshold specified
	  by the ARB_MIN_REQ_OUTSTANDING. To determine that the DCHub requestors are well ahead of the amortized schedule,
	  the slack of the next winner is compared with the ARB_SAT_LEVEL in DLG RefClk cycles.
	 
	  TODO: Revisit request limit after figure out right number. request limit for Renoir isn't decided yet, set maximum value (0x1FF)
	  to turn off it for now.
 copied from DML.  might want to refactor DML to leverage from DML 
 DML : get_blk256_size 
 full 256B request 
 half 128b request 
 full 256B request 
 half 128b request 
 implement section 1.6.2.1 of DCN1_Programming_Guide.docx 
 access_dir not known, must use most constraining 
			 reg128 is true for either horz and vert
			  but segment_order is contiguous
 Exception for 64KB_R_X 
 Copy values from WM set A to all other sets 
 184KB for DCN3 
  Copyright 2016-2020 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  Copyright 2020 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 debug option: put CM in bypass mode
Programmable RAM LUT
	fill in the LUT with all base values to be used by pwl module
	  HW auto increments the LUT index: back-to-back write
bypass if we have no pwl data
New registers in DCN3AGDCN GAMCOR block
New registers in DCN3AGDCN GAMCOR block
get register fields
program register set for LUTALUTB
select Gamma LUT to use for next frame
		this corresponds to GAMUT_REMAP coefficients set B
		 we don't have common coefficient sets in dcn3agdcn3
select coefficient set to use
 Bypass if type is bypass or hw 
current coefficient set in use
use coefficient set A
follow dcn2 approach for now - using only coefficient set A
  Copyright 2020 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 we only support 1 adapter currently 
 Set DWB source size 
 source size is not equal the source size, then enable cropping. 
 Set CAPTURE_RATE 
 Set WB_ENABLE (not double buffered; capture not enabled) 
 Set FC parameters 
 Program color processing unit 
 Program output denorm 
 Enable DWB capture enable (double buffered) 
 First pixel count 
 disable FC 
 disable WB 
	
	  Check if the caller has already locked DWB registers.
	  If so: assume the caller will unlock, so don't touch the lock.
	  If not: lock them for this update, then unlock after the
	  update is complete.
 Lock DWB registers 
 Set FC parameters 
 Program color processing unit 
 Program output denorm 
 Unlock DWB registers 
 Set output format
 Set output denorm 
TODO: rename
	
	  Set maximum delay of host read access to DWBSCL LUT or OGAM LUT if there are no
	  idle cycles in HW pipeline (in number of clock cycles times 4)
  Copyright 2020 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
program dwb ogam RAM A
todo
program dwb ogam RAM B
 Reserved value
 should never happen, bug 
 Bypass if type is bypass or hw 
  Copyright 2020 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
dpp->base.ctx
linear slope at start of curve
 driver uses 32 regions or less, but DCN HW has 34, extra 2 are set to 0 
		 32 segments
		  segments are from 2^-25 to 2^7
		 11 segments
		  segment is from 2^-10 to 2^0
		  There are less than 256 points, for optimization
 last point 
 All 3 color channels have same x
	 see comment above, m_arrPoints[1].y should be the Y value for the
	  region end (m_numOfHwPoints), not last HW point(m_numOfHwPoints - 1)
		 for PQHLG, we want to have a straight line from last HW X point,
		  and the slope to be such that we hit 1.0 at 100001000 nits.
	 12 segments
	  segments are from 2^-12 to 0
 last point 
	 see comment above, m_arrPoints[1].y should be the Y value for the
	  region end (m_numOfHwPoints), not last HW point(m_numOfHwPoints - 1)
		 for PQ, we want to have a straight line from last HW X point,
		  and the slope to be such that we hit 1.0 at 10000 nits.
	 corner_points[0] - beginning base, slope offset for R,G,B
	  corner_points[1] - end base, slope offset for R,G,B
  Copyright 2020 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 TODO: Implement for DCN3
program post scaler scs block in dpp CM
	 determine which CSC matrix (icsc or coma) we are using
	  currently.  select the alternate set to double buffer
	  the CSC update so CSC is updated on frame boundary
CNVC degam unit has read only LUTs
bypass
 ARGB16161616_UNORM 
 If input adjustment exists, program the ICSC with those values. 
 todo: clarify what to program these to 
	
	  Set default taps if none are provided
	  From programming guide: taps = min{ ceil(2H_RATIO,1), 8} for downscaling
	  taps = 4 for upscaling
 Only 1 and even h_taps_c are supported by hw 
Ensure we can support the requested number of vtaps
 Use LB_MEMORY_CONFIG_3 for 4:2:0 
 MAX_V_TAPS = MIN (NUM_LINES - MAX(CEILING(V_RATIO,1)-2, 0), 8) 
 only program if bypass was latched
 LUT select was updated again before vupdate
 only program if bypass was latched
 LUT select was updated again before vupdate
 only program if bypass was latched
 LUT select was updated again before vupdate
 only program if bypass was latched
 LUT select was updated again before vupdate
program blnd lut RAM A
program blnd lut RAM B
program shaper RAM A
program shaper RAM B
  select ramA or ramB, or bypass
  select color channel size 10 or 12 bits
  select 3dlut size 17x17x17 or 9x9x9
  load selected lut with 10 bits color channels
  Copyright 2020 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 ?
 ?
 ?
 writeback_line_buffer_buffer_size = 656640
 SRExitTime
 TODO: set this to actual min DCFCLK 
 ?
 ?
 ?
 begin 
  macros to expend register list macro defined in HW object header file
 DCN 
 TODO awful hack. fixup dcn20_dwb.h 
 NBIO 
 MMHUB 
 CLOCK 
 6:1 downscaling ratio: 10006 = 166.666 
No DMCU on DCN30
upto 8K
 -1 = disable,
No dmcu on DCN30
 -1 = disable
 Mapping of VPG, AFMT, DME register blocks to DIO block instance 
 Set writeback information 
 For IP that doesn't support WB scaling, set hv taps to 1 to avoid DML validation failure 
				 Workaround for cases where multiple writebacks are connected to same plane
				  In which case, need to compute worst case and set the associated writeback parameters
				  This workaround is necessary due to DML computation assuming only 1 set of writeback
				  parameters per pipe
 packed mode 32 bpp 
 packed mode 64 bpp 
 time_per_byte is in u6.6
 Writeback MCIF_WB arbitration parameters 
wb_arb_params = &context->res_ctx.pipe_ctx[i].stream->writeback_info[j].mcif_arb_params;
 time_per_pixel should be in u6.6 format 
 irrelevant since there is no YUV output 
 assume 4 watermark sets have the same value 
 num_clock_cycles = us  MHz 
	
	  May need to fix pipes getting tossed from 1 opp to another on flip
	  Add for debugging transient underflow during topology updates:
	  ASSERT(pipe);
		
		  DML favors voltage over p-state, but we're more interested in
		  supporting p-state over voltage. We can't support p-state in
		  prefetch mode > 0 so try capping the prefetch mode to start.
 This may adjust vlevel and maxMpcComb 
		
		  If mode is unsupported or there's still no p-state support then
		  fall back to favoring voltage.
		 
		  We don't actually support prefetch mode 2, so require that we
		  at least support prefetch mode 1.
 We only support full screen mpo with ODM 
 merge pipes if necessary 
skip pipes that don't need merging
 if ODM merge we ignore mpc tree, mpo pipes will have their own flags 
split off odm pipe
 Should never try to merge master pipe 
 Actual dsc count per stream dsc validation
  This must be noinline to ensure anything that deals with FP registers
  is contained within this call; previously our compiling with hard-float
  would result in fp instructions being emitted outside of the boundaries
  of the DC_FP_STARTEND macros, which makes sense as the compiler has no
  idea about what is wrapped and what is not
  This is largely just a workaround to avoid breakage introduced with 5.6,
  ideally all fp-using code should be moved into its own file, only that
  should be compiled with hard-float, and all code exported from there
  should be strictly wrapped with DC_FP_STARTEND
	 Set B:
	  DCFCLK: 1GHz or min required above 1GHz
	  FCLKUCLK: Max
	 Set D:
	  DCFCLK: Min Required
	  FCLK(proportional to UCLK): 1GHz or Max
	  MALL stutter, sr_enter_exit = 4, sr_exit = 2us
	
	if (dc->clk_mgr->bw_params->wm_table.nv_entries[WM_D].valid) {
		context->bw_ctx.dml.soc.dram_clock_change_latency_us = dc->clk_mgr->bw_params->wm_table.nv_entries[WM_D].dml_input.pstate_latency_us;
		context->bw_ctx.dml.soc.sr_enter_plus_exit_time_us = dc->clk_mgr->bw_params->wm_table.nv_entries[WM_D].dml_input.sr_enter_plus_exit_time_us;
		context->bw_ctx.dml.soc.sr_exit_time_us = dc->clk_mgr->bw_params->wm_table.nv_entries[WM_D].dml_input.sr_exit_time_us;
	}
	context->bw_ctx.bw.dcn.watermarks.d.urgent_ns = get_wm_urgent(&context->bw_ctx.dml, pipes, pipe_cnt)  1000;
	context->bw_ctx.bw.dcn.watermarks.d.cstate_pstate.cstate_enter_plus_exit_ns = get_wm_stutter_enter_exit(&context->bw_ctx.dml, pipes, pipe_cnt)  1000;
	context->bw_ctx.bw.dcn.watermarks.d.cstate_pstate.cstate_exit_ns = get_wm_stutter_exit(&context->bw_ctx.dml, pipes, pipe_cnt)  1000;
	context->bw_ctx.bw.dcn.watermarks.d.cstate_pstate.pstate_change_ns = get_wm_dram_clock_change(&context->bw_ctx.dml, pipes, pipe_cnt)  1000;
	context->bw_ctx.bw.dcn.watermarks.d.pte_meta_urgent_ns = get_wm_memory_trip(&context->bw_ctx.dml, pipes, pipe_cnt)  1000;
	context->bw_ctx.bw.dcn.watermarks.d.frac_urg_bw_nom = get_fraction_of_urgent_bandwidth(&context->bw_ctx.dml, pipes, pipe_cnt)  1000;
	context->bw_ctx.bw.dcn.watermarks.d.frac_urg_bw_flip = get_fraction_of_urgent_bandwidth_imm_flip(&context->bw_ctx.dml, pipes, pipe_cnt)  1000;
	context->bw_ctx.bw.dcn.watermarks.d.urgent_latency_ns = get_urgent_latency(&context->bw_ctx.dml, pipes, pipe_cnt)  1000;
	 Set C:
	  DCFCLK: Min Required
	  FCLK(proportional to UCLK): 1GHz or Max
	  pstate latency overridden to 5us
 find largest table entry that is lower than dram speed, but lower than DPM0 still uses DPM0 
		 The only difference between A and C is p-state latency, if p-state is not supported we want to
		  calculate DLG based on dummy p-state latency, and max out the set A p-state watermark
		 Set A:
		  DCFCLK: Min Required
		  FCLK(proportional to UCLK): 1GHz or Max
		 
		  Set A calculated last so that following calculations are based on Set A
 Make set D = set A until set D is enabled 
 Restore full p-state latency 
  This must be noinline to ensure anything that deals with FP registers
  is contained within this call; previously our compiling with hard-float
  would result in fp instructions being emitted outside of the boundaries
  of the DC_FP_STARTEND macros, which makes sense as the compiler has no
  idea about what is wrapped and what is not
  This is largely just a workaround to avoid breakage introduced with 5.6,
  ideally all fp-using code should be moved into its own file, only that
  should be compiled with hard-float, and all code exported from there
  should be strictly wrapped with DC_FP_STARTEND
 If max DCFCLK is greater than the max DCFCLK STA target, insert into the DCFCLK STA target array
 If max DCFCLK is less than the max DCFCLK STA target, cap values and remove duplicates
 Update size of array since we "removed" duplicates
 Calculate optimal dcfclk for each uclk
 Calculate optimal uclk for each dcfclk sta target
 create the final dcfclk and uclk table
 Fill all states with max values of all other clocks 
 These clocks cannot come from bw_params, always fill from dcn3_0_soc[1] 
 FCLK, PHYCLK_D18, SOCCLK, DSCCLK 
 re-init DML with updated bb 
 Support for max 6 pipes 
 fault to single pipe 
	
	   Resource + asic cap harcoding                
1.4 wa not applied by default
 total size = mall per channel  num channels  1024  1024 
 Color pipeline capabilities 
 must use gamma_corr
 no OGAM ROM on DCN3
3
 read VBIOS LTTPR caps 
 Init the vm_helper
	
	   Create resources                             
 Clock Sources for Pixel Clock
 todo: not reuse phy_pll registers 
 DCCG 
 PP Lib and SMU interfaces 
 IRQ 
 HUBBUB 
 HUBPs, DPPs, OPPs and TGs 
 PSR 
 ABM 
 MPC and DSC 
 DWB and MMHUBBUB 
 AUX and I2C 
 Audio, Stream Encoders including DIG and virtual, MPC 3D LUTs 
 HW Sequencer and Plane caps 
  Copyright 2020 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
	Contrary to DCN2 and DCN1 wherein a single status register field holds this info;
	 in DCN33AG, we need to read two separate fields to retrieve the same info
	
	  Powering on: force memory active so the LUT can be updated.
	  Powering off: allow entering memory low power mode
	 
	  Memory low power mode is controlled during MPC OGAM LUT init.
 Wait for memory to be powered on - we won't be able to write to it otherwise. 
New registers in DCN3AGDCN OGAM block
New registers in DCN3AGDCN OGAM block
	the entries of DCN3AG gamma LUTs take 18bit base values as opposed to
	 38 base+delta values per entry in earlier DCN architectures
	 last base value for our lut is compute by adding the last base value
	 in our data + last delta
disable OGAM
enable OGAM
we need to program 2 fields here as apposed to 1
 De-normalize Fixed U1.13 color data to different target bit depths. 0 is bypass
 not valid used case! 
program min and max clamp values for the pixel components
 wait for memory to fully power up 
read status is not mandatory, it is just for debugging
TODO Add rmu_idx == 2 for SIENNA_CICHLID 
should we shift red 22bit and green 12? ask Nvenko
		this corresponds to GAMUT_REMAP coefficients set B
		  we don't have common coefficient sets in dcn3agdcn3
select coefficient set to use
current coefficient set in use
use coefficient set A
determine if this mpcc is already multiplexed to an RMU unit
return rmu_idx of pre_acquired rmu unit
rmu unit is disabled
no vacant RMU units or invalid parameters acquire_post_bldn_3dlut
  Copyright 2020 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
   andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
		 enable transmission of packet(s) -
 send packet(s) every frame 
 select line number to send packets on 
 DP_SEC_GSP[x]_LINE_REFERENCE - keep default value REFER_TO_DP_SOF 
 choose which generic packet control to use 
 invalid HW packet index 
 for bring up, disable dp double  TODO 
Always add mandatory packets first followed by optional ones
 stop generic packets 0,1 on HDMI 
 stop generic packets 2,3 on HDMI 
 stop generic packets 4,5 on HDMI 
 stop generic packets 6,7 on HDMI 
 stop generic packets 8,9 on HDMI 
 stop generic packets 10,11 on HDMI 
 stop generic packets 12,13 on HDMI 
 stop generic packet 14 on HDMI 
 Set DSC-related configuration.
    dsc_mode: 0 disables DSC, other values enable DSC in specified format
    sc_bytes_per_pixel: Bytes per pixel in u3.28 format
    dsc_slice_width: Slice width in pixels
 Configure for PPS packet size (128 bytes) 
		 We need turn on clock before programming AFMT block
		 
		  TODO: We may not need this here anymore since update_generic_info_packet
		  no longer touches AFMT
 Load PPS into infoframe (SDP) registers 
		 SW should make sure VBID[6] update line number is bigger
		  than PPS transmit line number
		 Send PPS data at the line number specified above.
		  DP spec requires PPS to be sent only when it changes, however since
		  decoder has to be able to handle its change on every frame, we're
		  sending it always (i.e. on every frame) to reduce the chance it'd be
		  missed by decoder. If it turns out required to send PPS only when it
		  changes, we can use DP_SEC_GSP11_SEND register.
 Disable Generic Stream Packet 11 (GSP) transmission 
 this function read dsc related register fields to be logged later in dcn10_log_hw_state
  into a dcn_dsc_state struct.
if dsc is enabled, continue to read
 packetIndex 
 packetIndex 
 packetIndex 
	 packetIndex 4 is used for send immediate sdp message, and please
	  use other packetIndex (such as 5,6) for other info packet
	 enabledisable transmission of packet(s).
	  If enabled, packet transmission begins on the next frame
	 This bit is the master enable bit.
	  When enabling secondary stream engine,
	  this master bit must also be set.
	  This register shared with audio info frame.
	  Therefore we need to enable master bit
	  if at least on of the fields is not 0
 check if dynamic metadata packet transmission is enabled 
 setup stream encoder in dvi mode 
Set pattern for clock channel, default vlue 0x63 does not work
DIG_BE_TMDS_DVI_MODE : TMDS-DVI mode is already set in link_encoder_setup
DIG_SOURCE_SELECT is already set in dig_connect_to_otg
 set DIG_START to 0x1 to reset FIFO 
 write 0 to take the FIFO out of reset 
 setup stream encoder in hdmi mode 
Set pattern for clock channel, default vlue 0x63 does not work
DIG_BE_TMDS_HDMI_MODE : TMDS-HDMI mode is already set in link_encoder_setup
DIG_SOURCE_SELECT is already set in dig_connect_to_otg
 set DIG_START to 0x1 to reset FIFO 
 write 0 to take the FIFO out of reset 
 Configure pixel encoding 
 setup HDMI engine 
 Configure color depth 
		 enable HDMI data scrambler
		  HDMI_CLOCK_CHANNEL_RATE_MORE_340M
		  Clock channel frequency is 14 of character rate.
 TODO: New feature for DCE11, still need to implement 
		 enable HDMI data scrambler
		  HDMI_CLOCK_CHANNEL_FREQ_EQUAL_TO_CHAR_RATE
		  Clock channel frequency is the same
		  as character rate
 Enable transmission of General Control packet on every frame 
 following belongs to audio 
 Enable Audio InfoFrame packet transmission. 
 update double-buffered AUDIO_INFO registers immediately 
 Select line number on which to send Audio InfoFrame packets 
 set HDMI GC AVMUTE 
 --- DP Audio packet configurations --- 
 ATP Configuration 
 Asyncauto-calc timestamp mode 
 Setup audio in AFMT - program AFMT block associated with DIO 
 HDMI_AUDIO_PACKET_CONTROL 
 HDMI_ACR_PACKET_CONTROL 
 Program audio clock sampleregeneration parameters 
 HDMI_ACR_32_0__HDMI_ACR_CTS_32_MASK 
 HDMI_ACR_32_1__HDMI_ACR_N_32_MASK 
 HDMI_ACR_44_0__HDMI_ACR_CTS_44_MASK 
 HDMI_ACR_44_1__HDMI_ACR_N_44_MASK 
 HDMI_ACR_48_0__HDMI_ACR_CTS_48_MASK 
 HDMI_ACR_48_1__HDMI_ACR_N_48_MASK 
	 Video driver cannot know in advance which sample rate will
	  be used by HD Audio driver
	  HDMI_ACR_PACKET_CONTROL__HDMI_ACR_N_MULTIPLE field is
	  programmed below in interruppt callback
  Copyright 2020 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 The format of default addr is 48:12 of the 48 bit addr
 The format of highlow are 48:18 of the 48 bit addr
program flip type
 Program VMID reg
 turn off stereo if not in stereo
	 HW automatically latch rest of address register on write to
	  DCSURF_PRIMARY_SURFACE_ADDRESS if SURFACE_UPDATE_LOCK is not used
	 
	  program high first and then the low addr, order matters!
		 DCN1.0 does not support const color
		  TODO: program DCHUBBUB_RET_PATH_DCC_CFGx_01
		  base on address->grph.dcc_const_color
		  x = 0, 2, 4, 6 for pipe 0, 1, 2, 3 for rgb and luma
		  x = 1, 3, 5, 7 for pipe 0, 1, 2, 3 for chroma
always HW mode 
 for DMDATA flip, need to use SURFACE_UPDATE_LOCK 
 toggle DMDATA_UPDATED and set repeat and size 
 set DMDATA address 
	 otg is locked when this func is called. Register are double buffered.
	  disable the requestors is not needed
 DEDCN21-133: Inconsistent row starting line for flip between DPTE and Meta
 This is a chicken bit to enable the ECO fix.
hubp[i].HUBPREQ_DEBUG.HUBPREQ_DEBUG[26] = 1;
  Copyright 2020 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 wbif programming guide:
  1. set up wbif parameter:
     unsigned long long   luma_address[4];       4 frame buffer
     unsigned long long   chroma_address[4];
     unsigned int	   luma_pitch;
     unsigned int	   chroma_pitch;
     unsigned int         warmup_pitch=0x10;     256B align, the page size is 4KB when it is 0x10
     unsigned int	   slice_lines;           slice size
     unsigned int         time_per_pixel;         time per pixel, in ns
     unsigned int         arbitration_slice;      0: 2048 bytes 1: 4096 bytes 2: 8192 Bytes
     unsigned int         max_scaled_time;        used for QOS generation
     unsigned int         swlock=0x0;
     unsigned int         cli_watermark[4];      4 group urgent watermark
     unsigned int         pstate_watermark[4];   4 group pstate watermark
     unsigned int         sw_int_en;              Software interrupt enable, frame end and overflow
     unsigned int         sw_slice_int_en;        slice end interrupt enable
     unsigned int         sw_overrun_int_en;      overrun error interrupt enable
     unsigned int         vce_int_en;             VCE interrupt enable, frame end and overflow
     unsigned int         vce_slice_int_en;       VCE slice end interrupt enable, frame end and overflow
  2. configure wbif register
     a. call mmhubbub_config_wbif()
  3. Enable wbif
     call set_wbif_bufmgr_enable();
  4. wbif_dump_status(), option, for debug purpose
     the bufmgr status can show the progress of write back, can be used for debug purpose
 Set base address and region size for warmup 
	REG_SET(MMHUBBUB_WARMUP_P_VMID, 0, MMHUBBUB_WARMUP_P_VMID, params->p_vmid);
 Set address increment and enable warmup 
 Wait for an interrupt to signal warmup is completed 
 Acknowledge interrupt 
 Disable warmup 
 buffer address for packing mode or Luma in planar mode 
 buffer address for Chroma in planar mode (unused in packing mode) 
 buffer address for packing mode or Luma in planar mode 
 buffer address for Chroma in planar mode (unused in packing mode) 
 buffer address for packing mode or Luma in planar mode 
 buffer address for Chroma in planar mode (unused in packing mode) 
 buffer address for packing mode or Luma in planar mode 
 buffer address for Chroma in planar mode (unused in packing mode) 
	 setup luma & chroma size
	  should be enough to contain a whole frame Luma data,
	  the programmed value is frame buffer size [27:8], 256-byte aligned
 enable address fence 
 setup pitch, the programmed value is [15:8], 256B align 
 Programmed by the video driver based on the CRTC timing (for DWB) 
 Programming dwb watermark 
 Watermark to generate urgent in MCIF_WB_CLI, value is determined by MCIF_WB_CLI_WATERMARK_MASK. 
 Program in ns. A formula will be provided in the pseudo code to calculate the value. 
 urgent_watermarkA 
 urgent_watermarkB 
 urgent_watermarkC 
 urgent_watermarkD 
 Programming nb pstate watermark 
 nbp_state_change_watermarkA 
 nbp_state_change_watermarkB 
 nbp_state_change_watermarkC 
 nbp_state_change_watermarkD 
 dram_speed_change_duration 
 max_scaled_time 
 slice_lines 
 Set arbitration unit for LumaChroma 
 arb_unit=2 should be chosen for more efficiency 
 Arbitration size, 0: 2048 bytes 1: 4096 bytes 2: 8192 Bytes 
  Copyright 2020 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  Copyright 2020 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
get the shaper lut params
find the reason why logical layer assigned a differant mpcc_id into acquire_post_bldn_3dlut
loop through the available mux and release the requested mpcc_id
 program OGAM or 3DLUT only for the top pipe
program rmu shaper and 3dlut in MPC
 there are no ROM LUTs in OUTGAM 
 set DWB MPC mux 
 set MCIF_WB buffer and arbitration configuration 
 update DWB 
make sure there is no active DWB eanbled 
can not do warmup while any dwb enabled
check whether this is new interface: warmup big buffer once
mmhubbub is shared, so it does not matter which MCIF
warmup a big chunk of VM buffer at once
following is the original: warmup each DWB's mcif buffer
warmup is for VM mode only
 Warmup MCIF_WB 
 set the OPTC source mux 
till diags switch to warmup interface
 Update writeback pipe 
 Enable MCIF_WB 
 Enable DWB 
 disable DWB 
 disable MCIF 
 disable MPC DWB mux 
 For each writeback pipe 
 copy writeback info to local non-const so mpcc_inst can be set 
 get the MPCC instance for writeback_source_plane 
				 Disable writeback pipe and disconnect from MPCC
				  if source plane has been removed
 writeback pipe already enabled, only need to update 
 Enable writeback pipe and connect to MPCC 
 Disable writeback pipe and disconnect from MPCC 
 Initialize the dccg
 enable all DCN clock gating 
Enable ability to power gate  don't force power on permanently
 Force ERAM to shutdown if DMCU is not enabled
 Set default OPTC memory power states
 Shutdown when unassigned and light sleep in VBLANK
 Not all ASICs have DCCG sw component
		 Power up AND update implementation according to the
		  required signal (which may be different from the
		  default signal on connector).
 Check for enabled DIG to identify enabled display 
 Power gate DSCs 
 we want to turn off all dp displays before doing detection 
 DP 2.0 states that LTTPR regs must be read first 
 if any of the displays are lit up turn them off 
 blank dp stream before power off receiver
	 If taking control over from VBIOS, we may want to optimize our first
	  mode set, so we need to skip powering down pipes until we know which
	  pipes we want to use.
	  Otherwise, if taking control is not possible, we need to power
	  everything down.
	 In headless boot cases, DIG may be turned
	  on which causes HWSW discrepancies.
	  To avoid this, power down hardware on boot
	  if DIG is turned on and seamless boot not enabled
 power AFMT HDMI memory TODO: may move to disen output save power
 enable all DCN clock gating 
 this is not root pipe 
 if using dynamic meta, don't set up generic infopackets 
 First, check no-memory-requests case 
 Fail eligibility on a visible stream 
 Enable no-memory-requests case 
			
			  Second, check MALL eligibility
			 
			  single display only, single surface only, 8 and 16 bit formats only, no VM,
			  do not use MALL for displays that support PSR as they use D0i3.2 in DMCUB FW
			 
			  TODO: When we implement multi-display, PSR displays will be allowed if there is
			  a non-PSR display present, since in that case we can't do D0i3.2
				
				  one frame time in microsec:
				  Delay_Us = 1000000  refresh
				  dynamic_delay_us = 1000000  refresh + 2  stutter_period
				 
				  one frame time modified by 'additional timer percent' (p):
				  Delay_Us_modified = dynamic_delay_us + dynamic_delay_us  p  100
				                    = dynamic_delay_us  (1 + p  100)
				                    = (1000000  refresh + 2  stutter_period)  (100 + p)  100
				                    = (1000000 + 2  stutter_period  refresh)  (100 + p)  (100  refresh)
				 
				  formula for timer duration based on parameters, from regspec:
				  dynamic_delay_us = 65.28  (64 + MallFrameCacheTmrDly)  2^MallFrameCacheTmrScale
				 
				  dynamic_delay_us  65.28 = (64 + MallFrameCacheTmrDly)  2^MallFrameCacheTmrScale
				  (dynamic_delay_us  65.28)  2^MallFrameCacheTmrScale = 64 + MallFrameCacheTmrDly
				  MallFrameCacheTmrDly = ((dynamic_delay_us  65.28)  2^MallFrameCacheTmrScale) - 64
				                       = (1000000 + 2  stutter_period  refresh)  (100 + p)  (100  refresh)  65.28  2^MallFrameCacheTmrScale - 64
				                       = (1000000 + 2  stutter_period  refresh)  (100 + p)  (refresh  6528  2^MallFrameCacheTmrScale) - 64
				 
				  need to round up the result of the division before the subtraction
				 In some cases the stutter period is really big (tiny modes) in these
				  cases MALL cant be enabled, So skip these cases to avoid a ASSERT()
				 
				  We can check if stutter_period is more than 110th the frame time to
				  consider if we can actually meet the range of hysteresis timer
 scale should be increased until it fits into 6 bits 
 Delay exceeds range of hysteresis timer 
 Copy HW cursor 
 Use copied cursor, and it's okay to not switch back 
 Enable MALL 
 No applicable optimizations 
 Disable MALL 
 add meta size?
 if pstate unsupported, force it supported 
 turning on DPG 
 Defer hubp blank if tg is locked 
 Blank HUBP to allow p-state during blank on all timings 
 turning off DPG 
  Copyright 2020 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 #include "dcn3agdcn3ag_phy_fw.h" 
	 set the flag to indicate whether driver poll the I2C data pin
	  while doing the DP sink detect
	if (dal_adapter_service_is_feature_supported(as,
		FEATURE_DP_SINK_DETECT_POLL_DATA_PIN))
		enc10->base.features.flags.bits.
	 For DCE 8.0 and 8.1, by design, UNIPHY is hardwired to DIG_BE.
	  SW always assign DIG_FE 1:1 mapped to DIG_FE for non-MST UNIPHY.
	  SW assign DIG_FE to non-MST UNIPHY first and MST last. So prefer
	  DIG is per UNIPHY and used by SST DP, eDP, HDMI, DVI and LVDS.
	  Prefer DIG assignment is decided by board design.
	  For DCE 8.0, there are only max 6 UNIPHYs, we assume board design
	  and VBIOS will filter out 7 UNIPHY for DCE 8.0.
	  By this, adding DIGG should not hurt DCE 8.0.
	  This will let DCE 8.1 share DCE 8.0 as much as possible
 default to one to mirror Windows behavior 
 Override features with DCE-specific values 
	00 - DP_AUX_DPHY_RX_DETECTION_THRESHOLD__1to2 : 12
	01 - DP_AUX_DPHY_RX_DETECTION_THRESHOLD__3to4 : 34
	02 - DP_AUX_DPHY_RX_DETECTION_THRESHOLD__7to8 : 78
	03 - DP_AUX_DPHY_RX_DETECTION_THRESHOLD__15to16 : 1516
	04 - DP_AUX_DPHY_RX_DETECTION_THRESHOLD__31to32 : 3132
	05 - DP_AUX_DPHY_RX_DETECTION_THRESHOLD__63to64 : 6364
	06 - DP_AUX_DPHY_RX_DETECTION_THRESHOLD__127to128 : 127128
	07 - DP_AUX_DPHY_RX_DETECTION_THRESHOLD__255to256 : 255256
	AUX_REG_UPDATE_5(AUX_DPHY_RX_CONTROL0,
	AUX_RX_START_WINDOW = 1 [6:4]
	AUX_RX_RECEIVE_WINDOW = 1 default is 2 [10:8]
	AUX_RX_HALF_SYM_DETECT_LEN  = 1 [13:12] default is 1
	AUX_RX_TRANSITION_FILTER_EN = 1 [16] default is 1
	AUX_RX_ALLOW_BELOW_THRESHOLD_PHASE_DETECT [17] is 0  default is 0
	AUX_RX_ALLOW_BELOW_THRESHOLD_START [18] is 1  default is 1
	AUX_RX_ALLOW_BELOW_THRESHOLD_STOP [19] is 1  default is 1
	AUX_RX_PHASE_DETECT_LEN,  [21,20] = 0x3 default is 3
	AUX_RX_DETECTION_THRESHOLD [30:28] = 1
AUX_DPHY_TX_REF_CONTROL'AUX_TX_REF_DIV HW default is 0x32;
 Set AUX_TX_REF_DIV Divider to generate 2 MHz reference from refclk
 27MHz -> 0xd
 100MHz -> 0x32
 48MHz -> 0x18
 Set TMDS_CTL0 to 1.  This is a legacy setting.
  Copyright 2020 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 there is a DIG_UPDATE_VCOUNT_MODE and it is 0.
 Set DSC-related configuration.
    dsc_mode: 0 disables DSC, other values enable DSC in specified format
    sc_bytes_per_pixel: Bytes per pixel in u3.28 format
    dsc_slice_width: Slice width in pixels
	 TODO: In pseudocode but does not affect maximus, delete comment if we dont need on asic
	  REG_SET(OTG_GLOBAL_CONTROL2, 0, GLOBAL_UPDATE_LOCK_EN, 1);
	  Program OTG register MASTER_UPDATE_LOCK_DB_XY to the position before DP frame start
	  REG_SET_2(OTG_GLOBAL_CONTROL1, 0,
	 		MASTER_UPDATE_LOCK_DB_X, 160,
	 		MASTER_UPDATE_LOCK_DB_Y, 240);
	 2 pieces of memory required for up to 5120 displays, 4 for up to 8192,
	  however, for ODM combine we can simplify by always using 4.
		 To make sure there's no memory overlap, each instance "reserves" 2
		  memories and they are uniquely combined here.
		 To make sure there's no memory overlap, each instance "reserves" 1
		  memory and they are uniquely combined here.
  optc3_set_timing_double_buffer() - DRR double buffering control
  Sets double buffer point for V_TOTAL, H_TOTAL, VTOTAL_MIN,
  VTOTAL_MAX, VTOTAL_MIN_SEL and VTOTAL_MAX_SEL registers.
  Options: any time,  start of frame, dp start of frame (range timing)
 used by enable_timing_synchronization. Not need for FPGA 
 used by enable_timing_synchronization. Not need for FPGA 
  Copyright 2020 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
   andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 AFMT_AUDIO_PACKET_CONTROL 
 AFMT_AUDIO_PACKET_CONTROL2 
	 AFMT_60958_0__AFMT_60958_CS_CHANNEL_NUMBER_L_MASK &
	  AFMT_60958_0__AFMT_60958_CS_CLOCK_ACCURACY_MASK
 AFMT_60958_1 AFMT_60958_CS_CHALNNEL_NUMBER_R 
	 AFMT_60958_2 now keep this settings until
	  Programming guide comes out
 these are one to one 
	 if Rear Left and Right exist move RC speaker to channel 7
	  otherwise to channel 5
 FRONT Left Right Center and REAR Left Right Center are exclusive 
 This should not happen.it does so we don't get BSOD
 setup the audio stream source select (audio -> dig mapping) 
 Channel allocation 
 Disable forced mem power off 
 enabledisable transmission of audio packets 
 update double-buffered AUDIO_INFO registers immediately 
 AFMT_AUDIO_PACKET_CONTROL 
 AFMT_AUDIO_PACKET_CONTROL2 
 Program the ATP and AIP next 
 AFMT_INFOFRAME_CONTROL0 
 AFMT_60958_0__AFMT_60958_CS_CLOCK_ACCURACY_MASK 
  Copyright 2020 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
	 set the flag to indicate whether driver poll the I2C data pin
	  while doing the DP sink detect
	if (dal_adapter_service_is_feature_supported(as,
		FEATURE_DP_SINK_DETECT_POLL_DATA_PIN))
		enc10->base.features.flags.bits.
	 For DCE 8.0 and 8.1, by design, UNIPHY is hardwired to DIG_BE.
	  SW always assign DIG_FE 1:1 mapped to DIG_FE for non-MST UNIPHY.
	  SW assign DIG_FE to non-MST UNIPHY first and MST last. So prefer
	  DIG is per UNIPHY and used by SST DP, eDP, HDMI, DVI and LVDS.
	  Prefer DIG assignment is decided by board design.
	  For DCE 8.0, there are only max 6 UNIPHYs, we assume board design
	  and VBIOS will filter out 7 UNIPHY for DCE 8.0.
	  By this, adding DIGG should not hurt DCE 8.0.
	  This will let DCE 8.1 share DCE 8.0 as much as possible
 default to one to mirror Windows behavior 
 Override features with DCE-specific values 
  Copyright 2020 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  Copyright 2019-2021 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 begin 
  macros to expend register list macro defined in HW object header file
 DCN 
 TODO awful hack. fixup dcn20_dwb.h 
 NBIO 
 MMHUB 
 CLOCK 
 6:1 downscaling ratio: 10006 = 166.666 
upto 8K
 -1 = disable
 -1 = disable
 RV1 support max 4 pipes 
 Mapping of VPG, AFMT, DME register blocks to DIO block instance 
 Notify PP LibSMU which Watermarks to use for which clock ranges 
	
	   Resource + asic cap harcoding                
1.4 wa enabled by default
 Color pipeline capabilities 
 must use gamma_corr
 no OGAM ROM on DCN301
2
 Init the vm_helper
	
	   Create resources                             
 Clock Sources for Pixel Clock
 todo: not reuse phy_pll registers 
 DCCG 
 IRQ 
 HUBBUB 
 HUBPs, DPPs, OPPs and TGs 
		 if pipe is disabled, skip instance of HW pipe,
		  i.e, skip ASIC register instance
 ABM (or ABMs for NV2x) 
 TODO: 
 MPC and DSC 
 DWB and MMHUBBUB 
 AUX and I2C 
 Audio, Stream Encoders including HPO and virtual, MPC 3D LUTs 
 HW Sequencer and Plane caps 
  Copyright 2020 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  Copyright 2020 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
	 It must not be 0, so we have to restore them
	  Bios bug wa - period resets to zero,
	  restoring to cache values which is always correct
			 TODO: Note: This should not really happen since VBIOS
			  should have initialized PWM registers on boot.
 Enable the backlight output
 Unlock group 2 backlight registers
 Copyright 2020 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 184KB for DCN3 
  Copyright 2016-2020 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
			 init sequence workaround: in case HUBP is
			  power gated, this wait would timeout.
			 
			  we just wrote reg_val to non-0, if it stay 0
			  it means HUBP is gated
 set HBUBREQ_DEBUG_DB[12] = 1 
 hack mode disable 
		 if (eco_fix_needed(otg_global_sync_timing)
	 Program data and meta surface pitch (calculation from addrlib)
	  444 or 420 luma
 Chroma pitch zero can cause system hang! 
 Program rotation angle and horz mirror - no mirror 
 swap for ABGR format 
 Mapping is same as ipp programming (cnvc) 
we use crossbar already
 ARGB16161616_UNORM 
we use crossbar already
 don't see the need of program the xbar in DCN 1.0 
program flip type
 turn off stereo if not in stereo
	 HW automatically latch rest of address register on write to
	  DCSURF_PRIMARY_SURFACE_ADDRESS if SURFACE_UPDATE_LOCK is not used
	 
	  program high first and then the low addr, order matters!
		 DCN1.0 does not support const color
		  TODO: program DCHUBBUB_RET_PATH_DCC_CFGx_01
		  base on address->grph.dcc_const_color
		  x = 0, 2, 4, 6 for pipe 0, 1, 2, 3 for rgb and luma
		  x = 1, 3, 5, 7 for pipe 0, 1, 2, 3 for chroma
 DLG - Per hubp 
 DLG - Per lumachroma 
 TTU - per hubp 
 TTU - per lumachroma 
 Assumed surf0 is luma and 1 is chroma 
	 otg is locked when this func is called. Register are double buffered.
	  disable the requestors is not needed
 = 0;
 1 = system physical memory 
 pte base 
 pte start 
 pte end 
 fault handling 
 control: enable VM PTE
for stereo
 DC supports NV12 only at the moment 
 Requester 
 On DCN1, aperture is broken down into MSB and LSB; only keep bits [47:18] to match later DCN format
 DLG - Per hubp 
 DLG - Per lumachroma 
 TTU - per hubp 
 TTU - per lumachroma 
 Assumed surf0 is luma and 1 is chroma 
 Rest of hubp 
 impl B. expansion in CUR Buffer reader 
 no shift of the cursor HDL schedule 
 used to shift the cursor chunk request deadline 
	
	  Guard aganst cursor_set_position() from being called with invalid
	  attributes
	 
	  TODO: Look at combining cursor_set_position() and
	  cursor_set_attributes() into cursor_update()
 Rotated cursor widthheight and hotspots tweaks for offset calculation
 not visible beyond right edge
 not visible beyond left edge
 not visible beyond bottom edge
 not visible beyond top edge
 TODO Handle surface pixel formats other than 4:4:4 
  hubp1_clk_cntl - Disable or enable clocks for DCHUBP
  @hubp: hubp struct reference.
  @enable: Set true for enabling gate clock.
  When enablingdisabling DCHUBP clock, we affect dcfclkdppclk.
  hubp1_set_flip_int - Enable surface flip interrupt
  @hubp: hubp struct reference.
do nothing
 Constructor, Destructor               
  Copyright 2016-2020 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  Copyright 2016 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
print is 17 wide, first two characters are spaces
		
		  Only lock the top pipe's tg to prevent redundant
		  (un)locking. Also skip if pipe is disabled.
 Read shared OTG state registers for all DCNx 
		
		  For DCN2 and greater, a register on the OPP is used to
		  determine if the CRTC is blanked instead of the OTG. So use
		  dpg_is_blanked() if exists, otherwise fallback on otg.
		 
		  TODO: Implement DCN-specific read_otg_state hooks.
only print if OTG master is enabled
 Clear underflow for debug purposes
 We want to keep underflow sticky bit on for the longevity tests outside of test environment.
 This function is called only from Windows or Diags test environment, hence it's safe to clear
 it from here without affecting the original intent.
 dcn_dsc_state struct field bytes_per_pixel was renamed to bits_per_pixel
 TODO: Update golden log header to reflect this name change
 log DP HPO L_ENC section if any hpo_dp_link_enc exists 
 disable power gating 
 DCHUBP0123 
 DPP0123 
	 HW Engineer's Notes:
	   During switch from vga->extended, if we set the VGA_TEST_ENABLE and
	   then hit the VGA_TEST_RENDER_START, then the DCHUBP timing gets updated correctly.
	 
	   Then vBIOS will have it poll for the VGA_TEST_RENDER_DONE and unset
	   VGA_TEST_ENABLE, to leave it in the same state as before.
  dcn10_dpp_pg_control - DPP power gate control.
  @hws: dce_hwseq reference.
  @dpp_inst: DPP instance reference.
  @power_on: true if we want to enable power gate, false otherwise.
  Enable or disable power gate in the specific DPP instance.
 DPP0 
 DPP1 
 DPP2 
 DPP3 
  dcn10_hubp_pg_control - HUBP power gate control.
  @hws: dce_hwseq reference.
  @hubp_inst: DPP instance reference.
  @power_on: true if we want to enable power gate, false otherwise.
  Enable or disable power gate in the specific HUBP instance.
 DCHUBP0 
 DCHUBP1 
 DCHUBP2 
 DCHUBP3 
 all pipe power gated, apply work around to enable stutter. 
	 WA for making DF sleep when idle after resume from S0i3.
	  DCHUBBUB_ARB_ALLOW_SELF_REFRESH_FORCE_ENABLE is set to 1 by
	  command table, if DCHUBBUB_ARB_ALLOW_SELF_REFRESH_FORCE_ENABLE = 0
	  before calling command table and it changed to 1 after,
	  it should be set back to 0.
 initialize dcn global 
 initialize dcn per pipe 
	 by upper caller loop, pipe0 is parent pipe and be called first.
	  back end is set up by for pipe0. Other children pipe share back end
	  with pipe 0. No program is needed.
 TODO check if timing_changed, disable stream if timing changed 
	 HW program guide assume display already disable
	  by unplug sequence. OTG assume stop.
 move to after enable_crtc 
 TODO: OPP FMT, ABM. etc. should be done here. 
 or FPGA now. instance 0 only. TODO: move to opp.c 
 program otg blank color 
	
	  The way 420 is packed, 2 channels carry Y component, 1 channel
	  alternate between Cb and Cr, so both channels need the pixel
	  value for Y
 VTG is  within DCHUB command block. DCFCLK is always on 
 TODO program crtc source select for non-virtual signal
 TODO program FMT 
 TODO setup link_enc 
 TODO set stream attributes 
 TODO program audio 
 TODO enable stream if timing changed 
 TODO unblank stream if DP 
 DPMS may already disable or 
		 dpms_off status is incorrect due to fastboot
		  feature. When system resume from S4 with second
		  screen only, the dpms_off would be true but
		  VBIOS lit up eDP, so check link status too.
disable az_endpoint
free audio
we have to dynamic arbitrate the audio endpoints
we free the resource, need reset is_audio_acquired
	 by upper caller loop, parent pipe: pipe0, will be reset last.
	  back end share by all pipes and will be disable only when disable
	  parent pipe.
 one pipe underflow, we will reset all the pipes
	
	DCHUBP_CNTL:HUBP_BLANK_EN=1
	DCHUBBUB_SOFT_RESET:DCHUBBUB_GLOBAL_SOFT_RESET=1
	DCHUBP_CNTL:HUBP_DISABLE=1
	DCHUBP_CNTL:HUBP_DISABLE=0
	DCHUBBUB_SOFT_RESET:DCHUBBUB_GLOBAL_SOFT_RESET=0
	DCSURF_PRIMARY_SURFACE_ADDRESS
	DCHUBP_CNTL:HUBP_BLANK_EN=0
DCHUBP_CNTL:HUBP_BLANK_EN=1
DCHUBBUB_SOFT_RESET:DCHUBBUB_GLOBAL_SOFT_RESET=1
DCHUBP_CNTL:HUBP_DISABLE=1
DCHUBP_CNTL:HUBP_DISABLE=0
DCHUBBUB_SOFT_RESET:DCHUBBUB_GLOBAL_SOFT_RESET=0
DCHUBP_CNTL:HUBP_BLANK_EN=0
 prevent hw state log by default 
check again
 trigger HW to start disconnect plane from stream on the next vsync 
Already reset
  dcn10_plane_atomic_power_down - Power down plane components.
  @dc: dc struct reference. used for grab hwseq.
  @dpp: dpp struct reference.
  @hubp: hubp struct reference.
  Keep in mind that this operation requires a power gate configuration;
  however, requests for switch power gate are precisely controlled to avoid
  problems. For this reason, power gate request is usually disabled. This
  function first needs to enable the power gate request before disabling DPP
  and HUBP. Finally, it disables the power gate request again.
 disable HW used by plane.
  note:  cannot disable until disconnect is complete
 We're powering off, no need to optimize 
		 There is assumption that pipe_ctx is not mapping irregularly
		  to non-preferred front end. If pipe_ctx->stream is not NULL,
		  we will use the pipe, so don't disable
		 Blank controller using driver code instead of
		  command table.
 num_opp will be equal to number of mpcc 
 Cannot reset the MPC mux if seamless boot 
		 There is assumption that pipe_ctx is not mapping irregularly
		  to non-preferred front end. If pipe_ctx->stream is not NULL,
		  we will use the pipe, so don't disable
 Enable double buffering for OTG_BLANK no matter if
 seamless boot is enabled or not to suppress global sync
 signals when OTG blanked. This is to prevent pipe from
 requesting data while in PSR.
 Disable on the current state so the new one isn't cleared. 
 Align bw context with hw config when system resume. 
 Initialize the dccg
 enable all DCN clock gating 
Enable ability to power gate  don't force power on permanently
 Not all ASICs have DCCG sw component
		 Power up AND update implementation according to the
		  required signal (which may be different from the
		  default signal on connector).
 Check for enabled DIG to identify enabled display 
 Power gate DSCs 
 Enable outbox notification feature of dmub 
 we want to turn off all dp displays before doing detection 
 DP 2.0 requires that LTTPR Caps be read first 
			
			  If any of the displays are lit up turn them off.
			  The reason is that some MST hubs cannot be turned off
			  completely until we tell them to do so.
			  If not turned off, then displays connected to MST hub
			  won't light up.
 blank dp stream before power off receiver
	 If taking control over from VBIOS, we may want to optimize our first
	  mode set, so we need to skip powering down pipes until we know which
	  pipes we want to use.
	  Otherwise, if taking control is not possible, we need to power
	  everything down.
 power AFMT HDMI memory TODO: may move to disen output save power
 enable all DCN clock gating 
 In headless boot cases, DIG may be turned
  on which causes HWSW discrepancies.
  To avoid this, power down hardware on boot
  if DIG is turned on
	
	  Call update_clocks with empty context
	  to send DISPLAY_OFF
	  Otherwise DISPLAY_OFF may not be asserted
 Reset Back End
 DC_LOG_GAMMA is default logging of all hw points
 DC_LOG_ALL_GAMMA logs all points, not only hw points
 DC_LOG_ALL_TF_POINTS logs all channels of the tf
	 dcn10_translate_regamma_to_hw_format takes 750us, only do it when full
	  update.
	 use TG master update lock to lock everything on the TG
	  therefore only top pipe need to lock
  delay_cursor_until_vupdate() - Delay cursor update if too close to VUPDATE.
  Software keepout workaround to prevent cursor update locking from stalling
  out cursor updates indefinitely or from old values from being retained in
  the case where the viewport changes in the same frame as the cursor.
  The idea is to calculate the remaining time from VPOS to VUPDATE. If it's
  too close to VUPDATE, then stall out until VUPDATE finishes.
  TODO: Optimize cursor programming to be once per frame before VUPDATE
        to avoid the need for this workaround.
 Avoid wraparound calculation issues 
 VPOS is in VACTIVE or back porch. 
 VPOS is in the front porch. 
 VPOS is in VUPDATE. 
 Calculate time until VUPDATE in microseconds. 
 70 us is a conservative estimate of cursor update time
 Stall out until the cursor update completes. 
 cursor lock is per MPCC tree, so only need to lock one pipe per stream 
 Prevent cursor lock from stalling out cursor updates. 
	 To avoid endless loop we wait at most
 usually occurs at i=1 
 Wait for one frame. 
					
					  this will help to stop reporting
					  this timing synchronizable
	 Need to get only check 1 pipe for having reset as all the others are
	  synchronized. Look at last pipe programmed to reset.
 Temporary read settings, future will get values from kmd directly 
	
	  The values in VM_CONTEXT0_PAGE_TABLE_BASE_ADDR is in UMA space.
	  Therefore we need to do
	  DCN_VM_CONTEXT0_PAGE_TABLE_BASE_ADDR = VM_CONTEXT0_PAGE_TABLE_BASE_ADDR
	  - DCHUBBUB_SDPIF_FB_OFFSET + DCHUBBUB_SDPIF_FB_BASE
 enable DCFCLK current DCHUB 
 make sure OPP_PIPE_CLOCK_EN = 1 
 Traverse to top pipe_ctx
 Front MPO plane not hidden
 Override rear plane RGB bias to fix MPO brightness
			 MPO is broken with RGB colorspaces when OCSC matrix
			  brightness offset >= 0 on DCN1 due to OCSC before MPC
			  Blending adds offsets from front + rear to rear plane
			 
			  Fix is to set RGB bias to 0 on rear plane, top plane
			  black value pixels add offset instead of rear + front
 matrix[3711] are all the same offset value
 program the input csc
set scale and bias registers
	 DCN1.0 has output CM before MPC which seems to screw with
	  pre-multiplied alpha.
	
	  TODO: remove hack
	  Note: currently there is a bug in init_hw such that
	  on resume from hibernate, BIOS sets up MPCC0, and
	  we do mpcc_remove but the mpcc cannot go to idle
	  after remove. This cause us to pick mpcc1 here,
	  which causes a pstate hang for yet unknown reason.
 If there is no full update, don't need to touch MPC tree
 check if this MPCC is already being used 
 remove MPCC if being used 
 Call MPC to insert new plane 
 scaler configuration 
 depends on DML calculation, DPP clock value may change dynamically 
	 If request max dpp clk is lower than current dispclk, no need to
	  divided by 2
		 new calculated dispclk, dppclk are stored in
		  context->bw_ctx.bw.dcn.clk.dispclk_khz  dppclk_khz. current
		  dispclk, dppclk are from dc->clk_mgr->clks.dispclk_khz.
		  dcn_validate_bandwidth compute new dispclk, dppclk.
		  dispclk will put in use after optimize_bandwidth when
		  ramp_up_dispclk_with_dpp is called.
		  there are two places for dppclk be put in use. One location
		  is the same as the location as dispclk. Another is within
		  update_dchubp_dpp which happens between pre_bandwidth and
		  optimize_bandwidth.
		  dppclk updated within update_dchubp_dpp will cause new
		  clock values of dispclk and dppclk not be in use at the same
		  time. when clocks are decreased, this may cause dppclk is
		  lower than previous configuration and let pipe stuck.
		  for example, eDP + external dp,  change resolution of DP from
		  1920x1080x144hz to 1280x960x60hz.
		  before change: dispclk = 337889 dppclk = 337889
		  change mode, dcn_validate_bandwidth calculate
		                 dispclk = 143122 dppclk = 143122
		  update_dchubp_dpp be executed before dispclk be updated,
		  dispclk = 337889, but dppclk use new value dispclk 2 =
		  168944. this will cause pipe pstate warning issue.
		  solution: between pre_bandwidth and optimize_bandwidth, while
		  dispclk is going to be decreased, keep dppclk = dispclk
	 TODO: Need input parameter to tell current DCHUB pipe tie to which OTG
	  VTG is within DCHUBBUB which is commond block share by each pipe HUBP.
	  VTG is 1:1 mapping with OTG. Each pipe HUBP will select which VTG
gamut remap
 program otg blank color 
	
	  The way 420 is packed, 2 channels carry Y component, 1 channel
	  alternate between Cb and Cr, so both channels need the pixel
	  value for Y
 1.0 default multiplier
 check != 0
	 dcn10_translate_regamma_to_hw_format takes 750us to finish
	  only do gamma programming for full update.
	  TODO: This can be further optimizedcleaned up
	  Always call this for now since it does memcmp inside before
	  doing heavy calculation and programming
			
			  Only wait for top pipe's tg penindg bit
			  Also skip if pipe is disabled.
			
			  Wait for VBLANK then VACTIVE to ensure we get VUPDATE.
			  For some reason waiting for OTG_UPDATE_PENDING cleared
			  seems to not trigger the update right away, and if we
			  lock again before VUPDATE then we don't get a separated
			  operation.
			
			  Disable stutter
 DRR set trigger event mapped to OTG_TRIG_A (bit 11) for manual control flow
 Note DRR trigger events are generated regardless of whether num frames met.
	 TODO: If multiple pipes are to be supported, you need
	  some GSL stuff. Static screen triggers may be programmed differently
	  as well.
	 TODO: handle pipes > 1
 In DCN, this programming sequence is owned by the hubbub 
	
	  Disable the cursor if there's another pipe above this with a
	  plane that contains this pipe's viewport to prevent double cursor
	  and incorrect scaling artifacts.
 Skip invisible layer and pipe-split plane on same layer
		
		  There is another half plane on same layer because of
		  pipe-split, merge together per same height.
	
	  DC cursor is stream space, HW cursor is plane space and drawn
	  as part of the framebuffer.
	 
	  Cursor position can't be negative, but hotspot can be used to
	  shift cursor out of the plane bounds. Hotspot must be smaller
	  than the cursor size.
	
	  Translate cursor from stream space to plane space.
	 
	  If the cursor is scaled then we need to scale the position
	  to be in the approximately correct place. We can't do anything
	  about the actual size being incorrect, that's a limitation of
	  the hardware.
	
	  If the cursor's source viewport is clipped then we need to
	  translate the cursor to appear in the correct position on
	  the screen.
	 
	  This translation isn't affected by scaling so it needs to be
	  done after we adjust the position for the scale factor.
	 
	  This is only done by opt-in for now since there are still
	  some usecases like tiled display that might enable the
	  cursor on both streams while expecting dc to clip it.
	
	  If the position is negative then we need to add to the hotspot
	  to shift the cursor outside the plane.
 Swap axis and mirror horizontally
 Swap axis and mirror vertically
		
		  Display groups that are 1xnY, have pos_cpy.x > 2  viewport.height
		  For pipe split cases:
		  - apply offset of viewport.y to normalize pos_cpy.x
		  - calculate the pos_cpy.y as before
		  - shift pos_cpy.y back by same offset to get final value
		  - since we iterate through both pipes, use the lower
		    viewport.y for offset
		  For non pipe split cases, use the same calculation for
		   pos_cpy.y as the 180 degree rotation case below,
		   but use pos_cpy.x as our input because we are rotating
		   270 degrees
 Mirror horizontally and vertically
		
		  Display groups that are 1xnY, have pos_cpy.y > viewport.height
		  Calculation:
		    delta_from_bottom = viewport.y + viewport.height - pos_cpy.y
		    pos_cpy.y_new = viewport.y + delta_from_bottom
		  Simplify it as:
		    pos_cpy.y = viewport.y  2 + viewport.height - pos_cpy.y
 1.0 default multiplier
  apply_front_porch_workaround  TODO FPGA still need?
  This is a workaround for a bug that has existed since R5xx and has not been
  fixed keep Front porch at minimum 2 for Interlaced mode or 1 for progressive.
 Suppose to do nothing because vsync is 0;
 only 3 items below are used by unblank 
update internal request clock for update clock use
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 apply_front_porch_workaround  TODO FPGA still need?
 This is a workaround for a bug that has existed since R5xx and has not been
 fixed keep Front porch at minimum 2 for Interlaced mode or 1 for progressive.
  Vupdate keepout can be set to a window to block the update lock for that pipe from changing.
  Start offset begins with vstartup and goes for x number of clocks,
  end offset starts from end of vupdate to x number of clocks.
  program_timing_generator   used by mode timing set
  Program CRTC Timing Registers - OTG_H_, OTG_V_, Pixel repetition.
  Including SYNC. Call BIOS command table to program Timings.
 Load horizontal timing 
 CRTC_H_TOTAL = vesa.h_total - 1 
 h_sync_start = 0, h_sync_end = vesa.h_sync_width 
 blank_start = line end - front porch 
 blank_end = blank_start - active 
 h_sync polarity 
	 In case of V_TOTAL_CONTROL is on, make sure OTG_V_TOTAL_MAX and
	  OTG_V_TOTAL_MIN are equal to V_TOTAL.
 v_sync_start = 0, v_sync_end = v_sync_width 
 blank_start = frame end - front porch 
 blank_end = blank_start - active 
 v_sync polarity 
 Interlace 
 VTG enable set to 0 first VInit 
 original code is using VTG offset to address OTG reg, seems wrong 
	 TODO
	  patched_crtc_timing.flags.HORZ_COUNT_BY_TWO == 1
	  program_horz_count_by_2
	  for DVI 30bpp mode, 0 otherwise
	  program_horz_count_by_2(optc, &patched_crtc_timing);
	 Enable stereo - only when we need to pack 3D frame. Other types
	  of stereo handled in explicit call
 VCOUNT_INIT is the start of blank 
 end of blank = v_init - active 
 if VSTARTUP is before VSYNC, FP2 is the offset, otherwise 0 
 Interlace 
  optc1_set_timing_double_buffer() - DRR double buffering control
  Sets double buffer point for V_TOTAL, H_TOTAL, VTOTAL_MIN,
  VTOTAL_MAX, VTOTAL_MIN_SEL and VTOTAL_MAX_SEL registers.
  Options: any time,  start of frame, dp start of frame (range timing)
  unblank_crtc
  Call ASIC Control Object to UnBlank CRTC.
	 WA for automated testing
	  Automated testing will fail underflow test as there
	  sporadic underflows which occur during the optc blank
	  sequence.  As a wa, clear underflow on unblank.
	  This prevents the failure, but will not mask actual
	  underflow that affect real use cases.
  blank_crtc
  Call ASIC Control Object to Blank CRTC.
 Enable clock 
  Enable CRTC
  Enable CRTC - call ASIC Control Object to enable Timing generator.
	 TODO FPGA wait for answer
	  OTG_MASTER_UPDATE_MODE != CRTC_MASTER_UPDATE_MODE
	  OTG_MASTER_UPDATE_LOCK != CRTC_MASTER_UPDATE_LOCK
	 opp instance for OTG. For DCN1.0, ODM is remoed.
	  OPP and OPTC should 1:1 mapping
 VTG enable first is for HW workaround 
 Enable CRTC 
 disable_crtc - call ASIC Control Object to disable Timing generator. 
	 disable otg request until end of the first line
	  in the vertical blank region
 CRTC disabled, so disable  clock. 
 Temporarily blocking interlacing mode until it's supported 
	 Check maximum number of pixels supported by Timing Generator
	  (Currently will never fail, in order to fail needs display which
	  needs more than 8192 horizontal and
	  more than 8192 vertical total pixels)
  get_vblank_counter
  @brief
  Get counter for vertical blanks. use register CRTC_STATUS_FRAME_COUNT which
  holds the counter of frames.
  @param
  struct timing_generator optc - [in] timing generator which controls the
  desired CRTC
  @return
  Counter of frames, which should equal to number of vblanks.
 otg is not running, do not need to be locked 
 Should be fast, status does not update on maximus 
				 vsync signal from selected OTG pipe based
				  on OTG_TRIG_SOURCE_PIPE_SELECT setting
 always detect falling edge 
				 vsync signal from selected OTG pipe based
				  on OTG_TRIG_SOURCE_PIPE_SELECT setting
 always detect rising edge 
			 force H count to H_TOTAL and V count to V_TOTAL in
			  progressive mode and V_TOTAL-1 in interlaced mode
		  vsync signal from selected OTG pipe based
		   on OTG_TRIG_SOURCE_PIPE_SELECT setting
 always detect falling edge 
			 force H count to H_TOTAL and V count to V_TOTAL in
			  progressive mode and V_TOTAL-1 in interlaced mode
 1 vupdate at 10hz 
 1 vupdate at 10hz 
	 asic design change, do not need this control
	  empty for share caller logic
 By register spec, it only takes 8 bit value
	 Bit 8 is no longer applicable in RV for PSR case,
	  set bit 8 to 0 if given
   Function: set_drr
   @brief
      Program dynamic refresh rate registers m_OTGx_OTG_V_TOTAL_.
 Setup manual flow control for EOF via TRIG_A
	 TODO: replace 'controller_dp_test_pattern' by 'test_pattern_mode'
	  because this is not DP-specific (which is probably somewhere in DP
 color ramp generator mixes 16-bits color 
 requested bpc 
	 RGB values of the color bars.
	  Produce two RGB colors: RGB0 - white (all Fs)
	  and RGB1 - black (all 0s)
	  (three RGB components for two colors)
 dest color (converted to the specified color format) 
 translate to bit depth 
 adjust color to the required colorFormat 
			 dst = 2^dstBpc  src  2^srcBpc = src >>
			  (srcBpc - dstBpc);
		 CRTC_TEST_PATTERN_DATA has 16 bits,
		  lowest 6 are hardwired to ZERO
		  color bits should be left aligned aligned to MSB
		  XXXXXXXXXX000000 for 10 bit,
		  XXXXXXXX00000000 for 8 bit and XXXXXX0000000000 for 6
		 We have to write the mask before data, similar to pipeline.
		  For example, for 8 bpc, if we want RGB0 to be magenta,
		  and RGB1 to be cyan,
		  we need to make 7 writes:
		  MASK   DATA
		  000001 00000000 00000000                     set mask to R0
		  000010 11111111 00000000     R0 255, 0xFF00, set mask to G0
		  000100 00000000 00000000     G0 0,   0x0000, set mask to B0
		  001000 11111111 00000000     B0 255, 0xFF00, set mask to R1
		  010000 00000000 00000000     R1 0,   0x0000, set mask to G1
		  100000 11111111 00000000     G1 255, 0xFF00, set mask to B1
		  100000 11111111 00000000     B1 255, 0xFF00
		 
		  we will make a loop of 6 in which we prepare the mask,
		  then write, then prepare the color for next write.
		  first iteration will write mask only,
		  but each next iteration color prepared in
		  previous iteration will be written within new mask,
		  the last component will written separately,
		  mask is not changing between 6th and 7th write
		  and color will be prepared by last iteration
		 write color, color values mask in CRTC_TEST_PATTERN_MASK
		  is B1, G1, R1, B0, G0, R0
			 prepare color mask, first write PATTERN_DATA
			  will have all zeros
 write color component 
			 prepare next color component,
			  will be written in the next iteration
		 write last color component,
		  it's been already prepared in the loop
 enable test pattern 
		 increment for the first ramp for one color gradation
		  1 gradation for 6-bit color is 2^10
		  gradations in 16-bit color
 enable test pattern 
 Cannot configure crc on a CRTC that is disabled 
 Program frame boundaries 
 Window A x axis start and end. 
 Window A y axis start and end. 
 Window B x axis start and end. 
 Window B y axis start and end. 
 Set crc mode and selection, and enable. Only using CRC0
 Early return if CRC is not enabled for this CRTC 
 used by enable_timing_synchronization. Not need for FPGA 
 used by enable_timing_synchronization. Not need for FPGA 
 "Containter" vs. "pixel" is a concept within HW blocks, mostly those closer to the back-end. It works like this:
  - In most of the formats (RGB or YCbCr 4:4:4, 4:2:2 uncompressed and DSC 4:2:2 Simple) pixel rate is the same as
    containter rate.
  - In 4:2:0 (DSC or uncompressed) there are two pixels per container, hence the target container rate has to be
    halved to maintain the correct pixel rate.
  - Unlike 4:2:2 uncompressed, DSC 4:2:2 Native also has two pixels per container (this happens when DSC is applied
    to it) and has to be treated the same as 4:2:0, i.e. target containter rate has to be halved in this case as well.
 Copyright 2016 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 begin 
 DCN 
 set fieldregisterbitfield name 
 NBIO 
 MMHUB 
 macros to expend register list macro defined in HW object header file
		 raven smu dones't allow 0 disp clk,
		  smu min disp clk limit is 50Mhz
		  keep min disp clk 100Mhz avoid smu hang
enable this by default after testing.
 TODO: un-hardcode
 Disable MPO in multi-display configurations. 
	
	  Workaround: On DCN10 there is UMC issue that causes underflow when
	  playing 4k video on 4k desktop with video downscaled and single channel
	  memory
			 Store first available for MST second display
			  in daisy chain use case
	
	  For CZ and later, we can allow DIG FE and BE to differ for all display types
 RV1 support max 4 pipes 
  Some architectures don't support soft-float (e.g. aarch64), on those
  this function has to be called with hardfloat enabled, make sure not
  to inline it so whatever fp stuff is done stays inside
 TODO how to handle 23.84? 
old sbios bug
	
	  TODO fill in from actual raven resource when we create
	  more than virtual encoder
	
	   Resource + asic cap harcoding                
 max pipe num for ASIC before check pipe fuses 
1.4 wa not applied by default
 Raven DP PHY HBR2 eye diagram pattern is not stable. Use TP4 
 Color pipeline capabilities 
 RGAM on DCN1
 no post-blend color operations 
	
	   Create resources                             
 todo: not reuse phy_pll registers 
 Other architectures we build for build this with soft-float 
	
	  Right now SMUPPLIB and DAL all have the AZ D3 force PME notification 
	  implemented. So AZ D3 should work.For issue 197007.                   
 index to valid pipe resource  
 mem input -> ipp -> dpp -> opp -> TG 
		 if pipe is disabled, skip instance of HW pipe,
		  i.e, skip ASIC register instance
 check next valid pipe 
 valid pipe num 
	 within dml lib, it is hard code to 4. If ASIC pipe is fused,
	  the value may be changed
  Copyright 2016 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
only print if OTG master is enabled
	
	   Mask Format
	   Bit 0 - 31: Status bit to clear
	 
	   Mask = 0x0 means clear all status bits
	
	   Mask Format
	   Bit 0 - 15: Hardware block mask
	   Bit 15: 1 = Invariant Only, 0 = All
 Default, capture all, invariant only
  Copyright 2017 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 Constructor, Destructor               
  Copyright 2016 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
	 Autocal calculate the scaling ratio and initial phase and the
	  DSCL_MODE_SEL must be set to 1
	 Autocal perform auto centering without replication and the
	  DSCL_MODE_SEL must be set to 0
	 Autocal perform auto centering and auto replication and the
	  DSCL_MODE_SEL must be set to 0
 10 bpc 
 8 bpc 
 6 bpc 
 12 bpc 
 Unsupported 
 DSCL is processing data in fixed format 
 Currently hardcoded on all ASICs before DCN 3.2 
 LB 
 DSCL caps: pixel data processed in fixed format 
 Pixel depth stored in LB 
 Pixel expansion mode 
 Pixel reduction mode: Rounding 
 Dynamic expansion pixel depth 
 Dithering enable: Disabled 
 Interleave source enable 
 Alpha enable 
 DSCL caps: pixel data processed in float format 
 Interleave source enable 
 Alpha enable 
 should never happen, bug 
 Even tap coefficient (bits 1:0 fixed to 0) 
 Writeread control for even coefficient 
 Odd tap coefficient (bits 1:0 fixed to 0) 
 Writeread control for odd coefficient 
 Swap coefficient RAM and set chroma coefficient mode 
 Unsupported 
 +71 to ceil 
 +71 to ceil 
 +5 to ceil 
 420 mode: using 3rd mem from Y, Cr and Cb 
find first match configuration which meets the min required lb size
Ensure we can support the requested number of vtaps
 TODO: v_min 
 Black offsets 
	
	  0.24 format for fraction, first five bits zeroed
  dpp1_dscl_set_recout - Set the first pixel of RECOUT in the OTG active area
  @dpp: DPP data struct
  @recount: Rectangle information
  This function sets the MPC RECOUT_START and RECOUT_SIZE registers based on
  the values specified in the recount parameter.
  Note: This function only have effect if AutoCal is disabled.
 First pixel of RECOUT in the active OTG area 
 First line of RECOUT in the active OTG area 
 Number of RECOUT horizontal pixels 
 Number of RECOUT vertical lines 
  dpp1_dscl_set_scaler_manual_scale - Manually program scaler and line buffer
  @dpp_base: High level DPP struct
  @scl_data: scalaer_data info
  This is the primary function to program scaler and line buffer in manual
  scaling mode. To execute the required operations for manual scale, we need
  to disable AutoCal first.
 Autocal off 
 Recout 
 MPC Size 
 Number of horizontal pixels of MPC 
 Number of vertical lines of MPC 
 SCL mode 
 LB 
 Black offsets 
 Manually calculate scale ratio and init values 
 HTapsVTaps 
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
   andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
	 TODOFPGA Figure out a proper number for max_retries polling for lock
	  use 50 for now.
we need turn on clock before programming AFMT block
	 poll dig_update_lock is not locked -> asic internal signal
	  assume otg master lock will unlock it
		REG_WAIT(AFMT_VBI_PACKET_CONTROL, AFMT_GENERIC_LOCK_STATUS,
 check if HW reading GSP memory 
	 HW does is not reading GSP memory not reading too long ->
	  something wrong. clear GPS memory access and notify?
	  hw SW is writing to GSP memory
 choose which generic packet to use 
	 write generic packet header
	  (4th byte is for GENERIC0 only)
	 write generic packet contents
	  (we never use last 4 bytes)
	  there are 8 (0-7) mmDIG0_AFMT_GENERIC0_x registers
		 enable transmission of packet(s) -
		  packet transmission begins on the next frame
 send packet(s) every frame 
 select line number to send packets on 
 choose which generic packet control to use 
 invalid HW packet index 
 setup stream encoder in dp mode 
 asynchronous mode 
full range
bt709
the input timing is in VESA spec format with Interlace flag =1
 set pixel encoding 
				 HW testing only, no use case yet.
				  Color depth of Y-only could be
				  8, 10, 12, 16 bits
		 Note: DP_MSA_MISC1 bit 7 is the indicator
		  of Y-only mode.
		  This bit is set in HW if register
		  DP_PIXEL_ENCODING is programmed to 0x4
	 For YCbCr420 and BT2020 Colorimetry Formats, VSC SDP shall be used.
	  When MISC1, bit 6, is Set to 1, a Source device uses a VSC SDP to indicate the
	  Pixel EncodingColorimetry Format and that a Sink device shall ignore MISC1, bit 7,
	  and MISC0, bits 7:1 (MISC1, bit 7, and MISC0, bits 7:1, become "don't care").
 set color depth 
 Set DP pixel encoding and component depth 
 set dynamic range and YCbCr range 
 bit7 = 0
full range
 bit3=1 
 bit7 = 0
limited range
 bit3=1, bit4=0 
 bit7 = 0
bt601
 bit2=0, bit1=1 
 bit2=1, bit1=0 
 bit3=1, bit4=1 
 bit7 = 0
bt709
 bit2=0, bit1=1 
 bit2=1, bit1=0 
limited range
 do nothing 
 MSA_MISC1 
	 dcn new register
	  dc_crtc_timing is vesa dmt struct. data from edid
	 calculate from vesa timing parameters
	  h_active_start related to leading edge of sync
 start at beginning of left border 
 start at beginning of left border 
 HWDITH include border or overscan 
 setup stream encoder in hdmi mode 
 setup HDMI engine 
		 enable HDMI data scrambler
		  HDMI_CLOCK_CHANNEL_RATE_MORE_340M
		  Clock channel frequency is 14 of character rate.
 TODO: New feature for DCE11, still need to implement 
		 enable HDMI data scrambler
		  HDMI_CLOCK_CHANNEL_FREQ_EQUAL_TO_CHAR_RATE
		  Clock channel frequency is the same
		  as character rate
 following belongs to audio 
 setup stream encoder in dvi mode 
 If y rounds up to integer, carry it over to x.
 wait for update to be completed on the link 
 i.e. DP_MSE_RATE_UPDATE_PENDING field (read only) 
 is reset to 0 (not pending) 
 for bring up, disable dp double  TODO 
 stop generic packets 0 & 1 on HDMI 
 stop generic packets 2 & 3 on HDMI 
 stop generic packets 2 & 3 on HDMI 
 packetIndex 
	 VSC SDP at packetIndex 1 is used by PSR in DMCUB FW.
	  Note that the enablement of GSP1 is not done below,
	  it's done in FW.
 packetIndex 
 packetIndex 
 packetIndex 
	 packetIndex 4 is used for send immediate sdp message, and please
	  use other packetIndex (such as 5,6) for other info packet
	 enabledisable transmission of packet(s).
	  If enabled, packet transmission begins on the next frame
	 This bit is the master enable bit.
	  When enabling secondary stream engine,
	  this master bit must also be set.
	  This register shared with audio info frame.
	  Therefore we need to enable master bit
	  if at least on of the fields is not 0
	 TODOFPGA Figure out a proper number for max_retries polling for lock
	  use 50 for now.
 check if GSP4 is transmitted 
 disable GSP4 transmitting 
 transmit GSP4 at the earliest time in a frame 
we need turn on clock before programming AFMT block
 check if HW reading GSP memory 
	 HW does is not reading GSP memory not reading too long ->
	  something wrong. clear GPS memory access and notify?
	  hw SW is writing to GSP memory
 use generic packet 4 for immediate sdp message 
	 write generic packet header
	  (4th byte is for GENERIC0 only)
	 write generic packet contents
	  (we never use last 4 bytes)
	  there are 8 (0-7) mmDIG0_AFMT_GENERIC0_x registers
	 check whether GENERIC4 registers double buffer update in immediate mode
	  is pending
	 atomically update double-buffered GENERIC4 registers in immediate mode
	  (update immediately)
 enable GSP4 transmitting 
	 This bit is the master enable bit.
	  When enabling secondary stream engine,
	  this master bit must also be set.
	  This register shared with audio info frame.
	  Therefore we need to enable master bit
	  if at least on of the fields is not 0
 stop generic packets on DP 
	 this register shared with audio info frame.
	  therefore we need to keep master enabled
	 Note: For CZ, we are changing driver default to disable
	  stream deferred to next VBLANK. If results are positive, we
	  will make the same change to all DCE versions. There are a
	  handful of panels that cannot handle disable stream at
	  HBLANK and will result in a white line flash across the
	  screen on stream disable.
stream not enabled
	 Specify the video stream disable point
	  (2 = start of the next vertical blank)
	 Larger delay to wait until VBLANK - use max retry of
	  10us10200=102ms. This covers 100.0ms of minimum 10 Hz mode +
	  a little more because we may not trust delay accuracy.
 disable DP stream 
	 the encoder stops sending the video stream
	  at the start of the vertical blanking.
	  Poll for DP_VID_STREAM_STATUS == 0
	 Tell the DP encoder to ignore timing from CRTC, must be done after
	  the polling. If we set DP_STEER_FIFO_RESET before DP stream blank is
	  complete, stream status will be stuck in video stream enabled state,
	  i.e. DP_VID_STREAM_STATUS stuck at 1.
 output video stream to link encoder 
 YCbCr 4:2:0 : Computed VID_M will be 2X the input rate 
this param->pixel_clk_khz is half of 444 rate for 420 already
		 M  N = Fstream  Flink
		  m_vid  n_vid = pixel rate  link rate
 enable auto measurement 
		 auto measurement need 1 full 0x8000 symbol cycle to kick in,
		  therefore program initial value for Mvid and Nvid
 set DIG_START to 0x1 to resync FIFO 
 switch DP encoder to CRTC data 
	 wait 100us for DIGDP logic to prime
	  (i.e. a few video lines)
	 the hardware would start sending video at the start of the next DP
	  frame (i.e. rising edge of the vblank).
	  NOTE: We used to program DP_VID_STREAM_DIS_DEFER = 2 here, but this
	  register has no effect on enable transition! HW always guarantees
	  VID_STREAM enable at start of next frame, and this is not
	  programmable
 25.2MHz1.001
 25.2MHz1.001
 25.2MHz
 27MHz 
 27MHz1.001
 27MHz1.001
 54MHz
 54MHz1.001
 74.25MHz1.001
 74.25MHz
 148.5MHz1.001
 148.5MHz
 these are one to one 
	 if Rear Left and Right exist move RC speaker to channel 7
	  otherwise to channel 5
 FRONT Left Right Center and REAR Left Right Center are exclusive 
 search for exact pixel clock in table 
 not match 
 match found 
 not found 
	 See HDMI spec  the table entry under
 This should not happen.it does so we don't get BSOD
 setup the audio stream source select (audio -> dig mapping) 
 Channel allocation 
 HDMI_AUDIO_PACKET_CONTROL 
 AFMT_AUDIO_PACKET_CONTROL 
 AFMT_AUDIO_PACKET_CONTROL2 
 HDMI_ACR_PACKET_CONTROL 
 Program audio clock sampleregeneration parameters 
 HDMI_ACR_32_0__HDMI_ACR_CTS_32_MASK 
 HDMI_ACR_32_1__HDMI_ACR_N_32_MASK 
 HDMI_ACR_44_0__HDMI_ACR_CTS_44_MASK 
 HDMI_ACR_44_1__HDMI_ACR_N_44_MASK 
 HDMI_ACR_48_0__HDMI_ACR_CTS_48_MASK 
 HDMI_ACR_48_1__HDMI_ACR_N_48_MASK 
	 Video driver cannot know in advance which sample rate will
	  be used by HD Audio driver
	  HDMI_ACR_PACKET_CONTROL__HDMI_ACR_N_MULTIPLE field is
	  programmed below in interruppt callback
	 AFMT_60958_0__AFMT_60958_CS_CHANNEL_NUMBER_L_MASK &
	  AFMT_60958_0__AFMT_60958_CS_CLOCK_ACCURACY_MASK
 AFMT_60958_1 AFMT_60958_CS_CHALNNEL_NUMBER_R 
	 AFMT_60958_2 now keep this settings until
	  Programming guide comes out
 --- DP Audio packet configurations --- 
 ATP Configuration 
 Asyncauto-calc timestamp mode 
	 --- The following are the registers
	   copied from the SetupHDMI ---
 AFMT_AUDIO_PACKET_CONTROL 
 AFMT_AUDIO_PACKET_CONTROL2 
 Program the ATP and AIP next 
 AFMT_INFOFRAME_CONTROL0 
 AFMT_60958_0__AFMT_60958_CS_CLOCK_ACCURACY_MASK 
 DCE810 does not have this register 
	 wait for AFMT clock to turn on,
	  expectation: this should complete in 1-2 reads
	 
	  REG_WAIT(AFMT_CNTL, AFMT_AUDIO_CLOCK_ON, !!enable, 1, 10);
	 
	  TODO: wait for clock_on does not work well. May need HW
	  program sequence. But audio seems work normally even without wait
	  for clock_on status change
 Enable Audio packets 
 Program the ATP and AIP next 
 Program STREAM_ENABLE after all the other enables. 
 Disable Audio packets 
	 This register shared with encoder info frame. Therefore we need to
	  keep master enabled if at least on of the fields is not 0
  Copyright 2016 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
	 Autocal calculate the scaling ratio and initial phase and the
	  DSCL_MODE_SEL must be set to 1
	 Autocal perform auto centering without replication and the
	  DSCL_MODE_SEL must be set to 0
	 Autocal perform auto centering and auto replication and the
	  DSCL_MODE_SEL must be set to 0
 Bypass if type is bypass or hw 
	 determine which CSC matrix (ocsc or comb) we are using
	  currently.  select the alternate set to double buffer
	  the CSC update so CSC is updated on frame boundary
program re gamma RAM A
program re gamma RAM B
	 determine which CSC matrix (icsc or coma) we are using
	  currently.  select the alternate set to double buffer
	  the CSC update so CSC is updated on frame boundary
keep here for now, decide multi dce support later
program de gamma RAM B
program de gamma RAM A
 Setting de gamma bypass for now 
 Input pixel format: ARGB8888 
 Zero expansion 
 COLOR_KEYER_CONTROL.COLOR_KEYER_EN = 0 this should be default 
 Setting degamma bypass for now 
 1 => IGAM_RAMA, 3 => IGAM_RAMA & DGAM_ROMA, 4 => IGAM_RAMA & DGAM_ROMB
 2 => IGAM_RAMB, 5 => IGAM_RAMB & DGAM_ROMA, 6 => IGAM_RAMB & DGAM_ROMB
  Input gamma LUT currently supports 256 values only. This means input color
  can have a maximum of 8 bits per channel (= 256 possible values) in order to
  have a one-to-one mapping with the LUT. Truncation will occur with color
  values greater than 8 bits.
  In the future, this function should support additional input gamma methods,
  such as piecewise linear mapping, and input gamma bypass.
 Power on LUT memory.
 Determine whether to use RAM A or RAM B
 RW mode is 256-entry LUT
 IGAM Input format should be 8 bits per channel.
 Do not mask any R,G,B values
 LUT-256, unsigned, integer, new u0.12 format
 Start at index 0 of IGAM LUT
 Power off LUT memory
 Enable IGAM LUT on ram we just wrote to. 2 => RAMA, 3 => RAMB
  Copyright 2016 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
	 corner_points[0] - beginning base, slope offset for R,G,B
	  corner_points[1] - end base, slope offset for R,G,B
 driver uses 32 regions or less, but DCN HW has 34, extra 2 are set to 0 
		 32 segments
		  segments are from 2^-25 to 2^7
		 11 segments
		  segment is from 2^-10 to 2^1
		  There are less than 256 points, for optimization
 last point 
 All 3 color channels have same x
	 see comment above, m_arrPoints[1].y should be the Y value for the
	  region end (m_numOfHwPoints), not last HW point(m_numOfHwPoints - 1)
		 for PQ, we want to have a straight line from last HW X point,
		  and the slope to be such that we hit 1.0 at 10000 nits.
	 12 segments
	  segments are from 2^-12 to 0
 last point 
	 see comment above, m_arrPoints[1].y should be the Y value for the
	  region end (m_numOfHwPoints), not last HW point(m_numOfHwPoints - 1)
		 for PQ, we want to have a straight line from last HW X point,
		  and the slope to be such that we hit 1.0 at 10000 nits.
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 FORMATTER 
 	set_truncation
 	1) set truncation depth: 0 for 18 bpp or 1 for 24 bpp
 	2) enable truncation
 	3) HW remove 12bit FMT support for DCE11 power saving reason.
Disable spatial (random) dithering
 only use FRAME_COUNTER_MAX if frameRandom == 1
	Set seed for random values for
	 FMT_OFFSET_R_Cr  31:16 0x0 Setting the zero
	  offset for the RCr channel, lower 4LSB
	  is forced to zeros. Typically set to 0
	  RGB and 0x80000 YCbCr.
	 FMT_OFFSET_G_Y   31:16 0x0 Setting the zero
	  offset for the GY  channel, lower 4LSB is
	  forced to zeros. Typically set to 0 RGB
	  and 0x80000 YCbCr.
	 FMT_OFFSET_B_Cb  31:16 0x0 Setting the zero
	  offset for the BCb channel, lower 4LSB is
	  forced to zeros. Typically set to 0 RGB and
	  0x80000 YCbCr.
Enable spatial dithering
			 Set spatial dithering mode
			  (default is Seed patterrn AAAA...)
Set spatial dithering bit depth
Disable High pass filter
Reset only at startup
Set RGB data dithered with x^28+x^3+1
	 TODO
	  set_temporal_dither(oppn10, params);
 	set_pixel_encoding
 	Set Pixel Encoding
 		0: RGB 4:4:4 or YCbCr 4:4:4 or YOnly
 		1: YCbCr 4:2:2
 	Set Clamping
 	1) Set clamping format based on bpc - 0 for 6bpc (No clamping)
 		1 for 8 bpc
 		2 for 10 bpc
 		3 for 12 bpc
 		7 for programable
 	2) Enable clamp if Limited range requested
 TODO 
00 - 10-bit -> 12-bit dynamic expansion
01 - 8-bit  -> 12-bit dynamic expansion
otherwise last two bits are zero
	 dithering is affected by <CrtcSourceSelect>, hence should be
 TODO: confirm computation of space2_size 
 TODO: for which cases should FMT_STEREOSYNC_OVERRIDE be set? 
	 Program OPPBUF_3D_VACT_SPACE1_SIZE and OPPBUF_VACT_SPACE2_SIZE registers
	  In 3D progressive frames, Vactive space happens only in between the 2 frames,
	  so only need to program OPPBUF_3D_VACT_SPACE1_SIZE
	  In 3D alternative frames, left and right frames, top and bottom field.
 TODO: Is programming of OPPBUF_DUMMY_DATA_RGB needed? 
	
	REG_UPDATE(OPPBUF_3D_PARAMETERS_0,
			OPPBUF_DUMMY_DATA_R, data_r);
	REG_UPDATE(OPPBUF_3D_PARAMETERS_1,
			OPPBUF_DUMMY_DATA_G, data_g);
	REG_UPDATE(OPPBUF_3D_PARAMETERS_1,
			OPPBUF_DUMMY_DATA_B, _data_b);
 Program the oppbuf active width to be the frame width from mpc 
	 Specifies the number of segments in multi-segment mode (DP-MSO operation)
	  description  "In 124 segment mode, specifies the horizontal active width in pixels of the display panel.
	  In 4 segment split leftright mode, specifies the horizontal 12 active width in pixels of the display panel.
	  Used to determine segment boundaries in multi-segment mode. Used to determine the width of the vertical active space in 3D frame packed modes.
	  OPPBUF_ACTIVE_WIDTH must be integer divisible by the total number of segments."
 description  "Specifies the number of overlap pixels (1-8 overlapping pixels supported), used in multi-segment mode (DP-MSO operation)" 
	 description  "Specifies the number of times a pixel is replicated (0-15 pixel replications supported).
	  A value of 0 disables replication. The total number of times a pixel is output is OPPBUF_PIXEL_REPETITION + 1."
 Controls the number of padded pixels at the end of a segment 
 Constructor, Destructor               
  Copyright 2016 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
	 Autocal calculate the scaling ratio and initial phase and the
	  DSCL_MODE_SEL must be set to 1
	 Autocal perform auto centering without replication and the
	  DSCL_MODE_SEL must be set to 0
	 Autocal perform auto centering and auto replication and the
	  DSCL_MODE_SEL must be set to 0
 Program gamut remap in bypass mode 
 Gamut remap in bypass 
 Some ASICs does not support  FP16 scaling, so we reject modes require this
 TODO: add lb check 
 No support for programming ratio of 4, drop to 3.99999.. 
 Set default taps if none are provided 
 Only 1 and even h_taps_c are supported by hw 
when output is float then FORMAT_CONTROL__OUTPUT_FP=1
 ARGB16161616_UNORM 
 Set default color space based on format if none is given. 
 if input adjustments exist, program icsc with those values
 todo: clarify what to program these to 
 Cursor widthheight and hotspots need to be rotated for offset calculation
 not visible beyond right edge
 not visible beyond left edge
 not visible beyond bottom edge
 not visible beyond top edge
 Constructor, Destructor               
0x1404
  Copyright 2016 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
	
	  DCHUBBUB_ARB_ALLOW_SELF_REFRESH_FORCE_ENABLE = 1 means do not allow stutter
	  DCHUBBUB_ARB_ALLOW_SELF_REFRESH_FORCE_ENABLE = 0 means allow stutter
	 pstate latency is ~20us so if we wait over 40us and pstate allow
	  still not asserted, we are probably stuck and going to hang
	 
	  TODO: Figure out why it takes ~100us on linux
	  pstate takes around ~100us (up to 200us) on linux. Unknown currently
	  as to why it takes that long on linux
 data collection 
 help with revert wa 
		 we hacked to force pstate allow to prevent hang last time
		  we verify_allow_pstate_change_high.  so disable force
		  here so we can check status
	 The following table only applies to DCN1 and DCN2,
	  for newer DCNs, need to consult with HW IP folks to read RTL
	  HUBBUB:DCHUBBUB_TEST_ARB_DEBUG10 DCHUBBUBDEBUGIND:0xB
	  description
	  0:     Pipe0 Plane0 Allow Pstate Change
	  1:     Pipe0 Plane1 Allow Pstate Change
	  2:     Pipe0 Cursor0 Allow Pstate Change
	  3:     Pipe0 Cursor1 Allow Pstate Change
	  4:     Pipe1 Plane0 Allow Pstate Change
	  5:     Pipe1 Plane1 Allow Pstate Change
	  6:     Pipe1 Cursor0 Allow Pstate Change
	  7:     Pipe1 Cursor1 Allow Pstate Change
	  8:     Pipe2 Plane0 Allow Pstate Change
	  9:     Pipe2 Plane1 Allow Pstate Change
	  10:    Pipe2 Cursor0 Allow Pstate Change
	  11:    Pipe2 Cursor1 Allow Pstate Change
	  12:    Pipe3 Plane0 Allow Pstate Change
	  13:    Pipe3 Plane1 Allow Pstate Change
	  14:    Pipe3 Cursor0 Allow Pstate Change
	  15:    Pipe3 Cursor1 Allow Pstate Change
	  16:    Pipe4 Plane0 Allow Pstate Change
	  17:    Pipe4 Plane1 Allow Pstate Change
	  18:    Pipe4 Cursor0 Allow Pstate Change
	  19:    Pipe4 Cursor1 Allow Pstate Change
	  20:    Pipe5 Plane0 Allow Pstate Change
	  21:    Pipe5 Plane1 Allow Pstate Change
	  22:    Pipe5 Cursor0 Allow Pstate Change
	  23:    Pipe5 Cursor1 Allow Pstate Change
	  24:    Pipe6 Plane0 Allow Pstate Change
	  25:    Pipe6 Plane1 Allow Pstate Change
	  26:    Pipe6 Cursor0 Allow Pstate Change
	  27:    Pipe6 Cursor1 Allow Pstate Change
	  28:    WB0 Allow Pstate Change
	  29:    WB1 Allow Pstate Change
	  30:    Arbiter's allow_pstate_change
	  31:    SOC pstate change request
	 force pstate allow to prevent system hang
	  and break to debugger to investigate
 Repeat for water mark set A, B, C and D. 
 clock state A 
 clock state B 
 clock state C 
 clock state D 
 clock state A 
 clock state B 
 clock state C 
 clock state D 
 clock state A 
 clock state B 
 clock state C 
 clock state D 
	
	  Need to clamp to max of the register values (i.e. no wrap)
	  for dcn1, all wm registers are 21-bit wide
should not come here
 TODO: port code from dal2 
For ZFB case need to put DCHUB FB BASE and TOP upside down to indicate ZFB mode
Should not touch FB LOCATION (done by VBIOS on AsicInit table)
Should not touch FB LOCATION (done by VBIOS on AsicInit table)
 DML: get_bytes_per_element 
 copied from DML.  might want to refactor DML to leverage from DML 
 DML : get_blk256_size 
 164KB for DCN1.0 
 full 256B request 
 half 128b request 
 full 256B request 
 half 128b request 
 implement section 1.6.2.1 of DCN1_Programming_Guide.docx 
 access_dir not known, must use most constraining 
			 reg128 is true for either horz and vert
			  but segment_order is contiguous
  Copyright 2012-17 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 we only support 1 adapter currently 
 disable first. 
 disable power gating 
 disable CNV 
 disable WB 
 soft reset 
 enable power gating 
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 find bottommost mpcc. 
 mpc color is 12 bit.  tg_color is 10 bit 
	 todo: might want to use 16 bit to represent color and have each
	  hw block translate to correct color depth.
  Insert DPP into MPC tree based on specified blending position.
  Only used for planes that are part of blending chain for OPP output
  Parameters:
  [inout] mpc		- MPC context.
  [inout] tree	- MPC tree structure that plane will be added to.
  [in]	blnd_cfg	- MPCC blending configuration for the new blending layer.
  [in]	sm_cfg		- MPCC stereo mix configuration for the new blending layer.
 			  stereo mix must disable for the very bottom layer of the tree config.
  [in]	insert_above_mpcc - Insert new plane above this MPCC.  If NULL, insert as bottom plane.
  [in]	dpp_id		- DPP instance for the plane to be added.
  [in]	mpcc_id		- The MPCC physical instance to use for blending.
  Return:  struct mpcc - MPCC that was added.
 sanity check parameters 
 check insert_above_mpcc exist in tree->opp_list 
 Get and update MPCC struct parameters 
 program mux and MPCC_MODE 
 Configure VUPDATE lock set for this MPCC to map to the OPP 
 update mpc tree mux setting 
 insert the toppest mpcc 
 find insert position 
 update the blending configuration 
 update the stereo mix settings, if provided 
 mark this mpcc as in use 
  Remove a specified MPCC from the MPC tree.
  Parameters:
  [inout] mpc		- MPC context.
  [inout] tree	- MPC tree structure that plane will be removed from.
  [inout] mpcc	- MPCC to be removed from tree.
  Return:  void
 remove MPCC from top of tree 
 set the next MPCC in list to be the top MPCC 
 there are no other MPCC is list 
 find mpcc to remove MPCC list 
 remove MPCC in middle of list 
 remove MPCC from bottom of list 
 turn off MPCC mux registers 
 mark this mpcc as not in use 
 In case of resume from S3S4, remove mpcc from bios left over 
  Reset the MPCC HW status by disconnecting all muxes.
  Parameters:
  [inout] mpc		- MPC context.
  Return:  void
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  @brief
  Trigger Source Select
  ASIC-dependent, actual values for register programming
	 This register resides in DP back end block;
	  transmitter is used for the offset
	 This register resides in DP back end block;
	  transmitter is used for the offset
	 This register resides in DP back end block;
	  transmitter is used for the offset
	 This register resides in DP back end block;
	  transmitter is used for the offset
	 This register resides in DP back end block;
	  transmitter is used for the offset
 Disable PHY Bypass mode to setup the test pattern 
	 For 10-bit PRBS or debug symbols
	  please use the following sequence:
	 
	  Enable debug symbols on the lanes
 Disable PRBS mode 
 Program debug symbols to be output 
 Enable phy bypass mode to enable the test pattern 
	 This register resides in DP back end block;
	  transmitter is used for the offset
 Write Training Pattern 
 Set HW Register Training Complete to false 
 Disable PHY Bypass mode to output Training Pattern 
 Disable PRBS mode 
 Disable PHY Bypass mode to setup the test pattern 
 program correct panel mode
 A PRBS23 pattern is used for most DP electrical measurements. 
 Enable PRBS symbols on the lanes 
 For PRBS23 Set bit DPHY_PRBS_SEL=1 and Set bit DPHY_PRBS_EN=1 
 Enable phy bypass mode to enable the test pattern 
 Disable PHY Bypass mode to setup the test pattern 
 A PRBS7 pattern is used for most DP electrical measurements. 
 Enable PRBS symbols on the lanes 
 For PRBS7 Set bit DPHY_PRBS_SEL=0 and Set bit DPHY_PRBS_EN=1 
 Enable phy bypass mode to enable the test pattern 
 Disable PHY Bypass mode to setup the test pattern 
 Enable debug symbols on the lanes 
 Enable PHY bypass mode to enable the test pattern 
 TODO is it really needed ? 
 Program 80 bit custom pattern 
 Enable phy bypass mode to enable the test pattern 
	 previously there is a register DP_HBR2_EYE_PATTERN
	  that is enabled to get the pattern.
	  But it does not work with the latest spec change,
	  so we are programming the following registers manually.
	 
	  The following settings have been confirmed
	  by Nick Chorney and Sandra Liu
 Disable PHY Bypass mode to setup the test pattern 
 Setup DIG encoder in DP SST mode 
 ensure normal panel mode. 
	 no vbid after BS (SR)
	  DP_LINK_FRAMING_CNTL changed history Sandra Liu
	  11000260  11000104  110000FC
 swap every BS with SR 
 select cp2520 patterns 
 pre-DCE11 can only generate CP2520 pattern 2 
 set link training complete 
 disable video stream 
 Disable PHY Bypass mode to setup the test pattern 
 program correct panel mode 
	 restore LINK_FRAMING_CNTL and DPHY_SCRAMBLER_BS_COUNT
	  in case we were doing HBR2 compliance pattern before
 set link training complete 
 Disable PHY Bypass mode to setup the test pattern 
 Disable PRBS mode 
 return value is bit-vector 
 invalid source select DIG
 set number of lanes 
 setup scrambler 
		In DCE 11, we are able to pre-program a Force SR register
		  to be able to trigger SR symbol after 5 idle patterns
		  transmitted. Upon PSR Exit, DMCU can trigger
		  DPHY_LOAD_BS_COUNT_START = 1. Upon writing 1 to
		  DPHY_LOAD_BS_COUNT_START and the internal counter
		  reaches DPHY_LOAD_BS_COUNT, the next BS symbol will be
		  replaced by SR symbol once.
 reset training pattern 
 reset training complete 
 reset panel mode 
 Associate HPD with DIG_BE 
	 This handles the case of HDMI downgrade to DVI we don't want to
	  we don't want to cap the pixel clock if the DDI is not DVI.
 DVI only support RGB pixel encoding 
connect DVI via adpater's HDMI connector
 DVI supports 68bpp single-link and 1016bpp dual-link 
 check pixel clock against edid specified max TMDS clk
 DCE11 HW does not support 420 
	 set the flag to indicate whether driver poll the I2C data pin
	  while doing the DP sink detect
	if (dal_adapter_service_is_feature_supported(as,
		FEATURE_DP_SINK_DETECT_POLL_DATA_PIN))
		enc10->base.features.flags.bits.
	 For DCE 8.0 and 8.1, by design, UNIPHY is hardwired to DIG_BE.
	  SW always assign DIG_FE 1:1 mapped to DIG_FE for non-MST UNIPHY.
	  SW assign DIG_FE to non-MST UNIPHY first and MST last. So prefer
	  DIG is per UNIPHY and used by SST DP, eDP, HDMI, DVI and LVDS.
	  Prefer DIG assignment is decided by board design.
	  For DCE 8.0, there are only max 6 UNIPHYs, we assume board design
	  and VBIOS will filter out 7 UNIPHY for DCE 8.0.
	  By this, adding DIGG should not hurt DCE 8.0.
	  This will let DCE 8.1 share DCE 8.0 as much as possible
 default to one to mirror Windows behavior 
 Override features with DCE-specific values 
if SCDC (340-600MHz) is disabled, set to HDMI 1.4 timing limit
	 reinitialize HPD.
	  hpd_initialize() will pass DIG_FE id to HW context.
	  All other routine within HW context will use fe_engine_offset
	  as DIG_FE id even caller pass DIG_FE id.
	  So this routine must be called first.
 DP SST 
 LVDS 
 TMDS-DVI 
 TMDS-HDMI 
 DP MST 
 invalid mode ! 
 TODO: still need depth or just pass in adjusted pixel clock? 
 Enable the PHY 
 enables DP PHY output 
 Enable the PHY 
	 number_of_lanes is used for pixel clock adjust,
	  but it's not passed to asic_control.
	  We need to set number of lanes manually.
 TODO: check if undefined works 
 enables DP PHY output in MST mode 
 Enable the PHY 
	 number_of_lanes is used for pixel clock adjust,
	  but it's not passed to asic_control.
	  We need to set number of lanes manually.
 TODO: check if undefined works 
  @brief
  Disable transmitter and its encoder
 OF_SKIP_POWER_DOWN_INACTIVE_ENCODER 
	in DP_Alt_No_Connect case, we turn off the dig already,
	 Power-down RX and disable GPU PHY should be paired.
	  Disabling PHY without powering down RX may cause
	  symbol lock loss, on which we will get DP Sink interrupt.
	 There is a case for the DP active dongles
	  where we want to disable the PHY but keep RX powered,
	  for those we need to ignore DP Sink interrupt
	  by checking lane count that has been set
	  on the last do_enable_output().
 disable transmitter 
 disable encoder 
 translate lane settings 
 post cursor 2 setting only applies to HBR2 link rate 
			 this is passed to VBIOS
			  to program post cursor 2 level
 call VBIOS table to set voltage swing and pre-emphasis 
 set DP PHY test and training patterns 
 invalid phy pattern 
 programs DP MST VC payload allocation 
 For CZ, there are only 3 pipes. So Virtual channel is up 3.
	 --- Set MSE Stream Attribute -
	  Setup VC Payload Table on Tx Side,
	  Issue allocation change trigger
	  to commit payload on both tx and rx side
 we should clean-up table each time 
 --- wait for transaction finish 
	 send allocation change trigger (ACT) ?
	  this step first sends the ACT,
	  then double buffers the SAT into the hardware
	  making the new allocation active on the DP MST mode link
	 DP_MSE_SAT_UPDATE:
	  0 - No Action
	  1 - Update SAT with trigger
	  2 - Update SAT without trigger
	 wait for update to complete
	  (i.e. DP_MSE_SAT_UPDATE field is reset to 0)
	  then wait for the transmission
	  of at least 16 MTP headers on immediate local link.
	  i.e. DP_MSE_16_MTP_KEEPOUT field (read only) is reset to 0
	  a value of 1 indicates that DP MST mode
	  is in the 16 MTP keepout region after a VC has been added.
	  MST stream bandwidth (VC rate) can be configured
	  after this bit is cleared
 bit field DP_MSE_SAT_UPDATE is set to 1 already 
 14 window (the maximum allowed) 
 Set Default link settings 
 Higher link settings based on feature supported 
 SPDX-License-Identifier: MIT
  Copyright (C) 2021 Advanced Micro Devices, Inc.
  Authors: AMD
 SPDX-License-Identifier: MIT
  Copyright (C) 2021 Advanced Micro Devices, Inc.
  Authors: AMD
DCN303 removes PG registers
DCN303 removes PG registers
DCN303 removes PG registers
DCN303 removes PG registers
 SPDX-License-Identifier: MIT
  Copyright (C) 2021 Advanced Micro Devices, Inc.
  Authors: AMD
 ?
 ?
 ?
 writeback_line_buffer_buffer_size = 656640
 SRExitTime
 TODO: set this to actual min DCFCLK 
 ?
 ?
 ?
upto 8K
 -1 = disable,
 -1 = disable
 NBIO 
 DCN 
 Mapping of VPG, AFMT, DME register blocks to DIO block instance 
 Update size of array since we "removed" duplicates 
 Calculate optimal dcfclk for each uclk 
 Calculate optimal uclk for each dcfclk sta target 
 create the final dcfclk and uclk table 
 Fill all states with max values of all other clocks 
 Populate from bw_params for DTBCLK, SOCCLK 
 These clocks cannot come from bw_params, always fill from dcn3_03_soc[1] 
 FCLK, PHYCLK_D18, DSCCLK 
 WA: patch strobe modes to compensate for DCN303 BW issue
 re-init DML with updated bb 
	
	   Resource + asic cap harcoding                
1.4 wa applied by derfault
 total size = mall per channel  num channels  1024  1024 
 Color pipeline capabilities 
 must use gamma_corr
 no OGAM ROM on DCN3
3
 Init the vm_helper
	
	   Create resources                             
 Clock Sources for Pixel Clock
 todo: not reuse phy_pll registers 
 DCCG 
 PP Lib and SMU interfaces 
 DML 
 IRQ 
 HUBBUB 
 HUBPs, DPPs, OPPs and TGs 
 PSR 
 ABM 
 MPC and DSC 
 DWB and MMHUBBUB 
 AUX and I2C 
 Audio, Stream Encoders including HPO and virtual, MPC 3D LUTs 
 HW Sequencer and Plane caps 
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 S2D13 value in [-3.00...0.9999] 
  convert_float_matrix - This converts a double into HW register spec defined format S2D13.
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 Add a case to switch 
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 Container must be non-zero size
 Container must be non-zero size
	 If caller didn't supply initial value then the default
	  of all zeros is expected, which is exactly what dal_alloc()
 create new vector 
		 when count is 0 we still want to create clone of the vector
		 Call "presized create" version, independently of how the
		  original vector was created.
		  The owner of original vector must know how to treat the new
		  vector - as "presized" or as "regular".
 no initial value 
 copy vector's data 
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  @brief
  result = dividend  divisor
  remainder = dividend % divisor
 determine integer part 
 determine fractional part 
 round up LSB 
	
	  @note
	  Good idea to use Newton's method
 TODO implement argument normalization 
  @brief
  result = exp(arg),
  where abs(arg) < 1
  Calculated as Taylor series.
 TODO find correct res 
	
	  @brief
	  Main equation is:
	  exp(x) = exp(r + m  ln(2)) = (1 << m)  exp(r),
	  where m = round(x  ln(2)), r = x - m  ln(2)
 TODO improve 1st estimation 
 TODO if arg is negative, return NaN 
 TODO if arg is zero, return -INF 
 TODO determine max_allowed_error based on quality of exp() 
 this function is a generic helper to translate fixed point value to
  specified integer format that will consist of integer_bits integer part and
  fractional_bits fractional part. For example it is used in
  dc_fixpt_u2d19 to receive 2 bits integer part and 19 bits fractional
  part in 32 bits. It is used in hw programming (scaler)
 1. create mask of integer part 
 2. mask out fractional part 
 3. shrink fixed point integer part to be of integer_bits width
 4. make space for fractional part to be filled in after integer 
 5. shrink fixed point fractional part to of fractional_bits width
 6. merge the result 
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 Only if CRTC is enabled and counter is moving we wait for one frame. 
 Resetting LB on VBlank 
 Resetting LB on VBlank 
 HW needs to do power measurement comparison. 
FBC_MIN_COMPRESSION 0 ==> 2:1 
                    1 ==> 4:1 
                    2 ==> 8:1 
                  0xF ==> 1:1 
 params->inst is valid HW CRTC instance start from 0 
 Keep track of enum controller_id FBC is attached to 
		 attached_inst is SW CRTC instance start from 1
		  0 = CONTROLLER_ID_UNDEFINED means not attached crtc
 Toggle it as there is bug in HW 
 FBC usage with scatter & gather for dce110 
 Enable FBC 
 Turn off compression 
 Reset enum controller_id to undefined 
 Sync line buffer which fbc was attached to dce100110 only 
 Check the hardware register 
 Clear content first. 
 Write address, HIGH has to be first. 
 Clear content first. 
 Write FBC Pitch. 
	 Disable region hit event, FBC_MEMORY_REGION_MASK = 0 (bits 16-19)
	  for DCE 11 regions cannot be used - does not work with SG
	 Setup events when to clear all CSM entries (effectively marking
	  current compressed data invalid)
	  For DCE 11 CSM metadata 11111 means - "Not Compressed"
	  Used as the initial value of the metadata sent to the compressor
	  after invalidation, to indicate that the compressor should attempt
	  to compress all chunks on the current pass.  Also used when the chunk
	  is not successfully written to memory.
	  When this CSM value is detected, FBC reads from the uncompressed
	  buffer. Set events according to passed in value, these events are
	  valid for DCE11:
	      - bit  0 - display register updated
	      - bit 28 - memory write from any client except from MCIF
	      - bit 29 - CG static screen signal is inactive
	  In addition, DCE11.1 also needs to set new DCE11.1 specific events
	  that are used to trigger invalidation on certain register changes,
	  for example enabling of Alpha Compression may trigger invalidation of
	  FBC once bit is set. These events are as follows:
	       - Bit 2 - FBC_GRPH_COMP_EN register updated
	       - Bit 3 - FBC_SRC_SEL register updated
	       - Bit 4 - FBC_MIN_COMPRESSION register updated
	       - Bit 5 - FBC_ALPHA_COMP_EN register updated
	       - Bit 6 - FBC_ZERO_ALPHA_CHUNK_SKIP_EN register updated
	       - Bit 7 - FBC_FORCE_COPY_TO_COMP_BUF register updated
	 if (m_smallLocalFrameBufferMemory == 1)
	  {
	 	max_x = FBC_MAX_X_SG;
	 	max_y = FBC_MAX_Y_SG;
	  }
 for dce 11 always use one dram channel for lpt 
	
	  check if this system has more than 1 dram channel; if only 1 then lpt
	  should not be supported
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 include DCE11 register header files 
   Function: regamma_config_regions_and_segments
      build regamma curve by using predefined hw points
      uses interface parameters ,like EDID coeff.
  @param   : parameters   interface parameters
   @return void
   @note
   @see
 Program REGAMMA_LUT_DATA 
 Setup regions 
 Power on gamma LUT memory 
 Program PWL 
 program regamma config 
 Power return to auto back 
 TODO: need to implement the function
  Copyright 2012-16 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 TODO: this needs to be looked at, used by Stella's workaround
 chroma part 
high register MUST be programmed first
 luma part 
high register MUST be programmed first
 not supported 
 VIDEO FORMAT 0 
 Video 422 and 420 needs UNP_GRPH_CONTROL_EXP programmed 
 Scatter Gather param tables 
 fake 
 0 for invalid 
 fake 
 new for 64bpp from HW 
 Helper to get table entry from surface info 
 TODO: un-hardcode requestlimit 
 register value 
Write mask to enable readingwriting of watermark set A
Write mask to enable readingwriting of watermark set B
 register value 
Write mask to enable readingwriting of watermark set A
Write watermark set A
Write mask to enable readingwriting of watermark set B
Write watermark set B
 Write mask to enable readingwriting of watermark set A 
 Write watermark set A 
 Write mask to enable readingwriting of watermark set B 
 Write watermark set B 
 for current stream 
 for current stream 
 for current stream 
 Constructor, Destructor               
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
Do not set chroma vp for rgb444 pixel format
		for 420 video chroma is 14 the area of luma, scaled
		 vertically and horizontally
  Function:
  void setup_scaling_configuration
  Purpose: setup scaling mode : bypass, RGb, YCbCr and nummber of taps
  Input:   data
  Output:
   void
	
	  0 - Replaced out of bound pixels with black pixel
	  (or any other required color)
	  1 - Replaced out of bound pixels with the edge pixel
  Function:
  void program_overscan
  Purpose: Programs overscan border
  Input:   overscan
  Output: void
We need to disable power gating on coeff memory to do programming
Wait to disable gating:
		we always program N2 + 1 phases, total phases N, but N2-1 are just mirror
We need to restore power gating on coeff memory to initial state
 should never happen, bug 
Use all three pieces of memory always
hard coded number DCE11 1712(0x6B0) Partitions: 7209601712
	 1. Calculate viewport, viewport programming should happen after init
	  calculations as they may require an adjustment in the viewport.
 2. Program overscan 
 3. Program taps and configuration 
 4. Calculate and program ratio, filter initialization 
 5. Program vertical filters 
 6. Program horizontal filters 
 7. Program the viewport 
 8. Set bit to flip to new coefficient memory 
 DO NOTHING
		we should use unsupported capabilities
 Constructor, Destructor               
0x6B0
  Copyright 2015 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 include DCE11 register header files 
  All values are in milliseconds;
  For eDP, after power-uppowerdown,
  300500 msec max. delay from LCDVCC to black video generation
  Private definitions
PIPE_CONTROL
TODO
		 Revert MASTER_UPDATE_MODE to 0 because bios sets it 2
		  by default when command table is called
		 
		  Bios parser accepts controller_id = 6 as indicative of
		  underlay pipe in dce110. But we do not support more
		  than 3.
 Default case if no input transfer function specified 
TF_TYPE_DISTRIBUTED_POINTS - Not supported in DCE 11
		 16 segments
		  segments are from 2^-11 to 2^5
		 10 segments
		  segment is from 2^-10 to 2^1
		  We include an extra segment for range [2^0, 2^1). This is to
		  ensure that colors with normalized values of 1 don't miss the
		  LUT.
 last point 
	 see comment above, m_arrPoints[1].y should be the Y value for the
	  region end (m_numOfHwPoints), not last HW point(m_numOfHwPoints - 1)
		 for PQ, we want to have a straight line from last HW X point,
		  and the slope to be such that we hit 1.0 at 10000 nits.
 this is not root pipe 
	 For MST, there are multiply stream go to only one link.
	  connect DIG back_end to front_end while enable_stream and
	  disconnect them during disable_stream
 enable early control to avoid corruption on DP monitor
 enable audio only within mode set 
  @brief
  eDP only.
		
		  From KV, we will not HPD low after turning off VCC -
		  instead, we will check the SW timer in power_up().
	
	  When we power onoff the eDP panel,
	  we need to wait until SENSE bit is highlow.
 obtain HPD 
 TODO what to do with this? 
 wait until timeout or panel detected 
 Send VBIOS command to prompt eDP panel power 
 edp requires a min of 500ms from LCDVDD off to on 
 add time defined by a patch, if any (usually patch extra_t12_ms is 0) 
 Adjust remaining_min_edp_poweroff_time_ms if this is not the first time. 
save driver power off time stamp
 Default T12 as per spec
 Add extra T12
todo: cloned in stream enc, fix
  @brief
  eDP only. Control the backlight of the eDP panel
 Send VBIOS command to control eDP panel backlight 
cntl.engine_id = ctx->engine;
todo: unhardcode
	 For eDP, the following delays might need to be considered
	  after link training completed:
	  idle period - min. accounts for required BS-Idle pattern,
	  max. allows for source frame synchronization);
	  50 msec max. delay from valid video data from source
	  to video on dislpay or backlight enable.
	 
	  Disable the delay for now.
	  Enable it in the future if necessary.
 dc_service_sleep_in_milliseconds(50); 
edp 1.2
		
		  Sometimes, DP receiver chip power-controlled externally by an
		  Embedded Controller could be treated and used as eDP,
		  if it drives mobile display. In this case,
		  we shouldn't be doing power-sequencing, hence we can skip
		  waiting for T7-ready.
edp 1.2
		
		  Sometimes, DP receiver chip power-controlled externally by an
		  Embedded Controller could be treated and used as eDP,
		  if it drives mobile display. In this case,
		  we shouldn't be doing power-sequencing, hence we can skip
		  waiting for T9-ready.
 notify audio driver for audio modes of monitor 
current_state not updated yet
this is the first audio. apply the PME wa in order to wake AZ from D3
 un-mute audio 
 TODO: audio should be per stream rather than per link 
this is the first audio. apply the PME wa in order to wake AZ from D3
		 TODO: notify audio driver for if audio modes list changed
		 dal_audio_disable_azalia_audio_jack_presence(stream->audio,
		  stream->stream_engine_id);
 Link encoder may have been dynamically assigned to non-physical display endpoint. 
 TODO - DP2.0 HW: unmap stream from link encoder here 
 only 3 items below are used by unblank 
 TODO - DP2.0 HW: Set ODM mode in dp hpo encoder here 
			
			  After output is idle pattern some sinks need time to recognize the stream
			  has changed or they enter protection state and hang.
 audio_crtc_info  
	
	  Audio packets are sent during actual CRTC blank physical signal, we
	  need to specify actual active signal portion
for HDMI, audio ACR is with deep color ratio factor
 TODO hard code to enable for now. Need get from stream 
 TOFPGA 
		
		  The way 420 is packed, 2 channels carry Y component, 1 channel
		  alternate between Cb and Cr, so both channels need the pixel
		  value for Y
 program blank color 
		
		  Must blank CRTC after disabling power gating and before any
		  programming, otherwise CRTC will be hung in bad state
	 DCN3.1 FPGA Workaround
	  Need to enable HPO DP Stream Encoder before setting OTG master enable.
	  To do so, move calling function enable_stream_timing to only be done AFTER calling
	  function core_link_enable_stream
 Do not touch stream timing on seamless boot optimization. 
 DRR should set trigger event to monitor surface update event
	 Event triggers and num frames initialized for DRR, but can be
	  later updated for PSR use. Note DRR trigger events are generated
	  regardless of whether num frames met.
	 DCN3.1 FPGA Workaround
	  Need to enable HPO DP Stream Encoder before setting OTG master enable.
	  To do so, move calling function enable_stream_timing to only be done AFTER calling
	  function core_link_enable_stream
		 Enable CLOCK gating for each pipe BEFORE controller
 check if there is an eDP panel not in use 
  When ASIC goes from VBIOSVGA mode to driveraccelerated mode we need:
   1. Power down all DC HW blocks
   2. Disable VGA engine on all controllers
   3. Enable power gating for controller
   4. Set acc_mode_change bit (VBIOS will clear this bit when going to FSDOS)
 Check fastboot support, disable on DCE8 because of blank screens
 enable fastboot if backend is enabled on eDP
 Set optimization flag on eDP stream
 We are trying to enable eDP, don't power down VDD
 Check seamless boot support
	 eDP should not have stream in resume from S4 and so even with VBios post
	  it should get turned off
turn off backlight before DP_blank and encoder powered down
resume from S3, no vbios posting, no need to power down again
  Public functions
 DRR should set trigger event to monitor surface update event
 Note DRR trigger events are generated regardless of whether num frames met.
	 TODO: If multiple pipes are to be supported, you need
	  some GSL stuff. Static screen triggers may be programmed differently
	  as well.
	 TODO: handle pipes > 1
   Check if FBC can be enabled
 FBC memory should be allocated 
 Only supports single display 
 fbc not applicable on underlay pipe 
 Only supports eDP 
 PSR should not be enabled 
 Nothing to compress 
 Only for non-linear tiling 
   Enable FBC
 Program GRPH COMPRESSED ADDRESS and PITCH 
 Reset old context 
 look up the targets that have been removed since last commit 
		 Note: We need to disable output if clock sources change,
		  since bios does optimization and doesn't apply if changing
		  PHY when not already disabled.
 Skip underlay pipe since it will be handled in commit surface
			 Disable if new stream is null. Ow, if stream is
			  disabled already, no need to disable again.
 free acquired resources
disable az_endpoint
free audio
we have to dynamic arbitrate the audio endpoints
we free the resource, need reset is_audio_acquired
	 program audio wall clock. use HDMI as clock source if HDMI
	  audio active. Otherwise, use DP as clock source
	  first, loop to find any HDMI audio, if not, loop find DP audio
 Setup audio rate clock source 
	 Issue:
	 Audio lag happened on DP monitor when unplug a HDMI monitor
	
	 Cause:
	 In case of DP and HDMI connected or HDMI only, DCCG_AUDIO_DTO_SEL
	 is set to either dto0 or dto1, audio should work fine.
	 In case of DP connected only, DCCG_AUDIO_DTO_SEL should be dto1,
	 set to dto0 will cause audio lag.
	
	 Solution:
	 Not optimized audio wall dto setup. When mode set, iterate pipe_ctx,
	 find first available pipe with audio, setup audio wall DTO per topology
	 instead of per pipe.
 For DCN3.1, audio to HPO FRL encoder is using audio DTBCLK DTO 
 disable audio DTBCLK DTO 
 no HDMI audio is found, try DP audio 
 Reset old context 
 look up the targets that have been removed since last commit 
 Skip applying if no targets 
 Apply new context 
 below is for real asic only 
  Front End programming
 display color depth 
 Lb color depth 
  In order to turn onoff specific surface we will program
  Blender + CRTC
  In case that we have two surfaces and they have a different visibility
  we can't turn off the CRTC since it will turn off the entire display
  |----------------------------------------------- |
  |bottom pipe|curr pipe  |              |         |
  |Surface    |Surface    | Blender      |  CRCT   |
  |visibility |visibility | Configuration|         |
  |------------------------------------------------|
  |   off     |    off    | CURRENT_PIPE | blank   |
  |   off     |    on     | CURRENT_PIPE | unblank |
  |   on      |    off    | OTHER_PIPE   | unblank |
  |   on      |    on     | BLENDING     | unblank |
  -------------------------------------------------|
 For now we are supporting only two pipes 
	 To avoid endless loop we wait at most
 usually occurs at i=1 
 Wait for one frame. 
 Enable timing synchronization for a group of Timing Generators. 
	 Designate a single TG in the group as a master.
	  Since HW doesn't care which one, we always assign
 Reset slave controllers on master VSync 
 skip the master ; i < group_size; i++)
 skip the master ; i < group_size; i++) {
	 GSL Vblank synchronization is a one time sync mechanism, assumption
 Do nothing
		 Power up AND update implementation according to the
		  required signal (which may be different from the
		 Blank controller using driver code instead of
 Moved programming gamma from dc to hwss 
 Need to allocate mem before program front end for Fiji 
 Do not power down fe when stream is active on dce
 do nothing
	
	  If the cursor's source viewport is clipped then we need to
	  translate the cursor to appear in the correct position on
	  the screen.
	 
	  This translation isn't affected by scaling so it needs to be
	  done after we adjust the position for the scale factor.
	 
	  This is only done by opt-in for now since there are still
	  some usecases like tiled display that might enable the
	  cursor on both streams while expecting dc to clip it.
	 DMCU -1 for all controller id values,
	  therefore +1 here
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 set register offset 
 set register offset with instance 
 AG TBD Needs to be reduced back to 3 pipes once dce10 hw sequencer implemented. 
	TODO: is this halved for YCbCr 420? in that case we might want to move
	  the pixel clock normalization for hdmi up to here instead of doing it
	  in pll_adjust_pix_clk
 TODO: un-hardcode
 TODO: validate audio ASIC caps, encoder 
 underlay validation 
				 we don't have the logic to support underlay
				  only yet so block the use case where we get
				  NV12 plane as top layer
				 irrespective of plane format,
				  stream should be RGB encoded
pipe_ctx->plane_res.ipp = res_ctx->pool->ipps[underlay_idx];
		
		  This is for powering on underlay, so crtc does not
		  need to be enabled
			 Store first available for MST second display
			  in daisy chain use case
	
	  For CZ and later, we can allow DIG FE and BE to differ for all display types
 update the public caps to indicate an underlay is available 
do system clock
 convert all the clock fro kHz to fix point mHz 
do display clock
do memory clock
	
	   Resource + asic cap harcoding                
	
	   Create resources                             
 TODO: find out if CZ support 3 PLLs 
 Create hardware sequencer 
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 include DCE11 register header files 
 Constructor, Destructor               
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
   andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 include DCE11 register header files 
 constrast:0 - 2.0, default 1.0 
 Saturation: 0 - 2.0; default 1.0 
1.00
 2.00 
 0.01 
actual max overlay saturation
  value = UNDERLAY_SATURATION_MAX UNDERLAY_SATURATION_DIVIDER
 Hue 
 HW range: -30 ~ +30 
 Brightness: in DAL usually -.25 ~ .25.
  In MMD is -100 to +100 in 16-235 range; which when scaled to full range is
   ~-116 to +116. When normalized this is about 0.4566.
  With 100 divider this becomes 46, but we may use another for better precision
  The ideal one is 100219 ((100255)(255219)),
  i.e. minmax = +-100, divider = 219
  default 0.0
 ~116255 
  .01 
 TODO: correct values below 
 00 - BITS2:0 Bypass 
 01 - hard coded coefficient TV RGB 
 04 - programmable OUTPUT CSC coefficient 
 fixed S2.13 format 
 fixed S2.13 format 
 fixed S0.13 format 
 fixed S2.13 format 
 fixed S2.13 format 
 fixed S2.13 format 
 fixed S0.13 format 
 fixed S2.13 format 
 fixed S0.13 format 
 fixed S2.13 format 
 fixed S0.13 format 
 fixed S2.13 format 
 fixed S2.13 format 
 fixed S0.13 format 
 fixed S2.13 format 
 fixed S2.13 format 
 fixed S2.13 format 
 fixed S0.13 format 
 fixed S2.13 format 
 fixed S0.13 format 
 fixed S2.13 format 
 fixed S0.13 format 
 by pass 
 not supported for underlay on CZ 
 YCbCr601 
 YCbCr709 
 by pass 
 not supported for underlay on CZ 
 YCbCr601 
 YCbCr709 
 by pass 
TODO: color depth is not correct when this is called
 255256 for 8 bit output color depth 
 10231024 for 10 bit output color depth 
 40954096 for 12 bit output color depth 
 not valid case 
1_1   1_2   1_3   1_4   2_1   2_2   2_3   2_4   3_1   3_2   3_3   3_4 
	
	  1 == set A, the logic is 'if currently we're not using set A,
	  then use set A, otherwise use set B'
 fixed S2.13 format 
 fixed S2.13 format 
 KK: leave INPUT_CSC_CONVERSION_MODE at default 
	
	  select 8.4 input type instead of default 12.0. From the discussion
	  with HW team, this format depends on the UNP surface format, so for
	  8-bit we should select 8.4 (4 bits truncated). For 10 it should be
	  10.2. For Carrizo we only support 8-bit surfaces on underlay pipe
	  so we can always keep this at 8.4 (input_type=2). If the later asics
	  start supporting 10+ bits, we will have a problem: surface
	  programming including UNP_GRPH is being done in DalISR after this,
	  so either we pass surface format to here, or move this logic to ISR
 currently parameter not in use 
		
		  HW default false we program locally defined matrix
		  HW default true  we use predefined hw matrix and we
		  do not need to program matrix
		  OEM wants the HW default via runtime parameter.
			 program the matrix with default values from this
			  file
	 configure the what we programmed :
	  1. Default values from this file
	  2. Use hardware default from ROM_A and we do not need to program
	  matrix
  We did everything ,now program DxOUTPUT_CSC_CONTROL 
TODO: Check if denormalization is needed
set_Denormalization(opp, adjust->color_depth);
  Copyright 2017 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 include DCE11 register header files 
  DCE11 Timing Generator Implementation
  Enable CRTCV
  Set MASTER_UPDATE_MODE to 0
  This is needed for DRR, and also suggested to be default value by Syed.
 TODO: may want this on for looking for underflow 
	
	  TODO: call this when adding stereo support
	  tg->funcs->disable_stereo(tg);
	 We want to catch beginning of VBlank here, so if the first try are
	  in VBlank, we might be very close to Active, in this case wait for
	  another frame
 error - no point to wait if counter is not moving 
 error - no point to wait if counter is not moving 
  Wait till we are in VActive (anywhere in VActive)
 error - no point to wait if counter is not moving 
	 This is desirable to have a constant DAC output voltage during the
	  blank time that is higher than the 0 volt reference level that the
	  DAC outputs when the NBLANK signal
	 TO DO we have to program EXT registers and we need to know LB DATA
	  format because it is used when more 10 , i.e. 12 bits per color
	 
	  m_mmDxCRTC_OVERSCAN_COLOR_EXT
	  m_mmDxCRTC_BLACK_COLOR_EXT
	  m_mmDxCRTC_BLANK_DATA_COLOR_EXT
  DCE11 Timing Generator Constructor  Destructor
 Not to be implemented for underlay
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 include DCE11 register header files 
 Flowing register offsets are same in files of
  dcedce_11_0_d.h
  dcevi_polaris10_pvi_polaris10_d.h
  So we can create dce110 timing generator to use it.
 apply_front_porch_workaround
 This is a workaround for a bug that has existed since R5xx and has not been
 fixed keep Front porch at minimum 2 for Interlaced mode or 1 for progressive.
   Function: is_in_vertical_blank
   @brief
      check the current status of CRTC to check if we are in Vertical Blank
      regioneased" state
   @return
      true if currently in blank region, false otherwise
  Enable CRTC
  Enable CRTC - call ASIC Control Object to enable Timing generator.
	
	  3 is used to make sure V_UPDATE occurs at the beginning of the first
	  line of vertical front porch
 TODO: may want this on to catch underflow 
   Function: disable_stereo
   @brief
      Disables active stereo on controller
      Frame Packing need to be disabled in vBlank or when CRTC not running
	
	  When disabling Frame Packing in 2 step mode, we need to program both
	  registers at the same frame
	  Programming it in the beginning of VActive makes sure we are ok
  disable_crtc - call ASIC Control Object to disable Timing generator.
 Need to make sure stereo is disabled according to the DCE5.0 spec 
	
	  @TODOSTEREO call this when adding stereo support
	  tg->funcs->disable_stereo(tg);
  program_horz_count_by_2
  Programs DxCRTC_HORZ_COUNT_BY2_EN - 1 for DVI 30bpp mode, 0 otherwise
  program_timing_generator
  Program CRTC Timing Registers - DxCRTC_H_, DxCRTC_V_, Pixel repetition.
  Call ASIC Control Object to program Timings.
	 Due to an asic bug we need to apply the Front Porch workaround prior
	  to programming the timing.
 Set overscan 
 Set flags 
	 Enable stereo - only when we need to pack 3D frame. Other types
   Function: set_drr
   @brief
      Program dynamic refresh rate registers m_DxCRTC_V_TOTAL_.
   @param [in] pHwCrtcTiming: point to H
   wCrtcTiming struct
 register values 
 By register spec, it only takes 8 bit value
  get_vblank_counter
  @brief
  Get counter for vertical blanks. use register CRTC_STATUS_FRAME_COUNT which
  holds the counter of frames.
  @param
  struct timing_generator tg - [in] timing generator which controls the
  desired CRTC
  @return
  Counter of frames, which should equal to number of vblanks.
   Function: dce110_timing_generator_get_position
   @brief
      Returns CRTC verticalhorizontal counters
   @param [out] position
   Function: get_crtc_scanoutpos
   @brief
      Returns CRTC verticalhorizontal counters
   @param [out] vpos, hpos
 TODO: is it safe to assume that maskshift of Primary and Underlay
  are the same?
  For example: today CRTC_H_TOTAL == CRTCV_H_TOTAL but is it always
	 In case of V_TOTAL_CONTROL is on, make sure V_TOTAL_MAX and
	  V_TOTAL_MIN are equal to V_TOTAL.
	 TODO: replace 'controller_dp_test_pattern' by 'test_pattern_mode'
	  because this is not DP-specific (which is probably somewhere in DP
 color ramp generator mixes 16-bits color 
 requested bpc 
	 RGB values of the color bars.
	  Produce two RGB colors: RGB0 - white (all Fs)
	  and RGB1 - black (all 0s)
	  (three RGB components for two colors)
 dest color (converted to the specified color format) 
 translate to bit depth 
 adjust color to the required colorFormat 
			 dst = 2^dstBpc  src  2^srcBpc = src >>
			  (srcBpc - dstBpc);
		 CRTC_TEST_PATTERN_DATA has 16 bits,
		  lowest 6 are hardwired to ZERO
		  color bits should be left aligned aligned to MSB
		  XXXXXXXXXX000000 for 10 bit,
		  XXXXXXXX00000000 for 8 bit and XXXXXX0000000000 for 6
		 We have to write the mask before data, similar to pipeline.
		  For example, for 8 bpc, if we want RGB0 to be magenta,
		  and RGB1 to be cyan,
		  we need to make 7 writes:
		  MASK   DATA
		  000001 00000000 00000000                     set mask to R0
		  000010 11111111 00000000     R0 255, 0xFF00, set mask to G0
		  000100 00000000 00000000     G0 0,   0x0000, set mask to B0
		  001000 11111111 00000000     B0 255, 0xFF00, set mask to R1
		  010000 00000000 00000000     R1 0,   0x0000, set mask to G1
		  100000 11111111 00000000     G1 255, 0xFF00, set mask to B1
		  100000 11111111 00000000     B1 255, 0xFF00
		 
		  we will make a loop of 6 in which we prepare the mask,
		  then write, then prepare the color for next write.
		  first iteration will write mask only,
		  but each next iteration color prepared in
		  previous iteration will be written within new mask,
		  the last component will written separately,
		  mask is not changing between 6th and 7th write
		  and color will be prepared by last iteration
		 write color, color values mask in CRTC_TEST_PATTERN_MASK
		  is B1, G1, R1, B0, G0, R0
			 prepare color mask, first write PATTERN_DATA
			  will have all zeros
 write color component 
			 prepare next color component,
			  will be written in the next iteration
		 write last color component,
		  it's been already prepared in the loop
 enable test pattern 
		 increment for the first ramp for one color gradation
		  1 gradation for 6-bit color is 2^10
		  gradations in 16-bit color
 enable test pattern 
 add color depth translation here 
  dce110_timing_generator_validate_timing
  The timing generators support a maximum display size of is 8192 x 8192 pixels,
  including both active display and blanking periods. Check H Total and V Total.
 Currently we don't support 3D, so block all 3D timings 
 Temporarily blocking interlacing mode until it's supported 
	 Check maximum number of pixels supported by Timing Generator
	  (Currently will never fail, in order to fail needs display which
	  needs more than 8192 horizontal and
	  more than 8192 vertical total pixels)
  Wait till we are at the beginning of VBlank.
	 We want to catch beginning of VBlank here, so if the first try are
	  in VBlank, we might be very close to Active, in this case wait for
	  another frame
 error - no point to wait if counter is not moving 
 error - no point to wait if counter is not moving 
  Wait till we are in VActive (anywhere in VActive)
 error - no point to wait if counter is not moving 
   Function: dce110_timing_generator_setup_global_swap_lock
   @brief
      Setups Global Swap Lock group for current pipe
      Pipe can join or leave GSL group, become a TimingServer or TimingClient
   @param [in] gsl_params: setup data
 This pipe will belong to GSL Group zero. 
	 Keep signal low (pending high) during 6 lines.
 DCP_GSL_PURPOSE_SURFACE_FLIP 
 Checkpoint relative to end of frame 
	 Clear all the register writes done by
	  dce110_timing_generator_setup_global_swap_lock
 This pipe will belong to GSL Group zero. 
 Settig HW default values from reg specs 
 Restore DCP_GSL_PURPOSE_SURFACE_FLIP 
   Function: is_counter_moving
   @brief
      check if the timing generator is currently going
   @return
      true if currently going, false if currently paused or stopped.
TODO: Figure out if we need this function. 
 Setup trigger edge 
		 Register spec has reversed definition:
 send every signal 
 no delay 
 clear trigger status 
 force H count to H_TOTAL and V count to V_TOTAL 
 TriggerB - we never use TriggerA 
 clear trigger status 
 Setup trigger edge 
 clear trigger status 
 force H count to H_TOTAL and V count to V_TOTAL 
 TriggerB - we never use TriggerA 
 clear trigger status 
 force H count to H_TOTAL and V count to V_TOTAL 
 TriggerB - we never use TriggerA 
 clear trigger status 
 force counter now mode is disabled 
 clear trigger status 
 clear trigger status 
   @brief
      Checks whether CRTC triggered reset occurred
   @return
      true if triggered reset occurred, false otherwise
  dce110_timing_generator_disable_vga
  Turn OFF VGA Mode and Timing  - DxVGA_CONTROL
  VGA Mode and VGA Timing is used by VBIOS on CRT Monitors;
  set_overscan_color_black
  @param :black_color is one of the color space
     :this routine will set overscan black color according to the color space.
  @return none
	 This is desirable to have a constant DAC output voltage during the
	  blank time that is higher than the 0 volt reference level that the
	  DAC outputs when the NBLANK signal
	 TO DO we have to program EXT registers and we need to know LB DATA
	  format because it is used when more 10 , i.e. 12 bits per color
	 
	  m_mmDxCRTC_OVERSCAN_COLOR_EXT
	  m_mmDxCRTC_BLACK_COLOR_EXT
	  m_mmDxCRTC_BLANK_DATA_COLOR_EXT
 Gets first line of blank region of the display timing for CRTC
  and programms is as a trigger to fire vertical interrupt
 Set interval width for interrupt to fire to 1 scanline 
 Cannot configure crc on a CRTC that is disabled 
 First, disable CRC before we configure it. 
 Program frame boundaries 
 Window A x axis start and end. 
 Window A y axis start and end. 
 Window B x axis start and end. 
 Window B y axis start and end. 
 Set crc mode and selection, and enable. Only using CRC0
 Early return if CRC is not enabled for this CRTC 
  Copyright 2017 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  Copyright 2017 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  Copyright 2017 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  NOTE:
    This file is gcc-parsable HW gospel, coming straight from HW engineers.
  It doesn't adhere to Linux kernel style and sometimes will do things in odd
  ways. Unless there is something clearly wrong with it the code should
  remain as-is as it provides us with a guarantee from HW that it is correct.
 SOC Bounding Box Parameters
 there's always that one bastard variable that's so long it throws everything out of alignment!
 new!
 new!
 new
 new
 Set the voltage scaling clocks as the defaults. Most of these will
 be set to different values by the test
mode_lib->vba.DRAMSpeedPerState[i] = soc->clock_limits[i].dram_speed_mhz;
 IP Parameters
 Convert Pipes to Planes
 TODO: Needs to be set based on src->dcc_rate_lumachroma 
 TODO: or should this be full_recout_width???...maybe only when in hsplit mode?
 TODO: Needs to be set based on dout->audio.audio_sample_rate_khzsample_layout 
 The DML spreadsheet assumes that the two cursors utilize the same amount of bandwidth. We'll
 calculate things a little more accurately
 handle overlays through BlendingAndTiming
 BlendingAndTiming tells you which instance to look at to get timing, the so called 'master'
 doesn't matter, so choose the smaller one
 TODO: ODMCombineEnabled => 2  DPPPerPlane...actually maybe not since all pipes are specified
 Do we want the dscclk to automatically be halved? Guess not since the value is specified
 in wm mode we pull the parameters needed from the display_e2e_pipe_params_st structs
 rather than working them out as in recalculate_ms
 This is only safe to use memcmp because there are non-POD types in struct display_mode_lib
Progressive To Interlace Unit Effect
 Total Available Pipes Support Check
  Copyright 2017 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  NOTE:
    This file is gcc-parseable HW gospel, coming straight from HW engineers.
  It doesn't adhere to Linux kernel style and sometimes will do things in odd
  ways. Unless there is something clearly wrong with it the code should
  remain as-is as it provides us with a guarantee from HW that it is correct.
 prefill has to be >= 1 
 ensure minimum of 1 is used 
	 TODO: take the max between luma, chroma chunk size?
	  okay for now, as we are setting chunk_bytes to 8kb anyways
32kb 
 half to chroma 
 23 to chroma 
full 256b request 
128b request (for luma only for yuv420 8bpc) 
		 Bug workaround, luma and chroma req size needs to be the same. (see: DEGVIDCN10-137)
		  TODO: Remove after rtl fix
		 Note: assumption, the config that pass in will fit into
		        the detiled buffer.
 Need refactor. 
	 remember log rule
	  "+" in log is multiply
	  "-" in log is divide
	  "2" is like square root
	  blk is vertical biased
 blk height of 1 
 ------- 
 meta    
 ------- 
 meta request is 64b and is 8x8byte meta element 
	 each 64b meta request for dcn is 8x8 meta elements and
	  a meta element covers one 256b block of the data surface.
 meta req is 8x8 
	 the dimensions of a meta row are meta_row_width x meta_row_height in elements.
	  calculate upper bound of the meta_row_width
 ------ 
 dpte   
 ------ 
 64b dpte req width in data element 
 one line high 
 only 3 possible shapes for dpte request in dimensions of ptes: 8x1, 4x2, 2x4. 
 8x1 
 4x2 
 2x4 
	 the dpte request dimensions in data elements is dpte_req_width x dpte_req_height
	  log2_wmpg_width is how much 1 pte represent, now trying to calculate how much 64b pte req represent
	 calculate pitch dpte row buffer can hold
	  round the result down to a power of two.
 the upper bound of the dpte_row_width without dependency on viewport position follows.  
	 From programming guide:
	  There is a special case of saving only half of ptes returned due to buffer space limits.
	  this case applies to 4 and 8bpe in horizontal access of a vp_width greater than 2560+16
	  when the pte request is 2x4 ptes (which happens when vmpg_bytes =4kb and tile blk_bytes >=64kb).
half of the full height 
 TODO check if ppe apply for both luma and chroma in 422 case 
	 remember log rule
	  "+" in log is multiply
	  "-" in log is divide
	  "2" is like square root
	  blk is vertical biased
 blk height of 1 
 -------  
 meta     
 -------  
 meta request is 64b and is 8x8byte meta element 
	 each 64b meta request for dcn is 8x8 meta elements and
	  a meta element covers one 256b block of the data surface.
 meta req is 8x8 byte, each byte represent 1 blk256 
	 the dimensions of a meta row are meta_row_width x meta_row_height in elements.
	  calculate upper bound of the meta_row_width
full sized meta chunk width in unit of data elements 
64B mpte request 
 ------ 
 dpte   
 ------ 
 64b dpte req height in data element 
 64b dpte req width in data element 
 one line high 
 only 3 possible shapes for dpte request in dimensions of ptes: 8x1, 4x2, 2x4. 
 Ensure we only have the 3 shapes 
 8x1 
 4x2 
 2x4 
	 The dpte request dimensions in data elements is dpte_req_width x dpte_req_height
	  log2_vmpg_width is how much 1 pte represent, now calculating how much a 64b pte req represent
	  That depends on the pte shape (i.e. 8x1, 4x2, 2x4)
	 calculate pitch dpte row buffer can hold
	  round the result down to a power of two.
		 For linear, the dpte row is pitch dependent and the pte requests wrap at the pitch boundary.
		  the dpte_row_width_ub is the upper bound of data_pitchdpte_row_height in elements with this unique buffering.
 for tiled mode, row height is the same as req height and row store up to vp size upper bound 
	 From programming guide:
	  There is a special case of saving only half of ptes returned due to buffer space limits.
	  this case applies to 4 and 8bpe in horizontal access of a vp_width greater than 2560+16
	  when the pte request is 2x4 ptes (which happens when vmpg_bytes =4kb and tile blk_bytes >=64kb).
half of the full height 
	 the dpte_group_bytes is reduced for the specific case of vertical
	  access of a tile surface that has dpte request of 8x1 ptes.
reduced, in this case, will have page fault within a group 
full size 
since pte request size is 64byte, the number of data pte requests per full sized group is as follows.  
length in 64b requests  
 full sized data pte group width in elements 
	 since dpte groups are only aligned to dpte_req_width and not dpte_group_width,
	  the upper bound for the dpte groups per row is as follows.
	 Just a check to make sure this function and the new one give the same
	  result. The standalone get_row_heights() function is based off of the
	  code in this function so the same changes need to be made to both.
 get param for luma surface 
 get param for chroma surface 
 calculate how to split the det buffer space between luma and chroma 
 Note: currently taken in as is.
  Nice to decouple code from hw register implement and extract code that are repeated for luma and chroma.
 Timing 
 ------------------------- 
 Section 1.5.2.1: OTG dependent Params 
 ------------------------- 
 15 bits 
 TODO: ip_param 
 ------------------------- 
 Section 1.5.2.2: Prefetch, Active and TTU  
 ------------------------- 
 Prefetch Calc 
 Source 
 TODO 
 vp access direction: horizontal or vertical accessed 
 Scaling 
 in terms of line 
 in terms of refclk 
 dcc for 4:2:0 is not supported in dcn1.0.  assigned to be the same as _l for now 
 Active 
 dcc for 4:2:0 is not supported in dcn1.0.  assigned to be the same as _l for now 
 2 for 2 pixel per element 
 assume half split for dcn1 
 per line 
 per line 
 per line 
 per line 
 TTU - Luma  Chroma 
 vertical access 
 per req 
 per req 
 per req  
 per req 
 TTU - Cursor 
 cursor source width 
 byte 
 32bit 
 TODO: oswin to think about what to do for cursor 
 TTU - Misc 
  Copyright 2017 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  NOTE:
    This file is gcc-parsable HW gospel, coming straight from HW engineers.
  It doesn't adhere to Linux kernel style and sometimes will do things in odd
  ways. Unless there is something clearly wrong with it the code should
  remain as-is as it provides us with a guarantee from HW that it is correct.
 For DML-C changes that hasn't been propagated to VBA yet
#define __DML_VBA_ALLOW_DELTA__
 Move these to ip paramatersconstant
 At which vstartup the DML start to try if the mode can be supported
 Delay in DCFCLK from ARB to DET (1st num is ARB to SDPIF, 2nd number is SDPIF to DET)
 fudge factor for min dcfclk calclation
 valid bpc         = source bits per component in the set of {8, 10, 12}
 valid bpp         = increments of 116 of a bit
                    min = 678 in N420N422444, respectively
                    max = such that compression is 1:1
valid sliceWidth  = number of pixels per slice line, must be less than or equal to 5184numSlices (or 4096numSlices in 420 mode)
valid numSlices   = number of slices in the horiziontal direction per DSC engine in the set of {1, 2, 3, 4}
valid pixelFormat = pixelcolor format in the set of {:N444_RGB, :S422, :N422, :N420}
 fixed value
 N422N420 operate at 2 pixels per clock
 #all other modes operate at 1 pixel per clock
initial transmit delay as per PPS
compute ssm delay
divide by pixel per cycle to compute slice width as seen by DSC
422 mode has an additional cycle of delay
main calculation for the dscce
dsc processes 3 pixel containers per cycle and a container can contain 1 or 2 pixels
   sfr
   dsccif
   dscc - input deserializer
   dscc gets pixels every other cycle
   dscc - input cdc fifo
   dscc gets pixels every other cycle
   dscc - cdc uncertainty
   dscc - output cdc fifo
   dscc gets pixels every other cycle
   dscc - cdc uncertainty
   dscc - output serializer
   sft
   sfr
   dsccif
   dscc - input deserializer
  dscc - input cdc fifo
   dscc - cdc uncertainty
   dscc - output cdc fifo
   dscc - cdc uncertainty
   dscc - output serializer
   sft
   sfr
   dsccif
   dscc - input deserializer
   dscc - input cdc fifo
   dscc - cdc uncertainty
   dscc - output cdc fifo
   dscc - output serializer
   dscc - cdc uncertainty
   sft
 PREVIOUS_ERROR (missing this term)
 See note above dated 5302018
                      - ((NumberOfCursors > 0 || GPUVMEnable || DCCEnable) ?
 TODO: Did someone else add this??
 DAL custom code: need to update ReturnBW in case min dcfclk is overriden 
 End DAL custom code 
 DISPCLK and DPPCLK Calculation
 Urgent and B P-StateDRAM Clock Change Watermark
 DCFCLK Deep Sleep
 DSCCLK
 DSC Delay
 NumberOfPlanes
 Prefetch
 VBA_DELTA
 We don't really care to iterate between the various prefetch modes
v->PrefetchERROR = CalculateMinAndMaxPrefetchMode(v->AllowDRAMSelfRefreshOrDRAMClockChangeInVblank, &v->MinPrefetchMode, &v->MaxPrefetchMode);
 PREVIOUS_ERROR
 This error result check was done after the PrefetchModeSupported. So we will
 still try to calculate flip schedule even prefetch mode not supported
 Unbounded Request Enabled
Watermarks and NB P-StateDRAM Clock Change Support
 dummy
Display Pipeline Delivery Time in Prefetch, Groups
 Min TTUVBlank
 DCC Configuration
 We should always know the direction DCCProgrammingAssumesScanDirectionUnknown,
 VStartup Adjustment
Maximum Bandwidth Used
 Stutter Efficiency
 Display Pipe Configuration
MODE SUPPORT, VOLTAGE STATE AND SOC CONFIGURATION
Scale Ratio, taps Support Check
Source Format, Pixel Format and Scan Support Check
Bandwidth Support Check
Writeback Latency support check
Writeback Mode Support Check
Writeback Scale Ratio and Taps Support Check
Maximum DISPCLKDPPCLK Support check
 UPTO
Total Available Pipes Support Check
Display IO and DSC Support Check
Number Of DSC Slices
 TODO: Need some other way to handle this nonsense
 v->OutputTypeAndRatePerState[i][k] = v->Output[k] & " HBR"
 TODO: Need some other way to handle this nonsense
 v->OutputTypeAndRatePerState[i][k] = v->Output[k] & " HBR2"
 TODO: Need some other way to handle this nonsense
 v->OutputTypeAndRatePerState[i][k] = v->Output[k] & " HBR3"
v->OutputTypeAndRatePerState[i][k] = v->Output[k] & "10x4";
v->OutputTypeAndRatePerState[i][k] = v->Output[k] & "12x4";
 UPTO 2172
 Skip dscclk validation: as long as dispclk is supported, dscclk is also implicitly supported 
DSC Delay per state
Calculate Swath, DET Configuration, DCFCLKDeepSleep
Calculate Return BW
Re-ordering Buffer Support Check
Vertical Active BW support check
Prefetch Check
PTE Buffer Size Check
Cursor Support Check
Valid Pitch Check
Mode Support, Voltage State and SOC Configuration
  Copyright 2017 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 FIXME: take the max between luma, chroma chunk size?
 okay for now, as we are setting chunk_bytes to 8kb anyways
32kb
 Note: detile_buf_plane1_addr is in unit of 1KB
 half to chroma
 23 to luma
full 256b request
full sized meta chunk width in unit of data elements
 remember log rule
 "+" in log is multiply
 "-" in log is divide
 "2" is like square root
 blk is vertical biased
 blk height of 1
 -------
 meta
 -------
 meta request is 64b and is 8x8byte meta element
 each 64b meta request for dcn is 8x8 meta elements and
 a meta element covers one 256b block of the data surface.
 meta req is 8x8 byte, each byte represent 1 blk256
 the dimensions of a meta row are meta_row_width x meta_row_height in elements.
 calculate upper bound of the meta_row_width
full sized meta chunk width in unit of data elements
64B mpte request
 ------
 dpte
 ------
 one line high
 only 3 possible shapes for dpte request in dimensions of ptes: 8x1, 4x2, 2x4.
one 64B PTE request returns 8 PTEs
4KB tile means 4kB page size
one 64B req gives 8x1 PTEs for 4KB tile
 tile block >= 64KB
two 64B reqs of 2x4 PTEs give 16 PTEs to cover 64KB
 log2_64KB_width
 log2_64KB_height
64KB page size and must 64KB tile block
one 64B req gives 8x1 PTEs for 64KB tile
 The dpte request dimensions in data elements is dpte_req_width x dpte_req_height
 log2_vmpg_width is how much 1 pte represent, now calculating how much a 64b pte req represent
 That depends on the pte shape (i.e. 8x1, 4x2, 2x4)
log2_dpte_req_height    = log2_vmpg_height + log2_dpte_req_height_ptes;
log2_dpte_req_width     = log2_vmpg_width + log2_dpte_req_width_ptes;
 calculate pitch dpte row buffer can hold
 round the result down to a power of two.
 For linear, the dpte row is pitch dependent and the pte requests wrap at the pitch boundary.
 the dpte_row_width_ub is the upper bound of data_pitchdpte_row_height in elements with this unique buffering.
 the upper bound of the dpte_row_width without dependency on viewport position follows.
 for tiled mode, row height is the same as req height and row store up to vp size upper bound
 tile block >= 64KB
264B dpte request
64B dpte request
 the dpte_group_bytes is reduced for the specific case of vertical
 access of a tile surface that has dpte request of 8x1 ptes.
reduced, in this case, will have page fault within a group
since pte request size is 64byte, the number of data pte requests per full sized group is as follows.
length in 64b requests
 full sized data pte group width in elements
But if the tile block >=64KB and the page size is 4KB, then each dPTE request is 264B
 tile block >= 64KB
 since dpte groups are only aligned to dpte_req_width and not dpte_group_width,
 the upper bound for the dpte groups per row is as follows.
 FIXME check if ppe apply for both luma and chroma in 422 case
 vp access direction: horizontal or vertical accessed
 get param for luma surface
 get param for chroma surface
 calculate how to split the det buffer space between luma and chroma
 byte
 32bit
 FIXME: oswin to think about what to do for cursor
 Note: currently taken in as is.
 Nice to decouple code from hw register implement and extract code that are repeated for luma and chroma.
 -------------------------
 Section 1.15.2.1: OTG dependent Params
 -------------------------
 Timing
 Scaling
 FROM VBA
 From VBA
 From VBA
 From VBA
 From VBA
 From VBA
 15 bits
set_prefetch_mode(mode_lib, cstate_en, pstate_en, ignore_viewport_pos, immediate_flip_support);
 From VBA
old_impl_vs_vba_impl("min_dst_y_next_start", dlg_vblank_start, vba__min_dst_y_next_start);
 -------------------------
 Section 1.15.2.2: Prefetch, Active and TTU
 -------------------------
 Prefetch Calc
 Source
 vp access direction: horizontal or vertical accessed
 Scaling
 FROM VBA
old_impl_vs_vba_impl("vready_after_vcount0", disp_dlg_regs->vready_after_vcount0, vba__vready_after_vcount0);
 From VBA
 From VBA
 do some adjustment on the dst_after scaler to account for odm combine mode
 need to figure out which side of odm combine we're in
 figure out which pipes go together
 TODO: We should really check that 4to1 is supported before setting it to 4
 From VBA
 From VBA
 From VBA
 From VBA
 From VBA
U5.2
U4.2
 magic!
 From VBA
 From VBA
 Active
 2 for 2 pixel per element
 In ODM
 This "hack"  is only allowed (and valid) for MPC combine. In ODM
 combine, you MUST specify the full_recout_width...according to Oswin
 assume half split for dcn1
 As of DCN2, mpc_combine and odm_combine are mutually exclusive
 per line
 per line
old_impl_vs_vba_impl("refcyc_per_line_delivery_pre_l", refcyc_per_line_delivery_pre_l, vba__refcyc_per_line_delivery_pre_l);
old_impl_vs_vba_impl("refcyc_per_line_delivery_l", refcyc_per_line_delivery_l, vba__refcyc_per_line_delivery_l);
 From VBA
 From VBA
 per line
 per line
old_impl_vs_vba_impl("refcyc_per_line_delivery_pre_c", refcyc_per_line_delivery_pre_c, vba__refcyc_per_line_delivery_pre_c);
old_impl_vs_vba_impl("refcyc_per_line_delivery_c", refcyc_per_line_delivery_c, vba__refcyc_per_line_delivery_c);
 From VBA
 From VBA
 TTU - Luma  Chroma
 vertical access
 per req
 per req
old_impl_vs_vba_impl("refcyc_per_req_delivery_pre_l", refcyc_per_req_delivery_pre_l, vba__refcyc_per_req_delivery_pre_l);
old_impl_vs_vba_impl("refcyc_per_req_delivery_l", refcyc_per_req_delivery_l, vba__refcyc_per_req_delivery_l);
 From VBA
 From VBA
 per req
 per req
old_impl_vs_vba_impl("refcyc_per_req_delivery_pre_c", refcyc_per_req_delivery_pre_c, vba__refcyc_per_req_delivery_pre_c);
old_impl_vs_vba_impl("refcyc_per_req_delivery_c", refcyc_per_req_delivery_c, vba__refcyc_per_req_delivery_c);
 TTU - Cursor
 From VBA
 From VBA
old_impl_vs_vba_impl("refcyc_per_req_delivery_pre_cur0", refcyc_per_req_delivery_pre_cur0, vba__refcyc_per_req_delivery_pre_cur0);
old_impl_vs_vba_impl("refcyc_per_req_delivery_cur0", refcyc_per_req_delivery_cur0, vba__refcyc_per_req_delivery_cur0);
 TTU - Misc
 all hard-coded
 Assignment to register structures
 in terms of line
 in terms of refclk
 hack for FPGA
 dcc for 4:2:0 is not supported in dcn1.0.  assigned to be the same as _l for now
 From VBA
 From VBA
 From VBA
 From VBA
 Clamp to max for now
 TODO: Is this the right calculation? Does htotal need to be halved?
 off
 Get watermark and Tex.
 system parameter calculation done
  Copyright 2018 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 Function: dml20v2_rq_dlg_get_rq_params
  Calculate requestor related parameters that register definition agnostic
  (i.e. this layer does try to separate real values from register definition)
 Input:
  pipe_src_param - pipe source configuration (e.g. vp, pitch, etc.)
 Output:
  rq_param - values that can be used to setup RQ (e.g. swath_height, plane1_addr, etc.)
 Function: dml20v2_rq_dlg_get_dlg_params
  Calculate deadline related parameters
  NOTE:
    This file is gcc-parseable HW gospel, coming straight from HW engineers.
  It doesn't adhere to Linux kernel style and sometimes will do things in odd
  ways. Unless there is something clearly wrong with it the code should
  remain as-is as it provides us with a guarantee from HW that it is correct.
 TODO: take the max between luma, chroma chunk size?
 okay for now, as we are setting chunk_bytes to 8kb anyways
32kb
 half to chroma
 23 to chroma
full 256b request
128b request (for luma only for yuv420 8bpc)
 Note: assumption, the config that pass in will fit into
       the detiled buffer.
full sized meta chunk width in unit of data elements
 remember log rule
 "+" in log is multiply
 "-" in log is divide
 "2" is like square root
 blk is vertical biased
 blk height of 1
 -------
 meta
 -------
 meta request is 64b and is 8x8byte meta element
 each 64b meta request for dcn is 8x8 meta elements and
 a meta element covers one 256b block of the data surface.
 meta req is 8x8 byte, each byte represent 1 blk256
 the dimensions of a meta row are meta_row_width x meta_row_height in elements.
 calculate upper bound of the meta_row_width
full sized meta chunk width in unit of data elements
64B mpte request
 ------
 dpte
 ------
 one line high
 only 3 possible shapes for dpte request in dimensions of ptes: 8x1, 4x2, 2x4.
one 64B PTE request returns 8 PTEs
4KB tile means 4kB page size
one 64B req gives 8x1 PTEs for 4KB tile
 tile block >= 64KB
two 64B reqs of 2x4 PTEs give 16 PTEs to cover 64KB
 log2_64KB_width
 log2_64KB_height
64KB page size and must 64KB tile block
one 64B req gives 8x1 PTEs for 64KB tile
 The dpte request dimensions in data elements is dpte_req_width x dpte_req_height
 log2_vmpg_width is how much 1 pte represent, now calculating how much a 64b pte req represent
 That depends on the pte shape (i.e. 8x1, 4x2, 2x4)
log2_dpte_req_height    = log2_vmpg_height + log2_dpte_req_height_ptes;
log2_dpte_req_width     = log2_vmpg_width + log2_dpte_req_width_ptes;
 calculate pitch dpte row buffer can hold
 round the result down to a power of two.
 For linear, the dpte row is pitch dependent and the pte requests wrap at the pitch boundary.
 the dpte_row_width_ub is the upper bound of data_pitchdpte_row_height in elements with this unique buffering.
 the upper bound of the dpte_row_width without dependency on viewport position follows.
 for tiled mode, row height is the same as req height and row store up to vp size upper bound
 tile block >= 64KB
264B dpte request
64B dpte request
 the dpte_group_bytes is reduced for the specific case of vertical
 access of a tile surface that has dpte request of 8x1 ptes.
reduced, in this case, will have page fault within a group
full size
since pte request size is 64byte, the number of data pte requests per full sized group is as follows.
length in 64b requests
 full sized data pte group width in elements
But if the tile block >=64KB and the page size is 4KB, then each dPTE request is 264B
 tile block >= 64KB
 since dpte groups are only aligned to dpte_req_width and not dpte_group_width,
 the upper bound for the dpte groups per row is as follows.
 TODO check if ppe apply for both luma and chroma in 422 case
 get param for luma surface
 get param for chroma surface
 calculate how to split the det buffer space between luma and chroma
 Note: currently taken in as is.
 Nice to decouple code from hw register implement and extract code that are repeated for luma and chroma.
 -------------------------
 Section 1.15.2.1: OTG dependent Params
 -------------------------
 Timing
    unsigned int hblank_start = dst.hblank_start; 
 Scaling
    double vinit_l;
    double vinit_c;
    double vinit_bot_l;
    double vinit_bot_c;
    unsigned int swath_height_l;
    unsigned int dpte_bytes_per_row_ub_l;
    unsigned int meta_pte_bytes_per_frame_ub_l;
    unsigned int meta_bytes_per_row_ub_l;
    unsigned int swath_height_c;
   unsigned int dpte_bytes_per_row_ub_c;
 15 bits
 -------------------------
 Section 1.15.2.2: Prefetch, Active and TTU
 -------------------------
 Prefetch Calc
 Source
             dcc_en              = src.dcc;
 TODO
 vp access direction: horizontal or vertical accessed
      bytes_per_element_l = get_bytes_per_element(source_format_class(src.source_format), 0);
      bytes_per_element_c = get_bytes_per_element(source_format_class(src.source_format), 1);
 Scaling
     vinit_l         = scl.vinit;
     vinit_c         = scl.vinit_c;
     vinit_bot_l     = scl.vinit_bot;
     vinit_bot_c     = scl.vinit_bot_c;
    unsigned int swath_height_l                 = rq_dlg_param->rq_l.swath_height;
    unsigned int dpte_bytes_per_row_ub_l        = rq_dlg_param->rq_l.dpte_bytes_per_row_ub;
    unsigned int meta_pte_bytes_per_frame_ub_l  = rq_dlg_param->rq_l.meta_pte_bytes_per_frame_ub;
    unsigned int meta_bytes_per_row_ub_l        = rq_dlg_param->rq_l.meta_bytes_per_row_ub;
    unsigned int swath_height_c                 = rq_dlg_param->rq_c.swath_height;
   dpte_bytes_per_row_ub_c        = rq_dlg_param->rq_c.dpte_bytes_per_row_ub;
 TODO: Where is this coming from?
 TODO: What if this min_vblank doesn't match the value in the dml_config_settings.cpp?
 Lwait
 magic!
 Active
 2 for 2 pixel per element
 In ODM
 This "hack"  is only allowed (and valid) for MPC combine. In ODM
 combine, you MUST specify the full_recout_width...according to Oswin
 assume half split for dcn1
 As of DCN2, mpc_combine and odm_combine are mutually exclusive
 per line
 per line
 per line
 per line
 TTU - Luma  Chroma
 vertical access
 per req
 per req
 per req
 per req
 TTU - Cursor
 TTU - Misc
 all hard-coded
 Assignment to register structures
 in terms of line
 in terms of refclk
 dcc for 4:2:0 is not supported in dcn1.0.  assigned to be the same as _l for now
 TODO: dcc for 4:2:0 is not supported in dcn1.0.  assigned to be the same as _l for now
 TODO: Is this the right calculation? Does htotal need to be halved?
 off
ASSERT(disp_ttu_regs->qos_level_high_wm < dml_pow(2, 14));
 Get watermark and Tex.
 TODO: Deprecated
 system parameter calculation done
 byte
 32bit
 TODO: oswin to think about what to do for cursor
  Copyright 2018 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  NOTE:
    This file is gcc-parseable HW gospel, coming straight from HW engineers.
  It doesn't adhere to Linux kernel style and sometimes will do things in odd
  ways. Unless there is something clearly wrong with it the code should
  remain as-is as it provides us with a guarantee from HW that it is correct.
 Super monster function with some 45 argument
 valid bpc         = source bits per component in the set of {8, 10, 12}
 valid bpp         = increments of 116 of a bit
                    min = 678 in N420N422444, respectively
                    max = such that compression is 1:1
valid sliceWidth  = number of pixels per slice line, must be less than or equal to 5184numSlices (or 4096numSlices in 420 mode)
valid numSlices   = number of slices in the horiziontal direction per DSC engine in the set of {1, 2, 3, 4}
valid pixelFormat = pixelcolor format in the set of {:N444_RGB, :S422, :N422, :N420}
 fixed value
 N422N420 operate at 2 pixels per clock
 #all other modes operate at 1 pixel per clock
initial transmit delay as per PPS
compute ssm delay
divide by pixel per cycle to compute slice width as seen by DSC
422 mode has an additional cycle of delay
main calculation for the dscce
dsc processes 3 pixel containers per cycle and a container can contain 1 or 2 pixels
   sfr
   dsccif
   dscc - input deserializer
   dscc gets pixels every other cycle
   dscc - input cdc fifo
   dscc gets pixels every other cycle
   dscc - cdc uncertainty
   dscc - output cdc fifo
   dscc gets pixels every other cycle
   dscc - cdc uncertainty
   dscc - output serializer
   sft
   sfr
   dsccif
   dscc - input deserializer
  dscc - input cdc fifo
   dscc - cdc uncertainty
   dscc - output cdc fifo
   dscc - cdc uncertainty
   dscc - output serializer
   sft
   sfr
   dsccif
   dscc - input deserializer
   dscc - input cdc fifo
   dscc - cdc uncertainty
   dscc - output cdc fifo
   dscc - output serializer
   dscc - cdc uncertainty
   sft
 dml_ml->vba.DISPCLK and dml_ml->vba.DPPCLK Calculation
 Urgent Watermark
 Let's do this calculation again??
 dm_420_10
 NB P-StateDRAM Clock Change Watermark
 Stutter Efficiency
 dml_ml->vba.DCFCLK Deep Sleep
 Stutter Watermark
 Urgent Latency Supported
 Non-Urgent Latency Tolerance
 DSCCLK
 DSC Delay
 TODO
 NumberOfPlanes
 Prefetch
Display Pipeline Delivery Time in Prefetch
 Min TTUVBlank
 DCC Configuration
 NB P-StateDRAM Clock Change Support
XFC Parameters:
only use max vstart if it is not drr or lateflip.
 TODO: This doesn't seem to match programming guide
MODE SUPPORT, VOLTAGE STATE AND SOC CONFIGURATION
Scale Ratio, taps Support Check
Source Format, Pixel Format and Scan Support Check
Bandwidth Support Check
Writeback Latency support check
Re-ordering Buffer Support Check
Writeback Mode Support Check
Writeback Scale Ratio and Taps Support Check
Maximum DISPCLKDPPCLK Support check
Viewport Size Check
Total Available Pipes Support Check
Total Available OTG Support Check
Display IO and DSC Support Check
DSC Delay per state
Prefetch Check
Prefetch Check
Vertical Active BW support
PTE Buffer Size Check
Cursor Support Check
Valid Pitch Check
Mode Support, Voltage State and SOC Configuration
 SPDX-License-Identifier: MIT
  Copyright 2021 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  DOC: DCN2x FPU manipulation Overview
  The DCN architecture relies on FPU operations, which require special
  compilation flags and the use of kernel_fpu_beginend functions; ideally, we
  want to avoid spreading FPU access across multiple files. With this idea in
  mind, this file aims to centralize all DCN20 and DCN2.1 (DCN2x) functions
  that require FPU access in a single place. Code in this file follows the
  following code pattern:
  1. Functions that use FPU operations should be isolated in static functions.
  2. The FPU functions should have the noinline attribute to ensure anything
     that deals with FP register is contained within this call.
  3. All function that needs to be accessed outside this file requires a
     public interface that not uses any FPU reference.
  4. Developers must not use DC_FP_STARTEND in this file, but they need
     to ensure that the caller invokes it before access any function available
     in this file. For this reason, public functions in this file must invoke
     dc_assert_fp_enabled();
  Let's expand a little bit more the idea in the code pattern. To fully
  isolate FPU operations in a single place, we must avoid situations where
  compilers spill FP values to registers due to FP enable in a specific C
  file. Note that even if we isolate all FPU functions in a single file and
  call its interface from other files, the compiler might enable the use of
  FPU before we call DC_FP_START. Nevertheless, it is the programmer's
  responsibility to invoke DC_FP_STARTEND in the correct place. To highlight
  situations where developers forgot to use the FP protection before calling
  the DC FPU interface functions, we introduce a helper that checks if the
  function is invoked under FP protection. If not, it will trigger a kernel
  warning.
 Set writeback information 
  Copyright 2018 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 Function: dml20_rq_dlg_get_rq_params
  Calculate requestor related parameters that register definition agnostic
  (i.e. this layer does try to separate real values from register definition)
 Input:
  pipe_src_param - pipe source configuration (e.g. vp, pitch, etc.)
 Output:
  rq_param - values that can be used to setup RQ (e.g. swath_height, plane1_addr, etc.)
 Function: dml20_rq_dlg_get_dlg_params
  Calculate deadline related parameters
  NOTE:
    This file is gcc-parseable HW gospel, coming straight from HW engineers.
  It doesn't adhere to Linux kernel style and sometimes will do things in odd
  ways. Unless there is something clearly wrong with it the code should
  remain as-is as it provides us with a guarantee from HW that it is correct.
 TODO: take the max between luma, chroma chunk size?
 okay for now, as we are setting chunk_bytes to 8kb anyways
32kb
 half to chroma
 23 to chroma
full 256b request
128b request (for luma only for yuv420 8bpc)
 Note: assumption, the config that pass in will fit into
       the detiled buffer.
full sized meta chunk width in unit of data elements
 remember log rule
 "+" in log is multiply
 "-" in log is divide
 "2" is like square root
 blk is vertical biased
 blk height of 1
 -------
 meta
 -------
 meta request is 64b and is 8x8byte meta element
 each 64b meta request for dcn is 8x8 meta elements and
 a meta element covers one 256b block of the data surface.
 meta req is 8x8 byte, each byte represent 1 blk256
 the dimensions of a meta row are meta_row_width x meta_row_height in elements.
 calculate upper bound of the meta_row_width
full sized meta chunk width in unit of data elements
64B mpte request
 ------
 dpte
 ------
 one line high
 only 3 possible shapes for dpte request in dimensions of ptes: 8x1, 4x2, 2x4.
one 64B PTE request returns 8 PTEs
4KB tile means 4kB page size
one 64B req gives 8x1 PTEs for 4KB tile
 tile block >= 64KB
two 64B reqs of 2x4 PTEs give 16 PTEs to cover 64KB
 log2_64KB_width
 log2_64KB_height
64KB page size and must 64KB tile block
one 64B req gives 8x1 PTEs for 64KB tile
 The dpte request dimensions in data elements is dpte_req_width x dpte_req_height
 log2_vmpg_width is how much 1 pte represent, now calculating how much a 64b pte req represent
 That depends on the pte shape (i.e. 8x1, 4x2, 2x4)
log2_dpte_req_height    = log2_vmpg_height + log2_dpte_req_height_ptes;
log2_dpte_req_width     = log2_vmpg_width + log2_dpte_req_width_ptes;
 calculate pitch dpte row buffer can hold
 round the result down to a power of two.
 For linear, the dpte row is pitch dependent and the pte requests wrap at the pitch boundary.
 the dpte_row_width_ub is the upper bound of data_pitchdpte_row_height in elements with this unique buffering.
 the upper bound of the dpte_row_width without dependency on viewport position follows.
 for tiled mode, row height is the same as req height and row store up to vp size upper bound
 tile block >= 64KB
264B dpte request
64B dpte request
 the dpte_group_bytes is reduced for the specific case of vertical
 access of a tile surface that has dpte request of 8x1 ptes.
reduced, in this case, will have page fault within a group
full size
since pte request size is 64byte, the number of data pte requests per full sized group is as follows.
length in 64b requests
 full sized data pte group width in elements
But if the tile block >=64KB and the page size is 4KB, then each dPTE request is 264B
 tile block >= 64KB
 since dpte groups are only aligned to dpte_req_width and not dpte_group_width,
 the upper bound for the dpte groups per row is as follows.
 TODO check if ppe apply for both luma and chroma in 422 case
 get param for luma surface
 get param for chroma surface
 calculate how to split the det buffer space between luma and chroma
 Note: currently taken in as is.
 Nice to decouple code from hw register implement and extract code that are repeated for luma and chroma.
 -------------------------
 Section 1.15.2.1: OTG dependent Params
 -------------------------
 Timing
    unsigned int hblank_start = dst.hblank_start; 
 Scaling
    double vinit_l;
    double vinit_c;
    double vinit_bot_l;
    double vinit_bot_c;
    unsigned int swath_height_l;
    unsigned int dpte_bytes_per_row_ub_l;
    unsigned int meta_pte_bytes_per_frame_ub_l;
    unsigned int meta_bytes_per_row_ub_l;
    unsigned int swath_height_c;
   unsigned int dpte_bytes_per_row_ub_c;
 15 bits
 -------------------------
 Section 1.15.2.2: Prefetch, Active and TTU
 -------------------------
 Prefetch Calc
 Source
             dcc_en              = src.dcc;
 TODO
 vp access direction: horizontal or vertical accessed
      bytes_per_element_l = get_bytes_per_element(source_format_class(src.source_format), 0);
      bytes_per_element_c = get_bytes_per_element(source_format_class(src.source_format), 1);
 Scaling
     vinit_l         = scl.vinit;
     vinit_c         = scl.vinit_c;
     vinit_bot_l     = scl.vinit_bot;
     vinit_bot_c     = scl.vinit_bot_c;
    unsigned int swath_height_l                 = rq_dlg_param->rq_l.swath_height;
    unsigned int dpte_bytes_per_row_ub_l        = rq_dlg_param->rq_l.dpte_bytes_per_row_ub;
    unsigned int meta_pte_bytes_per_frame_ub_l  = rq_dlg_param->rq_l.meta_pte_bytes_per_frame_ub;
    unsigned int meta_bytes_per_row_ub_l        = rq_dlg_param->rq_l.meta_bytes_per_row_ub;
    unsigned int swath_height_c                 = rq_dlg_param->rq_c.swath_height;
   dpte_bytes_per_row_ub_c        = rq_dlg_param->rq_c.dpte_bytes_per_row_ub;
 TODO: Where is this coming from?
 TODO: What if this min_vblank doesn't match the value in the dml_config_settings.cpp?
 Lwait
 magic!
 Active
 2 for 2 pixel per element
 In ODM
 This "hack"  is only allowed (and valid) for MPC combine. In ODM
 combine, you MUST specify the full_recout_width...according to Oswin
 assume half split for dcn1
 As of DCN2, mpc_combine and odm_combine are mutually exclusive
 per line
 per line
 per line
 per line
 TTU - Luma  Chroma
 vertical access
 per req
 per req
 per req
 per req
 TTU - Cursor
 TTU - Misc
 all hard-coded
 Assignment to register structures
 in terms of line
 in terms of refclk
 dcc for 4:2:0 is not supported in dcn1.0.  assigned to be the same as _l for now
 TODO: dcc for 4:2:0 is not supported in dcn1.0.  assigned to be the same as _l for now
 TODO: Is this the right calculation? Does htotal need to be halved?
 off
ASSERT(disp_ttu_regs->qos_level_high_wm < dml_pow(2, 14));
 Get watermark and Tex.
 TODO: Deprecated
 system parameter calculation done
 byte
 32bit
 TODO: oswin to think about what to do for cursor
  Copyright 2018 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  NOTE:
    This file is gcc-parseable HW gospel, coming straight from HW engineers.
  It doesn't adhere to Linux kernel style and sometimes will do things in odd
  ways. Unless there is something clearly wrong with it the code should
  remain as-is as it provides us with a guarantee from HW that it is correct.
 Super monster function with some 45 argument
 valid bpc         = source bits per component in the set of {8, 10, 12}
 valid bpp         = increments of 116 of a bit
                    min = 678 in N420N422444, respectively
                    max = such that compression is 1:1
valid sliceWidth  = number of pixels per slice line, must be less than or equal to 5184numSlices (or 4096numSlices in 420 mode)
valid numSlices   = number of slices in the horiziontal direction per DSC engine in the set of {1, 2, 3, 4}
valid pixelFormat = pixelcolor format in the set of {:N444_RGB, :S422, :N422, :N420}
 fixed value
 N422N420 operate at 2 pixels per clock
 #all other modes operate at 1 pixel per clock
initial transmit delay as per PPS
compute ssm delay
divide by pixel per cycle to compute slice width as seen by DSC
422 mode has an additional cycle of delay
main calculation for the dscce
dsc processes 3 pixel containers per cycle and a container can contain 1 or 2 pixels
   sfr
   dsccif
   dscc - input deserializer
   dscc gets pixels every other cycle
   dscc - input cdc fifo
   dscc gets pixels every other cycle
   dscc - cdc uncertainty
   dscc - output cdc fifo
   dscc gets pixels every other cycle
   dscc - cdc uncertainty
   dscc - output serializer
   sft
   sfr
   dsccif
   dscc - input deserializer
  dscc - input cdc fifo
   dscc - cdc uncertainty
   dscc - output cdc fifo
   dscc - cdc uncertainty
   dscc - output serializer
   sft
   sfr
   dsccif
   dscc - input deserializer
   dscc - input cdc fifo
   dscc - cdc uncertainty
   dscc - output cdc fifo
   dscc - output serializer
   dscc - cdc uncertainty
   sft
 dml_ml->vba.DISPCLK and dml_ml->vba.DPPCLK Calculation
 Urgent Watermark
 Let's do this calculation again??
 dm_420_10
 NB P-StateDRAM Clock Change Watermark
 Stutter Efficiency
 dml_ml->vba.DCFCLK Deep Sleep
 Stutter Watermark
 Urgent Latency Supported
 Non-Urgent Latency Tolerance
 DSCCLK
 DSC Delay
 TODO
 NumberOfPlanes
 Prefetch
Display Pipeline Delivery Time in Prefetch
 Min TTUVBlank
 DCC Configuration
 NB P-StateDRAM Clock Change Support
XFC Parameters:
only use max vstart if it is not drr or lateflip.
 TODO: This doesn't seem to match programming guide
MODE SUPPORT, VOLTAGE STATE AND SOC CONFIGURATION
Scale Ratio, taps Support Check
Source Format, Pixel Format and Scan Support Check
Bandwidth Support Check
Writeback Latency support check
Re-ordering Buffer Support Check
Writeback Mode Support Check
Writeback Scale Ratio and Taps Support Check
Maximum DISPCLKDPPCLK Support check
Viewport Size Check
Total Available Pipes Support Check
Total Available OTG Support Check
Display IO and DSC Support Check
DSC Delay per state
Prefetch Check
Prefetch Check
Vertical Active BW support
PTE Buffer Size Check
Cursor Support Check
Valid Pitch Check
Mode Support, Voltage State and SOC Configuration
  Copyright 2021 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 alias enum
 requested size is bigger than the table 
	 in native_422 or native_420 modes, the bits_per_pixel is double the
	  target bpp (the latter is what calc_rc_params expects)
 fixed parameters 
 TODO: Make sure the formula for calculating this is precise (ceiling
 vs. floor, and at what point they should be applied)
  Copyright 2017 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  NOTE:
    This file is gcc-parseable HW gospel, coming straight from HW engineers.
  It doesn't adhere to Linux kernel style and sometimes will do things in odd
  ways. Unless there is something clearly wrong with it the code should
  remain as-is as it provides us with a guarantee from HW that it is correct.
 FIXME: take the max between luma, chroma chunk size?
 okay for now, as we are setting chunk_bytes to 8kb anyways
32kb
 half to chroma
 23 to chroma
full 256b request
128b request (for luma only for yuv420 8bpc)
 Note: assumption, the config that pass in will fit into
       the detiled buffer.
full sized meta chunk width in unit of data elements
 remember log rule
 "+" in log is multiply
 "-" in log is divide
 "2" is like square root
 blk is vertical biased
 blk height of 1
 -------
 meta
 -------
 meta request is 64b and is 8x8byte meta element
 each 64b meta request for dcn is 8x8 meta elements and
 a meta element covers one 256b block of the data surface.
 meta req is 8x8 byte, each byte represent 1 blk256
 the dimensions of a meta row are meta_row_width x meta_row_height in elements.
 calculate upper bound of the meta_row_width
full sized meta chunk width in unit of data elements
64B mpte request
 ------
 dpte
 ------
 one line high
 only 3 possible shapes for dpte request in dimensions of ptes: 8x1, 4x2, 2x4.
one 64B PTE request returns 8 PTEs
4KB tile means 4kB page size
one 64B req gives 8x1 PTEs for 4KB tile
 tile block >= 64KB
two 64B reqs of 2x4 PTEs give 16 PTEs to cover 64KB
 log2_64KB_width
 log2_64KB_height
64KB page size and must 64KB tile block
one 64B req gives 8x1 PTEs for 64KB tile
 The dpte request dimensions in data elements is dpte_req_width x dpte_req_height
 log2_vmpg_width is how much 1 pte represent, now calculating how much a 64b pte req represent
 That depends on the pte shape (i.e. 8x1, 4x2, 2x4)
log2_dpte_req_height    = log2_vmpg_height + log2_dpte_req_height_ptes;
log2_dpte_req_width     = log2_vmpg_width + log2_dpte_req_width_ptes;
 calculate pitch dpte row buffer can hold
 round the result down to a power of two.
 For linear, the dpte row is pitch dependent and the pte requests wrap at the pitch boundary.
 the dpte_row_width_ub is the upper bound of data_pitchdpte_row_height in elements with this unique buffering.
 the upper bound of the dpte_row_width without dependency on viewport position follows.
 for tiled mode, row height is the same as req height and row store up to vp size upper bound
 tile block >= 64KB
264B dpte request
64B dpte request
 the dpte_group_bytes is reduced for the specific case of vertical
 access of a tile surface that has dpte request of 8x1 ptes.
reduced, in this case, will have page fault within a group
full size
since pte request size is 64byte, the number of data pte requests per full sized group is as follows.
length in 64b requests
 full sized data pte group width in elements
But if the tile block >=64KB and the page size is 4KB, then each dPTE request is 264B
 tile block >= 64KB
 since dpte groups are only aligned to dpte_req_width and not dpte_group_width,
 the upper bound for the dpte groups per row is as follows.
 FIXME check if ppe apply for both luma and chroma in 422 case
 vp access direction: horizontal or vertical accessed
 get param for luma surface
 get param for chroma surface
 calculate how to split the det buffer space between luma and chroma
 Note: currently taken in as is.
 Nice to decouple code from hw register implement and extract code that are repeated for luma and chroma.
 -------------------------
 Section 1.15.2.1: OTG dependent Params
 -------------------------
 Timing
    unsigned int hblank_start = dst.hblank_start; 
 Scaling
    double vinit_l;
    double vinit_c;
    double vinit_bot_l;
    double vinit_bot_c;
    unsigned int swath_height_l;
    unsigned int dpte_bytes_per_row_ub_l;
    unsigned int meta_pte_bytes_per_frame_ub_l;
    unsigned int meta_bytes_per_row_ub_l;
    unsigned int swath_height_c;
   unsigned int dpte_bytes_per_row_ub_c;
 15 bits
 -------------------------
 Section 1.15.2.2: Prefetch, Active and TTU
 -------------------------
 Prefetch Calc
 Source
             dcc_en              = src.dcc;
 FIXME
 vp access direction: horizontal or vertical accessed
      bytes_per_element_l = get_bytes_per_element(source_format_class(src.source_format), 0);
      bytes_per_element_c = get_bytes_per_element(source_format_class(src.source_format), 1);
 Scaling
 TODO: Where is this coming from?
 TODO: What if this min_vblank doesn't match the value in the dml_config_settings.cpp?
 Lwait
 TODO: Should this be urgent_latency_pixel_mixed_with_vm_data_us?
 TODO: Should this be urgent_latency_pixel_mixed_with_vm_data_us?
 magic!
 Active
 2 for 2 pixel per element
 In ODM
 This "hack"  is only allowed (and valid) for MPC combine. In ODM
 combine, you MUST specify the full_recout_width...according to Oswin
 assume half split for dcn1
 As of DCN2, mpc_combine and odm_combine are mutually exclusive
 per line
 per line
 per line
 per line
 TTU - Luma  Chroma
 vertical access
 per req
 per req
 per req
 per req
 TTU - Cursor
 TTU - Misc
 all hard-coded
 Assignment to register structures
 in terms of line
 in terms of refclk
 dcc for 4:2:0 is not supported in dcn1.0.  assigned to be the same as _l for now
 Clamp to max for now
 TODO: dcc for 4:2:0 is not supported in dcn1.0.  assigned to be the same as _l for now
 TODO: Is this the right calculation? Does htotal need to be halved?
 off
 Get watermark and Tex.
 TODO: Deprecated
 system parameter calculation done
 byte
 32bit
 FIXME: oswin to think about what to do for cursor
  Copyright 2017 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  NOTE:
    This file is gcc-parsable HW gospel, coming straight from HW engineers.
  It doesn't adhere to Linux kernel style and sometimes will do things in odd
  ways. Unless there is something clearly wrong with it the code should
  remain as-is as it provides us with a guarantee from HW that it is correct.
 Super monster function with some 45 argument
 valid bpc         = source bits per component in the set of {8, 10, 12}
 valid bpp         = increments of 116 of a bit
                    min = 678 in N420N422444, respectively
                    max = such that compression is 1:1
valid sliceWidth  = number of pixels per slice line, must be less than or equal to 5184numSlices (or 4096numSlices in 420 mode)
valid numSlices   = number of slices in the horiziontal direction per DSC engine in the set of {1, 2, 3, 4}
valid pixelFormat = pixelcolor format in the set of {:N444_RGB, :S422, :N422, :N420}
 fixed value
 N422N420 operate at 2 pixels per clock
 #all other modes operate at 1 pixel per clock
initial transmit delay as per PPS
compute ssm delay
divide by pixel per cycle to compute slice width as seen by DSC
422 mode has an additional cycle of delay
main calculation for the dscce
dsc processes 3 pixel containers per cycle and a container can contain 1 or 2 pixels
   sfr
   dsccif
   dscc - input deserializer
   dscc gets pixels every other cycle
   dscc - input cdc fifo
   dscc gets pixels every other cycle
   dscc - cdc uncertainty
   dscc - output cdc fifo
   dscc gets pixels every other cycle
   dscc - cdc uncertainty
   dscc - output serializer
   sft
   sfr
   dsccif
   dscc - input deserializer
  dscc - input cdc fifo
   dscc - cdc uncertainty
   dscc - output cdc fifo
   dscc - cdc uncertainty
   dscc - output serializer
   sft
   sfr
   dsccif
   dscc - input deserializer
   dscc - input cdc fifo
   dscc - cdc uncertainty
   dscc - output cdc fifo
   dscc - output serializer
   dscc - cdc uncertainty
   sft
 Limit to prevent overflow in DST_Y_PREFETCH register
 5302018 - This was an optimization requested from Sy but now NumberOfCursors is no longer a factor
             so if this needs to be reinstated, then it should be officially done in the VBA code as well.
			if (mode_lib->NumberOfCursors > 0 || XFCEnabled)
			else
				TimeForFetchingMetaPTE = 0.0;
 See note above dated 5302018
			if (NumberOfCursors > 0 || XFCEnabled)
			else 
				TimeForFetchingRowInVBlank = 0.0;
 See note above dated 5302018
						- ((NumberOfCursors > 0 || GPUVMEnable || DCCEnable) ?
 TODO: Did someone else add this??
 DISPCLK and DPPCLK Calculation
 Urgent and B P-StateDRAM Clock Change Watermark
 dm_420_10
 DCFCLK Deep Sleep
 DSCCLK
 DSC Delay
 TODO
 NumberOfPlanes
 Prefetch
 We don't really care to iterate between the various prefetch modes
mode_lib->vba.PrefetchERROR = CalculateMinAndMaxPrefetchMode(mode_lib->vba.AllowDRAMSelfRefreshOrDRAMClockChangeInVblank, &mode_lib->vba.MinPrefetchMode, &mode_lib->vba.MaxPrefetchMode);
Watermarks and NB P-StateDRAM Clock Change Support
 dummy
Display Pipeline Delivery Time in Prefetch, Groups
 Min TTUVBlank
 DCC Configuration
 We should always know the direction DCCProgrammingAssumesScanDirectionUnknown,
XFC Parameters:
 Stutter Efficiency
 Display Pipe Configuration
 TODO: This doesn't seem to match programming guide
MODE SUPPORT, VOLTAGE STATE AND SOC CONFIGURATION
Scale Ratio, taps Support Check
Source Format, Pixel Format and Scan Support Check
Bandwidth Support Check
Writeback Latency support check
Re-ordering Buffer Support Check
Writeback Mode Support Check
Writeback Scale Ratio and Taps Support Check
Maximum DISPCLKDPPCLK Support check
Viewport Size Check
Total Available Pipes Support Check
Total Available OTG Support Check
Display IO and DSC Support Check
DSC Delay per state
Prefetch Check
Vertical Active BW support
PTE Buffer Size Check
Cursor Support Check
Valid Pitch Check
Mode Support, Voltage State and SOC Configuration
double   DCFCLKDeepSleepPerPlane[DC__NUM_DPP__MAX];
  Copyright 2020 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 FIXME: take the max between luma, chroma chunk size?
 okay for now, as we are setting chunk_bytes to 8kb anyways
32kb
 half to chroma
 23 to chroma
full 256b request
full sized meta chunk width in unit of data elements
 remember log rule
 "+" in log is multiply
 "-" in log is divide
 "2" is like square root
 blk is vertical biased
 blk height of 1
 -------
 meta
 -------
 meta request is 64b and is 8x8byte meta element
 each 64b meta request for dcn is 8x8 meta elements and
 a meta element covers one 256b block of the data surface.
 meta req is 8x8 byte, each byte represent 1 blk256
 the dimensions of a meta row are meta_row_width x meta_row_height in elements.
 calculate upper bound of the meta_row_width
full sized meta chunk width in unit of data elements
64B mpte request
 ------
 dpte
 ------
 one line high
 only 3 possible shapes for dpte request in dimensions of ptes: 8x1, 4x2, 2x4.
one 64B PTE request returns 8 PTEs
4KB tile means 4kB page size
one 64B req gives 8x1 PTEs for 4KB tile
 tile block >= 64KB
two 64B reqs of 2x4 PTEs give 16 PTEs to cover 64KB
 log2_64KB_width
 log2_64KB_height
64KB page size and must 64KB tile block
one 64B req gives 8x1 PTEs for 64KB tile
 The dpte request dimensions in data elements is dpte_req_width x dpte_req_height
 log2_vmpg_width is how much 1 pte represent, now calculating how much a 64b pte req represent
 That depends on the pte shape (i.e. 8x1, 4x2, 2x4)
log2_dpte_req_height	= log2_vmpg_height + log2_dpte_req_height_ptes;
log2_dpte_req_width	 = log2_vmpg_width + log2_dpte_req_width_ptes;
 calculate pitch dpte row buffer can hold
 round the result down to a power of two.
 For linear, the dpte row is pitch dependent and the pte requests wrap at the pitch boundary.
 the dpte_row_width_ub is the upper bound of data_pitchdpte_row_height in elements with this unique buffering.
 the upper bound of the dpte_row_width without dependency on viewport position follows.
 for tiled mode, row height is the same as req height and row store up to vp size upper bound
 tile block >= 64KB
264B dpte request
64B dpte request
 the dpte_group_bytes is reduced for the specific case of vertical
 access of a tile surface that has dpte request of 8x1 ptes.
reduced, in this case, will have page fault within a group
since pte request size is 64byte, the number of data pte requests per full sized group is as follows.
length in 64b requests
 full sized data pte group width in elements
But if the tile block >=64KB and the page size is 4KB, then each dPTE request is 264B
 tile block >= 64KB
 since dpte groups are only aligned to dpte_req_width and not dpte_group_width,
 the upper bound for the dpte groups per row is as follows.
 FIXME check if ppe apply for both luma and chroma in 422 case
 vp access direction: horizontal or vertical accessed
 get param for luma surface
 get param for chroma surface
 calculate how to split the det buffer space between luma and chroma
 byte
 32bit
 FIXME: oswin to think about what to do for cursor
 Note: currently taken in as is.
 Nice to decouple code from hw register implement and extract code that are repeated for luma and chroma.
 -------------------------
 Section 1.15.2.1: OTG dependent Params
 -------------------------
 Timing
	unsigned int hblank_start = dst.hblank_start; 
 Scaling
	double vinit_l;
	double vinit_c;
	double vinit_bot_l;
	double vinit_bot_c;
	unsigned int swath_height_l;
	unsigned int dpte_bytes_per_row_ub_l;
	unsigned int meta_pte_bytes_per_frame_ub_l;
	unsigned int meta_bytes_per_row_ub_l;
	unsigned int swath_height_c;
   unsigned int dpte_bytes_per_row_ub_c;
 15 bits
 -------------------------
 Section 1.15.2.2: Prefetch, Active and TTU
 -------------------------
 Prefetch Calc
 Source
			 dcc_en			  = src.dcc;
 TODO
 vp access direction: horizontal or vertical accessed
 Scaling
 TODO: Where is this coming from?
 TODO: What if this min_vblank doesn't match the value in the dml_config_settings.cpp?
 do some adjustment on the dst_after scaler to account for odm combine mode
 need to figure out which side of odm combine we're in
 figure out which pipes go together
 TODO: We should really check that 4to1 is supported before setting it to 4
 Lwait
 TODO: Should this be urgent_latency_pixel_mixed_with_vm_data_us?
 TODO: Should this be urgent_latency_pixel_mixed_with_vm_data_us?
U5.2
U4.2
 magic!
 Active
 2 for 2 pixel per element
 In ODM
 This "hack"  is only allowed (and valid) for MPC combine. In ODM
 combine, you MUST specify the full_recout_width...according to Oswin
 assume half split for dcn1
 As of DCN2, mpc_combine and odm_combine are mutually exclusive
 per line
 per line
 per line
 per line
 smehta: this is a hack added until we get the real dml, sorry, need to make progress
 TTU - Luma  Chroma
 vertical access
 per req
 per req
 per req
 per req
 TTU - Cursor
 TTU - Misc
 all hard-coded
 Assignment to register structures
 in terms of line
 in terms of refclk
 dcc for 4:2:0 is not supported in dcn1.0.  assigned to be the same as _l for now
 Clamp to max for now
 TODO: dcc for 4:2:0 is not supported in dcn1.0.  assigned to be the same as _l for now
 TODO: Is this the right calculation? Does htotal need to be halved?
 off
 Get watermark and Tex.
 TODO: Deprecated
 system parameter calculation done
  Copyright 2020 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  NOTE:
    This file is gcc-parsable HW gospel, coming straight from HW engineers.
  It doesn't adhere to Linux kernel style and sometimes will do things in odd
  ways. Unless there is something clearly wrong with it the code should
  remain as-is as it provides us with a guarantee from HW that it is correct.
 Super monster function with some 45 argument
 valid bpc         = source bits per component in the set of {8, 10, 12}
 valid bpp         = increments of 116 of a bit
                    min = 678 in N420N422444, respectively
                    max = such that compression is 1:1
valid sliceWidth  = number of pixels per slice line, must be less than or equal to 5184numSlices (or 4096numSlices in 420 mode)
valid numSlices   = number of slices in the horiziontal direction per DSC engine in the set of {1, 2, 3, 4}
valid pixelFormat = pixelcolor format in the set of {:N444_RGB, :S422, :N422, :N420}
 fixed value
 N422N420 operate at 2 pixels per clock
 #all other modes operate at 1 pixel per clock
initial transmit delay as per PPS
compute ssm delay
divide by pixel per cycle to compute slice width as seen by DSC
422 mode has an additional cycle of delay
main calculation for the dscce
dsc processes 3 pixel containers per cycle and a container can contain 1 or 2 pixels
   sfr
   dsccif
   dscc - input deserializer
   dscc gets pixels every other cycle
   dscc - input cdc fifo
   dscc gets pixels every other cycle
   dscc - cdc uncertainty
   dscc - output cdc fifo
   dscc gets pixels every other cycle
   dscc - cdc uncertainty
   dscc - output serializer
   sft
   sfr
   dsccif
   dscc - input deserializer
  dscc - input cdc fifo
   dscc - cdc uncertainty
   dscc - output cdc fifo
   dscc - cdc uncertainty
   dscc - output serializer
   sft
   sfr
   dsccif
   dscc - input deserializer
   dscc - input cdc fifo
   dscc - cdc uncertainty
   dscc - output cdc fifo
   dscc - output serializer
   dscc - cdc uncertainty
   sft
 DAL custom code: need to update ReturnBW in case min dcfclk is overriden 
 End DAL custom code 
 DISPCLK and DPPCLK Calculation
 Urgent and B P-StateDRAM Clock Change Watermark
 DCFCLK Deep Sleep
 DSCCLK
 DSC Delay
 NumberOfPlanes
 Prefetch
Watermarks and NB P-StateDRAM Clock Change Support
 dummy
Display Pipeline Delivery Time in Prefetch, Groups
 Min TTUVBlank
 DCC Configuration
 We should always know the direction DCCProgrammingAssumesScanDirectionUnknown,
Maximum Bandwidth Used
 VStartup Margin
 Stutter Efficiency
 Display Pipe Configuration
MODE SUPPORT, VOLTAGE STATE AND SOC CONFIGURATION
Scale Ratio, taps Support Check
Source Format, Pixel Format and Scan Support Check
Bandwidth Support Check
Writeback Latency support check
Writeback Mode Support Check
Writeback Scale Ratio and Taps Support Check
Maximum DISPCLKDPPCLK Support check
Total Available Pipes Support Check
Display IO and DSC Support Check
Number Of DSC Slices
 TODO: Need some other way to handle this nonsense
 v->OutputTypeAndRatePerState[i][k] = v->Output[k] & " HBR"
 TODO: Need some other way to handle this nonsense
 v->OutputTypeAndRatePerState[i][k] = v->Output[k] & " HBR2"
if (v->Outbpp == BPP_INVALID && v->DSCEnabled[k] == dm_dsc_enable_only_if_necessary && v->ForcedOutputLinkBPP[k] == 0) {
 TODO: Need some other way to handle this nonsense
 v->OutputTypeAndRatePerState[i][k] = v->Output[k] & " HBR3"
 Skip dscclk validation: as long as dispclk is supported, dscclk is also implicitly supported 
DSC Delay per state
Calculate Swath, DET Configuration, DCFCLKDeepSleep
Calculate Return BW
 Clamp calculated values to actual minimum 
Re-ordering Buffer Support Check
Vertical Active BW support check
Prefetch Check
PTE Buffer Size Check
Cursor Support Check
Valid Pitch Check
Mode Support, Voltage State and SOC Configuration
double   DCFCLKDeepSleepPerPlane[DC__NUM_DPP__MAX];
 CONFIG_DRM_AMD_DC_DCN 
  Copyright 2019-2021 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
vidipdcdcn3docarchitectureDCN3x_Display_Mode.xlsm#83 
 ?
 ?
 writeback_line_buffer_buffer_size = 656640
 SRExitTime
 ?
 ?
 ?
 only pipe 0 is read for voltage and dcfsoc clocks 
 Default clock levels are used for diags, which may lead to overclocking. 
 loop backwards
 duplicate last level 
 WM Set D 
 WM Set C 
 WM Set B 
 WM Set A 
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 Set Default link settings 
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  Copyright 2020 Mauro Rossi <issor.oruam@gmail.com>
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 generic src_id for all HPD and HPDRX interrupts 
  Copyright 2020 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 generic src_id for all HPD and HPDRX interrupts 
 compile time expand base address. 
 vupdate_no_lock_int_entry maps to DC_IRQ_SOURCE_VUPDATEx, to match semantic
  of DCE's DC_IRQ_SOURCE_VUPDATEx.
  Copyright 2018 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 generic src_id for all HPD and HPDRX interrupts 
 compile time expand base address. 
 vupdate_no_lock_int_entry maps to DC_IRQ_SOURCE_VUPDATEx, to match semantic
  of DCE's DC_IRQ_SOURCE_VUPDATEx.
  Copyright 2020 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 generic src_id for all HPD and HPDRX interrupts 
 compile time expand base address. 
 vupdate_no_lock_int_entry maps to DC_IRQ_SOURCE_VUPDATEx, to match semantic
  of DCE's DC_IRQ_SOURCE_VUPDATEx.
  Copyright 2018 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 generic src_id for all HPD and HPDRX interrupts 
 compile time expand base address. 
 vupdate_no_lock_int_entry maps to DC_IRQ_SOURCE_VUPDATEx, to match semantic
  of DCE's DC_IRQ_SOURCE_VUPDATEx.
  Copyright 2018 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 generic src_id for all HPD and HPDRX interrupts 
 compile time expand base address. 
 vupdate_no_lock_int_entry maps to DC_IRQ_SOURCE_VUPDATEx, to match semantic
  of DCE's DC_IRQ_SOURCE_VUPDATEx.
  Copyright 2020 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 generic src_id for all HPD and HPDRX interrupts 
 compile time expand base address. 
 vupdate_no_lock_int_entry maps to DC_IRQ_SOURCE_VUPDATEx, to match semantic
  of DCE's DC_IRQ_SOURCE_VUPDATEx.
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 generic src_id for all HPD and HPDRX interrupts 
 vupdate_no_lock_int_entry maps to DC_IRQ_SOURCE_VUPDATEx, to match semantic
  of DCE's DC_IRQ_SOURCE_VUPDATEx.
 SPDX-License-Identifier: MIT
  Copyright (C) 2021 Advanced Micro Devices, Inc.
  Authors: AMD
 generic src_id for all HPD and HPDRX interrupts 
 compile time expand base address. 
 vupdate_no_lock_int_entry maps to DC_IRQ_SOURCE_VUPDATEx, to match semantic
  of DCE's DC_IRQ_SOURCE_VUPDATEx.
  Copyright 2012-15 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 generic src_id for all HPD and HPDRX interrupts 
  Copyright 2012-16 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
		
		  Only notify active stream or virtual stream.
		  Need to notify virtual stream to work around
		  headless case. HPD does not fire when system is in
		  S0i2.
		
		  Sum up plane_count for all streams ( active and virtual ).
 Unknown Asic 
  Copyright 2012-16 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 set register offset 
 set register offset with instance 
ClocksStateInvalid - should not be used
ClocksStateUltraLow - currently by HW design team not supposed to be used
ClocksStateLow
ClocksStateNominal
ClocksStatePerformance
TODO: remove use the two broken down functions
 Prepare to program display clock
 Make sure requested clock isn't lower than minimum threshold
	
	  from power down, we need mark the clock state as ClocksStateNominal
	  from HWReset, so when resume we will call pplib voltage regulator.
Program DP ref Clock
VBIOS will determine DPREFCLK frequency, so we don't set it
 Prepare to program display clock
 Make sure requested clock isn't lower than minimum threshold
	
	  from power down, we need mark the clock state as ClocksStateNominal
	  from HWReset, so when resume we will call pplib voltage regulator.
Program DP ref Clock
VBIOS will determine DPREFCLK frequency, so we don't set it
 Returns the dp_refclk that was set 
TODO: WA for dal3 linux, investigate why this works 
 get max clock state from PPLIB 
  Copyright 2012-16 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
ClocksStateInvalid - should not be used
ClocksStateUltraLow - currently by HW design team not supposed to be used
ClocksStateLow
ClocksStateNominal
ClocksStatePerformance
  dce121_clock_patch_xgmi_ss_info() - Save XGMI spread spectrum info
  @clk_mgr_dce: clock manager internal structure
  Reads from VBIOS the XGMI spread spectrum info and saves it within
  the dce clock manager. This operation will overwrite the existing dprefclk
  SS values if the vBIOS query succeeds. Otherwise, it does nothing. It also
  sets the ->xgmi_enabled flag.
			
			  Currently for DP Reference clock we
			  need only SS percentage for
			  downspread
TODO: WA for dal3 linux, investigate why this works 
		
		  When xGMI is enabled, the display clk needs to be adjusted
		  with the WAFL link's SS percentage.
	
	  The xGMI enabled info is used to determine if audio and display
	  clocks need to be adjusted with the WAFL link's SS info.
  Copyright 2020 Mauro Rossi <issor.oruam@gmail.com>
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  Currently the register shifts and masks in this file are used for dce60
  which has no DPREFCLK_CNTL register
  TODO: remove this when DENTIST_DISPCLK_CNTL
  is moved to dccg, where it belongs
 set register offset 
 Max clock values for each state indexed by "enum clocks_state": 
 ClocksStateInvalid - should not be used 
 ClocksStateUltraLow - not expected to be used for DCE 6.0 
 ClocksStateLow 
 ClocksStateNominal 
 ClocksStatePerformance 
 DCE6 has no DPREFCLK_CNTL to read DP Reference Clock source 
	 Read the mmDENTIST_DISPCLK_CNTL to get the currently
 Convert DENTIST_DPREFCLK_WDIVIDERto actual divider
 Calculate the current DFS clock, in kHz.
TODO: WA for dal3 linux, investigate why this works 
 get max clock state from PPLIB 
  Copyright 2019 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 For dce12_get_dp_ref_freq_khz
 For dcn20_update_clocks_update_dpp_dto
 TODO: remove this include once we ported over remaining clk mgr functions
 abusing the fact that the dig and phy are coupled to see if the phy is enabled 
 WA for hang on HDMI after display off back back on
	
	  if it is safe to lower, but we are already in the lower state, we don't have to do anything
	  also if safe to lower is false, we just go in the higher state
 check that we're not already in lower 
 if we can go lower, go lower 
 update power state 
 check that we're not already in D0 
 update power state 
 workaround: Limit dppclk to 100Mhz to avoid lower eDP panel switch to plus 4K monitor underflow.
 increase per DPP DTO before lowering global dppclk
 increase global DPPCLK before lowering per DPP DTO
 always update dtos unless clock is lowered and not safe to lower
 notify DMCUB of latest clocks
 get FbMult value 
	
	  Register value of fbmult is in 8.16 format, we are converting to 31.32
	  to leverage the fix point operations available in driver
 16 bit fractional part
 8 bit integer part 
	
	  since fractional part is only 16 bit in register definition but is 32 bit
	  in our fix point definiton, need to shift left by 16 to obtain correct value
 multiply by REFCLK period 
 integer part is now VCO frequency in kHz 
 Assumption is that boot state always supports pstate
 skip empty entries, the smu array has no holes
 We will not select WM based on fclk, so leave it as unconstrained 
 add 1 to make it non-overlapping with next lvl 
 unconstrained for memory retraining 
 Modify previous watermark range to cover up to max 
 Must have at least one set of valid watermarks 
 modify the min and max to make sure we cover the whole range
 This is for writeback only, does not matter currently as no writeback support
 Find lowest DPM, FCLK is filled in reverse order
 clock table is all 0s, just use our own hardcode 
 dispclk and dppclk can be max at any voltage, same number of levels for both 
 TODO: Check we get what we expect during bringup 
 Saved clocks configured at boot for debug purposes 
  Copyright 2012-16 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
Not used. DPRef is constant
Keep it in case VMIN dees not support phy clk
Not used anymore
Not used anymore
Used for WM table txfr
  Function to be used instead of REG_WAIT macro because the wait ends when
  the register is NOT EQUAL to zero, and because the translation in msg_if.h
  won't work with REG_WAIT.
 First clear response register 
 Set the parameter register for the SMU message, unit is Mhz 
 Trigger the message transaction by writing the message ID 
  Unit of SMU msg parameter is Mhz 
 TODO: add code for programing DP DTO, currently this is down by command table 
TODO: Work with smu team to define optimization options.
TODO: Work with smu team to define optimization options.
 Arg = 1: Turn DTB on; 0: Turn DTB CLK OFF. when it is on, it is 600MHZ 
  Copyright 2018 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 we want to floor here to get higher clock than required rather than lower 
		 Loop index will match dpp->inst if resource exists,
		  and we want to avoid dependency on dpp object
 When changing divider to or from 127, some extra programming is required to prevent corruption 
 Virtual encoders don't have this function 
 Virtual encoders don't have this function 
this is from resume or boot up, if forced_clock cfg option used, we bypass program dispclk and DPPCLK, but need set them for S3.
force_clock_mode 0x1:  force reset the clock even it is the same clock as long as it is in Passive level.
 if clock is being lowered, increase DTO before lowering refclk
 if clock is being raised, increase refclk before lowering DTO
 always update dtos unless clock is lowered and not safe to lower
update dmcu for wait_loop count
 Min fclk = 1.2GHz since all the extra scemi logic seems to run off of it 
	 Both fclk and ref_dppclk run on the same scemi clock.
	  So take the higher value since the DPP DTO is typically programmed
	  such that max dppclk is 1:1 with ref_dppclk.
 Both fclk and ref_dppclk run on the same scemi clock.
 TODO: set dtbclk in correct place 
 Assumption is that boot state always supports pstate
 Calculate the current DFS clock, in kHz.
 Notify clk_mgr of a change in link rate, update phyclk frequency if necessary 
 700 MHz planned if VCO is 3.85 GHz, will be retrieved
 DFS Slice 2 should be used for DPREFCLK 
 Convert DPREFCLK DFS Slice DID to actual divider
 get FbMult value 
		 set up a fixed-point number
		  this works because the int part is on the right edge of the register
		  and the frac part is on the left edge
 multiply by REFCLK period 
 integer part is now VCO frequency in kHz 
 in case we don't get a value from the register, use default 
 Calculate the DPREFCLK in kHz.
Integrated_info table does not exist on dGPU projects so should not be referenced
anywhere in code for dGPUs.
Also there is no plan for now that DFS BYPASS will be used on NV101214.
  Copyright 2018 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
		 currently there is no DCECLOCK_TYPE_DPPCLK type defined in VBIOS interface.
		  vbios program DPPCLK to the same DispCLK limitation
  Copyright 2012-16 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  Function to be used instead of REG_WAIT macro because the wait ends when
  the register is NOT EQUAL to zero, and because the translation in msg_if.h
  won't work with REG_WAIT.
 First clear response register 
 Set the parameter register for the SMU message, unit is Mhz 
 Trigger the message transaction by writing the message ID 
 Actual dispclk set is returned in the parameter register 
  Unit of SMU msg parameter is Mhz 
 pmfw always set clock more than or equal requested clock
 TODO: add code for programing DP DTO, currently this is down by command table 
 if PMFW doesn't support this message, assume retraining is disabled
 so we only use most optimal watermark if we know retraining is enabled.
  Copyright 2018 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 Constants 
 Number obtained from LPDDR4 Training Counter Requirement doc 
 SMU Version that is able to set DISPCLK below 100MHz 
 Macros 
 TODO: evaluate how to lower or disable all dcn clocks in screen off case 
 abusing the fact that the dig and phy are coupled to see if the phy is enabled 
 WA for hang on HDMI after display off back back on
 update power state 
		 Loop index may not match dpp->inst if some pipes disabled,
		  so select correct inst from res_pool
	
	  if it is safe to lower, but we are already in the lower state, we don't have to do anything
	  also if safe to lower is false, we just go in the higher state
 check that we're not already in lower 
 if we can go lower, go lower 
 update power state 
 check that we're not already in D0 
 update power state 
 workaround: Limit dppclk to 100Mhz to avoid lower eDP panel switch to plus 4K monitor underflow.
 Do not adjust dppclk if dppclk is 0 to avoid unexpected result
	
	  Temporally ignore thew 0 cases for disp and dpp clks.
	  We may have a new feature that requires 0 clks in the future.
 increase per DPP DTO before lowering global dppclk with requested dppclk
update dpp dto with actual dpp clk.
 increase global DPPCLK before lowering per DPP DTO
 always update dtos unless clock is lowered and not safe to lower
update dmcu for wait_loop count
 get FbMult value 
	
	  Register value of fbmult is in 8.16 format, we are converting to 31.32
	  to leverage the fix point operations available in driver
 16 bit fractional part
 8 bit integer part 
	
	  since fractional part is only 16 bit in register definition but is 32 bit
	  in our fix point definiton, need to shift left by 16 to obtain correct value
 multiply by REFCLK period 
 integer part is now VCO frequency in kHz 
dcf deep sleep divider
 This function collect raw clk register values 
split
 REGISTER VALUES
 This function produce translated logical clk state values
 Assumption is that boot state always supports pstate
 skip empty entries, the smu array has no holes
 We will not select WM based on fclk, so leave it as unconstrained 
 dcfclk wil be used to select WM
 add 1 to make it non-overlapping with next lvl 
 unconstrained for memory retraining 
 Modify previous watermark range to cover up to max 
 Must have at least one set of valid watermarks 
 modify the min and max to make sure we cover the whole range
 This is for writeback only, does not matter currently as no writeback support
 Notify PP LibSMU which Watermarks to use for which clock ranges 
 Notify clk_mgr of a change in link rate, update phyclk frequency if necessary 
 Find lowest DPM, FCLK is filled in reverse order
 clock table is all 0s, just use our own hardcode 
		
		  WM set D will be re-purposed for memory retraining
		 SMU Version 55.51.0 and up no longer have an issue
 TODO: Check we get what we expect during bringup 
 in case we don't get a value from the register, use default 
 Saved clocks configured at boot for debug purposes 
 treat memory config as single channel if memory is asymmetrics. 
 enable powerfeatures when displaycount goes to 0 
  Copyright 2012-16 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  Currently the register shifts and masks in this file are used for dce100 and dce80
  which has identical definitions.
  TODO: remove this when DPREFCLK_CNTL and dpref DENTIST_DISPCLK_CNTL
  is moved to dccg, where it belongs
 Max clock values for each state indexed by "enum clocks_state": 
 ClocksStateInvalid - should not be used 
 ClocksStateUltraLow - not expected to be used for DCE 8.0 
 ClocksStateLow 
 ClocksStateNominal 
 ClocksStatePerformance 
 SW will adjust DP REF Clock average value for all purposes
  (DP DTO  DP Audio DTO and DP GTC)
 if clock is spread for all cases:
 -if SS enabled on DP Ref clock and HW de-spreading enabled with SW
 calculations for DS_INCRDS_MODULO (this is planned to be default case)
 -if SS enabled on DP Ref clock and HW de-spreading enabled with HW
 calculations (not planned to be used, but average clock should still
 be valid)
 -if SS enabled on DP Ref clock and HW de-spreading disabled
 (should not be case with CIK) then SW should program all rates
 generated according to average value (case as with previous ASICs)
 ASSERT DP Reference Clock source is from DFS
	 Read the mmDENTIST_DISPCLK_CNTL to get the currently
 Convert DENTIST_DPREFCLK_WDIVIDERto actual divider
 Calculate the current DFS clock, in kHz.
 unit: in_khz before mode set, get pixel clock from context. ASIC register
  may not be programmed yet
 do not check under lay 
		 raise clock state for HBR32 if required. Confirmed with HW DCEDPCS
		  logic for HBR3 still needs Nominal (0.8V) on VDDC rail
	 Iterate from highest supported to lowest valid state, and update
	  lowest RequiredState with the lowest state that satisfies
	  all required clocks
 set max clock state for high phyclock, invalid on exceeding display clock 
 TODO: remove use the two broken down functions 
 Make sure requested clock isn't lower than minimum threshold
 Prepare to program display clock
 Cache the fixed display clock
	 from power down, we need mark the clock state as ClocksStateNominal
update the maximum display clock for each power state
		Do not allow bad VBIOSSBIOS to override with invalid values,
		 Based on VBIOS, VBIOS will keep entry for GPU PLL SS
		  even if SS not enabled and in that case
		  SSInfo.spreadSpectrumPercentage !=0 would be sign
		  that SS is enabled
				 TODO: Currently for DP Reference clock we
				  need only SS percentage for
		 Based on VBIOS, VBIOS will keep entry for DPREFCLK SS
		  even if SS not enabled and in that case
		  SSInfo.spreadSpectrumPercentage !=0 would be sign
		  that SS is enabled
				 Currently for DP Reference clock we
				  need only SS percentage for
TODO: WA for dal3 linux, investigate why this works 
 get max clock state from PPLIB 
  Copyright 2020 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
we don't have clk folder yet
 Query SMU for all clock states for a particular clock 
 fine-grained, only min and max 
 discrete, a number of fixed states 
 will set num_levels to 0 on failure 
 if the initial message failed, num_levels will be 0 
 defaults 
 Set A - Normal - default values
 Set B - Performance - higher minimum clocks 
	clk_mgr->base.bw_params->wm_table.nv_entries[WM_B].valid = true;
	clk_mgr->base.bw_params->wm_table.nv_entries[WM_B].dml_input.pstate_latency_us = pstate_latency_us;
	clk_mgr->base.bw_params->wm_table.nv_entries[WM_B].dml_input.sr_exit_time_us = sr_exit_time_us;
	clk_mgr->base.bw_params->wm_table.nv_entries[WM_B].dml_input.sr_enter_plus_exit_time_us = sr_enter_plus_exit_time_us;
	clk_mgr->base.bw_params->wm_table.nv_entries[WM_B].pmfw_breakdown.wm_type = WATERMARKS_CLOCK_RANGE;
	clk_mgr->base.bw_params->wm_table.nv_entries[WM_B].pmfw_breakdown.min_dcfclk = TUNED VALUE;
	clk_mgr->base.bw_params->wm_table.nv_entries[WM_B].pmfw_breakdown.max_dcfclk = 0xFFFF;
	clk_mgr->base.bw_params->wm_table.nv_entries[WM_B].pmfw_breakdown.min_uclk = TUNED VALUE;
	clk_mgr->base.bw_params->wm_table.nv_entries[WM_B].pmfw_breakdown.max_uclk = 0xFFFF;
 Set C - Dummy P-State - P-State latency set to "dummy p-state" value 
 Set D - MALL - SR enter and exit times adjusted for MALL 
 do we fail if these fail? if so, how? do we not care to check?
 DCFCLK 
 DTBCLK 
 SOCCLK 
 DPREFCLK ???
 DISPCLK 
 DPPCLK 
 PHYCLK 
 Get UCLK, update bounding box 
 WM range table 
 get FbMult value 
 get FbMult value 
	 set up a fixed-point number
	  this works because the int part is on the right edge of the register
	  and the frac part is on the left edge
 multiply by REFCLK period 
 this is from resume or boot up, if forced_clock cfg option used, we bypass program dispclk and DPPCLK, but need set them for S3. 
 force_clock_mode 0x1:  force reset the clock even it is the same clock as long as it is in Passive level. 
 We don't actually care about socclk, don't notify SMU of hard min 
 to disable P-State switching, set UCLK min = max 
 Always update saved value, even if new value not set due to P-State switching unsupported 
 set UCLK to requested value if P-State switching is supported, or to re-enable P-State switching 
 if clock is being lowered, increase DTO before lowering refclk 
 if clock is being raised, increase refclk before lowering DTO 
			 There is a check inside dcn20_update_clocks_update_dpp_dto which ensures
			  that we do not lower dto when it is not safe to lower. We do not need to
update dmcu for wait_loop count
 should log failure
 collect valid ranges, place in pmfw table 
 Set min memclk to minimum, either constrained by the current mode or DPM0 
 Set max memclk to highest DPM value 
 Get current memclk states, update bounding box 
 Refresh memclk states 
 Refresh bounding box 
 Notify clk_mgr of a change in link rate, update phyclk frequency if necessary 
 TODO: Implement the functions and remove the ifndef guard 
todo for dcn30 for clk register offset
 700 MHz planned if VCO is 3.85 GHz, will be retrieved
 integer part is now VCO frequency in kHz 
 in case we don't get a value from the register, use default 
 Convert dprefclk units from MHz to KHz 
 Value already divided by 10, some resolution lost 
TODO: uncomment assert once dcn3_dump_clk_registers is implemented 
ASSERT(s.dprefclk != 0);
 need physical address of table to give to PMFW 
  Copyright 2020 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  Function to be used instead of REG_WAIT macro because the wait ends when
  the register is NOT EQUAL to zero, and because the translation in msg_if.h
  won't work with REG_WAIT.
 handle DALSMC_Result_CmdRejectedBusy? 
 Log? 
 Wait for response register to be ready 
 Clear response register 
 Set the parameter register for the SMU message 
 Trigger the message transaction by writing the message ID 
 Wait for response 
 Test message should return input + 1 
 Message output should match SMU11_DRIVER_IF_VERSION in smu11_driver_if.h 
 Message output should match DALSMC_VERSION in dalsmc.h 
 Returns the actual frequency that was set in MHz, 0 on failure 
 bits 23:16 for clock type, lower 16 bits for frequency in MHz 
 Returns the actual frequency that was set in MHz, 0 on failure 
 bits 23:16 for clock type, lower 16 bits for frequency in MHz 
  Frequency in MHz returned in lower 16 bits for valid DPM level
  Call with dpm_level = 0xFF to query features, return value will be:
      Bits 7:0 - number of DPM levels
      Bit   28 - 1 = auto DPM on
      Bit   29 - 1 = sweep DPM on
      Bit   30 - 1 = forced DPM on
      Bit   31 - 0 = discrete, 1 = fine-grained
  With fine-grained DPM, only min and max frequencies will be reported
  Returns 0 on failure
 bits 23:16 for clock type, lower 8 bits for DPM level 
 Returns the max DPM frequency in DC mode in MHz, 0 on failure 
 bits 23:16 for clock type 
 bits 8:7 for cache timer scale, bits 6:1 for cache timer delay, bit 0 = 1 for enable, = 0 for disable 
  Copyright 2020 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
#define VBIOSSMC_MSG_SetPhyclkVoltageByFreq       0xA
#define VBIOSSMC_MSG_SetDisplayCount              0xC
#define VBIOSSMC_MSG_EnableTmdp48MHzRefclkPwrDown 0xD
Used for WM table txfr
  Function to be used instead of REG_WAIT macro because the wait ends when
  the register is NOT EQUAL to zero, and because the translation in msg_if.h
  won't work with REG_WAIT.
 First clear response register 
 Set the parameter register for the SMU message, unit is Mhz 
 Trigger the message transaction by writing the message ID 
 Actual dispclk set is returned in the parameter register 
  Unit of SMU msg parameter is Mhz 
 TODO: add code for programing DP DTO, currently this is down by command table 
TODO: Work with smu team to define optimization options.
  Copyright 2020 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 For dce12_get_dp_ref_freq_khz
 For dcn20_update_clocks_update_dpp_dto
 Constants 
 Number obtained from LPDDR4 Training Counter Requirement doc 
 Macros 
 TODO: evaluate how to lower or disable all dcn clocks in screen off case 
 abusing the fact that the dig and phy are coupled to see if the phy is enabled 
 WA for hang on HDMI after display off back back on
	
	  if it is safe to lower, but we are already in the lower state, we don't have to do anything
	  also if safe to lower is false, we just go in the higher state
 check that we're not already in lower 
 if we can go lower, go lower 
 update power state 
 check that we're not already in D0 
 update power state 
 workaround: Limit dppclk to 100Mhz to avoid lower eDP panel switch to plus 4K monitor underflow.
 increase per DPP DTO before lowering global dppclk
 increase global DPPCLK before lowering per DPP DTO
 always update dtos unless clock is lowered and not safe to lower
 get FbMult value 
	
	  Register value of fbmult is in 8.16 format, we are converting to 31.32
	  to leverage the fix point operations available in driver
 16 bit fractional part
 8 bit integer part 
	
	  since fractional part is only 16 bit in register definition but is 32 bit
	  in our fix point definiton, need to shift left by 16 to obtain correct value
 multiply by REFCLK period 
 integer part is now VCO frequency in kHz 
dcf deep sleep divider
 This function collect raw clk register values 
split
 REGISTER VALUES
 This function produce translated logical clk state values
 Assumption is that boot state always supports pstate
 skip empty entries, the smu array has no holes
 We will not select WM based on fclk, so leave it as unconstrained 
 add 1 to make it non-overlapping with next lvl 
 unconstrained for memory retraining 
 Modify previous watermark range to cover up to max 
 Must have at least one set of valid watermarks 
 modify the min and max to make sure we cover the whole range
 This is for writeback only, does not matter currently as no writeback support
 Find lowest DPM, FCLK is filled in reverse order
 clock table is all 0s, just use our own hardcode 
		
		  WM set D will be re-purposed for memory retraining
 Temporary Place holder until we can get them from fuse 
 TODO: Check we get what we expect during bringup 
 in case we don't get a value from the register, use default 
 Saved clocks configured at boot for debug purposes 
	if (!IS_FPGA_MAXIMUS_DC(ctx->dce_environment) && clk_mgr->base.smu_ver) {
		 enable powerfeatures when displaycount goes to 0
		dcn301_smu_enable_phy_refclk_pwrdwn(clk_mgr, !debug->disable_48mhz_pwrdwn);
	}
  Copyright 2012-16 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 Only used by testing framework
dcf clk
dcf deep sleep divider
dcf deep sleep allow
dpref clk
disp clk
  Copyright 2018 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 increase clock, looking for div is 0 for current, request div is 1
 already divided by 2, no need to reach target clk with 2 steps
		 request disp clk is lower than maximum supported dpp clk,
		  no need to reach target clk with two steps.
 target dpp clk not request divided by 2, still within threshold 
		 decrease clock, looking for current dppclk divided by 2,
		  request dppclk not divided by 2.
 current dpp clk not divided by 2, no need to ramp
		 current disp clk is lower than current maximum dpp clk,
		  no need to ramp
 request dpp clk need to be divided by 2 
	 this function is to change dispclk, dppclk and dprefclk according to
	  bandwidth requirement. Its call stack is rv1_update_clocks -->
	  update_clocks --> dcn10_prepare_bandwidth  dcn10_optimize_bandwidth
	  --> prepare_bandwidth  optimize_bandwidth. before change dcn hw,
	  prepare_bandwidth will be called first to allow enough clock,
	  watermark for change, after end of dcn hw change, optimize_bandwidth
	  is executed to lower clock to save power for new dcn hw settings.
	 
	  below is sequence of commit_planes_for_stream:
	 
	  step 1: prepare_bandwidth - raise clock to have enough bandwidth
	  step 2: lock_doublebuffer_enable
	  step 3: pipe_control_lock(true) - make dchubp register change will
	  not take effect right way
	  step 4: apply_ctx_for_surface - program dchubp
	  step 5: pipe_control_lock(false) - dchubp register change take effect
	  step 6: optimize_bandwidth --> dc_post_update_surfaces_to_stream
	  for full_date, optimize clock to save power
	 
	  at end of step 1, dcn clocks (dprefclk, dispclk, dppclk) may be
	  changed for new dchubp configuration. but real dcn hub dchubps are
	  still running with old configuration until end of step 5. this need
	  clocks settings at step 1 should not less than that before step 1.
	  this is checked by two conditions: 1. if (should_set_clock(safe_to_lower
	  , new_clocks->dispclk_khz, clk_mgr_base->clks.dispclk_khz) ||
	  new_clocks->dispclk_khz == clk_mgr_base->clks.dispclk_khz)
	  2. request_dpp_div = new_clocks->dispclk_khz > new_clocks->dppclk_khz
	 
	  the second condition is based on new dchubp configuration. dppclk
	  for new dchubp may be different from dppclk before step 1.
	  for example, before step 1, dchubps are as below:
	  pipe 0: recout=(0,40,1920,980) viewport=(0,0,1920,979)
	  pipe 1: recout=(0,0,1920,1080) viewport=(0,0,1920,1080)
	  for dppclk for pipe0 need dppclk = dispclk
	 
	  new dchubp pipe split configuration:
	  pipe 0: recout=(0,0,960,1080) viewport=(0,0,960,1080)
	  pipe 1: recout=(960,0,960,1080) viewport=(960,0,960,1080)
	  dppclk only needs dppclk = dispclk 2.
	 
	  dispclk, dppclk are not lock by otg master lock. they take effect
	  after step 1. during this transition, dispclk are the same, but
	  dppclk is changed to half of previous clock for old dchubp
	  configuration between step 1 and step 6. This may cause p-state
	  warning intermittently.
	 
	  for new_clocks->dispclk_khz == clk_mgr_base->clks.dispclk_khz, we
	  need make sure dppclk are not changed to less between step 1 and 6.
	  for new_clocks->dispclk_khz > clk_mgr_base->clks.dispclk_khz,
	  new display clock is raised, but we do not know ratio of
	  new_clocks->dispclk_khz and clk_mgr_base->clks.dispclk_khz,
	  new_clocks->dispclk_khz 2 does not guarantee equal or higher than
	  old dppclk. we could ignore power saving different between
	  dppclk = displck and dppclk = dispclk  2 between step 1 and step 6.
	  as long as safe_to_lower = false, set dpclk = dispclk to simplify
	  condition check.
	  todo: review this change for other asic.
 set disp clk to dpp clk threshold 
 update request dpp clk division option 
 If target clk not same as dppclk threshold, set to target clock 
		
		  Notify SMU active displays
		  if function pointer not set up, this message is
		  sent as part of pplib_apply_display_requirements.
 F Clock
DCF Clock
	 make sure dcf clk is before dpp clk to
	  make sure we have enough voltage to run dpp clk
use dcfclk to request voltage
 dcn1 dppclk is tied to dispclk 
 program dispclk on = as a wa for sleep resume clock ramping issues 
use dcfclk to request voltage
  Copyright 2018 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  Copyright 2012-16 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  Function to be used instead of REG_WAIT macro because the wait ends when
  the register is NOT EQUAL to zero, and because the translation in msg_if.h
  won't work with REG_WAIT.
 First clear response register 
 Set the parameter register for the SMU message, unit is Mhz 
 Trigger the message transaction by writing the message ID 
 Actual dispclk set is returned in the parameter register 
  Unit of SMU msg parameter is Mhz 
 TODO: add code for programing DP DTO, currently this is down by command table 
  Copyright 2012-16 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 set register offset 
 set register offset with instance 
ClocksStateInvalid - should not be used
ClocksStateUltraLow - currently by HW design team not supposed to be used
ClocksStateLow
ClocksStateNominal
ClocksStatePerformance
	
	  Some asics do not give us sclk levels, so we just report the actual
	  required sclk
	
	  even maximum level could not satisfy requirement, this
	  is unexpected at this stage, should have been caught at
	  validation time
 only notify active stream 
 Round v_refresh
	
	  TODO: determine whether the bandwidth has reached memory's limitation
	  , then change minimum memory clock based on real-time bandwidth
	  limitation.
	
	  As workaround for >4x4K lightup set dcfclock to min_engine_clock value.
	  This is not required for less than 5 displays,
	  thus don't request decfclk in dc to avoid impact
	  on power saving.
	 
 TODO: dce11.2
 TODO: is this still applicable?
TODO: WA for dal3 linux, investigate why this works 
 get max clock state from PPLIB 
  Copyright 2019 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  Copyright 2019 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 0x74 >> 1
 0x6803b - 0x6802c 
 HDCP 1.4 
 HDCP 2.2 
 special case, reading repeatedly at the same address, don't use read() 
  Copyright 2019 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
	 if all displays on the link don't need authentication,
	  hdcp is not desired
	 if all displays on the link don't need authentication,
	  hdcp is not desired
 initialize transition input 
			 TODO - update psp to unify create session failure
			  recovery between hdcp1 and 2.
 stop callback and watchdog requests from previous authentication
  Implementation of functions in mod_hdcp.h
 skip inactive display 
 check existing display container 
 find an empty display container 
 reset existing authentication status 
 reset retry counters 
 reset error trace 
 add display to connection 
 request authentication 
 find display in connection 
 stop current authentication 
 clear retry counters 
 reset error trace 
 remove display 
 request authentication when connection is not reset 
 find display in connection 
 skip if no changes 
 stop current authentication 
 clear retry counters 
 reset error trace 
 set new adjustment 
 request authentication when connection is not reset 
 wait 100ms to debounce simultaneous updates for different indices 
 find display in connection 
 populate query 
 execute and transition 
 reset authentication if needed 
 Clear CP_IRQ status if needed 
  Copyright 2018 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 units of ms
 Avoid device count == 0 to do authentication 
 Some MST display may choose to report the internal panel as an HDCP RX.   
 To update this condition with 1(because the immediate repeater's internal 
 panel is possibly not included in DEVICE_COUNT) + get_device_count(hdcp). 
 Device count must be greater than or equal to tracked hdcp displays.      
  Copyright 2018 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 needs second part of authentication 
  Copyright 2019 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 Avoid device count == 0 to do authentication 
	 Some MST display may choose to report the internal panel as an HDCP RX.
	  To update this condition with 1(because the immediate repeater's internal
	  panel is possibly not included in DEVICE_COUNT) + get_device_count(hdcp).
	  Device count must be greater than or equal to tracked hdcp displays.
  Copyright 2019 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 1A-04: repeatedly attempts on port access failure 
 out of sync with psp state 
 1A-05: consider invalid bksv a failure 
 1A-06: consider invalid r0' a failure 
 1A-08: consider bksv listed in SRM a failure 
			
			  some slow RX will fail rx validation when it is
			  not ready. give it more time to react before retry.
 1A-07: consider invalid ri' a failure 
 1A-07a: consider read ri' not returned a failure 
 1B-03: fail hdcp on ksv list READY timeout 
 prevent black screen in next attempt 
 continue ksv list READY polling
 1B-06: consider MAX_CASCADE_EXCEEDED a failure 
 1B-05: consider MAX_DEVS_EXCEEDED a failure 
 1B-04: consider invalid v' a failure 
 1A-04: no authentication on bcaps read failure 
 out of sync with psp state 
 1A-05: consider invalid bksv a failure 
 allow 2 additional retries 
				
				  1A-06: consider invalid r0' a failure
				  after 3 attempts.
				  1A-08: consider bksv listed in SRM a failure
				
				  some slow RX will fail rx validation when it is
				  not ready. give it more time to react before retry.
 1A-07: restart hdcp on a link integrity failure 
 1B-04: fail hdcp on ksv list READY timeout 
 prevent black screen in next attempt 
 1B-06: consider MAX_DEVS_EXCEEDED a failure 
 1B-07: consider MAX_CASCADE_EXCEEDED a failure 
			
			  some slow dongle doesn't update
			  device count as soon as downstream is connected.
			  give it more time to react.
 allow 2 additional retries 
				
				  1B-05: consider invalid v' a failure
				  after 3 attempts.
  Copyright 2018 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 out of sync with psp state 
 1A-08: consider ake timeout a failure 
				 some hdmi receivers are not ready for HDCP
				  immediately after video becomes active,
				  delay 1s before retry on first HDCP message
				  timeout.
 continue ake cert polling
			
			  1A-09: consider invalid ake cert a failure
			  1A-10: consider receiver id listed in SRM a failure
 1A-11-3: consider h' timeout a failure 
 continue h' polling 
				 1A-12: consider pairing info timeout
				  a failure
 continue pairing info polling 
 1A-11-1: consider invalid h' a failure 
 1A-11-2: consider h' timeout a failure 
 continue h' polling 
 1A-11-1: consider invalid h' a failure 
			
			  1A-05: consider disconnection after LC init a failure
			  1A-13-1: consider invalid l' a failure
			  1A-13-2: consider l' timeout a failure
			 some CTS equipment requires a delay GREATER than
			  200 ms, so delay 210 ms instead of 200 ms
			
			  1A-07: restart hdcp on REAUTH_REQ
			  1B-08: restart hdcp on REAUTH_REQ
 1B-02: consider rx id list timeout a failure 
				 some CTS equipment's actual timeout
				  measurement is slightly greater than 3000 ms.
				  Delay 100 ms to ensure it is fully timeout
				  before re-authentication.
			 1B-03: consider invalid v' a failure
			  1B-04: consider MAX_DEVS_EXCEEDED a failure
			  1B-05: consider MAX_CASCADE_EXCEEDED a failure
			  1B-06: consider invalid seq_num_V a failure
			  1B-09: consider seq_num_V rollover a failure
				 1B-10-2: restart content stream management on
				  stream ready timeout
			
			  1B-10-1: restart content stream management
			  on invalid M'
 out of sync with psp state 
 possibly display not ready 
			
			  1A-08: consider invalid ake cert a failure
			  1A-09: consider receiver id listed in SRM a failure
 1A-10-3: consider h' timeout a failure 
				
				  1A-11: consider pairing info timeout
				  a failure
 1A-10-1: consider invalid h' a failure 
 1A-10-2: consider h' timeout a failure 
 1A-10-1: consider invalid h' a failure 
 1A-12: consider invalid l' a failure 
			
			  1A-07: restart hdcp on REAUTH_REQ
			  1B-08: restart hdcp on REAUTH_REQ
 1B-02: consider rx id list timeout a failure 
			
			  1B-03: consider invalid v' a failure
			  1B-04: consider MAX_DEVS_EXCEEDED a failure
			  1B-05: consider MAX_CASCADE_EXCEEDED a failure
			  1B-06: consider invalid seq_num_V a failure
			  1B-09: consider seq_num_V rollover a failure
			
			  1B-10-1: restart content stream management
			  on invalid M'
			  1B-10-2: consider stream ready timeout a failure
  Copyright 2016 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 When calculating LUT values the first region and at least one subsequent
  region are calculated with full precision. These defines are a demarcation
  of where the second region starts and ends.
  These are hardcoded values to avoid recalculating them in loops.
 these are helpers for calculations to reduce stack usage
 do not depend on these being preserved across calls
 Helper to optimize gamma calculation, only use in translate_from_linear, in
  particular the dc_fixpt_pow function which is very expensive
  The idea is that our regions for X points are exponential and currently they all use
  the same number of points (NUM_PTS_IN_REGION) and in each region every point
  is exactly 2x the one at the same index in the previous region. In other words
  X[i] = 2  X[i-NUM_PTS_IN_REGION] for i>=16
  The other fact is that (2x)^gamma = 2^gamma  x^gamma
  So we compute and save x^gamma for the first 16 regions, and for every next region
  just multiply with 2^gamma which can be computed once, and save the result so we
  recursively compute all the values.
  Regamma coefficients are used for both regamma and degamma. Degamma
  coefficients are calculated in our formula using the regamma coefficients.
sRGB     709     2.2 2.4 P3
 one-time setup of X points 
 consts for PQ gamma formula. 
 consts for dePQ gamma formula. 
 avoid complex numbers
 de gamma, non-linear to linear 
 re gamma, linear to non-linear 
 one-time pre-compute PQ values - only for sdr_white_level 80 
 pow function has problems with arguments too small 
 one-time pre-compute dePQ values - only for max pixel value 125 FP16 
	 X points is 2^-25 to 2^7
	  De-gamma X is 2^-12 to 2^0 – we are skipping first -12-(-25) = 13 regions
		 In the first region (first 16 points) and in the
		  region delimited by STARTEND we calculate with
		  full precision to avoid error accumulation. 
	 TODO: start index is from segment 2^-24, skipping first segment
	  due to x values too small for power calculations
		 Multiply 0.008 as regamma is 0-1 and FP16 input is 0-125.
		  FP 1.0 = 80nits
 should really not happen? 
 should really not happen? 
 see variable definition for more info
 TODO use y vs r,g,b 
 dc_fixpt_epsilon is a bit too small
 always 1? DAL2 code is weird
 (1+b)maxContent
 a  max_lum_pq - b
 t = (E1 - ks)  (1 - ks)
 (2t^3 - 3t^2 + 1)  ks
 (-2t^3 + 3t^2)  max_lum_pq
 (t^3 - 2t^2 + t)  (1-ks)
 temp2 = (1-E2)^4
 cap at 0.1 at the bottom
 cap at 100 at the top
 only max used, we don't adjust min luminance
 see var definition for more info
 first 32 points have problems with fixed point, too small
 max content is equal 1 
 Ensure output respects reasonable boundaries
 Here clipping happens for the first time 
				 The next few lines implement the equation
				  output = prev_out +
				  (coord_x->x - prev_coord_x->x) 
				  (1.0 - prev_out) 
				  (maxDispsdr_white_level - prevCoordX)
				 
				  This equation interpolates the first point
				  after max_display80 so that the slope from
				  hw_x_before_max and hw_x_after_max is such
				  that we hit Y=1.0 at max_display80.
				 Relaxing the maximum boundary to 1.07 (instead of 1.0)
				  because the last point in the curve must be such that
				  the maximum display pixel brightness interpolates to
				  exactly 1.0. The worst case scenario was calculated
				  around 1.057, so the limit of 1.07 leaves some safety
				  margin.
			 Every other clipping after the first
			  one is dealt with here
	 X points is 2^-25 to 2^7
	  De-gamma X is 2^-12 to 2^0 – we are skipping first -12-(-25) = 13 regions
 check when i == 434
 when i == 471
 todo: all these scale_gamma functions are inherently the same but
   take different structures as params or different format for ramp
   values. We could probably implement it in a more generic fashion
  RS3+ color transform DDI - 1D LUT adjustment is composed with regamma here
  Input is evenly distributed in the output color space as specified in
  SetTimings
  Interpolation details:
  1D LUT has 4096 values which give curve correction in 0-1 float range
  for evenly spaced points in 0-1 range. lut1D[index] gives correction
  for index4095.
  First we find index for which:
 	index4095 < regamma_y < (index+1)4095 =>
 	index < 4095regamma_y < index + 1
  norm_y = 4095regamma_y, and index is just truncating to nearest integer
  lut1 = lut1D[index], lut2 = lut1D[index+1]
  adjustedY is then linearly interpolating regamma Y between lut1 and lut2
  Custom degamma on Linux uses the same interpolation math, so is handled here
 this is not expected
				 Here we are dealing with the last point in the curve,
				  which in some cases might exceed the range given by
				  max_lut_index. So we interpolate the value using
				  max_lut_index and max_lut_index - 1.
 we have everything now, so interpolate
 This function should not gets called with 0 as a parameter
 TODO: float point case 
 The "old" interpolation uses a complicated scheme to build an array of
  coefficients while also using an array of 0-255 normalized to 0-1
  Then there's another loop using both of the above + new scaled user ramp
  and we concatenate them. It also searches for points of interpolation and
  uses enums for positions.
  This function uses a different approach:
  user ramp is always applied on X with 0255, 1255, 2255, ..., 255255
  To find index for hwX , we notice the following:
  i255 <= hwX < (i+1)255  <=> i <= 255hwX < i+1
  See apply_lut_1d which is the same principle, but on 4K entry 1D LUT
  Once the index is known, combined Y is simply:
  user_ramp(index) + (hwX-index255)(user_ramp(index+1) - user_ramp(index)
  We should switch to this method in all cases, it's simpler and faster
  ToDo one day - for now this only applies to ADL regamma to avoid regression
  for regular use cases (sRGB and PQ)
 fixed_pt library has problems handling too small values 
 we have everything now, so interpolate
 setup to spare calculated ideal regamma values 
 just copy current rgb_regamma into  tf_pts 
 this should be named differently, all it does is clamp to 0-1 
 fixed_pt library has problems handling too small values 
 this function just clamps output to 0-1
 no custom HDR curves!
 this function just clamps output to 0-1
	 we can use hardcoded curve for plain SRGB TF
	  If linear, it's bypass if on user ramp
 HLG OOTF not accounted for
 just copy coordinates_x into curve
 just copy current rgb_regamma into  tf_pts 
 clamps to 0-1
 trans == TRANSFER_FUNCTION_SRGB
 trans == TRANSFER_FUNCTION_BT709
 trans == TRANSFER_FUNCTION_GAMMA22
 trans == TRANSFER_FUNCTION_GAMMA24
 trans == TRANSFER_FUNCTION_GAMMA26
 we can use hardcoded curve for plain SRGB TF 
  Copyright 2019 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
  Copyright 2019 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 At this point any positions with value 0 are unused vmids, evict them
 Return value of -1 indicates vmid table unitialized or ptb dne in the table
 Expected to be called only when there's an available vmid
 Physical address gets vmid 0
  Copyright 2016 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 Refresh rate ramp at a fixed rate of 65 Hzsecond 
 Number of elements in the render times cache array 
 Threshold to exitexit BTR (to avoid frequent enter-exits at the lower limit) 
 Threshold to change BTR multiplier (to avoid frequent changes) 
 Threshold to exit fixed refresh rate 
 Number of consecutive frames to check before enteringexiting fixed refresh 
 Unused currently 
 v_total cannot be less than nominal 
 v_total cannot be less than nominal 
 Calculate ratio between new and current frame duration with 3 digit 
 Calculate delta between new and current frame duration in us 
	 Adjust frame duration delta based on ratio between current and
	  standard frame duration (frame duration at 60 Hz refresh rate).
 Going to a higher refresh rate (lower frame duration) 
 Reduce frame duration 
 Adjust for frame duration below min 
 Going to a lower refresh rate (larger frame duration) 
 Increase frame duration 
 Adjust for frame duration above max 
 v_total cannot be less than nominal 
 Program BTR 
 Exit Below the Range 
 Enter Below the Range 
 BTR set to "not active" so disengage 
 Restore FreeSync 
 BTR set to "active" so engage 
		 Calculate number of midPoint frames that could fit within
		  the render time interval - take ceil of this value
		 Calculate number of midPoint frames that could fit within
		  the render time interval - take floor of this value
		 Choose number of frames to insert based on how close it
		  can get to the mid point of the variable range.
		   - Delta for CEIL: delta_from_mid_point_in_us_1
		   - Delta for FLOOR: delta_from_mid_point_in_us_2
			 Check for out of range.
			  If using CEIL produces a value that is out of range,
			  then we are forced to use FLOOR.
			 Check if FLOOR would result in non-LFC. In this case
			  choose to use CEIL
			 If choosing CEIL results in a frame duration that is
			  closer to the mid point of the range.
			  Choose CEIL
			 If choosing FLOOR results in a frame duration that is
			  closer to the mid point of the range.
			  Choose FLOOR
		 Prefer current frame multiplier when BTR is enabled unless it drifts
		  too far from the midpoint
		 Either we've calculated the number of frames to insert,
		  or we need to insert min duration frames
 Cache the calculated variables 
 Compute the exit refresh rate and exit frame duration 
 Exit Fixed Refresh mode 
 Enter Fixed Refresh mode 
 PB1 = 0x1A (24bit AMD IEEE OUI (0x00001A) - Byte 0) 
 PB2 = 0x00 (24bit AMD IEEE OUI (0x00001A) - Byte 1) 
 PB3 = 0x00 (24bit AMD IEEE OUI (0x00001A) - Byte 2) 
 PB4 = Reserved 
 PB5 = Reserved 
 PB6 = [Bits 7:3 = Reserved] 
 PB6 = [Bit 0 = FreeSync Supported] 
 PB6 = [Bit 1 = FreeSync Enabled] 
 PB6 = [Bit 2 = FreeSync Active] 
 For v1 & 2 infoframes program nominal if non-fs mode, otherwise full range
 PB7 = FreeSync Minimum refresh rate (Hz) 
	 PB8 = FreeSync Maximum refresh rate (Hz)
	  Note: We should never go above the field rate of the mode timing set.
 FreeSync HDR 
 PB1 = 0x1A (24bit AMD IEEE OUI (0x00001A) - Byte 0) 
 PB2 = 0x00 (24bit AMD IEEE OUI (0x00001A) - Byte 1) 
 PB3 = 0x00 (24bit AMD IEEE OUI (0x00001A) - Byte 2) 
 PB4 = Reserved 
 PB5 = Reserved 
 PB6 = [Bits 7:3 = Reserved] 
 PB6 = [Bit 0 = FreeSync Supported] 
 PB6 = [Bit 1 = FreeSync Enabled] 
 PB6 = [Bit 2 = FreeSync Active] 
 Non-fs case, program nominal range
 Non-fs case, program nominal range
 PB7 = FreeSync Minimum refresh rate (Hz) 
 PB8 = FreeSync Maximum refresh rate (Hz) 
 PB11 : MSB FreeSync Minimum refresh rate [Hz] - bits 9:8 
 PB12 : MSB FreeSync Maximum refresh rate [Hz] - bits 9:8 
 PB16 : Reserved bits 7:1, FixedRate bit 0 
FreeSync HDR
 PB6 = [Bit 3 = Native Color Active]
 PB6 = [Bit 2 = Gamma 2.2 EOTF Active]
 HEADER 
		 HB0  = Packet Type = 0x83 (Source Product
		 	  Descriptor InfoFrame)
 HB1  = Version = 0x01 
 HB2  = [Bits 7:5 = 0] [Bits 4:0 = Length = 0x08] 
 HEADER 
		 HB0  = Secondary-data Packet ID = 0 - Only non-zero
		 	  when used to associate audio related info packets
		 HB1  = Packet Type = 0x83 (Source Product
		 	  Descriptor InfoFrame)
		 HB2  = [Bits 7:0 = Least significant eight bits -
		 	  For INFOFRAME, the value must be 1Bh]
		 HB3  = [Bits 7:2 = INFOFRAME SDP Version Number = 0x1]
		 	  [Bits 1:0 = Most significant two bits = 0x00]
 HEADER 
		 HB0  = Packet Type = 0x83 (Source Product
		 	  Descriptor InfoFrame)
 HB1  = Version = 0x02 
 HB2  = [Bits 7:5 = 0] [Bits 4:0 = Length = 0x09] 
 HEADER 
		 HB0  = Secondary-data Packet ID = 0 - Only non-zero
		 	  when used to associate audio related info packets
		 HB1  = Packet Type = 0x83 (Source Product
		 	  Descriptor InfoFrame)
		 HB2  = [Bits 7:0 = Least significant eight bits -
		 	  For INFOFRAME, the value must be 1Bh]
		 HB3  = [Bits 7:2 = INFOFRAME SDP Version Number = 0x2]
		 	  [Bits 1:0 = Most significant two bits = 0x00]
 HEADER 
		 HB0  = Packet Type = 0x83 (Source Product
		 	  Descriptor InfoFrame)
 HB1  = Version = 0x03 
 HB2  = [Bits 7:5 = 0] [Bits 4:0 = Length] 
-1 for checksum
 HEADER 
		 HB0  = Secondary-data Packet ID = 0 - Only non-zero
		 	  when used to associate audio related info packets
		 HB1  = Packet Type = 0x83 (Source Product
		 	  Descriptor InfoFrame)
		 HB2  = [Bits 7:0 = Least significant eight bits -
		 	  For INFOFRAME, the value must be 1Bh]
		 HB3  = [Bits 7:2 = INFOFRAME SDP Version Number = 0x2]
		 	  [Bits 1:0 = Most significant two bits = 0x00]
 Calculate checksum 
 PB0 = Checksum (one byte complement) 
 SPD info packet for FreeSync 
 PB9 : bit7 - fast transport Active
clear bit
set bit
 PB13 : Target Output Pixel Rate [kHz] - bits 7:0  
 PB14 : Target Output Pixel Rate [kHz] - bits 15:8  
 PB15 : Target Output Pixel Rate [kHz] - bits 23:16  
 Data Byte Count: 0x1B
 Length
Version
 Header,SDP 1.3
	 SPD info packet for FreeSync
	  VTEM info packet for HdmiVRR
	  Check if Freesync is supported. Return if false. If true,
	  set the corresponding bit in the info packet
 always populate with pixel rate.
 Calculate nominal field rate for stream 
 Full range may be larger than current video timing, so cap at nominal 
 Full range may be larger than current video timing, so cap at nominal 
 If a monitor reports exactly max refresh of 2x of min, enforce it on nominal 
			 Do not update vtotals if ramping is already active
			  in order to continue ramp from current refresh.
 Sum off all entries except oldest one 
 Add render time for current flip 
 Below the Range Logic 
 Only execute if in fullscreen mode 
		 TODO: pass in flag for Pre-DCE12 ASIC
		  in order for frame variable duration to take affect,
		  it needs to be done one VSYNC early, which is at
		  frameCounter == 1.
		  For DCE12 and newer updates to V_TOTAL_MINMAX
		  will take affect on current frame
 Restore FreeSync 
	 If in fullscreen freesync mode or in video, do not program
	  static screen ramp values
	 Gradual Static Screen Ramping Logic
	  Execute if ramp is active and user enabled freesync static screen
 Calculate nominal field rate for stream, rounded up to nearest integer 
 Calculate nominal field rate for stream, rounded up to nearest integer 
	 Typically nominal refresh calculated can have some fractional part.
	  Allow for some rounding error of actual video timing by taking floor
	  of caps and request. Round the nominal refresh rate.
	 
	  Dividing will convert everything to units in Hz although input
	  variable name is in uHz!
	 
	  Also note, this takes care of rounding error on the nominal refresh
	  so by rounding error we only expect it to be off by a small amount,
	  such as < 0.1 Hz. i.e. 143.9xxx or 144.1xxx.
	 
	  Example 1. Caps    Min = 40 Hz, Max = 144 Hz
	             Request Min = 40 Hz, Max = 144 Hz
	                     Nominal = 143.5x Hz rounded to 144 Hz
	             This function should allow this as valid request
	 
	  Example 2. Caps    Min = 40 Hz, Max = 144 Hz
	             Request Min = 40 Hz, Max = 144 Hz
	                     Nominal = 144.4x Hz rounded to 144 Hz
	             This function should allow this as valid request
	 
	  Example 3. Caps    Min = 40 Hz, Max = 144 Hz
	             Request Min = 40 Hz, Max = 144 Hz
	                     Nominal = 120.xx Hz rounded to 120 Hz
	             This function should return NOT valid since the requested
	             max is greater than current timing's nominal
	 
	  Example 4. Caps    Min = 40 Hz, Max = 120 Hz
	             Request Min = 40 Hz, Max = 120 Hz
	                     Nominal = 144.xx Hz rounded to 144 Hz
	             This function should return NOT valid since the nominal
	             is greater than the capability's max refresh
 Check nominal is within range 
 If nominal is less than max, limit the max allowed refresh rate 
 Check min is within range 
 For variable range, check for at least 10 Hz range 
  Copyright 2018 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
01h = VSC SDP supports only 3D stereo.
02h = 3D stereo + PSR.
03h = 3D stereo + PSR2.
04h = 3D stereo + PSRPSR2 + Y-coordinate.
05h = 3D stereo + PSRPSR2 + Y-coordinate + Pixel EncodingColorimetry Format
 VTEM Byte Offset
 VTEM Byte Masks
PB0
0: Periodic pseudo-static EM Data Set
1: Periodic dynamic EM Data Set
2: Unique EM Data Set
3: Reserved
PB1
PB2
0: This is a Vendor Specific EM Data Set
1: This EM Data Set is defined by This Specification (HDMI 2.1 r102.clean)
2: This EM Data Set is defined by CTA-861-G
3: This EM Data Set is defined by VESA
PB3
PB4
PB5
PB6
PB7-27 (20 bytes):
PB7 = MD0
MD1
MD2
MD3
VSC packet set to 2 when DP revision >= 1.2
 Update to revision 5 for extended colorimetry support 
	 VSC packet not needed based on the features
	  supported by this DP display
 Secondary-data Packet ID = 0
		 07h - Packet Type Value indicating Video
		  Stream Configuration packet
		 02h = VSC SDP supporting 3D stereo and PSR
		  (applies to eDP v1.3 or higher).
		 08h = VSC packet supporting 3D stereo + PSR
		  (HB2 = 02h).
 Secondary-data Packet ID = 0
 07h = Packet Type Value indicating Video Stream Configuration packet
 01h = Revision number. VSC SDP supporting 3D stereo only
 01h = VSC SDP supporting 3D stereo only (HB2 = 01h).
		 ==============================================================================================================|
		  A. STEREO 3D
		  ==============================================================================================================|
		  VSC Payload (1 byte) From DP1.2 spec
		 
		  Bits 3:0 (Stereo Interface Method Code)  |  Bits 7:4 (Stereo Interface Method Specific Parameter)
		  -----------------------------------------------------------------------------------------------------
		  0 = Non Stereo Video                     |  Must be set to 0x0
		  -----------------------------------------------------------------------------------------------------
		  1 = FrameField Sequential               |  0x0: L + R view indication based on MISC1 bit 2:1
		                                           |  0x1: Right when Stereo Signal = 1
		                                           |  0x2: Left when Stereo Signal = 1
		                                           |  (others reserved)
		  -----------------------------------------------------------------------------------------------------
		  2 = Stacked Frame                        |  0x0: Left view is on top and right view on bottom
		                                           |  (others reserved)
		  -----------------------------------------------------------------------------------------------------
		  3 = Pixel Interleaved                    |  0x0: horiz interleaved, right view pixels on even lines
		                                           |  0x1: horiz interleaved, right view pixels on odd lines
		                                           |  0x2: checker board, start with left view pixel
		                                           |  0x3: vertical interleaved, start with left view pixels
		                                           |  0x4: vertical interleaved, start with right view pixels
		                                           |  (others reserved)
		  -----------------------------------------------------------------------------------------------------
		  4 = Side-by-side                         |  0x0: left half represents left eye view
		                                           |  0x1: left half represents right eye view
 Stacked Frame, Left view is on top and right view on bottom.
 FrameField Sequential, L + R view indication based on MISC1 bit 2:1
 Side-by-side
 No Stereo Video, Shall be cleared to 0x0.
	 05h = VSC SDP supporting 3D stereo, PSR2, and Pixel EncodingColorimetry Format indication.
	    Added in DP1.3, a DP Source device is allowed to indicate the pixel encodingcolorimetry
	    format to the DP Sink device with VSC SDP only when the DP Sink device supports it
	    (i.e., VSC_SDP_EXTENSION_FOR_COLORIMETRY_SUPPORTED bit in the DPRX_FEATURE_ENUMERATION_LIST
	    register (DPCD Address 02210h, bit 3) is set to 1).
	    (Requires VSC_SDP_EXTENSION_FOR_COLORIMETRY_SUPPORTED bit set to 1 in DPCD 02210h. This
	    DPCD register is exposed in the new Extended Receiver Capability field for DPCD Rev. 1.4
	    (and higher). When MISC1. bit 6. is Set to 1, a Source device uses a VSC SDP to indicate
	    the Pixel EncodingColorimetry Format and that a Sink device must ignore MISC1, bit 7, and
	    MISC0, bits 7:1 (MISC1, bit 7. and MISC0, bits 7:1 become "don't care").)
 Secondary-data Packet ID = 0 
 07h - Packet Type Value indicating Video Stream Configuration packet 
 05h = VSC SDP supporting 3D stereo, PSR2, and Pixel EncodingColorimetry Format indication. 
 13h = VSC SDP supporting 3D stereo, + PSR2, + Pixel EncodingColorimetry Format indication (HB2 = 05h). 
		 Set VSC SDP fields for pixel encoding and colorimetry format from DP 1.3 specs
		  Data Bytes DB 18~16
		  Bits 3:0 (Colorimetry Format)        |  Bits 7:4 (Pixel Encoding)
		  ----------------------------------------------------------------------------------------------------
		  0x0 = sRGB                           |  0 = RGB
		  0x1 = RGB Wide Gamut Fixed Point
		  0x2 = RGB Wide Gamut Floating Point
		  0x3 = AdobeRGB
		  0x4 = DCI-P3
		  0x5 = CustomColorProfile
		  (others reserved)
		  ----------------------------------------------------------------------------------------------------
		  0x0 = ITU-R BT.601                   |  1 = YCbCr444
		  0x1 = ITU-R BT.709
		  0x2 = xvYCC601
		  0x3 = xvYCC709
		  0x4 = sYCC601
		  0x5 = AdobeYCC601
		  0x6 = ITU-R BT.2020 Y'cC'bcC'rc
		  0x7 = ITU-R BT.2020 Y'C'bC'r
		  (others reserved)
		  ----------------------------------------------------------------------------------------------------
		  0x0 = ITU-R BT.601                   |  2 = YCbCr422
		  0x1 = ITU-R BT.709
		  0x2 = xvYCC601
		  0x3 = xvYCC709
		  0x4 = sYCC601
		  0x5 = AdobeYCC601
		  0x6 = ITU-R BT.2020 Y'cC'bcC'rc
		  0x7 = ITU-R BT.2020 Y'C'bC'r
		  (others reserved)
		  ----------------------------------------------------------------------------------------------------
		  0x0 = ITU-R BT.601                   |  3 = YCbCr420
		  0x1 = ITU-R BT.709
		  0x2 = xvYCC601
		  0x3 = xvYCC709
		  0x4 = sYCC601
		  0x5 = AdobeYCC601
		  0x6 = ITU-R BT.2020 Y'cC'bcC'rc
		  0x7 = ITU-R BT.2020 Y'C'bC'r
		  (others reserved)
		  ----------------------------------------------------------------------------------------------------
		  0x0 =DICOM Part14 Grayscale          |  4 = Yonly
		  Display Function
		  (others reserved)
 Set Pixel Encoding 
 RGB = 0h 
 YCbCr444 = 1h 
 YCbCr422 = 2h 
 YCbCr420 = 3h 
 default RGB = 0h 
 Set Colorimetry format based on pixel encoding 
			 Note: xvYCC probably not supported correctly here on DP since colorspace translation
			  loses distinction between BT601 vs xvYCC601 in translation
 Set color depth 
			 NOTE: This is actually not valid for YCbCr pixel encoding to have 6 bpc
			        as of DP1.4 spec, but value of 0 probably reserved here for potential future use.
case COLOR_DEPTH_141414: -- NO SUCH FORMAT IN DP SPEC 
 all YCbCr are always limited range 
 DB17 bit 7 set to 1 for CEA timing. 
		 Content Type (Bits 2:0)
		   0 = Not defined.
		   1 = Graphics.
		   2 = Photo.
		   3 = Video.
		   4 = Game.
   mod_build_hf_vsif_infopacket - Prepare HDMI Vendor Specific info frame.
                                  Follows HDMI Spec to build up Vendor Specific info frame
   @stream:      contains data we may need to construct VSIF (i.e. timing_3d_format, etc.)
   @info_packet: output structure where to store VSIF
 Copyright 2018 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
 Possible Min Reduction config from least aggressive to most aggressive
   0    1     2     3     4     5     6     7     8     9     10    11   12
  100  98.0 94.1  94.1  85.1  80.3  75.3  69.4  60.0  57.6  50.2  49.8  40.0 %
 Possible Max Reduction configs from least aggressive to most aggressive
   0    1     2     3     4     5     6     7     8     9     10    11   12
  96.1 89.8 85.1  80.3  69.4  64.7  64.7  50.2  39.6  30.2  30.2  30.2  19.6 %
 Possible ABM 2.2 Min Reduction configs from least aggressive to most aggressive
   0    1     2     3     4     5     6     7     8     9     10    11   12
  100  100   100   100   100   100   100   100  100  92.2  83.1  75.3  75.3 %
 Possible ABM 2.2 Max Reduction configs from least aggressive to most aggressive
   0    1     2     3     4     5     6     7     8     9     10    11   12
  96.1 89.8 74.9  69.4  64.7  52.2  48.6  39.6  30.2  25.1  19.6  12.5  12.5 %
 Predefined ABM configuration sets. We may have different configuration sets
  in order to satisfy different powerquality requirements.
  ABM Level 1,    ABM Level 2,    ABM Level 3,    ABM Level 4 
 Default - Medium aggressiveness 
 Alt #1  - Increased aggressiveness 
 Alt #2  - Minimal aggressiveness 
 Alt #3  - Super aggressiveness 
  min_red  max_red  bright_pos  dark_pos  bright_gain  contrast  dev   min_knee  max_knee  blRed    blStart
  min_red  max_red  bright_pos  dark_pos  bright_gain  contrast  dev   min_knee  max_knee  blRed  blStart
 reserve 0xF0~0xF6 are write by DMCU only
 reserve 0xF0~0xF6 are write by DMCU only
 reserve 0xF0~0xFF are write by DMCU only
 reserve 0xF0~0xFF are write by DMCU only
 NOTE: iRAM is 256B in size 
 flags                      
 0x00 U16  
 parameters for ABM2.0 algorithm 
 0x02 U0.8 
 0x16 U0.8 
 0x2a U2.6 
 0x3e U2.6 
 0x52 U2.6 
 0x66 U2.6 
 0x7a U0.8 
 0x7f U0.8 
 parameters for crgb conversion 
 0x80 U3.13 
 0x90 U1.15 
 0xa0 U4.12 
 parameters for custom curve 
 thresholds for brightness --> backlight 
 0xb0 U16.0 
 offsets for brightness --> backlight 
 0xd0 U16.0 
 For reading PSR State directly from IRAM 
 0xf0       
 0xf1       
 0xf2       
 0xf3       
 0xf4       
 0xf6       
 0xf7       
 0xf9       
 0xfb       
 0xfc       
 0xfd       
 0xfe       
 0xff       
 flags                      
 0x00 U16  
 parameters for ABM2.2 algorithm 
 0x02 U0.8 
 0x16 U0.8 
 0x2a U2.6 
 0x3e U2.6 
 0x52 U0.8 
 0x56 U0.8 
 0x5a U0.8 
 0x5e U0.8 
 0x63 U0.8 
 0x67 U0.8 
 0x6b U16  
 0x6d U0.8 
 parameters for crgb conversion 
 0x80 U3.13 
 0x90 U1.15 
 0xa0 U4.12 
 parameters for custom curve 
 thresholds for brightness --> backlight 
 0xb0 U16.0 
 offsets for brightness --> backlight 
 0xd0 U16.0 
 For reading PSR State directly from IRAM 
 0xf0       
 0xf1       
 0xf2       
 0xf3       
 0xf4       
 0xf6       
 0xf7       
 0xf8       
 0xf9       
 0xfa       
 0xfb       
 0xfc       
 0xfd       
 0xfe       
 0xff       
	 Setup all brightness levels between 0% and 100% exclusive
	  Fills brightness-to-backlight transform table. Backlight custom curve
	  describes transform from brightness to backlight. It will be defined
	  as set of thresholds and set of offsets, together, implying
	  extrapolation of custom curve into 16 uniformly spanned linear
	  segments.  Each thresholdoffset represented by 16 bit entry in
	  format U4.10.
	 Setup all brightness levels between 0% and 100% exclusive
	  Fills brightness-to-backlight transform table. Backlight custom curve
	  describes transform from brightness to backlight. It will be defined
	  as set of thresholds and set of offsets, together, implying
	  extrapolation of custom curve into 16 uniformly spanned linear
	  segments.  Each thresholdoffset represented by 16 bit entry in
	  format U4.10.
Gamma 2.4
Gamma 2.2
Gamma 2.2
 We must copy to structure that is aligned to 32-bit
  Copyright 2014 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Copyright 2018 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 check if sh_mem_config register already configured 
		 TODO:
		     This shouldn't be an issue with Navi10.  Verify.
 Not needed on SDMAv4 onwards any more 
  Copyright 2014 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 topology_device_list - Master list of all topology devices 
 Called with write topology_lock acquired 
 Making sure that the buffer is an empty string 
 Making sure that the buffer is an empty string 
 Making sure that the buffer is an empty string 
 Making sure that the buffer is an empty string 
 Check each bit 
 Replace the last "," with end of line 
 Sysfs of Performance Counters 
 invalid data for PMC 
 Making sure that the buffer is an empty string 
	
	  Creating the sysfs folders
	
	  Creating sysfs files for node properties
 All hardware blocks have the same number of attributes. 
		 Information of IOMMU's num_counters and counter_ids is shown
		  under sysbusevent_sourcedevicesamd_iommu. We don't
		  duplicate here.
 Called with write topology lock acquired 
 Called with write topology lock acquired 
 Called with write topology_lock acquired 
 Helper function for intializing platform_xx members of
  kfd_system_properties. Uses OEM info from the last CPUAPU node.
  Performance counters information is not part of CRAT but we would like to
  put them in the sysfs under topology directory for Thunk to get the data.
  This function is called before updating the sysfs.
 These are the only counters supported so far 
 kfd_add_non_crat_information - Add information that is not currently
 	defined in CRAT but is necessary for KFD topology
  @dev - topology device to which addition info is added
 Check if CPU only node. 
 Add system memory information 
 TODO: For GPU node, rearrange code from kfd_topology_add_device 
 kfd_is_acpi_crat_invalid - CRAT from ACPI is valid only for AMD APU devices.
 	Ignore CRAT for all other devices. AMD APU is identified if both CPU
 	and GPU cores are present.
  @device_list - topology device list created by parsing ACPI CRAT table.
  @return - TRUE if invalid, FALSE is valid.
	 topology_device_list - Master list of all topology devices
	  temp_topology_device_list - temporary list created while parsing CRAT
	  or VCRAT. Once parsing is complete the contents of list is moved to
	  topology_device_list
 Initialize the head for the both the lists 
	 Proximity domains in ACPI CRAT tables start counting at
	  0. The same should be true for virtual CRAT tables created
	  at this stage. GPUs added later in kfd_topology_add_device
	  use a counter.
	
	  Get the CRAT image from the ACPI. If ACPI doesn't have one
	  or if ACPI CRAT is invalid create a virtual CRAT.
	  NOTE: The current implementation expects all AMD APUs to have
	 	CRAT. If no CRAT is available, it is assumed to be a CPU
	 For nodes with GPU, this information gets added
	  when GPU is detected (kfd_topology_add_device).
 Add additional information to CPU only node created above 
 kfd_assign_gpu - Attach @gpu to the correct kfd topology device. If
 		the GPU device is not already present in the topology device
 		list then return NULL. This means a new topology device has to
 		be created for this GPU.
		 Discrete GPUs need their own topology device list
		  entries. Don't assign them to CPUAPU nodes.
	
	  TODO: Generate an event for thunk about the arrivalremoval
	  of the GPU
 kfd_fill_mem_clk_max_info - Since CRAT doesn't have memory clock info,
 		patch this after CRAT parsing.
	 Currently, amdgpu driver (amdgpu_mc) deals only with GPUs with
	  single bank of VRAM local memory.
	  for dGPUs - VCRAT reports only one bank of Local Memory
	  for APUs - If CRAT from ACPI reports more than one bank, then
	 	all the banks will report the same mem_clk_max information
 xgmi always supports atomics between links. 
 check pcie support to set cpu(dev) flags for target_gpu_dev link. 
 set gpu (dev) flags. 
 CPU -> GPU with PCIe 
		 GPU <-> GPU with PCIe and
		  Vega20 with XGMI
 GPU only creates direct links so apply flags setting to all 
 Include the CPU in xGMI hive if xGMI connected by assigning it the hive ID. 
	 Check to see if this gpu device exists in the topology_device_list.
	  If so, assign the gpu to that device,
	  else create a Virtual CRAT for this gpu device and then parse that
	  CRAT to create a new topology device. Once created assign the gpu to
	  that topology device
		 Update the SYSFS tree, since we added another topology
		  device
	 TODO: Move the following lines to function
	 	kfd_add_non_crat_information
	 Fill-in additional information that is not available in CRAT but
	  needed for the topology
	
	 Overwrite ATS capability according to needs_iommu_device to fix
	 potential missing corresponding bit in CRAT of BIOS.
	 Fix errors in CZ CRAT.
	  simd_count: Carrizo CRAT reports wrong simd_count, probably
	 		because it doesn't consider masked out CUs
	  max_waves_per_simd: Carrizo reports wrong max_waves_per_simd
 kfd only concerns sram ecc on GFX and HBM ecc on UMC 
 kfd_topology_enum_kfd_devices - Enumerate through all devices in KFD
 	topology. If GPU device is found @idx, then valid kfd_dev pointer is
 	returned through @kdev
  Return -	0: On success (@kdev will be NULL for non GPU nodes)
 		-1: If end of list
 kfd_numa_node_to_apic_id - Returns the APIC ID of the first logical processor
 	of the given NUMA node (numa_node_id)
  Return -1 on failure
	 Only use IOMMUv2 if there is an APU topology node with no GPU
	  assigned yet. This GPU will be assigned to it.
  Copyright 2014 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 Mapping queue priority to pipe priority, indexed by queue priority 
	 Exceeding these bounds corrupts the stack and indicates a coding error.
	  Returning with no CU's enabled will hang the queue, which should be
	  attention grabbing.
	 Count active CUs per SH.
	 
	  Some CUs in an SH may be disabled.	HW expects disabled CUs to be
	  represented in the high bits of each SH's enable mask (the upper and lower
	  16 bits of se_mask) and will take care of the actual distribution of
	  disabled CUs within each SH automatically.
	  Each half of se_mask must be filled only on bits 0-cu_per_sh[se][sh]-1.
	 
	  See note on Arcturus cu_bitmap layout in gfx_v9_0_get_cu_info.
	 Symmetrically map cu_mask to all SEs & SHs:
	  se_mask programs up to 2 SH in the upper and lower 16 bits.
	 
	  Examples
	  Assuming 1 SHSE, 4 SEs:
	  cu_mask[0] bit0 -> se_mask[0] bit0
	  cu_mask[0] bit1 -> se_mask[1] bit0
	  ...
	  cu_mask[0] bit4 -> se_mask[0] bit1
	  ...
	 
	  Assuming 2 SHSE, 4 SEs
	  cu_mask[0] bit0 -> se_mask[0] bit0 (SE0,SH0,CU0)
	  cu_mask[0] bit1 -> se_mask[1] bit0 (SE1,SH0,CU0)
	  ...
	  cu_mask[0] bit4 -> se_mask[0] bit16 (SE0,SH1,CU0)
	  cu_mask[0] bit5 -> se_mask[1] bit16 (SE1,SH1,CU0)
	  ...
	  cu_mask[0] bit8 -> se_mask[0] bit1 (SE0,SH0,CU1)
	  ...
	 
	  First ensure all CUs are disabled, then enable user specified CUs.
  Copyright 2014 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
	
	  We acquire a buffer from DIQ
	  The receive packet buff will be sitting on the Indirect Buffer
	  and in the PQ we put the IB packet + sync packet(s).
	
	  for now we use release mem for GPU-CPU synchronization
	  Consider WaitRegMem + WriteData as a better alternative
	  we get a GART allocations ( gpucpu mapping),
	  for the sync variable, and wait until:
	  (a) Sync with HW
	  (b) Sync var is written by CP to mem.
 Wait till CP writes sync code: 
	
	  no action is needed in this case,
	  just make sure diq will not be used
 disable watch address 
 todo - disable address watch 
 for now assume it is an ATC address 
 taking the vmid for that process on the safe way using pdd 
 we do not control the vmid in DIQ mode, just a place holder 
 enable watch flag if address is not zero
 Send command to single wave 
		
		  Limit access to the process waves only,
		  by setting vmid check
 Send command to all waves with matching VMID 
 Send command to all CU waves with matching VMID 
 we do not control the VMID in DIQ, so reset it to a known value 
 Restore the GRBM_GFX_INDEX register 
 taking the VMID for that process on the safe way using PDD 
 for non DIQ we need to patch the VMID: 
	 Scan all registers in the range ATC_VMID8_PASID_MAPPING ..
	  ATC_VMID15_PASID_MAPPING
	  to check which VMID the current process is mapped to.
 taking the VMID for that process on the safe way using PDD 
 for non DIQ we need to patch the VMID: 
  Copyright 2014 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 Initialize a kernel queue, including allocations of GART memory
  needed for the queue.
 For CIK family asics, kq->eop_mem is not needed 
 assign HIQ to HQD 
 allocate fence for DIQ 
 Uninitialize a kernel queue and free all its memory usages. 
	 For CIK family asics, kq->eop_mem is Null, kfd_gtt_sa_free()
	  is able to handle NULL properly.
	 When rptr == wptr, the buffer is empty.
	  When rptr == wptr + 1, the buffer is full.
	  It is always rptr that advances to the position of wptr, rather than
	  the opposite. So we can only use up to queue_size_dwords - 1 dwords.
		
		  make sure calling functions know
		  acquire_packet_buffer() failed
		 make sure after rolling back to position 0, there is
		  still enough space.
 fill nops, roll back and start at position 0 
 FIXME: Can this test be removed? 
  Copyright 2016-2017 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Copyright 2014 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
	 check if there is over subscription
	  Note: the arbitration between the number of VMIDs and
	  hws_max_conc_proc has been done in
	  kgd2kfd_device_init().
 calculate run list ib allocation size 
	
	  Increase the allocation size in case we need a chained run list
	  when over subscription
 build the run list ib packet 
 build map process packet 
 PM4 packet structures on CIK are the same as on VI 
  Copyright 2015-2017 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 GPU Processor ID base for dGPUs for which VCRAT needs to be created.
  GPU processor ID are expressed with Bit[31]=1.
  The base is set to 0x8000_0000 + 0x1000 to avoid collision with GPU IDs
  used in the CRAT.
 Return the next available gpu_processor_id and increment it for next GPU
 	@total_cu_count - Total CUs present in the GPU including ones
 			  masked off
 Static table to describe GPU Cache information 
	 Indicates how many Compute Units share this cache
	  within a SA. Value = 1 indicates the cache is not shared
 TCP L1 Cache per CU 
 Scalar L1 Instruction Cache (in SQC module) per bank 
 Scalar L1 Data Cache (in SQC module) per bank 
 TODO: Add L2 Cache information 
 TCP L1 Cache per CU 
 Scalar L1 Instruction Cache (in SQC module) per bank 
 Scalar L1 Data Cache (in SQC module) per bank. 
 TODO: Add L2 Cache information 
 NOTE: L1 cache information has been updated and L2L3
  cache information has been added for Vega10 and
  newer ASICs. The unit for cache_size is KiB.
  In future,  check & update cache details
  for every new ASIC is required.
 TCP L1 Cache per CU 
 Scalar L1 Instruction Cache per SQC 
 Scalar L1 Data Cache per SQC 
 L2 Data Cache per GPU (Total Tex Cache) 
 TCP L1 Cache per CU 
 Scalar L1 Instruction Cache per SQC 
 Scalar L1 Data Cache per SQC 
 L2 Data Cache per GPU (Total Tex Cache) 
 TCP L1 Cache per CU 
 Scalar L1 Instruction Cache per SQC 
 Scalar L1 Data Cache per SQC 
 L2 Data Cache per GPU (Total Tex Cache) 
 TCP L1 Cache per CU 
 Scalar L1 Instruction Cache per SQC 
 Scalar L1 Data Cache per SQC 
 L2 Data Cache per GPU (Total Tex Cache) 
 TCP L1 Cache per CU 
 Scalar L1 Instruction Cache per SQC 
 Scalar L1 Data Cache per SQC 
 L2 Data Cache per GPU (Total Tex Cache) 
 TCP L1 Cache per CU 
 Scalar L1 Instruction Cache per SQC 
 Scalar L1 Data Cache per SQC 
 L2 Data Cache per GPU (Total Tex Cache) 
 TCP L1 Cache per CU 
 Scalar L1 Instruction Cache per SQC 
 Scalar L1 Data Cache per SQC 
 GL1 Data Cache per SA 
 L2 Data Cache per GPU (Total Tex Cache) 
 TCP L1 Cache per CU 
 Scalar L1 Instruction Cache per SQC 
 Scalar L1 Data Cache per SQC 
 GL1 Data Cache per SA 
 L2 Data Cache per GPU (Total Tex Cache) 
 TCP L1 Cache per CU 
 Scalar L1 Instruction Cache per SQC 
 Scalar L1 Data Cache per SQC 
 GL1 Data Cache per SA 
 L2 Data Cache per GPU (Total Tex Cache) 
 TCP L1 Cache per CU 
 Scalar L1 Instruction Cache per SQC 
 Scalar L1 Data Cache per SQC 
 GL1 Data Cache per SA 
 L2 Data Cache per GPU (Total Tex Cache) 
 L3 Data Cache per GPU 
 TCP L1 Cache per CU 
 Scalar L1 Instruction Cache per SQC 
 Scalar L1 Data Cache per SQC 
 GL1 Data Cache per SA 
 L2 Data Cache per GPU (Total Tex Cache) 
 L3 Data Cache per GPU 
 TCP L1 Cache per CU 
 Scalar L1 Instruction Cache per SQC 
 Scalar L1 Data Cache per SQC 
 GL1 Data Cache per SA 
 L2 Data Cache per GPU (Total Tex Cache) 
 L3 Data Cache per GPU 
 TCP L1 Cache per CU 
 Scalar L1 Instruction Cache per SQC 
 Scalar L1 Data Cache per SQC 
 GL1 Data Cache per SA 
 L2 Data Cache per GPU (Total Tex Cache) 
 L3 Data Cache per GPU 
 TCP L1 Cache per CU 
 Scalar L1 Instruction Cache per SQC 
 Scalar L1 Data Cache per SQC 
 GL1 Data Cache per SA 
 L2 Data Cache per GPU (Total Tex Cache) 
 kfd_parse_subtype_cu - parse compute unit subtypes and attach it to correct
  topology device present in the device_list
 kfd_parse_subtype_mem - parse memory subtypes and attach it to correct
  topology device present in the device_list
 We're on GPU node 
 APU 
 dGPU 
			 Multiple banks of the same type are aggregated into
			  one. User mode doesn't care about multiple physical
			  memory segments. It's managed as a single virtual
			  heap for user mode.
 kfd_parse_subtype_cache - parse cache subtypes and attach it to correct
  topology device present in the device_list
		 Cache infomration in CRAT doesn't have proximity_domain
		  information as it is associated with a CPU core or GPU
		  Compute Unit. So map the cache using CPU core Id or SIMD
		  (GPU) ID.
		  TODO: This works because currently we can safely assume that
		   Compute Units are parsed before caches are parsed. In
		   future, remove this dependency
 kfd_parse_subtype_iolink - parse iolink subtypes and attach it to correct
  topology device present in the device_list
	 CPU topology is created before GPUs are detected, so CPU->GPU
	  links are not built at that time. If a PCIe type is discovered, it
	  means a GPU is detected and we are adding GPU->CPU to the topology.
	  At this time, also add the corresponded CPU->GPU link if GPU
	  is large bar.
	  For xGMI, we only added the link with one direction in the crat
	  table, add corresponded reversed direction link now.
 same everything but the other direction 
 kfd_parse_subtype - parse subtypes and attach it to correct topology device
  present in the device_list
 	@sub_type_hdr - subtype section of crat_image
 	@device_list - list of topology devices present in this crat_image
		
		  For now, nothing to do here
		
		  For now, nothing to do here
 kfd_parse_crat_table - parse CRAT table. For each node present in CRAT
  create a kfd_topology_device and add in to device_list. Also parse
  CRAT subtypes and attach it to appropriate kfd_topology_device
 	@crat_image - input image containing CRAT
 	@device_list - [OUT] list of kfd_topology_device generated after
 		       parsing crat_image
 	@proximity_domain - Proximity domain of the first device in the table
 	Return - 0 if successful else -ve value
 Helper function. See kfd_fill_gpu_cache_info for parameter description 
 First check if enough memory is available 
	 CU could be inactive. In case of shared cache find the first active
	  CU. and incase of non-shared cache check if the CU is inactive. If
	  inactive active skip it
		 Sibling map is w.r.t processor_id_low, so shift out
		  inactive CU
 Helper function. See kfd_fill_gpu_cache_info for parameter description 
 First check if enough memory is available 
	 CU could be inactive. In case of shared cache find the first active
	  CU. and incase of non-shared cache check if the CU is inactive. If
	  inactive active skip it
		 Sibling map is w.r.t processor_id_low, so shift out
		  inactive CU
 kfd_fill_gpu_cache_info - Fill GPU cache info using kfd_gpu_cache_info
  tables
 	@kdev - [IN] GPU device
 	@gpu_processor_id - [IN] GPU processor ID to which these caches
 			    associate
 	@available_size - [IN] Amount of memory available in pcache
 	@cu_info - [IN] Compute Unit info obtained from KGD
 	@pcache - [OUT] memory into which cache data is to be filled in.
 	@size_filled - [OUT] amount of data used up in pcache.
 	@num_of_entries - [OUT] number of caches added
	 For each type of cache listed in the kfd_gpu_cache_info table,
	  go through all available Compute Units.
	  The [i,j,k] loop will
	 		if kfd_gpu_cache_info.num_cu_shared = 1
	 			will parse through all available CU
	 		If (kfd_gpu_cache_info.num_cu_shared != 1)
	 			then it will consider only one CU from
	 			the shared unit
 Move to next CU block 
  kfd_create_crat_image_acpi - Allocates memory for CRAT image and
  copies CRAT from ACPI (if available).
  NOTE: Call kfd_destroy_crat_image to free CRAT image memory
 	@crat_image: CRAT read from ACPI. If no CRAT in ACPI then
 		     crat_image will be NULL
 	@size: [OUT] size of crat_image
 	Return 0 if successful else return error code
 Fetch the CRAT table from ACPI 
 Memory required to create Virtual CRAT.
  Since there is no easy way to predict the amount of memory required, the
  following amount is allocated for GPU Virtual CRAT. This is
  expected to cover all known conditions. But to be safe additional check
  is put in the code to ensure we don't overwrite.
 kfd_fill_cu_for_cpu - Fill in Compute info for the given CPU NUMA node
 	@numa_node_id: CPU NUMA node id
 	@avail_size: Available size in the memory
 	@sub_type_hdr: Memory into which compute info will be filled in
 	Return 0 if successful else return -ve value
 Fill in subtype header data 
 Fill in CU data 
 kfd_fill_mem_info_for_cpu - Fill in Memory info for the given CPU NUMA node
 	@numa_node_id: CPU NUMA node id
 	@avail_size: Available size in the memory
 	@sub_type_hdr: Memory into which compute info will be filled in
 	Return 0 if successful else return -ve value
 Fill in subtype header data 
 Fill in Memory Subunit data 
	 Unlike si_meminfo, si_meminfo_node is not exported. So
	  the following lines are duplicated from si_meminfo_node
	  function
 Create IO links from this node to other CPU nodes 
 node itself 
 Fill in subtype header data 
 Fill in IO link data 
 kfd_create_vcrat_image_cpu - Create Virtual CRAT for CPU
 	@pcrat_image: Fill in VCRAT for CPU
 	@size:	[IN] allocated size of crat_image.
 		[OUT] actual size of data filled in crat_image
	 Fill in CRAT Header.
	  Modify length and total_entries as subunits are added.
 Fill in Subtype: Compute Unit 
 Fill in Subtype: Memory 
 Fill in Subtype: IO Link 
	 TODO: Add cache Subtype for CPU.
	  Currently, CPU cache information is available in function
	  detect_cache_attributes(cpu) defined in the file
	  .archx86kernelcpuintel_cacheinfo.c. This function is not
	  exported and to get the same information the code needs to be
	  duplicated.
 Fetch the SRAT table from ACPI 
 Parse all entries looking for a match. 
		
		  If length is 0, break from this loop to avoid
		  infinite loop.
 Workaround bad cpu-gpu binding case 
 kfd_fill_gpu_direct_io_link - Fill in direct io link from GPU
  to its NUMA node
 	@avail_size: Available size in the memory
 	@kdev - [IN] GPU device
 	@sub_type_hdr: Memory into which io link info will be filled in
 	@proximity_domain - proximity domain of the GPU node
 	Return 0 if successful else return -ve value
 Fill in subtype header data 
	 Fill in IOLINK subtype.
	  TODO: Fill-in other fields of iolink subtype
		
		  with host gpu xgmi link, host can access gpu memory whether
		  or not pcie bar type is large, so always create bidirectional
		  io link.
 kfd_create_vcrat_image_gpu - Create Virtual CRAT for CPU
 	@pcrat_image: Fill in VCRAT for GPU
 	@size:	[IN] allocated size of crat_image.
 		[OUT] actual size of data filled in crat_image
	 Fill the CRAT Header.
	  Modify length and total_entries as subunits are added.
 Change length as we add more subtypes
	 Fill in Subtype: Compute Unit
	  First fill in the sub type header and then sub type data
 Fill CU subtype data 
	 Check if this node supports IOMMU. During parsing this flag will
	  translate to HSA_CAP_ATS_PRESENT
	 Fill in Subtype: Memory. Only on systems with large BAR (no
	  private FB), report memory as public. On other systems
	  report the total FB size (public+private) as a single
	  private heap.
	 TODO: Fill in cache information. This information is NOT readily
	  available in KGD
	 Fill in Subtype: IO_LINKS
	   Only direct links are added here which is Link from GPU to
	   to its NUMA node. Indirect links are added by userspace.
	 Fill in Subtype: IO_LINKS
	  Direct links from GPU to other GPUs through xGMI.
	  We will loop GPUs that already be processed (with lower value
	  of proximity_domain), add the link for the GPUs with same
	  hive id (from this GPU to other GPU) . The reversed iolink
	  (from other GPU to this GPU) will be added
	  in kfd_parse_subtype_iolink.
 kfd_create_crat_image_virtual - Allocates memory for CRAT image and
 		creates a Virtual CRAT (VCRAT) image
  NOTE: Call kfd_destroy_crat_image to free CRAT image memory
 	@crat_image: VCRAT image created because ACPI does not have a
 		     CRAT for this device
 	@size: [OUT] size of virtual crat_image
 	@flags:	COMPUTE_UNIT_CPU - Create VCRAT for CPU device
 		COMPUTE_UNIT_GPU - Create VCRAT for GPU
 		(COMPUTE_UNIT_CPU | COMPUTE_UNIT_GPU) - Create VCRAT for APU
 			-- this option is not currently implemented.
 			The assumption is that all AMD APUs will have CRAT
 	@kdev: Valid kfd_device required if flags contain COMPUTE_UNIT_GPU
 	Return 0 if successful else return -ve value
	 Allocate the CPU Virtual CRAT size based on the number of online
	  nodes. Allocate VCRAT_SIZE_FOR_GPU for GPU virtual CRAT image.
	  This should cover all the current conditions. A check is put not
	  to overwrite beyond allocated size for GPUs
 TODO: 
 kfd_destroy_crat_image
 	@crat_image: [IN] - crat_image from kfd_create_crat_image_xxx(..)
  Copyright 2014 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
	 In 64-bit mode, we can only control the top 3 bits of the LDS,
	  scratch and GPUVM apertures.
	  The hardware fills in the remaining 59 bits according to the
	  following pattern:
	  LDS:		X0000000'00000000 - X0000001'00000000 (4GB)
	  Scratch:	X0000001'00000000 - X0000002'00000000 (4GB)
	  GPUVM:	Y0010000'00000000 - Y0020000'00000000 (1TB)
	 
	  (where XY is the configurable nybble with the low-bit 0)
	 
	  LDS and scratch will have the same top nybble programmed in the
	  top 3 bits of SH_MEM_BASES.PRIVATE_BASE.
	  GPUVM can have a different top nybble programmed in the
	  top 3 bits of SH_MEM_BASES.SHARED_BASE.
	  We don't bother to support different top nybbles
	  for LDSScratch and GPUVM.
 check if sh_mem_config register already configured 
 check if sh_mem_config register already configured 
	 On dGPU we're always in GPUVM64 addressing mode with 64-bit
	  aperture addresses.
	 On dGPU we're always in GPUVM64 addressing mode with 64-bit
	  aperture addresses.
  Copyright 2014 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 4 is the max # of SEs 
 AQL write pointer counts in 64B packets, PM4CP counts in dwords. 
	
	  HW does not clamp this field correctly. Maximum EOP queue size
	  is constrained by per-SE EOP done signal count, which is 8-bit.
	  Limit is 0xFF EOP entries (= 0x7F8 dwords). CP will not submit
	  more than (EOP entry count - 1) so a queue size of 0x800 dwords
	  is safe, giving a maximum field value of 0xA.
	 Control stack is not copied to user mode for GFXv8 because
	  it's part of the context save area that is already
	  accessible to user mode
    preempt type here is ignored because there is only one way
    to preempt sdma queue
  Copyright 2014 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 filep now owns the reference returned by kfd_create_process 
 Return gpu_id as doorbell offset for mmap usage 
		 On SOC15 ASICs, include the doorbell offset within the
		  process doorbell frame, which is 2 pages.
	 To prevent an unreasonably large CU mask size, set an arbitrary
	  limit of max_num_cus bits.  We can then just drop any CU mask bits
	  past max_num_cus bits and just use the first max_num_cus bits.
	
	  make sure that we have pdd, if this the first queue created for
	  this process
 In case of a legal call, we have no dbgmgr yet 
  Parse and generate variable size data structure for address watch.
  Total size of the buffer and # watch points is limited in order
  to prevent kernel abuse. (no bearing to the much smaller HW limitation
  which is enforced by dbgdev module)
  please also note that the watch address itself are not "copied from user",
  since it be set into the HW in user mode values.
 Validate arguments 
 this is the actual buffer to work with 
	
	  set watch address base pointer to point on the array base
	  within args_buff
 skip over the addresses buffer 
		
		  There is an array of masks.
		  set watch mask base pointer to point on the array base
		  within args_buff
 skip over the masks buffer 
 just the NULL mask, set to NULL and skip over it 
 Currently HSA Event is not supported for DBG 
 Parse and generate fixed size data structure for wave control 
 we use compact form, independent of the packing attribute value 
 input size must match the computed "compact" size 
 copy the entire buffer from user 
 move ptr to the start of the "pay-load" area 
 Reading GPU clock counter from KGD 
 Node without GPU resource 
 No access to rdtsc. Using raw monotonic time 
 Since the counter is in nano-seconds we use 1GHz frequency 
 Run over all pdd of the process 
		 Return number of nodes, so that user space can alloacate
		  sufficient memory
	 Fill in process-aperture information for all available
	  nodes, but not more than args->num_of_nodes as that is
	  the amount of memory allocated by user
 Run over all pdd of the process 
	 For dGPUs the event page is allocated in user mode. The
	  handle is passed to KFD with the first call to this IOCTL
	  through the event_page_offset field.
 On success, the PDD keeps the drm_file reference 
	 Flush pending deferred work to avoid racing with deferred actions
	  from previous memory map changes (e.g. munmap).
 Update the VRAM usage count 
	 MMIO is mapped through kfd device
	  Generate a kfd mmap offset
	
	  Safeguard to prevent user space from freeing signal BO.
	  It will be freed at process termination.
	 If freeing the buffer failed, leave the handle in place for
	  clean-up during process tear-down.
 Flush TLBs after waiting for the page table updates to complete 
 Flush TLBs after waiting for the page table updates to complete 
 Find a KFD GPU device that supports the get_dmabuf_info query 
 Get dmabuf info from KGD 
 Reverse-lookup gpu_id from kgd pointer 
 Copy metadata buffer to user mode 
 Handle requests for watching SMI events 
 Ioctl table 
	 Get the process struct from the filep. Only the process
	  that opened devkfd can use the file descriptor. Child
	  processes need to create their own KFD device context.
 Do not trust userspace, use our own definition 
  Copyright 2014 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 Verify module parameters 
 Verify module parameters 
	 Ignore the return value, so that we can continue
	  to init the KFD, even if procfs isn't craated
  Copyright 2014 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  List of struct kfd_process (field kfd_process).
  Uniqueindexed by mm_struct
 For process termination handling 
 Ordered, single-threaded workqueue for restoring evicted
  processes. Restoring multiple processes concurrently under memory
  pressure can lead to processes blocking each other from validating
  their BOs and result in a live-lock situation where processes
  remain evicted indefinitely.
  Structure for SDMA activity tracking
	
	  Total SDMA activity is current SDMA activity + past SDMA activity
	  Past SDMA count is stored in pdd.
	  To get the current activity counters for all active SDMA queues,
	  we loop over all SDMA queues and get their counts from user-space.
	 
	  We cannot call get_user() with dqm_lock held as it can cause
	  a circular lock dependency situation. To read the SDMA stats,
	  we need to do the following:
	 
	  1. Create a temporary list of SDMA queue nodes from the qpd->queues_list,
	     with dqm_lockdqm_unlock().
	  2. Call get_user() for each node in temporary list without dqm_lock.
	     Save the SDMA count for each node and also add the count to the total
	     SDMA count counter.
	     Its possible, during this step, a few SDMA queue nodes got deleted
	     from the qpd->queues_list.
	  3. Do a second pass over qpd->queues_list to check if any nodes got deleted.
	     If any node got deleted, its SDMA count would be captured in the sdma
	     past activity counter. So subtract the SDMA counter stored in step 2
	     for this node from the total SDMA count.
	
	  Create the temp list of all SDMA queues
	
	  If the temp list is empty, then no SDMA queues nodes were found in
	  qpd->queues_list. Return the past activity count as the total sdma
	  count
	
	  Get the usage count for each SDMA queue in temp_list.
	
	  Do a second iteration over qpd_queues_list to check if any SDMA
	  nodes got deleted while fetching SDMA counter.
	
	  If temp list is not empty, it implies some queues got deleted
	  from qpd->queues_list during SDMA usage read. Subtract the SDMA
	  count for each node from the total SDMA count.
  @kfd_get_cu_occupancy - Collect number of waves in-flight on this device
  by current process. Translates acquired wave count into number of compute units
  that are occupied.
  @atr: Handle of attribute that allows reporting of wave count. The attribute
  handle encapsulates GPU device it is associated with, thereby allowing collection
  of waves in flight, etc
  @buffer: Handle of user provided buffer updated with wave count
  Return: Number of bytes written to user buffer or an error value
 Collect wave count from device if it supports 
 Translate wave count to number of compute units 
 If we fail to create the procfs, clean up 
 Sysfs handle that gets CU occupancy is per device 
 Create proc<pid>queues<queue id> folder 
	
	  Create sysfs files for each GPU:
	  - proc<pid>stats_<gpuid>
	  - proc<pid>stats_<gpuid>evicted_ms
	  - proc<pid>stats_<gpuid>cu_occupancy
 Add sysfs file to report compute unit occupancy 
	
	  Create sysfs files for each GPU which supports SVM
	  - proc<pid>counters_<gpuid>
	  - proc<pid>counters_<gpuid>faults
	  - proc<pid>counters_<gpuid>page_in
	  - proc<pid>counters_<gpuid>page_out
	
	  Create sysfs files for each GPU:
	  - proc<pid>vram_<gpuid>
	  - proc<pid>sdma_<gpuid>
 kfd_process_alloc_gpuvm - Allocate GPU VM for the KFD process
 	This function should be only called right after the process
 	is created and when kfd_processes_mutex is still being held
 	to avoid concurrency. Because of that exclusiveness, we do
 	not need to take p->mutex.
 kfd_process_device_reserve_ib_mem - Reserve memory inside the
 	process for IB usage The memory reserved is for KFD to submit
 	IB to AMDGPU from kernel.  If the memory is reserved
 	successfully, ib_kaddr will have the CPUkernel
 	address. Check ib_kaddr before accessing the memory.
 ib_base is only set for dGPU 
 Only the pthreads threading model is supported. 
	
	  take kfd processes mutex before starting of process creation
	  so there won't be a case where two threads of the same process
	  create two kfd_process structures
 A prior open of devkfd could have already created the process. 
 kfd_process_free_notifier will trigger the cleanup 
 Only the pthreads threading model is supported. 
	
	  Remove all handles from idr and release appropriate
	  local memory object
  Just kunmap and unpin signal BO here. It will be freed in
  kfd_process_free_outstanding_kfd_bos()
		
		  before destroying pdd, make sure to report availability
		  for auto suspend
 No process locking is needed in this function, because the process
  is not findable any more. We must assume that no other thread is
  using it any more, otherwise we couldn't safely free the process
  structure in the end.
	
	  The kfd_process structure can not be free because the
	  mmu_notifier srcu is read locked
	 Iterate over all process device data structures and if the
	  pdd is in debug mode, we should first force unregistration,
	  then we will be able to destroy the queues
 Indicate to other users that MM is no longer valid 
	 Signal the eviction fence after user mode queues are
	  destroyed. This allows any BOs to be freed without
	  triggering pointless evictions or waiting for fences.
 cwsr_base is only set for dGPU 
		 KFD trap handler is bound, record as second-level TBATMA
		  in first-level TMA. First-level trap will jump to second.
 No trap handler bound, bind as first-level TBATMA. 
	 On most GFXv9 GPUs, the retry mode in the SQ must match the
	  boot time retry setting. Mixing processes with different
	  XNACKretry settings can hang the GPU.
	 
	  Different GPUs can have different noretry settings depending
	  on HW bugs or limitations. We need to find at least one
	  XNACK mode for this process that's compatible with all GPUs.
	  Fortunately GPUs with retry enabled (noretry=0) can run code
	  built for XNACK-off. On GFXv9 it may perform slower.
	 
	  Therefore applications built for XNACK-off can always be
	  supported and will be our fallback if any GPU does not
	  support retry.
		 Only consider GFXv9 and higher GPUs. Older GPUs don't
		  support the SVM APIs and don't need to be considered
		  for the XNACK mode selection.
		 Aldebaran can always support XNACK because it can support
		  per-process XNACK mode selection. But let the dev->noretry
		  setting still influence the default XNACK mode.
		 GFXv10 and later GPUs do not support shader preemption
		  during page faults. This can lead to poor QoS for queue
		  management and memory-manager-related preemptions or
		  even deadlocks.
  On return the kfd_process is fully operational and will be freed when the
  mm is released
 init process apertures
 Check XNACK support after PDDs are created in kfd_init_apertures 
 alloc_notifier needs to find the process in the hash table 
	 MMU notifier registration must be the last call that can fail
	  because after this point we cannot unwind the process creation.
	  After this point, mmu_notifier_put will trigger the cleanup by
	  dropping the last process reference in the free_notifier.
 Mask out doorbells reserved for SDMA, IH, and VCN on SOC15. 
 Init idr used for memory handle translation 
  kfd_process_device_init_vm - Initialize a VM for a process-device
  @pdd: The process-device
  @drm_file: Optional pointer to a DRM file descriptor
  If @drm_file is specified, it will be used to acquire the VM from
  that file descriptor. If successful, the @pdd takes ownership of
  the file descriptor.
  If @drm_file is NULL, a new VM is created.
  Returns 0 on success, -errno on failure.
  Direct the IOMMU to bind the process (specifically the pasid->mm)
  to the device.
  Unbinding occurs when the process dies or the device is removed.
  Assumes that the process lock is held.
	
	  signal runtime-pm system to auto resume and prevent
	  further runtime suspend once device pdd is created until
	  pdd is destroyed.
	
	  make sure that runtime_usage counter is incremented just once
	  per pdd
 balance runpm reference count and exit with error 
 Create specific handle mapped to mem from process local memory idr
  Assumes that the process lock is held.
 Translate specific handle from process local memory idr
  Assumes that the process lock is held.
 Remove specific handle from process local memory idr
  Assumes that the process lock is held.
 This increments the process->ref counter. 
 This increments the process->ref counter. 
 kfd_process_evict_queues - Evict all user queues of a process
  Eviction is reference-counted per process-device. This means multiple
  evictions from different sources can be nested safely.
		 evict return -EIO if HWS is hang or asic is resetting, in this case
		  we would like to set all the queues to be in evicted state to prevent
		  them been add back since they actually not be saved right now.
	 To keep state consistent, roll back partial eviction by
	  restoring queues
 kfd_process_restore_queues - Restore all user queues of a process 
	 Process termination destroys this worker thread. So during the
	  lifetime of this thread, kfd_process p will be valid
	 Narrow window of overlap between restore and evict work
	  item is possible. Once amdgpu_amdkfd_gpuvm_restore_process_bos
	  unreserves KFD BOs, it is possible to evicted again. But
	  restore has few more steps of finish. So lets wait for any
	  previous restore work to complete
	 Process termination destroys this worker thread. So during the
	  lifetime of this thread, kfd_process p will be valid
	 Setting last_restore_timestamp before successful restoration.
	  Otherwise this would have to be set by KGD (restore_process_bos)
	  before KFD BOs are unreserved. If not, the process can be evicted
	  again before the timestamp is set.
	  If restore fails, the timestamp will be set again in the next
	  attempt. This would mean that the minimum GPU quanta would be
	  PROCESS_ACTIVE_TIME_MS - (time to execute the following two
	  functions)
 Mapping pages to user process 
		 Nothing to flush until a VMID is assigned, which
		  only happens when the first queue is created.
  Copyright 2016-2018 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
		 On GFX9, unlike GFX10, bit TRAP_EN of SQ_SHADER_TBA_HI is
		  not defined, so setting it won't do any harm.
	 Determine the number of processes to map together to HW:
	  it can not exceed the number of VMIDs available to the
	  scheduler, and it is determined by the smaller of the number
	  of processes in the runlist and kfd module parameter
	  hws_max_conc_proc.
	  Note: the arbitration between the number of VMIDs and
	  hws_max_conc_proc has been done in
	  kgd2kfd_device_init().
 no static queues under SDMA 
 in this case, we do not preempt static queues 
  Copyright 2014 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  The primary memory IO features being added for revisions of gfxip
  beyond 7.0 (Kaveri) are:
  Access to ATCIOMMU mapped memory w associated extension of VA to 48b
  “Flat” shader memory access – These are new shader vector memory
  operations that do not reference a T#V# so a “pointer” is what is
  sourced from the vector gprs for direct access to memory.
  This pointer space has the Shared(LDS) and Private(Scratch) memory
  mapped into this pointer space as apertures.
  The hardware then determines how to direct the memory request
  based on what apertures the request falls in.
  Unaligned support and alignment check
  System Unified Address - SUA
  The standard usage for GPU virtual addresses are that they are mapped by
  a set of page tables we call GPUVM and these page tables are managed by
  a combination of vidMMdriver software components.  The current virtual
  address (VA) range for GPUVM is 40b.
  As of gfxip7.1 and beyond we’re adding the ability for compute memory
  clients (CPRLC, DMA, SHADER(ifetch, scalar, and vector ops)) to access
  the same page tables used by host x86 processors and that are managed by
  the operating system. This is via a technique and hardware called ATCIOMMU.
  The GPU has the capability of accessing both the GPUVM and ATC address
  spaces for a given VMID (process) simultaneously and we call this feature
  system unified address (SUA).
  There are three fundamental address modes of operation for a given VMID
  (process) on the GPU:
 	HSA64 – 64b pointers and the default address space is ATC
 	HSA32 – 32b pointers and the default address space is ATC
 	GPUVM – 64b pointers and the default address space is GPUVM (driver
 		model mode)
  HSA64 - ATCIOMMU 64b
  A 64b pointer in the AMD64IA64 CPU architecture is not fully utilized
  by the CPU so an AMD CPU can only access the high area
  (VA[63:47] == 0x1FFFF) and low area (VA[63:47 == 0) of the address space
  so the actual VA carried to translation is 48b.  There is a “hole” in
  the middle of the 64b VA space.
  The GPU not only has access to all of the CPU accessible address space via
  ATCIOMMU, but it also has access to the GPUVM address space.  The “system
  unified address” feature (SUA) is the mapping of GPUVM and ATC address
  spaces into a unified pointer space.  The method we take for 64b mode is
  to map the full 40b GPUVM address space into the hole of the 64b address
  space.
  The GPUVM_BaseGPUVM_Limit defines the aperture in the 64b space where we
  direct requests to be translated via GPUVM page tables instead of the
  IOMMU path.
  64b to 49b Address conversion
  Note that there are still significant portions of unused regions (holes)
  in the 64b address space even for the GPU.  There are several places in
  the pipeline (sw and hw), we wish to compress the 64b virtual address
  to a 49b address.  This 49b address is constituted of an “ATC” bit
  plus a 48b virtual address.  This 49b address is what is passed to the
  translation hardware.  ATC==0 means the 48b address is a GPUVM address
  (max of 2^40 – 1) intended to be translated via GPUVM page tables.
  ATC==1 means the 48b address is intended to be translated via IOMMU
  page tables.
  A 64b pointer is compared to the apertures that are defined (BaseLimit), in
  this case the GPUVM aperture (red) is defined and if a pointer falls in this
  aperture, we subtract the GPUVM_Base address and set the ATC bit to zero
  as part of the 64b to 49b conversion.
  Where this 64b to 49b conversion is done is a function of the usage.
  Most GPU memory access is via memory objects where the driver builds
  a descriptor which consists of a base address and a memory access by
  the GPU usually consists of some kind of an offset or Cartesian coordinate
  that references this memory descriptor.  This is the case for shader
  instructions that reference the T# or V# constants, or for specified
  locations of assets (ex. the shader program location).  In these cases
  the driver is what handles the 64b to 49b conversion and the base
  address in the descriptor (ex. V# or T# or shader program location)
  is defined as a 48b address w an ATC bit.  For this usage a given
  memory object cannot straddle multiple apertures in the 64b address
  space. For example a shader program cannot jump inout between ATC
  and GPUVM space.
  In some cases we wish to pass a 64b pointer to the GPU hardware and
  the GPU hw does the 64b to 49b conversion before passing memory
  requests to the cachememory system.  This is the case for the
  S_LOAD and FLAT_ shader memory instructions where we have 64b pointers
  in scalar and vector GPRs respectively.
  In all cases (no matter where the 64b -> 49b conversion is done), the gfxip
  hardware sends a 48b address along w an ATC bit, to the memory controller
  on the memory request interfaces.
 	<client>_MC_rdreq_atc    read request ATC bit
 		0 : <client>_MC_rdreq_addr is a GPUVM VA
 		1 : <client>_MC_rdreq_addr is a ATC VA
  “Spare” aperture (APE1)
  We use the GPUVM aperture to differentiate ATC vs. GPUVM, but we also use
  apertures to set the Mtype field for S_LOADFLAT_ ops which is input to the
  config tables for setting cache policies. The “spare” (APE1) aperture is
  motivated by getting a different Mtype from the default.
  The default aperture isn’t an actual baselimit aperture; it is just the
  address space that doesn’t hit any defined baselimit apertures.
  The following diagram is a complete picture of the gfxip7.x SUA apertures.
  The APE1 can be placed either below or above
  the hole (cannot be in the hole).
  General Aperture definitions and rules
  An aperture register definition consists of a Base, Limit, Mtype, and
  usually an ATC bit indicating which translation tables that aperture uses.
  In all cases (for SUA and DUA apertures discussed later), aperture base
  and limit definitions are 64KB aligned.
 	<ape>_Base[63:0] = { <ape>_Base_register[63:16], 0x0000 }
 	<ape>_Limit[63:0] = { <ape>_Limit_register[63:16], 0xFFFF }
  The base and limit are considered inclusive to an aperture so being
  inside an aperture means (address >= Base) AND (address <= Limit).
  In no case is a payload that straddles multiple apertures expected to work.
  For example a load_dword_x4 that starts in one aperture and ends in another,
  does not work.  For the vector FLAT_ ops we have detection capability in
  the shader for reporting a “memory violation” back to the
  SQ block for use in traps.
  A memory violation results when an op falls into the hole,
  or a payload straddles multiple apertures.  The S_LOAD instruction
  does not have this detection.
  Apertures cannot overlap.
  HSA32 - ATCIOMMU 32b
  For HSA32 mode, the pointers are interpreted as 32 bits and use a single GPR
  instead of two for the S_LOAD and FLAT_ ops. The entire GPUVM space of 40b
  will not fit so there is only partial visibility to the GPUVM
  space (defined by the aperture) for S_LOAD and FLAT_ ops.
  There is no spare (APE1) aperture for HSA32 mode.
  GPUVM 64b mode (driver model)
  This mode is related to HSA64 in that the difference really is that
  the default aperture is GPUVM (ATC==0) and not ATC space.
  We have gfxip7.x hardware that has FLAT_ and S_LOAD support for
  SUA GPUVM mode, but does not support HSA32HSA64.
  Device Unified Address - DUA
  Device unified address (DUA) is the name of the feature that maps the
  Shared(LDS) memory and Private(Scratch) memory into the overall address
  space for use by the new FLAT_ vector memory ops.  The Shared and
  Private memories are mapped as apertures into the address space,
  and the hardware detects when a FLAT_ memory request is to be redirected
  to the LDS or Scratch memory when it falls into one of these apertures.
  Like the SUA apertures, the SharedPrivate apertures are 64KB aligned and
  the baselimit is “in” the aperture. For both HSA64 and GPUVM SUA modes,
  the SharedPrivate apertures are always placed in a limited selection of
  options in the hole of the 64b address space. For HSA32 mode, the
  SharedPrivate apertures can be placed anywhere in the 32b space
  except at 0.
  HSA64 Apertures for FLAT_ vector ops
  For HSA64 SUA mode, the Shared and Private apertures are always placed
  in the hole w a limited selection of possible locations. The requests
  that fall in the private aperture are expanded as a function of the
  work-item id (tid) and redirected to the location of the
  “hidden private memory”. The hidden private can be placed in either GPUVM
  or ATC space. The addresses that fall in the shared aperture are
  re-directed to the on-chip LDS memory hardware.
  HSA32 Apertures for FLAT_ vector ops
  In HSA32 mode, the Private and Shared apertures can be placed anywhere
  in the 32b space except at 0 (Private or Shared Base at zero disables
  the apertures). If the base address of the apertures are non-zero
  (ie apertures exists), the size is always 64KB.
  GPUVM Apertures for FLAT_ vector ops
  In GPUVM mode, the SharedPrivate apertures are specified identically
  to HSA64 mode where they are always in the hole at a limited selection
  of locations.
  Aperture Definitions for SUA and DUA
  The interpretation of the aperture register definitions for a given
  VMID is a function of the “SUA Mode” which is one of HSA64, HSA32, or
  GPUVM64 discussed in previous sections. The mode is first decoded, and
  then the remaining register decode is a function of the mode.
  SUA Mode Decode
  For the S_LOAD and FLAT_ shader operations, the SUA mode is decoded from
  the COMPUTE_DISPATCH_INITIATOR:DATA_ATC bit and
  the SH_MEM_CONFIG:PTR32 bits.
  COMPUTE_DISPATCH_INITIATOR:DATA_ATC    SH_MEM_CONFIG:PTR32        Mode
  1                                              0                  HSA64
  1                                              1                  HSA32
  0                                              X                 GPUVM64
  In general the hardware will ignore the PTR32 bit and treat
  as “0” whenever DATA_ATC = “0”, but sw should set PTR32=0
  when DATA_ATC=0.
  The DATA_ATC bit is only set for compute dispatches.
  All “Draw” dispatches are hardcoded to GPUVM64 mode
  for FLAT_  S_LOAD operations.
 On GFXv9 the LDS and scratch apertures are programmed independently
  using the high 16 bits of the 64-bit virtual address. They must be
  in the hole, which will be the case as long as the high 16 bits are
  not 0.
  The aperture sizes are still 4GB implicitly.
  A GPUVM aperture is not applicable on GFXv9.
 User mode manages most of the SVM aperture address space. The low
  16MB are reserved for kernel use (CWSR trap handler and kernel IB
  for now).
	
	  node id couldn't be 0 - the three MSB bits of
	  aperture shouldn't be 0
		 dGPUs: SVM aperture starting at 0
		  with small reserved space for kernel.
		  Set them to CANONICAL addresses.
		 set them to non CANONICAL addresses, and no SVM is
		  allocated.
	 Raven needs SVM to support graphic handle, etc. Leave the small
	  reserved space before SVM on Raven as well, even though we don't
	  have to.
	  Set gpuvm_base and gpuvm_limit to CANONICAL addresses so that they
	  are used in Thunk to reserve SVM.
Iterating over all devices
			 Skip non GPU devices and devices to which the
			  current process have no access to. Access can be
			  limited by placing the process in a specific
			  cgroup hierarchy
		
		  For 64 bit process apertures will be statically reserved in
		  the x86_64 non canonical process address space
		  amdkfd doesn't currently support apertures for 32 bit process
				 dGPUs: the reserved space for kernel
				  before SVM
 SPDX-License-Identifier: GPL-2.0 OR MIT
  Copyright 2020-2021 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 Long enough to ensure no retry fault comes after svm range is restored and
  page table is updated.
  svm_range_unlink - unlink svm_range from lists and interval tree
  @prange: svm range structure to be removed
  Remove the svm_range from the svms and svm_bo lists and the svms
  interval tree.
  Context: The caller must hold svms->lock
  svm_range_add_to_svms - add svm range to svms
  @prange: svm range structure to be added
  Add the svm range to svms interval tree and link list
  Context: The caller must hold svms->lock
		 list_del_init tells a concurrent svm_range_vram_node_new when
		  it's safe to reuse the svm_bo pointer and svm_bo_list head.
		 We're not in the eviction worker.
		  Signal the fence and synchronize with any
		  pending eviction work.
 We still have a reference, all is well 
		
		  Migrate from GPU to GPU, remove range from source bo_adev
		  svm_bo range list, and return false to allocate svm_bo from
		  destination adev.
			 The BO is getting evicted,
			  we need to get a new one
			 wait for the fence to avoid long spin-loop
			  at list_empty_careful
			 The BO was still around and we got
			  a new reference to it
	 We need a new svm_bo. Spin-loop to wait for concurrent
	  svm_range_bo_release to finish removing this range from
	  its range list. After this, it is safe to reuse the
	  svm_bo pointer and svm_bo_list head.
  svm_range_debug_dump - print all range information from svms
  @svms: svm range list header
  debug output svm range start, end, prefetch location from svms
  interval tree and link list
  Context: The caller must hold svms->lock
  svm_range_split_adjust - split range and adjust
  @new: new range
  @old: the old range
  @start: the old range adjust to start address in pages
  @last: the old range adjust to last address in pages
  Copy system memory dma_addr or vram ttm_res in old range to new
  range from new_start up to size new->npages, the remaining old range is from
  start to last
  Return:
  0 - OK, -ENOMEM - out of memory
  svm_range_split - split a range in 2 ranges
  @prange: the svm range to split
  @start: the remaining range start address in pages
  @last: the remaining range last address in pages
  @new: the result new range generated
  Two cases only:
  case 1: if start == prange->start
          prange ==> prange[start, last]
          new range [last + 1, prange->last]
  case 2: if last == prange->last
          prange ==> prange[start, last]
          new range [prange->start, start - 1]
  Return:
  0 - OK, -ENOMEM - out of memory, -EINVAL - invalid start, last
  svm_range_split_by_granularity - collect ranges within granularity boundary
  @p: the process with svms list
  @mm: mm structure
  @addr: the vm fault address in pages, to split the prange
  @parent: parent range if prange is from child list
  @prange: prange to split
  Trims @prange to be a single aligned block of prange->granularity if
  possible. The head and tail are added to the child_list in @parent.
  Context: caller must hold mmap_read_lock and prange->lock
  Return:
  0 - OK, otherwise error code
	 Align splited range start and size to granularity size, then a single
	  PTE will be used for whole range, this reduces the number of PTE
	  updated and the L1 TLB space used for translation.
 xnack on, update mapping on GPUs with ACCESS_IN_PLACE 
		 Collect all pages in the same address range and memory domain
		  that can be mapped with a single call to update mapping.
  Validation+GPU mapping with concurrent invalidation (MMU notifiers)
  To prevent concurrent destruction or change of range attributes, the
  svm_read_lock must be held. The caller must not hold the svm_write_lock
  because that would block concurrent evictions and lead to deadlocks. To
  serialize concurrent migrations or validations of the same range, the
  prange->migrate_mutex must be held.
  For VRAM ranges, the SVM BO must be allocated and valid (protected by its
  eviction fence.
  The following sequence ensures race-free validation and GPU mapping:
  1. Reserve page table (and SVM BO if range is in VRAM)
  2. hmm_range_fault to get page addresses (if system memory)
  3. DMA-map pages (if system memory)
  4-a. Take notifier lock
  4-b. Check that pages still valid (mmu_interval_read_retry)
  4-c. Check that the range was not split or otherwise invalidated
  4-d. Update GPU page table
  4.e. Release notifier lock
  5. Release page table (and SVM BO) reservation
		 If prefetch range to GPU, or GPU retry fault migrate range to
		  GPU, which has ACCESS attribute to the range, create mapping
		  on that GPU.
		 This should never happen. actual_loc gets set by
		  svm_migrate_ram_to_vram after allocating a BO.
  svm_range_list_lock_and_flush_work - flush pending deferred work
  @svms: the svm range list
  @mm: the mm structure
  Context: Returns with mmap write lock held, pending deferred work flushed
	 kfd_process_notifier_release destroys this worker thread. So during
	  the lifetime of this thread, kfd_process and mm will be valid.
		
		  If range is migrating, wait for migration is done.
		 No recovery from this failure. Probably the CP is
		  hanging. No point trying again.
 If validation failed, reschedule another attempt 
  svm_range_evict - evict svm range
  Stop all queues of the process to ensure GPU doesn't access the memory, then
  return to let CPU evict the buffer and proceed CPU pagetable update.
  Don't need use lock to sync cpu pagetable invalidation with GPU execution.
  If invalidation happens while restore work is running, restore work will
  restart to ensure to get the latest CPU pages mapping to GPU, then start
  the queues.
 First eviction, stop the queues 
  svm_range_handle_overlap - split overlap ranges
  @svms: svm range list header
  @new: range added with this attributes
  @start: range added start address, in pages
  @last: range last address, in pages
  @update_list: output, the ranges attributes are updated. For set_attr, this
                will do validation and map to GPUs. For unmap, this will be
                removed and unmap from GPUs
  @insert_list: output, the ranges will be inserted into svms, attributes are
                not changes. For set_attr, this will add into svms.
  @remove_list:output, the ranges will be removed from svms
  @left: the remaining range after overlap, For set_attr, this will be added
         as new range.
  Total have 5 overlap cases.
  This function handles overlap of an address interval with existing
  struct svm_ranges for applying new attributes. This may require
  splitting existing struct svm_ranges. All changes should be applied to
  the range_list and interval tree transactionally. If any split operation
  fails, the entire update fails. Therefore the existing overlapping
  svm_ranges are cloned and the original svm_ranges left unchanged. If the
  transaction succeeds, the modified clones are added and the originals
  freed. Otherwise the clones are removed and the old svm_ranges remain.
  Context: The caller must hold svms->lock
 node intersects the updated range, clone+split it 
			 The node is contained within start..last,
			  just update it
 insert a new node if needed 
 TODO: implement deferred validation and mapping 
 TODO: implement deferred validation and mapping 
		 Checking for the need to drain retry faults must be in
		  mmap write lock to serialize with munmap notifiers.
		 
		  Remove from deferred_list must be inside mmap write lock,
		  otherwise, svm_range_list_lock_and_flush_work may hold mmap
		  write lock, and continue because deferred_list is empty, then
		  deferred_list handle is blocked by mmap write lock.
	 Make sure pending page faults are drained in the deferred worker
	  before the range is freed to avoid straggler interrupts on
	  unmapped memory causing "phantom faults".
 if prange is on the deferred list 
  svm_range_cpu_invalidate_pagetables - interval notifier callback
  If event is MMU_NOTIFY_UNMAP, this is from CPU unmap range, otherwise, it
  is from migration, or CPU page invalidation callback.
  For unmap event, unmap range from GPUs, remove prange from svms in a delayed
  work thread, and split prange if only part of prange is unmapped.
  For invalidation event, if GPU retry fault is not enabled, evict the queues,
  then schedule svm_range_restore_work to update GPU mapping and resume queues.
  If GPU retry fault is enabled, unmap the svm range from GPU, retry fault will
  update GPU mapping to recover.
  Context: mmap lock, notifier_invalidate_start lock are held
           for invalidate event, prange lock is held if this is from migration
  svm_range_from_addr - find svm range from fault address
  @svms: svm range list header
  @addr: address to search range interval tree, in pages
  @parent: parent range if range is on child list
  Context: The caller must hold svms->lock
  Return: the svm_range found or NULL
 svm_range_best_restore_location - decide the best fault restore location
  @prange: svm range structure
  @adev: the GPU on which vm fault happened
  This is only called when xnack is on, to decide the best location to restore
  the range mapping after GPU vm fault. Caller uses the best location to do
  migration if actual loc is not best location, then update GPU page table
  mapping to the best location.
  If the preferred loc is accessible by faulting GPU, use preferred loc.
  If vm fault gpu idx is on range ACCESSIBLE bitmap, best_loc is vm fault gpu
  If vm fault gpu idx is on range ACCESSIBLE_IN_PLACE bitmap, then
     if range actual loc is cpu, best_loc is cpu
     if vm fault gpu is on xgmi same hive of range actual loc gpu, best_loc is
     range actual loc.
  Otherwise, GPU no access, best_loc is -1.
  Return:
  -1 means vm fault GPU no access
  0 for CPU or GPU id
 fall through 
 First range that starts after the fault address 
 Last range that ends before the fault address 
		 Last range must end before addr because
		  there was no range after addr
 Check userptr by searching entire vm->va interval tree 
 Create one page svm range if 2MB range overlapping 
 svm_range_skip_recover - decide if prange can be recovered
  @prange: svm range structure
  GPU vm retry fault handle skip recover the range for cases:
  1. prange is on deferred list to be removed after unmap, it is stale fault,
     deferred list work will drain the stale fault before free the prange.
  2. prange is on deferred list to add interval notifier after split, or
  3. prange is child range, it is split from parent prange, recover later
     after interval notifier is added.
  Return: true to skip recover, false to recover
	 fault is on different page of same range
	  or fault is skipped to recover later
	  or fault is on invalid virtual address
	 fault is recovered
	  or fault cannot recover because GPU no access on the range
			 Need the write lock to create new range with MMU notifier.
			  Also flush pending deferred work to make sure the interval
			  tree is up to date before we add a new range
 skip duplicate vm fault on different pages of same range 
				 Fallback to system memory if migration to
				  VRAM failed
 Ensure list work is finished before process is destroyed 
  svm_range_check_vm - check if virtual address range mapped already
  @p: current kfd_process
  @start: range start address, in pages
  @last: range last address, in pages
  @bo_s: mapping start address in pages if address range already mapped
  @bo_l: mapping last address in pages if address range already mapped
  The purpose is to avoid virtual address ranges already allocated by
  kfd_ioctl_alloc_memory_of_gpu ioctl.
  It looks for each pdd in the kfd_process.
  Context: Process context
  Return 0 - OK, if the range is not mapped.
  Otherwise error code:
  -EADDRINUSE - if address is mapped already by kfd_ioctl_alloc_memory_of_gpu
  -ERESTARTSYS - A wait for the buffer to become unreserved was interrupted by
  a signal. Release all buffer reservations and return to user-space.
  svm_range_is_valid - check if virtual address range is valid
  @p: current kfd_process
  @start: range start address, in pages
  @size: range size, in pages
  Valid virtual address range means it belongs to one or more VMAs
  Context: Process context
  Return:
   0 - OK, otherwise error code
  svm_range_add - add svm range and handle overlap
  @p: the range add to this process svms
  @start: page size aligned
  @size: page size aligned
  @nattr: number of attributes
  @attrs: array of attributes
  @update_list: output, the ranges need validate and update GPU mapping
  @insert_list: output, the ranges need insert to svms
  @remove_list: output, the ranges are replaced and need remove from svms
  Check if the virtual address range has overlap with the registered ranges,
  split the overlapped range, copy and adjust pages address and vram nodes in
  old and new ranges.
  Context: Process context, caller must hold svms->lock
  Return:
  0 - OK, otherwise error code
  svm_range_best_prefetch_location - decide the best prefetch location
  @prange: svm range structure
  For xnack off:
  If range map to single GPU, the best prefetch location is prefetch_loc, which
  can be CPU or GPU.
  If range is ACCESS or ACCESS_IN_PLACE by mGPUs, only if mGPU connection on
  XGMI same hive, the best prefetch location is prefetch_loc GPU, othervise
  the best prefetch location is always CPU, because GPU can not have coherent
  mapping VRAM of other GPUs even with large-BAR PCIe connection.
  For xnack on:
  If range is not ACCESS_IN_PLACE by mGPUs, the best prefetch location is
  prefetch_loc, other GPU access will generate vm fault and trigger migration.
  If range is ACCESS_IN_PLACE by mGPUs, only if mGPU connection on XGMI same
  hive, the best prefetch location is prefetch_loc GPU, otherwise the best
  prefetch location is always CPU.
  Context: Process context
  Return:
  0 for CPU or GPU id
 FIXME: This is a workaround for page locking bug when some pages are
  invalid during migration to VRAM
 svm_range_trigger_migration - start page migration if prefetch loc changed
  @mm: current process mm_struct
  @prange: svm range structure
  @migrated: output, true if migration is triggered
  If range perfetch_loc is GPU, actual loc is cpu 0, then migrate the range
  from ram to vram.
  If range prefetch_loc is cpu 0, actual loc is GPU, then migrate the range
  from vram to ram.
  If GPU vm fault retry is not enabled, migration interact with MMU notifier
  and restore work:
  1. migrate_vma_setup invalidate pages, MMU notifier callback svm_range_evict
     stops all queues, schedule restore work
  2. svm_range_restore_work wait for migration is done by
     a. svm_range_validate_vram takes prange->migrate_mutex
     b. svm_range_validate_ram HMM get pages wait for CPU fault handle returns
  3. restore work update mappings of GPU, resume all queues.
  Context: Process context
  Return:
  0 - OK, otherwise - error code of migration
 svm_bo was freed while eviction was pending 
	 svm_range_bo_release destroys this worker thread. So during
	  the lifetime of this thread, kfd_process and mm will be valid.
	 This is the last reference to svm_bo, after svm_range_vram_node_free
	  has been called in svm_migrate_vram_to_ram
 Add new range and split existing ranges as needed 
 Apply changes as a transaction 
 TODO: unmap ranges from GPU that lost access 
	 Trigger migrations and revalidate and map to GPUs as needed. If
	  this fails we may be left with partially completed actions. There
	  is no clean way of rolling back to the previous state in such a
	  case because the rollback wouldn't be guaranteed to work either.
	 Flush pending deferred work to avoid racing with deferred actions from
	  previous memory map changes (e.g. munmap). Concurrent memory map changes
	  can still race with get_attr because we don't hold the mmap lock. But that
	  would be a race condition in the application anyway, and undefined
	  behaviour is acceptable in that case.
  Copyright 2018 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 4 is the max # of SEs 
 AQL write pointer counts in 64B packets, PM4CP counts in dwords. 
	
	  HW does not clamp this field correctly. Maximum EOP queue size
	  is constrained by per-SE EOP done signal count, which is 8-bit.
	  Limit is 0xFF EOP entries (= 0x7F8 dwords). CP will not submit
	  more than (EOP entry count - 1) so a queue size of 0x800 dwords
	  is safe, giving a maximum field value of 0xA.
 GC 10 removed WPP_CLAMP from PQ Control 
	 Control stack is written backwards, while workgroup context data
	  is written forwards. Both starts from m->cp_hqd_cntl_stack_size.
	  Current position is at m->cp_hqd_cntl_stack_offset and
	  m->cp_hqd_wg_state_offset, respectively.
	 Control stack is not copied to user mode for GFXv10 because
	  it's part of the context save area that is already
	  accessible to user mode
    preempt type here is ignored because there is only one way
    to preempt sdma queue
  Copyright 2014 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  This extension supports a kernel level doorbells management for the
  kernel queues using the first doorbell page reserved for the kernel.
  Each device exposes a doorbell aperture, a PCI MMIO aperture that
  receives 32-bit writes that are passed to queues as wptr values.
  The doorbells are intended to be written by applications as part
  of queueing work on user-mode queues.
  We assign doorbells to applications in PAGE_SIZE-sized and aligned chunks.
  We map the doorbell address space into user-mode when a process creates
  its first queue on each device.
  Although the mapping is done by KFD, it is equivalent to an mmap of
  the devkfd with the particular device encoded in the mmap offset.
  There will be other uses for mmap of devkfd, so only a range of
  offsets (KFD_MMAP_DOORBELL_START-END) is used for doorbells.
 # of doorbell bytes allocated for each process. 
 Doorbell calculations for device init. 
	
	  We start with calculations in bytes because the input data might
	  only be byte-aligned.
	  Only after we have done the rounding can we assume any alignment.
	
	  For simplicitly we only allow mapping of the entire doorbell
	  allocation of a single device & process.
 Calculate physical address of doorbell 
 get kernel iomem pointer for a doorbell 
	
	  Calculating the kernel doorbell offset using the first
	  doorbell page.
	
	  doorbell_base_dw_offset accounts for doorbells taken by KGD.
	  index  kfd_doorbell_process_slicesizeof(u32) adjusts to
	  the process's doorbells. The offset returned is in dword
	  units regardless of the ASIC-dependent doorbell size.
  Copyright 2014 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 Only allow one queue per process can have GWS assigned 
 Doorbell initialized in user space
 let DQM handle it
 HWS limit 
	
	  for debug process, verify that it is within the static queues limit
	  currently limit is set to half of the total avail HQD slots
	  If we are just about to create DIQ, the is_debug flag is not set yet
	  Hence we also check the type as well
		 SDMA queues are always allocated statically no matter
		  which scheduler mode is used. We also do not need to
		  check whether a SDMA queue can be allocated here, because
		  allocate_sdma_queue() in create_queue() has the
		  corresponding check logic.
 check if there is over subscription 
		 Return the doorbell offset within the doorbell page
		  to the caller so it can be passed up to user mode
		  (in bytes).
		  There are always 1024 doorbells per process, so in case
		  of 8-byte doorbells, there are two doorbell pages per
		  process.
 check if queues list is empty unregister process from device 
 destroy kernel queue (DIQ) 
  Copyright 2014 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 Size of the per-pipe EOP queue 
 queue is available for KFD usage if bit is 1 
		 On pre-SOC15 chips we need to use the queue ID to
		  preserve the user mode ABI.
		 For SDMA queues on SOC15 with 8-byte doorbell, use static
		  doorbell assignments based on the engine and queue id.
		  The doobell index distance between RLC (2i) and (2i+1)
		  for a SDMA engine is 512.
 For CP queues on SOC15 reserve a free doorbell ID 
	 qpd->page_table_base is set earlier when register_process()
	  is called, i.e. when the first queue is created.
 invalidate the VM context after pasid and vmid mapping is set up 
 On GFX v7, CP doesn't flush TC at dequeue 
 Release the vmid mapping 
	
	  Eviction state logic: mark all queues as evicted, even ones
	  not currently active. Restoring inactive queues later only
	  updates the is_evicted flag but is a no-op otherwise.
 Temporarily release dqm lock to avoid a circular lock dependency 
	
	  Unconditionally increment this counter, regardless of the queue's
	  type or whether the queue is active.
 horizontal hqd allocation 
 Access to DQM has to be locked before calling destroy_queue_nocpsch_locked
  to avoid asynchronized access
			 dbgdev_wave_reset_wavefronts has to be called before
			  deallocate_vmid(), i.e. when vmid is still in use.
 Get the SDMA queue stats 
 Save previous activity state for counters 
 Make sure the queue is unmapped before updating the MQD 
	
	  check active state vs. the previous state and modify
	  counter accordingly. map_queues_cpsch uses the
	  dqm->active_queue_count to determine whether a new runlist must be
	  uploaded.
 already evicted, do nothing 
	 Mark all queues as evicted. Deactivate all active queues on
	  the qpd.
			 Return the first error, but keep going to
			  maintain a consistent eviction state
 already evicted, do nothing 
	 Mark all queues as evicted. Deactivate all active queues on
	  the qpd.
 Retrieve PD base 
 already restored, do nothing 
 ref count still > 0, decrement & quit 
 Update PD Base in QPD 
	 Take a safe reference to the mm_struct, which may otherwise
	  disappear even while the kfd_process is still referenced.
	 Remove the eviction flags. Activate queues that are not
	  inactive for other reasons.
			 Return the first error, but keep going to
			  maintain a consistent eviction state
 Retrieve PD base 
 already restored, do nothing 
 ref count still > 0, decrement & quit 
 Update PD Base in QPD 
 activate all active queues on the qpd 
 Retrieve PD base 
 Update PD Base in QPD 
	 Outside the DQM lock because under the DQM lock we can't do
	  reclaim or take other locks that others hold while reclaiming.
 qpd not found in dqm list 
	 Outside the DQM lock because under the DQM lock we can't do
	  reclaim or take other locks that others hold while reclaiming.
		 sdma_engine_id is sdma id including
		  both PCIe-optimized SDMAs and XGMI-
		  optimized SDMAs. The calculation below
		  assumes the first N engines are always
		  PCIe-optimized ones
  Device Queue Manager implementation for cp scheduler
 only acquire queues from the first MEC 
		 This situation may be hit in the future if a new HW
		  generation exposes more than 64 queues. If so, the
		  definition of res.queue_mask needs updating
 allocate fence memory on the gart 
 clear hang status when driver try to start the hw scheduler 
	
	  Unconditionally increment this counter, regardless of the queue's
	  type or whether the queue is active.
	
	  Unconditionally decrement this counter, regardless of the queue's
	  type.
	
	  Eviction state logic: mark all queues as evicted, even ones
	  not currently active. Restoring inactive queues later only
	  updates the is_evicted flag but is a no-op otherwise.
	
	  Unconditionally increment this counter, regardless of the queue's
	  type or whether the queue is active.
			 In HWS case, this is used to halt the driver thread
			  in order not to mess up CP states before doing
			  scandumps for FW debugging.
 dqm->lock mutex has to be locked before calling this function 
 dqm->lock mutex has to be locked before calling this function 
 should be timed out 
		 It's possible we're detecting a HWS hang in the
		  middle of a GPU reset. No need to schedule another
		  reset in this case.
	 In the current MEC firmware implementation, if compute queue
	  doesn't response to the preemption request in time, HIQ will
	  abandon the unmap request without returning any timeout error
	  to driver. Instead, MEC firmware will log the doorbell of the
	  unresponding compute queue to HIQ.MQD.queue_doorbell_id fields.
	  To make sure the queue unmap was successful, driver need to
	  check those fields
 dqm->lock mutex has to be locked before calling this function 
 Get the SDMA queue stats 
 remove queue from list to prevent rescheduling after preemption 
		
		  error, currently we do not allow to destroy a queue
		  of a currently debugged process
	
	  Unconditionally decrement this counter, regardless of the queue's
	  type
 Do free_mqd after dqm_unlock(dqm) to avoid circular locking 
  Low bits must be 0000FFFF as required by HW, high bits must be 0 to
  stay in user mode.
 APE1 limit is inclusive and 64K aligned. 
 base > limit disables APE1 
		
		  In FSA64, APE1_Base[63:0] = { 16{SH_MEM_APE1_BASE[31]},
		 			SH_MEM_APE1_BASE[31:0], 0x0000 }
		  APE1_Limit[63:0] = { 16{SH_MEM_APE1_LIMIT[31]},
		 			SH_MEM_APE1_LIMIT[31:0], 0xFFFF }
		  Verify that the base and size parameters can be
		  represented in this format and convert them.
		  Additionally restrict APE1 to user-mode addresses.
 Clear all user mode queues 
 Unregister process 
	 Outside the DQM lock because under the DQM lock we can't do
	  reclaim or take other locks that others hold while reclaiming.
	
	  get_wave_state is outside the dqm lock to prevent circular locking
	  and the queue should be protected against destruction by the process
	  lock.
 Clean all kernel queues 
 Clear all user mode queues 
 Unregister process 
	 Lastly, free mqd resources.
	  Do free_mqd() after dqm_unlock to avoid circular locking.
	 Outside the DQM lock because under the DQM lock we can't do
	  reclaim or take other locks that others hold while reclaiming.
 Allocate one hiq mqd (HWS) and all SDMA mqd in a continuous trunk
 HWS is not available on Hawaii. 
	 HWS depends on CWSR for timely dequeue. CWSR is not
	  available on Tonga.
	 
	  FIXME: This argument also applies to Kaveri.
 initialize dqm for cp scheduling 
 initialize dqm for no cp scheduling 
 SPDX-License-Identifier: GPL-2.0 OR MIT
  Copyright 2020-2021 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 use gart window 0 
  svm_migrate_copy_memory_gart - sdma copy data between ram and vram
  @adev: amdgpu device the sdma ring running
  @src: source page address array
  @dst: destination page address array
  @npages: number of pages to copy
  @direction: enum MIGRATION_COPY_DIR
  @mfence: output, sdma fence to signal after sdma is done
  ram address uses GART table continuous entries mapping to ram pages,
  vram address uses direct mapping of vram pages, which must have npages
  number of continuous pages.
  GART update and sdma uses same buf copy function ring, sdma is splited to
  multiple GTT_MAX_PAGES transfer, all sdma operations are serialized, wait for
  the last sdma finish fence which is returned to check copy memory is done.
  Context: Process context, takes and releases gtt_window_lock
  Return:
  0 - OK, otherwise error code
  svm_migrate_copy_done - wait for memory copy sdma is done
  @adev: amdgpu device the sdma memory copy is executing on
  @mfence: migrate fence
  Wait for dma fence is signaled, if the copy ssplit into multiple sdma
  operations, this is the last sdma operation fence.
  Context: called after svm_migrate_copy_memory
  Return:
  0		- success
  otherwise	- error code from dma fence signal
  svm_migrate_ram_to_vram - migrate svm range from system to device
  @prange: range structure
  @best_loc: the device to migrate to
  @mm: the process mm structure
  Context: Process context, caller hold mmap read lock, svms lock, prange lock
  Return:
  0 - OK, otherwise error code
 FIXME: workaround for page locking bug with invalid pages 
  svm_migrate_vram_to_ram - migrate svm range from device to system
  @prange: range structure
  @mm: process mm, use current->mm if NULL
  Context: Process context, caller hold mmap read lock, svms lock, prange lock
  Return:
  0 - OK, otherwise error code
  svm_migrate_vram_to_vram - migrate svm range from device to device
  @prange: range structure
  @best_loc: the device to migrate to
  @mm: process mm, use current->mm if NULL
  Context: Process context, caller hold mmap read lock, svms lock, prange lock
  Return:
  0 - OK, otherwise error code
	
	  TODO: for both devices with PCIe large bar or on same xgmi hive, skip
	  system memory as migration bridge
  svm_migrate_to_ram - CPU page fault handler
  @vmf: CPU vm fault vma, address
  Context: vm fault handler, caller holds the mmap read lock
  Return:
  0 - OK
  VM_FAULT_SIGBUS - notice application to have SIGBUS page fault
 xnack on, update mapping on GPUs with ACCESS_IN_PLACE 
 Each VRAM page uses sizeof(struct page) on system memory 
 Page migration works on Vega10 or newer 
	 TODO: register all vram to HMM for now.
	  should remove reserved size
	 Device manager releases device-specific resources, memory region and
	  pgmap when driver disconnects from device.
 Disable SVM support capability 
  Copyright 2014 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  KFD Interrupts.
  AMD GPUs deliver interrupts by pushing an interrupt description onto the
  interrupt ring and then sending an interrupt. KGD receives the interrupt
  in ISR and sends us a pointer to each new entry on the interrupt ring.
  We generally can't process interrupt-signaled events from ISR, so we call
  out to each interrupt client module (currently only the scheduler) to ask if
  each interrupt is interesting. If they return true, then it requires further
  processing so we copy it to an internal interrupt ring and call each
  interrupt client again from a work-queue.
  There's no acknowledgment for the interrupts we use. The hardware simply
  queues a new interrupt each time without waiting.
  The fixed-size internal queue means that it's possible for us to lose
  interrupts because we have no back-pressure to the hardware.
	
	  After this function returns, the interrupt will be enabled. This
	  barrier ensures that the interrupt running on a different processor
	  sees all the above writes.
	
	  Stop the interrupt handler from writing to the ring and scheduling
	  workqueue items. The spinlock ensures that any interrupt running
	  after we have unlocked sees interrupts_active = false.
	
	  flush_work ensures that there are no outstanding
	  work-queue items that will access interrupt_ring. New work items
	  can't be created because we stopped interrupt handling above.
  Assumption: single readerwriter. This function is not re-entrant
  Assumption: single readerwriter. This function is not re-entrant
 integer and bitwise OR so there is no boolean short-circuiting 
  Copyright 2016-2018 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 SQ_INTERRUPT_WORD_AUTO_CTXID 
 SQ_INTERRUPT_WORD_WAVE_CTXID 
 Only handle interrupts from KFD VMIDs 
 Only handle clients we care about 
	 This is a known issue for gfx9. Under non HWS, pasid is not set
	  in the interrupt payload, so we need to find out the pasid on our
	  own.
 Patch the pasid field 
 If there is no valid PASID, it's likely a bug 
	 Interrupt types we care about: various signals and faults.
	  They will be forwarded to a work queue (see below).
  Copyright 2014 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
	 Determine the number of processes to map together to HW:
	  it can not exceed the number of VMIDs available to the
	  scheduler, and it is determined by the smaller of the number
	  of processes in the runlist and kfd module parameter
	  hws_max_conc_proc.
	  Note: the arbitration between the number of VMIDs and
	  hws_max_conc_proc has been done in
	  kgd2kfd_device_init().
 no static queues under SDMA 
 in this case, we do not preempt static queues 
  Copyright 2014 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 get actual type of DBGDevice cpsch or not 
 remember pasid 
 provide the pqm for diq generation 
 activate the actual registering 
 Is the requests coming from the already registered process? 
 Is the requests coming from the already registered process? 
 Is the requests coming from the already registered process? 
  Copyright 2014 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 = false 
			 We've already allocated user PASIDs, too late to
			  change the limit
  Copyright 2016-2018 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 check if sh_mem_config register already configured 
			 Aldebaran can safely support different XNACK modes
			  per process
 Not needed on SDMAv4 any more 
  Copyright 2014 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Wrapper around wait_queue_entry_t
 Event to wait for 
 Becomes true when event is signaled 
  Each signal event needs a 64-bit signal slot where the signaler will write
  a 1 before sending an interrupt. (This is needed because some interrupts
  do not contain enough spare data bits to identify an event.)
  We get whole pages and map them to the process VA.
  Individual signal events use their event_id as slot index.
 Initialize all events to unsignaled 
 Oldest user mode expects 256 event slots 
	
	  Compatibility with old user mode: Only use signal slots
	  user mode has mapped, may be less than
	  KFD_SIGNAL_EVENT_LIMIT. This also allows future increase
	  of the event limit without breaking user mode.
  Assumes that p->event_mutex is held and of course that p is not going
  away (current or locked).
  lookup_signaled_event_by_partial_id - Lookup signaled event from partial ID
  @p:     Pointer to struct kfd_process
  @id:    ID to look up
  @bits:  Number of valid bits in @id
  Finds the first signaled event with a matching partial ID. If no
  matching signaled event is found, returns NULL. In that case the
  caller should assume that the partial ID is invalid and do an
  exhaustive search of all siglaned events.
  If multiple events with the same partial ID signal at the same
  time, they will be found one interrupt at a time, not necessarily
  in the same order the interrupts occurred. As long as the number of
  interrupts is correct, all signaled events will be seen by the
  driver.
	 Fast path for the common case that @id is not a partial ID
	  and we only need a single lookup.
	 General case for partial IDs: Iterate over all matching IDs
	  and find the first one that has signaled.
	 Cast KFD_LAST_NONSIGNAL_EVENT to uint32_t. This allows an
	  intentional integer overflow to -1 without a compiler
	  warning. idr_alloc treats a negative value as "maximum
	  signed integer".
 Wake up pending waiters. They will return failure 
  We assume that the process is being destroyed and there is no need to
  unmap the pages or keep bookkeeping data in order.
 Initialize all events to unsignaled 
 Assumes that p is current. 
	 Auto reset if the list is non-empty and we're waking
	  someone. waitqueue_active is safe here because we're
	  protected by the p->event_mutex, which is also held when
	  updating the wait queues in kfd_wait_on_events.
 Assumes that p is current. 
 Assumes that p is current. 
	
	  Because we are called from arbitrary context (workqueue) as opposed
	  to process context, kfd_process could attempt to exit while we are
	  running so the lookup function increments the process ref count.
 Presumably process exited. 
		
		  Partial ID lookup failed. Assume that the event ID
		  in the interrupt payload was invalid and do an
		  exhaustive search of signaled events.
			 With relatively few events, it's faster to
			  iterate over the event IDR
			 With relatively many events, it's faster to
			  iterate over the signal slots and lookup
			  only signaled events from the IDR.
	 Only add to the wait list if we actually need to
	  wait on this event.
 test_event_condition - Test condition of events being waited for
  @all:           Return completion only if all events have signaled
  @num_events:    Number of events to wait for
  @event_waiters: Array of event waiters, one per event
  Returns KFD_IOC_WAIT_RESULT_COMPLETE if all (or one) event(s) have
  signaled. Returns KFD_IOC_WAIT_RESULT_TIMEOUT if no (or not all)
  events have signaled. Returns KFD_IOC_WAIT_RESULT_FAIL if any of
  the events have been destroyed.
  Copy event specific data, if defined.
  Currently only memory exception events have additional data to copy to user
	
	  msecs_to_jiffies interprets all values above 2^31-1 as infinite,
	  but we consider them finite.
	  This hack is wrong, but nobody is likely to notice.
 Check condition once. 
		 This should not happen. Events shouldn't be
		  destroyed while we're holding the event_mutex
 Add to wait lists if we need to wait. 
			
			  This is wrong when a nonzero, non-infinite timeout
			  is specified. We need to use
			  ERESTARTSYS_RESTARTBLOCK, but struct restart_block
			  contains a union with data for each user and it's
			  in generic kernel code that I don't want to
			  touch yet.
		 Set task state to interruptible sleep before
		  checking wake-up conditions. A concurrent wake-up
		  will put the task back into runnable state. In that
		  case schedule_timeout will not put the task to
		  sleep and we'll get a chance to re-check the
		  updated conditions almost immediately. Otherwise,
		  this race condition would lead to a soft hang or a
		  very long sleep.
	 copy_signaled_event_data may sleep. So this has to happen
	  after the task state is set back to RUNNING.
 check required size doesn't exceed the allocated size 
 Probably KFD bug, but mmap is user-accessible. 
 mapping the page to user process 
  Assumes that p->event_mutex is held and of course
  that p is not going away (current or locked).
 Send SIGTERM no event of type "type" has been found
	
	  Because we are called from arbitrary context (workqueue) as opposed
	  to process context, kfd_process could attempt to exit while we are
	  running so the lookup function increments the process ref count.
 Presumably process exited. 
	 Take a safe reference to the mm_struct, which may otherwise
	  disappear even while the kfd_process is still referenced.
 Process is exiting 
 Set failure reason 
	 Workaround on Raven to not kill the process when memory is freed
	  before IOMMU is able to finish processing all the excessive PPRs
 Lookup events by type and signal them 
 KFD_SUPPORT_IOMMU_V2 
	
	  Because we are called from arbitrary context (workqueue) as opposed
	  to process context, kfd_process could attempt to exit while we are
	  running so the lookup function increments the process ref count.
 Presumably process exited. 
 Lookup events by type and signal them 
 Presumably process exited. 
 Set failure reason 
 Whole gpu reset caused by GPU hang and memory is lost 
 Presumably process exited. 
 user application will handle SIGBUS signal 
  Copyright 2014 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 4 is the max # of SEs 
	
	  Make sure to use the last queue state saved on mqd when the cp
	  reassigns the queue, so when queue is switched onoff (e.g over
	  subscription or quantum timeout) the context will be consistent
	
	  Pipe Priority
	  Identifies the pipe relative priority when this queue is connected
	  to the pipeline. The pipe priority is against the GFX pipe and HP3D.
	  In KFD we are using a fixed pipe priority set to CS_MEDIUM.
	  0 = CS_LOW (typically below GFX)
	  1 = CS_MEDIUM (typically between HP3D and GFX
	  2 = CS_HIGH (typically above HP3D)
 AQL write pointer counts in 64B packets, PM4CP counts in dwords. 
	
	  Calculating queue size which is log base 2 of actual queue size -1
	  dwords and another -1 for ffs
  preempt type here is ignored because there is only one way
  to preempt sdma queue
  HIQ MQD Implementation, concrete implementation for HIQ MQD implementation.
  The HIQ queue in Kaveri is using the same MQD structure as all the user mode
  queues but with different initial values.
	
	  Calculating queue size which is log base 2 of actual queue
	  size -1 dwords
  Copyright 2014 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  kfd_locked is used to lock the kfd driver during suspend or reset
  once locked, kfd driver will stop any further GPU execution.
  create process (open) will return -EAGAIN.
 max num of queues for KV.TODO should be a dynamic value 
 max num of queues for CZ.TODO should be a dynamic value 
 max num of queues for KV.TODO should be a dynamic value 
	 Allow BIF to recode atomics to PCIe 3.0 AtomicOps.
	  32 and 64-bit requests are possible and must be
	  supported.
 Verify module parameters regarding mapped process number
 calculate max size of mqds needed for queues 
	
	  calculate max size of runlist packet.
	  There can be only 2 packets at once
 Add size of HIQ & DIQ 
 add another 512KB for all other allocations on gart (HPD, fences) 
 Initialize GTT sa with 512 byte chunk size 
	 If supported on this device, allocate global GWS that is shared
	  by all KFD processes
 If CRAT is broken, won't set iommu enabled 
  Fix me. KFD won't be able to resume existing process for now.
  We will keep all existing process in a evicted state and
  wait the process to be terminated.
 for runtime suspend, skip locking kfd 
 For first KFD device suspend all the KFD processes 
 for runtime resume, skip unlocking kfd 
 This is called directly from KGD at ISR. 
	 Because we are called from arbitrary context (workqueue) as opposed
	  to process context, kfd_process could attempt to exit while we are
	  running so the lookup function increments the process ref count.
	 Because we are called from arbitrary context (workqueue) as opposed
	  to process context, kfd_process could attempt to exit while we are
	  running so the lookup function increments the process ref count.
 kgd2kfd_schedule_evict_and_restore_process - Schedules work queue that will
    prepare for safe eviction of KFD BOs that belong to the specified
    process.
  @mm: mm_struct that identifies the specified KFD process
  @fence: eviction fence attached to KFD process BOs
	 Avoid KFD process starvation. Wait for at least
	  PROCESS_ACTIVE_TIME_MS before evicting the process again
	 During process initialization eviction_work.dwork is initialized
	  to kfd_evict_bo_worker
 Find the first chunk that is free 
 If there wasn't any free chunk, bail out 
 Update fields of mem_obj 
 If we need only one chunk, mark it as allocated and get out 
 Otherwise, try to see if we have enough contiguous chunks 
		
		  If next free chunk is not contiguous than we need to
		  restart our search from the last free chunk we found (which
		  wasn't contiguous to the previous ones
		
		  If we reached end of buffer, bail out with error
 Check if we don't need another chunk 
 Mark the chunks as allocated 
 Act like kfree when trying to free a NULL object 
 Mark the chunks as free 
 This function will send a package to HIQ to hang the HWS
  which will trigger a GPU reset and bring the HWS back to normal state
  Copyright 2020 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 events enabled 
	 kfifo_to_user can sleep so we can't use spinlock protection around
	  it. Instead, we kfifo out as spinlocked then copy them to the user.
	
	  GpuReset msg = Reset seq number (incremented for
	  every reset message sent before GPU reset).
	  1 byte event + 1 byte space + 8 bytes seq num +
	  1 byte \n + 1 byte \0 = 12
	
	  ThermalThrottle msg = throttle_bitmask(8):
	  			 thermal_interrupt_count(16):
	  1 byte event + 1 byte space + 16 byte throttle_bitmask +
	  1 byte : + 16 byte thermal_interupt_counter + 1 byte \n +
	  1 byte \0 = 37
 VmFault msg = (hex)uint32_pid(8) + :(1) + task name(16) = 25 
	 1 byte event + 1 byte space + 25 bytes msg + 1 byte \n +
	  1 byte \0 = 29
 Report VM faults from user applications, not retry from kernel 
  Copyright 2014 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
	 In 64-bit mode, we can only control the top 3 bits of the LDS,
	  scratch and GPUVM apertures.
	  The hardware fills in the remaining 59 bits according to the
	  following pattern:
	  LDS:		X0000000'00000000 - X0000001'00000000 (4GB)
	  Scratch:	X0000001'00000000 - X0000002'00000000 (4GB)
	  GPUVM:	Y0010000'00000000 - Y0020000'00000000 (1TB)
	 
	  (where XY is the configurable nybble with the low-bit 0)
	 
	  LDS and scratch will have the same top nybble programmed in the
	  top 3 bits of SH_MEM_BASES.PRIVATE_BASE.
	  GPUVM can have a different top nybble programmed in the
	  top 3 bits of SH_MEM_BASES.SHARED_BASE.
	  We don't bother to support different top nybbles
	  for LDSScratch and GPUVM.
 check if sh_mem_config register already configured 
 check if sh_mem_config register already configured 
	 On dGPU we're always in GPUVM64 addressing mode with 64-bit
	  aperture addresses.
	 On dGPU we're always in GPUVM64 addressing mode with 64-bit
	  aperture addresses.
  Copyright 2014 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
	 This workaround is due to HWFW limitation on Hawaii that
	  VMID and PASID are not written into ih_ring_entry
 Only handle interrupts from KFD VMIDs 
 If there is no valid PASID, it's likely a firmware bug 
	 Interrupt types we care about: various signals and faults.
	  They will be forwarded to a work queue (see below).
  Copyright 2018 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 kfd_iommu_check_device - Check whether IOMMU is available for device
 kfd_iommu_device_init - Initialize IOMMU for device
 kfd_iommu_bind_process_to_device - Have the IOMMU bind a process
  Binds the given process to the given device using its PASID. This
  enables IOMMUv2 address translation for the process on the device.
  This function assumes that the process mutex is held.
 kfd_iommu_unbind_process - Unbind process from all devices
  This removes all IOMMU device bindings of the process. To be used
  before process termination.
 Callback for process shutdown invoked by the IOMMU driver 
	
	  Look for the process that matches the pasid. If there is no such
	  process, we either released it in amdkfd's own notifier, or there
	  is a bug. Unfortunately, there is no way to tell...
		 For GPU relying on IOMMU, we need to dequeue here
		  when PASID is still bound.
 This function called by IOMMU driver on PPR failure 
  Bind processes do the device that have been temporarily unbound
  (PDD_BOUND_SUSPENDED) in kfd_unbind_processes_from_device.
  Mark currently bound processes as PDD_BOUND_SUSPENDED. These
  processes will be restored to PDD_BOUND state in
  kfd_bind_processes_to_device.
 kfd_iommu_suspend - Prepare IOMMU for suspend
  This unbinds processes from the device and disables the IOMMU for
  the device.
 kfd_iommu_resume - Restore IOMMU after resume
  This reinitializes the IOMMU for the device and re-binds previously
  suspended processes to the device.
 kfd_iommu_add_perf_counters - Add IOMMU performance counters to topology
 assume one iommu 
  Copyright 2016-2018 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
	 For V9 only, due to a HW bug, the control stack of a user mode
	  compute queue needs to be allocated just behind the page boundary
	  of its regular MQD buffer. So we allocate an enlarged MQD buffer:
	  the first page of the buffer serves as the regular MQD buffer
	  purpose and the remaining is for control stack. Although the two
	  parts are in the same buffer object, they need different memory
	  types: MQD part needs UC (uncached) as usual, while control stack
	  needs NC (non coherent), which is different from the UC type which
	  is used when control stack is allocated in user space.
	 
	  Because of all those, we use the gtt allocation function instead
	  of sub-allocation function for this enlarged MQD buffer. Moreover,
	  in order to achieve two memory types in a single buffer object, we
	  pass a special bo flag AMDGPU_GEM_CREATE_CP_MQD_GFX9 to instruct
	  amdgpu memory functions to do so.
 AQL write pointer counts in 64B packets, PM4CP counts in dwords. 
	
	  HW does not clamp this field correctly. Maximum EOP queue size
	  is constrained by per-SE EOP done signal count, which is 8-bit.
	  Limit is 0xFF EOP entries (= 0x7F8 dwords). CP will not submit
	  more than (EOP entry count - 1) so a queue size of 0x800 dwords
	  is safe, giving a maximum field value of 0xA.
 Control stack is located one page after MQD. 
    preempt type here is ignored because there is only one way
    to preempt sdma queue
  Copyright 2013 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: Christian König <christian.koenig@amd.com>
  uvd_v4_2_ring_get_rptr - get read pointer
  @ring: amdgpu_ring pointer
  Returns the current hardware read pointer
  uvd_v4_2_ring_get_wptr - get write pointer
  @ring: amdgpu_ring pointer
  Returns the current hardware write pointer
  uvd_v4_2_ring_set_wptr - set write pointer
  @ring: amdgpu_ring pointer
  Commits the write pointer to the hardware
 UVD TRAP 
  uvd_v4_2_hw_init - start and test UVD block
  @handle: handle used to pass amdgpu_device pointer
  Initialize the hardware, boot up the VCPU and do some testing
 Clear timeout status bits 
  uvd_v4_2_hw_fini - stop the hardware block
  @handle: handle used to pass amdgpu_device pointer
  Stop the UVD block, mark ring as not ready any more
	
	  Proper cleanups before halting the HW engine:
	    - cancel the delayed idle work
	    - enable powergating
	    - enable clockgating
	    - disable dpm
	 
	  TODO: to align with the VCN implementation, move the
	  jobs for clockgatingpowergatingdpm setting to
	  ->set_powergating_state().
 shutdown the UVD block 
  uvd_v4_2_start - start UVD block
  @adev: amdgpu_device pointer
  Setup and start the UVD block
 disable byte swapping 
 set uvd busy 
 take UVD block out of reset 
 enable VCPU clock 
 disable interupt 
 swap (8 in 32) RB and IB 
 initialize UVD memory controller 
 enable UMC 
 enable interupt 
 force RBC into idle state 
 Set the write pointer delay 
 program the 4GB memory segment for rptr and ring buffer 
 Initialize the ring buffer's read and write pointers 
 set the ring address 
 Set ring buffer size 
  uvd_v4_2_stop - stop UVD block
  @adev: amdgpu_device pointer
  stop the UVD block
 Stall UMC and register bus before resetting VCPU 
 put LMI, VCPU, RBC etc... into reset 
  uvd_v4_2_ring_emit_fence - emit an fence & trap command
  @ring: amdgpu_ring pointer
  @addr: address
  @seq: sequence number
  @flags: fence related flags
  Write a fence and a trap command to the ring.
  uvd_v4_2_ring_test_ring - register write test
  @ring: amdgpu_ring pointer
  Test if we can successfully write to the context register
  uvd_v4_2_ring_emit_ib - execute indirect buffer
  @ring: amdgpu_ring pointer
  @job: iob associated with the indirect buffer
  @ib: indirect buffer to execute
  @flags: flags associated with the indirect buffer
  Write ring commands to execute the indirect buffer
  uvd_v4_2_mc_resume - memory controller programming
  @adev: amdgpu_device pointer
  Let the UVD memory controller know it's offsets
 program the VCPU memory controller bits 0-27 
 bits 28-31 
 bits 32-39 
 TODO
	 This doesn't actually powergate the UVD block.
	  That's done in the dpm code via the SMC.  This
	  just re-inits the block as necessary.  The actual
	  gating still happens in the dpm code.  We should
	  revisit this when there is a cleaner line between
	  the smc and the hw blocks
 uvd_v4_2_ring_emit_fence  x1 no user fence 
 uvd_v4_2_ring_emit_ib 
  Copyright 2016 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: Christian König
  DOC: mem_info_vram_total
  The amdgpu driver provides a sysfs API for reporting current total VRAM
  available on the device
  The file mem_info_vram_total is used for this and returns the total
  amount of VRAM in bytes
  DOC: mem_info_vis_vram_total
  The amdgpu driver provides a sysfs API for reporting current total
  visible VRAM available on the device
  The file mem_info_vis_vram_total is used for this and returns the total
  amount of visible VRAM in bytes
  DOC: mem_info_vram_used
  The amdgpu driver provides a sysfs API for reporting current total VRAM
  available on the device
  The file mem_info_vram_used is used for this and returns the total
  amount of currently used VRAM in bytes
  DOC: mem_info_vis_vram_used
  The amdgpu driver provides a sysfs API for reporting current total of
  used visible VRAM
  The file mem_info_vis_vram_used is used for this and returns the total
  amount of currently used visible VRAM in bytes
  DOC: mem_info_vram_vendor
  The amdgpu driver provides a sysfs API for reporting the vendor of the
  installed VRAM
  The file mem_info_vram_vendor is used for this and returns the name of the
  vendor.
  amdgpu_vram_mgr_vis_size - Calculate visible node size
  @adev: amdgpu_device pointer
  @node: MM node structure
  Calculate how many bytes of the MM node are inside visible VRAM
  amdgpu_vram_mgr_bo_visible_size - CPU visible BO size
  @bo: &amdgpu_bo buffer object (must be in VRAM)
  Returns:
  How much of the given &amdgpu_bo buffer object lies in CPU visible VRAM.
 Commit the reservation of VRAM pages 
  amdgpu_vram_mgr_reserve_range - Reserve a range from VRAM
  @man: TTM memory type manager
  @start: start address of the range in VRAM
  @size: size of the range
  Reserve memory from start addess with the specified size in VRAM
  amdgpu_vram_mgr_query_page_status - query the reservation status
  @man: TTM memory type manager
  @start: start address of a page in VRAM
  Returns:
 	-EBUSY: the page is still hold and in pending list
 	0: the page has been reserved
 	-ENOENT: the input page is not a reservation
  amdgpu_vram_mgr_virt_start - update virtual start address
  @mem: ttm_resource to update
  @node: just allocated node
  Calculate a virtual BO start address to easily check if everything is CPU
  accessible.
  amdgpu_vram_mgr_new - allocate new ranges
  @man: TTM memory type manager
  @tbo: TTM BO we need this range for
  @place: placement flags and restrictions
  @res: the resulting mem object
  Allocate VRAM for the given BO.
 bail out quickly if there's likely not enough VRAM for this BO 
 default to 2MB 
 Limit maximum size to 2GB due to SG table limitations 
  amdgpu_vram_mgr_del - free ranges
  @man: TTM memory type manager
  @res: TTM memory object
  Free the allocated VRAM again.
  amdgpu_vram_mgr_alloc_sgt - allocate and fill a sg table
  @adev: amdgpu device pointer
  @res: TTM memory object
  @offset: byte offset from the base of VRAM BO
  @length: number of bytes to export in sg_table
  @dev: the other device
  @dir: dma direction
  @sgt: resulting sg table
  Allocate and fill a sg table from a VRAM allocation.
 Determine the number of DRM_MM nodes to export 
 Initialize scatterlist nodes of sg_table 
	
	  Walk down DRM_MM nodes to populate scatterlist nodes
	  @note: Use iterator api to get first the DRM_MM node
	  and the number of bytes from it. Access the following
	  DRM_MM node(s) if more buffer needs to exported
  amdgpu_vram_mgr_free_sgt - allocate and fill a sg table
  @dev: device pointer
  @dir: data direction of resource to unmap
  @sgt: sg table to free
  Free a previously allocate sg table.
  amdgpu_vram_mgr_usage - how many bytes are used in this domain
  @man: TTM memory type manager
  Returns how many bytes are used in this domain.
  amdgpu_vram_mgr_vis_usage - how many bytes are used in the visible part
  @man: TTM memory type manager
  Returns how many bytes are used in the visible part of VRAM
  amdgpu_vram_mgr_debug - dump VRAM table
  @man: TTM memory type manager
  @printer: DRM printer to use
  Dump the table content using printk.
  amdgpu_vram_mgr_init - init VRAM manager and DRM MM
  @adev: amdgpu_device pointer
  Allocate and initialize the VRAM manager.
  amdgpu_vram_mgr_fini - free and destroy VRAM manager
  @adev: amdgpu_device pointer
  Destroy and free the VRAM manager, returns -EBUSY if ranges are still
  allocated inside it.
  Copyright 2007-8 Advanced Micro Devices, Inc.
  Copyright 2008 Red Hat Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: Dave Airlie
           Alex Deucher
	 Wait until we're out of the vertical blank period before the one
	  targeted by the flip
 We borrow the event spin lock for protecting flip_status 
 Do the flip (mmio) 
 Set the flip status 
  Handle unpin events outside the interrupt handler proper.
 unpin of the old buffer 
 schedule unpin of the old buffer 
 take a reference to the old object 
 pin the new buffer 
 we borrow the event spin lock for protecting flip_wrok 
 update crtc fb 
	 if we have active crtcs and we don't have a power ref,
	 if we have no active crtcs, then drop the power ref
 drop the power reference we got coming in here 
 on hw with routers, select right port 
 Couldn't find an accessible DDC on this connector 
	 Probe also for valid EDID header
	  EDID header starts with:
	  0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00.
	  Only the first 6 bytes must be valid as
		 Couldn't find an accessible EDID on this
	
	  if amdgpu_bo_support_uswc returns false it means that USWC mappings
	  is not supported for this board. But this mapping is required
	  to avoid hang caused by placement of scanout BO in GTT on certain
	  APUs. So force the BO placement to VRAM in case this architecture
	  will not allow USWC mappings.
	  Also, don't allow GTT domain if the BO doesn't have USWC flag set.
 enable SG on PCO and RV2 
 returning NULL will cause the default format structs to be used. 
  Tries to extract the renderable DCC offset from the opaque metadata attached
  to the buffer.
 Something that fits a descriptor + header. 
 Don't show error message when returning -ERESTARTSYS 
	
	  The first word is the metadata version, and we need space for at least
	  the version + pci vendor+device id + 8 words for a descriptor.
 resource word 67 META_DATA_ADDRESS{_LO} 
 resource word 57 META_DATA_ADDRESS 
 256B 
 4KiB 
 4KiB _X 
 64KiB 
 64 KiB _T 
 64 KiB _X 
 RESERVED or VAR 
 Z microtiling 
 S microtiling 
 Enable constant encode on RAVEN2 and later. 
			
			  If the userspace driver uses retiling the tiling flags do not contain
			  info on the renderable DCC buffer. Luckily the opaque metadata contains
			  the info so we can try to extract it. The kernel does not use this info
			  but we should convert it to a modifier plane for getfb2, so the
			  userspace driver that gets it doesn't have to juggle around another DCC
			  plane internally.
 of base surface data 
 Mirrors the is_displayable check in radeonsi's gfx6_compute_surface 
 Zero swizzle mode means linear 
 DISPLAY 
 RENDER 
		
		  TODO: for pipe aligned we may need to check the alignment of the
		  total size of the surface, which may need to be bigger than the
		  natural alignment due to some HW workarounds
 Force at least natural alignment. 
 Don't show error message when returning -ERESTARTSYS 
 Verify that the modifier is supported. 
	
	  This needs to happen before modifier conversion as that might change
	  the number of planes.
 Handle is imported dma-buf, so cannot be migrated to VRAM for scanout 
 XXX support different dither options? spatial, temporal, both, etc. 
 adjustment options for the display watermarks 
 try and guess if this is a tv or a monitor 
 480p 
 576p 
 720p 
 1080p 
 set scaling 
 copy native mode 
 fix up for overscan on hdmi 
  Retrieve current video scanout position of crtc on a given gpu, and
  an optional accurate timestamp of when query happened.
  \param dev Device to query.
  \param pipe Crtc to query.
  \param flags Flags from caller (DRM_CALLED_FROM_VBLIRQ or 0).
               For driver internal use only also supports these flags:
               USE_REAL_VBLANKSTART to use the real start of vblank instead
               of a fudged earlier start of vblank.
               GET_DISTANCE_TO_VBLANKSTART to return distance to the
               fudged earlier start of vblank in vpos and the distance
               to true start of vblank in hpos.
  \param vpos Location where vertical scanout position should be stored.
  \param hpos Location where horizontal scanout position should go.
  \param stime Target location for timestamp taken immediately before
                scanout position query. Can be NULL to skip timestamp.
  \param etime Target location for timestamp taken immediately after
                scanout position query. Can be NULL to skip timestamp.
  Returns vpos as a positive number while in active scanout area.
  Returns vpos as a negative number inside vblank, counting the number
  of scanlines to go until end of vblank, e.g., -1 means "one scanline
  until start of active scanout  end of vblank."
  \return Flags, or'ed together as follows:
  DRM_SCANOUTPOS_VALID = Query successful.
  DRM_SCANOUTPOS_INVBL = Inside vblank.
  DRM_SCANOUTPOS_ACCURATE = Returned position is accurate. A lack of
  this flag means that returned position may be offset by a constant but
  unknown small number of scanlines wrt. real scanout position.
 preempt_disable_rt() should go right here in PREEMPT_RT patchset. 
 Get optional system timestamp before query. 
 Get optional system timestamp after query. 
 preempt_enable_rt() should go right here in PREEMPT_RT patchset. 
 Decode into vertical and horizontal scanout position. 
 Valid vblank area boundaries from gpu retrieved? 
 Yes: Decode. 
 No: Fake something reasonable which gives at least ok results. 
 Called from driver internal vblank counter query code? 
 Caller wants distance from real vbl_start in hpos 
	 Fudge vblank to start a few scanlines earlier to handle the
	  problem that vblank irqs fire a few scanlines before start
	  of vblank. Some driver internal callers need the true vblank
	  start to be used and signal this via the USE_REAL_VBLANKSTART flag.
	 
	  The cause of the "early" vblank irq is that the irq is triggered
	  by the line buffer logic when the line buffer read position enters
	  the vblank, whereas our crtc scanout position naturally lags the
	  line buffer read position.
 Test scanout position against vblank region. 
 In vblank? 
 Called from driver internal vblank counter query code? 
 Caller wants distance from fudged earlier vbl_start 
	 Check if inside vblank area and apply corrective offsets:
	  vpos will then be >=0 in video scanout area, but negative
	  within vblank area, counting down the number of lines until
	  start of scanout.
 Inside "upper part" of vblank area? Apply corrective offset if so: 
		 With variable refresh rate displays the vpos can exceed
		  the vtotal value. Clamp to 0 to return -vbl_end instead
		  of guessing the remaining number of lines until scanout.
 Correct for shifted end of vbl at vbl_end. 
 turn off display hw 
 unpin the front buffers and cursors 
 don't unpin kernel fb objects 
 pin cursors 
 turn on display hw 
  Copyright 2014 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 Block CPU access 
 blackout the MC 
 wait for the MC to settle 
 unblackout the MC 
 allow CPU access 
  gmc_v7_0_init_microcode - load ucode images from disk
  @adev: amdgpu_device pointer
  Use the firmware interface to load the ucode images into
  the driver (not loaded into hw).
  Returns 0 on success, error on failure.
  gmc_v7_0_mc_load_microcode - load MC ucode into the hw
  @adev: amdgpu_device pointer
  Load the GDDR MC ucode into the hw (CIK).
  Returns 0 on success, error on failure.
 reset the engine and set to writable 
 load mc io regs 
 load the MC ucode 
 put the engine back into the active state 
 wait for training to complete 
  gmc_v7_0_mc_program - program the GPU memory controller
  @adev: amdgpu_device pointer
  Set the location of vram, gart, and AGP in the GPU's
  physical address space (CIK).
 Initialize HDP 
 Lockout access through VGA aperture
 disable VGA render 
 Update configuration 
  gmc_v7_0_mc_init - initialize the memory controller driver params
  @adev: amdgpu_device pointer
  Look up the amount of vram, vram width, and decide how to place
  vram and gart within the GPU's physical address space (CIK).
  Returns 0 for success.
 Get VRAM informations 
 size in MB on si 
 In case the PCI BAR is larger than the actual amount of vram 
 set the gart size 
 no MM engines 
 UVD, VCE do not support GPUVM 
 UVD, VCE do not support GPUVM 
 UVD, VCE do not support GPUVM 
 UVD, VCE do not support GPUVM 
 UVD, VCE do not support GPUVM 
  gmc_v7_0_flush_gpu_tlb_pasid - tlb flush via pasid
  @adev: amdgpu_device pointer
  @pasid: pasid to be flush
  @flush_type: type of flush
  @all_hub: flush all hubs
  Flush the TLB for the requested pasid.
  GART
  VMID 0 is the physical GPU addresses as used by the kernel.
  VMIDs 1-15 are used for userspace clients and are handled
  by the amdgpu vmhsa code.
  gmc_v7_0_flush_gpu_tlb - gart tlb flush callback
  @adev: amdgpu_device pointer
  @vmid: vm instance to flush
  @vmhub: which hub to flush
  @flush_type: type of flush
  Flush the TLB for the requested page table (CIK).
 bits 0-15 are the VM contexts0-15 
 bits 0-15 are the VM contexts0-15 
  gmc_v7_0_set_fault_enable_default - update VM fault handling
  @adev: amdgpu_device pointer
  @value: true redirects VM faults to the default page
  gmc_v7_0_set_prt - set PRT VM fault
  @adev: amdgpu_device pointer
  @enable: enabledisable VM fault handling for PRT
  gmc_v7_0_gart_enable - gart enable
  @adev: amdgpu_device pointer
  This sets up the TLBs, programs the page tables for VMID0,
  sets up the hw for VMIDs 1-15 which are allocated on
  demand, and sets up the global locations for the LDS, GDS,
  and GPUVM for FSA64 clients (CIK).
  Returns 0 for success, errors for failure.
 Setup TLB control 
 Setup L2 cache 
 setup context0 
 empty context1-15 
	 FIXME start with 4G, once using 2 level pt switch to full
	  vm size space
 set vm size, must be a multiple of 4 
 enable context1-15 
 Initialize common gart structure 
  gmc_v7_0_gart_disable - gart disable
  @adev: amdgpu_device pointer
  This disables all VM page table (CIK).
 Disable all tables 
 Setup TLB control 
 Setup L2 cache 
  gmc_v7_0_vm_decode_fault - print human readable fault info
  @adev: amdgpu_device pointer
  @status: VM_CONTEXT1_PROTECTION_FAULT_STATUS register value
  @addr: VM_CONTEXT1_PROTECTION_FAULT_ADDR register value
  @mc_client: VM_CONTEXT1_PROTECTION_FAULT_MCCLIENT register value
  @pasid: debug logging only - no functional use
  Print human readable fault information (CIK).
	 Adjust VM size here.
	  Currently set to 4GB ((1 << 20) 4k pages).
	  Max GPUVM size for cayman and SI is 40 bits.
	 Set the internal MC address mask
	  This is the max address of the GPU's
	  internal address space.
 40 bit MC 
 Memory manager 
	
	  number of VMs
	  VMID 0 is reserved for System
	  amdgpu graphicscompute will use VMIDs 1-7
	  amdkfd will use VMIDs 8-15
 base offset of vram pages 
 read MC_STATUS 
 Wait a little for things to settle down 
 system context 
 VMs 
 system context 
 VMs 
 reset addr and status 
  Copyright 2019 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Navi10 has two graphic rings to share each graphic pipe.
  1. Primary ring
  2. Async ring
CC_GC_SA_UNIT_DISABLE
GC_USER_SA_UNIT_DISABLE
PA_SC_ENHANCE_3
 Pending on emulation bring up 
 only in new version, AMDGPU_REGS_NO_KIQ and AMDGPU_REGS_RLC enabled simultaneously 
 Pending on emulation bring up 
 Pending on emulation bring up 
 Pending on emulation bring up 
 This is not in GDB yet. Don't remove it. It fixes a GPU hang on Navy Flounder. 
 This is not in GDB yet. Don't remove it. It fixes a GPU hang on VanGogh. 
 TODO: pending on golden setting value of gb address config 
 vmid_mask:0 queue_type:0 (KIQ) 
 queue mask lo 
 queue mask hi 
 gws mask lo 
 gws mask hi 
 oac mask 
 gds heap base:0, gds heap size:0 
 Q_sel:0, vmid:0, vidmem: 1, engine:0, num_Q:1
 Q_sel: 0, vmid: 0, engine: 0, num_Q: 1 
 Queue_Sel 
 VMID 
queue_type: normal compute queue 
 alloc format: all_on_one_pipe 
 num_queues: must be 1 
 Q_sel: 0, vmid: 0, engine: 0, num_Q: 1 
 Q_sel: 0, vmid: 0, engine: 0, num_Q: 1 
 memory (1) or register (0) 
 wait 
 equal 
 Dword align 
 poll interval 
 begin clear state 
 context control state 
 set PA_SC_TILE_STEERING_OVERRIDE 
 end clear state 
 clear state 
 clear state block 
 jump table block 
 init clear state block 
 init spm vmid with 0xf 
 take ownership of the relevant compute queues 
	 in gfx10 the SIMD_ID is specified as part of the INSTANCE
	  field when performing a select_se_sh so it should be
 type 2 wave data 
 mec0 is me1 
 type-2 packets are deprecated on MEC, use type-3 instead 
 KIQ event 
 EOP Event 
 Privileged reg 
 Privileged inst 
 set up the gfx ring 
 set up the compute queues - allocate horizontally across pipes 
 allocate visible FB for rlc auto-loading fw 
	 for ASICs that integrates GFX v10.3
 init num_sc 
 init num_rb_per_sc 
 init num_packer_per_sc 
	
	  Configure apertures:
	  LDS:         0x60000000'00000000 - 0x60000001'00000000 (4GB)
	  Scratch:     0x60000001'00000000 - 0x60000002'00000000 (4GB)
	  GPUVM:       0x60010000'00000000 - 0x60020000'00000000 (1TB)
 CP and shaders 
	 Initialize all compute VMIDs to have no GDS, GWS, or OA
	
	  Initialize all compute and user-gfx VMIDs to have no GDS, GWS, or OA
	  access. Compute VMIDs should be enabled by FW for target VMIDs,
	  the driver can enable them for graphics. VMID0 should maintain
	  access so that HWS firmware can saverestore entries.
	
	  GCRD_TARGETS_DISABLE field contains
	  for Navi10Navi12: GL1C=[18:15], SQC=[14:10], TCP=[9:0]
	  for Navi14: GL1C=[21:18], SQC=[17:12], TCP=[11:0]
 TCP 
 SQC 
 GL1C 
	
	  UTCL1_UTCL0_INVREQ_DISABLE field contains
	  for Navi10Navi12: SQG=[24], RMI=[23:20], SQC=[19:10], TCP=[9:0]
	  for Navi14: SQG=[28], RMI=[27:24], SQC=[23:12], TCP=[11:0]
 TCP 
 SQC 
 RMI 
 SQG 
			
			  Set corresponding TCP bits for the inactive WGPs in
			  GCRD_SA_TARGETS_DISABLE
 Set TCP & SQC bits in UTCL1_UTCL0_INVREQ_DISABLE 
 only override TCP & SQC bits 
 only override TCP & SQC bits 
 TCCs are global (not instanced). 
 XXX SH_MEM regs 
 where to put LDS, scratch, GPUVM in FSA64 space 
 CP and shaders 
 csib 
		 RLC_PG_CNTL[23] = 0 (default)
		  RLC will wait for handshake acks with SMU
		  GFXOFF will be enabled
		  RLC_PG_CNTL[23] = 1
		  RLC will not issue any message to SMU
		  hence no handshake between SMU & RLC
		  GFXOFF will be disabled
	 TODO: enable rlc & smu handshake until smu
 enable Save Restore Machine 
 enable RLC SRM 
 disable CG 
 disable PG 
 legacy rlc firmware loading 
 rlc backdoor autoload firmware 
 Copy toc from psp sos fw to rlc toc buffer 
 Offset needs 4KB alignment 
 In case the offset in rlc toc ucode is aligned 
 pfp ucode 
 ce ucode 
 me ucode 
 rlc ucode 
 mec1 ucode 
 mec2 ucode is not necessary if mec2 ucode is same as mec1 
 Temporarily put sdma part here 
 wait for 50ms 
 Trigger an invalidation of the L1 instruction caches 
 Wait for invalidation complete 
 Program me ucode address into intruction cache address register 
 wait for 50ms 
 Trigger an invalidation of the L1 instruction caches 
 Wait for invalidation complete 
 Program ce ucode address into intruction cache address register 
 wait for 50ms 
 Trigger an invalidation of the L1 instruction caches 
 Wait for invalidation complete 
 Program pfp ucode address into intruction cache address register 
 wait for 50ms 
 Trigger an invalidation of the L1 instruction caches 
 Wait for invalidation complete 
 Program mec1 ucode address into intruction cache address register 
 wait for 50ms 
 Trigger an invalidation of the L1 instruction caches 
 Wait for invalidation complete 
 wait for 50ms 
 Trigger an invalidation of the L1 instruction caches 
 Wait for invalidation complete 
 wait for 50ms 
 Trigger an invalidation of the L1 instruction caches 
 Wait for invalidation complete 
 init the CP 
 submit cs packet to copy state 0 to next available state 
 maximum supported gfx ring is 2 
 Set the write pointer delay 
 set the RB to use vmid 0 
 Init gfx ring 0 for pipe 0 
 Set ring buffer size 
 Initialize the ring buffer's write pointers 
 set the wb address wether it's enabled or not 
 Init gfx ring 1 for pipe 1 
 maximum supported gfx ring is 2 
 Initialize the ring buffer's write pointers 
 Set the wb address wether it's enabled or not 
 Switch to pipe 0 
 start the ring 
 Wait for 50 ms 
 Trigger an invalidation of the L1 instruction caches 
 Wait for invalidation complete 
 MEC1 
	
	  TODO: Loading MEC2 firmware is only necessary if MEC2 should run
	  different microcode than MEC1.
 tell RLC which is KIQ queue 
 set up gfx hqd wptr 
 set the pointer to the MQD 
 set up mqd control 
 set up gfx_hqd_vimd with 0x0 to indicate the ring buffer's vmid 
	 set up default queue priority level
 set up time quantum 
 set up gfx hqd base. this is similar as CP_RB_BASE 
 set up hqd_rptr_addr_hi, similar as CP_RB_RPTR 
 set up rb_wptr_poll addr 
 set up the gfx_hqd_control, similar as CP_RB0_CNTL 
 set up cp_doorbell_control 
	if there are 2 gfx rings, set the lower doorbell range of the first ring,
 reset read and write pointers, similar to CP_RB0_WPTR_RPTR 
 active the queue 
 set mmCP_GFX_HQD_WPTR_HI to 0 
 set GFX_MQD_BASE 
 set GFX_MQD_CONTROL 
 set GFX_HQD_VMID to 0 
 set GFX_HQD_BASE, similar as CP_RB_BASE 
 set GFX_HQD_RPTR_ADDR, similar as CP_RB_RPTR 
 set GFX_HQD_CNTL, similar as CP_RB_CNTL 
 set RB_WPTR_POLL_ADDR 
 set RB_DOORBELL_CONTROL 
 active the queue 
 reset mqd with the backup copy 
 reset the ring 
 set the EOP size, register value is 2^(EOP_SIZE+1) dwords 
 enable doorbell? 
 disable the queue if it's active 
 set the pointer to the MQD 
 set MQD vmid to 0 
 set the pointer to the HQD, this is similar CP_RB0_BASE_HI 
 set up the HQD, this is similar to CP_RB0_CNTL 
 set the wb address whether it's enabled or not 
 only used if CP_PQ_WPTR_POLL_CNTL.CP_PQ_WPTR_POLL_CNTL__EN_MASK=1 
 enable the doorbell if requested 
 reset read and write pointers, similar to CP_RB0_WPTR_RPTR 
 set the vmid for the queue 
 set MIN_IB_AVAIL_SIZE 
 set static priority for a compute queuering 
	 map_queues packet doesn't need activate the queue,
	  so only kiq need set this field.
 inactivate the queue 
 disable wptr polling 
 write the EOP addr 
 set the EOP size, register value is 2^(EOP_SIZE+1) dwords 
 enable doorbell? 
 disable the queue if it's active 
 set the pointer to the MQD 
 set MQD vmid to 0 
 set the pointer to the HQD, this is similar CP_RB0_BASE_HI 
 set up the HQD, this is similar to CP_RB0_CNTL 
 set the wb address whether it's enabled or not 
 only used if CP_PQ_WPTR_POLL_CNTL.CP_PQ_WPTR_POLL_CNTL__EN_MASK=1 
 enable the doorbell if requested 
 reset read and write pointers, similar to CP_RB0_WPTR_RPTR 
 set the vmid for the queue 
 activate the queue 
 for GPU_RESET case 
 reset MQD to a clean status 
 reset ring buffer 
 for GPU_RESET case 
 reset MQD to a clean status 
 reset ring buffer 
 legacy firmware loading 
	 check if mmVGT_ESGS_RING_SIZE_UMD
	 initialize cam_index to 0
 mmVGT_TF_RING_SIZE_UMD -> mmVGT_TF_RING_SIZE 
 mmVGT_TF_MEMORY_BASE_UMD -> mmVGT_TF_MEMORY_BASE 
 mmVGT_TF_MEMORY_BASE_HI_UMD -> mmVGT_TF_MEMORY_BASE_HI 
 mmVGT_HS_OFFCHIP_PARAM_UMD -> mmVGT_HS_OFFCHIP_PARAM 
 mmVGT_ESGS_RING_SIZE_UMD -> mmVGT_ESGS_RING_SIZE 
 mmVGT_GSVS_RING_SIZE_UMD -> mmVGT_GSVS_RING_SIZE 
 mmSPI_CONFIG_CNTL_REMAP -> mmSPI_CONFIG_CNTL 
 mmVGT_TF_RING_SIZE_UMD -> mmVGT_TF_RING_SIZE 
 mmVGT_TF_MEMORY_BASE_UMD -> mmVGT_TF_MEMORY_BASE 
 mmVGT_TF_MEMORY_BASE_HI_UMD -> mmVGT_TF_MEMORY_BASE_HI 
 mmVGT_HS_OFFCHIP_PARAM_UMD -> mmVGT_HS_OFFCHIP_PARAM 
 mmVGT_ESGS_RING_SIZE_UMD -> mmVGT_ESGS_RING_SIZE 
 mmVGT_GSVS_RING_SIZE_UMD -> mmVGT_GSVS_RING_SIZE 
 mmSPI_CONFIG_CNTL_REMAP -> mmSPI_CONFIG_CNTL 
		
		  For gfx 10, rlc firmware loading relies on smu firmware is
		  loaded firstly, so in direct type, it has to load smc ucode
		  here before rlc.
 if GRBM CAM not remapped, set up the remapping 
	
	  init golden registers and rlc resume may override some registers,
	  reconfig them here
 Program KIQ position of RLC_CP_SCHEDULERS during destroy 
 read MC_STATUS 
 GRBM_STATUS 
 GRBM_STATUS2 
 stop the rlc 
 Disable GFX parsingprefetching 
 Disable MEC parsingprefetching 
 Wait a little for things to settle down 
		 The SMUIO TSC clock frequency is 100MHz, which sets 32-bit carry over
		  roughly every 42 seconds.
 GDS Base 
 GDS Size 
 GWS 
 OA 
 if RLC is not enabled, do nothing 
 wait for RLC_SAFE_MODE 
 wait for RLC_SAFE_MODE 
 It is disabled by HW by default 
 0 - Disable some blocks' MGCG 
 1 - RLC_CGTT_MGCG_OVERRIDE 
 MGLS is a global flag to control all MGLS in GFX 
 2 - RLC memory Light sleep 
 3 - CP memory Light sleep 
 1 - MGCG_OVERRIDE 
 2 - disable MGLS in CP 
 3 - disable MGLS in RLC 
 Enable 3D CGCGCGLS 
 write cmd to clear cgcgcgls ov 
 unset CGCG override 
 update CGCG and CGLS override bits 
 enable 3Dcgcg FSM(0x0000363f) 
 set IDLE_POLL_COUNT(0x00900100) 
 Disable CGCGCGLS 
 disable cgcg, cgls should be disabled 
 disable cgcg and cgls in FSM 
 unset CGCG override 
 update CGCG and CGLS override bits 
 enable cgcg FSM(0x0000363F) 
 set IDLE_POLL_COUNT(0x00900100) 
 reset CGCGCGLS bits 
 disable cgcg and cgls in FSM 
 unset FGCG override 
 update FGCG override bits 
 unset RLC SRAM CLK GATER override 
 update RLC SRAM CLK GATER override bits 
 reset FGCG bits 
 disable FGCG
 reset RLC SRAM CLK GATER bits 
 disable RLC SRAM CLK
 enable FGCG firstly
		 CGCGCGLS should be enabled after MGCGMGLS
		  ===  MGCG + MGLS ===
 ===  CGCG CGLS for GFX 3D Only === 
 ===  CGCG + CGLS === 
		 CGCGCGLS should be disabled before MGCGMGLS
		  ===  CGCG + CGLS ===
 ===  CGCG CGLS for GFX 3D Only === 
 ===  MGCG + MGLS === 
 disable fgcg at last
 not for _SOC15 
	
	  CGPG enablement required and the register to program the hysteresis value
	  RLC_PG_DELAY_3.CGCG_ACTIVE_BEFORE_CGPG to the desired CGPG hysteresis value
	  in refclk count. Note that RLC FW is modified to take 16 bits from
	  RLC_PG_DELAY_3[15:0] as the hysteresis instead of just 8 bits.
	 
	  The recommendation from RLC team is setting RLC_PG_DELAY_3 to 200us as part)
	  of CGPG enablement starting point.
	  Powerperformance team will optimize it and might give a new value later.
 AMD_CG_SUPPORT_GFX_FGCG 
 AMD_CG_SUPPORT_GFX_MGCG 
 AMD_CG_SUPPORT_GFX_CGCG 
 AMD_CG_SUPPORT_GFX_CGLS 
 AMD_CG_SUPPORT_GFX_RLC_LS 
 AMD_CG_SUPPORT_GFX_CP_LS 
 AMD_CG_SUPPORT_GFX_3D_CGCG 
 AMD_CG_SUPPORT_GFX_3D_CGLS 
 gfx10 is 32bit rptr
 XXX check if swapping is necessary on BE 
 XXX check if swapping is necessary on BE 
 gfx10 hardware is 32bit rptr 
 XXX check if swapping is necessary on BE 
 XXX check if swapping is necessary on BE 
 only DOORBELL method supported on gfx10 now 
 pfp 
 Dword align 
	 Currently, there is a high possibility to get wave ID mismatch
	  between ME and GDS, leading to a hw deadlock, because ME generates
	  different wave IDs than the GDS expects. This situation happens
	  randomly when at least 5 compute pipes use GDS ordered append.
	  The wave IDs generated by ME are also wrong after suspendresume.
	  Those are probably bugs somewhere else in the kernel driver.
	 
	  Writing GDS_COMPUTE_MAX_WAVE_ID resets wave ID counters in ME and
	  GDS to 0 for this ring (mepipe).
 Dword align 
 RELEASE_MEM - flush caches, send int 
 must be set with GLM_WB 
	
	  the address should be Qword aligned if 64bit write, Dword
	  aligned if only send 32bit data low (discard data high)
 compute doesn't have PFP 
 sync PFP to ME, otherwise we might get invalid PFP reads 
 we only allocate 32bit for each seq wb address 
 write fence seq to the "addr" 
 set register to trigger INT 
 src_id is 178 
 set load_enable otherwise this package is just NOPs 
 set load_global_config & load_global_uconfig 
 set load_cs_sh_regs 
 set load_per_context_state & load_gfx_sh_regs for GFX 
 set load_ce_ram if preamble presented 
		 still load_ce_ram if this is the first time preamble presented
		  although there is no context switch happens.
 discard following DWs if cond_exec_gpu_addr==0 
 patch dummy value later 
 assert preemption condition 
 assert IB preemption, emit the trailing fence 
 poll the trailing fence 
 deassert preemption condition 
 src: register
 dst: memory 
 write confirm 
 no inc addr 
	
	  amdgpu controls only the first MEC. That's why this function only
	  handles the setting of interrupts for this specific MEC. All other
	  pipes' interrupts are set by amdkfd.
			 Per-queue interrupt is supported for MEC starting from VI.
			   The interrupt can only be enableddisabled per pipe instead of per queue.
 we only enabled 1 gfx queue per pipe for now 
 kiq only support GENERIC2_INT now 
 ACQUIRE_MEM - make one or more surfaces valid for use by the subsequent operations 
 CP_COHER_CNTL 
 CP_COHER_SIZE 
 CP_COHER_SIZE_HI 
 CP_COHER_BASE 
 CP_COHER_BASE_HI 
 POLL_INTERVAL 
 GCR_CNTL 
 totally 242 maximum if 16 IBs 
 COND_EXEC 
 PIPELINE_SYNC 
 VM_FLUSH 
 FENCE for VM_FLUSH 
 GDS switch 
		4 +  double SWITCH_BUFFER,
		      the first COND_EXEC jump to the place
		      just prior to this double SWITCH_BUFFER
 COND_EXEC 
 HDP_flush 
 VGT_flush 
	CE_META 
	DE_META 
 CNTX_CTRL 
 HDP_INVL 
 FENCE x2 
 SWITCH_BUFFER 
 gfx_v10_0_emit_mem_sync 
 gfx_v10_0_ring_emit_ib_gfx 
 gfx_v10_0_ring_emit_gds_switch 
 gfx_v10_0_ring_emit_hdp_flush 
 hdp invalidate 
 gfx_v10_0_ring_emit_pipeline_sync 
 gfx_v10_0_ring_emit_vm_flush 
 gfx_v10_0_ring_emit_fence x3 for user fence, vm fence 
 gfx_v10_0_emit_mem_sync 
 gfx_v10_0_ring_emit_ib_compute 
 gfx_v10_0_ring_emit_gds_switch 
 gfx_v10_0_ring_emit_hdp_flush 
hdp invalidate 
 gfx_v10_0_ring_emit_pipeline_sync 
 gfx_v10_0_ring_emit_vm_flush 
 gfx_v10_0_ring_emit_fence_kiq x3 for user fence, vm fence 
 gfx_v10_0_ring_emit_ib_compute 
 if there is one WGP enabled, it means 2 CUs will be enabled 
  Copyright 2021 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  DOC: AMDGPU SECUREDISPLAY debugfs test interface
  how to use?
  echo opcode <value> > <debugfs_dir>drixxxsecuredisplay_test
  eg. echo 1 > <debugfs_dir>drixxxsecuredisplay_test
  eg. echo 2 phy_id > <debugfs_dir>drixxxsecuredisplay_test
  opcode:
  1：Query whether TA is responding used only for validation pupose
  2: Send region of Interest and CRC value to I2C. (uint32)phy_id is
  send to determine which DIO scratch register should be used to get
  ROI and receive i2c_buf as the output.
  You can refer more detail from header file ta_securedisplay_if.h
  Copyright 2019 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  jpeg_v2_5_early_init - set function pointers
  @handle: amdgpu_device pointer
  Set ring and irq function pointers
  jpeg_v2_5_sw_init - sw init for JPEG block
  @handle: amdgpu_device pointer
  Load firmware and sw initialization
 JPEG TRAP 
  jpeg_v2_5_sw_fini - sw fini for JPEG block
  @handle: amdgpu_device pointer
  JPEG suspend and free up sw allocation
  jpeg_v2_5_hw_init - start and test JPEG block
  @handle: amdgpu_device pointer
  jpeg_v2_5_hw_fini - stop the hardware block
  @handle: amdgpu_device pointer
  Stop the JPEG block, mark ring as not ready any more
  jpeg_v2_5_suspend - suspend JPEG block
  @handle: amdgpu_device pointer
  HW fini and suspend JPEG block
  jpeg_v2_5_resume - resume JPEG block
  @handle: amdgpu_device pointer
  Resume firmware and hw init JPEG block
  jpeg_v2_5_start - start JPEG block
  @adev: amdgpu_device pointer
  Setup and start the JPEG block
 disable anti hang mechanism 
 JPEG disable CGC 
 MJPEG global tiling registers 
 enable JMI channel 
 enable System Interrupt for JRBC 
  jpeg_v2_5_stop - stop JPEG block
  @adev: amdgpu_device pointer
  stop the JPEG block
 reset JMI 
 enable anti hang mechanism 
  jpeg_v2_5_dec_ring_get_rptr - get read pointer
  @ring: amdgpu_ring pointer
  Returns the current hardware read pointer
  jpeg_v2_5_dec_ring_get_wptr - get write pointer
  @ring: amdgpu_ring pointer
  Returns the current hardware write pointer
  jpeg_v2_5_dec_ring_set_wptr - set write pointer
  @ring: amdgpu_ring pointer
  Commits the write pointer to the hardware
  jpeg_v2_6_dec_ring_insert_start - insert a start command
  @ring: amdgpu_ring pointer
  Write a start command to the ring.
 PCTL0_MMHUB_DEEPSLEEP_IB 
  jpeg_v2_6_dec_ring_insert_end - insert a end command
  @ring: amdgpu_ring pointer
  Write a end command to the ring.
 PCTL0_MMHUB_DEEPSLEEP_IB 
 jpeg_v2_5_dec_ring_emit_vm_flush 
 jpeg_v2_5_dec_ring_emit_fence x2 vm fence 
 jpeg_v2_5_dec_ring_emit_ib 
 jpeg_v2_5_dec_ring_emit_vm_flush 
 jpeg_v2_5_dec_ring_emit_fence x2 vm fence 
 jpeg_v2_5_dec_ring_emit_ib 
 CHIP_ALDEBARAN 
  Copyright 2008 Advanced Micro Devices, Inc.
  Copyright 2008 Red Hat Inc.
  Copyright 2009 Jerome Glisse.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: Dave Airlie
           Alex Deucher
           Jerome Glisse
  DOC: pcie_replay_count
  The amdgpu driver provides a sysfs API for reporting the total number
  of PCIe replays (NAKs)
  The file pcie_replay_count is used for this and returns the total
  number of replays as a sum of the NAKs generated and NAKs received
  DOC: product_name
  The amdgpu driver provides a sysfs API for reporting the product name
  for the device
  The file serial_number is used for this and returns the product name
  as returned from the FRU.
  NOTE: This is only available for certain server cards
  DOC: product_number
  The amdgpu driver provides a sysfs API for reporting the part number
  for the device
  The file serial_number is used for this and returns the part number
  as returned from the FRU.
  NOTE: This is only available for certain server cards
  DOC: serial_number
  The amdgpu driver provides a sysfs API for reporting the serial number
  for the device
  The file serial_number is used for this and returns the serial number
  as returned from the FRU.
  NOTE: This is only available for certain server cards
  amdgpu_device_supports_px - Is the device a dGPU with ATPX power control
  @dev: drm_device pointer
  Returns true if the device is a dGPU with ATPX power control,
  otherwise return false.
  amdgpu_device_supports_boco - Is the device a dGPU with ACPI power resources
  @dev: drm_device pointer
  Returns true if the device is a dGPU with ACPI power control,
  otherwise return false.
  amdgpu_device_supports_baco - Does the device support BACO
  @dev: drm_device pointer
  Returns true if the device supporte BACO,
  otherwise return false.
  amdgpu_device_supports_smart_shift - Is the device dGPU with
  smart shift support
  @dev: drm_device pointer
  Returns true if the device is a dGPU with Smart Shift support,
  otherwise returns false.
  VRAM access helper functions
  amdgpu_device_mm_access - access vram by MM_INDEXMM_DATA
  @adev: amdgpu_device pointer
  @pos: offset of the buffer in vram
  @buf: virtual address of the buffer in system memory
  @size: readwrite size, sizeof(@buf) must > @size
  @write: true - write to vram, otherwise - read from vram
  amdgpu_device_vram_access - access vram by vram aperature
  @adev: amdgpu_device pointer
  @pos: offset of the buffer in vram
  @buf: virtual address of the buffer in system memory
  @size: readwrite size, sizeof(@buf) must > @size
  @write: true - write to vram, otherwise - read from vram
  The return value means how many bytes have been transferred.
  amdgpu_device_vram_access - readwrite a buffer in vram
  @adev: amdgpu_device pointer
  @pos: offset of the buffer in vram
  @buf: virtual address of the buffer in system memory
  @size: readwrite size, sizeof(@buf) must > @size
  @write: true - write to vram, otherwise - read from vram
 try to using vram apreature to access vram first 
 using MM to access rest vram 
  register access helper functions.
 Check if hw access should be skipped because of hotplug or device error 
	
	  This is a bit complicated to understand, so worth a comment. What we assert
	  here is that the GPU reset is not running on another thread in parallel.
	 
	  For this we trylock the read side of the reset semaphore, if that succeeds
	  we know that the reset is not running in paralell.
	 
	  If the trylock fails we assert that we are either already holding the read
	  side of the lock or are the reset thread itself and hold the write side of
	  the lock.
  amdgpu_device_rreg - read a memory mapped IO or indirect register
  @adev: amdgpu_device pointer
  @reg: dword aligned register offset
  @acc_flags: access flags which require special behavior
  Returns the 32 bit value from the offset specified.
  MMIO register read with bytes helper functions
  @offset:bytes offset from MMIO start
  amdgpu_mm_rreg8 - read a memory mapped IO register
  @adev: amdgpu_device pointer
  @offset: byte aligned register offset
  Returns the 8 bit value from the offset specified.
  MMIO register write with bytes helper functions
  @offset:bytes offset from MMIO start
  @value: the value want to be written to the register
  amdgpu_mm_wreg8 - read a memory mapped IO register
  @adev: amdgpu_device pointer
  @offset: byte aligned register offset
  @value: 8 bit value to write
  Writes the value specified to the offset specified.
  amdgpu_device_wreg - write to a memory mapped IO or indirect register
  @adev: amdgpu_device pointer
  @reg: dword aligned register offset
  @v: 32 bit value to write to the register
  @acc_flags: access flags which require special behavior
  Writes the value specified to the offset specified.
  amdgpu_mm_wreg_mmio_rlc -  write register either with mmio or with RLC path if in range
  this function is invoked only the debugfs register access
  amdgpu_mm_rdoorbell - read a doorbell dword
  @adev: amdgpu_device pointer
  @index: doorbell index
  Returns the value in the doorbell aperture at the
  requested doorbell index (CIK).
  amdgpu_mm_wdoorbell - write a doorbell dword
  @adev: amdgpu_device pointer
  @index: doorbell index
  @v: value to write
  Writes @v to the doorbell aperture at the
  requested doorbell index (CIK).
  amdgpu_mm_rdoorbell64 - read a doorbell Qword
  @adev: amdgpu_device pointer
  @index: doorbell index
  Returns the value in the doorbell aperture at the
  requested doorbell index (VEGA10+).
  amdgpu_mm_wdoorbell64 - write a doorbell Qword
  @adev: amdgpu_device pointer
  @index: doorbell index
  @v: value to write
  Writes @v to the doorbell aperture at the
  requested doorbell index (VEGA10+).
  amdgpu_device_indirect_rreg - read an indirect register
  @adev: amdgpu_device pointer
  @pcie_index: mmio register offset
  @pcie_data: mmio register offset
  @reg_addr: indirect register address to read from
  Returns the value of indirect register @reg_addr
  amdgpu_device_indirect_rreg64 - read a 64bits indirect register
  @adev: amdgpu_device pointer
  @pcie_index: mmio register offset
  @pcie_data: mmio register offset
  @reg_addr: indirect register address to read from
  Returns the value of indirect register @reg_addr
 read low 32 bits 
 read high 32 bits 
  amdgpu_device_indirect_wreg - write an indirect register address
  @adev: amdgpu_device pointer
  @pcie_index: mmio register offset
  @pcie_data: mmio register offset
  @reg_addr: indirect register offset
  @reg_data: indirect register data
  amdgpu_device_indirect_wreg64 - write a 64bits indirect register address
  @adev: amdgpu_device pointer
  @pcie_index: mmio register offset
  @pcie_data: mmio register offset
  @reg_addr: indirect register offset
  @reg_data: indirect register data
 write low 32 bits 
 write high 32 bits 
  amdgpu_invalid_rreg - dummy reg read function
  @adev: amdgpu_device pointer
  @reg: offset of register
  Dummy register read function.  Used for register blocks
  that certain asics don't have (all asics).
  Returns the value in the register.
  amdgpu_invalid_wreg - dummy reg write function
  @adev: amdgpu_device pointer
  @reg: offset of register
  @v: value to write to the register
  Dummy register read function.  Used for register blocks
  that certain asics don't have (all asics).
  amdgpu_invalid_rreg64 - dummy 64 bit reg read function
  @adev: amdgpu_device pointer
  @reg: offset of register
  Dummy register read function.  Used for register blocks
  that certain asics don't have (all asics).
  Returns the value in the register.
  amdgpu_invalid_wreg64 - dummy reg write function
  @adev: amdgpu_device pointer
  @reg: offset of register
  @v: value to write to the register
  Dummy register read function.  Used for register blocks
  that certain asics don't have (all asics).
  amdgpu_block_invalid_rreg - dummy reg read function
  @adev: amdgpu_device pointer
  @block: offset of instance
  @reg: offset of register
  Dummy register read function.  Used for register blocks
  that certain asics don't have (all asics).
  Returns the value in the register.
  amdgpu_block_invalid_wreg - dummy reg write function
  @adev: amdgpu_device pointer
  @block: offset of instance
  @reg: offset of register
  @v: value to write to the register
  Dummy register read function.  Used for register blocks
  that certain asics don't have (all asics).
  amdgpu_device_asic_init - Wrapper for atom asic_init
  @adev: amdgpu_device pointer
  Does any asic specific work and then calls atom asic init.
  amdgpu_device_vram_scratch_init - allocate the VRAM scratch page
  @adev: amdgpu_device pointer
  Allocates a scratch page of VRAM for use by various things in the
  driver.
  amdgpu_device_vram_scratch_fini - Free the VRAM scratch page
  @adev: amdgpu_device pointer
  Frees the VRAM scratch page.
  amdgpu_device_program_register_sequence - program an array of registers.
  @adev: amdgpu_device pointer
  @registers: pointer to the register array
  @array_size: size of the register array
  Programs an array or registers with and and or masks.
  This is a helper for setting golden registers.
  amdgpu_device_pci_config_reset - reset the GPU
  @adev: amdgpu_device pointer
  Resets the GPU using the pci config reset sequence.
  Only applicable to asics prior to vega10.
  amdgpu_device_pci_reset - reset the GPU using generic PCI means
  @adev: amdgpu_device pointer
  Resets the GPU using generic pci reset interfaces (FLR, SBR, etc.).
  GPU doorbell aperture helpers function.
  amdgpu_device_doorbell_init - Init doorbell driver information.
  @adev: amdgpu_device pointer
  Init doorbell driver information (CIK)
  Returns 0 on success, error on failure.
 No doorbell on SI hardware generation 
 doorbell bar mapping 
	 For Vega, reserve and map two pages on doorbell BAR since SDMA
	  paging queue doorbell use the second page. The
	  AMDGPU_DOORBELL64_MAX_ASSIGNMENT definition assumes all the
	  doorbells are in the first page. So with paging queue enabled,
	  the max num_doorbells should + 1 page (0x400 in dword)
  amdgpu_device_doorbell_fini - Tear down doorbell driver information.
  @adev: amdgpu_device pointer
  Tear down doorbell driver information (CIK)
  amdgpu_device_wb_()
  Writeback is the method by which the GPU updates special pages in memory
  with the status of certain GPU events (fences, ring pointers,etc.).
  amdgpu_device_wb_fini - Disable Writeback and free memory
  @adev: amdgpu_device pointer
  Disables Writeback and frees the Writeback memory (all asics).
  Used at driver shutdown.
  amdgpu_device_wb_init- Init Writeback driver info and allocate memory
  @adev: amdgpu_device pointer
  Initializes writeback and allocates writeback memory (all asics).
  Used at driver startup.
  Returns 0 on success or an -error on failure.
 AMDGPU_MAX_WB  sizeof(uint32_t)  8 = AMDGPU_MAX_WB 256bit slots 
 clear wb memory 
  amdgpu_device_wb_get - Allocate a wb entry
  @adev: amdgpu_device pointer
  @wb: wb index
  Allocate a wb slot for use by the driver (all asics).
  Returns 0 on success or -EINVAL on failure.
 convert to dw offset 
  amdgpu_device_wb_free - Free a wb entry
  @adev: amdgpu_device pointer
  @wb: wb index
  Free a wb slot allocated for use by the driver (all asics)
  amdgpu_device_resize_fb_bar - try to resize FB BAR
  @adev: amdgpu_device pointer
  Try to resize FB BAR to make all VRAM CPU accessible. We try very hard not
  to fail, but if any of the BARs is not accessible after the size we abort
  driver loading by returning -ENODEV.
 Bypass for VF 
 skip if the bios has already enabled large BAR 
 Check if the root BUS has 64bit memory resources 
 Trying to resize is pointless without a root hub window above 4GB 
 Limit the BAR size to what is available 
 Disable memory decoding while we change the BAR addresses and size 
 Free the VRAM and doorbell BAR, we most likely need to move both. 
	 When the doorbell or fb BAR isn't available we have no chance of
	  using the device.
  GPU helpers function.
  amdgpu_device_need_post - check if the hw need post or not
  @adev: amdgpu_device pointer
  Check if the asic has been initialized (all asics) at driver startup
  or post is needed if  hw reset is performed.
  Returns true if need or false if not.
		 for FIJI: In whole GPU pass-through virtualization case, after VM reboot
		  some old smc fw still need driver do vPost otherwise gpu hang, while
		  those smc fw version above 22.15 doesn't have this flaw, so we force
		  vpost executed for smc version below 22.15
 force vPost if error occured 
 Don't post if we need to reset whole hive on init 
 bios scratch used on CIK+ 
 check MEM_SIZE for older asics 
 if we get transitioned to only one device, take VGA back 
  amdgpu_device_vga_set_decode - enabledisable vga decode
  @pdev: PCI device pointer
  @state: enabledisable vga decode
  Enabledisable vga decode (all asics).
  Returns VGA resource flags.
  amdgpu_device_check_block_size - validate the vm block size
  @adev: amdgpu_device pointer
  Validates the vm block size specified via module parameter.
  The vm block size defines number of bits in page table versus page directory,
  a page is 4KB so we have 12 bits offset, minimum 9 bits in the
  page table and the remaining bits are in the page directory.
	 defines number of bits in page table versus page directory,
	  a page is 4KB so we have 12 bits offset, minimum 9 bits in the
  amdgpu_device_check_vm_size - validate the vm size
  @adev: amdgpu_device pointer
  Validates the vm size in GB specified via module parameter.
  The VM size is the size of the GPU virtual memory space in GB.
 no need to check the default value 
  amdgpu_device_check_arguments - validate module params
  @adev: amdgpu_device pointer
  Validates certain module parameters and updates
  the associated values used by the driver (all asics).
 gart size must be greater or equal to 32M 
 gtt size must be greater or equal to 32M 
 valid range is between 4 and 9 inclusive 
  amdgpu_switcheroo_set_state - set switcheroo state
  @pdev: pci dev pointer
  @state: vga_switcheroo state
  Callback for the switcheroo driver.  Suspends or resumes the
  the asics before or after it is powered up using ACPI methods.
 don't suspend or resume card normally 
 Shut down the device 
  amdgpu_switcheroo_can_switch - see if switcheroo state can change
  @pdev: pci dev pointer
  Callback for the switcheroo driver.  Check of the switcheroo
  state can be changed.
  Returns true if the state can be changed, false if not.
	
	 FIXME: open_count is protected by drm_global_mutex but that would lead to
	 locking inversion with the driver load path. And the access here is
	 completely racy anyway. So don't bother with locking for now.
  amdgpu_device_ip_set_clockgating_state - set the CG state
  @dev: amdgpu_device pointer
  @block_type: Type of hardware IP (SMU, GFX, UVD, etc.)
  @state: clockgating state (gate or ungate)
  Sets the requested clockgating state for all instances of
  the hardware IP specified.
  Returns the error code from the last instance.
  amdgpu_device_ip_set_powergating_state - set the PG state
  @dev: amdgpu_device pointer
  @block_type: Type of hardware IP (SMU, GFX, UVD, etc.)
  @state: powergating state (gate or ungate)
  Sets the requested powergating state for all instances of
  the hardware IP specified.
  Returns the error code from the last instance.
  amdgpu_device_ip_get_clockgating_state - get the CG state
  @adev: amdgpu_device pointer
  @flags: clockgating feature flags
  Walks the list of IPs on the device and updates the clockgating
  flags for each IP.
  Updates @flags with the feature flags for each hardware IP where
  clockgating is enabled.
  amdgpu_device_ip_wait_for_idle - wait for idle
  @adev: amdgpu_device pointer
  @block_type: Type of hardware IP (SMU, GFX, UVD, etc.)
  Waits for the request hardware IP to be idle.
  Returns 0 for success or a negative error code on failure.
  amdgpu_device_ip_is_idle - is the hardware IP idle
  @adev: amdgpu_device pointer
  @block_type: Type of hardware IP (SMU, GFX, UVD, etc.)
  Check if the hardware IP is idle or not.
  Returns true if it the IP is idle, false if not.
  amdgpu_device_ip_get_ip_block - get a hw IP pointer
  @adev: amdgpu_device pointer
  @type: Type of hardware IP (SMU, GFX, UVD, etc.)
  Returns a pointer to the hardware IP block structure
  if it exists for the asic, otherwise NULL.
  amdgpu_device_ip_block_version_cmp
  @adev: amdgpu_device pointer
  @type: enum amd_ip_block_type
  @major: major version
  @minor: minor version
  return 0 if equal or greater
  return 1 if smaller or the ip_block doesn't exist
  amdgpu_device_ip_block_add
  @adev: amdgpu_device pointer
  @ip_block_version: pointer to the IP to add
  Adds the IP block driver information to the collection of IPs
  on the asic.
  amdgpu_device_enable_virtual_display - enable virtual display feature
  @adev: amdgpu_device pointer
  Enabled the virtual display feature if the user has enabled it via
  the module parameter virtual_display.  This feature provides a virtual
  display hardware on headless boards or in virtualized environments.
  This function parses and validates the configuration string specified by
  the user and configues the virtual display configuration (number of
  virtual connectors, crtcs, etc.) specified.
  amdgpu_device_parse_gpu_info_fw - parse gpu info firmware
  @adev: amdgpu_device pointer
  Parses the asic configuration parameters specified in the gpu info
  firmware and makes them availale to the driver for use in configuring
  the asic.
  Returns 0 on success, -EINVAL on failure.
		
		  FIXME: The bounding box is still needed by Navi12, so
		  temporarily read it from gpu_info firmware. Should be droped
		  when DAL no longer needs it.
		
		  Should be droped when DAL no longer needs it.
		
		  soc bounding box info is not integrated in disocovery table,
		  we always need to parse it from gpu info firmware if needed.
  amdgpu_device_ip_early_init - run early init for hardware IPs
  @adev: amdgpu_device pointer
  Early initialization pass for hardware IPs.  The hardware IPs that make
  up each asic are discovered each IP's early_init callback is run.  This
  is the first stage in initializing the asic.
  Returns 0 on success, negative error code on failure.
 get the vbios after the asic_funcs are set up 
 Read BIOS 
get pf2vf msg info at it's earliest time
 no need to do the fw loading again if already done
  amdgpu_device_ip_init - run init for hardware IPs
  @adev: amdgpu_device pointer
  Main initialization pass for hardware IPs.  The list of all the hardware
  IPs that make up the asic is walked and the sw_init and hw_init callbacks
  are run.  sw_init initializes the software state associated with each IP
  and hw_init initializes the hardware associated with each IP.
  Returns 0 on success, negative error code on failure.
 need to do gmc hw init early so we can allocate gpu mem 
 right after GMC hw init, we create CSA 
 create ucode bo when sw_init complete
	
	  retired pages will be loaded from eeprom and reserved here,
	  it should be called after amdgpu_device_ip_hw_init_phase2  since
	  for some ASICs the RAS EEPROM code relies on SMU fully functioning
	  for I2C communication which only true at this point.
	 
	  amdgpu_ras_recovery_init may fail, but the upper only cares the
	  failure from bad gpu situation and stop amdgpu init process
	  accordingly. For other failed cases, it will still release all
	  the resource and print error message, rather than returning one
	  negative value to upper level.
	 
	  Note: theoretically, this should be called before all vram allocations
	  to protect retired page from abusing
 Don't init kfd if whole hive need to be reset during init 
  amdgpu_device_fill_reset_magic - writes reset magic to gart pointer
  @adev: amdgpu_device pointer
  Writes a reset magic value to the gart pointer in VRAM.  The driver calls
  this function before a GPU reset.  If the value is retained after a
  GPU reset, VRAM has not been lost.  Some GPU resets may destry VRAM contents.
  amdgpu_device_check_vram_lost - check if vram is valid
  @adev: amdgpu_device pointer
  Checks the reset magic value written to the gart pointer in VRAM.
  The driver calls this after a GPU reset to see if the contents of
  VRAM is lost or now.
  returns true if vram is lost, false if not.
	
	  For all ASICs with bacomode1 reset, the VRAM is
	  always assumed to be lost.
  amdgpu_device_set_cg_state - set clockgating for amdgpu device
  @adev: amdgpu_device pointer
  @state: clockgating state (gate or ungate)
  The list of all the hardware IPs that make up the asic is walked and the
  set_clockgating_state callbacks are run.
  Late initialization pass enabling clockgating for hardware IPs.
  Fini or suspend, pass disabling clockgating for hardware IPs.
  Returns 0 on success, negative error code on failure.
 skip CG for GFX on S0ix 
 skip CG for VCEUVD, it's handled specially 
 enable clockgating to save power 
 skip PG for GFX on S0ix 
 skip CG for VCEUVD, it's handled specially 
 enable powergating to save power 
	
	  MGPU fan boost feature should be enabled
	  only when there are two or more dGPUs in
	  the system
  amdgpu_device_ip_late_init - run late init for hardware IPs
  @adev: amdgpu_device pointer
  Late initialization pass for hardware IPs.  The list of all the hardware
  IPs that make up the asic is walked and the late_init callbacks are run.
  late_init covers any special initialization that an IP requires
  after all of the have been initialized or something that needs to happen
  late in the init process.
  Returns 0 on success, negative error code on failure.
 For XGMI + passthrough configuration on arcturus, enable light SBR 
		
		  Reset device p-state to low as this was booted with high.
		 
		  This should be performed only after all devices from the same
		  hive get initialized.
		 
		  However, it's unknown how many device in the hive in advance.
		  As this is counted one by one during devices initializations.
		 
		  So, we wait for all XGMI interlinked devices initialized.
		  This may bring some delays as those devices may come from
		  different hives. But that should be OK.
 need to disable SMC first 
 XXX handle errors 
 XXX handle errors 
  amdgpu_device_ip_fini - run fini for hardware IPs
  @adev: amdgpu_device pointer
  Main teardown pass for hardware IPs.  The list of all the hardware
  IPs that make up the asic is walked and the hw_fini and sw_fini callbacks
  are run.  hw_fini tears down the hardware associated with each IP
  and sw_fini tears down any software state associated with each IP.
  Returns 0 on success, negative error code on failure.
 XXX handle errors 
  amdgpu_device_delayed_init_work_handler - work handler for IB tests
  @work: work_struct.
  amdgpu_device_ip_suspend_phase1 - run suspend for hardware IPs (phase 1)
  @adev: amdgpu_device pointer
  Main suspend function for hardware IPs.  The list of all the hardware
  IPs that make up the asic is walked, clockgating is disabled and the
  suspend callbacks are run.  suspend puts the hardware and software state
  in each IP into a state suitable for suspend.
  Returns 0 on success, negative error code on failure.
 displays are handled separately 
 XXX handle errors 
 XXX handle errors 
  amdgpu_device_ip_suspend_phase2 - run suspend for hardware IPs (phase 2)
  @adev: amdgpu_device pointer
  Main suspend function for hardware IPs.  The list of all the hardware
  IPs that make up the asic is walked, clockgating is disabled and the
  suspend callbacks are run.  suspend puts the hardware and software state
  in each IP into a state suitable for suspend.
  Returns 0 on success, negative error code on failure.
 displays are handled in phase1 
 PSP lost connection when err_event_athub occurs 
 skip unnecessary suspend if we do not initialize them yet 
		 skip suspend of gfx and psp for S0ix
		  gfx is in gfxoff state, so on resume it will exit gfxoff just
		  like at runtime. PSP is also part of the always on hardware
		  so no need to suspend it.
 XXX handle errors 
 XXX handle errors 
 handle putting the SMC in the appropriate state 
  amdgpu_device_ip_suspend - run suspend for hardware IPs
  @adev: amdgpu_device pointer
  Main suspend function for hardware IPs.  The list of all the hardware
  IPs that make up the asic is walked, clockgating is disabled and the
  suspend callbacks are run.  suspend puts the hardware and software state
  in each IP into a state suitable for suspend.
  Returns 0 on success, negative error code on failure.
  amdgpu_device_ip_resume_phase1 - run resume for hardware IPs
  @adev: amdgpu_device pointer
  First resume function for hardware IPs.  The list of all the hardware
  IPs that make up the asic is walked and the resume callbacks are run for
  COMMON, GMC, and IH.  resume puts the hardware into a functional state
  after a suspend and updates the software state as necessary.  This
  function is also used for restoring the GPU after a GPU reset.
  Returns 0 on success, negative error code on failure.
  amdgpu_device_ip_resume_phase2 - run resume for hardware IPs
  @adev: amdgpu_device pointer
  First resume function for hardware IPs.  The list of all the hardware
  IPs that make up the asic is walked and the resume callbacks are run for
  all blocks except COMMON, GMC, and IH.  resume puts the hardware into a
  functional state after a suspend and updates the software state as
  necessary.  This function is also used for restoring the GPU after a GPU
  reset.
  Returns 0 on success, negative error code on failure.
  amdgpu_device_ip_resume - run resume for hardware IPs
  @adev: amdgpu_device pointer
  Main resume function for hardware IPs.  The hardware IPs
  are split into two resume functions because they are
  are also used in in recovering from a GPU reset and some additional
  steps need to be take between them.  In this case (S3S4) they are
  run sequentially.
  Returns 0 on success, negative error code on failure.
  amdgpu_device_detect_sriov_bios - determine if the board supports SR-IOV
  @adev: amdgpu_device pointer
  Query the VBIOS data tables to determine if the board supports SR-IOV.
  amdgpu_device_asic_has_dc_support - determine if DC supports the asic
  @asic_type: AMD asic type
  Check if there is DC (new modesetting infrastructre) support for an asic.
  returns true if DC has support, false if not.
		
		  We have systems in the wild with these ASICs that require
		  LVDS and VGA support which is not supported with DC.
		 
		  Fallback to the non-DC driver here by default so as not to
		  cause regressions.
		
		  We have systems in the wild with these ASICs that require
		  LVDS and VGA support which is not supported with DC.
		 
		  Fallback to the non-DC driver here by default so as not to
		  cause regressions.
  amdgpu_device_has_dc_support - check if dc is supported
  @adev: amdgpu_device pointer
  Returns true for supported, false for not supported
 It's a bug to not have a hive within this function 
	
	  Use task barrier to synchronize all xgmi reset works across the
	  hive. task_barrier_enter and task_barrier_exit will block
	  until all the threads running the xgmi reset works reach
	  those points. task_barrier_full will do both blocks.
	
	  By default timeout for non compute jobs is 10000
	  and 60000 for compute jobs.
	  In SR-IOV or passthrough mode, timeout for compute
	  jobs are 60000 by default.
		
		  There is only one value specified and
		  it should apply to all non-compute jobs.
  amdgpu_device_init - initialize the driver
  @adev: amdgpu_device pointer
  @flags: driver flags
  Initializes the driver info and hw (all asics).
  Returns 0 for success or an error on failure.
  Called at driver startup.
	 mutex initialization are all done here so we
	
	  If throttling continues, logging will be performed every minute
	  to avoid log flooding. "-1" is subtracted since the thermal
	  throttling interrupt comes every second. Thus, the total logging
	  interval is 59 seconds(retelimited printk interval) + 1(waiting
	  for throttling interrupt) = 60 seconds.
 Registers mapping 
 TODO: block userspace mapping of io register 
 detect hw virtualization here 
 early init functions 
 enable PCIE atomic ops 
 doorbell bar mapping and doorbell index init
 post the asic on emulation mode 
 detect if we are with an SRIOV vbios 
	 check if we need to reset the asic
	   E.g., driver was not cleanly unloaded previously, etc.
 Only need to init necessary block for SMU to handle the reset 
 Post card if necessary 
 Initialize clocks 
 Initialize clocks 
 init i2c buses 
 Fence driver 
 init the mode config 
 failed in exclusive mode due to timeout 
 Don't send request since VF is inactive. 
 Initialize the buffer migration limit. 
 Allow 8 MBs. 
 Get a log2 for easy divisions. 
	
	  Register gpu instance before amdgpu_device_enable_mgpu_fan_boost.
	  Otherwise the mgpu fan boost feature will be skipped due to the
	  gpu instance is counted less.
	 enable clockgating, etc. after ib tests, etc. since some blocks require
	  explicit gating rather than handling it automatically.
 must succeed. 
 Have stored pci confspace at hand for restore in sudden PCI error 
 if we have > 1 VGA cards, then disable the amdgpu VGA resources 
	 this will fail for cards that aren't VGA class devices, just
 Clear all CPU mappings pointing to this device 
 Unmap all mapped bars - Doorbell, registers and VRAM 
 Memory manager related 
  amdgpu_device_fini - tear down the driver
  @adev: amdgpu_device pointer
  Tear down the driver info (all asics).
  Called at driver shutdown.
	 make sure IB test finished before entering exclusive mode
	  to avoid preemption on IB test
 disable all interrupts 
 free i2c buses 
  amdgpu_device_evict_resources - evict device resources
  @adev: amdgpu device object
  Evicts all ttm device resources(vram BOs, gart table) from the lru list
  of the vram memory type. Mainly used for evicting device resources
  at suspend time.
 No need to evict vram on APUs for suspend to ram 
  Suspend & resume.
  amdgpu_device_suspend - initiate device suspend
  @dev: drm dev pointer
  @fbcon : notify the fbdev of suspend
  Puts the hw in the suspend state (all asics).
  Returns 0 for success or an error on failure.
  Called at driver suspend.
 First evict vram memory 
	 This second call to evict device resources is to evict
	  the gart page table using the CPU.
  amdgpu_device_resume - initiate device resume
  @dev: drm dev pointer
  @fbcon : notify the fbdev of resume
  Bring the hw back to operating state (all asics).
  Returns 0 for success or an error on failure.
  Called at driver resume.
 post card 
 Make sure IB tests flushed 
	
	  Most of the connector probing functions try to acquire runtime pm
	  refs to ensure that the GPU is powered on when connector polling is
	  performed. Since we're calling this from a runtime PM callback,
	  trying to acquire rpm refs will cause us to deadlock.
	 
	  Since we're guaranteed to be holding the rpm lock, it's safe to
	  temporarily disable the rpm helpers so this doesn't deadlock us.
  amdgpu_device_ip_check_soft_reset - did soft reset succeed
  @adev: amdgpu_device pointer
  The list of all the hardware IPs that make up the asic is walked and
  the check_soft_reset callbacks are run.  check_soft_reset determines
  if the asic is still hung or not.
  Returns true if any of the IPs are still in a hung state, false if not.
  amdgpu_device_ip_pre_soft_reset - prepare for soft reset
  @adev: amdgpu_device pointer
  The list of all the hardware IPs that make up the asic is walked and the
  pre_soft_reset callbacks are run if the block is hung.  pre_soft_reset
  handles any IP specific hardware or software state changes that are
  necessary for a soft reset to succeed.
  Returns 0 on success, negative error code on failure.
  amdgpu_device_ip_need_full_reset - check if a full asic reset is needed
  @adev: amdgpu_device pointer
  Some hardware IPs cannot be soft reset.  If they are hung, a full gpu
  reset is necessary to recover.
  Returns true if a full asic reset is required, false if not.
  amdgpu_device_ip_soft_reset - do a soft reset
  @adev: amdgpu_device pointer
  The list of all the hardware IPs that make up the asic is walked and the
  soft_reset callbacks are run if the block is hung.  soft_reset handles any
  IP specific hardware or software state changes that are necessary to soft
  reset the IP.
  Returns 0 on success, negative error code on failure.
  amdgpu_device_ip_post_soft_reset - clean up from soft reset
  @adev: amdgpu_device pointer
  The list of all the hardware IPs that make up the asic is walked and the
  post_soft_reset callbacks are run if the asic was hung.  post_soft_reset
  handles any IP specific hardware or software state changes that are
  necessary after the IP has been soft reset.
  Returns 0 on success, negative error code on failure.
  amdgpu_device_recover_vram - Recover some VRAM contents
  @adev: amdgpu_device pointer
  Restores the contents of VRAM buffers from the shadows in GTT.  Used to
  restore things like GPUVM page tables after a GPU reset where
  the contents of VRAM might be lost.
  Returns:
  0 on success, negative error code on failure.
 No need to recover an evicted BO 
  amdgpu_device_reset_sriov - reset ASIC for SR-IOV vf
  @adev: amdgpu_device pointer
  @from_hypervisor: request from hypervisor
  do VF FLR and reinitialize Asic
  return 0 means succeeded otherwise failed
 Resume IP prior to SMC 
 we need recover gart prior to run SMCCPSDMA resume 
 now we are okay to resume SMCCPSDMA 
  amdgpu_device_has_job_running - check if there is any job in mirror list
  @adev: amdgpu_device pointer
  check if there is any job in mirror list
  amdgpu_device_should_recover_gpu - check if we should try GPU recovery
  @adev: amdgpu_device pointer
  Check amdgpu_gpu_recovery and SRIOV status to see if we should try to recover
  a hung GPU.
 disable BM 
 wait for asic to come out of reset 
 stop the data exchange thread 
 block all schedulers and reset given job's ring 
		clear job fence from fence drv to avoid force_completion
 after all hw jobs are reset, hw fence is meaningless, so force_completion 
 If reset handler not implemented, continue; otherwise return 
 Don't suspend on bare metal if we are not going to HW reset the ASIC 
 Try reset handler method first 
 If reset handler not implemented, continue; otherwise return 
 Reset handler not implemented, use the default method 
	
	  ASIC reset has to be done on all XGMI hive nodes ASAP
	  to allow proper links negotiation in FW (within 1 sec)
 For XGMI run all resets in parallel to speed up the process 
 For XGMI wait for all resets to complete before proceed 
 post card 
				
				  Add this ASIC as tracked as reset was already
				  complete successfully.
				
				  The GPU enters bad state once faulty pages
				  by ECC has reached the threshold, and ras
				  recovery is scheduled next. So add one check
				  here to break recovery if it indeed exceeds
				  bad page threshold, and remind user to
				  retire this GPU or setting one bigger
				  bad_page_threshold value to fix this once
				  probing driver again.
 must succeed. 
 Update PSP FW topology after reset 
  to lockup a list of amdgpu devices in a hive safely, if not a hive
  with multiple nodes, it will be similar as amdgpu_device_lock_adev.
  unlock won't require roll back.
		
		  if the lockup iteration break in the middle of a hive,
		  it may means there may has a race issue,
		  or a hive device locked up independently.
		  we may be in trouble and may not, so will try to roll back
		  the lock and give out a warnning.
	
	  For now, only BACO and mode1 reset are confirmed
	  to suffer the audio issue without proper suspended.
		
		  If we cannot get the audio device autosuspend delay,
		  a fixed 4S interval will be used. Considering 3S is
		  the audio controller default autosuspend delay setting.
		  4S used here is guaranteed to cover that.
 TODO: abort the succeeding gpu reset? 
 clear job's guilty and depend the folowing step to decide the real one 
		 for the real bad job, it will be resubmitted twice, adding a dma_fence_get
 timeout 
 set guilty 
 do hw reset 
			
			  add reset counter so that the following
			  resubmitted job could flush vmid
 got the hw fence, signal finished fence 
 remove node from list and free the job 
  amdgpu_device_gpu_recover - reset the asic and recover scheduler
  @adev: amdgpu_device pointer
  @job: which job trigger hang
  Attempt to reset the GPU if it has hung (all asics).
  Attempt to do soft-reset or full-reset and reinitialize Asic
  Returns 0 for success or an error on failure.
	
	  Special case: RAS triggered and full reset isn't supported
	
	  Flush RAM to disk so that after reboot
	  the user can read log and see why the system rebooted.
	
	  Here we trylock to avoid chain of resets executing from
	  either trigger by jobs on different adevs in XGMI hive or jobs on
	  different schedulers for same device while this TO handler is running.
	  We always reset all schedulers for device and all devices for XGMI
	  hive so that should take care of them too.
	
	  lock the device before we try to operate the linked list
	  if didn't get the device lock, don't touch the linked list since
	  others may iterating it.
 even we skipped this reset, still need to set the job to guilty 
	
	  Build list of devices to reset.
	  In case we are in XGMI hive mode, resort the device list
	  to put adev in the 1st position.
 block all schedulers and reset given job's ring 
		
		  Try to put the audio codec into suspend state
		  before gpu reset started.
		 
		  Due to the power domain of the graphics device
		  is shared with AZ power domain. Without this,
		  we may change the audio hardware from behind
		  the audio driver's back. That will trigger
		  some audio codec errors.
		
		  Mark these ASICs to be reseted as untracked first
		  And add them back after reset completed
 disable ras on ALL IPs 
	
	  Must check guilty signal here since after this point all old
	  HW fences are force signaled.
	 
	  job->base holds a reference to parent fence
 Rest of adevs pre asic reset from XGMI hive. 
TODO Should we stop ?
 Actual ASIC resets if needed.
 TODO Implement XGMI hive reset logic for SRIOV 
 Post ASIC reset for all devs .
		
		  Sometimes a later bad compute job can block a good gfx job as gfx
		  and compute ring share internal GC HW mutually. We add an additional
		  guilty jobs recheck step to find the real guilty job, it synchronously
		  submits and pends for the first job being signaled. If it gets timeout,
		  we identify it as a real guilty job.
 No point to resubmit jobs if we didn't HW reset
 bad news, how to tell it to userspace ? 
 unlock kfd: SRIOV would do it separately 
		 kfd_post_reset will do nothing if kfd device is not initialized,
		  need to bring up kfd here if it's not be initialized before
  amdgpu_device_get_pcie_info - fence pcie info about the PCIE slot
  @adev: amdgpu_device pointer
  Fetchs and stores in the driver the PCIE capabilities (gen speed
  and lanes) of the slot the device is in. Handles APUs and
  virtualized environments where PCIE config space may not be available.
 covers APUs as well 
 asic caps 
 platform caps 
  amdgpu_pci_error_detected - Called when a PCI error is detected.
  @pdev: PCI device struct
  @state: PCI channel state
  Description: Called when a PCI error is detected.
  Return: PCI_ERS_RESULT_NEED_RESET or PCI_ERS_RESULT_DISCONNECT.
 Fatal error, prepare for slot reset 
		
		  Cancel and wait for all TDRs in progress if failing to
		  set  adev->in_gpu_reset in amdgpu_device_lock_adev
		 
		  Locking adev->reset_sem will prevent any external access
		  to GPU during PCI error recovery
		
		  Block any work scheduling as we do for regular GPU reset
		  for the duration of the recovery
 Permanent error, prepare for device removal 
  amdgpu_pci_mmio_enabled - Enable MMIO and dump debug registers
  @pdev: pointer to PCI device
 TODO - dump whatever for debugging purposes 
	 This called only if amdgpu_pci_error_detected returns
	  PCI_ERS_RESULT_CAN_RECOVER. Readwrite to the device still
	  works, no need to reset slot.
  amdgpu_pci_slot_reset - Called when PCI slot has been reset.
  @pdev: PCI device struct
  Description: This routine is called by the pci error recovery
  code after the PCI slot has been reset, just before we
  should resume normal operations.
 wait for asic to come out of reset 
 Restore PCI confspace 
 confirm  ASIC came out of reset 
  amdgpu_pci_resume() - resume normal ops after PCI reset
  @pdev: pointer to PCI device
  Called when the error recovery driver tells us that its
  OK to resume normal operation.
 Only continue execution for the case of pci_channel_io_frozen 
  Copyright 2008 Advanced Micro Devices, Inc.
  Copyright 2008 Red Hat Inc.
  Copyright 2009 Jerome Glisse.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: Dave Airlie
           Alex Deucher
           Jerome Glisse
           Christian König
  IB
  IBs (Indirect Buffers) and areas of GPU accessible memory where
  commands are stored.  You can put a pointer to the IB in the
  command ring and the hw will fetch the commands from the IB
  and execute them.  Generally userspace acceleration drivers
  produce command buffers which are send to the kernel and
  put in IBs for execution by the requested ring.
  amdgpu_ib_get - request an IB (Indirect Buffer)
  @adev: amdgpu_device pointer
  @vm: amdgpu_vm pointer
  @size: requested IB size
  @pool_type: IB pool type (delayed, immediate, direct)
  @ib: IB object returned
  Request an IB (all asics).  IBs are allocated using the
  suballocator.
  Returns 0 on success, error on failure.
 flush the cache before commit the IB 
  amdgpu_ib_free - free an IB (Indirect Buffer)
  @adev: amdgpu_device pointer
  @ib: IB object to free
  @f: the fence SA bo need wait on for the ib alloation
  Free an IB (all asics).
  amdgpu_ib_schedule - schedule an IB (Indirect Buffer) on the ring
  @ring: ring index the IB is associated with
  @num_ibs: number of IBs to schedule
  @ibs: IB objects to schedule
  @job: job to schedule
  @f: fence created during this submission
  Schedule an IB on the associated ring (all asics).
  Returns 0 on success, error on failure.
  On SI, there are two parallel engines fed from the primary ring,
  the CE (Constant Engine) and the DE (Drawing Engine).  Since
  resource descriptors have moved to memory, the CE allows you to
  prime the caches while the DE is updating register state so that
  the resource descriptors will be already in cache when the draw is
  processed.  To accomplish this, the userspace driver submits two
  IBs, one for the CE and one for the DE.  If there is a CE IB (called
  a CONST_IB), it will be put on the ring prior to the DE IB.  Prior
  to SI there was just a DE IB.
 ring tests don't use a job 
	 Setup initial TMZiness and send it off.
 wrap the last IB with fence 
  amdgpu_ib_pool_init - Init the IB (Indirect Buffer) pool
  @adev: amdgpu_device pointer
  Initialize the suballocator to manage a pool of memory
  for use as IBs (all asics).
  Returns 0 on success, error on failure.
  amdgpu_ib_pool_fini - Free the IB (Indirect Buffer) pool
  @adev: amdgpu_device pointer
  Tear down the suballocator managing the pool of memory
  for use as IBs (all asics).
  amdgpu_ib_ring_tests - test IBs on the rings
  @adev: amdgpu_device pointer
  Test an IB (Indirect Buffer) on each ring.
  If the test fails, disable the ring.
  Returns 0 on success, error if the primary GFX ring
  IB test fails.
		 for MM engines in hypervisor side they are not scheduled together
		  with CP and SDMA engines, so even in exclusive mode MM engine could
		  still running on other VF thus the IB TEST TIMEOUT for MM engines
		  under SR-IOV should be set to a long time. 8 sec should be enough
		  for the MM comes back to this VF.
		 for CP & SDMA engines since they are scheduled together so
		  need to make the timeout width enough to cover the time
		  cost waiting for it coming back under RUNTIME only
		 KIQ rings don't have an IB test because we never submit IBs
		  to them and they have no interrupt support.
 MM engine need more time 
 oh, oh, that's really bad 
  Debugfs info
  Copyright 2019 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  sdma_v5_0_init_microcode - load ucode images from disk
  @adev: amdgpu_device pointer
  Use the firmware interface to load the ucode images into
  the driver (not loaded into hw).
  Returns 0 on success, error on failure.
 emulation only, won't work on real chip
 navi10 real chip need to use PSP to load firmware
 this is the offset we need patch later 
 insert dummy here and patch it later 
  sdma_v5_0_ring_get_rptr - get the current read pointer
  @ring: amdgpu ring pointer
  Get the current rptr from the hardware (NAVI10+).
 XXX check if swapping is necessary on BE 
  sdma_v5_0_ring_get_wptr - get the current write pointer
  @ring: amdgpu ring pointer
  Get the current wptr from the hardware (NAVI10+).
 XXX check if swapping is necessary on BE 
  sdma_v5_0_ring_set_wptr - commit the write pointer
  @ring: amdgpu ring pointer
  Write the wptr back to the hardware (NAVI10+).
 XXX check if swapping is necessary on BE 
  sdma_v5_0_ring_emit_ib - Schedule an IB on the DMA engine
  @ring: amdgpu ring pointer
  @job: job to retrieve vmid from
  @ib: IB object to schedule
  @flags: unused
  Schedule an IB in the DMA ring (NAVI10).
	 An IB packet must end on a 8 DW boundary--the next dword
	  must be on a 8-dword boundary. Our IB packet below is 6
	  dwords long, thus add x number of NOPs, such that, in
	  modular arithmetic,
	  wptr + 6 + x = 8k, k >= 0, which in C is,
	  (wptr + 6 + x) % 8 = 0.
	  The expression below, is a solution of x.
 base must be 32 byte aligned 
  sdma_v5_0_ring_emit_mem_sync - flush the IB by graphics cache rinse
  @ring: amdgpu ring pointer
  @job: job to retrieve vmid from
  @ib: IB object to schedule
  flush the IB by graphics cache rinse.
 flush entire cache L0L1L2, this can be optimized by performance requirement 
  sdma_v5_0_ring_emit_hdp_flush - emit an hdp flush on the DMA ring
  @ring: amdgpu ring pointer
  Emit an hdp flush packet on the requested DMA ring.
 == 
 reference 
 mask 
 retry count, poll interval 
  sdma_v5_0_ring_emit_fence - emit a fence on the DMA ring
  @ring: amdgpu ring pointer
  @addr: address
  @seq: sequence number
  @flags: fence related flags
  Add a DMA fence packet to the ring to write
  the fence seq number and DMA trap packet to generate
  an interrupt if needed (NAVI10).
 write the fence 
 Ucached(UC) 
 zero in first two bits 
 optionally write high bits as well 
 zero in first two bits 
 generate an interrupt 
  sdma_v5_0_gfx_stop - stop the gfx async dma engines
  @adev: amdgpu_device pointer
  Stop the gfx async dma ring buffers (NAVI10).
  sdma_v5_0_rlc_stop - stop the compute async dma engines
  @adev: amdgpu_device pointer
  Stop the compute async dma queues (NAVI10).
 XXX todo 
  sdma_v5_0_ctx_switch_enable - stop the async dma engines context switch
  @adev: amdgpu_device pointer
  @enable: enabledisable the DMA MEs context switch.
  Halt or unhalt the async dma engines context switch (NAVI10).
  sdma_v5_0_enable - stop the async dma engines
  @adev: amdgpu_device pointer
  @enable: enabledisable the DMA MEs.
  Halt or unhalt the async dma engines (NAVI10).
  sdma_v5_0_gfx_resume - setup and start the async dma engines
  @adev: amdgpu_device pointer
  Set up the gfx DMA ring buffers and enable them (NAVI10).
  Returns 0 for success, error for failure.
 Set ring buffer size in dwords 
 Initialize the ring buffer's read and write pointers 
 setup the wptr shadow polling 
 set the wb address whether it's enabled or not 
 before programing wptr to a less value, need set minor_ptr_update first 
 only bare-metal use register write for wptr 
 set minor_ptr_update to 0 after wptr programed 
 set utc l1 enable flag always to 1 
 enable MCBP 
 Set up RESP_MODE to non-copy addresses 
 program default cache read and write policy 
 clean read policy and write policy bits 
 unhalt engine 
 enable DMA RB 
 enable DMA IBs 
 bare-metal sequence doesn't need below to lines 
  sdma_v5_0_rlc_resume - setup and start the async dma engines
  @adev: amdgpu_device pointer
  Set up the compute DMA queues and enable them (NAVI10).
  Returns 0 for success, error for failure.
  sdma_v5_0_load_microcode - load the sDMA ME ucode
  @adev: amdgpu_device pointer
  Loads the sDMA01 ucode.
  Returns 0 for success, -EINVAL if the ucode is not available.
 halt the MEs 
  sdma_v5_0_start - setup and start the async dma engines
  @adev: amdgpu_device pointer
  Set up the DMA engines and enable them (NAVI10).
  Returns 0 for success, error for failure.
 set RB registers 
 unhalt the MEs 
 enable sdma ring preemption 
 start the gfx rings and rlc compute queues 
  sdma_v5_0_ring_test_ring - simple async dma engine test
  @ring: amdgpu_ring structure holding ring information
  Test the DMA engine by writing using it to write an
  value to memory. (NAVI10).
  Returns 0 for success, error for failure.
  sdma_v5_0_ring_test_ib - test an IB on the DMA engine
  @ring: amdgpu_ring structure holding ring information
  @timeout: timeout value in jiffies, or MAX_SCHEDULE_TIMEOUT
  Test a simple IB in the DMA ring (NAVI10).
  Returns 0 on success, error on failure.
  sdma_v5_0_vm_copy_pte - update PTEs by copying them from the GART
  @ib: indirect buffer to fill with commands
  @pe: addr of the page entry
  @src: src addr to copy from
  @count: number of page entries to update
  Update PTEs by copying them from the GART using sDMA (NAVI10).
 srcdst endian swap 
  sdma_v5_0_vm_write_pte - update PTEs by writing them manually
  @ib: indirect buffer to fill with commands
  @pe: addr of the page entry
  @value: dst addr to write into pe
  @count: number of page entries to update
  @incr: increase next addr by incr bytes
  Update PTEs by writing them manually using sDMA (NAVI10).
  sdma_v5_0_vm_set_pte_pde - update the page tables using sDMA
  @ib: indirect buffer to fill with commands
  @pe: addr of the page entry
  @addr: dst addr to write into pe
  @count: number of page entries to update
  @incr: increase next addr by incr bytes
  @flags: access flags
  Update the page tables using sDMA (NAVI10).
 for physically contiguous pages (vram) 
 dst addr 
 mask 
 value 
 increment size 
 number of entries 
  sdma_v5_0_ring_pad_ib - pad the IB
  @ring: amdgpu_ring structure holding ring information
  @ib: indirect buffer to fill with padding
  Pad the IB with NOPs to a boundary multiple of 8.
  sdma_v5_0_ring_emit_pipeline_sync - sync the pipeline
  @ring: amdgpu_ring pointer
  Make sure all previous operations are completed (CIK).
 wait for idle 
 equal 
 reference 
 mask 
 retry count, poll interval 
  sdma_v5_0_ring_emit_vm_flush - vm flush using sDMA
  @ring: amdgpu_ring pointer
  @vmid: vmid number to use
  @pd_addr: address
  Update the page table base and flush the VM TLB
  using sDMA (NAVI10).
 equal 
 reference 
 mask 
 wait for a cycle to reset vm_inv_eng_ack 
 SDMA trap event 
 SDMA trap event 
get DWORD offset
 get DWORD offset
 todo 
 assert preemption condition 
 emit the trailing fence 
 assert IB preemption 
 poll the trailing fence 
 deassert IB preemption 
 deassert the preemption condition 
 XXX compute 
 XXX compute 
 XXX page queue
 XXX compute 
 XXX compute 
 XXX page queue
 Enable sdma clock gating 
 Disable sdma clock gating 
 Enable sdma mem light sleep 
 Disable sdma mem light sleep 
 AMD_CG_SUPPORT_SDMA_MGCG 
 AMD_CG_SUPPORT_SDMA_LS 
 sdma_v5_0_ring_init_cond_exec 
 sdma_v5_0_ring_emit_hdp_flush 
 hdp_invalidate 
 sdma_v5_0_ring_emit_pipeline_sync 
 sdma_v5_0_ring_emit_vm_flush 
 sdma_v5_0_ring_emit_fence x3 for user fence, vm fence 
 sdma_v5_0_ring_emit_ib 
  sdma_v5_0_emit_copy_buffer - copy buffer using the sDMA engine
  @ib: indirect buffer to copy to
  @src_offset: src GPU address
  @dst_offset: dst GPU address
  @byte_count: number of bytes to xfer
  @tmz: if a secure copy should be used
  Copy GPU buffers using the DMA engine (NAVI10).
  Used by the amdgpu ttm implementation to move pages if
  registered as the asic copy callback.
 srcdst endian swap 
  sdma_v5_0_emit_fill_buffer - fill buffer using the sDMA engine
  @ib: indirect buffer to fill
  @src_data: value to write to buffer
  @dst_offset: dst GPU address
  @byte_count: number of bytes to xfer
  Fill GPU buffers using the DMA engine (NAVI10).
  Copyright 2014 Advanced Micro Devices, Inc.
  All Rights Reserved.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sub license, andor sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
  THE COPYRIGHT HOLDERS, AUTHORS ANDOR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,
  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  USE OR OTHER DEALINGS IN THE SOFTWARE.
  The above copyright notice and this permission notice (including the
  next paragraph) shall be included in all copies or substantial portions
  of the Software.
  Authors:
     Christian König <christian.koenig@amd.com>
  amdgpu_sync_create - zero init sync object
  @sync: sync object to initialize
  Just clear the sync object for now.
  amdgpu_sync_same_dev - test if fence belong to us
  @adev: amdgpu device to use for the test
  @f: fence to test
  Test if the fence was issued by us.
  amdgpu_sync_get_owner - extract the owner of a fence
  @f: fence get the owner from
  Extract who originally created the fence.
  amdgpu_sync_keep_later - Keep the later fence
  @keep: existing fence to test
  @fence: new fence
  Either keep the existing fence or the new one, depending which one is later.
  amdgpu_sync_add_later - add the fence to the hash
  @sync: sync object to add the fence to
  @f: fence to add
  Tries to add the fence to an existing hash entry. Returns true when an entry
  was found, false otherwise.
  amdgpu_sync_fence - remember to sync to this fence
  @sync: sync object to add fence to
  @f: fence to sync to
  Add the fence to the sync object.
  amdgpu_sync_vm_fence - remember to sync to this VM fence
  @sync: sync object to add fence to
  @fence: the VM fence to add
  Add the fence to the sync object and remember it as VM update.
 Determine based on the owner and mode if we should sync to a fence or not 
 Always sync to moves, no matter what 
	 We only want to trigger KFD eviction fences on
	  evict or move jobs. Skip KFD fences otherwise.
 Never sync to VM updates either. 
 Ignore fences depending on the sync mode 
  amdgpu_sync_resv - sync to a reservation object
  @adev: amdgpu device
  @sync: sync object to add fences from reservation object to
  @resv: reservation object with embedded fence
  @mode: how owner affects which fences we sync to
  @owner: owner of the planned job submission
  Sync to the fence
 always sync to the exclusive fence 
  amdgpu_sync_peek_fence - get the next fence not signaled yet
  @sync: the sync object
  @ring: optional ring to use for test
  Returns the next fence not signaled yet without removing it from the sync
  object.
			 For fences from the same ring it is sufficient
			  when they are scheduled.
  amdgpu_sync_get_fence - get the next fence from the sync object
  @sync: sync object to use
  Get and removes the next fence from the sync object not signaled yet.
  amdgpu_sync_clone - clone a sync object
  @source: sync object to clone
  @clone: pointer to destination sync object
  Adds references to all unsignaled fences in @source to @clone. Also
  removes signaled fences from @source while at it.
  amdgpu_sync_free - free the sync object
  @sync: sync object to use
  Free the sync object.
  amdgpu_sync_init - init sync object subsystem
  Allocate the slab allocator.
  amdgpu_sync_fini - fini sync object subsystem
  Free the slab allocator.
  Copyright 2014 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 Enable pflip interrupts 
 Disable pflip interrupts 
  dce_v11_0_page_flip - pageflip callback.
  @adev: amdgpu_device pointer
  @crtc_id: crtc to cleanup pageflip on
  @crtc_base: new address of the crtc (GPU MC address)
  @async: asynchronous flip
  Triggers the actual pageflip by updating the primary
  surface base address.
 flip immediate for async, default is vsync 
 update pitch 
 update the scanout addresses 
 writing to the low address triggers the update 
 post the write 
  dce_v11_0_hpd_sense - hpd sense callback.
  @adev: amdgpu_device pointer
  @hpd: hpd (hotplug detect) pin
  Checks if a digital monitor is connected (evergreen+).
  Returns true if connected, false if not connected.
  dce_v11_0_hpd_set_polarity - hpd set polarity callback.
  @adev: amdgpu_device pointer
  @hpd: hpd (hotplug detect) pin
  Set the polarity of the hpd pin (evergreen+).
  dce_v11_0_hpd_init - hpd setup callback.
  @adev: amdgpu_device pointer
  Setup the hpd pins used by the card (evergreen+).
  Enable the pin, set the polarity, and enable the hpd interrupts.
			 don't try to enable hpd on eDP or LVDS avoid breaking the
			  aux dp channel on imac and help (but not completely fix)
			  https:bugzilla.redhat.comshow_bug.cgi?id=726143
			  also avoid interrupt storms during dpms.
  dce_v11_0_hpd_fini - hpd tear down callback.
  @adev: amdgpu_device pointer
  Tear down the hpd pins used by the card (evergreen+).
  Disable the hpd interrupts.
 Lockout access through VGA aperture
 disable VGA render 
Disable VGA render and enabled crtc, if has DCE engine
Disable crtc
 LVDSeDP FMT is set up by atom 
 not needed for analog 
 XXX sort out optimal dither settings 
 XXX sort out optimal dither settings 
 XXX sort out optimal dither settings 
 not needed 
 display watermark setup 
  dce_v11_0_line_buffer_adjust - Set up the line buffer
  @adev: amdgpu_device pointer
  @amdgpu_crtc: the selected display controller
  @mode: the current display mode on the selected display
  controller
  Setup up the line buffer allocation for
  the selected display controller (CIK).
  Returns the line buffer size in pixels.
	
	  Line Buffer Setup
	  There are 6 line buffers, one for each display controllers.
	  There are 3 partitions per LB. Select the number of partitions
	  to enable based on the display width.  For display widths larger
	  than 4096, you need use to use 2 display controllers and combine
	  them using the stereo blender.
 controller not enabled, so no lb used 
  cik_get_number_of_dram_channels - get the number of dram channels
  @adev: amdgpu_device pointer
  Look up the number of video ram channels (CIK).
  Used for display watermark bandwidth calculations
  Returns the number of dram channels
 number of dram channels 
 bandwidth per dram data pin in kHz 
 engine clock in kHz 
 display clock in kHz 
 viewport width 
 active display time in ns 
 blank time in ns 
 mode is interlaced 
 vertical scale ratio 
 number of active crtcs 
 bytes per pixel display + overlay 
 line buffer allocated to pipe 
 vertical scaler taps 
  dce_v11_0_dram_bandwidth - get the dram bandwidth
  @wm: watermark calculation data
  Calculate the raw dram bandwidth (CIK).
  Used for display watermark bandwidth calculations
  Returns the dram bandwidth in MBytess
 Calculate raw DRAM Bandwidth 
 0.7 
  dce_v11_0_dram_bandwidth_for_display - get the dram bandwidth for display
  @wm: watermark calculation data
  Calculate the dram bandwidth used for display (CIK).
  Used for display watermark bandwidth calculations
  Returns the dram bandwidth for display in MBytess
 Calculate DRAM Bandwidth and the part allocated to display. 
 0.3 to 0.7 
 XXX worse case value 0.3 
  dce_v11_0_data_return_bandwidth - get the data return bandwidth
  @wm: watermark calculation data
  Calculate the data return bandwidth used for display (CIK).
  Used for display watermark bandwidth calculations
  Returns the data return bandwidth in MBytess
 Calculate the display Data return Bandwidth 
 0.8 
  dce_v11_0_dmif_request_bandwidth - get the dmif bandwidth
  @wm: watermark calculation data
  Calculate the dmif bandwidth used for display (CIK).
  Used for display watermark bandwidth calculations
  Returns the dmif bandwidth in MBytess
 Calculate the DMIF Request Bandwidth 
 0.8 
  dce_v11_0_available_bandwidth - get the min available bandwidth
  @wm: watermark calculation data
  Calculate the min available bandwidth used for display (CIK).
  Used for display watermark bandwidth calculations
  Returns the min available bandwidth in MBytess
 Calculate the Available bandwidth. Display can use this temporarily but not in average. 
  dce_v11_0_average_bandwidth - get the average available bandwidth
  @wm: watermark calculation data
  Calculate the average available bandwidth used for display (CIK).
  Used for display watermark bandwidth calculations
  Returns the average available bandwidth in MBytess
	 Calculate the display mode Average Bandwidth
	  DisplayMode should contain the source and destination dimensions,
	  timing, etc.
  dce_v11_0_latency_watermark - get the latency watermark
  @wm: watermark calculation data
  Calculate the latency watermark (CIK).
  Used for display watermark bandwidth calculations
  Returns the latency watermark in ns
 First calculate the latency in ns 
 2000 ns. 
 dc pipe latency 
  dce_v11_0_average_bandwidth_vs_dram_bandwidth_for_display - check
  average and available dram bandwidth
  @wm: watermark calculation data
  Check if the display average bandwidth fits in the display
  dram bandwidth (CIK).
  Used for display watermark bandwidth calculations
  Returns true if the display fits, false if not.
  dce_v11_0_average_bandwidth_vs_available_bandwidth - check
  average and available bandwidth
  @wm: watermark calculation data
  Check if the display average bandwidth fits in the display
  available bandwidth (CIK).
  Used for display watermark bandwidth calculations
  Returns true if the display fits, false if not.
  dce_v11_0_check_latency_hiding - check latency hiding
  @wm: watermark calculation data
  Check latency hiding (CIK).
  Used for display watermark bandwidth calculations
  Returns true if the display fits, false if not.
  dce_v11_0_program_watermarks - program display watermarks
  @adev: amdgpu_device pointer
  @amdgpu_crtc: the selected display controller
  @lb_size: line buffer size
  @num_heads: number of display controllers in use
  Calculate and program the display watermarks for the
  selected display controller (CIK).
 watermark for high clocks 
 XXX: get this from fb config 
 set for high clocks 
 possibly force display priority to high 
 should really do this at mode validation time... 
 watermark for low clocks 
 XXX: get this from fb config 
 set for low clocks 
 possibly force display priority to high 
 should really do this at mode validation time... 
 select wm A 
 select wm B 
 restore original selection 
 save values for DPM 
 Save number of lines the linebuffer leads before the scanout 
  dce_v11_0_bandwidth_update - program display watermarks
  @adev: amdgpu_device pointer
  Calculate and program the display watermarks and line
  buffer allocation (CIK).
 program the speaker allocation 
 set HDMI mode 
 stereo 
 disable audio.  it will be set up later 
 XXX remove once we switch to ip funcs 
  update the N and CTS parameters for a given pixel clock rate
  build a HDMI Video Info Frame
 XXX two dtos; generally use dto0 for hdmi 
	 Express [24MHz  target pixel clock] as an exact rational
	  number (coefficient of two integer numbers.  DCCG_AUDIO_DTOx_PHASE
	  is the numerator, DCCG_AUDIO_DTOx_MODULE is the denominator
  update the info frames with the data from the current display mode
 Silent, r600_hdmi_enable will raise WARN for us 
 hdmi deep color mode general control packets setup, if bpc > 8 
 disable audio prior to setting up hw 
 send null packets when required 
 send null packets when required 
 send general control packets 
 send general control packets every frame 
 enable audio info frames (frames won't be set until audio is enabled) 
 required for audio info values to be updated 
 required for audio info values to be updated 
 anything other than 0 
 unset HDMI_GC_AVMUTE 
 set the default audio delay 
 should be suffient for all audio modes and small enough for all hblanks 
 allow 60958 channel status fields to be updated 
 clear SW CTS value 
 select SW CTS value 
 allow hw to sent ACR packets when required 
 enable AVI info frames 
 required for audio info values to be updated 
 send audio packets 
 enable audio after to setting up hw 
 Silent, r600_hdmi_enable will raise WARN for us 
 DCE11 has audio blocks tied to DIG encoders 
 no fb bound 
	 If atomic, assume fb object is pinned & idle & fenced and
	  just update base pointers
 Greater 8 bpc fb needs to bypass hw-lut to retain precision 
 Greater 8 bpc fb needs to bypass hw-lut to retain precision 
	 Make sure surface address is updated at vertical blank rather than
	  horizontal blank
	
	  The LUT only has 256 slots for indexing by a 8 bpc fb. Bypass the LUT
	  for > 8 bpc scanout to avoid truncation of fb indices to 8 msb's, to
	  retain the full precision throughout the pipeline.
 set pageflip to happen anywhere in vblank interval 
 Bytes per pixel may have changed 
 XXX match this to the depth of the crtc fmt block, move to modeset? 
	 XXX this only needs to be programmed once per crtc at startup,
	  not sure where the best place for it is
  dce_v11_0_pick_pll - Allocate a PPLL for use by the crtc.
  @crtc: drm crtc
  Returns the PPLL (Pixel PLL) to be used by the crtc.  For DP monitors
  a single PPLL can be used for all DP crtcsencoders.  For non-DP
  monitors a dedicated PPLL must be used.  If a particular board has
  an external DP PLL, return ATOM_PPLL_INVALID to skip PLL programming
  as there is no need to program the PLL itself.  If we are not able to
  allocate a PLL, return ATOM_PPLL_INVALID to skip PLL programming to
  avoid messing up an existing monitor.
  Asic specific PLL information
  DCE 10.x
  Tonga
  - PPLL1, PPLL2 are available for all UNIPHY (both DP and non-DP)
  CI
  - PPLL0, PPLL1, PPLL2 are available for all UNIPHY (both DP and non-DP) and DAC
 skip PPLL programming if using ext clock 
 use the same PPLL for all DP monitors 
 use the same PPLL for all monitors with the same clock 
 XXX need to determine what plls are available on each DCE11 part 
 avivo cursor are offset into the total surface 
 turn off cursor 
 Make sure VBLANK and PFLIP interrupts are still enabled 
 adjust pm to dpms 
 disable crtc pair power gating before programming 
 disable the GRPH 
			 one other crtc is using this pll don't turn
			  off the pll
 disable the ppll 
 disable the ppll 
 SetPixelClock calculates the plls and ss values now 
 update the hw version fpr dpm 
 assign the encoder to the amdgpu crtc to avoid repeated lookups later 
 pick pll 
 if we can't get a PPLL for a non-DP encoder, fail 
 FIXME: not supported yet 
 HPD hotplug 
 allocate crtcs 
 setup afmt 
 disable vga render 
 init dig PHYs, disp eng pll 
 initialize hpd 
 turn on the BL 
 Wait a little for things to settle down 
 IRQ could occur when in initial stage 
 page flip completed. clean up 
 wakeup usersapce 
 vblank 
 vline 
 need to call this here rather than in prepare() since we need some crtc info 
 set scaler clears this on some chips 
 select the clockdata port if it uses a router 
 turn eDP panel on for mode set 
 this is needed for the pllss setup to work correctly in some cases 
 set up the FMT blocks 
 need to call this here as we need the crtc set up 
 these are handled by the primary encoders 
 no detect for TMDSLVDS yet 
 see if we already added it 
 add a new one 
 these are handled by the primary encoders 
  Copyright 2009 Jerome Glisse.
  All Rights Reserved.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sub license, andor sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
  THE COPYRIGHT HOLDERS, AUTHORS ANDOR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,
  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  USE OR OTHER DEALINGS IN THE SOFTWARE.
  The above copyright notice and this permission notice (including the
  next paragraph) shall be included in all copies or substantial portions
  of the Software.
  Authors:
     Jerome Glisse <glisse@freedesktop.org>
     Thomas Hellstrom <thomas-at-tungstengraphics-dot-com>
     Dave Airlie
  amdgpu_evict_flags - Compute placement flags
  @bo: The buffer object to evict
  @placement: Possible destination(s) for evicted BO
  Fill in placement data when ttm_bo_evict() is called
 Don't handle scatter gather BOs 
 Object isn't an AMDGPU object so ignore 
 Move to system memory 
			 Try evicting to the CPU inaccessible part of VRAM
			  first, but only set GTT as busy placement, so this
			  BO will be evicted to GTT rather than causing other
			  BOs to be evicted from VRAM
 Move to GTT memory 
  amdgpu_ttm_map_buffer - Map memory into the GART windows
  @bo: buffer object to map
  @mem: memory object to map
  @mm_cur: range to map
  @num_pages: number of pages to map
  @window: which GART window to use
  @ring: DMA ring to use for the copy
  @tmz: if we should setup a TMZ enabled mapping
  @addr: resulting address inside the MC address space
  Setup one of the GART windows to access a specific piece of memory or return
  the physical address for local memory.
 Map only what can't be accessed directly 
  amdgpu_ttm_copy_mem_to_mem - Helper function for copy
  @adev: amdgpu device
  @src: bufferaddress where to read from
  @dst: bufferaddress where to write to
  @size: number of bytes to copy
  @tmz: if a secure copy should be used
  @resv: resv object to sync to
  @f: Returns the last fence if multiple jobs are submitted.
  The function copies @size bytes from {src->mem + src->offset} to
  {dst->mem + dst->offset}. src->bo and dst->bo could be same BO for a
  move and different for a BO to BO copy.
		 Copy size cannot exceed GTT_MAX_BYTES. So if src or dst
		  begins at an offset, then adjust the size accordingly
 Map src to window 0 and dst to window 1. 
  amdgpu_move_blit - Copy an entire buffer to another buffer
  This is a helper called by amdgpu_bo_move() and amdgpu_move_vram_ram() to
  help move buffers to and from VRAM.
 clear the space being freed 
 Always block for VM page tables before committing the new location 
  amdgpu_mem_visible - Check that memory can be accessed by ttm_bo_move_memcpy
  Called by amdgpu_bo_move()
 ttm_resource_ioremap only supports contiguous memory 
  amdgpu_bo_move - Move a buffer object to a new memory location
  Called by ttm_bo_handle_move_mem()
 Can't move a pinned BO 
 Nothing to save here 
		 amdgpu_bo_fault_reserve_notify will re-set this if the CPU
		  accesses the BO after it's moved.
 Check that all memory is CPU accessible 
 update statistics 
  amdgpu_ttm_io_mem_reserve - Reserve a block of memory during a fault
  Called by ttm_mem_io_reserve() ultimately via ttm_bo_vm_fault()
 system memory 
 check if it's visible 
  amdgpu_ttm_domain_start - Returns GPU start address
  @adev: amdgpu device object
  @type: type of the memory
  Returns:
  GPU start address of a memory domain
  TTM backend functions.
  amdgpu_ttm_tt_get_user_pages - get device accessible pages that back user
  memory and start HMM tracking CPU page table update
  Calling function must call amdgpu_ttm_tt_userptr_range_done() once and only
  once afterwards to stop HMM tracking
 Another get_user_pages is running at the same time?? 
 Happens during process shutdown 
  amdgpu_ttm_tt_userptr_range_done - stop HMM track the CPU page table change
  Check if the pages backing this ttm range have been invalidated
  Returns: true if pages are still valid
		
		  FIXME: Must always hold notifier_lock for this, and must
		  not ignore the return code.
  amdgpu_ttm_tt_set_user_pages - Copy pages in, putting old pages as necessary.
  Called by amdgpu_cs_list_validate(). This creates the page list
  that backs user memory and will ultimately be mapped into the device
  address space.
  amdgpu_ttm_tt_pin_userptr - prepare the sg table with the user pages
  Called by amdgpu_ttm_backend_bind()
 Allocate an SG array and squash pages into it 
 Map SG to device 
 convert SG to linear array of pages and dma addresses 
  amdgpu_ttm_tt_unpin_userptr - Unpin and unmap userptr pages
 double check that we don't free the table twice 
 unmap the pages mapped to the device 
		 The memory type of the first page defaults to UC. Now
		  modify the memory type to NC from the second page of
		  the BO onward.
  amdgpu_ttm_backend_bind - Bind GTT memory
  Called by ttm_tt_bind() on behalf of ttm_bo_handle_move_mem().
  This handles binding GTT memory to the device address space.
 compute PTE flags relevant to this BO memory 
 bind pages into GART page tables 
  amdgpu_ttm_alloc_gart - Make sure buffer object is accessible either
  through AGP or GART aperture.
  If bo is accessible through AGP aperture, then use AGP aperture
  to access bo; otherwise allocate logical space in GART aperture
  and map bo to GART aperture.
 allocate GART space 
 compute PTE flags for this buffer object 
 Bind pages 
  amdgpu_ttm_recover_gart - Rebind GTT pages
  Called by amdgpu_gtt_mgr_recover() from amdgpu_device_reset() to
  rebind GTT pages during a GPU reset.
  amdgpu_ttm_backend_unbind - Unbind GTT mapped pages
  Called by ttm_tt_unbind() on behalf of ttm_bo_move_ttm() and
  ttm_tt_destroy().
 if the pages have userptr pinning then clear that first 
 unbind shouldn't be done for GDSGWSOA in ttm_bo_clean_mm 
  amdgpu_ttm_tt_create - Create a ttm_tt object for a given BO
  @bo: The buffer object to create a GTT ttm_tt object around
  @page_flags: Page flags to be added to the ttm_tt object
  Called by ttm_tt_create().
 allocate space for the uninitialized page entries 
  amdgpu_ttm_tt_populate - Map GTT pages visible to the device
  Map the pages of a ttm_tt object to an address space visible
  to the underlying device.
 user pages are bound by amdgpu_ttm_tt_pin_userptr() 
  amdgpu_ttm_tt_unpopulate - unmap GTT pages and unpopulate page arrays
  Unmaps pages of a ttm_tt object from the device address space and
  unpopulates the page array backing it.
  amdgpu_ttm_tt_set_userptr - Initialize userptr GTT ttm_tt for the current
  task
  @bo: The ttm_buffer_object to bind this userptr to
  @addr:  The address in the current tasks VM space to use
  @flags: Requirements of userptr object.
  Called by amdgpu_gem_userptr_ioctl() to bind userptr pages
  to current task
 TODO: We want a separate TTM object type for userptrs 
 Set TTM_TT_FLAG_EXTERNAL before populate but after create. 
  amdgpu_ttm_tt_get_usermm - Return memory manager for ttm_tt object
  amdgpu_ttm_tt_affect_userptr - Determine if a ttm_tt object lays inside an
  address range for the current task.
	 Return false if no part of the ttm_tt object lies within
	  the range
  amdgpu_ttm_tt_is_userptr - Have the pages backing by userptr?
  amdgpu_ttm_tt_is_readonly - Is the ttm_tt object read only?
  amdgpu_ttm_tt_pde_flags - Compute PDE flags for ttm_tt object
  @ttm: The ttm_tt object to compute the flags for
  @mem: The memory registry backing this ttm_tt object
  Figure out the flags to use for a VM PDE (Page Directory Entry).
  amdgpu_ttm_tt_pte_flags - Compute PTE flags for ttm_tt object
  @adev: amdgpu_device pointer
  @ttm: The ttm_tt object to compute the flags for
  @mem: The memory registry backing this ttm_tt object
  Figure out the flags to use for a VM PTE (Page Table Entry).
  amdgpu_ttm_bo_eviction_valuable - Check to see if we can evict a buffer
  object.
  Return true if eviction is sensible. Called by ttm_mem_evict_first() on
  behalf of ttm_bo_mem_force_space() which tries to evict buffer objects until
  it can find space for a new object and by ttm_bo_force_list_clean() which is
  used to clean out a memory space.
 Swapout? 
	 If bo is a KFD BO, check if the bo belongs to the current process.
	  If true, then return false as any KFD process needs all its BOs to
	  be resident to run successfully
		 Preemptible BOs don't own system resources managed by the
		  driver (pages, VRAM, GART space). They point to resources
		  owned by someone else (e.g. pageable memory in user mode
		  or a DMABuf). They are used in a preemptible context so we
		  can guarantee no deadlocks and good QoS in case of MMU
		  notifiers or DMABuf move notifiers from the resource owner.
 Check each drm MM node individually 
  amdgpu_ttm_access_memory - Read or Write memory that backs a buffer object.
  @bo:  The buffer object to readwrite
  @offset:  Offset into buffer object
  @buf:  Secondary buffer to writeread from
  @len: Length in bytes of access
  @write:  true if writing
  This is used to access VRAM that backs a buffer object via MMIO
  access for debugging purposes.
 using MM to access rest vram and handle un-aligned address 
  Firmware Reservation functions
  amdgpu_ttm_fw_reserve_vram_fini - free fw reserved vram
  @adev: amdgpu_device pointer
  free fw reserved vram if it has been reserved.
  amdgpu_ttm_fw_reserve_vram_init - create bo vram reservation from fw
  @adev: amdgpu_device pointer
  create bo vram reservation from fw.
  Memoy training reservation functions
  amdgpu_ttm_training_reserve_vram_fini - free memory training reserved vram
  @adev: amdgpu_device pointer
  free memory training reserved vram if it has been reserved.
  reserve TMR memory at the top of VRAM which holds
  IP Discovery data and is protected by PSP.
	
	  Query reserved tmr size through atom firmwareinfo for Sienna_Cichlid and onwards for all
	  the use cases (IP discoveryG6 memory trainingprofilingdiagnostic data.etc)
	 
	  Otherwise, fallback to legacy approach to check and reserve tmr block for ip
	  discovery data and G6 memory training data respectively
 reserve vram for mem train according to TMR location 
  amdgpu_ttm_init - Init the memory management (ttm) as well as various
  gttvram related fields.
  This initializes all of the memory space pools that the TTM layer
  will need such as the GTT space (system memory mapped to the device),
  VRAM (on-board memory), and on-chip memories (GDS, GWS, OA) which
  can be mapped per VMID.
 No others user of address space so set it to 0 
 Initialize VRAM pool with all of VRAM divided into pages 
 Reduce size of CPU-visible VRAM if requested 
 Change the size here instead of the init above so only lpfn is affected 
	
	 The reserved vram for firmware must be pinned to the specified
	 place on the VRAM, so reserve it early.
	
	  only NAVI10 and onwards ASIC support for IP discovery.
	  If IP discovery enabled, a block of memory should be
	  reserved for IP discovey.
	 allocate memory as required for VGA
	  This is used for VGA emulation and pre-OS scanout buffers to
	  avoid display artifacts while transitioning between pre-OS
	 Compute GTT size, either bsaed on 34th the size of RAM size
 Initialize GTT memory pool 
 Initialize preemptible memory pool 
 Initialize various on-chip memory pools 
  amdgpu_ttm_fini - De-initialize the TTM memory pools
 return the stolen vga memory back to VRAM 
 return the IP Discovery TMR memory back to VRAM 
  amdgpu_ttm_set_buffer_funcs_status - enabledisable use of buffer functions
  @adev: amdgpu_device pointer
  @enable: true when we can use buffer functions.
  Enabledisable use of buffer functions during suspendresume. This should
  only be called at bootup or when userspace isn't running.
 this just adjusts TTM size idea, which sets lpfn to the correct value 
 for IB padding 
  amdgpu_ttm_evict_resources - evict memory buffers
  @adev: amdgpu device object
  @mem_type: evicted BO's memory type
  Evicts all @mem_type buffers on the lru list of the memory type.
  Returns:
  0 for success or a negative error code on failure.
  amdgpu_ttm_vram_read - Linear read access to VRAM
  Accesses VRAM via MMIO for debugging purposes.
  amdgpu_ttm_vram_write - Linear write access to VRAM
  Accesses VRAM via MMIO for debugging purposes.
  amdgpu_iomem_read - Virtual read access to GPU mapped memory
  This function is used to read memory that has been mapped to the
  GPU and the known addresses are not physical addresses but instead
  bus addresses (e.g., what you'd put in an IB or ring buffer).
 retrieve the IOMMU domain if any for this device 
		 Translate the bus address to a physical address.  If
		  the domain is NULL it means there is no IOMMU active
		  and the address translation is the identity
  amdgpu_iomem_write - Virtual write access to GPU mapped memory
  This function is used to write memory that has been mapped to the
  GPU and the known addresses are not physical addresses but instead
  bus addresses (e.g., what you'd put in an IB or ring buffer).
  Copyright 2015 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
		 for VI. JT2 should be the same as JT1, because:
			1, MEC2 and MEC1 use exactly same FW.
			2, JT2 is not pached but JT1 is.
  Copyright 2014 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: Alex Deucher
  sDMA - System DMA
  Starting with CIK, the GPU has new asynchronous
  DMA engines.  These engines are used for compute
  and gfx.  There are two DMA engines (SDMA0, SDMA1)
  and each one supports 1 ring buffer used for gfx
  and 2 queues used for compute.
  The programming model is very similar to the CP
  (ring buffer, IBs, etc.), but sDMA has it's own
  packet format that is different from the PM4 format
  used by the CP. sDMA supports copying data, writing
  embedded data, solid fills, and a number of other
  things.  It also has support for tilingdetiling of
  buffers.
  sdma_v3_0_init_microcode - load ucode images from disk
  @adev: amdgpu_device pointer
  Use the firmware interface to load the ucode images into
  the driver (not loaded into hw).
  Returns 0 on success, error on failure.
  sdma_v3_0_ring_get_rptr - get the current read pointer
  @ring: amdgpu ring pointer
  Get the current rptr from the hardware (VI+).
 XXX check if swapping is necessary on BE 
  sdma_v3_0_ring_get_wptr - get the current write pointer
  @ring: amdgpu ring pointer
  Get the current wptr from the hardware (VI+).
 XXX check if swapping is necessary on BE 
  sdma_v3_0_ring_set_wptr - commit the write pointer
  @ring: amdgpu ring pointer
  Write the wptr back to the hardware (VI+).
 XXX check if swapping is necessary on BE 
  sdma_v3_0_ring_emit_ib - Schedule an IB on the DMA engine
  @ring: amdgpu ring pointer
  @job: job to retrieve vmid from
  @ib: IB object to schedule
  @flags: unused
  Schedule an IB in the DMA ring (VI).
 IB packet must end on a 8 DW boundary 
 base must be 32 byte aligned 
  sdma_v3_0_ring_emit_hdp_flush - emit an hdp flush on the DMA ring
  @ring: amdgpu ring pointer
  Emit an hdp flush packet on the requested DMA ring.
 == 
 reference 
 mask 
 retry count, poll interval 
  sdma_v3_0_ring_emit_fence - emit a fence on the DMA ring
  @ring: amdgpu ring pointer
  @addr: address
  @seq: sequence number
  @flags: fence related flags
  Add a DMA fence packet to the ring to write
  the fence seq number and DMA trap packet to generate
  an interrupt if needed (VI).
 write the fence 
 optionally write high bits as well 
 generate an interrupt 
  sdma_v3_0_gfx_stop - stop the gfx async dma engines
  @adev: amdgpu_device pointer
  Stop the gfx async dma ring buffers (VI).
  sdma_v3_0_rlc_stop - stop the compute async dma engines
  @adev: amdgpu_device pointer
  Stop the compute async dma queues (VI).
 XXX todo 
  sdma_v3_0_ctx_switch_enable - stop the async dma engines context switch
  @adev: amdgpu_device pointer
  @enable: enabledisable the DMA MEs context switch.
  Halt or unhalt the async dma engines context switch (VI).
  sdma_v3_0_enable - stop the async dma engines
  @adev: amdgpu_device pointer
  @enable: enabledisable the DMA MEs.
  Halt or unhalt the async dma engines (VI).
  sdma_v3_0_gfx_resume - setup and start the async dma engines
  @adev: amdgpu_device pointer
  Set up the gfx DMA ring buffers and enable them (VI).
  Returns 0 for success, error for failure.
 SDMA GFX 
 Set ring buffer size in dwords 
 Initialize the ring buffer's read and write pointers 
 set the wb address whether it's enabled or not 
 setup the wptr shadow polling 
wptr polling is not enogh fast, directly clean the wptr register 
 enable DMA RB 
 enable DMA IBs 
 unhalt the MEs 
 enable sdma ring preemption 
  sdma_v3_0_rlc_resume - setup and start the async dma engines
  @adev: amdgpu_device pointer
  Set up the compute DMA queues and enable them (VI).
  Returns 0 for success, error for failure.
 XXX todo 
  sdma_v3_0_start - setup and start the async dma engines
  @adev: amdgpu_device pointer
  Set up the DMA engines and enable them (VI).
  Returns 0 for success, error for failure.
 disable sdma engine before programing it 
 start the gfx rings and rlc compute queues 
  sdma_v3_0_ring_test_ring - simple async dma engine test
  @ring: amdgpu_ring structure holding ring information
  Test the DMA engine by writing using it to write an
  value to memory. (VI).
  Returns 0 for success, error for failure.
  sdma_v3_0_ring_test_ib - test an IB on the DMA engine
  @ring: amdgpu_ring structure holding ring information
  @timeout: timeout value in jiffies, or MAX_SCHEDULE_TIMEOUT
  Test a simple IB in the DMA ring (VI).
  Returns 0 on success, error on failure.
  sdma_v3_0_vm_copy_pte - update PTEs by copying them from the GART
  @ib: indirect buffer to fill with commands
  @pe: addr of the page entry
  @src: src addr to copy from
  @count: number of page entries to update
  Update PTEs by copying them from the GART using sDMA (CIK).
 srcdst endian swap 
  sdma_v3_0_vm_write_pte - update PTEs by writing them manually
  @ib: indirect buffer to fill with commands
  @pe: addr of the page entry
  @value: dst addr to write into pe
  @count: number of page entries to update
  @incr: increase next addr by incr bytes
  Update PTEs by writing them manually using sDMA (CIK).
  sdma_v3_0_vm_set_pte_pde - update the page tables using sDMA
  @ib: indirect buffer to fill with commands
  @pe: addr of the page entry
  @addr: dst addr to write into pe
  @count: number of page entries to update
  @incr: increase next addr by incr bytes
  @flags: access flags
  Update the page tables using sDMA (CIK).
 for physically contiguous pages (vram) 
 dst addr 
 mask 
 value 
 increment size 
 number of entries 
  sdma_v3_0_ring_pad_ib - pad the IB to the required number of dw
  @ring: amdgpu_ring structure holding ring information
  @ib: indirect buffer to fill with padding
  sdma_v3_0_ring_emit_pipeline_sync - sync the pipeline
  @ring: amdgpu_ring pointer
  Make sure all previous operations are completed (CIK).
 wait for idle 
 equal 
 reference 
 mask 
 retry count, poll interval 
  sdma_v3_0_ring_emit_vm_flush - cik vm flush using sDMA
  @ring: amdgpu_ring pointer
  @vmid: vmid number to use
  @pd_addr: address
  Update the page table base and flush the VM TLB
  using sDMA (VI).
 wait for flush 
 always 
 reference 
 mask 
 retry count, poll interval 
 SDMA trap event 
 SDMA Privileged inst 
 SDMA Privileged inst 
 Wait a little for things to settle down 
 XXX compute 
 XXX compute 
 XXX compute 
 XXX compute 
 AMD_CG_SUPPORT_SDMA_MGCG 
 AMD_CG_SUPPORT_SDMA_LS 
 sdma_v3_0_ring_emit_hdp_flush 
 hdp invalidate 
 sdma_v3_0_ring_emit_pipeline_sync 
 sdma_v3_0_ring_emit_vm_flush 
 sdma_v3_0_ring_emit_fence x3 for user fence, vm fence 
 sdma_v3_0_ring_emit_ib 
  sdma_v3_0_emit_copy_buffer - copy buffer using the sDMA engine
  @ib: indirect buffer to copy to
  @src_offset: src GPU address
  @dst_offset: dst GPU address
  @byte_count: number of bytes to xfer
  @tmz: unused
  Copy GPU buffers using the DMA engine (VI).
  Used by the amdgpu ttm implementation to move pages if
  registered as the asic copy callback.
 srcdst endian swap 
  sdma_v3_0_emit_fill_buffer - fill buffer using the sDMA engine
  @ib: indirect buffer to copy to
  @src_data: value to write to buffer
  @dst_offset: dst GPU address
  @byte_count: number of bytes to xfer
  Fill GPU buffers using the DMA engine (VI).
 not 0x3fffff due to HW limitation 
 not 0x3fffff due to HW limitation 
  Copyright 2018 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Copyright 2015 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 set dummy read address to dummy page address 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2010 Red Hat Inc.
  Author : Dave Airlie <airlied@redhat.com>
  ATPX support for both IntelATI
 handle for device - and atpx 
 structure size in bytes (includes size field) 
 version 
 supported functions bit vector 
 structure size in bytes (includes size field) 
 which flags are valid 
 flags 
  amdgpu_atpx_call - call an ATPX method
  @handle: acpi handle
  @function: the ATPX function to execute
  @params: ATPX function params
  Executes the requested ATPX function (all asics).
  Returns a pointer to the acpi output buffer.
 We need a second fake parameter 
 Fail only if calling the method fails and ATPX is supported 
  amdgpu_atpx_parse_functions - parse supported functions
  @f: supported functions struct
  @mask: supported functions mask from ATPX
  Use the supported functions mask from ATPX function
  ATPX_FUNCTION_VERIFY_INTERFACE to determine what functions
  are supported (all asics).
  amdgpu_atpx_validate_functions - validate ATPX functions
  @atpx: amdgpu atpx struct
  Validate that required functions are enabled (all asics).
  returns 0 on success, error on failure.
 if separate mux flag is set, mux controls are required 
 if any outputs are muxed, mux controls are required 
 some bioses set these bits rather than flagging power_cntl as supported 
			
			  Disable legacy PM methods only when pcie port PM is usable,
			  otherwise the device might fail to power off or power on.
  amdgpu_atpx_verify_interface - verify ATPX
  @atpx: amdgpu atpx struct
  Execute the ATPX_FUNCTION_VERIFY_INTERFACE ATPX function
  to initialize ATPX and determine what features are supported
  (all asics).
  returns 0 on success, error on failure.
 TODO: check version? 
  amdgpu_atpx_set_discrete_state - power updown discrete GPU
  @atpx: atpx info struct
  @state: discrete GPU state (0 = power down, 1 = power up)
  Execute the ATPX_FUNCTION_POWER_CONTROL ATPX function to
  power downup the discrete GPU (all asics).
  Returns 0 on success, error on failure.
 200ms delay is required after off 
  amdgpu_atpx_switch_disp_mux - switch display mux
  @atpx: atpx info struct
  @mux_id: mux state (0 = integrated GPU, 1 = discrete GPU)
  Execute the ATPX_FUNCTION_DISPLAY_MUX_CONTROL ATPX function to
  switch the display mux between the discrete GPU and integrated GPU
  (all asics).
  Returns 0 on success, error on failure.
  amdgpu_atpx_switch_i2c_mux - switch i2chpd mux
  @atpx: atpx info struct
  @mux_id: mux state (0 = integrated GPU, 1 = discrete GPU)
  Execute the ATPX_FUNCTION_I2C_MUX_CONTROL ATPX function to
  switch the i2chpd mux between the discrete GPU and integrated GPU
  (all asics).
  Returns 0 on success, error on failure.
  amdgpu_atpx_switch_start - notify the sbios of a GPU switch
  @atpx: atpx info struct
  @mux_id: mux state (0 = integrated GPU, 1 = discrete GPU)
  Execute the ATPX_FUNCTION_GRAPHICS_DEVICE_SWITCH_START_NOTIFICATION ATPX
  function to notify the sbios that a switch between the discrete GPU and
  integrated GPU has begun (all asics).
  Returns 0 on success, error on failure.
  amdgpu_atpx_switch_end - notify the sbios of a GPU switch
  @atpx: atpx info struct
  @mux_id: mux state (0 = integrated GPU, 1 = discrete GPU)
  Execute the ATPX_FUNCTION_GRAPHICS_DEVICE_SWITCH_END_NOTIFICATION ATPX
  function to notify the sbios that a switch between the discrete GPU and
  integrated GPU has ended (all asics).
  Returns 0 on success, error on failure.
  amdgpu_atpx_switchto - switch to the requested GPU
  @id: GPU to switch to
  Execute the necessary ATPX functions to switch between the discrete GPU and
  integrated GPU (all asics).
  Returns 0 on success, error on failure.
  amdgpu_atpx_power_state - power downup the requested GPU
  @id: GPU to power downup
  @state: requested power state (0 = off, 1 = on)
  Execute the necessary ATPX function to power downup the discrete GPU
  (all asics).
  Returns 0 on success, error on failure.
 on w500 ACPI can't change intel gpu state 
  amdgpu_atpx_pci_probe_handle - look up the ATPX handle
  @pdev: pci device
  Look up the ATPX handles (all asics).
  Returns true if the handles are found, false if not.
  amdgpu_atpx_init - verify the ATPX interface
  Verify the ATPX interface (all asics).
  Returns 0 on success, error on failure.
 set up the ATPX handle 
 validate the atpx setup 
  amdgpu_atpx_get_client_id - get the client id
  @pdev: pci device
  look up whether we are the integrated or discrete GPU (all asics).
  Returns the client id.
 HG _PR3 doesn't seem to work on this A+A weston board 
 Apply PX quirks 
  amdgpu_atpx_detect - detect whether we have PX
  Check if we have a PX system (all asics).
  Returns true if we have a PX system, false if not.
  amdgpu_register_atpx_handler - register with vga_switcheroo
  Register the PX callbacks with vga_switcheroo (all asics).
 detect if we have any ATPX + 2 VGA in the system 
  amdgpu_unregister_atpx_handler - unregister with vga_switcheroo
  Unregister the PX callbacks with vga_switcheroo (all asics).
  Copyright 2016 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Author: Huang Rui
	 Check sOS sign of life register to confirm sys driver and sOS
	  are already been loaded.
 Wait for bootloader to signify that is ready having bit 31 of C2PMSG_35 set to 1 
 Copy PSP System Driver binary to memory 
 Provide the sys driver to bootloader 
 there might be handshake issue with hardware which needs delay 
	 Check sOS sign of life register to confirm sys driver and sOS
	  are already been loaded.
 Wait for bootloader to signify that is ready having bit 31 of C2PMSG_35 set to 1 
 Copy Secure OS binary to PSP memory 
 Provide the PSP secure OS to bootloader 
 there might be handshake issue with hardware which needs delay 
 allocate 4k Page of Local Frame Buffer memory for ring 
 Change IH ring for VMC 
 Change IH ring for UMC 
 Write low address of the ring to C2PMSG_102 
 Write high address of the ring to C2PMSG_103 
 No size initialization for sriov  
 Write the ring initialization command to C2PMSG_101 
 there might be hardware handshake issue which needs delay 
 Wait for response flag (bit 31) in C2PMSG_101 
 Write low address of the ring to C2PMSG_69 
 Write high address of the ring to C2PMSG_70 
 Write size of ring to C2PMSG_71 
 Write the ring initialization command to C2PMSG_64 
 there might be hardware handshake issue which needs delay 
 Wait for response flag (bit 31) in C2PMSG_64 
 Write the ring destroy command
 there might be handshake issue with hardware which needs delay 
 Wait for response flag (bit 31) 
send the mode 1 reset command
 send interrupt to PSP for SRIOV ring write pointer update 
  Copyright 2019 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 error codes 
 The T_I2C_POLL_US is defined as follows:
  "Define a timer interval (t_i2c_poll) equal to 10 times the
   signalling period for the highest I2C transfer speed used in the
   system and supported by DW_apb_i2c. For instance, if the highest
   I2C data transfer mode is 400 kbs, then t_i2c_poll is 25 us."  --
  DesignWare DW_apb_i2c Databook, Version 1.21a, section 3.8.3.1,
  page 56, with grammar and syntax corrections.
  Vcc for our device is at 1.8V which puts it at 400 kHz,
  see Atmel AT24CM02 datasheet, section 8.3 DC Characteristics table, page 14.
  The procedure to disable the IP block is described in section
  3.8.3 Disabling DW_apb_i2c on page 56.
 do 
 while (reg_CKSVII2C_ic_clr_intr == 0) 
	 The values of IC_MAX_SPEED_MODE are,
	  1: standard mode, 0 - 100 Kbs,
	  2: fast mode, <= 400 Kbs, or fast mode plus, <= 1000 Kbs,
	  3: high speed mode, <= 3.4 Mbs.
	
	  Standard mode speed, These values are taken from SMUIO MAS,
	  but are different from what is given is
	  Synopsys spec. The values here are based on assumption
	  that refclock is 100MHz
	 
	  Configuration for standard mode; Speed = 100kbps
	  Scale linearly, for now only support standard speed clock
	  This will work only with 100M ref clock
	 
	  TBD:Change the calculation to take into account ref clock values also.
	 The IC_TAR::IC_TAR field is 10-bits wide.
	  It takes a 7-bit or 10-bit addresses as an address,
	  i.e. no readwrite bit--no wire format, just the address.
Check if transmission is completed 
 This only checks if NAK is received and transaction got aborted 
 Check for stop due to NACK 
 If slave is not present 
 wait till some data is there in RXFIFO 
 Poll for some byte in RXFIFO 
  smu_v11_0_i2c_transmit - Send a block of data over the I2C bus to a slave device.
  @control: I2C adapter reference
  @address: The I2C address of the slave device.
  @data: The data to transmit over the bus.
  @numbytes: The amount of data to transmit.
  @i2c_flag: Flags for transmission
  Returns 0 on success or error.
 Set the I2C slave address 
 Enable I2C 
 Clear status bits 
			
			  We waited for too long for the transmission
			  FIFO to become not-full.  Exit the loop
			  with error.
			 Final message, final byte, must generate a
			  STOP to release the bus, i.e. don't hold
			  SCL low.
 Write 
 Record that the bytes were transmitted 
 Any error, no point in proceeding 
  smu_v11_0_i2c_receive - Receive a block of data over the I2C bus from a slave device.
  @control: I2C adapter reference
  @address: The I2C address of the slave device.
  @data: Placeholder to store received data.
  @numbytes: The amount of data to transmit.
  @i2c_flag: Flags for transmission
  Returns 0 on success or error.
 Set the I2C slave address 
 Enable I2C 
 Prepare transaction 
 Read 
		 Final message, final byte, must generate a STOP
		  to release the bus, i.e. don't hold SCL low.
 Any error, no point in proceeding 
 Record that the bytes were received 
 Enable I2C engine; 
 Abort previous transaction 
		
		  Nobody is using I2C engine, but engine remains active because
		  someone missed to send STOP
 Nobody is using I2C engine 
 Keep reading activity bit until it's cleared 
 Disable clock gating 
 Disable I2C 
 Configure I2C to operate as master and in standard mode 
 Initialize the clock to 50 kHz default 
		 Nobody is using the I2C engine, yet it remains
		  active, possibly because someone missed to send
		  STOP.
 Restore clock gating 
	
	  TODO Reenabling clock gating seems to break subsequent SMU operation
	       on the I2C bus. My guess is that SMU doesn't disable clock gating like
	       we do here before working with the bus. So for now just don't restore
	       it but later work with SMU to see if they have this issue and can
	       update their code appropriately
 smu_v11_0_i2c_set_clock_gating(control, true); 
 Send  PPSMC_MSG_RequestI2CBus 
 Send  PPSMC_MSG_ReleaseI2CBus 
 I2C GLUE 
	 From the client's point of view, this sequence of
	  messages-- the array i2c_msg msg, is a single transaction
	  on the bus, starting with START and ending with STOP.
	 
	  The client is welcome to send any sequence of messages in
	  this array, as processing under this function here is
	  striving to be agnostic.
	 
	  Record the first address and direction we see. If either
	  changes for a subsequent message, generate ReSTART. The
	  DW_apb_i2c databook, v1.21a, specifies that ReSTART is
	  generated when the direction changes, with the default IP
	  block parameter settings, but it doesn't specify if ReSTART
	  is generated when the address changes (possibly...). We
	  don't rely on the default IP block parameter settings as
	  the block is shared and they may change.
			 Set the STOP bit on the last message, so
			  that the IP block generates a STOP after
			  the last byte of the message.
  Keep this for future unit test if bugs arise
 Write 0xde to address 0x0000 on the EEPROM 
  Copyright 2016 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Author: Huang Rui
  Due to DF Cstate management centralized to PMFW, the firmware
  loading sequence will be updated as below:
    - Load KDB
    - Load SYS_DRV
    - Load tOS
    - Load PMFW
    - Setup TMR
    - Load other non-psp fw
    - Load ASD
    - Load XGMIRASHDCPDTM TA if any
  This new sequence is required for
    - Arcturus and onwards
  Helper funciton to query psp runtime database entry
  @adev: amdgpu_device pointer
  @entry_type: the type of psp runtime database entry
  @db_entry: runtime database entry pointer
  Return false if runtime database doesn't exit or entry is invalid
  or true if the specific database entry is found, and copy to @db_entry
 read runtime db header from vram 
 runtime db doesn't exist, exit 
 read runtime database entry from vram 
 invalid db entry count, exit 
 look up for requested entry type 
 invalid db entry size 
 read runtime database entry 
			 If psp runtime database exists, then
			  only enable two stage memory training
			  when TWO_STAGE_DRAM_TRAINING bit is set
		 If psp runtime database doesn't exist or
		  is invalid, force enable two stage memory
		
		  Shouldn't wait for timeout when err_event_athub occurs,
		  because gpu reset thread triggered and lock resource should
		  be released for psp resume sequence.
 We allow TEE_ERROR_NOT_SUPPORTED for VMR command and PSP_ERR_UNKNOWN_COMMAND in SRIOV 
	 In some cases, psp response status is not 0 even there is no
	  problem while the command is submitted. Some version of PSP FW
	  doesn't write 0 to that field.
	  So here we would like to only print a warning instead of an error
	  during psp initialization to avoid breaking hw_init and it doesn't
	  return -EINVAL.
 Issue LOAD TOC cmd to PSP to part toc and calculate tmr size needed 
 Copy toc to psp firmware private buffer 
 Set up Trusted Memory Region 
	
	  According to HW engineer, they prefer the TMR address be "naturally
	  aligned" , e.g. the start address be an integer divide of TMR size.
	 
	  Note: this memory need be reserved till the driver
	  uninitializes.
	 For ASICs support RLC autoload, psp will parse the toc
	 For Navi12 and CHIP_SIENNA_CICHLID SRIOV, do not set up TMR.
	  Already set up by host driver.
 free TMR memory buffer 
	 If PSP version doesn't match ASD version, asd loading will be failed.
	  add workaround to bypass it for sriov now.
	  TODO: add version check to make it common
	
	 Allocate 16k memory aligned to 4k from Frame Buffer (local
	 physical) for ta to host memory
 XGMI TA unload currently is not supported on ArcturusAldebaran A+A 
 free xgmi shared memory 
 Load XGMI TA 
 Initialize XGMI session 
 Invoke xgmi ta to get hive id 
 Invoke xgmi ta to get the node id 
  Chips that support extended topology information require the driver to
  reflect topology information in the opposite direction.  This is
  because the TA has already exceeded its link record limit and if the
  TA holds bi-directional information, the driver would have to do
  multiple fetches instead of just two.
			
			  prevent 0 num_links value re-reflection since reflection
			  criteria is based on num_hops (direct or indirect).
			 
 Fill in the shared memory with topology information as input 
 Invoke xgmi ta to get the topology information 
 Read the output topology information from the shared memory 
 extended data will either be 0 or equal to non-extended data 
 non-extended data gets everything here so no need to update 
 Invoke xgmi ta again to get the link information 
 accumulate num_links on extended data 
 reflect the topology information for bi-directionality 
 Invoke xgmi ta to set topology information 
 ras begin
	
	  TODO: bypass the loading in sriov for now
	
	  TODO: bypass the terminate in sriov for now
 free ras shared memory 
	
	  TODO: bypass the initialize in sriov for now
		 query GECC enablement status from boot config
		  boot_cfg: 1: GECC is enabled or 0: GECC is disabled
				 disable GECC in next boot cycle if ras is
				  disabled by module parameter amdgpu_ras_enable
				  andor amdgpu_ras_mask, or boot_config_get call
				  is failed
				 enable GECC in next boot cycle if it is disabled
				  in boot config, or force enable GECC if failed to
				  get boot configuration
	 If err_event_athub occurs error inject was successful, however
 ras end
 HDCP start
	
	  TODO: bypass the initialize in sriov for now
	
	  TODO: bypass the loading in sriov for now
	
	  TODO: bypass the terminate in sriov for now
 free hdcp shared memory 
 HDCP end
 DTM start
	
	  TODO: bypass the initialize in sriov for now
	
	  TODO: bypass the loading in sriov for now
	
	  TODO: bypass the terminate in sriov for now
 free dtm shared memory 
 DTM end
 RAP start
	
	  TODO: bypass the initialize in sriov for now
 free rap shared memory 
 RAP end
 securedisplay start 
	
	  TODO: bypass the initialize in sriov for now
	
	  TODO:bypass the terminate in sriov for now
 free securedisplay shared memory 
 SECUREDISPLAY end 
	
	  For ASICs with DF Cstate management centralized
	  to PMFW, TMR setup should be performed after PMFW
	  loaded and before other non-psp firmware loaded.
skip ucode loading in SRIOV VF 
 skip mec JT when autoload is enabled 
			 PSP only receive one SDMA fw for sienna_cichlid,
 Start rlc autoload after psp recieved all the gfx firmware 
 should not destroy ring, only stop 
	
	  all cleanup jobs (xgmi terminate, ras terminate,
	  ring destroy, cmdfencefw buffers destory,
	  psp->cmd destory) are delayed to psp_hw_fini
	
	  This sequence is just used on hw_init only once, no need on
	  resume.
		 Warning the XGMI seesion initialize failure
		  Instead of stop driver initialization
 KM (GPCOM) prepare write pointer 
 Update KM RB frame pointer to new frame 
 write_frame ptr increments by size of rb_frame in bytes 
 psp_write_ptr_reg increments by size of rb_frame in DWORDs 
 Check invalid write_frame ptr address 
 Initialize KM RB frame 
 Update KM RB frame 
 Update the write Pointer in DWORDs 
 Load alternate PSP SOS FW 
 LFB address which is aligned to 1MB boundary per PSP request 
  Copyright 2017 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 HW has more IP blocks,  only initialized the blocke beend by our driver  
 In unit of dword doorbell 
  Copyright 2016 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 Vega, Raven, Arcturus 
 Vega 
 Raven 
 Renoir, Arcturus 
  Indirect registers accessor
 todo 
 todo 
 APU vbios image is part of sbios image 
 set rom index to 0 
 read out the rom data 
  soc15_program_register_sequence - program an array of registers.
  @adev: amdgpu_device pointer
  @regs: pointer to the register array
  @array_size: size of the register array
  Programs an array or registers with and and or masks.
  This is a helper for setting golden registers.
 avoid NBIF got stuck when do RAS recovery in BACO reset 
 re-enable doorbell interrupt after BACO exit 
 If connected to cpu, driver only support mode2 
			
			  1. PMFW version > 0x284300: all cases use baco
			  2. PMFW version <= 0x284300: only sGPU wo RAS use baco
		 
		  1.connected to cpu: driver issue mode2 reset
		  2.discret gpu: driver issue mode1 reset
 original raven doesn't have full asic reset 
static int soc15_set_uvd_clock(struct amdgpu_device adev, u32 clock,
			u32 cntl_reg, u32 status_reg)
{
	return 0;
	int r;
	r = soc15_set_uvd_clock(adev, vclk, ixCG_VCLK_CNTL, ixCG_VCLK_STATUS);
	if (r)
		return r;
	r = soc15_set_uvd_clock(adev, dclk, ixCG_DCLK_CNTL, ixCG_DCLK_STATUS);
 todo 
 todo 
 Set IP register base before any HW register access 
		 It's safe to do ip discovery here for Renior,
	 init soc15 reg base early enough so we can
	  request request full access for sriov before
 change this when we implement soft reset 
	 This reports 0 on APUs, so return to avoid writingreading registers
	  that may or may not be different from their GPU counterparts
 Set the 2 events that we wish to watch, defined above 
 Reg 40 is # received msgs 
 Reg 104 is # of posted requests sent 
 Write to enable desired perf counters 
	 Zero out and enable the perf counters
	  Write 0x5:
	  Bit 0 = Start all counters(1)
	  Bit 2 = Global counter reset enable(1)
	 Load the shadow and disable the perf counters
	  Write 0x2:
	  Bit 0 = Stop counters(0)
	  Bit 1 = Load the shadow counters(1)
 Read register values to get any >32bit overflow 
 Get the values and add the overflow 
	 This reports 0 on APUs, so return to avoid writingreading registers
	  that may or may not be different from their GPU counterparts
 Set the 2 events that we wish to watch, defined above 
 Reg 40 is # received msgs 
 Reg 108 is # of posted requests sent on VG20 
 Write to enable desired perf counters 
	 Zero out and enable the perf counters
	  Write 0x5:
	  Bit 0 = Start all counters(1)
	  Bit 2 = Global counter reset enable(1)
	 Load the shadow and disable the perf counters
	  Write 0x2:
	  Bit 0 = Stop counters(0)
	  Bit 1 = Load the shadow counters(1)
 Read register values to get any >32bit overflow 
 Get the values and add the overflow 
	 Just return false for soc15 GPUs.  Reset does not seem to
	  be necessary.
	 Check sOS sign of life register to confirm sys driver and sOS
	  are already been loaded.
 Get the number of NAKs received and generated 
 Add the total number of NAKs, i.e the number of replays 
	 TODO: split the GC and PG flags based on the relevant IP version for which
	  they are relevant.
 FIXME: not supported yet 
 sdmaih doorbell range are programed by hypervisor 
 enable pcie gen23 link 
 enable aspm 
 setup nbio registers 
	 remap HDP registers to a hole in mmio space,
	  for the purpose of expose those registers
	  to process space
 enable the doorbell aperture 
	 HW doorbell routing policy: doorbell writing not
	  in SDMAIHMMACV range will be routed to CP. So
	  we need to init SDMAIHMMACV doorbell range prior
	  to CP ip block init and ring test.
 disable the doorbell aperture 
 AMD_CG_SUPPORT_DRM_MGCG 
 AMD_CG_SUPPORT_DRM_LS 
 AMD_CG_SUPPORT_ROM_MGCG 
 todo 
  Copyright 2018 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
MC_VM_XGMI_LFB_CNTL
MC_VM_XGMI_LFB_SIZE
 PF_MAX_REGION=0 means xgmi is disabled 
  Copyright 2020 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 select the lower chip 
 clear lower chip error count 
 select the higher chip 
 clear higher chip error count 
 UMC 8_7_2 registers 
 select the lower chip and check the error count 
 select the higher chip and check the err counter 
	 check for SRAM correctable error
 check the MCUMC_STATUS 
 clear umc status 
 calculate error address if uece error is detected 
 the lowest lsb bits should be ignored 
 translate umc channel address to soc pa, 3 parts are included 
 we only save ue error information currently, ce is skipped 
 page frame address is saved 
 clear umc status 
 select the lower chip and check the error count 
 set ce error interrupt type to APIC based interrupt 
 set error count to initial value 
 select the higher chip and check the err counter 
  Copyright 2016 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
	 If use GART for FB translation, vmid0 page table covers both
	  vram and system memory (gart)
 Program the AGP BAR 
 Program the system aperture low logical page number. 
			
			 Raven2 has a HW issue that it is unable to use the
			 vram which is out of MC_VM_SYSTEM_APERTURE_HIGH_ADDR.
			 So here is the workaround that increase system
			 aperture high address (add 1) to get rid of the VM
			 fault and hardware hang.
 Set default page address. 
 Program "protection fault". 
	 In the case squeezing vram into GART aperture, we don't use
	  FB aperture and AGP aperture. Disable them.
 Setup TLB control 
 XXX for emulation. 
 Setup L2 cache 
 XXX for emulation, Refer to closed source code.
		 Send no-retry XNACK on fault to suppress VM fault storm.
		  On Aldebaran, XNACK can be enabled in the SQ per-process.
		  Retry faults need to be enabled for that to work.
 GART Enable. 
 Disable all tables 
 Avoid write to GMC registers 
 Setup TLB control 
 Setup L2 cache 
  gfxhub_v1_0_set_fault_enable_default - update GARTVM fault handling
  @adev: amdgpu_device pointer
  @value: true redirects VM faults to the default page
  Copyright 2020 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 enabledisable ROM CG is not supported on APU 
 CGTT_ROM_CLK_CTRL0 is not available for APU 
  Copyright 2015 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 Effectively the job is aborted as the device is gone 
	
	  Initialize the scheduler to at least some ring so that we always
	  have a pointer to adev.
 use sched fence if available 
 only put the hw fence if has embedded fence 
 only put the hw fence if has embedded fence 
 record external_hw_fence for direct submit 
 skip IB as well if VRAM lost 
 Signal all jobs not yet scheduled 
 Signal all jobs already scheduled to HW 
  Copyright 2018 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 HW has more IP blocks,  only initialized the blocke beend by our driver  
  Copyright 2016 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 setup interrupt control 
	 INTERRUPT_CNTL__IH_DUMMY_RD_OVERRIDE_MASK=0 - dummy read disabled with msi, enabled without msi
	  INTERRUPT_CNTL__IH_DUMMY_RD_OVERRIDE_MASK=1 - dummy read controlled by IH_DUMMY_RD_EN
 INTERRUPT_CNTL__IH_REQ_NONSNOOP_EN_MASK=1 if ring is in non-cacheable memory, e.g., vram 
 AMD_CG_SUPPORT_BIF_MGCG 
 AMD_CG_SUPPORT_BIF_LS 
  Copyright 2014 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  this peek_msg could only be called in IRQ routine becuase in IRQ routine
  RCV_MSG_VALID filed of BIF_BX_PF_MAILBOX_CONTROL must already be set to 1
  by host.
  if called no in IRQ routine, this peek_msg cannot guaranteed to return the
  correct value since it doesn't return the RCV_DW0 under the case that
  RCV_MSG_VALID is set by host.
	 IMPORTANT:
	  clear TRN_MSG_VALID valid to clear host's RCV_MSG_ACK
	  and with host's RCV_MSG_ACK cleared hw automatically clear host's RCV_MSG_ACK
	  which lead to VF's TRN_MSG_ACK cleared, otherwise below xgpu_nv_poll_ack()
	  will return immediatly
 start to poll ack 
 host doesn't support REQ_GPU_INIT_DATA handshake 
 assume V1 in case host doesn't set version number 
 Retrieve checksum from mailbox2 
	 block amdgpu_gpu_recover till msg FLR COMPLETE received,
	  otherwise the mailbox msg will be ruinedreseted by
	  the VF FLR.
 Trigger recovery for world switch failure if no TDR 
		 READY_TO_ACCESS_GPU is fetched by kernel polling, IRQ can ignore
		  it byfar since that polling thread will handle it,
		  other msg like flr complete is not handled here.
  Copyright 2016 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 By now all MMIO pages except mailbox are blocked 
 if blocking is enabled in hypervisor. Choose the 
 SCRATCH_REG0 to test. 
 enable virtual display 
 don't wait anymore for IRQ context 
  amdgpu_virt_request_full_gpu() - request full gpu access
  @adev:	amdgpu device.
  @init:	is driver init time.
  When start to initfini driver, first need to request full gpu access.
  Return: Zero if request success, otherwise will return error.
  amdgpu_virt_release_full_gpu() - release full gpu access
  @adev:	amdgpu device.
  @init:	is driver init time.
  When finishing driver initfini, need to release full gpu access.
  Return: Zero if release success, otherwise will returen error.
  amdgpu_virt_reset_gpu() - reset gpu
  @adev:	amdgpu device.
  Send reset command to GPU hypervisor to reset GPU that VM is using
  Return: Zero if reset success, otherwise will return error.
  amdgpu_virt_wait_reset() - wait for reset gpu completed
  @adev:	amdgpu device.
  Wait for GPU reset completed.
  Return: Zero if reset success, otherwise will return error.
  amdgpu_virt_alloc_mm_table() - alloc memory for mm table
  @adev:	amdgpu device.
  MM table is used by UVD and VCE for its initialization
  Return: Zero if allocate success.
  amdgpu_virt_free_mm_table() - free mm table memory
  @adev:	amdgpu device.
  Free MM table memory
 calculate checksum 
 minus the checksum itself 
	 GPU will be marked bad on host if bp count more then 10,
	  so alloc 512 is enough.
		 There are two cases of reserve error should be ignored:
		  1) a ras bad page has been allocated (used by someone);
		  2) a ras bad page has been reserved (duplicate error injection
		     for one page);
 TODO: missing key, need to add it later 
 correct too large or too little interval value 
 no requirement, guest understands all
 TODO: read dynamic info 
 bad page handling for version 2 
 other chip doesn't support SRIOV 
 passthrough mode exclus sriov mod 
 we have the ability to check now 
 try send GPU_INIT_DATA request to host 
 other chip doesn't support SRIOV 
  Copyright 2012 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 Call the ATIF method
  amdgpu_atif_call - call an ATIF method
  @atif: atif structure
  @function: the ATIF function to execute
  @params: ATIF function params
  Executes the requested ATIF function (all asics).
  Returns a pointer to the acpi output buffer.
 We need a second fake parameter 
 Fail only if calling the method fails and ATIF is supported 
  amdgpu_atif_parse_notification - parse supported notifications
  @n: supported notifications struct
  @mask: supported notifications mask from ATIF
  Use the supported notifications mask from ATIF function
  ATIF_FUNCTION_VERIFY_INTERFACE to determine what notifications
  are supported (all asics).
  amdgpu_atif_parse_functions - parse supported functions
  @f: supported functions struct
  @mask: supported functions mask from ATIF
  Use the supported functions mask from ATIF function
  ATIF_FUNCTION_VERIFY_INTERFACE to determine what functions
  are supported (all asics).
  amdgpu_atif_verify_interface - verify ATIF
  @atif: amdgpu atif struct
  Execute the ATIF_FUNCTION_VERIFY_INTERFACE ATIF function
  to initialize ATIF and determine what features are supported
  (all asics).
  returns 0 on success, error on failure.
 TODO: check version? 
  amdgpu_atif_get_notification_params - determine notify configuration
  @atif: acpi handle
  Execute the ATIF_FUNCTION_GET_SYSTEM_PARAMETERS ATIF function
  to determine if a notifier is used and if so which one
  (all asics).  This is either Notify(VGA, 0x81) or Notify(VGA, n)
  where n is specified in the result if a notifier is used.
  Returns 0 on success, error on failure.
  amdgpu_atif_query_backlight_caps - get min and max backlight input signal
  @atif: acpi handle
  Execute the QUERY_BRIGHTNESS_TRANSFER_CHARACTERISTICS ATIF function
  to determine the acceptable range of backlight values
  Backlight_caps.caps_valid will be set to true if the query is successful
  The input signals are in range 0-255
  This function assumes the display with backlight is the first LCD
  Returns 0 on success, error on failure.
  amdgpu_atif_get_sbios_requests - get requested sbios event
  @atif: acpi handle
  @req: atif sbios request struct
  Execute the ATIF_FUNCTION_GET_SYSTEM_BIOS_REQUESTS ATIF function
  to determine what requests the sbios is making to the driver
  (all asics).
  Returns 0 on success, error on failure.
  amdgpu_atif_handler - handle ATIF notify requests
  @adev: amdgpu_device pointer
  @event: atif sbios request struct
  Checks the acpi event and if it matches an atif event,
  handles it.
  Returns:
  NOTIFY_BAD or NOTIFY_DONE, depending on the event.
 Is this actually our event? 
 These events will generate keypresses otherwise 
 Check pending SBIOS requests 
				
				  XXX backlight_device_set_brightness() is
				  hardwired to post BACKLIGHT_UPDATE_SYSFS.
				  It probably should accept 'reason' parameter.
 Just fire off a uevent and let userspace tell us what to do 
 TODO: check other events 
	 We've handled the event, stop the notifier chain. The ACPI interface
	  overloads ACPI_VIDEO_NOTIFY_PROBE, we don't want to send that to
	  userspace if the event was generated only to signal a SBIOS
	  request.
 Call the ATCS method
  amdgpu_atcs_call - call an ATCS method
  @atcs: atcs structure
  @function: the ATCS function to execute
  @params: ATCS function params
  Executes the requested ATCS function (all asics).
  Returns a pointer to the acpi output buffer.
 We need a second fake parameter 
 Fail only if calling the method fails and ATIF is supported 
  amdgpu_atcs_parse_functions - parse supported functions
  @f: supported functions struct
  @mask: supported functions mask from ATCS
  Use the supported functions mask from ATCS function
  ATCS_FUNCTION_VERIFY_INTERFACE to determine what functions
  are supported (all asics).
  amdgpu_atcs_verify_interface - verify ATCS
  @atcs: amdgpu atcs struct
  Execute the ATCS_FUNCTION_VERIFY_INTERFACE ATCS function
  to initialize ATCS and determine what features are supported
  (all asics).
  returns 0 on success, error on failure.
 TODO: check version? 
  amdgpu_acpi_is_pcie_performance_request_supported
  @adev: amdgpu_device pointer
  Check if the ATCS pcie_perf_req and pcie_dev_rdy methods
  are supported (all asics).
  returns true if supported, false if not.
  amdgpu_acpi_is_power_shift_control_supported
  Check if the ATCS power shift control method
  is supported.
  returns true if supported, false if not.
  amdgpu_acpi_pcie_notify_device_ready
  @adev: amdgpu_device pointer
  Executes the PCIE_DEVICE_READY_NOTIFICATION method
  (all asics).
  returns 0 on success, error on failure.
  amdgpu_acpi_pcie_performance_request
  @adev: amdgpu_device pointer
  @perf_req: requested perf level (pcie gen speed)
  @advertise: set advertise caps flag if set
  Executes the PCIE_PERFORMANCE_REQUEST method to
  change the pcie gen speed (all asics).
  returns 0 on success, error on failure.
 client id (bit 2-0: func num, 7-3: dev num, 15-8: bus num) 
  amdgpu_acpi_power_shift_control
  @adev: amdgpu_device pointer
  @dev_state: device acpi state
  @drv_state: driver state
  Executes the POWER_SHIFT_CONTROL method to
  communicate current dGPU device state and
  driver state to APUSBIOS.
  returns 0 on success, error on failure.
 dGPU id (bit 2-0: func num, 7-3: dev num, 15-8: bus num) 
  amdgpu_acpi_smart_shift_update - update dGPU device state to SBIOS
  @dev: drm_device pointer
  @ss_state: current smart shift event
  returns 0 on success,
  otherwise return error number.
	 SBIOS trigger “stop”, “enable” and “start” at D0, Driver Operational.
	  SBIOS trigger “stop” at D3, Driver Not Operational.
	  SBIOS trigger “stop” and “disable” at D0, Driver NOT operational.
  amdgpu_acpi_event - handle notify events
  @nb: notifier block
  @val: val
  @data: acpi event
  Calls relevant amdgpu functions in response to various
  acpi events.
  Returns NOTIFY code
 Check for pending SBIOS requests 
 Call all ACPI methods here 
  amdgpu_acpi_init - init driver acpi support
  @adev: amdgpu_device pointer
  Verifies the AMD ACPI interfaces and registers with the acpi
  notifier chain (all asics).
  Returns 0 on success, error on failure.
 Find the encoder controlling the brightness 
  amdgpu_acpi_fini - tear down driver acpi support
  @adev: amdgpu_device pointer
  Unregisters with the acpi notifier chain (all asics).
  amdgpu_atif_pci_probe_handle - look up the ATIF handle
  @pdev: pci device
  Look up the ATIF handles (all asics).
  Returns true if the handle is found, false if not.
  amdgpu_atcs_pci_probe_handle - look up the ATCS handle
  @pdev: pci device
  Look up the ATCS handles (all asics).
  Returns true if the handle is found, false if not.
  amdgpu_acpi_detect - detect ACPI ATIFATCS methods
  Check if we have the ATIFATCS methods and populate
  the structures in the driver.
		 XXX check this workraround, if sbios request function is
		  present we have to see how it's configured in the system
		  params
 Disable notification 
  amdgpu_acpi_is_s0ix_active
  @adev: amdgpu_device_pointer
  returns true if supported, false if not.
  Copyright 2008 Advanced Micro Devices, Inc.
  Copyright 2008 Red Hat Inc.
  Copyright 2009 Jerome Glisse.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: Dave Airlie
           Alex Deucher
           Jerome Glisse
  DOC: GPUVM
  GPUVM is similar to the legacy gart on older asics, however
  rather than there being a single global gart table
  for the entire GPU, there are multiple VM page tables active
  at any given time.  The VM page tables can contain a mix
  vram pages and system memory pages and system memory pages
  can be mapped as snooped (cached system pages) or unsnooped
  (uncached system pages).
  Each VM has an ID associated with it and there is a page table
  associated with each VMID.  When execting a command buffer,
  the kernel tells the the ring what VMID to use for that command
  buffer.  VMIDs are allocated dynamically as commands are submitted.
  The userspace drivers maintain their own address space and the kernel
  sets up their pages tables accordingly when they submit their
  command buffers and a VMID is assigned.
  CaymanTrinity support up to 8 active VMs at any given time;
  SI supports 16.
  struct amdgpu_prt_cb - Helper to disable partial resident texture feature from a fence callback
	
	  @adev: amdgpu device
	
	  @cb: callback
  amdgpu_vm_set_pasid - manage pasid and vm ptr mapping
  @adev: amdgpu_device pointer
  @vm: amdgpu_vm pointer
  @pasid: the pasid the VM is using on this GPU
  Set the pasid this VM is using on this GPU, can also be used to remove the
  pasid by passing in zero.
  vm eviction_lock can be taken in MMU notifiers. Make sure no reclaim-FS
  happens while holding this lock anywhere to prevent deadlocks when
  an MMU notifier runs in reclaim-FS context.
  amdgpu_vm_level_shift - return the addr shift for each level
  @adev: amdgpu_device pointer
  @level: VMPT level
  Returns:
  The number of bits the pfn needs to be right shifted for a level.
  amdgpu_vm_num_entries - return the number of entries in a PDPT
  @adev: amdgpu_device pointer
  @level: VMPT level
  Returns:
  The number of entries in a page directory or page table.
 For the root directory 
 Everything in between 
 For the page tables on the leaves 
  amdgpu_vm_num_ats_entries - return the number of ATS entries in the root PD
  @adev: amdgpu_device pointer
  Returns:
  The number of entries in the root page directory which needs the ATS setting.
  amdgpu_vm_entries_mask - the mask to get the entry number of a PDPT
  @adev: amdgpu_device pointer
  @level: VMPT level
  Returns:
  The mask to extract the entry number of a PDPT from an address.
  amdgpu_vm_bo_size - returns the size of the BOs in bytes
  @adev: amdgpu_device pointer
  @level: VMPT level
  Returns:
  The size of the BO for a page directory or page table in bytes.
  amdgpu_vm_bo_evicted - vm_bo is evicted
  @vm_bo: vm_bo which is evicted
  State for PDsPTs and per VM BOs which are not at the location they should
  be.
  amdgpu_vm_bo_moved - vm_bo is moved
  @vm_bo: vm_bo which is moved
  State for per VM BOs which are moved, but that change is not yet reflected
  in the page tables.
  amdgpu_vm_bo_idle - vm_bo is idle
  @vm_bo: vm_bo which is now idle
  State for PDsPTs and per VM BOs which have gone through the state machine
  and are now idle.
  amdgpu_vm_bo_invalidated - vm_bo is invalidated
  @vm_bo: vm_bo which is now invalidated
  State for normal BOs which are invalidated and that change not yet reflected
  in the PTs.
  amdgpu_vm_bo_relocated - vm_bo is reloacted
  @vm_bo: vm_bo which is relocated
  State for PDsPTs which needs to update their parent PD.
  For the root PD, just move to idle state.
  amdgpu_vm_bo_done - vm_bo is done
  @vm_bo: vm_bo which is now done
  State for normal BOs which are invalidated and that change has been updated
  in the PTs.
  amdgpu_vm_bo_base_init - Adds bo to the list of bos associated with the vm
  @base: base structure for tracking BO usage in a VM
  @vm: vm to which bo is to be added
  @bo: amdgpu buffer object
  Initialize a bo_va_base structure and add it to the appropriate lists
	
	  we checked all the prerequisites, but it looks like this per vm bo
	  is currently evicted. add the bo to the evicted list to make sure it
	  is validated on next vm use to avoid fault.
  amdgpu_vm_pt_parent - get the parent page directory
  @pt: child page table
  Helper to get the parent entry for the child page table. NULL if we are at
  the root page directory.
  amdgpu_vm_pt_cursor - state for for_each_amdgpu_vm_pt
  amdgpu_vm_pt_start - start PDPT walk
  @adev: amdgpu_device pointer
  @vm: amdgpu_vm structure
  @start: start address of the walk
  @cursor: state to initialize
  Initialize a amdgpu_vm_pt_cursor to start a walk.
  amdgpu_vm_pt_descendant - go to child node
  @adev: amdgpu_device pointer
  @cursor: current state
  Walk to the child node of the current node.
  Returns:
  True if the walk was possible, false otherwise.
  amdgpu_vm_pt_sibling - go to sibling node
  @adev: amdgpu_device pointer
  @cursor: current state
  Walk to the sibling node of the current node.
  Returns:
  True if the walk was possible, false otherwise.
 Root doesn't have a sibling 
 Go to our parents and see if we got a sibling 
  amdgpu_vm_pt_ancestor - go to parent node
  @cursor: current state
  Walk to the parent node of the current node.
  Returns:
  True if the walk was possible, false otherwise.
  amdgpu_vm_pt_next - get next PDPT in hieratchy
  @adev: amdgpu_device pointer
  @cursor: current state
  Walk the PDPT tree to the next node.
 First try a newborn child 
 If that didn't worked try to find a sibling 
 No sibling, go to our parents and grandparents 
  amdgpu_vm_pt_first_dfs - start a deep first search
  @adev: amdgpu_device structure
  @vm: amdgpu_vm structure
  @start: optional cursor to start with
  @cursor: state to initialize
  Starts a deep first traversal of the PDPT tree.
  amdgpu_vm_pt_continue_dfs - check if the deep first search should continue
  @start: starting point for the search
  @entry: current entry
  Returns:
  True when the search should continue, false otherwise.
  amdgpu_vm_pt_next_dfs - get the next node for a deep first search
  @adev: amdgpu_device structure
  @cursor: current state
  Move the cursor to the next node in a deep first search.
  for_each_amdgpu_vm_pt_dfs_safe - safe deep first search of all PDsPTs
  amdgpu_vm_get_pd_bo - add the VM PD to a validation list
  @vm: vm providing the BOs
  @validated: head of validation list
  @entry: entry to add
  Add the page directory to the list of BOs to
  validate for command submission.
 Two for VM updates, one for TTM and one for the CS job 
  amdgpu_vm_del_from_lru_notify - update bulk_moveable flag
  @bo: BO which was removed from the LRU
  Make sure the bulk_moveable flag is updated when a BO is removed from the
  LRU.
  amdgpu_vm_move_to_lru_tail - move all BOs to the end of LRU
  @adev: amdgpu device pointer
  @vm: vm providing the BOs
  Move all BOs to the end of LRU and remember their positions to put them
  together.
  amdgpu_vm_validate_pt_bos - validate the page table BOs
  @adev: amdgpu device pointer
  @vm: vm providing the BOs
  @validate: callback to do the validation
  @param: parameter for the validation callback
  Validate the page table BOs on command submission if neccessary.
  Returns:
  Validation result.
  amdgpu_vm_ready - check VM is ready for updates
  @vm: VM to check
  Check if all VM PDsPTs are ready for updates
  Returns:
  True if eviction list is empty.
  amdgpu_vm_clear_bo - initially clear the PDsPTs
  @adev: amdgpu_device pointer
  @vm: VM to clear BO from
  @vmbo: BO to clear
  @immediate: use an immediate update
  Root PD needs to be reserved when calling this.
  Returns:
  0 on success, errno otherwise.
 Figure out our place in the hierarchy 
 Handle leaf PDEs as PTEs 
 Handle leaf PDEs as PTEs 
 Workaround for fault priority problem on GMC9 
  amdgpu_vm_pt_create - create bo for PDPT
  @adev: amdgpu_device pointer
  @vm: requesting vm
  @level: the page table level
  @immediate: use a immediate update
  @vmbo: pointer to the buffer object pointer
  amdgpu_vm_alloc_pts - Allocate a specific page table
  @adev: amdgpu_device pointer
  @vm: VM to allocate page tables for
  @cursor: Which page table to allocate
  @immediate: use an immediate update
  Make sure a specific page table or directory is allocated.
  Returns:
  1 if page table needed to be allocated, 0 if page table was already
  allocated, negative errno if an error occurred.
	 Keep a reference to the root directory to avoid
	  freeing them up in the wrong order.
  amdgpu_vm_free_table - fre one PDPT
  @entry: PDE to free
  amdgpu_vm_free_pts - free PDPT levels
  @adev: amdgpu device structure
  @vm: amdgpu vm structure
  @start: optional cursor where to start freeing PDsPTs
  Free the page directory or page table level and all sub levels.
  amdgpu_vm_check_compute_bug - check whether asic has compute vm bug
  @adev: amdgpu_device pointer
		 Compute has a VM bug for GFX version < 7.
 only compute rings 
  amdgpu_vm_need_pipeline_sync - Check if pipe sync is needed for job.
  @ring: ring on which the job will be submitted
  @job: job to submit
  Returns:
  True if sync is needed.
  amdgpu_vm_flush - hardware flush the vm
  @ring: ring to use for flush
  @job:  related job
  @need_pipe_sync: is pipe sync needed
  Emit a VM flush when it is necessary.
  Returns:
  0 on success, errno otherwise.
 the double SWITCH_BUFFER here cannot be skipped by COND_EXEC 
  amdgpu_vm_bo_find - find the bo_va for a specific vm & bo
  @vm: requested vm
  @bo: requested buffer object
  Find @bo inside the requested vm.
  Search inside the @bos vm list for the requested vm
  Returns the found bo_va or NULL if none is found
  Object has to be reserved!
  Returns:
  Found bo_va or NULL.
  amdgpu_vm_map_gart - Resolve gart mapping of addr
  @pages_addr: optional DMA address to use for lookup
  @addr: the unmapped addr
  Look up the physical address of the page that the pte resolves
  to.
  Returns:
  The pointer for the page table entry.
 page table offset 
 in case cpu page size != gpu page size
  amdgpu_vm_update_pde - update a single level in the hierarchy
  @params: parameters for the update
  @vm: requested vm
  @entry: entry to update
  Makes sure the requested entry in parent is up to date.
  amdgpu_vm_invalidate_pds - mark all PDs as invalid
  @adev: amdgpu_device pointer
  @vm: related vm
  Mark all PD level as invalid after an error.
  amdgpu_vm_update_pdes - make sure that all directories are valid
  @adev: amdgpu_device pointer
  @vm: requested vm
  @immediate: submit immediately to the paging queue
  Makes sure all directories are up to date.
  Returns:
  0 for success, error for failure.
  amdgpu_vm_update_flags - figure out flags for PTE updates
  Make sure to set the right flags for the PTEs at the desired level.
 Workaround for fault priority problem on GMC9 
  amdgpu_vm_fragment - get fragment for PTEs
  @params: see amdgpu_vm_update_params definition
  @start: first PTE to handle
  @end: last PTE to handle
  @flags: hw mapping flags
  @frag: resulting fragment size
  @frag_end: end of this fragment
  Returns the first possible fragment for the start and end address.
	
	  The MC L1 TLB supports variable sized pages, based on a fragment
	  field in the PTE. When this field is set to a non-zero value, page
	  granularity is increased from 4KB to (1 << (12 + frag)). The PTE
	  flags are considered valid for all PTEs within the fragment range
	  and corresponding mappings are assumed to be physically contiguous.
	 
	  The L1 TLB can store a single PTE for the whole fragment,
	  significantly increasing the space available for translation
	  caching. This leads to large improvements in throughput when the
	  TLB is under pressure.
	 
	  The L2 TLB distributes small and large fragments into two
	  asymmetric partitions. The large fragment cache is significantly
	  larger. Thus, we try to use large fragments wherever possible.
	  Userspace can support this by aligning virtual base address and
	  allocation size to the fragment size.
	 
	  Starting with Vega10 the fragment size only controls the L1. The L2
	  is now directly feed with smallhugegiant pages from the walker.
 system pages are non continuously 
 This intentionally wraps around if no bit is set 
  amdgpu_vm_update_ptes - make sure that page tables are valid
  @params: see amdgpu_vm_update_params definition
  @start: start of GPU address range
  @end: end of GPU address range
  @dst: destination address to map to, the next dst inside the function
  @flags: mapping flags
  Update the page tables in the range @start - @end.
  Returns:
  0 for success, -EINVAL for failure.
 figure out the initial fragment 
 walk over the address space and update the PTs 
			 make sure that the page tables covering the
			  address range are actually allocated
 Unlocked updates are only allowed on the leaves 
 No huge page support before GMC v9 
			 We can't use this level when the fragment size is
			  smaller than the address shift. Go to the next
			  child entry and try again.
			 If the fragment size is even larger than the parent
			  shift we should go up one level and check it again.
 We need all PDs and PTs for mapping something, 
			 but unmapping something can happen at a higher
			  level.
 Looks good so far, calculate parameters for the update 
			 This can happen when we set higher level PDs to
			  silent to stop fault floods.
 figure out the next fragment 
			 Free all child entries.
			  Update the tables with the flags and addresses and free up subsequent
			  tables in the case of huge pages or freed up areas.
			  This is the maximum you can free, because all other page tables are not
			  completely covered by the range and so potentially still in use.
 Make sure previous mapping is freed 
 or just move on to the next on the same level. 
  amdgpu_vm_bo_update_mapping - update a mapping in the vm page table
  @adev: amdgpu_device pointer of the VM
  @bo_adev: amdgpu_device pointer of the mapped BO
  @vm: requested vm
  @immediate: immediate submission in a page fault
  @unlocked: unlocked invalidation during MM callback
  @resv: fences we need to sync to
  @start: start of mapped range
  @last: last mapped entry
  @flags: flags for the entries
  @offset: offset into nodes and pages_addr
  @res: ttm_resource to map
  @pages_addr: DMA addresses to use for mapping
  @fence: optional resulting fence
  @table_freed: return true if page table is freed
  Fill in the page table entries between @start and @last.
  Returns:
  0 for success, -EINVAL for failure.
	 Implicitly sync to command submissions in the same VM before
	  unmapping. Sync to moving fences before mapping.
  amdgpu_vm_bo_update - update all BO mappings in the vm page table
  @adev: amdgpu_device pointer
  @bo_va: requested BO and VM object
  @clear: if true clear the entries
  @table_freed: return true if page table is freed
  Fill in the page table entries for @bo_va.
  Returns:
  0 for success, -EINVAL for failure.
		 normally,bo_va->flags only contians READABLE and WIRTEABLE bit go here
		  but in case of something, we filter the flags in first place
 Apply ASIC specific mapping flags 
	 If the BO is not in its preferred location add it back to
	  the evicted list so that it gets validated again on the
	  next command submission.
  amdgpu_vm_update_prt_state - update the global PRT state
  @adev: amdgpu_device pointer
  amdgpu_vm_prt_get - add a PRT user
  @adev: amdgpu_device pointer
  amdgpu_vm_prt_put - drop a PRT user
  @adev: amdgpu_device pointer
  amdgpu_vm_prt_cb - callback for updating the PRT status
  @fence: fence for the callback
  @_cb: the callback function
  amdgpu_vm_add_prt_cb - add callback for updating the PRT status
  @adev: amdgpu_device pointer
  @fence: fence for the callback
 Last resort when we are OOM 
  amdgpu_vm_free_mapping - free a mapping
  @adev: amdgpu_device pointer
  @vm: requested vm
  @mapping: mapping to be freed
  @fence: fence of the unmap operation
  Free a mapping and make sure we decrease the PRT usage count if applicable.
  amdgpu_vm_prt_fini - finish all prt mappings
  @adev: amdgpu_device pointer
  @vm: requested vm
  Register a cleanup callback to disable PRT support after VM dies.
		 Not enough memory to grab the fence list, as last resort
		  block for all the fences to complete.
 Add a callback for each fence in the reservation object 
  amdgpu_vm_clear_freed - clear freed BOs in the PT
  @adev: amdgpu_device pointer
  @vm: requested vm
  @fence: optional resulting fence (unchanged if no work needed to be done
  or if an error occurred)
  Make sure all freed BOs are cleared in the PT.
  PTs have to be reserved and mutex must be locked!
  Returns:
  0 for success.
  amdgpu_vm_handle_moved - handle moved BOs in the PT
  @adev: amdgpu_device pointer
  @vm: requested vm
  Make sure all BOs which are moved are updated in the PTs.
  Returns:
  0 for success.
  PTs have to be reserved!
 Per VM BOs never need to bo cleared in the page tables 
 Try to reserve the BO to avoid clearing its ptes 
 Somebody else is using the BO right now 
  amdgpu_vm_bo_add - add a bo to a specific vm
  @adev: amdgpu_device pointer
  @vm: requested vm
  @bo: amdgpu buffer object
  Add @bo into the requested vm.
  Add @bo to the list of bos associated with the vm
  Returns:
  Newly added bo_va or NULL for failure
  Object has to be reserved!
 Power up XGMI if it can be potentially used 
  amdgpu_vm_bo_insert_map - insert a new mapping
  @adev: amdgpu_device pointer
  @bo_va: bo_va to store the address
  @mapping: the mapping to insert
  Insert a new mapping into all structures.
  amdgpu_vm_bo_map - map bo inside a vm
  @adev: amdgpu_device pointer
  @bo_va: bo_va to store the address
  @saddr: where to map the BO
  @offset: requested offset in the BO
  @size: BO size in bytes
  @flags: attributes of pages (readwritevalidetc.)
  Add a mapping of the BO at the specefied addr into the VM.
  Returns:
  0 for success, error for failure.
  Object has to be reserved and unreserved outside!
 validate the parameters 
 make sure object fit at this offset 
 bo and tmp overlap, invalid addr 
  amdgpu_vm_bo_replace_map - map bo inside a vm, replacing existing mappings
  @adev: amdgpu_device pointer
  @bo_va: bo_va to store the address
  @saddr: where to map the BO
  @offset: requested offset in the BO
  @size: BO size in bytes
  @flags: attributes of pages (readwritevalidetc.)
  Add a mapping of the BO at the specefied addr into the VM. Replace existing
  mappings as we do so.
  Returns:
  0 for success, error for failure.
  Object has to be reserved and unreserved outside!
 validate the parameters 
 make sure object fit at this offset 
 Allocate all the needed memory 
  amdgpu_vm_bo_unmap - remove bo mapping from vm
  @adev: amdgpu_device pointer
  @bo_va: bo_va to remove the address from
  @saddr: where to the BO is mapped
  Remove a mapping of the BO at the specefied addr from the VM.
  Returns:
  0 for success, error for failure.
  Object has to be reserved and unreserved outside!
  amdgpu_vm_bo_clear_mappings - remove all mappings in a specific range
  @adev: amdgpu_device pointer
  @vm: VM structure to use
  @saddr: start of the range
  @size: size of the range
  Remove all mappings in a range, split them as appropriate.
  Returns:
  0 for success, error for failure.
 Allocate all the needed memory 
 Now gather all removed mappings 
 Remember mapping split at the start 
 Remember mapping split at the end 
 And free them up 
 Insert partial mapping before the range 
 Insert partial mapping after the range 
  amdgpu_vm_bo_lookup_mapping - find mapping by address
  @vm: the requested VM
  @addr: the address
  Find a mapping by it's address.
  Returns:
  The amdgpu_bo_va_mapping matching for addr or NULL
  amdgpu_vm_bo_trace_cs - trace all reserved mappings
  @vm: the requested vm
  @ticket: CS ticket
  Trace all mappings of BOs reserved during a command submission.
  amdgpu_vm_bo_rmv - remove a bo to a specific vm
  @adev: amdgpu_device pointer
  @bo_va: requested bo_va
  Remove @bo_va->bo from the requested vm.
  Object have to be reserved!
  amdgpu_vm_evictable - check if we can evict a VM
  @bo: A page table of the VM.
  Check if it is possible to evict a VM.
 Page tables of a destroyed VM can go away immediately 
 Don't evict VM page tables while they are busy 
 Try to block ongoing updates 
 Don't evict VM page tables while they are updated 
  amdgpu_vm_bo_invalidate - mark the bo as invalid
  @adev: amdgpu_device pointer
  @bo: amdgpu buffer object
  @evicted: is the BO evicted
  Mark @bo as invalid.
 shadow bo doesn't have bo base, its validation needs its parent 
  amdgpu_vm_get_block_size - calculate VM page table size as power of two
  @vm_size: VM size
  Returns:
  VM page table as power of two
 Total bits covered by PD + PTs 
	 Make sure the PD is 4K in size up to 8GB address space.
  amdgpu_vm_adjust_size - adjust vm size, block size and fragment size
  @adev: amdgpu_device pointer
  @min_vm_size: the minimum vm size in GB if it's set auto
  @fragment_size_default: Default PTE fragment size
  @max_level: max VMPT level
  @max_bits: max address space size in bits
 adjust vm size first 
		 Optimal VM size depends on the amount of physical
		  RAM available. Underlying requirements and
		  assumptions:
		 
		   - Need to map system memory and VRAM from all GPUs
		      - VRAM from other GPUs not known here
		      - Assume VRAM <= system memory
		   - On GFX8 and older, VM space can be segmented for
		     different MTYPEs
		   - Need to allow room for fragmentation, guard pages etc.
		 
		  This adds up to a rough guess of system memory x3.
		  Round up to power of two to maximize the available
		  VM size with the given page table size.
 block size depends on vm size and hw setup
  amdgpu_vm_wait_idle - wait for the VM to become idle
  @vm: VM object to wait for
  @timeout: timeout to wait for VM to become idle
  amdgpu_vm_init - initialize a vm instance
  @adev: amdgpu_device pointer
  @vm: requested vm
  Init @vm fields.
  Returns:
  0 for success, error for failure.
 create scheduler entities for page table updates 
  amdgpu_vm_check_clean_reserved - check if a VM is clean
  @adev: amdgpu_device pointer
  @vm: the VM to check
  check all entries of the root PD, if any subsequent PDs are allocated,
  it means there are page table creating and filling, and is no a clean
  VM
  Returns:
 	0 if this VM is clean
  amdgpu_vm_make_compute - Turn a GFX VM into a compute VM
  @adev: amdgpu_device pointer
  @vm: requested vm
  This only works on GFX VMs that don't have any BOs added and no
  page tables allocated yet.
  Changes the following VM parameters:
  - use_cpu_for_update
  - pte_supports_ats
  Reinitializes the page directory to reflect the changed ATS
  setting.
  Returns:
  0 for success, -errno for errors.
 Sanity checks 
	 Check if PD needs to be reinitialized and do it before
	  changing any other state, in case it fails.
 Update VM state 
 Sync with last SDMA updateclear before switching to CPU 
 Free the shadow bo for compute VM 
  amdgpu_vm_release_compute - release a compute vm
  @adev: amdgpu_device pointer
  @vm: a vm turned into compute vm by calling amdgpu_vm_make_compute
  This is a correspondant of amdgpu_vm_make_compute. It decouples compute
  pasid from vm. Compute should stop use of vm after this call.
  amdgpu_vm_fini - tear down a vm instance
  @adev: amdgpu_device pointer
  @vm: requested vm
  Tear down @vm.
  Unbind the VM and remove all bos from the vm bo list
		 Don't remove the mapping here, we don't want to trigger a
		  rebalance and the tree is about to be destroyed anyway.
  amdgpu_vm_manager_init - init the VM manager
  @adev: amdgpu_device pointer
  Initialize the VM manager structures
	 Concurrent flushes are only possible starting with Vega10 and
	  are broken on Navi10 and Navi14.
	 If not overridden by the user, by default, only in large BAR systems
	  Compute VM tables will be updated by CPU
  amdgpu_vm_manager_fini - cleanup VM manager
  @adev: amdgpu_device pointer
  Cleanup the VM manager and free resources.
  amdgpu_vm_ioctl - Manages VMID reservation for vm hubs.
  @dev: drm device pointer
  @data: drm_amdgpu_vm
  @filp: drm file pointer
  Returns:
  0 for success, -errno for errors.
 We only have requirement to reserve vmid from gfxhub 
		 Wait vm idle to make sure the vmid set in SPM_VMID is
		  not referenced anymore.
  amdgpu_vm_get_task_info - Extracts task info for a PASID.
  @adev: drm device pointer
  @pasid: PASID identifier for VM
  @task_info: task_info to fill.
  amdgpu_vm_set_task_info - Sets VMs task info.
  @vm: vm for which to set the info
  amdgpu_vm_handle_fault - graceful handling of VM faults.
  @adev: amdgpu device pointer
  @pasid: PASID of the VM
  @addr: Address of the fault
  @write_fault: true is write fault, false is read fault
  Try to gracefully handle a VM fault. Return true if the fault was handled and
  shouldn't be reported any more.
 Double check that the VM still exists 
		 Intentionally setting invalid PTE flag
		  combination to force a no-retry-fault
 Redirect the access to the dummy page 
 Let the hw retry silently on the PTE 
  amdgpu_debugfs_vm_bo_info  - print BO info for the VM
  @vm: Requested VM for printing BO info
  @m: debugfs file
  Print BO information in debugfs file for the VM
  Copyright 2019 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Copyright 2008 Advanced Micro Devices, Inc.
  Copyright 2008 Red Hat Inc.
  Copyright 2009 Jerome Glisse.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: Dave Airlie
           Alex Deucher
           Jerome Glisse
           Christian König
  Rings
  Most engines on the GPU are fed via ring buffers.  Ring
  buffers are areas of GPU accessible memory that the host
  writes commands into and the GPU reads commands out of.
  There is a rptr (read pointer) that determines where the
  GPU is currently reading, and a wptr (write pointer)
  which determines where the host has written.  When the
  pointers are equal, the ring is idle.  When the host
  writes commands to the ring buffer, it increments the
  wptr.  The GPU then starts fetching commands and executes
  them until the pointers are equal again.
  amdgpu_ring_alloc - allocate space on the ring buffer
  @ring: amdgpu_ring structure holding ring information
  @ndw: number of dwords to allocate in the ring buffer
  Allocate @ndw dwords in the ring buffer (all asics).
  Returns 0 on success, error on failure.
	 Align requested size with padding so unlock_commit can
	 Make sure we aren't trying to allocate more space
	  than the maximum for one submission
 amdgpu_ring_insert_nop - insert NOP packets
  @ring: amdgpu_ring structure holding ring information
  @count: the number of NOP packets to insert
  This is the generic insert_nop function for rings except SDMA
  amdgpu_ring_generic_pad_ib - pad IB with NOP packets
  @ring: amdgpu_ring structure holding ring information
  @ib: IB to add NOP packets to
  This is the generic pad_ib function for rings except SDMA
  amdgpu_ring_commit - tell the GPU to execute the new
  commands on the ring buffer
  @ring: amdgpu_ring structure holding ring information
  Update the wptr (write pointer) to tell the GPU to
  execute new commands on the ring buffer (all asics).
 We pad to match fetch size 
  amdgpu_ring_undo - reset the wptr
  @ring: amdgpu_ring structure holding ring information
  Reset the driver's copy of the wptr (all asics).
  amdgpu_ring_init - init driver ring struct.
  @adev: amdgpu_device pointer
  @ring: amdgpu_ring structure holding ring information
  @max_dw: maximum number of dw for ring alloc
  @irq_src: interrupt source to use for this ring
  @irq_type: interrupt type to use for this ring
  @hw_prio: ring priority (NORMALHIGH)
  @sched_score: optional score atomic shared with other schedulers
  Initialize the driver information for the selected ring (all asics).
  Returns 0 on success, error on failure.
	 Set the hw submission limit higher for KIQ because
	  it's used for a number of gfxcompute tasks by both
	  KFD and KGD which may have outstanding fences and
	  it doesn't really use the gpu scheduler anyway;
	  KIQ tasks get submitted directly to the ring.
 always set cond_exec_polling to CONTINUE 
 Allocate ring buffer 
  amdgpu_ring_fini - tear down the driver ring struct.
  @ring: amdgpu_ring structure holding ring information
  Tear down the driver information for the selected ring (all asics).
 Not to finish a ring which is not initialized 
  amdgpu_ring_emit_reg_write_reg_wait_helper - ring helper
  @ring: ring to write to
  @reg0: register to write
  @reg1: register to wait on
  @ref: reference value to writewait on
  @mask: mask to wait on
  Helper for rings that don't support write and wait in a
  single oneshot packet.
  amdgpu_ring_soft_recovery - try to soft recover a ring lockup
  @ring: ring to try the recovery on
  @vmid: VMID we try to get going again
  @fence: timedout fence
  Tries to get a ring proceeding again when it is stuck.
  Debugfs info
 Layout of file is 12 bytes consisting of
  - rptr
  - wptr
  - driver's copy of wptr
  followed by n-words of ring data
  amdgpu_ring_test_helper - tests ring and set sched readiness status
  @ring: ring to try the recovery on
  Tests ring and set sched readiness status
  Returns 0 on success, error on failure.
  Copyright 2020 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 version of the fwar feature 
 cookie as an extra check for corrupt data 
 Legacy FW Type field 
 V2 FW ID field 
 FW Version 
 The VF ID (only in VF Attestation Table) 
 FW source indicator 
 Indicates whether the record is a valid entry 
 Ta ID (only in TA Attestation Table) 
  Copyright 2019 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 invalidate using legacy mode on vmid
 Disable AGP. 
 Program the system aperture low logical page number. 
 Set default page address. 
 Program "protection fault". 
 Setup TLB control 
 UC, uncached 
 Setup L2 cache 
 XXX for emulation, Refer to closed source code.
 Send no-retry XNACK on fault to suppress VM fault storm. 
		
		  MMMC_VM_FB_LOCATION_BASETOP is NULL for VF, becuase they are
		  VF copy registers so vbios post doesn't program them, for
		  SRIOV driver need to program them
 GART Enable. 
 Disable all tables 
 Setup TLB control 
 Setup L2 cache 
  mmhub_v2_3_set_fault_enable_default - update GARTVM fault handling
  @adev: amdgpu_device pointer
  @value: true redirects VM faults to the default page
 AMD_CG_SUPPORT_MC_MGCG 
 AMD_CG_SUPPORT_MC_LS 
  Copyright 2021 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 Don't suspend on bare metal if we are not going to HW reset the ASIC 
 disable BM 
 Wrong context, return error 
	
	  Mode2 reset doesn't need any sync between nodes in XGMI hive, instead launch
	  them together so that they can be completed asynchronously on multiple nodes
 For XGMI run all resets in parallel to speed up the process 
 For XGMI wait for all resets to complete before proceed 
 Reinit NBIF block 
 Reinit GFXHUB 
 Reload GFX firmware 
 Resume RLC, FW needs RLC alive to complete reset process 
 Wait for FW reset event complete 
 Wrong context, return error 
		
		  Add this ASIC as tracked as reset was already
		  complete successfully.
 Resume RAS 
 Update PSP FW topology after reset 
 Only mode2 is handled through reset control now 
  Copyright 2013 Advanced Micro Devices, Inc.
  All Rights Reserved.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sub license, andor sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
  THE COPYRIGHT HOLDERS, AUTHORS ANDOR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,
  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  USE OR OTHER DEALINGS IN THE SOFTWARE.
  The above copyright notice and this permission notice (including the
  next paragraph) shall be included in all copies or substantial portions
  of the Software.
  Authors: Christian König <christian.koenig@amd.com>
  vce_v2_0_ring_get_rptr - get read pointer
  @ring: amdgpu_ring pointer
  Returns the current hardware read pointer
  vce_v2_0_ring_get_wptr - get write pointer
  @ring: amdgpu_ring pointer
  Returns the current hardware write pointer
  vce_v2_0_ring_set_wptr - set write pointer
  @ring: amdgpu_ring pointer
  Commits the write pointer to the hardware
  vce_v2_0_start - start VCE block
  @adev: amdgpu_device pointer
  Setup and start the VCE block
 set BUSY flag 
 clear BUSY flag 
 Stall UMC and register bus before resetting VCPU 
 put LMI, VCPU, RBC etc... into reset 
 LMI_MCLMI_UMC always set in dynamic,
  set {CGC__GATE_MODE, CGC__SW_GATE} = {0, 0}
 Exception for ECPU, IH, SEM, SYS blocks needs to be turned onoff by SW 
 set VCE_UENC_REG_CLOCK_GATING always in dynamic mode 
 VCE 
	
	  Proper cleanups before halting the HW engine:
	    - cancel the delayed idle work
	    - enable powergating
	    - enable clockgating
	    - disable dpm
	 
	  TODO: to align with the VCN implementation, move the
	  jobs for clockgatingpowergatingdpm setting to
	  ->set_powergating_state().
	 This doesn't actually powergate the VCE block.
	  That's done in the dpm code via the SMC.  This
	  just re-inits the block as necessary.  The actual
	  gating still happens in the dpm code.  We should
	  revisit this when there is a cleaner line between
	  the smc and the hw blocks
 amdgpu_vce_ring_emit_fence  x1 no user fence 
 amdgpu_vce_ring_emit_ib 
  Copyright 2020 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 setup interrupt control 
	
	  INTERRUPT_CNTL__IH_DUMMY_RD_OVERRIDE_MASK=0 - dummy read disabled with msi, enabled without msi
	  INTERRUPT_CNTL__IH_DUMMY_RD_OVERRIDE_MASK=1 - dummy read controlled by IH_DUMMY_RD_EN
 INTERRUPT_CNTL__IH_REQ_NONSNOOP_EN_MASK=1 if ring is in non-cacheable memory, e.g., vram 
 AMD_CG_SUPPORT_BIF_MGCG 
 AMD_CG_SUPPORT_BIF_LS 
  Copyright 2014 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
	
	  We have to assume that there is no outstanding mapping.
	  The ATC_VMID_PASID_MAPPING_UPDATE_STATUS bit could be 0 because
	  a mapping is in progress or because a mapping finished
	  and the SW cleared it.
	  So the protocol is to always wait & clear.
 Mapping vmid to pasid also for IH block 
 HIQ is set during driver init period with vmid set to 0
 HQD registers extend from CP_MQD_BASE_ADDR to CP_HQD_EOP_WPTR_MEM. 
	 Tonga errata: EOP RPTRWPTR should be left unmodified.
	  This is safe since EOP RPTR==WPTR for any inactive HQD
	  on ASICs that do not support context-save.
	  EOP writesreads can start anywhere in the ring.
	 Copy userspace write pointer value to register.
	  Activate doorbell logic to monitor subsequent changes.
	 read_user_ptr may take the mm->mmap_lock.
	  release srbm_mutex to avoid circular dependency between
	  srbm_mutex->mm_sem->reservation_ww_class_mutex->srbm_mutex.
	 Workaround: If IQ timer is active and the wait time is close to or
	  equal to 0, dequeueing is not safe. Wait until either the wait time
	  is larger or timer is cleared. Also, ensure that IQ_REQ_PEND is
	  cleared before continuing. Also, ensure wait times are set to at
	  least 0x3.
 wait for 500 usecs at maximum 
 SEM-rearm is safe 
			 Wait time 3 is safe for CP, but our MMIO readwrite
			  time is close to 1 microsecond, so check for 10 to
			  leave more buffer room
  Copyright 2021 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Copyright 2015 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
static void gfx_v6_0_init_cp_pg_table(struct amdgpu_device adev);
 GRBM_GFX_INDEX has a different offset on SI 
 GRBM_GFX_INDEX has a different offset on SI 
 cache the values for userspace 
 flush read cache over gart 
 poll interval 
 EVENT_WRITE_EOP - flush caches, send int 
 insert SWITCH_BUFFER packet before first IB in the ring frame 
  gfx_v6_0_ring_test_ib - basic ring IB test
  @ring: amdgpu_ring structure holding ring information
  @timeout: timeout value in jiffies, or MAX_SCHEDULE_TIMEOUT
  Allocate an IB and execute it on the gfx ring (SI).
  Provides a basic gfx ring test to verify that IBs are working.
  Returns 0 on success, error on failure.
 PFP 
 CE 
 ME 
 Set the write pointer delay 
 ring 0 - compute and gfx 
 Set ring buffer size 
 Initialize the ring buffer's read and write pointers 
 set the wb address whether it's enabled or not 
 start the rings 
 ring1  - compute only 
 Set ring buffer size 
 read a gfx register 
 memory 
 equal 
 pfp or me 
 poll interval 
 synce CE with ME to prevent CE fetch CEIB before context switch done 
 wait for the invalidate to complete 
 always 
 me 
 ref 
 mask 
 poll interval 
 sync PFP to ME, otherwise we might get invalid PFP reads 
 synce CE with ME to prevent CE fetch CEIB before context switch done 
 init save restore block 
 clear state block 
 set up the cs buffer 
 Enable LBPW only for DDR3 
static void gfx_v6_0_update_cg(struct amdgpu_device adev,
			       bool enable)
{
	gfx_v6_0_enable_gui_idle_interrupt(adev, false);
	if (enable) {
		gfx_v6_0_enable_mgcg(adev, true);
		gfx_v6_0_enable_cgcg(adev, true);
	} else {
		gfx_v6_0_enable_cgcg(adev, false);
		gfx_v6_0_enable_mgcg(adev, false);
	}
	gfx_v6_0_enable_gui_idle_interrupt(adev, true);
}
static void gfx_v6_0_init_cp_pg_table(struct amdgpu_device adev)
{
	const __le32 fw_data;
	volatile u32 dst_ptr;
	int me, i, max_me = 4;
	u32 bo_offset = 0;
	u32 table_offset, table_size;
	if (adev->asic_type == CHIP_KAVERI)
		max_me = 5;
	if (adev->gfx.rlc.cp_table_ptr == NULL)
		return;
	dst_ptr = adev->gfx.rlc.cp_table_ptr;
	for (me = 0; me < max_me; me++) {
		if (me == 0) {
			const struct gfx_firmware_header_v1_0 hdr =
				(const struct gfx_firmware_header_v1_0 )adev->gfx.ce_fw->data;
			fw_data = (const __le32 )
				(adev->gfx.ce_fw->data +
				 le32_to_cpu(hdr->header.ucode_array_offset_bytes));
			table_offset = le32_to_cpu(hdr->jt_offset);
			table_size = le32_to_cpu(hdr->jt_size);
		} else if (me == 1) {
			const struct gfx_firmware_header_v1_0 hdr =
				(const struct gfx_firmware_header_v1_0 )adev->gfx.pfp_fw->data;
			fw_data = (const __le32 )
				(adev->gfx.pfp_fw->data +
				 le32_to_cpu(hdr->header.ucode_array_offset_bytes));
			table_offset = le32_to_cpu(hdr->jt_offset);
			table_size = le32_to_cpu(hdr->jt_size);
		} else if (me == 2) {
			const struct gfx_firmware_header_v1_0 hdr =
				(const struct gfx_firmware_header_v1_0 )adev->gfx.me_fw->data;
			fw_data = (const __le32 )
				(adev->gfx.me_fw->data +
				 le32_to_cpu(hdr->header.ucode_array_offset_bytes));
			table_offset = le32_to_cpu(hdr->jt_offset);
			table_size = le32_to_cpu(hdr->jt_size);
		} else if (me == 3) {
			const struct gfx_firmware_header_v1_0 hdr =
				(const struct gfx_firmware_header_v1_0 )adev->gfx.mec_fw->data;
			fw_data = (const __le32 )
				(adev->gfx.mec_fw->data +
				 le32_to_cpu(hdr->header.ucode_array_offset_bytes));
			table_offset = le32_to_cpu(hdr->jt_offset);
			table_size = le32_to_cpu(hdr->jt_size);
		} else {
			const struct gfx_firmware_header_v1_0 hdr =
				(const struct gfx_firmware_header_v1_0 )adev->gfx.mec2_fw->data;
			fw_data = (const __le32 )
				(adev->gfx.mec2_fw->data +
				 le32_to_cpu(hdr->header.ucode_array_offset_bytes));
			table_offset = le32_to_cpu(hdr->jt_offset);
			table_size = le32_to_cpu(hdr->jt_size);
		}
		for (i = 0; i < table_size; i ++) {
			dst_ptr[bo_offset + i] =
				cpu_to_le32(le32_to_cpu(fw_data[table_offset + i]));
		}
		bo_offset += table_size;
	}
}
 begin clear state 
 context control state 
 pa_sc_raster_config 
 end clear state 
 clear state 
 type 0 wave data 
 CP_COHER_CNTL 
 CP_COHER_SIZE 
 CP_COHER_BASE 
 poll interval 
 hdp flush  invalidate 
 gfx_v6_0_ring_emit_fence x3 for user fence, vm fence 
 gfx_v6_0_ring_emit_pipeline_sync 
 gfx_v6_0_ring_emit_vm_flush 
 gfx_v6_ring_emit_cntxcntl including vgt flush 
 SURFACE_SYNC 
 gfx_v6_0_ring_emit_ib 
 hdp flush  invalidate 
 gfx_v6_0_ring_emit_pipeline_sync 
 gfx_v6_0_ring_emit_vm_flush 
 gfx_v6_0_ring_emit_fence x3 for user fence, vm fence 
 SURFACE_SYNC 
 gfx_v6_0_ring_emit_ib 
  Copyright 2014 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: Alex Deucher
  sDMA - System DMA
  Starting with CIK, the GPU has new asynchronous
  DMA engines.  These engines are used for compute
  and gfx.  There are two DMA engines (SDMA0, SDMA1)
  and each one supports 1 ring buffer used for gfx
  and 2 queues used for compute.
  The programming model is very similar to the CP
  (ring buffer, IBs, etc.), but sDMA has it's own
  packet format that is different from the PM4 format
  used by the CP. sDMA supports copying data, writing
  embedded data, solid fills, and a number of other
  things.  It also has support for tilingdetiling of
  buffers.
  sdma_v2_4_init_microcode - load ucode images from disk
  @adev: amdgpu_device pointer
  Use the firmware interface to load the ucode images into
  the driver (not loaded into hw).
  Returns 0 on success, error on failure.
  sdma_v2_4_ring_get_rptr - get the current read pointer
  @ring: amdgpu ring pointer
  Get the current rptr from the hardware (VI+).
 XXX check if swapping is necessary on BE 
  sdma_v2_4_ring_get_wptr - get the current write pointer
  @ring: amdgpu ring pointer
  Get the current wptr from the hardware (VI+).
  sdma_v2_4_ring_set_wptr - commit the write pointer
  @ring: amdgpu ring pointer
  Write the wptr back to the hardware (VI+).
  sdma_v2_4_ring_emit_ib - Schedule an IB on the DMA engine
  @ring: amdgpu ring pointer
  @job: job to retrieve vmid from
  @ib: IB object to schedule
  @flags: unused
  Schedule an IB in the DMA ring (VI).
 IB packet must end on a 8 DW boundary 
 base must be 32 byte aligned 
  sdma_v2_4_ring_emit_hdp_flush - emit an hdp flush on the DMA ring
  @ring: amdgpu ring pointer
  Emit an hdp flush packet on the requested DMA ring.
 == 
 reference 
 mask 
 retry count, poll interval 
  sdma_v2_4_ring_emit_fence - emit a fence on the DMA ring
  @ring: amdgpu ring pointer
  @addr: address
  @seq: sequence number
  @flags: fence related flags
  Add a DMA fence packet to the ring to write
  the fence seq number and DMA trap packet to generate
  an interrupt if needed (VI).
 write the fence 
 optionally write high bits as well 
 generate an interrupt 
  sdma_v2_4_gfx_stop - stop the gfx async dma engines
  @adev: amdgpu_device pointer
  Stop the gfx async dma ring buffers (VI).
  sdma_v2_4_rlc_stop - stop the compute async dma engines
  @adev: amdgpu_device pointer
  Stop the compute async dma queues (VI).
 XXX todo 
  sdma_v2_4_enable - stop the async dma engines
  @adev: amdgpu_device pointer
  @enable: enabledisable the DMA MEs.
  Halt or unhalt the async dma engines (VI).
  sdma_v2_4_gfx_resume - setup and start the async dma engines
  @adev: amdgpu_device pointer
  Set up the gfx DMA ring buffers and enable them (VI).
  Returns 0 for success, error for failure.
 SDMA GFX 
 Set ring buffer size in dwords 
 Initialize the ring buffer's read and write pointers 
 set the wb address whether it's enabled or not 
 enable DMA RB 
 enable DMA IBs 
  sdma_v2_4_rlc_resume - setup and start the async dma engines
  @adev: amdgpu_device pointer
  Set up the compute DMA queues and enable them (VI).
  Returns 0 for success, error for failure.
 XXX todo 
  sdma_v2_4_start - setup and start the async dma engines
  @adev: amdgpu_device pointer
  Set up the DMA engines and enable them (VI).
  Returns 0 for success, error for failure.
 halt the engine before programing 
 start the gfx rings and rlc compute queues 
  sdma_v2_4_ring_test_ring - simple async dma engine test
  @ring: amdgpu_ring structure holding ring information
  Test the DMA engine by writing using it to write an
  value to memory. (VI).
  Returns 0 for success, error for failure.
  sdma_v2_4_ring_test_ib - test an IB on the DMA engine
  @ring: amdgpu_ring structure holding ring information
  @timeout: timeout value in jiffies, or MAX_SCHEDULE_TIMEOUT
  Test a simple IB in the DMA ring (VI).
  Returns 0 on success, error on failure.
  sdma_v2_4_vm_copy_pte - update PTEs by copying them from the GART
  @ib: indirect buffer to fill with commands
  @pe: addr of the page entry
  @src: src addr to copy from
  @count: number of page entries to update
  Update PTEs by copying them from the GART using sDMA (CIK).
 srcdst endian swap 
  sdma_v2_4_vm_write_pte - update PTEs by writing them manually
  @ib: indirect buffer to fill with commands
  @pe: addr of the page entry
  @value: dst addr to write into pe
  @count: number of page entries to update
  @incr: increase next addr by incr bytes
  Update PTEs by writing them manually using sDMA (CIK).
  sdma_v2_4_vm_set_pte_pde - update the page tables using sDMA
  @ib: indirect buffer to fill with commands
  @pe: addr of the page entry
  @addr: dst addr to write into pe
  @count: number of page entries to update
  @incr: increase next addr by incr bytes
  @flags: access flags
  Update the page tables using sDMA (CIK).
 for physically contiguous pages (vram) 
 dst addr 
 mask 
 value 
 increment size 
 number of entries 
  sdma_v2_4_ring_pad_ib - pad the IB to the required number of dw
  @ring: amdgpu_ring structure holding ring information
  @ib: indirect buffer to fill with padding
  sdma_v2_4_ring_emit_pipeline_sync - sync the pipeline
  @ring: amdgpu_ring pointer
  Make sure all previous operations are completed (CIK).
 wait for idle 
 equal 
 reference 
 mask 
 retry count, poll interval 
  sdma_v2_4_ring_emit_vm_flush - cik vm flush using sDMA
  @ring: amdgpu_ring pointer
  @vmid: vmid number to use
  @pd_addr: address
  Update the page table base and flush the VM TLB
  using sDMA (VI).
 wait for flush 
 always 
 reference 
 mask 
 retry count, poll interval 
 SDMA trap event 
 SDMA Privileged inst 
 SDMA Privileged inst 
 sdma0 
 sdma1 
 Wait a little for things to settle down 
 XXX compute 
 XXX compute 
 XXX compute 
 XXX compute 
 XXX handled via the smc on VI 
 sdma_v2_4_ring_emit_hdp_flush 
 hdp invalidate 
 sdma_v2_4_ring_emit_pipeline_sync 
 sdma_v2_4_ring_emit_vm_flush 
 sdma_v2_4_ring_emit_fence x3 for user fence, vm fence 
 sdma_v2_4_ring_emit_ib 
  sdma_v2_4_emit_copy_buffer - copy buffer using the sDMA engine
  @ib: indirect buffer to copy to
  @src_offset: src GPU address
  @dst_offset: dst GPU address
  @byte_count: number of bytes to xfer
  @tmz: unused
  Copy GPU buffers using the DMA engine (VI).
  Used by the amdgpu ttm implementation to move pages if
  registered as the asic copy callback.
 srcdst endian swap 
  sdma_v2_4_emit_fill_buffer - fill buffer using the sDMA engine
  @ib: indirect buffer to copy to
  @src_data: value to write to buffer
  @dst_offset: dst GPU address
  @byte_count: number of bytes to xfer
  Fill GPU buffers using the DMA engine (VI).
  Copyright 2019 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 address block 
	 Check sOS sign of life register to confirm sys driver and sOS
	  are already been loaded.
 Wait for bootloader to signify that is ready having bit 31 of C2PMSG_35 set to 1 
 Copy PSP System Driver binary to memory 
 Provide the sys driver to bootloader 
 there might be handshake issue with hardware which needs delay 
	 Check sOS sign of life register to confirm sys driver and sOS
	  are already been loaded.
 Wait for bootloader to signify that is ready having bit 31 of C2PMSG_35 set to 1 
 Copy Secure OS binary to PSP memory 
 Provide the PSP secure OS to bootloader 
 there might be handshake issue with hardware which needs delay 
 Change IH ring for VMC 
 Change IH ring for UMC 
 allocate 4k Page of Local Frame Buffer memory for ring 
 Write low address of the ring to C2PMSG_102 
 Write high address of the ring to C2PMSG_103 
 Write the ring initialization command to C2PMSG_101 
 there might be handshake issue with hardware which needs delay 
 Wait for response flag (bit 31) in C2PMSG_101 
 Write low address of the ring to C2PMSG_69 
 Write high address of the ring to C2PMSG_70 
 Write size of ring to C2PMSG_71 
 Write the ring initialization command to C2PMSG_64 
 there might be handshake issue with hardware which needs delay 
 Wait for response flag (bit 31) in C2PMSG_64 
 Write the ring destroy command
 there might be handshake issue with hardware which needs delay 
 Wait for response flag (bit 31) 
send the mode 1 reset command
  Copyright 2008 Advanced Micro Devices, Inc.
  Copyright 2008 Red Hat Inc.
  Copyright 2009 Jerome Glisse.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  amdgpu_debugfs_process_reg_op - Handle MMIO register readswrites
  @read: True if reading
  @f: open file handle
  @buf: User buffer to writeread to
  @size: Number of bytes to writeread
  @pos:  Offset to seek to
  This debugfs entry has special meaning on the offset being sought.
  Various bits have different meanings:
  Bit 62:  Indicates a GRBM bank switch is needed
  Bit 61:  Indicates a SRBM bank switch is needed (implies bit 62 is
  	    zero)
  Bits 24..33: The SE or ME selector if needed
  Bits 34..43: The SH (or SA) or PIPE selector if needed
  Bits 44..53: The INSTANCE (or CUWGP) or QUEUE selector if needed
  Bit 23:  Indicates that the PM power gating lock should be held
  	    This is necessary to read registers that might be
  	    unreliable during a power gating transistion.
  The lower bits are the BYTE offset of the register to read.  This
  allows reading multiple registers in a single call and having
  the returned size reflect that.
 are we reading registers for which a PG lock is necessary? 
  amdgpu_debugfs_regs_read - Callback for reading MMIO registers
  amdgpu_debugfs_regs_write - Callback for writing MMIO registers
  amdgpu_debugfs_regs_pcie_read - Read from a PCIE register
  @f: open file handle
  @buf: User buffer to store read data in
  @size: Number of bytes to read
  @pos:  Offset to seek to
  The lower bits are the BYTE offset of the register to read.  This
  allows reading multiple registers in a single call and having
  the returned size reflect that.
  amdgpu_debugfs_regs_pcie_write - Write to a PCIE register
  @f: open file handle
  @buf: User buffer to write data from
  @size: Number of bytes to write
  @pos:  Offset to seek to
  The lower bits are the BYTE offset of the register to write.  This
  allows writing multiple registers in a single call and having
  the returned size reflect that.
  amdgpu_debugfs_regs_didt_read - Read from a DIDT register
  @f: open file handle
  @buf: User buffer to store read data in
  @size: Number of bytes to read
  @pos:  Offset to seek to
  The lower bits are the BYTE offset of the register to read.  This
  allows reading multiple registers in a single call and having
  the returned size reflect that.
  amdgpu_debugfs_regs_didt_write - Write to a DIDT register
  @f: open file handle
  @buf: User buffer to write data from
  @size: Number of bytes to write
  @pos:  Offset to seek to
  The lower bits are the BYTE offset of the register to write.  This
  allows writing multiple registers in a single call and having
  the returned size reflect that.
  amdgpu_debugfs_regs_smc_read - Read from a SMC register
  @f: open file handle
  @buf: User buffer to store read data in
  @size: Number of bytes to read
  @pos:  Offset to seek to
  The lower bits are the BYTE offset of the register to read.  This
  allows reading multiple registers in a single call and having
  the returned size reflect that.
  amdgpu_debugfs_regs_smc_write - Write to a SMC register
  @f: open file handle
  @buf: User buffer to write data from
  @size: Number of bytes to write
  @pos:  Offset to seek to
  The lower bits are the BYTE offset of the register to write.  This
  allows writing multiple registers in a single call and having
  the returned size reflect that.
  amdgpu_debugfs_gca_config_read - Read from gfx config data
  @f: open file handle
  @buf: User buffer to store read data in
  @size: Number of bytes to read
  @pos:  Offset to seek to
  This file is used to access configuration data in a somewhat
  stable fashion.  The format is a series of DWORDs with the first
  indicating which revision it is.  New content is appended to the
  end so that older software can still read the data.
 version, increment each time something is added 
 rev==1 
 rev==2 
 rev==3 
  amdgpu_debugfs_sensor_read - Read from the powerplay sensors
  @f: open file handle
  @buf: User buffer to store read data in
  @size: Number of bytes to read
  @pos:  Offset to seek to
  The offset is treated as the BYTE address of one of the sensors
  enumerated in amdincludekgd_pp_interface.h under the
  'amd_pp_sensors' enumeration.  For instance to read the UVD VCLK
  you would use the offset 3  4 = 12.
 convert offset to sensor number 
 amdgpu_debugfs_wave_read - Read WAVE STATUS data
  @f: open file handle
  @buf: User buffer to store read data in
  @size: Number of bytes to read
  @pos:  Offset to seek to
  The offset being sought changes which wave that the status data
  will be returned for.  The bits are used as follows:
  Bits 0..6: 	Byte offset into data
  Bits 7..14:	SE selector
  Bits 15..22:	SHSA selector
  Bits 23..30: CU{WGP+SIMD} selector
  Bits 31..36: WAVE ID selector
  Bits 37..44: SIMD ID selector
  The returned data begins with one DWORD of version information
  Followed by WAVE STATUS registers relevant to the GFX IP version
  being used.  See gfx_v8_0_read_wave_data() for an example output.
 decode offset 
 switch to the specific seshcu 
 amdgpu_debugfs_gpr_read - Read wave gprs
  @f: open file handle
  @buf: User buffer to store read data in
  @size: Number of bytes to read
  @pos:  Offset to seek to
  The offset being sought changes which wave that the status data
  will be returned for.  The bits are used as follows:
  Bits 0..11:	Byte offset into data
  Bits 12..19:	SE selector
  Bits 20..27:	SHSA selector
  Bits 28..35: CU{WGP+SIMD} selector
  Bits 36..43: WAVE ID selector
  Bits 37..44: SIMD ID selector
  Bits 52..59: Thread selector
  Bits 60..61: Bank selector (VGPR=0,SGPR=1)
  The return data comes from the SGPR or VGPR register bank for
  the selected operational unit.
 decode offset 
 switch to the specific seshcu 
  amdgpu_debugfs_gfxoff_write - Enabledisable GFXOFF
  @f: open file handle
  @buf: User buffer to write data from
  @size: Number of bytes to write
  @pos:  Offset to seek to
  Write a 32-bit zero to disable or a 32-bit non-zero to enable
  amdgpu_debugfs_gfxoff_read - read gfxoff status
  @f: open file handle
  @buf: User buffer to store read data in
  @size: Number of bytes to read
  @pos:  Offset to seek to
  amdgpu_debugfs_regs_init -	Initialize debugfs entries that provide
  				register access.
  @adev: The device to attach the debugfs entries to
 Avoid accidently unparking the sched thread during GPU reset 
 hold on the scheduler 
 go on the scheduler 
 remove job from ring_mirror_list 
 mark the job as preempted 
 the last preemption failed 
 Avoid accidently unparking the sched thread during GPU reset 
 stop the scheduler 
 preempt the IB 
 swap out the old fences 
 resubmit unfinished jobs 
 wait for jobs finished 
 signal the old fences 
 restart the scheduler 
 Register debugfs entries for amdgpu_ttm 
  Copyright 2018 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 The base should be same bt 2 mmhubs on Acrturus. Read one here. 
 Program the AGP BAR 
 Program the system aperture low logical page number. 
 Set default page address. 
 Program "protection fault". 
 Setup TLB control 
 XXX for emulation. 
 Setup L2 cache 
 XXX for emulation, Refer to closed source code.
 Send no-retry XNACK on fault to suppress VM fault storm. 
 GART Enable. 
 Disable all tables 
 Setup TLB control 
 Setup L2 cache 
  mmhub_v9_4_set_fault_enable_default - update GARTVM fault handling
  @adev: amdgpu_device pointer
  @value: true redirects VM faults to the default page
 AMD_CG_SUPPORT_MC_MGCG 
 AMD_CG_SUPPORT_MC_LS 
 MMHUB Range 0 
 MMHUB Range 1 
 MMHAB Range 2
 MMHUB Rang 3 
 MMHUB Range 4 
 MMHUAB Range 5 
 MMHUB Range 6 
 MMHUB Range 7
 read back edc counter registers to reset the counters to 0 
			 SDP readwrite errorparity error in FUE_IS_FATAL mode
			  can cause system fatal error in arcturas. Harvest the error
  Copyright 2018 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 SDMA CSA reside in the 3rd page of CSA 
  GPU SDMA IP block helpers function.
 don't enable OS preemption on SDMA under SRIOV 
			 the cb member will not be used by
			  amdgpu_ras_interrupt_remove_handler, init it only
			  to cheat the check in ras_late_fini
  Copyright 2018 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  vcn_v2_0_early_init - set function pointers
  @handle: amdgpu_device pointer
  Set ring and irq function pointers
  vcn_v2_0_sw_init - sw init for VCN block
  @handle: amdgpu_device pointer
  Load firmware and sw initialization
 VCN DEC TRAP 
 VCN ENC TRAP 
  vcn_v2_0_sw_fini - sw fini for VCN block
  @handle: amdgpu_device pointer
  VCN suspend and free up sw allocation
  vcn_v2_0_hw_init - start and test VCN block
  @handle: amdgpu_device pointer
  Initialize the hardware, boot up the VCPU and do some testing
Disable vcn decode for sriov
  vcn_v2_0_hw_fini - stop the hardware block
  @handle: amdgpu_device pointer
  Stop the VCN block, mark ring as not ready any more
  vcn_v2_0_suspend - suspend VCN block
  @handle: amdgpu_device pointer
  HW fini and suspend VCN block
  vcn_v2_0_resume - resume VCN block
  @handle: amdgpu_device pointer
  Resume firmware and hw init VCN block
  vcn_v2_0_mc_resume - memory controller programming
  @adev: amdgpu_device pointer
  Let the VCN memory controller know it's offsets
 cache window 0: fw 
 cache window 1: stack 
 cache window 2: context 
 non-cache window 
 cache window 0: fw 
 cache window 1: stack 
 cache window 2: context 
 non-cache window 
 VCN global tiling registers 
  vcn_v2_0_disable_clock_gating - disable VCN clock gating
  @adev: amdgpu_device pointer
  Disable clock gating for VCN block
 UVD disable CGC 
 turn on 
 enable sw clock gating control 
 turn off clock gating 
 turn on SUVD clock gating 
 turn on sw mode in UVD_SUVD_CGC_CTRL 
  vcn_v2_0_enable_clock_gating - enable VCN clock gating
  @adev: amdgpu_device pointer
  Enable clock gating for VCN block
 enable UVD CGC 
	 polling UVD_PGFSM_STATUS to confirm UVDM_PWR_STATUS,
 Before power off, this indicator has to be turned on 
 enable dynamic power gating mode 
 enable clock gating 
 enable VCPU clock 
 disable master interupt 
 setup mmUVD_LMI_CTRL 
 release VCPU reset to boot 
 enable LMI MC and UMC channels 
 enable master interrupt 
 force RBC into idle state 
 Stall DPG before WPTRRPTR reset 
 set the write pointer delay 
 set the wb address 
 program the RB_BASE for ring buffer 
 Initialize the ring buffer's read and write pointers 
 Unstall DPG 
 set uvd status busy 
SW clock gating 
 enable VCPU clock 
 disable master interrupt 
 setup mmUVD_LMI_CTRL 
 setup mmUVD_MPC_CNTL 
 setup UVD_MPC_SET_MUXA0 
 setup UVD_MPC_SET_MUXB0 
 setup mmUVD_MPC_SET_MUX 
 release VCPU reset to boot 
 enable LMI MC and UMC channels 
 disable byte swapping 
 swap (8 in 32) RB and IB 
 enable master interrupt 
 clear the busy bit of VCN_STATUS 
 force RBC into idle state 
 program the RB_BASE for ring buffer 
 Initialize the ring buffer's read and write pointers 
 Wait for power status to be 1 
 wait for read ptr to be equal to write ptr 
 disable dynamic power gating mode 
 wait for uvd idle 
 stall UMC channel 
 disable VCPU clock 
 reset LMI UMC 
 reset LMI 
 reset VCPU 
 clear status 
 pauseunpause if state is changed 
 pause DPG 
 wait for ACK 
 Stall DPG before WPTRRPTR reset 
 Restore 
 Unstall DPG 
 unpause dpg, no need to wait 
 wait for STATUS to clear 
 disable HW gating and enable Sw gating 
  vcn_v2_0_dec_ring_get_rptr - get read pointer
  @ring: amdgpu_ring pointer
  Returns the current hardware read pointer
  vcn_v2_0_dec_ring_get_wptr - get write pointer
  @ring: amdgpu_ring pointer
  Returns the current hardware write pointer
  vcn_v2_0_dec_ring_set_wptr - set write pointer
  @ring: amdgpu_ring pointer
  Commits the write pointer to the hardware
  vcn_v2_0_dec_ring_insert_start - insert a start command
  @ring: amdgpu_ring pointer
  Write a start command to the ring.
  vcn_v2_0_dec_ring_insert_end - insert a end command
  @ring: amdgpu_ring pointer
  Write a end command to the ring.
  vcn_v2_0_dec_ring_insert_nop - insert a nop command
  @ring: amdgpu_ring pointer
  @count: the number of NOP packets to insert
  Write a nop command to the ring.
  vcn_v2_0_dec_ring_emit_fence - emit an fence & trap command
  @ring: amdgpu_ring pointer
  @addr: address
  @seq: sequence number
  @flags: fence related flags
  Write a fence and a trap command to the ring.
  vcn_v2_0_dec_ring_emit_ib - execute indirect buffer
  @ring: amdgpu_ring pointer
  @job: job to retrieve vmid from
  @ib: indirect buffer to execute
  @flags: unused
  Write ring commands to execute the indirect buffer
 wait for register write 
  vcn_v2_0_enc_ring_get_rptr - get enc read pointer
  @ring: amdgpu_ring pointer
  Returns the current hardware enc read pointer
  vcn_v2_0_enc_ring_get_wptr - get enc write pointer
  @ring: amdgpu_ring pointer
  Returns the current hardware enc write pointer
  vcn_v2_0_enc_ring_set_wptr - set enc write pointer
  @ring: amdgpu_ring pointer
  Commits the enc write pointer to the hardware
  vcn_v2_0_enc_ring_emit_fence - emit an enc fence & trap command
  @ring: amdgpu_ring pointer
  @addr: address
  @seq: sequence number
  @flags: fence related flags
  Write enc a fence and a trap command to the ring.
  vcn_v2_0_enc_ring_emit_ib - enc execute indirect buffer
  @ring: amdgpu_ring pointer
  @job: job to retrive vmid from
  @ib: indirect buffer to execute
  @flags: unused
  Write enc ring commands to execute the indirect buffer
 wait for reg writes 
	 This doesn't actually powergate the VCN block.
	  That's done in the dpm code via the SMC.  This
	  just re-inits the block as necessary.  The actual
	  gating still happens in the dpm code.  We should
	  revisit this when there is a cleaner line between
	  the smc and the hw blocks
	 1, write to vce_mmsch_vf_ctx_addr_lohi register with GPU mc addr
	  of memory descriptor location
 2, update vmid of descriptor 
 use domain0 for MM scheduler 
 3, notify mmsch about the size of this descriptor 
 4, set resp to zero 
	 5, kick off the initialization and wait until
	  VCE_MMSCH_VF_MAILBOX_RESP becomes non-zero
 mc resume
 force RBC into idle state 
 add end packet 
 vcn_v2_0_dec_ring_emit_vm_flush 
 vcn_v2_0_dec_ring_emit_fence x2 vm fence 
 vcn_v2_0_dec_ring_emit_ib 
 vcn_v2_0_enc_ring_emit_vm_flush 
 vcn_v2_0_enc_ring_emit_fence x2 vm fence 
 vcn_v2_0_enc_ring_insert_end 
 vcn_v2_0_enc_ring_emit_ib 
 SPDX-License-Identifier: MIT
 Copyright Red Hat Inc 2010.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Author : Dave Airlie <airlied@redhat.com>
  Copyright 2008 Advanced Micro Devices, Inc.
  Copyright 2008 Red Hat Inc.
  Copyright 2009 Jerome Glisse.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: Dave Airlie
           Alex Deucher
           Jerome Glisse
  amdgpu_driver_unload_kms - Main unload function for KMS.
  @dev: drm dev pointer
  This is the main unload function for KMS (all asics).
  Returns 0 on success.
  amdgpu_driver_load_kms - Main load function for KMS.
  @adev: pointer to struct amdgpu_device
  @flags: device flags
  This is the main load function for KMS (all asics).
  Returns 0 on success, error on failure.
	 amdgpu_device_init should report only fatal error
	  like memory allocation failure or iomapping failure,
	  or memory manager initialization failure, it must
	  properly initialize the GPU MC controller and permit
	  VRAM allocation
 enable runpm by default for atpx 
 enable runpm by default for boco 
 enable runpm if runpm=1 
 turn runpm on if noretry=0 
 enable runpm on CI+ 
	 Call ACPI methods: require modeset init
	  but failure is not fatal
 only need to skip on ATPX 
 we want direct complete for BOCO 
		
		  For runpm implemented via BACO, PMFW will handle the
		  timing for BACO in and out:
		    - put ASIC into BACO state only when both video and
		      audio functions are in D3 state.
		    - pull ASIC out of BACO state when either video or
		      audio function is in D0 state.
		  Also, at startup, PMFW assumes both functions are in
		  D0 state.
		 
		  So if snd driver was loaded prior to amdgpu driver
		  and audio function was put into D3 state, there will
		  be no PMFW-aware D-state transition(D0->D3) on runpm
		  suspend. Thus the BACO will be not correctly kicked in.
		 
		  Via amdgpu_get_audio_func(), the audio dev is put
		  into D0 state. Then there will be a PMFW-aware D-state
		  transition(D0->D3) on runpm suspend.
 balance pm_runtime_get_sync in amdgpu_driver_unload_kms 
  Userspace get information ioctl
  amdgpu_info_ioctl - answer a device specific request.
  @dev: drm device pointer
  @data: request object
  @filp: drm filp
  This function is used to pass device specific parameters to the userspace
  drivers.  Examples include: pci device id, pipeline parms, tiling params,
  etc. (all asics).
  Returns 0 on success, -EINVAL on failure.
 We only support one instance of each IP block right now. 
		 set full masks if the userspace set all bits
 return all clocks in KHz 
 Older VCE FW versions are buggy and can handle only 40bits 
 Starting Polaris, we support unlimited UVD handles 
 get sclk in Mhz 
 get mclk in Mhz 
 get temperature in millidegrees C 
 get GPU load 
 get average GPU power 
 get VDDNB in millivolts 
 get VDDGFX in millivolts 
 get stable pstate sclk in Mhz 
 get stable pstate mclk in Mhz 
  Outdated mess for old drm with Xorg being in charge (void function now).
  amdgpu_driver_lastclose_kms - drm callback for last close
  @dev: drm dev pointer
  Switch vga_switcheroo state after last close (all asics).
  amdgpu_driver_open_kms - drm callback for open
  @dev: drm dev pointer
  @file_priv: drm file
  On device open, init vm on cayman+ (all asics).
  Returns 0 on success, error on failure.
 Ensure IB tests are run on ring 
  amdgpu_driver_postclose_kms - drm callback for post close
  @dev: drm dev pointer
  @file_priv: drm file
  On device post close, tear down vm on cayman+ (all asics).
 TODO: how to handle reserve failure 
  VBlank related functions.
  amdgpu_get_vblank_counter_kms - get frame count
  @crtc: crtc to get the frame count from
  Gets the frame count on the requested crtc (all asics).
  Returns frame count on success, -EINVAL on failure.
	 The hw increments its frame counter at start of vsync, not at start
	  of vblank, as is required by DRM core vblank counter handling.
	  Cook the hw count here to make it appear to the caller as if it
	  incremented at start of vblank. We measure distance to start of
	  vblank in vpos. vpos therefore will be >= 0 between start of vblank
	  and start of vsync, so vpos >= 0 means to bump the hw frame counter
	  result by 1 to give the proper appearance to caller.
		 Repeat readout if needed to provide stable result if
		  we cross start of vsync during the queries.
			 Ask amdgpu_display_get_crtc_scanoutpos to return
			  vpos as distance to start of vblank, instead of
			  regular vertical scanout pos.
			 Bump counter if we are at >= leading edge of vblank,
			  but before vsync where vpos would turn negative and
			  the hw counter really increments.
 Fallback to use value as is. 
  amdgpu_enable_vblank_kms - enable vblank interrupt
  @crtc: crtc to enable vblank interrupt for
  Enable the interrupt on the requested crtc (all asics).
  Returns 0 on success, -EINVAL on failure.
  amdgpu_disable_vblank_kms - disable vblank interrupt
  @crtc: crtc to disable vblank interrupt for
  Disable the interrupt on the requested crtc (all asics).
  Debugfs info
 VCE 
 UVD 
 GMC 
 ME 
 PFP 
 CE 
 RLC 
 RLC SAVE RESTORE LIST CNTL 
 RLC SAVE RESTORE LIST GPM MEM 
 RLC SAVE RESTORE LIST SRM MEM 
 MEC 
 MEC2 
 PSP SOS 
 PSP ASD 
 SMC 
 SDMA 
 VCN 
 DMCU 
 DMCUB 
 TOC 
  Copyright 2016 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
   Author: Monk.liu@amd.com
  amdgpu_map_static_csa should be called during amdgpu_vm_init
  it maps virtual address amdgpu_csa_vaddr() to this VM, and each command
  submission of GFX should use this virtual address within META_DATA init
  package to support SRIOV gfx preemption.
  Copyright 2016 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 NBIF_MGCG_CTRL_LCLK 
 SYSHUB_MGCG_CTRL_SOCCLK 
 SYSHUB_MGCG_CTRL_SHUBCLK 
 AMD_CG_SUPPORT_BIF_MGCG 
 AMD_CG_SUPPORT_BIF_LS 
 setup interrupt control 
	 INTERRUPT_CNTL__IH_DUMMY_RD_OVERRIDE_MASK=0 - dummy read disabled with msi, enabled without msi
	  INTERRUPT_CNTL__IH_DUMMY_RD_OVERRIDE_MASK=1 - dummy read controlled by IH_DUMMY_RD_EN
 INTERRUPT_CNTL__IH_REQ_NONSNOOP_EN_MASK=1 if ring is in non-cacheable memory, e.g., vram 
  Copyright 2014 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Interrupts
  Starting with r6xx, interrupts are handled via a ring buffer.
  Ring buffers are areas of GPU accessible memory that the GPU
  writes interrupt vectors into and the host reads vectors out of.
  There is a rptr (read pointer) that determines where the
  host is currently reading, and a wptr (write pointer)
  which determines where the GPU has written.  When the
  pointers are equal, the ring is idle.  When the GPU
  writes vectors to the ring buffer, it increments the
  wptr.  When there is an interrupt, the host then starts
  fetching commands and processing them until the pointers are
  equal again at which point it updates the rptr.
  iceland_ih_enable_interrupts - Enable the interrupt ring buffer
  @adev: amdgpu_device pointer
  Enable the interrupt ring buffer (VI).
  iceland_ih_disable_interrupts - Disable the interrupt ring buffer
  @adev: amdgpu_device pointer
  Disable the interrupt ring buffer (VI).
 set rptr, wptr to 0 
  iceland_ih_irq_init - init and enable the interrupt ring
  @adev: amdgpu_device pointer
  Allocate a ring buffer for the interrupt controller,
  enable the RLC, disable interrupts, enable the IH
  ring buffer and enable it (VI).
  Called at device load and reume.
  Returns 0 for success, errors for failure.
 disable irqs 
 setup interrupt control 
	 INTERRUPT_CNTL__IH_DUMMY_RD_OVERRIDE_MASK=0 - dummy read disabled with msi, enabled without msi
	  INTERRUPT_CNTL__IH_DUMMY_RD_OVERRIDE_MASK=1 - dummy read controlled by IH_DUMMY_RD_EN
 INTERRUPT_CNTL__IH_REQ_NONSNOOP_EN_MASK=1 if ring is in non-cacheable memory, e.g., vram 
 Ring Buffer base. [39:8] of 40-bit address of the beginning of the ring buffer
 Ring Buffer write pointer writeback. If enabled, IH_RB_WPTR register value is written to memory 
 set the writeback address whether it's enabled or not 
 set rptr, wptr to 0 
 Default settings for IH_CNTL (disabled at first) 
 enable interrupts 
  iceland_ih_irq_disable - disable interrupts
  @adev: amdgpu_device pointer
  Disable interrupts on the hw (VI).
 Wait and acknowledge irq 
  iceland_ih_get_wptr - get the IH ring buffer wptr
  @adev: amdgpu_device pointer
  @ih: IH ring buffer to fetch wptr
  Get the IH ring buffer wptr from either the register
  or the writeback memory buffer (VI).  Also check for
  ring buffer overflow and deal with it.
  Used by cz_irq_process(VI).
  Returns the value of the wptr.
 Double check that the overflow wasn't already cleared. 
	 When a ring buffer overflow happen start parsing interrupt
	  from the last not overwritten vector (wptr + 16). Hopefully
	  this should allow us to catchup.
  iceland_ih_decode_iv - decode an interrupt vector
  @adev: amdgpu_device pointer
  @ih: IH ring buffer to decode
  @entry: IV entry to place decoded information into
  Decodes the interrupt vector at the current rptr
  position and also advance the position.
 wptrrptr are in bytes! 
 wptrrptr are in bytes! 
  iceland_ih_set_rptr - set the IH ring buffer rptr
  @adev: amdgpu_device pointer
  @ih: IH ring buffer to set rptr
  Set the IH ring buffer rptr.
 read MC_STATUS 
 Wait a little for things to settle down 
  Copyright 2008 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Author: Stanislaw Skowronek
 translate destination alignment field to the source alignment encoding 
		 get_unaligned_le32 avoids unaligned accesses from atombios
 functionally, a nop 
 jiffies wrap around we will just wait a little longer 
 nothing 
 op needs to full dst value 
 op needs to full dst value 
 reset data block 
 reset reg block 
 reset fb window 
 reset io mode 
 reset divmul 
 do not know where to find name 
	
	  skip the atombios strings, usually 4
	  1st is PN, 2nd is ASIC, 3rd is PCI type, 4th is Memory type
 skip the following 2 chars: 0x0D 0x0A 
 find anchor ATOMBIOSBK-AMD 
 skip ATOMBIOSBK-AMD VER 
  Copyright 2016 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 AMD_CG_SUPPORT_ATHUB_MGCG 
 AMD_CG_SUPPORT_ATHUB_LS 
  Copyright 2011 Advanced Micro Devices, Inc.
  All Rights Reserved.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sub license, andor sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
  THE COPYRIGHT HOLDERS, AUTHORS ANDOR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,
  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  USE OR OTHER DEALINGS IN THE SOFTWARE.
  The above copyright notice and this permission notice (including the
  next paragraph) shall be included in all copies or substantial portions
  of the Software.
  Authors:
     Christian König <deathsimple@vodafone.de>
 1 second timeout 
 Firmware versions for VI 
 Polaris1011 firmware version 
 Firmware Names 
 These are common relative offsets for all asics, from uvd_7_0_offset.h,  
  amdgpu_uvd_cs_ctx - Command submission parser context
  Used for emulating virtual memory support on UVD 4.2.
 does the IB has a msg command 
 minimum buffer sizes 
 Set the default UVD handles that the firmware can handle 
		
		  Limit the number of UVD handles depending on microcode major
		  and minor versions. The firmware version which has 40 UVD
		  instances support is 1.80. So all subsequent versions should
		  also have the same support.
 from uvd v5.0 HW addressing capacity increased to 64 bits 
  amdgpu_uvd_entity_init - init entity
  @adev: amdgpu_device pointer
 only valid for physical mode 
 re-write 0 since err_event_athub will corrupt VCPU buffer 
 to restore uvd fence seq 
  amdgpu_uvd_cs_pass1 - first parsing round
  @ctx: UVD parser context
  Make sure UVD message and feedback buffers are in VRAM and
  nobody is violating an 256MB boundary.
 check if it's a message or feedback command 
 yes, force it into VRAM 
  amdgpu_uvd_cs_msg_decode - handle UVD decode message
  @adev: amdgpu_device pointer
  @msg: pointer to message structure
  @buf_sizes: placeholder to put the different buffer lengths
  Peek into the decode message and calculate the necessary buffer sizes.
 H264 
 reference picture buffer 
 macroblock context buffer 
 IT surface buffer 
 VC1 
 reference picture buffer 
 CONTEXT_BUFFER 
 IT surface buffer 
 DB surface buffer 
 BP 
 MPEG2 
 reference picture buffer 
 MPEG4 
 reference picture buffer 
 CM 
 IT surface buffer 
 H264 Perf 
 reference picture buffer 
 macroblock context buffer 
 IT surface buffer 
 macroblock context buffer 
 MJPEG 
 H265 
 store image width to adjust nb memory pstate 
  amdgpu_uvd_cs_msg - handle UVD message
  @ctx: UVD parser context
  @bo: buffer object containing the message
  @offset: offset into the buffer object
  Peek into the UVD message and extract the session id.
  Make sure that we don't open up to many sessions.
 it's a create msg, calc image size (width  height) 
 try to alloc a new handle 
 it's a decode msg, calc buffer sizes 
 validate the handle 
 it's a destroy msg, free the handle 
  amdgpu_uvd_cs_pass2 - second parsing round
  @ctx: UVD parser context
  Patch buffer addresses, make sure buffer sizes are correct.
  amdgpu_uvd_cs_reg - parse register writes
  @ctx: UVD parser context
  @cb: callback function
  Parse the register writes, call cb on each complete command.
  amdgpu_uvd_cs_packets - parse UVD packets
  @ctx: UVD parser context
  @cb: callback function
  Parse the command stream packets.
  amdgpu_uvd_ring_parse_cs - UVD command submission parser
  @parser: Command submission parser context
  @ib_idx: Which indirect buffer to use
  Parse the command stream, patch in addresses as necessary.
 first round only required on chips without UVD 64 bit address support 
 first round, make sure the buffers are actually in the UVD segment 
 second round, patch buffer addresses into the command stream 
 multiple fence commands without any stream commands in between can
   crash the vcpu so just try to emmit a dummy createdestroy msg to
 stitch together an UVD create msg 
 stitch together an UVD destroy msg 
 shutdown the UVD block 
  amdgpu_uvd_ring_test_ib - test ib execution
  @ring: amdgpu_ring pointer
  @timeout: timeout value in jiffies, or MAX_SCHEDULE_TIMEOUT
  Test if we can successfully execute an IB
  amdgpu_uvd_used_handles - returns used UVD handles
  @adev: amdgpu_device pointer
  Returns the number of UVD handles in use
		
		  Handles can be freed in any order, and not
		  necessarily linear. So we need to count
		  all non-zero handles.
  Copyright 2019 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 set ucode start address 
 clear BYPASS_UNCACHED to avoid hangs after interrupt. 
 unhalt MES and activate pipe0 
 This function is for backdoor MES firmware 
 me=3, pipe=0, queue=0 
 set ucode start address 
 set ucode fimrware address 
 set ucode instruction cache boundary to 2M-1 
 set ucode data firmware address 
 Set 0x3FFFF (256K-1) to CP_MES_MDBOUND_LO 
 invalidate ICACHE 
 prime the ICACHE. 
 set the EOP size, register value is 2^(EOP_SIZE+1) dwords 
 enable doorbell? 
 disable the queue if it's active 
 set the pointer to the MQD 
 set MQD vmid to 0 
 set the pointer to the HQD, this is similar CP_RB0_BASE_HI 
 set up the HQD, this is similar to CP_RB0_CNTL 
 set the wb address whether it's enabled or not 
 only used if CP_PQ_WPTR_POLL_CNTL.CP_PQ_WPTR_POLL_CNTL__EN_MASK=1 
 enable the doorbell if requested 
 reset read and write pointers, similar to CP_RB0_WPTR_RPTR 
 set the vmid for the queue 
 set MIN_IB_AVAIL_SIZE 
 activate the queue 
 set CP_HQD_VMID.VMID = 0. 
 set CP_HQD_PQ_DOORBELL_CONTROL.DOORBELL_EN=0 
 set CP_MQD_BASE_ADDRHI with the MQD base address 
 set CP_MQD_CONTROL.VMID=0 
 set CP_HQD_PQ_BASEHI with the ring buffer base address 
 set CP_HQD_PQ_RPTR_REPORT_ADDRHI 
 set CP_HQD_PQ_CONTROL 
 set CP_HQD_PQ_WPTR_POLL_ADDRHI 
 set CP_HQD_PQ_DOORBELL_CONTROL 
 set CP_HQD_PERSISTENT_STATE.PRELOAD_SIZE=0x53 
 set CP_HQD_ACTIVE.ACTIVE=1 
 prepare MQD backup 
  Copyright 2008 Advanced Micro Devices, Inc.
  Copyright 2008 Red Hat Inc.
  Copyright 2009 Jerome Glisse.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: Dave Airlie
           Alex Deucher
           Jerome Glisse
  BIOS.
 Check if current bios is an ATOM BIOS.
  Return true if it is ATOM BIOS. Otherwise, return false.
 If you boot an IGP board with a discrete card as the primary,
  the IGP rom is not accessible via the rom bar as the IGP rom is
  part of the system bios.  On boot, the system bios puts a
  copy of the igp rom at the start of vram if a discrete card is
  present.
 ??? 
 FB BAR not enabled 
 XXX: some cards may return 0 for rom size? ddx has a workaround 
 validate VBIOS signature 
 valid vbios, go on 
 read complete BIOS 
 ATRM is used to get the BIOS on the discrete cards in
  dual-gpu systems.
 retrieve the ROM in 4k blocks 
  amdgpu_atrm_call - fetch a chunk of the vbios
  @atrm_handle: acpi ATRM handle
  @bios: vbios image pointer
  @offset: offset of vbios image data to fetch
  @len: length of vbios image data to fetch
  Executes ATRM to fetch a chunk of the discrete
  vbios image on PX systems (all asics).
  Returns the length of the buffer fetched.
 ATRM is for the discrete card only 
  Copyright 2013 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: Alex Deucher
  sDMA - System DMA
  Starting with CIK, the GPU has new asynchronous
  DMA engines.  These engines are used for compute
  and gfx.  There are two DMA engines (SDMA0, SDMA1)
  and each one supports 1 ring buffer used for gfx
  and 2 queues used for compute.
  The programming model is very similar to the CP
  (ring buffer, IBs, etc.), but sDMA has it's own
  packet format that is different from the PM4 format
  used by the CP. sDMA supports copying data, writing
  embedded data, solid fills, and a number of other
  things.  It also has support for tilingdetiling of
  buffers.
  cik_sdma_init_microcode - load ucode images from disk
  @adev: amdgpu_device pointer
  Use the firmware interface to load the ucode images into
  the driver (not loaded into hw).
  Returns 0 on success, error on failure.
  cik_sdma_ring_get_rptr - get the current read pointer
  @ring: amdgpu ring pointer
  Get the current rptr from the hardware (CIK+).
  cik_sdma_ring_get_wptr - get the current write pointer
  @ring: amdgpu ring pointer
  Get the current wptr from the hardware (CIK+).
  cik_sdma_ring_set_wptr - commit the write pointer
  @ring: amdgpu ring pointer
  Write the wptr back to the hardware (CIK+).
  cik_sdma_ring_emit_ib - Schedule an IB on the DMA engine
  @ring: amdgpu ring pointer
  @job: job to retrive vmid from
  @ib: IB object to schedule
  @flags: unused
  Schedule an IB in the DMA ring (CIK).
 IB packet must end on a 8 DW boundary 
 base must be 32 byte aligned 
  cik_sdma_ring_emit_hdp_flush - emit an hdp flush on the DMA ring
  @ring: amdgpu ring pointer
  Emit an hdp flush packet on the requested DMA ring.
 == 
 reference 
 mask 
 retry count, poll interval 
  cik_sdma_ring_emit_fence - emit a fence on the DMA ring
  @ring: amdgpu ring pointer
  @addr: address
  @seq: sequence number
  @flags: fence related flags
  Add a DMA fence packet to the ring to write
  the fence seq number and DMA trap packet to generate
  an interrupt if needed (CIK).
 write the fence 
 optionally write high bits as well 
 generate an interrupt 
  cik_sdma_gfx_stop - stop the gfx async dma engines
  @adev: amdgpu_device pointer
  Stop the gfx async dma ring buffers (CIK).
  cik_sdma_rlc_stop - stop the compute async dma engines
  @adev: amdgpu_device pointer
  Stop the compute async dma queues (CIK).
 XXX todo 
  cik_ctx_switch_enable - stop the async dma engines context switch
  @adev: amdgpu_device pointer
  @enable: enabledisable the DMA MEs context switch.
  Halt or unhalt the async dma engines context switch (VI).
  cik_sdma_enable - stop the async dma engines
  @adev: amdgpu_device pointer
  @enable: enabledisable the DMA MEs.
  Halt or unhalt the async dma engines (CIK).
  cik_sdma_gfx_resume - setup and start the async dma engines
  @adev: amdgpu_device pointer
  Set up the gfx DMA ring buffers and enable them (CIK).
  Returns 0 for success, error for failure.
 SDMA GFX 
 XXX SDMA RLC - todo 
 Set ring buffer size in dwords 
 Initialize the ring buffer's read and write pointers 
 set the wb address whether it's enabled or not 
 enable DMA RB 
 enable DMA IBs 
  cik_sdma_rlc_resume - setup and start the async dma engines
  @adev: amdgpu_device pointer
  Set up the compute DMA queues and enable them (CIK).
  Returns 0 for success, error for failure.
 XXX todo 
  cik_sdma_load_microcode - load the sDMA ME ucode
  @adev: amdgpu_device pointer
  Loads the sDMA01 ucode.
  Returns 0 for success, -EINVAL if the ucode is not available.
 halt the MEs 
  cik_sdma_start - setup and start the async dma engines
  @adev: amdgpu_device pointer
  Set up the DMA engines and enable them (CIK).
  Returns 0 for success, error for failure.
 halt the engine before programing 
 enable sdma ring preemption 
 start the gfx rings and rlc compute queues 
  cik_sdma_ring_test_ring - simple async dma engine test
  @ring: amdgpu_ring structure holding ring information
  Test the DMA engine by writing using it to write an
  value to memory. (CIK).
  Returns 0 for success, error for failure.
 number of DWs to follow 
  cik_sdma_ring_test_ib - test an IB on the DMA engine
  @ring: amdgpu_ring structure holding ring information
  @timeout: timeout value in jiffies, or MAX_SCHEDULE_TIMEOUT
  Test a simple IB in the DMA ring (CIK).
  Returns 0 on success, error on failure.
  cik_sdma_vm_copy_pte - update PTEs by copying them from the GART
  @ib: indirect buffer to fill with commands
  @pe: addr of the page entry
  @src: src addr to copy from
  @count: number of page entries to update
  Update PTEs by copying them from the GART using sDMA (CIK).
 srcdst endian swap 
  cik_sdma_vm_write_pte - update PTEs by writing them manually
  @ib: indirect buffer to fill with commands
  @pe: addr of the page entry
  @value: dst addr to write into pe
  @count: number of page entries to update
  @incr: increase next addr by incr bytes
  Update PTEs by writing them manually using sDMA (CIK).
  cik_sdma_vm_set_pte_pde - update the page tables using sDMA
  @ib: indirect buffer to fill with commands
  @pe: addr of the page entry
  @addr: dst addr to write into pe
  @count: number of page entries to update
  @incr: increase next addr by incr bytes
  @flags: access flags
  Update the page tables using sDMA (CIK).
 for physically contiguous pages (vram) 
 dst addr 
 mask 
 value 
 increment size 
 number of entries 
  cik_sdma_ring_pad_ib - pad the IB to the required number of dw
  @ring: amdgpu_ring structure holding ring information
  @ib: indirect buffer to fill with padding
  cik_sdma_ring_emit_pipeline_sync - sync the pipeline
  @ring: amdgpu_ring pointer
  Make sure all previous operations are completed (CIK).
 wait for idle 
 equal 
 reference 
 mask 
 retry count, poll interval 
  cik_sdma_ring_emit_vm_flush - cik vm flush using sDMA
  @ring: amdgpu_ring pointer
  @vmid: vmid number to use
  @pd_addr: address
  Update the page table base and flush the VM TLB
  using sDMA (CIK).
 always 
 reference 
 mask 
 retry count, poll interval 
 SDMA trap event 
 SDMA Privileged inst 
 SDMA Privileged inst 
 sdma0 
 sdma1 
 Wait a little for things to settle down 
 XXX compute 
 XXX compute 
 XXX compute 
 XXX compute 
 cik_sdma_ring_emit_hdp_flush 
 hdp invalidate 
 cik_sdma_ring_emit_pipeline_sync 
 cik_sdma_ring_emit_vm_flush 
 cik_sdma_ring_emit_fence x3 for user fence, vm fence 
 cik_sdma_ring_emit_ib 
  cik_sdma_emit_copy_buffer - copy buffer using the sDMA engine
  @ib: indirect buffer to copy to
  @src_offset: src GPU address
  @dst_offset: dst GPU address
  @byte_count: number of bytes to xfer
  @tmz: is this a secure operation
  Copy GPU buffers using the DMA engine (CIK).
  Used by the amdgpu ttm implementation to move pages if
  registered as the asic copy callback.
 srcdst endian swap 
  cik_sdma_emit_fill_buffer - fill buffer using the sDMA engine
  @ib: indirect buffer to fill
  @src_data: value to write to buffer
  @dst_offset: dst GPU address
  @byte_count: number of bytes to xfer
  Fill GPU buffers using the DMA engine (CIK).
  Copyright 2020 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 For large FW files the time to complete can be very long 
 Read USB-PD from LFB 
		 Wait for bootloader to signify that is
	 Check tOS sign of life register to confirm sys driver and sOS
	  are already been loaded.
 Copy PSP KDB binary to memory 
 Provide the PSP KDB to bootloader 
	 Check sOS sign of life register to confirm sys driver and sOS
	  are already been loaded.
 Copy Secure OS binary to PSP memory 
 Provide the PSP secure OS to bootloader 
 there might be handshake issue with hardware which needs delay 
 allocate 4k Page of Local Frame Buffer memory for ring 
 Write the ring destroy command
 there might be handshake issue with hardware which needs delay 
 Wait for response flag (bit 31) 
 Write the ring destroy command
 there might be handshake issue with hardware which needs delay 
 Wait for response flag (bit 31) 
 Write low address of the ring to C2PMSG_102 
 Write high address of the ring to C2PMSG_103 
 Write the ring initialization command to C2PMSG_101 
 there might be handshake issue with hardware which needs delay 
 Wait for response flag (bit 31) in C2PMSG_101 
 Wait for sOS ready for ring creation 
 Write low address of the ring to C2PMSG_69 
 Write high address of the ring to C2PMSG_70 
 Write size of ring to C2PMSG_71 
 Write the ring initialization command to C2PMSG_64 
 there might be handshake issue with hardware which needs delay 
 Wait for response flag (bit 31) in C2PMSG_64 
	
	  LFB address which is aligned to 1MB address and has to be
	  right-shifted by 20 so that LFB address can be passed on a 32-bit C2P
	  register
 Fireup interrupt so PSP can pick up the address 
 FW load takes very long time 
  Copyright 2008 Jerome Glisse.
  All Rights Reserved.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice (including the next
  paragraph) shall be included in all copies or substantial portions of the
  Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  PRECISION INSIGHT ANDOR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  DEALINGS IN THE SOFTWARE.
  Authors:
     Jerome Glisse <glisse@freedesktop.org>
 One for TTM and one for the CS job 
 skip guilty context job 
 get chunks 
 Use this opportunity to fill in task info for the vm 
 Convert microseconds to bytes. 
	 Since accum_us is incremented by a million per second, just
	  multiply it by the number of MBs to get the number of bytes.
 Returns how many bytes TTM can move right now. If no bytes can be moved,
  it returns 0. If it returns non-zero, it's OK to move at least one buffer,
  which means it can go over the threshold once. If that happens, the driver
  will be in debt and no other buffer migrations can be done until that debt
  is repaid.
  This approach allows moving a buffer of any size (it's important to allow
  that).
  The currency is simply time in microseconds and it increases as the clock
  ticks. The accumulated microseconds (us) are converted to bytes and
  returned.
	 Allow a maximum of 200 accumulated ms. This is basically per-IB
	  throttling.
	 
	  It means that in order to get full max MBps, at least 5 IBs per
	  second must be submitted and not more than 200ms apart from each
	  other.
 Increase the amount of accumulated us. 
	 This prevents the short period of low performance when the VRAM
	  usage is low and the driver is in debt or doesn't have enough
	  accumulated us to fill VRAM quickly.
	 
	  The situation can occur in these cases:
	  - a lot of VRAM is freed by userspace
	  - the presence of a big buffer causes a lot of evictions
	    (solution: split buffers into smaller ones)
	 
	  If 128 MB or 18th of VRAM is free, start filling it now by setting
	  accum_us to a positive number.
		 Be more aggresive on dGPUs. Try to fill a portion of free
		  VRAM now.
 Reset accum_us on APUs. 
	 This is set to 0 if the driver is in debt to disallow (optional)
	  buffer moves.
 Do the same for visible VRAM if half of it is free 
 Report how many bytes have really been moved for the last command
  submission. This can result in a debt that can stop buffer migrations
  temporarily.
	 Don't move this buffer if we have depleted our allowance
	  to move it. Don't move anything if the threshold is zero.
			 And don't move a CPU_ACCESS_REQUIRED BO to limited
			  visible VRAM if we've depleted our allowance to do
			  that.
 p->bo_list could already be assigned if AMDGPU_CHUNK_ID_BO_HANDLES is present 
 Create a empty bo_list when no handle is provided 
 One for TTM and one for the CS job 
	 Get userptr backing pages. If pages are updated after registered
	  in amdgpu_gem_userptr_ioctl(), amdgpu_cs_list_validate() will do
	  amdgpu_ttm_backend_bind() to flush and invalidate new pages
  amdgpu_cs_parser_fini() - clean parser states
  @parser:	parser structure holding parsing context.
  @error:	error number
  @backoff:	indicator to backoff the reservation
  If error is set then unvalidate buffer, otherwise just free memory
  used by parsing context.
 Only for UVDVCE VM emulation 
 the IB should be reserved at this point 
 ignore duplicates 
 Invalidate all BOs to test for userspace bugs 
 ignore duplicates 
 each GFX command submit allows 0 or 1 IB preemptible for CE & DE 
		 Return if there is no run queue associated with this entity.
 MM engine doesn't support user fences 
	 No memory allocation is allowed while holding the notifier lock.
	  The lock is held until amdgpu_cs_submit is finished and fence is
	  added to BOs.
	 If userptr are invalidated after amdgpu_cs_parser_bos(), return
	  -EAGAIN, drmIoctl in libdrm will restart the amdgpu_cs_ioctl.
		
		  Work around dma_resv shortcommings by wrapping up the
		  submission in a dma_fence_chain and add it as exclusive
		  fence, but first add the submission as shared fence to make
		  sure that shared fences never signal before the exclusive
		  one.
  amdgpu_cs_wait_ioctl - wait for a command submission to finish
  @dev: drm device
  @data: data from userspace
  @filp: file private
  Wait for the command submission identified by handle to finish.
  amdgpu_cs_get_fence - helper to get fence from drm_amdgpu_fence
  @adev: amdgpu device
  @filp: file private
  @user: drm_amdgpu_fence copied from user space
  amdgpu_cs_wait_all_fences - wait on all fences to signal
  @adev: amdgpu device
  @filp: file private
  @wait: wait parameters
  @fences: array of drm_amdgpu_fence
  amdgpu_cs_wait_any_fence - wait on any fence to signal
  @adev: amdgpu device
  @filp: file private
  @wait: wait parameters
  @fences: array of drm_amdgpu_fence
 Prepare the fence array 
 NULL, the fence has been already signaled 
  amdgpu_cs_wait_fences_ioctl - wait for multiple command submissions to finish
  @dev: drm device
  @data: data from userspace
  @filp: file private
 Get the fences from userspace 
  amdgpu_cs_find_mapping - find bo_va for VM address
  @parser: command submission parser context
  @addr: VM address
  @bo: resulting BO of the mapping found
  @map: Placeholder to return found BO mapping
  Search the buffer objects in the command submission context for a certain
  virtual memory address. Returns allocation structure when found, NULL
  otherwise.
 Double check that the BO is reserved by this CS 
  Copyright 2020 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  vega20_ih_init_register_offset - Initialize register offset for ih rings
  @adev: amdgpu_device pointer
  Initialize register offset ih rings (VEGA20).
  vega20_ih_toggle_ring_interrupts - toggle the interrupt ring buffer
  @adev: amdgpu_device pointer
  @ih: amdgpu_ih_ring pointer
  @enable: true - enable the interrupts, false - disable the interrupts
  Toggle the interrupt ring buffer (VEGA20)
 enable_intr field is only valid in ring0 
 set rptr, wptr to 0 
  vega20_ih_toggle_interrupts - Toggle all the available interrupt ring buffers
  @adev: amdgpu_device pointer
  @enable: enable or disable interrupt ring buffers
  Toggle all the available interrupt ring buffers (VEGA20).
	 Ring Buffer write pointer writeback. If enabled, IH_RB_WPTR register
	  value is written to memory
  vega20_ih_enable_ring - enable an ih ring buffer
  @adev: amdgpu_device pointer
  @ih: amdgpu_ih_ring pointer
  Enable an ih ring buffer (VEGA20)
 Ring Buffer base. [39:8] of 40-bit address of the beginning of the ring buffer
 set the ih ring 0 writeback address whether it's enabled or not 
 set rptr, wptr to 0 
  vega20_ih_reroute_ih - reroute VMCUTCL2 ih to an ih ring
  @adev: amdgpu_device pointer
  Reroute VMC and UMC interrupts on primary ih ring to
  ih ring 1 so they won't lose when bunches of page faults
  interrupts overwhelms the interrupt handler(VEGA20)
	 vega20 ih reroute will go through psp this
	  function is used for newer asics starting arcturus
 Reroute to IH ring 1 for VMC 
 Reroute IH ring 1 for UTCL2 
  vega20_ih_irq_init - init and enable the interrupt ring
  @adev: amdgpu_device pointer
  Allocate a ring buffer for the interrupt controller,
  enable the RLC, disable interrupts, enable the IH
  ring buffer and enable it (VI).
  Called at device load and reume.
  Returns 0 for success, errors for failure.
 disable irqs 
	 psp firmware won't program IH_CHICKEN for aldebaran
	  driver needs to program it properly according to
 enable interrupts 
  vega20_ih_irq_disable - disable interrupts
  @adev: amdgpu_device pointer
  Disable interrupts on the hw (VEGA20).
 Wait and acknowledge irq 
  vega20_ih_get_wptr - get the IH ring buffer wptr
  @adev: amdgpu_device pointer
  @ih: amdgpu_ih_ring pointer
  Get the IH ring buffer wptr from either the register
  or the writeback memory buffer (VEGA20).  Also check for
  ring buffer overflow and deal with it.
  Returns the value of the wptr.
		 Only ring0 supports writeback. On other rings fall back
		  to register-based code with overflow checking below.
 Double check that the overflow wasn't already cleared. 
	 When a ring buffer overflow happen start parsing interrupt
	  from the last not overwritten vector (wptr + 32). Hopefully
	  this should allow us to catchup.
  vega20_ih_irq_rearm - rearm IRQ if lost
  @adev: amdgpu_device pointer
  @ih: amdgpu_ih_ring pointer
 Rearm IRQ  re-wwrite doorbell if doorbell write is lost 
  vega20_ih_set_rptr - set the IH ring buffer rptr
  @adev: amdgpu_device pointer
  @ih: amdgpu_ih_ring pointer
  Set the IH ring buffer rptr.
 XXX check if swapping is necessary on BE 
  vega20_ih_self_irq - dispatch work for ring 1 and 2
  @adev: amdgpu_device pointer
  @source: irq source
  @entry: IV with WPTR update
  Update the WPTR from the IV and schedule work to handle the entries.
 initialize ih control registers offset 
 todo 
 todo 
 todo 
  Copyright 2021 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 AT24CM02 and M24M02-R have a 256-byte write page size.
 EEPROM memory addresses are 19-bits long, which can
  be partitioned into 3, 8, 8 bits, for a total of 19.
  The upper 3 bits are sent as part of the 7-bit
  "Device Type Identifier"--an I2C concept, which for EEPROM devices
  is hard-coded as 1010b, indicating that it is an EEPROM
  device--this is the wire format, followed by the upper
  3 bits of the 19-bit address, followed by the direction,
  followed by two bytes holding the rest of the 16-bits of
  the EEPROM memory address. The format on the wire for EEPROM
  devices is: 1010XYZD, A15:A8, A7:A0,
  Where D is the direction and sequenced out by the hardware.
  Bits XYZ are memory address bits 18, 17 and 16.
  These bits are compared to how pins 1-3 of the part are connected,
  depending on the size of the part, more on that later.
  Note that of this wire format, a client is in control
  of, and needs to specify only XYZ, A15:A8, A7:0, bits,
  which is exactly the EEPROM memory address, or offset,
  in order to address up to 8 EEPROM devices on the I2C bus.
  For instance, a 2-Mbit I2C EEPROM part, addresses all its bytes,
  using an 18-bit address, bit 17 to 0 and thus would use all but one bit of
  the 19 bits previously mentioned. The designer would then not connect
  pins 1 and 2, and pin 3 usually named "A_2" or "E2", would be connected to
  either Vcc or GND. This would allow for up to two 2-Mbit parts on
  the same bus, where one would be addressable with bit 18 as 1, and
  the other with bit 18 of the address as 0.
  For a 2-Mbit part, bit 18 is usually known as the "Chip Enable" or
  "Hardware Address Bit". This bit is compared to the load on pin 3
  of the device, described above, and if there is a match, then this
  device responds to the command. This way, you can connect two
  2-Mbit EEPROM devices on the same bus, but see one contiguous
  memory from 0 to 7FFFFh, where address 0 to 3FFFF is in the device
  whose pin 3 is connected to GND, and address 40000 to 7FFFFh is in
  the 2nd device, whose pin 3 is connected to Vcc.
  This addressing you encode in the 32-bit "eeprom_addr" below,
  namely the 19-bits "XYZ,A15:A0", as a single 19-bit address. For
  instance, eeprom_addr = 0x6DA01, is 110_1101_1010_0000_0001, where
  XYZ=110b, and A15:A0=DA01h. The XYZ bits become part of the device
  address, and the rest of the address bits are sent as the memory
  address bytes.
  That is, for an I2C EEPROM driver everything is controlled by
  the "eeprom_addr".
  P.S. If you need to write, lock and read the Identification Page,
  (M24M02-DR device only, which we do not use), change the "7" to
  "0xF" in the macro below, and let the client set bit 20 to 1 in
  "eeprom_addr", and set A10 to 0 to write into it, and A10 and A1 to
  1 to lock it permanently.
		 Set the EEPROM address we want to write toread from.
			 Write the maximum amount of data, without
			  crossing the device's page boundary, as per
			  its spec. Partial page writes are allowed,
			  starting at any location within the page,
			  so long as the page boundary isn't crossed
			  over (actually the page pointer rolls
			  over).
			 
			  As per the AT24CM02 EEPROM spec, after
			  writing into a page, the I2C driver should
			  terminate the transfer, i.e. in
			  "i2c_transfer()" below, with a STOP
			  condition, so that the self-timed write
			  cycle begins. This is implied for the
			  "i2c_transfer()" abstraction.
			 Reading from the EEPROM has no limitation
			  on the number of bytes read from the EEPROM
			  device--they are simply sequenced out.
		 This constitutes a START-STOP transaction.
			 According to EEPROM specs the length of the
			  self-writing cycle, tWR (tW), is 10 ms.
			 
			  TODO: Use polling on ACK, aka Acknowledge
			  Polling, to minimize waiting for the
			  internal write cycle to complete, as it is
			  usually smaller than tWR (tW).
  amdgpu_eeprom_xfer -- Readwrite fromto an I2C EEPROM device
  @i2c_adap: pointer to the I2C adapter to use
  @eeprom_addr: EEPROM address from which to readwrite
  @eeprom_buf: pointer to data buffer to read intowrite from
  @buf_size: the size of @eeprom_buf
  @read: True if reading from the EEPROM, false if writing
  Returns the number of bytes readwritten; -errno on error.
 Partial size 
		 The "limit" includes all data bytes sentreceived,
		  which would include the EEPROM_OFFSET_SIZE bytes.
		  Account for them here.
  Copyright 2014 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Interrupts
  Starting with r6xx, interrupts are handled via a ring buffer.
  Ring buffers are areas of GPU accessible memory that the GPU
  writes interrupt vectors into and the host reads vectors out of.
  There is a rptr (read pointer) that determines where the
  host is currently reading, and a wptr (write pointer)
  which determines where the GPU has written.  When the
  pointers are equal, the ring is idle.  When the GPU
  writes vectors to the ring buffer, it increments the
  wptr.  When there is an interrupt, the host then starts
  fetching commands and processing them until the pointers are
  equal again at which point it updates the rptr.
  cz_ih_enable_interrupts - Enable the interrupt ring buffer
  @adev: amdgpu_device pointer
  Enable the interrupt ring buffer (VI).
  cz_ih_disable_interrupts - Disable the interrupt ring buffer
  @adev: amdgpu_device pointer
  Disable the interrupt ring buffer (VI).
 set rptr, wptr to 0 
  cz_ih_irq_init - init and enable the interrupt ring
  @adev: amdgpu_device pointer
  Allocate a ring buffer for the interrupt controller,
  enable the RLC, disable interrupts, enable the IH
  ring buffer and enable it (VI).
  Called at device load and reume.
  Returns 0 for success, errors for failure.
 disable irqs 
 setup interrupt control 
	 INTERRUPT_CNTL__IH_DUMMY_RD_OVERRIDE_MASK=0 - dummy read disabled with msi, enabled without msi
	  INTERRUPT_CNTL__IH_DUMMY_RD_OVERRIDE_MASK=1 - dummy read controlled by IH_DUMMY_RD_EN
 INTERRUPT_CNTL__IH_REQ_NONSNOOP_EN_MASK=1 if ring is in non-cacheable memory, e.g., vram 
 Ring Buffer base. [39:8] of 40-bit address of the beginning of the ring buffer
 Ring Buffer write pointer writeback. If enabled, IH_RB_WPTR register value is written to memory 
 set the writeback address whether it's enabled or not 
 set rptr, wptr to 0 
 Default settings for IH_CNTL (disabled at first) 
 enable interrupts 
  cz_ih_irq_disable - disable interrupts
  @adev: amdgpu_device pointer
  Disable interrupts on the hw (VI).
 Wait and acknowledge irq 
  cz_ih_get_wptr - get the IH ring buffer wptr
  @adev: amdgpu_device pointer
  @ih: IH ring buffer to fetch wptr
  Get the IH ring buffer wptr from either the register
  or the writeback memory buffer (VI).  Also check for
  ring buffer overflow and deal with it.
  Used by cz_irq_process(VI).
  Returns the value of the wptr.
 Double check that the overflow wasn't already cleared. 
	 When a ring buffer overflow happen start parsing interrupt
	  from the last not overwritten vector (wptr + 16). Hopefully
	  this should allow us to catchup.
  cz_ih_decode_iv - decode an interrupt vector
  @adev: amdgpu_device pointer
  @ih: IH ring buffer to decode
  @entry: IV entry to place decoded information into
  Decodes the interrupt vector at the current rptr
  position and also advance the position.
 wptrrptr are in bytes! 
 wptrrptr are in bytes! 
  cz_ih_set_rptr - set the IH ring buffer rptr
  @adev: amdgpu_device pointer
  @ih: IH ring buffer to set rptr
  Set the IH ring buffer rptr.
 read MC_STATUS 
 Wait a little for things to settle down 
 TODO
 TODO
  Copyright 2016 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 Program the AGP BAR 
 Program the system aperture low logical page number. 
		
		  Raven2 has a HW issue that it is unable to use the vram which
		  is out of MC_VM_SYSTEM_APERTURE_HIGH_ADDR. So here is the
		  workaround that increase system aperture high address (add 1)
		  to get rid of the VM fault and hardware hang.
 Set default page address. 
 Program "protection fault". 
 Setup TLB control 
 XXX for emulation. 
 Setup L2 cache 
 XXX for emulation, Refer to closed source code.
 Send no-retry XNACK on fault to suppress VM fault storm. 
		
		  MC_VM_FB_LOCATION_BASETOP is NULL for VF, becuase they are
		  VF copy registers so vbios post doesn't program them, for
		  SRIOV driver need to program them
 GART Enable. 
 Disable all tables 
 Setup TLB control 
 Setup L2 cache 
  mmhub_v1_0_set_fault_enable_default - update GARTVM fault handling
  @adev: amdgpu_device pointer
  @value: true redirects VM faults to the default page
 AMD_CG_SUPPORT_MC_MGCG 
 AMD_CG_SUPPORT_MC_LS 
 read back edc counter registers to reset the counters to 0 
  Copyright 2016 Advanced Micro Devices, Inc.
  All Rights Reserved.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sub license, andor sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
  THE COPYRIGHT HOLDERS, AUTHORS ANDOR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,
  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  USE OR OTHER DEALINGS IN THE SOFTWARE.
  The above copyright notice and this permission notice (including the
  next paragraph) shall be included in all copies or substantial portions
  of the Software.
 Firmware Names 
	 Bit 20-23, it is encode major and non-zero for new naming convention.
	  This field is part of version minor and DRM_DISABLED_FLAG in old naming
	  convention. Since the l:wq!atest version minor is 0x5B and DRM_DISABLED_FLAG
	  is zero in old naming convention, this field is always zero so far.
	  These four bits are used to tell which naming convention is present.
 if cannot find IP data, then this VCN does not exist 
 VCN in SRIOV does not support direct register readwrite 
 session info 
 task info 
 op initialize 
 op close session 
 currently only support 2 FW instances 
  Copyright 2018 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 HW has more IP blocks,  only initialized the block needed by our driver  
  Copyright 2007-8 Advanced Micro Devices, Inc.
  Copyright 2008 Red Hat Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: Dave Airlie
           Alex Deucher
           Jerome Glisse
 move these to drm_dp_helper.ch 
 amdgpu AUX functions 
 timeout 
 flags not zero 
 error 
		 tx_size needs to be 4 even for bare address packets since the atom
		  table needs the info in tx_buf[3].
 Return payload size. 
		 tx_size needs to be 4 even for bare address packets since the atom
		  table needs the info in tx_buf[3].
 general DP utility functions 
 convert bits per color to bits per pixel 
 get bpc from the EDID 
 amdgpu specific DP functions 
 DP bridge chips 
 eDP 
 power updown the sink 
 set the initial vsemph on the source 
 sets all lanes at once 
 set the vsemph on the sink 
 set training pattern on the source 
 enable training pattern on the sink 
 power up the sink 
 possibly enable downspread on the sink 
 set the lane count on the sink 
 set the link rate on the sink 
 start training on the source 
 disable the training pattern on the sink 
 disable the training pattern on the sink 
 disable the training pattern on the source 
 clock recovery loop 
 Compute new train_set as requested by sink 
 channel equalization loop 
 Try 5 times 
 Compute new train_set as requested by sink 
  Copyright © 2007 David Airlie
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice (including the next
  paragraph) shall be included in all copies or substantial portions of the
  Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  DEALINGS IN THE SOFTWARE.
  Authors:
      David Airlie
 object hierarchy -
   this contains a helper + a amdgpu fb
   the helper contains a pointer to amdgpu framebuffer baseclass.
 useful for testing 
 need to align pitch with crtc limits 
 okay we have an object now allocate the framebuffer 
 setup helper 
 setup aperture basesize for vesafb takeover 
 Use default scratch pixmap (info->pixmap.flags = FB_PIXMAP_SYSTEM) 
 don't init fbdev on hw without DCE 
 don't init fbdev if there are no connectors 
 select 8 bpp console on low vram cards 
 disable all the possible outputscrtcs before entering KMS mode 
  Copyright 2019 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 TODO add golden setting for hdp 
 MM HUB 
 GFX HUB 
 MM HUB 
 GFX HUB 
 Returning 1 here also prevents sending the IV to the KFD 
 Process it onyl if it's the first fault for this address 
		 Delegate it to a different ring if the hardware hasn't
		  already done it.
		 Try to handle the recoverable page faults by filling page
		  tables
		
		  Issue a dummy read to wait for the status register to
		  be updated to avoid reading an incorrect value due to
		  the new fast GRBM interface.
  gmc_v10_0_use_invalidate_semaphore - judge whether to use semaphore
  @adev: amdgpu_device pointer
  @vmhub: vmhub type
  GART
  VMID 0 is the physical GPU addresses as used by the kernel.
  VMIDs 1-15 are used for userspace clients and are handled
  by the amdgpu vmhsa code.
 Use register 17 for GART 
	
	  It may lose gpuvm invalidate acknowldege state across power-gating
	  off cycle, add semaphore acquire before invalidation and semaphore
	  release after invalidation to avoid entering power gated state
	  to WA the Issue
 TODO: It needs to continue working on debugging with semaphore for GFXHUB as well. 
 a read return value of 1 means semaphore acuqire 
	
	  Issue a dummy read to wait for the ACK register to be cleared
	  to avoid a false ACK due to the new fast GRBM interface.
 Wait for ACK with a delay.
 TODO: It needs to continue working on debugging with semaphore for GFXHUB as well. 
		
		  add semaphore release after invalidation,
		  write with 0 means semaphore release
  gmc_v10_0_flush_gpu_tlb - gart tlb flush callback
  @adev: amdgpu_device pointer
  @vmid: vm instance to flush
  @vmhub: vmhub type
  @flush_type: the flush type
  Flush the TLB for the requested page table.
 flush hdp cache 
	 For SRIOV run time, driver shouldn't access the register through MMIO
	  Directly use kiq to do the vm invalidation instead
	 The SDMA on Navi has a bug which can theoretically result in memory
	  corruption if an invalidation happens at the same time as an VA
	  translation. Avoid this by doing the invalidation from the SDMA
	  itself.
  gmc_v10_0_flush_gpu_tlb_pasid - tlb flush via pasid
  @adev: amdgpu_device pointer
  @pasid: pasid to be flush
  @flush_type: the flush type
  @all_hub: Used with PACKET3_INVALIDATE_TLBS_ALL_HUB()
  Flush the TLB for the requested pasid.
 2 dwords flush + 8 dwords fence 
	
	  It may lose gpuvm invalidate acknowldege state across power-gating
	  off cycle, add semaphore acquire before invalidation and semaphore
	  release after invalidation to avoid entering power gated state
	  to WA the Issue
 TODO: It needs to continue working on debugging with semaphore for GFXHUB as well. 
 a read return value of 1 means semaphore acuqire 
 TODO: It needs to continue working on debugging with semaphore for GFXHUB as well. 
		
		  add semaphore release after invalidation,
		  write with 0 means semaphore release
  PTE format on NAVI 10:
  63:59 reserved
  58 reserved and for sienna_cichlid is used for MALL noalloc
  57 reserved
  56 F
  55 L
  54 reserved
  53:52 SW
  51 T
  50:48 mtype
  47:12 4k physical page base address
  11:7 fragment
  6 write
  5 read
  4 exe
  3 Z
  2 snooped
  1 system
  0 valid
  PDE format on NAVI 10:
  63:59 block fragment size
  58:55 reserved
  54 P
  53:48 reserved
  47:6 physical base address of PD or PTE
  5:3 reserved
  2 C
  1 system
  0 valid
 Set the block fragment size 
 add the xgmi offset of the physical node 
 base offset of vram pages 
 add the xgmi offset of the physical node 
  gmc_v10_0_mc_init - initialize the memory controller driver params
  @adev: amdgpu_device pointer
  Look up the amount of vram, vram width, and decide how to place
  vram and gart within the GPU's physical address space.
  Returns 0 for success.
 size in MB on si 
 In case the PCI BAR is larger than the actual amount of vram 
 set the gart size 
 Initialize common gart structure 
 numchan  chansize 
		
		  To fulfill 4-level page support,
		  vm size is 256TB (48bit), maximum size of Navi10Navi14Navi12,
		  block size 512 (9bit)
 This interrupt is VMC page fault.
 interrupt sent to DF. 
	
	  Set the internal MC address mask This is the max address of the GPU's
	  internal address space.
 48 bit MC 
 Memory manager 
	
	  number of VMs
	  VMID 0 is reserved for System
	  amdgpu graphicscompute will use VMIDs 1-7
	  amdkfd will use VMIDs 8-15
  gmc_v10_0_gart_fini - vm fini callback
  @adev: amdgpu_device pointer
  Tears down the driver GARTVM setup (CIK).
  gmc_v10_0_gart_enable - gart enable
  @adev: amdgpu_device pointer
 Flush HDP after it is initialized 
 The sequence of these two function calls matters.
	
	  harvestable groups in gc_utcl2 need to be programmed before any GFX block
	  register setup within GMC, or else system hang when harvesting SA.
  gmc_v10_0_gart_disable - gart disable
  @adev: amdgpu_device pointer
  This disables all VM page table.
 full access mode, so don't touch any GMC register 
 MC is always ready in GMC v10.
 There is no need to wait for MC idle in GMC v10.
  Copyright 2016 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Author: Huang Rui
 allocate 4k Page of Local Frame Buffer memory for ring 
 Write low address of the ring to C2PMSG_69 
 Write high address of the ring to C2PMSG_70 
 Write size of ring to C2PMSG_71 
 Write the ring initialization command to C2PMSG_64 
 There might be handshake issue with hardware which needs delay 
 Wait for response flag (bit 31) in C2PMSG_64 
 Write the ring destroy command to C2PMSG_64 
 There might be handshake issue with hardware which needs delay 
 Wait for response flag (bit 31) in C2PMSG_64 
  Copyright 2017 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: Xiangliang.Yu@amd.com
 VI golden setting 
  Mailbox communication between GPU hypervisor and VFs
Wait for RCV_MSG_VALID to be 0
 workaround: host driver doesn't set VALID for CMPL now 
 send ack to PF 
 start to poll ack 
 start to check msg if request is idh_req_gpu_init_access 
 add support mailbox interrupts 
 wait until RCV_MSG become 3 
 Trigger recovery due to world switch failure 
 trigger gpu-reset by hypervisor only if TDR disbaled 
 see what event we get 
 only handle FLR_NOTIFY now 
 Does not need to trans VF errors to host. 
  Copyright 2008 Advanced Micro Devices, Inc.
  Copyright 2008 Red Hat Inc.
  Copyright 2009 Jerome Glisse.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: Dave Airlie
           Alex Deucher
           Jerome Glisse
  Call from drm_gem_handle_create which appear in both new and open ioctl
  case.
	 Workaround for Thunk bug creating PROT_NONE,MAP_PRIVATE mappings
	  for debugger access to invisible VRAM. Should have used MAP_SHARED
	  instead. Clearing VM_MAYWRITE prevents the mapping from ever
	  becoming writable and makes is_cow_mapping(vm_flags) false.
  GEM ioctls.
 reject invalid gem flags 
 reject invalid gem domains 
 create a gem object to contain this object in 
			 if gds bo is created from user space, it must be
			  passed to bo list
 drop reference from allocate - handle holds it now 
 reject unknown flag values 
 if we want to write to it we must install a MMU notifier 
 create a gem object to contain this object in 
  amdgpu_gem_timeout - calculate jiffies timeout from absolute value
  @timeout_ns: timeout in ns
  Calculate the timeout in jiffies from an absolute timeout in ns.
 clamp timeout if it's to large 
  clamp timeout to avoid unsigned-> signed overflow 
	 ret == 0 means not signaled,
	  ret > 0 means signaled
	  ret < 0 means interrupted before timeout
  amdgpu_gem_va_update_vm -update the bo_va in its VM
  @adev: amdgpu_device pointer
  @vm: vm to update
  @bo_va: bo_va to update
  @operation: map, unmap or clear
  Update the bo_va directly after setting its address. Errors are not
  vital here, so they are not reported back to userspace.
  amdgpu_gem_va_map_flags - map GEM UAPI flags into hardware flags
  @adev: amdgpu_device pointer
  @flags: GEM UAPI flags
  Returns the GEM UAPI flags mapped into hardware for the ASIC.
	
	  The buffer returned from this function should be cleared, but
	  it can only be done if the ring is enabled or we'll fail to
	  create the buffer.
 drop reference from allocate - handle holds it now 
		
		  Although we have a valid reference on file->pid, that does
		  not guarantee that the task_struct who called get_pid() is
		  still alive (e.g. get_pid(current) => fork() => exit()).
		  Therefore, we need to protect this ->comm access using RCU.
  Copyright 2014 Advanced Micro Devices, Inc.
  Copyright 2008 Red Hat Inc.
  Copyright 2009 Jerome Glisse.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 delay 0.1 second to enable gfx off feature 
  GPU GFX IP block helpers function.
  amdgpu_gfx_scratch_get - Allocate a scratch register
  @adev: amdgpu_device pointer
  @reg: scratch register mmio offset
  Allocate a CP scratch register for use by the driver (all asics).
  Returns 0 on success or -EINVAL on failure.
  amdgpu_gfx_scratch_free - Free a scratch register
  @adev: amdgpu_device pointer
  @reg: scratch register mmio offset
  Free a CP scratch register allocated for use by the driver (all asics)
  amdgpu_gfx_parse_disable_cu - Parse the disable_cu module parameter
  @mask: array in which the per-shader array disable masks will be stored
  @max_se: number of SEs
  @max_sh: number of SHs
  The bitmask of CUs to be disabled in the shader array determined by se and
  sh is stored in mask[se  max_sh + sh].
	 FIXME: spreading the queues across pipes causes perf regressions
	 Policy: use 1st queue as high priority compute queue if we
	  have more than one compute queue.
 policy: make queues evenly cross all pipes on MEC1 only 
 policy: amdgpu owns all queues in the given pipe 
		 policy: amdgpu owns the first queue per pipe at this stage
 update the number of active graphics rings 
		
		  1. Using pipes 23 from MEC 2 seems cause problems.
		  2. It must use queue id 0, because CGPG_IDLESAVELOADRUN
		  only can be issued on queue 0.
 create MQD for each computegfx queue 
 create MQD for KIQ 
		 originaly the KIQ MQD is put in GTT domain, but for SRIOV VRAM domain is a must
		  otherwise hypervisor trigger SAVE_VF fail after driver unloaded which mean MQD
		  deallocated and gart_unbind, to strict diverage we decide to use VRAM domain for
		  KIQ MQD no matter SRIOV or Bare-metal
 prepare MQD backup 
 create MQD for each KGQ 
 prepare MQD backup 
 create MQD for each KCQ 
 prepare MQD backup 
		 This situation may be hit in the future if a new HW
		  generation exposes more than 64 queues. If so, the
 amdgpu_gfx_off_ctrl - Handle gfx off feature enabledisable
  @adev: amdgpu_device pointer
  @bool enable true: enable gfx off feature, false: disable gfx off feature
  1. gfx off feature will be enabled by gfx ip after gfx cg gp enabled.
  2. other client can send request to disable gfx off feature, the request should be honored.
  3. other client can cancel their request of disable gfx off feature
  4. other client should not send request to enable gfx off feature before disable gfx off feature.
		 If the count is already 0, it means there's an imbalance bug somewhere.
		  Note that the bug may be in a different caller than the one which triggers the
		  WARN_ON_ONCE.
 If going to s2idle, no need to wait 
 free gfx ras_if if ras is not supported 
	 TODO ue will trigger an interrupt.
	 
	  When “Full RAS” is enabled, the per-IP interrupt sources should
	  be disabled and the driver should only look for the aggregated
	  interrupt via sync flood
	 don't wait anymore for gpu reset case because this way may
	  block gpu_recover() routine forever, e.g. this virt_kiq_rreg
	  is triggered in TTM and ttm_bo_lock_delayed_workqueue() will
	  never return if we keep waiting in virt_kiq_rreg, which cause
	  gpu_recover() hang there.
	 
	  also don't wait anymore for IRQ context
	 don't wait anymore for gpu reset case because this way may
	  block gpu_recover() routine forever, e.g. this virt_kiq_rreg
	  is triggered in TTM and ttm_bo_lock_delayed_workqueue() will
	  never return if we keep waiting in virt_kiq_rreg, which cause
	  gpu_recover() hang there.
	 
	  also don't wait anymore for IRQ context
 amdgpu_gfx_state_change_set - Handle gfx power state change set
  @adev: amdgpu_device pointer
  @state: gfx power state(1 -sGpuChangeState_D0Entry and 2 -sGpuChangeState_D3Entry)
  Copyright 2007-11 Advanced Micro Devices, Inc.
  Copyright 2008 Red Hat Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: Dave Airlie
           Alex Deucher
 Convert brightness to hardware level 
	 Mac laptops with multiple GPUs use the gmux driver for backlight
	  so don't register a backlight device
 !CONFIG_BACKLIGHT_CLASS_DEVICE 
 set the active encoder to connector routing 
 hw bug 
 vertical FP must be at least 1 
 get the native mode for scaling 
 R4xx, R5xx 
 RS600690740 
 DFP1, CRT1, TV1 depending on the type of port 
 R6xx 
 XXX 
 DCE8 
 XXX 
 dp bridges are always DP 
 DVO is always DVO 
	 if we don't have an active device yet, just use one of
	  the connectors tied to the encoder.
 HDMI-B is basically DL-DVI; analog works fine 
 fix me 
  DIG EncoderTransmitter Setup
  DCE 6.0
  - 3 DIG transmitter blocks UNIPHY012 (links A and B).
  Supports up to 6 digital outputs
  - 6 DIG encoder blocks.
  - DIG to PHY mapping is hardcoded
  DIG1 drives UNIPHY0 link A, A+B
  DIG2 drives UNIPHY0 link B
  DIG3 drives UNIPHY1 link A, A+B
  DIG4 drives UNIPHY1 link B
  DIG5 drives UNIPHY2 link A, A+B
  DIG6 drives UNIPHY2 link B
  Routing
  crtc -> dig encoder -> UNIPHYLVTMA (1 or 2 links)
  Examples:
  crtc0 -> dig2 -> LVTMA   links A+B -> TMDSHDMI
  crtc1 -> dig1 -> UNIPHY0 link  B   -> DP
  crtc0 -> dig1 -> UNIPHY2 link  A   -> LVDS
  crtc1 -> dig2 -> UNIPHY1 link  B+A -> TMDSHDMI
 no dig encoder assigned 
		 just needed to avoid bailing in the encoder check.  the encoder
		  isn't used for init
 no dig encoder assigned 
			 Select the PLL for the PHY
			  DP PHY should be clocked from external src if there is
			  one.
 On DCE4, if there is an external clock, it generates the DP ref clock 
 external src 
 DP requires coherent 
			 Select the PLL for the PHY
			  DP PHY should be clocked from external src if there is
			  one.
 On DCE5 DCPLL usually generates the DP ref clock 
 DP requires coherent 
 DP requires coherent 
 wait for the panel to power up 
 no params on frev 1 
 setup and enable the encoder 
 enable the transmitter 
 DP_SET_POWER_D0 is set in amdgpu_atombios_dp_link_train 
 disable the transmitter 
 This only needs to be called once at startup 
 CTV 
 STV 
 load detect on the dp bridge 
 CTV 
 STV 
 ddc_setup on the dp bridge 
 set crtc values 
 parse the lcd record table 
 absolute 
 relative 
 coherent mode by default 
  Copyright 2009 Jerome Glisse.
  All Rights Reserved.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sub license, andor sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
  THE COPYRIGHT HOLDERS, AUTHORS ANDOR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,
  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  USE OR OTHER DEALINGS IN THE SOFTWARE.
  The above copyright notice and this permission notice (including the
  next paragraph) shall be included in all copies or substantial portions
  of the Software.
  Authors:
     Jerome Glisse <glisse@freedesktop.org>
     Dave Airlie
  Fences
  Fences mark an event in the GPUs pipeline and are used
  for GPUCPU synchronization.  When the fence is written,
  it is expected that all buffers associated with that fence
  are no longer in use by the associated ring on the GPU and
  that the the relevant GPU caches have been flushed.
 RB, DMA, etc. 
  Cast helper
  amdgpu_fence_write - write a fence value
  @ring: ring the fence is associated with
  @seq: sequence number to write
  Writes a fence value to memory (all asics).
  amdgpu_fence_read - read a fence value
  @ring: ring the fence is associated with
  Reads a fence value from memory (all asics).
  Returns the value of the fence read from memory.
  amdgpu_fence_emit - emit a fence on the requested ring
  @ring: ring the fence is associated with
  @f: resulting fence object
  @job: job the fence is embedded in
  @flags: flags to pass into the subordinate .emit_fence() call
  Emits a fence command on the requested ring (all asics).
  Returns 0 on success, -ENOMEM on failure.
 create a sperate hw fence 
 take use of job-embedded fence 
 reinit seq for resubmitted jobs 
 mark this fence has a parent job 
	 This function can't be called concurrently anyway, otherwise
	  emitting the fence would mess up the hardware ring buffer.
  amdgpu_fence_emit_polling - emit a fence on the requeste ring
  @ring: ring the fence is associated with
  @s: resulting sequence number
  @timeout: the timeout for waiting in usecs
  Emits a fence command on the requested ring (all asics).
  Used For polling fence.
  Returns 0 on success, -ENOMEM on failure.
  amdgpu_fence_schedule_fallback - schedule fallback check
  @ring: pointer to struct amdgpu_ring
  Start a timer as fallback to our interrupts.
  amdgpu_fence_process - check for fence activity
  @ring: pointer to struct amdgpu_ring
  Checks the current fence value and calculates the last
  signalled fence value. Wakes the fence queue if the
  sequence number has increased.
  Returns true if fence was processed
 There is always exactly one thread signaling this fence slot 
  amdgpu_fence_fallback - fallback for hardware interrupts
  @t: timer context used to obtain the pointer to ring structure
  Checks for fence activity.
  amdgpu_fence_wait_empty - wait for all fences to signal
  @ring: ring index the fence is associated with
  Wait for all fences on the requested ring to signal (all asics).
  Returns 0 if the fences have passed, error for all other cases.
  amdgpu_fence_wait_polling - busy wait for givn sequence number
  @ring: ring index the fence is associated with
  @wait_seq: sequence number to wait
  @timeout: the timeout for waiting in usecs
  Wait for all fences on the requested ring to signal (all asics).
  Returns left time if no timeout, 0 or minus if timeout.
  amdgpu_fence_count_emitted - get the count of emitted fences
  @ring: ring the fence is associated with
  Get the number of fences emitted on the requested ring (all asics).
  Returns the number of emitted fences on the ring.  Used by the
  dynpm code to ring track activity.
	 We are not protected by ring lock when reading the last sequence
	  but it's ok to report slightly wrong fence count here.
  amdgpu_fence_driver_start_ring - make the fence driver
  ready for use on the requested ring.
  @ring: ring to start the fence driver on
  @irq_src: interrupt source to use for this ring
  @irq_type: interrupt type to use for this ring
  Make the fence driver ready for processing (all asics).
  Not all asics have all rings, so each asic will only
  start the fence driver on the rings it has.
  Returns 0 for success, errors for failure.
 put fence directly behind firmware 
  amdgpu_fence_driver_init_ring - init the fence driver
  for the requested ring.
  @ring: ring to init the fence driver on
  @num_hw_submission: number of entries on the hardware queue
  @sched_score: optional score atomic shared with other schedulers
  Init the fence driver for the requested ring (all asics).
  Helper function for amdgpu_fence_driver_init().
 No need to setup the GPU scheduler for rings that don't need it 
  amdgpu_fence_driver_sw_init - init the fence driver
  for all possible rings.
  @adev: amdgpu device pointer
  Init the fence driver for all possible rings (all asics).
  Not all asics have all rings, so each asic will only
  start the fence driver on the rings it has using
  amdgpu_fence_driver_start_ring().
  Returns 0 for success.
  amdgpu_fence_driver_hw_fini - tear down the fence driver
  for all possible rings.
  @adev: amdgpu device pointer
  Tear down the fence driver for all possible rings (all asics).
 You can't wait for HW to signal if it's gone 
 no need to trigger GPU reset as we are unloading 
  amdgpu_fence_driver_hw_init - enable the fence driver
  for all possible rings.
  @adev: amdgpu device pointer
  Enable the fence driver for all possible rings (all asics).
  Not all asics have all rings, so each asic will only
  start the fence driver on the rings it has using
  amdgpu_fence_driver_start_ring().
  Returns 0 for success.
 enable the interrupt 
  amdgpu_fence_driver_force_completion - force signal latest fence of ring
  @ring: fence of the ring to signal
  Common fence implementation
  amdgpu_fence_enable_signaling - enable signalling on fence
  @f: fence
  This function is called with fence_queue lock held, and adds a callback
  to fence_queue that checks if this fence is signaled, and if so it
  signals the fence and removes itself.
  amdgpu_fence_free - free up the fence memory
  @rcu: RCU callback head
  Free up the fence memory after the RCU grace period.
 free job if fence has a parent job 
 free fence_slab if it's separated fence
  amdgpu_fence_release - callback that fence can be freed
  @f: fence
  This function is called when the reference count becomes zero.
  It just RCU schedules freeing up the fence.
  Fence debugfs
 set in CP_VMID_PREEMPT and preemption occurred 
 set in CP_VMID_RESET and reset occurred 
 Both preemption and reset occurred 
  amdgpu_debugfs_gpu_recover - manually trigger a gpu reset & recover
  Manually trigger a gpu reset at the next fence wait.
  Copyright 2008 Advanced Micro Devices, Inc.
  Copyright 2008 Red Hat Inc.
  Copyright 2009 Jerome Glisse.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: Dave Airlie
           Alex Deucher
           Jerome Glisse
  DOC: Interrupt Handling
  Interrupts generated within GPU hardware raise interrupt requests that are
  passed to amdgpu IRQ handler which is responsible for detecting source and
  type of the interrupt and dispatching matching handlers. If handling an
  interrupt requires calling kernel functions that may sleep processing is
  dispatched to work handlers.
  If MSI functionality is not disabled by module parameter then MSI
  support will be enabled.
  For GPU interrupt sources that may be driven by another driver, IRQ domain
  support is used (with mapping between virtual and hardware IRQs).
  amdgpu_hotplug_work_func - work handler for display hotplug event
  @work: work struct pointer
  This is the hotplug event work handler (all ASICs).
  The work gets scheduled from the IRQ handler if there
  was a hotplug interrupt.  It walks through the connector table
  and calls hotplug handler for each connector. After this, it sends
  a DRM hotplug event to alert userspace.
  This design approach is required in order to defer hotplug event handling
  from the IRQ handler to a work handler because hotplug handler has to use
  mutexes which cannot be locked in an IRQ handler (since &mutex_lock may
  sleep).
 Just fire off a uevent and let userspace tell us what to do 
  amdgpu_irq_disable_all - disable all interrupts
  @adev: amdgpu device pointer
  Disable all types of interrupts from all sources.
  amdgpu_irq_handler - IRQ handler
  @irq: IRQ number (unused)
  @arg: pointer to DRM device
  IRQ handler for amdgpu driver (all ASICs).
  Returns:
  result of handling the IRQ, as defined by &irqreturn_t
	 For the hardware that cannot enable bif ring for both ras_controller_irq
          and ras_err_evnet_athub_irq ih cookies, the driver has to poll status
	  register to check whether the interrupt is triggered or not, and properly
	  ack the interrupt if it is there
  amdgpu_irq_handle_ih1 - kick of processing for IH1
  @work: work structure in struct amdgpu_irq
  Kick of processing IH ring 1.
  amdgpu_irq_handle_ih2 - kick of processing for IH2
  @work: work structure in struct amdgpu_irq
  Kick of processing IH ring 2.
  amdgpu_irq_handle_ih_soft - kick of processing for ih_soft
  @work: work structure in struct amdgpu_irq
  Kick of processing IH soft ring.
  amdgpu_msi_ok - check whether MSI functionality is enabled
  @adev: amdgpu device pointer (unused)
  Checks whether MSI functionality has been disabled via module parameter
  (all ASICs).
  Returns:
  true if MSIs are allowed to be enabled or false otherwise
 VF FLR 
  amdgpu_irq_init - initialize interrupt handling
  @adev: amdgpu device pointer
  Sets up work functions for hotplug and reset interrupts, enables MSI
  functionality, initializes vblank, hotplug and reset interrupt handling.
  Returns:
  0 on success or error code on failure
 Enable MSI if not disabled by module parameter 
 we only need one vector 
 Disable vblank IRQs aggressively for power-saving 
 XXX: can this be enabled for DC? 
 Pre-DCE11 
 Use vector 0 for MSI-X. 
 PCI devices require shared interrupts. 
  amdgpu_irq_fini - shut down interrupt handling
  @adev: amdgpu device pointer
  Tears down work functions for hotplug and reset interrupts, disables MSI
  functionality, shuts down vblank, hotplug and reset interrupt handling,
  turns off interrupts from all sources (all ASICs).
  amdgpu_irq_add_id - register IRQ source
  @adev: amdgpu device pointer
  @client_id: client id
  @src_id: source id
  @source: IRQ source pointer
  Registers IRQ source on a client.
  Returns:
  0 on success or error code otherwise
  amdgpu_irq_dispatch - dispatch IRQ to IP blocks
  @adev: amdgpu device pointer
  @ih: interrupt ring instance
  Dispatches IRQ to IP blocks.
 Send it to amdkfd as well if it isn't already handled 
  amdgpu_irq_delegate - delegate IV to soft IH ring
  @adev: amdgpu device pointer
  @entry: IV entry
  @num_dw: size of IV
  Delegate the IV to the soft IH ring and schedule processing of it. Used
  if the hardware delegation to IH1 or IH2 doesn't work for some reason.
  amdgpu_irq_update - update hardware interrupt state
  @adev: amdgpu device pointer
  @src: interrupt source pointer
  @type: type of interrupt
  Updates interrupt state for the specific source (all ASICs).
	 We need to determine after taking the lock, otherwise
  amdgpu_irq_gpu_reset_resume_helper - update interrupt states on all sources
  @adev: amdgpu device pointer
  Updates state of all types of interrupts on all sources on resume after
  reset.
  amdgpu_irq_get - enable interrupt
  @adev: amdgpu device pointer
  @src: interrupt source pointer
  @type: type of interrupt
  Enables specified type of interrupt on the specified source (all ASICs).
  Returns:
  0 on success or error code otherwise
  amdgpu_irq_put - disable interrupt
  @adev: amdgpu device pointer
  @src: interrupt source pointer
  @type: type of interrupt
  Enables specified type of interrupt on the specified source (all ASICs).
  Returns:
  0 on success or error code otherwise
  amdgpu_irq_enabled - check whether interrupt is enabled or not
  @adev: amdgpu device pointer
  @src: interrupt source pointer
  @type: type of interrupt
  Checks whether the given type of interrupt is enabled on the given source.
  Returns:
  true if interrupt is enabled, false if interrupt is disabled or on
  invalid parameters
 XXX: Generic IRQ handling 
 XXX 
 XXX 
 amdgpu hardware interrupt chip descriptor 
  amdgpu_irqdomain_map - create mapping between virtual and hardware IRQ numbers
  @d: amdgpu IRQ domain pointer (unused)
  @irq: virtual IRQ number
  @hwirq: hardware irq number
  Current implementation assigns simple interrupt handler to the given virtual
  IRQ.
  Returns:
  0 on success or error code otherwise
 Implementation of methods for amdgpu IRQ domain 
  amdgpu_irq_add_domain - create a linear IRQ domain
  @adev: amdgpu device pointer
  Creates an IRQ domain for GPU interrupt sources
  that may be driven by another driver (e.g., ACP).
  Returns:
  0 on success or error code otherwise
  amdgpu_irq_remove_domain - remove the IRQ domain
  @adev: amdgpu device pointer
  Removes the IRQ domain for GPU interrupt sources
  that may be driven by another driver (e.g., ACP).
  amdgpu_irq_create_mapping - create mapping between domain Linux IRQs
  @adev: amdgpu device pointer
  @src_id: IH source id
  Creates mapping between a domain IRQ (GPU IH src id) and a Linux IRQ
  Use this for components that generate a GPU interrupt, but are driven
  by a different driver (e.g., ACP).
  Returns:
  Linux IRQ
  Copyright 2020 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  This shader is used to clear VGPRS and LDS, and also write the input
  pattern into the write back buffer, which will be used by driver to
  check whether all SIMDs have been covered.
 64KB LDS 
  63 - accum-offset = 256 
  The below shaders are used to clear SGPRS, and also write the input
  pattern into the write back buffer. The first two dispatch should be
  scheduled simultaneously which make sure that all SGPRS could be
  allocated, so the dispatch 1 need check write back buffer before scheduled,
  make sure that waves of dispatch 0 are all dispacthed to all simds
  balanced. both dispatch 0 and dispatch 1 should be halted until all waves
  are dispatched, and then driver write a pattern to the shared memory to make
  all waves continue.
  This shader is used to clear the uninitiated sgprs after the above
  two dispatches, because of hardware feature, dispath 0 couldn't clear
  top hole sgprs. Therefore need 4 waves per SIMD to cover these sgprs
 allocate an indirect buffer to put the commands in 
 load the compute shaders 
 init the ib length to 0 
 write the register state for the compute dispatch 
 write the shader start address: mmCOMPUTE_PGM_LO, mmCOMPUTE_PGM_HI 
 write the wb buffer address 
 write dispatch packet 
 x 
 y 
 z 
 shedule the ib on the ring 
 bail if the compute ring is not ready 
 allocate the write-back buffer from IB 
 stop waves 
 stop waves 
 stop waves 
 wait for the GPU to finish processing the IB 
 stop waves 
 stop waves 
 CU_ID: 0~15, SIMD_ID: 0~3, WAVE_ID: 0 ~ 9 
 bail if the compute ring is not ready 
 allocate the write-back buffer from IB 
 wait for the GPU to finish processing the IB 
 only support when RAS is enabled 
	 Workaround for ALDEBARAN, skip GPRs init in GPU reset.
 apply golden settings per die 
 CPF 
 CPC 
 GDS 
 RLC 
 SPI 
 SQC 
 SQ 
 TCP 
 TCI 
 TCC 
 TCA 
 TCX 
 TD 
 TA 
 GCEA 
 CPF 
 CPC 
 GDS 
 RLC 
 SPI 
 SQC - regSQC_EDC_CNT 
 SQC - regSQC_EDC_CNT2 
 SQC - regSQC_EDC_CNT3 
 SQC - regSQC_EDC_PARITY_CNT3 
 SQ 
 TCP 
 TCI 
 TCC 
 TCA 
 TCX 
 TD 
 TA 
 EA - regGCEA_EDC_CNT 
 EA - regGCEA_EDC_CNT2 
 EA - regGCEA_EDC_CNT3 
 if secded_count is null, just clear counter 
 clear counter after read 
 if secded_count is NULL, just clear counter 
 clear counter after read 
 print the edc count 
 clear after read 
 clear old status 
  Copyright 2015 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 XXX: update when we support VCE 
 tahiti, pitcarin, verde 
 oland and hainan don't support encode 
 tahiti, pitcarin, verde, oland 
 hainan doesn't support decode 
 enable the rom 
 Disable VGA mode 
 restore regs 
 APU vbios image is part of sbios image 
 set rom index to 0 
 set mclksclk to bypass 
 powerdown spll 
 disable BM 
 reset 
 wait for asic to come out of reset 
 enable BM 
 change this when we support soft reset 
	 This reports 0 on APUs, so return to avoid writingreading registers
	  that may or may not be different from their GPU counterparts
 Set the 2 events that we wish to watch, defined above 
 Reg 40 is # received msgs, Reg 104 is # of posted requests sent 
 Write to enable desired perf counters 
	 Zero out and enable the perf counters
	  Write 0x5:
	  Bit 0 = Start all counters(1)
	  Bit 2 = Global counter reset enable(1)
	 Load the shadow and disable the perf counters
	  Write 0x2:
	  Bit 0 = Stop counters(0)
	  Bit 1 = Load the shadow counters(1)
 Read register values to get any >32bit overflow 
 Get the values and add the overflow 
 Get the number of NAKs received and generated 
 Add the total number of NAKs, i.e the number of replays 
 Make sure UPLL_CTLREQ is deasserted 
 Assert UPLL_CTLREQ 
 Wait for CTLACK and CTLACK2 to get asserted 
 Deassert UPLL_CTLREQ 
 Adjust to post divider minimum value 
 We alway need a frequency less than or equal the target 
 Post dividers above a certain value must be even 
  si_calc_upll_dividers - calc UPLL clock dividers
  @adev: amdgpu_device pointer
  @vclk: wanted VCLK
  @dclk: wanted DCLK
  @vco_min: minimum VCO frequency
  @vco_max: maximum VCO frequency
  @fb_factor: factor to multiply vco freq with
  @fb_mask: limit and bitmask for feedback divider
  @pd_min: post divider minimum
  @pd_max: post divider maximum
  @pd_even: post divider must be even above this value
  @optimal_fb_div: resulting feedback divider
  @optimal_vclk_div: resulting vclk post divider
  @optimal_dclk_div: resulting dclk post divider
  Calculate dividers for UVDs UPLL (except APUs).
  Returns zero on success; -EINVAL on error.
 Start off with something large 
 Loop through vco from low to high 
 fb div out of range ? 
 It can oly get worse 
 Calc vclk divider with current vco freq 
 vco is too big, it has to stop 
 Calc dclk divider with current vco freq 
 vco is too big, it has to stop 
 Calc score with current vco freq 
 Determine if this vco setting is better than current optimal settings 
 It can't get better than this 
 Did we found a valid setup ? 
 Bypass vclk and dclk with bclk 
 Put PLL in bypass mode 
 Keep the Bypass mode 
 Set RESET_ANTI_MUX to 0 
 Set VCO_MODE to 1 
 Disable sleep mode 
 Deassert UPLL_RESET 
 Assert UPLL_RESET again 
 Disable spread spectrum. 
 Set feedback divider 
 Set ref divider to 0 
 Set PDIV_A and PDIV_B 
 Give the PLL some time to settle 
 Deassert PLL_RESET 
 Switch from bypass mode to normal mode 
 Switch VCLK and DCLK selection 
 Make sure VCEPLL_CTLREQ is deasserted 
 Assert UPLL_CTLREQ 
 Wait for CTLACK and CTLACK2 to get asserted 
 Deassert UPLL_CTLREQ 
 Bypass evclk and ecclk with bclk 
 Put PLL in bypass mode 
 Keep the Bypass mode, put PLL to sleep 
 Set RESET_ANTI_MUX to 0 
 Set VCO_MODE to 1 
 Toggle VCEPLL_SLEEP to 1 then back to 0 
 Deassert VCEPLL_RESET 
 Assert VCEPLL_RESET again 
 Disable spread spectrum. 
 Set feedback divider 
 Set ref divider to 0 
 Set PDIV_A and PDIV_B 
 Give the PLL some time to settle 
 Deassert PLL_RESET 
 Switch from bypass mode to normal mode 
 Switch VCLK and DCLK selection 
AMD_CG_SUPPORT_GFX_CGCG |
AMD_CG_SUPPORT_GFX_CGCG |
???
AMD_CG_SUPPORT_GFX_CGCG |
AMD_CG_SUPPORT_GFX_CGCG |
 gen3 
 gen2 
 gen1 
 amdgpu_device_ip_block_add(adev, &vce_v1_0_ip_block); 
 amdgpu_device_ip_block_add(adev, &vce_v1_0_ip_block); 
  Copyright 2014 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 3 bits in the bitfield. 
  not defined in the CIKV reg file  
 extend the mask to 26 bits to match the low address field 
	
	  We have to assume that there is no outstanding mapping.
	  The ATC_VMID_PASID_MAPPING_UPDATE_STATUS bit could be 0 because
	  a mapping is in progress or because a mapping finished and the
	  SW cleared it. So the protocol is to always wait & clear.
 Mapping vmid to pasid also for IH block 
 HQD registers extend from CP_MQD_BASE_ADDR to CP_MQD_CONTROL. 
	 Copy userspace write pointer value to register.
	  Activate doorbell logic to monitor subsequent changes.
	 read_user_ptr may take the mm->mmap_lock.
	  release srbm_mutex to avoid circular dependency between
	  srbm_mutex->mm_sem->reservation_ww_class_mutex->srbm_mutex.
	 Workaround: If IQ timer is active and the wait time is close to or
	  equal to 0, dequeueing is not safe. Wait until either the wait time
	  is larger or timer is cleared. Also, ensure that IQ_REQ_PEND is
	  cleared before continuing. Also, ensure wait times are set to at
	  least 0x3.
 wait for 500 usecs at maximum 
 SEM-rearm is safe 
			 Wait time 3 is safe for CP, but our MMIO readwrite
			  time is close to 1 microsecond, so check for 10 to
			  leave more buffer room
 Turning off this address until we set all the registers 
 Turning off this watch point until we set all the registers 
 Enable the watch point 
  Restore the GRBM_GFX_INDEX register  
   read_vmid_from_vmfault_reg - read vmid from register
   adev: amdgpu_device pointer
   @vmid: vmid pointer
   read vmid from register (CIK).
  Copyright 2019 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  vcn_v2_5_early_init - set function pointers
  @handle: amdgpu_device pointer
  Set ring and irq function pointers
 both instances are harvested, disable the block 
  vcn_v2_5_sw_init - sw init for VCN block
  @handle: amdgpu_device pointer
  Load firmware and sw initialization
 VCN DEC TRAP 
 VCN ENC TRAP 
  vcn_v2_5_sw_fini - sw fini for VCN block
  @handle: amdgpu_device pointer
  VCN suspend and free up sw allocation
  vcn_v2_5_hw_init - start and test VCN block
  @handle: amdgpu_device pointer
  Initialize the hardware, boot up the VCPU and do some testing
  vcn_v2_5_hw_fini - stop the hardware block
  @handle: amdgpu_device pointer
  Stop the VCN block, mark ring as not ready any more
  vcn_v2_5_suspend - suspend VCN block
  @handle: amdgpu_device pointer
  HW fini and suspend VCN block
  vcn_v2_5_resume - resume VCN block
  @handle: amdgpu_device pointer
  Resume firmware and hw init VCN block
  vcn_v2_5_mc_resume - memory controller programming
  @adev: amdgpu_device pointer
  Let the VCN memory controller know it's offsets
 cache window 0: fw 
 cache window 1: stack 
 cache window 2: context 
 non-cache window 
 cache window 0: fw 
 cache window 1: stack 
 cache window 2: context 
 non-cache window 
 VCN global tiling registers 
  vcn_v2_5_disable_clock_gating - disable VCN clock gating
  @adev: amdgpu_device pointer
  Disable clock gating for VCN block
 UVD disable CGC 
 turn on 
 enable sw clock gating control 
 turn off clock gating 
 turn on SUVD clock gating 
 turn on sw mode in UVD_SUVD_CGC_CTRL 
  vcn_v2_5_enable_clock_gating - enable VCN clock gating
  @adev: amdgpu_device pointer
  Enable clock gating for VCN block
 enable UVD CGC 
 disable register anti-hang mechanism 
 enable dynamic power gating mode 
 enable clock gating 
 enable VCPU clock 
 disable master interupt 
 setup mmUVD_LMI_CTRL 
 enable LMI MC and UMC channels 
 unblock VCPU register access 
 enable master interrupt 
 force RBC into idle state 
 Stall DPG before WPTRRPTR reset 
 set the write pointer delay 
 set the wb address 
 program the RB_BASE for ring buffer 
 Initialize the ring buffer's read and write pointers 
 Unstall DPG 
 disable register anti-hang mechanism 
 set uvd status busy 
SW clock gating 
 enable VCPU clock 
 disable master interrupt 
 setup mmUVD_LMI_CTRL 
 setup mmUVD_MPC_CNTL 
 setup UVD_MPC_SET_MUXA0 
 setup UVD_MPC_SET_MUXB0 
 setup mmUVD_MPC_SET_MUX 
 VCN global tiling registers 
 enable LMI MC and UMC channels 
 unblock VCPU register access 
 enable master interrupt 
 clear the busy bit of VCN_STATUS 
 force RBC into idle state 
 program the RB_BASE for ring buffer 
 Initialize the ring buffer's read and write pointers 
	
	  1, write to vce_mmsch_vf_ctx_addr_lohi register with GPU mc addr of
	   memory descriptor location
 2, update vmid of descriptor 
 use domain0 for MM scheduler 
 3, notify mmsch about the size of this descriptor 
 4, set resp to zero 
	
	  5, kick off the initialization and wait until
	  VCE_MMSCH_VF_MAILBOX_RESP becomes non-zero
 mc resume
 force RBC into idle state 
 add end packet 
 refine header 
 Wait for power status to be 1 
 wait for read ptr to be equal to write ptr 
 disable dynamic power gating mode 
 wait for vcn idle 
 block LMI UMC channel 
 block VCPU register access 
 reset VCPU 
 disable VCPU clock 
 clear status 
 enable register anti-hang mechanism 
 pauseunpause if state is changed 
 pause DPG 
 wait for ACK 
 Stall DPG before WPTRRPTR reset 
 Restore 
 Unstall DPG 
  vcn_v2_5_dec_ring_get_rptr - get read pointer
  @ring: amdgpu_ring pointer
  Returns the current hardware read pointer
  vcn_v2_5_dec_ring_get_wptr - get write pointer
  @ring: amdgpu_ring pointer
  Returns the current hardware write pointer
  vcn_v2_5_dec_ring_set_wptr - set write pointer
  @ring: amdgpu_ring pointer
  Commits the write pointer to the hardware
 vcn_v2_0_dec_ring_emit_vm_flush 
 vcn_v2_0_dec_ring_emit_fence x2 vm fence 
 vcn_v2_0_dec_ring_emit_ib 
 vcn_v2_0_dec_ring_emit_vm_flush 
 vcn_v2_0_dec_ring_emit_fence x2 vm fence 
 vcn_v2_0_dec_ring_emit_ib 
  vcn_v2_5_enc_ring_get_rptr - get enc read pointer
  @ring: amdgpu_ring pointer
  Returns the current hardware enc read pointer
  vcn_v2_5_enc_ring_get_wptr - get enc write pointer
  @ring: amdgpu_ring pointer
  Returns the current hardware enc write pointer
  vcn_v2_5_enc_ring_set_wptr - set enc write pointer
  @ring: amdgpu_ring pointer
  Commits the enc write pointer to the hardware
 vcn_v2_0_enc_ring_emit_vm_flush 
 vcn_v2_0_enc_ring_emit_fence x2 vm fence 
 vcn_v2_0_enc_ring_insert_end 
 vcn_v2_0_enc_ring_emit_ib 
 vcn_v2_0_enc_ring_emit_vm_flush 
 vcn_v2_0_enc_ring_emit_fence x2 vm fence 
 vcn_v2_0_enc_ring_insert_end 
 vcn_v2_0_enc_ring_emit_ib 
 CHIP_ALDEBARAN 
 CHIP_ALDEBARAN 
  Copyright 2009 Jerome Glisse.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: Jerome Glisse
 Check error value now. The value can be overwritten when clean up.
 simple test, VRAM to GTT and GTT to VRAM 
 simple test, VRAM to VRAM 
 GTT to VRAM, buffer size sweep, powers of 2 
 VRAM to GTT, buffer size sweep, powers of 2 
 VRAM to VRAM, buffer size sweep, powers of 2 
 GTT to VRAM, buffer size sweep, common modes 
 VRAM to GTT, buffer size sweep, common modes 
 VRAM to VRAM, buffer size sweep, common modes 
 SPDX-License-Identifier: GPL-2.0 OR MIT
  Copyright 2016-2021 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: Christian König, Felix Kuehling
  DOC: mem_info_preempt_used
  The amdgpu driver provides a sysfs API for reporting current total amount of
  used preemptible memory.
  The file mem_info_preempt_used is used for this, and returns the current
  used size of the preemptible block, in bytes
  amdgpu_preempt_mgr_new - allocate a new node
  @man: TTM memory type manager
  @tbo: TTM BO we need this range for
  @place: placement flags and restrictions
  @mem: the resulting mem object
  Dummy, just count the space used without allocating resources or any limit.
  amdgpu_preempt_mgr_del - free ranges
  @man: TTM memory type manager
  @mem: TTM memory object
  Free the allocated GTT again.
  amdgpu_preempt_mgr_usage - return usage of PREEMPT domain
  @man: TTM memory type manager
  Return how many bytes are used in the GTT domain
  amdgpu_preempt_mgr_debug - dump VRAM table
  @man: TTM memory type manager
  @printer: DRM printer to use
  Dump the table content using printk.
  amdgpu_preempt_mgr_init - init PREEMPT manager and DRM MM
  @adev: amdgpu_device pointer
  Allocate and initialize the GTT manager.
  amdgpu_preempt_mgr_fini - free and destroy GTT manager
  @adev: amdgpu_device pointer
  Destroy and free the GTT manager, returns -EBUSY if ranges are still
  allocated inside it.
  Copyright 2014 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  amdgpu_ih_ring_init - initialize the IH state
  @adev: amdgpu_device pointer
  @ih: ih ring to initialize
  @ring_size: ring size to allocate
  @use_bus_addr: true when we can use dma_alloc_coherent
  Initializes the IH state and allocates a buffer
  for the IH ring buffer.
  Returns 0 for success, errors for failure.
 Align ring size 
		 add 8 bytes for the rptrwptr shadows and
		  add them to the end of the ring allocation.
  amdgpu_ih_ring_fini - tear down the IH state
  @adev: amdgpu_device pointer
  @ih: ih ring to tear down
  Tears down the IH state and frees buffer
  used for the IH ring buffer.
		 add 8 bytes for the rptrwptr shadows and
		  add them to the end of the ring allocation.
  amdgpu_ih_ring_write - write IV to the ring buffer
  @ih: ih ring to write to
  @iv: the iv to write
  @num_dw: size of the iv in dw
  Writes an IV to the ring buffer using the CPU and increment the wptr.
  Used for testing and delegating IVs to a software ring.
 Only commit the new wptr if we don't overflow 
 Waiter helper that checks current rptr matches or passes checkpoint wptr 
 rptr has wrapped. 
 check ring is empty to workaround missing wptr overflow flag 
  amdgpu_ih_wait_on_checkpoint_process - wait to process IVs up to checkpoint
  @adev: amdgpu_device pointer
  @ih: ih ring to process
  Used to ensure ring has processed IVs up to the checkpoint write pointer.
 Order wptr with rptr. 
 wptr has wrapped. 
  amdgpu_ih_process - interrupt handler
  @adev: amdgpu_device pointer
  @ih: ih ring to process
  Interrupt hander (VI), walk the IH ring.
  Returns irq process return code.
 Order reading of wptr vs. reading of IH ring data 
 make sure wptr hasn't changed while processing 
  amdgpu_ih_decode_iv_helper - decode an interrupt vector
  @adev: amdgpu_device pointer
  @ih: ih ring to process
  @entry: IV entry
  Decodes the interrupt vector at the current rptr
  position and also advance the position for for Vega10
  and later GPUs.
 wptrrptr are in bytes! 
 wptrrptr are in bytes! 
 SPDX-License-Identifier: MIT
 Copyright 2021 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: David Nieto
           Roy Sun
  \file amdgpu_ioc32.c
  32-bit ioctl compatibility routines for the AMDGPU DRM.
  \author Paul Mackerras <paulus@samba.org>
  Copyright (C) Paul Mackerras 2005
  All Rights Reserved.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice (including the next
  paragraph) shall be included in all copies or substantial portions of the
  Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE AUTHOR BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
  IN THE SOFTWARE.
  Copyright 2014 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 Total memory size in system memory and all GPU VRAM. Used to
  estimate worst case amount of memory to reserve for page tables
  amdgpu_doorbell_get_kfd_info - Report doorbell configuration required to
                                 setup amdkfd
  @adev: amdgpu_device pointer
  @aperture_base: output returning doorbell aperture base physical address
  @aperture_size: output returning doorbell aperture size in bytes
  @start_offset: output returning # of doorbell bytes reserved for amdgpu.
  amdgpu and amdkfd share the doorbell aperture. amdgpu sets it up,
  takes doorbells required for its own rings and reports the setup to amdkfd.
  amdgpu reserved doorbells are at the start of the doorbell aperture.
	
	  The first num_doorbells are used by amdgpu.
	  amdkfd takes whatever's left in the aperture.
		 this is going to have a few of the MSBs set that we need to
		  clear
		 According to linuxbitmap.h we shouldn't use bitmap_clear if
		  nbits is not compile time constant
 only first MEC can have compute queues 
		 Since SOC15, BIF starts to statically use the
		  lower 12 bits of doorbell addresses for routing
		  based on settings in registers like
		  SDMA0_DOORBELL_RANGE etc..
		  In order to route a doorbell to CP engine, the lower
		  12 bits of its address has to be outside the range
		  set for SDMA, VCN, and IH blocks.
 map the buffer 
 the sclk is in quantas of 10kHz 
 Can't handle non-graphics buffers 
 Can't handle buffers from different drivers 
 Only VRAM and GTT BOs are supported 
 num links returns 0 for indirect peers since indirect route is unknown. 
 Aldebaran xGMI DPM is defeatured so assume x16 x 25Gbps for bandwidth. 
 This works for NO_HWS. TODO: need to handle without knowing VMID 
 CPU MCA will handle page retirement if connected_to_cpu is 1 
  Copyright 2014 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  this peek_msg could only be called in IRQ routine becuase in IRQ routine
  RCV_MSG_VALID filed of BIF_BX_PF0_MAILBOX_CONTROL must already be set to 1
  by host.
  if called no in IRQ routine, this peek_msg cannot guaranteed to return the
  correct value since it doesn't return the RCV_DW0 under the case that
  RCV_MSG_VALID is set by host.
	 IMPORTANT:
	  clear TRN_MSG_VALID valid to clear host's RCV_MSG_ACK
	  and with host's RCV_MSG_ACK cleared hw automatically clear host's RCV_MSG_ACK
	  which lead to VF's TRN_MSG_ACK cleared, otherwise below xgpu_ai_poll_ack()
	  will return immediatly
 start to poll ack 
 start to check msg if request is idh_req_gpu_init_access 
 Retrieve checksum from mailbox2 
	 block amdgpu_gpu_recover till msg FLR COMPLETE received,
	  otherwise the mailbox msg will be ruinedreseted by
	  the VF FLR.
 Trigger recovery for world switch failure if no TDR 
		 READY_TO_ACCESS_GPU is fetched by kernel polling, IRQ can ignore
		  it byfar since that polling thread will handle it,
		  other msg like flr complete is not handled here.
  Copyright 2011 Red Hat Inc.
  All Rights Reserved.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sub license, andor sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
  THE COPYRIGHT HOLDERS, AUTHORS ANDOR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,
  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  USE OR OTHER DEALINGS IN THE SOFTWARE.
  The above copyright notice and this permission notice (including the
  next paragraph) shall be included in all copies or substantial portions
  of the Software.
  Authors:
     Jerome Glisse <glisse@freedesktop.org>
 Algorithm:
  We store the last allocated bo in "hole", we always try to allocate
  after the last allocated bo. Principle is that in a linear GPU ring
  progression was is after last is the oldest bo we allocated and thus
  the first one that should no longer be in use by the GPU.
  If it's not the case we skip over the bo after last to the closest
  done bo if such one exist. If none exist and we are not asked to
  block we report failure to allocate.
  If we are asked to block we wait on all the oldest fence of all
  rings. We just wait for any of those fence to complete.
  amdgpu_sa_event - Check if we can stop waiting
  @sa_manager: pointer to the sa_manager
  @size: number of bytes we want to allocate
  @align: alignment we need to match
  Check if either there is a fence we can wait for or
  enough free memory to satisfy the allocation directly
 if hole points to the end of the buffer 
 try again with its beginning 
 to handle wrap around we add sa_manager->size 
	 go over all fence list and try to find the closest sa_bo
	  of the current last
 limit the number of tries each ring gets 
 wrap around, pretend it's after 
 this sa bo is the closest one 
		 we knew that this one is signaled,
 see if we can skip over some allocations 
 if we have nothing to wait for block 
  Copyright 2015 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: AMD
	 call smu to POWER GATE ACP block
	  smu will
	  1. turn off the acp clock
	  2. power off the acp tiles
	  3. check and enter ulv state
	 call smu to UNGATE ACP block
	  smu will
	  1. exit ulv
	  2. turn on acp clock
	  3. power on acp tiles
 Continue to remove 
  acp_hw_init - start and test ACP block
  @handle: handle used to pass amdgpu_device pointer
 -ENODEV means board uses AZ rather than ACP 
 Assert Soft reset of ACP 
 Enable clock to ACP and wait until the clock is enabled 
 Deassert the SOFT RESET flags 
  acp_hw_fini - stop the hardware block
  @handle: handle used to pass amdgpu_device pointer
 return early if no ACP 
 Assert Soft reset of ACP 
 Disable ACP clock 
 power up on suspend 
 power down again on resume 
  Copyright 2016 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 add these here since we already include dce12 headers and these are for DCN 
	 Devices newer then VEGA1012 shall have these programming
 Returning 1 here also prevents sending the IV to the KFD 
 Process it onyl if it's the first fault for this address 
		 Delegate it to a different ring if the hardware hasn't
		  already done it.
		 Try to handle the recoverable page faults by filling page
		  tables
	
	  Issue a dummy read to wait for the status register to
	  be updated to avoid reading an incorrect value due to
	  the new fast GRBM interface.
  gmc_v9_0_use_invalidate_semaphore - judge whether to use semaphore
  @adev: amdgpu_device pointer
  @vmhub: vmhub type
  GART
  VMID 0 is the physical GPU addresses as used by the kernel.
  VMIDs 1-15 are used for userspace clients and are handled
  by the amdgpu vmhsa code.
  gmc_v9_0_flush_gpu_tlb - tlb flush with certain type
  @adev: amdgpu_device pointer
  @vmid: vm instance to flush
  @vmhub: which hub to flush
  @flush_type: the flush type
  Flush the TLB for the requested page table using certain type.
		 Vega20+XGMI caches PTEs in TC and TLB. Add a
		  heavy-weight TLB flush (type 2), which flushes
		  both. Due to a race condition with concurrent
		  memory accesses using the same TLB cache line, we
		  still need a second TLB flush after this.
	 This is necessary for a HW workaround under SRIOV as well
	  as GFXOFF under bare metal
	
	  It may lose gpuvm invalidate acknowldege state across power-gating
	  off cycle, add semaphore acquire before invalidation and semaphore
	  release after invalidation to avoid entering power gated state
	  to WA the Issue
 TODO: It needs to continue working on debugging with semaphore for GFXHUB as well. 
 a read return value of 1 means semaphore acuqire 
		
		  Issue a dummy read to wait for the ACK register to
		  be cleared to avoid a false ACK due to the new fast
		  GRBM interface.
 TODO: It needs to continue working on debugging with semaphore for GFXHUB as well. 
		
		  add semaphore release after invalidation,
		  write with 0 means semaphore release
  gmc_v9_0_flush_gpu_tlb_pasid - tlb flush via pasid
  @adev: amdgpu_device pointer
  @pasid: pasid to be flush
  @flush_type: the flush type
  @all_hub: flush all hubs
  Flush the TLB for the requested pasid.
		 Vega20+XGMI caches PTEs in TC and TLB. Add a
		  heavy-weight TLB flush (type 2), which flushes
		  both. Due to a race condition with concurrent
		  memory accesses using the same TLB cache line, we
		  still need a second TLB flush after this.
 2 dwords flush + 8 dwords fence 
 2 dwords flush + 8 dwords fence 
	
	  It may lose gpuvm invalidate acknowldege state across power-gating
	  off cycle, add semaphore acquire before invalidation and semaphore
	  release after invalidation to avoid entering power gated state
	  to WA the Issue
 TODO: It needs to continue working on debugging with semaphore for GFXHUB as well. 
 a read return value of 1 means semaphore acuqire 
 TODO: It needs to continue working on debugging with semaphore for GFXHUB as well. 
		
		  add semaphore release after invalidation,
		  write with 0 means semaphore release
 Do nothing because there's no lut register for mmhub1. 
  PTE format on VEGA 10:
  63:59 reserved
  58:57 mtype
  56 F
  55 L
  54 P
  53 SW
  52 T
  50:48 reserved
  47:12 4k physical page base address
  11:7 fragment
  6 write
  5 read
  4 exe
  3 Z
  2 snooped
  1 system
  0 valid
  PDE format on VEGA 10:
  63:59 block fragment size
  58:55 reserved
  54 P
  53:48 reserved
  47:6 physical base address of PD or PTE
  5:3 reserved
  2 C
  1 system
  0 valid
 Set the block fragment size 
 mmhub ras is not available 
 is UMC the right IP to check for MCA?  Maybe DF? 
 ARCT and VEGA20 don't have XGMI defined in their IP discovery tables 
	
	  Workaround performance drop issue with VBIOS enables partial
	  writes, while disables HBM ECC for vega10.
 add the xgmi offset of the physical node 
 base offset of vram pages 
 XXX: add the xgmi offset of the physical node? 
  gmc_v9_0_mc_init - initialize the memory controller driver params
  @adev: amdgpu_device pointer
  Look up the amount of vram, vram width, and decide how to place
  vram and gart within the GPU's physical address space.
  Returns 0 for success.
 size in MB on si 
	
	  AMD Accelerated Processing Platform (APP) supporting GPU-HOST xgmi
	  interface can use VRAM through here as it appears system reserved
	  memory in host address space.
	 
	  For APUs, VRAM is just the stolen system memory and can be accessed
	  directly.
	 
	  Otherwise, use the legacy Host Data Path (HDP) through PCIe BAR.
 check whether both host-gpu and gpu-gpu xgmi links exist 
 In case the PCI BAR is larger than the actual amount of vram 
 set the gart size 
 all engines support GPUVM 
 all engines support GPUVM 
 DCE SG support 
 DCE SG support 
 Initialize common gart structure 
  gmc_v9_0_save_registers - saves regs
  @adev: amdgpu_device pointer
  This saves potential register values that should be
  restored upon resume
		 For Vega10 SR-IOV, vram_width can't be read from ATOM as RAVEN,
		  and DF related registers is not readable, seems hardcord is the
		  only way to set the correct vram_width
 hbm memory channel size 
 vm_size is 128TB + 512GB for legacy 3-level page support 
		
		  To fulfill 4-level page support,
		  vm size is 256TB (48bit), maximum size of Vega10,
		  block size 512 (9bit)
 sriov restrict max_pfn below AMDGPU_GMC_HOLE 
 Keep the vm size same with Vega20 
 This interrupt is VMC page fault.
 interrupt sent to DF. 
	 Set the internal MC address mask
	  This is the max address of the GPU's
	  internal address space.
 48 bit MC 
 Memory manager 
	
	  number of VMs
	  VMID 0 is reserved for System
	  amdgpu graphicscompute will use VMIDs 1..n-1
	  amdkfd will use VMIDs n..15
	 
	  The first KFD VMID is 8 for GPUs with graphics, 3 for
	  compute-only GPUs. On compute-only GPUs that leaves 2 VMIDs
	  for video processing.
 TODO for renoir 
  gmc_v9_0_restore_registers - restores regs
  @adev: amdgpu_device pointer
  This restores register values, saved at suspend.
  gmc_v9_0_gart_enable - gart enable
  @adev: amdgpu_device pointer
 The sequence of these two function calls matters.
 Lockout access through VGA aperture
 disable VGA render 
 After HDP is initialized, flush HDP.
  gmc_v9_0_gart_disable - gart disable
  @adev: amdgpu_device pointer
  This disables all VM page table.
 full access mode, so don't touch any GMC register 
 MC is always ready in GMC v9.
 There is no need to wait for MC idle in GMC v9.
 XXX for emulation.
  Copyright 2020 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 for Vega20 register name change 
 HDP SRAM errors are uncorrectable ones (i.e. fatal errors) 
read back hdp ras counter to reset it to 0 
 AMD_CG_SUPPORT_HDP_LS 
  Copyright 2007-8 Advanced Micro Devices, Inc.
  Copyright 2008 Red Hat Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: Dave Airlie
           Alex Deucher
 bit banging i2c 
 switch the pads to ddc mode 
 clear the output pin values 
 set the pins to input 
 mask the gpio pins for software use 
 unmask the gpio pins for software use 
 read the value off the pin 
 read the value off the pin 
 set pin direction 
 set pin direction 
 don't add the mm_i2c bus unless hw_i2c is enabled 
 hw i2c using atom 
 set the amdgpu bit adapter 
 from VESA 
 Add the default buses 
 remove all the buses 
 Add additional buses 
 looks up bus based on id 
 ddc router switching 
 clockdata router switching 
  Copyright 2019 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 APE1 no longer exists on GFX9 
	
	  We have to assume that there is no outstanding mapping.
	  The ATC_VMID_PASID_MAPPING_UPDATE_STATUS bit could be 0 because
	  a mapping is in progress or because a mapping finished
	  and the SW cleared it.
	  So the protocol is to always wait & clear.
 TODO: uncomment this code when the hardware support is ready. 
 Mapping vmid to pasid also for IH block 
 TODO - RING0 form of field is obsolete, seems to date back to SI
  but still works
		 On gfx10, mmSDMA1_xxx registers are defined NOT based
		  on SDMA1 base address (dw 0x1860) but based on SDMA0
		  base address (dw 0x1260). Therefore use mmSDMA0_RLC0_RB_CNTL
		  instead of mmSDMA1_RLC0_RB_CNTL for the base address calc
		  below
 HQD registers extend from CP_MQD_BASE_ADDR to CP_HQD_EOP_WPTR_MEM. 
 Activate doorbell logic before triggering WPTR poll. 
		 Don't read wptr with get_user because the user
		  context may not be accessible (if this function
		  runs in a work queue). Instead trigger a one-shot
		  polling read from memory in the CP. This assumes
		  that wptr is GPU-accessible in the queue's VMID via
		  ATC or SVM. WPTR==RPTR before starting the poll so
		  the CP starts fetching new commands from the right
		  place.
		 
		  Guessing a 64-bit WPTR from a 32-bit RPTR is a bit
		  tricky. Assume that the queue didn't overflow. The
		  number of valid bits in the 32-bit RPTR depends on
		  the queue size. The remaining bits are taken from
		  the saved 64-bit WPTR. If the WPTR wrapped, add the
		  queue size.
 Start the EOP fetcher 
 Queue_Sel 
 VMID 
queue_type: normal compute queue 
 alloc format: all_on_one_pipe 
 engine_sel: hiq 
 num_queues: must be 1 
 Is this still needed? 
	 Workaround: If IQ timer is active and the wait time is close to or
	  equal to 0, dequeueing is not safe. Wait until either the wait time
	  is larger or timer is cleared. Also, ensure that IQ_REQ_PEND is
	  cleared before continuing. Also, ensure wait times are set to at
	  least 0x3.
 wait for 500 usecs at maximum 
 SEM-rearm is safe 
			 Wait time 3 is safe for CP, but our MMIO readwrite
			  time is close to 1 microsecond, so check for 10 to
			  leave more buffer room
 SDMA is on gfxhub as well for Navi1 series 
	
	  Program TBA registers
	
	  Program TMA registers
  Copyright 2018 Advanced Micro Devices, Inc.
  All Rights Reserved.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sub license, andor sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
  THE COPYRIGHT HOLDERS, AUTHORS ANDOR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,
  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  USE OR OTHER DEALINGS IN THE SOFTWARE.
  The above copyright notice and this permission notice (including the
  next paragraph) shall be included in all copies or substantial portions
  of the Software.
  amdgpu_gmc_pdb0_alloc - allocate vram for pdb0
  @adev: amdgpu_device pointer
  Allocate video memory for pdb0 and map it for CPU access
  Returns 0 for success, error for failure.
  amdgpu_gmc_get_pde_for_bo - get the PDE for a BO
  @bo: the BO to get the PDE for
  @level: the level in the PD hirarchy
  @addr: resulting addr
  @flags: resulting flags
  Get the address and flags to be used for a PDE (Page Directory Entry).
  amdgpu_gmc_pd_addr - return the address of the root directory
 TODO: move that into ASIC specific code 
  amdgpu_gmc_set_pte_pde - update the page tables using CPU
  @adev: amdgpu_device pointer
  @cpu_pt_addr: cpu address of the page table
  @gpu_page_idx: entry in the page table to update
  @addr: dst addr to write into ptepde
  @flags: access flags
  Update the page tables using CPU.
	
	  The following is for PTE only. GART does not have PDEs.
  amdgpu_gmc_agp_addr - return the address in the AGP address space
  @bo: TTM BO which needs the address, must be in GTT domain
  Tries to figure out how to access the BO through the AGP aperture. Returns
  AMDGPU_BO_INVALID_OFFSET if that is not possible.
  amdgpu_gmc_vram_location - try to find VRAM location
  @adev: amdgpu device structure holding all necessary information
  @mc: memory controller structure holding memory information
  @base: base address at which to put VRAM
  Function will try to place VRAM at base address provided
  as parameter.
 amdgpu_gmc_sysvm_location - place vram and gart in sysvm aperture
  @adev: amdgpu device structure holding all necessary information
  @mc: memory controller structure holding memory information
  This function is only used if use GART for FB translation. In such
  case, we use sysvm aperture (vmid0 page tables) for both vram
  and gart (aka system memory) access.
  GPUVM (and our organization of vmid0 page tables) require sysvm
  aperture to be placed at a location aligned with 8 times of native
  page size. For example, if vm_context0_cntl.page_table_block_size
  is 12, then native page size is 8G (2M2^12), sysvm should start
  with a 64G aligned address. For simplicity, we just put sysvm at
  address 0. So vram start at address 0 and gart is right after vram.
  amdgpu_gmc_gart_location - try to find GART location
  @adev: amdgpu device structure holding all necessary information
  @mc: memory controller structure holding memory information
  Function will place try to place GART before or after VRAM.
  If GART size is bigger than space left then we ajust GART size.
  Thus function will never fails.
To avoid the hole, limit the max mc address to AMDGPU_GMC_HOLE_START
	 VCE doesn't like it when BOs cross a 4GB segment, so align
	  the GART base on a 4GB boundary as well.
  amdgpu_gmc_agp_location - try to find AGP location
  @adev: amdgpu device structure holding all necessary information
  @mc: memory controller structure holding memory information
  Function will place try to find a place for the AGP BAR in the MC address
  space.
  AGP BAR will be assigned the largest available hole in the address space.
  Should be called after VRAM and GART locations are setup.
  amdgpu_gmc_fault_key - get hask key from vm fault address and pasid
  @addr: 48 bit physical address, page aligned (36 significant bits)
  @pasid: 16 bit process address space identifier
  amdgpu_gmc_filter_faults - filter VM faults
  @adev: amdgpu device structure
  @addr: address of the VM fault
  @pasid: PASID of the process causing the fault
  @timestamp: timestamp of the fault
  Returns:
  True if the fault was filtered and should not be processed further.
  False if the fault is a new one and needs to be handled.
 If we don't have space left in the ring buffer return immediately 
 Try to find the fault in the hash 
 Check if the entry was reused 
 Add the fault to the ring 
 And update the hash 
  amdgpu_gmc_filter_faults_remove - remove address from VM faults filter
  @adev: amdgpu device structure
  @addr: address of the VM fault
  @pasid: PASID of the process causing the fault
  Remove the address from fault filter, then future vm fault on this address
  will pass to retry fault handler to recover.
	
	  The latest engine allocation on gfx910 is:
	  Engine 2, 3: firmware
	  Engine 0, 1, 4~16: amdgpu ring,
	                     subject to change when ring number changes
	  Engine 17: Gart flushes
  amdgpu_gmc_tmz_set -- check and set if a device supports TMZ
  @adev: amdgpu_device pointer
  Check and set if an the device @adev supports Trusted Memory
  Zones (TMZ).
		 Don't enable it by default yet.
  amdgpu_gmc_noretry_set -- set per asic noretry defaults
  @adev: amdgpu_device pointer
  Set a per asic default for the no-retry parameter.
		
		  noretry = 0 will cause kfd page fault tests fail
		  for some ASICs, so set default to 1 for these ASICs.
		 Raven currently has issues with noretry
		  regardless of what we decide for other
		  asics, we should leave raven with
		  noretry = 0 until we root cause the
		  issues.
		 
		  default this to 0 for now, but we may want
		  to change this in the future for certain
		  GPUs as it can increase performance in
		  certain cases.
	
	  TODO:
	  Currently there is a bug where some memory client outside
	  of the driver writes to first 8M of VRAM on S3 resume,
	  this overrides GART which by default gets placed in first 8M and
	  causes VM_FAULTS once GTT is accessed.
	  Keep the stolen memory reservation until the while this is not solved.
 set to 0 if the pre-OS buffer uses up most of vram 
  amdgpu_gmc_init_pdb0 - initialize PDB0
  @adev: amdgpu_device pointer
  This function is only used when GART page table is used
  for FB address translatioin. In such a case, we construct
  a 2-level system VM page table: PDB0->PTB, to cover both
  VRAM of the hive and system memory.
  PDB0 is static, initialized once on driver initialization.
  The first n entries of PDB0 are used as PTE by setting
  P bit to 1, pointing to VRAM. The n+1'th entry points
  to a big PTB covering system memory.
TODO it is UC. explore NCRW?
	 Each PDE0 (used as PTE) covers (2^vmid0_page_table_block_size)2M
	 The first n PDE0 entries are used as PTE,
	  pointing to vram
	 The n+1'th PDE0 entry points to a huge
	  PTB who has more than 512 entries each
	  pointing to a 4K system page
 Requires gart_ptb_gpu_pa to be 4K aligned 
  amdgpu_gmc_vram_mc2pa - calculate vram buffer's physical address from MC
  address
  @adev: amdgpu_device pointer
  @mc_addr: MC address of buffer
  amdgpu_gmc_vram_pa - calculate vram buffer object's physical address from
  GPU's view
  @adev: amdgpu_device pointer
  @bo: amdgpu buffer object
  amdgpu_gmc_vram_cpu_pa - calculate vram buffer object's physical address
  from CPU's view
  @adev: amdgpu_device pointer
  @bo: amdgpu buffer object
	 Some ASICs need to reserve a region of video memory to avoid access
  Copyright 2018 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  These are nbio v7_4_1 registers mask. Temporarily define these here since
  nbio v7_4_1 header is incomplete.
 Don't use.  Firmware uses this bit internally 
BIF_MMSCH1_DOORBELL_RANGE
BIF_MMSCH1_DOORBELL_ALDE_RANGE
		
		  These registers address of SDMA2~7 is not consecutive
		  from SDMA0~1. Need plus 4 dwords offset.
		 
		    BIF_SDMA0_DOORBELL_RANGE:  0x3bc0
		    BIF_SDMA1_DOORBELL_RANGE:  0x3bc4
		    BIF_SDMA2_DOORBELL_RANGE:  0x3bd8
+		    BIF_SDMA4_DOORBELL_RANGE:
+		      ARCTURUS:  0x3be0
+		      ALDEBARAN: 0x3be4
TODO: Add support for v7.4
 AMD_CG_SUPPORT_BIF_MGCG 
 AMD_CG_SUPPORT_BIF_LS 
 setup interrupt control 
	 INTERRUPT_CNTL__IH_DUMMY_RD_OVERRIDE_MASK=0 - dummy read disabled with msi, enabled without msi
	  INTERRUPT_CNTL__IH_DUMMY_RD_OVERRIDE_MASK=1 - dummy read controlled by IH_DUMMY_RD_EN
 INTERRUPT_CNTL__IH_REQ_NONSNOOP_EN_MASK=1 if ring is in non-cacheable memory, e.g., vram 
 driver has to clear the interrupt status when bif ring is disabled 
			
			  clear error status after ras_controller_intr
			  according to hw team and count ue number
			  for query
 logging on error cnt and printing for awareness 
		 ras_controller_int is dedicated for nbif ras error,
		  not the global interrupt for sync flood
 driver has to clear the interrupt status when bif ring is disabled 
	 The ras_controller_irq enablement should be done in psp bl when it
	  tries to enable ras feature. Driver only need to set the correct interrupt
	  vector for bare-metal and sriov use case respectively
		 set interrupt vector select bit to 0 to select
	 By design, the ih cookie for ras_controller_irq should be written
	  to BIFring instead of general iv ring. However, due to known bif ring
	  hw bug, it has to be disabled. There is no chance the process function
	  will be involked. Just left it as a dummy one.
	 The ras_controller_irq enablement should be done in psp bl when it
	  tries to enable ras feature. Driver only need to set the correct interrupt
	  vector for bare-metal and sriov use case respectively
		 set interrupt vector select bit to 0 to select
	 By design, the ih cookie for err_event_athub_irq should be written
	  to BIFring instead of general iv ring. However, due to known bif ring
	  hw bug, it has to be disabled. There is no chance the process function
	  will be involked. Just left it as a dummy one.
 init the irq funcs 
 register ras controller interrupt 
 init the irq funcs 
 register ras err event athub interrupt 
 clear error status register 
 clear parity fatal error indication field 
 clear interrupt status register 
  Copyright 2018 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 same as vg20
  DOC: AMDGPU XGMI Support
  XGMI is a high speed interconnect that joins multiple GPU cards
  into a homogeneous memory space that is organized by a collective
  hive ID and individual node IDs, both of which are 64-bit numbers.
  The file xgmi_device_id contains the unique per GPU device ID and
  is stored in the sysclassdrmcard${cardno}device directory.
  Inside the device directory a sub-directory 'xgmi_hive_info' is
  created which contains the hive ID and the list of nodes.
  The hive ID is stored in:
    sysclassdrmcard${cardno}devicexgmi_hive_infoxgmi_hive_id
  The node information is stored in numbered directories:
    sysclassdrmcard${cardno}devicexgmi_hive_infonode${nodeno}xgmi_device_id
  Each device has their own xgmi_hive_info direction with a mirror
  set of node sub-directories.
  The XGMI memory space is built by contiguously adding the power of
  two padded VRAM space from each node to each other.
 Create xgmi device id file 
 Create xgmi error file 
 Create sysfs link to hive info folder on the first device 
 Create sysfs link form the hive folder to yourself 
 initialize new hive if not exist 
	
	  hive pstate on boot is high in vega20 so we have to go to low
	  pstate on after boot.
 fw bug so temporarily disable pstate switching 
	
	  Vega20 only needs single peer to request pstate high for the hive to
	  go high but all peers must request pstate low for the hive to go low
 Each psp need to set the latest topology 
  NOTE psp_xgmi_node_info.num_hops layout is as follows:
  num_hops[7:6] = link type (0 = xGMI2, 1 = xGMI3, 23 = reserved)
  num_hops[5:3] = reserved
  num_hops[2:0] = number of hops
  Devices that support extended data require the entire hive to initialize with
  the shared memory buffer flag set.
  Hive locks and conditions apply - see amdgpu_xgmi_add_device
 update node list for other device in the hive 
 get latest topology info for each device from psp 
 To do : continue with some node failed or disable the whole hive 
 get topology again for hives that support extended data 
 initialize the hive to get extended data.  
 get the extended data. 
 initialize the hive to get non-extended data for the next round. 
 Remove the hive from global hive list 
		 query xgmi pcs error status,
		 query wafl pcs error status,
 check xgmi pcs error 
 check wafl pcs error 
 check xgmi pcs error 
 check wafl pcs error 
 check xgmi23 pcs error 
 check xgmi3x16 pcs error 
 check wafl pcs error 
  Copyright 2021 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 enabledisable ROM CG is not supported on APU 
 CGTT_ROM_CLK_CTRL0 is not available for APU 
  Copyright 2014 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 Block CPU access 
 blackout the MC 
 wait for the MC to settle 
 unblackout the MC 
 allow CPU access 
 this memory configuration requires special firmware 
 reset the engine and set to writable 
 load mc io regs 
 load the MC ucode 
 put the engine back into the active state 
 wait for training to complete 
 Initialize HDP 
 Lockout access through VGA aperture
 disable VGA render 
 Update configuration 
 size in MB on si 
 set the gart size 
 no MM engines 
 UVD, VCE do not support GPUVM 
 UVD, VCE do not support GPUVM 
 UVD, VCE do not support GPUVM 
 UVD, VCE do not support GPUVM 
 write new base address 
 bits 0-15 are the VM contexts0-15 
   +  gmc_v8_0_set_prt - set PRT VM fault
   + 
   +  @adev: amdgpu_device pointer
   +  @enable: enabledisable VM fault handling for PRT
 Setup TLB control 
 Setup L2 cache 
 setup context0 
 empty context1-15 
 set vm size, must be a multiple of 4 
	 Assign the pt base to something valid for now; the pts used for
	  the VMs are determined by the application and setup and assigned
	  on the fly in the vm part of radeon_gart.c
 enable context1-15 
	unsigned i;
	for (i = 1; i < 16; ++i) {
		uint32_t reg;
		if (i < 8)
			reg = VM_CONTEXT0_PAGE_TABLE_BASE_ADDR + i ;
		else
			reg = VM_CONTEXT8_PAGE_TABLE_BASE_ADDR + (i - 8);
		adev->vm_manager.saved_table_addr[i] = RREG32(reg);
 Disable all tables 
 Setup TLB control 
 Setup L2 cache 
static const u32 mc_cg_registers[] = {
	MC_HUB_MISC_HUB_CG,
	MC_HUB_MISC_SIP_CG,
	MC_HUB_MISC_VM_CG,
	MC_XPB_CLK_GAT,
	ATC_MISC_CG,
	MC_CITF_MISC_WR_CG,
	MC_CITF_MISC_RD_CG,
	MC_CITF_MISC_VM_CG,
	VM_L2_CG,
};
static const u32 mc_cg_ls_en[] = {
	MC_HUB_MISC_HUB_CG__MEM_LS_ENABLE_MASK,
	MC_HUB_MISC_SIP_CG__MEM_LS_ENABLE_MASK,
	MC_HUB_MISC_VM_CG__MEM_LS_ENABLE_MASK,
	MC_XPB_CLK_GAT__MEM_LS_ENABLE_MASK,
	ATC_MISC_CG__MEM_LS_ENABLE_MASK,
	MC_CITF_MISC_WR_CG__MEM_LS_ENABLE_MASK,
	MC_CITF_MISC_RD_CG__MEM_LS_ENABLE_MASK,
	MC_CITF_MISC_VM_CG__MEM_LS_ENABLE_MASK,
	VM_L2_CG__MEM_LS_ENABLE_MASK,
};
static const u32 mc_cg_en[] = {
	MC_HUB_MISC_HUB_CG__ENABLE_MASK,
	MC_HUB_MISC_SIP_CG__ENABLE_MASK,
	MC_HUB_MISC_VM_CG__ENABLE_MASK,
	MC_XPB_CLK_GAT__ENABLE_MASK,
	ATC_MISC_CG__ENABLE_MASK,
	MC_CITF_MISC_WR_CG__ENABLE_MASK,
	MC_CITF_MISC_RD_CG__ENABLE_MASK,
	MC_CITF_MISC_VM_CG__ENABLE_MASK,
	VM_L2_CG__ENABLE_MASK,
};
static void gmc_v6_0_enable_mc_ls(struct amdgpu_device adev,
				  bool enable)
{
	int i;
	u32 orig, data;
	for (i = 0; i < ARRAY_SIZE(mc_cg_registers); i++) {
		orig = data = RREG32(mc_cg_registers[i]);
		if (enable && (adev->cg_flags & AMDGPU_CG_SUPPORT_MC_LS))
			data |= mc_cg_ls_en[i];
		else
			data &= ~mc_cg_ls_en[i];
		if (data != orig)
			WREG32(mc_cg_registers[i], data);
	}
}
static void gmc_v6_0_enable_mc_mgcg(struct amdgpu_device adev,
				    bool enable)
{
	int i;
	u32 orig, data;
	for (i = 0; i < ARRAY_SIZE(mc_cg_registers); i++) {
		orig = data = RREG32(mc_cg_registers[i]);
		if (enable && (adev->cg_flags & AMDGPU_CG_SUPPORT_MC_MGCG))
			data |= mc_cg_en[i];
		else
			data &= ~mc_cg_en[i];
		if (data != orig)
			WREG32(mc_cg_registers[i], data);
	}
}
static void gmc_v6_0_enable_bif_mgls(struct amdgpu_device adev,
				     bool enable)
{
	u32 orig, data;
	orig = data = RREG32_PCIE(ixPCIE_CNTL2);
	if (enable && (adev->cg_flags & AMDGPU_CG_SUPPORT_BIF_LS)) {
		data = REG_SET_FIELD(data, PCIE_CNTL2, SLV_MEM_LS_EN, 1);
		data = REG_SET_FIELD(data, PCIE_CNTL2, MST_MEM_LS_EN, 1);
		data = REG_SET_FIELD(data, PCIE_CNTL2, REPLAY_MEM_LS_EN, 1);
		data = REG_SET_FIELD(data, PCIE_CNTL2, SLV_MEM_AGGRESSIVE_LS_EN, 1);
	} else {
		data = REG_SET_FIELD(data, PCIE_CNTL2, SLV_MEM_LS_EN, 0);
		data = REG_SET_FIELD(data, PCIE_CNTL2, MST_MEM_LS_EN, 0);
		data = REG_SET_FIELD(data, PCIE_CNTL2, REPLAY_MEM_LS_EN, 0);
		data = REG_SET_FIELD(data, PCIE_CNTL2, SLV_MEM_AGGRESSIVE_LS_EN, 0);
	}
	if (orig != data)
		WREG32_PCIE(ixPCIE_CNTL2, data);
}
static void gmc_v6_0_enable_hdp_mgcg(struct amdgpu_device adev,
				     bool enable)
{
	u32 orig, data;
	orig = data = RREG32(mmHDP_HOST_PATH_CNTL);
	if (enable && (adev->cg_flags & AMDGPU_CG_SUPPORT_HDP_MGCG))
		data = REG_SET_FIELD(data, HDP_HOST_PATH_CNTL, CLOCK_GATING_DIS, 0);
	else
		data = REG_SET_FIELD(data, HDP_HOST_PATH_CNTL, CLOCK_GATING_DIS, 1);
	if (orig != data)
		WREG32(mmHDP_HOST_PATH_CNTL, data);
}
static void gmc_v6_0_enable_hdp_ls(struct amdgpu_device adev,
				   bool enable)
{
	u32 orig, data;
	orig = data = RREG32(mmHDP_MEM_POWER_LS);
	if (enable && (adev->cg_flags & AMDGPU_CG_SUPPORT_HDP_LS))
		data = REG_SET_FIELD(data, HDP_MEM_POWER_LS, LS_ENABLE, 1);
	else
		data = REG_SET_FIELD(data, HDP_MEM_POWER_LS, LS_ENABLE, 0);
	if (orig != data)
		WREG32(mmHDP_MEM_POWER_LS, data);
}
	
	  number of VMs
	  VMID 0 is reserved for System
	  amdgpu graphicscompute will use VMIDs 1-7
	  amdkfd will use VMIDs 8-15
 base offset of vram pages 
  Copyright 2019 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 Don't use.  Firmware uses this bit internally 
	
	  guest vm gets 0xffffffff when reading RCC_DEV0_EPF0_STRAP0,
	  therefore we force rev_id to 0 (which is the default value)
 setup interrupt control 
	
	  INTERRUPT_CNTL__IH_DUMMY_RD_OVERRIDE_MASK=0 - dummy read disabled with msi, enabled without msi
	  INTERRUPT_CNTL__IH_DUMMY_RD_OVERRIDE_MASK=1 - dummy read controlled by IH_DUMMY_RD_EN
 INTERRUPT_CNTL__IH_REQ_NONSNOOP_EN_MASK=1 if ring is in non-cacheable memory, e.g., vram 
 AMD_CG_SUPPORT_BIF_MGCG 
 AMD_CG_SUPPORT_BIF_LS 
 off by default, no gains over L1
 1=1us, 9=1ms
 4ms
 Disable ASPM L0sL1 first 
 Disbale ASPM L1 
 Disable ASPM TxL0s 
 Disable ACPI L1 
	
	  Program PCIE_LC_CNTL6.LC_SPC_MODE_8GT to 0x2 (4 symbols per clock data)
	  if link_width is 0x3 (x4)
	 Clear Interrupt Status
  Copyright 2019 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 1st: program mmUVD_LMI_JRBC_RB_MEM_RD_64BIT_BAR_LOW
 2nd: program mmUVD_LMI_JRBC_RB_MEM_RD_64BIT_BAR_HIGH
 3rd to 5th: issue MEM_READ commands
 6th: program mmUVD_JRBC_RB_CNTL register to enable NO_FETCH and RPTR write ability
 7th: program mmUVD_JRBC_RB_REF_DATA
 8th: issue conditional register read mmUVD_JRBC_RB_CNTL
9th to 21st: insert no-op
22nd: reset mmUVD_JRBC_RB_RPTR
23rd: program mmUVD_JRBC_RB_CNTL to disable no_fetch
  jpeg_v1_0_decode_ring_get_rptr - get read pointer
  @ring: amdgpu_ring pointer
  Returns the current hardware read pointer
  jpeg_v1_0_decode_ring_get_wptr - get write pointer
  @ring: amdgpu_ring pointer
  Returns the current hardware write pointer
  jpeg_v1_0_decode_ring_set_wptr - set write pointer
  @ring: amdgpu_ring pointer
  Commits the write pointer to the hardware
  jpeg_v1_0_decode_ring_insert_start - insert a start command
  @ring: amdgpu_ring pointer
  Write a start command to the ring.
  jpeg_v1_0_decode_ring_insert_end - insert a end command
  @ring: amdgpu_ring pointer
  Write a end command to the ring.
  jpeg_v1_0_decode_ring_emit_fence - emit an fence & trap command
  @ring: amdgpu_ring pointer
  @addr: address
  @seq: sequence number
  @flags: fence related flags
  Write a fence and a trap command to the ring.
 emit trap 
  jpeg_v1_0_decode_ring_emit_ib - execute indirect buffer
  @ring: amdgpu_ring pointer
  @job: job to retrieve vmid from
  @ib: indirect buffer to execute
  @flags: unused
  Write ring commands to execute the indirect buffer.
 wait for register write 
  jpeg_v1_0_early_init - set function pointers
  @handle: amdgpu_device pointer
  Set ring and irq function pointers
  jpeg_v1_0_sw_init - sw init for JPEG block
  @handle: amdgpu_device pointer
 JPEG TRAP 
  jpeg_v1_0_sw_fini - sw fini for JPEG block
  @handle: amdgpu_device pointer
  JPEG free up sw allocation
  jpeg_v1_0_start - start JPEG block
  @adev: amdgpu_device pointer
  @mode: SPG or DPG mode
  Setup and start the JPEG block
 initialize wptr 
 copy patch commands to the jpeg ring 
 hdp invalidate  flush 
 jpeg_v1_0_decode_ring_emit_vm_flush 
 jpeg_v1_0_decode_ring_emit_fence x2 vm fence 
 jpeg_v1_0_decode_ring_emit_ib 
  Copyright 2019 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 Navi 
 Navi1x 
 Sienna Cichlid 
 SRIOV Sienna Cichlid, not const since data is controlled by host 
 Beige Goby
 Yellow Carp
  Indirect registers accessor
 todo 
 todo 
 APU vbios image is part of sbios image 
 set rom index to 0 
 read out the rom data 
 some asics don't have SDMA1 
 disable BM 
 wait for asic to come out of reset 
 todo 
 todo 
 todo 
	 Check sOS sign of life register to confirm sys driver and sOS
	  are already been loaded.
	 TODO
	  dummy implement for pcie_replay_count sysfs interface
 TODO: will add them during VCN v2 implementation 
	 TODO: split the GC and PG flags based on the relevant IP version for which
	  they are relevant.
		 guest vm gets 0xffffffff when reading RCC_DEV0_EPF0_STRAP0,
		  as a consequence, the rev_id and external_rev_id are wrong.
		  workaround it by hardcoding rev_id to 0 (default value).
 hypervisor control CG and PG enablement 
 FIXME: not supported yet 
 enable pcie gen23 link 
 enable aspm 
 setup nbio registers 
	 remap HDP registers to a hole in mmio space,
	  for the purpose of expose those registers
	  to process space
 enable the doorbell aperture 
 disable the doorbell aperture 
 TODO 
  Copyright 2020 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 enabledisable ROM CG is not supported on APU 
 CGTT_ROM_CLK_CTRL0 is not available for APU 
  smuio_v13_0_get_die_id - query die id from FCH.
  @adev: amdgpu device pointer
  Returns die id
  smuio_v13_0_get_socket_id - query socket id from FCH
  @adev: amdgpu device pointer
  Returns socket id
  smuio_v13_0_is_host_gpu_xgmi_supported - detect xgmi interface between cpu and gpus.
  @adev: amdgpu device pointer
  Returns true on success or false otherwise.
	 data[4:0]
	  bit 0 == 0 host-gpu interface is PCIE
	  bit 0 == 1 host-gpu interface is Alternate Protocal
	  for AMD, this is XGMI
  Copyright 2015 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 Enable pflip interrupts 
 Disable pflip interrupts 
  dce_v6_0_page_flip - pageflip callback.
  @adev: amdgpu_device pointer
  @crtc_id: crtc to cleanup pageflip on
  @crtc_base: new address of the crtc (GPU MC address)
  @async: asynchronous flip
  Does the actual pageflip (evergreen+).
  During vblank we take the crtc lock and wait for the update_pending
  bit to go high, when it does, we release the lock, and allow the
  double buffered update to take place.
  Returns the current update pending status.
 flip at hsync for async, default is vsync 
 update pitch 
 update the scanout addresses 
 post the write 
  dce_v6_0_hpd_sense - hpd sense callback.
  @adev: amdgpu_device pointer
  @hpd: hpd (hotplug detect) pin
  Checks if a digital monitor is connected (evergreen+).
  Returns true if connected, false if not connected.
  dce_v6_0_hpd_set_polarity - hpd set polarity callback.
  @adev: amdgpu_device pointer
  @hpd: hpd (hotplug detect) pin
  Set the polarity of the hpd pin (evergreen+).
  dce_v6_0_hpd_init - hpd setup callback.
  @adev: amdgpu_device pointer
  Setup the hpd pins used by the card (evergreen+).
  Enable the pin, set the polarity, and enable the hpd interrupts.
			 don't try to enable hpd on eDP or LVDS avoid breaking the
			  aux dp channel on imac and help (but not completely fix)
			  https:bugzilla.redhat.comshow_bug.cgi?id=726143
			  also avoid interrupt storms during dpms.
  dce_v6_0_hpd_fini - hpd tear down callback.
  @adev: amdgpu_device pointer
  Tear down the hpd pins used by the card (evergreen+).
  Disable the hpd interrupts.
Disable VGA render and enabled crtc, if has DCE engine
Disable crtc
 LVDS FMT is set up by atom 
 XXX sort out optimal dither settings 
 XXX sort out optimal dither settings 
 not needed 
  si_get_number_of_dram_channels - get the number of dram channels
  @adev: amdgpu_device pointer
  Look up the number of video ram channels (CIK).
  Used for display watermark bandwidth calculations
  Returns the number of dram channels
 number of dram channels 
 bandwidth per dram data pin in kHz 
 engine clock in kHz 
 display clock in kHz 
 viewport width 
 active display time in ns 
 blank time in ns 
 mode is interlaced 
 vertical scale ratio 
 number of active crtcs 
 bytes per pixel display + overlay 
 line buffer allocated to pipe 
 vertical scaler taps 
  dce_v6_0_dram_bandwidth - get the dram bandwidth
  @wm: watermark calculation data
  Calculate the raw dram bandwidth (CIK).
  Used for display watermark bandwidth calculations
  Returns the dram bandwidth in MBytess
 Calculate raw DRAM Bandwidth 
 0.7 
  dce_v6_0_dram_bandwidth_for_display - get the dram bandwidth for display
  @wm: watermark calculation data
  Calculate the dram bandwidth used for display (CIK).
  Used for display watermark bandwidth calculations
  Returns the dram bandwidth for display in MBytess
 Calculate DRAM Bandwidth and the part allocated to display. 
 0.3 to 0.7 
 XXX worse case value 0.3 
  dce_v6_0_data_return_bandwidth - get the data return bandwidth
  @wm: watermark calculation data
  Calculate the data return bandwidth used for display (CIK).
  Used for display watermark bandwidth calculations
  Returns the data return bandwidth in MBytess
 Calculate the display Data return Bandwidth 
 0.8 
  dce_v6_0_dmif_request_bandwidth - get the dmif bandwidth
  @wm: watermark calculation data
  Calculate the dmif bandwidth used for display (CIK).
  Used for display watermark bandwidth calculations
  Returns the dmif bandwidth in MBytess
 Calculate the DMIF Request Bandwidth 
 0.8 
  dce_v6_0_available_bandwidth - get the min available bandwidth
  @wm: watermark calculation data
  Calculate the min available bandwidth used for display (CIK).
  Used for display watermark bandwidth calculations
  Returns the min available bandwidth in MBytess
 Calculate the Available bandwidth. Display can use this temporarily but not in average. 
  dce_v6_0_average_bandwidth - get the average available bandwidth
  @wm: watermark calculation data
  Calculate the average available bandwidth used for display (CIK).
  Used for display watermark bandwidth calculations
  Returns the average available bandwidth in MBytess
	 Calculate the display mode Average Bandwidth
	  DisplayMode should contain the source and destination dimensions,
	  timing, etc.
  dce_v6_0_latency_watermark - get the latency watermark
  @wm: watermark calculation data
  Calculate the latency watermark (CIK).
  Used for display watermark bandwidth calculations
  Returns the latency watermark in ns
 First calculate the latency in ns 
 2000 ns. 
 dc pipe latency 
  dce_v6_0_average_bandwidth_vs_dram_bandwidth_for_display - check
  average and available dram bandwidth
  @wm: watermark calculation data
  Check if the display average bandwidth fits in the display
  dram bandwidth (CIK).
  Used for display watermark bandwidth calculations
  Returns true if the display fits, false if not.
  dce_v6_0_average_bandwidth_vs_available_bandwidth - check
  average and available bandwidth
  @wm: watermark calculation data
  Check if the display average bandwidth fits in the display
  available bandwidth (CIK).
  Used for display watermark bandwidth calculations
  Returns true if the display fits, false if not.
  dce_v6_0_check_latency_hiding - check latency hiding
  @wm: watermark calculation data
  Check latency hiding (CIK).
  Used for display watermark bandwidth calculations
  Returns true if the display fits, false if not.
  dce_v6_0_program_watermarks - program display watermarks
  @adev: amdgpu_device pointer
  @amdgpu_crtc: the selected display controller
  @lb_size: line buffer size
  @num_heads: number of display controllers in use
  Calculate and program the display watermarks for the
  selected display controller (CIK).
 watermark for high clocks 
 XXX: get this from fb config 
 watermark for low clocks 
 XXX: get this from fb config 
 set for high clocks 
 set for low clocks 
 possibly force display priority to high 
 should really do this at mode validation time... 
 select wm A 
 select wm B 
 restore original selection 
 write the priority marks 
 save values for DPM 
 Save number of lines the linebuffer leads before the scanout 
 watermark setup 
	
	  Line Buffer Setup
	  There are 3 line buffers, each one shared by 2 display controllers.
	  mmDC_LB_MEMORY_SPLIT controls how that line buffer is shared between
	  the display controllers.  The paritioning is done via one of four
	  preset allocations specified in bits 21:20:
	   0 - half lb
	   2 - whole lb, other crtc must be disabled
	 this can get tricky if we have two large displays on a paired group
	  of crtcs.  Ideally for multiple large displays we'd assign them to
	  non-linked crtcs for maximum line buffer allocation.
 12 
 whole 
 controller not enabled, so no lb used 
  dce_v6_0_bandwidth_update - program display watermarks
  @adev: amdgpu_device pointer
  Calculate and program the display watermarks and line
  buffer allocation (CIK).
 program the speaker allocation 
 stereo 
 anything other than 0 
	
	  Two dtos: generally use dto0 for hdmi, dto1 for dp.
	  Express [24MHz  target pixel clock] as an exact rational
	  number (coefficient of two integer numbers.  DCCG_AUDIO_DTOx_PHASE
	  is the numerator, DCCG_AUDIO_DTOx_MODULE is the denominator
 disable audio before setting up hw 
 enable audio after setting up hw 
 Silent, r600_hdmi_enable will raise WARN for us 
 DCE6 has audio blocks tied to DIG encoders 
 no fb bound 
	 If atomic, assume fb object is pinned & idle & fenced and
	  just update base pointers
 Greater 8 bpc fb needs to bypass hw-lut to retain precision 
 Greater 8 bpc fb needs to bypass hw-lut to retain precision 
	 Make sure surface address is updated at vertical blank rather than
	  horizontal blank
	
	  The LUT only has 256 slots for indexing by a 8 bpc fb. Bypass the LUT
	  for > 8 bpc scanout to avoid truncation of fb indices to 8 msb's, to
	  retain the full precision throughout the pipeline.
 set pageflip to happen anywhere in vblank interval 
 Bytes per pixel may have changed 
 XXX match this to the depth of the crtc fmt block, move to modeset? 
  dce_v6_0_pick_pll - Allocate a PPLL for use by the crtc.
  @crtc: drm crtc
  Returns the PPLL (Pixel PLL) to be used by the crtc.  For DP monitors
  a single PPLL can be used for all DP crtcsencoders.  For non-DP
  monitors a dedicated PPLL must be used.  If a particular board has
  an external DP PLL, return ATOM_PPLL_INVALID to skip PLL programming
  as there is no need to program the PLL itself.  If we are not able to
  allocate a PLL, return ATOM_PPLL_INVALID to skip PLL programming to
  avoid messing up an existing monitor.
 skip PPLL programming if using ext clock 
 use the same PPLL for all monitors with the same clock 
  PPLL1, and PPLL2 
 avivo cursor are offset into the total surface 
 turn off cursor 
 Make sure VBLANK and PFLIP interrupts are still enabled 
 adjust pm to dpms 
 disable crtc pair power gating before programming 
 disable the GRPH 
			 one other crtc is using this pll don't turn
			  off the pll
 disable the ppll 
 update the hw version fpr dpm 
 assign the encoder to the amdgpu crtc to avoid repeated lookups later 
 pick pll 
 if we can't get a PPLL for a non-DP encoder, fail 
 HPD hotplug 
 allocate crtcs 
 setup afmt 
 disable vga render 
 init dig PHYs, disp eng pll 
 initialize hpd 
 turn on the BL 
 vblank 
 vline 
 IRQ could occur when in initial stage 
 page flip completed. clean up 
 wakeup usersapce 
 need to call this here rather than in prepare() since we need some crtc info 
 set scaler clears this on some chips 
 select the clockdata port if it uses a router 
 turn eDP panel on for mode set 
 this is needed for the pllss setup to work correctly in some cases 
 set up the FMT blocks 
 need to call this here as we need the crtc set up 
 these are handled by the primary encoders 
 no detect for TMDSLVDS yet 
 see if we already added it 
 add a new one 
 these are handled by the primary encoders 
  Copyright 2020 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 HW has more IP blocks,  only initialized the block needed by our driver  
  Copyright 2021 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 TODO: Check if handler exists? 
  Copyright 2019 Advanced Micro Devices, Inc.
  All Rights Reserved.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sub license, andor sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
  THE COPYRIGHT HOLDERS, AUTHORS ANDOR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,
  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  USE OR OTHER DEALINGS IN THE SOFTWARE.
  The above copyright notice and this permission notice (including the
  next paragraph) shall be included in all copies or substantial portions
  of the Software.
  Copyright 2018 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 address block 
 navi10 reg offset define 
 memory training timeout define 
 For large FW files the time to complete can be very long 
 Read USB-PD from LFB 
		 Wait for bootloader to signify that is
	 Check tOS sign of life register to confirm sys driver and sOS
	  are already been loaded.
 Copy PSP KDB binary to memory 
 Provide the PSP KDB to bootloader 
	 Check tOS sign of life register to confirm sys driver and sOS
	  are already been loaded.
 Copy PSP SPL binary to memory 
 Provide the PSP SPL to bootloader 
	 Check sOS sign of life register to confirm sys driver and sOS
	  are already been loaded.
 Copy PSP System Driver binary to memory 
 Provide the sys driver to bootloader 
 there might be handshake issue with hardware which needs delay 
	 Check sOS sign of life register to confirm sys driver and sOS
	  are already been loaded.
 Copy Secure OS binary to PSP memory 
 Provide the PSP secure OS to bootloader 
 there might be handshake issue with hardware which needs delay 
 allocate 4k Page of Local Frame Buffer memory for ring 
 Write the ring destroy command
 there might be handshake issue with hardware which needs delay 
 Wait for response flag (bit 31) 
 Write low address of the ring to C2PMSG_102 
 Write high address of the ring to C2PMSG_103 
 Write the ring initialization command to C2PMSG_101 
 there might be handshake issue with hardware which needs delay 
 Wait for response flag (bit 31) in C2PMSG_101 
 Wait for sOS ready for ring creation 
 Write low address of the ring to C2PMSG_69 
 Write high address of the ring to C2PMSG_70 
 Write size of ring to C2PMSG_71 
 Write the ring initialization command to C2PMSG_64 
 there might be handshake issue with hardware which needs delay 
 Wait for response flag (bit 31) in C2PMSG_64 
send the mode 1 reset command
  save and restore process
		
		  Long training will encroach a certain amount on the bottom of VRAM;
		  save the content from the bottom of VRAM to system memory
		  before training, and restore it after training to avoid
		  VRAM corruption.
	
	  LFB address which is aligned to 1MB address and has to be
	  right-shifted by 20 so that LFB address can be passed on a 32-bit C2P
	  register
 Fireup interrupt so PSP can pick up the address 
 FW load takes very long time 
  Copyright 2014 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 BPM SERDES CMD 
 BPM Register Address
 EnableDisable CGLS 
 ONOFF CGLS: shall be controlled by RLC FW 
 SetClear CGCG Override 
 SetClear MGCG Override 
 SetClear FGCG Override 
	
	  Support for MCBPVirtualization in combination with chained IBs is
	  formal released on feature version #46
 we need account JT in 
 init clear state block 
 JT + GDS 
 init spm vmid with 0xf 
 take ownership of the relevant compute queues 
 CU_GROUP_COUNT=1 
 VGPRS=15 (64 logical VGPRs), SGPRS=1 (16 SGPRs), BULKY=1 
 CU_GROUP_COUNT=1 
 SGPRS=9 (80 GPRS) 
 SGPRS=9 (80 GPRS) 
 only supported on CZ 
 bail if the compute ring is not ready 
 allocate an indirect buffer to put the commands in 
 load the compute shaders 
 init the ib length to 0 
 VGPR 
 write the register state for the compute dispatch 
 write the shader start address: mmCOMPUTE_PGM_LO, mmCOMPUTE_PGM_HI 
 write dispatch packet 
 x 
 y 
 z 
 write CS partial flush packet 
 SGPR1 
 write the register state for the compute dispatch 
 write the shader start address: mmCOMPUTE_PGM_LO, mmCOMPUTE_PGM_HI 
 write dispatch packet 
 x 
 y 
 z 
 write CS partial flush packet 
 SGPR2 
 write the register state for the compute dispatch 
 write the shader start address: mmCOMPUTE_PGM_LO, mmCOMPUTE_PGM_HI 
 write dispatch packet 
 x 
 y 
 z 
 write CS partial flush packet 
 shedule the ib on the ring 
 wait for the GPU to finish processing the IB 
 read back registers to clear the counters 
 Get memory bank mapping mode. 
 Validate settings in case only one DIMM installed. 
 If DIMM Addr map is 8GB, ROW size should be 2KB. Otherwise 1KB. 
 If ROW size(DIMM1) != ROW size(DMIMM0), ROW size should be larger one. 
 fix up row size 
 mec0 is me1 
 type-2 packets are deprecated on MEC, use type-3 instead 
 EOP Event 
 Privileged reg 
 Privileged inst 
 Add CP EDCECC irq  
 SQ interrupts. 
 set up the gfx ring 
 no gfx doorbells on iceland 
 set up the compute queues - allocate horizontally across pipes 
 create MQD for all compute queues as well as KIQ for SRIOV case 
 GRBM_GFX_INDEX has a different offset on VI 
 GRBM_GFX_INDEX has a different offset on VI 
 cache the values for userspace 
  gfx_v8_0_init_compute_vmid - gart enable
  @adev: amdgpu_device pointer
  Initialize compute vmid sh_mem registers
	
	  Configure apertures:
	  LDS:         0x60000000'00000000 - 0x60000001'00000000 (4GB)
	  Scratch:     0x60000001'00000000 - 0x60000002'00000000 (4GB)
	  GPUVM:       0x60010000'00000000 - 0x60020000'00000000 (1TB)
 CP and shaders 
	 Initialize all compute VMIDs to have no GDS, GWS, or OA
	
	  Initialize all compute and user-gfx VMIDs to have no GDS, GWS, or OA
	  access. Compute VMIDs should be enabled by FW for target VMIDs,
	  the driver can enable them for graphics. VMID0 should maintain
	  access so that HWS firmware can saverestore entries.
 XXX SH_MEM regs 
 where to put LDS, scratch, GPUVM in FSA64 space 
 CP and shaders 
	
	  making sure that the following register writes will be broadcasted
	  to all the shaders
 csib 
 look for the matching indice 
 save and restore list 
 indirect list 
 starting offsets starts 
 unique indices 
 carrizo do enable cp interrupt after cp inited 
 begin clear state 
 context control state 
 pa_sc_raster_configpa_sc_raster_config1 
 end clear state 
 clear state 
 init the CP 
 clear state buffer 
 init the CE partitions 
 no gfx doorbells on iceland 
 Set the write pointer delay 
 set the RB to use vmid 0 
 Set ring buffer size 
 Initialize the ring buffer's read and write pointers 
 set the wb address wether it's enabled or not 
 start the ring 
 KIQ functions 
 tell RLC which is KIQ queue 
		 This situation may be hit in the future if a new HW
		  generation exposes more than 64 queues. If so, the
 set resources 
 vmid_mask:0 queue_type:0 (KIQ) 
 queue mask lo 
 queue mask hi 
 gws mask lo 
 gws mask hi 
 oac mask 
 gds heap base:0, gds heap size:0 
 map queues 
 Q_sel:0, vmid:0, vidmem: 1, engine:0, num_Q:1
 doorbell 
 set the EOP size, register value is 2^(EOP_SIZE+1) dwords 
 enable doorbell? 
 set the pointer to the MQD 
 set MQD vmid to 0 
 set the pointer to the HQD, this is similar CP_RB0_BASE_HI 
 set up the HQD, this is similar to CP_RB0_CNTL 
 set the wb address whether it's enabled or not 
 only used if CP_PQ_WPTR_POLL_CNTL.CP_PQ_WPTR_POLL_CNTL__EN_MASK=1 
 enable the doorbell if requested 
 reset read and write pointers, similar to CP_RB0_WPTR_RPTR 
 set the vmid for the queue 
 set MTYPE 
 defaults 
 set static priority for a queuering 
	 map_queues packet doesn't need activate the queue,
	  so only kiq need set this field.
 HQD registers extend from mmCP_MQD_BASE_ADDR to mmCP_HQD_ERROR 
 disable wptr polling 
 program all HQD registers 
	 Tonga errata: EOP RPTRWPTR should be left unmodified.
	  This is safe since EOP RPTR==WPTR for any inactive HQD
	  on ASICs that do not support context-save.
	  EOP writesreads can start anywhere in the ring.
 activate the HQD 
 for GPU_RESET case 
 reset MQD to a clean status 
 reset ring buffer 
 for GPU_RESET case 
 reset MQD to a clean status 
 reset ring buffer 
 enable doorbells 
 collect all the ring_tests here, gfx, kiq, compute 
 Q_sel: 0, vmid: 0, engine: 0, num_Q: 1 
 RESET_QUEUES 
 disable KCQ to avoid CPC touch memory not valid anymore 
 GRBM_STATUS 
 GRBM_STATUS2 
 SRBM_STATUS 
 stop the rlc 
 Disable GFX parsingprefetching 
 Disable MEC parsingprefetching 
 Wait a little for things to settle down 
  gfx_v8_0_get_gpu_clock_counter - return GPU clock counter snapshot
  @adev: amdgpu_device pointer
  Fetches a GPU clock counter snapshot.
  Returns the 64 bit clock counter snapshot.
 GDS Base 
 GDS Size 
 GWS 
 OA 
 type 0 wave data 
 requires IBs so do in late init after IB pool is initialized 
 Send msg to SMU via Powerplay 
 Read any GFX register to wake up GFX. 
 AMD_CG_SUPPORT_GFX_MGCG 
 AMD_CG_SUPPORT_GFX_CGLG 
 AMD_CG_SUPPORT_GFX_CGLS 
 AMD_CG_SUPPORT_GFX_CGTS 
 AMD_CG_SUPPORT_GFX_CGTS_LS 
 AMD_CG_SUPPORT_GFX_RLC_LS 
 AMD_CG_SUPPORT_GFX_CP_LS 
 wait for RLC_SAFE_MODE 
 It is disabled by HW by default 
 1 - RLC memory Light sleep 
 3 - RLC_CGTT_MGCG_OVERRIDE 
 4 - wait for RLC_SERDES_CU_MASTER & RLC_SERDES_NONCU_MASTER idle 
 5 - clear mgcg override 
 6 - Enable CGTS(Tree Shade) MGCG MGLS 
 7 - wait for RLC_SERDES_CU_MASTER & RLC_SERDES_NONCU_MASTER idle 
 1 - MGCG_OVERRIDE[0] for CP and MGCG_OVERRIDE[1] for RLC 
 2 - disable MGLS in RLC 
 3 - disable MGLS in CP 
 4 - Disable CGTS(Tree Shade) MGCG and MGLS 
 5 - wait for RLC_SERDES_CU_MASTER & RLC_SERDES_NONCU_MASTER idle 
 6 - set mgcg override 
 7- wait for RLC_SERDES_CU_MASTER & RLC_SERDES_NONCU_MASTER idle 
 : wait for RLC_SERDES_CU_MASTER & RLC_SERDES_NONCU_MASTER idle 
 2 - clear cgcg override 
 wait for RLC_SERDES_CU_MASTER & RLC_SERDES_NONCU_MASTER idle 
 3 - write cmd to set CGLS 
 4 - enable cgcg 
 enable cgls
		 5 enable cntx_empty_int_enablecntx_busy_int_enable
		  Cmp_busyGFX_Idle interrupts
 disable cntx_empty_int_enable & GFX Idle interrupt 
 TEST CGCG 
 read gfx register to wake up cgcg 
 wait for RLC_SERDES_CU_MASTER & RLC_SERDES_NONCU_MASTER idle 
 write cmd to Set CGCG Overrride 
 wait for RLC_SERDES_CU_MASTER & RLC_SERDES_NONCU_MASTER idle 
 write cmd to Clear CGLS 
 disable cgcg, cgls should be disabled too. 
 enable interrupts again for PG 
		 CGCGCGLS should be enabled after MGCGMGLSTS(CGLS)
		  ===  MGCG + MGLS + TS(CGLS) ===
		 CGCGCGLS should be disabled before MGCGMGLSTS(CGLS)
		  ===  CGCG + CGLS ===
 XXX check if swapping is necessary on BE 
 XXX check if swapping is necessary on BE 
 pfp 
 write, wait, write 
 == 
 poll interval 
	 Currently, there is a high possibility to get wave ID mismatch
	  between ME and GDS, leading to a hw deadlock, because ME generates
	  different wave IDs than the GDS expects. This situation happens
	  randomly when at least 5 compute pipes use GDS ordered append.
	  The wave IDs generated by ME are also wrong after suspendresume.
	  Those are probably bugs somewhere else in the kernel driver.
	 
	  Writing GDS_COMPUTE_MAX_WAVE_ID resets wave ID counters in ME and
	  GDS to 0 for this ring (mepipe).
	 Workaround for cache flush problems. First send a dummy EOP
	  event down the pipe with seq one below.
	 Then send the real EOP event down the pipe:
 memory 
 equal 
 pfp or me 
 poll interval 
 wait for the invalidate to complete 
 wait 
 always 
 me 
 ref 
 mask 
 poll interval 
 compute doesn't have PFP 
 sync PFP to ME, otherwise we might get invalid PFP reads 
 XXX check if swapping is necessary on BE 
 RELEASE_MEM - flush caches, send int 
 we only allocate 32bit for each seq wb address 
 write fence seq to the "addr" 
 set register to trigger INT 
 src_id is 178 
 set load_enable otherwise this package is just NOPs 
 set load_global_config & load_global_uconfig 
 set load_cs_sh_regs 
 set load_per_context_state & load_gfx_sh_regs for GFX 
 set load_ce_ram if preamble presented 
		 still load_ce_ram if this is the first time preamble presented
		  although there is no context switch happens.
 discard following DWs if cond_exec_gpu_addr==0 
 patch dummy value later 
 src: register
 dst: memory 
 write confirm 
 no inc addr 
	
	  amdgpu controls only the first MEC. That's why this function only
	  handles the setting of interrupts for this specific MEC. All other
	  pipes' interrupts are set by amdkfd.
			 Per-queue interrupt is supported for MEC starting from VI.
			   The interrupt can only be enableddisabled per pipe instead of per queue.
			
			  This function can be called either directly from ISR
			  or from BH in which case we can access SQ_EDC_INFO
			  instance
	
	  Try to submit work so SQ_EDC_INFO can be accessed from
	  BH. If previous work submission hasn't finished yet
	  just print whatever info is possible directly from the ISR.
 CP_COHER_CNTL 
 CP_COHER_SIZE 
 CP_COHER_BASE 
 poll interval 
 CP_COHER_CNTL 
 CP_COHER_SIZE 
 CP_COHER_SIZE_HI 
 CP_COHER_BASE 
 CP_COHER_BASE_HI 
 poll interval 
 mmSPI_WCL_PIPE_PERCENT_CS[0-7]_DEFAULT values are same 
	 mmSPI_WCL_PIPE_PERCENT_GFX is 7 bit multiplier register to limit
	  number of gfx waves. Setting 5 bit will make sure gfx only gets
	  around 25% of gpu resources.
	 Restrict waves for normallow priority compute queues as well
	  to get best QoS for high priority compute jobs.
	 
	  amdgpu controls only 1st ME(0-3 CS pipes).
 maximum 215dw if count 16 IBs in 
 COND_EXEC 
 PIPELINE_SYNC 
 VM_FLUSH 
 FENCE for VM_FLUSH 
 GDS switch 
		4 +  double SWITCH_BUFFER,
		       the first COND_EXEC jump to the place just
 COND_EXEC 
	HDP_flush 
	VGT_flush 
	CE_META 
	DE_META 
 CNTX_CTRL 
 HDP_INVL 
 FENCE x2 
 SWITCH_BUFFER 
 SURFACE_SYNC 
 gfx_v8_0_ring_emit_ib_gfx 
 gfx_v8_0_ring_emit_gds_switch 
 gfx_v8_0_ring_emit_hdp_flush 
 hdp_invalidate 
 gfx_v8_0_ring_emit_pipeline_sync 
 gfx_v8_0_ring_emit_vm_flush 
 gfx_v8_0_ring_emit_fence_compute x3 for user fence, vm fence 
 gfx_v8_0_emit_mem_sync_compute 
 gfx_v8_0_emit_wave_limit for updating mmSPI_WCL_PIPE_PERCENT_GFX register 
 for updating 3 mmSPI_WCL_PIPE_PERCENT_CS registers 
 gfx_v8_0_ring_emit_ib_compute 
 gfx_v8_0_ring_emit_gds_switch 
 gfx_v8_0_ring_emit_hdp_flush 
 hdp_invalidate 
 gfx_v8_0_ring_emit_pipeline_sync 
 gfx_v8_0_ring_emit_vm_flush 
 gfx_v8_0_ring_emit_fence_kiq x3 for user fence, vm fence 
 gfx_v8_0_ring_emit_ib_compute 
 init asci gds info 
  Copyright 2018 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 inject address is 52 bits 
 typical ECC bad page rate is 1 bad page per 100MB VRAM 
 ascii string, but commands are not matched. 
 only ue and ce errors are supported 
  DOC: AMDGPU RAS debugfs control interface
  The control interface accepts struct ras_debug_if which has two members.
  First member: ras_debug_if::head or ras_debug_if::inject.
  head is used to indicate which IP block will be under control.
  head has four members, they are block, type, sub_block_index, name.
  block: which IP will be under control.
  type: what kind of error will be enableddisabledinjected.
  sub_block_index: some IPs have subcomponets. say, GFX, sDMA.
  name: the name of IP.
  inject has two more members than head, they are address, value.
  As their names indicate, inject operation will write the
  value to the address.
  The second member: struct ras_debug_if::op.
  It has three kinds of operations.
  - 0: disable RAS on the block. Take ::head as its data.
  - 1: enable RAS on the block. Take ::head as its data.
  - 2: inject errors on the block. Take ::inject as its data.
  How to use the interface?
  In a program
  Copy the struct ras_debug_if in your code and initialize it.
  Write the struct to the control interface.
  From shell
  .. code-block:: bash
 	echo "disable <block>" > syskerneldebugdri<N>rasras_ctrl
 	echo "enable  <block> <error>" > syskerneldebugdri<N>rasras_ctrl
 	echo "inject  <block> <error> <sub-block> <address> <value> > syskerneldebugdri<N>rasras_ctrl
  Where N, is the card which you want to affect.
  "disable" requires only the block.
  "enable" requires the block and error type.
  "inject" requires the block, error type, address, and value.
  The block is one of: umc, sdma, gfx, etc.
 	see ras_block_string[] for details
  The error type is one of: ue, ce, where,
 	ue is multi-uncorrectable
 	ce is single-correctable
  The sub-block is a the sub-block index, pass 0 if there is no sub-block.
  The address and value are hexadecimal numbers, leading 0x is optional.
  For instance,
  .. code-block:: bash
 	echo inject umc ue 0x0 0x0 0x0 > syskerneldebugdri0rasras_ctrl
 	echo inject umc ce 0 0 0 > syskerneldebugdri0rasras_ctrl
 	echo disable umc > syskerneldebugdri0rasras_ctrl
  How to check the result of the operation?
  To check disableenable, see "ras" features at,
  sysclassdrmcard[012...]devicerasfeatures
  To check inject, see the corresponding error count at,
  sysclassdrmcard[012...]deviceras[gfx|sdma|umc|...]_err_count
  .. note::
 	Operations are only allowed on blocks which are supported.
 	Check the "ras" mask at sysmoduleamdgpuparametersras_mask
 	to see which blocks support RAS on a particular asic.
 umc ceue error injection for a bad page is not allowed 
 data.inject.address is offset instead of absolute gpu address 
  DOC: AMDGPU RAS debugfs EEPROM table reset interface
  Some boards contain an EEPROM which is used to persistently store a list of
  bad pages which experiences ECC errors in vram.  This interface provides
  a way to reset the EEPROM, e.g., after testing error injection.
  Usage:
  .. code-block:: bash
 	echo 1 > ..rasras_eeprom_reset
  will reset EEPROM table to 0 entries.
		 Something was written to EEPROM.
  DOC: AMDGPU RAS sysfs Error Count Interface
  It allows the user to read the error count for each IP block on the gpu through
  sysclassdrmcard[012...]deviceras[gfxsdma...]_err_count
  It outputs the multiple lines which report the uncorrected (ue) and corrected
  (ce) error counts.
  The format of one line is below,
  [ce|ue]: count
  Example:
  .. code-block:: bash
 	ue: 0
 	ce: 1
 obj begin 
 make one obj and return it. 
 already exist. return obj? 
 return an obj equal to head, or the first when head is NULL 
 obj end 
 feature ctl begin 
  if obj is not created, then create one.
  set feature enable flag.
	 If hardware does not support ras, then do not create obj.
	  But if hardware support ras, we can create the obj.
	  Ras framework checks con->hw_supported to see if it need do
	  corresponding initialization.
	  IP checks con->support to see if it need disable ras.
 In case we create obj somewhere else 
 wrapper of psp_ras_enable_features 
 Do not enable if it is not allowed. 
 setup the obj 
 Only used in device probe stage and called only once. 
			 There is no harm to issue a ras TA cmd regardless of
			  the currecnt ras state.
			  If current state == target state, it will do nothing
			  But sometimes it requests driver to reset and repost
			  with error code -EAGAIN.
			 With old ras TA, we might fail to enable ras.
			  Log it and just setup the object.
			  TODO need remove this WA in the future.
 setup the object then issue a ras TA disable cmd.
 gfx block ras dsiable cmd must send to ras-ta 
 clean gfx block ras features flag 
		 bypass psp.
		  aka just release the obj and corresponding flags
			
			  bypass psp. vbios enable ras for us.
			  so just create the obj
			
			  bypass psp. vbios enable ras for us.
			  so just create the obj
 feature ctl end 
 queryinjectcure begin 
		 umc query_ras_error_address is also responsible for clearing
		  error status
 Trigger XGMIWAFL error 
 wrapper of psp_ras_trigger_error 
 Calculate XGMI relative offset 
  amdgpu_ras_query_error_count -- Get error counts of all IPs
  adev: pointer to AMD GPU device
  ce_count: pointer to an integer to be set to the count of correctible errors.
  ue_count: pointer to an integer to be set to the count of uncorrectible
  errors.
  If set, @ce_count or @ue_count, count and return the corresponding
  error counts in those integer pointers. Return 0 if the device
  supports RAS. Return -EOPNOTSUPP if the device doesn't support RAS.
	 Don't count since no reporting.
 queryinjectcure end 
 sysfs begin 
  DOC: AMDGPU RAS sysfs gpu_vram_bad_pages Interface
  It allows user to read the bad pages of vram on the gpu through
  sysclassdrmcard[012...]devicerasgpu_vram_bad_pages
  It outputs multiple lines, and each line stands for one gpu page.
  The format of one line is below,
  gpu pfn : gpu page size : flags
  gpu pfn and gpu page size are printed in hex format.
  flags can be one of below character,
  R: reserved, this gpu page is reserved and not able to use.
  P: pending for reserve, this gpu page is marked as bad, will be reserved
  in next window of page_reserve.
  F: unable to reserve. this gpu page can't be reserved due to some reasons.
  Examples:
  .. code-block:: bash
 	0x00000001 : 0x00001000 : R
 	0x00000002 : 0x00001000 : P
 sysfs end 
  DOC: AMDGPU RAS Reboot Behavior for Unrecoverable Errors
  Normally when there is an uncorrectable error, the driver will reset
  the GPU to recover.  However, in the event of an unrecoverable error,
  the driver provides an interface to reboot the system automatically
  in that event.
  The following file in debugfs provides that interface:
  syskerneldebugdri[012...]rasauto_reboot
  Usage:
  .. code-block:: bash
 	echo true > ...rasauto_reboot
 debugfs begin 
	
	  After one uncorrectable error happens, usually GPU recovery will
	  be scheduled. But due to the known problem in GPU recovery failing
	  to bring GPU back, below interface provides one direct way to
	  user to reboot system automatically in such case within
	  ERREVENT_ATHUB_INTERRUPT generated. Normal GPU recovery routine
	  will never be called.
	
	  User could set this not to clean up hardware's error count register
	  of RAS IPs during ras recovery.
	
	  it won't be called in resume path, no need to check
	  suspend and gpu reset status
 debugfs end 
 ras fs 
 add features entry 
 add bad_page_features entry 
 ras fs end 
 ih begin 
				 Let IP handle its data, maybe we need get the output
				  from the callback to udpate the error typecount, etc
				 ue will trigger an interrupt, and in that case
				  we need do a reset to recovery the whole system.
				  But leave IP do that recovery, here we just dispatch
				  the error.
					 these counts could be left as 0 if
					  some blocks do not count error number
 Might be overflow... 
 in case we registe the IH before enable ras feature 
 add the callback.etc 
 the ring can store 64 iv entries. 
 IH is ready 
 ih end 
 traversal all IPs except NBIO to query error counter 
		
		  PCIE_BIF IP has one different isr by ras controller
		  interrupt, the specific ras counter query will be
		  done in that isr. So skip such block from common
		  sync flood interrupt isr calling.
 Parse RdRspStatus and WrRspStatus 
	
	  Only two block need to query readwrite
	  RspStatus at current state
 recovery begin 
 return 0 on success.
  caller need free bps.
 Build list of devices to query RAS related errors 
 allocrealloc bps array 
 it deal with vram only. 
  write error record array to eeprom, the function should be
  protected by recovery_lock
 only new entries are saved 
  read error record array in eeprom and reserve enough space for
  storing new bad pages
 no bad page record, skip eeprom access 
  check if an address belongs to bad page
  Note: this check is only for umc block
	
	  Justification of value bad_page_cnt_threshold in ras structure
	 
	  Generally, -1 <= amdgpu_bad_page_threshold <= max record length
	  in eeprom, and introduce two scenarios accordingly.
	 
	  Bad page retirement enablement:
	     - If amdgpu_bad_page_threshold = -1,
	       bad_page_cnt_threshold = typical value by formula.
	 
	     - When the value from user is 0 < amdgpu_bad_page_threshold <
	       max record length in eeprom, use it directly.
	 
	  Bad page retirement disablement:
	     - If amdgpu_bad_page_threshold = 0, bad page retirement
	       functionality is disabled, and bad_page_cnt_threshold will
	       take no effect.
	 Allow access to RAS EEPROM via debugfs, when the ASIC
	  supports RAS and debugfs is enabled, but when
	  adev->ras_enabled is unset, i.e. when "ras_enable"
	  module parameter is set to 0.
	 Todo: During test the SMU might fail to read the eeprom through I2C
	  when the GPU is pending on XGMI reset during probe time
	  (Mostly after second bus reset), skip it now
	
	  This calling fails when exc_err_limit is true or
	  ret != 0.
	
	  Except error threshold exceeding case, other failure cases in this
	  function would not fail amdgpu driver init.
 recovery_init failed to init it, fini is useless 
 recovery end 
  this is workaround for vega20 workstation sku,
  force enable gfx ras, ignore vbios gfx ras flag
  due to GC EDC can not write
  check hardware's ras ability which will be saved in hw_supported.
  if hardware does not support ras, we can skip some ras initializtion and
  forbid some ras operations from IP.
  if software itself, say boot parameter, limit the ras ability. We still
  need allow IP do some limited operations, like disable. In such case,
  we have to initialize ras as normal. but need check if operation is
  allowed or not in each function.
		 driver only manages a few IP blocks RAS feature
 hw_supported needs to be aligned with RAS block mask. 
	 Cache new values.
		 set gfx block ras context feature for VEGA20 Gaming
		  send ras disable cmd to ras ta during ras late init.
 Might need get this flag from vbios. 
	 initialize nbio ras function ahead of any other
	  ras functions so hardware fatal error interrupt
 nbio ras is not available 
 Init poison supported flag, the default value is false 
 Only poison is set in both DF and UMC, we can support it 
 helper function to handle common stuff in ip late init phase 
 disable RAS feature per IP block if it is not supported 
			 in resume phase, if fail to enable ras,
 check for errors on warm reset edc persisant supported ASIC 
 in resume phase, no need to create ras fs node 
	 Those are the cached values at init.
 helper function to remove ras fs node and interrupt handler 
 do some init work after IP late init as dependence.
  and it runs in resumegpu resetbooting up cases.
 clean ras context for VEGA20 Gaming after send ras disable cmd 
		 Set up all other IPs which are not implemented. There is a
		  tricky thing that IP's actual ras error type should be
		  MULTI_UNCORRECTABLE, but as driver does not handle it, so
		  ERROR_NONE make sense anyway.
		 We enable ras on all hw_supported block, but as boot
		  parameter might disable some of them and one or more IP has
		  not implemented yet. So we disable them on behalf.
 there should be no any reference. 
 Make sure all ras objects are disabled. 
 do some fini work before IP fini as dependence 
 Need disable ras on all IPs here before ip [hwsw]fini 
	
	  If the error was generated in UMC_V2, which belongs to GPU UMCs,
	  and error occurred in DramECC (Extended error code = 0) then only
	  process the error, else bail out.
	
	  If it is correctable error, return.
	
	  GPU Id is offset by GPU_ID_OFFSET in MCA_IPID_UMC register.
	
	  If it is uncorrectable error, then find out UMC instance and
	  channel index.
	
	  Translate UMC channel address to Physical address
	
	  Add the adev to the mce_adev_list.
	  During mode2 reset, amdgpu device is temporarily
	  removed from the mgpu_info list which can cause
	  page retirement to fail.
	  Use this list instead of mgpu_info to find the amdgpu
	  device on which the UMC error was reported.
	
	  Register the x86 notifier only once
	  with MCE subsystem.
  Copyright 2014-2018 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 APE1 no longer exists on GFX9 
	
	  We have to assume that there is no outstanding mapping.
	  The ATC_VMID_PASID_MAPPING_UPDATE_STATUS bit could be 0 because
	  a mapping is in progress or because a mapping finished
	  and the SW cleared it.
	  So the protocol is to always wait & clear.
	
	  need to do this twice, once for gfx and once for mmhub
	  for ATC add 16 to VMID for mmhub, for IH different registers.
	  ATC_VMID0..15 registers are separate from ATC_VMID16..31.
 Mapping vmid to pasid also for IH block 
 Mapping vmid to pasid also for IH block 
 TODO - RING0 form of field is obsolete, seems to date back to SI
  but still works
 HQD registers extend from CP_MQD_BASE_ADDR to CP_HQD_EOP_WPTR_MEM. 
 Activate doorbell logic before triggering WPTR poll. 
		 Don't read wptr with get_user because the user
		  context may not be accessible (if this function
		  runs in a work queue). Instead trigger a one-shot
		  polling read from memory in the CP. This assumes
		  that wptr is GPU-accessible in the queue's VMID via
		  ATC or SVM. WPTR==RPTR before starting the poll so
		  the CP starts fetching new commands from the right
		  place.
		 
		  Guessing a 64-bit WPTR from a 32-bit RPTR is a bit
		  tricky. Assume that the queue didn't overflow. The
		  number of valid bits in the 32-bit RPTR depends on
		  the queue size. The remaining bits are taken from
		  the saved 64-bit WPTR. If the WPTR wrapped, add the
		  queue size.
 Start the EOP fetcher 
 Queue_Sel 
 VMID 
queue_type: normal compute queue 
 alloc format: all_on_one_pipe 
 engine_sel: hiq 
 num_queues: must be 1 
  get_wave_count: Read device registers to get number of waves in flight for
  a particular queue. The method also returns the VMID associated with the
  queue.
  @adev: Handle of device whose registers are to be read
  @queue_idx: Index of queue in the queue-map bit-field
  @wave_cnt: Output parameter updated with number of waves in flight
  @vmid: Output parameter updated with VMID of queue whose wave count
  is being collected
	
	  Program GRBM with appropriate MEID, PIPEID, QUEUEID and VMID
	  parameters to read out waves in flight. Get VMID if there are
	  non-zero waves in flight.
  kgd_gfx_v9_get_cu_occupancy: Reads relevant registers associated with each
  shader engine and aggregates the number of waves that are in flight for the
  process whose pasid is provided as a parameter. The process could have ZERO
  or more queues running and submitting waves to compute units.
  @kgd: Handle of device from which to get number of waves in flight
  @pasid: Identifies the process for which this query call is invoked
  @pasid_wave_cnt: Output parameter updated with number of waves in flight that
  belong to process with given pasid
  @max_waves_per_cu: Output parameter updated with maximum number of waves
  possible per Compute Unit
  Note: It's possible that the device has too many queues (oversubscription)
  in which case a VMID could be remapped to a different PASID. This could lead
  to an iaccurate wave count. Following is a high-level sequence:
     Time T1: vmid = getVmid(); vmid is associated with Pasid P1
     Time T2: passId = getPasId(vmid); vmid is associated with Pasid P2
  In the sequence above wave count obtained from time T1 will be incorrectly
  lost or added to total wave count.
  The registers that provide the waves in flight are:
   SPI_CSQ_WF_ACTIVE_STATUS - bit-map of queues per pipe. The bit is ON if a
   queue is slotted, OFF if there is no queue. A process could have ZERO or
   more queues slotted and submitting waves to be run on compute units. Even
   when there is a queue it is possible there could be zero wave fronts, this
   can happen when queue is waiting on top-of-pipe events - e.g. waitRegMem
   command
   For each bit that is ON from above:
     Read (SPI_CSQ_WF_ACTIVE_COUNT_0 + queue_idx) register. It provides the
     number of waves that are in flight for the queue at specified index. The
     index ranges from 0 to 7.
     If non-zero waves are in flight, read CP_HQD_VMID register to obtain VMID
     of the wave(s).
     Determine if VMID from above step maps to pasid provided as parameter. If
     it matches agrregate the wave count. That the VMID will not match pasid is
     a normal condition i.e. a device is expected to support multiple queues
     from multiple proceses.
   Reading registers referenced above involves programming GRBM appropriately
	
	  Iterate through the shader engines and arrays of the device
	  to get number of waves in flight
			
			  Assumption: queue map encodes following schema: four
			  pipes per each micro-engine, with each pipe mapping
			  eight queues. This schema is true for GFX9 devices
			  and must be verified for newer device families
				 Skip qeueus that are not associated with
				  compute functions
 Get number of waves in flight and aggregate them 
 Update the output parameters and return 
	
	  Program TBA registers
	
	  Program TMA registers
  Copyright 2014 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: Christian König <christian.koenig@amd.com>
 Polaris101112 firmware version 
 uvd_v6_0_enc_support - get encode support status
 @adev: amdgpu_device pointer
 Returns the current hardware encode support status
  uvd_v6_0_ring_get_rptr - get read pointer
  @ring: amdgpu_ring pointer
  Returns the current hardware read pointer
  uvd_v6_0_enc_ring_get_rptr - get enc read pointer
  @ring: amdgpu_ring pointer
  Returns the current hardware enc read pointer
  uvd_v6_0_ring_get_wptr - get write pointer
  @ring: amdgpu_ring pointer
  Returns the current hardware write pointer
  uvd_v6_0_enc_ring_get_wptr - get enc write pointer
  @ring: amdgpu_ring pointer
  Returns the current hardware enc write pointer
  uvd_v6_0_ring_set_wptr - set write pointer
  @ring: amdgpu_ring pointer
  Commits the write pointer to the hardware
  uvd_v6_0_enc_ring_set_wptr - set enc write pointer
  @ring: amdgpu_ring pointer
  Commits the enc write pointer to the hardware
  uvd_v6_0_enc_ring_test_ring - test if UVD ENC ring is working
  @ring: the engine to test on
  uvd_v6_0_enc_get_create_msg - generate a UVD ENC create msg
  @ring: ring we should submit the msg to
  @handle: session handle to use
  @bo: amdgpu object for which we query the offset
  @fence: optional fence to return
  Open up a stream for HW test
 session info 
 task info 
 op initialize 
  uvd_v6_0_enc_get_destroy_msg - generate a UVD ENC destroy msg
  @ring: ring we should submit the msg to
  @handle: session handle to use
  @bo: amdgpu object for which we query the offset
  @fence: optional fence to return
  Close up a stream for HW test or if userspace failed to do so
 session info 
 task info 
 op close session 
  uvd_v6_0_enc_ring_test_ib - test if UVD ENC IBs are working
  @ring: the engine to test on
  @timeout: timeout value in jiffies, or MAX_SCHEDULE_TIMEOUT
 UVD TRAP 
 UVD ENC TRAP 
  uvd_v6_0_hw_init - start and test UVD block
  @handle: handle used to pass amdgpu_device pointer
  Initialize the hardware, boot up the VCPU and do some testing
 Clear timeout status bits 
  uvd_v6_0_hw_fini - stop the hardware block
  @handle: handle used to pass amdgpu_device pointer
  Stop the UVD block, mark ring as not ready any more
	
	  Proper cleanups before halting the HW engine:
	    - cancel the delayed idle work
	    - enable powergating
	    - enable clockgating
	    - disable dpm
	 
	  TODO: to align with the VCN implementation, move the
	  jobs for clockgatingpowergatingdpm setting to
	  ->set_powergating_state().
 shutdown the UVD block 
  uvd_v6_0_mc_resume - memory controller programming
  @adev: amdgpu_device pointer
  Let the UVD memory controller know it's offsets
 program memory controller bits 0-27 
  uvd_v6_0_start - start UVD block
  @adev: amdgpu_device pointer
  Setup and start the UVD block
 disable DPG 
 disable byte swapping 
 disable interupt 
 stall UMC and register bus before resetting VCPU 
 put LMI, VCPU, RBC etc... into reset 
 take UVD block out of reset 
 initialize UVD memory controller 
 swap (8 in 32) RB and IB 
 take all subblocks out of reset, except VCPU 
 enable VCPU clock 
 enable UMC 
 boot up the VCPU 
 enable master interrupt 
 clear the bit 4 of UVD_STATUS 
 force RBC into idle state 
 set the write pointer delay 
 set the wb address 
 program the RB_BASE for ring buffer 
 Initialize the ring buffer's read and write pointers 
  uvd_v6_0_stop - stop UVD block
  @adev: amdgpu_device pointer
  stop the UVD block
 force RBC into idle state 
 Stall UMC and register bus before resetting VCPU 
 put VCPU into reset 
 disable VCPU clock 
 Unstall UMC and register bus 
  uvd_v6_0_ring_emit_fence - emit an fence & trap command
  @ring: amdgpu_ring pointer
  @addr: address
  @seq: sequence number
  @flags: fence related flags
  Write a fence and a trap command to the ring.
  uvd_v6_0_enc_ring_emit_fence - emit an enc fence & trap command
  @ring: amdgpu_ring pointer
  @addr: address
  @seq: sequence number
  @flags: fence related flags
  Write enc a fence and a trap command to the ring.
  uvd_v6_0_ring_emit_hdp_flush - skip HDP flushing
  @ring: amdgpu_ring pointer
 The firmware doesn't seem to like touching registers at this point. 
  uvd_v6_0_ring_test_ring - register write test
  @ring: amdgpu_ring pointer
  Test if we can successfully write to the context register
  uvd_v6_0_ring_emit_ib - execute indirect buffer
  @ring: amdgpu_ring pointer
  @job: job to retrieve vmid from
  @ib: indirect buffer to execute
  @flags: unused
  Write ring commands to execute the indirect buffer
  uvd_v6_0_enc_ring_emit_ib - enc execute indirect buffer
  @ring: amdgpu_ring pointer
  @job: job to retrive vmid from
  @ib: indirect buffer to execute
  @flags: unused
  Write enc ring commands to execute the indirect buffer
 mask 
 mask 
 Wait a little for things to settle down 
 TODO
 only in pg enabled, we can gate clock to vcpu
 wait for STATUS to clear 
 enable HW gates because UVD is idle 
		uvd_v6_0_set_hw_clock_gating(adev); 
 disable HW gating and enable Sw gating 
	 This doesn't actually powergate the UVD block.
	  That's done in the dpm code via the SMC.  This
	  just re-inits the block as necessary.  The actual
	  gating still happens in the dpm code.  We should
	  revisit this when there is a cleaner line between
	  the smc and the hw blocks
 AMD_CG_SUPPORT_UVD_MGCG 
 hdp invalidate 
 uvd_v6_0_ring_emit_pipeline_sync 
 uvd_v6_0_ring_emit_fence x1 no user fence 
 uvd_v6_0_ring_emit_ib 
 hdp invalidate 
 uvd_v6_0_ring_emit_pipeline_sync 
 uvd_v6_0_ring_emit_vm_flush 
 uvd_v6_0_ring_emit_fence x2 vm fence 
 uvd_v6_0_ring_emit_ib 
 uvd_v6_0_enc_ring_emit_pipeline_sync 
 uvd_v6_0_enc_ring_emit_vm_flush 
 uvd_v6_0_enc_ring_emit_fence x2 vm fence 
 uvd_v6_0_enc_ring_insert_end 
 uvd_v6_0_enc_ring_emit_ib 
  Copyright 2019 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 ras init of specific umc version 
		 still call query_ras_error_address to clear error status
		  even NOMEM error is encountered
		 umc query_ras_error_address is also responsible for clearing
		  error status
 only uncorrectable error needs gpu reset 
  Copyright 2019 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Copyright 2019 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 record to keep track of pmu entry per pmu type per device 
  Events fall under two categories:
   - PMU typed
     Events in sysbusevent_sourcedevicesamdgpu_<pmu_type>_<dev_num> have
     performance counter operations handled by one IP <pmu_type>.  Formats and
     events should be defined by <pmu_type>_<asic_type>_formats and
     <pmu_type>_<asic_type>_events respectively.
   - Event config typed
     Events in sysbusevent_sourcedevicesamdgpu_<dev_num> have performance
     counter operations that can be handled by multiple IPs dictated by their
     "type" format field.  Formats and events should be defined by
     amdgpu_pmu_formats and <asic_type>_events respectively.  Format field
     "type" is generated in amdgpu_pmu_event_show and defined in
     <asic_type>_event_config_types.
 Vega20 events 
 Vega20 data fabric (DF) events 
 Arcturus events 
 initialize perf counter 
 test the event attr type check for PMU enumeration 
 update the hw_perf_event struct with config data 
 start perf counter 
 unused ,
 add counter );
 read perf counter 
 stop perf counter 
 add perf counter 
 unused ,
 add counter );
 delete perf counter  
 init pmu tracking per pmu type 
 destroy all pmu data associated with target device 
 init amdgpu_pmu 
  Copyright 2018 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
				
				  convert the endianness of base addresses in place,
				  so that we don't need to convert them when accessing adev->reg_offset.
					 Instance support is somewhat inconsistent.
					  SDMA is a good example.  Sienna cichlid has 4 total
					  SDMA instances, each enumerated separately (HWIDs
					  42, 43, 68, 69).  Arcturus has 8 total SDMA instances,
					  but they are enumerated as multiple instances of the
					  same HWIDs (4x HWID 42, 4x HWID 43).  UMC is another
					  example.  On most chips there are multiple instances
					  with the same HWID.
 some IP discovery tables on Navy Flounder don't have this set correctly 
 what IP to use for this? 
 use GC or MMHUB IP version 
 UVD is not supported on vega20 SR-IOV 
 VCE is not supported on vega20 SR-IOV 
 set NBIO version 
 For SR-IOV, PSP needs to be initialized before IH 
  Copyright 2019 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Copyright 2007-8 Advanced Micro Devices, Inc.
  Copyright 2008 Red Hat Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: Dave Airlie
           Alex Deucher
		 Don't mess with SS if percentage is 0 or external ss.
		  SS is already disabled previously, and disabling it
		  again can cause display problems if the pll is already
		  programmed.
				 one other crtc is using this pll don't turn
				  off spread spectrum as it might turn off
				  display on active crtc
 use recommended ref_div for ss 
 DVO wants 2x pixel clock if the DVO chip is in 12 bit mode 
 adjust pll for deep color modes 
	 DCE3+ has an AdjustDisplayPll that will adjust the pixel clock
	  accordingly based on the encodertransmitter to work around
	  special hw requirements.
 16200 or 27000 
 on DCE5, make sure the voltage is high enough to support the
  required disp clk.
			 if the default dcpll clock is specified,
			  SetPixelClock provides the dividers
			 if the default dcpll clock is specified,
			  SetPixelClock provides the dividers
 10kHz units 
 HDMI depth, etc. 
 yes this is correct, the atom define is wrong 
 yes this is correct, the atom define is wrong 
 HDMI depth, etc. 
 100 hz units 
 Assign mode clock for hdmi deep color max clock limit check 
 DPeDP 
 adjust pixel clock as needed 
 pass the actual clock to amdgpu_atombios_crtc_program_pll for HDMI 
 update pll params 
 calculate ss amount and step size 
  Copyright 2012 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: Alex Deucher
  Indirect registers accessor
 Some of the registers might be dependent on GRBM_GFX_INDEX 
  cik_get_xclk - get the xclk
  @adev: amdgpu_device pointer
  Returns the reference clock used by the gfx engine
  (CIK).
  cik_srbm_select - select specific register instances
  @adev: amdgpu_device pointer
  @me: selected ME (micro engine)
  @pipe: pipe
  @queue: queue
  @vmid: VMID
  Switches the currently active registers instances.  Some
  registers are instanced per VMID, others are instanced per
  mepipequeue combination.
 enable the rom 
 Disable VGA mode 
 restore regs 
 APU vbios image is part of sbios image 
 take the smc lock since we are using the smc index 
 set rom index to 0 
 set index to data for continous read 
  cik_asic_pci_config_reset - soft reset GPU
  @adev: amdgpu_device pointer
  Use PCI Config method to reset the GPU.
  Returns 0 for success.
 disable BM 
 reset 
 wait for asic to come out of reset 
 enable BM 
 does asic init need to be run first??? 
  cik_asic_reset - soft reset GPU
  @adev: amdgpu_device pointer
  Look up which blocks are hung and attempt
  to reset them.
  Returns 0 for success.
 re-try equalization if gen3 is not already enabled 
 check status 
 linkctl 
 linkctl2 
 set the link speed 
 gen3 
 gen2 
 gen1 
 XXX double check APUs 
 change this when we support soft reset 
	 This reports 0 on APUs, so return to avoid writingreading registers
	  that may or may not be different from their GPU counterparts
 Set the 2 events that we wish to watch, defined above 
 Reg 40 is # received msgs, Reg 104 is # of posted requests sent 
 Write to enable desired perf counters 
	 Zero out and enable the perf counters
	  Write 0x5:
	  Bit 0 = Start all counters(1)
	  Bit 2 = Global counter reset enable(1)
	 Load the shadow and disable the perf counters
	  Write 0x2:
	  Bit 0 = Stop counters(0)
	  Bit 1 = Load the shadow counters(1)
 Read register values to get any >32bit overflow 
 Get the values and add the overflow 
 check if the SMC is already running 
 Get the number of NAKs received and generated 
 Add the total number of NAKs, i.e the number of replays 
AMD_CG_SUPPORT_GFX_CGCG |
AMD_CG_SUPPORT_GFX_CGCG |
AMD_CG_SUPPORT_GFX_CGCG |
			AMD_PG_SUPPORT_GFX_PG |
			  AMD_PG_SUPPORT_GFX_SMG |
			  AMD_PG_SUPPORT_CP |
			  AMD_PG_SUPPORT_GDS |
			  AMD_PG_SUPPORT_RLC_SMU_HS |
			  AMD_PG_SUPPORT_ACP |
AMD_CG_SUPPORT_GFX_CGCG |
			AMD_PG_SUPPORT_GFX_PG |
			AMD_PG_SUPPORT_VCE |
			  AMD_PG_SUPPORT_CP |
			  AMD_PG_SUPPORT_GDS |
			  AMD_PG_SUPPORT_RLC_SMU_HS |
 FIXME: not supported yet 
 move the golden regs per IP block 
 enable pcie gen23 link 
 enable aspm 
 XXX hard reset?? 
 FIXME: not supported yet 
  Copyright 2007-8 Advanced Micro Devices, Inc.
  Copyright 2008 Red Hat Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: Dave Airlie
           Alex Deucher
 walk the list and link encoders to connectors 
	 if we don't have an active device yet, just use one of
	  the connectors tied to the encoder.
 HDMI 1.3 supports up to 340 Mhz over single link 
 HDMI 1.3 supports up to 340 Mhz over single link 
  Copyright 2019 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  The 2 macros bellow represent the actual size in bytes that
  those entities occupy in the EEPROM memory.
  RAS_TABLE_RECORD_SIZE is different than sizeof(eeprom_table_record) which
  uses uint64 to store 6b fields such as retired_page.
 Table hdr is 'AMDR' 
 Bad GPU tag ‘BADG’ 
 Assume 2-Mbit size EEPROM and take up the whole space. 
 Given a zero-based index of an EEPROM RAS record, yields the EEPROM
  offset off of RAS_TABLE_START.  That is, this is something you can
  add to control->i2c_address, and then tell I2C layer to read
  fromwrite to there. _N is the so called absolute index,
  because it starts right after the table header.
 Given a 0-based relative record index, 0, 1, 2, ..., etc., off
  of "fri", return the absolute record index off of the end of
  the table header.
		 The address given by VBIOS is an 8-bit, wire-format
		  address, i.e. the most significant byte.
		 
		  Normalize it to a 19-bit EEPROM address. Remove the
		  device type identifier and make it a 7-bit address;
		  then make it a 19-bit EEPROM address. See top of
		  amdgpu_eeprom.c.
 i2c may be unstable in gpu reset 
 Header checksum, skip checksum field in the calculation 
  amdgpu_ras_eeprom_reset_table -- Reset the RAS EEPROM table
  @control: pointer to control structure
  Reset the contents of the header of the RAS EEPROM table.
  Return 0 on success, -errno on error.
 Next are all record fields according to EEPROM page spec in LE foramt 
 Next are all record fields according to EEPROM page spec in LE foramt 
 skip check eeprom table for VEGA20 Gaming 
  __amdgpu_ras_eeprom_write -- write indexed from buffer to EEPROM
  @control: pointer to control structure
  @buf: pointer to buffer containing data to write
  @fri: start writing at this index
  @num: number of records to write
  The caller must hold the table mutex in @control.
  Return 0 on success, -errno otherwise.
 i2c may be unstable in gpu reset 
		 Short write, return error.
	 Encode all of them in one go.
	 a, first record index to write into.
	  b, last record index to write into.
	  a = first index to read (fri) + number of records in the table,
	  b = a + @num - 1.
	  Let N = control->ras_max_num_record_count, then we have,
	  case 0: 0 <= a <= b < N,
	    just append @num records starting at a;
	  case 1: 0 <= a < N <= b,
	    append (N - a) records starting at a, and
	    append the remainder,  b % N + 1, starting at 0.
	  case 2: 0 <= fri < N <= a <= b, then modulo N we get two subcases,
	  case 2a: 0 <= a <= b < N
	    append num records starting at a; and fix fri if b overwrote it,
	    and since a <= b, if b overwrote it then a must've also,
	    and if b didn't overwrite it, then a didn't also.
	  case 2b: 0 <= b < a < N
	    write num records starting at a, which wraps around 0=N
	    and overwrite fri unconditionally. Now from case 2a,
	    this means that b eclipsed fri to overwrite it and wrap
	    around 0 again, i.e. b = 2N+r pre modulo N, so we unconditionally
	    set fri = b + 1 (mod N).
	  Now, since fri is updated in every case, except the trivial case 0,
	  the number of records present in the table after writing, is,
	  num_recs - 1 = b - fri (mod N), and we take the positive value,
	  by adding an arbitrary multiple of N before taking the modulo N
	  as shown below.
 Note that, b - a + 1 = num. 
			 b < a, which means, we write from
			  a to the end of the table, and from
			  the start of the table to b.
	 Modify the header if it exceeds.
	 Recalc the checksum.
 avoid sign extension when assigning to "checksum" 
  amdgpu_ras_eeprom_append -- append records to the EEPROM RAS table
  @control: pointer to control structure
  @record: array of records to append
  @num: number of records in @record array
  Append @num records to the table, calculate the checksum and write
  the table back to EEPROM. The maximum number of records that
  can be appended is between 1 and control->ras_max_record_count,
  regardless of how many records are already stored in the table.
  Return 0 on success or if EEPROM is not supported, -errno on error.
  __amdgpu_ras_eeprom_read -- read indexed from EEPROM into buffer
  @control: pointer to control structure
  @buf: pointer to buffer to read into
  @fri: first record index, start reading at this index, absolute index
  @num: number of records to read
  The caller must hold the table mutex in @control.
  Return 0 on success, -errno otherwise.
 i2c may be unstable in gpu reset 
		 Short read, return error.
  amdgpu_ras_eeprom_read -- read EEPROM
  @control: pointer to control structure
  @record: array of records to read into
  @num: number of records in @record
  Reads num records from the RAS table in EEPROM and
  writes the data into @record array.
  Returns 0 on success, -errno on error.
	 Determine how many records to read, from the first record
	  index, fri, to the end of the table, and from the beginning
	  of the table, such that the total number of records is
	  @num, and we handle wrap around when fri > 0 and
	  fri + num > RAS_MAX_RECORD_COUNT.
	 
	  First we compute the index of the last element
	  which would be fetched from each region,
	  g0 is in [fri, fri + num - 1], and
	  g1 is in [0, RAS_MAX_RECORD_COUNT - 1].
	  Then, if g0 < RAS_MAX_RECORD_COUNT, the index of
	  the last element to fetch, we set g0 to _the number_
	  of elements to fetch, @num, since we know that the last
	  indexed to be fetched does not exceed the table.
	 
	  If, however, g0 >= RAS_MAX_RECORD_COUNT, then
	  we set g0 to the number of elements to read
	  until the end of the table, and g1 to the number of
	  elements to read from the beginning of the table.
	 Read up everything? Then transform.
	 We want pos - data_len > 0, which means there's
	  bytes to be printed from data.
		 Find the starting record index
			 Read a single record
  __verify_ras_table_checksum -- verify the RAS EEPROM table checksum
  @control: pointer to control structure
  Check the checksum of the stored in EEPROM RAS table.
  Return 0 if the checksum is correct,
  positive if it is not correct, and
  -errno on IO error.
		 On partial reads, return -EIO.
 Verify i2c adapter is initialized 
 Read the table header from EEPROM address 
		 Warn if we are at 90% of the threshold or above
			 This means that, the threshold was increased since
			  the last time the system was booted, and now,
			  ras->bad_page_cnt_threshold - control->num_recs > 0,
			  so that at least one more record can be saved,
			  before the page count threshold is reached.
  Copyright 2016-2018 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 Eviction Fence
  Fence helper functions to deal with KFD memory eviction.
  Big Idea - Since KFD submissions are done by user queues, a BO cannot be
   evicted unless all the user queues for that process are evicted.
  All the BOs in a process share an eviction fence. When process X wants
  to map VRAM memory but TTM can't find enough space, TTM will attempt to
  evict BOs from its LRU list. TTM checks if the BO is valuable to evict
  by calling ttm_device_funcs->eviction_valuable().
  ttm_device_funcs->eviction_valuable() - will return false if the BO belongs
   to process X. Otherwise, it will return true to indicate BO can be
   evicted by TTM.
  If ttm_device_funcs->eviction_valuable returns true, then TTM will continue
  the evcition process for that BO by calling ttm_bo_evict --> amdgpu_bo_move
  --> amdgpu_copy_buffer(). This sets up job in GPU scheduler.
  GPU Scheduler (amd_sched_main) - sets up a cb (fence_add_callback) to
   nofity when the BO is free to move. fence_add_callback --> enable_signaling
   --> amdgpu_amdkfd_fence.enable_signaling
  amdgpu_amdkfd_fence.enable_signaling - Start a work item that will quiesce
  user queues and signal fence. The work item will also start another delayed
  work item to restore BOs
 This reference gets released in amdkfd_fence_release 
  amdkfd_fence_enable_signaling - This gets called when TTM wants to evict
   a KFD BO and schedules a job to move the BO.
   If fence is already signaled return true.
   If fence is not signaled schedule a evict KFD process work item.
   @f: dma_fence
  amdkfd_fence_release - callback that fence can be freed
  @f: dma_fence
  This function is called when the reference count becomes zero.
  Drops the mm_struct reference and RCU schedules freeing up the fence.
	 Unconditionally signal the fence. The process is getting
	  terminated.
 Not an amdgpu_amdkfd_fence 
  amdkfd_fence_check_mm - Check if @mm is same as that of the fence @f
   if same return TRUE else return FALSE.
  @f: [IN] fence
  @mm: [IN] mm that needs to be verified
  Copyright 2014 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 Enable pflip interrupts 
 Disable pflip interrupts 
  dce_v8_0_page_flip - pageflip callback.
  @adev: amdgpu_device pointer
  @crtc_id: crtc to cleanup pageflip on
  @crtc_base: new address of the crtc (GPU MC address)
  @async: asynchronous flip
  Triggers the actual pageflip by updating the primary
  surface base address.
 flip at hsync for async, default is vsync 
 update pitch 
 update the primary scanout addresses 
 writing to the low address triggers the update 
 post the write 
  dce_v8_0_hpd_sense - hpd sense callback.
  @adev: amdgpu_device pointer
  @hpd: hpd (hotplug detect) pin
  Checks if a digital monitor is connected (evergreen+).
  Returns true if connected, false if not connected.
  dce_v8_0_hpd_set_polarity - hpd set polarity callback.
  @adev: amdgpu_device pointer
  @hpd: hpd (hotplug detect) pin
  Set the polarity of the hpd pin (evergreen+).
  dce_v8_0_hpd_init - hpd setup callback.
  @adev: amdgpu_device pointer
  Setup the hpd pins used by the card (evergreen+).
  Enable the pin, set the polarity, and enable the hpd interrupts.
			 don't try to enable hpd on eDP or LVDS avoid breaking the
			  aux dp channel on imac and help (but not completely fix)
			  https:bugzilla.redhat.comshow_bug.cgi?id=726143
			  also avoid interrupt storms during dpms.
  dce_v8_0_hpd_fini - hpd tear down callback.
  @adev: amdgpu_device pointer
  Tear down the hpd pins used by the card (evergreen+).
  Disable the hpd interrupts.
 Lockout access through VGA aperture
 disable VGA render 
Disable VGA render and enabled crtc, if has DCE engine
Disable crtc
 LVDSeDP FMT is set up by atom 
 not needed for analog 
 XXX sort out optimal dither settings 
 XXX sort out optimal dither settings 
 XXX sort out optimal dither settings 
 not needed 
 display watermark setup 
  dce_v8_0_line_buffer_adjust - Set up the line buffer
  @adev: amdgpu_device pointer
  @amdgpu_crtc: the selected display controller
  @mode: the current display mode on the selected display
  controller
  Setup up the line buffer allocation for
  the selected display controller (CIK).
  Returns the line buffer size in pixels.
	
	  Line Buffer Setup
	  There are 6 line buffers, one for each display controllers.
	  There are 3 partitions per LB. Select the number of partitions
	  to enable based on the display width.  For display widths larger
	  than 4096, you need use to use 2 display controllers and combine
	  them using the stereo blender.
 controller not enabled, so no lb used 
  cik_get_number_of_dram_channels - get the number of dram channels
  @adev: amdgpu_device pointer
  Look up the number of video ram channels (CIK).
  Used for display watermark bandwidth calculations
  Returns the number of dram channels
 number of dram channels 
 bandwidth per dram data pin in kHz 
 engine clock in kHz 
 display clock in kHz 
 viewport width 
 active display time in ns 
 blank time in ns 
 mode is interlaced 
 vertical scale ratio 
 number of active crtcs 
 bytes per pixel display + overlay 
 line buffer allocated to pipe 
 vertical scaler taps 
  dce_v8_0_dram_bandwidth - get the dram bandwidth
  @wm: watermark calculation data
  Calculate the raw dram bandwidth (CIK).
  Used for display watermark bandwidth calculations
  Returns the dram bandwidth in MBytess
 Calculate raw DRAM Bandwidth 
 0.7 
  dce_v8_0_dram_bandwidth_for_display - get the dram bandwidth for display
  @wm: watermark calculation data
  Calculate the dram bandwidth used for display (CIK).
  Used for display watermark bandwidth calculations
  Returns the dram bandwidth for display in MBytess
 Calculate DRAM Bandwidth and the part allocated to display. 
 0.3 to 0.7 
 XXX worse case value 0.3 
  dce_v8_0_data_return_bandwidth - get the data return bandwidth
  @wm: watermark calculation data
  Calculate the data return bandwidth used for display (CIK).
  Used for display watermark bandwidth calculations
  Returns the data return bandwidth in MBytess
 Calculate the display Data return Bandwidth 
 0.8 
  dce_v8_0_dmif_request_bandwidth - get the dmif bandwidth
  @wm: watermark calculation data
  Calculate the dmif bandwidth used for display (CIK).
  Used for display watermark bandwidth calculations
  Returns the dmif bandwidth in MBytess
 Calculate the DMIF Request Bandwidth 
 0.8 
  dce_v8_0_available_bandwidth - get the min available bandwidth
  @wm: watermark calculation data
  Calculate the min available bandwidth used for display (CIK).
  Used for display watermark bandwidth calculations
  Returns the min available bandwidth in MBytess
 Calculate the Available bandwidth. Display can use this temporarily but not in average. 
  dce_v8_0_average_bandwidth - get the average available bandwidth
  @wm: watermark calculation data
  Calculate the average available bandwidth used for display (CIK).
  Used for display watermark bandwidth calculations
  Returns the average available bandwidth in MBytess
	 Calculate the display mode Average Bandwidth
	  DisplayMode should contain the source and destination dimensions,
	  timing, etc.
  dce_v8_0_latency_watermark - get the latency watermark
  @wm: watermark calculation data
  Calculate the latency watermark (CIK).
  Used for display watermark bandwidth calculations
  Returns the latency watermark in ns
 First calculate the latency in ns 
 2000 ns. 
 dc pipe latency 
  dce_v8_0_average_bandwidth_vs_dram_bandwidth_for_display - check
  average and available dram bandwidth
  @wm: watermark calculation data
  Check if the display average bandwidth fits in the display
  dram bandwidth (CIK).
  Used for display watermark bandwidth calculations
  Returns true if the display fits, false if not.
  dce_v8_0_average_bandwidth_vs_available_bandwidth - check
  average and available bandwidth
  @wm: watermark calculation data
  Check if the display average bandwidth fits in the display
  available bandwidth (CIK).
  Used for display watermark bandwidth calculations
  Returns true if the display fits, false if not.
  dce_v8_0_check_latency_hiding - check latency hiding
  @wm: watermark calculation data
  Check latency hiding (CIK).
  Used for display watermark bandwidth calculations
  Returns true if the display fits, false if not.
  dce_v8_0_program_watermarks - program display watermarks
  @adev: amdgpu_device pointer
  @amdgpu_crtc: the selected display controller
  @lb_size: line buffer size
  @num_heads: number of display controllers in use
  Calculate and program the display watermarks for the
  selected display controller (CIK).
 watermark for high clocks 
 XXX: get this from fb config 
 set for high clocks 
 possibly force display priority to high 
 should really do this at mode validation time... 
 watermark for low clocks 
 XXX: get this from fb config 
 set for low clocks 
 possibly force display priority to high 
 should really do this at mode validation time... 
 select wm A 
 select wm B 
 restore original selection 
 save values for DPM 
 Save number of lines the linebuffer leads before the scanout 
  dce_v8_0_bandwidth_update - program display watermarks
  @adev: amdgpu_device pointer
  Calculate and program the display watermarks and line
  buffer allocation (CIK).
 program the speaker allocation 
 set HDMI mode 
 stereo 
 KV: 4 streams, 7 endpoints 
 KBML: 2 streams, 3 endpoints 
 BNHW: 6 streams, 7 endpoints 
 disable audio.  it will be set up later 
 XXX remove once we switch to ip funcs 
  update the N and CTS parameters for a given pixel clock rate
  build a HDMI Video Info Frame
 XXX two dtos; generally use dto0 for hdmi 
	 Express [24MHz  target pixel clock] as an exact rational
	  number (coefficient of two integer numbers.  DCCG_AUDIO_DTOx_PHASE
	  is the numerator, DCCG_AUDIO_DTOx_MODULE is the denominator
  update the info frames with the data from the current display mode
 Silent, r600_hdmi_enable will raise WARN for us 
 hdmi deep color mode general control packets setup, if bpc > 8 
 disable audio prior to setting up hw 
 send null packets when required 
 send null packets when required 
 send general control packets 
 send general control packets every frame 
 enable audio info frames (frames won't be set until audio is enabled) 
 required for audio info values to be updated 
 required for audio info values to be updated 
 anything other than 0 
 unset HDMI_GC_AVMUTE 
 set the default audio delay 
 should be suffient for all audio modes and small enough for all hblanks 
 allow 60958 channel status fields to be updated 
 fglrx clears sth in AFMT_AUDIO_PACKET_CONTROL2 here 
 allow hw to sent ACR packets when required 
 select SW CTS value 
 allow hw to sent ACR packets when required 
 enable AVI info frames 
 required for audio info values to be updated 
 anything other than 0 
 send audio packets 
 enable audio after setting up hw 
 Silent, r600_hdmi_enable will raise WARN for us 
 DCE8 has audio blocks tied to DIG encoders 
 no fb bound 
	 If atomic, assume fb object is pinned & idle & fenced and
	  just update base pointers
 Greater 8 bpc fb needs to bypass hw-lut to retain precision 
 Greater 8 bpc fb needs to bypass hw-lut to retain precision 
	 Make sure surface address is updated at vertical blank rather than
	  horizontal blank
	
	  The LUT only has 256 slots for indexing by a 8 bpc fb. Bypass the LUT
	  for > 8 bpc scanout to avoid truncation of fb indices to 8 msb's, to
	  retain the full precision throughout the pipeline.
 set pageflip to happen anywhere in vblank interval 
 Bytes per pixel may have changed 
 XXX match this to the depth of the crtc fmt block, move to modeset? 
	 XXX this only needs to be programmed once per crtc at startup,
	  not sure where the best place for it is
  dce_v8_0_pick_pll - Allocate a PPLL for use by the crtc.
  @crtc: drm crtc
  Returns the PPLL (Pixel PLL) to be used by the crtc.  For DP monitors
  a single PPLL can be used for all DP crtcsencoders.  For non-DP
  monitors a dedicated PPLL must be used.  If a particular board has
  an external DP PLL, return ATOM_PPLL_INVALID to skip PLL programming
  as there is no need to program the PLL itself.  If we are not able to
  allocate a PLL, return ATOM_PPLL_INVALID to skip PLL programming to
  avoid messing up an existing monitor.
  Asic specific PLL information
  DCE 8.x
  KBKV
  - PPLL1, PPLL2 are available for all UNIPHY (both DP and non-DP)
  CI
  - PPLL0, PPLL1, PPLL2 are available for all UNIPHY (both DP and non-DP) and DAC
 skip PPLL programming if using ext clock 
 use the same PPLL for all DP monitors 
 use the same PPLL for all monitors with the same clock 
 otherwise, pick one of the plls 
 KBML has PPLL1 and PPLL2 
 CIKV has PPLL0, PPLL1, and PPLL2 
 avivo cursor are offset into the total surface 
 turn off cursor 
 Make sure VBLANK and PFLIP interrupts are still enabled 
 adjust pm to dpms 
 disable crtc pair power gating before programming 
 disable the GRPH 
			 one other crtc is using this pll don't turn
			  off the pll
 disable the ppll 
 disable the ppll 
 update the hw version fpr dpm 
 assign the encoder to the amdgpu crtc to avoid repeated lookups later 
 pick pll 
 if we can't get a PPLL for a non-DP encoder, fail 
 ? 
 FIXME: not supported yet 
 HPD hotplug 
 allocate crtcs 
 setup afmt 
 disable vga render 
 init dig PHYs, disp eng pll 
 initialize hpd 
 turn on the BL 
 Wait a little for things to settle down 
 vblank 
 vline 
 IRQ could occur when in initial stage 
 page flip completed. clean up 
 wakeup usersapce 
 need to call this here rather than in prepare() since we need some crtc info 
 set scaler clears this on some chips 
 select the clockdata port if it uses a router 
 turn eDP panel on for mode set 
 this is needed for the pllss setup to work correctly in some cases 
 set up the FMT blocks 
 need to call this here as we need the crtc set up 
 these are handled by the primary encoders 
 no detect for TMDSLVDS yet 
 see if we already added it 
 add a new one 
 these are handled by the primary encoders 
  Copyright 2019 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  navi10_ih_init_register_offset - Initialize register offset for ih rings
  @adev: amdgpu_device pointer
  Initialize register offset ih rings (NAVI10).
  force_update_wptr_for_self_int - Force update the wptr for self interrupt
  @adev: amdgpu_device pointer
  @threshold: threshold to trigger the wptr reporting
  @timeout: timeout to trigger the wptr reporting
  @enabled: Enabledisable timeout flush mechanism
  threshold input range: 0 ~ 15, default 0,
  real_threshold = 2^threshold
  timeout input range: 0 ~ 20, default 8,
  real_timeout = (2^timeout)  1024  (socclk_freq)
  Force update wptr for self interrupt ( >= SIENNA_CICHLID).
  navi10_ih_toggle_ring_interrupts - toggle the interrupt ring buffer
  @adev: amdgpu_device pointer
  @ih: amdgpu_ih_ring pointet
  @enable: true - enable the interrupts, false - disable the interrupts
  Toggle the interrupt ring buffer (NAVI10)
 enable_intr field is only valid in ring0 
 set rptr, wptr to 0 
  navi10_ih_toggle_interrupts - Toggle all the available interrupt ring buffers
  @adev: amdgpu_device pointer
  @enable: enable or disable interrupt ring buffers
  Toggle all the available interrupt ring buffers (NAVI10).
	 Ring Buffer write pointer writeback. If enabled, IH_RB_WPTR register
	  value is written to memory
  navi10_ih_enable_ring - enable an ih ring buffer
  @adev: amdgpu_device pointer
  @ih: amdgpu_ih_ring pointer
  Enable an ih ring buffer (NAVI10)
 Ring Buffer base. [39:8] of 40-bit address of the beginning of the ring buffer
 set the ih ring 0 writeback address whether it's enabled or not 
 set rptr, wptr to 0 
  navi10_ih_irq_init - init and enable the interrupt ring
  @adev: amdgpu_device pointer
  Allocate a ring buffer for the interrupt controller,
  enable the RLC, disable interrupts, enable the IH
  ring buffer and enable it (NAVI).
  Called at device load and reume.
  Returns 0 for success, errors for failure.
 disable irqs 
 update doorbell range for ih ring 0
 enable interrupts 
 enable wptr force update for self int 
  navi10_ih_irq_disable - disable interrupts
  @adev: amdgpu_device pointer
  Disable interrupts on the hw (NAVI10).
 Wait and acknowledge irq 
  navi10_ih_get_wptr - get the IH ring buffer wptr
  @adev: amdgpu_device pointer
  @ih: IH ring buffer to fetch wptr
  Get the IH ring buffer wptr from either the register
  or the writeback memory buffer (NAVI10).  Also check for
  ring buffer overflow and deal with it.
  Returns the value of the wptr.
	 When a ring buffer overflow happen start parsing interrupt
	  from the last not overwritten vector (wptr + 32). Hopefully
	  this should allow us to catch up.
  navi10_ih_irq_rearm - rearm IRQ if lost
  @adev: amdgpu_device pointer
  @ih: IH ring to match
 Rearm IRQ  re-write doorbell if doorbell write is lost 
  navi10_ih_set_rptr - set the IH ring buffer rptr
  @adev: amdgpu_device pointer
  @ih: IH ring buffer to set rptr
  Set the IH ring buffer rptr.
 XXX check if swapping is necessary on BE 
  navi10_ih_self_irq - dispatch work for ring 1 and 2
  @adev: amdgpu_device pointer
  @source: irq source
  @entry: IV with WPTR update
  Update the WPTR from the IV and schedule work to handle the entries.
	 use gpu virtual address for ih ring
	  until ih_checken is programmed to allow
 initialize ih control registers offset 
 todo 
 todo 
 todo 
  Copyright 2016 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  vcn_v1_0_early_init - set function pointers
  @handle: amdgpu_device pointer
  Set ring and irq function pointers
  vcn_v1_0_sw_init - sw init for VCN block
  @handle: amdgpu_device pointer
  Load firmware and sw initialization
 VCN DEC TRAP 
 VCN ENC TRAP 
 Override the work func 
  vcn_v1_0_sw_fini - sw fini for VCN block
  @handle: amdgpu_device pointer
  VCN suspend and free up sw allocation
  vcn_v1_0_hw_init - start and test VCN block
  @handle: amdgpu_device pointer
  Initialize the hardware, boot up the VCPU and do some testing
  vcn_v1_0_hw_fini - stop the hardware block
  @handle: amdgpu_device pointer
  Stop the VCN block, mark ring as not ready any more
  vcn_v1_0_suspend - suspend VCN block
  @handle: amdgpu_device pointer
  HW fini and suspend VCN block
  vcn_v1_0_resume - resume VCN block
  @handle: amdgpu_device pointer
  Resume firmware and hw init VCN block
  vcn_v1_0_mc_resume_spg_mode - memory controller programming
  @adev: amdgpu_device pointer
  Let the VCN memory controller know it's offsets
 cache window 0: fw 
 cache window 1: stack 
 cache window 2: context 
 cache window 0: fw 
 cache window 1: stack 
 cache window 2: context 
 VCN global tiling registers 
  vcn_v1_0_disable_clock_gating - disable VCN clock gating
  @adev: amdgpu_device pointer
  Disable clock gating for VCN block
 JPEG disable CGC 
 UVD disable CGC 
 turn on 
  vcn_v1_0_enable_clock_gating - enable VCN clock gating
  @adev: amdgpu_device pointer
  Enable clock gating for VCN block
 enable JPEG CGC 
 enable UVD CGC 
 disable JPEG CGC 
 enable sw clock gating control 
 turn off clock gating 
 turn on SUVD clock gating 
 turn on sw mode in UVD_SUVD_CGC_CTRL 
 polling UVD_PGFSM_STATUS to confirm UVDM_PWR_STATUS , UVDU_PWR_STATUS are 0 (power on) 
 Before power off, this indicator has to be turned on 
  vcn_v1_0_start_spg_mode - start VCN block
  @adev: amdgpu_device pointer
  Setup and start the VCN block
 disable byte swapping 
 disable clock gating 
 disable interupt 
 initialize VCN memory controller 
 swap (8 in 32) RB and IB 
 enable VCPU clock 
 boot up the VCPU 
 enable UMC 
 enable master interrupt 
 enable system interrupt for JRBC, TODO: move to set interrupt
 clear the busy bit of UVD_STATUS 
 force RBC into idle state 
 set the write pointer delay 
 set the wb address 
 program the RB_BASE for ring buffer 
 Initialize the ring buffer's read and write pointers 
 disable byte swapping 
 enable dynamic power gating mode 
 enable clock gating 
 enable VCPU clock 
 disable interupt 
 initialize VCN memory controller 
 swap (8 in 32) RB and IB 
 boot up the VCPU 
 enable UMC 
 enable master interrupt 
 setup mmUVD_LMI_CTRL 
 setup VCN global tiling registers 
 enable System Interrupt for JRBC 
 force RBC into idle state 
 set the write pointer delay 
 set the wb address 
 program the RB_BASE for ring buffer 
 Initialize the ring buffer's read and write pointers 
  vcn_v1_0_stop_spg_mode - stop VCN block
  @adev: amdgpu_device pointer
  stop the VCN block
 stall UMC channel 
 disable VCPU clock 
 reset LMI UMCLMI 
 put VCPU into reset 
 Wait for power status to be UVD_POWER_STATUS__UVD_POWER_STATUS_TILES_OFF 
 wait for read ptr to be equal to write ptr 
 disable dynamic power gating mode 
 pauseunpause if state is changed 
 pause DPG non-jpeg 
 Restore 
 unpause dpg non-jpeg, no need to wait 
 pauseunpause if state is changed 
 Make sure JPRG Snoop is disabled before sending the pause 
 pause DPG jpeg 
 Restore 
 unpause dpg jpeg, no need to wait 
 wait for STATUS to clear 
 disable HW gating and enable Sw gating 
  vcn_v1_0_dec_ring_get_rptr - get read pointer
  @ring: amdgpu_ring pointer
  Returns the current hardware read pointer
  vcn_v1_0_dec_ring_get_wptr - get write pointer
  @ring: amdgpu_ring pointer
  Returns the current hardware write pointer
  vcn_v1_0_dec_ring_set_wptr - set write pointer
  @ring: amdgpu_ring pointer
  Commits the write pointer to the hardware
  vcn_v1_0_dec_ring_insert_start - insert a start command
  @ring: amdgpu_ring pointer
  Write a start command to the ring.
  vcn_v1_0_dec_ring_insert_end - insert a end command
  @ring: amdgpu_ring pointer
  Write a end command to the ring.
  vcn_v1_0_dec_ring_emit_fence - emit an fence & trap command
  @ring: amdgpu_ring pointer
  @addr: address
  @seq: sequence number
  @flags: fence related flags
  Write a fence and a trap command to the ring.
  vcn_v1_0_dec_ring_emit_ib - execute indirect buffer
  @ring: amdgpu_ring pointer
  @job: job to retrieve vmid from
  @ib: indirect buffer to execute
  @flags: unused
  Write ring commands to execute the indirect buffer
 wait for register write 
  vcn_v1_0_enc_ring_get_rptr - get enc read pointer
  @ring: amdgpu_ring pointer
  Returns the current hardware enc read pointer
  vcn_v1_0_enc_ring_get_wptr - get enc write pointer
  @ring: amdgpu_ring pointer
  Returns the current hardware enc write pointer
  vcn_v1_0_enc_ring_set_wptr - set enc write pointer
  @ring: amdgpu_ring pointer
  Commits the enc write pointer to the hardware
  vcn_v1_0_enc_ring_emit_fence - emit an enc fence & trap command
  @ring: amdgpu_ring pointer
  @addr: address
  @seq: sequence number
  @flags: fence related flags
  Write enc a fence and a trap command to the ring.
  vcn_v1_0_enc_ring_emit_ib - enc execute indirect buffer
  @ring: amdgpu_ring pointer
  @job: job to retrive vmid from
  @ib: indirect buffer to execute
  @flags: unused
  Write enc ring commands to execute the indirect buffer
 wait for reg writes 
	 This doesn't actually powergate the VCN block.
	  That's done in the dpm code via the SMC.  This
	  just re-inits the block as necessary.  The actual
	  gating still happens in the dpm code.  We should
	  revisit this when there is a cleaner line between
	  the smc and the hw blocks
 vcn_v1_0_check_soft_reset ,
 vcn_v1_0_pre_soft_reset ,
 vcn_v1_0_soft_reset ,
 vcn_v1_0_post_soft_reset ,
 hdp invalidate  flush 
 vcn_v1_0_dec_ring_emit_vm_flush 
 vcn_v1_0_dec_ring_emit_fence x2 vm fence 
 vcn_v1_0_dec_ring_emit_ib 
 vcn_v1_0_enc_ring_emit_vm_flush 
 vcn_v1_0_enc_ring_emit_fence x2 vm fence 
 vcn_v1_0_enc_ring_insert_end 
 vcn_v1_0_enc_ring_emit_ib 
  Copyright 2014 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 Topaz 
 Tonga, CZ, ST, Fiji 
 Polaris 
 Topaz 
 Tonga 
 CZ, ST, Fiji, Polaris 
  Indirect registers accessor
 smu_8_0_d.h 
 Some of the registers might be dependent on GRBM_GFX_INDEX 
  vi_get_xclk - get the xclk
  @adev: amdgpu_device pointer
  Returns the reference clock used by the gfx engine
  (VI).
  vi_srbm_select - select specific register instances
  @adev: amdgpu_device pointer
  @me: selected ME (micro engine)
  @pipe: pipe
  @queue: queue
  @vmid: VMID
  Switches the currently active registers instances.  Some
  registers are instanced per VMID, others are instanced per
  mepipequeue combination.
 todo 
 enable the rom 
 Disable VGA mode 
 restore regs 
 APU vbios image is part of sbios image 
 take the smc lock since we are using the smc index 
 set rom index to 0 
 set index to data for continous read 
  vi_asic_pci_config_reset - soft reset GPU
  @adev: amdgpu_device pointer
  Use PCI Config method to reset the GPU.
  Returns 0 for success.
 disable BM 
 reset 
 wait for asic to come out of reset 
 enable BM 
  vi_asic_reset - soft reset GPU
  @adev: amdgpu_device pointer
  Look up which blocks are hung and attempt
  to reset them.
  Returns 0 for success.
 todo 
 not necessary on CZ 
 CZ has hang issues with full reset at the moment 
 XXX: soft reset should work on fiji and tonga 
 change this when we support soft reset 
	 This reports 0 on APUs, so return to avoid writingreading registers
	  that may or may not be different from their GPU counterparts
 Set the 2 events that we wish to watch, defined above 
 Reg 40 is # received msgs, Reg 104 is # of posted requests sent 
 Write to enable desired perf counters 
	 Zero out and enable the perf counters
	  Write 0x5:
	  Bit 0 = Start all counters(1)
	  Bit 2 = Global counter reset enable(1)
	 Load the shadow and disable the perf counters
	  Write 0x2:
	  Bit 0 = Stop counters(0)
	  Bit 1 = Load the shadow counters(1)
 Read register values to get any >32bit overflow 
 Get the values and add the overflow 
 Get the number of NAKs received and generated 
 Add the total number of NAKs, i.e the number of replays 
 check if the SMC is already running 
			AMD_CG_SUPPORT_GFX_MGCG |
			AMD_CG_SUPPORT_GFX_RLC_LS |
			AMD_CG_SUPPORT_GFX_CP_LS |
			AMD_CG_SUPPORT_GFX_CGCG |
			AMD_CG_SUPPORT_GFX_CGLS |
			AMD_CG_SUPPORT_GFX_3D_CGCG |
			AMD_CG_SUPPORT_GFX_3D_CGLS |
			AMD_CG_SUPPORT_SDMA_MGCG |
			AMD_CG_SUPPORT_SDMA_LS |
			AMD_CG_SUPPORT_BIF_MGCG |
			AMD_CG_SUPPORT_BIF_LS |
			AMD_CG_SUPPORT_HDP_MGCG |
			AMD_CG_SUPPORT_HDP_LS |
			AMD_CG_SUPPORT_ROM_MGCG |
			AMD_CG_SUPPORT_MC_MGCG |
			AMD_CG_SUPPORT_MC_LS |
			AMD_CG_SUPPORT_DRM_LS |
			AMD_CG_SUPPORT_UVD_MGCG |
 rev0 hardware requires workarounds to support PG 
 FIXME: not supported yet 
 move the golden regs per IP block 
 enable pcie gen23 link 
 enable aspm 
 enable the doorbell aperture 
 enable the doorbell aperture 
 AMD_CG_SUPPORT_BIF_LS 
 AMD_CG_SUPPORT_HDP_LS 
 AMD_CG_SUPPORT_HDP_MGCG 
 AMD_CG_SUPPORT_ROM_MGCG 
 topaz has no DCE, UVD, VCE 
 FIXME: not supported yet 
  Copyright 2014 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 Block CPU access 
 blackout the MC 
 wait for the MC to settle 
 unblackout the MC 
 allow CPU access 
  gmc_v8_0_init_microcode - load ucode images from disk
  @adev: amdgpu_device pointer
  Use the firmware interface to load the ucode images into
  the driver (not loaded into hw).
  Returns 0 on success, error on failure.
 Polaris12 32bit ASIC needs a special MC firmware 
  gmc_v8_0_tonga_mc_load_microcode - load tonga MC ucode into the hw
  @adev: amdgpu_device pointer
  Load the GDDR MC ucode into the hw (VI).
  Returns 0 on success, error on failure.
	 Skip MC ucode loading on SR-IOV capable boards.
	  vbios does this for us in asic_init in that case.
	  Skip MC ucode loading on VF, because hypervisor will do that
	  for this adaptor.
 reset the engine and set to writable 
 load mc io regs 
 load the MC ucode 
 put the engine back into the active state 
 wait for training to complete 
	 Skip MC ucode loading on SR-IOV capable boards.
	  vbios does this for us in asic_init in that case.
	  Skip MC ucode loading on VF, because hypervisor will do that
	  for this adaptor.
 load mc io regs 
 load the MC ucode 
 put the engine back into the active state 
 wait for training to complete 
  gmc_v8_0_mc_program - program the GPU memory controller
  @adev: amdgpu_device pointer
  Set the location of vram, gart, and AGP in the GPU's
  physical address space (VI).
 Initialize HDP 
 Lockout access through VGA aperture
 disable VGA render 
 Update configuration 
 XXX double check these! 
  gmc_v8_0_mc_init - initialize the memory controller driver params
  @adev: amdgpu_device pointer
  Look up the amount of vram, vram width, and decide how to place
  vram and gart within the GPU's physical address space (VI).
  Returns 0 for success.
 Get VRAM informations 
 size in MB on si 
 In case the PCI BAR is larger than the actual amount of vram 
 set the gart size 
 all engines support GPUVM 
 all engines support GPUVM 
 all engines support GPUVM 
 all engines support GPUVM 
 UVD, VCE do not support GPUVM 
 UVD, VCE do not support GPUVM 
 UVD, VCE do not support GPUVM, DCE SG support 
 UVD does not support GPUVM, DCE SG support 
  gmc_v8_0_flush_gpu_tlb_pasid - tlb flush via pasid
  @adev: amdgpu_device pointer
  @pasid: pasid to be flush
  @flush_type: type of flush
  @all_hub: flush all hubs
  Flush the TLB for the requested pasid.
  GART
  VMID 0 is the physical GPU addresses as used by the kernel.
  VMIDs 1-15 are used for userspace clients and are handled
  by the amdgpu vmhsa code.
  gmc_v8_0_flush_gpu_tlb - gart tlb flush callback
  @adev: amdgpu_device pointer
  @vmid: vm instance to flush
  @vmhub: which hub to flush
  @flush_type: type of flush
  Flush the TLB for the requested page table (VI).
 bits 0-15 are the VM contexts0-15 
 bits 0-15 are the VM contexts0-15 
  PTE format on VI:
  63:40 reserved
  39:12 4k physical page base address
  11:7 fragment
  6 write
  5 read
  4 exe
  3 reserved
  2 snooped
  1 system
  0 valid
  PDE format on VI:
  63:59 block fragment size
  58:40 reserved
  39:1 physical base address of PTE
  bits 5:1 must be 0.
  0 valid
  gmc_v8_0_set_fault_enable_default - update VM fault handling
  @adev: amdgpu_device pointer
  @value: true redirects VM faults to the default page
  gmc_v8_0_set_prt - set PRT VM fault
  @adev: amdgpu_device pointer
  @enable: enabledisable VM fault handling for PRT
  gmc_v8_0_gart_enable - gart enable
  @adev: amdgpu_device pointer
  This sets up the TLBs, programs the page tables for VMID0,
  sets up the hw for VMIDs 1-15 which are allocated on
  demand, and sets up the global locations for the LDS, GDS,
  and GPUVM for FSA64 clients (VI).
  Returns 0 for success, errors for failure.
 Setup TLB control 
 Setup L2 cache 
 XXX: set to enable PTEPDE in system memory 
 setup context0 
 empty context1-15 
	 FIXME start with 4G, once using 2 level pt switch to full
	  vm size space
 set vm size, must be a multiple of 4 
 enable context1-15 
 Initialize common gart structure 
  gmc_v8_0_gart_disable - gart disable
  @adev: amdgpu_device pointer
  This disables all VM page table (VI).
 Disable all tables 
 Setup TLB control 
 Setup L2 cache 
  gmc_v8_0_vm_decode_fault - print human readable fault info
  @adev: amdgpu_device pointer
  @status: VM_CONTEXT1_PROTECTION_FAULT_STATUS register value
  @addr: VM_CONTEXT1_PROTECTION_FAULT_ADDR register value
  @mc_client: VM_CONTEXT1_PROTECTION_FAULT_MCCLIENT register value
  @pasid: debug logging only - no functional use
  Print human readable fault information (VI).
	 Adjust VM size here.
	  Currently set to 4GB ((1 << 20) 4k pages).
	  Max GPUVM size for cayman and SI is 40 bits.
	 Set the internal MC address mask
	  This is the max address of the GPU's
	  internal address space.
 40 bit MC 
 Memory manager 
	
	  number of VMs
	  VMID 0 is reserved for System
	  amdgpu graphicscompute will use VMIDs 1-7
	  amdkfd will use VMIDs 8-15
 base offset of vram pages 
 read MC_STATUS 
 Wait a little for things to settle down 
 system context 
 VMs 
 system context 
 VMs 
 reset addr and status 
 AMD_CG_SUPPORT_MC_MGCG 
 AMD_CG_SUPPORT_MC_LS 
  Copyright 2020 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Copyright 2021 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 allocate 4k Page of Local Frame Buffer memory for ring 
 Write the ring destroy command
 there might be handshake issue with hardware which needs delay 
 Wait for response flag (bit 31) 
 Write the ring destroy command
 there might be handshake issue with hardware which needs delay 
 Wait for response flag (bit 31) 
 Write low address of the ring to C2PMSG_102 
 Write high address of the ring to C2PMSG_103 
 Write the ring initialization command to C2PMSG_101 
 there might be handshake issue with hardware which needs delay 
 Wait for response flag (bit 31) in C2PMSG_101 
 Wait for sOS ready for ring creation 
 Write low address of the ring to C2PMSG_69 
 Write high address of the ring to C2PMSG_70 
 Write size of ring to C2PMSG_71 
 Write the ring initialization command to C2PMSG_64 
 there might be handshake issue with hardware which needs delay 
 Wait for response flag (bit 31) in C2PMSG_64 
  Copyright 2019 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  based on nouveau_prime.c
  Authors: Alex Deucher
  DOC: PRIME Buffer Sharing
  The following callback implementations are used for :ref:`sharing GEM buffer
  objects between different devices via PRIME <prime_buffer_sharing>`.
  amdgpu_dma_buf_attach - &dma_buf_ops.attach implementation
  @dmabuf: DMA-buf where we attach to
  @attach: attachment to add
  Add the attachment as user to the exported DMA-buf.
  amdgpu_dma_buf_detach - &dma_buf_ops.detach implementation
  @dmabuf: DMA-buf where we remove the attachment from
  @attach: the attachment to remove
  Called when an attachment is removed from the DMA-buf.
  amdgpu_dma_buf_pin - &dma_buf_ops.pin implementation
  @attach: attachment to pin down
  Pin the BO which is backing the DMA-buf so that it can't move any more.
 pin buffer into GTT 
  amdgpu_dma_buf_unpin - &dma_buf_ops.unpin implementation
  @attach: attachment to unpin
  Unpin a previously pinned BO to make it movable again.
  amdgpu_dma_buf_map - &dma_buf_ops.map_dma_buf implementation
  @attach: DMA-buf attachment
  @dir: DMA direction
  Makes sure that the shared DMA buffer can be accessed by the target device.
  For now, simply pins it to the GTT domain, where it should be accessible by
  all DMA devices.
  Returns:
  sg_table filled with the DMA addresses to use or ERR_PRT with negative error
  code.
 move buffer into GTT or VRAM 
  amdgpu_dma_buf_unmap - &dma_buf_ops.unmap_dma_buf implementation
  @attach: DMA-buf attachment
  @sgt: sg_table to unmap
  @dir: DMA direction
  This is called when a shared DMA buffer no longer needs to be accessible by
  another device. For now, simply unpins the buffer from GTT.
  amdgpu_dma_buf_begin_cpu_access - &dma_buf_ops.begin_cpu_access implementation
  @dma_buf: Shared DMA buffer
  @direction: Direction of DMA transfer
  This is called before CPU access to the shared DMA buffer's memory. If it's
  a read access, the buffer is moved to the GTT domain if possible, for optimal
  CPU read performance.
  Returns:
  0 on success or a negative error code on failure.
 move to gtt 
  amdgpu_gem_prime_export - &drm_driver.gem_prime_export implementation
  @gobj: GEM BO
  @flags: Flags such as DRM_CLOEXEC and DRM_RDWR.
  The main work is done by the &drm_gem_prime_export helper.
  Returns:
  Shared DMA buffer representing the GEM BO from the given device.
  amdgpu_dma_buf_create_obj - create BO for DMA-buf import
  @dev: DRM device
  @dma_buf: DMA-buf
  Creates an empty SG BO for DMA-buf import.
  Returns:
  A new GEM BO of the given DRM device, representing the memory
  described by the given DMA-buf attachment and scattergather table.
  amdgpu_dma_buf_move_notify - &attach.move_notify implementation
  @attach: the DMA-buf attachment
  Invalidate the DMA-buf attachment, making sure that the we re-create the
  mapping before the next use.
			 When we get an error here it means that somebody
			  else is holding the VM lock and updating page tables
			  So we can just continue here.
			 TODO: This is more problematic and we actually need
			  to allow page tables updates without holding the
			  lock.
  amdgpu_gem_prime_import - &drm_driver.gem_prime_import implementation
  @dev: DRM device
  @dma_buf: Shared DMA buffer
  Import a dma_buf into a the driver and potentially create a new GEM object.
  Returns:
  GEM BO representing the shared DMA buffer for the given device.
			
			  Importing dmabuf exported from out own gem increases
			  refcount on gem itself instead of f_count of dmabuf.
  amdgpu_dmabuf_is_xgmi_accessible - Check if xgmi available for P2P transfer
  @adev: amdgpu_device pointer of the importer
  @bo: amdgpu buffer object
  Returns:
  True if dmabuf accessible over xgmi, false otherwise.
 No XGMI with non AMD GPUs 
  Copyright 2019 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  sdma_v5_2_init_microcode - load ucode images from disk
  @adev: amdgpu_device pointer
  Use the firmware interface to load the ucode images into
  the driver (not loaded into hw).
  Returns 0 on success, error on failure.
 emulation only, won't work on real chip
 navi10 real chip need to use PSP to load firmware
 this is the offset we need patch later 
 insert dummy here and patch it later 
  sdma_v5_2_ring_get_rptr - get the current read pointer
  @ring: amdgpu ring pointer
  Get the current rptr from the hardware (NAVI10+).
 XXX check if swapping is necessary on BE 
  sdma_v5_2_ring_get_wptr - get the current write pointer
  @ring: amdgpu ring pointer
  Get the current wptr from the hardware (NAVI10+).
 XXX check if swapping is necessary on BE 
  sdma_v5_2_ring_set_wptr - commit the write pointer
  @ring: amdgpu ring pointer
  Write the wptr back to the hardware (NAVI10+).
 XXX check if swapping is necessary on BE 
  sdma_v5_2_ring_emit_ib - Schedule an IB on the DMA engine
  @ring: amdgpu ring pointer
  @job: job to retrieve vmid from
  @ib: IB object to schedule
  @flags: unused
  Schedule an IB in the DMA ring.
	 An IB packet must end on a 8 DW boundary--the next dword
	  must be on a 8-dword boundary. Our IB packet below is 6
	  dwords long, thus add x number of NOPs, such that, in
	  modular arithmetic,
	  wptr + 6 + x = 8k, k >= 0, which in C is,
	  (wptr + 6 + x) % 8 = 0.
	  The expression below, is a solution of x.
 base must be 32 byte aligned 
  sdma_v5_2_ring_emit_mem_sync - flush the IB by graphics cache rinse
  @ring: amdgpu ring pointer
  @job: job to retrieve vmid from
  @ib: IB object to schedule
  flush the IB by graphics cache rinse.
 flush entire cache L0L1L2, this can be optimized by performance requirement 
  sdma_v5_2_ring_emit_hdp_flush - emit an hdp flush on the DMA ring
  @ring: amdgpu ring pointer
  Emit an hdp flush packet on the requested DMA ring.
 == 
 reference 
 mask 
 retry count, poll interval 
  sdma_v5_2_ring_emit_fence - emit a fence on the DMA ring
  @ring: amdgpu ring pointer
  @addr: address
  @seq: sequence number
  @flags: fence related flags
  Add a DMA fence packet to the ring to write
  the fence seq number and DMA trap packet to generate
  an interrupt if needed.
 write the fence 
 Ucached(UC) 
 zero in first two bits 
 optionally write high bits as well 
 zero in first two bits 
 generate an interrupt 
  sdma_v5_2_gfx_stop - stop the gfx async dma engines
  @adev: amdgpu_device pointer
  Stop the gfx async dma ring buffers.
  sdma_v5_2_rlc_stop - stop the compute async dma engines
  @adev: amdgpu_device pointer
  Stop the compute async dma queues.
 XXX todo 
  sdma_v5_2_ctx_switch_enable - stop the async dma engines context switch
  @adev: amdgpu_device pointer
  @enable: enabledisable the DMA MEs context switch.
  Halt or unhalt the async dma engines context switch.
  sdma_v5_2_enable - stop the async dma engines
  @adev: amdgpu_device pointer
  @enable: enabledisable the DMA MEs.
  Halt or unhalt the async dma engines.
  sdma_v5_2_gfx_resume - setup and start the async dma engines
  @adev: amdgpu_device pointer
  Set up the gfx DMA ring buffers and enable them.
  Returns 0 for success, error for failure.
 Set ring buffer size in dwords 
 Initialize the ring buffer's read and write pointers 
 setup the wptr shadow polling 
 set the wb address whether it's enabled or not 
 before programing wptr to a less value, need set minor_ptr_update first 
 only bare-metal use register write for wptr 
 set minor_ptr_update to 0 after wptr programed 
 set utc l1 enable flag always to 1 
 enable MCBP 
 Set up RESP_MODE to non-copy addresses 
 program default cache read and write policy 
 clean read policy and write policy bits 
 unhalt engine 
 enable DMA RB 
 enable DMA IBs 
 bare-metal sequence doesn't need below to lines 
  sdma_v5_2_rlc_resume - setup and start the async dma engines
  @adev: amdgpu_device pointer
  Set up the compute DMA queues and enable them.
  Returns 0 for success, error for failure.
  sdma_v5_2_load_microcode - load the sDMA ME ucode
  @adev: amdgpu_device pointer
  Loads the sDMA0123 ucode.
  Returns 0 for success, -EINVAL if the ucode is not available.
 halt the MEs 
  sdma_v5_2_start - setup and start the async dma engines
  @adev: amdgpu_device pointer
  Set up the DMA engines and enable them.
  Returns 0 for success, error for failure.
 set RB registers 
 The value of mmSDMA_F32_CNTL is invalid the moment after loading fw 
	 TODO: check whether can submit a doorbell request to raise
	  a doorbell fence to exit gfxoff.
 unhalt the MEs 
 enable sdma ring preemption 
 start the gfx rings and rlc compute queues 
  sdma_v5_2_ring_test_ring - simple async dma engine test
  @ring: amdgpu_ring structure holding ring information
  Test the DMA engine by writing using it to write an
  value to memory.
  Returns 0 for success, error for failure.
  sdma_v5_2_ring_test_ib - test an IB on the DMA engine
  @ring: amdgpu_ring structure holding ring information
  @timeout: timeout value in jiffies, or MAX_SCHEDULE_TIMEOUT
  Test a simple IB in the DMA ring.
  Returns 0 on success, error on failure.
  sdma_v5_2_vm_copy_pte - update PTEs by copying them from the GART
  @ib: indirect buffer to fill with commands
  @pe: addr of the page entry
  @src: src addr to copy from
  @count: number of page entries to update
  Update PTEs by copying them from the GART using sDMA.
 srcdst endian swap 
  sdma_v5_2_vm_write_pte - update PTEs by writing them manually
  @ib: indirect buffer to fill with commands
  @pe: addr of the page entry
  @value: dst addr to write into pe
  @count: number of page entries to update
  @incr: increase next addr by incr bytes
  Update PTEs by writing them manually using sDMA.
  sdma_v5_2_vm_set_pte_pde - update the page tables using sDMA
  @ib: indirect buffer to fill with commands
  @pe: addr of the page entry
  @addr: dst addr to write into pe
  @count: number of page entries to update
  @incr: increase next addr by incr bytes
  @flags: access flags
  Update the page tables using sDMA.
 for physically contiguous pages (vram) 
 dst addr 
 mask 
 value 
 increment size 
 number of entries 
  sdma_v5_2_ring_pad_ib - pad the IB
  @ib: indirect buffer to fill with padding
  @ring: amdgpu_ring structure holding ring information
  Pad the IB with NOPs to a boundary multiple of 8.
  sdma_v5_2_ring_emit_pipeline_sync - sync the pipeline
  @ring: amdgpu_ring pointer
  Make sure all previous operations are completed (CIK).
 wait for idle 
 equal 
 reference 
 mask 
 retry count, poll interval 
  sdma_v5_2_ring_emit_vm_flush - vm flush using sDMA
  @ring: amdgpu_ring pointer
  @vmid: vmid number to use
  @pd_addr: address
  Update the page table base and flush the VM TLB
  using sDMA.
 equal 
 reference 
 mask 
 wait for a cycle to reset vm_inv_eng_ack 
 SDMA trap event 
get DWORD offset
 assert preemption condition 
 emit the trailing fence 
 assert IB preemption 
 poll the trailing fence 
 deassert IB preemption 
 deassert the preemption condition 
 XXX compute 
 XXX compute 
 XXX page queue
 XXX compute 
 XXX compute 
 XXX page queue
 XXX compute 
 XXX compute 
 XXX page queue
 XXX compute 
 XXX compute 
 XXX page queue
 Enable sdma clock gating 
 Disable sdma clock gating 
 Enable sdma mem light sleep 
 Disable sdma mem light sleep 
 AMD_CG_SUPPORT_SDMA_LS 
 sdma_v5_2_ring_init_cond_exec 
 sdma_v5_2_ring_emit_hdp_flush 
 hdp_invalidate 
 sdma_v5_2_ring_emit_pipeline_sync 
 sdma_v5_2_ring_emit_vm_flush 
 sdma_v5_2_ring_emit_fence x3 for user fence, vm fence 
 sdma_v5_2_ring_emit_ib 
  sdma_v5_2_emit_copy_buffer - copy buffer using the sDMA engine
  @ib: indirect buffer to copy to
  @src_offset: src GPU address
  @dst_offset: dst GPU address
  @byte_count: number of bytes to xfer
  @tmz: if a secure copy should be used
  Copy GPU buffers using the DMA engine.
  Used by the amdgpu ttm implementation to move pages if
  registered as the asic copy callback.
 srcdst endian swap 
  sdma_v5_2_emit_fill_buffer - fill buffer using the sDMA engine
  @ib: indirect buffer to fill
  @src_data: value to write to buffer
  @dst_offset: dst GPU address
  @byte_count: number of bytes to xfer
  Fill GPU buffers using the DMA engine.
  Copyright 2019 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  jpeg_v2_0_early_init - set function pointers
  @handle: amdgpu_device pointer
  Set ring and irq function pointers
  jpeg_v2_0_sw_init - sw init for JPEG block
  @handle: amdgpu_device pointer
  Load firmware and sw initialization
 JPEG TRAP 
  jpeg_v2_0_sw_fini - sw fini for JPEG block
  @handle: amdgpu_device pointer
  JPEG suspend and free up sw allocation
  jpeg_v2_0_hw_init - start and test JPEG block
  @handle: amdgpu_device pointer
  jpeg_v2_0_hw_fini - stop the hardware block
  @handle: amdgpu_device pointer
  Stop the JPEG block, mark ring as not ready any more
  jpeg_v2_0_suspend - suspend JPEG block
  @handle: amdgpu_device pointer
  HW fini and suspend JPEG block
  jpeg_v2_0_resume - resume JPEG block
  @handle: amdgpu_device pointer
  Resume firmware and hw init JPEG block
 Removing the anti hang mechanism to indicate the UVDJ tile is ON 
UVD_JPEG_POWER_STATUS__JPEG_POWER_STATUS_TILES_OFF;
  jpeg_v2_0_start - start JPEG block
  @adev: amdgpu_device pointer
  Setup and start the JPEG block
 disable power gating 
 JPEG disable CGC 
 enable JMI channel 
 enable System Interrupt for JRBC 
  jpeg_v2_0_stop - stop JPEG block
  @adev: amdgpu_device pointer
  stop the JPEG block
 reset JMI 
 enable JPEG CGC 
 enable power gating 
  jpeg_v2_0_dec_ring_get_rptr - get read pointer
  @ring: amdgpu_ring pointer
  Returns the current hardware read pointer
  jpeg_v2_0_dec_ring_get_wptr - get write pointer
  @ring: amdgpu_ring pointer
  Returns the current hardware write pointer
  jpeg_v2_0_dec_ring_set_wptr - set write pointer
  @ring: amdgpu_ring pointer
  Commits the write pointer to the hardware
  jpeg_v2_0_dec_ring_insert_start - insert a start command
  @ring: amdgpu_ring pointer
  Write a start command to the ring.
  jpeg_v2_0_dec_ring_insert_end - insert a end command
  @ring: amdgpu_ring pointer
  Write a end command to the ring.
  jpeg_v2_0_dec_ring_emit_fence - emit an fence & trap command
  @ring: amdgpu_ring pointer
  @addr: address
  @seq: sequence number
  @flags: fence related flags
  Write a fence and a trap command to the ring.
  jpeg_v2_0_dec_ring_emit_ib - execute indirect buffer
  @ring: amdgpu_ring pointer
  @job: job to retrieve vmid from
  @ib: indirect buffer to execute
  @flags: unused
  Write ring commands to execute the indirect buffer.
 wait for register write 
 jpeg_v2_0_dec_ring_emit_vm_flush 
 jpeg_v2_0_dec_ring_emit_fence x2 vm fence 
 jpeg_v2_0_dec_ring_emit_ib 
  Copyright 2020 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 CPC 
 DC 
 CPF 
 GDS 
 SPI 
 SQ 
 SQC 
 TA 
 TCA 
 TCC 
 TCI 
 TCP 
 TD 
 GCEA 
 RLC 
 CPC 
 CPF 
 GDS 
 SPI 
 SQ 
 SQC 
 TA 
 TCA 
 TCC 
 TCI 
 TCP 
 TD 
 EA 
 RLC 
				 SDP readwrite errorparity error in FUE_IS_FATAL mode
				  can cause system fatal error in arcturas. Harvest the error
  Copyright 2020 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 HW has more IP blocks,  only initialize the block needed by driver 
 SPDX-License-Identifier: GPL-2.0+
  DOC: amdgpu_vkms
  The amdgpu vkms interface provides a virtual KMS interface for several use
  cases: devices without display hardware, platforms where the actual display
  hardware is not useful (e.g., servers), SR-IOV virtual functions, device
  emulationsimulation, and device bring up prior to display hardware being
  usable. We previously emulated a legacy KMS interface, but there was a desire
  to move to the atomic KMS interface. The vkms driver did everything we
  needed, but we wanted KMS support natively in the driver without buffer
  sharing and the ability to support an instance of VKMS per device. We first
  looked at splitting vkms into a stub driver and a helper module that other
  drivers could use to implement a virtual display, but this strategy ended up
  being messy due to driver specific callbacks needed for buffer management.
  Ultimately, it proved easier to import the vkms code as it mostly used core
  drm helpers anyway.
	
	  To prevent races we roll the hrtimer forward before we do any
	  interrupt processing - this is how real hw works (the interrupt is
	  only generated after all the vblank registers are updated) and what
	  the vblank core expects. Therefore we need to always correct the
	  timestampe by one frame.
 for now primary plane must be visible and full screen 
 allocate crtcs, encoders, connectors 
 no DCE 
  Copyright 2007-8 Advanced Micro Devices, Inc.
  Copyright 2008 Red Hat Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: Dave Airlie
           Alex Deucher
 Skip TVCV support 
 look up gpio for ddc, hpd 
 needed for aux chan transactions 
 pixel clocks 
 system clock 
 ??? 
 memory clock 
 ??? 
 disp clock 
 set a reasonable default for DP 
 not technically a clock, but... 
  Return vram width from integrated system info table, if available,
  or 0 if not.
 get any igp specific overrides 
 get any igp specific overrides 
		 r6xx, r7xx, evergreen, ni, si.
 for SI we use ComputeMemoryClockParam for memory plls 
 fusion 
 10 khz 
 CI 
 COMPUTE_GPUCLK_INPUT_FLAG_DEFAULT_GPUCLK, COMPUTE_GPUCLK_INPUT_FLAG_SCLK 
 10 khz 
 SI 
 10 khz 
 let the bios control the backlight 
 tell the bios not to handle mode switching 
 clear the vbios dpms state 
 Atom needs data in little endian format so swap as appropriate when copying
  data to or from atom. Note that atom operates on dw units.
  Use to_le=true when sending data to atom and provide at least
  ALIGN(num_bytes,4) bytes in the dst buffer.
  Use to_le=false when receiving data from atom and provide ALIGN(num_bytes,4)
  byes in the src buffer.
 Firmware request VRAM reservation for SR-IOV 
 Use the default scratch size 
 allocate some scratch memory 
 ATOM accessor methods 
  ATOM is an interpreted byte code stored in tables in the vbios.  The
  driver registers callbacks to access registers and the interpreter
  in the driver parses the tables and executes then to program specific
  actions (set display modes, asic init, etc.).  See amdgpu_atombios.c,
  atombios.h, and atom.c
  cail_pll_read - read PLL register
  @info: atom card_info pointer
  @reg: PLL register offset
  Provides a PLL register accessor for the atom interpreter (r4xx+).
  Returns the value of the PLL register.
  cail_pll_write - write PLL register
  @info: atom card_info pointer
  @reg: PLL register offset
  @val: value to write to the pll register
  Provides a PLL register accessor for the atom interpreter (r4xx+).
  cail_mc_read - read MC (Memory Controller) register
  @info: atom card_info pointer
  @reg: MC register offset
  Provides an MC register accessor for the atom interpreter (r4xx+).
  Returns the value of the MC register.
  cail_mc_write - write MC (Memory Controller) register
  @info: atom card_info pointer
  @reg: MC register offset
  @val: value to write to the pll register
  Provides a MC register accessor for the atom interpreter (r4xx+).
  cail_reg_write - write MMIO register
  @info: atom card_info pointer
  @reg: MMIO register offset
  @val: value to write to the pll register
  Provides a MMIO register accessor for the atom interpreter (r4xx+).
  cail_reg_read - read MMIO register
  @info: atom card_info pointer
  @reg: MMIO register offset
  Provides an MMIO register accessor for the atom interpreter (r4xx+).
  Returns the value of the MMIO register.
  amdgpu_atombios_fini - free the driver info and callbacks for atombios
  @adev: amdgpu_device pointer
  Frees the driver info and register access callbacks for the ATOM
  interpreter (r4xx+).
  Called at driver shutdown.
  amdgpu_atombios_init - init the driver info and callbacks for atombios
  @adev: amdgpu_device pointer
  Initializes the driver info and register access callbacks for the
  ATOM interpreter (r4xx+).
  Returns 0 on sucess, -ENOMEM on failure.
  Called at driver startup.
 cached firmware_flags for further usage 
  Copyright 2014-2018 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 Userptr restore delay, just long enough to allow consecutive VM
  changes to accumulate
 Impose limit on how much memory KFD can use 
 Set memory usage limits. Current, limits are
   System (TTM + userptr) memory - 1516th System RAM
   TTM memory - 38th System RAM
 Estimate page table size needed to represent a given memory size
  With 4KB pages, we need one 8 byte PTE for each 4KB of memory
  (factor 512, >> 9). With 2MB pages, we need one 8 byte PTE for 2MB
  of memory (factor 256K, >> 18). ROCm user mode tries to optimize
  for 2MB pages for TLB efficiency. However, small allocations and
  fragmented system memory still need some 4KB pages. We choose a
  compromise that should work in most cases without reserving too
  much memory for page tables unnecessarily (factor 16K, >> 14).
 TTM GTT memory 
 Userptr 
 VRAM and SG 
 amdgpu_amdkfd_remove_eviction_fence - Removes eviction fence from BO's
   reservation object.
  @bo: [IN] Remove eviction fence(s) from this BO
  @ef: [IN] This eviction fence is removed if it
   is present in the shared list.
  NOTE: Must be called with BO reserved i.e. bo->tbo.resv->lock held.
	 Go through all the shared fences in the resevation object and sort
	  the interesting ones to the end of the list.
 Install the new fence list, seqcount provides the barriers 
 Drop the references to the removed fences or move them to ef_list 
 we can always get vm_bo from root PD bo.
 vm_validate_pt_pd_bos - Validate page table and directory BOs
  Page directories are not updated here because huge page handling
  during page table updates can invalidate page directory entries
  again. Page directories are only updated after updating page
  tables.
 Same sequence as in amdgpu_ttm_tt_pin_userptr 
	 Import takes an extra reference on the dmabuf. Drop it now to
	  avoid leaking it. We only need the one reference in
	  kgd_mem->dmabuf.
 kfd_mem_attach - Add a BO to a VM
  Everything that needs to bo done only once when a BO is first added
  to a VM. It can later be mapped and unmapped many times without
  repeating these steps.
  0. Create BO for DMA mapping, if needed
  1. Allocate and initialize BO VA entry data structure
  2. Add BO to the VM
  3. Determine ASIC-specific PTE flags
  4. Alloc page tables and directories if needed
  4a.  Validate new page tables and directories
			 Mappings on the local GPU and VRAM mappings in the
			  local hive share the original BO
 Multiple mappings on the same GPU share the BO 
 Create an SG BO to DMA-map userptrs on other GPUs 
			 GTT BOs use DMA-mapping ability of dynamic-attach
			  DMA bufs. TODO: The same should work for VRAM on
			  large-BAR GPUs.
			 FIXME: Need to DMA-map other BO types:
			  large-BAR VRAM, doorbells, MMIO remap
 Add BO to VM internal data structures 
 Initializes user pages. It registers the MMU notifier and validates
  the userptr BO in the GTT domain.
  The BO must already be on the userptr_valid_list. Otherwise an
  eviction and restore may happen that leaves the new BO unmapped
  with the user mode queues running.
  Takes the process_info->lock to protect against concurrent restore
  workers.
  Returns 0 for success, negative errno for errors.
 Reserving a BO and its page table BOs must happen atomically to
  avoid deadlocks. Some operations update multiple VMs at once. Track
  all the reservation info in a context structure. Optionally a sync
  object can track VM updates.
 BO list entry for the KFD BO 
 Number of VMs reserved	    
 Array of VM BO list entries  
 Reservation ticket	    
 BO lists			    
 Pointer to sync object	    
 Whether BOs are reserved	    
 Match VMs where a BO is not mapped 
 Match VMs where a BO is mapped     
 Match all VMs a BO was added to    
  reserve_bo_and_vm - reserve a BO and a VM unconditionally.
  @mem: KFD BO structure.
  @vm: the VM to reserve.
  @ctx: the struct that will be used in unreserve_bo_and_vms().
  reserve_bo_and_cond_vms - reserve a BO and some VMs conditionally
  @mem: KFD BO structure.
  @vm: the VM to reserve. If NULL, then all VMs associated with the BO
  is used. Otherwise, a single VM associated with the BO.
  @map_type: the mapping status that will be used to filter the VMs.
  @ctx: the struct that will be used in unreserve_bo_and_vms().
  Returns 0 for success, negative for failure.
  unreserve_bo_and_vms - Unreserve BO and VMs from a reservation context
  @ctx: Reservation context to unreserve
  @wait: Optionally wait for a sync object representing pending VM updates
  @intr: Whether the wait is interruptible
  Also frees any resources allocated in
  reserve_bo_and_(cond_)vm(s). Returns the status from
  amdgpu_sync_wait.
 Update the page tables  
 Set virtual address for the allocation 
 Validate page directory and attach eviction fence 
 Update process info 
 Two fence references: one in info and one in ef 
 Already a compute VM? 
	 Free the original amdgpu allocated pasid,
	  will be replaced with kfd allocated pasid.
 Convert VM into a compute VM 
 Initialize KFD part of the VM and process info 
 Release eviction fence from PD 
 Update process info 
 Release per-process resources when last compute VM is destroyed 
	 The original pasid of amdgpu vm has already been
	  released during making a amdgpu vm to a compute vm
	  The current pasid is managed by kfd and will be
	  released on kfd process destroy. Set amdgpu pasid
	  to 0 to avoid duplicate release.
	
	  Check on which domain to allocate BO
	 Workaround for AQL queue wraparound bug. Map the same
	  memory twice. That means we only actually allocate half
	  the memory.
 Don't unreserve system mem limit twice 
	 lock is not needed after this, since mem is unused and will
	  be freed anyway
 Make sure restore workers don't access the BO any more 
 No more MMU notifiers 
	 The eviction fence should be removed by the last unmap.
	  TODO: Log an error condition if the bo still has the eviction fence
	  attached
 Remove from VM internal data structures 
 Free the sync object 
	 If the SG is not NULL, it's one we created for a doorbell or mmio
	  remap BO. We need to free it.
	 Update the size of the BO being freed if it was allocated from
	  VRAM and is not imported.
 Free the BO
	 If this releases the last reference, it will end up calling
	  amdgpu_amdkfd_release_notify and kfree the mem struct. That's why
	  this needs to be the last call here.
	 Make sure restore is not running concurrently. Since we
	  don't map invalid userptr BOs, we rely on the next restore
	  worker to do the mapping
	 Lock mmap-sem. If we find an invalid userptr BO, we can be
	  sure that the MMU notifier is no longer running
	  concurrently and the queues are actually stopped
	 Userptr can be marked as "not invalid", but not actually be
	  validated yet (still in the system domain). In that case
	  the queues are still stopped and we can leave mapping for
	  the next restore worker
		 Validate BO only once. The eviction fence gets added to BO
		  the first time it is mapped. Validate will wait for all
		  background evictions to complete.
	 Only apply no TLB flush on Aldebaran to
	  workaround regressions on other Asics.
 If no VMs were reserved, it means the BO wasn't actually mapped 
	 If BO is unmapped from all VMs, unfence it. It can be evicted if
	  required.
	 delete kgd_mem from kfd_bo_list to avoid re-validating
	  this BO in BO's restoring after eviction.
 Can't handle non-graphics buffers 
 Can't handle buffers from other devices 
 Only VRAM and GTT BOs are supported 
 Evict a userptr BO by stopping the queues if necessary
  Runs in MMU notifier, may be in RECLAIM_FS context. This means it
  cannot do any memory allocations, and cannot take any locks that
  are held elsewhere while allocating memory. Therefore this is as
  simple as possible, using atomic counters.
  It doesn't do anything to the BO itself. The real work happens in
  restore, where we get updated page addresses. This function only
  ensures that GPU access to the BO is stopped.
 First eviction, stop the queues 
 Update invalid userptr BOs
  Moves invalidated (evicted) userptr BOs from userptr_valid_list to
  userptr_inval_list and updates user pages for all BOs that have
  been invalidated since their last update.
	 Move all invalidated BOs to the userptr_inval_list and
	  release their user pages by migration to the CPU domain
 BO is still valid 
 All evicted userptr BOs were freed 
 Go through userptr_inval_list and update any invalid user_pages 
			 BO hasn't been invalidated since the last
			  revalidation attempt. Keep its BO list.
 Get updated user pages 
			 Return -EFAULT bad address error as success. It will
			  fail later with a VM fault if the GPU tries to access
			  it. Better than hanging indefinitely with stalled
			  user mode queues.
			 
			  Return other error -EBUSY or -ENOMEM to retry restore
			
			  FIXME: Cannot ignore the return code, must hold
			  notifier_lock
		 Mark the BO as valid unless it was invalidated
		  again concurrently.
 Validate invalid userptr BOs
  Validates BOs on the userptr_inval_list, and moves them back to the
  userptr_valid_list. Also updates GPUVM page tables with new page
  addresses and waits for the page table updates to complete.
 Get all the page directory BOs that need to be reserved 
 Add the userptr_inval_list entries to resv_list 
 Reserve all BOs and page tables for validation 
 Validate BOs and update GPUVM page tables 
 Validate the BO if we got user pages 
		 Update mapping. If the BO was not validated
		  (because we couldn't get user pages), this will
		  clear the page table entries, which will result in
		  VM faults if the GPU tries to access the invalid
		  memory.
 make sure this gets validated again 
 Update page directories 
 Worker callback to restore evicted userptr BOs
  Tries to update and validate all userptr BOs. If successful and no
  concurrent evictions happened, the queues are restarted. Otherwise,
  reschedule for another attempt later.
 Reference task and mm in case of concurrent process termination 
	 userptr_inval_list can be empty if all evicted userptr BOs
	  have been freed. In that case there is nothing to validate
	  and we can just restart the queues.
 Concurrent eviction, try again 
	 Final check for concurrent evicton and atomic update. If
	  another eviction happens after successful update, it will
	  be a first eviction that calls quiesce_mm. The eviction
	  reference counting inside KFD will handle this case.
		 No recovery from this failure. Probably the CP is
		  hanging. No point trying again.
 If validation failed, reschedule another attempt 
 amdgpu_amdkfd_gpuvm_restore_process_bos - Restore all BOs for the given
    KFD process identified by process_info
  @process_info: amdkfd_process_info of the KFD process
  After memory eviction, restore thread calls this function. The function
  should be called when the Process is still valid. BO restore involves -
  1.  Release old eviction fence and create new one
  2.  Get two copies of PD BO list from all the VMs. Keep one copy as pd_list.
  3   Use the second PD list and kfd_bo_list to create a list (ctx.list) of
      BOs that need to be reserved.
  4.  Reserve all the BOs
  5.  Validate of PD and PT BOs.
  6.  Validate all KFD BOs using kfd_bo_list and Map them and add new fence
  7.  Add fence to all PD and PT BOs.
  8.  Unreserve all BOs
	 Reserve all BOs and page tablesdirectory. Add all BOs from
	  kfd_bo_list to ctx.list
 Validate PDs and PTs 
 Validate BOs and map them to GPUVM (update VM page tables). 
 Update page directories 
 Wait for validate and PT updates to finish 
	 Release old eviction fence and create new one, because fence only
	  goes from unsignaled to signaled, fence cannot be reused.
	  Use context and mm from the old fence.
 Attach new eviction fence to all BOs 
 Attach eviction fence to PD  PT BOs 
 Validate gws bo the first time it is added to process 
	 GWS resource is shared bt amdgpu and amdkfd
	  Add process eviction fence to bo so they can
	  evict each other.
	 Remove BO from process's validate list so restore worker won't touch
	  it anymore
TODO add BO back to validate_list?
 Returns GPU-specific tiling mode information 
 Those values are not set from GFX9 onwards 
  Copyright 2016 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  vega10_ih_init_register_offset - Initialize register offset for ih rings
  @adev: amdgpu_device pointer
  Initialize register offset ih rings (VEGA10).
  vega10_ih_toggle_ring_interrupts - toggle the interrupt ring buffer
  @adev: amdgpu_device pointer
  @ih: amdgpu_ih_ring pointet
  @enable: true - enable the interrupts, false - disable the interrupts
  Toggle the interrupt ring buffer (VEGA10)
 enable_intr field is only valid in ring0 
 set rptr, wptr to 0 
  vega10_ih_toggle_interrupts - Toggle all the available interrupt ring buffers
  @adev: amdgpu_device pointer
  @enable: enable or disable interrupt ring buffers
  Toggle all the available interrupt ring buffers (VEGA10).
	 Ring Buffer write pointer writeback. If enabled, IH_RB_WPTR register
	  value is written to memory
  vega10_ih_enable_ring - enable an ih ring buffer
  @adev: amdgpu_device pointer
  @ih: amdgpu_ih_ring pointer
  Enable an ih ring buffer (VEGA10)
 Ring Buffer base. [39:8] of 40-bit address of the beginning of the ring buffer
 set the ih ring 0 writeback address whether it's enabled or not 
 set rptr, wptr to 0 
  vega10_ih_irq_init - init and enable the interrupt ring
  @adev: amdgpu_device pointer
  Allocate a ring buffer for the interrupt controller,
  enable the RLC, disable interrupts, enable the IH
  ring buffer and enable it (VI).
  Called at device load and reume.
  Returns 0 for success, errors for failure.
 disable irqs 
 enable interrupts 
  vega10_ih_irq_disable - disable interrupts
  @adev: amdgpu_device pointer
  Disable interrupts on the hw (VEGA10).
 Wait and acknowledge irq 
  vega10_ih_get_wptr - get the IH ring buffer wptr
  @adev: amdgpu_device pointer
  @ih: IH ring buffer to fetch wptr
  Get the IH ring buffer wptr from either the register
  or the writeback memory buffer (VEGA10).  Also check for
  ring buffer overflow and deal with it.
  Returns the value of the wptr.
		 Only ring0 supports writeback. On other rings fall back
		  to register-based code with overflow checking below.
 Double check that the overflow wasn't already cleared. 
	 When a ring buffer overflow happen start parsing interrupt
	  from the last not overwritten vector (wptr + 32). Hopefully
	  this should allow us to catchup.
  vega10_ih_irq_rearm - rearm IRQ if lost
  @adev: amdgpu_device pointer
  @ih: IH ring to match
 Rearm IRQ  re-wwrite doorbell if doorbell write is lost 
  vega10_ih_set_rptr - set the IH ring buffer rptr
  @adev: amdgpu_device pointer
  @ih: IH ring buffer to set rptr
  Set the IH ring buffer rptr.
 XXX check if swapping is necessary on BE 
  vega10_ih_self_irq - dispatch work for ring 1 and 2
  @adev: amdgpu_device pointer
  @source: irq source
  @entry: IV with WPTR update
  Update the WPTR from the IV and schedule work to handle the entries.
 initialize ih control registers offset 
 todo 
 todo 
 todo 
		
		  Vega1012 and RAVEN don't have IH_BUFFER_MEM_CLK_SOFT_OVERRIDE field.
  Copyright 2017 Valve Corporation
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: Andres Rodriguez <andresx7@gmail.com>
	 First check the op, then the op's argument.
		 Impossible.
  Copyright 2020 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  DOC: AMDGPU RAP debugfs test interface
  how to use?
  echo opcode > <debugfs_dir>drixxxrap_test
  opcode:
  currently, only 2 is supported by Linux host driver,
  opcode 2 stands for TA_CMD_RAP__VALIDATE_L0, used to
  trigger L0 policy validation, you can refer more detail
  from header file ta_rap_if.h
	 make sure gfx core is on, RAP TA cann't handle
	  GFX OFF case currently.
  Copyright 2018 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 Defined in global_features.h as FTI_PERFMON_VISIBLE 
 get flags from df perfmon config 
  df_v3_6_perfmon_rreg - read perfmon lo and hi
  required to be atomic.  no mmio method provided so subsequent reads for lo
  and hi require to preserve df finite state machine
  df_v3_6_perfmon_wreg - write to perfmon lo and hi
  required to be atomic.  no mmio method provided so subsequent reads after
  data writes cannot occur to preserve data fabrics finite state machine.
 same as perfmon_wreg but return status on write value check 
  retry arming counters every 100 usecs within 1 millisecond interval.
  if retry fails after time out, return error.
 get the number of df counters available 
 device attr for available perfmon counters 
 encoding for hash-enabled on Arcturus and Aldebaran 
 init perfmons 
 Put DF on broadcast mode 
 Exit broadcast mode 
 AMD_CG_SUPPORT_DF_MGCG 
 get assigned df perfmon ctr as int 
 get address based on counter assignment 
 get read counter address 
 get control counter settings i.e. address and values to set 
 add df performance counters for read 
 release performance counter 
 return available counter if is_add == 1 otherwise return error status. 
 rearm the counter or throw away count value on failure 
  Copyright 2021 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 UMC 6_1_1 registers 
 select the lower chip and check the error count 
 select the higher chip and check the err counter 
	 check for SRAM correctable error
 check the MCUMC_STATUS 
 select the lower chip 
 clear lower chip error count 
 select the higher chip 
 clear higher chip error count 
	TODO: driver needs to toggle DF Cstate to ensure
 clear umc status 
 calculate error address if uece error is detected 
 translate umc channel address to soc pa, 3 parts are included 
 we only save ue error information currently, ce is skipped 
 page frame address is saved 
 clear umc status 
	TODO: driver needs to toggle DF Cstate to ensure
	  safe access of UMC resgisters. Will add the protection
		 Enabling fatal error in one channel will be considered
  Copyright 2014 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: Christian König <christian.koenig@amd.com>
  uvd_v5_0_ring_get_rptr - get read pointer
  @ring: amdgpu_ring pointer
  Returns the current hardware read pointer
  uvd_v5_0_ring_get_wptr - get write pointer
  @ring: amdgpu_ring pointer
  Returns the current hardware write pointer
  uvd_v5_0_ring_set_wptr - set write pointer
  @ring: amdgpu_ring pointer
  Commits the write pointer to the hardware
 UVD TRAP 
  uvd_v5_0_hw_init - start and test UVD block
  @handle: handle used to pass amdgpu_device pointer
  Initialize the hardware, boot up the VCPU and do some testing
 Clear timeout status bits 
  uvd_v5_0_hw_fini - stop the hardware block
  @handle: handle used to pass amdgpu_device pointer
  Stop the UVD block, mark ring as not ready any more
	
	  Proper cleanups before halting the HW engine:
	    - cancel the delayed idle work
	    - enable powergating
	    - enable clockgating
	    - disable dpm
	 
	  TODO: to align with the VCN implementation, move the
	  jobs for clockgatingpowergatingdpm setting to
	  ->set_powergating_state().
 shutdown the UVD block 
  uvd_v5_0_mc_resume - memory controller programming
  @adev: amdgpu_device pointer
  Let the UVD memory controller know it's offsets
 program memory controller bits 0-27 
  uvd_v5_0_start - start UVD block
  @adev: amdgpu_device pointer
  Setup and start the UVD block
disable DPG 
 disable byte swapping 
 disable interupt 
 stall UMC and register bus before resetting VCPU 
 put LMI, VCPU, RBC etc... into reset 
 take UVD block out of reset 
 initialize UVD memory controller 
 swap (8 in 32) RB and IB 
 take all subblocks out of reset, except VCPU 
 enable VCPU clock 
 enable UMC 
 boot up the VCPU 
 enable master interrupt 
 clear the bit 4 of UVD_STATUS 
 force RBC into idle state 
 set the write pointer delay 
 set the wb address 
 program the RB_BASE for ring buffer 
 Initialize the ring buffer's read and write pointers 
  uvd_v5_0_stop - stop UVD block
  @adev: amdgpu_device pointer
  stop the UVD block
 force RBC into idle state 
 Stall UMC and register bus before resetting VCPU 
 put VCPU into reset 
 disable VCPU clock 
 Unstall UMC and register bus 
  uvd_v5_0_ring_emit_fence - emit an fence & trap command
  @ring: amdgpu_ring pointer
  @addr: address
  @seq: sequence number
  @flags: fence related flags
  Write a fence and a trap command to the ring.
  uvd_v5_0_ring_test_ring - register write test
  @ring: amdgpu_ring pointer
  Test if we can successfully write to the context register
  uvd_v5_0_ring_emit_ib - execute indirect buffer
  @ring: amdgpu_ring pointer
  @job: job to retrieve vmid from
  @ib: indirect buffer to execute
  @flags: unused
  Write ring commands to execute the indirect buffer
 TODO
 only in pg enabled, we can gate clock to vcpu
 wait for STATUS to clear 
 enable HW gates because UVD is idle 
		uvd_v5_0_set_hw_clock_gating(adev); 
	 This doesn't actually powergate the UVD block.
	  That's done in the dpm code via the SMC.  This
	  just re-inits the block as necessary.  The actual
	  gating still happens in the dpm code.  We should
	  revisit this when there is a cleaner line between
	  the smc and the hw blocks
 AMD_CG_SUPPORT_UVD_MGCG 
 uvd_v5_0_ring_emit_fence  x1 no user fence 
 uvd_v5_0_ring_emit_ib 
  Copyright 2008 Advanced Micro Devices, Inc.
  Copyright 2008 Red Hat Inc.
  Copyright 2009 Christian König.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: Christian König
	     32kHz	  44.1kHz	48kHz    
 Clock      N     CTS      N     CTS      N     CTS 
  25,201.001 MHz 
  25.20       MHz 
  27.00       MHz 
  27.001.001 MHz 
  54.00       MHz 
  54.001.001 MHz 
  74.251.001 MHz 
  74.25       MHz 
 148.501.001 MHz 
 148.50       MHz 
  calculate CTS and N values if they are not found in the table
 Safe, but overly large values 
 Smallest valid fraction 
	
	  The optimal N is 128freq1000. Calculate the closest larger
	  value that doesn't truncate any bits.
 Check that we are in spec (not always possible) 
 Precalculated values for common clocks 
 And odd clocks get manually calculated 
  Copyright 2019 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 AMD_CG_SUPPORT_ATHUB_MGCG 
 AMD_CG_SUPPORT_ATHUB_LS 
  Copyright 2019 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  jpeg_v3_0_early_init - set function pointers
  @handle: amdgpu_device pointer
  Set ring and irq function pointers
  jpeg_v3_0_sw_init - sw init for JPEG block
  @handle: amdgpu_device pointer
  Load firmware and sw initialization
 JPEG TRAP 
  jpeg_v3_0_sw_fini - sw fini for JPEG block
  @handle: amdgpu_device pointer
  JPEG suspend and free up sw allocation
  jpeg_v3_0_hw_init - start and test JPEG block
  @handle: amdgpu_device pointer
  jpeg_v3_0_hw_fini - stop the hardware block
  @handle: amdgpu_device pointer
  Stop the JPEG block, mark ring as not ready any more
  jpeg_v3_0_suspend - suspend JPEG block
  @handle: amdgpu_device pointer
  HW fini and suspend JPEG block
  jpeg_v3_0_resume - resume JPEG block
  @handle: amdgpu_device pointer
  Resume firmware and hw init JPEG block
 disable anti hang mechanism 
 keep the JPEG in static PG mode 
 enable anti hang mechanism 
  jpeg_v3_0_start - start JPEG block
  @adev: amdgpu_device pointer
  Setup and start the JPEG block
 disable power gating 
 JPEG disable CGC 
 MJPEG global tiling registers 
 enable JMI channel 
 enable System Interrupt for JRBC 
  jpeg_v3_0_stop - stop JPEG block
  @adev: amdgpu_device pointer
  stop the JPEG block
 reset JMI 
 enable power gating 
  jpeg_v3_0_dec_ring_get_rptr - get read pointer
  @ring: amdgpu_ring pointer
  Returns the current hardware read pointer
  jpeg_v3_0_dec_ring_get_wptr - get write pointer
  @ring: amdgpu_ring pointer
  Returns the current hardware write pointer
  jpeg_v3_0_dec_ring_set_wptr - set write pointer
  @ring: amdgpu_ring pointer
  Commits the write pointer to the hardware
 jpeg_v3_0_dec_ring_emit_vm_flush 
 jpeg_v3_0_dec_ring_emit_fence x2 vm fence 
 jpeg_v3_0_dec_ring_emit_ib 
  Copyright 2019 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
	 Only server cards have the FRU EEPROM
	  TODO: See if we can figure this out dynamically instead of
	  having to parse VBIOS versions.
	 VBIOS is of the format ###-DXXXYY-##. For SKU identification,
	  we can use just the "DXXX" portion. If there were more models, we
	  could convert the 3 characters to a hex integer and use a switch
	  for easespeedreadability. For now, 2 string comparisons are
	  reasonable and not too expensive
 D161 and D163 are the VG20 server SKUs 
	 The size returned by the i2c requires subtraction of 0xC0 since the
	  size apparently always reports as 0xC0+actual size.
 If algo exists, it means that the i2c_adapter's initialized 
	 There's a lot of repetition here. This is due to the FRU having
	  variable-length fields. To get the information, we have to find the
	  size of each field, and then keep reading along and reading along
	  until we get all of the data that we want. We use addrptr to track
	  the address as we go
	 The first fields are all of size 1-byte, from 0-7 are offsets that
	  contain information that isn't useful to us.
	  Bytes 8-a are all 1-byte and refer to the size of the entire struct,
	  and the language field, so just start from 0xb, manufacturer size
	 Increment the addrptr by the size of the field, and 1 due to the
	  size field being 1 byte. This pattern continues below.
	 Product name should only be 32 characters. Any more,
	  and something could be wrong. Cap it at 32 to be safe
 Start at 2 due to buff using fields 0 and 1 for the address 
	 Product number should only be 16 characters. Any more,
	  and something could be wrong. Cap it at 16 to be safe
	 Serial number should only be 16 characters. Any more,
	  and something could be wrong. Cap it at 16 to be safe
  Copyright 2014 Advanced Micro Devices, Inc.
  Copyright 2008 Red Hat Inc.
  Copyright 2009 Jerome Glisse.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  amdgpu_gfx_rlc_enter_safe_mode - Set RLC into safe mode
  @adev: amdgpu_device pointer
  Set RLC enter into safe mode if RLC is enabled and haven't in safe mode.
 if RLC is not enabled, do nothing 
  amdgpu_gfx_rlc_exit_safe_mode - Set RLC out of safe mode
  @adev: amdgpu_device pointer
  Set RLC exit safe mode if RLC is enabled and have entered into safe mode.
 if RLC is not enabled, do nothing 
  amdgpu_gfx_rlc_init_sr - Init save restore block
  @adev: amdgpu_device pointer
  @dws: the size of save restore block
  Allocate and setup value to save restore block of rlc.
  Returns 0 on succeess or negative error code if allocate failed.
 allocate save restore block 
 write the sr buffer 
  amdgpu_gfx_rlc_init_csb - Init clear state block
  @adev: amdgpu_device pointer
  Allocate and setup value to clear state block of rlc.
  Returns 0 on succeess or negative error code if allocate failed.
 allocate clear state block 
  amdgpu_gfx_rlc_init_cpt - Init cp table
  @adev: amdgpu_device pointer
  Allocate and setup value to cp table of rlc.
  Returns 0 on succeess or negative error code if allocate failed.
 set up the cp table 
  amdgpu_gfx_rlc_setup_cp_table - setup cp the buffer of cp table
  @adev: amdgpu_device pointer
  Write cp firmware data into cp table.
 write the cp table buffer 
  amdgpu_gfx_rlc_fini - Free BO which used for RLC
  @adev: amdgpu_device pointer
  Free three BO which is used for rlc_save_restore_block, rlc_clear_state_block
  and rlc_jump_table_block.
 save restore block 
 clear state block 
 jump table block 
  Copyright 2015 Advanced Micro Devices, Inc.
  All Rights Reserved.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sub license, andor sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
  THE COPYRIGHT HOLDERS, AUTHORS ANDOR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,
  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  USE OR OTHER DEALINGS IN THE SOFTWARE.
  The above copyright notice and this permission notice (including the
  next paragraph) shall be included in all copies or substantial portions
  of the Software.
  Authors:
     Christian König <deathsimple@vodafone.de>
	 This is based on the bucket sort with O(n) time complexity.
	  An item with priority "i" is added to bucket[i]. The lists are then
	  concatenated in descending order.
	 Since buffers which appear sooner in the relocation list are
	  likely to be used more often than buffers which appear later
	  in the list, the sort mustn't change the ordering of buffers
	  with the same priority, i.e. it must be stable.
 Connect the sorted buckets in the output list. 
 copy the handle array from userspace to a kernel buffer 
 SPDX-License-Identifier: GPL-2.0 OR MIT
  Copyright 2009 VMware, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: Michel Dänzer
 Test BO GTT->VRAM and VRAM->GTT GPU copies across the whole GTT aperture 
	 Number of tests =
	  (Total GTT - gart_pin_size - (2 transfer windows for buffer moves))  test size
  Copyright 2008 Advanced Micro Devices, Inc.
  Copyright 2008 Red Hat Inc.
  Copyright 2009 Jerome Glisse.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: Dave Airlie
           Alex Deucher
           Jerome Glisse
  GART
  The GART (Graphics Aperture Remapping Table) is an aperture
  in the GPU's address space.  System pages can be mapped into
  the aperture and look like contiguous pages from the GPU's
  perspective.  A page table maps the pages in the aperture
  to the actual backing pages in system memory.
  Radeon GPUs support both an internal GART, as described above,
  and AGP.  AGP works similarly, but the GART table is configured
  and maintained by the northbridge rather than the driver.
  Radeon hw has a separate AGP aperture that is programmed to
  point to the AGP aperture provided by the northbridge and the
  requests are passed through to the northbridge aperture.
  Both AGP and internal GART can be used at the same time, however
  that is not currently supported by the driver.
  This file handles the common internal GART management.
  Common GART table functions.
  amdgpu_gart_dummy_page_init - init dummy page used by the driver
  @adev: amdgpu_device pointer
  Allocate the dummy page used by the driver (all asics).
  This dummy page is used by the driver as a filler for gart entries
  when pages are taken out of the GART
  Returns 0 on sucess, -ENOMEM on failure.
  amdgpu_gart_dummy_page_fini - free dummy page used by the driver
  @adev: amdgpu_device pointer
  Frees the dummy page used by the driver (all asics).
  amdgpu_gart_table_vram_alloc - allocate vram for gart page table
  @adev: amdgpu_device pointer
  Allocate video memory for GART page table
  (pcie r4xx, r5xx+).  These asics require the
  gart table to be in video memory.
  Returns 0 for success, error for failure.
  amdgpu_gart_table_vram_pin - pin gart page table in vram
  @adev: amdgpu_device pointer
  Pin the GART page table in vram so it will not be moved
  by the memory manager (pcie r4xx, r5xx+).  These asics require the
  gart table to be in video memory.
  Returns 0 for success, error for failure.
  amdgpu_gart_table_vram_unpin - unpin gart page table in vram
  @adev: amdgpu_device pointer
  Unpin the GART page table in vram (pcie r4xx, r5xx+).
  These asics require the gart table to be in video memory.
  amdgpu_gart_table_vram_free - free gart page table vram
  @adev: amdgpu_device pointer
  Free the video memory used for the GART page table
  (pcie r4xx, r5xx+).  These asics require the gart table to
  be in video memory.
  Common gart functions.
  amdgpu_gart_unbind - unbind pages from the gart page table
  @adev: amdgpu_device pointer
  @offset: offset into the GPU's gart aperture
  @pages: number of pages to unbind
  Unbinds the requested pages from the gart page table and
  replaces them with the dummy page (all asics).
  Returns 0 for success, -EINVAL for failure.
 Starting from VEGA10, system bit must be 0 to mean invalid. 
  amdgpu_gart_map - map dma_addresses into GART entries
  @adev: amdgpu_device pointer
  @offset: offset into the GPU's gart aperture
  @pages: number of pages to bind
  @dma_addr: DMA addresses of pages
  @flags: page table entry flags
  @dst: CPU address of the gart table
  Map the dma_addresses into GART entries (all asics).
  Returns 0 for success, -EINVAL for failure.
  amdgpu_gart_bind - bind pages into the gart page table
  @adev: amdgpu_device pointer
  @offset: offset into the GPU's gart aperture
  @pages: number of pages to bind
  @dma_addr: DMA addresses of pages
  @flags: page table entry flags
  Binds the requested pages to the gart page table
  (all asics).
  Returns 0 for success, -EINVAL for failure.
  amdgpu_gart_invalidate_tlb - invalidate gart TLB
  @adev: amdgpu device driver pointer
  Invalidate gart TLB which can be use as a way to flush gart changes
  amdgpu_gart_init - init the driver info for managing the gart
  @adev: amdgpu_device pointer
  Allocate the dummy page and init the gart driver info (all asics).
  Returns 0 for success, error for failure.
 We need PAGE_SIZE >= AMDGPU_GPU_PAGE_SIZE 
 Compute table size 
  Copyright 2019 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
	 If use GART for FB translation, vmid0 page table covers both
	  vram and system memory (gart)
 Program the AGP BAR 
 Program the system aperture low logical page number. 
	 In the case squeezing vram into GART aperture, we don't use
	  FB aperture and AGP aperture. Disable them.
 Set default page address. 
 Program "protection fault". 
 Setup TLB control 
 XXX for emulation. 
 Setup L2 cache 
 XXX for emulation, Refer to closed source code.
		 On Aldebaran, XNACK can be enabled in the SQ per-process.
		  Retry faults need to be enabled for that to work.
 GART Enable. 
 Disable all tables 
 Setup TLB control 
 Setup L2 cache 
  mmhub_v1_7_set_fault_enable_default - update GARTVM fault handling
  @adev: amdgpu_device pointer
  @value: true redirects VM faults to the default page
 Change state only if MCCG support is enabled through driver 
 Change state only if LS support is enabled through driver 
 AMD_CG_SUPPORT_MC_MGCG 
 AMD_CG_SUPPORT_MC_LS 
 MMHUB Range 0 
 MMHUB Range 1 
 MMHAB Range 2
 MMHUB Rang 3 
 MMHUB Range 4 
 MMHUAB Range 5 
 write 0 to reset the edc counters 
  Copyright 2014 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 missing from the gfx_7 IP headers 
  Core functions
  gfx_v7_0_init_microcode - load ucode images from disk
  @adev: amdgpu_device pointer
  Use the firmware interface to load the ucode images into
  the driver (not loaded into hw).
  Returns 0 on success, error on failure.
  gfx_v7_0_tiling_mode_table_init - init the hw tiling table
  @adev: amdgpu_device pointer
  Starting with SI, the tiling setup is done globally in a
  set of 32 tiling modes.  Rather than selecting each set of
  parameters per surface as on older asics, we just select
  which index in the tiling table we want to use, and the
  surface uses those parameters (CIK).
  gfx_v7_0_select_se_sh - select which SE, SH to address
  @adev: amdgpu_device pointer
  @se_num: shader engine to address
  @sh_num: sh block to address
  @instance: Certain registers are instanced per SE or SH.
             0xffffffff means broadcast to all SEs or SHs (CIK).
  Select which SE, SH combinations to address.
  gfx_v7_0_get_rb_active_bitmap - computes the mask of enabled RBs
  @adev: amdgpu_device pointer
  Calculates the bitmask of enabled RBs (CIK).
  Returns the enabled RB bitmask.
 GRBM_GFX_INDEX has a different offset on CI+ 
 GRBM_GFX_INDEX has a different offset on CI+ 
  gfx_v7_0_setup_rb - setup the RBs on the asic
  @adev: amdgpu_device pointer
  Configures per-SESH RB registers (CIK).
 cache the values for userspace 
  gfx_v7_0_init_compute_vmid - gart enable
  @adev: amdgpu_device pointer
  Initialize compute vmid sh_mem registers
	
	  Configure apertures:
	  LDS:         0x60000000'00000000 - 0x60000001'00000000 (4GB)
	  Scratch:     0x60000001'00000000 - 0x60000002'00000000 (4GB)
	  GPUVM:       0x60010000'00000000 - 0x60020000'00000000 (1TB)
 CP and shaders 
	 Initialize all compute VMIDs to have no GDS, GWS, or OA
	
	  Initialize all compute and user-gfx VMIDs to have no GDS, GWS, or OA
	  access. Compute VMIDs should be enabled by FW for target VMIDs,
	  the driver can enable them for graphics. VMID0 should maintain
	  access so that HWS firmware can saverestore entries.
  gfx_v7_0_constants_init - setup the 3D engine
  @adev: amdgpu_device pointer
  init the gfx constants such as the 3D engine, tiling configuration
  registers, maximum number of quad pipes, render backends...
 set HW defaults for 3D engine 
	
	  making sure that the following register writes will be broadcasted
	  to all the shaders
 XXX SH_MEM regs 
 where to put LDS, scratch, GPUVM in FSA64 space 
 CP and shaders 
  GPU scratch registers helpers function.
  gfx_v7_0_scratch_init - setup driver info for CP scratch regs
  @adev: amdgpu_device pointer
  Set up the number and offset of the CP scratch registers.
  NOTE: use of CP scratch registers is a legacy interface and
  is not used by default on newer asics (r6xx+).  On newer asics,
  memory buffers are used for fences rather than scratch regs.
  gfx_v7_0_ring_test_ring - basic gfx ring test
  @ring: amdgpu_ring structure holding ring information
  Allocate a scratch register and write to it using the gfx ring (CIK).
  Provides a basic gfx ring test to verify that the ring is working.
  Used by gfx_v7_0_cp_gfx_resume();
  Returns 0 on success, error on failure.
  gfx_v7_0_ring_emit_hdp_flush - emit an hdp flush on the cp
  @ring: amdgpu_ring structure holding ring information
  Emits an hdp flush on the cp.
 write, wait, write 
 == 
 pfp or me 
 poll interval 
  gfx_v7_0_ring_emit_fence_gfx - emit a fence on the gfx ring
  @ring: amdgpu_ring structure holding ring information
  @addr: address
  @seq: sequence number
  @flags: fence related flags
  Emits a fence sequence number on the gfx ring and flushes
  GPU caches.
	 Workaround for cache flush problems. First send a dummy EOP
	  event down the pipe with seq one below.
 Then send the real EOP event down the pipe. 
  gfx_v7_0_ring_emit_fence_compute - emit a fence on the compute ring
  @ring: amdgpu_ring structure holding ring information
  @addr: address
  @seq: sequence number
  @flags: fence related flags
  Emits a fence sequence number on the compute ring and flushes
  GPU caches.
 RELEASE_MEM - flush caches, send int 
  IB stuff
  gfx_v7_0_ring_emit_ib_gfx - emit an IB (Indirect Buffer) on the ring
  @ring: amdgpu_ring structure holding ring information
  @job: job to retrieve vmid from
  @ib: amdgpu indirect buffer object
  @flags: options (AMDGPU_HAVE_CTX_SWITCH)
  Emits an DE (drawing engine) or CE (constant engine) IB
  on the gfx ring.  IBs are usually generated by userspace
  acceleration drivers and submitted to the kernel for
  scheduling on the ring.  This function schedules the IB
  on the gfx ring for execution by the GPU.
 insert SWITCH_BUFFER packet before first IB in the ring frame 
	 Currently, there is a high possibility to get wave ID mismatch
	  between ME and GDS, leading to a hw deadlock, because ME generates
	  different wave IDs than the GDS expects. This situation happens
	  randomly when at least 5 compute pipes use GDS ordered append.
	  The wave IDs generated by ME are also wrong after suspendresume.
	  Those are probably bugs somewhere else in the kernel driver.
	 
	  Writing GDS_COMPUTE_MAX_WAVE_ID resets wave ID counters in ME and
	  GDS to 0 for this ring (mepipe).
 set load_enable otherwise this package is just NOPs 
 set load_global_config & load_global_uconfig 
 set load_cs_sh_regs 
 set load_per_context_state & load_gfx_sh_regs 
  gfx_v7_0_ring_test_ib - basic ring IB test
  @ring: amdgpu_ring structure holding ring information
  @timeout: timeout value in jiffies, or MAX_SCHEDULE_TIMEOUT
  Allocate an IB and execute it on the gfx ring (CIK).
  Provides a basic gfx ring test to verify that IBs are working.
  Returns 0 on success, error on failure.
  CP.
  On CIK, gfx and compute now have independent command processors.
  GFX
  Gfx consists of a single ring and can process both gfx jobs and
  compute jobs.  The gfx CP consists of three microengines (ME):
  PFP - Pre-Fetch Parser
  ME - Micro Engine
  CE - Constant Engine
  The PFP and ME make up what is considered the Drawing Engine (DE).
  The CE is an asynchronous engine used for updating buffer desciptors
  used by the DE so that they can be loaded into cache in parallel
  while the DE is processing state update packets.
  Compute
  The compute CP consists of two microengines (ME):
  MEC1 - Compute MicroEngine 1
  MEC2 - Compute MicroEngine 2
  Each MEC supports 4 compute pipes and each pipe supports 8 queues.
  The queues are exposed to userspace and are programmed directly
  by the compute runtime.
  gfx_v7_0_cp_gfx_enable - enabledisable the gfx CP MEs
  @adev: amdgpu_device pointer
  @enable: enable or disable the MEs
  Halts or unhalts the gfx MEs.
  gfx_v7_0_cp_gfx_load_microcode - load the gfx CP ME ucode
  @adev: amdgpu_device pointer
  Loads the gfx PFP, ME, and CE ucode.
  Returns 0 for success, -EINVAL if the ucode is not available.
 PFP 
 CE 
 ME 
  gfx_v7_0_cp_gfx_start - start the gfx ring
  @adev: amdgpu_device pointer
  Enables the ring and loads the clear state context and other
  packets required to init the ring.
  Returns 0 for success, error for failure.
 init the CP 
 init the CE partitions.  CE only used for gfx on CIK 
 clear state buffer 
 VGT_VERTEX_REUSE_BLOCK_CNTL 
 VGT_OUT_DEALLOC_CNTL 
  gfx_v7_0_cp_gfx_resume - setup the gfx ring buffer registers
  @adev: amdgpu_device pointer
  Program the location and size of the gfx ring buffer
  and test it to make sure it's working.
  Returns 0 for success, error for failure.
 Set the write pointer delay 
 set the RB to use vmid 0 
 ring 0 - compute and gfx 
 Set ring buffer size 
 Initialize the ring buffer's read and write pointers 
 set the wb address whether it's enabled or not 
 scratch register shadowing is no longer supported 
 start the ring 
 XXX check if swapping is necessary on BE 
 XXX check if swapping is necessary on BE 
  gfx_v7_0_cp_compute_enable - enabledisable the compute CP MEs
  @adev: amdgpu_device pointer
  @enable: enable or disable the MEs
  Halts or unhalts the compute MEs.
  gfx_v7_0_cp_compute_load_microcode - load the compute CP ME ucode
  @adev: amdgpu_device pointer
  Loads the compute MEC1&2 ucode.
  Returns 0 for success, -EINVAL if the ucode is not available.
 MEC1 
 MEC2 
  gfx_v7_0_cp_compute_fini - stop the compute queues
  @adev: amdgpu_device pointer
  Stop the compute queues and tear down the driver queue
  info.
 take ownership of the relevant compute queues 
 allocate space for ALL pipes (even the ones we don't own) 
 clear memory.  Not sure if this is required or not 
 write the EOP addr 
 set the VMID assigned 
 set the EOP size, register value is 2^(EOP_SIZE+1) dwords 
 disable the queue if it's active 
 init the mqd struct 
 enable doorbell? 
 set the pointer to the MQD 
 set MQD vmid to 0 
 set the pointer to the HQD, this is similar CP_RB0_BASE_HI 
 set up the HQD, this is similar to CP_RB0_CNTL 
 assuming kernel queue control 
 only used if CP_PQ_WPTR_POLL_CNTL.CP_PQ_WPTR_POLL_CNTL__EN_MASK=1 
 set the wb address whether it's enabled or not 
 enable the doorbell if requested 
 read and write pointers, similar to CP_RB0_WPTR_RPTR 
 set the vmid for the queue 
 defaults 
 activate the queue 
 HQD registers extend from mmCP_MQD_BASE_ADDR to mmCP_MQD_CONTROL 
 disable wptr polling 
 program all HQD registers 
 activate the HQD 
  gfx_v7_0_cp_compute_resume - setup the compute queue registers
  @adev: amdgpu_device pointer
  Program the compute queues and test them to make sure they
  are working.
  Returns 0 for success, error for failure.
 fix up chicken bits 
 init all pipes (even the ones we don't own) 
 init the queues 
  gfx_v7_0_ring_emit_pipeline_sync - cik vm flush using the CP
  @ring: the ring to emit the commands to
  Sync the command pipeline with the PFP. E.g. wait for everything
  to be completed.
 memory 
 equal 
 pfp or me 
 poll interval 
 sync CE with ME to prevent CE fetch CEIB before context switch done 
  vm
  VMID 0 is the physical GPU addresses as used by the kernel.
  VMIDs 1-15 are used for userspace clients and are handled
  by the amdgpu vmhsa code.
  gfx_v7_0_ring_emit_vm_flush - cik vm flush using the CP
  @ring: amdgpu_ring pointer
  @vmid: vmid number to use
  @pd_addr: address
  Update the page table base and flush the VM TLB
  using the CP (CIK).
 wait for the invalidate to complete 
 wait 
 always 
 me 
 ref 
 mask 
 poll interval 
 compute doesn't have PFP 
 sync PFP to ME, otherwise we might get invalid PFP reads 
 synce CE with ME to prevent CE fetch CEIB before context switch done 
  RLC
  The RLC is a multi-purpose microengine that handles a
  variety of functions.
 allocate rlc buffers 
 CP JT 
 GDS 
 init save restore block 
 init clear state block 
 init spm vmid with 0xf 
  gfx_v7_0_rlc_stop - stop the RLC ME
  @adev: amdgpu_device pointer
  Halt the RLC ME (MicroEngine) (CIK).
  gfx_v7_0_rlc_start - start the RLC ME
  @adev: amdgpu_device pointer
  Unhalt the RLC ME (MicroEngine) (CIK).
  gfx_v7_0_rlc_resume - setup the RLC hw
  @adev: amdgpu_device pointer
  Initialize the RLC registers, load the ucode,
  and start the RLC (CIK).
  Returns 0 for success, -EINVAL if the ucode is not available.
 disable CG 
 XXX - find out what chips support lbpw 
 order matters! 
 begin clear state 
 context control state 
 pa_sc_raster_configpa_sc_raster_config1 
 end clear state 
 clear state 
 XXX 
 XXX 
  gfx_v7_0_get_gpu_clock_counter - return GPU clock counter snapshot
  @adev: amdgpu_device pointer
  Fetches a GPU clock counter snapshot (SI).
  Returns the 64 bit clock counter snapshot.
 GDS Base 
 GDS Size 
 GWS 
 OA 
 type 0 wave data 
 Get memory bank mapping mode. 
 Validate settings in case only one DIMM installed. 
 If DIMM Addr map is 8GB, ROW size should be 2KB. Otherwise 1KB. 
 If ROW size(DIMM1) != ROW size(DMIMM0), ROW size should be larger one. 
 XXX use MC settings? 
 fix up row size 
 mec0 is me1 
 type-2 packets are deprecated on MEC, use type-3 instead 
 EOP Event 
 Privileged reg 
 Privileged inst 
 allocate mec buffers 
 set up the compute queues - allocate horizontally across pipes 
 init CSB 
 init rlc 
 read MC_STATUS 
 GRBM_STATUS 
 GRBM_STATUS2 
 SRBM_STATUS 
 disable CGPG 
 stop the rlc 
 Disable GFX parsingprefetching 
 Disable MEC parsingprefetching 
 Wait a little for things to settle down 
	
	  amdgpu controls only the first MEC. That's why this function only
	  handles the setting of interrupts for this specific MEC. All other
	  pipes' interrupts are set by amdkfd.
 XXX soft reset the gfx block only
 order matters! 
 CP_COHER_CNTL 
 CP_COHER_SIZE 
 CP_COHER_BASE 
 poll interval 
 CP_COHER_CNTL 
 CP_COHER_SIZE 
 CP_COHER_SIZE_HI 
 CP_COHER_BASE 
 CP_COHER_BASE_HI 
 poll interval 
 gfx_v7_0_ring_emit_gds_switch 
 gfx_v7_0_ring_emit_hdp_flush 
 hdp invalidate 
 gfx_v7_0_ring_emit_fence_gfx x3 for user fence, vm fence 
 gfx_v7_0_ring_emit_pipeline_sync 
 gfx_v7_0_ring_emit_vm_flush 
 gfx_v7_ring_emit_cntxcntl including vgt flush
 SURFACE_SYNC 
 gfx_v7_0_ring_emit_ib_gfx 
 gfx_v7_0_ring_emit_gds_switch 
 gfx_v7_0_ring_emit_hdp_flush 
 hdp invalidate 
 gfx_v7_0_ring_emit_pipeline_sync 
 gfx_v7_0_ring_emit_vm_flush 
 gfx_v7_0_ring_emit_fence_compute x3 for user fence, vm fence 
 gfx_v7_0_emit_mem_sync_compute 
 gfx_v7_0_ring_emit_ib_compute 
 init asci gds info 
  Copyright 2009 Jerome Glisse.
  All Rights Reserved.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sub license, andor sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
  THE COPYRIGHT HOLDERS, AUTHORS ANDOR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,
  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  USE OR OTHER DEALINGS IN THE SOFTWARE.
  The above copyright notice and this permission notice (including the
  next paragraph) shall be included in all copies or substantial portions
  of the Software.
  Authors:
     Jerome Glisse <glisse@freedesktop.org>
     Thomas Hellstrom <thomas-at-tungstengraphics-dot-com>
     Dave Airlie
  DOC: amdgpu_object
  This defines the interfaces to operate on an &amdgpu_bo buffer object which
  represents memory used by driver (VRAM, system memory, etc.). The driver
  provides DRMGEM APIs to userspace. DRMGEM APIs then use these interfaces
  to createdestroyset buffer object which are then managed by the kernel TTM
  memory manager.
  The interfaces are also used internally by kernel clients, including gfx,
  uvd, etc. for kernel managed allocations used by the GPU.
 in case amdgpu_device_recover_vram got NULL of bo->parent 
  amdgpu_bo_is_amdgpu_bo - check if the buffer object is an &amdgpu_bo
  @bo: buffer object to be checked
  Uses destroy function associated with the object to determine if this is
  an &amdgpu_bo.
  Returns:
  true if the object belongs to &amdgpu_bo, false if not.
  amdgpu_bo_placement_from_domain - set buffer's placement
  @abo: &amdgpu_bo buffer object whose placement is to be set
  @domain: requested domain
  Sets buffer's placement according to requested domain and the buffer's
  flags.
  amdgpu_bo_create_reserved - create reserved BO for kernel use
  @adev: amdgpu device object
  @size: size for the new BO
  @align: alignment for the new BO
  @domain: where to place it
  @bo_ptr: used to initialize BOs in structures
  @gpu_addr: GPU addr of the pinned BO
  @cpu_addr: optional CPU address mapping
  Allocates and pins a BO for kernel internal use, and returns it still
  reserved.
  Note: For bo_ptr new BO is only created if bo_ptr points to NULL.
  Returns:
  0 on success, negative error code otherwise.
  amdgpu_bo_create_kernel - create BO for kernel use
  @adev: amdgpu device object
  @size: size for the new BO
  @align: alignment for the new BO
  @domain: where to place it
  @bo_ptr:  used to initialize BOs in structures
  @gpu_addr: GPU addr of the pinned BO
  @cpu_addr: optional CPU address mapping
  Allocates and pins a BO for kernel internal use.
  Note: For bo_ptr new BO is only created if bo_ptr points to NULL.
  Returns:
  0 on success, negative error code otherwise.
  amdgpu_bo_create_kernel_at - create BO for kernel use at specific location
  @adev: amdgpu device object
  @offset: offset of the BO
  @size: size of the BO
  @domain: where to place it
  @bo_ptr:  used to initialize BOs in structures
  @cpu_addr: optional CPU address mapping
  Creates a kernel BO at a specific offset in the address space of the domain.
  Returns:
  0 on success, negative error code otherwise.
	
	  Remove the original mem node and create a new one at the request
	  position.
  amdgpu_bo_free_kernel - free BO for kernel use
  @bo: amdgpu BO to free
  @gpu_addr: pointer to where the BO's GPU memory space address was stored
  @cpu_addr: pointer to where the BO's CPU memory space address was stored
  unmaps and unpin a BO for kernel internal use.
 Validate bo size is bit bigger then the request domain 
	
	  If GTT is part of requested domains the check must succeed to
	  allow fall back to GTT
 TODO add more domains checks, such as AMDGPU_GEM_DOMAIN_CPU 
	 XXX: Write-combined CPU mappings of GTT seem broken on 32-bit
	  See https:bugs.freedesktop.orgshow_bug.cgi?id=84627
	 Don't try to enable write-combining when it can't work, or things
	  may be slow
	  See https:bugs.freedesktop.orgshow_bug.cgi?id=88758
	 For architectures that don't support WC memory,
	  mask out the WC flag from the BO
  amdgpu_bo_create - create an &amdgpu_bo buffer object
  @adev: amdgpu device object
  @bp: parameters to be used for the buffer object
  @bo_ptr: pointer to the buffer object pointer
  Creates an &amdgpu_bo buffer object.
  Returns:
  0 for success or a negative error code on failure.
 We opt to avoid OOM on system pages allocations 
 Note that GDSGWSOA allocates 1 page per byteresource. 
 GWS and OA don't need any alignment. 
 Both size and alignment must be a multiple of 4. 
 Memory should be aligned at least to a page size. 
 Treat CPU_ACCESS_REQUIRED only as a hint if given by UMD 
  amdgpu_bo_create_user - create an &amdgpu_bo_user buffer object
  @adev: amdgpu device object
  @bp: parameters to be used for the buffer object
  @ubo_ptr: pointer to the buffer object pointer
  Create a BO to be used by user application;
  Returns:
  0 for success or a negative error code on failure.
  amdgpu_bo_create_vm - create an &amdgpu_bo_vm buffer object
  @adev: amdgpu device object
  @bp: parameters to be used for the buffer object
  @vmbo_ptr: pointer to the buffer object pointer
  Create a BO to be for GPUVM.
  Returns:
  0 for success or a negative error code on failure.
	 bo_ptr_size will be determined by the caller and it depends on
	  num of amdgpu_vm_pt entries.
  amdgpu_bo_add_to_shadow_list - add a BO to the shadow list
  @vmbo: BO that will be inserted into the shadow list
  Insert a BO to the shadow list.
  amdgpu_bo_restore_shadow - restore an &amdgpu_bo shadow
  @shadow: &amdgpu_bo shadow to be restored
  @fence: dma_fence associated with the operation
  Copies a buffer object's shadow content back to the object.
  This is used for recovering a buffer from its shadow in case of a gpu
  reset where vram context may be lost.
  Returns:
  0 for success or a negative error code on failure.
  amdgpu_bo_kmap - map an &amdgpu_bo buffer object
  @bo: &amdgpu_bo buffer object to be mapped
  @ptr: kernel virtual address to be returned
  Calls ttm_bo_kmap() to set up the kernel virtual mapping; calls
  amdgpu_bo_kptr() to get the kernel virtual address.
  Returns:
  0 for success or a negative error code on failure.
  amdgpu_bo_kptr - returns a kernel virtual address of the buffer object
  @bo: &amdgpu_bo buffer object
  Calls ttm_kmap_obj_virtual() to get the kernel virtual address
  Returns:
  the virtual address of a buffer object area.
  amdgpu_bo_kunmap - unmap an &amdgpu_bo buffer object
  @bo: &amdgpu_bo buffer object to be unmapped
  Unmaps a kernel map set up by amdgpu_bo_kmap().
  amdgpu_bo_ref - reference an &amdgpu_bo buffer object
  @bo: &amdgpu_bo buffer object
  References the contained &ttm_buffer_object.
  Returns:
  a refcounted pointer to the &amdgpu_bo buffer object.
  amdgpu_bo_unref - unreference an &amdgpu_bo buffer object
  @bo: &amdgpu_bo buffer object
  Unreferences the contained &ttm_buffer_object and clear the pointer
  amdgpu_bo_pin_restricted - pin an &amdgpu_bo buffer object
  @bo: &amdgpu_bo buffer object to be pinned
  @domain: domain to be pinned to
  @min_offset: the start of requested address range
  @max_offset: the end of requested address range
  Pins the buffer object according to requested domain and address range. If
  the memory is unbound gart memory, binds the pages into gart table. Adjusts
  pin_count and pin_size accordingly.
  Pinning means to lock pages in memory along with keeping them at a fixed
  offset. It is required when a buffer can not be moved, for example, when
  a display buffer is being scanned out.
  Compared with amdgpu_bo_pin(), this function gives more flexibility on
  where to pin a buffer if there are specific restrictions on where a buffer
  must be located.
  Returns:
  0 for success or a negative error code on failure.
 A shared bo cannot be migrated to VRAM 
	 This assumes only APU display buffers are pinned with (VRAM|GTT).
	  See function amdgpu_display_supported_domains()
 force to pin into visible video ram 
  amdgpu_bo_pin - pin an &amdgpu_bo buffer object
  @bo: &amdgpu_bo buffer object to be pinned
  @domain: domain to be pinned to
  A simple wrapper to amdgpu_bo_pin_restricted().
  Provides a simpler API for buffers that do not have any strict restrictions
  on where a buffer must be located.
  Returns:
  0 for success or a negative error code on failure.
  amdgpu_bo_unpin - unpin an &amdgpu_bo buffer object
  @bo: &amdgpu_bo buffer object to be unpinned
  Decreases the pin_count, and clears the flags if pin_count reaches 0.
  Changes placement and pin size accordingly.
  Returns:
  0 for success or a negative error code on failure.
  amdgpu_bo_init - initialize memory manager
  @adev: amdgpu device object
  Calls amdgpu_ttm_init() to initialize amdgpu memory manager.
  Returns:
  0 for success or a negative error code on failure.
 On A+A platform, VRAM can be mapped as WB 
 reserve PAT memory space to WC for VRAM 
 Add an MTRR for the VRAM 
  amdgpu_bo_fini - tear down memory manager
  @adev: amdgpu device object
  Reverses amdgpu_bo_init() to tear down memory manager.
  amdgpu_bo_set_tiling_flags - set tiling flags
  @bo: &amdgpu_bo buffer object
  @tiling_flags: new flags
  Sets buffer object's tiling flags with the new one. Used by GEM ioctl or
  kernel driver to set the tiling flags on a buffer.
  Returns:
  0 for success or a negative error code on failure.
  amdgpu_bo_get_tiling_flags - get tiling flags
  @bo: &amdgpu_bo buffer object
  @tiling_flags: returned flags
  Gets buffer object's tiling flags. Used by GEM ioctl or kernel driver to
  set the tiling flags on a buffer.
  amdgpu_bo_set_metadata - set metadata
  @bo: &amdgpu_bo buffer object
  @metadata: new metadata
  @metadata_size: size of the new metadata
  @flags: flags of the new metadata
  Sets buffer object's metadata, its size and flags.
  Used via GEM ioctl.
  Returns:
  0 for success or a negative error code on failure.
  amdgpu_bo_get_metadata - get metadata
  @bo: &amdgpu_bo buffer object
  @buffer: returned metadata
  @buffer_size: size of the buffer
  @metadata_size: size of the returned metadata
  @flags: flags of the returned metadata
  Gets buffer object's metadata, its size and flags. buffer_size shall not be
  less than metadata_size.
  Used via GEM ioctl.
  Returns:
  0 for success or a negative error code on failure.
  amdgpu_bo_move_notify - notification about a memory move
  @bo: pointer to a buffer object
  @evict: if this move is evicting the buffer from the graphics address space
  @new_mem: new information of the bufer object
  Marks the corresponding &amdgpu_bo buffer object as invalid, also performs
  bookkeeping.
  TTM driver callback which is called when ttm moves a buffer.
 remember the eviction 
 update statistics 
 move_notify is called before move happens 
  amdgpu_bo_release_notify - notification about a BO being released
  @bo: pointer to a buffer object
  Wipes VRAM buffers whose contents should not be leaked before the
  memory is released.
 We only remove the fence if the resv has individualized. 
  amdgpu_bo_fault_reserve_notify - notification about a memory fault
  @bo: pointer to a buffer object
  Notifies the driver we are taking a fault on this BO and have reserved it,
  also performs bookkeeping.
  TTM driver callback for dealing with vm faults.
  Returns:
  0 for success or a negative error code on failure.
 Remember that this BO was accessed by the CPU 
 Can't move a pinned BO to visible VRAM 
 hurrah the memory is not visible ! 
 Avoid costly evictions; only set GTT as a busy placement 
 this should never happen 
  amdgpu_bo_fence - add fence to buffer object
  @bo: buffer object in question
  @fence: fence to add
  @shared: true if fence should be added shared
  amdgpu_bo_sync_wait_resv - Wait for BO reservation fences
  @adev: amdgpu device pointer
  @resv: reservation object to sync to
  @sync_mode: synchronization mode
  @owner: fence owner
  @intr: Whether the wait is interruptible
  Extract the fences from the reservation object and waits for them to finish.
  Returns:
  0 on success, errno otherwise.
  amdgpu_bo_sync_wait - Wrapper for amdgpu_bo_sync_wait_resv
  @bo: buffer object to wait for
  @owner: fence owner
  @intr: Whether the wait is interruptible
  Wrapper to wait for fences in a BO.
  Returns:
  0 on success, errno otherwise.
  amdgpu_bo_gpu_offset - return GPU offset of bo
  @bo:	amdgpu object for which we query the offset
  Note: object should either be pinned or reserved when calling this
  function, it might be useful to add check for this for debugging.
  Returns:
  current GPU offset of the object.
  amdgpu_bo_gpu_offset_no_check - return GPU offset of bo
  @bo:	amdgpu object for which we query the offset
  Returns:
  current GPU offset of the object without raising warnings.
  amdgpu_bo_get_preferred_domain - get preferred domain
  @adev: amdgpu device object
  @domain: allowed :ref:`memory domains <amdgpu_memory_domains>`
  Returns:
  Which of the allowed domains is preferred for allocating the BO.
  amdgpu_bo_print_info - print BO info in debugfs file
  @id: Index or Id of the BO
  @bo: Requested BO for printing info
  @m: debugfs file
  Print BO information in debugfs file
  Returns:
  Size of the BO in bytes.
  Copyright 2016 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Helper function to query firmware capability
  @adev: amdgpu_device pointer
  Return firmware_capability in firmwareinfo table on success or 0 if not
 support firmware_info 3.1 + 
  Helper function to query gpu virtualizaiton capability
  @adev: amdgpu_device pointer
  Return true if gpu virtualization is supported or false if not
 Firmware request VRAM reservation for SR-IOV 
 Use the default scratch size 
 allocate some scratch memory 
 channel width is 64 
 channel width is 64 
  Return true if vbios enabled ecc by default, if umc info table is available
  or false if ecc is not enabled or umc info table is not available
 unsupported crev 
  Helper function to query sram ecc capablity
  @adev: amdgpu_device pointer
  Return true if vbios supports sram ecc or false if not
  Helper function to query dynamic boot config capability
  @adev: amdgpu_device pointer
  Return true if vbios supports dynamic boot config or false if not
  amdgpu_atomfirmware_ras_rom_addr -- Get the RAS EEPROM addr from VBIOS
  adev: amdgpu_device pointer
  i2c_address: pointer to u8; if not NULL, will contain
     the RAS EEPROM address if the function returns true
  Return true if VBIOS supports RAS EEPROM address reporting,
  else return false. If true and @i2c_address is not NULL,
  will contain the RAS ROM address.
 support firmware_info 3.4 + 
			 The ras_rom_i2c_slave_addr should ideally
			  be a 19-bit EEPROM address, which would be
			  used as is by the driver; see top of
			  amdgpu_eeprom.c.
			 
			  When this is the case, 0 is of course a
			  valid RAS EEPROM address, in which case,
			  we'll drop the first "if (firm...)" and only
			  leave the check for the pointer.
			 
			  The reason this works right now is because
			  ras_rom_i2c_slave_addr contains the EEPROM
			  device type qualifier 1010b in the top 4
			  bits.
 system clock 
 memory clock 
	 if asic is Navi+, the rlc reference clock is used for system clock
  Helper function to query two stage mem training capability
  @adev: amdgpu_device pointer
  Return true if two stage mem training is supported or false if not
 fail to parse data_header 
  Copyright 2017 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  PASID manager
  PASIDs are global address space identifiers that can be shared
  between the GPU, an IOMMU and the driver. VMs on different devices
  may use the same PASID if they share the same address
  space. Therefore PASIDs are allocated using a global IDA. VMs are
  looked up from the PASID per amdgpu_device.
 Helper to free pasid from a fence callback 
  amdgpu_pasid_alloc - Allocate a PASID
  @bits: Maximum width of the PASID in bits, must be at least 1
  Allocates a PASID of the given width while keeping smaller PASIDs
  available if possible.
  Returns a positive integer on success. Returns %-EINVAL if bits==0.
  Returns %-ENOSPC if no PASID was available. Returns %-ENOMEM on
  memory allocation failure.
  amdgpu_pasid_free - Free a PASID
  @pasid: PASID to free
  amdgpu_pasid_free_delayed - free pasid when fences signal
  @resv: reservation object with the fences to wait for
  @pasid: pasid to free
  Free the pasid only after all the fences in resv are signaled.
 Last resort when we are OOM 
	 Not enough memory for the delayed delete, as last resort
	  block for all the fences to complete.
  VMID manager
  VMIDs are a per VMHUB identifier for page tables handling.
  amdgpu_vmid_had_gpu_reset - check if reset occured since last use
  @adev: amdgpu_device pointer
  @id: VMID structure
  Check if GPU reset occured since last use of the VMID.
  amdgpu_vmid_grab_idle - grab idle VMID
  @vm: vm to allocate id for
  @ring: ring we want to submit job to
  @sync: sync object where we add dependencies
  @idle: resulting idle VMID
  Try to find an idle VMID, if none is idle add a fence to wait to the sync
  object. Returns -ENOMEM when we are out of memory.
 Check if we have an idle VMID 
 Don't use per engine and per process VMID at the same time 
 If we can't find a idle VMID to use, wait till one becomes available 
  amdgpu_vmid_grab_reserved - try to assign reserved VMID
  @vm: vm to allocate id for
  @ring: ring we want to submit job to
  @sync: sync object where we add dependencies
  @fence: fence protecting ID from reuse
  @job: job who wants to use the VMID
  @id: resulting VMID
  Try to assign a reserved VMID.
 Don't use per engine and per process VMID at the same time 
 to prevent one context starved by another context 
	 Good we can use this VMID. Remember this submission as
	 user of the VMID.
  amdgpu_vmid_grab_used - try to reuse a VMID
  @vm: vm to allocate id for
  @ring: ring we want to submit job to
  @sync: sync object where we add dependencies
  @fence: fence protecting ID from reuse
  @job: job who wants to use the VMID
  @id: resulting VMID
  Try to reuse a VMID for this submission.
 Check if we can use a VMID already assigned to this VM 
 Check all the prerequisites to using this VMID 
		 Good, we can use this VMID. Remember this submission as
		  user of the VMID.
  amdgpu_vmid_grab - allocate the next free VMID
  @vm: vm to allocate id for
  @ring: ring we want to submit job to
  @sync: sync object where we add dependencies
  @fence: fence protecting ID from reuse
  @job: job who wants to use the VMID
  Allocate an id for the vm, adding fences to the sync obj as necessary.
 Still no ID to use? Then use the idle one found earlier 
 Remember this submission as user of the VMID 
 Select the first entry VMID 
  amdgpu_vmid_reset - reset VMID to zero
  @adev: amdgpu device structure
  @vmhub: vmhub type
  @vmid: vmid number to use
  Reset saved GDW, GWS and OA to force switch on next flush.
  amdgpu_vmid_reset_all - reset VMID to zero
  @adev: amdgpu device structure
  Reset VMID to force flush on next use
  amdgpu_vmid_mgr_init - init the VMID manager
  @adev: amdgpu_device pointer
  Initialize the VM manager structures
 manage only VMIDs not used by KFD 
 skip over VMID 0, since it is the system VM 
  amdgpu_vmid_mgr_fini - cleanup VM manager
  @adev: amdgpu_device pointer
  Cleanup the VM manager and free resources.
  Copyright 2019 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  vcn_v3_0_early_init - set function pointers
  @handle: amdgpu_device pointer
  Set ring and irq function pointers
 both instances are harvested, disable the block 
  vcn_v3_0_sw_init - sw init for VCN block
  @handle: amdgpu_device pointer
  Load firmware and sw initialization
	
	  Note: doorbell assignment is fixed for SRIOV multiple VCN engines
	  Formula:
	    vcn_db_base  = adev->doorbell_index.vcn.vcn_ring0_1 << 1;
	    dec_ring_i   = vcn_db_base + i  (adev->vcn.num_enc_rings + 1)
	    enc_ring_i,j = vcn_db_base + i  (adev->vcn.num_enc_rings + 1) + 1 + j
 get DWORD offset 
 VCN DEC TRAP 
 VCN ENC TRAP 
  vcn_v3_0_sw_fini - sw fini for VCN block
  @handle: amdgpu_device pointer
  VCN suspend and free up sw allocation
  vcn_v3_0_hw_init - start and test VCN block
  @handle: amdgpu_device pointer
  Initialize the hardware, boot up the VCPU and do some testing
 initialize VCN dec and enc ring buffers 
  vcn_v3_0_hw_fini - stop the hardware block
  @handle: amdgpu_device pointer
  Stop the VCN block, mark ring as not ready any more
  vcn_v3_0_suspend - suspend VCN block
  @handle: amdgpu_device pointer
  HW fini and suspend VCN block
  vcn_v3_0_resume - resume VCN block
  @handle: amdgpu_device pointer
  Resume firmware and hw init VCN block
  vcn_v3_0_mc_resume - memory controller programming
  @adev: amdgpu_device pointer
  @inst: instance number
  Let the VCN memory controller know it's offsets
 cache window 0: fw 
 cache window 1: stack 
 cache window 2: context 
 non-cache window 
 cache window 0: fw 
 cache window 1: stack 
 cache window 2: context 
 non-cache window 
 VCN global tiling registers 
 Before power off, this indicator has to be turned on 
  vcn_v3_0_disable_clock_gating - disable VCN clock gating
  @adev: amdgpu_device pointer
  @inst: instance number
  Disable clock gating for VCN block
 VCN disable CGC 
 enable sw clock gating control 
 turn off clock gating 
 turn on SUVD clock gating 
 turn on sw mode in UVD_SUVD_CGC_CTRL 
  vcn_v3_0_enable_clock_gating - enable VCN clock gating
  @adev: amdgpu_device pointer
  @inst: instance number
  Enable clock gating for VCN block
 enable VCN CGC 
 disable register anti-hang mechanism 
 enable dynamic power gating mode 
 enable clock gating 
 enable VCPU clock 
 disable master interupt 
 setup mmUVD_LMI_CTRL 
 enable LMI MC and UMC channels 
 unblock VCPU register access 
 enable master interrupt 
 add nop to workaround PSP size check 
 force RBC into idle state 
 Stall DPG before WPTRRPTR reset 
 set the write pointer delay 
 set the wb address 
 programm the RB_BASE for ring buffer 
 Initialize the ring buffer's read and write pointers 
 Reset FW shared memory RBC WPTRRPTR 
resetting done, fw can check RB ring 
 Unstall DPG 
 disable VCN power gating 
 set VCN status busy 
SW clock gating 
 enable VCPU clock 
 disable master interrupt 
 enable LMI MC and UMC channels 
 setup mmUVD_LMI_CTRL 
 setup mmUVD_MPC_CNTL 
 setup UVD_MPC_SET_MUXA0 
 setup UVD_MPC_SET_MUXB0 
 setup mmUVD_MPC_SET_MUX 
 VCN global tiling registers 
 unblock VCPU register access 
 release VCPU reset to boot 
 enable master interrupt 
 clear the busy bit of VCN_STATUS 
 force RBC into idle state 
 programm the RB_BASE for ring buffer 
 Initialize the ring buffer's read and write pointers 
 force RBC into idle state 
 add end packet 
 refine header 
 Update init table header in memory 
	 message MMSCH (in VCN[0]) to initialize this client
	  1, write to mmsch_vf_ctx_addr_lohi register with GPU mc addr
	  of memory descriptor location
 2, update vmid of descriptor 
 use domain0 for MM scheduler 
 3, notify mmsch about the size of this descriptor 
 4, set resp to zero 
	 5, kick off the initialization and wait until
	  MMSCH_VF_MAILBOX_RESP becomes non-zero
 Wait for power status to be 1 
 wait for read ptr to be equal to write ptr 
 disable dynamic power gating mode 
 wait for vcn idle 
 disable LMI UMC channel 
 block VCPU register access 
 reset VCPU 
 disable VCPU clock 
 apply soft reset 
 clear status 
 apply HW clock gating 
 enable VCN power gating 
 pauseunpause if state is changed 
 pause DPG 
 wait for ACK 
 Stall DPG before WPTRRPTR reset 
 Restore 
 restore wptrrptr with pointers saved in FW shared memory
 Unstall DPG 
 unpause dpg, no need to wait 
  vcn_v3_0_dec_ring_get_rptr - get read pointer
  @ring: amdgpu_ring pointer
  Returns the current hardware read pointer
  vcn_v3_0_dec_ring_get_wptr - get write pointer
  @ring: amdgpu_ring pointer
  Returns the current hardware write pointer
  vcn_v3_0_dec_ring_set_wptr - set write pointer
  @ring: amdgpu_ring pointer
  Commits the write pointer to the hardware
whenever update RBC_RB_WPTR, we save the wptr in shared rb.wptr and scratch2 
 wait for register write 
 vcn_v3_0_dec_sw_ring_emit_vm_flush 
 vcn_v3_0_dec_sw_ring_emit_fdec_swe x2 vm fdec_swe 
 vcn_v3_0_dec_sw_ring_insert_end 
 vcn_v3_0_dec_sw_ring_emit_ib 
amdgpu_vcn_dec_sw_ring_test_ib,
 The create msg must be in the first IB submitted 
 Check length 
 H246, HEVC and VP9 can run on any instance 
 The first instance can decode anything 
 vcn_v2_0_dec_ring_emit_vm_flush 
 vcn_v2_0_dec_ring_emit_fence x2 vm fence 
 vcn_v2_0_dec_ring_emit_ib 
  vcn_v3_0_enc_ring_get_rptr - get enc read pointer
  @ring: amdgpu_ring pointer
  Returns the current hardware enc read pointer
  vcn_v3_0_enc_ring_get_wptr - get enc write pointer
  @ring: amdgpu_ring pointer
  Returns the current hardware enc write pointer
  vcn_v3_0_enc_ring_set_wptr - set enc write pointer
  @ring: amdgpu_ring pointer
  Commits the enc write pointer to the hardware
 vcn_v2_0_enc_ring_emit_vm_flush 
 vcn_v2_0_enc_ring_emit_fence x2 vm fence 
 vcn_v2_0_enc_ring_insert_end 
 vcn_v2_0_enc_ring_emit_ib 
	 for SRIOV, guest should not control VCN Power-gating
	  MMSCH FW should control Power-gating and clock-gating
	  guest should avoid touching CGC and PG
  Copyright 2014 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 Enable pflip interrupts 
 Disable pflip interrupts 
  dce_v10_0_page_flip - pageflip callback.
  @adev: amdgpu_device pointer
  @crtc_id: crtc to cleanup pageflip on
  @crtc_base: new address of the crtc (GPU MC address)
  @async: asynchronous flip
  Triggers the actual pageflip by updating the primary
  surface base address.
 flip at hsync for async, default is vsync 
 update pitch 
 update the primary scanout address 
 writing to the low address triggers the update 
 post the write 
  dce_v10_0_hpd_sense - hpd sense callback.
  @adev: amdgpu_device pointer
  @hpd: hpd (hotplug detect) pin
  Checks if a digital monitor is connected (evergreen+).
  Returns true if connected, false if not connected.
  dce_v10_0_hpd_set_polarity - hpd set polarity callback.
  @adev: amdgpu_device pointer
  @hpd: hpd (hotplug detect) pin
  Set the polarity of the hpd pin (evergreen+).
  dce_v10_0_hpd_init - hpd setup callback.
  @adev: amdgpu_device pointer
  Setup the hpd pins used by the card (evergreen+).
  Enable the pin, set the polarity, and enable the hpd interrupts.
			 don't try to enable hpd on eDP or LVDS avoid breaking the
			  aux dp channel on imac and help (but not completely fix)
			  https:bugzilla.redhat.comshow_bug.cgi?id=726143
			  also avoid interrupt storms during dpms.
  dce_v10_0_hpd_fini - hpd tear down callback.
  @adev: amdgpu_device pointer
  Tear down the hpd pins used by the card (evergreen+).
  Disable the hpd interrupts.
 Lockout access through VGA aperture
 disable VGA render 
Disable VGA render and enabled crtc, if has DCE engine
Disable crtc
 LVDSeDP FMT is set up by atom 
 not needed for analog 
 XXX sort out optimal dither settings 
 XXX sort out optimal dither settings 
 XXX sort out optimal dither settings 
 not needed 
 display watermark setup 
  dce_v10_0_line_buffer_adjust - Set up the line buffer
  @adev: amdgpu_device pointer
  @amdgpu_crtc: the selected display controller
  @mode: the current display mode on the selected display
  controller
  Setup up the line buffer allocation for
  the selected display controller (CIK).
  Returns the line buffer size in pixels.
	
	  Line Buffer Setup
	  There are 6 line buffers, one for each display controllers.
	  There are 3 partitions per LB. Select the number of partitions
	  to enable based on the display width.  For display widths larger
	  than 4096, you need use to use 2 display controllers and combine
	  them using the stereo blender.
 controller not enabled, so no lb used 
  cik_get_number_of_dram_channels - get the number of dram channels
  @adev: amdgpu_device pointer
  Look up the number of video ram channels (CIK).
  Used for display watermark bandwidth calculations
  Returns the number of dram channels
 number of dram channels 
 bandwidth per dram data pin in kHz 
 engine clock in kHz 
 display clock in kHz 
 viewport width 
 active display time in ns 
 blank time in ns 
 mode is interlaced 
 vertical scale ratio 
 number of active crtcs 
 bytes per pixel display + overlay 
 line buffer allocated to pipe 
 vertical scaler taps 
  dce_v10_0_dram_bandwidth - get the dram bandwidth
  @wm: watermark calculation data
  Calculate the raw dram bandwidth (CIK).
  Used for display watermark bandwidth calculations
  Returns the dram bandwidth in MBytess
 Calculate raw DRAM Bandwidth 
 0.7 
  dce_v10_0_dram_bandwidth_for_display - get the dram bandwidth for display
  @wm: watermark calculation data
  Calculate the dram bandwidth used for display (CIK).
  Used for display watermark bandwidth calculations
  Returns the dram bandwidth for display in MBytess
 Calculate DRAM Bandwidth and the part allocated to display. 
 0.3 to 0.7 
 XXX worse case value 0.3 
  dce_v10_0_data_return_bandwidth - get the data return bandwidth
  @wm: watermark calculation data
  Calculate the data return bandwidth used for display (CIK).
  Used for display watermark bandwidth calculations
  Returns the data return bandwidth in MBytess
 Calculate the display Data return Bandwidth 
 0.8 
  dce_v10_0_dmif_request_bandwidth - get the dmif bandwidth
  @wm: watermark calculation data
  Calculate the dmif bandwidth used for display (CIK).
  Used for display watermark bandwidth calculations
  Returns the dmif bandwidth in MBytess
 Calculate the DMIF Request Bandwidth 
 0.8 
  dce_v10_0_available_bandwidth - get the min available bandwidth
  @wm: watermark calculation data
  Calculate the min available bandwidth used for display (CIK).
  Used for display watermark bandwidth calculations
  Returns the min available bandwidth in MBytess
 Calculate the Available bandwidth. Display can use this temporarily but not in average. 
  dce_v10_0_average_bandwidth - get the average available bandwidth
  @wm: watermark calculation data
  Calculate the average available bandwidth used for display (CIK).
  Used for display watermark bandwidth calculations
  Returns the average available bandwidth in MBytess
	 Calculate the display mode Average Bandwidth
	  DisplayMode should contain the source and destination dimensions,
	  timing, etc.
  dce_v10_0_latency_watermark - get the latency watermark
  @wm: watermark calculation data
  Calculate the latency watermark (CIK).
  Used for display watermark bandwidth calculations
  Returns the latency watermark in ns
 First calculate the latency in ns 
 2000 ns. 
 dc pipe latency 
  dce_v10_0_average_bandwidth_vs_dram_bandwidth_for_display - check
  average and available dram bandwidth
  @wm: watermark calculation data
  Check if the display average bandwidth fits in the display
  dram bandwidth (CIK).
  Used for display watermark bandwidth calculations
  Returns true if the display fits, false if not.
  dce_v10_0_average_bandwidth_vs_available_bandwidth - check
  average and available bandwidth
  @wm: watermark calculation data
  Check if the display average bandwidth fits in the display
  available bandwidth (CIK).
  Used for display watermark bandwidth calculations
  Returns true if the display fits, false if not.
  dce_v10_0_check_latency_hiding - check latency hiding
  @wm: watermark calculation data
  Check latency hiding (CIK).
  Used for display watermark bandwidth calculations
  Returns true if the display fits, false if not.
  dce_v10_0_program_watermarks - program display watermarks
  @adev: amdgpu_device pointer
  @amdgpu_crtc: the selected display controller
  @lb_size: line buffer size
  @num_heads: number of display controllers in use
  Calculate and program the display watermarks for the
  selected display controller (CIK).
 watermark for high clocks 
 XXX: get this from fb config 
 set for high clocks 
 possibly force display priority to high 
 should really do this at mode validation time... 
 watermark for low clocks 
 XXX: get this from fb config 
 set for low clocks 
 possibly force display priority to high 
 should really do this at mode validation time... 
 select wm A 
 select wm B 
 restore original selection 
 save values for DPM 
 Save number of lines the linebuffer leads before the scanout 
  dce_v10_0_bandwidth_update - program display watermarks
  @adev: amdgpu_device pointer
  Calculate and program the display watermarks and line
  buffer allocation (CIK).
 program the speaker allocation 
 set HDMI mode 
 stereo 
 disable audio.  it will be set up later 
 XXX remove once we switch to ip funcs 
  update the N and CTS parameters for a given pixel clock rate
  build a HDMI Video Info Frame
 XXX two dtos; generally use dto0 for hdmi 
	 Express [24MHz  target pixel clock] as an exact rational
	  number (coefficient of two integer numbers.  DCCG_AUDIO_DTOx_PHASE
	  is the numerator, DCCG_AUDIO_DTOx_MODULE is the denominator
  update the info frames with the data from the current display mode
 Silent, r600_hdmi_enable will raise WARN for us 
 hdmi deep color mode general control packets setup, if bpc > 8 
 disable audio prior to setting up hw 
 send null packets when required 
 send null packets when required 
 send general control packets 
 send general control packets every frame 
 enable audio info frames (frames won't be set until audio is enabled) 
 required for audio info values to be updated 
 required for audio info values to be updated 
 anything other than 0 
 unset HDMI_GC_AVMUTE 
 set the default audio delay 
 should be suffient for all audio modes and small enough for all hblanks 
 allow 60958 channel status fields to be updated 
 clear SW CTS value 
 select SW CTS value 
 allow hw to sent ACR packets when required 
 enable AVI info frames 
 required for audio info values to be updated 
 send audio packets 
 enable audio after to setting up hw 
 Silent, r600_hdmi_enable will raise WARN for us 
 DCE10 has audio blocks tied to DIG encoders 
 no fb bound 
	 If atomic, assume fb object is pinned & idle & fenced and
	  just update base pointers
 Greater 8 bpc fb needs to bypass hw-lut to retain precision 
 Greater 8 bpc fb needs to bypass hw-lut to retain precision 
	 Make sure surface address is updated at vertical blank rather than
	  horizontal blank
	
	  The LUT only has 256 slots for indexing by a 8 bpc fb. Bypass the LUT
	  for > 8 bpc scanout to avoid truncation of fb indices to 8 msb's, to
	  retain the full precision throughout the pipeline.
 set pageflip to happen anywhere in vblank interval 
 Bytes per pixel may have changed 
 XXX match this to the depth of the crtc fmt block, move to modeset? 
	 XXX this only needs to be programmed once per crtc at startup,
	  not sure where the best place for it is
  dce_v10_0_pick_pll - Allocate a PPLL for use by the crtc.
  @crtc: drm crtc
  Returns the PPLL (Pixel PLL) to be used by the crtc.  For DP monitors
  a single PPLL can be used for all DP crtcsencoders.  For non-DP
  monitors a dedicated PPLL must be used.  If a particular board has
  an external DP PLL, return ATOM_PPLL_INVALID to skip PLL programming
  as there is no need to program the PLL itself.  If we are not able to
  allocate a PLL, return ATOM_PPLL_INVALID to skip PLL programming to
  avoid messing up an existing monitor.
  Asic specific PLL information
  DCE 10.x
  Tonga
  - PPLL1, PPLL2 are available for all UNIPHY (both DP and non-DP)
  CI
  - PPLL0, PPLL1, PPLL2 are available for all UNIPHY (both DP and non-DP) and DAC
 skip PPLL programming if using ext clock 
 use the same PPLL for all DP monitors 
 use the same PPLL for all monitors with the same clock 
 DCE10 has PPLL0, PPLL1, and PPLL2 
 avivo cursor are offset into the total surface 
 turn off cursor 
 Make sure VBLANK and PFLIP interrupts are still enabled 
 adjust pm to dpms 
 disable crtc pair power gating before programming 
 disable the GRPH 
			 one other crtc is using this pll don't turn
			  off the pll
 disable the ppll 
 update the hw version fpr dpm 
 assign the encoder to the amdgpu crtc to avoid repeated lookups later 
 pick pll 
 if we can't get a PPLL for a non-DP encoder, fail 
 FIXME: not supported yet 
 HPD hotplug 
 allocate crtcs 
 setup afmt 
 disable vga render 
 init dig PHYs, disp eng pll 
 initialize hpd 
 turn on the BL 
 Wait a little for things to settle down 
 IRQ could occur when in initial stage 
 page flip completed. clean up 
 wakeup usersapce 
 vblank 
 vline 
 need to call this here rather than in prepare() since we need some crtc info 
 set scaler clears this on some chips 
 select the clockdata port if it uses a router 
 turn eDP panel on for mode set 
 this is needed for the pllss setup to work correctly in some cases 
 set up the FMT blocks 
 need to call this here as we need the crtc set up 
 these are handled by the primary encoders 
 no detect for TMDSLVDS yet 
 see if we already added it 
 add a new one 
 these are handled by the primary encoders 
  Copyright 2011 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: Alex Deucher
 these are a limitation of ProcessI2cChannelTransaction not the hw 
 error 
 check for bus probe 
 max_bytes are a limitation of ProcessI2cChannelTransaction not the hw 
  Copyright 2019 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  amdgpu_vm_sdma_map_table - make sure new PDsPTs are GTT mapped
  @table: newly allocated or validated PDPT
  amdgpu_vm_sdma_prepare - prepare SDMA command submission
  @p: see amdgpu_vm_update_params definition
  @resv: reservation object with embedded fence
  @sync_mode: synchronization mode
  Returns:
  Negativ errno, 0 for success.
  amdgpu_vm_sdma_commit - commit SDMA command submission
  @p: see amdgpu_vm_update_params definition
  @fence: resulting fence
  Returns:
  Negativ errno, 0 for success.
  amdgpu_vm_sdma_copy_ptes - copy the PTEs from mapping
  @p: see amdgpu_vm_update_params definition
  @bo: PDPT to update
  @pe: addr of the page entry
  @count: number of page entries to copy
  Traces the parameters and calls the DMA function to copy the PTEs.
  amdgpu_vm_sdma_set_ptes - helper to call the right asic function
  @p: see amdgpu_vm_update_params definition
  @bo: PDPT to update
  @pe: byte offset of the PDEPTE, relative to start of PDBPTB
  @addr: dst addr to write into pe
  @count: number of page entries to update
  @incr: increase next addr by incr bytes
  @flags: hw access flags
  Traces the parameters and calls the right asic functions
  to setup the page table using the DMA.
  amdgpu_vm_sdma_update - execute VM update
  @p: see amdgpu_vm_update_params definition
  @vmbo: PDPT to update
  @pe: byte offset of the PDEPTE, relative to start of PDBPTB
  @addr: dst addr to write into pe
  @count: number of page entries to update
  @incr: increase next addr by incr bytes
  @flags: hw access flags
  Reserve space in the IB, setup mapping buffer on demand and write commands to
  the IB.
 Wait for PDPT moves to be completed 
 estimate how many dw we need 
 set page commands needed 
 copy commands needed 
 for padding 
 Put the PTEs at the end of the IB. 
  Copyright 2019 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 AMD_CG_SUPPORT_ATHUB_MGCG 
 AMD_CG_SUPPORT_ATHUB_LS 
  Copyright 2016 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: Christian König
  DOC: mem_info_gtt_total
  The amdgpu driver provides a sysfs API for reporting current total size of
  the GTT.
  The file mem_info_gtt_total is used for this, and returns the total size of
  the GTT block, in bytes
  DOC: mem_info_gtt_used
  The amdgpu driver provides a sysfs API for reporting current total amount of
  used GTT.
  The file mem_info_gtt_used is used for this, and returns the current used
  size of the GTT block, in bytes
  amdgpu_gtt_mgr_has_gart_addr - Check if mem has address space
  @res: the mem object to check
  Check if a mem object has already address space allocated.
  amdgpu_gtt_mgr_new - allocate a new node
  @man: TTM memory type manager
  @tbo: TTM BO we need this range for
  @place: placement flags and restrictions
  @res: the resulting mem object
  Dummy, allocate the node but no space for it yet.
  amdgpu_gtt_mgr_del - free ranges
  @man: TTM memory type manager
  @res: TTM memory object
  Free the allocated GTT again.
  amdgpu_gtt_mgr_usage - return usage of GTT domain
  @man: TTM memory type manager
  Return how many bytes are used in the GTT domain
  amdgpu_gtt_mgr_recover - re-init gart
  @man: TTM memory type manager
  Re-init the gart for each known BO in the GTT.
  amdgpu_gtt_mgr_debug - dump VRAM table
  @man: TTM memory type manager
  @printer: DRM printer to use
  Dump the table content using printk.
  amdgpu_gtt_mgr_init - init GTT manager and DRM MM
  @adev: amdgpu_device pointer
  @gtt_size: maximum size of GTT
  Allocate and initialize the GTT manager.
  amdgpu_gtt_mgr_fini - free and destroy GTT manager
  @adev: amdgpu_device pointer
  Destroy and free the GTT manager, returns -EBUSY if ranges are still
  allocated inside it.
  Copyright 2020 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 helper function that allow only use sdma0 register offset
 double bits error (multiple bits) error detection is not supported 
		 the SDMA_EDC_COUNTER register in each sdma instance
		  shares the same sed shift_mask
 double bit error is not supported 
 double bit error is not supported 
	
	  err_data->ue_count should be initialized to 0
	  before calling into this function
	 
	  SDMA RAS supports single bit uncorrectable error detection.
	  So, increment uncorrectable error count.
	
	  SDMA RAS does not support correctable errors.
	  Set ce count to 0.
 write 0 to EDC_COUNTER reg to clear sdma edc counters 
  Copyright 2018 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 Put DF on broadcast mode 
 Exit boradcast mode 
 AMD_CG_SUPPORT_DF_MGCG 
  Copyright 2019 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 UMC 6_1_2 registers 
 UMC 6_1_1 registers 
 select the lower chip 
 clear lower chip error count 
 select the higher chip 
 clear higher chip error count 
 UMC 6_1_2 registers 
 UMC 6_1_1 registers 
 select the lower chip and check the error count 
 select the higher chip and check the err counter 
	 check for SRAM correctable error
 UMC 6_1_2 registers 
 UMC 6_1_1 registers 
 check the MCUMC_STATUS 
 UMC 6_1_2 registers 
 UMC 6_1_1 registers 
 clear umc status 
 calculate error address if uece error is detected 
 the lowest lsb bits should be ignored 
 translate umc channel address to soc pa, 3 parts are included 
 we only save ue error information currently, ce is skipped 
 page frame address is saved 
 clear umc status 
 UMC 6_1_2 registers 
 UMC 6_1_1 registers 
 select the lower chip and check the error count 
 set ce error interrupt type to APIC based interrupt 
 set error count to initial value 
 select the higher chip and check the err counter 
  Copyright 2016 Advanced Micro Devices, Inc.
  All Rights Reserved.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sub license, andor sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
  THE COPYRIGHT HOLDERS, AUTHORS ANDOR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,
  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  USE OR OTHER DEALINGS IN THE SOFTWARE.
  The above copyright notice and this permission notice (including the
  next paragraph) shall be included in all copies or substantial portions
  of the Software.
  vce_v4_0_ring_get_rptr - get read pointer
  @ring: amdgpu_ring pointer
  Returns the current hardware read pointer
  vce_v4_0_ring_get_wptr - get write pointer
  @ring: amdgpu_ring pointer
  Returns the current hardware write pointer
  vce_v4_0_ring_set_wptr - set write pointer
  @ring: amdgpu_ring pointer
  Commits the write pointer to the hardware
 XXX check if swapping is necessary on BE 
 1, write to vce_mmsch_vf_ctx_addr_lohi register with GPU mc addr of memory descriptor location 
 2, update vmid of descriptor 
 use domain0 for MM scheduler 
 3, notify mmsch about the size of this descriptor 
 4, set resp to zero 
 5, kick off the initialization and wait until VCE_MMSCH_VF_MAILBOX_RESP becomes non-zero 
 BEGING OF MC_RESUME 
 end of MC_RESUME 
 clear BUSY flag 
 add end packet 
  vce_v4_0_start - start VCE block
  @adev: amdgpu_device pointer
  Setup and start the VCE block
 clear BUSY flag 
 Disable VCPU 
 hold on ECPU 
 clear VCE_STATUS 
 Set Clock-Gating off 
	 if (adev->cg_flags & AMD_CG_SUPPORT_VCE_MGCG)
		vce_v4_0_set_vce_sw_clock_gating(adev, false);
 currently only VCN0 support SRIOV 
 DOORBELL only works under SRIOV 
			 currently only use the first encoding ring for sriov,
			  so set unused location for other unused rings.
 free MM table 
 vce_v4_0_wait_for_idle(handle); 
 full access mode, so don't touch any VCE register 
	
	  Proper cleanups before halting the HW engine:
	    - cancel the delayed idle work
	    - enable powergating
	    - enable clockgating
	    - disable dpm
	 
	  TODO: to align with the VCN implementation, move the
	  jobs for clockgatingpowergatingdpm setting to
	  ->set_powergating_state().
 needed for driver unload
 AUTO_BUSY 
 RB0_BUSY 
 RB1_BUSY 
	 According to VCE team , we should use VCE_STATUS instead
	  SRBM_STATUS.VCE_BUSY bit for busy status checking.
	  GRBM_GFX_INDEX.INSTANCE_INDEX is used to specify which VCE
	  instance's registers are accessed
	  (0 for 1st instance, 10 for 2nd instance).
	 
	 VCE_STATUS
	 |UENC|ACPI|AUTO ACTIVE|RB1 |RB0 |RB2 |          |FW_LOADED|JOB |
	 |----+----+-----------+----+----+----+----------+---------+----|
	 |bit8|bit7|    bit6   |bit5|bit4|bit3|   bit2   |  bit1   |bit0|
	 
	  VCE team suggest use bit 3--bit 6 for busy status check
 Wait a little for things to settle down 
 Set Override to disable Clock Gating 
	 This function enables MGCG which is controlled by firmware.
	   With the clocks in the gated state the core is still
	   accessible but the firmware will throttle the clocks on the
	   fly as necessary.
 Program VCE Instance 0 or 1 if not harvested 
 initialize VCE_CLOCK_GATING_A: Clock ONOFF delay 
 initialize VCE_UENC_CLOCK_GATING: Clock ONOFF delay 
	 This doesn't actually powergate the VCE block.
	  That's done in the dpm code via the SMC.  This
	  just re-inits the block as necessary.  The actual
	  gating still happens in the dpm code.  We should
	  revisit this when there is a cleaner line between
	  the smc and the hw blocks
 wait for reg writes 
 vce_v4_0_is_idle ,
 vce_v4_0_wait_for_idle ,
 vce_v4_0_check_soft_reset ,
 vce_v4_0_pre_soft_reset ,
 vce_v4_0_soft_reset ,
 vce_v4_0_post_soft_reset ,
 vce_v4_0_emit_vm_flush 
 amdgpu_vce_ring_emit_fence x2 vm fence 
 vce_v4_0_ring_insert_end 
 vce_v4_0_ring_emit_ib 
  Copyright 2016 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
	
	  The only chips with SDMAv4 and ULV are VG10 and VG20.
	  Server SKUs take a different hysteresis setting from other SKUs.
		 arcturus shares the same FW memory across
  sdma_v4_0_init_microcode - load ucode images from disk
  @adev: amdgpu_device pointer
  Use the firmware interface to load the ucode images into
  the driver (not loaded into hw).
  Returns 0 on success, error on failure.
 emulation only, won't work on real chip
 vega10 real chip need to use PSP to load firmware
			 Acturus & Aldebaran will leverage the same FW memory
  sdma_v4_0_ring_get_rptr - get the current read pointer
  @ring: amdgpu ring pointer
  Get the current rptr from the hardware (VEGA10+).
 XXX check if swapping is necessary on BE 
  sdma_v4_0_ring_get_wptr - get the current write pointer
  @ring: amdgpu ring pointer
  Get the current wptr from the hardware (VEGA10+).
 XXX check if swapping is necessary on BE 
  sdma_v4_0_ring_set_wptr - commit the write pointer
  @ring: amdgpu ring pointer
  Write the wptr back to the hardware (VEGA10+).
 XXX check if swapping is necessary on BE 
  sdma_v4_0_page_ring_get_wptr - get the current write pointer
  @ring: amdgpu ring pointer
  Get the current wptr from the hardware (VEGA10+).
 XXX check if swapping is necessary on BE 
  sdma_v4_0_page_ring_set_wptr - commit the write pointer
  @ring: amdgpu ring pointer
  Write the wptr back to the hardware (VEGA10+).
 XXX check if swapping is necessary on BE 
  sdma_v4_0_ring_emit_ib - Schedule an IB on the DMA engine
  @ring: amdgpu ring pointer
  @job: job to retrieve vmid from
  @ib: IB object to schedule
  @flags: unused
  Schedule an IB in the DMA ring (VEGA10).
 IB packet must end on a 8 DW boundary 
 base must be 32 byte aligned 
 == 
 memory 
 registers 
 reference 
 mask 
 retry count, poll interval 
  sdma_v4_0_ring_emit_hdp_flush - emit an hdp flush on the DMA ring
  @ring: amdgpu ring pointer
  Emit an hdp flush packet on the requested DMA ring.
  sdma_v4_0_ring_emit_fence - emit a fence on the DMA ring
  @ring: amdgpu ring pointer
  @addr: address
  @seq: sequence number
  @flags: fence related flags
  Add a DMA fence packet to the ring to write
  the fence seq number and DMA trap packet to generate
  an interrupt if needed (VEGA10).
 write the fence 
 zero in first two bits 
 optionally write high bits as well 
 zero in first two bits 
 generate an interrupt 
  sdma_v4_0_gfx_stop - stop the gfx async dma engines
  @adev: amdgpu_device pointer
  Stop the gfx async dma ring buffers (VEGA10).
  sdma_v4_0_rlc_stop - stop the compute async dma engines
  @adev: amdgpu_device pointer
  Stop the compute async dma queues (VEGA10).
 XXX todo 
  sdma_v4_0_page_stop - stop the page async dma engines
  @adev: amdgpu_device pointer
  Stop the page async dma ring buffers (VEGA10).
  sdma_v4_0_ctx_switch_enable - stop the async dma engines context switch
  @adev: amdgpu_device pointer
  @enable: enabledisable the DMA MEs context switch.
  Halt or unhalt the async dma engines context switch (VEGA10).
		
		  Enable SDMA utilization. Its only supported on
		  Arcturus for the moment and firmware version 14
		  and above.
 Extend page fault timeout to avoid interrupt storm 
  sdma_v4_0_enable - stop the async dma engines
  @adev: amdgpu_device pointer
  @enable: enabledisable the DMA MEs.
  Halt or unhalt the async dma engines (VEGA10).
  sdma_v4_0_rb_cntl - get parameters for rb_cntl
 Set ring buffer size in dwords 
  sdma_v4_0_gfx_resume - setup and start the async dma engines
  @adev: amdgpu_device pointer
  @i: instance to resume
  Set up the gfx DMA ring buffers and enable them (VEGA10).
  Returns 0 for success, error for failure.
 Initialize the ring buffer's read and write pointers 
 set the wb address whether it's enabled or not 
 before programing wptr to a less value, need set minor_ptr_update first 
 set minor_ptr_update to 0 after wptr programed 
 setup the wptr shadow polling 
 enable DMA RB 
 enable DMA IBs 
  sdma_v4_0_page_resume - setup and start the async dma engines
  @adev: amdgpu_device pointer
  @i: instance to resume
  Set up the page DMA ring buffers and enable them (VEGA10).
  Returns 0 for success, error for failure.
 Initialize the ring buffer's read and write pointers 
 set the wb address whether it's enabled or not 
 before programing wptr to a less value, need set minor_ptr_update first 
 paging queue doorbell range is setup at sdma_v4_0_gfx_resume 
 set minor_ptr_update to 0 after wptr programed 
 setup the wptr shadow polling 
 enable DMA RB 
 enable DMA IBs 
 enable idle interrupt 
 disable idle interrupt 
 Enable HW based PG. 
 enable interrupt 
 Configure hold time to filter in-valid power onoff request. Use default right now 
 Configure switch time for hysteresis purpose. Use default right now 
  sdma_v4_0_rlc_resume - setup and start the async dma engines
  @adev: amdgpu_device pointer
  Set up the compute DMA queues and enable them (VEGA10).
  Returns 0 for success, error for failure.
  sdma_v4_0_load_microcode - load the sDMA ME ucode
  @adev: amdgpu_device pointer
  Loads the sDMA01 ucode.
  Returns 0 for success, -EINVAL if the ucode is not available.
 halt the MEs 
  sdma_v4_0_start - setup and start the async dma engines
  @adev: amdgpu_device pointer
  Set up the DMA engines and enable them (VEGA10).
  Returns 0 for success, error for failure.
 unhalt the MEs 
 enable sdma ring preemption 
 start the gfx rings and rlc compute queues 
 set utc l1 enable flag always to 1 
 unhalt engine 
  sdma_v4_0_ring_test_ring - simple async dma engine test
  @ring: amdgpu_ring structure holding ring information
  Test the DMA engine by writing using it to write an
  value to memory. (VEGA10).
  Returns 0 for success, error for failure.
  sdma_v4_0_ring_test_ib - test an IB on the DMA engine
  @ring: amdgpu_ring structure holding ring information
  @timeout: timeout value in jiffies, or MAX_SCHEDULE_TIMEOUT
  Test a simple IB in the DMA ring (VEGA10).
  Returns 0 on success, error on failure.
  sdma_v4_0_vm_copy_pte - update PTEs by copying them from the GART
  @ib: indirect buffer to fill with commands
  @pe: addr of the page entry
  @src: src addr to copy from
  @count: number of page entries to update
  Update PTEs by copying them from the GART using sDMA (VEGA10).
 srcdst endian swap 
  sdma_v4_0_vm_write_pte - update PTEs by writing them manually
  @ib: indirect buffer to fill with commands
  @pe: addr of the page entry
  @value: dst addr to write into pe
  @count: number of page entries to update
  @incr: increase next addr by incr bytes
  Update PTEs by writing them manually using sDMA (VEGA10).
  sdma_v4_0_vm_set_pte_pde - update the page tables using sDMA
  @ib: indirect buffer to fill with commands
  @pe: addr of the page entry
  @addr: dst addr to write into pe
  @count: number of page entries to update
  @incr: increase next addr by incr bytes
  @flags: access flags
  Update the page tables using sDMA (VEGA10).
 for physically contiguous pages (vram) 
 dst addr 
 mask 
 value 
 increment size 
 number of entries 
  sdma_v4_0_ring_pad_ib - pad the IB to the required number of dw
  @ring: amdgpu_ring structure holding ring information
  @ib: indirect buffer to fill with padding
  sdma_v4_0_ring_emit_pipeline_sync - sync the pipeline
  @ring: amdgpu_ring pointer
  Make sure all previous operations are completed (CIK).
 wait for idle 
  sdma_v4_0_ring_emit_vm_flush - vm flush using sDMA
  @ring: amdgpu_ring pointer
  @vmid: vmid number to use
  @pd_addr: address
  Update the page table base and flush the VM TLB
  using sDMA (VEGA10).
return fw_version >= 31;
 TODO: Page queue breaks driver reload under SRIOV 
 SDMA trap event 
 SDMA SRAM ECC event 
 SDMA VM_HOLEDOORBELL_INVPOLL_TIMEOUTSRBM_WRITE_PROTECTION event
 doorbell size is 2 dwords, get DWORD offset 
			 paging queue use same doorbell indexrouting as gfx queue
			  with 0x400 (4096 dwords) offset on second doorbell page
 todo 
 XXX compute 
	 When “Full RAS” is enabled, the per-IP interrupt sources should
	  be disabled and the driver should only look for the aggregated
	  interrupt via sync flood
 1-not override: enable sdma mem light sleep 
 0-override:disable sdma mem light sleep 
 AMD_CG_SUPPORT_SDMA_MGCG 
 AMD_CG_SUPPORT_SDMA_LS 
 sdma_v4_0_ring_emit_hdp_flush 
 hdp invalidate 
 sdma_v4_0_ring_emit_pipeline_sync 
 sdma_v4_0_ring_emit_vm_flush 
 sdma_v4_0_ring_emit_fence x3 for user fence, vm fence 
 sdma_v4_0_ring_emit_ib 
  On Arcturus, SDMA instance 5~7 has a different vmhub type(AMDGPU_MMHUB_1).
  So create a individual constant ring_funcs for those instances.
 sdma_v4_0_ring_emit_hdp_flush 
 hdp invalidate 
 sdma_v4_0_ring_emit_pipeline_sync 
 sdma_v4_0_ring_emit_vm_flush 
 sdma_v4_0_ring_emit_fence x3 for user fence, vm fence 
 sdma_v4_0_ring_emit_ib 
 sdma_v4_0_ring_emit_hdp_flush 
 hdp invalidate 
 sdma_v4_0_ring_emit_pipeline_sync 
 sdma_v4_0_ring_emit_vm_flush 
 sdma_v4_0_ring_emit_fence x3 for user fence, vm fence 
 sdma_v4_0_ring_emit_ib 
 sdma_v4_0_ring_emit_hdp_flush 
 hdp invalidate 
 sdma_v4_0_ring_emit_pipeline_sync 
 sdma_v4_0_ring_emit_vm_flush 
 sdma_v4_0_ring_emit_fence x3 for user fence, vm fence 
 sdma_v4_0_ring_emit_ib 
For Arcturus and Aldebaran, add another 4 irq handler
  sdma_v4_0_emit_copy_buffer - copy buffer using the sDMA engine
  @ib: indirect buffer to copy to
  @src_offset: src GPU address
  @dst_offset: dst GPU address
  @byte_count: number of bytes to xfer
  @tmz: if a secure copy should be used
  Copy GPU buffers using the DMA engine (VEGA1012).
  Used by the amdgpu ttm implementation to move pages if
  registered as the asic copy callback.
 srcdst endian swap 
  sdma_v4_0_emit_fill_buffer - fill buffer using the sDMA engine
  @ib: indirect buffer to copy to
  @src_data: value to write to buffer
  @dst_offset: dst GPU address
  @byte_count: number of bytes to xfer
  Fill GPU buffers using the DMA engine (VEGA1012).
 double bits error (multiple bits) error detection is not supported 
		 the SDMA_EDC_COUNTER register in each sdma instance
		  shares the same sed shift_mask
 double bit error is not supported 
	 err_data->ce_count should be initialized to 0
	 double bit error is not supported
 read back edc counter registers to clear the counters 
  Copyright 2015 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: Alex Deucher
	 The indirect buffer packet must end on an 8 DW boundary in the DMA ring.
	  Pad as necessary with NOPs.
  si_dma_ring_emit_fence - emit a fence on the DMA ring
  @ring: amdgpu ring pointer
  @addr: address
  @seq: sequence number
  @flags: fence related flags
  Add a DMA fence packet to the ring to write
  the fence seq number and DMA trap packet to generate
  an interrupt if needed (VI).
 write the fence 
 optionally write high bits as well 
 generate an interrupt 
 dma0 
 Set ring buffer size in dwords 
 Initialize the ring buffer's read and write pointers 
 enable DMA IBs 
  si_dma_ring_test_ring - simple async dma engine test
  @ring: amdgpu_ring structure holding ring information
  Test the DMA engine by writing using it to write an
  value to memory. (VI).
  Returns 0 for success, error for failure.
  si_dma_ring_test_ib - test an IB on the DMA engine
  @ring: amdgpu_ring structure holding ring information
  @timeout: timeout value in jiffies, or MAX_SCHEDULE_TIMEOUT
  Test a simple IB in the DMA ring (VI).
  Returns 0 on success, error on failure.
  si_dma_vm_copy_pte - update PTEs by copying them from the GART
  @ib: indirect buffer to fill with commands
  @pe: addr of the page entry
  @src: src addr to copy from
  @count: number of page entries to update
  Update PTEs by copying them from the GART using DMA (SI).
  si_dma_vm_write_pte - update PTEs by writing them manually
  @ib: indirect buffer to fill with commands
  @pe: addr of the page entry
  @value: dst addr to write into pe
  @count: number of page entries to update
  @incr: increase next addr by incr bytes
  Update PTEs by writing them manually using DMA (SI).
  si_dma_vm_set_pte_pde - update the page tables using sDMA
  @ib: indirect buffer to fill with commands
  @pe: addr of the page entry
  @addr: dst addr to write into pe
  @count: number of page entries to update
  @incr: increase next addr by incr bytes
  @flags: access flags
  Update the page tables using sDMA (CIK).
 for physically contiguous pages (vram) 
 dst addr 
 mask 
 value 
 increment size 
  si_dma_ring_pad_ib - pad the IB to the required number of dw
  @ring: amdgpu_ring pointer
  @ib: indirect buffer to fill with padding
  si_dma_ring_emit_pipeline_sync - sync the pipeline
  @ring: amdgpu_ring pointer
  Make sure all previous operations are completed (CIK).
 wait for idle 
 Poll memory 
 retry, addr_hi 
 mask 
 value 
 func(equal) | poll interval 
  si_dma_ring_emit_vm_flush - cik vm flush using sDMA
  @ring: amdgpu_ring pointer
  @vmid: vmid number to use
  @pd_addr: address
  Update the page table base and flush the VM TLB
  using sDMA (VI).
 wait for invalidate to complete 
 retry 
 mask 
 value 
 func(always) | poll interval 
 DMA0 trap event 
 DMA1 trap event 
 hdp flush  invalidate 
 si_dma_ring_emit_pipeline_sync 
 si_dma_ring_emit_vm_flush 
 si_dma_ring_emit_fence x3 for user fence, vm fence 
 si_dma_ring_emit_ib 
  si_dma_emit_copy_buffer - copy buffer using the sDMA engine
  @ib: indirect buffer to copy to
  @src_offset: src GPU address
  @dst_offset: dst GPU address
  @byte_count: number of bytes to xfer
  @tmz: is this a secure operation
  Copy GPU buffers using the DMA engine (VI).
  Used by the amdgpu ttm implementation to move pages if
  registered as the asic copy callback.
  si_dma_emit_fill_buffer - fill buffer using the sDMA engine
  @ib: indirect buffer to copy to
  @src_data: value to write to buffer
  @dst_offset: dst GPU address
  @byte_count: number of bytes to xfer
  Fill GPU buffers using the DMA engine (VI).
  Copyright 2016 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
CPC
 CPF
 CPG
 GDS
 SPI
 SQ
 VGPR = SP
 SQC (3 ranges)
 SQC range 0
 SQC range 1
 SQC range 2
 TA
 TCA
 TCC (5 sub-ranges)
 TCC range 0
 TCC range 1
 TCC range 2
 TCC range 3
 TCC range 4
 TCI
 TCP
 TD
 EA (3 sub-ranges)
 EA range 0
 EA range 1
 EA range 2
 UTC VM L2 bank
 UTC VM walker
 UTC ATC L2 2MB cache
 UTC ATC L2 4KB cache
 vmid_mask:0 queue_type:0 (KIQ) 
 queue mask lo 
 queue mask hi 
 gws mask lo 
 gws mask hi 
 oac mask 
 gds heap base:0, gds heap size:0 
 Q_sel:0, vmid:0, vidmem: 1, engine:0, num_Q:1
 Q_sel: 0, vmid: 0, engine: 0, num_Q: 1 
 Queue_Sel 
 VMID 
queue_type: normal compute queue 
 alloc format: all_on_one_pipe 
 num_queues: must be 1 
 Q_sel: 0, vmid: 0, engine: 0, num_Q: 1 
 Q_sel: 0, vmid: 0, engine: 0, num_Q: 1 
 for renoir, don't need common goldensetting 
 memory (1) or register (0) 
 wait 
 equal 
 Dword align 
 poll interval 
bugzilla.kernel.orgshow_bug.cgi?id=204689 
bugzilla.kernel.orgshow_bug.cgi?id=207171 
 GFXOFF is unstable on C6 parts with a VBIOS 113-RAVEN-114 
	
	  For Picasso && AM4 SOCKET board, we use picasso_rlc_am4.bin
	  instead of picasso_rlc.bin.
	  Judgment method:
	  PCO AM4: revision >= 0xC8 && revision <= 0xCF
	           or revision >= 0xD8 && revision <= 0xDF
	  otherwise is PCO FP5
		
		SMC is loaded by SBIOS on APU and it's able to get the SMU version directly.
			 TODO: Determine if MEC2 JT FW loading can be removed
 No CPG in Arcturus 
 begin clear state 
 context control state 
 end clear state 
 clear state 
 set mmRLC_LB_THR_CONFIG_1234 
 set mmRLC_LB_CNTR_INIT = 0x0000_0000 
 set mmRLC_LB_CNTR_MAX = 0x0000_0500 
 set mmRLC_LB_INIT_CU_MASK thru broadcast mode to enable all SESH
 set mmRLC_LB_PARAMS = 0x003F_1006 
 set mmRLC_GPM_GENERAL_7[31-16] = 0x00C0 
	
	  RLC_LB_ALWAYS_ACTIVE_CU_MASK = 0xF (4 CUs AON for Raven),
	  programmed in gfx_v9_0_init_always_on_cu_mask()
	 set RLC_LB_CNTL = 0x8000_0095, 31 bit is reserved,
 set mmRLC_LB_THR_CONFIG_1234 
 set mmRLC_LB_CNTR_INIT = 0x0000_0000 
 set mmRLC_LB_CNTR_MAX = 0x0000_0500 
 set mmRLC_LB_INIT_CU_MASK thru broadcast mode to enable all SESH
 set mmRLC_LB_PARAMS = 0x003F_1006 
 set mmRLC_GPM_GENERAL_7[31-16] = 0x00C0 
	
	  RLC_LB_ALWAYS_ACTIVE_CU_MASK = 0xFFF (12 CUs AON),
	  programmed in gfx_v9_0_init_always_on_cu_mask()
	 set RLC_LB_CNTL = 0x8000_0095, 31 bit is reserved,
 init clear state block 
 TODO: double check the cp_table_size for RV 
 JT + GDS 
 init spm vmid with 0xf 
 take ownership of the relevant compute queues 
 type 1 wave data 
 check vbios table if gpu info is not available 
 check vbios table if gpu info is not available 
 mec0 is me1 
 type-2 packets are deprecated on MEC, use type-3 instead 
 EOP Event 
 Privileged reg 
 Privileged inst 
 ECC error 
 FUE error 
 set up the gfx ring 
 set up the compute queues - allocate horizontally across pipes 
 create MQD for all compute queues as wel as KIQ for SRIOV case 
 TODO 
	
	  Configure apertures:
	  LDS:         0x60000000'00000000 - 0x60000001'00000000 (4GB)
	  Scratch:     0x60000001'00000000 - 0x60000002'00000000 (4GB)
	  GPUVM:       0x60010000'00000000 - 0x60020000'00000000 (1TB)
 CP and shaders 
	 Initialize all compute VMIDs to have no GDS, GWS, or OA
	
	  Initialize all compute and user-gfx VMIDs to have no GDS, GWS, or OA
	  access. Compute VMIDs should be enabled by FW for target VMIDs,
	  the driver can enable them for graphics. VMID0 should maintain
	  access so that HWS firmware can saverestore entries.
 XXX SH_MEM regs 
 where to put LDS, scratch, GPUVM in FSA64 space 
 CP and shaders 
 These interrupts should be enabled to drive DS clock 
 csib 
 look for the matching indice 
 setup unique_indirect_regs array and indirect_start_offsets array 
 enable auto inc in case it is disabled 
 write register_restore table to offset 0x0 using RLC_SRM_ARAM_ADDRDATA 
 load indirect register 
 direct register portion 
 indirect register portion 
 set saverestore list size 
 write the starting offsets to RLC scratch ram 
 load unique indirect regs
 enable GFXIP control over CGPG 
 update status 
 restore GFXIP control over GCPG 
 init IDLE_POLL_COUNT = 60 
 init RLC PG Delay 
 program GRBM_REG_SAVE_GFX_IDLE_THRESHOLD to 0x55f0 
 read any GFX register to wake up GFX 
	
	  Rlc save restore list is workable since v2_1.
	  And it's needed by gfxoff feature.
 carrizo do enable cp interrupt after cp inited 
 RLC_GPM_GENERAL_6 : RLC Ucode version 
		 RLC_GPM_TIMER_INT_3 : Timer interval in RefCLK cycles,
		 RLC_GPM_GENERAL_12 : Minimum gap between wptr and rptr
		  to disable the page fault retry interrupts, default is
 disable CG 
 legacy rlc firmware loading 
 PFP 
 CE 
 ME 
 init the CP 
 Set the write pointer delay 
 set the RB to use vmid 0 
 Set ring buffer size 
 Initialize the ring buffer's write pointers 
 set the wb address wether it's enabled or not 
 start the ring 
 MEC1 
 Todo : Loading MEC2 firmware is only necessary if MEC2 should run different microcode than MEC1. 
 KIQ functions 
 tell RLC which is KIQ queue 
 set the EOP size, register value is 2^(EOP_SIZE+1) dwords 
 enable doorbell? 
 disable the queue if it's active 
 set the pointer to the MQD 
 set MQD vmid to 0 
 set the pointer to the HQD, this is similar CP_RB0_BASE_HI 
 set up the HQD, this is similar to CP_RB0_CNTL 
 set the wb address whether it's enabled or not 
 only used if CP_PQ_WPTR_POLL_CNTL.CP_PQ_WPTR_POLL_CNTL__EN_MASK=1 
 enable the doorbell if requested 
 reset read and write pointers, similar to CP_RB0_WPTR_RPTR 
 set the vmid for the queue 
 set MIN_IB_AVAIL_SIZE 
 set static priority for a queuering 
	 map_queues packet doesn't need activate the queue,
	  so only kiq need set this field.
 disable wptr polling 
 set the EOP size, register value is 2^(EOP_SIZE+1) dwords 
 enable doorbell? 
 disable the queue if it's active 
 set the pointer to the MQD 
 set MQD vmid to 0 
 set the pointer to the HQD, this is similar CP_RB0_BASE_HI 
 set up the HQD, this is similar to CP_RB0_CNTL 
 set the wb address whether it's enabled or not 
 only used if CP_PQ_WPTR_POLL_CNTL.CP_PQ_WPTR_POLL_CNTL__EN_MASK=1 
 enable the doorbell if requested 
		 If GC has entered CGPG, ringing doorbell > first page
		  doesn't wakeup GC. Enlarge CP_MEC_DOORBELL_RANGE_UPPER to
		  workaround this issue. And this change has to align with firmware
		  update.
 reset read and write pointers, similar to CP_RB0_WPTR_RPTR 
 set the vmid for the queue 
 activate the queue 
 disable the queue if it's active 
 Manual disable if dequeue request times out 
	 GPU could be in bad state during probe, driver trigger the reset
	  after load the SMU, in this case , the mqd is not be initialized.
	  driver need to re-init the mqd.
	  check mqd->cp_hqd_pq_control since this value should not be 0
 for GPU_RESET case , reset MQD to a clean status 
 reset ring buffer 
	 Same as above kiq init, driver need to re-init the mqd if mqd->cp_hqd_pq_control
	  is not be initialized before
 for GPU_RESET case 
 reset MQD to a clean status 
 reset ring buffer 
 legacy firmware loading 
 DF freeze and kcq disable will fail 
 disable KCQ to avoid CPC touch memory not valid anymore 
		 must disable polling for SRIOV when hw finished, otherwise
		  CPC engine may still keep fetching WB address which is already
		  invalid after sw finished and trigger DMAR reading error in
		  hypervisor side.
	 Use deinitialize sequence from CAIL when unbinding device from driver,
	  otherwise KIQ is hanging when binding back
 Skip suspend with A+A reset 
 GRBM_STATUS 
 GRBM_STATUS2 
 stop the rlc 
 Disable GFX parsingprefetching 
 Disable MEC parsingprefetching 
 Wait a little for things to settle down 
 src: register
 dst: memory 
 count sel 
 write confirm 
	 don't wait anymore for gpu reset case because this way may
	  block gpu_recover() routine forever, e.g. this virt_kiq_rreg
	  is triggered in TTM and ttm_bo_lock_delayed_workqueue() will
	  never return if we keep waiting in virt_kiq_rreg, which cause
	  gpu_recover() hang there.
	 
	  also don't wait anymore for IRQ context
 GDS Base 
 GDS Size 
 GWS 
 OA 
 When below register arrays changed, please update gpr_reg_size,
  and sec_ded_counter_reg_size in function gfx_v9_0_do_edc_gpr_workarounds,
 64KB LDS 
 64KB LDS 
 (80 GPRS) 
 (80 GPRS) 
 only support when RAS is enabled 
 only support when RAS is enabled 
 bail if the compute ring is not ready 
 VGPRS 
 SGPRS1 
 SGPRS2 
 allocate an indirect buffer to put the commands in 
 load the compute shaders 
 init the ib length to 0 
 VGPR 
 write the register state for the compute dispatch 
 write the shader start address: mmCOMPUTE_PGM_LO, mmCOMPUTE_PGM_HI 
 write dispatch packet 
 x 
 y 
 z 
 write CS partial flush packet 
 SGPR1 
 write the register state for the compute dispatch 
 write the shader start address: mmCOMPUTE_PGM_LO, mmCOMPUTE_PGM_HI 
 write dispatch packet 
 x 
 y 
 z 
 write CS partial flush packet 
 SGPR2 
 write the register state for the compute dispatch 
 write the shader start address: mmCOMPUTE_PGM_LO, mmCOMPUTE_PGM_HI 
 write dispatch packet 
 x 
 y 
 z 
 write CS partial flush packet 
 shedule the ib on the ring 
 wait for the GPU to finish processing the IB 
	
	  Temp workaround to fix the issue that CP firmware fails to
	  update read pointer when CPDMA is writing clearing operation
	  to GDS in suspendresume sequence on several cards. So just
	  limit this operation in cold boot sequence.
 requires IBs so do in late init after IB pool is initialized 
 if RLC is not enabled, do nothing 
 wait for RLC_SAFE_MODE 
 TODO: double check if we need to perform under safe mode 
 gfx_v9_0_enter_rlc_safe_mode(adev); 
 gfx_v9_0_exit_rlc_safe_mode(adev); 
 It is disabled by HW by default 
 1 - RLC_CGTT_MGCG_OVERRIDE 
 only for Vega10 & Raven1 
 MGLS is a global flag to control all MGLS in GFX 
 2 - RLC memory Light sleep 
 3 - CP memory Light sleep 
 1 - MGCG_OVERRIDE 
 2 - disable MGLS in RLC 
 3 - disable MGLS in CP 
 Enable 3D CGCGCGLS 
 write cmd to clear cgcgcgls ov 
 unset CGCG override 
 update CGCG and CGLS override bits 
 enable 3Dcgcg FSM(0x0000363f) 
 set IDLE_POLL_COUNT(0x00900100) 
 Disable CGCGCGLS 
 disable cgcg, cgls should be disabled 
 disable cgcg and cgls in FSM 
 unset CGCG override 
 update CGCG and CGLS override bits 
 enable cgcg FSM(0x0000363F) 
 set IDLE_POLL_COUNT(0x00900100) 
 reset CGCGCGLS bits 
 disable cgcg and cgls in FSM 
		 CGCGCGLS should be enabled after MGCGMGLS
		  ===  MGCG + MGLS ===
 ===  CGCG CGLS for GFX 3D Only === 
 ===  CGCG + CGLS === 
		 CGCGCGLS should be disabled before MGCGMGLS
		  ===  CGCG + CGLS ===
 ===  CGCG CGLS for GFX 3D Only === 
 ===  MGCG + MGLS === 
 update gfx cgpg state 
 update mgcg state 
 AMD_CG_SUPPORT_GFX_MGCG 
 AMD_CG_SUPPORT_GFX_CGCG 
 AMD_CG_SUPPORT_GFX_CGLS 
 AMD_CG_SUPPORT_GFX_RLC_LS 
 AMD_CG_SUPPORT_GFX_CP_LS 
 AMD_CG_SUPPORT_GFX_3D_CGCG 
 AMD_CG_SUPPORT_GFX_3D_CGLS 
 gfx9 is 32bit rptr
 XXX check if swapping is necessary on BE 
 XXX check if swapping is necessary on BE 
 pfp 
 Dword align 
	 Currently, there is a high possibility to get wave ID mismatch
	  between ME and GDS, leading to a hw deadlock, because ME generates
	  different wave IDs than the GDS expects. This situation happens
	  randomly when at least 5 compute pipes use GDS ordered append.
	  The wave IDs generated by ME are also wrong after suspendresume.
	  Those are probably bugs somewhere else in the kernel driver.
	 
	  Writing GDS_COMPUTE_MAX_WAVE_ID resets wave ID counters in ME and
	  GDS to 0 for this ring (mepipe).
 Dword align 
 RELEASE_MEM - flush caches, send int 
	
	  the address should be Qword aligned if 64bit write, Dword
	  aligned if only send 32bit data low (discard data high)
 compute doesn't have PFP 
 sync PFP to ME, otherwise we might get invalid PFP reads 
 gfx9 hardware is 32bit rptr 
 XXX check if swapping is necessary on BE 
 XXX check if swapping is necessary on BE 
 only DOORBELL method supported on gfx9 now 
 we only allocate 32bit for each seq wb address 
 write fence seq to the "addr" 
 set register to trigger INT 
 src_id is 178 
 set load_enable otherwise this package is just NOPs 
 set load_global_config & load_global_uconfig 
 set load_cs_sh_regs 
 set load_per_context_state & load_gfx_sh_regs for GFX 
 set load_ce_ram if preamble presented 
		 still load_ce_ram if this is the first time preamble presented
		  although there is no context switch happens.
 discard following DWs if cond_exec_gpu_addr==0 
 patch dummy value later 
 src: register
 dst: memory 
 write confirm 
 no inc addr 
	
	  amdgpu controls only the first MEC. That's why this function only
	  handles the setting of interrupts for this specific MEC. All other
	  pipes' interrupts are set by amdkfd.
			 Per-queue interrupt is supported for MEC starting from VI.
			   The interrupt can only be enableddisabled per pipe instead of per queue.
 read back registers to clear the counters 
 ACQUIRE_MEM -make one or more surfaces valid for use by the subsequent operations 
 CP_COHER_CNTL 
 CP_COHER_SIZE 
 CP_COHER_SIZE_HI 
 CP_COHER_BASE 
 CP_COHER_BASE_HI 
 POLL_INTERVAL 
 mmSPI_WCL_PIPE_PERCENT_CS[0-7]_DEFAULT values are same 
	 mmSPI_WCL_PIPE_PERCENT_GFX is 7 bit multiplier register to limit
	  number of gfx waves. Setting 5 bit will make sure gfx only gets
	  around 25% of gpu resources.
	 Restrict waves for normallow priority compute queues as well
	  to get best QoS for high priority compute jobs.
	 
	  amdgpu controls only 1st ME(0-3 CS pipes).
 totally 242 maximum if 16 IBs 
 COND_EXEC 
 PIPELINE_SYNC 
 VM_FLUSH 
 FENCE for VM_FLUSH 
 GDS switch 
		4 +  double SWITCH_BUFFER,
		       the first COND_EXEC jump to the place just
 COND_EXEC 
	HDP_flush 
	VGT_flush 
	CE_META 
	DE_META 
 CNTX_CTRL 
 HDP_INVL 
 FENCE x2 
 SWITCH_BUFFER 
 gfx_v9_0_emit_mem_sync 
 gfx_v9_0_ring_emit_ib_gfx 
 gfx_v9_0_ring_emit_gds_switch 
 gfx_v9_0_ring_emit_hdp_flush 
 hdp invalidate 
 gfx_v9_0_ring_emit_pipeline_sync 
 gfx_v9_0_ring_emit_vm_flush 
 gfx_v9_0_ring_emit_fence x3 for user fence, vm fence 
 gfx_v9_0_emit_mem_sync 
 gfx_v9_0_emit_wave_limit for updating mmSPI_WCL_PIPE_PERCENT_GFX register 
 for updating 3 mmSPI_WCL_PIPE_PERCENT_CS registers 
 gfx_v9_0_ring_emit_ib_compute 
 gfx_v9_0_ring_emit_gds_switch 
 gfx_v9_0_ring_emit_hdp_flush 
 hdp invalidate 
 gfx_v9_0_ring_emit_pipeline_sync 
 gfx_v9_0_ring_emit_vm_flush 
 gfx_v9_0_ring_emit_fence_kiq x3 for user fence, vm fence 
 gfx_v9_0_ring_emit_ib_compute 
C5 ECC error and C9 FUE error
 init asci gds info 
		 aldebaran removed all the GDS internal memory,
		  only support GWS opcode in kernel, like barrier
 raven2 
 raven1 
 deprecated for Aldebaran, no usage at all 
 this really depends on the chip 
	
	  16 comes from bitmap array size 44, and it can cover all gfx9 ASICs
			
			  The bitmap(and ao_cu_bitmap) in cu_info structure is
			  4x4 size array, and it's usually suitable for Vega
			  ASICs which has 42 SESH layout.
			  But for Arcturus, SESH layout is changed to 81.
			  To mostly reduce the impact, we make it compatible
			  with current bitmap array as below:
			     SE4,SH0 --> bitmap[0][1]
			     SE5,SH0 --> bitmap[1][1]
			     SE6,SH0 --> bitmap[2][1]
			     SE7,SH0 --> bitmap[3][1]
  Copyright 2020 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
	 Before doing clockpower mode switch,
	 HDP 5.0 doesn't support dynamic power mode switch,
 Already disabled above. The actions below are for "enabled" only 
 only one clock gating mode (LSDSSD) can be enabled 
 RC should not use shut down mode, fallback to ds  or ls if allowed 
		 confirmed that IPH_MEM_POWER_CTRL_EN and RC_MEM_POWER_CTRL_EN have to
 disable IPH & RC clock override after clockpower mode changing 
 AMD_CG_SUPPORT_HDP_MGCG 
 AMD_CG_SUPPORT_HDP_LSDSSD 
  Copyright 2016 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
UVD_PG0_CC_UVD_HARVESTING
  uvd_v7_0_ring_get_rptr - get read pointer
  @ring: amdgpu_ring pointer
  Returns the current hardware read pointer
  uvd_v7_0_enc_ring_get_rptr - get enc read pointer
  @ring: amdgpu_ring pointer
  Returns the current hardware enc read pointer
  uvd_v7_0_ring_get_wptr - get write pointer
  @ring: amdgpu_ring pointer
  Returns the current hardware write pointer
  uvd_v7_0_enc_ring_get_wptr - get enc write pointer
  @ring: amdgpu_ring pointer
  Returns the current hardware enc write pointer
  uvd_v7_0_ring_set_wptr - set write pointer
  @ring: amdgpu_ring pointer
  Commits the write pointer to the hardware
  uvd_v7_0_enc_ring_set_wptr - set enc write pointer
  @ring: amdgpu_ring pointer
  Commits the enc write pointer to the hardware
 XXX check if swapping is necessary on BE 
  uvd_v7_0_enc_ring_test_ring - test if UVD ENC ring is working
  @ring: the engine to test on
  uvd_v7_0_enc_get_create_msg - generate a UVD ENC create msg
  @ring: ring we should submit the msg to
  @handle: session handle to use
  @bo: amdgpu object for which we query the offset
  @fence: optional fence to return
  Open up a stream for HW test
 session info 
 task info 
 op initialize 
  uvd_v7_0_enc_get_destroy_msg - generate a UVD ENC destroy msg
  @ring: ring we should submit the msg to
  @handle: session handle to use
  @bo: amdgpu object for which we query the offset
  @fence: optional fence to return
  Close up a stream for HW test or if userspace failed to do so
 op close session 
  uvd_v7_0_enc_ring_test_ib - test if UVD ENC IBs are working
  @ring: the engine to test on
  @timeout: timeout value in jiffies, or MAX_SCHEDULE_TIMEOUT
 both instances are harvested, disable the block 
 UVD TRAP 
 UVD ENC TRAP 
				 currently only use the first enconding ring for
				  sriov, so set unused location for other unused rings.
  uvd_v7_0_hw_init - start and test UVD block
  @handle: handle used to pass amdgpu_device pointer
  Initialize the hardware, boot up the VCPU and do some testing
 Clear timeout status bits 
  uvd_v7_0_hw_fini - stop the hardware block
  @handle: handle used to pass amdgpu_device pointer
  Stop the UVD block, mark ring as not ready any more
 full access mode, so don't touch any UVD register 
	
	  Proper cleanups before halting the HW engine:
	    - cancel the delayed idle work
	    - enable powergating
	    - enable clockgating
	    - disable dpm
	 
	  TODO: to align with the VCN implementation, move the
	  jobs for clockgatingpowergatingdpm setting to
	  ->set_powergating_state().
 shutdown the UVD block 
  uvd_v7_0_mc_resume - memory controller programming
  @adev: amdgpu_device pointer
  Let the UVD memory controller know it's offsets
 1, write to vce_mmsch_vf_ctx_addr_lohi register with GPU mc addr of memory descriptor location 
 2, update vmid of descriptor 
 use domain0 for MM scheduler 
 3, notify mmsch about the size of this descriptor 
 4, set resp to zero 
 5, kick off the initialization and wait until VCE_MMSCH_VF_MAILBOX_RESP becomes non-zero 
 mc resume
 mc resume end
 disable clock gating 
 disable interupt 
 stall UMC and register bus before resetting VCPU 
 put LMI, VCPU, RBC etc... into reset 
 initialize UVD memory controller 
 take all subblocks out of reset, except VCPU 
 enable VCPU clock 
 enable master interrupt 
 clear the bit 4 of UVD_STATUS 
 force RBC into idle state 
 boot up the VCPU 
 enable UMC 
 add end packet 
  uvd_v7_0_start - start UVD block
  @adev: amdgpu_device pointer
  Setup and start the UVD block
 disable DPG 
 disable byte swapping 
 disable clock gating 
 disable interupt 
 stall UMC and register bus before resetting VCPU 
 put LMI, VCPU, RBC etc... into reset 
 initialize UVD memory controller 
 swap (8 in 32) RB and IB 
 take all subblocks out of reset, except VCPU 
 enable VCPU clock 
 enable UMC 
 boot up the VCPU 
 enable master interrupt 
 clear the bit 4 of UVD_STATUS 
 force RBC into idle state 
 set the write pointer delay 
 set the wb address 
 program the RB_BASE for ring buffer 
 Initialize the ring buffer's read and write pointers 
  uvd_v7_0_stop - stop UVD block
  @adev: amdgpu_device pointer
  stop the UVD block
 force RBC into idle state 
 Stall UMC and register bus before resetting VCPU 
 put VCPU into reset 
 disable VCPU clock 
 Unstall UMC and register bus 
  uvd_v7_0_ring_emit_fence - emit an fence & trap command
  @ring: amdgpu_ring pointer
  @addr: address
  @seq: sequence number
  @flags: fence related flags
  Write a fence and a trap command to the ring.
  uvd_v7_0_enc_ring_emit_fence - emit an enc fence & trap command
  @ring: amdgpu_ring pointer
  @addr: address
  @seq: sequence number
  @flags: fence related flags
  Write enc a fence and a trap command to the ring.
  uvd_v7_0_ring_emit_hdp_flush - skip HDP flushing
  @ring: amdgpu_ring pointer
 The firmware doesn't seem to like touching registers at this point. 
  uvd_v7_0_ring_test_ring - register write test
  @ring: amdgpu_ring pointer
  Test if we can successfully write to the context register
  uvd_v7_0_ring_patch_cs_in_place - Patch the IB for command submission.
  @p: the CS parser with the IBs
  @ib_idx: which IB to patch
 No patching necessary for the first instance 
  uvd_v7_0_ring_emit_ib - execute indirect buffer
  @ring: amdgpu_ring pointer
  @job: job to retrieve vmid from
  @ib: indirect buffer to execute
  @flags: unused
  Write ring commands to execute the indirect buffer
  uvd_v7_0_enc_ring_emit_ib - enc execute indirect buffer
  @ring: amdgpu_ring pointer
  @job: job to retrive vmid from
  @ib: indirect buffer to execute
  @flags: unused
  Write enc ring commands to execute the indirect buffer
 wait for reg writes 
 wait for reg writes 
 Wait a little for things to settle down 
 TODO
 disable HW gating and enable Sw gating 
 wait for STATUS to clear 
 enable HW gates because UVD is idle 
 uvd_v7_0_set_hw_clock_gating(adev); 
	 This doesn't actually powergate the UVD block.
	  That's done in the dpm code via the SMC.  This
	  just re-inits the block as necessary.  The actual
	  gating still happens in the dpm code.  We should
	  revisit this when there is a cleaner line between
	  the smc and the hw blocks
 needed for driver unload
 uvd_v7_0_is_idle ,
 uvd_v7_0_wait_for_idle ,
 uvd_v7_0_check_soft_reset ,
 uvd_v7_0_pre_soft_reset ,
 uvd_v7_0_soft_reset ,
 uvd_v7_0_post_soft_reset ,
 uvd_v7_0_set_powergating_state ,
 hdp invalidate 
 uvd_v7_0_ring_emit_vm_flush 
 uvd_v7_0_ring_emit_fence x2 vm fence 
 uvd_v7_0_ring_emit_ib 
 hdp flush  invalidate 
 uvd_v7_0_enc_ring_emit_vm_flush 
 uvd_v7_0_enc_ring_emit_fence x2 vm fence 
 uvd_v7_0_enc_ring_insert_end 
 uvd_v7_0_enc_ring_emit_ib 
  Copyright 2014 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Interrupts
  Starting with r6xx, interrupts are handled via a ring buffer.
  Ring buffers are areas of GPU accessible memory that the GPU
  writes interrupt vectors into and the host reads vectors out of.
  There is a rptr (read pointer) that determines where the
  host is currently reading, and a wptr (write pointer)
  which determines where the GPU has written.  When the
  pointers are equal, the ring is idle.  When the GPU
  writes vectors to the ring buffer, it increments the
  wptr.  When there is an interrupt, the host then starts
  fetching commands and processing them until the pointers are
  equal again at which point it updates the rptr.
  tonga_ih_enable_interrupts - Enable the interrupt ring buffer
  @adev: amdgpu_device pointer
  Enable the interrupt ring buffer (VI).
  tonga_ih_disable_interrupts - Disable the interrupt ring buffer
  @adev: amdgpu_device pointer
  Disable the interrupt ring buffer (VI).
 set rptr, wptr to 0 
  tonga_ih_irq_init - init and enable the interrupt ring
  @adev: amdgpu_device pointer
  Allocate a ring buffer for the interrupt controller,
  enable the RLC, disable interrupts, enable the IH
  ring buffer and enable it (VI).
  Called at device load and reume.
  Returns 0 for success, errors for failure.
 disable irqs 
 setup interrupt control 
	 INTERRUPT_CNTL__IH_DUMMY_RD_OVERRIDE_MASK=0 - dummy read disabled with msi, enabled without msi
	  INTERRUPT_CNTL__IH_DUMMY_RD_OVERRIDE_MASK=1 - dummy read controlled by IH_DUMMY_RD_EN
 INTERRUPT_CNTL__IH_REQ_NONSNOOP_EN_MASK=1 if ring is in non-cacheable memory, e.g., vram 
 Ring Buffer base. [39:8] of 40-bit address of the beginning of the ring buffer
 Ring Buffer write pointer writeback. If enabled, IH_RB_WPTR register value is written to memory 
 set the writeback address whether it's enabled or not 
 set rptr, wptr to 0 
 enable interrupts 
  tonga_ih_irq_disable - disable interrupts
  @adev: amdgpu_device pointer
  Disable interrupts on the hw (VI).
 Wait and acknowledge irq 
  tonga_ih_get_wptr - get the IH ring buffer wptr
  @adev: amdgpu_device pointer
  @ih: IH ring buffer to fetch wptr
  Get the IH ring buffer wptr from either the register
  or the writeback memory buffer (VI).  Also check for
  ring buffer overflow and deal with it.
  Used by cz_irq_process(VI).
  Returns the value of the wptr.
 Double check that the overflow wasn't already cleared. 
	 When a ring buffer overflow happen start parsing interrupt
	  from the last not overwritten vector (wptr + 16). Hopefully
	  this should allow us to catchup.
  tonga_ih_decode_iv - decode an interrupt vector
  @adev: amdgpu_device pointer
  @ih: IH ring buffer to decode
  @entry: IV entry to place decoded information into
  Decodes the interrupt vector at the current rptr
  position and also advance the position.
 wptrrptr are in bytes! 
 wptrrptr are in bytes! 
  tonga_ih_set_rptr - set the IH ring buffer rptr
  @adev: amdgpu_device pointer
  @ih: IH ring buffer to set rptr
  Set the IH ring buffer rptr.
 XXX check if swapping is necessary on BE 
 read MC_STATUS 
 Wait a little for things to settle down 
  Copyright 2014 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  amdgpu_pll_reduce_ratio - fractional number reduction
  @nom: nominator
  @den: denominator
  @nom_min: minimum value for nominator
  @den_min: minimum value for denominator
  Find the greatest common divisor and apply it on both nominator and
  denominator, but make nominator and denominator are at least as large
  as their minimum values.
 reduce the numbers to a simpler ratio 
 make sure nominator is large enough 
 make sure the denominator is large enough 
  amdgpu_pll_get_fb_ref_div - feedback and ref divider calculation
  @nom: nominator
  @den: denominator
  @post_div: post divider
  @fb_div_max: feedback divider maximum
  @ref_div_max: reference divider maximum
  @fb_div: resulting feedback divider
  @ref_div: resulting reference divider
  Calculate feedback and reference divider for a given post divider. Makes
  sure we stay within the limits.
 limit reference  post divider to a maximum 
 get matching reference and feedback divider 
 limit fb divider to its maximum 
  amdgpu_pll_compute - compute PLL paramaters
  @pll: information about the PLL
  @freq: requested frequency
  @dot_clock_p: resulting pixel clock
  @fb_div_p: resulting feedback divider
  @frac_fb_div_p: fractional part of the feedback divider
  @ref_div_p: resulting reference divider
  @post_div_p: resulting reference divider
  Try to calculate the PLL parameters to generate the given frequency:
  dot_clock = (ref_freq  feedback_div)  (ref_div  post_div)
 determine allowed feedback divider range 
 determine allowed ref divider range 
 determine allowed post divider range 
 represent the searched ratio as fractional number 
 reduce the numbers to a simpler ratio 
 now search for a post divider 
 get the feedback and reference divider for the optimal value 
 reduce the numbers to a simpler ratio once more 
 this also makes sure that the reference divider is large enough 
 avoid high jitter with small fractional dividers 
 and finally save the result 
  amdgpu_pll_get_use_mask - look up a mask of which pplls are in use
  @crtc: drm crtc
  Returns the mask of which PPLLs (Pixel PLLs) are in use.
  amdgpu_pll_get_shared_dp_ppll - return the PPLL used by another crtc for DP
  @crtc: drm crtc
  Returns the PPLL (Pixel PLL) used by another crtcencoder which is
  also in DP mode.  For DP, a single PPLL can be used for all DP
  crtcsencoders.
 for DP use the same PLL for all 
  amdgpu_pll_get_shared_nondp_ppll - return the PPLL used by another non-DP crtc
  @crtc: drm crtc
  Returns the PPLL (Pixel PLL) used by another non-DP crtcencoder which can
  be shared (i.e., same clock).
 check if we are already driving this connector with another crtc 
 if we are, return that pll 
 for non-DP check the clock 
  Copyright (C) 2019  Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included
  in all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
  AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  Copyright 2019 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 invalidate using legacy mode on vmid
 Program the AGP BAR 
 Program the system aperture low logical page number. 
 Set default page address. 
 Program "protection fault". 
 Setup TLB control 
 UC, uncached 
	 These registers are not accessible to VF-SRIOV.
	  The PF will program them instead.
 Setup L2 cache 
 XXX for emulation, Refer to closed source code.
	 These registers are not accessible to VF-SRIOV.
	  The PF will program them instead.
 Send no-retry XNACK on fault to suppress VM fault storm. 
		
		  GCMC_VM_FB_LOCATION_BASETOP is NULL for VF, becuase they are
		  VF copy registers so vbios post doesn't program them, for
		  SRIOV driver need to program them
 GART Enable. 
 Disable all tables 
 Setup TLB control 
 Setup L2 cache 
  gfxhub_v2_1_set_fault_enable_default - update GARTVM fault handling
  @adev: amdgpu_device pointer
  @value: true redirects VM faults to the default page
	 These registers are not accessible to VF-SRIOV.
	  The PF will program them instead.
 PF_MAX_REGION=0 means xgmi is disabled 
 Get SA disabled bitmap from eFuse setting 
 Get SA disabled bitmap from VBIOS setting 
 Make sure not to report harvested SAs beyond the max SA count 
  Copyright 2019 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 invalidate using legacy mode on vmid
 Program the AGP BAR 
 Program the system aperture low logical page number. 
 Set default page address. 
 Program "protection fault". 
 Setup TLB control 
 UC, uncached 
	 These registers are not accessible to VF-SRIOV.
	  The PF will program them instead.
 Setup L2 cache 
 XXX for emulation, Refer to closed source code.
	 These registers are not accessible to VF-SRIOV.
	  The PF will program them instead.
 Send no-retry XNACK on fault to suppress VM fault storm. 
 GART Enable. 
 Disable all tables 
 Setup TLB control 
 Setup L2 cache 
  mmhub_v2_0_set_fault_enable_default - update GARTVM fault handling
  @adev: amdgpu_device pointer
  @value: true redirects VM faults to the default page
	 These registers are not accessible to VF-SRIOV.
	  The PF will program them instead.
 AMD_CG_SUPPORT_MC_MGCG 
 AMD_CG_SUPPORT_MC_LS 
  Copyright 2013 Advanced Micro Devices, Inc.
  All Rights Reserved.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sub license, andor sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
  THE COPYRIGHT HOLDERS, AUTHORS ANDOR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,
  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  USE OR OTHER DEALINGS IN THE SOFTWARE.
  The above copyright notice and this permission notice (including the
  next paragraph) shall be included in all copies or substantial portions
  of the Software.
  Authors: Christian König <christian.koenig@amd.com>
 1 second timeout 
 Firmware Names 
  amdgpu_vce_sw_init - allocate memory, load vce firmware
  @adev: amdgpu_device pointer
  @size: size for the new BO
  First step to get VCE online, allocate memory and load the firmware
  amdgpu_vce_sw_fini - free memory
  @adev: amdgpu_device pointer
  Last step on VCE teardown, free firmware memory
  amdgpu_vce_entity_init - init entity
  @adev: amdgpu_device pointer
  amdgpu_vce_suspend - unpin VCE fw memory
  @adev: amdgpu_device pointer
 TODO: suspending running encoding sessions isn't supported 
  amdgpu_vce_resume - pin VCE fw memory
  @adev: amdgpu_device pointer
  amdgpu_vce_idle_work_handler - power off VCE
  @work: pointer to work structure
  power of VCE when it's not used any more
  amdgpu_vce_ring_begin_use - power up VCE
  @ring: amdgpu ring
  Make sure VCE is powerd up when we want to use it
  amdgpu_vce_ring_end_use - power VCE down
  @ring: amdgpu ring
  Schedule work to power VCE down again
  amdgpu_vce_free_handles - free still open VCE handles
  @adev: amdgpu_device pointer
  @filp: drm file pointer
  Close all VCE handles still open by this file pointer
  amdgpu_vce_get_create_msg - generate a VCE create msg
  @ring: ring we should submit the msg to
  @handle: VCE session handle to use
  @bo: amdgpu object for which we query the offset
  @fence: optional fence to return
  Open up a stream for HW test
 only one gpu page is needed, alloc +1 page to make addr aligned. 
 let addr point to page boundary 
 stitch together an VCE create msg 
 len 
 session cmd 
 len 
 len 
 create cmd 
 len 
 feedback buffer 
  amdgpu_vce_get_destroy_msg - generate a VCE destroy msg
  @ring: ring we should submit the msg to
  @handle: VCE session handle to use
  @direct: direct or delayed pool
  @fence: optional fence to return
  Close up a stream for HW test or if userspace failed to do so
 stitch together an VCE destroy msg 
 len 
 session cmd 
 len 
 task info 
 next task info, set to 0xffffffff if no 
 destroy session 
 feedback is not needed, set to 0xffffffff and firmware will not output feedback 
 len 
 destroy cmd 
  amdgpu_vce_validate_bo - make sure not to cross 4GB boundary
  @p: parser context
  @ib_idx: indirect buffer to use
  @lo: address of lower dword
  @hi: address of higher dword
  @size: minimum size
  @index: bsfb index
  Make sure that no BO cross a 4GB boundary.
  amdgpu_vce_cs_reloc - command submission relocation
  @p: parser context
  @ib_idx: indirect buffer to use
  @lo: address of lower dword
  @hi: address of higher dword
  @size: minimum size
  @index: bsfb index
  Patch relocation inside command stream with real buffer address
  amdgpu_vce_validate_handle - validate stream handle
  @p: parser context
  @handle: handle to validate
  @allocated: allocated a new handle?
  Validates the handle and return the found session index or -EINVAL
  we we don't have another free session index.
 validate the handle 
 handle not found try to alloc a new one 
  amdgpu_vce_ring_parse_cs - parse and validate the command stream
  @p: parser context
  @ib_idx: indirect buffer to use
 task info 
 encode 
 context buffer 
 video bitstream buffer 
 feedback buffer 
 MV buffer 
 session 
 task info 
 create 
 config extension 
 pic control 
 rate control 
 motion estimation 
 rdo 
 vui 
 auxiliary buffer 
 clock table 
 hw config 
 encode 
 destroy 
 context buffer 
 video bitstream buffer 
 feedback buffer 
 MV buffer 
 No error, free all destroyed handle slots 
 Error during parsing, free all allocated handle slots 
  amdgpu_vce_ring_parse_cs_vm - parse the command stream in VM mode
  @p: parser context
  @ib_idx: indirect buffer to use
 session 
 create 
 destroy 
 No error, free all destroyed handle slots 
 Error during parsing, free all allocated handle slots 
  amdgpu_vce_ring_emit_ib - execute indirect buffer
  @ring: engine to use
  @job: job to retrieve vmid from
  @ib: the IB to execute
  @flags: unused
  amdgpu_vce_ring_emit_fence - add a fence command to the ring
  @ring: engine to use
  @addr: address
  @seq: sequence number
  @flags: fence related flags
  amdgpu_vce_ring_test_ring - test if VCE ring is working
  @ring: the engine to test on
 skip ring test for sriov
  amdgpu_vce_ring_test_ib - test if VCE IBs are working
  @ring: the engine to test on
  @timeout: timeout value in jiffies, or MAX_SCHEDULE_TIMEOUT
 skip vce ring12 ib test for now, since it's not reliable 
  Copyright 2007-8 Advanced Micro Devices, Inc.
  Copyright 2008 Red Hat Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: Dave Airlie
           Alex Deucher
	 bail if the connector does not have hpd pin, e.g.,
	  VGA, TV, etc.
 if the connector is already off, don't turn it back on 
 just deal with DP (not eDP) here. 
 if existing sink type was not DP no need to retrain 
 first get sink type as it may be reset after (un)plug 
		 don't do anything if sink is not display port, i.e.,
		  passive dp->(dvi|hdmi) adaptor
 Don't start link training before we have the DPCD 
			 Turn the connector off and back on immediately, which
			  will trigger link training
		
		  Pre DCE-8 hw can't handle > 12 bpc, and more than 12 bpc doesn't make
		  much sense without support for > 12 bpc framebuffers. RGB 4:4:4 at
		  12 bpc is always supported on hdmi deep color sinks, as this is
		  required by the HDMI-1.3 spec. Clamp to a safe 12 bpc maximum.
 Any defined maximum tmds clock limit we must not exceed? 
 mode_clock is clock in kHz for mode to be modeset on this connector 
 Maximum allowable input clock in kHz 
 Check if bpc is within clock limit. Try to degrade gracefully otherwise 
 max_tmds_clock missing, but hdmi spec mandates it for deep color. 
 on hw with routers, select right port 
 some laptops provide a hardcoded edid in rom for LCDs 
 pick the first one 
 mac laptops without an edid 
		 Note that this is not necessarily the exact panel mode,
		  but an approximation based on the cvt formula.  For these
		  systems we should ideally read the mode info out of the
		  registers or add a mode table, but this works and is much
		  simpler.
 need to find digital encoder on connector 
 need to find digital encoder on connector 
 need to find digital encoder on connector 
 need to find digital encoder on connector 
 need to find digital encoder on connector 
 need to find digital encoder on connector 
 If the EDID preferred mode doesn't match the native mode, use it 
 Try to get native mode details from EDID if necessary 
 add scaled modes 
 we have no EDID modes 
 add the widthheight from vbios tables if available 
 add scaled modes 
		 AVIVO hardware supports downscaling modes larger than the panel
		  to the panel size, but I'm not sure this is desirable.
 if scaling is disabled, block non-native modes 
 check if panel is valid 
 check for edid as well 
 check acpi lid status ??? 
 XXX check mode bandwidth 
			 some oems have boards with separate digital and analog connectors
			  with a shared ddc line (often vga + hdmi)
 if we aren't forcing don't do destructive polling 
			 only return the previous status if we last
			  detected a monitor via load.
  DVI is complicated
  Do a DDC probe, if DDC probe passes, get the full EDID so
  we can do analogdigital monitor detection at this point.
  If the monitor is an analog monitor or we got no DDC,
  we need to find the DAC encoder object for this connector.
  If we got no DDC, we do load detection on the DAC encoder object.
  If we got analog DDC or load detection passes on the DAC encoder
  we have to check if this analog encoder is shared with anyone else (TV)
  if its shared we have to set the other connector to disconnected.
 defer use_digital to later 
			 some oems have boards with separate digital and analog connectors
			  with a shared ddc line (often vga + hdmi)
			 This gets complicated.  We have boards with VGA + HDMI with a
			  shared DDC line and we have boards with DVI-D + HDMI with a shared
			  DDC line.  The latter is more complex because with DVI<->HDMI adapters
			  you don't really know what's connected to which port as both are digital.
 cases where both connectors are digital 
 hpd is our only option in this case 
 DVI-D and HDMI-A are digital only 
 if we aren't forcing don't do destructive polling 
		 only return the previous status if we last
		  detected a monitor via load.
 find analog encoder 
 deal with analog monitors without DDC 
 assume digital unless load detected otherwise 
 updated in get modes as well since we need to know if it's analog or digital 
 okay need to be smart in here about which encoder to pick 
 see if we have a default encoder  TODO 
 then check use digitial 
 pick the first one 
 XXX check mode bandwidth 
 HDMI 1.3+ supports max clock of 340 Mhz 
 check against the max pixel clock 
 need to setup ddc on the bridge 
 add scaled modes 
 we have no EDID modes 
 add the widthheight from vbios tables if available 
 add scaled modes 
 need to setup ddc on the bridge 
 check if panel is valid 
 eDP is always DP 
 DP bridges are always DP 
 get the DPCD from the bridge 
 setup ddc on the bridge 
 bridge chips are always aux 
 try DDC 
 try load detection 
 try non-aux ddc (DP to DVIHDMIetc. adapter) 
 XXX check mode bandwidth 
			 AVIVO hardware supports downscaling modes larger than the panel
			  to the panel size, but I'm not sure this is desirable.
 if scaling is disabled, block non-native modes 
 HDMI 1.3+ supports max clock of 340 Mhz 
 see if we already added it 
 check if it's a dp bridge 
 no HPD on analog connectors 
 no HPD on analog connectors 
 in theory with a DP to VGA converter... 
  Copyright 2019 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 invalidate using legacy mode on vmid
 Program the AGP BAR 
 Program the system aperture low logical page number. 
 Set default page address. 
 Program "protection fault". 
 Setup TLB control 
 UC, uncached 
 These regs are not accessible for VF, PF will program these in SRIOV 
 Setup L2 cache 
 XXX for emulation, Refer to closed source code.
 Send no-retry XNACK on fault to suppress VM fault storm. 
 GART Enable. 
 Disable all tables 
 Setup TLB control 
 Setup L2 cache 
  gfxhub_v2_0_set_fault_enable_default - update GARTVM fault handling
  @adev: amdgpu_device pointer
  @value: true redirects VM faults to the default page
  Copyright 2014 Advanced Micro Devices, Inc.
  All Rights Reserved.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sub license, andor sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
  THE COPYRIGHT HOLDERS, AUTHORS ANDOR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,
  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  USE OR OTHER DEALINGS IN THE SOFTWARE.
  The above copyright notice and this permission notice (including the
  next paragraph) shall be included in all copies or substantial portions
  of the Software.
  Authors: Christian König <christian.koenig@amd.com>
  vce_v3_0_ring_get_rptr - get read pointer
  @ring: amdgpu_ring pointer
  Returns the current hardware read pointer
  vce_v3_0_ring_get_wptr - get write pointer
  @ring: amdgpu_ring pointer
  Returns the current hardware write pointer
  vce_v3_0_ring_set_wptr - set write pointer
  @ring: amdgpu_ring pointer
  Commits the write pointer to the hardware
 Set Override to disable Clock Gating 
	 This function enables MGCG which is controlled by firmware.
	   With the clocks in the gated state the core is still
	   accessible but the firmware will throttle the clocks on the
	   fly as necessary.
  vce_v3_0_start - start VCE block
  @adev: amdgpu_device pointer
  Setup and start the VCE block
		 Program instance 0 reg space for two instances or instance 0 case
 clear BUSY flag 
 hold on ECPU 
 clear VCE STATUS 
 VCE 
 52.8.3 required for 3 ring support 
	
	  Proper cleanups before halting the HW engine:
	    - cancel the delayed idle work
	    - enable powergating
	    - enable clockgating
	    - disable dpm
	 
	  TODO: to align with the VCN implementation, move the
	  jobs for clockgatingpowergatingdpm setting to
	  ->set_powergating_state().
 AUTO_BUSY 
 RB0_BUSY 
 RB1_BUSY 
	 According to VCE team , we should use VCE_STATUS instead
	  SRBM_STATUS.VCE_BUSY bit for busy status checking.
	  GRBM_GFX_INDEX.INSTANCE_INDEX is used to specify which VCE
	  instance's registers are accessed
	  (0 for 1st instance, 10 for 2nd instance).
	 
	 VCE_STATUS
	 |UENC|ACPI|AUTO ACTIVE|RB1 |RB0 |RB2 |          |FW_LOADED|JOB |
	 |----+----+-----------+----+----+----+----------+---------+----|
	 |bit8|bit7|    bit6   |bit5|bit4|bit3|   bit2   |  bit1   |bit0|
	 
	  VCE team suggest use bit 3--bit 6 for busy status check
 Wait a little for things to settle down 
 Program VCE Instance 0 or 1 if not harvested 
 initialize VCE_CLOCK_GATING_A: Clock ONOFF delay 
 initialize VCE_UENC_CLOCK_GATING: Clock ONOFF delay 
	 This doesn't actually powergate the VCE block.
	  That's done in the dpm code via the SMC.  This
	  just re-inits the block as necessary.  The actual
	  gating still happens in the dpm code.  We should
	  revisit this when there is a cleaner line between
	  the smc and the hw blocks
 AMD_CG_SUPPORT_VCE_MGCG 
 vce_v3_0_emit_pipeline_sync 
 amdgpu_vce_ring_emit_fence x1 no user fence 
 amdgpu_vce_ring_emit_ib 
 vce_v3_0_emit_vm_flush 
 vce_v3_0_emit_pipeline_sync 
 amdgpu_vce_ring_emit_fence x2 vm fence 
 vce_v3_0_ring_emit_ib 
  Copyright 2015 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: monk liu <monk.liu@amd.com>
	 This should not happen as we sanitized userspace provided priority
	  already, WARN if this happens.
 NORMAL and below are accessible by everyone 
 disable load balance if the hw engine retains context among dependent jobs 
 Right now all IPs have only one instance - multiple rings. 
 TODO: these two are always zero 
 determine if a GPU reset has occured since the last call 
 TODO: this should ideally return NO, GUILTY, or INNOCENT. 
		 Return the cached values in O(1),
		  and schedule delayed work to cache
		  new vaues.
	 For backwards compatibility reasons, we need to accept
 set sw priority 
 set hw priority 
		 Harmonic mean approximation diverges for very small
		  values. If ratio < 0.01% ignore
  Copyright 2000 VA Linux Systems, Inc., Sunnyvale, California.
  All Rights Reserved.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice (including the next
  paragraph) shall be included in all copies or substantial portions of the
  Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  VA LINUX SYSTEMS ANDOR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  KMS wrapper.
  - 3.0.0 - initial driver
  - 3.1.0 - allow reading more status registers (GRBM, SRBM, SDMA, CP)
  - 3.2.0 - GFX8: Uses EOP_TC_WB_ACTION_EN, so UMDs don't have to do the same
            at the end of IBs.
  - 3.3.0 - Add VM support for UVD on supported hardware.
  - 3.4.0 - Add AMDGPU_INFO_NUM_EVICTIONS.
  - 3.5.0 - Add support for new UVD_NO_OP register.
  - 3.6.0 - kmd involves use CONTEXT_CONTROL in ring buffer.
  - 3.7.0 - Add support for VCE clock list packet
  - 3.8.0 - Add support raster config init in the kernel
  - 3.9.0 - Add support for memory query info about VRAM and GTT.
  - 3.10.0 - Add support for new fences ioctl, new gem ioctl flags
  - 3.11.0 - Add support for sensor query info (clocks, temp, etc).
  - 3.12.0 - Add query for double offchip LDS buffers
  - 3.13.0 - Add PRT support
  - 3.14.0 - Fix race in amdgpu_ctx_get_fence() and note new functionality
  - 3.15.0 - Export more gpu info for gfx9
  - 3.16.0 - Add reserved vmid support
  - 3.17.0 - Add AMDGPU_NUM_VRAM_CPU_PAGE_FAULTS.
  - 3.18.0 - Export gpu always on cu bitmap
  - 3.19.0 - Add support for UVD MJPEG decode
  - 3.20.0 - Add support for local BOs
  - 3.21.0 - Add DRM_AMDGPU_FENCE_TO_HANDLE ioctl
  - 3.22.0 - Add DRM_AMDGPU_SCHED ioctl
  - 3.23.0 - Add query for VRAM lost counter
  - 3.24.0 - Add high priority compute support for gfx9
  - 3.25.0 - Add support for sensor query info (stable pstate sclkmclk).
  - 3.26.0 - GFX9: Process AMDGPU_IB_FLAG_TC_WB_NOT_INVALIDATE.
  - 3.27.0 - Add new chunk to to AMDGPU_CS to enable BO_LIST creation.
  - 3.28.0 - Add AMDGPU_CHUNK_ID_SCHEDULED_DEPENDENCIES
  - 3.29.0 - Add AMDGPU_IB_FLAG_RESET_GDS_MAX_WAVE_ID
  - 3.30.0 - Add AMDGPU_SCHED_OP_CONTEXT_PRIORITY_OVERRIDE.
  - 3.31.0 - Add support for per-flip tiling attribute changes with DC
  - 3.32.0 - Add syncobj timeline support to AMDGPU_CS.
  - 3.33.0 - Fixes for GDS ENOMEM failures in AMDGPU_CS.
  - 3.34.0 - Non-DC can flip correctly between buffers with different pitches
  - 3.35.0 - Add drm_amdgpu_info_device::tcc_disabled_mask
  - 3.36.0 - Allow reading more status registers on sicik
  - 3.37.0 - L2 is invalidated before SDMA IBs, needed for correctness
  - 3.38.0 - Add AMDGPU_IB_FLAG_EMIT_MEM_SYNC
  - 3.39.0 - DMABUF implicit sync does a full pipeline sync
  - 3.40.0 - Add AMDGPU_IDS_FLAGS_TMZ
  - 3.41.0 - Add video codec query
  - 3.42.0 - Add 16bpc fixed point display support
  - 3.43.0 - Add device hot plugunplug support
  - 3.44.0 - DCN3 supports DCC independent block settings: !64B && 128B, 64B && 128B
 auto 
 auto 
 auto 
  OverDrive(bit 14) disabled by default
  GFX DCS(bit 19) disabled by default
 auto 
  FBC (bit 0) disabled by default
  MULTI_MON_PP_MCLK_SWITCH (bit 1) enabled by default
    - With this, for multiple monitors in sync(e.g. with the same model),
      mclk switching will be allowed. And the mclk will be not foced to the
      highest. That helps saving some idle power.
  DISABLE_FRACTIONAL_PWM (bit 2) disabled by default
  PSR (bit 3) disabled by default
  EDP NO POWER SEQUENCING (bit 4) disabled by default
 auto 
 auto 
 default to 0x0 (timeout disable) 
  DOC: vramlimit (int)
  Restrict the total amount of VRAM in MiB for testing.  The default is 0 (Use full VRAM).
  DOC: vis_vramlimit (int)
  Restrict the amount of CPU visible VRAM in MiB for testing.  The default is 0 (Use full CPU visible VRAM).
  DOC: gartsize (uint)
  Restrict the size of GART in Mib (32, 64, etc.) for testing. The default is -1 (The size depends on asic).
  DOC: gttsize (int)
  Restrict the size of GTT domain in MiB for testing. The default is -1 (It's VRAM size if 3GB < VRAM < 34 RAM,
  otherwise 34 RAM size).
  DOC: moverate (int)
  Set maximum buffer migration rate in MBs. The default is -1 (8 MBs).
  DOC: benchmark (int)
  Run benchmarks. The default is 0 (Skip benchmarks).
  DOC: test (int)
  Test BO GTT->VRAM and VRAM->GTT GPU copies. The default is 0 (Skip test, only set 1 to run test).
  DOC: audio (int)
  Set HDMIDPAudio. Only affects non-DC display handling. The default is -1 (Enabled), set 0 to disabled it.
  DOC: disp_priority (int)
  Set display Priority (1 = normal, 2 = high). Only affects non-DC display handling. The default is 0 (auto).
  DOC: hw_i2c (int)
  To enable hw i2c engine. Only affects non-DC display handling. The default is 0 (Disabled).
  DOC: pcie_gen2 (int)
  To disable PCIE Gen23 mode (0 = disable, 1 = enable). The default is -1 (auto, enabled).
  DOC: msi (int)
  To disable Message Signaled Interrupts (MSI) functionality (1 = enable, 0 = disable). The default is -1 (auto, enabled).
  DOC: lockup_timeout (string)
  Set GPU scheduler timeout value in ms.
  The format can be [Non-Compute] or [GFX,Compute,SDMA,Video]. That is there can be one or
  multiple values specified. 0 and negative values are invalidated. They will be adjusted
  to the default timeout.
  - With one value specified, the setting will apply to all non-compute jobs.
  - With multiple values specified, the first one will be for GFX.
    The second one is for Compute. The third and fourth ones are
    for SDMA and Video.
  By default(with no lockup_timeout settings), the timeout for all non-compute(GFX, SDMA and Video)
  jobs is 10000. The timeout for compute is 60000.
  DOC: dpm (int)
  Override for dynamic power management setting
  (0 = disable, 1 = enable)
  The default is -1 (auto).
  DOC: fw_load_type (int)
  Set different firmware loading type for debugging (0 = direct, 1 = SMU, 2 = PSP). The default is -1 (auto).
  DOC: aspm (int)
  To disable ASPM (1 = enable, 0 = disable). The default is -1 (auto, enabled).
  DOC: runpm (int)
  Override for runtime power management control for dGPUs in PXHG laptops. The amdgpu driver can dynamically power down
  the dGPU on PXHG laptops when it is idle. The default is -1 (auto enable). Setting the value to 0 disables this functionality.
  DOC: ip_block_mask (uint)
  Override what IP blocks are enabled on the GPU. Each GPU is a collection of IP blocks (gfx, display, video, etc.).
  Use this parameter to disable specific blocks. Note that the IP blocks do not have a fixed index. Some asics may not have
  some IPs or may include multiple instances of an IP so the ordering various from asic to asic. See the driver output in
  the kernel log for the list of IPs on the asic. The default is 0xffffffff (enable all blocks on a device).
  DOC: bapm (int)
  Bidirectional Application Power Management (BAPM) used to dynamically share TDP between CPU and GPU. Set value 0 to disable it.
  The default -1 (auto, enabled)
  DOC: deep_color (int)
  Set 1 to enable Deep Color support. Only affects non-DC display handling. The default is 0 (disabled).
  DOC: vm_size (int)
  Override the size of the GPU's per client virtual address space in GiB.  The default is -1 (automatic for each asic).
  DOC: vm_fragment_size (int)
  Override VM fragment size in bits (4, 5, etc. 4 = 64K, 9 = 2M). The default is -1 (automatic for each asic).
  DOC: vm_block_size (int)
  Override VM page table size in bits (default depending on vm_size and hw setup). The default is -1 (automatic for each asic).
  DOC: vm_fault_stop (int)
  Stop on VM fault for debugging (0 = never, 1 = print first, 2 = always). The default is 0 (No stop).
  DOC: vm_debug (int)
  Debug VM handling (0 = disabled, 1 = enabled). The default is 0 (Disabled).
  DOC: vm_update_mode (int)
  Override VM update mode. VM updated by using CPU (0 = never, 1 = Graphics only, 2 = Compute only, 3 = Both). The default
  is -1 (Only in large BAR(LB) systems Compute VM tables will be updated by CPU, otherwise 0, never).
  DOC: exp_hw_support (int)
  Enable experimental hw support (1 = enable). The default is 0 (disabled).
  DOC: dc (int)
  DisableEnable Display Core driver for debugging (1 = enable, 0 = disable). The default is -1 (automatic for each asic).
  DOC: sched_jobs (int)
  Override the max number of jobs supported in the sw queue. The default is 32.
  DOC: sched_hw_submission (int)
  Override the max number of HW submissions. The default is 2.
  DOC: ppfeaturemask (hexint)
  Override power features enabled. See enum PP_FEATURE_MASK in driversgpudrmamdincludeamd_shared.h.
  The default is the current set of stable power features.
  DOC: forcelongtraining (uint)
  Force long memory training in resume.
  The default is zero, indicates short training in resume.
  DOC: pcie_gen_cap (uint)
  Override PCIE gen speed capabilities. See the CAIL flags in driversgpudrmamdincludeamd_pcie.h.
  The default is 0 (automatic for each asic).
  DOC: pcie_lane_cap (uint)
  Override PCIE lanes capabilities. See the CAIL flags in driversgpudrmamdincludeamd_pcie.h.
  The default is 0 (automatic for each asic).
  DOC: cg_mask (uint)
  Override Clockgating features enabled on GPU (0 = disable clock gating). See the AMD_CG_SUPPORT flags in
  driversgpudrmamdincludeamd_shared.h. The default is 0xffffffff (all enabled).
  DOC: pg_mask (uint)
  Override Powergating features enabled on GPU (0 = disable power gating). See the AMD_PG_SUPPORT flags in
  driversgpudrmamdincludeamd_shared.h. The default is 0xffffffff (all enabled).
  DOC: sdma_phase_quantum (uint)
  Override SDMA context switch phase quantum (x 1K GPU clock cycles, 0 = no change). The default is 32.
  DOC: disable_cu (charp)
  Set to disable CUs (It's set like se.sh.cu,...). The default is NULL.
  DOC: virtual_display (charp)
  Set to enable virtual display feature. This feature provides a virtual display hardware on headless boards
  or in virtualized environments. It will be set like xxxx:xx:xx.x,x;xxxx:xx:xx.x,x. It's the pci address of
  the device, plus the number of crtcs to expose. E.g., 0000:26:00.0,4 would enable 4 virtual crtcs on the pci
  device at 26:00.0. The default is NULL.
  DOC: job_hang_limit (int)
  Set how much time allow a job hang and not drop it. The default is 0.
  DOC: lbpw (int)
  Override Load Balancing Per Watt (LBPW) support (1 = enable, 0 = disable). The default is -1 (auto, enabled).
  DOC: gpu_recovery (int)
  Set to enable GPU recovery mechanism (1 = enable, 0 = disable). The default is -1 (auto, disabled except SRIOV).
  DOC: emu_mode (int)
  Set value 1 to enable emulation mode. This is only needed when running on an emulator. The default is 0 (disabled).
  DOC: ras_enable (int)
  Enable RAS features on the GPU (0 = disable, 1 = enable, -1 = auto (default))
  DOC: ras_mask (uint)
  Mask of RAS features to enable (default 0xffffffff), only valid when ras_enable == 1
  See the flags in driversgpudrmamdamdgpuamdgpu_ras.h
  DOC: timeout_fatal_disable (bool)
  Disable Watchdog timeout fatal error event
  DOC: timeout_period (uint)
  Modify the watchdog timeout max_cycles as (1 << period)
  DOC: si_support (int)
  Set SI support driver. This parameter works after set config CONFIG_DRM_AMDGPU_SI. For SI asic, when radeon driver is enabled,
  set value 0 to use radeon driver, while set value 1 to use amdgpu driver. The default is using radeon driver when it available,
  otherwise using amdgpu driver.
  DOC: cik_support (int)
  Set CIK support driver. This parameter works after set config CONFIG_DRM_AMDGPU_CIK. For CIK asic, when radeon driver is enabled,
  set value 0 to use radeon driver, while set value 1 to use amdgpu driver. The default is using radeon driver when it available,
  otherwise using amdgpu driver.
  DOC: smu_memory_pool_size (uint)
  It is used to reserve gtt for smu debug usage, setting value 0 to disable it. The actual size is value  256MiB.
  E.g. 0x1 = 256Mbyte, 0x2 = 512Mbyte, 0x4 = 1 Gbyte, 0x8 = 2GByte. The default is 0 (disabled).
  DOC: async_gfx_ring (int)
  It is used to enable gfx rings that could be configured with different prioritites or equal priorities
  DOC: mcbp (int)
  It is used to enable mid command buffer preemption. (0 = disabled (default), 1 = enabled)
  DOC: discovery (int)
  Allow driver to discover hardware IP information from IP Discovery table at the top of VRAM.
  (-1 = auto (default), 0 = disabled, 1 = enabled, 2 = use ip_discovery table from file)
  DOC: mes (int)
  Enable Micro Engine Scheduler. This is a new hw scheduling engine for gfx, sdma, and compute.
  (0 = disabled (default), 1 = enabled)
  DOC: noretry (int)
  Disable XNACK retry in the SQ by default on GFXv9 hardware. On ASICs that
  do not support per-process XNACK this also disables retry page faults.
  (0 = retry enabled, 1 = retry disabled, -1 auto (default))
  DOC: force_asic_type (int)
  A non negative value used to specify the asic type for all supported GPUs.
  DOC: sched_policy (int)
  Set scheduling policy. Default is HWS(hardware scheduling) with over-subscription.
  Setting 1 disables over-subscription. Setting 2 disables HWS and statically
  assigns queues to HQDs.
  DOC: hws_max_conc_proc (int)
  Maximum number of processes that HWS can schedule concurrently. The maximum is the
  number of VMIDs assigned to the HWS, which is also the default.
  DOC: cwsr_enable (int)
  CWSR(compute wave store and resume) allows the GPU to preempt shader execution in
  the middle of a compute wave. Default is 1 to enable this feature. Setting 0
  disables it.
  DOC: max_num_of_queues_per_device (int)
  Maximum number of queues per device. Valid setting is between 1 and 4096. Default
  is 4096.
  DOC: send_sigterm (int)
  Send sigterm to HSA process on unhandled exceptions. Default is not to send sigterm
  but just print errors on dmesg. Setting 1 enables sending sigterm.
  DOC: debug_largebar (int)
  Set debug_largebar as 1 to enable simulating large-bar capability on non-large bar
  system. This limits the VRAM size reported to ROCm applications to the visible
  size, usually 256MB.
  Default value is 0, diabled.
  DOC: ignore_crat (int)
  Ignore CRAT table during KFD initialization. By default, KFD uses the ACPI CRAT
  table to get information about AMD APUs. This option can serve as a workaround on
  systems with a broken CRAT table.
  Default is auto (according to asic type, iommu_v2, and crat table, to decide
  whehter use CRAT)
  DOC: halt_if_hws_hang (int)
  Halt if HWS hang is detected. Default value, 0, disables the halt on hang.
  Setting 1 enables halt on hang.
  DOC: hws_gws_support(bool)
  Assume that HWS supports GWS barriers regardless of what firmware version
  check says. Default value: false (rely on MEC2 firmware version check).
   DOC: queue_preemption_timeout_ms (int)
   queue preemption timeout in ms (1 = Minimum, 9000 = default)
  DOC: debug_evictions(bool)
  Enable extra debug messages to help determine the cause of evictions
  DOC: no_system_mem_limit(bool)
  Disable system memory limit, to support multiple process shared memory
  DOC: no_queue_eviction_on_vm_fault (int)
  If set, process queues will not be evicted on gpuvm fault. This is to keep the wavefront context for debugging (0 = queue eviction, 1 = no queue eviction). The default is 0 (queue eviction).
  DOC: dcfeaturemask (uint)
  Override display features enabled. See enum DC_FEATURE_MASK in driversgpudrmamdincludeamd_shared.h.
  The default is the current set of stable display features.
  DOC: dcdebugmask (uint)
  Override display features enabled. See enum DC_DEBUG_MASK in driversgpudrmamdincludeamd_shared.h.
  DOC: abmlevel (uint)
  Override the default ABM (Adaptive Backlight Management) level used for DC
  enabled hardware. Requires DMCU to be supported and loaded.
  Valid levels are 0-4. A value of 0 indicates that ABM should be disabled by
  default. Values 1-4 control the maximum allowable brightness reduction via
  the ABM algorithm, with 1 being the least reduction and 4 being the most
  reduction.
  Defaults to 0, or disabled. Userspace can still override this level later
  after boot.
  DOC: tmz (int)
  Trusted Memory Zone (TMZ) is a method to protect data being written
  to or read from memory.
  The default value: 0 (off).  TODO: change to auto till it is completed.
  DOC: freesync_video (uint)
  Enable the optimization to adjust front porch timing to achieve seamless
  mode change experience when setting a freesync supported mode for which full
  modeset is not needed.
  The Display Core will add a set of modes derived from the base FreeSync
  video mode into the corresponding connector's mode list based on commonly
  used refresh rates and VRR range of the connected display, when users enable
  this feature. From the userspace perspective, they can see a seamless mode
  change experience when the change between different refresh rates under the
  same resolution. Additionally, userspace applications such as Video playback
  can read this modeset list and change the refresh rate based on the video
  frame rate. Finally, the userspace can also derive an appropriate mode for a
  particular refresh rate based on the FreeSync Mode and add it to the
  connector's mode list.
  Note: This is an experimental feature.
  The default value: 0 (off).
  DOC: reset_method (int)
  GPU reset method (-1 = auto (default), 0 = legacy, 1 = mode0, 2 = mode1, 3 = mode2, 4 = baco, 5 = pci)
  DOC: bad_page_threshold (int) Bad page threshold is specifies the
  threshold value of faulty pages detected by RAS ECC, which may
  result in the GPU entering bad status when the number of total
  faulty pages by ECC exceeds the threshold value.
  DOC: smu_pptable_id (int)
  Used to override pptable id. id = 0 use VBIOS pptable.
  id > 0 use the soft pptable with specicfied id.
 These devices are not supported by amdgpu.
  They are supported by the mach64, r128, radeon drivers
 mach64 
 r128 
 radeon 
 Kaveri 
 Bonaire 
 Hawaii 
 Kabini 
 mullins 
 topaz 
 tonga 
 fiji 
 carrizo 
 stoney 
 Polaris11 
 Polaris10 
 Polaris12 
 VEGAM 
 Vega 10 
 Vega 12 
 Vega 20 
 Raven 
 Arcturus 
 Navi10 
 Navi14 
 Renoir 
 Navi12 
 Sienna_Cichlid 
 Van Gogh 
 Yellow Carp 
 Navy_Flounder 
 DIMGREY_CAVEFISH 
 Aldebaran 
 CYAN_SKILLFISH 
 BEIGE_GOBY 
 skip devices which are owned by radeon 
	 Due to hardware bugs, SG Display on raven requires a 1:1 IOMMU mapping,
	  however, SME requires an indirect IOMMU mapping because the encryption
	  bit is beyond the DMA mask of the chip.
 Get rid of things like offb 
 Don't request EX mode too frequently which is attacking 
	
	  Flush any in flight DMA operations from device.
	  Clear the Bus Master Enable bit and then wait on the PCIe Device
	  StatusTransactions Pending bit.
	 if we are running in a VM, make sure the device
	  torn down properly on rebootshutdown.
	  unfortunately we can't detect certain
	  hypervisors so just do this all the time.
  amdgpu_drv_delayed_reset_work_handler - work handler for reset
  @work: work_struct.
 Use a common context, just need to make sure full reset is done 
 reset function will rebuild the xgmi hive info , clear it now 
 unregister the GPU first, reset function will add them back 
 Use a common context, just need to make sure full reset is done 
	 Return a positive number here so
	  DPM_FLAG_SMART_SUSPEND works properly
 nothing to do 
 Avoids registers access if device is physically gone 
 wait for all rings to drain before suspending 
		 Only need to handle PCI state in the driver for ATPX
		  PCI core handles it for _PR3.
 nothing to do 
 Avoids registers access if device is physically gone 
		 Only need to handle PCI state in the driver for ATPX
		  PCI core handles it for _PR3.
		 Only need to handle PCI state in the driver for ATPX
		  PCI core handles it for _PR3.
 we don't want the main rpm_idle to call suspend - we want to autosuspend 
 KMS 
 Ignore KFD init failures. Normal when CONFIG_HSA_AMD is not set. 
 let modprobe override vga console setting 
  Copyright 2019 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  amdgpu_vm_cpu_map_table - make sure new PDsPTs are kmapped
  @table: newly allocated or validated PDPT
  amdgpu_vm_cpu_prepare - prepare page table update with the CPU
  @p: see amdgpu_vm_update_params definition
  @resv: reservation object with embedded fence
  @sync_mode: synchronization mode
  Returns:
  Negativ errno, 0 for success.
  amdgpu_vm_cpu_update - helper to update page tables via CPU
  @p: see amdgpu_vm_update_params definition
  @vmbo: PDPT to update
  @pe: byte offset of the PDEPTE, relative to start of PDBPTB
  @addr: dst addr to write into pe
  @count: number of page entries to update
  @incr: increase next addr by incr bytes
  @flags: hw access flags
  Write count number of PTPD entries directly.
  amdgpu_vm_cpu_commit - commit page table update to the HW
  @p: see amdgpu_vm_update_params definition
  @fence: unused
  Make sure that the hardware sees the page table updates.
 Flush HDP 
  Copyright 2020 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors: Sonny Jiang <sonny.jiang@amd.com>
  uvd_v3_1_ring_get_rptr - get read pointer
  @ring: amdgpu_ring pointer
  Returns the current hardware read pointer
  uvd_v3_1_ring_get_wptr - get write pointer
  @ring: amdgpu_ring pointer
  Returns the current hardware write pointer
  uvd_v3_1_ring_set_wptr - set write pointer
  @ring: amdgpu_ring pointer
  Commits the write pointer to the hardware
  uvd_v3_1_ring_emit_ib - execute indirect buffer
  @ring: amdgpu_ring pointer
  @job: iob associated with the indirect buffer
  @ib: indirect buffer to execute
  @flags: flags associated with the indirect buffer
  Write ring commands to execute the indirect buffer
  uvd_v3_1_ring_emit_fence - emit an fence & trap command
  @ring: amdgpu_ring pointer
  @addr: address
  @seq: sequence number
  @flags: fence related flags
  Write a fence and a trap command to the ring.
  uvd_v3_1_ring_test_ring - register write test
  @ring: amdgpu_ring pointer
  Test if we can successfully write to the context register
 uvd_v3_1_ring_emit_fence  x1 no user fence 
 uvd_v3_1_ring_emit_ib 
  uvd_v3_1_mc_resume - memory controller programming
  @adev: amdgpu_device pointer
  Let the UVD memory controller know it's offsets
 programm the VCPU memory controller bits 0-27 
 bits 28-31 
 bits 32-39 
  uvd_v3_1_fw_validate - FW validation operation
  @adev: amdgpu_device pointer
  Initialate and check UVD validation.
  uvd_v3_1_start - start UVD block
  @adev: amdgpu_device pointer
  Setup and start the UVD block
 disable byte swapping 
 set uvd busy 
 take UVD block out of reset 
 enable VCPU clock 
 disable interrupt 
 swap (8 in 32) RB and IB 
 initialize UVD memory controller 
 enable UMC 
 enable interrupt 
 force RBC into idle state 
 Set the write pointer delay 
 programm the 4GB memory segment for rptr and ring buffer 
 Initialize the ring buffer's read and write pointers 
 set the ring address 
 Set ring buffer size 
  uvd_v3_1_stop - stop UVD block
  @adev: amdgpu_device pointer
  stop the UVD block
 Stall UMC and register bus before resetting VCPU 
 put LMI, VCPU, RBC etc... into reset 
 UVD TRAP 
 Retrieval firmware validate key 
  uvd_v3_1_hw_init - start and test UVD block
  @handle: handle used to pass amdgpu_device pointer
  Initialize the hardware, boot up the VCPU and do some testing
 Clear timeout status bits 
  uvd_v3_1_hw_fini - stop the hardware block
  @handle: handle used to pass amdgpu_device pointer
  Stop the UVD block, mark ring as not ready any more
	
	  Proper cleanups before halting the HW engine:
	    - cancel the delayed idle work
	    - enable powergating
	    - enable clockgating
	    - disable dpm
	 
	  TODO: to align with the VCN implementation, move the
	  jobs for clockgatingpowergatingdpm setting to
	  ->set_powergating_state().
 shutdown the UVD block 
  Copyright 2012 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Interrupts
  Starting with r6xx, interrupts are handled via a ring buffer.
  Ring buffers are areas of GPU accessible memory that the GPU
  writes interrupt vectors into and the host reads vectors out of.
  There is a rptr (read pointer) that determines where the
  host is currently reading, and a wptr (write pointer)
  which determines where the GPU has written.  When the
  pointers are equal, the ring is idle.  When the GPU
  writes vectors to the ring buffer, it increments the
  wptr.  When there is an interrupt, the host then starts
  fetching commands and processing them until the pointers are
  equal again at which point it updates the rptr.
  cik_ih_enable_interrupts - Enable the interrupt ring buffer
  @adev: amdgpu_device pointer
  Enable the interrupt ring buffer (CIK).
  cik_ih_disable_interrupts - Disable the interrupt ring buffer
  @adev: amdgpu_device pointer
  Disable the interrupt ring buffer (CIK).
 set rptr, wptr to 0 
  cik_ih_irq_init - init and enable the interrupt ring
  @adev: amdgpu_device pointer
  Allocate a ring buffer for the interrupt controller,
  enable the RLC, disable interrupts, enable the IH
  ring buffer and enable it (CIK).
  Called at device load and reume.
  Returns 0 for success, errors for failure.
 disable irqs 
 setup interrupt control 
	 INTERRUPT_CNTL__IH_DUMMY_RD_OVERRIDE_MASK=0 - dummy read disabled with msi, enabled without msi
	  INTERRUPT_CNTL__IH_DUMMY_RD_OVERRIDE_MASK=1 - dummy read controlled by IH_DUMMY_RD_EN
 INTERRUPT_CNTL__IH_REQ_NONSNOOP_EN_MASK=1 if ring is in non-cacheable memory, e.g., vram 
 set the writeback address whether it's enabled or not 
 set rptr, wptr to 0 
 Default settings for IH_CNTL (disabled at first) 
 IH_CNTL__RPTR_REARM_MASK only works if msi's are enabled 
 enable irqs 
  cik_ih_irq_disable - disable interrupts
  @adev: amdgpu_device pointer
  Disable interrupts on the hw (CIK).
 Wait and acknowledge irq 
  cik_ih_get_wptr - get the IH ring buffer wptr
  @adev: amdgpu_device pointer
  @ih: IH ring buffer to fetch wptr
  Get the IH ring buffer wptr from either the register
  or the writeback memory buffer (CIK).  Also check for
  ring buffer overflow and deal with it.
  Used by cik_irq_process().
  Returns the value of the wptr.
		 When a ring buffer overflow happen start parsing interrupt
		  from the last not overwritten vector (wptr + 16). Hopefully
		  this should allow us to catchup.
        CIK IV Ring
  Each IV ring entry is 128 bits:
  [7:0]    - interrupt source id
  [31:8]   - reserved
  [59:32]  - interrupt source data
  [63:60]  - reserved
  [71:64]  - RINGID
             CP:
             ME_ID [1:0], PIPE_ID[1:0], QUEUE_ID[2:0]
             QUEUE_ID - for compute, which of the 8 queues owned by the dispatcher
                      - for gfx, hw shader state (0=PS...5=LS, 6=CS)
             ME_ID - 0 = gfx, 1 = first 4 CS pipes, 2 = second 4 CS pipes
             PIPE_ID - ME0 0=3D
                     - ME1&2 compute dispatcher (4 pipes each)
             SDMA:
             INSTANCE_ID [1:0], QUEUE_ID[1:0]
             INSTANCE_ID - 0 = sdma0, 1 = sdma1
             QUEUE_ID - 0 = gfx, 1 = rlc0, 2 = rlc1
  [79:72]  - VMID
  [95:80]  - PASID
  [127:96] - reserved
  cik_ih_decode_iv - decode an interrupt vector
  @adev: amdgpu_device pointer
  Decodes the interrupt vector at the current rptr
  position and also advance the position.
 wptrrptr are in bytes! 
 wptrrptr are in bytes! 
  cik_ih_set_rptr - set the IH ring buffer rptr
  @adev: amdgpu_device pointer
  @ih: IH ring buffer to set wptr
  Set the IH ring buffer rptr.
 read MC_STATUS 
 Wait a little for things to settle down 
  Copyright 2021 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Copyright 2014 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 for baremetal, the ucode is allocated in gtt, so don't need to fill the bo when resetsuspend 
	
	  if SMU loaded firmware, it needn't add SMC, UVD, and VCE
	  ucode info here
  Copyright 2014 Advanced Micro Devices, Inc.
  All Rights Reserved.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sub license, andor sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
  THE COPYRIGHT HOLDERS, AUTHORS ANDOR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,
  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  USE OR OTHER DEALINGS IN THE SOFTWARE.
  The above copyright notice and this permission notice (including the
  next paragraph) shall be included in all copies or substantial portions
  of the Software.
  Authors:
     Christian König <christian.koenig@amd.com>
  DOC: MMU Notifier
  For coherent userptr handling registers an MMU notifier to inform the driver
  about updates on the page tables of a process.
  When somebody tries to invalidate the page tables we block the update until
  all operations on the pages in question are completed, then those pages are
  marked as accessed and also dirty if it wasn't a read only access.
  New command submissions using the userptrs in question are delayed until all
  page table invalidation are completed and we once more see a coherent process
  address space.
  amdgpu_mn_invalidate_gfx - callback to notify about mm change
  @mni: the range (mm) is about to update
  @range: details on the invalidation
  @cur_seq: Value to pass to mmu_interval_set_seq()
  Block for operations on BOs to finish and mark pages as accessed and
  potentially dirty.
  amdgpu_mn_invalidate_hsa - callback to notify about mm change
  @mni: the range (mm) is about to update
  @range: details on the invalidation
  @cur_seq: Value to pass to mmu_interval_set_seq()
  We temporarily evict the BO attached to this range. This necessitates
  evicting all user-mode queues of the process.
  amdgpu_mn_register - register a BO for notifier updates
  @bo: amdgpu buffer object
  @addr: userptr addr we should monitor
  Registers a mmu_notifier for the given BO at the specified address.
  Returns 0 on success, -ERRNO if anything goes wrong.
  amdgpu_mn_unregister - unregister a BO for notifier updates
  @bo: amdgpu buffer object
  Remove any registration of mmu notifier updates from the buffer object.
 Assuming 512MB takes maxmium 1 second to fault page address 
		
		  FIXME: This timeout should encompass the retry from
		  mmu_interval_read_retry() as well.
	
	  Due to default_flags, all pages are HMM_PFN_VALID or
	  hmm_range_fault() fails. FIXME: The pages cannot be touched outside
	  the notifier_lock, and mmu_interval_read_retry() must be done first.
  Copyright 2020 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 enabledisable ROM CG is not supported on APU 
 CGTT_ROM_CLK_CTRL0 is not availabe for APUs 
  Copyright 2019 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 APE1 no longer exists on GFX9 
 ATC is defeatured on Sienna_Cichlid 
 Mapping vmid to pasid also for IH block 
 HIQ is set during driver init period with vmid set to 0
 HQD registers extend from CP_MQD_BASE_ADDR to CP_HQD_EOP_WPTR_MEM. 
 Activate doorbell logic before triggering WPTR poll. 
		 Don't read wptr with get_user because the user
		  context may not be accessible (if this function
		  runs in a work queue). Instead trigger a one-shot
		  polling read from memory in the CP. This assumes
		  that wptr is GPU-accessible in the queue's VMID via
		  ATC or SVM. WPTR==RPTR before starting the poll so
		  the CP starts fetching new commands from the right
		  place.
		 
		  Guessing a 64-bit WPTR from a 32-bit RPTR is a bit
		  tricky. Assume that the queue didn't overflow. The
		  number of valid bits in the 32-bit RPTR depends on
		  the queue size. The remaining bits are taken from
		  the saved 64-bit WPTR. If the WPTR wrapped, add the
		  queue size.
 Start the EOP fetcher 
 Queue_Sel 
 VMID 
queue_type: normal compute queue 
 alloc format: all_on_one_pipe 
 engine_sel: hiq 
 num_queues: must be 1 
 SDMA is on gfxhub as well for Navi1 series 
	
	  Program TBA registers
	
	  Program TMA registers
 kgd_get_iq_wait_times: Returns the mmCP_IQ_WAIT_TIME12 values
  The values read are:
 	ib_offload_wait_time     -- Wait Count for Indirect Buffer Offloads.
 	atomic_offload_wait_time -- Wait Count for L2 and GDS Atomics Offloads.
 	wrm_offload_wait_time    -- Wait Count for WAIT_REG_MEM Offloads.
 	gws_wait_time            -- Wait Count for Global Wave Syncs.
 	que_sleep_wait_time      -- Wait Count for Dequeue Retry.
 	sch_wave_wait_time       -- Wait Count for Scheduling Wave Message.
 	sem_rearm_wait_time      -- Wait Count for Semaphore re-arm.
 	deq_retry_wait_time      -- Wait Count for Global Wave Syncs.
  Copyright 2021 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Copyright 2017 Advanced Micro Devices, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE COPYRIGHT HOLDER(S) OR AUTHOR(S) BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
 u32 pf2vf_flags = 0; 
	TODO: Enable these code when pv2vf_info is merged
	AMDGPU_FW_VRAM_PF2VF_READ (adev, feature_flags, &pf2vf_flags);
	if (!(pf2vf_flags & AMDGIM_FEATURE_ERROR_LOG_COLLECT)) {
		return;
	}
 The errors are overlay of array, correct read_count as full. 
 SPDX-License-Identifier: GPL-2.0 OR MIT
 Copyright 2017-2019 Qiang Yu <yuq825@gmail.com> 
	 If this value is too low, when in high GPU clk freq,
	  GPU will be in unstable state.
 status reg 1=off 0=on 
 power up all ip 
		 Don't wait for interrupt on Mali400 if all domains are
		  powered off because the HW won't generate an interrupt
		  in this case.
 SPDX-License-Identifier: GPL-2.0 OR MIT
 Copyright 2017-2019 Qiang Yu <yuq825@gmail.com> 
  Changelog:
  - 1.1.0 - add heap buffer support
 Allocate and initialize the DRM device. 
	
	  Register the DRM device with the core and the connectors with
	  sysfs.
 stop autosuspend to make sure device is in active state 
 SPDX-License-Identifier: GPL-2.0 OR MIT
 Copyright 2017-2019 Qiang Yu <yuq825@gmail.com> 
 should not create new bo_va if not asked by caller 
 SPDX-License-Identifier: GPL-2.0 OR MIT
 Copyright 2018-2019 Qiang Yu <yuq825@gmail.com> 
 SPDX-License-Identifier: GPL-2.0 OR MIT
 Copyright 2017-2019 Qiang Yu <yuq825@gmail.com> 
 Mali Utgard GPU can only support 32bit address space 
 drop reference from allocate - handle holds it now 
 explicit sync use user passed dep fence 
		 increase refcnt of gpu va map to prevent unmapped when executing,
		  will be decreased when task done
 SPDX-License-Identifier: GPL-2.0 OR MIT
 Copyright 2017-2019 Qiang Yu <yuq825@gmail.com> 
 mask all interrupts before hard reset 
 for shared irq case 
 for shared irq case 
		 status read first in case int state change in the middle
		  which may miss the interrupt handling
 PP has been reset by individual PP resume 
 SPDX-License-Identifier: GPL-2.0 OR MIT
 Copyright 2017-2019 Qiang Yu <yuq825@gmail.com> 
 for shared irq case 
 mask all interrupts before resume 
 flush the TLB 
 SPDX-License-Identifier: GPL-2.0 OR MIT
 Copyright 2018-2019 Qiang Yu <yuq825@gmail.com> 
 SPDX-License-Identifier: GPL-2.0 OR MIT
 Copyright 2017-2019 Qiang Yu <yuq825@gmail.com> 
 for shared irq case 
 mask all interrupts before hard reset 
 update real heap buffer size for GP 
 before any hw ops, wait last success task async soft reset 
 Resume from where we stopped, i.e. new start is old end 
 SPDX-License-Identifier: GPL-2.0 OR MIT
 Copyright 2017-2019 Qiang Yu <yuq825@gmail.com> 
 check any task running 
 SPDX-License-Identifier: GPL-2.0
  Copyright 2020 Martin Blumenstingl <martin.blumenstingl@googlemail.com>
  Based on panfrost_devfreq.c:
    Copyright 2019 Collabora ltd.
 ~3 frames 
 Optional, continue without devfreq 
 Continue if the optional regulator is missing 
	
	  Setup default thresholds for the simple_ondemand governor.
	  The values are chosen based on experiments.
 SPDX-License-Identifier: GPL-2.0 OR MIT
 Copyright 2017-2019 Qiang Yu <yuq825@gmail.com> 
 l2_cache2 only exists when one of PP4-7 present 
 SPDX-License-Identifier: GPL-2.0 OR MIT
 Copyright 2017-2019 Qiang Yu <yuq825@gmail.com> 
 resume GPU if it has been suspended by runtime PM 
 GPU can do auto runtime suspend 
 after GPU reset 
	 for caller usage of the fence, otherwise irq handler
	  may consume the fence before caller use it
	 this is needed for MMU to work correctly, otherwise GPPP
	  will hang or page fault for unknown reason after running for
	  a while.
	 
	  Need to investigate:
	  1. is it related to TLB
	  2. how much performance will be affected by L2 cache flush
	  3. can we reduce the calling of this function because all
	     GPPP use the same L2 cache on mali400
	 
	  TODO:
	  1. move this to task fini to save some wait time?
	  2. when GPPP use different l2 cache, need PP wait GP l2
	     cache flush?
 frame chunk 
 process name chunk 
 pid chunk 
 buffer chunks 
 SPDX-License-Identifier: GPL-2.0 OR MIT
 Copyright 2020 Qiang Yu <yuq825@gmail.com> 
 SPDX-License-Identifier: GPL-2.0 OR MIT
 Copyright 2018-2019 Qiang Yu <yuq825@gmail.com> 
 mga_warp.c -- Matrox G200G400 WARP engine management -- linux-c --
  Created: Thu Jan 11 21:29:32 2001 by gareth@valinux.com
  Copyright 2000 VA Linux Systems, Inc., Sunnyvale, California.
  All Rights Reserved.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice (including the next
  paragraph) shall be included in all copies or substantial portions of the
  Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  VA LINUX SYSTEMS ANDOR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors:
     Gareth Hughes <gareth@valinux.com>
 in bytes 
	 FIXME: Get rid of these damned magic numbers...
 mga_dma.c -- DMA support for mga g200g400 -- linux-c --
  Created: Mon Dec 13 01:50:01 1999 by jhartmann@precisioninsight.com
  Copyright 1999 Precision Insight, Inc., Cedar Park, Texas.
  Copyright 2000 VA Linux Systems, Inc., Sunnyvale, California.
  All Rights Reserved.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice (including the next
  paragraph) shall be included in all copies or substantial portions of the
  Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  PRECISION INSIGHT ANDOR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  DEALINGS IN THE SOFTWARE.
  \file mga_dma.c
  DMA support for MGA G200  G400.
  \author Rickard E. (Rik) Faith <faith@valinux.com>
  \author Jeff Hartmann <jhartmann@valinux.com>
  \author Keith Whitwell <keith@tungstengraphics.com>
  \author Gareth Hughes <gareth@valinux.com>
 ================================================================
  Engine control
	 The primary DMA stream should look like new right about now.
	 FIXME: Reset counters, buffer ages etc...
	 FIXME: What else do we need to reinitialize?  WARP stuff?
 ================================================================
  Primary DMA stream
 We need to wait so that we can do an safe flush 
	 We need to pad the stream between flushes, as the card
	  actually (partially?) reads the first of these commands.
	  See page 4-16 in the G400 manual, middle of the page or so.
 ================================================================
  Freelist management
 FIXME: Still needed?
 ================================================================
  DMA initialization, cleanup
	 There are PCI versions of the G450.  These cards have the
	  same PCI ID as the AGP G450, but have an additional PCI-to-PCI
	  bridge chip.  We detect these cards, which are not currently
	  supported by this driver, by looking at the device ID of the
	  bus the "card" is on.  If vendor is 0x3388 (Hint Corp) and the
	  device is 0x0021 (HB6 Universal PCI-PCI bridge), we reject the
	  device.
		 FIXME: This should be quirked in the pci core, but oh well
  Bootstrap the driver for AGP DMA.
  \todo
  Investigate whether there is any benefit to storing the WARP microcode in
  AGP memory.  If not, the microcode may as well always be put in PCI
  memory.
  \todo
  This routine needs to set dma_bs->agp_mode to the mode actually configured
  in the hardware.  Looking just at the Linux AGP driver code, I don't see
  an easy way to determine this.
  \sa mga_do_dma_bootstrap, mga_do_pci_dma_bootstrap
 Acquire AGP. 
	 In addition to the usual AGP mode configuration, the G200 AGP cards
	  need to have the AGP mode "manually" set.
 Allocate and bind AGP memory. 
	 Make drm_legacy_addbufs happy by not trying to create a mapping for
	  less than a page.
  Bootstrap the driver for PCI DMA.
  \todo
  The algorithm for decreasing the size of the primary DMA buffer could be
  better.  The size should be rounded up to the nearest page size, then
  decrease the request size by a single page each pass through the loop.
  \todo
  Determine whether the maximum address passed to drm_pci_alloc is correct.
  The same goes for drm_legacy_addbufs_pci.
  \sa mga_do_dma_bootstrap, mga_do_agp_dma_bootstrap
	 Make drm_legacy_addbufs happy by not trying to create a mapping for
	  less than a page.
 The proper alignment is 0x100 for this mapping 
	 Other than the bottom two bits being used to encode other
	  information, there don't appear to be any restrictions on the
	  alignment of the primary or secondary DMA buffers.
 The proper alignment for this mapping is 0x04 
	 The first steps are the same for both PCI and AGP based DMA.  Map
	  the cards MMIO registers and map a status page.
	 The DMA initialization procedure is slightly different for PCI and
	  AGP cards.  AGP cards just allocate a large block of AGP memory and
	  carve off portions of it for internal uses.  The remaining memory
	  is returned to user-mode to be used for AGP textures.
	 If we attempted to initialize the card for AGP DMA but failed,
	  clean-up any mess that may have been created.
	 Not only do we want to try and initialized PCI cards for PCI DMA,
	  but we also try to initialized AGP cards that could not be
	  initialized for AGP DMA.  This covers the case where we have an AGP
	  card in a system with an unsupported AGP chipset.  In that case the
	  card will be detected as AGP, but we won't be able to allocate any
	  AGP memory, etc.
	 FIXME: Need to support AGP textures...
	 Init the primary DMA registers.
 Soft trap, SECEND, SETUPEND 
 DWGSYNC 
	 Make sure interrupts are disabled here because the uninstall ioctl
	  may not have been called from userspace and after dev_private
	  is freed, it's too late.
 ================================================================
  Primary DMA stream management
 ================================================================
  DMA buffer management
	 Please don't send us buffers.
	 We'll send you buffers.
  Called just before the module is unloaded.
  Called when the last opener of the device is closed.
 mga_state.c -- State support for MGA G200G400 -- linux-c --
  Created: Thu Jan 27 02:53:43 2000 by jhartmann@precisioninsight.com
  Copyright 1999 Precision Insight, Inc., Cedar Park, Texas.
  Copyright 2000 VA Linux Systems, Inc., Sunnyvale, California.
  All Rights Reserved.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice (including the next
  paragraph) shall be included in all copies or substantial portions of the
  Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  VA LINUX SYSTEMS ANDOR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors:
     Jeff Hartmann <jhartmann@valinux.com>
     Keith Whitwell <keith@tungstengraphics.com>
  Rewritten by:
     Gareth Hughes <gareth@valinux.com>
 ================================================================
  DMA hardware state programming functions
	 Force reset of DWGCTL on G400 (eliminates clip disable bit).
	printk("mga_g400_emit_tex0 %x %x %x\n", tex->texorg, 
	       tex->texctl, tex->texctl2); 
	printk("mga_g400_emit_tex1 %x %x %x\n", tex->texorg,  
	       tex->texctl, tex->texctl2); 
	 Padding required due to hardware bug.
	printk("mga_g400_emit_pipe %x\n", pipe); 
 Flush the WARP pipe 
 tex0              
 tex0              
 tex1              
 tex1              
 tex0 width        
 tex0 height       
 tex1 width        
 tex1 height       
 Padding required due to hardware bug 
 ================================================================
  SAREA state verification
 Disallow all write destinations except the front and backbuffer.
 Disallow texture reads from PCI space.
 ================================================================
 Force reset of DWGCTL 
 This copies a 64 byte aligned agp region to the frambuffer with a
  standard blit, the ioctl needs to do checking.
	 Do something to flush AGP?
 Force reset of DWGCTL 
 ================================================================
	 Make sure we restore the 3D state next time.
	 Make sure we restore the 3D state next time.
	 Make sure we restore the 3D state next time.
	 Make sure we restore the 3D state next time.
	 I would normal do this assignment in the declaration of fence,
	  but dev_priv may be NULL.
 mga_irq.c -- IRQ handling for radeon -- linux-c --
  Copyright (C) The Weather Channel, Inc.  2002.  All Rights Reserved.
  The Weather Channel (TM) funded Tungsten Graphics to develop the
  initial release of the Radeon 8500 driver under the XFree86 license.
  This notice must be preserved.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice (including the next
  paragraph) shall be included in all copies or substantial portions of the
  Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  PRECISION INSIGHT ANDOR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  DEALINGS IN THE SOFTWARE.
  Authors:
     Keith Whitwell <keith@tungstengraphics.com>
     Eric Anholt <anholt@FreeBSD.org>
 VBLANK interrupt 
 SOFTRAP interrupt 
		 In addition to clearing the interrupt-pending bit, we
		  have to write to MGA_PRIMEND to re-start the DMA operation.
	 Do NOT disable the vertical refresh interrupt.  MGA doesn't have
	  a nice hardware counter that tracks the number of refreshes when
	  the interrupt is disabled, and the kernel doesn't know the refresh
	  rate to calculate an estimate.
 MGA_WRITE(MGA_IEN, MGA_VLINEIEN | MGA_SOFTRAPEN); 
	 Assume that the user has missed the current sequence number
	  by about a day rather than she wants to wait for years
	  using fences.
 Disable all interrupts 
 Clear bits if they're already high 
	 Turn on soft trap interrupt.  Vertical blank interrupts are enabled
	  in mga_enable_vblank.
 Disable all interrupts 
 mga_drv.c -- Matrox G200G400 driver -- linux-c --
  Created: Mon Dec 13 01:56:22 1999 by jhartmann@precisioninsight.com
  Copyright 1999 Precision Insight, Inc., Cedar Park, Texas.
  Copyright 2000 VA Linux Systems, Inc., Sunnyvale, California.
  All Rights Reserved.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice (including the next
  paragraph) shall be included in all copies or substantial portions of the
  Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  VA LINUX SYSTEMS ANDOR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  OTHER DEALINGS IN THE SOFTWARE.
  Authors:
     Rickard E. (Rik) Faith <faith@valinux.com>
     Gareth Hughes <gareth@valinux.com>
  \file mga_ioc32.c
  32-bit ioctl compatibility routines for the MGA DRM.
  \author Dave Airlie <airlied@linux.ie> with code from patches by Egbert Eich
  Copyright (C) Paul Mackerras 2005
  Copyright (C) Egbert Eich 2003,2004
  Copyright (C) Dave Airlie 2005
  All Rights Reserved.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice (including the next
  paragraph) shall be included in all copies or substantial portions of the
  Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE AUTHOR BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
  IN THE SOFTWARE.
  mga_compat_ioctl - Called whenever a 32-bit process running under
                     a 64-bit kernel performs an ioctl on devdricard<n>.
  @filp: file pointer.
  @cmd:  command.
  @arg:  user argument.
  return: zero on success or negative number on failure.
  Copyright 2012 Red Hat Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sub license, andor sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
  THE COPYRIGHT HOLDERS, AUTHORS ANDOR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,
  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  USE OR OTHER DEALINGS IN THE SOFTWARE.
  The above copyright notice and this permission notice (including the
  next paragraph) shall be included in all copies or substantial portions
  of the Software.
  Authors: Dave Airlie <airlied@redhat.com>
 SPDX-License-Identifier: GPL-2.0-only
  Copyright 2012 Red Hat
  Authors: Matthew Garrett
           Dave Airlie
  DRM driver
  DRM device
 BAR 1 contains registers 
 Test for MATROX string. 
 Get the PInS offset. 
 Get PInS data structure. 
 Extract the clock values 
 stash G200 SE model number for later use 
  PCI driver
 SPDX-License-Identifier: GPL-2.0-only
  G200
  G200SE
 Permited delta is 0.5% as VESA Specification 
  G200WB
 set pixclkdis to 1 
 select PLL Set C 
 reset the PLL 
 program pixel pll register 
 turn pll on 
 select the pixel pll 
 reset dotclock rate bit 
  G200EV
  G200EH
  G200EH3
 same as G200EH
  G200ER
  G200EW3
 same as G200WB
  PLL initialization
  Copyright 2012 Red Hat Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sub license, andor sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
  THE COPYRIGHT HOLDERS, AUTHORS ANDOR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,
  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  USE OR OTHER DEALINGS IN THE SOFTWARE.
  The above copyright notice and this permission notice (including the
  next paragraph) shall be included in all copies or substantial portions
  of the Software.
  Authors: Dave Airlie <airlied@redhat.com>
 Probe 
 BAR 0 is VRAM 
 Don't fail on errors, but performance might be reduced. 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright 2010 Matt Turner.
  Copyright 2012 Red Hat
  Authors: Matthew Garrett
 	    Matt Turner
 	    Dave Airlie
  This file contains setup code for the CRTC.
 VGA registers 
 VGA registers 
	 1- The first step is to warn the BMC of an upcoming mode change.
 we are putting a 1 on the misc<0> line 
	 2- Second step to mask and further scan request
	  This will be done by asserting the remfreqmsk bit (XSPAREREG<7>)
	 3a- the third step is to verifu if there is an active scan
	  We are searching for a 0 on remhsyncsts <XSPAREREG<0>)
	 3b- this step occurs only if the remove is actually scanning
	  we are waiting for the end of the frame which is a 1 on
	  remvsyncsts (XSPAREREG<1>)
 1- The first step is to ensure that the vrsten and hrsten are set 
 2- second step is to assert the rstlvl2 
 wait 10 us 
 3- deassert rstlvl2 
 4- remove mask of scan request 
 5- put back a 0 on the misc<0> line 
  This is how the framebuffer base address is stored in g200 cards:
     Assume @offset is the gpu_addr variable of the framebuffer object
     Then addr is the number of _pixels_ (not bytes) from the start of
      VRAM to the first pixel we want to display. (divided by 2 for 32bit
      framebuffers)
     addr is stored in the CRTCEXT0, CRTCC and CRTCD registers
       addr<20> -> CRTCEXT0<6>
       addr<19-16> -> CRTCEXT0<3-0>
       addr<15-8> -> CRTCC<7-0>
       addr<7-0> -> CRTCD<7-0>
   CRTCEXT0 has to be programmed last to trigger an update and make the
   new addr variable take effect.
	
	  Can't store addresses any higher than that, but we also
	  don't have more than 16 MiB of memory, so it should be fine.
 0x00:         0,    0,    0,    0,    0,    0, 0x00,    0,
 0x08:         0,    0,    0,    0,    0,    0,    0,    0,
 0x10:         0,    0,    0,    0,    0,    0,    0,    0,
 0x18:      0x00,    0, 0xC9, 0xFF, 0xBF, 0x20, 0x1F, 0x20,
 0x20:      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 0x28:      0x00, 0x00, 0x00, 0x00,    0,    0,    0, 0x40,
 0x30:      0x00, 0xB0, 0x00, 0xC2, 0x34, 0x14, 0x02, 0x83,
 0x38:      0x00, 0x93, 0x00, 0x77, 0x00, 0x00, 0x00, 0x3A,
 0x40:         0,    0,    0,    0,    0,    0,    0,    0,
 0x48:         0,    0,    0,    0,    0,    0,    0,    0
 Work around hardware quirk 
 vrsten 
 hrsten 
 linecomp 
  Calculates the HW offset value from the framebuffer's pitch. The
  offset is a multiple of the pixel size and depends on the display
  format.
 BUG: We should have caught this problem already. 
 undocumented magic value 
 implicitly sets maxhipri to 0 
	
	  TODO: replace busy waiting with vblank IRQ; put
	        msleep(50) before changing SCROFF
	
	  TODO: replace busy waiting with vblank IRQ; put
	        msleep(50) before changing SCROFF
  Connector
 Validate the mode input by the user 
  Simple Display Pipe
 TODO: Use mapping abstraction properly 
 Always scanout image at VRAM offset 0 
 update PLL settings 
 must be set to NULL here 
  Mode config
 FIXME: legacy gamma tables; convert to CRTC state 
 SPDX-License-Identifier: GPL-2.0
  Test cases for the drm_rect functions
	
	  Make sure we don't divide by zero when dst
	  widthheight is zero and dst and clip do not intersect.
 1:1 scaling 
 2:1 scaling 
 1:2 scaling 
 1:1 scaling topleft clip 
 1:1 scaling bottomright clip 
 2:1 scaling topleft clip 
 2:1 scaling bottomright clip 
 1:2 scaling topleft clip 
 1:2 scaling bottomright clip 
	
	  'clip.x2 - dst.x1 >= dst width' could result a negative
	  src rectangle width which is no longer expected by the
	  code as it's using unsigned types. This could lead to
	  the clipped source rectangle appering visible when it
	  should have been fully clipped. Make sure both rectangles
	  end up invisible.
 SPDX-License-Identifier: GPL-2.0
  Test case for drm_damage_helper functions
 just enough so that drm_plane_enable_fb_damage_clips() works 
 0 is an invalid id 
	
	  Round down x1y1 and round up x2y2. This is because damage is not in
	  16.16 fixed point so to catch all pixels.
 common mocked structs many tests need 
 Plane src same as fb size. 
 Plane src has fractional part. 
 Plane src moved since old plane state. 
 Plane src has fractional part and it moved since old plane state. 
 Damage set to plane src 
 Damage intersect with plane src. 
 Damage clip outside plane src 
 Plane src has fractional part. 
 Plane src has fractional part. 
 Damage intersect with plane src. 
 Plane src has fractional part. 
 Damage clip outside plane src 
 Plane src moved since old plane state. 
 Plane src with fractional part moved since old plane state. 
 Damage intersect with plane src. 
 2 damage clips. 
 2 damage clips, one intersect plane src. 
 2 damage clips, one outside plane src. 
 2 damage clips, one outside plane src. 
 2 damage clips, one outside plane src. 
 SPDX-License-Identifier: GPL-2.0
  Test cases for the drm_plane_helper functions
 Simple clipping, no scaling. 
 Rotated clipping + reflection, no scaling. 
 Check whether positioning works correctly. 
 Simple scaling tests. 
 Testing rounding errors. 
 Should not be rounded to 0x20001, which would be upscaling. 
 SPDX-License-Identifier: GPL-2.0
  Common file for modeset selftests.
 SPDX-License-Identifier: GPL-2.0-only
  Test cases for for the DRM DP MST helpers
	
	  Compare struct members manually for request types which can't be
	  compared simply using memcmp(). This is because said request types
	  contain pointers to other allocated structs
 Clear everything but the req_type for the input 
  Copyright © 2016 Intel Corporation
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice (including the next
  paragraph) shall be included in all copies or substantial portions of the
  Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
  IN THE SOFTWARE.
 Embed the line number into the parameter name so that we can order tests 
 Tests are listed in natural order in drm__selftests.h 
 SPDX-License-Identifier: GPL-2.0-only
  Test cases for the drm_mm range manager
 Start with some simple checks on initialising the struct drm_mm 
 After creation, it should all be one massive hole 
 After filling the range entirely, there should be no holes 
 And then after emptying it again, the massive hole should be back 
	 Create a small drm_mm with a couple of nodes and a few holes, and
	  check that the debug iterator doesn't explode over a trivial drm_mm.
	 For exercising drm_mm_reserve_node(), we want to check that
	  reservations outside of the drm_mm range are rejected, and to
	  overlapping and otherwise already occupied ranges. Afterwards,
	  the tree and nodes should be intact.
 After random insertion the nodes should be in order 
 Repeated use should then fail 
 Remove and reinsert should work 
 Overlapping use should then fail 
 Remove several, reinsert, check full 
 Fill a range with lots of nodes, check it doesn't fail too early 
 After random insertion the nodes should be in order 
 Repeated use should then fail 
 Remove one and reinsert, as the only hole it should refill itself 
 Remove several, reinsert, check full 
	 Reuse igt_insert to exercise replacement by inserting a dummy node,
	  then replacing it with the intended node. We want to check that
	  the tree is intact and all the information we need is carried
	  across to the target node.
	 Very similar to __igt_insert(), but now instead of populating the
	  full range of the drm_mm, we try to fill a small portion of it.
 Remove one and reinsert, it should refill itself 
 Check that requests outside the bounds of drm_mm are rejected. 
 introduce fragmentation by freeing every other node 
	 We need 4  insert_size nodes to hold intermediate allocated
	  drm_mm nodes.
	  1 times for prepare_igt_frag()
	  1 times for get_insert_time()
	  2 times for get_insert_time()
	 For BOTTOMUP and TOPDOWN, we first fragment the
	  address space using prepare_igt_frag() and then try to verify
	  that that insertions scale quadratically from 10k to 20k insertions
	 For each of the possible insertion modes, we pick a few
	  arbitrary alignments and check that the inserted node
	  meets our requirements.
 Check that we can align to the full u64 address space 
	 Here we populate a full drm_mm and then try and insert a new node
	  by evicting other nodes in a random order. The drm_mm_scan should
	  pick the first matching hole it finds from the random list. We
	  repeat that for different allocation strategies, alignments and
	  sizes to try and stress the hole finder.
 First check that using the scanner doesn't break the mm 
	 Like igt_evict() but now we are limiting the search to a
	  small portion of the full drm_mm.
	 When allocating top-down, we expect to be returned a node
	  from a suitable hole at the top of the drm_mm. We check that
	  the returned node does match the highest available slot.
	 Like igt_topdown, but instead of searching for the last hole,
	  we search for the first.
	 Color adjustment complicates everything. First we just check
	  that when we insert a node we apply any color_adjustment callback.
	  The callback we use should ensure that there is a gap between
	  any two nodes, and so after each insertion we check that those
	  holes are inserted and that they are preserved.
 Now, let's start experimenting with applying a color callback 
	 Check that the drm_mm_scan also honours color adjustment when
	  choosing its victims to create a hole. Our color_adjust does not
	  allow two nodes to be placed together without an intervening hole
	  enlarging the set of victims that must be evicted.
	 Like igt_color_evict(), but limited to small portion of the full
	  drm_mm range.
 SPDX-License-Identifier: GPL-2.0
  Test cases for the drm_format functions
 Test invalid arguments 
 Test 1 plane format 
 Test 2 planes format 
 Test 3 planes format 
 Test a tiled format 
 Test invalid arguments 
 Test 1 plane format 
 Test 2 planes format 
 Test 3 planes format 
 Test a tiled format 
 Test invalid arguments 
 Test 1 plane 8 bits per pixel format 
 Test 1 plane 16 bits per pixel format 
 Test 1 plane 24 bits per pixel format 
 Test 1 plane 32 bits per pixel format 
 Test 2 planes format 
 Test 3 planes 8 bits per pixel format 
 Test tiled format 
 SPDX-License-Identifier: GPL-2.0
  Copyright (c) 2019 Bootlin
 SPDX-License-Identifier: GPL-2.0
  Test cases for the drm_framebuffer functions
 SPDX-License-Identifier: GPL-2.0 OR MIT
  Copyright 2014-2015 VMware, Inc., Palo Alto, CA., USA
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sub license, andor sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:
  The above copyright notice and this permission notice (including the
  next paragraph) shall be included in all copies or substantial portions
  of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
  THE COPYRIGHT HOLDERS, AUTHORS ANDOR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,
  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  USE OR OTHER DEALINGS IN THE SOFTWARE.
  Treat context OTables as resources to make use of the resource
  backing MOB eviction mechanism, that is used to read back the COTable
  whenever the backing MOB is evicted.
  struct vmw_cotable - Context Object Table resource
  @res: struct vmw_resource we are deriving from.
  @ctx: non-refcounted pointer to the owning context.
  @size_read_back: Size of data read back during eviction.
  @seen_entries: Seen entries in command stream for this cotable.
  @type: The cotable type.
  @scrubbed: Whether the cotable has been scrubbed.
  @resource_list: List of resources in the cotable.
  struct vmw_cotable_info - Static info about cotable types
  @min_initial_entries: Min number of initial intries at cotable allocation
  for this cotable type.
  @size: Size of each entry.
  @unbind_func: Unbind call-back function.
  Cotables with bindings that we remove must be scrubbed first,
  otherwise, the device will swap in an invalid context when we remove
  bindings before scrubbing a cotable...
  vmw_cotable - Convert a struct vmw_resource pointer to a struct
  vmw_cotable pointer
  @res: Pointer to the resource.
  vmw_cotable_destroy - Cotable resource destroy callback
  @res: Pointer to the cotable resource.
  There is no device cotable destroy command, so this function only
  makes sure that the resource id is set to invalid.
  vmw_cotable_unscrub - Undo a cotable unscrub operation
  @res: Pointer to the cotable resource
  This function issues commands to (re)bind the cotable to
  its backing mob, which needs to be validated and reserved at this point.
  This is identical to bind() except the function interface looks different.
  vmw_cotable_bind - Undo a cotable unscrub operation
  @res: Pointer to the cotable resource
  @val_buf: Pointer to a struct ttm_validate_buffer prepared by the caller
  for convenience  fencing.
  This function issues commands to (re)bind the cotable to
  its backing mob, which needs to be validated and reserved at this point.
	
	  The create() callback may have changed @res->backup without
	  the caller noticing, and with val_buf->bo still pointing to
	  the old backup buffer. Although hackish, and not used currently,
	  take the opportunity to correct the value here so that it's not
	  misused in the future.
  vmw_cotable_scrub - Scrub the cotable from the device.
  @res: Pointer to the cotable resource.
  @readback: Whether initiate a readback of the cotable data to the backup
  buffer.
  In some situations (context swapouts) it might be desirable to make the
  device forget about the cotable without performing a full unbind. A full
  unbind requires reserved backup buffers and it might not be possible to
  reserve them due to locking order violation issues. The vmw_cotable_scrub
  function implements a partial unbind() without that requirement but with the
  following restrictions.
  1) Before the cotable is again used by the GPU, vmw_cotable_unscrub() must
     be called.
  2) Before the cotable backing buffer is used by the CPU, or during the
     resource destruction, vmw_cotable_unbind() must be called.
 Trigger a create() on next validate. 
  vmw_cotable_unbind - Cotable resource unbind callback
  @res: Pointer to the cotable resource.
  @readback: Whether to read back cotable data to the backup buffer.
  @val_buf: Pointer to a struct ttm_validate_buffer prepared by the caller
  for convenience  fencing.
  Unbinds the cotable from the device and fences the backup buffer.
  vmw_cotable_readback - Read back a cotable without unbinding.
  @res: The cotable resource.
  Reads back a cotable to its backing mob without scrubbing the MOB from
  the cotable. The MOB is fenced for subsequent CPU access.
  vmw_cotable_resize - Resize a cotable.
  @res: The cotable resource.
  @new_size: The new size.
  Resizes a cotable and binds the new backup buffer.
  On failure the cotable is left intact.
  Important! This function may not fail once the MOB switch has been
  committed to hardware. That would put the device context in an
  invalid state which we can't currently recover from.
	
	  While device is processing, Allocate and reserve a buffer object
	  for the new COTable. Initially pin the buffer object to make sure
	  we can use tryreserve without failure.
	
	  Do a page by page copy of COTables. This eliminates slow vmap()s.
	  This should really be a TTM utility.
 Unpin new buffer, and switch backup buffers. 
	
	  Now tell the device to switch. If this fails, then we need to
	  revert the full resize.
 Let go of the old mob. 
 Release the pin acquired in vmw_bo_init 
  vmw_cotable_create - Cotable resource create callback
  @res: Pointer to a cotable resource.
  There is no separate create command for cotables, so this callback, which
  is called before bind() in the validation sequence is instead used for two
  things.
  1) Unscrub the cotable if it is scrubbed and still attached to a backup
     buffer.
  2) Resize the cotable if needed.
 Check whether we need to resize the cotable 
  vmw_hw_cotable_destroy - Cotable hw_destroy callback
  @res: Pointer to a cotable resource.
  The final (part of resource destruction) destroy callback.
  vmw_cotable_free - Cotable resource destructor
  @res: Pointer to a cotable resource.
  vmw_cotable_alloc - Create a cotable resource
  @dev_priv: Pointer to a device private struct.
  @ctx: Pointer to the context resource.
  The cotable resource will not add a refcount.
  @type: The cotable type.
  vmw_cotable_notify - Notify the cotable about an item creation
  @res: Pointer to a cotable resource.
  @id: Item id.
 Trigger a call to create() on next validate 
  vmw_cotable_add_resource - add a view to the cotable's list of active views.
  @res: pointer struct vmw_resource representing the cotable.
  @head: pointer to the struct list_head member of the resource, dedicated
  to the cotable active resource list.
 SPDX-License-Identifier: GPL-2.0 OR MIT
  Copyright © 2018 VMware, Inc., Palo Alto, CA., USA
  All Rights Reserved.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sub license, andor sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:
  The above copyright notice and this permission notice (including the
  next paragraph) shall be included in all copies or substantial portions
  of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
  THE COPYRIGHT HOLDERS, AUTHORS ANDOR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,
  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  USE OR OTHER DEALINGS IN THE SOFTWARE.
  struct vmw_validation_bo_node - Buffer object validation metadata.
  @base: Metadata used for TTM reservation- and validation.
  @hash: A hash entry used for the duplicate detection hash table.
  @coherent_count: If switching backup buffers, number of new coherent
  resources that will have this buffer as a backup buffer.
  @as_mob: Validate as mob.
  @cpu_blit: Validate for cpu blit access.
  Bit fields are used since these structures are allocated and freed in
  large numbers and space conservation is desired.
  struct vmw_validation_res_node - Resource validation metadata.
  @head: List head for the resource validation list.
  @hash: A hash entry used for the duplicate detection hash table.
  @res: Reference counted resource pointer.
  @new_backup: Non ref-counted pointer to new backup buffer to be assigned
  to a resource.
  @new_backup_offset: Offset into the new backup mob for resources that can
  share MOBs.
  @no_buffer_needed: Kernel does not need to allocate a MOB during validation,
  the command stream provides a mob bind operation.
  @switching_backup: The validation process is switching backup MOB.
  @first_usage: True iff the resource has been seen only once in the current
  validation batch.
  @reserved: Whether the resource is currently reserved by this process.
  @dirty_set: Change dirty status of the resource.
  @dirty: Dirty information VMW_RES_DIRTY_XX.
  @private: Optionally additional memory for caller-private data.
  Bit fields are used since these structures are allocated and freed in
  large numbers and space conservation is desired.
  vmw_validation_mem_alloc - Allocate kernel memory from the validation
  context based allocator
  @ctx: The validation context
  @size: The number of bytes to allocated.
  The memory allocated may not exceed PAGE_SIZE, and the returned
  address is aligned to sizeof(long). All memory allocated this way is
  reclaimed after validation when calling any of the exported functions:
  vmw_validation_unref_lists()
  vmw_validation_revert()
  vmw_validation_done()
  Return: Pointer to the allocated memory on success. NULL on failure.
  vmw_validation_mem_free - Free all memory allocated using
  vmw_validation_mem_alloc()
  @ctx: The validation context
  All memory previously allocated for this context using
  vmw_validation_mem_alloc() is freed.
  vmw_validation_find_bo_dup - Find a duplicate buffer object entry in the
  validation context's lists.
  @ctx: The validation context to search.
  @vbo: The buffer object to search for.
  Return: Pointer to the struct vmw_validation_bo_node referencing the
  duplicate, or NULL if none found.
  vmw_validation_find_res_dup - Find a duplicate resource entry in the
  validation context's lists.
  @ctx: The validation context to search.
  @res: Reference counted resource pointer.
  Return: Pointer to the struct vmw_validation_bo_node referencing the
  duplicate, or NULL if none found.
  vmw_validation_add_bo - Add a buffer object to the validation context.
  @ctx: The validation context.
  @vbo: The buffer object.
  @as_mob: Validate as mob, otherwise suitable for GMR operations.
  @cpu_blit: Validate in a page-mappable location.
  Return: Zero on success, negative error code otherwise.
  vmw_validation_add_resource - Add a resource to the validation context.
  @ctx: The validation context.
  @res: The resource.
  @priv_size: Size of private, additional metadata.
  @dirty: Whether to change dirty status.
  @p_node: Output pointer of additional metadata address.
  @first_usage: Whether this was the first time this resource was seen.
  Return: Zero on success, negative error code otherwise.
 Overwriting previous information here is intentional! 
  vmw_validation_res_set_dirty - Register a resource dirty set or clear during
  validation.
  @ctx: The validation context.
  @val_private: The additional meta-data pointer returned when the
  resource was registered with the validation context. Used to identify
  the resource.
  @dirty: Dirty information VMW_RES_DIRTY_XX
 Overwriting previous information here is intentional! 
  vmw_validation_res_switch_backup - Register a backup MOB switch during
  validation.
  @ctx: The validation context.
  @val_private: The additional meta-data pointer returned when the
  resource was registered with the validation context. Used to identify
  the resource.
  @vbo: The new backup buffer object MOB. This buffer object needs to have
  already been registered with the validation context.
  @backup_offset: Offset into the new backup MOB.
  vmw_validation_res_reserve - Reserve all resources registered with this
  validation context.
  @ctx: The validation context.
  @intr: Use interruptible waits when possible.
  Return: Zero on success, -ERESTARTSYS if interrupted. Negative error
  code on failure.
  vmw_validation_res_unreserve - Unreserve all reserved resources
  registered with this validation context.
  @ctx: The validation context.
  @backoff: Whether this is a backoff- of a commit-type operation. This
  is used to determine whether to switch backup MOBs or not.
  vmw_validation_bo_validate_single - Validate a single buffer object.
  @bo: The TTM buffer object base.
  @interruptible: Whether to perform waits interruptible if possible.
  @validate_as_mob: Whether to validate in MOB memory.
  Return: Zero on success, -ERESTARTSYS if interrupted. Negative error
  code on failure.
	
	  Put BO in VRAM if there is space, otherwise as a GMR.
	  If there is no space in VRAM and GMR ids are all used up,
	  start evicting GMRs to make room. If the DMA buffer can't be
	  used as a GMR, this will return -ENOMEM.
	
	  If that failed, try VRAM again, this time evicting
	  previous contents.
  vmw_validation_bo_validate - Validate all buffer objects registered with
  the validation context.
  @ctx: The validation context.
  @intr: Whether to perform waits interruptible if possible.
  Return: Zero on success, -ERESTARTSYS if interrupted,
  negative error code on failure.
		
		  Rather than having the resource code allocating the bo
		  dirty tracker in resource_unreserve() where we can't fail,
		  Do it here when validating the buffer object.
  vmw_validation_res_validate - Validate all resources registered with the
  validation context.
  @ctx: The validation context.
  @intr: Whether to perform waits interruptible if possible.
  Before this function is called, all resource backup buffers must have
  been validated.
  Return: Zero on success, -ERESTARTSYS if interrupted,
  negative error code on failure.
 Check if the resource switched backup buffer 
  vmw_validation_drop_ht - Reset the hash table used for duplicate finding
  and unregister it from this validation context.
  @ctx: The validation context.
  The hash table used for duplicate finding is an expensive resource and
  may be protected by mutexes that may cause deadlocks during resource
  unreferencing if held. After resource- and buffer object registering,
  there is no longer any use for this hash table, so allow freeing it
  either to shorten any mutex locking time, or before resources- and
  buffer objects are freed during validation context cleanup.
  vmw_validation_unref_lists - Unregister previously registered buffer
  object and resources.
  @ctx: The validation context.
  Note that this function may cause buffer object- and resource destructors
  to be invoked.
	
	  No need to detach each list entry since they are all freed with
	  vmw_validation_free_mem. Just make the inaccessible.
  vmw_validation_prepare - Prepare a validation context for command
  submission.
  @ctx: The validation context.
  @mutex: The mutex used to protect resource reservation.
  @intr: Whether to perform waits interruptible if possible.
  Note that the single reservation mutex @mutex is an unfortunate
  construct. Ideally resource reservation should be moved to per-resource
  ww_mutexes.
  If this functions doesn't return Zero to indicate success, all resources
  are left unreserved but still referenced.
  Return: Zero on success, -ERESTARTSYS if interrupted, negative error code
  on error.
  vmw_validation_revert - Revert validation actions if command submission
  failed.
  @ctx: The validation context.
  The caller still needs to unref resources after a call to this function.
  vmw_validation_done - Commit validation actions after command submission
  success.
  @ctx: The validation context.
  @fence: Fence with which to fence all buffer objects taking part in the
  command submission.
  The caller does NOT need to unref resources after a call to this function.
  vmw_validation_preload_bo - Preload the validation memory allocator for a
  call to vmw_validation_add_bo().
  @ctx: Pointer to the validation context.
  Iff this function returns successfully, the next call to
  vmw_validation_add_bo() is guaranteed not to sleep. An error is not fatal
  but voids the guarantee.
  Returns: Zero if successful, %-EINVAL otherwise.
  vmw_validation_preload_res - Preload the validation memory allocator for a
  call to vmw_validation_add_res().
  @ctx: Pointer to the validation context.
  @size: Size of the validation node extra data. See below.
  Iff this function returns successfully, the next call to
  vmw_validation_add_res() with the same or smaller @size is guaranteed not to
  sleep. An error is not fatal but voids the guarantee.
  Returns: Zero if successful, %-EINVAL otherwise.
  vmw_validation_bo_backoff - Unreserve buffer objects registered with a
  validation context
  @ctx: The validation context
  This function unreserves the buffer objects previously reserved using
  vmw_validation_bo_reserve. It's typically used as part of an error path
	
	  Switching coherent resource backup buffers failed.
	  Release corresponding buffer object dirty trackers.
 SPDX-License-Identifier: GPL-2.0 OR MIT
  Copyright 2009 - 2015 VMware, Inc., Palo Alto, CA., USA
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sub license, andor sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:
  The above copyright notice and this permission notice (including the
  next paragraph) shall be included in all copies or substantial portions
  of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
  THE COPYRIGHT HOLDERS, AUTHORS ANDOR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,
  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  USE OR OTHER DEALINGS IN THE SOFTWARE.
  Helper macro to get dx_ctx_node if available otherwise print an error
  message. This is for use in command verifier function where if dx_ctx_node
  is not set then command is invalid.
  struct vmw_relocation - Buffer object relocation
  @head: List head for the command submission context's relocation list
  @vbo: Non ref-counted pointer to buffer object
  @mob_loc: Pointer to location for mob id to be modified
  @location: Pointer to location for guest pointer to be modified
  enum vmw_resource_relocation_type - Relocation type for resources
  @vmw_res_rel_normal: Traditional relocation. The resource id in the
  command stream is replaced with the actual id after validation.
  @vmw_res_rel_nop: NOP relocation. The command is unconditionally replaced
  with a NOP.
  @vmw_res_rel_cond_nop: Conditional NOP relocation. If the resource id after
  validation is -1, the command is replaced with a NOP. Otherwise no action.
  @vmw_res_rel_max: Last value in the enum - used for error checking
  struct vmw_resource_relocation - Relocation info for resources
  @head: List head for the software context's relocation list.
  @res: Non-ref-counted pointer to the resource.
  @offset: Offset of single byte entries into the command buffer where the id
  that needs fixup is located.
  @rel_type: Type of relocation.
  struct vmw_ctx_validation_info - Extra validation metadata for contexts
  @head: List head of context list
  @ctx: The context resource
  @cur: The context's persistent binding state
  @staged: The binding state changes of this command buffer
  struct vmw_cmd_entry - Describe a command for the verifier
  @func: Call-back to handle the command.
  @user_allow: Whether allowed from the execbuf ioctl.
  @gb_disable: Whether disabled if guest-backed objects are available.
  @gb_enable: Whether enabled iff guest-backed objects are available.
  @cmd_name: Name of the command.
  vmw_ptr_diff - Compute the offset from a to b in bytes
  @a: A starting pointer.
  @b: A pointer offset in the same address space.
  Returns: The offset in bytes between the two pointers.
  vmw_execbuf_bindings_commit - Commit modified binding state
  @sw_context: The command submission context
  @backoff: Whether this is part of the error path and binding state changes
  should be ignored
 List entries are freed with the validation context 
  vmw_bind_dx_query_mob - Bind the DX query MOB if referenced
  @sw_context: The command submission context
  vmw_cmd_ctx_first_setup - Perform the setup needed when a context is added to
  the validate list.
  @dev_priv: Pointer to the device private:
  @sw_context: The command submission context
  @res: Pointer to the resource
  @node: The validation node holding the context resource metadata
  vmw_execbuf_res_size - calculate extra size fore the resource validation node
  @dev_priv: Pointer to the device private struct.
  @res_type: The resource type.
  Guest-backed contexts and DX contexts require extra size to store execbuf
  private information in the validation node. Typically the binding manager
  associated data structures.
  Returns: The extra size requirement based on resource type.
  vmw_execbuf_rcache_update - Update a resource-node cache entry
  @rcache: Pointer to the entry to update.
  @res: Pointer to the resource.
  @private: Pointer to the execbuf-private space in the resource validation
  node.
  vmw_execbuf_res_noref_val_add - Add a resource described by an unreferenced
  rcu-protected pointer to the validation list.
  @sw_context: Pointer to the software context.
  @res: Unreferenced rcu-protected pointer to the resource.
  @dirty: Whether to change dirty status.
  Returns: 0 on success. Negative error code on failure. Typical error codes
  are %-EINVAL on inconsistency and %-ESRCH if the resource was doomed.
  vmw_execbuf_res_noctx_val_add - Add a non-context resource to the resource
  validation list if it's not already on it
  @sw_context: Pointer to the software context.
  @res: Pointer to the resource.
  @dirty: Whether to change dirty status.
  Returns: Zero on success. Negative error code on failure.
  vmw_view_res_val_add - Add a view and the surface it's pointing to to the
  validation list
  @sw_context: The software context holding the validation list.
  @view: Pointer to the view resource.
  Returns 0 if success, negative error code otherwise.
	
	  First add the resource the view is pointing to, otherwise it may be
	  swapped out when the view is validated.
  vmw_view_id_val_add - Look up a view and add it and the surface it's pointing
  to to the validation list.
  @sw_context: The software context holding the validation list.
  @view_type: The view type to look up.
  @id: view id of the view.
  The view is represented by a view id and the DX context it's created on, or
  scheduled for creation on. If there is no DX context set, the function will
  return an -EINVAL error pointer.
  Returns: Unreferenced pointer to the resource on success, negative error
  pointer on failure.
  vmw_resource_context_res_add - Put resources previously bound to a context on
  the validation list
  @dev_priv: Pointer to a device private structure
  @sw_context: Pointer to a software context used for this command submission
  @ctx: Pointer to the context resource
  This function puts all resources that were previously bound to @ctx on the
  resource validation list. This is part of the context state reemission
 Add all cotables to the validation list. 
 Add all resources bound to the context to the validation list 
  vmw_resource_relocation_add - Add a relocation to the relocation list
  @sw_context: Pointer to the software context.
  @res: The resource.
  @offset: Offset into the command buffer currently being parsed where the id
  that needs fixup is located. Granularity is one byte.
  @rel_type: Relocation type.
  vmw_resource_relocations_free - Free all relocations on a list
  @list: Pointer to the head of the relocation list
 Memory is validation context memory, so no need to free it 
  vmw_resource_relocations_apply - Apply all relocations on a list
  @cb: Pointer to the start of the command buffer bein patch. This need not be
  the same buffer as the one being parsed when the relocation list was built,
  but the contents must be the same modulo the resource ids.
  @list: Pointer to the head of the relocation list.
 Validate the struct vmw_resource_relocation member size 
  vmw_resources_reserve - Reserve all resources on the sw_context's resource
  list.
  @sw_context: Pointer to the software context.
  Note that since vmware's command submission currently is protected by the
  cmdbuf mutex, no fancy deadlock avoidance is required for resources, since
  only a single thread at once will attempt this.
  vmw_cmd_res_check - Check that a resource is present and if so, put it on the
  resource validate list unless it's already there.
  @dev_priv: Pointer to a device private structure.
  @sw_context: Pointer to the software context.
  @res_type: Resource type.
  @dirty: Whether to change dirty status.
  @converter: User-space visisble type specific information.
  @id_loc: Pointer to the location in the command buffer currently being parsed
  from where the user-space resource id handle is located.
  @p_res: Pointer to pointer to resource validalidation node. Populated on
  exit.
  vmw_rebind_all_dx_query - Rebind DX query associated with the context
  @ctx_res: context the query belongs to
  This function assumes binding_mutex is held.
  vmw_rebind_contexts - Rebind all resources previously bound to referenced
  contexts.
  @sw_context: Pointer to the software context.
  Rebind context binding points that have been scrubbed because of eviction.
  vmw_view_bindings_add - Add an array of view bindings to a context binding
  state tracker.
  @sw_context: The execbuf state used for this command.
  @view_type: View type for the bindings.
  @binding_type: Binding type for the bindings.
  @shader_slot: The shader slot to user for the bindings.
  @view_ids: Array of view ids to be bound.
  @num_views: Number of view ids in @view_ids.
  @first_slot: The binding slot to be used for the first view id in @view_ids.
  vmw_cmd_cid_check - Check a command header for valid context information.
  @dev_priv: Pointer to a device private structure.
  @sw_context: Pointer to the software context.
  @header: A command header with an embedded user-space context handle.
  Convenience function: Call vmw_cmd_res_check with the user-space context
  handle embedded in @header.
  vmw_execbuf_info_from_res - Get the private validation metadata for a
  recently validated resource
  @sw_context: Pointer to the command submission context
  @res: The resource
  The resource pointed to by @res needs to be present in the command submission
  context's resource cache and hence the last resource of that type to be
  processed by the validation code.
  Return: a pointer to the private metadata of the resource, or NULL if it
  wasn't found
  vmw_query_bo_switch_prepare - Prepare to switch pinned buffer for queries.
  @dev_priv: The device private structure.
  @new_query_bo: The new buffer holding query results.
  @sw_context: The software context used for this command submission.
  This function checks whether @new_query_bo is suitable for holding query
  results, and if another buffer currently is pinned for query results. If so,
  the function prepares the state of @sw_context for switching pinned buffers
  after successful submission of the current command batch.
  vmw_query_bo_switch_commit - Finalize switching pinned query buffer
  @dev_priv: The device private structure.
  @sw_context: The software context used for this command submission batch.
  This function will check if we're switching query buffers, and will then,
  issue a dummy occlusion query wait used as a query barrier. When the fence
  object following that query wait has signaled, we are sure that all preceding
  queries have finished, and the old query buffer can be unpinned. However,
  since both the new query buffer and the old one are fenced with that fence,
  we can do an asynchronus unpin now, and be sure that the old query buffer
  won't be moved until the fence has signaled.
  As mentioned above, both the new - and old query buffers need to be fenced
  using a sequence emitted after calling this function.
	
	  The validate list should still hold references to all
	  contexts here.
			
			  We pin also the dummy_query_bo buffer so that we
			  don't need to validate it when emitting dummy queries
			  in context destroy paths.
  vmw_translate_mob_ptr - Prepare to translate a user-space buffer handle
  to a MOB id.
  @dev_priv: Pointer to a device private structure.
  @sw_context: The software context used for this command batch validation.
  @id: Pointer to the user-space handle to be translated.
  @vmw_bo_p: Points to a location that, on successful return will carry a
  non-reference-counted pointer to the buffer object identified by the
  user-space handle in @id.
  This function saves information needed to translate a user-space buffer
  handle to a MOB id. The translation does not take place immediately, but
  during a call to vmw_apply_relocations().
  This function builds a relocation list and a list of buffers to validate. The
  former needs to be freed using either vmw_apply_relocations() or
  vmw_free_relocations(). The latter needs to be freed using
  vmw_clear_validations.
  vmw_translate_guest_ptr - Prepare to translate a user-space buffer handle
  to a valid SVGAGuestPtr
  @dev_priv: Pointer to a device private structure.
  @sw_context: The software context used for this command batch validation.
  @ptr: Pointer to the user-space handle to be translated.
  @vmw_bo_p: Points to a location that, on successful return will carry a
  non-reference-counted pointer to the DMA buffer identified by the user-space
  handle in @id.
  This function saves information needed to translate a user-space buffer
  handle to a valid SVGAGuestPtr. The translation does not take place
  immediately, but during a call to vmw_apply_relocations().
  This function builds a relocation list and a list of buffers to validate.
  The former needs to be freed using either vmw_apply_relocations() or
  vmw_free_relocations(). The latter needs to be freed using
  vmw_clear_validations.
  vmw_cmd_dx_define_query - validate SVGA_3D_CMD_DX_DEFINE_QUERY command.
  @dev_priv: Pointer to a device private struct.
  @sw_context: The software context used for this command submission.
  @header: Pointer to the command header in the command stream.
  This function adds the new query into the query COTABLE
  vmw_cmd_dx_bind_query - validate SVGA_3D_CMD_DX_BIND_QUERY command.
  @dev_priv: Pointer to a device private struct.
  @sw_context: The software context used for this command submission.
  @header: Pointer to the command header in the command stream.
  The query bind operation will eventually associate the query ID with its
  backing MOB.  In this function, we take the user mode MOB ID and use
  vmw_translate_mob_ptr() to translate it to its kernel mode equivalent.
	
	  Look up the buffer pointed to by q.mobid, put it on the relocation
	  list so its kernel mode MOB ID can be filled in later
  vmw_cmd_begin_gb_query - validate SVGA_3D_CMD_BEGIN_GB_QUERY command.
  @dev_priv: Pointer to a device private struct.
  @sw_context: The software context used for this command submission.
  @header: Pointer to the command header in the command stream.
  vmw_cmd_begin_query - validate SVGA_3D_CMD_BEGIN_QUERY command.
  @dev_priv: Pointer to a device private struct.
  @sw_context: The software context used for this command submission.
  @header: Pointer to the command header in the command stream.
  vmw_cmd_end_gb_query - validate SVGA_3D_CMD_END_GB_QUERY command.
  @dev_priv: Pointer to a device private struct.
  @sw_context: The software context used for this command submission.
  @header: Pointer to the command header in the command stream.
  vmw_cmd_end_query - validate SVGA_3D_CMD_END_QUERY command.
  @dev_priv: Pointer to a device private struct.
  @sw_context: The software context used for this command submission.
  @header: Pointer to the command header in the command stream.
  vmw_cmd_wait_gb_query - validate SVGA_3D_CMD_WAIT_GB_QUERY command.
  @dev_priv: Pointer to a device private struct.
  @sw_context: The software context used for this command submission.
  @header: Pointer to the command header in the command stream.
  vmw_cmd_wait_query - validate SVGA_3D_CMD_WAIT_QUERY command.
  @dev_priv: Pointer to a device private struct.
  @sw_context: The software context used for this command submission.
  @header: Pointer to the command header in the command stream.
 Make sure device and verifier stays in sync. 
 Make sure DMA doesn't cross BO boundaries. 
  vmw_cmd_res_switch_backup - Utility function to handle backup buffer
  switching
  @dev_priv: Pointer to a device private struct.
  @sw_context: The software context being used for this batch.
  @res: Pointer to the resource.
  @buf_id: Pointer to the user-space backup buffer handle in the command
  stream.
  @backup_offset: Offset of backup into MOB.
  This function prepares for registering a switch of backup buffers in the
  resource metadata just prior to unreserving. It's basically a wrapper around
  vmw_cmd_res_switch_backup with a different interface.
  vmw_cmd_switch_backup - Utility function to handle backup buffer switching
  @dev_priv: Pointer to a device private struct.
  @sw_context: The software context being used for this batch.
  @res_type: The resource type.
  @converter: Information about user-space binding for this resource type.
  @res_id: Pointer to the user-space resource handle in the command stream.
  @buf_id: Pointer to the user-space backup buffer handle in the command
  stream.
  @backup_offset: Offset of backup into MOB.
  This function prepares for registering a switch of backup buffers in the
  resource metadata just prior to unreserving. It's basically a wrapper around
  vmw_cmd_res_switch_backup with a different interface.
  vmw_cmd_bind_gb_surface - Validate SVGA_3D_CMD_BIND_GB_SURFACE command
  @dev_priv: Pointer to a device private struct.
  @sw_context: The software context being used for this batch.
  @header: Pointer to the command header in the command stream.
  vmw_cmd_update_gb_image - Validate SVGA_3D_CMD_UPDATE_GB_IMAGE command
  @dev_priv: Pointer to a device private struct.
  @sw_context: The software context being used for this batch.
  @header: Pointer to the command header in the command stream.
  vmw_cmd_update_gb_surface - Validate SVGA_3D_CMD_UPDATE_GB_SURFACE command
  @dev_priv: Pointer to a device private struct.
  @sw_context: The software context being used for this batch.
  @header: Pointer to the command header in the command stream.
  vmw_cmd_readback_gb_image - Validate SVGA_3D_CMD_READBACK_GB_IMAGE command
  @dev_priv: Pointer to a device private struct.
  @sw_context: The software context being used for this batch.
  @header: Pointer to the command header in the command stream.
  vmw_cmd_readback_gb_surface - Validate SVGA_3D_CMD_READBACK_GB_SURFACE
  command
  @dev_priv: Pointer to a device private struct.
  @sw_context: The software context being used for this batch.
  @header: Pointer to the command header in the command stream.
  vmw_cmd_invalidate_gb_image - Validate SVGA_3D_CMD_INVALIDATE_GB_IMAGE
  command
  @dev_priv: Pointer to a device private struct.
  @sw_context: The software context being used for this batch.
  @header: Pointer to the command header in the command stream.
  vmw_cmd_invalidate_gb_surface - Validate SVGA_3D_CMD_INVALIDATE_GB_SURFACE
  command
  @dev_priv: Pointer to a device private struct.
  @sw_context: The software context being used for this batch.
  @header: Pointer to the command header in the command stream.
  vmw_cmd_shader_define - Validate SVGA_3D_CMD_SHADER_DEFINE command
  @dev_priv: Pointer to a device private struct.
  @sw_context: The software context being used for this batch.
  @header: Pointer to the command header in the command stream.
  vmw_cmd_shader_destroy - Validate SVGA_3D_CMD_SHADER_DESTROY command
  @dev_priv: Pointer to a device private struct.
  @sw_context: The software context being used for this batch.
  @header: Pointer to the command header in the command stream.
  vmw_cmd_set_shader - Validate SVGA_3D_CMD_SET_SHADER command
  @dev_priv: Pointer to a device private struct.
  @sw_context: The software context being used for this batch.
  @header: Pointer to the command header in the command stream.
		
		  This is the compat shader path - Per device guest-backed
		  shaders, but user-space thinks it's per context host-
		  backed shaders.
  vmw_cmd_set_shader_const - Validate SVGA_3D_CMD_SET_SHADER_CONST command
  @dev_priv: Pointer to a device private struct.
  @sw_context: The software context being used for this batch.
  @header: Pointer to the command header in the command stream.
  vmw_cmd_bind_gb_shader - Validate SVGA_3D_CMD_BIND_GB_SHADER command
  @dev_priv: Pointer to a device private struct.
  @sw_context: The software context being used for this batch.
  @header: Pointer to the command header in the command stream.
  vmw_cmd_dx_set_single_constant_buffer - Validate
  SVGA_3D_CMD_DX_SET_SINGLE_CONSTANT_BUFFER command.
  @dev_priv: Pointer to a device private struct.
  @sw_context: The software context being used for this batch.
  @header: Pointer to the command header in the command stream.
  vmw_cmd_dx_set_shader_res - Validate SVGA_3D_CMD_DX_SET_SHADER_RESOURCES
  command
  @dev_priv: Pointer to a device private struct.
  @sw_context: The software context being used for this batch.
  @header: Pointer to the command header in the command stream.
  vmw_cmd_dx_set_shader - Validate SVGA_3D_CMD_DX_SET_SHADER command
  @dev_priv: Pointer to a device private struct.
  @sw_context: The software context being used for this batch.
  @header: Pointer to the command header in the command stream.
  vmw_cmd_dx_set_vertex_buffers - Validates SVGA_3D_CMD_DX_SET_VERTEX_BUFFERS
  command
  @dev_priv: Pointer to a device private struct.
  @sw_context: The software context being used for this batch.
  @header: Pointer to the command header in the command stream.
  vmw_cmd_dx_set_index_buffer - Validate
  SVGA_3D_CMD_DX_IA_SET_INDEX_BUFFER command.
  @dev_priv: Pointer to a device private struct.
  @sw_context: The software context being used for this batch.
  @header: Pointer to the command header in the command stream.
  vmw_cmd_dx_set_rendertargets - Validate SVGA_3D_CMD_DX_SET_RENDERTARGETS
  command
  @dev_priv: Pointer to a device private struct.
  @sw_context: The software context being used for this batch.
  @header: Pointer to the command header in the command stream.
  vmw_cmd_dx_clear_rendertarget_view - Validate
  SVGA_3D_CMD_DX_CLEAR_RENDERTARGET_VIEW command
  @dev_priv: Pointer to a device private struct.
  @sw_context: The software context being used for this batch.
  @header: Pointer to the command header in the command stream.
  vmw_cmd_dx_clear_depthstencil_view - Validate
  SVGA_3D_CMD_DX_CLEAR_DEPTHSTENCIL_VIEW command
  @dev_priv: Pointer to a device private struct.
  @sw_context: The software context being used for this batch.
  @header: Pointer to the command header in the command stream.
	
	  This is based on the fact that all affected define commands have the
	  same initial command body layout.
  vmw_cmd_dx_set_so_targets - Validate SVGA_3D_CMD_DX_SET_SOTARGETS command.
  @dev_priv: Pointer to a device private struct.
  @sw_context: The software context being used for this batch.
  @header: Pointer to the command header in the command stream.
	
	  This is based on the fact that all affected define commands have
	  the same initial command body layout.
  vmw_cmd_dx_check_subresource - Validate SVGA_3D_CMD_DX_[X]_SUBRESOURCE
  command
  @dev_priv: Pointer to a device private struct.
  @sw_context: The software context being used for this batch.
  @header: Pointer to the command header in the command stream.
  vmw_cmd_dx_view_remove - validate a view remove command and schedule the view
  resource for removal.
  @dev_priv: Pointer to a device private struct.
  @sw_context: The software context being used for this batch.
  @header: Pointer to the command header in the command stream.
  Check that the view exists, and if it was not created using this command
  batch, conditionally make this command a NOP.
	
	  If the view wasn't created during this command batch, it might
	  have been removed due to a context swapout, so add a
	  relocation to conditionally make this command a NOP to avoid
	  device errors.
  vmw_cmd_dx_define_shader - Validate SVGA_3D_CMD_DX_DEFINE_SHADER command
  @dev_priv: Pointer to a device private struct.
  @sw_context: The software context being used for this batch.
  @header: Pointer to the command header in the command stream.
  vmw_cmd_dx_destroy_shader - Validate SVGA_3D_CMD_DX_DESTROY_SHADER command
  @dev_priv: Pointer to a device private struct.
  @sw_context: The software context being used for this batch.
  @header: Pointer to the command header in the command stream.
  vmw_cmd_dx_bind_shader - Validate SVGA_3D_CMD_DX_BIND_SHADER command
  @dev_priv: Pointer to a device private struct.
  @sw_context: The software context being used for this batch.
  @header: Pointer to the command header in the command stream.
  vmw_cmd_dx_genmips - Validate SVGA_3D_CMD_DX_GENMIPS command
  @dev_priv: Pointer to a device private struct.
  @sw_context: The software context being used for this batch.
  @header: Pointer to the command header in the command stream.
	
	  Normally the shader-resource view is not gpu-dirtying, but for
	  this particular command it is...
	  So mark the last looked-up surface, which is the surface
	  the view points to, gpu-dirty.
  vmw_cmd_dx_transfer_from_buffer - Validate
  SVGA_3D_CMD_DX_TRANSFER_FROM_BUFFER command
  @dev_priv: Pointer to a device private struct.
  @sw_context: The software context being used for this batch.
  @header: Pointer to the command header in the command stream.
  vmw_cmd_intra_surface_copy - Validate SVGA_3D_CMD_INTRA_SURFACE_COPY command
  @dev_priv: Pointer to a device private struct.
  @sw_context: The software context being used for this batch.
  @header: Pointer to the command header in the command stream.
	
	  When device does not support SM5 then streamoutput with mob command is
	  not available to user-space. Simply return in this case.
	
	  With SM5 capable device if lookup fails then user-space probably used
	  old streamoutput define command. Return without an error.
	
	  When device does not support SM5 then streamoutput with mob command is
	  not available to user-space. Simply return in this case.
	
	  With SM5 capable device if lookup fails then user-space probably used
	  old streamoutput define command. Return without an error.
 Only one SO set to context at a time. 
 SM commands 
	
	  SM5 commands
 Handle any none 3D commands 
 Memory is validation context memory, so no need to free it 
  vmw_execbuf_fence_commands - create and submit a command stream fence
  Creates a fence object and submits a command stream marker.
  If this fails for some reason, We sync the fifo and return NULL.
  It is then safe to fence buffers with a NULL pointer.
  If @p_handle is not NULL @file_priv must also not be NULL. Creates a
  userspace handle if @p_handle is not NULL, otherwise not.
 p_handle implies file_priv. 
  vmw_execbuf_copy_fence_user - copy fence object information to user-space.
  @dev_priv: Pointer to a vmw_private struct.
  @vmw_fp: Pointer to the struct vmw_fpriv representing the calling file.
  @ret: Return value from fence object creation.
  @user_fence_rep: User space address of a struct drm_vmw_fence_rep to which
  the information should be copied.
  @fence: Pointer to the fenc object.
  @fence_handle: User-space fence handle.
  @out_fence_fd: exported file descriptor for the fence.  -1 if not used
  @sync_file:  Only used to clean up in case of an error in this function.
  This function copies fence information to user-space. If copying fails, the
  user-space struct drm_vmw_fence_rep::error member is hopefully left
  untouched, and if it's preloaded with an -EFAULT by user-space, the error
  will hopefully be detected.
  Also if copying fails, user-space will be unable to signal the fence object
  so we wait for it immediately, and then unreference the user-space reference.
	
	  copy_to_user errors will be detected by user space not seeing
	  fence_rep::error filled in. Typically user-space would have pre-set
	  that member to -EFAULT.
	
	  User-space lost the fence object. We need to sync and unreference the
	  handle.
  vmw_execbuf_submit_fifo - Patch a command batch and submit it using the fifo.
  @dev_priv: Pointer to a device private structure.
  @kernel_commands: Pointer to the unpatched command batch.
  @command_size: Size of the unpatched command batch.
  @sw_context: Structure holding the relocation lists.
  Side effects: If this function returns 0, then the command batch pointed to
  by @kernel_commands will have been modified.
  vmw_execbuf_submit_cmdbuf - Patch a command batch and submit it using the
  command buffer manager.
  @dev_priv: Pointer to a device private structure.
  @header: Opaque handle to the command buffer allocation.
  @command_size: Size of the unpatched command batch.
  @sw_context: Structure holding the relocation lists.
  Side effects: If this function returns 0, then the command buffer represented
  by @header will have been modified.
  vmw_execbuf_cmdbuf - Prepare, if possible, a user-space command batch for
  submission using a command buffer.
  @dev_priv: Pointer to a device private structure.
  @user_commands: User-space pointer to the commands to be submitted.
  @command_size: Size of the unpatched command batch.
  @header: Out parameter returning the opaque pointer to the command buffer.
  This function checks whether we can use the command buffer manager for
  submission and if so, creates a command buffer of suitable size and copies
  the user data into that buffer.
  On successful return, the function returns a pointer to the data in the
  command buffer and @header is set to non-NULL.
  @kernel_commands: If command buffers could not be used, the function will
  return the value of @kernel_commands on function call. That value may be
  NULL. In that case, the value of @header will be set to NULL.
  If an error is encountered, the function will return a pointer error value.
  If the function is interrupted by a signal while sleeping, it will return
  -ERESTARTSYS casted to a pointer error value.
 If possible, add a little space for fencing. 
	
	  This error is harmless, because if fence submission fails,
	  vmw_fifo_send_fence will sync. The error will be propagated to
	  user-space in @fence_rep
	
	  If anything fails here, give up trying to export the fence and do a
	  sync since the user mode will not be able to sync the fence itself.
	  This ensures we are still functionally correct.
 Link the fence with the FD created earlier 
 Don't unreference when handing fence out 
	
	  Unreference resources outside of the cmdbuf_mutex to avoid deadlocks
	  in resource destruction paths.
	
	  Unreference resources outside of the cmdbuf_mutex to avoid deadlocks
	  in resource destruction paths.
  vmw_execbuf_unpin_panic - Idle the fifo and unpin the query buffer.
  @dev_priv: The device private structure.
  This function is called to idle the fifo and unpin the query buffer if the
  normal way to do this hits an error, which should typically be extremely
  rare.
  __vmw_execbuf_release_pinned_bo - Flush queries and unpin the pinned query
  bo.
  @dev_priv: The device private structure.
  @fence: If non-NULL should point to a struct vmw_fence_obj issued _after_ a
  query barrier that flushes all queries touching the current buffer pointed to
  by @dev_priv->pinned_bo
  This function should be used to unpin the pinned query bo, or as a query
  barrier when we need to make sure that all queries have finished before the
  next fifo command. (For example on hardware context destructions where the
  hardware may otherwise leak unfinished queries).
  This function does not return any failure codes, but make attempts to do safe
  unpinning in case of errors.
  The function will synchronize on the previous query barrier, and will thus
  not finish until that barrier has executed.
  the @dev_priv->cmdbuf_mutex needs to be held by the current thread before
  calling this function.
  vmw_execbuf_release_pinned_bo - Flush queries and unpin the pinned query bo.
  @dev_priv: The device private structure.
  This function should be used to unpin the pinned query bo, or as a query
  barrier when we need to make sure that all queries have finished before the
  next fifo command. (For example on hardware context destructions where the
  hardware may otherwise leak unfinished queries).
  This function does not return any failure codes, but make attempts to do safe
  unpinning in case of errors.
  The function will synchronize on the previous query barrier, and will thus
  not finish until that barrier has executed.
	
	  Extend the ioctl argument while maintaining backwards compatibility:
	  We take different code paths depending on the value of arg->version.
	 
	  Note: The ioctl argument is extended and zeropadded by core DRM.
 For v1 core DRM have extended + zeropadded the data 
 For v2 and later core DRM would have correctly copied it 
 If imported a fence FD from elsewhere, then wait on it 
 SPDX-License-Identifier: GPL-2.0 OR MIT 
  Copyright (c) 2009-2013 VMware, Inc., Palo Alto, CA., USA
  All Rights Reserved.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sub license, andor sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:
  The above copyright notice and this permission notice (including the
  next paragraph) shall be included in all copies or substantial portions
  of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
  THE COPYRIGHT HOLDERS, AUTHORS ANDOR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,
  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  USE OR OTHER DEALINGS IN THE SOFTWARE.
  Authors: Thomas Hellstrom <thellstrom-at-vmware-dot-com>
  While no substantial code is shared, the prime code is inspired by
  drm_prime.c, with
  Authors:
       Dave Airlie <airlied@redhat.com>
       Rob Clark <rob.clark@linaro.org>
 @file ttm_ref_object.c
  Base- and reference object implementation for the various
  ttm objects. Implements reference counting, minimal security checks
  and release on file close.
  struct ttm_object_file
  @tdev: Pointer to the ttm_object_device.
  @lock: Lock that protects the ref_list list and the
  ref_hash hash tables.
  @ref_list: List of ttm_ref_objects to be destroyed at
  file release.
  @ref_hash: Hash tables of ref objects, one per ttm_ref_type,
  for fast lookup of ref objects given a base object.
  @refcount: referenceusage count
  struct ttm_object_device
  @object_lock: lock that protects the object_hash hash table.
  @object_hash: hash table for fast lookup of object global names.
  @object_count: Per device object count.
  This is the per-device data structure needed for ttm object management.
  struct ttm_ref_object
  @hash: Hash entry for the per-file object reference hash.
  @head: List entry for the per-file list of ref-objects.
  @kref: Ref count.
  @obj: Base object this ref object is referencing.
  @ref_type: Type of ref object.
  This is similar to an idr object, but it also has a hash table entry
  that allows lookup with a pointer to the referenced object as a key. In
  that way, one can easily detect whether a base object is referenced by
  a particular ttm_object_file. It also carries a ref count to avoid creating
  multiple ref objects if a ttm_object_file references the same base
  object more than once.
	
	  Note: We don't use synchronize_rcu() here because it's far
	  too slow. It's up to the user to free the object using
	  call_rcu() or ttm_base_object_kfree().
  ttm_base_object_noref_lookup - look up a base object without reference
  @tfile: The struct ttm_object_file the object is registered with.
  @key: The object handle.
  This function looks up a ttm base object and returns a pointer to it
  without refcounting the pointer. The returned pointer is only valid
  until ttm_base_object_noref_release() is called, and the object
  pointed to by the returned pointer may be doomed. Any persistent usage
  of the object requires a refcount to be taken using kref_get_unless_zero().
  Iff this function returns successfully it needs to be paired with
  ttm_base_object_noref_release() and no sleeping- or scheduling functions
  may be called inbetween these function callse.
  Return: A pointer to the object if successful or NULL otherwise.
  ttm_ref_object_exists - Check whether a caller has a valid ref object
  (has opened) a base object.
  @tfile: Pointer to a struct ttm_object_file identifying the caller.
  @base: Pointer to a struct base object.
  Checks wether the caller identified by @tfile has put a valid USAGE
  reference object on the base object identified by @base.
	
	  Verify that the ref object is really pointing to our base object.
	  Our base object could actually be dead, and the ref object pointing
	  to another base object with the same handle.
	
	  Verify that the ref->obj pointer was actually valid!
	
	  Since we release the lock within the loop, we have to
	  restart it from the beginning each time.
  get_dma_buf_unless_doomed - get a dma_buf reference if possible.
  @dmabuf: Non-refcounted pointer to a struct dma-buf.
  Obtain a file reference from a lookup structure that doesn't refcount
  the file, but synchronizes with its release method to make sure it has
  not been freed yet. See for example kref_get_unless_zero documentation.
  Returns true if refcounting succeeds, false otherwise.
  Nobody really wants this as a public API yet, so let it mature here
  for some time...
  ttm_prime_refcount_release - refcount release method for a prime object.
  @p_base: Pointer to ttm_base_object pointer.
  This is a wrapper that calls the refcount_release founction of the
  underlying object. At the same time it cleans up the prime object.
  This function is called when all references to the base object we
  derive from are gone.
  ttm_prime_dmabuf_release - Release method for the dma-bufs we export
  @dma_buf:
  This function first calls the dma_buf release method the driver
  provides. Then it cleans up our dma_buf pointer used for lookup,
  and finally releases the reference the dma_buf has on our base
  object.
  ttm_prime_fd_to_handle - Get a base object handle from a prime fd
  @tfile: A struct ttm_object_file identifying the caller.
  @fd: The prime  dmabuf fd.
  @handle: The returned handle.
  This function returns a handle to an object that previously exported
  a dma-buf. Note that we don't handle imports yet, because we simply
  have no consumers of that implementation.
  ttm_prime_handle_to_fd - Return a dma_buf fd from a ttm prime object
  @tfile: Struct ttm_object_file identifying the caller.
  @handle: Handle to the object we're exporting from.
  @flags: flags for dma-buf creation. We just pass them on.
  @prime_fd: The returned file descriptor.
		
		  Need to create a new dma_buf, with memory accounting.
		
		  dma_buf has taken the base object reference
  ttm_prime_object_init - Initialize a ttm_prime_object
  @tfile: struct ttm_object_file identifying the caller
  @size: The size of the dma_bufs we export.
  @prime: The object to be initialized.
  @shareable: See ttm_base_object_init
  @type: See ttm_base_object_init
  @refcount_release: See ttm_base_object_init
  @ref_obj_release: See ttm_base_object_init
  Initializes an object which is compatible with the drm_prime model
  for data sharing between processes and devices.
 SPDX-License-Identifier: GPL-2.0 OR MIT 
  Copyright (c) 2006-2009 VMware, Inc., Palo Alto, CA., USA
  All Rights Reserved.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sub license, andor sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:
  The above copyright notice and this permission notice (including the
  next paragraph) shall be included in all copies or substantial portions
  of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
  THE COPYRIGHT HOLDERS, AUTHORS ANDOR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,
  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  USE OR OTHER DEALINGS IN THE SOFTWARE.
 convert from number of pages to KB 
 convert from KB to number of pages 
  At this point we only support a single shrink callback.
  Extend this if needed, perhaps using a linked list of callbacks.
  Note that this function is reentrant:
  many threads may try to swap out at any given time.
	
	  No special dma32 zone needed.
	
	  Limit max dma32 memory to 4GB for now
	  until we can figure out how big this
	  zone really is.
 set it as 0 by default to keep original behavior of OOM 
  check if the available mem is under lower memory limit
  a. if no swap disk at all or free swap space is under swap_mem_limit
  but available system mem is bigger than sys_mem_limit, allow TTM
  allocation;
  b. if the available system mem is less than sys_mem_limit but free
  swap disk is bigger than swap_mem_limit, allow TTM allocation.
 We allow over commit during suspend 
	
	  Normal allocations of kernel memory are registered in
	  the kernel zone.
	
	  Page allocations may be registed in a single zone
	  only if highmem or !dma32.
 SPDX-License-Identifier: GPL-2.0 OR MIT
  Copyright © 2018-2019 VMware, Inc., Palo Alto, CA., USA
  All Rights Reserved.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sub license, andor sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:
  The above copyright notice and this permission notice (including the
  next paragraph) shall be included in all copies or substantial portions
  of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
  THE COPYRIGHT HOLDERS, AUTHORS ANDOR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,
  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  USE OR OTHER DEALINGS IN THE SOFTWARE.
  struct vmw_dx_streamoutput - Streamoutput resource metadata.
  @res: Base resource struct.
  @ctx: Non-refcounted context to which @res belong.
  @cotable: Refcounted cotable holding this Streamoutput.
  @cotable_head: List head for cotable-so_res list.
  @id: User-space provided identifier.
  @size: User-space provided mob size.
  @committed: Whether streamoutput is actually created or pending creation.
 Command buffer managed resource. 
  vmw_dx_streamoutput_unscrub - Reattach the MOB to streamoutput.
  @res: The streamoutput resource.
  Return: 0 on success, negative error code on failure.
  vmw_dx_streamoutput_scrub - Unbind the MOB from streamoutput.
  @res: The streamoutput resource.
  Return: 0 on success, negative error code on failure.
  vmw_dx_streamoutput_lookup - Do a streamoutput resource lookup by user key.
  @man: Command buffer managed resource manager for current context.
  @user_key: User-space identifier for lookup.
  Return: Valid refcounted vmw_resource on success, error pointer on failure.
 Destroyed by user-space cmd buf or as part of context takedown. 
  vmw_dx_streamoutput_add - Add a streamoutput as a cmd buf managed resource.
  @man: Command buffer managed resource manager for current context.
  @ctx: Pointer to context resource.
  @user_key: The identifier for this streamoutput.
  @list: The list of staged command buffer managed resources.
  Return: 0 on success, negative error code on failure.
  vmw_dx_streamoutput_set_size - Sets streamoutput mob size in res struct.
  @res: The streamoutput res for which need to set size.
  @size: The size provided by user-space to set.
  vmw_dx_streamoutput_remove - Stage streamoutput for removal.
  @man: Command buffer managed resource manager for current context.
  @user_key: The identifier for this streamoutput.
  @list: The list of staged command buffer managed resources.
  Return: 0 on success, negative error code on failure.
  vmw_dx_streamoutput_cotable_list_scrub - cotable unbind_func callback.
  @dev_priv: Device private.
  @list: The list of cotable resources.
  @readback: Whether the call was part of a readback unbind.
 SPDX-License-Identifier: GPL-2.0 OR MIT
  Copyright 2012-2015 VMware, Inc., Palo Alto, CA., USA
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sub license, andor sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:
  The above copyright notice and this permission notice (including the
  next paragraph) shall be included in all copies or substantial portions
  of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
  THE COPYRIGHT HOLDERS, AUTHORS ANDOR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,
  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  USE OR OTHER DEALINGS IN THE SOFTWARE.
  If we set up the screen target otable, screen objects stop working.
  struct vmw_mob - Structure containing page table and metadata for a
  Guest Memory OBject.
  @num_pages       Number of pages that make up the page table.
  @pt_level        The indirection level of the page table. 0-2.
  @pt_root_page    DMA address of the level 0 page of the page table.
  struct vmw_otable - Guest Memory OBject table metadata
  @size:           Size of the table (page-aligned).
  @page_table:     Pointer to a struct vmw_mob holding the page table.
  vmw_setup_otable_base - Issue an object table base setup command to
  the device
  @dev_priv:       Pointer to a device private structure
  @type:           Type of object table base
  @offset          Start of table offset into dev_priv::otable_bo
  @otable          Pointer to otable metadata;
  This function returns -ENOMEM if it fails to reserve fifo space,
  and may block waiting for fifo space.
	
	  The device doesn't support this, But the otable size is
	  determined at compile-time, so this BUG shouldn't trigger
	  randomly.
  vmw_takedown_otable_base - Issue an object table base takedown command
  to the device
  @dev_priv:       Pointer to a device private structure
  @type:           Type of object table base
  vmw_otables_setup - Set up guest backed memory object tables
  @dev_priv:       Pointer to a device private structure
  Takes care of the device guest backed surface
  initialization, by setting up the guest backed memory object tables.
  Returns 0 on success and various error codes on failure. A successful return
  means the object tables can be taken down using the vmw_otables_takedown
  function.
  vmw_otables_takedown - Take down guest backed memory object tables
  @dev_priv:       Pointer to a device private structure
  Take down the Guest Memory Object tables.
  vmw_mob_calculate_pt_pages - Calculate the number of page table pages
  needed for a guest backed memory object.
  @data_pages:  Number of data pages in the memory object buffer.
  vmw_mob_create - Create a mob, but don't populate it.
  @data_pages:  Number of data pages of the underlying buffer object.
  vmw_mob_pt_populate - Populate the mob pagetable
  @mob:         Pointer to the mob the pagetable of which we want to
                populate.
  This function allocates memory to be used for the pagetable, and
  adjusts TTM memory accounting accordingly. Returns ENOMEM if
  memory resources aren't sufficient and may cause TTM buffer objects
  to be swapped out by using the TTM memory accounting function.
  vmw_mob_assign_ppn - Assign a value to a page table entry
  @addr: Pointer to pointer to page table entry.
  @val: The page table entry
  Assigns a value to a page table entry pointed to by @addr and increments
  @addr according to the page table entry size.
  vmw_mob_build_pt - Build a pagetable
  @data_addr:      Array of DMA addresses to the underlying buffer
                   object's data pages.
  @num_data_pages: Number of buffer object data pages.
  @pt_pages:       Array of page pointers to the page table pages.
  Returns the number of page table pages actually used.
  Uses atomic kmaps of highmem pages to avoid TLB thrashing.
  vmw_mob_build_pt - Set up a multilevel mob pagetable
  @mob:            Pointer to a mob whose page table needs setting up.
  @data_addr       Array of DMA addresses to the buffer object's data
                   pages.
  @num_data_pages: Number of buffer object data pages.
  Uses tail recursion to set up a multilevel mob page table.
  vmw_mob_destroy - Destroy a mob, unpopulating first if necessary.
  @mob:            Pointer to a mob to destroy.
  vmw_mob_unbind - Hide a mob from the device.
  @dev_priv:       Pointer to a device private.
  @mob_id:         Device id of the mob to unbind.
		
		  Noone else should be using this buffer.
  vmw_mob_bind - Make a mob visible to the device after first
                 populating it if necessary.
  @dev_priv:       Pointer to a device private.
  @mob:            Pointer to the mob we're making visible.
  @data_addr:      Array of DMA addresses to the data pages of the underlying
                   buffer object.
  @num_data_pages: Number of data pages of the underlying buffer
                   object.
  @mob_id:         Device id of the mob to bind
  This function is intended to be interfaced with the ttm_tt backend
  code.
 SPDX-License-Identifier: GPL-2.0 OR MIT
  Copyright 2014-2015 VMware, Inc., Palo Alto, CA., USA
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sub license, andor sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:
  The above copyright notice and this permission notice (including the
  next paragraph) shall be included in all copies or substantial portions
  of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
  THE COPYRIGHT HOLDERS, AUTHORS ANDOR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,
  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  USE OR OTHER DEALINGS IN THE SOFTWARE.
  The currently only reason we need to keep track of views is that if we
  destroy a hardware surface, all views pointing to it must also be destroyed,
  otherwise the device will error.
  So in particular if a surface is evicted, we must destroy all views pointing
  to it, and all context bindings of that view. Similarly we must restore
  the view bindings, views and surfaces pointed to by the views when a
  context is referenced in the command stream.
  struct vmw_view - view metadata
  @rcu: RCU callback head
  @res: The struct vmw_resource we derive from
  @ctx: Non-refcounted pointer to the context this view belongs to.
  @srf: Refcounted pointer to the surface pointed to by this view.
  @cotable: Refcounted pointer to the cotable holding this view.
  @srf_head: List head for the surface-to-view list.
  @cotable_head: List head for the cotable-to_view list.
  @view_type: View type.
  @view_id: User-space per context view id. Currently used also as per
  context device view id.
  @cmd_size: Size of the SVGA3D define view command that we've copied from the
  command stream.
  @committed: Whether the view is actually created or pending creation at the
  device level.
  @cmd: The SVGA3D define view command copied from the command stream.
 Immutable 
 Immutable 
 Immutable 
 Protected by binding_mutex 
 Protected by binding_mutex 
 Immutable 
 Immutable 
 Immutable 
 Protected by binding_mutex 
 Immutable 
  struct vmw_view_define - view define command body stub
  @view_id: The device id of the view being defined
  @sid: The surface id of the view being defined
  This generic struct is used by the code to change @view_id and @sid of a
  saved view define command.
  vmw_view - Convert a struct vmw_resource to a struct vmw_view
  @res: Pointer to the resource to convert.
  Returns a pointer to a struct vmw_view.
  vmw_view_commit_notify - Notify that a view operation has been committed to
  hardware from a user-supplied command stream.
  @res: Pointer to the view resource.
  @state: Indicating whether a creation or removal has been committed.
  vmw_view_create - Create a hardware view.
  @res: Pointer to the view resource.
  Create a hardware view. Typically used if that view has previously been
  destroyed by an eviction operation.
 Sid may have changed due to surface eviction. 
  vmw_view_destroy - Destroy a hardware view.
  @res: Pointer to the view resource.
  Destroy a hardware view. Typically used on unexpected termination of the
  owning process or if the surface the view is pointing to is destroyed.
  vmw_hw_view_destroy - Destroy a hardware view as part of resource cleanup.
  @res: Pointer to the view resource.
  Destroy a hardware view if it's still present.
  vmw_view_key - Compute a view key suitable for the cmdbuf resource manager
  @user_key: The user-space id used for the view.
  @view_type: The view type.
  Destroy a hardware view if it's still present.
  vmw_view_id_ok - Basic view id and type range checks.
  @user_key: The user-space id used for the view.
  @view_type: The view type.
  Checks that the view id and type (typically provided by user-space) is
  valid.
  vmw_view_res_free - resource res_free callback for view resources
  @res: Pointer to a struct vmw_resource
  Frees memory and memory accounting held by a struct vmw_view.
  vmw_view_add - Create a view resource and stage it for addition
  as a command buffer managed resource.
  @man: Pointer to the compat shader manager identifying the shader namespace.
  @ctx: Pointer to a struct vmw_resource identifying the active context.
  @srf: Pointer to a struct vmw_resource identifying the surface the view
  points to.
  @view_type: The view type deduced from the view create command.
  @user_key: The key that is used to identify the shader. The key is
  unique to the view type and to the context.
  @cmd: Pointer to the view create command in the command stream.
  @cmd_size: Size of the view create command in the command stream.
  @list: Caller's list of staged command buffer resource actions.
  vmw_view_remove - Stage a view for removal.
  @man: Pointer to the view manager identifying the shader namespace.
  @user_key: The key that is used to identify the view. The key is
  unique to the view type.
  @view_type: View type
  @list: Caller's list of staged command buffer resource actions.
  @res_p: If the resource is in an already committed state, points to the
  struct vmw_resource on successful return. The pointer will be
  non ref-counted.
  vmw_view_cotable_list_destroy - Evict all views belonging to a cotable.
  @dev_priv: Pointer to a device private struct.
  @list: List of views belonging to a cotable.
  @readback: Unused. Needed for function interface only.
  This function evicts all views belonging to a cotable.
  It must be called with the binding_mutex held, and the caller must hold
  a reference to the view resource. This is typically called before the
  cotable is paged out.
  vmw_view_surface_list_destroy - Evict all views pointing to a surface
  @dev_priv: Pointer to a device private struct.
  @list: List of views pointing to a surface.
  This function evicts all views pointing to a surface. This is typically
  called before the surface is evicted.
  vmw_view_srf - Return a non-refcounted pointer to the surface a view is
  pointing to.
  @res: pointer to a view resource.
  Note that the view itself is holding a reference, so as long
  the view resource is alive, the surface resource will be.
  vmw_view_lookup - Look up a view.
  @man: The context's cmdbuf ref manager.
  @view_type: The view type.
  @user_key: The view user id.
  returns a refcounted pointer to a view or an error pointer if not found.
  vmw_view_dirtying - Return whether a view type is dirtying its resource
  @res: Pointer to the view
  Each time a resource is put on the validation list as the result of a
  view pointing to it, we need to determine whether that resource will
  be dirtied (written to by the GPU) as a result of the corresponding
  GPU operation. Currently only rendertarget-, depth-stencil and unordered
  access views are capable of dirtying its resource.
  Return: Whether the view type of @res dirties the resource it points to.
 Update this function as we add more view types 
 To remove unused function warning 
  This function is unused at run-time, and only used to dump various build
  asserts important for code optimization assumptions.
 Assert that our vmw_view_cmd_to_type() function is correct. 
 Assert that our "one body fits all" assumption is valid 
 Assert that the view key space can hold all view ids. 
	
	  Assert that the offset of sid in all view define commands
	  is what we assume it to be.
 SPDX-License-Identifier: GPL-2.0 OR MIT
  Copyright 2009-2011 VMware, Inc., Palo Alto, CA., USA
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sub license, andor sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:
  The above copyright notice and this permission notice (including the
  next paragraph) shall be included in all copies or substantial portions
  of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
  THE COPYRIGHT HOLDERS, AUTHORS ANDOR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,
  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  USE OR OTHER DEALINGS IN THE SOFTWARE.
 Use VM_PFNMAP rather than VM_MIXEDMAP if not a COW mapping 
 release extra ref taken by ttm_bo_mmap_obj() 
 struct vmw_validation_mem callback 
 struct vmw_validation_mem callback 
  vmw_validation_mem_init_ttm - Interface the validation memory tracker
  to ttm.
  @dev_priv: Pointer to struct vmw_private. The reason we choose a vmw private
  rather than a struct vmw_validation_mem is to make sure assumption in the
  callbacks that struct vmw_private derives from struct vmw_validation_mem
  holds true.
  @gran: The recommended allocation granularity
 SPDX-License-Identifier: GPL-2.0 OR MIT
  Copyright 2016 VMware, Inc., Palo Alto, CA., USA
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sub license, andor sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:
  The above copyright notice and this permission notice (including the
  next paragraph) shall be included in all copies or substantial portions
  of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
  THE COPYRIGHT HOLDERS, AUTHORS ANDOR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,
  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  USE OR OTHER DEALINGS IN THE SOFTWARE.
  struct vmw_user_simple_resource - User-space simple resource struct
  @base: The TTM base object implementing user-space visibility.
  @account_size: How much memory was accounted for this object.
  @simple: The embedded struct vmw_simple_resource.
  Nothing to be placed after @simple, since size of @simple is
  unknown.
  vmw_simple_resource_init - Initialize a simple resource object.
  @dev_priv: Pointer to a struct device private.
  @simple: The struct vmw_simple_resource to initialize.
  @data: Data passed to the information initialization function.
  @res_free: Function pointer to destroy the simple resource.
  Returns:
    0 if succeeded.
    Negative error value if error, in which case the resource will have been
  freed.
  vmw_simple_resource_free - Free a simple resource object.
  @res: The struct vmw_resource member of the simple resource object.
  Frees memory and memory accounting for the object.
  vmw_simple_resource_base_release - TTM object release callback
  @p_base: The struct ttm_base_object member of the simple resource object.
  Called when the last reference to the embedded struct ttm_base_object is
  gone. Typically results in an object free, unless there are other
  references to the embedded struct vmw_resource.
  vmw_simple_resource_create_ioctl - Helper to set up an ioctl function to
  create a struct vmw_simple_resource.
  @dev: Pointer to a struct drm device.
  @data: Ioctl argument.
  @file_priv: Pointer to a struct drm_file identifying the caller.
  @func: Pointer to a struct vmw_simple_resource_func identifying the
  simple resource type.
  Returns:
    0 if success,
    Negative error value on error.
	
	  From here on, the destructor takes over resource freeing.
  vmw_simple_resource_lookup - Look up a simple resource from its user-space
  handle.
  @tfile: struct ttm_object_file identifying the caller.
  @handle: The user-space handle.
  @func: The struct vmw_simple_resource_func identifying the simple resource
  type.
  Returns: Refcounted pointer to the embedded struct vmw_resource if
  successfule. Error pointer otherwise.
 SPDX-License-Identifier: GPL-2.0 OR MIT
  COPYRIGHT (C) 2014-2015 VMware, Inc., Palo Alto, CA., USA
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sub license, andor sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:
  The above copyright notice and this permission notice (including the
  next paragraph) shall be included in all copies or substantial portions
  of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
  THE COPYRIGHT HOLDERS, AUTHORS ANDOR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,
  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  USE OR OTHER DEALINGS IN THE SOFTWARE.
  struct vmw_stdu_dirty - closure structure for the update functions
  @base: The base type we derive from. Used by vmw_kms_helper_dirty().
  @transfer: Transfer direction for DMA command.
  @left: Left side of bounding box.
  @right: Right side of bounding box.
  @top: Top side of bounding box.
  @bottom: Bottom side of bounding box.
  @fb_left: Left side of the framebuffercontent bounding box
  @fb_top: Top of the framebuffercontent bounding box
  @pitch: framebuffer pitch (stride)
  @buf: buffer object when DMA-ing between buffer and screen targets.
  @sid: Surface ID when copying between surface and screen targets.
  SVGA commands that are used by this code. Please see the device headers
  for explanation.
  struct vmw_screen_target_display_unit
  @base: VMW specific DU structure
  @display_srf: surface to be displayed.  The dimension of this will always
                match the display mode.  If the display mode matches
                content_vfbs dimensions, then this is a pointer into the
                corresponding field in content_vfbs.  If not, then this
                is a separate buffer to which content_vfbs will blit to.
  @content_fb_type: content_fb type
  @display_width:  display width
  @display_height: display height
  @defined:     true if the current display unit has been initialized
  @cpp:         Bytes per pixel
 For CPU Blit 
  Screen Target Display Unit CRTC Functions
  vmw_stdu_crtc_destroy - cleans up the STDU
  @crtc: used to get a reference to the containing STDU
  vmw_stdu_define_st - Defines a Screen Target
  @dev_priv:  VMW DRM device
  @stdu: display unit to create a Screen Target for
  @mode: The mode to set.
  @crtc_x: X coordinate of screen target relative to framebuffer origin.
  @crtc_y: Y coordinate of screen target relative to framebuffer origin.
  Creates a STDU that we can used later.  This function is called whenever the
  framebuffer size changes.
  RETURNs:
  0 on success, error code on failure
  vmw_stdu_bind_st - Binds a surface to a Screen Target
  @dev_priv: VMW DRM device
  @stdu: display unit affected
  @res: Buffer to bind to the screen target.  Set to NULL to blank screen.
  Binding a surface to a Screen Target the same as flipping
 Set up image using information in vfb 
  vmw_stdu_populate_update - populate an UPDATE_GB_SCREENTARGET command with a
  bounding box.
  @cmd: Pointer to command stream.
  @unit: Screen target unit.
  @left: Left side of bounding box.
  @right: Right side of bounding box.
  @top: Top side of bounding box.
  @bottom: Bottom side of bounding box.
  vmw_stdu_update_st - Full update of a Screen Target
  @dev_priv: VMW DRM device
  @stdu: display unit affected
  This function needs to be called whenever the content of a screen
  target has changed completely. Typically as a result of a backing
  surface change.
  RETURNS:
  0 on success, error code on failure
  vmw_stdu_destroy_st - Destroy a Screen Target
  @dev_priv:  VMW DRM device
  @stdu: display unit to destroy
 Nothing to do if not successfully defined 
 Force sync 
  vmw_stdu_crtc_mode_set_nofb - Updates screen target size
  @crtc: CRTC associated with the screen target
  This function definesdestroys a screen target
  vmw_stdu_bo_clip - Callback to encode a suface DMA command cliprect
  @dirty: The closure structure.
  Encodes a surface DMA command cliprect and updates the bounding box
  for the DMA.
 Destination bounding box 
  vmw_stdu_bo_fifo_commit - Callback to fill in and submit a DMA command.
  @dirty: The closure structure.
  Fills in the missing fields in a DMA command, and optionally encodes
  a screen target update command, depending on transfer direction.
  vmw_stdu_bo_cpu_clip - Callback to encode a CPU blit
  @dirty: The closure structure.
  This function calculates the bounding box for all the incoming clips.
 Calculate destination bounding box 
	
	  Calculate content bounding box.  We only need the top-left
	  coordinate because width and height will be the same as the
	  destination bounding box above
  vmw_stdu_bo_cpu_commit - Callback to do a CPU blit from buffer object
  @dirty: The closure structure.
  For the special case when we cannot create a proxy surface in a
  2D VM, we have to do a CPU blit ourselves.
 Assume we are blitting from Guest (bo) to Host (display_srf) 
 Swap src and dst if the assumption was wrong. 
 We are updating the actual surface, not a proxy 
  vmw_kms_stdu_dma - Perform a DMA transfer between a buffer-object backed
  framebuffer and the screen target system.
  @dev_priv: Pointer to the device private structure.
  @file_priv: Pointer to a struct drm-file identifying the caller. May be
  set to NULL, but then @user_fence_rep must also be set to NULL.
  @vfb: Pointer to the buffer-object backed framebuffer.
  @user_fence_rep: User-space provided structure for fence information.
  @clips: Array of clip rects. Either @clips or @vclips must be NULL.
  @vclips: Alternate array of clip rects. Either @clips or @vclips must
  be NULL.
  @num_clips: Number of clip rects in @clips or @vclips.
  @increment: Increment to use when looping over @clips or @vclips.
  @to_surface: Whether to DMA to the screen target system as opposed to
  from the screen target system.
  @interruptible: Whether to perform waits interruptible if possible.
  @crtc: If crtc is passed, perform stdu dma on that crtc only.
  If DMA-ing till the screen target system, the function will also notify
  the screen target system that a bounding box of the cliprects has been
  updated.
  Returns 0 on success, negative error code on failure. -ERESTARTSYS if
  interrupted.
	
	  VMs without 3D support don't have the surface DMA command and
	  we'll be using a CPU blit, and the framebuffer should be moved out
	  of VRAM.
  vmw_kms_stdu_surface_clip - Callback to encode a surface copy command cliprect
  @dirty: The closure structure.
  Encodes a surface copy command cliprect and updates the bounding box
  for the copy.
 Destination bounding box 
  vmw_kms_stdu_surface_fifo_commit - Callback to fill in and submit a surface
  copy command.
  @dirty: The closure structure.
  Fills in the missing fields in a surface copy command, and encodes a screen
  target update command.
  vmw_kms_stdu_surface_dirty - Dirty part of a surface backed framebuffer
  @dev_priv: Pointer to the device private structure.
  @framebuffer: Pointer to the surface-buffer backed framebuffer.
  @clips: Array of clip rects. Either @clips or @vclips must be NULL.
  @vclips: Alternate array of clip rects. Either @clips or @vclips must
  be NULL.
  @srf: Pointer to surface to blit from. If NULL, the surface attached
  to @framebuffer will be used.
  @dest_x: X coordinate offset to align @srf with framebuffer coordinates.
  @dest_y: Y coordinate offset to align @srf with framebuffer coordinates.
  @num_clips: Number of clip rects in @clips.
  @inc: Increment to use when looping over @clips.
  @out_fence: If non-NULL, will return a ref-counted pointer to a
  struct vmw_fence_obj. The returned fence pointer may be NULL in which
  case the device has already synchronized.
  @crtc: If crtc is passed, perform surface dirty on that crtc only.
  Returns 0 on success, negative error code on failure. -ERESTARTSYS if
  interrupted.
   Screen Target CRTC dispatch table
  Screen Target Display Unit Encoder Functions
  vmw_stdu_encoder_destroy - cleans up the STDU
  @encoder: used the get the containing STDU
  vmwgfx cleans up crtcencoderconnector all at the same time so technically
  this can be a no-op.  Nevertheless, it doesn't hurt of have this in case
  the common KMS code changes and somehow vmw_stdu_crtc_destroy() doesn't
  get called.
  Screen Target Display Unit Connector Functions
  vmw_stdu_connector_destroy - cleans up the STDU
  @connector: used to get the containing STDU
  vmwgfx cleans up crtcencoderconnector all at the same time so technically
  this can be a no-op.  Nevertheless, it doesn't hurt of have this in case
  the common KMS code changes and somehow vmw_stdu_crtc_destroy() doesn't
  get called.
  Screen Target Display Plane Functions
  vmw_stdu_primary_plane_cleanup_fb - Unpins the display surface
  @plane:  display plane
  @old_state: Contains the FB to clean up
  Unpins the display surface
  Returns 0 on success
  vmw_stdu_primary_plane_prepare_fb - Readies the display surface
  @plane:  display plane
  @new_state: info on the new plane state, including the FB
  This function allocates a new display surface if the content is
  backed by a buffer object.  The display surface is pinned here, and it'll
  be unpinned in .cleanup_fb()
  Returns 0 on success
 No FB to prepare 
		
		  If content buffer is a buffer object, then we have to
		  construct surface info
		
		  prepare_fb and clean_fb should only take care of pinning
		  and unpinning.  References are tracked by state objects.
		  The only time we add a reference in prepare_fb is if the
		  state object doesn't have a reference to begin with
 Pin new surface before flipping 
	
	  This should only happen if the buffer object is too large to create a
	  proxy surface for.
	  If we are a 2D VM with a buffer object then we have to use CPU blit
	  so cache these mappings
  vmw_stdu_plane_update_bo - Update display unit for bo backed fb.
  @dev_priv: device private.
  @plane: plane state.
  @old_state: old plane state.
  @vfb: framebuffer which is blitted to display unit.
  @out_fence: If non-NULL, will return a ref-counted pointer to vmw_fence_obj.
              The returned fence pointer may be NULL in which case the device
              has already synchronized.
  Return: 0 on success or a negative error code on failure.
	
	  VM without 3D support don't have surface DMA command and framebuffer
	  should be moved out of VRAM.
	
	  proxy surface is special where a buffer object type fb is wrapped
	  in a surface and need an update gb image command to sync with device.
  vmw_stdu_plane_update_surface - Update display unit for surface backed fb
  @dev_priv: Device private
  @plane: Plane state
  @old_state: Old plane state
  @vfb: Framebuffer which is blitted to display unit
  @out_fence: If non-NULL, will return a ref-counted pointer to vmw_fence_obj.
              The returned fence pointer may be NULL in which case the device
              has already synchronized.
  Return: 0 on success or a negative error code on failure.
  vmw_stdu_primary_plane_atomic_update - formally switches STDU to new plane
  @plane: display plane
  @state: Only used to get crtc info
  Formally update stdu->display_srf to the new plane, and bind the new
  plane STDU.  This function is called during the commit phase when
  all the preparation have been done and all the configurations have
  been checked.
 If case of device error, maintain consistent atomic state 
 Blank STDU when fb and crtc are NULL 
 In case of error, vblank event is send in vmw_du_crtc_atomic_flush 
  Atomic Helpers
  vmw_stdu_init - Sets up a Screen Target Display Unit
  @dev_priv: VMW DRM device
  @unit: unit number range from 0 to VMWGFX_NUM_DISPLAY_UNITS
  This function is called once per CRTC, and allocates one Screen Target
  display unit to represent that CRTC.  Since the SVGA device does not separate
  out encoder and connector, they are represented as part of the STDU as well.
 Initialize primary plane 
 Initialize cursor plane 
   vmw_stdu_destroy - Cleans up a vmw_screen_target_display_unit
   @stdu:  Screen Target Display Unit to be destroyed
   Clean up after vmw_stdu_init
  Screen Target Display KMS Functions
  These functions are called by the common KMS code in vmwgfx_kms.c
  vmw_kms_stdu_init_display - Initializes a Screen Target based display
  @dev_priv: VMW DRM device
  This function initialize a Screen Target based display device.  It checks
  the capability bits to make sure the underlying hardware can support
  screen targets, and then creates the maximum number of CRTCs, a.k.a Display
  Units, as supported by the display hardware.
  RETURNS:
  0 on success, error code otherwise
 Do nothing if Screen Target support is turned off 
 SPDX-License-Identifier: GPL-2.0 OR MIT
  Huge page-table-entry support for IO memory.
  Copyright (C) 2007-2019 Vmware, Inc. All rights reservedd.
  struct vmw_thp_manager - Range manager implementing huge page alignment
  @manager: TTM resource manager.
  @mm: The underlying range manager. Protected by @lock.
  @lock: Manager lock.
 SPDX-License-Identifier: GPL-2.0 OR MIT
  Copyright 2016 VMware, Inc., Palo Alto, CA., USA
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sub license, andor sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:
  The above copyright notice and this permission notice (including the
  next paragraph) shall be included in all copies or substantial portions
  of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
  THE COPYRIGHT HOLDERS, AUTHORS ANDOR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,
  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  USE OR OTHER DEALINGS IN THE SOFTWARE.
  vmw_open_channel
  @channel: RPC channel
  @protocol:
  Returns: 0 on success
  vmw_close_channel
  @channel: RPC channel
  Returns: 0 on success
 Set up additional parameters 
  vmw_port_hb_out - Send the message payload either through the
  high-bandwidth port if available, or through the backdoor otherwise.
  @channel: The rpc channel.
  @msg: NULL-terminated message.
  @hb: Whether the high-bandwidth port is available.
  Return: The port status.
 HB port can't access encrypted memory. 
 HB port not available. Send the message 4 bytes at a time. 
  vmw_port_hb_in - Receive the message payload either through the
  high-bandwidth port if available, or through the backdoor otherwise.
  @channel: The rpc channel.
  @reply: Pointer to buffer holding reply.
  @reply_len: Length of the reply.
  @hb: Whether the high-bandwidth port is available.
  Return: The port status.
 HB port can't access encrypted memory 
 HB port not available. Retrieve the message 4 bytes at a time. 
  vmw_send_msg: Sends a message to the host
  @channel: RPC channel
  @msg: NULL terminated string
  Returns: 0 on success
 Set up additional parameters 
 Expected success. Give up. 
 Send msg 
 A checkpoint occurred. Retry. 
  vmw_recv_msg: Receives a message from the host
  Note:  It is the caller's responsibility to call kfree() on msg.
  @channel:  channel opened by vmw_open_channel
  @msg:  [OUT] message received from the host
  @msg_len: message length
 Set up additional parameters 
 No reply available.  This is okay. 
 Receive buffer 
 A checkpoint occurred. Retry. 
 Ack buffer 
 A checkpoint occurred. Retry. 
  vmw_host_get_guestinfo: Gets a GuestInfo parameter
  Gets the value of a  GuestInfo. parameter.  The value returned will be in
  a string, and it is up to the caller to post-process.
  @guest_info_param:  Parameter to get, e.g. GuestInfo.svga.gl3
  @buffer: if NULL, reply_len will contain reply size.
  @length: size of the reply_buf.  Set to size of reply upon return
  Returns: 0 on success
		 Remove reply code, which are the first 2 characters of
		  the reply
  vmw_host_printf: Sends a log message to the host
  @fmt: Regular printf format string and arguments
  Returns: 0 on success
  vmw_msg_ioctl: Sends and receveives a message tofrom host fromto user-space
  Sends a message from user-space to host.
  Can also receive a result from host and return that to user-space.
  @dev: Identifies the drm device.
  @data: Pointer to the ioctl argument.
  @file_priv: Identifies the caller.
  Return: Zero on success, negative error code on error.
  reset_ppn_array: Resets a PPN64 array to INVALID_PPN64 content
  @arr: Array to reset.
  @size: Array length.
  hypervisor_ppn_reset_all: Removes all mksGuestStat instance descriptors from
  the hypervisor. All related pages should be subsequently unpinned or freed.
  hypervisor_ppn_add: Adds a single mksGuestStat instance descriptor to the
  hypervisor. Any related userspace pages should be pinned in advance.
  @pfn: Physical page number of the instance descriptor
  hypervisor_ppn_remove: Removes a single mksGuestStat instance descriptor from
  the hypervisor. All related pages should be subsequently unpinned or freed.
  @pfn: Physical page number of the instance descriptor
 Order of the total number of pages used for kernel-internal mksGuestStat; at least 2 
 Header to the text description of mksGuestStat instance descriptor 
 Kernel mksGuestStats counter names and desciptions; same order as enum mksstat_kern_stats_t 
  mksstat_init_record: Initializes an MKSGuestStatCounter-based record
  for the respective mksGuestStat index.
  @stat_idx: Index of the MKSGuestStatCounter-based mksGuestStat record.
  @pstat: Pointer to array of MKSGuestStatCounterTime.
  @pinfo: Pointer to array of MKSGuestStatInfoEntry.
  @pstrs: Pointer to current end of the namedescription sequence.
  Return: Pointer to the new end of the namesdescription sequence.
  mksstat_init_record_time: Initializes an MKSGuestStatCounterTime-based record
  for the respective mksGuestStat index.
  @stat_idx: Index of the MKSGuestStatCounterTime-based mksGuestStat record.
  @pstat: Pointer to array of MKSGuestStatCounterTime.
  @pinfo: Pointer to array of MKSGuestStatInfoEntry.
  @pstrs: Pointer to current end of the namedescription sequence.
  Return: Pointer to the new end of the namesdescription sequence.
  mksstat_init_kern_id: Creates a single mksGuestStat instance descriptor and
  kernel-internal counters. Adds PFN mapping to the hypervisor.
  Create a single mksGuestStat instance descriptor and corresponding structures
  for all kernel-internal counters. The corresponding PFNs are mapped with the
  hypervisor.
  @ppage: Output pointer to page containing the instance descriptor.
  Return: Zero on success, negative error code on error.
 Allocate pages for the kernel-internal instance descriptor 
 Set up all kernel-internal counters and corresponding structures 
 Add new counters above, in their order of appearance in mksstat_kern_stats_t 
 Set up the kernel-internal instance descriptor 
  vmw_mksstat_get_kern_slot: Acquires a slot for a single kernel-internal
  mksGuestStat instance descriptor.
  Find a slot for a single kernel-internal mksGuestStat instance descriptor.
  In case no such was already present, allocate a new one and set up a kernel-
  internal mksGuestStat instance descriptor for the former.
  @pid: Process for which a slot is sought.
  @dev_priv: Identifies the drm private device.
  Return: Non-negative slot on success, negative error code on error.
 Check if an instance descriptor for this pid is already present 
 Set up a new instance descriptor for this pid 
 Reset top-timer tracking for this slot 
  vmw_mksstat_cleanup_descriptor: Frees a single userspace-originating
  mksGuestStat instance-descriptor page and unpins all related user pages.
  Unpin all user pages realated to this instance descriptor and free
  the instance-descriptor page itself.
  @page: Page of the instance descriptor.
  vmw_mksstat_remove_all: Resets all mksGuestStat instance descriptors
  from the hypervisor.
  Discard all hypervisor PFN mappings, containing active mksGuestState instance
  descriptors, unpin the related userspace pages and free the related kernel pages.
  @dev_priv: Identifies the drm private device.
  Return: Zero on success, negative error code on error.
 Discard all PFN mappings with the hypervisor 
 Discard all userspace-originating instance descriptors and unpin all related pages 
 Discard all kernel-internal instance descriptors and free all related pages 
  vmw_mksstat_reset_ioctl: Resets all mksGuestStat instance descriptors
  from the hypervisor.
  Discard all hypervisor PFN mappings, containing active mksGuestStat instance
  descriptors, unpin the related userspace pages and free the related kernel pages.
  @dev: Identifies the drm device.
  @data: Pointer to the ioctl argument.
  @file_priv: Identifies the caller; unused.
  Return: Zero on success, negative error code on error.
  vmw_mksstat_add_ioctl: Creates a single userspace-originating mksGuestStat
  instance descriptor and registers that with the hypervisor.
  Create a hypervisor PFN mapping, containing a single mksGuestStat instance
  descriptor and pin the corresponding userspace pages.
  @dev: Identifies the drm device.
  @data: Pointer to the ioctl argument.
  @file_priv: Identifies the caller; unused.
  Return: Zero on success, negative error code on error.
 Find an available slot in the mksGuestStats user array and reserve it 
 Allocate a page for the instance descriptor 
 Set up the instance descriptor 
 Pin mksGuestStat user pages and store those in the instance descriptor 
	 Send the descriptor to the host via a hypervisor call. The mksGuestStat
	   pages will remain in use until the user requests a matching remove stats
  vmw_mksstat_remove_ioctl: Removes a single userspace-originating mksGuestStat
  instance descriptor from the hypervisor.
  Discard a hypervisor PFN mapping, containing a single mksGuestStat instance
  descriptor and unpin the corresponding userspace pages.
  @dev: Identifies the drm device.
  @data: Pointer to the ioctl argument.
  @file_priv: Identifies the caller; unused.
  Return: Zero on success, negative error code on error.
 SPDX-License-Identifier: GPL-2.0 OR MIT
  Copyright 2007-2010 VMware, Inc., Palo Alto, CA., USA
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sub license, andor sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:
  The above copyright notice and this permission notice (including the
  next paragraph) shall be included in all copies or substantial portions
  of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
  THE COPYRIGHT HOLDERS, AUTHORS ANDOR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,
  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  USE OR OTHER DEALINGS IN THE SOFTWARE.
  Authors: Thomas Hellstrom <thellstrom-at-vmware-dot-com>
		
		  Because the graphics memory is a soft limit we can try to
		  expand it instead of letting the userspace apps crash.
		  We're just going to have a sane limit (half of RAM)
		  on the number of MOB's that we create and will try to keep
		  the system running until we reach that.
 TODO: This is most likely not correct 
 SPDX-License-Identifier: GPL-2.0 OR MIT
  Copyright 2009-2015 VMware, Inc., Palo Alto, CA., USA
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sub license, andor sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:
  The above copyright notice and this permission notice (including the
  next paragraph) shall be included in all copies or substantial portions
  of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
  THE COPYRIGHT HOLDERS, AUTHORS ANDOR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,
  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  USE OR OTHER DEALINGS IN THE SOFTWARE.
  Display unit using the legacy register interface.
  Legacy Display Unit CRTC functions
	 If there is no display topology the host just assumes
	  that the guest will set the same layout as the host.
 Make sure we always show something. 
 Must init otherwise list_empty(&ldu->active) will not work. 
  vmw_ldu_crtc_mode_set_nofb - Enable svga
  @crtc: CRTC associated with the new screen
  For LDU, just enable the svga
  vmw_ldu_crtc_atomic_enable - Noop
  @crtc: CRTC associated with the new screen
  @state: Unused
  This is called after a mode set has been completed.  Here's
  usually a good place to call vmw_ldu_add_activevmw_ldu_del_active
  but since for LDU the display plane is closely tied to the
  CRTC, it makes more sense to do those at plane update time.
  vmw_ldu_crtc_atomic_disable - Turns off CRTC
  @crtc: CRTC to be turned off
  @state: Unused
  Legacy Display Unit encoder functions
  Legacy Display Unit connector functions
  Legacy Display Plane Functions
  Atomic Helpers
	
	  Remove this after enabling atomic because property values can
	  only exist in a state object
 Initialize primary plane 
	
	  We're going to be using traces and software cursors
 Initialize cursor plane 
 for old hardware without multimon only enable one display 
 SPDX-License-Identifier: GPL-2.0 OR MIT
  Copyright 2009-2015 VMware, Inc., Palo Alto, CA., USA
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sub license, andor sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:
  The above copyright notice and this permission notice (including the
  next paragraph) shall be included in all copies or substantial portions
  of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
  THE COPYRIGHT HOLDERS, AUTHORS ANDOR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,
  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	  The destroy callback is only called with a committed resource on
	  context destroy, in which case we destroy the cotable anyway,
	  so there's no need to destroy DX shaders separately.
  Shader management:
  vmw_res_to_dx_shader - typecast a struct vmw_resource to a
  struct vmw_dx_shader
  @res: Pointer to the struct vmw_resource.
  GB shader code:
	
	  Create a fence object and fence the backup buffer.
  DX shader code:
  vmw_dx_shader_commit_notify - Notify that a shader operation has been
  committed to hardware from a user-supplied command stream.
  @res: Pointer to the shader resource.
  @state: Indicating whether a creation or removal has been committed.
  vmw_dx_shader_unscrub - Have the device reattach a MOB to a DX shader.
  @res: The shader resource
  This function reverts a scrub operation.
  vmw_dx_shader_create - The DX shader create callback
  @res: The DX shader resource
  The create callback is called as part of resource validation and
  makes sure that we unscrub the shader if it's previously been scrubbed.
  vmw_dx_shader_bind - The DX shader bind callback
  @res: The DX shader resource
  @val_buf: Pointer to the validate buffer.
  vmw_dx_shader_scrub - Have the device unbind a MOB from a DX shader.
  @res: The shader resource
  This function unbinds a MOB from the DX shader without requiring the
  MOB dma_buffer to be reserved. The driver still considers the MOB bound.
  However, once the driver eventually decides to unbind the MOB, it doesn't
  need to access the context.
  vmw_dx_shader_unbind - The dx shader unbind callback.
  @res: The shader resource
  @readback: Whether this is a readback unbind. Currently unused.
  @val_buf: MOB buffer information.
  vmw_dx_shader_cotable_list_scrub - The cotable unbind_func callback for
  DX shaders.
  @dev_priv: Pointer to device private structure.
  @list: The list of cotable resources.
  @readback: Whether the call was part of a readback unbind.
  Scrubs all shader MOBs so that any subsequent shader unbind or shader
  destroy operation won't need to swap in the context.
  vmw_dx_shader_res_free - The DX shader free callback
  @res: The shader resource
  Frees the DX shader resource and updates memory accounting.
  vmw_dx_shader_add - Add a shader resource as a command buffer managed
  resource.
  @man: The command buffer resource manager.
  @ctx: Pointer to the context resource.
  @user_key: The id used for this shader.
  @shader_type: The shader type.
  @list: The list of staged command buffer managed resources.
	
	  The user_key name-space is not per shader type for DX shaders,
	  so when hashing, use a single zero shader type.
  User-space shader management:
  This function is called when user space has no more references on the
  base object. It releases the base-object's reference on the resource object.
	
	  From here on, the destructor takes over resource freeing.
	
	  From here on, the destructor takes over resource freeing.
  vmw_shader_id_ok - Check whether a compat shader user key and
  shader type are within valid bounds.
  @user_key: User space id of the shader.
  @shader_type: Shader type.
  Returns true if valid false if not.
  vmw_shader_key - Compute a hash key suitable for a compat shader.
  @user_key: User space id of the shader.
  @shader_type: Shader type.
  Returns a hash key suitable for a command buffer managed resource
  manager hash table.
  vmw_shader_remove - Stage a compat shader for removal.
  @man: Pointer to the compat shader manager identifying the shader namespace.
  @user_key: The key that is used to identify the shader. The key is
  unique to the shader type.
  @shader_type: Shader type.
  @list: Caller's list of staged command buffer resource actions.
  vmw_compat_shader_add - Create a compat shader and stage it for addition
  as a command buffer managed resource.
  @dev_priv: Pointer to device private structure.
  @man: Pointer to the compat shader manager identifying the shader namespace.
  @user_key: The key that is used to identify the shader. The key is
  unique to the shader type.
  @bytecode: Pointer to the bytecode of the shader.
  @shader_type: Shader type.
  @size: Command size.
  @list: Caller's list of staged command buffer resource actions.
 Allocate and pin a DMA buffer 
 Map and copy shader bytecode. 
  vmw_shader_lookup - Look up a compat shader
  @man: Pointer to the command buffer managed resource manager identifying
  the shader namespace.
  @user_key: The user space id of the shader.
  @shader_type: The shader type.
  Returns a refcounted pointer to a struct vmw_resource if the shader was
  found. An error pointer otherwise.
 SPDX-License-Identifier: GPL-2.0 OR MIT
  Copyright 2009-2014 VMware, Inc., Palo Alto, CA., USA
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sub license, andor sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:
  The above copyright notice and this permission notice (including the
  next paragraph) shall be included in all copies or substantial portions
  of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
  THE COPYRIGHT HOLDERS, AUTHORS ANDOR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,
  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  USE OR OTHER DEALINGS IN THE SOFTWARE.
  Overlay control
	
	  Each stream is a single overlay. In Xv these are called ports.
  Send put command to hw.
  Returns
  -ERESTARTSYS if interrupted by a signal.
 defines are a index needs + 1 
 hardware has hung, can't do anything here 
 the size is header + number of items 
 the IDs are neatly numbered 
  Send stop command to hw.
  Returns
  -ERESTARTSYS if interrupted by a signal.
  Move a buffer to vram or gmr if @pin is set, else unpin the buffer.
  With the introduction of screen objects buffers could now be
  used with GMRs instead of being locked to vram.
  Stop or pause a stream.
  If the stream is paused the no evict flag is removed from the buffer
  but left in vram. This allows for instance mode_set to evict it
  should it need to.
  The caller must hold the overlay lock.
  @stream_id which stream to stoppause.
  @pause true to pause, false to stop completely.
 no buffer attached the stream is completely stopped 
 If the stream is paused this is already done 
 We just remove the NO_EVICT flag so no -ENOMEM 
  Update a stream and send any put or stop fifo commands needed.
  The caller must hold the overlay lock.
  Returns
  -ENOMEM if buffer doesn't fit in vram.
  -ERESTARTSYS if interrupted.
		 If the buffers match and not paused then just send
		  the put command, no need to do anything else.
	 We don't start the old stream if we are interrupted.
	  Might return -ENOMEM if it can't fit the buffer in vram.
		 This one needs to happen no matter what. We only remove
		  the NO_EVICT flag so this is safe from -ENOMEM.
 stream is no longer stoppedpaused 
  Try to resume all paused streams.
  Used by the kms code after moving a new scanout buffer to vram.
  Takes the overlay lock.
  Pauses all active streams.
  Used by the kms code when moving a new scanout buffer to vram.
  Takes the overlay lock.
 SPDX-License-Identifier: GPL-2.0 OR MIT
  Copyright 2009-2015 VMware, Inc., Palo Alto, CA., USA
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sub license, andor sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:
  The above copyright notice and this permission notice (including the
  next paragraph) shall be included in all copies or substantial portions
  of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
  THE COPYRIGHT HOLDERS, AUTHORS ANDOR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,
  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  USE OR OTHER DEALINGS IN THE SOFTWARE.
  vmw_resource_mob_attach - Mark a resource as attached to its backing mob
  @res: The resource
  vmw_resource_mob_detach - Mark a resource as detached from its backing mob
  @res: The resource
  vmw_resource_release_id - release a resource id to the id manager.
  @res: Pointer to the resource.
  Release the resource id to the resource id manager and set it to -1
  vmw_resource_alloc_id - release a resource id to the id manager.
  @res: Pointer to the resource.
  Allocate the lowest free resource from the resource manager, and set
  @res->id to that id. Returns 0 on success and -ENOMEM on failure.
  vmw_resource_init - initialize a struct vmw_resource
  @dev_priv:       Pointer to a device private struct.
  @res:            The struct vmw_resource to initialize.
  @delay_id:       Boolean whether to defer device id allocation until
                   the first validation.
  @res_free:       Resource destructor.
  @func:           Resource function table.
  vmw_user_resource_lookup_handle - lookup a struct resource from a
  TTM user-space handle and perform basic type checks
  @dev_priv:     Pointer to a device private struct
  @tfile:        Pointer to a struct ttm_object_file identifying the caller
  @handle:       The TTM user-space handle
  @converter:    Pointer to an object describing the resource type
  @p_res:        On successful return the location pointed to will contain
                 a pointer to a refcounted struct vmw_resource.
  If the handle can't be found or is associated with an incorrect resource
  type, -EINVAL will be returned.
  vmw_user_resource_noref_lookup_handle - lookup a struct resource from a
  TTM user-space handle and perform basic type checks
  @dev_priv:     Pointer to a device private struct
  @tfile:        Pointer to a struct ttm_object_file identifying the caller
  @handle:       The TTM user-space handle
  @converter:    Pointer to an object describing the resource type
  If the handle can't be found or is associated with an incorrect resource
  type, -EINVAL will be returned.
  Helper function that looks either a surface or bo.
  The pointer this pointed at by out_surf and out_buf needs to be null.
  vmw_resource_buf_alloc - Allocate a backup buffer for a resource.
  @res:            The resource for which to allocate a backup buffer.
  @interruptible:  Whether any sleeps during allocation should be
                   performed while interruptible.
  vmw_resource_do_validate - Make a resource up-to-date and visible
                             to the device.
  @res:            The resource to make visible to the device.
  @val_buf:        Information about a buffer possibly
                   containing backup data if a bind operation is needed.
  @dirtying:       Transfer dirty regions.
  On hardware resource shortage, this function returns -EBUSY and
  should be retried once resources have been freed up.
	
	  Handle the case where the backup mob is marked coherent but
	  the resource isn't.
	
	  Transfer the dirty regions to the resource and update
	  the resource.
  vmw_resource_unreserve - Unreserve a resource previously reserved for
  command submission.
  @res:               Pointer to the struct vmw_resource to unreserve.
  @dirty_set:         Change dirty status of the resource.
  @dirty:             When changing dirty status indicates the new status.
  @switch_backup:     Backup buffer has been switched.
  @new_backup:        Pointer to new backup buffer if command submission
                      switched. May be NULL.
  @new_backup_offset: New backup offset if @switch_backup is true.
  Currently unreserving a resource means putting it back on the device's
  resource lru list, so that it can be evicted if necessary.
			
			  The validation code should already have added a
			  dirty tracker here.
  vmw_resource_check_buffer - Check whether a backup buffer is needed
                              for a resource and in that case, allocate
                              one, reserve and validate it.
  @ticket:         The ww aqcquire context to use, or NULL if trylocking.
  @res:            The resource for which to allocate a backup buffer.
  @interruptible:  Whether any sleeps during allocation should be
                   performed while interruptible.
  @val_buf:        On successful return contains data about the
                   reserved and validated backup buffer.
  vmw_resource_reserve - Reserve a resource for command submission
  @res:            The resource to reserve.
  This function takes the resource off the LRU list and make sure
  a backup buffer is present for guest-backed resources. However,
  the buffer may not be bound to the resource at this point.
  vmw_resource_backoff_reservation - Unreserve and unreference a
                                     backup buffer
 .
  @ticket:         The ww acquire ctx used for reservation.
  @val_buf:        Backup buffer information.
  vmw_resource_do_evict - Evict a resource, and transfer its data
                          to a backup buffer.
  @ticket:         The ww acquire ticket to use, or NULL if trylocking.
  @res:            The resource to evict.
  @interruptible:  Whether to wait interruptible.
  vmw_resource_validate - Make a resource up-to-date and visible
                          to the device.
  @res: The resource to make visible to the device.
  @intr: Perform waits interruptible if possible.
  @dirtying: Pending GPU operation will dirty the resource
  On succesful return, any backup DMA buffer pointed to by @res->backup will
  be reserved and validated.
  On hardware resource shortage, this function will repeatedly evict
  resources of the same type until the validation succeeds.
  Return: Zero on success, -ERESTARTSYS if interrupted, negative error code
  on failure.
 Trylock backup buffers with a NULL ticket. 
  vmw_resource_unbind_list
  @vbo: Pointer to the current backing MOB.
  Evicts the Guest Backed hardware resource if the backup
  buffer is being moved out of MOB memory.
  Note that this function will not race with the resource
  validation code, since resource validation and eviction
  both require the backup buffer to be reserved.
  vmw_query_readback_all - Read back cached query states
  @dx_query_mob: Buffer containing the DX query MOB
  Read back cached states from the device if they exist.  This function
  assumings binding_mutex is held.
 No query bound, so do nothing 
 Triggers a rebind the next time affected context is bound 
  vmw_query_move_notify - Read back cached query states
  @bo: The TTM buffer object about to move.
  @old_mem: The memory region @bo is moving from.
  @new_mem: The memory region @bo is moving to.
  Called before the query MOB is swapped out to read back cached query
  states from the device.
 If BO is being moved from MOB to system memory 
 Create a fence and attach the BO to it 
  vmw_resource_needs_backup - Return whether a resource needs a backup buffer.
  @res:            The resource being queried.
  vmw_resource_evict_type - Evict all resources of a specific type
  @dev_priv:       Pointer to a device private struct
  @type:           The resource type to evict
  To avoid thrashing starvation or as part of the hibernation sequence,
  try to evict all evictable resources of a specific type.
 Wait lock backup buffers with a ticket. 
  vmw_resource_evict_all - Evict all evictable resources
  @dev_priv:       Pointer to a device private struct
  To avoid thrashing starvation or as part of the hibernation sequence,
  evict all evictable resources. In particular this means that all
  guest-backed resources that are registered with the device are
  evicted and the OTable becomes clean.
  vmw_resource_pin - Add a pin reference on a resource
  @res: The resource to add a pin reference on
  This function adds a pin reference, and if needed validates the resource.
  Having a pin reference means that the resource can never be evicted, and
  its id will never change as long as there is a pin reference.
  This function returns 0 on success and a negative error code on failure.
 Do we really need to pin the MOB as well? 
  vmw_resource_unpin - Remove a pin reference from a resource
  @res: The resource to remove a pin reference from
  Having a pin reference means that the resource can never be evicted, and
  its id will never change as long as there is a pin reference.
  vmw_res_type - Return the resource type
  @res: Pointer to the resource
  vmw_resource_dirty_update - Update a resource's dirty tracker with a
  sequential range of touched backing store memory.
  @res: The resource.
  @start: The first page touched.
  @end: The last page touched + 1.
  vmw_resources_clean - Clean resources intersecting a mob range
  @vbo: The mob buffer object
  @start: The mob page offset starting the range
  @end: The mob page offset ending the range
  @num_prefault: Returns how many pages including the first have been
  cleaned and are ok to prefault
	
	  Find the resource with lowest backup_offset that intersects the
	  range.
 Continue to look for resources with lower offsets 
	
	  In order of increasing backup_offset, clean dirty resorces
	  intersecting the range.
	
	  Set number of pages allowed prefaulting and fence the buffer object
 SPDX-License-Identifier: GPL-2.0 OR MIT
  Copyright 2009-2015 VMware, Inc., Palo Alto, CA., USA
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sub license, andor sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:
  The above copyright notice and this permission notice (including the
  next paragraph) shall be included in all copies or substantial portions
  of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
  THE COPYRIGHT HOLDERS, AUTHORS ANDOR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,
  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  USE OR OTHER DEALINGS IN THE SOFTWARE.
 vmw_user_surface_lookup takes one ref so does new_fb 
 SPDX-License-Identifier: GPL-2.0 OR MIT
  Copyright 2009-2015 VMware, Inc., Palo Alto, CA., USA
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sub license, andor sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:
  The above copyright notice and this permission notice (including the
  next paragraph) shall be included in all copies or substantial portions
  of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
  THE COPYRIGHT HOLDERS, AUTHORS ANDOR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,
  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  USE OR OTHER DEALINGS IN THE SOFTWARE.
 A future safe maximum remap size. 
	
	  Need to split the command if there are too many
	  pages that goes into the gmr.
 SPDX-License-Identifier: GPL-2.0 OR MIT
  Copyright © 2011-2018 VMware, Inc., Palo Alto, CA., USA
  All Rights Reserved.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sub license, andor sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:
  The above copyright notice and this permission notice (including the
  next paragraph) shall be included in all copies or substantial portions
  of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
  THE COPYRIGHT HOLDERS, AUTHORS ANDOR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,
  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  USE OR OTHER DEALINGS IN THE SOFTWARE.
  struct vmw_user_buffer_object - User-space-visible buffer object
  @prime: The prime object providing user visibility.
  @vbo: The struct vmw_buffer_object
  vmw_buffer_object - Convert a struct ttm_buffer_object to a struct
  vmw_buffer_object.
  @bo: Pointer to the TTM buffer object.
  Return: Pointer to the struct vmw_buffer_object embedding the
  TTM buffer object.
  vmw_user_buffer_object - Convert a struct ttm_buffer_object to a struct
  vmw_user_buffer_object.
  @bo: Pointer to the TTM buffer object.
  Return: Pointer to the struct vmw_buffer_object embedding the TTM buffer
  object.
  vmw_bo_pin_in_placement - Validate a buffer to placement.
  @dev_priv:  Driver private.
  @buf:  DMA buffer to move.
  @placement:  The placement to pin it.
  @interruptible:  Use interruptible wait.
  Return: Zero on success, Negative error code on failure. In particular
  -ERESTARTSYS if interrupted by a signal
  vmw_bo_pin_in_vram_or_gmr - Move a buffer to vram or gmr.
  This function takes the reservation_sem in write mode.
  Flushes and unpins the query bo to avoid failures.
  @dev_priv:  Driver private.
  @buf:  DMA buffer to move.
  @interruptible:  Use interruptible wait.
  Return: Zero on success, Negative error code on failure. In particular
  -ERESTARTSYS if interrupted by a signal
  vmw_bo_pin_in_vram - Move a buffer to vram.
  This function takes the reservation_sem in write mode.
  Flushes and unpins the query bo to avoid failures.
  @dev_priv:  Driver private.
  @buf:  DMA buffer to move.
  @interruptible:  Use interruptible wait.
  Return: Zero on success, Negative error code on failure. In particular
  -ERESTARTSYS if interrupted by a signal
  vmw_bo_pin_in_start_of_vram - Move a buffer to start of vram.
  This function takes the reservation_sem in write mode.
  Flushes and unpins the query bo to avoid failures.
  @dev_priv:  Driver private.
  @buf:  DMA buffer to pin.
  @interruptible:  Use interruptible wait.
  Return: Zero on success, Negative error code on failure. In particular
  -ERESTARTSYS if interrupted by a signal
	
	  Is this buffer already in vram but not at the start of it?
	  In that case, evict it first because TTM isn't good at handling
	  that situation.
 For some reason we didn't end up at the start of vram 
  vmw_bo_unpin - Unpin the buffer given buffer, does not move the buffer.
  This function takes the reservation_sem in write mode.
  @dev_priv:  Driver private.
  @buf:  DMA buffer to unpin.
  @interruptible:  Use interruptible wait.
  Return: Zero on success, Negative error code on failure. In particular
  -ERESTARTSYS if interrupted by a signal
  vmw_bo_get_guest_ptr - Get the guest ptr representing the current placement
  of a buffer.
  @bo: Pointer to a struct ttm_buffer_object. Must be pinned or reserved.
  @ptr: SVGAGuestPtr returning the result.
  vmw_bo_pin_reserved - Pin or unpin a buffer object without moving it.
  @vbo: The buffer object. Must be reserved.
  @pin: Whether to pin or unpin.
  vmw_bo_map_and_cache - Map a buffer object and cache the map
  @vbo: The buffer object to map
  Return: A kernel virtual address or NULL if mapping failed.
  This function maps a buffer object into the kernel address space, or
  returns the virtual kernel address of an already existing map. The virtual
  address remains valid as long as the buffer object is pinned or reserved.
  The cached map is torn down on either
  1) Buffer object move
  2) Buffer object swapout
  3) Buffer object destruction
  vmw_bo_unmap - Tear down a cached buffer object map.
  @vbo: The buffer object whose map we are tearing down.
  This function tears down a cached map set up using
  vmw_buffer_object_map_and_cache().
  vmw_bo_acc_size - Calculate the pinned memory usage of buffers
  @dev_priv: Pointer to a struct vmw_private identifying the device.
  @size: The requested buffer size.
  @user: Whether this is an ordinary dma buffer or a user dma buffer.
  vmw_bo_bo_free - vmw buffer object destructor
  @bo: Pointer to the embedded struct ttm_buffer_object
  vmw_user_bo_destroy - vmw buffer object destructor
  @bo: Pointer to the embedded struct ttm_buffer_object
  vmw_bo_create_kernel - Create a pinned BO for internal kernel use.
  @dev_priv: Pointer to the device private struct
  @size: size of the BO we need
  @placement: where to put it
  @p_bo: resulting BO
  Creates and pin a simple BO for in kernel use.
  vmw_bo_init - Initialize a vmw buffer object
  @dev_priv: Pointer to the device private struct
  @vmw_bo: Pointer to the struct vmw_buffer_object to initialize.
  @size: Buffer object size in bytes.
  @placement: Initial placement.
  @interruptible: Whether waits should be performed interruptible.
  @pin: If the BO should be created pinned at a fixed location.
  @bo_free: The buffer object destructor.
  Returns: Zero on success, negative error code on error.
  Note that on error, the code will free the buffer object.
  vmw_user_bo_release - TTM reference base object release callback for
  vmw user buffer objects
  @p_base: The TTM base object pointer about to be unreferenced.
  Clears the TTM base object pointer and drops the reference the
  base object has on the underlying struct vmw_buffer_object.
  vmw_user_bo_ref_obj_release - TTM synccpu reference object release callback
  for vmw user buffer objects
  @base: Pointer to the TTM base object
  @ref_type: Reference type of the reference reaching zero.
  Called when user-space drops its last synccpu reference on the buffer
  object, Either explicitly or as part of a cleanup file close.
  vmw_user_bo_alloc - Allocate a user buffer object
  @dev_priv: Pointer to a struct device private.
  @tfile: Pointer to a struct ttm_object_file on which to register the user
  object.
  @size: Size of the buffer object.
  @shareable: Boolean whether the buffer is shareable with other open files.
  @handle: Pointer to where the handle value should be assigned.
  @p_vbo: Pointer to where the refcounted struct vmw_buffer_object pointer
  should be assigned.
  @p_base: The TTM base object pointer about to be allocated.
  Return: Zero on success, negative error code on error.
  vmw_user_bo_verify_access - verify access permissions on this
  buffer object.
  @bo: Pointer to the buffer object being accessed
  @tfile: Identifying the caller.
 Check that the caller has opened the object. 
  vmw_user_bo_synccpu_grab - Grab a struct vmw_user_buffer_object for cpu
  access, idling previous GPU operations on the buffer and optionally
  blocking it for further command submissions.
  @user_bo: Pointer to the buffer object being grabbed for CPU access
  @tfile: Identifying the caller.
  @flags: Flags indicating how the grab should be performed.
  Return: Zero on success, Negative error code on error. In particular,
  -EBUSY will be returned if a dontblock operation is requested and the
  buffer object is busy, and -ERESTARTSYS will be returned if a wait is
  interrupted by a signal.
  A blocking grab will be automatically released when @tfile is closed.
  vmw_user_bo_synccpu_release - Release a previous grab for CPU access,
  and unblock command submission on the buffer if blocked.
  @handle: Handle identifying the buffer object.
  @tfile: Identifying the caller.
  @flags: Flags indicating the type of release.
  vmw_user_bo_synccpu_ioctl - ioctl function implementing the synccpu
  functionality.
  @dev: Identifies the drm device.
  @data: Pointer to the ioctl argument.
  @file_priv: Identifies the caller.
  Return: Zero on success, negative error code on error.
  This function checks the ioctl arguments for validity and calls the
  relevant synccpu functions.
  vmw_bo_alloc_ioctl - ioctl function implementing the buffer object
  allocation functionality.
  @dev: Identifies the drm device.
  @data: Pointer to the ioctl argument.
  @file_priv: Identifies the caller.
  Return: Zero on success, negative error code on error.
  This function checks the ioctl arguments for validity and allocates a
  struct vmw_user_buffer_object bo.
  vmw_bo_unref_ioctl - Generic handle close ioctl.
  @dev: Identifies the drm device.
  @data: Pointer to the ioctl argument.
  @file_priv: Identifies the caller.
  Return: Zero on success, negative error code on error.
  This function checks the ioctl arguments for validity and closes a
  handle to a TTM base object, optionally freeing the object.
  vmw_user_bo_lookup - Look up a vmw user buffer object from a handle.
  @tfile: The TTM object file the handle is registered with.
  @handle: The user buffer object handle
  @out: Pointer to a where a pointer to the embedded
  struct vmw_buffer_object should be placed.
  @p_base: Pointer to where a pointer to the TTM base object should be
  placed, or NULL if no such pointer is required.
  Return: Zero on success, Negative error code on error.
  Both the output base object pointer and the vmw buffer object pointer
  will be refcounted.
  vmw_user_bo_noref_lookup - Look up a vmw user buffer object without reference
  @tfile: The TTM object file the handle is registered with.
  @handle: The user buffer object handle.
  This function looks up a struct vmw_user_bo and returns a pointer to the
  struct vmw_buffer_object it derives from without refcounting the pointer.
  The returned pointer is only valid until vmw_user_bo_noref_release() is
  called, and the object pointed to by the returned pointer may be doomed.
  Any persistent usage of the object requires a refcount to be taken using
  ttm_bo_reference_unless_doomed(). Iff this function returns successfully it
  needs to be paired with vmw_user_bo_noref_release() and no sleeping-
  or scheduling functions may be called inbetween these function calls.
  Return: A struct vmw_buffer_object pointer if successful or negative
  error pointer on failure.
  vmw_user_bo_reference - Open a handle to a vmw user buffer object.
  @tfile: The TTM object file to register the handle with.
  @vbo: The embedded vmw buffer object.
  @handle: Pointer to where the new handle should be placed.
  Return: Zero on success, Negative error code on error.
  vmw_bo_fence_single - Utility function to fence a single TTM buffer
                        object without unreserving it.
  @bo:             Pointer to the struct ttm_buffer_object to fence.
  @fence:          Pointer to the fence. If NULL, this function will
                   insert a fence into the command stream..
  Contrary to the ttm_eu version of this function, it takes only
  a single buffer object instead of a list, and it also doesn't
  unreserve the buffer object, which needs to be done separately.
  vmw_dumb_create - Create a dumb kms buffer
  @file_priv: Pointer to a struct drm_file identifying the caller.
  @dev: Pointer to the drm device.
  @args: Pointer to a struct drm_mode_create_dumb structure
  Return: Zero on success, negative error code on failure.
  This is a driver callback for the core drm create_dumb functionality.
  Note that this is very similar to the vmw_bo_alloc ioctl, except
  that the arguments have a different format.
  vmw_dumb_map_offset - Return the address space offset of a dumb buffer
  @file_priv: Pointer to a struct drm_file identifying the caller.
  @dev: Pointer to the drm device.
  @handle: Handle identifying the dumb buffer.
  @offset: The address space offset returned.
  Return: Zero on success, negative error code on failure.
  This is a driver callback for the core drm dumb_map_offset functionality.
  vmw_dumb_destroy - Destroy a dumb boffer
  @file_priv: Pointer to a struct drm_file identifying the caller.
  @dev: Pointer to the drm device.
  @handle: Handle identifying the dumb buffer.
  Return: Zero on success, negative error code on failure.
  This is a driver callback for the core drm dumb_destroy functionality.
  vmw_bo_swap_notify - swapout notify callback.
  @bo: The buffer object to be swapped out.
 Is @bo embedded in a struct vmw_buffer_object? 
 Kill any cached kernel maps before swapout 
  vmw_bo_move_notify - TTM move_notify_callback
  @bo: The TTM buffer object about to move.
  @mem: The struct ttm_resource indicating to what memory
        region the move is taking place.
  Detaches cached maps and device bindings that require that the
  buffer doesn't move.
 Make sure @bo is embedded in a struct vmw_buffer_object? 
	
	  Kill any cached kernel maps before move to or from VRAM.
	  With other types of moves, the underlying pages stay the same,
	  and the map can be kept.
	
	  If we're moving a backup MOB out of MOB placement, then make sure we
	  read back all resource content first, and unbind the MOB from
	  the resource.
 SPDX-License-Identifier: GPL-2.0 OR MIT
  Copyright 2015 VMware, Inc., Palo Alto, CA., USA
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sub license, andor sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:
  The above copyright notice and this permission notice (including the
  next paragraph) shall be included in all copies or substantial portions
  of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
  THE COPYRIGHT HOLDERS, AUTHORS ANDOR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,
  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  USE OR OTHER DEALINGS IN THE SOFTWARE.
  This file implements the vmwgfx context binding manager,
  The sole reason for having to use this code is that vmware guest
  backed contexts can be swapped out to their backing mobs by the device
  at any time, also swapped in at any time. At swapin time, the device
  validates the context bindings to make sure they point to valid resources.
  It's this outside-of-drawcall validation (that can happen at any time),
  that makes this code necessary.
  We therefore need to kill any context bindings pointing to a resource
  when the resource is swapped out. Furthermore, if the vmwgfx driver has
  swapped out the context we can't swap it in again to kill bindings because
  of backing mob reservation lockdep violations, so as part of
  context swapout, also kill all bindings of a context, so that they are
  already killed if a resource to which a binding points
  needs to be swapped out.
  Note that a resource can be pointed to by bindings from multiple contexts,
  Therefore we can't easily protect this data by a per context mutex
  (unless we use deadlock-safe WW mutexes). So we use a global binding_mutex
  to protect all binding manager data.
  Finally, any association between a context and a global resource
  (surface, shader or even DX query) is conceptually a context binding that
  needs to be tracked by this code.
  struct vmw_ctx_binding_state - per context binding state
  @dev_priv: Pointer to device private structure.
  @list: linked list of individual active bindings.
  @render_targets: Render target bindings.
  @texture_units: Texture units bindings.
  @ds_view: Depth-stencil view binding.
  @so_targets: StreamOutput target bindings.
  @vertex_buffers: Vertex buffer bindings.
  @index_buffer: Index buffer binding.
  @per_shader: Per shader-type bindings.
  @ua_views: UAV bindings.
  @so_state: StreamOutput bindings.
  @dirty: Bitmap tracking per binding-type changes that have not yet
  been emitted to the device.
  @dirty_vb: Bitmap tracking individual vertex buffer binding changes that
  have not yet been emitted to the device.
  @bind_cmd_buffer: Scratch space used to construct binding commands.
  @bind_cmd_count: Number of binding command data entries in @bind_cmd_buffer
  @bind_first_slot: Used together with @bind_cmd_buffer to indicate the
  device binding slot of the first command data entry in @bind_cmd_buffer.
  Note that this structure also provides storage space for the individual
  struct vmw_ctx_binding objects, so that no dynamic allocation is needed
  for individual bindings.
  struct vmw_binding_info - Per binding type information for the binding
  manager
  @size: The size of the struct binding derived from a struct vmw_ctx_bindinfo.
  @offsets: array[shader_slot] of offsets to the array[slot]
  of struct bindings for the binding type.
  @scrub_func: Pointer to the scrub function for this binding type.
  Holds static information to help optimize the binding manager and avoid
  an excessive amount of switch statements.
  A number of static variables that help determine the scrub func and the
  location of the struct vmw_ctx_bindinfo slots for each binding type.
  vmw_cbs_context - Return a pointer to the context resource of a
  context binding state tracker.
  @cbs: The context binding state tracker.
  Provided there are any active bindings, this function will return an
  unreferenced pointer to the context resource that owns the context
  binding state tracker. If there are no active bindings, this function
  will return NULL. Note that the caller must somehow ensure that a reference
  is held on the context resource prior to calling this function.
  vmw_binding_loc - determine the struct vmw_ctx_bindinfo slot location.
  @cbs: Pointer to a struct vmw_ctx_binding state which holds the slot.
  @bt: The binding type.
  @shader_slot: The shader slot of the binding. If none, then set to 0.
  @slot: The slot of the binding.
  vmw_binding_drop: Stop tracking a context binding
  @bi: Pointer to binding tracker storage.
  Stops tracking a context binding, and re-initializes its storage.
  Typically used when the context binding is replaced with a binding to
  another (or the same, for that matter) resource.
  vmw_binding_add: Start tracking a context binding
  @cbs: Pointer to the context binding state tracker.
  @bi: Information about the binding to track.
  @shader_slot: The shader slot of the binding.
  @slot: The slot of the binding.
  Starts tracking the binding in the context binding
  state structure @cbs.
  vmw_binding_add_uav_index - Add UAV index for tracking.
  @cbs: Pointer to the context binding state tracker.
  @slot: UAV type to which bind this index.
  @index: The splice index to track.
  vmw_binding_transfer: Transfer a context binding tracking entry.
  @cbs: Pointer to the persistent context binding state tracker.
  @from: Staged binding info built during execbuf
  @bi: Information about the binding to track.
  vmw_binding_state_kill - Kill all bindings associated with a
  struct vmw_ctx_binding state structure, and re-initialize the structure.
  @cbs: Pointer to the context binding state tracker.
  Emits commands to scrub all bindings associated with the
  context binding state tracker. Then re-initializes the whole structure.
  vmw_binding_state_scrub - Scrub all bindings associated with a
  struct vmw_ctx_binding state structure.
  @cbs: Pointer to the context binding state tracker.
  Emits commands to scrub all bindings associated with the
  context binding state tracker.
  vmw_binding_res_list_kill - Kill all bindings on a
  resource binding list
  @head: list head of resource binding list
  Kills all bindings associated with a specific resource. Typically
  called before the resource is destroyed.
  vmw_binding_res_list_scrub - Scrub all bindings on a
  resource binding list
  @head: list head of resource binding list
  Scrub all bindings associated with a specific resource. Typically
  called before the resource is evicted.
  vmw_binding_state_commit - Commit staged binding info
  @to:   Staged binding info area to copy into to.
  @from: Staged binding info built during execbuf.
  Transfers binding info from a temporary structure
  (typically used by execbuf) to the persistent
  structure in the context. This can be done once commands have been
  submitted to hardware
 Also transfer uav splice indices 
  vmw_binding_rebind_all - Rebind all scrubbed bindings of a context
  @cbs: Pointer to the context binding state tracker.
  Walks through the context binding list and rebinds all scrubbed
  resources.
  vmw_binding_scrub_shader - scrub a shader binding from a context.
  @bi: single binding information.
  @rebind: Whether to issue a bind instead of scrub command.
  vmw_binding_scrub_render_target - scrub a render target binding
  from a context.
  @bi: single binding information.
  @rebind: Whether to issue a bind instead of scrub command.
  vmw_binding_scrub_texture - scrub a texture binding from a context.
  @bi: single binding information.
  @rebind: Whether to issue a bind instead of scrub command.
  TODO: Possibly complement this function with a function that takes
  a list of texture bindings and combines them to a single command.
  vmw_binding_scrub_dx_shader - scrub a dx shader binding from a context.
  @bi: single binding information.
  @rebind: Whether to issue a bind instead of scrub command.
  vmw_binding_scrub_cb - scrub a constant buffer binding from a context.
  @bi: single binding information.
  @rebind: Whether to issue a bind instead of scrub command.
  vmw_collect_view_ids - Build view id data for a view binding command
  without checking which bindings actually need to be emitted
  @cbs: Pointer to the context's struct vmw_ctx_binding_state
  @biv: Pointer to where the binding info array is stored in @cbs
  @max_num: Maximum number of entries in the @bi array.
  Scans the @bi array for bindings and builds a buffer of view id data.
  Stops at the first non-existing binding in the @bi array.
  On output, @cbs->bind_cmd_count contains the number of bindings to be
  emitted, @cbs->bind_first_slot is set to zero, and @cbs->bind_cmd_buffer
  contains the command data.
  vmw_collect_dirty_view_ids - Build view id data for a view binding command
  @cbs: Pointer to the context's struct vmw_ctx_binding_state
  @bi: Pointer to where the binding info array is stored in @cbs
  @dirty: Bitmap indicating which bindings need to be emitted.
  @max_num: Maximum number of entries in the @bi array.
  Scans the @bi array for bindings that need to be emitted and
  builds a buffer of view id data.
  On output, @cbs->bind_cmd_count contains the number of bindings to be
  emitted, @cbs->bind_first_slot indicates the index of the first emitted
  binding, and @cbs->bind_cmd_buffer contains the command data.
  vmw_emit_set_sr - Issue delayed DX shader resource binding commands
  @cbs: Pointer to the context's struct vmw_ctx_binding_state
  @shader_slot: The shader slot of the binding.
  vmw_emit_set_rt - Issue delayed DX rendertarget binding commands
  @cbs: Pointer to the context's struct vmw_ctx_binding_state
  vmw_collect_so_targets - Build SVGA3dSoTarget data for a binding command
  without checking which bindings actually need to be emitted
  @cbs: Pointer to the context's struct vmw_ctx_binding_state
  @biso: Pointer to where the binding info array is stored in @cbs
  @max_num: Maximum number of entries in the @bi array.
  Scans the @bi array for bindings and builds a buffer of SVGA3dSoTarget data.
  Stops at the first non-existing binding in the @bi array.
  On output, @cbs->bind_cmd_count contains the number of bindings to be
  emitted, @cbs->bind_first_slot is set to zero, and @cbs->bind_cmd_buffer
  contains the command data.
  vmw_emit_set_so_target - Issue delayed streamout binding commands
  @cbs: Pointer to the context's struct vmw_ctx_binding_state
  vmw_binding_emit_dirty_ps - Issue delayed per shader binding commands
  @cbs: Pointer to the context's struct vmw_ctx_binding_state
  vmw_collect_dirty_vbs - Build SVGA3dVertexBuffer data for a
  SVGA3dCmdDXSetVertexBuffers command
  @cbs: Pointer to the context's struct vmw_ctx_binding_state
  @bi: Pointer to where the binding info array is stored in @cbs
  @dirty: Bitmap indicating which bindings need to be emitted.
  @max_num: Maximum number of entries in the @bi array.
  Scans the @bi array for bindings that need to be emitted and
  builds a buffer of SVGA3dVertexBuffer data.
  On output, @cbs->bind_cmd_count contains the number of bindings to be
  emitted, @cbs->bind_first_slot indicates the index of the first emitted
  binding, and @cbs->bind_cmd_buffer contains the command data.
  vmw_emit_set_vb - Issue delayed vertex buffer binding commands
  @cbs: Pointer to the context's struct vmw_ctx_binding_state
 Splice index is specified user-space   
 Start index is specified user-space 
  vmw_binding_emit_dirty - Issue delayed binding commands
  @cbs: Pointer to the context's struct vmw_ctx_binding_state
  This function issues the delayed binding commands that arise from
  previous scrub  unscrub calls. These binding commands are typically
  commands that batch a number of bindings and therefore it makes sense
  to delay them.
  vmw_binding_scrub_sr - Schedule a dx shaderresource binding
  scrub from a context
  @bi: single binding information.
  @rebind: Whether to issue a bind instead of scrub command.
  vmw_binding_scrub_dx_rt - Schedule a dx rendertarget binding
  scrub from a context
  @bi: single binding information.
  @rebind: Whether to issue a bind instead of scrub command.
  vmw_binding_scrub_so_target - Schedule a dx streamoutput buffer binding
  scrub from a context
  @bi: single binding information.
  @rebind: Whether to issue a bind instead of scrub command.
  vmw_binding_scrub_vb - Schedule a dx vertex buffer binding
  scrub from a context
  @bi: single binding information.
  @rebind: Whether to issue a bind instead of scrub command.
  vmw_binding_scrub_ib - scrub a dx index buffer binding from a context
  @bi: single binding information.
  @rebind: Whether to issue a bind instead of scrub command.
  vmw_binding_scrub_so - Scrub a streamoutput binding from context.
  @bi: Single binding information.
  @rebind: Whether to issue a bind instead of scrub command.
  vmw_binding_state_alloc - Allocate a struct vmw_ctx_binding_state with
  memory accounting.
  @dev_priv: Pointer to a device private structure.
  Returns a pointer to a newly allocated struct or an error pointer on error.
  vmw_binding_state_free - Free a struct vmw_ctx_binding_state and its
  memory accounting info.
  @cbs: Pointer to the struct vmw_ctx_binding_state to be freed.
  vmw_binding_state_list - Get the binding list of a
  struct vmw_ctx_binding_state
  @cbs: Pointer to the struct vmw_ctx_binding_state
  Returns the binding list which can be used to traverse through the bindings
  and access the resource information of all bindings.
  vmw_binding_state_reset - clear a struct vmw_ctx_binding_state
  @cbs: Pointer to the struct vmw_ctx_binding_state to be cleared
  Drops all bindings registered in @cbs. No device binding actions are
  performed.
  vmw_binding_dirtying - Return whether a binding type is dirtying its resource
  @binding_type: The binding type
  Each time a resource is put on the validation list as the result of a
  context binding referencing it, we need to determine whether that resource
  will be dirtied (written to by the GPU) as a result of the corresponding
  GPU operation. Currently rendertarget-, depth-stencil-, stream-output-target
  and unordered access view bindings are capable of dirtying its resource.
  Return: Whether the binding type dirties the resource its binding points to.
 Review this function as new bindings are added. 
  This function is unused at run-time, and only used to hold various build
  asserts important for code optimization assumptions.
	
	  struct vmw_ctx_binding_state::bind_cmd_buffer is used for various
	  view id arrays.
	
	  struct vmw_ctx_binding_state::bind_cmd_buffer is used for
	  u32 view ids, SVGA3dSoTargets and SVGA3dVertexBuffers
 SPDX-License-Identifier: GPL-2.0 OR MIT
  Copyright 2009-2015 VMware, Inc., Palo Alto, CA., USA
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sub license, andor sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:
  The above copyright notice and this permission notice (including the
  next paragraph) shall be included in all copies or substantial portions
  of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
  THE COPYRIGHT HOLDERS, AUTHORS ANDOR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,
  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  USE OR OTHER DEALINGS IN THE SOFTWARE.
  vmw_thread_fn - Deferred (process context) irq handler
  @irq: irq number
  @arg: Closure argument. Pointer to a struct drm_device cast to void 
  This function implements the deferred part of irq processing.
  The function is guaranteed to run at least once after the
  vmw_irq_handler has returned with IRQ_WAKE_THREAD.
  vmw_irq_handler: irq handler
  @irq: irq number
  @arg: Closure argument. Pointer to a struct drm_device cast to void 
  This function implements the quick part of irq processing.
  The function performs fast actions like clearing the device interrupt
  flags and also reasonably quick actions like waking processes waiting for
  FIFO space. Other IRQ actions are deferred to the IRQ thread.
	
	  Then check if the seqno is higher than what we've actually
	  emitted. Then the fence is stale and signaled.
	
	  Block command submission while waiting for idle.
			
			  FIXME: Use schedule_hr_timeout here for
			  newer kernels and lower CPU utilization.
  vmw_irq_install - Install the irq handlers
  @dev:  Pointer to the drm device.
  @irq:  The irq number.
  Return:  Zero if successful. Negative number otherwise.
 SPDX-License-Identifier: GPL-2.0 OR MIT
  Copyright 2009-2015 VMware, Inc., Palo Alto, CA., USA
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sub license, andor sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:
  The above copyright notice and this permission notice (including the
  next paragraph) shall be included in all copies or substantial portions
  of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
  THE COPYRIGHT HOLDERS, AUTHORS ANDOR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,
  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  USE OR OTHER DEALINGS IN THE SOFTWARE.
  Context management:
  GB context.
	
	  Create a fence object and fence the backup buffer.
  DX context.
  vmw_dx_context_scrub_cotables - Scrub all bindings and
  cotables from a context
  @ctx: Pointer to the context resource
  @readback: Whether to save the otable contents on scrubbing.
  COtables must be unbound before their context, but unbinding requires
  the backup buffer being reserved, whereas scrubbing does not.
  This function scrubs all cotables of a context, potentially reading back
  the contents into their backup buffers. However, scrubbing cotables
  also makes the device context invalid, so scrub all bindings first so
  that doesn't have to be done later with an invalid context.
 Avoid racing with ongoing cotable destruction. 
	
	  Create a fence object and fence the backup buffer.
  User-space context management:
  This function is called when user space has no more references on the
  base object. It releases the base-object's reference on the resource object.
	
	  From here on, the destructor takes over resource freeing.
  vmw_context_binding_list - Return a list of context bindings
  @ctx: The context resource
  Returns the current list of bindings of the given context. Note that
  this list becomes stale as soon as the dev_priv::binding_mutex is unlocked.
  vmw_context_binding_state -
  Return a pointer to a context binding state structure
  @ctx: The context resource
  Returns the current state of bindings of the given context. Note that
  this state becomes stale as soon as the dev_priv::binding_mutex is unlocked.
  vmw_context_bind_dx_query -
  Sets query MOB for the context.  If @mob is NULL, then this function will
  remove the association between the MOB and the context.  This function
  assumes the binding_mutex is held.
  @ctx_res: The context resource
  @mob: a reference to the query MOB
  Returns -EINVAL if a MOB has already been set and does not match the one
  specified in the parameter.  0 otherwise.
 Can only have one MOB per context for queries 
  vmw_context_get_dx_query_mob - Returns non-counted reference to DX query mob
  @ctx_res: The context resource
 SPDX-License-Identifier: GPL-2.0 OR MIT
  Copyright 2009-2015 VMware, Inc., Palo Alto, CA., USA
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sub license, andor sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:
  The above copyright notice and this permission notice (including the
  next paragraph) shall be included in all copies or substantial portions
  of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
  THE COPYRIGHT HOLDERS, AUTHORS ANDOR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,
  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  USE OR OTHER DEALINGS IN THE SOFTWARE.
  Display Unit Cursor functions
 No snooper installed 
 TODO handle none page aligned offsets 
 TODO handle more dst & src != 0 
 TODO handle more then one copy 
 Image is unsigned pointer. 
  vmw_kms_legacy_hotspot_clear - Clear legacy hotspots
  @dev_priv: Pointer to the device private struct.
  Clears all legacy hotspots.
 Planes are static in our case so we don't free it 
  vmw_du_plane_unpin_surf - unpins resource associated with a framebuffer surface
  @vps: plane state associated with the display surface
  @unreference: true if we also want to unreference the display.
  vmw_du_plane_cleanup_fb - Unpins the cursor
  @plane:  display plane
  @old_state: Contains the FB to clean up
  Unpins the framebuffer surface
  Returns 0 on success
  vmw_du_cursor_plane_prepare_fb - Readies the cursor by referencing it
  @plane:  display plane
  @new_state: info on the new plane state, including the FB
  Returns 0 on success
  vmw_du_primary_plane_atomic_check - check if the new state is okay
  @plane: display plane
  @state: info on the new plane state, including the FB
  Check if the new state is settable given the current state.  Other
  than what the atomic helper checks, we care about crtc fitting
  the FB and maintaining one active framebuffer.
  Returns 0 on success
  vmw_du_cursor_plane_atomic_check - check if the new state is okay
  @plane: cursor plane
  @state: info on the new plane state
  This is a chance to fail if the new cursor state does not fit
  our requirements.
  Returns 0 on success
 Turning off 
 A lot of the code assumes this 
 We always want to have an active plane with an active CRTC 
	
	  Our virtual device does not have a dot clock, so use the logical
	  clock value as the dot clock.
  vmw_du_crtc_duplicate_state - duplicate crtc state
  @crtc: DRM crtc
  Allocates and returns a copy of the crtc state (both common and
  vmw-specific) for the specified crtc.
  Returns: The newly allocated crtc state, or NULL on failure.
  vmw_du_crtc_reset - creates a blank vmw crtc state
  @crtc: DRM crtc
  Resets the atomic state for @crtc by freeing the state pointer (which
  might be NULL, e.g. at driver load time) and allocating a new empty state
  object.
  vmw_du_crtc_destroy_state - destroy crtc state
  @crtc: DRM crtc
  @state: state object to destroy
  Destroys the crtc state (both common and vmw-specific) for the
  specified plane.
  vmw_du_plane_duplicate_state - duplicate plane state
  @plane: drm plane
  Allocates and returns a copy of the plane state (both common and
  vmw-specific) for the specified plane.
  Returns: The newly allocated plane state, or NULL on failure.
 Each ref counted resource needs to be acquired again 
  vmw_du_plane_reset - creates a blank vmw plane state
  @plane: drm plane
  Resets the atomic state for @plane by freeing the state pointer (which might
  be NULL, e.g. at driver load time) and allocating a new empty state object.
  vmw_du_plane_destroy_state - destroy plane state
  @plane: DRM plane
  @state: state object to destroy
  Destroys the plane state (both common and vmw-specific) for the
  specified plane.
 Should have been freed by cleanup_fb 
  vmw_du_connector_duplicate_state - duplicate connector state
  @connector: DRM connector
  Allocates and returns a copy of the connector state (both common and
  vmw-specific) for the specified connector.
  Returns: The newly allocated connector state, or NULL on failure.
  vmw_du_connector_reset - creates a blank vmw connector state
  @connector: DRM connector
  Resets the atomic state for @connector by freeing the state pointer (which
  might be NULL, e.g. at driver load time) and allocating a new empty state
  object.
  vmw_du_connector_destroy_state - destroy connector state
  @connector: DRM connector
  @state: state object to destroy
  Destroys the connector state (both common and vmw-specific) for the
  specified plane.
  Generic framebuffer code
  Surface framebuffer code
  vmw_kms_readback - Perform a readback from the screen system to
  a buffer-object backed framebuffer.
  @dev_priv: Pointer to the device private structure.
  @file_priv: Pointer to a struct drm_file identifying the caller.
  Must be set to NULL if @user_fence_rep is NULL.
  @vfb: Pointer to the buffer-object backed framebuffer.
  @user_fence_rep: User-space provided structure for fence information.
  Must be set to non-NULL if @file_priv is non-NULL.
  @vclips: Array of clip rects.
  @num_clips: Number of clip rects in @vclips.
  Returns 0 on success, negative error code on failure. -ERESTARTSYS if
  interrupted.
 3D is only supported on HWv8 and newer hosts 
	
	  Sanity checks.
 Surface must be marked as a scanout. 
	
	  For DX, surface format validation is done when surface->scanout
	  is set.
  Buffer-object framebuffer code
  Pin the bofer in a location suitable for access by the
  display system.
				
				  Use surface DMA to get content to
				  sreen target surface.
 Use CPU blit. 
 Use surface  image update 
  vmw_create_bo_proxy - create a proxy surface for the buffer object
  @dev: DRM device
  @mode_cmd: parameters for the new surface
  @bo_mob: MOB backing the buffer object
  @srf_out: newly created surface
  When the content FB is a buffer object, we create a surface as a proxy to the
  same buffer.  This way we can do a surface copy rather than a surface DMA.
  This is a more efficient approach
  RETURNS:
  0 on success, error code otherwise
 Reserve and switch the backing mob. 
 Limited framebuffer color depth support for screen objects 
  vmw_kms_srf_ok - check if a surface can be created
  @dev_priv: Pointer to device private struct.
  @width: requested width
  @height: requested height
  Surfaces need to be less than texture size
  vmw_kms_new_framebuffer - Create a new framebuffer.
  @dev_priv: Pointer to device private struct.
  @bo: Pointer to buffer object to wrap the kms framebuffer around.
  Either @bo or @surface must be NULL.
  @surface: Pointer to a surface to wrap the kms framebuffer around.
  Either @bo or @surface must be NULL.
  @only_2d: No presents will occur to this buffer object based framebuffer.
  This helps the code to do some important optimizations.
  @mode_cmd: Frame-buffer metadata.
	
	  We cannot use the SurfaceDMA command in an non-accelerated VM,
	  therefore, wrap the buffer object in a surface so we can use the
	  SurfaceCopy command.
 Don't create a proxy for cursor 
 Create the new framebuffer depending one what we have 
		
		  vmw_create_bo_proxy() adds a reference that is no longer
		  needed
  Generic Kernel modesetting functions
	
	  Take a reference on the user object of the resource
	  backing the kms fb. This ensures that user-space handle
	  lookups on that resource will always work as long as
	  it's registered with a kms framebuffer. This is important,
	  since vmw_execbuf_process identifies resources in the
	  command stream using user-space handles.
	
	  End conditioned code.
 returns either a bo or surface 
 vmw_user_lookup_handle takes one ref so does new_fb 
  vmw_kms_check_display_memory - Validates display memory required for a
  topology
  @dev: DRM device
  @num_rects: number of drm_rect in rects
  @rects: array of drm_rect representing the topology to validate indexed by
  crtc index.
  Returns:
  0 on success otherwise negative error code
		
		  For STDU only individual screen (screen target) is limited by
		  SCREENTARGET_MAX_WIDTHHEIGHT registers.
 Bounding box upper left is at (0,0). 
 Virtual svga device primary limits are always in 32-bpp. 
	
	  For HV10 and below prim_bb_mem is vram size. When
	  SVGA_REG_MAX_PRIMARY_BOUNDING_BOX_MEM is not present vram size is
	  limit on primary bounding box
 SVGA_CAP_NO_BB_RESTRICTION is available for STDU only. 
  vmw_crtc_state_and_lock - Return new or current crtc state with locked
  crtc mutex
  @state: The atomic state pointer containing the new atomic state
  @crtc: The crtc
  This function returns the new crtc state if it's part of the state update.
  Otherwise returns the current crtc state. It also makes sure that the
  crtc mutex is locked.
  Returns: A valid crtc state pointer or NULL. It may also return a
  pointer error, in particular -EDEADLK if locking needs to be rerun.
  vmw_kms_check_implicit - Verify that all implicit display units scan out
  from the same fb after the new state is committed.
  @dev: The drm_device.
  @state: The new state to be checked.
  Returns:
    Zero on success,
    -EINVAL on invalid state,
    -EDEADLK if modeset locking needs to be rerun.
		
		  Can't move primary planes across crtcs, so this is OK.
		  It also means we don't need to take the plane mutex.
  vmw_kms_check_topology - Validates topology in drm_atomic_state
  @dev: DRM device
  @state: the driver state object
  Returns:
  0 on success otherwise negative error code
 Determine change to topology due to new atomic state 
		
		  For vmwgfx each crtc has only one connector attached and it
		  is not changed so don't really need to check the
		  crtc->connector_mask and iterate over it.
  vmw_kms_atomic_check_modeset- validate state object for modeset changes
  @dev: DRM device
  @state: the driver state object
  This is a simple wrapper around drm_atomic_helper_check_modeset() for
  us to assign a value to mode->crtc_clock so that
  drm_calc_timestamping_constants() won't throw an error message
  Returns:
  Zero for success or -errno
 Fallback 
	
	  Docs says we should take the lock before calling this function
	  but since it destroys encoders and our destructor calls
	  drm_encoder_cleanup which takes the lock we deadlock.
  Function called by DRM code called with vbl_lock held.
  Function called by DRM code called with vbl_lock held.
  Function called by DRM code called with vbl_lock held.
  vmw_du_update_layout - Update the display unit with topology from resolution
  plugin and generate DRM uevent
  @dev_priv: device private
  @num_rects: number of drm_rect in rects
  @rects: toplogy to update
 Currently gui_xy is protected with the crtc mutex 
 640x480@60Hz 
 800x600@60Hz 
 1024x768@60Hz 
 1152x864@75Hz 
 1280x720@60Hz 
 1280x768@60Hz 
 1280x800@60Hz 
 1280x960@60Hz 
 1280x1024@60Hz 
 1360x768@60Hz 
 1440x1050@60Hz 
 1440x900@60Hz 
 1600x1200@60Hz 
 1680x1050@60Hz 
 1792x1344@60Hz 
 1853x1392@60Hz 
 1920x1080@60Hz 
 1920x1200@60Hz 
 1920x1440@60Hz 
 2560x1440@60Hz 
 2560x1600@60Hz 
 2880x1800@60Hz 
 3840x2160@60Hz 
 3840x2400@60Hz 
 Terminate 
  vmw_guess_mode_timing - Provide fake timings for a
  60Hz vrefresh mode.
  @mode: Pointer to a struct drm_display_mode with hdisplay and vdisplay
  members filled in.
	
	  For STDU extra limit for a mode on SVGA_REG_SCREENTARGET_MAX_WIDTH
	  HEIGHT registers.
 Add preferred mode 
 mode might be null here, this is intended 
 Move the prefered mode first, help apps pick the right mode. 
  vmw_kms_update_layout_ioctl - Handler for DRM_VMW_UPDATE_LAYOUT ioctl
  @dev: drm device for the ioctl
  @data: data pointer for the ioctl
  @file_priv: drm file for the ioctl call
  Update preferred topology of display unit as per ioctl request. The topology
  is expressed as array of drm_vmw_rect.
  e.g.
  [0 0 640 480] [640 0 800 600] [0 480 640 480]
  NOTE:
  The x and y offset (upper left) in drm_vmw_rect cannot be less than 0. Beside
  device limit on topology, x + w and y + h (lower right) cannot be greater
  than INT_MAX. So topology beyond these limits will return with error.
  Returns:
  Zero on success, negative errno on failure.
 Verify user-space for overflow as kernel use drm_rect 
		
		  Currently this check is limiting the topology within
		  mode_config->max (which actually is max texture size
		  supported by virtual device). This limit is here to address
		  window managers that create a big framebuffer for whole
		  topology.
  vmw_kms_helper_dirty - Helper to build commands and perform actions based
  on a set of cliprects and a set of display units.
  @dev_priv: Pointer to a device private structure.
  @framebuffer: Pointer to the framebuffer on which to perform the actions.
  @clips: A set of struct drm_clip_rect. Either this os @vclips must be NULL.
  Cliprects are given in framebuffer coordinates.
  @vclips: A set of struct drm_vmw_rect cliprects. Either this or @clips must
  be NULL. Cliprects are given in source coordinates.
  @dest_x: X coordinate offset for the crtc  destination clip rects.
  @dest_y: Y coordinate offset for the crtc  destination clip rects.
  @num_clips: Number of cliprects in the @clips or @vclips array.
  @increment: Integer with which to increment the clip counter when looping.
  Used to skip a predetermined number of clip rects.
  @dirty: Closure structure. See the description of struct vmw_kms_dirty.
 If crtc is passed, no need to iterate over other display units 
			
			  Select clip array type. Note that integer type
			  in @clips is unsigned short, whereas in @vclips
			  it's 32-bit.
 Skip this clip if it's outside the crtc region 
 Clip right and bottom to crtc limits 
 Clip left and top to crtc limits 
  vmw_kms_helper_validation_finish - Helper for post KMS command submission
  cleanup and fencing
  @dev_priv: Pointer to the device-private struct
  @file_priv: Pointer identifying the client when user-space fencing is used
  @ctx: Pointer to the validation context
  @out_fence: If non-NULL, returned refcounted fence-pointer
  @user_fence_rep: If non-NULL, pointer to user-space address area
  in which to copy user-space fence info
  vmw_kms_update_proxy - Helper function to update a proxy surface from
  its backing MOB.
  @res: Pointer to the surface resource
  @clips: Clip rects in framebuffer (surface) space.
  @num_clips: Number of clips in @clips.
  @increment: Integer with which to increment the clip counter when looping.
  Used to skip a predetermined number of clip rects.
  This function makes sure the proxy surface is updated from its backing MOB
  using the region given by @clips. The surface resource @res and its backing
  MOB needs to be reserved and validated on call.
  vmw_kms_create_implicit_placement_property - Set up the implicit placement
  property.
  @dev_priv: Pointer to a device private struct.
  Sets up the implicit placement property unless it's already set up.
  vmw_kms_suspend - Save modesetting state and turn modesetting off.
  @dev: Pointer to the drm device
  Return: 0 on success. Negative error code on failure.
  vmw_kms_resume - Re-enable modesetting and restore state
  @dev: Pointer to the drm device
  Return: 0 on success. Negative error code on failure.
  State is resumed from a previous vmw_kms_suspend(). It's illegal
  to call this function without a previous vmw_kms_suspend().
  vmw_kms_lost_device - Notify kms that modesetting capabilities will be lost
  @dev: Pointer to the drm device
  vmw_du_helper_plane_update - Helper to do plane update on a display unit.
  @update: The closure structure.
  Call this helper after setting callbacks in &vmw_du_update_plane to do plane
  update on display unit.
  Return: 0 on success or a negative error code on failure.
	
	  Iterate in advance to check if really need plane update and find the
	  number of clips that actually are in plane src for fifo allocation.
 SPDX-License-Identifier: GPL-2.0 OR MIT
  Copyright 2014-2015 VMware, Inc., Palo Alto, CA., USA
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sub license, andor sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:
  The above copyright notice and this permission notice (including the
  next paragraph) shall be included in all copies or substantial portions
  of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
  THE COPYRIGHT HOLDERS, AUTHORS ANDOR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,
  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  USE OR OTHER DEALINGS IN THE SOFTWARE.
  struct vmw_cmdbuf_res - Command buffer managed resource entry.
  @res: Refcounted pointer to a struct vmw_resource.
  @hash: Hash entry for the manager hash table.
  @head: List head used either by the staging list or the manager list
  of commited resources.
  @state: Staging state of this resource entry.
  @man: Pointer to a resource manager for this entry.
  struct vmw_cmdbuf_res_manager - Command buffer resource manager.
  @resources: Hash table containing staged and commited command buffer
  resources
  @list: List of commited command buffer resources.
  @dev_priv: Pointer to a device private structure.
  @resources and @list are protected by the cmdbuf mutex for now.
  vmw_cmdbuf_res_lookup - Look up a command buffer resource
  @man: Pointer to the command buffer resource manager
  @res_type: The resource type, that combined with the user key
  identifies the resource.
  @user_key: The user key.
  Returns a valid refcounted struct vmw_resource pointer on success,
  an error pointer on failure.
  vmw_cmdbuf_res_free - Free a command buffer resource.
  @man: Pointer to the command buffer resource manager
  @entry: Pointer to a struct vmw_cmdbuf_res.
  Frees a struct vmw_cmdbuf_res entry and drops its reference to the
  struct vmw_resource.
  vmw_cmdbuf_res_commit - Commit a list of command buffer resource actions
  @list: Caller's list of command buffer resource actions.
  This function commits a list of command buffer resource
  additions or removals.
  It is typically called when the execbuf ioctl call triggering these
  actions has commited the fifo contents to the device.
  vmw_cmdbuf_res_revert - Revert a list of command buffer resource actions
  @list: Caller's list of command buffer resource action
  This function reverts a list of command buffer resource
  additions or removals.
  It is typically called when the execbuf ioctl call triggering these
  actions failed for some reason, and the command stream was never
  submitted.
  vmw_cmdbuf_res_add - Stage a command buffer managed resource for addition.
  @man: Pointer to the command buffer resource manager.
  @res_type: The resource type.
  @user_key: The user-space id of the resource.
  @res: Valid (refcount != 0) pointer to a struct vmw_resource.
  @list: The staging list.
  This function allocates a struct vmw_cmdbuf_res entry and adds the
  resource to the hash table of the manager identified by @man. The
  entry is then put on the staging list identified by @list.
  vmw_cmdbuf_res_remove - Stage a command buffer managed resource for removal.
  @man: Pointer to the command buffer resource manager.
  @res_type: The resource type.
  @user_key: The user-space id of the resource.
  @list: The staging list.
  @res_p: If the resource is in an already committed state, points to the
  struct vmw_resource on successful return. The pointer will be
  non ref-counted.
  This function looks up the struct vmw_cmdbuf_res entry from the manager
  hash table and, if it exists, removes it. Depending on its current staging
  state it then either removes the entry from the staging list or adds it
  to it with a staging state of removal.
  vmw_cmdbuf_res_man_create - Allocate a command buffer managed resource
  manager.
  @dev_priv: Pointer to a struct vmw_private
  Allocates and initializes a command buffer managed resource manager. Returns
  an error pointer on failure.
  vmw_cmdbuf_res_man_destroy - Destroy a command buffer managed resource
  manager.
  @man: Pointer to the  manager to destroy.
  This function destroys a command buffer managed resource manager and
  unreferences  frees all command buffer managed resources and -entries
  associated with it.
  vmw_cmdbuf_res_man_size - Return the size of a command buffer managed
  resource manager
  Returns the approximate allocation size of a command buffer managed
  resource manager.
  Copyright © 2007 David Airlie
  Copyright © 2009-2015 VMware, Inc., Palo Alto, CA., USA
  All Rights Reserved.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sub license, andor sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:
  The above copyright notice and this permission notice (including the
  next paragraph) shall be included in all copies or substantial portions
  of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
  THE COPYRIGHT HOLDERS, AUTHORS ANDOR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,
  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  USE OR OTHER DEALINGS IN THE SOFTWARE.
  vmw_fb_dirty_flush - flush dirty regions to the kms framebuffer
  @work: The struct work_struct associated with this task.
  This function flushes the dirty regions of the vmalloc framebuffer to the
  kms framebuffer, and if the kms framebuffer is visible, also updated the
  corresponding displays. Note that this function runs even if the kms
  framebuffer is not bound to a crtc and thus not visible, but it's turned
  off during hibernation using the par->dirty.active bool.
	
	  Handle panning when copying from vmalloc to framebuffer.
	  Clip dirty area to framebuffer.
		 if we are active start the dirty work
		
		  Since we've already waited on this work once, try to
		  execute asap.
  Draw code
  Bring up code
 init frees the buffer on failure 
 Detach the KMS framebuffer from crtcs 
 Need new buffer object ? 
	 If there already was stuff dirty we wont
 XXX As shouldn't these be as well. 
	
	  Par
	
	  Create buffers and alloc memory
	
	  Fixed and var
 doing it in hw 
 doing it in hw 
 24 depth per default 
 Use default scratch pixmap (info->pixmap.flags = FB_PIXMAP_SYSTEM) 
	
	  Dirty & Deferred IO
 ??? order 
	
	  Need to reschedule a dirty update, because otherwise that's
	  only done in dirty_mark() if the previous coalesced
	  dirty region was empty.
 SPDX-License-Identifier: GPL-2.0 OR MIT
  Copyright 2009-2016 VMware, Inc., Palo Alto, CA., USA
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sub license, andor sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:
  The above copyright notice and this permission notice (including the
  next paragraph) shall be included in all copies or substantial portions
  of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
  THE COPYRIGHT HOLDERS, AUTHORS ANDOR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,
  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  USE OR OTHER DEALINGS IN THE SOFTWARE.
  Fully encoded drm commands. Might move to vmw_drm.h
  Ioctl definitions.
 these allow direct access to the framebuffers mark as master only 
	
	  The permissions of the below ioctl are overridden in
	  vmw_generic_ioctl(). We require either
	  DRM_MASTER or capable(CAP_SYS_ADMIN).
  vmw_dummy_query_bo_create - create a bo to hold a dummy query result
  @dev_priv: A device private structure.
  This function creates a small buffer object that holds the query
  result for dummy queries emitted as query barriers.
  The function will then map the first page and initialize a pending
  occlusion query result structure, Finally it will unmap the buffer.
  No interruptible waits are done within this function.
  Returns an error if bo creation or initialization fails.
	
	  Create the vbo as pinned, so that a tryreserve will
	  immediately succeed. This is because we're the only
	  user of the bo currently.
	
	  Legacy sync
  vmw_request_device_late - Perform late device setup
  @dev_priv: Pointer to device private.
  This function performs setup of otables and enables large command
  buffer submission. These tasks are split out to a separate function
  because it reverts vmw_release_device_early and is intended to be used
  by an error path in the hibernation code.
  vmw_release_device_early - Early part of fifo takedown.
  @dev_priv: Pointer to device private struct.
  This is the first part of command submission takedown, to be called before
  buffer management is taken down.
	
	  Previous destructions should've released
	  the pinned bo.
  vmw_release_device_late - Late part of fifo takedown.
  @dev_priv: Pointer to device private struct.
  This is the last part of the command submission takedown, to be called when
  command submission is no longer needed. It may wait on pending fences.
  Sets the initial_[width|height] fields on the given vmw_private.
  It does so by reading SVGA_REG_[WIDTH|HEIGHT] regs and then
  clamping the value to fb_max_[width|height] fields and the
  VMW_MIN_INITIAL_[WIDTH|HEIGHT].
  If the values appear to be invalid, set them to
  VMW_MIN_INITIAL_[WIDTH|HEIGHT].
		
		  This is a host error and shouldn't occur.
  vmw_dma_select_mode - Determine how DMA mappings should be set up for this
  system.
  @dev_priv: Pointer to a struct vmw_private
  This functions tries to determine what actions need to be taken by the
  driver to make system pages visible to the device.
  If this function decides that DMA is not possible, it returns -EINVAL.
  The driver may then try to disable features of the device that require
  DMA.
 TTM currently doesn't fully support SEV encryption. 
  vmw_dma_masks - set required page- and dma masks
  @dev_priv: Pointer to struct drm-device
  With 32-bit we can only handle 32 bit PFNs. Optionally set that
  restriction also for 64-bit systems.
	
	  This is approximate size of the vram, the exact size will only
	  be known after we read SVGA_REG_VRAM_SIZE. The PCI resource
	  size will be equal to or bigger than the size reported by
	  SVGA_REG_VRAM_SIZE.
		
		  An arbitrary limit of 512MiB on surface
		  memory. But all HWV8 hardware supports GMR2.
		
		  Workaround for low memory 2D VMs to compensate for the
		  allocation taken by fbdev
 Need mmio memory to check for fifo pitchlock cap. 
	
	  Enable VRAM, but initially don't use it until SVGA is enabled and
	  unhidden.
	
	  "Guest Memory Regions" is an aperture like feature with
	   one slot per bo. There is an upper limit of the number of
	   slots as well as the bo size.
 TODO: This is most likely not correct 
 SVGA_CAP2_DX2 (DefineGBSurface_v3) is needed for SM4_1 support 
	
	  Do extra checking on driver private ioctls.
	
	  Inform a new master that the layout may have changed while
	  it was gone.
  __vmw_svga_enable - Enable SVGA mode, FIFO and use of VRAM.
  @dev_priv: Pointer to device private struct.
  Needs the reservation sem to be held in non-exclusive mode.
  vmw_svga_enable - Enable SVGA mode, FIFO and use of VRAM.
  @dev_priv: Pointer to device private struct.
  __vmw_svga_disable - Disable SVGA mode and use of VRAM.
  @dev_priv: Pointer to device private struct.
  Needs the reservation sem to be held in exclusive mode.
  Will not empty VRAM. VRAM must be emptied by caller.
  vmw_svga_disable - Disable SVGA_MODE, and use of VRAM. Keep the fifo
  running.
  @dev_priv: Pointer to device private struct.
  Will empty VRAM.
	
	  Disabling SVGA will turn off device modesetting capabilities, so
	  notify KMS about that so that it doesn't cache atomic state that
	  isn't valid anymore, for example crtcs turned on.
	  Strictly we'd want to do this under the SVGA lock (or an SVGA mutex),
	  but vmw_kms_lost_device() takes the reservation sem and thus we'll
	  end up with lock order reversal. Thus, a master may actually perform
	  a new modeset just after we call vmw_kms_lost_device() and race with
	  vmw_svga_disable(), but that should at worst cause atomic KMS state
	  to be inconsistent with the device, causing modesetting problems.
	 
		
		  Take the reservation sem in write mode, which will make sure
		  there are no other processes holding a buffer object
		  reservation, meaning we should be able to evict all buffer
		  objects if needed.
		  Once user-space processes have been frozen, we can release
		  the lock again.
	
	  No user-space processes should be running now.
 SPDX-License-Identifier: GPL-2.0 OR MIT
  Copyright 2009-2015 VMware, Inc., Palo Alto, CA., USA
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sub license, andor sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:
  The above copyright notice and this permission notice (including the
  next paragraph) shall be included in all copies or substantial portions
  of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
  THE COPYRIGHT HOLDERS, AUTHORS ANDOR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,
  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  USE OR OTHER DEALINGS IN THE SOFTWARE.
  __vmw_piter_non_sg_next: Helper functions to advance
  a struct vmw_piter iterator.
  @viter: Pointer to the iterator.
  These functions return false if past the end of the list,
  true otherwise. Functions are selected depending on the current
  DMA mapping mode.
  vmw_piter_start - Initialize a struct vmw_piter.
  @viter: Pointer to the iterator to initialize
  @vsgt: Pointer to a struct vmw_sg_table to initialize from
  @p_offset: Pointer offset used to update current array position
  Note that we're following the convention of __sg_page_iter_start, so that
  the iterator doesn't point to a valid page after initialization; it has
  to be advanced one step first.
  vmw_ttm_unmap_from_dma - unmap  device addresses previsouly mapped for
  TTM pages
  @vmw_tt: Pointer to a struct vmw_ttm_backend
  Used to free dma mappings previously mapped by vmw_ttm_map_for_dma.
  vmw_ttm_map_for_dma - map TTM pages to get device addresses
  @vmw_tt: Pointer to a struct vmw_ttm_backend
  This function is used to get device addresses from the kernel DMA layer.
  However, it's violating the DMA API in that when this operation has been
  performed, it's illegal for the CPU to write to the pages without first
  unmapping the DMA mappings, or calling dma_sync_sg_for_cpu(). It is
  therefore only legal to call this function if we know that the function
  dma_sync_sg_for_cpu() is a NOP, and dma_sync_sg_for_device() is at most
  a CPU write buffer flush.
  vmw_ttm_map_dma - Make sure TTM pages are visible to the device
  @vmw_tt: Pointer to a struct vmw_ttm_tt
  Select the correct function for and make sure the TTM pages are
  visible to the device. Allocate storage for the device mappings.
  If a mapping has already been performed, indicated by the storage
  pointer being non NULL, the function returns success.
  vmw_ttm_unmap_dma - Tear down any TTM page device mappings
  @vmw_tt: Pointer to a struct vmw_ttm_tt
  Tear down any previously set up device DMA mappings and free
  any storage space allocated for them. If there are no mappings set up,
  this function is a NOP.
  vmw_bo_sg_table - Return a struct vmw_sg_table object for a
  TTM buffer object
  @bo: Pointer to a struct ttm_buffer_object
  Returns a pointer to a struct vmw_sg_table object. The object should
  not be freed after use.
  Note that for the device addresses to be valid, the buffer object must
  either be reserved or pinned.
 TODO: maybe completely drop this ? 
  vmw_move_notify - TTM move_notify_callback
  @bo: The TTM buffer object about to move.
  @old_mem: The old memory where we move from
  @new_mem: The struct ttm_resource indicating to what memory
        region the move is taking place.
  Calls move_notify for all subsystems needing it.
  (currently only resources).
  vmw_swap_notify - TTM move_notify_callback
  @bo: The TTM buffer object about to be swapped out.
 SPDX-License-Identifier: GPL-2.0 OR MIT
  Copyright 2015 VMware, Inc., Palo Alto, CA., USA
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sub license, andor sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:
  The above copyright notice and this permission notice (including the
  next paragraph) shall be included in all copies or substantial portions
  of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
  THE COPYRIGHT HOLDERS, AUTHORS ANDOR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,
  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  USE OR OTHER DEALINGS IN THE SOFTWARE.
  Size of inline command buffers. Try to make sure that a page size is a
  multiple of the DMA pool allocation size.
  struct vmw_cmdbuf_context - Command buffer context queues
  @submitted: List of command buffers that have been submitted to the
  manager but not yet submitted to hardware.
  @hw_submitted: List of command buffers submitted to hardware.
  @preempted: List of preempted command buffers.
  @num_hw_submitted: Number of buffers currently being processed by hardware
  @block_submission: Identifies a block command submission.
  struct vmw_cmdbuf_man - Command buffer manager
  @cur_mutex: Mutex protecting the command buffer used for incremental small
  kernel command submissions, @cur.
  @space_mutex: Mutex to protect against starvation when we allocate
  main pool buffer space.
  @error_mutex: Mutex to serialize the work queue error handling.
  Note this is not needed if the same workqueue handler
  can't race with itself...
  @work: A struct work_struct implementeing command buffer error handling.
  Immutable.
  @dev_priv: Pointer to the device private struct. Immutable.
  @ctx: Array of command buffer context queues. The queues and the context
  data is protected by @lock.
  @error: List of command buffers that have caused device errors.
  Protected by @lock.
  @mm: Range manager for the command buffer space. Manager allocations and
  frees are protected by @lock.
  @cmd_space: Buffer object for the command buffer space, unless we were
  able to make a contigous coherent DMA memory allocation, @handle. Immutable.
  @map_obj: Mapping state for @cmd_space. Immutable.
  @map: Pointer to command buffer space. May be a mapped buffer object or
  a contigous coherent DMA memory allocation. Immutable.
  @cur: Command buffer for small kernel command submissions. Protected by
  the @cur_mutex.
  @cur_pos: Space already used in @cur. Protected by @cur_mutex.
  @default_size: Default size for the @cur command buffer. Immutable.
  @max_hw_submitted: Max number of in-flight command buffers the device can
  handle. Immutable.
  @lock: Spinlock protecting command submission queues.
  @headers: Pool of DMA memory for device command buffer headers.
  Internal protection.
  @dheaders: Pool of DMA memory for device command buffer headers with trailing
  space for inline data. Internal protection.
  @alloc_queue: Wait queue for processes waiting to allocate command buffer
  space.
  @idle_queue: Wait queue for processes waiting for command buffer idle.
  @irq_on: Whether the process function has requested irq to be turned on.
  Protected by @lock.
  @using_mob: Whether the command buffer space is a MOB or a contigous DMA
  allocation. Immutable.
  @has_pool: Has a large pool of DMA memory which allows larger allocations.
  Typically this is false only during bootstrap.
  @handle: DMA address handle for the command buffer space if @using_mob is
  false. Immutable.
  @size: The size of the command buffer space. Immutable.
  @num_contexts: Number of contexts actually enabled.
  struct vmw_cmdbuf_header - Command buffer metadata
  @man: The command buffer manager.
  @cb_header: Device command buffer header, allocated from a DMA pool.
  @cb_context: The device command buffer context.
  @list: List head for attaching to the manager lists.
  @node: The range manager node.
  @handle: The DMA address of @cb_header. Handed to the device on command
  buffer submission.
  @cmd: Pointer to the command buffer space of this buffer.
  @size: Size of the command buffer space of this buffer.
  @reserved: Reserved space of this buffer.
  @inline_space: Whether inline command buffer space is used.
  struct vmw_cmdbuf_dheader - Device command buffer header with inline
  command buffer space.
  @cb_header: Device command buffer header.
  @cmd: Inline command buffer space.
  struct vmw_cmdbuf_alloc_info - Command buffer space allocation metadata
  @page_size: Size of requested command buffer space in pages.
  @node: Pointer to the range manager node.
  @done: True if this allocation has succeeded.
 Loop over each context in the command buffer manager. 
  vmw_cmdbuf_cur_lock - Helper to lock the cur_mutex.
  @man: The range manager.
  @interruptible: Whether to wait interruptible when locking.
  vmw_cmdbuf_cur_unlock - Helper to unlock the cur_mutex.
  @man: The range manager.
  vmw_cmdbuf_header_inline_free - Free a struct vmw_cmdbuf_header that has
  been used for the device context with inline command buffers.
  Need not be called locked.
  @header: Pointer to the header to free.
  __vmw_cmdbuf_header_free - Free a struct vmw_cmdbuf_header  and its
  associated structures.
  @header: Pointer to the header to free.
  For internal use. Must be called with man::lock held.
  vmw_cmdbuf_header_free - Free a struct vmw_cmdbuf_header  and its
  associated structures.
  @header: Pointer to the header to free.
 Avoid locking if inline_space 
  vmw_cmdbuf_header_submit: Submit a command buffer to hardware.
  @header: The header of the buffer to submit.
  vmw_cmdbuf_ctx_init: Initialize a command buffer context.
  @ctx: The command buffer context to initialize
  vmw_cmdbuf_ctx_submit: Submit command buffers from a command buffer
  context.
  @man: The command buffer manager.
  @ctx: The command buffer context.
  Submits command buffers to hardware until there are no more command
  buffers to submit or the hardware can't handle more command buffers.
 This should never happen 
  vmw_cmdbuf_ctx_process - Process a command buffer context.
  @man: The command buffer manager.
  @ctx: The command buffer context.
  @notempty: Pass back count of non-empty command submitted lists.
  Submit command buffers to hardware if possible, and process finished
  buffers. Typically freeing them, but on preemption or error take
  appropriate action. Wake up waiters if appropriate.
  vmw_cmdbuf_man_process - Process all command buffer contexts and
  switch on and off irqs as appropriate.
  @man: The command buffer manager.
  Calls vmw_cmdbuf_ctx_process() on all contexts. If any context has
  command buffers left that are not submitted to hardware, Make sure
  IRQ handling is turned on. Otherwise, make sure it's turned off.
 Rerun in case we just missed an irq. 
  vmw_cmdbuf_ctx_add - Schedule a command buffer for submission on a
  command buffer context
  @man: The command buffer manager.
  @header: The header of the buffer to submit.
  @cb_context: The command buffer context to use.
  This function adds @header to the "submitted" queue of the command
  buffer context identified by @cb_context. It then calls the command buffer
  manager processing to potentially submit the buffer to hardware.
  @man->lock needs to be held when calling this function.
  vmw_cmdbuf_irqthread - The main part of the command buffer interrupt
  handler implemented as a threaded irq task.
  @man: Pointer to the command buffer manager.
  The bottom half of the interrupt handler simply calls into the
  command buffer processor to free finished buffers and submit any
  queued buffers to hardware.
  vmw_cmdbuf_work_func - The deferred work function that handles
  command buffer errors.
  @work: The work func closure argument.
  Restarting the command buffer context after an error requires process
  context, so it is deferred to this work function.
 Preempt all contexts 
 Move preempted command buffers to the preempted queue. 
		
		  Add the preempted queue after the command buffer
		  that caused an error.
		
		  Finally add all command buffers first in the submitted
		  queue, to rerun them.
 Send a new fence in case one was removed 
  vmw_cmdbuf_man_idle - Check whether the command buffer manager is idle.
  @man: The command buffer manager.
  @check_preempted: Check also the preempted queue for pending command buffers.
  __vmw_cmdbuf_cur_flush - Flush the current command buffer for small kernel
  command submissions
  @man: The command buffer manager.
  Flushes the current command buffer without allocating a new one. A new one
  is automatically allocated when needed. Call with @man->cur_mutex held.
  vmw_cmdbuf_cur_flush - Flush the current command buffer for small kernel
  command submissions
  @man: The command buffer manager.
  @interruptible: Whether to sleep interruptible when sleeping.
  Flushes the current command buffer without allocating a new one. A new one
  is automatically allocated when needed.
  vmw_cmdbuf_idle - Wait for command buffer manager idle.
  @man: The command buffer manager.
  @interruptible: Sleep interruptible while waiting.
  @timeout: Time out after this many ticks.
  Wait until the command buffer manager has processed all command buffers,
  or until a timeout occurs. If a timeout occurs, the function will return
  -EBUSY.
  vmw_cmdbuf_try_alloc - Try to allocate buffer space from the main pool.
  @man: The command buffer manager.
  @info: Allocation info. Will hold the size on entry and allocated mm node
  on successful return.
  Try to allocate buffer space from the main pool. Returns true if succeeded.
  If a fatal error was hit, the error code is returned in @info->ret.
  vmw_cmdbuf_alloc_space - Allocate buffer space from the main pool.
  @man: The command buffer manager.
  @node: Pointer to pre-allocated range-manager node.
  @size: The size of the allocation.
  @interruptible: Whether to sleep interruptible while waiting for space.
  This function allocates buffer space from the main pool, and if there is
  no space available ATM, it turns on IRQ handling and sleeps waiting for it to
  become available.
	
	  To prevent starvation of large requests, only one allocating call
	  at a time waiting for space.
 Try to allocate space without waiting. 
  vmw_cmdbuf_space_pool - Set up a command buffer header with command buffer
  space from the main pool.
  @man: The command buffer manager.
  @header: Pointer to the header to set up.
  @size: The requested size of the buffer space.
  @interruptible: Whether to sleep interruptible while waiting for space.
  vmw_cmdbuf_space_inline - Set up a command buffer header with
  inline command buffer space.
  @man: The command buffer manager.
  @header: Pointer to the header to set up.
  @size: The requested size of the buffer space.
  vmw_cmdbuf_alloc - Allocate a command buffer header complete with
  command buffer space.
  @man: The command buffer manager.
  @size: The requested size of the buffer space.
  @interruptible: Whether to sleep interruptible while waiting for space.
  @p_header: points to a header pointer to populate on successful return.
  Returns a pointer to command buffer space if successful. Otherwise
  returns an error pointer. The header pointer returned in @p_header should
  be used for upcoming calls to vmw_cmdbuf_reserve() and vmw_cmdbuf_commit().
  vmw_cmdbuf_reserve_cur - Reserve space for commands in the current
  command buffer.
  @man: The command buffer manager.
  @size: The requested size of the commands.
  @ctx_id: The context id if any. Otherwise set to SVGA3D_REG_INVALID.
  @interruptible: Whether to sleep interruptible while waiting for space.
  Returns a pointer to command buffer space if successful. Otherwise
  returns an error pointer.
  vmw_cmdbuf_commit_cur - Commit commands in the current command buffer.
  @man: The command buffer manager.
  @size: The size of the commands actually written.
  @flush: Whether to flush the command buffer immediately.
  vmw_cmdbuf_reserve - Reserve space for commands in a command buffer.
  @man: The command buffer manager.
  @size: The requested size of the commands.
  @ctx_id: The context id if any. Otherwise set to SVGA3D_REG_INVALID.
  @interruptible: Whether to sleep interruptible while waiting for space.
  @header: Header of the command buffer. NULL if the current command buffer
  should be used.
  Returns a pointer to command buffer space if successful. Otherwise
  returns an error pointer.
  vmw_cmdbuf_commit - Commit commands in a command buffer.
  @man: The command buffer manager.
  @size: The size of the commands actually written.
  @header: Header of the command buffer. NULL if the current command buffer
  should be used.
  @flush: Whether to flush the command buffer immediately.
  vmw_cmdbuf_send_device_command - Send a command through the device context.
  @man: The command buffer manager.
  @command: Pointer to the command to send.
  @size: Size of the command.
  Synchronously sends a device context command.
  vmw_cmdbuf_preempt - Send a preempt command through the device
  context.
  @man: The command buffer manager.
  @context: Device context to pass command through.
  Synchronously sends a preempt command.
  vmw_cmdbuf_startstop - Send a start  stop command through the device
  context.
  @man: The command buffer manager.
  @context: Device context to startstop.
  @enable: Whether to enable or disable the context.
  Synchronously sends a device start  stop context command.
  vmw_cmdbuf_set_pool_size - Set command buffer manager sizes
  @man: The command buffer manager.
  @size: The size of the main space pool.
  Set the size and allocate the main command buffer space pool.
  If successful, this enables large command submissions.
  Note that this function requires that rudimentary command
  submission is already available and that the MOB memory manager is alive.
  Returns 0 on success. Negative error code on failure.
 First, try to allocate a huge chunk of DMA memory 
		
		  DMA memory failed. If we can have command buffers in a
		  MOB, try to use that instead. Note that this will
		  actually call into the already enabled manager, when
		  binding the MOB.
	
	  For now, set the default size to VMW_CMDBUF_INLINE_SIZE to
	  prevent deadlocks from happening when vmw_cmdbuf_space_pool()
	  needs to wait for space and we block on further command
	  submissions to be able to free up space.
  vmw_cmdbuf_man_create: Create a command buffer manager and enable it for
  inline command buffer submissions only.
  @dev_priv: Pointer to device private structure.
  Returns a pointer to a cummand buffer manager to success or error pointer
  on failure. The command buffer manager will be enabled for submissions of
  size VMW_CMDBUF_INLINE_SIZE only.
  vmw_cmdbuf_remove_pool - Take down the main buffer space pool.
  @man: Pointer to a command buffer manager.
  This function removes the main buffer space pool, and should be called
  before MOB memory management is removed. When this function has been called,
  only small command buffer submissions of size VMW_CMDBUF_INLINE_SIZE or
  less are allowed, and the default size of the command buffer for small kernel
  submissions is also set to this size.
  vmw_cmdbuf_man_destroy - Take down a command buffer manager.
  @man: Pointer to a command buffer manager.
  This function idles and then destroys a command buffer manager.
 SPDX-License-Identifier: GPL-2.0 OR MIT
  Copyright 2009-2015 VMware, Inc., Palo Alto, CA., USA
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sub license, andor sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:
  The above copyright notice and this permission notice (including the
  next paragraph) shall be included in all copies or substantial portions
  of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
  THE COPYRIGHT HOLDERS, AUTHORS ANDOR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,
  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  USE OR OTHER DEALINGS IN THE SOFTWARE.
  struct vmw_user_surface - User-space visible surface resource
  @prime:          The TTM prime object.
  @base:           The TTM base object handling user-space visibility.
  @srf:            The surface metadata.
  @size:           TTM accounting size for the surface.
  @master:         Master of the creating client. Used for security check.
  @backup_base:    The TTM base object of the backup buffer.
  struct vmw_surface_offset - Backing store mip level offset info
  @face:           Surface face.
  @mip:            Mip level.
  @bo_offset:      Offset into backing store of this mip level.
  struct vmw_surface_dirty - Surface dirty-tracker
  @cache: Cached layout information of the surface.
  @size: Accounting size for the struct vmw_surface_dirty.
  @num_subres: Number of subresources.
  @boxes: Array of SVGA3dBoxes indicating dirty regions. One per subresource.
  struct vmw_surface_dma - SVGA3D DMA command
  struct vmw_surface_define - SVGA3D Surface Define command
  struct vmw_surface_destroy - SVGA3D Surface Destroy command
  vmw_surface_dma_size - Compute fifo size for a dma command.
  @srf: Pointer to a struct vmw_surface
  Computes the required size for a surface dma command for backup or
  restoration of the surface represented by @srf.
  vmw_surface_define_size - Compute fifo size for a surface define command.
  @srf: Pointer to a struct vmw_surface
  Computes the required size for a surface define command for the definition
  of the surface represented by @srf.
  vmw_surface_destroy_size - Compute fifo size for a surface destroy command.
  Computes the required size for a surface destroy command for the destruction
  of a hw surface.
  vmw_surface_destroy_encode - Encode a surface_destroy command.
  @id: The surface id
  @cmd_space: Pointer to memory area in which the commands should be encoded.
  vmw_surface_define_encode - Encode a surface_define command.
  @srf: Pointer to a struct vmw_surface object.
  @cmd_space: Pointer to memory area in which the commands should be encoded.
	
	  Downcast of surfaceFlags, was upcasted when received from user-space,
	  since driver internally stores as 64 bit.
	  For legacy surface define only 32 bit flag is supported.
  vmw_surface_dma_encode - Encode a surface_dma command.
  @srf: Pointer to a struct vmw_surface object.
  @cmd_space: Pointer to memory area in which the commands should be encoded.
  @ptr: Pointer to an SVGAGuestPtr indicating where the surface contents
  should be placed or read from.
  @to_surface: Boolean whether to DMA to the surface or from the surface.
  vmw_hw_surface_destroy - destroy a Device surface
  @res:        Pointer to a struct vmw_resource embedded in a struct
               vmw_surface.
  Destroys a the device surface associated with a struct vmw_surface if
  any, and adjusts accounting and resource count accordingly.
		
		  used_memory_size_atomic, or separate lock
		  to avoid taking dev_priv::cmdbuf_mutex in
		  the destroy path.
  vmw_legacy_srf_create - Create a device surface as part of the
  resource validation process.
  @res: Pointer to a struct vmw_surface.
  If the surface doesn't have a hw id.
  Returns -EBUSY if there wasn't sufficient device resources to
  complete the validation. Retry after freeing up resources.
  May return other errors if the kernel is out of guest resources.
	
	  Alloc id for the resource.
	
	  Encode surface define- commands.
	
	  Surface memory usage accounting.
  vmw_legacy_srf_dma - Copy backup data to or from a legacy surface.
  @res:            Pointer to a struct vmw_res embedded in a struct
                   vmw_surface.
  @val_buf:        Pointer to a struct ttm_validate_buffer containing
                   information about the backup buffer.
  @bind:           Boolean wether to DMA to the surface.
  Transfer backup data to or from a legacy surface as part of the
  validation process.
  May return other errors if the kernel is out of guest resources.
  The backup buffer will be fenced or idle upon successful completion,
  and if the surface needs persistent backup storage, the backup buffer
  will also be returned reserved iff @bind is true.
	
	  Create a fence object and fence the backup buffer.
  vmw_legacy_srf_bind - Perform a legacy surface bind as part of the
                        surface validation process.
  @res:            Pointer to a struct vmw_res embedded in a struct
                   vmw_surface.
  @val_buf:        Pointer to a struct ttm_validate_buffer containing
                   information about the backup buffer.
  This function will copy backup data to the surface if the
  backup buffer is dirty.
  vmw_legacy_srf_unbind - Perform a legacy surface unbind as part of the
                          surface eviction process.
  @res:            Pointer to a struct vmw_res embedded in a struct
                   vmw_surface.
  @readback:       Readback - only true if dirty
  @val_buf:        Pointer to a struct ttm_validate_buffer containing
                   information about the backup buffer.
  This function will copy backup data from the surface.
  vmw_legacy_srf_destroy - Destroy a device surface as part of a
                           resource eviction process.
  @res:            Pointer to a struct vmw_res embedded in a struct
                   vmw_surface.
	
	  Encode the dma- and surface destroy commands.
	
	  Surface memory usage accounting.
	
	  Release the surface ID.
  vmw_surface_init - initialize a struct vmw_surface
  @dev_priv:       Pointer to a device private struct.
  @srf:            Pointer to the struct vmw_surface to initialize.
  @res_free:       Pointer to a resource destructor used to free
                   the object.
	
	  The surface won't be visible to hardware until a
	  surface validate.
  vmw_user_surface_base_to_res - TTM base object to resource converter for
                                 user visible surfaces
  @base:           Pointer to a TTM base object
  Returns the struct vmw_resource embedded in a struct vmw_surface
  for the user-visible object identified by the TTM base object @base.
  vmw_user_surface_free - User visible surface resource destructor
  @res:            A struct vmw_resource embedded in a struct vmw_surface.
  vmw_user_surface_base_release - User visible surface TTM base object destructor
  @p_base:         Pointer to a pointer to a TTM base object
                   embedded in a struct vmw_user_surface.
  Drops the base object's reference on its resource, and the
  pointer pointed to by p_base is set to NULL.
  vmw_surface_destroy_ioctl - Ioctl function implementing
                                   the user surface destroy functionality.
  @dev:            Pointer to a struct drm_device.
  @data:           Pointer to data copied from  to user-space.
  @file_priv:      Pointer to a drm file private structure.
  vmw_surface_define_ioctl - Ioctl function implementing
                                   the user surface define functionality.
  @dev:            Pointer to a struct drm_device.
  @data:           Pointer to data copied from  to user-space.
  @file_priv:      Pointer to a drm file private structure.
 Driver internally stores as 64-bit flags 
	
	  From this point, the generic resource management functions
	  destroy the object on failure.
	
	  A gb-aware client referencing a shared surface will
	  expect a backup buffer to be present.
 Error out if we are unauthenticated primary 
		
		  Make sure the surface creator has the same
		  authenticating master, or is already registered with us.
  vmw_surface_reference_ioctl - Ioctl function implementing
                                   the user surface reference functionality.
  @dev:            Pointer to a struct drm_device.
  @data:           Pointer to data copied from  to user-space.
  @file_priv:      Pointer to a drm file private structure.
 Downcast of flags when sending back to user space 
  vmw_gb_surface_create - Encode a surface_define command.
  @res:        Pointer to a struct vmw_resource embedded in a struct
               vmw_surface.
 VMW_SM_4 support verified at creation time. 
 We've just made a full upload. Cear dirty regions. 
	
	  Create a fence object and fence the backup buffer.
  vmw_gb_surface_define_ioctl - Ioctl function implementing
  the user surface define functionality.
  @dev: Pointer to a struct drm_device.
  @data: Pointer to data copied from  to user-space.
  @file_priv: Pointer to a drm file private structure.
  vmw_gb_surface_reference_ioctl - Ioctl function implementing
  the user surface reference functionality.
  @dev: Pointer to a struct drm_device.
  @data: Pointer to data copied from  to user-space.
  @file_priv: Pointer to a drm file private structure.
  vmw_gb_surface_define_ext_ioctl - Ioctl function implementing
  the user surface define functionality.
  @dev: Pointer to a struct drm_device.
  @data: Pointer to data copied from  to user-space.
  @file_priv: Pointer to a drm file private structure.
  vmw_gb_surface_reference_ext_ioctl - Ioctl function implementing
  the user surface reference functionality.
  @dev: Pointer to a struct drm_device.
  @data: Pointer to data copied from  to user-space.
  @file_priv: Pointer to a drm file private structure.
  vmw_gb_surface_define_internal - Ioctl function implementing
  the user surface define functionality.
  @dev: Pointer to a struct drm_device.
  @req: Request argument from user-space.
  @rep: Response argument to user-space.
  @file_priv: Pointer to a drm file private structure.
 array_size must be null for non-GL3 host. 
 Define a surface based on the parameters. 
  vmw_gb_surface_reference_internal - Ioctl function implementing
  the user surface reference functionality.
  @dev: Pointer to a struct drm_device.
  @req: Pointer to user-space request surface arg.
  @rep: Pointer to response to user-space.
  @file_priv: Pointer to a drm file private structure.
 Protect res->backup 
  vmw_subres_dirty_add - Add a dirty region to a subresource
  @dirty: The surfaces's dirty tracker.
  @loc_start: The location corresponding to the start of the region.
  @loc_end: The location corresponding to the end of the region.
  As we are assuming that @loc_start and @loc_end represent a sequential
  range of backing store memory, if the region spans multiple lines then
  regardless of the x coordinate, the full lines are dirtied.
  Correspondingly if the region spans multiple z slices, then full rather
  than partial z slices are dirtied.
  vmw_subres_dirty_full - Mark a full subresource as dirty
  @dirty: The surface's dirty tracker.
  @subres: The subresource
  vmw_surface_tex_dirty_add_range - The dirty_add_range callback for texture
  surfaces.
		
		  Multiple multisample sheets. To do this in an optimized
		  fashion, compute the dirty region for each sheet and the
		  resulting union. Since this is not a common case, just dirty
		  the whole surface.
 Dirty range covers a single sub-resource 
 Dirty range covers multiple sub-resources 
  vmw_surface_tex_dirty_add_range - The dirty_add_range callback for buffer
  surfaces.
  vmw_surface_tex_dirty_add_range - The dirty_add_range callback for surfaces
  vmw_surface_dirty_sync - The surface's dirty_sync callback.
		
		  DX_UPDATE_SUBRESOURCE is aware of array surfaces.
		  UPDATE_GB_IMAGE is not.
  vmw_surface_dirty_alloc - The surface's dirty_alloc callback.
  vmw_surface_dirty_free - The surface's dirty_free callback
  vmw_surface_clean - The surface's clean callback
  vmw_gb_surface_define - Define a private GB surface
  @dev_priv: Pointer to a device private.
  @user_accounting_size:  Used to track user-space memory usage, set
                          to 0 for kernel mode only memory
  @metadata: Metadata representing the surface to create.
  @user_srf_out: allocated user_srf. Set to NULL on failure.
  GB surfaces allocated by this function will not have a user mode handle, and
  thus will only be visible to vmwgfx.  For optimization reasons the
  surface may later be given a user mode handle by another function to make
  it available to user mode drivers.
	
	  Don't set SVGA3D_SURFACE_SCREENTARGET flag for a scanout surface with
	  size greater than STDU max widthheight. This is really a workaround
	  to support creation of big framebuffer requested by some user-space
	  for whole topology. That big framebuffer won't really be used for
	  binding with screen target as during prepare_fb a separate surface is
	  created so it's safe to ignore SVGA3D_SURFACE_SCREENTARGET flag.
	
	  From this point, the generic resource management functions
	  destroy the object on failure.
 SPDX-License-Identifier: GPL-2.0 OR MIT
  Copyright 2011-2015 VMware, Inc., Palo Alto, CA., USA
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sub license, andor sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:
  The above copyright notice and this permission notice (including the
  next paragraph) shall be included in all copies or substantial portions
  of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
  THE COPYRIGHT HOLDERS, AUTHORS ANDOR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,
  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  USE OR OTHER DEALINGS IN THE SOFTWARE.
  struct vmw_kms_sou_surface_dirty - Closure structure for
  blit surface to screen command.
  @base: The base type we derive from. Used by vmw_kms_helper_dirty().
  @left: Left side of bounding box.
  @right: Right side of bounding box.
  @top: Top side of bounding box.
  @bottom: Bottom side of bounding box.
  @dst_x: Difference between source clip rects and framebuffer coordinates.
  @dst_y: Difference between source clip rects and framebuffer coordinates.
  @sid: Surface id of surface to copy from.
  SVGA commands that are used by this code. Please see the device headers
  for explanation.
  Display unit using screen objects.
< Size of allocated buffer 
< Backing store buffer 
  Screen Object Display Unit CRTC functions
  Send the fifo command to create a screen.
 Ok to assume that buffer is pinned in vram 
  Send the fifo command to destroy a screen.
 no need to do anything 
 Force sync 
  vmw_sou_crtc_mode_set_nofb - Create new screen
  @crtc: CRTC associated with the new screen
  This function createsdestroys a screen.  This function cannot fail, so if
  somehow we run into a failure, just do the best we can to get out.
  vmw_sou_crtc_helper_prepare - Noop
  @crtc:  CRTC associated with the new screen
  Prepares the CRTC for a mode set, but we don't need to do anything here.
  vmw_sou_crtc_atomic_enable - Noop
  @crtc: CRTC associated with the new screen
  @state: Unused
  This is called after a mode set has been completed.
  vmw_sou_crtc_atomic_disable - Turns off CRTC
  @crtc: CRTC to be turned off
  @state: Unused
  Screen Object Display Unit encoder functions
  Screen Object Display Unit connector functions
  Screen Object Display Plane Functions
  vmw_sou_primary_plane_cleanup_fb - Frees sou backing buffer
  @plane:  display plane
  @old_state: Contains the FB to clean up
  Unpins the display surface
  Returns 0 on success
  vmw_sou_primary_plane_prepare_fb - allocate backing buffer
  @plane:  display plane
  @new_state: info on the new plane state, including the FB
  The SOU backing buffer is our equivalent of the display plane.
  Returns 0 on success
			
			  Note that this might temporarily up the pin-count
			  to 2, until cleanup_fb() is called.
	 After we have alloced the backing store might not be able to
	  resume the overlays, this is preferred to failing to alloc.
 vmw_bo_init frees on error 
	
	  TTM already thinks the buffer is pinned, but make sure the
	  pin_count is upped.
	 Emulate RGBA support, contrary to svga_reg.h this is not
	  supported by hosts. This is only a problem if we are reading
	  this value later and expecting what we uploaded back.
  vmw_sou_plane_update_bo - Update display unit for bo backed fb.
  @dev_priv: Device private.
  @plane: Plane state.
  @old_state: Old plane state.
  @vfb: Framebuffer which is blitted to display unit.
  @out_fence: If non-NULL, will return a ref-counted pointer to vmw_fence_obj.
              The returned fence pointer may be NULL in which case the device
              has already synchronized.
  Return: 0 on success or a negative error code on failure.
	
	  SOU SVGA_3D_CMD_BLIT_SURFACE_TO_SCREEN is special in the sense that
	  its bounding box is filled before iterating over all the clips. So
	  store the FIFO start address and revisit to fill the details.
 Update the source and destination bounding box later in post_clip 
	
	  rects are relative to dest bounding box rect on screen object, so
	  translate to it later in post_clip
 To translate bb back to fb src coord 
 rects are relative to dest bb rect 
  vmw_sou_plane_update_surface - Update display unit for surface backed fb.
  @dev_priv: Device private.
  @plane: Plane state.
  @old_state: Old plane state.
  @vfb: Framebuffer which is blitted to display unit
  @out_fence: If non-NULL, will return a ref-counted pointer to vmw_fence_obj.
              The returned fence pointer may be NULL in which case the device
              has already synchronized.
  Return: 0 on success or a negative error code on failure.
 In case of device error, maintain consistent atomic state 
 Do nothing when fb and crtc is NULL (blank crtc) 
 For error case vblank event is send from vmw_du_crtc_atomic_flush 
  Atomic Helpers
	
	  Remove this after enabling atomic because property values can
	  only exist in a state object
 Initialize primary plane 
 Initialize cursor plane 
	 Emulate RGBA support, contrary to svga_reg.h this is not
	  supported by hosts. This is only a problem if we are reading
	  this value later and expecting what we uploaded back.
 Buffer is reserved in vram or GMR 
  vmw_sou_surface_fifo_commit - Callback to fill in and submit a
  blit surface to screen command.
  @dirty: The closure structure.
  Fills in the missing fields in the command, and translates the cliprects
  to match the destination bounding box encoded.
	
	  Use the destination bounding box to specify destination - and
	  source bounding regions.
 Blits are relative to the destination rect. Translate. 
  vmw_sou_surface_clip - Callback to encode a blit surface to screen cliprect.
  @dirty: The closure structure
  Encodes a SVGASignedRect cliprect and updates the bounding box of the
  BLIT_SURFACE_TO_SCREEN command.
 Destination rect. 
 Destination bounding box 
  vmw_kms_sou_do_surface_dirty - Dirty part of a surface backed framebuffer
  @dev_priv: Pointer to the device private structure.
  @framebuffer: Pointer to the surface-buffer backed framebuffer.
  @clips: Array of clip rects. Either @clips or @vclips must be NULL.
  @vclips: Alternate array of clip rects. Either @clips or @vclips must
  be NULL.
  @srf: Pointer to surface to blit from. If NULL, the surface attached
  to @framebuffer will be used.
  @dest_x: X coordinate offset to align @srf with framebuffer coordinates.
  @dest_y: Y coordinate offset to align @srf with framebuffer coordinates.
  @num_clips: Number of clip rects in @clips.
  @inc: Increment to use when looping over @clips.
  @out_fence: If non-NULL, will return a ref-counted pointer to a
  struct vmw_fence_obj. The returned fence pointer may be NULL in which
  case the device has already synchronized.
  @crtc: If crtc is passed, perform surface dirty on that crtc only.
  Returns 0 on success, negative error code on failure. -ERESTARTSYS if
  interrupted.
  vmw_sou_bo_fifo_commit - Callback to submit a set of readback clips.
  @dirty: The closure structure.
  Commits a previously built command buffer of readback clips.
  vmw_sou_bo_clip - Callback to encode a readback cliprect.
  @dirty: The closure structure
  Encodes a BLIT_GMRFB_TO_SCREEN cliprect.
  vmw_kms_sou_do_bo_dirty - Dirty part of a buffer-object backed framebuffer
  @dev_priv: Pointer to the device private structure.
  @framebuffer: Pointer to the buffer-object backed framebuffer.
  @clips: Array of clip rects.
  @vclips: Alternate array of clip rects. Either @clips or @vclips must
  be NULL.
  @num_clips: Number of clip rects in @clips.
  @increment: Increment to use when looping over @clips.
  @interruptible: Whether to perform waits interruptible if possible.
  @out_fence: If non-NULL, will return a ref-counted pointer to a
  struct vmw_fence_obj. The returned fence pointer may be NULL in which
  case the device has already synchronized.
  @crtc: If crtc is passed, perform bo dirty on that crtc only.
  Returns 0 on success, negative error code on failure. -ERESTARTSYS if
  interrupted.
  vmw_sou_readback_fifo_commit - Callback to submit a set of readback clips.
  @dirty: The closure structure.
  Commits a previously built command buffer of readback clips.
  vmw_sou_readback_clip - Callback to encode a readback cliprect.
  @dirty: The closure structure
  Encodes a BLIT_SCREEN_TO_GMRFB cliprect.
  vmw_kms_sou_readback - Perform a readback from the screen object system to
  a buffer-object backed framebuffer.
  @dev_priv: Pointer to the device private structure.
  @file_priv: Pointer to a struct drm_file identifying the caller.
  Must be set to NULL if @user_fence_rep is NULL.
  @vfb: Pointer to the buffer-object backed framebuffer.
  @user_fence_rep: User-space provided structure for fence information.
  Must be set to non-NULL if @file_priv is non-NULL.
  @vclips: Array of clip rects.
  @num_clips: Number of clip rects in @vclips.
  @crtc: If crtc is passed, readback on that crtc only.
  Returns 0 on success, negative error code on failure. -ERESTARTSYS if
  interrupted.
 SPDX-License-Identifier: GPL-2.0 OR MIT
  Copyright 2017 VMware, Inc., Palo Alto, CA., USA
  All Rights Reserved.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sub license, andor sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:
  The above copyright notice and this permission notice (including the
  next paragraph) shall be included in all copies or substantial portions
  of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
  THE COPYRIGHT HOLDERS, AUTHORS ANDOR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,
  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  USE OR OTHER DEALINGS IN THE SOFTWARE.
  Template that implements find_first_diff() for a generic
  unsigned integer type. @size and return value are in bytes.
  Template that implements find_last_diff() for a generic
  unsigned integer type. Pointers point to the item following the
  end of the area to be examined. @size and return value are in
  bytes.
  Instantiate find diff functions for relevant unsigned integer sizes,
  assuming that wider integers are faster (including aligning) up to the
  architecture native width, which is assumed to be 32 bit unless
  CONFIG_64BIT is defined.
 We use size aligned copies. This computes (addr - align(addr)) 
  Template to compute find_first_diff() for a certain integer type
  including a head copy for alignment, and adjustment of parameters
  for tail find or increased resolution find using an unsigned integer find
  of smaller width. If finding is complete, and resolution is sufficient,
  the macro executes a return statement. Otherwise it falls through.
  vmw_find_first_diff - find the first difference between dst and src
  @dst: The destination address
  @src: The source address
  @size: Number of bytes to compare
  @granularity: The granularity needed for the return value in bytes.
  return: The offset from find start where the first difference was
  encountered in bytes. If no difference was found, the function returns
  a value >= @size.
	
	  Try finding with large integers if alignment allows, or we can
	  fix it. Fall through if we need better resolution or alignment
	  was bad.
  Template to compute find_last_diff() for a certain integer type
  including a tail copy for alignment, and adjustment of parameters
  for head find or increased resolution find using an unsigned integer find
  of smaller width. If finding is complete, and resolution is sufficient,
  the macro executes a return statement. Otherwise it falls through.
  vmw_find_last_diff - find the last difference between dst and src
  @dst: The destination address
  @src: The source address
  @size: Number of bytes to compare
  @granularity: The granularity needed for the return value in bytes.
  return: The offset from find start where the last difference was
  encountered in bytes, or a negative value if no difference was found.
  vmw_memcpy - A wrapper around kernel memcpy with allowing to plug it into a
  struct vmw_diff_cpy.
  @diff: The struct vmw_diff_cpy closure argument (unused).
  @dest: The copy destination.
  @src: The copy source.
  @n: Number of bytes to copy.
  vmw_adjust_rect - Adjust rectangle coordinates for newly found difference
  @diff: The struct vmw_diff_cpy used to track the modified bounding box.
  @diff_offs: The offset from @diff->line_offset where the difference was
  found.
  vmw_diff_memcpy - memcpy that creates a bounding box of modified content.
  @diff: The struct vmw_diff_cpy used to track the modified bounding box.
  @dest: The copy destination.
  @src: The copy source.
  @n: Number of bytes to copy.
  In order to correctly track the modified content, the field @diff->line must
  be pre-loaded with the current line number, the field @diff->line_offset must
  be pre-loaded with the line offset in bytes where the copy starts, and
  finally the field @diff->cpp need to be preloaded with the number of bytes
  per unit in the horizontal direction of the area we're examining.
  Typically bytes per pixel.
  This is needed to know the needed granularity of the difference computing
  operations. A higher cpp generally leads to faster execution at the cost of
  bounding box width precision.
 TODO: Possibly use a single vmw_find_first_diff per line? 
		
		  Starting from where first difference was found, find
		  location of last difference, and then copy.
  struct vmw_bo_blit_line_data - Convenience argument to vmw_bo_cpu_blit_line
  @mapped_dst: Already mapped destination page index in @dst_pages.
  @dst_addr: Kernel virtual address of mapped destination page.
  @dst_pages: Array of destination bo pages.
  @dst_num_pages: Number of destination bo pages.
  @dst_prot: Destination bo page protection.
  @mapped_src: Already mapped source page index in @dst_pages.
  @src_addr: Kernel virtual address of mapped source page.
  @src_pages: Array of source bo pages.
  @src_num_pages: Number of source bo pages.
  @src_prot: Source bo page protection.
  @diff: Struct vmw_diff_cpy, in the end forwarded to the memcpy routine.
  vmw_bo_cpu_blit_line - Blit part of a line from one bo to another.
  @d: Blit data as described above.
  @dst_offset: Destination copy start offset from start of bo.
  @src_offset: Source copy start offset from start of bo.
  @bytes_to_copy: Number of bytes to copy in this line.
  vmw_bo_cpu_blit - in-kernel cpu blit.
  @dst: Destination buffer object.
  @dst_offset: Destination offset of blit start in bytes.
  @dst_stride: Destination stride in bytes.
  @src: Source buffer object.
  @src_offset: Source offset of blit start in bytes.
  @src_stride: Source stride in bytes.
  @w: Width of blit.
  @h: Height of blit.
  @diff: The struct vmw_diff_cpy used to track the modified bounding box.
  return: Zero on success. Negative error value on failure. Will print out
  kernel warnings on caller bugs.
  Performs a CPU blit from one buffer object to another avoiding a full
  bo vmap which may exhaust- or fragment vmalloc space.
  On supported architectures (x86), we're using kmap_atomic which avoids
  cross-processor TLB- and cache flushes and may, on non-HIGHMEM systems
  reference already set-up mappings.
  Neither of the buffer objects may be placed in PCI memory
  (Fixed memory in TTM terminology) when using this function.
 Buffer objects need to be either pinned or reserved: 
 SPDX-License-Identifier: GPL-2.0 OR MIT
  Copyright 2009-2020 VMware, Inc., Palo Alto, CA., USA
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sub license, andor sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:
  The above copyright notice and this permission notice (including the
  next paragraph) shall be included in all copies or substantial portions
  of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
  THE COPYRIGHT HOLDERS, AUTHORS ANDOR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,
  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  USE OR OTHER DEALINGS IN THE SOFTWARE.
 Legacy Display Unit does not support surfaces 
  Reserve @bytes number of bytes in the fifo.
  This function will return NULL (error) on two conditions:
   If it timeouts waiting for fifo space, or if @bytes is larger than the
    available fifo space.
  Returns:
    Pointer to the fifo, or null on error (possible hardware hang).
  vmw_cmd_commit_flush - Commit fifo space and flush any buffered commands.
  @dev_priv: Pointer to device private structure.
  @bytes: Number of bytes to commit.
  vmw_cmd_flush - Flush any buffered commands and make sure command processing
  starts.
  @dev_priv: Pointer to device private structure.
  @interruptible: Whether to wait interruptible if function needs to sleep.
		
		  Don't request hardware to send a fence. The
		  waiting code in vmwgfx_irq.c will emulate this.
  vmw_cmd_emit_dummy_legacy_query - emits a dummy query to the fifo using
  legacy query commands.
  @dev_priv: The device private structure.
  @cid: The hardware context id used for the query.
  See the vmw_cmd_emit_dummy_query documentation.
	
	  A query wait without a preceding query end will
	  actually finish all queries for this cid
	  without writing to the query result structure.
  vmw_cmd_emit_dummy_gb_query - emits a dummy query to the fifo using
  guest-backed resource query commands.
  @dev_priv: The device private structure.
  @cid: The hardware context id used for the query.
  See the vmw_cmd_emit_dummy_query documentation.
	
	  A query wait without a preceding query end will
	  actually finish all queries for this cid
	  without writing to the query result structure.
  vmw_cmd_emit_dummy_query - emits a dummy query to the fifo using
  appropriate resource query commands.
  @dev_priv: The device private structure.
  @cid: The hardware context id used for the query.
  This function is used to emit a dummy occlusion query with
  no primitives rendered between query begin and query end.
  It's used to provide a query barrier, in order to know that when
  this query is finished, all preceding queries are also finished.
  A Query results structure should have been initialized at the start
  of the dev_priv->dummy_query_bo buffer object. And that buffer object
  must also be either reserved or pinned when this function is called.
  Returns -ENOMEM on failure to reserve fifo space.
  vmw_cmd_supported - returns true if the given device supports
  command queues.
  @vmw: The device private structure.
  Returns true if we can issue commands.
	
	  We have FIFO cmd's
 SPDX-License-Identifier: GPL-2.0 OR MIT
  Copyright 2011-2014 VMware, Inc., Palo Alto, CA., USA
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sub license, andor sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:
  The above copyright notice and this permission notice (including the
  next paragraph) shall be included in all copies or substantial portions
  of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
  THE COPYRIGHT HOLDERS, AUTHORS ANDOR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,
  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  USE OR OTHER DEALINGS IN THE SOFTWARE.
 Protected by @goal_irq_mutex 
	bool seqno_valid;  Protected by @lock, and may not be set to true
  struct vmw_event_fence_action - fence action that delivers a drm event.
  @action: A struct vmw_fence_action to hook up to a fence.
  @event: A pointer to the pending event.
  @fence: A referenced pointer to the fence to keep it alive while @action
  hangs on it.
  @dev: Pointer to a struct drm_device so we can access the event stuff.
  @tv_sec: If non-null, the variable pointed to will be assigned
  current time tv_sec val when the fence signals.
  @tv_usec: Must be set if @tv_sec is set, and the variable pointed to will
  be assigned the current time tv_usec val when the fence signals.
  Note on fencing subsystem usage of irqs:
  Typically the vmw_fences_update function is called
  a) When a new fence seqno has been submitted by the fifo code.
  b) On-demand when we have waiters. Sleeping waiters will switch on the
  ANY_FENCE irq and call vmw_fences_update function each time an ANY_FENCE
  irq is received. When the last fence waiter is gone, that IRQ is masked
  away.
  In situations where there are no waiters and we don't submit any new fences,
  fence objects may not be signaled. This is perfectly OK, since there are
  no consumers of the signaled data, but that is NOT ok when there are fence
  actions attached to a fence. The fencing subsystem then makes use of the
  FENCE_GOAL irq and sets the fence goal seqno to that of the next fence
  which has an action attached, and each time vmw_fences_update is called,
  the subsystem makes sure the fence goal seqno is updated.
  The fence goal seqno irq is on as long as there are unsignaled fence
  objects with actions attached to them.
		
		  We can use the barrier free __set_current_state() since
		  DMA_FENCE_FLAG_SIGNALED_BIT + wakeup is protected by the
		  fence spinlock.
  Execute signal actions on fences recently signaled.
  This is done from a workqueue so we don't have to execute
  signal actions from atomic context.
		
		  At this point, only we should be able to manipulate the
		  list heads of the actions we have on the private list.
		  hence fman::lock not held.
		
		  Add the cleanup action to the cleanup list so that
		  it will be performed by a worker task.
  vmw_fence_goal_new_locked - Figure out a new device fence goal
  seqno if needed.
  @fman: Pointer to a fence manager.
  @passed_seqno: The seqno the device currently signals as passed.
  This function should be called with the fence manager lock held.
  It is typically called when we have a new passed_seqno, and
  we might need to update the fence goal. It checks to see whether
  the current fence goal has already passed, and, in that case,
  scans through all unsignaled fences to get the next fence object with an
  action attached, and sets the seqno of that fence as a new fence goal.
  returns true if the device goal seqno was updated. False otherwise.
  vmw_fence_goal_check_locked - Replace the device fence goal seqno if
  needed.
  @fence: Pointer to a struct vmw_fence_obj the seqno of which should be
  considered as a device fence goal.
  This function should be called with the fence manager lock held.
  It is typically called when an action has been attached to a fence to
  check whether the seqno of that fence should be used for a fence
  goal interrupt. This is typically needed if the current fence goal is
  invalid, or has a higher seqno than that of the current fence object.
  returns true if the device goal seqno was updated. False otherwise.
	
	  Rerun if the fence goal seqno was updated, and the
	  hardware might have raced with that update, so that
	  we missed a fence_goal irq.
	
	  Free kernel space accounting.
	
	  Kernel memory space accounting, since this object may
	  be created by a user-space request.
	
	  The base object holds a reference which is freed in
	  vmw_user_fence_base_release.
		
		  Free the base object's reference
  vmw_wait_dma_fence - Wait for a dma fence
  @fman: pointer to a fence manager
  @fence: DMA fence to wait on
  This function handles the case when the fence is actually a fence
  array.  If that's the case, it'll wait on each of the child fence
	 From i915: Note that if the fence-array was created in
	  signal-on-any mode, we should not decompose it into its individual
	  fences. However, we don't currently store which mode the fence-array
	  is operating in. Fortunately, the only user of signal-on-any is
	  private to amdgpu and we should not see any incoming fence-array
	  from sync-file being in signal-on-any mode.
  vmw_fence_fifo_down - signal all unsignaled fence objects.
	
	  The list may be altered while we traverse it, so always
	  restart when we've released the fman->lock.
  vmw_fence_obj_lookup - Look up a user-space fence object
  @tfile: A struct ttm_object_file identifying the caller.
  @handle: A handle identifying the fence object.
  @return: A struct vmw_user_fence base ttm object on success or
  an error pointer on failure.
  The fence object is looked up and type-checked. The caller needs
  to have opened the fence object first, but since that happens on
  creation and fence objects aren't shareable, that's not an
  issue currently.
	
	  64-bit division not present on 32-bit systems, so do an
	  approximation. (Divide by 1000000).
	
	  Optionally unref the fence object.
  vmw_event_fence_action_seq_passed
  @action: The struct vmw_fence_action embedded in a struct
  vmw_event_fence_action.
  This function is called when the seqno of the fence where @action is
  attached has passed. It queues the event on the submitter's event list.
  This function is always called from atomic context.
 monotonic time, so no y2038 overflow 
  vmw_event_fence_action_cleanup
  @action: The struct vmw_fence_action embedded in a struct
  vmw_event_fence_action.
  This function is the struct vmw_fence_action destructor. It's typically
  called from a workqueue.
  vmw_fence_obj_add_action - Add an action to a fence object.
  @fence: The fence object.
  @action: The action to add.
  Note that the action callbacks may be executed before this function
  returns.
		
		  This function may set fman::seqno_valid, so it must
		  be run with the goal_irq_mutex held.
  vmw_event_fence_action_queue - Post an event for sending when a fence
  object seqno has passed.
  @file_priv: The file connection on which the event should be posted.
  @fence: The fence object on which to post the event.
  @event: Event to be posted. This event should've been alloced
  using k[mz]alloc, and should've been completely initialized.
  @tv_sec: If non-null, the variable pointed to will be assigned
  current time tv_sec val when the fence signals.
  @tv_usec: Must be set if @tv_sec is set, and the variable pointed to will
  be assigned the current time tv_usec val when the fence signals.
  @interruptible: Interruptible waits if possible.
  As a side effect, the object pointed to by @event may have been
  freed when this function returns. If this function returns with
  an error code, the caller needs to free that object.
	
	  Look up an existing fence object,
	  and if user-space wants a new reference,
	  add one.
	
	  Create a new fence object.
 SPDX-License-Identifier: GPL-2.0 OR MIT 
  Copyright 2021 VMware, Inc., Palo Alto, CA., USA
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sub license, andor sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:
  The above copyright notice and this permission notice (including the
  next paragraph) shall be included in all copies or substantial portions
  of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
  THE COPYRIGHT HOLDERS, AUTHORS ANDOR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,
  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	  A version of user-space exists which use MULTISAMPLE_MASKABLESAMPLES
	  to check the sample count supported by virtual device. Since there
	  never was support for multisample count for backing MOB return 0.
	 
	  MULTISAMPLE_MASKABLESAMPLES devcap is marked as deprecated by virtual
	  device.
 SPDX-License-Identifier: GPL-2.0 OR MIT
  Copyright 2013 VMware, Inc., Palo Alto, CA., USA
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sub license, andor sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:
  The above copyright notice and this permission notice (including the
  next paragraph) shall be included in all copies or substantial portions
  of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
  THE COPYRIGHT HOLDERS, AUTHORS ANDOR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,
  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  USE OR OTHER DEALINGS IN THE SOFTWARE.
  Authors:
      Thomas Hellstrom <thellstrom@vmware.com>
  DMA-BUF attach- and mapping methods. No need to implement
  these until we have other virtual devices use them.
 SPDX-License-Identifier: GPL-2.0 OR MIT
  Copyright 2019 VMware, Inc., Palo Alto, CA., USA
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sub license, andor sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:
  The above copyright notice and this permission notice (including the
  next paragraph) shall be included in all copies or substantial portions
  of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
  THE COPYRIGHT HOLDERS, AUTHORS ANDOR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,
  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  USE OR OTHER DEALINGS IN THE SOFTWARE.
  Different methods for tracking dirty:
  VMW_BO_DIRTY_PAGETABLE - Scan the pagetable for hardware dirty bits
  VMW_BO_DIRTY_MKWRITE - Write-protect page table entries and record write-
  accesses in the VM mkwrite() callback
  No dirtied pages at scan trigger a transition to the _MKWRITE method,
  similarly a certain percentage of dirty pages trigger a transition to
  the _PAGETABLE method. How many triggers should we wait for before
  changing method?
 Percentage to trigger a transition to the _PAGETABLE method 
  struct vmw_bo_dirty - Dirty information for buffer objects
  @start: First currently dirty bit
  @end: Last currently dirty bit + 1
  @method: The currently used dirty method
  @change_count: Number of consecutive method change triggers
  @ref_count: Reference count for this structure
  @bitmap_size: The size of the bitmap in bits. Typically equal to the
  nuber of pages in the bo.
  @size: The accounting size for this struct.
  @bitmap: A bitmap where each bit represents a page. A set bit means a
  dirty page.
  vmw_bo_dirty_scan_pagetable - Perform a pagetable scan for dirty bits
  @vbo: The buffer object to scan
  Scans the pagetable for dirty bits. Clear those bits and modify the
  dirty structure with the results. This function may change the
  dirty-tracking method.
  vmw_bo_dirty_scan_mkwrite - Reset the mkwrite dirty-tracking method
  @vbo: The buffer object to scan
  Write-protect pages written to so that consecutive write accesses will
  trigger a call to mkwrite.
  This function may change the dirty-tracking method.
  vmw_bo_dirty_scan - Scan for dirty pages and add them to the dirty
  tracking structure
  @vbo: The buffer object to scan
  This function may change the dirty tracking method.
  vmw_bo_dirty_pre_unmap - write-protect and pick up dirty pages before
  an unmap_mapping_range operation.
  @vbo: The buffer object,
  @start: First page of the range within the buffer object.
  @end: Last page of the range within the buffer object + 1.
  If we're using the _PAGETABLE scan method, we may leak dirty pages
  when calling unmap_mapping_range(). This function makes sure we pick
  up all dirty pages.
  vmw_bo_dirty_unmap - Clear all ptes pointing to a range within a bo
  @vbo: The buffer object,
  @start: First page of the range within the buffer object.
  @end: Last page of the range within the buffer object + 1.
  This is similar to ttm_bo_unmap_virtual() except it takes a subrange.
  vmw_bo_dirty_add - Add a dirty-tracking user to a buffer object
  @vbo: The buffer object
  This function registers a dirty-tracking user to a buffer object.
  A user can be for example a resource or a vma in a special user-space
  mapping.
  Return: Zero on success, -ENOMEM on memory allocation failure.
 Write-protect and then pick up already dirty bits 
  vmw_bo_dirty_release - Release a dirty-tracking user from a buffer object
  @vbo: The buffer object
  This function releases a dirty-tracking user from a buffer object.
  If the reference count reaches zero, then the dirty-tracking object is
  freed and the pointer to it cleared.
  Return: Zero on success, -ENOMEM on memory allocation failure.
  vmw_bo_dirty_transfer_to_res - Pick up a resource's dirty region from
  its backing mob.
  @res: The resource
  This function will pick up all dirty ranges affecting the resource from
  it's backup mob, and call vmw_resource_dirty_update() once for each
  range. The transferred ranges will be cleared from the backing mob's
  dirty tracking.
  vmw_bo_dirty_clear_res - Clear a resource's dirty region from
  its backing mob.
  @res: The resource
  This function will clear all dirty ranges affecting the resource from
  it's backup mob's dirty tracking.
	
	  mkwrite() doesn't handle the VM_FAULT_RETRY return value correctly.
	  So make sure the TTM helpers are aware.
	
	  If we don't track dirty using the MKWRITE method, make sure
	  sure the page protection is write-enabled so we don't get
	  a lot of unnecessary write faults.
 SPDX-License-Identifier: GPL-2.0 OR MIT
  Copyright 2012-2016 VMware, Inc., Palo Alto, CA., USA
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the
  "Software"), to deal in the Software without restriction, including
  without limitation the rights to use, copy, modify, merge, publish,
  distribute, sub license, andor sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to
  the following conditions:
  The above copyright notice and this permission notice (including the
  next paragraph) shall be included in all copies or substantial portions
  of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
  THE COPYRIGHT HOLDERS, AUTHORS ANDOR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,
  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  USE OR OTHER DEALINGS IN THE SOFTWARE.
  struct vmw_stream - Overlay stream simple resource.
  @sres: The simple resource we derive from.
  @stream_id: The overlay stream id.
  vmw_stream - Typecast a struct vmw_resource to a struct vmw_stream.
  @res: Pointer to the struct vmw_resource.
  Returns: Returns a pointer to the struct vmw_stream.
  Simple resource callbacks for struct vmw_stream
  End simple resource callbacks for struct vmw_stream
  vmw_stream_unref_ioctl - Ioctl to unreference a user-space handle to
  a struct vmw_stream.
  @dev: Pointer to the drm device.
  @data: The ioctl argument
  @file_priv: Pointer to a struct drm_file identifying the caller.
  Return:
    0 if successful.
    Negative error value on failure.
  vmw_stream_claim_ioctl - Ioctl to claim a struct vmw_stream overlay.
  @dev: Pointer to the drm device.
  @data: The ioctl argument
  @file_priv: Pointer to a struct drm_file identifying the caller.
  Return:
    0 if successful.
    Negative error value on failure.
  vmw_user_stream_lookup - Look up a struct vmw_user_stream from a handle.
  @dev_priv: Pointer to a struct vmw_private.
  @tfile: struct ttm_object_file identifying the caller.
  @inout_id: In: The user-space handle. Out: The stream id.
  @out: On output contains a refcounted pointer to the embedded
  struct vmw_resource.
  Return:
    0 if successful.
    Negative error value on failure.
 SPDX-License-Identifier: GPL-2.0-only
  Copyright 2021 Microsoft
  Portions of this code is derived from hyperv_fb.c
 size of message after this field 
 size of this header + payload after this field 
 SYNTHVID_CURSOR_MAX_X at most 
 SYNTHVID_CURSOR_MAX_Y at most 
 hotspot relative to upper-left of pointer image 
 top left corner 
 bottom right corner, exclusive 
 vram_offset should always be 0 
  Hyper-V supports a hardware cursor feature. It's not used by Linux VM,
  but the Hyper-V host still draws a point as an extra mouse pointer,
  which is unwanted, especially when Xorg is running.
  The hyperv_fb driver uses synthvid_send_ptr() to hide the unwanted
  pointer, by setting msg.ptr_pos.is_visible = 1 and setting the
  msg.ptr_shape.data. Note: setting msg.ptr_pos.is_visible to 0 doesn't
  work in tests.
  Copy synthvid_send_ptr() to hyperv_drm and rename it to
  hyperv_hide_hw_ptr(). Note: hyperv_hide_hw_ptr() is also called in the
  handler of the SYNTHVID_FEATURE_CHANGE event, otherwise the host still
  draws an extra unwanted mouse pointer after the VM Connection window is
  closed and reopened.
 Complete the wait event 
 Negotiate the protocol version with host 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright 2021 Microsoft
 TODO: Use mapping abstraction properly 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright 2021 Microsoft
 end of list  }
  PCI stub to support gen1 VM.
	
	  Map the VRAM cacheable for performance. This is also required for VM
	  connect to display properly for ARM64 Linux VM, as the host also maps
	  the VRAM cacheable.
	
	  Should be done only once during init and resume. Failing to update
	  vram location is not fatal. Device will update dirty area till
	  preferred resolution only.
 Synthetic Video Device GUID 
 SPDX-License-Identifier: GPL-2.0-only
  (C) COPYRIGHT 2012-2013 ARM Limited. All rights reserved.
  Parts of this file were based on sources as follows:
  Copyright (c) 2006-2008 Intel Corporation
  Copyright (c) 2007 Dave Airlie <airlied@linux.ie>
  Copyright (C) 2011 Texas Instruments
  DOC: ARM PrimeCell PL110 and PL111 CLCD Driver
  The PL110PL111 is a simple LCD controller that can support TFT
  and STN displays. This driver exposes a standard KMS interface
  for them.
  The driver currently doesn't expose the cursor.  The DRM API for
  cursors requires support for 64x64 ARGB8888 cursor images, while
  the hardware can only support 64x64 monochrome with masking
  cursors.  While one could imagine trying to hack something together
  to look at the ARGB8888 and program reasonable in monochrome, we
  just don't expose the cursor at all instead, and leave cursor
  support to the application software cursor layer.
  TODO:
  - Fix race between setting plane base address and getting IRQ for
    vsync firing the pageflip completion.
  - Read back hardware state at boot to skip reprogramming the
    hardware when doing a no-op modeset.
  - Use the CLKSEL bit to support switching between the two external
    clock parents.
				
				  Something deferred, but that is often just
				  another way of saying -ENODEV, but let's
				  cast a vote for later deferral.
 Continue, maybe something else is working 
	
	  If we can't find neither panel nor bridge on any of the
	  endpoints, and any of them retured -EPROBE_DEFER, then
	  let's defer this driver too.
	
	  When using device-specific reserved memory we can't import
	  DMA buffers: those are passed by reference in any global
	  memory and we can only handle a specific range of memory.
 The two main variants swap this register 
 This may override some variant settings 
 turn off interrupts before requesting the irq 
  This early variant lacks the 565 and 444 pixel formats.
 RealView, Versatile Express etc use this modern variant 
 SPDX-License-Identifier: GPL-2.0-only
   Copyright © 2017 Broadcom
 SPDX-License-Identifier: GPL-2.0-only
  Versatile family (ARM reference designs) handling for the PL11x.
  This is based on code and know-how in the previous frame buffer
  driver in driversvideofbdevamba-clcd.c:
  Copyright (C) 2001 ARM Limited, by David A Rusling
  Updated to 2.5 by Deep Blue Solutions Ltd.
  Major contributions and discoveries by Russell King.
  We detect the different syscon types from the compatible strings.
  Core module CLCD control on the IntegratorCP, bits
  8 thru 19 of the CM_CONTROL register controls a bunch
  of CLCD settings.
 Bits 11,12,13 controls the LCD or VGA bridge type 
 RL flip on Sharp 
 UD flip on Sharp 
 No connection on Sharp 
 0 = 24bit VGA, 1 = 18bit VGA 
 FIXME: really needed? 
 24bit formats 
 Pseudocolor, RGB555, BGR555 
  This configuration register in the Versatile and RealView
  family is uniformly present but appears more and more
  unutilized starting with the RealView series.
 Set up the MUX 
 Then enable the display 
 PL110 pixel formats for Integrator, vanilla PL110 
 Extended PL110 pixel formats for Integrator and Versatile 
 Uses external PLD 
 Uses external PLD 
  The Integrator variant is a PL110 with a bunch of broken, or not
  yet implemented features
  The IM-PD1 variant is a PL110 with a bunch of broken, or not
  yet implemented features
  This is the in-between PL110 variant found in the ARM Versatile,
  supporting RGB565BGR565
  RealView PL111 variant, the only real difference from the vanilla
  PL111 is that we select 16bpp framebuffer by default to be able
  to get 1024x768 without saturating the memory bus.
  Versatile Express PL111 variant, again we just push the maximum
  BPP to 16 to be able to get 1024x768 without saturating the memory
  bus. The clockdivider also seems broken on the Versatile Express.
	
	  Check if we have a CLCD or HDLCD on the core tile by checking if a
	  CLCD or HDLCD is available in the root of the device tree.
	
	  If there is a coretile HDLCD and it has a driver,
	  do not mux the CLCD on the motherboard to the DVI.
	
	  On the Vexpress CA9 we let the CLCD on the coretile
	  take precedence, so also in this case do not mux the
	  motherboard to the DVI.
 Call into deep Vexpress configuration API 
 Non-ARM reference designs, just bail out 
 Versatile Express special handling 
	
	  On the Integrator, check if we should use the IM-PD1 instead,
	  if we find it, it will take precedence. This is on the IntegratorAP
	  which only has this option for PL110 graphics.
 This can do RGB565 with external PLD 
		
		  The Versatile has a variant halfway between PL110
		  and PL111 where these two registers have already been
		  swapped.
 SPDX-License-Identifier: GPL-2.0+
	
	  Just bail out of this is not found, we could be running
	  multiplatform on something else than Nomadik.
	
	  This bit in the PMU controller multiplexes the two graphics
	  blocks found in the Nomadik STn8815. The other one is called
	  MDIF (Master Display Interface) and gets muxed out here.
 SPDX-License-Identifier: GPL-2.0-only
  (C) COPYRIGHT 2012-2013 ARM Limited. All rights reserved.
  Parts of this file were based on sources as follows:
  Copyright (c) 2006-2008 Intel Corporation
  Copyright (c) 2007 Dave Airlie <airlied@linux.ie>
  Copyright (C) 2011 Texas Instruments
 Clear the interrupt once done 
	
	  We use the pixelclock to also account for interlaced modes, the
	  resulting bandwidth is in bytes per second.
 In Hz 
	
	  If no bandwidth constraints, anything goes, else
	  check if we are too fast.
 FB base address must be dword aligned. 
		 There's no pitch register -- the mode's hdisplay
		  controls it.
		 We can't change the FB format in a flicker-free
		  manner (and only update it during CRTC enable).
		
		  The AC pin bias frequency is set to max count when using
		  grayscale so at least once in a while we will reverse
		  polarity and get rid of any DC built up that could
		  damage the display.
		
		  Here is when things get really fun. Sometimes the bridge
		  timings are such that the signal out from PL11x is not
		  stable before the receiving bridge (such as a dumb VGA DAC
		  or similar) samples it. If that happens, we compensate by
		  the only method we have: output the data on the opposite
		  edge of the clock so it is for sure stable when it gets
		  sampled.
		 
		  The PL111 manual does not contain proper timining diagrams
		  or data for these details, but we know from experiments
		  that the setup time is more than 3000 picoseconds (3 ns).
		  If we have a bridge that requires the signal to be stable
		  earlier than 3000 ps before the clock pulse, we have to
		  output the data on the opposite edge to avoid flicker.
	
	  Detect grayscale bus format. We do not support a grayscale mode
	  toward userspace, instead we expose an RGB24 buffer and then the
	  hardware will activate its grayscaler to convert to the grayscale
	  format.
 Else we assume TFT display 
 On the ST Micro variant, assume all 24 bits are connected 
	
	  Note that the the ARM hardware's format reader takes 'r' from
	  the low bit, while DRM formats list channels from high bit
	  to low bit as you read left to right. The ST Micro version of
	  the PL110 (LCDC) however uses the standard DRM format.
 Only supported on the ST Micro variant 
 Only supported on the ST Micro variant 
 The PL110 in IntegratorVersatile does the BGR routing externally 
 Power sequence: first enable and chill 
	
	  We expect this delay to stabilize the contrast
	  voltage Vee as stipulated by the manual
 Power Up 
 Power Down 
	
	  We expect this delay to stabilize the contrast voltage Vee as
	  stipulated by the manual
 Disable 
 If the clock divider is broken, use the parent directly 
 SPDX-License-Identifier: GPL-2.0+
 PRCMU DSI reset registers 
 Mask off the ACK value and clear status 
 This happens all the time (safe to ignore) 
 This happens all the time (safe to ignore) 
	
	  Select the way the DSI data flow is pushing to the display:
	  currently we just support video or command mode depending
	  on the type of display. Video mode defaults to using the
	  formatter itself for synchronization (stateless video panel).
	 
	  FIXME: add flags to struct mipi_dsi_device .flags to indicate
	  displays that require BTA (bus turn around) so we can handle
	  such displays as well. Figure out how to properly handle
	  single frame on-demand updates with DRM for command mode
	  displays (MCDE_COMMAND_ONESHOT_FLOW).
 MIPI_DSI_FMT_RGB88 etc 
 us 
 Send command 
 Read command 
 Set exit code and retry 
 Writing only 
 Set exit code and retry 
 Return number of bytes written 
 OK this is a read command, get the response 
 FIXME: read more than 4 bytes 
 Successful transmission 
 Command "nature" 
 MCTL_MAIN_DATA_CTL already set up 
	
	  More than 2 bytes will not fit in a single packet, so it's
	  time to set the "long not short" bit. One byte is used by
	  the MIPI DCS command leaving just one byte for the payload
	  in a short package.
 MIPI DCS command is part of the data 
 Clear any errors 
 This sends a direct (short) command to request TE 
 Command "nature" TE request 
 Clear TE reveived and error status bits and enables them 
 Clear and enable no TE or TE missing status 
 Send this TE request command 
 cpp, characters per pixel, number of bytes per pixel 
 RGB header and pixel mode 
 TODO: TVG (test video generator) could be enabled here 
	
	  During vertical blanking: go to LP mode
	  Like with the EOL setting, if this is not set, the EOL area will be
	  filled with NULL or blanking packets in the vblank area.
	  FIXME: some Samsung phones and display panels such as s6e63m0 use
	  DSI_VID_MAIN_CTL_REG_BLKLINE_MODE_BLANKING here instead,
	  figure out how to properly configure that from the panel.
	
	  During EOL: go to LP mode. If this is not set, the EOL area will be
	  filled with NULL or blanking packets.
 Recovery mode 1 
 All other fields zero 
 Vertical frame parameters are pretty straight-forward 
 vertical front porch 
 vertical sync active 
 vertical back porch 
	
	  Horizontal frame parameters:
	  horizontal resolution is given in pixels but must be re-calculated
	  into bytes since this is what the hardware expects, these registers
	  define the payload size of the packet.
	 
	  hfp = horizontal front porch in bytes
	  hbp = horizontal back porch in bytes
	  hsa = horizontal sync active in bytes
	 
	  6 + 2 is HFP header + checksum
		
		  Use sync pulse for sync: explicit HSA time
		  6 is HBP header + checksum
		  4 is RGB header + checksum
		
		  6 is HBP header + checksum
		  4 is HSW packet bytes
		  4 is RGB header + checksum
		
		  Use event for sync: HBP includes both back porch and sync
		  6 is HBP header + checksum
		  4 is HSW packet bytes
		  4 is RGB header + checksum
 HSA is not present in this mode and set to 0 
 Frame parameters: horizontal sync active 
 horizontal back porch 
 horizontal front porch 
 RGB data length (visible bytes on one scanline) 
	
	  Calculate the time between two pixels in picoseconds using
	  the supplied refresh rate and total resolution including
	  porches and sync.
 (pss)  (pixelss) = pspixels 
	
	  How many bytes per line will this update frequency yield?
	 
	  Calculate the number of picoseconds for one scanline (1), then
	  divide by 1000000000000 (2) to get in pixels per second we
	  want to output.
	 
	  Multiply with number of bytes per second at this video display
	  frequency (3) to get number of bytes transferred during this
	  time. Notice that we use the frequency the display wants,
	  not what we actually get from the DSI PLL, which is hs_freq.
	 
	  These arithmetics are done in a different order to avoid
	  overflow.
 (1) picoseconds per line 
 Multiply with bytes per second (3) 
 Pixels per second (2) 
 microseconds 
 seconds 
 parallel transactions in all lanes 
	
	  6 is header + checksum, header = 4 bytes, checksum = 2 bytes
	  4 is short packet for vsynchsync
 Set the event packet size to 0 (not used) 
		
		  FIXME: isn't the hsync width in pixels? The porch and
		  sync area size is in pixels here, but this -6
		  seems to be for bytes. It looks like this in the vendor
		  code though. Is it completely untested?
 Set the sync pulse packet size to 0 (not used) 
 Specifying payload size in bytes (-4-6 from manual) 
	
	  The line duration is used to scale back the frequency from
	  the max frequency supported by the HS clock to the desired
	  update frequency in vrefresh.
	
	  The datasheet contains this complex condition to decreasing
	  the line duration by 1 under very specific circumstances.
	  Here we also imply that LP is used during burst EOL.
	
	  This is the time to perform LP->HS on D-PHY
	  FIXME: nowhere to get this from: DT property on the DSI?
	  The manual says this is "system dependent".
	  values like 48 and 72 seen in the vendor code.
	
	  See the manual figure 657 page 2203 for understanding the impact
	  of the different burst mode settings.
		
		  Packet size at EOL for burst mode, this is only used
		  if DSI_VID_MAIN_CTL_REG_BLKEOL_MODE_LP_0 is NOT set,
		  but we instead send NULL or blanking packets at EOL.
		  This is given in number of bytes.
		 
		  See the manual page 2198 for the 13 reg_blkeol_pck bits.
 Use the same value for exact burst limit 
		
		  This BLKEOL duration is claimed to be the duration in clock
		  cycles of the BLLP end-of-line (EOL) period for each line if
		  DSI_VID_MAIN_CTL_REG_BLKEOL_MODE_LP_0 is set.
		 
		  It is hard to trust the manuals' claim that this is in clock
		  cycles as we mimic the behaviour of the vendor code, which
		  appears to write a number of bytes that would have been
		  transferred on a single lane.
		 
		  See the manual figure 657 page 2203 and page 2198 for the 13
		  reg_blkeol_duration bits.
		 
		  FIXME: should this also be set up also for non-burst mode
		  according to figure 565 page 2202?
 Max burst limit, this is given in bytes 
 Maximum line limit 
 No integration mode 
 Enable the DSI port, from driversvideomcdedsilink_v2.c 
 Set a high command timeout, clear other fields 
	
	  UI_X4 is described as "unit interval times four"
	  I guess since DSI packets are 4 bytes wide, one unit
	  is one byte.
 MHz 
	
	  Enable clocking: 0x0f (something?) between each burst,
	  enable the second lane if needed, enable continuous clock if
	  needed, enable switch into ULPM (ultra-low power mode) on
	  all the lines.
 High PHY timeout 
 Wait for the PLL to lock and the clock and data lines to come up 
 Sleep for a millisecond 
 TODO needed? 
 Command mode, clear IF1 ID 
	
	  If we enable low-power mode here,
	  then display updates become really slow.
 Wait for DSI PHY to initialize 
  Notice that this is called from inside the display controller
  and not from the bridge callbacks.
 Copy maximum clock frequencies 
 Enable LP (Low Power, Energy Save, ES) and HS (High Speed) clocks 
 Start clocks 
 Assert RESET through the PRCMU, active low 
 FIXME: which DSI block? 
 De-assert RESET again 
 Start up the hardware 
 Set up the video mode from the DRM mode 
 Put IF1 into video mode 
 Disable command mode on IF1 
 Enable some error interrupts 
 Enable video mode 
 Command mode, clear IF1 ID 
		
		  If we enable low-power mode here
		  the display updates become really slow.
	
	  Wait until we get out of command mode
	  CSM = Command State Machine
 Sleep for a millisecond 
 Wait until we get out og video mode 
 Sleep for a millisecond 
  Notice that this is called from inside the display controller
  and not from the bridge callbacks.
 Stop video mode 
 Stop command mode 
	
	  Stop clocks and terminate any DSI traffic here so the panel can
	  send commands to shut down the display using DSI direct write until
	  this point.
 Disable all error interrupts 
 Attach the DSI bridge to the output (panel etc) bridge 
 If the display attached before binding, set this up 
 Obtain the clocks 
 Look for a panel as a child to this node 
 TODO: AV8100 HDMI encoder goes here for example 
 Create a bridge for this DSI channel 
 TODO: first come first serve, use a list 
 Get a handle on the PRCMU so we can do reset 
 SPDX-License-Identifier: GPL-2.0
 The MCDE internal clock dividers for FIFO A and B 
	
	  Select the PLL72 (LCD) clock as parent
	  FIXME: implement other parents.
 Internal clock 
 Clear then set the divider 
	
	  If the MCDE is not powered we can't access registers.
	  It will come up with 0 in the divider register bits, which
	  means "divide by 2".
 0 in the PCD means "divide by 2", 1 means "divide by 3" etc 
	
	  We cache the CR bits to set the divide in the state so that
	  we can call this before we can even write to the hardware.
 Bypass clock divider 
 Allocate 2 clocks 
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) 2018 Linus Walleij <linus.walleij@linaro.org>
  Parts of this file were based on the MCDE driver by Marcus Lorentzon
  (C) ST-Ericsson SA 2013
 TODO: implement FIFO C0 and FIFO C1 
 Handle display IRQs 
	
	  Handle IRQs from the DSI link. All IRQs from the DSI links
	  are just latched onto the MCDE IRQ line, so we need to traverse
	  any active DSI masters and check if an IRQ is originating from
	  them.
	 
	  TODO: Currently only one DSI link is supported.
		
		  In oneshot mode we do not send continuous updates
		  to the display, instead we only push out updates when
		  the update function is called, then we disable the
		  flow on the channel once we get the TE IRQ.
 Disable FIFO A flow 
 Vblank from one of the channels 
 Disable all IRQs 
 Clear any pending IRQs 
 FB base address must be dword aligned. 
		
		  There's no pitch register, the mode's hdisplay
		  controls this.
		
		  We can't change the FB format in a flicker-free
		  manner (and only update it during CRTC enable).
	
	  Configure external source 0 one buffer (buffer 0)
	  primary overlay ID 0.
	  From mcde_hw.c ovly_update_registers() in the vendor tree
 Software select, primary 
 Use external source 0 that we just configured 
 OPQ: overlay is opaque 
 No OPQ 
	
	  Pixel fetch watermark level is max 0x1FFF pixels.
	  Two basic rules should be followed:
	  1. The value should be at least 256 bits.
	  2. The sum of all active overlays pixelfetch watermark level
	     multiplied with bits per pixel, should be lower than the
	     size of input_fifo_size in bits.
	  3. The value should be a multiple of a line (256 bits).
 Number of bytes to fetch per line 
 No cropping 
 Set up overlay control register 
 Not using rotation but set it up anyways 
	
	  Set up the overlay compositor to route the overlay out to
	  the desired channel
 Set up channel 0 sync (based on chnl_update_registers()) 
 Oneshot is achieved with software sync 
		
		  TODO:
		  The vendor driver uses the formatter as sync source
		  for BTA TE mode. Test to use TE if you have a panel
		  that uses this mode.
 Set up pixels per line and lines per frame 
	
	  Normalize color conversion:
	  black background, OLED conversion disable on channel
 Set up muxing: connect the channel to the desired FIFO 
	
	  If using DPI configure the sync event.
	  TODO: this is for LCD only, it does not cover TV out.
	
	  Select the formatter to use for this FIFO
	 
	  The register definitions imply that different IDs should be used
	  by the DSI formatters depending on if they are in VID or CMD
	  mode, and the manual says they are dedicated but identical.
	  The vendor code uses them as it seems fit.
 Blend source with Alpha 0xff on FIFO 
	
	  Set-up from mcde_fmtr_dsi.c, fmtr_dsi_enable_video()
	  FIXME: a different clock needs to be selected for TV out.
 Assume RGB888 24 bit if we have no further info 
		
		  Set up the CDWIN and OUTBPP for the LCD
		 
		  FIXME: fill this in if you know the correspondance between the MIPI
		  DPI specification and the media bus formats.
 Use the MCDE clock for DSI 
	
	  Enable formatter
	  8 bit commands and DCS commands (notgen = not generic)
 Define the MIPI command: we want to write into display memory 
	
	  FIXME: the vendor driver has some hack around this value in
	  CMD mode with autotrig.
 Check that we really drained and stopped the flow 
  This drains a pipe i.e. a FIFO connected to a certain channel
 Attempt to clear the FIFO 
 Trigger a software sync out on respective channel (0-3) 
 Disable FIFO A flow again 
	
	  DSI command mode line packets should be split into an even number of
	  packets smaller than or equal to the fifo size.
 FIXME: we only support LCD, implement TV out 
 Display actual values 
	
	  The pixel fetcher is 128 64-bit words deep = 1024 bytes.
	  One overlay of 32bpp (4 cpp) assumed, fetch 160 pixels.
	  160  4 = 640 bytes.
 Set up the main control, watermark level at 7 
	
	  This sets up the internal silicon muxing of the DPI
	  lines. This is how the silicon connects out to the
	  external pins, then the pins need to be further
	  configured into "alternate functions" using pin control
	  to actually get the signals out.
	 
	  FIXME: this is hardcoded to the only setting found in
	  the wild. If we need to use different settings for
	  different DPI displays, make this parameterizable from
	  the device tree.
 24 bits DPI: connect Ch A LSB to D[0:7] 
 24 bits DPI: connect Ch A MID to D[8:15] 
 Don't care about this muxing 
 Don't care about this muxing 
 24 bits DPI: connect Ch A MSB to D[32:39] 
 Syncmux bits zero: DPI channel A 
 This hammers us into LCD mode 
 Front porch and sync width 
 The vendor driver sets the same value into TVBL2A 
 Vertical back porch 
 The vendor drivers sets the same value into TVDVOA 
 Horizontal back porch, as 0 = 1 cycle we need to subtract 1 
 Horizongal sync width and horizonal front porch, 0 = 1 cycle 
 Blank some TV registers we don't use 
 Set up sync inversion etc 
 pixels per line 
 lines per frame 
 Set up the main control, watermark level at 7 
	
	  This is the internal silicon muxing of the DPI
	  (parallell display) lines. Since we are not using
	  this at all (we are using DSI) these are just
	  dummy values from the vendor tree.
 Calculations from mcde_fmtr_dsi.c, fmtr_dsi_enable_video() 
	
	  Set up FIFO A watermark level:
	  128 for LCD 32bpp video mode
	  48  for LCD 32bpp command mode
	  128 for LCD 16bpp video mode
	  64  for LCD 16bpp command mode
	  128 for HDMI 32bpp
	  192 for HDMI 16bpp
 The FIFO is 640 entries deep on this v3 hardware 
 NOTE: pkt_div is 1 for video mode 
 Commands CMD8 need one extra byte 
 NOTE: pkt_div is 1 for video mode 
 This powers up the entire MCDE block and the DSI hardware 
 Clear any pending interrupts 
 Drain the FIFO A + channel 0 pipe so we have a clean slate 
	
	  We set up our display pipeline:
	  EXTSRC 0 -> OVERLAY 0 -> CHANNEL 0 -> FIFO A -> DSI FORMATTER 0
	 
	  First configure the external source (memory) on external source 0
	  using the desired bitstreambitmap format
	
	  Configure overlay 0 according to format and mode and take input
	  from external source 0 and route the output of this overlay to
	  channel 0
	
	  Configure pixel-per-line and line-per-frame for channel 0 and then
	  route channel 0 to FIFO A
 Configure FIFO A to use DPI formatter 0 
 Set up and enable the LCD clock 
 Configure FIFO A to use DSI formatter 0 
		
		  This brings up the DSI bridge which is tightly connected
		  to the MCDE DSI formatter.
 Configure the DSI formatter 0 for the DSI panel output 
 We are using TE in some combination 
 Enable VSYNC capture on TE0 
 No TE capture 
	
	  If we're using oneshot mode we don't start the flow
	  until each time the display is given an update, and
	  then we disable it immediately after. For all other
	  modes (command or video) we start the FIFO flow
	  right here. This is necessary for the hardware to
	  behave right.
 Enable MCDE with automatic clock gating 
 Disable FIFO A flow 
 This disables the DSI bridge 
 Make sure we are powered down (before we may power up again) 
 Request a TE ACK only in TE+BTA mode 
 Enable FIFO A flow 
	
	  If oneshot mode is enabled, the flow will be disabled
	  when the TE0 IRQ arrives in the interrupt handler. Otherwise
	  updates are continuously streamed to the display after this
	  point.
 Trigger a software sync out on channel 0 
		
		  Disable FIFO A flow again: since we are using TE sync we
		  need to wait for the FIFO to drain before we continue
		  so repeated calls to this function will not cause a mess
		  in the hardware by pushing updates will updates are going
		  on already.
 Write bitmap base address to register 
	
	  Base address for next line this is probably only used
	  in interlace modes.
	
	  Handle any pending event first, we need to arm the vblank
	  interrupt before sending any update to the display so we don't
	  miss the interrupt.
		
		  Hardware must be on before we can arm any vblank event,
		  this is not a scanout controller where there is always
		  some periodic update going on, it is completely frozen
		  until we get an update. If MCDE output isn't yet enabled,
		  we just send a vblank dummy event back.
	
	  We do not start sending framebuffer updates before the
	  display is enabled. Update events will however be dispatched
	  from the DRM core before the display is enabled.
		
		  Usually the flow is already active, unless we are in
		  oneshot mode, then we need to kick the flow right here.
		
		  If an update is receieved before the MCDE is enabled
		  (before mcde_display_enable() is called) we can't really
		  do much with that buffer.
 Enable all VBLANK IRQs 
 Disable all VBLANK IRQs 
 Clear any pending IRQs 
 These are actually IRGB1555 so intensity bit is lost 
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) 2018 Linus Walleij <linus.walleij@linaro.org>
  Parts of this file were based on the MCDE driver by Marcus Lorentzon
  (C) ST-Ericsson SA 2013
  DOC: ST-Ericsson MCDE Driver
  The MCDE (short for multi-channel display engine) is a graphics
  controller found in the Ux500 chipsets, such as NovaThor U8500.
  It was initially conceptualized by ST Microelectronics for the
  successor of the Nomadik line, STn8500 but productified in the
  ST-Ericsson U8500 where is was used for mass-market deployments
  in Android phones from Samsung and Sony Ericsson.
  It can do 1080p30 on SDTV CCIR656, DPI-2, DBI-2 or DSI for
  panels with or without frame buffering and can convert most
  input formats including most variants of RGB and YUV.
  The hardware has four display pipes, and the layout is a little
  bit like this::
    Memory     -> Overlay -> Channel -> FIFO -> 8 formatters -> DSIDPI
    External      0..5       0..3       A,B,    6 x DSI         bridge
    source 0..9                         C0,C1   2 x DPI
  FIFOs A and B are for LCD and HDMI while FIFO COC1 are for
  panels with embedded buffer.
  6 of the formatters are for DSI, 3 pairs for VIDCMD respectively.
  2 of the formatters are for DPI.
  Behind the formatters are the DSI or DPI ports that route to
  the external pins of the chip. As there are 3 DSI ports and one
  DPI port, it is possible to configure up to 4 display pipelines
  (effectively using channels 0..3) for concurrent use.
  In the current DRMKMS setup, we use one external source, one overlay,
  one FIFO and one formatter which we connect to the simple CMA framebuffer
  helpers. We then provide a bridge to the DSI port, and on the DSI port
  bridge we connect hang a panel bridge or other bridge. This may be subject
  to change as we exploit more of the hardware capabilities.
  TODO:
  - Enabled damaged rectangles using drm_plane_enable_fb_damage_clips()
    so we can selectively just transmit the damaged area to a
    command-only display.
  - Enable mixing of more planes, possibly at the cost of moving away
    from using the simple framebuffer pipeline.
  - Enable output to bridges such as the AV8100 HDMI encoder from
    the DSI bridge.
	
	  Using this function is necessary to commit atomic updates
	  that need the CRTC to be enabled before a commit, as is
	  the case with e.g. DSI displays.
	
	  If no other bridge was found, check if we have a DPI panel or
	  any other bridge connected directly to the MCDE DPI output.
	  If a DSI bridge is found, DSI will take precedence.
	 
	  TODO: more elaborate bridge selection if we have more than one
	  thing attached to the system.
 This hardware can do 1080p 
 Attach the bridge. 
 First obtain and turn on the main power 
	
	  The vendor code uses ESRAM (onchip RAM) and need to activate
	  the v-esram34 regulator, but we don't use that yet
 Clock the silicon so we can access the registers 
	
	  Check hardware revision, we only support U8500v2 version
	  as this was the only version used for mass market deployment,
	  but surely you can add more versions if you have them and
	  need them.
 Disable and clear any pending interrupts 
 Spawn child devices for the DSI ports 
 Create something that will match the subdrivers when we bind 
	
	  Perform an invasive reset of the MCDE and all blocks by
	  cutting the power to the subsystem, then bring it back up
	  later when we enable the display as a result of
	  component_master_add_with_match().
 Wait 50 ms so we are sure we cut the power 
		
		  The EPOD regulator is already disabled at this point so some
		  special errorpath code is needed
 SPDX-License-Identifier: GPL-2.0-only
  (C) COPYRIGHT 2016 ARM Limited. All rights reserved.
  Author: Liviu Dudau <Liviu.Dudau@arm.com>
  ARM Mali DP500DP550DP650 KMSDRM driver
 Update all channels with a single gamma curve. 
	
	  Always write an entire table, so the address field in
	  DE_COEFFTAB_ADDR is 0 and we can use the gamma_write_mask bitmask
	  directly.
 Set SE_CONTROL 
 Set IN_SIZE & OUT_SIZE. 
 Set phase regs. 
  set the "config valid" bit and wait until the hardware acts on it
 don't wait for config_valid flag if we are in config mode 
		
		  if we have an event to deliver to userspace, make sure
		  the vblank is enabled as we are sending it from the IRQ
		  handler.
 only set config_valid if the CRTC is enabled 
			
			  make a loop around the second CVAL setting and
			  try 5 times before giving up.
 CRTC inactive means vblank IRQ is disabled, send event directly 
	
	  set config_valid to a special value to let IRQ handlers
	  know that we are updating registers
 fetch the interrupts from DT 
 allocate for the worst case scenario, i.e. rotated buffers 
CONFIG_DEBUG_FS
	
	  The DP500 CORE_ID register is in a different location, so check it
	  first. If the product id field matches, then this is DP500, otherwise
	  check the DP550650 CORE_ID register.
 Offset 0x18 will never read 0x500 on products other than DP500. 
 we can only suspend if the hardware is in config mode 
 number of lines for the R, G and B output 
 Get the optional framebuffer memory resource 
 Enable power management 
 Resume device to enable the clocks 
 set the number of lines used for output of RGB data 
 Set the CRTC's port so that the encoder component can find it 
	 We expect to have a maximum of two encoders one for the actual
	  display and a virtual one for the writeback connector
 there is only one output port inside each device, find it 
  Copyright (C) 2013-2015 ARM Limited
  Author: Liviu Dudau <Liviu.Dudau@arm.com>
  This file is subject to the terms and conditions of the GNU General Public
  License.  See the file COPYING in the main directory of this archive
  for more details.
   Implementation of a CRTC class for the HDLCD driver.
  The HDLCD controller is a dumb RGB streamer that gets connected to
  a single HDMI transmitter or in the case of the ARM Models it gets
  emulated by the software that does the actual rendering.
 stop the controller on cleanup 
  Setup the HDLCD registers for decoding the pixels out of the framebuffer
 HDLCD uses 'bytes per pixel', zero means 1 byte 
	
	  The format of the HDLCD_REG_<color>_SELECT register is:
	    - bits[23:16] - default value for that color component
	    - bits[11:8]  - number of bits to extract for each color component
	    - bits[4:0]   - index of the lowest bit to extract
	 
	  The default color value is used when bits[11:8] are zero, when the
	  pixel is outside the visible frame area or when there is a
	  buffer underrun.
 show underruns in red 
 Allow max number of outstanding requests and largest burst size 
 0.1% seems a close enough tolerance for the TDA19988 on Juno 
 clock required by mode not supported by hardware 
 only the HDLCD_REG_FB_LINE_COUNT register has a limit 
 we cannot disable the plane while the CRTC is active 
 SPDX-License-Identifier: GPL-2.0-only
  (C) COPYRIGHT 2016 ARM Limited. All rights reserved.
  Author: Liviu Dudau <Liviu.Dudau@arm.com>
  ARM Mali DP500DP550DP650 driver (crtc operations)
	
	  check that the hardware can drive the required clock rate,
	  but skip the check if the clock is meant to be disabled (req_rate = 0)
 We rely on firmware to set mclk to a sensible level. 
 always disable planes on the CRTC that is being turned off 
 sector 0 
 sector 1 
 sector 2 
 sector 3 
 sector 4 
 sector 5 
 sector 6 
 DP has 12-bit internal precision for its LUTs. 
  Check if there is a new gamma LUT and if it is of an acceptable size. Also,
  reject any LUTs that use distinct red, green, and blue curves.
		
		  Kerneldoc for drm_atomic_helper_check_modeset mandates that
		  it be invoked when the driver sets ->mode_changed. Since
		  changing the gamma LUT doesn't depend on any external
		  resources, it is safe to call it only once.
  Check if there is a new CTM and if it contains valid input. Valid here means
  that the number is inside the representable range for a Q3.12 number,
  excluding truncating the fractional part of the input data.
  The COLORADJ registers can be changed atomically.
	
	  The size of the ctm is checked in
	  drm_atomic_replace_property_blob_from_id.
 Convert from S31.32 to Q3.12. 
		
		  Convert to 2s complement and check the destination's top bit
		  for overflow. NB: Can't check before converting or it'd
		  incorrectly reject the case:
		  sign == 1
		  mag == 0x2000
 U16.16 
 U16.16 
 The scaling engine can only handle one plane at a time. 
		
		  Convert crtc_[w|h] to U32.32, then divide by U16.16 src_[w|h]
		  to get the U16.16 result.
 Calculate initial_phase and delta_phase for horizontal. 
 Same for vertical. 
	
	  check if there is enough rotation memory available for planes
	  that need 90° and 270° rotion or planes that are compressed.
	  Each plane has set its required memory size in the ->plane_check()
	  callback, here we only make sure that the sums are less that the
	  total usable memory.
	 
	  The rotation memory allocation algorithm (for each plane):
	   a. If no more rotated or compressed planes exist, all remaining
	      rotate memory in the bank is available for use by the plane.
	   b. If other rotated or compressed planes exist, and plane's
	      layer ID is DE_VIDEO1, it can use all the memory from first bank
	      if secondary rotation memory bank is available, otherwise it can
	      use up to half the bank's memory.
	   c. If other rotated or compressed planes exist, and plane's layer ID
	      is not DE_VIDEO1, it can use half of the available memory.
	 
	  Note: this algorithm assumes that the order in which the planes are
	  checked always has DE_VIDEO1 plane first in the list if it is
	  rotated. Because that is how we create the planes in the first
	  place, under current DRM version things work, but if ever the order
	  in which drm_atomic_crtc_state_for_each_plane() iterates over planes
	  changes, we need to pre-sort the planes before validation.
 first count the number of rotated planes 
	
	  if we have more than 1 plane using rotation memory, use the second
	  block of rotation memory as well
 now validate the rotation memory requirements 
 process current plane 
 no more rotated planes, we can use what's left 
 If only the writeback routing has changed, we don't need a modeset 
 No inverse-gamma: it is per-plane. 
 SPDX-License-Identifier: GPL-2.0-only
  (C) COPYRIGHT 2016 ARM Limited. All rights reserved.
  Author: Liviu Dudau <Liviu.Dudau@arm.com>
  ARM Mali DP plane manipulation routines.
 Layer specific register offsets 
  This 4-entry look-up-table is used to determine the full 8-bit alpha value
  for formats with 1- or 2-bit alpha channels.
  We set it to give 100%0% opacity for 1-bit formats and 100%66%33%0%
  opacity for 2-bit formats.
 page sizes the MMU prefetcher can support 
 readahead for partial-frame prefetch 
  Replicate what the default ->reset hook does: free the state pointer and
  allocate a new empty object. We just need enough space to store
  a malidp_plane_state instead of a drm_plane_state.
 Some pixel formats are supported without any modifier 
		
		  However these pixel formats need to be supported with
		  modifiers only
 SPLIT buffers must use SPARSE layout 
 CBR only applies to YUV formats, where YTR should be always 0 
 return false, if the modifier was not found 
	
	  RGB formats need to provide YTR modifier and YUV formats should not
	  provide YTR modifier.
 Scaling not necessary for this plane. 
 Defer scaling requirements calculation to the crtc check. 
  Check if the framebuffer is entirely made up of pages at least pgsize in
  size. Only a heuristic: assumes that each scatterlist entry has been aligned
  to the largest page size smaller than its length and that the MMU maps to
  the largest page size possible.
  Check if it is possible to enable partial-frame MMU prefetch given the
  current format, AFBC state and rotation.
 rotation and horizontal flip not supported for partial prefetch 
 always supported 
 supported, but if AFBC then must be sparse mode 
 supported, but not for AFBC 
 not supported 
  Select the preferred MMU prefetch mode. Full-frame prefetch is preferred as
  long as the framebuffer is all large pages. Otherwise partial-frame prefetch
  is selected as long as it is supported for the current format. The selected
  page size for prefetch is returned in pgsize_bitmap.
 get the full-frame prefetch page size(s) supported by the MMU 
 get the partial-frame prefetch page size(s) supported by the MMU 
 partial prefetch using the smallest page size 
 get the page sizes supported by the MMU 
	
	  DP550650 video layers can accept 3 plane formats only if
	  fb->pitches[1] == fb->pitches[2] since they don't have a
	  third plane stride register.
 validate the rotation constraints for each layer 
		
		  packed RGB888  BGR888 can't be rotated or flipped
		  unless they are stored in a compressed way
 SMART layer does not support AFBC 
 HW can't support plane + pixel blending 
	
	  The drm convention for pitch is that it needs to cover width  cpp,
	  but our hardware wants the pitchstride to cover all rows included
	  in a tile.
 coefficients are signed, two's complement values 
 check hardware supports MMU prefetch 
	
	  drm_fb_cma_get_gem_addr() alters the physical base address of the
	  framebuffer as per the plane's src_x, src_y co-ordinates (ie to
	  take care of source cropping).
	  For AFBC, this is not needed as the cropping is handled by _AD_CROP_H
	  and _AD_CROP_V registers.
 no afbc_decoder_offset means AFBC is not supported on this plane 
 convert src values from Q16 fixed point to integer 
	
	  For AFBC framebuffer, use the framebuffer width and height for
	  configuring layer input size register.
 convert src values from Q16 fixed point to integer 
		
		  Enable the first rectangle in the SMART layer to be
		  able to use it as a drm plane.
 first clear the rotation bits 
 setup the rotation and axis flip bits 
 We only care about blend mode if the format has alpha 
 set the 'enable layer' bit 
		
		  Since our hardware does not support SPLIT, so build the list
		  of supported modifiers excluding SPLIT ones.
 build the list of DRM supported formats based on the map 
		
		  All the layers except smart layer supports AFBC modifiers.
 Skip the features which the SMART layer doesn't have. 
 Attach the YUV->RGB property only to video layers 
 default encoding for YUV->RGB is BT601 NARROW 
 program the HW registers 
 SPDX-License-Identifier: GPL-2.0-only
  (C) COPYRIGHT 2016 ARM Limited. All rights reserved.
  Author: Liviu Dudau <Liviu.Dudau@arm.com>
  ARM Mali DP500DP550DP650 hardware manipulation routines. This is where
  the difference between various versions of the hardware is being dealt with
  in an attempt to provide to the rest of the driver code a unified view
 SE writeback not enabled 
 SE in one-shot mode for writeback 
 SE started writeback 
 SE will start another writeback after this one 
 SE needs to stop after this writeback 
    fourcc,   layers supporting the format,     internal id  
 These are supported with AFBC only 
    fourcc,   layers supporting the format,      internal id    \
 This is only supported with linear modifier 	\
 This is only supported with AFBC modifier 		\
 This is only supported with linear modifier  \
 This is only supported with AFBC modifier  \
 This is only supported with linear modifier  \
 This is only supported with AFBC modifier  \
 This is only supported with AFBC modifier  \
	 id, base address, fb pointer address base, stride offset,
	 	yuv2rgb matrix offset, mmu control register offset, rotation_features
	 id, base address, fb pointer address base, stride offset,
	 	yuv2rgb matrix offset, mmu control register offset, rotation_features
	 id, base address, fb pointer address base, stride offset,
	 	yuv2rgb matrix offset, mmu control register offset,
	 	rotation_features
 All RGB formats (except XRGB, RGBX, XBGR, BGRX) 
 All RGB formats > 16bpp (except XRGB, RGBX, XBGR, BGRX) 
 All 8 or 10 bit YUV 444 formats. 
 In DP550, 10 bit YUV 420 format also supported 
 YUV 420, 422 P1 8 bit and YUV 444 8 bit10 bit formats 
 YUV 420, 422 P1 8, 10 bit formats 
 All formats 
 bit 4 of the CONFIG_ID register holds the line size multiplier 
 no second rotation memory bank 
		
		  entering config mode can take as long as the rendering
		  of a full frame, hence the long sleep here
	
	  Mali-DP500 encodes the background color like this:
	     - red   @ MALIDP500_BGND_COLOR[12:0]
	     - green @ MALIDP500_BGND_COLOR[27:16]
	     - blue  @ (MALIDP500_BGND_COLOR + 4)[12:0]
	
	  Program the RQoS register to avoid high resolutions flicker
	  issue on the LS1028A.
	
	  Each layer needs enough rotation memory to fit 8 lines
	  worth of pixel data. Required size is then:
	     size = rotated_width  (bpp  8)  8;
 Get array indices into dp500_se_scaling_coeffs. 
 Hz 
	
	  mclk = max(a, 1.5)  pxlclk
	 
	  To avoid float calculaiton, using 15 instead of 1.5 and div by
	  10 to get mclk.
 enable the scaling engine block 
 restart the writeback if already enabled 
 two banks of 64KB for rotation memory 
 two banks of 128KB for rotation memory 
 two banks of 40KB for rotation memory 
 reserved value 
		
		  entering config mode can take as long as the rendering
		  of a full frame, hence the long sleep here
	
	  Mali-DP550 and Mali-DP650 encode the background color like this:
	    - red   @ MALIDP550_DE_BGND_COLOR[23:16]
	    - green @ MALIDP550_DE_BGND_COLOR[15:8]
	    - blue  @ MALIDP550_DE_BGND_COLOR[7:0]
	 
	  We need to truncate the least significant 4 bits from the default
	  MALIDP_BGND_COLOR_x values
 8 lines at 4 bytes per pixel 
 16 lines at 2 bytes per pixel 
 16 lines at 1.5 bytes per pixel 
 8 lines at 3 bytes per pixel 
 16 lines at 12 bits per pixel 
 8 lines at 3 bytes per pixel 
 8 lines at 30 bits per pixel 
 16 lines at 15 bits per pixel 
 8 lines at 15 bits per pixel 
 Uncompressed YUV 420 10 bit single plane cannot be rotated 
 16 lines at 2 bytes per pixel 
 mclk can't be slower than pxlclk. 
 enable the scaling engine block 
 reserved values 
 two banks of 128KB for rotation memory 
 two banks of 80KB for rotation memory 
 no CLEARIRQ register 
			
			  In some DP550 and DP650, DRM_FORMAT_YUYV + AFBC modifier
			  is supported by a different hw format id than
			  DRM_FORMAT_YUYV (only).
	
	  if we are suspended it is likely that we were invoked because
	  we share an interrupt line with some other driver, don't try
	  to read the hardware registers
 first handle the config valid IRQ 
 do we have a page flip event? 
 keep the status of the enabled interrupts, plus the error bits 
 ensure interrupts are disabled 
 first enable the DC block IRQs 
 now enable the DE block IRQs 
 ensure interrupts are disabled 
	
	  if we are suspended it is likely that we were invoked because
	  we share an interrupt line with some other driver, don't try
	  to read the hardware registers
 disable writeback after stop 
 to a new start 
 writeback started, need to emulate one-shot mode 
			
			  only set config_valid HW bit if there is no other update
			  in progress or if we raced ahead of the DE IRQ handler
			  and config_valid flag will not be update until later
 ensure interrupts are disabled 
 ensure interrupts are disabled 
 SPDX-License-Identifier: GPL-2.0
  (C) COPYRIGHT 2016 ARM Limited. All rights reserved.
  Author: Brian Starkey <brian.starkey@arm.com>
  ARM Mali DP Writeback connector implementation
 memory write buffers are never rotated 
  Copyright (C) 2013-2015 ARM Limited
  Author: Liviu Dudau <Liviu.Dudau@arm.com>
  This file is subject to the terms and conditions of the GNU General Public
  License.  See the file COPYING in the main directory of this archive
  for more details.
   ARM HDLCD Driver
 acknowledge interrupt(s) 
 Ensure interrupts are disabled 
 enable debug interrupts 
 disable all the interrupts that we might have enabled 
 disable debug interrupts 
 disable vsync interrupts 
 Get the optional framebuffer memory resource 
 Set the CRTC's port so that the encoder component can find it 
 there is only one output port inside each device, find it 
 SPDX-License-Identifier: GPL-2.0
  (C) COPYRIGHT 2018 ARM Limited. All rights reserved.
  Author: James.Qian.Wang <james.qian.wang@arm.com>
 the write back data comes from the compiz 
 compiz doesn't output alpha 
	
	  No need for a full modested when the only connector changed is the
	  writeback connector.
 SPDX-License-Identifier: GPL-2.0
  (C) COPYRIGHT 2018 ARM Limited. All rights reserved.
  Author: James.Qian.Wang <james.qian.wang@arm.com>
 enum ports 
 Get the optional framebuffer memory resource 
 SPDX-License-Identifier: GPL-2.0
  (C) COPYRIGHT 2018 ARM Limited. All rights reserved.
  Author: James.Qian.Wang <james.qian.wang@arm.com>
 Two assumptions
  1. RGB always has YTR
  2. Tiled RGB always has SC
 AFBC_16x16 + features: YUV+RGB both 
 SPARSE 
 YTR + (SPARSE) 
 SPLIT + SPARSE + YTR RGB only 
 split mode is only allowed for sparse mode 
 TILED + (SPARSE) 
 TILED YUV format only 
 TILED + SC + (SPLIT+SPARSE | SPARSE) + (YTR) 
 AFBC_32x8 + features: which are RGB formats only 
 YTR + (SPARSE) 
 SPLIT + SPARSE + (YTR) 
 split mode is only allowed for sparse mode 
 TILED + SC + (SPLIT+SPARSE | SPARSE) + YTR 
		 one fourcc may has two caps items in table (afbcnone-afbc),
		  so check the existing list to avoid adding a duplicated one.
 SPDX-License-Identifier: GPL-2.0
  (C) COPYRIGHT 2018 ARM Limited. All rights reserved.
  Author: James.Qian.Wang <james.qian.wang@arm.com>
 Call into the CHIP to recognize events 
 Notify the crtc to handle the events 
	 Considering the list sequence is zpos increasing, so if list is empty
	  or the zpos of new node bigger than the last node in list, no need
	  loop and just insert the new one to the tail of the list.
 Build the list by zpos increasing 
			 Komeda doesn't support setting a same zpos for
			  different planes.
 This loop also added all effected planes into the new state 
 Build a list by zpos increasing 
		 When layer_split has been enabled, one plane will be handled
		  by two separated komeda layers (leftright), which may needs
		  two zorders.
		  - zorder: for left_layer for left display part.
		  - zorder + 1: will be reserved for right layer.
 calculate max slave zorder 
	 Komeda need to re-calculate resource assumption in every commit
	  so need to add all affected_planes (even unchanged) to
	  drm_atomic_state.
 Get value from dev 
 SPDX-License-Identifier: GPL-2.0
  (C) COPYRIGHT 2018 ARM Limited. All rights reserved.
  Author: James.Qian.Wang <james.qian.wang@arm.com>
 connector doesn't config any color_format, use RGB444 as default 
  komeda_crtc_atomic_check - build display output data flow
  @crtc: DRM crtc
  @state: the crtc state object
  crtc_atomic_check is the final check stage, so beside build a display data
  pipeline according to the crtc_state, but still needs to release or disable
  the unclaimed pipeline resources.
  RETURNS:
  Zero for success or -errno
 release unclaimed pipeline resources 
 For active a crtc, mainly need two parts of preparation
  1. adjust display operation mode.
  2. enable needed clk
	 Only need to enable aclk on single display mode, but no need to
	  enable aclk it on dual display mode, since the dual mode always
	  switch from single display mode, the aclk already enabled, no need
	  to enable it again.
 will handle it together with the write back support 
			
			  Consume event before notifying drm core that flip
			  happened.
 step 1: update the pipelinecomponent state to HW 
 step 2: notify the HW to kickoff the update 
 if caller doesn't send a flip_done, use a private flip_done 
 wait the flip take affect.
	 crtc_disable has two scenarios according to the state->active switch.
	  1. active -> inactive
	     this commit is a disable commit. and the commit will be finished
	     or done after the disable operation. on this case we can directly
	     use the crtc->state->event to tracking the HW disable operation.
	  2. active -> active
	     the crtc->commit is not for disable, but a modeset operation when
	     crtc is active, such commit actually has been completed by 3
	     DRM operations:
	     crtc_disable, update_planes(crtc_flush), crtc_enable
	     so on this case the crtc->commit is for the whole process.
	     we can not use it for tracing the disable, we need a temporary
	     flip_done for tracing the disable. and crtc->state->event for
	     the crtc_enable operation.
	     That's also the reason why skip modeset commit in
	     komeda_crtc_atomic_flush()
 wait phase 1 disable done 
 phase 2 
 commit with modeset will be handled in enabledisable 
 Returns the minimum frequency of the aclk rate (main engine clock) in Hz 
	 Once dual-link one display pipeline drives two display outputs,
	  the aclk needs run on the double rate of pxlclk
 Get current aclk rate that specified by state 
 In dual link half the horizontal settings 
 crtc_clock will be used as the komeda output pixel clock 
 only master can be primary 
 SPDX-License-Identifier: GPL-2.0
  (C) COPYRIGHT 2018 ARM Limited. All rights reserved.
  Author: James.Qian.Wang <james.qian.wang@arm.com>
 komeda_pipeline_add - Add a pipeline to &komeda_dev 
 komeda_component_add - Add a component to &komeda_pipeline 
 calculate right layer for the layer split 
 if pipeline_A accept another pipeline_B's component as input, treat
  pipeline_B as slave of pipeline_A.
 SPDX-License-Identifier: GPL-2.0
  (C) COPYRIGHT 2018 ARM Limited. All rights reserved.
  Author: James.Qian.Wang <james.qian.wang@arm.com>
 Assign pipeline for crtc 
 pipeline only can be disabled when the it is free or unused 
  komeda_component_get_state_and_set_user()
  @c: component to get state and set user
  @state: global atomic state
  @user: direct user, the binding user
  @crtc: the CRTC user, the big boss :)
  This function accepts two users:
  -   The direct user: can be planecrtcwb_connector depends on component
  -   The big boss (CRTC)
  CRTC is the big boss (the final user), because all component resources
  eventually will be assigned to CRTC, like the layer will be binding to
  kms_plane, but kms plane will be binding to a CRTC eventually.
  The big boss (CRTC) is for pipeline assignment, since &komeda_component isn't
  independent and can be assigned to CRTC freely, but belongs to a specific
  pipeline, only pipeline can be shared between crtc, and pipeline as a whole
  (include all the internal components) assigned to a specific CRTC.
  So when set a user to komeda_component, need first to check the status of
  component->pipeline to see if the pipeline is available on this specific
  CRTC. if the pipeline is busy (assigned to another CRTC), even the required
  component is free, the component still cannot be assigned to the direct user.
 First check if the pipeline is available 
 check if the component has been occupied 
 mark the component as active if user is valid 
	 since the inputs[i] is only valid when it is active. So if a input[i]
	  is a newly enabled input which switches from disable to enable, then
	  the old inputs[i] is undefined (NOT zeroed), we can not rely on
	  memcmp, but directly mark it changed
 Get current available scaler from the component->supported_outputs 
 update the data flow for the next stage 
	
	  The rotation has been handled by layer, so adjusted the data flow for
	  the next stage.
	 If input comes from compiz that means the scaling is for writeback
	  and scaler can not do upscaling for writeback
 Enable alpha processing if the next stage needs the pixel alpha 
 check display rect 
 compare with old to check if this input has been changed 
	 compiz output dflow will be fed to the next pipeline stage, prepare
	  the data flow configuration for the next stage
		 the output data of compiz doesn't have alpha, it only can be
		  used as bottom layer when blend it with master layers
 if format doesn't have alpha, fix blend mode to PIXEL_NONE 
 try to enable image enhancer if data flow is a 2x+ upscaling 
	 try to enable split if scaling exceed the scaler's acceptable
	  inputoutput range.
 if split, check if can put the data flow into merger 
  Split is introduced for workaround scaler's inputoutput size limitation.
  The idea is simple, if one scaler can not fit the requirement, use two.
  So split splits the big source image to two half parts (leftright) and do
  the scaling by two scaler separately and independently.
  But split also imports an edge problem in the middle of the image when
  scaling, to avoid it, split isn't a simple half-and-half, but add an extra
  pixels (overlap) to both side, after split the leftright will be:
  - left: [0, src_length2 + overlap]
  - right: [src_length2 - overlap, src_length]
  The extra overlap do eliminate the edge problem, but which may also generates
  unnecessary pixels when scaling, we need to crop them before scaler output
  the result to the next stage. and for the how to crop, it depends on the
  unneeded pixels, another words the position where overlay has been added.
  - left: crop the right
  - right: crop the left
  The diagram for how to do the split
   <---------------------left->out_w ---------------->
  |--------------------------------|---right_crop-----| <- left after split
   \                                \                
    \                                \<--overlap--->
    |-----------------|-------------|(Middle)------|-----------------| <- src
                      <---overlap--->\                               \
                                      \                               \
  right after split->|-----left_crop---|--------------------------------|
                     ^<------------------- right->out_w --------------->^
  NOTE: To consistent with HW the output_w always contains the crop size.
	 original dflow may fed into splitter, and which doesn't need
	  enhancement overlap
 split the origin content 
	 leftright here always means the leftright part of display image,
	  not the source Image
 DRM rotation is anti-clockwise 
 enhancer only 
 split without scaler, no overlap 
		 Consider YUV format, after split, the split source wh
		  may not aligned to 2. we have two choices for such case.
		  1. scaler is enabled (overlap != 0), we can do a alignment
		     both leftright and crop the extra data by scaler.
		  2. scaler is not enabled, only align the split left
		     srcdisp, and the rest part assign to right
 do YUV alignment when scaler enabled 
 on flip_h, the left display content from the right-source 
 split the disp_rect 
 calculate the scaling crop 
 left scaler output more data and do crop 
 out_w includes the crop length 
 For layer split, a plane state will be split to two data flows and handled
  by two separated komeda layer input pipelines. komeda supports two types of
  layer split:
  - none-scaling split:
               layer-left -> \
  plane_state                  compiz-> ...
              \ layer-right-> 
  - scaling split:
               layer-left -> scaler->\
  plane_state                          merger -> compiz-> ...
              \ layer-right-> scaler->
  Since merger only supports scaler as input, so for none-scaling split, two
  layer data flows will be output to compiz directly. for scaling_split, two
  data flow will be merged by merger firstly, then merger outputs one merged
  data flow to compiz.
 The rotation has been handled by layer, so adjusted the data flow 
	 left and right dflow has been merged to compiz already,
	  no need merger to merge them anymore.
 line merger path 
 writeback data path: compiz -> scaler -> wb_layer -> memory 
 writeback scaling split data path:
                    -> scaler ->\
  compiz -> splitter              merger -> wb_layer -> memory
                    \-> scaler ->
 build display output data flow, the data path is:
  compiz -> improc -> timing_ctrlr
 master data flow 
 slave data flow 
 merge the slave dflow into master pipeline 
 unbound all disabling component 
 release unclaimed pipeline resource 
 ignore the pipeline which is not affected 
 Since standalong disabled components must be disabled separately and in the
  last, So a complete disable operation may needs to call pipeline_disable
  twice (two phase disabling).
  Phase 1: disable the common components, flush it.
  Phase 2: disable the standalone disabled components, flush it.
  RETURNS:
  true: disable is not complete, needs a phase 2 disable.
  false: disable is complete.
		
		  If we disabled a component then all active_inputs should be
		  put in the list of changed_active_inputs, so they get
		  re-enabled.
		  This usually happens during a modeset when the pipeline is
		  first disabled and then the actual state gets committed
		  again.
	 Update the pipeline state, if there are components that are still
	  active, return true for calling the phase 2 disable.
 SPDX-License-Identifier: GPL-2.0
  (C) COPYRIGHT 2018 ARM Limited. All rights reserved.
  Author: James.Qian.Wang <james.qian.wang@arm.com>
 add connector 
 SPDX-License-Identifier: GPL-2.0
  (C) COPYRIGHT 2019 ARM Limited. All rights reserved.
  Author: James.Qian.Wang <james.qian.wang@arm.com>
 return 0 on success,  < 0 on no space.
 GLB error 
 DOU error 
 LPU errors or events 
 LPU TBU errors
 CU errors
 reduce the same msg print, only print the first evt for one frame 
 SPDX-License-Identifier: GPL-2.0
  (C) COPYRIGHT 2018 ARM Limited. All rights reserved.
  Author: James.Qian.Wang <james.qian.wang@arm.com>
 SPDX-License-Identifier: GPL-2.0
  (C) COPYRIGHT 2018 ARM Limited. All rights reserved.
  Author: James.Qian.Wang <james.qian.wang@arm.com>
 tiled header afbc 
 if the fb can be supported by a specific layer 
 SPDX-License-Identifier: GPL-2.0
  (C) COPYRIGHT 2018 ARM Limited. All rights reserved.
  Author: James.Qian.Wang <james.qian.wang@arm.com>
  komeda_plane_atomic_check - build input data flow
  @plane: DRM plane
  @state: the plane state object
  RETURNS:
  Zero for success or -errno
 crtc is inactive, skip the resource assignment 
 plane doesn't represent a real HW, so there is no HW update for plane.
  komeda handles all the HW update in crtc->atomic_flush
 for komeda, which is pipeline can be share between crtcs 
 use Layer0 as primary 
 SPDX-License-Identifier: GPL-2.0
  (C) COPYRIGHT 2019 ARM Limited. All rights reserved.
  Author: James.Qian.Wang <james.qian.wang@arm.com>
 10bit precision YUV2RGB matrix 
 SPDX-License-Identifier: GPL-2.0
  (C) COPYRIGHT 2018 ARM Limited. All rights reserved.
  Author: James.Qian.Wang <james.qian.wang@arm.com>
 0xA4 is WO register 
 On D71, we are using the global line size. From D32, every component have
  a line size register to indicate the fifo size.
 if input is not active, set hw input_id(0) to disable it 
 afbc 1.2 wants payload, afbc 1.01.1 wants end_addr 
 these fmt support MPGEJPEG both, here perfer JPEG
 D32 or newer product 
 D71 4K 
 D71 2K 
 rich layer is 4K configuration 
		 Besides clearing the input ID to zero, D71 compiz also has
		  input enable bit in CU_INPUTx_CONTROL which need to be
		  cleared.
	 for right part, HW only sample the valid pixel which means the pixels
	  in left_crop will be jumpped, and the first sample pixel is:
	 
	  dst_a = st->total_hsize_out - st->hsize_out + st->left_crop + 0.5;
	 
	  Then the corresponding texel in src is:
	 
	  h_delta_phase = st->total_hsize_in  st->total_hsize_out;
	  src_a = dst_A  h_delta_phase;
	 
	  and h_init_phase is src_a deduct the real source start src_S;
	 
	  src_S = st->total_hsize_in - st->hsize_in;
	  h_init_phase = src_a - src_S;
	 
	  And HW precision for the initialdelta_phase is 16:16 fixed point,
	  the following is the simplified formula
 If we use the hardware splitter we shouldn't set SC_CTRL_LS 
	 D71 downscaling must satisfy the following equation
	 
	    ACLK                   h_in  v_in
	  ------- >= ---------------------------------------------
	   PXLCLK     (h_total - (1 + 2  v_in  v_out))  v_out
	 
	  In only horizontal downscaling situation, the right side should be
	  multiplied by (h_total - 3)  (h_active - 3), then equation becomes
	 
	    ACLK          h_in
	  ------- >= ----------------
	   PXLCLK     (h_active - 3)
	 
	  To avoid precision lost the equation 1 will be convert to:
	 
	    ACLK             h_in  v_in
	  ------- >= -----------------------------------
	   PXLCLK     (h_total -1 )  v_out -  2  v_in
 enable gamma 
 enable gamut 
 config color format 
 configure bs control register 
 SPDX-License-Identifier: GPL-2.0
  (C) COPYRIGHT 2018 ARM Limited. All rights reserved.
  Author: James.Qian.Wang <james.qian.wang@arm.com>
 Check error of LPU status 
 Check errors of TBU status 
 get valid input and output ids 
 probe GCU 
	 Only the legacy HW has the periph block, the newer merges the periph
	  into GCU
 probe PERIPHERAL in legacy HW 
		 D71 HW doesn't update shadow registers when display output
		  is turning off, so when we disable all pipeline components
		  together with display output disable by one flush or one
		  operation, the disable operation updated registers will not
		  be flush to or valid in HW, which may leads problem.
		  To workaround this problem, introduce a two phase disable.
		  Phase1: Disabling components with display is on to make sure
		 	   the disable can be flushed to HW.
		  Phase2: Only turn-off display output.
	 loop the register blks and probe.
	  NOTE: d71->num_blocks includes reserved blocks.
	  d71->num_blocks = GCU + valid blocks + reserved blocks
 exclude GCU 
 skip GCU 
   HW_ID    |        fourcc         |   layer_types |   rots    | afbc_layouts | afbc_features 
 ABGR_2101010
 afbc 
 ABGR_8888
 afbc 
 XBGB_8888 
 BGR_888  
 afbc 
 BGR 16bpp 
 afbc 
 afbc 
 YUV 444422420 8bit  
 afbc 
 afbc 
 YUV 10bit
 SPDX-License-Identifier: GPL-2.0-only
 Copyright (c) 2020 NVIDIA Corporation 
 IOMMU domain managed directly using IOMMU API 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2015, NVIDIA Corporation.
 copy the whole thing taking into account endianness 
 endian problems would show up right here 
 currently only version 1 is supported 
 check that the firmware size is consistent 
 request_firmware prints error if it fails 
 copy firmware image into local area. this also ensures endianness 
 parse the image data 
 setup the address of the binary data so Falcon can access it later 
 copy the data segment into Falcon internal memory 
 copy the code segment into Falcon internal memory 
 setup falcon interrupts 
 enable interface 
 boot falcon 
 SPDX-License-Identifier: GPL-2.0-only
 Copyright (c) 2020 NVIDIA Corporation 
 TODO check that target_offset is within bounds 
 Syncpt ref will be dropped on job release 
 Check for maximum gather size 
 Set initial class for firewall. 
 Allocate gather BO and copy gather words in. 
 Get data buffer mappings and do relocation patching. 
 Allocate host1x_job and add gathers and waits to it. 
 Map gather data for Host1x. 
 Boot engine. 
	
	  job_data is now part of job reference counting, so don't release
	  it from here.
 Submit job to hardware. 
 Return postfences to userspace and add fences to DMA reservations. 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2012 Avionic Design GmbH
  Copyright (C) 2012 NVIDIA CORPORATION.  All rights reserved.
	
	  If the panel provides one or more modes, use them exclusively and
	  ignore any other means of obtaining a mode.
		
		  Don't mix nvidia,panel phandle with the graph in a
		  device-tree.
		
		  Disable the interrupt until the connector has been
		  initialized to avoid a race in the hotplug interrupt
		  handler.
	
	  The connector is now registered and ready to receive hotplug events
	  so the hotplug interrupt can be enabled.
	
	  Create a CEC notifier for HDMI connector.
	
	  The connector is going away, so the interrupt must be disabled to
	  prevent the hotplug interrupt handler from potentially crashing.
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2013 NVIDIA Corporation
 for ganged-mode support 
  non-burst mode with sync pulses
  non-burst mode with sync events
 XXX: pass in state into this function? 
 enable DCS commands for command mode 
 horizontal active pixels 
 horizontal sync width 
 horizontal back porch 
 horizontal front porch 
 subtract packet overhead 
 set SOL delay (for non-burst mode only) 
 TODO: implement ganged mode 
			
			  For ganged mode, assume symmetric left-right mode.
 1 byte (DCS command) + pixel data 
 set SOL delay 
 SOL to valid, valid to FIFO and FIFO write delay 
 FIFO read delay 
 TODO: revisit for non-ganged mode 
		
		  TODO: Support modes other than symmetrical left-right
		  split.
	
	  XXX Is this still needed? The module reset is deasserted right
	  before this function is called.
 start calibration 
 one frame high-speed transmission timeout 
 2 ms peripheral timeout for panel 
	
	  The following accesses registers of the display controller, so make
	  sure it's only executed when the output is attached to one.
	
	  The D-PHY timing fields are expressed in byte-clock cycles, so
	  multiply the period by 8.
 enable display controller 
 enable DSI controller 
 compute byte clock 
	
	  Compute bit clock and round up to the next MHz.
	
	  We divide the frequency by two here, but we make up for that by
	  setting the shift clock divider (further below) to half of the
	  correct value.
	
	  Derive pixel clock from bit clock using the shift clock divider.
	  Note that this is only half of what we would expect, but we need
	  that to make up for the fact that we divided the bit clock by a
	  factor of two above.
	 
	  It's not clear exactly why this is necessary, but the display is
	  not working properly otherwise. Perhaps the PLLs cannot generate
	  frequencies sufficiently high.
 Gangsters must not register their own outputs. 
 read and parse packet header 
 maximum FIFO depth is 1920 words 
 reset underflowoverflow flags 
	
	  The host FIFO has a maximum of 64 words, so larger transmissions
	  need to use the video FIFO.
	
	  For reads and messages with explicitly requested ACK, generate a
	  BTA sequence after the transmission of the packet.
 write packet header, ECC is generated by hardware 
 write payload (if any) 
			
			dev_dbg(dsi->dev, "ACK\n");
			
			dev_dbg(dsi->dev, "ESCAPE\n");
				
				  For read commands, return the number of
				  bytes returned by the peripheral.
		
		  For write commands, we have transmitted the 4-byte header
		  plus the variable-length payload.
 make sure both DSI controllers share the same PLL 
	
	  Slaves don't have a panel associated with them, so they provide
	  merely the second channel.
	
	  Assume these values by default. When a DSI peripheral driver
	  attaches to the DSI host, the parameters will be taken from
	  the attached device.
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2012 Avionic Design GmbH
  Copyright (C) 2012 NVIDIA CORPORATION.  All rights reserved.
 slow pixel clock modes 
 high pixel clock modes 
 480p modes 
 720p modes 
 1080p modes 
 480p576p  25.2MHz27MHz modes 
 720p  74.25MHz modes 
 1080p  148.5MHz modes 
 225297MHz modes 
 480p576p  25.2MHz27MHz modes 
 720p  74.25MHz modes 
 1080p  148.5MHz modes 
 225297MHz modes 
 compute aval in 48.16 fixed point 
 It should round without any rest 
 Compute cts in 48.16 fixed point 
 Round it to the nearest integer 
 Compute the absolute error 
	
	  Tegra30 and later use a slightly modified version of the register
	  layout to accomodate for changes related to supporting HDA as the
	  audio input source for HDMI. The source select field has moved to
	  the SOR_AUDIO_CNTRL0 register, but the error tolerance and frames
	  per block fields remain in the AUDIO_CNTRL0 register.
		
		  Inject null samples into the audio FIFO for every frame in
		  which the codec did not receive any samples. This applies
		  to stereo LPCM only.
		 
		  XXX: This seems to be a remnant of MCP days when this was
		  used to work around issues with monitors not being able to
		  play back system startup sounds early. It is possibly not
		  needed on Linux at all.
	
	  On Tegra20, HDA is not a supported audio source and the source
	  select field is part of the AUDIO_CNTRL0 register.
	
	  Advertise support for High Bit-Rate on Tegra114 and later.
	
	  The HDA codec will always report an ELD buffer size of 96 bytes and
	  the HDA codec driver will check that each byte read from the buffer
	  is valid. Therefore every byte must be written, even if no 96 bytes
	  were parsed from EDID.
	
	  Each subpack contains 7 bytes, divided into:
	  - subpack_low: bytes 0 - 3
	  - subpack_high: bytes 4 - 6 (with byte 7 padded to 0x00)
	
	  The audio infoframe has only one set of subpack registers, so the
	  infoframe needs to be truncated. One set of subpack registers can
	  contain 7 bytes. Including the 3 byte header only the first 10
	  bytes can be programmed.
	
	  The following accesses registers of the display controller, so make
	  sure it's only executed when the output is attached to one.
	
	  Enable and unmask the HDA codec SCRATCH0 register interrupt. This
	  is used for interoperability between the HDA codec driver and the
	  HDMI driver.
 power up sequence 
 video_preamble uses h_pulse2 
		
		  Make sure that the audio format has been configured before
		  enabling audio, otherwise we may try to divide by zero.
 TMDS CONFIG 
 start SOR 
 setup sync polarities 
 TODO: add HDCP support 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2013 Avionic Design GmbH
  Copyright (C) 2013 NVIDIA Corporation
 initialize address register map 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2012 Avionic Design GmbH
  Copyright (C) 2012 NVIDIA CORPORATION.  All rights reserved.
 XXX: parameterize? 
 XXX: parameterize? 
 XXX: parameterize? 
	
	  We may not want to change the frequency of the parent clock, since
	  it may be a parent for other peripherals. This is due to the fact
	  that on Tegra20 there's only a single clock dedicated to display
	  (pll_d_out0), whereas later generations have a second one that can
	  be used to independently drive a second output (pll_d2_out0).
	 
	  As a way to support multiple outputs on Tegra20 as well, pll_p is
	  typically used as the parent clock for the display controllers.
	  But this comes at a cost: pll_p is the parent of several other
	  peripherals, so its frequency shouldn't change out of the blue.
	 
	  The best we can do at this point is to use the shift clock divider
	  and hope that the desired frequency can be matched (or at least
	  matched sufficiently close that the panel will still work).
	
	  Wrap directly-connected panel into DRM bridge in order to let
	  DRM core to handle panel for us.
	
	  Tegra devices that have LVDS panel utilize LVDS encoder bridge
	  for converting up to 28 LCD LVTTL lanes into 54 LVDS lanes that
	  go to display panel's receiver.
	 
	  Encoder usually have a power-down control which needs to be enabled
	  in order to transmit data to the panel.  Historically devices that
	  use an older device-tree version didn't model the bridge, assuming
	  that encoder is turned ON by default, while today's DRM allows us
	  to model LVDS encoder properly.
	 
	  Newer device-trees utilize LVDS encoder bridge, which provides
	  us with a connector and handles the display panel.
	 
	  For older device-trees we wrapped panel into the panel-bridge.
	
	  Other outputs can be attached to either display controller. The RGB
	  outputs are an exception and work only with their parent display
	  controller.
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2012-2013 Avionic Design GmbH
  Copyright (C) 2012 NVIDIA CORPORATION.  All rights reserved.
  Based on the KMSFB CMA helpers
    Copyright (C) 2012 Analog Devices Inc.
 Undo the special mapping we made in fbdev probe. 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2015, NVIDIA Corporation.
 Platform configuration 
			
			  STREAMID0 is used for inputoutput buffers.
			  Initialize it to SID_VIC in case context isolation
			  is not enabled, and SID_VIC is used for both firmware
			  and data buffers.
			 
			  If context isolation is enabled, it will be
			  overridden by the SETSTREAMID opcode as part of
			  each job.
 STREAMID1 is used for firmware loading. 
 setup clockgating registers 
 Old VIC firmware needs kernel help with setting up FCE microcode. 
	
	  Inherit the DMA parameters (such as maximum segment size) from the
	  parent host1x device.
 avoid a dangling pointer just in case this disappears 
	
	  In this case we have received an IOVA from the shared domain, so we
	  need to make sure to get the physical address so that the DMA API
	  knows what memory pages to flush the cache for.
 inherit DMA mask from host1x parent 
 SPDX-License-Identifier: MIT
  Copyright (C) 2013-2019 NVIDIA Corporation
  Copyright (C) 2015 Rob Clark
  drm_dp_link_add_rate() - add a rate to the list of supported rates
  @link: the link to add the rate to
  @rate: the rate to add
  Add a link rate to the list of supported link rates.
  Returns:
  0 on success or one of the following negative error codes on failure:
  - ENOSPC if the maximum number of supported rates has been reached
  - EEXISTS if the link already supports this rate
  See also:
  drm_dp_link_remove_rate()
  drm_dp_link_remove_rate() - remove a rate from the list of supported rates
  @link: the link from which to remove the rate
  @rate: the rate to remove
  Removes a link rate from the list of supported link rates.
  Returns:
  0 on success or one of the following negative error codes on failure:
  - EINVAL if the specified rate is not among the supported rates
  See also:
  drm_dp_link_add_rate()
  drm_dp_link_update_rates() - normalize the supported link rates array
  @link: the link for which to normalize the supported link rates
  Users should call this function after they've manually modified the array
  of supported link rates. This function removes any stale entries, compacts
  the array and updates the supported link rate count. Note that calling the
  drm_dp_link_remove_rate() function already does this janitorial work.
  See also:
  drm_dp_link_add_rate(), drm_dp_link_remove_rate()
  drm_dp_link_probe() - probe a DisplayPort link for capabilities
  @aux: DisplayPort AUX channel
  @link: pointer to structure in which to return link capabilities
  The structure filled in by this function can usually be passed directly
  into drm_dp_link_power_up() and drm_dp_link_configure() to power up and
  configure the link based on the link's capabilities.
  Returns 0 on success or a negative error code on failure.
	
	  The DPCD stores the AUX read interval in units of 4 ms. There are
	  two special cases:
	 
	    1) if the TRAINING_AUX_RD_INTERVAL field is 0, the clock recovery
	       and channel equalization should use 100 us or 400 us AUX read
	       intervals, respectively
	 
	    2) for DP v1.4 and above, clock recovery should always use 100 us
	       AUX read intervals
 Parse SUPPORTED_LINK_RATES from eDP 1.4 
  drm_dp_link_power_up() - power up a DisplayPort link
  @aux: DisplayPort AUX channel
  @link: pointer to a structure containing the link configuration
  Returns 0 on success or a negative error code on failure.
 DP_SET_POWER register is only available on DPCD v1.1 and later 
	
	  According to the DP 1.1 specification, a "Sink Device must exit the
	  power saving state within 1 ms" (Section 2.5.3.1, Table 5-52, "Sink
	  Control Field" (register 0x600).
  drm_dp_link_power_down() - power down a DisplayPort link
  @aux: DisplayPort AUX channel
  @link: pointer to a structure containing the link configuration
  Returns 0 on success or a negative error code on failure.
 DP_SET_POWER register is only available on DPCD v1.1 and later 
  drm_dp_link_configure() - configure a DisplayPort link
  @aux: DisplayPort AUX channel
  @link: pointer to a structure containing the link configuration
  Returns 0 on success or a negative error code on failure.
  drm_dp_link_choose() - choose the lowest possible configuration for a mode
  @link: DRM DP link object
  @mode: DRM display mode
  @info: DRM display information
  According to the eDP specification, a source should select a configuration
  with the lowest number of lanes and the lowest possible link rate that can
  match the bitrate requirements of a video mode. However it must ensure not
  to exceed the capabilities of the sink.
  Returns: 0 on success or a negative error code on failure.
 available link symbol clock rates 
 available number of lanes 
 bandwidth requirement 
			
			  Capacity for this combination of lanes and rate,
			  factoring in the ANSI 8B10B encoding.
			 
			  Link rates in the DRM DP helpers are really link
			  symbol frequencies, so a tenth of the actual rate
			  of the link.
  DOC: Link training
  These functions contain common logic and helpers to implement DisplayPort
  link training.
  drm_dp_link_train_init() - initialize DisplayPort link training state
  @train: DisplayPort link training state
 write currently selected voltage-swing and pre-emphasis levels 
 write currently selected post-cursor level (if supported) 
 write link pattern 
 start clock recovery using training pattern 1 
 start channel equalization using pattern 2 or 3 
 transmit training pattern 1 for 500 microseconds 
 transmit training pattern 2 or 3 for 500 microseconds 
  drm_dp_link_train() - perform DisplayPort link training
  @link: a DP link object
  Uses the context stored in the DP link object to perform link training. It
  is expected that drivers will call drm_dp_link_probe() to obtain the link
  capabilities before performing link training.
  If the sink supports fast link training (no AUX CH handshake) and valid
  training settings are available, this function will try to perform fast
  link training and fall back to full link training on failure.
  Returns: 0 on success or a negative error code on failure.
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2013 NVIDIA Corporation
 Tegra has 4x4 byte DP AUX transmit and receive FIFOs. 
	
	  Allow zero-sized messages only for I2C, in which case they specify
	  address-only transactions.
 For non-zero-sized messages, set the CMDLEN field. 
 start transaction 
 read status and clear errors 
			
			  There might be a smarter way to do this, but since
			  the DP helpers will already retry transactions for
			  an -EBUSY return value, simply reuse that instead.
 clear interrupts 
 TODO: handle this 
	
	  Assume that by default the DPAUXI2C pads will be used for HDMI,
	  so power them up and configure them in I2C mode.
	 
	  The DPAUX code paths reconfigure the pads in AUX mode, but there
	  is no possibility to perform the I2C mode configuration in the
	  HDMI path.
 enable and clear all interrupts 
 make sure pads are powered down when not in use 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2013 NVIDIA Corporation
  Default D-PHY timings based on MIPI D-PHY specification. Derived from the
  valid ranges specified in Section 6.9, Table 14, Page 40 of the D-PHY
  specification (v1.2) with minor adjustments.
	
	  The MIPI D-PHY specification (Section 6.9, v1.2, Table 14, Page 40)
	  contains this formula as:
	 
	      T_HS-TRAIL = max(n  8  period, 60 + n  4  period)
	 
	  where n = 1 for forward-direction HS mode and n = 4 for reverse-
	  direction HS mode. There's only one setting and this function does
	  not parameterize on anything other that period, so this code will
	  assumes that reverse-direction HS mode is supported and uses n = 4.
  Validate D-PHY timing according to MIPI D-PHY specification (v1.2, Section
  Section 6.9 "Global Operation Timing Parameters").
 SPDX-License-Identifier: GPL-2.0-only
 Copyright (c) 2010-2020 NVIDIA Corporation 
 IMM cannot reasonably be used to write a pointer 
 SPDX-License-Identifier: GPL-2.0-only
  NVIDIA Tegra DRM GEM helper functions
  Copyright (C) 2012 Sascha Hauer, Pengutronix
  Copyright (C) 2013-2015 NVIDIA CORPORATION, All rights reserved.
  Based on the GEMCMA helpers
  Copyright (c) 2011 Samsung Electronics Co., Ltd.
 XXX move this into libscatterlist.c? 
	
	  If we've manually mapped the buffer object through the IOMMU, make
	  sure to return the IOVA address of our mapping.
	 
	  Similarly, for buffers that have been allocated by the DMA API the
	  physical address can be used for devices that are not attached to
	  an IOMMU. For these devices, callers must pass a valid pointer via
	  the @phys argument.
	 
	  Imported buffers were also already mapped at import time, so the
	  existing mapping can be reused.
	
	  If we don't have a mapping for this buffer yet, return an SG table
	  so that host1x can do the mapping for us via the DMA API.
		
		  If the buffer object was allocated from the explicit IOMMU
		  API code paths, construct an SG table from the pages.
		
		  If the buffer object already has an SG table but no pages
		  were allocated for it, it means the buffer was imported and
		  the SG table needs to be copied to avoid overwriting any
		  other potential users of the original SG table.
		
		  If the buffer object had no pages allocated and if it was
		  not imported, it had to be allocated with the DMA API, so
		  the DMA API helper can be used.
		
		  Clear the VM_PFNMAP flag that was set by drm_gem_mmap(),
		  and set the vm_pgoff (used as a fake buffer offset by DRM)
		  to 0 as we want to map the whole buffer.
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2012-2013, NVIDIA Corporation.
 initialize address register map 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2017 NVIDIA CORPORATION.  All rights reserved.
 check for the sector layout bit 
		
		  If we're not attached to a domain, we already stored the
		  physical address when the buffer was allocated. If we're
		  part of a group that's shared between all display
		  controllers, we've also already mapped the framebuffer
		  through the SMMU. In both cases we can short-circuit the
		  code below and retrieve the stored IOV address.
			
			  The display controller needs contiguous memory, so
			  fail if the buffer is discontiguous and we fail to
			  map its SG table to a single contiguous chunk of
			  IO virtual memory.
	
	  Note that real memory bandwidth vary depending on format and
	  memory layout, we are not taking that into account because small
	  estimation error isn't important since bandwidth is rounded up
	  anyway.
		
		  Sub-sampling is relevant for chroma planes only and vertical
		  readouts are not cached, hence only horizontal sub-sampling
		  matters.
 average bandwidth in kbytessec 
 mode.clock in kHz, peak bandwidth in kbytessec 
	
	  Tegra30114 Memory Controller can't interleave DC memory requests
	  for the tiled windows because DC uses 16-bytes atom, while DDR3
	  uses 32-bytes atom.  Hence there is x2 memory overfetch for tiled
	  framebuffer and DDR3 on these SoCs.
 ICC bandwidth in kbytessec 
 Propagate errors from allocation or locking failures. 
 Check plane state for visibility and calculate clipping bounds 
 assume no swapping of fetched data 
  This is applicable to Tegra20 and Tegra30 only where the opaque formats can
  be emulated using the alpha formats and alpha blending disabled.
 check if zpos  transparency changed 
 include all sibling planes into this commit 
 skip this plane and planes on different CRTCs 
 skip this plane and planes on different CRTCs 
		
		  Missing framebuffer means that plane is disabled, in this
		  case mark B  C window as top to be able to differentiate
		  windows indices order in regards to zPos for the middle
		  window X  Y registers programming.
	
	  If planes zpos  transparency changed, sibling planes blending
	  state may require adjustment and in this case they will be included
	  into this atom commit, otherwise blending state is unchanged.
	
	  All planes are now in the atomic state, walk them up and update
	  transparency state for each plane.
 skip planes on different CRTCs 
		
		  There is no need to update blending state for the disabled
		  plane.
 plane B on T2030 has a dedicated memory client for a 6-tap vertical filter 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2013 NVIDIA Corporation
 0 ,
 0x34 
 0 ,
 0x34 
 for HDMI 2.0 
  Implementing ->set_parent() here isn't really required because the parent
  will be explicitly selected in the driver code via the DP_CLK_SEL mux in
  the SOR_CLK_CNTRL register. This is primarily for compatibility with the
  Tegra186 and later SoC generations where the BPMP implements this clock
  and doesn't expose the mux via the common clock framework.
 Tegra only supports RBR, HBR and HBR2 
	
	  Clear or set the PD_TXD bit corresponding to each lane, depending
	  on whether it is used or not.
 start lane sequencer 
 power down all lanes 
 start lane sequencer 
 pre-charge all used lanes 
 enable pad calibration logic 
 disable pad calibration logic 
 configure link speed and lane count 
 configure load pulse position adjustment 
 use alternate scrambler reset for eDP 
 power up and pre-charge lanes 
 period 
 duty cycle 
 clock source: PCLK 
 wake up in normal mode 
 attach 
 wait for head to wake up 
 number of link clocks per line 
 ratio between input and output 
 precision factor 
 fraction < 0.5 
 1fraction 
 round up 
 compute the number of symbols per horizontal blanking interval 
 compute the number of symbols per vertical blanking interval 
	
	  TODO: The video timing programming below doesn't seem to match the
	  register definitions.
 sync end = sync width - 1 
 blank end = sync end + back porch 
 blank start = blank end + active 
 XXX interlacing support 
 switch to safe mode 
 go to sleep 
 detach 
 switch to safe parent clock 
	
	  For HBR2 modes, the SOR brick needs to use the x20 multiplier, so
	  the pixel clock must be corrected accordingly.
	
	  Each subpack contains 7 bytes, divided into:
	  - subpack_low: bytes 0 - 3
	  - subpack_high: bytes 4 - 6 (with byte 7 padded to 0x00)
 disable AVI infoframe 
 enable AVI infoframe 
	
	  The HDA codec will always report an ELD buffer size of 96 bytes and
	  the HDA codec driver will check that each byte read from the buffer
	  is valid. Therefore every byte must be written, even if no 96 bytes
	  were parsed from EDID.
	
	  Enable and unmask the HDA codec SCRATCH0 register interrupt. This
	  is used for interoperability between the HDA codec driver and the
	  HDMIDP driver.
 select HDA audio input 
 inject null samples 
 enable advertising HBR capability 
 enable HW CTS 
 allow packet to be sent 
 reset N counter and enable lookup 
 disable display to SOR clock 
 switch to safe parent clock 
 SOR pad PLL stabilization time 
 program the reference clock 
 XXX not in TRM 
	
	  Switch the pad clock to the DP clock. Note that we cannot actually
	  do this because Tegra186 and later don't support clk_set_parent()
	  on the sorX_pad_clkout clocks. We already do the equivalent above
	  using the DP_CLK_SEL mux of the SOR_CLK_CNTRL register.
 switch the SOR clock to the pad clock 
 switch the output clock to the parent pixel clock 
 adjust clock rate for HDMI 2.0 modes 
 XXX is this the proper check? 
 H_PULSE2 setup 
 infoframe setup 
 XXX HDMI audio support not implemented yet 
 use single TMDS protocol 
 power up pad calibration 
 production settings 
 XXX not in TRM 
 power down pad calibration 
 miscellaneous display controller settings 
 XXX set display head owner 
 configure dynamic range of output 
 configure colorspace 
 program preamble timing in SOR (XXX) 
 enable display to SOR clock and generate HDMI preamble 
	
	  Do not attempt to power down a DP link if we're not connected since
	  the AUX transactions would just be timing out.
 switch to safe parent clock 
 switch to safe parent clock 
 XXX not in TRM 
 XXX not in TRM 
 XXX not in TRM 
	
	  Switch the pad clock to the DP clock. Note that we cannot actually
	  do this because Tegra186 and later don't support clk_set_parent()
	  on the sorX_pad_clkout clocks. We already do the equivalent above
	  using the DP_CLK_SEL mux of the SOR_CLK_CNTRL register.
 switch the SOR clock to the pad clock 
 switch the output clock to the parent pixel clock 
 use DP-A protocol 
 enable port 
 compute configuration 
 CSTM (LVDS, link AB, upper) 
 PWM setup 
 attach and wake up 
	
	  XXX: Remove this reset once proper hand-over from firmware to
	  kernel is possible.
 Tegra124 and Tegra132 have lanes 0 and 2 swapped. 
		
		  override the default that we already set for Tegra210 and
		  earlier
 fall back to default per-SoC XBAR configuration 
 copy cells to SOR XBAR configuration 
		
		  No need to keep this around since we only use it as a check
		  to see if a panel is connected (eDP) or not (DP).
		
		  At this point, the reset control is most likely being used
		  by the generic power domain implementation. With any luck
		  the power domain will have taken care of resetting the SOR
		  and we don't have to do anything.
		
		  For backwards compatibility with Tegra210 device trees,
		  fall back to the old clock name "source" if the new "out"
		  clock is not available.
 fall back to the module clock on SOR0 (eDPLVDS only) 
	
	  Starting with Tegra186, the BPMP provides an implementation for
	  the pad output clock, so we have to look it up from device tree.
		
		  If the pad output clock is not available, then we assume
		  we're on Tegra210 or earlier and have to provide our own
		  implementation.
	
	  The bootloader may have set up the SOR such that it's module clock
	  is sourced by one of the display PLLs. However, that doesn't work
	  without properly having set up other bits of the SOR.
	
	  On Tegra210 and earlier, provide our own implementation for the
	  pad output clock.
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2012 Avionic Design GmbH
  Copyright (C) 2012 NVIDIA CORPORATION.  All rights reserved.
 Reads the active copy of a register. 
  Double-buffered registers have two copies: ASSEMBLY and ACTIVE. When the
  _ACT_REQ bits are set the ASSEMBLY copy is latched into the ACTIVE copy.
  Latching happens mmediately if the display controller is in STOP mode or
  on the next frame boundary otherwise.
  Triple-buffered registers have three copies: ASSEMBLY, ARM and ACTIVE. The
  ASSEMBLY copy is latched into the ARM copy immediately after _UPDATE bits
  are written. When the _ACT_REQ bits are written, the ARM copy is latched
  into the ACTIVE copy, either immediately if the display controller is in
  STOP mode, or at the next frame boundary otherwise.
 disable blending for non-overlapping case 
		
		  Since custom fix-weight blending isn't utilized and weight
		  of top window is set to max, we can enforce dependent
		  blending which in this case results in transparent bottom
		  window if top window is opaque and if top window enables
		  alpha blending, then bottom window is getting alpha value
		  of 1 minus the sum of alpha components of the overlapping
		  plane.
		
		  The region where three windows overlap is the intersection
		  of the two regions where two windows overlap. It contributes
		  to the area if all of the windows on top of it have an alpha
		  component.
		
		  Enable alpha blending if pixel format has an alpha
		  component.
		
		  If any of the windows on top of this window is opaque, it
		  will completely conceal this window within that area. If
		  top window has an alpha component, it is blended over the
		  bottom window.
			
			  When both middle and topmost windows have an alpha,
			  these windows a mixed together and then the result
			  is blended over the bottom window.
		
		  If window B  C is topmost, then X  Y registers are
		  matching the order of blending[...] state indices,
		  otherwise a swap is required.
	
	  For YUV planar modes, the number of bytes per pixel takes into
	  account only the luma component and therefore is 1.
	
	  For DDA computations the number of bytes per pixel for YUV planar
	  modes needs to take into account all Y, U and V components.
			
			  No need to handle this here because ->atomic_check
			  will already have filtered it out.
 setup default colorspace conversion coefficients 
		
		  Enable horizontal 6-tap filter and set filtering
		  coefficients to the default values defined in TRM.
		
		  Enable vertical 2-tap filter and set filtering
		  coefficients to the default values defined in TRM.
 non-native formats 
 new on Tegra114 
 new on Tegra114 
 new on Tegra124 
 no need for further checks if the plane is being disabled 
	
	  Tegra20 and Tegra30 are special cases here because they support
	  only variants of specific formats with an alpha component, but not
	  the corresponding opaque formats. However, the opaque formats can
	  be emulated by disabling alpha blending for the plane.
	
	  Older userspace used custom BO flag in order to specify the Y
	  reflection, while modern userspace uses the generic DRM rotation
	  property in order to achieve the same result.  The legacy BO flag
	  duplicates the DRM rotation property when both are set.
	
	  Tegra doesn't support different strides for U and V planes so we
	  error out if the user tries to display a framebuffer with such a
	  configuration.
 rien ne va plus 
 rien ne va plus 
 copy from state 
		
		  Tegra uses a shared stride for UV planes. Framebuffers are
		  already checked for this in the tegra_plane_atomic_check()
		  function, so it's safe to ignore the V-plane pitch here.
	
	  Ideally this would use drm_crtc_mask(), but that would require the
	  CRTC to already be in the mode_config's list of CRTCs. However, it
	  will only be added to that list in the drm_crtc_init_with_planes()
	  (in tegra_dc_init()), which in turn requires registration of these
	  planes. So we have ourselves a nice little chicken and egg problem
	  here.
	 
	  We work around this by manually creating the mask from the number
	  of CRTCs that have been registered, and should therefore always be
	  the same as drm_crtc_index() after registration.
 Always use window A as primary window 
 no need for further checks if the plane is being disabled 
 scaling not supported for cursor 
 only square cursors supported 
 rien ne va plus 
	
	  Legacy display supports hardware clipping of the cursor, but
	  nvdisplay relies on software to clip the cursor to the screen.
 enable cursor and set blend mode 
 nvdisplay relies on software for clipping 
 position the cursor 
 rien ne va plus 
	
	  This index is kind of fake. The cursor isn't a regular plane, but
	  its update and activation request bits in DC_CMD_STATE_CONTROL do
	  use the same programming. Setting this fake index here allows the
	  code in tegra_add_plane_state() to do the right thing without the
	  need to special-casing the cursor plane.
 non-native formats 
 planar formats 
 new on Tegra114 
 planar formats 
 new on Tegra114 
 new on Tegra124 
 planar formats 
				
				  Choose the first shared plane owned by this
				  head as the primary plane.
 XXX vblank syncpoints don't work with nvdisplay yet 
 fallback to software emulated VBLANK counter 
  tegra_dc_state_setup_clock - check clock settings and store them in atomic
      state
  @dc: display controller
  @crtc_state: CRTC atomic state
  @clk: parent clock for display controller
  @pclk: pixel clock
  @div: shift clock divider
  Returns:
  0 on success or a negative error-code on failure.
	
	  Outputs may not want to change the parent clock rate. This is only
	  relevant to Tegra20 where only a single display PLL is available.
	  Since that PLL would typically be used for HDMI, an internal LVDS
	  panel would need to be driven by some other clock such as PLL_P
	  which is shared with other peripherals. Changing the clock rate
	  should therefore be avoided.
 stop the display controller 
		
		  When CRTC is disabled on DPMS, the state of attached planes
		  is kept unchanged. Hence we need to enforce removal of the
		  bandwidths from the ICC paths.
		
		  We're iterating over the global atomic state and it contains
		  planes from another CRTC, hence we need to filter out the
		  planes unrelated to this CRTC.
		
		  See the comment related to !crtc->state->active above,
		  which explains why bandwidths need to be updated when
		  CRTC is turning ON.
		
		  During the preparation phase (atomic_begin), the memory
		  freq should go high before the DC changes are committed
		  if bandwidth requirement goes up, otherwise memory freq
		  should to stay high if BW requirement goes down.  The
		  opposite applies to the completion phase (post_commit).
		
		  Ignore the return value, there isn't anything useful to do
		  in case this fails.
	
	  This should really be part of the RGB encoder driver, but clearing
	  these bits has the side-effect of stopping the display controller.
	  When that happens no VBLANK interrupts will be raised. At the same
	  time the encoder is disabled before the display controller, so the
	  above code is always going to timeout waiting for the controller
	  to go idle.
	 
	  Given the close coupling between the RGB encoder and the display
	  controller doing it here is still kind of okay. None of the other
	  encoder drivers require these bits to be cleared.
	 
	  XXX: Perhaps given that the display controller is switched off at
	  this point anyway maybe clearing these bits isn't even useful for
	  the RGB encoder?
 initialize display controller 
 initialize timer 
 apply PLL and pixel clock changes 
 program display mode 
 interlacing isn't supported yet, so disable it 
 enable underflow reporting and display red for missing pixels 
	
	  Data-prefetch FIFO will easily help to overcome temporal memory
	  pressure if other plane overlaps with the cursor plane.
		
		  Ignore cursor plane overlaps because it's not practical to
		  assume that it contributes to the bandwidth in overlapping
		  area if window width is small.
	
	  The nv-display uses shared planes.  The algorithm below assumes
	  maximum 3 planes per-CRTC, this assumption isn't applicable to
	  the nv-display.  Note that T124 support has additional windows,
	  but currently they aren't supported by the driver.
	
	  For overlapping planes pixel's data is fetched for each plane at
	  the same time, hence bandwidths are accumulated in this case.
	  This needs to be taken into account for calculating total bandwidth
	  consumed by all planes.
	 
	  Here we get the overlapping state of each plane, which is a
	  bitmask of plane indices telling with what planes there is an
	  overlap. Note that bitmask[plane] includes BIT(plane) in order
	  to make further code nicer and simpler.
	
	  Then we calculate maximum bandwidth of each plane state.
	  The bandwidth includes the plane BW + BW of the "simultaneously"
	  overlapping planes, where "simultaneously" means areas where DC
	  fetches from the planes simultaneously during of scan-out process.
	 
	  For example, if plane A overlaps with planes B and C, but B and C
	  don't overlap, then the peak bandwidth will be either in area where
	  A-and-B or A-and-C planes overlap.
	 
	  The plane_peak_bw[] contains peak memory bandwidth values of
	  each plane, this information is needed by interconnect provider
	  in order to set up latency allowance based on the peak BW, see
	  tegra_crtc_update_memory_bandwidth().
		
		  Note that plane's atomic check doesn't touch the
		  total_peak_memory_bandwidth of enabled plane, hence the
		  current state contains the old bandwidth state from the
		  previous CRTC commit.
		
		  If plane's peak bandwidth changed (for example plane isn't
		  overlapped anymore) and plane isn't in the atomic state,
		  then add plane to the state in order to have the bandwidth
		  updated.
	
	  Display bandwidth is allowed to go down only once hardware state
	  is known to be armed, i.e. state was committed and VBLANK event
	  received.
		
		dev_dbg(dc->dev, "%s(): frame end\n", __func__);
		
		dev_dbg(dc->dev, "%s(): vertical blank\n", __func__);
		
		dev_dbg(dc->dev, "%s(): underflow\n", __func__);
		
		dev_dbg(dc->dev, "%s(): overflow\n", __func__);
	
	  DC has been reset by now, so VBLANK syncpoint can be released
	  for general use.
	
	  XXX do not register DCs with no window groups because we cannot
	  assign a primary plane to them, which in turn will cause KMS to
	  crash.
	
	  Set the display hub as the host1x client parent for the display
	  controller. This is needed for the runtime reference counting that
	  ensures the display hub is always powered when any of the display
	  controllers are.
 dedicate one overlay to mouse cursor 
	
	  Keep track of the minimum pitch alignment across all display
	  controllers.
 track maximum resolution 
	
	  Inherit the DMA parameters (such as maximum segment size) from the
	  parent host1x device.
 avoid a dangling pointer just in case this disappears 
 sentinel 
		
		  If the nvidia,head property isn't present, try to find the
		  correct head number by looking up the position of this
		  display controller's node within the device tree. Assuming
		  that the nodes are ordered properly in the DTS file and
		  that the translation into a flattened device tree blob
		  preserves that ordering this will actually yield the right
		  head number.
		 
		  If those assumptions don't hold, this will still work for
		  cases where only a single display controller is used.
	
	  On Tegra20, DC1 requires DC0 to be taken out of reset in order to
	  be enabled, otherwise CPU hangs on writing to CMD_DISPLAY_COMMAND 
	  POWER_CONTROL registers during CRTC enabling.
 assert reset and disable clock 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2017 NVIDIA CORPORATION.  All rights reserved.
 new on Tegra114 
 planar formats 
	
	  The GPU sector layout is only supported on Tegra194, but these will
	  be filtered out later on by ->format_mod_supported() on SoCs where
	  it isn't supported.
 sentinel 
	
	  XXX Enablingdisabling windowgroups needs to happen when the owner
	  display controller is disabled. There's currently no good point at
	  which this could be executed, so unconditionally enable all window
	  groups for now.
 Skip orphaned window group whose parent DC is disabled 
	
	  XXX Remove this once window groups can be more fine-grainedly
	  enabled and disabled.
 Skip orphaned window group whose parent DC is disabled 
	
	  This seems to happen whenever the head has been disabled with one
	  or more windows being active. This is harmless because we'll just
	  reassign the window to the new head anyway.
 disable watermark 
 pipe meter 
 mempool entries 
 no need for further checks if the plane is being disabled 
	
	  Tegra doesn't support different strides for U and V planes so we
	  error out if the user tries to display a framebuffer with such a
	  configuration.
 XXX scaling is not yet supported, add a check here 
 rien ne va plus 
	
	  XXX Legacy helpers seem to sometimes call ->atomic_disable() even
	  on planes that are already disabled. Make sure we fallback to the
	  head for this particular state instead of crashing.
 rien ne va plus 
 blending 
 scaling 
 disable compression 
	
	  Physical address bit 39 in Tegra194 is used as a switch for special
	  logic that swizzles the memory using either the legacy Tegra or the
	  dGPU sector layout.
 XXX parameterize 
 XXX 
 XXX not supported on Tegra186 and later 
 disable gamut CSC 
 planes can be assigned to arbitrary CRTCs 
	
	  The display hub display clock needs to be fed by the display clock
	  with the highest frequency to ensure proper functioning of all the
	  displays.
	 
	  Note that this isn't used before Tegra186, but it doesn't hurt and
	  conditionalizing it would make the code less clean.
 XXX: enable clock across reset? 
 sentinel 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2012 Avionic Design GmbH
  Copyright (C) 2012-2016 NVIDIA CORPORATION.  All rights reserved.
 We don't yet support other than one syncpt_incr struct per submit 
 We don't yet support waitchks 
	
	  Track referenced BOs so that they can be unreferenced after the
	  submission is complete.
 reuse as an iterator later 
		
		  The maximum number of CDMA gather fetches is 16383, a higher
		  value means the words count is malformed.
		
		  Gather buffer base address must be 4-bytes aligned,
		  unaligned offset is malformed and cause commands stream
		  corruption on the buffer address relocation.
 copy and resolve relocations from submit 
		
		  The unaligned cmdbuf offset will cause an unaligned write
		  during of the relocations patching, corrupting the commands
		  stream.
 Syncpoint ref will be dropped on job release. 
	
	  When MLOCKs are implemented, change to allocate a shared channel
	  only when MLOCKs are disabled.
	
	  If the host1x client is already attached to an IOMMU domain that is
	  not the shared IOMMU domain, don't try to attach it to a different
	  domain. This allows using the IOMMU-backed DMA API.
		
		  Devices that are part of the same group may no longer be
		  attached to a domain at this point because their group may
		  have been detached by an earlier client.
		
		  Many units only support 32-bit addresses, even on 64-bit
		  SoCs. If there is no IOMMU to translate into a 32-bit IO
		  virtual address space, force allocations to be in the
		  lower 32-bit range.
		
		  If IOMMU is disabled, devices address physical memory
		  directly.
	
	  If the Tegra DRM clients are backed by an IOMMU, push buffers are
	  likely to be allocated beyond the 32-bit boundary if sufficient
	  system memory is available. This is problematic on earlier Tegra
	  generations where host1x supports a maximum of 32 address bits in
	  the GATHER opcode. In this case, unless host1x is behind an IOMMU
	  as well it won't be able to process buffers allocated beyond the
	  32-bit boundary.
	 
	  The DMA API will use bounce buffers in this case, so that could
	  perhaps still be made to work, even if less efficient, but there
	  is another catch: in order to perform cache maintenance on pages
	  allocated for discontiguous buffers we need to map and unmap the
	  SG table representing these buffers. This is fine for something
	  small like a push buffer, but it exhausts the bounce buffer pool
	  (typically on the order of a few MiB) for framebuffers (many MiB
	  for any modern resolution).
	 
	  Work around this by making sure that Tegra DRM clients only use
	  an IOMMU if the parent host1x also uses an IOMMU.
	 
	  Note that there's still a small gap here that we don't cover: if
	  the DMA API is backed by an IOMMU there's no way to control which
	  device is attached to an IOMMU and which isn't, except via wiring
	  up the device tree appropriately. This is considered an problem
	  of integration, so care must be taken for the DT to be consistent.
	
	  Tegra20 and Tegra30 don't support addressing memory beyond the
	  32-bit boundary, so the regular GATHER opcodes will always be
	  sufficient and whether or not the host1x is attached to an IOMMU
	  doesn't matter.
	
	  Now that all display controller have been initialized, the maximum
	  supported resolution is known and the bitmask for horizontal and
	  vertical bitfields can be computed.
 syncpoints are used for full 32-bit hardware VBLANK counters 
 sentinel  }
 SPDX-License-Identifier: MIT
  Copyright (C) 2019 NVIDIA Corporation
 channels are encoded as n - 1 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2012 Red Hat
  based in parts on udlfb.c:
  Copyright (C) 2009 Roberto De Ioris <roberto@unbit.it>
  Copyright (C) 2009 Jaya Kumar <jayakumar.lkml@gmail.com>
  Copyright (C) 2009 Bernie Thompson <bernie@plugable.com>
 -BULK_SIZE as per usb-skeleton. Can we get full page and avoid overhead? 
 vendor specific 
 descriptor length 
 vendor descriptor type 
 version (2 bytes) 
 length after type 
 the fixed header we've already parsed 
 max_area 
 allow udlfb to load for now even if firmware unrecognized 
  Need to ensure a channel is selected before submitting URBs
 syncasync unlink faults aren't errors 
 reset to actual 
	
	  When using fb_defio, we deadlock if up() is called
	  while another is waiting. So queue to another process.
 keep waiting and freeing, until we've got 'em all 
 have reserved one with sem 
 Free each separately allocated piece 
 urb->transfer_buffer_length set to actual before submit 
 Wait for an in-flight buffer to complete and get re-queued 
 reserved one with limit_sem 
 set to actual payload len 
 because no one else will 
 not an error 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2012 Red Hat
  based in parts on udlfb.c:
  Copyright (C) 2009 Roberto De Ioris <roberto@unbit.it>
  Copyright (C) 2009 Jaya Kumar <jayakumar.lkml@gmail.com>
  Copyright (C) 2009 Bernie Thompson <bernie@plugable.com>
  Trims identical data from front and back of line
  Sets new front buffer address and width
  And returns byte count of identical pixels
  Assumes CPU natural alignment (unsigned long)
  for back and front buffer ptrs and width
  Render a command stream for an encoded horizontal line segment of pixels.
  A command buffer holds several commands.
  It always begins with a fresh command header
  (the protocol doesn't require this, but we enforce it to allow
  multiple buffers to be potentially encoded and sent in parallel).
  A single command encodes one contiguous horizontal line of pixels
  The function relies on the client to do all allocation, so that
  rendering can be done directly to output buffers (e.g. USB URBs).
  The function fills the supplied command buffer, providing information
  on where it left off, so the client may call in again with additional
  buffers if the line will take several buffers to complete.
  A single command can transmit a maximum of 256 pixels,
  regardless of the compression ratio (protocol design limit).
  To the hardware, 0 for a size byte means 256
  Rather than 256 pixel commands which are either rl or raw encoded,
  the rlx command simply assumes alternating raw and rl spans within one cmd.
  This has a slightly larger header overhead, but produces more even results.
  It also processes all data (read and write) in a single pass.
  Performance benchmarks of common cases show it having just slightly better
  compression than 256 pixel raw or rle commands, with similar CPU consumpion.
  But for very rl friendly data, will compress not quite as well.
  we'll know this later 
  we'll know this later 
 go back and fill in raw pixel count 
 immediately after raw data is repeat byte 
 Then start another raw pixel span 
 finalize last RAW span 
 undo unused byte 
 Fill leftover bytes with no-ops 
  There are 3 copies of every pixel: The front buffer that the fbdev
  client renders to, the actual framebuffer across the USB bus in hardware
  (that we can only write to, slowly, and can never read), and (optionally)
  our shadow copy that tracks what's been sent to that hardware buffer.
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2012 Red Hat
  based in parts on udlfb.c:
  Copyright (C) 2009 Roberto De Ioris <roberto@unbit.it>
  Copyright (C) 2009 Jaya Kumar <jayakumar.lkml@gmail.com>
  Copyright (C) 2009 Bernie Thompson <bernie@plugable.com>
 cleanup previous edid 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2012 Red Hat
  FIXME: Dma-buf sharing requires DMA support by the importing device.
         This function is a workaround to make USB devices work as well.
         See todo.rst for how to fix the issue in the dma-buf framework.
 GEM hooks 
  There are many DisplayLink-based graphics products, all with unique PIDs.
  So we match on DisplayLink's VID + Vendor-Defined Interface Class (0xff)
  We also require a match on SubClass (0x00) and Protocol (0x00),
  which is compatible with all known USB 2.0 era graphics chips and firmware,
  but allows DisplayLink to increment those for any future incompatible chips
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2012 Red Hat
  based in parts on udlfb.c:
  Copyright (C) 2009 Roberto De Ioris <roberto@unbit.it>
  Copyright (C) 2009 Jaya Kumar <jayakumar.lkml@gmail.com>
  Copyright (C) 2009 Bernie Thompson <bernie@plugable.com>
  All DisplayLink bulk operations start with 0xAF, followed by specific code
  All operations are written to buffers which then later get sent to device
 the base pointer is 16 bits wide, 0x20 is hi byte. 
  DisplayLink HW has separate 16bpp and 8bpp framebuffers.
  In 24bpp modes, the low 323 RGB bits go in the 8bpp framebuffer
  This is kind of weird because the controller takes some
  register values in a different byte order than other registers.
  LFSR is linear feedback shift register. The reason we have this is
  because the display controller needs to minimize the clock depth of
  various counters used in the display path. So this code reverses the
  provided value into the lfsr16 value by counting backwards to get
  the value that needs to be set in the hardware comparator to get the
  same actual count. This makes sense once you read above a couple of
  times and think about it from a hardware perspective.
 This is the lfsr value that the hw starts with 
  This does LFSR conversion on the value that is to be written.
  See LFSR explanation above for more detail.
  This takes a standard fbdev screeninfo struct and all of its monitor mode
  details and converts them into the DisplayLink equivalent register commands.
  ERR(vreg(dev,               0x00, (color_depth == 16) ? 0 : 1));
  ERR(vreg_lfsr16(dev,        0x01, xDisplayStart));
  ERR(vreg_lfsr16(dev,        0x03, xDisplayEnd));
  ERR(vreg_lfsr16(dev,        0x05, yDisplayStart));
  ERR(vreg_lfsr16(dev,        0x07, yDisplayEnd));
  ERR(vreg_lfsr16(dev,        0x09, xEndCount));
  ERR(vreg_lfsr16(dev,        0x0B, hSyncStart));
  ERR(vreg_lfsr16(dev,        0x0D, hSyncEnd));
  ERR(vreg_big_endian(dev,    0x0F, hPixels));
  ERR(vreg_lfsr16(dev,        0x11, yEndCount));
  ERR(vreg_lfsr16(dev,        0x13, vSyncStart));
  ERR(vreg_lfsr16(dev,        0x15, vSyncEnd));
  ERR(vreg_big_endian(dev,    0x17, vPixels));
  ERR(vreg_little_endian(dev, 0x1B, pixelClock5KHz));
  ERR(vreg(dev,               0x1F, 0));
  ERR(vbuf(dev, WRITE_VIDREG_UNLOCK, DSIZEOF(WRITE_VIDREG_UNLOCK)));
 x display start 
 x display end 
 y display start 
 y display end 
 x end count is active + blanking - 1 
 libdlo hardcodes hsync start to 1 
 hsync end is width of sync pulse + 1 
 hpixels is active pixels 
 yendcount is vertical active + vertical blanking 
 libdlo hardcodes vsync start to 0 
 vsync end is width of vsync pulse 
 vpixels is active pixels 
 copy 
 from addr 
 one pixel 
 to address 
 TODO: Use mapping abstraction properly 
 Send partial buffer remaining before exiting 
  Simple display pipeline
	 This first section has to do with setting the base address on the
	  controller associated with the display. There are 2 base
	  pointers, currently, we only use the 16 bpp segment.
 set base for 16bpp segment to 0 
 set base for 8bpp segment to end of fb 
 enable display 
  Modesetting
 SPDX-License-Identifier: GPL-2.0+
  i.MX drm driver - Television Encoder (TVEv2)
  Copyright (C) 2013 Philipp Zabel, Pengutronix
 TVE_COM_CONF_REG 
 TVE_TVDACx_CONT_REG 
 TVE_CD_CONT_REG 
 TVE_INT_CONT_REG 
 TVE_TST_MODE_REG 
 clear interrupt status register 
 cable detection irq disabled in VGA mode, enabled in TVOUT mode 
 set gain to (1 + 10128) to provide 0.7V peak-to-peak amplitude 
 set configuration register 
 set test mode (as documented) 
 pixel clock with 2x oversampling 
 pixel clock without oversampling 
	
	  FIXME
	  we should try 4k  mode->clock first,
	  and enable 4x oversampling for lower resolutions
 clear interrupt status register 
 this is the IPU DI clock input selector, can be parented to tve_di 
 disable cable detection for VGA mode 
 sentinel  }
 SPDX-License-Identifier: GPL-2.0+
  i.MX drm driver - LVDS display bridge
  Copyright (C) 2012 Sascha Hauer, Pengutronix
 Defines what is connected to the ldb, only one at a time 
 our own clock 
 parent of display clock 
 original parent of clk_sel 
 upstream clock we can adjust 
 set display clock mux to LDB input clock 
 FIXME - assumes straight connections DI0 --> CH0, DI1 --> CH1 
 set display clock mux back to original input clock 
 Bus format description in DT overrides connector display info. 
		
		  We want to add the connector whenever there is no bridge
		  that brings its own, not only when there is a panel. For
		  historical reasons, the ldb driver can also work without
		  a panel.
  For a device declaring compatible = "fsl,imx6q-ldb", "fsl,imx53-ldb",
  of_match_device will walk through this list and take the first entry
  matching any of its compatible values. Therefore, the more generic
  entries (in this case fsl,imx53-ldb) need to be ordered last.
 if no DDC available, fallback to hardcoded EDID 
 fallback to display-timings node 
 disable LDB by resetting the control register to POR default 
	
	  There are three different possible clock mux configurations:
	  i.MX53:  ipu1_di0_sel, ipu1_di1_sel
	  i.MX6q:  ipu1_di0_sel, ipu1_di1_sel, ipu2_di0_sel, ipu2_di1_sel
	  i.MX6dl: ipu1_di0_sel, ipu1_di1_sel, lcdif_sel
	  Map them all to di0_sel...di3_sel.
		
		  The output port is port@4 with an external 4-port mux or
		  port@2 with the internal 2-port mux.
 panel ddc only if there is no bridge 
			
			  If no bus format was specified in the device tree,
			  we can still get it from the connected panel later.
 SPDX-License-Identifier: GPL-2.0
 Copyright (C) 2011-2013 Freescale Semiconductor, Inc.
  derived from imx-hdmi.c(renamed to bridgedw_hdmi.c now)
      pixelclk     bpp8    bpp10   bpp12 
  Resistance term 133Ohm Cfg
  PREEMP config 0.00
  TXCK level 10
pixelclk   symbol   term   vlev 
 FIXME: Hardware is capable of 266MHz, but setup data is missing. 
 FIXME: Hardware is capable of 270MHz, but setup data is missing. 
 SPDX-License-Identifier: GPL-2.0+
  i.MX drm driver - parallel display implementation
  Copyright (C) 2012 Sascha Hauer, Pengutronix
	
	  If the next bridge does not support bus format negotiation, let's
	  use the static bus format definition (imxpd->bus_format) if it's
	  specified, RGB888 when it's not.
 Now make sure the requested output format is supported. 
	 set the connector's dpms to OFF so that
	  drm_helper_connector_dpms() won't return
	  immediately since the current state is ON
	  at this point.
 port@1 is the output port 
 sentinel  }
 SPDX-License-Identifier: GPL-2.0+
  Freescale i.MX drm driver
  Copyright (C) 2011 Sascha Hauer, Pengutronix
	
	  Check modeset again in case crtc_state->mode_changed is
	  updated in plane's ->atomic_check callback.
 Assign PRGPRE channels and check if all constrains are satisfied. 
	
	  The flip done wait is only strictly required by imx-drm if a deferred
	  plane disable is in-flight. As the core requires blocking commits
	  to wait for the flip it is done here unconditionally. This keeps the
	  workitem around a bit longer than required for the majority of
	  non-blocking commits, but we accept that for the sake of simplicity.
	
	  If we failed to find the CRTC(s) which this encoder is
	  supposed to be connected to, it's because the CRTC has
	  not been registered yet.  Defer probing, and hope that
	  the required CRTC is added later.
 FIXME: cloning support not clear, disable it all for now 
 none so far 
 Special case for DI, dev->of_node may not be set yet 
 Special case for LDB, one device for two channels 
	
	  set max width and height as default value(4096x4096).
	  this value would be used to check framebuffer size limitation
	  at drm_mode_addfb().
 Now try and bind all our sub-components 
	
	  All components are now initialised, so setup the fb helper.
	  The fb helper takes copies of key hardware information, so the
	  crtcsconnectorsencoders must not change after this point.
 sentinel  },
 SPDX-License-Identifier: GPL-2.0+
  i.MX IPUv3 Graphics driver
  Copyright (C) 2011 Sascha Hauer, Pengutronix
 plane[0] is the full plane, plane[1] is the partial plane 
	
	  Planes must be disabled before DC clock is removed, as otherwise the
	  attached IDMACs will be left in undefined state, possibly hanging
	  the IPU or even system.
	
	  If we have DAC or LDB, then we need the IPU DI clock to be
	  the same as the LDB DI clock. For TVDAC, derive the IPU DI
	  clock from 27 MHz TVE_DI clock, but allow to divide it.
 Default to driving pixel data on negative clock edges 
 If this crtc is using the DP, add an overlay plane 
 Only enable IRQ when we actually need it to trigger work. 
 SPDX-License-Identifier: GPL-2.0+
  i.MX IPUv3 DP Overlay Planes
  Copyright (C) 2013 Philipp Zabel, Pengutronix
 linear is supported for all planes and formats 
	
	  Without a PRG the possible modifiers list only includes the linear
	  modifier, so we always take the early return from this function and
	  only end up here if the PRG is present.
 Ok to disable 
 nothing to check when disabling or disabled 
 full plane minimum width is 13 pixels 
	
	  We support resizing active plane or changing its format by
	  forcing CRTC mode change in plane's ->atomic_check callback
	  and disabling all affected active planes in CRTC's ->atomic_disable
	  callback.  The planes will be reenabled in plane's ->atomic_update
	  callback.
		
		  Multiplanar formats have to meet the following restrictions:
		  - The (up to) three plane addresses are EBA, EBA+UBO, EBA+VBO
		  - EBA, UBO and VBO are a multiple of 8
		  - UBO and VBO are unsigned and not larger than 0xfffff8
		  - Only EBA may be changed while scanout is active
		  - The strides of U and V planes must be identical.
		
		  The xy offsets must be even in case of horizontalvertical
		  chroma subsampling.
 Maximum number of pixels per burst without overshooting stride 
 Maximum number of consecutive bursts without overshooting stride 
	
	  Configure PRG channel and attached PRE, this changes the EBA to an
	  internal SRAM location.
 nothing to do if PRE is used 
 disabled crtcs must not block the update 
	
	  Pretend no update is pending in the non-PREPRG case. For this to
	  happen, an atomic update would have to be deferred until after the
	  start of the next frame and simultaneously interrupt latency would
	  have to be high enough to let the atomic update finish and issue an
	  event before the previous end of frame interrupt handler can be
	  executed.
	
	  We are going over the planes in 2 passes: first we assign PREs to
	  planes with a tiling modifier, which need the PREs to resolve into
	  linear. Any failure to assign a PRE there is fatal. In the second
	  pass we try to assign PREs to linear FBs, to improve memory access
	  patterns for them. Failure at this point is non-fatal, as we can
	  scan out linear FBs without a PRE.
 make sure that modifier is initialized 
 SPDX-License-Identifier: GPL-2.0
  Copyright 2019 NXP.
 RGB 
	
	  The width and height after clipping.
 SPDX-License-Identifier: GPL-2.0
  Copyright 2019 NXP.
 vblank trigger 
 CTXLD trigger 
 we care about alpha only when channel 0 is concerned 
	
	  Use global alpha if pixel format does not have alpha channel or the
	  user explicitly chose to use global alpha (i.e. alpha is not OPAQUE).
 use per-pixel alpha otherwise 
 SPDX-License-Identifier: GPL-2.0
  Copyright 2019 NXP.
 The following sizes are in context loader entries, 8 bytes each. 
 max 65536 
 max 65536 
 max 65536 
 Sizes, in entries, of the DB, SB_HP and SB_LP context regions. 
 this represents an entry in the context loader map 
 holds the sizes of DB, SB_HP and SB_LP ctx 
 protects concurent access to private data 
		
		  Except for throwing an error message and clearing the status
		  register, there's not much we can do here.
 make sure SB_LP context area comes after SB_HP 
 enable the context loader 
	
	  Toggle the current context to the alternate one so that any updates
	  in the modules' settings take place there.
 reset context region and sizes 
 SPDX-License-Identifier: GPL-2.0
  Copyright 2019 NXP.
 SPDX-License-Identifier: GPL-2.0
  Copyright 2019 NXP.
 CONFIG_PM_SLEEP 
 CONFIG_PM 
 SPDX-License-Identifier: GPL-2.0
  Copyright 2019 NXP.
 SPDX-License-Identifier: GPL-2.0
  Copyright 2019 NXP.
 stop DPR on all channels 
 LIN, GPU_STD, GPU_SUP, VPU_YUV420, VPU_VP9 
 PIX_SIZE_8  
 PIX_SIZE_16 
 PIX_SIZE_32 
 This function will be called from interrupt context. 
 SPDX-License-Identifier: GPL-2.0
  Copyright 2019 NXP.
 stop SS 
 SPDX-License-Identifier: GPL-2.0
  Copyright 2019 NXP.
  Scaling algorithms were contributed by Dzung Hoang <dzung.hoang@nxp.com>
 scaler coefficients generator 
  mult_q() - Performs fixed-point multiplication.
  @A: multiplier
  @B: multiplicand
  div_q() - Performs fixed-point division.
  @A: dividend
  @B: divisor
  exp_approx_q() - Compute approximation to exp(x) function using Taylor
 		    series.
  @x: fixed-point argument of exp function
  dcss_scaler_gaussian_filter() - Generate gaussian prototype filter.
  @fc_q: fixed-point cutoff frequency normalized to range [0, 1]
  @use_5_taps: indicates whether to use 5 taps or 7 taps
  @coef: output filter coefficients
 seed coefficient scanner 
 seed gaussian filter generator 
 override phase 0 with identity filter if specified 
 normalize coef 
  dcss_scaler_filter_design() - Compute filter coefficients using
 				 Gaussian filter.
  @src_length: length of input
  @dst_length: length of output
  @use_5_taps: 0 for 7 taps per phase, 1 for 5 taps
  @coef: output coefficients
 compute cutoff frequency 
 compute gaussian filter coefficients 
 for 4:4:4 to 4:2:2 conversion, source height should be 1 less 
 adjustments for source chroma location 
 vertical input chroma position adjustment 
			
			  move chroma up to first luma line
			  (14 chroma input line spacing)
			
			  move chroma up to first luma line
			  (12 chroma input line spacing)
 horizontal input chroma position adjustment 
 move chroma left 14 chroma input sample spacing 
 adjustments to chroma resolution 
 save chroma start phase 
 reverse both phase and tap orderings 
 reverse both phase and tap orderings 
 horizontal luma 
 vertical luma 
 adjust chroma resolution 
 should not happen 
 horizontal chroma 
 vertical chroma 
 horizontal RGB 
 vertical RGB 
 This function will be called from interrupt context. 
 SPDX-License-Identifier: GPL-2.0
  Copyright 2019 NXP.
 Allow CTXLD kick interrupt to be disabled when VBLANK is disabled. 
	
	  Do not shut off CTXLD kick interrupt when shutting VBLANK off. It
	  will be needed to commit the last changes, before going to suspend.
 SPDX-License-Identifier: GPL-2.0
  Copyright 2019 NXP.
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) 2021 Raspberry Pi
 Number of monitored counters cannot exceed HW limits. 
 Make sure all counters are valid. 
 SPDX-License-Identifier: GPL-2.0+
 Copyright (C) 2014-2018 Broadcom 
  DOC: Broadcom V3D Graphics Driver
  This driver supports the Broadcom V3D 3.3 and 4.1 OpenGL ES GPUs.
  For V3D 2.x support, see the VC4 driver.
  The V3D GPU includes a tiled render (composed of a bin and render
  pipelines), the TFU (texture formatting unit), and the CSD (compute
  shader dispatch).
	 Note that DRM_V3D_PARAM_V3D_CORE0_IDENT0 is 0, so we need
	  to explicitly allow it in the "the register in our
	  parameter map" check.
 DRM_AUTH is required on SUBMIT_CL for now, while we don't have GMP
  protection between clients.  Note that render nodes would be
  able to submit CLs that could access BOs from clients authenticated
  with the master node.  The TFU doesn't use the GMP, so it would
  need to stay DRM_AUTH until we do buffer sizeoffset validation.
 multicore not yet implemented 
 SPDX-License-Identifier: GPL-2.0+
 Copyright (C) 2015-2018 Broadcom 
  DOC: V3D GEM BO management support
  Compared to VC4 (V3D 2.x), V3D 3.3 introduces an MMU between the
  GPU and the bus, allowing us to use shmem objects for our storage
  instead of CMA.
  Physically contiguous objects may still be imported to V3D, but the
  driver doesn't allocate physically contiguous objects on its own.
  Display engines requiring physically contiguous allocations should
  look into Mesa's "renderonly" support (as used by the Mesa pl111
  driver) for an example of how to integrate with V3D.
  Long term, we should support evicting pages from the MMU when under
  memory pressure (thus the v3d_bo_get_pages() refcounting), but
  that's not a high priority since our systems tend to not have swap.
 Called DRM core on the last userspacekernel unreference of the
  BO.
 GPU execution may have dirtied any pages in the BO. 
 gem_create_object function for allocating a BO struct and doing
  early setup.
	 So far we pin the BO in the MMU for its lifetime, so use
	  shmem's helper for getting a lifetime sgt.
	 Allocate the object's space in the GPU's page tables.
	  Inserting PTEs will happen later, but the offset is for the
	  lifetime of the BO.
 Track stats for debugdrinbo_stats. 
 SPDX-License-Identifier: GPL-2.0+
 Copyright (C) 2014-2018 Broadcom 
	 Set OVRTMUOUT, which means that the texture sampler uniform
	  configuration's tmu output type field is used, instead of
	  using the hardware default behavior based on the texture
	  type.  If you want the default behavior, you can still put
	  "2" in the indirect texture state's output_type field.
	 Whenever we flush the L2T cache, we always want to flush
	  the whole thing.
 Sets invariant state for the HW. 
		 GFXH-1383: The SW_INIT may cause a stray write to address 0
		  of the unit, so reset it to its power-on value here.
 XXX: only needed for safe powerdown, not reset. 
 Invalidates the (read-only) L2C cache.  This was the L2 cache for
  uniforms and instructions on V3D 3.2.
 Invalidates texture L2 cachelines 
	 While there is a busy bit (V3D_L2TCACTL_L2TFLS), we don't
	  need to wait for completion before dispatching the job --
	  L2T accesses will be stalled until the flush has completed.
	  However, we do need to make sure we don't try to trigger a
	  new flush while the L2_CLEAN queue is trying to
	  synchronously clean after a job.
 Cleans texture L1 and L2 cachelines (writing back dirty data).
  For cleaning, which happens from the CACHE_CLEAN queue after CSD has
  executed, we need to make sure that the clean is done before
  signaling job completion.  So, we synchronously wait before
  returning, and we make sure that L2 invalidates don't happen in the
  meantime to confuse our are-we-done checks.
 Invalidates the slice caches.  These are read-only caches. 
	 Invalidate the caches from the outside in.  That way if
	  another CL's concurrent use of nearby memory were to pull
	  an invalidated cacheline back in, we wouldn't leave stale
	  data in the inner cache.
 Takes the reservation lock on all the BOs being referenced, so that
  at queue submit time we can update the reservations.
  We don't lock the RCL the tile allocstate BOs, or overflow memory
  (all of which are on exec->unref_list).  They're entirely private
  to v3d, so we don't attach dma-buf fences to them.
  v3d_lookup_bos() - Sets up job->bo[] with the GEM objects
  referenced by the job.
  @dev: DRM device
  @file_priv: DRM file for this fd
  @job: V3D job being set up
  @bo_handles: GEM handles
  @bo_count: Number of GEM handles passed in
  The command validator needs to reference BOs by their index within
  the submitted job's BO list.  This does the validation of the job's
  BO list and reference counting for the lifetime of the job.
  Note that this function doesn't need to unreference the BOs on
  failure, because that will happen at v3d_exec_cleanup() time.
		 See comment on bo_index for why we have to check
		  this.
	 Decrement the user's timeout, in case we got interrupted
	  such that the ioctl will be restarted.
 Asked to wait beyond the jiffiescheduler precision? 
 put by scheduler job completion 
 XXX: Use shared fences for read-only objects. 
 Update the return sync object for the job 
 If it only supports a single signal semaphore
 If multiple semaphores extension is supported 
 Get data for multiple binary semaphores synchronization. Parse syncobj
  to be signaled when job completes (out_sync).
 Whenever userspace sets ioctl extensions, v3d_get_extensions parses data
  according to the extension id (name).
  v3d_submit_cl_ioctl() - Submits a job (frame) to the V3D.
  @dev: DRM device
  @data: ioctl argument
  @file_priv: DRM file for this fd
  This is the main entrypoint for userspace to submit a 3D frame to
  the GPU.  Userspace provides the binner command list (if
  applicable), and the kernel sets up the render command list to draw
  to the framebuffer described in the ioctl, using the command lists
  that the 3D engine's binner will produce.
  v3d_submit_tfu_ioctl() - Submits a TFU (texture formatting) job to the V3D.
  @dev: DRM device
  @data: ioctl argument
  @file_priv: DRM file for this fd
  Userspace provides the register setup for the TFU, which we don't
  need to validate since the TFU is behind the MMU.
  v3d_submit_csd_ioctl() - Submits a CSD (texture formatting) job to the V3D.
  @dev: DRM device
  @data: ioctl argument
  @file_priv: DRM file for this fd
  Userspace provides the register setup for the CSD, which we don't
  need to validate since the CSD is behind the MMU.
	 Note: We don't allocate address 0.  Various bits of HW
	  treat 0 as special, such as the occlusion query counters
	  where 0 means "disabled".
	 Waiting for jobs to finish would need to be done before
	  unregistering V3D.
 SPDX-License-Identifier: GPL-2.0+
 Copyright (C) 2018 Broadcom 
  DOC: Broadcom V3D scheduling
  The shared DRM GPU scheduler is used to coordinate submitting jobs
  to the hardware.  Each DRM fd (roughly a client process) gets its
  own scheduler entity, which will process jobs in order.  The GPU
  scheduler will round-robin between clients to submit the next job.
  For simplicity, and in order to keep latency low for interactive
  jobs when bulk background jobs are queued up, we submit a new job
  to the HW only when it has completed the last one, instead of
  filling up the CT[01]Q FIFOs with jobs.  Similarly, we use
  drm_sched_job_add_dependency() to manage the dependency between bin and
  render, instead of having the clients submit jobs using the HW's
  semaphores to interlock between them.
	 Lock required around bin_job update vs
	  v3d_overflow_mem_work().
	 Clear out the overflow allocation, so we don't
	  reuse the overflow attached to a previous job.
	 Set the current and end address of the control list.
	  Writing the end register is what starts the job.
	 Can we avoid this flush?  We need to be careful of
	  scheduling, though -- imagine job0 rendering to texture and
	  job1 reading, and them being executed as bin0, bin1,
	  render0, render1, so that render1's flush at bin time
	  wasn't enough.
 XXX: Set the QCFG 
	 Set the current and end address of the control list.
	  Writing the end register is what starts the job.
 ICFG kicks off the job. 
 CFG0 write kicks off the job. 
 block scheduler 
 get the GPU back into the init state 
 Unblock schedulers and restart their jobs. 
 If the current address or return address have changed, then the GPU
  has probably made progress and we should delay the reset.  This
  could fail if the GPU got in an infinite loop in the CL, but that
  is pretty unlikely outside of an i-g-t testcase.
	 If we've made progress, skip reset and let the timer get
	  rearmed.
 SPDX-License-Identifier: GPL-2.0+
 Copyright (C) 2014-2018 Broadcom 
 SPDX-License-Identifier: GPL-2.0+
 Copyright (C) 2015 Broadcom 
 SPDX-License-Identifier: GPL-2.0+
 Copyright (C) 2017-2018 Broadcom 
  DOC: Broadcom V3D MMU
  The V3D 3.x hardware (compared to VC4) now includes an MMU.  It has
  a single level of page tables for the V3D's 4GB address space to
  map to AXI bus addresses, thus it could need up to 4MB of
  physically contiguous memory to store the PTEs.
  Because the 4MB of contiguous memory for page tables is precious,
  and switching between them is expensive, we load all BOs into the
  same 4GB address space.
  To protect clients from each other, we should use the GMP to
  quickly mask out (at 128kb granularity) what pages are available to
  each client.  This is not yet implemented.
 Note: All PTEs for the 1MB superpage must be filled with the
  superpage bit set.
	 Make sure that another flush isn't already running when we
	  start this one.
 SPDX-License-Identifier: GPL-2.0+
 Copyright (C) 2014-2018 Broadcom 
  DOC: Interrupt management for the V3D engine
  When we take a bin, render, TFU done, or CSD done interrupt, we
  need to signal the fence for that job so that the scheduler can
  queue up the next one and unblock any waiters.
  When we take the binner out of memory interrupt, we need to
  allocate some new memory and pass it to the binner so that the
  current job can make progress.
 XXX: GMP , 256  1024);
	 We lost a race, and our work task came in after the bin job
	  completed and exited.  This can happen because the HW
	  signals OOM before it's fully OOM, so the binner might just
	  barely complete.
	 
	  If we lose the race and our work task comes in after a new
	  bin job got scheduled, that's fine.  We'll just give them
	  some binner pool anyway.
 Acknowledge the interrupts we're handling here. 
		 Note that the OOM status is edge signaled, so the
		  interrupt won't happen again until the we actually
		  add more memory.  Also, as of V3D 4.1, FLDONE won't
		  be reported until any OOM state has been cleared.
	 We shouldn't be triggering these if we have GMP in
	  always-allowed mode.
	 V3D 4.2 wires the hub and core IRQs together, so if we &
	  didn't see the common one then check hub for MMU IRQs.
 Acknowledge the interrupts we're handling here. 
	 Clear any pending interrupts someone might have left around
	  for us.
 Enable our set of interrupts, masking out any others. 
 Disable all interrupts. 
 Clear any pending interrupts we might have left. 
 Reinitializes interrupt registers when a GPU reset is performed. 
 SPDX-License-Identifier: GPL-2.0+
 Copyright (C) 2017-2018 Broadcom 
  Copyright 2006 Tungsten Graphics Inc., Bismarck, ND., USA.
  All rights reserved.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sub license,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice (including the
  next paragraph) shall be included in all copies or substantial portions
  of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
  THE AUTHORS OR COPYRIGHT HOLDERS ANDOR THEIR SUPPLIERS BE LIABLE FOR ANY CLAIM,
  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  DEALINGS IN THE SOFTWARE.
  Authors: Thomas Hellström <thomas-at-tungstengraphics-dot-com>
 Linux specific until context tracking code gets ported to BSD 
 Last context, perform cleanup 
 via_dma.c -- DMA support for the VIA UnichromePro
  Copyright 2003 Tungsten Graphics, Inc., Cedar Park, Texas.
  All Rights Reserved.
  Copyright 2004 Digeo, Inc., Palo Alto, CA, U.S.A.
  All Rights Reserved.
  Copyright 2004 The Unichrome project.
  All Rights Reserved.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sub license,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice (including the
  next paragraph) shall be included in all copies or substantial portions
  of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
  THE COPYRIGHT HOLDERS, AUTHORS ANDOR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,
  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  USE OR OTHER DEALINGS IN THE SOFTWARE.
  Authors:
     Tungsten Graphics,
     Erdi Chen,
     Thomas Hellstrom.
 defines for VIA 3D registers 
 VIA_REG_STATUS(0x400): Engine Status 
 Command Regulator is busy 
 2D Engine is busy 
 3D Engine is busy 
 Virtual Queue is busy 
  Free space in command buffer.
  How much does the command regulator lag behind?
  Check that the given size fits in the buffer, otherwise wait.
  Checks whether buffer head has reach the end. Rewind the ring buffer
  when necessary.
  Returns virtual pointer to ring buffer.
	
	  Running this function on AGP memory is dead slow. Therefore
	  we run it on a temporary cacheable system memory buffer and
	  copy it to AGP memory when ready.
	
	  Small submissions somehow stalls the CPU. (AGP cache effects?)
	  pad to greater size.
  This function is used internally by ring buffer management code.
  Returns virtual pointer to ring buffer.
  Hooks a segment of data into the tail of the ring-buffer by
  modifying the pause address stored in the buffer itself. If
  the regulator has already paused, restart it.
	
	  If there is a possibility that the command reader will
	  miss the new pause address and pause on the old one,
	  In that case we need to program the new start address
	  using PCI.
			
			  There is a concern that these writes may stall the PCI bus
			  if the GPU is not idle. However, idling the GPU first
			  doesn't make a difference.
	
	  This is the difference between where we tell the
	  command reader to pause and where it actually pauses.
	  This differs between hw implementation so we need to
	  detect it.
	
	  Wrap command buffer to the beginning.
	
	  Now, set a trap that will pause the regulator if it tries to rerun the old
	  command buffer. (Which may happen if via_hook_segment detecs a command regulator pause
	  and reissues the jump command over PCI, while the regulator has already taken the jump
	  and actually paused at the current buffer end).
	  There appears to be no other way to detect this condition, since the hw_addr_pointer
	  does not seem to get updated immediately when a jump occurs.
  User interface to the space and lag functions.
  Copyright 1998-2003 VIA Technologies, Inc. All Rights Reserved.
  Copyright 2001-2003 S3 Graphics, Inc. All Rights Reserved.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sub license,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice (including the
  next paragraph) shall be included in all copies or substantial portions
  of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
  VIA, S3 GRAPHICS, ANDOR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  DEALINGS IN THE SOFTWARE.
 via_dmablit.c -- PCI DMA BitBlt support for the VIA UnichromePro
  Copyright (C) 2005 Thomas Hellstrom, All Rights Reserved.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sub license,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice (including the
  next paragraph) shall be included in all copies or substantial portions
  of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL
  THE COPYRIGHT HOLDERS, AUTHORS ANDOR ITS SUPPLIERS BE LIABLE FOR ANY CLAIM,
  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  USE OR OTHER DEALINGS IN THE SOFTWARE.
  Authors:
     Thomas Hellstrom.
     Partially based on code obtained from Digeo Inc.
  Unmaps the DMA mappings.
  FIXME: Is this a NoOp on x86? Also
  FIXME: What happens if this one is called and a pending blit has previously done
  the same DMA mappings?
  Unmap a DMA mapping.
  If mode = 0, count how many descriptors are needed.
  If mode = 1, Map the DMA pages for the device, put together and map also the descriptors.
  Descriptors are run in reverse order by the hardware because we are not allowed to update the
  'next' field without syncing calls when the descriptor is already mapped.
  Function that frees up all resources for a blit. It is usable even if the
  blit info has only been partially built as long as the status enum is consistent
  with the actual status of the used resources.
  Fire a blit engine.
  Obtain a page pointer array and lock all pages into system memory. A segmentation violation will
  occur here if the calling user does not have access to the submitted address.
  Allocate DMA capable memory for the blit descriptor chain, and an array that keeps track of the
  pages we allocate. We don't want to use kmalloc for the descriptor chain because it may be
  quite large for some blits, and pages don't need to be contiguous.
  The dmablit part of the IRQ handler. Trying to do only reasonably fast things here.
  The rest, like unmapping and freeing memory for done blits is done in a separate workqueue
  task. Basically the task of the interrupt handler is to submit a new blit to the engine, while
  the workqueue task takes care of processing associated with the old blit.
		
		  Clear transfer done flag.
		
		  Abort transfer after one second.
  Check whether this blit is still active, performing necessary locking.
	
	  Allow for handle wraparounds.
  Sync. Wait for at least three seconds for the blit to be performed.
  A timer that regularly polls the blit engine in cases where we don't have interrupts:
  a) Broken hardware (typically those that don't have any video capture facility).
  b) Blit abort. The hardware doesn't send an interrupt when a blit is aborted.
  The timer and hardware IRQ's can and do work in parallel. If the hardware has
  irqs, it will shorten the latency somewhat.
	       
		 Rerun handler to delete timer if engines are off, and
		 to shorten abort latency. This is a little nasty.
  Workqueue task that frees data and mappings associated with a blit.
  Also wakes up waiting processes. Each of these tasks handles one
  blit engine only and may not be called on each interrupt.
  Init all blit engines. Currently we use two, but some hardware have 4.
  Build all info and do all mappings required for a blit.
	
	  Below check is a driver limitation, not a hardware one. We
	  don't want to lock unused pages, and don't want to incoporate the
	  extra logic of avoiding them. Make sure there are no.
	  (Not a big limitation anyway.)
	
	  Don't lock an arbitrary large number of pages, since that causes a
	  DOS security hole.
	
	  we allow a negative fb stride to allow flipping of images in
	  transfer.
	
	  A hardware bug seems to be worked around if system memory addresses start on
	  16 byte boundaries. This seems a bit restrictive however. VIA is contacted
	  about this. Meanwhile, impose the following restrictions:
  Reserve one free slot in the blit queue. Will wait for one second for one
  to become available. Otherwise -EBUSY is returned.
  Hand back a free slot if we changed our mind.
  Grab a free slot. Build blit info and queue a blit.
  Sync on a previously submitted blit. Note that the X server use signals extensively, and
  that there is a very big probability that this IOCTL will be interrupted by a signal. In that
  case it returns with -EAGAIN for the signal to be delivered.
  The caller should then reissue the IOCTL. This is similar to what is being done for drmGetLock().
  Queue a blit and hand back a handle to be used for sync. This IOCTL may be interrupted by a signal
  while waiting for a free slot in the blit queue. In that case it returns with -EAGAIN and should
  be reissued. See the above IOCTL code.
