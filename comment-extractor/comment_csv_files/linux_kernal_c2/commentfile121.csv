 SPDX-License-Identifier: GPL-2.0-or-later
 interface refcounting 
  snd_usb_endpoint is a model that abstracts everything related to an
  USB endpoint and its streaming.
  There are functions to activate and deactivate the streaming URBs and
  optional callbacks to let the pcm logic handle the actual content of the
  packets for playback and record. Thus, the bus streaming and the audio
  handlers are fully decoupled.
  There are two different types of endpoints in audio applications.
  SND_USB_ENDPOINT_TYPE_DATA handles full audio data payload for both
  inbound and outbound traffic.
  SND_USB_ENDPOINT_TYPE_SYNC endpoints are for inbound traffic only and
  expect the payload to carry Q10.14  Q16.16 formatted sync information
  (3 or 4 bytes).
  Each endpoint has to be configured prior to being used by calling
  snd_usb_endpoint_set_params().
  The model incorporates a reference counting, so that multiple users
  can call snd_usb_endpoint_start() and snd_usb_endpoint_stop(), and
  only the first user will effectively start the URBs, and only the last
  one to stop it will tear the URBs down again.
  convert a sampling rate into our full speed format (fs1000 in Q16.16)
  this will overflow at approx 524 kHz
  convert a sampling rate into USB high speed format (fs8000 in Q16.16)
  this will overflow at approx 4 MHz
  release a urb data
  snd_usb_endpoint_implicit_feedback_sink: Report endpoint usage type
  @ep: The snd_usb_endpoint
  Determine whether an endpoint is driven by an implicit feedback
  data endpoint source.
  Return the number of samples to be sent in the next packet
  for streaming based on information derived from sync endpoints
  This won't be used for implicit feedback which takes the packet size
  returned from the sync source
  Return the number of samples to be sent in the next packet
  for adaptive and synchronous endpoints
  snd_usb_endpoint_next_packet_size: Return the number of samples to be sent
  in the next packet
  If the size is equal or exceeds @avail, don't proceed but return -EAGAIN
  Exception: @avail = 0 for skipping the check.
 For tx_length_quirk, put packet length at start of packet 
 number of silent bytes 
  Prepare a PLAYBACK urb for submission to the bus.
 we need to set this at each time 
 no data provider, so send silence 
			
			  fill the length and offset of each urb descriptor.
			  the fixed 12.13 frequency is passed as 16.16 through the pipe.
			
			  fill the length and offset of each urb descriptor.
			  the fixed 10.14 frequency is passed through the pipe.
  Prepare a CAPTURE or SYNC urb for submission to the bus.
 we need to set this at each time 
 notify an error as XRUN to the assigned PCM data substream 
  Send output urbs that have been prepared previously. URBs are dequeued
  from ep->ready_playback_urbs and in case there aren't any available
  or there are no packets that have been prepared, this function does
  nothing.
  The reason why the functionality of sending and preparing URBs is separated
  is that host controllers don't guarantee the order in which they return
  inbound and outbound packets to their submitters.
  This function is used both for implicit feedback endpoints and in low-
  latency playback mode.
 take URB out of FIFO 
 copy over the length information 
 call the data handler to fill in playback data 
 can be stopped during prepare callback 
 push back to ready list again for -EAGAIN 
  complete callback for urbs
 unlinked 
 device removed 
 unlinked 
 device disabled 
 device disconnected 
 can be stopped during retire callback 
		 in low-latency and implicit-feedback modes, push back the
		  URB to ready list at first, then process as much as possible
 decrement at last 
 in non-lowlatency mode, no error handling for prepare 
 can be stopped during prepare callback 
 can be stopped during retire callback 
  Find or create a refcount object for the given interface
  The objects are released altogether in snd_usb_endpoint_free_all()
  Get the existing endpoint object corresponding EP
  Returns NULL if not present.
  snd_usb_add_endpoint: Add an endpoint to an USB audio chip
  @chip: The chip
  @ep_num: The number of the endpoint to use
  @type: SND_USB_ENDPOINT_TYPE_DATA or SND_USB_ENDPOINT_TYPE_SYNC
  If the requested endpoint has not been added to the given chip before,
  a new instance is created.
  Returns zero on success or a negative error code.
  New endpoints will be added to chip->ep_list and freed by
  calling snd_usb_endpoint_free_all().
  For SND_USB_ENDPOINT_TYPE_SYNC, the caller needs to guarantee that
  bNumEndpoints > 1 beforehand.
 Set up syncinterval and maxsyncsize for a sync EP 
  Check whether the given fp and hw params are compatible with the current
  setup of the target EP for implicit feedback sync
  snd_usb_endpoint_open: Open the endpoint
  Called from hw_params to assign the endpoint to the substream.
  It's reference-counted, and only the first opener is allowed to set up
  arbitrary parameters.  The later opener must be compatible with the
  former opened parameters.
  The endpoint needs to be closed via snd_usb_endpoint_close() later.
  Note that this function doesn't configure the endpoint.  The substream
  needs to set it up later via snd_usb_endpoint_configure().
  snd_usb_endpoint_set_sync: Link data and sync endpoints
  Pass NULL to sync_ep to unlink again
  Set data endpoint callbacks and the assigned data stream
  Called at PCM trigger and cleanups.
  Pass NULL to deactivate each callback.
  snd_usb_endpoint_close: Close the endpoint
  Unreference the already opened endpoint via snd_usb_endpoint_open().
 Prepare for suspening EP, called from the main suspend handler 
   wait until all urbs are processed.
 sync the pending stop operation;
  this function itself doesn't trigger the stop operation
  Stop active urbs
  This function moves the EP to STOPPING state if it's being RUNNING.
  release an endpoint's urbs
 route incoming urbs to nirvana 
 stop and unlink urbs 
  configure a data endpoint
		
		  When operating in DSD DOP mode, the size of a sample frame
		  in hardware differs from the actual physical format width
		  because we need to make room for the DOP markers.
 assume max. frequency is 50% higher than nominal 
	 Round up freqmax to nearest integer in order to calculate maximum
	  packet size, which must represent a whole number of frames.
	  This is accomplished by adding 0x0.ffff before converting the
	  Q16.16 format into integer.
	  In order to accurately calculate the maximum packet size when
	  the data interval is more than 1 (i.e. ep->datainterval > 0),
	  multiply by the data interval prior to rounding. For instance,
	  a freqmax of 41 kHz will result in a max packet size of 6 (5.125)
	  frames with a data interval of 1, but 11 (10.25) frames with a
	  data interval of 2.
	  (ep->freqmax << ep->datainterval overflows at 8.192 MHz for the
	  maximum datainterval value of 3, at USB full speed, higher for
	  USB high speed, noting that ep->freqmax is in units of
	  frames per packet in Q16.16 format.)
 Space for length descriptor 
 but wMaxPacketSize might reduce this 
 whatever fits into a max. size packet 
 Need to remove the length descriptor to calc freq 
	
	  Capture endpoints need to use small URBs because there's no way
	  to tell in advance where the next period will end, and we don't
	  want the next URB to complete much after the period ends.
	 
	  Playback endpoints with implicit sync much use the same parameters
	  as their corresponding capture endpoint.
		
		  Wireless devices can poll at a max rate of once per 4ms.
		  For dataintervals less than 5, increase the packet count to
		  allow the host controller to use bursting to fill in the
		  gaps.
 make capture URBs <= 1 ms and smaller than a period 
	
	  Playback endpoints without implicit sync are adjusted so that
	  a period fits as evenly as possible in the smallest number of
	  URBs.  The total number of URBs is adjusted to the size of the
	  ALSA buffer, subject to the MAX_URBS and MAX_QUEUE limits.
 determine how small a packet can be 
 with sync from device, assume it can be 12% lower 
 how many packets will contain an entire ALSA period? 
 how many URBs will contain a period? 
 how many packets are needed in each URB? 
 limit the number of frames in a single URB 
 try to use enough URBs to contain an entire ALSA buffer 
 allocate and initialize data urbs 
 for transfer delimiter 
  configure a sync endpoint
  snd_usb_endpoint_set_params: configure an snd_usb_endpoint
  Determine the number of URBs to be used on this endpoint.
  An endpoint must be configured before it can be started.
  An endpoint that is already running can not be reconfigured.
 release old buffers, if any 
 calculate the frequency in 16.16 format 
 some unit conversions in runtime 
  snd_usb_endpoint_configure: Configure the endpoint
  This function sets up the EP to be fully usable state.
  It's called either from hw_params or prepare callback.
  The function checks need_setup flag, and performs nothing unless needed,
  so it's safe to call this multiple times.
  This returns zero if unchanged, 1 if the configuration has changed,
  or a negative error code.
 If the interface has been already set up, just set EP parameters 
		 sample rate setup of UAC1 is per endpoint, and we need
		  to update at each EP configuration
 Need to deselect altsetting at first 
	 Some UAC1 devices (e.g. Yamaha THR10) need the host interface
	  to be set up before parameter setups
 Workaround for devices that require the interface setup at first like UAC1 
 for UAC23, enable the interface altset here at last 
 get the current rate set to the given clock by any endpoint 
  snd_usb_endpoint_start: start an snd_usb_endpoint
  @ep: the endpoint to start
  A call to this function will increment the running count of the endpoint.
  In case it is not already running, the URBs for this endpoint will be
  submitted. Otherwise, this function does nothing.
  Must be balanced to calls of snd_usb_endpoint_stop().
  Returns an error if the URB submission failed, 0 in all other cases.
 already running? 
	
	  If this endpoint has a data endpoint as implicit feedback source,
	  don't start the urbs here. Instead, mark them all as available,
	  wait for the record urbs to return and queue the playback urbs
	  from that context.
 stop filling at applptr 
 put the remaining URBs to ready list 
  snd_usb_endpoint_stop: stop an snd_usb_endpoint
  @ep: the endpoint to stop (may be NULL)
  @keep_pending: keep in-flight URBs
  A call to this function will decrement the running count of the endpoint.
  In case the last user has requested the endpoint stop, the URBs will
  actually be deactivated.
  Must be balanced to calls of snd_usb_endpoint_start().
  The caller needs to synchronize the pending stop operation via
  snd_usb_endpoint_sync_pending_stop().
  snd_usb_endpoint_release: Tear down an snd_usb_endpoint
  @ep: the endpoint to release
  This function does not care for the endpoint's running count but will tear
  down all the streaming URBs immediately.
  snd_usb_endpoint_free_all: Free the resources of an snd_usb_endpoint
  @chip: The chip
  This free all endpoints and those resources
  snd_usb_handle_sync_urb: parse an USB sync packet
  @ep: the endpoint to handle the packet
  @sender: the sending endpoint
  @urb: the received packet
  This function is called from the context of an endpoint that received
  the packet and is used to let another endpoint object handle the payload.
	
	  In case the endpoint is operating in implicit feedback mode, prepare
	  a new outbound URB that has the same layout as the received packet
	  and add it to the list of pending urbs. queue_pending_output_urbs()
	  will take care of them later.
 implicit feedback case 
 Count overall packet size 
		
		  skip empty packets. At least M-Audio's Fast Track Ultra stops
		  streaming once it received a 0-byte OUT URB
		
		  Iterate through the inbound packet and prepare the lengths
		  for the output packet. The OUT packet we are about to send
		  will have the same amount of payload bytes per stride as the
		  IN packet we just received. Since the actual size is scaled
		  by the stride, use the sender stride to calculate the length
		  in case the number of channels differ between the implicitly
		  fed-back endpoint and the synchronizing endpoint.
	
	  process after playback sync complete
	 
	  Full speed devices report feedback values in 10.14 format as samples
	  per frame, high speed devices in 16.16 format as samples per
	  microframe.
	 
	  Because the Audio Class 1 spec was written before USB 2.0, many high
	  speed devices use a wrong interpretation, some others use an
	  entirely different format.
	 
	  Therefore, we cannot predict what format any particular device uses
	  and must detect it automatically.
		
		  Devices based on Tenor 8802 chipsets (TEAC UD-H01
		  and others) sometimes change the feedback value
		  by +- 0x1.0000.
		
		  The first time we see a feedback value, determine its format
		  by shifting it left or right until it matches the nominal
		  frequency value.  This assumes that the feedback does not
		  differ from the nominal value more than +50% or -25%.
		
		  If the frequency looks valid, set it.
		  This value is referred to in prepare_playback_urb().
		
		  Out of range; maybe the shift value is wrong.
		  Reset it so that we autodetect again the next time.
 SPDX-License-Identifier: GPL-2.0-or-later
 Validation of USB-audio class descriptors
 UAC1 only 
 for mixer unit; covering all UACs 
	 We can't determine the bitmap size only from this unit descriptor,
	  so just check with the remaining length.
	  The actual bitmap is checked at mixer unit parser.
 wChannelConfig, iChannelNames 
 bmControls[nm] 
 iMixer 
 bmChannelConfig, iChannelNames 
 bmMixerControls[nm] 
 bmControls, iMixer 
 wClusterDescrID 
 bmMixerControls[nm] 
 both for processing and extension units; covering all UACs 
 bNrChannels, wChannelConfig, iChannelNames 
 bControlSize 
 bControlSize, bmControls, iProcessing 
 bNrChannels, bmChannelConfig, iChannelNames 
 bmControls -- 2 bytes for PU 
 bmControls -- 1 byte for EU 
 iProcessing 
 wProcessingDescrStr, bmControls 
 OK 
 bNrModes 
 bNrModes, waModes(n) 
 OK 
 SiC! 
 bNrModes 
 bNrModes, daModes(n) 
 wClusterDescrID 
 bNrModes 
 bNrModes, waClusterDescrID(n) 
 wClusterDescrID, bmAlgorighms 
 both for selector and clock selector units; covering all UACs 
 iSelector 
 bmControls, iSelector 
 bmControls, wSelectorDescrStr 
 at least bmaControls(0) for master channel + iFeature 
 at least bmaControls(0) for master channel + iFeature 
 at least bmaControls(0) for master channel + wFeatureDescrStr 
 UAC1 
 UAC2 
 UAC_VERSION_2, UAC2_EFFECT_UNIT: not implemented yet 
 UAC_VERSION_2, UAC2_SAMPLE_RATE_CONVERTER: not implemented yet 
 UAC3 
 UAC_VERSION_3, UAC3_EXTENDED_TERMINAL: not implemented yet 
  UAC_VERSION_3, UAC3_EFFECT_UNIT: not implemented yet 
 UAC_VERSION_3, UAC3_SAMPLE_RATE_CONVERTER: not implemented yet 
 UAC_VERSION_3, UAC3_CONNECTORS: not implemented yet 
 terminator 
 terminator 
 Validate the given unit descriptor, return true if it's OK 
 don't care 
 check for the fixed size 
 not matching, skip validation 
 SPDX-License-Identifier: GPL-2.0-or-later
  Linux driver for TerraTec DMX 6Fire USB
  Device communications
  Author:	Torsten Schenk <torsten.schenk@zoho.com>
  Created:	Jan 01, 2011
  Copyright:	(C) Torsten Schenk
 midi in event 
 length (starting at buffer[2]) 
 length (starting at buffer[2]) 
 13: maximum length of message 
 13: maximum length of message 
 submit an urb that receives communication data from device 
 SPDX-License-Identifier: GPL-2.0-or-later
  Linux driver for TerraTec DMX 6Fire USB
  Main routines and module definitions.
  Author:	Torsten Schenk <torsten.schenk@zoho.com>
  Created:	Jan 01, 2011
  Copyright:	(C) Torsten Schenk
 Index 0-max 
 Id for card 
 Enable card 
 index in module parameter array 
 look if we already serve this card and return if so 
 check, if firmware is present on device, upload it if not 
 firmware update performed 
 if we are here, card can be registered in alsa. 
 if !chip, fw upload has been performed 
 SPDX-License-Identifier: GPL-2.0-or-later
  Linux driver for TerraTec DMX 6Fire USB
  Rawmidi driver
  Author:	Torsten Schenk <torsten.schenk@zoho.com>
  Created:	Jan 01, 2011
  Copyright:	(C) Torsten Schenk
 more data available, send next packet 
 no more data to transmit 
 start transfer 
 we are already transmitting so just return 
 'send midi' command 
 size of data 
 always 0 
 SPDX-License-Identifier: GPL-2.0-or-later
  Linux driver for TerraTec DMX 6Fire USB
  PCM driver
  Author:	Torsten Schenk <torsten.schenk@zoho.com>
  Created:	Jan 01, 2011
  Copyright:	(C) Torsten Schenk
 keep next two synced with
  FW_EP_W_MAX_PACKET_SIZE[] and RATES_MAX_PACKET_SIZE
 settings for pcm 
 pcm streaming states 
 no pcm streaming 
 pcm streaming requested, waiting to become ready 
 pcm streaming running 
 set in pcm_open, depending on captureplayback 
 call with stream_mutex locked 
 call with stream_mutex locked 
 submit our in urbs 
 wait for first out urb to return (sent in in urb handler) 
 call with substream locked 
		 at least 4 header bytes for valid packet.
 skip leading 4 bytes of every packet 
 call with substream locked 
		 at least 4 header bytes for valid packet.
 skip leading 4 bytes of every frame 
 receive our capture data 
 setup out urb structure 
 now send our playback data (if a free out urb was found) 
 setup the 4th byte of each sample (0x40 for analog channels) 
 skip sample data 
 deactivate substream 
 all substreams closed? if so, stop streaming 
 SPDX-License-Identifier: GPL-2.0-or-later
  Linux driver for TerraTec DMX 6Fire USB
  Firmware loader
  Author:	Torsten Schenk <torsten.schenk@zoho.com>
  Created:	Jan 01, 2011
  Copyright:	(C) Torsten Schenk
  wMaxPacketSize of pcm endpoints.
  keep synced with rates_in_packet_size and rates_out_packet_size in pcm.c
  fpp: frames per isopacket
  CAUTION: keep sizeof <= buffer[] in usb6fire_fw_init
 alt 1: 228 EP2 and EP6 (7 fpp) 
 alt 2: 420 EP2 and EP6 (13 fpp)
 alt 3: 404 EP2 and 604 EP6 (25 fpp) 
 true if an error occurred parsing this record 
 maximum record length in whole ihex 
 private 
 current position in txt_data 
  returns true if record is available, false otherwise.
  iff an error occurred, false will be returned and record->error will be true.
 find begin of record (marked by a colon) 
 number of characters needed for len, addr and type entries 
 number of characters needed for data and crc entries 
 eof 
	 read all records, if loop ends, record->error indicates,
 upload firmware image 
 stop ezusb cpu 
 write firmware 
 write data after firmware has been uploaded 
 resume ezusb cpu 
 check, if the firmware version the devices has currently loaded
  is known by this driver. 'version' needs to have 4 bytes version
	 buffer: 8 receiving bytes from device and
 do we need fpga loader ezusb firmware? 
 do we need fpga firmware and application ezusb firmware? 
 all fw loaded? 
 unknown data? 
 SPDX-License-Identifier: GPL-2.0-or-later
  Linux driver for TerraTec DMX 6Fire USB
  Mixer control
  Author:	Torsten Schenk <torsten.schenk@zoho.com>
  Created:	Jan 01, 2011
  Copyright:	(C) Torsten Schenk
  Thanks to:
  - Holger Ruckdeschel: he found out how to control individual channel
    volumes and introduced mute switch
  data that needs to be sent to device. sets up card internal stuff.
  values dumped from windows driver and filtered by trial'n'error.
 TERMINATING ENTRY 
 values to write to soundcard register for all samplerates 
 set soundcard clock 
	 enable analog inputs and outputs
 disable digital inputs and outputs 
 TODO: use spdif_x to enabledisable digital channels 
 SPDX-License-Identifier: GPL-2.0-only
  Line 6 Linux USB driver
  Copyright (C) 2004-2010 Markus Grabner (grabner@icg.tugraz.at)
	This is Line 6's MIDI manufacturer ID.
	Code to request version of POD, Variax interface
	(and maybe other devices).
	 Class for asynchronous messages.
	Forward declarations.
	Start to listen on endpoint.
 sanity checks of EP before actually submitting 
	Stop listening on endpoint.
	Send raw message in pieces of wMaxPacketSize bytes.
	Notification of completion of asynchronous request transmission.
	Asynchronously send part of a raw message.
 sanity checks of EP before actually submitting 
	Asynchronously send raw message.
 create message: 
 create URB: 
 set message data: 
 start sending: 
	Send asynchronous device version request.
	Send sysex message in pieces of wMaxPacketSize bytes.
	Allocate buffer for sysex message and prepare header.
	@param code sysex message code
	@param size number of bytes between code and sysex end
	Notification of data received from the Line 6 device.
 milliseconds 
	Read data from device.
 query the serial number: 
 Wait for data length. We'll get 0xff until length arrives. 
 should be equal or something went wrong 
 receive the result: 
	Write data to device.
	Read Line 6 device serial number.
	(POD, TonePort, GuitarPort)
	Card destructor.
	 Free buffer memory first. We cannot depend on the existence of private
	  data from the (podhd) module, it may be gone already during this call
 then free URBs: 
 decrement reference counters: 
 Control data transfer properties 
 Isochronous transfer properties 
 Enable buffering of incoming messages, flush the buffer 
 NOTE: hwdep layer provides atomicity here 
 Stop buffering 
 Read from circular buffer, return to user 
 Buffer too small; allow re-read of the current item... 
 Write directly (no buffering) to device by user
 This is an arbitrary limit - still better than nothing... 
 Insert into circular buffer 
 No race condition here, there's only one writer 
 else TODO: signal overflow 
 TODO: usb_driver_claim_interface(); 
 initialize USB buffers: 
	Probe USB device.
 we don't handle multiple configurations 
 store basic data: 
 increment reference counters: 
 initialize device info: 
 query interface number 
 TODO reserves the bus bandwidth even without actual transfer 
 initialize device data based on device: 
 creation of additional special files should go here 
	 we can call disconnect callback here because no close-sync is
	  needed yet at this point
	Line 6 device disconnected.
 make sure the device isn't destructed twice: 
	Suspend Line 6 device.
	Resume Line 6 device.
 CONFIG_PM 
 SPDX-License-Identifier: GPL-2.0-only
  Line 6 Linux USB driver
  Copyright (C) 2004-2010 Markus Grabner (grabner@icg.tugraz.at)
		
		   Note that according to the MIDI specification 0xf2 is
		   the "Song Position Pointer", but this is used by Line 6
		   to send sysex messages to the host.
 skip trailing active sense 
 no buffer wraparound 
 buffer wraparound 
 we need to be able to store at least a 3 byte MIDI message 
 check MIDI command length 
 search for end of message 
 no buffer wraparound 
 buffer wraparound 
 end of message not found 
 command is not yet complete 
 command is not yet complete 
 no buffer wraparound 
 buffer wraparound 
 SPDX-License-Identifier: GPL-2.0-only
  Line 6 Linux USB driver
  Copyright (C) 2004-2010 Markus Grabner (grabner@icg.tugraz.at)
	Stages of Variax startup procedure
 Generic Line 6 USB data 
 Buffer for activation code 
 Current progress in startup procedure 
	This message is sent by the device during initialization and identifies
	the connected guitar version.
	This message is the last one sent by the device during initialization.
	Variax startup procedure.
	This is a sequence of functions with special requirements (e.g., must
	not run immediately after initialization, must not run in interrupt
	context). After the last one has finished, the device is ready to use.
 repeat request until getting the response 
 request firmware version: 
 activate device: 
 ALSA audio interface: 
	Process a completely received message.
 notify of complete initialization: 
	Variax destructor.
	 Try to init workbench device.
 initialize USB buffers: 
 initiate startup procedure: 
 table of devices that work with this driver 
 no audio channel 
	Probe USB device.
 SPDX-License-Identifier: GPL-2.0-only
  Line 6 Linux USB driver
  Copyright (C) 2004-2010 Markus Grabner (grabner@icg.tugraz.at)
                          Emil Myhrman (emil.myhrman@gmail.com)
 Generic Line 6 USB data 
 Source selector 
 Serial number of device 
 Firmware version (x 100) 
 Device type 
 LED instances 
 monitor info callback 
 monitor get callback 
 monitor put callback 
 source info callback 
 source get callback 
 source put callback 
 control definition 
 source selector definition 
	For the led on Guitarport.
	Brightness goes from 0x00 to 0x26. Set a value above this to have led
	blink.
	(void cmd_0x02(byte red, byte green)
 add your device here if you are missing support for the LEDs 
	Setup Toneport device.
 sync time on device with host: 
 note: 32-bit timestamps overflow in year 2106 
 enable device: 
 initialize source select: 
	Toneport device disconnected.
	 Try to init Toneport device.
 initialize PCM subsystem: 
 register monitor control: 
 register source select control: 
 register audio system: 
	Resume Toneport device after reset.
 table of devices that work with this driver 
 1..4 seem to be ok 
 no control channel 
 1..4 seem to be ok 
 no control channel 
 1..4 seem to be ok 
 no control channel 
 defaults to 44.1kHz, 16-bit 
 no control channel 
 1..4 seem to be ok 
 no control channel 
 1..4 seem to be ok 
 no control channel 
 defaults to 44.1kHz, 16-bit 
 no control channel 
	Probe USB device.
 SPDX-License-Identifier: GPL-2.0-only
  Line 6 Linux USB driver
  Copyright (C) 2004-2010 Markus Grabner (grabner@icg.tugraz.at)
	Pass data received via USB to MIDI.
	Read data from MIDI buffer and transmit them via USB.
	Notification of completion of MIDI transmission.
	Send an asynchronous MIDI message.
	Assumes that line6->line6midi->lock is held
	(i.e., this function is serialized).
 Create a MIDI device 
 MIDI device destructor 
	Initialize the Line 6 MIDI subsystem.
 skip MIDI initialization and report success 
 SPDX-License-Identifier: GPL-2.0-only
  Line 6 Linux USB driver
  Copyright (C) 2004-2010 Markus Grabner (grabner@icg.tugraz.at)
	Software stereo volume control.
 maximum volume - no change 
	Create signal for impulse response test.
	Add signal to buffer for software monitoring.
 zero volume - no change 
	
	   We don't need to handle devices with 6 bytes per frame here
	   since they all support hardware monitoring.
	Find a free URB, prepare audio data, and submit URB.
	must be called in line6pcm->out.lock context
 TODO: this may not work for LINE6_ISO_PACKETS != 1 
 compute frame size for given sampling rate 
 can't determine URB size 
			
			   The transferred area goes over buffer boundary,
			   copy the data to the temp buffer.
	Submit all currently available playback URBs.
	must be called in line6pcm->out.lock context
	Callback for completed playback URB.
 find index of URB 
 URB has been unlinked asynchronously 
 open playback callback 
 close playback callback 
 playback operators 
 create audio URBs and fill in constant values: 
 URB for audio out: 
 SPDX-License-Identifier: GPL-2.0-only
  Line 6 Linux USB driver
  Copyright (C) 2004-2010 Markus Grabner (grabner@icg.tugraz.at)
 impulse response volume controls 
 impulse response period controls 
	Unlink all currently active URBs.
	Wait until unlinking of all currently active URBs has been finished.
 allocate a buffer if not opened yet;
  call this in line6pcm.state_mutex
 Invoked multiple times in a row so allocate once only 
 free a buffer if all streams are closed;
  call this in line6pcm.state_mutex
 start a PCM stream 
 Submit all currently available URBs 
 stop a PCM stream; this doesn't sync with the unlinked URBs 
 common PCM trigger callback 
 common PCM pointer callback 
 Acquire and optionally start duplex streams:
  type is either LINE6_STREAM_IMPULSE or LINE6_STREAM_MONITOR
 TODO: We should assert SNDRV_PCM_STREAM_PLAYBACKCAPTURE == 01 
 Stop and release duplex streams 
 common PCM hw_params callback 
 common PCM hw_free callback 
 control info callback 
 control get callback 
 control put callback 
 control definition 
	Cleanup the PCM device.
 Most likely impossible in current code... 
 create a PCM device 
 set operators 
 pre-allocation of buffers 
	Sync with PCM stream stops.
	Create and register the PCM device and mixer entries.
	Create URBs for playback and capture.
 skip PCM initialization and report success 
 mixer: 
 prepare pcm callback 
 SPDX-License-Identifier: GPL-2.0-only
  Line 6 Linux USB driver
  Copyright (C) 2004-2010 Markus Grabner (grabner@icg.tugraz.at)
	Locate name in binary program dump
	Other constants
	Stages of POD startup procedure
 Generic Line 6 USB data 
 Instrument monitor level 
 Current progress in startup procedure 
 Serial number of device 
 Firmware version (x 100) 
 Device ID 
 INDENT-OFF 
 POD_SYSEX_UPDATE    = 0x6c,   
 dumps entire internal memory of PODxt Pro 
 POD_SYSEX_DUMPMEM2  = 0x76 
 INDENT-ON 
 SNDRV_PCM_FMTBIT_S24_3LE 
	Process a completely received message.
 Only look for sysex messages from this device 
	Send system parameter (from integer).
	"read" request on "serial_number" special file.
	"read" request on "firmware_version" special file.
	"read" request on "device_id" special file.
	POD startup procedure.
	This is a sequence of functions with special requirements (e.g., must
	not run immediately after initialization, must not run in interrupt
	context). After the last one has finished, the device is ready to use.
 request firmware version: 
 serial number: 
 ALSA audio interface: 
 POD special files: 
 control info callback 
 control get callback 
 control put callback 
 control definition 
	 Try to init POD device.
 create sysfs entries: 
 initialize PCM subsystem: 
 register monitor control: 
	
	   When the sound card is registered at this point, the PODxt Live
	   displays "Invalid Code Error 07", so we do it later in the event
	   handler.
 initiate startup procedure: 
 table of devices that work with this driver 
 no audio channel 
	Probe USB device.
 SPDX-License-Identifier: GPL-2.0-only
  Line 6 Pod HD
  Copyright (C) 2011 Stefan Hajnoczi <stefanha@gmail.com>
  Copyright (C) 2015 Andrej Krutak <dev@andree.sk>
  Copyright (C) 2017 Hans P. Moller <hmoller@uc.cl>
 Generic Line 6 USB data 
 Serial number of device 
 Firmware version 
 Monitor level 
 SNDRV_PCM_FMTBIT_S24_3LE 
				  1+2: Main signal (out), 3+4: Tone 1,
				   5+6: Tone 2, 7+8: raw
 SNDRV_PCM_FMTBIT_S24_3LE 
  POD X3 startup procedure.
  May be compatible with other POD HD's, since it's also similar to the
  previous POD setup. In any case, it doesn't seem to be required for the
  audio nor bulk interfaces to work.
 NOTE: looks like some kind of ping message 
 Chunk is 0xc bytes (without first word) 
 First chunk in the message 
 Message size is 2 4-byte words 
 Unknown 
 Unknown 
 Volume, LE float32, 0.0 - 1.0 
 control info callback 
 control get callback 
 control put callback 
 control definition 
	Try to init POD HD device.
 claim the data interface 
 create sysfs entries: 
 initialize PCM subsystem: 
 register USB audio system directly 
 init device and delay registering 
 table of devices that work with this driver 
 TODO: no need to alloc data interfaces when only audio is used 
	Probe USB device.
 SPDX-License-Identifier: GPL-2.0-only
  Line 6 Linux USB driver
  Copyright (C) 2004-2010 Markus Grabner (grabner@icg.tugraz.at)
	Find a free URB and submit it.
	must be called in line6pcm->in.lock context
	Submit all currently available capture URBs.
	must be called in line6pcm->in.lock context
	Copy data into ALSA capture buffer.
		
		   The transferred area goes over buffer boundary,
		   copy two separate chunks.
 this is somewhat paranoid 
 copy single chunk 
  Callback for completed capture URB.
 find index of URB 
		 TODO:
		  Also, if iso_buffers != 2, the prev frame is almost random at
		  playback side.
		  This needs to be redesigned. It should be "stable", but we may
		  experience sync problems on such high-speed configs.
 open capture callback 
 close capture callback 
 capture operators 
 create audio URBs and fill in constant values: 
 URB for audio in: 
 SPDX-License-Identifier: GPL-2.0-or-later
    Copyright (c) 2006,2007 Daniel Mack, Tim Ruetz
 "menu"               
 "lcd backlight       
 "control"            
 "enter"              
 "view"               
 "esc"                
 "sound"              
 array spacer, never triggered. 
 "listen"             
 8 softkeys 
 touch sensitive knobs 
 mute       
 solo       
 select     
 duplicate  
 navigate   
 pad mode   
 pattern    
 scene      
 spacer 
 rec        
 erase      
 shift      
 grid       
 >          
 <          
 restart    
 E          
 F          
 G          
 H          
 D          
 C          
 B          
 A          
 control    
 browse     
 <          
 snap       
 autowrite  
 >          
 sampling   
 step       
 8 softkeys 
 note repeat 
 play        
 some of these devices have endless rotation potentiometers
  built in which use two tapers, 90 degrees phase shifted.
  this algorithm decodes them to one single value, ranging
 0..90 and 270..360 degrees 
 90..270 degrees 
 0..180 degrees 
 180..360 degrees 
 interpolate both slider values, depending on weight factors 
 0..99 x DEG360 
 normalize to 0..999 
 4 under the left screen 
 4 under the right screen 
 volume 
 tempo 
 swing 
 rotary encoders 
 buttons 
 left wheel 
 right wheel 
 rotary encoders 
 Volume Fader Channel D 
 Volume Fader Channel B 
 Volume Fader Channel A 
 Volume Fader Channel C 
 Loop Volume 
 Crossfader 
 Tempo Fader R 
 Tempo Fader L 
 Mic Volume 
 Cue Mix 
 Wheel distance sensor L 
 Wheel distance sensor R 
 Channel D EQ - Filter 
 Channel D EQ - Low 
 Channel D EQ - Mid 
 Channel D EQ - Hi 
 FX2 - drywet 
 FX2 - 1 
 FX2 - 2 
 FX2 - 3 
 Channel B EQ - Filter 
 Channel B EQ - Low 
 Channel B EQ - Mid 
 Channel B EQ - Hi 
 Channel A EQ - Filter 
 Channel A EQ - Low 
 Channel A EQ - Mid 
 Channel A EQ - Hi 
 Channel C EQ - Filter 
 Channel C EQ - Low 
 Channel C EQ - Mid 
 Channel C EQ - Hi 
 FX1 - wetdry 
 FX1 - 1 
 FX1 - 2 
 FX1 - 3 
 analog potentiometers 
 rotary encoders 
 36 analog potentiometers and faders 
 2 encoder wheels 
 9 rotary encoders 
 no input methods supported on this device 
 SPDX-License-Identifier: GPL-2.0-or-later
    Copyright (c) 2006,2007 Daniel Mack
 port 
 SPDX-License-Identifier: GPL-2.0-or-later
  caiaq.c: ALSA driver for caiaqNativeInstruments devices
    Copyright (c) 2007 Daniel Mack <daniel@caiaq.de>
                       Karsten Wiese <fzu@wemgehoertderstaat.de>
 Index 0-max 
 Id for this card 
 Enable this card 
 terminator  }
 packets per microframe 
 device-specific startup specials 
 RigKontrol2 - display centered dash ('-') 
 RigKontrol2 - display two centered dashes ('--') 
 Audio Kontrol 1 - make USB-LED stop blinking 
 Audio 8 DJ - trigger read of current settings 
 fix up some defaults 
 finally, register the card and all its sub-instances 
 sanity checks of EPs before actually submitting 
	 if the id was not passed as module option, fill it with a shortened
	  version of the product string which does not contain any
 SPDX-License-Identifier: GPL-2.0-or-later
    Copyright (c) 2007 Daniel Mack
    friendly supported by NI.
 current input mode of A8DJ and A4DJ 
 name and private_value filled later 
 SPDX-License-Identifier: GPL-2.0-or-later
    Copyright (c) 2006-2008 Daniel Mack, Karsten Wiese
 will overwrite later 
		 when the last client has stopped streaming,
 this should probably go upstream 
	 the first client that opens a stream defines the sample rate
 operators for both playback and capture 
 paranoia check 
 3 audio data bytes, followed by 1 check byte 
 fill in the check bytes 
 fill in the check byte pattern 
 find an unused output urb that is unused 
	 read the recently received packet and send back one which has
 re-submit inbound urb 
 setup samplerates 
 SPDX-License-Identifier: GPL-2.0-only
  Edirol UA-101UA-1000 driver
  Copyright (c) Clemens Ladisch <clemens@ladisch.de>
  Should not be lower than the minimum scheduling delay of the host
  controller.  Some Intel controllers need more than one frame; as long as
  that driver doesn't tell us about this, use 1.5 frames just to be sure.
 Somewhat random. 
  This magic value optimizes memory usage efficiency for the UA-101's packet
  sizes at all sample rates, taking into account the stupid cache pool sizes
  that usb_alloc_coherent() uses.
 hardware specific 
 bits in struct ua101::states 
 FIFO to synchronize playback rate to capture rate 
 unlinked 
 device removed 
 unlinked 
 device disabled 
 append URB to FIFO 
 copy data from the ALSA ring buffer into the URB buffer 
 wrap around at end of ring buffer 
	
	  Synchronizing the playback rate to the capture rate is done by using
	  the same sequence of packet sizes for both streams.
	  Submitting a playback URB therefore requires both a ready URB and
	  the size of the corresponding capture packet, i.e., both playback
	  and capture URBs must have been completed.  Since the USB core does
	  not guarantee that playback and capture complete callbacks are
	  called alternately, we use two FIFOs for packet sizes and read URBs;
	  submitting playback URBs is possible as long as both FIFOs are
	  nonempty.
 take packet size out of FIFO 
 take URB out of FIFO 
 fill packet with data or silence 
 and off you go ... 
 copy data from the URB buffer into the ALSA ring buffer 
 wrap around at end of ring buffer 
 unlinked 
 device removed 
 unlinked 
 device disabled 
 append packet size to FIFO 
			
			  Ring buffer overflow; this happens when the playback
			  stream is not running.  Throw away the oldest entry,
			  so that the playback stream, when it starts, sees
			  the most recent packet sizes.
	
	  We submit the initial URBs all at once, so we have to wait for the
	  packet size FIFO to be full.
 all initial URBs contain silence 
	
	  The EHCI driver schedules the first packet of an iso stream at 10 ms
	  in the future, i.e., no data is actually captured for that long.
	  Take the wait here so that the stream is known to be actually
	  running when the start trigger has been called.
 see the comment in capture_pcm_prepare() 
	
	  The cache pool sizes used by usb_alloc_coherent() (128, 512, 2048) are
	  quite bad when used with the packet sizes of this device (e.g. 280,
	  520, 624).  Therefore, we allocate and subdivide entire pages, using
	  a smaller buffer only for the last chunk.
 UA-101 
 UA-1000 
 make sure that userspace cannot create new requests 
 make sure that there are no pending USB requests 
 UA-1000 high speed 
 UA-101 high speed 
 UA-101 full speed 
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (C) 2007, 2008 Karsten Wiese <fzu@wemgehoertderstaat.de>
                             setup                                  
  convert a sampling rate into our full speed format (fs1000 in Q16.16)
  this will overflow at approx 524 kHz
  convert a sampling rate into USB high speed format (fs8000 in Q16.16)
  this will overflow at approx 4 MHz
	
		t_period = period_frames  sample_rate
		iso_packs = t_period  t_iso_frame
			= (period_frames  sample_rate)  (1  t_iso_frame)
 calculate the frequency in 16.16 format 
                             start                                  
  This loop_back() shows how to readwrite the period data.
 just guesswork                            ^^^^^^ 
 wait, check 
                             stop                                   
 SPDX-License-Identifier: GPL-2.0-or-later
  usbusy2y.c - ALSA USB US-428 Driver
2005-04-14 Karsten Wiese
	Version 0.8.7.2:
	Call snd_card_free() instead of snd_card_free_in_thread() to prevent oops with dead keyboard symptom.
	Tested ok with kernel 2.6.12-rc2.
2004-12-14 Karsten Wiese
	Version 0.8.7.1:
	snd_pcm_open for rawusb pcm-devices now returns -EBUSY if called without rawusb's hwdep device being open.
2004-12-02 Karsten Wiese
	Version 0.8.7:
	Use macro usb_maxpacket() for portability.
2004-10-26 Karsten Wiese
	Version 0.8.6:
	wake_up() process waiting in usx2y_urbs_start() on error.
2004-10-21 Karsten Wiese
	Version 0.8.5:
	nrpacks is runtime or compiletime configurable now with tested values from 1 to 4.
2004-10-03 Karsten Wiese
	Version 0.8.2:
	Avoid any possible racing while in prepare callback.
2004-09-30 Karsten Wiese
	Version 0.8.0:
	Simplified things and made ohci work again.
2004-09-20 Karsten Wiese
	Version 0.7.3:
	Use usb_kill_urb() instead of deprecated (kernel 2.6.9) usb_unlink_urb().
2004-07-13 Karsten Wiese
	Version 0.7.1:
	Don't sleep in STARTSTOP callbacks anymore.
	us428 channels CD not handled just for this version, sorry.
2004-06-21 Karsten Wiese
	Version 0.6.4:
	Temporarely suspend midi input
	to sanely call usb_set_interface() when setting format.
2004-06-12 Karsten Wiese
	Version 0.6.3:
	Made it thus the following rule is enforced:
	"All pcm substreams of one usx2y have to operate at the same rate & format."
2004-04-06 Karsten Wiese
	Version 0.6.0:
	Runs on 2.6.5 kernel without any "--with-debug=" things.
	us224 reported running.
2004-01-14 Karsten Wiese
	Version 0.5.1:
	Runs with 2.6.1 kernel.
2003-12-30 Karsten Wiese
	Version 0.4.1:
	Fix 24Bit 4Channel capturing for the us428.
2003-11-27 Karsten Wiese, Martin Langer
	Version 0.4:
	us122 support.
	us224 could be tested by uncommenting the sections containing USB_ID_US224
2003-11-03 Karsten Wiese
	Version 0.3:
	24Bit support.
	"arecord -D hw:1 -c 2 -r 48000 -M -f S24_3LE|aplay -D hw:1 -c 2 -r 48000 -M -f S24_3LE" works.
2003-08-22 Karsten Wiese
	Version 0.0.8:
	Removed EZUSB Firmware. First Stage Firmwaredownload is now done by tascam-firmware downloader.
	See:
	http:usb-midi-fw.sourceforge.nettascam-firmware.tar.gz
2003-06-18 Karsten Wiese
	Version 0.0.5:
	changed to compile with kernel 2.4.21 and alsa 0.9.4
2002-10-16 Karsten Wiese
	Version 0.0.4:
	compiles again with alsa-current.
	USB_ISO_ASAP not used anymore (most of the time), instead
	urb->start_frame is calculated here now, some calls inside usb-driver don't need to happen anymore.
	To get the best out of this:
	Disable APM-support in the kernel as APM-BIOS calls (once each second) hard disable interrupt for many precious milliseconds.
	This helped me much on my slowish PII 400 & PIII 500.
	ACPI yet untested but might cause the same bad behaviour.
	Use a kernel with lowlatency and preemptiv patches applied.
	To autoload snd-usb-midi append a line
		post-install snd-usb-us428 modprobe snd-usb-midi
	to etcmodules.conf.
	known problems:
	sliders, knobs, lights not yet handled except MASTER Volume slider.
	"pcm -c 2" doesn't work. "pcm -c 2 -m direct_interleaved" does.
	KDE3: "Enable full duplex operation" deadlocks.
2002-08-31 Karsten Wiese
	Version 0.0.3: audio also simplex;
	simplifying: iso urbs only 1 packet, melted structs.
	ASYNC_UNLINK not used anymore: no more crashes so far.....
	for alsa 0.9 rc3.
2002-08-09 Karsten Wiese
	Version 0.0.2: midi works with snd-usb-midi, audio (only fullduplex now) with i.e. bristol.
	The firmware has been sniffed from win2k us-428 driver 3.09.
    Copyright (c) 2002 - 2004 Karsten Wiese
 Index 0-max 
 Id for this card 
 Enable this card 
  pipe 4 is used for switching the lamps, setting samplerate, volumes ....
	printk("%i:0x%02X ", 8, (int)((unsigned char)usx2y->in04_buf)[8]); Master volume shows 0 here if fader is at max during boot ?!?
 FIXME if more than 1 p4out is new, 1 gets lost.
  Prepare some urbs
 terminator  }
us428(card)->usbmidi.ifnum,
 release the midi resources 
 SPDX-License-Identifier: GPL-2.0-or-later
 USX2Y "rawusb" aka hwdep_pcm implementation
 Its usb's unableness to atomically handle power of 2 period sized data chuncs
 at standard samplerates,
 what led to this part of the usx2y module:
 It provides the alsa kernel half of the usx2y-alsa-jack driver pair.
 The pair uses a hardware dependent alsa-device for mmaped pcm transport.
 Advantage achieved:
         The usb_hc moves pcm data frominto memory via DMA.
         That memory is mmaped by jack's usx2y driver.
         Jack's usx2y driver is the firstlast to readwrite pcm data.
         Readwrite is a combination of power of 2 period shaping and
         floatint conversation.
         Compared to mainline alsajack we leave out power of 2 period shaping inside
         snd-usb-usx2y which needs memcpy() and additional buffers.
         As a side effect possible unwanted pcm-data coruption resulting of
         standard alsa's snd-usb-usx2y period shaping scheme falls away.
         Result is sane jack operation at buffering schemes down to 128frames,
         2 periods.
         plain usx2y alsa mode is able to achieve 64frames, 4periods, but only at the
         cost of easier triggered i.e. aeolus xruns (128 or 256frames,
         2periods works but is useless cause of crackling).
 This is a first "proof of concept" implementation.
 Later, functionalities should migrate to more appropriate places:
 Userland:
 - The jackd could mmap its float-pcm buffers directly from alsa-lib.
 - alsa-lib could provide power of 2 period sized shaping combined with intfloat
   conversation.
   Currently the usx2y jack driver provides above 2 services.
 Kernel:
 - rawusb dma pcm buffer transport should go to snd-usb-lib, so also snd-usb-audio
   devices can use it.
   Currently rawusb dma pcm buffer transport (this file) is only available to snd-usb-usx2y.
FIXME
 active? hmm, skip this 
 update the pointer, call callback if necessary 
FIXME: so far only correct period_size == 2^x ?
  prepare urb for playback data pipe
  we copy the data directly from the pcm buffer.
  the current position to be copied is held in hwptr field.
  since a urb can handle only a single linear buffer, if the total
  transferred area overflows the buffer boundary, we cannot send
  it directly from the buffer.  thus the data is once copied to
  a temporary buffer and urb points to that.
 calculate the size of a packet 
 set up descriptor 
  release a substream
  initialize a substream's urbs
 allocate and initialize data urbs 
  free the buffer
 Make sure above modifications are seen by i_usx2y_subs_startup()
 Call it now
 something is completely wrong > stop everything
  prepare callback
  set format and initialize urbs
 Start hardware streams
 SyncStream first....
 if userspace tries to mmap beyond end of our buffer, fail 
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (C) 2007, 2008 Karsten Wiese <fzu@wemgehoertderstaat.de>
 Index 0-max 
 Id for this card 
 Enable this card 
 driver_info flags 
 if userspace tries to mmap beyond end of our buffer, fail 
		 The us-122l's descriptor defaults to iso max_packsize 78,
		   which isn't needed for samplerates <= 48000.
		   Lets save some memory:
 release the midi resources 
 release the midi resources 
 needed, doesn't restart without: 
 US-144 only works at USB1.1! Disable module ehci-hcd. 
 terminator  }
 SPDX-License-Identifier: GPL-2.0-or-later
  Driver for Tascam US-X2Y USB soundcards
  FPGA Loader + ALSA Startup
  Copyright (c) 2003 by Karsten Wiese <annabellesgarden@yahoo.de>
 FIXME this hwdep interface is used twice: fpga download and mmap for controlling Lights etc. Maybe better using 2 hwdep devs?
 so as long as the device isn't fully initialised yet we return -EBUSY here.
 if userspace tries to mmap beyond end of our buffer, fail 
 0: Prepad Data, 1: FPGA Code
 give the device some time
 SPDX-License-Identifier: GPL-2.0-or-later
    US-X2Y AUDIO
    Copyright (c) 2002-2004 by Karsten Wiese
    based on
    (Tentative) USB Audio Driver for ALSA
    Main and PCM part
    Copyright (c) 2002 by Takashi Iwai <tiwai@suse.de>
    Many codes borrowed from audio.c by
 	    Alan Cox (alan@lxorguk.ukuu.org.uk)
 	    Thomas Sailer (sailer@ife.ee.ethz.ch)
 Default value used for nr of packs per urb.
  1 to 4 have been tested ok on uhci.
  To use 3 on ohci, you'd need a patch:
  look for "0000425-linux-2.6.9-rc4-mm1_ohci-hcd.patch.gz" on
  "https:bugtrack.alsa-project.orgalsa-bugbug_view_page.php?bug_id=0000425"
  1, 2 and 4 work out of the box on ohci, if I recall correctly.
  Bigger is safer operation, smaller gives lower latencies.
 If your system works ok with this module's parameter
  nrpacks set to 1, you might as well comment
  this define out, and thereby produce smaller, faster code.
  You'd also set USX2Y_NRPACKS to 1 then.
 number of packets per urb 
 active? hmm, skip this 
 copy a data chunk 
 update the pointer, call callback if necessary 
  prepare urb for playback data pipe
  we copy the data directly from the pcm buffer.
  the current position to be copied is held in hwptr field.
  since a urb can handle only a single linear buffer, if the total
  transferred area overflows the buffer boundary, we cannot send
  it directly from the buffer.  thus the data is once copied to
  a temporary buffer and urb points to that.
 calculate the size of a packet 
 set up descriptor 
			 err, the transferred area goes over buffer boundary.
			  copy the data to the temp buffer.
 set the buffer pointer 
  process after playback data complete
  update the current position and call callback if a period is processed.
 let hcd do rollover sanity checks
 we need to set this at each time 
 reset the pointer 
  release a substreams urbs
  initialize a substream's urbs
 allocate a temporary buffer for playback 
 allocate and initialize data urbs 
 allocate a capture buffer per urb 
 something is completely wrong > stop everything
  return the current pcm pointer.  just return the hwptr_done value.
  startstop substream
  allocate a buffer, setup samplerate
  so far we use a physically linear buffer although packetize transfer
  doesn't need a continuous area.
  if sg buffer is supported on the later version of alsa, we'll follow
  that.
 this line sets 44100, well actually a little less
 only tascam  frontier design knows the further lines .......
 this line sets 48000, well actually a little less
 only tascam  frontier design knows the further lines .......
	 all pcm substreams off one usx2y have to operate at the same
	  rate & format
  free the buffer
  prepare callback
  set format and initialize urbs
 Start hardware streams
 SyncStream first....
  free a usb stream instance
  create a chip instance and set its names.
 Lets us428 recognize output-volume settings, disturbs us122.
 SPDX-License-Identifier: GPL-2.0-or-later
  Behringer BCD2000 driver
    Copyright (C) 2014 Mario Kicherer (dev@kicherer.org)
 (de)register midi substream from client 
 ignore packets without payload 
 copy command prefix bytes 
	
	  get MIDI packet and leave space for command prefix
	  and payload length
 set payload length 
 send packet to the BCD2000 
 (de)register midi substream from client 
 check if there is data userspace wants to send 
 check if there is more data userspace wants to send 
 return URB to device 
 copy init sequence into buffer 
 submit sequence 
 pass URB to device to enable button and controller events 
 ensure initialization is finished 
 output 
 input 
 sanity checks of EPs before actually submitting 
 usb_kill_urb not necessary, urb is aborted automatically 
 make sure that userspace cannot create new requests 
 SPDX-License-Identifier: GPL-2.0-or-later
  Linux driver for M2Tech hiFace compatible devices
  Copyright 2012-2013 (C) M2TECH S.r.l and Amarula Solutions B.V.
  Authors:  Michael Trimarchi <michael@amarulasolutions.com>
            Antonio Ospite <ao2@amarulasolutions.com>
  The driver is based on the work done in TerraTec DMX 6Fire USB
 Index 0-max 
 Id for card 
 Enable this card 
 if we are here, card can be registered in alsa. 
 check whether the card is already registered 
 Make sure that the userspace cannot create new request 
 SPDX-License-Identifier: GPL-2.0-or-later
  Linux driver for M2Tech hiFace compatible devices
  Copyright 2012-2013 (C) M2TECH S.r.l and Amarula Solutions B.V.
  Authors:  Michael Trimarchi <michael@amarulasolutions.com>
            Antonio Ospite <ao2@amarulasolutions.com>
  The driver is based on the work done in TerraTec DMX 6Fire USB
 current position in alsa dma_area 
 current position in current period 
 pcm streaming states 
 no pcm streaming 
 pcm streaming requested, waiting to become ready 
 pcm streaming running 
 if set driver won't do anymore pcm on device 
 one of STREAM_XXX 
 changes in hiface_pcm_open to support extra rates 
 message values used to change the sample rate 
	 We are already sure that the rate is supported here thanks to
	  ALSA constraints
	
	  USBIO: Vendor 0xb0(wValue=0x0043, wIndex=0x0000)
	  43 b0 43 00 00 00 00 00
	  USBIO: Vendor 0xb0(wValue=0x004b, wIndex=0x0000)
	  43 b0 4b 00 00 00 00 00
	  This control message doesn't have any ack from the
	  other side
 call with stream_mutex locked 
 call with stream_mutex locked 
 reset panic state when starting a new stream 
 submit our out urbs zero init 
 wait for first out urb to return (sent in in urb handler) 
 The hardware wants word-swapped 32-bit values 
 call with substream locked 
 returns true if a period elapsed 
 wrap around at end of ring buffer 
 unlinked 
 device removed 
 unlinked 
 device disabled 
 now send our playback data (if a free out urb was found) 
 explicit constraints needed as we added SNDRV_PCM_RATE_KNOT 
 deactivate substream 
 SPDX-License-Identifier: GPL-2.0-only
  Driver for AMD7930 sound chips found on Sparcs.
  Copyright (C) 2002, 2008 David S. Miller <davem@davemloft.net>
  Based entirely upon driverssbusaudioamd7930.c which is:
  Copyright (C) 1996,1997 Thomas K. Dyas (tdyas@eden.rutgers.edu)
  --- Notes from Thomas's original driver ---
  This is the lowlevel driver for the AMD7930 audio chip found on all
  sun4c machines and some sun4m machines.
  The amd7930 is actually an ISDN chip which has a very simple
  integrated audio encoderdecoder. When Sun decided on what chip to
  use for audio, they had the brilliant idea of using the amd7930 and
  only connecting the audio encoderdecoder pins.
  Thanks to the AMD engineer who was able to get us the AMD79C30
  databook which has all the programming information and gain tables.
  Advanced Micro Devices' Am79C30A is an ISDNaudio chip used in the
  SparcStation 1+.  The chip provides microphone and speaker interfaces
  which provide mono-channel audio at 8K samples per second via either
  8-bit A-law or 8-bit mu-law encoding.  Also, the chip features an
  ISDN BRI Line Interface Unit (LIU), I.430 ST physical interface,
  which performs basic D channel LAPD processing and provides raw
  B channel data.  The digital audio channel, the two ISDN B channels,
  and two 64 Kbps channels to the microprocessor are all interconnected
  via a multiplexer.
  --- End of notes from Thoamas's original driver ---
 Index 0-MAX 
 ID for this card 
 Enable this card 
 Device register layout.  
 Register interface presented to the CPU by the amd7930. 
 Command Register (W) 
 Interrupt Register (R) 
 Data Register (RW) 
 D-channel Status Register 1 (R) 
 D-channel Error Register (R) 
 D-channel Transmit Buffer (W) 
 D-channel Receive Buffer (R) 
 Bb-channel Transmit Buffer (W) 
 Bb-channel Receive Buffer (R) 
 Bc-channel Transmit Buffer (W) 
 Bc-channel Receive Buffer (R) 
 D-channel Status Register 2 (R) 
 Indirect registers in the Main Audio Processor. 
 After an amd7930 interrupt, reading the Interrupt Register (ir)
  clears the interrupt and returns a bitmask indicating which
  interrupt source(s) require service.
 D-channel xmit threshold 
 D-channel recv threshold 
 D-channel packet status 
 D-channel error 
 B-channel data xfer 
 LIU status 
 D-channel buffer status 
 multiframe or PP 
 The amd7930 has "indirect registers" which are accessed by writing
  the register number into the Command Register and then reading or
  writing values from the Data Register as appropriate. We define the
  AMR_ macros to be the indirect register numbers and AM_ macros to
  be bits in whatever register is referred to.
 Initialization 
 Line Interface Unit 
 Multiplexor 
 Main Audio Processor 
 Data Link Controller 
 Peripheral Port 
 PlaybackCapture buffer state. 
 Idle the AMD7930 chip.  The amd->lock is not held.  
 Enable chip interrupts.  The amd->lock is not held.  
 Disable chip interrupts.  The amd->lock is not held.  
 Commit amd7930_map settings to the hardware.
  The amd->lock is held and local interrupts are disabled.
 gx, gr & stg gains.  this table must contain 256 elements with
  the 0th being "infinity" (the magic value 9008).  The remaining
  elements match sun's gain curve (but with higher resolution):
  -18 to 0dB in .16dB steps then 0 to 12dB in .08dB steps.
 5. dB 
 5.5 dB 
 6. dB 
 6.5 dB 
 7. dB 
 7.5 dB 
 8. dB 
 8.5 dB 
 9. dB 
 9.5 dB 
 10. dB 
 10.5 dB 
 11. dB 
 11.5 dB 
 12. dB 
 13. dB 
 14. dB 
 15. dB 
 15.9 dB 
 16.9 dB 
 18. dB 
 Update amd7930_map settings and program them into the hardware.
  The amd->lock is held and local interrupts are disabled.
 Enable B channel interrupts.  
 Disable B channel interrupts.  
 Setup the pseudo-dma transfer pointers.  
 Put the chip into the correct encoding format.  
 Setup the pseudo-dma transfer pointers.  
 Put the chip into the correct encoding format.  
 Playback and capture have identical properties.  
 ID              "sun_amd7930",
 device          0,
 playback count  1,
 capture count   1, &pcm)) < 0)
 Always MUX audio (Ba) to channel Bb. 
 SPDX-License-Identifier: GPL-2.0-only
  Driver for CS4231 sound chips found on Sparcs.
  Copyright (C) 2002, 2008 David S. Miller <davem@davemloft.net>
  Based entirely upon driverssbusaudiocs4231.c which is:
  Copyright (C) 1996, 1997, 1998 Derrick J Brashear (shadow@andrew.cmu.edu)
  and also soundisacs423xcs4231_lib.c which is:
  Copyright (c) by Jaroslav Kysela <perex@perex.cz>
 Index 0-MAX 
 ID for this card 
 Enable this card 
 DMA access lock 
 registers access lock 
 registers image 
 mutex for mce register 
 mutex for ALSA openclose 
 Eventually we can use soundisacs423xcs4231_lib.c directly, but for
  now....  -DaveM
 IO ports 
 XXX offsets are different than PC ISA chips... 
 SBUS DMA register defines.  
 APC DMA CSR 
 APC Capture DMA Address 
 APC Capture Count 
 APC Capture DMA Next Address 
 APC Capture Next Count 
 APC Play DMA Address 
 APC Play Count 
 APC Play DMA Next Address 
 APC Play Next Count 
 Defines for SBUS DMA-routines 
 APC DMA Address 
 APC Count 
 APC DMA Next Address 
 APC Next Count 
 Play registers start at 0x30 
 Record registers start at 0x20 
 APCCSR bits 
 Interrupt Pending 
 Playback interrupt 
 Capture interrupt 
 General interrupt 
 General ext int. enable 
 Playback ext intr 
 Capture ext intr 
 Error ext intr 
 Pipe empty interrupt (0 write to pva) 
 Play pipe empty (pva and pnva not set) 
 Playback NVA dirty 
 play pipe empty Int enable 
 Cap data dropped on floor 
 Capture NVA dirty 
 Capture pipe empty (cva and cnva not set) 
 Cap. pipe empty int enable 
 Pause the play DMA 
 Pause the capture DMA 
 CODEC RESET 
 Play DMA Go 
 Capture DMA Go 
 Reset the chip 
 EBUS DMA register offsets  
 ControlStatus 
 DMA Address 
 DMA Count 
   Some variables
 5510 	0x00 | CS4231_XTAL2,
 6620 	0x0E | CS4231_XTAL2,
 8000 	0x00 | CS4231_XTAL1,
 9600 	0x0E | CS4231_XTAL1,
 11025 	0x02 | CS4231_XTAL2,
 16000 	0x02 | CS4231_XTAL1,
 18900 	0x04 | CS4231_XTAL2,
 22050 	0x06 | CS4231_XTAL2,
 27042 	0x04 | CS4231_XTAL1,
 32000 	0x06 | CS4231_XTAL1,
 33075 	0x0C | CS4231_XTAL2,
 37800 	0x08 | CS4231_XTAL2,
 44100 	0x0A | CS4231_XTAL2,
 48000 	0x0C | CS4231_XTAL1
 0000 - lic 
 0101 - ric 
 0202 - la1ic 
 0303 - ra1ic 
 0404 - la2ic 
 0505 - ra2ic 
 0606 - loc 
 0707 - roc 
 0808 - pdfr 
 0909 - ic 
 0a10 - pc 
 0b11 - ti 
 0c12 - mi 
 0d13 - lbc 
 0e14 - pbru 
 0f15 - pbrl 
 1016 - afei 
 1117 - afeii 
 1218 - llic 
 1319 - rlic 
 1420 - tlb 
 1521 - thb 
 1622 - la3micreserved 
 1723 - ra3micreserved 
 1824 - afs 
 1925 - lamocversion 
 1a26 - mioc 
 1b27 - ramocreserved 
 1c28 - cdfr 
 1d29 - res4 
 1e30 - cbru 
 1f31 - cbrl 
   Basic IO functions
   CS4231 detection  MCE routines
 looks like this sequence is proper for CS4231A chip (GUS MAX) 
 end of cleanup sequence 
	
	  Wait for auto-calibration (AC) process to finish, i.e. ACI to go low.
   CODEC IO
   Timer interface
 ok. now enable and ack CODEC IRQ 
 clear IRQ 
 clear IRQ 
 disable IRQ 
 clear IRQ 
 clear IRQ 
 now disable record & playback 
 clear IRQ again 
 clear IRQ 
 clear IRQ 
   timer openclose
   ok.. exported functions..
 detect overrange only above 0dB; may be user selectable? 
 this is valid value 
 no valid device found 
 clear any pendings IRQ 
 ok.. fill all CS4231 registers 
 all things are ok.. 
 XXX We can do some power-management, in particular on EBUS using
  XXX the audio AUXIO register...
 global setup 
 Timer initialization 
   MIXER part
 SPARC specific uses of XCTL{0,1} general purpose outputs.  
This is IRQ is not raised by the cs4231
 ACK the APC interrupt. 
 ACK the CS4231 interrupt. 
  SBUS DMA routines
  Init and exit routines
  EBUS DMA wrappers
  Init and exit routines
 SPDX-License-Identifier: GPL-2.0-only
  Driver for DBRI sound chip found on Sparcs.
  Copyright (C) 2004, 2005 Martin Habets (mhabets@users.sourceforge.net)
  Converted to ring buffered version by Krzysztof Helt (krzysztof.h1@wp.pl)
  Based entirely upon driverssbusaudiodbri.c which is:
  Copyright (C) 1997 Rudolf Koenig (rfkoenig@immd4.informatik.uni-erlangen.de)
  Copyright (C) 1998, 1999 Brent Baccala (baccala@freesoft.org)
  This is the low level driver for the DBRI & MMCODEC duo used for ISDN & AUDIO
  on Sun SPARCStation 10, 20, LX and Voyager models.
  - DBRI: AT&T T5900FX Dual Basic Rates ISDN Interface. It is a 32 channel
    data time multiplexer with ISDN support (aka T7259)
    Interfaces: SBus,ISDN NT & TE, CHI, 4 bits parallel.
    CHI: (spelled ki) Concentration Highway Interface (AT&T or Intel bus ?).
    Documentation:
    - "STP 4000SBus Dual Basic Rate ISDN (DBRI) Transceiver" from
      Sparc Technology Business (courtesy of Sun Support)
    - Data sheet of the T7903, a newer but very similar ISA bus equivalent
      available from the Lucent (formerly AT&T microelectronics) home
      page.
    - https:www.freesoft.orgLinuxDBRI
  - MMCODEC: Crystal Semiconductor CS4215 16 bit Multimedia Audio Codec
    Interfaces: CHI, Audio In & Out, 2 bits parallel
    Documentation: from the Crystal Semiconductor home page.
  The DBRI is a 32 pipe machine, each pipe can transfer some bits between
  memory and a serial device (long pipes, no. 0-15) or between two serial
  devices (short pipes, no. 16-31), or simply send a fixed data to a serial
  device (short pipes).
  A timeslot defines the bit-offset and no. of bits read from a serial device.
  The timeslots are linked to 6 circular lists, one for each direction for
  each serial device (NT,TE,CHI). A timeslot is associated to 1 or 2 pipes
  (the second one is a monitortee pipe, valid only for serial input).
  The mmcodec is connected via the CHI bus and needs the data & some
  parameters (volume, output selection) time multiplexed in 8 byte
  chunks. It also has a control mode, which serves for audio format setting.
  Looking at the CS4215 data sheet it is easy to set up 2 or 4 codecs on
  the same CHI bus, so I thought perhaps it is possible to use the on-board
  & the speakerbox codec simultaneously, giving 2 (not very independent :-)
  audio devices. But the SUN HW group decided against it, at least on my
  LX the speakerbox connector has at least 1 pin missing and 1 wrongly
  connected.
  I've tried to stick to the following function naming conventions:
  snd_	ALSA stuff
  cs4215_	CS4215 codec specific stuff
  dbri_	DBRI high-level stuff
  other	DBRI low-level stuff
 Index 0-MAX 
 ID for this card 
 Enable this card 
 DBRI_DEBUG 
	CS4215 specific definitions and structures
 Data mode: Time slots 5-8 
 Ctrl mode: Time slots 1-4 
 Bit offset from frame sync to time slot 1 
 In bits, either 8 or 16 
 1 or 2 
  Control mode first
 Time Slot 1, Status register 
 Control Latch Bit 
 1: line: 2.0V, speaker 4V 
 0: line: 2.8V, speaker 8V 
 1: Microphone: 20dB gain disabled 
 Time Slot 2, Data Format Register 
 Actually 24428.57 
 {    NA, (1 << 4), (4 << 3) }, 
 {    NA, (1 << 4), (5 << 3) }, 
 Actually 5512.5 
 High Pass Filter, 1: Enabled 
 Mask off reserved bits in slot 1 & 2 
 Time Slot 3, Serial Port Control register 
 0: Enable serial output 
 1: Master mode: Generate SCLK 
 Bitrate: 64 bits per frame 
 Master clock 
 24.576 MHz clock source 
 16.9344 MHz clock source 
 Clockin, 256 x Fs 
 Clockin, see DFR 
 Time Slot 4, Test Register 
 0:Digital-Dig loop, 1:Dig-Analog-Dig loop 
 Enable Loopback Testing 
 Time Slot 5, Parallel Port Register 
 Read only here and the same as the in data mode 
 Time Slot 6, Reserved  
 Time Slot 7, Version Register  
 Known versions 0C, 1D, 2E 
 Time Slot 8, Reserved  
  Data mode
 Time Slot 1-2: Left Channel Data, 2-3: Right Channel Data  
 Time Slot 5, Output Setting  
 Left Output Attenuation 0x3f: -94.5 dB 
 Line Out Enable 
 Headphone Enable 
 Time Slot 6, Output Setting  
 Right Output Attenuation 0x3f: -94.5 dB 
 Speaker Enable 
 AD Data Invalid: Busy in calibration 
 Time Slot 7, Input Setting 
 Left Gain Setting 0xf: 22.5 dB 
 Input Select: 1=Microphone, 0=Line 
 1: Over range condition occurred 
 Parallel IO 0 
 Time Slot 8, Input Setting 
 Right Gain Setting 0xf: 22.5 dB 
 Monitor Path Attenuation 0xf: mute 
		DBRI specific definitions and structures
 DBRI main registers 
 Status and Control 
 Mode and Interrupt 
 Parallel IO 
 Test 
 Command Queue Pointer 
 Interrupt Queue Pointer 
 One transmitreceive descriptor 
 When ba != 0 descriptor is used 
 TransmitReceive Buffer Address 
 Next Descriptor Address 
 This structure is in a DMA region where it can accessed by both
  the CPU and the DBRI
 Place for commands 
 Interrupt field  
 Xmitreceive descriptors 
 SDP command word 
 Next pipe in linked list 
 Length of timeslot (bits) 
 Index of first descriptor 
 Index of active descriptor 
 Ptr to receive fixed data 
 Per stream (playback or record) information 
 Device view of ALSA DMA buffer 
 Size of DMA buffer             
 offset in user buffer          
 Data pipe used                 
 mixer elements                 
 This structure holds the information for both chips (DBRI & CS4215) 
 Needed for unload 
 OF device info 
 Pointer to our DMA block 
 DBRI visible DMA address 
 dbri HW regs 
 intr queue pointer 
 DBRI's 32 data pipes 
 Index of next desc, or -1 
 Protects cmd queue accesses 
 Pointer to the last queued cmd 
 mmcodec special info 
 per stream (playbackrecord) info 
 Output volume 
 Input gain 
 DBRI Reg0 - Status Control Register - defines. (Page 17) 
 Program command & queue pointer valid 
 Allow 4-Word SBus Burst 
 Allow 16-Word SBus Burst 
 Allow 8-Word SBus Burst 
 Sanity Timer Disable 
 Permit activation of the TE interface 
 Permit activation of the NT interface 
 Permit activation of the CHI interface 
 Force Sanity Timer Time-Out 
 Disable Master Mode 
 Halt for Analysis 
 Soft Reset 
 DBRI Reg1 - Mode and Interrupt Register - defines. (Page 18) 
 Byte Order 
 Byte Order 
 Multiple Error Ack on SBus (read only) 
 Multiple Late Error on SBus (read only) 
 Lost Bus Grant on SBus (read only) 
 Burst Error on SBus (read only) 
 Interrupt Indicator (read only) 
 DBRI Reg2 - Parallel IO Register - defines. (Page 18) 
 Enable Pin 3 
 Enable Pin 2 
 Enable Pin 1 
 Enable Pin 0 
 Enable all the pins 
 Pin 3: 1: Data mode, 0: Ctrl mode 
 Pin 2: 1: Onboard PDN 
 Pin 1: 0: Reset 
 Pin 0: 1: Speakerbox PDN 
 DBRI Commands (Page 20) 
 Stop execution 
 Flush long pipes 
 New command queue 
 Initialize Interrupt Queue 
 Report command execution via interrupt 
 Setup Data Pipe 
 Continue Data Pipe (reread NULL Pointer) 
 Define Time Slot 
 Set short Data Pipe 
 Set CHI Global Mode 
 NT Command 
 TE Command 
 Codec setup 
 No comment 
 CHI Data mode command 
 Special bits for some commands 
 Pipe No.: 0-15 long, 16-21 short 
 Setup Data Pipe 
 IRM 
 Report 2nd time in a row value received 
 Report any changes 
 Report any changes 
 EOL interrupt enable 
 HDLC idle interrupt enable 
 Pipe data MODE 
 Tofrom memory 
 D Channel (prio control) 
 Serial to serial 
 Short only 
 Direction 
 Direction 
 Bit order within Byte 
 Bit order within Byte 
 Pointer Valid 
 Abort 
 Clear 
 Define Time Slot 
 Valid Input Time-Slot Descriptor 
 Valid Output Time-Slot Descriptor 
 Insert Time Slot 
 Delete Time Slot 
 Previous In Pipe 
 Previous Out Pipe 
 Time Slot defines 
 Number of bits in this time slot 
 Bit Count at start of TS 
 Data Invert 
 Single Channel  Normal mode 
 Monitor pipe 
 Non contiguous mode 
 Starting short pipes 
 Monitor Pipe 
 Pipe no.: 0-15 long, 16-21 short 
 Concentration Highway Interface Modes 
 Clock mode 
 Immediate Interrupt Report 
 CHIL Interrupt enabled 
 Open Drain Enable 
 Sample CHIFS on Rising Frame Edge 
 Frame Drive 
 Bits per Frame 
 NT: These are here for completeness 
 Frame Bit 
 Number of bad frames to loose framing 
 Interrupt Report & Mask: Immediate 
 Interrupt Report & Mask: Enable 
 Configure interface as NT 
 Fixed Timing 
 Echo Channel is Zeros 
 Inhibit Final Activation 
 Activate Interface 
 Multiframe Enable 
 Remote Loopback 
 Local Loopback 
 Force Activation 
 Activate Bipolar Violation 
 Codec Setup 
 Clock Select 
 FSCOD Falling Edge Delay 
 FSCOD Rising Edge Delay 
 Test 
 RAM Pointer 
 Toggle ROM opcode monitor onoff 
 Microprocessor test 
 Serial-Controller test 
 Copy from Ram to system memory 
 Copy into Ram from system memory 
 RAM Built-In Self Test 
 Microcontroller Built-In Self Test 
 ROM Dump 
 CHI Data Mode 
 Transmit Data on CHIDR Pin 
 Receive Data on CHIDX Pin 
 Receive on Rising Edge of CHICK 
 Transmit Data on Rising Edge of CHICK 
 Transmit Highway Enable 
 Receive Highway Enable 
 The Interrupts 
 Buffer Ready for processing 
 Marked Interrupt in RDTD 
 Flag to idle transition detected (HDLC) 
 Idle to flag transition detected (HDLC) 
 End of List 
 Command has bean read 
 Transmission of frame complete 
 BRI status change info 
 Fixed data change 
 CHI lost frame sync (channel 36 only) 
 Unrecoverable D-Channel collision 
 Dropped by frame slip 
 Repeated by frame slip 
 Lost Interrupt 
 DMA underrun 
 TE receive anchor 
 TE transmit anchor 
 NT transmit anchor 
 NT receive anchor 
 CHI send data 
 CHI receive data 
 CHI anchor pipe 
 CHI send 
 CHI receive 
 CHI receive 
 CHI receive 
 Transmit descriptor defines 
 End of Frame 
 Do not append CRC 
 Number of valid bytes in the buffer 
 Final interrupt 
 Marker interrupt 
 Transmit Idle Characters 
 Flag Count 
 Underrun: transmitter is out of data 
 Abort: frame aborted 
 Transmit buffer Complete 
 Transmit status 
 Maximum buffer size per TD: almost 8KB 
 Receive descriptor defines 
 End of Frame 
 Completed buffer 
 Final interrupt 
 Marker interrupt 
 Buffer size 
 0: CRC is correct 
 1: Bad Byte received 
 Abort: frame aborted 
 Overrun: data lost 
 Receive status 
 Valid bytes in the buffer 
 stream_info[] access 
 Translate the ALSA direction into the array index 
 Return a pointer to dbri_streaminfo 
  Short data pipes transmit LSB first. The CS4215 receives MSB first. Grrr.
  So we have to reverse the bits. Note: not all bit lengths are supported
 DBRI initialization and command synchronization 
Commands are sent to the DBRI by building a list of them in memory,
then writing the address of the first list item to DBRI register 8.
The list is terminated with a WAIT command, which generates a
CPU interrupt to signal completion.
Since the DBRI can run in parallel with the CPU, several means of
synchronization present themselves. The method implemented here uses
the dbri_cmdwait() to wait for execution of batch of sent commands.
A circular command buffer is used here. A new command is being added
while another can be executed. The scheme works by adding two WAIT commands
after each sent batch of commands. When the next batch is prepared it is
added after the WAIT commands then the WAITs are replaced with single JUMP
command to the new batch. Then the DBRI is forced to reread the last WAIT
command (replaced by the JUMP by then). If the DBRI is still executing
previous commands the request to reread the WAIT command is ignored.
Every time a routine wants to write commands to the DBRI, it must
first call dbri_cmdlock() and get pointer to a free space in
dbri->dma->cmd buffer. After this, the commands can be written to
the buffer, and dbri_cmdsend() is called with the final pointer value
to send them to the DBRI.
  Wait for the current command string to execute
 Delay if previous commands are still being processed 
  Lock the command queue and return pointer to space for len cmd words
  It locks the cmdlock spinlock.
 Space for 2 WAIT cmds (replaced later by 1 JUMP cmd) 
  Send prepared cmd string. It works by writing a JUMP cmd into
  the last WAIT cmd and force DBRI to reread the cmd.
  The JUMP cmd points to the new cmd string.
  It also releases the cmdlock spinlock.
  Lock must be held before calling this.
 restrict it to a 16 bit counter. 
 Replace the last command with JUMP 
 Reread the last command 
 Lock must be held when calling this 
 Soft Reset 
	 A brute approach - DBRI falls back to working burst size by itself
 Lock must not be held before calling this 
 Initialize pipes 
	
	  Initialize the interrupt ring buffer.
	
	  Set up the interrupt queue
 DBRI data pipe management 
While DBRI control functions use the command and interrupt buffers, the
main data path takes the form of data pipes, which can be short (command
and interrupt driven), or long (attached to DMA buffers).  These functions
provide a rudimentary means of setting up and managing the DBRI's pipes,
but the calling functions have to make sure they respect the pipes' linked
list ordering, among other things.  The transmit and receive functions
here interface closely with the transmit and receive interrupt code.
 reset_pipe(dbri, pipe)
  Called on an in-use pipe to clear anything being transmitted or received
  Lock must be held before calling this.
  Lock must be held before calling this.
 sdp &= 0xf800; 
	 If this is a fixed receive pipe, arrange for an interrupt
	  every time its data changes
  Lock must be held before calling this.
		 Deal with CHI special case:
		  "If transmission on edges 0 or 1 is desired, then cycle n
		   (where n = # of bit times per frame...) must be used."
		                   - DBRI data sheet, page 11
  Lock must be held before calling this.
 xmit_fixed()  recv_fixed()
  Transmitreceive data on a "fixed" pipe - i.e, one whose contents are not
  expected to change much, and which we don't need to buffer.
  The DBRI only interrupts us when the data changes (receive pipes),
  or only changes the data when this function is called (transmit pipes).
  Only short pipes (numbers 16-31) can be used in fixed data mode.
  These function operate on a 32-bit field, no matter how large
  the actual time slot is.  The interrupt handler takes care of bit
  ordering and alignment.  An 8-bit time slot will always end up
  in the low-order 8 bits, filled either MSB-first or LSB-first,
  depending on the settings passed to setup_pipe().
  Lock must not be held before calling it.
 DBRI short pipes always transmit LSB first 
 setup_descs()
  Setup transmitreceive data on a "long" pipe - i.e, one associated
  with a DMA buffer.
  Only pipe numbers 0-15 can be used in this mode.
  This function takes a stream number pointing to a data buffer,
  and work by building chains of descriptors which identify the
  data buffers.  Buffers too large for a single descriptor will
  be spread across multiple descriptors.
  All descriptors create a ring buffer.
  Lock must be held before calling this.
		 Should be able to queue multiple buffers
		  to receive on a pipe
 Make sure buffer size is multiple of four 
 Free descriptors if pipe has any 
 8KB - 4 
 DBRI - CHI interface 
The CHI is a four-wire (clock, frame sync, data in, data out) time-division
multiplexed serial interface which the DBRI can operate in either master
(give clockframe sync) or slave (take clockframe sync) mode.
  Lock must not be held before calling it.
 Set CHI Anchor: Pipe 16 
		 Setup DBRI for CHI Slave - receive clock, frame sync (FS)
		 
		  CHICM  = 0 (slave mode, 8 kHz frame rate)
		  IR     = give immediate CHI status interrupt
		  EN     = give CHI status interrupt upon change
		 Setup DBRI for CHI Master - generate clock, FS
		 
		  BPF				=  bits per 8 kHz frame
		  12.288 MHz  CHICM_divisor	= clock rate
		  FD = 1 - drive CHIFS on rising edge of CHICK
	 CHI Data Mode
	 
	  RCE   =  0 - receive on falling edge of CHICK
	  XCE   =  1 - transmit on rising edge of CHICK
	  XEN   =  1 - enable transmitter
	  REN   =  1 - enable receiver
 CS4215 audio codec management 
In the standard SPARC audio configuration, the CS4215 codec is attached
to the DBRI via the CHI interface and few of the DBRI's PIO pins.
  Lock must not be held before calling it.
	
	  Data mode:
	  Pipe  4: Send timeslots 1-4 (audio data)
	  Pipe 20: Send timeslots 5-8 (part of ctrl data)
	  Pipe  6: Receive timeslots 1-4 (audio data)
	  Pipe 21: Receive timeslots 6-7. We can only receive 20 bits via
	           interrupt, and the rest of the data (slot 5 and 8) is
	           not relevant for us (only for doublechecking).
	 
	  Control mode:
	  Pipe 17: Send timeslots 1-4 (slots 5-8 are read only)
	  Pipe 18: Receive timeslot 1 (clb).
	  Pipe 19: Receive timeslot 7 (version).
	
	  No action, memory resetting only.
	 
	  Data Time Slot 5-8
	  Speaker,Line and Headphone enable. Gain set to the half.
	  Input is mike.
	
	  Control Time Slot 1-4
	  0: Default IO voltage scale
	  1: 8 bit ulaw, 8kHz, mono, high pass filter disabled
	  2: Serial enable, CHI master, 128 bits per frame, clock 1
	  3: Tests disabled
 For ULAW 
 Start by setting the playback attenuation. 
 Reset the volume bits 
 Now set the recording gain. 
  Set the CS4215 to data mode.
	 Temporarily mute outputs, and wait 18000 sec (125 us)
	  to make sure this takes.  This avoids clicking noises.
	
	  Data mode:
	  Pipe  4: Send timeslots 1-4 (audio data)
	  Pipe 20: Send timeslots 5-8 (part of ctrl data)
	  Pipe  6: Receive timeslots 1-4 (audio data)
	  Pipe 21: Receive timeslots 6-7. We can only receive 20 bits via
	           interrupt, and the rest of the data (slot 5 and 8) is
	           not relevant for us (only for doublechecking).
	 
	  Just like in control mode, the time slots are all offset by eight
	  bits.  The CS4215, it seems, observes TSIN (the delayed signal)
	  even if it's the CHI master.  Don't ask me...
 Disable CHI 
 Switch CS4215 to data mode - set PIO3 to 1 
	 Note: this next doesn't work for 8-bit stereo, because the two
	  channels would be on timeslots 1 and 3, with 2 and 4 idle.
	  (See CS4215 datasheet Fig 15)
	 
	  DBRI non-contiguous mode would be required to make this work.
 FIXME: enable CHI after _setdata? 
 Enable CHI 
  Send the control information (i.e. audio format)
 FIXME - let the CPU do something useful during these delays 
	 Temporarily mute outputs, and wait 18000 sec (125 us)
	  to make sure this takes.  This avoids clicking noises.
	
	  Enable Control mode: Set DBRI's PIO3 (4215's D~C) to 0, then wait
	  12 cycles <= 12(5512.564) sec = 34.01 usec
	 In Control mode, the CS4215 is a slave device, so the DBRI must
	  operate as CHI master, supplying clocking and frame synchronization.
	 
	  In Data mode, however, the CS4215 must be CHI master to insure
	  that its data stream is synchronous with its codec.
	 
	  The upshot of all this?  We start by putting the DBRI into master
	  mode, program the CS4215 in Control mode, then switch the CS4215
	  into Data mode and put the DBRI into slave mode.  Various timing
	  requirements must be observed along the way.
	 
	  Oh, and one more thing, on a SPARCStation 20 (and maybe
	  others?), the addressing of the CS4215's time slots is
	  offset by eight bits, so we add eight to all the "cycle"
	  values in the Define Time Slot (DTS) commands.  This is
	  done in hardware by a TI 248 that delays the DBRI->4215
	  frame sync signal by eight clock cycles.  Anybody know why?
 Disable CHI 
	
	  Control mode:
	  Pipe 17: Send timeslots 1-4 (slots 5-8 are read only)
	  Pipe 18: Receive timeslot 1 (clb).
	  Pipe 19: Receive timeslot 7 (version).
 Wait for the chip to echo back CLB (Control Latch Bit) as zero 
 Enable CHI 
	 Disable changes to our copy of the version number, as we are about
	  to leave control mode.
	 Terminate CS4215 control mode - data sheet says
	  "Set CLB=1 and send two more frames of valid control info"
 Two frames of control info @ 8kHz frame rate = 250 us delay 
  Setup the codec with the sampling rate, audio format and number of
  channels.
  As part of the process we resend the settings for the data
  timeslots as well.
 Lookup index for this rate 
 Add rate parameters 
 set codec to data mode 
 Look for the cs4215 chips 
 Enable capture of the status & version timeslots. 
 DBRI interrupt handler 
The DBRI communicates with the CPU mainly via a circular interrupt
buffer.  When an interrupt is signaled, the CPU walks through the
buffer and calls dbri_process_one_interrupt() for each interrupt word.
Complicated interrupts are handled by dedicated functions (which
appear first in this file).  Any pending interrupts can be serviced by
calling dbri_process_interrupt_buffer(), which works even if the CPU's
interrupts are disabled.
 xmit_descs()
  Starts transmitting the current TD's for recordingplaying.
  For playback, ALSA has filled the DMA memory with new data (we hope).
 Disabled 
 Stream could be closed by the time we run. 
 Reset our admin of the pipe. 
 Stream could be closed by the time we run. 
 Reset our admin of the pipe. 
 transmission_complete_intr()
  Called by main interrupt handler when DBRI signals transmission complete
  on a pipe (interrupt triggered by the B bit in a transmit descriptor).
  Walks through the pipe's list of transmit buffer descriptors and marks
  them as available. Stops when the first descriptor is found without
  TBC (Transmit Buffer Complete) set, or we've run through them all.
  The DMA buffers are not released. They form a ring buffer and
  they are filled by ALSA while others are transmitted by DMA.
 Reset it for next time. 
 Notify ALSA 
 Reset it for next time. 
 FIXME: Check status 
 Notify ALSA 
		 UNDR - Transmission underrun
		  resend SDP command with clear pipe bit (C) set
 FIXME: do something useful in case of underrun 
 FXDT - Fixed data change 
 dbri_process_interrupt_buffer advances through the DBRI's interrupt
  buffer until it finds a zero word (indicating nothing more to do
  right now).  Non-zero words require processing and are handed off
  to dbri_process_one_interrupt AFTER advancing the pointer.
	
	  Read it, so the interrupt goes away.
		 Some of these SBus errors cause the chip's SBus circuitry
		  to be disabled, so just re-enable and try to keep going.
		 
		  The only one I've seen is MRR, which will be triggered
		  if you let a transmit pipe underrun, then try to CDP it.
		 
		  If these things persist, we reset the chip.
		PCM Interface
 set sampling rate, audio format and number of channels 
	 hw_params can get called multiple times. Only map the DMA once.
	 hw_free can get called multiple times. Only unmap the DMA once.
 Send pipe 
 Receive pipe 
	 Setup the all the transmitreceive descriptors to cover the
	  whole DMA buffer.
 Re-submit the TDs. 
 ID 	    "sun_dbri",
 device 	    0,
 playback count  1,
 capture count   1, &pcm);
			Mixer interface
		 First mute outputs, and wait 18000 sec (125 us)
		  to make sure this takes.  This avoids clicking noises.
		 First mute outputs, and wait 18000 sec (125 us)
		  to make sure this takes.  This avoids clicking noises.
 Entries 0-3 map to the 4 data timeslots, entries 4-7 map to the 4 control
   timeslots. Shift is the bit offset in the timeslot, mask defines the
   number of bits. invert is a boolean for use with attenuation.
 FIXME: micline switch 
			proc interface
 Initialization 
 Map the registers into memory. 
 Do low level initialization of the DBRI and CS4215 chips 
 proc file handling 
 SPDX-License-Identifier: GPL-2.0-or-later
       MOTU Midi Timepiece ALSA Main routines
       Copyright by Michael T. Mayers (c) Jan 09, 2000
       mail: michael@tweakoz.com
       Thanks to John Galbraith
       This driver is for the 'Mark Of The Unicorn' (MOTU)
       MidiTimePiece AV multiport MIDI interface 
       IOPORTS
       -------
       8 MIDI Ins and 8 MIDI outs
       Video Sync In (BNC), Word Sync Out (BNC), 
       ADAT Sync Out (DB9)
       SMPTE inout (14")
       2 programmable pedalfootswitch inputs and 4 programmable MIDI controller knobs.
       Macintosh RS422 serial port
       RS422 "network" port for ganging multiple MTP's
       PC Parallel Port ( which this driver currently uses )
       MISC FEATURES
       -------------
       Hardware MIDI routing, merging, and filtering   
       MIDI Synchronization to Video, ADAT, SMPTE and other Clock sources
       128 'scene' memories, recallable from MIDI program change
  ChangeLog
  Jun 11 2001	Takashi Iwai <tiwai@suse.de>
       - Recoded & debugged
       - Added timer interrupt for midi outputs
       - hwports is between 1 and 8, which specifies the number of hardware ports.
         The three global ports, computer, adat and broadcast ports, are created
         always after hw and remote ports.
       globals
 io resources
 0x378, 0x278 
 7, 5 
 use hardware ports 1-8 
       defines
#define USE_FAKE_MTP 
 parallel port usage masks
 interrupt (for inputs) 
 number of accesses to input interrupts 
 number of accesses to timer interrupts 
 timer interrupts for outputs 
 number of hw ports (1-8) 
 all ports including computer, adat and bc 
 selected input midi port 
 during midi command 0xf5 
 selected output midi hw port 
  possible hardware ports (selected by 0xf5 port message)
       0x00		all ports
       0x01 .. 0x08    this MTP's ports 1..8
       0x09 .. 0x10    networked MTP's ports (9..16)
       0x11            networked MTP's computer port
       0x63            to ADAT
  mappig:
   subdevice 0 - (X-1)    ports
             X - (2X-1)  networked ports
             X            computer
             X+1          ADAT
             X+2          all ports
   where X = chip->num_ports
 invalid - use port 0 as default 
 single mtp port 
 remote port 
 computer port 
 ADAT 
 all ports 
 all ports 
 single port 
 remote port 
 computer port 
 ADAT 
 clear write bit
 set write bit
 call this with spin lock held 
 Get the outbyte first, so we can emulate running status if
 necessary
 send port change command if necessary
		
		snd_printk(KERN_DEBUG "new outport: 0x%x\n",
			   (unsigned int) portp->hwport);
 send data
       mtpav control
 put mtp into smart routing mode
 enable pport interrupts
 disable pport interrupts
  timer interrupt for outputs
 reprogram timer 
 process each port 
 spinlock held! 
 spinlock held! 
  midi interrupt for inputs
 real-time midi code 
 awaiting command
 MTP port #
 printk(KERN_DEBUG "snd_mtpav_read_bytes() sbyt: 0x%x\n", sbyt); 
  get ISA resources
  get RAWMIDI resources
 SPDX-License-Identifier: GPL-2.0-or-later
   Dummy soundcard
   Copyright (c) by Jaroslav Kysela <perex@perex.cz>
 defaults 
 Index 0-MAX 
 ID for this card 
static int midi_devs[SNDRV_CARDS] = {[0 ... (SNDRV_CARDS - 1)] = 2};
module_param_array(midi_devs, int, NULL, 0444);
MODULE_PARM_DESC(midi_devs, "MIDI devices # (0-2) for dummy driver.");
  card models
  system timer interface
 ops must be the first item 
 fractional sample position (based HZ) 
 buffer_size  HZ 
 period_size  HZ 
  hrtimer interface
 ops must be the first item 
	
	  In cases of XRUN and draining, this calls .trigger to stop PCM
	  substream.
 CONFIG_HIGH_RES_TIMERS 
  PCM interface
 runtime->dma_bytes has to be set manually to allow mmap 
  dummy buffer handling
 do nothing 
 do nothing 
 do nothing 
 the same page 
  mixer interface
  proc interface
 CONFIG_SND_DEBUG && CONFIG_SND_PROC_FS 
 SPDX-License-Identifier: GPL-2.0-or-later
    Driver for Midiman Portman2x4 parallel port midi interface
    Copyright (c) by Levent Guendogdu <levon@feature-it.com>
  ChangeLog
  Jan 24 2007 Matthias Koenig <mkoenig@suse.de>
       - cleanup and rewrite
  Sep 30 2004 Tobias Gehrig <tobias@gehrig.tk>
       - source code cleanup
  Sep 03 2004 Tobias Gehrig <tobias@gehrig.tk>
       - fixed compilation problem with alsa 1.0.6a (removed MODULE_CLASSES,
         MODULE_PARM_SYNTAX and changed MODULE_DEVICES to
         MODULE_SUPPORTED_DEVICE)
  Mar 24 2004 Tobias Gehrig <tobias@gehrig.tk>
       - added 2.6 kernel support
  Mar 18 2004 Tobias Gehrig <tobias@gehrig.tk>
       - added parport_unregister_driver to the startup routine if the driver fails to detect a portman
       - added support for all 4 output ports in portman_putmidi
  Mar 17 2004 Tobias Gehrig <tobias@gehrig.tk>
       - added checks for opened input device in interrupt handler
  Feb 20 2004 Tobias Gehrig <tobias@gehrig.tk>
       - ported from alsa 0.5 to 1.0
  Chip specific
 Init chip specific data 
  HW related constants
 Standard PC parallel port status register equates. 
 Busy status.  Inverted. 
 Acknowledge.  Non-Inverted. 
 Paper Out.    Non-Inverted. 
 Select.       Non-Inverted. 
 Error.        Non-Inverted. 
 Standard PC parallel port command register equates. 
 IRQ Enable.   Non-Inverted. 
 Select Input. Inverted. 
 Init Printer. Non-Inverted. 
 Auto Feed.    Inverted. 
 Strobe.       Inverted. 
 Parallel Port Command Register as implemented by PCP2x4. 
 Interrupt enable. 
 Command strobe. 
 The parallel port command register field (b1..b3) selects the 
  various "registers" within the PCP 2x4.  These are the internal
  address of these "registers" that must be written to the parallel
  port command register.
 PCP RxData channel 0. 
 PCP RxData channel 1. 
 PCP General Control Register. 
 PCP Sync Control Register. 
 PCP TxData channel 0. 
 PCP TxData channel 1. 
 PCP TxData channel 2. 
 PCP TxData channel 3. 
 Parallel Port Status Register as implemented by PCP2x4. 
 Echoed strobe. 
 Input data int request. 
 Interface Busy. 
 Parallel Port Status Register BUSY and SELECT lines are multiplexed
  between several functions.  Depending on which 2x4 "register" is
  currently selected (b1..b3), the BUSY and SELECT lines are
  assigned as follows:
    SELECT LINE:                                                    A3 A2 A1
                                                                    --------
 Rx Available, channel 0.   0 0 0 
  RXAVAIL1    PP_STAT_SEL              Rx Available, channel 1.   0 0 1 
 Reserved - Sync Status.    0 1 0 
                                       Reserved.                  0 1 1 
 Tx Empty, channel 0.       1 0 0 
      TXEMPTY1        PP_STAT_SEL      Tx Empty, channel 1.       1 0 1 
  TXEMPTY2    PP_STAT_SEL              Tx Empty, channel 2.       1 1 0 
  TXEMPTY3    PP_STAT_SEL              Tx Empty, channel 3.       1 1 1 
   BUSY LINE:                                                      A3 A2 A1
                                                                    --------
 Rx Input Data, channel 0.  0 0 0 
      RXDATA1         PP_STAT_BSY      Rx Input Data, channel 1.  0 0 1 
 Reserved - Sync Data.      0 1 0 
 Reserved.                  0 1 1 
 Parallel Port Data Echo.   1 0 0 
 Address 0 Echo.            1 0 1 
 Address 1 Echo.            1 1 0 
 Address 2 Echo.            1 1 1 
  Hardware specific functions
	 Get entering data byte and port number in BL and BH respectively.
	  Set up Tx Channel address field for use with PP Cmd Register.
	  Store address field in BH register.
	  Inputs:      AH = Output port number (0..3).
	               AL = Data byte.
	     command = TXDATA0 | INT_EN;
	  Align port num with address field (b1...b3),
	  set address for TXDatax, Strobe=0
	 Disable interrupts so that the process is not interrupted, then 
	  write the address associated with the current Tx channel to the 
	  PP Command Reg.  Do not set the Strobe signal yet.
		 While the address lines settle, write parallel output data to 
		  PP Data Reg.  This has no effect until Strobe signal is asserted.
		 If PCP channel's TxEmpty is set (TxEmpty is read through the PP
		  Status Register), then go write data.  Else go back and wait.
	 TxEmpty is set.  Maintain PCP destination address and assert
	  Strobe through the PP Command Reg.  This will Strobe data into
	  the PCP transmitter and set the PCP BUSY signal.
	 Wait for strobe line to settle and echo back through hardware.
	  Once it has echoed back, assume that the address and data lines
	  have settled!
 Release strobe and immediately re-allow interrupts. 
	 PCP BUSY is now set.  We must wait until BUSY resets itself.
	  We'll reenable ints while we're waiting.
 Data sent. 
   Read MIDI byte from port
   Attempt to read input byte from specified hardware input port (0..).
   Return -1 if no data
 Saved address+IE bit. 
 Make sure clocking edge is down before starting... 
 Make sure edge is down. 
 Set destination address to PCP. 
 Address + IE + No Strobe. 
 Wait for strobe echo. 
	 After the address lines settle, check multiplexed RxAvail signal.
	  If data is available, read it.
 No data. 
 Set the Strobe signal to enable the Rx clocking circuitry. 
 Write address+IE+Strobe. 
 Wait for strobe echo. 
 The first data bit (msb) is already sitting on the input line. 
 Cause rising edge, which shifts data. 
 Data bit 6. 
 Cause falling edge while data settles. 
 Cause rising edge, which shifts data. 
 Data bit 5. 
 Cause falling edge while data settles. 
 Cause rising edge, which shifts data. 
 Data bit 4. 
 Cause falling edge while data settles. 
 Cause rising edge, which shifts data. 
 Data bit 3. 
 Cause falling edge while data settles. 
 Cause rising edge, which shifts data. 
 Data bit 2. 
 Cause falling edge while data settles. 
 Cause rising edge, which shifts data. 
 Data bit 1. 
 Cause falling edge while data settles. 
 Cause rising edge, which shifts data. 
 Data bit 0. 
 Cause falling edge while data settles. 
 Cause rising edge, which shifts data. 
 Return data clock low. 
 De-assert Strobe and return data. 
 Output saved address+IE. 
 Wait for strobe echo. 
 Shift back and return value. 
   Checks if any input data on the given channel is available
   Checks RxAvail 
 Write hardware (assumme STROBE=0) 
 Check multiplexed RxAvail signal 
 Data available 
 No Data available 
   Flushes any input
 Local variable for counting things 
 Set address for specified channel in port and allow to settle. 
 Assert the Strobe and wait for echo back. 
 Wait for ESTB 
 Output clock cycles to the Rx circuitry. 
 Flush 250 bits... 
 Deassert the Strobe signal of the port and wait for it to settle. 
 Wait for settling 
	 Initialize the parallel port data register.  Will set Rx clocks
	  low in case we happen to be addressing the Rx ports at this time.
 1 
	 Initialize the parallel port command register, thus initializing
	  hardware handshake lines to midi box:
	 
	                                   Strobe = 0
	                                   Interrupt Enable = 0            
 2 
 Check if Portman PCP 2x4 is out there. 
 3 
 Write Strobe=0 to command reg. 
 Check for ESTB to be clear 
 4 
 CODE 1 - Strobe Failure. 
 Set for RXDATA0 where no damage will be done. 
 5 
 Write Strobe=1 to command reg. 
 6 
 CODE 1 - Strobe Failure. 
 7 
 Reset Strobe=0. 
	 Check if Tx circuitry is functioning properly.  If initialized 
	  unit TxEmpty is false, send out char and see if it goes true.
 8 
 Tx channel 0, strobe off. 
	 If PCP channel's TxEmpty is set (TxEmpty is read through the PP
	  Status Register), then go write data.  Else go back and wait.
 9 
 Return OK status. 
  Rawmidi
 Create and initialize the rawmidi component 
 register rawmidi ops 
 name substreams 
 output 
 input 
  parport stuff
 While any input data is waiting 
		 If data available on channel 0, 
 Read Midi 
 put midi into queue... 
		 If data available on channel 1, 
 Read Midi 
 put midi into queue... 
 Temporary assignment to forward the parport 
	 Since we dont get the return value of probe
 register device in global table 
 nothing to do here 
  platform stuff
 ISR 
 flags 
 private 
 port 
 name 
 callbacks 
 device number 
 claim parport 
 init device 
 At this point card will be usable 
  module init stuff
 SPDX-License-Identifier: GPL-2.0-or-later
   Dummy soundcard for virtual rawmidi devices
   Copyright (c) 2000 by Takashi Iwai <tiwai@suse.de>
  VIRTUAL RAW MIDI DEVICE CARDS
  This dummy card contains up to 4 virtual rawmidi devices.
  They are not real rawmidi devices but just associated with sequencer
  clients, so that any inputoutput sources can be connected as a raw
  MIDI device arbitrary.
  Also, multiple access is allowed to a single rawmidi device.
  Typical usage is like following:
  - Load snd-virmidi module.
 	# modprobe snd-virmidi index=2
    Then, sequencer clients 72:0 to 75:0 will be created, which are
    mapped from devsndmidiC1D0 to devsndmidiC1D3, respectively.
  - Connect inputoutput via aconnect.
 	% aconnect 64:0 72:0	# keyboard input redirection 64:0 -> 72:0
 	% aconnect 72:0 65:0	# output device redirection 72:0 -> 65:0
  - Run application using a midi device (eg. devsndmidiC1D0)
 hack: OSS defines midi_devs, so undefine it (versioned symbols) 
 Index 0-MAX 
 ID for this card 
 SPDX-License-Identifier: GPL-2.0-or-later
    ALSA Driver for Ego Systems Inc. (ESI) Miditerminal 4140
    Copyright (c) 2006 by Matthias König <mk@phasorlab.de>
  Chip specific
 [0]=hh, [1]=mm, [2]=ss, [3]=ff 
 Init chip specific data 
  HW register related constants
 Status Bits 
 readout process, bit is set 
 read byte is a port number 
 Control Bits 
 enable readout 
 Command 
 Used in probing procedure 
 setting the communication mode 
 clearing communication mode 
  Hardware specific functions
  Enables the readout procedure
   Before we can read a midi byte from the device, we have to set
   bit 3 of control port.
  Disables readout 
   Readout is disabled by clearing bit 3 of control
  waits for device ready
   Checks if BUSY (Bit 7 of status) is clear
   1 device ready
   0 failure
  Init device (LED blinking startup magic)
   Returns:
   0 init ok
   -EIO failure
 success 
   Opens the device (set communication mode)
   Close device (clear communication mode)
  map hardware port to substream number
   When reading a byte from the device, the device tells us
   on what port the byte is. This HW port has to be mapped to
   the midiport (substream number).
   substream 0-3 are Midiports 1-4
   substream 4 is SMPTE Timecode
   The mapping is done by the table:
   HW | 0 | 1 | 2 | 3 | 4 
   SW | 0 | 1 | 4 | 2 | 3
  Probe parport for device
   Do we have a Miditerminal 4140 on parport? 
   Returns:
   0       device found
   -ENODEV no device
  Read byte incl. status from device
   Returns:
   data in lower 8 bits and status in upper 8 bits
  Read a byte from device
   Note, that readout mode has to be enabled.
   readout procedure is as follows: 
   - Write number of the Bit to read to DATA
   - Read STATUS
   - Bit 5 of STATUS indicates if Bit is set
   Returns:
   Byte read from device
  Starts SMPTE Timecode generation
   The device creates SMPTE Timecode by hardware.
   0 24 fps
   1 25 fps
   2 29.97 fps
   3 30 fps (Drop-frame)
   4 30 fps
  Stops SMPTE Timecode generation
  Write a command byte to device
  Write a data byte to device 
  Write a MIDI byte to midiport
   midiport ranges from 0-3 and maps to Ports 1-4
   assumptions: communication mode is on
 check current midiport 
 write midi byte 
  Control elements
 SMPTE Switch 
 smpte_switch is not accessed from IRQ handler, so we just need
 Time 
 FPS 
  Rawmidi
		 We don't need a spinlock here, because this is just called 
		   if the device has not been opened before. 
		 We need the spinlock_irqsave here because we can still
 Create and initialize the rawmidi component 
 register rawmidi ops 
 name substreams 
 output 
 input 
 controls 
  parport stuff
 Temporary assignment to forward the parport 
	 Since we dont get the return value of probe
 register device in global table 
 nothing to do here 
  platform stuff
 ISR 
 flags 
 private 
 port 
 name 
 callbacks 
 device number 
 claim parport 
 init device 
 At this point card will be usable 
  module init stuff
 SPDX-License-Identifier: GPL-2.0-or-later
   Loopback soundcard
   Original code:
   Copyright (c) by Jaroslav Kysela <perex@perex.cz>
   More accurate positioning and full-duplex support:
   Copyright (c) Ahmet İnan <ainan at mathematik.uni-freiburg.de>
   Major (almost complete) rewrite:
   Copyright (c) by Takashi Iwai <tiwai@suse.de>
   A next major update in 2010 (separate timers for playback and capture):
   Copyright (c) Jaroslav Kysela <perex@perex.cz>
 Index 0-MAX 
 ID for this card 
	 optional
	  call in loopback->cable_lock
	 required
	  call in cable->lock
	 required
	  call in cable->lock
 optional 
 optional 
	 optional
	  call in loopback->cable_lock
	 optional
	  call in cable->lock
 optional 
 flags 
 timer specific 
 If sound timer is used 
 position in buffer 
 PCM parameters 
 bytes per second 
 bytes per sample  channels 
 rate shift value 
 flags 
 timer stuff 
	unsigned int irq_pos;		 fractional IRQ position in jiffies
					  ticks
 period size in jiffies ticks 
 If jiffies timer is used 
 no pitch 
 call in cable->lock 
 call in cable->lock 
	 Loopback device has to use same period as timer card. Therefore
	  wake up for each snd_pcm_period_elapsed() call of timer card.
		 do not report error if trying to start but already
		  running. For example called by opposite substream
		  of the same cable
 call in cable->lock 
 call in cable->lock 
 only stop if both devices (playback and capture) are not running 
 call in loopback->cable_lock 
 snd_timer was not opened 
	 will only be called from free_cable() when other stream was
	  already closed. Other stream cannot be reopened as long as
	  loopback->cable_lock is locked. Therefore no need to lock
	  cable->lock;
 wait till drain work has finished if requested 
 clear capture buffer 
	 check if playback is draining, trim the capture copy size
 call in cable->lock 
 note delta_capt == delta_play at this moment 
 need to unlock before calling below 
 call in cable->lock 
		 Worst case estimation of possible values for resolution
		  resolution <= (512  1024) frames  8kHz in nsec
		  resolution <= 65.536.000.000 nsec
		 
		  period_size <= 65.536.000.000 nsec  1000nsecusec  192kHz +
		   500.000
		  period_size <= 12.582.912.000.000  <64bit
		    1.000.000 usecsec
 round to nearest sample rate 
 no need to do anything if no stream is running 
 resolution is only valid for SNDRV_TIMER_EVENT_TICK events 
		 The hardware rules guarantee that playback and capture period
		  are the same. Therefore only one device has to be checked
		  here.
 The same timer interrupt is used for playback and capture device 
	 Do not lock cable->lock here because timer->lock is already hold.
	  There are other functions which first lock cable->lock and than
	  timer->lock e.g.
	  loopback_trigger()
	  spin_lock(&cable->lock)
	  loopback_snd_timer_start()
	  snd_timer_start()
	  spin_lock(&timer->lock)
	  Therefore when using the oposit order of locks here it could result
	  in a deadlock.
		 sound card of the timer was stopped. Therefore there will not
		  be any further timer callbacks. Due to this forward audio
		  data from here if in draining state. When still in running
		  state the streaming will be aborted by the usual timeout. It
		  should not be aborted here because may be the timer sound
		  card does only a recovery and the timer is back soon.
		  This work triggers loopback_snd_timer_work()
	 note check overflow in frac_pos() using pcm_rate_shift before
 other stream is still alive 
 free the cable 
 [<pref>:](<card name>|<card idx>)[{.,}<dev idx>[{.,}<subdev idx>]] 
 Must be the name, not number 
 call in loopback->cable_lock 
	 check if timer was already opened. It is only opened once
	  per playback and capture subdevice (aka cable).
	 The callback has to be called from another work. If
	  SNDRV_TIMER_IFLG_FAST is specified it will be called from the
	  snd_pcm_period_elapsed() call of the selected sound card.
	  snd_pcm_period_elapsed() helds snd_pcm_stream_lock_irqsave().
	  Due to our callback loopback_snd_timer_function() also calls
	  snd_pcm_period_elapsed() which calls snd_pcm_stream_lock_irqsave().
	  This would end up in a dead lock.
 initialise a work used for draining 
	 The mutex loopback->cable_lock is kept locked.
	  Therefore snd_timer_open() cannot be called a second time
	  by the other device of the same cable.
	  Therefore the following issue cannot happen:
	  [proc1] Call loopback_timer_open() ->
	 	   Unlock cable->lock for snd_timer_closeopen() call
	  [proc2] Call loopback_timer_open() -> snd_timer_open(),
	 	   snd_timer_start()
	  [proc1] Call snd_timer_open() and overwrite running timer
	 	   instance
 stop_sync() is not required for sound timer because it does not need to be
  restarted in loopback_prepare() on Xrun recovery
 use dynamic rules based on actual runtime->hw values 
 note that the default rules created in the PCM midlevel code 
 are cached -> they do not reflect the actual state 
	 In case of sound timer the period time of both devices of the same
	  loop has to be the same.
	  This rule only takes effect if a sound timer was chosen
	 loopback_runtime_free() has not to be called if kfree(dpcm) was
	  already called here. Otherwise it will end up with a double free.
				 Add the control before copying the id so that
				  the numid field of the id is set in the copy.
 SPDX-License-Identifier: GPL-2.0-or-later
    serial.c
    Copyright (c) by Jaroslav Kysela <perex@perex.cz>,
                     Isaku Yamahata <yamahata@private.email.ne.jp>,
 		      George Hansper <ghansper@apana.org.au>,
 		      Hannu Savolainen
    This code is based on the code from ALSA 0.5.9, but heavily rewritten.
  Sat Mar 31 17:27:57 PST 2001 tim.mann@compaq.com 
       Added support for the Midiator MS-124T and for the MS-124W in
       Single Addressed (SA) or Multiple Burst (MB) mode, with
       power derived either parasitically from the serial port or
       from a separate power supply.
       More documentation can be found in serial-u16550.txt.
 Roland Soundcanvas; F5 NN selects part 
 Midiator MS-124T 
 Midiator MS-124W in SA mode 
 Midiator MS-124W in MB mode 
 Generic Interface 
 Normal blocking buffer operation 
 Non-blocking discard operation 
 Index 0-MAX 
 ID for this card 
 Enable this card 
 0x3f8,0x2f8,0x3e8,0x2e8 
 3,4,5,7,9,10,11,14,15 
 9600,19200,38400,57600,115200 
 baud base 
 1 to 16 
 1 to 16 
#define SNDRV_SERIAL_MS124W_MB_NOCOMBO 1  
 max 64, min 16 
 max 64, min 16 
 Must be 2^n 
 open status of file 
 parameter for using of write loop 
 used in uart16550 
 used in uart16550 
 type of adaptor 
 inputs 
 outputs 
 write buffer and its writingreading position 
 wait timer 
 timer 38600bps  10bit  16byte 
 This macro is only used in snd_uart16550_io_loop 
 This loop should be called with interrupts disabled
  We don't want to interrupt this, 
  as we're already handling an interrupt 
 recall previous stream 
 Read Loop 
 while receive data ready 
 keep track of last status byte 
 handle stream switch 
					 prevent future bytes from being
 remember the last stream 
	 no need of check SERIAL_MODE_OUTPUT_OPEN because if not,
 Check write status 
 Can't use FIFO, must send only when CTS is true 
 Write loop 
 Can we write ? 
 Do we want to? 
 NOTES ON SERVICING INTERUPTS
  ---------------------------
  After receiving a interrupt, it is important to indicate to the UART that
  this has been done. 
  For a Rx interrupt, this is done by reading the received byte.
  For a Tx interrupt this is done by either:
  a) Writing a byte
  b) Reading the IIR
  It is particularly important to read the IIR if a Tx interrupt is received
  when there is no data in tx_buff[], as in this case there no other
  indication that the interrupt has been serviced, and it remains outstanding
  indefinitely. This has the curious side effect that and no further interrupts
  will be generated from this device AT ALL!!.
  It is also desirable to clear outstanding interrupts when the device is
  openedclosed.
  Note that some devices need OUT2 to be set before they will generate
  interrupts at all. (Possibly tied to an internal pull-up on CTS?)
 indicate to the UART that the interrupt has been serviced 
 When the polling mode, this function calls snd_uart16550_io_loop. 
   this method probes, if an uart sits on given port
   return 0 if found
   return negative error if not found
 Do some vague tests for the presence of the uart 
 Not configured 
 uart detected unless one of the following tests should fail 
 8 data-bits, 1 stop-bit, parity off, DLAB = 0 
 Line Control Register 
 The top four bits of the IER should always == 0 
 failed 
 Write arbitrary data into the scratch reg 
 If it comes back, it's OK 
 failed 
 Write arbitrary data into the scratch reg 
 If it comes back, it's OK 
 failed 
 Initialize basic variables 
 Enable FIFO's (if available) 
 Clear receiver FIFO 
 Clear transmitter FIFO 
 Set FIFO trigger at 4-bytes 
	 NOTE: interrupt generated after T=(time)4-bytes
	  if less than UART_FCR_TRIGGER bytes received
 FIFO Control Register 
 Divisor latch access bit 
 Line Control Register 
 Divisor Latch Low 
 Divisor Latch High 
 DLAB is reset to 0 in next outb() 
 Set serial parameters (parity off, etc) 
 8 data-bits 
 1 stop-bit 
 parity off 
 DLAB = 0 
 Line Control Register 
 Set Request-To-Send line active 
 Set Data-Terminal-Ready line active 
		     | UART_MCR_OUT2	 Set OUT2 - not always required, but when
					  it is, it is ESSENTIAL for enabling interrupts
 Modem Control Register 
		 MS-124W can draw power from RTS and DTR if they
		 MS-124T can draw power from RTS andor DTR (preferably
 Disable Receiver data interrupt 
 Disable Transmitter holding register empty interrupt 
 Enable Receiver data interrupt 
 Enable Modem status interrupt 
 Enable Receiver data interrupt 
 Enable Modem status interrupt 
 Enable Transmitter holding register empty interrupt 
 Enable Receiver data interrupt 
 Enable Transmitter holding register empty interrupt 
 Interrupt enable Register 
 Clear any pre-existing overrun indication 
 Clear any pre-existing transmit interrupt 
 Clear any pre-existing receive interrupt 
	 NOTE: may need to disable interrupts before de-registering out handler.
	  For now, the consequences are harmless.
 Disable Receiver data interrupt 
 Disable Transmitter holding register empty interrupt 
 Interrupt enable Register 
 Deactivate Request-To-Send line  
 Deactivate Data-Terminal-Ready line 
 Deactivate OUT2 
 Modem Control Register 
		 MS-124W can draw power from RTS and DTR if they
		 MS-124T can draw power from RTS andor DTR (preferably
 Clear any outstanding interrupts 
 Restore old divisor 
 Divisor latch access bit 
 Line Control Register 
 Divisor Latch Low 
 Divisor Latch High 
 Restore old LCR (data bits, stop bits, parity, DLAB) 
 Line Control Register 
 polling mode 
 Buffer empty? 
 FIFO empty? 
 CTS? 
 Tx Buffer Empty - try to write immediately 
 Transmitter holding register (and Tx FIFO) empty 
			         Cannot write (buffer empty) -
	 Interrupts are disabled during the updating of the tx_buff,
	  since it is 'bad' to have two processes updating the same
	  variables (ie buff_in & buff_out)
 polling 
 buffer full? 
 in this mode we need two bytes of space 
 select exactly one of the four ports 
 select any combination of the four ports 
 ...except none 
 send midi byte 
			 Also send F5 after 3 seconds with no data
 Roland Soundcanvas part selection 
					 If this substream of the data is
					  different previous substream
					  in this uart, send the change part
					  event
 change part 
 data 
					 If midi_byte is a data byte,
 send midi byte 
		 MS-124W can draw power from RTS and DTR if they
		 MS-124T can draw power from RTS andor DTR (preferably
 SPDX-License-Identifier: GPL-2.0-or-later
  Driver for Digigram VX soundcards
  Hardware core part
  Copyright (c) 2002 by Takashi Iwai <tiwai@suse.de>
  vx_check_reg_bit - wait for the specified bit is setreset on a register
  @reg: register to check
  @mask: bit mask
  @bit: resultant bit to be checked
  @time: time-out of loop in msec
  returns zero if a bit matches, or a negative error code.
msleep(10);
  vx_send_irq_dsp - set command irq bit
  @num: the requested IRQ type, IRQ_XXX
  this triggers the specified IRQ request
  returns 0 if successful, or a negative error code.
 wait for Hc = 0 
  vx_reset_chk - reset CHK bit on ISR
  returns 0 if successful, or a negative error code.
 Reset irq CHK 
 Wait until CHK = 0 
  vx_transfer_end - terminate message transfer
  @cmd: IRQ message to send (IRQ_MESS_XXX_END)
  returns 0 if successful, or a negative error code.
  the error code can be VX-specific, retrieved via vx_get_error().
  NB: call with mutex held!
 irq MESS_READWRITE_END 
 Wait CHK = 1 
 If error, Read RX 
  vx_read_status - return the status rmh
  @rmh: rmh record to store the status
  returns 0 if successful, or a negative error code.
  the error code can be VX-specific, retrieved via vx_get_error().
  NB: call with mutex held!
 no read necessary? 
	 Wait for RX full (with timeout protection)
	  The first word of status is in RX
 Read RX 
 If status given by DSP, let's decode its size 
 Let's count the arg numbers from a mask 
 else retrieve the status length given by the driver 
 Val is the status 1st word 
 hence adjust remaining length 
 trigger an irq MESS_WRITE_NEXT 
 Wait for RX full (with timeout protection) 
  vx_send_msg_nolock - send a DSP message and read back the status
  @rmh: the rmh record to send and receive
  returns 0 if successful, or a negative error code.
  the error code can be VX-specific, retrieved via vx_get_error().
  this function doesn't call mutex lock at all.
 Check bit M is set according to length of the command 
 Wait for TX empty 
 Write Cmd[0] 
 Trigger irq MESSAGE 
 Wait for CHK = 1 
 If error, get error value from RX 
 Send the other words 
 Wait for TX ready 
 Write Cmd[i] 
 Trigger irq MESS_READ_NEXT 
 Wait for TX empty 
 End of transfer 
  vx_send_msg - send a DSP message with mutex
  @rmh: the rmh record to send and receive
  returns 0 if successful, or a negative error code.
  see vx_send_msg_nolock().
  vx_send_rih_nolock - send an RIH to xilinx
  @cmd: the command to send
  returns 0 if successful, or a negative error code.
  the error code can be VX-specific, retrieved via vx_get_error().
  this function doesn't call mutex at all.
  unlike RMH, no command is sent to DSP.
 send the IRQ 
 Wait CHK = 1 
 If error, read RX 
  vx_send_rih - send an RIH with mutex
  @cmd: the command to send
  see vx_send_rih_nolock().
 us 
  snd_vx_load_boot_image - boot up the xilinx interface
  @chip: VX core instance
  @boot: the boot record to load
 check the length of boot image 
 more strict check 
 reset dsp 
 another wait? 
 download boot strap 
  vx_test_irq_src - query the source of interrupts
  called from irq handler only
  snd_vx_threaded_irq_handler - threaded irq handler
 printk(KERN_DEBUG "IRQ events = 0x%x\n", events);
	 We must prevent any application using this DSP
	  and block any further request until the application
	  either unregisters or reloads the DSP
	 The start on time code conditions are filled (ie the time code
	  received by the board is equal to one of those given to it).
 so far, nothing to do yet 
 The frequency has changed on the board (UER mode). 
 update the pcm streams 
  snd_vx_irq_handler - interrupt handler
  @irq: irq number
  @dev: VX core instance
 current source, later sync'ed with target 
 Reset the DSP 
 Acknowledge any pending IRQ and reset the MEMIRQ flag. 
 init CBits 
  proc interface
  snd_vx_dsp_boot - load the DSP boot
  @chip: VX core instance
  @boot: firmware data
  snd_vx_dsp_load - load the DSP image
  @chip: VX core instance
  @dsp: firmware data
 Transfert data buffer from PC to DSP 
 Wait DSP ready for a new read 
  suspend
  resume
  snd_vx_create - constructor for struct vx_core
  @card: card instance
  @hw: hardware specific record
  @ops: VX ops pointer
  @extra_size: extra byte size to allocate appending to chip
  this function allocates the instance and prepare for the hardware
  initialization.
  The object is managed via devres, and will be automatically released.
  return the instance pointer if successful, NULL in error.
 SPDX-License-Identifier: GPL-2.0-or-later
  Driver for Digigram VX soundcards
  PCM part
  Copyright (c) 2002,2003 by Takashi Iwai <tiwai@suse.de>
  STRATEGY
   for playback, we send series of "chunks", which size is equal with the
   IBL size, typically 126 samples.  at each end of chunk, the end-of-buffer
   interrupt is notified, and the interrupt handler will feed the next chunk.
   the current position is calculated from the sample count RMH.
   pipe->transferred is the counter of data which has been already transferred.
   if this counter reaches to the period size, snd_pcm_period_elapsed() will
   be issued.
   for capture, the situation is much easier.
   to get a low latency response, we'll check the capture streams at each
   interrupt (capture stream has no EOB notification).  if the pending
   data is accumulated to the period size, snd_pcm_period_elapsed() is
   called and the pointer is updated.
   the current point of read buffer is kept in pipe->hw_ptr.  note that
   this is in bytes.
  TODO
   - linked trigger for full-duplex mode.
   - scheduled action on the stream.
  read three pending pcm bytes via inb()
  vx_set_pcx_time - convert from the PC time to the RMH status time.
  @pc_time: the pointer for the PC-time to set
  @dsp_time: the pointer for RMH status time array
  vx_set_differed_time - set the differed time if specified
  @rmh: the rmh record to modify
  @pipe: the pipe to be checked
  if the pipe is programmed with the differed time, set the DSP time
  on the rmh and changes its command length.
  returns the increase of the command length.
 Update The length added to the RMH command by the timestamp 
 Set the T bit 
 Time stamp is the 1st following parameter 
 Add the flags to a notified differed command 
 Add the flags to a multiple differed command 
 Add the flags to a stream-time differed command 
  vx_set_stream_format - send the stream format command
  @pipe: the affected pipe
  @data: format bitmask
 Command might be longer since we may have to add a timestamp 
| (datal & 0xFFFF00) >> 8;
  vx_set_format - set the format of a pipe
  @pipe: the affected pipe
  @runtime: pcm runtime instance to be referred
  returns 0 if successful, or a negative error code.
 case 8: break;
  set  query the IBL size
  vx_get_pipe_state - get the state of a pipe
  @pipe: the pipe to be checked
  @state: the pointer for the returned state
  checks the state of a given pipe, and stores the state (1 = running,
  0 = paused) on the given pointer.
  called from trigger callback only
  vx_query_hbuffer_size - query available h-buffer size in bytes
  @pipe: the pipe to be checked
  return the available size on h-buffer in bytes,
  or a negative error code.
  NOTE: calling this function always switches to the stream mode.
        you'll need to disconnect the host to get back to the
        normal mode.
  vx_pipe_can_start - query whether a pipe is ready for start
  @pipe: the pipe to be checked
  return 1 if ready, 0 if not ready, and negative value on error.
  called from trigger callback only
  vx_conf_pipe - tell the pipe to stand by and wait for IRQA.
  @pipe: the pipe to be configured
  vx_send_irqa - trigger IRQA
  vx boards do not support inter-card sync, besides
  only 126 samples require to be prepared before a pipe can start
 wait 2ms only before asking if the pipe is ready
 wait 2ms after irqA was requested and check if the pipe state toggled
  vx_toggle_pipe - start  pause a pipe
  @pipe: the pipe to be triggered
  @state: start = 1, pause = 0
  called from trigger callback only
 Check the pipe is not already in the requested state 
	 If a start is requested, ask the DSP to get prepared
	  and wait for a positive acknowledge (when there are
	  enough sound buffer for this pipe)
			 Wait for a few, before asking again
			  to avoid flooding the DSP with our requests
	 If it completes successfully, wait for the pipes
	  reaching the expected state before returning
	  Check one pipe only (since they are synchronous)
  vx_stop_pipe - stop a pipe
  @pipe: the pipe to be stopped
  called from trigger callback only
  vx_alloc_pipe - allocate a pipe and initialize the pipe instance
  @capture: 0 = playback, 1 = capture operation
  @audioid: the audio id to be assigned
  @num_audio: number of audio channels
  @pipep: the returned pipe instance
  return 0 on success, or a negative error code.
 NYI
 NYI
 initialize the pipe record 
 release the pipe 
 the pipe index should be identical with the audio index 
  vx_free_pipe - release a pipe
  @pipe: pipe to be released
  vx_start_stream - start the stream
  called from trigger callback only
  vx_stop_stream - stop the stream
  called from trigger callback only
  playback hw information
|
SNDRV_PCM_INFO_RESUME),
SNDRV_PCM_FMTBIT_U8 |
  vx_pcm_playback_open - open callback for playback
 playback pipe may have been already allocated for monitoring 
 not allocated yet 
 stereo playback 
 open for playback 
 align to 4 bytes (otherwise will be problematic when 24bit is used)  
  vx_pcm_playback_close - close callback for playback
  vx_notify_end_of_buffer - send "end-of-buffer" notifier at the given pipe
  @pipe: the pipe to notify
  NB: call with a certain lock.
 use a temporary rmh here 
 Toggle Dsp Host Interface into Message mode 
 Toggle Dsp Host Interface back to sound transfer mode 
  vx_pcm_playback_transfer_chunk - transfer a single chunk
  @subs: substream
  @pipe: the pipe to transfer
  @size: chunk size in bytes
  transfer a single buffer chunk.  EOB notificaton is added after that.
  called from the interrupt handler, too.
  return 0 if ok.
 disconnect the host, SIZE_HBUF command always switches to the stream mode 
 XRUN 
	 we don't need irqsave here, because this function
	  is called from either trigger callback or irq handler
 disconnect the host, SIZE_HBUF command always switches to the stream mode 
  update the position of the given pipe.
  pipe->position is updated and wrapped within the buffer size.
  pipe->transferred is updated, too, but the size is not wrapped,
  so that the caller can check the total transferred size later
  (to call snd_pcm_period_elapsed).
  transfer the pending playback buffer data to DSP
  called from interrupt handler
  update the playback position and call snd_pcm_period_elapsed() if necessary
  called from interrupt handler
  vx_pcm_playback_trigger - trigger callback for playback
  vx_pcm_playback_pointer - pointer callback for playback
  vx_pcm_prepare - prepare callback for playback and capture
 int max_size, nchunks;
 IEC958 status (raw-mode) was changed 
 we reopen the pipe 
 16bit word 
 32bit word 
 set the timestamp 
 clear again 
  operators for PCM playback
  playback hw information
|
SNDRV_PCM_INFO_RESUME),
SNDRV_PCM_FMTBIT_U8 |
  vx_pcm_capture_open - open callback for capture
 check if monitoring is needed 
 allocate a pipe 
		 
		   if an output pipe is available, it's audios still may need to be 
		   unmuted. hence we'll have to call a mixer entry point.
 assuming stereo 
 default value NULL 
 align to 4 bytes (otherwise will be problematic when 24bit is used)  
  vx_pcm_capture_close - close callback for capture
	
	  if an output pipe is attached to this input, 
	  check if it needs to be released.
 hardware alignment for read 
  vx_pcm_capture_update - update the capture buffer
 align to 3 bytes 
 keep the last 6 bytes, they will be read after disconnection 
	 read bytes until the current pointer reaches to the aligned position
	  for word-transfer
 ok, let's accelerate! 
 read the rest of bytes 
 disconnect the host, SIZE_HBUF command always switches to the stream mode 
 read the last pending 6 bytes 
 update the position 
 disconnect the host, SIZE_HBUF command always switches to the stream mode 
  vx_pcm_capture_pointer - pointer callback for capture
  operators for PCM capture
  interrupt handler for pcm streams
 SEL_ASYNC_EVENTS 
 SEL_END_OF_BUF_EVENTS 
 force to transfer 
 update the capture pcm pointers as frequently as possible 
  vx_init_audio_io - check the available audio io and allocate pipe arrays
 allocate pipes 
 query the info 
 set to the minimum 
  free callback for pcm
  snd_vx_pcm_new - create and initialize a pcm
 SPDX-License-Identifier: GPL-2.0-or-later
  Driver for Digigram VX soundcards
  Common mixer part
  Copyright (c) 2002 by Takashi Iwai <tiwai@suse.de>
  write a codec data (24bit)
  Data type used to access the Codec
 LITTLE_ENDIAN 
  set up codec register and write the value
  @codec: the codec id, 0 or 1
  @reg: register index
  @val: data value
 DAC control register 
  vx_set_analog_output_level - set the output attenuation level
  @codec: the output codec, 0 or 1.  (1 for VXP440 only)
  @left: left output level, 0 = mute
  @right: right output level
 convert to attenuation level: 0 = 0dB (max), 0xe3 = -113.5 dB (min) 
  vx_toggle_dac_mute -  muteunmute DAC
  @mute: 0 = unmute, 1 = mute
 XXX 
  vx_reset_codec - reset and initialize the codecs
 AKM codecs should be initialized in reset_codec callback 
 initialize old codecs 
 DAC control register (change level when zero crossing + mute) 
 ADC control register 
 Port mode register 
 Clock control register 
 mute analog output 
  change the audio input source
  @src: the target source (VX_AUDIO_SRC_XXX)
  change the audio source if necessary and possible
  returns 1 if the source is actually changed.
  audio level, mute, monitoring
 Add Audio IO mask 
 validate flag for M2 at least to unmute it  
 not used
 Add Audio IO mask 
 not used
  set the monitoring level and mute state of the given audio
  no more static, because must be called from vx_pcm to demute monitoring
 playback only 
  set the mute status of the given audio
 playback only 
  set the mute status of the given audio
  reset all audio levels
 default: 0dB 
  VU, peak meter record
  get the VU and peak meter values
  @audio: the audio index
  @capture: 0 = playback, 1 = capture operation
  @info: the array of vx_vu_meter records (size = 2).
 Add Audio IO mask 
 Read response 
  control API entries
  output level control
 tlv will be filled later 
  audio source select
  clock mode selection
  Audio Gain
 name will be filled later 
 shared 
 shared 
  IEC958 status bits
 shared 
  VU meter
 capture only 
 name will be filled later 
 name will be filled later 
 shared 
 output level controls 
 PCM volumes, switches, monitoring 
 Audio source 
 clock mode 
 IEC958 controls 
 VU, peak, saturation meters 
 SPDX-License-Identifier: GPL-2.0-or-later
  Driver for Digigram VX soundcards
  IEC958 stuff
  Copyright (c) 2002 by Takashi Iwai <tiwai@suse.de>
  vx_modify_board_clock - tell the board that its clock has been modified
  @sync: DSP needs to resynchronize its FIFO
 Ask the DSP to resynchronize its FIFO. 
  vx_modify_board_inputs - resync audio inputs
 reference: AUDIO 0 
  vx_read_one_cbit - read one bit from UER config
  @index: the bit index
  returns 0 or 1.
 read 
 read 
  vx_write_one_cbit - write one bit to UER config
  @index: the bit index
  @val: bit value, 0 or 1
 0 or 1 
 write 
 write 
  vx_read_uer_status - read the current UER status
  @mode: pointer to store the UER mode, VX_UER_MODE_XXX
  returns the frequency of UER, or 0 if not sync,
  or a negative error code.
 Default values 
 Read UER status 
 If clock is present, read frequency 
 bit 0 corresponds to consumerprofessional bit 
  compute the sample clock value from frequency
  The formula is as follows:
     HexFreq = (dword) ((double) ((double) 28224000  (double) Frequency))
     switch ( HexFreq & 0x00000F00 )
     case 0x00000100: ;
     case 0x00000200:
     case 0x00000300: HexFreq -= 0x00000201 ;
     case 0x00000400:
     case 0x00000500:
     case 0x00000600:
     case 0x00000700: HexFreq = (dword) (((double) 28224000  (double) (Frequency2)) - 1)
     default        : HexFreq = (dword) ((double) 28224000  (double) (Frequency4)) - 0x000001FF
 max freq = 55125 Hz 
 min freq = 6893 Hz 
  vx_change_clock_source - change the clock source
  @source: the new source
 we mute DAC to prevent clicks 
 unmute 
  set the internal clock
 Get real clock value 
  set the iec958 status bits
  @bits: 32-bit status bits
  vx_set_clock - change the clock and audio source if necessary
 change the audio source if possible 
  vx_change_frequency - called from interrupt handler
	
	  Read the real UER board frequency
	
	  The frequency computed by the DSP is good and
	  is different from the previous computed.
 SPDX-License-Identifier: GPL-2.0-or-later
  Driver for Digigram VX soundcards
  DSP firmware management
  Copyright (c) 2002 by Takashi Iwai <tiwai@suse.de>
 ok, we reached to the last one 
 create the devices if not built yet 
 exported 
 SPDX-License-Identifier: GPL-2.0-or-later
  Driver for Digigram VX soundcards
  DSP commands
  Copyright (c) 2002 by Takashi Iwai <tiwai@suse.de>
  Array of DSP commands
 [CMD_SET_STREAM_OUT_EFFECTS] =	{ 0x888000, 34, RMH_SSIZE_FIXED, 0 },
 [CMD_GET_STREAM_OUT_EFFECTS] =	{ 0x928000, 2, RMH_SSIZE_FIXED, 32 },
  vx_init_rmh - initialize the RMH instance
  @rmh: the rmh pointer to be initialized
  @cmd: the rmh command to be set
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (c) by Uros Bizjak <uros@kss-loka.si>
   Midi synth routines for OPL2OPL3OPL4 FM
  The next table looks magical, but it certainly is not. Its values have
  been calculated as table[i]=8log(i64)log(2) with an obvious exception
  for i=0. This log-table converts a linear volume-scaling (0..127) to a
  logarithmic scaling as present in the FM-synthesizer chips. so :    Volume
  64 =  0 db = relative volume  0 and:    Volume 32 = -6 db = relative
  volume -8 it was implemented as a table because it is only 128 bytes and
  it saves a lot of log() calculations. (Rob Hooft <hooft@chem.ruu.nl>)
  Converts the note frequency to block and fnum values for the FM chip
 for pitch bending, -2 semitones 
 for pitch bending, +2 semitones 
  Get a FM voice (channel) to play a note on.
 first voice for 4op instrument 
 second voice for 4op instrument 
 This is our "allocation cost" table 
 Keeps track of what we are finding 
 XXX MAX_?INT really 
 Look through all the channels for the most suitable. 
		   skip unavailable channels, allocated by
 allocate 4op voice 
 skip channels unavailable to 4op instrument 
 kill one voice, CHEAP 
			 get state of bounded 2op channel
 kill two voices, EXPENSIVE 
 allocate 2op voice 
 use bounded channels for 2op, CHEAP 
 kill one voice on 2op channel, CHEAP 
 raise kill cost to EXPENSIVE for all channels 
 not found 
 ------------------------------ 
  System timer interrupt function
 invoke again 
  Start system timer
 ------------------------------ 
  Start a note.
 in SYNTH mode, application takes care of voices 
 in SEQ mode, drum voice numbers are notes on drum channel 
 percussion instruments are located in bank 128 
 Prepare for OSS mode 
 OSS instruments are located in bank 127 
 in SYNTH mode, application takes care of voices 
 in SEQ mode, allocate voice on free OPL3 channel 
 remap OSS voice 
 Left register block for voices 0 .. 8 
 Right register block for voices 9 .. 17 
 kill voice on channel 
 set connection register 
 set connection bit 
 clear connection bit 
	
	  calculate volume depending on connection
	  between FM operators (see includeopl3.h)
 Program the FM voice characteristics 
 Set OPL3 AM_VIB register of requested voiceoperator  
 Set OPL3 KSL_LEVEL register of requested voiceoperator  
 Set OPL3 ATTACK_DECAY register of requested voiceoperator  
 Set OPL3 SUSTAIN_RELEASE register of requested voiceoperator  
 Select waveform 
 Set operator feedback and 2op inter-operator connection 
 Set output voice connection 
 Set 4op inter-operator connection 
 Set output voice connection 
	
	  Special treatment of percussion notes for fm:
	  Requested pitch is really program, and pitch for
	  device is whatever was specified in the patch library.
	
	  use transpose if defined in patch library
 Set OPL3 FNUM_LOW register of requested voice 
 Set output sound flag 
 Set OPL3 KEYON_BLOCK register of requested voice  
 kill note after fixed duration (in centiseconds) 
 get extra pgm, but avoid possible loops 
 do the bookkeeping 
 4op killed by 2op, release bounded voice 
 allocate extra program if specified in patch library 
 percussions start at 35 
 Left register block for voices 0 .. 8 
 Right register block for voices 9 .. 17 
 kill voice 
 clear Key ON bit 
 do the bookkeeping 
  Release a note in response to a midi note off.
		 this loop will hopefully kill all extra voices, because
 remap OSS voices 
  key pressure change
  terminate note
 not allocated? 
 Left register block for voices 0 .. 8 
 Right register block for voices 9 .. 17 
 Set OPL3 FNUM_LOW register of requested voice 
 Set output sound flag 
 Set OPL3 KEYON_BLOCK register of requested voice  
  Update voice pitch controller
 remap OSS voices 
  Deal with a controller type event.  This includes all types of
  control events, not just the midi controllers
  NRPN events
  receive sysex
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (c) by Uros Bizjak <uros@kss-loka.si>
   Routines for OPL2OPL3OPL4 control
     There is 18 possible 2 OP voices
       (9 in the left and 9 in the right).
       The first OP is the modulator and 2nd is the carrier.
       The first three voices in the both sides may be connected
       with another voice to a 4 OP voice. For example voice 0
       can be connected with voice 3. The operators of voice 3 are
       used as operators 3 and 4 of the new 4 OP voice.
       In this case the 2 OP voice number 0 is the 'first half' and
       voice 3 is the second.
     Register offset table for OPL23 voices,
     OPL2  one OPL3 register array side only
	  OP1   OP2   OP3   OP4		
	 ------------------------	
 used by percussive voices 
 if the percussive mode 
 is selected (only left reg block) 
  prototypes
 ------------------------------ 
  open the device exclusively
  ioctl for hwdep device:
 get information 
  close the device
  write the device - load patches
 invalid type 
  Patch management
 offsets for SBI params 
 offset for SBI instrument 
  load a patch, obviously.
  loaded on the given program and bank numbers with the given type
  (FM_PATCH_OPLx).
  data is the pointer of SBI record _without_ header (key and name).
  name is the name string of the patch.
  ext is the extension data of 7 bytes long (stored in name of SBI
  data up to offset 25), or NULL to skip.
  return 0 if successful or a negative error code.
  find a patch with the given program and bank numbers, returns its pointer
  if no matching patch is found and create_patch is set, it creates a
  new patch object.
 pretty dumb hash key 
  Clear all patches of the given OPL3 instance
 OPL3_SUPPORT_SYNTH 
 ------------------------------ 
 Get register array side and offset of voice 
 Left register block for voices 0 .. 8 
 Right register block for voices 9 .. 17 
 Operator 1 volume 
 Operator 2 volume 
 Note off 
 Melodic mode 
 Voices 0 -  8 in OPL2 mode 
 Voices 0 - 17 in OPL3 mode 
 Get register array side and offset of voice 
 Left register block for voices 0 .. 8 
 Right register block for voices 9 .. 17 
 Set lower 8 bits of note frequency 
 Set output sound flag 
 Set octave 
 Set higher 2 bits of note frequency 
 Set OPL3 KEYON_BLOCK register of requested voice  
 Only operators 1 and 2 
 Voices 0 -  8 in OPL2 mode 
 Voices 0 - 17 in OPL3 mode 
 Get register array side and offset of voice 
 Left register block for voices 0 .. 8 
 Right register block for voices 9 .. 17 
 Get register offset of operator 
 Set amplitude modulation (tremolo) effect 
 Set vibrato effect 
 Set sustaining sound phase 
 Set keyboard scaling bit  
 Set harmonic or frequency multiplier 
 Set OPL3 AM_VIB register of requested voiceoperator  
 Set decreasing volume of higher notes 
 Set output volume 
 Set OPL3 KSL_LEVEL register of requested voiceoperator  
 Set attack phase level 
 Set decay phase level 
 Set OPL3 ATTACK_DECAY register of requested voiceoperator  
 Set sustain phase level 
 Set release phase level 
 Set OPL3 SUSTAIN_RELEASE register of requested voiceoperator  
 Set inter-operator feedback 
 Set inter-operator connection 
 OPL-3 only 
 Feedbackconnection bits are applicable to voice 
 Select waveform 
 Set keyboard split method 
 Set amplitude modulation (tremolo) depth 
 Set vibrato depth 
 Set percussion mode 
 Play percussion instruments 
 Clear 4-op connections 
 OPL-3 only 
 Set 4-op connections 
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (c) by Jaroslav Kysela <perex@perex.cz>,
                    Hannu Savolainen 1993-1996,
                    Rob Hooft
   Routines for control of AdLib FM cards (OPL2OPL3OPL4 chips)
   Most if code is ported from OSSLite.
	
	  The original 2-OP synth requires a quite long delay
	  after writing to a register.
	
	  The OPL-3 survives with just two INBs
	  after writing to a register.
	
	  This function returns 1 if the FM chip is present at the given IO port
	  The detection algorithm plays with the timer built in the FM chip and
	  looks for a change in the status register.
	 
	  Note! The timers of the FM chip are not connected to AdLib (and compatible)
	  boards.
	 
	  Note2! The chip is initialized if detected.
 Reset timers 1 and 2 
 Reset the IRQ of the FM chip 
 Status register 
 Should be 0x00 
 Set timer1 to 0xff 
 Unmask and start timer 1 
 Now we have to delay at least 80us 
 Read status after timers have expired 
 Stop the timers 
 Reset the IRQ of the FM chip 
 There is no YM3812 
	 If the toplevel code knows exactly the type of chip, don't try
 There is a FM chip on this address. Detect the type (OPL2 to OPL4) 
 OPL2 
		
		  If we had an OPL4 chip, opl3->hardware would have been set
		  by the OPL4 driver; so we can assume OPL3 here.
   AdLib timers
   Timer 1 - 80us
 timer 1 count 
 enable timer 1 IRQ 
 disable timer #1 
   Timer 2 - 320us
 timer 1 count 
 enable timer 1 IRQ 
 disable timer #1 
 Melodic mode 
 Enter OPL3 mode 
 some hardware doesn't support timers 
 detect routine returns correct hardware type 
 create hardware dependent device (direct FM) 
 operators - only ioctl 
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (c) by Uros Bizjak <uros@kss-loka.si>
   Midi Sequencer interface routines for OPL2OPL3OPL4 FM
   OPL23 FM instrument loader:
    alsa-toolsseqsbiload
 Clear 4-op connections 
 Stop system timer 
 Percussion mode 
  MIDI emulation operators
 ------------------------------ 
 ------------------------------ 
 allocate new client 
 setup system timer 
 SPDX-License-Identifier: GPL-2.0-or-later
   Interface for OSS sequencer emulation
   Copyright (C) 2000 Uros Bizjak <uros@kss-loka.si>
 operators 
 ------------------------------ 
 ------------------------------ 
 register OSS synth 
 register to OSS synth table 
 unregister 
 The instance should have been released in prior 
 ------------------------------ 
 open OSS sequencer 
 fill the argument data 
 close OSS sequencer 
 load patch 
 from sound_config.h 
 ioctl 
 handled automatically by OPL instrument type
 reset device 
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (c) by Uros Bizjak <uros@kss-loka.si>
    OPL2OPL3OPL4 FM routines for internal percussion channels
 35 - 37 
 38 - 40 
 41 - 43 
 44 - 46 
 47 - 49 
 50 - 52 
 53 - 55 
 56 - 58 
 59 - 61 
 62 - 64 
 65 - 67 
 68 - 70 
 71 - 73 
 74 - 76 
 77 - 79 
 80 - 81 
  set drum voice characteristics
 Set OPL3 AM_VIB register  
 Set OPL3 KSL_LEVEL register  
 Set OPL3 ATTACK_DECAY register  
 Set OPL3 SUSTAIN_RELEASE register  
 Set OPL3 FEEDBACK_CONNECTION register  
 Select waveform 
  Set drum voice pitch
 Set OPL3 FNUM_LOW register  
 Set OPL3 KEYON_BLOCK register  
  Set drum voice volume and position
 Set OPL3 KSL_LEVEL register  
 Set OPL3 FEEDBACK_CONNECTION register  
 Set output voice connection 
  Loads drum voices at init time
  Switch drum voice on or off
  OPL4 MIDI synthesizer functions
  Copyright (c) 2003 by Clemens Ladisch <clemens@ladisch.de>
  All rights reserved.
  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions
  are met:
  1. Redistributions of source code must retain the above copyright
     notice, this list of conditions, and the following disclaimer,
     without modification.
  2. The name of the author may not be used to endorse or promote products
     derived from this software without specific prior written permission.
  Alternatively, this software may be distributed andor modified under the
  terms of the GNU General Public License as published by the Free Software
  Foundation; either version 2 of the License, or (at your option) any later
  version.
  THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR
  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
  SUCH DAMAGE.
 GM2 controllers 
  This table maps 100128 cents to F_NUMBER.
  Attenuation according to GM recommendations, in -0.375 dB units.
  table[v] = 40  log(v  127)  -0.375
  Initializes all voices.
  Shuts down all voices.
  Executes the callback for all voices playing the specified note.
  Executes the callback for all voices of to the specified channel.
  Executes the callback for all active voices.
	
	  pitch is in 100128 cents, so 0x80 is one semitone and
	  0x600 is one octave.
 allocate one voice 
 first, try to get the oldest key-off voice 
 then get the oldest key-on voice 
 determine the number of voices and voice parameters 
 allocate and initialize the needed voices 
 set tone number (triggers header loading) 
 set parameters which can be set while loading 
 wait for completion of loading 
 set remaining parameters 
 finally, switch on all voices 
 not yet supported 
 not yet supported 
		
		  Each OPL4 voice has a bit called "Pseudo-Reverb", but
		  IMHO _not_ using it enhances the listening experience.
  OPL4 sequencer functions
  Copyright (c) 2003 by Clemens Ladisch <clemens@ladisch.de>
  All rights reserved.
  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions
  are met:
  1. Redistributions of source code must retain the above copyright
     notice, this list of conditions, and the following disclaimer,
     without modification.
  2. The name of the author may not be used to endorse or promote products
     derived from this software without specific prior written permission.
  Alternatively, this software may be distributed andor modified under the
  terms of the GNU General Public License as published by the Free Software
  Foundation; either version 2 of the License, or (at your option) any later
  version.
  THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR
  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
  SUCH DAMAGE.
 allocate new client 
 create new port 
 SPDX-License-Identifier: GPL-2.0-or-later
  OPL4 mixer functions
  Copyright (c) 2003 by Clemens Ladisch <clemens@ladisch.de>
 SPDX-License-Identifier: GPL-2.0-or-later
  Functions for the OPL4 proc file
  Copyright (c) 2003 by Clemens Ladisch <clemens@ladisch.de>
 OPL4 can access 4 MB external ROMSRAM 
 OPL4-ML has 1 MB internal ROM 
  Information about the Yamaha YRW801 wavetable ROM chip
  Copyright (c) 2003 by Clemens Ladisch <clemens@ladisch.de>
  All rights reserved.
  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions
  are met:
  1. Redistributions of source code must retain the above copyright
     notice, this list of conditions, and the following disclaimer,
     without modification.
  2. The name of the author may not be used to endorse or promote products
     derived from this software without specific prior written permission.
  Alternatively, this software may be distributed andor modified under the
  terms of the GNU General Public License as published by the Free Software
  Foundation; either version 2 of the License, or (at your option) any later
  version.
  THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR
  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
  SUCH DAMAGE.
  The instrument definitions are stored statically because, in practice, the
  OPL4 is always coupled with a YRW801. Dynamic instrument loading would be
  required if downloading sample data to external SRAM was actually supported
  by this driver.
 Acoustic Grand Piano 
 Bright Acoustic Piano 
 Electric Grand Piano 
 Honky-Tonk Piano 
 Electric Piano 1 
 Electric Piano 2 
 Harpsichord 
 Clavinet 
 Celesta 
 Glockenspiel 
 Music Box 
 Vibraphone 
 Marimba 
 Xylophone 
 Tubular Bell 
 Dulcimer 
 Drawbar Organ 
 Percussive Organ 
 Rock Organ 
 Church Organ 
 Reed Organ 
 Accordion 
 Harmonica 
 Tango Accordion 
 Nylon Guitar 
 Steel Guitar 
 Jazz Guitar 
 Clean Guitar 
 Muted Guitar 
 Overdriven Guitar 
 Distortion Guitar 
 Guitar Harmonics 
 Acoustic Bass 
 Fingered Bass 
 Picked Bass 
 Fretless Bass 
 Slap Bass 1 
 Slap Bass 2 
 Synth Bass 1 
 Synth Bass 2 
 Violin 
 Viola 
 Cello 
 Contrabass 
 Tremolo Strings 
 Pizzicato Strings 
 Harp 
 Timpani 
 Strings 
 Slow Strings 
 Synth Strings 1 
 Synth Strings 2 
 Choir Aahs 
 Voice Oohs 
 Synth Voice 
 Orchestra Hit 
 Trumpet 
 Trombone 
 Tuba 
 Muted Trumpet 
 French Horns 
 Brass Section 
 Synth Brass 1 
 Synth Brass 2 
 Soprano Sax 
 Alto Sax 
 Tenor Sax 
 Baritone Sax 
 Oboe 
 English Horn 
 Bassoon 
 Clarinet 
 Piccolo 
 Flute 
 Recorder 
 Pan Flute 
 Bottle Blow 
 Shakuhachi 
 Whistle 
 Ocarina 
 Square Lead 
 Sawtooth Lead 
 Calliope Lead 
 Chiffer Lead 
 Charang Lead 
 Voice Lead 
 5ths Lead 
 Bass & Lead 
 New Age Pad 
 Warm Pad 
 Polysynth Pad 
 Choir Pad 
 Bowed Pad 
 Metallic Pad 
 Halo Pad 
 Sweep Pad 
 Ice Rain 
 Soundtrack 
 Crystal 
 Atmosphere 
 Brightness 
 Goblins 
 Echoes 
 Sci-Fi 
 Sitar 
 Banjo 
 Shamisen 
 Koto 
 Kalimba 
 Bagpipe 
 Fiddle 
 Shanai 
 Tinkle Bell 
 Agogo 
 Steel Drums 
 Woodblock 
 Taiko Drum 
 Melodic Tom 
 Synth Drum 
 Reverse Cymbal 
 Guitar Fret Noise 
 Breath Noise 
 Seashore 
 Bird Tweet 
 Telephone Ring 
 Helicopter 
 Applause 
 Gun Shot 
 SPDX-License-Identifier: GPL-2.0-or-later
  Functions for accessing OPL4 devices
  Copyright (c) 2003 by Clemens Ladisch <clemens@ladisch.de>
 opl3 initialization disabled opl4, so reenable 
 SPDX-License-Identifier: GPL-2.0
  PC-Speaker driver for Linux
  Mixer implementation.
  Copyright (C) 2001-2008  Stas Sergeev
 SPDX-License-Identifier: GPL-2.0
  PC-Speaker driver for Linux
  Copyright (C) 1993-1997  Michael Beck
  Copyright (C) 1997-2001  David Woodhouse
  Copyright (C) 2001-2008  Stas Sergeev
  Call snd_pcm_period_elapsed in a work
  This avoids spinlock messes and long-running irq contexts
 write the port and returns the next expire time in ns;
  called at the trigger-start and in hrtimer callback
 assume it is mono! 
 update the playback position 
	 wrap the pointer _before_ calling snd_pcm_period_elapsed(),
 binary, mode 1, LSB only, ch 2 
 restore the timer 
 binary, mode 3, LSBMSB, ch 2 
  Force to stop and sync the stream
 SPDX-License-Identifier: GPL-2.0-only
   PC Speaker beeper driver for Linux
   Copyright (c) 2002 Vojtech Pavlik
   Copyright (c) 1992 Orest Zborowski
 set command for counter 2, 2 byte write 
 select desired HZ 
 enable counter 2 
 disable counter 2 
 SPDX-License-Identifier: GPL-2.0-only
  PC-Speaker driver for Linux
  Copyright (C) 1997-2001  David Woodhouse
  Copyright (C) 2001-2008  Stas Sergeev
 Index 0-MAX 
 ID for this card 
 Enable this card 
 Disable PCM capability of the driver 
 Well, CONFIG_DEBUG_PAGEALLOC makes the sound horrible. Lets alert 
 CONFIG_PM_SLEEP 
 SPDX-License-Identifier: GPL-2.0-or-later
   Driver for generic MPU-401 boards (UART mode only)
   Copyright (c) by Jaroslav Kysela <perex@perex.cz>
   Copyright (c) 2004 by Castet Matthieu <castet.matthieu@free.fr>
 exclude the first card 
 ID for this card 
 Enable this card 
 MPU-401 port number 
 MPU-401 IRQ 
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (c) by Jaroslav Kysela <perex@perex.cz>
   Routines for control of MPU-401 in UART mode
   MPU-401 supports UART mode which is not capable generate transmit
   interrupts thus output is done via polling. Without interrupt,
   input is done also via polling. Do not expect good performance.
    13-03-2003:
       Added support for different kind of hardware IO. Build in choices
       are port and mmio. For other kind of IO, set mpu->read and
       mpu->write to your own IO functions.
 Build in lowlevel io 
		 ok. for better Tx performance try do some output
  snd_mpu401_uart_interrupt - generic MPU401-UART interrupt handler
  @irq: the irq number
  @dev_id: mpu401 instance
  Processes the interrupt for MPU401-UART io.
  Return: %IRQ_HANDLED if the interrupt was handled. %IRQ_NONE otherwise.
  snd_mpu401_uart_interrupt_tx - generic MPU401-UART transmit irq handler
  @irq: the irq number
  @dev_id: mpu401 instance
  Processes the interrupt for MPU401-UART output.
  Return: %IRQ_HANDLED if the interrupt was handled. %IRQ_NONE otherwise.
  timer callback
  reprogram the timer and call the interrupt job
mpu->mode |= MPU401_MODE_TIMER;
  initialize the timer callback if not programmed yet
  remove the timer callback if still active
  send a UART command
  return zero if successful, non-zero for some errors
snd_mpu401_uart_clear_rx(mpu);
 ok. standard MPU-401 initialization 
  inputoutput openclose - protected by open_mutex in rawmidi.c
  trigger input callback
 first time - flush FIFO 
 read data in advance 
  transfer input pending data
  call with input_lock spinlock held
 input not available 
   Tx FIFO sizes:
     CS4237B			- 16 bytes
     AudioDrive ES1688         - 12 bytes
     S3 SonicVibes             -  8 bytes
     SoundBlaster AWE 64       -  2 bytes (ugly hardware)
  write output pending bytes
  call with output_lock spinlock held
			
			  Try twice because there is hardware that insists on
			  setting the output busy bit after each write.
 Tx FIFO full - try again later 
 no other data - leave the tx loop 
  output trigger callback
		 try to add the timer at each output trigger,
		  since the output timer might have been removed in
		  snd_mpu401_uart_output_write().
 output pending data 
  snd_mpu401_uart_new - create an MPU401-UART instance
  @card: the card instance
  @device: the device index, zero-based
  @hardware: the hardware type, MPU401_HW_XXXX
  @port: the base address of MPU401 port
  @info_flags: bitflags MPU401_INFO_XXX
  @irq: the ISA irq number, -1 if not to be allocated
  @rrawmidi: the pointer to store the new rawmidi instance
  Creates a new MPU-401 instance.
  Note that the rawmidi instance is returned on the rrawmidi argument,
  not the mpu401 instance itself.  To access to the mpu401 instance,
  cast from rawmidi->private_data (with struct snd_mpu401 magic-cast).
  Return: Zero if successful, or a negative error code.
 SPDX-License-Identifier: GPL-2.0-or-later
   Digital Audio (PCM) abstract layer
   Copyright (c) by Jaroslav Kysela <perex@perex.cz>
                    Abramo Bagnara <abramo@alsa-project.org>
  fill ring buffer with silence
  runtime->silence_start: starting pointer to silence area
  runtime->silence_filled: size filled with silence
  runtime->silence_threshold: threshold from application
  runtime->silence_size: maximal size from application
  when runtime->silence_size >= runtime->boundary - fill processed area with silence immediately
 initialization 
 dump also stack 
 do jiffies check 
 call with stream lock held 
 ! CONFIG_SND_PCM_XRUN_DEBUG 
		
		  provide audio timestamp derived from pointer position
		  add delay only if requested
	
	  re-take a driver timestamp to let apps detect if the reference tstamp
	  read by low-level hardware was provided with a delay
	
	  group pointer, time and jiffies reads to allow for more
	  accurate correlationscorrections.
	  The values are stored at the end of this routine after
	  corrections for hw_ptr position
 re-test in case tstamp type is not supported in hardware and was demoted to DEFAULT 
 we know that one period was processed 
 delta = "expected next hw_ptr" for in_interrupt != 0 
 check for double acknowledged interrupts 
 new_hw_ptr might be lower than old_hw_ptr in case when 
 pointer crosses the end of the ring buffer 
		
		  Without regular period interrupts, we have to check
		  the elapsed time to detect xruns.
 something must be really wrong 
 Do jiffies check only in xrun_debug mode 
	 Skip the jiffies check for hardwares with BATCH flag.
	  Such hardware usually just increases the position at each IRQ,
	  thus it can't give any strange position.
 move new_hw_ptr according jiffies not pos variable 
 use loop to avoid checks for delta overflows 
 the delta value is small or zero in most cases 
 align hw_base to buffer_size 
 reset values to proper state 
 CAUTION: call it with irq disabled 
  snd_pcm_set_ops - set the PCM operators
  @pcm: the pcm instance
  @direction: stream direction, SNDRV_PCM_STREAM_XXX
  @ops: the operator table
  Sets the given PCM operators to the pcm instance.
  snd_pcm_set_sync - set the PCM sync id
  @substream: the pcm substream
  Sets the PCM sync identifier for the card.
   Standard ioctl routine
  snd_interval_refine - refine the interval value of configurator
  @i: the interval value to refine
  @v: the interval value to refer to
  Refines the interval value with the reference value.
  The interval is changed to the range satisfying both intervals.
  The interval status (min, max, integer, etc.) are evaluated.
  Return: Positive if the value is changed, zero if it's not changed, or a
  negative error code.
 only exclude max value if also excluded before refine 
 only exclude min value if also excluded before refine 
  snd_interval_div - refine the interval value with division
  @a: dividend
  @b: divisor
  @c: quotient
  c = a  b
  Returns non-zero if the value is changed, zero if not changed.
  snd_interval_muldivk - refine the interval value
  @a: dividend 1
  @b: dividend 2
  @k: divisor (as integer)
  @c: result
  c = a  b  k
  Returns non-zero if the value is changed, zero if not changed.
  snd_interval_mulkdiv - refine the interval value
  @a: dividend 1
  @k: dividend 2 (as integer)
  @b: divisor
  @c: result
  c = a  k  b
  Returns non-zero if the value is changed, zero if not changed.
 ---- 
  snd_interval_ratnum - refine the interval value
  @i: interval to refine
  @rats_count: number of ratnum_t 
  @rats: ratnum_t array
  @nump: pointer to store the resultant numerator
  @denp: pointer to store the resultant denominator
  Return: Positive if the value is changed, zero if it's not changed, or a
  negative error code.
  snd_interval_ratden - refine the interval value
  @i: interval to refine
  @rats_count: number of struct ratden
  @rats: struct ratden array
  @nump: pointer to store the resultant numerator
  @denp: pointer to store the resultant denominator
  Return: Positive if the value is changed, zero if it's not changed, or a
  negative error code.
  snd_interval_list - refine the interval value from the list
  @i: the interval value to refine
  @count: the number of elements in the list
  @list: the value list
  @mask: the bit-mask to evaluate
  Refines the interval value from the list.
  When mask is non-zero, only the elements corresponding to bit 1 are
  evaluated.
  Return: Positive if the value is changed, zero if it's not changed, or a
  negative error code.
  snd_interval_ranges - refine the interval value from the list of ranges
  @i: the interval value to refine
  @count: the number of elements in the list of ranges
  @ranges: the ranges list
  @mask: the bit-mask to evaluate
  Refines the interval value from the list of ranges.
  When mask is non-zero, only the elements corresponding to bit 1 are
  evaluated.
  Return: Positive if the value is changed, zero if it's not changed, or a
  negative error code.
 Info constraints helpers 
  snd_pcm_hw_rule_add - add the hw-constraint rule
  @runtime: the pcm runtime instance
  @cond: condition bits
  @var: the variable to evaluate
  @func: the evaluation function
  @private: the private data pointer passed to function
  @dep: the dependent variables
  Return: Zero if successful, or a negative error code on failure.
  snd_pcm_hw_constraint_mask - apply the given bitmap mask constraint
  @runtime: PCM runtime instance
  @var: hw_params variable to apply the mask
  @mask: the bitmap mask
  Apply the constraint of the given bitmap mask to a 32-bit mask parameter.
  Return: Zero if successful, or a negative error code on failure.
 clear rest 
  snd_pcm_hw_constraint_mask64 - apply the given bitmap mask constraint
  @runtime: PCM runtime instance
  @var: hw_params variable to apply the mask
  @mask: the 64bit bitmap mask
  Apply the constraint of the given bitmap mask to a 64-bit mask parameter.
  Return: Zero if successful, or a negative error code on failure.
 clear rest 
  snd_pcm_hw_constraint_integer - apply an integer constraint to an interval
  @runtime: PCM runtime instance
  @var: hw_params variable to apply the integer constraint
  Apply the constraint of integer to an interval parameter.
  Return: Positive if the value is changed, zero if it's not changed, or a
  negative error code.
  snd_pcm_hw_constraint_minmax - apply a minmax range constraint to an interval
  @runtime: PCM runtime instance
  @var: hw_params variable to apply the range
  @min: the minimal value
  @max: the maximal value
  Apply the minmax range constraint to an interval parameter.
  Return: Positive if the value is changed, zero if it's not changed, or a
  negative error code.
  snd_pcm_hw_constraint_list - apply a list of constraints to a parameter
  @runtime: PCM runtime instance
  @cond: condition bits
  @var: hw_params variable to apply the list constraint
  @l: list
  Apply the list of constraints to an interval parameter.
  Return: Zero if successful, or a negative error code on failure.
  snd_pcm_hw_constraint_ranges - apply list of range constraints to a parameter
  @runtime: PCM runtime instance
  @cond: condition bits
  @var: hw_params variable to apply the list of range constraints
  @r: ranges
  Apply the list of range constraints to an interval parameter.
  Return: Zero if successful, or a negative error code on failure.
  snd_pcm_hw_constraint_ratnums - apply ratnums constraint to a parameter
  @runtime: PCM runtime instance
  @cond: condition bits
  @var: hw_params variable to apply the ratnums constraint
  @r: struct snd_ratnums constriants
  Return: Zero if successful, or a negative error code on failure.
  snd_pcm_hw_constraint_ratdens - apply ratdens constraint to a parameter
  @runtime: PCM runtime instance
  @cond: condition bits
  @var: hw_params variable to apply the ratdens constraint
  @r: struct snd_ratdens constriants
  Return: Zero if successful, or a negative error code on failure.
  snd_pcm_hw_constraint_msbits - add a hw constraint msbits rule
  @runtime: PCM runtime instance
  @cond: condition bits
  @width: sample bits width
  @msbits: msbits width
  This constraint will set the number of most significant bits (msbits) if a
  sample format with the specified width has been select. If width is set to 0
  the msbits will be set for any sample format with a width larger than the
  specified msbits.
  Return: Zero if successful, or a negative error code on failure.
  snd_pcm_hw_constraint_step - add a hw constraint step rule
  @runtime: PCM runtime instance
  @cond: condition bits
  @var: hw_params variable to apply the step constraint
  @step: step size
  Return: Zero if successful, or a negative error code on failure.
  snd_pcm_hw_constraint_pow2 - add a hw constraint power-of-2 rule
  @runtime: PCM runtime instance
  @cond: condition bits
  @var: hw_params variable to apply the power-of-2 constraint
  Return: Zero if successful, or a negative error code on failure.
  snd_pcm_hw_rule_noresample - add a rule to allow disabling hw resampling
  @runtime: PCM runtime instance
  @base_rate: the rate at which the hardware does not resample
  Return: Zero if successful, or a negative error code on failure.
  snd_pcm_hw_param_value - return @params field @var value
  @params: the hw_params instance
  @var: parameter to retrieve
  @dir: pointer to the direction (-1,0,1) or %NULL
  Return: The value for field @var if it's fixed in configuration space
  defined by @params. -%EINVAL otherwise.
  snd_pcm_hw_param_first - refine config space and return minimum value
  @pcm: PCM instance
  @params: the hw_params instance
  @var: parameter to retrieve
  @dir: pointer to the direction (-1,0,1) or %NULL
  Inside configuration space defined by @params remove from @var all
  values > minimum. Reduce configuration space accordingly.
  Return: The minimum, or a negative error code on failure.
  snd_pcm_hw_param_last - refine config space and return maximum value
  @pcm: PCM instance
  @params: the hw_params instance
  @var: parameter to retrieve
  @dir: pointer to the direction (-1,0,1) or %NULL
  Inside configuration space defined by @params remove from @var all
  values < maximum. Reduce configuration space accordingly.
  Return: The maximum, or a negative error code on failure.
  snd_pcm_lib_ioctl - a generic PCM ioctl callback
  @substream: the pcm substream instance
  @cmd: ioctl command
  @arg: ioctl argument
  Processes the generic ioctl commands for PCM.
  Can be passed as the ioctl callback for PCM ops.
  Return: Zero if successful, or a negative error code on failure.
  snd_pcm_period_elapsed_under_stream_lock() - update the status of runtime for the next period
 						under acquired lock of PCM substream.
  @substream: the instance of pcm substream.
  This function is called when the batch of audio data frames as the same size as the period of
  buffer is already processed in audio data transmission.
  The call of function updates the status of runtime with the latest position of audio data
  transmission, checks overrun and underrun over buffer, awaken user processes from waiting for
  available audio data frames, sampling audio timestamp, and performs stop or drain the PCM
  substream according to configured threshold.
  The function is intended to use for the case that PCM driver operates audio data frames under
  acquired lock of PCM substream; e.g. in callback of any operation of &snd_pcm_ops in process
  context. In any interrupt context, it's preferrable to use ``snd_pcm_period_elapsed()`` instead
  since lock of PCM substream should be acquired in advance.
  Developer should pay enough attention that some callbacks in &snd_pcm_ops are done by the call of
  function:
  - .pointer - to retrieve current position of audio data transmission by frame count or XRUN state.
  - .trigger - with SNDRV_PCM_TRIGGER_STOP at XRUN or DRAINING state.
  - .get_time_info - to retrieve audio time stamp if needed.
  Even if more than one periods have elapsed since the last call, you have to call this only once.
  snd_pcm_period_elapsed() - update the status of runtime for the next period by acquiring lock of
 			      PCM substream.
  @substream: the instance of PCM substream.
  This function is mostly similar to ``snd_pcm_period_elapsed_under_stream_lock()`` except for
  acquiring lock of PCM substream voluntarily.
  It's typically called by any type of IRQ handler when hardware IRQ occurs to notify event that
  the batch of audio data frames as the same size as the period of buffer is already processed in
  audio data transmission.
  Wait until avail_min data becomes available
  Returns a negative error code if any error occurs during operation.
  The available space is stored on availp.  When err = 0 and avail = 0
  on the capture stream, it indicates the stream is in DRAINING state.
 use wait time from substream if available 
		
		  We need to check if space became available already
		  (and thus the wakeup happened already) first to close
		  the race of space already having become available.
		  This check must happen after been added to the waitqueue
		  and having current state be INTERRUPTIBLE.
 indicate draining 
 calculate the target DMA-buffer position to be writtenread 
 default copy_user ops for write; used for both interleaved and non- modes 
 default copy_kernel ops for write 
 fill silence instead of copy data; called as a transfer helper
  from __snd_pcm_lib_write() or directly from noninterleaved_copy() when
  a NULL buffer is passed
 default copy_user ops for read; used for both interleaved and non- modes 
 default copy_kernel ops for read 
 call transfer function with the converted pointers and sizes;
  for interleaved mode, it's one shot for all samples
 convert to bytes 
 call transfer function with the converted pointers and sizes for each
  non-interleaved channel; when buffer is NULL, silencing instead of copying
	 convert to bytes; note that it's not frames_to_bytes() here.
	  in non-interleaved mode, we copy for each channel, thus
	  each copy is n_samples bytes x channels = whole frames.
 fill silence on the given buffer position;
  called from snd_pcm_playback_silence()
 sanity-check for readwrite methods 
 update to the given appl_ptr and call ack callback if needed;
  when an error is returned, take back to the original value
 the common loop for readwrite data 
	
	  If size < start_threshold, wait indefinitely. Another
	  thread may start capture
 draining 
  standard channel mapping helpers
 default channel maps for multi-channel playbacks, up to 8 channels 
 alternative channel maps with CLFE <-> surround swapped for 68 channels 
 get callback for channel map ctl element
  stores the channel position firstly matching with the current channels
 no channels set 
 tlv callback for channel map ctl element
  expands the pre-defined channel maps in a form of TLV
  snd_pcm_add_chmap_ctls - create channel-mapping control elements
  @pcm: the assigned PCM instance
  @stream: stream direction
  @chmap: channel map elements (for query)
  @max_channels: the max number of channels for the stream
  @private_value: the value passed to each kcontrol's private_value field
  @info_ret: store struct snd_pcm_chmap instance if non-NULL
  Create channel-mapping control elements assigned to the given PCM stream(s).
  Return: Zero if successful, or a negative error value.
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (c) by Jaroslav Kysela <perex@perex.cz>
                    Takashi Iwai <tiwai@suse.de>
   Generic memory allocators
 a cast to gfp flag from the dev pointer; for CONTINUOUS and VMALLOC types 
  snd_dma_alloc_dir_pages - allocate the buffer area according to the given
 	type and direction
  @type: the DMA buffer type
  @device: the device pointer
  @dir: DMA direction
  @size: the buffer size to allocate
  @dmab: buffer allocation record to store the allocated data
  Calls the memory-allocator function for the corresponding
  buffer type.
  Return: Zero if the buffer with the given size is allocated successfully,
  otherwise a negative value on error.
  snd_dma_alloc_pages_fallback - allocate the buffer area according to the given type with fallback
  @type: the DMA buffer type
  @device: the device pointer
  @size: the buffer size to allocate
  @dmab: buffer allocation record to store the allocated data
  Calls the memory-allocator function for the corresponding
  buffer type.  When no space is left, this function reduces the size and
  tries to allocate again.  The size actually allocated is stored in
  res_size argument.
  Return: Zero if the buffer with the given size is allocated successfully,
  otherwise a negative value on error.
  snd_dma_free_pages - release the allocated buffer
  @dmab: the buffer allocation record to release
  Releases the allocated buffer via snd_dma_alloc_pages().
 called by devres 
  snd_devm_alloc_dir_pages - allocate the buffer and manage with devres
  @dev: the device pointer
  @type: the DMA buffer type
  @dir: DMA direction
  @size: the buffer size to allocate
  Allocate buffer pages depending on the given type and manage using devres.
  The pages will be released automatically at the device removal.
  Unlike snd_dma_alloc_pages(), this function requires the real device pointer,
  hence it can't work with SNDRV_DMA_TYPE_CONTINUOUS or
  SNDRV_DMA_TYPE_VMALLOC type.
  The function returns the snd_dma_buffer object at success, or NULL if failed.
  snd_dma_buffer_mmap - perform mmap of the given DMA buffer
  @dmab: buffer allocation information
  @area: VM area information
  snd_dma_buffer_sync - sync DMA buffer between CPU and device
  @dmab: buffer allocation information
  @mode: sync mode
 CONFIG_HAS_DMA 
  snd_sgbuf_get_addr - return the physical address at the corresponding offset
  @dmab: buffer allocation information
  @offset: offset in the ring buffer
  snd_sgbuf_get_page - return the physical page at the corresponding offset
  @dmab: buffer allocation information
  @offset: offset in the ring buffer
  snd_sgbuf_get_chunk_size - compute the max chunk size with continuous pages
 	on sg-buffer
  @dmab: buffer allocation information
  @ofs: offset in the ring buffer
  @size: the requested size
  Continuous pages allocator
  VMALLOC allocator
 the last byte address 
 check page continuity 
 ok, all on continuous pages 
  IRAM allocator
 Assign the pool into private_data field 
	 Internal memory might have limited size and no enough space,
	  so if we fail to malloc, try to fetch memory traditionally.
 CONFIG_GENERIC_ALLOCATOR 
 compound page lets parts be mapped  \
 don't trigger OOM-killer  \
 no stack trace print - this call is non-critical 
  Coherent device pages allocator
  Write-combined pages
 On x86, share the same ops as the standard dev ops 
 CONFIG_X86 
 CONFIG_X86 
  Non-contiguous pages allocator
 the last byte address 
 check page continuity 
 ok, all on continuous pages 
  Non-coherent pages allocator
 CONFIG_HAS_DMA 
  Entry points
 CONFIG_GENERIC_ALLOCATOR 
 CONFIG_HAS_DMA 
 SPDX-License-Identifier: GPL-2.0-only
   PCM DRM helpers
  snd_pcm_create_iec958_consumer_default - create default consumer format IEC958 channel status
  @cs: channel status buffer, at least four bytes
  @len: length of channel status buffer
  Create the consumer format channel status data in @cs of maximum size
  @len. When relevant, the configuration-dependant bits will be set as
  unspecified.
  Drivers should then call einter snd_pcm_fill_iec958_consumer() or
  snd_pcm_fill_iec958_consumer_hw_params() to replace these unspecified
  bits by their actual values.
  Drivers may wish to tweak the contents of the buffer after creation.
  Returns: length of buffer, or negative error code if something failed.
 Assume 24-bit width for 32-bit samples. 
  snd_pcm_fill_iec958_consumer - Fill consumer format IEC958 channel status
  @runtime: pcm runtime structure with ->rate filled in
  @cs: channel status buffer, at least four bytes
  @len: length of channel status buffer
  Fill the unspecified bits in an IEC958 status bits array using the
  parameters of the PCM runtime @runtime.
  Drivers may wish to tweak the contents of the buffer after its been
  filled.
  Returns: length of buffer, or negative error code if something failed.
  snd_pcm_fill_iec958_consumer_hw_params - Fill consumer format IEC958 channel status
  @params: the hw_params instance for extracting rate and sample format
  @cs: channel status buffer, at least four bytes
  @len: length of channel status buffer
  Fill the unspecified bits in an IEC958 status bits array using the
  parameters of the PCM hardware parameters @params.
  Drivers may wish to tweak the contents of the buffer after its been
  filled..
  Returns: length of buffer, or negative error code if something failed.
  snd_pcm_create_iec958_consumer - create consumer format IEC958 channel status
  @runtime: pcm runtime structure with ->rate filled in
  @cs: channel status buffer, at least four bytes
  @len: length of channel status buffer
  Create the consumer format channel status data in @cs of maximum size
  @len corresponding to the parameters of the PCM runtime @runtime.
  Drivers may wish to tweak the contents of the buffer after creation.
  Returns: length of buffer, or negative error code if something failed.
  snd_pcm_create_iec958_consumer_hw_params - create IEC958 channel status
  @params: the hw_params instance for extracting rate and sample format
  @cs: channel status buffer, at least four bytes
  @len: length of channel status buffer
  Create the consumer format channel status data in @cs of maximum size
  @len corresponding to the parameters of the PCM runtime @runtime.
  Drivers may wish to tweak the contents of the buffer after creation.
  Returns: length of buffer, or negative error code if something failed.
 SPDX-License-Identifier: GPL-2.0-or-later
   Digital Audio (PCM) abstract layer
   Copyright (c) by Jaroslav Kysela <perex@perex.cz>
   Compatibility
 define group lock helpers 
  snd_pcm_stream_lock - Lock the PCM stream
  @substream: PCM substream
  This locks the PCM stream's spinlock or mutex depending on the nonatomic
  flag of the given substream.  This also takes the global link rw lock
  (or rw sem), too, for avoiding the race with linked streams.
  snd_pcm_stream_unlock - Unlock the PCM stream
  @substream: PCM substream
  This unlocks the PCM stream that has been locked via snd_pcm_stream_lock().
  snd_pcm_stream_lock_irq - Lock the PCM stream
  @substream: PCM substream
  This locks the PCM stream like snd_pcm_stream_lock() and disables the local
  IRQ (only when nonatomic is false).  In nonatomic case, this is identical
  as snd_pcm_stream_lock().
  snd_pcm_stream_unlock_irq - Unlock the PCM stream
  @substream: PCM substream
  This is a counter-part of snd_pcm_stream_lock_irq().
  snd_pcm_stream_unlock_irqrestore - Unlock the PCM stream
  @substream: PCM substream
  @flags: irq flags
  This is a counter-part of snd_pcm_stream_lock_irqsave().
 Run PCM ioctl ops 
 macro for simplified cast 
		 we can't know the device, so just assume that the driver does
		  everything right
 This parameter is not requested to change by a caller. 
 Set corresponding flag so that the caller gets it. 
 This parameter is not requested to change by a caller. 
 Set corresponding flag so that the caller gets it. 
	
	  Each application of rule has own sequence number.
	 
	  Each member of 'rstamps' array represents the sequence number of
	  recent application of corresponding rule.
	
	  Each member of 'vstamps' array represents the sequence number of
	  recent application of rule in which corresponding parameters were
	  changed.
	 
	  In initial state, elements corresponding to parameters requested by
	  a caller is 1. For unrequested parameters, corresponding members
	  have 0 so that the parameters are never changed anymore.
 Due to the above design, actual sequence number starts at 2. 
 Apply all rules in order. 
		
		  Check condition bits of this rule. When the rule has
		  some condition bits, parameter without the bits is
		  never processed. SNDRV_PCM_HW_PARAMS_NO_PERIOD_WAKEUP
		  is an example of the condition bits.
		
		  The 'deps' array includes maximum four dependencies
		  to SNDRV_PCM_HW_PARAM_XXXs for this rule. The fifth
		  member of this array is a sentinel and should be
		  negative value.
		 
		  This rule should be processed in this time when dependent
		  parameters were changed at former applications of the other
		  rules.
		
		  When the parameter is changed, notify it to the caller
		  by corresponding returned bit, then preparing for next
		  iteration.
 Iterate to evaluate all rules till no parameters are changed. 
 invalid 
 take 75% of period time as the deadline 
  snd_pcm_hw_params_choose - choose a configuration defined by @params
  @pcm: PCM instance
  @params: the hw_params instance
  Choose one configuration from configuration space defined by @params.
  The configuration chosen is that obtained fixing in this order:
  first access, first format, first subformat, min channels,
  min rate, min period time, max buffer size, min tick time
  Return: Zero if successful, or a negative error code on failure.
 Keep old parameter to trace. 
 Trace the changed parameter. 
 Default sw params 
 clear the buffer for avoiding possible kernel info leaks 
	 hardware might be unusable from this time,
	   so we force application to retry to set
 backwards compatible behavior 
 backwards compatibility, no report provided in COMPAT mode 
 get tstamp only in fallback mode and only if enabled 
	
	  with extension, parameters are readwrite,
	  get audio_tstamp_data from user,
	  ignore rest of status structure
	
	  with extension, parameters are readwrite,
	  get audio_tstamp_data from user,
	  ignore rest of status structure
   this functions is core for handling of linked stream
   Note: the stream state might be changed also on failure
   Note2: call with calling stream lock + link lock
 failed stream 
 unlock all 
 unlock streams 
 end 
   Note: call with stream lock
  Unref and unlock the group, but keep the stream lock;
  when the group becomes empty and no longer referred, destroy itself
  Lock the group inside a stream lock and reference it;
  return the locked group object, or NULL if not linked
 block freeing the group object 
 OK 
 re-lock for avoiding ABBA deadlock 
 check the group again; the above opens a small race window 
 OK 
 group changed, try again 
   Note: call with stream lock
   Note: don't use any locks before
 Guarantee the group members won't change during non-atomic action 
  start callbacks
  snd_pcm_start - start all linked streams
  @substream: the PCM substream instance
  Return: Zero if successful, or a negative error code.
  The stream lock must be acquired before calling this function.
 take the stream lock and start the streams 
  stop callbacks
 unconditionally stop all substreams 
  snd_pcm_stop - try to stop all running streams in the substream group
  @substream: the PCM substream instance
  @state: PCM state after stopping the stream
  The state of each stream is then changed to the given state unconditionally.
  Return: Zero if successful, or a negative error code.
  snd_pcm_drain_done - stop the DMA only when the given stream is playback
  @substream: the PCM substream
  After stopping, the state is changed to SETUP.
  Unlike snd_pcm_stop(), this affects only the given stream.
  Return: Zero if successful, or a negative error code.
  snd_pcm_stop_xrun - stop the running streams as XRUN
  @substream: the PCM substream instance
  This stops the given running substream (and all linked substreams) as XRUN.
  Unlike snd_pcm_stop(), this function takes the substream lock by itself.
  Return: Zero if successful, or a negative error code.
  pause callbacks: pass boolean (to start pause or resume) as state argument
	 some drivers might use hw_ptr to recover from the pause -
	 The jiffies check in snd_pcm_update_hw_ptr() is done by
	  a delta between the current jiffies, this gives a large enough
	  delta, effectively to skip the check once.
  Pushrelease the pause for all linked streams.
 suspend callback: state argument ignored 
 unresumable PCM state; return -EBUSY for skipping suspend 
 suspend unconditionally 
  snd_pcm_suspend - trigger SUSPEND to all linked streams
  @substream: the PCM substream
  After this call, all streams are changed to SUSPENDED state.
  Return: Zero if successful, or a negative error code.
  snd_pcm_suspend_all - trigger SUSPEND to all substreams in the given pcm
  @pcm: the PCM instance
  After this call, all streams are changed to SUSPENDED state.
  Return: Zero if successful (or @pcm is %NULL), or a negative error code.
 FIXME: the openclose code should lock this as well 
		
		  Skip BE dai link PCM's that are internal and may
		  not have their substream ops set.
 resume callbacks: state argument ignored 
 DMA not running previously? 
 CONFIG_PM 
  xrun ioctl
  Change the RUNNING stream(s) to XRUN state.
 already there 
  reset ioctl
 reset callbacks:  state argument ignored 
  prepare ioctl
 pass f_flags as state argument 
  snd_pcm_prepare - prepare the PCM substream to be triggerable
  @substream: the PCM substream instance
  @file: file to refer f_flags
  Return: Zero if successful, or a negative error code.
  drain ioctl
 drain init callbacks: state argument ignored 
 start playback stream if possible 
 stop running stream 
  Drain the stream(s).
  When the substream is linked, sync until the draining of all playback streams
  is finished.
  After this call, all streams are supposed to be either SETUP or DRAINING
  (capture only) state.
 resume pause 
 pre-startstop - all running streams are changed to DRAINING state 
 in non-blocking, we don't wait in ioctl but let caller poll 
 find a substream to drain 
 all drained 
  drop ioctl
  Immediately put all linked substreams into SETUP state.
 resume pause 
 runtime->control->appl_ptr = runtime->status->hw_ptr; 
  PCM link handling
 assigned, don't free this one below 
 detach the last stream, too 
  hw configurator
 ignore invalid formats 
 ignore invalid formats 
 FIXME: remove 
 FIXME: this belong to lowlevel 
	 automatically set EXPLICIT_SYNC flag in the managed mode whenever
	  the DMA buffer requires it
 block until the device gets woken up as it may touch the hardware 
 check and update PCM state; return 0 or a negative error
  call this inside PCM lock
 increase the appl_ptr; returns the processed frames or a negative error 
 decrease the appl_ptr; returns the processed frames or zero for error 
	 NOTE: we return zero for errors because PulseAudio gets depressed
	  upon receiving an error from rewind ioctl and stops processing
	  any longer.  Returning zero means that no rewind is done, so
	  it's not absolutely wrong to answer like that.
 recalcuate the boundary within 32bit 
 FIXME: we should consider the boundary for the sync from app 
 just for compatibility 
  snd_pcm_kernel_ioctl - Execute PCM ioctl in the kernel-space
  @substream: PCM substream
  @cmd: IOCTL cmd
  @arg: IOCTL argument
  The function is provided primarily for OSS layer and USB gadget drivers,
  and it allows only the limited set of ioctls (hw_params, sw_params,
  prepare, start, drain, drop, forward).
 provided only for OSS; capture-only and no value returned 
  mmap support
  Only on coherent architectures, we can mmap the status and the control records
  for effcient data transfer.  On others, we have to use HWSYNC ioctl...
  mmap status record
  mmap control record
	 If drivers require the explicit sync (typically for non-coherent
	  pages), we have to disable the mmap of status and control data
	  to enforce the control via SYNC_PTR ioctl.
	 See pcm_control_mmap_allowed() below.
	  Since older alsa-lib requires both status and control mmaps to be
	  coupled, we have to disable the status mmap for old alsa-lib, too.
 see above 
	 Disallow the control mmap when SYNC_APPLPTR flag is set;
	  it enforces the user-space to fall back to snd_pcm_sync_ptr(),
	  thus it effectively assures the manual update of appl_ptr.
 ! coherent mmap 
  don't support mmap for status and control records.
 coherent mmap 
  fault callback for mmapping a RAM page
  mmap the DMA buffer on RAM
  snd_pcm_lib_default_mmap - Default PCM data mmap function
  @substream: PCM substream
  @area: VMA
  This is the default mmap handler for PCM data.  When mmap pcm_ops is NULL,
  this function is invoked implicitly.
 mmap with fault handler 
  mmap the DMA buffer on IO memory area
  snd_pcm_lib_mmap_iomem - Default PCM data mmap function for IO mem
  @substream: PCM substream
  @area: VMA
  When your hardware uses the iomapped pages as the hardware buffer and
  wants to mmap it, pass this function as mmap pcm_ops.  Note that this
  is supposed to work only on limited architectures.
 SNDRV_PCM_INFO_MMAP 
  mmap DMA buffer
  ioctl32 compat
   To be removed helpers to keep binary compatibility
 CONFIG_SND_SUPPORT_OLD_API 
   Register section
 SPDX-License-Identifier: GPL-2.0-or-later
   Advanced Linux Sound Architecture
   Copyright (c) by Jaroslav Kysela <perex@perex.cz>
 this one holds the actual max. card number currently available.
  as default, it's identical with cards_limit option.  when more
  modules are loaded manually, this limit number increases, too.
  snd_request_card - try to load the card module
  @card: the card number
  Tries to load the module "snd-card-X" for the given card number
  via request_module.  Returns immediately if already loaded.
 modular kernel 
  snd_lookup_minor_data - get user data of a registered device
  @minor: the minor number
  @type: device type (SNDRV_DEVICE_TYPE_XXX)
  Checks that a minor device with the specified type is registered, and returns
  its user data pointer.
  This function increments the reference counter of the card instance
  if an associated instance with the given minor number and type is found.
  The caller must call snd_card_unref() appropriately later.
  Return: The user data pointer if the specified device is found. %NULL
  otherwise.
 release lock temporarily 
 devaloadC? 
 devaloadSEQ 
 reacuire lock 
 !CONFIG_MODULES 
 CONFIG_MODULES 
 static minors for module auto loading 
 skip static minors still used for module auto loading 
  snd_register_device - Register the ALSA device file for the card
  @type: the device type, SNDRV_DEVICE_TYPE_XXX
  @card: the card instance
  @dev: the device index
  @f_ops: the file operations
  @private_data: user pointer for f_ops->open()
  @device: the device to register
  Registers an ALSA device file for the given card.
  The operators have to be set in reg parameter.
  Return: Zero if successful, or a negative error code on failure.
  snd_unregister_device - unregister the device on the given card
  @dev: the device instance
  Unregisters the device file already registered via
  snd_register_device().
  Return: Zero if successful, or a negative error code on failure.
   INFO PART
 freed in error path 
 CONFIG_SND_PROC_FS 
   INIT PART
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (C) 2012, Analog Devices Inc.
 	Author: Lars-Peter Clausen <lars@metafoo.de>
   Based on:
 	imx-pcm-dma-mx2.c, Copyright 2009 Sascha Hauer <s.hauer@pengutronix.de>
 	mxs-pcm.c, Copyright (C) 2011 Freescale Semiconductor, Inc.
 	ep93xx-pcm.c, Copyright (C) 2006 Lennert Buytenhek <buytenh@wantstofly.org>
 		      Copyright (C) 2006 Applied Data Systems
  snd_hwparams_to_dma_slave_config - Convert hw_params to dma_slave_config
  @substream: PCM substream
  @params: hw_params
  @slave_config: DMA slave config
  This function can be used to initialize a dma_slave_config from a substream
  and hw_params in a dmaengine based PCM driver implementation.
  snd_dmaengine_pcm_set_config_from_dai_data() - Initializes a dma slave config
   using DAI DMA data.
  @substream: PCM substream
  @dma_data: DAI DMA data
  @slave_config: DMA slave configuration
  Initializes the {dst,src}_addr, {dst,src}_maxburst, {dst,src}_addr_width and
  slave_id fields of the DMA slave config from the same fields of the DAI DMA
  data struct. The src and dst fields will be initialized depending on the
  direction of the substream. If the substream is a playback stream the dst
  fields will be initialized, if it is a capture stream the src fields will be
  initialized. The {dst,src}_addr_width field will only be initialized if the
  SND_DMAENGINE_PCM_DAI_FLAG_PACK flag is set or if the addr_width field of
  the DAI DMA data struct is not equal to DMA_SLAVE_BUSWIDTH_UNDEFINED. If
  both conditions are met the latter takes priority.
  snd_dmaengine_pcm_trigger - dmaengine based PCM trigger implementation
  @substream: PCM substream
  @cmd: Trigger command
  Returns 0 on success, a negative error code otherwise.
  This function can be used as the PCM trigger callback for dmaengine based PCM
  driver implementations.
  snd_dmaengine_pcm_pointer_no_residue - dmaengine based PCM pointer implementation
  @substream: PCM substream
  This function is deprecated and should not be used by new drivers, as its
  results may be unreliable.
  snd_dmaengine_pcm_pointer - dmaengine based PCM pointer implementation
  @substream: PCM substream
  This function can be used as the PCM pointer callback for dmaengine based PCM
  driver implementations.
  snd_dmaengine_pcm_request_channel - Request channel for the dmaengine PCM
  @filter_fn: Filter function used to request the DMA channel
  @filter_data: Data passed to the DMA filter function
  Returns NULL or the requested DMA channel.
  This function request a DMA channel for usage with dmaengine PCM.
  snd_dmaengine_pcm_open - Open a dmaengine based PCM substream
  @substream: PCM substream
  @chan: DMA channel to use for data transfers
  Returns 0 on success, a negative error code otherwise.
  The function should usually be called from the pcm open callback. Note that
  this function will use private_data field of the substream's runtime. So it
  is not available to your pcm driver implementation.
  snd_dmaengine_pcm_open_request_chan - Open a dmaengine based PCM substream and request channel
  @substream: PCM substream
  @filter_fn: Filter function used to request the DMA channel
  @filter_data: Data passed to the DMA filter function
  Returns 0 on success, a negative error code otherwise.
  This function will request a DMA channel using the passed filter function and
  data. The function should usually be called from the pcm open callback. Note
  that this function will use private_data field of the substream's runtime. So
  it is not available to your pcm driver implementation.
  snd_dmaengine_pcm_close - Close a dmaengine based PCM substream
  @substream: PCM substream
  snd_dmaengine_pcm_close_release_chan - Close a dmaengine based PCM
 					  substream and release channel
  @substream: PCM substream
  Releases the DMA channel associated with the PCM substream.
  snd_dmaengine_pcm_refine_runtime_hwparams - Refine runtime hw params
  @substream: PCM substream
  @dma_data: DAI DMA data
  @hw: PCM hw params
  @chan: DMA channel to use for data transfers
  Returns 0 on success, a negative error code otherwise.
  This function will query DMA capability, then refine the pcm hardware
  parameters.
	
	  If SND_DMAENGINE_PCM_DAI_FLAG_PACK is set keep
	  hw.formats set to 0, meaning no restrictions are in place.
	  In this case it's the responsibility of the DAI driver to
	  provide the supported format information.
		
		  Prepare formats mask for validallowed sample types. If the
		  dma does not have support for the given physical word size,
		  it needs to be masked out so user space can not use the
		  format which produces corrupted audio.
		  In case the dma driver does not implement the slave_caps the
		  default assumption is that it supports 1, 2 and 4 bytes
		  widths.
			
			  Enable only samples with DMA supported physical
			  widths
 Unsupported types 
 SPDX-License-Identifier: GPL-2.0-or-later
  ALSA timer back-end using hrtimer
  Copyright (C) 2008 Takashi Iwai
 10^9 in sec 
 fast path 
 calculate the drift 
 just to be sure 
 skip startstop 
  entry functions
 Create a new timer and set up the fields 
 lower the limit 
 remember this 
 SPDX-License-Identifier: GPL-2.0-or-later
   Misc and compatibility things
   Copyright (c) by Jaroslav Kysela <perex@perex.cz>
 CONFIG_SND_DEBUG 
 strip the leading path if the given path is absolute 
 Ignore KERN_CONT. We print filename:line for each piece. 
  snd_pci_quirk_lookup_id - look up a PCI SSID quirk list
  @vendor: PCI SSV id
  @device: PCI SSD id
  @list: quirk list, terminated by a null entry
  Look through the given quirk list and finds a matching entry
  with the same PCI SSID.  When subdevice is 0, all subdevice
  values may match.
  Returns the matched entry pointer, or NULL if nothing matched.
  snd_pci_quirk_lookup - look up a PCI SSID quirk list
  @pci: pci_dev handle
  @list: quirk list, terminated by a null entry
  Look through the given quirk list and finds a matching entry
  with the same PCI SSID.  When subdevice is 0, all subdevice
  values may match.
  Returns the matched entry pointer, or NULL if nothing matched.
 SPDX-License-Identifier: GPL-2.0-or-later
   Advanced Linux Sound Architecture
   Copyright (c) by Jaroslav Kysela <perex@perex.cz>
 NOTE: This function increments the refcount of the associated card like
  snd_lookup_minor_data(); the caller must call snd_card_unref() appropriately
 ignore silently 
   INFO PART
 freed in error path 
 CONFIG_SND_PROC_FS 
 SPDX-License-Identifier: GPL-2.0-or-later
   LED state routines for driver control interface
   Copyright (c) 2021 by Jaroslav Kysela <perex@perex.cz>
  A note for callers:
    The two static variables info and value are protected using snd_ctl_led_mutex.
 the card may not be registered (active) at this point 
 noop  break;
 the register callback is already called with held card->controls_rwsem 
  sysfs
  These types of input strings are accepted:
    unsigned integer - numid (equivaled to numid=UINT)
    string - basic mixer name (equivalent to iface=MIXER,name=STR)
    numid=UINT
    [iface=MIXER,][device=UINT,][subdevice=UINT,]name=STR[,index=UINT]
  Control layer registration
 SPDX-License-Identifier: GPL-2.0-only
  Virtual master and follower controls
   Copyright (c) 2008 by Takashi Iwai <tiwai@suse.de>
  a subset of information returned via ctl info callback
 value type 
 item count 
 min, max values 
  link master - this contains a list of follower controls that are
  identical types, i.e. info returns the same value type and value
  ranges, but may have different number of counts.
  The master control is so far only mono volumeswitch for simplicity.
  The same value will be applied to all followers.
 the master value 
  link follower - this contains a follower control element
  It fakes the control callbacks with additional attenuation by the
  master control.  A follower may have either one or two channels.
 current values 
 original kcontrol pointer 
 the copy of original control entry 
 get the follower ctl info and save the initial values 
 already initialized 
 initialize master volume 
 already initialized 
 always mono 
 set full volume as default (= no attenuation) 
 max master volume is supposed to be 0 dB 
  ctl callbacks for followers
 FIXME: this assumes that the max volume is 0 dB 
  Add a follower control to the group with the given master control
  All followers must be the same type (returning the same information
  via info callback).  The function doesn't check it, so it's your
  responsibility.
  Also, some additional limitations:
  - at most two channels
  - logarithmic volume control (dB level), no linear volume
  - master can only attenuate the volume, no gain
 override callbacks 
  ctl callbacks for master controls
 free all follower links and retore the original follower kctls 
 keep the current linked-list 
  snd_ctl_make_virtual_master - Create a virtual master control
  @name: name string of the control element to create
  @tlv: optional TLV int array for dB information
  Creates a virtual master control with the given name string.
  After creating a vmaster element, you can add the follower controls
  via snd_ctl_add_follower() or snd_ctl_add_follower_uncached().
  The optional argument @tlv can be used to specify the TLV information
  for dB scale of the master control.  It should be a single element
  with #SNDRV_CTL_TLVT_DB_SCALE, #SNDRV_CTL_TLV_DB_MINMAX or
  #SNDRV_CTL_TLVT_DB_MINMAX_MUTE type, and should be the max 0dB.
  Return: The created control element, or %NULL for errors (ENOMEM).
 override some callbacks 
 additional (constant) TLV read 
  snd_ctl_add_vmaster_hook - Add a hook to a vmaster control
  @kcontrol: vmaster kctl element
  @hook: the hook function
  @private_data: the private_data pointer to be saved
  Adds the given hook to the vmaster control element so that it's called
  at each time when the value is changed.
  Return: Zero.
  snd_ctl_sync_vmaster - Sync the vmaster followers and hook
  @kcontrol: vmaster kctl element
  @hook_only: sync only the hook
  Forcibly call the put callback of each follower and call the hook function
  to synchronize with the current value of the given vmaster element.
  NOP when NULL is passed to @kcontrol.
  snd_ctl_apply_vmaster_followers - Apply function to each vmaster follower
  @kctl: vmaster kctl element
  @func: function to apply
  @arg: optional function argument
  Apply the function @func to each follower kctl of the given vmaster kctl.
  Returns 0 if successful, or a negative error code.
 SPDX-License-Identifier: GPL-2.0-or-later
   Timers abstract layer
   Copyright (c) by Jaroslav Kysela <perex@perex.cz>
 internal flags 
 enhanced read with timestamps and events 
 trigger tstamp 
 Timestamp - last update 
 current period resolution in ns 
 counter of master tick lost 
 count of read queue overruns 
 used queue size 
 reserved 
 Timestamp - last update 
 current period resolution in ns 
 counter of master tick lost 
 count of read queue overruns 
 used queue size 
 reserved 
 list of timers 
 list of slave instances 
 lock for slave active lists 
  create a timer instance with the given owner string.
  find a timer instance from the given timer id
 move the slave if it belongs to the master; return 1 if match 
  look for a master instance matching with the slave id of the given slave.
  when found, relink the open_link of the slave.
  call this with register_mutex down.
 FIXME: it's really dumb to look up all entries.. 
 match found or error 
  look for slave instances matching with the slave id of the given master.
  when found, relink the open_link of slaves.
  call this with register_mutex down.
 check all pending slaves 
  open a timer instance
  when opening a master, the slave id must be here given.
 open a slave instance 
 open a master instance 
 take a card refcount for safe disconnection 
 put_device() is called after unlock for avoiding deadlock 
  close a timer instance
  call this with register_mutex down.
 force to stop the timer 
 wait, until the active callback is finished 
 remove slave links 
 slave doesn't need to release timer resources below 
 release a card refcount for safe disconnection 
  close a timer instance
 put_device() is called after unlock for avoiding deadlock 
 convert to SNDRV_TIMER_EVENT_MXXX 
 startcontinue a master timer 
 delayed start 
 startcontinue a slave timer 
 delayed start 
 stoppause a master timer 
 stoppause a slave timer 
   start the timer instance
  stop the timer instance.
  do not call this from the timer callback!
  start again..  the tick is kept.
 timer can continue only after pause 
  pause.. remember the ticks left
  reschedule the timer
  start pending instances and check the scheduling ticks.
  when the scheduling ticks is changed set CHANGE flag to reprogram the timer.
 call callbacks in timer ack list 
 remove from ack_list and make empty 
 clear pending instances from ack list 
  timer work
  timer interrupt
  ticks_left is usually equal to timer->sticks.
 remember the current resolution 
	 loop for all active instances
	  Here we cannot use list_for_each_entry because the active_list of a
	  processed instance is relinked to done_list_head before the callback
	  is called.
 not expired 
 restart timer 
 now process all fast callbacks 
 do we have any slow callbacks? 
 default limit per timer 
 conflicts.. 
 wake up pending sleepers 
  exported functions for global timers
   System timer
   Info interface
 !CONFIG_SND_PROC_FS 
   USER SPACE interface
 first item 
 Don't allow resolution less than 1ms 
 start timer instead of continue if it's not used before 
 too late 
 unregister the system timer 
   ENTRY functions
 SPDX-License-Identifier: GPL-2.0-only
   compress_core.c - compress offload core
   Copyright (C) 2011 Intel Corporation
   Authors:	Vinod Koul <vinod.koul@linux.intel.com>
 		Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 struct snd_compr_codec_caps overflows the ioctl bit size for some
  architectures, so we need to disable the relevant ioctls.
 TODO:
  - add substream support for multiple devices in case of
 	SND_DYNAMIC_MINORS is not used
  - Multiple node representation
 	driver should be able to register multiple nodes
  a note on stream states used:
  we use following states in the compressed core
  SNDRV_PCM_STATE_OPEN: When stream has been opened.
  SNDRV_PCM_STATE_SETUP: When stream has been initialized. This is done by
 	calling SNDRV_COMPRESS_SET_PARAMS. Running streams will come to this
 	state at stop by calling SNDRV_COMPRESS_STOP, or at end of drain.
  SNDRV_PCM_STATE_PREPARED: When a stream has been written to (for
 	playback only). User after setting up stream writes the data buffer
 	before starting the stream.
  SNDRV_PCM_STATE_RUNNING: When stream has been started and is
 	decodingencoding and renderingcapturing data.
  SNDRV_PCM_STATE_DRAINING: When stream is draining current data. This is done
 	by calling SNDRV_COMPRESS_DRAIN.
  SNDRV_PCM_STATE_PAUSED: When stream is paused. This is done by calling
 	SNDRV_COMPRESS_PAUSE. It can be stopped or resumed by calling
 	SNDRV_COMPRESS_STOP or SNDRV_COMPRESS_RESUME respectively.
 Still need to return avail even if tstamp can't be filled in 
 64-bit Modulus 
 if DSP cares, let it know data has been written 
 write is allowed when stream is running or has been steup 
 calculate how much we can write to buffer 
	 while initiating the stream, write should be called before START
	 read is allowed when stream is running, paused, draining and setup
	  (yes setup is state which we transition to after stop, so if user
	  wants to read data after stop we allow that)
 calculate how much we can read from buffer 
 check if we have at least one fragment to fill 
		 stream has been woken up after drain is complete
		  draining done so set stream state to stopped
 !COMPR_CODEC_CAPS_OVERFLOW 
 It's a newly allocated buffer. Release it now. 
 revisit this with snd_pcm_preallocate_xxx 
		 if copy is defined the driver will be required to copy
		  the data from core
 first let's check the buffer parameter's 
 now codec parameters 
		
		  we should allow parameter change only when stream has been
		  opened not in other cases
	
	 we should allow parameter change only when stream has been
	 opened not in other cases
 clear flags and stop any drain wait 
  snd_compr_stop_error: Report a fatal error on a stream
  @stream: pointer to stream
  @state: state to transition the stream to
  Stop the stream and set its state.
  Should be called with compressed device lock held.
	
	  We are called with lock held. So drop the lock while we wait for
	  drain complete notification from the driver
	 
	  It is expected that driver will notify the drain completion and then
	  stream will be moved to SETUP state, even if draining resulted in an
	  error. We can trigger next track after this.
	 we wait for drain to complete here, drain can return when
	  interruption occurred, wait returned error or success.
	  For the first two cases we don't do anything different here and
	  return after waking up
 only a running stream can transition to next track 
 next track doesn't have any meaning for capture streams 
	 you can signal next track if this is intended to be a gapless stream
	  and current track metadata is set
 partial drain doesn't have any meaning for capture streams 
 stream can be drained only when next track has been signalled 
 support of 32bit userspace on 64bit platforms 
 register compressed device 
  snd_compress_new: create new compress device
  @card: sound card pointer
  @device: device number
  @dirn: device direction, should be of type enum snd_compr_direction
  @compr: compress device pointer
 SPDX-License-Identifier: GPL-2.0-or-later
   Digital Audio (PCM) abstract layer
   Copyright (c) by Jaroslav Kysela <perex@perex.cz>
  try to allocate as the large pages as possible.
  stores the resultant memory size in res_size.
  the minimum size is snd_minimum_buffer.  it should be power of 2.
 tell error 
  snd_pcm_lib_preallocate_free - release the preallocated buffer of the specified substream.
  @substream: the pcm substream instance
  Releases the pre-allocated buffer of the given substream.
  snd_pcm_lib_preallocate_free_for_all - release all pre-allocated buffers on the pcm
  @pcm: the pcm instance
  Releases all the pre-allocated buffers on the given pcm.
  read callback for prealloc proc file
  prints the current allocated size in kB.
  read callback for prealloc_max proc file
  prints the maximum allowed size in kB.
  write callback for prealloc proc file
  accepts the preallocation size in kB.
 !CONFIG_SND_VERBOSE_PROCFS 
 CONFIG_SND_VERBOSE_PROCFS 
  pre-allocate the buffer and create a proc file for the substream
 no fallback, only also inform -ENOMEM 
  snd_pcm_lib_preallocate_pages - pre-allocation for the given DMA type
  @substream: the pcm substream instance
  @type: DMA type (SNDRV_DMA_TYPE_)
  @data: DMA type dependent data
  @size: the requested pre-allocation size in bytes
  @max: the max. allowed pre-allocation size
  Do pre-allocation for the given DMA buffer type.
  snd_pcm_lib_preallocate_pages_for_all - pre-allocation for continuous memory type (all substreams)
  @pcm: the pcm instance
  @type: DMA type (SNDRV_DMA_TYPE_)
  @data: DMA type dependent data
  @size: the requested pre-allocation size in bytes
  @max: the max. allowed pre-allocation size
  Do pre-allocation to all substreams of the given pcm for the
  specified DMA type.
  snd_pcm_set_managed_buffer - set up buffer management for a substream
  @substream: the pcm substream instance
  @type: DMA type (SNDRV_DMA_TYPE_)
  @data: DMA type dependent data
  @size: the requested pre-allocation size in bytes
  @max: the max. allowed pre-allocation size
  Do pre-allocation for the given DMA buffer type, and set the managed
  buffer allocation mode to the given substream.
  In this mode, PCM core will allocate a buffer automatically before PCM
  hw_params ops call, and release the buffer after PCM hw_free ops call
  as well, so that the driver doesn't need to invoke the allocation and
  the release explicitly in its callback.
  When a buffer is actually allocated before the PCM hw_params call, it
  turns on the runtime buffer_changed flag for drivers changing their hw
  parameters accordingly.
  When @size is non-zero and @max is zero, this tries to allocate for only
  the exact buffer size without fallback, and may return -ENOMEM.
  Otherwise, the function tries to allocate smaller chunks if the allocation
  fails.  This is the behavior of snd_pcm_set_fixed_buffer().
  When both @size and @max are zero, the function only sets up the buffer
  for later dynamic allocations. It's used typically for buffers with
  SNDRV_DMA_TYPE_VMALLOC type.
  Upon successful buffer allocation and setup, the function returns 0.
  snd_pcm_set_managed_buffer_all - set up buffer management for all substreams
 	for all substreams
  @pcm: the pcm instance
  @type: DMA type (SNDRV_DMA_TYPE_)
  @data: DMA type dependent data
  @size: the requested pre-allocation size in bytes
  @max: the max. allowed pre-allocation size
  Do pre-allocation to all substreams of the given pcm for the specified DMA
  type and size, and set the managed_buffer_alloc flag to each substream.
  snd_pcm_lib_malloc_pages - allocate the DMA buffer
  @substream: the substream to allocate the DMA buffer to
  @size: the requested buffer size in bytes
  Allocates the DMA buffer on the BUS type given earlier to
  snd_pcm_lib_preallocate_xxx_pages().
  Return: 1 if the buffer is changed, 0 if not changed, or a negative
  code on failure.
		 perphaps, we might free the large DMA memory region
		   to save some space here, but the actual solution
 ok, do not change 
 use the pre-allocated buffer 
 dma_max=0 means the fixed size preallocation 
 area was changed 
  snd_pcm_lib_free_pages - release the allocated DMA buffer.
  @substream: the substream to release the DMA buffer
  Releases the DMA buffer allocated via snd_pcm_lib_malloc_pages().
  Return: Zero if successful, or a negative error code on failure.
 it's a newly allocated buffer.  release it now. 
 already large enough 
  snd_pcm_lib_free_vmalloc_buffer - free vmalloc buffer
  @substream: the substream with a buffer allocated by
 	snd_pcm_lib_alloc_vmalloc_buffer()
  Return: Zero if successful, or a negative error code on failure.
  snd_pcm_lib_get_vmalloc_page - map vmalloc buffer offset to page struct
  @substream: the substream with a buffer allocated by
 	snd_pcm_lib_alloc_vmalloc_buffer()
  @offset: offset in the buffer
  This function is to be used as the page callback in the PCM ops.
  Return: The page struct, or %NULL on failure.
 SPDX-License-Identifier: GPL-2.0-or-later
   Abstract layer for MIDI v1.0 stream
   Copyright (c) by Jaroslav Kysela <perex@perex.cz>
 CONFIG_SND_OSSEMUL 
 Timestamp 
 available bytes 
 count of overruns since last status (in bytes) 
 reserved for future use 
 alignment 
 Timestamp 
 available bytes 
 count of overruns since last status (in bytes) 
 reserved for future use 
 buffer refcount management: call with runtime->lock held 
 we need wait a while to make sure that Tx FIFOs are empty 
 look for an available substream for the given stream direction;
  if a specific subdevice is given, try to assign it
 open and do ref-counting for the given substream 
 called from soundcoreseqseq_midi.c 
 invalid combination 
 OSS emul? 
				 sending single active sensing message
				  to shut the device up
 called from soundcoreseqseq_midi.c 
 next device is -1 
  snd_rawmidi_receive - receive the input data from the device
  @substream: the rawmidi substream
  @buffer: the buffer pointer
  @count: the data size to read
  Reads the data from the internal buffer.
  Return: The size of read data, or a negative error code on failure.
 special case, faster code 
 update runtime->appl_ptr before unlocking for userbuf 
userbuf, buf, count);
kernelbuf,
  snd_rawmidi_transmit_empty - check whether the output buffer is empty
  @substream: the rawmidi substream
  Return: 1 if the internal output buffer is empty, 0 if not.
  __snd_rawmidi_transmit_peek - copy data from the internal buffer
  @substream: the rawmidi substream
  @buffer: the buffer pointer
  @count: data size to transfer
  This is a variant of snd_rawmidi_transmit_peek() without spinlock.
 warning: lowlevel layer MUST trigger down the hardware 
 special case, faster code 
  snd_rawmidi_transmit_peek - copy data from the internal buffer
  @substream: the rawmidi substream
  @buffer: the buffer pointer
  @count: data size to transfer
  Copies data from the internal output buffer to the given buffer.
  Call this in the interrupt handler when the midi output is ready,
  and call snd_rawmidi_transmit_ack() after the transmission is
  finished.
  Return: The size of copied data, or a negative error code on failure.
  __snd_rawmidi_transmit_ack - acknowledge the transmission
  @substream: the rawmidi substream
  @count: the transferred count
  This is a variant of __snd_rawmidi_transmit_ack() without spinlock.
  snd_rawmidi_transmit_ack - acknowledge the transmission
  @substream: the rawmidi substream
  @count: the transferred count
  Advances the hardware pointer for the internal output buffer with
  the given size and updates the condition.
  Call after the transmission is finished.
  Return: The advanced size if successful, or a negative error code on failure.
  snd_rawmidi_transmit - copy from the buffer to the device
  @substream: the rawmidi substream
  @buffer: the buffer pointer
  @count: the data size to transfer
  Copies data from the buffer to the device and advances the pointer.
  Return: The copied size if successful, or a negative error code on failure.
  snd_rawmidi_proceed - Discard the all pending bytes and proceed
  @substream: rawmidi substream
  Return: the number of discarded bytes
 update runtime->appl_ptr before unlocking for userbuf 
 we cannot put an atomic message to our buffer 
   Register functions
  snd_rawmidi_new - create a rawmidi instance
  @card: the card instance
  @id: the id string
  @device: the device index
  @output_count: the number of output streams
  @input_count: the number of input streams
  @rrawmidi: the pointer to store the new rawmidi instance
  Creates a new rawmidi instance.
  Use snd_rawmidi_set_ops() to set the operators to the new instance.
  Return: Zero if successful, or a negative error code on failure.
 CONFIG_SND_OSSEMUL 
 own registration mechanism 
 CONFIG_SND_OSSEMUL 
  snd_rawmidi_set_ops - set the rawmidi operators
  @rmidi: the rawmidi instance
  @stream: the stream direction, SNDRV_RAWMIDI_STREAM_XXX
  @ops: the operator table
  Sets the rawmidi operators for the given stream direction.
   ENTRY functions
 check device map table 
 CONFIG_SND_OSSEMUL 
 SPDX-License-Identifier: GPL-2.0-or-later
  Scatter-Gather buffer
   Copyright (c) by Takashi Iwai <tiwai@suse.de>
 allocated byte size 
 allocated pages 
 allocated table size 
 address table 
 page table (for vmapvunmap) 
 table entries are align to 32 
 continuous pages 
 allocate pages 
 don't be too eager to take a huge chunk 
 mark head 
 free the table 
 check page continuity 
 ok, all on continuous pages 
 continue with the default mmap handler 
 SPDX-License-Identifier: GPL-2.0-or-later
   Initialization routines
   Copyright (c) by Jaroslav Kysela <perex@perex.cz>
 monitor files for graceful shutdown (hotplug) 
 still need to shutdown 
 link of monitor files 
 locked for registeringusing 
 return non-zero if the given index is reserved for the given
  module via slots option
 negative match 
	 compare module name strings
	  hyphens are handled as equivalent with underscore
 MODULE 
 return an empty slot number (>= 0) found in the given bitmask @mask.
  @mask == -1 == 0xffffffff means: take any free slot up to 32
  when no slot is available, return the original @mask as is.
 found 
 unchanged 
 the default release callback set in snd_device_initialize() below;
  this is just NOP for now, as almost all jobs are already done in
  dev_free callback of snd_device chain instead.
  snd_device_initialize - Initialize struct device for sound devices
  @dev: device to initialize
  @card: card to assign, optional
   snd_card_new - create and initialize a soundcard structure
   @parent: the parent device object
   @idx: card index (address) [0 ... (SNDRV_CARDS-1)]
   @xid: card identification (ASCII string)
   @module: top level module for locking
   @extra_size: allocate this extra size after the main soundcard structure
   @card_ret: the pointer to store the created card instance
   The function allocates snd_card instance via kzalloc with the given
   space for the driver to use freely.  The allocated struct is stored
   in the given card_ret pointer.
   Return: Zero if successful or a negative error code.
  snd_devm_card_new - managed snd_card object creation
  @parent: the parent device object
  @idx: card index (address) [0 ... (SNDRV_CARDS-1)]
  @xid: card identification (ASCII string)
  @module: top level module for locking
  @extra_size: allocate this extra size after the main soundcard structure
  @card_ret: the pointer to store the created card instance
  This function works like snd_card_new() but manages the allocated resource
  via devres, i.e. you don't need to free explicitly.
  When a snd_card object is created with this function and registered via
  snd_card_register(), the very first devres action to call snd_card_free()
  is added automatically.  In that way, the resource disconnection is assured
  at first, then released in the expected order.
 first check the matching module-name slot 
 if not matched, assign an empty slot 
 invalid 
 lock it 
 increase the limit 
 the control interface cannot be accessed from the user space until 
 snd_cards_bitmask and snd_cards are set with snd_card_register 
  snd_card_ref - Get the card object from the index
  @idx: the card index
  Returns a card object corresponding to the given index or NULL if not found.
  Release the object via snd_card_unref().
 return non-zero if a card is already locked 
   snd_card_disconnect - disconnect all APIs from the file-operations (user space)
   @card: soundcard structure
   Disconnects all APIs from the file-operations (user space).
   Return: Zero, otherwise a negative error code.
   Note: The current implementation replaces all active file->f_op with special
         dummy file operations (they do nothing except release).
 replace file->f_op with special dummy operations 
 it's critical part, use endless loop 
 we have no room to fail 
 notify all connected devices about disconnection 
 at this point, they cannot respond to any calls except release() 
 notify all devices that we are disconnected 
 disable fops (user space) operations for ALSA API 
  snd_card_disconnect_sync - disconnect card and wait until files get closed
  @card: card object to disconnect
  This calls snd_card_disconnect() for disconnecting all belonging components
  and waits until all pending files get closed.
  It assures that all accesses from user-space finished so that the driver
  can release its resources gracefully.
 Not fatal error 
  snd_card_free_when_closed - Disconnect the card, free it later eventually
  @card: soundcard structure
  Unlike snd_card_free(), this function doesn't try to release the card
  resource immediately, but tries to disconnect at first.  When the card
  is still in use, the function returns before freeing the resources.
  The card resources will be freed when the refcount gets to zero.
  snd_card_free - frees given soundcard structure
  @card: soundcard structure
  This function releases the soundcard structure and the all assigned
  devices automatically.  That is, you don't have to release the devices
  by yourself.
  This function waits until the all resources are properly released.
  Return: Zero. Frees all associated devices and frees the control
  interface associated to given soundcard.
	 The call of snd_card_free() is allowed from various code paths;
	  a manual call from the driver and the call via devres_free, and
	  we need to avoid double-free. Moreover, the release via devres
	  may call snd_card_free() twice due to its nature, we need to have
	  the check here at the beginning.
 wait, until all devices are ready for the free operation 
 retrieve the last word of shortname or longname 
 return true if the given id string doesn't conflict any other card ids 
 copy to card->id only with valid letters from nid 
 Set card->id from the given string
  If the string conflicts with other ids, add a suffix to make it unique.
	 use "Default" for obviously invalid strings
	  ("card" conflicts with proc directories)
 "_012" 
 OK 
 Add _XYZ suffix 
 fallback to the default id 
 last resort... 
   snd_card_set_id - set card identification name
   @card: soundcard structure
   @nid: new identification string
   This function sets the card identification and checks for name
   collisions.
 check if user specified own card->id 
  snd_card_add_dev_attr - Append a new sysfs attribute group to card
  @card: card instance
  @group: attribute group to append
 loop for (arraysize-1) here to keep NULL at the last entry 
   snd_card_register - register the soundcard
   @card: soundcard structure
   This function registers all the devices assigned to the soundcard.
   Until calling this, the ALSA control interface is blocked from the
   external accesses.  Thus, you should call this function at the end
   of the initialization of the card.
   Return: Zero otherwise a negative error code if the registration failed.
 already registered 
 register pending info 
 make a unique id name from the given string 
 create an id from either shortname or longname 
 freed in error path 
 freed in error path 
 CONFIG_SND_PROC_FS 
   snd_component_add - add a component string
   @card: soundcard structure
   @component: the component id string
   This function adds the component id string to the supported list.
   The component can be referred from the alsa-lib.
   Return: Zero otherwise a negative error code.
 already there 
   snd_card_file_add - add the file to the file list of the card
   @card: soundcard structure
   @file: file pointer
   This function adds the file to the file linked-list of the card.
   This linked-list is used to keep tracking the connection state,
   and to avoid the release of busy resources by hotplug.
   Return: zero or a negative error code.
   snd_card_file_remove - remove the file from the file list
   @card: soundcard structure
   @file: file pointer
   This function removes the file formerly added to the card via
   snd_card_file_add() function.
   If all files are removed and snd_card_free_when_closed() was
   called beforehand, it processes the pending release of
   resources.
   Return: Zero or a negative error code.
  snd_power_ref_and_wait - wait until the card gets powered up
  @card: soundcard structure
  Take the power_ref reference count of the given card, and
  wait until the card gets powered up to SNDRV_CTL_POWER_D0 state.
  The refcount is down again while sleeping until power-up, hence this
  function can be used for syncing the floating control ops accesses,
  typically around calling control ops.
  The caller needs to pull down the refcount via snd_power_unref() later
  no matter whether the error is returned from this function or not.
  Return: Zero if successful, or a negative error code.
 fastpath 
  snd_power_wait - wait until the card gets powered up (old form)
  @card: soundcard structure
  Wait until the card gets powered up to SNDRV_CTL_POWER_D0 state.
  Return: Zero if successful, or a negative error code.
 CONFIG_PM 
 SPDX-License-Identifier: GPL-2.0-or-later
   Digital Audio (PCM) abstract layer
   Copyright (c) by Jaroslav Kysela <perex@perex.cz>
  snd_pcm_format_name - Return a name string for the given PCM format
  @format: PCM format
 CONFIG_SND_PCM_XRUN_DEBUG 
 !CONFIG_SND_VERBOSE_PROCFS 
 CONFIG_SND_VERBOSE_PROCFS 
  PM callbacks: we need to deal only with suspend here, as the resume is
  triggered either from user-space or the driver's resume callback
 device type for PCM -- basically only for passing PM callbacks 
  snd_pcm_new_stream - create a new PCM stream
  @pcm: the pcm instance
  @stream: the stream direction, SNDRV_PCM_STREAM_XXX
  @substream_count: the number of substreams
  Creates a new stream for the pcm.
  The corresponding stream on the pcm must have been empty before
  calling this, i.e. zero must be given to the argument of
  snd_pcm_new().
  Return: Zero if successful, or a negative error code on failure.
  snd_pcm_new - create a new PCM instance
  @card: the card instance
  @id: the id string
  @device: the device index (zero based)
  @playback_count: the number of substreams for playback
  @capture_count: the number of substreams for capture
  @rpcm: the pointer to store the new pcm instance
  Creates a new PCM instance.
  The pcm operators have to be set afterwards to the new instance
  via snd_pcm_set_ops().
  Return: Zero if successful, or a negative error code on failure.
  snd_pcm_new_internal - create a new internal PCM instance
  @card: the card instance
  @id: the id string
  @device: the device index (zero based - shared with normal PCMs)
  @playback_count: the number of substreams for playback
  @capture_count: the number of substreams for capture
  @rpcm: the pointer to store the new pcm instance
  Creates a new internal PCM instance with no userspace device or procfs
  entries. This is used by ASoC Back End PCMs in order to create a PCM that
  will only be used internally by kernel drivers. i.e. it cannot be opened
  by userspace. It provides existing ASoC components drivers with a substream
  and access to any private data.
  The pcm operators have to be set afterwards to the new instance
  via snd_pcm_set_ops().
  Return: Zero if successful, or a negative error code on failure.
 free all proc files under the stream 
 must be unique 
 Avoid concurrent access to runtime via PCM timer interface 
 register pcm 
 to be sure, set the state unconditionally 
  snd_pcm_notify - Addremove the notify list
  @notify: PCM notify list
  @nfree: 0 = register, 1 = unregister
  This adds the given notifier to the global list so that the callback is
  called for each registered PCM devices.  This exists only for PCM OSS
  emulation, so far.
 CONFIG_SND_PCM_OSS 
   Info interface
 !CONFIG_SND_PROC_FS 
 CONFIG_SND_PROC_FS 
   ENTRY functions
 SPDX-License-Identifier: GPL-2.0-or-later
   ISA DMA support functions
   Copyright (c) by Jaroslav Kysela <perex@perex.cz>
  Defining following add some delay. Maybe this helps for some broken
  ISA DMA controllers.
  snd_dma_program - program an ISA DMA transfer
  @dma: the dma number
  @addr: the physical address of the buffer
  @size: the DMA transfer size
  @mode: the DMA transfer mode, DMA_MODE_XXX
  Programs an ISA DMA transfer for the given buffer.
  snd_dma_disable - stop the ISA DMA transfer
  @dma: the dma number
  Stops the ISA DMA transfer.
  snd_dma_pointer - return the current pointer to DMA transfer buffer in bytes
  @dma: the dma number
  @size: the dma transfer size
  Return: The current pointer in DMA transfer buffer in bytes.
	
	  HACK - read the counter again and choose higher value in order to
	  avoid reading during counter lower byte roll over if the
	  isa_dma_bridge_buggy is set.
  snd_devm_request_dma - the managed version of request_dma()
  @dev: the device pointer
  @dma: the dma number
  @name: the name string of the requester
  Returns zero on success, or a negative error code.
  The requested DMA will be automatically released at unbinding via devres.
 SPDX-License-Identifier: GPL-2.0-or-later
   Hardware dependent layer
   Copyright (c) by Jaroslav Kysela <perex@perex.cz>
 check whether the dsp was already loaded 
  snd_hwdep_new - create a new hwdep instance
  @card: the card instance
  @id: the id string
  @device: the device index (zero-based)
  @rhwdep: the pointer to store the new hwdep instance
  Creates a new hwdep instance with the given index on the card.
  The callbacks (hwdep->ops) must be set on the returned instance
  after this call manually by the caller.
  Return: Zero if successful, or a negative error code on failure.
   Info interface
 !CONFIG_SND_PROC_FS 
 CONFIG_SND_PROC_FS 
   ENTRY functions
   PCM Interface - misc routines
   Copyright (c) 1998 by Jaroslav Kysela <perex@perex.cz>
    This library is free software; you can redistribute it andor modify
    it under the terms of the GNU Library General Public License as
    published by the Free Software Foundation; either version 2 of
    the License, or (at your option) any later version.
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Library General Public License for more details.
    You should have received a copy of the GNU Library General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 NOTE: "signed" prefix must be given below since the default char is
        unsigned on some architectures!
 bit width 
 physical bit width 
 0 = big-endian, 1 = little-endian, -1 = others 
 0 = unsigned, 1 = signed, -1 = others 
 silence data to fill 
 we do lots of calculations on snd_pcm_format_t; shut up sparse 
 FIXME: the following two formats are not defined properly yet 
 FIXME: the following format is not defined properly yet 
  snd_pcm_format_signed - Check the PCM format is signed linear
  @format: the format to check
  Return: 1 if the given PCM format is signed linear, 0 if unsigned
  linear, and a negative error code for non-linear formats.
  snd_pcm_format_unsigned - Check the PCM format is unsigned linear
  @format: the format to check
  Return: 1 if the given PCM format is unsigned linear, 0 if signed
  linear, and a negative error code for non-linear formats.
  snd_pcm_format_linear - Check the PCM format is linear
  @format: the format to check
  Return: 1 if the given PCM format is linear, 0 if not.
  snd_pcm_format_little_endian - Check the PCM format is little-endian
  @format: the format to check
  Return: 1 if the given PCM format is little-endian, 0 if
  big-endian, or a negative error code if endian not specified.
  snd_pcm_format_big_endian - Check the PCM format is big-endian
  @format: the format to check
  Return: 1 if the given PCM format is big-endian, 0 if
  little-endian, or a negative error code if endian not specified.
  snd_pcm_format_width - return the bit-width of the format
  @format: the format to check
  Return: The bit-width of the format, or a negative error code
  if unknown format.
  snd_pcm_format_physical_width - return the physical bit-width of the format
  @format: the format to check
  Return: The physical bit-width of the format, or a negative error code
  if unknown format.
  snd_pcm_format_size - return the byte size of samples on the given format
  @format: the format to check
  @samples: sampling rate
  Return: The byte size of the given samples for the format, or a
  negative error code if unknown format.
  snd_pcm_format_silence_64 - return the silent data in 8 bytes array
  @format: the format to check
  Return: The format pattern to fill or %NULL if error.
  snd_pcm_format_set_silence - set the silence data on the buffer
  @format: the PCM format
  @data: the buffer pointer
  @samples: the number of samples to set silence
  Sets the silence data on the buffer for the given samples.
  Return: Zero if successful, or a negative error code on failure.
 physical width 
 signed or 1 byte data 
 non-zero samples, fill using a loop 
 a bit optimization for constant width 
  snd_pcm_hw_limit_rates - determine rate_minrate_max fields
  @hw: the pcm hw instance
  Determines the rate_min and rate_max fields from the rates bits of
  the given hw.
  Return: Zero if successful.
  snd_pcm_rate_to_rate_bit - converts sample rate to SNDRV_PCM_RATE_xxx bit
  @rate: the sample rate to convert
  Return: The SNDRV_PCM_RATE_xxx flag that corresponds to the given rate, or
  SNDRV_PCM_RATE_KNOT for an unknown rate.
  snd_pcm_rate_bit_to_rate - converts SNDRV_PCM_RATE_xxx bit to sample rate
  @rate_bit: the rate bit to convert
  Return: The sample rate that corresponds to the given SNDRV_PCM_RATE_xxx flag
  or 0 for an unknown rate bit.
  snd_pcm_rate_mask_intersect - computes the intersection between two rate masks
  @rates_a: The first rate mask
  @rates_b: The second rate mask
  This function computes the rates that are supported by both rate masks passed
  to the function. It will take care of the special handling of
  SNDRV_PCM_RATE_CONTINUOUS and SNDRV_PCM_RATE_KNOT.
  Return: A rate mask containing the rates that are supported by both rates_a
  and rates_b.
  snd_pcm_rate_range_to_bits - converts rate range to SNDRV_PCM_RATE_xxx bit
  @rate_min: the minimum sample rate
  @rate_max: the maximum sample rate
  This function has an implicit assumption: the rates in the given range have
  only the pre-defined rates like 44100 or 16000.
  Return: The SNDRV_PCM_RATE_xxx flag that corresponds to the given rate range,
  or SNDRV_PCM_RATE_KNOT for an unknown range.
 SPDX-License-Identifier: GPL-2.0-or-later
    32bit -> 64bit ioctl wrapper for raw MIDI API
    Copyright (c) by Takashi Iwai <tiwai@suse.de>
 This file included from rawmidi.c 
 avoid bit-field 
 alignment 
 SPDX-License-Identifier: GPL-2.0-or-later
  Helper functions for jack-detection kcontrols
  Copyright (c) 2011 Takashi Iwai <tiwai@suse.de>
 name is filled later 
 reset numid; otherwise snd_ctl_find_id() hits this again 
 remove redundant " Jack" from src_name 
 SPDX-License-Identifier: GPL-2.0-or-later
    32bit -> 64bit ioctl wrapper for hwdep API
    Copyright (c) by Takashi Iwai <tiwai@suse.de>
 This file is included from hwdep.c 
 pointer 
 don't set packed attribute here ;
 SPDX-License-Identifier: GPL-2.0-or-later
   Device management routines
   Copyright (c) by Jaroslav Kysela <perex@perex.cz>
  snd_device_new - create an ALSA device component
  @card: the card instance
  @type: the device type, SNDRV_DEV_XXX
  @device_data: the data pointer of this device
  @ops: the operator table
  Creates a new device component for the given data pointer.
  The device will be assigned to the card and managed together
  by the card.
  The data pointer plays a role as the identifier, too, so the
  pointer address must be unique and unchanged.
  Return: Zero if successful, or a negative error code on failure.
 insert the entry in an incrementally sorted list 
 unlink 
  snd_device_disconnect - disconnect the device
  @card: the card instance
  @device_data: the data pointer to disconnect
  Turns the device into the disconnection state, invoking
  dev_disconnect callback, if the device was already registered.
  Usually called from snd_card_disconnect().
  Return: Zero if successful, or a negative error code on failure or if the
  device not found.
  snd_device_free - release the device from the card
  @card: the card instance
  @device_data: the data pointer to release
  Removes the device from the list on the card and invokes the
  callbacks, dev_disconnect and dev_free, corresponding to the state.
  Then release the device.
  snd_device_register - register the device
  @card: the card instance
  @device_data: the data pointer to register
  Registers the device which was already created via
  snd_device_new().  Usually this is called from snd_card_register(),
  but it can be called later if any new devices are created after
  invocation of snd_card_register().
  Return: Zero if successful, or a negative error code on failure or if the
  device not found.
  register all the devices on the card.
  called from init.c
  disconnect all the devices on the card.
  called from init.c
  release all the devices on the card.
  called from init.c
 exception: free ctl and lowlevel stuff later 
 free all 
  snd_device_get_state - Get the current state of the given device
  @card: the card instance
  @device_data: the data pointer to release
  Returns the current state of the given device object.  For the valid
  device, either @SNDRV_DEV_BUILD, @SNDRV_DEV_REGISTERED or
  @SNDRV_DEV_DISCONNECTED is returned.
  Or for a non-existing device, -1 is returned as an error.
 SPDX-License-Identifier: GPL-2.0-or-later
   Jack abstraction layer
   Copyright 2008 Wolfson Microelectronics
 list of controls belong to the same jack 
 only masked status bits are reported via kctl 
 pointer to struct snd_jack 
 allow to inject plug event via debugfs 
 jack_kctl debugfs root 
 CONFIG_SND_JACK_INPUT_DEV 
	 If the input device is registered with the input subsystem
 CONFIG_SND_JACK_INPUT_DEV 
 Default to the sound card device. 
 Add capabilities for any keys that are enabled 
 CONFIG_SND_JACK_INPUT_DEV 
 CONFIG_SND_JACK_INPUT_DEV 
 the bit definition is aligned with snd_jack_types in jack.h 
 the recommended buffer size is 256 
 Don't create injection interface for Phantom jacks 
 replace the chars which are not suitable for folder's name with _ 
 CONFIG_SND_JACK_INJECTION_DEBUG 
 CONFIG_SND_JACK_INJECTION_DEBUG 
  snd_jack_add_new_kctl - Create a new snd_jack_kctl and add it to jack
  @jack:  the jack instance which the kctl will attaching to
  @name:  the name for the snd_kcontrol object
  @mask:  a bitmask of enum snd_jack_type values that can be detected
          by this snd_jack_kctl object.
  Creates a new snd_kcontrol object and adds it to the jack kctl_list.
  Return: Zero if successful, or a negative error code on failure.
  snd_jack_new - Create a new jack
  @card:  the card instance
  @id:    an identifying string for this jack
  @type:  a bitmask of enum snd_jack_type values that can be detected by
          this jack
  @jjack: Used to provide the allocated jack object to the caller.
  @initial_kctl: if true, create a kcontrol and add it to the jack list.
  @phantom_jack: Don't create a input device for phantom jacks.
  Creates a new jack object.
  Return: Zero if successful, or a negative error code on failure.
  On success @jjack will be initialised.
 CONFIG_SND_JACK_INPUT_DEV 
 don't creat input device for phantom jack 
 CONFIG_SND_JACK_INPUT_DEV 
  snd_jack_set_parent - Set the parent device for a jack
  @jack:   The jack to configure
  @parent: The device to set as parent for the jack.
  Set the parent for the jack devices in the device tree.  This
  function is only valid prior to registration of the jack.  If no
  parent is configured then the parent device will be the sound card.
  snd_jack_set_key - Set a key mapping on a jack
  @jack:    The jack to configure
  @type:    Jack report type for this key
  @keytype: Input layer key type to be reported
  Map a SND_JACK_BTN_ button type to an input layer key, allowing
  reporting of keys on accessories via the jack abstraction.  If no
  mapping is provided but keys are enabled in the jack type then
  BTN_n numeric buttons will be reported.
  If jacks are not reporting via the input API this call will have no
  effect.
  Note that this is intended to be use by simple devices with small
  numbers of keys that can be reported.  It is also possible to
  access the input device directly - devices with complex input
  capabilities on accessories should consider doing this rather than
  using this abstraction.
  This function may only be called prior to registration of the jack.
  Return: Zero if successful, or a negative error code on failure.
 CONFIG_SND_JACK_INPUT_DEV 
  snd_jack_report - Report the current status of a jack
  @jack:   The jack to report status for
  @status: The current status of the jack
 CONFIG_SND_JACK_INPUT_DEV 
 SPDX-License-Identifier: GPL-2.0-or-later
   Information interface for ALSA driver
   Copyright (c) by Jaroslav Kysela <perex@perex.cz>
   OSS compatible part
 freed in error path 
 SPDX-License-Identifier: GPL-2.0-or-later
  compat ioctls for control API
    Copyright (c) by Takashi Iwai <tiwai@suse.de>
 this file included from control.c 
 don't set packed attribute here ;
 offset, space, used, count 
 pids 
 copy the result 
  control element info
  it uses union, so the things are not easy..
 the size of struct is same
 copy id 
	 we need to copy the item index.
	  hope this doesn't break anything..
 restore info to 32bit 
 id, type, access, count 
 read  write 
 bit-field causes misalignment 
 x32 has a different alignment for 64bit values from ia32 
 bit-field causes misalignment 
 CONFIG_X86_X32 
 get the value type and count of the control 
 restore the value to 32bit 
 CONFIG_X86_X32 
 add or replace a user control 
 id, type, access, count  \
 CONFIG_X86_X32 
 CONFIG_X86_X32 
 SPDX-License-Identifier: GPL-2.0-or-later
    32bit -> 64bit ioctl wrapper for timer API
    Copyright (c) by Takashi Iwai <tiwai@suse.de>
 This file included from timer.c 
  ILP32LP64 has different size for 'long' type. Additionally, the size
  of storage alignment differs depending on architectures. Here, '__packed'
  qualifier is used so that the size of this structure is multiple of 4 and
  it fits to any architectures with 32 bit storage alignment.
 SPDX-License-Identifier: GPL-2.0-only
   PCM DRM helpers
			
			  Exclude SADs which do not include the
			  requested number of channels.
 Convert the rate interval to a mask 
 SPDX-License-Identifier: GPL-2.0-or-later
   ALSA sequencer device management
   Copyright (c) 1999 by Takashi Iwai <tiwai@suse.de>
 ----------------------------------------------------------------
  This device handler separates the card driver module from sequencer
  stuff (sequencer core, synth drivers, etc), so that user can avoid
  to spend unnecessary resources e.g. if he needs only listening to
  MP3s.
  The card (or lowlevel) driver creates a sequencer device entry
  via snd_seq_device_new().  This is an entry pointer to communicate
  with the sequencer device "driver", which is involved with the
  actual part to communicate with the sequencer core.
  Each sequencer device entry has an id string and the corresponding
  driver with the same id is loaded when required.  For example,
  lowlevel codes to access emu8000 chip on sbawe card are included in
  emu8000-synth module.  To activate this module, the hardware
  resources like io port are passed via snd_seq_device argument.
  bus definition
  proc interface -- just for compatibility
  load all registered drivers (called from seq_clientmgr.c)
 flag to block auto-loading 
 blocked as default 
 avoid reentrance 
 initial autoload only when snd-seq is a module 
  device management
  register a sequencer device
  card = card info
  device = device number (if any)
  id = id of driver
  result = return pointer (NULL allowed if unnecessary)
 set up device info 
 add this device to the list 
  driver registration
  module part
 SPDX-License-Identifier: GPL-2.0-or-later
   Routines for driver control interface
   Copyright (c) by Jaroslav Kysela <perex@perex.cz>
 Max allocation size for user controls.
 list of all ioctls 
  snd_ctl_notify - Send notification to user-space for a control change
  @card: the card to send notification
  @mask: the event mask, SNDRV_CTL_EVENT_
  @id: the ctl element id to send notification
  This function adds an event record with the given id and mask, appends
  to the list and wakes up the user-space for notification.  This can be
  called in the atomic context.
  snd_ctl_notify_one - Send notification to user-space for a control change
  @card: the card to send notification
  @mask: the event mask, SNDRV_CTL_EVENT_
  @kctl: the pointer with the control instance
  @ioff: the additional offset to the control index
  This function calls snd_ctl_notify() and does additional jobs
  like LED state changes.
  snd_ctl_new - create a new control instance with some elements
  @kctl: the pointer to store new control instance
  @count: the number of elements in this control
  @access: the default access flags for elements in this control
  @file: given when locking these elements
  Allocates a memory object for a new control instance. The instance has
  elements as many as the given number (@count). Each element has given
  access permissions (@access). Each element is locked when @file is given.
  Return: 0 on success, error code on failure
  snd_ctl_new1 - create a control instance from the template
  @ncontrol: the initialization record
  @private_data: the private data to set
  Allocates a new struct snd_kcontrol instance and initialize from the given
  template.  When the access field of ncontrol is 0, it's assumed as
  READWRITE access. When the count field is 0, it's assumes as one.
  Return: The pointer of the newly generated instance, or %NULL on failure.
 The 'numid' member is decided when calling snd_ctl_add(). 
  snd_ctl_free_one - release the control instance
  @kcontrol: the control instance
  Releases the control instance created via snd_ctl_new()
  or snd_ctl_new1().
  Don't call this after the control was added to the card.
 Make sure that the ids assigned to the control do not wrap around 
 this situation is very unlikely 
 addreplace a new kcontrol object; call with card->controls_rwsem locked 
  snd_ctl_add - add the control instance to the card
  @card: the card instance
  @kcontrol: the control instance to add
  Adds the control instance created via snd_ctl_new() or
  snd_ctl_new1() to the given card. Assigns also an unique
  numid used for fast search.
  It frees automatically the control which cannot be added.
  Return: Zero if successful, or a negative error code on failure.
  snd_ctl_replace - replace the control instance of the card
  @card: the card instance
  @kcontrol: the control instance to replace
  @add_on_replace: add the control if not already added
  Replaces the given control.  If the given control does not exist
  and the add_on_replace flag is set, the control is added.  If the
  control exists, it is destroyed first.
  It frees automatically the control which cannot be added or replaced.
  Return: Zero if successful, or a negative error code on failure.
  snd_ctl_remove - remove the control from the card and release it
  @card: the card instance
  @kcontrol: the control instance to remove
  Removes the control from the card and then releases the instance.
  You don't need to call snd_ctl_free_one(). You must be in
  the write lock - down_write(&card->controls_rwsem).
  Return: 0 if successful, or a negative error code on failure.
  snd_ctl_remove_id - remove the control of the given id and release it
  @card: the card instance
  @id: the control id to remove
  Finds the control instance with the given id, removes it from the
  card list and releases it.
  Return: 0 if successful, or a negative error code on failure.
  snd_ctl_remove_user_ctl - remove and release the unlocked user control
  @file: active control handle
  @id: the control id to remove
  Finds the control instance with the given id, removes it from the
  card list and releases it.
  Return: 0 if successful, or a negative error code on failure.
  snd_ctl_activate_id - activateinactivate the control of the given id
  @card: the card instance
  @id: the control id to activateinactivate
  @active: non-zero to activate
  Finds the control instance with the given id, and activate or
  inactivate the control together with notification, if changed.
  The given ID data is filled with full information.
  Return: 0 if unchanged, 1 if changed, or a negative error code on failure.
  snd_ctl_rename_id - replace the id of a control on the card
  @card: the card instance
  @src_id: the old id
  @dst_id: the new id
  Finds the control with the old id from the card, and replaces the
  id with the new one.
  Return: Zero if successful, or a negative error code on failure.
  snd_ctl_find_numid - find the control instance with the given number-id
  @card: the card instance
  @numid: the number-id to search
  Finds the control instance with the given number-id from the card.
  The caller must down card->controls_rwsem before calling this function
  (if the race condition can happen).
  Return: The pointer of the instance if found, or %NULL if not.
  snd_ctl_find_id - find the control instance with the given id
  @card: the card instance
  @id: the id to search
  Finds the control instance with the given id from the card.
  The caller must down card->controls_rwsem before calling this function
  (if the race condition can happen).
  Return: The pointer of the instance if found, or %NULL if not.
 Check whether the given kctl info is valid 
 The capacity of struct snd_ctl_elem_value.value.
 fill the remaining snd_ctl_elem_value data with the given pattern 
 check whether the given integer ctl value is valid 
 perform sanity checks to the given snd_ctl_elem_value object 
 check whether the remaining area kept untouched 
 clear the checked area 
 drop internal access flags 
 info is needed only for validation 
 element data 
 size of element data in bytes 
 TLV data 
 TLV data size 
 private data (like strings for enumerated type) 
 check whether the addition (in bytes) of user ctl element may overflow the limit.
 called in controls_rwsem write lock 
 sane value 
 does the TLV size change cause overflow?
 Now TLV data is available. 
 decremented at private_free.
 called in controls_rwsem write lock 
 check that there are enough valid names 
 increment the allocation size; decremented again at private_free.
 decrement the allocation size.
 Delete a control to replace them if needed. 
 Check the number of elements for this userspace control. 
 Arrange access permissions if needed. 
 In initial state, nothing is available as TLV container. 
	
	  Check information and calculate the size of data specific to
	  this userspace control.
 pass NULL to card for suppressing error messages 
 user-space control doesn't allow zero-size data 
	
	  Keep memory object for this userspace control. After passing this
	  code block, the instance should be freed by snd_ctl_free_one().
	 
	  Note that these elements in this control are locked.
 increment the allocated size; decremented again at private_free.
 Set private data for this userspace control. 
 Set callback functions. 
 This function manage to free the instance on failure. 
	
	  Here we cannot fill any field for the number of elements added by
	  this operation because there're no specific fields. The usage of
	  'owner' field for this purpose may cause any bugs to userspace
	  applications because the field originally means PID of a process
	  which locks the element.
 Check support of the request for this element. 
 Write and command operations are not allowed for locked element. 
 In design of control core, numerical ID starts at 1. 
 At least, container should include type and length fields.  
 Calculate index of the element in this set. 
 Not supported. 
  register the device-specific control-ioctls.
  called from each device manager like pcm.c, hwdep.c, etc.
  snd_ctl_register_ioctl - register the device-specific control-ioctls
  @fcn: ioctl callback function
  called from each device manager like pcm.c, hwdep.c, etc.
  snd_ctl_register_ioctl_compat - register the device-specific 32bit compat
  control-ioctls
  @fcn: ioctl callback function
  de-register the device-specific control-ioctls.
  snd_ctl_unregister_ioctl - de-register the device-specific control-ioctls
  @fcn: ioctl callback function to unregister
  snd_ctl_unregister_ioctl_compat - de-register the device-specific compat
  32bit control-ioctls
  @fcn: ioctl callback function to unregister
 return the preferred subdevice number if already assigned;
  otherwise return -1
  ioctl32 compat
  control layers (audio LED etc.)
  snd_ctl_request_layer - request to use the layer
  @module_name: Name of the kernel module (NULL == build-in)
  Return an error code when the module cannot be loaded.
  snd_ctl_register_layer - register new control layer
  @lops: operation structure
  The new layer can track all control elements and do additional
  operations on top (like audio LED handling).
  snd_ctl_disconnect_layer - disconnect control layer
  @lops: operation structure
  It is expected that the information about tracked cards
  is freed before this call (the disconnect callback is
  not called here).
   INIT PART
  registration of the control device
  disconnection of the control device
  free all controls
  create control core:
  called from init.c
  Frequently used control callbackshelpers
  snd_ctl_boolean_mono_info - Helper function for a standard boolean info
  callback with a mono channel
  @kcontrol: the kcontrol instance
  @uinfo: info to store
  This is a function that can be used as info callback for a standard
  boolean control with a single mono channel.
  snd_ctl_boolean_stereo_info - Helper function for a standard boolean info
  callback with stereo two channels
  @kcontrol: the kcontrol instance
  @uinfo: info to store
  This is a function that can be used as info callback for a standard
  boolean control with stereo two channels.
  snd_ctl_enum_info - fills the info structure for an enumerated control
  @info: the structure to be filled
  @channels: the number of the control's channels; often one
  @items: the number of control values; also the size of @names
  @names: an array containing the names of all control values
  Sets all required fields in @info to their appropriate values.
  If the control's accessibility is not the default (readable and writable),
  the caller has to fill @info->access.
  Return: Zero.
 SPDX-License-Identifier: GPL-2.0-or-later
   Digital Audio (PCM) abstract layer
   Copyright (c) by Jaroslav Kysela <perex@perex.cz>
   Timer functions
   Init functions
 SPDX-License-Identifier: GPL-2.0-or-later
   Information interface for ALSA driver
   Copyright (c) by Jaroslav Kysela <perex@perex.cz>
  file ops for binary proc files
  file ops for text proc files
 don't handle too large text inputs 
 XXX hack! 
  create a card proc file
  called from init.c
  register the card proc file
  called from init.c
  can be called multiple times for reinitialization
  called on card->id change
  de-register the card proc file
  called from init.c
  release the card proc file resources
  called from init.c
  snd_info_get_line - read one line from the procfs buffer
  @buffer: the procfs buffer
  @line: the buffer to store
  @len: the max. buffer size
  Reads one line from the buffer and stores the string.
  Return: Zero if successful, or 1 if error or EOF.
  snd_info_get_str - parse a string token
  @dest: the buffer to store the string token
  @src: the original string
  @len: the max. length of token - 1
  Parses the original string and copy a token to the given
  string buffer.
  Return: The updated pointer of the original string so that
  it can be used for the next call.
  snd_info_create_entry - create an info entry
  @name: the proc file name
  @parent: the parent directory
  Creates an info entry with the given file name and initializes as
  the default state.
  Usually called from other functions such as
  snd_info_create_card_entry().
  Return: The pointer of the new instance, or %NULL on failure.
  snd_info_create_module_entry - create an info entry for the given module
  @module: the module pointer
  @name: the file name
  @parent: the parent directory
  Creates a new info entry and assigns it to the given module.
  Return: The pointer of the new instance, or %NULL on failure.
  snd_info_create_card_entry - create an info entry for the given card
  @card: the card instance
  @name: the file name
  @parent: the parent directory
  Creates a new info entry and assigns it to the given card.
  Return: The pointer of the new instance, or %NULL on failure.
  snd_info_free_entry - release the info entry
  @entry: the info entry
  Releases the info entry.
 free all children at first 
  snd_info_register - register the info entry
  @entry: the info entry
  Registers the proc info entry.
  The all children entries are registered recursively.
  Return: Zero if successful, or a negative error code on failure.
  snd_card_rw_proc_new - Create a readwrite text proc file entry for the card
  @card: the card instance
  @name: the file name
  @private_data: the arbitrary private data
  @read: the read callback
  @write: the write callback, NULL for read-only
  This proc file entry will be registered via snd_card_register() call, and
  it will be removed automatically at the card removal, too.
 freed in error path 
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (c) by Jaroslav Kysela <perex@perex.cz>
   Misc memory accessors
  copy_to_user_fromio - copy data from mmio-space to user-space
  @dst: the destination pointer on user-space
  @src: the source pointer on mmio
  @count: the data size to copy in bytes
  Copies the data from mmio-space to user-space.
  Return: Zero if successful, or non-zero on failure.
  copy_from_user_toio - copy data from user-space to mmio-space
  @dst: the destination pointer on mmio-space
  @src: the source pointer on user-space
  @count: the data size to copy in bytes
  Copies the data from user-space to mmio-space.
  Return: Zero if successful, or non-zero on failure.
 SPDX-License-Identifier: GPL-2.0-or-later
    32bit -> 64bit ioctl wrapper for PCM API
    Copyright (c) by Takashi Iwai <tiwai@suse.de>
 This file included from pcm_native.c 
 this must be identical 
 reserved masks 
 reserved intervals 
	
	  Check silent_size parameter.  Since we have 64bit boundary,
	  silence_size must be compared with the 32bit boundary.
 X32 ABI has the same struct as x86-64 for snd_pcm_channel_info 
 CONFIG_X86_X32 
 alignment 
	
	  with extension, parameters are readwrite,
	  get audio_tstamp_data from user,
	  ignore rest of status structure
 both for HW_PARAMS and HW_REFINE 
 only fifo_size (RO from userspace) is different, so just copy all 
 copy the result 
 snd_xfern needs remapping of bufs 
 this is void ; 
  xfern ioctl nees to copy (up to) 128 pointers on stack.
  although we may pass the copied pointers through f_op->ioctl, but the ioctl
  handler there expands again the same 128 pointers on stack, so it is better
  to handle the function (calling pcm_readvwritev) directly in this handler.
 X32 ABI has 64bit timespec and 64bit alignment 
 alignment 
 alignment 
 FIXME: we should consider the boundary for the sync from app 
 CONFIG_X86_X32 
 PCM 2.0.15 API definition had a bug in mmap control; it puts the avail_min
  at the wrong offset due to a typo in padding type.
  The bug hits only 32bit.
  A workaround for incorrect readwrite is needed only in 32bit compat mode.
 SiC! here is the bug 
 CONFIG_X86_X32 
	
	  When PCM is used on 32bit mode, we need to disable
	  mmap of the old PCM statuscontrol records because
	  of the size incompatibility.
 CONFIG_X86_X32 
 CONFIG_X86_X32 
   PCM IO Plug-In Interface
   Copyright (c) 1999 by Jaroslav Kysela <perex@perex.cz>
    This library is free software; you can redistribute it andor modify
    it under the terms of the GNU Library General Public License as
    published by the Free Software Foundation; either version 2 of
    the License, or (at your option) any later version.
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Library General Public License for more details.
    You should have received a copy of the GNU Library General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
   Basic io plugin
   Rate conversion Plug-In
   Copyright (c) 1999 by Jaroslav Kysela <perex@perex.cz>
    This library is free software; you can redistribute it andor modify
    it under the terms of the GNU Library General Public License as
    published by the Free Software Foundation; either version 2 of
    the License, or (at your option) any later version.
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Library General Public License for more details.
    You should have received a copy of the GNU Library General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
   Basic rate conversion plugin
 silenty ignore other actions 
 SPDX-License-Identifier: GPL-2.0-or-later
   Digital Audio (PCM) abstract layer  OSS compatible
   Copyright (c) by Jaroslav Kysela <perex@perex.cz>
  helper functions to process hw_params
  snd_pcm_hw_param_value_min
  @params: the hw_params instance
  @var: parameter to retrieve
  @dir: pointer to the direction (-1,0,1) or NULL
  Return the minimum value for field PAR.
  snd_pcm_hw_param_value_max
  @params: the hw_params instance
  @var: parameter to retrieve
  @dir: pointer to the direction (-1,0,1) or NULL
  Return the maximum value for field PAR.
  snd_pcm_hw_param_min
  @pcm: PCM instance
  @params: the hw_params instance
  @var: parameter to retrieve
  @val: minimal value
  @dir: pointer to the direction (-1,0,1) or NULL
  Inside configuration space defined by PARAMS remove from PAR all 
  values < VAL. Reduce configuration space accordingly.
  Return new minimum or -EINVAL if the configuration space is empty
  snd_pcm_hw_param_max
  @pcm: PCM instance
  @params: the hw_params instance
  @var: parameter to retrieve
  @val: maximal value
  @dir: pointer to the direction (-1,0,1) or NULL
  Inside configuration space defined by PARAMS remove from PAR all 
   values >= VAL + 1. Reduce configuration space accordingly.
   Return new maximum or -EINVAL if the configuration space is empty
 Return 1 if min is nearer to best than max 
  snd_pcm_hw_param_near
  @pcm: PCM instance
  @params: the hw_params instance
  @var: parameter to retrieve
  @best: value to set
  @dir: pointer to the direction (-1,0,1) or NULL
  Inside configuration space defined by PARAMS set PAR to the available value
  nearest to VAL. Reduce configuration space accordingly.
  This function cannot be called for SNDRV_PCM_HW_PARAM_ACCESS,
  SNDRV_PCM_HW_PARAM_FORMAT, SNDRV_PCM_HW_PARAM_SUBFORMAT.
  Return the value found.
 FIXME 
  snd_pcm_hw_param_set
  @pcm: PCM instance
  @params: the hw_params instance
  @var: parameter to retrieve
  @val: value to set
  @dir: pointer to the direction (-1,0,1) or NULL
  Inside configuration space defined by PARAMS remove from PAR all 
  values != VAL. Reduce configuration space accordingly.
   Return VAL or -EINVAL if the configuration space is empty
  plugin
 CONFIG_SND_PCM_OSS_PLUGINS 
 define extended formats in the recent OSS versions (if any) 
 linear formats 
 other supported formats 
 unsupported formats 
 try multiples of the best rate 
 not found, use the nearest rate 
 parameter locking: returns immediately if tried during streaming 
 call with params_lock held 
 add necessary plugins 
 this one takes the lock by itself 
 call with params_lock held 
 NOTE: this always call PREPARE unconditionally no matter whether
  runtime->oss.prepare is set or not
 call with params_lock held 
 in case of overrun, skip whole periods like OSSLinux driver does 
 until avail(delay) <= buffer_size 
 test, if we can't store new data, because the stream 
 has not been started 
 test, if we can't store new data, because the stream 
 has not been started 
 CONFIG_SND_PCM_OSS_PLUGINS 
 note: all errors from the start action are ignored 
 OSS apps do not know, how to handle them 
		
		  The ALSA's period might be a bit large than OSS one.
		  Fill the remain portion of ALSA period with zeros.
		
		  finish sync: drain the buffer
 < 16 
 DSP_CAP_REALTIME is set all times: 
 all ALSA drivers can return actual pointer in ring buffer 
 revision - same as SB AWE 64 
 hack for broken OSS applications 
 it won't be probably implemented
 pr_debug("TODO: snd_pcm_oss_get_mapbuf\n");
 no matching substream 
 mixer ioctl - for OSS compatibility 
 stop DMA now.. 
 it's for sure, some broken apps don't check for error codes 
 silently ignore 
 all compatible 
	
	  Everything is compatbile except SNDCTL_DSP_MAPINBUFSNDCTL_DSP_MAPOUTBUF,
	  which are not implemented for the native case either
	 set VM_READ access as well to fix memset() routines that do
		 use mutex_trylock() for params_lock for avoiding a deadlock
		  between mmap_lock and params_lock taken by
		  copy_fromto_user() in snd_pcm_oss_writeread()
 In mmap mode we never stop 
   proc interface
 !CONFIG_SND_VERBOSE_PROCFS 
 CONFIG_SND_VERBOSE_PROCFS 
   ENTRY functions
 check device map table 
   PCM Plug-In shared (kernellibrary) code
   Copyright (c) 1999 by Jaroslav Kysela <perex@perex.cz>
   Copyright (c) 2000 by Abramo Bagnara <abramo@alsa-project.org>
    This library is free software; you can redistribute it andor modify
    it under the terms of the GNU Library General Public License as
    published by the Free Software Foundation; either version 2 of
    the License, or (at your option) any later version.
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Library General Public License for more details.
    You should have received a copy of the GNU Library General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
   because some cards might have rates "very close", we ignore
   all "resampling" requests within +-5%
 Format change (linearization) 
 channels reduction 
 rate resampling 
 convert to S16 for resampling 
 format change 
 channels extension 
 de-interleave 
 FIXME: sub byte resolution and odd dst_offset 
 Ima ADPCM 
 FIXME: sub byte resolution and odd dst_offset 
 Ima ADPCM 
   Linear conversion Plug-In
   Copyright (c) 2000 by Abramo Bagnara <abramo@alsa-project.org>
    This library is free software; you can redistribute it andor modify
    it under the terms of the GNU Library General Public License as
    published by the Free Software Foundation; either version 2 of
    the License, or (at your option) any later version.
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Library General Public License for more details.
    You should have received a copy of the GNU Library General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 SPDX-License-Identifier: GPL-2.0-or-later
   OSS emulation layer for the mixer interface
   Copyright (c) by Jaroslav Kysela <perex@perex.cz>
 exclusive 
 exclusive 
 exclusive input 
 all compatible 
   REGISTRATION PART
   utilities
 convert from alsa native to oss values (0-100) 
 convert from oss to alsa native values 
 remember this 
 In a separate function to keep gcc 3.2 happy - do NOT merge this in
  build an OSS mixer element.
  ptr_allocated means the entry is dynamically allocated (change via proc file).
  when replace_old = 1, the old entry is replaced with the new one.
 check if already assigned 
 ID_UNKNOWN 
 note: ES18xx have both Capture Source and XX Capture Volume !!! 
   proc interface
 remove the entry 
 too big 
 not changed 
 !CONFIG_SND_PROC_FS 
 CONFIG_SND_PROC_FS 
 fallback 
 fallback 
 fallback 
 fallback 
 fallback 
 fallback 
 fallback 
 fallback 
 fallback 
 fallback 
fallback
fallback
 fallback 
   Route Plug-In
   Copyright (c) 2000 by Abramo Bagnara <abramo@alsa-project.org>
    This library is free software; you can redistribute it andor modify
    it under the terms of the GNU Library General Public License as
    published by the Free Software Foundation; either version 2 of
    the License, or (at your option) any later version.
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Library General Public License for more details.
    You should have received a copy of the GNU Library General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 expand to all channels 
   Linear conversion Plug-In
   Copyright (c) 1999 by Jaroslav Kysela <perex@perex.cz>,
 			  Abramo Bagnara <abramo@alsa-project.org>
    This library is free software; you can redistribute it andor modify
    it under the terms of the GNU Library General Public License as
    published by the Free Software Foundation; either version 2 of
    the License, or (at your option) any later version.
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Library General Public License for more details.
    You should have received a copy of the GNU Library General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
   Basic linear conversion plugin
 need endian conversion? 
 byte offset in source format 
 byte soffset in destination format 
 byte offset in temporary u32 data 
 byte size of destination format 
 bytes to copy per conversion 
 MSB flip for signeness, done after endian conv 
   Mu-Law conversion Plug-In Interface
   Copyright (c) 1999 by Jaroslav Kysela <perex@perex.cz>
                         Uros Bizjak <uros@kss-loka.si>
   Based on reference implementation by Sun Microsystems, Inc.
    This library is free software; you can redistribute it andor modify
    it under the terms of the GNU Library General Public License as
    published by the Free Software Foundation; either version 2 of
    the License, or (at your option) any later version.
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Library General Public License for more details.
    You should have received a copy of the GNU Library General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 Sign bit for a u-law byte. 
 Quantization field mask. 
 Number of u-law segments. 
 Left shift for segment number. 
 Segment field mask. 
 Bias for linear code. 
  linear2ulaw() - Convert a linear PCM value to u-law
  In order to simplify the encoding process, the original linear magnitude
  is biased by adding 33 which shifts the encoding range from (0 - 8158) to
  (33 - 8191). The result can be seen in the following encoding table:
 	Biased Linear Input Code	Compressed Code
 	------------------------	---------------
 	00000001wxyza			000wxyz
 	0000001wxyzab			001wxyz
 	000001wxyzabc			010wxyz
 	00001wxyzabcd			011wxyz
 	0001wxyzabcde			100wxyz
 	001wxyzabcdef			101wxyz
 	01wxyzabcdefg			110wxyz
 	1wxyzabcdefgh			111wxyz
  Each biased linear code has a leading 1 which identifies the segment
  number. The value of the segment number is equal to 7 minus the number
  of leading 0's. The quantization interval is directly available as the
  four bits wxyz.   The trailing bits (a - h) are ignored.
  Ordinarily the complement of the resulting code word is used for
  transmission, and so the code word is complemented before it is returned.
  For further information see John C. Bellamy's Digital Telephony, 1982,
  John Wiley & Sons, pps 98-111 and 472-476.
 2's complement (16-bit range) 
 Get the sign and the magnitude of the value. 
 Convert the scaled magnitude to segment number. 
	
	  Combine the sign, segment, quantization bits;
	  and complement the code word.
  ulaw2linear() - Convert a u-law value to 16-bit linear PCM
  First, a biased linear code is derived from the code word. An unbiased
  output can then be obtained by subtracting 33 from the biased code.
  Note that this function expects to be passed the complement of the
  original code word. This is in keeping with ISDN conventions.
 Complement to obtain normal u-law value. 
	
	  Extract and bias the quantization bits. Then
	  shift up by the segment number and subtract out the bias.
   Basic Mu-Law plugin
 need endian conversion? 
 byte offset in native format 
 byte offset in s16 format 
 byte size of the native format 
 bytes to copy per conversion 
 MSB flip for signedness, done after endian conversion 
 S24 in 4bytes need an 1 byte offset 
 SPDX-License-Identifier: GPL-2.0-or-later
   Virtual Raw MIDI client on Sequencer
   Copyright (c) 2000 by Takashi Iwai <tiwai@suse.de>,
                         Jaroslav Kysela <perex@perex.cz>
  Virtual Raw MIDI client
  The virtual rawmidi client is a sequencer client which associate
  a rawmidi device file.  The created rawmidi device file can be
  accessed as a normal raw midi, but its MIDI source and destination
  are arbitrary.  For example, a user-client software synth connected
  to this port can be used as a normal midi device as well.
  The virtual rawmidi device accepts also multiple opens.  Each file
  has its own input buffer, so that no conflict would occur.  The drain
  of inputoutput buffer acts only to the local buffer.
  initialize an event record
 FIXME: source and destination are same - not good.. 
  decode input event and put to read buffer of each opened file
  event handler of virmidi port
 ignored 
  trigger rawmidi stream for input
 process rawmidi bytes and send events;
  we need no lock here for vmidi->event since it's handled only in this work
 discard the outputs in dispatch mode unless subscribed 
 rawmidi input might be huge, allow to have a break 
  trigger rawmidi stream for output
  open rawmidi handle for input
  open rawmidi handle for output
  close rawmidi handle for input
  close rawmidi handle for output
 to be sure 
  subscribe callback - allow output to rawmidi device
  unsubscribe callback - disallow output to rawmidi device
  use callback - allow input to rawmidi device
  unuse callback - disallow input to rawmidi device
   Register functions
  create a sequencer client and a port
 create a port 
 set all capabilities 
 success 
  release the sequencer client
  register the device
 should check presence of port more strictly.. 
  unregister the device
  free device
  create a new device
 exported 
 may be configurable 
 may be configurable 
 SPDX-License-Identifier: GPL-2.0-or-later
    ALSA sequencer proc interface
    Copyright (c) 1998 by Frank van de Pol <fvdpol@coil.demon.nl>
 create all our proc entries 
 SPDX-License-Identifier: GPL-2.0-or-later
    Generic MIDI synth driver for ALSA sequencer
    Copyright (c) 1998 by Frank van de Pol <fvdpol@coil.demon.nl>
                          Jaroslav Kysela <perex@perex.cz>
Possible options for midisynth module:
	- automatic opening of midi ports on first received event or subscription
	  (close will be performed when client leaves)
 data for this midi synth driver 
 handle rawmidi input event (MIDI v1.0 stream) 
 clear event and reset header 
 buffer for constructing midi messages 
 special case, to save space 
 invalid event 
 open associated midi device for input 
 open midi port 
 close associated midi device for input 
 open associated midi device for output 
 open midi port 
 close associated midi device for output 
 delete given midi synth port 
 delete port 
 register new midi synth port 
 declare port 
 last resort 
 success 
 release midi synth port 
 SPDX-License-Identifier: GPL-2.0-or-later
    ALSA sequencer Timing queue handling
    Copyright (c) 1998-1999 by Frank van de Pol <fvdpol@coil.demon.nl>
  MAJOR CHANGES
    Nov. 13, 1999	Takashi Iwai <iwai@ww.uni-erlangen.de>
      - Queues are allocated dynamically via ioctl.
      - When owner client is deleted, all owned queues are deleted, too.
      - Owner of unlocked queue is kept unmodified even if it is
 	 manipulated by other clients.
      - Owner field in SET_QUEUE_OWNER ioctl must be identical with the
        caller client.  i.e. Changing owner to a third client is not
        allowed.
   Aug. 30, 2000	Takashi Iwai
      - Queues are managed in static array again, but with better way.
        The API itself is identical.
      - The queue is locked when struct snd_seq_queue pointer is returned via
        queueptr().  This pointer MUST be released afterward by
        queuefree(ptr).
      - Addition of experimental sync support.
 list of allocated queues 
 number of queues allocated 
----------------------------------------------------------------
 assign queue id and insert to list 
 found 
----------------------------------------------------------------
 create new queue (constructor) 
 delete queue (destructor) 
 stop and release the timer 
 wait until access free 
 release resources... 
----------------------------------------------------------------
 delete all existing queues 
 clear list 
 allocate a new queue -
  return pointer to new queue or ERR_PTR(-errno) for error
  The new queue's use_lock is set to 1. It is the caller's responsibility to
  call snd_use_lock_free(&q->use_lock).
 delete a queue - queue must be owned by the client 
 return pointer to queue structure for specified id 
 return the (first) queue matching with the specified name 
 -------------------------------------------------------- 
 make this function non-reentrant 
 other thread is already checking queues 
 Process tick queue... 
 Process time queue... 
 free lock 
 enqueue a event to singe queue 
 destination queue 
 handle relative time stamps, convert them into absolute 
 enqueue event in the real-time or midi queue 
 unlock 
 trigger dispatching 
 unlock 
----------------------------------------------------------------
 check if the client has permission to modify queue parameters.
  if it does, lock the queue
 unlock the queue 
 exported - only checking permission 
----------------------------------------------------------------
  change queue's owner and permission
----------------------------------------------------------------
 open timer -
  q->use mutex should be down before calling this function to avoid
  confliction with snd_seq_queue_use()
 close timer -
  q->use mutex should be down before calling this function
 change queue tempo and ppq 
 use or unuse this queue 
 use or unuse this queue -
  if it is the first client, starts the timer.
  if it is not longer used by any clients, stop the timer.
  check if queue is used by the client
  return negative value if the queue is invalid.
  return 0 if not used, 1 if used.
 invalid queue 
----------------------------------------------------------------
 final stage notification -
  remove cells for no longer exist client (for non-owned queue)
  or delete this queue (for owned queue)
 delete own queues from queue list 
	 remove cells from existing queues -
	  they are not owned by this client
----------------------------------------------------------------
 remove cells from all queues 
 remove cells based on flush criteria 
----------------------------------------------------------------
  send events to all subscribed ports
 broadcast events from Timer port 
  process a received queue-control event.
  this function is exported for seq_sync.c.
  Queue control via timer control port:
  this function is exported as a callback of timer port.
----------------------------------------------------------------
 exported to seq_info.c 
 CONFIG_SND_PROC_FS 
 SPDX-License-Identifier: GPL-2.0-or-later
   ALSA sequencer Memory Manager
   Copyright (c) 1998 by Frank van de Pol <fvdpol@coil.demon.nl>
                         Jaroslav Kysela <perex@perex.cz>
                 2000 by Takashi Iwai <tiwai@suse.de>
  Variable length event:
  The event like sysex uses variable length type.
  The external data may be stored in three different formats.
  1) kernel space
     This is the normal case.
       ext.data.len = length
       ext.data.ptr = buffer pointer
  2) user space
     When an event is generated via read(), the external data is
     kept in user space until expanded.
       ext.data.len = length | SNDRV_SEQ_EXT_USRPTR
       ext.data.ptr = userspace pointer
  3) chained cells
     When the variable length event is enqueued (in prioq or fifo),
     the external data is decomposed to several cells.
       ext.data.len = length | SNDRV_SEQ_EXT_CHAINED
       ext.data.ptr = the additiona cell head
          -> cell.next -> cell.next -> ..
  exported:
  call dump function to expand external data.
  exported:
  expand the variable length event to linear buffer space.
  release this cell, free extended data if available
 has enough space now? 
  allocate an event cell.
 not initialized 
 interrupted? 
 closing.. 
 clear cell pointers 
  duplicate the event to a cell.
  if the event has external data, the data is decomposed to additional
  cells.
 copy the event 
 decompose 
 copy chunk 
 poll wait 
 allocate room specified number of events 
 add new cells to the free cell list 
 init statistics 
 refuse the further insertion to the pool 
 remove events 
 wait for closing all threads 
 release all resources 
 init new memory pool 
 create pool block 
 init statistics 
 remove memory pool 
 exported to seq_clientmgr.c 
 SPDX-License-Identifier: GPL-2.0-or-later
    ALSA sequencer Timer
    Copyright (c) 1998-1999 by Frank van de Pol <fvdpol@coil.demon.nl>
                               Jaroslav Kysela <perex@perex.cz>
 allowed sequencer timer frequencies, in Hz 
 16bit shift 
 might overflow.. 
 create new timer (constructor) 
 reset setup to defaults 
 reset time 
 delete timer (destructor) 
 reset time 
 setup defaults 
 96 PPQ 
 120 BPM 
 reset time & songposition 
 called by timer interrupt routine. the period time since previous invocation is passed 
 FIXME: assuming skew_base = 0x10000 
 update timer 
 calculate current tick 
 register actual time of this timer update 
 check queues and dispatch events 
 set current tempo 
 set current tempo and ppq in a shot 
 refuse to change ppq on running timers 
 because it will upset the song position (ticks) 
 set current tick position 
 set current real-time position 
 set timer skew 
 FIXME 
 standard ALSA timer 
 return current 'real' time. use timeofday() to get better granularity. 
 TODO: use interpolation on tick queue (will only be useful for very
 exported to seq_info.c 
 CONFIG_SND_PROC_FS 
 SPDX-License-Identifier: GPL-2.0-or-later
   GMGSXG midi module.
   Copyright (C) 1999 Steve Ratcliffe
   Based on awe_wave.c by Takashi Iwai
  This module is used to keep track of the current midi state.
  It can be used for drivers that are required to emulate midi when
  the hardware doesn't.
  It was written for a AWE64 driver, but there should be no AWE specific
  code in here.  If there is it should be reported as a bug.
 Prototypes for static functions 
  Process an event in a driver independent way.  This means dealing
  with RPN, NRPN, SysEx etc that are defined for common midi applications
  such as GM, GS and XG.
  There modes that this module will run in are:
    Generic MIDI - no interpretation at all, it will just save current values
                   of controllers etc.
    GM - You can use all gm_ prefixed elements of chan.  Controls, RPN, NRPN,
         SysEx will be interpreded as defined in General Midi.
    GS - You can use all gs_ prefixed elements of chan. Codes for GS will be
         interpreted.
    XG - You can use all xg_ prefixed elements of chan.  Codes for XG will
         be interpreted.
 EVENT_NOTE should be processed before queued 
	 Make sure that we don't have a note on that should really be
 Make sure the note is within array range 
 Best guess is that this is any of the 14 bit controller values 
 set low part first 
 Break it back into its controller values 
 Break it back into its controller values 
pr_debug("ALSA: seq_midi_emul: Unimplemented event %d\n", ev->type);
  release note
 Hold this note until pedal is turned off 
		 Mark this note as release; it will be turned off when sostenuto
  Do all driver independent operations for this controller and pass
  events that need to take place immediately to the driver.
 Switches 
 These are all switches; either off or on so set to 0 or 127 
 Sustain has been released, turn off held notes 
 Mark each note that is currently held down 
 release all notes that were held 
  initialize the MIDI status
 2 semitones 
  Process a rpn message.
 Pitch bend sensitivity 
 MSB only  1 semitone per 128 
 fine tuning: 
 MSBLSB, 8192=center, 1008192 cent step 
 coarse tuning 
 MSB only  8192=center, 1 semitone per 128 
 "lock-in" RPN 
 ignored 
 should call nrpn or rpn callback here.. 
  Process an nrpn message.
 parse XG NRPNs here if possible 
  convert channel parameter in GS sysex
  Process a sysex message.
 GM on 
 XG on 
	 GS prefix
	  drum channel: XX=0x1?(channel), YY=0x15, ZZ=onoff
	  reverb mode: XX=0x01, YY=0x30, ZZ=0-7
	  chorus mode: XX=0x01, YY=0x38, ZZ=0-7
	  master vol:  XX=0x00, YY=0x04, ZZ=0-127
XX,YY,ZZ
 skip first byte 
 GM on 
 GS macros 
 GS reset 
 drum pattern 
 program 
 reverb mode 
 chorus mode 
 master volume 
 XG on 
 reset CC#0 for drums 
  all sound off
  all notes off
  Initialise a single midi channel control block.
 2 semitones 
 Default ch 10 as drums 
  Allocate and initialise a set of midi channel control blocks.
  reset all midi channels
 2 semitones 
  Allocate and initialise a midi channel set.
  Reset the midi controllers on a particular channel to default values.
  Free a midi channel set.
 SPDX-License-Identifier: GPL-2.0-or-later
    ALSA sequencer System services Client
    Copyright (c) 1998-1999 by Frank van de Pol <fvdpol@coil.demon.nl>
 internal client that provide system services, access to timer etc. 
  Port "Timer"
       - send tempo startstop etc. events to this port to manipulate the 
         queue's timer. The queue address is specified in
 	  data.queue.queue.
       - this port supports subscription. The received timer events are 
         broadcasted to all subscribed clients. The modified tempo
 	  value is stored on data.queue.value.
 	  The modifier clientport is not send.
  Port "Announce"
       - does not receive message
       - supports supscription. For each client or port attaching to or 
         detaching from the system an announcement is send to the subscribed
         clients.
  Idea: the subscription mechanism might also work handy for distributing 
  synchronisation and timing information. In this case we would ideally have
  a list of subscribers for each type of sync (time, tick), for each timing
  queue.
  NOTE: the queue to be started, stopped, etc. must be specified
 	 in data.queue.addr.queue field.  queue is used only for
 	 scheduling, and no longer referred as affected queue.
 	 They are used only for timer broadcast (see above).
 							-- iwai
 client id of our system client 
 port id numbers for this client 
 fill standard header data, source port & channel are filled in 
 fill data 
ev->data.addr.queue = SNDRV_SEQ_ADDRESS_UNKNOWN;
 entry points for broadcasting system events 
 entry points for broadcasting system events 
 call-back handler for timer events 
 register our internal client 
 register client 
 register timer 
 accept queue control 
 for broadcast 
 register announcement port 
 for broadcast only 
 unregister our internal client 
 SPDX-License-Identifier: GPL-2.0-or-later
    ALSA sequencer Priority Queue
    Copyright (c) 1998-1999 by Frank van de Pol <fvdpol@coil.demon.nl>
 Implementation is a simple linked list for now...
   This priority queue orders the events on timestamp. For events with an
   equeal timestamp the queue behaves as a FIFO. 
              +-------+
     Head --> | first |
              +-------+
                    |next
              +-----v-+
              |       |
              +-------+
                    |
              +-----v-+
              |       |
              +-------+
                    |
              +-----v-+
     Tail --> | last  |
              +-------+
 create new prioq (constructor) 
 delete prioq (destructor) 
 release resources...
....................
 drain prioQ 
 compare timestamp between events 
 return 1 if a >= b; 0 
 compare ticks 
 compare real time 
 compare timestamp between events 
 return negative if a < b;
         zero     if a = b;
         positive if a > b;
 compare ticks 
 compare real time 
 enqueue cell to prioq 
 check flags 
	 check if this element needs to inserted at the end (ie. ordered 
	   data is inserted) This will be very likeley if a sequencer 
 add new cell to tail of the fifo 
	 traverse list of elements to find the place where the new cell is
 previous cell 
 cursor 
 FIXME: enough big, isn't it? 
 compare timestamps 
 new cell has earlier schedule time, 
 equal schedule time and prior to others 
 new cell has equal or larger schedule time, 
 move cursor to next cell 
 insert it before cursor 
 this is the first cell, set head to it 
 reached end of the list 
 return 1 if the current time >= event timestamp 
 dequeue cell from prioq 
 reset tail if this was the last element 
 return number of events available in prioq 
 remove cells for left client 
 collect all removed cells 
 remove cell from prioq 
 add cell to free list 
 remove selected cells 
 data.note.channel and data.control.channel are identical 
 Do not remove off events 
 case SNDRV_SEQ_EVENT_SAMPLE_STOP: 
 remove cells matching remove criteria 
 collect all removed cells 
 remove cell from prioq 
 add cell to free list 
 remove selected cells 
 SPDX-License-Identifier: GPL-2.0-or-later
   ALSA sequencer Client Manager
   Copyright (c) 1998-2001 by Frank van de Pol <fvdpol@coil.demon.nl>
                              Jaroslav Kysela <perex@perex.cz>
                              Takashi Iwai <tiwai@suse.de>
 Client Manager
  this module handles the connections of userland and kernel clients
  There are four ranges of client numbers (last two shared):
  0..15: global clients
  16..127: statically allocated client numbers for cards 0..27
  128..191: dynamically allocated client numbers for cards 28..31
  128..191: dynamically allocated client numbers for applications
 number of kernel non-card clients 
 clients per cards, for static clients 
 dynamically allocated client numbers (both kernel drivers and user space) 
  client table
  prototypes
 return pointer to client structure for specified id 
 Take refcount and perform ioctl_mutex lock on the given client;
  used only for OSS sequencer
  Unlock via snd_seq_client_ioctl_unlock() below
 The client isn't unrefed here; see snd_seq_client_ioctl_unlock() 
 Unlock and unref the given client; for OSS sequencer use only 
	 The doubly unrefs below are intentional; the first one releases the
	  leftover from snd_seq_client_ioctl_lock() above, and the second one
	  is for releasing snd_seq_client_use_ptr() in this function
 initialise data structures 
 zap out the client table 
 init client data 
 find free slot in the client table 
 no free slot found or busy, return failure code 
 -------------------------------------------------------- 
 create a user client 
 client id 
 failure code 
 fill client data 
 make others aware this new client 
 delete a user client 
 handle client read() 
 possible error values:
 	-ENXIO	invalid client or file open mode
 	-ENOSPC	FIFO overflow (the flag is cleared after this error report)
 	-EINVAL	no enough user-space buffer to write the whole event
 	-EFAULT	seg. fault during copy to user space
 check client structures are in place 
 buffer overflow is detected 
 return error code 
 while data available in queue 
 to be sure 
  check access permission to the port
  check if the destination client is available, and return the pointer
  if filter is non-zero, client filter bitmap is tested.
 ok - accessible 
  Return the error event.
  If the receiver client is a user client, the original event is
  encapsulated in SNDRV_SEQ_EVENT_BOUNCE as variable length event.  If
  the original event is also variable length, the external data is
  copied after the event record. 
  If the receiver client is a kernel client, the original event is
  quoted in SNDRV_SEQ_EVENT_KERNEL_ERROR, since this requires no extra
  kmalloc.
 ignored 
 set up quoted error 
 use positive value 
  rewrite the time-stamp of the event record with the curren time
  of the given queue.
  return non-zero if updated.
  deliver an event to the specified destination.
  if filter is non-zero, client filter bitmap is tested.
   RETURN VALUE: 0 : if succeeded
 		 <0 : error
 check permission 
  send the event to all subscribers:
 invalid source port 
 save original event record 
 lock list 
 both ports ready? 
 convert time according to flag with subscription 
 save first error that occurs and continue 
 restore original event record 
 restore 
  broadcast to all ports:
 no matching destination 
 pass NULL as source client to avoid error bounce 
 save first error that occurs and continue 
 restore 
  send the event to all clients:
  if destination port is also ADDRESS_BROADCAST, deliver to all ports.
 save 
 don't send to itself 
 pass NULL as source client to avoid error bounce 
 save first error that occurs and continue 
 restore 
 multicast - not supported yet 
 ignored 
 SUPPORT_BROADCAST 
 deliver an event to the destination port(s).
  if the event is to subscribers or broadcast, the event is dispatched
  to multiple targets.
  RETURN VALUE: n > 0  : the number of delivered events.
                n == 0 : the event was not passed to any client.
                n < 0  : error - event was not processed.
  dispatch an event cell:
  This function is called only from queue check routines in timer
  interrupts or after enqueued.
  The event cell shall be released or re-queued in this function.
  RETURN VALUE: n > 0  : the number of delivered events.
 		 n == 0 : the event was not passed to any client.
 		 n < 0  : error - event was not processed.
 release this cell 
		 NOTE event:
		  the event cell is re-used as a NOTE-OFF event and
		  enqueued again.
 reserve this event to enqueue note-off later 
		
		  This was originally a note event.  We now re-use the
		  cell for the note-off event.
 add the duration time 
 unit for duration is ms 
 Now queue this cell as the note off event 
 release this cell 
		 Normal events:
		  event cell is freed after processing the event
 Allocate a cell from client pool and enqueue it to queue:
  if pool is empty and blocking is TRUE, sleep until a new cell is
  available.
 special queue values - force direct passing 
 check presence of source port 
 direct event processing without enqueued 
 this event must be enqueued! 
 Not direct, normal queuing 
 invalid queue 
 queue is not allocated 
 allocate an event cell 
 we got a cell. enqueue it. 
  check validity of event type and data length.
  return non-zero if invalid.
 handle write() 
 possible error values:
 	-ENXIO	invalid client or file open mode
 	-ENOMEM	malloc failed
 	-EFAULT	seg. fault during copy from user space
 	-EINVAL	invalid event
 	-EAGAIN	no space in output pool
 	-EINTR	interrupts while sleep
 	-EMLINK	too many hops
 	others	depends on return value from driver callback
 check client structures are in place 
 allocate the pool now if the pool is not allocated yet  
 only process whole events 
 Read in the event header from the user 
 fill in client number 
 Check for extension data length 
 check for special events 
 back out, will get an error this time or next 
 set user space pointer 
 increment data length 
 ok, enqueue it 
 Update pointers and counts 
 let's have a coffee break if too many events are queued 
  handle polling
 check client structures are in place 
 check if data is available in the outqueue 
 check if data is available in the pool 
-----------------------------------------------------
 SYSTEM_INFO ioctl() 
 fill the info fields 
 fixed limit 
 RUNNING_MODE ioctl() 
 requested client number 
 don't change !!! 
 CLIENT_INFO ioctl() 
 fill the info fields 
 requested client number 
 don't change !!! 
 CLIENT_INFO ioctl() 
 it is not allowed to set the info fields for an another client 
 also client type must be set now 
 fill the info fields 
  CREATE PORT ioctl() 
 it is not allowed to create the port for an another client 
  DELETE PORT ioctl() 
 it is not allowed to remove the port for an another client 
  GET_PORT_INFO ioctl() (on any client) 
 don't change 
 get port info 
  SET_PORT_INFO ioctl() (only ports on thisown client) 
 only set our own ports ! 
  port subscription (connection)
 connection by third client - check export permission 
 check read permission 
	 if sender or receiver is the subscribing client itself,
	  no permission check is necessary
 check write permission 
  send an subscription notify event to user client:
  client must be user client.
 non-atomic 
  add to port's subscription list IOCTL interface 
 connect them 
 broadcast announce 
  remove from port's subscription list 
 broadcast announce 
 CREATE_QUEUE ioctl() 
 set queue name 
 DELETE_QUEUE ioctl() 
 GET_QUEUE_INFO ioctl() 
 SET_QUEUE_INFO ioctl() 
 change ownerlocked permission 
 GET_NAMED_QUEUE ioctl() 
 GET_QUEUE_STATUS ioctl() 
 GET_QUEUE_TEMPO ioctl() 
 SET_QUEUE_TEMPO ioctl() 
 GET_QUEUE_TIMER ioctl() 
 SET_QUEUE_TIMER ioctl() 
 GET_QUEUE_CLIENT ioctl() 
 SET_QUEUE_CLIENT ioctl() 
 GET_CLIENT_POOL ioctl() 
 SET_CLIENT_POOL ioctl() 
 can't change other clients 
 is the pool in use? 
 remove all existing cells 
 change pool size 
 REMOVE_EVENTS ioctl() 
	
	  Input mostly not implemented XXX.
		
		  No restrictions so for a user client we can clear
		  the whole fifo
  get subscription info
  get subscription info - check only its presence
 search for the subscriber 
 found! 
  query next client
 search for next client 
 found 
  query next port
 search for next port 
 get port info 
 -------------------------------------------------------- 
 To use kernel stack for ioctl data. 
	
	  All of ioctl commands for ALSA sequencer get an argument of size
	  within 13 bits. We can safely pick up the size from the command.
 Some commands includes a bug in 'dir' field. 
 -------------------------------------------------------- 
 exported to kernel modules 
 empty write queue as default 
 failure code 
 make others aware this new client 
 return client number to caller 
 exported to kernel modules 
  exported, called by kernel clients to enqueue events (wo blocking)
  RETURN VALUE: zero if succeed, negative if error
 ignore this 
 quoted events can't be enqueued 
 fill in client number 
 send it 
  exported, called by kernel clients to dispatch events directly to other
  clients, bypassing the queues.  Event time-stamp will be updated.
  RETURN VALUE: negative = delivery failed,
 		 zero, or positive: the number of delivered events
 fill in client number 
  snd_seq_kernel_client_ctl - operate a command for a client with data in
 			       kernel space.
  @clientid:	A numerical ID for a client.
  @cmd:	An ioctl(2) command for ALSA sequencer operation.
  @arg:	A pointer to data in kernel space.
  Against its name, both kernelapplication client can be handled by this
  kernel API. A pointer of 'arg' argument should be in kernel space.
  Return: 0 at success. Negative error code at failure.
 exported (for OSS emulator) 
---------------------------------------------------------------------------
   proc interface
 exported to seq_info.c 
 list the client table 
 CONFIG_SND_PROC_FS 
---------------------------------------------------------------------------
   REGISTRATION PART
  register sequencer device 
  unregister sequencer device 
 SPDX-License-Identifier: GPL-2.0-or-later
  ALSA sequencer MIDI-through client
  Copyright (c) 1999-2000 by Takashi Iwai <tiwai@suse.de>
  Sequencer MIDI-through client
  This gives a simple midi-through client.  All the normal input events
  are redirected to output port immediately.
  The routing can be done via aconnect program in alsa-utils.
  Each client has a static client number 14 (= SNDRV_SEQ_CLIENT_DUMMY).
  If you want to auto-load this module, you may add the following alias
  in your etcconf.modules file.
	alias snd-seq-client-14  snd-seq-dummy
  The module is loaded on demand for client 14, or procasoundseq
  is accessed.  If you don't need this module to be loaded, alias
  snd-seq-client-14 as "off".  This will help modprobe.
  The number of ports to be created can be specified via the module
  parameter "ports".  For example, to create four ports, add the
  following option in a configuration file under etcmodprobe.d:
	option snd-seq-dummy ports=4
  The model option "duplex=1" enables duplex operation to the port.
  In duplex mode, a pair of ports are created instead of single port,
  and events are tunneled between pair-ports.  For example, input to
  port A is sent to output port of another port B and vice versa.
  In duplex mode, each port has DUPLEX capability.
  event input callback - just redirect events to subscribers
 ignore system messages 
  free_private callback
  create a port
  register client and create ports
 create client 
 create ports 
  delete client if exists
   Init part
 SPDX-License-Identifier: GPL-2.0-or-later
    ALSA sequencer FIFO
    Copyright (c) 1998 by Frank van de Pol <fvdpol@coil.demon.nl>
 FIFO 
 create new fifo 
 wake up clients if any 
 release resources...
....................
 clear queue 
 clear overflow flag 
 drain the fifo 
 enqueue event to fifo 
 always non-blocking 
 append new cells to fifo 
 wakeup client 
 success 
 dequeue cell from fifo 
 reset tail if this was the last element 
 dequeue cell from fifo and copy on user space 
 non-blocking - return immediately 
 polling; return non-zero if queue is available 
 change the size of pool; all old events are removed 
 allocate new pool 
 remember old pool 
 exchange pools 
 NOTE: overflow flag is not cleared 
 close the old pool and wait until all users are gone 
 release cells in old pool 
 get the number of unused cells safely 
 SPDX-License-Identifier: GPL-2.0-or-later
   MIDI byte <-> sequencer event coder
   Copyright (C) 1998,99 Takashi Iwai <tiwai@suse.de>,
                         Jaroslav Kysela <perex@perex.cz>
 event type, index into status_event[] 
 from 0 to 6 are normal commands (note off, on, etc.) for 0x9?-0xe? 
 from 8 to 15 are events for 0xf0-0xf7 
  prototypes
  event list
 0x80 - 0xef 
 invalid 
 0xf0 - 0xff 
 sysex: 0xf0 
 0xf1 
 0xf2 
 0xf3 
 0xf4 
 0xf5 
 0xf6 
 0xf7 
 0xf8 
 0xf9 
 0xfa 
 0xfb 
 0xfc 
 0xfd 
 0xfe 
 0xff 
   newdelete record
  initialize record
   read one byte and encode to sequencer event:
   return true if MIDI bytes are encoded to an event
          false data is not finished
 real-time event 
 new command 
 system messages 
 rest of command 
 running status 
 set data values 
 continue to parse 
 all parsed 
 encode note event 
 encode one parameter controls 
 encode pitch wheel change 
 encode midi control change 
 encode one parameter value
 encode song position 
  decode from a sequencer event to midi bytes
  return the size of decoded midi events
 data.note.channel and data.control.channel is identical 
 decode note event 
 decode one parameter controls 
 decode pitch wheel change 
 decode midi control change 
 decode song position 
 decode 14bit control 
 decode regnonreg param 
 SPDX-License-Identifier: GPL-2.0-or-later
   Do sleep inside a spin-lock
   Copyright (c) 1999 by Takashi Iwai <tiwai@suse.de>
 wait until all locks are released 
 SPDX-License-Identifier: GPL-2.0-or-later
   ALSA sequencer main module
   Copyright (c) 1998-1999 by Frank van de Pol <fvdpol@coil.demon.nl>
 Hz 
   INIT PART
 register sequencer device 
 register proc interface 
 register our internal client 
 unregister our internal client 
 unregister proc interface 
 delete timing queues 
 unregister sequencer device 
 SPDX-License-Identifier: GPL-2.0-or-later
    32bit -> 64bit ioctl wrapper for sequencer API
    Copyright (c) by Takashi Iwai <tiwai@suse.de>
 This file included from seq.c 
 clientport numbers 
 port name 
 port capability bits 
 port type bits 
 channels per MIDI port 
 voices per MIDI port 
 voices per SYNTH port 
 RO: subscribers for output (from this port) 
 RO: subscribers for input (to this port) 
 reserved for kernel use (must be NULL) 
 misc. conditioning 
 queue # for timestamping 
 for future use 
 SPDX-License-Identifier: GPL-2.0-or-later
    ALSA sequencer Ports
    Copyright (c) 1998 by Frank van de Pol <fvdpol@coil.demon.nl>
                          Jaroslav Kysela <perex@perex.cz>
   registration of client ports
NOTE: the current implementation of the port structure as a linked list is
not optimal for clients that have many ports. For sending messages to all
subscribers of a port we first need to find the address of the port
structure, which means we have to traverse the list. A direct access table
(array) would be better, but big preallocated arrays waste memory.
Possible actions:
1) leave it this way, a client does normaly does not have more than a few
ports
2) replace the linked list of ports by a array of pointers which is
dynamicly kmalloced. When a port is added or deleted we can simply allocate
a new array, copy the corresponding pointers, and delete the old one. We
then only need a pointer to this array, and an integer that tells us how
much elements are in array.
 return pointer to port structure - port is locked if found 
 deleting now 
 not found 
 search for the next port - port is locked if found 
 initialize snd_seq_port_subs_info 
 create a port, port number is returned (-1 on failure);
  the caller needs to unref the port via snd_seq_port_unlock() appropriately
 sanity check 
 create a new port 
 failure, out of memory 
 init port data 
 auto-probe mode 
 insert the new port 
 store the port number in the port 
  remove all subscribers on the list
  this is called from port_delete, for each src and dest list.
			 looks like the connected port is being deleted.
			  we decrease the counter, and when both ports are deleted
			  remove the subscriber info
 ok we got the connected port 
 delete port data 
 set closing flag and wait for all port access are gone 
 clear subscribers info 
 delete a port with the given port id 
 ok found.  delete from the list at first 
 delete the all ports belonging to the given client 
	 move the port list to deleted_list, and
	  clear the port list in the client data.
 remove each port in deleted_list 
 set port info fields 
 set port name 
 set capabilities 
 get port type 
 information about supported channelsvoices 
 timestamping 
 get port info fields 
 get port name 
 get capabilities 
 get port type 
 information about supported channelsvoices 
 get subscriber counts 
 timestamping 
  call callback functions (if any):
  the callbacks are invoked only when the first (for connection) or
  the last subscription (for disconnection) is done.  Second or later
  subscription results in increment of counter, but no callback is
  invoked.
  This feature is useful if these callbacks are associated with
  initialization or termination of devices (see seq_midi.c).
 check if both addresses are identical 
 check the two subscribe info match 
 if flags is zero, checks only sender and destination addresses 
 check whether already exists 
 add to list 
 called with grp->list_mutex held 
 connect two ports 
 remove the connection 
	 always start from deleting the dest port for avoiding concurrent
	  deletions
 look for the connection 
 get matched subscriber 
  Attach a device driver that wants to receive events from the
  sequencer.  Returns the new port number on success.
  A driver that wants to receive the events converted to midi, will
  use snd_seq_midisynth_register_port().
 exported 
 Set up the port 
 Create it 
  Detach the driver from a port.
 exported 
 SPDX-License-Identifier: GPL-2.0-or-later
  OSS compatible sequencer driver
  Copyright (C) 1998,99 Takashi Iwai <tiwai@suse.de>
  prototypes
  convert an OSS event to ALSA event
  return 0 : enqueued
         non-zero : invalid - ignored
 put a midi byte 
 old type events: mode1 only 
 skip 
 8bytes extended event: mode1 only 
 convert -128:127 to 0:127 
 SEQ1 V2 control 
 -0x2000:0x1fff 
 conversion: 100semitone -> 128semitone 
 channel voice events: mode1 and 2 
 channel common events: mode1 and 2 
 conversion: 0:0x3fff -> -0x2000:0x1fff 
 timer events: mode1 and mode2 
 XXX: only for little-endian! 
 local events: mode1 and 2 
  process note-on event for OSS synth
  three different modes are available:
  - SNDRV_SEQ_OSS_PROCESS_EVENTS  (for one-voice per channel mode)
 	Accept note 255 as volume change.
  - SNDRV_SEQ_OSS_PASS_EVENTS
 	Pass all events to lowlevel driver anyway
  - SNDRV_SEQ_OSS_PROCESS_KEYPRESS  (mostly for Emu8000)
 	Use key-pressure if note >= 128
 pass directly 
 volume control 
if (! vel)
 set volume to zero -- note off 
	type = SNDRV_SEQ_EVENT_NOTEOFF;
else
 sample already started -- volume change 
 sample not started -- start now 
 invalid 
 note changed - note off at beginning 
 set current status 
 non-zero velocity - start the note now 
 pass the event anyway 
 key pressure: shifted by 128 
 normal note-on event 
  process note-off event for OSS synth
 pass directly 
 invalid 
 pass the event anyway 
  create a note event
  create a control event
  create an echo event
 echo back to itself 
  event input callback from ALSA sequencer:
  the echo event is processed here.
 ignored 
 sync echo back 
 echo back event 
 SPDX-License-Identifier: GPL-2.0-or-later
  OSS compatible sequencer driver
  MIDI device handlers
  Copyright (C) 1998,99 Takashi Iwai <tiwai@suse.de>
  constants
  definition of midi device record
 device number 
 sequencer client number 
 sequencer port number 
 port capability 
 flag for opening 
 MIDI event coder 
 assigned OSSseq device 
  midi device table
  prototypes
  look up the existing ports
  this looks a very exhausting job.
 ignore myself 
  look for the identical slot
 found! 
  register a new port if it doesn't exist yet
 the port must include generic midi 
 either read or write subscribable 
	
	  look for the identical slot
 already exists 
	
	  allocate midi info record
 copy the port information 
 copy and truncate the name of synth device 
 create MIDI coder 
 OSS sequencer adds running status to all sequences 
	
	  look for en empty slot
  release the midi device if it was registered
  release the midi device if it was registered
  set up midi tables
  clean up midi tables
  open all midi devices.  ignore errors.
  get the midi device information
  open the midi device if not opened yet
 already used? 
 already opened? 
 queue for timestamps 
  close the midi device if already opened
  change seq capability flags to file mode flags
  reset the midi device and close it:
  so far, only close the device.
 snd_seq_oss_midi_close(dp, dev);
  get clientport of the specified MIDI device
  input callback - this can be atomic
  convert ALSA sequencer event to OSS synth event
 not supported 
  decode event and send MIDI bytes to read queue
  dump midi data
  return 0 : enqueued
         non-zero : invalid - ignored
  create OSS compatible midi_info record
 FIXME: ?? 
 FIXME: ?? 
  proc interface
 CONFIG_SND_PROC_FS 
 SPDX-License-Identifier: GPL-2.0-or-later
  OSS compatible sequencer driver
  registration of device and proc
  Copyright (C) 1998,99 Takashi Iwai <tiwai@suse.de>
  module option
 Takashi says this is really only for sound-service-0-, but this is OK. 
  prototypes
  module interface
 success 
  ALSA minor device interface
  registration of sequencer minor device
  proc interface
 CONFIG_SND_PROC_FS 
 SPDX-License-Identifier: GPL-2.0-or-later
  OSS compatible sequencer driver
  openclose and reset interface
  Copyright (C) 1998-1999 Takashi Iwai <tiwai@suse.de>
  common variables
 ALSA sequencer client number 
  prototypes
 call snd_seq_oss_midi_lookup_ports() asynchronously 
  create sequencer client for OSS sequencer
 create ALSA client 
 create annoucement receiver port 
 receive only 
	 don't set port_callback.owner here. otherwise the module counter
	  is incremented and we can no longer release the module..
 look up midi devices 
  receive annoucement from system port, and check the midi device
 it must not happen 
 ignore myself 
 ignore myself 
  delete OSS sequencer client
  open sequencer device
 look up synth and midi devices 
 pr_err("ALSA: seq_oss: no device found\n"); 
 create port 
 allocate queue 
 set address 
dp->addr.queue = dp->queue;
dp->addr.channel = 0;
 set up file mode 
 initialize read queue 
 initialize write queue 
 initialize timer 
 set private data pointer 
 set up for mode2 
  translate file flags to private mode
  create sequencer port
 no subscription 
  delete ALSA port
  allocate a queue
  release queue
  free device informations - private_free callback of port
  close sequencer device
 clear slot 
  reset sequencer devices
 reset all synth devices 
 reset all midi devices 
 remove queues 
 reset timer 
  misc. functions for proc interface
  proc interface
 CONFIG_SND_PROC_FS 
 SPDX-License-Identifier: GPL-2.0-or-later
  OSS compatible sequencer driver
  seq_oss_readq.c - MIDI input queue
  Copyright (C) 1998,99 Takashi Iwai <tiwai@suse.de>
  constants
#define SNDRV_SEQ_OSS_MAX_TIMEOUT	(unsigned long)(-1)
  prototypes
  create a read queue
  delete the read queue
  reset the read queue
 if someone sleeping, wake'em up 
  put a midi byte
  put MIDI sysex bytes; the event buffer may be chained, thus it has
  to be expanded via snd_seq_dump_var_event().
  copy an event to input queue:
  return zero if enqueued
 wake up sleeper 
  pop queue
  caller must hold lock
  sleep until ready
  drain one record
  caller must hold lock
  pollingselect:
  return non-zero if readq is not empty.
  put a timestamp
  proc interface
 CONFIG_SND_PROC_FS 
 SPDX-License-Identifier: GPL-2.0-or-later
  OSS compatible sequencer driver
  OSS compatible io control
  Copyright (C) 1998,99 Takashi Iwai <tiwai@suse.de>
 SPDX-License-Identifier: GPL-2.0-or-later
  OSS compatible sequencer driver
  Timer control routines
  Copyright (C) 1998,99 Takashi Iwai <tiwai@suse.de>
  create and register a new timer.
  if queue is not started yet, start it.
  delete timer.
  if no more timer exists, stop the queue.
  process one timing event
  return 1 : event proceseed -- skip this event
         0 : not a timer event -- enqueue this event
 skip this event 
 time = from 1 to 3 bytes 
 set next event time 
  convert tempo units
  dispatch a timer event
  set queue tempo and start queue
  stop queue
  continue queue
  change queue tempo
  ioctls
 if arg == 0, just return the current rate 
 not supported 
 SPDX-License-Identifier: GPL-2.0-or-later
  OSS compatible sequencer driver
  synth device handlers
  Copyright (C) 1998,99 Takashi Iwai <tiwai@suse.de>
  constants
  definition of synth info records
 sysex buffer 
 synth info 
 for synth_info 
  device table
  prototypes
  global initialization
  registration of the synth device
 copy and truncate the name of synth device 
 registration 
  set up synth tables
  set up synth tables for MIDI emulation - devmusic mode only
  clean up synth tables
  return synth device information pointer
  reset note and velocity on each channel.
  reset synth device:
  call reset callback.  if no callback is defined, send a heartbeat
  event to the corresponding port.
 reset sysex 
 reopen the device 
  load a patch record:
  call load_patch callback function
  check if the device is valid synth device and return the synth info
  receive OSS 6 byte sysex packet:
  the full sysex message will be sent if it reaches to the end of data
  (0xff).
 copy 6 byte packet to the buffer 
 skip 
 copy the data to event record and send it 
 skip 
  fill the event sourcedestination addresses
  OSS compatible ioctl
  send OSS raw events - SEQ_PRIVATE and SEQ_VOLUME
  create OSS compatible synth_info record
  proc interface
 CONFIG_SND_PROC_FS 
 SPDX-License-Identifier: GPL-2.0-or-later
  OSS compatible sequencer driver
  seq_oss_writeq.c - write queue and sync
  Copyright (C) 1998,99 Takashi Iwai <tiwai@suse.de>
  create a write queue record
  delete the write queue
 to be sure 
  reset the write queue
 remove all 
 wake up sleepers if any 
  wait until the write buffer has enough room
 already finished 
 put echoback event 
 echo back to itself 
 interrupted - return 0 to finish sync 
  wake up sync - echo event was catched
  return the unused pool size
  set output threshold size from ioctl
 SPDX-License-Identifier: GPL-2.0-or-later
  OSS compatible sequencer driver
  readwriteselect interface to device file
  Copyright (C) 1998,99 Takashi Iwai <tiwai@suse.de>
  protoypes
  read interface
  write interface
 load patch 
 FIXME the return value isn't correct 
 extended code 
 copy the reset 4 bytes 
 old-type code 
 insert queue 
  insert event record to write queue
  return: 0 = OK, non-zero = NG
 if this is a timing event, process the current time 
 no need to insert queue 
 parse this event 
 set dummy -- to be sure 
 invalid event - no need to insert queue 
  select  poll
 input 
 output 
 SPDX-License-Identifier: GPL-2.0-only
  Apple Onboard Audio driver for Onyx codec
  Copyright 2006 Johannes Berg <johannes@sipsolutions.net>
  This is a driver for the pcm3052 codec chip (codenamed Onyx)
  that is present in newer Apple hardware (with digital output).
  The Onyx codec has the following connections (listed by the bit
  to be used in aoa_codec.connected):
   0: analog output
   1: digital output
   2: line input
   3: microphone input
  Note that even though I know of no machine that has for example
  the digital output connected but not the analog, I have handled
  all the different cases in the code so that this driver may serve
  as a good example of what to do.
  NOTE: This driver assumes that there's at most one chip to be
  	 used with one alsa card, in form of creating all kinds
 	 of mixer elements without regard for their existence.
 	 But snd-aoa assumes that there's at most one card, so
 	 this means you can only have one onyx on a system. This
 	 should probably be fixed by changing the assumption of
 	 having just a single card on a system, and making the
 	 'card' pointer accessible to anyone who needs it instead
 	 of hiding it in the aoa_snd_ functions...
 cache registers 65 to 80, they are write-only! 
	 mutex serializes concurrent access to the device
	  and this structure.
 both return 0 if all ok, else on error 
 alsa stuff 
 this is necessary because most alsa mixer programs
 like above, this is necessary because a lot
  of alsa mixer programs don't handle ranges
  that don't start at 0 properly.
	 If we name this 'Input Source', it properly shows up in
	  alsamixer as a selection,  but it's shown under the
	  'Playback' category.
	  If I name it 'Capture Source', it shows up in strange
	  ways (two bools of which one can be selected at a
	  time) but at least it's shown in the 'Capture'
	  category.
	  I was told that this was due to backward compatibility,
	  but I don't understand then why the mangling is not
	  done when I name it "Input Source".....
 even if alsamixer doesn't care.. 
 datasheet page 30, all others are 0 
 our registers 
 muted 
 but handled specially! 
 no deemphasis 
dB + 8) & 0xF, 
 pcm audio 
 category: pcm coder 
 sampling frequency 44.1 kHz, clock accuracy level II 
 24 bit depth 
 reset registers of chip, either to initial or to previous values 
	 this is first so we can skip it if no input is present...
	  No hardware exists with that, but it's here as an example
 analog input 
		 if analog and digital are currently off, anything should go,
 analog output 
 digital pcm output, also possible for analog out 
 Once alsa gets supports for this kind of thing we can add it... 
 digital compressed output 
 mute and lock analog output 
 these rates are ok for all outputs 
		 FIXME: program spdif channel control bits here so that
		 got some rate that the digital output can't do,
 this MUST be more elaborate later... 
 silence warning 
 Apple does a sleep here but the datasheet says to do it on resume 
 reset codec 
 take codec out of suspend (if it still is after reset) 
 FIXME: should divide by sample rate, but 8k is the lowest we go 
 reset all values 
 CONFIG_PM 
 nothing connected? what a joke! 
 if no inputs are present... 
 if no outputs are present... 
		 this is fine as there have to be inputs
		 give the user appropriate controls
		 depending on what output is connected,
 spdif control defaults to off 
 if only SPDIF is connected, enable it unconditionally 
	 we try to read from register ONYX_REG_CONTROL
 SPDX-License-Identifier: GPL-2.0-only
  Apple Onboard Audio driver for Toonie codec
  Copyright 2006 Johannes Berg <johannes@sipsolutions.net>
  This is a driver for the toonie codec chip. This chip is present
  on the Mac Mini and is nothing but a DAC.
	 This thing only has analog output,
	  the rates are taken from Info.plist
 can we turn it off somehow? 
 CONFIG_PM 
 nothing connected? what a joke! 
 SPDX-License-Identifier: GPL-2.0-only
  Apple Onboard Audio driver for tas codec
  Copyright 2006 Johannes Berg <johannes@sipsolutions.net>
  Open questions:
   - How to distinguish between 3004 and versions?
  FIXMEs:
   - This codec driver doesn't honour the 'connected'
     property of the aoa_codec struct, hence if
     it is used in machines where not everything is
     connected it will display wrong mixer elements.
   - Driver assumes that the microphone is always
     monaureal and connected to the right channel of
     the input. This should also be a codec-dependent
     flag, maybe the codec should have 3 different
     bits for the three different possibilities how
     it can be hooked up...
     But as long as I don't see any hardware hooked
     up that way...
   - As Apple notes in their code, the tas3004 seems
     to delay the right channel by one sample. You can
     see this when for example recording stereo in
     audacity, or recording the tas output via cable
     on another machine (use a sinus generator or so).
     I tried programming the BiQuads but couldn't
     make the delay work, maybe someone can read the
     datasheet and fix it. The relevant Apple comment
     is in AppleTAS3004Audio.cpp lines 1637 ff. Note
     that their comment describing how they program
     the filters sucks...
  Other things:
   - this should actually register two aoa_codec
     structs since it has two inputs. Then it must
     use the prepare callback to forbid running the
     secondary output on a different clock.
     Also, whatever bus knows how to do this must
     provide two soundbus_dev devices and the fabric
     must be able to link them correctly.
     I don't even know if Apple ever uses the second
     port on the tas3004 though, I don't think their
     i2s controllers can even do it. OTOH, they all
     derive the clocks from common clocks, so it
     might just be possible. The framework allows the
     codec to refine the transfer_info items in the
     usable callback, so we can simply remove the
     rates the second instance is not using when it
     actually is in use.
     Maybe we'll need to make the sound busses have
     a 'clock group id' value so the codec can
     determine if the two outputs can be driven at
     the same time. But that is likely overkill, up
     to the fabric to not link them up incorrectly,
     and up to the hardware designer to not wire
     them up in some weird unusable way.
	 protects hardware access against concurrency from
	  userspace when hitting controls and during
 3:1 above threshold 
 disabled 
 1:1 below threshold 
	 analysing the volume and mixer tables shows
	  that they are similar enough when we shift
	  the mixer table down by 4 bits. The error
	  is miniscule, in just one item the error
	  is 1, at a value of 0x07f17b (mixer table
 alsa stuff 
	
	  Despite what the data sheet says in one place, the
	  TAS_ACR_B_MONAUREAL bit forces mono output even when
	  input A (line in) is selected.
	 If we name this 'Input Source', it properly shows up in
	  alsamixer as a selection,  but it's shown under the
	  'Playback' category.
	  If I name it 'Capture Source', it shows up in strange
	  ways (two bools of which one can be selected at a
	  time) but at least it's shown in the 'Capture'
	  category.
	  I was told that this was due to backward compatibility,
	  but I don't understand then why the mangling is not
	  done when I name it "Input Source".....
 input 
 output 
 Set treble & bass to 0dB 
 Clocks are going away, mute mute mute 
 Clocks are back, re-init the codec 
 doesn't happen as of now 
 we are controlled via i2c and assume that is always up
  If that wasn't the case, we'd have to suspend once
 reset codec 
 CONFIG_PM 
 CONFIG_PM 
	 in theory, we can drive it at 512 too...
	  but so far the framework doesn't allow
 same here, could be 32 for just one 16 bit format 
 seems that half is a saner default 
 power down codec chip 
 SPDX-License-Identifier: GPL-2.0-only
  Apple Onboard Audio pmf GPIOs
  Copyright 2006 Johannes Berg <johannes@sipsolutions.net>
	 make sure no work is pending before freeing
 SPDX-License-Identifier: GPL-2.0-only
  Apple Onboard Audio feature call GPIO control
  Copyright 2006 Johannes Berg <johannes@sipsolutions.net>
  This file contains the GPIO control routines for
  direct (through feature calls) access to the GPIO
  registers.
 TODO: these are lots of global variables
  that aren't used on most machines...
  Move them into a dynamically allocated
  structure and use that.
 these are the GPIO numbers (register addresses as offsets into
 see the SWITCH_GPIO macro 
 node pointers that we save when getting the GPIO number
 check if we can get it the easy way ... 
		 some machines have only gpioXextint-gpioX nodes,
		  and an audio-gpio property saying what it is ...
		  So what we have to do is enumerate all children
 still not found, assume not there 
	 this is a hack, usually the GPIOs 'reg' property
	  should have the offset based from the GPIO space
		 Apple seems to default to 1, but
		  that doesn't seem right at least on most
		  machines. So until proven that the opposite
		  is necessary, we default to 0
 0x4 is outenable, 0x1 is out, thus 4 or 5 
 muted = !on... 					\
 enable dual edge 
	 go Apple, and thanks for giving these different names
 SPDX-License-Identifier: GPL-2.0-only
  Apple Onboard Audio driver core
  Copyright 2006 Johannes Berg <johannes@sipsolutions.net>
 We allow only one fabric. This simplifies things,
 found_codec has to be assigned 
	 if there's a fabric already, we can tell if we
	  will want to have this codec, so propagate error
	 allow querying for presence of fabric
 SPDX-License-Identifier: GPL-2.0-only
  Apple Onboard Audio Alsa helpers
  Copyright 2006 Johannes Berg <johannes@sipsolutions.net>
 cannot be EEXIST due to usage in aoa_fabric_register 
 SPDX-License-Identifier: GPL-2.0-only
  Apple Onboard Audio driver -- layoutmachine id fabric
  Copyright 2006-2008 Johannes Berg <johannes@sipsolutions.net>
  This fabric module looks for sound codecs based on the
  layout-id or device-id property in the device tree.
 These are the connections the layout fabric
  knows about. It doesn't really care about the
  input ones, but I thought I'd separate them
  to give them proper names. The thing is that
  Apple usually will distinguish the active output
  by GPIOs, while the active input is set directly
  on the codec. Hence we here tell the codec what
  we think is connected. This information is hard-
 pretty bogus but users complain...
  This is a flag saying that the LINEOUT
  should be renamed to HEADPHONE.
 CC_ flags from above 
	 codec dependent bit to be set in the aoa_codec.connected field.
	  This intentionally doesn't have any generic flags because the
	  fabric has to know the codec anyway and all codecs might have
	 if busname is not assigned, we use 'Master' below,
	  so that our layout table doesn't need to be filled
	  too much.
	  We only assign these two if we expect to find more
	  than one soundbus, i.e. on those machines with
 onyx with all but microphone connected 
 terminate array by .connected == 0 
 onyx on machines without headphone 
	 FIXME: are these correct? probably not for all the machines
 terminate array by .connected == 0 
 onyx on machines with real line-out 
 terminate array by .connected == 0 
 tas on machines without line out 
 terminate array by .connected == 0 
 tas on machines with neither line out nor line in 
 terminate array by .connected == 0 
 tas on machines without microphone 
 terminate array by .connected == 0 
 tas on machines with everything connected 
 terminate array by .connected == 0 
 terminate array by .connected == 0 
 terminate array by .connected == 0 
 terminate array by .connected == 0 
 terminate array by .connected == 0 
 last PowerBooks (15" Oct 2005) 
 PowerMac9,1 
 PowerMac9,1 
 PowerBook5,7 
 PowerBook5,7 
 PowerBook5,9 [17" Oct 2005] 
 PowerMac8,1 
 Quad PowerMac (analog in, analogdigital out) 
 Quad PowerMac (digital in) 
 Early 2005 PowerBook (PowerBook 5,6) 
 PowerBook 5,4 
 PowerBook6,1 
 PowerBook6,5 
 PowerBook6,7 
 PowerBook6,8 
 PowerMac8,2 
 PowerBook6,7 
 PowerMac10,1 (Mac Mini) 
 unknown, untested, but this comes from Apple 
 but it has an external mic?? how to select? 
 PowerMac3,4 
 PowerMac3,6 
 PowerBook5,2 
 now we wait for the codecs to call us back 
 we need these for headphonelineout detection 
 this can go away but only if we allow multiple cards,
 if the codec has a 'codec' node, we require a reference 
	 here remove the codec from the layout dev's
 need to add this codec to our codec array! 
 now update initial state 
 hm, currently we can only have one ... 
 by breaking out we keep a reference 
 anything with device_id, not layout_id 
 that unknown machine no one seems to have 
 PowerBook5,4 
 Mac Mini 
	 assign these before registering ourselves, so
	  callbacks that are done during registration
 we won't be using these then... 
 reset if we didn't use it 
 SPDX-License-Identifier: GPL-2.0
 FIX UP 
 SPDX-License-Identifier: GPL-2.0-only
  soundbus
  Copyright 2006 Johannes Berg <johannes@sipsolutions.net>
 stuff we want to pass to sbinhotplug 
	 Since the compatible field can contain pretty much anything
	  it's not really legal to split it out with commas. We split it
 soundbus_dev_attrs is declared in sysfs.c 
 sanity checks 
 initialize common driver fields 
 register with core 
 SPDX-License-Identifier: GPL-2.0-only
  i2sbus driver -- pcm routines
  Copyright 2006 Johannes Berg <johannes@sipsolutions.net>
 sclk must be derived from mclk! 
 derive sclk register value 
 alsa messed up 
 we now need to assign the hw 
 bus dependent stuff 
	 well. the codec might want 24 bits only, and we'll
	  ever only transfer 24 bits, but they are top-aligned!
	  So for alsa, we claim that we're doing full 32 bit
	  while in reality we'll ignore the lower 8 bits of
	  that when doing playback (they're transferred as 0
	  as far as I know, no codecs we have are 32-bit capable
	  so I can't really test) and when doing recording we'll
	 now mask off what we can support. I suppose we could
	  also support S24_3LE and some similar formats, but I
	  doubt there's a codec that would be able to use that,
	 we need to set the highest and lowest rate possible.
	  These are the highest and lowest rates alsa can
	  support properly in its bitfield.
	  Below, we'll use that to restrict to the rate
	 if the other stream is active, then we can only
	  support what it is currently using.
	  FIXME: I lied. This comment is wrong. We can support
	  anything that works with the same serial format, ie.
	  when recording 24 bit sound we can well play 16 bit
	  sound at the same time iff using the same transfer mode.
 FIXME: is this guaranteed by the alsa api? 
 see above, restrict rates to the one we already have 
 these are somewhat arbitrary 
 unwind 
 timeout expired, stop dbdma forcefully 
 make sure RUN, PAUSE and S0 bits are cleared 
	 whee. Hard work now. The user has selected a bitrate
	  and bit format, so now we have to program our
 serial format register 
 data word sizes reg 
 generate dbdma command ring first 
 commands to DMA tofrom the ring 
	
	  For input, we need to do a graceful stop; if we abort
	  the DMA, we end up with leftover bytes that corrupt
	  the next recording.  To do this we set the S0 status
	  bit and wait for the DMA controller to stop.  Each
	  command has a branch condition to
	  make it branch to a stop command if S0 is set.
	  On input we also need to wait for the S7 bit to be
	  set before turning off the DMA controller.
	  In fact we do the graceful stop for output as well.
 branch back to beginning of ring 
 set stop command 
 ok, let's set the serial format and stuff 
 16 bit formats 
		 FIXME: if we add different bus factors we need to
		 force 64x bus speed, otherwise the data cannot be
 we assume all sysclocks are the same! 
 FIXME: THIS ASSUMES MASTER ALL THE TIME 
 codecs are fine with it, so set our clocks 
 early exit if already programmed correctly 
 not locking these is fine since we touch them only in this function 
	 let's notify the codecs about clocks going away.
 wait for clock stopped. This can apparently take a while... 
 not locking these is fine since we touch them only in this function 
 Clear the S0 bit, then see if we stopped yet 
 possible race here? 
 keep running 
 make sure RUN, PAUSE and S0 bits are cleared 
 set branch condition select register 
 write dma command buffer address to the dbdma chip 
 initialize the frame count and current period 
 set the DMA controller running 
 off you go! 
 Set the S0 bit to make the DMA branch to the stop cmd 
			
			  BT is the branch taken bit.  If it took a branch
			  it is because we set the S0 bit to make it
			  branch to the stop command.
		
		  Check the frame count.  The DMA tends to get a bit
		  ahead of the frame counter, which confuses the core.
 Turn off DMA controller, clear S0 bit 
 may call _trigger again, hence needs to be unlocked 
	 we currently code the i2s transfer on the clock, and support only
	 If you want to fix this, you need to keep track of what transport infos
	  are to be used, which codecs they belong to, and then fix all the
 use the private data to point to the codec info 
	 ALSA yet again sucks.
 eh? 
	 so we have to register the pcm after adding any substream
	  to it because alsa doesn't create the devices for the
	  substreams when we add them later.
	  Therefore, force in and out on both busses (above) and
	  register the pcm now instead of just after creating it.
 no errors any more, so let's add this to our list 
 well, we really should support scattergather DMA 
 no more codecs, but still a pcm? 
 the actual cleanup is done by the callback above! 
 SPDX-License-Identifier: GPL-2.0-only
  i2sbus driver
  Copyright 2006-2008 Johannes Berg <johannes@sipsolutions.net>
 one more for rounding, one for branch back, one for stop command 
	 We use the PCI APIs for now until the generic one gets fixed
	  enough or until we get some macio-specific versions
 acknowledge interrupt reasons 
  XXX FIXME: We test the layout_id's here to get the proper way of
  mapping in various registers, thanks to bugs in Apple device-trees.
  We could instead key off the machine model and the name of the i2s
  node (i2s-a). This we'll do when we move it all to macio_asic.c
  and have that export items for each sub-node too.
	 Machines with layout 76 and 36 (K2 based) have a weird device
	  tree what we need to special case.
	  Normal machines just fetch the resource from the i2s-X node.
	  Darwin further divides normal machines into old and new layouts
	  with a subtely different code path but that doesn't seem necessary
	  in practice, they just bloated it. In addition, even on our K2
	  case the i2s-modem node, if we ever want to handle it, uses the
	  normal layout
 FIXME: look at device node refcounting 
			
			  We probably cannot handle all device-id machines,
			  so restrict to those we do handle for now.
	 for the time being, until we can handle non-layout-id
	  things in some fabric, refuse to attach if there is no
	  layout-id property or we haven't been forced to attach.
	  When there are two i2s busses and only one has a layout-id,
	  then this depends on the order, but that isn't important
	 Resource handling is problematic as some device-trees contain
	  useless crap (ugh ugh ugh). We work around that here by calling
	  specific functions for calculating the appropriate resources.
	 
	  This will all be moved to macio_asic.c at one point
		 If only we could use our resource dev->resources[i]...
		  but request_resource doesn't know about parents and
		  contained resources...
 enable this cell 
 found none, clean up 
 Notify codecs 
 wait until streams are stopped 
 reset i2s bus format etc. 
 Notify codecs so they can re-initialize 
 CONFIG_PM 
 SPDX-License-Identifier: GPL-2.0-only
  i2sbus driver -- bus control routines
  Copyright 2006 Johannes Berg <johannes@sipsolutions.net>
 this is serialised externally 
	 if the bus number is not 0 or 1 we absolutely need to use
	  the platform functions -- there's nothing in Darwin that
	  would allow seeing a system behind what the FCRs are then,
	  and I don't want to go parsing a bunch of platform functions
 this is serialised externally 
		 these need to be locked or done through
 SPDX-License-Identifier: GPL-2.0 OR MIT
  Xen para-virtual sound device
  Copyright (C) 2016-2018 EPAM Systems Inc.
  Author: Oleksandr Andrushchenko <oleksandr_andrushchenko@epam.com>
 This is the shared buffer with its backing storage. 
 Number of processed frames as reported by the backend. 
 Current HW pointer to be reported via .period callback. 
 Modulo of the number of processed frames - for period detection. 
 Collect all the values we need for the query. 
 Check if this is due to backend communication error. 
 Refine HW parameters after the query. 
	
	  Return our HW properties: override defaults with those configured
	  via XenStore.
	
	  This callback may be called multiple times,
	  so free the previously allocated shared buffer if any.
  FIXME: The mmaped data transfer is asynchronous and there is no
  ack signal from user-space when it is done. This is the
  reason it is not implemented in the PV driver as we do need
  to know when the buffer can be transferred to the backend.
 we want to handle all PCM operations in non-atomic context 
 Card_info will be freed when destroying front_info->xb_dev->dev. 
 SPDX-License-Identifier: GPL-2.0 OR MIT
  Xen para-virtual sound device
  Copyright (C) 2016-2018 EPAM Systems Inc.
  Author: Oleksandr Andrushchenko <oleksandr_andrushchenko@epam.com>
 Maximum number of supported streams. 
 Inherit parent's PCM HW and read overrides from XenStore. 
 Update configuration to match new values. 
 Get next stream index. 
	
	  Check XenStore if PCM HW configuration exists for this stream
	  and update if so, e.g. we inherit all values from device's PCM HW,
	  but can still override some of the values for the stream.
	
	  Check XenStore if PCM HW configuration exists for this device
	  and update if so, e.g. we inherit all values from card's PCM HW,
	  but can still override some of the values for the device.
 Find out how many streams were configured in Xen store. 
 Get number of playback and capture streams. 
 Start from default PCM HW configuration for the card. 
 SPDX-License-Identifier: GPL-2.0 OR MIT
  Xen para-virtual sound device
  Copyright (C) 2016-2018 EPAM Systems Inc.
  Author: Oleksandr Andrushchenko <oleksandr_andrushchenko@epam.com>
 Ensure we see queued responses up to rp. 
	
	  Assume that the backend is trusted to always write sane values
	  to the ring counters, so no overflow checks on frontend side
	  are required.
 Ensure we see ring contents up to prod. 
	
	  Assume that the backend is trusted to always write sane values
	  to the ring counters, so no overflow checks on frontend side
	  are required.
 Ensure ring contents. 
 Release all who still waits for response if any. 
 End access and free the page. 
 Iterate over devices and their streams and create event channels. 
 Write control channel ring reference. 
 Write event channel ring reference. 
 SPDX-License-Identifier: GPL-2.0 OR MIT
  Xen para-virtual sound device
  Copyright (C) 2016-2018 EPAM Systems Inc.
  Author: Oleksandr Andrushchenko <oleksandr_andrushchenko@epam.com>
 create event channels for all streams and publish 
 Recovering after backend unexpected closure. 
 Recovering after backend unexpected closure. 
		
		  In this state backend starts freeing resources,
		  so let it go into closed state first, so we can also
		  remove ours.
	
	  On driver removal it is disconnected from XenBus,
	  so no backend state change events come via .otherend_changed
	  callback. This prevents us from exiting gracefully, e.g.
	  signaling the backend to free event channels, waiting for its
	  state to change to XenbusStateClosed and cleaning at our end.
	  Normally when front driver removed backend will finally go into
	  XenbusStateInitWait state.
	 
	  Workaround: read backend's state manually and wait with time-out.
 At the moment we only support case with XEN_PAGE_SIZE == PAGE_SIZE 
 SPDX-License-Identifier: GPL-2.0-or-later
   Routines for control of the CS8427 via i2c bus
   IEC958 (SPDIF) receiver & transmitter by Cirrus Logic
   Copyright (c) by Jaroslav Kysela <perex@perex.cz>
 fixed address 
 hardware status 
 default status 
 PCM private status 
 map of first 1 + 13 registers 
	   CS8427_REG_CONTROL1: RMCK to OMCK, valid PCM audio, disable mutes,
	   CS8427_REG_CONTROL2: hold last valid audio sample, RMCK=256Fs,
	   CS8427_REG_DATAFLOW: output drivers normal operation, Tx<=serial,
	   CS8427_REG_CLOCKSOURCE: Run off, CMCK=256Fs,
	     output time base = OMCK, input time base = recovered input clock,
	     recovered input clock source is ILRCK changed to AES3INPUT
	   CS8427_REG_SERIALINPUT: Serial audio input port data format = I2S,
	   CS8427_REG_SERIALOUTPUT: Serial audio output port data format
	   CS8427_REG_RECVERRMASK: unmask the input PLL clock, V, confidence,
 CS8427_UNLOCK | CS8427_V | CS8427_CONF | CS8427_BIP | CS8427_PAR,
 set everything 
	   CS8427_REG_CSDATABUF:
	     Registers 32-55 window to CS buffer
	     Inhibit D->E transfers from overwriting first 5 bytes of CS data.
	     Inhibit D->E transfers (all) of CS data.
	     Allow E->F transfer of CS data.
	     One byte mode; both AB channels get same written CB data.
	   CS8427_REG_UDATABUF:
	     Use internal buffer to transmit User (U) data.
	     Chip's U pin is an output.
	     Transmit all O's for user data.
	     Inhibit D->E transfers.
 give second chance 
 turn off run bit while making changes to configuration 
 send initial values 
 Turn off CS8427 interrupt stuff that is not used in hardware 
 from address 9 to 15 
 register 
 send transfer initialization sequence 
 write default channel status bytes 
 turn on run bit and rock'n'roll 
 it's nice for read tests
  Reset the chip using run bit, also lock PLL using ILRCK and
  put back AES3INPUT. This workaround is described in latest
  CS8427 datasheet, otherwise TXDSERIAL will not work.
 AES3 bit is set 
 SPDX-License-Identifier: GPL-2.0-or-later
   Routines for control of the TEA6330T circuit via i2c bus
   Sound fader control circuit for car radios by Philips Semiconductors
   Copyright (c) by Jaroslav Kysela <perex@perex.cz>
 fixed address 
 volume left 
 volume right 
 bass control 
 treble control 
 fader control 
 mute control for selected channels 
 select fader channels - front or rear 
 audio switch 
 mute control, general mute 
 equalizer switchover (0=equalizer-on) 
 turn fader off and handle equalizer 
 initialize mixer 
 compose I2C message and put the hardware to initial state 
 SPDX-License-Identifier: GPL-2.0-or-later
    Generic i2c interface for ALSA
    (c) 1998 Gerd Knorr <kraxel@cs.tu-berlin.de>
    Modified for the ALSA driver by Jaroslav Kysela <perex@perex.cz>
   bit-operations
 SCL - wr, SDA - wr 
 SCL - wr, SDA - rd 
 SCL - wr, SDA - wr 
 SCL - wr, SDA - rd 
 SCL - wr, SDA - wr 
 not yet implemented 
 not yet implemented 
 10-bit address 
 not yet implemented 
 invalid address 
 SPDX-License-Identifier: GPL-2.0-or-later
   Routines for control of the AK4114 via I2C and 4-wire serial interface
   IEC958 (SPDIF) receiver by Asahi Kasei
   Copyright (c) by Jaroslav Kysela <perex@perex.cz>
 fixed address 
 don't schedule new work 
 bring the chip to reset state and powerdown state 
 release reset, but leave powerdown 
 release powerdown, everything is initialized now 
 bring up statistics  event queing 
 Don't forget to change AK4114_CONTROLS define!!! 
 all ak4114 registers 0x00 - 0x1f 
 trigger workq 
 notify kcontrols if any parameters are changed 
 rate change 
 compare rate 
 printk(KERN_DEBUG "rate changed (%i <- %i)\n", runtime->rate, res);
 don't schedule new work 
 SPDX-License-Identifier: GPL-2.0-or-later
   Routines for control of the AK4117 via 4-wire serial interface
   IEC958 (SPDIF) receiver by Asahi Kasei
   Copyright (c) by Jaroslav Kysela <perex@perex.cz>
 fixed address 
 bring the chip to reset state and powerdown state 
 release reset, but leave powerdown 
 release powerdown, everything is initialized now 
 Don't forget to change AK4117_CONTROLS define!!! 
 printk(KERN_DEBUG "AK IRQ: rcs0 = 0x%x, rcs1 = 0x%x, rcs2 = 0x%x\n", rcs0, rcs1, rcs2);
 rate change 
 compare rate 
 printk(KERN_DEBUG "rate changed (%i <- %i)\n", runtime->rate, res);
 SPDX-License-Identifier: GPL-2.0-or-later
    ALSA driver for AK4524  AK4528  AK4529  AK4355  AK4358  AK4381
    AD and DA converters
 	Copyright (c) 2000-2004 Jaroslav Kysela <perex@perex.cz>,
 				Takashi Iwai <tiwai@suse.de>
 write the given register and save the data to the cache 
 save the data 
 reset procedure for AK4524 and AK4528 
 DAC volumes 
 reset procedure for AK4355 and AK4358 
 reset and soft-mute 
 un-reset, unmute 
 reset procedure for AK4381 
  reset the AKM codecs
  @state: 1 = reset codec, 0 = restore the registers
  assert the reset operation and restores the register values to the chips.
 FIXME: needed for ak4529? 
  Volume conversion table for non-linear volumes
  from -63.5dB (mute) to 0dB step 0.5dB
  Used for AK4524AK4620 inputouput attenuation, AK4528, and
  AK5365 input attenuation
  dB tables
  initialize all the ak4xxx chips
 0: all power up 
 1: ADCDAC reset 
 2: 24bit I2S 
 3: deemphasis off 
 1: ADCDAC enable 
 4: ADC left muted 
 5: ADC right muted 
 6: DAC left muted 
 7: DAC right muted 
 0: all power up 
 1: ADCDAC reset 
 2: 24bit I2S 
 3: deemphasis off, turn LR highpass filters on 
 1: ADCDAC enable 
 4: ADC left muted 
 5: ADC right muted 
 9: ATS=0, RSTN=1 
 A: all power up, no zerooverflow detection 
 0: TDM=0, 24bit I2S, SMUTE=0 
 1: ACKS=0, ADC, loop off 
 2: LOUT1 muted 
 3: ROUT1 muted 
 4: LOUT2 muted 
 5: ROUT2 muted 
 6: LOUT3 muted 
 7: ROUT3 muted 
 B: LOUT4 muted 
 C: ROUT4 muted 
 8: deemphasis all off 
 1: reset and soft-mute 
		0x00, 0x06,  0: mode3(i2s), disable auto-clock detect,
 2: DA's power up, normal speed, RSTN#=0 
 0x02, 0x2e,  quad speed 
 3: de-emphasis off 
 4: LOUT1 volume muted 
 5: ROUT1 volume muted 
 6: LOUT2 volume muted 
 7: ROUT2 volume muted 
 8: LOUT3 volume muted 
 9: ROUT3 volume muted 
 a: DATT speed=0, ignore DZF 
 1: un-reset, unmute 
 1: reset and soft-mute 
		0x00, 0x06,  0: mode3(i2s), disable auto-clock detect,
 2: DA's power up, normal speed, RSTN#=0 
 0x02, 0x6e, 
 3: de-emphasis off 
 4: LOUT1 volume muted 
 5: ROUT1 volume muted 
 6: LOUT2 volume muted 
 7: ROUT2 volume muted 
 8: LOUT3 volume muted 
 9: ROUT3 volume muted 
 b: LOUT4 volume muted 
 c: ROUT4 volume muted 
 a: DATT speed=0, ignore DZF 
 1: un-reset, unmute 
 0: mode3(i2s), disable auto-clock detect 
		0x01, 0x02,  1: de-emphasis off, normal speed,
 0x01, 0x12,  quad speed 
 2: DZF disabled 
 3: LATT 0 
 4: RATT 0 
 0: power-up, un-reset 
 0: normal 
 0: reset 
 1: RSTAD 
 1: RSTDA 
 1: normal 
 2: 24bit I2S 
 3: deemphasis off 
 4: LIN muted 
 5: RIN muted 
 6: LOUT muted 
 7: ROUT muted 
 FIXME: any init sequence? 
  Mixer callbacks
 including IPGA 
 need dB conversion 
 need MSB update bit 
 data is inverted 
 need to correct + 1 since both 127 and 128 are 0dB 
	 printk(KERN_DEBUG "DEBUG - AK writing reg: chip %x addr %x,
 we observe the (1<<shift) bit only 
  build AK4xxx controls
 mute control for Revolution 7.1 - AK4381 
			 register 1, bit 0 (SMUTE): 0 = normal operation,
 register 6 & 7 
 register 4 & 5 
 registers 2-7 and b,c 
 register 4-9, chip #0 only 
 register 4-9 and 11-12, chip #0 only 
 register 3 & 4 
 register 6 & 7 
 no controls 
 register 4 & 5 
			 register 2, bit 0 (SMUTE): 0 = normal operation,
			 input selector control: reg. 1, bits 0-2.
 register 3 
 register 8 with shift 
 SPDX-License-Identifier: GPL-2.0-or-later
   Routines for control of the AK4113 via I2C4-wire serial interface
   IEC958 (SPDIF) receiver by Asahi Kasei
   Copyright (c) by Jaroslav Kysela <perex@perex.cz>
   Copyright (c) by Pavel Hofman <pavel.hofman@ivitera.com>
 fixed address 
 don't schedule new work 
 bring the chip to reset state and powerdown state 
 release reset, but leave powerdown 
 release powerdown, everything is initialized now 
 bring up statistics  event queing 
 Don't forget to change AK4113_CONTROLS define!!! 
 all ak4113 registers 0x00 - 0x1c 
 trigger workq 
 rate change 
 compare rate 
			printk(KERN_DEBUG "rate changed (%i <- %i)\n",
 don't schedule new work 
 SPDX-License-Identifier: GPL-2.0-or-later
    ALSA Driver for the PT2258 volume controller.
 	Copyright (c) 2006  Jochen Voss <voss@seehuhn.de>
 channel 1: -10dB, -1dB 
 channel 2: -10dB, -1dB 
 channel 3: -10dB, -1dB 
 channel 4: -10dB, -1dB 
 channel 5: -10dB, -1dB 
 channel 6: -10dB, -1dB 
 reset chip 
 mute all channels 
 set all channels to 0dB 
 chip does not support register reads 
 SPDX-License-Identifier: GPL-2.0-only
   Driver for A2 audio system used in SGI machines
   Copyright (c) 2008 Thomas Bogendoerfer <tsbogend@alpha.fanken.de>
   Based on OSS code from Ladislav Michl <ladis@linux-mips.org>, which
   was based on code from Ulf Carlsson
 Index 0-MAX 
 ID for this card 
 Current state of pbus->pbdma_ctrl 
 padding 
 monostereo 
 Master frequency 
 MOD value 
 INC value 
 HAL2 ctl registers 
 HAL2 aes registers 
 HAL2 vol registers 
 HAL2 syn registers 
 mute DAC 
 mute ADC 
 decide what caused this interrupt 
	 Now we set up some PBUS information. The PBUS needs information about
	  what portion of the fifo it will use. If it's receiving or
	  transmitting, and finally whether the stream is little endian or big
	  endian. The information is written later, on the start call.
	 Fifo should be set to hold exactly four samples. Highwater mark
 halfwords 
 playback is first 
 doublewords 
 We disable everything before we do anything at all 
 Setup the HAL2 for playback 
 Set endianess 
 Set DMA bus 
 We are using 1st Bresenham clock generator for playback 
 halfwords 
 record is second 
 doublewords 
 Setup the HAL2 for record 
 Set endianess 
 Set DMA bus 
 We are using 2nd Bresenham clock generator for record 
 enable DAC 
 enable ADC 
 The HAL2 itself may remain enabled safely 
 create first pcm device with one outputs and one input 
 set operators 
 reset HAL2 
 release reset 
	
	  All DMA channel interfaces in HAL2 are designed to operate with
	  PBUS programmed for 2 cycles in D3, 2 cycles in D4 and 2 cycles
	  in D5. HAL2 is a 16-bit device which can accept both big and little
	  endian format. It assumes that even address bytes are on high
	  portion of PBUS (15:8) and assumes that HPC3 is programmed to
	  accept a live (unsynchronized) version of P_DREQ_N from HAL2.
	
	  Ignore what's mentioned in the specification and write value which
	  works in The Real World (TM)
 SPDX-License-Identifier: GPL-2.0-or-later
    Sound driver for Silicon Graphics O2 Workstations AV board audio.
    Copyright 2003 Vivien Chappelier <vivien.chappelier@linux-mips.org>
    Copyright 2008 Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    Mxier part taken from mace_audio.c:
    Copyright 2007 Thorben Jändling <tj.trevelyan@gmail.com>
 Index 0-MAX 
 ID for this card 
 1: reset audio interface 
 1: codec detected 
 1: reset channel 
 1: enable DMA transfer 
 interrupt disabled 
 int on buffer >25% full 
 int on buffer >50% full 
 int on buffer >75% full 
 int on buffer empty 
 int on buffer !empty 
 int on buffer empty 
 int on buffer !empty 
 definition of the chip-specific record 
 codec 
 channels 
 resources 
 AD1843 access 
  read_ad1843_reg returns the current contents of a 16 bit AD1843 register.
  Returns unsigned register value on success, -errno on failure.
 flush bus 
  write_ad1843_reg writes the specified value to a 16 bit AD1843 register.
 flush bus 
 dac1pcm0 mixer control 
 dac2pcm1 mixer control 
 record level mixer control 
 record level source control 
 line mixer control 
 cd mixer control 
 mic mixer control 
 low-level audio interface DMA 
 get data out of bounce buffer, count must be a multiple of 32 
 returns 1 if a period has elapsed 
 check if a period has elapsed 
 in frames 
 in bytes 
 put some DMA data in bounce buffer, count must be a multiple of 32 
 returns 1 if a period has elapsed 
 check if a period has elapsed 
 in frames 
 sign extend 
 sign extend 
 in bytes 
 reset DMA channel 
 push a full buffer 
 set DMA to wake on 50% empty and enable interrupt 
 empty the ring 
 fill the ring 
 PCM part 
 PCM hardware definition 
 PCM playback open callback 
 PCM capture open callback 
 PCM close callback 
 prepare callback 
 Setup the pseudo-dma transfer pointers.  
 set AD1843 format 
 hardware format is always S16_LE 
 trigger callback 
 start the PCM engine 
 stop the PCM engine 
 pointer callback 
 get the current hardware pointer 
 operators 
   definitions of capture are omitted here...
 create a pcm device 
 create first pcm device with one outputs and one input 
 set operators 
 create second  pcm device with one outputs and no input 
 set operators 
 ALSA driver 
 reset interface 
 release IRQ's 
 release card data 
 check if a codec is attached to the interface 
 (Audio or AudioVideo board present) 
 initialize channels 
 allocate IRQs 
 reset the interface 
 give time to recover 
 set ring base 
 attach the AD1843 codec 
 initialize the AD1843 codec 
 SPDX-License-Identifier: GPL-2.0
    Sound driver for Nintendo 64.
    Copyright 2021 Lauri Kasanen
	
	  The hw registers are double-buffered, and the IRQ fires essentially
	  one period behind. The core only allows one period's distance, so we
	  keep a private DMA buffer to afford two.
 Check it's ours
 3 periods lets the double-buffering hw read one buffer behind safely
	
	  The DMA unit has errata on (start + len) & 0x3fff == 0x2000.
	  This constraint makes sure that the period size is not a power of two,
	  which combined with dma_alloc_coherent aligning the buffer to the largest
	  PoT <= size guarantees it won't be hit.
 Setup the pseudo-dma transfer pointers.  
  The target device is embedded and RAM-constrained. We save RAM
  by initializing in __init code that gets dropped late in boot.
  For the same reason there is no module or unloading support.
 SPDX-License-Identifier: GPL-2.0-or-later
    AD1843 low level driver
    Copyright 2003 Vivien Chappelier <vivien.chappelier@linux-mips.org>
    Copyright 2008 Thomas Bogendoerfer <tsbogend@alpha.franken.de>
    inspired from vwsnd.c (SGI VW audio driver)
      Copyright 1999 Silicon Graphics, Inc.  All rights reserved.
  AD1843 bitfield definitions.  All are named as in the AD1843 data
  sheet, with ad1843_ prepended and individual bit numbers removed.
  E.g., bits LSS0 through LSS2 become ad1843_LSS.
  Only the bitfields we need are defined.
 Converter Power-Down Flag 
 Clock Initialization Flag 
 Right ADC Input Gain 
 Right ADC Mic Gain Enable 
 Right ADC Source Select 
 Left ADC Input Gain 
 Left ADC Mic Gain Enable 
 Left ADC Source Select 
 Right DAC 2 Mix GainAtten 
 Right DAC 2 Mix Mute 
 Left DAC 2 Mix GainAtten 
 Left DAC 2 Mix Mute 
 Right Aux 1 Mix GainAtten 
 Right Aux 1 Mix Mute 
 Left Aux 1 Mix GainAtten 
 Left Aux 1 Mix Mute 
 Right Aux 2 Mix GainAtten 
 Right Aux 2 Mix Mute 
 Left Aux 2 Mix GainAtten 
 Left Aux 2 Mix Mute 
 Right Mic Mix GainAtten 
 Right Mic Mix Mute 
 Left Mic Mix GainAtten 
 Left Mic Mix Mute 
 Headphone Output Voltage Swing 
 Headphone Output Mute 
 Mono Output Mute 
 Right DAC1 AnalogDigital Gain 
 Right DAC1 Analog Mute 
 Left DAC1 AnalogDigital Gain 
 Left DAC1 Analog Mute 
 Right DAC2 AnalogDigital Gain 
 Right DAC2 Analog Mute 
 Left DAC2 AnalogDigital Gain 
 Left DAC2 Analog Mute 
 Right DAC1 Digital Mute 
 Left DAC1 Digital Mute 
 Right DAC2 Digital Mute 
 Left DAC2 Digital Mute 
 ADC Left Sample Rate Source 
 ADC Right Sample Rate Source 
 DAC1 Sample Rate Source 
 DAC2 Sample Rate Source 
 Clock 1 Sample Rate Select 
 Clock 2 Sample Rate Select 
 Clock 3 Sample Rate Select 
 Digital ADC Left Source Select 
 Digital ADC Right Source Select 
 DAC Digital Mix Enable 
 Digital Reampler Filter Mode 
 ADC Left Channel Data Format 
 ADC Right Channel Data Format 
 ADC Transmit Lock Mode Select 
 SCLK Frequency Select 
 DAC1 Data Format Select 
 DAC2 Data Format Select 
 DAC1 StereoMono Mode Select 
 DAC2 StereoMono Mode Select 
 ADC Left Channel Enable 
 ADC Right Channel Enable 
 Analog to Analog Mix Enable 
 Analog Channel Enable 
 DAC1 Enable 
 DAC2 Enable 
 DAC2 to DAC1 Mix  Enable 
 Clock Generator 1 Enable 
 Clock Generator 2 Enable 
 Clock Generator 3 Enable 
 Converter Power Down 
  The various registers of the AD1843 use three different formats for
  specifying gain.  The ad1843_gain structure parameterizes the
  formats.
 nonzero if gain is negative. 
 read the current value of an AD1843 bitfield. 
  write a new value to an AD1843 bitfield and return the old value.
  ad1843_read_multi reads multiple bitfields from the same AD1843
  register.  It uses a single read cycle to do it.  (Reading the
  ad1843 requires 256 bit times at 12.288 MHz, or nearly 20
  microseconds.)
  Called like this.
   ad1843_read_multi(ad1843, nfields,
 		      &ad1843_FIELD1, &val1,
 		      &ad1843_FIELD2, &val2, ...);
  ad1843_write_multi stores multiple bitfields into the same AD1843
  register.  It uses one read and one write cycle to do it.
  Called like this.
   ad1843_write_multi(ad1843, nfields,
 		       &ad1843_FIELD1, val1,
 		       &ad1843_FIELF2, val2, ...);
  ad1843_get_gain reads the specified register and extracts the gain value
  using the supplied gain type.
  Set an audio channel's gain.
  Returns the new gain, which may be lower than the old gain.
 Returns the current recording source 
  Set recording source.
  Returns newsrc on success, -errno on failure.
 Setup ad1843 for DA conversion. 
 nothing to do 
  Fully initialize the ad1843.  As described in the AD1843 data
  sheet, section "START-UP SEQUENCE".  The numbered comments are
  subsection headings from the data sheet.  See the data sheet, pages
  52-54, for more info.
 4. Put the conversion resources into standby. 
 5. Power up the clock generators and enable clock output pins. 
 6. Configure conversion resources while they are in standby. 
 DAC12 use clock 12 as source, ADC uses clock 3.  Always. 
 7. Enable conversion resources. 
 8. Configure conversion resources while they are enabled. 
 set gain to 0 for all channels 
 Unmute all channels. 
 DAC1 
 DAC2 
	 Set default recording source to Line In and set
	  mic gain to +20 dB.
 Set Speaker Out level to +- 4V and unmute it. 
 SPDX-License-Identifier: GPL-2.0-only
  Driver for Atmel AC97C
  Copyright (C) 2005-2009 Atmel Corporation
 Serialize access to opened variable 
 Serialize access to opened variable 
 Set restrictions to params. 
 Set restrictions to params. 
 assign channels to AC97C channel A 
 TODO: support more than two channels 
 configure sample format and size 
 Enable underrun interrupt on channel A 
 Enable channel A event interrupt 
 set variable rate if needed 
 Initialize and start the PDC 
 assign channels to AC97C channel A 
 TODO: support more than two channels 
 configure sample format and size 
 Enable overrun interrupt on channel A 
 Enable channel A event interrupt 
 set variable rate if needed 
 Initialize and start the PDC 
 Playback 
 PCM in 
 Mic in 
 AC97 v2.2 specifications says minimum 1 us. 
 Enable overrun interrupt from codec channel 
 SPDX-License-Identifier: GPL-2.0+
  virtio-snd: Virtio sound device
  Copyright (C) 2021 OpenSynergy GmbH
  struct virtio_pcm_msg - VirtIO IO message.
  @substream: VirtIO PCM substream.
  @xfer: Request header payload.
  @status: Response header payload.
  @length: Data length in bytes.
  @sgs: Payload scatter-gather table.
  enum pcm_msg_sg_index - Index values for the virtio_pcm_msg->sgs field in
                          an IO message.
  @PCM_MSG_SG_XFER: Element containing a virtio_snd_pcm_xfer structure.
  @PCM_MSG_SG_STATUS: Element containing a virtio_snd_pcm_status structure.
  @PCM_MSG_SG_DATA: The first element containing a data buffer.
  virtsnd_pcm_sg_num() - Count the number of sg-elements required to represent
                         vmalloc'ed buffer.
  @data: Pointer to vmalloc'ed buffer.
  @length: Buffer size.
  Context: Any context.
  Return: Number of physically contiguous parts in the @data.
  virtsnd_pcm_sg_from() - Build sg-list from vmalloc'ed buffer.
  @sgs: Preallocated sg-list to populate.
  @nsgs: The maximum number of elements in the @sgs.
  @data: Pointer to vmalloc'ed buffer.
  @length: Buffer size.
  Splits the buffer into physically contiguous parts and makes an sg-list of
  such parts.
  Context: Any context.
  virtsnd_pcm_msg_alloc() - Allocate IO messages.
  @vss: VirtIO PCM substream.
  @periods: Current number of periods.
  @period_bytes: Current period size in bytes.
  The function slices the buffer into @periods parts (each with the size of
  @period_bytes), and creates @periods corresponding IO messages.
  Context: Any context that permits to sleep.
  Return: 0 on success, -ENOMEM on failure.
  virtsnd_pcm_msg_free() - Free all allocated IO messages.
  @vss: VirtIO PCM substream.
  Context: Any context.
  virtsnd_pcm_msg_send() - Send asynchronous IO messages.
  @vss: VirtIO PCM substream.
  All messages are organized in an ordered circular list. Each time the
  function is called, all currently non-enqueued messages are added to the
  virtqueue. For this, the function keeps track of two values:
    msg_last_enqueued = index of the last enqueued message,
    msg_count = # of pending messages in the virtqueue.
  Context: Any context. Expects the txrx queue and the VirtIO substream
           spinlocks to be held by caller.
  Return: 0 on success, -errno on failure.
  virtsnd_pcm_msg_pending_num() - Returns the number of pending IO messages.
  @vss: VirtIO substream.
  Context: Any context.
  Return: Number of messages.
  virtsnd_pcm_msg_complete() - Complete an IO message.
  @msg: IO message.
  @written_bytes: Number of bytes written to the message.
  Completion of the message means the elapsed period. If transmission is
  allowed, then each completed message is immediately placed back at the end
  of the queue.
  For the playback substream, @written_bytes is equal to sizeof(msg->status).
  For the capture substream, @written_bytes is equal to sizeof(msg->status)
  plus the number of captured bytes.
  Context: Interrupt context. Takes and releases the VirtIO substream spinlock.
	
	  hw_ptr always indicates the buffer position of the first IO message
	  in the virtqueue. Therefore, on each completion of an IO message,
	  the hw_ptr value is unconditionally advanced.
	
	  If the capture substream returned an incorrect status, then just
	  increase the hw_ptr by the message size.
  virtsnd_pcm_notify_cb() - Process all completed IO messages.
  @queue: Underlying txrx virtqueue.
  Context: Interrupt context. Takes and releases the txrx queue spinlock.
  virtsnd_pcm_tx_notify_cb() - Process all completed TX messages.
  @vqueue: Underlying tx virtqueue.
  Context: Interrupt context.
  virtsnd_pcm_rx_notify_cb() - Process all completed RX messages.
  @vqueue: Underlying rx virtqueue.
  Context: Interrupt context.
  virtsnd_pcm_ctl_msg_alloc() - Allocate and initialize the PCM device control
                                message for the specified substream.
  @vss: VirtIO PCM substream.
  @command: Control request code (VIRTIO_SND_R_PCM_XXX).
  @gfp: Kernel flags for memory allocation.
  Context: Any context. May sleep if @gfp flags permit.
  Return: Allocated message on success, NULL on failure.
 SPDX-License-Identifier: GPL-2.0+
  virtio-snd: Virtio sound device
  Copyright (C) 2021 OpenSynergy GmbH
  virtsnd_event_send() - Add an event to the event queue.
  @vqueue: Underlying event virtqueue.
  @event: Event.
  @notify: Indicates whether or not to send a notification to the device.
  @gfp: Kernel flags for memory allocation.
  Context: Any context.
 reset event content 
  virtsnd_event_dispatch() - Dispatch an event from the device side.
  @snd: VirtIO sound device.
  @event: VirtIO sound event.
  Context: Any context.
  virtsnd_event_notify_cb() - Dispatch all reported events from the event queue.
  @vqueue: Underlying event virtqueue.
  This callback function is called upon a vring interrupt request from the
  device.
  Context: Interrupt context.
  virtsnd_find_vqs() - Enumerate and initialize all virtqueues.
  @snd: VirtIO sound device.
  After calling this function, the event queue is disabled.
  Context: Any context.
  Return: 0 on success, -errno on failure.
 Allocate events and populate the event queue 
  virtsnd_enable_event_vq() - Enable the event virtqueue.
  @snd: VirtIO sound device.
  Context: Any context.
  virtsnd_disable_event_vq() - Disable the event virtqueue.
  @snd: VirtIO sound device.
  Context: Any context.
  virtsnd_build_devs() - Read configuration and build ALSA devices.
  @snd: VirtIO sound device.
  Context: Any context that permits to sleep.
  Return: 0 on success, -errno on failure.
  virtsnd_validate() - Validate if the device can be started.
  @vdev: VirtIO parent device.
  Context: Any context.
  Return: 0 on success, -EINVAL on failure.
  virtsnd_probe() - Create and initialize the device.
  @vdev: VirtIO parent device.
  Context: Any context that permits to sleep.
  Return: 0 on success, -errno on failure.
  virtsnd_remove() - Remove VirtIO and ALSA devices.
  @vdev: VirtIO parent device.
  Context: Any context that permits to sleep.
  virtsnd_freeze() - Suspend device.
  @vdev: VirtIO parent device.
  Context: Any context.
  Return: 0 on success, -errno on failure.
  virtsnd_restore() - Resume device.
  @vdev: VirtIO parent device.
  Context: Any context.
  Return: 0 on success, -errno on failure.
 CONFIG_PM_SLEEP 
 SPDX-License-Identifier: GPL-2.0+
  virtio-snd: Virtio sound device
  Copyright (C) 2021 OpenSynergy GmbH
  DOC: Implementation Status
  At the moment jacks have a simple implementation and can only be used to
  receive notifications about a plugged inout device.
  VIRTIO_SND_R_JACK_REMAP
    is not supported
  struct virtio_jack - VirtIO jack.
  @jack: Kernel jack control.
  @nid: Functional group node identifier.
  @features: Jack virtio feature bit map (1 << VIRTIO_SND_JACK_F_XXX).
  @defconf: Pin default configuration value.
  @caps: Pin capabilities value.
  @connected: Current jack connection status.
  @type: Kernel jack type (SND_JACK_XXX).
  virtsnd_jack_get_label() - Get the name string for the jack.
  @vjack: VirtIO jack.
  Returns the jack name based on the default pin configuration value (see HDA
  specification).
  Context: Any context.
  Return: Name string.
  virtsnd_jack_get_type() - Get the type for the jack.
  @vjack: VirtIO jack.
  Returns the jack type based on the default pin configuration value (see HDA
  specification).
  Context: Any context.
  Return: SND_JACK_XXX value.
  virtsnd_jack_parse_cfg() - Parse the jack configuration.
  @snd: VirtIO sound device.
  This function is called during initial device initialization.
  Context: Any context that permits to sleep.
  Return: 0 on success, -errno on failure.
  virtsnd_jack_build_devs() - Build ALSA controls for jacks.
  @snd: VirtIO sound device.
  Context: Any context that permits to sleep.
  Return: 0 on success, -errno on failure.
  virtsnd_jack_event() - Handle the jack event notification.
  @snd: VirtIO sound device.
  @event: VirtIO sound event.
  Context: Interrupt context.
 SPDX-License-Identifier: GPL-2.0+
  virtio-snd: Virtio sound device
  Copyright (C) 2021 OpenSynergy GmbH
  IO messages lifetime
  ---------------------
  Allocation:
    Messages are initially allocated in the ops->hw_params() after the size and
    number of periods have been successfully negotiated.
  Freeing:
    Messages can be safely freed after the queue has been successfully flushed
    (RELEASE command in the ops->sync_stop()) and the ops->hw_free() has been
    called.
    When the substream stops, the ops->sync_stop() waits until the device has
    completed all pending messages. This wait can be interrupted either by a
    signal or due to a timeout. In this case, the device can still access
    messages even after calling ops->hw_free(). It can also issue an interrupt,
    and the interrupt handler will also try to access message structures.
    Therefore, freeing of already allocated messages occurs:
    - in ops->hw_params(), if this operator was called several times in a row,
      or if ops->hw_free() failed to free messages previously;
    - in ops->hw_free(), if the queue has been successfully flushed;
    - in dev->release().
 Map for converting ALSA format to VirtIO format. 
 Map for converting ALSA frame rate to VirtIO frame rate. 
  virtsnd_pcm_open() - Open the PCM substream.
  @substream: Kernel ALSA substream.
  Context: Process context.
  Return: 0 on success, -errno on failure.
	
	  If the substream has already been used, then the IO queue may be in
	  an invalid state. Just in case, we do a check and try to return the
	  queue to its original state, if necessary.
  virtsnd_pcm_close() - Close the PCM substream.
  @substream: Kernel ALSA substream.
  Context: Process context.
  Return: 0.
  virtsnd_pcm_dev_set_params() - Set the parameters of the PCM substream on
                                 the device side.
  @vss: VirtIO PCM substream.
  @buffer_bytes: Size of the hardware buffer.
  @period_bytes: Size of the hardware period.
  @channels: Selected number of channels.
  @format: Selected sample format (SNDRV_PCM_FORMAT_XXX).
  @rate: Selected frame rate.
  Context: Any context that permits to sleep.
  Return: 0 on success, -errno on failure.
  virtsnd_pcm_hw_params() - Set the parameters of the PCM substream.
  @substream: Kernel ALSA substream.
  @hw_params: Hardware parameters.
  Context: Process context.
  Return: 0 on success, -errno on failure.
	
	  Free previously allocated messages if ops->hw_params() is called
	  several times in a row, or if ops->hw_free() failed to free messages.
  virtsnd_pcm_hw_free() - Reset the parameters of the PCM substream.
  @substream: Kernel ALSA substream.
  Context: Process context.
  Return: 0
 If the queue is flushed, we can safely free the messages here. 
  virtsnd_pcm_prepare() - Prepare the PCM substream.
  @substream: Kernel ALSA substream.
  Context: Process context.
  Return: 0 on success, -errno on failure.
  virtsnd_pcm_trigger() - Process command for the PCM substream.
  @substream: Kernel ALSA substream.
  @command: Substream command (SNDRV_PCM_TRIGGER_XXX).
  Context: Any context. Takes and releases the VirtIO substream spinlock.
           May take and release the txrx queue spinlock.
  Return: 0 on success, -errno on failure.
  virtsnd_pcm_sync_stop() - Synchronous PCM substream stop.
  @substream: Kernel ALSA substream.
  The function can be called both from the upper level or from the driver
  itself.
  Context: Process context. Takes and releases the VirtIO substream spinlock.
  Return: 0 on success, -errno on failure.
	
	  The spec states that upon receipt of the RELEASE command "the device
	  MUST complete all pending IO messages for the specified stream ID".
	  Thus, we consider the absence of IO messages in the queue as an
	  indication that the substream has been released.
  virtsnd_pcm_pointer() - Get the current hardware position for the PCM
                          substream.
  @substream: Kernel ALSA substream.
  Context: Any context. Takes and releases the VirtIO substream spinlock.
  Return: Hardware position in frames inside [0 ... buffer_size) range.
 PCM substream operators map. 
 SPDX-License-Identifier: GPL-2.0+
  virtio-snd: Virtio sound device
  Copyright (C) 2021 OpenSynergy GmbH
  struct virtio_snd_msg - Control message.
  @sg_request: Scattergather list containing a device request (header).
  @sg_response: Scattergather list containing a device response (status).
  @list: Pending message list entry.
  @notify: Request completed notification.
  @ref_count: Reference count used to manage a message lifetime.
  virtsnd_ctl_msg_ref() - Increment reference counter for the message.
  @msg: Control message.
  Context: Any context.
  virtsnd_ctl_msg_unref() - Decrement reference counter for the message.
  @msg: Control message.
  The message will be freed when the ref_count value is 0.
  Context: Any context.
  virtsnd_ctl_msg_request() - Get a pointer to the request header.
  @msg: Control message.
  Context: Any context.
  virtsnd_ctl_msg_response() - Get a pointer to the response header.
  @msg: Control message.
  Context: Any context.
  virtsnd_ctl_msg_alloc() - Allocate and initialize a control message.
  @request_size: Size of request header.
  @response_size: Size of response header.
  @gfp: Kernel flags for memory allocation.
  The message will be automatically freed when the ref_count value is 0.
  Context: Any context. May sleep if @gfp flags permit.
  Return: Allocated message on success, NULL on failure.
 This reference is dropped in virtsnd_ctl_msg_complete(). 
  virtsnd_ctl_msg_send() - Send a control message.
  @snd: VirtIO sound device.
  @msg: Control message.
  @out_sgs: Additional sg-list to attach to the request header (may be NULL).
  @in_sgs: Additional sg-list to attach to the response header (may be NULL).
  @nowait: Flag indicating whether to wait for completion.
  Context: Any context. Takes and releases the control queue spinlock.
           May sleep if @nowait is false.
  Return: 0 on success, -errno on failure.
 Set the default status in case the message was canceled. 
		
		  Since in this case virtsnd_ctl_msg_complete() will not be
		  called, it is necessary to decrement the reference count.
  virtsnd_ctl_msg_complete() - Complete a control message.
  @msg: Control message.
  Context: Any context. Expects the control queue spinlock to be held by
           caller.
  virtsnd_ctl_msg_cancel_all() - Cancel all pending control messages.
  @snd: VirtIO sound device.
  Context: Any context.
  virtsnd_ctl_query_info() - Query the item configuration from the device.
  @snd: VirtIO sound device.
  @command: Control request code (VIRTIO_SND_R_XXX_INFO).
  @start_id: Item start identifier.
  @count: Item count to query.
  @size: Item information size in bytes.
  @info: Buffer for storing item information.
  Context: Any context that permits to sleep.
  Return: 0 on success, -errno on failure.
  virtsnd_ctl_notify_cb() - Process all completed control messages.
  @vqueue: Underlying control virtqueue.
  This callback function is called upon a vring interrupt request from the
  device.
  Context: Interrupt context. Takes and releases the control queue spinlock.
 SPDX-License-Identifier: GPL-2.0+
  virtio-snd: Virtio sound device
  Copyright (C) 2021 OpenSynergy GmbH
 VirtIO->ALSA channel position map 
  virtsnd_chmap_parse_cfg() - Parse the channel map configuration.
  @snd: VirtIO sound device.
  This function is called during initial device initialization.
  Context: Any context that permits to sleep.
  Return: 0 on success, -errno on failure.
 Count the number of channel maps per each PCM devicestream. 
  virtsnd_chmap_add_ctls() - Create an ALSA control for channel maps.
  @pcm: ALSA PCM device.
  @direction: PCM stream direction (SNDRV_PCM_STREAM_XXX).
  @vs: VirtIO PCM stream.
  Context: Any context.
  Return: 0 on success, -errno on failure.
  virtsnd_chmap_build_devs() - Build ALSA controls for channel maps.
  @snd: VirtIO sound device.
  Context: Any context.
  Return: 0 on success, -errno on failure.
 Allocate channel map elements per each PCM devicestream. 
 Initialize channel maps per each PCM devicestream. 
 Create an ALSA control per each PCM devicestream. 
 SPDX-License-Identifier: GPL-2.0+
  virtio-snd: Virtio sound device
  Copyright (C) 2021 OpenSynergy GmbH
 Map for converting VirtIO format to ALSA format. 
 Map for converting VirtIO frame rate to ALSA frame rate. 
  virtsnd_pcm_build_hw() - Parse substream config and build HW descriptor.
  @vss: VirtIO substream.
  @info: VirtIO substream information entry.
  Context: Any context.
  Return: 0 on success, -EINVAL if configuration is invalid.
	
	  TODO: set SNDRV_PCM_INFO_{BATCH,BLOCK_TRANSFER} if device supports
	  only message-based transport.
	
	  We must ensure that there is enough space in the buffer to store
	  pcm_buffer_ms ms for the combination (Cmax, Smax, Rmax), where:
	    Cmax = maximum supported number of channels,
	    Smax = maximum supported sample size in bytes,
	    Rmax = maximum supported frame rate.
	
	  We must ensure that the minimum period size is enough to store
	  pcm_period_ms_min ms for the combination (Cmin, Smin, Rmin), where:
	    Cmin = minimum supported number of channels,
	    Smin = minimum supported sample size in bytes,
	    Rmin = minimum supported frame rate.
	
	  We must ensure that the maximum period size is enough to store
	  pcm_period_ms_max ms for the combination (Cmax, Smax, Rmax).
  virtsnd_pcm_find() - Find the PCM device for the specified node ID.
  @snd: VirtIO sound device.
  @nid: Function node ID.
  Context: Any context.
  Return: a pointer to the PCM device or ERR_PTR(-ENOENT).
  virtsnd_pcm_find_or_create() - Find or create the PCM device for the
                                 specified node ID.
  @snd: VirtIO sound device.
  @nid: Function node ID.
  Context: Any context that permits to sleep.
  Return: a pointer to the PCM device or ERR_PTR(-errno).
  virtsnd_pcm_validate() - Validate if the device can be started.
  @vdev: VirtIO parent device.
  Context: Any context.
  Return: 0 on success, -EINVAL on failure.
  virtsnd_pcm_period_elapsed() - Kernel work function to handle the elapsed
                                 period state.
  @work: Elapsed period work.
  The main purpose of this function is to call snd_pcm_period_elapsed() in
  a process context, not in an interrupt context. This is necessary because PCM
  devices operate in non-atomic mode.
  Context: Process context.
  virtsnd_pcm_parse_cfg() - Parse the stream configuration.
  @snd: VirtIO sound device.
  This function is called during initial device initialization.
  Context: Any context that permits to sleep.
  Return: 0 on success, -errno on failure.
  virtsnd_pcm_build_devs() - Build ALSA PCM devices.
  @snd: VirtIO sound device.
  Context: Any context that permits to sleep.
  Return: 0 on success, -errno on failure.
  virtsnd_pcm_event() - Handle the PCM device event notification.
  @snd: VirtIO sound device.
  @event: VirtIO sound event.
  Context: Interrupt context.
 TODO: deal with shmem elapsed period 
 SPDX-License-Identifier: GPL-2.0-only
    intel_hdmi_audio.c - Intel HDMI audio driver
   Copyright (C) 2016 Intel Corp
   Authors:	Sailaja Bandarupalli <sailaja.bandarupalli@intel.com>
 		Ramesh Babu K V	<ramesh.babu@intel.com>
 		Vaibhav Agarwal <vaibhav.agarwal@intel.com>
 		Jerome Anand <jerome.anand@intel.com>
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  ALSA driver for Intel HDMI audio
standard module options for ALSA. This module supports only one card
  ELD SA bits in the CEA Speaker Allocation data block
 the following are not defined in ELD yet 
  This is an ordered list!
  The preceding ones have better chances to be selected by
  hdmi_channel_allocation().
                        channel:   7     6    5    4    3     2    1    0  
 2.1 
 Dolby Surround 
 surround40 
 surround41 
 surround50 
 surround51 
 6.1 
 surround71 
 terminator 
 hardware capability structure 
 Get the active PCM substream;
  Call had_substream_put() for unreferecing.
  Don't call this inside had_spinlock, as it takes by itself
 Unref the active PCM substream;
  Don't call this inside had_spinlock, as it takes by itself
 Register access functions 
  enable  disable audio configuration
  The normal readmodify should not directly be used on VLV2 for
  updating AUD_CONFIG register.
  This is because:
  Bit6 of AUD_CONFIG register is writeonly due to a silicon bug on VLV2
  HDMI IP. As a result a read-modify of AUD_CONFIG register will always
  clear bit6. AUD_CONFIG[6:4] represents the "channels" field of the
  register. This field should be 1xy binary for configuration with 6 or
  more channels. Read-modify of AUD_CONFIG (Eg. for enabling audio)
  causes the "channels" field to be updated as 0xy binary resulting in
  bad audio. The fix is to always write the AUD_CONFIG[6:4] with
  appropriate value when doing read-modify of AUD_CONFIG register.
 update the cached value 
 forcibly ACKs to both BUFFER_DONE and BUFFER_UNDERRUN interrupts 
 Reset buffer pointers 
  initialize audio channel status registers
  This function is called in the prepare callback
 control should never come here 
  function to initialize audio
  registers and buffer configuration registers
  This function is called in the prepare callback
 fix up the DP bits 
  Compute derived values in channel_allocations[].
  The transformation takes two steps:
       eld->spk_alloc => (eld_speaker_allocation_bits[]) => spk_mask
             spk_mask => (channel_allocations[])         => ai->CA
  TODO: it could select the wrong CA from multiple candidates.
	
	  CA defaults to 0 for basic stereo audio
	
	  expand ELD's speaker allocation mask
	 
	  ELD tells the speaker mask in a compact(paired) form,
	  expand ELD's notions to match the ones used by Audio InfoFrame.
 search for the first working match in the CA table 
 from speaker bit mask to ALSA API channel position 
 WA: Fix the max channel supported to 8 
	
	  Sink may support more than 8 channels, if eld_high has more than
	  one bit set. SOC supports max 8 channels.
	  Refer eld_speaker_allocation_bits, for sink speaker allocation
 if 0x2F < eld < 0x4F fall back to 0x2f, else fall back to 0x4F 
 eld_high & (eld_high-1): if more than 1 bit set 
 0x1F: 7 channels 
  ALSA API channel-map control callbacks
  Initialize Data Island Packets registers
  This function is called in the prepare callback
 Calculte the byte wide checksum for all valid DIP words 
 program remaining DIP words with zero 
 Select maud according to DP 1.2 spec 
  Program HDMI audio CTS value
  @aud_samp_freq: sampling frequency of audio data
  @tmds: sampling frequency of the display data
  @link_rate: DP link rate
  @n_param: N value, depends on aud_samp_freq
  @intelhaddata: substream private data
  Program CTS register based on the audio and display sampling frequency
 Substitute cts_val with Maud according to DP 1.2 spec
 Calculate CTS according to HDMI 1.3a spec
 Select N according to HDMI 1.3a spec
  Program HDMI audio N value
  @aud_samp_freq: sampling frequency of audio data
  @n_param: N value, depends on aud_samp_freq
  @intelhaddata: substream private data
  This function is called in the prepare callback.
  It programs based on the audio and display sampling frequency
		
		  According to DP specs, Maud and Naud values hold
		  a relationship, which is stated as:
		  MaudNaud = 512  fs  f_LS_Clk
		  where, fs is the sampling frequency of the audio stream
		  and Naud is 32768 for Async clock.
  PCM ring buffer handling
  The hardware provides a ring buffer with the fixed 4 buffer descriptors
  (BDs).  The driver maps these 4 BDs onto the PCM ring buffer.  The mapping
  moves at each period elapsed.  The below illustrates how it works:
  At time=0
   PCM | 0 | 1 | 2 | 3 | 4 | 5 | .... |n-1|
   BD  | 0 | 1 | 2 | 3 |
  At time=1 (period elapsed)
   PCM | 0 | 1 | 2 | 3 | 4 | 5 | .... |n-1|
   BD      | 1 | 2 | 3 | 0 |
  At time=2 (second period elapsed)
   PCM | 0 | 1 | 2 | 3 | 4 | 5 | .... |n-1|
   BD          | 2 | 3 | 0 | 1 |
  The bd_head field points to the index of the BD to be read.  It's also the
  position to be filled at next.  The pcm_head and the pcm_filled fields
  point to the indices of the current position and of the next position to
  be filled, respectively.  For PCM buffer there are both _head and _filled
  because they may be difference when nperiods > 4.  For example, in the
  example above at t=1, bd_head=1 and pcm_head=1 while pcm_filled=5:
  pcm_head (=1) --v               v-- pcm_filled (=5)
        PCM | 0 | 1 | 2 | 3 | 4 | 5 | .... |n-1|
        BD      | 1 | 2 | 3 | 0 |
   bd_head (=1) --^               ^-- next to fill (= bd_head)
  For nperiods < 4, the remaining BDs out of 4 are marked as invalid, so that
  the hardware skips those BDs in the loop.
  An exceptional setup is the case with nperiods=1.  Since we have to update
  BDs after finishing one BD processing, we'd need at least two BDs, where
  both BDs point to the same content, the same address, the same size of the
  whole PCM buffer.
 Set up a buffer descriptor at the "filled" position 
 advance the indices to the next 
 invalidate a buffer descriptor with the given index 
 Initial programming of ring buffer 
 set the minimum 2 BDs for num_periods=1 
 invalidate the rest 
 reset at head again before starting 
 process a bd, advance to the next 
 reprogram the next buffer 
 proceed to next 
 process the current BD(s);
  returns the current PCM buffer byte position, or -EPIPE for underrun.
 get the remaining bytes on the buffer 
 OK, this is the current buffer 
 len=0 => already empty, check the next buffer 
 all empty? - report underrun 
 called from irq handler 
 no stream? - bail out 
 disconnected? - bail out 
 process or stop the stream 
  The interrupt status 'sticky' bits might not be cleared by
  setting '1' to that bit once...
 clear bit30, 31 AUD_HDMI_STATUS 
 Perform some reset procedure after stopping the stream;
  this is called from prepare or hw_free callbacks once after trigger STOP
  or underrun has been processed in order to settle down the hw state.
 Reset buffer pointers 
 called from irq handler 
 Report UNDERRUN error to above layers 
  ALSA PCM open callback
 set the runtime hw parameter with local snd_pcm_hardware struct 
	 Make sure, that the period size is always aligned
	  64byte boundary
 expose PCM substream 
  ALSA PCM close callback
 unreference and sync with the pending PCM accesses 
  ALSA PCM hw_params callback
  ALSA PCM trigger callback
 Enable Audio 
 FIXME: do we need this? 
 Disable Audio 
  ALSA PCM prepare callback
 Get N value in KHz 
 Prog buffer address 
	
	  Program channel mapping in following order:
	  FL, FR, C, LFE, RL, RR
  ALSA PCM pointer callback
 wrapping may happen when periods=1 
  ALSA PCM mmap callback
  ALSA PCM ops
 process mode change of the running stream; called in mutex 
 Disable Audio 
 Update CTS value 
 Enable Audio 
 process hot plug, called from wq with mutex locked 
 Disable Audio 
 Report to above ALSA layer 
 process hot unplug, called from wq with mutex locked 
 Disable Audio 
 Report to above ALSA layer 
  ALSA iec958 and ELD controls
 shared 
  audio interrupt handler
 use raw register access to ack IRQs even while disconnected 
  monitor plugunplug notification from i915; just kick off the work
 the work to handle monitor hot plugunplug 
 clear the old ELD 
 Shut down the stream 
		
		  Shut down the stream before we change
		  the pipe assignment for this pcm device
 Restart the stream if necessary 
  Jack interface
  PM callbacks
 release resources 
  hdmi_lpe_audio_probe - start bridge with i915
  This function is called when the i915 driver creates the
  hdmi-lpe-audio platform device.
 get resources 
 create a card instance with ALSA framework 
 setup interrupt handler 
 only 32bit addressable 
 setup private data which can be retrieved when required 
 setup the ops for playback 
		 allocate dma pages;
		  try to allocate 600k buffer as default which is large enough
 create controls 
 Register channel map controls 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2016 Robert Jarzmik <robert.jarzmik@free.fr>
  Protects ac97_controllers and each ac97_controller structure.
  snd_ac97_codec_driver_register - register an AC97 codec driver
  @dev: AC97 driver codec to register
  Register an AC97 codec driver to the ac97 bus driver, aka. the AC97 digital
  controller.
  Returns 0 on success or error code
  snd_ac97_codec_driver_unregister - unregister an AC97 codec driver
  @dev: AC97 codec driver to unregister
  Unregister a previously registered ac97 codec driver.
  snd_ac97_codec_get_platdata - get platform_data
  @adev: the ac97 codec device
  For legacy platforms, in order to have platform_data in codec drivers
  available, while ac97 device are auto-created upon probe, this retrieves the
  platdata which was setup on ac97 controller registration.
  Returns the platform data pointer
  snd_ac97_controller_register - register an ac97 controller
  @ops: the ac97 bus operations
  @dev: the device providing the ac97 DC function
  @slots_available: mask of the ac97 codecs that can be scanned and probed
                    bit0 => codec 0, bit1 => codec 1 ... bit 3 => codec 3
  Register a digital controller which can control up to 4 ac97 codecs. This is
  the controller side of the AC97 AC-link, while the slave side are the codecs.
  Returns a valid controller upon success, negative pointer value upon error
  snd_ac97_controller_unregister - unregister an ac97 controller
  @ac97_ctrl: the device previously provided to ac97_controller_register()
 CONFIG_PM 
 SPDX-License-Identifier: GPL-2.0-only
   Copyright (C) 2016 Robert Jarzmik <robert.jarzmik@free.fr>
 For compat_ac97_ 
 SPDX-License-Identifier: GPL-2.0-only
   Copyright (C) 2016 Robert Jarzmik <robert.jarzmik@free.fr>
 SPDX-License-Identifier: GPL-2.0
 Copyright (c) 2019 Jaroslav Kysela <perex@perex.cz>
  configuration table
  - the order of similar PCI ID entries is important!
  - the first successful match will win
 Merrifield 
 Broxton-T 
  Apollolake (Broxton-P)
  the legacy HDAudio driver is used except on Up Squared (SOF) and
  Chromebooks (SST), as well as devices based on the ES8336 codec
  Skylake and Kabylake use legacy HDAudio driver except for Google
  Chromebooks (SST)
 Sunrise Point-LP 
 Kabylake-LP 
  Geminilake uses legacy HDAudio driver except for Google
  Chromebooks and devices based on the ES8336 codec
 Geminilake 
  CoffeeLake, CannonLake, CometLake, IceLake, TigerLake use legacy
  HDAudio driver except for Google Chromebooks and when DMICs are
  present. Two cases are required since Coreboot does not expose NHLT
  tables.
  When the Chromebook quirk is not present, it's based on information
  that no such device exists. When the quirk is present, it could be
  either based on product information or a placeholder.
 Cannonlake 
 Coffelake 
 Cometlake-LP 
 early version of SKU 09C6 
 Cometlake-H 
 Icelake 
 Tigerlake 
 Elkhart Lake 
 Alder Lake 
 Intel vendor only 
	
	  Legacy devices don't have a PCI-based DSP and use HDaudio
	  for HDMIDP support, ignore kernel parameter
 Broadwell 
 Haswell 
 Baytrail 
 Braswell 
	
	  detect DSP by checking classsubclassprog-id information
	  class=04 subclass 03 prog-if 00: no DSP, use legacy driver
	  class=04 subclass 01 prog-if 00: DSP is present
	   (and may be required e.g. for DMIC or SSP support)
	  class=04 subclass 03 prog-if 80: use DSP or legacy mode
 find the configuration for the specific device 
 Should we default to SOF or SST for BYTCHT ? 
  configuration table
  - the order of similar ACPI ID entries is important!
  - the first successful match will win
 BayTrail 
 CherryTrail 
 Broadwell 
 Haswell - not supported by SOF but added for consistency 
 find the configuration for the specific device 
 SPDX-License-Identifier: GPL-2.0-only
  HD-audio bus
  hdac_get_device_id - gets the hdac device id entry
  @hdev: HD-audio core device
  @drv: HD-audio codec driver
  Compares the hdac device vendor_id and revision_id to the hdac_device
  driver id_table and returns the matching device id entry.
	
	  if driver provided a match function use that otherwise we will
	  use hdac_codec_match function
 SPDX-License-Identifier: GPL-2.0
 hdac_component.c - routines for sync between HD-A core and DRM driver
  snd_hdac_set_codec_wakeup - Enable  disable HDMIDP codec wakeup
  @bus: HDA core bus
  @enable: enable or disable the wakeup
  This function is supposed to be used only by a HD-audio controller
  driver that needs the interaction with graphics driver.
  This function should be called during the chip reset, also called at
  resume for updating STATESTS register read.
  Returns zero for success or a negative error code.
  snd_hdac_display_power - Power up  down the power refcount
  @bus: HDA core bus
  @idx: HDA codec address, pass HDA_CODEC_IDX_CONTROLLER for controller
  @enable: power up or down
  This function is used by either HD-audio controller or codec driver that
  needs the interaction with graphics driver.
  This function updates the power status, and calls the get_power() and
  put_power() ops accordingly, toggling the codec wakeup, too.
  snd_hdac_sync_audio_rate - Set NCTS based on the sample rate
  @codec: HDA codec
  @nid: the pin widget NID
  @dev_id: device identifier
  @rate: the sample rate to set
  This function is supposed to be used only by a HD-audio controller
  driver that needs the interaction with graphics driver.
  This function sets NCTS value based on the given sample rate.
  Returns zero for success, or a negative error code.
  snd_hdac_acomp_get_eld - Get the audio state and ELD via component
  @codec: HDA codec
  @nid: the pin widget NID
  @dev_id: device identifier
  @audio_enabled: the pointer to store the current audio state
  @buffer: the buffer pointer to store ELD bytes
  @max_bytes: the max bytes to be stored on @buffer
  This function is supposed to be used only by a HD-audio controller
  driver that needs the interaction with graphics driver.
  This function queries the current state of the audio on the given
  digital port and fetches the ELD bytes onto the given buffer.
  It returns the number of bytes for the total ELD data, zero for
  invalid ELD, or a negative error code.
  The return size is the total bytes required for the whole ELD bytes,
  thus it may be over @max_bytes.  If it's over @max_bytes, it implies
  that only a part of ELD bytes have been fetched.
 pin the module to avoid dynamic unbinding, but only if given 
  snd_hdac_acomp_register_notifier - Register audio component ops
  @bus: HDA core bus
  @aops: audio component ops
  This function is supposed to be used only by a HD-audio controller
  driver that needs the interaction with graphics driver.
  This function sets the given ops to be called by the graphics driver.
  Returns zero for success or a negative error code.
  snd_hdac_acomp_init - Initialize audio component
  @bus: HDA core bus
  @aops: audio component ops
  @match_master: match function for finding components
  @extra_size: Extra bytes to allocate
  This function is supposed to be used only by a HD-audio controller
  driver that needs the interaction with graphics driver.
  This function initializes and sets up the audio component to communicate
  with graphics driver.
  Unlike snd_hdac_i915_init(), this function doesn't synchronize with the
  binding with the DRM component.  Each caller needs to sync via master_bind
  audio_ops.
  Returns zero for success or a negative error code.
  snd_hdac_acomp_exit - Finalize audio component
  @bus: HDA core bus
  This function is supposed to be used only by a HD-audio controller
  driver that needs the interaction with graphics driver.
  This function releases the audio component that has been used.
  Returns zero for success or a negative error code.
 SPDX-License-Identifier: GPL-2.0-only
  HDMI Channel map support helpers
  CEA speaker placement:
         FLH       FCH        FRH
   FLW    FL  FLC   FC   FRC   FR   FRW
                                   LFE
                      TC
           RL  RLC   RC   RRC   RR
  The LeftRight Surround channel _notions_ LSRS in SMPTE 320M corresponds to
  CEA RLRR; The SMPTE channel _assignment_ CLFE is swapped to CEA LFEFC.
 Front Left           
 Front Center         
 Front Right          
 Front Left Center    
 Front Right Center   
 Rear Left            
 Rear Center          
 Rear Right           
 Rear Left Center     
 Rear Right Center    
 Low Frequency Effect 
 Front Left Wide      
 Front Right Wide     
 Front Left High      
 Front Center High    
 Front Right High     
 Top Center           
  0  "FLFR",
  1  "LFE",
  2  "FC",
  3  "RLRR",
  4  "RC",
  5  "FLCFRC",
  6  "RLCRRC",
  7  "FLWFRW",
  8  "FLHFRH",
  9  "TC",
 10  "FCH",
  ELD SA bits in the CEA Speaker Allocation data block
 the following are not defined in ELD yet 
  ALSA sequence is:
        surround40   surround41   surround50   surround51   surround71
  ch0   front left   =            =            =            =
  ch1   front right  =            =            =            =
  ch2   rear left    =            =            =            =
  ch3   rear right   =            =            =            =
  ch4                LFE          center       center       center
  ch5                                          LFE          LFE
  ch6                                                       side left
  ch7                                                       side right
  surround71 = {FL, FR, RLC, RRC, FC, LFE, RL, RR}
 stereo 
 2.1 
 Dolby Surround 
 surround40 
 4ch 
 surround41 
 surround50 
 surround51 
 7.1 
  This is an ordered list!
  The preceding ones have better chances to be selected by
  hdmi_channel_allocation().
			  channel:   7     6    5    4    3     2    1    0  
 2.1 
 Dolby Surround 
 surround40 
 surround41 
 surround50 
 surround51 
 6.1 
 surround71 
  Channel mapping routines
  Compute derived values in channel_allocations[].
 necessary when j == 0 
  The transformation takes two steps:
 	eld->spk_alloc => (eld_speaker_allocation_bits[]) => spk_mask
 	      spk_mask => (channel_allocations[])         => ai->CA
  TODO: it could select the wrong CA from multiple candidates.
	
	  CA defaults to 0 for basic stereo audio
	
	  expand ELD's speaker allocation mask
	 
	  ELD tells the speaker mask in a compact(paired) form,
	  expand ELD's notions to match the ones used by Audio InfoFrame.
 search for the first working match in the CA table 
		
		  if there was no match, select the regular ALSA channel
		  allocation with the matching number of channels
 fill actual channel mappings in ALSA channel (i) order 
 skip zero slots 
 fill the rest of the slots with ALSA channel 0xf 
 ALSA API channel map position 
 speaker position bit mask 
 terminator 
 from ALSA API channel position to speaker bit mask 
 from ALSA API channel position to CEA slot 
	 Add sanity check to pass klockwork check.
	  This should never happen.
 from speaker bit mask to ALSA API channel position 
 from CEA slot to ALSA API channel position 
	 Add sanity check to pass klockwork check.
	  This should never happen.
 get the CA index corresponding to the given ALSA API channel map 
 set up the channel slots for the given ALSA API channel map 
 unassigned channel 
 store ALSA API channel map from the current default map 
	 Add sanity check to pass klockwork check.
	  This should never happen.
  ALSA API channel-map control callbacks
 If the speaker allocation matches the channel count, it is OK.
 all channels are remappable freely 
	 No monitor is connected in dyn_pcm_assign.
	  It's invalid to setup the chmap
 just for avoiding error from alsactl restore 
 override handlers 
 SPDX-License-Identifier: GPL-2.0-only
  HD-audio controller helpers
 clear CORB read pointer properly 
  snd_hdac_bus_init_cmd_io - set up CORBRIRB buffers
  @bus: HD-audio core bus
 CORB set up 
 set the corb size to 256 entries (ULI requires explicitly) 
 set the corb write pointer to 0 
 reset the corb hw read pointer 
 enable corb dma 
 RIRB set up 
 set the rirb size to 256 entries (ULI requires explicitly) 
 reset the rirb hw write pointer 
 set N=1, get RIRB response interrupt for new entry 
 enable rirb dma and response irq 
 Accept unsolicited responses 
 wait for cmd dmas till they are stopped 
  snd_hdac_bus_stop_cmd_io - clean up CORBRIRB buffers
  @bus: HD-audio core bus
 disable ringbuffer DMAs 
 disable unsolicited responses 
  snd_hdac_bus_send_cmd - send a command verb via CORB
  @bus: HD-audio core bus
  @val: encoded verb value to send
  Returns zero for success or a negative error code.
 add command to corb 
 something wrong, controller likely turned to D3 
 oops, it's full 
  snd_hdac_bus_update_rirb - retrieve RIRB entries
  @bus: HD-audio core bus
  Usually called from interrupt handler.
  The caller needs bus->reg_lock spinlock before calling this.
 something wrong, controller likely turned to D3 
 an RIRB entry is 8-bytes 
  snd_hdac_bus_get_response - receive a response via RIRB
  @bus: HD-audio core bus
  @addr: codec address
  @res: pointer to store the value, NULL when not needed
  Returns zero if a value is read, or a negative error code.
 the last value 
 temporary workaround 
  snd_hdac_bus_parse_capabilities - parse capability structure
  @bus: the pointer to bus object
  Returns 0 if successful, or a negative error code.
 Lets walk the linked capabilities list 
 PP capability found, the Audio DSP is present 
 SPIB capability found, handler function 
 DMA resume  capability found, handler function 
 read the offset of next capability 
  Lowlevel interface
  snd_hdac_bus_enter_link_reset - enter link reset
  @bus: HD-audio core bus
  Enter to the link reset state.
 reset controller 
  snd_hdac_bus_exit_link_reset - exit link reset
  @bus: HD-audio core bus
  Exit from the link reset state.
 reset codec link 
 clear STATESTS if not in reset 
 reset controller 
	 delay for >= 100us for codec PLL to settle per spec
	  Rev 0.9 section 5.5.1
 Bring controller out of reset 
 Brent Chartrand said to wait >= 540us for codecs to initialize 
 check to see if controller is ready 
 detect codecs 
 enable interrupts 
 enable controller CIE and GIE 
 disable interrupts 
 disable interrupts in stream descriptor 
 disable SIE for all streams 
 disable controller CIE and GIE 
 clear interrupts 
 clear stream status 
 clear STATESTS 
 clear rirb status 
 clear int status 
  snd_hdac_bus_init_chip - reset and start the controller registers
  @bus: HD-audio core bus
  @full_reset: Do full reset
 reset controller 
 clear interrupts 
 initialize the codec command IO 
 enable interrupts after CORBRIRB buffers are initialized above 
 program the position buffer 
  snd_hdac_bus_stop_chip - disable the whole IRQ and IOs
  @bus: HD-audio core bus
 disable interrupts 
 disable CORBRIRB 
 disable position buffer 
  snd_hdac_bus_handle_stream_irq - interrupt handler for streams
  @bus: HD-audio core bus
  @status: INTSTS register value
  @ack: callback to be called for woken streams
  Returns the bits of handled streams, or zero if no stream is handled.
  snd_hdac_bus_alloc_stream_pages - allocate BDL and other buffers
  @bus: HD-audio core bus
  Call this after assigning the all streams.
  Returns zero for success, or a negative error code.
 allocate memory for the BDL for each stream 
 allocate memory for the position buffer 
 single page (at least 4096 bytes) must suffice for both ringbuffes 
  snd_hdac_bus_free_stream_pages - release BDL and other buffers
  @bus: HD-audio core bus
  snd_hdac_bus_link_power - power updown codec link
  @codec: HD-audio device
  @enable: whether to power-up the link
 SPDX-License-Identifier: GPL-2.0-only
  HD-audio stream operations
  snd_hdac_get_stream_stripe_ctl - get stripe control value
  @bus: HD-audio core bus
  @substream: PCM substream
 T_AZA_GCAP_NSDO is 1:2 bitfields in GCAP 
 following is from HD audio spec 
 stripe value: 0 for 1SDO, 1 for 2SDO, 2 for 4SDO lines 
  snd_hdac_stream_init - initialize each stream (aka device)
  @bus: HD-audio core bus
  @azx_dev: HD-audio core stream object to initialize
  @idx: stream index number
  @direction: stream direction (SNDRV_PCM_STREAM_PLAYBACK or SNDRV_PCM_STREAM_CAPTURE)
  @tag: the tag id to assign
  Assign the starting bdl address to each stream (device) and initialize.
 offset: SDI0=0x80, SDI1=0xa0, ... SDO3=0x160 
 int mask: SDI0=0x01, SDI1=0x02, ... SDO3=0x80 
  snd_hdac_stream_start - start a stream
  @azx_dev: HD-audio core stream to start
  @fresh_start: false = wallclock timestamp relative to period wallclock
  Start a stream, set start_wallclk and set the running flag.
 enable SIE 
 set stripe control 
 set DMA start and interrupt mask 
  snd_hdac_stream_clear - stop a stream DMA
  @azx_dev: HD-audio core stream to stop
 to be sure 
  snd_hdac_stream_stop - stop a stream
  @azx_dev: HD-audio core stream to stop
  Stop a stream DMA and disable stream interrupt
 disable SIE 
  snd_hdac_stream_reset - reset a stream
  @azx_dev: HD-audio core stream to reset
 waiting for hardware to report that the stream is out of reset 
 reset first position - may not be synced with hw at this time 
  snd_hdac_stream_setup -  set up the SD for streaming
  @azx_dev: HD-audio core stream to set up
 make sure the run bit is zero for SD 
 program the stream_tag 
 program the length of samples in cyclic buffer 
 program the stream format 
 this value needs to be the same as the one programmed 
 program the stream LVI (last valid index) of the BDL 
 program the BDL address 
 lower BDL address 
 upper BDL address 
 enable the position buffer 
 set the interrupt enable bits in the descriptor control register 
	 when LPIB delay correction gives a small negative value,
	  we ignore it; currently set the threshold statically to
	  64 frames
 wallclk has 24Mhz clock source 
  snd_hdac_stream_cleanup - cleanup a stream
  @azx_dev: HD-audio core stream to clean up
  snd_hdac_stream_assign - assign a stream for the PCM
  @bus: HD-audio core bus
  @substream: PCM substream to assign
  Look for an unused stream for the given PCM substream, assign it
  and return the stream object.  If no stream is free, returns NULL.
  The function tries to keep using the same stream object when it's used
  beforehand.  Also, when bus->reverse_assign flag is set, the last free
  or matching entry is returned.  This is needed for some strange codecs.
 make a non-zero unique key for the substream 
  snd_hdac_stream_release - release the assigned stream
  @azx_dev: HD-audio core stream to release
  Release the stream that has been assigned by snd_hdac_stream_assign().
  snd_hdac_get_stream - return hdac_stream based on stream_tag and
  direction
  @bus: HD-audio core bus
  @dir: direction for the stream to be found
  @stream_tag: stream tag for stream to be found
  set up a BDL entry
 program the address field of the BDL entry 
 program the size field of the BDL entry 
 one BDLE cannot cross 4K boundary on CTHDA chips 
		 program the IOC to enable interrupt
		  only when the whole fragment is processed
  snd_hdac_stream_setup_periods - set up BDL entries
  @azx_dev: HD-audio core stream to set up
  Set up the buffer descriptor table of the given stream based on the
  period and buffer sizes of the assigned PCM substream.
 reset BDL address 
 program the initial BDL entries 
  snd_hdac_stream_set_params - set stream parameters
  @azx_dev: HD-audio core stream for which parameters are to be set
  @format_val: format value parameter
  Setup the HD-audio core stream parameters from substream of the stream
  and passed format value
	
	  Converting from 24 MHz to ns means applying a 1253 factor.
	  To avoid any saturation issues in intermediate operations,
	  the 125 factor is applied first. The division is applied
	  last after reading the timecounter value.
	  Applying the 13 factor as part of the multiplication
	  requires at least 20 bits for a decent precision, however
	  overflows occur after about 4 hours or less, not a option.
 saturation after 195 years 
 audio time is elapsed time since trigger 
		
		  force timecounter to use predefined value,
		  used for synchronized starts
  snd_hdac_stream_timecounter_init - initialize time counter
  @azx_dev: HD-audio core stream (master stream)
  @streams: bit flags of streams to set up
  Initializes the time counter of streams marked by the bit flags (each
  bit corresponds to the stream index).
  The trigger timestamp of PCM substream assigned to the given stream is
  updated accordingly, too.
  snd_hdac_stream_sync_trigger - turn onoff stream sync register
  @azx_dev: HD-audio core stream (master stream)
  @set: true = set, false = clear
  @streams: bit flags of streams to sync
  @reg: the stream sync register address
  snd_hdac_stream_sync - sync with startstop trigger operation
  @azx_dev: HD-audio core stream (master stream)
  @start: true = start, false = stop
  @streams: bit flags of streams to sync
  For @start = true, wait until all FIFOs get ready.
  For @start = false, wait until all RUN bits are cleared.
 check FIFO gets ready 
 check RUN bit is cleared 
					
					  Perform stream reset if DMA RUN
					  bit not cleared within given timeout
  snd_hdac_dsp_prepare - prepare for DSP loading
  @azx_dev: HD-audio core stream used for DSP loading
  @format: HD-audio stream format
  @byte_size: data chunk byte size
  @bufp: allocated buffer
  Allocate the buffer for the given size and set up the given stream for
  DSP loading.  Returns the stream tag (>= 0), or a negative error code.
 reset BDL address 
  snd_hdac_dsp_trigger - start  stop DSP loading
  @azx_dev: HD-audio core stream used for DSP loading
  @start: trigger start or stop
  snd_hdac_dsp_cleanup - clean up the stream from DSP loading to normal
  @azx_dev: HD-audio core stream used for DSP loading
  @dmab: buffer used by DSP loading
 reset BDL address 
 CONFIG_SND_HDA_DSP_LOADER 
 SPDX-License-Identifier: GPL-2.0-only
  HD-audio codec core device
  snd_hdac_device_init - initialize the HD-audio codec base device
  @codec: device to initialize
  @bus: but to attach
  @name: device name string
  @addr: codec address
  Returns zero for success or a negative error code.
  This function increments the runtime PM counter and marks it active.
  The caller needs to turn it off appropriately later.
  The caller needs to set the device's release op properly by itself.
 fill parameters 
		 read again, hopefully the access method was corrected
		  in the last read...
 reread ssid if not set by parameter 
  snd_hdac_device_exit - clean up the HD-audio codec base device
  @codec: device to clean up
 keep balance of runtime PM child_count in parent device 
  snd_hdac_device_register - register the hd-audio codec base device
  @codec: the device to register
  snd_hdac_device_unregister - unregister the hd-audio codec base device
  @codec: the device to unregister
  snd_hdac_device_set_chip_name - setupdate the codec name
  @codec: the HDAC device
  @name: name string to set
  Returns 0 if the name is set or updated, or a negative error code.
  snd_hdac_codec_modalias - give the module alias name
  @codec: HDAC device
  @buf: string buffer to store
  @size: string buffer size
  Returns the size of string, like snprintf(), or a negative error code.
  snd_hdac_make_cmd - compose a 32bit command word to be sent to the
 	HD-audio controller
  @codec: the codec object
  @nid: NID to encode
  @verb: verb to encode
  @parm: parameter to encode
  Return an encoded command verb or -1 for error.
  snd_hdac_exec_verb - execute an encoded verb
  @codec: the codec object
  @cmd: encoded verb to execute
  @flags: optional flags, pass zero for default
  @res: the pointer to store the result, NULL if running async
  Returns zero if successful, or a negative error code.
  This calls the exec_verb op when set in hdac_codec.  If not,
  call the default snd_hdac_bus_exec_verb().
  snd_hdac_read - execute a verb
  @codec: the codec object
  @nid: NID to execute a verb
  @verb: verb to execute
  @parm: parameter for a verb
  @res: the pointer to store the result, NULL if running async
  Returns zero if successful, or a negative error code.
  _snd_hdac_read_parm - read a parmeter
  @codec: the codec object
  @nid: NID to read a parameter
  @parm: parameter to read
  @res: pointer to store the read value
  This function returns zero or an error unlike snd_hdac_read_parm().
  snd_hdac_read_parm_uncached - read a codec parameter without caching
  @codec: the codec object
  @nid: NID to read a parameter
  @parm: parameter to read
  Returns -1 for error.  If you need to distinguish the error more
  strictly, use snd_hdac_read() directly.
  snd_hdac_override_parm - override read-only parameters
  @codec: the codec object
  @nid: NID for the parameter
  @parm: the parameter to change
  @val: the parameter value to overwrite
  snd_hdac_get_sub_nodes - get start NID and number of subtree nodes
  @codec: the codec object
  @nid: NID to inspect
  @start_id: the pointer to store the starting NID
  Returns the number of subtree nodes or zero if not found.
  This function reads parameters always without caching.
  look for an AFG and MFG nodes
  snd_hdac_refresh_widgets - Reset the widget startend nodes
  @codec: the codec object
	
	  Serialize against multiple threads trying to update the sysfs
	  widgets array.
 return CONNLIST_LEN parameter of the given widget 
  snd_hdac_get_connections - get a widget connection list
  @codec: the codec object
  @nid: NID
  @conn_list: the array to store the results, can be NULL
  @max_conns: the max size of the given array
  Returns the number of connected widgets, zero for no connection, or a
  negative error code.  When the number of elements don't fit with the
  given array size, it returns -ENOSPC.
  When @conn_list is NULL, it just checks the number of connections.
 long form 
 short form 
 no connection 
 single connection 
 multi connection 
 ranges 
 no second chance 
 ranges between the previous and this one 
  snd_hdac_power_up - power up the codec
  @codec: the codec object
  This function calls the runtime PM helper to power up the given codec.
  Unlike snd_hdac_power_up_pm(), you should call this only for the code
  path that isn't included in PM path.  Otherwise it gets stuck.
  Returns zero if successful, or a negative error code.
  snd_hdac_power_down - power down the codec
  @codec: the codec object
  Returns zero if successful, or a negative error code.
  snd_hdac_power_up_pm - power up the codec
  @codec: the codec object
  This function can be called in a recursive code path like init code
  which may be called by PM suspendresume again.  OTOH, if a power-up
  call must wake up the sleeper (e.g. in a kctl callback), use
  snd_hdac_power_up() instead.
  Returns zero if successful, or a negative error code.
 like snd_hdac_power_up_pm(), but only increment the pm count when
  already powered up.  Returns -1 if not powered up, 1 if incremented
  or 0 if unchanged.  Only used in hdac_regmap.c
  snd_hdac_power_down_pm - power down the codec
  @codec: the codec object
  Like snd_hdac_power_up_pm(), this function is used in a recursive
  code path like init code which may be called by PM suspendresume again.
  Returns zero if successful, or a negative error code.
 codec vendor labels 
 terminator 
 store the codec vendor name 
  stream formats
 rate = base  mult  div 
 rate in Hz, ALSA rate bitmask, HDA format value 
 autodetected value used in snd_hda_query_supported_pcm 
 up to bits 10, 384kHZ isn't supported properly 
 not autodetected value 
 terminator 
  snd_hdac_calc_stream_format - calculate the format bitset
  @rate: the sample rate
  @channels: the number of channels
  @format: the PCM format (SNDRV_PCM_FORMAT_XXX)
  @maxbps: the max. bps
  @spdif_ctls: HD-audio SPDIF status bits (0 if irrelevant)
  Calculate the format bitset from the given rate, channels and th PCM format.
  Return zero if invalid.
  snd_hdac_query_supported_pcm - query the supported PCM rates and formats
  @codec: the codec object
  @nid: NID to query
  @ratesp: the pointer to store the detected rate bitflags
  @formatsp: the pointer to store the detected formats
  @bpsp: the pointer to store the detected format widths
  Queries the supported PCM rates and formats.  The NULL @ratesp, @formatsp
  or @bsps argument is ignored.
  Returns 0 if successful, otherwise a negative error code.
 FIXME: CS4206 doesn't work, which is the only codec supporting float 
 should be exclusive 
			 temporary hack: we have still no proper support
			  for the direct AC3 stream...
  snd_hdac_is_supported_format - Check the validity of the format
  @codec: the codec object
  @nid: NID to check
  @format: the HD-audio format value to check
  Check whether the given node supports the format value.
  Returns true if supported, false if not.
 FIXME: check for float32 and AC3? 
  snd_hdac_codec_read - send a command and get the response
  @hdac: the HDAC device
  @nid: NID to send the command
  @flags: optional bit flags
  @verb: the verb to send
  @parm: the parameter for the verb
  Send a single command and read the corresponding response.
  Returns the obtained response value, or -1 for an error.
  snd_hdac_codec_write - send a single command without waiting for response
  @hdac: the HDAC device
  @nid: NID to send the command
  @flags: optional bit flags
  @verb: the verb to send
  @parm: the parameter for the verb
  Send a single command without waiting for response.
  Returns 0 if successful, or a negative error code.
  snd_hdac_check_power_state - check whether the actual power state matches
  with the target state
  @hdac: the HDAC device
  @nid: NID to send the command
  @target_state: target state to check for
  Return true if state matches, false if not
  snd_hdac_sync_power_state - wait until actual power state matches
  with the target state
  @codec: the HDAC device
  @nid: NID to send the command
  @power_state: target power state to wait for
  Return power state or PS_ERROR if codec rejects GET verb.
 wait until the codec reachs to the target state 
 SPDX-License-Identifier: GPL-2.0-only
  generic arrays
  snd_array_new - get a new element from the given array
  @array: the array object
  Get a new element from the given array.  If it exceeds the
  pre-allocated array size, re-allocate the array.
  Returns NULL if allocation failed.
  snd_array_free - free the given array elements
  @array: the array object
 SPDX-License-Identifier: GPL-2.0-or-later
   hdac_i915.c - routines for sync between HD-A core and i915 display driver
  snd_hdac_i915_set_bclk - Reprogram BCLK for HSWBDW
  @bus: HDA core bus
  Intel HSWBDW display HDA controller is in GPU. Both its power and link BCLK
  depends on GPU. Two Extended Mode registers EM4 (M value) and EM5 (N Value)
  are used to convert CDClk (Core Display Clock) to 24MHz BCLK:
  BCLK = CDCLK  M  N
  The values will be lost when the display power well is disabled and need to
  be restored to avoid abnormal playback speed.
  Call this function at initializing and changing power well, as well as
  at ELD notifier for the hotplug.
 only for i915 binding 
 only HSWBDW 
 default CDCLK 450MHz 
 returns true if the devices can be connected for audio 
 directly connected on the same bus 
	
	  on i915 discrete GPUs with embedded HDA audio, the two
	  devices are connected via 2nd level PCI bridge
 check whether intel graphics is present 
  snd_hdac_i915_init - Initialize i915 audio component
  @bus: HDA core bus
  This function is supposed to be used only by a HD-audio controller
  driver that needs the interaction with i915 graphics.
  This function initializes and sets up the audio component to communicate
  with i915 graphics driver.
  Returns zero for success or a negative error code.
 60s timeout 
 SPDX-License-Identifier: GPL-2.0
  sysfs support for HD-audio core device
  Widget tree sysfs
  This is a tree showing the attributes of each widget.  It appears like
  sysbushdaudioC0D0widgets04caps
 call with codec->widget_lock held 
 already created 
 call with codec->widget_lock held 
 call with codec->widget_lock held 
 prune non-existing nodes 
 add new nodes 
 replace with the new tree 
 SPDX-License-Identifier: (GPL-2.0 OR BSD-3-Clause)
 Copyright(c) 2015-2021 Intel Corporation.
  SDW Intel ACPI scan helpers
 from Intel ACPI documentation 
 Find master handle 
 Found controller, find links supported 
	
	  In theory we could check the number of links supported in
	  hardware, but in that step we cannot assume SoundWire IP is
	  powered.
	 
	  In addition, if the BIOS doesn't even provide this
	  'master-count' property then all the inits based on link
	  masks will fail as well.
	 
	  We will check the hardware capabilities in the startup() step
 Check count is within bounds 
 keep going 
	
	  On some Intel platforms, multiple children of the HDAS
	  device can be found, but only one of them is the SoundWire
	  controller. The SNDW device is always exposed with
	  Name(_ADR, 0x40000000), with bits 31..28 representing the
	  SoundWire link so filter accordingly
 keep going 
 device found, stop namespace walk 
  sdw_intel_acpi_scan() - SoundWire Intel init routine
  @parent_handle: ACPI parent handle
  @info: description of what firmwareDSDT tables expose
  This scans the namespace and queries firmware to figure out which
  links to enable. A follow-up use of sdw_intel_probe() and
  sdw_intel_startup() is required for creation of devices and bus
  startup
 SPDX-License-Identifier: GPL-2.0-only
 Copyright (c) 2015-2019 Intel Corporation
 find max number of channels based on format_configuration 
 SPDX-License-Identifier: GPL-2.0-only
  HD-audio core bus driver
  snd_hdac_bus_init - initialize a HD-audio bas bus
  @bus: the pointer to bus object
  @dev: device pointer
  @ops: bus verb operators
  Returns 0 if successful, or a negative error code.
	
	  Default value of '8' is as per the HD audio specification (Rev 1.0a).
	  Following relation is used to derive STRIPE control value.
	   For sample rate <= 48K:
	    { ((num_channels  bits_per_sample)  number of SDOs) >= 8 }
	   For sample rate > 48K:
	    { ((num_channels  bits_per_sample  rate48000) 
	 	number of SDOs) >= 8 }
  snd_hdac_bus_exit - clean up a HD-audio bas bus
  @bus: the pointer to bus object
  snd_hdac_bus_exec_verb - execute a HD-audio verb on the given bus
  @bus: bus object
  @addr: the HDAC device address
  @cmd: HD-audio encoded verb
  @res: pointer to store the response, NULL if performing asynchronously
  Returns 0 if successful, or a negative error code.
  snd_hdac_bus_exec_verb_unlocked - unlocked version
  @bus: bus object
  @addr: the HDAC device address
  @cmd: HD-audio encoded verb
  @res: pointer to store the response, NULL if performing asynchronously
  Returns 0 if successful, or a negative error code.
 process pending verbs 
  snd_hdac_bus_queue_event - add an unsolicited event to queue
  @bus: the BUS
  @res: unsolicited event (lower 32bit of RIRB entry)
  @res_ex: codec addr and flags (upper 32bit or RIRB entry)
  Adds the given event to the queue.  The events are processed in
  the workqueue asynchronously.  Call this function in the interrupt
  hanlder when RIRB receives an unsolicited event.
  process queued unsolicited events
 no unsolicited event? 
  snd_hdac_bus_add_device - Add a codec to bus
  @bus: HDA core bus
  @codec: HDA core device to add
  Adds the given codec to the list in the bus.  The caddr_tbl array
  and codec_powered bits are updated, as well.
  Returns zero if success, or a negative error code.
  snd_hdac_bus_remove_device - Remove a codec from bus
  @bus: HDA core bus
  @codec: HDA core device to remove
 Helpers for aligned readwrite of mmio space, for Tegra 
 CONFIG_SND_HDA_ALIGNED_MMIO 
  tracepoint definitions for HD-audio core drivers
 SPDX-License-Identifier: GPL-2.0-only
  Regmap support for HD-audio verbs
  A virtual register is translated to one or more hda verbs for write,
  vice versa for read.
  A few limitations:
  - Provided for not all verbs but only subset standard non-volatile verbs.
  - For reading, only AC_VERB_GET_ variants can be used.
  - For writing, mapped to the corresponding AC_VERB_SET_ variants,
    so can't handle asymmetric verbs for read and write
 read-only volatile 
 only as SET_UNSOLICITED_ENABLE 
 only for beep control 
 not for volatile read 
	 below are basically writable, but disabled for reducing unnecessary
	  writes at sync
 usually just read 
 managed in PCM code 
 managed in HDMI CA code 
  Stereo amp pseudo register:
  for making easier to handle the stereo volume control, we provide a
  fake register to deal both left and right channels by a single
  (pseudo) register access.  A verb consisting of SET_AMP_GAIN with
  both SET_LEFT and SET_RIGHT bits takes a 16bit value, the lower 8bit
  for the left and the upper 8bit for the right channel.
 read a pseudo stereo amp register (16bit left+right) 
 write a pseudo stereo amp register (16bit left+right) 
 read a pseudo coef register (16bit) 
 LSB 8bit = coef index 
 write a pseudo coef register (16bit) 
 LSB 8bit = coef index 
 special handling for asymmetric reads 
 take only the actual state 
 drop GET bit 
  snd_hdac_regmap_init - Initialize regmap for HDA register accesses
  @codec: the codec object
  Returns zero for success or a negative error code.
  snd_hdac_regmap_exit - Release the regmap from HDA codec
  @codec: the codec object
  snd_hdac_regmap_add_vendor_verb - add a vendor-specific verb to regmap
  @codec: the codec object
  @verb: verb to allow accessing via regmap
  Returns zero for success or a negative error code.
 set GET bit 
  helper functions
 write a pseudo-register value (wo power sequence) 
 a helper macro to call @func_call; retry with power-up if failed 
  snd_hdac_regmap_write_raw - write a pseudo register with power mgmt
  @codec: the codec object
  @reg: pseudo register
  @val: value to write
  Returns zero if successful or a negative error code.
  snd_hdac_regmap_read_raw - read a pseudo register with power mgmt
  @codec: the codec object
  @reg: pseudo register
  @val: pointer to store the read value
  Returns zero if successful or a negative error code.
 Works like snd_hdac_regmap_read_raw(), but this doesn't read from the
  cache but always via hda verbs.
  snd_hdac_regmap_update_raw - update a pseudo register with power mgmt
  @codec: the codec object
  @reg: pseudo register
  @mask: bit mask to update
  @val: value to update
  Returns zero if successful or a negative error code.
  snd_hdac_regmap_update_raw_once - initialize the register value only once
  @codec: the codec object
  @reg: pseudo register
  @mask: bit mask to update
  @val: value to update
  Performs the update of the register bits only once when the register
  hasn't been initialized yet.  Used in HD-audio legacy driver.
  Returns zero if successful or a negative error code
  snd_hdac_regmap_sync - sync out the cached values for PM resume
  @codec: the codec object
 SPDX-License-Identifier: GPL-2.0-only
   hdac-ext-bus.c - HD-audio extended core bus functions.
   Copyright (C) 2014-2015 Intel Corp
   Author: Jeeja KP <jeeja.kp@intel.com>
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  snd_hdac_ext_bus_init - initialize a HD-audio extended bus
  @bus: the pointer to HDAC bus object
  @dev: device pointer
  @ops: bus verb operators
  @ext_ops: operators used for ASoC HDA codec drivers
  Returns 0 if successful, or a negative error code.
	 FIXME:
	  Currently only one bus is supported, if there is device with more
	  buses, bus->idx should be greater than 0, but there needs to be a
	  reliable way to always assign same number.
  snd_hdac_ext_bus_exit - clean up a HD-audio extended bus
  @bus: the pointer to HDAC bus object
  snd_hdac_ext_bus_device_init - initialize the HDA extended codec base device
  @bus: hdac bus to attach to
  @addr: codec address
  @hdev: hdac device to init
  @type: codec type (HDAC_DEV_) to use for this device
  Returns zero for success or a negative error code.
  snd_hdac_ext_bus_device_exit - clean up a HD-audio extended codec base device
  @hdev: hdac device to clean up
  snd_hdac_ext_bus_device_remove - remove HD-audio extended codec base devices
  @bus: the pointer to HDAC bus object
	
	  we need to remove all the codec devices objects created in the
	  snd_hdac_ext_bus_device_init
  snd_hda_ext_driver_register - register a driver for ext hda devices
  @drv: ext hda driver structure
 we use default match 
  snd_hda_ext_driver_unregister - unregister a driver for ext hda devices
  @drv: ext hda driver structure
 SPDX-License-Identifier: GPL-2.0-only
   hdac-ext-controller.c - HD-audio extended controller functions.
   Copyright (C) 2014-2015 Intel Corp
   Author: Jeeja KP <jeeja.kp@intel.com>
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  maximum HDAC capablities we should parse to avoid endless looping:
  currently we have 4 extended caps, so this is future proof for now.
  extend when this limit is seen meeting in real HW
  processing pipe helpers - these helpers are useful for dealing with HDA
  new capability of processing pipelines
  snd_hdac_ext_bus_ppcap_enable - enabledisable processing pipe capability
  @bus: the pointer to HDAC bus object
  @enable: flag to turn onoff the capability
  snd_hdac_ext_bus_ppcap_int_enable - ppcap interrupt enabledisable
  @bus: the pointer to HDAC bus object
  @enable: flag to enabledisable interrupt
  Multilink helpers - these helpers are useful for dealing with HDA
  new multilink capability
  snd_hdac_ext_bus_get_ml_capabilities - get multilink capability
  @bus: the pointer to HDAC bus object
  This will parse all links and read the mlink capabilities and add them
  in hlink_list of extended hdac bus
  Note: this will be freed on bus exit by driver
 since link in On, update the ref 
  snd_hdac_link_free_all- free hdac extended link objects
  @bus: the pointer to HDAC bus object
  snd_hdac_ext_bus_get_link - get link based on codec name
  @bus: the pointer to HDAC bus object
  @codec_name: codec name
  snd_hdac_ext_bus_link_power_up -power up hda link
  @link: HD-audio extended link
  snd_hdac_ext_bus_link_power_down -power down hda link
  @link: HD-audio extended link
  snd_hdac_ext_bus_link_power_up_all -power up all hda link
  @bus: the pointer to HDAC bus object
  snd_hdac_ext_bus_link_power_down_all -power down all hda link
  @bus: the pointer to HDAC bus object
	
	  if we move from 0 to 1, count will be 1 so power up this link
	  as well, also check the dma status and trigger that
		
		  clear the register to invalidate all the output streams
		
		   wait for 521usec for codec to report status
		   HDA spec section 4.3 - Codec Discovery
	
	  if we move from 1 to 0, count will be 0
	  so power down this link as well
		
		  now check if all links are off, if so turn off
		  cmd dma as well
 SPDX-License-Identifier: GPL-2.0-only
   hdac-ext-stream.c - HD-audio extended stream operations.
   Copyright (C) 2015 Intel Corp
   Author: Jeeja KP <jeeja.kp@intel.com>
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  snd_hdac_ext_stream_init - initialize each stream (aka device)
  @bus: HD-audio core bus
  @stream: HD-audio ext core stream object to initialize
  @idx: stream index number
  @direction: stream direction (SNDRV_PCM_STREAM_PLAYBACK or SNDRV_PCM_STREAM_CAPTURE)
  @tag: the tag id to assign
  initialize the stream, if ppcap is enabled then init those and then
  invoke hdac stream initialization routine
  snd_hdac_ext_stream_init_all - create and initialize the stream objects
    for an extended hda bus
  @bus: HD-audio core bus
  @start_idx: start index for streams
  @num_stream: number of streams to initialize
  @dir: direction of streams
  snd_hdac_stream_free_all - free hdac extended stream objects
  @bus: HD-audio core bus
  snd_hdac_ext_stream_decouple - decouple the hdac stream
  @bus: HD-audio core bus
  @stream: HD-audio ext core stream object to initialize
  @decouple: flag to decouple
  snd_hdac_ext_link_stream_start - start a stream
  @stream: HD-audio ext core stream to start
  snd_hdac_ext_link_stream_clear - stop a stream DMA
  @stream: HD-audio ext core stream to stop
  snd_hdac_ext_link_stream_reset - reset a stream
  @stream: HD-audio ext core stream to reset
 waiting for hardware to report that the stream is out of reset 
  snd_hdac_ext_link_stream_setup -  set up the SD for streaming
  @stream: HD-audio ext core stream to set up
  @fmt: stream format
 make sure the run bit is zero for SD 
 program the stream_tag 
 program the stream format 
  snd_hdac_ext_link_set_stream_id - maps stream id to link output
  @link: HD-audio ext link to set up
  @stream: stream id
  snd_hdac_ext_link_clear_stream_id - maps stream id to link output
  @link: HD-audio ext link to set up
  @stream: stream id
 check if decoupled stream and not in use is available 
  snd_hdac_ext_stream_assign - assign a stream for the PCM
  @bus: HD-audio core bus
  @substream: PCM substream to assign
  @type: type of stream (coupled, host or link stream)
  This assigns the stream based on the type (coupledhostlink), for the
  given PCM substream, assigns it and returns the stream object
  coupled: Looks for an unused stream
  host: Looks for an unused decoupled host stream
  link: Looks for an unused decoupled link stream
  If no stream is free, returns NULL. The function tries to keep using
  the same stream object when it's used beforehand.  when a stream is
  decoupled, it becomes a host stream and link stream.
  snd_hdac_ext_stream_release - release the assigned stream
  @stream: HD-audio ext core stream to release
  @type: type of stream (coupled, host or link stream)
  Release the stream that has been assigned by snd_hdac_ext_stream_assign().
  snd_hdac_ext_stream_spbcap_enable - enable SPIB for a stream
  @bus: HD-audio core bus
  @enable: flag to enabledisable SPIB
  @index: stream index for which SPIB need to be enabled
  snd_hdac_ext_stream_set_spib - sets the spib value of a stream
  @bus: HD-audio core bus
  @stream: hdac_ext_stream
  @value: spib value to set
  snd_hdac_ext_stream_get_spbmaxfifo - gets the spib value of a stream
  @bus: HD-audio core bus
  @stream: hdac_ext_stream
  Return maxfifo for the stream
  snd_hdac_ext_stop_streams - stop all stream if running
  @bus: HD-audio core bus
  snd_hdac_ext_stream_drsm_enable - enable DMA resume for a stream
  @bus: HD-audio core bus
  @enable: flag to enabledisable DRSM
  @index: stream index for which DRSM need to be enabled
  snd_hdac_ext_stream_set_dpibr - sets the dpibr value of a stream
  @bus: HD-audio core bus
  @stream: hdac_ext_stream
  @value: dpib value to set
  snd_hdac_ext_stream_set_lpib - sets the lpib value of a stream
  @stream: hdac_ext_stream
  @value: lpib value to set
 SPDX-License-Identifier: GPL-2.0-only
 Hewlett-Packard Harmony audio driver
    This is a driver for the Harmony audio chipset found
    on the LASI ASIC of various early HP PA-RISC workstations.
    Copyright (C) 2004, Kyle McMartin <kyle@{debian.org,parisc-linux.org}>
      Based on the previous Harmony incarnations by,
        Copyright 2000 (c) Linuxcare Canada, Alex deVries
        Copyright 2000-2003 (c) Helge Deller
        Copyright 2001 (c) Matthieu Delahaye
        Copyright 2001 (c) Jean-Christophe Vaugeois
        Copyright 2003 (c) Laurent Canet
        Copyright 2004 (c) Stuart Brady
  Notes:
    - graveyard and silence buffers last for lifetime of
      the driver. playback and capture buffers are allocated
      per _open()_close().
  TODO:
 Index 0-MAX 
 ID for this card 
 bushmaster  flounder 
 712  715 
 pace 
 outfield  coral II 
 PAGE_SIZE 
 MAX_BUFSPAGE_SIZE 
 initialize graveyard buffer 
 initialize silence buffers 
 pre-allocate space for DMA 
 SPDX-License-Identifier: GPL-2.0-only
   linuxsoundarmaaci.c - ARM PrimeCell AACI PL041 driver
   Copyright (C) 2003 Deep Blue Solutions Ltd, All Rights Reserved.
   Documentation: ARM DDI 0173B
  PM support is not complete.  Turn it off.
	
	  Ensure that the slot 12 RX registers are empty.
  P29:
   The recommended use of programming the external codec through slot 1
   and slot 2 data is to use the channels during setup routines and the
   slot register at any other time.  The data written into slot 1, slot 2
   and slot 12 registers is transmitted only when their corresponding
   SI1TxEn, SI2TxEn and SI12TxEn bits are set in the AACI_MAINCR
   register.
	
	  P54: You must ensure that AACI_SL2TX is always written
	  to, if required, before data is written to AACI_SL1TX.
 Initially, wait one frame period 
 And then wait an additional eight frame periods for it to be sent 
  Read an AC'97 register.
	
	  Write the register address to slot 1.
 Initially, wait one frame period 
 And then wait an additional eight frame periods for it to be sent 
 Now wait for the response frame 
 And then wait an additional eight frame periods for data 
  Interrupt support.
 reading 16 bytes at a time 
 writing 16 bytes at a time 
  ALSA support.
	
	  ALSA doesn't support 18-bit or 20-bit packed into 32-bit
	  words.  It also doesn't support 12-bit at all.
 rates are setup from the AC'97 codec 
  We can support two and four channel audio.  Unfortunately
  six channel audio requires a non-standard channel ordering:
    2 -> FL(3), FR(4)
    4 -> FL(3), FR(4), SL(7), SR(8)
    6 -> FL(3), FR(4), SL(7), SR(8), C(6), LFE(9) (required)
         FL(3), FR(4), C(6), SL(7), SR(8), LFE(9) (actual)
  This requires an ALSA configuration file to correct.
 pcms[0] is the our 5.1 PCM instance. 
 Add rule describing channel dependency. 
	
	  ALSA wants the byte-size of the FIFOs.  As we only support
	  16-bit samples, this is twice the FIFO depth irrespective
	  of whether it's in compact mode or not.
  Common ALSA stuff
	
	  This must not be called with the device enabled.
 Channel to slot mask 
 channels is already limited to 2, 4, or 6 by aaci_rule_channels 
	
	  fifo_bytes is the number of bytes we transfer tofrom
	  the FIFO, including padding.  So that's x4.  As we're
	  in compact mode, the FIFO is half the size.
  Playback specific ALSA stuff
 RX Timeout value: bits 28:17 in RXCR 
 overrun and rx interrupt -- half full
 allow changing of sample rate 
 VRA 
 Record select: Mic: 0, Aux: 3, Line: 4 
  Power Management.
 Front PCM 
 PCM in 
 Mic in 
	
	  Assert AACIRESET for 2us
	
	  Give the AC'97 codec more than enough time
	  to wake up. (42us = ~2 frames at 48kHz.)
	
	  Disable AC97 PC Beep input on audio codecs.
 Set MAINCR to allow slot 1 and 2 data IO 
	
	  Enable the channel, but don't assign it to any slots, so
	  it won't empty onto the AC'97 link.
	
	  Re-initialise the AACI after the FIFO depth test, to
	  ensure that the FIFOs are empty.  Unfortunately, merely
	  disabling the channel doesn't clear the FIFO.
	
	  If we hit 4096 entries, we failed.  Go back to the specified
	  fifo depth.
	
	  Playback uses AACI channel 0
	
	  Capture uses AACI channel 0
	
	  Fix: ac97 read back fail errors by reading
	  from any arbitrary aaci register.
	
	  Size the FIFOs (must be multiple of 16).
	  This is the number of entries in the FIFO.
 SPDX-License-Identifier: GPL-2.0-only
	
	  For mysterious reasons (and despite what the manual says)
	  playback samples are lost if the DMA count is not a multiple
	  of the DMA burst size.  Let's add a rule to enforce that.
 SPDX-License-Identifier: GPL-2.0-only
  Based on soundarmpxa2xx-ac97.c and soundsocpxapxa2xx-ac97.c
  which contain:
  Author:	Nicolas Pitre
  Created:	Dec 02, 2004
  Copyright:	MontaVista Software Inc.
  Beware PXA27x bugs:
    o Slot 12 read from modem space will hang controller.
    o CDONE, SDONE interrupt fails after any slot 12 IO.
  We therefore have an hybrid approach for waiting on SDONE (interrupt or
  1 jiffy timeout if interrupt never comes).
 set up primary or secondary codec space 
 start read access across the ac97 link 
 valid data now 
 but we've just started another cycle... 
 set up primary or secondary codec space 
 clear everything but nCRST 
 then assert nCRST 
 warm reset broken on Bulverde, so manually keep AC97 reset high 
 clear everything but nCRST 
 then assert nCRST 
 PXA27x Developers Manual section 13.5.2.2.1 
 Can't use interrupts 
 Hold CLKBPB for 100us 
 clear everything but nCRST 
 then assert nCRST 
 Can't use interrupts on PXA3xx 
		 Although we don't use those we still need to clear them
		   since they tend to spuriously trigger when MMC is used
		
		  This gpio is needed for a work-around to a bug in the ac97
		  controller during warm reset.  The direction and level is set
		  here so that it is an output driven high when switching from
		  AC97_nRESET alt function to generic gpio.
 SPDX-License-Identifier: GPL-2.0-only
  linuxsoundpxa2xx-ac97.c -- AC97 support for the Intel PXA2xx chip.
  Author:	Nicolas Pitre
  Created:	Dec 02, 2004
  Copyright:	MontaVista Software Inc.
 SPDX-License-Identifier: GPL-2.0-or-later
    card-azt2320.c - driver for Aztech Systems AZT2320 based soundcards.
    Copyright (C) 1999-2000 by Massimo Piccioni <dafastidio@libero.it>
    This driver should provide support for most Aztech AZT2320 based cards.
    Several AZT2316 chips are also supportedtested, but autoprobe doesn't
    work: all module option have to be set.
    No docs available for us at Aztech headquarters !!!   Unbelievable ...
    No other help obtained.
    Thanks to Rainer Wiesner <rainer.wiesner@01019freenet.de> for the WSS
    activation method (full-duplex audio!).
 Index 0-MAX 
 ID for this card 
 Enable this card 
 PnP setup 
 PnP setup 
 PnP setup 
 PnP setup 
 Pnp setup 
 Pnp setup 
 PnP setup 
 PnP setup 
 PRO16V 
 Aztech Sound Galaxy 16 
 Packard Bell Sound III 336 AMSP 
 AT3300 
 --- 
 --- 
 end 
 same of snd_sbdsp_command by Jaroslav Kysela 
 SPDX-License-Identifier: GPL-2.0-only
  AdLib FM card driver.
 SPDX-License-Identifier: GPL-2.0-or-later
    card-als100.c - driver for Avance Logic ALS100 based soundcards.
    Copyright (C) 1999-2000 by Massimo Piccioni <dafastidio@libero.it>
    Copyright (C) 1999-2002 by Massimo Piccioni <dafastidio@libero.it>
    Thanks to Pierfrancesco 'qM2' Passerini.
    Generalised for soundcards based on DT-0196 and ALS-007 chips
    by Jonathan Woithe <jwoithe@just42.net>: June 2002.
 Index 0-MAX 
 ID for this card 
 Enable this card 
 PnP setup 
 PnP setup 
 PnP setup 
 PnP setup 
 PnP setup 
 PnP setup 
 PnP setup 
 DT197A30 
 DT0196  ALS-007 
 ALS100 - PRO16PNP 
 ALS110 - MF1000 - Digimate 3D Sound 
 ALS120 
 ALS200 
 ALS200 OEM 
 RTL3000 
 end 
 SPDX-License-Identifier: GPL-2.0-or-later
    Low-level ALSA driver for the ENSONIQ SoundScape
    Copyright (c) by Chris Rankin
    This driver was written in part using information obtained from
    the OSSFree SoundScape driver, written by Hannu Savolainen.
 Soundscape PnP 
 VIVO90 
 end 
 Sequoia S-1000 
 Sequoia S-2000 
  Allocates some kernel memory that we can use for DMA.
  I think this means that the memory has to map to
  contiguous pages of physical memory.
  Release the DMA-able kernel memory ...
  This function writes to the SoundScape's control registers,
  but doesn't do any locking. It's up to the caller to do that.
  This is why this function is "unsafe" ...
  Write to the SoundScape's control registers, and do the
  necessary locking ...
  Read from the SoundScape's control registers, but leave any
  locking to the caller. This is why the function is "unsafe" ...
  Puts the SoundScape into "host" mode, as compared to "MIDI" mode
  Puts the SoundScape into "MIDI" mode, as compared to "host" mode
  Read the SoundScape's host-mode control register, but leave
  any locking issues to the caller ...
  Read the SoundScape's host-mode control register, performing
  a limited amount of busy-waiting if the register isn't ready.
  Also leaves all locking-issues to the caller ...
 while 
  Write to the SoundScape's host-mode control registers, but
  leave any locking issues to the caller ...
  Write to the SoundScape's host-mode control registers, performing
  a limited amount of busy-waiting if the register isn't ready.
  Also leaves all locking-issues to the caller ...
 while 
  Check that the MIDI subsystem is operational. If it isn't,
  then we will hang the computer if we try to use it ...
  NOTE: This check is based upon observation, not documentation.
  This is apparently the standard way to initialise an MPU-401
  Tell the SoundScape to activate the AD1845 chip (I think).
  The AD1845 detection fails if we don't do this, so I
  think that this is a good idea ...
  Tell the SoundScape to begin a DMA transfer using the given channel.
  All locking issues are left to the caller.
  Wait for a DMA transfer to complete. This is a "limited busy-wait",
  and all locking issues are left to the caller.
 while 
  Wait for the On-Board Processor to return its start-up
  acknowledgement sequence. This wait is too long for
  us to perform "busy-waiting", and so we must sleep.
  This in turn means that we must not be holding any
  spinlocks when we call this function.
  Wait for the host to return its start-up acknowledgement
  sequence. This wait is too long for us to perform
  "busy-waiting", and so we must sleep. This in turn means
  that we must not be holding any spinlocks when we call
  this function.
  Upload a byte-stream into the SoundScape using DMA channel A.
	
	  Reset the board ...
	
	  Enable the DMA channels and configure them ...
	
	  Take the board out of reset ...
	
	  Upload the firmware to the SoundScape
	  board through the DMA channel ...
			
			  Don't forget to release this spinlock we're holding
 while 
	
	  Boot the board ... (I think)
	
	  If all has gone well, then the board should acknowledge
	  the new upload and tell us that it has rebooted OK. We
	  give it 5 seconds (max) ...
	
	  NOTE!!! We are NOT holding any spinlocks at this point !!!
  Upload the bootblock(?) into the SoundScape. The only
  purpose of this block of code seems to be to tell
  us which version of the microcode we should be using.
  Upload the microcode into the SoundScape.
  Mixer control for the SoundScape's MIDI device.
	
	  We need to put the board into HOST mode before we
	  can send any volume-changing HOST commands ...
	
	  To successfully change the MIDI volume setting, you seem to
	  have to write a volume command, write the new volume value,
	  and then perform another volume-related command. Perhaps the
	  first command is an "open" and the second command is a "close"?
	
	  Take the board out of HOST mode and back into MIDI mode ...
  The SoundScape can use two IRQs from a possible set of four.
  These IRQs are encoded as bit patterns so that they can be
  written to the control registers.
  Perform certain arcane port-checks to see whether there
  is a SoundScape board lurking behind the given ports.
	
	  The following code is lifted from the original OSS driver,
	  and as I don't have a datasheet I cannot really comment
	  on what it is doing...
 wait for WSS codec 
 wait for WSS codec 
	
	  SoundScape successfully detected!
  ALSA callback function, called when attempting to open the MIDI device.
  Check that the MIDI firmware has been loaded, because we don't want
  to crash the machine. Also check that someone isn't using the hardware
  IOCTL device.
  Initialise an MPU-401 subdevice for MIDI support on the SoundScape.
  Create an AD1845 PCM subdevice on the SoundScape. The AD1845
  is very much like a CS4231, with a few extra bits. We will
  try to support at least some of the extra bits by overriding
  some of the CS4231 callback.
		
		  There are some freak examples of early Soundscape cards
		  with CS4231 instead of AD1848CS4248. Unfortunately, the
		  CS4231 works only in CS4248 compatibility mode on
		  these cards so force it.
			
			  The input clock frequency on the SoundScape must
			  be 14.31818 MHz, because we must set this register
			  to get the playback to sound correct ...
  Create an ALSA soundcard entry for the SoundScape, using
  the given list of port, IRQ and DMA resources.
	
	  Grab IO ports that we will need to probe so that we
	  can detect and control this hardware ...
	
	  Grab one DMA channel ...
	
	  Check that the user didn't pass us garbage data ...
	
	  Tell the on-board devices where their resources are (I think -
	  I can't be sure without a datasheet ... So many magic values!)
	
	  Enable and configure the DMA channels ...
	
	  Enable the master IRQ ...
	
	  We have now enabled the codec chip, and so we should
	  detect the AD1845 device ...
			
			  Initialize mixer
	
	  Make sure we were given ALL of the other parameters.
 FIXME: suspendresume 
	
	  Allow this function to fail quietly if all the ISA PnP
	  devices were configured using module parameters instead.
	
	  Check that we still have room for another sound card ...
	
	  Create a new ALSA sound card entry, in anticipation
	  of detecting our hardware ...
	
	  Identify card model ...
	
	  Read the correct parameters off the ISA PnP bus ...
 CONFIG_PNP 
 SPDX-License-Identifier: GPL-2.0-only
  Driver for C-Media CMI8328-based soundcards, such as AudioExcel AV500
  Copyright (c) 2012 Ondrej Zary
  AudioExcel AV500 card consists of:
   - CMI8328 - main chip (SB Pro emulation, gameport, OPL3, MPU401, CD-ROM)
   - CS4231A - WSS codec
   - Dream SAM9233+GMS950400+RAM+ROM: Wavetable MIDI, connected to MPU401
 IO port is configured by jumpers on the card to one of these 
 CMI8328 configuration registers 
  bit 0:    SB: 0=enabled, 1=disabled
  bit 1:    gameport: 0=disabled, 1=enabled
  bits 2-4: SB IRQ: 001=3, 010=5, 011=7, 100=9, 101=10, 110=11
  bits 5-6: SB DMA: 00=disabled (when SB disabled), 01=DMA0, 10=DMA1, 11=DMA3
  bit 7:    SB port: 0=0x220, 1=0x240
  bits 0-1: CD-ROM mode: 00=disabled, 01=Panasonic, 10=SonyMitsumiWearnes,
			  11=IDE
  bit 2:    MPU401: 0=disabled, 1=enabled
  bits 3-4: MPU401 IRQ: 00=3, 01=5, 10=7, 11=9,
  bits 5-7: MPU401 port: 000=0x300, 001=0x310, 010=0x320, 011=0x330, 100=0x332,
			  101=0x334, 110=0x336
  bits 0-2: CD-ROM IRQ: 000=disabled, 001=3, 010=5, 011=7, 100=9, 101=10,
			 110=11
  bits 3-4: CD-ROM DMA: 00=disabled, 01=DMA0, 10=DMA1, 11=DMA3
  bits 5-7: CD-ROM port: 000=0x300, 001=0x310, 010=0x320, 011=0x330, 100=0x340,
			  101=0x350, 110=0x360, 111=0x370
 yes, value goes to the same port as index 
 CONFIG_PM 
 rename AUX0 switch to CD 
 rename AUX0 volume to CD 
 rename AUX1 switch to Synth 
 rename AUX1 volume to Synth 
 find index of an item in "-1"-ended array 
 the same for long 
 0xff is invalid configuration (but settable - hope it isn't set) 
 the SB disable bit must NEVER EVER be cleared or the WSS dies 
 disable everything first 
 disable CDROM and MPU401 
 disable CDROM IRQ and DMA 
 configure WSS IRQ... 
 ...and DMA... 
 ...and DMA2 
 enable separate capture DMA 
 enable and configure MPU401 
 OPL3 is hardwired to 0x388 and cannot be disabled 
 gameport is hardwired to 0x200 
 Enable gameport 
 disable everything 
 ignore absent devices 
 ignore absent devices 
 SPDX-License-Identifier: GPL-2.0-or-later
   Driver for C-Media's CMI8330 and CMI8329 soundcards.
   Copyright (c) by George Talusan <gstalusan@uwaterloo.ca>
     http:www.undergrad.math.uwaterloo.ca~gstalusa
  NOTES
   The extended registers contain mixer settings which are largely
   untapped for the time being.
   MPU401 and SPDIF are not supported yet.  I don't have the hardware
   to aid in coding and testing, so I won't bother.
   To quickly load the module,
   modprobe -a snd-cmi8330 sbport=0x220 sbirq=5 sbdma8=1
     sbdma16=5 wssport=0x530 wssirq=11 wssdma=0 fmport=0x388
   This card has two mixers and two PCM devices.  I've cheesed it such
   that recording and playback can be done through the same device.
   The driver "magically" routes the capturing to the AD1848 codec,
   and playback to the SB16 codec.  This allows for full-duplex mode
   to some extent.
   The utilities in alsa-utils are aware of both devices, so passing
   the appropriate parameters to amixer and alsactl will give you
   full control over both mixers.
 #define ENABLE_SB_MIXER 
 16 - recording mux (SB-mixer-enabled) 
 17 - mute mux (Mode2) 
 17 - mute mux 
 18 - vol 
 19 - master volume 
 20 - line-in volume 
 21 - cd-in volume 
 22 - wave volume 
 23 - muterec mux 
 24 - wave rec gain 
 25 - line-in rec gain 
 26 - cd-in rec gain 
 sb or wss 
 mixer reset 
 mute and zero volume channels 
 CMI8329 has a device with ID A@@0001, CMI8330 does not 
 allocate SB16 resources 
 On CMI8239, the OPL3 port might be present in SB16 PnP resources 
 Or hardwired 
 allocate MPU-401 resources 
  PCM interface
  since we call the different chip interfaces for playback and capture
  directions, we need a trick.
  - copy the ops for each direction into a local record.
  - replace the open callback with the new one, which replaces the
    substream->private_data with the corresponding chip instance
    and calls again the original open callback of the chip.
 replace the private_data and call the original open callback 
 replace the private_data and call the original open callback 
 SB16 
 AD1848 
 switch on MODE2 
 CONFIG_PNP 
 SPDX-License-Identifier: GPL-2.0-or-later
   Driver for generic ESS AudioDrive ES18xx soundcards
   Copyright (c) by Christian Fischbach <fishbach@pool.informatik.rwth-aachen.de>
   Copyright (c) by Abramo Bagnara <abramo@alsa-project.org>
 GENERAL NOTES:
  BUGS:
  - There are pops (we can't delay in trigger function, cause midlevel 
    often need to trigger down and then up very quickly).
    Any ideas?
  - Support for 16 bit DMA seems to be broken. I've no hardware to tune it.
  ES1868  NOTES:
  - The chip has one half duplex pcm (with very limited full duplex support).
  - Duplex stereophonic sound is impossible.
  - Record and playback must share the same frequency rate.
  - The driver use dma2 for playback and dma1 for capture.
  ES1869 NOTES:
  - there are a first full duplex pcm and a second playback only pcm
    (incompatible with first pcm capture)
  - there is support for the capture volume and ESS Spatializer 3D effect.
  - contrarily to some pages in DS_1869.PDF the rates can be set
    independently.
  - Zoom Video is implemented by sharing the FM DAC, thus the user can
    have either FM playback or Video playback but not both simultaneously.
    The Video Playback Switch mixer control toggles this choice.
  BUGS:
  - There is a major trouble I noted:
    using both channel for playback stereo 16 bit samples at 44100 Hz
    the second pcm (Audio1) DMA slows down irregularly and sound is garbled.
    The same happens using Audio1 for captureing.
    The Windows driver does not suffer of this (although it use Audio1
    only for captureing). I'm unable to discover why.
  ES1879 NOTES:
  - When Zoom Video is enabled (reg 0x71 bit 6 toggled on) the PCM playback
    seems to be effected (speaker_test plays a lower frequency). Can't find
    anything in the datasheet to account for this, so a Video Playback Switch
    control has been included to allow ZV to be enabled only when necessary.
    Then again on at least one test system the 0x71 bit 6 enable bit is not 
    needed for ZV, so maybe the datasheet is entirely wrong here.
 port of ESS chip 
 Control port of ESS chip 
 IRQ number of ESS chip 
 DMA1 
 DMA2 
 version of ESS chip 
 Chip capabilities 
 volume level of audio2 
 active channel mask 
 Has two useable PCM 
 Has 3D Spatializer 
 Has record mixer 
 Has mono duplex only 
 Playback and record must share the same rate 
 More precise rate setting 
 AuxB mixer control 
 Has separate hardware volume mixer controls
 Mono_in mixer control 
 I2S mixer control 
 Record source can be muted 
 Has control ports 
 GPO0,1 controlled by PM port 
 Power Management 
 Lowlevel 
 Return old value 
 Return old value 
 set filter register 
		
		  Comment from kernel oss driver:
		  FKS: fascinating: 0x72 doesn't seem to work.
 Transfer Count Reload 
 Set format 
 Set DMA controller 
 Start DMA 
 Avoid pops 
 Restore Audio 2 volume 
 Enable PCM output 
 Stop DMA 
 Set Audio 2 volume to 0 
 Disable PCM output 
 Set stereomono 
 Transfer Count Reload 
 Set format 
 Set DMA controller 
 Start DMA 
 Stop DMA 
 Set stereomono 
 Transfer Count Reload 
 Set format 
 Set DMA controller 
 Start DMA 
 Avoid pops 
 Enable Audio 1 
 Stop DMA 
 Avoid pops 
 Disable Audio 1 
 Read Interrupt status 
 Read Interrupt status 
 Audio 1 & Audio 2 
 ack interrupt 
 ok.. capture is active 
 ok.. playback2 is active 
 ack interrupt 
 MPU 
 Hardware volume 
 ack interrupt 
   MIXER part
 Record source mux routines:
  Depending on the chipset this mux switches between 4, 5, or 8 possible inputs.
  bit table for the 45 source mux:
  reg 1C:
   b2 b1 b0   muxSource
    x  0  x   microphone
    0  1  x   CD
    1  1  0   line
    1  1  1   mixer
  if it's "mixer" and it's a 5 source mux chipset then reg 7A bit 3 determines
  either the play mixer or the capture mixer.
  "map4Source" translates from source number to reg bit pattern
  "invMap4Source" translates from reg bit pattern to source number
 DS somewhat contradictory for 1869: could be 5 or 8 
 5 source chips 
 4 source chips 
 8 source chips 
 Mixer controls
  These arrays contain setup data for mixer controls.
  The controls that are universal to all chipsets are fully initialized
  here.
  The chipset specific mixer controls
	 No need for spinlocks, this function is used only in
 enable extended mode 
 Reset mixer registers 
 Audio 1 DMA demand mode (4 bytesrequest) 
 Hardware volume IRQ 
 FM IO 
 MPU-401 IO 
 MPU-401 IRQ 
 Audio1 IRQ 
 Audio2 IRQ 
 Audio1 DMA 
 Audio2 DMA 
 Enable Audio 1 IRQ 
 Enable Audio 2 IRQ 
 Enable Audio 1 DMA 
 Enable MPU and hardware volume interrupt 
 Enable ESS wavetable input 
 Enable and set Audio 1 IRQ 
 Enable and set Audio 1 DMA 
 Set Audio 2 DMA 
		 Enable Audio 2 IRQ and DMA
 Enable and set hardware volume interrupt 
			 MPU401 share irq with audio
			   Joystick enabled
		 Change behaviour of register A1
		   4x oversampling
 Enable DMA FIFO 
 Set spatializer parameters to recommended values 
 Flip the "enable I2S" bits for those chipsets that need it 
Leaving I2S enabled on the 1879 screws up the PCM playback (rate effected somehow)
so a Switch control has been added to toggle this 0x71 bit onoff:
snd_es18xx_mixer_bits(chip, 0x71, 0x40, 0x40);
 Note: we fall through on purpose here. 
 Mute input source 
 Enable PCM output 
 reset 
 If has Hardware volume 
 If has Audio2 
 If has volume count 
 global setup 
 Power Management support functions 
 power down 
 restore PM register, we won't wake till (not 0x07) io activity though 
 CONFIG_PM 
	 finish initializing other chipset specific controls
 Card level 
 Index 0-MAX 
 ID for this card 
 Enable this card 
 0x220,0x240,0x260,0x280 
 5,7,9,10 
 0,1,3 
 0,1,3 
 end 
 PnP main device initialization 
 ok. hack using Vendor-Defined Card-Level registers 
 skip csn and logdev initialization - already done in isapnp_configure 
 Hardware Volume IRQ Number 
 MPU-401 IRQ Number 
 second IRQ 
 ESS 1868 (integrated on Compaq dual P-Pro motherboard and Genius 18PnP 3D) 
 ESS 1868 (integrated on Maxisound Cards) 
 ESS 1868 (integrated on Maxisound Cards) 
 ESS ES1869 Plug and Play AudioDrive 
 ESS 1869 
 ESS 1878 
 ESS 1879 
 --- 
 end 
 Control port initialization 
 CONFIG_PNP 
 we have another procedure - card 
 CONFIG_PNP 
 SPDX-License-Identifier: GPL-2.0-or-later
   Driver for Yamaha OPL3-SA[2,3] soundcards
   Copyright (c) by Jaroslav Kysela <perex@perex.cz>
 Index 0-MAX 
 ID for this card 
 Enable this card 
 0xf86,0x370,0x100 
 0x220,0x240,0x260 
 0x530,0xe80,0xf40,0x604 
 0x388 
 0x330,0x300 
 0,1,3,5,9,11,12,15 
 1,3,5,6,7 
 1,3,5,6,7 
 0,1,2,3  
 control ports 
 opl3sa3 only 
 power management bits 
 2 or 3 
 control port 
 control port resource 
 SL added 
 Gateway Solo 2500 
 end 
 Yamaha YMF719E-S (Genius Sound Maker 3DX) 
 Yamaha OPL3-SA3 (integrated on Intel's Pentium II AL440LX motherboard) 
 Yamaha OPL3-SA2 
 Yamaha OPL3-SA2 
 NeoMagic MagicWave 3DX 
 NeoMagic MagicWave 3D 
 --- 
 end 
 CONFIG_PNP 
 read control port (wo spinlock) 
 password 
 register 
 read control port (with spinlock) 
 write control port (wo spinlock) 
 password 
 register 
 write control port (with spinlock) 
	
	snd_printk(KERN_DEBUG "REG 0A = 0x%x\n",
		   snd_opl3sa2_read(chip, 0x0a));
 YMF711 
 0x02 - standard 
 0x03 - YM715B 
 0x04 - YM719 - OPL-SA4? 
 0x05 - OPL3-SA3 - Libretto 100 
 0x07 - unknown - Neomagic MagicWave 3D 
 try if the MIC register is accessible 
 initialization 
 Power Management - full on 
 ymode is bits 4&5 (of 0 to 7) on all but opl3sa2 versions 
 default for opl3sa2 versions 
 Interrupt Channel Configuration - IRQ A = OPL3 + MPU + WSS 
 DMA Configuration - DMA A = WSS-R + WSS-P 
 DMA Configuration - DMA B = WSS-R, DMA A = WSS-P 
 Miscellaneous - default 
 Digital Block Partial Power Down - default 
 Analog Block Partial Power Down - default 
 TI,CI,PI 
 hardware volume change 
 reading from Master Lch register at 0x07 clears this bit 
 reassign AUX0 to CD 
 reassign AUX1 to FM 
 add OPL3SA2 controls 
 Power Management support functions 
 power down 
 power up 
 restore registers 
 restore wss 
 CONFIG_PM 
 CONFIG_PNP 
 initialise this card from supplied (or default) parameter 
 we have another procedure - card 
 CONFIG_PNP 
 SPDX-License-Identifier: GPL-2.0-or-later
   Driver for Gallant SC-6000 soundcard. This card is also known as
   Audio Excel DSP 16 or Zoltrix AV302.
   These cards use CompuMedia ASC-9308 chip + AD1848 codec.
   SC-6600 and SC-7000 cards are also supported. They are based on
   CompuMedia ASC-9408 chip and CS4231 codec.
   Copyright (C) 2007 Krzysztof Helt <krzysztof.h1@wp.pl>
   I don't have documentation for this card. I used the driver
   for OSSFree included in the kernel source as reference.
 Index 0-MAX 
 ID for this card 
 Enable this card 
 0x220, 0x240 
 5, 7, 9, 10, 11 
 0x530, 0xe80 
 0x300, 0x310, 0x320, 0x330 
 5, 7, 9, 10, 0 
 0, 1, 3 
  Commands of SC6000's DSP (SBPRO+special).
  Some of them are COMMAND_xx, in the future they may change.
 Set M&I&DRQ mask (the real config)	
					
 Read Hardware Config (IO base etc)	
					
					
					
					
					
 Unknown command 			
 Enable Microsoft Sound System mode	
					
 Get DSP Version			
 Get DSP Copyright			
  Offsets of SC6000 DSP IO ports. The offset is added to base IO port
  to have the actual IO port.
  Register permissions are:
  (wo) == Write Only
  (ro) == Read  Only
  (w-) == Write
  (r-) == Read
 offset of DSP RESET		(wo) 
 offset of DSP READ		(ro) 
 offset of DSP WRITE		(w-) 
 offset of DSP COMMAND	(w-) 
 offset of DSP STATUS		(r-) 
 offset of DSP DATA AVAILABLE	(ro) 
 hardware dependent functions 
  sc6000_irq_to_softcfg - Decode irq number into cfg code.
  sc6000_dma_to_softcfg - Decode dma number into cfg code.
  sc6000_mpu_irq_to_softcfg - Decode MPU-401 irq number into cfg code.
		
		  DSP ready to receive data if bit 7 of val == 0
	
	  If no more data available, return to the caller, no error if len>0.
	  We have no other way to know when the string is finished.
 detection and initialization 
 always set 
 enable WSS system 
 disable IDE 
	
	  My SC-6000 card return "SC-6000" in DSPCopyright, so
	  if we have something different, we have to be warned.
 set configuration 
 reassign AUX0 to FM 
 reassign AUX1 to CD 
 to make it marked as used 
 FIXME: suspendresume 
 SPDX-License-Identifier: GPL-2.0-or-later
    ALSA soundcard driver for Miro miroSOUND PCM1 pro
                                   miroSOUND PCM12
                                   miroSOUND PCM20 Radio
    Copyright (C) 2004-2005 Martin Langer <martin-langer@gmx.de>
    Based on OSS ACI and ALSA OPTi9xx drivers
 Index 0-MAX 
 ID for this card 
 0x530,0xe80,0xf40,0x604 
 0x300,0x310,0x320,0x330 
 0x388 
 5,7,9,10,11 
 5,7,9,10 
 0,1,3 
 0,1,3 
 Enable ISA PnP detection 
 PCM20 and PCM12 in PnP mode 
 CONFIG_PNP 
   ACI control
   MIXER part
		 
		   OSS says it's not readable with versions < 176.
		   But it doesn't work on my card,
		   which is a PCM12 with aci_version = 176.
 equalizer elements 
 non-equalizer elements 
 equalizer elements 
 non-equalizer elements 
 equalizer elements 
 non-equalizer elements 
 Equalizer with seven bands (only PCM20) 
 enable WSS on PCM1 
 enable IDE port 
 set common aci values 
 PCM1PCM12 with power-amp and Line 2 
 PCM12PCM20 with mic-preamp 
 PCM20 with radio and 7 band equalizer 
 PnP resource gives the least 10 bits 
   Proc Interface
 miroSOUND PCM1 pro, early PCM12 
 miroSOUND PCM12, PCM12 (Rev. E), PCM12 pnp 
 miroSOUND PCM20 radio 
   Init
 OPL4 
 untested init commands for OPTi929 
 PnP resource says it decodes only 10 bits of address 
 get ACI port from OPTi9xx MC 4 
 force ACI into a known state 
 init proc interface 
 It looks like a miro sound card. 
 FIXME: suspendresume 
	
	  The MC(0) is never accessed and the miroSOUND PCM20 card does not
	  include it in the PnP resource range. OPTI93x include it.
 only miroSOUND PCM20 and PCM12 == OPTi924 
 SPDX-License-Identifier: GPL-2.0-or-later
    card-opti92x-ad1848.c - driver for OPTi 82c92x based soundcards.
    Copyright (C) 1998-2000 by Massimo Piccioni <dafastidio@libero.it>
    Part of this code was developed at the Italian Ministry of Air Defence,
    Sixth Division (oh, che pace ...), Rome.
    Thanks to Maria Grazia Pollarini, Salvatore Vassallo.
 OPTi93X 
 CS4231 
 CS4231 
 OPTi93X 
 Index 0-MAX 
 ID for this card 
static bool enable = SNDRV_DEFAULT_ENABLE1;	 Enable this card 
 Enable ISA PnP detection 
 0x530,0xe80,0xf40,0x604 
 0x300,0x310,0x320,0x330 
 0x388 
 5,7,9,10,11 
 5,7,9,10 
 0,1,3 
 0,1,3 
 CS4231 || OPTi93X 
module_param(enable, bool, 0444);
MODULE_PARM_DESC(enable, "Enable opti9xx soundcard.");
 CS4231 || OPTi93X 
 OPTi93X 
 OPTi93X 
 OPTi 82C924 
 OPTi 82C925 
 OPTi 82C9313 
 OPTi93X 
 CONFIG_PNP 
 PnP resource gives the least 10 bits 
 CONFIG_PNP 
 OPTi93X 
 OPTi93X 
 OPTi93X 
 OPTi93X 
 OPTi93X 
 OPTi93X 
 opti 929 mode (?), OPL3 clock output, audio enable 
 enable wave audio 
 enable WSS mode 
 OPL3 FM synthesis 
 disable Sound Blaster IRQ and DMA 
 cs42314248 fix enabled 
 cs42314248 fix disabled 
 CS4231 
		
		snd_opti9xx_write_mask(chip, OPTi9XX_MC_REG(3), 0xa2, 0xae);
 CS4231 
 OPTi93X 
 disable 3D sound (set GPIO1 as output, low) 
		
		  The BTC 1817DW has QS1000 wavetable which is connected
		  to the serial digital input of the OPTI931.
		 
		  This bit sets OPTI931 to automaticaly select FM
		  or digital input signal.
 OPTi93X 
 PnP resource says it decodes only 10 bits of address 
#ifdef OPTi93X
#endif	 OPTi93X 
 CS4231 || OPTi93X 
 OPTi93X 
 OPTi93X 
 reassign AUX0 switch to CD 
 reassign AUX1 switch to FM 
 remove AUX1 volume 
 Replace WSS volume controls with OPTi93x volume controls 
 OPTi93X 
 OPTi93X 
 OPTi93X 
	 adjust mc_indir_index - some cards report it at 0xe?d,
	
	  The MC(0) is never accessed and card does not
	  include it in the PnP resource range. OPTI93x include it.
 OPTi93X 
 CS4231 || OPTi93X 
 CONFIG_PNP 
 CS4231 || OPTi93X 
 assume we have an OPL4 
 no luck, use OPL3 instead 
 !OPTi93X 
 OPTi93X 
 CS4231 || OPTi93X 
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (c) by Jaroslav Kysela <perex@perex.cz>
   Routines for control of ESS ES1688688488 chip
 Read a byte from an extended mode register of ES1688 
 valid only for ESS chips, SB -> 1 
 enable extended mode 
	
	   initialization sequence
 Some ESS1688 cards need this 
 ENABLE1 
 ENABLE1 
 ENABLE1 
 ENABLE2 
 ENABLE1 
 ENABLE2 
 ENABLE1 
 ENABLE1 
 ENABLE2 
 ENABLE1 
 ENABLE0 
 return identification 
 probably SB 
 disable IRQ 
 disable DMA 
 enable joystick, but disable OPL3 
 ok.. setup MPU-401 port and joystick and OPL3 
 enable joystick, but disable OPL3 
 --- 
 enable only DMA counter interrupt 
 extended mode DMA enable 
 disable all DMA 
 disable IRQ 
 disable DMA 
 set filter register 
 write result to hardware 
 something is wrong 
 auto init DMA mode 
 demand mode (4 bytesrequest) 
 8. bit mono 
 16. bit mono 
 8. bit stereo 
 16. bit stereo 
 --- 
 auto init DMA mode 
 demand mode (4 bytesrequest) 
 8. bit mono 
 16. bit mono 
 8. bit stereo 
 16. bit stereo 
 --- 
 ok.. playback is active 
 ok.. capture is active 
 ack interrupt 
 Register device 
   MIXER part
 SPDX-License-Identifier: GPL-2.0-or-later
   Driver for generic ESS AudioDrive ESx688 soundcards
   Copyright (c) by Jaroslav Kysela <perex@perex.cz>
 Index 0-MAX 
 ID for this card 
 Enable this card 
 0x220,0x240,0x260 
 Usually 0x388 
 5,7,9,10 
 5,7,9,10 
 0,1,3 
 share the same port 
 FIXME 
 end 
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (c) by Jaroslav Kysela <perex@perex.cz>
   Routines for control of CS4231(A)CS4232InterWave & compatible chips
   Bugs:
      - sometimes record brokes playback with WSS portion of
        Yamaha OPL3-SA3 chip
      - CS4231 (GUS MAX) - still trouble with occasional noises
 			  - broken initialization?
   Some variables
 5510 	0x00 | CS4231_XTAL2,
 6620 	0x0E | CS4231_XTAL2,
 8000 	0x00 | CS4231_XTAL1,
 9600 	0x0E | CS4231_XTAL1,
 11025 	0x02 | CS4231_XTAL2,
 16000 	0x02 | CS4231_XTAL1,
 18900 	0x04 | CS4231_XTAL2,
 22050 	0x06 | CS4231_XTAL2,
 27042 	0x04 | CS4231_XTAL1,
 32000 	0x06 | CS4231_XTAL1,
 33075 	0x0C | CS4231_XTAL2,
 37800 	0x08 | CS4231_XTAL2,
 44100 	0x0A | CS4231_XTAL2,
 48000 	0x0C | CS4231_XTAL1
 0000 - lic 
 0101 - ric 
 0202 - la1ic 
 0303 - ra1ic 
 0404 - la2ic 
 0505 - ra2ic 
 0606 - loc 
 0707 - roc 
 0808 - pdfr 
 0909 - ic 
 0a10 - pc 
 0b11 - ti 
 0c12 - mi 
 0d13 - lbc 
 0e14 - pbru 
 0f15 - pbrl 
 1016 - afei 
 1117 - afeii 
 1218 - llic 
 1319 - rlic 
 1420 - tlb 
 1521 - thb 
 1622 - la3micreserved 
 1723 - ra3micreserved 
 1824 - afs 
 1925 - lamocversion 
 1a26 - mioc 
 1b27 - ramocreserved 
 1c28 - cdfr 
 1d29 - res4 
 1e30 - cbru 
 1f31 - cbrl 
 0000 - l_mixout_outctrl 
 0101 - r_mixout_outctrl 
 0202 - l_cd_inctrl 
 0303 - r_cd_inctrl 
 0404 - l_a1fm_inctrl 
 0505 - r_a1fm_inctrl 
 0606 - l_dac_inctrl 
 0707 - r_dac_inctrl 
 0808 - ply_dataform_reg 
 0909 - if_conf 
 0a10 - pin_ctrl 
 0b11 - err_init_reg 
 0c12 - id_reg 
 0d13 - reserved 
 0e14 - ply_upcount_reg 
 0f15 - ply_lowcount_reg 
 1016 - reservedl_a1_inctrl 
 1117 - reservedr_a1_inctrl 
 1218 - l_line_inctrl 
 1319 - r_line_inctrl 
 1420 - l_mic_inctrl 
 1521 - r_mic_inctrl 
 1622 - l_out_outctrl 
 1723 - r_out_outctrl 
 1824 - reserved 
 1925 - reserved 
 1a26 - reserved 
 1b27 - reserved 
 1c28 - cap_dataform_reg 
 1d29 - reserved 
 1e30 - cap_upcount_reg 
 1f31 - cap_lowcount_reg 
   Basic IO functions
   CS4231 detection  MCE routines
 huh.. looks like this sequence is proper for CS4231A chip (GUS MAX) 
 end of cleanup sequence 
	
	  Wait for (possible -- during init auto-calibration may not be set)
	  calibration process to start. Needs up to 5 sample periods on AD1848
	  which at the slowest possible rate of 5.5125 kHz means 907 us.
 check condition up to 250 ms 
 check condition up to 100 ms 
   CODEC IO
 snd_BUG();
 rate is same? 
 Fixes audible clicks at least on GUS MAX 
		
		  Program the AD1845 correctly for the playback stream.
		  Note that we do NOT need to toggle the MCE bit because
		  the PLAYBACK_ENABLE bit of the Interface Configuration
		  register is set.
		 
		  NOTE: We seem to need to write to the MSB before the LSB
		        to get the correct sample frequency.
 this seems to help 
 rate is same? 
		
		  Program the AD1845 correctly for the capture stream.
		  Note that we do NOT need to toggle the MCE bit because
		  the PLAYBACK_ENABLE bit of the Interface Configuration
		  register is set.
		 
		  NOTE: We seem to need to write to the MSB before the LSB
		        to get the correct sample frequency.
   Timer interface
 ok. now enable and ack CODEC IRQ 
 clear IRQ 
 clear IRQ 
 disable IRQ 
 clear IRQ 
 clear IRQ 
 now disable record & playback 
 clear IRQ again 
 clear IRQ 
 clear IRQ 
   timer openclose
   ok.. exported functions..
 detect overrange only above 0dB; may be user selectable? 
 pretend it was the only possible irq for AD1848 
 set CS423x MODE 1 
 0x55 & ~0x10 
 RMGE always high on AD1847 
 LRMGE always low on AT2320 
 clear pending IRQ 
 set CS423x MODE 2 
 we have more than 16 registers: check ID 
			
			  on CMI8330, CS4231_VERSION is volume control and
			  can be set to 0
 this is valid value 
 no valid device found 
 unknown CS4231 chip? 
 clear any pendings IRQ 
 enable fine grained frequency selection 
 ok.. fill all registers 
 ok.. try check hardware version for CS4236+ chips 
 CS4235 
 CS4236B 
 CS4237B 
 CS4238B 
 CS4239 
 all things are ok.. 
 hardware limitation of older chipsets 
 hardware bug in InterWave chipset 
 hardware limitation of cheap chips 
 hardware limitation of older chipsets 
 hardware limitation of cheap chips 
 turn it on 
 turn it off 
 lowlevel suspend callback for CS4231 
 lowlevel resume callback for CS4231 
 int timeout; 
 Yamaha needs this to resume properly 
	 The following is a workaround to avoid freeze after resume on TP600E.
	   This is the first half of copy of snd_wss_mce_down(), but doesn't
	   include rescheduling.  -- iwai
 CONFIG_PM 
 reset 
 global setup 
 Power Management 
 global setup 
 Timer initialization 
   MIXER part
 Use only the first 11 entries on AD1848 
 There is no loopback on OPTI93X 
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (c) 1999 by Uros Bizjak <uros@kss-loka.si>
                         Takashi Iwai <tiwai@suse.de>
   SB16ASPAWE32 CSP control
   CSP microcode loader:
    alsa-toolssb16_csp 
  RIFF data format
  prototypes
  Detect CSP chip and create a new instance
 CSP operators 
 operators - only writeioctl 
 create a proc entry 
  free_private for hwdep instance
 ------------------------------ 
  open the device exclusively
  ioctl for hwdep device:
 get information 
 load CSP microcode 
 change CSP running state 
  close the device
 ------------------------------ 
  acquire device
  release device
  load microcode via ioctl: 
  code is user-space pointer
 not required function, try next 
 destroy QSound mixer element 
 Clear all flags 
 load microcode blocks 
 init microcode blocks 
 main microcode block 
 fill in codec header 
 QSound decoder 
 set QSound flag and clear all other mode flags 
 A Law codec 
 Mu Law codec 
 what Creative thinks is IMA ADPCM codec 
 Creative ADPCM codec 
 Text 2 Speech decoder 
 TODO: Text2Speech handling routines 
 Fast Speech 8 codec 
 Fast Speech 10 codec 
 other codecs are unsupported 
 Decouple CSP from IRQ and DMAREQ lines 
 finished loading successfully 
 set LOADED flag 
  unload CSP microcode
 clear supported formats 
 destroy QSound mixer element 
 clear all flags 
  send command sequence to DSP
  set CSP codec parameter
 CSP set codec parameter 
 Parameter value 
 Parameter 
 DSP read? 
  set CSP register
 CSP set register 
 CSP Register 
 value 
  read CSP register
  return < 0 -> error
 CSP read register 
 CSP Register 
 Read DSP value 
  set CSP mode register
 CSP set mode register 
 mode 
  Detect CSP
  return 0 if CSP exists.
 0xfc = ?? 
 0x00 = ? 
 reset DSP after getversion! 
 valid version id 
  get CSP version number
 SB_DSP_!something! 
 get chip version id? 
  check if the CSP version is valid
  download microcode to CSP (microcode should have one "main" block).
 CSP download command 
 Send CSP low byte (size - 1) 
 Send high byte 
 send microcode sequence 
 load from kernel space 
 some codecs (FastSpeech) take some time to initialize 
		
		  Read mixer register SB_DSP4_DMASETUP after loading 'main' code.
		  Start CSP chip if no 16bit DMA channel is set - some kind
		  of autorun or perhaps a bugfix?
 really! 
 c0 = STOP 
 70 = RUN 
  autoload hardware codec if necessary
  return 0 if CSP is loaded and ready to run (p->running != 0)
 if CSP is running or manually loaded then exit 
 autoload microcode only if requested hardware codec is not already loaded 
 Decouple CSP from IRQ and DMAREQ lines 
 clear autoloaded flag 
 clear autoloaded flag 
 set autoloaded flag 
 only 16 bit data 
 HW codecs accept all rates 
  start CSP
 sample type 
 Mute PCM volume 
 c0 = STOP 
 70 = RUN 
 000n 000n    (n = 1 if mono) 
 00dX 00dX    (d = 1 if 8 bit samples) 
 enable QSound decoder 
 set QSound startup value 
 restore PCM volume 
  stop CSP
 Mute PCM volume 
 disable QSound decoder 
 c0 = STOP 
 restore PCM volume 
  pause CSP codec and hold DMA transfer
  restart CSP codec and resume DMA transfer
 ------------------------------ 
  QSound mixer control for PCM
 cancel pending transfer of QSound parameters 
  Transfer qsound parameters to CSP,
  function should be called from interrupt routine
 left channel 
 right channel 
 ------------------------------ 
  proc interface
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (c) by Jaroslav Kysela <perex@perex.cz>
                    Uros Bizjak <uros@kss-loka.si>
   Lowlevel routines for control of Sound Blaster cards
	
	   initialization sequence
 no duplex 
 sb_mixer.c 
  jazz16.c - driver for Media Vision Jazz16 based soundcards.
  Copyright (C) 2009 Krzysztof Helt <krzysztof.h1@wp.pl>
  Based on patches posted by Rask Ingemann Lambertsen and Rene Herman.
  Based on OSS Sound Blaster driver.
  This file is subject to the terms and conditions of the GNU General Public
  License.  See the file COPYING in the main directory of this archive for
  more details.
 Index 0-MAX 
 ID for this card 
 Enable this card 
 just to call snd_sbdsp_commandresetget_byte() 
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (c) by Jaroslav Kysela <perex@perex.cz>
   Routines for control of SoundBlaster cards - MIDI interface
  --
  Sun May  9 22:54:38 BST 1999 George David Morrison <gdm@gedamo.demon.co.uk>
    Fixed typo in snd_sb8dsp_midi_new_device which prevented midi from 
    working.
  Sun May 11 12:34:56 UTC 2003 Clemens Ladisch <clemens@ladisch.de>
    Added full duplex UART mode for DSP version 2.0 and later.
 ack interrupt 
 reset DSP 
 reset DSP 
 reset DSP 
 reset DSP 
 how big is Tx FIFO? 
 Tx FIFO full - try again later 
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (c) by Jaroslav Kysela <perex@perex.cz>
      and (c) 1999 Steve Ratcliffe <steve@parabola.demon.co.uk>
   Copyright (C) 1999-2000 Takashi Iwai <tiwai@suse.de>
   Routines for control of EMU8000 chip
  emu8000 register controls
  The following routines read and write registers on the emu8000.  They
  should always be called via the EMU8000READWRITE macros and never
  directly.  The macros handle the port number and command word.
 Write a word 
 Set register 
 Send data 
 Read a word 
 Set register 
 Read data 
 Write a double word 
 Set register 
 Send low word of data 
 Send high word of data 
 Read a double word 
 Set register 
 Read low word of data 
  Set up  close a channel to be used for DMA.
exported void
 DMA write 
 DMA read 
  detect a card at the given port
 Initialise 
 Check for a recognisable emu8000 
	
	if ((EMU8000_U1_READ(emu) & 0x000f) != 0x000c)
		return -ENODEV;
  intiailize audio channels
 turn off envelope engines 
 reset all other parameters to zero 
  initialize DMA address
  initialization arrays; from ADIP
 send an initialization array
  Taken from the oss driver, not obvious from the doc how this
  is meant to work
  Send initialization arrays to start up, this just follows the
  initialisation sequence in the adip.
 wait for 1024 clocks 
  Size the onboard memory.
  This is written so as not to need arbitrary delays after the write. It
  seems that the only way to do this is to use the one channel and keep
  reallocating between read and write.
 write out a magic number 
 This must really be here and not 2 lines back even 
	
	  Detect first 512 KiB.  If a write succeeds at the beginning of a
	  512 KiB page we assume that the whole page is there.
 discard stale data  
 No RAM 
		 Write a unique data on the test address.
		  if the address is out of range, the data is written on
		  0x200000(=EMU8000_DRAM_OFFSET).  Then the id word is
		  changed by this data.
snd_emu8000_dma_chan(emu, 0, EMU8000_RAM_WRITE);
		
		  read the data on the just written DRAM address
		  if not the same then we have reached the end of ram.
snd_emu8000_dma_chan(emu, 0, EMU8000_RAM_READ);
snd_emu8000_read_wait(emu);
 discard stale data  
 no memory at this address 
		
		  If it is the same it could be that the address just
		  wraps back to the beginning; so check to see if the
		  initial value has been overwritten.
 discard stale data  
 we must have wrapped around 
 Otherwise, it's valid memory. 
 wait until FULL bit in SMAxW register is false 
  Initiailise the FM section.  You have to do this to use sample RAM
  and therefore lose 2 voices.
exported void
	 Initialize the last two channels for DRAM refresh and producing
 31: FM left channel, 0xffffe0-0xffffe8 
 full left 
 32: FM right channel, 0xfffff0-0xfffff8 
 full right 
 this is really odd part.. 
 skew volume & cutoff 
  The main initialization routine.
 reset the last register index 
 initialize hardware configuration 
 disable audio; this seems to reduce a clicking noise a bit.. 
 initialize audio channels 
 initialize DMA 
 initialize init arrays 
	
	  Initialize the FM section of the AWE32, this is needed
	  for DRAM refresh as well
 terminate all voices 
 check DRAM memory size 
 enable audio 
 set equzlier, chorus and reverb modes 
----------------------------------------------------------------
  BassTreble Equalizer
 -12 dB 
  -8 
  -6 
  -4 
  -2 
   0 (HW default) 
  +2 
  +4 
  +6 
  +8 
 +10 
 +12 dB 
 -12 dB 
 +8 (HW default) 
 +12 dB 
  set Emu8000 digital equalizer; from 0 to 11 [-12dB - 12dB]
exported void
----------------------------------------------------------------
  Chorus mode control
  chorus mode parameters
 user can define chorus modes up to 32 
 feedback level (0xE600-0xE6FF) 
 delay (0-0x0DA3) [144100 sec] 
 LFO depth (0xBC00-0xBCFF) 
 right delay (0-0xFFFFFFFF) [125644100 sec] 
 LFO freq LFO freq (0-0xFFFFFFFF) 
 5 parameters for each chorus mode; 3 x 16bit, 2 x 32bit 
 chorus 1 
 chorus 2 
 chorus 3 
 chorus 4 
 feedback 
 flanger 
 short delay 
 short delay + feedback 
exported int
exported void
----------------------------------------------------------------
  Reverb mode control
  reverb mode parameters
 user can define reverb modes up to 32 
 reverb mode settings; write the following 28 data of 16 bit length
    on the corresponding ports in the reverb_cmds array
 room 1 
 room 2 
 room 3 
 hall 1 
 hall 2 
 plate 
 delay 
 panning delay 
exported int
exported void
----------------------------------------------------------------
  mixer interface
  basstreble
  chorusreverb mode
  FM OPL3 chorusreverb depth
  create and attach mixer elements for WaveTable treblebass controls
  initialize and register emu8000 synth device.
  exported stuff
 SPDX-License-Identifier: GPL-2.0-or-later
   Patch routines for the emu8000 (AWE3264)
   Copyright (C) 1999 Steve Ratcliffe
   Copyright (C) 1999-2000 Takashi Iwai <tiwai@suse.de>
  Open up channels.
 reserve all 30 voices for loading 
 assign voice 31 and 32 to ROM 
  Close all dram channels.
  Read a word from userland, taking care of conversions from
  8bit samples etc.
 convert 8bit -> 16bit 
 unsigned -> signed 
  write sample word data
  You should not have to keep resetting the address each time
  as the chip is supposed to step on the next address automatically.
  It mostly does, but during writes of some samples at random it
  completely loses words (every one in 16 roughly but with no
  obvious pattern).
  This is therefore much slower than need be, but is at least
  working.
  Write the sample to EMU800 memory.  This routine is invoked out of
  the generic soundfont routines as a callback.
 be sure loop points start < end 
 compute true data size to be loaded 
snd_printd("EMU8000: out of memory\n");
 not ENOMEM (for compatibility) 
 recalculate address offset 
 dram position (in word) -- mem_offset is byte 
 set the total size (store onto obsolete checksum value) 
 in bytes 
 Set the address to start writing at 
snd_emu8000_init_fm(emu);
 first block - write 48 samples for silence 
		 we may take too long time in this loop.
		  so give controls back to kernel if needed.
 copy reverse loop 
 if no blank loop is attached in the sample, add it 
 add dram offset 
  free a sample block
  sample_reset callback - terminate voices
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (c) by Jaroslav Kysela <perex@perex.cz>
                    Uros Bizjak <uros@kss-loka.si>
   Routines for control of 8-bit SoundBlaster cards and clones
   Please note: I don't have access to old SB8 soundcards.
  --
  Thu Apr 29 20:36:17 BST 1999 George David Morrison <gdm@gedamo.demon.co.uk>
    DSP can't respond to commands whilst in "high speed" mode. Caused 
    glitching during playback. Fixed.
  Wed Jul 12 22:02:55 CEST 2000 Uros Bizjak <uros@kss-loka.si>
    Cleaned up and rewrote lowlevel routines.
 set playback stereo mode 
 Soundblaster hardware programming reference guide, 3-23 
 force interrupt 
 save output filter status and turn it off 
 just use force_mode16 for temporary storate... 
 restore output filter and set hardware to mono mode  
 save input filter status and turn it off 
 just use force_mode16 for temporary storate... 
 restore input filter status 
 set hardware to mono mode 
 ok.. playback is active 
   Initialization part
 sb8_midi.c 
 SPDX-License-Identifier: GPL-2.0-or-later
   Driver for SoundBlaster 1.02.0Pro soundcards and compatible
   Copyright (c) by Jaroslav Kysela <perex@perex.cz>
 Index 0-MAX 
 ID for this card 
 Enable this card 
 0x220,0x240,0x260 
 5,7,9,10 
 1,3 
 used to block FM io region for legacy cards 
	
	  Block the 0x388 port to avoid PnP conflicts.
	  No need to check this value after request_region,
	  as we never do anything with it.
 auto-probe legacy ports 
 SPDX-License-Identifier: GPL-2.0-or-later
   synth callback routines for the emu8000 (AWE3264)
   Copyright (C) 1999 Steve Ratcliffe
   Copyright (C) 1999-2000 Takashi Iwai <tiwai@suse.de>
  prototypes
  Ensure a value is between two points
  macro evaluates its args more than once, so changed to upper-case.
  set up operators
  Terminate a voice
  Find a channel (voice) within the EMU that is not in use or at least
  less in use than other channels.  Always returns a valid pointer
  no matter what.  If there is a real shortage of voices then one
  will be cut. Such is life.
  The channel index (vp->ch) must be initialized in this routine.
  In Emu8k, it is identical with the array index.
 what we are looking for, in order of preference 
 Keeps track of what we are finding 
 XXX MAX_?INT really 
	
	  Go through them all and get a best one to use.
 check if sample is finished playing (non-looping only) 
 not found 
 channel to be silent and idle 
 set pitch offset 
 set envelope parameters 
	 decaysustain parameter for volume envelope is used
 cutoff and volume 
 modulation envelope heights 
 lfo12 delay 
 lfo1 pitch & cutoff shift 
 lfo1 volume & freq 
 lfo2 pitch & freq 
 pan & loop start 
 chorus & loop end (chorus 8bit, MSB) 
 Q & current address (Q 4bit value, MSB) 
 clear unknown registers 
 reset volume 
  Start envelope
 set reverb and pitch target 
  reset voice parameters
  Set the pitch of a possibly playing note.
  Set the volume of a possibly already playing note
  Set pan and loop start address.
 set tremolo (lfo1) volume & frequency 
 set lfo2 pitch & frequency 
 set filterQ 
  set the envelope & LFO parameters to the default values
 set all modvol envelope shape to minimum 
 mod envelope height to zero 
 no delay for LFO1 
 no pitch shift 
 volume to minimum 
  sysex callback
  OSS ioctl callback
 snd_emu8000_init(hw);  
  additional patch keys
 optarg=mode 
 optarg=mode 
  callback routine
 skip header 
 SPDX-License-Identifier: GPL-2.0-or-later
   Driver for SoundBlaster 16AWE32AWE64 soundcards
   Copyright (c) by Jaroslav Kysela <perex@perex.cz>
 Index 0-MAX 
 ID for this card 
 Enable this card 
 0x220,0x240,0x260,0x280 
 0x330,0x300 
 5,7,9,10 
 0,1,3 
 5,6,7 
 used to block FM io region for legacy cards 
 Sound Blaster 16 PnP 
 Sound Blaster 16 PnP 
 Sound Blaster 16 PnP 
 Sound Blaster 16 PnP 
 Sound Blaster 16 PnP 
 Sound Blaster 16 PnP 
 Sound Blaster 16 PnP 
 Sound Blaster 16 PnP 
 Note: This card has also a CTL0051:StereoEnhance device!!! 
 Sound Blaster 16 PnP 
 Sound Blaster Vibra16S 
 Sound Blaster Vibra16C 
 Sound Blaster Vibra16CL - added by ctm@ardi.com 
 Sound Blaster 16 'value' PnP. It says model ct4130 on the pcb, 
 but ct4131 on a sticker on the board.. 
 Sound Blaster Vibra16X 
 Sound Blaster 16 (Virtual PC 2004) 
 SNDRV_SBAWE defined 
 Sound Blaster AWE 32 PnP 
 Sound Blaster AWE 32 PnP 
 Sound Blaster AWE 32 PnP 
 Sound Blaster AWE 32 PnP 
 Sound Blaster AWE 32 PnP 
 Note: This card has also a CTL0051:StereoEnhance device!!! 
 Sound Blaster AWE 32 PnP 
 Note: This card has also a CTL0051:StereoEnhance device!!! 
 Sound Blaster AWE 32 PnP 
 Sound Blaster AWE 32 PnP 
 Sound Blaster AWE 32 PnP 
 Sound Blaster AWE 32 PnP 
 Sound Blaster AWE 32 PnP 
 Sound Blaster AWE 32 PnP 
 Sound Blaster 32 PnP 
 Sound Blaster AWE 64 PnP 
 Sound Blaster AWE 64 PnP Gold 
 Sound Blaster AWE 64 PnP Gold 
 Sound Blaster AWE 64 PnP 
 Sound Blaster AWE 64 PnP 
 Sound Blaster AWE 64 PnP 
 Sound Blaster AWE 64 PnP 
 Sound Blaster AWE 64 PnP 
 Sound Blaster AWE 64 PnP 
 Sound Blaster 16 PnP (AWE) 
 Generic entries 
 SNDRV_SBAWE 
 CONFIG_PNP 
 Audio initialization 
 WaveTable initialization 
 CONFIG_PNP 
 disable 
 CSP chip on SB16ASPAWE32 
 setup Mic AGC 
 non-PnP FM port address is hardwired with base port address 
 block the 0x388 port to avoid PnP conflicts 
 non-PnP AWE port address is hardwired with base port address 
 CONFIG_PNP 
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (c) by Jaroslav Kysela <perex@perex.cz>
   Routines for control of 16-bit SoundBlaster cards and clones
   Note: This is very ugly hardware which uses one 8-bit DMA channel and
         second 16-bit DMA channel. Unfortunately 8-bit DMA channel can't
         transfer 16-bit samples and 16-bit DMA channels can't transfer
         8-bit samples. This make full duplex more complicated than
         can be... People, don't buy these soundcards for full 16-bit
         duplex!!!
   Note: 16-bit wide is assigned to first direction which made request.
         With full duplex - playback is preferred with abstract layer.
   Note: Some chip revisions have hardware bug. Changing capture
         channel from full-duplex 8bit DMA to 16bit DMA will block
         16bit DMA transfers from DSP chip (capture) until 8bit transfer
         to DSP chip (playback) starts. This bug can be avoided with
         "16bit DMA Allocation" setting set to Playback or Capture.
 manually loaded codec 
 Supported runtime PCM format for playback 
 If CSP was successfully acquired 
 QSound decoder is loaded and enabled 
 Only for simple PCM formats 
 If CSP was successfully acquired 
 Acquire CSP and try to autoload hardware codec 
 Unsupported format, release CSP 
 Try to start CSP 
 Failed, release CSP 
 Success, CSP acquired and running 
 manually loaded codec 
 Supported runtime PCM format for capture 
 If CSP was successfully acquired 
 Acquire CSP and try to autoload hardware codec 
 Unsupported format, release CSP 
 Try to start CSP 
 Failed, release CSP 
 Success, CSP acquired and running 
 CSP decoders (QSound excluded) support only 16bit transfers 
 manually loaded codec 
 autoloaded codecs 
 CSP coders support only 16bit transfers 
 manually loaded codec 
 autoloaded codecs 
nop
nop
nop
nop
nop
nop
nop
 next two lines are needed for some types of DSP4 (SB AWE 32 - 4.13) 
 next two lines are needed for some types of DSP4 (SB AWE 32 - 4.13) 
   openclose
 skip if 16 bit DMA was reserved for capture 
 Vibra16X hack 
 DSP v 4.xx can transfer 16bit data through 8bit DMA channel, SBHWPG 2-7 
 skip if 16 bit DMA was reserved for playback 
 Vibra16X hack 
 DSP v 4.xx can transfer 16bit data through 8bit DMA channel, SBHWPG 2-7 
   DMA control interface
   Initialization part
 note: mpu register should be present only on SB16 Vibra soundcards 
 printk(KERN_DEBUG "codec->irq=%i, codec->dma8=%i, codec->dma16=%i\n", chip->irq, chip->dma8, chip->dma16);
 disable MPU 
 SPDX-License-Identifier: GPL-2.0-or-later
  pcm emulation on emu8000 wavetable
   Copyright (C) 2002 Takashi Iwai <tiwai@suse.de>
  define the following if you want to use this pcm with non-interleaved mode
 #define USE_NONINTERLEAVE 
 NOTE: for using the non-interleaved mode with alsa-lib, you have to set
  mmap_emulation flag to 1 in your .asoundrc, such like
 	pcm.emu8k {
 		type plug
 		slave.pcm {
 			type hw
 			card 0
 			device 1
 			mmap_emulation 1
 		}
 	}
  besides, for the time being, the non-interleaved mode doesn't work well on
  alsa-lib...
  open up channels for the simultaneous data transfer and playback
 reserve up to 2 voices for playback 
 reserve 28 voices for loading 
 assign voice 31 and 32 to ROM 
  close all channels
  convert Hz to AWE32 rate offset (see emuxsoundfont.c)
 base = 44100 
  get the current position at the given channel from CCCA register
  timer interrupt handler
  check the current position and update the period if necessary.
 update the current pointer 
 reprogram timer 
 update period 
  open pcm
  creating an instance here
 use timer to update periods.. (specified in msec) 
  calculate pitch target
  set up the voice
 channel to be silent and idle 
 pitch offset 
 set envelope parameters 
	 decaysustain parameter for volume envelope is used
 modulation envelope heights 
 lfo12 delay 
 lfo1 pitch & cutoff shift 
 lfo1 volume & freq 
 lfo2 pitch & freq 
 pan & loop start 
 chorus & loop end (chorus 8bit, MSB) 
 chorus
 Q & current address (Q 4bit value, MSB) 
 filterQ
 clear unknown registers 
  trigger the voice
 cutoff and volume 
 trigger envelope 
 set reverb and pitch target 
 reverb
 start timer 
  stop the voice immediately
 stop timer 
  copy  silence ops
  this macro should be inserted in the copysilence loops
  to reduce the latency.  without this, the system will hang up
  during the whole loop.
 copy one channel block 
 convert to word unit 
 convert to word unit 
 make a channel block silence 
 convert to word unit 
 interleave 
  copy the interleaved data can be done easily by using
  DMA "left" and "right" channels on emu8k engine.
 convert to frames 
 convert to frames 
 convert to frames 
  allocate a memory block
 reallocation - release the old block 
 in word 
 at least dma_bytes must be set for non-interleaved mode 
  free the memory block
 to be sure
 clear loop blanks 
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (c) by Jaroslav Kysela <perex@perex.cz>
   Routines for Sound Blaster mixer control
  Single channel mixer element
  Double channel mixer element
  DT-019x  ALS-007 captureinput switch
 To record the synth on these cards you must record the main.   
 Thus SB_DT019X_CAP_SYNTH == SB_DT019X_CAP_MAIN and would cause 
 duplicate case labels if left uncommented. 
	 case SB_DT019X_CAP_SYNTH:
	 	ucontrol->value.enumerated.item[0] = 3;
	 	break;
  ALS4000 mono recording control switch
  SBPRO input multiplexer
  SB16 input switch
  SB 2.0 specific mixer elements
  SB Pro specific mixer elements
  SB16 specific mixer elements
  DT019x specific mixer elements
	 ALS4000 below has some parts which we might be lacking,
 Includes PC-speaker in high nibble 
  ALS4000 specific mixer elements
	 FIXME: functionality of 3D controls might be swapped, I didn't find
 FIXME: maybe there's actually some standard 3D ctrl name for it?? 
	 FIXME: ALS4000a.pdf mentions BBD (Bucket Brigade Device) time delay,
	  but what ALSA 3D attribute is that actually? "Center", "Depth",
 mixer reset 
 mute and zero volume channels 
 no mixer chip on SB1.x 
 use only the first 16 controls from SB16 
	 please verify in dsheet whether regs to be added
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (c) by Jaroslav Kysela <perex@perex.cz>
      and (c) 1999 Steve Ratcliffe <steve@parabola.demon.co.uk>
   Copyright (C) 1999-2000 Takashi Iwai <tiwai@suse.de>
   Emu8000 synth plug-in routine
----------------------------------------------------------------
  create a new hardware dependent device for Emu8000
 already exists..? 
 number of virmidi ports 
 FIXED 
  free all resources
 no synth was allocated actually 
   INIT part
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (c) by Jaroslav Kysela <perex@perex.cz>
   Routines for control of ICS 2101 chip and "mixer" in GF1 chip
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (c) by Jaroslav Kysela <perex@perex.cz>
   GUS's memory access via proc filesystem
 data are in ROM 
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (c) by Jaroslav Kysela <perex@perex.cz>
   Routines for control of GF1 chip (PCM things)
   InterWave chips supports interleaved DMA, but this feature isn't used in
   this code.
   This code emulates autoinit DMA transfer for playback, recording by GF1
   chip doesn't support autoinit DMA.
 maximum rate 
	
	snd_printk(KERN_DEBUG "block change - offset = 0x%x, count = 0x%x\n",
		   offset, count);
 enable WAVE IRQ 
 enable RAMP IRQ + rollover 
 loop enable 
 disable rollover 
		
		snd_printk(KERN_DEBUG "init: curr=0x%x, begin=0x%x, end=0x%x, "
			   "ctrl=0x%x, ramp=0x%x, rate=0x%x\n",
			   curr, begin, end, voice_ctrl, ramp_ctrl, rate);
 deactivate voice 
 disable IRQ for next voice 
 last block? 
 enable loop 
 enable rollover 
 stop ramp, but leave rollover bit untouched 
 are we active? 
 load real volume - better precision 
	
	printk(KERN_DEBUG
	       "poke block; buf = 0x%x, pos = %i, count = %i, port = 0x%x\n",
	       (int)buf, pos, count, gus->gf1.port);
 limit, to allow IRQ 
 IRQ at end, enable & start 
 disable sampling 
 Sampling Control Register 
 disable sampling 
 Sampling Control Register 
 are we active? 
 load real volume - better precision 
 playback setup 
 SPDX-License-Identifier: GPL-2.0-or-later
   Driver for AMD InterWave soundcard
   Copyright (c) by Jaroslav Kysela <perex@perex.cz>
    19990722		Erik Inge Bolso <knan@mo.himolde.no>
 			 mixer group handlers
 Index 0-MAX 
 ID for this card 
 Enable this card 
 0x210,0x220,0x230,0x240,0x250,0x260 
 0x350,0x360,0x370,0x380 
 2,3,5,9,11,12,15 
 0,1,3,5,6,7 
 0,1,3,5,6,7 
 0 to 31, (0.59V-4.52V or 0.389V-2.98V) 
 Gravis UltraSound Plug & Play 
 STB SoundRage32 
 MED3210 
 Dynasonic Pro 
 This device also have CDC1117:DynaSonix Pro Audio Effects Processor 
 Panasonic PCA761AW Audio Card 
 InterWave STB without TEA6330T 
 InterWave STB with TEA6330T 
 CONFIG_PNP 
 reset GF1 
 release reset 
 ok.. We have an InterWave board 
 IRQ bit is set? 
 000  unsigned char iwave[8];
 008  unsigned char rom_hdr_revision;
 009  unsigned char series_number;
 010  unsigned char series_name[16];
 026  unsigned char date[10];
 036  unsigned short vendor_revision_major;
 038  unsigned short vendor_revision_minor;
 040  unsigned int rom_size;
 044  unsigned char copyright[128];
 172  unsigned char vendor_name[64];
 236  unsigned char rom_description[128];
 364  unsigned char pad[147];
 511  unsigned char csum;
 enhanced mode 
 DRAM IO cycles selected 
 ok.. simple test of memory size 
 ok.. for testing of 0k RAM 
 select ROM 
 first check 
 not valid rom 
 select RAM 
 ok.. some InterWave specific initialization 
 remove mono microphone controls 
 add new master and mic controls 
 reassign AUXA to SYNTHESIZER 
 reassign AUXB to CD 
 Synth & Codec initialization 
 Tone Control initialization 
 CONFIG_PNP 
 FIXME: suspend,resume 
 FIXME: suspend,resume 
 CONFIG_PNP 
 SPDX-License-Identifier: GPL-2.0-or-later
   Routine for IRQ handling from GF1InterWave chip
   Copyright (c) by Jaroslav Kysela <perex@perex.cz>
 snd_printk(KERN_DEBUG "IRQ: status = 0x%x\n", status); 
 multi request 
 mark request 
 voice position IRQ 
 volume ramp IRQ 
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (c) by Jaroslav Kysela <perex@perex.cz>
   DRAM access routines
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (c) by Jaroslav Kysela <perex@perex.cz>
   IO routines for GF1InterWave synthesizer chips
   =======================================================================
   ok.. stop of control registers (wave & ramp) need some special things..
        big UltraClick (tm) elimination...
   =======================================================================
  0  
  0  
 enhanced mode 
 Effect processor 
 LFO enabled? 
  0  
 SPDX-License-Identifier: GPL-2.0-or-later
   Driver for Gravis UltraSound MAX soundcard
   Copyright (c) by Jaroslav Kysela <perex@perex.cz>
 Index 0-MAX 
 ID for this card 
 Enable this card 
 0x220,0x230,0x240,0x250,0x260 
 2,3,5,9,11,12,15 
 1,3,5,6,7 
 1,3,5,6,7 
 0 to 31, (0.59V-4.52V or 0.389V-2.98V) 
 reset GF1 
 release reset 
 IRQ bit is set? 
 init control register 
 reassign AUXA to SYNTHESIZER 
 reassign AUXB to CD 
 reassign Mono Input to MIC 
 FIXME: suspendresume 
 SPDX-License-Identifier: GPL-2.0-or-later
   Driver for Gravis UltraSound Extreme soundcards
   Copyright (c) by Jaroslav Kysela <perex@perex.cz>
 Index 0-MAX 
 ID for this card 
 Enable this card 
 0x220,0x240,0x260 
 0x210,0x220,0x230,0x240,0x250,0x260,0x270 
 0x300,0x310,0x320 
 5,7,9,10 
 5,7,9,10 
 2,3,5,9,11,12,15 
 0,1,3 
 0 to 31, (0.59V-4.52V or 0.389V-2.98V) 
	
	  This is main stuff - enable access to GF1 chip...
	  I'm not sure, if this will work for card which have
	  ES1688 chip in another place than 0x220.
          I used reverse-engineering in DOSEMU. [--jk]
	 
	  ULTRINIT.EXE:
	  0x230 = 0,2,3
	  0x240 = 2,0,1
	  0x250 = 2,0,3
	  0x260 = 2,2,1
 don't change!!! 
 reset GF1 
 release reset 
 reassign AUX to SYNTHESIZER 
 reassign Master Playback Switch to Synth Playback Switch 
 FIXME 
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (c) by Jaroslav Kysela <perex@perex.cz>
   GUS's memory allocation routines  bottom layer
 ok.. shared block 
 I assume that bank address is already aligned.. 
 TODO: remove in the future 
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (c) by Jaroslav Kysela <perex@perex.cz>
   Routines for the GF1 MIDI interface - like UART 6850
 data in Rx FIFO? 
 arm counter to new value 
 framing error 
 try unlock output 
 Tx FIFO free? 
 no other bytes or error 
 disable Tx interrupt 
 reset 
 normal operations 
 input active? 
 clean Rx 
 enable Rx interrupts 
 disable Rx interrupts 
 wait for empty Rx - Tx is probably unlocked 
 Tx FIFO free? 
 enable Tx interrupt 
 SPDX-License-Identifier: GPL-2.0-or-later
   Routines for GF1 DMA control
   Copyright (c) by Jaroslav Kysela <perex@perex.cz>
 align 
 align 
 PCM block have bigger priority than synthesizer one 
 SPDX-License-Identifier: GPL-2.0-or-later
   Driver for Gravis UltraSound Classic soundcard
   Copyright (c) by Jaroslav Kysela <perex@perex.cz>
 Index 0-MAX 
 ID for this card 
 Enable this card 
 0x220,0x230,0x240,0x250,0x260 
 3,5,9,11,12,15 
 1,3,5,6,7 
 1,3,5,6,7 
 0 to 31, (0.59V-4.52V or 0.389V-2.98V) 
 reset GF1 
 release reset 
 FIXME 
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (c) by Jaroslav Kysela <perex@perex.cz>
   ok.. default interrupt handlers...
 DRAM DMA Control Register 
 Timer Control 
 Sampling Control Register 
 DRAM DMA Control Register 
 Sampling Control Register 
 IRQ Source Register 
   put selected GF1 voices to initial stage...
 Voice Control Register = voice stop 
 Volume Ramp Control Register = ramp off 
 Deactivate voice 
 this can't be done in interrupt 
 ramp rate 
 ramp start 
 ramp end 
 ramp down 
   call this function only by start of driver
 reset GF1 
 disable IRQ & DAC 
 huh.. this cleanup took me some time... 
 enhanced mode !!!! 
 initialize LFOs & clear LFOs memory 
 Reset Register = IRQ enable, DAC enable 
 Reset Register = IRQ enable, DAC enable 
 enhanced mode !!!! 
   call this function only by shutdown of driver
 stop all timers 
 stop all voices 
 disable IRQ & DAC 
 SPDX-License-Identifier: GPL-2.0-or-later
   Routines for Gravis UltraSound soundcards - Timers
   Copyright (c) by Jaroslav Kysela <perex@perex.cz>
   GUS have similar timers as AdLib (OPL2OPL3 chips).
   Timer 1 - 80us
 timer 1 count 
 enable timer 1 IRQ 
 timer 2 start 
 disable timer #1 
   Timer 2 - 320us
 timer 2 count 
 enable timer 2 IRQ 
 timer 2 start 
 disable timer #1 
 SPDX-License-Identifier: GPL-2.0-or-later
   Routines for Gravis UltraSound soundcards
   Copyright (c) by Jaroslav Kysela <perex@perex.cz>
 fill register variables for speedup 
 allocate resources 
   Memory detection routine for plain GF1 soundcards
 some memory were detected 
 disable MIC, LINE IN, enable LINE OUT 
 enable LINE IN 
 enable MIC 
 enable latches 
 disable latches 
 standard GUSes doesn't have midi uart trouble 
 gus_io.c 
 gus_reset.c 
 gus_mixer.c 
 gus_pcm.c 
 gus.c 
 gus_irq.c 
 gus_uart.c 
 gus_dram.c 
 gus_volume.c 
 gus_mem.c 
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (c) by Jaroslav Kysela <perex@perex.cz>
 for snd-gus-synth module 
  0  
 The FC table above is a list of pairs. The first number in the pair     
 is the cents index from 0-255 cents, and the second number in the       
 pair is the FC adjustment needed to change the pitch by the indexed     
 number of cents. The table was created for an FC of 32768.              
 The following expression does a linear interpolation against the        
 approximated log curve in the table above, and then scales the number   
 by the FC before the LFO. This calculation also adjusts the output      
 value to produce the appropriate depth for the hardware. The depth      
 is 2  desired FC + 1.                                                  
  0  
 SPDX-License-Identifier: GPL-2.0-or-later
   Generic driver for CS4231 chips
   Copyright (c) by Jaroslav Kysela <perex@perex.cz>
   Originally the CS4232CS4232A driver, modified for use on CS4231 by
   Tugrul Galatali <galatalt@stuy.edu>
 Index 0-MAX 
 ID for this card 
 Enable this card 
 PnP setup 
 PnP setup 
 5,7,9,11,12,15 
 9,11,12,15 
 0,1,3,5,6,7 
 0,1,3,5,6,7 
 SPDX-License-Identifier: GPL-2.0-or-later
   Driver for generic CS4232CS4235CS4236CS4236BCS4237BCS4238BCS4239 chips
   Copyright (c) by Jaroslav Kysela <perex@perex.cz>
 Index 0-MAX 
 ID for this card 
 Enable this card 
 PnP setup 
 PnP setup 
 PnP setup 
 PnP setup 
 PnP setup 
 5,7,9,11,12,15 
 9,11,12,15 
 0,1,3,5,6,7 
 0,1,3,5,6,7 
 CONFIG_PNP 
  PNP BIOS
	 Guillemot Turtlebeach something appears to be cs4232 compatible
 Philips PCA70PS 
 TerraTec Maestro 3296 (CS4232) 
 HP Omnibook 5500 onboard 
 Unnamed CS4236 card (Made in Taiwan) 
 Turtle Beach TBS-2000 (CS4232) 
 Turtle Beach Tropez Plus (CS4232) 
 SIC CrystalWave 32 (CS4232) 
 Netfinity 3000 on-board soundcard 
 Intel Marlin Spike Motherboard - CS4235 
 Intel Marlin Spike Motherboard (#2) - CS4235 
 Unknown Intel mainboard - CS4235 
 Genius Sound Maker 3DJ - CS4237B 
 Digital PC 5000 Onboard - CS4236B 
 some unknown CS4236B 
 Intel PR440FX Onboard sound 
 CS4235 on mainboard without MPU 
 Gateway E1000 Onboard CS4236B 
 HP 6330 Onboard sound 
 Crystal Computer TidalWave128 
 ACER AW37 - CS4235 
 build-in soundcard in EliteGroup P5TX-LA motherboard - CS4237B 
 Crystal 3D - CS4237B 
 Typhoon Soundsystem PnP - CS4236B 
 Crystal CX4235-XQ3 EP - CS4235 
 Crystal Semiconductors CS4237B 
 NewClear 3D - CX4237B-XQ3 
 Dell Optiplex GX1 - CS4236B 
 Dell P410 motherboard - CS4236B 
 Dell Workstation 400 Onboard - CS4236B 
 Turtle Beach Malibu - CS4237B 
 CS4235 - onboard 
 IBM Aptiva 2137 E24 Onboard - CS4237B 
 IBM IntelliStation M Pro motherboard 
 Guillemot MaxiSound 16 PnP - CS4236B 
 Gallant SC-70P 
 Techmakers MF-4236PW 
 TerraTec AudioSystem EWS64XL - CS4236B 
 TerraTec AudioSystem EWS64XL - CS4236B 
 ACER AW37Pro - CS4235 
 ACER AW35Pro - CS4237B 
 CS4235 without MPU401 
 Unknown SiS530 - CS4235 
 IBM IntelliStation M Pro 6898 11U - CS4236B 
 IBM PC 300PL Onboard - CS4236B 
 Some noname CS4236 based card 
 CS4236B 
 CS4236B 
 --- 
 end 
 WSS initialization 
 CTRL initialization 
 MPU initialization 
 disable interrupt 
 WSS initialization 
 CTRL initialization 
 MPU initialization 
 CONFIG_PNP 
 we have another procedure - card 
 prepare second id 
 CONFIG_PNP 
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (c) by Jaroslav Kysela <perex@perex.cz>
   Routines for control of CS42354236B4237B4238B4239 chips
   Note:
      -----
   Bugs:
      -----
   Indirect control registers (CS4236B+)
   C0
      D8: WSS reset (all chips)
   C1 (all chips except CS4236)
      D7-D5: version 
      D4-D0: chip id
              11101 - CS4235
              01011 - CS4236B
              01000 - CS4237B
              01001 - CS4238B
              11110 - CS4239
   C2
      D7-D4: 3D Space (CS4235,CS4237B,CS4238B,CS4239)
      D3-D0: 3D Center (CS4237B); 3D Volume (CS4238B)
   C3
      D7: 3D Enable (CS4237B)
      D6: 3D Mono Enable (CS4237B)
      D5: 3D Serial Output (CS4237B,CS4238B)
      D4: 3D Enable (CS4235,CS4238B,CS4239)
   C4
      D7: consumer serial port enable (CS4237B,CS4238B)
      D6: channels status block reset (CS4237B,CS4238B)
      D5: user bit in sub-frame of digital audio data (CS4237B,CS4238B)
      D4: validity bit in sub-frame of digital audio data (CS4237B,CS4238B)
   C5  lower channel status (digital serial data description) (CS4237B,CS4238B)
      D7-D6: first two bits of category code
      D5: lock
      D4-D3: pre-emphasis (0 = none, 1 = 5015us)
      D2: copycopyright (0 = copy inhibited)
      D1: 0 = digital audio  1 = non-digital audio
   C6  upper channel status (digital serial data description) (CS4237B,CS4238B)
      D7-D6: sample frequency (0 = 44.1kHz)
      D5: generation status (0 = no indication, 1 = originalcommercially precaptureed data)
      D4-D0: category code (upper bits)
   C7  reserved (must write 0)
   C8  wavetable control
      D7: volume control interrupt enable (CS4235,CS4239)
      D6: hardware volume control format (CS4235,CS4239)
      D3: wavetable serial port enable (all chips)
      D2: DSP serial port switch (all chips)
      D1: disable MCLK (all chips)
      D0: force BRESET low (all chips)
 CS4236_LEFT_LINE 		0xff,
 CS4236_RIGHT_LINE 		0xff,
 CS4236_LEFT_MIC 		0xdf,
 CS4236_RIGHT_MIC 		0xdf,
 CS4236_LEFT_MIX_CTRL 	0xe0 | 0x18,
 CS4236_RIGHT_MIX_CTRL 	0xe0,
 CS4236_LEFT_FM 		0xbf,
 CS4236_RIGHT_FM 		0xbf,
 CS4236_LEFT_DSP 		0xbf,
 CS4236_RIGHT_DSP 		0xbf,
 CS4236_RIGHT_LOOPBACK 	0xbf,
 CS4236_DAC_MUTE 		0xe0,
 CS4236_ADC_RATE 		0x01,	
 CS4236_DAC_RATE 		0x01,	
 CS4236_LEFT_MASTER 	0xbf,
 CS4236_RIGHT_MASTER 	0xbf,
 CS4236_LEFT_WAVE 		0xbf,
 CS4236_RIGHT_WAVE 		0xbf
   PCM
 set fast playback format change and clean playback FIFO 
 set fast capture format change and clean capture FIFO 
 why? CS4235 - master left 
 why? CS4235 - master right 
 CONFIG_PM 
  This function does no fail if the chip is not CS4236B or compatible.
  It just an equivalent to the snd_wss_create() then.
	
	  0x8c for C8 is valid for Turtle Beach Malibu - the IEC-958
	  output is working with this setup, other hardware should
	  have different signal paths and this value should be
	  selectable in the future
 initialize extended registers 
 initialize compatible but more featured registers 
   MIXER
 SPDX-License-Identifier: GPL-2.0-or-later
  Linux multisound pinnaclefiji driver for ALSA.
  20020630 Karsten Wiese:
 	for now this is only used to build a pinnacle  fiji driver.
 	the OSS parent of this code is designed to also support
 	the multisound classic via the file msnd_classic.c.
 	to make it easier for some brave heart to implemt classic
 	support in alsa, i left all the MSND_CLASSIC tokens in this file.
 	but for now this untested & undone.
  ripped from linux kernel 2.4.18 by Karsten Wiese.
  the following is a copy of the 2.4.18 OSS FREE file-heading comment:
  Turtle Beach MultiSound Sound Card Driver for Linux
  msnd_pinnacle.c  msnd_classic.c
  -- If MSND_CLASSIC is defined:
      -> driver for Turtle Beach ClassicMontereyTahiti
  -- Else
      -> driver for Turtle Beach PinnacleFiji
  12-3-2000  Modified IO port validation  Steve Sycamore
  Copyright (C) 1998 Andrew Veliath
 Send ack to DSP 
 inb(chip->io + HP_RXL); 
 Evaluate queued DSP messages 
 Send ack to DSP 
 Motorola 56k shared memory base 
 Critical section: bank 1 access 
 Digital audio play queue 
 Digital audio record queue 
 MIDI out queue 
 MIDI in queue 
 DSP -> host message queue 
 Setup some DSP values 
 Unconditionally halt 
  ALSA callback function, called when attempting to open the MIDI device.
 PinnacleFiji Logical Device Configuration 
 Reset devices if told to 
 Index 0-MAX 
 ID for this card 
 Extra Peripheral Configuration (Default: Disable) 
 If we have the digital daugherboard... 
 Extra Peripheral Configuration 
 MSND_CLASSIC 
 MSND_CLASSIC 
 DSP 
 The following are Pinnacle specific 
 MPU 
 IDE 
 Joystick 
 MSND_CLASSIC 
 FIXME: suspend, resume 
	
	  Check that we still have room for another sound card ...
	
	  Create a new ALSA sound card entry, in anticipation
	  of detecting our hardware ...
	
	  Read the correct parameters off the ISA PnP bus ...
 Pinnacle PnP 
 end 
 CONFIG_PNP 
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (c) by Jaroslav Kysela <perex@perex.cz>
   Copyright (c) 2009 by Krzysztof Helt
   Routines for control of MPU-401 in UART mode
   MPU-401 supports UART mode which is not capable generate transmit
   interrupts thus output is done via polling. Also, if irq < 0, then
   input is done also via polling. Do not expect good performance.
 MSNDMIDI_MODE_XXXX 
  inputoutput openclose - protected by open_mutex in rawmidi.c
  trigger input
 The work is in msnd_pinnacle.c, just define MSND_CLASSIC before it. 
 SPDX-License-Identifier: GPL-2.0-or-later
  20020630 Karsten Wiese:
 	removed kernel-version dependencies.
 	ripped from linux kernel 2.4.18 (OSS Implementation) by me.
 	In the OSS Version, this file is compiled to a separate MODULE,
 	that is used by the pinnacle and the classic driver.
 	since there is no classic driver for alsa yet (i dont have a classic
 	& writing one blindfold is difficult) this file's object is statically
 	linked into the pinnacle-driver-module for now.	look for the string
 		"uncomment this to make this a module again"
 	to do guess what.
  the following is a copy of the 2.4.18 OSS FREE file-heading comment:
  msnd.c - Driver Base
  Turtle Beach MultiSound Sound Card Driver for Linux
  Copyright (C) 1998 Andrew Veliath
	interruptible_sleep_on_timeout(
		&chip->writeflush,
size, n, timeout = 3;
 void DAQD; 
 Increment the tail and check for queue wrap 
 Get our digital audio queue struct 
 Get length of data 
	 Read data from the head (unprotected bank 1 access okay
	 unsigned long flags;
 Get our digital audio queue struct 
 Write size of this bank 
 Then advance the tail 
		
		if (protect)
			snd_printd(KERN_INFO "B %X %lX\n",
				   bank_num, xtime.tv_usec);
 Tell the DSP to play the bank 
	
	if (protect)
		snd_printd(KERN_INFO "%lX\n", xtime.tv_usec);
 spin_unlock_irqrestore(&chip->lock, flags); not necessary 
 unsigned long	flags; 
 snd_msnd_init_queue(chip->DARQ, DARQ_DATA_BUFF, DARQ_BUFF_SIZE); 
 Critical section: bank 1 access. this is how the OSS driver does it:
	 dont do this here:
	  snd_msnd_calibrate_adc(chip->play_sample_rate);
 interrupt diagnostic, comment this out later 
 SPDX-License-Identifier: GPL-2.0-or-later
			  msnd_pinnacle_mixer.c  -  description
			     -------------------
    begin		: Fre Jun 7 2002
    copyright 		: (C) 2002 by karsten wiese
    email		: annabellesgarden@yahoo.de
 							      		   
 									   
 Input source 1  (aux1) 
  Recording monitor  
 Recording level 
 Input gain 
 Output gain 
 Digital (input) 1 
	Device mask bits	
 MSND_MASK_IMIX is the default 
 master volume unscaled controls 
 line pot control 
 scaled by IMIX in digital mix 
 mic pot control 
 scaled by IMIX in digital mix 
 master volume 
 aux pot control 
 scaled by master volume 
 digital controls 
 synth vol (dsp mix) 
 pcm vol (dsp mix) 
 input monitor (dsp mix) 
 scaled by master volume 
 update master volume scaled controls 
 SPDX-License-Identifier: GPL-2.0-or-later
    card-ad1816a.c - driver for ADI SoundPort AD1816A based soundcards.
    Copyright (C) 2000 by Massimo Piccioni <dafastidio@libero.it>
 Index 1-MAX 
 ID for this card 
 Enable this card 
 PnP setup 
 PnP setup 
 PnP setup 
 Pnp setup 
 Pnp setup 
 PnP setup 
 PnP setup 
 Analog Devices AD1815 
 Analog Devices AD1816? 
 Analog Devices AD1816A - added by Kenneth Platz <kxp@atl.hp.com> 
 Analog Devices AD1816A - AztechNewcom SC-16 3D 
 Highscreen Sound-Boostar 16 3D - added by Stefan Behnel 
 Highscreen Sound-Boostar 16 3D 
 Shark Predator ISA - added by Ken Arromdee 
 Analog Devices AD1816A - Terratec AudioSystem EWS64 S 
 Analog Devices AD1816A - Terratec AudioSystem EWS64 S 
 Analog Devices AD1816A - Terratec Base 64 
 end 
 MODULE 
 SPDX-License-Identifier: GPL-2.0-or-later
    ad1816a.c - lowlevel code for Analog Devices AD1816A chip.
    Copyright (C) 1999-2000 by Massimo Piccioni <dafastidio@libero.it>
 if (what & AD1816A_PLAYBACK_ENABLE) 
		 That is not valid, because playback and capture enable
		  are the same bit pattern, just to different addresses
 SPDX-License-Identifier: GPL-2.0-only
 Copyright (C) by Paul Barton-Davis 1998-1999
  Some portions of this file are taken from work that is
  copyright (C) by Hannu Savolainen 1993-1996
  An ALSA lowlevel driver for Turtle Beach ICS2115 wavetable synth
                                              (Maui, Tropez, Tropez Plus)
  This driver supports the onboard wavetable synthesizer (an ICS2115),
  including patch, sample and program loading and unloading, conversion
  of GUS patches during loading, and full user-level access to all
  WaveFront commands. It tries to provide semi-intelligent patch and
  sample management as well.
static int wf_raw = 0;  we normally check for "raw state" to firmware
			  loading. if non-zero, then during driver loading, the
			  state of the board is ignored, and we reset the
			  board and load the firmware anyway.
static int fx_raw = 1;  if this is zero, we'll leave the FX processor in
			  whatever state it is when the driver is loaded.
			  The default is to download the microprogram and
			  associated coefficients to set it up for "default"
			  operation, whatever that means.
static int debug_default = 0;   you can set this to control debugging
				  during driver loading. it takes any combination
				  of the WF_DEBUG_ flags defined in
				  wavefront.h
 XXX this needs to be made firmware and hardware version dependent 
 the firmware file name 
static int wait_usecs = 150;  This magic number seems to give pretty optimal
				throughput based on my limited experimentation.
				If you want to play around with it and find a better
				value, be my guest. Remember, the idea is to
				get a number that causes us to just busy wait
				for as many WaveFront commands as possible, without
				coming up with a number so large that we hog the
				whole CPU.
				Specifically, with this number, out of about 134,000
				status waits, only about 250 result in a sleep.
 HZsleep_interval seconds per sleep 
 number of times we'll try to sleep 
static int reset_time = 2;         hundreths of a second we wait after a HW
				     reset for the expected interrupt.
static int ramcheck_time = 20;     time in seconds to wait while ROM code
				     checks on-board RAM.
static int osrun_time = 10;        time in seconds we wait for the OS to
				     start running.
 if WF_DEBUG not defined, no run-time debugging messages will
   be available via the debug flag setting. Given the current
   beta state of the driver, this will remain set until a future 
   version.
 WF_DEBUG 
 bitmasks for WaveFront status port value 
	 This command requires a variable number of bytes to be written.
	   There is a hack in snd_wavefront_cmd() to support this. The actual
	   count is passed in as the read buffer ptr, cast appropriately.
	   Ugh.
	 This one is a hack as well. We just read the first byte of the
	   response, don't fetch an ACK, and leave the rest to the 
	   calling function. Ugly, ugly, ugly.
	 Spin for a short period of time, because >99% of all
	   requests to the WaveFront can be serviced inline like this.
	 Hack to handle the one variable-size write command. See
	   wavefront_send_multisample() for the other half of this
	   gross and ugly strategy.
 Now handle errors. Lots of special cases here 
 Can you believe this madness ? 
		 Some commands need an ACK, but return zero instead
		   of the standard value.
 something unknown 
 explicit error 
WaveFront data munging   
Things here are weird. All data written to the board cannot 
have its most significant bit set. Any data item with values 
potentially > 0x7F (127) must be split across multiple bytes.
Sometimes, we need to munge numeric values that are represented on
the x86 side as 8-32 bit values. Sometimes, we need to munge data
that is represented on the x86 side as an array of bytes. The most
efficient approach to handling both cases seems to be to use 2
different functions for munging and 2 for de-munging. This avoids
weird casting and worrying about bit-level offsets.
 Mask high bit of LSB 
 Rotate Right 7 bits  
 Note: we leave the upper bits in place  
 NOTE: src and dst CAN point to the same address 
WaveFront: sample, patch and program management.
 check sample status 
 Bad patch number 
 program status has already filled in slot_used bits 
 Bad program number 
	 XXX need to zero existing SLOT_USED bit for program_status[i]
	   where `i' is the program that's being (potentially) overwritten.
			 XXX need to mark SLOT_USED for sample used by
			   patch_number, but this means we have to load it. Ick.
	 samples are downloaded via a 16-bit wide io port
	   (you could think of it as 2 adjacent 8-bit wide ports
	   but its less efficient that way). therefore, all
	   the blocksizes and so forth listed in the documentation,
	   and used conventionally to refer to sample sizes,
	   which are given in 8-bit units (bytes), need to be
	   divided by 2.
		 XXX it's a debatable point whether or not RDONLY semantics
		   on the ROM samples should cover just the sample data or
		   the sample header. For now, it only covers the sample data,
		   so anyone is free at all times to rewrite sample headers.
		   My reason for this is that we have the sample headers
		   available in the WFB file for General MIDI, and so these
		   can always be reset if needed. The sample data, however,
		   cannot be recovered without a complete reset and firmware
		   reload of the ICS2115, which is a very expensive operation.
		   So, doing things this way allows us to honor the notion of
		   "RESETSAMPLES" reasonably cheaply. Note however, that this
		   is done purely at user level: there is no WFB parser in
		   this driver, and so a complete reset (back to General MIDI,
		   or theoretically some other configuration) is the
		   responsibility of the user level library. 
		   To try to do this in the kernel would be a little
		   crazy: we'd need 158K of kernel space just to hold
		   a copy of the patchprogramsample header data.
 Be safe, and zero the "Unused" bits ... 
	 adjust size for 16 bit samples by dividing by two.  We always
	   send 16 bits per write, even for 8 bit samples, so the length
	   is always half the size of the sample data in bytes.
	 the data we're sent has not been munged, and in fact, the
	   header we have to send isn't just a munged copy either.
	   so, build the sample header right here.
	 Yes, a 4 byte result doesn't contain all of the offset bits,
	   but the offset only uses 24 bits.
	 This one is truly weird. What kind of weirdo decided that in
	   a system dominated by 16 and 32 bit integers, they would use
	   a just 12 bits ?
	 Why is this nybblified, when the MSB is always zero ? 
	   Anyway, we can't take address of bitfield, so make a
	   good-faith guess at where it starts.
 Sorry. Just had to have one somewhere 
 Do any initial skip over an unused channel's data 
 round to nearest 16-byte value 
 GUS ? 
						 8 bit sample
						 resolution, sign
						 extend both bytes.
						 16 bit sample
						 resolution, sign
						 extend the MSB.
				 In padding section of final block:
				   Don't fetch unsupplied data from
				   user space, just continue with
				   whatever the final value was.
		 Get "DMA page acknowledge", even though its really
		   nothing to do with DMA at all.
	 Note, label is here because sending the sample header shouldn't
	   alter the sample_status info at all.
	 You'll recall at this point that the "number of samples" value
	   in a wavefront_multisample struct is actually the log2 of the
	   real number of samples.
	 Need a hack here to pass in the number of bytes
	   to be written to the synth. This is ugly, and perhaps
	   one day, I'll fix it.
 get the number of samples ... 
 sample or sample_header, based on patch->size 
WaveFront: hardware-dependent interface
	 The board doesn't send us an exact copy of a "wavefront_sample"
	   in response to an Upload Sample Header command. Instead, we 
	   have to convert the data format back into our data structure,
	   just as in the Download Sample command, where we have to do
	   something very similar in the reverse direction.
 Now copy it back to where it came from 
 Pre-handling of or for various commands 
		 multisamples have to be handled differently, and
		   cannot be dealt with properly by snd_wavefront_cmd() alone.
	 Post-handling of certain commands.
	   In particular, if the command was an upload, demunge the data
	   so that the user-level doesn't have to think about it.
			 intercept any freemem requests so that we know
			   we are always current with the user-level view
			   of things.
  WaveFront: interface for card-level wavefront module               
	
	   Some comments on interrupts. I attempted a version of this
	   driver that used interrupts throughout the code instead of
	   doing busy andor sleep-waiting. Alas, it appears that once
	   the Motorola firmware is downloaded, the card never
	   generates an RX interrupt. These are successfully generated
	   during firmware loading, and after that wavefront_status()
	   reports that an interrupt is pending on the card from time
	   to time, but it never seems to be delivered to this
	   driver. Note also that wavefront_status() continues to
	   report that RX interrupts are enabled, suggesting that I
	   didn't goof up and disable them by mistake.
	   Thus, I stepped back to a prior version of
	   wavefront_wait(), the only place where this really
	   matters. Its sad, but I've looked through the code to check
	   on things, and I really feel certain that the Motorola
	   firmware prevents RX-ready interrupts.
 STATUS REGISTER 
0 Host Rx Interrupt Enable (1=Enabled)
1 Host Rx Register Full (1=Full)
2 Host Rx Interrupt Pending (1=Interrupt)
3 Unused
4 Host Tx Interrupt (1=Enabled)
5 Host Tx Register empty (1=Empty)
6 Host Tx Interrupt Pending (1=Interrupt)
7 Unused
 IRQ already checked 
 try reset of port 
	 At this point, the board is in reset, and the HW initialization
	   register is accessed at the same address as the data port.
	   Bit 7 - Enable IRQ Driver	
	   0 - Tri-state the Wave-Board drivers for the PC Bus IRQs
	   1 - Enable IRQ selected by bits 5:3 to be driven onto the PC Bus.
	   Bit 6 - MIDI Interface Select
	   0 - Use the MIDI Input from the 26-pin WaveBlaster
	   compatible header as the serial MIDI source
	   1 - Use the MIDI Input from the 9-pin D connector as the
	   serial MIDI source.
	   Bits 5:3 - IRQ Selection
	   0 0 0 - IRQ 29
	   0 0 1 - IRQ 5
	   0 1 0 - IRQ 12
	   0 1 1 - IRQ 15
	   1 0 0 - Reserved
	   1 0 1 - Reserved
	   1 1 0 - Reserved
	   1 1 1 - Reserved
	   Bits 2:1 - Reserved
	   Bit 0 - Disable Boot ROM
	   0 - memory accesses to 03FC30-03FFFFH utilize the internal Boot ROM
	   1 - memory accesses to 03FC30-03FFFFH are directed to external 
	   storage.
	 configure hardware: IRQ, enable interrupts, 
	   plus external 9-pin MIDI interface selected
	 CONTROL REGISTER
	   0 Host Rx Interrupt Enable (1=Enabled)      0x1
	   1 Unused                                    0x2
	   2 Unused                                    0x4
	   3 Unused                                    0x8
	   4 Host Tx Interrupt Enable                 0x10
	   5 Mute (0=Mute; 1=Play)                    0x20
	   6 Master Interrupt Enable (1=Enabled)      0x40
	   7 Master Reset (0=Reset; 1=Run)            0x80
	   Take us out of reset, mute output, master + TX + RX interrupts on.
	   
	   We'll get an interrupt presumably to tell us that the TX
	   register is clear.
	 Note: data port is now the data port, not the hw initialization
	   port.
	 Note: data port is now the data port, not the hw initialization
	   port.
	   At this point, only "HW VERSION" or "DOWNLOAD OS" commands
	   will work. So, issue one of them, and wait for TX
	   interrupt. This can take a long time after a cold boot,
	   while the ISC ROM does its RAM test. The SDK says up to 4
	   seconds - with 12MB of RAM on a Tropez+, it takes a lot
	   longer than that (~16secs). Note that the card understands
	   the difference between a warm and a cold boot, so
	   subsequent ISC2115 reboots (say, caused by module
	   reloading) will get through this much faster.
	   XXX Interesting question: why is no RX interrupt received first ?
 NAK 
		 Board's RAM test failed. Try to read error code,
		   and tell us about it either way.
 We're OK, just get the next byte of the HW version response 
 Send command 
 get ACK 
		 Wait for the OS to get running. The protocol for
		   this is non-obvious, and was determined by
		   using port-IO tracing in DOSemu and some
		   experimentation here.
		   
		   Rather than using timed waits, use interrupts creatively.
 Now, do it again ! 
		 OK, no (RXTX) interrupts any more, but leave mute
		   in effect. 
	 SETUPSND.EXE asks for sample memory config here, but since i
	   have no idea how to interpret the result, we'll forget
	   about it.
 reset that sucker so that it doesn't bother us. 
	 IMPORTANT: assumes that snd_wavefront_detect() andor
	   wavefront_reset_to_cleanliness() has already been called 
 XXX is this always true ? 
 Check for FX device, present only on Tropez+ 
	 Start normal operation: unreset, master interrupt enabled, no mute
	 returns zero if a WaveFront card is successfully detected.
	   negative otherwise.
 check that a command actually works 
 SPDX-License-Identifier: GPL-2.0-or-later
   ALSA card-level driver for Turtle Beach Wavefront cards 
 						(Maui,Tropez,Tropez+)
   Copyright (c) 1997-1999 by Paul Barton-Davis <pbd@op.net>
 Index 0-MAX 
 ID for this card 
 Enable this card 
 PnP setup 
 5,7,9,11,12,15 
 PnP setup 
 9,11,12,15 
 PnP setup 
 2,9,11,12,15 
 PnP setup 
 0,1,3,5,6,7 
 0,1,3,5,6,7 
 Tropez 
 Tropez+ 
 Check for each logical device. 
 CS4232 chip (aka "windows sound system") is logical device 0 
 there is a game port at logical device 1, but we ignore it completely 
	 the control interface is logical device 2, but we ignore it
	   completely. in fact, nobody even seems to know what it
	   does.
	 Only configure the CS4232 MIDI interface if its been
	   specifically requested. It is logical device 3.
 The ICS2115 synth is logical device 4 
 PCMFM initialization 
	 An interesting note from the Tropez+ FAQ:
	   Q. [Ports] Why is the base address of the WSS IO ports off by 4?
	   A. WSS IO requires a block of 8 IO addresses ("ports"). Of these, the first
	   4 are used to identify and configure the board. With the advent of PnP,
	   these first 4 addresses have become obsolete, and software applications
	   only use the last 4 addresses to control the codec chip. Therefore, the
	   base address setting "skips past" the 4 unused addresses.
 Synth initialization 
	 CS4232 MPU initialization. Configure this only if
	   explicitly requested, since its physically inaccessible and
	   consumes another IRQ.
 CONFIG_PNP 
 --------- PCM --------------- 
 ---------- OPL3 synth --------- 
 ------- ICS2115 Wavetable synth ------- 
 --------- Mixer ------------ 
 -------- CS4232 MPU-401 interface -------- 
 ------ ICS2115 internal MIDI ------------ 
 ------ ICS2115 external MIDI ------------ 
 FX processor for Tropez+ 
 Need a way to distinguish between Maui and Tropez 
 ----- Register the card --------- 
	 Not safe to include "Turtle Beach" in longname, due to 
	   length restrictions
 FIXME: suspend, resume 
 FIXME: suspend,resume 
 CONFIG_PNP 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) by Paul Barton-Davis 1998-1999
 The low level driver for the WaveFront ICS2115 MIDI interface(s)
  Note that there is also an MPU-401 emulation (actually, a UART-401
  emulation) on the CS4232 on the Tropez and Tropez Plus. This code
  has nothing to do with that interface at all.
  The interface is essentially just a UART-401, but is has the
  interesting property of supporting what Turtle Beach called
  "Virtual MIDI" mode. In this mode, there are effectively two
  MIDI buses accessible via the interface, one that is routed
  solely tofrom the external WaveFront synthesizer and the other
  corresponding to the pinsocket connector used to link external
  MIDI devices to the board.
  This driver fully supports this mode, allowing two distinct MIDI
  busses to be used completely independently, giving 32 channels of
  MIDI routing, 16 to the WaveFront synth and 16 to the external MIDI
  bus. The devices are named devsndmidiCnD0 and devsndmidiCnD1,
  where `n' is the card number. Note that the device numbers may be
  something other than 0 and 1 if the CS4232 UARTMPU-401 interface
  is enabled.
  Switching between the two is accomplished externally by the driver
  using the two otherwise unused MIDI bytes. See the code for more details.
  NOTE: VIRTUAL MIDI MODE IS ON BY DEFAULT (see lowlevelisawavefront.c)
  The main reason to turn off Virtual MIDI mode is when you want to
  tightly couple the WaveFront synth with an external MIDI
  device. You won't be able to distinguish the source of any MIDI
  data except via SysEx ID, but thats probably OK, since for the most
  part, the WaveFront won't be sending any MIDI data at all.
  The main reason to turn on Virtual MIDI Mode is to provide two
  completely independent 16-channel MIDI buses, one to the
  WaveFront and one to any external MIDI devices. Given the 32
  voice nature of the WaveFront, its pretty easy to find a use
  for all 16 channels driving just that synth.
	 Its not OK to try to change the status of "virtuality" of
	   the MIDI interface while we're outputting stuff.  See
	   snd_wavefront_midi_{enable,disable}_virtual () for the
	   other half of this.  
	   The first loop attempts to flush any data from the
	   current output device, and then the second 
	   emits the switch byte (if necessary), and starts
	   outputting data for the output device currently in use.
 XXX fix me - no hard timing loops allowed! 
 XXX fix me - no hard timing loops allowed! 
 don't invert the value from now 
 not for us 
 else just leave it as it is 
 snd_wavefront_midi_input_close (card->ics2115_external_rmidi);
 snd_wavefront_midi_output_close (card->ics2115_external_rmidi);
	 The ICS2115 MPU-401 interface doesn't do anything
	   until its set into UART mode.
 XXX fix me - no hard timing loops allowed! 
	 Any interrupts received from now on
	   are owned by the MIDI side of things.
 Route external MIDI to WaveFront synth (by default) 
 XXX error ? 
	 Turn on Virtual MIDI, but first always turn it off,
	   since otherwise consecutive reloads of the driver will
	   never cause the hardware to generate the initial "internal" or 
	   "external" source bytes in the MIDI data stream. This
	   is pretty important, since the internal hardware generally will
	   be used to generate none or very little MIDI output, and
	   thus the only source of MIDI data is actually external. Without
	   the switch bytes, the driver will think it all comes from
	   the internal interface. Duh.
 We're OK, but missing the external MIDI dev 
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (c) 1998-2002 by Paul Davis <pbd@op.net>
 Control bits for the Load Control Register
 transfer after DSP LSB byte written 
 transfer after DSP MSB byte written 
 auto-increment DSP address after transfer 
	 This is a crude check, but its the best one I have for now.
	   Certainly on the Maui and the Tropez, wavefront_fx_idle() will
	   report "never idle", which suggests that this test should
	   work OK.
 page 
 addr 
 cnt 
 YSS225 initialization.
   This code was developed using DOSEMU. The Turtle Beach SETUPSND
   utility was run with IO tracing in DOSEMU enabled, and a reconstruction
   of the port IO done, using the Yamaha faxback document as a guide
   to add more logic to the code. Its really pretty weird.
   This is the approach of just dumping the whole IO
   sequence as a series of portvalue pairs and a simple loop
   that outputs it.
 SPDX-License-Identifier: GPL-2.0-or-later
   Generic driver for AD1848AD1847CS4248 chips (0.1 Alpha)
   Copyright (c) by Tugrul Galatali <galatalt@stuy.edu>,
                    Jaroslav Kysela <perex@perex.cz>
   Based on card-4232.c by Jaroslav Kysela <perex@perex.cz>
 Index 0-MAX 
 ID for this card 
 Enable this card 
 PnP setup 
 5,7,9,11,12,15 
 0,1,3,5,6,7 
 Thinkpad special case 
 SPDX-License-Identifier: GPL-2.0-or-later
  Aztech AZT1605AZT2316 Driver
  Copyright (C) 2007,2010  Rene Herman
  Generic SB DSP support routines
  Generic WSS support routines
  Aztech Sound Galaxy specifics
	
	  Needed for MPU IRQ on AZT1605, but AZT2316 loses WSS again
 SPDX-License-Identifier: GPL-2.0-or-later
  Aztech AZT2316 Driver
  Copyright (C) 2007,2010  Rene Herman
  32-bit config register
 SPDX-License-Identifier: GPL-2.0-or-later
  Aztech AZT1605 Driver
  Copyright (C) 2007,2010  Rene Herman
  24-bit config register
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (C) 2000 Takashi Iwai <tiwai@suse.de>
   Generic memory management routines for soundcard memory allocation
  create a new memory manager
  free a memory manager
 release all blocks 
  allocate a memory block (without mutex)
 word alignment 
 look for empty block 
  create a new memory block with the given size
  the block is linked next to prev
  allocate a memory block (with mutex)
  remove the block from linked-list and free resource
  (without mutex)
  free a memory block (with mutex)
  return available memory size
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (C) 2000 Takashi Iwai <tiwai@suse.de>
   Routines for control of EMU WaveTable chip
  create a new hardware dependent device for Emu8000Emu10k1
 create soundfont list 
 SPDX-License-Identifier: GPL-2.0-or-later
   Midi synth routines for the Emu8kEmu10k1
   Copyright (C) 1999 Steve Ratcliffe
   Copyright (c) 1999-2000 Takashi Iwai <tiwai@suse.de>
   Contains code based on awe_wave.c by Takashi Iwai
  Prototypes
  Ensure a value is between two points
  macro evaluates its args more than once, so changed to upper-case.
  Start a note.
 remember the original note 
 exclusive note off 
 seems not necessary
 Turn off the same note on the same channel. 
 set up each voice parameter 
 at this stage, we don't trigger the voice yet. 
 start envelope now 
 remember the trigger timing 
 clear voice position for the next note on this channel 
  Release a note in response to a midi note off.
				 if note-off is sent too shortly after
				  note-on, emuX engine cannot produce the sound
				  correctly.  so we'll release this note
				  a bit later via timer callback.
 ok now release the note 
  timer callback
  release the pending note-offs
 release this at the next interrupt 
  key pressure change
  Modulate the voices which belong to the channel
  Modulate all the voices which belong to the port.
  Deal with a controller type event.  This includes all types of
  control events, not just the midi controllers
 FIXME: this is an emulation 
  terminate note - if free flag is true, free the terminated voice
  terminate note - exported for midi emulation
  Terminate all the notes
 initialize allocation time 
  Terminate all voices associated with the given port
  Terminate all voices that have the same exclusive class.  This
  is mainly for drums.
  terminate a voice
  if free flag is true, call free_voice after termination
  Modulate the voice
 not used
 table for volume target calculation 
  Sets up the voice structure by calculating some values that
  will be needed later.
 copy the original register values 
 reset status 
 compute filter target and correct modulation parameters 
 calculate filter target 
 compute pitch target 
 compute volume target and correct volume parameters 
 FIXME: this leads to some clicks.. 
  calculate pitch parameter
 pan & loop start (pan 8bit, MSB, 0:right, 0xff:left) 
 0-127 
 0-127 
 assuming linear volume 
 using volume table 
  calculate volume attenuation
  Voice volume is controlled by volume attenuation parameter.
  So volume becomes maximum when avol is 0 (no attenuation), and
  minimum when 255 (-96dB or silence).
 tables for volume->attenuation calculation 
  Magic to calculate the volume (actually attenuation) from all the
  voice and channels parameters.
 0 - 127 
 calc to attenuation 
 value unchanged 
 value changed 
  calculate pitch offset
  0xE000 is no pitch offset at 44100Hz sample.
  Every 4096 is one octave.
 calculate offset 
 (128  8192: 1 semitone) ==> (4096: 12 semitones) 
	 tuning via RPN:
	    coarse = -8192 to 8192 (100 cent per 128)
	    fine = -8192 to 8192 (max=100cent)
 4096 = 1200 cents in emu8000 parameter 
 add initial pitch correction 
 0xe000: root pitch 
 unchanged 
 value changed 
  Get the bank number assigned to the channel
 return drum bank 
 ignore LSB (bank map) 
 Look for the zones matching with the given note and velocity.
  The resultant zones are stored on table.
 not used 
 SPDX-License-Identifier: GPL-2.0-or-later
   NRPN  SYSEX callbacks for Emu8kEmu10k1
   Copyright (c) 1999-2000 Takashi Iwai <tiwai@suse.de>
  conversion from NRPNcontrol parameters to Emu8000 raw parameters
 NRPN  CC -> Emu8000 parameter converter 
 effect sensitivity 
  convert NRPNcontrol values
 effect sensitivities for GS NRPN:
   adjusted for chaos 8MB soundfonts
 effect sensitivities for XG controls:
  adjusted for chaos 8MB soundfonts
  AWE32 NRPN effects
 function for each NRPN 		
 [0,5900] 4msec 
 [0,5940] 1msec 
 [0,8191] 1msec 
 [0,5940] 4msec 
 [0,5940] 4msec 
 [0,127] 0.75dB 
 [-127,127] 9.375cents 
 [-127,127] 56.25cents 
 [0,5900] 4msec 
 [0,5940] 1msec 
 [0,8191] 1msec 
 [0,5940] 4msec 
 [0,5940] 4msec 
 [0,127] 0.75dB 
 [0,5900] 4msec 
 [0,127] 84mHz 
 [0,127] 0.1875dB 
 [-127,127] 9.375cents 
 [-64,63] 56.25cents 
 [0,5900] 4msec 
 [0,127] 84mHz 
 [-127,127] 9.375cents 
 [-8192,8192] cents 
 [0,255] -- 
 [0,255] -- 
 [0,127] 62Hz 
 [0,127] -- 
  GS(SC88) NRPN effects; still experimental
 cutoff: quarter semitone step, max=255 
 resonance: 0 to 15(max) 
 attack: 
 decay: 
 release: 
 vibrato freq: 0.042Hz step, max=255 
 vibrato depth: max=127, 1 octave 
 vibrato delay: -0.725msec step 
  NRPN events
 WinDOS AWE32 specific NRPNs 
 both MSBLSB necessary 
 GS specific NRPNs 
 only MSB is valid 
  XG control effects; still experimental
 cutoff: quarter semitone step, max=255 
 resonance: 0(open) to 15(most nasal) 
 attack: 
 release: 
  receive sysex
 SPDX-License-Identifier: GPL-2.0-or-later
   Interface for OSS sequencer emulation
   Copyright (C) 1999 Takashi Iwai <tiwai@suse.de>
  Changes
  19990227   Steve Ratcliffe   Made separate file and merged in latest
  				midi emulation.
 operators 
  register OSS synth
 using device#1 here for avoiding conflicts with OPL3 
 register to OSS synth table 
  unregister
 use port number as a unique soundfont client number 
  open port for OSS sequencer
 fill the argument data 
  reset port mode
  close port
  load patch
  ioctl
  reset device
  receive raw events: only SEQ_PRIVATE is accepted.
 only SEQ_PRIVATE is accepted 
  OSSAWE driver specific hw controls
 don't do this atomically 
snd_emux_mute_channel(emu, chan);
snd_emux_channel_init(chset, chan);
  GUS specific hw controls
 0 to 15 --> 0 to 127 
 not supported yet 
 volume ramping not supported 
  send an event to midi emulation
 SPDX-License-Identifier: GPL-2.0-or-later
   Soundfont generic routines.
 	It is intended that these should be used by any driver that is willing
 	to accept soundfont patches.
   Copyright (C) 1999 Steve Ratcliffe
   Copyright (c) 1999-2000 Takashi Iwai <tiwai@suse.de>
  Deal with reading in of a soundfont.  Code follows the OSS way
  of doing things so that the old sfxload utility can be used.
  Everything may change when there is an alsa way of doing things.
 Prototypes for static functions 
  lock access to sflist
  remove lock
  close the patch if the patch was opened by this client.
  Deal with a soundfont patch.  Any driver could use these routines
  although it was designed for the AWE64.
  The sample_write and callargs parameters allow a callback into
  the actual driver to write sample data to the board or whatever
  it wants to do with it.
 grab sflist to open 
 check if other client already opened patch 
rc = replace_data(&patch, data, count);
 patch must be opened 
 check if specified type is special font (GUS or preset-alias) 
 open patch; create sf list 
  Allocate a new soundfont structure.
 check the shared fonts 
 not found -- create a new one 
 prepend this record 
 check if the given name matches to the existing list 
  Close the current patch.
 probe sample in the current list -- nothing to be loaded 
 patch must be opened 
 search the specified sample by optarg 
  increment zone counter
  allocate a new zone record
  increment sample counter
  allocate a new sample list record
  delete sample list -- this is an exceptional job.
  only the last allocated sample can be deleted.
 only last sample is accepted 
 load voice map 
 get the link info 
 the same mapping is already present 
 relink this record to the link head 
 update the counter 
 create a new zone 
 remove the present instrument layers 
 remove this layer 
  Read an info record from the user buffer and save it on the current
  open soundfont.
 patch must be opened 
		 exclusive mode - if the instrument already exists,
 replace mode - remove the instrument if it already exists 
 copy awe_voice_info parameters 
 create a new zone 
 copy the temporary data 
 look up the sample 
 initialize voice_info record 
 initialize voice_parm record:
  Env12: delay=0, attack=0, hold=0, sustain=0, decay=0, release=0.
  Vibrato and Tremolo effects are zero.
  Cutoff is maximum.
  Chorus and Reverb effects are zero.
 search the specified sample 
	 add in the actual sample offsets:
	  The voice_info addresses define only the relative offset
	  from sample pointers.  Here we calculate the actual DRAM
	  offset from sample pointers.
 copy mode flags 
 find the sample pointer with the given id in the soundfont 
  Load sample information, this can include data to be loaded onto
  the soundcard.  It can also just be a pointer into soundcard ROM.
  If there is data it will be written to the soundcard via the callback
  routine.
 patch must be opened 
 Check for dup 
 if shared sample, skip this data 
 Allocate a new sample structure 
	
	  If there is wave data then load it.
 log2_tbl[i] = log2(i+128)  0x10000 
 convert from linear to log value
  conversion: value = log2(amount  base)  ratio
  argument:
    amount = linear value (unsigned, 32bit max)
    offset = base offset (:= log2(base)  0x10000)
    ratio = division ratio
 linear approximation by lower 8 bit 
 base = 1000 
 base = 8176 
 base = 44100 
  mHz to abscent
  conversion: abscent = log2(MHz  8176)  1200
 convert Hz to AWE32 rate offset:
  sample pitch offset for the specified sample rate
  rate=44100 is no offset, each 4096 is 1 octave (twice).
  eg, when rate is 22050, this offset becomes -4096.
  conversion: offset = log2(Hz  44100)  4096
 calculate GUS envelope time 
 convert envelope time parameter to soundfont parameters 
 attack & decayrelease time table (msec) 
 delay time = 0x8000 - msec92 
 search an index for specified time from given time table 
 attack time: search from time table 
 decayrelease time: search from time table 
 load GUS patch 
 set up mode flags 
 convert to word offsets 
smp->v.loopend++;
 set up voice info 
	
	  load wave data
 memory offset is updated after 
 update the memory offset here 
 the last sample 
 panning position; -128 - 127 => 0-127 
 detuning is ignored 
 6points volume envelope 
 fast release 
 tremolo effect 
 vibrato effect 
 scale_freq, scale_factor, volume, and fractions not implemented 
 append to the tail of the list 
zone->bank = ctrls[AWE_MD_GUS_BANK];
 rebuild preset now 
 load GUS patch 
  Rebuild the preset table.  This is like a hash table in that it allows
  quick access to the zone information.  For each preset there are zone
  structures linked by next_instr and by next_zone.  Former is the whole
  link for this preset, and latter is the link for zone (i.e. instrument
  bankkey combination).
 clear preset table 
 search all fonts and insert each font 
 try again to search the corresponding sample 
  add the given zone to preset table
 different instrument was already defined 
 compare the allocated time 
 the current is older.. skipped 
 remove old zones 
 do not forget to clear this! 
 prepend this zone 
 zone link 
 preset table link 
  delete the given zones from preset_table
  Search matching zones from preset table.
  The note can be rewritten by preset mapping (alias).
  The found zones are stored on 'table' array.  max_layers defines
  the maximum number of elements in this array.
  This function returns the number of found zones.  0 if not found.
	 this function is supposed to be called atomically,
	  so we check the lock.  if it's busy, just returns 0 to
	  tell the caller the busy state
  search the first matching zone
  search matching zones from sflist.  can be called recursively.
 search preset mapping (aliasing) 
 too deep alias level 
 calculate the index of preset table:
  drums are mapped from 128 to 255 according to its note key.
  other instruments are mapped from 0 to 127.
  if the index is out of range, return -1.
  Initialise the sflist structure.
  Release all list records
  Create a new sflist structure
  Free everything allocated off the sflist structure.
  Remove all samples
  The soundcard should be silent before calling this function.
  Remove unlocked samples.
  The soundcard should be silent before calling this function.
 to be sure 
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (C) 2000 Takashi Iwai <tiwai@suse.de>
   Proc interface for Emu8kEmu10k1 WaveTable synth
 debug 
 SPDX-License-Identifier: GPL-2.0-or-later
   Midi Sequencer interface routines.
   Copyright (C) 1999 Steve Ratcliffe
   Copyright (c) 1999-2000 Takashi Iwai <tiwai@suse.de>
 Prototypes for static functions 
  MIDI emulation operators
  number of MIDI channels
  type flags for MIDI sequencer port
  Initialise the EMUX Synth by creating a client and registering
  a series of ports.
  Each of the ports will contain the 16 midi channels.  Applications
  can connect to these ports to play midi data.
  Detach from the ports that were set up for this synthesizer and
  destroy the kernel client.
  create a sequencer port and channel_set
 Allocate structures for this channel 
  release memory block for port
  initialize the port specific parameters
  reset port
 stop all sounds 
 set port specific control parameters 
  input sequencer event
  increment usage count
  decrease usage count
  Routine that is called upon a first use of a particular port
  Routine that is called upon the last unuse() of a particular port.
  attach virtual rawmidi devices
 snd_printk(KERN_DEBUG "virmidi %d ok\n", i); 
 snd_printk(KERN_DEBUG "error init..\n"); 
 SPDX-License-Identifier: GPL-2.0-or-later
   Interface for hwdep device
   Copyright (C) 2004 Takashi Iwai <tiwai@suse.de>
  load patch
  set misc mode
  ioctl
  register hwdep device
	 The ioctl parameter types are compatible between 32- and
  unregister
 SPDX-License-Identifier: GPL-2.0-or-later
   Midi synth routines for the Emu8kEmu10k1
   Copyright (C) 1999 Steve Ratcliffe
   Copyright (c) 1999-2000 Takashi Iwai <tiwai@suse.de>
   Contains code based on awe_wave.c by Takashi Iwai
  effects table
 byte or word 
 value range 
 offset in parameter record (-1 = not written) 
 flgas for real-time update 
 env1 delay 
 env1 attack 
 env1 hold 
 env1 decay 
 env1 release 
 env1 sustain 
 env1 pitch 
 env1 fc 
 env2 delay 
 env2 attack 
 env2 hold 
 env2 decay 
 env2 release 
 env2 sustain 
 lfo1 delay 
 lfo1 freq 
 lfo1 vol 
 lfo1 pitch 
 lfo1 cutoff 
 lfo2 delay 
 lfo2 freq 
 lfo2 pitch 
 initial pitch 
 chorus 
 reverb 
 cutoff 
 resonance 
 sample start 
 loop start 
 loop end 
 coarse sample start 
 coarse loop start 
 coarse loop end 
 initial attenuation 
 set byte effect value 
 set word effect value 
 address offset 
 change effects - for OSS sequencer compatibility 
 Modify the effect value.
  if update is necessary, call emu8000_control
 do we need to modify the register in realtime ? 
 modify the register values 
 activate them 
 copy wavetable registers to voice table 
 modify the register values via effect table 
 correct sample and loop points 
  effect table
 SNDRV_EMUX_USE_RAW_EFFECT 
 SPDX-License-Identifier: GPL-2.0-only
  miscellaneous helper functions
  Copyright (c) Clemens Ladisch <clemens@ladisch.de>
  snd_fw_transaction - send a request and wait for its completion
  @unit: the driver's unit on the target device
  @tcode: the transaction code
  @offset: the address in the target's address space
  @buffer: inputoutput data
  @length: length of @buffer
  @flags: use %FW_FIXED_GENERATION and add the generation value to attempt the
          request only in that generation; use %FW_QUIET to suppress error
          messages
  Submits an asynchronous request to the target device, and waits for the
  response.  The node ID and the current generation are derived from @unit.
  On a bus reset or an error, the transaction is retried a few times.
  Returns zero on success, or a negative error code.
 node_id vs. generation 
 SPDX-License-Identifier: GPL-2.0-only
  AM824 format in Audio and Music Data Transmission Protocol (IEC 61883-6)
  Copyright (c) Clemens Ladisch <clemens@ladisch.de>
  Copyright (c) 2015 Takashi Sakamoto <o-takashi@sakamocchi.jp>
 "Clock-based rate control mode" is just supported. 
  Nominally 3125 bytessecond, but the MIDI port's clock might be
  1% too slow, and the bus clock 100 ppm too fast.
  Several devices look only at the first eight data blocks.
  In any case, this is more than enough for the MIDI data rate.
  amdtp_am824_set_parameters - set stream parameters
  @s: the AMDTP stream to configure
  @rate: the sample rate
  @pcm_channels: the number of PCM samples in each data block, to be encoded
                 as AM824 multi-bit linear audio
  @midi_ports: the number of MIDI ports (i.e., MPX-MIDI Data Channels)
  @double_pcm_frames: one data block transfers two PCM frames
  The parameters must be set before the stream is started, and must not be
  changed while the stream is running.
	
	  In IEC 61883-6, one data block represents one event. In ALSA, one
	  event equals to one PCM frame. But Dice has a quirk at higher
	  sampling rate to transfer two PCM frames in one data block.
 init the position map for PCM and MIDI channels 
	
	  We do not know the actual MIDI FIFO size of most devices.  Just
	  assume two bytes, i.e., one byte can be received over the bus while
	  the previous one is transmitted over MIDI.
	  (The value here is adjusted for midi_ratelimit_per_packet().)
  amdtp_am824_set_pcm_position - set an index of data channel for a channel
 				  of PCM frame
  @s: the AMDTP stream
  @index: the index of data channel in an data block
  @position: the channel of PCM frame
  amdtp_am824_set_midi_position - set a index of data channel for MIDI
 				   conformant data channel
  @s: the AMDTP stream
  @position: the index of data channel in an data block
  amdtp_am824_add_pcm_hw_constraints - add hw constraints for PCM substream
  @s:		the AMDTP stream for AM824 data block, must be initialized.
  @runtime:	the PCM substream runtime
 AM824 in IEC 61883-6 can deliver 24bit data. 
  amdtp_am824_midi_trigger - startstop playbackcapture with a MIDI device
  @s: the AMDTP stream
  @port: index of MIDI port
  @midi: the MIDI device to be started, or %NULL to stop the current device
  Call this function on a running isochronous stream to enable the actual
  transmission of MIDI data.  This function should be called from the MIDI
  device's .trigger callback.
  To avoid sending MIDI bytes at too high a rate, assume that the receiving
  device has a FIFO, and track how much it is filled.  This values increases
  by one whenever we send one byte in a packet, but the FIFO empties at
  a constant rate independent of our packet rate.  One packet has syt_interval
  samples, so the number of bytes that empty out of the FIFO, per packet(!),
  is MIDI_BYTES_PER_SECOND  syt_interval  sample_rate.  To avoid storing
  fractional values, the values in midi_fifo_used[] are measured in bytes
  multiplied by the sample rate.
 common shortcut 
  amdtp_am824_init - initialize an AMDTP stream structure to handle AM824
 		      data block
  @s: the AMDTP stream to initialize
  @unit: the target of the stream
  @dir: the direction of stream
  @flags: the details of the streaming protocol consist of cip_flags enumeration-constants.
 SPDX-License-Identifier: GPL-2.0-only
  Function Control Protocol (IEC 61883-1) helper functions
  Copyright (c) Clemens Ladisch <clemens@ladisch.de>
 AVC CONTROL 
 UNIT 
 INPUT PLUG SIGNAL FORMAT 
 OUTPUT PLUG SIGNAL FORMAT 
 plug id 
 EOH_1, Form_1, FMT. AM824 
 FDF-hi. AM824, frequency 
 FDF-mid. AM824, SYT hi (not used)
 FDF-low. AM824, SYT lo (not used) 
 do transaction and check buf[1-5] are the same against command 
 NOT IMPLEMENTED 
 REJECTED 
 AVC STATUS 
 Unit 
 INPUT PLUG SIGNAL FORMAT 
 OUTPUT PLUG SIGNAL FORMAT 
 plug id 
 EOH_1, Form_1, FMT. AM824 
 FDF-hi. AM824, frequency 
 FDF-mid. AM824, SYT hi (not used) 
 FDF-low. AM824, SYT lo (not used) 
 do transaction and check buf[1-4] are the same against command 
 NOT IMPLEMENTED 
 REJECTED 
 IN TRANSITION 
 check sfc field and pick up rate 
 also in transition 
 extended subunit in spec.4.2 is not supported 
 AVC STATUS 
 UNIT or Subunit, Functionblock 
 PLUG INFO 
 NOT IMPLEMENTED 
 REJECTED 
 IN TRANSITION 
  fcp_avc_transaction - send an AVC command and wait for its response
  @unit: a unit on the target device
  @command: a buffer containing the command frame; must be DMA-able
  @command_size: the size of @command
  @response: a buffer for the response frame
  @response_size: the maximum size of @response
  @response_match_bytes: a bitmap specifying the bytes used to detect the
                         correct response frame
  This function sends a FCP command frame to the target and waits for the
  corresponding response frame to be returned.
  Because it is possible for multiple FCP transactions to be active at the
  same time, the correct response frame is detected by the value of certain
  bytes.  These bytes must be set in @response before calling this function,
  and the corresponding bits must be set in @response_match_bytes.
  @command and @response can point to the same buffer.
  Returns the actual size of the response frame, or a negative error code.
			
			  'AVC General Specification' define no time limit
			  on command completion once an INTERIM response has
			  been sent. but we promise to finish this function
			  for a caller. Here we use FCP_TIMEOUT_MS for next
			  interval. This is not in the specification.
  fcp_bus_reset - inform the target handler about a bus reset
  @unit: the unit that might be used by fcp_avc_transaction()
  This function must be called from the driver's .update handler to inform
  the FCP transaction handler that a bus reset has happened.  Any pending FCP
  transactions are retried.
 checks whether the response matches the masked bytes in response_buffer 
 node_id vs. generation 
 SPDX-License-Identifier: GPL-2.0-only
  Apple iSight audio driver
  Copyright (c) Clemens Ladisch <clemens@ladisch.de>
 update buffer data before buffer pointer 
"sght"))) {
?);
 Block till all of ALSA character devices are released.
 SPDX-License-Identifier: GPL-2.0-only
  Connection Management Procedures (IEC 61883-1) helper functions
  Copyright (c) Clemens Ladisch <clemens@ladisch.de>
 MPR common fields 
 PCR common fields 
 oPCR specific fields 
 success? 
  cmp_connection_init - initializes a connection manager
  @c: the connection manager to initialize
  @unit: a unit of the target device
  @direction: input or output
  @pcr_index: the index of the iPCRoPCR on the target device
  cmp_connection_check_used - check connection is already esablished or not
  @c: the connection manager to be checked
  @used: the pointer to store the result of checking the connection
  cmp_connection_destroy - free connection manager resources
  @c: the connection manager
	
	  apply "oPCR overhead ID encoding"
	  the encoding table can convert up to 512.
	  here the value over 512 is converted as the same way as 512.
 generate speed and extended speed field value 
  cmp_connection_establish - establish a connection to the target
  @c: the connection manager
  This function establishes a point-to-point connection from the local
  computer to the target by allocating isochronous resources (channel and
  bandwidth) and setting the target's inputoutput plug control register.
  When this function succeeds, the caller is responsible for starting
  transmitting packets.
  cmp_connection_update - update the connection after a bus reset
  @c: the connection manager
  This function must be called from the driver's .update handler to
  reestablish any connection that might have been active.
  Returns zero on success, or a negative error code.  On an error, the
  connection is broken and the caller must stop transmitting iso packets.
  cmp_connection_break - break the connection to the target
  @c: the connection manager
  This function deactives the connection in the target's inputoutput plug
  control register, and frees the isochronous resources of the connection.
  Before calling this function, the caller should cease transmitting packets.
 SPDX-License-Identifier: GPL-2.0-only
  helpers for managing a buffer for many packets
  Copyright (c) Clemens Ladisch <clemens@ladisch.de>
  iso_packets_buffer_init - allocates the memory for packets
  @b: the buffer structure to initialize
  @unit: the device at the other end of the stream
  @count: the number of packets
  @packet_size: the (maximum) size of a packet, in bytes
  @direction: %DMA_TO_DEVICE or %DMA_FROM_DEVICE
  iso_packets_buffer_destroy - frees packet buffer resources
  @b: the buffer structure to free
  @unit: the device at the other end of the stream
 SPDX-License-Identifier: GPL-2.0-only
  isochronous resources helper functions
  Copyright (c) Clemens Ladisch <clemens@ladisch.de>
  fw_iso_resources_init - initializes a &struct fw_iso_resources
  @r: the resource manager to initialize
  @unit: the device unit for which the resources will be needed
  If the device does not support all channel numbers, change @r->channels_mask
  after calling this function.
  fw_iso_resources_destroy - destroy a resource manager
  @r: the resource manager that is no longer needed
 iso packets have three header quadlets and quadlet-aligned payload 
 convert to bandwidth units (quadlets at S1600 = bytes at S400) 
	
	  Under the usual pessimistic assumption (cable length 4.5 m), the
	  isochronous overhead for N cables is 1.797 µs + N  0.494 µs, or
	  88.3 + N  24.3 in bandwidth units.
	 
	  The calculation below tries to deduce N from the current gap count.
	  If the gap count has been optimized by measuring the actual packet
	  transmission time, this derived overhead should be near the actual
	  overhead as well.
  fw_iso_resources_allocate - allocate isochronous channel and bandwidth
  @r: the resource manager
  @max_payload_bytes: the amount of data (including CIP headers) per packet
  @speed: the speed (e.g., SCODE_400) at which the packets will be sent
  This function allocates one isochronous channel and enough bandwidth for the
  specified packet size.
  Returns the channel number that the caller must use for streaming, or
  a negative error code.  Due to potentionally long delays, this function is
  interruptible and can return -ERESTARTSYS.  On success, the caller is
  responsible for calling fw_iso_resources_update() on bus resets, and
  fw_iso_resources_free() when the resources are not longer needed.
  fw_iso_resources_update - update resource allocations after a bus reset
  @r: the resource manager
  This function must be called from the driver's .update handler to reallocate
  any resources that were allocated before the bus reset.  It is safe to call
  this function if no resources are currently allocated.
  Returns a negative error code on failure.  If this happens, the caller must
  stop streaming.
	
	  When another bus reset happens, pretend that the allocation
	  succeeded; we will try again for the new generation later.
  fw_iso_resources_free - frees allocated resources
  @r: the resource manager
  This function deallocates the channel and bandwidth, if allocated.
 Not initialized. 
 SPDX-License-Identifier: GPL-2.0-only
  Audio and Music Data Transmission Protocol (IEC 61883-6) streams
  with Common Isochronous Packet (IEC 61883-1) headers
  Copyright (c) Clemens Ladisch <clemens@ladisch.de>
 Always support Linux tracing subsystem. 
 479.17 microseconds 
 isochronous header parameters 
 Common Isochronous Packet (CIP) header parameters. Use two quadlets CIP header when supported.
 Audio and Music transfer protocol specific parameters 
 For iso header and tstamp.
 Add nothing.
 Add two quadlets CIP header.
 Nothing.
 The initial firmware of OXFW970 can postpone transmission of packet during finishing
 asynchronous transaction. This module accepts 5 cycles to skip as maximum to avoid buffer
 overrun. Actual device can skip more, then this module stops the packet streaming.
  amdtp_stream_init - initialize an AMDTP stream structure
  @s: the AMDTP stream to initialize
  @unit: the target of the stream
  @dir: the direction of stream
  @flags: the details of the streaming protocol consist of cip_flags enumeration-constants.
  @fmt: the value of fmt field in CIP header
  @process_ctx_payloads: callback handler to process payloads of isoc context
  @protocol_size: the size to allocate newly for protocol
  amdtp_stream_destroy - free stream resources
  @s: the AMDTP stream to destroy
 Not initialized. 
  amdtp_stream_add_pcm_hw_constraints - add hw constraints for PCM substream
  @s:		the AMDTP stream, which must be initialized.
  @runtime:	the PCM substream runtime
 bytes for a frame 
 Just to prevent from allocating much pages. 
 Linux driver for 1394 OHCI controller voluntarily flushes isoc
 context when total size of accumulated context header reaches
 PAGE_SIZE. This kicks work for the isoc context and brings
 callback in the middle of scheduled interrupts.
 Although AMDTP streams in the same domain use the same events per
 IRQ, use the largest size of context header between ITIR contexts.
 Here, use the value of context header in IR context is for both
 contexts.
 In IEC 61883-6, one isoc packet can transfer events up to the value
 of syt interval. This comes from the interval of isoc cycle. As 1394
 OHCI controller can generate hardware IRQ per isoc packet, the
 interval is 125 usec.
 However, there are two ways of transmission in IEC 61883-6; blocking
 and non-blocking modes. In blocking mode, the sequence of isoc packet
 includes 'empty' or 'NODATA' packets which include no event. In
 non-blocking mode, the number of events per packet is variable up to
 the syt interval.
 Due to the above protocol design, the minimum PCM frames per
 interrupt should be double of the value of syt interval, thus it is
 250 usec.
 Non-Blocking stream has no more constraints 
	
	  One AMDTP packet can include some frames. In blocking mode, the
	  number equals to SYT_INTERVAL. So the number is 8, 16 or 32,
	  depending on its sampling rate. For accurate period interrupt, it's
	  preferrable to align periodbuffer sizes to current SYT_INTERVAL.
  amdtp_stream_set_parameters - set stream parameters
  @s: the AMDTP stream to configure
  @rate: the sample rate
  @data_block_quadlets: the size of a data block in quadlet unit
  The parameters must be set before the stream is started, and must not be
  changed while the stream is running.
 default buffering in the device.
 additional buffering needed to adjust for no-data packets.
 The CIP header is processed in context header apart from context payload.
  amdtp_stream_get_max_payload - get the stream's packet size
  @s: the AMDTP stream
  This function must not be called before the stream has been configured
  with amdtp_stream_set_parameters().
  amdtp_stream_pcm_prepare - prepare PCM device for running
  @s: the AMDTP stream
  This function should be called from the PCM device's .prepare callback.
 Sample_rate  8000 is an integer, and precomputed.
		
		  This calculates the number of data blocks per packet so that
		  1) the overall rate is correct and exactly synchronized to
		     the bus clock, and
		  2) packets with a rounded-up number of blocks occur as early
		     as possible in the sequence (to prevent underruns of the
		     device's buffer).
 6 6 5 6 5 6 5 ... 
 12 11 11 11 11 ... or 23 22 22 22 22 ... 
		
		  The time, in ticks, of the n'th SYT_INTERVAL sample is:
		    n  SYT_INTERVAL  24576000  sample_rate
		  Modulo TICKS_PER_CYCLE, the difference between successive
		  elements is about 1386.23.  Rounding the results of this
		  formula to the SYT precision results in a sequence of
		  differences that begins with:
		    1386 1386 1387 1386 1386 1386 1387 1386 1386 1386 1387 ...
		  This code generates _exactly_ the same sequence.
 Round up.
 Subtract transfer delay so that the synchronization offset is not so large
 at transmission.
 Both of the producer and consumer of the queue runs in the same clock of IEEE 1394 bus.
 Additionally, the sequence of tx packets is severely checked against any discontinuity
 before filling entries in the queue. The calculation is safe even if it looks fragile by
 overrun.
 The program in user process should periodically check the status of intermediate
 buffer associated to PCM substream to process PCM frames in the buffer, instead
 of receiving notification of period elapsed by poll wait.
 In software IRQ context for 1394 OHCI.
 In process context of ALSA PCM application under acquired lock of
 PCM substream.
 Queue one packet for IR context.
	
	  This module supports 'Two-quadlet CIP header with SYT field'.
	  For convenience, also check FMT field is AM824 or not.
 Check valid protocol or not. 
 Calculate data blocks 
 avoid division by zero 
 Check data block counter continuity 
 Handle the cycle so that empty packet arrives.
 In CYCLE_TIMER register of IEEE 1394, 7 bits are used to represent second. On
 the other hand, in DMA descriptors of 1394 OHCI, 3 bits are used to represent
 it. Thus, via Linux firewire subsystem, we can get the 3 bits for second.
 Align to actual cycle count for the packet which is going to be scheduled.
 This module queued the same number of isochronous cycle as the size of queue
 to kip isochronous cycle, therefore it's OK to just increment the cycle by
 the size of queue for scheduled cycle.
 Fireface skips transmission just for an isoc cycle corresponding
 to empty packet.
 Prepare a description for the skipped cycle for
 sequence replay.
 OXFW970 skips transmission for several isoc cycles during
 asynchronous transaction. The sequence replay is impossible due
 to the reason.
 Calculate the number of packets in buffer and check XRUN.
 At NO_PERIOD_WAKEUP mode, the packets for all ITIR contexts are processed by
 the tasks of user process operating ALSA PCM character device by calling ioctl(2)
 with some requests, instead of scheduled hardware IRQ of an IT context.
 Calculate the number of packets in buffer and check XRUN.
 Attempt to detect any event in the batch of packets.
 NODATA packet can includes any data blocks but they are
 not available as event.
 Decide the cycle count to begin processing content of packet in IR contexts.
 Decide the cycle count to begin processing content of packet in IT contexts. All of IT
 contexts are expected to start and get callback when reaching here.
 This is executed one time. For in-stream, first packet has come. For out-stream, prepared to
 transmit first packet.
  amdtp_stream_start - start transferring packets
  @s: the AMDTP stream to start
  @channel: the isochronous channel on the bus
  @speed: firewire speed code
  @queue_size: The number of packets in the queue.
  @idle_irq_interval: the interval to queue packet during initial state.
  The stream cannot be started until it has been configured with
  amdtp_stream_set_parameters() and it must be started before any PCM or MIDI
  device can be started.
 NOTE: IT context should be used for constant IRQ.
 initialize packet buffer.
 No effect for IT context.
 struct fw_iso_context.drop_overflow_headers is false therefore it's
 possible to cache much unexpectedly.
 NOTE: TAG1 matches CIP. This just affects in stream. 
  amdtp_domain_stream_pcm_pointer - get the PCM buffer position
  @d: the AMDTP domain.
  @s: the AMDTP stream that transports the PCM data
  Returns the current buffer position, in frames.
 Process isochronous packets queued till recent isochronous cycle to handle PCM frames.
 In software IRQ context, the call causes dead-lock to disable the tasklet
 synchronously.
  amdtp_domain_stream_pcm_ack - acknowledge queued PCM frames
  @d: the AMDTP domain.
  @s: the AMDTP stream that transfers the PCM frames
  Returns zero always.
 Process isochronous packets for recent isochronous cycle to handle
 queued PCM frames.
  amdtp_stream_update - update the stream after a bus reset
  @s: the AMDTP stream
 Precomputing. 
  amdtp_stream_stop - stop sending packets
  @s: the AMDTP stream to stop
  All PCM and MIDI devices of the stream must be stopped before the stream
  itself can be stopped.
  amdtp_stream_pcm_abort - abort the running PCM device
  @s: the AMDTP stream about to be stopped
  If the isochronous stream needs to be stopped asynchronously, call this
  function first to stop the PCM device.
  amdtp_domain_init - initialize an AMDTP domain structure
  @d: the AMDTP domain to initialize.
  amdtp_domain_destroy - destroy an AMDTP domain structure
  @d: the AMDTP domain to destroy.
 At present nothing to do.
  amdtp_domain_add_stream - register isoc context into the domain.
  @d: the AMDTP domain.
  @s: the AMDTP stream.
  @channel: the isochronous channel on the bus.
  @speed: firewire speed code.
 Make the reference from rx stream to tx stream for sequence replay. When the number of tx streams
 is less than the number of rx streams, the first tx stream is selected.
 Make association to replay target.
 Select the first entry.
 No target is available to replay sequence.
  amdtp_domain_start - start sending packets for isoc context in the domain.
  @d: the AMDTP domain.
  @tx_init_skip_cycles: the number of cycles to skip processing packets at initial stage of IR
 			 contexts.
  @replay_seq: whether to replay the sequence of packet in IR context for the sequence of packet in
 		IT context.
  @replay_on_the_fly: transfer rx packets according to nominal frequency, then begin to replay
 		       according to arrival of events in tx packets.
 Select an IT context as IRQ target.
 This is a case that AMDTP streams in domain run just for MIDI
 substream. Use the number of events equivalent to 10 msec as
 interval of hardware IRQ.
 Starts immediately but actually DMA context starts several hundred cycles later.
  amdtp_domain_stop - stop sending packets for isoc context in the same domain.
  @d: the AMDTP domain to which the isoc contexts belong.
 SPDX-License-Identifier: GPL-2.0-only
  motu-protocol-v3.c - a part of driver for MOTU FireWire series
  Copyright (c) 2015-2017 Takashi Sakamoto <o-takashi@sakamocchi.jp>
 Additional 4 dummy chunks at higher rate.
 SPDX-License-Identifier: GPL-2.0-only
  motu-hwdep.c - a part of driver for MOTU FireWire series
  Copyright (c) 2015-2017 Takashi Sakamoto <o-takashi@sakamocchi.jp>
  This codes have five functionalities.
  1.get information about firewire node
  2.get notification about startingstopping stream
  3.lockunlock streaming
 Header is filled later.
 SPDX-License-Identifier: GPL-2.0-only
  motu-midi.h - a part of driver for MOTU FireWire series
  Copyright (c) 2015-2017 Takashi Sakamoto <o-takashi@sakamocchi.jp>
 create midi ports 
 SPDX-License-Identifier: GPL-2.0-only
  motu-proc.c - a part of driver for MOTU FireWire series
  Copyright (c) 2015-2017 Takashi Sakamoto <o-takashi@sakamocchi.jp>
	
	  All nodes are automatically removed at snd_card_disconnect(),
	  by following to link list.
 SPDX-License-Identifier: GPL-2.0-only
  motu-pcm.c - a part of driver for MOTU FireWire series
  Copyright (c) 2015-2017 Takashi Sakamoto <o-takashi@sakamocchi.jp>
 When source of clock is not internal or any stream is reserved for
 transmission of PCM frames, the available sampling rate is limited
 at current one.
 SPDX-License-Identifier: GPL-2.0-only
  motu-protocol-v2.c - a part of driver for MOTU FireWire series
  Copyright (c) 2015-2017 Takashi Sakamoto <o-takashi@sakamocchi.jp>
 In Traveler.
 on either coaxial or optical. AESEBU in 896HD.
 To check the configuration of optical interface.
 For Traveler.
 Expected for Traveler, which implements Altera Cyclone EP1C3.
 For UltraLite and 8pre, which implements Xilinx Spartan XC3S200.
 828mkII implements Altera ACEX 1K EP1K30. Nothing to do.
 896HD implements Altera Cyclone EP1C3 but nothing to do.
 Two dummy chunks always in the end of data block.
 SPDX-License-Identifier: GPL-2.0-only
 motu-command-dsp-message-parser.c - a part of driver for MOTU FireWire series
 Copyright (c) 2021 Takashi Sakamoto <o-takashi@sakamocchi.jp>
 Below models allow software to configure their DSP function by command transferred in
 asynchronous transaction:
   828 mk3 (FireWire only and Hybrid)
   896 mk3 (FireWire only and Hybrid)
   Ultralite mk3 (FireWire only and Hybrid)
   Traveler mk3
   Track 16
 Isochronous packets from the above models includes messages to report state of hardware meter.
 All of data blocks don't have messages with meaningful information.
 One value of hardware meter consists of 4 messages.
 Skip the last two quadlets since they could be
 invalid value (0xffffffff) as floating point
 number.
 SPDX-License-Identifier: GPL-2.0-only
  motu-stream.c - a part of driver for MOTU FireWire series
  Copyright (c) 2015-2017 Takashi Sakamoto <o-takashi@sakamocchi.jp>
 Configure the unit to start isochronous communication.
 NOTE: The device requires both of replay; the sequence of the number of data
 blocks per packet, and the sequence of source packet header per data block as
 presentation time.
 This function should be called before starting streams or after stopping
 streams.
 SPDX-License-Identifier: GPL-2.0-only
 motu-protocol-v1.c - a part of driver for MOTU FireWire series
 Copyright (c) 2021 Takashi Sakamoto <o-takashi@sakamocchi.jp>
 Licensed under the terms of the GNU General Public License, version 2.
 Status register for MOTU 828 (0x'ffff'f000'0b00).
 0xffff0000: ISOC_COMM_CONTROL_MASK in motu-stream.c.
 0x00008000: mode of optical input interface.
   0x00008000: for SPDIF signal.
   0x00000000: disabled or for ADAT signal.
 0x00004000: mode of optical output interface.
   0x00004000: for SPDIF signal.
   0x00000000: disabled or for ADAT signal.
 0x00003f00: monitor input mode.
   0x00000800: analog-12
   0x00001a00: analog-34
   0x00002c00: analog-56
   0x00003e00: analog-78
   0x00000000: analog-1
   0x00000900: analog-2
   0x00001200: analog-3
   0x00001b00: analog-4
   0x00002400: analog-5
   0x00002d00: analog-6
   0x00003600: analog-7
   0x00003f00: analog-8
 0x00000080: enable stream input.
 0x00000040: disable monitor input.
 0x00000008: enable main out.
 0x00000004: rate of sampling clock.
   0x00000004: 48.0 kHz
   0x00000000: 44.1 kHz
 0x00000023: source of sampling clock.
   0x00000003: source packet header (SPH)
   0x00000002: SPDIF on opticalcoaxial interface.
   0x00000021: ADAT on optical interface
   0x00000001: ADAT on Dsub 9pin
   0x00000000: internal
 Status register for MOTU 896 (0x'ffff'f000'0b14).
 0xf0000000: enable physical and stream input to DAC.
   0x80000000: disable
   0x40000000: disable
   0x20000000: enable (prior to the other bits)
   0x10000000: disable
   0x00000000: disable
 0x08000000: speed of word clock signal output on BNC interface.
   0x00000000: force to low rate (44.148.0 kHz).
   0x08000000: follow to system clock.
 0x04000000: something relevant to clock.
 0x03000000: enable output.
  0x02000000: enabled irreversibly once standing unless the device voluntarily disables it.
  0x01000000: enabled irreversibly once standing unless the device voluntarily disables it.
 0x00ffff00: monitor input mode.
   0x00000000: disabled
   0x00004800: analog-12
   0x00005a00: analog-34
   0x00006c00: analog-56
   0x00007e00: analog-78
   0x00104800: AESEBU-12
   0x00004000: analog-1
   0x00004900: analog-2
   0x00005200: analog-3
   0x00005b00: analog-4
   0x00006400: analog-5
   0x00006d00: analog-6
   0x00007600: analog-7
   0x00007f00: analog-8
   0x00104000: AESEBU-1
   0x00104900: AESEBU-2
 0x00000060: sample rate conversion for AESEBU inputoutput.
   0x00000000: None
   0x00000020: input signal is converted to system rate
   0x00000040: output is slave to input, ignoring system rate
   0x00000060: output is double rate than system rate
 0x00000018: nominal rate of sampling clock.
   0x00000000: 44.1 kHz
   0x00000008: 48.0 kHz
   0x00000010: 88.2 kHz
   0x00000018: 96.0 kHz
 0x00000007: source of sampling clock.
   0x00000000: internal
   0x00000001: ADAT on optical interface
   0x00000002: AESEBU on XLR
   0x00000003: source packet header (SPH)
   0x00000004: word clock on BNC
   0x00000005: ADAT on Dsub 9pin
 This transaction should be initiated after the device receives batch of packets
 since the device voluntarily mutes outputs. As a workaround, yield processor over
 100 msec.
 The number of chunks is just reduced when SPDIF is activated.
 24bit PCM frames follow to source packet header without message chunk.
 No message chunk in data block.
 Always enable optical interface for ADAT signal since the device have no registers
 to refer to current configuration.
 SPDX-License-Identifier: GPL-2.0-only
  motu-transaction.c - a part of driver for MOTU FireWire series
  Copyright (c) 2015-2017 Takashi Sakamoto <o-takashi@sakamocchi.jp>
 Register messaging address. Block transaction is not allowed. 
 Perhaps, 4 byte messages are transferred. 
 Unregister the address. 
 SPDX-License-Identifier: GPL-2.0-only
 motu-register-dsp-message-parser.c - a part of driver for MOTU FireWire series
 Copyright (c) 2021 Takashi Sakamoto <o-takashi@sakamocchi.jp>
 Below models allow software to configure their DSP functions by asynchronous transaction
 to access their internal registers.
  828 mk2
  896hd
  Traveler
  8 pre
  Ultralite
  4 pre
  Audio Express
 Additionally, isochronous packets from the above models include messages to notify state of
 DSP. The messages are two set of 3 byte data in 2nd and 3rd quadlet of data block. When user
 operates hardware components such as dial and switch, corresponding messages are transferred.
 The messages include Hardware metering and MIDI messages as well.
 MIDI mask is in 8th byte.
 MIDI mask is in 8th byte.
 In 4 pre and Audio express, meter index is in 6th byte. MIDI flag is in 8th byte and MIDI byte
 is in 7th byte.
 Used for messages with no information.
 Transferred by all models but the purpose is still unknown.
 Specific to 828mk2, 896hd, Traveler.
 Specific to 828mk2, Traveler, and 896hd (not functional).
 Specific to 828mk2, Traveler, and 896hd (not functional).
 Specific to Ultralite, 4 pre, Audio express, and 8 pre (not functional).
 Specific to 4 pre, and Audio express.
 Specific to 4 pre, and Audio express.
 Specific to 4 pre, and Audio express.
 Transferred by all models. This type of message interposes the series of the other
 messages. The message delivers signal level up to 96.0 kHz. In 828mk2, 896hd, and
 Traveler, one of physical outputs is selected for the message. The selection is done
 by LSB one byte in asynchronous write quadlet transaction to 0x'ffff'f000'0b2c.
 Rough implementaion of queue without overrun check.
 The message for meter is interruptible to the series of other
 types of messages. Don't cache it.
 Don't cache it.
 SPDX-License-Identifier: GPL-2.0-only
  amdtp-motu.c - a part of driver for MOTU FireWire series
  Copyright (c) 2015-2017 Takashi Sakamoto <o-takashi@sakamocchi.jp>
  Nominally 3125 bytessecond, but the MIDI port's clock might be
  1% too slow, and the bus clock 100 ppm too fast.
 Each data block includes SPH in its head. Data chunks follow with
 3 byte alignment. Padding follows with zero to conform to quadlet
 alignment.
 TODO: how to set an constraint for exactly 24bit PCM sample? 
 For tracepoints. 
 For tracepoints. 
 This is just for v2v3 protocol. 
 For data block processing.
 For tracepoints.
 For data block processing.
 For tracepoints.
		
		  Units of version 3 transmits packets with invalid CIP header
		  against IEC 61883-1.
 8pre has some quirks.
 Use fixed value for FDF field.
 SPDX-License-Identifier: GPL-2.0-only
  motu.c - a part of driver for MOTU FireWire series
  Copyright (c) 2015-2017 Takashi Sakamoto <o-takashi@sakamocchi.jp>
 mode 0 
 mode 1 
 mode 2 
 Block till all of ALSA character devices are released.
 The handler address register becomes initialized. 
 FireWire only.
 FireWire only.
 Hybrid.
 Hybrid.
 SPDX-License-Identifier: GPL-2.0-only
  oxfw_hwdep.c - a part of driver for OXFW970971 based devices
  Copyright (c) 2014 Takashi Sakamoto
  This codes give three functionality.
  1.get firewire node information
  2.get notification about startingstopping stream
  3.lockunlock stream
 SPDX-License-Identifier: GPL-2.0-only
  oxfw_proc.c - a part of driver for OXFW970971 based devices
  Copyright (c) 2014 Takashi Sakamoto
 Show input. 
 Show output. 
	
	  All nodes are automatically removed at snd_card_disconnect(),
	  by following to link list.
 SPDX-License-Identifier: GPL-2.0-only
  oxfw_stream.c - a part of driver for OXFW970971 based devices
  Copyright (c) 2014 Takashi Sakamoto
  According to datasheet of Oxford Semiconductor:
   OXFW970: 32.044.148.096.0 Khz, 8 audio channels IO
   OXFW971: 32.044.148.088.296.0192.0 kHz, 16 audio channels IO, MIDI IO
  See Table 5.7 – Sampling frequency for Multi-bit Audio
  in AVC Stream Format Information Specification 1.1 (Apr 2005, 1394TA)
 Seek stream format for requirements. 
 If assumed, just change rate. 
 Calculate format length. 
 Some requests just after changing format causes freezing. 
 OXFW 970971 has no function to generate playback timing according to the sequence
 of value in syt field, thus the packet should include NO_INFO value in the field.
 However, some models just ignore data blocks in packet with NO_INFO for audio data
 processing.
 The stream should have one pcm channels at least.
 Considering JACKFFADO streaming:
 TODO: This can be removed hwdep functionality becomes popular.
 Just after changing sampling transfer frequency, many cycles are
 skipped for packet transmission.
 It takes a bit time for target device to adjust event frequency
 according to nominal event frequency in isochronous packets from
 ALSA oxfw driver.
 NOTE: The device ignores presentation time expressed by the value of syt field
 of CIP header in received packets. The sequence of the number of data blocks per
 packet is important for media clock recovery.
 This function should be called before starting the stream or after stopping
 the streams.
  See Table 6.16 - AM824 Stream Format
      Figure 6.19 - format_information field for AM824 Compound
  in AVC Stream Format Information Specification 1.1 (Apr 2005, 1394TA)
  Also 'Clause 12 AM824 sequence adaption layers' in IEC 61883-6:2005
	
	  this module can support a hierarchy combination that:
	   Root:	Audio and Music (0x90)
	   Level 1:	AM824 Compound  (0x40)
 check the sampling rate 
 IEC 60958 Conformant, currently handled as MBLA 
 Multi Bit Linear Audio (Raw) 
 MIDI Conformant 
 IEC 61937-3 to 7 
 Multi Bit Linear Audio 
 DVD-Audio 
 High Precision 
 One Bit Audio 
 (Plain) Raw 
 (Plain) SACD 
 (Encoded) Raw 
 (Encoded) SACD 
 SMPTE Time-Code conformant 
 Sample Count 
 Anciliary Data 
 Synchronization Stream (Stereo Raw audio) 
 Don't care 
 not supported 
 get format at current sampling rate 
 parse and set stream format 
 apply the format for each available sampling rate 
 get first entry 
 LIST subfunction is not implemented 
 LIST subfunction is implemented 
 The format is too short. 
 parse and set stream format 
 get next entry 
 No entries remained. 
 the number of plugs for isoc inout, ext inout  
 use oPCR[0] if exists 
 The oPCR is not available for isoc communication.
 Add one MIDI port. 
 use iPCR[0] if exists 
 The iPCR is not available for isoc communication.
 Add one MIDI port. 
 user land lock this 
 this is the first time 
 SPDX-License-Identifier: GPL-2.0-only
  oxfw_command.c - a part of driver for OXFW970971 based devices
  Copyright (c) 2014 Takashi Sakamoto
 CONTROL 
 UNIT 
 EXTENDED STREAM FORMAT INFORMATION 
 SINGLE subfunction 
 Plug Direction 
 UNIT 
 PCR (Isochronous Plug) 
 Plug ID 
 Padding 
 Support status in response 
 do transaction and check buf[1-8] are the same against command 
 NOT IMPLEMENTED 
 REJECTED 
 SINGLE 
 LIST 
 STATUS 
 UNIT 
 EXTENDED STREAM FORMAT INFORMATION 
 SINGLE or LIST 
 Plug Direction 
 Unit 
 PCR (Isochronous Plug) 
 Plug ID 
 Padding 
 support status in response 
 entry ID for LIST subfunction 
 padding 
 do transaction and check buf[1-7] are the same against command 
 NOT IMPLEMENTED 
 REJECTED 
 IN TRANSITION 
 LIST subfunction has entry ID 
 keep just stream format information 
 SPECIFIC INQUIRY 
 UNIT 
 INPUT PLUG SIGNAL FORMAT 
 OUTPUT PLUG SIGNAL FORMAT 
 plug id 
 EOH_1, Form_1, FMT. AM824 
 FDF-hi. AM824, frequency 
 FDF-mid. AM824, SYT hi (not used) 
 FDF-low. AM824, SYT lo (not used) 
 do transaction and check buf[1-5] are the same against command 
 NOT IMPLEMENTED 
 SPDX-License-Identifier: GPL-2.0-only
  oxfw_midi.c - a part of driver for OXFW970971 based devices
  Copyright (c) 2014 Takashi Sakamoto
 create midi ports 
 SPDX-License-Identifier: GPL-2.0-only
  oxfw_pcm.c - a part of driver for OXFW970971 based devices
  Copyright (c) Clemens Ladisch <clemens@ladisch.de>
 When source of clock is not internal or any stream is reserved for
 transmission of PCM frames, the available sampling rate is limited
 at current one.
 SPDX-License-Identifier: GPL-2.0-only
  oxfw-spkr.c - a part of driver for OXFW970971 based devices
  Copyright (c) Clemens Ladisch <clemens@ladisch.de>
 AVC, STATUS 
       STABLE 
 AVC, CONTROL 
       ACCEPTED 
 audio unit 0 
 FUNCTION BLOCK 
 function block type: feature 
 function block ID 
 control attribute: current 
 selector length 
 audio channel number 
 control selector: mute 
 control data length 
 AVC, STATUS 
       STABLE 
 AVC, CONTROL 
       ACCEPTED 
 audio unit 0 
 FUNCTION BLOCK 
 function block type: feature 
 function block ID 
 control attribute 
 selector length 
 audio channel number 
 control selector: volume 
 control data length 
 SPDX-License-Identifier: GPL-2.0-only
  oxfw-scs1x.c - a part of driver for OXFW970971 based devices
  Copyright (c) Clemens Ladisch <clemens@ladisch.de>
  Copyright (c) 2015 Takashi Sakamoto <o-takashi@sakamocchi.jp>
 For MIDI playback. 
 SysEx begin 
 Stanton DJ 
 "HSS" 
 Don't retry for this data. 
		
		  Convert from real MIDI to what I think the device expects (no
		  running status, one command per packet, unescaped SysExs).
 node_id vs. generation 
 Allocate own handler for imcoming asynchronous transaction. 
 Use unique name for backward compatibility to scs1x module. 
 SPDX-License-Identifier: GPL-2.0-only
  oxfw.c - a part of driver for OXFW970971 based devices
  Copyright (c) Clemens Ladisch <clemens@ladisch.de>
 0x970?vvvv or 0x971?vvvv, where vvvv = firmware version 
 get vendor name from root directory 
 get model name from unit directory 
 to apply card definitions 
	
	  Add ALSA control elements for two models to keep compatibility to
	  old firewire-speaker module.
	
	  Stanton models supports asynchronous transactions for unique MIDI
	  messages.
 No physical MIDI ports.
	
	  TASCAM FireOne has physical control and requires a pair of additional
	  MIDI ports.
 Seek from Root Directory of Config ROM. 
 Mackie Onyx Satellite with base station has a quirk to report a wrong
 value in 'dbs' field of CIP header against its format information.
 OXFW971-based models may transfer events by blocking method.
Unless receiving packets without NOINFO packet, the device transfers
mostly half of events in packets than expected.
 Block till all of ALSA character devices are released.
 OXFW970 devices:
 Initial firmware has a quirk to postpone isoc packet transmission during finishing async
 transaction. As a result, several isochronous cycles are skipped to transfer the packets
 and the audio data frames which should have been transferred during the cycles are put
 into packet at the first isoc cycle after the postpone. Furthermore, the value of SYT
 field in CIP header is not reliable as synchronization timing,
 Behringer,F-Control Audio 202. The value of SYT field is not reliable at all.
 Loud Technologies, Tapco Link.FireWire 4x6. The value of SYT field is always 0xffff.
 Loud Technologies, Mackie Onyx Satellite. Although revised version of firmware is
 installed to avoid the postpone, the value of SYT field is always 0xffff.
 Miglia HarmonyAudio. Not yet identified.
 OXFW971 devices:
 The value of SYT field in CIP header is enough reliable. Both of blocking and non-blocking
 transmission methods are available.
 Any Mackie(Loud) models (name stringmodel id):
  Onyx-i series (former models):	0x081216
  Onyx 1640i:				0x001640
  d.2 prod.4 pro (built-in card):	Unknown
  U.420:				Unknown
  U.420d:				Unknown
 TASCAM, FireOne.
 Stanton, Stanton Controllers & Systems 1 Mixer (SCS.1m).
 Stanton, Stanton Controllers & Systems 1 Deck (SCS.1d).
 APOGEE, duet FireWire.
 SPDX-License-Identifier: GPL-2.0-only
  tascam-pcm.c - a part of driver for TASCAM FireWire series
  Copyright (c) 2015 Takashi Sakamoto
 When source of clock is not internal or any stream is reserved for
 transmission of PCM frames, the available sampling rate is limited
 at current one.
 SPDX-License-Identifier: GPL-2.0-only
  tascam.c - a part of driver for TASCAM FireWire series
  Copyright (c) 2015 Takashi Sakamoto
 Pick up model name from certain addresses. 
 Block till all of ALSA character devices are released.
 Tascam, FW-1884.
 Tascam, FE-8 (.version = 0x800001)
 This kernel module doesn't support FE-8 because the most of features
 can be implemented in userspace without any specific support of this
 module.
 .version = 0x800002 is unknown.
 Tascam, FW-1082.
 Tascam, FW-1804.
 SPDX-License-Identifier: GPL-2.0-only
  tascam-midi.c - a part of driver for TASCAM FireWire series
  Copyright (c) 2015 Takashi Sakamoto
 Do nothing. 
 Do nothing. 
 Set port names for MIDI input. 
 TODO: support virtual MIDI ports. 
 Hardware MIDI ports. 
 Set port names for MIDI ourput. 
 Hardware MIDI ports only. 
 SPDX-License-Identifier: GPL-2.0-only
  tascam-hwdep.c - a part of driver for TASCAM FireWire series
  Copyright (c) 2015 Takashi Sakamoto
  This codes give three functionality.
  1.get firewire node information
  2.get notification about startingstopping stream
  3.lockunlock stream
 At least, one control event can be copied.
 Copy the type field later.
 NOTE: The acquired lock should be released in callee side.
 SPDX-License-Identifier: GPL-2.0-only
  tascam-proc.h - a part of driver for TASCAM FireWire series
  Copyright (c) 2015 Takashi Sakamoto
	
	  All nodes are automatically removed at snd_card_disconnect(),
	  by following to link list.
 SPDX-License-Identifier: GPL-2.0-only
  tascam-stream.c - a part of driver for TASCAM FireWire series
  Copyright (c) 2015 Takashi Sakamoto
 In intermediate state after changing clock status.
 Still in the intermediate state.
 Base rate. 
 Multiplier. 
 Multiplier. 
 Check base rate. 
 Check multiplier. 
 Set an option for unknown purpose.
 Unregister channels.
 Register the isochronous channel for transmitting stream.
 Unknown.
 Register the isochronous channel for receiving stream.
 Set an option for unknown purpose.
 Start multiplexing PCM samples on packets.
 At bus reset, streaming is stopped and some registers are clear.
 This function should be called before starting streams or after stopping
 streams.
 MEMO: Just after starting packet streaming, it transfers packets without any
 event. Enough after receiving the sequence of packets, it multiplexes events into
 the packet. However, just after changing sampling transfer frequency, it stops
 multiplexing during packet transmission. Enough after, it restarts multiplexing
 again. The device ignores presentation time expressed by the value of syt field
 of CIP header in received packets. The sequence of the number of data blocks per
 packet is important for media clock recovery.
 user land lock this 
 this is the first time 
 SPDX-License-Identifier: GPL-2.0-only
  tascam-transaction.c - a part of driver for TASCAM FireWire series
  Copyright (c) 2015 Takashi Sakamoto
  When return minus value, given argument is not MIDI status.
  When return 0, given argument is a beginning of system exclusive.
  When return the others, given argument is MIDI data.
 Tune request. 
 Timing clock. 
 Start. 
 Continue. 
 Stop. 
 Active sensing. 
 System reset. 
 MIDI time code quarter frame. 
 Song select. 
 Song position pointer. 
 Exclusive. 
 End of exclusive. 
 Undefined. 
 Undefined. 
 Undefined. 
 Undefined. 
 Note on. 
 Note off. 
 Polyphonic key pressure. 
 Control change and Mode change. 
 Pitch bend change. 
 Program change. 
 Channel pressure. 
 The first byte is used for label, the rest for MIDI bytes. 
 On exclusive message. 
 Seek the end of exclusives. 
 At the end of exclusive message, use label 0x07. 
 During exclusive message, use label 0x04. 
 We need to fill whole 3 bytes. Go to next change. 
 The beginning of exclusives. 
 Transfer it in next chance in another condition. 
 On running-status. 
 Calculate consume bytes. 
 On running-status. 
 Enough MIDI bytes were not retrieved. 
 Enough MIDI bytes were not retrieved. 
 This port is closed. 
 To start next transaction immediately for recovery. 
 Don't continue processing. 
 Under transacting or error state. 
 Nothing to do. 
 Do it in next chance. 
	
	  Fill the buffer. The callee must use snd_rawmidi_transmit_peek().
	  Later, snd_rawmidi_transmit_ack() is called.
 Do it in next chance, immediately. 
 Fatal error. 
 Set interval to next transaction. 
 Start this transaction. 
	
	  In Linux FireWire core, when generation is updated with memory
	  barrier, node id has already been updated. In this module, After
	  this smp_rmb(), loadstore instructions to memory are completed.
	  Thus, both of generation and node id are available with recent
	  values. This is a light-serialization solution to handle bus reset
	  events on IEEE 1394 bus.
 TODO: support virtual MIDI ports. 
 Assume the message length. 
 On MIDI data or exclusives. 
 Seek the end of exclusives. 
	
	  Usually, two quadlets are transferred by one transaction. The first
	  quadlet has MIDI messages, the rest includes timestamp.
	  Sometimes, 8 set of the data is transferred by a block transaction.
 At bus reset, these registers are cleared. 
 Register messaging address. Block transaction is not allowed. 
 Turn on messaging. 
 Turn on FireWire LED. 
 Turn off FireWire LED. 
 Turn off messaging. 
 Unregister the address. 
 SPDX-License-Identifier: GPL-2.0-only
  amdtp-tascam.c - a part of driver for TASCAM FireWire series
  Copyright (c) 2015 Takashi Sakamoto
 Packets in in-stream have extra 2 data channels. 
 The first data channel is for event counter. 
	
	  Our implementation allows this protocol to deliver 24 bit sample in
	  32bit data channel.
 Use fixed value for FDF field.
 This protocol uses fixed number of data channels for PCM samples. 
 SPDX-License-Identifier: GPL-2.0-only
  bebob_midi.c - a part of driver for BeBoB based devices
  Copyright (c) 2013-2014 Takashi Sakamoto
 create midi ports 
 SPDX-License-Identifier: GPL-2.0-only
  bebob_stream.c - a part of driver for BeBoB based devices
  Copyright (c) 2013-2014 Takashi Sakamoto
  NOTE;
  For BeBoB streams, Both of input and output CMP connection are important.
  For most devices, each CMP connection starts to transmitreceive a
  corresponding stream. But for a few devices, both of CMP connection needs
  to start transmitting stream. An example is 'M-Audio Firewire 410'.
 128 is an arbitrary length but it seems to be enough 
  See: Table 51: Extended Stream Format Info ‘Sampling Frequency’
  in Additional AVC commands (Nov 2003, BridgeCo)
 synchronize receive stream rate to transmit stream rate 
	
	  Some devices need a bit time for transition.
	  300msec is got by some experiments.
 1.The device has its own operation to switch source of clock 
	
	  2.The device don't support to switch source of clock then assumed
	    to use internal clock always
	
	  3.The device supports to switch source of clock by an usual way.
	    Let's check input for 'Music Sub Unit Sync Input' plug.
	
	  If there are no input plugs, all of fields are 0xff.
	  Here check the first field. This field is used for direction.
 The source from any output plugs is for one purpose only. 
		
		  In BeBoB architecture, the source from music subunit may
		  bypass from oPCR[0]. This means that this source gives
		  synchronization to IEEE 1394 cycle start packet.
 The source from any input units is for several purposes. 
				
				  This source comes from iPCR[0]. This means
				  that presentation timestamp calculated by
				  SYT series of the received packets. In
				  short, this driver is the master of
				  synchronization.
				
				  This source comes from iPCR[1-29]. This
				  means that the synchronization stream is not
				  the AudioMIDI compound stream.
 Check type of this plug.  
				
				  SPDIFADAT or sometimes (not always) word
				  clock.
 Often word clock. 
				
				  Not standard.
				  Mostly, additional internal clock.
 Not supported. 
	
	  The length of return value of this command cannot be expected. Here
	  use the maximum length of FCP.
 positions in IO buffer 
 the number of sections in AMDTP packet 
 type of this section 
 NoType 
 the number of channels in this section 
 position of this channel in AMDTP packet 
 location of this channel in this section 
			
			  Basically the number of location is within the
			  number of channels in this section. But some models
			  of M-Audio don't follow this. Its location for MIDI
			  is the position of MIDI channels in AMDTP packet.
 for MIDI conformant data channel 
 AMDTP_MAX_CHANNELS_FOR_MIDI is 1. 
 for PCM data channel 
 Headphone 
 Microphone 
 Line 
 SPDIF 
 ADAT 
 TDIF 
 MADI 
 for undefinedchangeable signal  
 Analog 
 Digital 
 channel mapping.
 Considering JACKFFADO streaming:
 TODO: This can be removed hwdep functionality becomes popular.
 NOTE:
 If establishing connections at first, Yamaha GO46
 (and maybe Terratec X24) don't generate sound.
 For firmware customized by M-Audio, refer to next NOTE.
 Need no substreams.
 packet queueing error or detecting discontinuity
 MEMO: Some devices start packet transmission long enough after establishment of
 CMP connection. In the early stage of packet streaming, any device transfers
 NODATA packets. After several hundred cycles, it begins to multiplex event into
 the packet with adequate value of syt field in CIP header. Some devices are
 strictly to generate any discontinuity in the sequence of tx packet when they
 receives inadequate sequence of value in syt field of CIP header. In the case,
 the request to break CMP connection is often corrupted, then any transaction
 results in unrecoverable error, sometimes generate bus-reset.
 NOTE:
 The firmware customized by M-Audio uses these commands to
 start transmitting stream. This is not usual way.
 Some devices postpone start of transmission mostly for 1 sec after receives
 packets firstly.
  This function should be called before starting streams or after stopping
  streams.
  See: Table 50: Extended Stream Format Info Format Hierarchy Level 2’
  in Additional AVC commands (Nov 2003, BridgeCo)
  Also 'Clause 12 AM824 sequence adaption layers' in IEC 61883-6:2005
	
	  this module can support a hierarchy combination that:
	   Root:	Audio and Music (0x90)
	   Level 1:	AM824 Compound  (0x40)
 check sampling rate 
 Avoid double count by different entries for the same rate. 
 IEC 60958 Conformant, currently handled as MBLA 
 Multi bit linear audio 
 Raw 
 MIDI Conformant 
 IEC 61937-3 to 7 
 Multi bit linear audio 
 DVD-Audio 
 High Precision 
 One Bit Audio 
 (Plain) Raw 
 (Plain) SACD 
 (Encoded) Raw 
 (Encoded) SACD 
 Synchronization Stream (Stereo Raw audio) 
 Don't care 
 not supported 
 No entries remained.
 Yamaha GO44, GO46, Terratec Phase 24, Phase x24 reports 0 for the number of
 channels in external output plug 3 (MIDI type) even if it has a pair of physical
 MIDI jacks. As a workaround, assume it as one.
 Get the number of Music Sub Unit for both direction. 
 seek destination plugs for 'MSU sync input' 
 the number of plugs for isoc inout, ext inout  
	
	  This module supports at least one isoc input plug and one isoc
	  output plug.
 for check source of clock later 
 user land lock this 
 this is the first time 
 SPDX-License-Identifier: GPL-2.0-only
  bebob_proc.c - a part of driver for BeBoB based devices
  Copyright (c) 2013-2014 Takashi Sakamoto
 contents of information register 
 may not used in product
	u64 dbg_date;
	u64 dbg_time;
	u32 dbg_id;
	u32 dbg_version;
	
	  All nodes are automatically removed at snd_card_disconnect(),
	  by following to link list.
 SPDX-License-Identifier: GPL-2.0-only
  bebob_focusrite.c - a part of driver for BeBoB based devices
  Copyright (c) 2013-2014 Takashi Sakamoto
 whether sync to external device or not 
 clock sources as returned from register of Saffire Pro 10 and 26 
 never used on hardware 
 not used on s.pro. 10 
 not used on s.pro. 10 
 SPDIF, ADAT1, ADAT2 is enabled or not. three quadlets 
 saffirepro has its own parameter for sampling frequency 
 index is the value for this register 
 saffire(no label)saffire LE has metering 
 SPDIF 
 Word Clock 
 SPDIF 
 ADAT1 
 ADAT2 
 Word Clock 
 Value maps between registers and labels for SaffirePro 1026. 
 SaffirePro 10 
 not supported 
 not supported 
 not supported 
 SaffirePro 26 
 not supported 
  query hardware for current clock source, return our internally
  used clock index in id, depending on hardware.
 clock source read from hw register 
 depending on hardware, use a different mapping 
 In a case that this driver cannot handle the value of register. 
 Saffire Pro 26 IO  
 Saffire Pro 10 IO 
 Saffire LE 
 Saffire 
 SPDX-License-Identifier: GPL-2.0-only
  bebob.c - a part of driver for BeBoB based devices
  Copyright (c) 2013-2014 Takashi Sakamoto
  BeBoB is 'BridgeCo enhanced Breakout Box'. This is installed to firewire
  devices with DM1000DM1100DM1500 chipset. It gives common way for host
  system to handle BeBoB based devices.
 Offsets from information register. 
 get vendor name from root directory 
 get model name from unit directory 
 get hardware id 
 get hardware revision 
 get GUID 
 M-Audio ProFire Lightbridge has a quirk to transfer packets with
 discontinuous cycle or data block counter in early stage of packet
 streaming. The cycle span from the first packet with event is variable.
 At high sampling rate, M-Audio special firmware transmits empty packet
 with the value of dbc incremented by 8.
 To boot up M-Audio models.
 This is a workaround. This bus reset seems to have an effect to make devices
 correctly handling transactions. Without this, the devices have gap_count
 mismatch. This causes much failure of transaction.
 Just after registration, user-land application receive signals from dbus and
 starts IOs. To avoid IOs till the future bus reset, registration is done in
 next update().
  This driver doesn't update streams in bus reset handler.
  DM1000 DM1100DM1500 chipsets with BeBoB firmware transfer packets with
  discontinued counter at bus reset. This discontinuity is immediately
  detected in packet streaming layer, then it sets XRUN to PCM substream.
  ALSA PCM applications can know the XRUN by getting -EPIPE from PCM operation.
  Then, they can recover the PCM substream by executing ioctl(2) with
  SNDRV_PCM_IOCTL_PREPARE. 'struct snd_pcm_ops.prepare' is called and drivers
  restart packet streaming.
  The above processing may be executed before this bus-reset handler is
  executed. When this handler updates streams with current isochronous
  channels, the streams already have the current ones.
 Block till all of ALSA character devices are released.
 The immediate entry for version in unit directory differs depending on models:
   0x010001
   0x014001
 Edirol, FA-66 
 Edirol, FA-101 
 Presonus, FIREBOX 
 PreSonus, FIREPODFP10 
 PreSonus, Inspire1394 
 BridgeCo, RDAudio1 
 BridgeCo, Audio5 
 Mackie, Onyx 122016201640 (Firewire IO Card) 
 Mackie, d.2 (optional Firewire card with DM1000).
 Stanton, ScratchAmp 
 Tascam, IF-FW DM 
 Behringer, XENIX UFX 1204 
 Behringer, XENIX UFX 1604 
 Behringer, Digital Mixer X32 series (X-UF Card) 
  Behringer, F-Control Audio 1616 
  Behringer, F-Control Audio 610 
 Apogee Electronics, Rosetta 200400 (X-FireWire card) 
 Apogee Electronics, DAADDD-16X (X-FireWire card) 
 Apogee Electronics, Ensemble 
 ESI, Quatafire610 
 CME, MatrixKFW 
 Phonic Helix Board 12 FireWire MkII.
 Phonic Helix Board 18 FireWire MkII.
 Phonic Helix Board 24 FireWire MkII.
 Phonic FireFly 808 FireWire.
 Phonic FireFly 202, 302, 808 Universal.
 Phinic Helix Board 121824 FireWire, 121824 Universal
 Lynx, Aurora 816 (LT-FW) 
 ICON, FireXon 
 PrismSound, Orpheus 
 PrismSound, ADA-8XR 
 TerraTec Electronic GmbH, PHASE 88 Rack FW 
 TerraTec Electronic GmbH, PHASE 24 FW 
 TerraTec Electronic GmbH, Phase X24 FW 
 TerraTec Electronic GmbH, EWS MIC2MIC8 
 Terratec Electronic GmbH, Aureon 7.1 Firewire.
 AcousticReality, eAR Master One, Eroica, Figaro, and Ciaccona. Perhaps Terratec OEM.
 Yamaha, GO44 
 YAMAHA, GO46 
 Focusrite, SaffirePro 26 IO 
 Focusrite, SaffirePro 10 IO 
 Focusrite, Saffire(no label and LE) 
 M-Audio, Firewire 410. The vendor field is left as BridgeCo. AG.
 M-Audio, Firewire Audiophile 
 M-Audio, Firewire Solo 
 M-Audio, Ozonic 
 M-Audio NRV10 
 M-Audio, ProFireLightbridge 
 Firewire 1814 
 bootloader 
 M-Audio ProjectMix 
 Digidesign Mbox 2 Pro 
 Toneweal FW66.
 IDs are unknown but able to be supported 
  Apogee, Mini-ME Firewire 
  Apogee, Mini-DAC Firewire 
  Cakawalk, Sonar Power Studio 66 
  CME, UF400e 
  ESI, Quotafire XL 
  Infrasonic, DewX 
  Infrasonic, Windy6 
  Mackie, Digital X Bus x.200 
  Mackie, Digital X Bus x.400 
  Rolf Spuler, Firewire Guitar 
 SPDX-License-Identifier: GPL-2.0-only
  bebob_maudio.c - a part of driver for BeBoB based devices
  Copyright (c) 2013-2014 Takashi Sakamoto
  Just powering on, Firewire 410Audiophile1814 and ProjectMix IO wait to
  download firmware blob. To enable these devices, drivers should upload
  firmware blob and send a command to initialize configuration to factory
  settings when completing uploading. Then these devices generate bus reset
  and are recognized as new devices with the firmware.
  But with firmware version 5058 or later, the firmware is stored to flash
  memory in the device and drivers can tell bootloader to load the firmware
  by sending a cue. This cue must be sent one time.
  For streaming, both of output and input streams are needed for Firewire 410
  and Ozonic. The single stream is OK for the other devices even if the clock
  source is not SYT-Match (I note no devices use SYT-Match).
  Without streaming, the devices except for Firewire Audiophile can mix any
  input and output. For this reason, Audiophile cannot be used as standalone
  mixer.
  Firewire 1814 and ProjectMix IO uses special firmware. It will be freezed
  when receiving any commands which the firmware can't understand. These
  devices utilize completely different system to control. It is some
  write-transaction directly into a certain address. All of addresses for mixer
  functionality is between 0xffc700700000 to 0xffc70070009c.
 Offset from information register 
 Bootloader Protocol Version 1 
  Initializing configuration to factory settings (= 0x1101), (swapped in line),
  Command code is zero (= 0x00),
  the number of operands is zero (= 0x00)(at least significant byte)
 padding 
 some device has sync info after metering data 
 with sync info 
 with sync info 
 with sync info 
 with sync info 
 labels for metering 
 for NRV 
  For some M-Audio devices, this module just send cue to load firmware. After
  loading, the device generates bus reset and newly detected.
  If we make any transactions to load firmware, the operation may failed.
 check date of software used to build 
	
	  firmware version 5058 or later has date later than "20070401", but
	  'date' is not null-terminated.
 if synced, this value is the same as SFC of FDF in CIP header 
  dig_fmt: 0x00:SPDIF, 0x01:ADAT
  clk_lock: 0x00:unlock, 0x01:lock
 CONTROL 
 UNIT 
 vendor dependent 
 company ID high 
 company ID middle 
 company ID low 
 clock source 
 input digital format 
 output digital format 
 lock these settings 
 padding  
 padding 
 NOT IMPLEMENTED 
 REJECTED 
 AMDTP_OUT_STREAM 
 SPDIF 
 ADAT 
 AMDTP_IN_STREAM 
 SPDIF 
 ADAT 
 initialize these parameters because driver is not allowed to ask 
 Input plug shows actual rate. Output plug is needless for this purpose. 
	
	  Just after changing sampling rate for output, a followed command
	  for input is easy to fail. This is a workaround fot this issue.
 Clock source control for special firmware 
 With digital mute 
 SPDIFADAT 
 Word Clock 
 Clock synchronization control for special firmware 
 Digital input interface control for special firmware 
 encoded id for user value 
 for ADAT Optical 
 decode user value 
 For ADAT, optical interface is only available. 
 For SPDIF, opticalcoaxial interfaces are selectable. 
 Digital output interface control for special firmware 
 Hardware metering for special firmware 
 omit last 4 bytes because it's clock info. 
 Its format is u16 and some channels are unknown. 
 last 4 bytes are omitted because it's clock info. 
 no clock info 
 TODO: need testers. these positions are based on authour's assumption 
 swap stream channels because inverted 
 for special customized devices 
 Firewire 410 specification 
 Firewire Audiophile specification 
 Firewire Solo specification 
 Ozonic specification 
 NRV10 specification 
 SPDX-License-Identifier: GPL-2.0-only
  bebob_yamaha.c - a part of driver for BeBoB based devices
  Copyright (c) 2013-2014 Takashi Sakamoto
  NOTE:
  Yamaha GO44 is not designed to be used as stand-alone mixer. So any streams
  must be accompanied. If changing the state, a LED on the device starts to
  blink and its sync status is false. In this state, the device sounds nothing
  even if streaming. To start streaming at the current sampling rate is only
  way to recover this state. GO46 is better for stand-alone mixer.
  Both of them have a capability to change its sampling rate up to 192.0kHz.
  At 192.0kHz, the device reports 4 PCM-in, 1 MIDI-in, 6 PCM-out, 1 MIDI-out.
  But Yamaha's driver reduce 2 PCM-in, 1 MIDI-in, 2 PCM-out, 1 MIDI-out to use
  'Extended Stream Format Information Command - Single Request' in 'Additional
  AVC commands' defined by BridgeCo.
  This ALSA driver don't do this because a bit tiresome. Then isochronous
  streaming with many asynchronous transactions brings sounds with noises.
  Unfortunately current 'ffado-mixer' generated many asynchronous transaction
  to observe device's state, mainly check cmp connection and signal format. I
  recommend users to close ffado-mixer at 192.0kHz if mixer is needless.
  Terratec PHASE 24 FW and PHASE X24 FW are internally the same as
  Yamaha GO 44 and GO 46. Yamaha and Terratec had cooperated for these models.
 SPDIF 
 SPDX-License-Identifier: GPL-2.0-only
  bebob_terratec.c - a part of driver for BeBoB based devices
  Copyright (c) 2013-2014 Takashi Sakamoto
 SPDIF 
 Word Clock 
 PHASE 88 Rack FW 
 SPDX-License-Identifier: GPL-2.0-only
  bebob_pcm.c - a part of driver for BeBoB based devices
  Copyright (c) 2013-2014 Takashi Sakamoto
 entry is invalid 
 entry is invalid 
 entry has no PCM channels 
 When source of clock is not internal or any stream is reserved for
 transmission of PCM frames, the available sampling rate is limited
 at current one.
 SPDX-License-Identifier: GPL-2.0-only
  bebob_hwdep.c - a part of driver for BeBoB based devices
  Copyright (c) 2013-2014 Takashi Sakamoto
  This codes give three functionality.
  1.get firewire node infomation
  2.get notification about startingstopping stream
  3.lockunlock stream
 SPDX-License-Identifier: GPL-2.0-only
  bebob_command.c - driver for BeBoB based devices
  Copyright (c) 2013-2014 Takashi Sakamoto
 AVC CONTROL 
 AUDIO SUBUNIT ID 
 FUNCTION BLOCK  
 type is 'selector'
 function block id 
 control attribute is CURRENT 
 selector length is 2 
 input function block plug number 
 control selector is SELECTOR_CONTROL 
 NOT IMPLEMENTED 
 REJECTED 
 AVC STATUS 
 AUDIO SUBUNIT ID 
 FUNCTION BLOCK 
 type is 'selector'
 function block id 
 control attribute is CURRENT 
 selector length is 2 
 input function block plug number 
 control selector is SELECTOR_CONTROL 
 NOT IMPLEMENTED 
 REJECTED 
 IN TRANSITION 
 AVC STATUS 
 AVC GENERAL PLUG INFO 
 BridgeCo extension 
 info type 
 Info type is 'plug type'. 
 NOT IMPLEMENTED 
 REJECTED 
 IN TRANSITION 
 Info type is 'plug type'.
 NOT IMPLEMENTED
 REJECTED
 IN TRANSITION
 Info type is 'channel position'. 
 NOT IMPLEMENTED 
 REJECTED 
 IN TRANSITION 
 Pick up specific data. 
 section info includes charactors but this module don't need it 
 Info type is 'section info'. 
 section id 
 NOT IMPLEMENTED 
 REJECTED 
 IN TRANSITION 
 Info type is 'plug input'. 
 NOT IMPLEMENTED 
 REJECTED 
 IN TRANSITION 
 check given buffer 
 AVC STATUS 
 AVC STREAM FORMAT SUPPORT 
 Bridgeco extension - List Request 
 Entry ID 
 NOT IMPLEMENTED 
 REJECTED 
 IN TRANSITION 
 Pick up 'stream format info'. 
 SPDX-License-Identifier: GPL-2.0-only
  digi00x-hwdep.c - a part of driver for Digidesign Digi 002003 family
  Copyright (c) 2014-2015 Takashi Sakamoto
  This codes give three functionality.
  1.get firewire node information
  2.get notification about startingstopping stream
  3.lockunlock stream
  4.get asynchronous messaging
 SPDX-License-Identifier: GPL-2.0-only
  digi00x-pcm.c - a part of driver for Digidesign Digi 002003 family
  Copyright (c) 2014-2015 Takashi Sakamoto
 Check current clock source. 
 When source of clock is not internal or any stream is reserved for
 transmission of PCM frames, the available sampling rate is limited
 at current one.
 SPDX-License-Identifier: GPL-2.0-only
  digi00x-midi.h - a part of driver for Digidesign Digi 002003 family
  Copyright (c) 2014-2015 Takashi Sakamoto
 Add physical midi ports. 
 Add physical midi ports. 
 SPDX-License-Identifier: GPL-2.0-only
  digi00x-stream.c - a part of driver for Digidesign Digi 002003 family
  Copyright (c) 2014-2015 Takashi Sakamoto
 Multi Bit Linear Audio data channels for each sampling transfer frequency. 
 AnalogADATSPDIF 
 AnalogSPDIF 
 This means desync. 
 Unregister isochronous channels for both direction.
 Just after finishing the session, the device may lost transmitting
 functionality for a short time.
 Register isochronous channels for both direction.
 Check sampling rate.
  This function should be called before starting streams or after stopping
  streams.
	
	  No packets are transmitted without receiving packets, reagardless of
	  which source of clock is used.
 NOTE: The device doesn't start packet transmission till receiving any packet.
 It ignores presentation time expressed by the value of syt field of CIP header
 in received packets. The sequence of the number of data blocks per packet is
 important for media clock recovery.
 user land lock this 
 this is the first time 
 SPDX-License-Identifier: GPL-2.0-only
  digi00x-proc.c - a part of driver for Digidesign Digi 002003 family
  Copyright (c) 2014-2015 Takashi Sakamoto
	
	  All nodes are automatically removed at snd_card_disconnect(),
	  by following to link list.
 SPDX-License-Identifier: GPL-2.0-only
  amdtp-dot.c - a part of driver for Digidesign Digi 002003 family
  Copyright (c) 2014-2015 Takashi Sakamoto
  Copyright (C) 2012 Robin Gareus <robin@gareus.org>
  Copyright (C) 2012 Damien Zammit <damien@zamaudio.com>
 'Clock-based rate control mode' is just supported. 
  Nominally 3125 bytessecond, but the MIDI port's clock might be
  1% too slow, and the bus clock 100 ppm too fast.
  Several devices look only at the first eight data blocks.
  In any case, this is more than enough for the MIDI data rate.
 3 = MAX(DOT_MIDI_IN_PORTS, DOT_MIDI_OUT_PORTS) + 1. 
  The double-oh-three algorithm was discovered by Robin Gareus and Damien
  Zammit in 2012, with reverse-engineering for Digi 003 Rack.
  double-oh-three look up table
  @param idx index byte (audio-sample data) 0x00..0xff
  @param off channel offset shift
  @return salt to XOR with given data
	
	  the length of the added pattern only depends on the lower nibble
	  of the last non-zero data
	
	  the lower nibble of the salt. Interleaved sequence.
	  this is walked backwards according to len[]
 circular list for the salt's hi nibble. 
	
	  start offset for upper nibble mapping.
	  note: 9 is special. In the case where the high nibble == 0x9,
	  hir[] is not used and - coincidentally - the salt's hi nibble is
	  0x09 regardless of the offset.
	
	  A first data channel is for MIDI messages, the rest is Multi Bit
	  Linear Audio data channel.
	
	  We do not know the actual MIDI FIFO size of most devices.  Just
	  assume two bytes, i.e., one byte can be received over the bus while
	  the previous one is transmitted over MIDI.
	  (The value here is adjusted for midi_ratelimit_per_packet().)
			
			  Upper 4 bits of LSB represent port number.
			  - 0000b: physical MIDI port 1.
			  - 0010b: physical MIDI port 2.
			  - 1110b: console MIDI port.
			
			  Upper 4 bits of LSB represent port number.
			  - 0000b: physical MIDI port 1. Use port 0.
			  - 1110b: console MIDI port. Use port 2.
 This protocol delivers 24 bit data in 32bit data channel. 
 Use different mode between incomingoutgoing.
 SPDX-License-Identifier: GPL-2.0-only
  digi00x-transaction.c - a part of driver for Digidesign Digi 002003 family
  Copyright (c) 2014-2015 Takashi Sakamoto
 Unknown. 4bytes. 
 SPDX-License-Identifier: GPL-2.0-only
  digi00x.c - a part of driver for Digidesign Digi 002003 family
  Copyright (c) 2014-2015 Takashi Sakamoto
 Block till all of ALSA character devices are released.
 Both of 002003 use the same ID. 
 SPDX-License-Identifier: GPL-2.0-only
  ff-hwdep.c - a part of driver for RME Fireface series
  Copyright (c) 2015-2017 Takashi Sakamoto
  This codes give three functionality.
  1.get firewire node information
  2.get notification about startingstopping stream
  3.lockunlock stream
 SPDX-License-Identifier: GPL-2.0-only
  ff-stream.c - a part of driver for RME Fireface series
  Copyright (c) 2015-2017 Takashi Sakamoto
  This function should be called before starting streams or after stopping
  streams.
	
	  Regardless of current source of clock signal, drivers transfer some
	  packets. Then, the device transfers packets.
 NOTE: The device doesn't transfer packets unless receiving any packet. The
 sequence of tx packets includes cycle skip corresponding to empty packet or
 NODATA packet in IEC 61883-16. The sequence of the number of data blocks per
 packet is important for media clock recovery.
 The device discontinue to transfer packets.
 user land lock this 
 this is the first time 
 SPDX-License-Identifier: GPL-2.0
 ff-protocol-latter - a part of driver for RME Fireface series
 Copyright (c) 2019 Takashi Sakamoto
 Licensed under the terms of the GNU General Public License, version 2.
 The content of sync status register differs between models.
 Fireface UCX:
  0xf0000000: (unidentified)
  0x0f000000: effective rate of sampling clock
  0x00f00000: detected rate of word clock on BNC interface
  0x000f0000: detected rate of ADAT or SPDIF on optical interface
  0x0000f000: detected rate of SPDIF on coaxial interface
  0x00000e00: effective source of sampling clock
    0x00000e00: Internal
    0x00000800: (unidentified)
    0x00000600: Word clock on BNC interface
    0x00000400: ADAT on optical interface
    0x00000200: SPDIF on coaxial or optical interface
  0x00000100: Optical interface is used for ADAT signal
  0x00000080: (unidentified)
  0x00000040: Synchronized to word clock on BNC interface
  0x00000020: Synchronized to ADAT or SPDIF on optical interface
  0x00000010: Synchronized to SPDIF on coaxial interface
  0x00000008: (unidentified)
  0x00000004: Lock word clock on BNC interface
  0x00000002: Lock ADAT or SPDIF on optical interface
  0x00000001: Lock SPDIF on coaxial interface
 Fireface 802 (and perhaps UFX):
   0xf0000000: effective rate of sampling clock
   0x0f000000: detected rate of ADAT-B on 2nd optical interface
   0x00f00000: detected rate of ADAT-A on 1st optical interface
   0x000f0000: detected rate of AESEBU on XLR or coaxial interface
   0x0000f000: detected rate of word clock on BNC interface
   0x00000e00: effective source of sampling clock
     0x00000e00: internal
     0x00000800: ADAT-B
     0x00000600: ADAT-A
     0x00000400: AESEBU
     0x00000200: Word clock
   0x00000080: Synchronized to ADAT-B on 2nd optical interface
   0x00000040: Synchronized to ADAT-A on 1st optical interface
   0x00000020: Synchronized to AESEBU on XLR or 2nd optical interface
   0x00000010: Synchronized to word clock on BNC interface
   0x00000008: Lock ADAT-B on 2nd optical interface
   0x00000004: Lock ADAT-A on 1st optical interface
   0x00000002: Lock AESEBU on XLR or 2nd optical interface
   0x00000001: Lock word clock on BNC interface
 The pattern for rate bits:
   0x00: 32.0 kHz
   0x01: 44.1 kHz
   0x02: 48.0 kHz
   0x04: 64.0 kHz
   0x05: 88.2 kHz
   0x06: 96.0 kHz
   0x08: 128.0 kHz
   0x09: 176.4 kHz
   0x0a: 192.0 kHz
 Set the number of data blocks transferred in a second.
 Confirm to shift transmission clock.
 Keep resources for in-stream.
 Keep resources for out-stream.
 For Fireface UCX. Always use the maximum number of data
 channels in data block of packet.
 For Fireface UFX and 802. Due to bandwidth limitation on
 IEEE 1394a (400 Mbps), Analog 1-12 and AES are available
 without any ADAT at quadruple speed.
 NOTE: transactions are transferred within 0x00-0x7f in allocated range of
 address. This seems to be for check of discontinuity in receiver side.
 Like Fireface 400, drivers can select one of 4 options for lower 4 bytes of
 destination address by bit flags in quadlet register (little endian) at
 0x'ffff'0000'0014:
 bit flags: offset of destination address
 - 0x00002000: 0x'....'....'0000'0000
 - 0x00004000: 0x'....'....'0000'0080
 - 0x00008000: 0x'....'....'0000'0100
 - 0x00010000: 0x'....'....'0000'0180
 Drivers can suppress the device to transfer asynchronous transactions by
 clear these bit flags.
 Actually, the register is write-only and includes the other settings such as
 input attenuation. This driver allocates for the first option
 (0x'....'....'0000'0000) and expects userspace application to configure the
 register for it.
  When return minus value, given argument is not MIDI status.
  When return 0, given argument is a beginning of system exclusive.
  When return the others, given argument is MIDI data.
 Tune request. 
 Timing clock. 
 Start. 
 Continue. 
 Stop. 
 Active sensing. 
 System reset. 
 MIDI time code quarter frame. 
 Song select. 
 Song position pointer. 
 Exclusive. 
 End of exclusive. 
 Undefined. 
 Undefined. 
 Undefined. 
 Undefined. 
 Note on. 
 Note off. 
 Polyphonic key pressure. 
 Control change and Mode change. 
 Pitch bend change. 
 Program change. 
 Channel pressure. 
 The beginning of exclusives.
 Transfer end code at next time.
 The end of exclusives.
 SPDX-License-Identifier: GPL-2.0-only
  amdtp-ff.c - a part of driver for RME Fireface series
  Copyright (c) 2015-2017 Takashi Sakamoto
 SPDX-License-Identifier: GPL-2.0
 ff-protocol-former.c - a part of driver for RME Fireface series
 Copyright (c) 2019 Takashi Sakamoto
 Licensed under the terms of the GNU General Public License, version 2.
 For block write request. 
		
		  Each quadlet is corresponding to data channels in a data
		  blocks in reverse order. Precisely, quadlets for available
		  data channels should be enabled. Here, I take second best
		  to fetch PCM frames from all of data channels regardless of
		  stf.
 One quadlet includes one byte.
 Wait till the format of tx packet is available.
 NOTE: this is a makeshift to start OHCI 1394 IR context in the
 channel. On the other hand, 'struct fw_iso_resources.allocated' is
 not true and it's not deallocated at stop.
 If starting isochronous communication immediately, change of STF has
 no effect. In this case, the communication runs based on former STF.
 Let's sleep for a bit.
 Controllers should allocate isochronous resources for rx stream.
 Set isochronous channel and the number of quadlets of rx packets.
 This should be done before the allocation of tx resources to avoid
 periodical noise.
 Fireface 800 doesn't allow drivers to register lower 4 bytes of destination
 address.
 A write transaction to clear registered higher 4 bytes of destination address
 has an effect to suppress asynchronous transaction from device.
 Fireface 400 manages isochronous channel number in 3 bit field. Therefore,
 we can allocate between 0 and 7 channel.
 Check whether the given value is supported or not.
 Set the number of data blocks transferred in a second.
 Keep resources for in-stream.
 Keep resources for out-stream.
 Set isochronous channel and the number of quadlets of received
 packets.
 Set isochronous channel and the number of quadlets of transmitted
 packet.
 TODO: investigate the purpose of this 0x80.
 Allow to transmit packets.
 For Fireface 400, lower 4 bytes of destination address is configured by bit
 flag in quadlet register (little endian) at 0x'0000'801'0051c. Drivers can
 select one of 4 options:
 bit flags: offset of destination address
  - 0x04000000: 0x'....'....'0000'0000
  - 0x08000000: 0x'....'....'0000'0080
  - 0x10000000: 0x'....'....'0000'0100
  - 0x20000000: 0x'....'....'0000'0180
 Drivers can suppress the device to transfer asynchronous transactions by
 using below 2 bits.
  - 0x01000000: suppress transmission
  - 0x02000000: suppress transmission
 Actually, the register is write-only and includes the other options such as
 input attenuation. This driver allocates destination address with '0000'0000
 in its lower offset and expects userspace application to configure the
 register for it.
 Message in first port. 
		
		  This value may represent the index of this unit when the same
		  units are on the same IEEE 1394 bus. This driver doesn't use
		  it.
 Message in second port. 
 SPDX-License-Identifier: GPL-2.0-only
  ff-transaction.c - a part of driver for RME Fireface series
  Copyright (c) 2015-2017 Takashi Sakamoto
 Transfer the message again, immediately. 
 Do it in next chance. 
 Set interval to next transaction. 
	
	  In Linux FireWire core, when generation is updated with memory
	  barrier, node id has already been updated. In this module, After
	  this smp_rmb(), loadstore instructions to memory are completed.
	  Thus, both of generation and node id are available with recent
	  values. This is a light-serialization solution to handle bus reset
	  events on IEEE 1394 bus.
 Controllers are allowed to register this region. 
 Controllers are allowed to register higher 4 bytes of destination address to
 receive asynchronous transactions for MIDI messages, while the way to
 register lower 4 bytes of address is different depending on protocols. For
 details, please refer to comments in protocol implementations.
 This driver expects userspace applications to configure registers for the
 lower address because in most cases such registers has the other settings.
	
	  Controllers are allowed to register its node ID and upper 2 byte of
	  local address to listen asynchronous transactions.
	
	  Allocate in Memory Space of IEC 13213, but lower 4 byte in LSB should
	  be zero due to device specification.
 Release higher 4 bytes of address. 
 SPDX-License-Identifier: GPL-2.0-only
  ff.c - a part of driver for RME Fireface series
  Copyright (c) 2015-2017 Takashi Sakamoto
 Block till all of ALSA character devices are released.
 Fireface 800 
 Fireface 400 
 Fireface UFX.
 Fireface UCX.
 Fireface 802.
 SPDX-License-Identifier: GPL-2.0-only
  ff-pcm.c - a part of driver for RME Fireface series
  Copyright (c) 2015-2017 Takashi Sakamoto
 When source of clock is not internal or any stream is reserved for
 transmission of PCM frames, the available sampling rate is limited
 at current one.
 The unit is configured at sampling frequency which packet
 streaming engine can't support.
 SPDX-License-Identifier: GPL-2.0-only
  ff-midi.c - a part of driver for RME Fireface series
  Copyright (c) 2015-2017 Takashi Sakamoto
 Do nothing. 
 Initialize internal status. 
 Do nothing. 
 SPDX-License-Identifier: GPL-2.0-only
  ff-proc.c - a part of driver for RME Fireface series
  Copyright (c) 2015-2017 Takashi Sakamoto
	
	  All nodes are automatically removed at snd_card_disconnect(),
	  by following to link list.
 SPDX-License-Identifier: GPL-2.0-only
  dice_transaction.c - a part of driver for Dice based devices
  Copyright (c) Clemens Ladisch
  Copyright (c) 2014 Takashi Sakamoto
 node_id vs. generation 
 success 
 The address seems to be already registered. 
	
	  Check that the sub address spaces exist and are located inside the
	  private address space.  The minimum values are chosen so that all
	  minimally required registers are included.
		
		  Check that the implemented DICE driver specification major
		  version number matches.
 Set up later. 
 Old firmware doesn't support these fields. 
 Allocation callback in address space over host controller 
 Register the address space 
 SPDX-License-Identifier: GPL-2.0-only
  dice_pcm.c - a part of driver for DICE based devices
  Copyright (c) Clemens Ladisch <clemens@ladisch.de>
  Copyright (c) 2014 Takashi Sakamoto <o-takashi@sakamocchi.jp>
 When source of clock is not internal or any stream is reserved for
 transmission of PCM frames, the available sampling rate is limited
 at current one.
 For double_pcm_frame quirk.
 For double_pcm_frame quirk.
 SPDX-License-Identifier: GPL-2.0
  dice-mytek.c - a part of driver for DICE based devices
  Copyright (c) 2018 Melvin Vermeeren
 AES, TOSLINK, SPDIF, ADAT inputs on device 
 PCM 44.1-192, native DSD64DSD128 to device 
  Mytek has a few other firewire-capable devices, though newer models appear
  to lack the port more often than not. As I don't have access to any of them
  they are missing here. An example is the Mytek 8x192 ADDA, which is DICE.
 SPDX-License-Identifier: GPL-2.0-only
  dice_proc.c - a part of driver for Dice based devices
  Copyright (c) Clemens Ladisch
  Copyright (c) 2014 Takashi Sakamoto
	
	  All nodes are automatically removed at snd_card_disconnect(),
	  by following to link list.
 SPDX-License-Identifier: GPL-2.0
  dice-tc_electronic.c - a part of driver for DICE based devices
  Copyright (c) 2018 Takashi Sakamoto
 SPDX-License-Identifier: GPL-2.0
  dice-alesis.c - a part of driver for DICE based devices
  Copyright (c) 2018 Takashi Sakamoto
 Tx0 = Analog + SPDIF. 
 Tx1 = ADAT1. 
 Tx0 = Analog + SPDIF. 
 Tx1 = ADAT1 + ADAT2 (available at low rate). 
 SPDX-License-Identifier: GPL-2.0-only
  dice_midi.c - a part of driver for Dice based devices
  Copyright (c) 2014 Takashi Sakamoto
 create midi ports 
 SPDX-License-Identifier: GPL-2.0
 dice-presonus.c - a part of driver for DICE based devices
 Copyright (c) 2019 Takashi Sakamoto
 Licensed under the terms of the GNU General Public License, version 2.
 SPDX-License-Identifier: GPL-2.0-only
  dice_hwdep.c - a part of driver for DICE based devices
  Copyright (c) Clemens Ladisch <clemens@ladisch.de>
  Copyright (c) 2014 Takashi Sakamoto <o-takashi@sakamocchi.jp>
 SPDX-License-Identifier: GPL-2.0
  dice-extension.c - a part of driver for DICE based devices
  Copyright (c) 2018 Takashi Sakamoto
 For TCD22102220, TCAT defines extension of application protocol. 
		
		  Some models report stream formats at highest mode, however
		  they don't support the mode. Check clock capabilities.
 Check two of them for offset have the same value or not. 
 Fallback to limited functionality.
 SPDX-License-Identifier: GPL-2.0-only
  TC Applied Technologies Digital Interface Communications Engine driver
  Copyright (c) Clemens Ladisch <clemens@ladisch.de>
 Actually ID reserved by IEEE.
	
	  Check that GUID and unit directory are constructed according to DICE
	  rules, i.e., that the specifier ID is the GUID's OUI, and that the
	  GUID chip ID consists of the 8-bit category ID, the 10-bit product
	  ID, and a 22-bit serial number.
 some very old firmwares don't tell about their clock support 
 this should be supported by any device 
 DICE strings are returned in "always-wrong" endianness 
 Below models are compliant to IEC 61883-16 and have no quirk at high sampling transfer
 frequency.
  Avid M-Box 3 Pro
  M-Audio Profire 610
  M-Audio Profire 2626
 Block till all of ALSA character devices are released.
 The handler address register becomes initialized. 
 Avid M-Box 3 Pro. To match in probe function.
 M-Audio Profire 2626 has a different value in version field. 
 M-Audio Profire 610 has a different value in version field. 
 TC Electronic Konnekt 24D. 
 TC Electronic Konnekt 8. 
 TC Electronic Studio Konnekt 48. 
 TC Electronic Konnekt Live. 
 TC Electronic Desktop Konnekt 6. 
 TC Electronic Impact Twin. 
 TC Electronic Digital Konnekt x32. 
 Alesis iO14iO26. 
 Alesis MasterControl.
 Mytek Stereo 192 DSD-DAC. 
 Solid State Logic, Duende Classic and Mini.
 NOTE: each field of GUID in config ROM is not compliant to standard
 DICE scheme.
 Presonus FireStudio.
 Lexicon I-ONYX FW810S.
 SPDX-License-Identifier: GPL-2.0
 dice-harman.c - a part of driver for DICE based devices
 Copyright (c) 2021 Takashi Sakamoto
 Licensed under the terms of the GNU General Public License, version 2.
 Lexicon I-ONYX FW810s supports sampling transfer frequency up to
 96.0 kHz, 12 PCM channels and 1 MIDI channel in its first tx stream
 , 10 PCM channels and 1 MIDI channel in its first rx stream for all
 of the frequencies.
 SPDX-License-Identifier: GPL-2.0-only
  dice_stream.c - a part of driver for DICE based devices
  Copyright (c) Clemens Ladisch <clemens@ladisch.de>
  Copyright (c) 2014 Takashi Sakamoto <o-takashi@sakamocchi.jp>
 mode 0 
 mode 1 
 mode 2 
 Corresponding to each entry in snd_dice_rates. 
 At 176.4192.0 kHz, Dice has a quirk to transfer two PCM frames in
 one data block of AMDTP packet. Thus sampling transfer frequency is
 a half of PCM sampling frequency, i.e. PCM frames at 192.0 kHz are
 transferred on AMDTP packets at 96 kHz. Two successive samples of a
 channel are stored consecutively in the packet. This quirk is called
 as 'Dual Wire'.
 For this quirk, blocking mode is required and PCM buffer size should
 be aligned to SYT_INTERVAL.
 These are important for developer of this driver.
 Check sampling transmission frequency.
 Just after owning the unit (GLOBAL_OWNER), the unit can
 return invalid stream formats. Selecting clock parameters
 have an effect for the unit to refine it.
 After changing sampling transfer frequency, the value of
 register can be changed.
  MEMO: After this function, there're two states of streams:
   - None streams are running.
   - All streams are running.
 Check error of packet streaming.
 Check required streams are running or not.
 Start both streams.
 MEMO: The device immediately starts packet transmission when enabled. Some
 devices are strictly to generate any discontinuity in the sequence of tx packet
 when they receives invalid sequence of presentation time in CIP header. The
 sequence replay for media clock recovery can suppress the behaviour.
  MEMO: After this function, there're two states of streams:
   - None streams are running.
   - All streams are running.
  This function should be called before starting streams or after stopping
  streams.
	
	  On a bus reset, the DICE firmware disables streaming and then goes
	  off contemplating its own navel for hundreds of milliseconds before
	  it can react to any of our attempts to reenable streaming.  This
	  means that we lose synchronization anyway, so we force our streams
	  to stop so that the application can restart them in an orderly
	  manner.
 If extended protocol is available, detect detail spec. 
	
	  Available stream format is restricted at current mode of sampling
	  clock.
	
	  Just after owning the unit (GLOBAL_OWNER), the unit can return
	  invalid stream formats. Selecting clock parameters have an effect
	  for the unit to refine it.
 SPDX-License-Identifier: GPL-2.0-only
  fireworks_hwdep.c - a part of driver for Fireworks based devices
  Copyright (c) 2013-2014 Takashi Sakamoto
  This codes have five functionalities.
  1.get information about firewire node
  2.get notification about startingstopping stream
  3.lockunlock streaming
  4.transmit command of EFW transaction
  5.receive response of EFW transaction
 data type is SNDRV_FIREWIRE_EVENT_EFW_RESPONSE 
 write into buffer as many responses as possible 
	
	  When another task reaches here during this task's access to user
	  space, it picks up current position in buffer and can read the same
	  series of responses.
 confirm enough space for this response 
 copy from ring buffer to user buffer 
	
	  All of tasks can read from the buffer nearly simultaneously, but the
	  last position for each task is different depending on the length of
	  given buffer. Here, for simplicity, a position of buffer is set by
	  the latest task. It's better for a listening application to allow one
	  thread to read from the buffer. Unless, each task can read different
	  sequence of responses depending on variation of buffer length.
 check seqnum is not for kernel-land 
 SPDX-License-Identifier: GPL-2.0-only
  fireworks_proc.c - a part of driver for Fireworks based devices
  Copyright (c) 2009-2010 Clemens Ladisch
  Copyright (c) 2013-2014 Takashi Sakamoto
  NOTE:
   dB = 20  log10(linear  0x01000000)
   -144.0 dB when linear is 0
	
	  All nodes are automatically removed at snd_card_disconnect(),
	  by following to link list.
 SPDX-License-Identifier: GPL-2.0-only
  fireworks_pcm.c - a part of driver for Fireworks based devices
  Copyright (c) 2009-2010 Clemens Ladisch
  Copyright (c) 2013-2014 Takashi Sakamoto
  NOTE:
  Fireworks changes its AMDTP channels for PCM data according to its sampling
  rate. There are three modes. Here _XX is either _rx or _tx.
   0:  32.0- 48.0 kHz then snd_efw_hwinfo.amdtp_XX_pcm_channels applied
   1:  88.2- 96.0 kHz then snd_efw_hwinfo.amdtp_XX_pcm_channels_2x applied
   2: 176.4-192.0 kHz then snd_efw_hwinfo.amdtp_XX_pcm_channels_4x applied
  The number of PCM channels for analog input and output are always fixed but
  the number of PCM channels for digital input and output are differed.
  Additionally, according to "AudioFire Owner's Manual Version 2.2", in some
  model, the number of PCM channels for digital input has more restriction
  depending on which digital interface is selected.
   - SPDIF coaxial and optical	: use input 1-2
   - ADAT optical at 32.0-48.0 kHz	: use input 1-8
   - ADAT optical at 88.2-96.0 kHz	: use input 1-4 (SMUX format)
  The data in AMDTP channels for blank PCM channels are zero.
 multiplier mode 0 
 multiplier mode 1 
 multiplier mode 2 
 limit rates 
 When source of clock is not internal or any stream is reserved for
 transmission of PCM frames, the available sampling rate is limited
 at current one.
 SPDX-License-Identifier: GPL-2.0-only
  fireworks_midi.c - a part of driver for Fireworks based devices
  Copyright (c) 2009-2010 Clemens Ladisch
  Copyright (c) 2013-2014 Takashi Sakamoto
 create midi ports 
 SPDX-License-Identifier: GPL-2.0-only
  fireworks.c - a part of driver for Fireworks based devices
  Copyright (c) 2009-2010 Clemens Ladisch
  Copyright (c) 2013-2014 Takashi Sakamoto
  Fireworks is a board module which Echo Audio produced. This module consists
  of three chipsets:
   - Communication chipset for IEEE1394 PHYLink and IEC 61883-16
   - DSP orand FPGA for signal processing
   - Flash Memory to store firmwares
 This is applied for AudioFire8 (until 2009 July) 
 AudioFire9 is applied for AudioFire8(since 2009 July) and AudioFirePre8 
 unknown as product 
 for Robot Interface Pack of Dark Fire, Dusk Tiger, Les Paul Standard 2010 
 unknown as product 
 part of hardware capability flags 
 firmware version for communication chipset 
 the number of MIDI ports, not of MIDI conformant data channels 
 Hardware metering. 
 AudioFire8 (since 2009) and AudioFirePre8 
 These models uses the same firmware. 
 check registered cards.
 prepare response buffer.
 Block till all of ALSA character devices are released.
 SPDX-License-Identifier: GPL-2.0-only
  fireworks_transaction.c - a part of driver for Fireworks based devices
  Copyright (c) 2013-2014 Takashi Sakamoto
  Fireworks have its own transaction. The transaction can be delivered by AVC
  Vendor Specific command frame or usual asynchronous transaction. At least,
  Windows driver and firmware version 5.5 or later don't use AVC command.
  Transaction substance:
   At first, 6 data exist. Following to the data, parameters for each command
   exist. All of the parameters are 32 bit aligned to big endian.
    data[0]:	Length of transaction substance
    data[1]:	Transaction version
    data[2]:	Sequence number. This is incremented by the device
    data[3]:	Transaction category
    data[4]:	Transaction command
    data[5]:	Return value in response.
    data[6-]:	Parameters
  Transaction address:
   command:	0xecc000000000
   response:	0xecc080000000 (default)
  I note that the address for response can be changed by command. But this
  module uses the default address.
 confirm enough space for this response 
 copy to ring buffer 
 for hwdep 
 node id vs. generation 
 node_id vs. generation 
 SPDX-License-Identifier: GPL-2.0-only
  fireworks_command.c - a part of driver for Fireworks based devices
  Copyright (c) 2013-2014 Takashi Sakamoto
  This driver uses transaction version 1 or later to use extended hardware
  information. Then too old devices are not available.
  Each commands are not required to have continuous sequence numbers. This
  number is just used to match command and response.
  This module support a part of commands. Please see FFADO if you want to see
  whole commands. But there are some commands which FFADO don't implement.
  Fireworks also supports AVC general commands and AVC Stream Format
  Information commands. But this module don't use them.
 for clock source and sampling rate 
 command categories 
 hardware info category commands 
 hardware control category commands 
 return values in response 
 calculate buffer size
 keep buffer 
 to keep consistency of sequence number 
 fill transaction header fields 
 fill transaction command parameters 
 check transaction header fields 
 fill transaction response parameters 
  The address in host system for transaction response is changable when the
  device supports. struct hwinfo.flags includes its flag. The default is
  MEMORY_SPACE_EFW_RESPONSE.
  This is for timestamp processing. In Windows mode, all 32bit fields of second
  CIP header in AMDTP transmit packet is used for 'presentation timestamp'. In
  'no data' packet the value of this field is 0x90ffffff.
 ensure terminated 
 give UINT_MAX if set nothing 
 check arguments 
 get current status 
 no need 
 set params 
	
	  With firmware version 5.8, just after changing clock state, these
	  parameters are not immediately retrieved by get command. In my
	  trial, there needs to be 100msec to get changed parameters.
 SPDX-License-Identifier: GPL-2.0-only
  fireworks_stream.c - a part of driver for Fireworks based devices
  Copyright (c) 2013-2014 Takashi Sakamoto
 Fireworks transmits NODATA packets with TAG0.
 Fireworks has its own meaning for dbc.
 Fireworks reset dbc at bus reset.
 But Recent firmwares starts packets with non-zero dbc.
 Driver version 5.7.6 installs firmware version 5.7.3.
 AudioFire9 always reports wrong dbs. Onyx 1200F with the latest firmware (v4.6.0)
 also report wrong dbs at 88.2 kHz or greater.
 Firmware version 5.5 reports fixed interval for dbc.
 Establish connection via CMP.
 Start amdtp stream.
 This function should be called before starting the stream or after stopping
 the streams.
 set IEC61883 compliant mode (actually not fully compliant...).
 Considering JACKFFADO streaming:
 TODO: This can be removed hwdep functionality becomes popular.
 stop streams if rate is different.
 Need no substreams.
 Audiofire 24 skip an isochronous cycle several thousands after starting
 packet transmission.
 NOTE: The device ignores presentation time expressed by the value of syt field
 of CIP header in received packets. The sequence of the number of data blocks per
 packet is important for media clock recovery.
 user land lock this 
 this is the first time 
 SPDX-License-Identifier: GPL-2.0-only
  Driver for AT73C213 16-bit stereo DAC connected to Atmel SSC
  Copyright (C) 2006-2007 Atmel Norway
#define DEBUG
 Hardware limit? 
 Hardware limit. 
 Initial (hardware reset) AT73C213 register values. 
 00 - CTRL    
 01 - LLIG    
 02 - RLIG    
 03 - LPMG    
 04 - RPMG    
 05 - LLOG    
 06 - RLOG    
 07 - OLC     
 08 - MC      
 09 - CSFC    
 0A - MISC    
 0B -         
 0C - PRECH   
 0D - AUXG    
 0E -         
 0F -         
 10 - RST     
 11 - PA_CTRL 
 Image of the SPI registers in AT73C213. 
 Protect SSC registers against concurrent access. 
 Protect mixer registers against concurrent access. 
 Replaced by chip->bitrate later. 
 Replaced by chip->bitrate later. 
  Calculate and set bitrate and divisions.
	
	  We connect two clocks here, picking divisors so the I2S clocks
	  out data at the same rate the DAC clocks it in ... and as close
	  as practical to the desired target rate.
	 
	  The DAC master clock (MCLK) is programmable, and is either 256
	  or (not here) 384 times the I2S output clock (BCLK).
 SSC clock  (bitrate  stereo  16-bit). 
 ssc_div must be even. 
 Search for a possible bitrate. 
 SSC clock  (ssc divider  16-bit  stereo). 
 256  (2  16) = 8 
 Ignore difference smaller than 256 Hz. 
 Not able to find a valid bitrate. 
 Set divider in SSC device. 
 SSC clock  (ssc divider  16-bit  stereo). 
 ensure buffer_size is a multiple of period_size 
  Mixer functions.
 When inverted will give values 0x10001 => 0. 
 When inverted will give values 0x10001 => 0. 
  Device functions
	
	  Continuous clock output.
	  Starts on falling TF.
	  Delay 1 cycle (1 bit).
	  Periode is 16 bit (16 - 1).
	
	  Data length is 16 bit (16 - 1).
	  Transmit MSB first.
	  Transmit 2 words each transfer.
	  Frame sync length is 16 bit (16 - 1).
	  Frame starts on negative pulse.
 Enable DAC master clock. 
 Initialize at73c213 on SPI bus. 
 Precharge everything. 
 Stop precharging PA. 
 Stop precharging DAC, turn on master power. 
 Turn on DAC. 
 Mute sound. 
 Enable I2S device, i.e. clock output. 
 Allocate "card" using some unused identifiers. 
 Stop playback. 
 Mute sound. 
 Turn off PA. 
 Turn off external DAC. 
 Turn off master power. 
 Stop DAC master clock. 
 SPDX-License-Identifier: GPL-2.0+
 soc-util.c  --  ALSA SoC Audio Layer utility functions
 Copyright 2009 Wolfson Microelectronics PLC.
 Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
         Liam Girdwood <lrg@slimlogic.co.uk>
 Random values to keep userspace happy when checking constraints 
	
	  If there are other components associated with rtd, we shouldn't
	  override their hwparams
 BE's dont need dummy params 
  Select these from Sound Card Manually
 	SND_SOC_POSSIBLE_DAIFMT_CBP_CFP
 	SND_SOC_POSSIBLE_DAIFMT_CBP_CFC
 	SND_SOC_POSSIBLE_DAIFMT_CBC_CFP
 	SND_SOC_POSSIBLE_DAIFMT_CBC_CFC
  The dummy CODEC is only meant to be used in situations where there is no
  actual hardware.
  If there is actual hardware even if it does not have a control bus
  the hardware will still have constraints like supported samplerates, etc.
  which should be modelled. And the data flow graph also should be modelled
  using DAPM.
 SPDX-License-Identifier: GPL-2.0
 soc-dai.c
 Copyright (C) 2019 Renesas Electronics Corp.
 Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
 Positive, Zero values are not errors 
 Negative values might be errors 
  We might want to check substream by using list.
  In such case, we can update these macros.
  snd_soc_dai_set_sysclk - configure DAI system or master clock.
  @dai: DAI
  @clk_id: DAI specific clock ID
  @freq: new clock frequency in Hz
  @dir: new clock direction - inputoutput.
  Configures the DAI master (MCLK) or system (SYSCLK) clocking.
  snd_soc_dai_set_clkdiv - configure DAI clock dividers.
  @dai: DAI
  @div_id: DAI specific clock divider ID
  @div: new clock divisor.
  Configures the clock dividers. This is used to derive the best DAI bit and
  frame clocks from the system or master clock. It's best to set the DAI bit
  and frame clocks as low as possible to save system power.
  snd_soc_dai_set_pll - configure DAI PLL.
  @dai: DAI
  @pll_id: DAI specific PLL ID
  @source: DAI specific source for the PLL
  @freq_in: PLL input clock frequency in Hz
  @freq_out: requested PLL output clock frequency in Hz
  Configures and enables PLL to generate output clock based on input clock.
  snd_soc_dai_set_bclk_ratio - configure BCLK to sample rate ratio.
  @dai: DAI
  @ratio: Ratio of BCLK to Sample rate.
  Configures the DAI for a preset BCLK to sample rate ratio.
	
	  return max num if ALL DAIs have .auto_selectable_formats
  snd_soc_dai_get_fmt - get supported audio format.
  @dai: DAI
  @priority: priority level of supported audio format.
  This should return only formats implemented with high
  quality by the DAI so that the core can configure a
  format which will work well with other devices.
  For example devices which don't support both edges of the
  LRCLK signal in I2S style formats should only list DSP
  modes.  This will mean that sometimes fewer formats
  are reported here than are supported by set_fmt().
	
	  Collect auto_selectable_formats until priority
	 
	  ex)
	 	auto_selectable_formats[] = { A, B, C };
	 	(A, B, C = SND_SOC_POSSIBLE_DAIFMT_xxx)
	 
	  priority = 1 :	A
	  priority = 2 :	A | B
	  priority = 3 :	A | B | C
	  priority = 4 :	A | B | C
	  ...
  snd_soc_dai_set_fmt - configure DAI hardware audio format.
  @dai: DAI
  @fmt: SND_SOC_DAIFMT_ format value.
  Configures the DAI hardware format and clocking.
  snd_soc_xlate_tdm_slot_mask - generate txrx slot mask.
  @slots: Number of slots in use.
  @tx_mask: bitmask representing active TX slots.
  @rx_mask: bitmask representing active RX slots.
  Generates the TDM tx and rx slot default masks for DAI.
  snd_soc_dai_set_tdm_slot() - Configures a DAI for TDM operation
  @dai: The DAI to configure
  @tx_mask: bitmask representing active TX slots.
  @rx_mask: bitmask representing active RX slots.
  @slots: Number of slots in use.
  @slot_width: Width in bits for each slot.
  This function configures the specified DAI for TDM operation. @slot contains
  the total number of slots of the TDM stream and @slot_with the width of each
  slot in bit clock cycles. @tx_mask and @rx_mask are bitmasks specifying the
  active slots of the TDM stream for the specified DAI, i.e. which slots the
  DAI should write to or read from. If a bit is set the corresponding slot is
  active, if a bit is cleared the corresponding slot is inactive. Bit 0 maps to
  the first slot, bit 1 to the second slot and so on. The first active slot
  maps to the first channel of the DAI, the second active slot to the second
  channel and so on.
  TDM mode can be disabled by passing 0 for @slots. In this case @tx_mask,
  @rx_mask and @slot_width will be ignored.
  Returns 0 on success, a negative error code otherwise.
  snd_soc_dai_set_channel_map - configure DAI audio channel map
  @dai: DAI
  @tx_num: how many TX channels
  @tx_slot: pointer to an array which imply the TX slot number channel
            0~num-1 uses
  @rx_num: how many RX channels
  @rx_slot: pointer to an array which imply the RX slot number channel
            0~num-1 uses
  configure the relationship between channel number and TDM slot number.
  snd_soc_dai_get_channel_map - Get DAI audio channel map
  @dai: DAI
  @tx_num: how many TX channels
  @tx_slot: pointer to an array which imply the TX slot number channel
            0~num-1 uses
  @rx_num: how many RX channels
  @rx_slot: pointer to an array which imply the RX slot number channel
            0~num-1 uses
  snd_soc_dai_set_tristate - configure DAI system or master clock.
  @dai: DAI
  @tristate: tristate enable
  Tristates the DAI so that others can use it.
  snd_soc_dai_digital_mute - configure DAI system or master clock.
  @dai: DAI
  @mute: mute enable
  @direction: stream to mute
  Mutes the DAI DAC.
	
	  ignore if direction was CAPTURE
	  and it had .no_capture_mute flag
 perform any topology hw_params fixups before DAI  
 mark substream if succeeded 
 remove marked substream 
 mark substream if succeeded 
 remove marked substream 
  snd_soc_dai_stream_valid() - check if a DAI supports the given stream
  Returns true if the DAI supports the indicated stream type.
 If the codec specifies any channels at all, it supports the stream 
  snd_soc_dai_link_set_capabilities() - set dai_link properties based on its DAIs
 see snd_soc_dai_stream_active() 
 see snd_soc_component_active() 
 use last error 
 use last ret 
 mark cstream if succeeded 
 remove marked cstream 
 SPDX-License-Identifier: GPL-2.0+
 soc-devres.c  --  ALSA SoC Audio Layer devres functions
 Copyright (C) 2013 Linaro Ltd
  devm_snd_soc_register_dai - resource-managed dai registration
  @dev: Device used to manage component
  @component: The component the DAIs are registered for
  @dai_drv: DAI driver to use for the DAI
  @legacy_dai_naming: if %true, use legacy single-name format;
 	if %false, use multiple-name format;
  devm_snd_soc_register_component - resource managed component registration
  @dev: Device used to manage component
  @cmpnt_drv: Component driver
  @dai_drv: DAI driver
  @num_dai: Number of DAIs to register
  Register a component with automatic unregistration when the device is
  unregistered.
  devm_snd_soc_register_card - resource managed card registration
  @dev: Device used to manage card
  @card: Card to register
  Register a card with automatic unregistration when the device is
  unregistered.
  devm_snd_dmaengine_pcm_register - resource managed dmaengine PCM registration
  @dev: The parent device for the PCM device
  @config: Platform specific PCM configuration
  @flags: Platform specific quirks
  Register a dmaengine based PCM device with automatic unregistration when the
  device is unregistered.
 SPDX-License-Identifier: GPL-2.0+
  Copyright (C) 2013, Analog Devices Inc.
	Author: Lars-Peter Clausen <lars@metafoo.de>
  The platforms dmaengine driver does not support reporting the amount of
  bytes that are still left to transfer.
  snd_dmaengine_pcm_prepare_slave_config() - Generic prepare_slave_config callback
  @substream: PCM substream
  @params: hw_params
  @slave_config: DMA slave config to prepare
  This function can be used as a generic prepare_slave_config callback for
  platforms which make use of the snd_dmaengine_dai_dma_data struct for their
  DAI DMA data. Internally the function will first call
  snd_hwparams_to_dma_slave_config to fill in the slave config based on the
  hw_params, followed by snd_dmaengine_set_config_from_dai_data to fill in the
  remaining fields based on the DAI DMA data.
	
	  FIXME: Remove the return value check to align with the code
	  before adding snd_dmaengine_pcm_refine_runtime_hwparams
	  function.
		
		  If this warning is seen, it probably means that your Linux
		  device structure does not match your HW device structure.
		  It would be best to refactor the Linux device structure to
		  correctly match the HW structure.
			
			  Only report probe deferral errors, channels
			  might not be present for devices that
			  support only TX or only RX.
  snd_dmaengine_pcm_register - Register a dmaengine based PCM device
  @dev: The parent device for the PCM device
  @config: Platform specific PCM configuration
  @flags: Platform specific quirks
  snd_dmaengine_pcm_unregister - Removes a dmaengine based PCM device
  @dev: Parent device the PCM was register with
  Removes a dmaengine based PCM device previously registered with
  snd_dmaengine_pcm_register.
 SPDX-License-Identifier: GPL-2.0
 soc-apci.c - support for ACPI enumeration.
 Copyright (c) 2013-15, Intel Corporation.
 not full match, ignore 
 SPDX-License-Identifier: GPL-2.0
 soc-card.c
 Copyright (C) 2019 Renesas Electronics Corp.
 Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
  snd_soc_card_jack_new - Create a new jack
  @card:  ASoC card
  @id:    an identifying string for this jack
  @type:  a bitmask of enum snd_jack_type values that can be detected by
          this jack
  @jack:  structure to use for the jack
  @pins:  Array of jack pins to be added to the jack or NULL
  @num_pins: Number of elements in the @pins array
  Creates a new jack object.
  Returns zero if successful, or a negative error code on failure.
  On success jack will be initialised.
		
		  It has "card->probe" and "card->late_probe" callbacks.
		  So, set "probed" flag here, because it needs to care
		  about "late_probe".
		 
		  see
		 	snd_soc_bind_card()
		 	snd_soc_card_late_probe()
	
	  It has "card->probe" and "card->late_probe" callbacks,
	  and "late_probe" callback is called after "probe".
	  This means, we can set "card->probed" flag afer "late_probe"
	  for all cases.
	 
	  see
	 	snd_soc_bind_card()
	 	snd_soc_card_probe()
 SPDX-License-Identifier: GPL-2.0+
 soc-topology.c  --  ALSA SoC Topology
 Copyright (C) 2012 Texas Instruments Inc.
 Copyright (C) 2015 Intel Corporation.
 Authors: Liam Girdwood <liam.r.girdwood@linux.intel.com>
		K, Mythri P <mythri.p.k@intel.com>
		Prusty, Subhransu S <subhransu.s.prusty@intel.com>
		B, Jayachandran <jayachandran.b@intel.com>
		Abdullah, Omair M <omair.m.abdullah@intel.com>
		Jin, Yao <yao.jin@intel.com>
		Lin, Mengdong <mengdong.lin@intel.com>
  Add support to read audio firmware topology alongside firmware text. The
  topology data can contain kcontrols, DAPM graphs, widgets, DAIs, DAI links,
  equalizers, firmware, coefficients etc.
  This file only manages the core ALSA and ASoC components, all other bespoke
  firmware topology data is passed to component drivers for bespoke handling.
 ASoC in reverse 
  We make several passes over the data (since it wont necessarily be ordered)
  and process objects in the following order. This guarantees the component
  drivers will be ready with any vendor data before the mixers and DAPM objects
  are loaded (that may make use of the vendor data).
 topology context 
 runtime FW parsing 
 read postion 
 header position 
 pass number 
 component caller 
 current block index 
 vendor specific kcontrol operations 
 vendor specific bytes ext handlers, for TLV bytes controls 
 optional fw loading callbacks to component drivers 
 check we dont overflow the data for this control chunk 
	 check there is enough room in chunk for control.
 mapping of Kcontrol types and associated operations. 
 mapping of widget types from UAPI IDs to kernel IDs 
 pass vendor data to component driver for processing 
 optionally pass new dynamic widget to component driver. This is mainly for
 optionally pass new dynamic widget to component driver. This is mainly for
 pass DAI configurations to component driver for extra initialization 
 pass link configurations to component driver for extra initialization 
 tell the component driver that all firmware has been loaded in this request 
 add a dynamic kcontrol 
 add a dynamic kcontrol for component driver 
 remove a mixer kcontrol 
 remove an enum kcontrol 
 remove a byte kcontrol 
 remove a route 
 remove a widget and it's kcontrols - routes must be removed first 
 widget w is freed by soc-dapm.c 
 remove DAI configurations 
 remove link configurations 
 unload dai link 
	
	  We don't free the link here as what remove_link() do since BE
	  links are not allocated by topology.
	  We however need to reset the dobj type to its initial values
 bind a kcontrol to it's IO handlers 
		 TLV bytes controls need standard kcontrol info handler,
		  TLV callback and extended putget handlers.
		
		  When a topology-based implementation abuses the
		  control interface and uses bytes_ext controls of
		  more than 512 bytes, we need to disable the size
		  checks, otherwise accesses to such controls will
		  return an -EINVAL error and prevent the card from
		  being configured.
 try and map vendor specific kcontrol handlers first 
 vendor specific handlers found ? 
 none found so try standard kcontrol handlers 
 standard handlers found ? 
 nothing to bind 
 bind a widgets to it's evnt handlers 
 found - so assign event 
 not found 
 optionally pass new dynamic kcontrol to component driver. 
 TODO: add support for other TLV types 
 validate kcontrol 
 map io handlers 
 pass control to driver for optional further init 
 register control here 
 validate kcontrol 
 we only support FLFR channel mapping atm 
 map io handlers 
 create any TLV data 
 pass control to driver for optional further init 
 register control here 
	
	  Following "if" checks if we have at most SND_SOC_TPLG_NUM_TEXTS
	  values instead of using ARRAY_SIZE(ec->values) due to the fact that
	  it is oversized for its purpose. Additionally it is done so because
	  it is defined in UAPI header where it can't be easily changed.
 convert from little-endian 
 validate kcontrol 
 map io handlers 
 pass control to driver for optional further init 
 register control here 
 optionally pass new dynamic kcontrol to component driver. 
 allocate memory for pointer to array of dapm routes 
	
	  allocate memory for each dapm route in the array.
	  This needs to be done individually so that
	  each route can be freed when it is removed in remove_route().
 validate routes 
 set to NULL atm for tplg users 
 add route dobj to dobj_list 
			
			  this route was added to the list, it will
			  be freed in remove_route() so increment the
			  counter to skip it in the error handling
			  below.
 add route, but keep going if some fail 
	
	  free pointer to array of dapm routes as this is no longer needed.
	  The memory allocated for each dapm route will be freed
	  when it is removed in remove_route().
 validate kcontrol 
 we only support FLFR channel mapping atm 
 map io handlers 
 create any TLV data 
 pass control to driver for optional further init 
 validate kcontrol 
 we only support FLFR channel mapping atm 
 map io handlers 
 pass control to driver for optional further init 
 validate kcontrol 
 map standard io handlers and check for external handlers 
 pass control to driver for optional further init 
 map user to kernel widget ID 
 strings are allocated here, but used and freed by the widget 
 volume mixer 
 enumerated mixer 
 bytes control 
	 card dapm mutex is held by the core if we are loading topology
		
		  check if widget itself fits within topology file
		  use sizeof instead of widget->size, as we can't be sure
		  it is set properly yet (file may end before it is present)
 check if widget has proper size 
 check if widget private data fits within topology file 
	 Card might not have been registered at this point.
	  If so, just return success.
 pass control to component driver for optional further init 
 register the DAI to the component 
 Create the DAI widgets here 
 create the FE DAI link 
 link + cpu + codec + platform 
 enable DPCM 
 pass control to component driver for optional further init 
 create a FE DAI and DAI link from the PCM object 
 copy stream caps from the old version 4 of source 
  pcm_new_ver - Create the new version of PCM from the old version.
  @tplg: topology context
  @src: older version of pcm as a source
  @pcm: latest version of pcm created from the source
  Support from version 4. User should free the returned pcm manually.
 size of latest abi version 
 check the element size and count 
		 check ABI version by size, create a new version of pcm
		  if abi not match.
 create the FE DAIs and DAI links 
		 offset by version-specific struct size and
		  real priv data size
 free the duplicated one 
  set_link_hw_format - Set the HW audio format of the physical DAI link.
  @link: &snd_soc_dai_link which should be updated
  @cfg: physical link configs.
  Topology context contains a list of supported HW formats (configs) and
  a default format ID for the physical link. This function will use this
  default ID to choose the HW format to set the link's DAI format for init.
 clock gating 
 ignore the value 
 clock signal polarity 
 clock masters 
  link_new_ver - Create a new physical link config from the old
  version of source.
  @tplg: topology context
  @src: old version of phyical link config as a source
  @link: latest version of physical link config created from the source
  Support from version 4. User need free the returned link config manually.
  snd_soc_find_dai_link - Find a DAI link
  @card: soc card
  @id: DAI link ID to match
  @name: DAI link name to match, optional
  @stream_name: DAI link stream name to match, optional
  This function will search all existing DAI links of the soc card to
  find the link of the same ID. Since DAI links may not have their
  unique ID, so name and stream name should also match if being
  specified.
  Return: pointer of DAI link, or NULL if not found.
 Find and configure an existing physical DAI link 
 hw format 
 flags 
 pass control to component driver for optional further init 
 for unloading it in snd_soc_tplg_component_remove 
 Load physical link config elements from the topology context 
 check the element size and count 
 config physical DAI links 
		 offset by version-specific struct size and
		  real priv data size
 free the duplicated one 
  soc_tplg_dai_config - Find and configure an existing physical DAI.
  @tplg: topology context
  @d: physical DAI configs.
  The physical dai should already be registered by the platform driver.
  The platform driver should specify the DAI name and ID for matching.
 pass control to component driver for optional further init 
 load physical DAI elements 
 config the existing BE DAIs 
  manifest_new_ver - Create a new version of manifest from the old version
  of source.
  @tplg: topology context
  @src: old version of manifest as a source
  @manifest: latest version of manifest created from the source
  Support from version 4. Users need free the returned manifest manually.
 size of latest abi version 
 check ABI version by size, create a new manifest if abi not match 
 pass control to component driver for optional further init 
 free the duplicated one 
 validate header magic, size and type 
 big endian firmware objects not supported atm 
 Support ABI from version 4 
 check header type and call appropriate handler 
 physical link configurations 
 bespoke vendor data object 
 process the topology file headers 
 process the header types from start to end 
 make sure header is valid before loading 
 load the header object 
 goto next header 
 next data type pass 
 signal DAPM we are complete 
 load audio component topology from "firmware" file 
	
	  check if we have sane parameters:
	  comp - needs to exist to keep and reference data while parsing
	  comp->card - used for setting card related parameters
	  comp->card->dev - used for resource management and prints
	  fw - we need it, as it is the very thing we parse
 setup parsing context 
 free the created components if fail to load topology 
 remove dynamic controls from the component driver 
 process the header types from end to start 
 remove mixer controls 
				
				  call link_unload ops if extra
				  deinitialization is needed.
 let caller know if FW can be freed when no objects are left 
 SPDX-License-Identifier: GPL-2.0+
 soc-core.c  --  ALSA SoC Audio Layer
 Copyright 2005 Wolfson Microelectronics PLC.
 Copyright 2005 Openedhand Ltd.
 Copyright (C) 2010 Slimlogic Ltd.
 Copyright (C) 2010 Texas Instruments Inc.
 Author: Liam Girdwood <lrg@slimlogic.co.uk>
         with code, comments and ideas from :-
         Richard Purdie <richard@openedhand.com>
  TODO:
   o Add hw rules to enforce rates, etc.
   o More testing with other codecsmachines.
   o Add more codecs and platforms to ensure good API coverage.
   o Support TDM on PCM and I2S
  This is used if driver don't need to have CPUCodecPlatform
  dai_link. see soc.h
  This is a timeout to do a DAPM powerdown after a stream is closed().
  It can be used to eliminate pops between different playback streams, e.g.
  between two audio tracks.
 always visible 
 enabled only with codec 
 already connected 
 see for_each_rtd_components 
	
	  NOTE
	 
	  snd_soc_rtdcom_lookup() will find component from rtd by using
	  specified driver name.
	  But, if many components which have same driver name are connected
	  to 1 rtd, this function will return 1st found component.
  Power down the audio subsystem pmdown_time msecs after close is called.
  This is to ensure there are no pops or clicks in between any music tracks
  due to DAPM power cycling.
 are we waiting on this codec DAI stream 
 "dev" means "rtd->dev" 
	
	  we don't need to call kfree() for rtd->dev
	  see
	 	soc_release_rtd_dev()
	 
	  We don't need rtd->dev NULL check, because
	  it is alloced before rtd.
	  see
	 	soc_new_pcm_runtime()
	 
	  We don't need to mind freeing for rtd,
	  because it was created from dev (= rtd->dev)
	  see
	 	soc_new_pcm_runtime()
	 
	 		rtd = devm_kzalloc(dev, ...);
	 		rtd->dev = dev
	
	  for rtd->dev
 soc_release_rtd_dev 
	
	  for rtd
	
	  for rtd->dais
	
	  dais = [][][][][][][][][][][][][][][][][][]
	 	  ^cpu_dais         ^codec_dais
	 	  |--- num_cpus ---|--- num_codecs --|
	  see
	 	asoc_rtd_to_cpu()
	 	asoc_rtd_to_codec()
 see for_each_card_rtds 
 powers down audio subsystem for suspend 
 If the card is not initialized yet there is nothing to do 
	
	  Due to the resume being scheduled into a workqueue we could
	  suspend before that's finished - wait for it to complete.
 we're going to block userspace touching us until resume completes 
 mute any active DACs 
 suspend all pcms 
 close any waiting streams 
 Recheck all endpoints too, their state is affected by suspend 
 suspend all COMPONENTs 
			
			  ignore if component was already suspended
			
			  If there are paths active then the COMPONENT will be
			  held with bias _ON and should not be suspended.
				
				  If the COMPONENT is capable of idle
				  bias off then being in STANDBY
				  means it's doing something,
				  otherwise fall through.
 deactivate pins to sleep state 
  deferred resume work, so resume can complete before we finished
  setting our codec back up, which can be very slow on I2C
	
	  our power state is still SNDRV_CTL_POWER_D3hot from suspend time,
	  so userspace apps are blocked from touching us
 Bring us up into D2 so that DAPM starts enabling things 
 unmute any active DACs 
 Recheck all endpoints too, their state is affected by suspend 
 userspace can access us now we are back as we were before 
 powers up audio subsystem after a suspend 
 If the card is not initialized yet there is nothing to do 
 activate pins from sleep state 
 deferred resume work 
	
	  NOTE
	 
	  It returns 1st found component, but some driver
	  has few components by same of_nodename
	  ex)
	 	CPU component and generic DMAEngine component
  snd_soc_find_dai - Find a registered DAI
  @dlc: name of the DAI or the DAI driver and optional component info to match
  This function will search all registered components and their DAIs to
  find the DAI of the same name. The component's of_node and name
  should also match if being specified.
  Return: pointer of DAI, or NULL if not found.
 Find CPU DAI from registered DAIs 
		
		  Codec must be specified by 1 of name or OF node,
		  not both or neither.
 Codec DAI name must be specified 
		
		  Defer card registration if codec component is not added to
		  component list.
		
		  Platform may be specified by either name or OF node, but it
		  can be left unspecified, then no components will be inserted
		  in the rtdcom list
		
		  Defer card registration if platform component is not added to
		  component list.
		
		  CPU device may be specified by either name or OF node, but
		  can be left unspecified, and will be matched based on DAI
		  name alone..
		
		  Defer card registration if cpu dai component is not added to
		  component list.
		
		  At least one of CPU DAI name or CPU device namenode must be
		  specified
  snd_soc_remove_pcm_runtime - Remove a pcm_runtime from card
  @card: The ASoC card to which the pcm_runtime has
  @rtd: The pcm_runtime to remove
  This function removes a pcm_runtime from the ASoC card.
 release machine specific resources 
	
	  Notify the machine driver for extra destruction
  snd_soc_add_pcm_runtime - Add a pcm_runtime dynamically via dai_link
  @card: The ASoC card to which the pcm_runtime is added
  @dai_link: The DAI link to find pcm_runtime
  This function adds a pcm_runtime ASoC card by using dai_link.
  Note: Topology can use this API to add pcm_runtime when probing the
  topology component. And machine drivers can still define static
  DAI links in dai_link array.
	
	  Notify the machine driver for extra initialization
 Find CODEC from registered CODECs 
 Find PLATFORM from registered PLATFORMs 
	
	  Get selectable format from each DAIs.
	 
	 
	             NOTE
	  Using .auto_selectable_formats is not mandatory,
	  we can select format manually from Sound Card.
	  When use it, driver should list well tested format only.
	 
	 
	  ex)
	 	auto_selectable_formats (= SND_SOC_POSSIBLE_xxx)
	 		 (A)	 (B)	 (C)
	 	DAI0_: { 0x000F, 0x00F0, 0x0F00 };
	 	DAI1 : { 0xF000, 0x0F00 };
	 		 (X)	 (Y)
	 
	  "until" will be 3 in this case (MAX array size from DAI0 and DAI1)
	  Here is dev_dbg() message and comments
	 
	  priority = 1
	  DAI0: (pri, fmt) = (1, 000000000000000F)  1st check (A) DAI1 is not selected
	  DAI1: (pri, fmt) = (0, 0000000000000000)                Necessary Waste
	  DAI0: (pri, fmt) = (1, 000000000000000F)  2nd check (A)
	  DAI1: (pri, fmt) = (1, 000000000000F000)            (X)
	  priority = 2
	  DAI0: (pri, fmt) = (2, 00000000000000FF)  3rd check (A) + (B)
	  DAI1: (pri, fmt) = (1, 000000000000F000)            (X)
	  DAI0: (pri, fmt) = (2, 00000000000000FF)  4th check (A) + (B)
	  DAI1: (pri, fmt) = (2, 000000000000FF00)            (X) + (Y)
	  priority = 3
	  DAI0: (pri, fmt) = (3, 0000000000000FFF)  5th check (A) + (B) + (C)
	  DAI1: (pri, fmt) = (2, 000000000000FF00)            (X) + (Y)
	  found auto selected format: 0000000000000F00
 Not Found 
	
	  convert POSSIBLE_DAIFMT to DAIFMT
	 
	  Some basicdefault settings on each is defined as 0.
	  see
	 	SND_SOC_DAIFMT_NB_NF
	 	SND_SOC_DAIFMT_GATED
	 
	  SND_SOC_DAIFMT_xxx_MASK can't notice it if Sound Card specify
	  these value, and will be overwrite to auto selected value.
	 
	  To avoid such issue, loop from 63 to 0 here.
	  Small number of SND_SOC_POSSIBLE_xxx will be Hi priority.
	  BasicDefault settings of each part and aboves are defined
	  as Hi priority (= small number) of SND_SOC_POSSIBLE_xxx.
		
		  for format
		
		  for clock
		
		  for clock invert
		
		  for clock provider  consumer
	
	  Some driver might have very complex limitation.
	  In such case, user want to auto-select non-limitation part,
	  and want to manually specify complex part.
	 
	  Or for example, if both CPU and Codec can be clock provider,
	  but because of its quality, user want to specify it manually.
	 
	  Use manually specified settings if sound card did.
  snd_soc_runtime_set_dai_fmt() - Change DAI link format for a ASoC runtime
  @rtd: The runtime for which the DAI link format should be changed
  @dai_fmt: The new DAI link format
  This function updates the DAI link format for all DAIs connected to the DAI
  link for the specified runtime.
  Note: For setups with a static format set the dai_fmt field in the
  corresponding snd_dai_link struct instead of using this function.
  Returns 0 on success, otherwise a negative error code.
	
	  Flip the polarity for the "CPU" end of a CODEC<->CODEC link
 set default power off timeout 
 do machine specific initialization 
 add DPCM sysfs entries 
	
	  most drivers will register their PCMs using DAI link ordering but
	  topology based drivers can use the DAI link id field to set PCM
	  device number and then use rtd + a base offset of the BEs.
 create compress_device if possible 
 create the pcm 
	
	  If there is no configuration table or no match in the table,
	  check if a prefix is provided in the node
	
	  machine specific init
	  see
	 	snd_soc_component_set_aux()
 see for_each_card_components 
 remove all rtd connected DAIs in good order 
 probe all rtd connected DAIs in good order 
 for snd_soc_component_init() 
 codecs, usually analog devices 
 for snd_soc_component_init() 
 see for_each_card_auxs 
  If a DMI filed contain strings in this blacklist (e.g.
  "Type2 - Board Manufacturer" or "Type1 - TBD by OEM"), it will be taken
  as invalid and dropped when setting the card long name from DMI info.
 terminator 
  Trim special characters, and replace '-' with '_' since '-' is used to
  separate different DMI fields in the card long name. Only number and
  alphabet characters and a few separator characters are kept.
  Check if a DMI field is valid, i.e. not containing any string
  in the black list.
  Append a string to card->dmi_longname with character cleanups.
 skip the separator "-" 
  snd_soc_set_dmi_name() - Register DMI names to card
  @card: The card to register DMI names
  @flavour: The flavour "differentiator" for the card amongst its peers.
  An Intel machine driver may be used by many different devices but are
  difficult for userspace to differentiate, since machine drivers ususally
  use their own name as the card short name and leave the card long name
  blank. To differentiate such devices and fix bugs due to lack of
  device-specific configurations, this function allows DMI info to be used
  as the sound card long name, in the format of
  "vendor-product-version-board"
  (Character '-' is used to separate different DMI fields here).
  This will help the user space to load the device-specific Use Case Manager
  (UCM) configurations for the card.
  Possible card long names may be:
  DellInc.-XPS139343-01-0310JH
  ASUSTeKCOMPUTERINC.-T100TA-1.0-T100TA
  Circuitco-MinnowboardMaxD0PLATFORM-D0-MinnowBoardMAX
  This function also supports flavoring the card longname to provide
  the extra differentiation, like "vendor-product-version-board-flavor".
  We only keep number and alphabet characters and a few separator characters
  in the card long name since UCM in the user space uses the card long names
  as card configuration directory names and AudoConf cannot support special
  charactors like SPACE.
  Returns 0 on success, otherwise a negative error code.
 long name already set by driver or from DMI 
 make up dmi long name as: vendor-product-version-board 
		
		  some vendors like Lenovo may only put a self-explanatory
		  name in the product version field
 fall back to using legacy name 
 Add flavour to dmi long name 
 set the card long name 
 CONFIG_DMI 
 does this component override BEs ? 
 for this machine ? 
 machine matches, so override the rtd data 
 ignore this FE 
 override platform component 
 convert non BE into BE 
 convert normal link into DPCM one 
			
			  override any BE fixups
			  see
			 	snd_soc_link_be_hw_params_fixup()
			
			  most BE links don't set stream name, so set it to
			  dai link name if it's NULL to help bind widgets.
 Inform userspace we are using alternate topology 
 topology shortname created? 
 use topology shortname 
	
	  Name normalization
	 
	  The driver name is somewhat special, as it's used as a key for
	  searches in the user-space.
	 
	  ex)
	 	"abcd??efg" -> "abcd__efg"
 remove and free each DAI 
 remove auxiliary devices 
 remove the card 
 check whether any platform is ignore machine FE and using topology 
 bind aux_devs too 
 add predefined DAI links to the list 
 card bind complete so register a sound card 
 initialise the sound card only once 
 probe all components used by DAI links on this card 
 probe auxiliary components 
 probe all DAI links on this card 
 try to set some sane longname if DMI is available 
 the current implementation of snd_component_add() accepts 
 multiple components in the string separated by space, 
 but the string collision (identical string) check might 
 not work correctly 
 deactivate pins to sleep state 
 probes a new socdev 
	
	  no card, so machine driver should be registering card
	  we should not be here in that case so ret error
 Bodge while we unpick instantiation 
	
	  Flush out pmdown_time work - we actually do want to run it
	  now, we're shutting down so no imminent restart.
 deactivate pins to sleep state 
 ASoC platform driver 
  snd_soc_cnew - create new control
  @_template: control template
  @data: control private data
  @long_name: control long name
  @prefix: control name prefix
  Create a new mixer control from a template control.
  Returns 0 for success, else error.
  snd_soc_add_component_controls - Add an array of controls to a component.
  @component: Component to add controls to
  @controls: Array of controls to add
  @num_controls: Number of elements in the array
  Return: 0 for success, else error.
  snd_soc_add_card_controls - add an array of controls to a SoC card.
  Convenience function to add a list of controls.
  @soc_card: SoC card to add controls to
  @controls: array of controls to add
  @num_controls: number of elements in the array
  Return 0 for success, else error.
  snd_soc_add_dai_controls - add an array of controls to a DAI.
  Convienience function to add a list of controls.
  @dai: DAI to add controls to
  @controls: array of controls to add
  @num_controls: number of elements in the array
  Return 0 for success, else error.
  snd_soc_register_card - Register a card with the ASoC core
  @card: Card to register
  snd_soc_unregister_card - Unregister a card with the ASoC core
  @card: Card to unregister
  Simplify DAI link configuration by removing ".-1" from device names
  and sanitizing names.
 are we a "%s.%d" name (platform and SPI components) 
 get ID 
 discard ID from name if ID == -1 
 I2C component devices are named "bus-addr" 
 create unique ID number from I2C addr and bus 
 sanitize component name for DAI link creation 
  Simplify DAI link naming for single devices with multiple DAIs by removing
  any ".-1" and using the DAI name (instead of device name).
  snd_soc_register_dai - Register a DAI dynamically & create its widgets
  @component: The component the DAIs are registered for
  @dai_drv: DAI driver to use for the DAI
  @legacy_dai_naming: if %true, use legacy single-name format;
  	if %false, use multiple-name format;
  Topology can use this API to register DAIs when probing a component.
  These DAIs's widgets will be freed in the card cleanup and the DAIs
  will be freed in the component cleanup.
	
	  Back in the old days when we still had component-less DAIs,
	  instead of having a static name, component-less DAIs would
	  inherit the name of the parent device so it is possible to
	  register multiple instances of the DAI. We still need to keep
	  the same naming style even though those DAIs are not
	  component-less anymore.
 see for_each_component_dais 
  snd_soc_unregister_dais - Unregister DAIs from the ASoC core
  @component: The component for which the DAIs should be unregistered
  snd_soc_register_dais - Register a DAI with the ASoC core
  @component: The component the DAIs are registered for
  @dai_drv: DAI driver to use for the DAIs
  @count: Number of DAIs
  Fix up the DAI formats for endianness: codecs don't actually see
  the endianness of the data but we're using the CPU format
  definitions which do need to include endianness so we ensure that
  codec DAIs always have both big and little endian variants set.
 see for_each_component 
  snd_soc_unregister_component_by_driver - Unregister component using a given driver
  from the ASoC core
  @dev: The device to unregister
  @component_driver: The component driver to unregister
  snd_soc_unregister_component - Unregister all related component
  from the ASoC core
  @dev: The device to unregister
 Retrieve a card's name from device tree 
	
	  EINVAL means the property does not exist. This is fine providing
	  card->name was previously set, which is checked later in
	  snd_soc_register_card.
 no prefix is not error 
	
	  bit_frame is return value from
	 	snd_soc_daifmt_parse_clock_provider_raw()
 Codec base 
	
	  check "dai-format = xxx"
	  or    "[prefix]format = xxx"
	  SND_SOC_DAIFMT_FORMAT_MASK area
	
	  check "[prefix]continuous-clock"
	  SND_SOC_DAIFMT_CLOCK_MASK area
	
	  check "[prefix]bitclock-inversion"
	  check "[prefix]frame-inversion"
	  SND_SOC_DAIFMT_INV_MASK area
 SND_SOC_DAIFMT_NB_NF is default 
	
	  check "[prefix]bitclock-master"
	  check "[prefix]frame-master"
	
	  return bitmap.
	  It will be parameter of
	 	snd_soc_daifmt_clock_provider_from_bitmap()
	
	  For example HDMI case, HDMI has videosound port,
	  but ALSA SoC needs sound port number only.
	  Thus counting HDMI DT portendpoint doesn't work.
	  Then, it should have .of_xlate_dai_id
 same as dai_drv[0] 
 not supported 
 find target DAI 
			
			  if another error than ENOTSUPP is returned go on and
			  check if another component is provided with the same
			  node. This may happen if a device provides several
			  components
  snd_soc_of_put_dai_link_codecs - Dereference device nodes in the codecs array
  @dai_link: DAI link
  Dereference device nodes acquired by snd_soc_of_get_dai_link_codecs().
  snd_soc_of_get_dai_link_codecs - Parse a list of CODECs in the devicetree
  @dev: Card device
  @of_node: Device node
  @dai_link: DAI link
  Builds an array of CODEC DAI components from the DAI link property
  'sound-dai'.
  The array is set in the DAI link and the number of DAIs is set accordingly.
  The device nodes in the array (of_node) must be dereferenced by calling
  snd_soc_of_put_dai_link_codecs() on @dai_link.
  Returns 0 for success
 Count the number of CODECs 
 Parse the list 
 Module information 
 SPDX-License-Identifier: GPL-2.0+
 soc-ops.c  --  Generic ASoC operations
 Copyright 2005 Wolfson Microelectronics PLC.
 Copyright 2005 Openedhand Ltd.
 Copyright (C) 2010 Slimlogic Ltd.
 Copyright (C) 2010 Texas Instruments Inc.
 Author: Liam Girdwood <lrg@slimlogic.co.uk>
         with code, comments and ideas from :-
         Richard Purdie <richard@openedhand.com>
  snd_soc_info_enum_double - enumerated double mixer info callback
  @kcontrol: mixer control
  @uinfo: control element information
  Callback to provide information about a double enumerated
  mixer control.
  Returns 0 for success.
  snd_soc_get_enum_double - enumerated double mixer get callback
  @kcontrol: mixer control
  @ucontrol: control element information
  Callback to get the value of a double enumerated mixer.
  Returns 0 for success.
  snd_soc_put_enum_double - enumerated double mixer put callback
  @kcontrol: mixer control
  @ucontrol: control element information
  Callback to set the value of a double enumerated mixer.
  Returns 0 for success.
  snd_soc_read_signed - Read a codec register and interpret as signed value
  @component: component
  @reg: Register to read
  @mask: Mask to use after shifting the register value
  @shift: Right shift of register value
  @sign_bit: Bit that describes if a number is negative or not.
  @signed_val: Pointer to where the read value should be stored
  This functions reads a codec register. The register value is shifted right
  by 'shift' bits and masked with the given 'mask'. Afterwards it translates
  the given registervalue into a signed integer if sign_bit is non-zero.
  Returns 0 on sucess, otherwise an error value
 non-negative number 
	
	  The register most probably does not contain a full-sized int.
	  Instead we have an arbitrary number of bits in a signed
	  representation which has to be translated into a full-sized int.
	  This is done by filling up all bits above the sign-bit.
  snd_soc_info_volsw - single mixer info callback
  @kcontrol: mixer control
  @uinfo: control element information
  Callback to provide information about a single mixer control, or a double
  mixer control that spans 2 registers.
  Returns 0 for success.
  snd_soc_info_volsw_sx - Mixer info callback for SX TLV controls
  @kcontrol: mixer control
  @uinfo: control element information
  Callback to provide information about a single mixer control, or a double
  mixer control that spans 2 registers of the SX TLV type. SX TLV controls
  have a range that represents both positive and negative values either side
  of zero but without a sign bit.
  Returns 0 for success.
	 Max represents the number of levels in an SX control not the
	  maximum value, so add the minimum value back on
  snd_soc_get_volsw - single mixer get callback
  @kcontrol: mixer control
  @ucontrol: control element information
  Callback to get the value of a single mixer control, or a double mixer
  control that spans 2 registers.
  Returns 0 for success.
  snd_soc_put_volsw - single mixer put callback
  @kcontrol: mixer control
  @ucontrol: control element information
  Callback to set the value of a single mixer control, or a double mixer
  control that spans 2 registers.
  Returns 0 for success.
  snd_soc_get_volsw_sx - single mixer get callback
  @kcontrol: mixer control
  @ucontrol: control element information
  Callback to get the value of a single mixer control, or a double mixer
  control that spans 2 registers.
  Returns 0 for success.
  snd_soc_put_volsw_sx - double mixer set callback
  @kcontrol: mixer control
  @ucontrol: control element information
  Callback to set the value of a double mixer control that spans 2 registers.
  Returns 0 for success.
  snd_soc_info_volsw_range - single mixer info callback with range.
  @kcontrol: mixer control
  @uinfo: control element information
  Callback to provide information, within a range, about a single
  mixer control.
  returns 0 for success.
  snd_soc_put_volsw_range - single mixer put value callback with range.
  @kcontrol: mixer control
  @ucontrol: control element information
  Callback to set the value, within a range, for a single mixer control.
  Returns 0 for success.
  snd_soc_get_volsw_range - single mixer get callback with range
  @kcontrol: mixer control
  @ucontrol: control element information
  Callback to get the value, within a range, of a single mixer control.
  Returns 0 for success.
  snd_soc_limit_volume - Set new limit to an existing volume control.
  @card: where to look for the control
  @name: Name of the control
  @max: new maximum limit
  Return 0 for success, else error.
 Sanity check for name and max 
 Hide any masked bytes to ensure consistent data reporting 
	
	  If we've got a mask then we need to preserve the register
	  bits.  We shouldn't modify the incoming data so take a
	  copy.
  snd_soc_info_xr_sx - signed multi register info callback
  @kcontrol: mreg control
  @uinfo: control element information
  Callback to provide information of a control that can
  span multiple codec registers which together
  forms a single signed value in a MSBLSB manner.
  Returns 0 for success.
  snd_soc_get_xr_sx - signed multi register get callback
  @kcontrol: mreg control
  @ucontrol: control element information
  Callback to get the value of a control that can span
  multiple codec registers which together forms a single
  signed value in a MSBLSB manner. The control supports
  specifying total no of bits used to allow for bitfields
  across the multiple codec registers.
  Returns 0 for success.
  snd_soc_put_xr_sx - signed multi register get callback
  @kcontrol: mreg control
  @ucontrol: control element information
  Callback to set the value of a control that can span
  multiple codec registers which together forms a single
  signed value in a MSBLSB manner. The control supports
  specifying total no of bits used to allow for bitfields
  across the multiple codec registers.
  Returns 0 for success.
  snd_soc_get_strobe - strobe get callback
  @kcontrol: mixer control
  @ucontrol: control element information
  Callback get the value of a strobe mixer control.
  Returns 0 for success.
  snd_soc_put_strobe - strobe put callback
  @kcontrol: mixer control
  @ucontrol: control element information
  Callback strobe a register bit to high then low (or the inverse)
  in one pass of a single mixer enum control.
  Returns 1 for success.
 SPDX-License-Identifier: GPL-2.0-only
  soc-topology-test.c  --  ALSA SoC Topology Kernel Unit Tests
  Copyright(c) 2021 Intel Corporation. All rights reserved.
 ===== HELPER FUNCTIONS =================================================== 
  snd_soc_component needs device to operate on (primarily for prints), create
  fake one, as we don't register with PCI or anything else
  device_driver name is used in some of the prints (fmt_single_name) so
  we also mock up minimal one
  helper struct we use when registering component, as we load topology during
  component probe, we need to pass struct kunit somehow to probe function, so
  we can report test result
 what result we expect when loading topology 
  ASoC minimal boiler plate
 ===== TOPOLOGY TEMPLATES ================================================= 
 Structural representation of topology which can be generated with:
 $ touch empty
 $ alsatplg -c empty -o empty.tplg
 $ xxd -i empty.tplg
 rest of fields is 0 
 Structural representation of topology containing SectionPCM
 rest of fields is 0 
 ===== TEST CASES ========================================================= 
 TEST CASE
 Test passing NULL component as parameter to snd_soc_tplg_component_load
  need to override generic probe function with one using NULL when calling
  topology load during component initialization, we don't need .remove
  handler as load should fail
 instead of passing component pointer as first argument, pass NULL here 
 prepare 
 expect failure 
 run test 
 cleanup 
 TEST CASE
 Test passing NULL ops as parameter to snd_soc_tplg_component_load
  NULL ops is default case, we pass empty topology (fw), so we don't have
  anything to parse and just do nothing, which results in return 0; from
  calling soc_tplg_dapm_complete in soc_tplg_process_headers
 prepare 
 expect success 
 run test 
 cleanup 
 TEST CASE
 Test passing NULL fw as parameter to snd_soc_tplg_component_load
  need to override generic probe function with one using NULL pointer to fw
  when calling topology load during component initialization, we don't need
  .remove handler as load should fail
 instead of passing fw pointer as third argument, pass NULL here 
 prepare 
 expect failure 
 run test 
 cleanup 
 TEST CASE
 Test passing "empty" topology file
 prepare 
 expect success 
 run test 
 cleanup 
 TEST CASE
 Test "empty" topology file, but with bad "magic"
 In theory we could loop through all possible bad values, but it takes too
 long, so just use SND_SOC_TPLG_MAGIC + 1
 prepare 
 expect failure 
	
	  override abi
	  any value != magic number is wrong
 run test 
 cleanup 
 TEST CASE
 Test "empty" topology file, but with bad "abi"
 In theory we could loop through all possible bad values, but it takes too
 long, so just use SND_SOC_TPLG_ABI_VERSION + 1
 prepare 
 expect failure 
	
	  override abi
	  any value != accepted range is wrong
 run test 
 cleanup 
 TEST CASE
 Test "empty" topology file, but with bad "size"
 In theory we could loop through all possible bad values, but it takes too
 long, so just use sizeof(struct snd_soc_tplg_hdr) + 1
 prepare 
 expect failure 
	
	  override size
	  any value != struct size is wrong
 run test 
 cleanup 
 TEST CASE
 Test "empty" topology file, but with bad "payload_size"
 In theory we could loop through all possible bad values, but it takes too
 long, so just use the known wrong one
 prepare 
 expect failure 
	
	  override payload size
	  there is only explicit check for 0, so check with it, other values
	  are handled by just not reading behind EOF
 run test 
 cleanup 
 TEST CASE
 Test passing topology file with PCM definition
 prepare 
 expect success 
 run test 
 cleanup 
 TEST CASE
 Test passing topology file with PCM definition
 with component reload
 prepare 
 expect success 
 run test 
 cleanup 
 TEST CASE
 Test passing topology file with PCM definition
 with card reload
 prepare 
 expect success 
 run test 
 cleanup 
 ===== KUNIT MODULE DEFINITIONS =========================================== 
 SPDX-License-Identifier: GPL-2.0+
 soc-dapm.c  --  ALSA SoC Dynamic Audio Power Management
 Copyright 2005 Wolfson Microelectronics PLC.
 Author: Liam Girdwood <lrg@slimlogic.co.uk>
  Features:
    o Changes power status of internal codec blocks depending on the
      dynamic configuration of codec internal audio paths and active
      DACsADCs.
    o Platform power domain - can support external components i.e. amps and
      micheadphone insertion events.
    o Automatic Mic Bias support
    o Jack insertion power event initiation - e.g. hp insertion will enable
      sinks, dacs, etc
    o Delayed power down of audio subsystem to reduce pops between a quick
      device reopen.
 dapm power sequences - make this per codec in the future 
  Common implementation for dapm_widget_invalidate_input_paths() and
  dapm_widget_invalidate_output_paths(). The function is inlined since the
  combined size of the two specialized functions is only marginally larger then
  the size of the generic function and at the same time the fast path of the
  specialized functions is significantly smaller than the generic function.
  dapm_widget_invalidate_input_paths() - Invalidate the cached number of
   input paths
  @w: The widget for which to invalidate the cached number of input paths
  Resets the cached number of inputs for the specified widget and all widgets
  that can be reached via outcoming paths from the widget.
  This function must be called if the number of output paths for a widget might
  have changed. E.g. if the source state of a widget changes or a path is added
  or activated with the widget as the sink.
  dapm_widget_invalidate_output_paths() - Invalidate the cached number of
   output paths
  @w: The widget for which to invalidate the cached number of output paths
  Resets the cached number of outputs for the specified widget and all widgets
  that can be reached via incoming paths from the widget.
  This function must be called if the number of output paths for a widget might
  have changed. E.g. if the sink state of a widget changes or a path is added
  or activated with the widget as the source.
  dapm_path_invalidate() - Invalidates the cached number of inputs and outputs
   for the widgets connected to a path
  @p: The path to invalidate
  Resets the cached number of inputs for the sink of the path and the cached
  number of outputs for the source of the path.
  This function must be called when a path is added, removed or the connected
  state changes.
	
	  Weak paths or supply paths do not influence the number of input or
	  output paths of their neighbors.
	
	  The number of connected endpoints is the sum of the number of
	  connected endpoints of all neighbors. If a node with 0 connected
	  endpoints is either connected or disconnected that sum won't change,
	  so there is no need to re-check the path.
 create a new dapm widget 
	
	  w->name is duplicated in caller, but w->sname isn't.
	  Duplicate it here if defined
  snd_soc_dapm_kcontrol_widget() - Returns the widget associated to a
    kcontrol
  @kcontrol: The kcontrol
  snd_soc_dapm_kcontrol_dapm() - Returns the dapm context associated to a
   kcontrol
  @kcontrol: The kcontrol
  Note: This function must only be used on kcontrols that are known to have
  been registered for a CODEC. Otherwise the behaviour is undefined.
  snd_soc_dapm_force_bias_level() - Sets the DAPM bias level
  @dapm: The DAPM context for which to set the level
  @level: The level to set
  Forces the DAPM bias level to a specific state. It will call the bias level
  callback of DAPM context with the specified level. This will even happen if
  the context is already at the same level. Furthermore it will not go through
  the normal bias level sequencing, meaning any intermediate states between the
  current and the target state will not be entered.
  Note that the change in bias level is only temporary and the next time
  snd_soc_dapm_sync() is called the state will be set to the level as
  determined by the DAPM core. The function is mainly intended to be used to
  used during probe or resume from suspend to power up the device so
  initialization can be done, before the DAPM core takes over.
  snd_soc_dapm_set_bias_level - set the bias level for the system
  @dapm: DAPM context
  @level: level to configure
  Configure the bias (power) levels for the SoC audio device.
  Returns 0 for success else error.
 connect mux widget to its interconnecting audio paths 
		 since a virtual mux has no backing registers to
		  decide which path to connect, it will try to match
		  with the first enumeration.  This is to ensure
		  that the default mux choice (the first) will be
		  correctly powered up during initialization.
 set up initial codec paths 
		
		  The nth_path argument allows this function to know
		  which path of a kcontrol it is setting the initial
		  status for. Ideally this would support any number
		  of paths and channels. But since kcontrols only come
		  in mono and stereo variants, we are limited to 2
		  channels.
		 
		  The following code assumes for stereo controls the
		  first path is the left channel, and all remaining
		  paths are the right channel.
		 since a virtual mixer has no backing registers to
		  decide which path to connect, it will try to match
		  with initial state.  This is to ensure
		  that the default mixer choice will be
		  correctly powered up during initialization.
 connect mixer widget to its interconnecting audio paths 
 search for mixer kcontrol 
  Determine if a kcontrol is shared. If it is, look it up. If it isn't,
  create it. Either way, add the widget into the control's widget list
			
			  The control will get a prefix from the control
			  creation process but we're also using the same
			  prefix for widgets so cut the prefix off the
			  front of the widget name.
 create new dapm mixer control 
 add kcontrol 
 match name 
 mixermux paths name must match control name 
 create new dapm mux control 
 create new dapm volume control 
 create new dapm dai link control 
 create control for links with > 1 config 
 add kcontrol 
 We implement power down on suspend by checking the power state of
  the ALSA card - when we are suspending the ALSA state for the card
  is set to D3.
  Recursively reset the cached number of inputs or outputs for the specified
  widget and all widgets that can be reached via incoming or outcoming paths
  from the widget.
  Common implementation for is_connected_output_ep() and
  is_connected_input_ep(). The function is inlined since the combined size of
  the two specialized functions is only marginally larger then the size of the
  generic function and at the same time the fast path of the specialized
  functions is significantly smaller than the generic function.
 do we need to add this widget to the list ? 
  Recursively check for a completed path to an active or physically connected
  output widget. Returns number of complete paths.
  Optionally, can be supplied with a function acting as a stopping condition.
  This function takes the dapm widget currently being examined and the walk
  direction as an arguments, it should return true if widgets from that point
  in the graph onwards should not be added to the widget list.
  Recursively check for a completed path to an active or physically connected
  input widget. Returns number of complete paths.
  Optionally, can be supplied with a function acting as a stopping condition.
  This function takes the dapm widget currently being examined and the walk
  direction as an arguments, it should return true if the walk should be
  stopped and false otherwise.
  snd_soc_dapm_dai_get_connected_widgets - query audio path and it's widgets.
  @dai: the soc DAI.
  @stream: stream direction.
  @list: list of active widgets for this stream.
  @custom_stop_condition: (optional) a function meant to stop the widget graph
                          walk based on custom logic.
  Queries DAPM graph as to whether a valid audio stream path exists for
  the initial stream specified by name. This takes into account
  current mixer and mux kcontrol settings. Creates list of valid widgets.
  Optionally, can be supplied with a function acting as a stopping condition.
  This function takes the dapm widget currently being examined and the walk
  direction as an arguments, it should return true if the walk should be
  stopped and false otherwise.
  Returns the number of valid paths or negative error.
 Drop starting point 
  Handler for regulator supply widget.
  Handler for pinctrl widget.
  Handler for clock supply widget.
 Generic check to see if a widget should be powered. 
 Check to see if a power supply is needed 
 Check if one of our outputs is connected 
 Insert a widget in order into a DAPM power sequence. 
 Apply the coalesced changes from a DAPM sequence 
 Check for events 
		 Any widget will do, they should all be updating the
		  same register.
 Apply a DAPM power sequence.
  We walk over a pre-sorted list of widgets to apply power to.  In
  order to minimise the number of writes to the device required
  multiple widgets will be updated in a single write where possible.
  Currently anything that requires more than a single write is not
  handled.
 Do we need to apply any queued changes? 
 Queue it up for application 
 Async callback run prior to DAPM sequences - brings to _PREPARE if
  they're changing state.
 If we're off and we're not supposed to go into STANDBY 
 Prepare for a transition to ON or away from ON 
 Async callback run prior to DAPM sequences - brings to their final
  state.
 If we just powered the last thing off drop to standby bias 
 If we're in standby and can support bias off then do that 
 If we just powered up then move to active bias 
	 If a connection is being made or broken then that update
	  will have marked the peer dirty, otherwise the widgets are
	 If the peer is already in the state we're moving to then we
	 If we changed our power state perhaps our neigbours changed
	  also.
 Supplies can't affect their outputs, only their inputs 
  Scan each dapm widget for complete audio path.
  A complete path is a route that has valid endpoints i.e.:-
   o DAC to output pin.
   o Input pin to ADC.
   o Input pin to Output pin (bypass, sidetone)
   o DAC to ADC (loopback).
	 Check which widgets we need to power and store them in
	  lists indicating if they should be powered up or down.  We
	  only check widgets that have been flagged as dirty but note
	  that new widgets may be added to the dirty list while we
	  iterate.
 These widgets always need to be powered 
			 Supplies and micbiases only bring the
			  context up to STANDBY as unless something
			  else is active and passing audio they
			  generally don't require full power.  Signal
			  generators are virtual pins and have no
			  power impact themselves.
	 Force all contexts in the card to the same bias state if
	  they're not ground referenced.
 Run card bias changes at first 
 Run other bias changes in parallel 
 Power down widgets first; try to avoid amplifying pops. 
 Now power up. 
 Run all the bias changes in parallel 
 Run card bias changes at last 
 do we need to notify any clients that DAPM event is complete 
 Supply widgets are not handled by is_connected_{input,output}_ep() 
  soc_dapm_connect_path() - Connects or disconnects a path
  @path: The path to update
  @connect: The new connect state of the path. True if the path is connected,
   false if it is disconnected.
  @reason: The reason why the path changed (for debugging only)
 test and update the power status of a mux widget 
 find dapm widget path assoc with kcontrol 
 we now need to match the string in the enum to the path 
 test and update the power status of a mixer or switch widget 
 find dapm widget path assoc with kcontrol 
		
		  Ideally this function should support any number of
		  paths and channels. But since kcontrols only come
		  in mono and stereo variants, we are limited to 2
		  channels.
		 
		  The following code assumes for stereo controls the
		  first path (when 'found == 0') is the left channel,
		  and all remaining paths (when 'found == 1') are the
		  right channel.
		 
		  A stereo control is signified by a valid 'rconnect'
		  value, either 0 for unconnected, or >= 0 for connected.
		  This is chosen instead of using snd_soc_volsw_is_stereo,
		  so that the behavior of snd_soc_dapm_mixer_update_power
		  doesn't change even when the kcontrol passed in is
		  stereo.
		 
		  It passes 'connect' as the path connect status for
		  the left channel, and 'rconnect' for the right
		  channel.
	 card won't be set for the dummy component, as a spot fix
	  we're checking for that case specifically here but in future
	  we will ensure that the dummy component looks like others.
 only display widgets that burn power 
 show dapm widget status in sys fs 
	
	  remove source and sink paths associated to this widget.
	  While removing the path, remove reference to it from both
	  source and sink widgets so that path is removed only once.
 free all dapm widgets and resources 
  snd_soc_dapm_sync_unlocked - scan and power dapm paths
  @dapm: DAPM context
  Walks all dapm audio paths and powers widgets according to their
  stream or path usage.
  Requires external locking.
  Returns 0 for success.
	
	  Suppress early reports (eg, jacks syncing their state) to avoid
	  silly DAPM runs during card startup.
  snd_soc_dapm_sync - scan and power dapm paths
  @dapm: DAPM context
  Walks all dapm audio paths and powers widgets according to their
  stream or path usage.
  Returns 0 for success.
  dapm_update_widget_flags() - Re-compute widget sink and source flags
  @w: The widget for which to update the flags
  Some widgets have a dynamic category which depends on which neighbors they
  are connected to. This function update the category for these widgets.
  This function must be called whenever a path is added or removed to a widget.
 On a fully routed card an input is never a source 
 On a fully routed card a output is never a sink 
 connect static paths 
	
	  find src and dest widgets over all widgets but favor a widget from
	  current DAPM context
 use widget from another DAPM context if not found from this 
 Update any path related flags 
  snd_soc_dapm_add_routes - Add routes between DAPM widgets
  @dapm: DAPM context
  @route: audio routes
  @num: number of routes
  Connects 2 dapm widgets together via a named audio path. The sink is
  the widget receiving the audio signal, whilst the source is the sender
  of the audio signal.
  Returns 0 for success else error. On error all resources can be freed
  with a call to snd_soc_card_free().
  snd_soc_dapm_del_routes - Remove routes between DAPM widgets
  @dapm: DAPM context
  @route: audio routes
  @num: number of routes
  Removes routes from the DAPM context.
  snd_soc_dapm_weak_routes - Mark routes between DAPM widgets as weak
  @dapm: DAPM context
  @route: audio routes
  @num: number of routes
  Mark existing routes matching those specified in the passed array
  as being weak, meaning that they are ignored for the purpose of
  power decisions.  The main intended use case is for sidetone paths
  which couple audio between other independent paths if they are both
  active in order to make the combination work better at the user
  level but which aren't intended to be "used".
  Note that CODEC drivers should not use this as sidetone type paths
  can frequently also be used as bypass paths.
  snd_soc_dapm_new_widgets - add new dapm widgets
  @card: card to be checked for new dapm widgets
  Checks the codec for any new dapm widgets and creates them if found.
  Returns 0 for success.
 Read the initial power state from the device 
  snd_soc_dapm_get_volsw - dapm mixer get callback
  @kcontrol: mixer control
  @ucontrol: control element information
  Callback to get the value of a dapm mixer control.
  Returns 0 for success.
  snd_soc_dapm_put_volsw - dapm mixer set callback
  @kcontrol: mixer control
  @ucontrol: control element information
  Callback to set the value of a dapm mixer control.
  Returns 0 for success.
 This assumes field width < (bits in unsigned int  2) 
  snd_soc_dapm_get_enum_double - dapm enumerated double mixer get callback
  @kcontrol: mixer control
  @ucontrol: control element information
  Callback to get the value of a dapm enumerated double mixer control.
  Returns 0 for success.
  snd_soc_dapm_put_enum_double - dapm enumerated double mixer set callback
  @kcontrol: mixer control
  @ucontrol: control element information
  Callback to set the value of a dapm enumerated double mixer control.
  Returns 0 for success.
  snd_soc_dapm_info_pin_switch - Info for a pin switch
  @kcontrol: mixer control
  @uinfo: control element information
  Callback to provide information about a pin switch control.
  snd_soc_dapm_get_pin_switch - Get information for a pin switch
  @kcontrol: mixer control
  @ucontrol: Value
  snd_soc_dapm_put_pin_switch - Set information for a pin switch
  @kcontrol: mixer control
  @ucontrol: Value
 set to sleep_state when initializing 
 see for_each_card_widgets 
 machine layer sets up unconnected pins and insertions 
  snd_soc_dapm_new_control - create new dapm control
  @dapm: DAPM context
  @widget: widget template
  Creates new DAPM control based upon a template.
  Returns a widget pointer on success or an error pointer on failure
  snd_soc_dapm_new_controls - create new dapm controls
  @dapm: DAPM context
  @widget: widget array
  @num: number of widgets
  Creates new DAPM controls based upon the templates.
  Returns 0 for success else error.
	
	  Note: getting the config after .startup() gives a chance to
	  either party on the link to alter the configuration if
	  necessary
 Be a little careful as we don't want to overflow the mask array 
 Restore the substream direction 
 Can't change the config when widget is already powered 
 duplicate kcontrol_dai_link on heap so that memory persists 
 allocate memory for control, only in case of multiple configs 
 For each DAI widget... 
 let users know there is no DAI to link 
 ...find all widgets with the same stream and link them 
 connect BE DAI playback if widgets are valid 
 connect BE DAI capture if widgets are valid 
 for each BE DAI link... 
		
		  dynamic FE links have no fixed DAI mapping.
		  CODEC<->CODEC links have no direct connection.
  snd_soc_dapm_stream_event - send a stream event to the dapm core
  @rtd: PCM runtime data
  @stream: stream name
  @event: stream event
  Sends a stream event to the dapm core. The core then makes any
  necessary widget power changes.
  Returns 0 for success else error.
 powered down playback stream now 
 start delayed pop wq here for playback streams 
 capture streams can be powered down now 
  snd_soc_dapm_enable_pin_unlocked - enable pin.
  @dapm: DAPM context
  @pin: pin name
  Enables inputoutput pin and its parents or children widgets iff there is
  a valid audio route and active audio stream.
  Requires external locking.
  NOTE: snd_soc_dapm_sync() needs to be called after this for DAPM to
  do any widget power switching.
  snd_soc_dapm_enable_pin - enable pin.
  @dapm: DAPM context
  @pin: pin name
  Enables inputoutput pin and its parents or children widgets iff there is
  a valid audio route and active audio stream.
  NOTE: snd_soc_dapm_sync() needs to be called after this for DAPM to
  do any widget power switching.
  snd_soc_dapm_force_enable_pin_unlocked - force a pin to be enabled
  @dapm: DAPM context
  @pin: pin name
  Enables inputoutput pin regardless of any other state.  This is
  intended for use with microphone bias supplies used in microphone
  jack detection.
  Requires external locking.
  NOTE: snd_soc_dapm_sync() needs to be called after this for DAPM to
  do any widget power switching.
		
		  w->force does not affect the number of input or output paths,
		  so we only have to recheck if w->connected is changed
  snd_soc_dapm_force_enable_pin - force a pin to be enabled
  @dapm: DAPM context
  @pin: pin name
  Enables inputoutput pin regardless of any other state.  This is
  intended for use with microphone bias supplies used in microphone
  jack detection.
  NOTE: snd_soc_dapm_sync() needs to be called after this for DAPM to
  do any widget power switching.
  snd_soc_dapm_disable_pin_unlocked - disable pin.
  @dapm: DAPM context
  @pin: pin name
  Disables inputoutput pin and its parents or children widgets.
  Requires external locking.
  NOTE: snd_soc_dapm_sync() needs to be called after this for DAPM to
  do any widget power switching.
  snd_soc_dapm_disable_pin - disable pin.
  @dapm: DAPM context
  @pin: pin name
  Disables inputoutput pin and its parents or children widgets.
  NOTE: snd_soc_dapm_sync() needs to be called after this for DAPM to
  do any widget power switching.
  snd_soc_dapm_nc_pin_unlocked - permanently disable pin.
  @dapm: DAPM context
  @pin: pin name
  Marks the specified pin as being not connected, disabling it along
  any parent or child widgets.  At present this is identical to
  snd_soc_dapm_disable_pin() but in future it will be extended to do
  additional things such as disabling controls which only affect
  paths through the pin.
  Requires external locking.
  NOTE: snd_soc_dapm_sync() needs to be called after this for DAPM to
  do any widget power switching.
  snd_soc_dapm_nc_pin - permanently disable pin.
  @dapm: DAPM context
  @pin: pin name
  Marks the specified pin as being not connected, disabling it along
  any parent or child widgets.  At present this is identical to
  snd_soc_dapm_disable_pin() but in future it will be extended to do
  additional things such as disabling controls which only affect
  paths through the pin.
  NOTE: snd_soc_dapm_sync() needs to be called after this for DAPM to
  do any widget power switching.
  snd_soc_dapm_get_pin_status - get audio pin status
  @dapm: DAPM context
  @pin: audio signal pin endpoint (or start point)
  Get audio pin status - connected or disconnected.
  Returns 1 for connected otherwise 0.
  snd_soc_dapm_ignore_suspend - ignore suspend status for DAPM endpoint
  @dapm: DAPM context
  @pin: audio signal pin endpoint (or start point)
  Mark the given endpoint or pin as ignoring suspend.  When the
  system is disabled a path between two endpoints flagged as ignoring
  suspend will not be disabled.  The path must already be enabled via
  normal means at suspend time, it will not be turned on if it was not
  already enabled.
  snd_soc_dapm_free - free dapm resources
  @dapm: DAPM context
  Free all dapm widgets and resources.
 see for_each_card_dapms 
	 If there were no widgets to power down we're already in
	  standby.
  snd_soc_dapm_shutdown - callback for system shutdown
 Module information 
 SPDX-License-Identifier: GPL-2.0
 soc-component.c
 Copyright 2009-2011 Wolfson Microelectronics PLC.
 Copyright (C) 2019 Renesas Electronics Corp.
 Mark Brown <broonie@opensource.wolfsonmicro.com>
 Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
 PositiveZero values are not errors 
 Negative values might be errors 
  We might want to check substream by using list.
  In such case, we can update these macros.
  snd_soc_component_set_sysclk - configure COMPONENT system or master clock.
  @component: COMPONENT
  @clk_id: DAI specific clock ID
  @source: Source for the clock
  @freq: new clock frequency in Hz
  @dir: new clock direction - inputoutput.
  Configures the CODEC master (MCLK) or system (SYSCLK) clocking.
  snd_soc_component_set_pll - configure component PLL.
  @component: COMPONENT
  @pll_id: DAI specific PLL ID
  @source: DAI specific source for the PLL
  @freq_in: PLL input clock frequency in Hz
  @freq_out: requested PLL output clock frequency in Hz
  Configures and enables PLL to generate output clock based on input clock.
  snd_soc_component_set_jack - configure component jack.
  @component: COMPONENTs
  @jack: structure to use for the jack
  @data: can be used if codec driver need extra data for configuring jack
  Configures and enables jack detection function.
 mark module if succeeded 
 remove the mark from module 
 mark substream if succeeded 
 remove marked substream 
	
	  Don't use soc_component_ret here because we may not want to report
	  the error just yet. If a device has more than one component, the
	  first may not match and we don't want spam the log with this.
 Errors are legitimate for non-integer byte multiples 
  snd_soc_component_init_regmap() - Initialize regmap instance for the
                                    component
  @component: The component for which to initialize the regmap instance
  @regmap: The regmap instance that should be used by the component
  This function allows deferred assignment of the regmap instance that is
  associated with the component. Only use this if the regmap instance is not
  yet ready when the component is registered. The function must also be called
  before the first IO attempt of the component.
  snd_soc_component_exit_regmap() - De-initialize regmap instance for the
                                    component
  @component: The component for which to de-initialize the regmap instance
  Calls regmap_exit() on the regmap instance associated to the component and
  removes the regmap instance from the component.
  This function should only be used if snd_soc_component_init_regmap() was used
  to initialize the regmap instance.
 mark substream if succeeded 
 remove marked substream 
  snd_soc_component_read() - Read register value
  @component: Component to read from
  @reg: Register to read
  Return: read value
  snd_soc_component_write() - Write register value
  @component: Component to write to
  @reg: Register to write
  @val: Value to write to the register
  Return: 0 on success, a negative error code otherwise.
  snd_soc_component_update_bits() - Perform readmodifywrite cycle
  @component: Component to update
  @reg: Register to update
  @mask: Mask that specifies which bits to update
  @val: New value for the bits specified by mask
  Return: 1 if the operation was successful and the value of the register
  changed, 0 if the operation was successful, but the value did not change.
  Returns a negative error code otherwise.
  snd_soc_component_update_bits_async() - Perform asynchronous
   readmodifywrite cycle
  @component: Component to update
  @reg: Register to update
  @mask: Mask that specifies which bits to update
  @val: New value for the bits specified by mask
  This function is similar to snd_soc_component_update_bits(), but the update
  operation is scheduled asynchronously. This means it may not be completed
  when the function returns. To make sure that all scheduled updates have been
  completed snd_soc_component_async_complete() must be called.
  Return: 1 if the operation was successful and the value of the register
  changed, 0 if the operation was successful, but the value did not change.
  Returns a negative error code otherwise.
  snd_soc_component_read_field() - Read register field value
  @component: Component to read from
  @reg: Register to read
  @mask: mask of the register field
  Return: read value of register field.
  snd_soc_component_write_field() - write to register field
  @component: Component to write to
  @reg: Register to write
  @mask: mask of the register field to update
  @val: value of the field to write
  Return: 1 for change, otherwise 0.
  snd_soc_component_async_complete() - Ensure asynchronous IO has completed
  @component: Component for which to wait
  This function blocks until all asynchronous IO which has previously been
  scheduled using snd_soc_component_update_bits_async() has completed.
  snd_soc_component_test_bits - Test register for change
  @component: component
  @reg: Register to test
  @mask: Mask that specifies which bits to test
  @value: Value to test against
  Tests a register with a new value and checks if the new value is
  different from the old value.
  Return: 1 for change, otherwise 0.
 FIXME: use 1st pointer 
 FIXME: use 1st ioctl 
 FIXME. it returns 1st copy now 
 FIXME. it returns 1st page now 
 FIXME. it returns 1st mmap now 
 mark substream if succeeded 
 remove marked substream 
 use last ret 
 mark stream if succeeded 
 remove marked stream 
 FIXME: use 1st pointer 
 SPDX-License-Identifier: GPL-2.0
 soc-link.c
 Copyright (C) 2019 Renesas Electronics Corp.
 Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
 Positive, Zero values are not errors 
 Negative values might be errors 
  We might want to check substream by using list.
  In such case, we can update these macros.
 mark substream if succeeded 
 remove marked substream 
 mark substream if succeeded 
 remove marked substream 
 SPDX-License-Identifier: GPL-2.0+
 soc-jack.c  --  ALSA SoC jack handling
 Copyright 2008 Wolfson Microelectronics PLC.
 Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
  snd_soc_jack_report - Report the current status for a jack
  @jack:   the jack
  @status: a bitmask of enum snd_jack_type values that are currently detected.
  @mask:   a bitmask of enum snd_jack_type values that being reported.
  If configured using snd_soc_jack_add_pins() then the associated
  DAPM pins will be enabled or disabled as appropriate and DAPM
  synchronised.
  Note: This function uses mutexes and should be called from a
  context which can sleep (such as a workqueue).
 we need to sync for this case only 
 Report before the DAPM sync to help users updating micbias status 
  snd_soc_jack_add_zones - Associate voltage zones with jack
  @jack:  ASoC jack
  @count: Number of zones
  @zones:  Array of zones
  After this function has been called the zones specified in the
  array will be associated with the jack.
  snd_soc_jack_get_type - Based on the mic bias value, this function returns
  the type of jack from the zones declared in the jack type
  @jack:  ASoC jack
  @micbias_voltage:  mic bias voltage at adc channel when jack is plugged in
  Based on the mic bias value passed, this function helps identify
  the type of jack from the already declared jack zones
  snd_soc_jack_add_pins - Associate DAPM pins with an ASoC jack
  @jack:  ASoC jack
  @count: Number of pins
  @pins:  Array of pins
  After this function has been called the DAPM pins specified in the
  pins array will have their status updated to reflect the current
  state of the jack whenever the jack status is updated.
	 Update to reflect the last reported status; canned jack
	  implementations are likely to set their state before the
	  card has an opportunity to associate pins.
  snd_soc_jack_notifier_register - Register a notifier for jack status
  @jack:  ASoC jack
  @nb:    Notifier block to register
  Register for notification of the current status of the jack.  Note
  that it is not possible to report additional jack events in the
  callback from the notifier, this is intended to support
  applications such as enabling electrical detection only when a
  mechanical detection event has occurred.
  snd_soc_jack_notifier_unregister - Unregister a notifier for jack status
  @jack:  ASoC jack
  @nb:    Notifier block to unregister
  Stop notifying for status changes.
 gpio detect 
 irq handler for gpio pin 
 gpio work 
		
		  Use workqueue so we do not have to care about running
		  concurrently with work triggered by the interrupt handler.
  snd_soc_jack_add_gpios - Associate GPIO pins with an ASoC jack
  @jack:  ASoC jack
  @count: number of pins
  @gpios: array of gpio pins
  This function will request gpio, set data direction and request irq
  for each gpio in the array.
 Already have a GPIO descriptor. 
 Get a GPIO descriptor 
 legacy GPIO number 
		
		  Register PM notifier so we do not miss state transitions
		  happening while system is asleep.
 Expose GPIO value over sysfs for diagnostic purposes 
 Update initial jack status 
  snd_soc_jack_add_gpiods - Associate GPIO descriptor pins with an ASoC jack
  @gpiod_dev: GPIO consumer device
  @jack:      ASoC jack
  @count:     number of pins
  @gpios:     array of gpio pins
  This function will request gpio, set data direction and request irq
  for each gpio in the array.
  snd_soc_jack_free_gpios - Release GPIO pins' resources of an ASoC jack
  @jack:  ASoC jack
  @count: number of pins
  @gpios: array of gpio pins
  Release gpio and irq resources for gpio pins associated with an ASoC jack.
 CONFIG_GPIOLIB 
 SPDX-License-Identifier: GPL-2.0+
 soc-pcm.c  --  ALSA SoC PCM
 Copyright 2005 Wolfson Microelectronics PLC.
 Copyright 2005 Openedhand Ltd.
 Copyright (C) 2010 Slimlogic Ltd.
 Copyright (C) 2010 Texas Instruments Inc.
 Authors: Liam Girdwood <lrg@ti.com>
          Mark Brown <broonie@opensource.wolfsonmicro.com>
 FE state 
 BEs state 
 Set FE's runtime_update state; the state is protected via PCM stream lock
  for avoiding the race with trigger callback.
  If the state is unset and a trigger is pending while the previous operation,
  process the pending trigger action here.
  snd_soc_runtime_action() - IncrementDecrement active count for
  PCM runtime components
  @rtd: ASoC PCM runtime that is activated
  @stream: Direction of the PCM stream
  @action: Activate stream if 1. Deactivate if -1.
  IncrementsDecrements the active count for all the DAIs and components
  attached to a PCM runtime.
  Should typically be called when a stream is opened.
  Must be called with the rtd->card->pcm_mutex being held
  snd_soc_runtime_ignore_pmdown_time() - Check whether to ignore the power down delay
  @rtd: The ASoC PCM runtime that should be checked.
  This function checks whether the power down delay should be ignored for a
  specific PCM runtime. Returns true if the delay is 0, if it the DAI link has
  been configured to ignore the delay, or if none of the components benefits
  from having the delay.
  snd_soc_set_runtime_hwparams - set the runtime hardware parameters
  @substream: the pcm substream
  @hw: the hardware parameters
  Sets the substream runtime hardware parameters.
 DPCM stream event, send event to FE and all active BEs. 
 reject unmatched parameters when applying symmetry 
 setup hw->rate_minmax via hw->rates first 
 update hw->rate_minmax by snd_soc_pcm_stream 
  snd_soc_runtime_calc_hw() - Calculate hw limits for a PCM stream
  @rtd: ASoC PCM runtime
  @hw: PCM hardware parameters (output)
  @stream: Direction of the PCM stream
  Calculates the subset of stream parameters supported by all DAIs
  associated with the PCM stream.
 first calculate minmax only for CPUs in the DAI link 
		
		  Skip CPUs which don't support the current stream type.
		  Otherwise, since the rate, channel, and format values will
		  zero in that case, we would have no usable settings left,
		  causing the resulting setup to fail.
 second calculate minmax only for CODECs in the DAI link 
		
		  Skip CODECs which don't support the current stream type.
		  Otherwise, since the rate, channel, and format values will
		  zero in that case, we would have no usable settings left,
		  causing the resulting setup to fail.
 Verify both a valid CPU DAI and a valid CODEC DAI were found 
	
	  chan minmax cannot be enforced if there are multiple CODEC DAIs
	  connected to CPU DAI(s), use CPU DAI's directly and let
	  channel allocation be fixed up later
	
	  At least one CPU and one CODEC should match. Otherwise, we should
	  have bailed out on a higher level, since there would be no CPU or
	  CODEC to support the transfer direction in that case.
 use last ret 
  Called by ALSA when a PCM substream is closed. Private data can be
  freed here. The cpu DAI, codec DAI, machine and components are also
  shutdown.
  Called by ALSA when a PCM substream is opened, the runtime->hw record is
  then initialized and any private data can be allocated. This also calls
  startup for the cpu DAI, component, machine and codec DAI.
 startup the audio subsystem 
 Dynamic PCM DAI links compat checks use dynamic capabilities 
 Check that the codec and cpu DAIs are compatible 
 Symmetry only applies if we've already got an active stream. 
	
	  Currently nothing to do for c2c links
	  Since c2c links are internal nodes in the DAPM graph and
	  don't interface with the outside world or application layer
	  we don't have to do any special handling on close.
  Called by ALSA when the PCM substream is prepared, can set format, sample
  rate, etc.  This function is non atomic and can be called multiple times,
  it can refer to the runtime info.
 cancel any delayed stream shutdown that is pending 
 clear the corresponding DAIs parameters when going to be inactive 
 run the stream event 
 free any machine hw params 
 free any component resources 
 now free hw params for the DAIs  
  Frees resources allocated by hw_params, can be called multiple times
  Called by ALSA when the hardware params are set by application. This
  function can also be called multiple times and can allocate buffers
  (using snd_pcm_lib_ ). It's non-atomic.
		
		  Skip CODECs which don't support the current stream type,
		  the idea being that if a CODEC is not used for the currently
		  set up transfer direction, it should not need to be
		  configured, especially since the configuration used might
		  not even be supported by that CODEC. There may be cases
		  however where a CODEC needs to be set up although it is
		  actually not being used for the transfer, e.g. if a
		  capture-only CODEC is acting as an LRCLK andor BCLK master
		  for the DAI link including a playback-only CODEC.
		  If this becomes necessary, we will have to augment the
		  machine driver setup with information on how to act, so
		  we can do the right thing here.
 copy params for each codec 
 fixup params based on TDM slot masks 
		
		  Skip CPUs which don't support the current stream
		  type. See soc_pcm_init_runtime_hw() for more details
 store the parameters for each DAI 
  soc level wrapper for pointer callback
  If cpu_dai, codec_dai, component driver has the delay callback, then
  the runtime->delay will be updated accordingly.
 clearing the previous total delay 
 base delay if assigned in pointer callback 
 connect a FE and BE 
 only add new dpcms 
 reparent a BE onto another FE 
 reparent if BE is connected to other FEs 
 disconnect a BE and FE 
 BEs still alive need new FE 
 get BE for DAI widget and stream 
 Widget provided is not a BE 
 adjust dir to stream 
 get number of valid DAI paths and their widgets 
 is there a valid DAI widget for this BE 
		
		  The BE is pruned only if none of the dai
		  widgets are in the active list.
 Destroy any old FE <--> BE connections 
 Create any new FE <--> BE connections 
 is there a valid BE rtd for this widget 
 don't connect if FE is not running 
		
		  Filter for systems with 'component_chaining' enabled.
		  This helps to avoid unnecessary re-configuration of an
		  already active BE on such systems.
 newly connected FE and BE 
 already connected 
 new 
  Find the corresponding BE DAIs that source or sink audio to this
  FE substream.
 disable any enabled and non active backends 
 is this op for this BE ? 
 only startup BE DAIs that are either sinks or sources to this FE DAI 
 is this op for this BE ? 
 first time the dpcm is open ? 
		
		  Skip CPUs which don't support the current stream
		  type. See soc_pcm_init_runtime_hw() for more details
	
	  It returns merged BE codec format
	  if FE want to use it (= dpcm_merged_format)
			
			  Skip CODECs which don't support the current stream
			  type. See soc_pcm_init_runtime_hw() for more details
	
	  It returns merged BE codec channel;
	  if FE want to use it (= dpcm_merged_chan)
			
			  Skip CPUs which don't support the current stream
			  type. See soc_pcm_init_runtime_hw() for more details
		
		  chan minmax cannot be enforced if there are multiple CODEC
		  DAIs connected to a single CPU DAI, use CPU DAI's directly
	
	  It returns merged BE codec channel;
	  if FE want to use it (= dpcm_merged_chan)
			
			  Skip DAIs which don't support the current stream
			  type. See soc_pcm_init_runtime_hw() for more details
 apply symmetry for FE 
 Symmetry only applies if we've got an active stream. 
 apply symmetry for BE 
 A backend may not have the requested substream 
 Symmetry only applies if we've got an active stream. 
 start the DAI frontend 
 shutdown the BEs 
 now shutdown the frontend 
 run the stream stop event 
	 only hw_params backends that are either sinks or sources
 is this op for this BE ? 
 only free hw when no longer used - check all FEs 
 do not free hw if this BE is used by other FE 
 call hw_free on the frontend 
	 only hw_params backends that are either sinks or sources
 is this op for this BE ? 
 copy params for each dpcm 
 perform any hw_params fixups 
 copy the fixed-up hw params for BE dai 
 only allow hw_params() if no connected FEs are running 
 disable any enabled and non active backends 
 only allow hw_free() if no connected FEs are running 
 call hw_params on the frontend 
 is this op for this BE ? 
 call trigger on the frontend before the backend. 
 call trigger on the frontend after the backend. 
 bespoke trigger() - handles both FE and BEs 
	 if FE's runtime_update is already set, we're in race;
	  process this trigger later at exit
 delayed, assuming it's successful 
 we're alone, let's trigger 
 is this op for this BE ? 
 there is no point preparing this FE if there are no BEs 
 call prepare on the frontend 
 call bespoke trigger - FE takes care of all BE triggers 
 run the stream event for each BE 
 Only start the BE if the FE is ready 
 startup must always be called for new BEs 
 keep going if FE state is > open 
 keep going if FE state is > hw_params 
 run the stream event for each BE 
 keep going if FE state is > prepare 
 call trigger on the frontend - FE takes care of all BE triggers 
 disconnect any pending BEs 
 is this op for this BE ? 
 only check active links 
 DAPM sync will call this to update DSP paths 
 skip if FE doesn't have playbackcapture capability 
 skip if FE isn't currently playingcapturing 
 update any playbackcapture paths 
 Called by DAPM mixermux changes to update audio routing between PCMs and
  any DAI links.
 shutdown all old paths first 
 bring new paths up 
 mark FE's links ready to prune 
 calculate valid and active FE <-> BE dpcms 
 Adapt stream for codec2codec links 
 create the PCM 
 create a new pcm 
 DAPM dai link stream work 
 ASoC PCM operations 
 is the current PCM operation for this FE ? 
 is the current PCM operation for this BE ? 
 get the substream for this BE 
 it's safe to do this BE DAI 
  We can only hw_free, stop, pause or suspend a BE DAI if any of it's FE
  are not running, paused or suspended for the specified stream direction.
  We can only change hw params a BE DAI if any of it's FE are not prepared,
  running, paused or suspended for the specified stream direction.
 SPDX-License-Identifier: GPL-2.0+
 soc-compress.c  --  ALSA SoC Compress
 Copyright (C) 2012 Intel Corp.
 Authors: Namarta Kohli <namartax.kohli@intel.com>
          Ramesh Babu K V <ramesh.babu@linux.intel.com>
          Vinod Koul <vinod.koul@linux.intel.com>
 SND_COMPRESS_xxx is same as SNDRV_PCM_STREAM_xxx 
 SND_COMPRESS_xxx is same as SNDRV_PCM_STREAM_xxx 
 SND_COMPRESS_xxx is same as SNDRV_PCM_STREAM_xxx 
 calculate valid and active FE <-> BE dpcms 
 clean up all links 
 SND_COMPRESS_xxx is same as SNDRV_PCM_STREAM_xxx 
 mark FE's links ready to prune 
 SND_COMPRESS_xxx is same as SNDRV_PCM_STREAM_xxx 
 SND_COMPRESS_xxx is same as SNDRV_PCM_STREAM_xxx 
 SND_COMPRESS_xxx is same as SNDRV_PCM_STREAM_xxx 
	
	  First we call set_params for the CPU DAI, then the component
	  driver this should configure the SoC side. If the machine has
	  compressed ops then we call that as well. The expectation is
	  that these callbacks will configure everything for this compress
	  path, like configuring a PCM port for a CODEC.
 cancel any delayed stream shutdown that is pending 
 SND_COMPRESS_xxx is same as SNDRV_PCM_STREAM_xxx 
	
	  Create an empty hw_params for the BE as the machine driver must
	  fix this up to match DSP decoder and ASRC configuration.
	  I.e. machine driver fixup for compressed BE is mandatory.
 ASoC Compress operations 
 ASoC Dynamic Compress operations 
  snd_soc_new_compress - create a new compress.
  @rtd: The runtime for which we will create compress
  @num: the device index number (zero based - shared with normal PCMs)
  Return: 0 for success, else error.
	
	  make sure these are same value,
	  and then use these as equally
 check client and interface hw capabilities 
	
	  Compress devices are unidirectional so only one of the directions
	  should be set, check for that (xor)
 DAPM dai link stream work 
 SPDX-License-Identifier: GPL-2.0+
 soc-ac97.c  --  ALSA SoC Audio Layer AC97 support
 Copyright 2005 Wolfson Microelectronics PLC.
 Copyright 2005 Openedhand Ltd.
 Copyright (C) 2010 Slimlogic Ltd.
 Copyright (C) 2010 Texas Instruments Inc.
 Author: Liam Girdwood <lrg@slimlogic.co.uk>
         with code, comments and ideas from :-
         Richard Purdie <richard@openedhand.com>
 Gets initialized in snd_soc_set_ac97_ops() 
  snd_soc_alloc_ac97_component() - Allocate new a AC'97 device
  @component: The COMPONENT for which to create the AC'97 device
  Allocated a new snd_ac97 device and intializes it, but does not yet register
  it. The caller is responsible to either call device_add(&ac97->dev) to
  register the device, or to call put_device(&ac97->dev) to free the device.
  Returns: A snd_ac97 device or a PTR_ERR in case of an error.
  snd_soc_new_ac97_component - initailise AC97 device
  @component: audio component
  @id: The expected device ID
  @id_mask: Mask that is applied to the device ID before comparing with @id
  Initialises AC97 component resources for use by ad-hoc devices only.
  If @id is not 0 this function will reset the device, then read the ID from
  the device and check if it matches the expected ID. If it doesn't match an
  error will be returned and device will not be registered.
  Returns: A PTR_ERR() on failure or a valid snd_ac97 struct on success.
  snd_soc_free_ac97_component - free AC97 component device
  @ac97: snd_ac97 device to be freed
  Frees AC97 component device resources.
  snd_soc_set_ac97_ops_of_reset - Set ac97 ops with generic ac97 reset functions
  @ops: bus ops
  @pdev: platform device
  This function sets the reset and warm_reset properties of ops and parses
  the device node of pdev to get pinctrl states and gpio numbers to use.
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2010-2011,2013-2015 The Linux Foundation. All rights reserved.
  lpass-platform.c -- ALSA SoC platform driver for QTi LPASS
 Handle per channel interrupts 
 Handle per channel interrupts 
 ensure audio hardware is disabled 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2010-2011,2013-2015 The Linux Foundation. All rights reserved.
  lpass-cpu.c -- ALSA SoC CPU DAI driver for QTi LPASS
  Channel maps for Quad channel playbacks on MI2S Secondary
	
	  Ensure LRCLK is disabled even in device node validation.
	  Will not impact if disabled in lpass_cpu_daiops_trigger()
	  suspend.
	
	  BCLK may not be enabled if lpass_cpu_daiops_prepare is called before
	  lpass_cpu_daiops_shutdown. It's paired with the clk_enable in
	  lpass_cpu_daiops_prepare.
		
		  Ensure lpass BCLKLRCLK is enabled during
		  device resume as lpass_cpu_daiops_prepare() is not called
		  after the device resumes. We don't check mi2s_was_prepared before
		  enabledisable BCLK in trigger events because:
		   1. These trigger events are paired, so the BCLK
		      enable_count is balanced.
		   2. the BCLK can be shared (ex: headset and headset mic),
		      we need to increase the enable_count so that we don't
		      turn off the shared BCLK while other devices are using
		      it.
		
		  To ensure lpass BCLKLRCLK is disabled during
		  device suspend.
	
	  Ensure lpass BCLKLRCLK is enabled bit before playbackcapture
	  data flow starts. This allows other codec to have some delay before
	  the data flow.
	  (ex: to drop start up pop noise before capture starts).
	
	  Check mi2s_was_prepared before enabling BCLK as lpass_cpu_daiops_prepare can
	  be called multiple times. It's paired with the clk_disable in
	  lpass_cpu_daiops_shutdown.
 ensure audio hardware is disabled 
 Allow all channels by default for backwards compatibility 
 Allocation for i2sctl regmap fields 
 Initialize bitfields for dai I2SCTL register 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2015 The Linux Foundation. All rights reserved.
 Configure the Quat MI2S to TLMM 
 Clear TLMM_WS_OUT_SEL and TLMM_WS_EN_SEL fields 
 Configure the Sec MI2S to TLMM 
 Set default mclk for internal codec 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2020 The Linux Foundation. All rights reserved.
  lpass-hdmi.c -- ALSA SoC HDMI-CPU DAI driver for QTi LPASS HDMI
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2020, The Linux Foundation. All rights reserved.
  lpass-sc7180.c -- ALSA SoC platform-machine driver for QTi LPASS
 SPDX-License-Identifier: GPL-2.0
  Copyright (c) 2018, The Linux Foundation. All rights reserved.
 Ignore unsupported 
		
		  Use ASRC for internal clocks, as PLL rate isn't multiple
		  of BCLK.
	
	  Codec SLIMBUS configuration
	  RX1, RX2, RX3, RX4, RX5, RX6, RX7, RX8, RX9, RX10, RX11, RX12, RX13
	  TX1, TX2, TX3, TX4, TX5, TX6, TX7, TX8, TX9, TX10, TX11, TX12, TX13
	  TX14, TX15, TX16
	
	  NOTE: there is a strict hw requirement about the ordering of port
	  enables and actual WSA881x PA enable. PA enable should only happen
	  after soundwire ports are enabled if not DC on the line is
	  accumulated resulting in ClickPop Noise
	  PA enablemute are handled as part of codec DAPM and digital mute.
 Allocate the private data 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2010-2011,2013-2015 The Linux Foundation. All rights reserved.
  storm.c -- ALSA SoC machine driver for QTi ipq806x-based Storm board
	
	  as the CPU DAI is the I2S bus master and no system clock is needed by
	  the MAX98357a DAC, simply set the system clock to be a constant
	  multiple of the bit clock for the clock divider
 SPDX-License-Identifier: GPL-2.0
 Copyright (c) 2018, Linaro Limited
	
	  Codec SLIMBUS configuration
	  RX1, RX2, RX3, RX4, RX5, RX6, RX7, RX8, RX9, RX10, RX11, RX12, RX13
	  TX1, TX2, TX3, TX4, TX5, TX6, TX7, TX8, TX9, TX10, TX11, TX12, TX13
	  TX14, TX15, TX16
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2010-2011,2013-2015 The Linux Foundation. All rights reserved.
  lpass-apq8016.c -- ALSA SoC CPU DAI driver for APQ8016 LPASS
 SPDX-License-Identifier: GPL-2.0
 Copyright (c) 2018, Linaro Limited.
 Copyright (c) 2018, The Linux Foundation. All rights reserved.
 Deprecated, only for compatibility with old device trees 
 DAPM routes 
 Deprecated, only for compatibility with old device trees 
 Populate links 
 Allocate the DAI link array 
 DPCM backend 
 DPCM frontend 
 DPCM 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2010-2011,2013-2015 The Linux Foundation. All rights reserved.
  lpass-ipq806x.c -- ALSA SoC CPU DAI driver for QTi LPASS
  Splited out the IPQ8064 soc specific from lpass-cpu.c
 Capture currently not implemented 
 SPDX-License-Identifier: GPL-2.0
 Copyright (c) 2020, Linaro Limited
	
	  NOTE: there is a strict hw requirement about the ordering of port
	  enables and actual WSA881x PA enable. PA enable should only happen
	  after soundwire ports are enabled if not DC on the line is
	  accumulated resulting in ClickPop Noise
	  PA enablemute are handled as part of codec DAPM and digital mute.
 Allocate the private data 
 SPDX-License-Identifier: GPL-2.0-only
 Copyright (c) 2020, The Linux Foundation. All rights reserved.
 sc7180.c -- ALSA SoC Machine driver for SC7180
 Configure PLL1 for codec 
 Configure sysclk for codec 
 Allocate the private data 
 SPDX-License-Identifier: GPL-2.0
 Copyright (c) 2011-2017, The Linux Foundation. All rights reserved.
 Copyright (c) 2018, Linaro Limited
 SPDX-License-Identifier: GPL-2.0
 Copyright (c) 2021, Linaro Limited
 SPDX-License-Identifier: GPL-2.0
 Copyright (c) 2020, Linaro Limited
 SPDX-License-Identifier: GPL-2.0
 Copyright (c) 2011-2017, The Linux Foundation. All rights reserved.
 Copyright (c) 2018, Linaro Limited
 Default values used if user space does not set 
 IRQ position 
 Encoding source bit mask 
 Conventional and unconventional sample rate supported 
 rate and channels are sent to audio driver 
 clear the previous setup if any  
 Queue the buffers 
 DSP expects stream id from 1 
 Ensure that buffer size is a multiple of period size 
				
				  Close old stream and make it stale, switch
				  the active stream now!
				
				  vaild stream ids start from 1, So we are
				  toggling this between 1 and 2.
 DSP expects stream id from 1 
 Mono Center 
 Stereo FLFR 
 check the codec profile 
	
	  Make sure that next track data pointer is aligned at 32 bit boundary
	  This is a Mandatory requirement from DSP data buffers alignment
 Kick off the data to dsp if its starving!! 
 SPDX-License-Identifier: GPL-2.0
 Copyright (c) 2011-2017, The Linux Foundation. All rights reserved.
 Copyright (c) 2018, Linaro Limited
  q6routing_stream_open() - Register a new stream for route setup
  @fedai_id: Frontend dai id.
  @perf_mode: Performance mode.
  @stream_id: ASM stream id to map.
  @stream_type: Direction of stream
  Return: Will be an negative on error or a zero on success.
 only RX needs to use payload 
  q6routing_stream_close() - Deregister a stream
  @fedai_id: Frontend dai id.
  @stream_type: Direction of stream
  Return: Will be an negative on error or a zero on success.
 Mixer definitions 
 default value 
 dummy 
 SPDX-License-Identifier: GPL-2.0
 Copyright (c) 2020, Linaro Limited
 Sub Graph ID 
 Find if there is already a matching sub-graph 
 add to container list 
 alloc module id dynamically 
 add to module list 
 Already parsed data for this sub-graph 
 Sub graph is associated with predefined graph 
 Sub graph is associated with predefined graph 
 Error or Already parsed container data 
 common module info 
 ignore other tokens 
 apply gain after power up of widget 
 virtual widget 
 Graph Info has N sub-graphs, sub-graph has N containers, Container has N Modules 
 if no modules in the container then remove it 
 check if there are no more containers in the sub graph and remove it 
 Check if there are no more sub-graphs left then remove graph info 
 TBD 
 DAI link - used for any driver specific init 
 Ignore other tokens 
 Inline with Qualcomm UCM configs and linux-firmware path 
 SPDX-License-Identifier: GPL-2.0
 Copyright (c) 2021, Linaro Limited
 SPDX-License-Identifier: GPL-2.0
 Copyright (c) 2011-2017, The Linux Foundation. All rights reserved.
 Copyright (c) 2018, Linaro Limited
 AFE CMDs 
 I2S config specific 
 Port IDs 
 Clock set API version 
 SLIMbus Rx port on channel 0. 
 SLIMbus Tx port on channel 0. 
 SLIMbus Rx port on channel 1. 
 SLIMbus Tx port on channel 1. 
 SLIMbus Rx port on channel 2. 
 SLIMbus Tx port on channel 2. 
 SLIMbus Rx port on channel 3. 
 SLIMbus Tx port on channel 3. 
 SLIMbus Rx port on channel 4. 
 SLIMbus Tx port on channel 4. 
 SLIMbus Rx port on channel 5. 
 SLIMbus Tx port on channel 5. 
 SLIMbus Rx port on channel 6. 
 SLIMbus Tx port on channel 6. 
 Start of the range of port IDs for TDM devices. 
 End of the range of port IDs for TDM devices. 
 Size of the range of port IDs for TDM ports. 
 AFE WSA Codec DMA Rx port 0 
 AFE WSA Codec DMA Tx port 0 
 AFE WSA Codec DMA Rx port 1 
 AFE WSA Codec DMA Tx port 1 
 AFE WSA Codec DMA Tx port 2 
 AFE VA Codec DMA Tx port 0 
 AFE VA Codec DMA Tx port 1 
 AFE VA Codec DMA Tx port 2 
 AFE Rx Codec DMA Rx port 0 
 AFE Tx Codec DMA Tx port 0 
 AFE Rx Codec DMA Rx port 1 
 AFE Tx Codec DMA Tx port 1 
 AFE Rx Codec DMA Rx port 2 
 AFE Tx Codec DMA Tx port 2 
 AFE Rx Codec DMA Rx port 3 
 AFE Tx Codec DMA Tx port 3 
 AFE Rx Codec DMA Rx port 4 
 AFE Tx Codec DMA Tx port 4 
 AFE Rx Codec DMA Rx port 5 
 AFE Tx Codec DMA Tx port 5 
 AFE Rx Codec DMA Rx port 6 
 AFE Rx Codec DMA Rx port 7 
 Reserved for 32-bit alignment. This field must be set to 0.
 Minor version used for tracking the version of the SLIMBUS
  configuration interface.
  Supported values: #AFE_API_VERSION_SLIMBUS_CONFIG
 SLIMbus hardware device ID, which is required to handle
  multiple SLIMbus hardware blocks.
  Supported values: - #AFE_SLIMBUS_DEVICE_1 - #AFE_SLIMBUS_DEVICE_2
 Bit width of the sample.
  Supported values: 16, 24
 Data format supported by the SLIMbus hardware. The default is
  0 (#AFE_SB_DATA_FORMAT_NOT_INDICATED), which indicates the
  hardware does not perform any format conversions before the data
  transfer.
 Number of channels.
  Supported values: 1 to #AFE_PORT_MAX_AUDIO_CHAN_CNT
 Mapping of shared channel IDs (128 to 255) to which the
  master port is to be connected.
  Shared_channel_mapping[i] represents the shared channel assigned
  for audio channel i in multichannel audio data.
 Sampling rate of the port.
  Supported values:
  - #AFE_PORT_SAMPLE_RATE_8K
  - #AFE_PORT_SAMPLE_RATE_16K
  - #AFE_PORT_SAMPLE_RATE_48K
  - #AFE_PORT_SAMPLE_RATE_96K
  - #AFE_PORT_SAMPLE_RATE_192K
  Mapping between Virtual Port IDs to DSP AFE Port ID
  On B Family SoCs DSP Port IDs are consistent across multiple SoCs
  on A Family SoCs DSP port IDs are same as virtual Port IDs.
  q6afe_get_port_id() - Get port id from a given port index
  @index: port index
  Return: Will be an negative on error or valid port_id on success
  q6afe_port_stop() - Stop a afe port
  @port: Instance of port to stop
  Return: Will be an negative on packet size on success.
  q6afe_slim_port_prepare() - Prepare slim afe port.
  @port: Instance of afe port
  @cfg: SLIM configuration for the afe port
  q6afe_tdm_port_prepare() - Prepare tdm afe port.
  @port: Instance of afe port
  @cfg: TDM configuration for the afe port
  q6afe_hdmi_port_prepare() - Prepare hdmi afe port.
  @port: Instance of afe port
  @cfg: HDMI configuration for the afe port
  q6afe_i2s_port_prepare() - Prepare i2s afe port.
  @port: Instance of afe port
  @cfg: I2S configuration for the afe port
  Return: Will be an negative on error and zero on success.
 CPU is slave 
  q6afe_cdc_dma_port_prepare() - Prepare dma afe port.
  @port: Instance of afe port
  @cfg: DMA configuration for the afe port
  q6afe_port_start() - Start a afe port
  @port: Instance of port to start
  Return: Will be an negative on packet size on success.
  q6afe_port_get_from_id() - Get port instance from a port id
  @dev: Pointer to afe child device.
  @id: port id
  Return: Will be an error pointer on error or a valid afe port
  on success.
 if port is multiple times bindunbind before callback finishes 
  q6afe_port_put() - Release port reference
  @port: Instance of port to put
 SPDX-License-Identifier: GPL-2.0
 Copyright (c) 2020, Linaro Limited
 SubGraph Config 
 container config 
 Capability ID list 
 Container graph Position 
 Container Stack size 
 Container proc domain id 
 Module List config 
 Modules list cfg 
 Module list config array 
 Module Properties 
 Module Connections 
 num of channels as argument 
 Container Config 
 Capability list 
 Graph Position 
 Stack size 
 Proc domain 
 Perf Mode 
 Direction 
 Scenario ID 
 get the first module from both connected or un-connected containers 
 SubGraph 
 Container 
 Module List
 Module Properties 
 Module Connections 
 DSP successfully finished the command 
 LPASS Codec DMA port Module Media Format Setup 
 CPU is slave 
 DSP expects size should be aligned to 4K 
 SPDX-License-Identifier: GPL-2.0
 Copyright (c) 2011-2017, The Linux Foundation. All rights reserved.
 Copyright (c) 2018, Linaro Limited
 for ADSP2.8 and above 
 assume that the adsp is up if we not support this command 
  q6core_get_svc_api_info() - Get version number of a service.
  @svc_id: service id of the service.
  @ainfo: Valid struct pointer to fill svc api information.
  Return: zero on success and error code on failure or unsupported
  q6core_is_adsp_ready() - Get status of adsp
  Return: Will be an true if adsp is ready and false if not.
 SPDX-License-Identifier: GPL-2.0
 Copyright (c) 2011-2017, The Linux Foundation. All rights reserved.
 Copyright (c) 2018, Linaro Limited
 Bit shift for the stream_perf_mode subfield. 
 tunnel read write mode 
 tunnel read write mode 
 size of buffer 
 idx:1 out port, 0: in port 
  q6asm_unmap_memory_regions() - unmap memory regions in the dsp.
  @dir: direction of audio stream
  @ac: audio client instanace
  Return: Will be an negative value on failure or zero on success
 DSP expects size should be aligned to 4K 
  q6asm_map_memory_regions() - map memory regions in the dsp.
  @dir: direction of audio stream
  @ac: audio client instanace
  @phys: physical address that needs mapping.
  @period_sz: audio period size
  @periods: number of periods
  Return: Will be an negative value on failure or zero on success
  q6asm_audio_client_free() - Freee allocated audio client
  @ac: audio client to free
 check for valid session 
 Audio client might already be freed by now 
  q6asm_get_session_id() - get session id for audio client
  @c: audio client pointer
  Return: Will be an session id of the audio client.
  q6asm_audio_client_alloc() - Allocate a new audio client
  @dev: Pointer to asm child device.
  @cb: event callback.
  @priv: private data associated with this client.
  @session_id: session id
  @perf_mode: performace mode for this client
  Return: Will be an error pointer on error or a valid audio client
  on success.
  q6asm_open_write() - Open audio client for writing
  @ac: audio client pointer
  @stream_id: stream id of q6asm session
  @format: audio sample format
  @codec_profile: compressed format profile
  @bits_per_sample: bits per sample
  @is_gapless: flag to indicate if this is a gapless stream
  Return: Will be an negative value on error or zero on success
 source endpoint : matrix 
  q6asm_run() - start the audio client
  @ac: audio client pointer
  @stream_id: stream id of q6asm session
  @flags: flags associated with write
  @msw_ts: timestamp msw
  @lsw_ts: timestamp lsw
  Return: Will be an negative value on error or zero on success
  q6asm_run_nowait() - start the audio client withou blocking
  @ac: audio client pointer
  @stream_id: stream id
  @flags: flags associated with write
  @msw_ts: timestamp msw
  @lsw_ts: timestamp lsw
  Return: Will be an negative value on error or zero on success
  q6asm_media_format_block_multi_ch_pcm() - setup pcm configuration
  @ac: audio client pointer
  @stream_id: stream id
  @rate: audio sample rate
  @channels: number of audio channels.
  @channel_map: channel map pointer
  @bits_per_sample: bits per sample
  Return: Will be an negative value on error or zero on success
  q6asm_enc_cfg_blk_pcm_format_support() - setup pcm configuration for capture
  @ac: audio client pointer
  @stream_id: stream id
  @rate: audio sample rate
  @channels: number of audio channels.
  @bits_per_sample: bits per sample
  Return: Will be an negative value on error or zero on success
  q6asm_read() - read data of period size from audio client
  @ac: audio client pointer
  @stream_id: stream id
  Return: Will be an negative value on error or zero on success
 Stream prio : High, provide meta info with encoded frames 
  q6asm_open_read() - Open audio client for reading
  @ac: audio client pointer
  @stream_id: stream id
  @format: audio sample format
  @bits_per_sample: bits per sample
  Return: Will be an negative value on error or zero on success
  q6asm_write_async() - non blocking write
  @ac: audio client pointer
  @stream_id: stream id
  @len: length in bytes
  @msw_ts: timestamp msw
  @lsw_ts: timestamp lsw
  @wflags: flags associated with write
  Return: Will be an negative value on error or zero on success
  q6asm_cmd() - run cmd on audio client
  @ac: audio client pointer
  @stream_id: stream id
  @cmd: command to run on audio client.
  Return: Will be an negative value on error or zero on success
  q6asm_cmd_nowait() - non blocking, run cmd on audio client
  @ac: audio client pointer
  @stream_id: stream id
  @cmd: command to run on audio client.
  Return: Will be an negative value on error or zero on success
 SPDX-License-Identifier: GPL-2.0
 Copyright (c) 2011-2017, The Linux Foundation. All rights reserved.
 Copyright (c) 2018, Linaro Limited
 Definition for a legacy device session. 
 Wait for the callback with copp id 
  q6adm_open() - open adm and grab a free copp
  @dev: Pointer to adm child device.
  @port_id: port id
  @path: playback or capture path.
  @rate: rate at which copp is required.
  @channel_mode: channel mode
  @topology: adm topology id
  @perf_mode: performace mode.
  @bit_width: audio sample bit width
  @app_type: Application type.
  @acdb_id: ACDB id
  Return: Will be an negative on error or a valid copp pointer on success.
  q6adm_get_copp_id() - get copp index
  @copp: Pointer to valid copp
  Return: Will be an negative on error or a valid copp index on success.
  q6adm_matrix_map() - Map asm streams and afe ports using payload
  @dev: Pointer to adm child device.
  @path: playback or capture path.
  @payload_map: map between session id and afe ports.
  @perf_mode: Performace mode.
  Return: Will be an negative on error or a zero on success.
 Assumes port_ids have already been validated during adm_open 
  q6adm_close() - Close adm copp
  @dev: Pointer to adm child device.
  @copp: pointer to previously opened copp
  Return: Will be an negative on error or a zero on success.
 SPDX-License-Identifier: GPL-2.0
 Copyright (c) 2020, Linaro Limited
 SPDX-License-Identifier: GPL-2.0
 Copyright (c) 2020, Linaro Limited
 Graph Management 
 set src module in dst subgraph first module 
 remove topology 
 First word of result it state 
 SPDX-License-Identifier: GPL-2.0
 Copyright (c) 2020, Linaro Limited
 SPDX-License-Identifier: GPL-2.0
 Copyright (c) 2021, Linaro Limited
 rx 
	
	  It is recommend to load DSP with source graph first and then sink
	  graph, so sequence for playback and capture will be different
 SPDX-License-Identifier: GPL-2.0
 Copyright (c) 2021, Linaro Limited
 Buffer position 
 Encoding source bit mask 
 rate and channels are sent to audio driver 
 Queue the buffers for Capture ONLY after graph is started 
 Now that graph as been prepared and started update the internal state accordingly 
 start writing buffers for playback only as we already queued capture buffers 
 TODO support be handled via SoftPause Module 
 Ensure that buffer size is a multiple of period size 
 SPDX-License-Identifier: GPL-2.0
 Copyright (c) 2011-2017, The Linux Foundation. All rights reserved.
 Copyright (c) 2018, Linaro Limited
 HDMI spec CEA-861-E: Table 28 Audio InfoFrame Data Byte 4 
 HW only supports 16 and 32 bit slot width configuration 
 HW supports 1-32 slots configuration. Typical: 1, 2, 4, 8, 16, 32 
 TDM RX dais ids are even and tx are odd 
 rx 
 rx 
 stop the port and restart with new port config 
 TX 
 MI2S specific properties 
 SPDX-License-Identifier: GPL-2.0
 test-component.c  --  Test Audio Component driver
 Copyright (C) 2020 Renesas Electronics Corporation
 Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
	
	  Select below from Sound Card, not auto
	 	SND_SOC_POSSIBLE_DAIFMT_CBP_CFP
	 	SND_SOC_POSSIBLE_DAIFMT_CBC_CFP
	 	SND_SOC_POSSIBLE_DAIFMT_CBP_CFC
	 	SND_SOC_POSSIBLE_DAIFMT_CBC_CFC
 Random values to keep userspace happy when checking constraints 
 BE's dont need dummy params 
 set substream later 
 mile_stone(component); 
 CPU 
 Codec 
	
	  FIXME
	 
	  Just INOUT is OK for now,
	  but need to be updated ?
 SPDX-License-Identifier: GPL-2.0
 simple-card-utils.c
 Copyright (c) 2016 Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
 sampling rate convert 
 channels transfer 
		
		  No dai-link level and master setting was not found from
		  sound node level, revert back to legacy DT parsing and
		  take the settings from codec node.
 Parse the card name from DT 
	
	  Parse dai->sysclk come from "clocks = <&xxx>"
	  (if system has common clock)
	   or "system-clock-frequency = <xxx>"
	   or device's module clock.
 Only Codecs 
 Assumes the capabilities are the same for all supported streams 
 Assumes platform == cpu 
	
	  In soc_bind_dai_link() will check cpu name after
	  of_node matching if dai_link has cpu_dai_name.
	  but, it will never match if name was created by
	  fmt_single_name() remove cpu_dai_name if cpu_args
	  was 0. See:
	 	fmt_single_name()
	 	fmt_multiple_name()
 no widgets is not error 
	
	  dais (= CPU+Codec)
	  dlcs (= CPU+Codec+Platform)
 dummy CPUCodec 
 Normal CPU 
 Codec2Codec 
 DPCM Be's CPU = dummy 
 Normal Codec 
 DPCM Be's Codec 
 DPCM Fe's Codec = dummy 
 Have Platform 
 Doesn't have Platform 
 np is "endpoint" or "port" 
 Module information 
 SPDX-License-Identifier: GPL-2.0
 audio-graph-card2-custom-sample.c
 Copyright (C) 2020 Renesas Electronics Corp.
 Copyright (C) 2020 Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
  Custom driver can have own priv
  which includes asoc_simple_priv.
 custom driver's own params 
 You can get custom_priv from simple_priv 
 you can use generic probe function 
 You can custom before parsing 
 You can custom after parsing 
 overwrite .probe sample 
	
	  You can custom Normal parsing
	  beforeaffter audio_graph2_link_normal()
	
	  You can custom DPCM parsing
	  beforeaffter audio_graph2_link_dpcm()
	
	  You can custom Codec2Codec parsing
	  beforeaffter audio_graph2_link_c2c()
  audio-graph-card2 has many hooks for your customizing.
 You can use custom ops 
 customize dai_link ops 
 use audio-graph-card2 parsing with own custom hooks 
 customize more if needed 
 SPDX-License-Identifier: GPL-2.0
 ASoC audio graph sound card support
 Copyright (C) 2016 Renesas Solutions Corp.
 Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
 based on ${LINUX}soundsocgenericsimple-card.c
 use driver specified DAI ID if exist 
 use endpointport reg if exist 
		
		  Because it will count portendpoint if it doesn't have "reg".
		  But, we can't judge whether it has "no reg", or "reg = <0>"
		  only of_graph_parse_endpoint().
		  We need to check "reg" property
	
	  Non HDMI sound case, counting portendpoint on its DT
	  is enough. Let's count it.
 Get dai->name 
	
	  FIXME
	 
	  Here, dlc->dai_name is pointer to CPUCodec DAI name.
	  If user unbinded CPU or Codec driver, but not for Sound Card,
	  dlc->dai_name is keeping unbinded CPU or Codec
	  driver's pointer.
	 
	  If user re-bind CPU or Codec driver again, ALSA SoC will try
	  to rebind Card via snd_soc_try_rebind_card(), but because of
	  above reason, it might can't bind Sound Card.
	  Because Sound Card is pointing to released dai_name pointer.
	 
	  To avoid this rebind Card issue,
	  1) It needs to alloc memory to keep dai_name eventhough
	     CPU or Codec driver was unbinded, or
	  2) user need to rebind Sound Card everytime
	     if he unbinded CPU or Codec.
 Codec is dummy 
 FE settings 
		
		  In BE<->BE connections it is not required to create
		  PCM devices at CPU end of the dai link and thus 'no_pcm'
		  flag needs to be set. It is useful when there are many
		  BE components and some of these have to be connected to
		  form a valid audio path.
		 
		  For example: FE <-> BE1 <-> BE2 <-> ... <-> BEn where
		  there are 'n' BE components in the path.
 CPU is dummy 
 BE settings 
 check "prefix" from top node 
	
	  It is DPCM
	  if Codec port has many endpoints,
	  or has convert-xxx property
 loop for all listed CPU port 
 loop for all CPU endpoint 
 get codec 
 get convert-xxx property 
 check if link requires DPCM parsing 
				
				  Codec endpoint can be NULL for pluggable audio HW.
				  Platform DT can populate the Codec endpoint depending on the
				  plugged HW.
 Do it all CPU endpoint, and 1st Codec endpoint 
 else normal sound 
	
	  Detect all CPU first, and Detect all Codec 2nd.
	 
	  In Normal sound case, all DAIs are detected
	  as "CPU-Codec".
	 
	  In DPCM sound case,
	  all CPUs   are detected as "CPU-dummy", and
	  all Codecs are detected as "dummy-Codec".
	  To avoid random sub-device numbering,
	  detect "dummy-Codec" in last;
 1xCPU-Codec 
 1xCPU-dummy 
 1xdummy-Codec 
	
	  link_num :	number of links.
	 		CPU-Codec  CPU-dummy  dummy-Codec
	  dais_num :	number of DAIs
	  ccnf_num :	number of codec_conf
	 		same number for "dummy-Codec"
	 
	  ex1)
	  CPU0 --- Codec0	link : 5
	  CPU1 --- Codec1	dais : 7
	  CPU2 -		ccnf : 1
	  CPU3 --- Codec2
	 
	 	=> 5 links = 2xCPU-Codec + 2xCPU-dummy + 1xdummy-Codec
	 	=> 7 DAIs  = 4xCPU + 3xCodec
	 	=> 1 ccnf  = 1xdummy-Codec
	 
	  ex2)
	  CPU0 --- Codec0	link : 5
	  CPU1 --- Codec1	dais : 6
	  CPU2 -		ccnf : 1
	  CPU3 -
	 
	 	=> 5 links = 1xCPU-Codec + 3xCPU-dummy + 1xdummy-Codec
	 	=> 6 DAIs  = 4xCPU + 2xCodec
	 	=> 1 ccnf  = 1xdummy-Codec
	 
	  ex3)
	  CPU0 --- Codec0	link : 6
	  CPU1 -		dais : 6
	  CPU2 --- Codec1	ccnf : 2
	  CPU3 -
	 
	 	=> 6 links = 0xCPU-Codec + 4xCPU-dummy + 2xdummy-Codec
	 	=> 6 DAIs  = 4xCPU + 2xCodec
	 	=> 2 ccnf  = 2xdummy-Codec
	 
	  ex4)
	  CPU0 --- Codec0 (convert-rate)	link : 3
	  CPU1 --- Codec1			dais : 4
	 					ccnf : 1
	 
	 	=> 3 links = 1xCPU-Codec + 1xCPU-dummy + 1xdummy-Codec
	 	=> 4 DAIs  = 2xCPU + 2xCodec
	 	=> 1 ccnf  = 1xdummy-Codec
 Allocate the private data and the DAI link array 
 SPDX-License-Identifier: GPL-2.0
 ASoC simple sound card support
 Copyright (C) 2012 Renesas Solutions Corp.
 Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
	
	  Get node via "sound-dai = <&phandle port>"
	  it will be used as xxx_of_node on soc_bind_dai_link()
	
	  FIXME
	 
	  Here, dlc->dai_name is pointer to CPUCodec DAI name.
	  If user unbinded CPU or Codec driver, but not for Sound Card,
	  dlc->dai_name is keeping unbinded CPU or Codec
	  driver's pointer.
	 
	  If user re-bind CPU or Codec driver again, ALSA SoC will try
	  to rebind Card via snd_soc_try_rebind_card(), but because of
	  above reason, it might can't bind Sound Card.
	  Because Sound Card is pointing to released dai_name pointer.
	 
	  To avoid this rebind Card issue,
	  1) It needs to alloc memory to keep dai_name eventhough
	     CPU or Codec driver was unbinded, or
	  2) user need to rebind Sound Card everytime
	     if he unbinded CPU or Codec.
 For single DAI link & old style of DT node 
 Codec is dummy 
 FE settings 
 CPU is dummy 
 BE settings 
 check "prefix" from top node 
 For single DAI link & old style of DT node 
 Check if it has dai-link 
 loop for all dai-link 
 get codec 
 get platform 
 get convert-xxx property 
 loop for all CPUCodec node 
			
			  It is DPCM
			  if it has many CPUs,
			  or has convert-xxx property
				
				  np
				 	 |1(CPU)|0(Codec)  li->cpu
				  CPU	 |Pass  |return
				  Codec |return|Pass
 else normal sound 
				
				  np
				 	 |1(CPU)|0(Codec)  li->cpu
				  CPU	 |Pass  |return
				  Codec |return|return
	
	  Detect all CPU first, and Detect all Codec 2nd.
	 
	  In Normal sound case, all DAIs are detected
	  as "CPU-Codec".
	 
	  In DPCM sound case,
	  all CPUs   are detected as "CPU-dummy", and
	  all Codecs are detected as "dummy-Codec".
	  To avoid random sub-device numbering,
	  detect "dummy-Codec" in last;
 SingleMuti DAI link(s) & New style of DT node 
 CPU-dummy 
 dummy-Codec 
	
	  link_num :	number of links.
	 		CPU-Codec  CPU-dummy  dummy-Codec
	  dais_num :	number of DAIs
	  ccnf_num :	number of codec_conf
	 		same number for "dummy-Codec"
	 
	  ex1)
	  CPU0 --- Codec0	link : 5
	  CPU1 --- Codec1	dais : 7
	  CPU2 -		ccnf : 1
	  CPU3 --- Codec2
	 
	 	=> 5 links = 2xCPU-Codec + 2xCPU-dummy + 1xdummy-Codec
	 	=> 7 DAIs  = 4xCPU + 3xCodec
	 	=> 1 ccnf  = 1xdummy-Codec
	 
	  ex2)
	  CPU0 --- Codec0	link : 5
	  CPU1 --- Codec1	dais : 6
	  CPU2 -		ccnf : 1
	  CPU3 -
	 
	 	=> 5 links = 1xCPU-Codec + 3xCPU-dummy + 1xdummy-Codec
	 	=> 6 DAIs  = 4xCPU + 2xCodec
	 	=> 1 ccnf  = 1xdummy-Codec
	 
	  ex3)
	  CPU0 --- Codec0	link : 6
	  CPU1 -		dais : 6
	  CPU2 --- Codec1	ccnf : 2
	  CPU3 -
	 
	 	=> 6 links = 0xCPU-Codec + 4xCPU-dummy + 2xdummy-Codec
	 	=> 6 DAIs  = 4xCPU + 2xCodec
	 	=> 2 ccnf  = 2xdummy-Codec
	 
	  ex4)
	  CPU0 --- Codec0 (convert-rate)	link : 3
	  CPU1 --- Codec1			dais : 4
	 					ccnf : 1
	 
	 	=> 3 links = 1xCPU-Codec + 1xCPU-dummy + 1xdummy-Codec
	 	=> 4 DAIs  = 2xCPU + 2xCodec
	 	=> 1 ccnf  = 1xdummy-Codec
 Allocate the private data and the DAI link array 
 SPDX-License-Identifier: GPL-2.0
 ASoC Audio Graph Card2 support
 Copyright (C) 2020 Renesas Electronics Corp.
 Copyright (C) 2020 Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
 based on ${LINUX}soundsocgenericaudio-graph-card.c
	daifmt
	ports {
		format = "left_j";
		port@0 {
			bitclock-master;
			sample0: endpoint@0 {
				frame-master;
			};
			sample1: endpoint@1 {
				format = "i2s";
			};
		};
		...
	};
 You can set daifmt at portsportendpoint.
 It uses latest format, and share master settings.
 In above case,
	sample0: left_j, bitclock-master, frame-master
	sample1: i2s,    bitclock-master
 If there was no settings, Codec will be
 bitclockframe provider as default.
 see
	graph_parse_daifmt().
	Normal Audio-Graph
 CPU <---> Codec
 sound {
	compatible = "audio-graph-card2";
	links = <&cpu>;
 };
 CPU {
	cpu: port {
		bitclock-master;
		frame-master;
		cpu_ep: endpoint { remote-endpoint = <&codec_ep>; }; };
 };
 Codec {
	port {	codec_ep: endpoint { remote-endpoint = <&cpu_ep>; }; };
 };
	Multi-CPUCodec
It has connection part (= X) and list part (= y).
links indicates connection part of CPU side (= A).
	    +-+   (A)	     +-+
 CPU1 --(y) | | <-(X)--(X)-> | | (y)-- Codec1
 CPU2 --(y) | |		     | | (y)-- Codec2
	    +-+		     +-+
	sound {
		compatible = "audio-graph-card2";
(A)		links = <&mcpu>;
		multi {
			ports@0 {
(X) (A)			mcpu:	port@0 { mcpu0_ep: endpoint { remote-endpoint = <&mcodec0_ep>; }; };
(y)				port@1 { mcpu1_ep: endpoint { remote-endpoint = <&cpu1_ep>; }; };
(y)				port@1 { mcpu2_ep: endpoint { remote-endpoint = <&cpu2_ep>; }; };
			};
			ports@1 {
(X)				port@0 { mcodec0_ep: endpoint { remote-endpoint = <&mcpu0_ep>; }; };
(y)				port@0 { mcodec1_ep: endpoint { remote-endpoint = <&codec1_ep>; }; };
(y)				port@1 { mcodec2_ep: endpoint { remote-endpoint = <&codec2_ep>; }; };
			};
		};
	};
 CPU {
	ports {
		bitclock-master;
		frame-master;
		port@0 { cpu1_ep: endpoint { remote-endpoint = <&mcpu1_ep>; }; };
		port@1 { cpu2_ep: endpoint { remote-endpoint = <&mcpu2_ep>; }; };
	};
 };
 Codec {
	ports {
		port@0 { codec1_ep: endpoint { remote-endpoint = <&mcodec1_ep>; }; };
		port@1 { codec2_ep: endpoint { remote-endpoint = <&mcodec2_ep>; }; };
	};
 };
	DPCM
		DSP
	   
 PCM0 <-->  fe0  be0  <--> DAI0: Codec Headset
 PCM1 <-->  fe1  be1  <--> DAI1: Codec Speakers
 PCM2 <-->  fe2  be2  <--> DAI2: MODEM
 PCM3 <-->  fe3  be3  <--> DAI3: BT
	   	  be4  <--> DAI4: DMIC
	   	  be5  <--> DAI5: FM
	   
 sound {
	compatible = "audio-graph-card2";
	 indicate routing
	routing = "xxx Playback", "xxx Playback",
		  "xxx Playback", "xxx Playback",
		  "xxx Playback", "xxx Playback";
	 indicate all Front-End, Back-End
	links = <&fe0, &fe1, ...,
		 &be0, &be1, ...>;
	dpcm {
		 Front-End
		ports@0 {
			fe0: port@0 { fe0_ep: endpoint { remote-endpoint = <&pcm0_ep>; }; };
			fe1: port@1 { fe1_ep: endpoint { remote-endpoint = <&pcm1_ep>; }; };
			...
		};
		 Back-End
		ports@1 {
			be0: port@0 { be0_ep: endpoint { remote-endpoint = <&dai0_ep>; }; };
			be1: port@1 { be1_ep: endpoint { remote-endpoint = <&dai1_ep>; }; };
			...
		};
	};
 };
 CPU {
	ports {
		bitclock-master;
		frame-master;
		port@0 { pcm0_ep: endpoint { remote-endpoint = <&fe0_ep>; }; };
		port@1 { pcm1_ep: endpoint { remote-endpoint = <&fe1_ep>; }; };
		...
	};
 };
 Codec {
	ports {
		port@0 { dai0_ep: endpoint { remote-endpoint = <&be0_ep>; }; };
		port@1 { dai1_ep: endpoint { remote-endpoint = <&be1_ep>; }; };
		...
	};
 };
	Codec to Codec
 +--+
 |  |<-- Codec0 <- IN
 |  |--> Codec1 -> OUT
 +--+
 sound {
	compatible = "audio-graph-card2";
	routing = "OUT" ,"DAI1 Playback",
		  "DAI0 Capture", "IN";
	links = <&c2c>;
	codec2codec {
		ports {
			rate = <48000>;
		c2c:	port@0 { c2cf_ep: endpoint { remote-endpoint = <&codec0_ep>; }; };
			port@1 { c2cb_ep: endpoint { remote-endpoint = <&codec1_ep>; }; };
	};
 };
 Codec {
	ports {
		port@0 {
			bitclock-master;
			frame-master;
			 codec0_ep: endpoint { remote-endpoint = <&c2cf_ep>; }; };
		port@1 { codec1_ep: endpoint { remote-endpoint = <&c2cb_ep>; }; };
	};
 };
 don't use ! Use this only in __graph_get_type() 
	
	  target {
	 	ports {
	  =>		lnk:	port@0 { ... };
	 			port@1 { ... };
	 	};
	  };
 GRAPH_MULTI here means GRAPH_NORMAL 
	
	  multi {
	 	ports {
	  =>	lnk:	port@0 { ... };
	 		port@1 { ep { ... = rep0 } };
	 		port@2 { ep { ... = rep1 } };
	 		...
	 	};
	  };
	 
	  xxx {
	 	port@0 { rep0 };
	 	port@1 { rep1 };
	  };
 use driver specified DAI ID if exist 
 use endpointport reg if exist 
		
		  Because it will count portendpoint if it doesn't have "reg".
		  But, we can't judge whether it has "no reg", or "reg = <0>"
		  only of_graph_parse_endpoint().
		  We need to check "reg" property
	
	  Non HDMI sound case, counting portendpoint on its DT
	  is enough. Let's count it.
 Get dai->name 
	
	  FIXME
	 
	  Here, dlc->dai_name is pointer to CPUCodec DAI name.
	  If user unbinded CPU or Codec driver, but not for Sound Card,
	  dlc->dai_name is keeping unbinded CPU or Codec
	  driver's pointer.
	 
	  If user re-bind CPU or Codec driver again, ALSA SoC will try
	  to rebind Card via snd_soc_try_rebind_card(), but because of
	  above reason, it might can't bind Sound Card.
	  Because Sound Card is pointing to released dai_name pointer.
	 
	  To avoid this rebind Card issue,
	  1) It needs to alloc memory to keep dai_name eventhough
	     CPU or Codec driver was unbinded, or
	  2) user need to rebind Sound Card everytime
	     if he unbinded CPU or Codec.
	
	  set DAI Name
 run is_cpu only. see audio_graph2_link_normal() 
 run is_cpu only. see audio_graph2_link_c2c() 
	
	  Check "prefix" from top node
	  if DPCM-BE case
 Single CPU  Codec 
	
	  see also above "daifmt" explanation
	  and samples.
	
	 	ports {
	  (A)
	 		port {
	  (B)
	 			endpoint {
	  (C)
	 			};
	 		};
	 	};
	  };
	
	  clock_provider:
	 
	  It can be judged it is provider
	  if (A) or (B) or (C) has bitclock-master  frame-master flag.
	 
	  use "or"
	
	  format
	 
	  This function is called by (C) -> (B) -> (A) order.
	  Set if applicable part was not yet set.
	
	 	ports {
	  (A)
	 		port {
	  (B)
	 			endpoint {
	  (C)
	 			};
	 		};
	 	};
	  };
 (C) 
 (B) 
 (A) 
	
	  convert bit_frame
	  We need to flip clock_provider if it was CPU node,
	  because it is Codec base.
	
	  call Codec first.
	  see
	 	__graph_parse_node() :: DAI Naming
	
	  call CPU, and set DAI Name
		
		  dpcm {
		 	 Front-End
		 	ports@0 {
		  =>		lnk: port@0 { ep: { ... = rep }; };
		 		 ...
		 	};
		 	 Back-End
		 	ports@0 {
		 		 ...
		 	};
		  };
		 
		  CPU {
		 	rports: ports {
		 		rport: port@0 { rep: { ... = ep } };
		 	}
		  }
		
		  setup CPU here, Codec is already set as dummy.
		  see
		 	asoc_simple_init_priv()
		
		  dpcm {
		 	 Front-End
		 	ports@0 {
		 		 ...
		 	};
		 	 Back-End
		 	ports@0 {
		  =>		lnk: port@0 { ep: { ... = rep; }; };
		 		 ...
		 	};
		  };
		 
		  Codec {
		 	rports: ports {
		 		rport: port@0 { rep: { ... = ep; }; };
		 	}
		  }
		
		  setup Codec here, CPU is already set as dummy.
		  see
		 	asoc_simple_init_priv()
 BE settings 
	
	  codec2codec {
	 	ports {
	 		rate = <48000>;
	  =>	lnk:	port@0 { c2c0_ep: { ... = codec0_ep; }; };
	 		port@1 { c2c1_ep: { ... = codec1_ep; }; };
	 	};
	  };
	 
	  Codec {
	 	ports {
	 		port@0 { codec0_ep: ... }; };
	 		port@1 { codec1_ep: ... }; };
	 	};
	  };
 update ME 
 update ME 
	
	  call Codec first.
	  see
	 	__graph_parse_node() :: DAI Naming
	
	  call CPU, and set DAI Name
	
	  Multi CPU  Codec
	 
	  multi {
	 	ports {
	  =>		lnk:	port@0 { ... };
	 			port@1 { ... };
	 			port@2 { ... };
	 			...
	 	};
	  };
	 
	  ignore first lnk part
	
	  Single CPU  Codec
	
	 	CPU {
	  =>		lnk: port { endpoint { .. }; };
	 	};
	
	  dpcm {
	 	 Front-End
	 	ports@0 {
	  =>		lnk: port@0 { endpoint { ... }; };
	 		 ...
	 	};
	 	 Back-End
	 	ports@1 {
	  =>		lnk: port@0 { endpoint { ... }; };
	 		 ...
	 	};
	  };
 FE 
 BE 
	
	  codec2codec {
	 	ports {
	  =>	lnk:	port@0 { endpoint { ... }; };
	 		port@1 { endpoint { ... }; };
	 	};
	  };
 loop for all listed CPU port 
 Allocate the private data and the DAI link array 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2012-2013, Analog Devices Inc.
  Author: Lars-Peter Clausen <lars@metafoo.de>
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2012-2013, Analog Devices Inc.
  Author: Lars-Peter Clausen <lars@metafoo.de>
 The frame size is configurable, but for now we always set it 64 bit 
 SPDX-License-Identifier: (GPL-2.0 OR MIT)
 Copyright (c) 2018 BayLibre, SAS.
 Author: Jerome Brunet <jbrunet@baylibre.com>
 Change to special mux control to reset dapm 
 Apply both reset 
 Clear out reset before in reset 
 Actually enable tdmin 
 Set stream skew 
 Set stream format mode 
 If the sample clock is inverted, invert it back for the formatter 
 Set the slot width 
	
	  The following also reset LSB_FIRST which result in the formatter
	  placing the first bit received at bit 31
 Set static swap mask configuration 
 SPDX-License-Identifier: GPL-2.0
 Copyright (c) 2020 BayLibre, SAS.
 Author: Jerome Brunet <jbrunet@baylibre.com>
 If no master is provided, default to cpu master 
 If property is not provided, don't fail ... 
 ... but do fail if it is provided and the parsing fails 
 SPDX-License-Identifier: GPL-2.0
 Copyright (c) 2019 BayLibre, SAS.
 Author: Jerome Brunet <jbrunet@baylibre.com>
 Check that we still are in the same component 
 Save the source stream format for the downstream link 
 Replace link params with the input params 
 SPDX-License-Identifier: GPL-2.0
 Copyright (c) 2020 BayLibre, SAS.
 Author: Jerome Brunet <jbrunet@baylibre.com>
 Always operate in split (classic interleaved) mode 
 Reset required to update the pipeline 
 Nothing to do 
 Nothing to do 
 These are the only valid legacy dividers 
	
	  NOTE: this HW is odd.
	  In most configuration, the i2s divider is 'mclk  blck'.
	  However, in 16 bits - 8ch mode, this factor needs to be
	  increased by 50% to get the correct output rate.
	  No idea why !
 Use CLK_MORE for mclk to bclk divider 
 Get the oversampling factor 
 Send data MSB first 
 Set bclk to lrlck ratio 
 Make sure amclk is used for HDMI i2s as well 
 Disable the clock while changing the settings 
 Only CPU Master  Codec Slave supported ATM 
 Signal skew 
 Invert sample clock for i2s 
 Make sure the encoder gets either 2 or 8 channels 
 SPDX-License-Identifier: GPL-2.0
 Copyright (c) 2020 BayLibre, SAS.
 Author: Jerome Brunet <jbrunet@baylibre.com>
 Force disconnect of the mux while updating 
	
	  FIXME:
	  On this soc, the glue gets the MCLK directly from the clock
	  controller instead of going the through the TDM interface.
	 
	  Here we assume interface A uses clock A, etc ... While it is
	  true for now, it could be different. Instead the glue should
	  find out the clock used by the interface and select the same
	  source. For that, we will need regmap backed clock mux which
	  is a work in progress
 The glue will provide 1 lane out of the 4 to the output 
 Initialize the static clock parameters 
 Initialize the static clock parameters 
 SPDX-License-Identifier: (GPL-2.0 OR MIT)
 Copyright (c) 2018 BayLibre, SAS.
 Author: Jerome Brunet <jbrunet@baylibre.com>
  TODO:
  It would have been nice to check the actual rate against the sample rate
  requested in hw_params(). Unfortunately, I was not able to make the mode
  detection and IRQ work reliably:
  1. IRQs are generated on mode change only, so there is no notification
     on transition between no signal and mode 0 (32kHz).
  2. Mode detection very often has glitches, and may detects the
     lowest or the highest mode before zeroing in on the actual mode.
  This makes calling snd_pcm_stop() difficult to get right. Even notifying
  the kcontrol would be very unreliable at this point.
  Let's keep things simple until the magic spell that makes this work is
  found.
	
	  If max width is zero, we are not capturing anything.
	  Also Sometimes, when the capture is on but there is no data,
	  mode is SPDIFIN_MODE_NUM, but not always ...
 Apply both reset 
 Clear out reset before in reset 
	
	  Number of period of the reference clock during a period of the
	  input signal reference clock
 Set spdif input reference clock 
	
	  The rate actually set might be slightly different, get
	  the actual rate for the following mode calculation
 HW will update mode every 1ms 
 Threshold based on the minimum width between two edges 
 Calculate the last timer which has no threshold 
 Calculate the timer 
 Set the timer value 
 Set the threshold value 
 Save the current timer for the next threshold calculation 
 SPDX-License-Identifier: (GPL-2.0 OR MIT)
 Copyright (c) 2018 BayLibre, SAS.
 Author: Jerome Brunet <jbrunet@baylibre.com>
  Base params for the codec to codec links
  Those will be over-written by the CPU side of the link
 The loopback rx_mask is the pad tx_mask 
 extend links 
 Provide the same link data to the loopback 
	
	  axg_card_clean_references() will iterate over this link,
	  make sure the node count is balanced
 Let add_links continue where it should 
 Disable playback is the interface has no tx slots 
 Disable capture is the interface has no rx slots 
 ... but the interface should at least have one of them 
		
		  If the slot number is not provided, set it such as it
		  accommodates the largest mask
		
		  Error if the slots can't accommodate the largest mask or
		  if it is just too big
 Allocate tdm link parameters 
 Setup tdm link 
 Add loopback if the pad dai has playback 
 SPDX-License-Identifier: GPL-2.0
 Copyright (c) 2020 BayLibre, SAS.
 Author: Jerome Brunet <jbrunet@baylibre.com>
 Setup the fifo boundaries 
 Setup the fifo to read all the memory - no skip 
	
	  Make sure the buffer and period size are multiple of the fifo burst
	  size
 SPDX-License-Identifier: (GPL-2.0 OR MIT)
 Copyright (c) 2020 BayLibre, SAS.
 Author: Jerome Brunet <jbrunet@baylibre.com>
  Base params for the codec to codec links
  Those will be over-written by the CPU side of the link
 Allocate i2s link parameters 
 Setup i2s link 
 dai not matched 
 Or apply codec to codec params if necessary 
 Check if the cpu is the i2s encoder and parse i2s data 
 SPDX-License-Identifier: GPL-2.0
 Copyright (c) 2020 BayLibre, SAS.
 Author: Jerome Brunet <jbrunet@baylibre.com>
 Force disconnect of the mux while updating 
 The glue will provide 1 lane out of the 4 to the output 
	
	  NOTE: Din Skew setting
	  According to the documentation, the following update adds one delay
	  to the din line. Without this, the output saturates. This happens
	  regardless of the link format (i2s or left_j) so it is not clear what
	  it actually does but it seems to be required
 SPDX-License-Identifier: GPL-2.0
 Copyright (c) 2020 BayLibre, SAS.
 Author: Jerome Brunet <jbrunet@baylibre.com>
 Write the 1st half word 
 Write the 2nd half word 
 Disable the clock while changing the settings 
 Set the stream channel status word 
 2  32bits per subframe  2 channels = 128 
	
	  NOTE: Make sure the spdif block is on its own divider.
	 
	  The spdif can be clocked by the i2s master clock or its own
	  clock. We should (in theory) change the source depending on the
	  origin of the data.
	 
	  However, considering the clocking scheme used on these platforms,
	  the master clocks will pick the same PLL source when they are
	  playing from the same FIFO. The clock should be in sync so, it
	  should not be necessary to reparent the spdif master clock.
 SPDX-License-Identifier: (GPL-2.0 OR MIT)
 Copyright (c) 2018 BayLibre, SAS.
 Author: Jerome Brunet <jbrunet@baylibre.com>
	
	  Distribute the channels of the stream over the available slots
	  of each TDM lane
	
	  If we still have channel left at the end of the process, it means
	  the stream has more channels than we can accommodate and we should
	  have caught this earlier.
 Do nothing if the formatter is already enabled 
	
	  On the g12a (and possibly other SoCs), when a stream using
	  multiple lanes is restarted, it will sometimes not start
	  from the first lane, but randomly from another used one.
	  The result is an unexpected and random channel shift.
	 
	  The hypothesis is that an HW counter is not properly reset
	  and the formatter simply starts on the lane it stopped
	  before. Unfortunately, there does not seems to be a way to
	  reset this through the registers of the block.
	 
	  However, the g12a has indenpendent reset lines for each audio
	  devices. Using this reset before each start solves the issue.
	
	  If sclk is inverted, it means the bit should latched on the
	  rising edge which is what our HW expects. If not, we need to
	  invert it before the formatter.
 Setup the stream parameter in the formatter 
 Enable the signal clocks feeding the formatter 
 Finally, actually enable the formatter 
 Do nothing if the formatter is already disabled 
 Catch up if the stream is already running when we attach 
	
	  If we don't get a stream at this stage, it would mean that the
	  widget is powering up but is not attached to any backend DAI.
	  It should not happen, ever !
 Clock our device 
 Reparent the bit clock to the TDM interface 
 Reparent the sample clock to the TDM interface 
 Peripharal clock 
 Formatter bit clock 
 Formatter sample clock 
 Formatter bit clock input multiplexer 
 Formatter sample clock input multiplexer 
 Formatter dedicated reset line 
 Start all the formatters attached to the stream 
 Stop all the formatters attached to the stream 
	
	  If the list is not empty, it would mean that one of the formatter
	  widget is still powered and attached to the interface while we
	  are removing the TDM DAI. It should not be possible
 SPDX-License-Identifier: (GPL-2.0 OR MIT)
 Copyright (c) 2018 BayLibre, SAS.
 Author: Jerome Brunet <jbrunet@baylibre.com>
 Apply both reset 
 Clear out reset before in reset 
 Actually enable tdmout 
 Set the stream skew 
 Set the slot width 
 Set the slot number 
 Set the sample width 
 FIFO data are arranged in chunks of 64bits 
 8 samples of 8 bits 
 4 samples of 16 bits - right justified 
 2 samples of 32 bits - right justified 
 If the sample clock is inverted, invert it back for the formatter 
 Set static swap mask configuration 
 SPDX-License-Identifier: GPL-2.0
 Copyright (c) 2020 BayLibre, SAS.
 Author: Jerome Brunet <jbrunet@baylibre.com>
 Volume Controls 
 Ramp Controls 
	
	  Initialize output polarity:
	  ATM the output polarity is fixed but in the future it might useful
	  to add DT property to set this depending on the platform needs
 SPDX-License-Identifier: GPL-2.0
 Copyright (c) 2019 BayLibre, SAS.
 Author: Jerome Brunet <jbrunet@baylibre.com>
 Force disconnect of the mux while updating 
 Force disconnect of the mux while updating 
 Initialize the static clock parameters 
 SPDX-License-Identifier: (GPL-2.0 OR MIT)
 Copyright (c) 2018 BayLibre, SAS.
 Author: Jerome Brunet <jbrunet@baylibre.com>
 Reset AFIFO 
 Enable PDM 
	
	  The global oversampling factor is defined by the down sampling
	  factor applied by each filter (HCIC and LPFs)
	
	  Set the default system clock rate unless it is too fast for
	  for the requested sample rate. In this case, the sample pointer
	  counter could overflow so set a lower system clock rate
 Max sample counter value per half period of dclk 
 Check if sysclk is not too fast - should not happen 
 Capture the data when we are at 75% of the half period 
 Put all channel in reset 
 Take the necessary channels out of reset and enable them 
 Enable the filters 
 Make sure the coeffs fit in the memory 
 Set the initial APB bus register address 
 Set the tap filter values of all 3 filters 
	
	  sysclk must be set and enabled as well to access the pdm registers
	  Accessing the register wo it will give a bus error.
 Make sure the device is initially disabled 
 Make sure filter bypass is disabled 
 Load filter settings 
  These values are sane defaults for the axg platform:
  - OS = 64
  - Latency = 38700 (?)
  TODO: There is a lot of different HCIC, LPFs and HPF configurations possible.
        the configuration may depend on the dmic used by the platform, the
        expected tradeoff between latency and quality, etc ... IfWhen other
        settings are required, we should add a fw interface to this driver to
        load new filter settings.
 SPDX-License-Identifier: GPL-2.0
 Copyright (c) 2020 BayLibre, SAS.
 Author: Jerome Brunet <jbrunet@baylibre.com>
 Required for the SPDIF Source control operation 
 Register the cpu component of the aiu 
 Register the hdmi codec control component 
 Register the internal dac control component on gxl 
 SPDX-License-Identifier: (GPL-2.0 OR MIT)
 Copyright (c) 2018 BayLibre, SAS.
 Author: Jerome Brunet <jbrunet@baylibre.com>
 Count the total number of slots provided by all 4 lanes 
 We should at least have a slot for a valid interface 
 Amend the dai driver and let dpcm merge do its job 
 Apply component wide rate symmetry 
 Save rate and sample_bits for component symmetry 
 Make sure this interface can cope with the stream 
 Save the parameter for tdmouttdmin widgets 
 50% duty cycle ratio 
		
		  A zero duty cycle ratio will result in setting the mininum
		  ratio possible which, for this clock, is 1 cycle of the
		  parent bclk clock high and the rest low, This is exactly
		  what we want here.
 Set sample clock inversion 
 If no specific mclk is requested, default to bit clock  4 
 Check if we can actually get the bit clock from mclk 
 Set the bit clock inversion 
 Stop all attached formatters 
 TDM Backend DAIs 
	
	  Duplicate dai driver: depending on the slot masks configuration
	  We'll change the number of channel provided by DAI stream, so dpcm
	  channel merge can be done properly
 Bit clock provided on the pad 
 Sample clock provided on the pad 
	
	  mclk maybe be missing when the cpu dai is in slave mode and
	  the codec does not require it to provide a master clock.
	  At this point, ignore the error if mclk is missing. We'll
	  throw an error if the cpu dai is master and mclk is missing
 SPDX-License-Identifier: (GPL-2.0 OR MIT)
 Copyright (c) 2018 BayLibre, SAS.
 Author: Jerome Brunet <jbrunet@baylibre.com>
  This driver implements the frontend playback DAI of AXG and G12A based SoCs
 Reset the read pointer to the FIFO_INIT_ADDR 
 Trim the FIFO depth if the period is small to improve latency 
 Enable pclk to access registers and clock the fifo ip 
 Apply single buffer mode to the interface 
 On SM1, the output selection in on CTRL2 
 SPDX-License-Identifier: (GPL-2.0 OR MIT)
 Copyright (c) 2018 BayLibre, SAS.
 Author: Jerome Brunet <jbrunet@baylibre.com>
  NOTE:
  The meaning of bits SPDIFOUT_CTRL0_XXX_SEL is actually the opposite
  of what the documentation says. Manual control on V, U and C bits is
  applied when the related sel bits are cleared
 Apply both reset 
 Clear out reset before in reset 
 Enable spdifout 
 Use spdif valid bit to perform digital mute 
 Set the samples spdifout will pull from the FIFO 
 FIFO data are arranged in chunks of 64bits 
 8 samples of 8 bits 
 4 samples of 16 bits - right justified 
 2 samples of 32 bits - right justified 
 Position of the MSB in FIFO samples 
 Setup channel status A bits [31 - 0]
 Clear channel status A bits [191 - 32] 
 Setup channel status B bits [31 - 0]
 Clear channel status B bits [191 - 32] 
 2  32bits per subframe  2 channels = 128 
 Clock the spdif output block 
 Make sure the block is initially stopped 
 Insert data from bit 27 lsb first 
 Manual control of V, C and U, U = 0 
 Static SWAP configuration ATM 
 SPDX-License-Identifier: GPL-2.0
 Copyright (c) 2020 BayLibre, SAS.
 Author: Jerome Brunet <jbrunet@baylibre.com>
 Force disconnect of the mux while updating 
 Reset the source first 
 Set the appropriate source 
 SPDX-License-Identifier: (GPL-2.0 OR MIT)
 Copyright (c) 2018 BayLibre, SAS.
 Author: Jerome Brunet <jbrunet@baylibre.com>
 This driver implements the frontend capture DAI of AXG based SoCs 
 Reset the write pointer to the FIFO_INIT_ADDR 
 8 samples of 8 bits 
 4 samples of 16 bits - right justified 
 2 samples of 32 bits - right justified 
 Enable pclk to access registers and clock the fifo ip 
 Select orginal data - resampling not supported ATM 
 Only signed format are supported ATM 
 Apply single buffer mode to the interface 
	
	  Make sure the first channel ends up in the at beginning of the output
	  As weird as it looks, without this the first channel may be misplaced
	  in memory, with a random shift of 2 channels.
 SPDX-License-Identifier: GPL-2.0
 Copyright (c) 2020 BayLibre, SAS.
 Author: Jerome Brunet <jbrunet@baylibre.com>
 No real justification for this 
 Number bytes read by the FIFO between each IRQ 
	
	  AUTO_DISABLE and SYNC_HEAD are enabled by default but
	  this should be disabled in PCM (uncompressed) mode
 SPDX-License-Identifier: (GPL-2.0 OR MIT)
 Copyright (c) 2018 BayLibre, SAS.
 Author: Jerome Brunet <jbrunet@baylibre.com>
  This file implements the platform operations common to the playback and
  capture frontend DAI. The logic behind this two types of fifo is very
  similar but some difference exist.
  These differences are handled in the respective DAI drivers
 No real justification for this 
 Setup dma memory pointers 
 Setup interrupt periodicity 
	
	  Start the fifo request on the smallest of the following:
	  - Half the fifo size
	  - Half the period size
	
	  With the threshold in bytes, register value is:
	  V = (threshold  burst) - 1
 Enable irq if necessary  
 Set the initial memory address of the DMA 
 Disable the block count irq 
 Clear must also be cleared 
 Ack irqs 
	
	  Make sure the buffer and period size are multiple of the FIFO
	  burst
 Enable pclk to access registers and clock the fifo ip 
 Setup status2 so it reports the memory pointer 
 Make sure the dma is initially disabled 
 Disable irqs until params are ready 
 Clear any pending interrupt 
 Take memory arbitror out of reset 
 Put the memory arbitror back in reset 
 Disable fifo ip and register access 
 remove IRQ 
 Error out for anything but a missing property 
		
		  If the property is missing, it might be because of an old
		  DT. In such case, assume the smallest known fifo depth
 SPDX-License-Identifier: GPL-2.0
 Copyright (c) 2020 BayLibre, SAS.
 Author: Jerome Brunet <jbrunet@baylibre.com>
 No real justification for this 
 Setup the irq periodicity 
 SPDX-License-Identifier: GPL-2.0
 Xilinx ASoC SPDIF audio support
 Copyright (C) 2018 Xilinx, Inc.
 Author: Maruthi Srinivas Bayyavarapu <maruthis@xilinx.com>
 start capture only if stream is detected within 40ms timeout 
 SPDX-License-Identifier: GPL-2.0
 Xilinx ASoC I2S audio support
 Copyright (C) 2018 Xilinx, Inc.
 Author: Praveen Vuppala <praveenv@xilinx.com>
 Author: Maruthi Srinivas Bayyavarapu <maruthis@xilinx.com>
 SPDX-License-Identifier: GPL-2.0
 Xilinx ASoC audio formatter support
 Copyright (C) 2018 Xilinx, Inc.
 Author: Maruthi Srinivas Bayyavarapu <maruthis@xilinx.com>
  struct xlnx_pcm_stream_param - stream configuration
  @mmio: base address offset
  @interleaved: audio channels arrangement in buffer
  @xfer_mode: data formatting mode during transfer
  @ch_limit: Maximum channels supported
  @buffer_size: stream ring buffer size
 Poll for maximum timeout of approximately 100ms (1  100)
 Resize the period size divisible by 64 
 enable DMA IOC irq 
 Try MM2S reset, even if S2MM  reset fails 
 SPDX-License-Identifier: GPL-2.0-or-later
  kirkwood-dma.c
  (c) 2010 Arnaud Patard <apatard@mandriva.com>
  (c) 2010 Arnaud Patard <arnaud.patard@rtp-net.org>
 we've enabled only bytes interrupts ... 
 ack int 
 First disable and clear windows 
 try to find matching cs for current dma address 
 Ensure that all constraints linked to dma burst are fulfilled 
		
		  Enable Error interrupts. We're only ack'ing them but
		  it's useful for diagnostics
 compute buffer size in term of "words" as requested in specs 
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (C) 2014 Marvell
  Thomas Petazzoni <thomas.petazzoni@free-electrons.com>
 SPDX-License-Identifier: GPL-2.0-or-later
  kirkwood-i2s.c
  (c) 2010 Arnaud Patard <apatard@mandriva.com>
  (c) 2010 Arnaud Patard <arnaud.patard@rtp-net.org>
	
	  Set same format for playback and record
	  This avoids some troubles.
 wait for dco locked 
		 use internal dco for the supported rates
		 use the external clock for the other rates
	
	  Size settings in playrec i2s control regs and playrec control
	  regs must be the same.
	
	  doesn't work... S20_3LE != kirkwood 20bit format ?
	 
	case SNDRV_PCM_FORMAT_S20_3LE:
		i2s_value |= KIRKWOOD_I2S_CTL_SIZE_20;
		ctl_play = KIRKWOOD_PLAYCTL_SIZE_20 |
			   KIRKWOOD_PLAYCTL_I2S_EN;
		ctl_rec = KIRKWOOD_RECCTL_SIZE_20 |
			  KIRKWOOD_RECCTL_I2S_EN;
		break;
		
		  The Armada510 spec says that if we enter pause mode, the
		  busy bit must be read back as clear _twice_.  Make sure
		  we respect that otherwise we get DMA underruns.
 configure 
 i2s 
 spdif 
 enable interrupts 
 enable playback 
 stop audio, disable interrupts 
 disable all playbacks 
 configure 
 i2s 
 spdif 
 enable interrupts 
 enable record 
 stop audio, disable interrupts 
 disable all records 
 put system in a "safe" state : 
 disable audio interrupts 
 disable playbackrecord 
 might be 32 or 128 
 Some sensible defaults - this reflects the powerup values 
 Select the burst size 
 Module information 
 SPDX-License-Identifier: GPL-2.0
 Generic AC97 sound support for SH7760
 (c) 2007 Manuel Lauss
 HAC0 
 enable both AC97 controllers in pinmux reg 
 SPDX-License-Identifier: GPL-2.0+
 siu_dai.c - ALSA SoC driver for Renesas SH7343, SH7722 SIU peripheral.
 Copyright (C) 2009-2010 Guennadi Liakhovetski <g.liakhovetski@gmx.de>
 Copyright (C) 2006 Carlos Munoz <carlos@kenati.com>
 Board specifics 
  SPDIF is only available on port A and on some SIU implementations it is only
  available for input. Due to the lack of hardware to test it, SPDIF is left
  disabled in this driver version
 not on all SIU versions 
 impossible - turn off 
 impossible - turn off 
 Issue software reset to siu 
 Wait for the reset to take effect 
 portA, portB, SIU operate 
 portA=256fs, portB=256fs 
 portA's BRG does not divide SIUCKA 
 portB's BRG divides SIUCKB by half 
 portA: 32 bitfs, master; portB: 32 bitfs, master 
	
	  Volume levels: looks like the DSP firmware implements volume controls
	  differently from what's described in the datasheet
 SIU software reset 
 path A use 
 portA 
 portB 
 0x03000300 
 0 
 0 
 path B use 
 portA 
 portB 
 portA operates 
 portB operates 
 Unmute and configure portA 
  At the moment only fixed Left-upper, Left-lower, Right-upper, Right-lower
  packing is supported
 Load SPB Program in PRAM 
 XRAM initialization 
 YRAM variable area initialization 
 YRAM FIR coefficient area initialization 
 YRAM IIR coefficient area initialization 
 SPB start condition: software 
 Start SPB 
 Wait for program to halt 
 SPB program start address setting 
 SPB hardware start(FIFOCTL source) 
 SPB stop 
		API functions		
 Playback and capture hardware properties are identical 
 Playback is always on port 0 
 Capture is always on port 1 
 See comment above - DSP firmware implementation 
 Playback is always on port 0 
 Capture is always on port 1 
	
	  Add mixer support. The SPB is used to change the volume. Both
	  ports use the same SPB. Therefore, we only register one
	  control instance since it will be used by both channels.
	  In error case we continue without controls.
 Stop the siu if the other stream is not using it 
 during stmread or stmwrite ? 
 PCM part of siu_dai_playback_prepare()  siu_dai_capture_prepare() 
 Set up the siu if not already done 
 stream-data transfer flag 
  SIU can set bus format to I2S  PCM  SPDIF independently for playback and
  capture, however, the current API sets the bus format globally for a DAI.
 Here select between I2S  PCM  SPDIF 
 SPDIF disabled - see comment at the top 
 TODO: when clkdev gets reference counting we'll move these to siu_dai_shutdown() 
	
	  Loaded firmware is "const" - read only, but we have to modify it in
	  snd_siu_sh7343_spbAselect() and snd_siu_sh7343_spbBselect()
 register using ARRAY version so we can keep dai name 
 SPDX-License-Identifier: GPL-2.0
 Hitachi Audio Controller (AC97) support for SH7760SH7780
 Copyright (c) 2007 Manuel Lauss <mano@roarinelk.homelinux.net>
 dont forget to set IPSELOMSEL register bits (in your board code) to
 enable HAC output pins!
 BIG FAT FIXME: although the SH7760 has 2 independent AC97 units, only
  the FIRST can be used since ASoC does not pass any information to the
  ac97_readwrite() functions regarding WHICH unit to use.  You'll have
  to edit the code a bit to use the other AC97 unit.		--mlau
 regs and bits 
 "codec-ready" indicator 
 cold reset 
 warm reset 
 the mysterious "bit 9" 
 AC97 link start bit 
 AC97 data read bit 
 manual-suggested AC97 codec access timeouts (us) 
 21 < E1 < 1000 
 13 < E2 
 21 < E3 
 21 < E4 < 1000 
 HAC base address 
  AC97 readwrite flow as outlined in the SH7760 manual (pages 903-906)
 wait for HAC to receive something from the codec 
 codec comm is down 
 manual says: wait at least 21 usec before retrying 
 send_read_request 
 ac97->private_data ;
 write_codec_aux 
 send_write_request 
 poll-wait for CMDAMT and CMDDMT 
 timeout, try again 
 ac97->private_data ;
 ac97->private_data ;
 settings this bit lets us have a conversation with codec 
 ac97->private_data ;
 SPDX-License-Identifier: GPL-2.0
 ALSA SoC driver for Migo-R
 Copyright (C) 2009-2010 Guennadi Liakhovetski <g.liakhovetski@gmx.de>
 Default 8000Hz sampling frequency 
 External clock, sourced from the codec at the SIUMCKB pin 
 initialised at run-time 
	
	  This propagates the parent frequency change to children and
	  recalculates the frequency table
 Headphone output connected to LHPRHP, enable OUT4 for VMID 
 On-board microphone 
 External microphone 
 migor digital audio interface glue - connects codec <--> CPU 
 migor audio machine driver 
 Port number used on this machine: port B 
 SPDX-License-Identifier: GPL-2.0
 Fifo-attached Serial Interface (FSI) support for SH7724
 Copyright (C) 2009 Renesas Solutions Corp.
 Kuninori Morimoto <morimoto.kuninori@renesas.com>
 Based on ssi.c
 Copyright (c) 2007 Manuel Lauss <mano@roarinelk.homelinux.net>
 PortAPortB register 
 master register 
 core register (depend on FSI version) 
 DO_FMT 
 DI_FMT 
 FSI2 
 FSI2 
 FSI2 
 FSI2 
 FSI2 
 FSI2 
 FSI2 
 OUT_DMAC 
 IN_DMAC 
 Package in front 
 Package in back 
 Stream mode(16bit  2) 
 DOFF_CTL 
 DIFF_CTL 
 DOFF_ST 
 CKG1 
 AB MST_CTLR 
 Fix the signal of Biphase output 
 Fix the master clock 
 CLK_RST 
 IO SHIFT  MACRO 
 SOFT_RST 
 Port B Software Reset 
 Port A Software Reset 
 Interrupt Reset 
 Software Reset 
 OUT_SEL (FSI2) 
 SPDIF output timing 0: Biphase only 
			1: Biphase and serial 
 FIFO_SZ 
  bus options
  0x000000BA
  A : sample widtht 16bit setting
  B : sample widtht 24bit setting
  FSI driver use below type name for variable
  xxx_num	: number of data
  xxx_pos	: position of data
  xxx_capa	: capacity of data
 	periodframesample image
  ex) PCM (2ch)
  period pos					   period pos
    [n]					     [n + 1]
    |<-------------------- period--------------------->|
  ==|============================================ ... =|==
    |							|
    ||<-----  frame ----->|<------ frame ----->|  ...	|
    |+--------------------+--------------------+- ...	|
    ||[ sample ][ sample ]|[ sample ][ sample ]|  ...	|
    |+--------------------+--------------------+- ...	|
  ==|============================================ ... =|==
 	FSI FIFO image
 	|	     |
 	|	     |
 	| [ sample ] |
 	| [ sample ] |
 	| [ sample ] |
 	| [ sample ] |
 		--> go to codecs
 	FSI clock
  FSIxCLK [CPG] (ick) ------->	|
 				|-> FSI_DIV (div)-> FSI2
  FSIxCK [external] (xck) --->	|
 		struct
	
	  these are initialized by fsi_stream_init()
 sample capacity of FSI FIFO 
 sample capacity of ALSA buffer 
 sample position of ALSA buffer 
 sample number  1 period 
 current period position 
 sample width 
	
	  bus options
	
	  these are initialized by fsi_handler_init()
	
	  these are for DMAEngine
 see [FSI clock] 
 		basic read write function
 valid data area is 24bit 
 		basic function
 		fsi_stream_xx() function
 ignore 1st err 
 ignore 1st err 
 	formatbusdma setting
		
		  FSI2 needs DMABus setting
 		irq function
 clear interrupt factor 
 		SPDIF master clock function
  These functions are used later FSI2
 		clock function
 external clock 
 FSIACLKFSIBCLK 
 FSI-DIV 
 check ackmdbpfmd relationship 
  ACKMD 
 BPFMD 
 check clock rate 
 12288000 or 11289600 
	
	  The clock flow is
	 
	  [CPG] = cout => [FSI_DIV] = audio => [FSI] => [codec]
	 
	  But, it needs to find best match of CPG and FSI_DIV
	  combination, since it is difficult to generate correct
	  frequency of audio clock from ick clock only.
	  Because ick is created from its parent clock.
	 
	  target	= rate x [51225612864]fs
	  cout		= round(target x adjustment)
	  actual	= cout  adjustment (by FSI-DIV) ~= target
	  audio	= actual
 max clock = 100MHz 
 coutactual audio clock 
 find best frequency 
 		pio data transfer handler
		
		  stream mode
		  see
		 	fsi_pio_push_init()
 normal mode 
 samples in FSI fifo 
 ALSA free samples space 
 ALSA residue samples 
 FSI fifo free samples space 
	
	  we can use 16bit stream mode
	  when "playback" and "16bit data"
	  and platform allows "stream mode"
	  see
	 	fsi_pio_push16()
	
	  always 24bit bus, package back when "capture"
 clear irq status 
 		dma data transfer handler
	
	  24bit data : 24bit bus  package in back
	  16bit data : 16bit bus  stream mode
	
	  FIXME
	 
	  In DMAEngine case, codec and FSI cannot be started simultaneously
	  since FSI is using the scheduler work queue.
	  Therefore, in capture case, probably FSI FIFO will have got
	  overflow error in this point.
	  in that case, DMA cannot start transfer until error was cleared.
 switch to PIO handler 
 probe again 
 		dai ops
 get on-chip RAM capacity 
	
	  The maximum number of sample data varies depending
	  on the number of channels selected for the format.
	 
	  FIFOs are used in 4-channel units in 3-channel mode
	  and in 8-channel units in 5- to 7-channel mode
	  meaning that more FIFOs than the required size of DPRAM
	  are used.
	 
	  ex) if 256 words of DP-RAM is connected
	  1 channel:  256 (256 x 1 = 256)
	  2 channels: 128 (128 x 2 = 256)
	  3 channels:  64 ( 64 x 3 = 192)
	  4 channels:  64 ( 64 x 4 = 256)
	  5 channels:  32 ( 32 x 5 = 160)
	  6 channels:  32 ( 32 x 6 = 192)
	  7 channels:  32 ( 32 x 7 = 224)
	  8 channels:  32 ( 32 x 8 = 256)
	
	  set interrupt generation factor
	  clear FIFO
 clock setting 
 clock inversion (CKG2) 
 spdif ? 
	
	  get bus settings
 irq clear 
 fifo init 
 start master clock 
 stop master clock 
 set clock master audio interface 
 cpu is master 
 set clock inversion 
 set format 
  Select below from Sound Card, not auto
 	SND_SOC_DAIFMT_CBC_CFC
 	SND_SOC_DAIFMT_CBP_CFP
 		pcm ops
 		snd_soc_component
 		alsa struct
 		platform function
 default PIO 
 default PIO 
 Interrupt 
 Interrupt 
 master setting 
 FSI A setting 
 FSI B setting 
 SPDX-License-Identifier: GPL-2.0
 SH7760 ("camelot") DMABRG audio DMA unit support
 Copyright (C) 2007 Manuel Lauss <mano@roarinelk.homelinux.net>
 The SH7760 DMABRG provides 4 dma channels (2x rec, 2x play), which
 trigger an interrupt when one half of the programmed transfer size
 has been xmitted.
 FIXME: little-endian only for now
 registers and bits 
 receivertransmitter data alignment 
 DMABRG audio channel control reg MMIO 
 ID of first DMABRG IRQ for this unit 
  set a minimum of 16kb per period, to avoid interrupt-"storm" and
  resulting skipping. In general, the bigger the minimum size, the
  better for overall system performance. (The SH7760 is a puny CPU
  with a slow SDRAM interface and poor internal bus bandwidth,
  especially when the LCDC is active).  The minimum for the DMAC
  is 8 bytes; 16kbytes are enough to get skip-free playback of a
  44kHz16bitstereo MP3 on a lightly loaded system, and maintain
  reasonable responsiveness in MPlayer.
 DMABRG buffer halffull events 
 start DMABRG engine: XFER start, auto-addr-reload 
 forcibly terminate data transmission 
 start DMABRG engine: recv start, auto-reload 
 forcibly terminate data receiver 
	 cannot use the DMABRG pointer register: under load, by the
	  time ALSA comes around to read the register, it is already
	  far ahead (or worse, already done with the fragment) of the
	  position at the time the IRQ was triggered, which results in
	  fast-playback sound in my test application (ScummVM)
	 dont use SNDRV_DMA_TYPE_DEV, since it will oops the SH kernel
	  in MMAP mode (i.e. aplay -M)
 SPDX-License-Identifier: GPL-2.0
 Renesas RZG2L ASoC Serial Sound Interface (SSIF-2) Driver
 Copyright (C) 2021 Renesas Electronics Corp.
 Copyright (C) 2019 Chris Brandt.
 REGISTER OFFSET 
 SSI REGISTER BITS 
 Pre allocated buffers sizes 
 8k-44.1kHz 
 sample capacity of SSI FIFO 
 The address for the next DMA descriptor 
 for keeping track of periods transferred 
 current frame position in the buffer 
 0=stopped, 1=running 
	
	  The SSI supports full-duplex transmission and reception.
	  However, if an error occurs, channel reset (both transmission
	  and reception reset) is required.
	  So it is better to use as half-duplex (playing and recording
	  should be done on separate channels).
 clock 
 LR clock polarity (SSICR.LRCKP) 
 Bit clock polarity (SSICR.BCKP) 
 fifo init 
 System Word Length 
 Clear AUCKE so we can set MST 
 Continue to output LRCK pin even when idle 
 Clock setting 
 Determine the clock divider 
 try to find an match 
	
	  DWL: Data Word Length = 16 bits
	  SWL: System Word Length = 32 bits
 FIFO interrupt thresholds 
 enable IRQ 
 Clear all error flags 
 Disable TXRX 
 Cancel all remaining DMA transactions 
 Disable irqs 
 Clear all error flags 
 Wait for idle 
 Hold FIFOs in reset 
 ring buffer 
 frames left in this period 
 Samples in RX FIFO 
 Only read full frames at a time 
 not enough samples yet 
 calculate new buffer index 
 Note, only supports 16-bit samples 
	
	  If we finished this period, but there are more samples in
	  the RX FIFO, call this function again
 frames left in this period 
 Only add full frames at a time 
 no space to send anything right now 
 calculate new buffer index 
 Note, only supports 16-bit samples 
 Left over TXRX interrupt 
 error or idle 
 Error handling 
 You must reset (stoprestart) after each interrupt 
 Clear all flags 
 Addremove more data 
 Resume 
 tx data empty 
 rx data full 
		
		  Stream is ending, so do not queue up any more DMA
		  transfers otherwise we play partial sound clips
		  because we can't shut off the DMA quick enough.
 Always transfer 1 period 
 DMA physical address and size 
 Update DMA pointer 
 Start DMA 
 Note that next DMA transaction has probably already started 
 Queue up another DMA transaction 
 Soft Reset 
 Fallback to pio 
 For DMA, queue up multiple DMA descriptors 
	
	  set clock polarity
	 
	  "normal" BCLK = Signal is available at rising edge of BCLK
	  "normal" FSYNC = (I2S) Left ch starts with falling FSYNC edge
 only i2s support 
 Detect DMA support 
 Error Interrupt 
 Tx and Rx interrupts (pio only) 
 Sentinel },
 SPDX-License-Identifier: GPL-2.0
 Serial Sound Interface (I2S) support for SH7760SH7780
 Copyright (c) 2007 Manuel Lauss <mano@roarinelk.homelinux.net>
 dont forget to set IPSELOMSEL register bits (in your board code) to
 enable SSI output pins!
  LIMITATIONS:
 	The SSI unit has only one physical data line, so full duplex is
 	impossible.  This can be remedied  on the  SH7760 by  using the
 	other SSI unit for recording; however the SH7780 has only 1 SSI
 	unit, and its pins are shared with the AC97 unit,  among others.
  FEATURES:
 	The SSI features "compressed mode": in this mode it continuously
 	streams PCM data over the I2S lines and uses LRCK as a handshake
 	signal.  Can be used to send compressed data (AC3DTS) to a DSP.
 	The number of bits sent over the wire in a frame can be adjusted
 	and can be independent from the actual sample bit depth. This is
 	useful to support TDM mode codecs like the AD1939 which have a
 	fixed TDM slot size, regardless of sample resolution.
 bitclock master bit 
 wordselect master bit 
 I2Sclock polarity 
 LRCK polarity 
 i2s alignment (msblsb) 
 fifo data alignment 
 delay data by 1 i2sclk 
 clock gating in burst mode 
 bitclock divider 
 SSI mute 
 compressed mode 
 transmitreceive select 
 enable SSI 
  track usage of the SSI; it is simplex-only so prevent attempts of
  concurrent playback + capture. FIXME: any locking required?
 direction (sendreceive) 
 transmit 
 channels 
 DATA WORD LENGTH (DWL): databits in audio sample 
	
	  SYSTEM WORD LENGTH: size in bits of half a frame over the I2S
	  wires. This is usually bits_per_sample x channels2;  i.e. in
	  Stereo mode  the SWL equals DWL.  SWL can  be bigger than the
	  product of (channels_per_slot x samplebits), e.g.  for codecs
	  like the AD1939 which  only accept 32bit wide TDM slots.  For
	  "standard" I2S operation we set SWL = chans  2  DWL here.
	  Waiting for ASoC to get TDM support ;-)
 these are padded by the SSI 
ssicr |= CR_PDTA; 
  This divider is used to generate the SSI_SCK (I2S bitclock) from the
  clock at the HAC_BIT_CLK ("oversampling clock") pin.
 sample data at low clkedge 
 word select starts low 
 the SSI depends on an external clocksource (at HAC_BIT_CLK) even in
  Master mode,  so really this is board specific;  the SSI can do any
  rate with the right bitclk and divider settings.
 the SSI can do 8-32 bit samples, with 8 possible channels 
 SPDX-License-Identifier: GPL-2.0+
 siu_pcm.c - ALSA driver for Renesas SH7343, SH7722 SIU peripheral.
 Copyright (C) 2009-2010 Guennadi Liakhovetski <g.liakhovetski@gmx.de>
 Copyright (C) 2006 Carlos Munoz <carlos@kenati.com>
 Read in progress 
 Write in progress 
 transfersize is number of u32 dma transfers per period 
 output FIFO disable 
 during stmwrite clear 
 Current period in buffer 
 during stmwrite flag set 
 DMA transfer start 
 Update completed period count 
 Notify alsa: a period is done 
 only output FIFO enable 
 only input FIFO enable 
 DMA transfer start 
 Capture 
 Current period in buffer 
 during stmread flag set 
 input FIFO disable 
 during stmread flag clear 
 Playback  Capture 
 Get DMA channel 
 We only support buffers that are multiples of the period 
  So far only resolution of one period is supported, subject to extending the
  dmangine API
	
	  ptr is the offset into the buffer where the dma is currently at. We
	  check if the dma buffer has just wrapped.
 card->dev == socdev->dev, see snd_soc_new_pcms() 
 pdev->id selects between SIUA and SIUB 
	
	  While the siu has 2 ports, only one port can be on at a time (only 1
	  SPB). So far all the boards using the siu had only one of the ports
	  wired to a codec. To simplify things, we only register one port with
	  alsa. In case both ports are needed, it should be changed here
 IO works 
 SPDX-License-Identifier: GPL-2.0
 Renesas R-Car DVC support
 Copyright (C) 2014 Renesas Solutions Corp.
 Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
  Playback Volume
 	amixer set "DVC Out" 100%
  Capture Volume
 	amixer set "DVC In" 100%
  Playback Mute
 	amixer set "DVC Out Mute" on
  Capture Mute
 	amixer set "DVC In Mute" on
  Volume Ramp
 	amixer set "DVC Out Ramp Up Rate"   "0.125 dB64 steps"
 	amixer set "DVC Out Ramp Down Rate" "0.125 dB512 steps"
 	amixer set "DVC Out Ramp" on
 	aplay xxx.wav &
 	amixer set "DVC Out"  80%   Volume Down
 	amixer set "DVC Out" 100%   Volume Up
 Ramp Enable 
 Ramp Rate Up 
 Ramp Rate Down 
 Enable Ramp 
 Enable Digital Volume 
 Enable Digital Volume, Zero Cross Mute Mode 
 Enable Ramp 
		
		  FIXME !!
		  use scale-downed Digital Volume
		  as Volume Ramp
		  7F FFFF -> 3FF
 Initialize operation 
 General Information 
 Volume Ramp Parameter 
 Digital Volume Function Parameter 
 cancel operation 
 Disable DVC Register access 
 Zero Cross Mute Function 
 Volume Ramp Function 
 add DVC_VRWTR here 
 Digital Volume Function Parameter 
 Enable DVC Register access 
 Volume 
 Mute 
 Ramp 
 This driver doesn't support Gen1 at this point 
 not used is not error 
 SPDX-License-Identifier: GPL-2.0
 Renesas R-Car Gen1 SRUSSI support
 Copyright (C) 2013 Renesas Solutions Corp.
 Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
  #define DEBUG
  you can also add below in
  ${LINUX}driversbaseregmapregmap.c
  for regmap debug
  #define LOG_DEVICE "xxxx.rcar_sound"
 RSND_BASE_MAX base 
 RSND_REG_MAX base 
 single address mapping 
 multi address mapping 
 		basic function
 RSND_BASE_MAX base 
 RSND_REG_MAX base 
 		Gen2
 FIXME: it needs SSI_MODE23 in the future 
 		Gen1
 		Gen
 SPDX-License-Identifier: GPL-2.0
 mix.c
 Copyright (c) 2015 Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
 		    CTUn	MIXn
 		    +------+	+------+
  [SRC3  SRC6] -> |CTU n0| ->	[MIX n0| ->
  [SRC4  SRC9] -> |CTU n1| ->	[MIX n1| ->
  [SRC0  SRC1] -> |CTU n2| ->	[MIX n2| ->
  [SRC2  SRC5] -> |CTU n3| ->	[MIX n3| ->
 		    +------+	+------+
  ex)
 	DAI0 : playback = <&src0 &ctu02 &mix0 &dvc0 &ssi0>;
 	DAI1 : playback = <&src2 &ctu03 &mix0 &dvc0 &ssi0>;
  MIX Volume
 	amixer set "MIX",0  100%   DAI0 Volume
 	amixer set "MIX",1  100%   DAI1 Volume
  Volume Ramp
 	amixer set "MIX Ramp Up Rate"   "0.125 dB1 step"
 	amixer set "MIX Ramp Down Rate" "4 dB1 step"
 	amixer set "MIX Ramp" on
 	aplay xxx.wav &
 	amixer set "MIX",0  80%   DAI0 Volume Down
 	amixer set "MIX",1 100%   DAI1 Volume Up
 MDBAR 
 MDBBR 
 MDBCR 
 MDBDR 
 Ramp Enable 
 Ramp Rate Up 
 Ramp Rate Down 
 General Information 
 volume step 
 common volume parameter 
 Disable MIX dB setting 
 common volume parameter 
 Enable MIX dB setting 
 MDBAR 
 MDBBR 
 MDBCR 
 MDBDR 
 Volume 
 Ramp 
 This driver doesn't support Gen1 at this point 
 not used is not error 
 SPDX-License-Identifier: GPL-2.0
 Renesas R-Car Audio DMAC support
 Copyright (C) 2015 Renesas Electronics Corp.
 Copyright (c) 2015 Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
  Audio DMAC peri peri register
 PDMACHCR 
 for DEBUG 
 		Audio DMAC
	
	  DMAEngine release uses mutex lock.
	  Thus, it shouldn't be called under spinlock.
	  Let's call it under prepare
 maybe suspended 
	
	  DMAEngine request uses mutex lock.
	  Thus, it shouldn't be called under spinlock.
	  Let's call it under prepare
	
	  in case of monaural data writing or reading through Audio-DMAC
	  data is always in Left Justified format, so both src and dst
	  DMA Bus width need to be set equal to physical data width.
 It should call of_node_put(), since, it is rsnd_xxx_of_node() 
 try to get DMAEngine channel 
 Let's follow when -EPROBE_DEFER case 
		
		  DMA failed. try to PIO mode
		  see
		 	rsnd_ssi_fallback()
		 	rsnd_rdai_continuance_probe()
	
	  use it for IPMMU if needed
	  see
	 	rsnd_preallocate_pages()
 		Audio DMAC peri peri
 SSI00 ~ SSI07 
 SSI10 ~ SSI17 
 SSI20 ~ SSI27 
 SSI30 ~ SSI37 
 SSI40 ~ SSI47 
 SSI5 
 SSI6 
 SSI7 
 SSI8 
 SSI90 ~ SSI97 
 SCU_SRCI0 
 SCU_SRCI1 
 SCU_SRCI2 
 SCU_SRCI3 
 SCU_SRCI4 
 SCU_SRCI5 
 SCU_SRCI6 
 SCU_SRCI7 
 SCU_SRCI8 
 SCU_SRCI9 
 SCU_CMD0 
 SCU_CMD1 
 use non-prohibited SRS number as error 
 SSI00 
 		Common DMAC Interface
 	DMA readwrite register offset
 	RSND_xxx_I_N	for Audio DMAC input
 	RSND_xxx_O_N	for Audio DMAC output
 	RSND_xxx_I_P	for Audio DMAC peri peri input
 	RSND_xxx_O_P	for Audio DMAC peri peri output
 	ex) R-Car H2 case
 	      mod         DMAC in     DMAC out    DMAC PP in  DMAC pp out
 	SSI : 0xec541000  0xec241008  0xec24100c
 	SSIU: 0xec541000  0xec100000  0xec100000  0xec400000  0xec400000
 	SCU : 0xec500000  0xec000000  0xec004000  0xec300000  0xec304000
 	CMD : 0xec500000              0xec008000                0xec308000
 SRC 
 Capture 
 Playback 
 SSI 
 Capture 
 Playback 
 SSIU 
 Capture 
 Playback 
	
	  FIXME
	 
	  We can't support SSI9-4567, because its address is
	  out of calculation rule
 it shouldn't happen 
 use SSIU or SSI ? 
	
	  gen1 uses default DMA addr
 +Memory 
	
	  It should use "rcar_sound,ssiu" on DT.
	  But, we need to keep compatibility for old version.
	 
	  If it has "rcar_sound.ssiu", it will be used.
	  If not, "rcar_sound.ssi" will be used.
	  see
	 	rsnd_ssiu_dma_req()
	 	rsnd_ssi_dma_req()
 use SSIU 
 keep compatible, use SSI 
	
	  [S] --> [E]
	  [S] --> SRC -o-> [E]
	  [S] --> SRC -> DVC -o-> [E]
	  [S] --> SRC -> CTU -> MIX -> DVC -o-> [E]
	 
	  playback	[S] = mem
	 		[E] = SSI
	 
	  capture	[S] = SSI
	 		[E] = mem
	 
	  -->		Audio DMAC
	  -o->		Audio DMAC peri peri
	
	 		| SSI | SRC |
	  -------------+-----+-----+
	   is_play	|  o  |    |
	  !is_play	|    |  o  |
	
	  DMA failed. try to PIO mode
	  see
	 	rsnd_ssi_fallback()
	 	rsnd_rdai_continuance_probe()
 for Gen2 or later 
 for Gen1, overwrite 
	
	  for Gen1
	
	  for Gen2 or later
 it will be PIO mode 
 dummy mem mod for debug 
 SPDX-License-Identifier: GPL-2.0
 Renesas R-Car SSIU support
 Copyright (c) 2015 Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
 for BUSIF0 - BUSIF7 
 SSI_MODE 
 	SSI	Gen2		Gen3
 	0	BUSIF0-3	BUSIF0-7
 	1	BUSIF0-3	BUSIF0-7
 	2	BUSIF0-3	BUSIF0-7
 	3	BUSIF0		BUSIF0-7
 	4	BUSIF0		BUSIF0-7
 	5	BUSIF0		BUSIF0
 	6	BUSIF0		BUSIF0
 	7	BUSIF0		BUSIF0
 	8	BUSIF0		BUSIF0
 	9	BUSIF0-3	BUSIF0-7
 	total	22		52
 enable busif buffer overunder run interrupt. 
 clear status 
	
	  SSI_MODE0
	
	  SSI_MODE1  SSI_MODE2
	 
	  FIXME
	  sharingmulti with SSI0 are mainly supported
		
		  Multi SSI
		 
		  set synchronized bit here
 SSI4 is synchronized with SSI3 
 SSI012 are synchronized 
 SSI0129 are synchronized 
 SSI1 is sharing pin with SSI0 
 SSI2 is sharing pin with SSI0 
 SSI4 is sharing pin with SSI3 
 SSI9 is sharing pin with SSI0 
	
	  Enable busif buffer overunder run interrupt.
	  It will be handled from ssi.c
	  see
	 	__rsnd_ssi_interrupt()
 disable busif buffer overunder run interrupt. 
	
	  TDM ExtendSplit Mode
	  see
	 	rsnd_ssi_config_init()
 output all same SSI as default 
 see rsnd_ssiu_probe() 
 see rsnd_ssiu_probe() 
	
	  It should use "rcar_sound,ssiu" on DT.
	  But, we need to keep compatibility for old version.
	 
	  If it has "rcar_sound.ssiu", it will be used.
	  If not, "rcar_sound.ssi" will be used.
	  see
	 	rsnd_ssi_dma_req()
	 	rsnd_dma_of_path()
 select BUSIF0 
 use rcar_sound,ssiu if exist 
 Keep DT compatibility 
	
	  Keep DT compatibility.
	  if it has "rcar_sound,ssiu", use it.
	  if not, use "rcar_sound,ssi"
	  see
	 	rsnd_ssiu_bufsif_to_id()
 Keep compatibility 
			
			  see
			 	rsnd_ssiu_get_id()
			 	rsnd_ssiu_get_id_sub()
 SPDX-License-Identifier: GPL-2.0
 Renesas R-Car CMD support
 Copyright (C) 2015 Renesas Solutions Corp.
 Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
		
		  it is assuming that integrater is well understanding about
		  data path. Here doesn't check impossible connection,
		  like src2 + src5
 This driver doesn't support Gen1 at this point 
 same number as DVC 
 SPDX-License-Identifier: GPL-2.0
 Copyright (c) 2021 Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
	> mount -t debugfs none syskerneldebug
	> cd syskerneldebugasocrcar-soundec500000.soundrdai{N}
	> cat playbackxxx
	> cat capturexxx
 adg is out of mods 
 Gen1 is not supported 
		
		  created debugfs will be automatically
		  removed, nothing to do for _remove.
		  see
		 	soc_cleanup_component_debugfs()
 CONFIG_DEBUG_FS 
 SPDX-License-Identifier: GPL-2.0
 Helper routines for R-Car sound ADG.
  Copyright (C) 2013  Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
 RBGA 
 RBGB 
 0000: CLKA 
 0001: CLKB 
 0010: CLKC 
 0011: RBGA 
 0100: RBGB 
 fixme 
			
			  step of 0_0000  0_0001  0_1101
			  are out of order
 default = SSI WS 
	
	  SSI 8 is not connected to ADG.
	  it works with SSI 7
	
	  find suitable clock from
	  AUDIO_CLKAAUDIO_CLKBAUDIO_CLKCAUDIO_CLKI.
	
	  find divided clock from BRGABRGB
			
			  We shouldn't use clk_get_rate() under
			  atomic context. Let's keep it when
			  rsnd_adg_clk_enable() was called
 default 16 
 default 16 
	
	  ADG supports BRRABRRB output only
	  this means all clkout0123 will be same rate
	
	  This driver is assuming that AUDIO_CLKAAUDIO_CLKBAUDIO_CLKC
	  have 44.1kHz or 48kHz base clocks for now.
	 
	  SSI itself can divide parent clock by 11 - 116
	  see
	 	rsnd_adg_ssi_clk_try_start()
	 	rsnd_ssi_master_clk_start()
 not used 
 RBGA 
 RBGB 
	
	  ADG supports BRRABRRB output only.
	  this means all clkout0123 will be  same rate
	
	  for clkout
	
	  for clkout0123
	
	  Actual CLKOUT will be exchanged in rsnd_adg_ssi_clk_try_start()
	  by BRGCKR::BRGCKR_31
 It should be called after rsnd_adg_clk_disable() 
 SPDX-License-Identifier: GPL-2.0
 Renesas R-Car SRUSCUSSIUSSI support
 Copyright (C) 2013 Renesas Solutions Corp.
 Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
 Based on fsi.c
 Kuninori Morimoto <morimoto.kuninori@renesas.com>
  Renesas R-Car sound device structure
  Gen1
  SRU		: Sound Routing Unit
   - SRC	: Sampling Rate Converter
   - CMD
     - CTU	: Channel Count Conversion Unit
     - MIX	: Mixer
     - DVC	: Digital Volume and Mute Function
   - SSI	: Serial Sound Interface
  Gen2
  SCU		: Sampling Rate Converter Unit
   - SRC	: Sampling Rate Converter
   - CMD
    - CTU	: Channel Count Conversion Unit
    - MIX	: Mixer
    - DVC	: Digital Volume and Mute Function
  SSIU		: Serial Sound Interface Unit
   - SSI	: Serial Sound Interface
 	driver data Image
  rsnd_priv
    |
    |  this depends on Gen1Gen2
    |
    +- gen
    |
    |  these depend on data path
    |  gen and platform data control it
    |
    +- rdai[0]
    |   |		 sru     ssiu      ssi
    |   +- playback -> [mod] -> [mod] -> [mod] -> ...
    |   |
    |   |		 sru     ssiu      ssi
    |   +- capture  -> [mod] -> [mod] -> [mod] -> ...
    |
    +- rdai[1]
    |   |		 sru     ssiu      ssi
    |   +- playback -> [mod] -> [mod] -> [mod] -> ...
    |   |
    |   |		 sru     ssiu      ssi
    |   +- capture  -> [mod] -> [mod] -> [mod] -> ...
    ...
    |
    |  these control ssi
    |
    +- ssi
    |  |
    |  +- ssi[0]
    |  +- ssi[1]
    |  +- ssi[2]
    |  ...
    |
    |  these control src
    |
    +- src
       |
       +- src[0]
       +- src[1]
       +- src[2]
       ...
  for_each_rsnd_dai(xx, priv, xx)
   rdai[0] => rdai[1] => rdai[2] => ...
  for_each_rsnd_mod(xx, rdai, xx)
   [mod] => [mod] => [mod] => ...
  rsnd_dai_call(xxx, fn )
   [mod]->fn() -> [mod]->fn() -> [mod]->fn()...
 Special Handling 
 	rsnd_mod functions
	
	  Let's use same char to avoid pointlessness memory
	  Thus, rsnd_mod_name() should be used immediately
	  Don't keep pointer
 see rsnd_dai_stream_initquit() 
	
	  params will be added when refine
	  see
	 	__rsnd_soc_hw_rule_rate()
	 	__rsnd_soc_hw_rule_channels()
		
		  !! Note !!
		 
		  converted_chan will be used for CTU,
		  or TDM Split mode.
		  User shouldn't use CTU with TDM Split mode.
 TDM Extend Mode needs 8ch 
 Use Multi SSI 
 	ADINR function
 	DALIGN function
	
	  Hardware LR and Software LR are inverted for 16bit data.
	 	    31..16 15...0
	 	HW: [L ch] [R ch]
	 	SW: [R ch] [L ch]
	  We need to care about inversion timing to control
	  PlaybackCapture correctly.
	  The point is [DVC] needs Hardware LR, [MEM] needs Software LR
	 
	  sLR : software LR
	  hLR : hardware LR
	  ()  : conversion timing
	 
	  Playback
	 	     sLR () hLR     hLR     hLR      hLR     hLR
	 	[MEM] -> [SRC] -> [DVC] -> [CMD] -> [SSIU] -> [SSI] -> codec
	 
	  Capture
	 	     hLR     hLR      hLR     hLR     hLR () sLR
	 	codec -> [SSI] -> [SSIU] -> [SRC] -> [DVC] -> [CMD] -> [MEM]
 Target mod needs inverted DALIGN when 16bit 
	
	  This is needed for 24bit data
	  We need to shift 8bit
	 
	  Linux 24bit data is located as 0x00
	  HW    24bit data is located as 0x00
	 
 shift to Left 
 8bit 
 shift to Right 
 8bit 
 	rsnd_dai functions
 CAPTURE 
 PLAYBACK 
 no status update 
 underflow case 
 	rsnd_soc_dai functions
	
	  this function should be called...
	 
	  - if rsnd_dai_pointer_update() returns true
	  - without spin lock
 set clock master for audio interface 
 cpu is master 
 set format 
 set clock inversion 
 use default 
 TDM Split Mode 
 TDM Extend Mode 
	
	  possible sampling rate limitation is same as
	  2ch if it supports multi ssi
	  and same as 8ch if TDM 6ch (see rsnd_ssi_config_init())
	
	  possible sampling rate limitation is same as
	  2ch if it supports multi ssi
	  and same as 8ch if TDM 6ch (see rsnd_ssi_config_init())
	
	  Channel Limitation
	  It depends on Platform design
	
	  Sampling Rate  Channel Limitation
	  It depends on Clock Master Mode
	
	  call rsnd_dai_call without spinlock
	
	  1st Priority
	 
	  Well tested formats.
	  Select below from Sound Card, not auto
	 	SND_SOC_DAIFMT_CBC_CFC
	 	SND_SOC_DAIFMT_CBP_CFP
	
	  2nd Priority
	 
	  Supported, but not well tested
	
	  This driver assumes that it is TDM Split mode
	  if it includes ssiu node
 HDMI0 
 HDMI1 
	
	  rsnd is assuming each device nodes are sequential numbering,
	  but some of them are not.
	  This function adjusts index for it.
	 
	  ex)
	  Normal case,		special case
	 	ssi-0
	 	ssi-1
	 	ssi-2
	 	ssi-3		ssi-3
	 	ssi-4		ssi-4
	 	...
	 
	  assume Max 64 node
	
	  parse both previous dai (= rcar_sound,dai), and
	  graph dai (= portsport)
	
	  use Audio-DMAC dev if we can use IPMMU
	  see
	 	rsnd_dmaen_attach()
 default 2ch 
 default 1lane 
 default 32bit width 
 should have symmetric_rate if pin sharing 
	
	  parse all dai
 		pcm ops
	
	  rsnd assumes that it might be used under DPCM if user want to use
	  channel  rate convert. Then, rsnd should be FE.
	  And then, this function will be called after BE settings.
	  this means, each BE already has fixuped hw_params.
	  see
	 	dpcm_fe_dai_hw_params()
	 	dpcm_be_dai_hw_params()
			
			  SRC supports convert rates from params_rate(hw_params)k_down
			  to params_rate(hw_params)k_up, where k_up is always 6, and
			  k_down depends on number of channels and SRC unit.
			  So all SRC units can upsample audio up to 6 times regardless
			  its number of channels. And all SRC units can downsample
			  2 channel audio up to 6 times too.
			
			  SRC0 can downsample 4, 6 and 8 channel audio up to 4 times.
			  SRC1, SRC3 and SRC4 can downsample 4 channel audio
			  up to 4 times.
			  SRC1, SRC3 and SRC4 can downsample 6 and 8 channel audio
			  no more than twice.
 Other SRC units do not support more than 2 channels 
			
			  TBD: Max SRC input and output rates also depend on number
			  of channels and SRC unit:
			  SRC1, SRC3 and SRC4 do not support more than 128kHz
			  for 6 channel and 96kHz for 8 channel audio.
			  Perhaps this function should return EINVAL if the input or
			  the output rate exceeds the limitation.
 		snd_kcontrol
 00000 
 00001 
 00010 
 00011 
 00100 
 00101 
 00110 
 00111 
 01000 
 01001 
 01010 = VOLUME_RAMP_MAX_MIX 
 01011 
 01100 
 01101 
 01110 
 01111 
 10000 
 10001 
 10010 
 10011 
 10100 
 10101 
 10110 
 10111 = VOLUME_RAMP_MAX_DVC 
	
	  1) Avoid duplicate register for DVC with MIX case
	  2) Allow duplicate register for MIX
	  3) re-register if card was rebinded
 		snd_soc_component
		
		  Fallback to PIO mode
		
		  call "remove" for SSISRCDVC
		  SSI will be switch to PIO mode if it was DMA mode
		  see
		 	rsnd_dma_init()
		 	rsnd_ssi_fallback()
		
		  remove all mod from io
		  and, re connect ssi
		
		  fallback
		
		  retry to "probe".
		  DAI has SSI which is PIO mode only now.
 	rsnd probe
	
	 	init priv data
	
	 	init each module
	
	 	asoc register
	
	  adg is very special mod which can't use rsnd_dai_call(remove),
	  and it registers ADG clock on probe.
	  It should be unregister if probe failed.
	  Mainly it is assuming -EPROBE_DEFER case
 SPDX-License-Identifier: GPL-2.0
 Renesas R-Car SRC support
 Copyright (C) 2013 Renesas Solutions Corp.
 Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
  You can use Synchronous Sampling Rate Convert (if no DVC)
 	amixer set "SRC Out Rate" on
 	aplay xxx.wav &
 	amixer set "SRC Out Rate" 96000  convert rate to 96000Hz
 	amixer set "SRC Out Rate" 22050  convert rate to 22050Hz
  you can enable below define if you don't need
  SSI interrupt status debug message when debugging
  see rsnd_print_irq_status()
  #define RSND_DEBUG_NO_IRQ_STATUS 1
 SCU_SYSTEM_STATUS01 
 sync convert enable 
 sync convert 
 		image of SRC (Sampling Rate Converter)
  96kHz   <-> +-----+	48kHz	+-----+	 48kHz	+-------+
  48kHz   <-> | SRC | <------>	| SSI |	<----->	| codec |
  44.1kHz <-> +-----+		+-----+		+-------+
  ...
	
	  Playback
	  runtime_rate -> [SRC] -> convert_rate
	 
	  Capture
	  convert_rate -> [SRC] -> runtime_rate
	
	  return convert rate if SRC is used,
	  otherwise, return runtime->rate as usual
 6 - 16 
 6 - 14 
 6 - 13 
 6 - 12 
 6 - 23 
 6 - 1   
 6 - 16 
 6 - 14 
 6 - 13 
 6 - 12 
 6 - 23 
 6 - 1   
 6 - 16 
 6 - 14 
 6 - 13 
 6 - 12 
 6 - 23 
 6 - 1   
 1 to 2 
 1 to 8 
 1 to 8 
 1 to 8 
 1 to 8 
 1 to 8 
 1 to 2 
 1 to 4 
 1 to 4 
 1 to 8 
 1 to 8 
 1 to 8 
 1 to 2 
 1 to 2 
 1 to 2 
 1 to 2 
 1 to 2 
 1 to 2 
 6 - 16 are very enough ratio for SRC_BSDSR 
	
	  SRC_ADINR
	
	  SRC_IFSCR  SRC_IFSVR
	
	  SRC_SRCCR  SRC_ROUTE_MODE0
	
	  SRC_BSDSR  SRC_BSISR
	 
	  see
	 	Combination of Register Setting Related to
	 	FSOFSI Ratio and Channel, Latency
	
	  E3 need to overwrite
 BUSIF_MODE 
 initialize 
 cancel initialize 
	
	  IRQ is not supported on non-DT
	  see
	 	rsnd_src_probe_()
	
	  WORKAROUND
	 
	  ignore over flow error when rsnd_src_sync_is_enabled()
	
	  WORKAROUND
	 
	  ignore over flow error when rsnd_src_sync_is_enabled()
	
	  WORKAROUND
	 
	  Enable SRC output if you want to use sync convert together with DVC
 reset sync convert_rate 
 reset sync convert_rate 
 ignore all cases if not working 
		
		  IRQ is not supported on non-DT
		  see
		 	rsnd_src_irq()
	
	  enable SRC sync convert if possible
	
	  It can't use SRC Synchronous convert
	  when Capture if it uses CMD
	
	  enable sync convert
 This driver doesn't support Gen1 at this point 
 not used is not error 
 SPDX-License-Identifier: GPL-2.0
 ctu.c
 Copyright (c) 2015 Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
  User needs to setup CTU by amixer, and its settings are
  based on below registers
  CTUn_CPMDR : amixser set "CTU Pass"
  CTUn_SV0xR : amixser set "CTU SV0"
  CTUn_SV1xR : amixser set "CTU SV1"
  CTUn_SV2xR : amixser set "CTU SV2"
  CTUn_SV3xR : amixser set "CTU SV3"
  [CTU Pass]
  0000: default
  0001: Connect input data of channel 0
  0010: Connect input data of channel 1
  0011: Connect input data of channel 2
  0100: Connect input data of channel 3
  0101: Connect input data of channel 4
  0110: Connect input data of channel 5
  0111: Connect input data of channel 6
  1000: Connect input data of channel 7
  1001: Connect calculated data by scale values of matrix row 0
  1010: Connect calculated data by scale values of matrix row 1
  1011: Connect calculated data by scale values of matrix row 2
  1100: Connect calculated data by scale values of matrix row 3
  [CTU SVx]
  [Output0] = [SV00, SV01, SV02, SV03, SV04, SV05, SV06, SV07]
  [Output1] = [SV10, SV11, SV12, SV13, SV14, SV15, SV16, SV17]
  [Output2] = [SV20, SV21, SV22, SV23, SV24, SV25, SV26, SV27]
  [Output3] = [SV30, SV31, SV32, SV33, SV34, SV35, SV36, SV37]
  [Output4] = [ 0,   0,    0,    0,    0,    0,    0,    0   ]
  [Output5] = [ 0,   0,    0,    0,    0,    0,    0,    0   ]
  [Output6] = [ 0,   0,    0,    0,    0,    0,    0,    0   ]
  [Output7] = [ 0,   0,    0,    0,    0,    0,    0,    0   ]
  [SVxx]
  Plus					Minus
  value	time		dB	value		time		dB
  -----------------------------------------------------------------------
  H'7F_FFFF	2		6	H'80_0000	2		6
  ...
  H'40_0000	1		0	H'C0_0000	1		0
  ...
  H'00_0001	2.38 x 10^-7	-132
  H'00_0000	0		Mute	H'FF_FFFF	2.38 x 10^-7	-132
  Ex) Input ch -> Output ch
 	1ch     ->  0ch
 	0ch     ->  1ch
 	amixer set "CTU Reset" on
 	amixer set "CTU Pass" 9,10
 	amixer set "CTU SV0" 0,4194304
 	amixer set "CTU SV1" 4194304,0
  or
 	amixer set "CTU Reset" on
 	amixer set "CTU Pass" 2,1
 CTU Pass 
 ROW0 
 ROW1 
 ROW2 
 ROW3 
 Reset 
	
	  ctu00: -> 0, ctu01: -> 0, ctu02: -> 0, ctu03: -> 0
	  ctu10: -> 1, ctu11: -> 1, ctu12: -> 1, ctu13: -> 1
	
	  ctu00: -> 0, ctu01: -> 1, ctu02: -> 2, ctu03: -> 3
	  ctu10: -> 0, ctu11: -> 1, ctu12: -> 2, ctu13: -> 3
 This driver doesn't support Gen1 at this point 
 not used is not error 
		
		  CTU00, CTU01, CTU02, CTU03 => CTU0
		  CTU10, CTU11, CTU12, CTU13 => CTU1
 SPDX-License-Identifier: GPL-2.0
 Renesas R-Car SSIUSSI support
 Copyright (C) 2013 Renesas Solutions Corp.
 Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
 Based on fsi.c
 Kuninori Morimoto <morimoto.kuninori@renesas.com>
  you can enable below define if you don't need
  SSI interrupt status debug message when debugging
  see rsnd_print_irq_status()
  #define RSND_DEBUG_NO_IRQ_STATUS 1
  SSICR
 Fixed 
 DMA Enable 
 Underflow Interrupt Enable 
 Overflow Interrupt Enable 
 Idle Mode Interrupt Enable 
 Data Interrupt Enable 
 Channels 
 Channels 
 Channels 
 Data Word Length mask 
 Data Word Length 
 Data Word Length 
 Data Word Length 
 Data Word Length 
 Data Word Length 
 Data Word Length 
 Data Word Length 
  System word length
 RW System Word Length 
 RW System Word Length 
 RW System Word Length 
 Serial Bit Clock Direction 
 Serial WS Direction 
 Serial Bit Clock Polarity 
 Serial WS Polarity 
 Serial Data Alignment 
 Parallel Data Alignment 
 Serial Data Delay 
 Serial Clock Division Ratio 
 TransmitReceive Mode Select 
 SSI Module Enable 
  SSISR
 Underflow Error Interrupt Status 
 Overflow Error Interrupt Status 
 Idle Mode Interrupt Status 
 Data Interrupt Status Flag 
  SSIWSR
 WS Continue Function 
 WS Mode 
 for PIO 
 flags 
 SSI+DMA without BUSIF 
		
		  It will set SSIWSR.CONT here, but SSICR.CKDV = 000
		  with it is not allowed. (SSIWSR.WS_MODE with
		  SSICR.CKDV = 000 is not allowed either).
		  Skip it. See SSICR.CKDV
	
	  SSI clock will be output contiguously
	  by below settings.
	  This means, rsnd_ssi_master_clk_start()
	  and rsnd_ssi_register_setup() are necessary
	  for SSI parent
	 
	  SSICR  : FORCE, SCKD, SWSD
	  SSIWSR : CONT
	
	  TDM Mode
	  see
	 	rsnd_ssiu_init_gen2()
	
	  We shouldn't exchange SWSP after running.
	  This means, parent needs to care it.
		
		  The SWL and DWL bits in SSICR should be fixed at 32-bit
		  setting when TDM split mode.
		  see datasheet
		 	Operation :: TDM Format Split Function (TDM Split Mode)
 overunder run 
 DMA : enable DMA 
 PIO : enable Data interrupt 
 	SSI mod common functions
 clear error status 
	
	  EN will be set via SSIU :: SSI_CONTROL
	  if Multi channel mode
	
	  EN is for data output.
	  SSI parent EN is not needed.
	
	  disable all IRQ,
	  Playback: Wait all data was sent
	  Capture:  It might not receave data. Do nothing
	 In multi-SSI mode, stop is performed by setting ssi0129 in
	  SSI_CONTROL to 0 (in rsnd_ssio_stop_gen2). Do nothing here.
	
	  disable SSI,
	  and, wait idle state
 disabled all 
 ignore all cases if not working 
 PIO only 
 DMA only 
	
	  SSIP (= SSI parent) needs to be special, otherwise,
	  2nd SSI might doesn't start. see also rsnd_mod_call()
	 
	  We can't include parent SSI status on SSI, because we don't know
	  how many SSI requests parent SSI. Thus, it is localed on "io" now.
	  ex) trouble case
	 	Playback: SSI0
	 	Capture : SSI1 (needs SSI0)
	 
	  1) start Capture  ->	SSI0SSI1 are started.
	  2) start Playback ->	SSI0 doesn't work, because it is already
	 			marked as "started" on 1)
	 
	  OTOH, using each mod's status is good for MUX case.
	  It doesn't need to start in 2nd start
	  ex)
	 	IO-0: SRC0 -> CTU1 -+-> MUX -> DVC -> SSIU -> SSI0
	 			    |
	 	IO-1: SRC1 -> CTU2 -+
	 
	  1) start IO-0 ->	start SSI0
	  2) start IO-1 ->	SSI0 doesn't need to start, because it is
	 			already started on 1)
 		SSI PIO
	
	  rsnd_rdai_is_clk_master() will be enabled after set_fmt,
	  and, pcm_new will be called after it.
	  This function reuse pcm_new at this point.
	
	  SSIPSSIUIRQ are not needed on
	  SSI Multi secondaries
	
	  It can't judge ssi parent at this point
	  see rsnd_ssi_pcm_new()
	
	  SSI might be called again as PIO fallback
	  It is easy to manual handling for IRQ requestfree
	 
	  OTOH, this function might be called many times if platform is
	  using MIX. It needs xxx_attach() many times on xxx_probe().
	  Because of it, we can't control .probe.remove calling count by
	  mod->status.
	  But it don't need to call request_irq() many times.
	  Let's control it by RSND_SSI_PROBED flag.
 Do nothing if non SSI (= SSI parent, multi SSI) mod 
 PIO will request IRQ again 
 	SSI PIO functions
	
	  81632 data can be assesse to TDRRDR register
	  directly as 32bit data
	  see rsnd_ssi_init()
	
	  SSIPSSIUIRQDMA are not needed on
	  SSI Multi secondaries
 SSI probe might be called many times in MUX multi path 
	
	  fallback to PIO
	 
	  SSI .probe might be called again.
	  see
	 	rsnd_rdai_continuance_probe()
	
	  It should use "rcar_sound,ssiu" on DT.
	  But, we need to keep compatibility for old version.
	 
	  If it has "rcar_sound.ssiu", it will be used.
	  If not, "rcar_sound.ssi" will be used.
	  see
	 	rsnd_ssiu_dma_req()
	 	rsnd_dma_of_path()
 		ssi mod function
 try SSI -> SSIM1 -> SSIM2 -> SSIM3 
 SPDX-License-Identifier: GPL-2.0-or-later
  SoC audio for HTC Magician
  Copyright (c) 2006 Philipp Zabel <philipp.zabel@gmail.com>
  based on spitz.c,
  Authors: Liam Girdwood <lrg@slimlogic.co.uk>
           Richard Purdie <richard@openedhand.com>
 check the jack status at stream startup 
  Magician uses SSP port for playback.
 set codec DAI configuration 
 set cpu DAI configuration 
 set audio clock as clock source 
  Magician uses I2S for capture.
 set codec DAI configuration 
 set cpu DAI configuration 
 set the I2S system clock as output 
 magician machine dapm widgets 
 magician machine audio_map 
 Headphone connected to VOUTL, VOUTR 
 Speaker connected to VOUTL, VOUTR 
 Mics are connected to VINM 
 magician digital audio interface glue - connects codec <--> CPU 
 magician audio machine driver 
  FIXME: move into magician board file once merged into the pxa tree
 SPDX-License-Identifier: GPL-2.0-or-later
  tosa.c  --  SoC audio for Tosa
  Copyright 2005 Wolfson Microelectronics PLC.
  Copyright 2005 Openedhand Ltd.
  Authors: Liam Girdwood <lrg@slimlogic.co.uk>
           Richard Purdie <richard@openedhand.com>
  GPIO's
   1 - Jack Insertion
   5 - Hookswitch (headset answerhang up switch)
 set up jack connection 
 check the jack status at stream startup 
 tosa dapm event handlers 
 tosa machine dapm widgets 
 tosa audio map 
 headphone connected to HPOUTL, HPOUTR 
 ext speaker connected to LOUT2, ROUT2 
 internal mic is connected to mic1, mic2 differential - with bias 
 headset is connected to HPOUTR, and LINEINR with bias 
 Module information 
 SPDX-License-Identifier: GPL-2.0-or-later
  linuxsoundsocpxammp-pcm.c
  Copyright (C) 2011 Marvell International Ltd.
 SPDX-License-Identifier: GPL-2.0-only
  e740-wm9705.c  --  SoC audio for e740
  Copyright 2007 (c) Ian Molton <spyro@f2s.com>
 Module information 
 SPDX-License-Identifier: GPL-2.0-or-later
  poodle.c  --  SoC audio for Poodle
  Copyright 2005 Wolfson Microelectronics PLC.
  Copyright 2005 Openedhand Ltd.
  Authors: Liam Girdwood <lrg@slimlogic.co.uk>
           Richard Purdie <richard@openedhand.com>
 audio clock in Hz - rounded from 12.235MHz 
 set up jack connection 
 set = unmute headphone 
 set the endpoints to their new connection states 
 signal a DAPM event 
 check the jack status at stream startup 
 we need to unmute the HP at shutdown as the mute burns power on poodle 
 set = unmute headphone 
 set the codec system clock for DAC and ADC 
 set the I2S system clock as input (unused) 
 poodle machine dapm widgets 
 Corgi machine connections to the codec pins 
 headphone connected to LHPOUT1, RHPOUT1 
 speaker connected to LOUT, ROUT 
 poodle digital audio interface glue - connects codec <--> CPU 
 poodle audio machine driver 
 should we mute HP at startup - burning power ?
 Module information 
 SPDX-License-Identifier: GPL-2.0-or-later
  zylonite.c  --  SoC audio for Zylonite
  Copyright 2008 Wolfson Microelectronics PLC.
  Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
  There is a physical switch SW15 on the board which changes the MCLK
  for the WM9713 between the standard AC97 master clock and the
  output of the CLK_POUT signal from the PXA.
 Currently supported audio map 
 Headphone output connected to HPLHPR 
 On-board earpiece 
 Headphone mic 
 On-board mic 
 Multiactor differentially connected over SPKLSPKR 
	 Only support ratios that we can generate neatly from the AC97
	  based master clock - in particular, this excludes 44.1kHz.
	  In most applications the voice DAC will be used for telephony
	  data so multiples of 8kHz will be the common case.
 Don't support OSS emulation 
 SPDX-License-Identifier: GPL-2.0-or-later
  pxa2xx-i2s.c  --  ALSA Soc Audio Layer
  Copyright 2005 Wolfson Microelectronics PLC.
  Author: Liam Girdwood
          lrg@slimlogic.co.uk
  I2S Controller Register and Bit Definitions
 Global Control Register 
 Serial Audio I 2 SMSB-Justified Control Register 
 Serial Audio I 2 SMSB-Justified Interface and FIFO Status Register 
 Serial Audio Interrupt Mask Register 
 Serial Audio Interrupt Clear Register 
 Audio Clock Divider Register. 
 Serial Audio Data Register (TX and RX FIFO access Register). 
 Rx FIFO Interrupt or DMA Trigger Threshold 
 Tx FIFO Interrupt or DMA Trigger Threshold 
 FIFO Select for EFWR Special Function 
 Enable EFWR Function  
 FIFO, i2s Register Reset 
 Bit Clock Direction 
 Enable I2S Link 
 Enable Loopback 
 Disable Replaying Function 
 Disable Recording Function 
 Specify Alternate Mode 
 Controller Status 
 Rx FIFO Overrun 
 Tx FIFO Underrun 
 Rx FIFO Service Request 
 Tx FIFO Service Request 
 I2S Busy 
 Rx FIFO Not Empty 
 Tx FIFO Not Empty 
 Clear Rx FIFO Overrun Interrupt 
 Clear Tx FIFO Underrun Interrupt 
 Enable Rx FIFO Overrun Condition Interrupt 
 Enable Tx FIFO Underrun Condition Interrupt 
 Enable Rx FIFO Service Interrupt 
 Enable Tx FIFO Service Interrupt 
 wait for I2S controller to be ready 
 flush the Rx FIFO 
 interface format 
 is port used by another stream 
 not in manual and possibly slightly inaccurate 
 store registers 
 deactivate link 
	
	  PXA Developer's Manual:
	  If SACR0[ENB] is toggled in the middle of a normal operation,
	  the SACR0[RST] bit must also be set and cleared to reset all
	  I2S controller registers.
 Make sure RPL and REC are disabled 
 Along with FIFO servicing 
 Module information 
 SPDX-License-Identifier: GPL-2.0-only
  linuxsoundarmpxa2xx-pcm.c -- ALSA PCM interface for the Intel PXA2xx chip
  Author:	Nicolas Pitre
  Created:	Nov 30, 2004
  Copyright:	(C) 2004 MontaVista Software, Inc.
 SPDX-License-Identifier: GPL-2.0-only
  e800-wm9712.c  --  SoC audio for e800
  Copyright 2007 (c) Ian Molton <spyro@f2s.com>
 Module information 
 SPDX-License-Identifier: GPL-2.0-only
  linuxsoundsocpxaz2.c
  SoC Audio driver for Aeronix Zipit Z2
  Copyright (C) 2009 Ken McGuire <kenm@desertweyr.com>
  Copyright (C) 2010 Marek Vasut <marek.vasut@gmail.com>
 set the codec system clock for DAC and ADC 
 set the I2S system clock as input (unused) 
 Headset jack detection DAPM pins 
 Headset jack detection gpios 
 z2 machine dapm widgets 
 headset is a mic and mono headphone 
 Z2 machine audio_map 
 headphone connected to LOUT1, ROUT1 
 ext speaker connected to LOUT2, ROUT2  
 mic is connected to R input 2 - with bias 
  Logic for a wm8750 as connected on a Z2 Device
 Jack detection API stuff 
 z2 digital audio interface glue - connects codec <--> CPU 
 z2 audio machine driver 
 SPDX-License-Identifier: GPL-2.0-or-later
  spitz.c  --  SoC audio for Sharp SL-Cxx00 models Spitz, Borzoi and Akita
  Copyright 2005 Wolfson Microelectronics PLC.
  Copyright 2005 Openedhand Ltd.
  Authors: Liam Girdwood <lrg@slimlogic.co.uk>
           Richard Purdie <richard@openedhand.com>
 audio clock in Hz - rounded from 12.235MHz 
 set up jack connection 
 enable and unmute hp jack, disable mic bias 
 enable mic jack and bias, mute hp 
 enable line jack, disable mic bias and mute hp 
 enable and unmute headset jack enable mic bias, mute L hp 
 jack removed, everything off 
 check the jack status at stream startup 
 set the codec system clock for DAC and ADC 
 set the I2S system clock as input (unused) 
 spitz machine dapm widgets 
 headset is a mic and mono headphone 
 Spitz machine audio_map 
 headphone connected to LOUT1, ROUT1 
 headset connected to ROUT1 and LINPUT1 with bias (def below) 
 ext speaker connected to LOUT2, ROUT2  
 mic is connected to input 1 - with bias 
 line is connected to input 1 - no bias 
 spitz digital audio interface glue - connects codec <--> CPU 
 spitz audio machine driver 
 SPDX-License-Identifier: GPL-2.0-or-later
  SoC audio for HP iPAQ hx4700
  Copyright (c) 2009 Philipp Zabel
 Headphones jack detection DAPM pin 
 disable speaker when hp jack is inserted 
 Headphones jack detection GPIO 
  iPAQ hx4700 uses I2S for capture and playback.
 set the I2S system clock as output 
	 inform codec driver about clock freq 
 hx4700 machine dapm widgets 
 hx4700 machine audio_map 
 Headphone connected to LOUT, ROUT 
 Speaker connected to MOUT2 
 Microphone connected to MICIN 
  Logic for a ak4641 as connected on a HP iPAQ hx4700
 Jack detection API stuff 
 hx4700 digital audio interface glue - connects codec <--> CPU 
 hx4700 audio machine driver 
 SPDX-License-Identifier: GPL-2.0-or-later
  SoC audio driver for EM-X270, eXeda and CM-X300
  Copyright 2007, 2009 CompuLab, Ltd.
  Author: Mike Rapoport <mike@compulab.co.il>
  Copied from tosa.c:
  Copyright 2005 Wolfson Microelectronics PLC.
  Copyright 2005 Openedhand Ltd.
  Authors: Liam Girdwood <lrg@slimlogic.co.uk>
           Richard Purdie <richard@openedhand.com>
 Module information 
 SPDX-License-Identifier: GPL-2.0-only
  e750-wm9705.c  --  SoC audio for e750
  Copyright 2007 (c) Ian Molton <spyro@f2s.com>
 use ops to check startup state 
 Module information 
 SPDX-License-Identifier: GPL-2.0-or-later
  pxa-ssp.c  --  ALSA Soc Audio Layer
  Copyright 2005,2008 Wolfson Microelectronics PLC.
  Author: Liam Girdwood
          Mark Brown <broonie@opensource.wolfsonmicro.com>
  TODO:
   o Test network mode for > 16bit sample size
  SSP audio private data
  ssp_set_clkdiv - set SSP clock divider
  @div: serial clock rate divider
 2..512 
 1..4096 
  Set the SSP ports SYSCLK.
		
		  For DT based boards, if an extclk is given, use it
		  here and configure PXA_SSP_CLK_EXT.
 Internal PLL is fixed 
	 The SSP clock must be disabled when changing SSP clock mode
  Configure the PLL frequency pxa27x and (afaik - pxa320 only)
 Disable 
		 PXA3xx has a clock ditherer which can be used to generate
		  a wider range of frequencies - calculate a value for it.
  Set the active slots in TDMNetwork mode
 set slot width 
 enable network mode 
 set number of active slots 
 set active slot mask 
  Tristate the SSP DAI lines
 Settings will be applied in hw_params() 
  Set up the SSP DAI format.
  The SSP Port must be inactive before calling this function as the
  physical interface format is changed.
 check if we need to change anything at all 
 reset port settings 
 See hw_params() 
	 Since we are configuring the timings for the format by hand
	  we have to defer some things until hw_params() where we
	  know parameters like the sample size.
  Set the SSP audio DMA parameters and sample size.
  Can be called multiple times by oss emulation.
	 Network mode with one active slot (ttsa == 1) can be used
	  to force 16-bit frame width on the wire (for S16_LE), even
	  with two channels. Use 16-bit DMA transfers for this case.
 we can only change the settings if the port is not in use 
 clear selected SSP bits 
 bit size 
		
		  If we were able to generate the bclk directly,
		  all is fine. Otherwise, look up the closest rate
		  from the table and also set the dividers.
 The values in the table are for 16 bits 
		
		  For setups with external clocking, the PLL and its diviers
		  are not active. Instead, the SCR bits in SSCR0 can be used
		  to divide the clock.
			 This is a special case where the bitclk is 64fs
			  and we're not dealing with 232 bits of audio
			  samples.
			 
			  The SSP values used for that are all found out by
			  trying and failing a lot; some of the registers
			  needed for that mode are only available on PXA3xx.
			 The frame width is the width the LRCLK is
			  asserted for; the delay is expressed in
			  half cycle units.  We need the extra cycle
			  because the data starts clocking out one BCLK
			  after LRCLK changes polarity.
	 When we use a network mode, we always require TDM slots
	  - complain loudly and fail if they've not been set up yet.
 Module information 
 SPDX-License-Identifier: GPL-2.0-or-later
  linuxsoundsocpxabrownstone.c
  Copyright (C) 2011 Marvell International Ltd.
 set wm8994 sysclk 
 machine stream operations 
 audio machine driver 
 SPDX-License-Identifier: GPL-2.0-only
  Handles the Mitac mioa701 SoC system
  Copyright (C) 2008 Robert Jarzmik
  This is a little schema of the sound interconnections :
     Sagem X200                 Wolfson WM9713
     +--------+             +-------------------+      Rear Speaker
     |        |             |                   |           -+
     |        +--->----->---+MONOIN         SPKL+--->----+-+  |
     |  GSM   |             |                   |        | |  |
     |        +--->----->---+PCBEEP         SPKR+--->----+-+  |
     |  CHIP  |             |                   |           \-+
     |        +---<-----<---+MONO               |
     |        |             |                   |      Front Speaker
     +--------+             |                   |           -+
                            |                HPL+--->----+-+  |
                            |                   |        | |  |
                            |               OUT3+--->----+-+  |
                            |                   |           \-+
                            |                   |
                            |                   |     Front Micro
                            |                   |         +
                            |               MIC1+-----<--+o+
                            |                   |         +
                            +-------------------+        ---
 Use GPIO8 for rear speaker amplifier 
 mioa701 machine dapm widgets 
 Call Mic 
 Headset Mic 
 GSM Module 
 headphone connected to HPL, HPR 
 front speaker connected to HPL, OUT3 
 rear speaker connected to SPKL, SPKR 
 Prepare GPIO8 for rear speaker amplifier 
 Prepare MIC input 
 Module information 
 SPDX-License-Identifier: GPL-2.0-or-later
  corgi.c  --  SoC audio for Corgi
  Copyright 2005 Wolfson Microelectronics PLC.
  Copyright 2005 Openedhand Ltd.
  Authors: Liam Girdwood <lrg@slimlogic.co.uk>
           Richard Purdie <richard@openedhand.com>
 audio clock in Hz - rounded from 12.235MHz 
 set up jack connection 
 set = unmute headphone 
 reset = mute headphone 
 signal a DAPM event 
 check the jack status at stream startup 
 we need to unmute the HP at shutdown as the mute burns power on corgi 
 set = unmute headphone 
 set the codec system clock for DAC and ADC 
 set the I2S system clock as input (unused) 
 corgi machine dapm widgets 
 Corgi machine audio map (connections to the codec pins) 
 headset Jack  - in = micin, out = LHPOUT
 headphone connected to LHPOUT1, RHPOUT1 
 speaker connected to LOUT, ROUT 
 mic is connected to MICIN (via right channel of headphone jack) 
 Same as the above but no mic bias for line signals 
 corgi digital audio interface glue - connects codec <--> CPU 
 corgi audio machine driver 
 Module information 
 SPDX-License-Identifier: GPL-2.0-only
 set the I2S system clock as input (unused) 
 SPDX-License-Identifier: GPL-2.0-only
  linuxsoundpxa2xx-ac97.c -- AC97 support for the Intel PXA2xx chip.
  Author:	Nicolas Pitre
  Created:	Dec 02, 2004
  Copyright:	MontaVista Software Inc.
  There is only 1 physical AC97 interface for pxa2xx, but it
  has extra fifo's that can be used for aux DACs and ADCs.
	 Punt most of the init to the SoC probe; we may need the machine
	  driver to do interesting things with the clocking to get us up
	  and running.
 SPDX-License-Identifier: GPL-2.0-only
  linuxsoundsocpxapalm27x.c
  SoC Audio driver for Palm T|X, T5 and LifeDrive
  based on tosa.c
  Copyright (C) 2008 Marek Vasut <marek.vasut@gmail.com>
 Headphones jack detection DAPM pins 
 Headphones jack detection gpios 
 gpio is set on per-platform basis 
 Palm27x machine dapm widgets 
 PalmTX audio map 
 headphone connected to HPOUTL, HPOUTR 
 ext speaker connected to ROUT2, LOUT2 
 mic connected to MIC1 
 Jack detection API stuff 
 Module information 
 SPDX-License-Identifier: GPL-2.0-or-later
  linuxsoundsocpxattc_dkb.c
  Copyright (C) 2012 Marvell International Ltd.
 ttc machine dapm widgets 
 ttc machine audio map 
 Headset jack detection 
 headphone, microphone detection & headset short detection 
 ttctd-dkb digital audio interface glue - connects codec <--> CPU 
 ttctd audio machine driver 
 Module information 
 SPDX-License-Identifier: GPL-2.0-or-later
  linuxsoundsocpxammp-sspa.c
  Base on pxa2xx-ssp.c
  Copyright (C) 2011 Marvell International Ltd.
  SSPA audio private data
  Set the SSP ports SYSCLK.
 not support yet 
  Set up the sspa dai format.
 reset port settings 
	 Since we are configuring the timings for the format by hand
	  we have to defer some things until hw_params() where we
	  know parameters like the sample size.
  Set the SSPA audio DMA parameters and sample size.
  Can be called multiple times by oss emulation.
		
		  whatever playback or capture, must enable rx.
		  this is a hw issue, so need check if rx has been
		  enabled or not; if has been enabled by another
		  stream, do not enable again.
 have no capture stream, disable rx port 
 we can only change the settings if the port is not in use 
	
	  FIXME: hw issue, for the tx serial port,
	  can not config the masterslave mode;
	  so must clean this bit.
	  The masterslave mode has been set in the
	  rx port.
 You know, these addresses are actually ignored. 
 SPDX-License-Identifier: GPL-2.0-only
  Xtfpga I2S controller driver
  Copyright (c) 2014 Cadence Design Systems Inc.
  I2S controller operation:
  Enabling TX: output 1 period of zeros (starting with left channel)
  and then queued data.
  Level status and interrupt: whenever FIFO level is below FIFO trigger,
  level status is 1 and an IRQ is asserted (if enabled).
  Underrun status and interrupt: whenever FIFO is empty, underrun status
  is 1 and an IRQ is asserted (if enabled).
	 current playback substream. NULL if not playing.
	 
	  Access to that field is synchronized between the interrupt handler
	  and userspace through RCU.
	 
	  Interrupt handler (threaded part) does PIO on substream data in RCU
	  read-side critical section. Trigger callback sets and clears the
	  pointer when the playback is started and stopped with
	  rcu_assign_pointer. When userspace is about to free the playback
	  stream in the pcm_close callback it synchronizes with the interrupt
	  handler by means of synchronize_rcu call.
 next frame index in the sample buffer 
	 current fifo level estimate.
	  Doesn't have to be perfectly accurate, but must be not less than
	  the actual FIFO level in order to avoid stall on push attempt.
 FIFO level at which level interrupt occurs 
 maximal FIFO level 
 Generate functions that do PIO from TX DMA area to FIFO for all supported
  stream formats.
  Functions will be called xtfpga_pcm_tx_<channels>x<sample bits>, e.g.
  xtfpga_pcm_tx_2x16 for 16-bit stereo.
  FIFO consists of 32-bit words, one word per channel, always 2 channels.
  If I2S interface is configured with smaller sample resolution, only
  the LSB of each word is used.
		 After the push the level IRQ is still asserted,
		  means FIFO level is below tx_fifo_low. Estimate
		  it as tx_fifo_low.
	 Update FIFO level estimate in accordance with interrupt status
	  register.
		 The FIFO isn't empty, but is below tx_fifo_low. Estimate
		  it as tx_fifo_low.
	 Refill FIFO, update allowed IRQ reasons, enable IRQ if FIFO is
	  not empty.
	 ratio field of the config register controls MCLK->I2S clock
	  derivation: I2S clock = MCLK  (2  (ratio + 2)).
	 
	  So with MCLK = 256  sample rate ratio is 0 for 32 bit stereo
	  and 2 for 16 bit stereo.
 period_size  2: FIFO always gets 2 samples per frame 
 PCM 
 SPDX-License-Identifier: GPL-2.0
 dmaengine.c - Samsung dmaengine wrapper
 Author: Mark Brown <broonie@linaro.org>
 Copyright 2013 Linaro
 SPDX-License-Identifier: GPL-2.0
 Copyright (C) 2017 Samsung Electronics Co., Ltd.
 Spinlock protecting fields below 
	
	   We add 2 to the rclk_freq value in order to avoid too low clock
	   frequency values due to the EPLL output frequency not being exact
	   multiple of the audio sampling rate.
 DAPM routes for backward compatibility with old DTS 
 Primary FE <-> BE link 
 BE <-> CODECs link 
 Secondary FE <-> BE link 
	
	  For backwards compatibility create the secondary CPU DAI link only
	  if there are 2 CPU DAI entries in the cpu sound-dai property in DT.
	  Also add required DAPM routes not available in old DTS.
 Set capture capability only for boards with the MAX98090 CODEC 
 SPDX-License-Identifier: GPL-2.0+
 h1940_uda1380.c - ALSA SoC Audio Layer
 Copyright (c) 2010 Arnaud Patard <arnaud.patard@rtp-net.org>
 Copyright (c) 2010 Vasily Khoruzhick <anarsoul@gmail.com>
 Based on version from Arnaud Patard <arnaud.patard@rtp-net.org>
 select clock source 
 set MCLK division for sample rate 
 set BCLK division for sample rate 
 set prescaler division for sample rate 
 h1940 machine dapm widgets 
 h1940 machine audio_map 
 headphone connected to VOUTLHP, VOUTRHP 
 ext speaker connected to VOUTL, VOUTR  
 mic is connected to VINM 
 s3c24xx digital audio interface glue - connects codec <--> CPU 
 Module information 
 SPDX-License-Identifier: GPL-2.0+
 Copyright (c) 2014, Insignal Co., Ltd.
  Author: Claude <claude@insginal.co.kr>
 Ensure AIF1CLK is >= 3 MHz for optimal performance 
	
	  We add 1 to the frequency value to ensure proper EPLL setting
	  for each audio sampling rate (see epll_24mhz_tbl in driversclk
	  samsungclk-exynos5250.c for list of available EPLL rates).
	  The CODEC uses clk API and the value will be rounded hence the MCLK1
	  clock's frequency will still be exact multiple of the sample rate.
 SPDX-License-Identifier: GPL-2.0
 ASoC machine driver for Snow boards
 In the multi-codec case codec_dais 0 is MAX98095 and 1 is HDMI. 
 Set the MCLK rate for the codec 
 Try new DT bindings with HDMI support first. 
 Update card-name if provided through DT, else use default name 
 SPDX-License-Identifier: GPL-2.0+
 s3c24xx-i2s.c  --  ALSA Soc Audio Layer
 (c) 2006 Wolfson Microelectronics PLC.
 Graeme Gregory graeme.gregory@wolfsonmicro.com or linux@wolfsonmicro.com
 Copyright 2004-2005 Simtec Electronics
	http:
	Ben Dooks <ben@simtec.co.uk>
		 note, we have to disable the FIFOs otherwise bad things
		  seem to happen when the DMA stops. According to the
		  Samsung supplied kernel, this should allow the DMA
		  engine and FIFOs to reset. If this isn't allowed, the
		  DMA engine will simply freeze randomly.
		 note, we have to disable the FIFOs otherwise bad things
		  seem to happen when the DMA stops. According to the
		  Samsung supplied kernel, this should allow the DMA
		  engine and FIFOs to reset. If this isn't allowed, the
		  DMA engine will simply freeze randomly.
  Wait for the LR signal to allow synchronisation to the LR clock
  from the codec. May only be needed for slave mode.
 5ms 
  Check whether CPU is the master or slave
  Set S3C24xx I2S DAI format
 Working copies of register 
  Set S3C24xx Clock source
  Set S3C24xx Clock dividers
  To avoid duplicating clock code, allow machine driver to
  get the clockrate from here.
 Module information 
 SPDX-License-Identifier: GPL-2.0+
 Tobermory audio support
 Copyright 2011 Wolfson Microelectronics
 Headset jack detection DAPM pins 
 SPDX-License-Identifier: GPL-2.0+
 Speyside audio support
 Copyright 2011 Wolfson Microelectronics
 Headset jack detection DAPM pins 
 Default the headphone selection to active high 
 Re-run DAPM to make sure we're using the correct mic bias 
 At any time the WM9081 is active it will have this clock 
 SPDX-License-Identifier: GPL-2.0
 Copyright 2007,2008 Simtec Electronics
 Based on soundsocpxaspitz.c
	Copyright 2005 Wolfson Microelectronics PLC.
	Copyright 2005 Openedhand Ltd.
 set the codec system clock for DAC and ADC 
 jive audio machine driver 
 SPDX-License-Identifier: GPL-2.0+
 rx1950.c - ALSA SoC Audio Layer
 Copyright (c) 2010 Vasily Khoruzhick <anarsoul@gmail.com>
 Based on smdk2440.c and magician.c
 Authors: Graeme Gregory graeme.gregory@wolfsonmicro.com
          Philipp Zabel <philipp.zabel@gmail.com>
          Denis Grigoriev <dgreenday@gmail.com>
          Vasily Khoruzhick <anarsoul@gmail.com>
 s3c24xx digital audio interface glue - connects codec <--> CPU 
 rx1950 machine dapm widgets 
 rx1950 machine audio_map 
 headphone connected to VOUTLHP, VOUTRHP 
 ext speaker connected to VOUTL, VOUTR  
 mic is connected to VINM 
 select clock source 
 set MCLK division for sample rate 
 set BCLK division for sample rate 
 set prescaler division for sample rate 
 configure some gpios 
 Module information 
 SPDX-License-Identifier: GPL-2.0+
 ALSA Soc Audio Layer - I2S core for newer Samsung SoCs.
 Copyright (c) 2006 Wolfson Microelectronics PLC.
	Graeme Gregory graeme.gregory@wolfsonmicro.com
	linux@wolfsonmicro.com
 Copyright (c) 2008, 2007, 2004-2005 Simtec Electronics
	http:
	Ben Dooks <ben@simtec.co.uk>
 Turn on or off the transmission path. 
 do nothing, we are in the right mode 
		 Note, we do not have any indication that the FIFO problems
		  tha the S3C24102440 had apply here, so we should be able
		  to disable the DMA and TX without resetting the FIFOS.
 do nothing, we are in the right mode 
 See txctrl notes on FIFOs. 
  Wait for the LR signal to allow synchronisation to the LR clock
  from the codec. May only be needed for slave mode.
  Set S3C2412 I2S DAI format
 Working copies of register 
 Sample size 
 Error if controller doesn't have the CDCLKCON bit 
 On start, ensure that the FIFOs are cleared and reset. 
 clear again, just in case 
  Set S3C2412 Clock dividers
 default table of all avaialable root fs divisors 
 record our i2s structure for later use in the callbacks 
	 Mark ourselves as in TXRX mode so we can run through our cleanup
 Allow overriding by (for example) IISv4 
 SPDX-License-Identifier: GPL-2.0+
 neo1973_wm8753.c - SoC audio for Openmoko Neo1973 and Freerunner devices
 Copyright 2007 Openmoko Inc
 Author: Graeme Gregory <graeme@openmoko.org>
 Copyright 2007 Wolfson Microelectronics PLC.
 Author: Graeme Gregory
         graeme.gregory@wolfsonmicro.com or linux@wolfsonmicro.com
 Copyright 2009 Wolfson Microelectronics
 set the codec system clock for DAC and ADC 
 set MCLK division for sample rate 
 set codec BCLK division for sample rate 
 set prescaler division for sample rate 
 codec PLL input is PCLK4 
 disable the PLL 
  Neo1973 WM8753 HiFi DAI opserations.
 2.048 MHz 
 set the codec system clock for DAC and ADC 
 set codec PCM division for sample rate 
 configure and enable PLL for 12.288MHz output 
 disable the PLL 
 Connections to the GSM Module 
 Connections to Headset 
 Call Mic 
 Connect the ALC pins 
 Connections to the amp 
 Call Speaker 
 set endpoints to default off mode 
 allow audio paths from the GSM modem to run during suspend 
 Hifi Playback - for similatious use with voice below 
 Voice via BT 
 Module information 
 SPDX-License-Identifier: GPL-2.0+
 Copyright (c) 2009 Samsung Electronics Co. Ltd
 Author: Jaswinder Singh <jassisinghbrar@gmail.com>
  Default CFG switch settings to use this driver:
    SMDK6410: Set CFG1 1-3 Off, CFG2 1-4 On
 SMDK has a 12MHZ crystal attached to WM8580 
	 The Fvco for WM8580 PLLs must fall within [90,100]MHz.
	  This criterion can't be met if we request PLL output
	  as {8000x256, 64000x256, 11025x256}Hz.
	  As a wayout, we rather change rfs to a minimum value that
	  results in (params_rate(params)  rfs), and itself, acceptable
	  to both - the CODEC and the CPU.
 Set WM8580 to drive MCLK from its PLLA 
  SMDK WM8580 DAI operations.
 SMDK Playback widgets 
 SMDK-PAIFTX connections 
 MicIn feeds AINL 
 LineIn feeds AINLR 
 Front LeftRight are fed VOUT1LR 
 CenterSub are fed VOUT2LR 
 Rear LeftRight are fed VOUT3LR 
	 Enabling the microphone requires the fitting of a 0R
	  resistor to connect the line from the microphone jack.
 Primary Playback if 
 Primary Capture if 
 SPDX-License-Identifier: GPL-2.0
 Copyright 2009 Simtec Electronics
  speaker_gain_get - read the speaker gain setting.
  @kcontrol: The control for the speaker gain.
  @ucontrol: The value that needs to be updated.
  Read the value for the AMP gain control.
  speaker_gain_set - set the value of the speaker amp gain
  @value: The value to write.
  speaker_gain_put - set the speaker gain setting.
  @kcontrol: The control for the speaker gain.
  @ucontrol: The value that needs to be set.
  Set the value of the speaker gain from the specified
  @ucontrol setting.
  Note, if the speaker amp is muted, then we do not set a gain value
  as at-least one of the ICs that is fitted will try and power up even
  if the main control is set to off.
  spk_unmute_state - set the unmute state of the speaker
  @to: zero to unmute, non-zero to ununmute.
 if we're umuting, also re-set the gain 
  speaker_unmute_get - read the speaker unmute setting.
  @kcontrol: The control for the speaker gain.
  @ucontrol: The value that needs to be updated.
  Read the value for the AMP gain control.
  speaker_unmute_put - set the speaker unmute setting.
  @kcontrol: The control for the speaker gain.
  @ucontrol: The value that needs to be set.
  Set the value of the speaker gain from the specified
  @ucontrol setting.
 This is added as a manual control as the speaker amps create clicks
  when their power state is changed, which are far more noticeable than
  anything produced by the CODEC itself.
  simtec_hw_params - update hardware parameters
  @substream: The audio substream instance.
  @params: The parameters requested.
  Update the codec data routing and configuration  settings
  from the supplied data.
	 call any board supplied startup code, this currently only
	  covers the bastvr1000 which have a CPLD in the way of the
  attach_gpio_amp - get and configure the necessary gpios
  @dev: The device we're probing.
  @pd: The platform data supplied by the board.
  If there is a GPIO based amplifier attached to the board, claim
  the necessary GPIO lines for it, and set default values.
 attach gpio amp gain (if any) 
 note, currently we assume GPA0 isn't valid amp 
 set the amp off at startup 
 SPDX-License-Identifier: GPL-2.0
 ALSA SoC Audio Layer - S3C PCM-Controller driver
 Copyright (c) 2009 Samsung Electronics Co. Ltd
 Author: Jaswinder Singh <jassisinghbrar@gmail.com>
 based upon I2S drivers by Ben Dooks.
Register Offsets 
 PCM_CTL Bit-Fields 
 PCM_CLKCTL Bit-Fields 
 PCM_TXFIFO Bit-Fields 
 PCM_RXFIFO Bit-Fields 
 PCM_IRQCTL Bit-Fields 
 PCM_IRQSTAT Bit-Fields 
 PCM_FIFOSTAT Bit-Fields 
  struct s3c_pcm_info - S3C PCM Controller information
  @lock: Spin lock
  @dev: The parent device passed to use from the probe.
  @regs: The pointer to the device register block.
  @sclk_per_fs: number of sclk per frame sync
  @idleclk: Whether to keep PCMSCLK enabled even when idle (no active xfer)
  @pclk: the PCLK_PCM (pcm) clock pointer
  @cclk: the SCLK_AUDIO (audio-bus) clock pointer
  @dma_playback: DMA information for playback channel.
  @dma_capture: DMA information for capture channel.
 Whether to keep PCMSCLK enabled even when idle(no active xfer) 
 Strictly check for sample size 
 Get hold of the PCMSOURCE_CLK 
 Set the SCLK divider 
 Set the SYNC divider 
 Nothing to do, IB_NF by default 
 Nothing to do, Master by default 
 Check for valid device index 
 Default is 128fs 
 record our pcm structure for later use in the callbacks 
 Module information 
 SPDX-License-Identifier: GPL-2.0
 ALSA SoC Audio Layer - Samsung I2S Controller driver
 Copyright (c) 2010 Samsung Electronics Co. Ltd.
	Jaswinder Singh <jassisinghbrar@gmail.com>
 Platform device for this DAI 
 Frame clock 
	
	  Specifically requested RCLK, BCLK by machine driver.
	  0 indicates CPU driver is free to choose any value.
 Pointer to the Primary_Fifo if this is Sec_Fifo, NULL otherwise 
 Pointer to the Secondary_Fifo if it has one, NULL otherwise 
 DAI is opened 
 DAI is the manager 
 Driver for this DAI 
 DMA parameters 
 Lock for cross interface checks 
 CPU DAIs and their corresponding drivers 
 The I2S controller's core clock 
 Clock for generating I2S signals 
 Rate of RCLK source clock 
 Cache of selected I2S registers for system suspend 
 The clock provider's data 
 Spinlock protecting member fields below 
 Memory mapped SFR region 
 A flag indicating the I2S slave mode operation 
 Returns true if this is the 'overlay' stereo DAI 
 If this interface of the controller is transmitting data 
 Return pointer to the other DAI 
 If the other interface of the controller is transmitting data 
 If any interface of the controller is transmitting data 
 If this interface of the controller is receiving data 
 If the other interface of the controller is receiving data 
 If any interface of the controller is receiving data 
 If the other DAI is transmitting or receiving data 
 If this DAI is transmitting or receiving data 
 If the controller is active anyway 
 Read RCLK of I2S (in multiples of LRCLK) 
 Write RCLK of I2S (in multiples of LRCLK) 
 Read bit-clock of I2S (in multiples of LRCLK) 
 Write bit-clock of I2S (in multiples of LRCLK) 
 Non-TDM I2S controllers do not support BCLK > 48  FS 
 Sample size 
 TX channel control 
 RX Channel Control 
 Flush FIFO of an interface 
 Flush the FIFO 
 Be patient 
 1 usec 
 Shouldn't matter in GATING(CLOCK_IN) mode 
 clock corrsponding to IISMOD[10] := 0 
 clock corrsponding to IISMOD[10] := 1 
 Call can't be on the active DAI 
 Format is priority 
	
	  INV flag is relative to the FORMAT flag - if set it simply
	  flips the polarity specified by the Standard
		
		  Set default source clock in Master mode, only when the
		  CLK_I2S_RCLK_SRC clock is not exposed so we ensure any
		  clock configuration assigned in DT is not overwritten.
	
	  Don't change the I2S mode if any controller is active on this
	  channel.
 We set constraints on the substream according to the version of I2S 
 Reset any constraint on RFS and BFS 
 Select least possible multiple(2) if no constraint set 
 If already setup and running 
 Don't bother with PSR in Slave mode 
 If this is probe on the secondary DAI 
 Reset any constraint on RFS and BFS 
 Gate CDCLK by default 
 Backend DAI  
 Playback Mixer 
 Initialize capture only for the primary DAI 
 CONFIG_PM 
 Register the clock provider only if it's expected in the DTB 
 Get the RCLKSRC mux clock parent clock names 
 Activate the prescaler 
 Create platform device for the secondary PCM 
 Nothing to do if it is the secondary device probe 
 The secondary device has no driver data assigned 
 Module information 
 SPDX-License-Identifier: GPL-2.0+
 USB dock 
 Headset jack 
 Temporarily enable micbias and earpath selector 
 failed to read ADC, so assume headphone 
 Disable earpath selector when no mic connected 
 Filter out keypresses when 4 pole jack not detected 
	
	  We have an odd setup - the SPKMODE pin is pulled up so
	  we only have access to the left side SPK configs,
	  but SPKOUTR isn't bridged so when playing back in
	  stereo, we only get the left hand channel.  The only
	  option we're left with is to force the AIF into mono
	  mode.
 This must be last as it is conditionally not used 
 AIF1CLK should be >=3MHz for optimal performance 
 Switch sysclk to MCLK1 
 Stop PLL 
  Main DAI operations
 Set the codec FLL 
 Set the codec system clock 
 sentinel  },
 Remove FM widget if not present 
 Update card-name if provided through DT, else use default name 
 Set CPU and platform of_node for main DAI 
 Set CPU of_node for BT DAI 
 SPDX-License-Identifier: GPL-2.0
 Modifications by Christian Pellegrin <chripell@evolware.org>
 s3c24xx_uda134x.c - S3C24XX_UDA134X ALSA SoC Audio board driver
 Copyright 2007 Dension Audio Systems Ltd.
 Author: Zoltan Devai
 #define ENFORCE_RATES 1 
  Unfortunately the S3C24XX in master mode has a limited capacity of
  generating the clock for the codec. If you define this only rates
  that are really available will be enforced. But be careful, most
  user level application just want the usual sampling frequencies (8,
  11.025, 22.050, 44.1 kHz) and anyway resampling is a costly
  operation for embedded systems. So if you aren't very lucky or your
  hardware engineer wasn't very forward-looking it's better to leave
  this undefined. If you do so an approximate value for the requested
  sampling rate in the range -+ 5% will be chosen. If this in not
  possible an error will be returned.
 set the codec system clock for DAC and ADC 
 SPDX-License-Identifier: GPL-2.0+
 Copyright (C) 2015 - 2016 Samsung Electronics Co., Ltd.
 Authors: Inha Song <ideal.song@samsung.com>
          Sylwester Nawrocki <s.nawrocki@samsung.com>
  The source clock is XCLKOUT with its mux set to the external fixed rate
  oscillator (XXTI).
 Highest possible SYSCLK frequency: 147.456MHz 
 Highest possible SYSCLK frequency: 135.4752 MHz 
 Highest possible ASYNCCLK frequency: 49.152MHz 
 Highest possible ASYNCCLK frequency: 45.1584 MHz 
 disable FLL2 
 Set the MAX98504 VI sense PDM Tx DAI channel mapping 
 Skip the HDMI link if not specified in DT 
 Initialize WM5110 - I2S and HDMI - I2S1 DAI links 
 WM5110 
 HDMI 
 HDMI DAI link (I2S1) 
 SPDX-License-Identifier: GPL-2.0+
 Lowland audio support
 Copyright 2011 Wolfson Microelectronics
 Headset jack detection DAPM pins 
 Clock OPCLK, used by the other audio components. 
 At any time the WM9081 is active it will have this clock 
 SPDX-License-Identifier: GPL-2.0+
 Copyright (c) 2011 Samsung Electronics Co., Ltd
		http:
  Board Settings:
   o '1' means 'ON'
   o '0' means 'OFF'
   o 'X' means 'Don't care'
  SMDKC210, SMDKV310: CFG3- 1001, CFG5-1000, CFG7-111111
  Configure audio route as :-
  $ amixer sset 'DAC1' on,on
  $ amixer sset 'Right Headphone Mux' 'DAC'
  $ amixer sset 'Left Headphone Mux' 'DAC'
  $ amixer sset 'DAC1R Mixer AIF1.1' on
  $ amixer sset 'DAC1L Mixer AIF1.1' on
  $ amixer sset 'IN2L' on
  $ amixer sset 'IN2L PGA IN2LN' on
  $ amixer sset 'MIXINL IN2L' on
  $ amixer sset 'AIF1ADC1L Mixer ADCDMIC' on
  $ amixer sset 'IN2R' on
  $ amixer sset 'IN2R PGA IN2RN' on
  $ amixer sset 'MIXINR IN2R' on
  $ amixer sset 'AIF1ADC1R Mixer ADCDMIC' on
 SMDK has a 16.9344MHZ crystal attached to WM8994 
 Set PCM source clock on CPU 
 Set SCLK_DIV for making bclk 
 SPDX-License-Identifier: GPL-2.0+
 Copyright 2010 Maurus Cuelenaere <mcuelenaere@gmail.com>
 Based on smdk6410_wm8987.c
     Copyright 2007 Wolfson Microelectronics PLC. - linux@wolfsonmicro.com
     Graeme Gregory - graeme.gregory@wolfsonmicro.com
  WM8987 is register compatible with WM8750, so using that as base driver.
 Use PCLK for I2S signal generation 
 Gate the RCLK output on PAD 
 set the codec system clock for DAC and ADC 
  SmartQ WM8987 HiFi DAI operations.
 Disable speaker when headphone is plugged in 
 set endpoints to not connected 
 Headphone jack detection 
 Initialise GPIOs used by amplifiers 
 Module information 
 SPDX-License-Identifier: GPL-2.0+
   Default CFG switch settings to use this driver:
  	SMDKV310: CFG5-1000, CFG7-111111
   Configure audio route as :-
   $ amixer sset 'DAC1' on,on
   $ amixer sset 'Right Headphone Mux' 'DAC'
   $ amixer sset 'Left Headphone Mux' 'DAC'
   $ amixer sset 'DAC1R Mixer AIF1.1' on
   $ amixer sset 'DAC1L Mixer AIF1.1' on
   $ amixer sset 'IN2L' on
   $ amixer sset 'IN2L PGA IN2LN' on
   $ amixer sset 'MIXINL IN2L' on
   $ amixer sset 'AIF1ADC1L Mixer ADCDMIC' on
   $ amixer sset 'IN2R' on
   $ amixer sset 'IN2R PGA IN2RN' on
   $ amixer sset 'MIXINR IN2R' on
   $ amixer sset 'AIF1ADC1R Mixer ADCDMIC' on
 SMDK has a 16.934MHZ crystal attached to WM8994 
 Default SMDKs 
 AIF1CLK should be >=3MHz for optimal performance 
  SMDK WM8994 DAI operations.
 Other pins NC 
 Primary DAI if 
 Sec_Fifo Playback if 
 SPDX-License-Identifier: GPL-2.0+
 Littlemill audio support
 Copyright 2011 Wolfson Microelectronics
		
		  If we've not already clocked things via hw_params()
		  then do so now, otherwise these are noops.
 Default for AMICBIAS jumper 
 Default for DMICBIAS jumper 
 This will check device compatibility itself 
 As will this 
 SPDX-License-Identifier: GPL-2.0
 Copyright 2009 Simtec Electronics
 Headphone connected to HP{L,R}OUT and HP{L,R}COM 
 ZV connected to Line1 
 Line In connected to Line2 
 Microphone connected to MIC3R and MIC_BIAS 
 GSM connected to MONO_LOUT and MIC3L (in) 
	 Speaker is connected to LINEOUT{LN,LP,RN,RP}, however we are
	  not using the DAPM to power it up and down as there it makes
  simtec_hermes_init - initialise and add controls
  @codec; The codec instance to attach to.
  Attach our controls and configure the necessary codec
  mappings for our sound card instance.
 simtec audio machine driver 
 SPDX-License-Identifier: GPL-2.0+
 Midas audio support
 Copyright (C) 2018 Simon Shields <simon@lineageos.org>
 Copyright (C) 2020 Samsung Electronics Co., Ltd.
  The MCLK1 clock source is XCLKOUT with its mux set to the external fixed rate
  oscillator (XXTI).
	
	  If no new rate is requested, set FLL1 to a sane default for jack
	  detection.
 while reconfiguring, switch to MCLK2 for SYSCLK 
 AIF1CLK should be at least 3MHz for "optimal performance" 
  We only have a single external speaker, so mix stereo data
  to a single mono stream.
 FIXME: toggle MAX77693 on i9300i9305 
 Use MCLK2 as SYSCLK for boot 
 SPDX-License-Identifier: GPL-2.0+
 ALSA Soc Audio Layer - S3C2412 I2S driver
 Copyright (c) 2006 Wolfson Microelectronics PLC.
	Graeme Gregory graeme.gregory@wolfsonmicro.com
	linux@wolfsonmicro.com
 Copyright (c) 2007, 2004-2005 Simtec Electronics
	http:
	Ben Dooks <ben@simtec.co.uk>
 Set MPLL as the source for IIS CLK 
 some basic suspend checks 
 Module information 
 SPDX-License-Identifier: GPL-2.0+
 Bells audio support
 Copyright 2012 Wolfson Microelectronics
 BCLK2 is fixed at this currently 
  Expect a 24.576MHz crystal if one is fitted (the driver will function
  if this is not fitted).
 SPDX-License-Identifier: GPL-2.0+
 idma.c - I2S0 internal DMA driver
 Copyright (c) 2011 Samsung Electronics Co., Ltd.
		http:
 Internal DMA Level0 Interrupt Address 
 Start address0 of I2S internal DMA operation. 
	
	  Transfer block size for I2S internal DMA.
	  Should decide transfer size before start dma operation
 flush the DMA channel 
 From snd_pcm_lib_mmap_iomem 
 Assign PCM buffer pointers 
 SPDX-License-Identifier: GPL-2.0
 ALSA SoC Audio Layer - Samsung SPDIF Controller driver
 Copyright (c) 2010 Samsung Electronics Co. Ltd
		http:
 Registers 
  struct samsung_spdif_info - Samsung SPDIF Controller information
  @lock: Spin lock for SPDIF.
  @dev: The parent device passed to use from the probe.
  @regs: The pointer to the device register block.
  @clk_rate: Current clock rate for calcurate ratio.
  @pclk: The peri-clock pointer for spdif master operation.
  @sclk: The source clock pointer for making sync signals.
  @saved_clkcon: Backup clkcon reg. in suspend.
  @saved_con: Backup con reg. in suspend.
  @saved_cstas: Backup cstas reg. in suspend.
  @dma_playback: DMA information for playback channel.
 Request SPDIF Register's memory region 
 SPDX-License-Identifier: GPL-2.0
 Copyright 2009 Simtec Electronics
 supported machines:
  Machine	Connections		AMP
  -------	-----------		---
  BAST		MIC, HPOUT, LOUT, LIN	TPA2001D1 (HPOUTL,R) (gain hardwired)
  VR1000	HPOUT, LIN		None
  VR2000	LIN, LOUT, MIC, HP	LM4871 (HPOUTL,R)
  DePicture	LIN, LOUT, MIC, HP	LM4871 (HPOUTL,R)
  Anubis	LIN, LOUT, MIC, HP	TPA2001D1 (HPOUTL,R)
  simtec_tlv320aic23_init - initialise and add controls
  @codec; The codec instance to attach to.
  Attach our controls and configure the necessary codec
  mappings for our sound card instance.
 simtec audio machine driver 
 SPDX-License-Identifier: GPL-2.0+
 smdk_spdif.c - SPDIF audio for SMDK
 Copyright (C) 2010 Samsung Electronics Co., Ltd.
 Audio clock settings are belonged to board specific part. Every
  board can set audio source clock setting which is matched with HW
  like this function-'set_audio_clock_heirachy'.
 Set audio clock hierarchy for SPDIF 
 We should haved to set clock directly on this part because of clock
  scheme of Samsudng SoCs did not support to set rates from abstrct
  clock of it's hierarchy.
	 Setting ratio to 512fs helps to use SPDIF with HDMI without
	  modify SPDIF ASoC machine driver.
 Set audio source clock rates 
 Set SPDIF uses internal source clock 
 Set audio clock hierarchy manually 
 SPDX-License-Identifier: GPL-2.0-only
  simone.c -- ASoC audio for Simplemachines Sim.One board
  Copyright (c) 2010 Mika Westerberg
  Based on snappercl15 machine driver by Ryan Mallon.
 SPDX-License-Identifier: GPL-2.0-only
  linuxsoundarmep93xx-pcm.c - EP93xx ALSA PCM interface
  Copyright (C) 2006 Lennert Buytenhek <buytenh@wantstofly.org>
  Copyright (C) 2006 Applied Data Systems
  Rewritten for the SoC audio subsystem (Based on PXA2xx code):
    Copyright (c) 2008 Ryan Mallon
 SPDX-License-Identifier: GPL-2.0-only
  ASoC driver for Cirrus Logic EP93xx AC97 controller.
  Copyright (c) 2010 Mika Westerberg
  Based on s3c-ac97 ASoC driver by Jaswinder Singh.
  Per channel (1-4) registers.
  Global AC97 controller registers.
  Common bits for RGIS, GIS and IM registers.
  struct ep93xx_ac97_info - EP93xx AC97 controller info structure
  @lock: mutex serializing access to the bus (slot 1 & 2 ops)
  @dev: pointer to the platform device dev structure
  @regs: mapped AC97 controller registers
  @done: bus ops wait here for an interrupt
 currently ALSA only supports a single AC97 device 
	
	  Writes to the codec need to be done so that slot 2 is filled in
	  before slot 1.
	
	  We are assuming that before this functions gets called, the codec
	  BIT_CLK is stopped by forcing the codec into powerdown mode. We can
	  control the SYNC signal directly via AC97SYNC register. Using
	  TIMEDSYNC the controller will keep the SYNC high > 1us.
	
	  For doing cold reset, we disable the AC97 controller interface, clear
	  WINT and CODECREADY bits, and finally enable the interface again.
	
	  Now, assert the reset and wait for the codec to become ready.
	
	  Give the codec some time to come fully out from the reset. This way
	  we ensure that the subsequent readswrites will work.
	
	  Just mask out the interrupt and wake up the waiting thread.
	  Interrupts are cleared via readingwriting to slot 1 & 2 registers by
	  the waiting thread.
			
			  Enable compact mode, TX slots 3 & 4, and the TX FIFO
			  itself.
			
			  Enable compact mode, RX slots 3 & 4, and the RX FIFO
			  itself.
			
			  As per Cirrus EP93xx errata described below:
			 
			  https:www.cirrus.comenpubserrataER667E2B.pdf
			 
			  we will wait for the TX FIFO to be empty before
			  clearing the TEN bit.
 disable the TX FIFO 
 disable the RX FIFO 
 disable the AC97 controller 
 SPDX-License-Identifier: GPL-2.0-only
  linuxsoundsocep93xx-i2s.c
  EP93xx I2S driver
  Copyright (C) 2010 Ryan Mallon
  Based on the original driver by:
    Copyright (C) 2007 Chase Douglas <chasedouglas@gmail>
    Copyright (C) 2006 Lennert Buytenhek <buytenh@wantstofly.org>
 Right justify 
 Right justify 
  Transmit empty interrupt level select:
  0 - Generate interrupt when FIFO is half empty
  1 - Generate interrupt when FIFO is empty
 Transmit interrupt enable 
 lrclk polarity 
 Bit clock polarity 
 First bit transition 
 Master mode 
 Not bit clock gating 
 Enable clocks 
 Enable i2s 
 Enable fifo 
 Enable TX IRQs (FIFO empty or underflow) 
 Disable IRQs 
 Disable fifo 
 Disable i2s 
 Disable clocks 
  According to documentation I2S controller can handle underflow conditions
  just fine, but in reality the state machine is sometimes confused so that
  the whole stream is shifted by one byte. The watchdog below disables the TX
  FIFO, fills the buffer with zeroes and re-enables the FIFO. State machine
  is being reset and by filling the buffer we get some time before next
  underflow happens.
 Disable FIFO 
	
	  Fill TX FIFO with zeroes, this way we can defer next IRQs as much as
	  possible and get more time for DMA to catch up. Actually there are
	  only 8 samples in this FIFO, so even on 8kHz maximum deferral here is
	  1ms.
 Re-enable FIFO 
 CPU is provider 
 Codec is provider 
 Negative bit clock, lrclk low on left word 
 Negative bit clock, lrclk low on right word 
 Positive bit clock, lrclk low on left word 
 Positive bit clock, lrclk low on right word 
 Write new register values 
	
	  EP93xx I2S module can be setup so SCLK  LRCLK value can be
	  32, 64, 128. MCLK  SCLK value can be 2 and 4.
	  We set LRCLK equal to `rate' and minimum SCLK  LRCLK 
	  value is 64, because our sample size is 32 bit  2 channels.
	  I2S standard permits us to transmit more bits than
	  the codec uses.
 SPDX-License-Identifier: GPL-2.0-or-later
  SoC audio for EDB93xx
  Copyright (c) 2010 Alexander Sverdlin <subaparts@yandex.ru>
  This driver support CS4271 codec being master or slave, working
  in control port mode, connected either via SPI or I2C.
  The data format accepted is I2S or left-justified.
  DAPM support not implemented.
	
	  According to CS4271 datasheet we use MCLKLRCK=256 for
	  rates below 50kHz and 128 for higher sample rates
 SPDX-License-Identifier: GPL-2.0-or-later
  snappercl15.c -- SoC audio for Bluewater Systems Snapper CL15 module
  Copyright (C) 2008 Bluewater Systems Ltd
  Author: Ryan Mallon
 SPDX-License-Identifier: GPL-2.0-only
  Au1000Au1500Au1100 AC97C controller driver for ASoC
  (c) 2011 Manuel Lauss <manuel.lauss@googlemail.com>
  based on the old ALSA driver originally written by
 			Charles Eidsness <charles@cooper-street.com>
 register offsets and bits 
 valid rx slots mask 
 valid tx slots mask 
 sync gate 
 sync control 
 acrst# control 
 tx underflow 
 tx overflow 
 rx underflow 
 rx overflow 
 codec ready 
 command pending 
 tx fifo empty 
 tx fifo full 
 rx fifo empty 
 rx fifo full 
 DISable bit 
 clock enable bit 
 how often to retry failed codec register readswrites 
 instance data. There can be only one, MacLeod!!!!, fortunately there IS only
  once AC97C on early Alchemy chips. The newer ones aren't so lucky.
 wait an ac97 frame time 
		 stupid errata: data is only valid for 21us, so
		  poll, Forrest, poll...
 wait for codec ready 
 AC97 controller operations 
 switch it on 
 clock off, disable 
 MDEV 
 clock off, disable 
 SPDX-License-Identifier: GPL-2.0-only
  Au12x0Au1550 PSC ALSA ASoC audio support.
  (c) 2007-2009 MSC Vertriebsges.m.b.H.,
 	Manuel Lauss <manuel.lauss@gmail.com>
  Au1xxx-PSC AC97 glue.
 how often to retry failed codec register readswrites 
 instance data. There can be only one, MacLeod!!!! 
 this could theoretically work, but ac97->bus->card->private_data can be NULL
  when snd_ac97_mixer() is called; I don't know if the rest further down the
  chain are always valid either.
 AC97 controller reads codec register 
 drain writebuffer 
 drain writebuffer 
 drain writebuffer 
 wrong register, try again 
 AC97 controller writes to codec register 
 drain writebuffer 
 drain writebuffer 
 drain writebuffer 
 AC97 controller asserts a warm reset 
 drain writebuffer 
 drain writebuffer 
 disable PSC during cold reset 
 drain writebuffer 
 drain writebuffer 
 issue cold reset 
 drain writebuffer 
 drain writebuffer 
 enable PSC 
 drain writebuffer 
 wait for PSC to indicate it's ready 
 enable the ac97 function 
 drain writebuffer 
 wait for AC97 core to become ready 
 AC97 controller operations 
 already active? 
 reject parameters not currently set up 
 set sample bitdepth: REG[24:21]=(BITS-2)2 
 channels: enable slots for front LR channel 
 do we need to poke the hardware? 
 ac97 engine is about to be disabled 
 disable AC97 device controller first... 
 drain writebuffer 
 ...wait for it... 
 ...write config... 
 drain writebuffer 
 ...enable the AC97 controller again... 
 drain writebuffer 
 ...and wait for ready bit 
 drain writebuffer 
 drain writebuffer 
 drain writebuffer 
 drain writebuffer 
 configuration: max dma trigger threshold, enable ac97 
 preserve PSC clock source set up by platform	 
 drain writebuffer 
 drain writebuffer 
 drain writebuffer 
 name the DAI like this device instance ("au1xpsc-ac97.PSCINDEX") 
 disable PSC completely 
 drain writebuffer 
 drain writebuffer 
 MDEV 
 save interesting registers and disable PSC 
 drain writebuffer 
 drain writebuffer 
 restore PSC clock config 
 drain writebuffer 
	 after this point the ac97 core will cold-reset the codec.
	  During cold-reset the PSC is reinitialized and the last
	  configuration set up in hw_params() is restored.
 SPDX-License-Identifier: GPL-2.0-only
  Au1000Au1500Au1100 Audio DMA support.
  (c) 2011 Manuel Lauss <manuel.lauss@googlemail.com>
  copied almost verbatim from the old ALSA driver, written by
 			Charles Eidsness <charles@cooper-street.com>
 relative to start of buffer 
 playback & capture 
 not changed 
 whoa, has ordering changed? 
 DMA setup 
 SPDX-License-Identifier: GPL-2.0-only
  DB1000DB1500DB1100 ASoC audio fabric support code.
  (c) 2011 Manuel Lauss <manuel.lauss@googlemail.com>
 SPDX-License-Identifier: GPL-2.0-only
  Au12x0Au1550 PSC ALSA ASoC audio support.
  (c) 2007-2008 MSC Vertriebsges.m.b.H.,
 	Manuel Lauss <manuel.lauss@gmail.com>
  DMA glue for Au1x-PSC audio.
#define PCM_DEBUG
 DDMA control data 
 DDMA direction ID for this PSC 
 DDMA context 
 PCM context (for irq handlers) 
 current segment DDMA is working on 
 queue period(s) 
 address of queued DMA area 
 start address of DMA area 
 current byte position being played 
 number of SG segments in total 
 size in bytes of one SG segment 
 runtime data 
  These settings are somewhat okay, at least on my machine audio plays
  almost skip-free. Especially the 64kB buffer seems to help a LOT.
 PCM hardware DMA capabilities - platform specific 
 2 to as-much-as-you-like 
 fifo entries of AC97I2S PSC 
 update next-to-queue period 
 update next-to-queue period 
 in case of missing DMA ring or changed TX-source  RX-dest bit widths,
  allocate (or reallocate) a 2-descriptor DMA ring with bit depth according
  to ALSA-supplied sample depth.  This is due to limitations in the dbdma api
  (cannot adjust sourcedest widths of already allocated descriptor ring).
 DMA only in 81632 bit widths 
 check current config: correct bits and descriptors allocated? 
 all ok! 
 whoa, has ordering changed? 
 au1xpsc audio platform 
 SPDX-License-Identifier: GPL-2.0-only
  Au1000Au1500Au1100 I2S controller driver for ASoC
  (c) 2011 Manuel Lauss <manuel.lauss@googlemail.com>
  Note: clock supplied to the I2S controller must be 256x samplerate.
 tx underflow 
 clock invert 
 set to make I2SDIO INPUT 
 loopback 
 word select invert 
 I2S format 
 left-justified 
 right-justified 
 tx fifo en 
 rx fifo en 
 DISable 
 clock enable 
 only limited by clock generator and board design 
 IB-IF 
 I2S controller only supports provider 
 CODEC consumer 
 power up 
 power off 
 clock off, disable 
 clock off, disable 
 SPDX-License-Identifier: GPL-2.0-only
  Au12x0Au1550 PSC ALSA ASoC audio support.
  (c) 2007-2008 MSC Vertriebsges.m.b.H.,
 	Manuel Lauss <manuel.lauss@gmail.com>
  Au1xxx-PSC I2S glue.
  NOTE: so far only PSC slave mode (bit- and frameclock) is supported.
 supported I2S DAI hardware formats 
 supported I2S direction 
 left-justified 
 enable I2S mode 
 LSB (right-) justified 
 IB-IF 
 CODEC provider 
 PSC I2S consumer mode 
 CODEC consumer 
 PSC I2S provider mode 
 check if the PSC is already streaming data 
 reject parameters not currently set up in hardware 
 set sample bitdepth 
 remember current rate for other stream 
 Configure PSC late:  on my devel systems the codec  is I2S master and
  supplies the i2sbitclock __AND__ i2sMclk (!) to the PSC unit.  ASoC
  uses aggressive PM and  switches the codec off  when it is not in use
  which also means the PSC unit doesn't get any clocks and is therefore
  dead. That's why this chunk here gets called from the trigger callback
  because I can be reasonably certain the codec is driving the clocks.
 bring PSC out of sleep, and configure I2S unit 
 drain writebuffer 
 drain writebuffer 
 drain writebuffer 
 wait for I2S controller to become ready 
 drain writebuffer 
 if both TX and RX are idle, configure the PSC  
 drain writebuffer 
 drain writebuffer 
 wait for start confirmation 
 drain writebuffer 
 drain writebuffer 
 wait for stop confirmation 
 if both TX and RX are idle, disable PSC 
 drain writebuffer 
 drain writebuffer 
 2 without external help 
 2 without external help 
	 preserve PSC clock source set up by platform (dev.platform_data
	  is already occupied by soc layer)
 drain writebuffer 
 drain writebuffer 
 preconfigure: set max rxtx fifo depths 
	 don't wait for I2S core to become ready now; clocks may not
	  be running yet; depending on clock input for PSC a wait might
	  time out.
 name the DAI like this device instance ("au1xpsc-i2s.PSCINDEX") 
 drain writebuffer 
 drain writebuffer 
 save interesting register and disable PSC 
 drain writebuffer 
 drain writebuffer 
 select I2S mode and PSC clock 
 drain writebuffer 
 drain writebuffer 
 drain writebuffer 
 SPDX-License-Identifier: GPL-2.0-only
  DB1200DB1300DB1550 ASoC audio fabric support code.
  (c) 2008-2011 Manuel Lauss <manuel.lauss@googlemail.com>
-------------------------  AC97 PART  ---------------------------
-------------------------  I2S PART  ---------------------------
 WM8731 has its own 12MHz crystal 
-------------------------  COMMON PART  ---------------------------
 SPDX-License-Identifier: GPL-2.0-or-later
  linuxsoundsoccodecstlv320aic32x4.c
  Copyright 2011 Vista Silicon S.L.
  Author: Javier Martin <javier.martin@vista-silicon.com>
  Based on soundsoccodecswm8974 and TI driver for kernel 2.6.27.
	
	  Workaround: the datasheet does not mention a required programming
	  sequence but experiments show the ADC needs to be reset after each
	  capture to avoid audible artifacts.
 Change Mic Bias Registor 
 0dB min, 0.5dB steps 
 -63.5dB min, 0.5dB steps 
 -6dB min, 1dB steps 
 -12dB min, 0.5dB steps 
 -6dB min, 1dB steps 
 Left mixer pins 
	Right mixer pins 
 Left Output 
 Right Output 
 Right Input 
 Left Input 
 set masterslave audio interface 
 invert bit clock 
 add offset 1 
 invert bit clock 
 AIC32x4 
 Initial cold start 
 setup GPIO functions 
 MFP1 
 MFP2 
 MFP3 
 MFP4 
 MFP5 
 Power platform configuration 
 Mic PGA routing 
	
	  Workaround: for an unknown reason, the ADC needs to be powered up
	  and down for the first capture to work properly. It seems related to
	  a HW BUG or some kind of behavior not documented in the datasheet.
	
	  Enable the fast charging feature and ensure the needed 40ms ellapsed
	  before using the analog circuits.
 Left Output 
 Power platform configuration 
	
	  Enable the fast charging feature and ensure the needed 40ms ellapsed
	  before using the analog circuits.
 Check if the regulator requirements are fulfilled 
 SPDX-License-Identifier: GPL-2.0
  Texas Instruments PCM186x Universal Audio ADC - I2C
  Copyright (C) 2015-2017 Texas Instruments Incorporated - https:www.ti.com
 	Andreas Dannenberg <dannenberg@ti.com>
 	Andrew F. Davis <afd@ti.com>
 SPDX-License-Identifier: GPL-2.0-only
  rl6347a.c - RL6347A class device shared support
  Copyright 2015 Realtek Semiconductor Corp.
  Author: Oder Chiou <oder_chiou@realtek.com>
 handle index registers 
	
	  4 bit VID: reg should be 0
	  12 bit VID: value should be 0
	  So we use an OR operator to handle it rather than use if condition.
 handle index registers 
 Write register 
 Read data 
 SPDX-License-Identifier: GPL-2.0-only
  rt5665.c  --  RT5665RT5658 ALSA SoC audio codec driver
  Copyright 2016 Realtek Semiconductor Corp.
  Author: Bard Liao <bardliao@realtek.com>
 {0, +20, +24, +30, +35, +40, +44, +50, +52} dB 
 Interface data select 
  rt5665_sel_asrc_clk_src - select ASRC clock source for a set of filters
  @component: SoC audio component device.
  @filter_mask: mask of filters.
  @clk_src: clock source
  The ASRC function is for asynchronous MCLK and LRCK. Also, since RT5665 can
  only support standard 32fs or 64fs i2s format, ASRC should be enabled to
  support special i2s clock format such as Intel's 100fs(100  sampling rate).
  ASRC function will track i2s clock and generate a corresponding system clock
  for codec. This function provides an API to select the clock source for a
  set of filters specified by the mask. And the codec driver will turn on ASRC
  for these filters if ASRC is selected as their clock source.
  rt5665_headset_detect - Detect headset.
  @component: SoC audio component device.
  @jack_insert: Jack insert or not.
  Detect whether is headset or not when jack inserted.
  Returns detect status.
 jack out 
 jack in 
 jack was out, report jack type 
 jack is already in, report button event 
			
			  rt5665 can report three kinds of button behavior,
			  one click, double click and hold. However,
			  currently we will report button pressedreleased
			  event. So all the three button behaviors are
			  treated as button pressed.
 unpressed 
 jack out 
 Headphone Output Volume 
 Mono Output Volume 
 Output Volume 
 DAC Digital Volume 
 IN1IN2IN3IN4 Volume 
 INLINR Volume Control 
 ADC Digital Volume Control 
 ADC Boost Volume Control 
 I2S3 CLK Source 
  set_dmic_clk - Set parameter of dmic.
  @w: DAPM widget.
  @kcontrol: The kcontrol of this widget.
  @event: Event id.
  Choose dmic clock between 1MHz and 3MHz.
  It is better for clock to approximate 3MHz.
 I2S_Pre_Div1 should be 1 in asrc mode 
 Digital Mixer 
 Analog Input Mixer 
DAC L2, DAC R2
MX-17 [6:4], MX-17 [2:0]
DAC L3, DAC R3
MX-1B [6:4], MX-1B [2:0]
 STO1 ADC1 Source 
 MX-26 [13] [5] 
 STO1 ADC Source 
 MX-26 [11:10] [3:2] 
 STO1 ADC2 Source 
 MX-26 [12] [4] 
 STO1 DMIC Source 
 MX-26 [8] 
 MX-26 [9] 
 MX-26 [1:0] 
 MONO ADC L2 Source 
 MX-27 [12] 
 MONO ADC L1 Source 
 MX-27 [13] 
 MX-27 [9][1]
 MONO ADC L Source, MONO ADC R Source
 MX-27 [11:10], MX-27 [3:2] 
 MONO DMIC L Source 
 MX-27 [8] 
 MONO ADC R2 Source 
 MX-27 [4] 
 MONO ADC R1 Source 
 MX-27 [5] 
 MONO DMIC R Source 
 MX-27 [0] 
 STO2 ADC1 Source 
 MX-28 [13] [5] 
 STO2 ADC Source 
 MX-28 [11:10] [3:2] 
 STO2 ADC2 Source 
 MX-28 [12] [4] 
 STO2 DMIC Source 
 MX-28 [8] 
 MX-28 [9] 
 MX-28 [1] 
 DAC R1 Source, DAC L1 Source
 MX-29 [11:10], MX-29 [9:8]
 DAC Digital Mixer L Source, DAC Digital Mixer R Source
 MX-2D [13:12], MX-2D [9:8]
 Analog DAC L1 Source, Analog DAC R1 Source
 MX-2D [5:4], MX-2D [1:0]
 Analog DAC LR Source, Analog DAC R2 Source
 MX-2E [5:4], MX-2E [0]
 Interface2 ADC Data Input
 MX-2F [14:12] 
 MX-2F [6:4] 
 Interface3 ADC Data Input
 MX-30 [6:4] 
 PDM 1 LR
 MX-31 [11:10] [9:8] 
 I2S1 TDM ADCDAT Source 
 MX-7a[10] 
 MX-7a[9] 
 MX-7a[8] 
 MX-7b[10] 
 MX-7b[9] 
 MX-7b[8] 
 MX-7b[7] 
 MX-7a[4:0] MX-7b[4:0] 
 Out Volume Switch 
 Out Switch 
Add delay to avoid pop noise
 ASRC 
 Input Side 
 Input Lines 
 Boost 
 Input Volume 
 REC Mixer 
 ADCs 
 ADC Mux 
 ADC Mixer 
 ADC PGA 
 Digital Interface 
 Digital Interface Select 
 Audio Interface 
 Output Side 
 DAC mixer before sound effect  
 DAC channel Mux 
 DAC Mixer 
 DACs 
 OUT Mixer 
 Output Volume 
 MONOHPOLOUT 
 PDM 
 CLK DET 
 Output Lines 
PLL
ASRC
Vref
 Sleep for 300 ms miniumum 
 line in diff mode
 DMIC pin
 Work around for pow_pump 
 Set GPIO4,8 as input for combo jack 
 Enhance performance
 SPDX-License-Identifier: GPL-2.0-only
 ALSA SoC Audio driver for CS47L92 codec
 Copyright (C) 2016-2019 Cirrus Logic, Inc. and
                         Cirrus Logic International Semiconductor Ltd.
 EP_SEL should not be modified while HPOUT3 or 4 is enabled 
 wait for wseq to complete 
 wait for wseq 
 enable delay 
 disable delay 
  mux_in widgets : arranged in the order of sources
  specified in MADERA_MIXER_INPUT_ROUTES
 end of ordered widget list 
 Internal clock domains 
 quick exit if Madera irqchip driver hasn't completed probe 
 Latch volume update bits 
 SPDX-License-Identifier: GPL-2.0-or-later
  stac9766.c  --  ALSA SoC STAC9766 codec support
  Copyright 2009 Jon Smirl, Digispeaker
  Author: Jon Smirl <jonsmirl@gmail.com>
   Features:-
    o Support for AC97 Codec, SPDIF
 010dB 
 020dB 
 enable variable rate audio, disable SPDIF output 
 Enable VRA and SPDIF out 
 full On 
 partial On 
 Off, with power 
 Off, without power 
 disable everything including AC link 
 stream cababilities 
 alsa ops 
 stream cababilities 
 alsa ops 
 SPDX-License-Identifier: GPL-2.0-only
 ALSA SoC Audio driver for CS47L35 codec
 Copyright (C) 2015-2019 Cirrus Logic, Inc. and
                         Cirrus Logic International Semiconductor Ltd.
 Only get to here for OUT1L and OUT1R 
  Input mux widgets arranged in order of sources in MADERA_MIXER_INPUT_ROUTES
  to take advantage of cache lookup in DAPM
 End of ordered input mux widgets 
 Internal clock domains 
 quick exit if Madera irqchip driver hasn't completed probe 
 Latch volume update bits 
 SPDX-License-Identifier: GPL-2.0-or-later
  wm8400.c  --  WM8400 ALSA Soc Audio driver
  Copyright 2008-11 Wolfson Microelectronics PLC.
  Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
 codec private data 
 now hit the volume update bits (always bit 8) 
 INMIXL 
 INMIXR 
 LOMIX 
 ROMIX 
 LOUT 
 ROUT 
 LOPGA 
 ROPGA 
  _DAPM_ Controls
 INMIX dB values 
 Left In PGA Connections 
 Right In PGA Connections 
 INMIXL 
 INMIXR 
 AINLMUX 
 DIFFINL 
 AINRMUX 
 LOMIX 
 ROMIX 
 LONMIX 
 LOPMIX 
 RONMIX 
 ROPMIX 
 OUT3MIX 
 OUT4MIX 
 SPKMIX 
 Input Side 
 Input Lines 
 DACs 
 Input PGAs 
 INMIXL 
 AINLMUX 
 INMIXR 
 AINRMUX 
 Output Side 
 DACs 
 LOMIX 
 LONMIX 
 LOPMIX 
 OUT3MIX 
 SPKMIX 
 OUT4MIX 
 ROPMIX 
 RONMIX 
 ROMIX 
 LOUT PGA 
 ROUT PGA 
 LOPGA 
 ROPGA 
 MICBIAS 
 Make DACs turn on when playing even if not mixed into any outputs 
	 Make ADCs turn on when recording
 Input Side 
 LIN12 PGA 
 LIN34 PGA 
 INMIXL 
 AILNMUX 
 ADC 
 RIN12 PGA 
 RIN34 PGA 
 INMIXR 
 AIRNMUX 
 ADC 
 LOMIX 
 ROMIX 
 SPKMIX 
 LONMIX 
 LOPMIX 
 OUT3MIX 
 OUT4MIX 
 RONMIX 
 ROPMIX 
 Out Mixer PGAs 
 Output Pins 
  Clock after FLL and dividers
 Ensure we have a fractional part 
 Calculate fractional part - scale up so we can round. 
 Move down to proper range now rounding is done 
		 Bodge GCC 4.4.0 uninitialised variable warning - it
		  doesn't seem capable of working out that we exit if
 We must disable the FLL before any changes 
  Sets ADC and Voice DAC format.
 set masterslave audio interface 
 interface format 
  Set PCM DAI bit size and sample rate.
 bit size 
 TODO: set bias for best performance at standby 
 VMID=250k 
 Enable POBCTRL, SOFT_ST, VMIDTOG and BUFDCOPEN 
 Enable VREF & VMID at 2x50k 
 Enable BUFIOEN 
 disable POBCTRL, SOFT_ST and BUFDCOPEN 
 VMID=2300k 
 Enable POBCTRL and SOFT_ST 
 Enable POBCTRL, SOFT_ST and BUFDCOPEN 
 mute DAC 
 Enable any disabled outputs 
 Disable VMID 
 Enable all output discharge bits 
 Disable VREF 
 disable POBCTRL, SOFT_ST and BUFDCOPEN 
  The WM8400 supports 2 different and mutually exclusive DAI
  configurations.
  1. ADCDAC on Primary Interface
  2. ADC on Primary InterfaceDAC on secondary
 ADCDAC on primary 
 Latch volume update bits 
 SPDX-License-Identifier: GPL-2.0-only
 alc5632.c  --  ALC5632 ALSA SoC Audio Codec
 Copyright (C) 2011 The AC100 Kernel Team <ac100@lists.lauchpad.net>
 Authors:  Leon Romanovsky <leon@leon.nu>
           Andrey Danin <danindrey@mail.ru>
           Ilya Petrov <ilya.muromec@gmail.com>
           Marc Dietrich <marvin24@gmx.de>
 Based on alc5623.c by Arnaud Patard
  ALC5632 register cache
 R2   - Speaker Output Volume 
 R4   - Headphone Output Volume 
 R6   - AUXOUT Volume 
 R8   - Phone Input 
 R10  - LINE_IN Volume 
 R12  - STEREO DAC Input Volume 
 R14  - MIC Input Volume 
 R16  - Stereo DAC and MIC Routing Control 
 R18  - ADC Record Gain 
 R20  - ADC Record Mixer Control 
 R24  - Voice DAC Volume 
 R28  - Output Mixer Control 
 R34  - Microphone Control 
	{  36, 0x00C0 },     R36  - Codec Digital MICDigital Boost
	{  46, 0x0000 },	 R46  - Stereo DACVoice DACStereo ADC
	{  52, 0x8000 },	 R52  - Main Serial Data Port Control
	{  54, 0x0000 },	 R54  - Extend Serial Data Port Control
 R58  - Power Management Addition 1 
 R60  - Power Management Addition 2 
 R62  - Power Management Addition 3 
 R64  - General Purpose Control Register 1 
 R66  - General Purpose Control Register 2 
 R68  - PLL1 Control 
 R70  - PLL2 Control 
 R76  - GPIO Pin Configuration 
 R78  - GPIO Pin Polarity 
 R80  - GPIO Pin Sticky 
 R82  - GPIO Pin Wake Up 
 R86  - Pin Sharing 
 R90  - Soft Volume Control Setting 
 R92  - GPIO_Output Pin Control 
 R94  - MISC Control 
 R96  - Stereo DAC Clock Control_1 
 R98  - Stereo DAC Clock Control_2 
 R100 - VoDAC_PCM Clock Control_1 
	{ 104, 0x0553 },	 R104 - Pseudo Stereo and Spatial Effect
 R106 - Private Register Address 
 codec private data 
 to power-onoff class-d amp generatorsspeaker 
 need to write to 'index-46h' register :        
 so write index num (here 0x46) to reg 0x6a     
 and then 0xffff0 to reg 0x6c                  
  ALC5632 Controls
 -34.5db min scale, 1.5db steps, no mute 
 -46.5db min scale, 1.5db steps, no mute 
 -16.5db min scale, 1.5db steps, no mute 
 0db min scale, 6 db steps, no mute 
 0db min scalem 0.75db steps, no mute 
 left starts at bit 8, right at bit 0 
 31 steps (5 bit), -46.5db scale 
 bit 15 mutes left, bit 7 right 
  DAPM Controls
 Left Record Mixer 
 Right Record Mixer 
 Dmic Mixer 
 auxout output mux 
 speaker output mux 
 headphone left output mux 
 headphone right output mux 
 speaker output N select 
 speaker amplifier 
 ADC output select 
 I2S out select 
 Muxes 
 output mixers 
 input mixers 
 Playback streams 
 virtual mixer - mixes left & right channels 
 DAC 
 HP mixer 
 speaker mixer 
 mono mixer 
 Left record mixer 
Right record mixer 
 headphone left mux 
 headphone right mux 
 speaker out mux 
 MonoAux Out mux 
 output pga 
 input pga 
 left ADC 
 right ADC 
 Digital I2S out 
 Voice Mix 
 Speaker Output 
 PLL divisors 
 Note : pll code from original alc5632 driver. Not sure of how good it is 
 useful only for master mode 
 FOUT = MCLK(N+2)((M+2)(K+2))
   N: bit 15:8 (div 2 .. div 257)
   K: bit  6:4 typical 2
   M: bit  3:0 (div 2 .. div 17)
   same as for 5623 - thanks!
 Disable PLL power 
 pll is not used in slave mode 
 PLL source from MCLK 
 PLL source from Bitclk 
 PLL source from voice clock 
 choose MCLKBCLKVBCLK 
 choose PLL1 clock rate 
 enable PLL1 
 enable PLL2 
 use PLL1 as main SYSCLK 
 codec hifi mclk (after PLL) clock divider coefficients 
 values inspired from column BCLK=32Fs of Appendix A table 
  Clock after PLL and dividers
 set audio interface clocking 
 interface format 
 clock inversion 
 bit size 
 set iface & srate 
 "normal" mode: 0 @ 26 
 set all PR0-7 mixers to 0 
 disable HP Depop2 
 everything off except vrefvmid, 
 "normal" mode: 0 @ 26 
 everything off, dac mute, inactive 
  alc5632 2 wire address is determined by A1 pin
  state during powerup.
     low  = 0x1a
     high = 0x1b
 i2c codec control layer 
 SPDX-License-Identifier: GPL-2.0-only
  max98371.c -- ALSA SoC Stereo MAX98371 driver
  Copyright 2015-16 Maxim Integrated Products
 BCLKLRCLK ratio calculation 
 enabling both the RX channels
 SPDX-License-Identifier: GPL-2.0-only
  ADAU1977ADAU1978ADAU1979 driver
  Copyright 2014 Analog Devices Inc.
   Author: Lars-Peter Clausen <lars@metafoo.de>
 SPDX-License-Identifier: GPL-2.0-only
  wm8750.c -- WM8750 ALSA SoC audio driver
  Copyright 2005 Openedhand Ltd.
  Author: Richard Purdie <richard@openedhand.com>
  Based on WM8753.c
  wm8750 register cache
  We can't read the WM8750 register space when we
  are using 2 wire for device control, so we cache them instead.
 codec private data 
  WM8750 Controls
 10 
 16 
 Unimplemented 
 ADCDAC Bit 0 - ADCHPD 
 ADCDAC Bit 4 - HPOR 
 ADCTL1 Bit 2,3 - DATSEL 
 ADCTL1 Bit 4,5 - DMONOMIX 
 ADCTL1 Bit 6,7 - VSEL 
 ADCTL2 Bit 2 - LRCM 
 ADCTL2 Bit 3 - TRI 
 ADCTL3 Bit 5 - HPFLREN 
 ADCTL3 Bit 6 - VROI 
 ADCTL3 Bit 7,8 - ADCLRM 
 ADCIN Bit 4 - LDCM 
 ADCIN Bit 5 - RDCM 
  DAPM Controls
 Left Mixer 
 Right Mixer 
 Mono Mixer 
 Left Line Mux 
 Right Line Mux 
 Left PGA Mux 
 Right PGA Mux 
 Out 3 Mux 
 Differential Mux 
 Mono ADC Mux 
 left mixer 
 right mixer 
 left out 1 
 left out 2 
 right out 1 
 right out 2 
 mono mixer 
 mono out 
 out 3 
 Left Line Mux 
 Right Line Mux 
 Left PGA Mux 
 Right PGA Mux 
 Differential Mux 
 Left ADC Mux 
 Right ADC Mux 
 ADC 
 codec hifi mclk clock divider coefficients 
 8k 
 11.025k 
 16k 
 22.05k 
 32k 
 44.1k 
 48k 
 88.2k 
 96k 
 set masterslave audio interface 
 interface format 
 clock inversion 
 bit size 
 set iface & srate 
 set vmid to 50k and unmute dac 
 Set VMID to 5k 
 ...and ramp 
 mute dac and set vmid to 500k, enable VREF 
 set the update bits 
 CONFIG_SPI_MASTER 
 SPDX-License-Identifier: GPL-2.0
 mt6359.c  --  mt6359 ALSA SoC audio codec driver
 Copyright (c) 2020 MediaTek Inc.
 Author: KaiChieh Chuang <kaichieh.chuang@mediatek.com>
 set gpio mosi mode, clk  data mosi 
 sync mosi 
	 set pad_aud__mosi to GPIO mode and dir input
	  reason:
	  pad_aud_dat_mosi, because the pin is used as boot strap
	  don't clean clksync, for mtkaif protocol 2
 set gpio miso mode 
	 set pad_aud__miso to GPIO mode and dir input
	  reason:
	  pad_aud_clk_miso, because when playback only the miso_clk
	  will also have 26m, so will have power leak
	  pad_aud_dat_miso, because the pin is used as boot strap
 use only when doing mtkaif calibraiton at the boot time 
 use only when doing mtkaif calibraiton at the boot time 
 Enabledisable CLKSQ 26MHz 
 use only when doing mtkaif calibraiton at the boot time 
 use only when doing mtkaif calibraiton at the boot time 
 MTKAIF TX format setting 
 enable aud_pad TX fifos 
 MTKAIF TX format setting 
 enable aud_pad TX fifos 
 MTKAIF TX format setting 
 enable aud_pad TX fifos 
 disable aud_pad TX fifos 
 set dat_miso_loopback on 
 set dat_miso_loopback off 
 EnableReduce HPLR main output stage step by step 
 EnableReduce HP aux feedback loop gain step by step 
 Set input diff pair bias select (Hi-Fi mode) 
 Reduce HP aux feedback loop gain step by step 
 MUX 
 LOL MUX 
HP MUX 
 RCV MUX 
 DAC In MUX 
 AIF Out MUX 
 ul1 ch2 use RG_DMIC_ADC3_SOURCE_SEL 
 ul2 ch1 use RG_DMIC_ADC2_SOURCE_SEL 
 ADC L MUX 
 ADC R MUX 
 ADC 3 MUX 
 sdm audio fifo clock power on 
 scrambler clock on enable 
 sdm power on 
 sdm fifo enable 
 DL scrambler disabling sequence 
 Set HP DR bias current optimization, 010: 6uA 
 Set HP & ZCD bias current optimization 
 01: ZCD: 4uA, HPHSLO: 5uA 
 Set HP DR bias current optimization, 001: 5uA 
 Set HP & ZCD bias current optimization 
 00: ZCD: 3uA, HPHSLO: 4uA 
 HP damp circuit enable 
 Enable HPRNHPLN output 4K to VCM 
 HP Feedback Cap select 2'b00: 15pF 
 for >= 96KHz sampling rate: 2'b01: 10.5pF 
 Set HPPN STB enhance circuits 
 Enable HP aux output stage 
 Enable HP aux feedback loop 
 Enable HP aux CMFB loop 
 Enable HP driver bias circuits 
 Enable HP driver core circuits 
 Short HP main output to HP aux output stage 
 Increase HP input pair current to HPM step by step 
 Enable HP main CMFB loop 
 Disable HP aux CMFB loop 
 Enable HP main output stage 
 Enable HPRL main output stage step by step 
 Reduce HP aux feedback loop gain 
 Disable HP aux feedback loop 
 apply volume setting 
 Disable HP aux output stage 
 Unshort HP main output to HP aux output stage 
 Enable AUD_CLK 
 Enable Audio DAC  
 Enable low-noise mode of DAC 
 Disable low-noise mode of DAC 
 Switch HPL MUX to audio DAC 
 Switch HPR MUX to audio DAC 
 Disable Pull-down HPLR to AVSS28_AUD 
 Pull-down HPLR to AVSS28_AUD 
 HPRHPL mux to open 
 Disable low-noise mode of DAC 
 Disable Audio DAC 
 Disable AUD_CLK 
 Short HP main output to HP aux output stage 
 Enable HP aux output stage 
 decrease HPLR gain to normal gain step by step 
 Enable HP aux feedback loop 
 Reduce HP aux feedback loop gain 
 decrease HPRL main output stage step by step 
 Disable HP main output stage 
 Enable HP aux CMFB loop 
 Disable HP main CMFB loop 
 Decrease HP input pair current to 2'b00 step by step 
 Unshort HP main output to HP aux output stage 
 Disable HP driver core circuits 
 Disable HP driver bias circuits 
 Disable HP aux CMFB loop 
 Disable HP aux feedback loop 
 Disable HP aux output stage 
 Disable handset short-circuit protection 
 Set RCV DR bias current optimization, 010: 6uA 
 Set RCV & ZCD bias current optimization 
 01: ZCD: 4uA, HPHSLO: 5uA 
 Set HS STB enhance circuits 
 Set HS output stage (3'b111 = 8x) 
 Enable HS driver bias circuits 
 Enable HS driver core circuits 
 Set HS gain to normal gain step by step 
 Enable AUD_CLK 
 Enable Audio DAC  
 Enable low-noise mode of DAC 
 Switch HS MUX to audio DAC 
 HS mux to open 
 Disable Audio DAC 
 Disable AUD_CLK 
 decrease HS gain to minimum gain step by step 
 Disable HS driver core circuits 
 Disable HS driver bias circuits 
 Disable handset short-circuit protection 
 Set LO DR bias current optimization, 010: 6uA 
 Set LO & ZCD bias current optimization 
 01: ZCD: 4uA, HPHSLO: 5uA 
 Set LO STB enhance circuits 
 Enable LO driver bias circuits 
 Enable LO driver core circuits 
 Set LO gain to normal gain step by step 
 Enable AUD_CLK 
 Enable Audio DAC (3rd DAC) 
 Enable low-noise mode of DAC 
 Switch LOL MUX to audio 3rd DAC 
 Switch LOL MUX to open 
 Disable Audio DAC 
 Disable AUD_CLK 
 decrease LO gain to minimum gain step by step 
 Disable LO driver core circuits 
 Disable LO driver bias circuits 
 ADC CLK from CLKGEN (6.5MHz) 
 DCC 50k CLK (from 26M) 
 MT6359_AFE_DCCLK_CFG0, bit 3 for dm ck swap 
 DMIC enable 
 MISBIAS0 = 1P9V 
 normal power select 
 Disable MICBIAS0, MISBIAS0 = 1P7V 
 MISBIAS1 = 2P6V 
 normal power select 
 MISBIAS2 = 1P9V 
 normal power select 
 Disable MICBIAS2, MISBIAS0 = 1P7V 
 UL dmic setting 
 default one wire, 3.25M 
 default two wire, 3.25M 
 Audio L preamplifier DCC precharge off 
 Audio R preamplifier DCC precharge off 
 Audio R preamplifier DCC precharge off 
 Audio L preamplifier DCC precharge 
 set mic pga gain 
 L preamplifier DCCEN 
 L preamplifier DCCEN 
 Audio R preamplifier DCC precharge 
 set mic pga gain 
 R preamplifier DCCEN 
 R preamplifier DCCEN 
 Audio 3 preamplifier DCC precharge 
 set mic pga gain 
 3 preamplifier DCCEN 
 3 preamplifier DCCEN 
 It is based on hw's control sequenece to add some delay when PMUPMD 
 Set HPRHPL gain to -22dB 
 Set HPLHPR gain to mute 
 Disable HP damping circuit & HPN 4K load 
 reset CMFB PW level 
 Reduce ESD resistance of AU_REFN 
 Increase ESD resistance of AU_REFN 
 sdm audio fifo clock power on 
 scrambler clock on enable 
 sdm power on 
 sdm fifo enable 
 DL scrambler disabling sequence 
 sdm audio fifo clock power on 
 scrambler clock on enable 
 sdm power on 
 sdm fifo enable 
 DL scrambler disabling sequence 
 DAPM Widgets 
 Global Supply
 Digital Clock 
 ch123 share SDM FIFO CLK 
 AFE ON 
 AIF Rx
 DL Supply 
 DAC 
 Headphone 
 Receiver 
 LOL 
 Outputs 
 SGEN 
 Uplinks 
 Uplinks MUX 
 UL input 
 mic bias 
 dmic 
 Capture 
	
	  _ADC_CTL should enable only if UL_SRC in use,
	  but dm ck may be needed even UL_SRC_x not in use
 ul ch 12 
 adc 
	
	  amic fifo ch12 clk from ADC_L,
	  enable ADC_L even use ADC_R only
 DL Supply 
 DL Digital Supply 
 DL Path 
 DAC 3RD 
 Lineout Path 
 Headphone Path 
 Receiver Path 
 enable clk buf 
 set those not controlled by dapm widget 
 audio clk source from internal dcxo 
 Disable HeadphoneLHeadphoneR short circuit protection 
 Disable voice short circuit protection 
 disable LO buffer left short circuit protection 
 set gpio 
 hp hifi mode, default normal mode 
 Disable AUD_ZCD 
 disable clk buf 
 dl pga gain 
 ul pga gain 
 Module information 
 SPDX-License-Identifier: GPL-2.0
 Copyright (c) 2017, Maxim Integrated
 interface format 
 BCLKs per LRCLK 
 match BCLKs per LRCLK 
 BCLKLRCLK ratio calculation 
 BCLK configuration 
 pcm mode configuration 
 sampling rate configuration 
 set DAI_SR to correct LRCLK frequency 
 set sampling rate of IV 
 BCLK configuration 
 Channel size configuration 
 Rx slot configuration 
 Tx slot Hi-Z configuration 
 cache feedback register values before suspend 
 update interleave mode info 
 regmap initialization 
 voltagecurrent slot & gpio configuration 
 Power on device 
 Check Revision ID 
 codec registration 
 SPDX-License-Identifier: GPL-2.0
 rt711.c -- rt711 ALSA SoC audio driver
 Copyright(c) 2019 Realtek Semiconductor Corp.
 Calibration manual mode 
 trigger 
 wait for calibration process 
 depop mode 
 pin attached 
 jack in 
 jack is already in, report button event 
 jack out 
 button released 
 pin attached 
 jack is already in, report button event 
 cbj comparator 
 button released 
 power on 
 unsolicited response & IRQ control 
 default settings was already for JD1 
 power off 
 R Channel 
 L Channel 
 For Verb-Set Amplifier Gain (Verb ID = 3h) 
 Can't use update bit function, so read the original value first 
 output 
 input 
 L Channel 
 for muteunmute 
 keep gain 
 for gain 
 keep mute status 
 R Channel 
 for muteunmute 
 keep gain 
 for gain 
 keep mute status 
 retry 3 times at most 
 Set both LR channels at the same time 
 Lch
 Rch 
 check result 
 output 
 input 
 switch to get command 
 output 
 input 
 muteunmute for switch controls 
 for gain volume controls 
 vid = 0xf01 
 Verb ID = 0x701h 
 Use tx_mask or rx_mask to configure stream tag and set dma_data 
 SoundWire specific configuration 
 bit 3:0 Number of Channel 
 bit 6:4 Bits per Sample 
 48Khz 
 Bus clock frequency 
	
	  Mark hw_init to false
	  HW init will be performed when device reports present
 JD source uses JD2 in default 
	
	  PM runtime is only enabled when a Slave reports as Attached
 set autosuspend parameters 
 update count of parent 'active' children 
 make sure the device does not suspend immediately 
 power on 
 Set Pin Widget 
 Mute HPADC1ADC2 
 Set Configuration Default 
 Data port arrangement 
 Set index 
 Finish Initial Settings, set power to D3 
	
	  if set_jack callback occurred early than io_init,
	  we set up the jack detection function now
 Mark Slave initialization complete 
 SPDX-License-Identifier: GPL-2.0-only
 rt5682s.c  --  RT5682I-VS ALSA SoC audio component driver
 Copyright 2021 Realtek Semiconductor Corp.
 Author: Derek Fang <derek.fang@realtek.com>
  rt5682s_headset_detect - Detect headset.
  @component: SoC audio component device.
  @jack_insert: Jack insert or not.
  Detect whether is headset or not when jack inserted.
  Returns detect status.
 jack in 
 jack was out, report jack type 
 jack is already in, report button event 
			
			  rt5682s can report three kinds of button behavior,
			  one click, double click and hold. However,
			  currently we will report button pressedreleased
			  event. So all the three button behaviors are
			  treated as button pressed.
 unpressed 
 jack out 
 jack out 
 DAC Digital Volume 
 CBJ Boost Volume 
 ADC Digital Volume Control 
 ADC Boost Volume Control 
  rt5682s_sel_asrc_clk_src - select ASRC clock source for a set of filters
  @component: SoC audio component device.
  @filter_mask: mask of filters.
  @clk_src: clock source
  The ASRC function is for asynchronous MCLK and LRCK. Also, since RT5682S can
  only support standard 32fs or 64fs i2s format, ASRC should be enabled to
  support special i2s clock format such as Intel's 100fs(100  sampling rate).
  ASRC function will track i2s clock and generate a corresponding system clock
  for codec. This function provides an API to select the clock source for a
  set of filters specified by the mask. And the component driver will turn on
  ASRC for these filters if ASRC is selected as their clock source.
  set_dmic_clk - Set parameter of dmic.
  @w: DAPM widget.
  @kcontrol: The kcontrol of this widget.
  @event: Event id.
  Choose dmic clock between 1MHz and 3MHz.
  It is better for clock to approximate 3MHz.
 select over sample rate 
Add delay to avoid pop noise
 Interface data select 
 Digital Mixer 
 Analog Input Mixer 
 STO1 ADC1 Source 
 MX-26 [13] [5] 
 STO1 ADC Source 
 MX-26 [11:10] [3:2] 
 STO1 ADC2 Source 
 MX-26 [12] [4] 
 MX-79 [6:4] I2S1 ADC data location 
 Analog DAC L1 Source, Analog DAC R1 Source
 MX-2B [4], MX-2B [0]
 PLL Powers 
 ASRC 
 Input Side 
 Input Lines 
 Boost 
 REC Mixer 
 ADCs 
 ADC Mux 
 ADC Mixer 
 ADC PGA 
 Digital Interface 
 Digital Interface Select 
 Audio Interface 
 Output Side 
 DAC mixer before sound effect  
 DAC channel Mux 
 DAC Mixer 
 DACs 
 HPO 
 CLK DET 
 SAR 
 Output Lines 
PLL
ASRC
 mono mode 
 mono mode 
 Look at PLLA table 
 Look at PLLB table 
 Find a combination of PLLA & PLLB 
 Only need to power PLLB due to the rate set restriction 
	
	  Only accept to set wclk rate to 44.1k or 48kHz.
	
	  Only accept to set wclk rate to 44.1k or 48kHz.
	  It will force to 48kHz if not both.
	
	  Whether the wclk's parent clk (mclk) exists or not, please ensure
	  it is fixed or set to 48MHz before setting wclk rate. It's a
	  temporary limitation. Only accept 48MHz clk as the clk provider.
	 
	  It will set the codec anyway by assuming mclk is 48MHz.
	
	  To achieve the rate conversion from 48MHz to 44.1k or 48kHz,
	  PLL2 is needed.
	
	  BCLK rates are set as a multiplier of WCLK in HW.
	  We don't allow changing the parent WCLK. We just do
	  some rounding down based on the parent WCLK rate
	  and find the appropriate multiplier of BCLK to
	  get the rounded down BCLK value.
 Make MCLK the parent of WCLK 
 Make WCLK the parent of BCLK 
 Check if MCLK provided 
 Register CCF DAI clock control 
 Initial setup for CCF 
 CONFIG_COMMON_CLK 
 restore settings 
 Sleep for 50 ms minimum 
 DMIC data pin 
 share with LRCK2 
 share with DACDAT1 
 DMIC clk pin 
 share with IRQ 
 share with BCLK2 
 SPDX-License-Identifier: GPL-2.0-only
  ALSA SoC TLV320AIC23 codec driver I2C interface
  Author:      Arun KS, <arunks@mistralsolutions.com>
  Copyright:   (C) 2008 Mistral Solutions Pvt Ltd.,
  Based on soundsoccodecswm8731.c by Richard Purdie
 SPDX-License-Identifier: GPL-2.0-only
  wm8993.c -- WM8993 ALSA SoC audio driver
  Copyright 2009-12 Wolfson Microelectronics plc
  Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
 R1   - Power Management (1) 
 R2   - Power Management (2) 
 R3   - Power Management (3) 
 R4   - Audio Interface (1) 
 R5   - Audio Interface (2) 
 R6   - Clocking 1 
 R7   - Clocking 2 
 R8   - Audio Interface (3) 
 R9   - Audio Interface (4) 
 R10  - DAC CTRL 
 R11  - Left DAC Digital Volume 
 R12  - Right DAC Digital Volume 
 R13  - Digital Side Tone 
 R14  - ADC CTRL 
 R15  - Left ADC Digital Volume 
 R16  - Right ADC Digital Volume 
 R18  - GPIO CTRL 1 
 R19  - GPIO1 
 R20  - IRQ_DEBOUNCE 
 R21  - Inputs Clamp 
 R22  - GPIOCTRL 2 
 R23  - GPIO_POL 
 R24  - Left Line Input 1&2 Volume 
 R25  - Left Line Input 3&4 Volume 
 R26  - Right Line Input 1&2 Volume 
 R27  - Right Line Input 3&4 Volume 
 R28  - Left Output Volume 
 R29  - Right Output Volume 
 R30  - Line Outputs Volume 
 R31  - HPOUT2 Volume 
 R32  - Left OPGA Volume 
 R33  - Right OPGA Volume 
 R34  - SPKMIXL Attenuation 
 R35  - SPKMIXR Attenuation 
 R36  - SPKOUT Mixers 
 R37  - SPKOUT Boost 
 R38  - Speaker Volume Left 
 R39  - Speaker Volume Right 
 R40  - Input Mixer2 
 R41  - Input Mixer3 
 R42  - Input Mixer4 
 R43  - Input Mixer5 
 R44  - Input Mixer6 
 R45  - Output Mixer1 
 R46  - Output Mixer2 
 R47  - Output Mixer3 
 R48  - Output Mixer4 
 R49  - Output Mixer5 
 R50  - Output Mixer6 
 R51  - HPOUT2 Mixer 
 R52  - Line Mixer1 
 R53  - Line Mixer2 
 R54  - Speaker Mixer 
 R55  - Additional Control 
 R56  - AntiPOP1 
 R57  - AntiPOP2 
 R58  - MICBIAS 
 R60  - FLL Control 1 
 R61  - FLL Control 2 
 R62  - FLL Control 3 
 R63  - FLL Control 4 
 R64  - FLL Control 5 
 R65  - Clocking 3 
 R66  - Clocking 4 
 R67  - MW Slave Control 
 R69  - Bus Control 1 
 R70  - Write Sequencer 0 
 R71  - Write Sequencer 1 
 R72  - Write Sequencer 2 
 R73  - Write Sequencer 3 
 R74  - Write Sequencer 4 
 R75  - Write Sequencer 5 
 R76  - Charge Pump 1 
 R81  - Class W 0 
 R85  - DC Servo 1 
 R87  - DC Servo 3 
 R96  - Analogue HP 0 
 R98  - EQ1 
 R99  - EQ2 
 R100 - EQ3 
 R101 - EQ4 
 R102 - EQ5 
 R103 - EQ6 
 R104 - EQ7 
 R105 - EQ8 
 R106 - EQ9 
 R107 - EQ10 
 R108 - EQ11 
 R109 - EQ12 
 R110 - EQ13 
 R111 - EQ14 
 R112 - EQ15 
 R113 - EQ16 
 R114 - EQ17 
 R115 - EQ18 
 R116 - EQ19 
 R117 - EQ20 
 R118 - EQ21 
 R119 - EQ22 
 R120 - EQ23 
 R121 - EQ24 
 R122 - Digital Pulls 
 R123 - DRC Control 1 
 R124 - DRC Control 2 
 R125 - DRC Control 3 
 R126 - DRC Control 4 
 10 due to .5s 
 The size in bits of the FLL divide multiplied by 10
 Fref must be <=13.5MHz 
 Apply the division for our remaining calculations 
 Fvco should be 90-100MHz; don't check the upper bound 
 Find an appropriate FLL_FRATIO and factor it out of the target 
 Now, calculate N.K 
 Calculate fractional part - scale up so we can round. 
 Move down to proper range now rounding is done 
 Any change? 
 Disable the FLL 
	 Any FLL configuration change requires that the FLL be
 Apply the configuration 
 If we've got an interrupt wired up make sure we get it 
 Enable the FLL 
 This should be done on init() for bypass paths 
 VMID=240k 
 Bring up VMID with fast soft start 
			 If either line output is single ended we
 VMID=240k 
 Switch to normal bias 
 VMID=2240k 
 frame inversion not valid for DSP modes 
 What BCLK do we need? 
 Select nearest CLK_SYS_RATE 
 SAMPLE_RATE 
 Closest match 
 BCLK_DIV 
 Table is sorted 
 LRCLK is a simple fraction of BCLK 
 ReTune Mobile? 
 Disable EQ while we reconfigure 
 Don't need to validate anything if we're turning off TDM 
	 Note that we allow configurations we can't handle ourselves - 
	  for example, we can generate clocks for slots 2 and up even if
	  we can't use those slots ourselves.
 The IRQ pin status is visible in the register too 
 Latch volume update bits and default ZC on 
	 Manualy manage the HPOUT sequencing for independent stereo
 Use automatic clock configuration 
	 If the line outputs are differential then we aren't presenting
	  VMID as an output and can disable it.
 Stop the FLL in an orderly fashion 
 Restart the FLL? 
 Tune DC servo configuration 
 Put GPIO1 into interrupt mode (only GPIO1 can output IRQ) 
 SPDX-License-Identifier: GPL-2.0
 Copyright (c) 2016, The Linux Foundation. All rights reserved.
 Codec supports 2 IIR filters 
 Codec supports 5 bands 
 RX1 MIX1 
 RX2 MIX1 
 RX3 MIX1 
 RX1 MIX2 
 RX2 MIX2 
 DEC 
 CIC 
 RDAC2 MUX 
 Digital Gain control -38.4 dB to +38.4 dB in 0.3 dB steps 
 Cutoff Freq for High Pass Filter at -3dB 
 cut off for dc blocker inside rx chain 
 Address does not automatically update if reading 
 Mask bits top 2 bits since they are reserved 
 Mask top 2 bits, 7-8 are reserved 
 Mask top bit it is reserved 
 Updates addr automatically for each B2 write 
 apply the digital gain after the interpolator is enabled 
 Enable TX digital mute 
 set cut of freq to CF_MIN_3DB_150HZ (0x1) 
 enable HPF 
 apply the digital gain after the decimator is enabled 
 get dmic number out of widget name 
RX stuff 
 Interpolator 
 TX 
 Digital Mic Inputs 
 Connectivity Clock 
 Sidetone 
 Decimator Inputs 
 RX1 PATH.. 
 RX2 PATH 
 RX3 PATH 
 SPDX-License-Identifier: GPL-2.0-only
  cs35l35.c -- CS35L35 ALSA SoC audio driver
  Copyright 2017 Cirrus Logic, Inc.
  Author: Brian Austin <brian.austin@cirrus.com>
  Some fields take zero as a valid value so use a high bit flag that won't
  get written to the device to mark those.
 Already muted, so disable volume ramp for faster shutdown 
 If in PDM mode we must use VP for Voltage control 
		
		  If PDM mode we should switch back to pdata value
		  for Voltage control when we go down
 SYSCLK, Sample Rate, Serial Port Cfg 
	
	  Rev A0 Errata
	  When configured for the weak-drive detection path (CH_WKFET_DIS = 0)
	  the Class H algorithm does not enable weak-drive operation for
	  nonzero values of CH_WKFET_DELAY if SP_RATE = 01 or 10
	
	  You can pull more Monitor data from the SDOUT pin than going to SDIN
	  Just make sure your SCLK is fast enough to fill the frame
		 We have to take the SCLK to derive num sclks
		  to configure the CLOCK_CTL3 register correctly
 Only certain ratios supported when device is a clock consumer 
 Only certain ratios supported when device is a clock provider 
 Need the SCLK Frequency regardless of sysclk source for I2S 
	
	  Digital Boost Converter Configuration for feedback,
	  ramping, switching frequency, and estimation block seeding.
 1 uH 
 1.2 uH 
 1.5uH 
 2.2uH 
 Set Platform Data 
 ack the irq by reading all status registers 
 Check to see if unmasked bits are active 
 read the current values 
 handle the interrupts 
 error is no longer asserted; safe to reset 
 error is no longer asserted; safe to reset 
 error is no longer asserted; safe to reset 
 error is no longer asserted; safe to reset 
 frame depth location 
 Errata Rev A0 
 returning NULL can be valid if in stereo mode 
 initialize codec 
 Set the INT Masks for critical errors 
 SPDX-License-Identifier: GPL-2.0
 mt6358.c  --  mt6358 ALSA SoC audio codec driver
 Copyright (c) 2018 MediaTek Inc.
 Author: KaiChieh Chuang <kaichieh.chuang@mediatek.com>
 Supply widget subseq 
 common 
 capture 
 set gpio mosi mode 
	 set pad_aud__mosi to GPIO mode and dir input
	  reason:
	  pad_aud_dat_mosi, because the pin is used as boot strap
	  don't clean clksync, for mtkaif protocol 2
 set gpio miso mode 
	 set pad_aud__miso to GPIO mode and dir input
	  reason:
	  pad_aud_clk_miso, because when playback only the miso_clk
	  will also have 26m, so will have power leak
	  pad_aud_dat_miso, because the pin is used as boot strap
 use only when not govern by DAPM 
 use only when not govern by DAPM 
 audio clk source from internal dcxo 
 Enabledisable CLKSQ 26MHz 
 use only when not govern by DAPM 
 use only when not govern by DAPM 
 MTKAIF TX format setting 
 enable aud_pad TX fifos 
 MTKAIF TX format setting 
 enable aud_pad TX fifos 
 MTKAIF TX format setting 
 enable aud_pad TX fifos 
 disable aud_pad TX fifos 
 set dat_miso_loopback on 
 set dat_miso_loopback off 
 dl pga gain 
 EnableReduce HPLR main output stage step by step 
 Reduce HP aux feedback loop gain step by step 
 analog 
 digital 
 digital 
 analog 
 dl pga gain 
 ul pga gain 
 MUX 
 LOL MUX 
HP MUX 
 RCV MUX 
 DAC In MUX 
 AIF Out MUX 
 Mic Type MUX 
 ADC L MUX 
 ADC R MUX 
 PGA L MUX 
 PGA R MUX 
 audio clk source from internal dcxo 
 sdm audio fifo clock power on 
 scrambler clock on enable 
 sdm power on 
 sdm fifo enable 
 DL scrambler disabling sequence 
 sdm audio fifo clock power on 
 scrambler clock on enable 
 sdm power on 
 sdm fifo enable 
 DL scrambler disabling sequence 
 Pull-down HPLR to AVSS28_AUD 
 release HP CMFB gate rstb 
 Reduce ESD resistance of AU_REFN 
 Set HPRHPL gain as minimum (~ -40dB) 
 Turn on DA_600K_NCP_VA18 
 26MHz43 = 604KHz 
 Toggle RG_DIVCKS_CHG 
 Set NCP soft start mode as default mode: 100us 
 Enable NCP 
 Enable cap-less LDOs (1.5V) 
 Enable NV regulator (-1.2V) 
 Disable AUD_ZCD 
 Disable headphone short-circuit protection 
 Enable IBIST 
 Set HP DR bias current optimization, 010: 6uA 
 Set HP & ZCD bias current optimization 
 01: ZCD: 4uA, HPHSLO: 5uA 
 Set HPPN STB enhance circuits 
 Enable HP aux output stage 
 Enable HP aux feedback loop 
 Enable HP aux CMFB loop 
 Enable HP driver bias circuits 
 Enable HP driver core circuits 
 Short HP main output to HP aux output stage 
 Enable HP main CMFB loop 
 Disable HP aux CMFB loop 
 Select CMFB resistor bulk to AC mode 
 Selec HSLO cap size (6.5pF default) 
 Enable HP main output stage 
 Enable HPRL main output stage step by step 
 Reduce HP aux feedback loop gain 
 Disable HP aux feedback loop 
 apply volume setting 
 Disable HP aux output stage 
 Unshort HP main output to HP aux output stage 
 Enable AUD_CLK 
 Enable Audio DAC  
 Enable low-noise mode of DAC 
 Switch HPL MUX to audio DAC 
 Switch HPR MUX to audio DAC 
 Disable Pull-down HPLR to AVSS28_AUD 
 Pull-down HPLR to AVSS28_AUD 
 HPRHPL mux to open 
 Disable low-noise mode of DAC 
 Disable Audio DAC 
 Disable AUD_CLK 
 Short HP main output to HP aux output stage 
 Enable HP aux output stage 
 decrease HPLR gain to normal gain step by step 
 Enable HP aux feedback loop 
 Reduce HP aux feedback loop gain 
 decrease HPRL main output stage step by step 
 Disable HP main output stage 
 Enable HP aux CMFB loop 
 Disable HP main CMFB loop 
 Unshort HP main output to HP aux output stage 
 Disable HP driver core circuits 
 Disable HP driver bias circuits 
 Disable HP aux CMFB loop 
 Disable HP aux feedback loop 
 Disable HP aux output stage 
 Disable IBIST 
 Disable NV regulator (-1.2V) 
 Disable cap-less LDOs (1.5V) 
 Disable NCP 
 Increase ESD resistance of AU_REFN 
 Set HP CMFB gate rstb 
 disable Pull-down HPLR to AVSS28_AUD 
 Pull-down HPLR to AVSS28_AUD 
 release HP CMFB gate rstb 
 Reduce ESD resistance of AU_REFN 
 Set HPRHPL gain to -10dB 
 Turn on DA_600K_NCP_VA18 
 26MHz43 = 604KHz 
 Toggle RG_DIVCKS_CHG 
 Set NCP soft start mode as default mode: 100us 
 Enable NCP 
 Enable cap-less LDOs (1.5V) 
 Enable NV regulator (-1.2V) 
 Disable AUD_ZCD 
 Disable headphone short-circuit protection 
 Enable IBIST 
 Set HP DR bias current optimization, 010: 6uA 
 Set HP & ZCD bias current optimization 
 01: ZCD: 4uA, HPHSLO: 5uA 
 Set HPPN STB enhance circuits 
 Disable Pull-down HPLR to AVSS28_AUD 
 Enable HP driver bias circuits 
 Enable HP driver core circuits 
 Enable HP main CMFB loop 
 Select CMFB resistor bulk to AC mode 
 Selec HSLO cap size (6.5pF default) 
 Enable HP main output stage 
 Enable HPRL main output stage step by step 
 Set LO gain as minimum (~ -40dB) 
 apply volume setting 
 Set LO STB enhance circuits 
 Enable LO driver bias circuits 
 Enable LO driver core circuits 
 Set LOL gain to normal gain step by step 
 Enable AUD_CLK 
 Enable Audio DAC  
 Enable low-noise mode of DAC 
 Switch LOL MUX to audio DAC 
 Switch HPLR MUX to Line-out 
 HPRHPL mux to open 
 LOL mux to open 
 Disable Audio DAC 
 Disable AUD_CLK 
 decrease HPLR gain to normal gain step by step 
 decrease LOL gain to minimum gain step by step 
 decrease HPRL main output stage step by step 
 Disable HP main output stage 
 Short HP main output to HP aux output stage 
 Enable HP aux output stage 
 Enable HP aux feedback loop 
 Reduce HP aux feedback loop gain 
 Disable HP driver core circuits 
 Disable LO driver core circuits 
 Disable HP driver bias circuits 
 Disable LO driver bias circuits 
 Disable HP aux CMFB loop 
 Disable IBIST 
 Disable NV regulator (-1.2V) 
 Disable cap-less LDOs (1.5V) 
 Disable NCP 
 Set HP CMFB gate rstb 
 disable Pull-down HPLR to AVSS28_AUD 
 already enabled, do nothing 
 still being used, don't close 
 Reduce ESD resistance of AU_REFN 
 Turn on DA_600K_NCP_VA18 
 26MHz43 = 604KHz 
 Toggle RG_DIVCKS_CHG 
 Set NCP soft start mode as default mode: 100us 
 Enable NCP 
 Enable cap-less LDOs (1.5V) 
 Enable NV regulator (-1.2V) 
 Disable AUD_ZCD 
 Disable handset short-circuit protection 
 Enable IBIST 
 Set HP DR bias current optimization, 010: 6uA 
 Set HP & ZCD bias current optimization 
 01: ZCD: 4uA, HPHSLO: 5uA 
 Set HS STB enhance circuits 
 Disable HP main CMFB loop 
 Select CMFB resistor bulk to AC mode 
 Selec HSLO cap size (6.5pF default) 
 Enable HS driver bias circuits 
 Enable HS driver core circuits 
 Enable AUD_CLK 
 Enable Audio DAC  
 Enable low-noise mode of DAC 
 Switch HS MUX to audio DAC 
 HS mux to open 
 Disable Audio DAC 
 Disable AUD_CLK 
 decrease HS gain to minimum gain step by step 
 Disable HS driver core circuits 
 Disable HS driver bias circuits 
 Disable HP aux CMFB loop 
 Enable HP main CMFB Switch 
 Disable IBIST 
 Disable NV regulator (-1.2V) 
 Disable cap-less LDOs (1.5V) 
 Disable NCP 
 Enable audio ADC CLKGEN  
 ADC CLK from CLKGEN (13MHz) 
 Enable  LCLDO_ENC 1P8V 
 LCLDO_ENC remote sense 
 LCLDO_ENC remote sense off 
 disable LCLDO_ENC 1P8V 
 ADC CLK from CLKGEN (13MHz) 
 disable audio ADC CLKGEN  
 DCC 50k CLK (from 26M) 
 mic bias 0 
 Enable MICBIAS0, MISBIAS0 = 1P9V 
 mic bias 1 
 Enable MICBIAS1, MISBIAS1 = 2P6V 
 Audio LR preamplifier DCC precharge 
 reset reg 
 L preamplifier input sel 
 L preamplifier enable 
 L preamplifier DCCEN 
 L ADC input sel : L PGA. Enable audio L ADC 
 R preamplifier input sel 
 R preamplifier enable 
 R preamplifier DCCEN 
 R ADC input sel : R PGA. Enable audio R ADC 
 Audio L preamplifier DCC precharge off 
 Audio R preamplifier DCC precharge off 
 Short body to ground in PGA 
 here to set digital part 
 UL dmic setting off 
 UL turn on 
 UL turn off 
 disable aud_pad TX fifos 
 L ADC input sel : off, disable L ADC 
 L preamplifier DCCEN 
 L preamplifier input sel : off, L PGA 0 dB gain 
 disable L preamplifier DCC precharge 
 R ADC input sel : off, disable R ADC 
 R preamplifier DCCEN 
 R preamplifier input sel : off, R PGA 0 dB gain 
 disable R preamplifier DCC precharge 
 mic bias 
 Disable MICBIAS0, MISBIAS0 = 1P7V 
 Disable MICBIAS1 
 dcclk_gen_on=1'b0 
 dcclk_pdn=1'b1 
 dcclk_ref_ck_sel=2'b00 
 dcclk_div=11'b00100000011 
 mic bias 
 Enable MICBIAS0, MISBIAS0 = 1P9V 
 RG_BANDGAPGEN=1'b0 
 DMIC enable 
 here to set digital part 
 UL dmic setting 
 UL turn on 
 Prevent pop noise form dmic hw 
 UL turn off 
 disable aud_pad TX fifos 
 DMIC disable 
 mic bias 
 MISBIAS0 = 1P7V 
 RG_BANDGAPGEN=1'b0 
 MICBIA0 disable 
 DAPM Widgets 
 Global Supply
 Digital Clock 
 AFE ON 
 AIF Rx
 DL Supply 
 DAC 
 LOL 
 Headphone 
 Receiver 
 Outputs 
 SGEN 
 Uplinks 
 Uplinks MUX 
 UL input 
 Capture 
 DL Supply 
 DL Digital Supply 
 DL Path 
 Lineout Path 
 Headphone Path 
 Receiver Path 
 Disable HeadphoneLHeadphoneR short circuit protection 
 Disable voice short circuit protection 
 disable LO buffer left short circuit protection 
 accdet sw enable 
 gpio miso driving set to 4mA 
 set gpio 
 Module information 
 SPDX-License-Identifier: GPL-2.0-only
  PCM3168A codec driver
  Copyright (C) 2015 Imagination Technologies Ltd.
  Author: Damien Horsley <Damien.Horsley@imgtec.com>
 ADCDAC side parameters 
 -100db to 0db, register values 0-54 cause mute 
 -100db to 20db, register values 0-14 cause mute 
 Playback 
 Capture 
 Internal reset is de-asserted after 3846 SCKI cycles 
	
	  Some sound card sets 0 Hz as reset,
	  but it is impossible to set. Ignore it here
 S16_LE is only supported in RIGHT_J mode 
		
		  If multi DINDOUT is not selected, RIGHT_J can only support
		  two channels (no TDM support)
 Ignore the not relevant mask for the DAIdirection 
	
	  Switch the codec to TDM mode when more than 2 TDM slots are needed
	  for the stream.
	  If pcm3168a->tdm_slots is not set or set to more than 2 (86 usually)
	  then DIN1DOUT1 is used in TDM mode.
	  If pcm3168a->tdm_slots is set to 2 then DIN1234 and DOUT123 is
	  used in normal mode, no need to switch to TDM modes.
	
	  Select below from Sound Card, not here
	 	SND_SOC_DAIFMT_CBC_CFC
	 	SND_SOC_DAIFMT_CBP_CFP
	
	  First Priority
	
	  Second Priority
	 
	  These have picky limitation.
	  see
	 	pcm3168a_hw_params()
	
	  Request the reset (connected to RST pin) gpio line as non exclusive
	  as the same reset line might be connected to multiple pcm3168a codec
	 
	  The RST is low active, we want the GPIO line to be high initially, so
	  request the initial level to LOW which in practice means DEASSERTED:
	  The deasserted level of GPIO_ACTIVE_LOW is HIGH.
		
		  The device is taken out from reset via GPIO line, wait for
		  3846 SCKI clock cycles for the internal reset de-assertion
	
	  The RST is low active, we want the GPIO line to be low when the
	  driver is removed, so set level to 1 which in practice means
	  ASSERTED:
	  The asserted level of GPIO_ACTIVE_LOW is LOW.
 SPDX-License-Identifier: GPL-2.0
 cs35l41-i2c.c -- CS35l41 I2C driver
 Copyright 2017-2021 Cirrus Logic, Inc.
 Author: David Rhodes <david.rhodes@cirrus.com>
 Cirrus Logic PnP ID + part ID 
 SPDX-License-Identifier: GPL-2.0-only
  wm8741.c  --  WM8741 ALSA SoC Audio driver
  Copyright 2010-1 Wolfson Microelectronics plc
  Author: Ian Lartey <ian@opensource.wolfsonmicro.com>
 codec private data 
 R0  - DACLLSB Attenuation 
 R1  - DACLMSB Attenuation 
 R2  - DACRLSB Attenuation 
 R3  - DACRMSB Attenuation 
 R4  - Volume Control 
 R5  - Format Control 
 R6  - Filter Control 
 R7  - Mode Control 1 
 R8  - Mode Control 2 
 R32 - ADDITONAL_CONTROL_1 
	 The set of sample rates that can be supported depends on the
	  MCLK supplied to the CODEC - enforce this.
 Find a supported LRCLK rate 
 bit size 
 oversampling rate 
 check masterslave audio interface 
 interface format 
 clock inversion 
 Configure differential mode 
 Change some default settings - latch VU 
 CONFIG_SPI_MASTER 
 SPDX-License-Identifier: GPL-2.0-only
  wm8900.c  --  WM8900 ALSA Soc Audio driver
  Copyright 2007, 2008 Wolfson Microelectronics PLC.
  Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
  TODO:
   - Tristating.
   - TDM.
   - Jack detect.
   - FLL source configuration, currently only MCLK is supported.
 WM8900 register space 
 FLL input frequency 
 FLL output frequency 
  wm8900 register cache.  We can't read the entire register space and we
  have slow control buses so we cache the registers.
 Clamp headphone outputs 
 Enable the input stage 
 Enable the output stage 
 Remove the shorts 
 Short the output 
 Disable the output stage 
 Clamp the outputs and power down input 
 Disable everything 
 Externally visible pins 
 Input 
 Output 
 Target, Path, Source 
 Inputs 
 Outputs 
 Note that the headphone output stage needs to be connected
  externally to LINEOUT2 via DC blocking capacitors.  Other
  configurations are not supported.
  Note also that left and right headphone paths are treated as a
  mono path.
 FLL divisors 
 The size in bits of the FLL divide multiplied by 10
	 The FLL must run at 90-100MHz which is then scaled down to
 Calculate fractional part - scale up so we can round. 
 Move down to proper range now rounding is done 
 The digital side should be disabled during any change. 
 Disable the FLL? 
	 The osclilator MUST be enabled before we enable the
 set masterslave audio interface 
 Clock inversion 
 frame inversion not valid for DSP modes 
 Enable thermal shutdown 
 Charge capacitors if initial power up 
 STARTUP_BIAS_ENA on 
 Startup bias mode 
 VMID 2x50k 
 Allow capacitors to charge 
 Enable bias 
 Startup bias enable 
 Discharge caps 
 Remove clamp 
 Power down 
		 Need to let things settle before stopping the clock
		  to ensure that restart works, see "Stopping the
 Stop the FLL in an orderly fashion 
 Restart the FLL? 
 Turn the chip on 
 Latch the volume update bits 
 Set the DAC and mixer output bias 
 CONFIG_SPI_MASTER 
 SPDX-License-Identifier: GPL-2.0-or-later
  TAS571x amplifier audio driver
  Copyright (C) 2015 Google, Inc.
  Copyright (c) 2013 Daniel Mack <zonque@gmail.com>
  TAS5721 support:
  Copyright (C) 2016 Petr Kulhavy, Barix AG <petr@barix.com>
  TAS5707 support:
  Copyright (C) 2018 Jerome Brunet, Baylibre SAS <jbrunet@baylibre.com>
  register write for 8- and 20-byte registers
  register read for 8- and 20-byte registers
  Integer array controls for setting biquad, mixer, DRC coefficients.
  According to the datasheet each coefficient is effectively 26bits,
  i.e. stored as 32bits, where bits [31:26] are ignored.
  TI's TAS57xx Graphical Development Environment tool however produces
  coefficients with more than 26 bits. For this reason we allow values
  in the full 32-bits reange.
  The coefficients are ordered as given in the TAS571x data sheet:
  b0, b1, b2, a1, a2
 MVOL LSB is ignored - see comments in tas571x_i2c_probe() 
	
	  The biquads are named according to the register names.
	  Please note that TI's TAS57xx Graphical Development Environment
	  tool names them different.
 This entry is reused for tas5719 as the software interface is identical. 
 pulse the active low reset line for ~100us 
		
		  The master volume defaults to 0x3ff (mute), but we ignore
		  (zero) the LSB because the hardware step size is 0.125 dB
		  and TLV_DB_SCALE_ITEM has a resolution of 0.01 dB.
 SPDX-License-Identifier: GPL-2.0-only
  cs42l52.c -- CS42L52 ALSA SoC audio driver
  Copyright 2012 CirrusLogic, Inc.
  Author: Georgi Vlaev <joe@nucleusys.com>
  Author: Brian Austin <brian.austin@cirrus.com>
 r02 PWRCTL 1 
 r03 PWRCTL 2 
 r04 PWRCTL 3 
 r05 Clocking Ctl 
 r06 Interface Ctl 1 
 r08 Input A Select 
 r09 Input B Select 
 r0A Analog HPF Ctl 
 r0B ADC HPF Corner Freq 
 r0C Misc. ADC Ctl 
 r0D Playback Ctl 1 
 r0E Misc. Ctl 
 r0F Playback Ctl 2 
 r10 MICA Amp Ctl 
 r11 MICB Amp Ctl 
 r12 PGAA Vol, Misc. 
 r13 PGAB Vol, Misc. 
 r14 Bypass A Vol 
 r15 Bypass B Vol 
 r16 ADCA Volume 
 r17 ADCB Volume 
 r18 ADCA Mixer Volume 
 r19 ADCB Mixer Volume 
 r1A PCMA Mixer Volume 
 r1B PCMB Mixer Volume 
 r1C Beep Freq on Time 
 r1D Beep Volume off Time 
 r1E Beep Tone Cfg. 
 r1F Tone Ctl 
 r20 Master A Volume 
 r21 Master B Volume 
 r22 Headphone A Volume 
 r23 Headphone B Volume 
 r24 Speaker A Volume 
 r25 Speaker B Volume 
 r26 Channel Mixer and Swap 
 r27 Limit Ctl 1 Thresholds 
 r28 Limit Ctl 2 Release Rate 
 r29 Limiter Attack Rate 
 r2A ALC Ctl 1 Attack Rate 
 r2B ALC Release Rate 
 r2C ALC Thresholds 
 r2D Noise Gate Ctl 
 r2E Overflow and Clock Status 
 r2F battery Compensation 
 r30 VP Battery Level 
 r31 Speaker Status 
 r32 Temp Ctl 
 r33 Foldback 
 Limiter 
 ALC 
 Noise gate 
8k
11.025k
16k
22.05k
 32k 
 44.1k 
 48k 
 88.2k 
 96k 
 interface format 
 clock inversion 
 For usability define a way of injecting beep events for the device -
  many systems will not have a keyboard.
 Kick the beep from a workqueue 
 Current and threshold powerup sequence Pg37 
 Set Platform Data 
 SPDX-License-Identifier: GPL-2.0
 ak4642.c  --  AK4642AK4643 ALSA Soc Audio driver
 Copyright (C) 2009 Renesas Solutions Corp.
 Kuninori Morimoto <morimoto.kuninori@renesas.com>
 Based on wm8731.c by Richard Purdie
 Based on ak4535.c by Richard Purdie
 Based on wm8753.c by Liam Girdwood
  CAUTION 
  This is very simple driver.
  It can use headphone output  stereo input only
  AK4642 is tested.
  AK4643 is tested.
  AK4648 is tested.
 The maximum valid register for ak4642 
 The maximum valid register for ak4643 
 The maximum valid register for ak4648 
 PW_MGMT1
 VCOM Power Management 
 MIN Input Power Management 
 DAC Power Management 
 MIC Amp Lch and ADC Lch Power Management 
 PW_MGMT2 
 masterslave select 
 PW_MGMT3 
 MIC L  ADC R Power Management 
 SG_SL1 
 Switch from MIN to Speaker 
 Switch from DAC to Stereo or Receiver 
 MPWR pin Power Management 
 MIC amp gain
 SG_SL2 
 Stero Line-out Power Save Mode 
 TIMER 
 ALC Zero Crossing TimeOut 
 ALC_CTL1 
 ALC Enable 
 ALC Limiter  Recovery Level 
 MD_CTL1 
 MD_CTL2 
 MD_CTL3 
 MD_CTL4 
  Playback Volume (table 39)
  max : 0x00 : +12.0 dB
        ( 0.5 dB step )
  min : 0xFE : -115.0 dB
  mute: 0xFF
 event handlers 
 Power save mode ON 
 Power save mode OFF 
 Outputs 
 DAC 
 Outputs 
  ak4642 register cache
 The default settings for 0x0 ~ 0x1f registers are the same for ak4642
   and ak4643. So we reuse the ak4643 reg_default for ak4642.
   The valid registers for ak4642 are 0x0 ~ 0x1f which is a subset of ak4643,
   so define NUM_AK4642_REG_DEFAULTS for ak4642.
		
		  start headphone output
		 
		  PLL, Master Mode
		  Audio IF Format :MSB justified (ADC & DAC)
		  Bass Boost Level : Middle
		 
		  This operation came from example code of
		  "ASAHI KASEI AK4642" (japanese) manual p97.
 volume 
 volume 
		
		  start stereo input
		 
		  PLL Master Mode
		  Audio IF Format:MSB justified (ADC & DAC)
		  Pre MIC AMP:+20dB
		  MIC Power On
		  ALC setting:Refer to Table 35
		  ALC bit=“1”
		 
		  This operation came from example code of
		  "ASAHI KASEI AK4642" (japanese) manual p94.
 stop stereo input 
 use MCKO 
 set clocking for audio interface 
 format type 
	 FIXME
	  Please add RIGHT_J  DSP support here
 SPDX-License-Identifier: GPL-2.0-or-later
  PCM179X ASoC codec driver
  Copyright (c) Amarula Solutions B.V. 2013
      Michael Trimarchi <michael@amarulasolutions.com>
 SPDX-License-Identifier: GPL-2.0-or-later
  Driver for generic Bluetooth SCO link
  Copyright 2011 Lars-Peter Clausen <lars@metafoo.de>
 SPDX-License-Identifier: GPL-2.0
 Analog Devices ADAU7118 8 channel PDM-to-I2STDM Converter driver
 Copyright 2019 Analog Devices Inc.
 Input Enable 
 Input Enable Switches 
 PDM Clocks 
 Output channels 
 set stereo mode 
 delay bclck by 8 
 delay bclck by 12 
 delay bclck by 16 
 power on 
 there's no timing constraints before enabling dvdd 
 sync cache 
 power off 
 cache only 
	
	  If we fail to disable DVDD, don't bother in trying IOVDD. We
	  actually don't want to be left in the situation where DVDD
	  is enabled and IOVDD is disabled.
 just assume the device is in reset 
 4 inputs 
		
		  Perform a full soft reset. This will set all register's
		  with their reset values.
 SPDX-License-Identifier: GPL-2.0-only
  wm0010.c  --  WM0010 DSP Driver
  Copyright 2012 Wolfson Microelectronics PLC.
  Authors: Mark Brown <broonie@opensource.wolfsonmicro.com>
           Dimitris Papastamos <dp@opensource.wolfsonmicro.com>
           Scott Ling <sl@opensource.wolfsonmicro.com>
 We only support v1 of the .dfw INFO record 
 Dividers 
 2,32,2  
 2,64,4  
 1,39,4  
 1,50,4  
 1,70,4  
 1,64,2  
 Called with wm0010->lock held 
 Fetch the wm0010 state 
 If there's nothing to do, bail out 
 Remember to put chip back into reset 
 Disable the regulators 
 Called with wm0010->lock held 
 First record should be INFO 
 Check it's a DSP file 
 Skip the info record as we don't need to send it 
 Store max usable spi frequency for later use 
 Copy to local buffer first as vmalloc causes problems for dma 
 Look for errors from the boot ROM 
 Release reset 
 Only initialise PLL if max_spi_freq initialised 
 Initialise a PLL record 
 On wm0010 only the CLKCTRL1 value is used 
 We need to re-order for 0010 
 Use a second send of the message to get the return status 
 Look for PLL active code from the DSP 
 Put the chip back into reset 
 SPDX-License-Identifier: GPL-2.0-only
  ak4535.c  --  AK4535 ALSA Soc Audio driver
  Copyright 2005 Openedhand Ltd.
  Author: Richard Purdie <richard@openedhand.com>
  Based on wm8753.c by Liam Girdwood
 codec private data 
  ak4535 register cache
 Mono 1 Mixer 
 Stereo Mixer 
 Input Mixer 
 Input mux 
 HP L switch 
 HP R switch 
 mono 2 switch 
 Line out switch 
 ak4535 dapm widgets 
 speaker powersave bit 
stereo mixer 
 mono1 mixer 
 Mic 
 line out 
 mono1 out 
 left HP 
 right HP 
 speaker 
 mono 2 
 Aux In 
 ADC 
 set fs 
 set rate 
 interface format 
 use 32 fs for BCLK to save power 
 SPDX-License-Identifier: GPL-2.0-only
  ADAU7002 Stereo PDM-to-I2STDM converter driver
  Copyright 2014-2016 Analog Devices
   Author: Lars-Peter Clausen <lars@metafoo.de>
 SPDX-License-Identifier: GPL-2.0
 Audio driver for PCM1789 I2C
 Copyright (C) 2018 Bootlin
 Mylène Josserand <mylene.josserand@bootlin.com>
 SPDX-License-Identifier: GPL-2.0-only
 ALSA SoC Audio driver for CS47L85 codec
 Copyright (C) 2015-2019 Cirrus Logic, Inc. and
                         Cirrus Logic International Semiconductor Ltd.
 Only get to here for OUT1L and OUT1R 
  Input mux widgets arranged in order of sources in MADERA_MIXER_INPUT_ROUTES
  to take advantage of cache lookup in DAPM
 End of ordered input mux widgets 
 Internal clock domains 
 quick exit if Madera irqchip driver hasn't completed probe 
 Latch volume update bits 
 SPDX-License-Identifier: GPL-2.0-only
 ALSA SoC Audio driver for CS47L90 codec
 Copyright (C) 2015-2019 Cirrus Logic, Inc. and
                         Cirrus Logic International Semiconductor Ltd.
  mux_in widgets : arranged in the order of sources
  specified in MADERA_MIXER_INPUT_ROUTES
 end of ordered widget list 
 Internal clock domains 
 quick exit if Madera irqchip driver hasn't completed probe 
 Latch volume update bits 
 SPDX-License-Identifier: GPL-2.0-only
  wm8978.c  --  WM8978 ALSA SoC Audio Codec driver
  Copyright (C) 2009-2010 Guennadi Liakhovetski <g.liakhovetski@gmx.de>
  Copyright (C) 2007 Carlos Munoz <carlos@kenati.com>
  Copyright 2006-2009 Wolfson Microelectronics PLC.
  Based on wm8974 and wm8990 by Liam Girdwood <lrg@slimlogic.co.uk>
 codec private data 
 OUT1 - Headphones 
 OUT2 - Speakers 
 OUT34 - Line Output 
 Mixer #3: Boost (Input) mixer 
 Input PGA volume 
 Headphone 
 Speaker 
 DAC  ADC oversampling 
 Mixer #1: Output (OUT1, OUT2) Mixer: mix AUX, Input mixer output and DAC 
 OUT3OUT4 Mixer not implemented 
 Mixer #2: Input PGA Mute 
 Mixer #1: OUT1,2 
 Output mixer 
 Outputs 
 Boost Mixer 
 Input PGA 
 PLL divisors 
 MCLK dividers 
  find index >= idx, such that, for a given f_out,
  3  f_mclk  4 <= f_PLLOUT < 13  f_mclk  4
  f_out can be f_256fs or f_opclk, currently only used for f_256fs. Can be
  generalised for f_opclk with suitable coefficient arrays, but currently
  the OPCLK divisor is calculated directly, not iteratively.
  Calculate internal frequencies and dividers, according to Figure 40
  "PLL and Clock Select Circuit" in WM8978 datasheet Rev. 2.6
 Cannot set up MCLK divider now, do later 
		
		  The user needs OPCLK. Choose OPCLKDIV to put
		  6 <= R = f2  f1 < 13, 1 <= OPCLKDIV <= 4.
		  f_opclk = f_mclk  prescale  R  4  OPCLKDIV, where
		  prescale = 1, or prescale = 2. Prescale is calculated inside
		  pll_factors(). We have to select f_PLLOUT, such that
		  f_mclk  3  4 <= f_PLLOUT < f_mclk  13  4. Must be
		  f_mclk  3  16 <= f_opclk < f_mclk  13  4.
 Have to use OPCLKDIV 
		
		  Not using OPCLK, but PLL is used for the codec, choose R:
		  6 <= R = f2  f1 < 13, to put 1 <= MCLKDIV <= 12.
		  f_256fs = f_mclk  prescale  R  4  MCLKDIV, where
		  prescale = 1, or prescale = 2. Prescale is calculated inside
		  pll_factors(). We have to select f_PLLOUT, such that
		  f_mclk  3  4 <= f_PLLOUT < f_mclk  13  4. Must be
		  f_mclk  3  48 <= f_256fs < f_mclk  13  4. This means MCLK
		  must be 3.781MHz <= f_MCLK <= 32.768MHz
 Turn PLL off for configuration... 
 ...and on again 
 Output PLL (OPCLK) to GPIO1 
  Configure WM8978 clock dividers.
			
			  We know the MCLK frequency, the user has requested
			  OPCLK, configure the PLL based on that and start it
			  and OPCLK immediately. We will configure PLL to match
			  user-requested OPCLK frquency as good as possible.
			  In fact, it is likely, that matching the sampling
			  rate, when it becomes known, is more important, and
			  we will not be reconfiguring PLL then, because we
			  must not interrupt OPCLK. But it should be fine,
			  because typically the user will request OPCLK to run
			  at 256fs or 512fs, and for these cases we will also
			  find an exact MCLK divider configuration - it will
			  be equal to or double the OPCLK divisor.
  @freq:	when .set_pll() us not used, freq is codec MCLK input frequency
 Even if MCLK is used for system clock, might have to drive OPCLK 
 Our sysclk is fixed to 256  fs, will configure in .hw_params()  
 Clock CODEC directly from MCLK 
 GPIO1 into default mode as input - before configuring PLL 
 Turn off PLL 
  Set ADC and Voice DAC format.
	
	  BCLK polarity mask = 0x100, LRC clock polarity mask = 0x80,
	  Data Format mask = 0x18: all will be calculated anew
 set masterslave audio interface 
 interface format 
 clock inversion 
  Set PCM DAI bit size and sample rate.
 Word length mask = 0x60 
 Sampling rate mask = 0xe (for filters) 
 bit size 
 filter coefficient 
 Sampling rate is known now, can configure the MCLK divider 
 We only enter here, if OPCLK is not used 
 Either MCLK is used directly, or OPCLK is used 
 OPCLK not used, codec driven by PLL 
 MCLK divisor mask = 0xe0 
 Run CODEC from PLL instead of MCLK 
 Clock CODEC directly from MCLK 
 VMID 75k 
 bit 3: enable bias, bit 2: enable IO tie off buffer 
 Initial cap charge at VMID 5k 
 VMID 500k 
 Preserve PLL - OPCLK may be used by someone 
 Also supports 12kHz 
 Also switch PLL off 
 Sync reg_cache with the hardware 
 Switch PLL on 
  These registers contain an "update" bit - bit 8. This means, for example,
  that one can write new DAC digital volume for both channels, but only when
  the update bit is set, will also the volume be updated - simultaneously for
  both channels.
	
	  Set default system clock to PLL, it is more precise, this is also the
	  default hardware setting
	
	  Set the update bit in all registers, that have one. This way all
	  writes to those registers will also cause the update bit to be
	  written.
 Reset the codec 
 SPDX-License-Identifier: GPL-2.0-only
  rt5616.c  --  RT5616 ALSA SoC audio codec driver
  Copyright 2015 Realtek Semiconductor Corp.
  Author: Bard Liao <bardliao@realtek.com>
 {0, +20, +24, +30, +35, +40, +44, +50, +52} dB 
 Headphone Output Volume 
 OUTPUT Control 
 DAC Digital Volume 
 IN1IN2 Control 
 INLINR Volume Control 
 ADC Digital Volume Control 
 ADC Boost Volume Control 
 Digital Mixer 
 Analog Input Mixer 
 Analog Output Mixer 
 depop parameters 
 headphone amp power on 
 headphone amp power down 
 headphone unmute sequence 
 headphone mute sequence 
 Input Side 
 micbias 
 Input Lines 
 Boost 
 Input Volume 
 REC Mixer 
 ADCs 
 ADC Mixer 
 Digital Interface 
 Digital Interface Select 
 Audio Interface 
 Audio DSP 
 Output Side 
 DAC mixer before sound effect  
 DAC Mixer 
 DACs 
 OUT Mixer 
 Output Volume 
 HPOLOUTMono Mixer 
 Output Lines 
		
		  SND_SOC_BIAS_PREPARE is called while preparing for a
		  transition to ON or away from ON. If current bias_level
		  is SND_SOC_BIAS_ON, then it is preparing for a transition
		  away from ON. Disable the clock in that case, otherwise
		  enable it.
 Check if MCLK provided 
 SPDX-License-Identifier: GPL-2.0
 Driver for the Texas Instruments TAS2562 CODEC
 Copyright (C) 2019 Texas Instruments Inc.
 DVC equation involves floating point math
  round(10^(volume in dB20)2^30)
  so create a lookup table for 2dB step
 Do not change slot width 
 Digital Volume Control. From 0 dB to -110 dB in 1 dB steps 
	
	  The shut-down property is deprecated but needs to be checked for
	  backwards compatibility.
 SPDX-License-Identifier: GPL-2.0
  Copyright 2011-2019 NW Digital Radio
  Author: Annaliese McDermond <nh6z@nh6z.net>
  Based on soundsoccodecswm8974 and TI driver for kernel 2.6.27.
 sentinel  }
 senitel  }
 SPDX-License-Identifier: GPL-2.0-only
  rt286.c  --  RT286 ALSA SoC audio codec driver
  Copyright 2013 Realtek Semiconductor Corp.
  Author: Bard Liao <bardliao@realtek.com>
 power on HV,VERF 
 power LDO1 
 enable IRQ 
 Send an initial empty report 
 disable IRQ 
 Digital Mixer 
 Analog Input Mixer 
 ADC0 source 
 HP-OUT source 
 SPK-OUT source 
 Input Lines 
 DMIC 
 REC Mixer 
 ADCs 
 ADC Mux 
 Audio Interface 
 Output Side 
 DACs 
 Output Mux 
 Output Mixer 
 Output Pga 
 Output Lines 
 bit 14 0:48K 1:44.1K 
 bit 3:0 Number of Channel 
 bit 6:4 Bits per Sample 
 bit 15 Stream Type 0:PCM 1:Non-PCM 
 Clear IRQ 
 restore codec default 
 Power down LDO, VREF 
 Set depop parameter 
 SPDX-License-Identifier: GPL-2.0-only
  Driver for ADAU1361ADAU1461ADAU1761ADAU1961 codec
  Copyright 2014 Analog Devices Inc.
   Author: Lars-Peter Clausen <lars@metafoo.de>
	
	  To get the device into SPI mode CLATCH has to be pulled low three
	  times.  Do this by issuing three dummy reads.
 SPDX-License-Identifier: GPL-2.0-or-later
  Codec driver for ST STA32x 2.1-channel high-efficiency digital audio system
  Copyright: 2011 Raumfeld GmbH
  Author: Johannes Stezenbach <js@sig21.net>
  based on code from:
 	Wolfson Microelectronics PLC.
 	  Mark Brown <broonie@opensource.wolfsonmicro.com>
 	Freescale Semiconductor, Inc.
 	  Timur Tabi <timur@freescale.com>
 Power-up register defaults 
 regulator power supply names 
 analog supply, 3.3VV 
 digital supply, 3.3V 
 power amp spply, 10V - 36V 
 codec private data 
 byte array controls for setting biquad, mixer, scaling coefficients;
  for biquads all five coefficients need to be set in one go,
  mixer and prepostscale coefs can be set individually;
  each coef is 24bit, the bytes are ordered in the same way
  as given in the STA32x data sheet (big endian; b1, b2, a1, a2, b0)
 preserve reserved bits in STA32X_CFUD 
	
	  chip documentation does not say if the bits are self clearing,
	  so do it explicitly
 preserve reserved bits in STA32X_CFUD 
	
	  chip documentation does not say if the bits are self clearing,
	  so do it explicitly
 preserve reserved bits in STA32X_CFUD 
		
		  chip documentation does not say if the bits are
		  self-clearing, so do it explicitly
 mute during register sync 
 work around ESD issue where sta32x resets and loses all configuration 
 check if sta32x has reset itself 
 depending on mode, the attackrelease thresholds have
  two different enum definitions; provide both
 MCLK interpolation ratio per fs 
 MCLK to fs clock ratios 
  sta32x_set_dai_sysclk - configure MCLK
  @codec_dai: the codec DAI
  @clk_id: the clock ID (ignored)
  @freq: the MCLK input frequency
  @dir: the clock direction (ignored)
  The value of MCLK is used to determine which sample rates are supported
  by the STA32X, based on the mclk_ratios table.
  This function must be called by the machine driver's 'startup' function,
  otherwise the list of supported sample rates will not be available in
  time for ALSA.
  For setups with variable MCLKs, pass 0 as 'freq' argument. This will cause
  theoretically possible sample rates to be enabled. Call it again with a
  proper value set one the external clock is set (most probably you would do
  that from a machine's driver 'hw_param' hook.
  sta32x_set_dai_fmt - configure the codec for the selected audio format
  @codec_dai: the codec DAI
  @fmt: a SND_SOC_DAIFMT_x value indicating the data format
  This function takes a bitmask of SND_SOC_DAIFMT_x bits and programs the
  codec accordingly.
  sta32x_hw_params - program the STA32X with the given hardware parameters.
  @substream: the audio stream
  @params: the hardware parameters to set
  @dai: the SOC DAI (ignored)
  This function programs the hardware with the values provided.
  Specifically, the sample rate and the data format.
  sta32x_set_bias_level - DAPM callback
  @component: the component device
  @level: DAPM power level
  This is called by ALSA to put the component into low power mode
  or to wake it up.  If the component is powered off completely
  all registers must be restored after power on.
 Full power on 
 Power down 
 The chip runs through the power down sequence for us. 
 CONFA 
 CONFC 
 CONFE 
  CONFF 
 select output configuration  
 channel to output mapping 
 initialize coefficient shadow RAM with reset values 
 Bias level configuration will have done an extra enable 
 CONFE 
 CONFF 
 Clock 
 GPIOs 
 regulators 
 SPDX-License-Identifier: GPL-2.0-only
  wm8804-spi.c  --  WM8804 SPDIF transceiver driver - SPI
  Copyright 2015 Cirrus Logic Inc
  Author: Charles Keepax <ckeepax@opensource.wolfsonmicro.com>
 SPDX-License-Identifier: GPL-2.0
  ALSA SoC CPCAP codec driver
  Copyright (C) 2017 - 2018 Sebastian Reichel <sre@kernel.org>
  Very loosely based on original driver from Motorola:
  Copyright (C) 2007 - 2009 Motorola, Inc.
 Register 512 CPCAP_REG_VAUDIOC --- Audio Regulator and Bias Voltage 
 Register 513 CPCAP_REG_CC     --- CODEC 
 Register 514 CPCAP_REG_CDI    --- CODEC Digital Audio Interface 
 Register 515 CPCAP_REG_SDAC   --- Stereo DAC 
 Register 516 CPCAP_REG_SDACDI --- Stereo DAC Digital Audio Interface 
 Register 517 CPCAP_REG_TXI    --- TX Interface 
 Register 518 CPCAP_REG_TXMP   --- Mic Gain 
 Register 519 CPCAP_REG_RXOA   --- RX Output Amplifier 
 Register 520 CPCAP_REG_RXVC   --- RX Volume Control 
 Register 521 CPCAP_REG_RXCOA  --- Codec to Output Amp Switches 
 Register 522 CPCAP_REG_RXSDOA --- RX Stereo DAC to Output Amp Switches 
 Register 523 CPCAP_REG_RXEPOA --- RX External PGA to Output Amp Switches 
 Register 525 CPCAP_REG_A2LA --- SPK Amplifier and Clock Config for Headset 
 constants for ST delay workaround 
 Only CPCAP from ST requires workaround 
 Capture Gain Control: 0dB to 31dB in 1dB steps 
 Playback Gain Control: -33dB to 12dB in 3dB steps 
 Playback Gain 
 Capture Gain 
 Phase Invert 
  input muxes use unusual register layout, so that we need to use custom
  gettersetter methods
  mux uses same bit in CPCAP_REG_RXCOA, CPCAP_REG_RXSDOA & CPCAP_REG_RXEPOA;
  even though the register layout makes it look like a mixer, this is a mux.
  Enabling multiple inputs will result in no audio being forwarded.
 DAIs 
 Power Supply 
 Highpass Filters 
 Clocks 
 Microphone Bias 
 Inputs 
 Capture Route 
 Capture PGAs 
 ADC 
 DAC 
 Playback PGA 
 Playback Switch 
 Loopback Switch 
 Mono Mixer 
 Output Routes 
 Output Amplifier 
 Headet Charge Pump 
 Outputs 
 Power Supply 
 Stream -> AIF 
 AIF clocks 
 Digital Loopback 
 Highpass Filters 
 AIF -> DAC mapping 
 DAC -> PGA 
 Ext Input -> PGA 
 Ext PGA -> Ext Playback Switch 
 HiFi PGA -> Mono Mixer 
 Ext Playback Switch -> Ext Mono Mixer 
 HiFi Mono Mixer -> Output Route 
 Voice PGA -> Output Route 
 Ext Mono Mixer -> Output Route 
 Output Route -> Output Amplifier 
 Output Amplifier -> Output 
 Headset Charge Pump -> Headset 
 Mic -> Mic Route 
 Input Route -> Microphone PGA 
 Microphone PGA -> ADC 
 ADC -> Stream 
 Mic Bias 
 setup clk id 
 enable PLL for Voice DAI 
 setup frequency 
 Wait for clock tree reset to complete 
	
	  "HiFi Playback" should always be configured as
	  SND_SOC_DAIFMT_CBP_CFP - codec clk & frm provider
	  SND_SOC_DAIFMT_I2S - I2S mode
 01 - 4 slots network mode 
 L on slot 1 
	
	  "Voice Playback" and "Voice Capture" should always be
	  configured as SND_SOC_DAIFMT_CBP_CFP - codec clk & frm
	  provider
 11 - true I2S mode 
 4 timeslots network mode 
  Configure codec for voice call if requested.
  We can configure most with snd_soc_dai_set_sysclk(), snd_soc_dai_set_fmt()
  and snd_soc_dai_set_tdm_slot(). This function configures the rest of the
  cpcap related hardware as CPU is not involved in the voice call.
 Modem to codec VAUDIO_MODE1 
 Clear MIC1_MUX for call 
 Set MIC2_MUX for call 
 Enable LDSP for call 
 Enable CPCAP_BIT_PGA_CDC_EN for call 
 Unmute voice for call 
 Set modem to codec mic CDC and HPF for call 
 Enable modem to codec CDC for call
	
	  Primitive test for voice call, probably needs more checks
	  later on for 16-bit calls detected, Bluetooth headset etc.
 Codec on DAI0, HiFi on DAI1 
 Codec on DAI1, HiFi on DAI0 
 setup default settings 
 SPDX-License-Identifier: GPL-2.0-only
 nau8821.c -- Nuvoton NAU88L21 audio codec driver
 Copyright 2021 Nuvoton Technology Corp.
 Author: John Hsu <kchsu0@nuvoton.com>
 Co-author: Seven Lee <wtli@nuvoton.com>
 the maximum frequency of CLK_ADC and CLK_DAC 
 scaling for mclk from sysclk_src output 
 ratio for input clk freq 
 over sampling rate 
 OSR 64, SRC 14 
 OSR 256, SRC 1 
 OSR 128, SRC 12 
 OSR 32, SRC 18 
 OSR 32, SRC 18 
 OSR 64, SRC 14 
 OSR 128, SRC 12 
 OSR 256, SRC 1 
SPEED 1, SRC 1 
SPEED 2, SRC 12 
SPEED 4, SRC 14 
SPEED 8, SRC 18 
	 The DMIC clock is gotten from adc clock divided by
	  CLK_DMIC_SRC (1, 2, 4, 8). The clock has to be equal or
	  less than nau8821->dmic_clk_threshold.
 Prevent startup click by letting charge pump to ramp up 
 Disables the TESTDAC to let DAC signal pass through. 
 HPOLR are ungrounded by disabling 16 Ohm pull-downs on playback 
 High current HPOLR boost driver 
	 CLK_DAC or CLK_ADC = OSR  FS
	  DAC or ADC clock frequency is defined as Over Sampling Rate (OSR)
	  multiplied by the audio sample rate (Fs). Note that the OSR and Fs
	  values must be selected such that the maximum frequency is less
	  than 6.144 MHz.
 make BCLK and LRC divde configuration if the codec as master. 
 get the bclk and fs ratio 
	 return jack connection status according to jack insertion logic
	  active high or active low.
	 Reset the intrruption status from rightmost bit if the corres-
	  ponding irq event occurs.
 Detach 2kOhm Resistors from MICBIAS to MICGND 
 HPLHPR short to ground 
 Clear all interruption status 
	 Enable the insertion interruption, disable the ejection inter-
	  ruption, and then bypass de-bounce circuit.
 Mask unneeded IRQs: 1 - disable, 0 - enable 
 Close clock for jack type detection at manual mode 
 Recover to normal channel input 
 2kOhm Resistor from MICBIAS to MICGND1 
		 Latch Right Channel Analog data
		  input into the Right Channel Filter
 Enable interruptions with internal clock. 
 Enable internal VCO needed for interruptions 
	 Chip needs one FSCLK cycle in order to generate interruptions,
	  as we cannot guarantee one will be provided by the system. Turning
	  master mode on then off enables us to generate that FSCLK cycle
	  with a minimum of contention on the clock bus.
 Not bypass de-bounce circuit 
 detect microphone and jack type 
 Turn off insertion interruption at manual mode 
 clears the rightmost interruption 
  nau8821_calc_fll_param - Calculate FLL parameters.
  @fll_in: external clock provided to codec.
  @fs: sampling rate.
  @fll_param: Pointer to structure of FLL parameters.
  Calculate FLL parameters to configure codec.
  Returns 0 for success or negative error code.
	 Ensure the reference clock frequency (FREF) is <= 13.5MHz by
	  dividing freq_in by 1, 2, 4, or 8 using FLL pre-scalar.
	  FREF = freq_in  NAU8821_FLL_REF_DIV_MASK
 Choose the FLL ratio based on FREF 
	 Calculate the frequency of DCO (FDCO) given freq_out = 256  Fs.
	  FDCO must be within the 90MHz - 100MHz or the FFL cannot be
	  guaranteed across the full range of operation.
	  FDCO = freq_out  2  mclk_src_scaling
	 Calculate the FLL 10-bit integer input and the FLL 24-bit fractional
	  input based on FDCO, FREF and FLL ratio.
 Make DSP operate at high speed for better performance. 
 FLL 24-bit fractional input 
 FLL 10-bit integer input 
 FLL pre-scaler 
 select divided VCO input 
 Disable free-running mode 
 set FLL loop filter enable and cutoff frequency at 500Khz 
 disable FLL loop filter and cutoff frequency 
  nau8821_set_fll - FLL configuration of nau8821
  @component:  codec component
  @pll_id:  PLL requested
  @source:  clock source
  @freq_in:  frequency of input clock source
  @freq_out:  must be 256Fs in order to achieve the best performance
  The FLL function can select BCLK or MCLK as the input clock source.
  Returns 0 if the parameters have been applied successfully
  or negative error code.
 Make DSP operate as default setting for power saving. 
 Clock provided externally and disable internal VCO clock 
 MCLK not changed by clock tree 
			 Decrease the VCO frequency and make DSP operate
			  as default setting for power saving.
		 Higher FLL reference input frequency can only set lower
		  gain error, such as 0000 for input reference from MCLK
		  12.288Mhz.
		 If FLL reference input is from low frequency source,
		  higher error gain can apply such as 0xf which has
		  the most sensitive gain error correction threshold,
		  Therefore, FLL has the most accurate DCO to
		  target frequency.
		 If FLL reference input is from low frequency source,
		  higher error gain can apply such as 0xf which has
		  the most sensitive gain error correction threshold,
		  Therefore, FLL has the most accurate DCO to
		  target frequency.
 Close clock when jack type detection at manual mode 
 Clear all interruption status 
		 Enable both insertion and ejection interruptions, and then
		  bypass de-bounce circuit.
 Setup codec configuration after resume 
 HPLHPR short to ground 
			 Reset the configuration of jack type for detection.
			  Detach 2kOhm Resistors from MICBIAS to MICGND12.
			 Turn off all interruptions before system shutdown.
			  Keep theinterruption quiet before resume
			  setup completes.
 Power down codec power; don't support button wakeup 
  nau8821_enable_jack_detect - Specify a jack for event reporting
  @component:  component to register the jack with
  @jack: jack to use to report headset and button events on
  After this function has been called the headset insertremove and button
  events will be routed to the given jack.  Jack can be null to stop
  reporting.
 Initiate jack detection work queue 
 Enable BiasVmid 
	 VMID Tieoff setting and enable TESTDAC.
	  This sets the analog DAC inputs to a '0' input signal to avoid
	  any glitches due to power up transients in both the analog and
	  digital DAC circuit.
 Disable short Frame Sync detection logic 
 Disable Boost Driver, Automatic Short circuit protection enable 
 Class G timer 64ms 
 Class AB bias current to 2x, DAC Capacitor enable MSBLSB 
 Disable DACRL power 
 DAC clock delay 2ns, VREF 
	 Default oversamplingdecimations settings are unusable
	  (audible hiss). Set it to something better.
 Jack detection 
 jkdet_polarity - 1  is for active-low 
 Pull up IRQ pin 
 Disable interruption before codec initiation done 
 Mask unneeded IRQs: 1 - disable, 0 - enable 
 SPDX-License-Identifier: GPL-2.0-only
  cs47l24.h  --  ALSA SoC Audio driver for Cirrus Logic CS47L24
  Copyright 2015 Cirrus Logic Inc.
  Author: Richard Fitzgerald <rf@opensource.wolfsonmicro.com>
 SR2 fixed at 8kHz, SR3 fixed at 16kHz 
 Latch volume update bits 
 SPDX-License-Identifier: GPL-2.0-only
 rt1015p.c  --  RT1015P ALSA SoC audio amplifier driver
 Copyright 2020 The Linux Foundation. All rights reserved.
 SPDX-License-Identifier: GPL-2.0-only
  ALSA SoC Texas Instruments TLV320DAC33 codec driver
  Author: Peter Ujfalusi <peter.ujfalusi@ti.com>
  Copyright:   (C) 2009 Nokia Corporation
  The internal FIFO is 24576 bytes long
  It can be configured to hold 16bit or 24bit samples
  In 16bit configuration the FIFO can hold 6144 stereo samples
  In 24bit configuration the FIFO can hold 4096 stereo samples
 Safety margin for FIFO in Mode7 
 set to be half of LATENCY_TIME_MS 
 FIFO mode selection 
 Size of the FIFO in samples 
 burst read amount from host 
	int mode1_latency;		 latency caused by the i2c writes in
 BCLK divider value in burst mode 
 Interface speed in Burst modes 
	int keep_bclk;			 Keep the BCLK continuously running
 Time stamp for FIFO modes to 
 calculate the FIFO caused delay 
	unsigned int mode1_us_burst;	 Time to burst read n number of
 Time to reach lthr from uthr 
 0x00 - 0x03 
 0x04 - 0x07 
 0x08 - 0x0b 
 0x0c - 0x0f 
 0x10 - 0x13 
 0x14 - 0x17 
 0x18 - 0x1b 
 0x1c - 0x1f 
 0x20 - 0x23 
 0x24 - 0x27 
 0x28 - 0x2b 
 0x2c - 0x2f 
 0x30 - 0x33 
 0x34 - 0x37 
 0x38 - 0x39 
 Registers 0x3a - 0x3f are reserved  
 0x3a - 0x3b 
 0x3c - 0x3f 
 0x40 - 0x43 
 0x44 - 0x45 
 Registers 0x46 - 0x47 are reserved  
 0x46 - 0x47 
 0x48 - 0x4a 
 Registers 0x4b - 0x7c are reserved  
 0x4b        
 0x4c - 0x4f 
 0x50 - 0x53 
 0x54 - 0x57 
 0x58 - 0x5b 
 0x5c - 0x5f 
 0x60 - 0x63 
 0x64 - 0x67 
 0x68 - 0x6b 
 0x6c - 0x6f 
 0x70 - 0x73 
 0x74 - 0x77 
 0x78 - 0x7b 
 0x7c        
 0x7d - 0x7f 
 Register read and write 
 If powered off, return the cached value 
	
	  data is
	    D15..D8 dac33 register offset
	    D7...D0 register data
	
	  data is
	    D23..D16 dac33 register offset
	    D15..D8  register data MSB
	    D7...D0  register data LSB
 We need to set autoincrement mode for 16 bit writes 
 A : DAC sample rate Fsref1.5 
 B : DAC src=normal, not muted 
 C : (defaults) 
	 73 : volume soft stepping control,
 Restore only selected registers (gains mostly) 
 Stop the DAI clock 
 Power down the Oscillator, and DACs 
 Safety check 
 Do not allow changes while stream is running
 Codec operation modes 
 LR Line Output Gain 
  DACLR digital volume control:
  from 0 dB to -63.5 in 0.5 dB steps
  Need to be inverted later on:
  0x00 == 0 dB
  0x7f == -63.5 dB
 Analog bypass 
 LOP LR invert selection 
 Analog bypass 
	
	  For DAPM path, when only the anlog bypass path is enabled, and the
	  LOP inverted from the corresponding DAC side.
	  This is needed, so we can attach the DAC power supply in this case.
 Analog bypass 
 output 
 Coming from OFF, switch on the component 
 Do not power off, when the component is already off 
 Take the timestamps 
 Enable Alarm Threshold IRQ with a delay 
 Take the timestamp 
 Move back the timestamp with drain time 
 Enable Upper Threshold IRQ 
 Take the timestamp 
 At the moment we are not using interrupts in mode7 
 Mask all interrupts from dac33 
 flush fifo 
 Do not schedule the workqueue in Mode7 
 Stream started, save the substream pointer 
 Check parameters for validity 
  tlv320dac33 is strict on the sequence of the register writes, if the register
  writes happens in different order, than dac33 might end up in unknown state.
  Use the known, working sequence of register writes to initialize the dac33.
 Read FIFO control A, and clear FIFO flush bit 
		
		  Chip is not powered yet.
		  Do the init in the dac33_set_bias_level later.
 Write registers 0x08 and 0x09 (MSB, LSB) 
 OSC calibration time 
 adjustment treshold & step 
 div=4  gain=1  div 
 Generic for all FIFO modes 
 50-51 : ASRC Control registers 
 ??? 
 Write registers 0x34 and 0x35 (MSB, LSB) 
 Set interrupts to high active 
 FIFO bypass mode 
 50-51 : ASRC Control registers 
 ??? 
 Interrupt behaviour configuration 
 in FIFO bypass mode, the interrupts are not used 
		
		  For mode1:
		  Disable the FIFO bypass (Enable the use of FIFO)
		  Select nSample mode
		  BCLK is only running when data is needed by DAC33
		
		  For mode1:
		  Disable the FIFO bypass (Enable the use of FIFO)
		  Select Threshold mode
		  BCLK is only running when data is needed by DAC33
		
		  For FIFO bypass mode:
		  Enable the FIFO bypass (Disable the FIFO use)
		  Set the BCLK as continuous
	
	  BCLK divide ratio
	  0: 1.5
	  1: 1
	  2: 2
	  ...
	  254: 254
	  255: 255
		
		  Configure the threshold levels, and leave 10 sample space
		  at the bottom, and also at the top of the FIFO
 In bypass mode we don't need to calculate 
 Number of samples under i2c latency 
			
			  Configure nSamaple to number of periods,
			  which covers the latency requironment.
 We have not started to fill the FIFO yet, delay is 0 
			
			  Phase 1:
			  After Alarm threshold, and before nSample write
			
			  Phase 2:
			  After nSample write (during burst operation)
			
			  Phase 3:
			  After burst operation, before next alarm threshold
 We have not started to fill the FIFO yet, delay is 0 
			
			  Either the timestamps are messed or equal. Report
			  maximum delay
			
			 Phase 1:
			 After burst (draining phase)
			
			 Phase 2:
			 During burst operation
 set masterslave audio interface 
 Codec Master 
 Codec Slave 
 Read the tlv320dac33 ID registers 
 Check if the IRQ number is valid and request it 
 Only add the FIFO controls, if we have valid IRQ number 
 10ms 
 Disable FIFO use by default 
 Check if the reset GPIO number is valid and request it 
 SPDX-License-Identifier: GPL-2.0-only
  wm8804.c  --  WM8804 SPDIF transceiver driver
  Copyright 2010-11 Wolfson Microelectronics plc
  Author: Dimitris Papastamos <dp@opensource.wolfsonmicro.com>
 R3  - PLL1 
 R4  - PLL2 
 R5  - PLL3 
 R6  - PLL4 
 R7  - PLL5 
 R8  - PLL6 
 R9  - SPDMODE 
 R10 - INTMASK 
 R18 - SPDTX1 
 R19 - SPDTX2 
 R20 - SPDTX3 
 R21 - SPDTX4 
 R22 - SPDTX5 
 R23 - GPO0 
 R24 - GPO1 
 R26 - GPO2 
 R27 - AIFTX 
 R28 - AIFRX 
 R29 - SPDRX1 
 R30 - PWRDN 
  We can't use the same notifier block for more than one supply and
  there's no way I can see to get from a callback to the caller
  except container_of().
 power up the aif 
 power down only both paths are disabled 
 save the current power state of the transmitter 
 power down the transmitter 
 set the tx source 
 restore the transmitter's configuration 
 set data format 
 set masterslave mode 
 set frame inversion 
 set word length 
 PLL rate to output rate divisions 
	
	  Scale the output frequency up; the PLL should run in the
	  region of 90-100MHz.
 disable the PLL 
 power down the PLL before reprogramming it 
 set PLLN and PRESCALE 
 set mclkdiv and freqmode 
 set PLLK 
 power up the PLL 
 This should really be moved into the regulator core 
 Power up OSCCLK 
 Power down OSCCLK 
 SPDX-License-Identifier: GPL-2.0-only
  wm8903.c  --  WM8903 ALSA SoC Audio driver
  Copyright 2008-12 Wolfson Microelectronics
  Copyright 2011-2012 NVIDIA, Inc.
  Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
  TODO:
   - TDM mode configuration.
   - Digital microphone support.
 Register defaults at reset 
 R4   - Bias Control 0 
 R5   - VMID Control 0 
 R6   - Mic Bias Control 0 
 R8   - Analogue DAC 0 
 R10  - Analogue ADC 0 
 R12  - Power Management 0 
 R13  - Power Management 1 
 R14  - Power Management 2 
 R15  - Power Management 3 
 R16  - Power Management 4 
 R17  - Power Management 5 
 R18  - Power Management 6 
 R20  - Clock Rates 0 
 R21  - Clock Rates 1 
 R22  - Clock Rates 2 
 R24  - Audio Interface 0 
 R25  - Audio Interface 1 
 R26  - Audio Interface 2 
 R27  - Audio Interface 3 
 R30  - DAC Digital Volume Left 
 R31  - DAC Digital Volume Right 
 R32  - DAC Digital 0 
 R33  - DAC Digital 1 
 R36  - ADC Digital Volume Left 
 R37  - ADC Digital Volume Right 
 R38  - ADC Digital 0 
 R39  - Digital Microphone 0 
 R40  - DRC 0 
 R41  - DRC 1 
 R42  - DRC 2 
 R43  - DRC 3 
 R44  - Analogue Left Input 0 
 R45  - Analogue Right Input 0 
 R46  - Analogue Left Input 1 
 R47  - Analogue Right Input 1 
 R50  - Analogue Left Mix 0 
 R51  - Analogue Right Mix 0 
 R52  - Analogue Spk Mix Left 0 
 R53  - Analogue Spk Mix Left 1 
 R54  - Analogue Spk Mix Right 0 
 R55  - Analogue Spk Mix Right 1 
 R57  - Analogue OUT1 Left 
 R58  - Analogue OUT1 Right 
 R59  - Analogue OUT2 Left 
 R60  - Analogue OUT2 Right 
 R62  - Analogue OUT3 Left 
 R63  - Analogue OUT3 Right 
 R65  - Analogue SPK Output Control 0 
 R67  - DC Servo 0 
 R69  - DC Servo 2 
 R90  - Analogue HP 0 
 R94  - Analogue Lineout 0 
 R98  - Charge Pump 0 
 R104 - Class W 0 
 R108 - Write Sequencer 0 
 R109 - Write Sequencer 1 
 R110 - Write Sequencer 2 
 R111 - Write Sequencer 3 
 R112 - Write Sequencer 4 
 R114 - Control Interface 
 R116 - GPIO Control 1 
 R117 - GPIO Control 2 
 R118 - GPIO Control 3 
 R119 - GPIO Control 4 
 R120 - GPIO Control 5 
 R122 - Interrupt Status 1 Mask 
 R123 - Interrupt Polarity 1 
 R126 - Interrupt Control 
 R129 - Control Interface Test 1 
 R149 - Charge Pump Test 1 
 R164 - Clock Rate Test 4 
 R172 - Analogue Output Bias 0 
 Reference count 
 Complete any pending DC servo starts 
 If we've no cached values then we need to do startup 
 Don't trust the cache for analogue 
 Cache the measured offsets for digital 
  When used with DAC outputs only the WM8903 charge pump supports
  operation in class W mode, providing very low power consumption
  when used with digital sources.  Enable and disable this mode
  automatically depending on the mixer configuration.
  All the relevant controls are simple switches.
 Turn it off if we're about to enable bypass 
 Implement the change 
 If we've just disabled the last bypass path turn Class W on 
	 If we're using deemphasis select the nearest available sample
	  rate.
 ALSA can only do steps of .01dB 
 Input PGAs - No TLV since the scale depends on PGA mode 
 ADCs 
 DAC 
 Headphones 
 Line out 
 Speaker 
			 By default no bypass paths are enabled so
			  enable Class W support.
 Clock inversion 
 frame inversion not valid for DSP modes 
 Lookup table for CLK_SYSfs ratio.  256fs or more is recommended
  for optimal performance so we list the lower rates first and match
 CLK_SYSBCLK ratios - multiplied by 10 due to .5s 
 Sample rates for DSP 
 Enable sloping stopband filter for low sample rates 
 Configure sample rate logic for DSP - choose nearest rate 
	 We may not have an MCLK which allows us to generate exactly
	  the clock we want, particularly with USB derived inputs, so
	  approximate.
	 We may not get quite the right frequency if using
	  approximate clocks so look for the closest match that is
	  higher than the target (we need to ensure that there enough
	  BCLKs to clock out the samples).
 BCLK table is sorted 
  wm8903_mic_detect - Enable microphone detection via the WM8903 IRQ
  @component:  WM8903 component
  @jack:   jack to report detection events on
  @det:    value to report for presence detection
  @shrt:   value to report for short detection
  Enable microphone detection via IRQ on the WM8903.  If GPIOs are
  being used to bring out signals to the processor then only platform
  data configuration is needed for WM8903 and processor GPIOs should
  be configured using snd_soc_jack_add_gpios() instead.
  The current threasholds for detection should be configured using
  micdet_cfg in the platform data.  Using this function will force on
  the microphone bias for the device.
 Store the configuration 
 Enable interrupts we've got a report configured for 
		 Enable mic detection, this may not have been set through
	
	  The rest is microphone jack detection.  We need to manually
	  invert the polarity of the interrupt after each event - to
	  simplify the code keep track of the last state we reported
	  and just invert the relevant bits in both the report and
	  the polarity register.
		
		 We assume the controller imposes no restrictions,
		 so we are able to select active-high
		
		  In device tree: 0 means "write 0",
		  0xffffffff means "don't touch".
		 
		  In platform data: 0 means "don't touch",
		  0x8000 means "write 0".
		 
		  Note: WM8903_GPIO_CONFIG_ZERO == 0x8000.
		 
		   Convert from DT to pdata representation here,
		  so no other code needs to change.
 If no platform data was supplied, create storage for defaults 
 Reset the device 
 Set up GPIO pin state, detect if any are MIC detect outputs 
 Set up microphone detection 
 Microphone detection needs the WSEQ clock 
	 If microphone detection is enabled by pdata but
	  detected via IRQ then interrupts can be lost before
	  the machine driver has set up microphone detection
	  IRQs as the IRQs are clear on read.  The detection
	  will be enabled when the machine driver configures.
 Enable write sequencer interrupts 
 Latch volume update bits 
 Enable DAC soft mute by default 
 SPDX-License-Identifier: GPL-2.0-only
 rt715-sdca-sdw.c -- rt715 ALSA SoC audio driver
 Copyright(c) 2020 Realtek Semiconductor Corp.
 BRA 
 i2c debug 
 VAD Searching status 
 Update the status 
	
	  Perform initialization only if slave status is present and
	  hw_init flag is false
 perform IO transfers required for Slave initialization 
 first we need to allocate memory for set bits in port lists 
 BITMAP: 01010000 
 BITMAP:  00000000 
 set the timeout values 
 Regmap Initialization 
 SPDX-License-Identifier: GPL-2.0-only
  ALSA SoC WL1273 codec driver
  Author:      Matti Aaltonen, <matti.j.aaltonen@nokia.com>
  Copyright:   (C) 2010, 2011 Nokia Corporation
 codec private data 
  TODO: Implement the audio routing in the driver. Now this control
  only indicates the setting that has been done elsewhere (in the user
  space).
 Do not allow changes while stream is running 
 Audio interface format for the soc_card driver 
  ASoC codec driver for spear platform
  soundsoccodecssta529.c -- spear ALSA Soc codec driver
  Copyright (C) 2012 ST Microelectronics
  Rajeev Kumar <rajeevkumar.linux@gmail.com>
  This file is licensed under the terms of the GNU General Public
  License version 2. This program is licensed "as is" without any
  warranty of any kind, whether express or implied.
 STA529 Register offsets 
mic_select
 R0   - FFX Configuration reg 0 
 R1   - FFX Configuration reg 1 
 R2   - Master Volume 
 R3   - Left Volume 
 R4  -  Right Volume 
 R10  - S2P Config Reg 0 
 R11  - S2P Config Reg 1 
 R12  - P2S Config Reg 0 
 R13  - P2S Config Reg 1 
 R30  - ADC Config Reg 
 R31  - clock Out Reg 
 R32  - Misc Register 
 Making FFX output to zero 
 interface format 
 SPDX-License-Identifier: GPL-2.0-or-later
  AD193X Audio Codec driver supporting AD1936789
  Copyright 2010 Analog Devices Inc.
 codec private data 
  AD193X volumemutede-emphasis etc. controls
 DAC volume control 
 DAC switch control 
 DAC de-emphasis 
 ADC switch control 
 ADC high-pass filter 
  DAI ops entries
	 At present, the driver only support AUX ADC mode(SND_SOC_DAIFMT_I2S
	  with TDM), ADC&DAC TDM mode(SND_SOC_DAIFMT_DSP_A) and DAC I2S mode
	  (SND_SOC_DAIFMT_I2S)
 normal bit clock + frame 
 normal bclk + invert frm 
 invert bclk + normal frm 
 invert bclk + frm 
 For DSP_, LRCLK's polarity must be inverted 
 MCLK must be 512 x fs 
 bit size 
 codec DAI instance 
 codec DAI instance for DAC only 
 codec register values to set after reset 
 PLL_CLK_CTRL0: pll input: mclkixi 12.288Mhz 
 PLL_CLK_CTRL1: no on-chip Vref 
 DAC_CTRL0: TDM mode 
 DAC_CTRL1: reset 
 DAC_CTRL2: 48kHz de-emphasis, unmute dac 
 DAC_CHNL_MUTE: unmute DAC channels 
 DAC_L1_VOL: no attenuation 
 DAC_R1_VOL: no attenuation 
 DAC_L2_VOL: no attenuation 
 DAC_R2_VOL: no attenuation 
 DAC_L3_VOL: no attenuation 
 DAC_R3_VOL: no attenuation 
 DAC_L4_VOL: no attenuation 
 DAC_R4_VOL: no attenuation 
 ADC_CTRL0: high-pass filter enable 
 ADC_CTRL1: sata delay=1, adc aux mode 
 ADC_CTRL2: reset 
 default setting for ad193x 
 adc only 
 add adc controls 
 add adc widgets 
 add adc routes 
 SPDX-License-Identifier: GPL-2.0-only
  tas5720.c - ALSA SoC Texas Instruments TAS5720 Mono Audio Amplifier
  Copyright (C)2015-2016 Texas Instruments Incorporated -  https:www.ti.com
  Author: Andreas Dannenberg <dannenberg@ti.com>
 Define how often to check (and clear) the fault status register (in ms) 
 Digital power supply. Connect to 3.3-V supply. 
 Class-D amp and analog power supply (connected). 
 1st data bit occur one BCLK cycle after the frame sync 
		
		  Note that although the TAS5720 does not have a dedicated DSP
		  mode it doesn't care about the LRCLK duty cycle during TDM
		  operation. Therefore we can use the device's I2S mode with
		  its delaying of the 1st data bit to receive DSP_A formatted
		  data. See device datasheet for additional details.
		
		  Similar to DSP_A, we can use the fact that the TAS5720 does
		  not care about the LRCLK duty cycle during TDM to receive
		  DSP_B formatted data in LEFTJ mode (no delaying of the 1st
		  data bit).
 No delay after the frame sync 
	
	  Determine the first slot that is being requested. We will only
	  use the first slot that is found since the TAS5720 is a mono
	  amplifier.
 Enable manual TDM slot selection (instead of I2C ID based) 
 Configure the TDM slot to process audio from 
 Configure TDM slot width. This is only applicable to TAS5722. 
 Checkhandle all errors except SAIF clock errors 
	
	  Only flag errors once for a given occurrence. This is needed as
	  the TAS5720 will take time clearing the fault condition internally
	  during which we don't want to bombard the system with the same
	  error message over and over.
 Store current fault value so we can detect any changes next time 
	
	  Periodically toggle SDZ (shutdown bit) H->L->H to clear any latching
	  faults as long as a fault condition persists. Always going through
	  the full sequence no matter the first return value to minimizes
	  chances for the device to end up in shutdown mode.
 Schedule the next fault check at the specified interval 
	
	  Take a liberal approach to checking the device ID to allow the
	  driver to be used even if the device ID does not match, however
	  issue a warning if there is a mismatch.
 Set device to mute 
	
	  Enter shutdown mode - our default when not playing audio - to
	  minimize current consumption. On the TAS5720 there is no real down
	  side doing so as all device registers are preserved and the wakeup
	  of the codec is rather quick which we do using a dapm widget.
 Take TAS5720 out of shutdown mode 
		
		  Observe codec shutdown-to-active time. The datasheet only
		  lists a nominal value however just use-it as-is without
		  additional padding to minimize the delay introduced in
		  starting to play audio (actually there is other setup done
		  by the ASoC framework that will provide additional delays,
		  so we should always be safe).
 Turn on TAS5720 periodic fault checkinghandling 
 Disable TAS5720 periodic fault checkinghandling 
 Place TAS5720 in shutdown mode to minimize current draw 
  DAC analog gain. There are four discrete values to select from, ranging
  from 19.2 dB to 26.3dB.
  DAC digital volumes. From -103.5 to 24 dB in 0.5 dB or 0.25 dB steps
  depending on the device. Note that setting the gain below -100 dB
  (register value <0x7) is effectively a MUTE as per device datasheet.
  Note that for the TAS5722 the digital volume controls are actually split
  over two registers, so we need custom getterssetters for access.
 PCM rates supported by the TAS5720 driver 
 Formats supported by TAS5720 driver 
  TAS5720 DAI structure
  Note that were are advertising .playback.channels_max = 2 despite this being
  a mono amplifier. The reason for that is that some serial ports such as TI's
  McASP module have a minimum number of channels (2) that they can output.
  Advertising more channels than we have will allow us to interface with such
  a serial port without really any negative side effects as the TAS5720 will
  simply ignore any extra channel(s) asides from the one channel that is
  configured to be played back.
 SPDX-License-Identifier: GPL-2.0-only
  ALSA SoC codec for HDMI encoder drivers
  Copyright (C) 2015 Texas Instruments Incorporated - https:www.ti.com
  Author: Jyri Sarha <jsarha@ti.com>
 This is only to get MAX_ELD_BYTES 
 ALSA API channel map position 
  CEA speaker placement for HDMI 1.4:
   FL  FLC   FC   FRC   FR   FRW
                                   LFE
   RL  RLC   RC   RRC   RR
   Speaker placement has to be extended to support HDMI 2.0
 Front Left           
 Front Center         
 Front Right          
 Front Left Center    
 Front Right Center   
 Rear Left            
 Rear Center          
 Rear Right           
 Rear Left Center     
 Rear Right Center    
 Low Frequency Effect 
  cea Speaker allocation structure
 Channel maps  stereo HDMI 
 Channel maps for multi-channel playbacks, up to 8 n_ch 
 CA_ID 0x00 
 CA_ID 0x01 
 CA_ID 0x02 
 CA_ID 0x03 
 CA_ID 0x04 
 CA_ID 0x05 
 CA_ID 0x06 
 CA_ID 0x07 
 CA_ID 0x08 
 CA_ID 0x09 
 CA_ID 0x0A 
 CA_ID 0x0B 
 CA_ID 0x0C 
 CA_ID 0x0D 
 CA_ID 0x0E 
 CA_ID 0x0F 
 CA_ID 0x10 
 CA_ID 0x11 
 CA_ID 0x12 
 CA_ID 0x13 
 CA_ID 0x14 
 CA_ID 0x15 
 CA_ID 0x16 
 CA_ID 0x17 
 CA_ID 0x18 
 CA_ID 0x19 
 CA_ID 0x1A 
 CA_ID 0x1B 
 CA_ID 0x1C 
 CA_ID 0x1D 
 CA_ID 0x1E 
 CA_ID 0x1F 
  hdmi_codec_channel_alloc: speaker configuration available for CEA
  This is an ordered list that must match with hdmi_codec_8ch_chmaps struct
  The preceding ones have better chances to be selected by
  hdmi_codec_get_ch_alloc_table_idx().
 2.1 
 Dolby Surround 
 surround51 
 surround40 
 surround41 
 surround50 
 6.1 
 surround71 
 others 
 Detect if only stereo supported, else return 8 channels mappings 
 If spk_alloc == 0, HDMI is unplugged return stereo config
 Select chmap supported 
 Select a channel allocation that matches with ELD and pcm channels 
 Reset daifmt 
	
	  ignore if direction was CAPTURE
	  and it had .no_capture_mute flag
	  see
	 	snd_soc_dai_digital_mute()
  This driver can select all SND_SOC_DAIFMT_CBx_CFx,
  but need to be selected from Sound Card, not be auto selected.
  Because it might be used from other driver.
  For example,
 	${LINUX}driversgpudrmbridgesynopsysdw-hdmi-i2s-audio.c
  This list is only for formats allowed on the I2S bus. So there is
  some formats listed that are not supported by HDMI interface. For
  instance allowing the 32-bit formats enables 24-precision with CPU
  DAIs that do not support 24-bit formats. If the extra formats cause
  problems, we should add the video side driver an option to disable
  them.
 override handlers 
 default chmap supported is stereo 
 add ELD ctl with the device number corresponding to the PCM stream 
 see snd_soc_get_dai_id() 
 SPDX-License-Identifier: GPL-2.0-only
  L3 code
   Copyright (C) 2008, Christian Pellegrin <chripell@evolware.org>
  based on:
  L3 bus algorithm module.
   Copyright (C) 2001 Russell King, All Rights Reserved.
  Send one byte of data to the chip.  Data is latched into the chip on
  the rising edge of the clock.
  Send a set of bytes to the chip.  We need to pulse the MODE line
  between each byte, but never at the start nor at the end of the
  transfer.
 SPDX-License-Identifier: GPL-2.0-only
  wm8995.c  --  WM8995 ALSA SoC Audio driver
  Copyright 2010 Wolfson Microelectronics plc
  Author: Dimitris Papastamos <dp@opensource.wolfsonmicro.com>
  Based on wm8994.c and wm_hubs.c by Mark Brown
  We can't use the same notifier block for more than one supply and
  there's no way I can see to get from a callback to the caller
  except container_of().
 GCC flow analysis can't track enable 
 We also need the same setting for LR and only one path 
 Check what we're currently using for CLK_SYS 
 Enable the headphone amp 
 Enable the second stage 
 Bring up the AIF clocks first 
	
	  Then switch CLK_SYS over to the higher of them; a change
	  can only happen as a result of a clocking change which can
	  only be made outside of DAPM so we can safely redo the
	  clocking.
 If they're equal it doesn't matter which is used 
 AIF1 outputs 
 Sidetone 
 DAC1 inputs 
 DAC2AIF2 outputs 
 Output stages 
 frame inversion not valid for DSP modes 
 reserved ,
		if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK  ||
		if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK  ||
 try to find a suitable sample rate 
 AIFCLKfs ratio; look for a close match in either direction 
	
	  We may not get quite the right frequency if using
	  approximate clocks so look for the closest match that is
	  higher than the target (we need to ensure that there enough
	  BCLKs to clock out the samples).
 BCLK table is sorted 
 The size in bits of the FLL divide multiplied by 10
 Scale the input frequency down to <= 13.5MHz 
 Scale the output to give 90MHz<=Fvco<=100MHz 
 Now, calculate N.K 
 Calculate fractional part - scale up so we can round. 
 Move down to proper range now rounding is done 
 Allow no source specification when stopping 
 Are we changing anything? 
	 If we're stopping the FLL redo the old config - no
	  registers will actually be written but we avoid GCC flow
	  analysis bugs spewing warnings.
 Gate the AIF clocks while we reclock 
 We always need to disable the FLL while reconfiguring 
 Enable any gated AIF clocks 
 AIF3 shares clocking with AIF12 
 This should really be moved into the regulator core 
 Latch volume updates (right only; we always do left then right). 
 SPDX-License-Identifier: GPL-2.0-only
  es8328.c  --  ES8328 ALSA SoC SPI Audio driver
  Copyright 2014 Sutajio Ko-Usagi PTE LTD
  Author: Sean Cross <xobs@kosagi.com>
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2017 BayLibre, SAS.
  Author: Jerome Brunet <jbrunet@baylibre.com>
  The everest 7134 is a very simple DA converter with no register
 should not happen 
 mclk has not been provided, assume it is OK 
 Single speed mode 
 Double speed mode 
 Quad speed mode 
 Digital IO are also supplied by VDD on the es7134 
 Single speed mode 
 Double speed mode 
 Es7154 has a separate supply for digital IO  
 SPDX-License-Identifier: GPL-2.0-only
  uda1380.c - Philips UDA1380 ALSA SoC audio driver
  Copyright (c) 2007-2009 Philipp Zabel <philipp.zabel@gmail.com>
  Modified by Richard Purdie <richard@openedhand.com> to fit into SoC
  codec model.
  Copyright (c) 2005 Giorgio Padrin <giorgio@mandarinlogiq.org>
  Copyright 2005 Openedhand Ltd.
 codec private data 
  uda1380 register cache
  read uda1380 register cache
  write uda1380 register cache
  write to the UDA1380 register space
	 data is
	    data[0] is register offset
	    data[1] is MS byte
	    data[2] is LS byte
	 the interpolator & decimator regs must only be written when the
	  codec DAI is active.
 Sync reg_cache with the hardware 
 declarations of ALSA reg_elem_REAL controls 
 SEL_MIC, SEL_LNA 
 R02_EN_AVC 
 M 
 SEL_SOURCE 
 SEL_NS 
 MIX, MIX_POS 
 SD_VALUE 
 OS 
  from -48 dB in 1.5 dB steps (mute instead of -49.5 dB)
  from -78 dB in 1 dB steps (3 dB steps, really. LSB are ignored),
  from -66 dB in 0.5 dB steps (2 dB steps, really) and
  from -52 dB in 0.25 dB steps
  from -72 dB in 1.5 dB steps (6 dB steps really),
  from -66 dB in 0.75 dB steps (3 dB steps really),
  from -60 dB in 0.5 dB steps (2 dB steps really) and
  from -46 dB in 0.25 dB steps
 from 0 to 6 dB in 2 dB steps if SPF mode != flat 
 from 0 to 24 dB in 2 dB steps, if SPF mode == maximum, otherwise cuts
 from -63 to 24 dB in 0.5 dB steps (-128...48) 
 from 0 to 24 dB in 3 dB steps 
 from 0 to 30 dB in 2 dB steps 
 AVCR, AVCL 
 MVCL, MVCR 
 VC2 
 VC1 
 M 
 TRL, TRR 
 BBL, BBR 
	SOC_SINGLE("Master Playback Switch", UDA1380_DEEMP, 14, 1, 1),		
 MT2 from decimation filter 
 DE2 
 MT1, from digital data input 
 DE1 
 DA_POL_INV 
 SEL_NS 
 MIX_POS, MIX 
 SDET_ON 
 SD_VALUE 
 OS 
 ML_DEC, MR_DEC 
	SOC_SINGLE("ADC Capture Switch", UDA1380_PGA, 15, 1, 1),		
 PGA_GAINCTRLL, PGA_GAINCTRLR 
 ADCPOL_INV 
 VGA_CTRL 
 SKIP_DCFIL (before decimator) 
 EN_DCFIL (at output of decimator) 
 TODO: enum, see table 62 
 AGC_LEVEL 
 -5.5, -8, -11.5, -14 dBFS 
 Input mux 
 Output mux 
 Capture mux 
 output mux 
 {"DAC", "Digital Mixer", "I2S" } 
 headphone driver 
 input mux 
 right input 
 inputs 
 set up DAI based upon fmt 
 DATAI is slave only, so in single-link mode, this has to be slave 
 set up DAI based upon fmt 
 DATAI is slave only, so this has to be slave 
 set up DAI based upon fmt 
 set WSPLL power and divider if running from this clock 
 clear SEL_LOOP_DIV 
 shut down WSPLL power if running from this clock 
 ADC, DAC on 
		 Mark mixer regs cache dirty to sync them with
		  codec regs on power on.
 playback only - dual interface 
 capture only - dual interface
 set clock input 
 SPDX-License-Identifier: GPL-2.0-only
  wm5100-tables.c  --  WM5100 ALSA SoC Audio driver data
  Copyright 2011-2 Wolfson Microelectronics plc
  Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
 R0     - software reset 
 R1     - Device Revision 
 R16    - Ctrl IF 1 
 R32    - Tone Generator 1 
 R48    - PWM Drive 1 
 R49    - PWM Drive 2 
 R50    - PWM Drive 3 
 R256   - Clocking 1 
 R257   - Clocking 3 
 R258   - Clocking 4 
 R259   - Clocking 5 
 R260   - Clocking 6 
 R263   - Clocking 7 
 R264   - Clocking 8 
 R288   - ASRC_ENABLE 
 R289   - ASRC_STATUS 
 R290   - ASRC_RATE1 
 R321   - ISRC 1 CTRL 1 
 R322   - ISRC 1 CTRL 2 
 R323   - ISRC 2 CTRL1 
 R324   - ISRC 2 CTRL 2 
 R386   - FLL1 Control 1 
 R387   - FLL1 Control 2 
 R388   - FLL1 Control 3 
 R390   - FLL1 Control 5 
 R391   - FLL1 Control 6 
 R392   - FLL1 EFS 1 
 R418   - FLL2 Control 1 
 R419   - FLL2 Control 2 
 R420   - FLL2 Control 3 
 R422   - FLL2 Control 5 
 R423   - FLL2 Control 6 
 R424   - FLL2 EFS 1 
 R512   - Mic Charge Pump 1 
 R513   - Mic Charge Pump 2 
 R514   - HP Charge Pump 1 
 R529   - LDO1 Control 
 R533   - Mic Bias Ctrl 1 
 R534   - Mic Bias Ctrl 2 
 R535   - Mic Bias Ctrl 3 
 R640   - Accessory Detect Mode 1 
 R648   - Headphone Detect 1 
 R649   - Headphone Detect 2 
 R656   - Mic Detect 1 
 R657   - Mic Detect 2 
 R658   - Mic Detect 3 
 R769   - Input Enables 
 R770   - Input Enables Status 
 R784   - Status 
 R785   - IN1R Control 
 R786   - IN2L Control 
 R787   - IN2R Control 
 R788   - IN3L Control 
 R789   - IN3R Control 
 R790   - IN4L Control 
 R791   - IN4R Control 
 R792   - RXANC_SRC 
 R793   - Input Volume Ramp 
 R800   - ADC Digital Volume 1L 
 R801   - ADC Digital Volume 1R 
 R802   - ADC Digital Volume 2L 
 R803   - ADC Digital Volume 2R 
 R804   - ADC Digital Volume 3L 
 R805   - ADC Digital Volume 3R 
 R806   - ADC Digital Volume 4L 
 R807   - ADC Digital Volume 4R 
 R1025  - Output Enables 2 
 R1026  - Output Status 1 
 R1027  - Output Status 2 
 R1032  - Channel Enables 1 
 R1040  - Out Volume 1L 
 R1041  - Out Volume 1R 
 R1042  - DAC Volume Limit 1L 
 R1043  - DAC Volume Limit 1R 
 R1044  - Out Volume 2L 
 R1045  - Out Volume 2R 
 R1046  - DAC Volume Limit 2L 
 R1047  - DAC Volume Limit 2R 
 R1048  - Out Volume 3L 
 R1049  - Out Volume 3R 
 R1050  - DAC Volume Limit 3L 
 R1051  - DAC Volume Limit 3R 
 R1052  - Out Volume 4L 
 R1053  - Out Volume 4R 
 R1054  - DAC Volume Limit 5L 
 R1055  - DAC Volume Limit 5R 
 R1056  - DAC Volume Limit 6L 
 R1057  - DAC Volume Limit 6R 
 R1088  - DAC AEC Control 1 
 R1089  - Output Volume Ramp 
 R1152  - DAC Digital Volume 1L 
 R1153  - DAC Digital Volume 1R 
 R1154  - DAC Digital Volume 2L 
 R1155  - DAC Digital Volume 2R 
 R1156  - DAC Digital Volume 3L 
 R1157  - DAC Digital Volume 3R 
 R1158  - DAC Digital Volume 4L 
 R1159  - DAC Digital Volume 4R 
 R1160  - DAC Digital Volume 5L 
 R1161  - DAC Digital Volume 5R 
 R1162  - DAC Digital Volume 6L 
 R1163  - DAC Digital Volume 6R 
 R1216  - PDM SPK1 CTRL 1 
 R1217  - PDM SPK1 CTRL 2 
 R1218  - PDM SPK2 CTRL 1 
 R1219  - PDM SPK2 CTRL 2 
 R1280  - Audio IF 1_1 
 R1281  - Audio IF 1_2 
 R1282  - Audio IF 1_3 
 R1283  - Audio IF 1_4 
 R1284  - Audio IF 1_5 
 R1285  - Audio IF 1_6 
 R1286  - Audio IF 1_7 
 R1287  - Audio IF 1_8 
 R1288  - Audio IF 1_9 
 R1289  - Audio IF 1_10 
 R1290  - Audio IF 1_11 
 R1291  - Audio IF 1_12 
 R1292  - Audio IF 1_13 
 R1293  - Audio IF 1_14 
 R1294  - Audio IF 1_15 
 R1295  - Audio IF 1_16 
 R1296  - Audio IF 1_17 
 R1297  - Audio IF 1_18 
 R1298  - Audio IF 1_19 
 R1299  - Audio IF 1_20 
 R1300  - Audio IF 1_21 
 R1301  - Audio IF 1_22 
 R1302  - Audio IF 1_23 
 R1303  - Audio IF 1_24 
 R1304  - Audio IF 1_25 
 R1305  - Audio IF 1_26 
 R1306  - Audio IF 1_27 
 R1344  - Audio IF 2_1 
 R1345  - Audio IF 2_2 
 R1346  - Audio IF 2_3 
 R1347  - Audio IF 2_4 
 R1348  - Audio IF 2_5 
 R1349  - Audio IF 2_6 
 R1350  - Audio IF 2_7 
 R1351  - Audio IF 2_8 
 R1352  - Audio IF 2_9 
 R1353  - Audio IF 2_10 
 R1354  - Audio IF 2_11 
 R1361  - Audio IF 2_18 
 R1362  - Audio IF 2_19 
 R1369  - Audio IF 2_26 
 R1370  - Audio IF 2_27 
 R1408  - Audio IF 3_1 
 R1409  - Audio IF 3_2 
 R1410  - Audio IF 3_3 
 R1411  - Audio IF 3_4 
 R1412  - Audio IF 3_5 
 R1413  - Audio IF 3_6 
 R1414  - Audio IF 3_7 
 R1415  - Audio IF 3_8 
 R1416  - Audio IF 3_9 
 R1417  - Audio IF 3_10 
 R1418  - Audio IF 3_11 
 R1425  - Audio IF 3_18 
 R1426  - Audio IF 3_19 
 R1433  - Audio IF 3_26 
 R1434  - Audio IF 3_27 
 R1600  - PWM1MIX Input 1 Source 
 R1601  - PWM1MIX Input 1 Volume 
 R1602  - PWM1MIX Input 2 Source 
 R1603  - PWM1MIX Input 2 Volume 
 R1604  - PWM1MIX Input 3 Source 
 R1605  - PWM1MIX Input 3 Volume 
 R1606  - PWM1MIX Input 4 Source 
 R1607  - PWM1MIX Input 4 Volume 
 R1608  - PWM2MIX Input 1 Source 
 R1609  - PWM2MIX Input 1 Volume 
 R1610  - PWM2MIX Input 2 Source 
 R1611  - PWM2MIX Input 2 Volume 
 R1612  - PWM2MIX Input 3 Source 
 R1613  - PWM2MIX Input 3 Volume 
 R1614  - PWM2MIX Input 4 Source 
 R1615  - PWM2MIX Input 4 Volume 
 R1664  - OUT1LMIX Input 1 Source 
 R1665  - OUT1LMIX Input 1 Volume 
 R1666  - OUT1LMIX Input 2 Source 
 R1667  - OUT1LMIX Input 2 Volume 
 R1668  - OUT1LMIX Input 3 Source 
 R1669  - OUT1LMIX Input 3 Volume 
 R1670  - OUT1LMIX Input 4 Source 
 R1671  - OUT1LMIX Input 4 Volume 
 R1672  - OUT1RMIX Input 1 Source 
 R1673  - OUT1RMIX Input 1 Volume 
 R1674  - OUT1RMIX Input 2 Source 
 R1675  - OUT1RMIX Input 2 Volume 
 R1676  - OUT1RMIX Input 3 Source 
 R1677  - OUT1RMIX Input 3 Volume 
 R1678  - OUT1RMIX Input 4 Source 
 R1679  - OUT1RMIX Input 4 Volume 
 R1680  - OUT2LMIX Input 1 Source 
 R1681  - OUT2LMIX Input 1 Volume 
 R1682  - OUT2LMIX Input 2 Source 
 R1683  - OUT2LMIX Input 2 Volume 
 R1684  - OUT2LMIX Input 3 Source 
 R1685  - OUT2LMIX Input 3 Volume 
 R1686  - OUT2LMIX Input 4 Source 
 R1687  - OUT2LMIX Input 4 Volume 
 R1688  - OUT2RMIX Input 1 Source 
 R1689  - OUT2RMIX Input 1 Volume 
 R1690  - OUT2RMIX Input 2 Source 
 R1691  - OUT2RMIX Input 2 Volume 
 R1692  - OUT2RMIX Input 3 Source 
 R1693  - OUT2RMIX Input 3 Volume 
 R1694  - OUT2RMIX Input 4 Source 
 R1695  - OUT2RMIX Input 4 Volume 
 R1696  - OUT3LMIX Input 1 Source 
 R1697  - OUT3LMIX Input 1 Volume 
 R1698  - OUT3LMIX Input 2 Source 
 R1699  - OUT3LMIX Input 2 Volume 
 R1700  - OUT3LMIX Input 3 Source 
 R1701  - OUT3LMIX Input 3 Volume 
 R1702  - OUT3LMIX Input 4 Source 
 R1703  - OUT3LMIX Input 4 Volume 
 R1704  - OUT3RMIX Input 1 Source 
 R1705  - OUT3RMIX Input 1 Volume 
 R1706  - OUT3RMIX Input 2 Source 
 R1707  - OUT3RMIX Input 2 Volume 
 R1708  - OUT3RMIX Input 3 Source 
 R1709  - OUT3RMIX Input 3 Volume 
 R1710  - OUT3RMIX Input 4 Source 
 R1711  - OUT3RMIX Input 4 Volume 
 R1712  - OUT4LMIX Input 1 Source 
 R1713  - OUT4LMIX Input 1 Volume 
 R1714  - OUT4LMIX Input 2 Source 
 R1715  - OUT4LMIX Input 2 Volume 
 R1716  - OUT4LMIX Input 3 Source 
 R1717  - OUT4LMIX Input 3 Volume 
 R1718  - OUT4LMIX Input 4 Source 
 R1719  - OUT4LMIX Input 4 Volume 
 R1720  - OUT4RMIX Input 1 Source 
 R1721  - OUT4RMIX Input 1 Volume 
 R1722  - OUT4RMIX Input 2 Source 
 R1723  - OUT4RMIX Input 2 Volume 
 R1724  - OUT4RMIX Input 3 Source 
 R1725  - OUT4RMIX Input 3 Volume 
 R1726  - OUT4RMIX Input 4 Source 
 R1727  - OUT4RMIX Input 4 Volume 
 R1728  - OUT5LMIX Input 1 Source 
 R1729  - OUT5LMIX Input 1 Volume 
 R1730  - OUT5LMIX Input 2 Source 
 R1731  - OUT5LMIX Input 2 Volume 
 R1732  - OUT5LMIX Input 3 Source 
 R1733  - OUT5LMIX Input 3 Volume 
 R1734  - OUT5LMIX Input 4 Source 
 R1735  - OUT5LMIX Input 4 Volume 
 R1736  - OUT5RMIX Input 1 Source 
 R1737  - OUT5RMIX Input 1 Volume 
 R1738  - OUT5RMIX Input 2 Source 
 R1739  - OUT5RMIX Input 2 Volume 
 R1740  - OUT5RMIX Input 3 Source 
 R1741  - OUT5RMIX Input 3 Volume 
 R1742  - OUT5RMIX Input 4 Source 
 R1743  - OUT5RMIX Input 4 Volume 
 R1744  - OUT6LMIX Input 1 Source 
 R1745  - OUT6LMIX Input 1 Volume 
 R1746  - OUT6LMIX Input 2 Source 
 R1747  - OUT6LMIX Input 2 Volume 
 R1748  - OUT6LMIX Input 3 Source 
 R1749  - OUT6LMIX Input 3 Volume 
 R1750  - OUT6LMIX Input 4 Source 
 R1751  - OUT6LMIX Input 4 Volume 
 R1752  - OUT6RMIX Input 1 Source 
 R1753  - OUT6RMIX Input 1 Volume 
 R1754  - OUT6RMIX Input 2 Source 
 R1755  - OUT6RMIX Input 2 Volume 
 R1756  - OUT6RMIX Input 3 Source 
 R1757  - OUT6RMIX Input 3 Volume 
 R1758  - OUT6RMIX Input 4 Source 
 R1759  - OUT6RMIX Input 4 Volume 
 R1792  - AIF1TX1MIX Input 1 Source 
 R1793  - AIF1TX1MIX Input 1 Volume 
 R1794  - AIF1TX1MIX Input 2 Source 
 R1795  - AIF1TX1MIX Input 2 Volume 
 R1796  - AIF1TX1MIX Input 3 Source 
 R1797  - AIF1TX1MIX Input 3 Volume 
 R1798  - AIF1TX1MIX Input 4 Source 
 R1799  - AIF1TX1MIX Input 4 Volume 
 R1800  - AIF1TX2MIX Input 1 Source 
 R1801  - AIF1TX2MIX Input 1 Volume 
 R1802  - AIF1TX2MIX Input 2 Source 
 R1803  - AIF1TX2MIX Input 2 Volume 
 R1804  - AIF1TX2MIX Input 3 Source 
 R1805  - AIF1TX2MIX Input 3 Volume 
 R1806  - AIF1TX2MIX Input 4 Source 
 R1807  - AIF1TX2MIX Input 4 Volume 
 R1808  - AIF1TX3MIX Input 1 Source 
 R1809  - AIF1TX3MIX Input 1 Volume 
 R1810  - AIF1TX3MIX Input 2 Source 
 R1811  - AIF1TX3MIX Input 2 Volume 
 R1812  - AIF1TX3MIX Input 3 Source 
 R1813  - AIF1TX3MIX Input 3 Volume 
 R1814  - AIF1TX3MIX Input 4 Source 
 R1815  - AIF1TX3MIX Input 4 Volume 
 R1816  - AIF1TX4MIX Input 1 Source 
 R1817  - AIF1TX4MIX Input 1 Volume 
 R1818  - AIF1TX4MIX Input 2 Source 
 R1819  - AIF1TX4MIX Input 2 Volume 
 R1820  - AIF1TX4MIX Input 3 Source 
 R1821  - AIF1TX4MIX Input 3 Volume 
 R1822  - AIF1TX4MIX Input 4 Source 
 R1823  - AIF1TX4MIX Input 4 Volume 
 R1824  - AIF1TX5MIX Input 1 Source 
 R1825  - AIF1TX5MIX Input 1 Volume 
 R1826  - AIF1TX5MIX Input 2 Source 
 R1827  - AIF1TX5MIX Input 2 Volume 
 R1828  - AIF1TX5MIX Input 3 Source 
 R1829  - AIF1TX5MIX Input 3 Volume 
 R1830  - AIF1TX5MIX Input 4 Source 
 R1831  - AIF1TX5MIX Input 4 Volume 
 R1832  - AIF1TX6MIX Input 1 Source 
 R1833  - AIF1TX6MIX Input 1 Volume 
 R1834  - AIF1TX6MIX Input 2 Source 
 R1835  - AIF1TX6MIX Input 2 Volume 
 R1836  - AIF1TX6MIX Input 3 Source 
 R1837  - AIF1TX6MIX Input 3 Volume 
 R1838  - AIF1TX6MIX Input 4 Source 
 R1839  - AIF1TX6MIX Input 4 Volume 
 R1840  - AIF1TX7MIX Input 1 Source 
 R1841  - AIF1TX7MIX Input 1 Volume 
 R1842  - AIF1TX7MIX Input 2 Source 
 R1843  - AIF1TX7MIX Input 2 Volume 
 R1844  - AIF1TX7MIX Input 3 Source 
 R1845  - AIF1TX7MIX Input 3 Volume 
 R1846  - AIF1TX7MIX Input 4 Source 
 R1847  - AIF1TX7MIX Input 4 Volume 
 R1848  - AIF1TX8MIX Input 1 Source 
 R1849  - AIF1TX8MIX Input 1 Volume 
 R1850  - AIF1TX8MIX Input 2 Source 
 R1851  - AIF1TX8MIX Input 2 Volume 
 R1852  - AIF1TX8MIX Input 3 Source 
 R1853  - AIF1TX8MIX Input 3 Volume 
 R1854  - AIF1TX8MIX Input 4 Source 
 R1855  - AIF1TX8MIX Input 4 Volume 
 R1856  - AIF2TX1MIX Input 1 Source 
 R1857  - AIF2TX1MIX Input 1 Volume 
 R1858  - AIF2TX1MIX Input 2 Source 
 R1859  - AIF2TX1MIX Input 2 Volume 
 R1860  - AIF2TX1MIX Input 3 Source 
 R1861  - AIF2TX1MIX Input 3 Volume 
 R1862  - AIF2TX1MIX Input 4 Source 
 R1863  - AIF2TX1MIX Input 4 Volume 
 R1864  - AIF2TX2MIX Input 1 Source 
 R1865  - AIF2TX2MIX Input 1 Volume 
 R1866  - AIF2TX2MIX Input 2 Source 
 R1867  - AIF2TX2MIX Input 2 Volume 
 R1868  - AIF2TX2MIX Input 3 Source 
 R1869  - AIF2TX2MIX Input 3 Volume 
 R1870  - AIF2TX2MIX Input 4 Source 
 R1871  - AIF2TX2MIX Input 4 Volume 
 R1920  - AIF3TX1MIX Input 1 Source 
 R1921  - AIF3TX1MIX Input 1 Volume 
 R1922  - AIF3TX1MIX Input 2 Source 
 R1923  - AIF3TX1MIX Input 2 Volume 
 R1924  - AIF3TX1MIX Input 3 Source 
 R1925  - AIF3TX1MIX Input 3 Volume 
 R1926  - AIF3TX1MIX Input 4 Source 
 R1927  - AIF3TX1MIX Input 4 Volume 
 R1928  - AIF3TX2MIX Input 1 Source 
 R1929  - AIF3TX2MIX Input 1 Volume 
 R1930  - AIF3TX2MIX Input 2 Source 
 R1931  - AIF3TX2MIX Input 2 Volume 
 R1932  - AIF3TX2MIX Input 3 Source 
 R1933  - AIF3TX2MIX Input 3 Volume 
 R1934  - AIF3TX2MIX Input 4 Source 
 R1935  - AIF3TX2MIX Input 4 Volume 
 R2176  - EQ1MIX Input 1 Source 
 R2177  - EQ1MIX Input 1 Volume 
 R2178  - EQ1MIX Input 2 Source 
 R2179  - EQ1MIX Input 2 Volume 
 R2180  - EQ1MIX Input 3 Source 
 R2181  - EQ1MIX Input 3 Volume 
 R2182  - EQ1MIX Input 4 Source 
 R2183  - EQ1MIX Input 4 Volume 
 R2184  - EQ2MIX Input 1 Source 
 R2185  - EQ2MIX Input 1 Volume 
 R2186  - EQ2MIX Input 2 Source 
 R2187  - EQ2MIX Input 2 Volume 
 R2188  - EQ2MIX Input 3 Source 
 R2189  - EQ2MIX Input 3 Volume 
 R2190  - EQ2MIX Input 4 Source 
 R2191  - EQ2MIX Input 4 Volume 
 R2192  - EQ3MIX Input 1 Source 
 R2193  - EQ3MIX Input 1 Volume 
 R2194  - EQ3MIX Input 2 Source 
 R2195  - EQ3MIX Input 2 Volume 
 R2196  - EQ3MIX Input 3 Source 
 R2197  - EQ3MIX Input 3 Volume 
 R2198  - EQ3MIX Input 4 Source 
 R2199  - EQ3MIX Input 4 Volume 
 R2200  - EQ4MIX Input 1 Source 
 R2201  - EQ4MIX Input 1 Volume 
 R2202  - EQ4MIX Input 2 Source 
 R2203  - EQ4MIX Input 2 Volume 
 R2204  - EQ4MIX Input 3 Source 
 R2205  - EQ4MIX Input 3 Volume 
 R2206  - EQ4MIX Input 4 Source 
 R2207  - EQ4MIX Input 4 Volume 
 R2240  - DRC1LMIX Input 1 Source 
 R2241  - DRC1LMIX Input 1 Volume 
 R2242  - DRC1LMIX Input 2 Source 
 R2243  - DRC1LMIX Input 2 Volume 
 R2244  - DRC1LMIX Input 3 Source 
 R2245  - DRC1LMIX Input 3 Volume 
 R2246  - DRC1LMIX Input 4 Source 
 R2247  - DRC1LMIX Input 4 Volume 
 R2248  - DRC1RMIX Input 1 Source 
 R2249  - DRC1RMIX Input 1 Volume 
 R2250  - DRC1RMIX Input 2 Source 
 R2251  - DRC1RMIX Input 2 Volume 
 R2252  - DRC1RMIX Input 3 Source 
 R2253  - DRC1RMIX Input 3 Volume 
 R2254  - DRC1RMIX Input 4 Source 
 R2255  - DRC1RMIX Input 4 Volume 
 R2304  - HPLP1MIX Input 1 Source 
 R2305  - HPLP1MIX Input 1 Volume 
 R2306  - HPLP1MIX Input 2 Source 
 R2307  - HPLP1MIX Input 2 Volume 
 R2308  - HPLP1MIX Input 3 Source 
 R2309  - HPLP1MIX Input 3 Volume 
 R2310  - HPLP1MIX Input 4 Source 
 R2311  - HPLP1MIX Input 4 Volume 
 R2312  - HPLP2MIX Input 1 Source 
 R2313  - HPLP2MIX Input 1 Volume 
 R2314  - HPLP2MIX Input 2 Source 
 R2315  - HPLP2MIX Input 2 Volume 
 R2316  - HPLP2MIX Input 3 Source 
 R2317  - HPLP2MIX Input 3 Volume 
 R2318  - HPLP2MIX Input 4 Source 
 R2319  - HPLP2MIX Input 4 Volume 
 R2320  - HPLP3MIX Input 1 Source 
 R2321  - HPLP3MIX Input 1 Volume 
 R2322  - HPLP3MIX Input 2 Source 
 R2323  - HPLP3MIX Input 2 Volume 
 R2324  - HPLP3MIX Input 3 Source 
 R2325  - HPLP3MIX Input 3 Volume 
 R2326  - HPLP3MIX Input 4 Source 
 R2327  - HPLP3MIX Input 4 Volume 
 R2328  - HPLP4MIX Input 1 Source 
 R2329  - HPLP4MIX Input 1 Volume 
 R2330  - HPLP4MIX Input 2 Source 
 R2331  - HPLP4MIX Input 2 Volume 
 R2332  - HPLP4MIX Input 3 Source 
 R2333  - HPLP4MIX Input 3 Volume 
 R2334  - HPLP4MIX Input 4 Source 
 R2335  - HPLP4MIX Input 4 Volume 
 R2368  - DSP1LMIX Input 1 Source 
 R2369  - DSP1LMIX Input 1 Volume 
 R2370  - DSP1LMIX Input 2 Source 
 R2371  - DSP1LMIX Input 2 Volume 
 R2372  - DSP1LMIX Input 3 Source 
 R2373  - DSP1LMIX Input 3 Volume 
 R2374  - DSP1LMIX Input 4 Source 
 R2375  - DSP1LMIX Input 4 Volume 
 R2376  - DSP1RMIX Input 1 Source 
 R2377  - DSP1RMIX Input 1 Volume 
 R2378  - DSP1RMIX Input 2 Source 
 R2379  - DSP1RMIX Input 2 Volume 
 R2380  - DSP1RMIX Input 3 Source 
 R2381  - DSP1RMIX Input 3 Volume 
 R2382  - DSP1RMIX Input 4 Source 
 R2383  - DSP1RMIX Input 4 Volume 
 R2384  - DSP1AUX1MIX Input 1 Source 
 R2392  - DSP1AUX2MIX Input 1 Source 
 R2400  - DSP1AUX3MIX Input 1 Source 
 R2408  - DSP1AUX4MIX Input 1 Source 
 R2416  - DSP1AUX5MIX Input 1 Source 
 R2424  - DSP1AUX6MIX Input 1 Source 
 R2432  - DSP2LMIX Input 1 Source 
 R2433  - DSP2LMIX Input 1 Volume 
 R2434  - DSP2LMIX Input 2 Source 
 R2435  - DSP2LMIX Input 2 Volume 
 R2436  - DSP2LMIX Input 3 Source 
 R2437  - DSP2LMIX Input 3 Volume 
 R2438  - DSP2LMIX Input 4 Source 
 R2439  - DSP2LMIX Input 4 Volume 
 R2440  - DSP2RMIX Input 1 Source 
 R2441  - DSP2RMIX Input 1 Volume 
 R2442  - DSP2RMIX Input 2 Source 
 R2443  - DSP2RMIX Input 2 Volume 
 R2444  - DSP2RMIX Input 3 Source 
 R2445  - DSP2RMIX Input 3 Volume 
 R2446  - DSP2RMIX Input 4 Source 
 R2447  - DSP2RMIX Input 4 Volume 
 R2448  - DSP2AUX1MIX Input 1 Source 
 R2456  - DSP2AUX2MIX Input 1 Source 
 R2464  - DSP2AUX3MIX Input 1 Source 
 R2472  - DSP2AUX4MIX Input 1 Source 
 R2480  - DSP2AUX5MIX Input 1 Source 
 R2488  - DSP2AUX6MIX Input 1 Source 
 R2496  - DSP3LMIX Input 1 Source 
 R2497  - DSP3LMIX Input 1 Volume 
 R2498  - DSP3LMIX Input 2 Source 
 R2499  - DSP3LMIX Input 2 Volume 
 R2500  - DSP3LMIX Input 3 Source 
 R2501  - DSP3LMIX Input 3 Volume 
 R2502  - DSP3LMIX Input 4 Source 
 R2503  - DSP3LMIX Input 4 Volume 
 R2504  - DSP3RMIX Input 1 Source 
 R2505  - DSP3RMIX Input 1 Volume 
 R2506  - DSP3RMIX Input 2 Source 
 R2507  - DSP3RMIX Input 2 Volume 
 R2508  - DSP3RMIX Input 3 Source 
 R2509  - DSP3RMIX Input 3 Volume 
 R2510  - DSP3RMIX Input 4 Source 
 R2511  - DSP3RMIX Input 4 Volume 
 R2512  - DSP3AUX1MIX Input 1 Source 
 R2520  - DSP3AUX2MIX Input 1 Source 
 R2528  - DSP3AUX3MIX Input 1 Source 
 R2536  - DSP3AUX4MIX Input 1 Source 
 R2544  - DSP3AUX5MIX Input 1 Source 
 R2552  - DSP3AUX6MIX Input 1 Source 
 R2688  - ASRC1LMIX Input 1 Source 
 R2696  - ASRC1RMIX Input 1 Source 
 R2704  - ASRC2LMIX Input 1 Source 
 R2712  - ASRC2RMIX Input 1 Source 
 R2816  - ISRC1DEC1MIX Input 1 Source 
 R2824  - ISRC1DEC2MIX Input 1 Source 
 R2832  - ISRC1DEC3MIX Input 1 Source 
 R2840  - ISRC1DEC4MIX Input 1 Source 
 R2848  - ISRC1INT1MIX Input 1 Source 
 R2856  - ISRC1INT2MIX Input 1 Source 
 R2864  - ISRC1INT3MIX Input 1 Source 
 R2872  - ISRC1INT4MIX Input 1 Source 
 R2880  - ISRC2DEC1MIX Input 1 Source 
 R2888  - ISRC2DEC2MIX Input 1 Source 
 R2896  - ISRC2DEC3MIX Input 1 Source 
 R2904  - ISRC2DEC4MIX Input 1 Source 
 R2912  - ISRC2INT1MIX Input 1 Source 
 R2920  - ISRC2INT2MIX Input 1 Source 
 R2928  - ISRC2INT3MIX Input 1 Source 
 R2936  - ISRC2INT4MIX Input 1 Source 
 R3072  - GPIO CTRL 1 
 R3073  - GPIO CTRL 2 
 R3074  - GPIO CTRL 3 
 R3075  - GPIO CTRL 4 
 R3076  - GPIO CTRL 5 
 R3077  - GPIO CTRL 6 
 R3107  - Misc Pad Ctrl 1 
 R3108  - Misc Pad Ctrl 2 
 R3109  - Misc Pad Ctrl 3 
 R3110  - Misc Pad Ctrl 4 
 R3111  - Misc Pad Ctrl 5 
 R3112  - Misc GPIO 1 
 R3328  - Interrupt Status 1 
 R3329  - Interrupt Status 2 
 R3330  - Interrupt Status 3 
 R3331  - Interrupt Status 4 
 R3332  - Interrupt Raw Status 2 
 R3333  - Interrupt Raw Status 3 
 R3334  - Interrupt Raw Status 4 
 R3335  - Interrupt Status 1 Mask 
 R3336  - Interrupt Status 2 Mask 
 R3337  - Interrupt Status 3 Mask 
 R3338  - Interrupt Status 4 Mask 
 R3359  - Interrupt Control 
 R3360  - IRQ Debounce 1 
 R3361  - IRQ Debounce 2 
 R3584  - FX_Ctrl 
 R3600  - EQ1_1 
 R3601  - EQ1_2 
 R3602  - EQ1_3 
 R3603  - EQ1_4 
 R3604  - EQ1_5 
 R3605  - EQ1_6 
 R3606  - EQ1_7 
 R3607  - EQ1_8 
 R3608  - EQ1_9 
 R3609  - EQ1_10 
 R3610  - EQ1_11 
 R3611  - EQ1_12 
 R3612  - EQ1_13 
 R3613  - EQ1_14 
 R3614  - EQ1_15 
 R3615  - EQ1_16 
 R3616  - EQ1_17 
 R3617  - EQ1_18 
 R3618  - EQ1_19 
 R3619  - EQ1_20 
 R3622  - EQ2_1 
 R3623  - EQ2_2 
 R3624  - EQ2_3 
 R3625  - EQ2_4 
 R3626  - EQ2_5 
 R3627  - EQ2_6 
 R3628  - EQ2_7 
 R3629  - EQ2_8 
 R3630  - EQ2_9 
 R3631  - EQ2_10 
 R3632  - EQ2_11 
 R3633  - EQ2_12 
 R3634  - EQ2_13 
 R3635  - EQ2_14 
 R3636  - EQ2_15 
 R3637  - EQ2_16 
 R3638  - EQ2_17 
 R3639  - EQ2_18 
 R3640  - EQ2_19 
 R3641  - EQ2_20 
 R3644  - EQ3_1 
 R3645  - EQ3_2 
 R3646  - EQ3_3 
 R3647  - EQ3_4 
 R3648  - EQ3_5 
 R3649  - EQ3_6 
 R3650  - EQ3_7 
 R3651  - EQ3_8 
 R3652  - EQ3_9 
 R3653  - EQ3_10 
 R3654  - EQ3_11 
 R3655  - EQ3_12 
 R3656  - EQ3_13 
 R3657  - EQ3_14 
 R3658  - EQ3_15 
 R3659  - EQ3_16 
 R3660  - EQ3_17 
 R3661  - EQ3_18 
 R3662  - EQ3_19 
 R3663  - EQ3_20 
 R3666  - EQ4_1 
 R3667  - EQ4_2 
 R3668  - EQ4_3 
 R3669  - EQ4_4 
 R3670  - EQ4_5 
 R3671  - EQ4_6 
 R3672  - EQ4_7 
 R3673  - EQ4_8 
 R3674  - EQ4_9 
 R3675  - EQ4_10 
 R3676  - EQ4_11 
 R3677  - EQ4_12 
 R3678  - EQ4_13 
 R3679  - EQ4_14 
 R3680  - EQ4_15 
 R3681  - EQ4_16 
 R3682  - EQ4_17 
 R3683  - EQ4_18 
 R3684  - EQ4_19 
 R3685  - EQ4_20 
 R3712  - DRC1 ctrl1 
 R3713  - DRC1 ctrl2 
 R3714  - DRC1 ctrl3 
 R3715  - DRC1 ctrl4 
 R3716  - DRC1 ctrl5 
 R3776  - HPLPF1_1 
 R3777  - HPLPF1_2 
 R3780  - HPLPF2_1 
 R3781  - HPLPF2_2 
 R3784  - HPLPF3_1 
 R3785  - HPLPF3_2 
 R3788  - HPLPF4_1 
 R3789  - HPLPF4_2 
 R3842  - DSP1 Control 2 
 R3843  - DSP1 Control 3 
 R3844  - DSP1 Control 4 
 R4098  - DSP2 Control 2 
 R4099  - DSP2 Control 3 
 R4100  - DSP2 Control 4 
 R4354  - DSP3 Control 2 
 R4355  - DSP3 Control 3 
 R4356  - DSP3 Control 4 
  CS4270 ALSA SoC (ASoC) codec driver
  Author: Timur Tabi <timur@freescale.com>
  Copyright 2007-2009 Freescale Semiconductor, Inc.  This file is licensed
  under the terms of the GNU General Public License version 2.  This
  program is licensed "as is" without any warranty of any kind, whether
  express or implied.
  This is an ASoC device driver for the Cirrus Logic CS4270 codec.
  Current featureslimitations:
  - Software mode is supported.  Stand-alone mode is not supported.
  - Only I2C is supported, not SPI
  - Support for master and slave mode
  - The machine driver's 'startup' function must call
    cs4270_set_dai_sysclk() with the value of MCLK.
  - Only I2S and left-justified modes are supported
  - Power management is supported
  The codec isn't really big-endian or little-endian, since the I2S
  interface requires data to be sent serially with the MSbit first.
  However, to support BE and LE I2S devices, we specify both here.  That
  way, ALSA will always match the bit patterns.
 CS4270 registers addresses 
 Chip ID 
 Power Control 
 Mode Control 
 Serial Format, ADCDAC Control 
 Transition Control 
 Mute Control 
 DAC Channel A Volume Control 
 DAC Channel B Volume Control 
 Bit masks for the CS4270 registers 
 Power-on default values for the registers
  This array contains the power-on default values of the registers, with the
  exception of the "CHIPID" register (01h).  The lower four bits of that
  register contain the hardware revision, so it is treated as volatile.
 Private data for the CS4270 
 Input frequency of the MCLK pin 
 The mode (I2S or left-justified) 
 power domain regulators 
 reset gpio 
  struct cs4270_mode_ratios - clock ratio tables
  @ratio: the ratio of MCLK to the sample rate
  @speed_mode: the Speed Mode bits to set in the Mode Control register for
               this ratio
  @mclk: the Ratio Select bits to set in the Mode Control register for this
         ratio
  The data for this chart is taken from Table 5 of the CS4270 reference
  manual.
  This table is used to determine how to program the Mode Control register.
  It is also used by cs4270_set_dai_sysclk() to tell ALSA which sampling
  rates the CS4270 currently supports.
  @speed_mode is the corresponding bit pattern to be written to the
  MODE bits of the Mode Control Register
  @mclk is the corresponding bit pattern to be wirten to the MCLK bits of
  the Mode Control Register.
  In situations where a single ratio is represented by multiple speed
  modes, we favor the slowest speed.  E.g, for a ratio of 128, we pick
  double-speed instead of quad-speed.  However, the CS4270 errata states
  that divide-By-1.5 can cause failures, so we avoid that mode where
  possible.
  Errata: There is an errata for the CS4270 where divide-by-1.5 does not
  work if Vd is 3.3V.  If this effects you, select the
  CONFIG_SND_SOC_CS4270_VD33_ERRATA Kconfig option, and the driver will
  never select any sample rates that require divide-by-1.5.
 The number of MCLKLRCK ratios supported by the CS4270 
 Unreadable registers are considered volatile 
  cs4270_set_dai_sysclk - determine the CS4270 samples rates.
  @codec_dai: the codec DAI
  @clk_id: the clock ID (ignored)
  @freq: the MCLK input frequency
  @dir: the clock direction (ignored)
  This function is used to tell the codec driver what the input MCLK
  frequency is.
  The value of MCLK is used to determine which sample rates are supported
  by the CS4270.  The ratio of MCLK  Fs must be equal to one of nine
  supported values - 64, 96, 128, 192, 256, 384, 512, 768, and 1024.
  This function calculates the nine ratios and determines which ones match
  a standard sample rate.  If there's a match, then it is added to the list
  of supported sample rates.
  This function must be called by the machine driver's 'startup' function,
  otherwise the list of supported sample rates will not be available in
  time for ALSA.
  For setups with variable MCLKs, pass 0 as 'freq' argument. This will cause
  theoretically possible sample rates to be enabled. Call it again with a
  proper value set one the external clock is set (most probably you would do
  that from a machine's driver 'hw_param' hook.
  cs4270_set_dai_fmt - configure the codec for the selected audio format
  @codec_dai: the codec DAI
  @format: a SND_SOC_DAIFMT_x value indicating the data format
  This function takes a bitmask of SND_SOC_DAIFMT_x bits and programs the
  codec accordingly.
  Currently, this function only supports SND_SOC_DAIFMT_I2S and
  SND_SOC_DAIFMT_LEFT_J.  The CS4270 codec also supports right-justified
  data for playback only, but ASoC currently does not support different
  formats for playback vs. record.
 set DAI format 
 set masterslave audio interface 
 all other modes are unsupported by the hardware 
  cs4270_hw_params - program the CS4270 with the given hardware parameters.
  @substream: the audio stream
  @params: the hardware parameters to set
  @dai: the SOC DAI (ignored)
  This function programs the hardware with the values provided.
  Specifically, the sample rate and the data format.
  The .ops functions are used to provide board-specific data, like input
  frequencies, to this driver.  This function takes that information,
  combines it with the hardware parameters provided, and programs the
  hardware accordingly.
 Figure out which MCLKLRCK ratio to use 
 Sampling rate, in Hz 
 MCLKLRCK ratio 
 We did not find a matching ratio 
 Set the sample rate 
 Set the DAI format 
  cs4270_dai_mute - enabledisable the CS4270 external mute
  @dai: the SOC DAI
  @mute: 0 = disable mute, 1 = enable mute
  @direction: (ignored)
  This function toggles the mute bits in the MUTE register.  The CS4270's
  mute capability is intended for external muting circuitry, so if the
  board does not have the MUTEA or MUTEB pins connected to such circuitry,
  then this function will do nothing.
  cs4270_soc_put_mute - put callback for the 'Master Playback switch'
  			 alsa control.
  @kcontrol: mixer control
  @ucontrol: control element information
  This function basically passes the arguments on to the generic
  snd_soc_put_volsw() function and saves the mute information in
  our private data structure. This is because we want to prevent
  cs4270_dai_mute() neglecting the user's decision to manually
  mute the codec's output.
  Returns 0 for success.
 A list of non-DAPM controls that the CS4270 supports 
  cs4270_probe - ASoC probe function
  @component: ASoC component
  This function is called when ASoC has all the pieces it needs to
  instantiate a sound driver.
	 Disable auto-mute.  This feature appears to be buggy.  In some
	  situations, auto-mute will not deactivate when it should, so we want
	  this feature disabled by default.  An application (e.g. alsactl) can
	  re-enabled it by using the controls.
	 Disable automatic volume control.  The hardware enables, and it
	  causes volume change commands to be delayed, sometimes until after
	  playback has started.  An application (e.g. alsactl) can
	  re-enabled it by using the controls.
  cs4270_remove - ASoC remove function
  @component: ASoC component
  This function is the counterpart to cs4270_probe().
 This suspendresume implementation can handle both - a simple standby
  where the codec remains powered, and a full suspend, where the voltage
  domain the codec is connected to is teared down andor any other hardware
  reset condition is asserted.
  The codec's own power saving features are enabled in the suspend callback,
  and all registers are written back to the hardware when resuming.
	 In case the device was put to hard reset during sleep, we need to
 first restore the entire register cache ... 
 ... then disable the power-down bits 
 CONFIG_PM 
  ASoC codec driver structure
  cs4270_of_match - the device tree bindings
  cs4270_i2c_remove - deinitialize the I2C interface of the CS4270
  @i2c_client: the I2C client object
  This function puts the chip into low power mode when the i2c device
  is removed.
  cs4270_i2c_probe - initialize the I2C interface of the CS4270
  @i2c_client: the I2C client object
  @id: the I2C device ID (ignored)
  This function is called whenever the I2C subsystem finds a device that
  matches the device ID given via a prior call to i2c_add_driver().
 get the power supply regulators 
 reset the device 
 Sleep 500ns before i2c communications 
 Verify that we have a CS4270 
 The top four bits of the chip ID should be 1100. 
  cs4270_id - I2C device IDs supported by this driver
  cs4270_i2c_driver - I2C device identification
  This structure tells the I2C subsystem how to identify and support a
  given I2C device type.
 SPDX-License-Identifier: GPL-2.0
 Audio driver for AK5558 ADC
 Copyright (C) 2015 Asahi Kasei Microdevices Corporation
 Copyright 2018 NXP
 AK5558 Codec Private Data 
 Reset & Power down GPIO 
 ak5558 register cache & default register settings 
	0x00	AK5558_00_POWER_MANAGEMENT1	
	0x01	AK5558_01_POWER_MANAGEMENT2	
	0x02	AK5558_02_CONTROL1		
	0x03	AK5558_03_CONTROL2		
	0x04	AK5558_04_CONTROL3		
	0x05	AK5558_05_DSD			
 Analog Input 
 Analog Input 
 set masterslave audio interface 
 SPDX-License-Identifier: GPL-2.0-only
  rt5677.c  --  RT5677 ALSA SoC audio codec driver
  Copyright 2013 Realtek Semiconductor Corp.
  Author: Oder Chiou <oder_chiou@realtek.com>
 Register controlling boot vector 
 Modified by DSP firmware 
 Modified by DSP firmware 
 Modified by DSP firmware 
  rt5677_dsp_mode_i2c_write_addr - Write value to address on DSP mode.
  @rt5677: Private Data.
  @addr: Address index.
  @value: Address data.
  @opcode: opcode value
  Returns 0 for success or negative error code.
  rt5677_dsp_mode_i2c_read_addr - Read value from address on DSP mode.
  @rt5677: Private Data.
  @addr: Address index.
  @value: Address data.
  Returns 0 for success or negative error code.
  rt5677_dsp_mode_i2c_write - Write register on DSP mode.
  @rt5677: Private Data.
  @reg: Register index.
  @value: Register data.
  Returns 0 for success or negative error code.
  rt5677_dsp_mode_i2c_read - Read register on DSP mode.
  @rt5677: Private Data
  @reg: Register index.
  @value: Register data.
  Returns 0 for success or negative error code.
	 Force dapm to sync before we enable the
	  DSP to prevent write corruption
	 DMIC1 power = enabled
	  DMIC CLK = 256  fs  12
 I2S pre divide 2 = 6 (clk_sys2) 
 DSP Clock = MCLK1 (bypassed PLL2) 
 SAD Threshold1 
 SAD Threshold2 
	 SAD Sample Rate Converter = Up 6 (8K to 48K)
	  SAD Output Sample Rate = Same as I2S
	  SAD Threshold3
	 Minimum frame level within a pre-determined duration = 32 frames
	  Bypass ADPCM EncoderDecoder = Bypass ADPCM
	  Automatic Push Data to SAD Buffer Once SAD Flag is triggered = enable
	  SAD Buffer Over-Writing = enable
	  SAD Buffer Pop Mode Control = disable
	  SAD Buffer Push Mode Control = enable
	  SAD Detector Control = enable
	  SAD Function Control = enable
	  SAD Function Reset = normal
	 VADSAD is not routed to the IRQ output (i.e. MX-BE[14] = 0), but it
	  is routed to DSP_IRQ_0, so DSP firmware may use it to sleep and save
	  power. See ALC5677 datasheet section 9.17 "GPIO, Interrupt and Jack
	  Detection" for more info.
 Private register, no doc 
	 LDO2 output = 1.2V
	  LDO1 output = 1.2V (LDO_IN = 1.8V)
	 Codec core power =  power on
	  LDO1 power = power on
	 Isolation for DCVDD4 = normal (set during probe)
	  Isolation for DCVDD2 = normal (set during probe)
	  Isolation for DSP = normal
	  Isolation for Band 0~7 = disable
	  Isolation for InBound 4~10 and OutBound 4~10 = disable
	 System Band 0~7 = power on
	  InBound 4~10 and OutBound 4~10 = power on
	  DSP = power on
	  DSP CPU = stop (will be set to "run" after firmware loaded)
 TODO: handle p_memsz != p_filesz 
 Load dsp firmware from rt5677_elf_vad file 
		 Before a hotword is detected, GPIO1 pin is configured as IRQ
		  output so that jack detect works. When a hotword is detected,
		  the DSP firmware configures the GPIO1 pin as GPIO1 and
		  drives a 1. rt5677_irq() is called after a rising edge on
		  the GPIO1 pin, due to either jack detect event or hotword
		  event, or both. All possible events are checked and handled
		  in rt5677_irq() where GPIO1 pin is configured back to IRQ
		  output if a hotword is detected.
 Boot the firmware from IRAM instead of SRAM0. 
 Set DSP CPU to Run 
 Don't turn off the DSP while handling irqs 
 Set DSP CPU to Stop 
 Disable and clear VAD interrupt 
 Set GPIO1 pin back to be IRQ output for jack detect 
 {0, +20, +24, +30, +35, +40, +44, +50, +52} dB 
 OUTPUT Control 
 DAC Digital Volume 
 IN1IN2 Control 
 ADC Digital Volume Control 
 Sidetone Control 
 ADC Boost Volume Control 
  set_dmic_clk - Set parameter of dmic.
  @w: DAPM widget.
  @kcontrol: The kcontrol of this widget.
  @event: Event id.
  Choose dmic clock between 1MHz and 3MHz.
  It is better for clock to approximate 3MHz.
  rt5677_sel_asrc_clk_src - select ASRC clock source for a set of filters
  @component: SoC audio component device.
  @filter_mask: mask of filters.
  @clk_src: clock source
  The ASRC function is for asynchronous MCLK and LRCK. Also, since RT5677 can
  only support standard 32fs or 64fs i2s format, ASRC should be enabled to
  support special i2s clock format such as Intel's 100fs(100  sampling rate).
  ASRC function will track i2s clock and generate a corresponding system clock
  for codec. This function provides an API to select the clock source for a
  set of filters specified by the mask. And the codec driver will turn on ASRC
  for these filters if ASRC is selected as their clock source.
 ASRC 3 
 ASRC 4 
 ASRC 5 
 ASRC 6 
 ASRC 7 
 ASRC 8 
 Digital Mixer 
 Mux 
 DAC1 LR Source  
 ADDA1 LR Source  
DAC2 LR Source 
DAC3 LR Source 
DAC4 LR Source 
 InOutBound Source Pass SRC  
 Stereo ADC Source 2  
 DMIC Source  
 Stereo2 ADC Source  
 Stereo1 ADC Source 1  
 Mono ADC Left Source 2  
 Mono ADC Left Source 1  
 Mono ADC Right Source 2  
 Mono ADC Right Source 1  
 Stereo4 ADC Source 2  
 Stereo4 ADC Source 1  
 InBound01 Source  
 InBound23 Source  
 InBound45 Source  
 InBound6 Source  
 InBound7 Source  
 InBound8 Source  
 InBound9 Source  
 VAD Source  
 Sidetone Source  
 DAC12 Source  
 DAC3 Source  
 PDM channel Source  
 TDM IF12 SLB ADC1 Data Selection  
 TDM IF12 SLB ADC2 Data Selection  
 TDM IF12 SLB ADC3 Data Selection  
 TDM IF12 SLB ADC4 Data Selection  
 Interface34 ADC Data Input  
 TDM IF12 ADC Data Selection  
 TDM IF1 ADC Data Selection  
 TDM IF2 ADC Data Selection  
 TDM IF12 DAC Data Selection   MX-3E[14:12][10:8][6:4][2:0]
					MX-3F[14:12][10:8][6:4][2:0]
					MX-43[14:12][10:8][6:4][2:0]
 ASRC 
 Input Side 
 micbias 
 Input Lines 
 Boost 
 ADCs 
 ADC Mux 
 ADC Mixer 
 ADC PGA 
 DSP 
 Digital Interface 
 Digital Interface Select 
 Audio Interface 
 Sidetone Mux 
 VAD Mux
 Tensilica DSP 
 Output Side 
 DAC mixer before sound effect 
 DAC Mux 
 DAC2 channel Mux 
 DAC3 channel Mux 
 DAC4 channel Mux 
 DAC Mixer 
 DACs 
 PDM 
 Output Lines 
	 The IB01 Mux controls the source for InBound0 and InBound1.
	  When the mux option "VAD ADCDAC1 FS" is selected, "VAD ADC" goes to
	  InBound0 and "DAC1 FS" goes to InBound1. "VAD ADC" is used for
	  hotwording. "DAC1 FS" is not used currently.
	 
	  Creating a common widget node for "VAD ADC" + "DAC1 FS" and
	  connecting the common widget to IB01 Mux causes the issue where
	  there is an active path going from system playback -> "DAC1 FS" ->
	  IB01 Mux -> DSP Buffer -> hotword stream. This wrong path confuses
	  DAPM. Therefore "DAC1 FS" is ignored for now.
  rt5677_pll_calc - Calcualte PLL MNK code.
  @freq_in: external clock provided to codec.
  @freq_out: target clock which codec works on.
  @pll_code: Pointer to structure with M, N, K, bypass K and bypass M flag.
  Calcualte MNK code and bypass KM flag to configure PLL for codec.
  Returns 0 for success or negative error code.
 Re-enable the DSP if it was turned off at suspend 
 The delay is to wait for MCLK 
 Turn off the DSP before suspend 
 Configures the gpio as
    0 - floating
    1 - pull down
    2 - pull up
use dmic1 clock by default
 Firmware sets GPIO1 pin to be GPIO1 after hotword is detected 
 Set GPIO1 pin back to be IRQ output for jack detect 
	
	  Loop to handle interrupts until the last i2c read shows no pending
	  irqs. The interrupt line is shared by multiple interrupt sources.
	  After the regmap_read() below, a new interrupt source line may
	  become high before the regmap_write() finishes, so there isn't a
	  rising edge on the shared interrupt line for the new interrupt. Thus,
	  the loop is needed to avoid missing irqs.
	 
	  A safeguard of 20 loops is used to avoid hanging in the irq handler
	  if there is something wrong with the interrupt status update. The
	  interrupt sources here are audio jack plugunplug events which
	  shouldn't happen at a high frequency for a long period of time.
	  Empirically, more than 3 loops have never been seen.
 Read interrupt status 
				 Clear the interrupt by flipping the polarity
				  of the interrupt source line that fired
		 Exit the loop only when we know for sure that GPIO1 pin
		  was low at some point since irq_lock was acquired. Any event
		  after that point creates a rising edge that triggers another
		  call to rt5677_irq().
	 This is needed to check and clear the interrupt status register
	  at resume. If the headset is pluggedunplugged when the device is
	  fully suspended, there won't be a rising edge at resume to trigger
	  the interrupt. Without this, we miss the next unplugplug event.
	 Call all enabled jack detect irq handlers again. This is needed in
	  addition to the above check for a corner case caused by jack gpio
	  debounce. After codec irq is disabled at suspend, the delayed work
	  scheduled by soc-jack may run and read wrong jack gpio values, since
	  the regmap is in cache only mode. At resume, there is no irq because
	  rt5677_irq has already ran and cleared the irq status at suspend.
	  Without this explicit check, unplug the headset right after suspend
	  starts, then after resume the headset is still shown as plugged in.
 Set the enabledisable bits for the jack detect IRQs.
	
	  Select RC as the debounce clock so that GPIO works even when
	  MCLK is gated which happens when there is no audio stream
	  (SND_SOC_BIAS_OFF).
 Enable auto power on RC when GPIO states are changed 
 Select and enable jack detection sources per platform data 
 Set GPIO1 pin to be IRQ output 
 Ready to listen for interrupts 
	 pow-ldo2 and reset are optional. The codec pins may be statically
	  connected on the board without gpios. If the gpio device property
	  isn't specified, devm_gpiod_get_optional returns NULL.
		 Wait a while until I2C bus becomes available. The datasheet
		  does not specify the exact we should wait but startup
		  sequence mentiones at least a few milliseconds.
 SPDX-License-Identifier: GPL-2.0-only
  rl6231.c - RL6231 class device shared support
  Copyright 2014 Realtek Semiconductor Corp.
  Author: Oder Chiou <oder_chiou@realtek.com>
  rl6231_get_pre_div - Return the value of pre divider.
  @map: map for setting.
  @reg: register.
  @sft: shift.
  Return the value of pre divider from given register value.
  Return negative error code for unexpected register value.
  rl6231_calc_dmic_clk - Calculate the frequency divider parameter of dmic.
  @rate: base clock rate.
  Choose divider parameter that gives the highest possible DMIC frequency in
  1MHz - 3MHz range.
 find divider that gives DMIC frequency below 1.536MHz 
  rl6231_pll_calc - Calcualte PLL MNK code.
  @freq_in: external clock provided to codec.
  @freq_out: target clock which codec works on.
  @pll_code: Pointer to structure with M, N, K, m_bypass and k_bypass flag.
  Calcualte MNK code to configure PLL for codec.
  Returns 0 for success or negative error code.
 SPDX-License-Identifier: GPL-2.0-only
  wm8776.c  --  WM8776 ALSA SoC Audio driver
  Copyright 2009-12 Wolfson Microelectronics plc
  Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
  TODO: Input ALClimiter support
 codec private data 
 Finally, write out the values 
 Set word length 
 Only need to set MCLKLRCLK ratio if we're master 
 Disable the global powerdown; DAPM does the rest 
	 Latch the update bits; right channel only since we always
 CONFIG_SPI_MASTER 
 SPDX-License-Identifier: GPL-2.0-only
  wm8955.c  --  WM8955 ALSA SoC Audio driver
  Copyright 2009 Wolfson Microelectronics plc
  Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
 codec private data 
 R2  - LOUT1 volume 
 R3  - ROUT1 volume 
 R5  - DAC Control 
 R7  - Audio Interface 
 R8  - Sample Rate 
 R10 - Left DAC volume 
 R11 - Right DAC volume 
 R12 - Bass control 
 R13 - Treble control 
 R23 - Additional control (1) 
 R24 - Additional control (2) 
 R25 - Power Management (1) 
 R26 - Power Management (2) 
 R27 - Additional Control (3) 
 R34 - Left out Mix (1) 
 R35 - Left out Mix (2) 
 R36 - Right out Mix (1) 
 R37 - Right Out Mix (2) 
 R38 - Mono out Mix (1) 
 R39 - Mono out Mix (2) 
 R40 - LOUT2 volume 
 R41 - ROUT2 volume 
 R42 - MONOOUT volume 
 R43 - Clocking  PLL 
 R44 - PLL Control 1 
 R45 - PLL Control 2 
 R46 - PLL Control 3 
 R59 - PLL Control 4 
 The size in bits of the FLL divide multiplied by 10
	 The oscilator should run at should be 90-100MHz, and
	  there's a divide by 4 plus an optional divide by 2 in the
	  output path to generate the system clock.  The clock table
 Now, calculate N.K 
 Calculate fractional part - scale up so we can round. 
 Move down to proper range now rounding is done 
 Lookup table specifying SRATE (table 25 in datasheet); some of the
  output frequencies have been rounded to the standard frequencies
 If we're not running a sample rate currently just pick one 
 Can we generate an exact output? 
 We should never get here with an unsupported sample rate 
		 If we can't generate the right clock from MCLK then
		  we should configure the PLL to supply us with an
		  appropriate clock.
		 Use the last divider configuration we saw for the
 Now start the PLL running 
	 Always disable the clocks - if we're doing reconfiguration this
	  avoids misclocking.
	 If we're using deemphasis select the nearest available sample
	  rate.
 Not a stereo pair so they line up with the DAPM switches 
 The names are chosen to make the control names nice 
 OUT3 not currently implemented 
	 If the chip is clocked then disable the clocks and force a
	  reconfiguration, otherwise DAPM will power up the
 frame inversion not valid for DSP modes 
 VMID resistance 250k 
 Default bias current 
 Enable VREF and VMID 
 Let VMID ramp 
 High resistance VROI to maintain outputs 
 Maintain VMID with 2250k 
 Minimum bias current 
 Low resistance VROI to help discharge 
 Turn off VMID and VREF 
 Change some default settings - latch VU and enable ZC 
 Also enable adaptive bass boost by default 
 Set platform data values 
 Bias level configuration will have done an extra enable 
 SPDX-License-Identifier: GPL-2.0-only
  wm8983.c  --  WM8983 ALSA SoC Audio driver
  Copyright 2011 Wolfson Microelectronics plc
  Author: Dimitris Papastamos <dp@opensource.wolfsonmicro.com>
 R1  - Power management 1 
 R2  - Power management 2 
 R3  - Power management 3 
 R4  - Audio Interface 
 R5  - Companding control 
 R6  - Clock Gen control 
 R7  - Additional control 
 R8  - GPIO Control 
 R9  - Jack Detect Control 1 
 R10 - DAC Control 
 R11 - Left DAC digital Vol 
 R12 - Right DAC digital vol 
 R13 - Jack Detect Control 2 
 R14 - ADC Control 
 R15 - Left ADC Digital Vol 
 R16 - Right ADC Digital Vol 
 R18 - EQ1 - low shelf 
 R19 - EQ2 - peak 1 
 R20 - EQ3 - peak 2 
 R21 - EQ4 - peak 3 
 R22 - EQ5 - high shelf 
 R24 - DAC Limiter 1 
 R25 - DAC Limiter 2 
 R27 - Notch Filter 1 
 R28 - Notch Filter 2 
 R29 - Notch Filter 3 
 R30 - Notch Filter 4 
 R32 - ALC control 1 
 R33 - ALC control 2 
 R34 - ALC control 3 
 R35 - Noise Gate 
 R36 - PLL N 
 R37 - PLL K 1 
 R38 - PLL K 2 
 R39 - PLL K 3 
 R41 - 3D control 
 R42 - OUT4 to ADC 
 R43 - Beep control 
 R44 - Input ctrl 
 R45 - Left INP PGA gain ctrl 
 R46 - Right INP PGA gain ctrl 
 R47 - Left ADC BOOST ctrl 
 R48 - Right ADC BOOST ctrl 
 R49 - Output ctrl 
 R50 - Left mixer ctrl 
 R51 - Right mixer ctrl 
 R52 - LOUT1 (HP) volume ctrl 
 R53 - ROUT1 (HP) volume ctrl 
 R54 - LOUT2 (SPK) volume ctrl 
 R55 - ROUT2 (SPK) volume ctrl 
 R56 - OUT3 mixer ctrl 
 R57 - OUT4 (MONO) mix ctrl 
 R61 - BIAS CTRL 
 volgain update regs 
 disable the DACs and ADCs 
 set the desired eqmode 
 restore DACADC configuration 
 FIXME: We don't currently support DSP AB modes 
	
	  match to the nearest possible sample rate and rely
	  on the array index to configure the SR register
 select the appropriate bclk divider 
 disable the PLL 
 disable the PLL before re-programming it 
 set PLLN and PRESCALE 
 set PLLK 
 enable the PLL 
 VMID at 100k 
 enable anti-pop features 
 enable thermal shutdown 
 enable BIASEN 
 VMID at 100k 
 disable anti-pop features 
 VMID at 500k 
 disable thermal shutdown 
 disable VMIDSEL and BIASEN 
 wait for VMID to discharge 
 set the volgain update bits 
 mute all outputs and set PGAs to minimum gain 
 enable soft mute 
 enable BIASCUT 
 SPDX-License-Identifier: GPL-2.0-or-later
  Driver for the 1250-EV1 audio IO module
  Copyright 2011 Wolfson Microelectronics plc
 SPDX-License-Identifier: GPL-2.0
 rt700-sdw.c -- rt700 ALSA SoC audio driver
 Copyright(c) 2019 Realtek Semiconductor Corp.
 i2c read 
 HD-A read 
 BRA 
 i2c debug 
 decoded HD-A 
 index registers 
 for R channel 
 index registers 
 for R channel 
 Update the status 
	
	  Perform initialization only if slave status is present and
	  hw_init flag is false
 perform IO transfers required for Slave initialization 
 first we need to allocate memory for set bits in port lists 
 BITMAP: 00010100 
 BITMAP:  00001010 
 do this again for sink now 
 set the timeout values 
 wake-up event 
  slave_ops: callbacks for get_clock_stop_mode, clock_stop and
  port_prep are not defined for now
 Regmap Initialization 
	
	  prevent new interrupts from being handled after the
	  deferred work completes and before the parent disables
	  interrupts on the link
 log but don't prevent suspend from happening 
 SPDX-License-Identifier: GPL-2.0
  Clock Tree for the Texas Instruments TLV320AIC32x4
  Copyright 2019 Annaliese McDermond
  Author: Annaliese McDermond <nh6z@nh6z.net>
  struct clk_aic32x4_pll_muldiv - Multiplierdivider settings
  @p:		Divider
  @r:		first multiplier
  @j:		integer part of second multiplier
  @d:		decimal part of second multiplier
	Change to use regmap_bulk_read? 
	Change to use regmap_bulk_write for some if not all? 
	
	  We scale j by 10000 to account for the decimal part of P and divide
	  it back out later.
	
	  We scale this figure by 10000 so that we can get the decimal part
	  of the multiplier.	This is because we can't do floating point
	  math in the kernel.
	
	  J can't be over 64, so R can scale this.
	  R can't be greater than 4.
	
	  J can't be < 1.
 Figure out the integer part, J, and the fractional part, D. 
 10ms is the delay to wait before the clocks are stable 
	
	  These lines are here to preserve the current functionality of
	  the driver with regard to the DT.  These should eventually be set
	  by DT nodes so that the connections can be set up in configuration
	  rather than code.
 SPDX-License-Identifier: GPL-2.0-only
  Driver for ADAU1361ADAU1461ADAU1761ADAU1961 codec
  Copyright 2014 Analog Devices Inc.
   Author: Lars-Peter Clausen <lars@metafoo.de>
 SPDX-License-Identifier: GPL-2.0-only
  ALSA SoC TWL6040 codec driver
  Author:	 Misael Lopez Cruz <x0052729@ti.com>
 codec private data 
 set of rates for each pll: low-power and high-performance 
 DL1 path 
 Change chip defaults 
 No imput selected for microphone amplifiers 
	
	  We need to lower the default gain values, so the ramp code
	  can work correctly for the first playback.
	  This reduces the pop noise heard at the first playback.
 set headset dac and driver power mode 
	
	  Workaround for Headset DC offset caused pop noise:
	  Both HS DAC need to be turned on (before the HS driver) and off at
	  the same time.
 Earphone doesn't support low power mode 
 Sync status 
 audio interrupt handler 
 Do not allow changes while InputFF efect is running 
  MICATT volume control:
  from -6 to 0 dB in 6 dB steps
  MICGAIN volume control:
  from 6 to 30 dB in 6 dB steps
  AFMGAIN volume control:
  from -18 to 24 dB in 6 dB steps
  HSGAIN volume control:
  from -30 to 0 dB in 2 dB steps
  HFGAIN volume control:
  from -52 to 6 dB in 2 dB steps
  EPGAIN volume control:
  from -24 to 6 dB in 2 dB steps
 Left analog microphone selection 
 Right analog microphone selection 
 Headset DAC playback switches 
 Handsfree DAC playback switches 
 Vibra playback switches 
 Headset power mode 
 -1dB 
 HSDACL in LP mode 
 -8dB 
 HSDACL in HP mode 
 -1dB 
 0dB 
 For ES under ES_1.3 HS step is 2 mV 
 For ES_1.3 HS step is 1 mV 
 Capture gains 
 AFM gains 
 Playback gains 
 Left HS PDM data routed to Right HSDAC 
 Left HF PDM data routed to Right HFDAC 
 Inputs 
 Outputs 
 Analog input muxes for the capture amplifiers 
 Analog capture PGAs 
 Auxiliary FM PGAs 
 ADCs 
 Microphone bias 
 DACs 
 Virtual DAC for vibra path (DL4 channel) 
 Analog playback Muxes 
 Analog playback drivers 
 Analog playback PGAs 
 Stream -> DAC mapping 
 ADC -> Stream mapping 
 Capture path 
 AFM path 
 Earphone playback path 
 Vibrator paths 
 Select low power PLL in standby 
 Set external boost GPO 
 These rates are not supported when HPPLL is in use 
 Power down drivers and DACs 
 Power down drivers and DACs 
 SPDX-License-Identifier: GPL-2.0-or-later
  Audio Codec driver supporting:
   AD1835A, AD1836, AD1837A, AD1838A, AD1839A
  Copyright 2009-2011 Analog Devices Inc.
 codec private data 
  AD1836 volumemutede-emphasis etc. controls
 ADC high-pass filter 
 DAC de-emphasis 
  DAI ops entries
	 at present, we support adc aux mode to interface with
	  blackfin sport tdm mode
 ALCLK,ABCLK are both output, AD1836 can only be provider 
 bit size 
 reset clock control mode 
 restore clock control mode 
 default setting for ad1836 
 de-emphasis: 48kHz, power-on dac 
 unmute dac channels 
 high-pass filter enable, power-on adc 
 unmute adc channles, adc aux mode 
 volume 
 leftright diff:PGAMUX 
 power down chip 
 reset clock control mode 
  Cirrus Logic CS42448CS42888 Audio CODEC DAI I2C driver
  Copyright (C) 2014 Freescale Semiconductor, Inc.
  Author: Nicolin Chen <Guangyu.Chen@freescale.com>
  This file is licensed under the terms of the GNU General Public License
  version 2. This program is licensed "as is" without any warranty of any
  kind, whether express or implied.
 SPDX-License-Identifier: GPL-2.0
  ALSA SoC Texas Instruments TAS6424 Quad-Channel Audio Amplifier
  Copyright (C) 2016-2017 Texas Instruments Incorporated - https:www.ti.com
 	Author: Andreas Dannenberg <dannenberg@ti.com>
 	Andrew F. Davis <afd@ti.com>
 Define how often to check (and clear) the fault status register (in ms) 
 Digital power supply. Connect to 3.3-V supply. 
 Supply used for higher voltage analog circuits. 
 Class-D amp output FETs supply. 
  DAC digital volumes. From -103.5 to 24 dB in 0.5 dB steps. Note that
  setting the gain below -100 dB (register value <0x7) is effectively a MUTE
  as per device datasheet.
 Observe codec shutdown-to-active time 
 Turn on TAS6424 periodic fault checkinghandling 
 Disable TAS6424 periodic fault checkinghandling 
 clock masters 
 signal polarity 
 interface format 
		
		  We can use the fact that the TAS6424 does not care about the
		  LRCLK duty cycle during TDM to receive DSP_B formatted data
		  in LEFTJ mode (no delaying of the 1st data bit).
 nothing needed to disable TDM mode 
	
	  Determine the first slot and last slot that is being requested so
	  we'll be able to more easily enforce certain constraints as the
	  TAS6424's TDM interface is not fully configurable.
		
		  channels are muted via the mute pin.  Don't also mute
		  them via the registers so that subsequent register
		  access is not necessary to un-mute the channels
	 any time we come out of HIZ, the output channels automatically run DC
	  load diagnostics if autodiagnotics are enabled. wait here until this
	  completes.
	
	  Only flag errors once for a given occurrence. This is needed as
	  the TAS6424 will take time clearing the fault condition internally
	  during which we don't want to bombard the system with the same
	  error message over and over.
 Store current fault1 value so we can detect any changes next time 
	
	  Ignore any clock faults as there is no clean way to check for them.
	  We would need to start checking for those faults after the SAIF
	  stream has been setup, and stop checking before the stream is
	  stopped to avoid any false-positives. However there are no
	  appropriate hooks to monitor these events.
 Store current fault1 value so we can detect any changes next time 
 Store current fault2 value so we can detect any changes next time 
 Store current warn value so we can detect any changes next time 
 Clear any warnings by toggling the CLEAR_FAULT control bit 
 Schedule the next fault check at the specified interval 
	
	  Get control of the standby pin and set it LOW to take the codec
	  out of the stand-by mode.
	  Note: The actual pin polarity is taken care of in the GPIO lib
	  according the polarity specified in the DTS.
	
	  Get control of the mute pin and set it HIGH in order to start with
	  all the output muted.
	  Note: The actual pin polarity is taken care of in the GPIO lib
	  according the polarity specified in the DTS.
 Reset device to establish well-defined startup state 
 put the codec in stand-by 
 SPDX-License-Identifier: GPL-2.0-only
 rt1316-sdw.c -- rt1316 SDCA ALSA SoC amplifier audio driver
 Copyright(c) 2021 Realtek Semiconductor Corp.
 for IV sense 
 first we need to allocate memory for set bits in port lists 
 BITMAP: 00000100 
 BITMAP:  00000010 
 do this again for sink now 
 set the timeout values 
		
		  PM runtime is only enabled when a Slave reports as Attached
 set autosuspend parameters 
 update count of parent 'active' children 
 make sure the device does not suspend immediately 
 sw reset 
 initial settings - blind write 
 Mark Slave initialization complete 
 Update the status 
	
	  Perform initialization only if slave status is present and
	  hw_init flag is false
 perform IO transfers required for Slave initialization 
 I2S Data Channel Selection 
 XU24 Bypass Control 
 LeftRight IV tag 
 IV mixer Control 
 Audio Interface 
 Digital Interface 
 Output Lines 
 Use tx_mask or rx_mask to configure stream tag and set dma_data 
 SoundWire specific configuration 
 port 1 for playback 
  slave_ops: callbacks for get_clock_stop_mode, clock_stop and
  port_prep are not defined for now
	
	  Mark hw_init to false
	  HW init will be performed when device reports present
 Regmap Initialization 
 SPDX-License-Identifier: GPL-2.0-only
  rt5660.c  --  RT5660 ALSA SoC audio codec driver
  Copyright 2016 Realtek Semiconductor Corp.
  Author: Oder Chiou <oder_chiou@realtek.com>
 Speaker Output Volume 
 OUTPUT Control 
 DAC Digital Volume 
 IN1IN2IN3 Control 
 ADC Digital Volume Control 
 ADC Boost Volume Control 
  rt5660_set_dmic_clk - Set parameter of dmic.
  @w: DAPM widget.
  @kcontrol: The kcontrol of this widget.
  @event: Event id.
 Digital Mixer 
 Analog Input Mixer 
 Interface data select 
 MICBIAS 
 Input Side 
 Input Lines 
 Boost 
 REC Mixer 
 ADCs 
 ADC Mixer 
 ADC 
 Digital Interface 
 Audio Interface 
 Output Side 
 DAC mixer before sound effect  
 DAC Mixer 
 DACs 
 OUT Mixer 
 Output Volume 
 HPOLOUTMono Mixer 
 Output Lines 
 Check if MCLK provided 
 SPDX-License-Identifier: GPL-2.0
 Driver for the MAX9860 Mono Audio Voice Codec
 https:
 The driver does not support sidetone since the DVST register field is
 backwards with the mute near the maximum level instead of the minimum.
 Author: Peter Rosin <peda@axentia.s>
         Copyright 2016 Axentia Technologies
	
	  Check if Integer Clock Mode is possible, but avoid it in slave mode
	  since we then do not know if lrclk is derived from pclk and the
	  datasheet mentions that the frequencies have to match exactly in
	  order for this to work.
				
				  Integer Clock Mode not possible. Leave
				  sysclk at zero and fall through to the
				  code below for PLL mode.
	
	  Largest possible n:
	     65536  96  48kHz  10MHz -> 30199
	  Smallest possible n:
	     65536  96   8kHz  20MHz -> 2517
	  Both fit nicely in the available 15 bits, no need to apply any mask.
 PLL mode 
 trigger rapid pll lock mode 
	
	  mclk has to be in the 10MHz to 60MHz range.
	  psclk is used to scale mclk into pclk so that
	  pclk is in the 10MHz to 20MHz range.
 SPDX-License-Identifier: GPL-2.0
 cs35l36.c -- CS35L36 ALSA SoC audio driver
 Copyright 2018 Cirrus Logic, Inc.
 Author: James Schulman <james.schulman@cirrus.com>
  Some fields take zero as a valid value so use a high bit flag that won't
  get written to the device to mark those.
 1 uH 
 1.2 uH 
	
	  Rev B0 has 2 versions
	  L36 is 10V
	  L37 is 12V
	  If L36 we need to clamp some values for safety
	  after probe has setup dt values. We want to make
	  sure we dont miss any values set in probe
	
	  RevA and B require the disabling of
	  SYNC_GLOBAL_OVR when GLOBAL_EN = 0.
	  Just turn it off from default
 ack the irq by reading all status registers 
 Check to see if unmasked bits are active 
	
	  The following interrupts require a
	  protection release cycle to get the
	  speaker out of Safe-Mode.
 VPBR Config 
	
	  Magic code for internal PAC
 Errata Writes 
 PAC Config 
 returning NULL can be an option if in stereo mode 
 initialize amplifier 
 Set interrupt masks for critical errors 
 Reset interrupt masks for device removal 
 SPDX-License-Identifier: GPL-2.0
 cs35l41-tables.c -- CS35L41 ALSA SoC audio driver
 Copyright 2017-2021 Cirrus Logic, Inc.
 Author: David Rhodes <david.rhodes@cirrus.com>
test regs
 addr         shift   size 
TRIM_OSC_FREQ_TRIM
TRIM_OSC_TRIM_DONE
TST_DIGREG_VREF_TRIM
TST_REF_TRIM
TST_REF_TEMPCO_TRIM
PLL_LDOA_TST_VREF_TRIM
BST_ATEST_CM_VOFF
BST_ATRIM_IADC_OFFSET
BST_ATRIM_IADC_GAIN1
BST_ATRIM_IPKCOMP_OFFSET1
BST_ATRIM_IPKCOMP_GAIN1
BST_ATRIM_IADC_OFFSET2
BST_ATRIM_IADC_GAIN2
BST_ATRIM_IPKCOMP_OFFSET2
BST_ATRIM_IPKCOMP_GAIN2
BST_ATRIM_IADC_OFFSET3
BST_ATRIM_IADC_GAIN3
BST_ATRIM_IPKCOMP_OFFSET3
BST_ATRIM_IPKCOMP_GAIN3
BST_ATRIM_IADC_OFFSET4
BST_ATRIM_IADC_GAIN4
BST_ATRIM_IPKCOMP_OFFSET4
BST_ATRIM_IPKCOMP_GAIN4
VMON_GAIN_OTP_VAL
VMON_OFFSET_OTP_VAL
IMON_GAIN_OTP_VAL
IMON_OFFSET_OTP_VAL
VMON_CM_GAIN_OTP_VAL
VMON_CM_GAIN_SIGN_OTP_VAL
IMON_CAL_TEMPCO_OTP_VAL
IMON_CAL_TEMPCO_SIGN_OTP
IMON_CAL_TEMPCO2_OTP_VAL
IMON_CAL_TEMPCO2_DN_UPB_OTP_VAL
IMON_CAL_TEMPCO_TBASE_OTP_VAL
TEMP_GAIN_OTP_VAL
TEMP_OFFSET_OTP_VAL
VP_SARADC_OFFSET
VP_GAIN_INDEX
VBST_SARADC_OFFSET
VBST_GAIN_INDEX
ANA_SELINVREF
GAIN_ERR_COEFF_0
GAIN_ERR_COEFF_1
GAIN_ERR_COEFF_2
GAIN_ERR_COEFF_3
GAIN_ERR_COEFF_4
GAIN_ERR_COEFF_5
GAIN_ERR_COEFF_6
GAIN_ERR_COEFF_7
GAIN_ERR_COEFF_8
GAIN_ERR_COEFF_9
GAIN_ERR_COEFF_10
GAIN_ERR_COEFF_11
GAIN_ERR_COEFF_12
GAIN_ERR_COEFF_13
GAIN_ERR_COEFF_14
GAIN_ERR_COEFF_15
GAIN_ERR_COEFF_16
GAIN_ERR_COEFF_17
GAIN_ERR_COEFF_18
GAIN_ERR_COEFF_19
GAIN_ERR_COEFF_20
VOFF_GAIN_0
VOFF_GAIN_1
VOFF_GAIN_2
VOFF_GAIN_3
VOFF_GAIN_4
VOFF_GAIN_5
VOFF_GAIN_6
VOFF_GAIN_7
VOFF_GAIN_8
VOFF_GAIN_9
VOFF_GAIN_10
VOFF_GAIN_11
VOFF_GAIN_12
VOFF_GAIN_13
VOFF_GAIN_14
VOFF_GAIN_15
VOFF_GAIN_16
VOFF_GAIN_17
VOFF_GAIN_18
VOFF_GAIN_19
VOFF_GAIN_20
VOFF_INT1
DS_SPK_INT1_CAP_TRIM
DS_SPK_INT2_CAP_TRIM
DS_SPK_LPF_CAP_TRIM
DS_SPK_QUAN_CAP_TRIM
FORCE_CAL
CAL_OVERRIDE
MODIX
VIMON_DLY_NOT_COMB
VIMON_DLY
extra bit
X_COORDINATE
Y_COORDINATE
WAFER_ID
DVS
LOT_NUMBER
 addr         shift   size 
TRIM_OSC_FREQ_TRIM
TRIM_OSC_TRIM_DONE
TST_DIGREG_VREF_TRIM
TST_REF_TRIM
TST_REF_TEMPCO_TRIM
PLL_LDOA_TST_VREF_TRIM
BST_ATEST_CM_VOFF
BST_ATRIM_IADC_OFFSET
BST_ATRIM_IADC_GAIN1
BST_ATRIM_IPKCOMP_OFFSET1
BST_ATRIM_IPKCOMP_GAIN1
BST_ATRIM_IADC_OFFSET2
BST_ATRIM_IADC_GAIN2
BST_ATRIM_IPKCOMP_OFFSET2
BST_ATRIM_IPKCOMP_GAIN2
BST_ATRIM_IADC_OFFSET3
BST_ATRIM_IADC_GAIN3
BST_ATRIM_IPKCOMP_OFFSET3
BST_ATRIM_IPKCOMP_GAIN3
BST_ATRIM_IADC_OFFSET4
BST_ATRIM_IADC_GAIN4
BST_ATRIM_IPKCOMP_OFFSET4
BST_ATRIM_IPKCOMP_GAIN4
VMON_GAIN_OTP_VAL
VMON_OFFSET_OTP_VAL
IMON_GAIN_OTP_VAL
IMON_OFFSET_OTP_VAL
VMON_CM_GAIN_OTP_VAL
VMON_CM_GAIN_SIGN_OTP_VAL
IMON_CAL_TEMPCO_OTP_VAL
IMON_CAL_TEMPCO_SIGN_OTP
IMON_CAL_TEMPCO2_OTP_VAL
IMON_CAL_TEMPCO2_DN_UPB_OTP_VAL
IMON_CAL_TEMPCO_TBASE_OTP_VAL
TEMP_GAIN_OTP_VAL
TEMP_OFFSET_OTP_VAL
VP_SARADC_OFFSET
VP_GAIN_INDEX
VBST_SARADC_OFFSET
VBST_GAIN_INDEX
ANA_SELINVREF
GAIN_ERR_COEFF_0
GAIN_ERR_COEFF_1
GAIN_ERR_COEFF_2
GAIN_ERR_COEFF_3
GAIN_ERR_COEFF_4
GAIN_ERR_COEFF_5
GAIN_ERR_COEFF_6
GAIN_ERR_COEFF_7
GAIN_ERR_COEFF_8
GAIN_ERR_COEFF_9
GAIN_ERR_COEFF_10
GAIN_ERR_COEFF_11
GAIN_ERR_COEFF_12
GAIN_ERR_COEFF_13
GAIN_ERR_COEFF_14
GAIN_ERR_COEFF_15
GAIN_ERR_COEFF_16
GAIN_ERR_COEFF_17
GAIN_ERR_COEFF_18
GAIN_ERR_COEFF_19
GAIN_ERR_COEFF_20
VOFF_GAIN_0
VOFF_GAIN_1
VOFF_GAIN_2
VOFF_GAIN_3
VOFF_GAIN_4
VOFF_GAIN_5
VOFF_GAIN_6
VOFF_GAIN_7
VOFF_GAIN_8
VOFF_GAIN_9
VOFF_GAIN_10
VOFF_GAIN_11
VOFF_GAIN_12
VOFF_GAIN_13
VOFF_GAIN_14
VOFF_GAIN_15
VOFF_GAIN_16
VOFF_GAIN_17
VOFF_GAIN_18
VOFF_GAIN_19
VOFF_GAIN_20
VOFF_INT1
DS_SPK_INT1_CAP_TRIM
DS_SPK_INT2_CAP_TRIM
DS_SPK_LPF_CAP_TRIM
DS_SPK_QUAN_CAP_TRIM
FORCE_CAL
CAL_OVERRIDE
MODIX
VIMON_DLY_NOT_COMB
VIMON_DLY
VMON_POL
X_COORDINATE
Y_COORDINATE
WAFER_ID
DVS
LOT_NUMBER
 SPDX-License-Identifier: GPL-2.0-only
  wm8994.c  --  WM8994 ALSA SoC Audio driver
  Copyright 2009-12 Wolfson Microelectronics plc
  Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
 VU bitfields for ADC2, DAC2 not available on WM1811 
 Bring up the AIF clocks first 
	 Then switch CLK_SYS over to the higher of them; a change
	  can only happen as a result of a clocking change which can
	  only be made outside of DAPM so we can safely redo the
	  clocking.
 If they're equal it doesn't matter which is used 
 Check what we're currently using for CLK_SYS 
 Can't enable both ADC and DAC paths simultaneously 
 Save any enables; the configuration should clear them. 
 Icky as hell but saves code duplication 
	 Find the version of the currently selected configuration
	 The EQ will be disabled while reconfiguring it, remember the
	  current configuration.
 Icky as hell but saves code duplication 
 Controls not available on WM1811 
 We run all mode setting through a function to enforce audio mode 
 Always use audio mode to detect while the system is active 
 If we're using jack detection go into audio mode 
 Go into appropriate detection only mode 
		
		  JACKDET won't run until we start the clock and it
		  only reports deltas, make sure we notify the state
		  up the stack on startup.  Use a very generous
		  timeout for paranoia, there's no urgency and we
		  don't want false reports.
 Startup bias, VMID ramp & buffer 
 Main bias enable, VMID=2x40k 
 Startup bias, slow VMID ramp & buffer 
 Main bias enable, VMID=2x40k 
 Start discharging VMID 
 Active discharge 
 Switch off startup biases 
 GCC flow analysis can't track enable 
 We also need the same AIF source for LR and only one path 
 Set the source up 
 Don't enable timeslot 2 if not in use 
 We may also have postponed startup of DSP, handle that. 
 Debugging; dump chip status after DAPM transitions 
 Note that these two control shouldn't be simultaneously switched to AIF3 
 Power is done with the muxes since the ADC power also controls the
  downsampling chain, the chip will automatically manage the analogue
  specific portions.
 AIF1 outputs 
 Pin level routing for AIF3 
 DAC1 inputs 
 DAC2AIF2 outputs  
 AIF3 output 
 Loopback 
 Sidetone 
 Output stages 
 The size in bits of the FLL divide multiplied by 10
 Scale the input frequency down to <= 13.5MHz 
 Scale the output to give 90MHz<=Fvco<=100MHz 
 Now, calculate N.K 
 Calculate fractional part - scale up so we can round. 
 Move down to proper range now rounding is done 
 Allow no source specification when stopping 
 Are we changing anything? 
	 If we're stopping the FLL redo the old config - no
	  registers will actually be written but we avoid GCC flow
	  analysis bugs spewing warnings.
 Make sure that we're not providing SYSCLK right now 
 We always need to disable the FLL while reconfiguring 
 Disable MCLK if needed before we possibly change to new clock parent 
 Clear any pending completion from a previous failure 
 Enable (with fractional mode if required) 
 Enable VMID if we need it 
	
	  If SYSCLK will be less than 50kHz adjust AIFnCLK dividers
	  for detection.
 AIF3 shares clocking with AIF12 
 TODO: Set GPIO AF 
		 Special case - a division (times 10) is given and
		  no effect on main clocking.
	
	  If SYSCLK will be less than 50kHz adjust AIFnCLK dividers
	  for detection.
 MICBIAS into regulating mode 
 Optimise performance for rev A 
 Discharge LINEOUT1 & 2 
 MICBIAS into bypass mode on newer devices 
 Do the sync with the old mode to allow it to clean up 
 frame inversion not valid for DSP modes 
	 The AIF2 format configuration needs to be mirrored to AIF3
 Try to find an appropriate sample rate; look for an exact match. 
 AIFCLKfs ratio; look for a close match in either direction 
	 We may not get quite the right frequency if using
	  approximate clocks so look for the closest match that is
	  higher than the target (we need to ensure that there enough
	  BCLKs to clock out the samples).
 BCLK table is sorted 
 Disable the pulls on the AIF if we're using it to save power. 
	 We need an array of texts for the enum API but the number
	  of texts is likely to be less than the number of
	  configurations due to the sample rate dependency of the
 Expand the array... 
 ...store the new entry... 
 ...and remember the new version. 
 We need an array of texts for the enum API 
  wm8994_mic_detect - Enable microphone detection via the WM8994 IRQ
  @component:   WM8994 component
  @jack:    jack to report detection events on
  @micbias: microphone bias to detect on
  Enable microphone detection via IRQ on the WM8994.  If GPIOs are
  being used to bring out signals to the processor then only platform
  data configuration is needed for WM8994 and processor GPIOs should
  be configured using snd_soc_jack_add_gpios() instead.
  Configuration of detection levels is available via the micbias1_lvl
  and micbias2_lvl platform data members.
 Store the configuration 
 If either of the jacks is set up then enable detection 
 enable MICDET and MICSHRT deboune 
 Should be called with accdet_lock held 
 Either nothing present or just starting detection 
 If nothing present then clear our statuses 
	 If the measurement is showing a high impedence we've got a
	  microphone.
 If we have jackdet that will detect removal 
 Deferred mic detection to allow for extra settling time 
 If required for an external cap force MICBIAS on 
 Use a user-supplied callback if we have one 
		
		  Start off measument of microphone impedence to find out
		  what's actually there.
 Disable debounce while inserted 
 Enable debounce while removed 
 Turn off MICBIAS if it was on for an external cap 
	 Since we only report deltas force an update, ensures we
  wm8958_mic_detect - Enable microphone detection via the WM8958 IRQ
  @component:   WM8958 component
  @jack:    jack to report detection events on
  @det_cb: detection callback
  @det_cb_data: data for detection callback
  @id_cb: mic id callback
  @id_cb_data: data for mic id callback
  Enable microphone detection functionality for the WM8958.  By
  default simple detection which supports the detection of up to 6
  buttons plus video and microphone functionality is supported.
  The WM8958 has an advanced jack detection facility which is able to
  support complex accessory detection, especially when used in
  conjunction with external circuitry.  In order to provide maximum
  flexiblity a callback is provided which allows a completely custom
  detection algorithm.
 Detect microphones and short circuits by default 
		
		  If we can use jack detection start off with that,
		  otherwise jump straight to microphone detection.
 Disable debounce for the initial detect 
	
	  Jack detection may have detected a removal simulataneously
	  with an update of the MICDET status; if so it will have
	  stopped detection and we can ignore this interrupt.
	 We may occasionally read a detection without an impedence
	  range being provided - if that happens loop again.
 Avoid a transient report when the accessory is being removed 
 By default use idle_bias_off, will override for WM8994 
 Set revision-specific configuration 
 Single ended line outputs should have VMID on. 
 Make sure we can read from the GPIOs if they're inputs 
	 Remember if AIFnLRCLK is configured as a GPIO.  This should be
	  configured on init - if a system wants to do this dynamically
	  at runtime we can deal with that then.
 Latch volume update bits 
 Set the low bit of the 3D stereo depth so TLV matches 
	 Unconditionally enable AIF1 ADC TDM mode on chips which can
	  use this; it only affects behaviour on idle TDM clock
 Put MICBIAS into bypass mode by default on newer devices 
 Drop down to power saving mode when system is suspended 
 SPDX-License-Identifier: GPL-2.0-or-later
  max9850.c  --  codec driver for max9850
  Copyright (C) 2011 taskit GmbH
  Author: Christian Glindkamp <christian.glindkamp@taskit.de>
  Initial development of this code was funded by
  MICRONIC Computer Systeme GmbH, https:www.mcsberlin.de
 these registers are not used at the moment but provided for the sake of
 output mixer 
 outputs 
 inputs 
 supplies 
 lrclk_div = 2^22  rate  iclk with iclk = mclk  sf 
 calculate mclk -> iclk divider 
 set masterslave audio interface 
 interface format 
 clock inversion 
 set da 
 enable zero-detect 
 enable slew-rate control 
 set slew-rate 125ms 
 SPDX-License-Identifier: GPL-2.0-only
  This is a simple driver for the GTM601 Voice PCM interface
  Copyright (C) 2015 Goldelico GmbH
  Author: Marek Belisko <marek@goldelico.com>
  Based on wm8727.c driver
 SPDX-License-Identifier: GPL-2.0-only
 cs4234.c -- ALSA SoC CS4234 driver
 Copyright (C) 2020 Cirrus Logic, Inc. and
                    Cirrus Logic International Semiconductor Ltd.
 -89.92dB to +6.02dB with step of 0.38dB 
 are all the ADCs powerdown
 are all the DACs powerdown
 Playback 
 Capture 
 TDM mode in datasheet 
 Scale MCLK rate by 64 to avoid overflow in the ratnum calculation 
 Single Speed Mode 
 Double Speed Mode 
		
		  Playback only supports 24-bit samples in these modes.
		  Note: SNDRV_PCM_HW_PARAM_SAMPLE_BITS constrains the physical
		  width, which we don't care about, so constrain the format.
	
	  MCLKrate may be a valid ratio but out-of-spec (e.g. 2457600064000)
	  so this rule limits the range of sample rate for given MCLK.
 Either 4 or 5 consecutive bits, DAC5 is optional 
 Clear VQ Ramp Bit in cache for the next PowerUp 
 Make sure hardware reset done 2 ms + (3000MCLK) 
 SPDX-License-Identifier: GPL-2.0
 Copyright (c) 2021, Linaro Limited
	
	  Port map index starts with 0, however the data port for this codec
	  are from index 1
 SPDX-License-Identifier: GPL-2.0-only
  alc5623.c  --  alc562[123] ALSA Soc Audio driver
  Copyright 2008 Realtek Microelectronics
  Author: flove <flove@realtek.com> Ethan <eku@marvell.com>
  Copyright 2010 Arnaud Patard <arnaud.patard@rtp-net.org>
  Based on WM8753.c
 codec private data 
 to power-onoff class-d amp generatorsspeaker 
 need to write to 'index-46h' register :        
 so write index num (here 0x46) to reg 0x6a     
 and then 0xffff0 to reg 0x6c                  
  ALC5623 Controls
  DAPM Controls
 Left Record Mixer 
 Right Record Mixer 
 auxout output mux 
 speaker output mux 
 headphone left output mux 
 headphone right output mux 
 speaker output N select 
 Muxes 
 output mixers 
 input mixers 
 virtual mixer - mixes left & right channels 
 HP mixer 
 speaker mixer 
 mono mixer 
 Left record mixer 
Right record mixer 
 headphone left mux 
 headphone right mux 
 speaker out mux 
 MonoAux Out mux 
 output pga 
 input pga 
 left ADC 
 right ADC 
 PLL divisors 
 Note : pll code from original alc5623 driver. Not sure of how good it is 
 useful only for master mode 
 Disable PLL power 
 pll is not used in slave mode 
 PLL source from MCLK 
 PLL source from Bitclk 
 codec hifi mclk (after PLL) clock divider coefficients 
 values inspired from column BCLK=32Fs of Appendix A table 
  Clock after PLL and dividers
 set audio interface clocking 
 interface format 
 clock inversion 
 bit size 
 set iface & srate 
 avoid writing '1' into 5622 reserved bits 
 disable HP Depop2 
 everything off except vrefvmid, 
 everything off, dac mute, inactive 
 Sync reg_cache with the hardware 
 set up audio path interconnects 
  ALC5623 2 wire address is determined by A1 pin
  state during powerup.
     low  = 0x1a
     high = 0x1b
  i2c codec control layer 
 SPDX-License-Identifier: GPL-2.0-only
  es8316.c -- es8316 ALSA SoC audio driver
  Copyright Everest Semiconductor Co.,Ltd
  Authors: David Yang <yangxiaohua@everest-semi.com>,
           Daniel Drake <drake@endlessm.com>
 In slave mode at single speed, the codec is documented as accepting 5
  MCLKLRCK ratios, but we also add ratio 400, which is commonly used on
  Intel Cherry Trail platforms (19.2MHz MCLK, 48kHz LRCK).
  ES8316 controls
 Analog Input Mux 
 hp mixer mux 
 headphone Output Mixer 
 DAC data source mux 
 Input Mux 
 Digital Interface 
 Headphone Output Side 
	 pdn_Lical and pdn_Rical bits are documented as Reserved, but must
	  be explicitly unset in order to enable HP output
 Recording 
	 It's not clear why, but to avoid recording only silence,
	  the DAC clock must be running for the ADC to work.
 Playback 
	 Limit supported sample rates to ones that can be autodetected
	  by the codec running in slave mode.
 Clock inversion 
 Enable BCLK and MCLK inputs in slave mode 
 Validate supported sample rates that are autodetected from MCLK 
 Powered-down  reset 
 Catch spurious IRQ before set_jack is called 
 Jack removed, or spurious IRQ? 
 Jack inserted, determine type 
 Jack unplugged underneath us 
 Open, headset 
 Keep mic-gnd-short detection on for button press 
 Shorted, headphones 
 No longer need mic-gnd-short detection 
 Interrupt while jack inserted, report button state 
 Open, button release 
 Short, button press 
	
	  Init es8316->jd_inverted here and not in the probe, as we cannot
	  guarantee that the bytchr-es8316 driver, which might set this
	  property, will probe before us.
 Enable irq and sync initial jack state 
 Already disabled (or never enabled) 
 Reset codec and enable current state machine 
	
	  Documentation is unclear, but this value from the vendor driver is
	  needed otherwise audio output is silent.
	
	  Documentation for this register is unclear and incomplete,
	  but here is a vendor-provided value that improves volume
	  and quality for Intel CHT platforms.
 SPDX-License-Identifier: GPL-2.0-only
  es8328-i2c.c  --  ES8328 ALSA SoC I2C Audio driver
  Copyright 2014 Sutajio Ko-Usagi PTE LTD
  Author: Sean Cross <xobs@kosagi.com>
 SPDX-License-Identifier: GPL-2.0-only
  wm8770.c  --  WM8770 ALSA SoC Audio driver
  Copyright 2010 Wolfson Microelectronics plc
  Author: Dimitris Papastamos <dp@opensource.wolfsonmicro.com>
  We can't use the same notifier block for more than one supply and
  there's no way I can see to get from a callback to the caller
  except container_of().
 global DAC playback controls 
 global VOUT playback controls 
 VOUT1234 specific controls 
 DAC1234 specific controls 
 ADC specific controls 
 other controls 
 Only need to set MCLKLRCLK ratio if we're master 
 global powerup 
 global powerdown 
 latch the volume update bits 
 mute all DACs 
 This should really be moved into the regulator core 
 SPDX-License-Identifier: GPL-2.0-only
 rt5682.c  --  RT5682 ALSA SoC audio component driver
 Copyright 2018 Realtek Semiconductor Corp.
 Author: Bard Liao <bardliao@realtek.com>
 jack out 
 Sleep for 300 ms miniumum 
 DMIC pin
 share with LRCK2 
 share with DACDAT1 
 share with IRQ 
 share with BCLK2 
 Check if MCLK provided 
 Register CCF DAI clock control 
 Initial setup for CCF 
 SPDX-License-Identifier: GPL-2.0
 tscs454.c -- TSCS454 ALSA SoC Audio driver
 Copyright 2018 Tempo Semiconductor, Inc.
 Author: Steven Eckhoff <steven.eckhoff.opensource@gmail.com>
 Assign ASRC out of the box so DAI 1 just works 
 PLLs locked 
  PLL must be enabled after power up and must be disabled before power down
  for proper clock switching.
		
		  FV_PLL1CLKEN_DISABLE and FV_PLL2CLKEN_DISABLE are
		  identical zero vzalues, there is no need to test
		  the PLL index
 Wait for lock
 Do config in slave mode 
 R_PLLCTL PG 0 ADDR 0x15 
 R_ISRC PG 0 ADDR 0x16 
 R_SCLKCTL PG 0 ADDR 0x18 
 R_I2SIDCTL PG 0 ADDR 0x38 
 R_I2SODCTL PG 0 ADDR 0x39 
 R_AUDIOMUX1 PG 0 ADDR 0x3A 
 R_AUDIOMUX2 PG 0 ADDR 0x3B 
 R_AUDIOMUX3 PG 0 ADDR 0x3C 
 R_HSDCTL1 PG 1 ADDR 0x01 
 R_HSDCTL1 PG 1 ADDR 0x02 
 R_CH0AIC PG 1 ADDR 0x06 
 R_CH1AIC PG 1 ADDR 0x07 
 R_ICTL0 PG 1 ADDR 0x0A 
 R_ICTL1 PG 1 ADDR 0x0B 
 R_MICBIAS PG 1 ADDR 0x0C 
 R_PGACTL0 PG 1 ADDR 0x0D 
 R_PGACTL1 PG 1 ADDR 0x0E 
 R_PGACTL2 PG 1 ADDR 0x0F 
 R_PGACTL3 PG 1 ADDR 0x10 
 R_ICH0VOL PG1 ADDR 0x12 
 R_ICH1VOL PG1 ADDR 0x13 
 R_ICH2VOL PG1 ADDR 0x14 
 R_ICH3VOL PG1 ADDR 0x15 
 R_ASRCILVOL PG1 ADDR 0x16 
 R_ASRCIRVOL PG1 ADDR 0x17 
 R_ASRCOLVOL PG1 ADDR 0x18 
 R_ASRCORVOL PG1 ADDR 0x19 
 R_ALCCTL0 PG1 ADDR 0x1D 
 R_ALCCTL1 PG 1 ADDR 0x1E 
 R_ALCCTL2 PG 1 ADDR 0x1F 
 R_NGATE PG 1 ADDR 0x21 
 R_DMICCTL PG 1 ADDR 0x22 
 R_DACCTL PG 2 ADDR 0x01 
 R_SPKCTL PG 2 ADDR 0x02 
 R_SUBCTL PG 2 ADDR 0x03 
 R_MVOLL PG 2 ADDR 0x08 
 R_MVOLR PG 2 ADDR 0x09 
 R_HPVOLL PG 2 ADDR 0x0A 
 R_HPVOLR PG 2 ADDR 0x0B 
 R_SPKVOLL PG 2 ADDR 0x0C 
 R_SPKVOLR PG 2 ADDR 0x0D 
 R_SPKEQFILT PG 3 ADDR 0x01 
 R_SPKMBCCTL PG 3 ADDR 0x0B 
 R_SPKMBCMUG1 PG 3 ADDR 0x0C 
 R_SPKMBCTHR1 PG 3 ADDR 0x0D 
 R_SPKMBCRAT1 PG 3 ADDR 0x0E 
 R_SPKMBCMUG2 PG 3 ADDR 0x13 
 R_SPKMBCRAT2 PG 3 ADDR 0x15 
 R_SPKMBCMUG3 PG 3 ADDR 0x1A 
 R_SPKMBCRAT3 PG 3 ADDR 0x1C 
 R_SPKCLECTL PG 3 ADDR 0x21 
 R_SPKCLEMUG PG 3 ADDR 0x22 
 R_SPKCOMPRAT PG 3 ADDR 0x24 
 R_SPKEXPTHR PG 3 ADDR 0x2F 
 R_DACEQFILT PG 4 ADDR 0x01 
 R_DACMBCCTL PG 4 ADDR 0x0B 
 R_DACMBCMUG1 PG 4 ADDR 0x0C 
 R_DACMBCRAT1 PG 4 ADDR 0x0E 
 R_DACMBCMUG2 PG 4 ADDR 0x13 
 R_DACMBCRAT2 PG 4 ADDR 0x15 
 R_DACMBCMUG3 PG 4 ADDR 0x1A 
 R_DACMBCRAT3 PG 4 ADDR 0x1C 
 R_DACCLECTL PG 4 ADDR 0x21 
 R_DACCOMPRAT PG 4 ADDR 0x24 
 R_DACEXPRAT PG 4 ADDR 0x30 
 R_SUBEQFILT PG 5 ADDR 0x01 
 R_SUBMBCCTL PG 5 ADDR 0x0B 
 R_SUBMBCMUG1 PG 5 ADDR 0x0C 
 R_SUBMBCRAT1 PG 5 ADDR 0x0E 
 R_SUBMBCMUG2 PG 5 ADDR 0x13 
 R_SUBMBCRAT2 PG 5 ADDR 0x15 
 R_SUBMBCMUG3 PG 5 ADDR 0x1A 
 R_SUBMBCRAT3 PG 5 ADDR 0x1C 
 R_SUBCLECTL PG 5 ADDR 0x21 
 R_SUBCOMPRAT PG 5 ADDR 0x24 
 R_SUBEXPRAT PG 5 ADDR 0x30 
 CH 0_1 Input Mux 
 CH 2_3 Input Mux 
 CH 4_5 Input Mux 
 R_PLLCTL PG 0 ADDR 0x15 
 R_ISRC PG 0 ADDR 0x16 
 R_SCLKCTL PG 0 ADDR 0x18 
 R_ASRC PG 0 ADDR 0x28 
 R_I2SIDCTL PG 0 ADDR 0x38 
 R_I2SODCTL PG 0 ADDR 0x39 
 R_AUDIOMUX1 PG 0 ADDR 0x3A 
 R_AUDIOMUX2 PG 0 ADDR 0x3B 
 R_HSDCTL1 PG 1 ADDR 0x01 
 R_HSDCTL1 PG 1 ADDR 0x02 
 R_CH0AIC PG 1 ADDR 0x06 
 R_CH1AIC PG 1 ADDR 0x07 
 R_CH2AIC PG 1 ADDR 0x08 
 R_CH3AIC PG 1 ADDR 0x09 
 R_ICTL0 PG 1 ADDR 0x0A 
 R_ICTL1 PG 1 ADDR 0x0B 
 R_MICBIAS PG 1 ADDR 0x0C 
 R_PGACTL0 PG 1 ADDR 0x0D 
 R_PGACTL1 PG 1 ADDR 0x0E 
 R_PGACTL2 PG 1 ADDR 0x0F 
 R_PGACTL3 PG 1 ADDR 0x10 
 R_ICH0VOL PG 1 ADDR 0x12 
 R_ICH1VOL PG 1 ADDR 0x13 
 R_ICH2VOL PG 1 ADDR 0x14 
 R_ICH3VOL PG 1 ADDR 0x15 
 R_ASRCILVOL PG 1 ADDR 0x16 
 R_ASRCIRVOL PG 1 ADDR 0x17 
 R_ASRCOLVOL PG 1 ADDR 0x18 
 R_ASRCORVOL PG 1 ADDR 0x19 
 R_IVOLCTLU PG 1 ADDR 0x1C 
 R_ALCCTL0 PG 1 ADDR 0x1D 
 R_ALCCTL1 PG 1 ADDR 0x1E 
 R_ALCCTL2 PG 1 ADDR 0x1F 
 R_ALCCTL3 PG 1 ADDR 0x20 
 R_NGATE PG 1 ADDR 0x21 
 R_DMICCTL PG 1 ADDR 0x22 
 R_DACCTL PG 2 ADDR 0x01 
 R_SPKCTL PG 2 ADDR 0x02 
 R_SUBCTL PG 2 ADDR 0x03 
 R_DCCTL PG 2 ADDR 0x04 
 R_OVOLCTLU PG 2 ADDR 0x06 
 R_MVOLL PG 2 ADDR 0x08 
 R_MVOLR PG 2 ADDR 0x09 
 R_HPVOLL PG 2 ADDR 0x0A 
 R_HPVOLR PG 2 ADDR 0x0B 
 R_SPKVOLL PG 2 ADDR 0x0C 
 R_SPKVOLR PG 2 ADDR 0x0D 
 R_SUBVOL PG 2 ADDR 0x10 
 R_SPKEQFILT PG 3 ADDR 0x01 
 R_SPKMBCEN PG 3 ADDR 0x0A 
 R_SPKMBCCTL PG 3 ADDR 0x0B 
 R_SPKMBCMUG1 PG 3 ADDR 0x0C 
 R_SPKMBCTHR1 PG 3 ADDR 0x0D 
 R_SPKMBCRAT1 PG 3 ADDR 0x0E 
 R_SPKMBCATK1L PG 3 ADDR 0x0F 
 R_SPKMBCATK1H PG 3 ADDR 0x10 
 R_SPKMBCREL1L PG 3 ADDR 0x11 
 R_SPKMBCREL1H PG 3 ADDR 0x12 
 R_SPKMBCMUG2 PG 3 ADDR 0x13 
 R_SPKMBCTHR2 PG 3 ADDR 0x14 
 R_SPKMBCRAT2 PG 3 ADDR 0x15 
 R_SPKMBCATK2L PG 3 ADDR 0x16 
 R_SPKMBCATK2H PG 3 ADDR 0x17 
 R_SPKMBCREL2L PG 3 ADDR 0x18 
 R_SPKMBCREL2H PG 3 ADDR 0x19 
 R_SPKMBCMUG3 PG 3 ADDR 0x1A 
 R_SPKMBCTHR3 PG 3 ADDR 0x1B 
 R_SPKMBCRAT3 PG 3 ADDR 0x1C 
 R_SPKMBCATK3L PG 3 ADDR 0x1D 
 R_SPKMBCATK3H PG 3 ADDR 0x1E 
 R_SPKMBCREL3L PG 3 ADDR 0x1F 
 R_SPKMBCREL3H PG 3 ADDR 0x20 
 R_SPKCLECTL PG 3 ADDR 0x21 
 R_SPKCLEMUG PG 3 ADDR 0x22 
 R_SPKCOMPTHR PG 3 ADDR 0x23 
 R_SPKCOMPRAT PG 3 ADDR 0x24 
 R_SPKCOMPATKL PG 3 ADDR 0x25 
 R_SPKCOMPATKH PG 3 ADDR 0x26 
 R_SPKCOMPRELL PG 3 ADDR 0x27 
 R_SPKCOMPRELH PG 3 ADDR 0x28 
 R_SPKLIMTHR PG 3 ADDR 0x29 
 R_SPKLIMTGT PG 3 ADDR 0x2A 
 R_SPKLIMATKL PG 3 ADDR 0x2B 
 R_SPKLIMATKH PG 3 ADDR 0x2C 
 R_SPKLIMRELL PG 3 ADDR 0x2D 
 R_SPKLIMRELR PG 3 ADDR 0x2E 
 R_SPKEXPTHR PG 3 ADDR 0x2F 
 R_SPKEXPRAT PG 3 ADDR 0x30 
 R_SPKEXPATKL PG 3 ADDR 0x31 
 R_SPKEXPATKR PG 3 ADDR 0x32 
 R_SPKEXPRELL PG 3 ADDR 0x33 
 R_SPKEXPRELR PG 3 ADDR 0x34 
 R_SPKFXCTL PG 3 ADDR 0x35 
 R_DACEQFILT PG 4 ADDR 0x01 
 R_DACMBCEN PG 4 ADDR 0x0A 
 R_DACMBCCTL PG 4 ADDR 0x0B 
 R_DACMBCMUG1 PG 4 ADDR 0x0C 
 R_DACMBCTHR1 PG 4 ADDR 0x0D 
 R_DACMBCRAT1 PG 4 ADDR 0x0E 
 R_DACMBCATK1L PG 4 ADDR 0x0F 
 R_DACMBCATK1H PG 4 ADDR 0x10 
 R_DACMBCREL1L PG 4 ADDR 0x11 
 R_DACMBCREL1H PG 4 ADDR 0x12 
 R_DACMBCMUG2 PG 4 ADDR 0x13 
 R_DACMBCTHR2 PG 4 ADDR 0x14 
 R_DACMBCRAT2 PG 4 ADDR 0x15 
 R_DACMBCATK2L PG 4 ADDR 0x16 
 R_DACMBCATK2H PG 4 ADDR 0x17 
 R_DACMBCREL2L PG 4 ADDR 0x18 
 R_DACMBCREL2H PG 4 ADDR 0x19 
 R_DACMBCMUG3 PG 4 ADDR 0x1A 
 R_DACMBCTHR3 PG 4 ADDR 0x1B 
 R_DACMBCRAT3 PG 4 ADDR 0x1C 
 R_DACMBCATK3L PG 4 ADDR 0x1D 
 R_DACMBCATK3H PG 4 ADDR 0x1E 
 R_DACMBCREL3L PG 4 ADDR 0x1F 
 R_DACMBCREL3H PG 4 ADDR 0x20 
 R_DACCLECTL PG 4 ADDR 0x21 
 R_DACCLEMUG PG 4 ADDR 0x22 
 R_DACCOMPTHR PG 4 ADDR 0x23 
 R_DACCOMPRAT PG 4 ADDR 0x24 
 R_DACCOMPATKL PG 4 ADDR 0x25 
 R_DACCOMPATKH PG 4 ADDR 0x26 
 R_DACCOMPRELL PG 4 ADDR 0x27 
 R_DACCOMPRELH PG 4 ADDR 0x28 
 R_DACLIMTHR PG 4 ADDR 0x29 
 R_DACLIMTGT PG 4 ADDR 0x2A 
 R_DACLIMATKL PG 4 ADDR 0x2B 
 R_DACLIMATKH PG 4 ADDR 0x2C 
 R_DACLIMRELL PG 4 ADDR 0x2D 
 R_DACLIMRELR PG 4 ADDR 0x2E 
 R_DACEXPTHR PG 4 ADDR 0x2F 
 R_DACEXPRAT PG 4 ADDR 0x30 
 R_DACEXPATKL PG 4 ADDR 0x31 
 R_DACEXPATKR PG 4 ADDR 0x32 
 R_DACEXPRELL PG 4 ADDR 0x33 
 R_DACEXPRELR PG 4 ADDR 0x34 
 R_DACFXCTL PG 4 ADDR 0x35 
 R_SUBEQFILT PG 5 ADDR 0x01 
 R_SUBMBCEN PG 5 ADDR 0x0A 
 R_SUBMBCCTL PG 5 ADDR 0x0B 
 R_SUBMBCMUG1 PG 5 ADDR 0x0C 
 R_SUBMBCTHR1 PG 5 ADDR 0x0D 
 R_SUBMBCRAT1 PG 5 ADDR 0x0E 
 R_SUBMBCATK1L PG 5 ADDR 0x0F 
 R_SUBMBCATK1H PG 5 ADDR 0x10 
 R_SUBMBCREL1L PG 5 ADDR 0x11 
 R_SUBMBCREL1H PG 5 ADDR 0x12 
 R_SUBMBCMUG2 PG 5 ADDR 0x13 
 R_SUBMBCTHR2 PG 5 ADDR 0x14 
 R_SUBMBCRAT2 PG 5 ADDR 0x15 
 R_SUBMBCATK2L PG 5 ADDR 0x16 
 R_SUBMBCATK2H PG 5 ADDR 0x17 
 R_SUBMBCREL2L PG 5 ADDR 0x18 
 R_SUBMBCREL2H PG 5 ADDR 0x19 
 R_SUBMBCMUG3 PG 5 ADDR 0x1A 
 R_SUBMBCTHR3 PG 5 ADDR 0x1B 
 R_SUBMBCRAT3 PG 5 ADDR 0x1C 
 R_SUBMBCATK3L PG 5 ADDR 0x1D 
 R_SUBMBCATK3H PG 5 ADDR 0x1E 
 R_SUBMBCREL3L PG 5 ADDR 0x1F 
 R_SUBMBCREL3H PG 5 ADDR 0x20 
 R_SUBCLECTL PG 5 ADDR 0x21 
 R_SUBCLEMUG PG 5 ADDR 0x22 
 R_SUBCOMPTHR PG 5 ADDR 0x23 
 R_SUBCOMPRAT PG 5 ADDR 0x24 
 R_SUBCOMPATKL PG 5 ADDR 0x25 
 R_SUBCOMPATKH PG 5 ADDR 0x26 
 R_SUBCOMPRELL PG 5 ADDR 0x27 
 R_SUBCOMPRELH PG 5 ADDR 0x28 
 R_SUBLIMTHR PG 5 ADDR 0x29 
 R_SUBLIMTGT PG 5 ADDR 0x2A 
 R_SUBLIMATKL PG 5 ADDR 0x2B 
 R_SUBLIMATKH PG 5 ADDR 0x2C 
 R_SUBLIMRELL PG 5 ADDR 0x2D 
 R_SUBLIMRELR PG 5 ADDR 0x2E 
 R_SUBEXPTHR PG 5 ADDR 0x2F 
 R_SUBEXPRAT PG 5 ADDR 0x30 
 R_SUBEXPATKL PG 5 ADDR 0x31 
 R_SUBEXPATKR PG 5 ADDR 0x32 
 R_SUBEXPRELL PG 5 ADDR 0x33 
 R_SUBEXPRELR PG 5 ADDR 0x34 
 R_SUBFXCTL PG 5 ADDR 0x35 
 R_PLLCTL PG 0 ADDR 0x15 
 R_I2SPINC0 PG 0 ADDR 0x22 
 R_PWRM0 PG 0 ADDR 0x33 
 R_PWRM1 PG 0 ADDR 0x34 
 R_PWRM2 PG 0 ADDR 0x35 
 R_PWRM3 PG 0 ADDR 0x36 
 R_PWRM4 PG 0 ADDR 0x37 
 R_AUDIOMUX1  PG 0 ADDR 0x3A 
 R_AUDIOMUX2 PG 0 ADDR 0x3B 
 R_AUDIOMUX3 PG 0 ADDR 0x3C 
 R_HSDCTL1 PG 1 ADDR 0x01 
 R_CH0AIC PG 1 ADDR 0x06 
 R_CH1AIC PG 1 ADDR 0x07 
 Virtual 
 PLLs 
 Inputs 
 Outputs 
 Ch Muxing 
 InOut Muxing 
	
	  Playback Paths 
 DAC Path 
 Line Out 
 ClassD Path 
 Sub Path 
	
	  Capture Paths 
 This is used when BCLK is sourcing the PLLs 
 First active aif 
 Sync pg sel reg with cache 
 SPDX-License-Identifier: GPL-2.0-or-later
  PCM179X ASoC I2C driver
  Copyright (c) Teenage Engineering AB 2016
      Jacob Siverskog <jacob@teenage.engineering>
 SPDX-License-Identifier: (GPL-2.0 OR MIT)
 Copyright (c) 2018 BayLibre, SAS.
 Author: Jerome Brunet <jbrunet@baylibre.com>
 put the device in reset 
 set the mode 
 take the device out of reset - datasheet does not specify a delay 
	
	  We can't really set clock ratio, if the mclklrclk is different
	  from what we provide, then error out
 should not happen 
 Single speed mode 
 Double speed mode 
 Quad speed mode 
	
	  The format is given by a pull resistor on the SDOUT pin:
	  pull-up for i2s, pull-down for left justified.
 SPDX-License-Identifier: GPL-2.0-only
  wm8998.c -- ALSA SoC Audio driver for WM8998 codecs
  Copyright 2015 Cirrus Logic, Inc.
  Author: Richard Fitzgerald <rf@opensource.wolfsonmicro.com>
 IN1L, IN1R, IN2 
 This may return -EPROBE_DEFER, so do this early on 
 Latch volume update bits 
 SPDX-License-Identifier: GPL-2.0-only
  soundsoccodecssi476x.c -- Codec driver for SI476X chips
  Copyright (C) 2012 Innovative Converged Devices(ICD)
  Copyright (C) 2013 Andrey Smirnov
  Author: Andrey Smirnov <andrew.smirnov@gmail.com>
 SPDX-License-Identifier: GPL-2.0-only
  ADAU1977ADAU1978ADAU1979 driver
  Copyright 2014 Analog Devices Inc.
   Author: Lars-Peter Clausen <lars@metafoo.de>
	
	  The reset bit is obviously volatile, but we need to be able to cache
	  the other bits in the register, so we can't just mark the whole
	  register as volatile. Since this is the only place where we'll ever
	  touch the reset bit just bypass the cache for this operation.
  Returns the appropriate setting for ths FS field in the CTRL0 register
  depending on the rate.
	
	  rate = sysclk  (512  mcs_lut[mcs])  2fs
	  => mcs_lut[mcs] = sysclk  (512  rate)  2fs
	  => mcs_lut[mcs] = sysclk  ((512  2fs)  rate)
 The factors configured by MCS are 1, 2, 3, 4, 6 
 In TDM mode there is a fixed slot width 
	
	  The PLL register is not affected by the software reset. It is
	  possible that the value of the register was changed to the
	  default value while we were in cache only mode. In this case
	  regcache_sync will skip over it and we have to manually sync
	  it.
 0 = No fixed slot width 
 We can only generate 16 bit or 32 bit wide slots 
 In clock provider mode the maximum bitclock is 24.576 MHz 
 All rates >= 32000 
 SPDX-License-Identifier: GPL-2.0-only
  cs4265.c -- CS4265 ALSA SoC audio driver
  Copyright 2014 Cirrus Logic, Inc.
  Author: Paul Handrigan <paul.handrigan@cirrus.com>
 Loopback 
 values 1, 2, or 4 
32k
44.1k
48k
64k
 88.2k 
 96k 
 128k 
 176.4k 
 192k 
 interface format 
 SPDX-License-Identifier: GPL-2.0-only
  SSM4567 amplifier audio driver
  Copyright 2014 Google Chromium project.
   Author: Anatol Pomozov <anatol@chromium.org>
  Based on code copyrightby:
    Copyright 2013 Analog Devices Inc.
 POWER_CTRL 
 DAC_CTRL 
 SAI_CTRL_1 
 SAI_CTRL_2 
	 The datasheet states that soft reset register is read-only,
 SPDX-License-Identifier: GPL-2.0-only
  wm2000.c  --  WM2000 ALSA Soc Audio driver
  Copyright 2008-2011 Wolfson Microelectronics PLC.
  Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
  The download image for the WM2000 will be requested as
  'wm2000_anc.bin' by default (overridable via platform data) at
  runtime and is expected to be in flat binary format.  This is
  generated by Wolfson configuration tools and includes
  system-specific calibration information.  If supplied as a
  sequence of ASCII-encoded hexidecimal bytes this can be converted
  into a flat binary with a command such as this on the command line:
  perl -e 'while (<>) { s[\r\n]+ ; printf("%c", hex($_)); }'
                  < file  > wm2000_anc.bin
 Wait for ANC engine to become ready 
	 Open code download of the data since it is the only bulk
 Maintain clock while active 
 Externally visible pins 
 Target, Path, Source 
 This will trigger a transition to standby mode by default 
 Verify that this is a WM2000 
 Pre-cook the concatenation of the register address onto the image 
 SPDX-License-Identifier: GPL-2.0
 Copyright (c) 2015-2016, The Linux Foundation. All rights reserved.
 Copyright (c) 2017-2018, Linaro Limited
 Fractional Rates 
 slave port water mark level
    (0: 6bytes, 1: 9bytes, 2: 12 bytes, 3: 15 bytes)
 vout step value 
 HPH_L 
 HPH_R 
 LO1_DIFF 
 LO2_DIFF 
 LO3_SE 
 LO4_SE 
 SWR SPK CH1 
 SWR SPK CH2 
TX
 16 
 17 
 48K 
 96K 
 192K 
 8K 
 16K 
 24K 
 32K 
 48K 
 96K 
 192K 
 384K 
 44.1K 
 RbuckflyR_EAR(32) 
 Cutoff frequency for high pass filter 
 only add to the list if value not set 
 AMIC: 0, DMIC: 1 
 Set Look Ahead Delay 
 Set DEM INP Select 
		
		  Loop through all interpolator MUX inputs and find out
		  to which interpolator input, the slim rx port
		  is connected
 rate is in Hz 
 set mixing path rate 
 set primary path sample rate 
 Configure slave interface device 
 write to interface device 
 configure the slave port for water mark and enable
 ports 8,9 
 configure the slave port for water mark and enable
 Find the SB TX MUX input - which decimator is connected 
 Check if the TX Mux input is RX MIX TXn 
 Any specific register configuration for compander 
 Set Gain Source Select based on compander enabledisable 
 -84dB min - 40dB max 
 Gain Controls 
 EAR PA 
 HPHL 
 HPHR 
 LINEOUT1 
 LINEOUT2 
 LINEOUT3 
 LINEOUT4 
 SLIMBUS Connections 
 ADC Mux 
 ADC Connections 
		
		  MIC BIAS can also be requested by MBHC,
		  so use ref count to handle micbias pullup
		  and enable requests
 wait for cnp time 
 Check whether adc mux input is AMIC or DMIC 
 Enable TX PGA Mute 
 Enable APC 
 Default value to return in case of error 
 EAR does not have compander 
 Enable Compander Clock 
 Reset comander 
 Enables DRE in this path 
 Reset if needed 
	
	  Set HPH_L & HPH_R gain source selection to REGISTER
	  for better click and pop only if corresponding PAs are
	  not enabled. Also cache the values of the HPHLR
	  PA gains to be applied after PAs are enabled
 Read DEM INP Select 
 1000us required as per HW requirement 
 GAIN Source Selection 
 Read DEM INP Select 
 1000us required as per HW requirement 
		
		  7ms sleep is required after PA is enabled as per
		  HW requirement
 Remove mix path mute if it is enabled 
		 5ms sleep is required after PA is disabled as per
		  HW requirement
		 5ms sleep is required after PA is enabled as per
		  HW requirement
 Remove mix path mute if it is enabled 
		 5ms sleep is required after PA is disabled as per
		  HW requirement
		
		  7ms sleep is required after PA is enabled as per
		  HW requirement
 Remove mix path mute if it is enabled 
		 5ms sleep is required after PA is disabled as per
		  HW requirement
		 5ms sleep is required after PA is enabled as per
		  HW requirement
 Remove mix path mute if it is enabled 
		 5ms sleep is required after PA is disabled as per
		  HW requirement
			
			  Ignore interrupts for ports for which the
			  interrupts are not specifically enabled.
 enable interrupts on all slave ports 
 disable interrupts on all slave ports 
		
		  1ms delay is required after pre-charge is enabled
		  as per HW requirement
 Enable mclk requires master bias to be enabled first 
		
		  10us sleep is required after clock is enabled
		  as per HW requirement
 MCLK to RCO switch 
 get BG 
 get MCLK 
 put MCLK 
 put BG 
 compute the vout_d step value 
 1 msec sleep required after SIDO Vout_D voltage change 
 enable mclk before setting SIDO voltage 
 TODO SPK1 & SPK2 OUT
 TX 
 Digital Mic Inputs 
 100us sleep needed after IREF settings 
 100us sleep needed after VREF settings 
	
	  5ms sleep required after enabling efuse control
	  before checking the status.
 ungate MCLK and set clk rate 
 Class-H Init
 Default HPH Mode to Class-H HiFi 
 INTR_REG 0 
	
	  For WCD9335, it takes about 600us for the Vout_A and
	  Vout_D to be ready after BUCK_SIDO is powered up.
	  SYS_RST_N shouldn't be pulled high during this time
	  Toggle the reset line to make sure the reset pulse is
	  correctly applied
	
	  INTR1 consists of all possible interrupt sources Ear OCP,
	  HPH OCP, MBHC, MAD, VBAT, and SVA
	  INTR2 is a subset of first interrupt sources MAD, VBAT, and SVA
 SPDX-License-Identifier: GPL-2.0-or-later
  Load Analog Devices SigmaStudio firmware files
  Copyright 2009-2011 Analog Devices Inc.
  devm_sigmadsp_init_regmap() - Initialize SigmaDSP instance
  @dev: The parent device
  @regmap: Regmap instance to use
  @ops: The sigmadsp_ops to use for this instance
  @firmware_name: Name of the firmware file to load
  Allocates a SigmaDSP instance and loads the specified firmware file.
  Returns a pointer to a struct sigmadsp on success, or a PTR_ERR() on error.
 SPDX-License-Identifier: GPL-2.0-or-later
  Driver for ADAU1381ADAU1781 codec
  Copyright 2011-2013 Analog Devices Inc.
  Author: Lars-Peter Clausen <lars@metafoo.de>
	 After any power changes have been made the dejitter circuit
 Precharge 
 SPDX-License-Identifier: GPL-2.0-only
 Copyright (c) 2018-2020, The Linux Foundation. All rights reserved.
 VA macro registers 
 VA macro 
 VA core 
 Enable TX PGA Mute 
 Enable TX CLK 
			
			  Minimum 1 clk cycle delay is required as per HW spec
		
		  6ms delay is required as per HW spec
 apply gain after decimator is enabled 
 Disable TX CLK 
 Any other DIV factor is invalid 
 mclk rate 
 SPDX-License-Identifier: GPL-2.0-only
  wm9081.c  --  WM9081 ALSA SoC Audio driver
  Author: Mark Brown
  Copyright 2009-12 Wolfson Microelectronics plc
 R2  - Analogue Lineout 
 R3  - Analogue Speaker PGA 
 R4  - VMID Control 
 R5  - Bias Control 1 
 R7  - Analogue Mixer 
 R8  - Anti Pop Control 
 R9  - Analogue Speaker 1 
 R10 - Analogue Speaker 2 
 R11 - Power Management 
 R12 - Clock Control 1 
 R13 - Clock Control 2 
 R14 - Clock Control 3 
 R16 - FLL Control 1 
 R17 - FLL Control 2 
 R18 - FLL Control 3 
 R19 - FLL Control 4 
 R20 - FLL Control 5 
 R22 - Audio Interface 1 
 R23 - Audio Interface 2 
 R24 - Audio Interface 3 
 R25 - Audio Interface 4 
 R27 - Interrupt Status Mask 
 R28 - Interrupt Polarity 
 R29 - Interrupt Control 
 R30 - DAC Digital 1 
 R31 - DAC Digital 2 
 R32 - DRC 1 
 R33 - DRC 2 
 R34 - DRC 3 
 R35 - DRC 4 
 R38 - Write Sequencer 1 
 R39 - Write Sequencer 2 
 R40 - MW Slave 1 
 R42 - EQ 1 
 R43 - EQ 2 
 R44 - EQ 3 
 R45 - EQ 4 
 R46 - EQ 5 
 R47 - EQ 6 
 R48 - EQ 7 
 R49 - EQ 8 
 R50 - EQ 9 
 R51 - EQ 10 
 R52 - EQ 11 
 R53 - EQ 12 
 R54 - EQ 13 
 R55 - EQ 14 
 R56 - EQ 15 
 R57 - EQ 16 
 R58 - EQ 17 
 R59 - EQ 18 
 R60 - EQ 19 
 R61 - EQ 20 
 10 due to .5s 
  Stop any attempts to change speaker mode while the speaker is enabled.
  We also have some special anti-pop controls dependent on speaker
  mode which must be changed along with the mode.
 Are we changing anything? 
 Don't try to change modes while enabled 
 Class AB 
 Class D 
 The size in bits of the FLL divide multiplied by 10
 Fref must be <=13.5MHz 
 Apply the division for our remaining calculations 
 Fvco should be 90-100MHz; don't check the upper bound 
 Find an appropriate FLL_FRATIO and factor it out of the target 
 Now, calculate N.K 
 Calculate fractional part - scale up so we can round. 
 Move down to proper range now rounding is done 
 Any change? 
 Disable the FLL 
 Disable CLK_SYS while we reconfigure 
	 Any FLL configuration change requires that the FLL be
 Apply the configuration 
 Set gain to the recommended value 
 Enable the FLL 
 Then bring CLK_SYS up again if it was disabled 
		 If we have a sample rate calculate a CLK_SYS that
		  gives us a suitable DAC configuration, plus BCLK.
		  Ideally we would check to see if we can clock
		  directly from MCLK and only use the FLL if this is
		  not the case, though care must be taken with free
		  running mode.
			 Make sure we can generate CLK_SYS and BCLK
			  and that we've got 3MHz for optimal
 Switch SYSCLK over to FLL 
 This should be done on init() for bypass paths 
 Disable the FLL if it's running 
 VMID=240k 
 Normal bias current 
 Initial cold start 
 Disable LINEOUT discharge 
 Select startup bias source 
 VMID 24k; Soft VMID ramp enable 
 Normal bias enable & soft start off 
 Standard bias source 
 VMID 2240k 
 Standby bias current on 
 Startup bias source and disable bias 
 Disable VMID with soft ramping 
 Actively discharge LINEOUT 
 frame inversion not valid for DSP modes 
 If TDM is set up then that fixes our BCLK. 
 Otherwise work out a BCLK from the sample size 
 Select nearest CLK_SYS_RATE 
 SAMPLE_RATE 
 Closest match 
 BCLK_DIV 
 Table is sorted 
 LRCLK is a simple fraction of BCLK 
 Apply a ReTune Mobile configuration if it's in use 
 If the EQ is enabled then disable it while we write out 
 Write out the other values 
 We report two channels because the CODEC processes a stereo signal, even
  though it is only capable of handling a mono output.
 Enable zero cross by default 
 SPDX-License-Identifier: GPL-2.0
 Copyright (c) 2019 MediaTek Inc.
 config to adaptive mode 
 voltage sensing enable 
 voltage sensing disable 
 pop-noise improvement 1 
 pop-noise improvement 2 
 config to off mode 
 idle_bias_off = true 
 dai properties 
 dai operations 
 turn on main pll first, then trigger reset 
 chip reset first 
 chip power on 
 chip devid check 
 chip revision get 
 SPDX-License-Identifier: GPL-2.0-or-later
  ADAV80X Audio Codec driver supporting ADAV801, ADAV803
  Copyright 2011 Analog Devices Inc.
  Author: Yi Li <yi.li@analog.com>
  Author: Lars-Peter Clausen <lars@metafoo.de>
 freq_out = sample_rate  256 
 Enforce the same sample rate on all audio interfaces 
 Force PLLs on for SYSCLK output 
 Power down SPDIF receiver, since it is currently not supported 
 Disable DAC zero flag 
 SPDX-License-Identifier: GPL-2.0-only
 rt711-sdca.c -- rt711 SDCA ALSA SoC audio driver
 Copyright(c) 2021 Realtek Semiconductor Corp.
 RC calibration 
 HP calibration by manual mode setting 
 Calibration manual mode 
 reset HP calibration 
 cal_clk_en_reg 
 trigger 
 wait for calibration process 
 enable impedance sense 
 release HP-JD and trigger FSM 
 get current UMP message owner 
 if owner is device then there is no button event from device 
 read UMP message offset 
 Host is owner, so set back to device 
 set owner to device 
 get detected_mode 
 write selected_mode 
 SDW_SCP_SDCA_INT_SDCA_0 is used for jack detection 
 SDW_SCP_SDCA_INT_SDCA_8 is used for button detection 
 button released 
 pin attached 
 read UMP message offset 
 button released 
 Enable HID1 event & set button RTC mode 
 GE_mode_change_event_en & Hid1_push_button_event_en 
 default settings was already for JD1 
 set SCP_SDCA_IntMask1[0]=1 
 set SCP_SDCA_IntMask2[0]=1 
 disable HID 12 event 
 For SDCA control DACADC Gain 
 control value to 2's complement value 
 L Channel 
 boost gain 
 ADCDAC gain 
 R Channel 
 boost gain 
 ADCDAC gain 
 retry 3 times at most 
 Lch
 Rch 
 2's complement value to control value 
 boost gain 
 ADCDAC gain 
 boost gain 
 ADCDAC gain 
 Use tx_mask or rx_mask to configure stream tag and set dma_data 
 SoundWire specific configuration 
 sampling rate configuration 
 set sampling frequency 
	
	  Mark hw_init to false
	  HW init will be performed when device reports present
 JD source uses JD2 in default 
		
		  PM runtime is only enabled when a Slave reports as Attached
 set autosuspend parameters 
 update count of parent 'active' children 
 make sure the device does not suspend immediately 
 DP4 mux select from 08_filter_Out_pri 
 ge_exclusive_inbox_en disable 
 calibration 
 HP output enable 
	
	  if set_jack callback occurred early than io_init,
	  we set up the jack detection function now
 Mark Slave initialization complete 
 SPDX-License-Identifier: GPL-2.0-only
 ALSA SoC TLV320AIC3X codec driver
  Author:      Vladimir Barinov, <vbarinov@embeddedalley.com>
  Copyright:   (C) 2007 MontaVista Software, Inc., <source@mvista.com>
  Based on soundsoccodecswm8753.c by Liam Girdwood
  Notes:
   The AIC3X is a driver for a low power stereo audio
   codecs aic31, aic32, aic33, aic3007.
   It supports full aic33 codec functionality.
   The compatibility with aic32, aic31 and aic3007 is as follows:
     aic32aic3007    |        aic31
   ---------------------------------------
    MONO_LOUT -> NA  |  MONO_LOUT -> NA
                      |  IN1L -> LINE1L
                      |  IN1R -> LINE1R
                      |  IN2L -> LINE2L
                      |  IN2R -> LINE2R
                      |  MIC3LR -> NA
    truncated internal functionality in
    accordance with documentation
   ---------------------------------------
   Hence the machine layer should disable unsupported inputsoutputs by
   snd_soc_dapm_disable_pin(codec, "MONO_LOUT"), etc.
 IO Voltage 
 Digital Core Voltage 
 Analog DAC Voltage 
 ADC Analog and Output Driver Voltage 
 codec private data 
 Selects the micbias voltage 
 Output Common-Mode Voltage 
  All input lines are connected when !0xf and disconnected with 0xf bit field,
  so we have to use specific dapm_put call for input mixer
  mic bias power onoff share the same register bits with
  output voltage of mic bias. when power on mic bias, we
  need reclaim it to voltage value.
  0x0 = Powered off
  0x1 = MICBIAS output is powered to 2.0V,
  0x2 = MICBIAS output is powered to 2.5V
  0x3 = MICBIAS output is connected to AVDD
 change mic bias voltage to user defined 
  DAC digital volumes. From -63.5 to 0 dB in 0.5 dB steps
 ADC PGA gain volumes. From 0 to 59.5 dB in 0.5 dB steps 
  Output stage volumes. From -78.3 to 0 dB. Muted below -78.3 dB.
  Step size is approximately 0.5 dB over most of the scale but increasing
  near the very low levels.
  Define dB scale so that it is mostly correct for range about -55 to 0 dB
  but having increasing dB difference below that (and where it doesn't count
  so much). This setting shows -50 dB (actual is -50.3 dB) for register
  value 100 and -58.5 dB (actual is -78.3 dB) for register value 117.
 Output volumes. From 0 to 9 dB in 1 dB steps 
 Output 
	
	  Output controls that map to output mixer switches. Note these are
	  only for swapped L-to-R and R-to-L routes. See below stereo controls
	  for direct L-to-L and R-to-R routes.
 Stereo output controls for direct L-to-L and R-to-R routes 
 Output pin controls 
	
	  Note: enable Automatic input Gain Controller with care. It can
	  adjust PGA to max value when ADC is on and will never go back.
 De-emphasis 
 Input 
 Pop reduction 
 For other than tlv320aic3104 
	
	  Output controls that map to output mixer switches. Note these are
	  only for swapped L-to-R and R-to-L routes. See below stereo controls
	  for direct L-to-L and R-to-R routes.
 Stereo output controls for direct L-to-L and R-to-R routes 
  Class-D amplifier gain. From 0 to 18 dB in 6 dB steps
 Left DAC Mux 
 Right DAC Mux 
 Left HPCOM Mux 
 Right HPCOM Mux 
 Left Line Mixer 
 Not on tlv320aic3104 
 Right Line Mixer 
 Not on tlv320aic3104 
 Mono Mixer 
 Left HP Mixer 
 Not on tlv320aic3104 
 Right HP Mixer 
 Not on tlv320aic3104 
 Left HPCOM Mixer 
 Not on tlv320aic3104 
 Right HPCOM Mixer 
 Not on tlv320aic3104 
 Left PGA Mixer 
 Right PGA Mixer 
 Left PGA Mixer for tlv320aic3104 
 Right PGA Mixer for tlv320aic3104 
 Left Line1 Mux 
 Right Line1 Mux 
 Left Line2 Mux 
 Right Line2 Mux 
 Left DAC to Left Outputs 
 Right DAC to Right Outputs 
 Inputs to Left ADC 
 Inputs to Right ADC 
 Mic Bias 
	
	  Virtual output pin to detection block inside codec. This can be
	  used to keep codec bias on if gpio or detection features are needed.
	  Force pin on or construct a path with an input jack and mic bias
	  widgets.
 For other than tlv320aic3104 
 Inputs to Left ADC 
 Inputs to Right ADC 
	
	  Not a real mic bias widget but similar function. This is for dynamic
	  control of GPIO1 digital mic modulator clock output function when
	  using digital mic.
	
	  Also similar function like mic bias. Selects digital mic with
	  configurable oversampling rate instead of ADC converter.
 Output mixers 
 For tlv320aic3104 
 Inputs to Left ADC 
 Inputs to Right ADC 
 Output mixers 
 Mono Output 
 Class-D outputs 
 Left Input 
 Right Input 
 Left DAC Output 
 Right DAC Output 
 Left Line Output 
 Right Line Output 
 Left HP Output 
 Right HP Output 
 Left HPCOM Output 
 Right HPCOM Output 
 For other than tlv320aic3104 
 Left Input 
 Right Input 
	
	  Logical path between digital mic enable and GPIO1 modulator clock
	  output function
 Left Line Output 
 Right Line Output 
 Left HP Output 
 Right HP Output 
 Left HPCOM Output 
 Right HPCOM Output 
 For tlv320aic3104 
 Left Input 
 Right Input 
 Mono Output 
 Class-D outputs 
 select data word length 
 Fsref can be 44100 or 48000 
	 Try to find a value for Q which allows us to bypass the PLL and
 disable PLL if it is bypassed 
 enable PLL when it is used 
	 Route Left DAC to left channel input and
 codec sample rate select 
	 Use PLL, compute appropriate setup for j, d, r and p, the closest
	  one wins the game. Try with d==0 first, next with d!=0.
	  Constraints for j are according to the datasheet.
	  The sysclk is divided by 1000 to prevent integer overflows.
				 This is actually 1000((j+(d10000))r)p
				  The term had to be converted to get
				  rid of the division by 10000; d = 0 here
				 Check whether this values get closer than
				  the best ones we had before
 Early exit for exact matches 
 try with d != 0 
 do not use codec_clk here since we'd loose precision 
		 check whether this values get closer than the best
 Early exit for exact matches 
 TDM slot selection only valid in DSP_A_B mode 
 Configure data delay 
 set clock on MCLK or GPIO2 or BCLK 
 set masterslave audio interface 
	
	  match both interface format and signal polarities since they
	  are fixed
 set iface 
 TDM based on DSP mode requires slots to be adjacent 
 DOUT in high-impedance on inactive bit clocks 
		
		  Put codec to reset and require cache sync as at least one
		  of the supplies was disabled
 Sync reg_cache with the hardware 
		 Rewrite paired PLL D registers in case cached sync skipped
		  writing one of them and thus caused other one also not
		  being written
		
		  Delay is needed to reduce pop-noise after syncing back the
		  registers
		
		  Do soft reset to this codec instance in order to clear
		  possible VDD leakage currents in case the supply regulators
		  remain on
 HW writes are needless when bias is off 
 enable pll 
 disable pll 
 DAC to Mono Line Out default volume and route to Output mixer 
 unmute all outputs 
 PGA to Mono Line Out default volume, disconnect from Output Mixer 
 Line2 to Mono Out default volume, disconnect from Output Mixer 
  initialise the AIC3X driver
  register the mixer and dsp interfaces with the kernel
 DAC default volume and mute 
 DAC to HP default volume and route to Output mixer 
 DAC to Line Out default volume and route to Output mixer 
 unmute all outputs 
 ADC default volume and unmute 
 By default route Line1 to ADC PGA mixer 
 PGA to HP Bypass default volume, disconnect from Output Mixer 
 PGA to Line Out default volume, disconnect from Output Mixer 
 On tlv320aic3104, these registers are reserved and must not be written 
 Line2 to HP Bypass default volume, disconnect from Output Mixer 
 Line2 Line Out default volume, disconnect from Output Mixer 
  Output common-mode voltage = 1.5 V 
 setup GPIO functions 
 set mic bias voltage 
		
		  noting to do. target won't enter here. This is just to avoid
		  compile time warning "warning: enumeration value
		  'AIC3X_MICBIAS_OFF' not handled in switch"
 OCMV setting is forced by DT 
 Class-D speaker driver init; datasheet p. 46 
 SPDX-License-Identifier: GPL-2.0-only
   hdac_hdmi.c - ASoc HDA-HDMI codec driver for Intel platforms
   Copyright (C) 2014-2015 Intel Corp
   Author: Samreen Nilofer <samreen.nilofer@intel.com>
 	    Subhransu S. Prusty <subhransu.s.prusty@intel.com>
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 Currently only spk_alloc, more to be added 
 ALSA API channel-map 
		
		  Report Jack connect event when a device is connected
		  for the first time where same PCM is attached to multiple
		  ports.
		
		  Report Jack disconnect event when a device is disconnected
		  is the only last connected device when same PCM is attached
		  to multiple ports.
 MST supported verbs 
  Get the no devices that can be connected to a port on the Pin widget.
  Get the port entry select on the pin. Return the port entry
  id selected on the pin. Return 0 means the first port entry
  is selected or MST is not supported.
  Sets the selected port entry for the configuring Pin widget verb.
  returns error if port set is not equal to port get otherwise success
 AC_PAR_DEVLIST_LEN is 0 based. 
	
	  Device List Length is a 0 based integer value indicating the
	  number of sink device that a MST Pin Widget can support.
 AUDIO_CODING_TYPE_LPCM 
			
			  the controller support 20 and 24 bits in 32 bit
			  container so we set S32
 0x84 
 0x1b 
 0x11 << 2 
 match with HDMI infoframe from this on 
 stop infoframe transmission 
  Fill infoframe. Index auto-incremented 
 Start infoframe 
  Query pcm list and return port to which stream is routed.
  Also query connection list of the pin, to validate the cvt to port map.
  Same stream rendering to multiple ports simultaneously can be done
  possibly, but not supported for now in driver. So return the first port
  connected.
  Go through all converters and ensure connection is set to
  the correct pin as set via kcontrols.
  This tries to get a valid pin and set the HW constraints based on the
  ELD. Even if a valid pin is not found return success so that device open
  doesn't fail.
	
	  To make PA and other userland happy.
	  userland scans devices so returning error does not help.
 set the device if pin is mst_capable 
 Enable out path for this pin widget 
 Disable out path for this pin widget 
 Enable transmission 
 Category Code (CC) to zero 
		
		  The connection indices are shared by all converters and
		  may interfere with each other. Ensure correct
		  routing for all converters at stream start.
 set the device if pin is mst_capable 
  Based on user selection, map the PINs with the PCMs.
	
	  Jack status is not reported during device probe as the
	  PCMs are not registered by then. So report it here.
  Ideally the Mux inputs should be based on the num_muxs enumerated, but
  the display driver seem to be programming the connection list for the pin
  widget runtime.
  So programming all the possible inputs for the mux, the user has to take
  care of selecting the right one and leaving all other inputs selected to
  "NONE"
 To hold inputs to the Pin mux 
 enum texts: ["NONE", "cvt #", "cvt #", ...] 
 Add cvt <- input <- mux route map 
  Widgets are added in the below sequence
 	Converter widgets for num converters enumerated
 	Pin-port widgets for num ports for Pins enumerated
 	Pin-port mux widgets to represent connenction list of pin widget
  For each port, one Mux and One output widget is added
  Total widgets elements = num_cvt + (num_ports  2);
  Routes are added as below:
 	pin-port mux -> pin (based on num_ports)
 	cvt -> "Input sel control" -> pin-port_mux
  Total route elements:
 	num_ports + (pin_muxes  num_cvt)
 DAPM widgets to represent each converter widget 
 DAPM widgets to represent the connection list to pin widget 
 For cvt to pin_mux mapping 
 For pin_mux to pin mapping 
 Add pin <- NULL <- mux route map 
	
	  In case of non MST pin, get_eld info API expectes port
	  to be -1.
		
		  PCMs are not registered during device probe, so don't
		  report jack here. It will be done in usermode mux
		  control select.
	
	  FIXME: max_port may vary for each platform, so pass this as
	  as driver data or query from i915 interface when this API is
	  implemented.
 enable DP 1.2 features 
 enable 2nd & 3rd pins and convertors 
 enable DP1.2 mode 
 add ELD ctl with the device number corresponding to the PCM stream 
  Each converter can support a stream independently. So a dai is created
  based on the number of converter queried.
 Filter out 44.1, 88.2 and 176.4Khz 
		
		  Set caps based on capability queried from the converter.
		  It will be constrained runtime based on ELD queried.
  Parse all nodes and store the cvtpin nids in array
  Add one time initialization for pin and cvt widgets
 map NID 0x05 -> port #1 
 Don't know how this mapping is derived 
	
	  skip notification during system suspend (but not in runtime PM);
	  the state will be updated at resume. Also since the ELD and
	  connection states are updated in anyway at the end of the resume,
	  we can skip it when received during PM process.
 In case of non MST pin, pipe is -1 
 if not MST, default is port[0] 
 create jack pin kcontrols 
 create Jack DAPM widget 
 add to route from Jack widget to output 
 Add Route from Jack widget to the output widget 
 Add Jack Pin switch Kcontrol 
 default set the Jack Pin switch to OFF 
	
	  this is a new PCM device, create new pcm and
	  add to the pcm list
 add control for ELD Bytes 
	
	  hold the ref while we probe, also no need to drop the ref on
	  exit, we call pm_runtime_suspend() so that will do for us
 Imp: Store the card pointer in hda_codec 
	
	  Setup a device_link between card device and HDMI codec device.
	  The card device is the consumer and the HDMI codec device is
	  the supplier. With this setting, we can make sure that the audio
	  domain in display power will be always turned on before operating
	  on the HDMI audio codec registers.
	  Let's use the flag DL_FLAG_AUTOREMOVE_CONSUMER. This can make
	  sure the device link is freed when the machine driver is removed.
	
	  hdac_device core already sets the state to active and calls
	  get_noresume. So enable runtime and set the device to suspend.
	
	  As the ELD notify callback request is not entertained while the
	  device is in suspend state. Need to manually check detection of
	  all pins here. pin capablity change is not support, so use the
	  already set pin caps.
	 
	  NOTE: this is safe to call even if the codec doesn't actually resume.
	  The pin check involves only with DRM audio component hooks, so it
	  works even if the HD-audio side is still dreaming peacefully.
 hold the ref while we probe 
	
	  Turned off in the runtime_suspend during the first explicit
	  pm_runtime_suspend call.
 ASoC specific initialization 
 controller may not have been initialized for the first time 
	
	  Power down afg.
	  codec_read is preferred over codec_write to set the power state.
	  This way verb is send to set the power state and response
	  is received. So setting power state is ensured without using loop
	  to read the state.
 controller may not have been initialized for the first time 
 Power up afg 
 SPDX-License-Identifier: GPL-2.0-only
  wm8985.c  --  WM8985  WM8758 ALSA SoC Audio driver
  Copyright 2010 Wolfson Microelectronics plc
  Author: Dimitris Papastamos <dp@opensource.wolfsonmicro.com>
  WM8758 support:
  Copyright: 2016 Barix AG
  Author: Petr Kulhavy <petr@barix.com>
  TODO:
   o Add OUT3OUT4 mixer controls.
 R1  - Power management 1 
 R2  - Power management 2 
 R3  - Power management 3 
 R4  - Audio Interface 
 R5  - Companding control 
 R6  - Clock Gen control 
 R7  - Additional control 
 R8  - GPIO Control 
 R9  - Jack Detect Control 1 
 R10 - DAC Control 
 R11 - Left DAC digital Vol 
 R12 - Right DAC digital vol 
 R13 - Jack Detect Control 2 
 R14 - ADC Control 
 R15 - Left ADC Digital Vol 
 R16 - Right ADC Digital Vol 
 R18 - EQ1 - low shelf 
 R19 - EQ2 - peak 1 
 R20 - EQ3 - peak 2 
 R21 - EQ4 - peak 3 
 R22 - EQ5 - high shelf 
 R24 - DAC Limiter 1 
 R25 - DAC Limiter 2 
 R27 - Notch Filter 1 
 R28 - Notch Filter 2 
 R29 - Notch Filter 3 
 R30 - Notch Filter 4 
 R32 - ALC control 1 
 R33 - ALC control 2 
 R34 - ALC control 3 
 R35 - Noise Gate 
 R36 - PLL N 
 R37 - PLL K 1 
 R38 - PLL K 2 
 R39 - PLL K 3 
 R41 - 3D control 
 R42 - OUT4 to ADC 
 R43 - Beep control 
 R44 - Input ctrl 
 R45 - Left INP PGA gain ctrl 
 R46 - Right INP PGA gain ctrl 
 R47 - Left ADC BOOST ctrl 
 R48 - Right ADC BOOST ctrl 
 R49 - Output ctrl 
 R50 - Left mixer ctrl 
 R51 - Right mixer ctrl 
 R52 - LOUT1 (HP) volume ctrl 
 R53 - ROUT1 (HP) volume ctrl 
 R54 - LOUT2 (SPK) volume ctrl 
 R55 - ROUT2 (SPK) volume ctrl 
 R56 - OUT3 mixer ctrl 
 R57 - OUT4 (MONO) mix ctrl 
 R60 - OUTPUT ctrl 
 R61 - BIAS CTRL 
  latch bit 8 of these registers to ensure instant
  volume updates
 --- WM8985 only --- 
 --- WM8985 only --- 
 --- WM8985 only --- 
 --- WM8985 only --- 
 disable the DACs and ADCs 
 set the desired eqmode 
 restore DACADC configuration 
 frame inversion is not valid for dsp modes 
	
	  match to the nearest possible sample rate and rely
	  on the array index to configure the SR register
 select the appropriate bclk divider 
 disable the PLL 
 set PLLN and PRESCALE 
 set PLLK 
 set the source of the clock to be the PLL 
 enable the PLL 
 VMID at 75k 
 enable anti-pop features 
 enable thermal shutdown 
 enable BIASEN 
 VMID at 75k 
 disable anti-pop features 
 VMID at 300k 
 disable thermal shutdown 
 disable VMIDSEL and BIASEN 
 latch volume update bits 
 enable BIASCUT 
 SPDX-License-Identifier: GPL-2.0-or-later
  cx20442.c  --  CX20442 ALSA Soc Audio driver
  Copyright 2009 Janusz Krzysztofik <jkrzyszt@tis.icnet.pl>
  Initially based on soundsoccodecswm8400.c
  Copyright 2008, 2009 Wolfson Microelectronics PLC.
  Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
	 tty and write pointers required for talking to the modem
  Line discpline related code
  Any of the callback functions below can be used in two ways:
  1) registerd by a machine driver as one of line discipline operations,
  2) called from a machine's provided line discipline callback function
     in case when extra machine specific code must be run as well.
 Modem init: echo off, digital speaker off, quiet off, voice mode 
 Line discipline .open() 
 Doesn't make sense without write callback 
 Won't work if no codec pointer has been passed by a card driver 
 Actual setup will be performed after the modem responds. 
 Line discipline .close() 
 Prevent the codec driver from further accessing the modem 
 Line discipline .hangup() 
 Line discipline .receive_buf() 
 First modem response, complete setup procedure 
 Set up codec driver access to modem controls 
  Codec DAI
		
		  When running on a non-dt platform and requested regulator
		  is not available, regulator_get() never returns
		  -EPROBE_DEFER as it is not able to justify if the regulator
		  may still appear later.  On the other hand, the board can
		  still set full constraints flag at late_initcall in order
		  to instruct regulator_get() to return a dummy one if
		  sufficient.  Hence, if we get -ENODEV here, let's convert
		  it to -EPROBE_DEFER and wait for the board to decide or
		  let Deferred Probe infrastructure handle this error.
 power down chip 
 should be already in STANDBY, hence disabled 
 SPDX-License-Identifier: GPL-2.0-only
  wm8728.c  --  WM8728 ALSA SoC Audio driver
  Copyright 2008 Wolfson Microelectronics plc
  Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
  We can't read the WM8728 register space so we cache them instead.
  Note that the defaults here aren't the physical defaults, we latch
  the volume update bits, mute the output and enable infinite zero
  detect.
 codec private data 
  DAPM controls.
	 Currently only I2S is supported by the driver, though the
	  hardware is more flexible.
 The hardware only support full slave mode 
 Power everything up... 
 ..then sync in the register cache. 
 CONFIG_SPI_MASTER 
 SPDX-License-Identifier: GPL-2.0-only
  cs42l51.c
  ASoC Driver for Cirrus Logic CS42L51 codecs
  Copyright (c) 2010 Arnaud Patard <apatard@mandriva.com>
  Based on cs4270.c - Copyright (c) Freescale Semiconductor
  For now:
   - Only I2C is support. Not SPI
   - master mode NOT supported
 The mode (I2S or left-justified) 
 same value : (L+R)2 and (R+L)2 
  to power down, one must:
  1.) Enable the PDN bit
  2.) enable power-down for the select channels
  3.) disable the PDN bit.
 analogmic 
 HP 
 mux 
 Delay mclk shutdown to fulfill power-down sequence requirements 
  Master mode mclkfs ratios.
  Recommended configurations are SSM for 4-50khz and DSM for 50-100kHz ranges
  The table below provides support of following ratios:
  128: SSM (%128) with div2 disabled
  256: SSM (%128) with div2 enabled
  In both cases, if sampling rate is above 50kHz, SSM is overridden
  with DSM (%128) configuration
 Figure out which MCLKLRCK ratio to use 
 Sampling rate, in Hz 
 MCLKLRCK ratio 
 We did not find a matching ratio 
 Force DSM mode if sampling rate is above 50kHz 
		
		  Auto detect mode is not applicable for master mode and has to
		  be disabled. Otherwise SPEED[1:0] bits will be ignored.
 return dai id 0, whatever the endpoint index 
	
	  DAC configuration
	  - Use signal processor
	  - auto mute
	  - vol changes immediate
	  - no de-emphasize
 Verify that we have a CS42L51 
 SPDX-License-Identifier: GPL-2.0
 rt1308.c  --  RT1308 ALSA SoC amplifier component driver
 Copyright 2019 Realtek Semiconductor Corp.
 Author: Derek Fang <derek.fang@realtek.com>
 I2S Data Channel Selection 
 Audio Interface 
 Supply Widgets 
 Digital Interface 
 Output Lines 
 ignore last byte difference 
 SPDX-License-Identifier: GPL-2.0-only
  wm2200.c  --  WM2200 ALSA SoC Audio driver
  Copyright 2012 Wolfson Microelectronics plc
  Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
 The code assumes DCVDD is generated internally 
 codec private data 
 R11    - Tone Generator 1 
 R258   - Clocking 3 
 R259   - Clocking 4 
 R273   - FLL Control 1 
 R274   - FLL Control 2 
 R275   - FLL Control 3 
 R276   - FLL Control 4 
 R278   - FLL Control 6 
 R279   - FLL Control 7 
 R281   - FLL EFS 1 
 R282   - FLL EFS 2 
 R512   - Mic Charge Pump 1 
 R513   - Mic Charge Pump 2 
 R514   - DM Charge Pump 1 
 R524   - Mic Bias Ctrl 1 
 R525   - Mic Bias Ctrl 2 
 R527   - Ear Piece Ctrl 1 
 R528   - Ear Piece Ctrl 2 
 R769   - Input Enables 
 R770   - IN1L Control 
 R771   - IN1R Control 
 R772   - IN2L Control 
 R773   - IN2R Control 
 R774   - IN3L Control 
 R775   - IN3R Control 
 R778   - RXANC_SRC 
 R779   - Input Volume Ramp 
 R780   - ADC Digital Volume 1L 
 R781   - ADC Digital Volume 1R 
 R782   - ADC Digital Volume 2L 
 R783   - ADC Digital Volume 2R 
 R784   - ADC Digital Volume 3L 
 R785   - ADC Digital Volume 3R 
 R1024  - Output Enables 
 R1025  - DAC Volume Limit 1L 
 R1026  - DAC Volume Limit 1R 
 R1027  - DAC Volume Limit 2L 
 R1028  - DAC Volume Limit 2R 
 R1033  - DAC AEC Control 1 
 R1034  - Output Volume Ramp 
 R1035  - DAC Digital Volume 1L 
 R1036  - DAC Digital Volume 1R 
 R1037  - DAC Digital Volume 2L 
 R1038  - DAC Digital Volume 2R 
 R1047  - PDM 1 
 R1048  - PDM 2 
 R1280  - Audio IF 1_1 
 R1281  - Audio IF 1_2 
 R1282  - Audio IF 1_3 
 R1283  - Audio IF 1_4 
 R1284  - Audio IF 1_5 
 R1285  - Audio IF 1_6 
 R1286  - Audio IF 1_7 
 R1287  - Audio IF 1_8 
 R1288  - Audio IF 1_9 
 R1289  - Audio IF 1_10 
 R1290  - Audio IF 1_11 
 R1291  - Audio IF 1_12 
 R1292  - Audio IF 1_13 
 R1293  - Audio IF 1_14 
 R1294  - Audio IF 1_15 
 R1295  - Audio IF 1_16 
 R1296  - Audio IF 1_17 
 R1297  - Audio IF 1_18 
 R1298  - Audio IF 1_19 
 R1299  - Audio IF 1_20 
 R1300  - Audio IF 1_21 
 R1301  - Audio IF 1_22 
 R1536  - OUT1LMIX Input 1 Source 
 R1537  - OUT1LMIX Input 1 Volume 
 R1538  - OUT1LMIX Input 2 Source 
 R1539  - OUT1LMIX Input 2 Volume 
 R1540  - OUT1LMIX Input 3 Source 
 R1541  - OUT1LMIX Input 3 Volume 
 R1542  - OUT1LMIX Input 4 Source 
 R1543  - OUT1LMIX Input 4 Volume 
 R1544  - OUT1RMIX Input 1 Source 
 R1545  - OUT1RMIX Input 1 Volume 
 R1546  - OUT1RMIX Input 2 Source 
 R1547  - OUT1RMIX Input 2 Volume 
 R1548  - OUT1RMIX Input 3 Source 
 R1549  - OUT1RMIX Input 3 Volume 
 R1550  - OUT1RMIX Input 4 Source 
 R1551  - OUT1RMIX Input 4 Volume 
 R1552  - OUT2LMIX Input 1 Source 
 R1553  - OUT2LMIX Input 1 Volume 
 R1554  - OUT2LMIX Input 2 Source 
 R1555  - OUT2LMIX Input 2 Volume 
 R1556  - OUT2LMIX Input 3 Source 
 R1557  - OUT2LMIX Input 3 Volume 
 R1558  - OUT2LMIX Input 4 Source 
 R1559  - OUT2LMIX Input 4 Volume 
 R1560  - OUT2RMIX Input 1 Source 
 R1561  - OUT2RMIX Input 1 Volume 
 R1562  - OUT2RMIX Input 2 Source 
 R1563  - OUT2RMIX Input 2 Volume 
 R1564  - OUT2RMIX Input 3 Source 
 R1565  - OUT2RMIX Input 3 Volume 
 R1566  - OUT2RMIX Input 4 Source 
 R1567  - OUT2RMIX Input 4 Volume 
 R1568  - AIF1TX1MIX Input 1 Source 
 R1569  - AIF1TX1MIX Input 1 Volume 
 R1570  - AIF1TX1MIX Input 2 Source 
 R1571  - AIF1TX1MIX Input 2 Volume 
 R1572  - AIF1TX1MIX Input 3 Source 
 R1573  - AIF1TX1MIX Input 3 Volume 
 R1574  - AIF1TX1MIX Input 4 Source 
 R1575  - AIF1TX1MIX Input 4 Volume 
 R1576  - AIF1TX2MIX Input 1 Source 
 R1577  - AIF1TX2MIX Input 1 Volume 
 R1578  - AIF1TX2MIX Input 2 Source 
 R1579  - AIF1TX2MIX Input 2 Volume 
 R1580  - AIF1TX2MIX Input 3 Source 
 R1581  - AIF1TX2MIX Input 3 Volume 
 R1582  - AIF1TX2MIX Input 4 Source 
 R1583  - AIF1TX2MIX Input 4 Volume 
 R1584  - AIF1TX3MIX Input 1 Source 
 R1585  - AIF1TX3MIX Input 1 Volume 
 R1586  - AIF1TX3MIX Input 2 Source 
 R1587  - AIF1TX3MIX Input 2 Volume 
 R1588  - AIF1TX3MIX Input 3 Source 
 R1589  - AIF1TX3MIX Input 3 Volume 
 R1590  - AIF1TX3MIX Input 4 Source 
 R1591  - AIF1TX3MIX Input 4 Volume 
 R1592  - AIF1TX4MIX Input 1 Source 
 R1593  - AIF1TX4MIX Input 1 Volume 
 R1594  - AIF1TX4MIX Input 2 Source 
 R1595  - AIF1TX4MIX Input 2 Volume 
 R1596  - AIF1TX4MIX Input 3 Source 
 R1597  - AIF1TX4MIX Input 3 Volume 
 R1598  - AIF1TX4MIX Input 4 Source 
 R1599  - AIF1TX4MIX Input 4 Volume 
 R1600  - AIF1TX5MIX Input 1 Source 
 R1601  - AIF1TX5MIX Input 1 Volume 
 R1602  - AIF1TX5MIX Input 2 Source 
 R1603  - AIF1TX5MIX Input 2 Volume 
 R1604  - AIF1TX5MIX Input 3 Source 
 R1605  - AIF1TX5MIX Input 3 Volume 
 R1606  - AIF1TX5MIX Input 4 Source 
 R1607  - AIF1TX5MIX Input 4 Volume 
 R1608  - AIF1TX6MIX Input 1 Source 
 R1609  - AIF1TX6MIX Input 1 Volume 
 R1610  - AIF1TX6MIX Input 2 Source 
 R1611  - AIF1TX6MIX Input 2 Volume 
 R1612  - AIF1TX6MIX Input 3 Source 
 R1613  - AIF1TX6MIX Input 3 Volume 
 R1614  - AIF1TX6MIX Input 4 Source 
 R1615  - AIF1TX6MIX Input 4 Volume 
 R1616  - EQLMIX Input 1 Source 
 R1617  - EQLMIX Input 1 Volume 
 R1618  - EQLMIX Input 2 Source 
 R1619  - EQLMIX Input 2 Volume 
 R1620  - EQLMIX Input 3 Source 
 R1621  - EQLMIX Input 3 Volume 
 R1622  - EQLMIX Input 4 Source 
 R1623  - EQLMIX Input 4 Volume 
 R1624  - EQRMIX Input 1 Source 
 R1625  - EQRMIX Input 1 Volume 
 R1626  - EQRMIX Input 2 Source 
 R1627  - EQRMIX Input 2 Volume 
 R1628  - EQRMIX Input 3 Source 
 R1629  - EQRMIX Input 3 Volume 
 R1630  - EQRMIX Input 4 Source 
 R1631  - EQRMIX Input 4 Volume 
 R1632  - LHPF1MIX Input 1 Source 
 R1633  - LHPF1MIX Input 1 Volume 
 R1634  - LHPF1MIX Input 2 Source 
 R1635  - LHPF1MIX Input 2 Volume 
 R1636  - LHPF1MIX Input 3 Source 
 R1637  - LHPF1MIX Input 3 Volume 
 R1638  - LHPF1MIX Input 4 Source 
 R1639  - LHPF1MIX Input 4 Volume 
 R1640  - LHPF2MIX Input 1 Source 
 R1641  - LHPF2MIX Input 1 Volume 
 R1642  - LHPF2MIX Input 2 Source 
 R1643  - LHPF2MIX Input 2 Volume 
 R1644  - LHPF2MIX Input 3 Source 
 R1645  - LHPF2MIX Input 3 Volume 
 R1646  - LHPF2MIX Input 4 Source 
 R1647  - LHPF2MIX Input 4 Volume 
 R1648  - DSP1LMIX Input 1 Source 
 R1649  - DSP1LMIX Input 1 Volume 
 R1650  - DSP1LMIX Input 2 Source 
 R1651  - DSP1LMIX Input 2 Volume 
 R1652  - DSP1LMIX Input 3 Source 
 R1653  - DSP1LMIX Input 3 Volume 
 R1654  - DSP1LMIX Input 4 Source 
 R1655  - DSP1LMIX Input 4 Volume 
 R1656  - DSP1RMIX Input 1 Source 
 R1657  - DSP1RMIX Input 1 Volume 
 R1658  - DSP1RMIX Input 2 Source 
 R1659  - DSP1RMIX Input 2 Volume 
 R1660  - DSP1RMIX Input 3 Source 
 R1661  - DSP1RMIX Input 3 Volume 
 R1662  - DSP1RMIX Input 4 Source 
 R1663  - DSP1RMIX Input 4 Volume 
 R1664  - DSP1AUX1MIX Input 1 Source 
 R1665  - DSP1AUX2MIX Input 1 Source 
 R1666  - DSP1AUX3MIX Input 1 Source 
 R1667  - DSP1AUX4MIX Input 1 Source 
 R1668  - DSP1AUX5MIX Input 1 Source 
 R1669  - DSP1AUX6MIX Input 1 Source 
 R1670  - DSP2LMIX Input 1 Source 
 R1671  - DSP2LMIX Input 1 Volume 
 R1672  - DSP2LMIX Input 2 Source 
 R1673  - DSP2LMIX Input 2 Volume 
 R1674  - DSP2LMIX Input 3 Source 
 R1675  - DSP2LMIX Input 3 Volume 
 R1676  - DSP2LMIX Input 4 Source 
 R1677  - DSP2LMIX Input 4 Volume 
 R1678  - DSP2RMIX Input 1 Source 
 R1679  - DSP2RMIX Input 1 Volume 
 R1680  - DSP2RMIX Input 2 Source 
 R1681  - DSP2RMIX Input 2 Volume 
 R1682  - DSP2RMIX Input 3 Source 
 R1683  - DSP2RMIX Input 3 Volume 
 R1684  - DSP2RMIX Input 4 Source 
 R1685  - DSP2RMIX Input 4 Volume 
 R1686  - DSP2AUX1MIX Input 1 Source 
 R1687  - DSP2AUX2MIX Input 1 Source 
 R1688  - DSP2AUX3MIX Input 1 Source 
 R1689  - DSP2AUX4MIX Input 1 Source 
 R1690  - DSP2AUX5MIX Input 1 Source 
 R1691  - DSP2AUX6MIX Input 1 Source 
 R1792  - GPIO CTRL 1 
 R1793  - GPIO CTRL 2 
 R1794  - GPIO CTRL 3 
 R1795  - GPIO CTRL 4 
 R1801  - Misc Pad Ctrl 1 
 R2049  - Interrupt Status 1 Mask 
 R2052  - Interrupt Status 2 Mask 
 R2056  - Interrupt Control 
 R2304  - EQL_1 
 R2305  - EQL_2 
 R2306  - EQL_3 
 R2307  - EQL_4 
 R2308  - EQL_5 
 R2309  - EQL_6 
 R2310  - EQL_7 
 R2311  - EQL_8 
 R2312  - EQL_9 
 R2313  - EQL_10 
 R2314  - EQL_11 
 R2315  - EQL_12 
 R2316  - EQL_13 
 R2317  - EQL_14 
 R2318  - EQL_15 
 R2319  - EQL_16 
 R2320  - EQL_17 
 R2321  - EQL_18 
 R2322  - EQL_19 
 R2323  - EQL_20 
 R2326  - EQR_1 
 R2327  - EQR_2 
 R2328  - EQR_3 
 R2329  - EQR_4 
 R2330  - EQR_5 
 R2331  - EQR_6 
 R2332  - EQR_7 
 R2333  - EQR_8 
 R2334  - EQR_9 
 R2335  - EQR_10 
 R2336  - EQR_11 
 R2337  - EQR_12 
 R2338  - EQR_13 
 R2339  - EQR_14 
 R2340  - EQR_15 
 R2341  - EQR_16 
 R2342  - EQR_17 
 R2343  - EQR_18 
 R2344  - EQR_19 
 R2345  - EQR_20 
 R2366  - HPLPF1_1 
 R2367  - HPLPF1_2 
 R2370  - HPLPF2_1 
 R2371  - HPLPF2_2 
 R2560  - DSP1 Control 1 
 R2562  - DSP1 Control 2 
 R2563  - DSP1 Control 3 
 R2564  - DSP1 Control 4 
 R2566  - DSP1 Control 5 
 R2567  - DSP1 Control 6 
 R2568  - DSP1 Control 7 
 R2569  - DSP1 Control 8 
 R2570  - DSP1 Control 9 
 R2571  - DSP1 Control 10 
 R2572  - DSP1 Control 11 
 R2573  - DSP1 Control 12 
 R2575  - DSP1 Control 13 
 R2576  - DSP1 Control 14 
 R2577  - DSP1 Control 15 
 R2578  - DSP1 Control 16 
 R2579  - DSP1 Control 17 
 R2580  - DSP1 Control 18 
 R2582  - DSP1 Control 19 
 R2583  - DSP1 Control 20 
 R2584  - DSP1 Control 21 
 R2586  - DSP1 Control 22 
 R2587  - DSP1 Control 23 
 R2588  - DSP1 Control 24 
 R2590  - DSP1 Control 25 
 R2592  - DSP1 Control 26 
 R2593  - DSP1 Control 27 
 R2594  - DSP1 Control 28 
 R2595  - DSP1 Control 29 
 R2596  - DSP1 Control 30 
 R2598  - DSP1 Control 31 
 R2816  - DSP2 Control 1 
 R2818  - DSP2 Control 2 
 R2819  - DSP2 Control 3 
 R2820  - DSP2 Control 4 
 R2822  - DSP2 Control 5 
 R2823  - DSP2 Control 6 
 R2824  - DSP2 Control 7 
 R2825  - DSP2 Control 8 
 R2826  - DSP2 Control 9 
 R2827  - DSP2 Control 10 
 R2828  - DSP2 Control 11 
 R2829  - DSP2 Control 12 
 R2831  - DSP2 Control 13 
 R2832  - DSP2 Control 14 
 R2833  - DSP2 Control 15 
 R2834  - DSP2 Control 16 
 R2835  - DSP2 Control 17 
 R2836  - DSP2 Control 18 
 R2838  - DSP2 Control 19 
 R2839  - DSP2 Control 20 
 R2840  - DSP2 Control 21 
 R2842  - DSP2 Control 22 
 R2843  - DSP2 Control 23 
 R2844  - DSP2 Control 24 
 R2846  - DSP2 Control 25 
 R2848  - DSP2 Control 26 
 R2849  - DSP2 Control 27 
 R2850  - DSP2 Control 28 
 R2851  - DSP2 Control 29 
 R2852  - DSP2 Control 30 
 R2854  - DSP2 Control 31 
 Tone 
 AEC 
 Input 
 AIF 
 EQ 
 LHPF1 
 LHPF2 
 DSP1 
 DSP2 
	 Everything needs SYSCLK but only hook up things on the edge
 Data sizes if not using TDM 
 Target BCLK rate 
	 TODO: Check if MCLKs are in use and enabledisable pulls to
	  match.
 Fref must be <=13.5MHz 
 Apply the division for our remaining calculations 
 Fvco should be 90-100MHz; don't check the upper bound 
 Find an appropraite FLL_FRATIO and factor it out of the target 
 Disable the FLL while we reconfigure 
 Clear any pending completions 
 Poll for the lock; will use the interrupt to exit quickly 
 Assign slots 1-6 to channels 1-6 for both TX and RX 
 Apply default for bypass mode 
 SPDX-License-Identifier: GPL-2.0-only
  88pm860x-codec.c -- 88PM860x ALSA SoC Audio Driver
  Copyright 2010 Marvell International Ltd.
  Author: Haojian Zhuang <haojian.zhuang@marvell.com>
 Status Register 1 (0x01) 
 Mic Detection Register (0x37) 
 Headset Detection Register (0x38) 
 Misc2 Register (0x42) 
 PCM Interface Register 2 (0xb1) 
 Bit clock polarity 
 Frame Sync polarity 
 Master  Slave 
 18  16 bits 
 I2S Interface Register 4 (0xbe) 
 DAC Offset Register (0xcb) 
 ADC Analog Register 1 (0xd0) 
 EarpieceSpeaker Control Register 2 (0xda) 
 Audio Supplies Register 2 (0xdc) 
 Audio Enable Register 1 (0xdd) 
 Audio Enable Register 2 (0xde) 
 DAC Enable Register 2 (0xe1) 
 Shorts Register (0xeb) 
  This widget should be just after DAC & PGA in DAPM power-on sequence and
  before DAC & PGA in DAPM power-off sequence.
 -9450dB to 0dB in 150dB steps ( mute instead of -9450dB) 
 -9dB to 0db in 3dB steps 
 {-23, -17, -13.5, -11, -9, -6, -3, 0}dB 
 {0, 0, 0, -6, 0, 6, 12, 18}dB 
 {-16, -13, -10, -7, -5.2, -3,3, -2.2, 0}dB, mute instead of -16dB 
 Sidetone Gain = M  2^(-5-N) 
 DAPM Widget Events 
  A lot registers are belong to RSYNC domain. It requires enabling RSYNC bit
  after updating these registers. Otherwise, these updated registers won't
  be effective.
	
	  In order to avoid current on the load, mute power-on and power-off
	  should be transients.
	  Unmute by DAC_MUTE. It should be unmuted when DAPM sequence is
	  finished.
 Auto mute in power-on sequence. 
 update dac 
 Auto mute in power-off sequence. 
 update dac 
  DAPM Controls
 AUX1 Switch 
 AUX2 Switch 
 Left Ex. PA Switch 
 Right Ex. PA Switch 
 I2S Mux  Mux9 
 I2S Mic Mux  Mux8 
 ADCL Mux  Mux2 
 ADCR Mux  Mux3 
 ADCR EC Mux  Mux6 
 EC Mux  Mux4 
 DAC Headset 1 Mux  Mux10 
 DAC Headset 2 Mux  Mux11 
 DAC Lineout 1 Mux  Mux12 
 DAC Lineout 2 Mux  Mux13 
 DAC Spearker Earphone Mux  Mux14 
 Headset 1 Mux  Mux15 
 Headset 2 Mux  Mux16 
 Lineout 1 Mux  Mux17 
 Lineout 2 Mux  Mux18 
 Speaker Earpiece Demux 
 MIC Mux  Mux1 
 supply 
 I2S Clock 
 PCMAIF1 Inputs 
 PCMAFI2 Outputs 
 I2SAIF2 Inputs 
 I2SAIF2 Outputs 
  Use MUTE_LEFT & MUTE_RIGHT to implement digital mute.
  These bits can also be used to mute.
 bit size 
 sample rate 
 set audio interface clocking 
 Slave mode is not supported 
 bit size 
 sample rate 
 set audio interface clocking 
 Enable Audio PLL & Audio section 
 DAI PCM 
 DAI I2S 
 headset short detect 
 Lineout short detect 
 sync status 
 sync status 
 SPDX-License-Identifier: GPL-2.0-only
  wm8524.c  --  WM8524 ALSA SoC Audio driver
  Copyright 2009 Wolfson Microelectronics plc
  Copyright 2017 NXP
  Based on WM8523 ALSA SoC Audio driver written by Mark Brown
 codec private data 
	 The set of sample rates that can be supported depends on the
	  MCLK supplied to the CODEC - enforce this.
		 Check that it's a standard rate since core can't
		  cope with others and having the odd rates confuses
		  constraint matching.
 Need at least one supported rate... 
 sentinel }
 SPDX-License-Identifier: GPL-2.0
  ALSA SoC TLV320AIC3x codec driver SPI interface
  Author:      Arun KS, <arunks@mistralsolutions.com>
  Copyright:   (C) 2008 Mistral Solutions Pvt Ltd.,
  Based on soundsoccodecswm8731.c by Richard Purdie
 SPDX-License-Identifier: GPL-2.0
 rt700.c -- rt700 ALSA SoC audio driver
 Copyright(c) 2019 Realtek Semiconductor Corp.
 pin attached 
 jack in 
 jack is already in, report button event 
 jack out 
 button released 
 pin attached 
 jack is already in, report button event 
 cbj comparator 
 button released 
 power on 
 Enable Jack Detection 
 power off 
 R Channel 
 L Channel 
 For Verb-Set Amplifier Gain (Verb ID = 3h) 
 Can't use update bit function, so read the original value first 
 output 
 input 
 L Channel 
 for mute 
 keep gain 
 for gain 
 keep mute status 
 R Channel 
 for mute 
 keep gain 
 for gain 
 keep mute status 
 retry 3 times at most 
 Set both LR channels at the same time 
 Lch
 Rch 
 check result 
 output 
 input 
 output 
 input 
 for mute status 
 for gain 
 vid = 0xf01 
 Verb ID = 0x701h 
 Use tx_mask or rx_mask to configure stream tag and set dma_data 
 SoundWire specific configuration 
 This code assumes port 1 for playback and port 2 for capture 
 bit 3:0 Number of Channel 
 bit 6:4 Bits per Sample 
 48Khz 
 Bus clock frequency 
	
	  Mark hw_init to false
	  HW init will be performed when device reports present
	
	  PM runtime is only enabled when a Slave reports as Attached
 set autosuspend parameters 
 update count of parent 'active' children 
 make sure the device does not suspend immediately 
 reset 
 power on 
 Set Pin Widget 
 Set Configuration Default 
 Enable Line2 
 Set index 
 Finish Initial Settings, set power to D3 
	
	  if set_jack callback occurred early than io_init,
	  we set up the jack detection function now
 Mark Slave initialization complete 
 SPDX-License-Identifier: GPL-2.0-only
  cs35l33.c -- CS35L33 ALSA SoC audio driver
  Copyright 2016 Cirrus Logic, Inc.
  Author: Paul Handrigan <paul.handrigan@cirrus.com>
 these are read only registers 
 set sdout_3st_i2s and reset pdn_tdm 
 reset sdout_3st_tdm 
 reset sdout_3st_i2s and set pdn_tdm 
 set sdout_3st_tdm 
 MCLK, Sample Rate, adsp_rate, int_fs_ratio 
		
		  tdm mode in cs35l33 resembles dsp-a mode very
		  closely, it is dsp-a with fsync shifted left by half bclk
 scan rx_mask for aud slot 
	
	  scan tx_mask: vmon(2 slots); imon (2 slots);
	  vpmon (1 slot) vbstmon (1 slot)
 disable vpmonvbstmon: enable later if set in tx_mask 
 disconnect {vp,vbst}_mon routes: eanble later if set in tx_mask
 configure VMON_TX_LOC 
 configure IMON_TX_LOC 
 configure VPMON_TX_LOC 
 configure VBSTMON_TX_LOC 
 Enable the relevant tx slot 
 Boost current in uA 
 Set Platform Data 
 update IMON scaling rate if different from default of 0x8 
	
	  unmask important interrupts that causes the chip to enter
	  speaker safe mode and hence deserves user attention
 redo the calibration in next power up 
	 Check to see if the unmasked bits are active,
	   if not then exit.
 handle the interrupts 
 redo the calibration in next power up 
 use default value 
 use default value 
 We could issue !RST or skip it based on AMP topology 
 initialize codec 
 disable mclk and tdm 
 SPDX-License-Identifier: GPL-2.0
  rt1011.c -- rt1011 ALSA SoC amplifier component driver
  Copyright(c) 2019 Realtek Semiconductor Corp.
  Author: Shuming Fan <shumingf@realtek.com>
 1: recevier mode on 
 0: speaker mode on 
 write R0 to register 
 2^24  128 
 I2S Data In Selection 
 TDM Data In Selection 
 TDM1 Data Out Selection 
 Data Out Mode 
 SpeakerReceiver Mode 
 BiQuadDRCSmartBoost Settings 
 R0 
 R0 temperature 
 I2S Reference 
 Audio Interface 
 Digital Interface 
 Output Lines 
 disable MCLK detect in default 
 Rx slot configuration 
 Tx slot configuration 
 DONT change this 
 RC clock 
 ADCDAC setting 
 DC detection 
 Power 
 POW_PLL  POW_BG  POW_BG_MBIAS_LV  POW_VI 
 DC offset from EFUSE 
 mixer 
 EFUSE read 
 Class D on 
 STP enable 
 2^24  128 
 depop 
	
	  This flag should reset after booting.
	  The factory test will do calibration again and use this flag to check
	  whether the calibration completed
 initial 
 Apply temperature and calibration data from device property 
 2^24  128 
 SPDX-License-Identifier: GPL-2.0-only
 uda1334.c  --  UDA1334 ALSA SoC Audio driver
 Based on WM8523 ALSA SoC Audio driver written by Mark Brown
 codec private data 
	
	  The set of sample rates that can be supported depends on the
	  MCLK supplied to the CODEC - enforce this.
		
		  Check that it's a standard rate since core can't
		  cope with others and having the odd rates confuses
		  constraint matching.
 Need at least one supported rate... 
 sentinel }
 SPDX-License-Identifier: GPL-2.0-only
  wm5110.c  --  WM5110 ALSA SoC Audio driver
  Copyright 2012 Wolfson Microelectronics plc
  Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
 Enables are channel wise swapped from the DRE enables 
 Force reset of PGA volumes, if turning DRE off 
	
	  PGA Volume is also used as part of the enable sequence, so
	  usage of it should be avoided whilst that is running.
	
	  PGA Volume is also used as part of the enable sequence, so
	  usage of it should be avoided whilst that is running.
 This may return -EPROBE_DEFER, so do this early on 
 SR2 fixed at 8kHz, SR3 fixed at 16kHz 
 Latch volume update bits 
 SPDX-License-Identifier: GPL-2.0-only
  wm8350.c -- WM8350 ALSA SoC audio driver
  Copyright (C) 2007-12 Wolfson Microelectronics PLC.
  Author: Liam Girdwood <lrg@slimlogic.co.uk>
 We only include the analogue supplies here; the digital supplies
  need to be available well before this driver can be probed.
  Ramp OUT1 PGA volume to minimise pops at stream startup and shutdown.
 left channel 
 ramp step up 
 ramp step down 
 right channel 
 ramp step up 
 ramp step down 
 only hit the update bit if either volume has changed this step 
  Ramp OUT2 PGA volume to minimise pops at stream startup and shutdown.
 left channel 
 ramp step up 
 ramp step down 
 right channel 
 ramp step up 
 ramp step down 
 only hit the update bit if either volume has changed this step 
  This work ramps both output PGAs at stream startstop time to
  minimise pop associated with DAPM power switching.
  It's best to enable Zero Cross when ramping occurs to minimise any
  zipper noises.
 do we need to ramp at all ? 
 PGA volumes have 6 bits of resolution to ramp 
 ramp finished ? 
 we need to delay longer on the up ramp 
 delay is longer over 0dB as increases are larger 
 doesn't matter if we delay longer 
  WM8350 Controls
	 For OUT1 and OUT2 we shadow the values and only actually write
	  them out when active in order to ensure the amplifier comes on
 now hit the volume update bits (always bit 8) 
 If these are cached registers use the cache 
  DAPM Controls
 Left Playback Mixer 
 Right Playback Mixer 
 Out4 Mixer 
 Out3 Mixer 
 Left Input Mixer 
 Right Input Mixer 
 Left Mic Mixer 
 Right Mic Mixer 
 Beep Switch 
 Out4 Capture Mux 
 virtual mixer for Beep and Out2R 
 left playback mixer 
 right playback mixer 
 out4 playback mixer 
 out3 playback mixer 
 out2 
 out1 
 ADCs 
 Left capture mixer 
 Right capture mixer 
 L3 Inputs 
 Left Mic mixer 
 Right Mic mixer 
 out 4 capture 
 Beep 
 MCLK direction 
 set masterslave audio interface 
 interface format 
 clock inversion 
 bit size 
	 The sloping stopband filter is recommended for use with
	  lower sample rates to improve performance.
 FLL divisors 
 FLL_OUTDIV 
 FLL_FRATIO 
 The size in bits of the fll divide multiplied by 10
 Check if we need to round 
 Move down to proper range now rounding is done 
 power down FLL - we need to do this for reconfiguration 
 set up N.K & dividers 
 power FLL on 
 Enable the system clock 
 mute DAC & outputs 
 discharge cap memory 
 wait for discharge 
 enable antipop 
 ramp up vmid 
 wait for vmid 
 turn on vmid 300k  
 enable analogue bias 
 disable antipop 
 turn on vmid 300k and reduce current 
 mute DAC & enable outputs 
 enable anti pop S curve 
 turn off vmid  
 wait 
 turn off VBuf and drain 
 wait 
 disable anti-pop 
 disable clock gen 
  wm8350_hp_jack_detect - Enable headphone jack detection.
  @component:  WM8350 component
  @which:  left or right jack detect signal
  @jack:   jack to report detection events on
  @report: value to report
  Enables the headphone jack detection of the WM8350.  If no report
  is specified then detection is disabled.
 Sync status 
  wm8350_mic_jack_detect - Enable microphone jack detection.
  @component:         WM8350 component
  @jack:          jack to report detection events on
  @detect_report: value to report when presence detected
  @short_report:  value to report when microphone short detected
  Enables the microphone jack detection of the WM8350.  If both reports
  are specified as zero then detection is disabled.
 Put the codec into reset if it wasn't already 
 Enable the codec 
 Enable robust clocking mode in ADC 
 read OUT1 & OUT2 volumes 
 Latch VU bits & mute 
 Make sure AIF tristating is disabled by default 
 Make sure we've got a sane companding setup too 
 Make sure jack detect is disabled to start off with 
	 if there was any work waiting then we run it now and
 SPDX-License-Identifier: GPL-2.0-only
  wm8940.c  --  WM8940 ALSA Soc Audio driver
  Author: Jonathan Cameron <jic23@cam.ac.uk>
  Based on wm8510.c
     Copyright  2006 Wolfson Microelectronics PLC.
     Author:  Liam Girdwood <lrg@slimlogic.co.uk>
  Not currently handled:
  Notch filter control
  AUXMode (inverting vs mixer)
  No means to obtain current gain if alc enabled.
  No use made of gpio
  Fast VMID discharge for power down
  Soft Start
  DLR and ALR Swaps not enabled
  Digital Sidetone not supported
 Power 1 
 Power 2 
 Power 3 
 Interface Control 
 Companding Control 
 Clock Control 
 Additional Controls 
 GPIO Control 
 Auto Increment Control 
 DAC Control 
 DAC Volume 
 ADC Control 
 ADC Volume 
 Notch Filter 1 Control 1 
 Notch Filter 1 Control 2 
 Notch Filter 2 Control 1 
 Notch Filter 2 Control 2 
 Notch Filter 3 Control 1 
 Notch Filter 3 Control 2 
 Notch Filter 4 Control 1 
 Notch Filter 4 Control 2 
 DAC Limit Control 1 
 DAC Limit Control 2 
 ALC Control 1 
 ALC Control 2 
 ALC Control 3 
 Noise Gate 
 PLLN 
 PLLK1 
 PLLK2 
 PLLK3 
 ALC Control 4 
 Input Control 
 PGA Gain 
 ADC Boost Control 
 Output Control 
 Speaker Mixer Control 
 Speaker Volume 
 Mono Mixer Control 
 Mono output mixer 
 Speaker output mixer 
 Outputs 
  Microphone PGA 
 Boost Mixer 
 LoutR control 
 ensure bufioen and biasen 
 Enable thermal shutdown 
 set vmid to 75k 
 ensure bufioen and biasen 
 ensure bufioen and biasen 
 set vmid to 300k for standby 
 The size in bits of the pll divide multiplied by 10
 The left shift ist to avoid accuracy loss when right shifting 
 Multiply by 2 
 Divide by 4 
 divide by 2 
 Check if we need to round 
 Move down to proper range now rounding is done 
 Untested at the moment 
 Turn off PLL 
 Clock CODEC directly from MCLK 
 Pll power down 
 Pll is followed by a frequency divide by 4 
 No factional component 
 Enable the PLL 
 Run CODEC from PLL instead of MCLK 
 SPDX-License-Identifier: GPL-2.0-only
  wm5100.c  --  WM5100 ALSA SoC Audio driver
  Copyright 2011-2 Wolfson Microelectronics plc
  Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
 If DCVDD is supplied externally specify as LDOVDD 
 codec private data 
 Is this rate already in use? 
 Tone 
 AEC 
 Input 
 AIF 
 AIF3 - check 
 EQ 
 DRC 
 LHPF1 
 LHPF2 
 LHPF3 
 LHPF4 
 DSP1 
 DSP2 
 DSP3 
 ASRC1 
 ASRC2 
 ISRC1DEC1 
 ISRC1INT1 
 ISRC2DEC1 
 ISRC2INT1 
 Only applicable for analogue inputs 
 FIXME: Only valid from -12dB to 0dB (52-64) 
 Wait for the outputs to flag themselves as enabled 
 We register a _POST event if we don't have IRQ support so we can
  look at the error status from the CODEC - if we've got the IRQ
  hooked up then we will get prompted to look by an interrupt.
 Data sizes if not using TDM 
 Target BCLK rate 
 Root for BCLK depends on SYSASYNCCLK 
 If we're in ASYNCCLK set the ASYNC sample rate 
 TODO: We should really check for symmetry 
 The 32kHz clock is slightly different to the others 
 Not real clocks, record which clock domain they're in 
	 TODO: Check if MCLKs are in use and enabledisable pulls to
	  match.
	 If this is SYSCLK then configure the clock rate for the
	  internal audio functions to the natural sample rate for
	  this clock rate.
 Fref must be <=13.5MHz 
 Apply the division for our remaining calculations 
 Fvco should be 90-100MHz; don't check the upper bound 
 Find an appropraite FLL_FRATIO and factor it out of the target 
 Disable the FLL while we reconfigure 
 Clear any pending completions 
 Poll for the lock; will use interrupt when we can test 
 Actually go much higher 
 Increase the detection rate a bit for responsiveness. 
 No accessory, reset everything and report removal 
	 If the measurement is very high we've got a microphone,
	  either we just detected one or if we already reported then
	  we've got a button release event.
			 Increase poll rate to give better responsiveness
	 If we detected a lower impedence during initial startup
	  then we probably have the wrong polarity, flip it.  Don't
	  do this for the lowest impedences to speed up detection of
	  plain headphones and give up if neither polarity looks
	  sensible.
	 Don't distinguish between buttons, just report any low
	  impedence as BTN_0.
		 Slowest detection rate, gives debounce for initial
 We need the charge pump to power MICBIAS 
		 We start off just enabling microphone detection - even a
		  plain headphone will trigger detection.
 Don't debounce interrupts to support use of SYSCLK only 
 TODO: check if we're symmetric 
 Enable default interrupts 
 SPDX-License-Identifier: GPL-2.0
  Texas Instruments PCM186x Universal Audio ADC
  Copyright (C) 2015-2017 Texas Instruments Incorporated - https:www.ti.com
 	Andreas Dannenberg <dannenberg@ti.com>
 	Andrew F. Davis <afd@ti.com>
 Analog power supply. Connect to 3.3-V supply. 
 Digital power supply. Connect to 3.3-V supply. 
 IO power supply. Connect to 3.3-V or 1.8-V. 
 Default for ADC1L 
 Default for ADC2L 
 Default for ADC1R 
 Default for ADC2R 
	
	  Put the codec into SLEEP mode when not in use, allowing the
	  Energysense mechanism to operate.
	
	  Put the codec into SLEEP mode when not in use, allowing the
	  Energysense mechanism to operate.
 Select TDM transmission data 
 In DSPTDM mode, the LRCLK divider must be 256 
 Configure 1256 duty cycle for LRCK 
 Only configure clock dividers in master mode. 
 set masterslave audio interface 
 set interface polarity 
 set interface format 
		 DSP_A uses the same basic config as DSP_B
		  except we need to shift the TDM output by one BCK cycle
 Reset device registers for a consistent power-on like state 
 SPDX-License-Identifier: GPL-2.0-only
  wm8997.c  --  WM8997 ALSA SoC Audio driver
  Copyright 2012 Wolfson Microelectronics plc
  Author: Charles Keepax <ckeepax@opensource.wolfsonmicro.com>
 This may return -EPROBE_DEFER, so do this early on 
 SR2 fixed at 8kHz, SR3 fixed at 16kHz 
 Latch volume update bits 
 SPDX-License-Identifier: GPL-2.0
  rt715.c -- rt715 ALSA SoC audio driver
  Copyright(c) 2019 Realtek Semiconductor Corp.
  ALC715 ASoC Codec Driver based Intel Dummy SdW codec driver
 R Channel 
 L Channel 
 For Verb-Set Amplifier Gain (Verb ID = 3h) 
 Can't use update bit function, so read the original value first 
 output 
 input 
 L Channel 
 for gain 
 keep mute status 
 R Channel 
 for gain 
 keep mute status 
 retry 3 times at most 
 Set both LR channels at the same time 
 Lch
 Rch 
 check result 
 output 
 input 
 D0:power on state, D3: power saving mode 
 output 
 input 
 for mute status 
 for gain 
 Can't use update bit function, so read the original value first 
 L Channel 
 for mute 
 keep gain 
 R Channel 
 for mute 
 keep gain 
 retry 3 times at most 
 Set both LR channels at the same time 
 Lch
 Rch 
 D0:power on state, D3: power saving mode 
 L Channel 
 for gain 
 keep mute status 
 R Channel 
 for gain 
 keep mute status 
 retry 3 times at most 
 Set both LR channels at the same time 
 Lch
 Rch 
 D0:power on state, D3: power saving mode 
 Capture switch 
 Volume Control 
 MIC Boost Control 
 nid = e->reg, vid = 0xf01 
	
	  The first two indices of ADC Mux 2425 are routed to the same
	  hardware source. ie, ADC Mux 24 01 will both connect to MIC2.
	  To have a unique set of inputs, we skip the index1 of the muxes.
 Verb ID = 0x701h, nid = e->reg 
  Due to mux design for nid 24 (MUX_IN3)25 (MUX_IN4), connection index 0 and
  1 will be connected to the same dmic source, therefore we skip index 1 to
  avoid misunderstanding on usage of dapm routing.
 Use tx_mask or rx_mask to configure stream tag and set dma_data 
 bit 14 0:48K 1:44.1K 
 bit 15 Stream Type 0:PCM 1:Non-PCM, should always be PCM 
 bit 3:0 Number of Channel 
 bit 6:4 Bits per Sample 
 Bus clock frequency 
	
	  Mark hw_init to false
	  HW init will be performed when device reports present
	
	  PM runtime is only enabled when a Slave reports as Attached
 set autosuspend parameters 
 update count of parent 'active' children 
 make sure the device does not suspend immediately 
 Mute nid=08h09h 
 Mute nid=07h27h 
 Set Pin Widget 
 Set Converter Stream 
 Set Configuration Default 
 Finish Initial Settings, set power to D3 
 Mark Slave initialization complete 
 SPDX-License-Identifier: GPL-2.0
 JZ4725B CODEC driver
 Copyright (C) 2019, Paul Cercueil <paul@crapouillou.net>
 ICDC internal register access control register(RGADW) 
 ICDC internal register data output register (RGDATA)
 JZ internal register space 
 DAC 
 ADC 
 Mixer 
 Pins 
 Enable sound hardware 
	 Write CONFIGn (n=1 to 8) bits.
	  The value 0x0f is specified in the datasheet as a requirement.
 wait 6+ cycles 
 SPDX-License-Identifier: GPL-2.0-or-later
  ak4671.c  --  audio driver for AK4671
  Copyright (C) 2009 Samsung Electronics Co.Ltd
  Author: Joonyoung Shim <jy0922.shim@samsung.com>
 ak4671 register cache & default register settings 
 AK4671_AD_DA_POWER_MANAGEMENT	(0x00)	
 AK4671_PLL_MODE_SELECT0		(0x01)	
 AK4671_PLL_MODE_SELECT1		(0x02)	
 AK4671_FORMAT_SELECT			(0x03)	
 AK4671_MIC_SIGNAL_SELECT		(0x04)	
 AK4671_MIC_AMP_GAIN			(0x05)	
 AK4671_MIXING_POWER_MANAGEMENT0	(0x06)	
 AK4671_MIXING_POWER_MANAGEMENT1	(0x07)	
 AK4671_OUTPUT_VOLUME_CONTROL		(0x08)	
 AK4671_LOUT1_SIGNAL_SELECT		(0x09)	
 AK4671_ROUT1_SIGNAL_SELECT		(0x0a)	
 AK4671_LOUT2_SIGNAL_SELECT		(0x0b)	
 AK4671_ROUT2_SIGNAL_SELECT		(0x0c)	
 AK4671_LOUT3_SIGNAL_SELECT		(0x0d)	
 AK4671_ROUT3_SIGNAL_SELECT		(0x0e)	
 AK4671_LOUT1_POWER_MANAGERMENT	(0x0f)	
 AK4671_LOUT2_POWER_MANAGERMENT	(0x10)	
 AK4671_LOUT3_POWER_MANAGERMENT	(0x11)	
 AK4671_LCH_INPUT_VOLUME_CONTROL	(0x12)	
 AK4671_RCH_INPUT_VOLUME_CONTROL	(0x13)	
 AK4671_ALC_REFERENCE_SELECT		(0x14)	
 AK4671_DIGITAL_MIXING_CONTROL	(0x15)	
 AK4671_ALC_TIMER_SELECT		(0x16)	
 AK4671_ALC_MODE_CONTROL		(0x17)	
 AK4671_MODE_CONTROL1			(0x18)	
 AK4671_MODE_CONTROL2			(0x19)	
 AK4671_LCH_OUTPUT_VOLUME_CONTROL	(0x1a)	
 AK4671_RCH_OUTPUT_VOLUME_CONTROL	(0x1b)	
 AK4671_SIDETONE_A_CONTROL		(0x1c)	
 AK4671_DIGITAL_FILTER_SELECT		(0x1d)	
 AK4671_FIL3_COEFFICIENT0		(0x1e)	
 AK4671_FIL3_COEFFICIENT1		(0x1f)	
 AK4671_FIL3_COEFFICIENT2		(0x20)	
 AK4671_FIL3_COEFFICIENT3		(0x21)	
 AK4671_EQ_COEFFICIENT0		(0x22)	
 AK4671_EQ_COEFFICIENT1		(0x23)	
 AK4671_EQ_COEFFICIENT2		(0x24)	
 AK4671_EQ_COEFFICIENT3		(0x25)	
 AK4671_EQ_COEFFICIENT4		(0x26)	
 AK4671_EQ_COEFFICIENT5		(0x27)	
 AK4671_FIL1_COEFFICIENT0		(0x28)	
 AK4671_FIL1_COEFFICIENT1		(0x29)	
 AK4671_FIL1_COEFFICIENT2		(0x2a)	
 AK4671_FIL1_COEFFICIENT3		(0x2b)	
 AK4671_FIL2_COEFFICIENT0		(0x2c)	
 AK4671_FIL2_COEFFICIENT1		(0x2d)	
 AK4671_FIL2_COEFFICIENT2		(0x2e)	
 AK4671_FIL2_COEFFICIENT3		(0x2f)	
 AK4671_DIGITAL_FILTER_SELECT2	(0x30)	
 AK4671_E1_COEFFICIENT0		(0x32)	
 AK4671_E1_COEFFICIENT1		(0x33)	
 AK4671_E1_COEFFICIENT2		(0x34)	
 AK4671_E1_COEFFICIENT3		(0x35)	
 AK4671_E1_COEFFICIENT4		(0x36)	
 AK4671_E1_COEFFICIENT5		(0x37)	
 AK4671_E2_COEFFICIENT0		(0x38)	
 AK4671_E2_COEFFICIENT1		(0x39)	
 AK4671_E2_COEFFICIENT2		(0x3a)	
 AK4671_E2_COEFFICIENT3		(0x3b)	
 AK4671_E2_COEFFICIENT4		(0x3c)	
 AK4671_E2_COEFFICIENT5		(0x3d)	
 AK4671_E3_COEFFICIENT0		(0x3e)	
 AK4671_E3_COEFFICIENT1		(0x3f)	
 AK4671_E3_COEFFICIENT2		(0x40)	
 AK4671_E3_COEFFICIENT3		(0x41)	
 AK4671_E3_COEFFICIENT4		(0x42)	
 AK4671_E3_COEFFICIENT5		(0x43)	
 AK4671_E4_COEFFICIENT0		(0x44)	
 AK4671_E4_COEFFICIENT1		(0x45)	
 AK4671_E4_COEFFICIENT2		(0x46)	
 AK4671_E4_COEFFICIENT3		(0x47)	
 AK4671_E4_COEFFICIENT4		(0x48)	
 AK4671_E4_COEFFICIENT5		(0x49)	
 AK4671_E5_COEFFICIENT0		(0x4a)	
 AK4671_E5_COEFFICIENT1		(0x4b)	
 AK4671_E5_COEFFICIENT2		(0x4c)	
 AK4671_E5_COEFFICIENT3		(0x4d)	
 AK4671_E5_COEFFICIENT4		(0x4e)	
 AK4671_E5_COEFFICIENT5		(0x4f)	
 AK4671_EQ_CONTROL_250HZ_100HZ	(0x50)	
 AK4671_EQ_CONTROL_3500HZ_1KHZ	(0x51)	
 AK4671_EQ_CONTRO_10KHZ		(0x52)	
 AK4671_PCM_IF_CONTROL0		(0x53)	
 AK4671_PCM_IF_CONTROL1		(0x54)	
 AK4671_PCM_IF_CONTROL2		(0x55)	
 AK4671_DIGITAL_VOLUME_B_CONTROL	(0x56)	
 AK4671_DIGITAL_VOLUME_C_CONTROL	(0x57)	
 AK4671_SIDETONE_VOLUME_CONTROL	(0x58)	
 AK4671_DIGITAL_MIXING_CONTROL2	(0x59)	
 AK4671_SAR_ADC_CONTROL		(0x5a)	
  LOUT1ROUT1 output volume control:
  from -24 to 6 dB in 6 dB steps (mute instead of -30 dB)
  LOUT2ROUT2 output volume control:
  from -33 to 6 dB in 3 dB steps (mute instead of -33 dB)
  LOUT3ROUT3 output volume control:
  from -6 to 3 dB in 3 dB steps
  Mic amp gain control:
  from -15 to 30 dB in 3 dB steps
  REVISIT: The actual min value(0x01) is -12 dB and the reg value 0x00 is not
  available
 Common playback gain controls 
 Common capture gain controls 
 event handlers 
 Output Mixers 
 Input MUXs 
 Inputs 
 Outputs 
 DAC 
 ADC 
 PGA 
 Output Mixers 
 Input MUXs 
 Mic Power 
 Supply 
 Outputs 
 Inputs 
 Analog Loops 
 set masterslave audio interface 
 interface format 
 set mode and format 
 SPDX-License-Identifier: GPL-2.0-only
  max98090.c -- MAX98090 ALSA SoC Audio driver
  Copyright 2011-2012 Maxim Integrated Products
 Allows for sparsely populated register maps 
 00 Software Reset 
 03 Interrupt Masks 
 04 System Clock Quick 
 05 Sample Rate Quick 
 06 DAI Interface Quick 
 07 DAC Path Quick 
 08 MicDirect to ADC Quick 
 09 Line to ADC Quick 
 0A Analog Mic Loop Quick 
 0B Analog Line Loop Quick 
 0C Reserved 
 0D Input Config 
 0E Line Input Level 
 0F Line Config 
 10 Mic1 Input Level 
 11 Mic2 Input Level 
 12 Mic Bias Voltage 
 13 Digital Mic Config 
 14 Digital Mic Mode 
 15 Left ADC Mixer 
 16 Right ADC Mixer 
 17 Left ADC Level 
 18 Right ADC Level 
 19 ADC Biquad Level 
 1A ADC Sidetone 
 1B System Clock 
 1C Clock Mode 
 1D Any Clock 1 
 1E Any Clock 2 
 1F Any Clock 3 
 20 Any Clock 4 
 21 Master Mode 
 22 Interface Format 
 23 TDM Format 1
 24 TDM Format 2
 25 IO Configuration 
 26 Filter Config 
 27 DAI Playback Level 
 28 EQ Playback Level 
 29 Left HP Mixer 
 2A Right HP Mixer 
 2B HP Control 
 2C Left HP Volume 
 2D Right HP Volume 
 2E Left Spk Mixer 
 2F Right Spk Mixer 
 30 Spk Control 
 31 Left Spk Volume 
 32 Right Spk Volume 
 33 ALC Timing 
 34 ALC Compressor 
 35 ALC Expander 
 36 ALC Gain 
 37 RcvLine OutL Mixer 
 38 RcvLine OutL Control 
 39 RcvLine OutL Volume 
 3A Line OutR Mixer 
 3B Line OutR Control 
 3C Line OutR Volume 
 3D Jack Detect 
 3E Input Enable 
 3F Output Enable 
 40 Level Control 
 41 DSP Filter Enable 
 42 Bias Control 
 43 DAC Control 
 44 ADC Control 
 45 Device Shutdown 
 46 Equalizer Band 1 Coefficient B0 
 47 Equalizer Band 1 Coefficient B0 
 48 Equalizer Band 1 Coefficient B0 
 49 Equalizer Band 1 Coefficient B1 
 4A Equalizer Band 1 Coefficient B1 
 4B Equalizer Band 1 Coefficient B1 
 4C Equalizer Band 1 Coefficient B2 
 4D Equalizer Band 1 Coefficient B2 
 4E Equalizer Band 1 Coefficient B2 
 4F Equalizer Band 1 Coefficient A1 
 50 Equalizer Band 1 Coefficient A1 
 51 Equalizer Band 1 Coefficient A1 
 52 Equalizer Band 1 Coefficient A2 
 53 Equalizer Band 1 Coefficient A2 
 54 Equalizer Band 1 Coefficient A2 
 55 Equalizer Band 2 Coefficient B0 
 56 Equalizer Band 2 Coefficient B0 
 57 Equalizer Band 2 Coefficient B0 
 58 Equalizer Band 2 Coefficient B1 
 59 Equalizer Band 2 Coefficient B1 
 5A Equalizer Band 2 Coefficient B1 
 5B Equalizer Band 2 Coefficient B2 
 5C Equalizer Band 2 Coefficient B2 
 5D Equalizer Band 2 Coefficient B2 
 5E Equalizer Band 2 Coefficient A1 
 5F Equalizer Band 2 Coefficient A1 
 60 Equalizer Band 2 Coefficient A1 
 61 Equalizer Band 2 Coefficient A2 
 62 Equalizer Band 2 Coefficient A2 
 63 Equalizer Band 2 Coefficient A2 
 64 Equalizer Band 3 Coefficient B0 
 65 Equalizer Band 3 Coefficient B0 
 66 Equalizer Band 3 Coefficient B0 
 67 Equalizer Band 3 Coefficient B1 
 68 Equalizer Band 3 Coefficient B1 
 69 Equalizer Band 3 Coefficient B1 
 6A Equalizer Band 3 Coefficient B2 
 6B Equalizer Band 3 Coefficient B2 
 6C Equalizer Band 3 Coefficient B2 
 6D Equalizer Band 3 Coefficient A1 
 6E Equalizer Band 3 Coefficient A1 
 6F Equalizer Band 3 Coefficient A1 
 70 Equalizer Band 3 Coefficient A2 
 71 Equalizer Band 3 Coefficient A2 
 72 Equalizer Band 3 Coefficient A2 
 73 Equalizer Band 4 Coefficient B0 
 74 Equalizer Band 4 Coefficient B0 
 75 Equalizer Band 4 Coefficient B0 
 76 Equalizer Band 4 Coefficient B1 
 77 Equalizer Band 4 Coefficient B1 
 78 Equalizer Band 4 Coefficient B1 
 79 Equalizer Band 4 Coefficient B2 
 7A Equalizer Band 4 Coefficient B2 
 7B Equalizer Band 4 Coefficient B2 
 7C Equalizer Band 4 Coefficient A1 
 7D Equalizer Band 4 Coefficient A1 
 7E Equalizer Band 4 Coefficient A1 
 7F Equalizer Band 4 Coefficient A2 
 80 Equalizer Band 4 Coefficient A2 
 81 Equalizer Band 4 Coefficient A2 
 82 Equalizer Band 5 Coefficient B0 
 83 Equalizer Band 5 Coefficient B0 
 84 Equalizer Band 5 Coefficient B0 
 85 Equalizer Band 5 Coefficient B1 
 86 Equalizer Band 5 Coefficient B1 
 87 Equalizer Band 5 Coefficient B1 
 88 Equalizer Band 5 Coefficient B2 
 89 Equalizer Band 5 Coefficient B2 
 8A Equalizer Band 5 Coefficient B2 
 8B Equalizer Band 5 Coefficient A1 
 8C Equalizer Band 5 Coefficient A1 
 8D Equalizer Band 5 Coefficient A1 
 8E Equalizer Band 5 Coefficient A2 
 8F Equalizer Band 5 Coefficient A2 
 90 Equalizer Band 5 Coefficient A2 
 91 Equalizer Band 6 Coefficient B0 
 92 Equalizer Band 6 Coefficient B0 
 93 Equalizer Band 6 Coefficient B0 
 94 Equalizer Band 6 Coefficient B1 
 95 Equalizer Band 6 Coefficient B1 
 96 Equalizer Band 6 Coefficient B1 
 97 Equalizer Band 6 Coefficient B2 
 98 Equalizer Band 6 Coefficient B2 
 99 Equalizer Band 6 Coefficient B2 
 9A Equalizer Band 6 Coefficient A1 
 9B Equalizer Band 6 Coefficient A1 
 9C Equalizer Band 6 Coefficient A1 
 9D Equalizer Band 6 Coefficient A2 
 9E Equalizer Band 6 Coefficient A2 
 9F Equalizer Band 6 Coefficient A2 
 A0 Equalizer Band 7 Coefficient B0 
 A1 Equalizer Band 7 Coefficient B0 
 A2 Equalizer Band 7 Coefficient B0 
 A3 Equalizer Band 7 Coefficient B1 
 A4 Equalizer Band 7 Coefficient B1 
 A5 Equalizer Band 7 Coefficient B1 
 A6 Equalizer Band 7 Coefficient B2 
 A7 Equalizer Band 7 Coefficient B2 
 A8 Equalizer Band 7 Coefficient B2 
 A9 Equalizer Band 7 Coefficient A1 
 AA Equalizer Band 7 Coefficient A1 
 AB Equalizer Band 7 Coefficient A1 
 AC Equalizer Band 7 Coefficient A2 
 AD Equalizer Band 7 Coefficient A2 
 AE Equalizer Band 7 Coefficient A2 
 AF ADC Biquad Coefficient B0 
 B0 ADC Biquad Coefficient B0 
 B1 ADC Biquad Coefficient B0 
 B2 ADC Biquad Coefficient B1 
 B3 ADC Biquad Coefficient B1 
 B4 ADC Biquad Coefficient B1 
 B5 ADC Biquad Coefficient B2 
 B6 ADC Biquad Coefficient B2 
 B7 ADC Biquad Coefficient B2 
 B8 ADC Biquad Coefficient A1 
 B9 ADC Biquad Coefficient A1 
 BA ADC Biquad Coefficient A1 
 BB ADC Biquad Coefficient A2 
 BC ADC Biquad Coefficient A2 
 BD ADC Biquad Coefficient A2 
 BE Digital Mic 3 Volume 
 BF Digital Mic 4 Volume 
 C0 Digital Mic 34 Biquad Pre Atten 
 C1 Record TDM Slot 
 C2 Sample Rate 
 C3 Digital Mic 34 Biquad Coefficient C3 
 C4 Digital Mic 34 Biquad Coefficient C4 
 C5 Digital Mic 34 Biquad Coefficient C5 
 C6 Digital Mic 34 Biquad Coefficient C6 
 C7 Digital Mic 34 Biquad Coefficient C7 
 C8 Digital Mic 34 Biquad Coefficient C8 
 C9 Digital Mic 34 Biquad Coefficient C9 
 CA Digital Mic 34 Biquad Coefficient CA 
 CB Digital Mic 34 Biquad Coefficient CB 
 CC Digital Mic 34 Biquad Coefficient CC 
 CD Digital Mic 34 Biquad Coefficient CD 
 CE Digital Mic 34 Biquad Coefficient CE 
 CF Digital Mic 34 Biquad Coefficient CF 
 D0 Digital Mic 34 Biquad Coefficient D0 
 D1 Digital Mic 34 Biquad Coefficient D1 
 Reset the codec by writing to this write-only reset register 
 If on, return the volume 
 If off, return last stored value 
 Setting a volume is only valid if it is already On 
 Write what was already there 
 Update for volatile 
 Update for volatile 
 If turning on, set to most recently selected volume 
 If turning off, turn off 
 LINEA mixer switch 
 LINEB mixer switch 
 Left ADC mixer switch 
 Right ADC mixer switch 
 Left speaker mixer switch 
 Right speaker mixer switch 
 Left headphone mixer switch 
 Right headphone mixer switch 
 Left receiver mixer switch 
 Right receiver mixer switch 
  This is a mux as it selects the HP output, but to DAPM it is a Mixer enable
  Note: Sysclk and misc power supplies are taken care of by SHDN
 MIC1 input mux 
 MIC2 input mux 
 Left ADC input mixer 
 Right ADC input mixer 
 Line A input mixer 
 Line B input mixer 
 Inputs 
 Left headphone output mixer 
 Right headphone output mixer 
 Left speaker output mixer 
 Right speaker output mixer 
 Left Receiver output mixer 
 Right Receiver output mixer 
	
	  Disable this for lowest power if bypassing
	  the DAC with an analog signal
	
	  Disable this for lowest power if bypassing
	  the DAC with an analog signal
 DMIC inputs 
 Skip configuration when operating as slave 
 Check for supported PCLK to LRCLK ratios 
 Check for user calculated MI and NI ratios 
	
	  Calculate based on MI = 65536 (not as good as either method above)
	
	  Configure NI when operating as master
	  Note: There is a small, but significant audio quality improvement
	  by calculating ni and mi.
 Set to slave mode PLL - MAS mode off 
 Set to master mode 
 TDM 
 TDM 
 Few TDM slots, or No TDM 
 Not supported mode 
		
		  This accommodates an inverted logic in the MAX98090 chip
		  for Bit Clock Invert (BCI). The inverted logic is only
		  seen for the case of TDM mode. The remaining cases have
		  normal logic.
 SLOTL SLOTR SLOTDLY 
 FSW TDM 
	
	  Normally advisable to set TDM first, but this permits either order
		
		  SND_SOC_BIAS_PREPARE is called while preparing for a
		  transition to ON or away from ON. If current bias_level
		  is SND_SOC_BIAS_ON, then it is preparing for a transition
		  away from ON. Disable the clock in that case, otherwise
		  enable it.
 Set internal pull-up to lowest power mode 
 One each for 8, 16, 32, 44.1, 48, and 96 kHz 
 One for each dmic divisor. 
 One for each pclk freq. 
 Remove 24-bit format support if it is not in right justified mode. 
 Update filter mode 
 Update sample rate mode 
  PLL  Sysclk
 Requested clock frequency is already setup 
	 Setup clocks for slave mode, and using the PLL
	  PSCLK = 0x01 (when master clk is 10MHz to 20MHz)
	 		 0x02 (when master clk is 20MHz to 40MHz)..
	 		 0x03 (when master clk is 40MHz to 60MHz)..
	
	  Clear status register in order to clear possibly already occurred
	  PLL unlock. If PLL hasn't still locked, the status will be set
	  again and PLL unlock interrupt will occur.
	  Note this will clear all status bits
	
	  Queue jack work in case jack state has just changed but handler
	  hasn't run yet
 Enable PLL unlock interrupt 
 Disable PLL unlock interrupt 
	
	  As the datasheet suggested, the maximum PLL lock time should be
	  7 msec.  The workaround resets the codec softly by toggling SHDN
	  off and on if PLL failed to lock for 10 msec.  Notably, there is
	  no suggested hold time for SHDN off.
 Toggle shutdown OFF then ON 
 Give PLL time to lock 
 Check lock status 
 Read a second time 
 Strong pull up allows mic detection 
 Weak pull up allows only insertion detection 
				
				  max98090_headset_button_event(codec)
				  could be defined, then called here.
 Line is reported as Headphone 
 Nokia Headset is reported as Headphone 
 Mono Headphone is reported as Headphone 
 Treat interrupt before codec is initialized as spurious 
  max98090_mic_detect - Enable microphone detection via the MAX98090 IRQ
  @component:  MAX98090 component
  @jack:   jack to report detection events on
  Enable microphone detection via IRQ on the MAX98090.  If GPIOs are
  being used to bring out signals to the processor then only platform
  data configuration is needed for MAX98090 and processor GPIOs should
  be configured using snd_soc_jack_add_gpios() instead.
  If no jack is supplied detection will be disabled.
 Send an initial empty report 
 Reset the codec, the DSP core, and disable all interrupts 
 Initialize private data 
 Enable jack detection 
	
	  Clear any old interrupts.
	  An old interrupt ocurring prior to installing the ISR
	  can keep a new interrupt from generating a trigger.
 High Performance is default 
 Turn on VCM bandgap reference 
	
	  Enable volume smoothing, disable zero cross.  This will cause
	  a quick 40ms ramp to mute on shutdown.
 clear IRQ status 
 SPDX-License-Identifier: GPL-2.0-only
  Driver for ADAU1372 codec
  Copyright 2016 Analog Devices Inc.
   Author: Lars-Peter Clausen <lars@metafoo.de>
 SPDX-License-Identifier: GPL-2.0-only
 rt5682-sdw.c  --  RT5682 ALSA SoC audio component driver
 Copyright 2019 Realtek Semiconductor Corp.
 Author: Oder Chiou <oder_chiou@realtek.com>
 Use tx_mask or rx_mask to configure stream tag and set dma_data 
 SoundWire specific configuration 
	
	  Mark hw_init to false
	  HW init will be performed when device reports present
	
	  PM runtime is only enabled when a Slave reports as Attached
 set autosuspend parameters 
 update count of parent 'active' children 
 make sure the device does not suspend immediately 
 volatile registers 
 Soundwire 
 Mark Slave initialization complete 
 Update the status 
	
	  Perform initialization only if slave status is present and
	  hw_init flag is false
 perform IO transfers required for Slave initialization 
 first we need to allocate memory for set bits in port lists 
 BITMAP: 00000100 
 BITMAP: 00000010 
 do this again for sink now 
 set the timeout values 
 wake-up event 
 Bus clock frequency 
 Regmap Initialization 
	
	  prevent new interrupts from being handled after the
	  deferred work completes and before the parent disables
	  interrupts on the link
 log but don't prevent suspend from happening 
 SPDX-License-Identifier: GPL-2.0-or-later
  ALSA SoC CQ0093 Voice Codec Driver for DaVinci platforms
  Copyright (C) 2010 Texas Instruments, Inc
  Author: Miguel Aguilar <miguel.aguilar@ridgerun.com>
 force all power off 
 SPDX-License-Identifier: GPL-2.0-only
  wm9705.c  --  ALSA Soc WM9705 codec support
  Copyright 2008 Ian Molton <spyro@f2s.com>
 Headphone Mixer 
 Mic source 
 Capture source 
 DAPM widgets 
 Audio map
  WM9705 has no switches to disable the route from the inputs to the HP mixer
  so in order to prevent active inputs from forcing the audio outputs to be
  constantly enabled, we use the mutes on those inputs to simulate such
  controls.
 HP mixer 
 mono mixer 
 outputs 
 inputs 
 Left capture selector 
 Right capture source 
 ADC's 
 SPDX-License-Identifier: GPL-2.0-only
  ADAU1977ADAU1978ADAU1979 driver
  Copyright 2014 Analog Devices Inc.
   Author: Lars-Peter Clausen <lars@metafoo.de>
	
	  To get the device into SPI mode CLATCH has to be pulled low three
	  times.  Do this by issuing three dummy reads.
 SPDX-License-Identifier: GPL-2.0
 Copyright (c) 2019, Linaro Limited
 Fractional Rates 
 slave port water mark level
    (0: 6bytes, 1: 9bytes, 2: 12 bytes, 3: 15 bytes)
 Only valid for 9.6 MHz mclk 
 Only valid for 12.288 MHz mclk 
 Feature masks to distinguish codec version 
 As fine version info cannot be retrieved before wcd probe.
  Define three coarse versions for possible future use before wcd probe.
 Z value defined in milliohm 
 Z floating defined in ohms 
 Z value compared in milliOhm 
 LO3 not avalible in Tavil 
INT7 WSA Speakers via soundwire 
INT8 WSA Speakers via soundwire 
 16 
 17 
 Codec supports 2 IIR filters 
 Each IIR has 5 Filter Stages 
 HPH_L 
 HPH_R 
 LO1_DIFF 
 LO2_DIFF 
 LO3_SE - not used in Tavil 
 LO4_SE - not used in Tavil 
 SWR SPK CH1 
 SWR SPK CH2 
 mbhc module 
 Cutoff frequency for high pass filter 
	
	  1ms delay is required after pre-charge is enabled
	  as per HW requirement
	
	  In data clock contrl register is changed
	  to CLK_SYS_MCLK_PRG
	
	  10us sleep is required after clock is enabled
	  as per HW requirement
 Don't disable clock if soundwire using it.
	
	  5ms sleep required after enabling efuse control
	  before checking the status.
		
		  Loop through all interpolator MUX inputs and find out
		  to which interpolator input, the slim rx port
		  is connected
 Interpolators 5 and 6 are not aviliable in Tavil 
 rate is in Hz 
				
				  Ear and speaker primary path does not support
				  native sample rates
 Interpolators 5 and 6 are not aviliable in Tavil 
				
				  Ear mix path supports only 48, 96, 192,
				  384KHz only
 Find the SB TX MUX input - which decimator is connected 
 Configure slave interface device 
 write to interface device 
 configure the slave port for water mark and enable
 ports 8,9 
 configure the slave port for water mark and enable
 convert it to milli volts 
 set SPKR rate to FS_2P4_3P072 
 Take DMICs out of reset 
 Default pull up current to 2uA 
 min micbias voltage is 1V and maximum is 2.85V 
	
	  If requested micbias voltage is same as current micbias
	  voltage, then just return. Otherwise, adjust voltage as
	  per requested value. If micbias is already enabled, then
	  to avoid slow micbias ramp-up or down enable pull-up
	  momentarily, change the micbias value and then re-enable
	  micbias.
		
		  Add 2ms delay as per HW requirement after enabling
		  micbias
	
	  If device tree micbias level is already above the minimum
	  voltage needed to detect threshold microphone, then do
	  not change the micbias, just return.
 If ramp is not complete, give additional 5ms 
 Start impedance measurement for HPH_L 
 Start impedance measurement for HPH_R 
 < 32ohm 
 32ohm < Z < 400ohm 
 400ohm < Z < 1200ohm 
 >1200ohm 
 For NO-jack, disable L_DET_EN before Z-det measurements 
 Turn off 100k pull down on HPHL 
 First get impedance on Left 
 Second ramp for left ch 
 Start of right impedance ramp and calculation 
 Second ramp for right ch 
 Monostereo detection 
 Parallel of left Z and 9 ohm pull down resistor 
 Turn on 100k pull down on HPHL 
 For NO-jack, re-enable L_DET_EN after Z-det measurements 
 Class-H Init
 Default HPH Mode to Class-H Low HiFi 
 Address does not automatically update if reading 
 Mask bits top 2 bits since they are reserved 
 Mask top 2 bits, 7-8 are reserved 
 Mask top bit it is reserved 
 Updates addr automatically for each B2 write 
 Any specific register configuration for compander 
 Set Gain Source Select based on compander enabledisable 
 Set Look Ahead Delay 
 ADC: 0, DMIC: 1 
 only add to the list if value not set 
 Gain Controls 
 -84dB min - 40dB max 
 EAR does not have compander 
 Enable Compander Clock 
 Clk enable 
 Clk Disable 
 Reset enable and disable 
 Reset rate to 48K
 Clk enable 
 B1 GAIN 
 B2 GAIN 
 B3 GAIN 
 B4 GAIN 
 B5 GAIN 
 Disable AutoChop timer during power up 
 Read DEM INP Select 
 Ripple freq control enable 
 Disable AutoChop timer during power up 
 1000us required as per HW requirement 
 Ripple freq control disable 
 Ripple freq control enable 
 Disable AutoChop timer during power up 
 1000us required as per HW requirement 
 Ripple freq control disable 
		
		  7ms sleep is required after PA is enabled as per
		  HW requirement. If compander is disabled, then
		  20ms delay is needed.
 Remove Mute on primary path 
 Enable GM3 boost 
 Enable AutoChop timer at the end of power up 
 Remove mix path mute 
 Enable DSD Mute before PA disable 
		
		  5ms sleep is required after PA disable. If compander is
		  disabled, then 20ms delay is needed after PA disable.
		
		  7ms sleep is required after PA is enabled as per
		  HW requirement. If compander is disabled, then
		  20ms delay is needed.
 Remove mute 
 Enable GM3 boost 
 Enable AutoChop timer at the end of power up 
 Remove mix path mute if it is enabled 
		
		  5ms sleep is required after PA disable. If compander is
		  disabled, then 20ms delay is needed after PA disable.
 Default value to return in case of error 
			
			  Minimum 1 clk cycle delay is required as per
			  HW spec.
 apply gain after decimator is enabled 
				
				  Minimum 1 clk cycle delay is required as per
				  HW spec.
 1 msec delay as per HW requirement 
 Analog Outputs 
 TX 
 Digital Mic Inputs 
 RX0-RX7 
 RX0 Ear out 
 RX1 Headphone left 
 RX2 Headphone right 
 RX3 HIFi LineOut1 
 RX4 HIFi LineOut2 
 RX7 Speaker Left Out PA 
 RX8 Speaker Right Out PA 
 Tx 
 set default rate 9P6MHz 
 SPDX-License-Identifier: GPL-2.0-only
  lm49453.c  -  LM49453 ALSA Soc Audio driver
  Copyright (c) 2012 Texas Instruments, Inc
  Initially based on soundsoccodecswm8350.c
 codec private data 
 capture path controls 
 MUX Controls 
 TLV Declarations 
 Sidetone supports mono only 
 mic1 and mic2 supports mono only 
 Capture path filter enable 
 DAPM widgets 
 All end points HP,EP, LS, Lineout and Haptic 
 playback path driver enables 
 DAC 
 ADC 
 AIF 
 Port1 TX controls 
 Port2 TX controls 
 Sidetone Mixer 
 DAC MIXERS 
 Capture Mixer 
 Port SDI mapping 
 HP mapping 
 Port 2 
 EP map 
 Speaker map 
 Port 2 
 Port 2 
 Haptic map 
 Port 2 
 Port 2 
 Lineout map 
 Port 2 
 Port 2 
 TX map 
 Port1 mappings 
 AUX connections 
 ADC connection 
 Sidetone map 
 Setting DAC clock dividers based on substream sample rate. 
 pll clk slection 
 Formates supported by LM49453 driver. 
 LM49453 dai structure. 
 SPDX-License-Identifier: GPL-2.0-or-later
  TAS5086 ASoC codec driver
  Copyright (c) 2013 Daniel Mack <zonque@gmail.com>
  TODO:
   - implement DAPM and input muxing
   - implement modulation limit
   - implement non-default PWM start
  Note that this chip has a very unusual register layout, specifically
  because the registers are of unequal size, and multi-byte registers
  require bulk writes to take effect. Regmap does not support that kind
  of devices.
  Currently, the driver does not touch any of the registers >= 0x20, so
  it doesn't matter because the entire map can be accessed as 8-bit
  array. In case more features will be added in the future
  that require access to higher registers, the entire regmap HW IO
  routines have to be open-coded.
  TAS5086 registers
 Clock control register  
 Device ID register 
 Error status register 
 System control register 1 
 Serial data interface register  
 System control register 2 
 Soft mute register 
 Master volume  
 Channel 1-6 volume 
 Volume control register 
 Modulation limit register 
 PWM start register 
 Surround register 
 Split cap charge period register 
 Oscillator trim register 
  Default TAS5086 power-up configuration
 Current sample rate for de-emphasis control 
 GPIO driving Reset pin, if any 
 The TAS5086 can only be slave to all clocks 
 we need to refer to the data format from hw_params() 
 Look up the sample rate and refer to the offset in the list 
 MCLK  Fs ratio 
	
	  The chip has a very unituitive register mapping and muxes information
	  about data format and sample depth into the same register, but not on
	  a logical bit-boundary. Hence, we have to refer to the format passed
	  in the set_dai_fmt() callback and set up everything from here.
	 
	  First, determine the 'base' value, using the format ...
 ... then add the offset for the sample bit depth. 
 clock is considered valid now 
 Reset codec - minimum assertion time is 400ns 
 Codec needs ~15ms to wake up 
 charge period values in microseconds 
	
	  If any of the channels is configured to start in Mid-Z mode,
	  configure 'part 1' of the PWM starts to use Mid-Z, and tell
	  all configured mid-z channels to start under 'part 1'.
 lookup and set split-capacitor charge period 
 enable factory trim 
 start all channels 
 mute all channels for now 
 TAS5086 controls 
 Input mux controls 
 Output mux controls 
 SDIN inputs -> channel muxes 
 Channel muxes -> PWM muxes 
 The PWM muxes are directly connected to the PWM outputs 
 Shut down all channels 
 CONFIG_PM 
 hardware default is 1300 ms 
 set master volume to 0 dB 
 Set codec to the reset state 
 The TAS5086 always returns 0x03 in its TAS5086_DEV_ID register 
	
	  The chip has been identified, so we can turn off the power
	  again until the dai link is set up.
 SPDX-License-Identifier: GPL-2.0-only
 Copyright (c) 2018-2020, The Linux Foundation. All rights reserved.
 Fractional Rates 
 Convert from vout ctl to micbias voltage in mV 
 Z value defined in milliohm 
 Z floating defined in ohms 
 Z value compared in milliOhm 
 INTR_CTRL_INT_MASK_0 
 INTR_CTRL_INT_MASK_1 
 INTR_CTRL_INT_MASK_2 
 mbhc module 
 1 msec delay as per HW requirement 
 1 msec delay as per HW requirement 
 10 msec delay as per HW requirement 
 Set Noise Filter Resistor value 
 5msec compander delay as per HW requirement 
 5msec compander delay as per HW requirement 
 5 msec delay as per HW requirement 
 100 usec delay as per HW requirement 
		
		  7ms sleep is required if compander is enabled as per
		  HW requirement. If compander is disabled, then
		  20ms delay is required.
		
		  7ms sleep is required if compander is enabled as per
		  HW requirement. If compander is disabled, then
		  20ms delay is required.
		
		  7ms sleep is required if compander is enabled as per
		  HW requirement. If compander is disabled, then
		  20ms delay is required.
 100 usec delay as per HW requirement 
		
		  7ms sleep is required if compander is enabled as per
		  HW requirement. If compander is disabled, then
		  20ms delay is required.
		
		  7ms sleep is required if compander is enabled as per
		  HW requirement. If compander is disabled, then
		  20ms delay is required.
		
		  7ms sleep is required if compander is enabled as per
		  HW requirement. If compander is disabled, then
		  20ms delay is required.
 1 msec delay as per HW requirement 
 1 msec delay as per HW requirement 
		
		  Enable watchdog interrupt for HPHL or AUX
		  depending on mux value
 6 msec delay as per HW requirement 
 7 msec delay as per HW requirement 
 250us sleep as per HW requirement 
 Setting DMIC clock rate to 2.4MHz 
 enable clock scaling 
 Copy clk settings to active bank 
 1 msec delay as per HW requirement 
 1 msec delay as per HW requirement 
 MBHC related 
 Default pull up current to 2uA 
 min micbias voltage is 1V and maximum is 2.85V 
	
	  If requested micbias voltage is same as current micbias
	  voltage, then just return. Otherwise, adjust voltage as
	  per requested value. If micbias is already enabled, then
	  to avoid slow micbias ramp-up or down enable pull-up
	  momentarily, change the micbias value and then re-enable
	  micbias.
		
		  Add 2ms delay as per HW requirement after enabling
		  micbias
	
	  If device tree micbias level is already above the minimum
	  voltage needed to detect threshold microphone, then do
	  not change the micbias, just return.
 If ramp is not complete, give additional 5ms 
 Start impedance measurement for HPH_L 
 Start impedance measurement for HPH_R 
 < 32ohm 
 32ohm < Z < 400ohm 
 400ohm < Z < 1200ohm 
 >1200ohm 
 For NO-jack, disable L_DET_EN before Z-det measurements 
 Turn off 100k pull down on HPHL 
	 Disable surge protection before impedance detection.
	  This is done to give correct value for high impedance.
 1ms delay needed after disable surge protection 
 First get impedance on Left 
 Second ramp for left ch 
 Start of right impedance ramp and calculation 
 Second ramp for right ch 
 Monostereo detection 
 Parallel of left Z and 9 ohm pull down resistor 
 Enable surge protection again after impedance detection 
 Turn on 100k pull down on HPHL 
 For NO-jack, re-enable L_DET_EN after Z-det measurements 
 Do not enable moisture detection if jack type is NC 
 Do not enable moisture detection if jack type is NC 
	
	  If moisture_en is already enabled, then skip to plug type
	  detection.
 Read moisture comparator status 
 END MBHC 
input widgets
tx widgets
tx mixers
 micbias widgets
 micbias pull up widgets
output widgets tx
rx widgets
 rx mixer widgets
output widgets rx
 set micbias voltage 
 Set all interrupts as edge triggered 
 Request for watchdog interrupt 
 Disable watchdog interrupt for HPH and AUX 
 20us sleep required after pulling the reset gpio to LOW 
 20us sleep required after pulling the reset gpio to HIGH 
	 As TX is main CSR reg interface, which should not be suspended first.
 SPDX-License-Identifier: GPL-2.0-or-later
  Shared helper functions for devices from the ADAU family
  Copyright 2011-2016 Analog Devices Inc.
  Author: Lars-Peter Clausen <lars@metafoo.de>
 Fractional mode 
 SPDX-License-Identifier: GPL-2.0-only
  nau8810.c  --  NAU8810 ALSA Soc Audio driver
  Copyright 2016 Nuvoton Technology Corp.
  Author: David Lin <ctlin0@nuvoton.com>
  Based on WM8974.c
 The EQ parameters get function is to get the 5 band equalizer control.
  The regmap raw read can't work here because regmap doesn't provide
  value format for value width of 9 bits. Therefore, the driver reads data
  from cache and makes value format according to the endianness of
  bytes type control element.
		 conversion of 16-bit integers between native CPU format
		  and big endian format
 The EQ parameters put function is to make configuration of 5 band equalizer
  control. These configuration includes central frequency, equalizer gain,
  cut-off frequency, bandwidth control, and equalizer path.
  The regmap raw write can't work here because regmap doesn't provide
  register and value format for register with address 7 bits and value 9 bits.
  Therefore, the driver makes value format according to the endianness of
  bytes type control element and writes data to codec.
		 conversion of 16-bit integers between native CPU format
		  and big endian format
 Speaker Output Mixer 
 Mono Output Mixer 
 PGA Mute 
 Input PGA 
 Loopback Switch 
 Mono output mixer 
 Speaker output mixer 
 Outputs 
 Input Boost Stage 
 Input PGA 
 Digital Looptack 
	 Calculate the PLL 4-bit integer input and the PLL 24-bit fractional
	  input; round up the 24+4bit.
	 Configure the master clock prescaler div to make system
	  clock to approximate the internal master clock (IMCLK);
	  and large or equal to IMCLK.
 master clock from MCLK and disable PLL 
 Select BCLK configuration if the codec as master. 
 get the bclk and fs ratio 
	 If the master clock is from MCLK, provide the runtime FS for driver
	  to get the master clock prescaler configuration.
 Only 1 channel of data 
 Only 1 channel of data 
 SPDX-License-Identifier: GPL-2.0-only
  Driver for the PCM5102A codec
  Author:	Florian Meier <florian.meier@koalo.de>
 		Copyright 2013
 SPDX-License-Identifier: GPL-2.0
 rt1015.c  --  RT1015 ALSA SoC audio amplifier driver
 Copyright 2019 Realtek Semiconductor Corp.
 Author: Jack Yu <jack.yu@realtek.com>
 Rx slot configuration 
	 This is an assumption that the system sends stereo audio to the amplifier typically.
	  And the stereo audio is placed in slot 0246 as the starting slot.
	  The users could select the channel from LRL+R by "Mono LR Select" control.
 Tx slot configuration 
 SPDX-License-Identifier: GPL-2.0-only
  ADAV801 audio driver
  Copyright 2014 Analog Devices Inc.
 SPDX-License-Identifier: GPL-2.0-or-later
  wm8991.c  --  WM8991 ALSA Soc Audio driver
  Copyright 2007-2010 Wolfson Microelectronics PLC.
  Author: Graeme Gregory
          Graeme.Gregory@wolfsonmicro.com
 R1  - Power Management (1) 
 R2  - Power Management (2) 
 R3  - Power Management (3) 
 R4  - Audio Interface (1) 
 R5  - Audio Interface (2) 
 R6  - Clocking (1) 
 R7  - Clocking (2) 
 R8  - Audio Interface (3) 
 R9  - Audio Interface (4) 
 R10 - DAC CTRL 
 R11 - Left DAC Digital Volume 
 R12 - Right DAC Digital Volume 
 R13 - Digital Side Tone 
 R14 - ADC CTRL 
 R15 - Left ADC Digital Volume 
 R16 - Right ADC Digital Volume 
 R18 - GPIO CTRL 1 
 R19 - GPIO1 & GPIO2 
 R20 - GPIO3 & GPIO4 
 R21 - GPIO5 & GPIO6 
 R22 - GPIOCTRL 2 
 R23 - GPIO_POL 
 R24 - Left Line Input 1&2 Volume 
 R25 - Left Line Input 3&4 Volume 
 R26 - Right Line Input 1&2 Volume 
 R27 - Right Line Input 3&4 Volume 
 R28 - Left Output Volume 
 R29 - Right Output Volume 
 R30 - Line Outputs Volume 
 R31 - Out34 Volume 
 R32 - Left OPGA Volume 
 R33 - Right OPGA Volume 
 R34 - Speaker Volume 
 R35 - ClassD1 
 R37 - ClassD3 
 R39 - Input Mixer1 
 R40 - Input Mixer2 
 R41 - Input Mixer3 
 R42 - Input Mixer4 
 R43 - Input Mixer5 
 R44 - Input Mixer6 
 R45 - Output Mixer1 
 R46 - Output Mixer2 
 R47 - Output Mixer3 
 R48 - Output Mixer4 
 R49 - Output Mixer5 
 R50 - Output Mixer6 
 R51 - Out34 Mixer 
 R52 - Line Mixer1 
 R53 - Line Mixer2 
 R54 - Speaker Mixer 
 R55 - Additional Control 
 R56 - AntiPOP1 
 R57 - AntiPOP2 
 R58 - MICBIAS 
 R60 - PLL1 
 R61 - PLL2 
 R62 - PLL3 
 now hit the volume update bits (always bit 8) 
 INMIXL 
 INMIXR 
 LOMIX 
 ROMIX 
 LOUT 
 ROUT 
 LOPGA 
 ROPGA 
  _DAPM_ Controls
 INMIX dB values 
 Left In PGA Connections 
 Right In PGA Connections 
 INMIXL 
 INMIXR 
 AINLMUX 
 DIFFINL 
 AINRMUX 
 LOMIX 
 ROMIX 
 LONMIX 
 LOPMIX 
 RONMIX 
 ROPMIX 
 OUT3MIX 
 OUT4MIX 
 SPKMIX 
 Input Side 
 Input Lines 
 DACs 
 Input PGAs 
 INMIXL 
 AINLMUX 
 INMIXR 
 AINRMUX 
 Output Side 
 DACs 
 LOMIX 
 LONMIX 
 LOPMIX 
 OUT3MIX 
 SPKMIX 
 OUT4MIX 
 ROPMIX 
 RONMIX 
 ROMIX 
 LOUT PGA 
 ROUT PGA 
 LOPGA 
 ROPGA 
 MICBIAS 
 Make DACs turn on when playing even if not mixed into any outputs 
 Make ADCs turn on when recording even if not mixed from any inputs 
 Input Side 
 LIN12 PGA 
 LIN34 PGA 
 INMIXL 
 AINLMUX 
 ADC 
 RIN12 PGA 
 RIN34 PGA 
 INMIXL 
 AINRMUX 
 ADC 
 LOMIX 
 ROMIX 
 SPKMIX 
 LONMIX 
 LOPMIX 
 OUT3MIX 
 OUT4MIX 
 RONMIX 
 ROPMIX 
 Out Mixer PGAs 
 Output Pins 
 PLL divisors 
 The size in bits of the pll divide multiplied by 10
 Check if we need to round 
 Move down to proper range now rounding is done 
 Turn on PLL 
 sysclk comes from PLL 
 set up N , fractional mode and pre-divisor if necessary 
 Turn on PLL 
  Set's ADC and Voice DAC format.
 set masterslave audio interface 
 interface format 
  Set PCM DAI bit size and sample rate.
 bit size 
 VMID=250k 
 Enable all output discharge bits 
 Enable POBCTRL, SOFT_ST, VMIDTOG and BUFDCOPEN 
 Delay to allow output caps to discharge 
 Disable VMIDTOG 
 disable all output discharge bits 
 Enable outputs 
 Enable VMID at 2x50k 
 Enable VREF 
 Enable BUFIOEN 
 Disable outputs 
 disable POBCTRL, SOFT_ST and BUFDCOPEN 
 VMID=2250k 
 Enable POBCTRL and SOFT_ST 
 Enable POBCTRL, SOFT_ST and BUFDCOPEN 
 mute DAC 
 Enable any disabled outputs 
 Disable VMID 
 Enable all output discharge bits 
 Disable VREF 
 disable POBCTRL, SOFT_ST and BUFDCOPEN 
  The WM8991 supports 2 different and mutually exclusive DAI
  configurations.
  1. ADCDAC on Primary Interface
  2. ADC on Primary InterfaceDAC on secondary
 ADCDAC on primary 
 SPDX-License-Identifier: GPL-2.0-or-later
  PCM1681 ASoC codec driver
  Copyright (c) StreamUnlimited GmbH 2013
 	Marek Belisko <marek.belisko@streamunlimited.com>
 Attenuation level 
 Soft mute control register 
 DAC operation control 
 Audio interface data format 
 De-emphasis control 
 Zero detect status reg 
 Current deemphasis status 
 Current rate for deemphasis control 
 enabledisable deemphasis functionality 
 The PCM1681 can only be slave to all clocks 
 SPDX-License-Identifier: GPL-2.0-only
  ak4641.c  --  AK4641 ALSA Soc Audio driver
  Copyright (C) 2008 Harald Welte <laforge@gnufiish.org>
  Copyright (C) 2011 Dmitry Artamonow <mad_soft@inbox.ru>
  Based on ak4535.c by Richard Purdie
 AK4641 register space 
 codec private data 
  ak4641 register cache
 if deemphasis is on, select the nearest available rate 
 Mono 1 Mixer 
 Stereo Mixer 
 Input Mixer 
 Mic mux 
 Input mux 
 mono 2 switch 
 ak4641 dapm widgets 
 Stereo Mixer 
 Mono 1 Mixer 
 Mic 
 Input Mux 
 Line Out 
 Mono 1 Out 
 Mono 2 Out 
 Aux In 
 ADC 
 set fs 
 Update de-emphasis filter for the new rate 
 interface format 
 MSB after FRM 
 MSB during FRM 
 interface format 
 unmute 
 mute 
 rates are controlled by BT chip 
 > 150 ns 
 SPDX-License-Identifier: GPL-2.0-only
  cs42l56.c -- CS42L56 ALSA SoC audio driver
  Copyright 2014 CirrusLogic, Inc.
  Author: Brian Austin <brian.austin@cirrus.com>
 r03	- Power Ctl 1 
 r04	- Power Ctl 2 
 ro5	- Clocking Ctl 1 
 r06	- Clocking Ctl 2 
 r07	- Serial Format 
 r08	- Class H Ctl 
 r09	- Misc Ctl 
 r0a	- INT Status 
 r0b	- Playback Ctl 
 r0c	- DSP Mute Ctl 
 r0d	- ADCA Mixer Volume 
 r0e	- ADCB Mixer Volume 
 r0f	- PCMA Mixer Volume 
 r10	- PCMB Mixer Volume 
 r11	- Analog Input Advisory Volume 
 r12	- Digital Input Advisory Volume 
 r13	- Master A Volume 
 r14	- Master B Volume 
 r15	- Beep Freq  On Time 
 r16	- Beep Volume  Off Time 
 r17	- Beep Tone Ctl 
 r18	- Tone Ctl 
 r19	- Channel Mixer & Swap 
 r1a	- AIN Ref Config  ADC Mux 
 r1b	- High-Pass Filter Ctl 
 r1c	- Misc ADC Ctl 
 r1d	- Gain & Bias Ctl 
 r1e	- PGAA Mux & Volume 
 r1f	- PGAB Mux & Volume 
 r20	- ADCA Attenuator 
 r21	- ADCB Attenuator 
 r22	- ALC Enable & Attack Rate 
 r23	- ALC Release Rate 
 r24	- ALC Threshold 
 r25	- Noise Gate Ctl 
 r26	- ALC, Limiter, SFT, ZeroCross 
 r27	- Analog Mute, LO & HP Mux 
 r28	- HP A Volume 
 r29	- HP B Volume 
 r2a	- LINEOUT A Volume 
 r2b	- LINEOUT B Volume 
 r2c	- Limit Threshold Ctl 
 r2d	- Limiter Ctl & Release Rate 
 r2e	- Limiter Attack Rate 
 8k 
 11.025k 
 11.0294k 
 12k 
 16k 
 22.050k 
 22.0588k 
 24k 
 32k 
 44.118k 
 44.1k 
 48k 
 interface format 
 sclk inversion 
 Hit the DSP Mixer first 
 Mute ADC's 
 HP And LO 
 For usability define a way of injecting beep events for the device -
  many systems will not have a keyboard.
 Kick the beep from a workqueue 
 SPDX-License-Identifier: GPL-2.0-only
  rt5651.c  --  RT5651 ALSA SoC audio codec driver
  Copyright 2014 Realtek Semiconductor Corp.
  Author: Bard Liao <bardliao@realtek.com>
 {0, +20, +24, +30, +35, +40, +44, +50, +52} dB 
 Interface data select 
 Headphone Output Volume 
 OUTPUT Control 
 DAC Digital Volume 
 IN1IN2IN3 Control 
 INLINR Volume Control 
 ADC Digital Volume Control 
 ADC Boost Volume Control 
 ASRC 
  set_dmic_clk - Set parameter of dmic.
  @w: DAPM widget.
  @kcontrol: The kcontrol of this widget.
  @event: Event id.
 Digital Mixer 
 Analog Input Mixer 
 Analog Output Mixer 
 Stereo ADC source 
 Mono ADC source 
 DAC2 channel source 
 IF2_ADC channel source 
 PDM select 
 depop parameters 
 headphone amp power on 
 headphone unmute sequence 
 ASRC 
 micbias 
 Input Lines 
 Boost 
 Input Volume 
 REC Mixer 
 ADCs 
 ADC Mux 
 ADC Mixer 
 Digital Interface 
 Digital Interface Select 
 Audio Interface 
 Audio DSP 
 Output Side 
 DAC mixer before sound effect  
 DAC2 channel Mux 
 DAC Mixer 
 DACs 
 OUT Mixer 
 Ouput Volume 
 HPOLOUTMono Mixer 
 Output Lines 
 Do not touch the LDO voltage select bits on bias-off 
 Leave PLL1 and jack-detect power as is, all others off 
 OVCD is unreliable when used with RCCLK as sysclk-source 
 Jack detect and button-press timings 
 milli seconds 
 Aprox. 2 seconds worth of tries 
 milli seconds 
 milli seconds 
 assume something is wrong after this 
 Check the jack was not removed underneath us 
 Remember till after JACK_UNPLUG_TIME wait 
	
	  The pins get temporarily shorted on jack unplug, so we poll for
	  at least JACK_UNPLUG_TIME milli-seconds before reporting a press.
 Re-enable OVCD IRQ to detect next press 
 Stop polling 
	
	  We get the insertion event before the jack is fully inserted at which
	  point the second ring on a TRRS connector may short the 2nd ring and
	  sleeve contacts, also the overcurrent detection is not entirely
	  reliable. So we try several times with a wait in between until we
	  detect the same type JACK_DETECT_COUNT times in a row.
 Clear any previous over-current status flag 
 Check the jack is still connected before checking ovcd 
			
			  Over current detected, there is a short between the
			  2nd ring contact and the ground, so a TRS connector
			  without a mic contact and thus plain headphones.
 Button press support only works with internal jack-detection 
 Jack removed, or spurious IRQ? 
 Jack inserted 
 Enable ovcd IRQ for button press detect. 
 No more need for overcurrent detect. 
		
		  The ovcd IRQ keeps firing while the button is pressed, so
		  we disable it and start polling the button until released.
		 
		  The disable will make the IRQ pin 0 again and since we get
		  IRQs on both edges (so as to detect both jack plugin and
		  unplug) this means we will immediately get another IRQ.
		  The ovcd_irq_enabled check above makes the 2ND IRQ a NOP.
		
		  If the jack-detect IRQ flag goes high (unplug) after our
		  above rt5651_jack_inserted() check and before we have
		  disabled the OVCD IRQ, the IRQ pin will stay high and as
		  we react to edges, we miss the unplug event -> recheck.
 Select jack detect source 
 No jack detect 
 active-low is normal, set inv flag for active-high 
 active-low is normal, set inv flag for active-high 
 active-low is normal, set inv flag for active-high 
 IRQ output on GPIO1 
 Enable jack detect power 
 Set OVCD threshold current and scale-factor 
	
	  The over-current-detect is only reliable in detecting the absence
	  of over-current, when the mic-contact in the jack is short-circuited,
	  the hardware periodically retries if it can apply the bias-current
	  leading to the ovcd status flip-flopping 1-0-1 with it being 0 about
	  10% of the time, as we poll the ovcd status bit we might hit that
	  10%, so we enable sticky mode and when checking OVCD we clear the
	  status, msleep() a bit and then check to get a reliable reading.
 sync initial jack state 
  Note on some platforms the platform code may need to add device-properties,
  rather then relying only on properties set by the firmware. Therefor the
  property parsing MUST be done from the component driver's probe function,
  rather then from the i2c driver's probe function, so that the platform-code
  can attach extra properties before calling snd_soc_register_card().
	
	  Testing on various boards has shown that good defaults for the OVCD
	  threshold and scale-factor are 2000µA and 0.75. For an effective
	  limit of 1500µA, this seems to be more reliable then 1500µA and 1.0.
  Note this function MUST not look at device-properties, see the comment
  above rt5651_apply_properties().
 Make sure work is stopped on probe-error  remove 
 SPDX-License-Identifier: GPL-2.0-only
  rt5677-spi.c  --  RT5677 ALSA SoC audio codec driver
  Copyright 2013 Realtek Semiconductor Corp.
  Author: Oder Chiou <oder_chiou@realtek.com>
 The AddressPhase and DataPhase of SPI commands are MSB first on the wire.
  DataPhase word size of 16-bit commands is 2 bytes.
  DataPhase word size of 32-bit commands is 4 bytes.
  DataPhase word size of burst commands is 8 bytes.
  The DSP CPU is little-endian.
 zero-based offset into runtime->dma_area 
 number of new bytes since last period 
 zero-based offset into DSP's mic buffer 
 a new hotword is fired 
	 The DAI name "rt5677-dsp-cpu-dai" is not used. The actual DAI name
	  registered with ASoC is the name of the device "spi-RT5677AA:00",
	  because we only have one DAI. See snd_soc_register_dais().
 PCM for streaming audio from the DSP buffer 
	 Grab the first 4 bytes that hold the write pointer on the
	  dsp, and check to make sure that it points somewhere inside the
	  buffer.
 Adjust the offset so that it's zero-based 
  Copy one contiguous block of audio samples from the DSP mic buffer to the
  dma_area of the pcm runtime. The receiving buffer may wrap around.
  @begin: start offset of the block to copy, in bytes.
  @end:   offset of the first byte after the block to copy, must be greater
          than or equal to begin.
  Return: Zero if successful, or a negative error code on failure.
 The block to copy is empty 
	 If the incoming chunk is too big for the receiving buffer, only the
	  last "receiving buffer size - one frame" bytes are copied.
 May need to split to two chunks, calculate the size of each 
 Receiving buffer wrapped around 
 Copy first chunk 
 Copy second chunk 
  Copy a given amount of audio samples from the DSP mic buffer starting at
  mic_read_offset, to the dma_area of the pcm runtime. The source buffer may
  wrap around. mic_read_offset is updated after successful copy.
  @amount: amount of samples to copy, in bytes.
  Return: Zero if successful, or a negative error code on failure.
 Copy the first chunk in DSP's mic buffer 
 Wrap around, copy the second chunk 
  A delayed work that streams audio samples from the DSP mic buffer to the
  dma_area of the pcm runtime via SPI.
 Ensure runtime->dma_area buffer does not go away while copying. 
	 If this is the first time that we've asked for streaming data after
	  a hotword is fired, we should start reading from the previous 2
	  seconds of audio from wherever the mic_write_offset is currently.
 See if buffer wraparound happens 
 Calculate the amount of new samples in bytes 
 Copy all new samples from DSP mic buffer, one period at a time 
 Select a suitable transfer command for the next transfer to ensure
  the transfer address is always naturally aligned while minimizing
  the total number of transfers required.
  3 transfer commands are available:
  RT5677_SPI_READWRITE_16:	Transfer 2 bytes
  RT5677_SPI_READWRITE_32:	Transfer 4 bytes
  RT5677_SPI_READWRITE_BURST:	Transfer any multiples of 8 bytes
  Note:
  16 Bit writes and reads are restricted to the address range
  0x18020000 ~ 0x18021000
  For example, reading 256 bytes at 0x60030004 uses the following commands:
  0x60030004 RT5677_SPI_READ_32	4 bytes
  0x60030008 RT5677_SPI_READ_BURST	240 bytes
  0x600300F8 RT5677_SPI_READ_BURST	8 bytes
  0x60030100 RT5677_SPI_READ_32	4 bytes
  Input:
  @read: true for read commands; false for write commands
  @align: alignment of the next transfer address
  @remain: number of bytes remaining to transfer
  Output:
  @len: number of bytes to transfer with the selected command
  Returns the selected command
 Copy dstlen bytes from src to dst, while reversing byte order for each word.
  If srclen < dstlen, zeros are padded.
 Read DSP address space using SPI. addr and len have to be 4-byte aligned. 
 +4 bytes is for the DummyPhase following the AddressPhase 
 Construct SPI message header 
 Copy data back to caller buffer 
 Write DSP address space using SPI. addr has to be 4-byte aligned.
  If len is not 4-byte aligned, then extra zeros are written at the end
  as padding.
 +1 byte is for the DummyPhase following the DataPhase 
 Construct SPI message header 
 Fetch data from caller buffer 
 SPDX-License-Identifier: GPL-2.0
 Lochnagar sound card driver
 Copyright (c) 2017-2019 Cirrus Logic, Inc. and
                         Cirrus Logic International Semiconductor Ltd.
 Author: Charles Keepax <ckeepax@opensource.cirrus.com>
         Piotr Stankiewicz <piotrs@opensource.cirrus.com>
 SPDX-License-Identifier: GPL-2.0-only
  max98088.c -- MAX98088 ALSA SoC Audio driver
  Copyright 2010 Maxim Integrated Products
 0F interrupt enable 
 10 master clock 
 11 DAI1 clock mode 
 12 DAI1 clock control 
 13 DAI1 clock control 
 14 DAI1 format 
 15 DAI1 clock 
 16 DAI1 config 
 17 DAI1 TDM 
 18 DAI1 filters 
 19 DAI2 clock mode 
 1A DAI2 clock control 
 1B DAI2 clock control 
 1C DAI2 format 
 1D DAI2 clock 
 1E DAI2 config 
 1F DAI2 TDM 
 20 DAI2 filters 
 21 data config 
 22 DAC mixer 
 23 left ADC mixer 
 24 right ADC mixer 
 25 left HP mixer 
 26 right HP mixer 
 27 HP control 
 28 left REC mixer 
 29 right REC mixer 
 2A REC control 
 2B left SPK mixer 
 2C right SPK mixer 
 2D SPK control 
 2E sidetone 
 2F DAI1 playback level 
 30 DAI1 playback level 
 31 DAI2 playback level 
 32 DAI2 playbakc level 
 33 left ADC level 
 34 right ADC level 
 35 MIC1 level 
 36 MIC2 level 
 37 INA level 
 38 INB level 
 39 left HP volume 
 3A right HP volume 
 3B left REC volume 
 3C right REC volume 
 3D left SPK volume 
 3E right SPK volume 
 3F MIC config 
 40 MIC threshold 
 41 excursion limiter filter 
 42 excursion limiter threshold 
 43 ALC 
 44 power limiter threshold 
 45 power limiter config 
 46 distortion limiter config 
 47 audio input 
 48 microphone 
 49 level control 
 4A bypass switches 
 4B jack detect 
 4C input enable 
 4D output enable 
 4E bias control 
 4F DAC power 
 50 DAC power 
 51 system 
 52 DAI1 EQ1 
 53 DAI1 EQ1 
 54 DAI1 EQ1 
 55 DAI1 EQ1 
 56 DAI1 EQ1 
 57 DAI1 EQ1 
 58 DAI1 EQ1 
 59 DAI1 EQ1 
 5A DAI1 EQ1 
 5B DAI1 EQ1 
 5C DAI1 EQ2 
 5D DAI1 EQ2 
 5E DAI1 EQ2 
 5F DAI1 EQ2 
 60 DAI1 EQ2 
 61 DAI1 EQ2 
 62 DAI1 EQ2 
 63 DAI1 EQ2 
 64 DAI1 EQ2 
 65 DAI1 EQ2 
 66 DAI1 EQ3 
 67 DAI1 EQ3 
 68 DAI1 EQ3 
 69 DAI1 EQ3 
 6A DAI1 EQ3 
 6B DAI1 EQ3 
 6C DAI1 EQ3 
 6D DAI1 EQ3 
 6E DAI1 EQ3 
 6F DAI1 EQ3 
 70 DAI1 EQ4 
 71 DAI1 EQ4 
 72 DAI1 EQ4 
 73 DAI1 EQ4 
 74 DAI1 EQ4 
 75 DAI1 EQ4 
 76 DAI1 EQ4 
 77 DAI1 EQ4 
 78 DAI1 EQ4 
 79 DAI1 EQ4 
 7A DAI1 EQ5 
 7B DAI1 EQ5 
 7C DAI1 EQ5 
 7D DAI1 EQ5 
 7E DAI1 EQ5 
 7F DAI1 EQ5 
 80 DAI1 EQ5 
 81 DAI1 EQ5 
 82 DAI1 EQ5 
 83 DAI1 EQ5 
 84 DAI2 EQ1 
 85 DAI2 EQ1 
 86 DAI2 EQ1 
 87 DAI2 EQ1 
 88 DAI2 EQ1 
 89 DAI2 EQ1 
 8A DAI2 EQ1 
 8B DAI2 EQ1 
 8C DAI2 EQ1 
 8D DAI2 EQ1 
 8E DAI2 EQ2 
 8F DAI2 EQ2 
 90 DAI2 EQ2 
 91 DAI2 EQ2 
 92 DAI2 EQ2 
 93 DAI2 EQ2 
 94 DAI2 EQ2 
 95 DAI2 EQ2 
 96 DAI2 EQ2 
 97 DAI2 EQ2 
 98 DAI2 EQ3 
 99 DAI2 EQ3 
 9A DAI2 EQ3 
 9B DAI2 EQ3 
 9C DAI2 EQ3 
 9D DAI2 EQ3 
 9E DAI2 EQ3 
 9F DAI2 EQ3 
 A0 DAI2 EQ3 
 A1 DAI2 EQ3 
 A2 DAI2 EQ4 
 A3 DAI2 EQ4 
 A4 DAI2 EQ4 
 A5 DAI2 EQ4 
 A6 DAI2 EQ4 
 A7 DAI2 EQ4 
 A8 DAI2 EQ4 
 A9 DAI2 EQ4 
 AA DAI2 EQ4 
 AB DAI2 EQ4 
 AC DAI2 EQ5 
 AD DAI2 EQ5 
 AE DAI2 EQ5 
 AF DAI2 EQ5 
 B0 DAI2 EQ5 
 B1 DAI2 EQ5 
 B2 DAI2 EQ5 
 B3 DAI2 EQ5 
 B4 DAI2 EQ5 
 B5 DAI2 EQ5 
 B6 DAI1 biquad 
 B7 DAI1 biquad 
 B8 DAI1 biquad 
 B9 DAI1 biquad 
 BA DAI1 biquad 
 BB DAI1 biquad 
 BC DAI1 biquad 
 BD DAI1 biquad 
 BE DAI1 biquad 
 BF DAI1 biquad 
 C0 DAI2 biquad 
 C1 DAI2 biquad 
 C2 DAI2 biquad 
 C3 DAI2 biquad 
 C4 DAI2 biquad 
 C5 DAI2 biquad 
 C6 DAI2 biquad 
 C7 DAI2 biquad 
 C8 DAI2 biquad 
 C9 DAI2 biquad 
  Load equalizer DSP coefficient configurations registers
 Load the base register address 
 Add the band address offset, note adjustment for word address 
 Step through the registers and coefs 
  Excursion limiter modes
 volts PP 
 Left speaker mixer switch 
 Right speaker mixer switch 
 Left headphone mixer switch 
 Right headphone mixer switch 
 Left earpiecereceiver mixer switch 
 Right earpiecereceiver mixer switch 
 Left ADC mixer switch 
 Right ADC mixer switch 
  The line inputs are 2-channel stereo inputs with the left
  and right channels sharing a common PGA power control signal.
 Left headphone output mixer 
 Right headphone output mixer 
 Left speaker output mixer 
 Right speaker output mixer 
 EarpieceReceiver output mixer 
 EarpieceReceiver output mixer 
 Left ADC input mixer 
 Right ADC input mixer 
 Inputs 
 codec mclk clock divider coefficients 
 Configure NI when operating as master 
 Update sample rate mode 
 Configure NI when operating as master 
 Update sample rate mode 
 Requested clock frequency is already setup 
        Setup clocks for slave mode, and using the PLL
         PSCLK = 0x01 (when master clk is 10MHz to 20MHz)
                 0x02 (when master clk is 20MHz to 30MHz)..
 Slave mode PLL 
 Set to master mode 
 Slave mode PLL 
 Set to master mode 
		
		  SND_SOC_BIAS_PREPARE is called while preparing for a
		  transition to ON or away from ON. If current bias_level
		  is SND_SOC_BIAS_ON, then it is preparing for a transition
		  away from ON. Disable the clock in that case, otherwise
		  enable it.
 Find the selected configuration with nearest sample rate 
 Disable EQ while configuring, and save current onoff state 
 Restore the original onoff state 
 Find the selected configuration with nearest sample rate 
 Disable EQ while configuring, and save current onoff state 
 Restore the original onoff state 
        Setup an array of texts for the equalizer enum.
         This is based on Mark Brown's equalizer driver code.
 Expand the array 
 Store the new entry 
 Now point the soc_enum to .texts array items 
 Configure mic for analogdigital mic mode 
 Configure receiver output 
 Configure equalizers 
 initialize private data 
 SPDX-License-Identifier: GPL-2.0-only
 rt1019.c  --  RT1019 ALSA SoC audio amplifier driver
 Author: Jack Yu <jack.yu@realtek.com>
 Copyright(c) 2021 Realtek Semiconductor Corp.
 Rx slot configuration 
	 This is an assumption that the system sends stereo audio to the
	  amplifier typically. And the stereo audio is placed in slot 0246
	  as the starting slot. The users could select the channel from
	  LRL+R by "Mono LR Select" control.
 SPDX-License-Identifier: GPL-2.0-only
  rt5670.c  --  RT5670 ALSA SoC audio codec driver
  Copyright 2014 Realtek Semiconductor Corp.
  Author: Bard Liao <bardliao@realtek.com>
  rt5670_headset_detect - Detect headset.
  @component: SoC audio component device.
  @jack_insert: Jack insert or not.
  Detect whether is headset or not when jack inserted.
  Returns detect status.
 for push button 
 2 port 
 jack in 
 2 port 
 1 port or 2 port 
 for push button and jack out 
 button pressed 
 up 
 center 
 down 
 button release 
 jack out 
 2 port 
 2 port 
 1 port 
 for jack in 
 {0, +20, +24, +30, +35, +40, +44, +50, +52} dB 
 Interface data select 
  For reliable output-mute LED control we need a "DAC1 Playback Switch" control.
  We emulate this by only clearing the RT5670_M_DAC1_L_R AD_DA_MIXER register
  bits when both our emulated DAC1 Playback Switch control and the DAC1 MIXLR
  DAPM-mixer DAC1 input are enabled.
 Headphone Output Volume 
 OUTPUT Control 
 DAC Digital Volume 
 IN1IN2 Control 
 INLINR Volume Control 
 ADC Digital Volume Control 
 ADC Boost Volume Control 
  set_dmic_clk - Set parameter of dmic.
  @w: DAPM widget.
  @kcontrol: The kcontrol of this widget.
  @event: Event id.
  Choose dmic clock between 1MHz and 3MHz.
  It is better for clock to approximate 3MHz.
  rt5670_sel_asrc_clk_src - select ASRC clock source for a set of filters
  @component: SoC audio component device.
  @filter_mask: mask of filters.
  @clk_src: clock source
  The ASRC function is for asynchronous MCLK and LRCK. Also, since RT5670 can
  only support standard 32fs or 64fs i2s format, ASRC should be enabled to
  support special i2s clock format such as Intel's 100fs(100  sampling rate).
  ASRC function will track i2s clock and generate a corresponding system clock
  for codec. This function provides an API to select the clock source for a
  set of filters specified by the mask. And the codec driver will turn on ASRC
  for these filters if ASRC is selected as their clock source.
 Digital Mixer 
 See comment above rt5670_update_ad_da_mixer_dac1_m_bits() 
 Apply the update (if any) 
 Analog Input Mixer 
 DAC1 LR source  
DAC2 LR source 
 TODO Use SOC_VALUE_ENUM_SINGLE_DECL 
RxDP source 
 MX-2D [1] [0] 
 Stereo2 ADC source 
 MX-26 [15] 
 Stereo1 ADC source 
 MX-27 MX-26 [12] 
 MX-27 MX-26 [11] 
 MX-27 MX-26 [9:8] 
 Mono ADC source 
 MX-28 [12] 
 MX-28 [11] 
 MX-28 [9:8] 
 MX-28 [1:0] 
 MX-28 [4] 
 MX-28 [3] 
 MX-2D [3:2] 
 MX-2F [15] 
 MX-2F [14:12] 
 MX-31 [15] [13] [11] [9] 
 MX-FA [12] 
 MX-FA [11] 
 MX-FA [10] 
 MX-9D [9:8] 
 headphone amp power on 
 depop parameters 
 headphone unmute sequence 
 headphone mute sequence 
 ASRC 
 Input Side 
 micbias 
 Input Lines 
 Boost 
 Input Volume 
 REC Mixer 
 ADCs 
 ADC Mux 
 ADC Mixer 
 ADC PGA 
 DSP 
 IF2 Mux 
 Digital Interface 
 Digital Interface Select 
 Audio Interface 
 Audio DSP 
 Output Side 
 DAC mixer before sound effect  
 DAC2 channel Mux 
 DAC Mixer 
 DACs 
 OUT Mixer 
 Ouput Volume 
 HPOLOUTMono Mixer 
 PDM 
 Output Lines 
 quirk 
	
	  Enable the emulated "DAC1 Playback Switch" by default to avoid
	  muting the output with older UCM profiles.
 The Power-On-Reset values for the DAC1 mixer have the DAC1 input enabled. 
 for push button 
 for irq 
 SPDX-License-Identifier: GPL-2.0-only
  rt274.c  --  RT274 ALSA SoC audio codec driver
  Copyright 2017 Realtek Semiconductor Corp.
  Author: Bard Liao <bardliao@realtek.com>
 Disable jack detection 
 Send an initial report 
 ADC0 source 
 HP-OUT source 
 Line out source 
 Input Lines 
 DMIC 
 ADCs 
 ADC Mux 
 Audio Interface 
 Output Side 
 DACs 
 Output Mux 
 Output Mixer 
 Output Pga 
 Output Lines 
 bit 14 0:48K 1:44.1K 
 bit 3:0 Number of Channel 
 bit 6:4 Bits per Sample 
 bit 15 Stream Type 0:PCM 1:Non-PCM 
 Clear IRQ 
 reset codec 
 Set Pad PDB is floating 
 Combo jack auto detect 
 Aux mode off 
 HP DC Calibration 
 Set NID=58h.Index 00h [15]= 1b; 
 Set pin widget 
 jack detection 
 SPDX-License-Identifier: GPL-2.0
 tscs42xx.c -- TSCS42xx ALSA SoC Audio driver
 Copyright 2017 Tempo Semiconductor, Inc.
 Author: Steven Eckhoff <steven.eckhoff.opensource@gmail.com>
 48k 
 44.1k 
 Input L Capture Route 
 Input R Capture Route 
 Input Channel Mapping 
 Vref 
 PLL 
 Headphone 
 Speaker 
 Capture 
 Capture Input 
 Digital Mic 
 Analog Mic 
 Line In 
  CONTROLS 
 Volumes 
 INSEL 
 Input Channel Map 
 Mic Bias 
 Headphone Auto Switching 
 Coefficient Ram 
 EQ 
 CLE 
 Effects 
 MBC 
 DAC and ADC share bit and frame clock 
 Slave mode not supported since it needs always-on frame clock 
 SPDX-License-Identifier: GPL-2.0-only
  cs53l30.c  --  CS53l30 ALSA Soc Audio driver
  Copyright 2015 Cirrus Logic, Inc.
  Authors: Paul Handrigan <Paul.Handrigan@cirrus.com>,
           Tim Howe <Tim.Howe@cirrus.com>
 Note: CS53L30_ADCDMIC1_CTL1 CH_TYPE controls inputs 1 and 2 
  TB = 6144(MCLK(int) scaling factor)MCLK(internal)
  TB - Time base
  NOTE: If MCLK_INT_SCALE = 0, then TB=1
 The noise gate threshold selected will depend on NG Boost 
 Corner frequencies are with an Fs of 48kHz. 
 ADC Input Paths 
 MIC Bias Paths 
 DMIC Paths 
 Output Paths when using SDOUT1 only 
 Output Paths when using both SDOUT1 and SDOUT2 
 NOTE: Enable MCLK_INT_SCALE to save power. 
 MCLK, Sample Rate, asp_rate, internal_fs_ratio, mclk_int_scale 
 MCLKX -> MCLK 
 DAI mode 
 Set TDM_PDN to turn off TDM mode -- Reset default 
		
		  Clear TDM_PDN to turn on TDM mode; Use ASP_SCLK_INV = 0
		  with SHIFT_LEFT = 1 combination as Figure 4-13 shows in
		  the CS53L30 datasheet
 Check to see if the SCLK is inverted 
 MCLK -> srate 
		
		  If digital softramp is set, the amount of time required
		  for power down increases and depends on the digital
		  volume setting.
 Set the max possible time if digsft is set 
 PDN_DONE will take a min of 20ms to be set.
 Clr status 
 PDN_DONE is set. We now can disable the MCLK 
  Note: CS53L30 counts the slot number per byte while ASoC counts the slot
  number per slot_width. So there is a difference between the slots of ASoC
  and the slots of CS53L30.
 Assuming slot_width is not supposed to be greater than 64 
 How many bytes in each ASoC slot 
 Find the first slot from LSB 
 Save the slot location by converting to CS53L30 slot 
 Create the mask of CS53L30 slot 
 Clear this slot from rx_mask 
 Error out to avoid slot shift 
 Validate the last active CS53L30 slot 
 SNDRV_PCM_RATE_KNOT -> 12000, 24000 Hz, limit with constraint list 
 Reset the Device 
 Initialize codec 
 Check if MCLK provided 
 Otherwise mark the mclk pointer to NULL 
 Fetch the MUTE control 
 Enable MUTE controls via MUTE pin 
 Flip the polarity of MUTE pin 
 Hold down reset 
 Hold down reset 
 SPDX-License-Identifier: GPL-2.0-or-later
  Driver for ADAU1361ADAU1461ADAU1761ADAU1961 codec
  Copyright 2011-2013 Analog Devices Inc.
  Author: Lars-Peter Clausen <lars@metafoo.de>
	 After any power changes have been made the dejitter circuit
	 Enable cache only mode as we could miss writes before bias level
 SPDX-License-Identifier: GPL-2.0
 rt711-sdw.c -- rt711 ALSA SoC audio driver
 Copyright(c) 2019 Realtek Semiconductor Corp.
 HD-A read 
 BRA 
 i2c debug 
 decoded HD-A 
 index registers 
 for R channel 
 index registers 
 for R channel 
 Update the status 
	
	  Perform initialization only if slave status is present and
	  hw_init flag is false
 perform IO transfers required for Slave initialization 
 first we need to allocate memory for set bits in port lists 
 BITMAP: 00010100 
 BITMAP:  00001000 
 do this again for sink now 
 set the timeout values 
 wake-up event 
 Regmap Initialization 
	
	  prevent new interrupts from being handled after the
	  deferred work completes and before the parent disables
	  interrupts on the link
 log but don't prevent suspend from happening 
 SPDX-License-Identifier: GPL-2.0
 Copyright (c) 2016, The Linux Foundation. All rights reserved.
 special event to detect accessory type 
 Voltage threshold when internal current source of 100uA is used 
 Voltage threshold when microphone bias is ON 
 ADC2 MUX 
 RDAC2 MUX 
 Analog Gain control 0 dB to +24 dB in 6 dB steps 
		
		  Special headset needs MICBIAS as 2.7V so wait for
		  50 msec for the MICBIAS to reach 2.7 volts.
 use internal 100uA Current source 
 Enable internal 2.2k Internal Rbias Resistor 
 Remove pull down on MIC BIAS2 
 enable 100uA internal current source 
 program vref ranges for all the buttons 
 split mv in to coarse parts of 100mv & fine parts of 12mv 
 enable MBHC clock 
		
		  Add delay of 10 ms to give sufficient time for the voltage
		  to shoot up and settle so that the txfe init does not
		  happen when the input voltage is changing too much.
		
		  Add delay of 12 ms before deasserting the init
		  to reduce the tx pop
 Delay to reduce ear turn off pop 
 ADC Connections 
 RDAC Connections 
 Earpiece (RX MIX1) 
 Headset (RX MIX1 and RX MIX2) 
 RX stuff 
 Speaker 
 TX 
 Analog path clocks 
 Digital path clocks 
 System Clock source 
 TX ADC and RX DAC Clock source. 
 check if its BTN0 thats released 
 handle BTN_0 specially for type detection 
 Set the detection type appropriately 
 hs insertion 
		
		  if only a btn0 press event is receive just before
		  insert event then its a 3 pole headphone else if
		  both press and release event received then its
		  a headset.
 removal 
 SPDX-License-Identifier: GPL-2.0-or-later
  ac97.c  --  ALSA Soc AC97 codec support
  Copyright 2005 Wolfson Microelectronics PLC.
  Author: Liam Girdwood <lrg@slimlogic.co.uk>
  Generic AC97 support.
 add codec as bus device for standard ac97 
 SPDX-License-Identifier: GPL-2.0-only
 Codec driver for Microsemi ZL38060 Connected Home Audio Processor.
 Copyright(c) 2020 Sven Van Asbroeck
 The ZL38060 is very flexible and configurable. This driver implements only a
 tiny subset of the chip's possible configurations:
 - DSP block bypassed: DAI        routed straight to DACs
                       microphone routed straight to DAI
 - chip's internal clock is driven by a 12 MHz external crystal
 - chip's DAI connected to CPU is I2S, and bit + frame clock master
 - chip must be strapped for "host boot": in this mode, firmware will be
   provided by this driver.
	 execution address from ihex: 32-bit little endian.
	  device register expects 32-bit big endian.
	 how to get this firmware:
	  1. request and download chip firmware from Microsemi
	     (provided by Microsemi in srec format)
	  2. convert downloaded firmware from srec to ihex. Simple tool:
	     https:gitlab.comTheSven73s3-to-irec
	  3. convert ihex to binary (.fw) using ihex2fw tool which is included
	     with the Linux kernel sources
 regular data ihex record 
 execution address ihex record 
 next ! 
	 wait for host bus interface to settle.
	  Not sure if this is required: Microsemi's vendor driver does this,
	  but the firmware manual does not mention it. Leave it in, there's
	  little downside, apart from a slower reset.
 firmware default is normal i2s 
 firmware default is normal bitclock and frame 
 always 32 bits per frame (= 16 bitschannel, 2 channels) 
	 We cannot change hw_params while the dai is already in use - the
	  software reset will corrupt the audio. However, this is not required,
	  as the chip's TDM buses are fully symmetric, which mandates identical
	  rates, channels, and samplebits for record and playback.
 chip requires a software reset to apply audio register changes 
 stereo bypass with no AEC 
 interconnects must be programmed first 
 DAC1   in <= I2S1-L 
 DAC2   in <= I2S1-R 
 I2S1-L in <= MIC1   
 I2S1-R in <= MIC1   
 AEC-S  in <= na    
 AEC-R  in <= na    
 output enables must be programmed next 
 enable I2S1 + DAC   
 get the chip to a known state by putting it in reset 
 datasheet: need > 10us for a digital + analog reset 
 take the chip out of reset 
 datasheet: need > 3ms for digital section to become stable 
 setup the cross-point switch for stereo bypass 
 setup for 12MHz crystal connected to the chip 
 sentinel  }
 sentinel  }
 SPDX-License-Identifier: GPL-2.0
 Analog Devices ADAU7118 8 channel PDM-to-I2STDM Converter driver over I2C
 Copyright 2019 Analog Devices Inc.
 SPDX-License-Identifier: GPL-2.0
 sgtl5000.c  --  SGTL5000 ALSA SoC Audio driver
 Copyright 2010-2011 Freescale Semiconductor, Inc. All Rights Reserved.
 Delay for the VAG ramp up 
 ms 
 Delay for the VAG ramp down 
 ms 
 default value of sgtl5000 registers 
 AVC: Threshold dB -> register: pre-calculated values 
 regulator supplies for sgtl5000, VDDD is an optional external supply 
 vddd is optional supply 
 sgtl5000 private structure in codec 
 sysclk rate 
 i2s master or not 
 i2s data format 
	 When VAG powering on to get local loop from Line-In, the sleep
	  is required to avoid loud pop.
 count dacadc consumers unconditional 
	
	  If the event comes from HP and Line-In is selected,
	  current action is 'DAC to be powered down'.
	  As HP_POWERUP is not set when HP muxed to line-in,
	  we need to keep VAG power ON.
	
	  This function calls when any of VAG power consumers is disappearing.
	  Thus, if there is more than one consumer at the moment, as minimum
	  one consumer will definitely stay after the end of the current
	  event.
	  Don't clear VAG_POWERUP if 2 or more consumers of VAG present:
	  - LINE_IN (for HP events)  HP (for DACADC events)
	  - DAC
	  - ADC
	  (the current consumer is disappearing right now)
	 In power down case, we need wait 400-1000 ms
	  when VAG fully ramped down.
	  As longer we wait, as smaller pop we've got.
  mic_bias power onoff share the same register bits with
  output impedance of mic bias, when power on mic bias, we
  need reclaim it to impedance value.
  0x0 = Powered off
  0x1 = 2Kohm
  0x2 = 4Kohm
  0x3 = 8Kohm
 change mic bias resistor 
		
		  Mask for HP_POWER_EVENT.
		  Muxing Headphones have to be wrapped with muteunmute
		  headphones only.
		
		  Masks for DAC_POWER_EVENTADC_POWER_EVENT.
		  Muxing DAC or ADC block have to wrapped with muteunmute
		  both headphones and line-out.
  Mute Headphone when power it updown.
  Control VAG power on HP power path.
 As manual describes, ADCDAC powering updown requires
  to mute outputs to avoid pops.
  Control VAG power on ADCDAC power path.
 input sources for ADC 
 input sources for headphone 
 input sources for DAC 
 input sources for DAP 
 input sources for DAP mix 
 aif for i2s input 
 aif for i2s output 
 routes for sgtl5000 
 line_in --> adc_mux 
 mic_in --> adc_mux 
 adc_mux --> adc 
 adc --> i2s_out 
 adc --> DAP mux 
 i2s --> DAP mux 
 DAP mux --> dap 
 adc --> DAP MIX mux 
 i2s --> DAP MIX mux 
 DAP MIX mux --> dap 
 adc --> audio mux 
 i2s --> audio mux 
 dap --> audio mux 
 audio mux --> dac 
 dac --> hp_mux 
 dac --> line_out 
 line_in --> hp_mux 
 hp_mux --> hp 
 custom function to fetch info of PCM playback volume 
  custom function to get of PCM playback volume
  dac volume register
  15-------------8-7--------------0
  | R channel vol | L channel vol |
   -------------------------------
  PCM volume with 0.5017 dB steps from 0 to -90 dB
  register values map to dB
  0x3B and less = Reserved
  0x3C = 0 dB
  0x3D = -0.5 dB
  0xF0 = -90 dB
  0xFC and greater = Muted
  register value map to userspace value
  register value	0x3c(0dB)	  0xf0(-90dB)0xfc
 			------------------------------
  userspace value	0xc0			     0
 get left channel volume 
 get right channel volume 
 make sure value fall in (0x3c,0xfc) 
 invert it and map to userspace value 
  custom function to put of PCM playback volume
  dac volume register
  15-------------8-7--------------0
  | R channel vol | L channel vol |
   -------------------------------
  PCM volume with 0.5017 dB steps from 0 to -90 dB
  register values map to dB
  0x3B and less = Reserved
  0x3C = 0 dB
  0x3D = -0.5 dB
  0xF0 = -90 dB
  0xFC and greater = Muted
  userspace value map to register value
  userspace value	0xc0			     0
 			------------------------------
  register value	0x3c(0dB)	0xf0(-90dB)0xfc
 make sure userspace volume fall in (0, 0xfc-0x3c) 
 invert it, get the value can be set to register 
 shift to get the register value 
  custom function to get AVC threshold
  The threshold dB is calculated by rearranging the calculation from the
  avc_put_threshold function: register_value = 10^(dB20)  0.636  2^15 ==>
  dB = ( fls(register_value) - 14.347 )  6.02
  As this calculation is expensive and the threshold dB values may not exceed
  0 to 96 we use pre-calculated values.
 register value 0 => -96dB 
 get dB from register value (rounded down) 
  custom function to put AVC threshold
  The register value is calculated by following formula:
                                     register_value = 10^(dB20)  0.636  2^15
  As this calculation is expensive and the threshold dB values may not exceed
  0 to 96 we use pre-calculated values.
 tlv for mic gain, 0db 20db 30db 40db 
 tlv for DAP channels, 0% - 100% - 200% 
 tlv for bass bands, -11.75db to 12.0db, step .25db 
 tlv for hp volume, -51.5db to 12.0db, step .5db 
 tlv for lineout volume, 31 steps of .5db each 
 tlv for dap avc max gain, 0db, 6db, 12db 
 tlv for dap avc threshold, 
 SOC_DOUBLE_S8_TLV with invert 
 Automatic Volume Control (DAP AVC) 
 mute the codec used by alsa core 
	
	  During 'digital mute' do not mute DAC
	  because LINE_IN would be muted aswell. We want to mute
	  only I2S block - this can be done by powering it off
 set codec format 
	
	  i2s clock and frame master setting.
	  ONLY support:
	   - clock and frame slave,
	   - clock and frame master
 setting i2s data format 
 Clock inversion 
 set codec sysclk 
  set clock according to i2s frame clock,
  sgtl5000 provides 2 clock sources:
  1. sys_mclk: sample freq can only be configured to
 	1256, 1384, 1512 of sys_mclk.
  2. pll: can derive any audio clocks.
  clock setting rules:
  1. in slave mode, only sys_mclk can be used
  2. as constraint by sys_mclk, sample freq should be set to 32 kHz, 44.1 kHz
  and above.
  3. usage of sys_mclk is preferred over pll to save power.
 sample freq 
	
	  sample freq should be divided by frame clock,
	  if frame clock is lower than 44.1 kHz, sample freq should be set to
	  32 kHz or 44.1 kHz.
 set divided factor of frame clock 
 set the sys_fs according to frame rate 
	
	  calculate the divider of mclksample_freq,
	  factor of freq = 96 kHz can only be 256, since mclk is in the range
	  of 8 MHz - 27 MHz
 if mclk does not satisfy the divider, use pll 
 if using pll, please check manual 6.4.2 for detail 
 power up pll 
 if using pll, clk_ctrl must be set after pll power up 
 otherwise, clk_ctrl must be set before pll power down 
 power down pll 
  Set PCM DAI bit size and sample rate.
  input: params_rate, params_fmt
 sysclk should already set 
 set mono to save power 
 set codec clock base on lrclk 
 set i2s data format 
  set dac bias
  common state changes:
  startup:
  off --> standby --> prepare --> on
  standby --> prepare --> on
  stop:
  on --> prepare --> standby
		
		  only support 8~48K + 96K,
		  TODO modify hw_param to support more
  This precalculated table contains all (vag_val  100  lo_calcntrl) results
  to select an appropriate lo_vol_ in SGTL5000_CHIP_LINE_OUT_VOL
  The calculatation was done for all possible register values which
  is the array index and the following formula: 10^((idx−15)40)  100
  sgtl5000 has 3 internal power supplies:
  1. VAG, normally set to vdda2
  2. charge pump, set to different value
 	according to voltage of vdda and vddio
  3. line out VAG, normally set to vddio2
  and should be set according to:
  1. vddd provided by external or not
  2. vdda and vddio voltage value. > 3.1v or not
 according to datasheet, maximum voltage of supplies 
 reset value 
 enable internal oscillator used for charge pump 
 Enable VDDC charge pump 
		
		  if vddio == vdda the source of charge pump should be
		  assigned manually to VDDIO
	
	  set ADCDAC VAG to vdda  2,
	  should stay in range (0.8v, 1.575v)
 set line out VAG to vddio  2, in range (0.8v, 1.675v) 
	
	  Set lineout output level in range (0..31)
	  the same value is used for right and left channel
	 
	  Searching for a suitable index solving this formula:
	  idx = 40  log10(vag_val  lo_cagcntrl) + 15
 See if it's just not registered yet 
 power up sgtl5000 
 enable small pop, introduce 400ms delay in turning off 
 disable short cut detector 
 enable dac volume ramp by default 
	
	  enable DAP Graphic EQ
	  TODO:
	  Add control for changing between PEQTone ControlGEQ
 Unmute DAC after start 
 return dai id 0, whatever the endpoint index 
  Write all the default values from sgtl5000_reg_defaults[] array into the
  sgtl5000 registers, to make sure we always start with the sane registers
  values as stated in the datasheet.
  Since sgtl5000 does not have a reset line, nor a reset command in software,
  we follow this approach to guarantee we always start from the default values
  and avoid problems like, not being able to probe after an audio playback
  followed by a system reset or a 'reboot' command in Linux
 Defer the probe to see if the clk will be provided later 
 Need 8 clocks before I2C accesses 
 read chip information 
 reconfigure the clocks in case we're using the PLL 
 Mute everything to avoid pop from the following power-up 
	
	  If VAG is powered-on (e.g. from previous boot), it would be disabled
	  by the write to ANA_POWER in later steps of the probe code. This
	  may create a loud pop even with all outputs muted. The proper way
	  to circumvent this is disabling the bit first and waiting the proper
	  cool-down time.
 Follow section 2.2.1.1 of AN3663 
 internal VDDD at 1.2V 
		 using external LDO for VDDD
		  Clear startup powerup and simple powerup
		  bits to save power
 default is 4Kohms 
 1250mV => 0 
 steps of 250mV 
 Ensure sgtl5000 will start with sane register values 
 sentinel  }
 SPDX-License-Identifier: GPL-2.0-or-later
  Common code for ADAU1X61 and ADAU1X81 codecs
  Copyright 2011-2014 Analog Devices Inc.
  Author: Lars-Peter Clausen <lars@metafoo.de>
		 Bypass the PLL when disabled, otherwise registers will become
 The PLL register is 6 bytes long and can only be written at once. 
	
	  If we are capturing, toggle the ADOSR bit in Converter Control 0 to
	  avoid losing SNR (workaround from ADI). This must be done after
	  the ADC(s) have been enabled. According to the data sheet, it is
	  normally illegal to set this bit when the sampling rate is 96 kHz,
	  but according to ADI it is acceptable for this workaround.
  The MUX register for the Capture and Playback MUXs selects either DSP as
  sourcedestination or one of the TDM slots. The TDM slot is selected via
  snd_soc_dai_set_tdm_slot(), so we only expose whether to go to the DSP or
  directly to the DAI interface with this control.
 The PLL register is 6 bytes long and can only be written at once. 
 fs 
 fs  6 
 fs  4 
 fs  3 
 fs  2 
 fs  1.5 
 fs  0.5 
 Set the mask to update all relevant bits in ADAU17X1_SERIAL_PORT0 
 I2S mode 
 SigmaDSP parameter memory 
 SigmaDSP parameter memory 
 SigmaDSP parameter and program memory 
 The PLL register is 6 bytes long 
	 Check if sample rate is the same as before. If it is there is no
	  point in performing the below steps as the call to
	  sigmadsp_setup(...) will return directly when it finds the sample
	  rate to be the same as before. By checking this we can prevent an
	  audiable popping noise which occours when toggling DSP_RUN.
	 write data to safeload addresses. Check if len is not a multiple of
	  4 bytes, if so we need to zero pad.
 Write target address, target address is offset by 1 
 write nbr of words to trigger address 
 Clock is optional (for the driver) 
		
		  Any valid PLL output rate will work at this point, use one
		  that is likely to be chosen later as well. The register will
		  be written when the PLL is powered up for the first time.
 SPDX-License-Identifier: GPL-2.0-or-later
  AK4104 ALSA SoC (ASoC) driver
  Copyright (c) 2009 Daniel Mack <daniel@caiaq.de>
 AK4104 registers addresses 
 Bit masks for AK4104 registers 
 set DAI format 
 This device can only be consumer 
 set the IEC958 bits: consumer mode, no copyright bit 
 set power-up and non-reset bits 
 enable transmitter 
 CONFIG_PM 
	 read the 'reserved' register - according to the datasheet, it
	  should contain 0x5b. Not a good way to verify the presence of
 SPDX-License-Identifier: GPL-2.0-or-later
  Load Analog Devices SigmaStudio firmware files
  Copyright 2009-2011 Analog Devices Inc.
  devm_sigmadsp_init_i2c() - Initialize SigmaDSP instance
  @client: The parent I2C device
  @ops: The sigmadsp_ops to use for this instance
  @firmware_name: Name of the firmware file to load
  Allocates a SigmaDSP instance and loads the specified firmware file.
  Returns a pointer to a struct sigmadsp on success, or a PTR_ERR() on error.
 SPDX-License-Identifier: GPL-2.0
 nau8822.c  --  NAU8822 ALSA Soc Audio driver
 Copyright 2017 Nuvoton Technology Crop.
 Author: David Lin <ctlin0@nuvoton.com>
 Co-author: John Hsu <kchsu0@nuvoton.com>
 Co-author: Seven Li <wtli@nuvoton.com>
 Based on WM8974.c
 The EQ parameters get function is to get the 5 band equalizer control.
  The regmap raw read can't work here because regmap doesn't provide
  value format for value width of 9 bits. Therefore, the driver reads data
  from cache and makes value format according to the endianness of
  bytes type control element.
		 conversion of 16-bit integers between native CPU format
		  and big endian format
 The EQ parameters put function is to make configuration of 5 band equalizer
  control. These configuration includes central frequency, equalizer gain,
  cut-off frequency, bandwidth control, and equalizer path.
  The regmap raw write can't work here because regmap doesn't provide
  register and value format for register with address 7 bits and value 9 bits.
  Therefore, the driver makes value format according to the endianness of
  bytes type control element and writes data to codec.
		 conversion of 16-bit integers between native CPU format
		  and big endian format
 LMAIN and RMAIN Mixer 
 AUX1 and AUX2 Mixer 
 Input PGA 
 Loopback Switch 
 LMAIN and RMAIN Mixer 
 AUX1 and AUX2 Mixer 
 Outputs 
 Boost Mixer 
 Input PGA 
 Enable Microphone Power 
 Digital Loopback 
	 Calculate the PLL 4-bit integer input and the PLL 24-bit fractional
	  input; round up the 24+4bit.
		 Configure the master clock prescaler div to make system
		  clock to approximate the internal master clock (IMCLK);
		  and large or equal to IMCLK.
 master clock from MCLK and disable PLL 
 master clock from PLL and enable PLL 
 make BCLK and LRC divide configuration if the codec as master. 
 get the bclk and fs ratio 
	 If the master clock is from MCLK, provide the runtime FS for driver
	  to get the master clock prescaler configuration.
  These registers contain an "update" bit - bit 8. This means, for example,
  that one can write new DAC digital volume for both channels, but only when
  the update bit is set, will also the volume be updated - simultaneously for
  both channels.
	
	  Set the update bit in all registers, that have one. This way all
	  writes to those registers will also cause the update bit to be
	  written.
 Reset the codec 
 SPDX-License-Identifier: GPL-2.0
  ALSA SoC TLV320AIC31xx CODEC Driver
  Copyright (C) 2014-2017 Texas Instruments Incorporated - https:www.ti.com
 	Jyri Sarha <jsarha@ti.com>
  Based on ground work by: Ajit Kulkarni <x0175765@ti.com>
  The TLV320AIC31xx series of audio codecs are low-power, highly integrated
  high performance codecs which provides a stereo DAC, a mono ADC,
  and monostereo Class-D speaker driver.
 regmap implementation requires this 
 always clears after write 
 Sticky interrupt flags 
 Sticky interrupt flags 
 Sticky interrupt flags 
 Sticky interrupt flags 
 Sticky interrupt flags 
 Sticky interrupt flags 
 output common-mode voltage 
 ADC dividers can be disabled by configuring them to 0 
 mclkp    rate  pll: j     d        dosr ndac mdac  aors nadc madc 
 8k rate 
 11.025k rate 
 16k rate 
 22.05k rate 
 32k rate 
 44.1k rate 
 48k rate 
 88.2k rate 
 96k rate 
 176.4k rate 
 192k rate 
  controls to be exported to the user space
	 HP de-pop control: apply power not immediately but via ramp
	  function with these psarameters. Note that power up sequence
	  has to wait for this to complete; this is implemented by
	  polling HP driver status in aic31xx_dapm_power_event()
 change mic bias voltage to user defined 
 turn mic bias off 
 DACs 
 HP 
 Output drivers 
 Mic Bias 
 Keep BCLKWCLK enabled even if DACADC is powered down 
 Outputs 
 Inputs 
 Output Mixers 
 Inputs 
 Input Selection to MIC_PGA 
 ADC 
 Enabling & Disabling MIC Gain Ctl 
 Output Mixers 
 AIC3111 and AIC3110 have stereo class-D amplifier 
 AIC3100 and AIC3120 have only mono class-D amplifier 
 DAC Input Routing 
 HPL path 
 HPR path 
 Left Output 
 Right Output 
 Mic input 
 Left Output 
 Right Output 
 SP L path 
 SP R path 
 SP L path 
  Always connected DAPM routes for codec clock master modes.
  If the codec is the master on the I2S bus, we need to power up components
  to have valid DAC_CLK.
  In order to have the I2S clocks on the bus either the DACsADC need to be
  enabled, or the P0R29D2 (Keep bclkwclk in power down) need to be set.
  Otherwise the codec will not generate clocks on the bus.
 Use PLL as CODEC_CLKIN and DAC_CLK as BDIV_CLKIN 
 See bellow for details how fix this. 
		 This is fine if using dsp format, but if using i2s
		   there may be trouble. To fix the issue edit the
		   aic31xx_divs table for your mclk and sample
		   rate. Details can be found from:
		   https:www.ti.comlitdssymlinktlv320aic3100.pdf
		   Section: 5.6 CLOCK Generation and PLL
 PLL configuration 
 DAC dividers configuration 
 ADC dividers configuration. Write reset value 1 if not used. 
 Bit clock divider configuration. 
		
		  Remove the DAPM route(s) for codec clock master modes,
		  if applied
		
		  Add the needed DAPM route(s) for codec clock master modes,
		  if it is not done already
 set masterslave audio interface 
 signal polarity 
 interface format 
		
		  NOTE: This CODEC samples on the falling edge of BCLK in
		  DSP mode, this is inverted compared to what most DAIs
		  expect, so we invert for this mode
 set clock on MCLK, BCLK, or GPIO1 as PLL input 
		
		  Put codec to reset and as at least one of the
		  supplies was disabled.
 At least 10ns 
 At least 1ms 
 Reset device registers for a consistent power-on like state 
	
	  The jack detection configuration is in the same register
	  that is used to report jack detect status so is volatile
	  and not covered by the cache sync, restore it separately.
 EnableDisable jack detection 
 set output common-mode voltage 
 CONFIG_OF 
 OCMV setting is forced by DT 
 SPDX-License-Identifier: GPL-2.0
 ALSA SoC Texas Instruments TAS2770 20-W Digital Input Mono Class-D
 Audio Amplifier with Speaker IV Sense
 Copyright (C) 2016-2017 Texas Instruments Incorporated - https:
	Author: Tracy Yi <tracy-yi@ti.com>
	Frank Shi <shifu0704@thundersoft.com>
 Do not change slot width 
 regmap implementation requires this 
 always clears after write 
 has a self clearing bit 
 Sticky interrupt flags 
 Sticky interrupt flags 
 SPDX-License-Identifier: GPL-2.0-only
  I2S MEMS microphone driver for InvenSense ICS-43432 and similar
  MEMS-based microphones.
  - Non configurable.
  - I2S interface, 64 BCLs per frame, 32 bits per channel, 24 bit data
  Copyright (c) 2015 Axis Communications AB
 Hz, from data sheet 
 Hz, from data sheet 
 SPDX-License-Identifier: GPL-2.0-only
 nau8315.c  --  NAU8315 ALSA SoC Audio Amplifier Driver
 Copyright 2020 Nuvoton Technology Crop.
 Author: David Lin <ctlin0@nuvoton.com>
 Based on MAX98357A.c
 SPDX-License-Identifier: GPL-2.0+
 DA7210 ALSA Soc codec driver
 Copyright (c) 2009 Dialog Semiconductor
 Written by David Chen <Dajun.chen@diasemi.com>
 Copyright (C) 2009 Renesas Solutions Corp.
 Cleanups by Kuninori Morimoto <morimoto.kuninori@renesas.com>
 Tested on SuperH Ecovec24 board with S16S24 LE in 48KHz using I2S
 DA7210 register space 
 STARTUP1 bit fields 
 MIC_L bit fields 
 MIC_R bit fields 
 INMIX_L bit fields 
 INMIX_R bit fields 
 ADC bit fields 
 DACADC HPF fields 
 DAC_SEL bit fields 
 OUTMIX_L bit fields 
 OUTMIX_R bit fields 
 HP_CFG bit fields 
 DAI_SRC_SEL bit fields 
 DAI_CFG1 bit fields 
 DAI_CFG3 bit fields 
PLL_DIV3 bit fields 
 PLL bit fields 
 SOFTMUTE bit fields 
 CONTROL bit fields 
 IN_GAIN bit fields 
 ZERO_CROSS bit fields 
 AUX1_L bit fields 
 AUX1_R bit fields 
 AUX2 bit fields 
 Minimum INPGA and AUX1 volume to enable noise suppression 
 10.5dB 
 6dB 
 OUT1_L bit fields 
 OUT1_R bit fields 
 OUT2 bit fields 
 0 = slave, 1 = master 
 PLL dividers table 
 for MASTER mode, fs = 44.1Khz 
 MCLK=12Mhz 
 MCLK=13Mhz 
 MCLK=13.5Mhz 
 MCLK=14.4Mhz 
 MCLK=19.2Mhz 
 MCLK=19.68Mhz 
 MCLK=19.8Mhz 
 for MASTER mode, fs = 48Khz 
 MCLK=12Mhz 
 MCLK=13Mhz 
 MCLK=13.5Mhz 
 MCLK=14.4Mhz 
 MCLK=19.2Mhz 
 MCLK=19.68Mhz 
 MCLK=19.8Mhz 
 for SLAVE mode with SRM 
 MCLK=12Mhz 
 MCLK=13Mhz 
 MCLK=13.5Mhz 
 MCLK=14.4Mhz 
 MCLK=19.2Mhz 
 MCLK=19.68Mhz 
 MCLK=19.8Mhz  
  Playback Volume
  max		: 0x3F (+15.0 dB)
 		   (1.5 dB step)
  min		: 0x11 (-54.0 dB)
  mute		: 0x10
  reserved	: 0x00 - 0x0F
  Reserved area are considered as "mute".
 -54 dB to +15 dB 
 -54dB to 15dB 
 -18dB to 6dB 
 -48dB to 21dB 
 ADC and DAC high pass filter f0 value 
 ADC and DAC voice (8kHz) high pass cutoff value 
 ALC can be enabled only if noise suppression is disabled 
 Check if noise suppression is enabled 
 If all conditions are met or we are actually disabling ALC 
 Noise suppression can be enabled only if following conditions are met
   ALC disabled
   ZC enabled for HP and AUX1 PGA
   INPGA_L_VOL and INPGA_R_VOL >= 10.5 dB
   AUX1_L_VOL and AUX1_R_VOL >= 6 dB
 Check if ALC is enabled 
 Check ZC for HP and AUX1 PGA 
 Check INPGA_L_VOL and INPGA_R_VOL 
 Check AUX1_L_VOL and AUX1_R_VOL 
 If all conditions are met or we are actually disabling Noise sup 
 DAC Equalizer  controls 
 ADC Equalizer  controls 
 Mute controls 
 Zero cross controls 
 ALC controls 
  DAPM Controls
  Current DAPM implementation covers almost all codec components e.g. IOs,
  mixers, PGAs,ADC and DAC.
 In Mixer Left 
 In Mixer Right 
 Out Mixer Left 
 Out Mixer Right 
 Mono Mixer 
 DAPM widgets 
 Input Side 
 Input Lines 
 Input PGAs 
 MICBIAS 
 Input Mixers 
 ADCs 
 Output Side 
 DACs 
 Output Mixers 
 Output PGAs 
 Output Lines 
 DAPM audio route definition 
 Dest       Connecting Widget    source 
 Input path 
 Output path 
 Codec private data 
  Set PCM DAI word length.
 set DAI source to Left and Right ADC 
 Enable DAI 
 Disable active mode 
 PLL mode, disable PLL bypass 
 PLL slave mode, also enable SRM 
 PLL bypass mode, enable PLL bypass and Auto Detection 
 Enable active mode 
  Set DAI mode and Format
	 FIXME
	 
	  It support I2S only now
	 FIXME
	 
	  It support 64bit data transmission only now
  da7210_set_dai_pll	:Configure the codec PLL
  @codec_dai: pointer to codec DAI
  @pll_id: da7210 has only one pll, so pll_id is always zero
  @source: clock source
  @fref: MCLK frequency, should be < 20MHz
  @fout: FsDM value, Refer page 44 & 45 of datasheet
  Note: Supported PLL input frequencies are 12MHz, 13MHz, 13.5MHz, 14.4MHz,
        19.2MHz, 19.6MHz and 19.8MHz
  Return: Zero for success, negative error code for error
 In slave mode, there is only one set of divisors 
 Search pll div array for correct divisors 
 check fref, mode  and fout 
 all match, pick up divisors 
 Disable active mode 
 Write PLL dividers 
 Enable PLL 
 Enable active mode 
 DAI operations 
 playback capabilities 
 capture capabilities 
 This will be set from set_sysclk() 
 This will be set from set_fmt() 
 Enable internal regulator & bias current 
	
	  ADC settings
 Enable Left & Right MIC PGA and Mic Bias 
 Enable Left and Right input PGA 
 Enable Left and Right ADC 
	
	  DAC settings
 Enable Left and Right DAC 
 Enable Left and Right out PGA 
 Enable Left and Right HeadPhone PGA 
 Enable ramp mode for DAC gain update 
	
	  For DA7210 codec, there are two ways to enabledisable analog IOs
	  and ADCDAC,
	  (1) Using "Enable Bit" of register associated with that IO
	  (or ADCDAC)
	 	e.g. Mic Left can be enabled using bit 7 of MIC_L(0x7) reg
	 
	  (2) Using "Standby Bit" of STARTUP2 or STARTUP3 register
	 	e.g. Mic left can be put to STANDBY using bit 0 of STARTUP3(0x5)
	 
	  Out of these two methods, the one using STANDBY bits is preferred
	  way to enabledisable individual blocks. This is because STANDBY
	  registers are part of system controller which allows system power
	  updown in a controlled, pop-free manner. Also, as per application
	  note of DA7210, STANDBY register bits are only effective if a
	  particular IO (or ADCDAC) is already enabled using enabledisable
	  register bits. Keeping these things in mind, current DAPM
	  implementation manipulates only STANDBY bits.
	 
	  Overall implementation can be outlined as below,
	 
	  - "Enable bit" of an IO or ADCDAC is used to enable it in probe()
	  - "STANDBY bit" is controlled by DAPM
 Enable Line out amplifiers 
 Enable Aux1 
 Enable Aux2 
 Set PLL Master clock range 10-20 MHz, enable PLL bypass 
 Diable PLL and bypass it 
 Activate all enabled subsystem 
 System controller master disable 
 Set PLL Master clock range 10-20 MHz 
 to unlock 
 to re-lock 
 I2C codec control layer 
 Dummy read to give two pulses over nCS for SPI 
 System controller master disable 
 Set PLL Master clock range 10-20 MHz 
 to set PAGE1 of SPI register space 
 to unlock 
 to re-lock 
 to set back PAGE0 of SPI register space 
 SPDX-License-Identifier: GPL-2.0
 Analog Devices SSM2305 Amplifier Driver
 Copyright (C) 2018 Pengutronix, Marco Felsch <kernel@pengutronix.de>
 shutdown gpio  
 Stereo inputoutput 
 Allocate the private data 
 Get shutdown gpio 
 SPDX-License-Identifier: GPL-2.0-only
  da732x.c --- Dialog DA732X ALSA SoC Audio Driver
  Copyright (C) 2012 Dialog Semiconductor GmbH
  Author: Michal Hajduk <Michal.Hajduk@diasemi.com>
  da732x register cache - default settings
 High Pass Filter 
 Input PGAs 
 MICs 
 AUXs 
 ADCs 
 DACs 
 High Pass Filters 
 Equalizers 
 Lineout 2 Reciever
 Lineout 3 SPEAKER
 Lineout 4 
 Headphones 
 ADC1LMUX 
 ADC1RMUX 
 ADC2LMUX 
 ADC2RMUX 
 Supplies 
 Micbias 
 Inputs 
 Outputs 
 ADCs 
 DACs 
 Input Pgas 
 MUXs 
 AIF interfaces 
 Inputs 
 Capture Path 
 Output Pgas 
 Outputs 
 Clock inversion 
 Disable PLL 
 Validate Sysclk rate 
 Initialize DAC offset calibration circuits and registers 
 Wait for voltage stabilization 
 Check DAC offset sign 
 Binary search DAC offset values (both channels at once) 
 Write final DAC offsets to registers 
 End DAC calibration mode 
 Initialize output offset calibration circuits and registers  
 Wait for voltage stabilization 
 Check output offset sign 
 Binary search output offset values (both channels at once) 
 Write final DAC offsets to registers 
 Make sure that we have Soft Mute enabled 
 Init Codec 
 Disable Fast Charge and enable DAC ref voltage 
 Enable bypass DSP routing 
 Enable Digital subsystem 
 Enable Zero Crossing 
 SPDX-License-Identifier: GPL-2.0-only
 Copyright (c) 2018-2020, The Linux Foundation. All rights reserved.
 TX Macro 
 Update volatile list for txtx macros 
 9.6MHz MCLK, set value 0x00 if other frequency 
 Minimum 1 clk cycle delay is required as per HW spec 
 Enable TX PGA Mute 
 Minimum 1 clk cycle delay is required as per HW spec 
 schedule work queue to Remove Mute 
			
			  6ms delay is required as per HW spec
 apply gain after decimator is enabled 
				
				  Minimum 1 clk cycle delay is required
				  as per HW spec
 Enable swr mic0 and mic1 clock 
 Update defaults for lpass sc7280 
 set MCLK and NPL rates 
 SPDX-License-Identifier: GPL-2.0
 rt1308-sdw.c -- rt1308 ALSA SoC audio driver
 Copyright(c) 2019 Realtek Semiconductor Corp.
 Bus clock frequency 
 first we need to allocate memory for set bits in port lists 
 BITMAP: 00010100 (not enable yet) 
 BITMAP:  00000010 
 for sink 
 set the timeout values 
	
	  PM runtime is only enabled when a Slave reports as Attached
 set autosuspend parameters 
 update count of parent 'active' children 
 make sure the device does not suspend immediately 
 sw reset 
 read efuse 
 initial settings 
 Mark Slave initialization complete 
 Update the status 
	
	  Perform initialization only if slave status is present and
	  hw_init flag is false
 perform IO transfers required for Slave initialization 
 I2S Data Channel Selection 
 Audio Interface 
 Supply Widgets 
 Digital Interface 
 Output Lines 
 Use tx_mask or rx_mask to configure stream tag and set dma_data 
 slot_width is not used since it's irrelevant for SoundWire 
 SoundWire specific configuration 
 port 1 for playback 
  slave_ops: callbacks for get_clock_stop_mode, clock_stop and
  port_prep are not defined for now
	
	  Mark hw_init to false
	  HW init will be performed when device reports present
 Regmap Initialization 
 SPDX-License-Identifier: GPL-2.0
  Copyright 2011-2019 NW Digital Radio
  Author: Annaliese McDermond <nh6z@nh6z.net>
  Based on soundsoccodecswm8974 and TI driver for kernel 2.6.27.
 sentinel  }
 senitel  }
 SPDX-License-Identifier: GPL-2.0-only
  max98925.c -- ALSA SoC Stereo MAX98925 driver
  Copyright 2013-15 Maxim Integrated Products
 IRQ Enable0 
 IRQ Enable1 
 IRQ Enable2 
 IRQ Clear0 
 IRQ Clear1 
 IRQ Clear2 
 Map0 
 Map1 
 Map2 
 Map3 
 Map4 
 Map5 
 Map6 
 Map7 
 Map8 
 DAI Clock Mode 1 
 DAI Clock Mode 2 
 DAI Clock Divider Denominator MSBs 
 DAI Clock Divider Denominator LSBs 
 DAI Clock Divider Numerator MSBs 
 DAI Clock Divider Numerator LSBs 
 Format 
 TDM Slot Select 
 DOUT Configuration VMON 
 DOUT Configuration IMON 
 DOUT Configuration VBAT 
 DOUT Configuration VBST 
 DOUT Configuration FLAG 
 DOUT HiZ Configuration 1 
 DOUT HiZ Configuration 2 
 DOUT HiZ Configuration 3 
 DOUT HiZ Configuration 4 
 DOUT Drive Strength 
 Filters 
 Gain 
 Gain Ramping 
 Speaker Amplifier 
 Threshold 
 ALC Attack 
 ALC Atten and Release 
 ALC Infinite Hold Release 
 ALC Configuration 
 Boost Converter 
 Block Enable 
 Configuration 
 Global Enable 
 Boost Limiter 
 codec sample rate and nm dividers parameter table 
 set VMON slots 
 set IMON slots 
 set DAI to slave mode 
		
		  set left channel DAI to master mode,
		  right channel always slave
 BCLKLRCLK ratio calculation 
 set DAI_SR to correct LRCLK frequency 
 set DAI m divider 
 set DAI n divider 
 set MDLL 
 use MCLK for Left channel, right channel always BCLK 
 configure dai clock source to BCLK instead of MCLK 
 It's not the default but we need to set DAI_DLY 
 Disable ALC muting 
 SPDX-License-Identifier: GPL-2.0-only
 rt5682.c  --  RT5682 ALSA SoC audio component driver
 Copyright 2018 Realtek Semiconductor Corp.
 Author: Bard Liao <bardliao@realtek.com>
 {0, +20, +24, +30, +35, +40, +44, +50, +52} dB 
 Interface data select 
  rt5682_sel_asrc_clk_src - select ASRC clock source for a set of filters
  @component: SoC audio component device.
  @filter_mask: mask of filters.
  @clk_src: clock source
  The ASRC function is for asynchronous MCLK and LRCK. Also, since RT5682 can
  only support standard 32fs or 64fs i2s format, ASRC should be enabled to
  support special i2s clock format such as Intel's 100fs(100  sampling rate).
  ASRC function will track i2s clock and generate a corresponding system clock
  for codec. This function provides an API to select the clock source for a
  set of filters specified by the mask. And the component driver will turn on
  ASRC for these filters if ASRC is selected as their clock source.
  rt5682_headset_detect - Detect headset.
  @component: SoC audio component device.
  @jack_insert: Jack insert or not.
  Detect whether is headset or not when jack inserted.
  Returns detect status.
 jack in 
 jack was out, report jack type 
 jack is already in, report button event 
			
			  rt5682 can report three kinds of button behavior,
			  one click, double click and hold. However,
			  currently we will report button pressedreleased
			  event. So all the three button behaviors are
			  treated as button pressed.
 unpressed 
 jack out 
 DAC Digital Volume 
 IN Boost Volume 
 ADC Digital Volume Control 
 ADC Boost Volume Control 
  set_dmic_clk - Set parameter of dmic.
  @w: DAPM widget.
  @kcontrol: The kcontrol of this widget.
  @event: Event id.
  Choose dmic clock between 1MHz and 3MHz.
  It is better for clock to approximate 3MHz.
 select over sample rate 
 Digital Mixer 
 Analog Input Mixer 
 STO1 ADC1 Source 
 MX-26 [13] [5] 
 STO1 ADC Source 
 MX-26 [11:10] [3:2] 
 STO1 ADC2 Source 
 MX-26 [12] [4] 
 MX-79 [6:4] I2S1 ADC data location 
 Analog DAC L1 Source, Analog DAC R1 Source
 MX-2B [4], MX-2B [0]
 Out Switch 
Add delay to avoid pop noise
 ASRC 
 Input Side 
 Input Lines 
 Boost 
 REC Mixer 
 ADCs 
 ADC Mux 
 ADC Mixer 
 ADC PGA 
 Digital Interface 
 Digital Interface Select 
 Audio Interface 
 Output Side 
 DAC mixer before sound effect  
 DAC channel Mux 
 DAC Mixer 
 DACs 
 HPO 
 CLK DET 
 Output Lines 
PLL
ASRC
Vref
 mono mode 
 mono mode 
		
		  PLL2 concatenates 2 PLL units.
		  We suggest the Fout of the front PLL is 3.84MHz.
	
	  Only accept to set wclk rate to 44.1k or 48kHz.
	
	  Only accept to set wclk rate to 44.1k or 48kHz.
	  It will force to 48kHz if not both.
	
	  Whether the wclk's parent clk (mclk) exists or not, please ensure
	  it is fixed or set to 48MHz before setting wclk rate. It's a
	  temporary limitation. Only accept 48MHz clk as the clk provider.
	 
	  It will set the codec anyway by assuming mclk is 48MHz.
	
	  To achieve the rate conversion from 48MHz to 44.1k or 48kHz,
	  PLL2 is needed.
	
	  BCLK rates are set as a multiplier of WCLK in HW.
	  We don't allow changing the parent WCLK. We just do
	  some rounding down based on the parent WCLK rate
	  and find the appropriate multiplier of BCLK to
	  get the rounded down BCLK value.
 Make MCLK the parent of WCLK 
 Make WCLK the parent of BCLK 
 CONFIG_COMMON_CLK 
 enter SAR ADC power saving mode 
 restore settings 
 SPDX-License-Identifier: GPL-2.0-or-later
  CS4271 ASoC codec driver
  Copyright (c) 2010 Alexander Sverdlin <subaparts@yandex.ru>
  This driver support CS4271 codec being master or slave, working
  in control port mode, connected either via SPI or I2C.
  The data format accepted is I2S or left-justified.
  DAPM support not implemented.
  CS4271 registers
 Mode Control 1 
 DAC Control 
 DAC Volume & Mixing Control 
 DAC Channel A Volume Control 
 DAC Channel B Volume Control 
 ADC Control 
 Mode Control 2 
 Chip ID 
 Bit masks for the CS4271 registers 
  Default CS4271 power-up configuration
  Array contains non-existing in hw register at address 0
  Array do not include Chip ID, as codec driver does not use
  registers read operations at all
 Current sample rate for de-emphasis control 
 GPIO driving Reset pin, if any 
 GPIO that disable serial bus, if any 
 enable soft reset workaround 
  @freq is the desired MCLK rate
  MCLK rate should (c) be the sample rate, multiplied by one of the
  ratios listed in cs4271_mclk_fs_ratios table
 Find closest de-emphasis freq 
 codec mode 
 codec speed mode: 1x, 2x, 4x 
 MCLK  sample rate 
 ratio bit mask for Master mode 
		
		  Put the codec in soft reset and back again in case it's not
		  currently streaming data. This way of bringing the codec in
		  sync to the current clocks is not explicitly documented in
		  the data sheet, but it seems to work fine, and in contrast
		  to a read hardware reset, we don't have to sync back all
		  registers every time.
 Configure DAC 
 CS4271 controls 
 Set power-down bit 
 Do a proper reset after power up 
 Restore codec state 
 then disable the power-down bit 
 CONFIG_PM 
 Reset codec 
 Power-up sequence requires 85 uS 
 Set codec to the reset state 
 SPDX-License-Identifier: GPL-2.0
  Texas Instruments PCM186x Universal Audio ADC - SPI
  Copyright (C) 2015-2017 Texas Instruments Incorporated - https:www.ti.com
 	Andreas Dannenberg <dannenberg@ti.com>
 	Andrew F. Davis <afd@ti.com>
 SPDX-License-Identifier: GPL-2.0-or-later
  ads117x.c  --  Driver for ads11748 ADC chips
  Copyright 2009 ShotSpotter Inc.
  Author: Graeme Gregory <gg@slimlogic.co.uk>
 ADC 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2011 LAPIS Semiconductor Co., Ltd.
 Digital volume MUTE On 
 Digital volume MUTE Off 
 For mono (Telecodec) 
 ML26124 configuration 
 Input mux 
 Supply 
 output mixer 
 outputs 
 input 
 PLLOutputFreq(Hz) = InputMclkFreq(Hz)  PLLM  (PLLN  PLLDIV) 
 CLOCK control Register 
 Sampling Rate 
 PLL NL 
 PLLNH 
 PLLML 
 MLLMH 
 PLLDIV 
 Clock Enable 
 CLK InputOutput Control 
 System Control Register 
 Software RESET 
 RecordPlayback Run 
 Mic InputOutput control 
 Power Management Register 
 Reference Power Management 
 Input Power Management 
 DAC Power Management 
 SP-AMP Power Management 
 LINEOUT Power Management 
 VIDEO Power Management 
 AC-CMP Power Management 
 Analog reference Control Register 
 MICBIAS Voltage Control 
 InputOutput Amplifier Control Register 
 MIC Input Volume 
 Mic Boost Volume 
 Speaker AMP Volume 
 AMP Volume Control Function Enable 
 Amplifier Volume Fader Control 
 Analog Path Control Register 
 Speaker AMP Output Control 
 Mic IF Control 
 Mic Select Control 
 Audio Interface Control Register 
 SAI-Trans Control 
 SAI-Receive Control 
 SAI Mode select 
 DSP Control Register 
 Filter Func Enable 
 Volume Control Func Enable 
 Mixer & Volume Control
 Record Digital Volume 
 Playback Digital Volume 
 Digital Boost Volume 
 EQ gain Band0 
 EQ gain Band1 
 EQ gain Band2 
 EQ gain Band3 
 EQ gain Band4 
 HPF2 CutOff
 EQ Band0 Coef0L 
 EQ Band0 Coef0H 
 EQ Band0 Coef0L 
 EQ Band0 Coef0H 
 EQ Band1 Coef0L 
 EQ Band1 Coef0H 
 EQ Band1 Coef0L 
 EQ Band1 Coef0H 
 EQ Band2 Coef0L 
 EQ Band2 Coef0H 
 EQ Band2 Coef0L 
 EQ Band2 Coef0H 
 EQ Band3 Coef0L 
 EQ Band3 Coef0H 
 EQ Band3 Coef0L 
 EQ Band3 Coef0H 
 EQ Band4 Coef0L 
 EQ Band4 Coef0H 
 EQ Band4 Coef0L 
 EQ Band4 Coef0H 
 ALC Control Register 
 ALC Mode 
 ALC Attack Time 
 ALC Decay Time 
 ALC Hold Time 
 ALC Target Level 
 ALC MaxMin Gain 
 Noise Gate Threshold 
 ALC ZeroCross TimeOut 
 Playback Limiter Control Register 
 PL Attack Time 
 PL Decay Time 
 PL Target Level 
 PL MaxMin Gain 
 Playback Boost Volume 
 PL ZeroCross TimeOut 
 Video Amplifier Control Register 
 VIDEO AMP Gain Control 
 VIDEO AMP Setup 1 
 VIDEO AMP Control2 
 Get sampling rate value of sampling rate setting register (0x0) 
 set masterslave audio interface 
 interface format 
 clock inversion 
 VMID ON 
 VMID OFF 
 Software Reset 
 SPDX-License-Identifier: GPL-2.0-only
  Driver for ADAU1372 codec
  Copyright 2016 Analog Devices Inc.
   Author: Lars-Peter Clausen <lars@metafoo.de>
	
	  To get the device into SPI mode CLATCH has to be pulled low three
	  times.  Do this by issuing three dummy reads.
 SPDX-License-Identifier: GPL-2.0
 Ingenic JZ4770 CODEC driver
 Copyright (C) 2012, Maarten ter Huurne <maarten@treewalker.org>
 Copyright (C) 2019, Paul Cercueil <paul@crapouillou.net>
 ICDC internal register access control register(RGADW) 
 ICDC internal register data output register (RGDATA)
 Internal register space, accessed through regmap 
 codec private data 
 Reset all interrupt flags. 
	
	  SYSCLK output from the codec to the AIC is required to keep the
	  DMA transfer going during playback when all audible outputs have
	  been disabled.
 do nothing 
 clear GUPGDO flag 
 unit: 0.01dB 
 Unconditional controls. 
 record gain control 
		
		  NOTE: DACRDACL are inversed; the gain value written to DACR
		  seems to affect the left channel, and the gain value written
		  to DACL seems to affect the right channel.
 HPRHPL inversed for the same reason as above 
 unmute HP 
 wait for ramp-up complete (RUP) 
 clear RUP flag 
 mute HP 
 clear RDO flag 
 Unconditional routes. 
 Collect updates for later sending. 
 default HP output to PCM 
 default line output to PCM 
 Disable stereo mic 
 Set mic 1 as default source for ADC 
 ADCDAC: serial + i2s 
 The generated IRQ is a high level 
 12M oscillator 
 0: 16ohm220uF, 1: 10kohm1uF 
 disable automatic gain 
 Disable DAC lrswap 
 Independent LR DAC gain control 
 Disable ADC lrswap 
 default to cap-less mode(0) 
 Send collected updates. 
 wait 6+ cycles 
 sentinel  }
 SPDX-License-Identifier: GPL-2.0-or-later
  LM4857 AMP driver
  Copyright 2007 Wolfson Microelectronics PLC.
  Author: Graeme Gregory
          graeme.gregory@wolfsonmicro.com
  Copyright 2011 Lars-Peter Clausen <lars@metafoo.de>
 The register offsets in the cache array 
 the shifts required to set these bits 
 SPDX-License-Identifier: GPL-2.0-only
  SSM2602SSM2603SSM2604 I2C audio driver
  Copyright 2014 Analog Devices Inc.
  ssm2602 2 wire address is determined by GPIO5
  state during powerup.
     low  = 0x1a
     high = 0x1b
 SPDX-License-Identifier: GPL-2.0-or-later
  Driver for ADAU1701 SigmaDSP processor
  Copyright 2011 Analog Devices Inc.
  Author: Lars-Peter Clausen <lars@metafoo.de>
 	based on an inital version by Cliff Cai <cliff.cai@analog.com>
 fallback 
 minimum reset time is 20ns 
 power-up time may be as long as 85ms 
	
	  Postpone the firmware download to a point in time when we
	  know the correct PLL setup
	
	  If the mclklrclk ratio changes, the chip needs updated PLL
	  mode GPIO settings, and a full reset cycle, including a new
	  firmware upload.
 master, 64-bits per sample, 1 frame per sample 
 clock inversion 
 Enable VREF and VREF buffer 
 Disable VREF and VREF buffer 
	
	  Let the pll_clkdiv variable default to something that won't happen
	  at runtime. That way, we can postpone the firmware download from
	  adau1701_reset() to a point in time when we know the correct PLL
	  mode parameters.
 initalize with pre-configured pll mode settings 
 set up pin config 
 CONFIG_PM 
 SPDX-License-Identifier: GPL-2.0-only
  Analog Devices ADAU1372 Audio Codec driver
  Copyright 2016 Analog Devices Inc.
  Author: Lars-Peter Clausen <lars@metafoo.de>
 8k, 12k, 24k, 48k 
 + 16k, 96k 
 +32k 
 + 192k 
 I2S mode 
 The other settings dont matter in I2S mode 
 We have 8 channels anything outside that is not supported 
 Mask is inverted in hardware 
 Takes about 1ms to lock 
		
		  Clocks needs to be enabled before any other register can be
		  accessed.
			
			  This will turn everything off and reset the register
			  map. No need to do any register writes to manually
			  turn things off.
	
	  The datasheet says that the internal MCLK always needs to run at
	  12.288MHz. Automatically choose a valid configuration from the
	  external clock.
	
	  Most of the registers are inaccessible unless the internal clock is
	  enabled.
	
	  No pinctrl support yet, put the multi-purpose pins in the most
	  sensible mode for general purpose CODEC operation.
 SDATA OUT 
 CLOCKOUT 
 CLOCK OUT 
 SPDX-License-Identifier: GPL-2.0-only
 ALSA SoC Audio driver for CS47L15 codec
 Copyright (C) 2016-2019 Cirrus Logic, Inc. and
                         Cirrus Logic International Semiconductor Ltd.
 Mid-mode registers 
 Set IN1 to normal mode 
 Set IN1 to LP mode 
  mux_in widgets : arranged in the order of sources
  specified in MADERA_MIXER_INPUT_ROUTES
 end of ordered widget list 
 Internal clock domains 
 quick exit if Madera irqchip driver hasn't completed probe 
 Latch volume update bits 
 SPDX-License-Identifier: GPL-2.0
 PCM3060 SPI driver
 Copyright (C) 2018 Kirill Marinushkin <kmarinushkin@birdec.com>
 CONFIG_OF 
 CONFIG_OF 
 SPDX-License-Identifier: GPL-2.0-only
 Copyright (c) 2010-2011,2013-2015 The Linux Foundation. All rights reserved.
  max98357a.c -- MAX98357A ALSA SoC Codec driver
 SPDX-License-Identifier: GPL-2.0-only
  uda134x.c  --  UDA134X ALSA SoC Codec driver
  Modifications by Christian Pellegrin <chripell@evolware.org>
  Copyright 2007 Dension Audio Systems Ltd.
  Author: Zoltan Devai
  Based on the WM87xx drivers by Liam Girdwood and Richard Purdie
  Write to the uda134x registers
 It's an extended address register 
 set SYSCLK  fs ratio 
 set DAI format and word length 
	 Anything between 256fs8Khz and 512fs48Khz should be acceptable
	   because the codec is slave. Of course limitations of the clock
	   master (the IIS controller) apply.
 codec supports only full slave mode 
 no support for clock inversion 
 We can't setup DAI format here as it depends on the word bit num 
 so let's just store the value for later 
 power on 
 power off 
 UDA1341 has the DACADC power down in STATUS1 
 UDA134045 has the DACADC pwoer down in DATA0 11 
 Common DAPM widgets 
 playback capabilities 
 capture capabilities 
 pcm operations 
 SPDX-License-Identifier: GPL-2.0-only
  cs42l56.c -- CS42L51 ALSA SoC I2C audio driver
  Copyright 2014 CirrusLogic, Inc.
  Author: Brian Austin <brian.austin@cirrus.com>
 SPDX-License-Identifier: GPL-2.0-or-later
  ALSA Soc PCM3008 codec support
  Author:	Hugo Villeneuve
  Copyright (C) 2008 Lyrtech inc
  Based on AC97 Soc codec, original copyright follow:
  Copyright 2005 Wolfson Microelectronics PLC.
  Generic PCM3008 support.
	 DEM1  DEM0  DE-EMPHASIS_MODE
	  Low   Low   De-emphasis 44.1 kHz ON
	  Low   High  De-emphasis OFF
	  High  Low   De-emphasis 48 kHz ON
	  High  High  De-emphasis 32 kHz ON
 Configure DEM0 GPIO (turning OFF DAC De-emphasis). 
 Configure DEM1 GPIO (turning OFF DAC De-emphasis). 
 Configure PDAD GPIO. 
 Configure PDDA GPIO. 
 SPDX-License-Identifier: GPL-2.0-only
  rt5645.c  --  RT5645 ALSA SoC audio codec driver
  Copyright 2013 Realtek Semiconductor Corp.
  Author: Bard Liao <bardliao@realtek.com>
 IN2 can optionally be differential 
 0 = IN2N; 1 = GPIO5; 2 = GPIO11 
 0 = IN2P; 1 = GPIO6; 2 = GPIO10; 3 = GPIO12 
 Use level triggered irq 
 Invert JD1_1 status polarity 
 Invert HP detect status polarity 
 Value to assign to snd_soc_card.long_name 
 Some (package) variants have the headset-mic pin not-connected 
 {0, +20, +24, +30, +35, +40, +44, +50, +52} dB 
 {-6, -4.5, -3, -1.5, 0, 0.82, 1.58, 2.28} dB 
 The final setting of the table should be RT5645_EQ_CTRL2 
 Speaker Output Volume 
 ClassD modulator Speaker Gain Ratio 
 Headphone Output Volume 
 OUTPUT Control 
 DAC Digital Volume 
 IN1IN2 Control 
 INLINR Volume Control 
 ADC Digital Volume Control 
 ADC Boost Volume Control 
 I2S2 function select 
 Digital Soft Volume Control 
  set_dmic_clk - Set parameter of dmic.
  @w: DAPM widget.
  @kcontrol: The kcontrol of this widget.
  @event: Event id.
  rt5645_sel_asrc_clk_src - select ASRC clock source for a set of filters
  @component: SoC audio component device.
  @filter_mask: mask of filters.
  @clk_src: clock source
  The ASRC function is for asynchronous MCLK and LRCK. Also, since RT5645 can
  only support standard 32fs or 64fs i2s format, ASRC should be enabled to
  support special i2s clock format such as Intel's 100fs(100  sampling rate).
  ASRC function will track i2s clock and generate a corresponding system clock
  for codec. This function provides an API to select the clock source for a
  set of filters specified by the mask. And the codec driver will turn on ASRC
  for these filters if ASRC is selected as their clock source.
 Digital Mixer 
 Analog Input Mixer 
DAC1 LR source 
DAC2 LR source 
 Stereo1 ADC source 
 MX-27 [12] 
 MX-27 [11] 
 MX-27 [8] 
 Mono ADC source 
 MX-28 [12] 
 MX-28 [11] 
 MX-28 [8] 
 MX-28 [1:0] 
 MX-28 [4] 
 MX-28 [3] 
 MX-77 [9:8] 
 MX-78 [4:0] 
 MX-78 [15:14][13:12][11:10] 
 MX-77 [7:6][5:4][3:2] 
 MX-79 [14:12][10:8][6:4][2:0] 
 MX-7a [14:12][10:8][6:4][2:0] 
 MX-2d [3] [2] 
 MX-2d [1] [0] 
 MX-2F [13:12] 
 MX-31 [15] [13] [11] [9] 
 MX-9D [9:8] 
 depop parameters 
 headphone amp power on 
 headphone amp power down 
 headphone unmute sequence 
 headphone mute sequence 
 ASRC 
 Input Side 
 micbias 
 Input Lines 
 Boost 
 Input Volume 
 REC Mixer 
 ADCs 
 ADC Mux 
 ADC Mixer 
 ADC PGA 
 IF1 2 Mux 
 Digital Interface 
 Digital Interface Select 
 Audio Interface 
 Output Side 
 DAC mixer before sound effect  
 DAC2 channel Mux 
 DAC Mixer 
 DACs 
 OUT Mixer 
 Ouput Volume 
 HPOLOUTMono Mixer 
 PDM 
 Output Lines 
 for jack type detect 
			 Power up necessary bits for JD if dapm is
 jack out 
 Not using rt5645 JD 
 read rt5645 jd1_1 status 
 jack in 
 for push button and jack out 
 button pressed 
			 rt5650 can report three kinds of button behavior,
			   one click, double click and hold. However,
			   currently we will report button pressedreleased
			   event. So all the three button behaviors are
 unpressed 
 button release 
 jack out 
 for JD function 
 The GPD pocket has a diff. mic, for the win this does not matter. 
		
		  Match for the GPDwin which unfortunately uses somewhat
		  generic dmi strings, which is why we test for 4 strings.
		  Comparing against 23 other bytcht boards, board_vendor
		  and board_name are unique to the GPDwin, where as only one
		  other board has the same board_serial and 3 others have
		  the same default product_name. Also the GPDwin is the
		  only device to have both board_ and product_name not set.
 The ALC3270 package has the headset-mic pin not-connected 
		
		  Continue if optional gpiod is missing, bail for all other
		  errors, including -EPROBE_DEFER
	
	  Read after 400msec, as it is the interval required between
	  read and power On.
 SPDX-License-Identifier: GPL-2.0-or-later
  max98927.c  --  MAX98927 ALSA Soc Audio driver
  Copyright (C) 2016-2017 Maxim Integrated Products
  Author: Ryan Lee <ryans.lee@maximintegrated.com>
 interface format 
 pcm channel configuration 
 pdm channel configuration 
 codec MCLK rate in master mode 
 BCLKs per LRCLK 
 match BCLKs per LRCLK 
 BCLKLRCLK ratio calculation 
 match rate to closest value 
 BCLK configuration 
 pcm mode configuration 
 sampling rate configuration 
 set DAI_SR to correct LRCLK frequency 
 set sampling rate of IV 
 BCLK configuration 
 Channel size configuration 
 Rx slot configuration 
 Tx slot configuration 
 Tx slot Hi-Z configuration 
 Plabyack 
 Capture 
 Software Reset 
 IV default slot configuration 
 Set inital volume (+13dB) 
 Enable DC blocker 
 Enable IMON VMON DC blocker 
 Boost Output Voltage & Current limit 
 Measurement ADC config 
 Brownout Level 
 Envelope Tracking configuration 
 voltage, current slot configuration 
 Set interleave mode 
 update interleave mode info 
 regmap initialization 
 Wait for i2c port to be ready 
 Check Revision ID 
 voltagecurrent slot configuration 
 codec registeration 
 SPDX-License-Identifier: GPL-2.0
 ALSA SoC CX20721CX20723 codec driver
 Copyright:	(C) 2017 Conexant Systems, Inc.
 Author:	Simon Ho, <Simon.ho@conexant.com>
 TODO: add support for TDM mode.
 codec private data 
  DACADC Volume
  max : 74 : 0 dB
 	 ( in 1 dB  step )
  min : 0 : -74 dB
 Lookup table for PRE_DIV 
  cx2072x register cache.
  register initialization
 DC offset Calibration 
 Disable the PA 
 Set the speaker output gain 
 Enable 30 Hz High pass filter 
 Disable PCBEEP pad 
 Disable SnM mode 
 Enable PortD input 
 Enable GPIO7 pin for button 
 Enable UM for GPIO7 
 Enable button response 
 Enable headset button 
 Power down class-D during idle 
 Enable I2S TX 
 Enable I2S RX 
 Update the MSB byte only 
 get suggested pre_div valuce from mclk frequency 
 Configure PLL settings 
 Int mode 
 frac mode 
 configure PLL tracking 
 disable PLL tracking 
 configure and enable PLL tracking 
 set masterslave 
 set format 
 clock inversion 
 Configures the BCLK output 
 Disables bclk output before setting new value 
 Configures BCLK rate 
 Data sizes if not using TDM 
 set masterslave 
 set format 
 clock inversion 
Playback
Capture
 Playback 
 Capture 
  FIXME: the whole jack detection code below is pretty platform-specific;
  it has lots of implicit assumptions about the pins, etc.
  However, since we have no other code and reference, take this hard-coded
  setup for now.  Once when we have different platform implementations,
  this needs to be rewritten in a more generic form, or moving into the
  platform data.
 No-sticky input type 
 Use GPOI0 as interrupt pin 
 Enables unsolitited message on PortA 
 support both nokia and apple headset set. Monitor time = 275 ms 
 Disable TIP detection 
 Switch MusicD3Live pin to GPIO 
 Apple headset 
			
			  Nokia headset (type & 0x4) and
			  regular Headphone
 clear interrupt 
	
	  FIXME: below is, again, a very platform-specific init sequence,
	  but we keep the code here just for simplicity.  It seems that all
	  existing hardware implementations require this, so there is no very
	  much reason to move this out of the codec driver to the platform
	  data.
	  But of course it's no "right" thing; if you are a good boy, don't
	  read and follow the code like this!
 configure PortC as input device 
  DAI ops
 playback and capture 
 plabayck only, return echo reference to Conexant DSP chip 
 plabayck only, return echo reference through I2S TX 
 Needs custom readwrite functions for various register lengths 
 SPDX-License-Identifier: GPL-2.0-only
  rt5514.c  --  RT5514 ALSA SoC audio codec driver
  Copyright 2015 Realtek Semiconductor Corp.
  Author: Oder Chiou <oder_chiou@realtek.com>
 Reset 
 LDO_I_limit 
 I2C bypass enable 
 mini-core reset 
 I2C bypass disable 
 PIN config 
 PLL3(QN)=RCOSC(10+2) 
 PLL3 source=RCOSC, fsi=rt_clk 
 Power on RCOSC, pll3 
 DSP clk source = pll3, ENABLE DSP clk 
 Enable DSP clk auto switch 
 Reduce DSP power 
 {-3, 0, +3, +4.5, +7.5, +9.5, +12, +14, +17} dB 
 DSP run 
 ADC Mixer
 DMIC Source 
  rt5514_calc_dmic_clk - Calculate the frequency divider parameter of dmic.
  @component: only used for dev_warn
  @rate: base clock rate.
  Choose divider parameter that gives the highest possible DMIC frequency in
  1MHz - 3MHz range.
 find divider that gives DMIC frequency below 3.072MHz 
 Input Lines 
 ADC Mux 
 ADC Mixer 
 ADC PGA 
 Audio Interface 
			
			  If the DSP is enabled in start of recording, the DSP
			  should be disabled, and sync back to normal recording
			  settings to make sure recording properly.
	
	  Add a bogus read to avoid rt5514's confusion after s2r in case it
	  saw glitches on the i2c lines and thought the other side sent a
	  start bit.
	
	  The rt5514 can get confused if the i2c lines glitch together, as
	  can happen at bootup as regulators are turned off and on.  If it's
	  in this glitched state the first i2c read will fail, so we'll give
	  it one change to retry.
  Cirrus Logic CS42448CS42888 Audio CODEC Digital Audio Interface (DAI) driver
  Copyright (C) 2014 Freescale Semiconductor, Inc.
  Author: Nicolin Chen <Guangyu.Chen@freescale.com>
  This file is licensed under the terms of the GNU General Public License
  version 2. This program is licensed "as is" without any warranty of any
  kind, whether express or implied.
 codec private data 
 -127.5dB to 0dB with step of 0.5dB 
 -64dB to 24dB with step of 0.5dB 
 Playback 
 Capture 
 Capture 
  According to reference mannual, define the cs42xx8_ratio struct
  MFreq2 | MFreq1 | MFreq0 |     Description     | SSM | DSM | QSM |
  0      | 0      | 0      |1.029MHz to 12.8MHz  | 256 | 128 |  64 |
  0      | 0      | 1      |1.536MHz to 19.2MHz  | 384 | 192 |  96 |
  0      | 1      | 0      |2.048MHz to 25.6MHz  | 512 | 256 | 128 |
  0      | 1      | 1      |3.072MHz to 38.4MHz  | 768 | 384 | 192 |
  1      | x      | x      |4.096MHz to 51.2MHz  |1024 | 512 | 256 |
 Set DAI format 
 Set masterslave audio interface 
 Get functional mode for tx and rx according to rate 
 Is the ratio[tx] valid ? 
 Is the ratio[!tx] valid ? 
		
		  Both ratio[tx] and ratio[!tx] is valid, then we get
		  a proper MFreq.
 Clear stored rate 
 Power Control 
 Functional Mode 
 Interface Formats 
 ADC Control & DAC De-Emphasis 
 Transition Control 
 DAC Channel Mute 
 Volume Control AOUT1 
 Volume Control AOUT2 
 Volume Control AOUT3 
 Volume Control AOUT4 
 Volume Control AOUT5 
 Volume Control AOUT6 
 Volume Control AOUT7 
 Volume Control AOUT8 
 DAC Channel Invert 
 Volume Control AIN1 
 Volume Control AIN2 
 Volume Control AIN3 
 Volume Control AIN4 
 Volume Control AIN5 
 Volume Control AIN6 
 ADC Channel Invert 
 Status Control 
 Status Mask 
 MUTEC Pin Control 
 Mute all DAC channels 
 sentinel  }
 Make sure hardware reset done 
 Validate the chip ID 
 The top four bits of the chip ID should be 0000 
 Each adc supports stereo input 
 Make sure hardware reset done 
 SPDX-License-Identifier: GPL-2.0-only
  ALSA SoC TLV320AIC3x codec driver I2C interface
  Author:      Arun KS, <arunks@mistralsolutions.com>
  Copyright:   (C) 2008 Mistral Solutions Pvt Ltd.,
  Based on soundsoccodecswm8731.c by Richard Purdie
 SPDX-License-Identifier: GPL-2.0
 Audio driver for PCM1789
 Copyright (C) 2018 Bootlin
 Mylène Josserand <mylene.josserand@bootlin.com>
 Perform a software reset to remove codec from desynchronized state 
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright 2008 Juergen Beisert, kernel@pengutronix.de
  Copyright 2009 Sascha Hauer, s.hauer@pengutronix.de
  Copyright 2012 Philippe Retornaz, philippe.retornaz@epfl.ch
  Initial development of this code was funded by
  Phytec Messtechnik GmbH, https:www.phytec.de
  MC13783_AUDIO_CODEC and MC13783_AUDIO_DAC mostly share the same
  register layout
 Mapping between sample rates and register value 
 DAI mode 
 DAI clock inversion 
 DAI clock master masks 
	
	  In synchronous mode force the voice codec into slave mode
	  so that the clock  framesync from the stereo DAC is used
 12000000, invalid for voice codec 
 3686400, invalid for voice codec 
 primary timeslot RXTX(?) is 0 
 secondary timeslot TX is 1 
 Virtual mux. The chip does the input selection automatically
 Input 
 Output 
 Input 
 Output 
 these are the reset values 
 Make sure VAUDIOON is off 
  The mc13783 has two SSI ports, both of them can be routed either
  to the voice codec or the stereo DAC. When two different SSI ports
  are used for the voice codec and the stereo DAC we can do different
  formats and sysclock settings for playback and capture
  (mc13783-hifi-playback and mc13783-hifi-capture). Using the same port
  forces us to use symmetric rates (mc13783-hifi).
 SPDX-License-Identifier: GPL-2.0-only
 Copyright (c) 2018-2020, The Linux Foundation. All rights reserved.
 SPK_L 
 SPK_R 
 RX0 
 RX1 
 8K 
 16K 
 24K 
 32K 
 48K 
 96K 
 192K 
 384K 
 44.1K 
 48K 
 96K 
 192K 
 RX INT0 
 RX INT1 
 WSA Macro 
 Update volatile list for rxtx macros 
 8 but with 32 bit readwrite 
  wsa_macro_set_spkr_mode - Configures speaker compander and smartboost
  settings based on speaker mode.
  @component: codec instance
  @mode: Indicates speaker configuration mode.
  Returns 0 on success or -EINVAL on error.
		
		  Loop through all interpolator MUX inputs and find out
		  to which interpolator input, the cdc_dma rx port
		  is connected
 sample_rate is in Hz 
 set mixing path rate 
 set primary path sample rate 
 9.6MHz MCLK, set value 0x00 if other frequency 
 Enable V&I sensing 
 Disable V&I sensing 
 Enable Compander Clock 
 Enable Softclip clock and mux 
 Enable Softclip control 
 Compander gain in WSA_MACRO_SPKR_MODE1 case is 12 dB 
 Default case compander gain is 15 dB 
 Apply ear spkr gain only if compander is enabled 
 For example, val is -8(-12+5-1) for 4dB of gain 
		
		  Reset RX0 volume to 0 dB if compander is enabled and
		  ear_spkr_gain is non-zero.
 Reset if needed 
 apply gain after int clk is enabled 
 default set to 48k 
 VI Feedback 
 reset swr ip 
 Bring out of reset 
 set SPKR rate to FS_2P4_3P072 
 set MCLK and NPL rates 
 SPDX-License-Identifier: GPL-2.0-or-later
  max9877.c  --  amp driver for max9877
  Copyright (C) 2009 Samsung Electronics Co.Ltd
  Author: Joonyoung Shim <jy0922.shim@samsung.com>
 Ensure the device is in reset state 
 SPDX-License-Identifier: GPL-2.0-only
  max98926.c -- ALSA SoC MAX98926 driver
  Copyright 2013-15 Maxim Integrated Products
 IRQ Enable0 
 IRQ Enable1 
 IRQ Enable2 
 IRQ Clear0 
 IRQ Clear1 
 IRQ Clear2 
 Map0 
 Map1 
 Map2 
 Map3 
 Map4 
 Map5 
 Map6 
 Map7 
 Map8 
 DAI Clock Mode 1 
 DAI Clock Mode 2 
 DAI Clock Divider Denominator MSBs 
 DAI Clock Divider Denominator LSBs 
 DAI Clock Divider Numerator MSBs 
 DAI Clock Divider Numerator LSBs 
 Format 
 TDM Slot Select 
 DOUT Configuration VMON 
 DOUT Configuration IMON 
 DOUT Configuration VBAT 
 DOUT Configuration VBST 
 DOUT Configuration FLAG 
 DOUT HiZ Configuration 1 
 DOUT HiZ Configuration 2 
 DOUT HiZ Configuration 3 
 DOUT HiZ Configuration 4 
 DOUT Drive Strength 
 Filters 
 Gain 
 Gain Ramping 
 Speaker Amplifier 
 Threshold 
 ALC Attack 
 ALC Atten and Release 
 ALC Infinite Hold Release 
 ALC Configuration 
 Boost Converter 
 Block Enable 
 Configuration 
 Global Enable 
 Boost Limiter 
 set VMON slots 
 set IMON slots 
 enable interleave mode 
 set interleave slots 
 BCLKLRCLK ratio calculation 
 find the closest rate 
 set DAI_SR to correct LRCLK frequency 
 Hi-Z all the slots 
 SPDX-License-Identifier: GPL-2.0-or-later
  PCM179X ASoC SPI driver
  Copyright (c) Amarula Solutions B.V. 2013
      Michael Trimarchi <michael@amarulasolutions.com>
 SPDX-License-Identifier: GPL-2.0-or-later
  Codec driver for ST STA350 2.1-channel high-efficiency digital audio system
  Copyright: 2014 Raumfeld GmbH
  Author: Sven Brandau <info@brandau.biz>
  based on code from:
 	Raumfeld GmbH
 	  Johannes Stezenbach <js@sig21.net>
 	Wolfson Microelectronics PLC.
 	  Mark Brown <broonie@opensource.wolfsonmicro.com>
 	Freescale Semiconductor, Inc.
 	  Timur Tabi <timur@freescale.com>
 Power-up register defaults 
 regulator power supply names 
 digital supply, 3.3V 
 pll supply, 3.3V 
 power amp supply, 5V - 26V 
 codec private data 
  byte array controls for setting biquad, mixer, scaling coefficients;
  for biquads all five coefficients need to be set in one go,
  mixer and prepostscale coefs can be set individually;
  each coef is 24bit, the bytes are ordered in the same way
  as given in the STA350 data sheet (big endian; b1, b2, a1, a2, b0)
 preserve reserved bits in STA350_CFUD 
	
	  chip documentation does not say if the bits are self clearing,
	  so do it explicitly
 preserve reserved bits in STA350_CFUD 
	
	  chip documentation does not say if the bits are self clearing,
	  so do it explicitly
 preserve reserved bits in STA350_CFUD 
		
		  chip documentation does not say if the bits are
		  self-clearing, so do it explicitly
 mute during register sync 
 VOL 
 CONFD 
 CONFE 
 MUTE 
 AUTOx 
 CxCFG 
 TONE 
  depending on mode, the attackrelease thresholds have
  two different enum definitions; provide both
 MCLK interpolation ratio per fs 
 MCLK to fs clock ratios 
  sta350_set_dai_sysclk - configure MCLK
  @codec_dai: the codec DAI
  @clk_id: the clock ID (ignored)
  @freq: the MCLK input frequency
  @dir: the clock direction (ignored)
  The value of MCLK is used to determine which sample rates are supported
  by the STA350, based on the mcs_ratio_table.
  This function must be called by the machine driver's 'startup' function,
  otherwise the list of supported sample rates will not be available in
  time for ALSA.
  sta350_set_dai_fmt - configure the codec for the selected audio format
  @codec_dai: the codec DAI
  @fmt: a SND_SOC_DAIFMT_x value indicating the data format
  This function takes a bitmask of SND_SOC_DAIFMT_x bits and programs the
  codec accordingly.
  sta350_hw_params - program the STA350 with the given hardware parameters.
  @substream: the audio stream
  @params: the hardware parameters to set
  @dai: the SOC DAI (ignored)
  This function programs the hardware with the values provided.
  Specifically, the sample rate and the data format.
  sta350_set_bias_level - DAPM callback
  @component: the component device
  @level: DAPM power level
  This is called by ALSA to put the component into low power mode
  or to wake it up.  If the component is powered off completely
  all registers must be restored after power on.
 Full power on 
 Power down 
 The chip runs through the power down sequence for us 
 power down: low 
 CONFA 
 CONFC 
 CONFE 
  CONFF 
 channel to output mapping 
 miscellaneous registers 
 initialize coefficient shadow RAM with reset values 
 Bias level configuration will have done an extra enable 
 CONFE 
 CONFF 
 MISC 
 GPIOs 
 regulators 
 SPDX-License-Identifier: GPL-2.0-only
  Driver for ADAU1381ADAU1781 CODEC
  Copyright 2014 Analog Devices Inc.
   Author: Lars-Peter Clausen <lars@metafoo.de>
 SPDX-License-Identifier: GPL-2.0-or-later
  DA7213 ALSA SoC Codec Driver
  Copyright (c) 2013 Dialog Semiconductor
  Author: Adam Thomson <Adam.Thomson.Opensource@diasemi.com>
  Based on DA9055 ALSA SoC codec driver.
 Gain and Volume 
 -54dB 
 -52.5dB to 15dB 
 -78dB to 12dB 
 0dB to 36dB 
 ADC and DAC voice mode (8kHz) high pass cutoff value 
 ADC and DAC high pass filter cutoff value 
 Gain ramping rate value 
 DAC noise gate setup time value 
 DAC noise gate rampup rate value 
 DAC noise gate rampdown rate value 
 DAC soft mute rate value 
 ALC Attack Rate select 
 ALC Release Rate select 
 ALC Hold Time select 
 ALC Input Signal Tracking rate select 
  Control Functions
 Select the left or right channel and capture data 
 Select middle 8 bits for read back from data register 
 Select top 8 bits for read back from data register 
 Calculate average for Left and Right data 
 Left Data 
 Right Data 
 Calculate DC offset 
 Enable analogdigital gain mode & offset cancellation 
 Begin auto calibration and wait for completion 
 If auto calibration fails, fall back to digital gain only mode 
 Enable analogdigital gain mode & offset cancellation 
 Save current values from ADC control registers 
 Save current values from MIXIN_LR_SELECT registers 
 Save current values from MIC control registers 
 Enable ADC Left and Right 
 Enable MIC paths 
 Mute MIC PGAs 
 Perform calibration 
 Restore MIXIN_LR_SELECT registers to their original states 
 Restore ADC control registers to their original states 
 Restore original values of MIC control registers 
 If ALC in operation, make sure calibrated offsets are updated 
 Force ALC offset calibration if enabling ALC 
  KControls
 Volume controls 
 DAC Equalizer controls 
 High Pass Filter and Voice Mode controls 
 Mute controls 
 Zero Cross controls 
 Gain Ramping controls 
 DAC Noise Gate controls 
 DAC Routing & Inversion 
 DMIC controls 
 ALC Controls 
	
	  Rate at which input signal envelope is tracked as the signal gets
	  larger
	
	  Rate at which input signal envelope is tracked as the signal gets
	  smaller
  DAPM
  Enums
 MIC PGA source select 
 DAI routing select 
 DAC routing select 
  Mixer Controls
 Mixin Left 
 Mixin Right 
 Mixout Left 
 Mixout Right 
  DAPM Events
 Enable DAI clks for master mode 
 PC synchronised to DAI 
 If SRM not enabled then nothing more to do 
 Assist 32KHz mode PLL lock 
 Check SRM has locked 
 Revert 32KHz PLL lock udpates if applied previously 
 PC free-running 
 Disable DAI clks if in master mode 
  DAPM widgets
	
	  Power Supply
	
	  Input & Output
 Use a supply here as this controls both input & output DAIs 
	
	  Input
 Input Lines 
 MUXs for Mic PGA source selection 
 Input PGAs 
 Mic Biases 
 Input Mixers 
 ADCs 
 DAI 
	
	  Output
 DAI 
 DACs 
 Output Mixers 
 Output PGAs 
 Charge Pump 
 Output Lines 
  DAPM audio route definition
 Dest       Connecting Widget    source 
 Input path 
 Output path 
 Set DAI format 
 Set sampling rate 
 Set masterslave mode 
 Set clock normalinverted 
 The bclk is inverted wrt ASoC conventions 
 Only I2S is supported 
 L data MSB after FRM LRC 
 L data MSB during FRM LRC 
 By default only 64 BCLK per WCLK is supported 
 Supported PLL input frequencies are 32KHz, 5MHz - 54MHz. 
 Workout input divider based on MCLK rate 
 32KHz PLL Mode 
 Configure PLL 
 Calculate dividers for PLL 
 Write PLL dividers 
 Enable PLL 
 Assist 32KHz mode PLL lock 
 DAI operations 
 Playback Capabilities 
 Capture Capabilities 
 Slave mode needs SRM for non-harmonic frequencies 
 PLL is not required for harmonic frequencies 
 Disable PLL in standby 
 Enable MCLK for transition to ON state 
 Enable VMID reference & master bias 
 Remove MCLK 
 Disable VMID reference & master bias 
 DT 
 Default to using ALC auto offset calibration mode. 
 Default PC counter to free-running 
 Enable all Gain Ramps 
	
	  There are two separate control bits for input and output mixers as
	  well as headphone and line outs.
	  One to enable corresponding amplifier and other to enable its
	  output. As amplifier bits are related to power control, they are
	  being managed by DAPM while other (non power related) bits are
	  enabled here
 Handle DTPlatform data 
 Set platform data values 
 Set Mic Bias voltages 
 Set DMIC configuration 
 Check if MCLK provided 
		 Do automatic PLL handling assuming fixed clock until
		  set_pll() has been called. This makes the codec usable
 Get required supplies 
 I2C codec control layer 
 SPDX-License-Identifier: GPL-2.0-or-later
  wm9713.c  --  ALSA Soc WM9713 codec support
  Copyright 2006-10 Wolfson Microelectronics PLC.
  Author: Liam Girdwood <lrg@slimlogic.co.uk>
   Features:-
    o Support for AC97 Codec, Voice DAC and Aux DAC
    o Support for DAPM
 PLL input frequency 
 record mic mixer 0 
 record mux hp 1 
 record mux mono 2 
 record mux left 3 
 record mux right 4
 record step size 5 
 alc source select 6
 mono input select 7 
 speaker left input select 8 
 speaker right input select 9 
 headphone left input 10 
 headphone right input 11 
 out 3 source 12 
 out 4 source 13 
 dac invert 1 14 
 dac invert 2 15 
 bass control 16 
 noise gate type 17 
 mic selection 18 
 mic selection 19 
 Gracefully shut down the voice interface. 
 We have to create a fake left and right HP mixers because
  the codec only has a single control that is shared by both channels.
  This makes it impossible to determine the audio path using the current
  register map, thus we add a new (virtual) register to help determine the
  audio route within the device.
 Left Headphone Mixers 
 Right Headphone Mixers 
 headphone capture mux 
 headphone mic mux 
 Speaker Mixer 
 Mono Mixer 
 mono mic mux 
 mono output mux 
 speaker left output mux 
 speaker right output mux 
 headphone left output mux 
 headphone right output mux 
 Out3 mux 
 Out4 mux 
 DAC inv mux 1 
 DAC inv mux 2 
 Capture source left 
 Capture source right 
 mic source 
 mic source B virtual control 
 left HP mixer 
 right HP mixer 
 virtual mixer - mixes left & right channels for spk and mono 
 speaker mixer 
 mono mixer 
 DAC inv mux 1 
 DAC inv mux 2 
 headphone left mux 
 headphone right mux 
 speaker left mux 
 speaker right mux 
 mono mux 
 out 3 mux 
 out 4 mux 
 output pga 
 input pga 
 left capture select 
 right capture select 
 left ADC 
 right ADC 
 mic 
 headphone capture 
 mono capture 
 Speaker Output Volume 
 Headphone Output Volume 
 Out3OUT4 Volume 
 Mono Volume 
 LINEIN Volume 
 DAC PGA Volume 
 MIC PGA Volume 
 MIC Routing Control 
 Record PGA Volume 
 Record Routing 
 PCBEEP Volume 
 VxDAC Volume 
 AUXDAC Volume 
 Output PGA Mux 
 DAC 3D control 
 DAC Tone Control
 MIC Input Select & Bias 
 Output Volume Mapping & Jack 
 Powerdown CtrlStat
 Extended Audio ID 
 Extended Audio StartCtrl 
 Audio DACs Sample Rate 
 AUXDAC Sample Rate 
 Audio ADCs Sample Rate 
 PCM codec control 
 SPDIF control 
 Powerdown 1 
 Powerdown 2 
 General Purpose 
 Fast Power-Up Control 
 MCLKPLL Control 
 MCLKPLL Control 
 GPIO Pin Configuration 
 GPIO Pin Polarity  Type 
 GPIO Pin Sticky 
 GPIO Pin Wake-Up 
 GPIO Pin Status 
 GPIO Pin Sharing 
 GPIO PullUpPullDown 
 Additional Functions 1 
 Additional Functions 2 
 ALC Control 
 ALC  Noise Gate Control 
 AUXDAC input control 
 Digitiser Reg 1 
 Digitiser Reg 2 
 Digitiser Reg 3 
 Digitiser Read Back 
 PLL divisors 
 The size in bits of the PLL divide multiplied by 10
 The PLL output is always 98.304MHz. 
 If the input frequency is over 14.4MHz then scale it down. 
	 Low frequency sources require an additional divide in the
	  loop.
 Check if we need to round 
 Move down to proper range now rounding is done 
  Please note that changing the PLL input frequency may require
  resynchronisation with the AC97 controller.
 turn PLL off ? 
 disable PLL power and select ext source 
 write the fractional k to the reg 0x46 pages 
 K [21:20] 
 K [19:16] 
 K [15:12] 
 K [11:8] 
 K [7:4] 
 K [3:0] 
 turn PLL on and select as source 
 wait 10ms AC97 link frames for the link to stabilise 
  Tristate the PCM DAI lines, tristate can be disabled by calling
  wm9713_set_dai_fmt()
  Configure WM9713 clock dividers.
  Voice DAC needs 256 FS
 clock masters 
 clock inversion 
 DAI format 
 enable PCM interface in master mode 
 enable thermal shutdown 
 enable master bias and vmid 
 disable everything including AC link 
	 Disable everything except touchpanel - that will be handled
	  by the touch driver and left disabled if touch is not in
 do we need to re-start the PLL ? 
 only synchronise the codec if warm reset failed 
 unmute the adc - move to kcontrol 
 SPDX-License-Identifier: GPL-2.0-only
  wm8804-i2c.c  --  WM8804 SPDIF transceiver driver - I2C
  Copyright 2015 Cirrus Logic Inc
  Author: Charles Keepax <ckeepax@opensource.wolfsonmicro.com>
 Wolfson PCI ID + part ID 
 Cirrus Logic PCI ID + part ID 
 SPDX-License-Identifier: GPL-2.0-or-later
  da7219-aad.c - Dialog DA7219 ALSA SoC AAD Driver
  Copyright (c) 2015 Dialog Semiconductor Ltd.
  Author: Adam Thomson <Adam.Thomson.Opensource@diasemi.com>
  Detection control
 Send an initial empty report 
 EnableDisable jack detection 
  ButtonHPTest work
 Drive headphoneslineout 
 Make sure mic bias is up 
	
	  Mic bias pulse required to enable mic, must be done before enabling
	  button detection to prevent erroneous button readings.
 Pulse higher level voltage 
 Lock DAPM, Kcontrols affected by this test and the PLL 
 Ensure MCLK is available for HP test procedure 
	
	  If MCLK not present, then we're using the internal oscillator and
	  require different frequency settings to achieve the same result.
	 
	  If MCLK is present, but PLL is not enabled then we enable it here to
	  ensure a consistent detection procedure.
 Ensure gain ramping at fastest rate 
 Bypass cache so it saves current settings 
 Make sure Tone Generator is disabled 
 Enable HPTest block, 1KOhms check 
 Set gains to 0db 
 Disable DAC filters, EQs and soft mute 
 Enable HP left & right paths 
	
	  If we're running from the internal oscillator then give audio paths
	  time to settle before running test.
 Configure & start Tone Generator 
 Grab comparator reading 
 Stop tone generator 
 Restore original settings from cache 
 Disable HPTest block 
	
	  If we're running from the internal oscillator then give audio paths
	  time to settle before allowing headphones to be driven as required.
 Restore gain ramping rate 
 Drive Headphoneslineout 
 Restore PLL to previous configuration, if re-configured 
 Remove MCLK, if previously enabled 
	
	  Only send report if jack hasn't been removed during process,
	  otherwise it's invalid and we drop it.
  IRQ
 Read current IRQ events 
 Read status register for jack insertion & type status 
 Clear events 
 Jack Insertion 
 Jack type detection 
			
			  If 4-pole, then enable button detection, else perform
			  HP impedance test to determine output type to report.
			 
			  We schedule work here as the tasks themselves can
			  take time to complete, and in particular for hptest
			  we want to be able to check if the jack was removed
			  during the procedure as this will invalidate the
			  result. By doing this as work, the IRQ thread can
			  handle a removal, and we can check at the end of
			  hptest if we have a valid result or not.
 Button support for 4-pole jack 
 Button Press 
 Button Release 
 Jack removal 
 Un-drive headphoneslineout 
 Ensure button detection disabled 
 Disable mic bias 
 Cancel any pending work 
  DTACPI to pdata conversion
  SuspendResume
 Disable jack detection during suspend 
		
		  If we have a 4-pole jack inserted, then micbias will be
		  enabled. We can disable micbias here, and keep a note to
		  re-enable it on resume. If jack removal occurred during
		  suspend then this will be dealt with through the IRQ handler.
 Re-enable micbias if previously enabled for 4-pole jack 
 Re-enable jack detection 
  InitExit
 Handle any DTACPIplatform data 
 Disable button detection 
 Unmask AAD IRQs 
 Mask off AAD IRQs 
  AAD related I2C probe handling
 Retrieve any DTACPIplatform data 
 SPDX-License-Identifier: GPL-2.0
 mt6359-accdet.c  --  ALSA SoC mt6359 accdet driver
 Copyright (C) 2021 MediaTek Inc.
 Author: Argus Lin <argus.lin@mediatek.com>
 global variable definitions 
 mt6359 accdet capability 
 local function declaration 
 ESD switches off 
 enable RG_EINT0CONFIGACCDET 
 enable RG_EINT1CONFIGACCDET 
select 500k, use internal resistor 
 disable inverter 
 disable inverter 
 set DA stable signal 
 set DA stable signal 
 adjust digital setting 
 adjust analog setting 
 set debounce to 1ms 
 ESD switches on 
 disable RG_EINT0CONFIGACCDET 
 disable RG_EINT1CONFIGACCDET 
 enable eint0cen 
 enable eint0cen 
 enable eint1cen 
 enable inverter 
 enable inverter 
 clear accdet int, modify  for fix interrupt trigger twice error 
 recover accdet debounce0,3 
 set and clear initial bit every eint interrupt 
 enable ACCDET unit 
 get jack detection status 
 adjust eint digitalanalog setting 
 debounce8(auxadc debounce) is default, needn't get from dts 
 eint detection mode equals to EINT HW Mode 
 eint use internal resister 
 enable eint cmpmem pwm 
 DA signal stable 
 after receive n+1 number, interrupt issued. 
	 setting HW mode, enable digital fast discharge
	  if use EINT0 & EINT1 detection, please modify
	  ACCDET_HWMODE_EN_ADDR[2:1]
 enable PWM 
 enable inverter detection 
 disable inverter detection 
 ESD switches on 
 before playback, set NCP pull low before nagative voltage 
 current detect set 0.25uA 
 init the debounce time (debounce32768)sec 
 clear high micbias1 voltage setting 
 init pwm frequency, duty & risefalling delay 
 micbias1 <= 2.7V 
 micbias1 = 2.8v 
 micbias1 = 2.85v 
 mic mode setting 
 ACC mode
 enable analog fast discharge 
 DCC mode Low cost mode without internal bias 
 enable analog fast discharge 
		 DCC mode Low cost mode with internal bias,
		  bit8 = 1 to use internal bias
 enable analog fast discharge 
 Module information 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) ST-Ericsson SA 2012
  Author: Ola Lilja <ola.o.lilja@stericsson.com>,
          Kristoffer Karlsson <kristoffer.karlsson@stericsson.com>,
          Roger Nilsson <roger.xr.nilsson@stericsson.com>,
          for ST-Ericsson.
          Based on the early work done by:
          Mikko J. Lehto <mikko.lehto@symbio.com>,
          Mikko Sarmanne <mikko.sarmanne@symbio.com>,
          Jarmo K. Kuronen <jarmo.kuronen@symbio.com>,
          for ST-Ericsson.
  License terms:
 Macrocell value definitions 
 Macrocell register definitions 
 Bank AB8500_MISC 
 Nr of FIRIIR-coeff banks in ANC-block 
 Minimum duration to keep ANC IIR Init bit high or
 Sidetone states 
 Analog microphones 
 Private data for AB8500 device-driver 
 Sidetone 
 ANC 
  Read'n'write functions
 Read a register from the audio-bank of AB8500 
 Write to a register in the audio-bank of AB8500 
  Controls - DAPM
 Earpiece 
 Earpiece source selector 
 LineOut 
 LineOut source selector 
 Handsfree 
 Speaker Left - ANC selector 
 Speaker Right - ANC selector 
 Mic 1 
 Mic 1 - Mic 1a or 1b selector 
 Mic 1 - AD3 - Mic 1 or DMic 3 selector 
 Mic 1 - AD6 - Mic 1 or DMic 6 selector 
 Mic 2 
 Mic 2 - AD5 - Mic 2 or DMic 5 selector 
 LineIn 
 LineIn left - AD1 - LineIn Left or DMic 1 selector 
 LineIn right - Mic 2 or LineIn Right selector 
 LineIn right - AD2 - LineIn Right or DMic2 selector 
 ANC 
 ANC - EnableDisable 
 ANC to Earpiece - Mute 
 Sidetone left 
 Sidetone left - Input selector 
 Sidetone right path 
 Sidetone right - Input selector 
 Vibra 
  DAPM-widgets
 Clocks 
 Regulators 
 Power 
 Main supply node 
 DAAD 
 Headset path 
 LineOut path 
 Earpiece path 
 Handsfree path 
 Vibrator path 
 Mic 1 
 Mic 2 
 LineIn 
 LineIn Bypass path 
 LineIn, Mic 2 
 HD Capture path 
 Digital Microphone path 
 Acoustical Noise Cancellation path 
 Sidetone Filter path 
  DAPM-routes
 Power AB8500 audio-block when ADDA is active 
 ANC Configure 
 ADDA 
 Powerup charge pump if DA12 is in use 
 Headset path 
 HF or LineOut path 
 HF path 
 Earpiece path 
 LineOut path stereo 
 LineOut path mono 
 LineOut path 
 Vibrator path 
 Mic 2 
 LineIn 
 LineIn, Mic 2 
 Mic 1 
 HD Capture path 
 Digital Microphone path 
 LineIn Bypass path 
 ANC path (Acoustic Noise Cancellation) 
 Sidetone Filter path 
 ANC FIR-coefficients configuration sequence 
 ANC IIR-coefficients configuration sequence 
 ANC IIR-FIR-coefficients configuration sequence 
  Control-events
 Write sidetone FIR-coefficients configuration sequence 
  Controls - Non-DAPM ASoC
 -32dB = Mute 
 -63dB = Mute 
 -1dB = Mute 
 -38dB = Mute 
 Earpiece 
 DA 
 Digital interface - DA from slot mapping 
 Digital interface - AD to slot mapping 
 Digital interface - Burst mode 
 Sidetone 
 ANC 
 Charge pump 
 Headset 
 Earpiece 
 HandsFree 
 Vibra 
 HandsFree, Vibra 
 Mic 1, Mic 2, LineIn 
 Mic 1 
 Mic 2 
 LineIn 
 DMic 
 Digital gains 
 Analog loopback 
 Digital interface - DA from slot mapping 
 Digital interface - AD to slot mapping 
 Digital interface - Loopback 
 Digital interface - Burst FIFO 
 ANC 
 Sidetone 
  Extended interface for codec-driver
 Reset audio-registers and disable 32kHz-clock output 2 
 Set DMic-clocks to outputs 
 Attach regulators to AMic DAPM-paths 
 Set AMic-configuration 
 Gates clocking according format mask 
 continuous clock 
 clock is gated 
 Set clock gating 
 Setting data transfer format 
 I2S mode 
 L data MSB after FRM LRC 
 L data MSB during FRM LRC 
 normal bit clock + frame 
 normal BCLK + inv FRM 
 invert BCLK + nor FRM 
 invert BCLK + FRM 
 Setup TDM clocking according to slot count 
 Setup TDM DA according to active tx slots 
 Setup TDM AD according to active RX-slots 
 Has a non-standard Vamic been requested? 
 Override HW-defaults 
 Add filter controls 
 Create driver private-data struct 
 SPDX-License-Identifier: GPL-2.0-only
  ALSA SoC SPDIF DIT driver
   This driver is used by controllers which can operate in DIT (SPDIF) where
   no codec is needed.  This file provides stub codec that can be used
   in these configurations. TI DaVinci Audio controller uses this driver.
  Author:      Steve Chen,  <schen@mvista.com>
  Copyright:   (C) 2009 MontaVista Software, Inc., <source@mvista.com>
  Copyright:   (C) 2009  Texas Instruments, India
 SPDX-License-Identifier: GPL-2.0-or-later
  wm8727.c
   Created on: 15-Oct-2009
       Author: neil.jones@imgtec.com
  Copyright (C) 2009 Imagination Technologies Ltd.
  Note this is a simple chip with no configuration interface, sample rate is
  determined automatically by examining the Master clock and Bit clock ratios
 SPDX-License-Identifier: GPL-2.0-or-later
  CS4271 SPI audio driver
  Copyright (c) 2010 Alexander Sverdlin <subaparts@yandex.ru>
 SPDX-License-Identifier: GPL-2.0
 PCM3060 I2C driver
 Copyright (C) 2018 Kirill Marinushkin <kmarinushkin@birdec.com>
 CONFIG_OF 
 CONFIG_OF 
 SPDX-License-Identifier: GPL-2.0
 Analog Devices ADAU7118 8 channel PDM-to-I2STDM Converter Standalone Hw
 driver
 Copyright 2019 Analog Devices Inc.
 SPDX-License-Identifier: GPL-2.0
 ROHM BD28623MUV class D speaker amplifier codec driver.
 Copyright (c) 2018 Socionext Inc.
 SPDX-License-Identifier: GPL-2.0
 ak4554.c
 Copyright (C) 2013 Renesas Solutions Corp.
 Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
  ak4554 is very simple DAAD converter which has no setting register.
  CAUTION
  ak4554 playback format is SND_SOC_DAIFMT_RIGHT_J,
  and,   capture  format is SND_SOC_DAIFMT_LEFT_J
  on same bit clock, LR clock.
  But, this driver doesn't have snd_soc_dai_ops :: set_fmt
  CPUCodec DAI image
  CPU-DAI1 (plaback only fmt = RIGHT_J) --+-- ak4554
 					   |
  CPU-DAI2 (capture only fmt = LEFT_J) ---+
 SPDX-License-Identifier: GPL-2.0-only
  cs4349.c  --  CS4349 ALSA Soc Audio driver
  Copyright 2015 Cirrus Logic, Inc.
  Authors: Tim Howe <Tim.Howe@cirrus.com>
 r02	- Mode Control 
 r03	- Volume, Mixing and Inversion Control 
 r04	- Mute Control 
 r05	- Channel A Volume Control 
 r06	- Channel B Volume Control 
 r07	- Ramp and Filter Control 
 r08	- Misc. Control 
 Private data for the CS4349 
Normal == Channel A = Left, Channel B = Right
 Reset the Device 
 Hold down reset 
 Hold down reset 
 SPDX-License-Identifier: GPL-2.0
 ak4613.c  --  Asahi Kasei ALSA Soc Audio driver
 Copyright (C) 2015 Renesas Electronics Corporation
 Kuninori Morimoto <kuninori.morimoto.gx@renesas.com>
 Based on ak4642.c by Kuninori Morimoto
 Based on wm8731.c by Richard Purdie
 Based on ak4535.c by Richard Purdie
 Based on wm8753.c by Liam Girdwood
 Power Management 1 
 Power Management 2 
 Power Management 3 
 Control 1 
 Control 2 
 De-emphasis1 
 De-emphasis2 
 Overflow Detect 
 Zero Detect 
 Input Control 
 Output Control 
 LOUT1 Volume Control 
 ROUT1 Volume Control 
 LOUT2 Volume Control 
 ROUT2 Volume Control 
 LOUT3 Volume Control 
 ROUT3 Volume Control 
 LOUT4 Volume Control 
 ROUT4 Volume Control 
 LOUT5 Volume Control 
 ROUT5 Volume Control 
 LOUT6 Volume Control 
 ROUT6 Volume Control 
 PW_MGMT1 
 PW_MGMT2 
 PW_MGMT3 
 CTRL1 
 CTRL2 
 ICTRL 
 OCTRL 
  Playback Volume
  max : 0x00 : 0 dB
        ( 0.5 dB step )
  min : 0xFE : -127.0 dB
  mute: 0xFF
 capture 				
 [0] - [2] are not supported 
 Outputs 
 Inputs 
 DAC 
 ADC 
	
	  Slave Mode
	 	Normal: [32kHz, 48kHz] : 256fs,384fs or 512fs
	 	Double: [64kHz, 96kHz] : 256fs
	 	Quad  : [128kHz,192kHz]: 128fs
	 
	  Master mode
	 	Normal: [32kHz, 48kHz] : 256fs or 512fs
	 	Double: [64kHz, 96kHz] : 256fs
	 	Quad  : [128kHz,192kHz]: 128fs
 minimum fs on each range 
	
	  FIXME
	 
	  It doesn't support TDM at this point
	
	  PW_MGMT1  PW_MGMT3 needs dummy write at least after 5 LR clocks
	 
	  Note
	 
	  To avoid extra delay, we want to avoid preemption here,
	  but we can't. Because it uses I2C access which is using IRQ
	  and sleep. Thus, delay might be more than 5 LR clocks
	  see also
	 	ak4613_dai_trigger()
	
	  FIXME
	 
	  PW_MGMT1  PW_MGMT3 needs dummy write at least after 5 LR clocks
	  from Power Down Release. Otherwise, Playback volume will be 0dB.
	  To avoid complex multiple delaydummy_write method from
	  ak4613_set_bias_level()  SND_SOC_DAPM_DAC_E("DACx", ...),
	  call it once here.
	 
	  But, unfortunately, we can't "write" here because here is atomic
	  context (It uses I2C access for writing).
	  Thus, use schedule_work() to switching to normal context
	  immediately.
	 
	  Note
	 
	  Calling ak4613_dummy_write() function might be delayed.
	  In such case, ak4613 volume might be temporarily 0dB when
	  beggining of playback.
	  see also
	 	ak4613_dummy_write()
  Select below from Sound Card, not Auto
 	SND_SOC_DAIFMT_CBC_CFC
 	SND_SOC_DAIFMT_CBP_CFP
 Input 1 - 2 
 Output 1 - 6 
 SPDX-License-Identifier: GPL-2.0-or-later
  extcon-arizona.c - Extcon driver Wolfson Arizona devices
   Copyright (C) 2012-2014 Wolfson Microelectronics plc
  The hardware supports 8 ranges  buttons, but the snd-jack interface
  only supports 6 buttons (button 0-5).
 The number of levels in arizona_micd_levels valid for button thresholds 
 Keep the HP output stages disabled while doing the clamp 
 Restore the desired state while not doing the clamp 
 Microphone detection can't use idle mode 
 If we go out of range report top of range 
 Convert to ohms, the value is in 0.5 ohm increments 
 Skip up a range, or report? 
	
	  If we're using HPDET for accessory identification we need
	  to take multiple measurements, step through them in sequence.
 Only check the mic directly if we didn't already ID it 
 OK, got both.  Now, compare... 
 Take the headphone impedance for the main report 
 Sometimes we get false readings due to slow insert 
	
	  If we measure the mic as high impedance
 Make sure everything is reset back to the real polarity 
 If we got a spurious IRQ for some reason then ignore it 
 If the cable was removed while measuring ignore the result 
 Reset back to starting range 
 Report high impedence cables as line outputs 
 Reset back to starting range 
 If we have a mic then reenable MICDET 
 Do not set hp_det done when the cable has been unplugged 
 Make sure we keep the device enabled during the measurement 
 Just report headphone 
 Make sure we keep the device enabled during the measurement 
 Just report headphone 
 Must disable MICD before we read the ADCVAL 
 Due to jack detect this should never happen 
 If we got a high impedence we should have a headset, report it. 
 Don't need to regulate for button detection 
	 If we detected a lower impedence during initial startup
	  then we probably have the wrong polarity, flip it.  Don't
	  do this for the lowest impedences to speed up detection of
	  plain headphones.  If both polarities report a low
	  impedence then give up and report headphones.
	
	  If we're still detecting and we detect a short then we've
	  got a headphone.
	
	  If we're still detecting and we detect a short then we've
	  got a headphone.  Otherwise it's a button press.
 If the cable was removed while measuring ignore the result 
		
		  If the jack was removed during a headphone detection we
		  need to wait for the headphone detection to finish, as
		  it can not be aborted. We don't want to be able to start
		  a new headphone detection from a fresh insert until this
		  one is finished.
 Clear trig_sts to make sure DCVDD is not forced up 
 Map a level onto a slot in the register bank 
 Program the level itself 
		 We can't use devm here because we need to do the get
		  against the MFD device, as that is where the of_node
		  will reside, but if we devm against that the GPIO
		  will not be freed if the extcon driver is unloaded.
 Disable all buttons by default 
 Set up all the buttons the user specified 
 SND_JACK_BTN_# masks start with the most significant bit 
 Enable reporting of that range 
 Set all the remaining keys to a maximum 
	
	  If we have a clamp use it, activating in conjunction with
	  GPIO5 if that is connected for jack detect operation.
 Put the GPIO into input mode with optional pull 
 SPDX-License-Identifier: GPL-2.0-only
  TDA7419 audio processor driver
  Copyright 2018 Konsulko Group
  Author: Matt Porter <mporter@konsulko.com>
 ASoC Controls 
	
	  Reset registers to power-on defaults. The part does not provide a
	  soft-reset function and the registers are not readable. This ensures
	  that the cache matches register contents even if the registers have
	  been previously initialized and not power cycled before probe.
 SPDX-License-Identifier: GPL-2.0-only
  es8328.c  --  ES8328 ALSA SoC Audio driver
  Copyright 2014 Sutajio Ko-Usagi PTE LTD
  Author: Sean Cross <xobs@kosagi.com>
 regulator supplies for sgtl5000, VDDD is an optional external supply 
 vddd is optional supply 
  ES8328 Controls
	
	  If we're using deemphasis select the nearest available sample
	  rate.
  DAPM Controls
 Left Mixer 
 Right Mixer 
 Left PGA Mux 
 Right PGA Mux 
 Differential Mux 
 Mono ADC Mux 
 Master serial port mode, with BCLK generated automatically 
 Slave serial port mode 
 interface format 
 clock inversion 
 VREF, VMID=2x50k, digital enabled 
 Charge caps 
 VREF, VMID=2500k, digital stopped 
 Setup clocks 
 SPDX-License-Identifier: GPL-2.0
 Copyright (c) 2015-2016, The Linux Foundation. All rights reserved.
 Copyright (c) 2017-2018, Linaro Limited
 Class-H registers for codecs from and above WCD9335 
 set to HIFI 
 set to HIFI 
 set to default 
 set to HIFI 
 enabledisable buck 
	
	  500us sleep is required after buck enabledisable
	  as per HW requirement
 enabledisable buck 
		
		  500us sleep is required after buck enabledisable
		  as per HW requirement
 500usec delay is needed as per HW requirement 
 enabledisable flyback 
 100usec delay is needed as per HW requirement 
	
	  500us sleep is required after flyback enabledisable
	  as per HW requirement
 Sleep needed to avoid click and pop as per HW requirement 
 set to Default 
 100usec delay is needed as per HW requirement 
 enabledisable flyback 
		
		  100us sleep is required after flyback enabledisable
		  as per HW requirement
 500usec delay is needed as per HW requirement 
 Sleep needed to avoid click and pop as per HW requirement 
 buck and flyback set to default mode and disable 
			
			  These K1 values depend on the Headphone Impedance
			  For now it is assumed to be 16 ohm
 buck and flyback set to default mode and disable 
 set buck and flyback to Default Mode 
			
			  These K1 values depend on the Headphone Impedance
			  For now it is assumed to be 16 ohm
 set buck and flyback to Default Mode 
 set buck and flyback to Default Mode 
  Function: wcd_clsh_is_state_valid
  Params: state
  Description:
  Provides information on valid states of Class H configuration
  Function: wcd_clsh_fsm
  Params: ctrl, req_state, req_type, clsh_event
  Description:
  This function handles PRE DAC and POST DAC conditions of different devices
  and updates class H configuration of different combination of devices
  based on validity of their states. ctrl will contain current
  class h state information
 SPDX-License-Identifier: GPL-2.0-or-later
  wm8753.c  --  WM8753 ALSA Soc Audio driver
  Copyright 2003-11 Wolfson Microelectronics PLC.
  Author: Liam Girdwood <lrg@slimlogic.co.uk>
  Notes:
   The WM8753 is a low power, high quality stereo codec with integrated PCM
   codec designed for portable digital telephony applications.
  Dual DAI:-
  This driver support 2 DAI PCM's. This makes the default PCM available for
  HiFi audio (e.g. MP3, ogg) playbackcapture and the other PCM available for
  voice.
  Please note that the voice PCM can be connected directly to a Bluetooth
  codec or GSM modem and thus cannot be read or written to, although it is
  available to be configured with snd_hw_params(), etc and kcontrols in the
  normal alsa manner.
  Fast DAI switching:-
  The driver can now fast switch between the DAI configurations via a
  an alsa kcontrol. This allows the PCM to remain open.
  wm8753 register cache
  We can't read the WM8753 register space when we
  are using 2 wire for device control, so we cache them instead.
 codec private data 
  WM8753 Controls
 0000000 - 0101111 = "Analogue mute" 
  _DAPM_ Controls
 Left Mixer 
 Right mixer 
 Mono mixer 
 Mono 2 Mux 
 Out 3 Mux 
 Out 4 Mux 
 ADC Mono Mix 
 Record mixer 
 Left ADC mux 
 Right ADC mux 
 MIC mux 
 ALC mixer 
 Left Line mux 
 Right Line mux 
 Mono Line mux 
 Line mux and mixer 
 Rx mux and mixer 
 Mic Selector Mux 
 left mixer 
 right mixer 
 mono mixer 
 left out 
 right out 
 mono 1 out 
 mono 2 out 
 out 3 
 out 4 
 record mixer  
 MicSideTone Mux 
 Capture Left Mux 
 Capture Right Mux 
 Mono Capture mixer-mux 
 ADC 
 Left Capture Volume 
 Right Capture Volume 
 ALC Mixer 
 Line Left Mux 
 Line Right Mux 
 Line Mono Mux 
 Line MixerMux 
 Rx MixerMux 
 Mic 1 Volume 
 Mic 2 Volume 
 Mic Selector Mux 
 ACOP 
 PLL divisors 
 The size in bits of the pll divide multiplied by 10
 Check if we need to round 
 Move down to proper range now rounding is done 
 disable PLL  
 set up N and K PLL divisor ratios 
 bits 8:5 = PLL_N, bits 3:0 = PLL_K[21:18] 
 bits 8:0 = PLL_K[17:9] 
 bits 8:0 = PLL_K[8:0] 
 set PLL as input and enable 
 codec hifi mclk (after PLL) clock divider coefficients 
 8k 
 11.025k 
 16k 
 22.05k 
 32k 
 44.1k 
 48k 
 88.2k 
 96k 
  Clock after PLL and dividers
  Set's ADC and Voice DAC format.
 interface format 
  Set PCM DAI bit size and sample rate.
 bit size 
 sample rate 
  Set's PCM dai fmt and BCLK.
 set masterslave audio interface 
 clock inversion 
 frame inversion not valid for DSP modes 
  Set's HiFi DAC format.
 interface format 
  Set's I2S DAI format.
 set masterslave audio interface 
 clock inversion 
 frame inversion not valid for DSP modes 
  Set PCM DAI bit size and sample rate.
 is digital filter coefficient valid ? 
 bit size 
 set clk source as pcmclk 
 set clk source as pcmclk 
 set clk source as mclk 
	 the digital mute covers the HiFi and Voice DAC's on the WM8753.
 Set to 500k 
 set vmid to 50k and unmute dac 
 Wait until fully charged 
 set vmid to 5k for quick power up 
 mute dac and set vmid to 500k, enable VREF 
  The WM8753 supports up to 4 different and mutually exclusive DAI
  configurations. This gives 2 PCM's available for use, hifi and voice.
  NOTE: The Voice PCM cannot play or capture audio to the CPU as it's DAI
  is connected between the wm8753 and a BT codec or GSM modem.
  1. Voice over PCM DAI - HIFI DAC over HIFI DAI
  2. Voice over HIFI DAI - HIFI disabled
  3. Voice disabled - HIFI over HIFI
  4. Voice disabled - HIFI over HIFI, uses voice DAI LRC for capture
 DAI HiFi mode 1 
 dummy for fast DAI switching 
 DAI Voice mode 1 
 set the update bits 
 CONFIG_SPI_MASTER 
 SPDX-License-Identifier: GPL-2.0-or-later
  Analog Devices ADAU1373 Audio Codec drive
  Copyright 2011 Analog Devices Inc.
  Author: Lars-Peter Clausen <lars@metafoo.de>
	 Datasheet claims Left ADC is bit 6 and Right ADC is bit 7, but that
 sysclk  256 
 23 sysclk  256 
 12 sysclk  256 
 13 sysclk  256 
 14 sysclk  256 
 16 sysclk  256 
 211 sysclk  256 
	 APLL input needs to be >= 8Mhz, so in case freq_in is less we use the
 Set sysclk to pll_rate  4 
 SPDX-License-Identifier: GPL-2.0-only
  rt5668.c  --  RT5668B ALSA SoC audio component driver
  Copyright 2018 Realtek Semiconductor Corp.
  Author: Bard Liao <bardliao@realtek.com>
 {0, +20, +24, +30, +35, +40, +44, +50, +52} dB 
 Interface data select 
  rt5668_sel_asrc_clk_src - select ASRC clock source for a set of filters
  @component: SoC audio component device.
  @filter_mask: mask of filters.
  @clk_src: clock source
  The ASRC function is for asynchronous MCLK and LRCK. Also, since RT5668 can
  only support standard 32fs or 64fs i2s format, ASRC should be enabled to
  support special i2s clock format such as Intel's 100fs(100  sampling rate).
  ASRC function will track i2s clock and generate a corresponding system clock
  for codec. This function provides an API to select the clock source for a
  set of filters specified by the mask. And the component driver will turn on
  ASRC for these filters if ASRC is selected as their clock source.
  rt5668_headset_detect - Detect headset.
  @component: SoC audio component device.
  @jack_insert: Jack insert or not.
  Detect whether is headset or not when jack inserted.
  Returns detect status.
 jack out 
 jack in 
 jack was out, report jack type 
 jack is already in, report button event 
			
			  rt5668 can report three kinds of button behavior,
			  one click, double click and hold. However,
			  currently we will report button pressedreleased
			  event. So all the three button behaviors are
			  treated as button pressed.
 unpressed 
 jack out 
 Headphone Output Volume 
 DAC Digital Volume 
 IN Boost Volume 
 ADC Digital Volume Control 
 ADC Boost Volume Control 
  set_dmic_clk - Set parameter of dmic.
  @w: DAPM widget.
  @kcontrol: The kcontrol of this widget.
  @event: Event id.
  Choose dmic clock between 1MHz and 3MHz.
  It is better for clock to approximate 3MHz.
 Digital Mixer 
 Analog Input Mixer 
 STO1 ADC1 Source 
 MX-26 [13] [5] 
 STO1 ADC Source 
 MX-26 [11:10] [3:2] 
 STO1 ADC2 Source 
 MX-26 [12] [4] 
 MX-79 [6:4] I2S1 ADC data location 
 Analog DAC L1 Source, Analog DAC R1 Source
 MX-2B [4], MX-2B [0]
 Out Switch 
Add delay to avoid pop noise
 ASRC 
 Input Side 
 Input Lines 
 Boost 
 REC Mixer 
 ADCs 
 ADC Mux 
 ADC Mixer 
 ADC PGA 
 Digital Interface 
 Digital Interface Select 
 Audio Interface 
 Output Side 
 DAC mixer before sound effect  
 DAC channel Mux 
 DAC Mixer 
 DACs 
 HPO 
 CLK DET 
 Output Lines 
PLL
ASRC
Vref
 mono mode 
 mono mode 
 restore settings 
 Sleep for 300 ms miniumum 
 DMIC pin
 share with LRCK2 
 share with DACDAT1 
 share with IRQ 
 share with BCLK2 
 SPDX-License-Identifier: GPL-2.0-only
  TS3A227E Autonomous Audio Accessory Detection and Configuration Switch
  Copyright (C) 2014 Google, Inc.
 Button values to be reported on the jack 
 TS3A227E registers 
 TS3A227E_REG_INTERRUPT 0x01 
 TS3A227E_REG_KP_INTERRUPT 0x02 
 TS3A227E_REG_INTERRUPT_DISABLE 0x03 
 TS3A227E_REG_SETTING_2 0x05 
 TS3A227E_REG_SETTING_3 0x06 
 TS3A227E_REG_ACCESSORY_STATUS  0x0b 
 Enable key press detection. 
 Check for plugunplug. 
 Report any key events. 
  ts3a227e_enable_jack_detect - Specify a jack for event reporting
  @component:  component to register the jack with
  @jack: jack to use to report headset and button events on
  After this function has been called the headset insertremove and button
  events 0-3 will be routed to the given jack.  Jack can be null to stop
  reporting.
 Enable interrupts except for ADC complete. 
 Read jack status because chip might not trigger interrupt at boot. 
 SPDX-License-Identifier: GPL-2.0
 Copyright (c) 2015-2017, The Linux Foundation.
 Copyright (c) 2019, Linaro Limited
 Digital register address space 
 Analog Register address space 
 WSA881x Analog registers 
 Default register reset values for WSA881x rev 2.0 
 4 ports 
 DAC 
 COMP 
 BOOST 
 VISENSE 
 IV feedback 
  Private data Structure for wsa881x. All parameters related to
  WSA881X codec needs to be defined here.
 Enable software reset output from soundwire slave 
 Bring out of analog reset 
 Bring out of digital reset 
	
	  Gain has to set incrementally in 4 steps
	  as per HW sequence
	
	  1ms delay is needed before change in gain
	  as per HW requirement.
	
	  1.5ms sleep is needed after boost enabledisable as per
	  HW requirement
 Boost Switch 
		
		  200us sleep is needed after visense txfe disable as per
		  HW requirement.
 SPDX-License-Identifier: GPL-2.0-only
  ALSA SoC TWL4030 codec driver
  Author:      Steve Sakoman, <steve@sakoman.com>
 Register descriptions are here 
 TWL4030 PMBR1 Register 
 TWL4030 PMBR1 Register GPIO6 mux bits 
 codec private data 
 reference counts of AIFAPLL users 
 Output (with associated amp) states 
 Decide if the given register can be written 
 All other register can be written 
 Update the ctl cache 
 REVISIT: this delay is present in TI sample drivers 
 but there seems to be no TRM requirement for it     
 Set TWL4030 GPIO6 as EXTMUTE signal 
 Initialize the local ctl register cache 
 anti-pop when changing analog gain 
 REG_ARXR2_APGA_CTL reset according to the TRM: 0dB, DA_EN 
 Machine dependent setup 
 initiate offset cancellation 
	
	  Wait for offset cancellation to complete.
	  Since this takes a while, do not slam the i2c.
	  Start polling the status after ~20ms.
 Earpiece 
 PreDrive Left 
 PreDrive Right 
 Headset Left 
 Headset Right 
 Carkit Left 
 Carkit Right 
 Handsfree Left 
 Handsfree Left virtual mute 
 Handsfree Right 
 Handsfree Right virtual mute 
 Vibra 
 Vibra audio path selection 
 Vibra path selection: local vibrator (PWM) or audio driven 
 Left analog microphone selection 
 Right analog microphone selection 
 TX1 LR AnalogDigital microphone selection 
 TX2 LR AnalogDigital microphone selection 
 Analog bypass for AudioR1 
 Analog bypass for AudioL1 
 Analog bypass for AudioR2 
 Analog bypass for AudioL2 
 Analog bypass for Voice 
 Digital bypass gain, mute instead of -30dB 
 Digital bypass left (TX1L -> RX2L) 
 Digital bypass right (TX1R -> RX2R) 
  Voice Sidetone GAIN volume control:
  from -51 to -10 dB in 1 dB steps (mute instead of -51 dB)
 Digital bypass voice: sidetone (VUL -> VDL)
  Output PGA builder:
  Handle the muting and unmuting of the given output (turning off the
  amplifier associated with the output pin)
  On mute bypass the reg_cache and write 0 to the register
  On unmute: restore the register content from the reg_cache
  Outputs handled in this way:  Earpiece, PreDrivLR, CarkitLR
 HF ramp-up 
 HF ramp-down 
 Enable AIF 
 enable the PLL before we use it to clock the DAI 
 disable the DAI before we stop it's source PLL 
 Base values for ramp delay calculation: 2^19 - 2^26 
	 Enable external mute control, this dramatically reduces
 Headset ramp-up according to the TRM 
 Actually write to the register 
 Wait ramp delay time + 1, so the VMID can settle 
		 Headset ramp-down _not_ according to
 Wait ramp delay time + 1, so the VMID can settle 
 Bypass the reg_cache to mute the headset 
 Disable external mute 
 Do the ramp-up only once 
 Do the ramp-down only if both headsetLR is disabled 
 Do the ramp-up only once 
 Do the ramp-down only if both headsetLR is disabled 
  Some of the gain controls in TWL (mostly those which are associated with
  the outputs) are implemented in an interesting way:
  0x0 : Power down (mute)
  0x1 : 6dB
  0x2 : 0 dB
  0x3 : -6 dB
  Inverting not going to help with these.
  Custom volsw and volsw_2r getput functions to handle these gain bits.
 Codec operation modes 
  FGAIN volume control:
  from -62 to 0 dB in 1 dB steps (mute instead of -63 dB)
  CGAIN volume control:
  0 dB to 12 dB in 6 dB steps
  value 2 and 3 means 12 dB
  Voice Downlink GAIN volume control:
  from -37 to 12 dB in 1 dB steps (mute instead of -37 dB)
  Analog playback gain
  -24 dB to 12 dB in 2 dB steps
  Gain controls tied to outputs
  -6 dB to 6 dB in 6 dB steps (mute instead of -12)
  Gain control for earpiece amplifier
  0 dB to 12 dB in 6 dB steps (mute instead of -6)
  Capture gain after the ADCs
  from 0 dB to 31 dB in 1 dB steps
  Gain control for input amplifiers
  0 dB to 30 dB in 6 dB steps
 AVADC clock priority 
 Vibra H-bridge direction mode 
 Vibra H-bridge direction 
 Digimic Left and right swapping 
 Codec operation mode control 
 Common playback gain controls 
 Common voice downlink gain controls 
 Separate output gain controls 
 Common capture gain controls 
 Left channel inputs 
 Right channel inputs 
 Digital microphones (Stereo) 
 Outputs 
 AIF and APLL clocks for running DAIs (including loopback) 
 DACs 
 Analog bypasses 
 Master analog loopback switch 
 Digital bypasses 
 Digital mixers, power control for the physical DACs 
 Analog mixers, power control for the physical PGAs 
 Output MIXER controls 
 Earpiece 
 PreDrivLR 
 HeadsetLR 
 CarkitLR 
 Output MUX controls 
 HandsfreeLR 
 Vibra 
	 Introducing four virtual ADC, since TWL4030 have four channel for
	 AnalogDigital mic path selection.
	   TX1 LeftRight: either analog LeftRight or Digimic0
 Analog input mixers for the capture amplifiers 
 Microphone bias 
 Stream -> DAC mapping 
 ADC -> Stream mapping 
 Supply for the digital part (APLL) 
 Internal playback routings 
 Earpiece 
 PreDrivL 
 PreDrivR 
 HeadsetL 
 HeadsetR 
 CarkitL 
 CarkitR 
 HandsfreeL 
 HandsfreeR 
 Vibra 
 outputs 
 Must be always connected (for AIF and APLL) 
 Must be always connected (for APLL) 
 Physical outputs 
 Capture path 
 Must be always connected (for AIF and APLL) 
 Physical inputs 
 TX1 Left capture path 
 TX1 Right capture path 
 TX2 Left capture path 
 TX2 Right capture path 
 Analog bypass routes 
 Supply for the Analog loopbacks 
 Digital bypass routes 
 Pick the stream, which need to be constrained 
 This should not happen.. 
 Set the constraints according to the already configured stream 
 In case of 4 channel mode, the RX1 LR for playback and the TX2 LR for
		 The DAI has one configuration for playback and capture, so
		  if the DAI has been already configured then constrain this
			 In option2 4 channel is not supported, set the
			  constraint for the first stream for channels, the
	 If all streams are closed, or the remaining stream has not yet
 If the closing substream had 4 channel, do the necessary cleanup 
 If the substream has 4 channel, do the necessary setup 
		 Safety check: are we in the correct operating mode and
 Ignoring hw_params for already configured DAI 
 bit rate 
 sample size 
			
			  If the codec is powered, than we need to toggle the
			  codec power.
	 Store the important parameters for the DAI configuration and set
	 If both playback and capture streams are open, and one of them
	  is setting the hw parameters right now (since we are here), set
 get format 
 set masterslave audio interface 
 interface format 
			
			  If the codec is powered, than we need to toggle the
			  codec power.
 In case of voice mode, the RX1 L(VRX) for downlink and the TX2 LR
	 If the system master clock is not 26MHz, the voice PCM interface is
	  not available.
	 If the codec mode is not option2, the voice PCM interface is not
	  available.
 Enable voice digital filters 
 Enable voice digital filters 
 bit rate 
			
			  If the codec is powered, than we need to toggle the
			  codec power.
 get format 
 set masterslave audio interface 
 clock inversion 
			
			  If the codec is powered, than we need to toggle the
			  codec power.
 Set the defaults, and power up the codec 
 SPDX-License-Identifier: GPL-2.0-only
  isabelle.c - Low power high fidelity audio codec driver
  Copyright (c) 2012 Texas Instruments, Inc
  Initially based on soundsoccodecstwl6040.c
 Register default values for ISABELLE driver. 
 Headset DAC playback switches 
 TX input selection 
 Left analog microphone selection 
 Left analog microphone selection 
 Mixer controls 
 TLV Declarations 
 from -63 to 0 dB in 1 dB steps 
 from -63 to 9 dB in 1 dB steps 
 DMIC Switch 
 Inputs 
 Outputs 
 Analog input muxes for the capture amplifiers 
 AIF 
 Analog Capture PGAs 
 Auxiliary FM PGAs 
 ADCs 
 Microphone Bias 
 Mixers 
 DACs 
 Analog Playback PGAs 
 Analog Playback Mux 
 TX Select 
 Output Drivers 
 Interface mapping 
 Input side mapping 
 Capture path 
 AFM Path 
 Earphone playback path 
 bit size 
 Rates supported by Isabelle driver 
 Formates supported by Isabelle driver. 
 ISABELLE dai structure 
 SPDX-License-Identifier: GPL-2.0-only
  cs35l32.c -- CS35L32 ALSA SoC audio driver
  Copyright 2014 CirrusLogic, Inc.
  Author: Brian Austin <brian.austin@cirrus.com>
 Power Ctl 1 
 Power Ctl 2 
 Clock Ctl 
 Low Battery Threshold 
 Voltage Monitor [RO] 
 Conv Peak Curr Protection CTL 
 IMON Scaling 
 AudioLED Pwr Manager 
 Serial Port Control 
 Class D Amp CTL 
 Protection Release CTL 
 Interrupt Mask 1 
 Interrupt Mask 2 
 Interrupt Mask 3 
 LED Flash Mode Current 
 LED Movie Mode Current 
 LED Flash Timer 
 LED Flash Inhibit Current 
 Current and threshold powerup sequence Pg37 in datasheet 
 Reset the Device 
 initialize codec 
 Setup VBOOST Management 
 Setup ADSP Format Config 
 Setup ADSP Data Configuration 
 Setup Low Battery Recovery  
 Setup Low Battery Threshold 
 Power down the AMP 
 Clear MCLK Error Bit since we don't have the clock yet 
 Hold down reset 
 Hold down reset 
 remove power 
 Enable power 
 SPDX-License-Identifier: GPL-2.0-only
 Copyright (c) 2020, Maxim Integrated
 SoundWire Control Port Registers 
 Soundwire Data Port 1 Registers 
 Soundwire Data Port 3 Registers 
 SoundWire Control Port Registers 
 Soundwire Data Port 1 Registers 
 Soundwire Data Port 3 Registers 
 Power management functions and structure 
 cache feedback register values before suspend 
 BITMAP: 00001000  Dataport 3 is active 
 BITMAP: 00000010  Dataport 1 is active 
 do this again for sink now 
 set the timeout values 
	
	  PM runtime is only enabled when a Slave reports as Attached
 set autosuspend parameters 
 update count of parent 'active' children 
 make sure the device does not suspend immediately 
 Software Reset 
 Set soundwire mode 
 Enable ADC 
 Set default Soundwire clock 
 Set default sampling rate for speaker and IVDAC 
 IV default slot configuration 
 LR mix configuration 
 Enable DC blocker 
 Enable IMON VMON DC blocker 
 voltage, current slot configuration 
 speaker feedback slot configuration 
 Set interleave mode 
 Speaker enable 
 Set default clock (12.288 Mhz) if the value is not in the list 
	
	 	Select the proper value for the register based on the
	 	requested clock. If the value is not in the list,
	 	use reasonable default - 12.288 Mhz
 SWCLK 
 The default Sampling Rate value for IV is 48KHz
 only IV are supported by capture 
 Channel size configuration 
 Sampling rate configuration 
 set correct sampling frequency 
 set sampling rate of IV 
 Use tx_mask or rx_mask to configure stream tag and set dma_data 
 tx_mask is unused since it's irrelevant for IV feedback 
  Allocate and assign private driver data structure  
 Read voltage and slot configuration 
 codec registration  
	
	  Perform initialization only if slave status is SDW_SLAVE_ATTACHED
 perform IO transfers required for Slave initialization 
  slave_ops: callbacks for get_clock_stop_mode, clock_stop and
  port_prep are not defined for now
 Regmap Initialization 
 SPDX-License-Identifier: GPL-2.0-or-later
  da7218.c - DA7218 ALSA SoC Codec Driver
  Copyright (c) 2015 Dialog Semiconductor
  Author: Adam Thomson <Adam.Thomson.Opensource@diasemi.com>
  TLVs and Enums
 Input TLVs 
 InputOutput TLVs 
 Output TLVs 
 Input Enums 
 InputOutput Enums 
 Output Enums 
  Control Functions
 ALC 
 Save current state of MIC control registers 
 Save current state of input mixer control registers 
 Save current state of input filter control registers 
 Save current state of input HPF control registers 
 Enable then Mute MIC PGAs 
 Enable input mixers unmuted 
 Enable input filters unmuted 
	
	  Make sure input HPFs voice mode is disabled, otherwise for sampling
	  rates above 32KHz the ADC signals will be stopped and will cause
	  calibration to lock up.
 Perform auto calibration 
 If auto calibration fails, disable DC offset, hybrid ALC 
 Enable DC offset cancellation 
 Enable ALC hybrid mode 
 Restore input HPF control registers to original states 
 Restore input filter control registers to original states 
 Restore input mixer control registers to original state 
 Restore MIC control registers to original states 
	
	  If ALC in operation and value of control has been updated,
	  make sure calibrated offsets are updated.
 Force ALC offset calibration if enabling ALC 
 Update bits to detail which channels are enableddisabled 
 ToneGen 
	
	  Frequency value spans two 8-bit registers, lower then upper byte.
	  Therefore we need to convert to host endianness here.
	
	  Frequency value spans two 8-bit registers, lower then upper byte.
	  Therefore we need to convert to little endian here to align with
	  HW registers.
	
	  Here we only enable the feature on paths which are already
	  powered. If a channel is enabled here for level detect, but that path
	  isn't powered, then the channel will actually be enabled when we do
	  power the path (IN_FILTER widget events). This handling avoids
	  unwanted level detect events.
 Determine which BiQuads we're setting based on size of config data 
	
	  Determine which BiQuads we're setting based on size of config data,
	  and stored the data for use by get function.
 Make sure at least out filter1 enabled to allow programming 
 Restore filter to previous setting 
  KControls
 Mics 
 Mixer Input 
 ADCs 
 Input Filters 
 AGS 
 ALC 
 Envelope Tracking 
 Input High-Pass Filters 
 Mic Level Detect 
 Digital Mixer (Input) 
 Digital Mixer (Output) 
 Sidetone Filter 
 Tone Generator 
 Gain ramping 
 DGS 
 Output High-Pass Filter 
 5-Band Equaliser 
 BiQuad Filters 
 Output Filters 
 Mixer Output 
 DAC Noise Gate 
 CP 
 Headphones 
  DAPM Mux Controls
  DAPM Mixer Controls
  DAPM Events
  We keep track of which input filters are enabled. This is used in the logic
  for controlling the mic level detect feature.
		
		  If we're enabling path for mic level detect, wait for path
		  to settle before enabling feature to avoid incorrect and
		  unwanted detect events.
 Enable configured level detection paths 
 Enable DAI clks for master mode 
 Tune reference oscillator 
 Check tuning complete 
 PC synchronised to DAI 
 If SRM not enabled, we don't need to check status 
 Check SRM has locked 
 PC free-running 
 Disable DAI clks for master mode 
	
	  If this is DA7217 and we're using single supply for differential
	  output, we really don't want to touch the charge pump.
 Enable headphone output 
 Headphone output high impedance 
  DAPM Widgets
 Input Supplies 
 Inputs 
 Input Mixer Supplies 
 Input PGAs 
 MicDMic Muxes 
 Input Filters 
 Tone Generator 
 Sidetone Input 
 Input Mixers 
 DAI Supply 
 DAI 
 Output Mixers 
 BiQuad Filters 
 Sidetone Mixers 
 Output Filters 
 Output PGAs 
 Output Supplies 
 Outputs 
  DAPM Mixer Routes
  DAPM audio route definition
 Input paths 
 Output paths 
  DAI operations
 Verify 2MHz - 54MHz MCLK provided, and set input divider 
 Configure PLL 
 Calculate dividers for PLL 
 Write PLL config & dividers 
 By default 64 BCLKs per WCLK is supported 
 No channels enabled so disable TDM, revert to 64-bit frames 
 Check we have valid slots 
 Check we have a valid offset given (first 2 bytes of rx_mask) 
 Calculate & validate frame size based on slot info provided. 
 SRs tied for ADCs and DACs. 
 Only 2 channels of data 
  HP Detect
  IRQ
 Read IRQ status reg 
 Mic level detect 
 HP detect 
 Clear interrupts 
  DT
  Codec driver functions
 Enable MCLK for transition to ON state 
 Master bias 
 Internal LDO 
 Remove MCLK 
 Only disable if jack detection disabled 
 Internal LDO 
 Master bias 
 Get required supplies 
 Determine VDDIO voltage provided 
 Enable main supplies 
 Ensure device in active mode 
 Update IO voltage level range 
 Mic Bias voltages 
 Mic 
 DMic 
 DA7217 Specific 
 DA7218 Specific 
 Regulator configuration 
 Handle DTPlatform data 
 Check if MCLK provided, if not the clock is NULL 
 Default PC to free-running 
	
	  Default Output Filter mixers to off otherwise DAPM will power
	  Mic to HP passthrough paths by default at startup.
 Default CP to normal load, power mode 
 Default gain ramping 
 Default infinite tone gen, startstop by Kcontrol 
 DA7217 specific config 
 Only DA7218 supports HP detect, mask off for DA7217 
 Put device into standby mode if jack detection disabled 
 Put device into active mode if previously moved to standby 
  Regmap configs
  I2C layer
 SPDX-License-Identifier: GPL-2.0-only
  wm8962.c  --  WM8962 ALSA SoC Audio driver
  Copyright 2010-2 Wolfson Microelectronics plc
  Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
 codec private data 
 Desired BCLK 
 We can't use the same notifier block for more than one supply and
  there's no way I can see to get from a callback to the caller
  except container_of().
 R0     - Left Input volume 
 R1     - Right Input volume 
 R2     - HPOUTL volume 
 R3     - HPOUTR volume 
 R5     - ADC & DAC Control 1 
 R6     - ADC & DAC Control 2 
 R7     - Audio Interface 0 
 R8     - Clocking2 
 R9     - Audio Interface 1 
 R10    - Left DAC volume 
 R11    - Right DAC volume 
 R14    - Audio Interface 2 
 R15    - Software Reset 
 R17    - ALC1 
 R18    - ALC2 
 R19    - ALC3 
 R20    - Noise Gate 
 R21    - Left ADC volume 
 R22    - Right ADC volume 
 R23    - Additional control(1) 
 R24    - Additional control(2) 
 R25    - Pwr Mgmt (1) 
 R26    - Pwr Mgmt (2) 
 R27    - Additional Control (3) 
 R28    - Anti-pop 
 R30    - Clocking 3 
 R31    - Input mixer control (1) 
 R32    - Left input mixer volume 
 R33    - Right input mixer volume 
 R34    - Input mixer control (2) 
 R35    - Input bias control 
 R37    - Left input PGA control 
 R38    - Right input PGA control 
 R40    - SPKOUTL volume 
 R41    - SPKOUTR volume 
 R49    - Class D Control 1 
 R51    - Class D Control 2 
 R56    - Clocking 4 
 R57    - DAC DSP Mixing (1) 
 R58    - DAC DSP Mixing (2) 
 R60    - DC Servo 0 
 R61    - DC Servo 1 
 R64    - DC Servo 4 
 R68    - Analogue PGA Bias 
 R69    - Analogue HP 0 
 R71    - Analogue HP 2 
 R72    - Charge Pump 1 
 R82    - Charge Pump B 
 R87    - Write Sequencer Control 1 
 R90    - Write Sequencer Control 2 
 R93    - Write Sequencer Control 3 
 R94    - Control Interface 
 R99    - Mixer Enables 
 R100   - Headphone Mixer (1) 
 R101   - Headphone Mixer (2) 
 R102   - Headphone Mixer (3) 
 R103   - Headphone Mixer (4) 
 R105   - Speaker Mixer (1) 
 R106   - Speaker Mixer (2) 
 R107   - Speaker Mixer (3) 
 R108   - Speaker Mixer (4) 
 R109   - Speaker Mixer (5) 
 R110   - Beep Generator (1) 
 R115   - Oscillator Trim (3) 
 R116   - Oscillator Trim (4) 
 R119   - Oscillator Trim (7) 
 R124   - Analogue Clocking1 
 R125   - Analogue Clocking2 
 R126   - Analogue Clocking3 
 R127   - PLL Software Reset 
 R131   - PLL 4 
 R136   - PLL 9 
 R137   - PLL 10 
 R138   - PLL 11 
 R139   - PLL 12 
 R140   - PLL 13 
 R141   - PLL 14 
 R142   - PLL 15 
 R143   - PLL 16 
 R155   - FLL Control (1) 
 R156   - FLL Control (2) 
 R157   - FLL Control (3) 
 R159   - FLL Control (5) 
 R160   - FLL Control (6) 
 R161   - FLL Control (7) 
 R162   - FLL Control (8) 
 R252   - General test 1 
 R256   - DF1 
 R257   - DF2 
 R258   - DF3 
 R259   - DF4 
 R260   - DF5 
 R261   - DF6 
 R262   - DF7 
 R264   - LHPF1 
 R265   - LHPF2 
 R268   - THREED1 
 R269   - THREED2 
 R270   - THREED3 
 R271   - THREED4 
 R276   - DRC 1 
 R277   - DRC 2 
 R278   - DRC 3 
 R279   - DRC 4 
 R280   - DRC 5 
 R285   - Tloopback 
 R335   - EQ1 
 R336   - EQ2 
 R337   - EQ3 
 R338   - EQ4 
 R339   - EQ5 
 R340   - EQ6 
 R341   - EQ7 
 R342   - EQ8 
 R343   - EQ9 
 R344   - EQ10 
 R345   - EQ11 
 R346   - EQ12 
 R347   - EQ13 
 R348   - EQ14 
 R349   - EQ15 
 R350   - EQ16 
 R351   - EQ17 
 R352   - EQ18 
 R353   - EQ19 
 R354   - EQ20 
 R355   - EQ21 
 R356   - EQ22 
 R357   - EQ23 
 R358   - EQ24 
 R359   - EQ25 
 R360   - EQ26 
 R361   - EQ27 
 R362   - EQ28 
 R363   - EQ29 
 R364   - EQ30 
 R365   - EQ31 
 R366   - EQ32 
 R367   - EQ33 
 R368   - EQ34 
 R369   - EQ35 
 R370   - EQ36 
 R371   - EQ37 
 R372   - EQ38 
 R373   - EQ39 
 R374   - EQ40 
 R375   - EQ41 
 R513   - GPIO 2 
 R514   - GPIO 3 
 R516   - GPIO 5 
 R517   - GPIO 6 
 R568   - Interrupt Status 1 Mask 
 R569   - Interrupt Status 2 Mask 
 R576   - Interrupt Control 
 R584   - IRQ Debounce 
 R586   -  MICINT Source Pol 
 R768   - DSP2 Power Management 
 R8192  - DSP2 Instruction RAM 0 
 R9216  - DSP2 Address RAM 2 
 R9217  - DSP2 Address RAM 1 
 R9218  - DSP2 Address RAM 0 
 R12288 - DSP2 Data1 RAM 1 
 R12289 - DSP2 Data1 RAM 0 
 R13312 - DSP2 Data2 RAM 1 
 R13313 - DSP2 Data2 RAM 0 
 R14336 - DSP2 Data3 RAM 1 
 R14337 - DSP2 Data3 RAM 0 
 R15360 - DSP2 Coeff RAM 0 
 R16384 - RETUNEADC_SHARED_COEFF_1 
 R16385 - RETUNEADC_SHARED_COEFF_0 
 R16386 - RETUNEDAC_SHARED_COEFF_1 
 R16387 - RETUNEDAC_SHARED_COEFF_0 
 R16388 - SOUNDSTAGE_ENABLES_1 
 R16389 - SOUNDSTAGE_ENABLES_0 
 R16896 - HDBASS_AI_1 
 R16897 - HDBASS_AI_0 
 R16898 - HDBASS_AR_1 
 R16899 - HDBASS_AR_0 
 R16900 - HDBASS_B_1 
 R16901 - HDBASS_B_0 
 R16902 - HDBASS_K_1 
 R16903 - HDBASS_K_0 
 R16904 - HDBASS_N1_1 
 R16905 - HDBASS_N1_0 
 R16906 - HDBASS_N2_1 
 R16907 - HDBASS_N2_0 
 R16908 - HDBASS_N3_1 
 R16909 - HDBASS_N3_0 
 R16910 - HDBASS_N4_1 
 R16911 - HDBASS_N4_0 
 R16912 - HDBASS_N5_1 
 R16913 - HDBASS_N5_0 
 R16914 - HDBASS_X1_1 
 R16915 - HDBASS_X1_0 
 R16916 - HDBASS_X2_1 
 R16917 - HDBASS_X2_0 
 R16918 - HDBASS_X3_1 
 R16919 - HDBASS_X3_0 
 R16920 - HDBASS_ATK_1 
 R16921 - HDBASS_ATK_0 
 R16922 - HDBASS_DCY_1 
 R16923 - HDBASS_DCY_0 
 R16924 - HDBASS_PG_1 
 R16925 - HDBASS_PG_0 
 R17408 - HPF_C_1 
 R17409 - HPF_C_0 
 R17920 - ADCL_RETUNE_C1_1 
 R17921 - ADCL_RETUNE_C1_0 
 R17922 - ADCL_RETUNE_C2_1 
 R17923 - ADCL_RETUNE_C2_0 
 R17924 - ADCL_RETUNE_C3_1 
 R17925 - ADCL_RETUNE_C3_0 
 R17926 - ADCL_RETUNE_C4_1 
 R17927 - ADCL_RETUNE_C4_0 
 R17928 - ADCL_RETUNE_C5_1 
 R17929 - ADCL_RETUNE_C5_0 
 R17930 - ADCL_RETUNE_C6_1 
 R17931 - ADCL_RETUNE_C6_0 
 R17932 - ADCL_RETUNE_C7_1 
 R17933 - ADCL_RETUNE_C7_0 
 R17934 - ADCL_RETUNE_C8_1 
 R17935 - ADCL_RETUNE_C8_0 
 R17936 - ADCL_RETUNE_C9_1 
 R17937 - ADCL_RETUNE_C9_0 
 R17938 - ADCL_RETUNE_C10_1 
 R17939 - ADCL_RETUNE_C10_0 
 R17940 - ADCL_RETUNE_C11_1 
 R17941 - ADCL_RETUNE_C11_0 
 R17942 - ADCL_RETUNE_C12_1 
 R17943 - ADCL_RETUNE_C12_0 
 R17944 - ADCL_RETUNE_C13_1 
 R17945 - ADCL_RETUNE_C13_0 
 R17946 - ADCL_RETUNE_C14_1 
 R17947 - ADCL_RETUNE_C14_0 
 R17948 - ADCL_RETUNE_C15_1 
 R17949 - ADCL_RETUNE_C15_0 
 R17950 - ADCL_RETUNE_C16_1 
 R17951 - ADCL_RETUNE_C16_0 
 R17952 - ADCL_RETUNE_C17_1 
 R17953 - ADCL_RETUNE_C17_0 
 R17954 - ADCL_RETUNE_C18_1 
 R17955 - ADCL_RETUNE_C18_0 
 R17956 - ADCL_RETUNE_C19_1 
 R17957 - ADCL_RETUNE_C19_0 
 R17958 - ADCL_RETUNE_C20_1 
 R17959 - ADCL_RETUNE_C20_0 
 R17960 - ADCL_RETUNE_C21_1 
 R17961 - ADCL_RETUNE_C21_0 
 R17962 - ADCL_RETUNE_C22_1 
 R17963 - ADCL_RETUNE_C22_0 
 R17964 - ADCL_RETUNE_C23_1 
 R17965 - ADCL_RETUNE_C23_0 
 R17966 - ADCL_RETUNE_C24_1 
 R17967 - ADCL_RETUNE_C24_0 
 R17968 - ADCL_RETUNE_C25_1 
 R17969 - ADCL_RETUNE_C25_0 
 R17970 - ADCL_RETUNE_C26_1 
 R17971 - ADCL_RETUNE_C26_0 
 R17972 - ADCL_RETUNE_C27_1 
 R17973 - ADCL_RETUNE_C27_0 
 R17974 - ADCL_RETUNE_C28_1 
 R17975 - ADCL_RETUNE_C28_0 
 R17976 - ADCL_RETUNE_C29_1 
 R17977 - ADCL_RETUNE_C29_0 
 R17978 - ADCL_RETUNE_C30_1 
 R17979 - ADCL_RETUNE_C30_0 
 R17980 - ADCL_RETUNE_C31_1 
 R17981 - ADCL_RETUNE_C31_0 
 R17982 - ADCL_RETUNE_C32_1 
 R17983 - ADCL_RETUNE_C32_0 
 R18432 - RETUNEADC_PG2_1 
 R18433 - RETUNEADC_PG2_0 
 R18434 - RETUNEADC_PG_1 
 R18435 - RETUNEADC_PG_0 
 R18944 - ADCR_RETUNE_C1_1 
 R18945 - ADCR_RETUNE_C1_0 
 R18946 - ADCR_RETUNE_C2_1 
 R18947 - ADCR_RETUNE_C2_0 
 R18948 - ADCR_RETUNE_C3_1 
 R18949 - ADCR_RETUNE_C3_0 
 R18950 - ADCR_RETUNE_C4_1 
 R18951 - ADCR_RETUNE_C4_0 
 R18952 - ADCR_RETUNE_C5_1 
 R18953 - ADCR_RETUNE_C5_0 
 R18954 - ADCR_RETUNE_C6_1 
 R18955 - ADCR_RETUNE_C6_0 
 R18956 - ADCR_RETUNE_C7_1 
 R18957 - ADCR_RETUNE_C7_0 
 R18958 - ADCR_RETUNE_C8_1 
 R18959 - ADCR_RETUNE_C8_0 
 R18960 - ADCR_RETUNE_C9_1 
 R18961 - ADCR_RETUNE_C9_0 
 R18962 - ADCR_RETUNE_C10_1 
 R18963 - ADCR_RETUNE_C10_0 
 R18964 - ADCR_RETUNE_C11_1 
 R18965 - ADCR_RETUNE_C11_0 
 R18966 - ADCR_RETUNE_C12_1 
 R18967 - ADCR_RETUNE_C12_0 
 R18968 - ADCR_RETUNE_C13_1 
 R18969 - ADCR_RETUNE_C13_0 
 R18970 - ADCR_RETUNE_C14_1 
 R18971 - ADCR_RETUNE_C14_0 
 R18972 - ADCR_RETUNE_C15_1 
 R18973 - ADCR_RETUNE_C15_0 
 R18974 - ADCR_RETUNE_C16_1 
 R18975 - ADCR_RETUNE_C16_0 
 R18976 - ADCR_RETUNE_C17_1 
 R18977 - ADCR_RETUNE_C17_0 
 R18978 - ADCR_RETUNE_C18_1 
 R18979 - ADCR_RETUNE_C18_0 
 R18980 - ADCR_RETUNE_C19_1 
 R18981 - ADCR_RETUNE_C19_0 
 R18982 - ADCR_RETUNE_C20_1 
 R18983 - ADCR_RETUNE_C20_0 
 R18984 - ADCR_RETUNE_C21_1 
 R18985 - ADCR_RETUNE_C21_0 
 R18986 - ADCR_RETUNE_C22_1 
 R18987 - ADCR_RETUNE_C22_0 
 R18988 - ADCR_RETUNE_C23_1 
 R18989 - ADCR_RETUNE_C23_0 
 R18990 - ADCR_RETUNE_C24_1 
 R18991 - ADCR_RETUNE_C24_0 
 R18992 - ADCR_RETUNE_C25_1 
 R18993 - ADCR_RETUNE_C25_0 
 R18994 - ADCR_RETUNE_C26_1 
 R18995 - ADCR_RETUNE_C26_0 
 R18996 - ADCR_RETUNE_C27_1 
 R18997 - ADCR_RETUNE_C27_0 
 R18998 - ADCR_RETUNE_C28_1 
 R18999 - ADCR_RETUNE_C28_0 
 R19000 - ADCR_RETUNE_C29_1 
 R19001 - ADCR_RETUNE_C29_0 
 R19002 - ADCR_RETUNE_C30_1 
 R19003 - ADCR_RETUNE_C30_0 
 R19004 - ADCR_RETUNE_C31_1 
 R19005 - ADCR_RETUNE_C31_0 
 R19006 - ADCR_RETUNE_C32_1 
 R19007 - ADCR_RETUNE_C32_0 
 R19456 - DACL_RETUNE_C1_1 
 R19457 - DACL_RETUNE_C1_0 
 R19458 - DACL_RETUNE_C2_1 
 R19459 - DACL_RETUNE_C2_0 
 R19460 - DACL_RETUNE_C3_1 
 R19461 - DACL_RETUNE_C3_0 
 R19462 - DACL_RETUNE_C4_1 
 R19463 - DACL_RETUNE_C4_0 
 R19464 - DACL_RETUNE_C5_1 
 R19465 - DACL_RETUNE_C5_0 
 R19466 - DACL_RETUNE_C6_1 
 R19467 - DACL_RETUNE_C6_0 
 R19468 - DACL_RETUNE_C7_1 
 R19469 - DACL_RETUNE_C7_0 
 R19470 - DACL_RETUNE_C8_1 
 R19471 - DACL_RETUNE_C8_0 
 R19472 - DACL_RETUNE_C9_1 
 R19473 - DACL_RETUNE_C9_0 
 R19474 - DACL_RETUNE_C10_1 
 R19475 - DACL_RETUNE_C10_0 
 R19476 - DACL_RETUNE_C11_1 
 R19477 - DACL_RETUNE_C11_0 
 R19478 - DACL_RETUNE_C12_1 
 R19479 - DACL_RETUNE_C12_0 
 R19480 - DACL_RETUNE_C13_1 
 R19481 - DACL_RETUNE_C13_0 
 R19482 - DACL_RETUNE_C14_1 
 R19483 - DACL_RETUNE_C14_0 
 R19484 - DACL_RETUNE_C15_1 
 R19485 - DACL_RETUNE_C15_0 
 R19486 - DACL_RETUNE_C16_1 
 R19487 - DACL_RETUNE_C16_0 
 R19488 - DACL_RETUNE_C17_1 
 R19489 - DACL_RETUNE_C17_0 
 R19490 - DACL_RETUNE_C18_1 
 R19491 - DACL_RETUNE_C18_0 
 R19492 - DACL_RETUNE_C19_1 
 R19493 - DACL_RETUNE_C19_0 
 R19494 - DACL_RETUNE_C20_1 
 R19495 - DACL_RETUNE_C20_0 
 R19496 - DACL_RETUNE_C21_1 
 R19497 - DACL_RETUNE_C21_0 
 R19498 - DACL_RETUNE_C22_1 
 R19499 - DACL_RETUNE_C22_0 
 R19500 - DACL_RETUNE_C23_1 
 R19501 - DACL_RETUNE_C23_0 
 R19502 - DACL_RETUNE_C24_1 
 R19503 - DACL_RETUNE_C24_0 
 R19504 - DACL_RETUNE_C25_1 
 R19505 - DACL_RETUNE_C25_0 
 R19506 - DACL_RETUNE_C26_1 
 R19507 - DACL_RETUNE_C26_0 
 R19508 - DACL_RETUNE_C27_1 
 R19509 - DACL_RETUNE_C27_0 
 R19510 - DACL_RETUNE_C28_1 
 R19511 - DACL_RETUNE_C28_0 
 R19512 - DACL_RETUNE_C29_1 
 R19513 - DACL_RETUNE_C29_0 
 R19514 - DACL_RETUNE_C30_1 
 R19515 - DACL_RETUNE_C30_0 
 R19516 - DACL_RETUNE_C31_1 
 R19517 - DACL_RETUNE_C31_0 
 R19518 - DACL_RETUNE_C32_1 
 R19519 - DACL_RETUNE_C32_0 
 R19968 - RETUNEDAC_PG2_1 
 R19969 - RETUNEDAC_PG2_0 
 R19970 - RETUNEDAC_PG_1 
 R19971 - RETUNEDAC_PG_0 
 R20480 - DACR_RETUNE_C1_1 
 R20481 - DACR_RETUNE_C1_0 
 R20482 - DACR_RETUNE_C2_1 
 R20483 - DACR_RETUNE_C2_0 
 R20484 - DACR_RETUNE_C3_1 
 R20485 - DACR_RETUNE_C3_0 
 R20486 - DACR_RETUNE_C4_1 
 R20487 - DACR_RETUNE_C4_0 
 R20488 - DACR_RETUNE_C5_1 
 R20489 - DACR_RETUNE_C5_0 
 R20490 - DACR_RETUNE_C6_1 
 R20491 - DACR_RETUNE_C6_0 
 R20492 - DACR_RETUNE_C7_1 
 R20493 - DACR_RETUNE_C7_0 
 R20494 - DACR_RETUNE_C8_1 
 R20495 - DACR_RETUNE_C8_0 
 R20496 - DACR_RETUNE_C9_1 
 R20497 - DACR_RETUNE_C9_0 
 R20498 - DACR_RETUNE_C10_1 
 R20499 - DACR_RETUNE_C10_0 
 R20500 - DACR_RETUNE_C11_1 
 R20501 - DACR_RETUNE_C11_0 
 R20502 - DACR_RETUNE_C12_1 
 R20503 - DACR_RETUNE_C12_0 
 R20504 - DACR_RETUNE_C13_1 
 R20505 - DACR_RETUNE_C13_0 
 R20506 - DACR_RETUNE_C14_1 
 R20507 - DACR_RETUNE_C14_0 
 R20508 - DACR_RETUNE_C15_1 
 R20509 - DACR_RETUNE_C15_0 
 R20510 - DACR_RETUNE_C16_1 
 R20511 - DACR_RETUNE_C16_0 
 R20512 - DACR_RETUNE_C17_1 
 R20513 - DACR_RETUNE_C17_0 
 R20514 - DACR_RETUNE_C18_1 
 R20515 - DACR_RETUNE_C18_0 
 R20516 - DACR_RETUNE_C19_1 
 R20517 - DACR_RETUNE_C19_0 
 R20518 - DACR_RETUNE_C20_1 
 R20519 - DACR_RETUNE_C20_0 
 R20520 - DACR_RETUNE_C21_1 
 R20521 - DACR_RETUNE_C21_0 
 R20522 - DACR_RETUNE_C22_1 
 R20523 - DACR_RETUNE_C22_0 
 R20524 - DACR_RETUNE_C23_1 
 R20525 - DACR_RETUNE_C23_0 
 R20526 - DACR_RETUNE_C24_1 
 R20527 - DACR_RETUNE_C24_0 
 R20528 - DACR_RETUNE_C25_1 
 R20529 - DACR_RETUNE_C25_0 
 R20530 - DACR_RETUNE_C26_1 
 R20531 - DACR_RETUNE_C26_0 
 R20532 - DACR_RETUNE_C27_1 
 R20533 - DACR_RETUNE_C27_0 
 R20534 - DACR_RETUNE_C28_1 
 R20535 - DACR_RETUNE_C28_0 
 R20536 - DACR_RETUNE_C29_1 
 R20537 - DACR_RETUNE_C29_0 
 R20538 - DACR_RETUNE_C30_1 
 R20539 - DACR_RETUNE_C30_0 
 R20540 - DACR_RETUNE_C31_1 
 R20541 - DACR_RETUNE_C31_0 
 R20542 - DACR_RETUNE_C32_1 
 R20543 - DACR_RETUNE_C32_0 
 R20992 - VSS_XHD2_1 
 R20993 - VSS_XHD2_0 
 R20994 - VSS_XHD3_1 
 R20995 - VSS_XHD3_0 
 R20996 - VSS_XHN1_1 
 R20997 - VSS_XHN1_0 
 R20998 - VSS_XHN2_1 
 R20999 - VSS_XHN2_0 
 R21000 - VSS_XHN3_1 
 R21001 - VSS_XHN3_0 
 R21002 - VSS_XLA_1 
 R21003 - VSS_XLA_0 
 R21004 - VSS_XLB_1 
 R21005 - VSS_XLB_0 
 R21006 - VSS_XLG_1 
 R21007 - VSS_XLG_0 
 R21008 - VSS_PG2_1 
 R21009 - VSS_PG2_0 
 R21010 - VSS_PG_1 
 R21011 - VSS_PG_0 
 R21012 - VSS_XTD1_1 
 R21013 - VSS_XTD1_0 
 R21014 - VSS_XTD2_1 
 R21015 - VSS_XTD2_0 
 R21016 - VSS_XTD3_1 
 R21017 - VSS_XTD3_0 
 R21018 - VSS_XTD4_1 
 R21019 - VSS_XTD4_0 
 R21020 - VSS_XTD5_1 
 R21021 - VSS_XTD5_0 
 R21022 - VSS_XTD6_1 
 R21023 - VSS_XTD6_0 
 R21024 - VSS_XTD7_1 
 R21025 - VSS_XTD7_0 
 R21026 - VSS_XTD8_1 
 R21027 - VSS_XTD8_0 
 R21028 - VSS_XTD9_1 
 R21029 - VSS_XTD9_0 
 R21030 - VSS_XTD10_1 
 R21031 - VSS_XTD10_0 
 R21032 - VSS_XTD11_1 
 R21033 - VSS_XTD11_0 
 R21034 - VSS_XTD12_1 
 R21035 - VSS_XTD12_0 
 R21036 - VSS_XTD13_1 
 R21037 - VSS_XTD13_0 
 R21038 - VSS_XTD14_1 
 R21039 - VSS_XTD14_0 
 R21040 - VSS_XTD15_1 
 R21041 - VSS_XTD15_0 
 R21042 - VSS_XTD16_1 
 R21043 - VSS_XTD16_0 
 R21044 - VSS_XTD17_1 
 R21045 - VSS_XTD17_0 
 R21046 - VSS_XTD18_1 
 R21047 - VSS_XTD18_0 
 R21048 - VSS_XTD19_1 
 R21049 - VSS_XTD19_0 
 R21050 - VSS_XTD20_1 
 R21051 - VSS_XTD20_0 
 R21052 - VSS_XTD21_1 
 R21053 - VSS_XTD21_0 
 R21054 - VSS_XTD22_1 
 R21055 - VSS_XTD22_0 
 R21056 - VSS_XTD23_1 
 R21057 - VSS_XTD23_0 
 R21058 - VSS_XTD24_1 
 R21059 - VSS_XTD24_0 
 R21060 - VSS_XTD25_1 
 R21061 - VSS_XTD25_0 
 R21062 - VSS_XTD26_1 
 R21063 - VSS_XTD26_0 
 R21064 - VSS_XTD27_1 
 R21065 - VSS_XTD27_0 
 R21066 - VSS_XTD28_1 
 R21067 - VSS_XTD28_0 
 R21068 - VSS_XTD29_1 
 R21069 - VSS_XTD29_0 
 R21070 - VSS_XTD30_1 
 R21071 - VSS_XTD30_0 
 R21072 - VSS_XTD31_1 
 R21073 - VSS_XTD31_0 
 R21074 - VSS_XTD32_1 
 R21075 - VSS_XTD32_0 
 R21076 - VSS_XTS1_1 
 R21077 - VSS_XTS1_0 
 R21078 - VSS_XTS2_1 
 R21079 - VSS_XTS2_0 
 R21080 - VSS_XTS3_1 
 R21081 - VSS_XTS3_0 
 R21082 - VSS_XTS4_1 
 R21083 - VSS_XTS4_0 
 R21084 - VSS_XTS5_1 
 R21085 - VSS_XTS5_0 
 R21086 - VSS_XTS6_1 
 R21087 - VSS_XTS6_0 
 R21088 - VSS_XTS7_1 
 R21089 - VSS_XTS7_0 
 R21090 - VSS_XTS8_1 
 R21091 - VSS_XTS8_0 
 R21092 - VSS_XTS9_1 
 R21093 - VSS_XTS9_0 
 R21094 - VSS_XTS10_1 
 R21095 - VSS_XTS10_0 
 R21096 - VSS_XTS11_1 
 R21097 - VSS_XTS11_0 
 R21098 - VSS_XTS12_1 
 R21099 - VSS_XTS12_0 
 R21100 - VSS_XTS13_1 
 R21101 - VSS_XTS13_0 
 R21102 - VSS_XTS14_1 
 R21103 - VSS_XTS14_0 
 R21104 - VSS_XTS15_1 
 R21105 - VSS_XTS15_0 
 R21106 - VSS_XTS16_1 
 R21107 - VSS_XTS16_0 
 R21108 - VSS_XTS17_1 
 R21109 - VSS_XTS17_0 
 R21110 - VSS_XTS18_1 
 R21111 - VSS_XTS18_0 
 R21112 - VSS_XTS19_1 
 R21113 - VSS_XTS19_0 
 R21114 - VSS_XTS20_1 
 R21115 - VSS_XTS20_0 
 R21116 - VSS_XTS21_1 
 R21117 - VSS_XTS21_0 
 R21118 - VSS_XTS22_1 
 R21119 - VSS_XTS22_0 
 R21120 - VSS_XTS23_1 
 R21121 - VSS_XTS23_0 
 R21122 - VSS_XTS24_1 
 R21123 - VSS_XTS24_0 
 R21124 - VSS_XTS25_1 
 R21125 - VSS_XTS25_0 
 R21126 - VSS_XTS26_1 
 R21127 - VSS_XTS26_0 
 R21128 - VSS_XTS27_1 
 R21129 - VSS_XTS27_0 
 R21130 - VSS_XTS28_1 
 R21131 - VSS_XTS28_0 
 R21132 - VSS_XTS29_1 
 R21133 - VSS_XTS29_0 
 R21134 - VSS_XTS30_1 
 R21135 - VSS_XTS30_0 
 R21136 - VSS_XTS31_1 
 R21137 - VSS_XTS31_0 
 R21138 - VSS_XTS32_1 
 R21139 - VSS_XTS32_0 
 Mute the ADCs and DACs 
 Restore the ADCs and DACs 
 The VU bits for the headphones are in a different register to the mute
  bits and only take effect on the PGA if it is actually powered.
 Apply the update (if any) 
 If the left PGA is enabled hit that VU bit... 
 ...otherwise the right.  The VU is stereo. 
 The VU bits for the speakers are in a different register to the mute
  bits and only take effect on the PGA if it is actually powered.
 Apply the update (if any) 
 If the left PGA is enabled hit that VU bit... 
 ...otherwise the right.  The VU is stereo. 
 Start the DC servo 
 Wait for it to complete, should be well under 100ms 
 VU bits for the output PGAs only take effect while the PGA is powered 
 -1 for reserved values 
	 DSPCLK_DIV can be only generated correctly after enabling SYSCLK.
	  So we here provisionally enable it and then disable it afterward
	  if current bias_level hasn't reached SND_SOC_BIAS_ON.
 Search a proper bclk, not exact match. 
 Table is sorted 
 VMID 250k 
 VMID 2250k 
 The size in bits of the FLL divide multiplied by 10
 Fref must be <=13.5MHz 
 Apply the division for our remaining calculations 
 Fvco should be 90-100MHz; don't check the upper bound 
 Find an appropriate FLL_FRATIO and factor it out of the target 
 Any change? 
 Parameters good, disable so we can reprogram 
 Stop the FLL while we reconfigure 
	 This should be a massive overestimate but go even
	  higher if we'll error out
	
	  The DAC mute bit is mirrored in two registers, update both to keep
	  the register cache consistent.
 Acknowledge the interrupts 
  wm8962_mic_detect - Enable microphone detection via the WM8962 IRQ
  @component:  WM8962 component
  @jack:   jack to report detection events on
  Enable microphone detection via IRQ on the WM8962.  If GPIOs are
  being used to bring out signals to the processor then only platform
  data configuration is needed for WM8962 and processor GPIOs should
  be configured using snd_soc_jack_add_gpios() instead.
  If no jack is supplied detection will be disabled.
 Send an initial empty report 
 For usability define a way of injecting beep events for the device -
  many systems will not have a keyboard.
 Kick the beep from a workqueue 
	 Some of the GPIOs are behind MFP configuration and need to
	 The WM8962 GPIOs aren't linearly numbered.  For simplicity
	  we export linear numbers and error out if the unsupported
	  ones are requsted.
 Force function 1 (logic output) 
 This should really be moved into the regulator core 
 Save boards having to disable DMIC when not in use 
		
		  Register 515 (WM8962_GPIO_BASE + 3) does not exist,
		  so skip its access
 Improve power consumption for IN4 DC measurement mode 
			
			  The range of GPIO register value is [0x0, 0xffff]
			  While the default value of each register is 0x0
			  Any other value will be regarded as default value
 If platform data was supplied, update the default data in priv 
	
	  We haven't marked the chip revision as volatile due to
	  sharing a register with the right input volume; explicitly
	  bypass the cache to read it.
	 SYSCLK defaults to on; make sure it is off so we can safely
	  write to registers if the device is declocked.
 Ensure we have soft control over all registers 
 Ensure that the oscillator and PLLs are disabled 
 Apply static configuration for GPIOs 
 Put the speakers into mono mode? 
	 Micbias setup, detection enable and detection
 Latch volume update bits 
 Stereo control for EQ 
 Don't debouce interrupts so we don't need SYSCLK 
 Non-fatal 
 Enable some IRQs by default 
 The drivers should power up as needed 
	 SYSCLK defaults to on; make sure it is off so we can safely
	  write to registers if the device is declocked.
 Ensure we have soft control over all registers 
 Ensure that the oscillator and PLLs are disabled 
 Bias enable at 25k (fast start-up) 
 SPDX-License-Identifier: GPL-2.0
 Copyright (c) 2021, Maxim Integrated
 interface format 
 BCLKs per LRCLK 
 match BCLKs per LRCLK 
 BCLKLRCLK ratio calculation 
 BCLK configuration 
 pcm mode configuration 
 sampling rate configuration 
 set DAI_SR to correct LRCLK frequency 
 BCLK configuration 
 Channel size configuration 
 Rx slot configuration 
 Left Input Selection 
 Right Input Selection 
 Volume 
 Volume Ramp UpDown Enable
 Clock Monitor Enable 
 Clock Monitor Config 
 Dither Enable 
 DC Blocker Enable 
 Speaker Safe Mode Enable 
 AMP SSM Enable 
 Dynamic Headroom Tracking 
 ADC configuration 
 Plabyack 
 Software Reset 
 LR mono mix configuration : "DAI Sel" for 0x2043 
 PCM input channles configuration : "Left Input Selection" for 0x2044 
 PCM input channles configuration : "Right Input Selection" for 0x2044 
 Enable DC blocker 
 Enable Clock Monitor Auto-restart 
 set Rx Enable 
 regmap initialization 
 Power on device 
 Check Revision ID 
 codec registration 
 SPDX-License-Identifier: GPL-2.0
 Driver for the Texas Instruments TAS2764 CODEC
 Copyright (C) 2020 Texas Instruments Inc.
 SPDX-License-Identifier: GPL-2.0-only
  ALSA SoC Texas Instruments TPA6130A2 headset stereo amplifier driver
  Copyright (C) Nokia Corporation
  Author: Peter Ujfalusi <peter.ujfalusi@ti.com>
 This struct is used to save the context 
 Power on 
 Sync registers 
		 Powered off device does not retain registers. While device
		  is off, any register updates (i.e. volume changes) should
		  happen in cache only.
 Power off 
 Before widget power up: turn chip on, sync registers 
 After widget power down: turn chip off 
  TPA6130 volume. From -59.5 to 4 dB with increasing step size when going
  down in gain.
 Read version 
 Disable the chip 
 SPDX-License-Identifier: GPL-2.0-only
  ALSA SoC WM9090 driver
  Copyright 2009-12 Wolfson Microelectronics
  Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
 R1   - Power Management (1) 
 R2   - Power Management (2) 
 R3   - Power Management (3) 
 R6   - Clocking 1 
 R22  - IN1 Line Control 
 R23  - IN2 Line Control 
 R24  - IN1 Line Input A Volume 
 R25  - IN1  Line Input B Volume 
 R26  - IN2 Line Input A Volume 
 R27  - IN2 Line Input B Volume 
 R28  - Left Output Volume 
 R29  - Right Output Volume 
 R34  - SPKMIXL Attenuation 
 R36  - SPKOUT Mixers 
 R37  - ClassD3 
 R38  - Speaker Volume Left 
 R45  - Output Mixer1 
 R46  - Output Mixer2 
 R47  - Output Mixer3 
 R48  - Output Mixer4 
 R54  - Speaker Mixer 
 R57  - AntiPOP2 
 R70  - Write Sequencer 0 
 R71  - Write Sequencer 1 
 R72  - Write Sequencer 2 
 R73  - Write Sequencer 3 
 R74  - Write Sequencer 4 
 R75  - Write Sequencer 5 
 R76  - Charge Pump 1 
 R85  - DC Servo 1 
 R87  - DC Servo 3 
 R96  - Analogue HP 0 
 R98  - AGC Control 0 
 R99  - AGC Control 1 
 R100 - AGC Control 2 
 This struct is used to save the context 
		 Start the DC servo.  We don't currently use the
		  ability to save the state since we don't have full
		  control of the analogue paths and they can change
		  DC offsets; see the WM8904 driver for an example of
		  doing so.
  The machine driver should call this from their set_bias_level; if there
  isn't one then this can just be set as the set_bias_level function.
 Probably an overestimate 
 Restore the register cache 
		 We keep VMID off during standby since the combination of
		  ground referenced outputs and class D speaker mean that
		  latency is not an issue.
	 Configure some defaults; they will be written out when we
	  bring the bias up.
 SPDX-License-Identifier: GPL-2.0
  ak4118.c  --  Asahi Kasei ALSA Soc Audio driver
  Copyright 2018 DEVIALET
 format not supported 
 release reset 
 unmask all int1 sources 
 rx detect enable on all channels 
 hold reset 
 SPDX-License-Identifier: GPL-2.0-or-later
  soundsoccodecswm8782.c
  simple, strap-pin configured 24bit 2ch ADC
  Copyright: 2011 Raumfeld GmbH
  Author: Johannes Stezenbach <js@sig21.net>
  based on ad73311.c
  Copyright:	Analog Devices Inc.
  Author:	Cliff Cai <cliff.cai@analog.com>
 For configurations with FSAMPEN=0 
 regulator power supply names 
 analog supply, 2.7V - 3.6V 
 digital supply, 2.7V - 5.5V 
 CONFIG_PM 
 SPDX-License-Identifier: GPL-2.0-only
  rt5640.c  --  RT5640RT5639 ALSA SoC audio codec driver
  Copyright 2011 Realtek Semiconductor Corp.
  Author: Johnny Hsu <johnnyhsu@realtek.com>
  Copyright (c) 2013, NVIDIA CORPORATION.  All rights reserved.
 {0, +20, +24, +30, +35, +40, +44, +50, +52} dB 
 Interface data select 
 Class D speaker gain ratio 
 Speaker Output Volume 
 Headphone Output Volume 
 OUTPUT Control 
 DAC Digital Volume 
 IN1IN2IN3 Control 
 INLINR Volume Control 
 ADC Digital Volume Control 
 ADC Boost Volume Control 
 Class D speaker gain ratio 
 MONO Output Control 
  set_dmic_clk - Set parameter of dmic.
  @w: DAPM widget.
  @kcontrol: The kcontrol of this widget.
  @event: Event id.
 Digital Mixer 
 Analog Input Mixer 
 Analog Output Mixer 
 Stereo ADC source 
 Mono ADC source 
 DAC2 channel source 
 digital interface and iis interface map 
 SDI select 
 depop parameters 
 headphone amp power on 
 ASRC 
 Input Side 
 micbias 
 Input Lines 
 Boost 
 Input Volume 
 REC Mixer 
 ADCs 
 ADC Mux 
 ADC Mixer 
 Digital Interface 
 Digital Interface Select 
 Audio Interface 
 Output Side 
 DAC mixer before sound effect  
 DAC Mixer 
 DACs 
 SPKOUT Mixer 
 Ouput Volume 
 SPOHPOLOUTMono Mixer 
 Output Switch 
 Output Lines 
 Audio DSP 
 ANC 
 DAC2 channel Mux 
		
		  SND_SOC_BIAS_PREPARE is called while preparing for a
		  transition to ON or away from ON. If current bias_level
		  is SND_SOC_BIAS_ON, then it is preparing for a transition
		  away from ON. Disable the clock in that case, otherwise
		  enable it.
 OVCD is unreliable when used with RCCLK as sysclk-source 
 Jack detect and button-press timings 
 milli seconds 
 Aprox. 2 seconds worth of tries 
 milli seconds 
 milli seconds 
 assume something is wrong after this 
 Check the jack was not removed underneath us 
 Remember till after JACK_UNPLUG_TIME wait 
	
	  The pins get temporarily shorted on jack unplug, so we poll for
	  at least JACK_UNPLUG_TIME milli-seconds before reporting a press.
 Re-enable OVCD IRQ to detect next press 
 Stop polling 
	
	  We get the insertion event before the jack is fully inserted at which
	  point the second ring on a TRRS connector may short the 2nd ring and
	  sleeve contacts, also the overcurrent detection is not entirely
	  reliable. So we try several times with a wait in between until we
	  detect the same type JACK_DETECT_COUNT times in a row.
 Clear any previous over-current status flag 
 Check the jack is still connected before checking ovcd 
			
			  Over current detected, there is a short between the
			  2nd ring contact and the ground, so a TRS connector
			  without a mic contact and thus plain headphones.
 Jack removed, or spurious IRQ? 
 Jack inserted 
 Enable ovcd IRQ for button press detect. 
 No more need for overcurrent detect. 
		
		  The ovcd IRQ keeps firing while the button is pressed, so
		  we disable it and start polling the button until released.
		 
		  The disable will make the IRQ pin 0 again and since we get
		  IRQs on both edges (so as to detect both jack plugin and
		  unplug) this means we will immediately get another IRQ.
		  The ovcd_irq_enabled check above makes the 2ND IRQ a NOP.
		
		  If the jack-detect IRQ flag goes high (unplug) after our
		  above rt5640_jack_inserted() check and before we have
		  disabled the OVCD IRQ, the IRQ pin will stay high and as
		  we react to edges, we miss the unplug event -> recheck.
	
	  The over-current-detect is only reliable in detecting the absence
	  of over-current, when the mic-contact in the jack is short-circuited,
	  the hardware periodically retries if it can apply the bias-current
	  leading to the ovcd status flip-flopping 1-0-1 with it being 0 about
	  10% of the time, as we poll the ovcd status bit we might hit that
	  10%, so we enable sticky mode and when checking OVCD we clear the
	  status, msleep() a bit and then check to get a reliable reading.
	
	  soc_remove_component() force-disables jack and thus rt5640->jack
	  could be NULL at the time of driver's module unloading.
 Select JD-source 
 Selecting GPIO01 as an interrupt 
 Set GPIO1 output 
 Enabling jd2 in general control 1 
 Enabling jd2 in general control 2 
	
	  All IRQs get or-ed together, so we need the jack IRQ to report 0
	  when a jack is inserted so that the OVCD IRQ then toggles the IRQ
	  pin 01 instead of it being stuck to 1. So we invert the JD polarity
	  on systems where the hardware does not already do this.
 Undo above settings 
 sync initial jack state 
 Check if MCLK provided 
	
	  Note on some platforms the platform code may need to add device-props
	  rather then relying only on properties set by the firmware.
	  Therefor the property parsing MUST be done here, rather then from
	  rt5640_i2c_probe(), so that the platform-code can attach extra
	  properties before calling snd_soc_register_card().
	
	  Testing on various boards has shown that good defaults for the OVCD
	  threshold and scale-factor are 2000µA and 0.75. For an effective
	  limit of 1500µA, this seems to be more reliable then 1500µA and 1.0.
	
	  LDO1_EN is optional (it may be statically tied on the board).
	  -ENOENT means that the property doesn't exist, i.e. there is no
	  GPIO, so is not an error. Any other error code means the property
	  exists, but could not be parsed.
 Make sure work is stopped on probe-error  remove 
 SPDX-License-Identifier: GPL-2.0-only
  NAU85L40 ALSA SoC audio driver
  Copyright 2016 Nuvoton Technology Corp.
  Author: John Hsu <KCHSU0@nuvoton.com>
 the maximum frequency of CLK_ADC 
 scaling for mclk from sysclk_src output 
 ratio for input clk freq 
 over sampling rate 
 OSR 32, SRC 18 
 OSR 64, SRC 14 
 OSR 128, SRC 12 
 OSR 256, SRC 1 
 DO12 and DO34 pad output enable 
	 CLK_ADC = OSR  FS
	  ADC clock frequency is defined as Over Sampling Rate (OSR)
	  multiplied by the audio sample rate (Fs). Note that the OSR and Fs
	  values must be selected such that the maximum frequency is less
	  than 6.144 MHz.
  nau8540_set_tdm_slot - configure DAI TX TDM.
  @dai: DAI
  @tx_mask: bitmask representing active TX slots. Ex.
                  0xf for normal 4 channel TDM.
                  0xf0 for shifted 4 channel TDM
  @rx_mask: no used.
  @slots: Number of slots in use.
  @slot_width: Width in bits for each slot.
  Configures a DAI for TDM operation. Only support 4 slots TDM.
  nau8540_calc_fll_param - Calculate FLL parameters.
  @fll_in: external clock provided to codec.
  @fs: sampling rate.
  @fll_param: Pointer to structure of FLL parameters.
  Calculate FLL parameters to configure codec.
  Returns 0 for success or negative error code.
	 Ensure the reference clock frequency (FREF) is <= 13.5MHz by dividing
	  freq_in by 1, 2, 4, or 8 using FLL pre-scalar.
	  FREF = freq_in  NAU8540_FLL_REF_DIV_MASK
 Choose the FLL ratio based on FREF 
	 Calculate the frequency of DCO (FDCO) given freq_out = 256  Fs.
	  FDCO must be within the 90MHz - 124MHz or the FFL cannot be
	  guaranteed across the full range of operation.
	  FDCO = freq_out  2  mclk_src_scaling
	 Calculate the FLL 10-bit integer input and the FLL 16-bit fractional
	  input based on FDCO, FREF and FLL ratio.
 FLL 16-bit fractional input 
 FLL 10-bit integer input 
 FLL pre-scaler 
 freq_out must be 256Fs in order to achieve the best performance 
 Enable BiasVMIDVMID Tieoff 
	 ADC OSR selection, CLK_ADC = Fs  OSR;
	  Channel time alignment enable.
 PGA input mode selection 
 DO12 and DO34 pad output disable 
 SPDX-License-Identifier: GPL-2.0-only
  Driver for ADAU1381ADAU1781 CODEC
  Copyright 2014 Analog Devices Inc.
   Author: Lars-Peter Clausen <lars@metafoo.de>
	
	  To get the device into SPI mode CLATCH has to be pulled low three
	  times.  Do this by issuing three dummy reads.
 SPDX-License-Identifier: GPL-2.0-only
  ALSA SoC driver for
     Asahi Kasei AK5386 Single-ended 24-Bit 192kHz delta-sigma ADC
  (c) 2013 Daniel Mack <zonque@gmail.com>
 CONFIG_PM 
	
	  From the datasheet:
	 
	  All external clocks (MCLK, SCLK and LRCK) must be present unless
	  PDN pin = “L”. If these clocks are not provided, the AK5386 may
	  draw excess current due to its use of internal dynamically
	  refreshed logic. If the external clocks are not present, place
	  the AK5386 in power-down mode (PDN pin = “L”).
 SPDX-License-Identifier: GPL-2.0-only
  rt5514-spi.c  --  RT5514 SPI driver
  Copyright 2015 Realtek Semiconductor Corp.
  Author: Oder Chiou <oder_chiou@realtek.com>
	
	  The address area x1800XXXX is the register address, and it cannot
	  support spi burst read perfectly. So we use the spi burst read
	  individually to make sure the data correctly.
 PCM for streaming audio from the DSP buffer 
 Read IRQ status and schedule copy accordingly. 
  rt5514_spi_burst_read - Read data from SPI by rt5514 address.
  @addr: Start address.
  @rxbuf: Data Buffer for reading.
  @len: Data length, it must be a multiple of 8.
  Returns true for success.
  rt5514_spi_burst_write - Write data to SPI by rt5514 address.
  @addr: Start address.
  @txbuf: Data Buffer for writng.
  @len: Data length, it must be a multiple of 8.
  Returns true for success.
 SPDX-License-Identifier: GPL-2.0-or-later
  max98390.c  --  MAX98390 ALSA Soc Audio driver
  Copyright (C) 2020 Maxim Integrated Products
 interface format 
 BCLKs per LRCLK 
 match BCLKs per LRCLK 
 codec MCLK rate in master mode 
 BCLKLRCLK ratio calculation 
 match rate to closest value 
 BCLK configuration 
 pcm mode configuration 
 sampling rate configuration 
 set DAI_SR to correct LRCLK frequency 
 BCLK configuration 
 Channel size configuration 
 Rx slot configuration 
 Tx slot Hi-Z configuration 
 Do nothing 
 Plabyack 
 voltage, current slot configuration 
 Sleep reset settle time 
 Amp init setting 
 Update dsm bin param 
 Dsm Setting 
 voltagecurrent slot configuration 
 regmap initialization 
 Check Revision ID 
 SPDX-License-Identifier: GPL-2.0-only
 Copyright (c) 2018-2020, The Linux Foundation. All rights reserved.
 Fractional Rates 
 HPH_L 
 HPH_R 
 Codec supports 2 IIR filters 
 Each IIR has 5 Filter Stages 
 Main path clock users count 
 RX Macro 
 Update volatile list for rxtx macros 
 8 but with 32 bit readwrite 
 Set Look Ahead Delay 
 Set DEM INP Select 
		
		  Loop through all interpolator MUX inputs and find out
		  to which interpolator input, the rx port
		  is connected
 sample_rate is in Hz 
		
		  CDC_DMA_RX_0 port drives RX0RX1 -- ch_mask 0x10x20x3
		  CDC_DMA_RX_1 port drives RX2RX3 -- ch_mask 0x10x20x3
		  CDC_DMA_RX_2 port drives RX4     -- ch_mask 0x1
		  CDC_DMA_RX_3 port drives RX5     -- ch_mask 0x1
		  AIFn can pair to any CDC_DMA_RX_n port.
		  In general, below convention is used::
		  CDC_DMA_RX_0(AIF1)CDC_DMA_RX_1(AIF2)
		  CDC_DMA_RX_2(AIF3)CDC_DMA_RX_3(AIF4)
 AUX does not have compander 
 Enable Compander Clock 
 compander coefficients are loaded only for hph path 
 Load Compander Coeff 
 Enable Softclip clock 
 Enable Softclip control 
 Update Aux HPF control 
 Reset to default (HPF=ON) 
		
		  These K1 values depend on the Headphone Impedance
		  For now it is assumed to be 16 ohm
 Main path PGA mute enable 
 Main path PGA mute enable 
 Clk Disable 
 Reset enable and disable 
 Reset rate to 48K
 Clk Disable 
 Reset enable and disable 
 fall through 
 Address does not automatically update if reading 
 Mask bits top 2 bits since they are reserved 
 Mask top 2 bits, 7-8 are reserved 
 Mask top bit it is reserved 
 Updates addr automatically for each B2 write 
 default set to 48k 
 Mixing path INT0 
 Mixing path INT1 
 Mixing path INT2 
 set MCLK and NPL rates 
 SPDX-License-Identifier: GPL-2.0-only
 Copyright (c) 2015-2021, The Linux Foundation. All rights reserved.
 Delayed work to report long button press 
 Work to correct accessory type 
 track headhpone status 
 impedance of hphl and hphr 
 Holds type of Headset - MonoStereo 
 Holds mbhc detection method - ADCLegacy 
	
	  Some codecs handle micbiaspullup enablement in codec
	  drivers itself and micbias is not needed for regular
	  plug type detection. So if micbias_control callback function
	  is defined, just return.
 Program Button threshold registers as per CS 
 Disable PULL_UP_EN & enable MICBIAS 
 Program Button threshold registers as per MICBIAS 
 Program Button threshold registers as per MICBIAS 
 MICBIAS usage change 
 Disable current source if micbias2 enabled 
		
		  Before MICBIAS_2 is turned off, if FSM is enabled,
		  make sure current source is enabled so as to detect
		  button pressrelease events
 && !mbhc->micbias_enable) {
 MICBIAS usage change 
 Enable PULL UP if PA's are enabled 
 enable pullup and cs, disable mb 
 enable current source and disable mb, pullup
 check if micbias is enabled 
 Disable cs, pullup & enable micbias 
 Disable micbias, pullup & enable cs 
 check if micbias is enabled 
 Disable cs, pullup & enable micbias 
 Disable micbias, pullup & enable cs 
 check if micbias is enabled 
 Disable cs, pullup & enable micbias 
 Disable micbias, enable pullup & cs 
 check if micbias is enabled 
 Disable cs, pullup & enable micbias 
 Disable micbias, enable pullup & cs 
	
	  cancel possibly scheduled btn work and
	  report release if we reported button press
 Set MUX_CTL to AUTO for Z-det 
	
	  Report removal of current jack type.
	  Headphone to headset shouldn't report headphone
	  removal.
 Report insertion 
	 Do not calculate impedance again for lineout
	  as during playback pa is on and impedance values
	  will not be correct resulting in lineout detected
	  as headphone.
 Report removal 
 cancel pending button press 
 cancel correct work function 
 Report extension cable 
	
	  Disable HPHL trigger and MIC Schmitt triggers.
	  Setup for insertion detection.
 Disable HW FSM 
 Set the detection type appropriately 
 Set the detection type appropriately 
 Enable micbias ramp 
 Make sure MASTER_BIAS_CTL is enabled 
 Disable HW FSM 
 Too short, ignore button press 
 If switch interrupt already kicked in, ignore button press 
 Plug isn't headset, ignore button press 
 fake btn press 
 Reporting long button release event 
 Reporting btn press n Release 
 TODO Find a better way to report this to Userspace 
 enable HS detection 
 Insertion debounce set to 96ms 
 Button Debounce set to 16ms 
 enable bias 
 enable MBHC clock 
 program HS_VREF value 
 Read MBHC Micbias (Mic Bias2) voltage 
		 Formula for getting micbias from vout
		  micbias = 1.0V + VOUT_CTL  50mV
	 Formula for calculating voltage from ADC
	  Voltage = ADC_RESULT12.5mVV_MICBIAS1.8
 Pre-requisites for ADC continuous measurement 
 Read legacy electircal detection and disable 
 Set ADC to continuous measurement 
 Read ADC Enable bit to restore after adc measurement 
 Disable ADC_ENABLE bit 
 Disable MBHC FSM 
 Set the MUX selection to IN2P 
 Enable MBHC FSM 
 Enable ADC_ENABLE bit 
 wait for 3 msec before reading ADC result 
 Restore ADC Enable 
 Get voltage from ADC result 
 Read ADC Enable bit to restore after adc measurement 
 Trigger ADC one time measurement 
 Set the appropriate MUX selection 
 wait for 600usec to get adc results 
 check for ADC Timeout 
 Read ADC complete bit 
 Read ADC result 
 Get voltage from ADC result 
 Restore ADC Enable 
 To determine if cross connection occurred 
 If PA is enabled, dont check for cross-connection 
 Read legacy electircal detection and disable 
 Read and set ADC to single measurement 
 Read ADC Enable bit to restore after adc measurement 
 Read FSM status 
 Get adc result for HPH L 
 Get adc result for HPH R in mV 
 Set the MUX selection to Auto 
 Restore ADC Enable 
 Restore ADC mode 
 Restore FSM state 
 Restore electrical detection 
 Mask ADC COMPLETE interrupt 
 Check for cross connection 
 Find plug type 
	
	  Report plug type if it is either headset or headphone
	  else start the 3 sec loop
 Disable BCS slow insertion detection 
		
		  Use ADC single mode to minimize the chance of missing out
		  btn pressrelease for HEADSET type during correct work.
 Check for cross connection
 cross-connection 
 no cross connection 
 Error 
 US_EU gpio present, flip switch 
 cable is extension cable 
	
	  Set DETECTION_DONE bit for HEADSET
	  so that btn pressrelease interrupt can be generated.
	  For other plug type, clear the bit.
 &&  !mbhc->micbias_enable)
	
	  If plug type is corrected from special headset to headphone,
	  clear the micbias enable flag, set micbias back to 1.8V and
	  disable micbias.
		
		  Enable ADC COMPLETE interrupt for HEADPHONE.
		  Btn release may happen after the correct work, ADC COMPLETE
		  interrupt needs to be captured to correct plug type.
		
		  read output_mv every 10ms to look for
		  any change in IN2_P
 Check for fake removal 
	
	  ADC COMPLETE and ELEC_REM interrupts are both enabled for
	  HEADPHONE, need to reject the ADC COMPLETE interrupt which
	  follows ELEC_REM one when HEADPHONE is removed.
	
	  ADC COMPLETE and ELEC_REM interrupts are both enabled for HEADPHONE,
	  need to reject the ADC COMPLETE interrupt which follows ELEC_REM one
	  when HEADPHONE is removed.
		
		  check clamp for 120ms but at 30ms chunks to leave
		  room for other interrupts to be processed
	
	  If current plug is headphone then there is no chance to
	  get ADC complete interrupt, so connected cable should be
	  headset not headphone.
 default voltage 
 Micro to Milli Volts 
 SPDX-License-Identifier: GPL-2.0-only
  wm8737.c  --  WM8737 ALSA SoC Audio driver
  Copyright 2010 Wolfson Microelectronics plc
  Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
 codec private data 
 R0  - Left PGA volume 
 R1  - Right PGA volume 
 R2  - AUDIO path L 
 R3  - AUDIO path R 
 R4  - 3D Enhance 
 R5  - ADC Control 
 R6  - Power Management 
 R7  - Audio Format 
 R8  - Clocking 
 R9  - MIC Preamp Control 
 R10 - Misc Bias Control 
 R11 - Noise Gate 
 R12 - ALC1 
 R13 - ALC2 
 R14 - ALC3 
 codec mclk clock divider coefficients 
 VMID at 275k 
 Fast VMID ramp at 22.5k 
 Bring VMID up 
 VMID at 2300k 
 Mono modes not yet supported 
 Bias level configuration will have done an extra enable 
 CONFIG_SPI_MASTER 
 SPDX-License-Identifier: GPL-2.0-only
  AD1938AD1939 audio driver
  Copyright 2014 Analog Devices Inc.
 SPDX-License-Identifier: GPL-2.0-only
  PCM3168A codec spi driver
  Copyright (C) 2015 Imagination Technologies Ltd.
  Author: Damien Horsley <Damien.Horsley@imgtec.com>
 SPDX-License-Identifier: GPL-2.0-or-later
  wm8996.c - WM8996 audio codec interface
  Copyright 2011-2 Wolfson Microelectronics PLC.
  Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
 Platform dependant ReTune mobile configuration 
 We can't use the same notifier block for more than one supply and
  there's no way I can see to get from a callback to the caller
  except container_of().
	 Find the version of the currently selected configuration
	 The EQ will be disabled while reconfiguring it, remember the
	  current configuration. 
 Icky as hell but saves code duplication 
 Record which outputs we enabled 
 Use the interrupt if possible 
 Complete any pending DC servo starts 
 Trigger a startup sequence 
 We route as stereo pairs so define some dummy widgets to squash
	 Due to the sparseness of the register map the compiler
	  output from an explicit switch statement ends up being much
	  more efficient than a table.
	 Don't bother if we're in a low frequency idle mode that
	  can't support audio.
 Pick a divisor for BCLK as close as we can get to ideal 
 BCLK table is sorted 
 Put the MICBIASes into regulating mode 
 Bypass the MICBIASes for lowest power 
 Needs looking at for TDM 
 Disable SYSCLK while we reconfigure 
 Fref must be <=13.5MHz 
 Apply the division for our remaining calculations 
 Fvco should be 90-100MHz; don't check the upper bound 
 Find an appropraite FLL_FRATIO and factor it out of the target 
 Any change? 
 Enable the bandgap if it's not already enabled 
 Clear any pending completions (eg, from failed startups) 
	 The FLL supports live reconfiguration - kick that in case we were
	  already enabled.
 Wait for the FLL to lock, using the interrupt if possible 
	 Allow substantially longer if we've actually got the IRQ, poll
	  at a slightly higher rate if we don't.
 ensure timeout of atleast 1 jiffies 
  wm8996_detect - Enable default WM8996 jack detection
  @component: ASoC component
  @jack: jack pointer
  @polarity_cb: polarity callback
  The WM8996 has advanced accessory detection support for headsets.
  This function provides a default implementation which integrates
  the majority of this functionality with minimal user configuration.
  This will detect headset, headphone and short circuit button and
  will also detect inverted microphone ground connections and update
  the polarity of the connections.
 Clear discarge to avoid noise during detection 
 LDO2 powers the microphones, SYSCLK clocks detection 
	 We start off just enabling microphone detection - even a
	  plain headphone will trigger detection.
 Slowest detection rate, gives debounce for initial detection 
 Enable interrupts and we're off 
	 Assume headphone in error conditions; we need to report
	  something or we stall our state machine.
	 If we've got high enough impedence then report as line,
	  otherwise assume headphone.
 If the output isn't running re-clamp it 
 Go back to looking at the microphone 
 Unclamp the output, we can't measure while we're shorting it 
 We need bandgap for HPDET 
 Go into headphone detect left mode 
 Trigger a measurement 
 Increase the detection rate a bit for responsiveness. 
 No accessory, reset everything and report removal 
	 If the measurement is very high we've got a microphone,
	  either we just detected one or if we already reported then
	  we've got a button release event.
			 Increase poll rate to give better responsiveness
	 If we detected a lower impedence during initial startup
	  then we probably have the wrong polarity, flip it.  Don't
	  do this for the lowest impedences to speed up detection of
	  plain headphones.  If both polarities report a low
	  impedence then give up and report headphones.
	 Don't distinguish between buttons, just report any low
	  impedence as BTN_0.
	 We need an array of texts for the enum API but the number
	  of texts is likely to be less than the number of
	  configurations due to the sample rate dependency of the
 Expand the array... 
 ...store the new entry... 
 ...and remember the new version. 
 Unmask the interrupt 
 Enable error reporting and DC servo status 
 This should really be moved into the regulator core 
 Apply platform data settings 
 Latch volume update bits 
	 No support currently for the underclocked TDM modes and
	  pick a default TDM layout with each channel pair working with
	 If the TX LRCLK pins are not in LRCLK mode configure the
	  AIFs to source their clocks from the RX LRCLKs.
 SPDX-License-Identifier: GPL-2.0-only
  wm8960.c  --  WM8960 ALSA SoC Audio driver
  Copyright 2007-11 Wolfson Microelectronics, plc
  Author: Liam Girdwood
 R25 - Power 1 
 R26 - Power 2 
 R28 - Anti-pop 1 
 R29 - Anti-pop 2 
  wm8960 register cache
  We can't read the WM8960 register space when we are
  using 2 wire for device control, so we cache them instead.
 enumerated controls 
	 If we're using deemphasis select the nearest available sample
	  rate.
 Represent OUT3 as a PGA so that it gets turned on with LOUT1ROUT1 
 Really Boost Switch 
 Really Boost Switch 
	 In capless mode OUT3 is used to provide VMID for the
	  headphone outputs, otherwise it is used as a mono mixer.
	 We need to power up the headphone output stage out of
	  sequence for capless mode.  To save scanning the widget
	  list each time to find the desired power state do so now
	  and save the result.
 set masterslave audio interface 
 interface format 
 clock inversion 
 set iface 
 -1 for reserved value 
 Multiply 256 for internal 256 div 
 Multiply 10 to eliminate decimials 
  wm8960_configure_sysclk - checks if there is a sysclk frequency available
 	The sysclk must be chosen such that:
 		- sysclk     = MCLK  sysclk_divs
 		- lrclk      = sysclk  dac_divs
 		- 10  bclk  = sysclk  bclk_divs
  @wm8960: codec private data
  @mclk: MCLK used to derive sysclk
  @sysclk_idx: sysclk_divs index for found sysclk
  @dac_idx: dac_divs index for found lrclk
  @bclk_idx: bclk_divs index for found bclk
  Returns:
   -1, in case no sysclk frequency available found
  >=0, in case we could derive bclk and lrclk from sysclk using
       (@sysclk_idx, @dac_idx, @bclk_idx) dividers
 marker for no match 
 check if the sysclk frequency is available. 
  wm8960_configure_pll - checks if there is a PLL out frequency available
 	The PLL out frequency must be chosen such that:
 		- sysclk      = lrclk  dac_divs
 		- freq_out    = sysclk  sysclk_divs
 		- 10  sysclk = bclk  bclk_divs
  	If we cannot find an exact match for (sysclk, lrclk, bclk)
  	triplet, we relax the bclk such that bclk is chosen as the
  	closest available frequency greater than expected bclk.
  @component: component structure
  @freq_in: input frequency used to derive freq out via PLL
  @sysclk_idx: sysclk_divs index for found sysclk
  @dac_idx: dac_divs index for found lrclk
  @bclk_idx: bclk_divs index for found bclk
  Returns:
  < 0, in case no PLL frequency out available was found
  >=0, in case we could derive bclk, lrclk, sysclk from PLL out using
       (@sysclk_idx, @dac_idx, @bclk_idx) dividers
	
	  From Datasheet, the PLL performs best when f2 is between
	  90MHz and 100MHz, the desired sysclk output is 11.2896MHz
	  or 12.288MHz, then sysclkdiv = 2 is the best choice.
	  So search sysclk_divs from 2 to 1 other than from 1 to 2.
	
	  For Slave mode clocking should still be configured,
	  so this if statement should be removed, but some platform
	  may not work if the sysclk is not configured, to avoid such
	  compatible issue, just add '!wm8960->sysclk' condition in
	  this if statement.
	
	  If it's sysclk auto mode, check if the MCLK can provide sysclk or
	  not. If MCLK can provide sysclk, using MCLK to provide sysclk
	  directly. Otherwise, auto select a available pll out frequency
	  and set PLL.
 disable the PLL and using MCLK to provide sysclk 
 configure sysclk clock 
 configure frame clock 
 configure bit clock 
 bit size 
 right justify mode does not support 32 word length 
 Update filters for the new rate 
 set iface 
 Set VMID to 2x50k 
			
			  If it's sysclk auto mode, and the pll is enabled,
			  disable the pll
 Enable anti-pop features 
 Enable & ramp VMID at 2x50k 
 Enable VREF 
 Disable anti-pop features 
 Set VMID to 2x250k 
 Enable anti-pop features 
 Disable VMID and VREF, let them discharge 
 Enable anti pop mode 
 Enable LOUT1, ROUT1 and OUT3 if they're enabled 
 Enable VMID at 250k 
 Ramp 
 Enable VREF 
			
			  If it's sysclk auto mode, and the pll is enabled,
			  disable the pll
 Enable anti-pop mode 
 Disable VMID and VREF 
 Disable HP discharge 
 Disable anti-pop features 
 PLL divisors 
 Scale up target to PLL operating frequency 
 The size in bits of the pll divide multiplied by 10
 Scale up target to PLL operating frequency 
 Check if we need to round 
 Move down to proper range now rounding is done 
	 Disable the PLL: even if we are changing the frequency the
 Turn it on 
 Latch the update bits 
 ADCLRC pin configured as GPIO. 
 Enable headphone jack detect 
 SPDX-License-Identifier: GPL-2.0-only
  wm8731.c  --  WM8731 ALSA SoC Audio driver
  Copyright 2005 Openedhand Ltd.
  Copyright 2006-12 Wolfson Microelectronics, plc
  Author: Richard Purdie <richard@openedhand.com>
  Based on wm8753.c by Liam Girdwood
 codec private data 
  wm8731 register cache
	 If we're using deemphasis select the nearest available sample
	  rate.
 Output Mixer 
 Input mux 
 output mixer 
 outputs 
 input mux 
 inputs 
 codec mclk clock divider coefficients 
 48k 
 32k 
 8k 
 96k 
 44.1k 
 88.2k 
 rates constraints 
 bit size 
 set masterslave audio interface 
 interface format 
 clock inversion 
 set iface 
 Clear PWROFF, gate CLKOUT, everything else as-is 
 Clear POWEROFF, keep everything else disabled 
 Latch the update bits 
 Disable bypass path by default 
 Regulators will be enabled by bias management 
 CONFIG_SPI_MASTER 
 SPDX-License-Identifier: GPL-2.0-only
  Driver of Inno codec for rk3036 by Rockchip Inc.
  Author: Rockchip Inc.
  Author: Zheng ShunQian<zhengsq@rock-chips.com>
 set a big current for capacitor charging. 
 start precharge 
 set a big current for capacitor discharging. 
 start discharge. 
 SPDX-License-Identifier: GPL-2.0
 Copyright(c) 2015-18 Intel Corporation.
  hdac_hda.c - ASoC extensions to reuse the legacy HDA codec drivers
  with ASoC platform drivers. These APIs are called by the legacy HDA
  codec drivers using hdac_ext_bus_ops ops.
	
	  map DAI ID to the closest matching PCM name, using the naming
	  scheme used by hda-codec snd_hda_gen_build_pcms() and for
	  HDMI in hda_codec patch_hdmi.c)
	
	  Ensure any HDA display is powered at codec probe.
	  After snd_hda_codec_device_new(), display power is
	  managed by runtime PM.
	
	  Overwrite type to HDA_DEV_ASOC since it is a ASoC driver
	  hda_codec.c will check this flag to determine if unregister
	  device is needed.
	
	  snd_hda_codec_device_new decrements the usage count so call get pm
	  else the device will be powered off
 configure codec for 1:1 PCM:DAI mapping 
 HDMI controls need to be created in machine drivers 
 match for forbid call in snd_hda_codec_device_new() 
	
	  hdac_device core already sets the state to active and calls
	  get_noresume. So enable runtime and set the device to suspend.
	  pm_runtime_enable is also called during codec registeration
 Audio Interface 
 Input Pins 
 Output Pins 
 hold the ref while we probe 
 ASoC specific initialization 
	
	  Resources are freed in hdac_hda_codec_remove(). This
	  function is kept to keep hda_codec_driver_remove() happy.
 SPDX-License-Identifier: GPL-2.0-only
  Driver for the PCM512x CODECs
  Author:	Mark Brown <broonie@kernel.org>
 		Copyright 2014 Linaro Ltd
 msb needs to be set to enable auto-increment of addresses 
 SPDX-License-Identifier: GPL-2.0-only
  rt5631.c  --  RT5631 ALSA Soc Audio driver
  Copyright 2011 Realtek Microelectronics
  Author: flove <flove@realtek.com>
  Based on WM8753.c
  rt5631_write_index - write index register of 2nd layer
  rt5631_read_index - read index register of 2nd layer
 {0, +20, +24, +30, +35, +40, +44, +50, +52}dB 
 MIC Input Type 
 MONO Input Type 
 SPK Ratio Gain Control 
 MIC 
 MONO IN 
 AXI 
 DAC 
 AXO 
 OUTVOL 
 SPK 
 MONO OUT 
 HP 
 DMIC 
 SPK Ratio Gain Control 
  onebit_depop_power_stage - auto depop in power stage.
  @component: ASoC component
  @enable: power onoff
  When power onoff headphone, the depop sequence is done by hardware.
 enable one-bit depop function 
 keep soft volume and zero crossing setting 
 config one-bit depop parameter 
 power on capless block 
 power off capless block 
 recover soft volume and zero crossing setting 
  onebit_depop_mute_stage - auto depop in mute stage.
  @component: ASoC component
  @enable: muteunmute
  When muteunmute headphone, the depop sequence is done by hardware.
 enable one-bit depop function 
 keep soft volume and zero crossing setting 
 config one-bit depop parameter 
 recover soft volume and zero crossing setting 
  depop_seq_power_stage - step by step depop sequence in power stage.
  @component: ASoC component
  @enable: power onoff
  When power onoff headphone, the depop sequence is done in step by step.
 depop control by register 
 keep soft volume and zero crossing setting 
 config depop sequence parameter 
 power on headphone and charge pump 
 power on soft generator and depop mode2 
 stop depop mode 
 config depop sequence parameter 
 start depop mode 
 config depop sequence parameter 
 power down headphone and charge pump 
 recover soft volume and zero crossing setting 
  depop_seq_mute_stage - step by step depop sequence in mute stage.
  @component: ASoC component
  @enable: muteunmute
  When muteunmute headphone, the depop sequence is done in step by step.
 depop control by register 
 keep soft volume and zero crossing setting 
 config depop sequence parameter 
 config depop sequence parameter 
 recover soft volume and zero crossing setting 
 Left SPK Volume Input 
 Left HP Volume Input 
 Left Out Volume Input 
 Right Out Volume Input 
 Right HP Volume Input 
 Right SPK Volume Input 
 SPO Left Channel Input 
 SPO Right Channel Input 
 MONO Input 
 Left HPO Input 
 Right HPO Input 
 Vmid 
 PLL1 
 Input Side 
 Input Lines 
 MICBIAS 
 Boost 
 MONO In 
 REC Mixer 
	 Because of record duplication for LR channel,
 DMIC 
 ADC Data Srouce 
 ADCs 
 DAC and ADC supply power 
 Output Side 
 DACs 
 DAC supply power 
 Left SPK Mixer 
 Left Out Mixer 
 Right Out Mixer 
 Right SPK Mixer 
 Volume Mux 
 DAC To HP 
 HP Depop 
 AXO1 Mixer 
 SPOL Mixer 
 MONO Mixer 
 SPOR Mixer 
 AXO2 Mixer 
 Mux 
 AMP supply 
 Output Lines 
 PLL divisors 
 sysclk is 256fs 
 sysclk is 512fs 
 sysclk is 24.576Mhz or 22.5792Mhz 
 enable HP zero cross 
 power off ClassD auto Recovery 
 DMIC 
 SPDX-License-Identifier: GPL-2.0-only
  SSM2518 amplifier audio driver
  Copyright 2013 Analog Devices Inc.
   Author: Lars-Peter Clausen <lars@metafoo.de>
 Disable auto samplerate detection 
 We assume the left channel < right channel 
		 In this case the bitclock is used as the system clock, and
		  the bitclock signal needs to be connected to the MCLK pin and
	
	  The reset bit is obviously volatile, but we need to be able to cache
	  the other bits in the register, so we can't just mark the whole
	  register as volatile. Since this is the only place where we'll ever
	  touch the reset bit just bypass the cache for this operation.
 SPDX-License-Identifier: GPL-2.0-or-later
  wm8971.c  --  WM8971 ALSA SoC Audio driver
  Copyright 2005 Lab126, Inc.
  Author: Kenneth Kiraly <kiraly@lab126.com>
  Based on wm8753.c by Liam Girdwood
 codec private data 
  wm8971 register cache
  We can't read the WM8971 register space when we
  are using 2 wire for device control, so we cache them instead.
 WM8971 Controls 
 0 
 4 
 8 
 12 
  DAPM Controls
 Left Mixer 
 Right Mixer 
 Mono Mixer 
 Left Line Mux 
 Right Line Mux 
 Left PGA Mux 
 Right PGA Mux 
 Mono ADC Mux 
 left mixer 
 right mixer 
 left out 1 
 left out 2 
 right out 1 
 right out 2 
 mono mixer 
 mono out 
 Left Line Mux 
 Right Line Mux 
 Left PGA Mux 
 Right PGA Mux 
 Differential Mux 
 Left ADC Mux 
 Right ADC Mux 
 ADC 
 codec hifi mclk clock divider coefficients 
 8k 
 11.025k 
 16k 
 22.05k 
 32k 
 44.1k 
 48k 
 88.2k 
 96k 
 set masterslave audio interface 
 interface format 
 clock inversion 
 bit size 
 set iface & srate 
 Set to 500k 
 set vmid to 50k and unmute dac 
 Wait until fully charged 
 charge output caps - set vmid to 5k for quick power up 
 mute dac and set vmid to 500k, enable VREF 
 set the update bits 
 SPDX-License-Identifier: GPL-2.0-only
  wm8958-dsp2.c  --  WM8958 DSP2 support
  Copyright 2011 Wolfson Microelectronics plc
  Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
 Suppress unneeded downloads 
 Informational text 
 Round up to the next 32 bit word 
 If the DSP is already running then noop 
 If we have MBC firmware download it 
 If we've got user supplied MBC settings use them 
 Run the DSP 
 And we're off! 
 If we've got user supplied settings use them 
 Run the DSP 
 Enable the algorithms we've selected 
 Switch the DSP into the data path 
 If we've got user supplied settings use them 
 Run the DSP 
 Switch the DSP into the data path 
 Do we have both an active AIF and an active algorithm? 
 If the DSP is already running then noop 
 If either AIFnCLK is not yet enabled postpone 
 Switch the clock over to the appropriate AIF 
 If the DSP is already stopped then noop 
 Check if DSP2 is in use on another AIF 
 Don't allow on the fly reconfiguration 
 Don't allow on the fly reconfiguration 
 Don't allow on the fly reconfiguration 
 Don't allow on the fly reconfiguration 
 We don't require firmware and don't want to delay boot 
 We need an array of texts for the enum API 
 We need an array of texts for the enum API 
 We need an array of texts for the enum API 
 We need an array of texts for the enum API 
 SPDX-License-Identifier: GPL-2.0-only
 sdw-mockup.c -- a mockup SoundWire codec for tests where only the host
 drives the bus.
 Copyright(c) 2021 Intel Corporation
 Use tx_mask or rx_mask to configure stream tag and set dma_data 
 SoundWire specific configuration 
	
	  first we need to allocate memory for set bits in port lists
	  the port allocation is completely arbitrary:
	  DP0 is not supported
	  DP1 is sink
	  DP8 is source
 do this again for sink now 
 wake-up event 
  Intel reserved parts ID with the following mapping expected:
  0xAAAA: generic full-duplex codec
  0xAA55: headset codec (mock-up of RT711RT5682) - full-duplex
  0x55AA: amplifier (mock-up of RT1308Maxim 98373) - playback only with
  IV feedback
  0x5555: mic codec (mock-up of RT715) - capture-only
 SPDX-License-Identifier: GPL-2.0-only
  wm8904.c  --  WM8904 ALSA SoC Audio driver
  Copyright 2009-12 Wolfson Microelectronics plc
  Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
 codec private data 
 Platform provided DRC configuration 
 Platform provided ReTune mobile configuration 
 FLL setup 
 Clocking configuration 
 DC servo configuration - cached offset values 
 R4   - Bias Control 0 
 R5   - VMID Control 0 
 R6   - Mic Bias Control 0 
 R7   - Mic Bias Control 1 
 R8   - Analogue DAC 0 
 R9   - mic Filter Control 
 R10  - Analogue ADC 0 
 R12  - Power Management 0 
 R14  - Power Management 2 
 R15  - Power Management 3 
 R18  - Power Management 6 
 R20  - Clock Rates 0 
 R21  - Clock Rates 1 
 R22  - Clock Rates 2 
 R24  - Audio Interface 0 
 R25  - Audio Interface 1 
 R26  - Audio Interface 2 
 R27  - Audio Interface 3 
 R30  - DAC Digital Volume Left 
 R31  - DAC Digital Volume Right 
 R32  - DAC Digital 0 
 R33  - DAC Digital 1 
 R36  - ADC Digital Volume Left 
 R37  - ADC Digital Volume Right 
 R38  - ADC Digital 0 
 R39  - Digital Microphone 0 
 R40  - DRC 0 
 R41  - DRC 1 
 R42  - DRC 2 
 R43  - DRC 3 
 R44  - Analogue Left Input 0 
 R45  - Analogue Right Input 0 
 R46  - Analogue Left Input 1 
 R47  - Analogue Right Input 1 
 R57  - Analogue OUT1 Left 
 R58  - Analogue OUT1 Right 
 R59  - Analogue OUT2 Left 
 R60  - Analogue OUT2 Right 
 R61  - Analogue OUT12 ZC 
 R67  - DC Servo 0 
 R69  - DC Servo 2 
 R71  - DC Servo 4 
 R72  - DC Servo 5 
 R90  - Analogue HP 0 
 R94  - Analogue Lineout 0 
 R98  - Charge Pump 0 
 R104 - Class W 0 
 R108 - Write Sequencer 0 
 R109 - Write Sequencer 1 
 R110 - Write Sequencer 2 
 R111 - Write Sequencer 3 
 R112 - Write Sequencer 4 
 R116 - FLL Control 1 
 R117 - FLL Control 2 
 R118 - FLL Control 3 
 R119 - FLL Control 4 
 R120 - FLL Control 5 
 R121 - GPIO Control 1 
 R122 - GPIO Control 2 
 R123 - GPIO Control 3 
 R124 - GPIO Control 4 
 R126 - Digital Pulls 
 R128 - Interrupt Status Mask 
 R129 - Interrupt Polarity 
 R130 - Interrupt Debounce 
 R134 - EQ1 
 R135 - EQ2 
 R136 - EQ3 
 R137 - EQ4 
 R138 - EQ5 
 R139 - EQ6 
 R140 - EQ7 
 R141 - EQ8 
 R142 - EQ9 
 R143 - EQ10 
 R144 - EQ11 
 R145 - EQ12 
 R146 - EQ13 
 R147 - EQ14 
 R148 - EQ15 
 R149 - EQ16 
 R150 - EQ17 
 R151 - EQ18 
 R152 - EQ19 
 R153 - EQ20 
 R154 - EQ21 
 R155 - EQ22 
 R156 - EQ23 
 R157 - EQ24 
 R161 - Control Interface Test 1 
 R204 - Analogue Output Bias 0 
 R247 - FLL NCO Test 0 
 R248 - FLL NCO Test 1 
 Gate the clock while we're updating to avoid misclocking 
 This should be done on init() for bypass paths 
 Ensure the FLL is stopped 
 SYSCLK shouldn't be over 13.5MHz 
 Save any enables; the configuration should clear them. 
 Reenable the DRC 
	 Find the version of the currently selected configuration
	 The EQ will be disabled while reconfiguring it, remember the
	  current configuration. 
	 If we're using deemphasis select the nearest available sample 
	  rate.
 No TLV since it depends on mode 
 Maximum startup time 
		 If we're using the FLL then we only start it when
		  required; we assume that the configuration has been
		  done previously and all we need to do is kick it
		  off.
	 This code is shared between HP and LINEOUT; we do all our
	  power management in stereo pairs to avoid latency issues so
	  we reuse shift to identify which rather than strcmp() the
 Power on the PGAs 
 Power on the amplifier 
 Enable the first stage 
 Power up the DC servo 
		 Either calibrate the DC servo or restore cached state
		  if we have that.
 Wait for DC servo to complete 
 Enable the output stage 
 Unshort the output itself 
 Short the output 
		 Cache the DC servo configuration; this will be
 Disable the amplifier input and output stages 
 PGAs too 
 10 due to .5s 
 What BCLK do we need? 
 Select nearest CLK_SYS_RATE 
 SAMPLE_RATE 
 Closest match 
 Enable sloping stopband filter for low sample rates 
 BCLK_DIV 
 Table is sorted 
 LRCLK is a simple fraction of BCLK 
 Apply the settings 
 Update filters for the new settings 
 frame inversion not valid for DSP modes 
 Don't need to validate anything if we're turning off TDM 
	 Note that we allow configurations we can't handle ourselves - 
	  for example, we can generate clocks for slots 2 and up even if
	  we can't use those slots ourselves.
 The size in bits of the FLL divide multiplied by 10
 Fref must be <=13.5MHz 
 Apply the division for our remaining calculations 
 Fvco should be 90-100MHz; don't check the upper bound 
 Find an appropriate FLL_FRATIO and factor it out of the target 
 Now, calculate N.K 
 Calculate fractional part - scale up so we can round. 
 Move down to proper range now rounding is done 
 Any change? 
 Gate SYSCLK to avoid glitches 
 Validate the FLL ID 
 Force 12MHz and output4 for now 
	 Save current state then disable the FLL and SYSCLK to avoid
 Unlock forced oscilator control to switch it onoff 
 Enable the FLL if it was previously active 
 Reenable SYSCLK if it was previously active 
		 We don't have any rate constraints, so just ignore the
		  request to disable constraining.
 enable FLL if a different sysclk is desired 
 VMID resistance 250k 
 Normal bias current 
 Enable bias 
 Enable VMID, VMID buffering, 25k resistance 
 Let VMID ramp 
 Maintain VMID with 2250k 
 Bias current 0.5 
 Turn off VMID 
 Stop bias generation 
	 We need an array of texts for the enum API but the number
	  of texts is likely to be less than the number of
	  configurations due to the sample rate dependency of the
 Expand the array... 
 ...store the new entry... 
 ...and remember the new version. 
 We need an array of texts for the enum API 
 sentinel 
 Change some default settings - latch VU and enable ZC 
 Apply configuration from the platform data. 
 Zero is the default value for these anyway 
	 Set Class W by default - this will be managed by the Class
	  G widget at runtime where bypass paths are available.
 Use normal bias source 
 Can leave the device powered off until we need it 
 Actually a subset, updates to follow 
 SPDX-License-Identifier: GPL-2.0
 cs35l41.c -- CS35l41 ALSA SoC audio driver
 Copyright 2017-2021 Cirrus Logic, Inc.
 Author: David Rhodes <david.rhodes@cirrus.com>
 Check to see if unmasked bits are active 
	
	  The following interrupts require a
	  protection release cycle to get the
	  speaker out of Safe-Mode.
 Use the lookup table 
 Use hard-coded values 
 1.0 uH 
 1.2 uH 
 1.5 uH 
 2.2 uH 
 201 uF and greater 
 Set Platform Data 
 Required 
 Optional 
 GPIO1 Pin Config 
 GPIO2 Pin Config 
 returning NULL can be an option if in stereo mode 
 satisfy minimum reset pulse width spec 
	 CS35L41 will have even MTLREVID
	  CS35L41R will have odd MTLREVID
 Set interrupt masks for critical errors 
 CS35L41 needs INT for PDN_DONE 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2017 BayLibre, SAS.
  Author: Jerome Brunet <jbrunet@baylibre.com>
 SPDX-License-Identifier: GPL-2.0
 Copyright (c) 2017, Maxim Integrated
		
		  Register values will be cached before suspend. The cached value
		  will be a valid value and userspace will happy with that.
 Speaker Amplifier Overcurrent Automatic Restart Enable 
 Thermal Shutdown Automatic Restart Enable 
 Clock Monitor Automatic Restart Enable 
 Dynamic Headroom Tracking 
 ADC configuration 
 Brownout Detection Engine 
 Limiter 
 Plabyack 
 Capture 
 Software Reset 
 Software Reset Verification 
 Software Reset 
 IV default slot configuration 
 LR mix configuration 
 Enable DC blocker 
 Enable IMON VMON DC blocker 
 voltage, current slot configuration 
 enable auto restart function by default 
 speaker feedback slot configuration 
 Set interleave mode 
 Speaker enable 
 this makes reset_gpio as invalid 
 SPDX-License-Identifier: GPL-2.0
 PCM3060 codec driver
 Copyright (C) 2018 Kirill Marinushkin <kmarinushkin@birdec.com>
 dai 
 dapm 
 soc component 
 regmap 
 PCM3060_REG64 is volatile 
 device 
 soft reset 
 SPDX-License-Identifier: GPL-2.0
 MAX9867 ALSA SoC codec driver
 Copyright 2013-2015 Maxim Integrated Products
 Copyright 2018 Ladislav Michl <ladis@linux-mips.org>
 don't allow change if ADCDAC active 
 read current filter mode 
 check if change is needed 
 shutdown codec before switching filter mode 
 switch filter mode 
 out of shutdown now 
 Input mixer 
 Output mixer 
 Sidetone mixer 
 Line out switch 
 DMIC mux 
 set up the ni value 
		
		  digital pll locks on to any externally supplied LRCLK signal
		  and also enable rapid lock mode.
 Set the prescaler based on the master clock frequency
 exact integer mode is not supported 
 Clock inversion bits, BCI and WCI 
 SPDX-License-Identifier: GPL-2.0-only
  rt1305.c  --  RT1305 ALSA SoC amplifier component driver
  Copyright 2018 Realtek Semiconductor Corp.
  Author: Shuming Fan <shumingf@realtek.com>
 4 ohm 2W  
 0.2 ohm RSense
 I2S Data Channel Selection 
 Audio Interface 
 Digital Interface 
 Output Lines 
 initial settings 
 Sin Gen 
 EFUSE read 
 R0 calibration 
 restore some registers 
 SPDX-License-Identifier: GPL-2.0-only
 Cirrus Logic Madera class codecs common support
 Copyright (C) 2015-2019 Cirrus Logic, Inc. and
                         Cirrus Logic International Semiconductor Ltd.
 Skip this if the chip is down 
	
	  Just read a register a few times to ensure the internal
	  oscillator sends out a few clocks.
 for safety attempt to shutdown on error 
 missing, ignore 
 trap undersized array initializers 
	
	  We can't rely on the DAPM mutex for locking because we need a lock
	  that can safely be called in hw_params
 EP_SEL should not be modified while HP or EP driver is enabled 
 wait for wseq to complete 
 change demux setting 
 apply correct setting for mono mode 
 stereo HP 
 EP or mono HP 
	
	  if HPDET has disabled the clamp while switching to HPOUT
	  OUT1 should remain disabled
 wait for enable wseq 
 wait for disable wseq 
	
	  We don't directly write the rate register here but we want to
	  maintain consistent behaviour that rate domains cannot be changed
	  while in use since this is a hardware requirement
 Volatile register so defer until the codec is powered up 
 use legacy frequency registers 
 Configure exact dsp frequency 
	
	  This is called at a higher DAPM priority than the mux widgets so
	  the muxes are still off at this point and it's safe to change
	  the rate domain control.
	  Also called at a lower DAPM priority than the domain group widgets
	  so locking the reads of adsp_rate_cache is not necessary as we know
	  changes are locked out by the domain_group_ref reference count.
 The write must be guarded by a number of SYSCLK cycles 
	
	  Prevent the domain powering up while we're checking whether it's
	  safe to change rate domain
 The write must be guarded by a number of SYSCLK cycles 
	
	  Initialize input modes from the A settings. For muxed inputs the
	  B settings will be applied if the mux is changed
 Default is 0 so noop with defaults 
 None 
 Tone Generator 1 
 Tone Generator 2 
 Haptics 
 AEC 
 AEC2 
 Noise mixer 
 Comfort noise 
 IN1L 
 AIF1RX1 
 AIF2RX1 
 AIF3RX1 
 AIF4RX1 
 SLIMRX1 
 EQ1 
 DRC1L 
 LHPF1 
 DSP1.1 
 DSP2.1 
 DSP3.1 
 DSP4.1 
 DSP5.1 
 DSP6.1 
 DSP7.1 
 ASRC1IN1L 
 ASRC2IN1L 
 ISRC1INT1 
 ISRC1DEC1 
 ISRC2DEC1 
 ISRC2INT1 
 ISRC3DEC1 
 ISRC3INT1 
 ISRC4INT1 
 ISRC4DEC1 
 DFC1 
 DFC8 
 Cannot change lp mode on an active input 
 Flip bottom bit for channel order 
 If this is the last input pending then allow VU 
 Disable volume updates if no inputs are enabled 
 Store the desired state for the HP outputs 
 if OUT1 is routed to EPOUT, ignore HP clamp and impedance 
 Force off if HPDET has disabled the clamp for this output 
 don't use MADERA_DSP_CLOCK_2 
 Use new exact frequency control 
 freq  (2^6)  (10^6) 
		
		  We're using the frequency setting in MADERA_DSP_CLOCK_2 so
		  don't change the frequency select bits in MADERA_DSP_CLOCK_1
 Guard the rate change with SYSCLK cycles 
 Force multiple of 2 channels for I2S mode 
 Save AIF TXRX state 
 Disable AIF TXRX before reconfiguring it 
 Restore AIF TXRX state 
	
	  A connection to SYSCLK is always required, we only add and remove
	  a connection to ASYNCCLK
 Only support TDM for the physical AIFs 
 main gain 
 alternate integer gain 
 rev A0 uses sync calculation for both loops 
 these use the same calculation for main and sync loops 
 fref must be <=13.5MHz, find initial refdiv 
 Find an appropriate FLL_FRATIO 
	
	  For CS47L35 rev A0, CS47L85 and WM1840 adjust FRATIOrefdiv to avoid
	  integer mode if possible
		
		  start from init_ratio because this may already give a
		  fractional N.K
 Find an appropriate FLL_FRATIO and refdiv 
 Apply the division for our remaining calculations 
	
	  Round down to 16bit range with cost of accuracy lost.
	  Denominator must be bigger than numerator so we only
	  take care of it.
 Rev A0 uses the sync gains for both loops 
 These use the sync gains for both loops 
 error getting current state 
 Facilitate smooth refclk across the transition 
 Apply SYNCCLK setting 
 Apply REFCLK setting 
 Ref path hardcodes lambda to 65536 when sync is on 
	
	  Increase the bandwidth if we're not using a low frequency
	  sync source.
 In case of error don't leave the FLL running with an old config 
	
	  fout is ignored, since the synchronizer is an optional extra
	  constraint on the Fout generated from REFCLK, so the Fout is
	  set when configuring REFCLK
	
	  Changes of fout on an enabled FLL aren't allowed except when
	  setting fout==0 to disable the FLL
 FLL_AO_HOLD must be set before configuring any registers 
 modify the patch to apply fll->ref_src as input clock 
 Release the hold so that fll_ao locks to external frequency 
	
	  ctrl_up gates the writes to all fll_ao register, setting it to 0
	  here ensures that after a runtime suspendresume cycle when one
	  enables the fllao then ctrl_up is the last bit that is configured
	  by the fllao enable code rather than the cache sync operation which
	  would have updated it much earlier before writing out all fllao
	  registers
	 Disable lockdet, but don't set ctrl_upd update but.  This allows the
	  lock status bit to clear as normal, but should the FLL be enabled
	  again due to a control clock being required, the lock won't re-assert
	  as the FLL config registers are automatically applied when the FLL
	  enables.
	 ctrl_up gates the writes to all the fll's registers, setting it to 0
	  here ensures that after a runtime suspendresume cycle when one
	  enables the fll then ctrl_up is the last bit that is configured
	  by the fll enable code rather than the cache sync operation which
	  would have updated it much earlier before writing out all fll
	  registers
	 Use simple heuristic approach to find a configuration that
	  should work for most input clocks.
		 For high speed input clocks, enable 300MHz fast oscillator
		  when we're in fractional divider mode.
 Use high performance mode for fractional configurations. 
 Calculate N.K values 
 Some sanity checks before any registers are written. 
 clear the ctrl_upd bit to guarantee we write to it later. 
 FLLn_HOLD must be set before configuring any registers 
 Apply refclk 
 Release the hold so that flln locks to external frequency 
	 To remain consistent with previous FLLs, we expect fout to be
	  provided in the form of the required sysclk rate, which is
	  2x the calculated fll out.
  madera_set_output_mode - Set the mode of the specified output
  @component: Device to configure
  @output: Output number
  @differential: True to set the output to differential mode
  Some systems use external analogue switches to connect more
  analogue devices to the CODEC than are supported by the device.  In
  some systems this requires changing the switched output from single
  ended to differential mode dynamically at runtime, an operation
  supported using this function.
  Most systems have a single static configuration and should use
  platform data instead.
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) STMicroelectronics SA 2015
  Authors: Arnaud Pouliquen <arnaud.pouliquen@st.com>
           for STMicroelectronics.
 DAC definitions 
 stih407 DAC registers 
 sysconf 5041: Audio-Gue-Control 
 sysconf 5042: Audio-DAC-Control 
 DAC definitions 
 SPDIF definitions 
 device data structure 
 DAC function callbacks 
 dapms declaration 
 dapms declaration 
 route declaration 
 route declaration 
 driver data structure 
 Read a register from the sysconf reg bank 
 Read a register from the sysconf reg bank 
	
	  DAC and SPDIF are activated by default
	  put them in IDLE to save power
 Initialise bi-phase formatter to disabled 
 Initialise bi-phase formatter idle value to 0 
 Init DAC configuration 
 init configuration 
  DAC
 Sanity check only 
  SPDIF
  sti_sas_spdif_trigger:
  Trigger function is used to ensure that BiPhase Formater is disabled
  before CPU dai is stopped.
  This is mandatory to avoid that BPF is stalled
  CODEC DAIS
  sti_sas_set_sysclk:
  get MCLK input frequency to check that MCLK-FS ratio is coherent
 Allocate device structure 
 Populate data structure depending on compatibility 
 Initialise device structure 
 Request the DAC & SPDIF registers memory region 
 Request the syscon region 
 Set dapms
 Store context 
 SPDX-License-Identifier: GPL-2.0-only
  MAX9768 AMP driver
  Copyright (C) 2011, 2012 by Wolfram Sang, Pengutronix e.K.
 "Registers" 
 Commands 
 Mute on powerup to avoid clicks 
 Activate chip by releasing shutdown, enables I2C 
 SPDX-License-Identifier: GPL-2.0-only
  wm8711.c  --  WM8711 ALSA SoC Audio driver
  Copyright 2006 Wolfson Microelectronics
  Author: Mike Arthur <Mike.Arthur@wolfsonmicro.com>
  Based on wm8731.c by Richard Purdie
 codec private data 
  wm8711 register cache
  We can't read the WM8711 register space when we are
  using 2 wire for device control, so we cache them instead.
  There is no point in caching the reset register
 Output Mixer 
 output mixer 
 outputs 
 codec mclk clock divider coefficients 
 48k 
 32k 
 8k 
 96k 
 44.1k 
 88.2k 
 bit size 
 set active 
 deactivate 
 set masterslave audio interface 
 interface format 
 clock inversion 
 set iface 
 Latch the update bits 
 CONFIG_SPI_MASTER 
 SPDX-License-Identifier: GPL-2.0-only
  SSM2602 SPI audio driver
  Copyright 2014 Analog Devices Inc.
 SPDX-License-Identifier: GPL-2.0-only
  AD1936AD1937 audio driver
  Copyright 2014 Analog Devices Inc.
 SPDX-License-Identifier: GPL-2.0-only
  arizona.c - Wolfson Arizona class device shared support
  Copyright 2012 Wolfson Microelectronics plc
  Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
 Default is 0 so noop with defaults 
 Default for both is 0 so noop with defaults 
 None 
 Tone 
 Haptics 
 AEC 
 AEC2 
 Noise mixer 
 Comfort noise 
 IN1L 
 AIF1RX1 
 AIF2RX1 
 AIF3RX1 
 SLIMRX1 
 EQ1 
 DRC1L 
 LHPF1 
 DSP1.1 
 DSP2.1 
 DSP3.1 
 DSP4.1 
 ASRC1L 
 ISRC1INT1 
 ISRC1DEC1 
 ISRC2DEC1 
 ISRC2INT1 
 ISRC3DEC1 
 ISRC3INT1 
 If this is the last input pending then allow VU 
 Disable volume updates if no inputs are enabled 
 Store the desired state for the HP outputs 
 Force off if HPDET clamp is active 
		 We must ensure DVFS is disabled before the codec goes into
		  suspend so that we are never in an illegal state of DVFS
		  enabled without enough DCVDD
	
	  We will need to be more flexible than this in future,
	  currently we use a single sample rate for SYSCLK.
 Force multiple of 2 channels for I2S mode 
 Save AIF TXRX state 
 Disable AIF TXRX before reconfiguring it 
 Restore AIF TXRX state 
 Only support TDM for the physical AIFs 
 Find an appropriate FLL_FRATIO 
 Fref must be <=13.5MHz, find initial refdiv 
 Find an appropriate FLL_FRATIO 
 Adjust FRATIOrefdiv to avoid integer mode if possible 
		 start from init_ratio because this may already give a
		  fractional N.K
 Fvco should be over the targt; don't check the upper bound 
 Find an appropriate FLL_FRATIO and refdiv 
 Apply the division for our remaining calculations 
	 Round down to 16bit range with cost of accuracy lost.
	  Denominator must be bigger than numerator so we only
	  take care of it.
 Facilitate smooth refclk across the transition 
	
	  If we have both REFCLK and SYNCCLK then enable both,
	  otherwise apply the SYNCCLK settings to REFCLK.
 Ref path hardcodes lambda to 65536 when sync is on 
	
	  Increase the bandwidth if we're not using a low frequency
	  sync source.
 Configure default refclk to 32kHz if we have one 
  arizona_set_output_mode - Set the mode of the specified output
  @component: Device to configure
  @output: Output number
  @diff: True to set the output to differential mode
  Some systems use external analogue switches to connect more
  analogue devices to the CODEC than are supported by the device.  In
  some systems this requires changing the switched output from single
  ended to differential mode dynamically at runtime, an operation
  supported using this function.
  Most systems have a single static configuration and should use
  platform data instead.
 SPDX-License-Identifier: GPL-2.0
 JZ4740 CODEC driver
 Copyright (C) 2009-2010, Lars-Peter Clausen <lars@metafoo.de>
 The only way to clear the suspend flag is to reset the codec 
 SPDX-License-Identifier: GPL-2.0
 Ingenic JZ4760 CODEC driver
 Copyright (C) 2021, Christophe Branchereau <cbranchereau@gmail.com>
 Copyright (C) 2021, Paul Cercueil <paul@crapouillou.net>
 ICDC internal register access control register(RGADW) 
 ICDC internal register data output register (RGDATA)
 Internal register space, accessed through regmap 
 codec private data 
 Reset all interrupt flags. 
	
	  SYSCLK output from the codec to the AIC is required to keep the
	  DMA transfer going during playback when all audible outputs have
	  been disabled.
 do nothing 
 clear GUPGDO flag 
 unit: 0.01dB 
 Unconditional controls. 
 record gain control 
 unmute HP 
 wait for ramp-up complete (RUP) 
 clear RUP flag 
 mute HP 
 clear RDO flag 
 Unconditional routes. 
 Collect updates for later sending. 
 default Amp output to PCM 
 Disable stereo mic 
 Set mic 1 as default source for ADC 
 ADCDAC: serial + i2s 
 The generated IRQ is a high level 
 12M oscillator 
 0: 16ohm220uF, 1: 10kohm1uF 
 default to NOMAD 
 disable automatic gain 
 Independent LR DAC gain control 
 Send collected updates. 
 wait 6+ cycles 
 sentinel  }
 SPDX-License-Identifier: GPL-2.0-or-later
  wm8580.c  --  WM8580 and WM8581 ALSA Soc Audio driver
  Copyright 2008-12 Wolfson Microelectronics PLC.
  Notes:
   The WM8580 is a multichannel codec with SPDIF support, featuring six
   DAC channels and two ADC channels.
   The WM8581 is a multichannel codec with SPDIF support, featuring eight
   DAC channels and two ADC channels.
   Currently only the primary audio interface is supported - SPDIF and
   the secondary audio interfaces are not.
 WM8580 register space 
 PLLB4 (register 7h) 
 CLKSEL (register 8h) 
 AIF control 1 (registers 9h-bh) 
 AIF control 2 (registers ch-eh) 
 Powerdown Register 1 (register 32h) 
 Powerdown Register 2 (register 33h) 
  wm8580 register cache
  We can't read the WM8580 register space when we
  are using 2 wire for device control, so we cache them instead.
 codec private data 
 Clear the register cache VU so we write without VU set 
 Now write again with the volume update bit set 
 PLL divisors 
 The size in bits of the pll divide 
 PLL rate to output rate divisions 
	 Scale the output frequency up; the PLL should run in the
	  region of 90-100MHz.
	 GCC isn't able to work out the ifs below for initialisingusing
	  pll_div so suppress warnings.
	 Always disable the PLL - it is not safe to leave it running
	  while reprogramming it.
 All done, turn it on 
  Set PCM DAI bit size and sample rate.
 bit size 
 Look up the SYSCLK ratio; accept only exact matches 
 Input 
 We really should validate PLL settings but not yet 
 Power up and get individual control of the DACs 
 Make VMID high impedance 
 Get the codec into a known state 
 power down chip 
 SPDX-License-Identifier: GPL-2.0
 mt6351.c  --  mt6351 ALSA SoC audio codec driver
 Copyright (c) 2018 MediaTek Inc.
 Author: KaiChieh Chuang <kaichieh.chuang@mediatek.com>
 MT6351_TOP_CLKSQ 
 MT6351_TOP_CKPDN_CON0 
 MT6351_AUDDEC_ANA_CON0 
 MT6351_AUDDEC_ANA_CON1 
 MT6351_AUDDEC_ANA_CON3 
 MT6351_AUDDEC_ANA_CON6 
 MT6351_AUDDEC_ANA_CON9 
 MT6351_AUDDEC_ANA_CON10 
 MT6351_AFE_UL_DL_CON0 
 MT6351_AFE_DL_SRC2_CON0_L 
 MT6351_AFE_UL_SRC_CON0_L 
 MT6351_AFE_TOP_CON0 
 MT6351_AUDIO_TOP_CON0 
 MT6351_AFE_SGEN_CFG0 
 MT6351_AFE_NCP_CFG0 
 MT6351_LDO_VUSB33_CON0 
 MT6351_LDO_VA18_CON0 
 MT6351_AUDENC_ANA_CON0 
 MT6351_AUDENC_ANA_CON1 
 MT6351_AUDENC_ANA_CON3 
 MT6351_AUDENC_ANA_CON9 
 MT6351_AUDENC_ANA_CON10 
 Supply subseq 
 0dB 
 0dB 
 check valid range, and set value 
 Enable ZCD, for minimize pop noise 
 when adjust gain during HP buffer on 
 timeout, 1=5ms, 0=30ms 
 dl pga gain 
 ul pga gain 
 MUX 
 LOL MUX 
HP MUX 
 RCV MUX 
 DAC In MUX 
 AIF Out MUX 
 ADC L MUX 
 ADC R MUX 
 PGA L MUX 
 PGA R MUX 
 SET REG 
 CLR REG 
 SET REG 
 CLR REG 
 NCP: ck1 and ck2 clock frequecy adjust configure 
 sdm audio fifo clock power on 
 scrambler clock on enable 
 sdm power on 
 sdm fifo enable 
 set attenuation gain 
 already enabled, do nothing 
 from yoyo HQA script 
 save target gain to restore after hardware open complete 
 Set HPRHPL gain as minimum (~ -40dB) 
 Set HS gain as minimum (~ -40dB) 
 De_OSC of HP 
 enable output STBENH 
 De_OSC of voice, enable output STBENH 
 Enable voice driver 
 Enable pre-charge buffer  
 Apply digital DC compensation value to DAC 
 Enable HPRHPL 
 Disable pre-charge buffer 
 Disable De_OSC of voice 
 Disable voice buffer 
 from yoyo HQ 
 Enable ZCD, for minimize pop noise 
 when adjust gain during HP buffer on 
 apply volume setting 
 still being used, don't close 
 Disable AUD_ZCD 
 Set HPRHPL gain as -1dB, step by step 
 still being used, don't close 
 reset
 De_OSC of HP 
 apply volume setting 
 dcclk_div=11'b00100000011, dcclk_ref_ck_sel=2'b00 
 dcclk_pdn=1'b0 
 dcclk_gen_on=1'b1 
 UL sample rate and mode configure 
 fixed 260k path for 8163248 
 anc ul path src on 
 ANC clk pdn release 
 fixed 260k path for 8163248 
 anc ul path src on 
 ANC clk pdn release 
 Audio ADC clock gen. mode: 00_divided by 2 (Normal) 
 ADC CLK from: 00_13MHz from CLKSQ (Default) 
 Audio L PGA precharge on 
 Audio L PGA mode: 1_DCC 
 Audio L PGA precharge off 
 Audio R PGA precharge on 
 Audio R PGA mode: 1_DCC 
 Audio R PGA precharge off 
 MIC Bias 0 LowPower: 0_Normal 
 MISBIAS0 = 1P9V 
 MISBIAS0 = 1P97 
 MIC Bias 1 LowPower: 0_Normal 
 MISBIAS1 = 2P7V 
 MISBIAS1 = 1P7V 
 MIC Bias 2 LowPower: 0_Normal 
 MISBIAS2 = 1P9V 
 MISBIAS2 = 1P97 
 DAPM Widgets 
 Digital Clock 
 Global Supply
 AIF Rx
 DL Supply 
 DAC 
 LOL 
 Headphone 
 Receiver 
 Outputs 
 SGEN 
 Uplinks 
 Uplinks MUX 
 main mic mic bias 
 ref mic mic bias 
 headset mic12 mic bias 
 UL input 
 Capture 
 DL Supply 
 DL Digital Supply 
 DL Path 
 Headphone Path 
 Receiver Path 
 Disable CLKSQ 26MHz 
 disable AUDGLB 
 Turn off AUDNCP_CLKDIV engine clock,Turn off AUD 26M 
 Disable HeadphoneLHeadphoneRvoice short circuit protection 
 [5] = 1, disable LO buffer left short circuit protection 
 Reverse the PMIC clock
 Module information 
 SPDX-License-Identifier: GPL-2.0-or-later
  wm9712.c  --  ALSA Soc WM9712 codec support
  Copyright 2006-12 Wolfson Microelectronics PLC.
  Author: Liam Girdwood <lrg@slimlogic.co.uk>
 We have to create a fake left and right HP mixers because
  the codec only has a single control that is shared by both channels.
  This makes it impossible to determine the audio path.
 Left Headphone Mixers 
 Right Headphone Mixers 
 Speaker Mixer 
 Phone Mixer 
 ALC headphone mux 
 out 3 mux 
 spk mux 
 Capture to Phone mux 
 Capture left select 
 Capture right select 
 Mic select 
 diff select 
 virtual mixer - mixes left & right channels for spk and mono 
 Left HP mixer 
 Right HP mixer 
 speaker mixer 
 Phone mixer 
 inputs 
 microphones 
 left capture selector 
 right capture selector 
 ALC Sidetone 
 ADC's 
 outputs 
 mono mixer 
 Out3 Mux 
 speaker Mux 
 disable everything including AC link 
 set alc mux to none 
 SPDX-License-Identifier: GPL-2.0-only
  wm_adsp.c  --  Wolfson ADSP support
  Copyright 2012 Wolfson Microelectronics plc
  Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
 Host buffer pointer 
 Version numbers 
 The buffer name 
 Base addr of first buffer area 
 Size of buf1 area in DSP words 
 Base addr of 2nd buffer area 
 Size of buf1+buf2 in DSP words 
 Base addr of buf3 area 
 Size of buf1+buf2+buf3 in DSP words 
 Point at which IRQ is asserted 
 bits 1-31 count IRQ assertions 
 acked IRQ count, bit 0 enables IRQ 
 word index of next write 
 word index of next read 
 error if any 
 word index of oldest surviving 
 how many blocks rewind was done 
 internal 
 min free space since stream start 
 total blocks written (64 bit) 
 total words written (64 bit) 
 0 means no event 
	
	  Although it's not useful to read an acked control, we must satisfy
	  user-side assumptions that all controls are readable and that a
	  write of the same value should be filtered out (it's valid to send
	  the same event number again to the firmware). We therefore return 0,
	  meaning "no event" so valid event numbers will always be a change
 Truncate the subname from the start if it is too long 
 Wake the poll so it can see buffer is no longer attached 
	
	  v0 host_buffer coefficients didn't have versioning, so if the
	  control is one word, assume version 0.
 Only one buffer supported for version 0 
 Fall back to legacy support 
 Trigger the IRQ at one fragment of data 
 Only sync read index if we haven't already read a valid index 
 Wake poll to report error 
		
		  If we really have less than 1 fragment available tell the
		  DSP to inform us once a whole fragment is available.
 Calculate read parameters 
 Read data from DSP 
 update read index to account for words read 
 update avail to account for words read 
 SPDX-License-Identifier: GPL-2.0-only
  Driver for the PCM512x CODECs
  Author:	Mark Brown <broonie@kernel.org>
 		Copyright 2014 Linaro Ltd
  We can't use the same notifier block for more than one supply and
  there's no way I can see to get from a callback to the caller
  except container_of().
 There are 256 raw register addresses 
 There are 256 raw register addresses 
	
	  If the DAC is not actually overclocked, use the good old
	  NCP target rate...
	
	  ...but if the DAC is in fact overclocked, bump the NCP target
	  rate to get the recommended dividers even when overclocking.
 No hole when the frame size is 32. 
		 There is only one hole in the range of supported
		  rates, but it moves with the frame size.
 Disable reporting of missing SCLK as an error 
 Switch PLL input to BCLK 
 64 MHz <= pll_rate <= 100 MHz, VREF mode 
 16 MHz <= sck_rate <=  25 MHz, VREF mode 
	 select sck_rate as a multiple of bclk_rate but still with
	  as many factors of 2 as possible, as that makes it easier
	  to find a fast DAC rate
 pll_rate = pllin_rate  R  J.D  P
  1 <= R <= 16
  1 <= J <= 63
  0 <= D <= 9999
  1 <= P <= 15
  64 MHz <= pll_rate <= 100 MHz
  if D == 0
      1 MHz <= pllin_rate  P <= 20 MHz
  else if D > 0
      6.667 MHz <= pllin_rate  P <= 20 MHz
      4 <= J <= 11
      R = 1
 10000  J.D 
 pllin_rate  P (or here, den) cannot be greater than 20 MHz 
 Try the case with D = 0 
 factor 'num' into J and R, such that R <= 16 and J <= 63 
 no luck 
 Try to find an exact pll_rate using the D > 0 case 
 J == 12 is ok if D == 0 
 Fall back to an approximate pll_rate 
 find smallest possible P 
 J == 12 is ok if D == 0 
 no PLL to bypass, force SCK as DAC input 
 futile, quit early 
 run DAC no faster than 6144000 Hz 
 DAC divider would be too big 
 the actual rate 
 run DSP no faster than 50 MHz 
		 the desired clock rate is "compatible" with the pll input
		  clock, so use that clock as dac input instead of the pll
		  output clock since the pll will introduce jitter and thus
		  noise.
 run DAC no faster than 6144000 Hz 
 run NCP no faster than 2048000 Hz, but why? 
 Reset the device, verifying IO in the process for I2C 
 Default to standby mode 
 SPDX-License-Identifier: GPL-2.0-only
  wm8974.c  --  WM8974 ALSA Soc Audio driver
  Copyright 2006-2009 Wolfson Microelectronics PLC.
  Author: Liam Girdwood <Liam.Girdwood@wolfsonmicro.com>
 adc 
 dac 
 DAC  ADC oversampling 
 Speaker Output Mixer 
 Mono Output Mixer 
 Boost mixer 
 Input PGA 
 Mono output mixer 
 Speaker output mixer 
 Outputs 
 Boost Mixer 
 Input PGA 
 Inputs 
 The size in bits of the pll divide multiplied by 10
 There is a fixed divide by 4 in the output path 
 Check if we need to round 
 Move down to proper range now rounding is done 
 Clock CODEC directly from MCLK 
 Turn off PLL 
 Run CODEC from PLL instead of MCLK 
  Configure WM8974 clock dividers.
 The PLL performs best around 90MHz 
 set masterslave audio interface 
 interface format 
 clock inversion 
 bit size 
 filter coefficient 
 liam need to make this lower power with dapm 
 VMID 50k 
 Initial cap charge at VMID 5k 
 VMID 500k 
 Only 1 channel of data 
 Only 1 channel of data 
 SPDX-License-Identifier: GPL-2.0-only
  cs42l73.c  --  CS42L73 ALSA Soc Audio driver
  Copyright 2011 Cirrus Logic, Inc.
  Authors: Georgi Vlaev, Nucleus Systems Ltd, <joe@nucleusys.com>
 	    Brian Austin, Cirrus Logic Inc, <brian.austin@cirrus.com>
 r06	- Power Ctl 1 
 r07	- Power Ctl 2 
 r08	- Power Ctl 3 
 r09	- Charge Pump Freq 
 r0A	- Output Load MicBias Short Detect 
 r0B	- DMIC Master Clock Ctl 
 r0C	- Aux PCM Ctl 
 r0D	- Aux PCM Master Clock Ctl 
 r0E	- Audio PCM Ctl 
 r0F	- Audio PCM Master Clock Ctl 
 r10	- Voice PCM Ctl 
 r11	- Voice PCM Master Clock Ctl 
 r12	- VoiceAux Sample Rate 
 r13	- Misc IO Path Ctl 
 r14	- ADC Input Path Ctl 
 r15	- MICA Preamp, PGA Volume 
 r16	- MICB Preamp, PGA Volume 
 r17	- Input Path A Digital Volume 
 r18	- Input Path B Digital Volume 
 r19	- Playback Digital Ctl 
 r1A	- HPLO Left Digital Volume 
 r1B	- HPLO Right Digital Volume 
 r1C	- Speakerphone Digital Volume 
 r1D	- EarSPKLO Digital Volume 
 r1E	- HP Left Analog Volume 
 r1F	- HP Right Analog Volume 
 r20	- LO Left Analog Volume 
 r21	- LO Right Analog Volume 
 r22	- Stereo Input Path Advisory Volume 
 r23	- Aux PCM Input Advisory Volume 
 r24	- Audio PCM Input Advisory Volume 
 r25	- Voice PCM Input Advisory Volume 
 r26	- Limiter Attack Rate HPLO 
 r27	- Limter Ctl, Release Rate HPLO 
 r28	- Limter Threshold HPLO 
 r29	- Limiter Attack Rate Speakerphone 
 r2A	- Limter Ctl, Release Rate Speakerphone 
 r2B	- Limter Threshold Speakerphone 
 r2C	- Limiter Attack Rate EarSPKLO 
 r2D	- Limter Ctl, Release Rate EarSPKLO 
 r2E	- Limter Threshold EarSPKLO 
 r2F	- ALC Enable, Attack Rate LeftRight 
 r30	- ALC Release Rate LeftRight 
 r31	- ALC Threshold LeftRight 
 r32	- Noise Gate Ctl LeftRight 
 r33	- ALCNG Misc Ctl 
 r34	- Mixer Ctl 
 r35	- HPLO Left Mixer Input Path Volume 
 r36	- HPLO Right Mixer Input Path Volume 
 r37	- HPLO Left Mixer Aux PCM Volume 
 r38	- HPLO Right Mixer Aux PCM Volume 
 r39	- HPLO Left Mixer Audio PCM Volume 
 r3A	- HPLO Right Mixer Audio PCM Volume 
 r3B	- HPLO Left Mixer Voice PCM Mono Volume 
 r3C	- HPLO Right Mixer Voice PCM Mono Volume 
 r3D	- Aux PCM Left Mixer Input Path Volume 
 r3E	- Aux PCM Right Mixer Input Path Volume 
 r3F	- Aux PCM Left Mixer Volume 
 r40	- Aux PCM Left Mixer Volume 
 r41	- Aux PCM Left Mixer Audio PCM L Volume 
 r42	- Aux PCM Right Mixer Audio PCM R Volume 
 r43	- Aux PCM Left Mixer Voice PCM Volume 
 r44	- Aux PCM Right Mixer Voice PCM Volume 
 r45	- Audio PCM Left Input Path Volume 
 r46	- Audio PCM Right Input Path Volume 
 r47	- Audio PCM Left Mixer Aux PCM L Volume 
 r48	- Audio PCM Right Mixer Aux PCM R Volume 
 r49	- Audio PCM Left Mixer Volume 
 r4A	- Audio PCM Right Mixer Volume 
 r4B	- Audio PCM Left Mixer Voice PCM Volume 
 r4C	- Audio PCM Right Mixer Voice PCM Volume 
 r4D	- Voice PCM Left Input Path Volume 
 r4E	- Voice PCM Right Input Path Volume 
 r4F	- Voice PCM Left Mixer Aux PCM L Volume 
 r50	- Voice PCM Right Mixer Aux PCM R Volume 
 r51	- Voice PCM Left Mixer Audio PCM L Volume 
 r52	- Voice PCM Right Mixer Audio PCM R Volume 
 r53	- Voice PCM Left Mixer Voice PCM Volume 
 r54	- Voice PCM Right Mixer Voice PCM Volume 
 r55	- Mono Mixer Ctl 
 r56	- SPK Mono Mixer Input Path Volume 
 r57	- SPK Mono Mixer Aux PCM MonoLR Volume 
 r58	- SPK Mono Mixer Audio PCM MonoLR Volume 
 r59	- SPK Mono Mixer Voice PCM Mono Volume 
 r5A	- SPKLO Mono Mixer Input Path Mono Volume 
 r5B	- SPKLO Mono Mixer Aux MonoLR Volume 
 r5C	- SPKLO Mono Mixer Audio MonoLR Volume 
 r5D	- SPKLO Mono Mixer Voice Mono Volume 
 r5E	- Interrupt Mask 1 
 r5F	- Interrupt Mask 2 
	
	    NG Threshold depends on NG_BOOTSAB, which selects
	    between two threshold scales in decibels.
	    Set linear values for now ..
 150 ms delay between setting PDN and MCLKDIS 
 50 ms delay between setting PDN and MCLKDIS 
 30 ms delay between setting PDN and MCLKDIS 
 SPKLO EARSPK Paths 
 Loopback 
 Speakerphone Paths 
 Loopback 
 HP LineOUT Paths 
 Loopback 
 Capture Paths 
 Audio Capture 
 Auxillary Capture 
 Voice Capture 
 MCLK, Sample Rate, xMMCC[5:0] 
 5644800 
 6000000 
 6144000 
 5644800 
 6144000 
 6000000 
 6500000 
 6400000 
 6000000 
 6500000 
 6400000 
 MCLKX -> MCLK 
 Clear PCM mode, clear PCM_BIT_ORDER bit for MSB->LSB 
 0 = Don't know 
 CS42L73 Master 
 MCLK -> srate 
 Use SCLK=64Fs if internal MCLK >= 6.4MHz 
 CS42L73 Slave 
 Update ASRCs 
			mdelay(15);  Min amount of time requred to power
				      down.
 Set Charge Pump Frequency 
 MCLK1 as master clk 
 initialize codec 
 SPDX-License-Identifier: GPL-2.0-only
  MAX98504 ALSA SoC Audio driver
  Copyright 2013 - 2014 Maxim Integrated Products
  Copyright 2016 Samsung Electronics Co., Ltd.
 TODO: Add the PCM interface definitions 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2020 Bootlin SA
  Author: Alexandre Belloni <alexandre.belloni@bootlin.com>
 SPDX-License-Identifier: GPL-2.0-only
  rt298.c  --  RT298 ALSA SoC audio codec driver
  Copyright 2015 Realtek Semiconductor Corp.
  Author: Bard Liao <bardliao@realtek.com>
 power on HV,VERF 
 power LDO1 
 If jack in NULL, disable HS jack 
 Digital Mixer 
 Analog Input Mixer 
 ADC0 source 
 HP-OUT source 
 SPK-OUT source 
 If MCLK doesn't exist, reset AD filter 
 Input Lines 
 DMIC 
 REC Mixer 
 ADCs 
 ADC Mux 
 Audio Interface 
 Output Side 
 DACs 
 Output Mux 
 Output Mixer 
 Output Pga 
 Output Lines 
 bit 14 0:48K 1:44.1K 
 bit 3:0 Number of Channel 
 bit 6:4 Bits per Sample 
 bit 15 Stream Type 0:PCM 1:Non-PCM 
 Clear IRQ 
 restore codec default 
 enable jack combo mode on supported devices 
 VREF Charging 
 Vref2 
 SPDX-License-Identifier: GPL-2.0-only
  cs43130.c  --  CS43130 ALSA Soc Audio driver
  Copyright 2017 Cirrus Logic, Inc.
  Authors: Li Xu <li.xu@cirrus.com>
 clk source has not changed 
 no DAI is currently using clk 
 no DAI is currently using clk 
 DoP bitwidth is always 24-bit 
 Calculate SCLK in master mode if unassigned 
 at this point, SCLK must be set 
 no DAI is currently using clk 
			
			  DSD Power Down Sequence
			  According to Design, 130ms is preferred.
			
			  PCM Power Down Sequence
			  According to Design, 130ms is preferred.
			
			  Per datasheet, Sec. PCM Power-Up Sequence.
			  According to Design, CS43130_DXD12 must be 0 to meet
			  THDN and Dynamic Range spec.
 AC freq is counted in 5.94Hz step. 
 clk not in use 
 clk not in use 
 needed for regcache_sync 
 Crystal is unused. System clock is used for external MCLK 
 SPDX-License-Identifier: GPL-2.0
  MAX9759 Amplifier Driver
  Copyright (c) 2017 BayLibre, SAS.
  Author: Neil Armstrong <narmstrong@baylibre.com>
 From 6dB to 24dB in steps of 6dB 
 G1, G2 
 +6dB 
 +12dB 
 +18dB 
 +24dB 
 G1 
 G2 
 SPDX-License-Identifier: GPL-2.0
 TLV320ADCX140 Sound driver
 Copyright (C) 2020 Texas Instruments Incorporated - https:
 Digital Volume control. From -100 to 27 dB in 0.5 dB steps 
 ADC gain. From 0 to 42 dB in 1 dB steps 
 DRE Level. From -12 dB to -66 dB in 1 dB steps 
 DRE Max Gain. From 2 dB to 26 dB in 2 dB steps 
 AGC Level. From -6 dB to -36 dB in 2 dB steps 
 AGC Max Gain. From 3 dB to 42 dB in 3 dB steps 
 AnalogDigital Selection 
 Output Mixer 
 Analog Differential Inputs 
 Input Selection to MIC_PGA 
 Input Selection to MIC_PGA 
 Outputs 
 Mic input 
 8.4.1: wait for hw shutdown (25ms) + >= 1ms 
 8.4.2: wait >= 10 ms after entering sleep mode. 
 set masterslave audio interface 
 interface format 
 signal polarity 
 Configure data offset 
 TDM based on DSP mode requires slots to be adjacent 
 8.4.3: Wait >= 1ms after entering active mode. 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2021 Stephan Gerhold
  Register definitionssequences taken from various tfa98xx kernel drivers:
  Copyright (C) 2014-2020 NXP Semiconductors, All Rights Reserved.
  Copyright (C) 2013 Sony Mobile Communications Inc.
 device revision 
 receiver mode 
 amplifier input select 
 sample rate 
 power down 
 I2C reset 
 enable CoolFlux DSP 
 enable amplifier 
 enable boost 
 DSP configured 
 amplifier enabled by DSP 
 speaker impedance 
 DCDC compensation 
 "DSP"  };
 some other registers must be set for optimal amplifier behaviour 
 peak voltage protection is always on, but may be written 
 TFA989X_SYSCTRL_DCA = 0 
 Reduce slewrate by clearing iddqtestbst to avoid booster damage 
 Enable clipping 
 Set required TDM configuration 
  Note: At the moment this driver bypasses the "CoolFlux DSP" built into the
  TFA989X amplifiers. Unfortunately, there seems to be absolutely
  no documentation for it - the public "short datasheets" do not provide
  any information about the DSP or available registers.
  Usually the TFA989X amplifiers are configured through proprietary userspace
  libraries. There are also some (rather complex) kernel drivers but even those
  rely on obscure firmware blobs for configuration (so-called "containers").
  They seem to contain different "profiles" with tuned speaker settings, sample
  rates and volume steps (which would be better exposed as separate ALSA mixers).
  Bypassing the DSP disables volume control (and perhaps some speaker
  optimization?), but at least allows using the speaker without obscure
  kernel drivers and firmware.
  Ideally NXP (or now Goodix) should release proper documentation for these
  amplifiers so that support for the "CoolFlux DSP" can be implemented properly.
 Clear CHSA to bypass DSP and take input from I2S 1 left channel 
 Set DCDC compensation to off and speaker impedance to 8 ohm 
 Set DCDC to follower mode and disable CoolFlux DSP 
 Bypass regcache for reset and init sequence 
 Dummy read to generate i2c clocks, required on some devices 
 SPDX-License-Identifier: GPL-2.0
 rk3328 ALSA SoC Audio driver
 Copyright (c) 2017, Fuzhou Rockchip Electronics Co., Ltd All rights reserved.
  volume setting
  0: -39dB
  26: 0dB
  31: 6dB
  Step: 1.5dB
 msec 
 Workaround for silence when changed Fs 48 -> 44.1kHz 
 enable i2s_acodec_en 
	
	  Rock64 is the only supported platform to have widely relied on
	  this; if we do happen to come across an old DTB, just leave the
	  external mute forced off.
 SPDX-License-Identifier: GPL-2.0
  Copyright 2019 Google, Inc.
  ChromeOS Embedded Controller codec driver.
  This driver uses the cros-ec interface to communicate with the ChromeOS
  EC for audio function.
 common 
 DMIC 
 I2S_RX 
 WoV 
		
		  Note: EC codec only requests for `r.len' but we allocate
		  round up PAGE_SIZE `req'.
 Note: waste 1-byte to differentiate full and empty 
 make sure write to memory before calling host command 
 Skips the TLV header. 
 Reset EC codec i2s rx. 
 SPDX-License-Identifier: GPL-2.0-only
  cs42l42.c -- CS42L42 ALSA SoC audio driver
  Copyright 2016 Cirrus Logic, Inc.
  Author: James Schulman <james.schulman@cirrus.com>
  Author: Brian Austin <brian.austin@cirrus.com>
  Author: Michael White <michael.white@cirrus.com>
 ADC Volume and Filter Controls 
 DAC Volume and Filter Controls 
 Only need one delay if HP and ADC are both powering-up 
 Playback Path 
 Playback Requirements 
 Capture Path 
 Capture Requirements 
 PlaybackCapture Requirements 
 Playback Path 
 Playback Requirements 
 Capture Path 
 Capture Requirements 
 Switch to SCLK. Atomic delay after the write to allow the switch to complete. 
 Switch to OSC. Atomic delay after the write to allow the switch to complete. 
  Common PLL Settings for given SCLK
  Table 4-5 from the Datasheet
 Don't reconfigure if there is an audio stream running 
 Configure the internal sample rate 
 Set up the LRCLK 
 Set the LRCLK period 
 Set the LRCLK to 50% duty cycle 
 Pass the clock straight through 
 Configure PLL per table 4-5 
 Don't reconfigure if there is an audio stream running 
 SRC MCLK must be as close as possible to 125  sample rate 
 Set the sample rates (96k or lower) 
 interface format 
		
		  5050 mode, frame starts on falling edge of LRCLK,
		  frame delayed by 1.0 SCLKs
 Bitclockframe inversion 
	
	  Sample rates < 44.1 kHz would produce an out-of-range SCLK with
	  a standard I2S frame. If the machine driver sets SCLK it must be
	  legal.
 Machine driver has not set a SCLK, limit bottom end to 44.1 kHz 
 I2S frame always has 2 channels even for mono audio 
	
	  Assume 24-bit samples are in 32-bit slots, to prevent SCLK being
	  more than assumed (which would result in overclocking).
 channel 2 on high LRCLK 
 channel 1 on low LRCLK 
 Channel 2 on high LRCLK 
 Channel B comes from the last active channel 
 Both LRCLK slots must be enabled 
 Mute the headphone 
			
			  Switch to the internal oscillator.
			  SCLK must remain running until after this clock switch.
			  Without a source of clock the I2C bus doesn't work.
 Must disconnect PLL before stopping it 
 SCLK must be running before codec unmute 
 PLL must be running to drive glitchless switch logic 
 Mark SCLK as present, turn off internal oscillator 
 Un-mute the headphone 
 Set hs detect to manual, active mode 
 Configure HS DET comparator reference levels. 
 Open the SW_HSB_HS3 switch and close SW_HSB_HS4 for a Type 1 headset. 
 Close the SW_HSB_HS3 switch for a Type 2 headset. 
 Use Comparator 1 with 1.25V Threshold. 
 Fallback to Comparator 2 with 1.75V Threshold. 
 Set Switches 
 Set HSDET mode to Manual—Disabled 
 Configure HS DET comparator reference levels. 
 Read and save the hs detection result 
 Mask the auto detect interrupt 
 Set hs detect to automatic, disabled mode 
	 Run Manual detection if auto detect has not found a headset.
	  We Re-Run with Manual Detection if the original detection was invalid or headphones,
	  to ensure that a headset mic is detected in all cases.
 Set up button detection 
 Set auto HS bias settings to default 
 Set up hs detect level sensitivity 
 Set auto HS bias settings to default 
 Turn on level detect circuitry 
 Clear any button interrupts before unmasking them 
 Unmask button detect interrupts 
 Make sure button detect and HS bias circuits are off 
 Unmask tip sense interrupts 
 Mask tip sense interrupts 
 Make sure button detect and HS bias circuits are off 
 Set auto HS bias settings to default 
 Set hs detect to manual, disabled mode 
 Power up HS bias to 2.7V 
 Wait for HS bias to ramp up 
 Unmask auto detect interrupt 
 Set hs detect to automatic, enabled mode 
 Mask button detect interrupts 
 Ground HS bias 
 Set auto HS bias settings to default 
 Set hs detect to manual, disabled mode 
 Mask button detect interrupts 
 Test all 4 level detect biases 
 Adjust button detect level sensitivity 
 Function C button press 
 Function B button press 
 Function D button press 
 Function A button press 
 Set button detect level sensitivity back to default 
 Clear any button interrupts before unmasking them 
 Unmask button detect interrupts 
 Read sticky registers to clear interurpt 
 Read tip sense status before handling type detect 
 Read button sense status 
 Check auto-detect status 
 Check tip sense status 
 Check button detect status 
 Latch analog controls to VP power domain 
 Remove ground noise-suppression clamps 
 Enable the tip sense circuit 
 Save the initial status of the tip sense 
 Reset the Device 
 Request IRQ if one was specified 
 initialize codec 
 Power up the codec 
 Setup headset detection 
 MaskUnmask Interrupts 
 Register codec for machine driver 
	
	  The driver might not have control of reset and power supplies,
	  so ensure that the chip internals are powered down.
 SPDX-License-Identifier: GPL-2.0-or-later
 File:         soundsoccodecsssm2602.c
 Author:       Cliff Cai <Cliff.Cai@analog.com>
 Created:      Tue June 06 2008
 Description:  Driver for ssm2602 sound chip
 Modified:
               Copyright 2008 Analog Devices Inc.
 Bugs:         Enter bugs at http:
 codec private data 
  ssm2602 register cache
  We can't read the ssm2602 register space when we are
  using 2 wire for device control, so we cache them instead.
  There is no point in caching the reset register
Appending several "None"s just for OSS mixer use
 Output Mixer 
 Input mux 
	
	  According to the ssm2603 data sheet (control register sequencing),
	  the digital core should be activated only after all necessary bits
	  in the power register are enabled, and a delay determined by the
	  decoupling capacitor on the VMID pin has passed. If the digital core
	  is activated too early, or even before the ADC is powered up, audible
	  artifacts appear at the beginning and end of the recorded signal.
	 
	  In practice, audible artifacts disappear well over 500 ms.
 Last element is the mic 
 codec mclk clock coefficients 
 48k 
 32k 
 16k 
 8k 
 96k 
 11.025k 
 22.05k 
 44.1k 
 88.2k 
 bit size 
 set masterslave audio interface 
 interface format 
 clock inversion 
 set iface 
 vrefmid on, osc and clkout on if enabled 
 everything off except vrefvmid, 
 everything off 
 set the update bits 
select Line in as default input
 SPDX-License-Identifier: GPL-2.0-only
  wm5102.c  --  WM5102 ALSA SoC Audio driver
  Copyright 2012 Wolfson Microelectronics plc
  Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
 This may return -EPROBE_DEFER, so do this early on 
 SR2 fixed at 8kHz, SR3 fixed at 16kHz 
 Latch volume update bits 
 SPDX-License-Identifier: GPL-2.0-only
  dmic.c  --  SoC audio for Generic Digital MICs
  Author: Liam Girdwood <lrg@slimlogic.co.uk>
 Delay after DMIC mode switch 
 SPDX-License-Identifier: GPL-2.0-or-later
  wm8990.c  --  WM8990 ALSA Soc Audio driver
  Copyright 2008 Wolfson Microelectronics PLC.
  Author: Liam Girdwood <lrg@slimlogic.co.uk>
 codec private data 
 now hit the volume update bits (always bit 8) 
 INMIXL 
 INMIXR 
 LOMIX 
 ROMIX 
 LOUT 
 ROUT 
 LOPGA 
 ROPGA 
  _DAPM_ Controls
 INMIX dB values 
 Left In PGA Connections 
 Right In PGA Connections 
 INMIXL 
 INMIXR 
 AINLMUX 
 DIFFINL 
 AINRMUX 
 LOMIX 
 ROMIX 
 LONMIX 
 LOPMIX 
 RONMIX 
 ROPMIX 
 OUT3MIX 
 OUT4MIX 
 SPKMIX 
 Input Side 
 Input Lines 
 DACs 
 Input PGAs 
 INMIXL 
 AINLMUX 
 INMIXR 
 AINRMUX 
 Output Side 
 DACs 
 LOMIX 
 LONMIX 
 LOPMIX 
 OUT3MIX 
 SPKMIX 
 OUT4MIX 
 ROPMIX 
 RONMIX 
 ROMIX 
 LOUT PGA 
 ROUT PGA 
 LOPGA 
 ROPGA 
 MICBIAS 
 Make DACs turn on when playing even if not mixed into any outputs 
 Make ADCs turn on when recording even if not mixed from any inputs 
 Input Side 
 LIN12 PGA 
 LIN34 PGA 
 INMIXL 
 AINLMUX 
 ADC 
 RIN12 PGA 
 RIN34 PGA 
 INMIXL 
 AINRMUX 
 ADC 
 LOMIX 
 ROMIX 
 SPKMIX 
 LONMIX 
 LOPMIX 
 OUT3MIX 
 OUT4MIX 
 RONMIX 
 ROPMIX 
 Out Mixer PGAs 
 Output Pins 
 PLL divisors 
 The size in bits of the pll divide multiplied by 10
 Check if we need to round 
 Move down to proper range now rounding is done 
 Turn on PLL 
 sysclk comes from PLL 
 set up N , fractional mode and pre-divisor if necessary 
 Turn off PLL 
  Clock after PLL and dividers
  Set's ADC and Voice DAC format.
 set masterslave audio interface 
 interface format 
  Set PCM DAI bit size and sample rate.
 bit size 
 VMID=250k 
 Enable all output discharge bits 
 Enable POBCTRL, SOFT_ST, VMIDTOG and BUFDCOPEN 
 Delay to allow output caps to discharge 
 Disable VMIDTOG 
 disable all output discharge bits 
 Enable outputs 
 Enable VMID at 2x50k 
 Enable VREF 
 Enable BUFIOEN 
 Disable outputs 
 disable POBCTRL, SOFT_ST and BUFDCOPEN 
 Enable workaround for ADC clocking issue. 
 VMID=2250k 
 Enable POBCTRL and SOFT_ST 
 Enable POBCTRL, SOFT_ST and BUFDCOPEN 
 mute DAC 
 Enable any disabled outputs 
 Disable VMID 
 Enable all output discharge bits 
 Disable VREF 
 disable POBCTRL, SOFT_ST and BUFDCOPEN 
  The WM8990 supports 2 different and mutually exclusive DAI
  configurations.
  1. ADCDAC on Primary Interface
  2. ADC on Primary InterfaceDAC on secondary
 ADCDAC on primary 
  initialise the WM8990 driver
  register the mixer and dsp interfaces with the kernel
 charge output caps 
 SPDX-License-Identifier: GPL-2.0-only
  Texas Instruments TLV320AIC26 low power audio CODEC
  ALSA SoC CODEC driver
  Copyright (C) 2008 Secret Lab Technologies Ltd.
 AIC26 driver private data 
 Keyclick parameters 
 ---------------------------------------------------------------------
  Digital Audio Interface Operations
 select data word length 
	
	  Configure PLL
	  fsref = (mclk  PLLM)  2048
	  where PLLM = J.DDDD (DDDD register ranges from 0 to 9999, decimal)
 compute J portion of multiplier 
 compute fractional DDDD component of multiplier 
 Audio Control 3 (master mode, fsref rate) 
 Audio Control 1 (FSref divisor) 
  aic26_mute - Mute control to reduce noise when changing audio format
 MCLK needs to fall between 2MHz and 50 MHz 
 set masterslave audio interface 
 interface format 
 ---------------------------------------------------------------------
  Digital Audio Interface Definition
 ---------------------------------------------------------------------
  ALSA controls
 Output 
 ---------------------------------------------------------------------
  SPI device portion of driver: sysfs files for debugging
 Any write to the keyclick attribute will trigger the keyclick event 
 ---------------------------------------------------------------------
  SoC CODEC portion of driver: probe and release routines
 Reset the codec to power on defaults 
 Power up CODEC 
 Audio Control 3 (master mode, fsref rate) 
 set master mode 
 Register the sysfs files for debugging 
 Create SysFS files 
 ---------------------------------------------------------------------
  SPI device portion of driver: probe and release routines and SPI
  				 driver registration.
 Allocate driver data 
 Initialize the driver data 
 SPDX-License-Identifier: GPL-2.0
 rk817 ALSA SoC Audio driver
 Copyright (c) 2018, Fuzhou Rockchip Electronics Co., Ltd All rights reserved.
  This sets the codec up with the values defined in the default implementation including the APLL
  from the Rockchip vendor kernel. I do not know if these values are universal despite differing
  from the default values defined above and taken from the datasheet, or implementation specific.
  I don't have another implementation to compare from the Rockchip sources. Hard-coding for now.
  Additionally, I do not know according to the documentation the units accepted for the clock
  values, so for the moment those are left unvalidated.
 Set resistor value and charge pump current for PLL. 
 Set the PLL feedback clock divide value (values not documented). 
 Set the PLL pre-divide value (values not documented). 
	 Set the PLL VCO output clock divide and PLL divided ratio of PLL High Clk (values not
	  documented).
  DDACDADC LR volume setting
  0db~-95db, 0.375dbstep, for example:
  0x00: 0dB
  0xff: -95dB
  PGA GAIN LR volume setting
  27db~-18db, 3dbstep, for example:
  0x0: -18dB
  0xf: 27dB
 Since the speaker output and L headphone pin are internally the same, make audio path mutually
  exclusive with a mux.
 captureplayback common 
 capture path common 
 capture path L 
 capture path R 
 playback path common 
 playback path speaker 
 playback path headphones 
 Mux for inputoutput path selection 
 Pins for Simple Card Bindings 
 capture path 
 left mic 
 right mic 
 playback path 
 speaker path 
 headphone path L 
 headphone path R 
 mux path for output selection 
	 setting initial pll values so that we can continue to leverage simple-audio-card.
	  The values aren't important since no parameters are used.
 SPDX-License-Identifier: GPL-2.0+ 
   Cirrus Logic CS4341A ALSA SoC Codec Driver
   Author: Alexander Shiyan <shc_work@mail.ru>
 SPDX-License-Identifier: GPL-2.0-only
  ALSA SoC TLV320AIC23 codec driver
  Author:      Arun KS, <arunks@mistralsolutions.com>
  Copyright:   (C) 2008 Mistral Solutions Pvt Ltd.,
  Based on soundsoccodecswm8731.c by Richard Purdie
  Notes:
   The AIC23 is a driver for a low power stereo audio
   codec tlv320aic23
   The machine layer should disable unsupported inputsoutputs by
   snd_soc_dapm_disable_pin(codec, "LHPOUT"), etc.
  AIC23 register cache
	 linear conversion to userspace
	 000	=	-6db
	 001	=	-9db
	 010	=	-12db
	 011	=	-18db (Min)
	 100	=	0db (Max)
 PGA Mixer controls for Line and Mic switch 
 Output Mixer 
 Outputs 
 Inputs 
 input mux 
 AIC23 driver data 
  Common Crystals used
  11.2896 Mhz 128 = 88.2k  192 = 58.8k
  12.0000 Mhz 125 = 96k    136 = 88.235K
  12.2880 Mhz 128 = 96k    192 = 64k
  16.9344 Mhz 128 = 132.3k 192 = 88.2k
  18.4320 Mhz 128 = 144k   192 = 96k
  Normal BOSR 0-2562 = 128, 1-3842 = 192
  USB BOSR 0-2502 = 125, 1-2722 = 136
 Normal, bosr - 0
 Usb, bosr - 0
 Normal, bosr - 1
 Usb, bosr - 1
  Every divisor is a factor of 1112
	
	  rates given are +- 132
 prefer to have a 2 
 Search for the right sample rate 
 set active 
 deactivate 
 set masterslave audio interface 
 interface format 
 vrefmid, osc on, dac unmute 
 everything off except vrefvmid, 
 everything off, dac mute, inactive 
 Reset codec 
 Unmute input 
 Default output volume 
 SPDX-License-Identifier: GPL-2.0-only
  ALSA SoC SPDIF DIR (Digital Interface Reciever) driver
  Based on ALSA SoC SPDIF DIT driver
   This driver is used by controllers which can operate in DIR (SPDIF) where
   no codec is needed.  This file provides stub codec that can be used
   in these configurations. SPEAr SPDIF IN Audio controller uses this driver.
  Author:      Vipin Kumar,  <vipin.kumar@st.com>
  Copyright:   (C) 2012  ST Microelectronics
 SPDX-License-Identifier: GPL-2.0-only
 rt711-sdw-sdca.c -- rt711 SDCA ALSA SoC audio driver
 Copyright(c) 2021 Realtek Semiconductor Corp.
 BRA 
 i2c debug 
 Update the status 
			
			  Due to the SCP_SDCA_INTMASK will be cleared by any reset, and then
			  if the device attached again, we will need to set the setting back.
			  It could avoid losing the jack detection interrupt.
			  This also could sync with the cache value as the rt711_sdca_jack_init set.
	
	  Perform initialization only if slave status is present and
	  hw_init flag is false
 perform IO transfers required for Slave initialization 
 first we need to allocate memory for set bits in port lists 
 BITMAP: 00010100 
 BITMAP:  00001000 
 do this again for sink now 
 set the timeout values 
 wake-up event 
 avoid the HID owner doesn't change to device 
	
	  The critical section below intentionally protects a rather large piece of code.
	  We don't want to allow the system suspend to disable an interrupt while we are
	  processing it, which could be problematic given the quirky SoundWire interrupt
	  scheme. We do want however to prevent new workqueues from being scheduled if
	  the disable_irq flag was set during system suspend.
 clear flag 
 check if flag clear or not 
 Regmap Initialization 
	
	  prevent new interrupts from being handled after the
	  deferred work completes and before the parent disables
	  interrupts on the link
 log but don't prevent suspend from happening 
 SPDX-License-Identifier: GPL-2.0-only
  NAU88L24 ALSA SoC audio driver
  Copyright 2016 Nuvoton Technology Corp.
  Author: John Hsu <KCHSU0@nuvoton.com>
 the ADC threshold of headset 
 the ADC threshold of headset 
 the parameter threshold of FLL 
 scaling for mclk from sysclk_src output 
 ratio for input clk freq 
 the maximum frequency of CLK_ADC and CLK_DAC 
 over sampling rate 
 OSR 64, SRC 14 
 OSR 256, SRC 1 
 OSR 128, SRC 12 
 OSR 32, SRC 18 
 OSR 32, SRC 18 
 OSR 64, SRC 14 
 OSR 128, SRC 12 
 OSR 256, SRC 1 
 Disables the TESTDAC to let DAC signal pass through. 
 Prevent startup click by letting charge pump to ramp up 
		 Set clock source to disable or internal clock before the
		  playback or capture end. Codec needs clock for Jack
		  detection and button press if jack inserted; otherwise,
		  the clock should be closed.
		 Check the clock source setting is proper or not
		  no matter the source is from FLL or MCLK.
 It's error to use internal clock when playback 
 Check error depending on source is FLL or MCLK. 
 Recover the clock source setting if error. 
	 The DMIC clock is gotten from system clock (256fs) divided by
	  DMIC_SRC (1, 2, 4, 8, 16, 32). The clock has to be equal or
	  less than 3.072 MHz.
	 Reset the intrruption status from rightmost bit if the corres-
	  ponding irq event occurs.
 Clear all interruption status 
	 Enable the insertion interruption, disable the ejection
	  interruption, and then bypass de-bounce circuit.
 Close clock for jack type detection at manual mode 
 Enable short key press and release interruption. 
 Enable jack ejection interruption. 
 Enable internal VCO needed for interruptions 
	 The chip supports up to 8 buttons, but ALSA defines
	  only 6 buttons.
		 release semaphore held after resume,
		  and cancel jack detection
 lower 8 bits of the register are for pressed keys 
 Turn off insertion interruption at manual mode 
 detect microphone and jack type 
		 Enable interruption for jack type detection at audo
		  mode which can detect microphone and jack type.
 clears the rightmost interruption 
	 CLK_DAC or CLK_ADC = OSR  FS
	  DAC or ADC clock frequency is defined as Over Sampling Rate (OSR)
	  multiplied by the audio sample rate (Fs). Note that the OSR and Fs
	  values must be selected such that the maximum frequency is less
	  than 6.144 MHz.
 make BCLK and LRC divde configuration if the codec as master. 
 get the bclk and fs ratio 
  nau8824_set_tdm_slot - configure DAI TDM.
  @dai: DAI
  @tx_mask: Bitmask representing active TX slots. Ex.
                  0xf for normal 4 channel TDM.
                  0xf0 for shifted 4 channel TDM
  @rx_mask: Bitmask [0:1] representing active DACR RX slots.
                  Bitmask [2:3] representing active DACL RX slots.
                  00=CH0,01=CH1,10=CH2,11=CH3. Ex.
                  0xf for DACLR selecting TDM CH3.
                  0xf0 for DACLR selecting shifted TDM CH3.
  @slots: Number of slots in use.
  @slot_width: Width in bits for each slot.
  Configures a DAI for TDM operation. Only support 4 slots TDM.
  nau8824_calc_fll_param - Calculate FLL parameters.
  @fll_in: external clock provided to codec.
  @fs: sampling rate.
  @fll_param: Pointer to structure of FLL parameters.
  Calculate FLL parameters to configure codec.
  Returns 0 for success or negative error code.
	 Ensure the reference clock frequency (FREF) is <= 13.5MHz by dividing
	  freq_in by 1, 2, 4, or 8 using FLL pre-scalar.
	  FREF = freq_in  NAU8824_FLL_REF_DIV_MASK
 Choose the FLL ratio based on FREF 
	 Calculate the frequency of DCO (FDCO) given freq_out = 256  Fs.
	  FDCO must be within the 90MHz - 124MHz or the FFL cannot be
	  guaranteed across the full range of operation.
	  FDCO = freq_out  2  mclk_src_scaling
	 Calculate the FLL 10-bit integer input and the FLL 16-bit fractional
	  input based on FDCO, FREF and FLL ratio.
 FLL 16-bit fractional input 
 FLL 10-bit integer input 
 FLL pre-scaler 
 select divided VCO input 
 Disable free-running mode 
 freq_out must be 256Fs in order to achieve the best performance 
 Clear all interruption status 
		 Enable jack detection at sleep mode, insertion detection,
		  and ejection detection.
 Setup codec configuration after resume 
		 Hold semaphore to postpone playback happening
		  until jack detection done.
  nau8824_enable_jack_detect - Specify a jack for event reporting
  @component:  component to register the jack with
  @jack: jack to use to report headset and button events on
  After this function has been called the headset insertremove and button
  events will be routed to the given jack.  Jack can be null to stop
  reporting.
 Initiate jack detection work queue 
 Enable BiasVMIDVMID Tieoff 
 Disable Boost Driver, Automatic Short circuit protection enable 
 Scaling for ADC and DAC clock 
 Class G timer 64ms 
 Disable DACRL power 
	 Enable TESTDAC. This sets the analog DAC inputs to a '0' input
	  signal to avoid any glitches due to power up transients in both
	  the analog and digital DAC circuit.
 Config LR channel 
	 Default oversamplingdecimations settings are unusable
	  (audible hiss). Set it to something better.
 DAC clock delay 2ns, VREF 
 PGA input mode selection 
 Digital microphone control 
 jkdet_polarity - 1  is for active-low 
 Disable interruption before codec initiation done 
 Please keep this list alphabetically sorted 
 Cyberbook T116 rugged tablet 
 CUBE iwork8 Air 
 Pipo W2S 
 SPDX-License-Identifier: GPL-2.0-only
  wm8988.c -- WM8988 ALSA SoC audio driver
  Copyright 2009 Wolfson Microelectronics plc
  Copyright 2005 Openedhand Ltd.
  Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
  wm8988 register cache
  We can't read the WM8988 register space when we
  are using 2 wire for device control, so we cache them instead.
 codec private data 
  WM8988 Controls
  DAPM Controls
 Use the DAC to gate LRC if active, otherwise use ADC 
 Left Mixer 
 Right Mixer 
 Left PGA Mux 
 Right PGA Mux 
 Differential Mux 
 Mono ADC Mux 
 codec hifi mclk clock divider coefficients 
 8k 
 11.025k 
 16k 
 22.05k 
 32k 
 44.1k 
 48k 
 88.2k 
 96k 
 The set of rates we can generate from the above for each SYSCLK 
  Note that this should be called from init rather than from hw_params.
 set masterslave audio interface 
 interface format 
 clock inversion 
	 The set of sample rates that can be supported depends on the
	  MCLK supplied to the CODEC - enforce this.
 bit size 
 set iface & srate 
 VREF, VMID=2x50k, digital enabled 
 VREF, VMID=2x5k 
 Charge caps 
 VREF, VMID=2500k, digital stopped 
 set the update bits (we always update left then right) 
 CONFIG_SPI_MASTER 
 SPDX-License-Identifier: GPL-2.0
 cs35l41-spi.c -- CS35l41 SPI driver
 Copyright 2017-2021 Cirrus Logic, Inc.
 Author: David Rhodes	<david.rhodes@cirrus.com>
 Cirrus Logic PnP ID + part ID 
 SPDX-License-Identifier: GPL-2.0-only
  rt5663.c  --  RT5663 ALSA SoC audio codec driver
  Copyright 2016 Realtek Semiconductor Corp.
  Author: Jack Yu <jack.yu@realtek.com>
 {0, +20, +24, +30, +35, +40, +44, +50, +52} dB 
 Interface data select 
 reset in-line command 
 reset in-line command 
  rt5663_v2_jack_detect - Detect headset.
  @component: SoC audio component device.
  @jack_insert: Jack insert or not.
  Detect whether is headset or not when jack inserted.
  Returns detect status.
  rt5663_jack_detect - Detect headset.
  @component: SoC audio component device.
  @jack_insert: Jack insert or not.
  Detect whether is headset or not when jack inserted.
  Returns detect status.
 BST1 power on for JD 
 JD1 
 jack in 
 jack was out, report jack type 
 Delay the jack insert report to avoid pop noise 
 jack is already in, report button event 
			
			  rt5663 can report three kinds of button behavior,
			  one click, double click and hold. However,
			  currently we will report button pressedreleased
			  event. So all the three button behaviors are
			  treated as button pressed.
 unpressed 
 button release or spurious interrput
 jack out 
 jack out 
 DAC Digital Volume 
 ADC Digital Volume Control 
 Headphone Output Volume 
 Mic Boost Volume 
 Mic Boost Volume
 Data Swap for Slot01 in ADCDAT1 
 Headphone Output Volume 
  rt5663_sel_asrc_clk_src - select ASRC clock source for a set of filters
  @component: SoC audio component device.
  @filter_mask: mask of filters.
  @clk_src: clock source
  The ASRC function is for asynchronous MCLK and LRCK. Also, since RT5663 can
  only support standard 32fs or 64fs i2s format, ASRC should be enabled to
  support special i2s clock format such as Intel's 100fs(100  sampling rate).
  ASRC function will track i2s clock and generate a corresponding system clock
  for codec. This function provides an API to select the clock source for a
  set of filters specified by the mask. And the codec driver will turn on ASRC
  for these filters if ASRC is selected as their clock source.
 Analog Mixer 
 Digital Mixer 
 Out Switch 
 Stereo ADC source 
 RT5663: Analog DACL1 input source 
 RT5663: Analog DACR1 input source 
 micbias 
 Input Lines 
 REC Mixer Power 
 ADCs 
 ADC Mixer 
 ADC Filter Power 
 Digital Interface 
 Audio Interface 
 DAC mixer before sound effect  
 DAC Mixer 
 DACs 
 Headphone
 Output Lines 
 ASRC 
 Input Lines 
 Boost 
 REC Mixer 
 ADC 
 ADC Mux 
 ADC Mix 
 Analog DAC Clock 
 Headphone out 
 System Clock Pre Divider Gating 
 LDO 
 ASRC 
 Boost 
 STO ADC 
 Analog DAC source 
 PLL 
 ASRC 
 Set load for regulator. 
 reset and calibrate 
 GPIO1 as IRQ 
 4btn inline command debounce 
 JD1 
 Set GPIO4 and GPIO8 as input for combo jack 
	
	  Error after enabling regulators should goto err_enable
	  to disable regulators.
 SPDX-License-Identifier: GPL-2.0+
 tfa9879.c  --  driver for NXP Semiconductors TFA9879
 Copyright (C) 2014 Axentia Technologies AB
 Author: Peter Rosin <peda@axentia.se>
 0x00 
 0x01 
 0x02 
 0x03 
 0x04 
 0x05 
 0x06 
 0x07 
 0x08 
 0x09 
 0x0a 
 0x0b 
 0x0c 
 0x0d 
 0x0e 
 0x0f 
 0x10 
 0x11 
 0x12 
 0x13 
 0x14 
 Ensure the device is in reset state 
 SPDX-License-Identifier: GPL-2.0
 rt1016.c  --  RT1016 ALSA SoC audio amplifier driver
 Copyright 2020 Realtek Semiconductor Corp.
 Author: Oder Chiou <oder_chiou@realtek.com>
 Interface data select 
 SPDX-License-Identifier: GPL-2.0
 8000 to 192000 supported , only 176400 not support 
 11bit [min,max,step] = [-103.9375dB, 24dB, 0.0625dB] 
 {6, 8, 10, 12, 13, 14, 15, 16}dB 
 SPKL 
 SPKR 
 Cap 
 Internal setting 
 SPDX-License-Identifier: GPL-2.0-or-later
  ad73311.c  --  ALSA Soc AD73311 codec support
  Copyright:	Analog Devices Inc.
  Author:	Cliff Cai <cliff.cai@analog.com>
 SPDX-License-Identifier: GPL-2.0-only
  wm8510.c  --  WM8510 ALSA Soc Audio driver
  Copyright 2006 Wolfson Microelectronics PLC.
  Author: Liam Girdwood <lrg@slimlogic.co.uk>
  wm8510 register cache
  We can't read the WM8510 register space when we are
  using 2 wire for device control, so we cache them instead.
 codec private data 
 adc 
 dac 
 Speaker Output Mixer 
 Mono Output Mixer 
 Mono output mixer 
 Speaker output mixer 
 Outputs 
 Microphone PGA 
 Boost Mixer 
 prescale - 1 
 The size in bits of the pll divide multiplied by 10
 Check if we need to round 
 Move down to proper range now rounding is done 
 Clock CODEC directly from MCLK 
 Turn off PLL 
 Run CODEC from PLL instead of MCLK 
  Configure WM8510 clock dividers.
 set masterslave audio interface 
 interface format 
 clock inversion 
 bit size 
 filter coefficient 
 liam need to make this lower power with dapm 
 VMID 50k 
 Initial cap charge at VMID 5k 
 VMID 500k 
 CONFIG_SPI_MASTER 
 SPDX-License-Identifier: GPL-2.0-only
  wm_hubs.c  --  WM89934 common code
  Copyright 2009-12 Wolfson Microelectronics plc
  Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
 Trigger the command 
 If we're going via the mixer we'll need to do additional checks 
	 Different chips in the family support different readback
	  methods.
  Startup calibration of the DC servo
	 If we're using a digital only path and have a previously
 Set for 32 series updates 
 Apply correction to DC servo result 
 HPOUT1R 
 HPOUT1L 
 Do it 
	 Save the callibrated offset if we're in class W mode and
  Update the DC servo calibration on gain changes
	 If we're applying an offset correction then updating the
 Only need to do this if the outputs are active 
 Enable the headphone amp 
 Enable the second stage 
 Latch volume update bits & default ZC on 
 Enable the line outputs while we power up 
 Clamp the inputs to VMID while we ramp to charge caps 
 Turn off any unneeded single ended outputs 
 Remove the input clamps 
 SPDX-License-Identifier: GPL-2.0-only
  PCM3168A codec i2c driver
  Copyright (C) 2015 Imagination Technologies Ltd.
  Author: Damien Horsley <Damien.Horsley@imgtec.com>
 SPDX-License-Identifier: GPL-2.0-only
  max98095.c -- MAX98095 ALSA SoC Audio driver
  Copyright 2011 Maxim Integrated Products
 0F 
 10 
 11 
 12 
 13 
 14 
 15 
 16 
 17 
 18 
 19 
 1A 
 1B 
 1C 
 1D 
 1E 
 1F 
 20 
 21 
 22 
 23 
 24 
 25 
 26 
 27 
 28 
 29 
 2A 
 2B 
 2C 
 2D 
 2E 
 2F 
 30 
 31 
 32 
 33 
 34 
 35 
 36 
 37 
 38 
 39 
 3A 
 3B 
 3C 
 3D 
 3E 
 3F 
 40 
 41 
 42 
 43 
 44 
 45 
 46 
 47 
 48 
 49 
 4A 
 4B 
 4C 
 4D 
 4E 
 4F 
 50 
 51 
 52 
 53 
 54 
 55 
 56 
 57 
 58 
 59 
 5A 
 5B 
 5C 
 5D 
 5E 
 5F 
 60 
 61 
 62 
 63 
 64 
 65 
 66 
 67 
 68 
 69 
 6A 
 6B 
 6C 
 6D 
 6E 
 6F 
 70 
 71 
 72 
 73 
 74 
 75 
 76 
 77 
 78 
 79 
 7A 
 7B 
 7C 
 7D 
 7E 
 7F 
 80 
 81 
 82 
 83 
 84 
 85 
 86 
 87 
 88 
 89 
 8A 
 8B 
 8C 
 8D 
 8E 
 8F 
 90 
 91 
 92 
 93 
 94 
 95 
 96 
 97 
 FF 
  Load equalizer DSP coefficient configurations registers
 Load the base register address 
 Add the band address offset, note adjustment for word address 
 Step through the registers and coefs 
  Load biquad filter coefficient configurations registers
 Load the base register address 
 Add the band address offset, note adjustment for word address 
 Step through the registers and coefs 
 Left speaker mixer switch 
 Right speaker mixer switch 
 Left headphone mixer switch 
 Right headphone mixer switch 
 Receiver earpiece mixer switch 
 Left lineout mixer switch 
 Right lineout mixer switch 
 Left ADC mixer switch 
 Right ADC mixer switch 
  The line inputs are stereo inputs with the left and right
  channels sharing a common PGA power control signal.
  The stereo line out mixer outputs to two stereo line outs.
  The 2nd pair has a separate set of enables.
 Left headphone output mixer 
 Right headphone output mixer 
 Left speaker output mixer 
 Right speaker output mixer 
 EarpieceReceiver output mixer 
 Left Lineout output mixer 
 Right lineout output mixer 
 Left ADC input mixer 
 Right ADC input mixer 
 Inputs 
 codec mclk clock divider coefficients 
 Configure NI when operating as master 
 Update sample rate mode 
 Configure NI when operating as master 
 Update sample rate mode 
 Configure NI when operating as master 
 Update sample rate mode 
 Requested clock frequency is already setup 
	 Setup clocks for slave mode, and using the PLL
	  PSCLK = 0x01 (when master clk is 10MHz to 20MHz)
	          0x02 (when master clk is 20MHz to 40MHz)..
	          0x03 (when master clk is 40MHz to 60MHz)..
 Slave mode PLL 
 Set to master mode 
 Slave mode PLL 
 Set to master mode 
 Slave mode PLL 
 Set to master mode 
		
		  SND_SOC_BIAS_PREPARE is called while preparing for a
		  transition to ON or away from ON. If current bias_level
		  is SND_SOC_BIAS_ON, then it is preparing for a transition
		  away from ON. Disable the clock in that case, otherwise
		  enable it.
 Find the selected configuration with nearest sample rate 
 Disable filter while configuring, and save current onoff state 
 Restore the original onoff state 
	 Setup an array of texts for the equalizer enum.
	  This is based on Mark Brown's equalizer driver code.
 Expand the array 
 Store the new entry 
 Now point the soc_enum to .texts array items 
 Find the selected configuration with nearest sample rate 
 Disable filter while configuring, and save current onoff state 
 Restore the original onoff state 
	 Setup an array of texts for the biquad enum.
	  This is based on Mark Brown's equalizer driver code.
 Expand the array 
 Store the new entry 
 Now point the soc_enum to .texts array items 
 Configure mic for analogdigital mic mode 
 Configure equalizers 
 Configure bi-quad filters 
 Read the Jack Status Register 
 If ddone is not set, then detection isn't finished yet 
 if hp, check its bit, and if set, clear it 
 if mic, check its bit, and if set, clear it 
 configure auto detection to be enabled 
 configure auto detection to be disabled 
 only progress if we have at least 1 jack pointer 
 enable interrupts for headphone jack detection 
	 Gracefully reset the DSP core and the codec hardware
	 Reset to hardware default for registers, as there is not
 reset the codec, the DSP core, and disable all interrupts 
 initialize private data 
 register an audio interrupt 
 take the codec out of the shut down 
 SPDX-License-Identifier: GPL-2.0-only
  wm8523.c  --  WM8523 ALSA SoC Audio driver
  Copyright 2009 Wolfson Microelectronics plc
  Author: Mark Brown <broonie@opensource.wolfsonmicro.com>
 codec private data 
 R2 - PSCTRL1 
 R3 - AIF_CTRL1 
 R4 - AIF_CTRL2 
 R5 - DAC_CTRL3 
 R6 - DAC_GAINL 
 R7 - DAC_GAINR 
 R8 - ZERO_DETECT 
	 The set of sample rates that can be supported depends on the
	  MCLK supplied to the CODEC - enforce this.
 Find a supported LRCLK ratio 
 Should never happen, should be handled by constraints 
 Find a fs->bclk ratio 
		 Check that it's a standard rate since core can't
		  cope with others and having the odd rates confuses
		  constraint matching.
 Need at least one supported rate... 
 Full power on 
 Sync back defaultcached values 
 Initial power up 
 Power up to mute 
 The chip runs through the power down sequence for us. 
 Mono modes not yet supported 
 Change some default settings - latch VU and enable ZC 
 SPDX-License-Identifier: GPL-2.0-only
  tas2552.c - ALSA SoC Texas Instruments TAS2552 Mono Audio Amplifier
  Copyright (C) 2014 Texas Instruments Incorporated -  https:www.ti.com
  Author: Dan Murphy <dmurphy@ti.com>
 vbat voltage 
 IO Voltage 
 Analog DAC Voltage 
 Input mux controls 
 MUX Controls 
 By pass the PLL configuration 
		 Fill in the PLL control registers for J & D
		  pll_clk = (.5  pll_clkin  J.D)  2^p
		  Need to fill in J and D here based on incoming freq
 Will clear the PLL_BYPASS bit 
 Restore PLL status 
 TDM slot selection only valid in DSP_A_B mode 
 Configure data delay 
 out of range PLL_CLKIN, fall back to use BCLK 
 bit 4:5 in the register 
 bit 0:1 in the register 
 TDM based on DSP mode requires slots to be adjacent 
 DOUT in high-impedance on inactive bit clocks 
 Formats supported by TAS2552 driver. 
 TAS2552 dai structure. 
  DAC digital volumes. From -7 to 24 dB in 1 dB steps
 SPDX-License-Identifier: GPL-2.0-or-later
  Load Analog Devices SigmaStudio firmware files
  Copyright 2009-2014 Analog Devices Inc.
 safeload loads up to 20 bytes in a atomic operation 
 Normal ASCII characters are valid 
 Make sure there are no non-displayable characaters in the string 
	
	  Readbacks doesn't work with non-volatile controls, since the
	  firmware updates the control value without driver interaction. Mark
	  the readbacks to ensure that the values are not cached.
 We only allow one samplerates block per file 
	
	  Make sure that there is at least one chunk to avoid integer
	  underflows later on. Empty firmware is still valid though.
		
		  This can not overflow since if length is larger than the
		  maximum firmware size (0x4000000) we'll error out earilier.
  Returns a negative error value in case of an error, 0 if processing of
  the firmware should be stopped after this action, 1 otherwise.
 first load the blob 
 then verify the header 
	
	  Reject too small or unreasonable large files. The upper limit has been
	  chosen a bit arbitrarily, but it should be enough for all practical
	  purposes and having the limit makes it easier to avoid integer
	  overflows later in the loading process.
  devm_sigmadsp_init() - Initialize SigmaDSP instance
  @dev: The parent device
  @ops: The sigmadsp_ops to use for this instance
  @firmware_name: Name of the firmware file to load
  Allocates a SigmaDSP instance and loads the specified firmware file.
  Returns a pointer to a struct sigmadsp on success, or a PTR_ERR() on error.
 All samplerates are supported 
  sigmadsp_attach() - Attach a sigmadsp instance to a ASoC component
  @sigmadsp: The sigmadsp instance to attach
  @component: The component to attach to
  Typically called in the components probe callback.
  Note, once this function has been called the firmware must not be released
  until after the ALSA snd_card that the component belongs to has been
  disconnected, even if sigmadsp_attach() returns an error.
  sigmadsp_setup() - Setup the DSP for the specified samplerate
  @sigmadsp: The sigmadsp instance to configure
  @samplerate: The samplerate the DSP should be configured for
  Loads the appropriate firmware program and parameter memory (if not already
  loaded) and enables the controls for the specified samplerate. Any control
  parameter changes that have been made previously will be restored.
  Returns 0 on success, a negative error code otherwise.
  sigmadsp_reset() - Notify the sigmadsp instance that the DSP has been reset
  @sigmadsp: The sigmadsp instance to reset
  Should be called whenever the DSP has been reset and parameter and program
  memory need to be re-loaded.
  sigmadsp_restrict_params() - Applies DSP firmware specific constraints
  @sigmadsp: The sigmadsp instance
  @substream: The substream to restrict
  Applies samplerate constraints that may be required by the firmware Should
  typically be called from the CODECcomponent drivers startup callback.
  Returns 0 on success, a negative error code otherwise.
 SPDX-License-Identifier: GPL-2.0-only
  ALSA SoC TLV320AIC23 codec driver SPI interface
  Author:      Arun KS, <arunks@mistralsolutions.com>
  Copyright:   (C) 2008 Mistral Solutions Pvt Ltd.,
  Based on soundsoccodecswm8731.c by Richard Purdie
 SPDX-License-Identifier: GPL-2.0-only
  rt5659.c  --  RT5659RT5658 ALSA SoC audio codec driver
  Copyright 2015 Realtek Semiconductor Corp.
  Author: Bard Liao <bardliao@realtek.com>
 Interface data select 
 MICBIAS1 and Mic Det Power for button detect
 MICBIAS1 and Mic Det Power for button detect
  rt5659_headset_detect - Detect headset.
  @component: SoC audio component device.
  @jack_insert: Jack insert or not.
  Detect whether is headset or not when jack inserted.
  Returns detect status.
 jack in 
 jack was out, report jack type 
 jack is already in, report button event 
			
			  rt5659 can report three kinds of button behavior,
			  one click, double click and hold. However,
			  currently we will report button pressedreleased
			  event. So all the three button behaviors are
			  treated as button pressed.
 unpressed 
 button release or spurious interrput
 jack out 
 headphone jack 
 mic jack 
 Speaker Output Volume 
 Headphone Output Volume 
 Mono Output Volume 
 Output Volume 
 DAC Digital Volume 
 IN1IN2IN3IN4 Volume 
 INLINR Volume Control 
 ADC Digital Volume Control 
 ADC Boost Volume Control 
  set_dmic_clk - Set parameter of dmic.
  @w: DAPM widget.
  @kcontrol: The kcontrol of this widget.
  @event: Event id.
  Choose dmic clock between 1MHz and 3MHz.
  It is better for clock to approximate 3MHz.
 Depop 
 I2S_Pre_Div1 should be 1 in asrc mode 
 Digital Mixer 
 Analog Input Mixer 
DAC L2, DAC R2
MX-1B [6:4], MX-1B [2:0]
 STO1 ADC1 Source 
 MX-26 [13] 
 STO1 ADC Source 
 MX-26 [12] 
 STO1 ADC2 Source 
 MX-26 [11] 
 STO1 DMIC Source 
 MX-26 [8] 
 MONO ADC L2 Source 
 MX-27 [12] 
 MONO ADC L1 Source 
 MX-27 [11] 
 MONO ADC L Source, MONO ADC R Source
 MX-27 [10:9], MX-27 [2:1] 
 MONO DMIC L Source 
 MX-27 [8] 
 MONO ADC R2 Source 
 MX-27 [4] 
 MONO ADC R1 Source 
 MX-27 [3] 
 MONO DMIC R Source 
 MX-27 [0] 
 DAC R1 Source, DAC L1 Source
 MX-29 [11:10], MX-29 [9:8]
 DAC Digital Mixer L Source, DAC Digital Mixer R Source
 MX-2C [6], MX-2C [4]
 Analog DAC L1 Source, Analog DAC R1 Source
 MX-2D [3], MX-2D [2]
 Analog DAC LR Source, Analog DAC R2 Source
 MX-2D [1], MX-2D [0]
 Interface2 ADC Data Input
 MX-2F [13:12] 
 Interface3 ADC Data Input
 MX-2F [1:0] 
 PDM 1 LR
 MX-31 [15] [13] 
 SPDIF Output source
 MX-36 [1:0] 
 I2S1 TDM ADCDAT Source 
 MX-78[4:0] 
 Out Volume Switch 
 Out Switch 
Add delay to avoid pop noise
 ASRC 
 Input Side 
 Input Lines 
 Boost 
 Input Volume 
 REC Mixer 
 ADCs 
 ADC Mux 
 ADC Mixer 
 ADC PGA 
 Digital Interface 
 Digital Interface Select 
 Audio Interface 
 Output Side 
 DAC mixer before sound effect  
 DAC channel Mux 
 DAC Mixer 
 DACs 
 OUT Mixer 
 Output Volume 
 SPOMONOHPOLOUT 
 PDM 
 SPDIF 
 Output Lines 
PLL
ASRC
 Calibrate HPO Start 
 Fine tune HP Performance 
 Enalbe K ADC Power And Clock 
 K Headphone 
 Manual K ADC Offset 
 Manual K Internal Path Offset 
 Calibrate HPO End 
 Calibrate SPO Start 
 Enalbe K ADC Power And Clock 
 Start Calibration 
 Calibrate SPO End 
 Calibrate MONO Start 
 MONO NG2 GAIN 5dB 
 Start Calibration 
 Calibrate MONO End 
 Power Off 
 Sleep for 300 ms miniumum 
 Check if MCLK provided 
 Otherwise mark the mclk pointer to NULL 
 line in diff mode
 DMIC pin
 Enable IRQ output for GPIO1 pin any way 
 SPDX-License-Identifier: GPL-2.0-or-later
  ad1980.c  --  ALSA Soc AD1980 codec support
  Copyright:	Analog Devices Inc.
  Author:	Roy Huang <roy.huang@analog.com>
  		Cliff Cai <cliff.cai@analog.com>
  WARNING:
  Because Analog Devices Inc. discontinued the ad1980 sound chip since
  Sep. 2009, this ad1980 driver is not maintained, tested and supported
  by ADI now.
		
		  Set bit 16slot in register 74h, then every slot will has only
		  16 bits. This command is sent out in 20bit mode, in which
		  case the first nibble of data is eaten by the addr. (Tag is
		  always 16 bit)
 unmute captures and playbacks volume 
power on LFECENTERSurround DACs
 SPDX-License-Identifier: GPL-2.0
 Audio driver for AK4458 DAC
 Copyright (C) 2016 Asahi Kasei Microdevices Corporation
 Copyright 2018 NXP
 AK4458 Codec Private Data 
 SSLOW, SD, SLOW bits 
 sampling rate 
 For ak4497 
	0x00	AK4458_00_CONTROL1	
	0x01	AK4458_01_CONTROL2	
	0x02	AK4458_02_CONTROL3	
	0x03	AK4458_03_LCHATT	
	0x04	AK4458_04_RCHATT	
	0x05	AK4458_05_CONTROL4	
	0x06	AK4458_06_DSD1		
	0x07	AK4458_07_CONTROL5	
	0x08	AK4458_08_SOUND_CONTROL	
	0x09	AK4458_09_DSD2		
	0x0A	AK4458_0A_CONTROL6	
	0x0B	AK4458_0B_CONTROL7	
	0x0C	AK4458_0C_CONTROL8	
	0x0D	AK4458_0D_CONTROL9	
	0x0E	AK4458_0E_CONTROL10	
	0x0F	AK4458_0F_L2CHATT	
	0x10	AK4458_10_R2CHATT	
	0x11	AK4458_11_L3CHATT	
	0x12	AK4458_12_R3CHATT	
	0x13	AK4458_13_L4CHATT	
	0x14	AK4458_14_R4CHATT	
  Volume control:
  from -127 to 0 dB in 0.5 dB steps (mute instead of -127.5 dB)
  DEM1 bit DEM0 bit Mode
  0 0 44.1kHz
  0 1 OFF (default)
  1 0 48kHz
  1 1 32kHz
  SSLOW, SD, SLOW bits Digital Filter Setting
  0, 0, 0 : Sharp Roll-Off Filter
  0, 0, 1 : Slow Roll-Off Filter
  0, 1, 0 : Short delay Sharp Roll-Off Filter
  0, 1, 1 : Short delay Slow Roll-Off Filter
  1, ,  : Super Slow Roll-Off Filter
  DZFB: Inverting Enable of DZF
  0: DZF goes H at Zero Detection
  1: DZF goes L at Zero Detection
  SC1-0 bits: Sound Mode Setting
  0 0 : Sound Mode 0
  0 1 : Sound Mode 1
  1 0 : Sound Mode 2
  1 1 : Reserved
 FIR2-0 bits: FIR Filter Mode Setting 
 ATS1-0 bits Attenuation Speed 
 DIF2 bit Audio Interface Format Setting(BICK fs) 
 write SD bit 
 write SLOW bit 
 write SSLOW bit 
 ak4458 dapm widgets 
pw
pw
pw
pw
 ak4497 controls 
 ak4497 dapm widgets 
 ak4497 dapm routes 
 calculate bit clock 
 Master Clock Frequency Auto Setting Mode Enable 
	
	  Enabledisable Daisy Chain if in TDM mode and the number of played
	  channels is bigger than the maximum supported number of channels
 Consumer Mode 
 Provider Mode is not supported 
 DSD mode 
 External Mute ON 
 ACKS bit = 1; 10000000 
 CONFIG_PM 
 Optional property for ak4497 
 SPDX-License-Identifier: GPL-2.0-only
  Nuvoton NAU8825 audio codec driver
  Copyright 2015 Google Chromium project.
   Author: Anatol Pomozov <anatol@chromium.org>
  Copyright 2015 Nuvoton Technology Corp.
   Co-author: Meng-Huang Kuo <mhkuo@nuvoton.com>
 cross talk suppression detection 
 the maximum frequency of CLK_ADC and CLK_DAC 
 scaling for mclk from sysclk_src output 
 ratio for input clk freq 
 over sampling rate 
 OSR 64, SRC 14 
 OSR 256, SRC 1 
 OSR 128, SRC 12 
 OSR 32, SRC 18 
 OSR 32, SRC 18 
 OSR 64, SRC 14 
 OSR 128, SRC 12 
 OSR 256, SRC 1 
 register backup table when cross talk detection 
  nau8825_sema_acquire - acquire the semaphore of nau88l25
  @nau8825:  component to register the codec private data with
  @timeout: how long in jiffies to wait before failure or zero to wait
  until release
  Attempts to acquire the semaphore with number of jiffies. If no more
  tasks are allowed to acquire the semaphore, calling this function will
  put the task to sleep. If the semaphore is not released within the
  specified number of jiffies, this function returns.
  If the semaphore is not released within the specified number of jiffies,
  this function returns -ETIME. If the sleep is interrupted by a signal,
  this function will return -EINTR. It returns 0 if the semaphore was
  acquired successfully.
  Acquires the semaphore without jiffies. Try to acquire the semaphore
  atomically. Returns 0 if the semaphore has been acquired successfully
  or 1 if it cannot be acquired.
  nau8825_sema_release - release the semaphore of nau88l25
  @nau8825:  component to register the codec private data with
  Release the semaphore which may be called from any context and
  even by tasks which have never called down().
  nau8825_sema_reset - reset the semaphore for nau88l25
  @nau8825:  component to register the codec private data with
  Reset the counter of the semaphore. Call this function to restart
  a new round task management.
  nau8825_hpvol_ramp - Ramp up the headphone volume change gradually to target level.
  @nau8825:  component to register the codec private data with
  @vol_from: the volume to start up
  @vol_to: the target volume
  @step: the volume span to move on
  The headphone volume is from 0dB to minimum -54dB and -1dB per step.
  If the volume changes sharp, there is a pop noise heard in headphone. We
  provide the function to ramp up the volume up or down by delaying 10ms
  per step.
 only handle volume from 0dB to minimum -54dB 
  nau8825_intlog10_dec3 - Computes log10 of a value
  the result is round off to 3 decimal. This function takes reference to
  dvb-math. The source code locates as the following.
  Linuxdriversmediadvb-coredvb_math.c
  @value:  input for log10
  return log10(value)  1000
 first detect the msb (count begins at 0) 
	
	       now we use a logtable after the following method:
	 
	       log2(2^x  y)  2^24 = x  2^24 + log2(y)  2^24
	       where x = msb and therefore 1 <= y < 2
	       first y is determined by shifting the value left
	       so that msb is bit 31
	               0x00231f56 -> 0x8C7D5800
	       the result is y  2^31 -> "significand"
	       then the highest 9 bits are used for a table lookup
	       the highest bit is discarded because it's always set
	       the highest nine bits in our example are 100011000
	       so we would use the entry 0x18
	
	       last step we do is interpolation because of the
	       limitations of the log table the error is that part of
	       the significand which isn't used for lookup then we
	       compute the ratio between the error and the next table entry
	       and interpolate it between the log table entry used and the
	       next one the biggest error possible is 0x7fffff
	       (in our example it's 0x7D5800)
	       needed value for next table entry is 0x800000
	       so the interpolation is
	       (error  0x800000)  (logtable_next - logtable_current)
	       in the implementation the division is moved to the end for
	       better accuracy there is also an overflow correction if
	       logtable_next is 256
	
	       log10(x) = log2(x)  log10(2)
	
	       the result is round off to 3 decimal
  nau8825_xtalk_sidetone - computes cross talk suppression sidetone gain.
  @sig_org: orignal signal level
  @sig_cros: cross talk signal level
  The orignal and cross talk signal vlues need to be characterized.
  Once these values have been characterized, this sidetone value
  can be converted to decibel with the equation below.
  sidetone = 20  log (original signal level  crosstalk signal level)
  return cross talk sidetone gain
 Backup some register values to backup table 
	 Restore register values from backup table; When the driver restores
	  the headphone volume in XTALK_DONE state, it needs recover to
	  original level gradually with 3dB per step for less pop noise.
	  Otherwise, the restore should do ASAP.
 Ramping up the volume change to reduce pop noise 
 Enable power of DAC path 
	 Prevent startup click by letting charge pump to ramp up and
	  change bump enable
 Enable clock sync of DAC and DAC clock 
 Power up output driver with 2 stage 
 HP outputs not shouted to ground  
 Enable HP boost driver 
 Enable class G compare path to supply 1.8V or 0.9V. 
 Power up left ADC and raise 5dB than Vmid for Vref  
 Recover FLL default value 
 Enable internal VCO clock for detection signal generated 
	 Given specific clock frequency of internal clock to
	  generate signal.
 Backup those registers changed by cross talk detection 
 Config IIS as master to output signal by codec 
	 Ramp up headphone volume to 0dB to get better performance and
	  avoid pop noise in headphone.
 Config channel path and digital gain 
	 Config cross talk parameters and generate the 23Hz sine wave with
	  116 full scale of signal level for impedance measurement.
 RMS intrruption enable 
 Power up left and right DAC 
 Disable HP boost driver 
 HP outputs shouted to ground  
 Power down left and right DAC 
 Enable the TESTDAC and  disable LR HP impedance 
 Power down output driver with 2 stage 
 Disable clock sync of DAC and DAC clock 
 Disable charge pump ramp up function and change bump 
 Disable power of DAC path 
 Power down left ADC and restore voltage to Vmid 
 Enable internal VCO needed for interruptions 
 Clear cross talk parameters and disable 
 RMS intrruption disable 
 Recover default value for IIS 
 Restore value of specific register for cross talk 
 Apply ADC volume for better cross talk performance 
	 Disables JKTIP(HPL) DAC channel for right to left measurement.
	  Do it before sending signal in order to erase pop noise.
 Enable right headphone impedance 
 Enable left headphone impedance 
 Impedance measurement mode enable 
 Impedance measurement mode disable 
 The cross talk measurement function can reduce cross talk across the
  JKTIP(HPL) and JKR1(HPR) outputs which measures the cross talk signal
  level to determine what cross talk reduction gain is. This system works by
  sending a 23Hz -24dBV sine wave into the headset output DAC and through
  the PGA. The output of the PGA is then connected to an internal current
  sense which measures the attenuated 23Hz signal and passing the output to
  an ADC which converts the measurement to a binary code. With two separated
  measurement, one for JKR1(HPR) and the other JKTIP(HPL), measurement data
  can be separated read in IMM_RMS_L for HSR and HSL after each measurement.
  Thus, the measurement function has four states to complete whole sequence.
  1. Prepare state : Prepare the resource for detection and transfer to HPR
      IMM stat to make JKR1(HPR) impedance measure.
  2. HPR IMM state : Read out orignal signal level of JKR1(HPR) and transfer
      to HPL IMM state to make JKTIP(HPL) impedance measure.
  3. HPL IMM state : Read out cross talk signal level of JKTIP(HPL) and
      transfer to IMM state to determine suppression sidetone gain.
  4. IMM state : Computes cross talk suppression sidetone gain with orignal
      and cross talk signal level. Apply this gain and then restore codec
      configuration. Then transfer to Done state for ending.
		 In prepare state, set up clock, intrruption, DAC path, ADC
		  path and cross talk detection parameters for preparation.
 Trigger right headphone impedance detection 
		 In right headphone IMM state, read out right headphone
		  impedance measure result, and then start up left side.
 Disable then re-enable IMM mode to update 
 Trigger left headphone impedance detection 
		 In left headphone IMM state, read out left headphone
		  impedance measure result, and delay some time to wait
		  detection sine wave output finish. Then, we can calculate
		  the cross talk suppresstion side tone according to the LR
		  headphone imedance.
		 In impedance measure state, the orignal and cross talk
		  signal level vlues are ready. The side tone gain is deter-
		  mined with these signal level. After all, restore codec
		  configuration.
	 To determine the cross talk side tone gain when reach
	  the impedance measure state.
	 Delay jack report until cross talk detection process
	  completed. It can avoid application to do playback
	  preparation before cross talk detection is still working.
	  Meanwhile, the protection of the cross talk detection
	  is released.
	 If the crosstalk is eanbled and the process is on going,
	  the driver forces to cancel the crosstalk task and
	  restores the configuration to original status.
 Reset parameters for cross talk suppression function 
 Prevent startup click by letting charge pump to ramp up 
 Disables the TESTDAC to let DAC signal pass through. 
		 Set clock source to disable or internal clock before the
		  playback or capture end. Codec needs clock for Jack
		  detection and button press if jack inserted; otherwise,
		  the clock should be closed.
 programmable biquad filter 
 DAC Mux 0x33[9] and 0x34[9] 
	 ADC for button press detection. A dapm supply widget is used to
	  prevent dapm_power_widgets keeping the codec at SND_SOC_BIAS_ON
	  during suspend.
 HPOLR are ungrounded by disabling 16 Ohm pull-downs on playback 
 High current HPOLR boost driver 
 Class G operation control
	 CLK_DAC or CLK_ADC = OSR  FS
	  DAC or ADC clock frequency is defined as Over Sampling Rate (OSR)
	  multiplied by the audio sample rate (Fs). Note that the OSR and Fs
	  values must be selected such that the maximum frequency is less
	  than 6.144 MHz.
 make BCLK and LRC divde configuration if the codec as master. 
 get the bclk and fs ratio 
 Release the semaphore. 
 Release the semaphore. 
  nau8825_enable_jack_detect - Specify a jack for event reporting
  @component:  component to register the jack with
  @jack: jack to use to report headset and button events on
  After this function has been called the headset insertremove and button
  events will be routed to the given jack.  Jack can be null to stop
  reporting.
	 Ground HP Outputs[1:0], needed for headset auto detection
	  Enable Automatic MicGnd switching reading on insert interrupt[6]
	 return jack connection status according to jack insertion logic
	  active high or active low.
	 this will restart the entire jack detection process including MICGND
	  switching and create interrupts. We have to go from 0 to 1 and back
	  to 0 to restart.
	 Reset the intrruption status from rightmost bit if the corres-
	  ponding irq event occurs.
 Force to cancel the cross talk detection process 
 Detach 2kOhm Resistors from MICBIAS to MICGND12 
 ground HPLHPR, MICGRND12 
 Clear all interruption status 
	 Enable the insertion interruption, disable the ejection inter-
	  ruption, and then bypass de-bounce circuit.
 Disable ADC needed for interruptions at audo mode 
 Close clock for jack type detection at manual mode 
 Enable audo mode interruptions with internal clock. 
	 Enable headset jack type detection complete interruption and
	  jack ejection interruption.
 Enable internal VCO needed for interruptions 
 Enable ADC needed for interruptions 
	 Chip needs one FSCLK cycle in order to generate interruptions,
	  as we cannot guarantee one will be provided by the system. Turning
	  master mode on then off enables us to generate that FSCLK cycle
	  with a minimum of contention on the clock bus.
 Not bypass de-bounce circuit 
 Unmask all interruptions 
 Restart the jack detection process at auto mode 
 The chip supports up to 8 buttons, but ALSA defines only 6 buttons 
 The JKSLV and JKR2 all detected in high impedance headset 
 no mic 
 Unground MICGND1 
 Attach 2kOhm Resistor from MICBIAS to MICGND1 
 Attach SARADC to MICGND1 
 Unground MICGND2 
 Attach 2kOhm Resistor from MICBIAS to MICGND2 
 Attach SARADC to MICGND2 
 detect error case 
	 Leaving HPOLR grounded after jack insert by default. They will be
	  ungrounded as part of the widget power up sequence at the beginning
	  of playback to reduce pop.
		 upper 8 bits of the register are for short pressed keys,
		  lower 8 bits - for long pressed buttons
				 Apply the cross talk suppression in the
				  headset without high impedance.
					 Raise protection for cross talk de-
					  tection if no protection before.
					  The driver has to cancel the pro-
					  cess and restore changes if process
					  is ongoing when ejection.
 Startup cross talk detection process 
				 The cross talk suppression shouldn't apply
				  in the headset with high impedance. Thus,
				  relieve the protection raised before.
		 Record the interruption report event for driver to report
		  the event later. The jack report will delay until cross
		  talk detection process is done.
 crosstalk detection enable and process on going 
		 One more step to check GPIO status directly. Thus, the
		  driver can confirm the real insertion interruption because
		  the intrruption at manual mode has bypassed debounce
		  circuit which can get rid of unstable status.
 Turn off insertion interruption at manual mode 
			 Enable interruption for jack type detection at audo
			  mode which can detect microphone and jack type.
 clears the rightmost interruption 
	 Delay jack report until cross talk detection is done. It can avoid
	  application to do playback preparation when cross talk detection
	  process is still working. Otherwise, the resource like clock and
	  power will be issued by them at the same time and conflict happens.
 Enable short press and release interruptions 
 Latch IIC LSB value 
 Enable BiasVmid 
 VMID Tieoff 
 Disable Boost Driver, Automatic Short circuit protection enable 
 jkdet_polarity - 1  is for active-low 
 Pull up IRQ pin 
 Mask unneeded IRQs: 1 - disable, 0 - enable 
	 Default oversamplingdecimations settings are unusable
	  (audible hiss). Set it to something better.
 Disable DACRL power 
	 Enable TESTDAC. This sets the analog DAC inputs to a '0' input
	  signal to avoid any glitches due to power up transients in both
	  the analog and digital DAC circuit.
 CICCLP off 
 Class AB bias current to 2x, DAC Capacitor enable MSBLSB 
 Class G timer 64ms 
 DAC clock delay 2ns, VREF 
 Config LR channel 
 Disable short Frame Sync detection logic 
 Cancel and reset cross tak suppresstion detection funciton 
  nau8825_calc_fll_param - Calculate FLL parameters.
  @fll_in: external clock provided to codec.
  @fs: sampling rate.
  @fll_param: Pointer to structure of FLL parameters.
  Calculate FLL parameters to configure codec.
  Returns 0 for success or negative error code.
	 Ensure the reference clock frequency (FREF) is <= 13.5MHz by dividing
	  freq_in by 1, 2, 4, or 8 using FLL pre-scalar.
	  FREF = freq_in  NAU8825_FLL_REF_DIV_MASK
 Choose the FLL ratio based on FREF 
	 Calculate the frequency of DCO (FDCO) given freq_out = 256  Fs.
	  FDCO must be within the 90MHz - 124MHz or the FFL cannot be
	  guaranteed across the full range of operation.
	  FDCO = freq_out  2  mclk_src_scaling
	 Calculate the FLL 10-bit integer input and the FLL 16-bit fractional
	  input based on FDCO, FREF and FLL ratio.
 Make DSP operate at high speed for better performance. 
 FLL 16-bit fractional input 
 FLL 10-bit integer input 
 FLL pre-scaler 
 select divided VCO input 
 Disable free-running mode 
 set FLL loop filter enable and cutoff frequency at 500Khz 
 disable FLL loop filter and cutoff frequency 
 freq_out must be 256Fs in order to achieve the best performance 
 Make DSP operate as default setting for power saving. 
 Clock provided externally and disable internal VCO clock 
		 Acquire the semaphore to synchronize the playback and
		  interrupt handler. In order to avoid the playback inter-
		  fered by cross talk process, the driver make the playback
		  preparation halted until cross talk process finish.
 MCLK not changed by clock tree 
 Release the semaphore. 
			 Decrease the VCO frequency and make DSP operate
			  as default setting for power saving.
			 The clock turns off intentionally for power saving
			  when no headset connected.
		 Acquire the semaphore to synchronize the playback and
		  interrupt handler. In order to avoid the playback inter-
		  fered by cross talk process, the driver make the playback
		  preparation halted until cross talk process finish.
		 Higher FLL reference input frequency can only set lower
		  gain error, such as 0000 for input reference from MCLK
		  12.288Mhz.
 Release the semaphore. 
		 Acquire the semaphore to synchronize the playback and
		  interrupt handler. In order to avoid the playback inter-
		  fered by cross talk process, the driver make the playback
		  preparation halted until cross talk process finish.
		 If FLL reference input is from low frequency source,
		  higher error gain can apply such as 0xf which has
		  the most sensitive gain error correction threshold,
		  Therefore, FLL has the most accurate DCO to
		  target frequency.
 Release the semaphore. 
		 Acquire the semaphore to synchronize the playback and
		  interrupt handler. In order to avoid the playback inter-
		  fered by cross talk process, the driver make the playback
		  preparation halted until cross talk process finish.
		 If FLL reference input is from low frequency source,
		  higher error gain can apply such as 0xf which has
		  the most sensitive gain error correction threshold,
		  Therefore, FLL has the most accurate DCO to
		  target frequency.
 Release the semaphore. 
 Close clock when jack type detection at manual mode 
 Clear all interruption status 
	 Enable both insertion and ejection interruptions, and then
	  bypass de-bounce circuit.
 Setup codec configuration after resume 
 Reset the configuration of jack type for detection 
 Detach 2kOhm Resistors from MICBIAS to MICGND12 
 ground HPLHPR, MICGRND12 
 Cancel and reset cross talk detection funciton 
		 Turn off all interruptions before system shutdown. Keep the
		  interruption quiet before resume setup completes.
 Disable ADC needed for interruptions at audo mode 
 Power down codec power; don't suppoet button wakeup 
 The MCLK is managed externally or not used at all 
	 Initiate parameters, semaphore and work queue which are needed in
	  cross talk suppression measurment function.
 SPDX-License-Identifier: GPL-2.0-or-later
  DA9055 ALSA Soc codec driver
  Copyright (c) 2012 Dialog Semiconductor
  Tested on (Samsung SMDK6410 board + DA9055 EVB) using I2S and I2C
  Written by David Chen <david.chen@diasemi.com> and
  Ashish Chavan <ashish.chavan@kpitcummins.com>
 DA9055 register space 
 Status Registers 
 System Initialisation Registers 
 Input - Gain, Select and Filter Registers 
 Output - Gain, Select and Filter Registers 
 System Controller Registers 
 Control Registers 
 Configuration Registers 
 SR bit fields 
 REFERENCES bit fields 
 PLL_CTRL bit fields 
 AIF_CLK_MODE bit fields 
 AIF_CTRL bit fields 
 MIC_L_CTRL bit fields 
 MIC_R_CTRL bit fields 
 MIXIN_L_CTRL bit fields 
 MIXIN_R_CTRL bit fields 
 ADC_L_CTRL bit fields 
 ADC_R_CTRL bit fields 
 DAC_L_CTRL bit fields 
 DAC_R_CTRL bit fields 
 HP_L_CTRL bit fields 
 HP_R_CTRL bit fields 
 LINE_CTRL bit fields 
 MIXOUT_L_CTRL bit fields 
 MIXOUT_R_CTRL bit fields 
 MIC bias select bit fields 
 ALC_CIC_OP_LEVEL_CTRL bit fields 
 0 = slave, 1 = master 
 PLL divisor table 
 for MASTER mode, fs = 44.1Khz and its harmonics 
 MCLK=11.2896Mhz 
 MCLK=12Mhz 
 MCLK=12.288Mhz 
 MCLK=13Mhz 
 MCLK=13.5Mhz 
 MCLK=14.4Mhz 
 MCLK=19.2Mhz 
 MCLK=19.68Mhz 
 MCLK=19.8Mhz 
 for MASTER mode, fs = 48Khz and its harmonics 
 MCLK=11.2896Mhz 
 MCLK=12Mhz 
 MCLK=12.288Mhz 
 MCLK=13Mhz 
 MCLK=13.5Mhz 
 MCLK=14.4Mhz 
 MCLK=19.2Mhz 
 MCLK=19.68Mhz 
 MCLK=19.8Mhz 
 for SLAVE mode with SRM 
 MCLK=11.2896Mhz 
 MCLK=12Mhz 
 MCLK=12.288Mhz 
 MCLK=13Mhz 
 MCLK=13.5Mhz 
 MCLK=14.4Mhz 
 MCLK=19.2Mhz 
 MCLK=19.68Mhz 
 MCLK=19.8Mhz  
 Gain and Volume 
 -54dB to 15dB 
 -78dB to 12dB 
 0dB to 36dB 
 ADC and DAC high pass filter cutoff value 
 ADC and DAC voice mode (8kHz) high pass cutoff value 
 Gain ramping rate value 
 DAC noise gate setup time value 
 DAC noise gate rampup rate value 
 DAC noise gate rampdown rate value 
 DAC soft mute rate value 
 DAC routing select 
 MIC PGA Left source select 
 MIC PGA Right source select 
 ALC Input Signal Tracking rate select 
 ALC Attack Rate select 
 ALC Release Rate select 
 ALC Hold Time select 
 Select the left or right channel and capture data 
 Select middle 8 bits for read back from data register 
 Select top 8 bits for read back from data register 
		
		  While enabling ALC (or ALC sync mode), calibration of the DC
		  offsets must be done first
 Save current values from Mic control registers 
 Mute Mic PGA Left and Right 
 Save current values from ADC control registers 
 Enable ADC Left and Right 
 Calculate average for Left and Right data 
 Left Data 
 Right Data 
 Calculate DC offset 
 Restore original values of ADC control registers 
 Restore original values of Mic control registers 
 Volume controls 
 DAC Equalizer controls 
 High Pass Filter and Voice Mode controls 
 Mute controls 
 Zero Cross controls 
 Gain Ramping controls 
 DAC Noise Gate controls 
 DAC Invertion control 
 DMIC controls 
 ALC Controls 
	
	  Rate at which input signal envelope is tracked as the signal gets
	  larger
	
	  Rate at which input signal envelope is tracked as the signal gets
	  smaller
 DAPM Controls 
 Mic PGA Left Source 
 Mic PGA Right Source 
 In Mixer Left 
 In Mixer Right 
 DAC Left Source 
 DAC Right Source 
 Out Mixer Left 
 Out Mixer Right 
 Headphone Output Enable 
 Lineout Output Enable 
 DAPM widgets 
 Input Side 
 Input Lines 
 MUXs for Mic PGA source selection 
 Input PGAs 
 Input Mixers 
 ADCs 
 Output Side 
 MUXs for DAC source selection 
 AIF input 
 DACs 
 Output Mixers 
 Output Enable Switches 
 Output PGAs 
 Output Lines 
 DAPM audio route definition 
 Dest       Connecting Widget    source 
 Input path 
 Output path 
 Codec private data 
 Set DAI word length 
 Set AIF format 
 PLL Mode, Write actual FS 
		
		  Non-PLL Mode
		  When PLL is bypassed, chip assumes constant MCLK of
		  12.288MHz and uses sample rate value to divide this MCLK
		  to derive its sys clk. As sys clk has to be 256  Fs, we
		  need to write constant sample rate i.e. 48KHz.
 PLL Mode 
 PLL slave mode, enable PLL and also SRM 
 PLL master mode, only enable PLL 
 Non PLL Mode, disable PLL 
 Set DAI mode and Format 
 DA9055 in I2S Master Mode 
 DA9055 in I2S Slave Mode 
 Don't allow change of mode if PLL is enabled 
 Only I2S is supported 
 By default only 32 BCLK per WCLK is supported 
  da9055_set_dai_pll	: Configure the codec PLL
  @param codec_dai	: Pointer to codec DAI
  @param pll_id	: da9055 has only one pll, so pll_id is always zero
  @param fref		: Input MCLK frequency
  @param fout		: FsDM value
  @return int		: Zero for success, negative error code for error
  Note: Supported PLL input frequencies are 11.2896MHz, 12MHz, 12.288MHz,
 	 13MHz, 13.5MHz, 14.4MHz, 19.2MHz, 19.6MHz and 19.8MHz
 Disable PLL before setting the divisors 
 In slave mode, there is only one set of divisors 
 Search pll div array for correct divisors 
 Check fref, mode  and fout 
 All match, pick up divisors 
 Write PLL dividers 
 DAI operations 
 Playback Capabilities 
 Capture Capabilities 
 Enable VMID reference & master bias 
 Disable VMID reference & master bias 
 Enable all Gain Ramps 
	
	  There are two separate control bits for input and output mixers.
	  One to enable corresponding amplifier and other to enable its
	  output. As amplifier bits are related to power control, they are
	  being managed by DAPM while other (non power related) bits are
	  enabled here
 Set this as per your system configuration 
 Set platform data values 
 set mic bias source 
 set mic bias voltage 
  DO NOT change the device Ids. The naming is intentionally specific as both
  the CODEC and PMIC parts of this chip are instantiated separately as I2C
  devices (both have configurable I2C addresses, and are to all intents and
  purposes separate). As a result there are specific DA9055 Ids for CODEC
  and PMIC, which must be different to operate together.
 I2C codec control layer 
 SPDX-License-Identifier: GPL-2.0-only
 rt715-sdca.c -- rt715 ALSA SoC audio driver
 Copyright(c) 2020 Realtek Semiconductor Corp.
 SDCA VolumeBoost control 
 Capture switch 
 Volume Control 
 MIC Boost Control 
	
	  The first two indices of ADC Mux 2425 are routed to the same
	  hardware source. ie, ADC Mux 24 01 will both connect to MIC2.
	  To have a unique set of inputs, we skip the index1 of the muxes.
 Verb ID = 0x701h, nid = e->reg 
  Due to mux design for nid 24 (MUX_IN3)25 (MUX_IN4), connection index 0 and
  1 will be connected to the same dmic source, therefore we skip index 1 to
  avoid misunderstanding on usage of dapm routing.
 Use tx_mask or rx_mask to configure stream tag and set dma_data 
 Bus clock frequency 
	
	  Mark hw_init to false
	  HW init will be performed when device reports present
	
	  PM runtime is only enabled when a Slave reports as Attached
 set autosuspend parameters 
 update count of parent 'active' children 
 make sure the device does not suspend immediately 
 set clock selector = external 
 set GPIO_456 to be 3rd4th DMIC usage 
 DFLL Calibration trigger 
 trigger mode = VAD enable 
 SMPU-1 interrupt enable mask 
 Mark Slave initialization complete 
 SPDX-License-Identifier: GPL-2.0-only
  ADAV803 audio driver
  Copyright 2014 Analog Devices Inc.
 SPDX-License-Identifier: GPL-2.0-only
  cs35l34.c -- CS35l34 ALSA SoC audio driver
  Copyright 2016 Cirrus Logic, Inc.
  Author: Paul Handrigan <Paul.Handrigan@cirrus.com>
 Active-low reset GPIO 
 scan rx_mask for aud slot 
	 scan tx_mask: vmon(2 slots); imon (2 slots); vpmon (1 slot)
	  vbstmon (1 slot)
 disable vpmonvbstmon: enable later if set in tx_mask 
 disconnect {vp,vbst}_mon routes: eanble later if set in tx_mask
 configure VMON_TX_LOC 
 configure IMON_TX_LOC 
 configure VPMON_TX_LOC 
 configure VBSTMON_TX_LOC 
 Enable the relevant tx slot 
 MCLK, Sample Rate, adsp_rate 
 1 uH 
 1.2 uH 
 1.5uH 
 2.2uH 
 Set over temperature warning attenuation to 6 dB 
	 Set Power control registers 2 and 3 to have everything
	  powered down at initialization
 Set mute bit at startup 
 Set Platform Data 
 Boost Voltage has a maximum of 8V 
 Use VP 
 ack the irq by reading all status registers 
 error is no longer asserted; safe to reset 
 note: amp will re-calibrate on next resume 
 error is no longer asserted; safe to reset 
 error is no longer asserted; safe to reset 
 error is no longer asserted; safe to reset 
 Unmask critical interrupts 
 SPDX-License-Identifier: GPL-2.0-only
  wm8961.c  --  WM8961 ALSA SoC Audio driver
  Copyright 2009-10 Wolfson Microelectronics, plc
  Author: Mark Brown
  Currently unimplemented features:
   - ALC
 R0   - Left Input volume 
 R1   - Right Input volume 
 R2   - LOUT1 volume 
 R3   - ROUT1 volume 
 R4   - Clocking1 
 R5   - ADC & DAC Control 1 
 R6   - ADC & DAC Control 2 
 R7   - Audio Interface 0 
 R8   - Clocking2 
 R9   - Audio Interface 1 
 R10  - Left DAC volume 
 R11  - Right DAC volume 
 R14  - Audio Interface 2 
 R17  - ALC1 
 R18  - ALC2 
 R19  - ALC3 
 R20  - Noise Gate 
 R21  - Left ADC volume 
 R22  - Right ADC volume 
 R23  - Additional control(1) 
 R24  - Additional control(2) 
 R25  - Pwr Mgmt (1) 
 R26  - Pwr Mgmt (2) 
 R27  - Additional Control (3) 
 R28  - Anti-pop 
 R30  - Clocking 3 
 R32  - ADCL signal path 
 R33  - ADCR signal path 
 R40  - LOUT2 volume 
 R41  - ROUT2 volume 
 R47  - Pwr Mgmt (3) 
 R48  - Additional Control (4) 
 R49  - Class D Control 1 
 R51  - Class D Control 2 
 R56  - Clocking 4 
 R57  - DSP Sidetone 0 
 R58  - DSP Sidetone 1 
 R60  - DC Servo 0 
 R61  - DC Servo 1 
 R63  - DC Servo 3 
 R65  - DC Servo 5 
 R68  - Analogue PGA Bias 
 R69  - Analogue HP 0 
 R71  - Analogue HP 2 
 R72  - Charge Pump 1 
 R82  - Charge Pump B 
 R87  - Write Sequencer 1 
 R88  - Write Sequencer 2 
 R89  - Write Sequencer 3 
 R90  - Write Sequencer 4 
 R91  - Write Sequencer 5 
 R92  - Write Sequencer 6 
 R93  - Write Sequencer 7 
 R252 - General test 1 
  The headphone output supports special anti-pop sequences giving
  silent power up and power down.
 Make sure the output is shorted 
 Enable the charge pump 
 Enable the PGA 
 Enable the amplifier 
 Second stage enable 
 Enable the DC servo & trigger startup 
 Enable the output stage 
 Remove the short on the output stage 
 Short the output 
 Disable the output stage 
 Disable DC offset cancellation 
 Finish up 
 Disable the PGA 
 Disable the charge pump 
 Enable the PGA 
 Enable the amplifier 
 Disable the amplifier 
 Disable the PGA 
 Handle as a mono path for DCS 
 Values for CLK_SYS_RATE 
 Values for SAMPLE_RATE 
 Find the closest sample rate for the filters 
 Select a CLK_SYSfs ratio equal to or higher than required 
 Sloping stop-band filter is recommended for <= 24kHz 
	 This is all slightly unusual since we have no bypass paths
	  and the output amplifier structure means we can just slam
	  the biases straight up rather than having to ramp them
	  slowly.
 Enable bias generation 
 VMID=250k, VREF 
 VREF off 
 Bias generation off 
 VMID off 
 Enable class W 
	 Latch volume update bits (right channel only, we always
 Use soft mute by default 
	 Use automatic clocking mode by default; for now this is all
	  we support.
 This isn't volatile - readback doesn't correspond to write 
 SPDX-License-Identifier: GPL-2.0
  rt715-sdw.c -- rt715 ALSA SoC audio driver
  Copyright(c) 2019 Realtek Semiconductor Corp.
  ALC715 ASoC Codec Driver based Intel Dummy SdW codec driver
 i2c read 
 HD-A read 
 BRA 
 i2c debug 
 decoded HD-A 
 index registers 
 for R channel 
 index registers 
 for R channel 
 Readable registers 
 volatile register 
 Maximum number of register 
 Defaults 
 Total register space for SDW 
 Total number of bits in register 
 Maximum number of register 
 12 bits command 
 special case 
 get command 
 set command 
 7 bits payload 
 4 bits command 
 read 
 write 
 16 bits payload [15:8] 
 0x80: valid bit 
 Update the status 
	
	  Perform initialization only if slave status is present and
	  hw_init flag is false
 perform IO transfers required for Slave initialization 
 first we need to allocate memory for set bits in port lists 
 BITMAP: 01010000 
 BITMAP:  00000000 
 set the timeout values 
 wake-up event 
 Regmap Initialization 
 SPDX-License-Identifier: GPL-2.0-or-later
  CS4271 I2C audio driver
  Copyright (c) 2010 Alexander Sverdlin <subaparts@yandex.ru>
 SPDX-License-Identifier: GPL-2.0-only
  Driver for the PCM512x CODECs
  Author:	Mark Brown <broonie@kernel.org>
 		Copyright 2014 Linaro Ltd
 SPDX-License-Identifier: GPL-2.0-or-later
  da7219.c - DA7219 ALSA SoC Codec Driver
  Copyright (c) 2015 Dialog Semiconductor
  Author: Adam Thomson <Adam.Thomson.Opensource@diasemi.com>
  TLVs and Enums
 Input TLVs 
 Output TLVs 
 -77.25dB to 12dB 
 Input Enums 
 InputOutput Enums 
 Output Enums 
  Control Functions
 Locked Kcontrol calls 
 ALC 
 Save current state of mic control register 
 Save current state of input mixer control register 
 Save current state of input ADC control register 
 Enable then Mute MIC PGAs 
 Enable input mixers unmuted 
 Enable input filters unmuted 
 Perform auto calibration 
 If auto calibration fails, disable DC offset, hybrid ALC 
 Enable DC offset cancellation, hybrid mode 
 Restore input filter control register to original state 
 Restore input mixer control registers to original state 
 Restore MIC control registers to original states 
	
	  If ALC in operation and value of control has been updated,
	  make sure calibrated offsets are updated.
 Force ALC offset calibration if enabling ALC 
 ToneGen 
	
	  Frequency value spans two 8-bit registers, lower then upper byte.
	  Therefore we need to convert to host endianness here.
	
	  Frequency value spans two 8-bit registers, lower then upper byte.
	  Therefore we need to convert to little endian here to align with
	  HW registers.
  KControls
 Mics 
 Mixer Input 
 ADC 
 ALC 
 Input High-Pass Filters 
 Sidetone Filter 
 Tone Generator 
 Gain ramping 
 DAC High-Pass Filter 
 DAC 5-Band Equaliser 
 DAC Softmute 
 DAC Noise Gate 
 DACs 
 CP 
 Headphones 
  DAPM Mux Controls
  DAPM Mixer Controls
  DAPM Events
			
			  Delay only for first capture after bias enabled to
			  avoid possible DC offset related noise.
 Enable DAI clks for master mode 
 PC synchronised to DAI 
 Slave mode, if SRM not enabled no need for status checks 
 Check SRM has locked 
 PC free-running 
 Disable DAI clks if in master mode 
 Enable minimum gain on HP to avoid pops 
 Remove minimum gain on HP 
 Ensure nominal gain ramping for DAPM sequence 
 Restore previous gain ramp settings 
  DAPM Widgets
 Input Supplies 
 Inputs 
 Input PGAs 
 Input Filters 
 Tone Generator 
 Sidetone Input 
 Input Mixer Supply 
 Input Mixer 
 Input Muxes 
 DAI Supply 
 DAI 
 Output Muxes 
 Output Mixers 
 Sidetone Mixers 
 DACs 
 Output PGAs 
 Output Supplies 
 Outputs 
 PrePost Power 
  DAPM Mux Routes
  DAPM Mixer Routes
  DAPM audio route definition
 Input paths 
 Output paths 
  DAI operations
 Verify 2MHz - 54MHz MCLK provided, and set input divider 
 Configure PLL 
 Calculate dividers for PLL 
 Write PLL config & dividers 
 No channels enabled so disable TDM 
 Check we have valid slots 
	
	  Ensure we have a valid offset into the frame, based on slot width
	  and slot offset of first slot we're interested in.
	
	  If we're master, calculate & validate frame size based on slot info
	  provided as we have a limited set of rates available.
	
	  If we're master, then we have a limited set of BCLK rates we
	  support. For slave mode this isn't the case and the codec can detect
	  the BCLK rate automatically.
			
			  Rounding the rate here avoids failure trying to set a
			  new rate on an already enabled bclk. In that
			  instance this will just set the same rate as is
			  currently in use, and so should continue without
			  problem, as long as the BCLK rate is suitable for the
			  desired frame size.
  DTACPI
  Codec driver functions
 Enable MCLK for transition to ON state 
 Master bias 
 Remove MCLK 
 Only disable master bias if we're not a wake-up source 
 Get required supplies 
 Default to upper range 
 Determine VDDIO voltage provided 
 Enable main supplies 
	
	  We don't allow changing the parent rate as some BCLK rates can be
	  derived from multiple parent WCLK rates (BCLK rates are set as a
	  multiplier of WCLK in HW). We just do some rounding down based on the
	  parent WCLK rate set and find the appropriate multiplier of BCLK to
	  get the rounded down BCLK value.
 For DT platforms allocate onecell data for clock registration 
			
			  If we can, make MCLK the parent of WCLK to ensure
			  it's enabled as required.
 Make WCLK the parent of BCLK 
 For DT setup onecell data, otherwise create lookup 
 If we're using DT, then register as provider accordingly 
 CONFIG_COMMON_CLK 
 Mic Bias voltages 
		
		  Calculate delay required to compensate for DC offset in
		  Mic PGA, based on Mic Bias voltage.
 Mic 
  Regmap configs
 Regulator configuration 
 Disable audio paths if still active from previous start 
 Soft reset component 
 Update IO voltage level range based on supply level 
 Handle DTACPIPlatform data 
 Check if MCLK provided 
 Register CCF DAI clock control 
 Default PC counter to free-running 
 Default gain ramping 
 Default minimum gain on HP to avoid pops during DAPM sequencing 
 Default infinite tone gen, startstop by Kcontrol 
 Initialise AAD block 
 Supplies 
 Suspend AAD if we're not a wake-up source 
 Resume AAD if previously suspended 
  I2C layer
 Retrieve DTACPIPlatform data 
 AAD 
 SPDX-License-Identifier: GPL-2.0-only
  linuxsoundsocm8mhi6210_i2s.c - I2S IP driver
  Copyright (C) 2015 Linaro, Ltd
  Author: Andy Green <andy.green@linaro.org>
  This driver only deals with S2 interface (BT)
 deassert reset on ABB 
 enable clock before frequency division 
 enable codec working clock  == "codec bus clock" 
 deassert reset on codec  interface clock  working clock 
 not interested in i2s irqs 
 reset the stereo downlink fifo 
 mux 1112 = APB not i2s 
 BT R ch  0 = mixer op of DACR ch 
 BT L ch = 1 = mux 7 = "mixer output of DACL 
 enable S2 TX 
 disable S2 TX 
	
	  We don't actually set the hardware until the hw_params
	  call, but we need to validate the user input here.
 BT gets the I2S 
 clear loopback, set signed type and word length 
 set DAC and related units to correct rate 
 sentinel  }
 SPDX-License-Identifier: GPL-2.0
 Socionext UniPhier EVEA ADCDAC codec driver.
 Copyright (c) 2016-2017 Socionext Inc.
 ADAMV will hangup if EXIV reset is asserted 
 SPDX-License-Identifier: GPL-2.0
 Socionext UniPhier AIO ALSA driver for LD11LD20.
 Copyright (c) 2016-2018 Socionext Inc.
 for HDMI PCM In, Pin:AI1Dx 
 for SIF In, Pin:AI2Dx 
 for Line In, Pin:AI3Dx 
 for SPDIF In, Pin:AI1IEC 
 for Speaker, Pin:AO1Dx 
 for HDMI PCM, Pin:AO2Dx 
 for Line Out, Pin:LO2_x 
 for Headphone, Pin:HP1_x 
 for HW Sampling Rate Converter 
 for HW Sampling Rate Converter 2 
 for SPDIF Out, Pin:AO1IEC 
 for SPDIF Out, Pin:AO1IEC, Compress 
 SPDX-License-Identifier: GPL-2.0
 Socionext UniPhier AIO ALSA CPU DAI driver.
 Copyright (c) 2016-2018 Socionext Inc.
  find_volume - find volume supported HW port by HW port number
  @chip: the AIO chip pointer
  @oport_hw: HW port number, one of AUD_HW_XXXX
  Find AIO device from device list by HW port number. Volume feature is
  available only in Output and PCM ports, this limitation comes from HW
  specifications.
  Return: The pointer of AIO substream if successful, otherwise NULL on error.
  find_spec - find HW specification info by name
  @aio: the AIO device pointer
  @name: name of device
  @direction: the direction of substream, SNDRV_PCM_STREAM_
  Find hardware specification information from list by device name. This
  information is used for telling the difference of SoCs to driver.
  Specification list is array of 'struct uniphier_aio_spec' which is defined
  in each drivers (see: aio-i2s.c).
  Return: The pointer of hardware specification of AIO if successful,
  otherwise NULL on error.
  find_divider - find clock divider by frequency
  @aio: the AIO device pointer
  @pll_id: PLL ID, should be AUD_PLL_XX
  @freq: required frequency
  Find suitable clock divider by frequency.
  Return: The ID of PLL if successful, otherwise negative error value.
 SPDX-License-Identifier: GPL-2.0
 Socionext UniPhier AIO DMA driver.
 Copyright (c) 2016-2018 Socionext Inc.
 Skip channel that does not trigger 
  uniphier_aiodma_soc_register_platform - register the AIO DMA
  @pdev: the platform device
  Register and setup the DMA of AIO to transfer the sound data to device.
  This function need to call once at driver startup and need NOT to call
  unregister function.
  Return: Zero if successful, otherwise a negative value on error.
 SPDX-License-Identifier: GPL-2.0
 Socionext UniPhier AIO ALSA common driver.
 Copyright (c) 2016-2018 Socionext Inc.
  aio_iecout_set_enable - setup IEC output via SoC glue
  @chip: the AIO chip pointer
  @enable: false to stop the output, true to start
  Set enabled or disabled SPDIF signal output to out of SoC via AOnIEC pins.
  This function need to call at driver startup.
  The regmap of SoC glue is specified by 'socionext,syscon' optional property
  of DT. This function has no effect if no property.
  aio_chip_set_pll - set frequency to audio PLL
  @chip: the AIO chip pointer
  @pll_id: PLL
  @freq: frequency in Hz, 0 is ignored
  Sets frequency of audio PLL. This function can be called anytime,
  but it takes time till PLL is locked.
  Return: Zero if successful, otherwise a negative value on error.
 Not change 
  aio_chip_init - initialize AIO whole settings
  @chip: the AIO chip pointer
  Sets AIO fixed and whole device settings to AIO.
  This function need to call once at driver startup.
  The register area that is changed by this function is shared by all
  modules of AIO. But there is not race condition since this function
  has always set the same initialize values.
  aio_init - initialize AIO substream
  @sub: the AIO substream pointer
  Sets fixed settings of each AIO substreams.
  This function need to call once at substream startup.
  Return: Zero if successful, otherwise a negative value on error.
  aio_port_reset - reset AIO port block
  @sub: the AIO substream pointer
  Resets the digital signal inputoutput port block of AIO.
  aio_port_set_ch - set channels of LPCM
  @sub: the AIO substream pointer, PCM substream only
  Set suitable slot selecting to inputoutput port block of AIO.
  This function may return error if non-PCM substream.
  Return: Zero if successful, otherwise a negative value on error.
  aio_port_set_rate - set sampling rate of LPCM
  @sub: the AIO substream pointer, PCM substream only
  @rate: Sampling rate in Hz.
  Set suitable I2S format settings to inputoutput port block of AIO.
  Parameter is specified by hw_params().
  This function may return error if non-PCM substream.
  Return: Zero if successful, otherwise a negative value on error.
  aio_port_set_fmt - set format of I2S data
  @sub: the AIO substream pointer, PCM substream only
  This parameter has no effect if substream is I2S or PCM.
  Set suitable I2S format settings to inputoutput port block of AIO.
  Parameter is specified by set_fmt().
  This function may return error if non-PCM substream.
  Return: Zero if successful, otherwise a negative value on error.
  aio_port_set_clk - set clock and divider of AIO port block
  @sub: the AIO substream pointer
  Set suitable PLL clock divider and relational settings to
  inputoutput port block of AIO. Parameters are specified by
  set_sysclk() and set_pll().
  Return: Zero if successful, otherwise a negative value on error.
  aio_port_set_param - set parameters of AIO port block
  @sub: the AIO substream pointer
  @pass_through: Zero if sound data is LPCM, otherwise if data is not LPCM.
  This parameter has no effect if substream is I2S or PCM.
  @params: hardware parameters of ALSA
  Set suitable setting to inputoutput port block of AIO to process the
  specified in params.
  Return: Zero if successful, otherwise a negative value on error.
  aio_port_set_enable - start or stop of AIO port block
  @sub: the AIO substream pointer
  @enable: zero to stop the block, otherwise to start
  Start or stop the signal inputoutput port block of AIO.
  aio_port_get_volume - get volume of AIO port block
  @sub: the AIO substream pointer
  Return: current volume, range is 0x0000 - 0xffff
  aio_port_set_volume - set volume of AIO port block
  @sub: the AIO substream pointer
  @vol: target volume, range is 0x0000 - 0xffff.
  Change digital volume and perfome fade-outfade-in effect for specified
  output slot of port. Gained PCM value can calculate as the following:
    Gained = Original  vol  0x4000
  aio_if_set_param - set parameters of AIO DMA IF block
  @sub: the AIO substream pointer
  @pass_through: Zero if sound data is LPCM, otherwise if data is not LPCM.
  This parameter has no effect if substream is I2S or PCM.
  Set suitable setting to DMA interface block of AIO to process the
  specified in settings.
  Return: Zero if successful, otherwise a negative value on error.
  aio_oport_set_stream_type - set parameters of AIO playback port block
  @sub: the AIO substream pointer
  @pc: Pc type of IEC61937
  Set special setting to output port block of AIO to output the stream
  via SPDIF.
  Return: Zero if successful, otherwise a negative value on error.
 Do nothing 
  aio_src_reset - reset AIO SRC block
  @sub: the AIO substream pointer
  Resets the digital signal inputoutput port with sampling rate converter
  block of AIO.
  This function has no effect if substream is not supported rate converter.
  aio_src_set_param - set parameters of AIO SRC block
  @sub: the AIO substream pointer
  @params: hardware parameters of ALSA
  Set suitable setting to inputoutput port with sampling rate converter
  block of AIO to process the specified in params.
  This function has no effect if substream is not supported rate converter.
  Return: Zero if successful, otherwise a negative value on error.
 Wait for setup 
 Wait for setup 
 Wait for setup 
 Wait for setup 
 SPDX-License-Identifier: GPL-2.0
 Socionext UniPhier AIO Compress Audio driver.
 Copyright (c) 2017-2018 Socionext Inc.
 IEC frame type will be changed after received valid data 
 Size of AIO output format is double of IEC61937 
 Next data is Pc and Pd 
 Force overwrite IEC frame type 
 Size of AIO output format is double of IEC61937 
 SPDX-License-Identifier: GPL-2.0
 Socionext UniPhier AIO ALSA driver for PXs2.
 Copyright (c) 2018 Socionext Inc.
 for Line PCM In, Pin:AI1Dx 
 for SpeakerHeadphoneMic PCM In, Pin:AI2Dx 
 for HDMI PCM Out, Pin:AO1Dx (inner) 
 for Line PCM Out, Pin:AO2Dx 
 for SpeakerHeadphoneMic PCM Out, Pin:AO3Dx 
 for HDMI Out, Pin:AO1IEC 
 for HDMI Out, Pin:AO1IEC, Compress 
 for SPDIF Out, Pin:AO2IEC 
 for SPDIF Out, Pin:AO2IEC 
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (C) 2010, Lars-Peter Clausen <lars@metafoo.de>
 Playback 
 Capture 
 sentinel  }
 SPDX-License-Identifier: GPL-2.0-only
 soundsocrockchiprockchip_i2s.c
  ALSA SoC Audio Layer - Rockchip I2S Controller driver
  Copyright (c) 2014 Rockchip Electronics Co. Ltd.
  Author: Jianqun <jay.xu@rock-chips.com>
  Used to indicate the txrx status.
  I2S controller hopes to start the tx and rx together,
  also to stop them when they are both try to stop.
 txrx lock 
 Should wait for clear operation to finish 
 Should wait for clear operation to finish 
 Set source clock in Master mode 
 PCM delay 1 bit mode 
 PCM no delay mode 
 PCM delay 1 bit mode 
 PCM no delay mode 
 try to prepare related clocks 
 SPDX-License-Identifier: GPL-2.0-only
  Rockchip machine ASoC driver for RK3288 boards that have an HDMI and analog
  audio output
  Copyright (c) 2016, Collabora Ltd.
  Authors: Sjoerd Simons <sjoerd.simons@collabora.com>,
 	    Romain Perier <romain.perier@collabora.com>
 Enable Headset Jack detection 
 Set codecs as slave 
 SPDX-License-Identifier: GPL-2.0-only
  Rockchip PDM ALSA SoC Digital Audio Interface(DAI)  driver
  Copyright (C) 2017 Fuzhou Rockchip Electronics Co., Ltd
 size  width: 84 = 32 bytes 
 all channels share the single FIFO 
 SPDX-License-Identifier: GPL-2.0-only
 ALSA SoC Audio Layer - Rockchip I2STDM Controller driver
 Copyright (c) 2018 Rockchip Electronics Co. Ltd.
 Author: Sugar Zhang <sugar.zhang@rock-chips.com>
 Author: Nicolas Frattaroli <frattaroli.nicolas@gmail.com>
 The max channel 8  2 
 The mclk_tx_src is parent of mclk_tx 
 The mclk_rx_src is parent of mclk_rx 
	
	  The mclk_root0 and mclk_root1 are root parent and supplies for
	  the different FS.
	 
	  e.g:
	  mclk_root0 is VPLL0, used for FS=48000Hz
	  mclk_root1 is VPLL1, used for FS=44100Hz
 xfer lock 
  i2s_tdm_prepare_enable_mclk - prepare to enable all mclks, disable them on
 				 failure.
  @i2s_tdm: rk_i2s_tdm_dev struct
  This function attempts to enable all mclk clocks, but cleans up after
  itself on failure. Guarantees to balance its calls.
  Returns success (0) or negative errno.
  Makes sure that both tx and rx are reset at the same time to sync lrck
  when clk_trcm > 0.
	 This is technically race-y.
	 
	  In an ideal world, we could atomically assert both resets at the
	  same time, through an atomic bulk reset API. This API however does
	  not exist, so what the downstream vendor code used to do was
	  implement half a reset controller here and require the CRU to be
	  passed to the driver as a device tree node. Violating abstractions
	  like that is bad, especially when it influences something like the
	  bindings which are supposed to describe the hardware, not whatever
	  workarounds the driver needs, so it was dropped.
	 
	  In practice, asserting the resets one by one appears to work just
	  fine for playback. During duplex (playback + capture) operation,
	  this might become an issue, but that should be solved by the
	  implementation of the aforementioned API, not by shoving a reset
	  controller into an audio driver.
 Wait on the clear operation to finish 
 only used when clk_trcm > 0 
 PCM no delay mode 
 PCM delay 1 mode 
 mclk_rx is also ok. 
 Put set mclk rate into rockchip_i2s_tdm_set_mclk() 
 SPDX-License-Identifier: GPL-2.0-only
 soundsocrockchiprk_spdif.c
  ALSA SoC Audio Layer - Rockchip I2S Controller driver
  Copyright (c) 2014 Rockchip Electronics Co. Ltd.
  Author: Jianqun <jay.xu@rock-chips.com>
  Copyright (c) 2015 Collabora Ltd.
  Author: Sjoerd Simons <sjoerd.simons@collabora.co.uk>
 Set clock and calculate divider 
		 Select the 8 channel SPDIF solution on RK3288 as
		  the 2 channel one does not appear to work
 SPDX-License-Identifier: GPL-2.0-only
  Rockchip machine ASoC driver for boards using a MAX90809 CODEC.
  Copyright (c) 2014, ROCKCHIP CORPORATION.  All rights reserved.
 Headset jack detection DAPM pins 
	
	  The jack has already been created in the rk_98090_headset_init()
	  function.
 HDMI codec dai does not need to set sysclk. 
	
	  Set period size to 240 because pl330 has issue
	  dealing with larger period in stress testing.
 enable jack detection 
 max98090 dai_link 
 set max98090 as slave 
 HDMI codec dai_link 
 max98090 and HDMI codec dai_link 
 set max98090 as slave 
 Enable Headset and 4 Buttons Jack detection 
 Parse DTS for I2S controller. 
	
	  Find the card to use based on the presences of audio codec
	  and hdmi codec in device property. Set their of_node accordingly.
 Parse headset detection codec. 
 Parse card name. 
 register the soc card 
 SPDX-License-Identifier: GPL-2.0-only
  Rockchip machine ASoC driver for boards using a RT5645RT5650 CODEC.
  Copyright (c) 2015, ROCKCHIP CORPORATION.  All rights reserved.
 Input Lines 
 Output Lines 
 Enable Headset and 4 Buttons Jack detection 
 set rt5645 as slave 
 register the soc card 
 SPDX-License-Identifier: GPL-2.0-only
  Rockchip machine ASoC driver for boards using MAX98357ART5514DA7219
  Copyright (c) 2016, ROCKCHIP CORPORATION.  All rights reserved.
 Headset jack detection DAPM pins 
 Wait for DMIC stable 
 in bypass mode, the mclk has to be one of the frequencies below 
 We need default MCLK and PLL settings for the accessory detection 
 Enable Headset and 4 Buttons Jack detection 
 Wait for DMIC stable 
 set da7219 as slave 
 set max98357a as slave 
 set rt5514 as slave 
 RT5514 DSP for voice wakeup via spi bus 
 Output 
 Output 
 Input 
 Input 
 Output 
 Input 
 Set DMIC wakeup delay 
 SPDX-License-Identifier: GPL-2.0-only
  soc-acpi-intel-hsw-bdw-match.c - tables and support for ACPI enumeration.
  Copyright (c) 2017, Intel Corporation.
 SPDX-License-Identifier: GPL-2.0-only
  soc-acpi-intel-icl-match.c - tables and support for ICL ACPI enumeration.
  Copyright (c) 2018, Intel Corporation.
 4 active links required 
 3 active links required 
 rt700 connected on link0 
 SPDX-License-Identifier: GPL-2.0-only
  soc-acpi-intel-skl-match.c - tables and support for SKL ACPI enumeration.
  Copyright (c) 2018, Intel Corporation.
 SPDX-License-Identifier: GPL-2.0-only
  Intel Smart Sound Technology (SST) DSP Core Driver
  Copyright (C) 2013, Intel Corporation. All rights reserved.
 Internal generic low-level SST IO functions - can be overidden 
 Public API 
 This is for registers bits with attribute RWC 
 This is for registers bits with attribute RWC 
	
	  split the loop into sleeps of varying resolution. more accurately,
	  the range of wakeups are:
	  Phase 1(first 5ms): min sleep 0.5ms; max sleep 1ms.
	  Phase 2:( 5ms to 10ms) : min sleep 0.5ms; max sleep 10ms
	  (usleep_range (500, 1000) and usleep_range(5000, 10000) are
	  both possible in this phase depending on whether k > 10 or not).
	  Phase 3: (beyond 10 ms) min sleep 5ms; max sleep 10ms.
 Module information 
 SPDX-License-Identifier: GPL-2.0-only
  soc-acpi-intel-cht-match.c - tables and support for CHT ACPI enumeration.
  Copyright (c) 2017, Intel Corporation.
 Cherryview-based platforms: CherryTrail and Braswell 
 some CHT-T platforms rely on RT5640, use Baytrail machine driver 
 some CHT-T platforms rely on RT5651, use Baytrail machine driver 
	
	  This is always last in the table so that it is selected only when
	  enabled explicitly and there is no codec-related information in SSDT
 SPDX-License-Identifier: GPL-2.0-only
  soc-acpi-intel-cnl-match.c - tables and support for CNL ACPI enumeration.
  Copyright (c) 2018, Intel Corporation.
 SPDX-License-Identifier: GPL-2.0-only
  soc-acpi-intel-bxt-match.c - tables and support for BXT ACPI enumeration.
  Copyright (c) 2018, Intel Corporation.
 SPDX-License-Identifier: GPL-2.0-only
  soc-acpi-intel-byt-match.c - tables and support for BYT ACPI enumeration.
  Copyright (c) 2017, Intel Corporation.
 Point of View mobii wintab p1006w (v1.0) 
 Note 105b is Foxcon's USBPCI vendor id 
 Aegex 10 tablet (RU2) 
 Dell Venue 10 Pro 5055 
 Various devices use an ACPI id of 10EC5640 while using a rt5672 codec 
 some Baytrail platforms rely on RT5645, use CHT machine driver 
 use CHT driver to Baytrail Chromebooks 
	
	  This is always last in the table so that it is selected only when
	  enabled explicitly and there is no codec-related information in SSDT
 SPDX-License-Identifier: GPL-2.0-only
 soc-acpi-intel-sdw-mockup-match.c - tables and support for SoundWire
 mockup device ACPI enumeration.
 Copyright (c) 2021, Intel Corporation.
 SPDX-License-Identifier: GPL-2.0-only
  Intel SST generic IPC Support
  Copyright (C) 2015, Intel Corporation. All rights reserved.
 IPC message timeout (msecs) 
 locks held by caller 
 wait for DSP completion (in all cases atm inc pending) 
 copy the data returned from DSP 
		 if the DSP is busy, we will TX messages after IRQ.
		  also postpone if we are in the middle of processing
		  completion irq
	
	  DSP maybe in lower power active state, so
	  check if the DSP supports DSP lp On method
	  if so invoke that before sending IPC
 locks held by caller 
 Module information 
 SPDX-License-Identifier: GPL-2.0-only
  soc-acpi-intel-tgl-match.c - tables and support for TGL ACPI enumeration.
  Copyright (c) 2019, Intel Corporation.
 unique ID is set for some reason 
 this table is used when there is no I2S codec present 
 mockup tests need to be first 
 4 active links required 
		
		  link_mask should be 0xB, but all links are enabled by BIOS.
		  This entry will be selected if there is no rt1308 exposed
		  on link2 since it will fail to match the above entry.
 4 active links required 
		
		  link_mask should be 0xB, but all links are enabled by BIOS.
		  This entry will be selected if there is no rt1316 amplifier exposed
		  on link2 since it will fail to match the above entry.
 4 active links required 
 rt711 on link 0 and 1 rt1308 on link 1 
 rt711 on link 0 and 2 rt1308s on link 1 
 rt5682 on link0 & 2xmax98373 on link 1 
 rt711 on link 0 
 SPDX-License-Identifier: GPL-2.0-only
  soc-acpi-intel-kbl-match.c - tables and support for KBL ACPI enumeration.
  Copyright (c) 2018, Intel Corporation.
 SPDX-License-Identifier: GPL-2.0-only
  soc-acpi-intel-glk-match.c - tables and support for GLK ACPI enumeration.
  Copyright (c) 2018, Intel Corporation.
 SPDX-License-Identifier: GPL-2.0-only
  soc-acpi-intel-ehl-match.c - tables and support for EHL ACPI enumeration.
  Copyright (c) 2019, Intel Corporation.
 SPDX-License-Identifier: GPL-2.0-only
 Copyright (c) 2018, Intel Corporation.
  soc-acpi-intel-hda-match.c - tables and support for HDA+ACPI enumeration.
 .id is not used in this file 
 .fw_filename is dynamically set in skylake driver 
 .sof_fw_filename is dynamically set in sofintel driver 
		
		  .machine_quirk and .quirk_data are not used here but
		  can be used if we need a more complicated machine driver
		  combining HDA+other device (e.g. DMIC).
 SPDX-License-Identifier: GPL-2.0-only
  soc-apci-intel-cfl-match.c - tables and support for CFL ACPI enumeration.
  Copyright (c) 2019, Intel Corporation.
 SPDX-License-Identifier: GPL-2.0-only
  soc-acpi-intel-cml-match.c - tables and support for CML ACPI enumeration.
  Copyright (c) 2019, Intel Corporation.
  The order of the three entries with .id = "10EC5682" matters
  here, because DSDT tables expose an ACPI HID for the MAX98357A
  speaker amplifier which is not populated on the board.
 unique ID is set for some reason 
 4 active links required 
 4 active links required 
		
		  link_mask should be 0xB, but all links are enabled by BIOS.
		  This entry will be selected if there is no rt1308 exposed
		  on link2 since it will fail to match the above entry.
 RT700 connected on Link1 
 SPDX-License-Identifier: GPL-2.0-only
  soc-apci-intel-jsl-match.c - tables and support for JSL ACPI enumeration.
  Copyright (c) 2019-2020, Intel Corporation.
  When adding new entry to the snd_soc_acpi_intel_jsl_machines array,
  use .quirk_data member to distinguish different machine driver,
  and keep ACPI .id field unchanged for the common codec.
 SPDX-License-Identifier: GPL-2.0-only
  soc-apci-intel-adl-match.c - tables and support for ADL ACPI enumeration.
  Copyright (c) 2020, Intel Corporation.
 unique ID is set for some reason 
 this table is used when there is no I2S codec present 
 4 active links required 
 4 active links required 
 4 active links required 
 2 active links required 
 link0 required 
 rt5682 on link0 & 2xmax98373 on link 2 
 SPDX-License-Identifier: GPL-2.0-only
 Copyright(c) 2019 Intel Corporation.
  Intel Cometlake I2S Machine driver for RT1011 + RT5682 codec
 The platform clock outputs 24Mhz clock to codec as I2S MCLK 
 Default: Woofer speakers  
WLWR speaker
 HP jack connectors - unknown if we have jack detection 
 other jacks 
 DMIC 
TLTR speaker
 need to enable ASRC function for 24MHz mclk rate 
	
	  Headset buttons map to the google Reference headset.
	  These can be configured by userspace.
 Configure sysclk for codec 
	
	  slot_width should be equal or large than data length, set them
	  be the same
 100 Fs to drive 24 bit data 
		
		  Codec TDM is configured as 24 bit capture playback.
		  2 CH PB is done over 4 codecs - 2 Woofers and 2 Tweeters.
		  The Left woofer and tweeter plays the Left playback data
		  and  similar by the Right.
		  Hence 2 codecs (1 T and 1 W pair) share same Rx slot.
		  The feedback is captured for each codec individually.
		  Hence all 4 codecs use 1 Tx slot each for feedback.
 Cometlake digital audio interface glue - connects codec <--> CPU 
 WL  COMP_CODEC("i2c-10EC1011:00", CML_RT1011_CODEC_DAI),
 WR  COMP_CODEC("i2c-10EC1011:01", CML_RT1011_CODEC_DAI)));
 WL  COMP_CODEC("i2c-10EC1011:00", CML_RT1011_CODEC_DAI),
 WR  COMP_CODEC("i2c-10EC1011:01", CML_RT1011_CODEC_DAI),
 TL  COMP_CODEC("i2c-10EC1011:02", CML_RT1011_CODEC_DAI),
 TR  COMP_CODEC("i2c-10EC1011:03", CML_RT1011_CODEC_DAI)));
 Back End DAI links 
 SSP0 - Codec 
		
		  SSP1 - Codec : added to end of list ensuring
		  reuse of common topologies for other end points
		  and changing only SSP1's codec
 Capture stream provides Feedback 
 single configuration structure for 2 and 4 channels 
 Cometlake audio machine driver for RT1011 and RT5682 
 when 4 speaker is available, update codec config 
 set platform name for each dailink 
 Module information 
 SPDX-License-Identifier: GPL-2.0-only
 Copyright(c) 2019-2020 Intel Corporation.
  Intel SOF Machine Driver with Realtek rt5682 Codec
  and speaker codec MAX98357A or RT1015.
 BT audio offload: reserve 3 bits for future 
 Default: MCLK on, MCLK 19.2M, SSP0  
		
		  Dooly is hatch family but using rt1015 amp so it
		  requires a quirk before "Google_Hatch".
 dai_link id is 1:1 mapped to the PCM device 
 need to enable ASRC function for 24MHz mclk rate 
		
		  The firmware might enable the clock at
		  boot (this information may or may not
		  be reflected in the enable clock register).
		  To change the rate we must disable the clock
		  first to cover these cases. Due to common
		  clock framework restrictions that do not allow
		  to disable a clock that has not been enabled,
		  we need to enable the clock first.
	
	  Headset buttons map to the google Reference headset.
	  These can be configured by userspace.
 get the tplg configured mclk. 
 mclk from the quirk is the first choice 
 use default mclk if not specified correct in topology 
 Configure pll for codec 
 Configure sysclk for codec 
	
	  slot_width should equal or large than data length, set them
	  be the same
 Configure sysclk for codec 
 name might be overridden during probe 
 HDMI is not supported by SOF on BaytrailCherryTrail 
 Disable Left and Right Spk pin after boot 
 HP jack connectors - unknown if we have jack detection 
 other jacks 
 digital mics 
 Don't need to add routes if widget addition failed 
 sof audio machine driver for rt5682 codec 
 the sof- prefix is added by the core 
 codec SSP 
		
		  Currently, On SKL+ platforms MCLK will be turned off in sof
		  runtime suspended, and it will go into runtime suspended
		  right after playback is stop. However, rt5682 will output
		  static noise if sysclk turns off during playback. Set
		  ignore_pmdown_time to power down rt5682 immediately and
		  avoid the noise.
		  It can be removed once we can control MCLK by driver.
 dmic 
 at least we have dmic01 
 set up 2 BE links at most 
 HDMI 
 speaker amp 
 feedback stream 
 BT audio offload 
	 A speaker amp might not be present when the quirk claims one is.
	  Detect this via whether the machine driver match includes quirk_data.
 Detect the headset codec variant 
 default quirk for legacy cpu 
 default number of HDMI DAI's 
 need to get main clock from pmc 
 compute number of dai links 
 set platform name for each dailink 
 Module information 
 SPDX-License-Identifier: GPL-2.0-only
 Copyright (c) 2020 Intel Corporation
   sof_sdw_rt1308 - Helpers to handle RT1308 from generic machine driver
  dapm routes for rt1308 will be registered dynamically according
  to the number of rt1308 used. The first two entries will be registered
  for one codec case, and the last two entries are also registered
  if two 1308s are used.
 Set rt1308 pll 
 Set rt1308 sysclk 
 machine stream operations 
 Count amp number and do init on playback link only. 
		
		  if two 1308s are in one dai link, the init function
		  in this dai link will be first set for the first speaker,
		  and it should be reset to initialize all speakers when
		  the second speaker is found.
 SPDX-License-Identifier: GPL-2.0-only
 ASoC DPCM Machine driver for Baytrail  Cherrytrail platforms with
 CX2072X codec
 External Speakers: HFL, HFR 
 Headset jack detection DAPM pins 
 set the default PLL rate, the clock is handled by the codec driver 
 The DSP will covert the FE rate to 48k, stereo, 24bits 
 set SSP2 to 24-bit 
	
	  Default mode for SSP configuration is TDM 4 slot, override config
	  with explicit setting to I2S 2ch 24-bit. The word length is set with
	  dai_set_tdm_slot() since there is no other API exposed
 back ends 
 use space before codec name to simplify card ID, and simplify driver name 
 card name will be 'sof-bytcht cx2072x' 
 card name will be used for driver name 
 SoC card 
 fix index of codec dai 
 fixup codec name based on HID 
 override plaform name, if required 
 set card and driver name 
 set pm ops 
 SPDX-License-Identifier: GPL-2.0-only
 Copyright(c) 2018 Intel Corporation.
  Intel Kabylake I2S Machine Driver with MAX98927, MAX98373 & DA7219 Codecs
  Modified from:
    Intel Kabylake I2S Machine driver supporting MAX98927 and
    RT5663 codecs
 Configure sysclk for codec 
 speaker 
 other jacks 
 CODEC BE connections 
 IV feedback path 
 AEC capture path 
 DMIC 
 other jacks 
 CODEC BE connections 
	
	  The following loop will be called only for playback stream
	  In this platform, there is only one playback device on every SSP
	
	  This following loop will be called only for capture stream
	  In this platform, there is only one capture device on every SSP
	
	  The above 2 loops are mutually exclusive based on the stream direction,
	  thus rtd_dpcm variable will never be overwritten
	
	  The ADSP will convert the FE rate to 48k, stereo, 24 bit
	
	  The speaker on the SSP0 supports S16_LE and not S24_LE.
	  thus changing the mask here
	
	  Headset buttons map to the google Reference headset.
	  These can be configured by userspace.
	
	  On this platform for PCM device we support,
	  48Khz
	  stereo
	  16 bit audio
	
	  set BE channel constraint as user FE channels
 Left 
 For Right 
 Left 	COMP_CODEC(MAX98927_DEV0_NAME, MAX98927_CODEC_DAI),
 For Right 	COMP_CODEC(MAX98927_DEV1_NAME, MAX98927_CODEC_DAI)));
 kabylake digital audio interface glue - connects codec <--> CPU 
 Front End DAI links 
 Back End DAI links 
 SSP0 - Codec 
 SSP1 - Codec 
 kabylake digital audio interface glue - connects codec <--> CPU 
 Front End DAI links 
 Back End DAI links 
 SSP0 - Codec 
 kabylake audio machine driver for SPT + DA7219 
 kabylake audio machine driver for Maxim98927 
 Update codecs for SSP0 with max98373 codec info 
 Module information 
 SPDX-License-Identifier: GPL-2.0-only
 Copyright(c) 2020 Intel Corporation. All rights reserved.
  Current only 2-amp configuration is supported for rt1011
 speaker 
  Make sure device's Unique ID follows this configuration:
  Two speakers:
          0: left, 1: right
  Four speakers:
          0: Woofer left, 1: Woofer right
          2: Tweeter left, 3: Tweeter right
 100 Fs to drive 24 bit data 
  rt1015:  i2c mode driver for ALC1015 and ALC1015Q
  rt1015p: auto-mode driver for ALC1015, ALC1015Q, and ALC1015Q-VB
  For stereo output, there are always two amplifiers on the board.
  However, the ACPI implements only one device instance (UID=0) if they
  are sharing the same enable pin. The code will detect the number of
  device instance and use corresponding DAPM structures for
  initialization.
 speaker 
 speaker 
 reserved for debugging purpose 
 SPDX-License-Identifier: GPL-2.0-only
   bytcht_nocodec.c - ASoc Machine driver for MinnowBoard Max and Up
   to make I2S signals observable on the Low-Speed connector. Audio codec
   is not managed by ASoCDAPM
   Copyright (C) 2015-2017 Intel Corp
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 The DSP will convert the FE rate to 48k, stereo, 24bits 
 set SSP2 to 24-bit 
	
	  Default mode for SSP configuration is TDM 4 slot, override config
	  with explicit setting to I2S 2ch 24-bit. The word length is set with
	  dai_set_tdm_slot() since there is no other API exposed
 CODEC<->CODEC link 
 back ends 
 SoC card 
 register the soc card 
 SPDX-License-Identifier: GPL-2.0-only
   bytcht-da7213.c - ASoc Machine driver for Intel Baytrail and
              Cherrytrail-based platforms, with Dialog DA7213 codec
   Copyright (C) 2017 Intel Corporation
   Author: Pierre-Louis Bossart <pierre-louis.bossart@linux.intel.com>
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 Assume Mic1 is linked to Headset and Mic2 to on-board mic 
 SOC-codec link 
 The DSP will convert the FE rate to 48k, stereo, 24bits 
 set SSP2 to 24-bit 
	
	  Default mode for SSP configuration is TDM 4 slot, override config
	  with explicit setting to I2S 2ch 24-bit. The word length is set with
	  dai_set_tdm_slot() since there is no other API exposed
 CODEC<->CODEC link 
 back ends 
 use space before codec name to simplify card ID, and simplify driver name 
 card name will be 'sof-bytcht da7213' 
 card name will be used for driver name 
 SoC card 
 fix index of codec dai 
 fixup codec name based on HID 
 override plaform name, if required 
 set card and driver name 
 set pm ops 
 SPDX-License-Identifier: GPL-2.0-only
 Copyright (c) 2020 Intel Corporation
  ehl_rt5660 - ASOC Machine driver for Elkhart Lake platforms
  with rt5660 codec
 There are two MICBIAS in rt5660, each for one MIC 
 dai_link id is 1:1 mapped to the PCM device 
 back ends 
 SoC card 
 If hdmi codec is not supported, switch to use dummy codec 
	
	  if HDMI is not enabled in kernel config, or
	  hdmi codec is not supported
 SPDX-License-Identifier: GPL-2.0-only
   cht-bsw-max98090.c - ASoc Machine driver for Intel Cherryview-based
   platforms Cherrytrail and Braswell, with max98090 & TI codec.
   Copyright (C) 2015 Intel Corp
   Author: Fang, Yang A <yang.a.fang@intel.com>
   This file is modified from cht_bsw_rt5645.c
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 See the comment in snd_cht_mc_probe() 
		
		  The jack has already been created in the
		  cht_max98090_headset_init() function.
		
		  flag error but don't bail if jack detect is broken
		  due to platform issues or bad BIOSconfiguration
 See the comment in snd_cht_mc_probe() 
	
	  The firmware might enable the clock at
	  boot (this information may or may not
	  be reflected in the enable clock register).
	  To change the rate we must disable the clock
	  first to cover these cases. Due to common
	  clock framework restrictions that do not allow
	  to disable a clock that has not been enabled,
	  we need to enable the clock first.
 The DSP will covert the FE rate to 48k, stereo, 24bits 
 set SSP2 to 16-bit 
	
	  TI supports 4 butons headset detection
	  KEY_MEDIA
	  KEY_VOICECOMMAND
	  KEY_VOLUMEUP
	  KEY_VOLUMEDOWN
 back ends 
 use space before codec name to simplify card ID, and simplify driver name 
 card name will be 'sof-bytcht max98090 
 card name will be used for driver name 
 SoC card 
 Banjo model Chromebook 
 Candy model Chromebook 
 Clapper model Chromebook 
 Cyan model Chromebook 
 Enguarde model Chromebook 
 Glimmer model Chromebook 
 Gnawty model Chromebook (Acer Chromebook CB3-111) 
 Heli model Chromebook 
 Kip model Chromebook 
 Ninja model Chromebook 
 Orco model Chromebook 
 Quawks model Chromebook 
 Rambi model Chromebook 
 Squawks model Chromebook 
 Sumo model Chromebook 
 Swanky model Chromebook (Toshiba Chromebook 2) 
 Winky model Chromebook 
 no need probe TI jack detection chip 
 override plaform name, if required 
 register the soc card 
	
	  Boards which have the MAX98090's clk connected to clk_0 do not seem
	  to like it if we muck with the clock. If we disable the clock when
	  it is unused we get "max98090 i2c-193C9890:00: PLL unlocked" errors
	  and the PLL never seems to lock again.
	  So for these boards we enable it here once and leave it at that.
 set card and driver name 
 set pm ops 
 SPDX-License-Identifier: GPL-2.0-only
 Copyright (c) 2020 Intel Corporation
   sof_sdw - ASOC Machine driver for Intel SoundWire platforms
 CometLake devices 
 early version of SKU 09C6 
 IceLake devices 
 TigerLake devices 
 Dell XPS 9710 
		
		  this entry covers multiple HP SKUs. The family name
		  does not seem robust enough, so we use a partial
		  match that ignores the product name suffix
		  (e.g. 15-eb1xxx, 14t-ea000 or 13-aw2xxx)
 NUC15 'Bishop County' LAPBC510 and LAPBC710 skews 
 TigerLake-SDCA devices 
 AlderLake devices 
 name might be overridden during probe 
 these wrappers are only needed to avoid typecast compilation errors 
 Find stream from first CPU DAI 
 Find stream from first CPU DAI 
 Find stream from first CPU DAI 
	
	  force DAI link to use same ID as RT715 and DMIC
	  to reuse topologies
 generic codec mockup 
 headset codec mockup 
 amplifier mockup 
		
		  A codec info is for all sdw version with the part id if
		  version_id is not specified in the codec info.
  get BE dailink number and CPU DAI number based on sdw link adr.
  Since some sdw slaves may be aggregated, the CPU DAI number
  may be larger than the number of BE dailinks.
 count DAI number for playback and capture 
 count BE for each non-aggregated slave or group 
 skip itself 
 sanity check 
		
		  Initialize the codec. If codec is part of an aggregated
		  group (group_id>0), initialize all codecs belonging to
		  same group.
 The group_id is > 0 iff the codec is aggregated 
  check endpoint status in slaves and gather link ID for all slaves in
  the same group to generate different CPU DAI. Now only support
  one sdw link with all slaves set with only single group id.
  one slave on one sdw link with aggregated = 0
  one sdw BE DAI <---> one-cpu DAI <---> one-codec DAI
  two or more slaves on one sdw link with aggregated = 0
  one sdw BE DAI  <---> one-cpu DAI <---> multi-codec DAIs
  multiple links with multiple slaves with aggregated = 1
  one sdw BE DAI  <---> 1 .. N CPU DAIs <----> 1 .. N codec DAIs
 make sure the link mask has a single bit set 
 gather other link ID of slaves in the same group 
 make sure the link mask has a single bit set 
	
	  indicate CPU DAIs for this group have been generated
	  to avoid generating CPU DAIs for this group again.
 generate codec name on different links in the same group 
 skip the link excluded by this processed group 
 check next link to create codec dai in the processed group 
 find codec info to create BE DAI 
 create stream name according to first link id 
		
		  generate CPU DAI name base on the sdw link ID and
		  PIN ID with offset of 2 according to sdw dai driver.
		
		  SoundWire DAILINKs use 'stream' functions and Bank Switch operations
		  based on wait_for_completion(), tag them as 'nonatomic'.
  DAI link ID of SSP & DMIC & HDMI are based on last
  link ID used by sdw link. Since be_id may be changed
  in init func of sdw codec, it is not equal to be_id
 generate DAI links by each sdw link 
 allocate codec conf, will be populated when dailinks are created 
 reset amp_num to ensure amp_num++ starts from 0 in each probe 
	
	  on generic tgl platform, I2S or sdw mode is supported
	  based on board rework. A ACPI device is registered in
	  system only when I2S mode is supported, not sdw mode.
	  Here check ACPI ID to confirm I2S is supported.
 enable dmic01 & dmic16k 
 allocate BE dailinks 
 allocated CPU DAIs 
 SDW 
	
	  SoundWire Slaves aggregated in the same group may be
	  located on different hardware links. Clear array to indicate
	  CPU DAIs for this group have not been generated.
 generate DAI links by each sdw link 
 this group has been generated 
 non-sdw DAI follows sdw DAI 
 get BE ID for non-sdw DAI 
 SSP 
 dmic 
 DMIC only supports capture
 DMIC only supports capture
 don't call sof_sdw_dmic_init() twice 
 HDMI 
 HDMI only supports playback
 SoC card 
	
	  the default amp_num is zero for each codec and
	  amp_num will only be increased for active amp
	  codecs on used platform
 Register the card 
		
		  We don't need to call .exit function if there is no matched
		  dai link found.
 SPDX-License-Identifier: GPL-2.0-only
 Copyright (c) 2020 Intel Corporation
   sof_sdw_rt5682 - Helpers to handle RT5682 from generic machine driver
Headphones
	
	  headset should be initialized once.
	  Do it with dai link for playback.
 SPDX-License-Identifier: GPL-2.0-only
 Copyright(c) 2021 Intel Corporation.
  Intel SOF Machine Driver with Cirrus Logic CS42L42 Codec
  and speaker codec MAX98357A
 Default: SSP2 
 dai_link id is 1:1 mapped to the PCM device 
	
	  Headset buttons map to the google Reference headset.
	  These can be configured by userspace.
 BCLK freq 
 Configure sysclk for codec 
 name might be overridden during probe 
 HP jack connectors - unknown if we have jack detection 
 other jacks 
 digital mics 
 Don't need to add routes if widget addition failed 
 sof audio machine driver for cs42l42 codec 
 the sof- prefix is added by the core 
 speaker amp 
 codec SSP 
 dmic 
 at least we have dmic01 
 set up 2 BE links at most 
 HDMI 
 caught here if it's not used as terminator in macro 
 default number of HDMI DAI's 
 compute number of dai links 
 set platform name for each dailink 
 Module information 
 SPDX-License-Identifier: GPL-2.0-only
 Copyright(c) 2017-18 Intel Corporation.
  Intel Kabylake I2S Machine Driver with MAX98357A & DA7219 Codecs
  Modified from:
    Intel Kabylake I2S Machine driver supporting MAXIM98927 and
    RT5663 codecs
 speaker 
 other jacks 
 CODEC BE connections 
 DMIC 
 The ADSP will convert the FE rate to 48k, stereo 
 set SSP to 24 bit 
 Configure sysclk for codec 
	
	  Headset buttons map to the google Reference headset.
	  These can be configured by userspace.
	
	  On this platform for PCM device we support,
	  48Khz
	  stereo
	  16 bit audio
	
	  set BE channel constraint as user FE channels
 kabylake digital audio interface glue - connects codec <--> CPU 
 Front End DAI links 
 Back End DAI links 
 SSP0 - Codec 
 SSP1 - Codec 
 kabylake audio machine driver for SPT + DA7219 
 Module information 
 SPDX-License-Identifier: GPL-2.0-only
 Copyright (c) 2020 Intel Corporation
   sof_sdw_rt1316 - Helpers to handle RT1316 from generic machine driver
  dapm routes for rt1316 will be registered dynamically according
  to the number of rt1316 used. The first two entries will be registered
  for one codec case, and the last two entries are also registered
  if two 1316s are used.
 Count amp number and do init on playback link only. 
		
		  if two 1316s are in one dai link, the init function
		  in this dai link will be first set for the first speaker,
		  and it should be reset to initialize all speakers when
		  the second speaker is found.
 SPDX-License-Identifier: GPL-2.0-only
 Copyright (c) 2020 Intel Corporation
   sof_sdw_rt715_sdca - Helpers to handle RT715-SDCA from generic machine driver
	
	  DAI ID is fixed at SDW_DMIC_DAI_ID for 715-SDCA to
	  keep sdw DMIC and HDMI setting static in UCM
 SPDX-License-Identifier: GPL-2.0-only
   cht-bsw-nau8824.c - ASoc Machine driver for Intel Cherryview-based
           platforms Cherrytrail and Braswell, with nau8824 codec.
   Copyright (C) 2018 Intel Corp
   Copyright (C) 2018 Nuvoton Technology Corp
   Author: Wang, Joseph C <joequant@gmail.com>
   Co-author: John Hsu <KCHSU0@nuvoton.com>
   This file is based on cht_bsw_rt5672.c and cht-bsw-max98090.c
	 NAU88L24 supports 4 butons headset detection
	  KEY_PLAYPAUSE
	  KEY_VOICECOMMAND
	  KEY_VOLUMEUP
	  KEY_VOLUMEDOWN
 The DSP will covert the FE rate to 48k, stereo, 24bits 
 set SSP2 to 24-bit 
 TDM 4 slots 24 bit, set Rx & Tx bitmask to 4 active slots 
 Front End DAI links 
 Back End DAI links 
 SSP2 - Codec 
 use space before codec name to simplify card ID, and simplify driver name 
 card name will be 'sof-bytcht nau8824 
 card name will be used for driver name 
 SoC card 
 override plaform name, if required 
 set card and driver name 
 set pm ops 
 register the soc card 
 SPDX-License-Identifier: GPL-2.0-only
 Copyright (c) 2020 Intel Corporation
   sof_sdw_hdmi - Helpers to handle HDMI from generic machine driver
 dai_link id is 1:1 mapped to the PCM device 
 SPDX-License-Identifier: GPL-2.0-only
 Copyright (c) 2020 Intel Corporation
   sof_sdw_rt715 - Helpers to handle RT715 from generic machine driver
	
	  DAI ID is fixed at SDW_DMIC_DAI_ID for 715 to
	  keep sdw DMIC and HDMI setting static in UCM
 SPDX-License-Identifier: GPL-2.0-only
 Copyright (c) 2020 Intel Corporation
 sof_sdw_max98373 - Helpers to handle 2x MAX98373
 codec devices from generic machine driver
 set spk pin by playback only 
 according to soc_pcm_prepare dai link prepare is called first 
 according to soc_pcm_hw_free dai link free is called first 
 Disable Left and Right Spk pin after boot 
 SPDX-License-Identifier: GPL-2.0-only
 Copyright (c) 2020 Intel Corporation
   sof_sdw_rt711_sdca - Helpers to handle RT711-SDCA from generic machine driver
  Note this MUST be called before snd_soc_register_card(), so that the props
  are in place before the codec component driver's probe function parses them.
 Headphones 
	
	  headset should be initialized once.
	  Do it with dai link for playback.
 SPDX-License-Identifier: GPL-2.0-only
 Copyright(c) 2018 Intel Corporation.
  Intel Geminilake I2S Machine Driver with MAX98357A & RT5682 Codecs
  Modified from:
    Intel Apollolake I2S Machine driver
 The platform clock outputs 19.2Mhz clock to codec as I2S MCLK 
 HP jack connectors - unknown if we have jack detection 
 speaker 
 other jacks 
 digital mics 
 CODEC BE connections 
 DMIC 
 The ADSP will convert the FE rate to 48k, stereo 
 set SSP to 24 bit 
 Configure sysclk for codec 
	
	  Headset buttons map to the google Reference headset.
	  These can be configured by userspace.
 Set valid bitmask & configuration for I2S in 24 bit 
	
	  set BE channel constraint as user FE channels
 geminilake digital audio interface glue - connects codec <--> CPU 
 Front End DAI links 
 Back End DAI links 
 SSP1 - Codec 
 SSP2 - Codec 
 geminilake audio machine driver for SPT + RT5682 
 Detect the headset codec variant 
 ALC5682I-VS is detected 
 update the dai link to use rt5682s codec 
 override plaform name, if required 
 Module information 
 SPDX-License-Identifier: GPL-2.0-only
  Intel Broxton-P I2S Machine Driver
  Copyright (C) 2016, Intel Corporation. All rights reserved.
  Modified from:
    Intel Skylake I2S Machine driver
 HP jack connectors - unknown if we have jack detection 
 other jacks 
 digital mics 
 CODEC BE connections 
 DMIC 
 speaker 
 Speaker 
 The ADSP will convert the FE rate to 48k, stereo 
 set SSP to 24 bit 
 Configure sysclk for codec 
	
	  Headset buttons map to the google Reference headset.
	  These can be configured by userspace.
	
	  On this platform for PCM device we support,
	  48Khz
	  stereo
	  16 bit audio
 broxton digital audio interface glue - connects codec <--> CPU 
 Back End DAI 
 Left 	COMP_CODEC(MAX98390_DEV0_NAME, "max98390-aif1"),
 Right 	COMP_CODEC(MAX98390_DEV1_NAME, "max98390-aif1")));
 Front End DAI links 
 Back End DAI links 
 SSP5 - Codec 
 SSP1 - Codec 
 broxton audio machine driver for SPT + da7219 
 Fixup the SSP entries for geminilake 
 MAXIM_CODEC is connected to SSP1. 
 DIALOG_CODE is connected to SSP2 
 MAXIM_CODEC is connected to SSP1. 
 DIALOG_CODEC is connected to SSP0 
 override plaform name, if required 
 Module information 
 SPDX-License-Identifier: GPL-2.0-only
 Copyright(c) 2020 Intel Corporation. All rights reserved.
 speaker 
 For Right 
 For Left 
 DEV0 tdm slot configuration 
 DEV1 tdm slot configuration 
 set spk pin by playback only 
  Maxim MAX98357AMAX98360A
 speaker 
 Don't need to add routes if widget addition failed 
 SPDX-License-Identifier: GPL-2.0-only
   cht_bsw_rt5672.c - ASoc Machine driver for Intel Cherryview-based platforms
                      Cherrytrail and Braswell, with RT5672 codec.
   Copyright (C) 2014 Intel Corp
   Author: Subhransu S. Prusty <subhransu.s.prusty@intel.com>
           Mengdong Lin <mengdong.lin@intel.com>
 The platform clock #3 outputs 19.2Mhz clock to codec as I2S MCLK 
 Headset jack detection DAPM pins 
 set codec PLL source to the 19.2MHz platform clock (MCLK) 
 set codec sysclk source to PLL 
		 Set codec sysclk source to its internal clock because codec
		  PLL will be off when idle and MCLK will also be off by ACPI
		  when codec is runtime suspended. Codec needs clock for jack
		  detection and button press.
 set codec PLL source to the 19.2MHz platform clock (MCLK) 
 set codec sysclk source to PLL 
	 Select codec ASRC clock source to track I2S1 clock, because codec
	  is in slave mode and 100fs I2S format (BCLK = 100  LRCLK) cannot
	  be supported by RT5672. Otherwise, ASRC will be disabled and cause
	  noise.
		
		  The firmware might enable the clock at
		  boot (this information may or may not
		  be reflected in the enable clock register).
		  To change the rate we must disable the clock
		  first to cover these cases. Due to common
		  clock framework restrictions that do not allow
		  to disable a clock that has not been enabled,
		  we need to enable the clock first.
 The DSP will covert the FE rate to 48k, stereo, 24bits 
 set SSP0 to 16-bit 
 set SSP2 to 24-bit 
	
	  The default mode for the cpu-dai is TDM 4 slot. The default mode
	  for the codec-dai is I2S. So we need to either set the cpu-dai to
	  I2S mode to match the codec-dai, or set the codec-dai to TDM 4 slot
	  (or program both to yet another mode).
	  One board, the Lenovo Miix 2 10, uses not 1 but 2 codecs connected
	  to SSP2. The second piggy-backed, output-only codec is inside the
	  keyboard-dock (which has extra speakers). Unlike the main rt5672
	  codec, we cannot configure this codec, it is hard coded to use
	  2 channel 24 bit I2S. For this to work we must use I2S mode on this
	  board. Since we only support 2 channels anyways, there is no need
	  for TDM on any cht-bsw-rt5672 designs. So we use I2S 2ch everywhere.
 Front End DAI links 
 Back End DAI links 
 SSP2 - Codec 
 use space before codec name to simplify card ID, and simplify driver name 
 card name will be 'sof-bytcht rt5672' 
 card name will be used for driver name 
 SoC card 
 find index of codec dai 
 fixup codec name based on HID 
 Use SSP0 on Bay Trail CR devices 
 override plaform name, if required 
 set card and driver name 
 set pm ops 
 register the soc card 
 SPDX-License-Identifier: GPL-2.0-only
  Intel Kabylake I2S Machine Driver with MAXIM98927
  RT5514 and RT5663 Codecs
  Copyright (C) 2017, Intel Corporation. All rights reserved.
  Modified from:
    Intel Kabylake I2S Machine driver supporting MAXIM98927 and
    RT5663 codecs
	
	  MCLKSCLK need to be ON early for a successful synchronization of
	  codec internal clock. And the clocks are turned off during
	  POST_PMD after the stream is stopped.
 Enable MCLK 
 Enable SCLK 
 Headphones 
 speaker 
 other jacks 
 CODEC BE connections 
 IV feedback path 
 DMIC 
	
	  Headset buttons map to the google Reference headset.
	  These can be configured by userspace.
	
	  On this platform for PCM device we support,
	  48Khz
	  stereo
	  16 bit audio
	
	  The following loop will be called only for playback stream
	  In this platform, there is only one playback device on every SSP
	
	  This following loop will be called only for capture stream
	  In this platform, there is only one capture device on every SSP
	
	  The above 2 loops are mutually exclusive based on the stream direction,
	  thus rtd_dpcm variable will never be overwritten
	
	  The ADSP will convert the FE rate to 48k, stereo, 24 bit
	
	  The speaker on the SSP0 supports S16_LE and not S24_LE.
	  thus changing the mask here
 use ASRC for internal clocks, as PLL rate isn't multiple of BCLK 
 Left  COMP_CODEC(MAXIM_DEV0_NAME, KBL_MAXIM_CODEC_DAI),
 Right COMP_CODEC(MAXIM_DEV1_NAME, KBL_MAXIM_CODEC_DAI),
 dmic  COMP_CODEC(RT5514_DEV_NAME, KBL_REALTEK_DMIC_CODEC_DAI)));
 kabylake digital audio interface glue - connects codec <--> CPU 
 Front End DAI links 
 Back End DAI links 
 single Back end dai for both max speakers and dmic 
 SSP0 - Codec 
	
	  It's required to control mclk directly in the set_bias_level
	  function for rt5514 codec or the recording function could
	  break.
 mclk is already enabled in FW 
  kabylake audio machine driver for  MAX98927 + RT5514 + RT5663
 Module information 
 SPDX-License-Identifier: GPL-2.0-only
  Intel Kabylake I2S Machine Driver with MAXIM98927
  and RT5663 Codecs
  Copyright (C) 2017, Intel Corporation. All rights reserved.
  Modified from:
    Intel Skylake I2S Machine driver
	
	  MCLKSCLK need to be ON early for a successful synchronization of
	  codec internal clock. And the clocks are turned off during
	  POST_PMD after the stream is stopped.
 Enable MCLK 
 Enable SCLK 
 HP jack connectors - unknown if we have jack detection 
 speaker 
 other jacks 
 CODEC BE connections 
 IV feedback path 
 DMIC 
 other jacks 
 CODEC BE connections 
	
	  Headset buttons map to the google Reference headset.
	  These can be configured by userspace.
	
	  On this platform for PCM device we support,
	  48Khz
	  stereo
	  16 bit audio
	
	  The following loop will be called only for playback stream
	  In this platform, there is only one playback device on every SSP
	
	  This following loop will be called only for capture stream
	  In this platform, there is only one capture device on every SSP
	
	  The above 2 loops are mutually exclusive based on the stream direction,
	  thus rtd_dpcm variable will never be overwritten
	
	  The ADSP will convert the FE rate to 48k, stereo, 24 bit
	
	  The speaker on the SSP0 supports S16_LE and not S24_LE.
	  thus changing the mask here
 use ASRC for internal clocks, as PLL rate isn't multiple of BCLK 
			
			  Use channel 4 and 5 for the first amp
			
			  Use channel 6 and 7 for the second amp
 Left 	COMP_CODEC(MAXIM_DEV0_NAME, KBL_MAXIM_CODEC_DAI),
 Right 	COMP_CODEC(MAXIM_DEV1_NAME, KBL_MAXIM_CODEC_DAI)));
 kabylake digital audio interface glue - connects codec <--> CPU 
 Front End DAI links 
 Back End DAI links 
 SSP0 - Codec 
 SSP1 - Codec 
 Front End DAI links 
 Back End DAI links 
 SSP1 - Codec 
 kabylake audio machine driver for SPT + RT5663 
 kabylake audio machine driver for RT5663 
 Module information 
 SPDX-License-Identifier: GPL-2.0-only
 Copyright (c) 2018-2020, Intel Corporation
 sof-wm8804.c - ASoC machine driver for Up and Up2 board
 based on WM8804Hifiberry Digi+
 This is fixed on this board 
 use 44.1 kHz root frequency 
		
		  ensure both GPIOs are LOW first, then drive the
		  relevant one to HIGH
 set sampling frequency status bits 
 machine stream operations 
 back ends 
 SoC card 
 sof- prefix added automatically 
 i2c-<HID>:00 with HID being 8 chars 
  to control the HifiBerry Digi+ PRO, it's required to toggle GPIO to
  select the clock source. On the Up2 board, this means
  Pin29BCM5Linux GPIO 430 and Pin 31BCM6 Linux GPIO 404.
  Using the ACPI device name is not very nice, but since we only use
  the value for the Up2 board there is no risk of conflict with other
  platforms.
 .dev_id is set during probe 
		
		  The gpios are required for specific boards with
		  local oscillators, and optional in other cases.
		  Since we can't identify when they are needed, use
		  the GPIO as non-optional
 fix index of codec dai 
 fixup codec name based on HID 
 SPDX-License-Identifier: GPL-2.0-only
 Copyright (c) 2020 Intel Corporation
   sof_sdw_rt711 - Helpers to handle RT711 from generic machine driver
  Note this MUST be called before snd_soc_register_card(), so that the props
  are in place before the codec component driver's probe function parses them.
 Headphones 
	
	  headset should be initialized once.
	  Do it with dai link for playback.
 SPDX-License-Identifier: GPL-2.0-only
  Intel Skylake I2S Machine Driver
  Copyright (C) 2014-2015, Intel Corporation. All rights reserved.
  Modified from:
    Intel Broadwell Wildcatpoint SST Audio
    Copyright (C) 2013, Intel Corporation. All rights reserved.
 Headset jack detection DAPM pins 
 speaker 
 HP jack connectors - unknown if we have jack deteck 
 other jacks 
 digital mics 
 CODEC BE connections 
	
	  on this platform for PCM device we support,
	 	48Khz
	 	stereo
	 	16 bit audio
 The output is 48KHz, stereo, 16bits 
 set SSP0 to 24 bit 
 skylake digital audio interface glue - connects codec <--> CPU 
 Front End DAI links 
 Back End DAI links 
 SSP0 - Codec 
 skylake audio machine driver for SPT + RT286S 
 Module information 
 SPDX-License-Identifier: GPL-2.0-only
  Intel Broadwell Wildcatpoint SST Audio
  Copyright (C) 2013, Intel Corporation. All rights reserved.
 Headset jack detection DAPM pins 
 speaker 
 HP jack connectors - unknown if we have jack deteck 
 other jacks 
 digital mics 
 CODEC BE connections 
 The ADSP will covert the FE rate to 48k, stereo 
 set SSP0 to 16 bit 
 Board supports stereo configuration only 
 broadwell digital audio interface glue - connects codec <--> CPU 
 Front End DAI links 
 Back End DAI links 
 SSP0 - Codec 
 use space before codec name to simplify card ID, and simplify driver name 
 card name will be 'sof-bdw rt286' 
 card name will be used for driver name 
 broadwell audio machine driver for WPT + RT286S 
 override plaform name, if required 
 set card and driver name 
 Module information 
 SPDX-License-Identifier: GPL-2.0-only
 Copyright(c) 2015-18 Intel Corporation.
  Common functions used in different Intel machine drivers
 skl_hda_digital audio interface glue - connects codec <--> CPU 
 Back End DAI links 
 SPDX-License-Identifier: GPL-2.0-only
   bytcr_rt5651.c - ASoc Machine driver for Intel Byt CR platform
   (derived from bytcr_rt5640.c)
   Copyright (C) 2015 Intel Corp
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 default is using AIF1  
 jack-detect-source + inv + dmic-en + ovcd-th + -sf + terminating entry 
 Default: jack-detect on JD1_1, internal mic on in2, headsetmic on in3 
 Configure the PLL before selecting it 
		
		  Set codec clock source to internal clock before
		  turning off the platform clock. Codec needs clock
		  for Jack detection and button press
 lowercase for rt5651 
 Chuwi Hi8 Pro (CWI513) 
 Chuwi Vi8 Plus (CWI519) 
 Complet Electro Serv MY8307 
		 I.T.Works TW701, Ployer Momo7w and Trekstor ST70416-6
			 Partial match for all of itWORKS.G.WI71C.JGBMRBA,
 Jumper EZpad 7 
 Jumper12x.WJ2012.bsBKRCP05 with the version dropped 
 KIANO SlimNote 14.2 
 Minnowboard Max B3 
 Minnowboard Turbot 
 Point of View mobii wintab p1006w (v1.0) 
 Note 105b is Foxcon's USBPCI vendor id 
 VIOS LTH17 
 Yours Y8W81 (and others using the same mainboard) 
 Partial match for all devs with a W86C mainboard 
  Note this MUST be called before snd_soc_register_card(), so that the props
  are in place before the codec component driver's probe function parses them.
 put_device(i2c_dev) is handled in caller 
 Start with RC clk for jack-detect (we disable MCLK below) 
	
	  The firmware might enable the clock at boot (this information
	  may or may not be reflected in the enable clock register).
	  To change the rate we must disable the clock first to cover
	  these cases. Due to common clock framework restrictions that
	  do not allow to disable a clock that has not been enabled,
	  we need to enable the clock first.
 The DSP will covert the FE rate to 48k, stereo 
 set SSP0 to 16-bit 
 set SSP2 to 24-bit 
	
	  Default mode for SSP configuration is TDM 4 slot, override config
	  with explicit setting to I2S 2ch. The word length is set with
	  dai_set_tdm_slot() since there is no other API exposed
 CODEC<->CODEC link 
 back ends 
 SoC card 
 = "bytcr-rt5651--spk--mic[-swapped-hp]" 
 = "cfg-spk: cfg-mic:" 
 use space before codec name to simplify card ID, and simplify driver name 
 card name will be 'sof-bytcht rt5651' 
 card name will be used for driver name 
	
	  Some boards have I2cSerialBusV2, GpioIo, GpioInt as ACPI resources,
	  other boards may  have I2cSerialBusV2, GpioInt, GpioIo instead.
	  We want the GpioIo one for the ext-amp-enable-gpio.
 ACPICA seems to require 64 bit integers 
 1: AIF1, 2: AIF2 
 usually 25MHz (0x17d7940), ignored 
 register the soc card 
 fix index of codec dai 
 fixup codec name based on HID 
	
	  swap SSP0 if bytcr is detected
	  (will be overridden if DMI quirk is detected)
		
		  Baytrail CR platforms may have CHAN package in BIOS, try
		  to find relevant routing quirk based as done on Windows
		  platforms. We have to read the information directly from the
		  BIOS, at this stage the card is not created and the links
		  with the codec driverpdata are non-existent
 format specified: 2 64-bit integers 
 no BIOS indications, assume SSP0-AIF2 connection 
 check quirks before creating card 
 Must be called before register_card, also see declaration comment. 
 Cherry Trail devices use an external amplifier enable gpio 
		
		  Fall back to bit clock usage when clock is not
		  available likely due to missing dependencies.
 override plaform name, if required 
 set card and driver name 
 set pm ops 
 SPDX-License-Identifier: GPL-2.0-only
 Copyright(c) 2018-2020 Intel Corporation.
  Intel SOF Machine Driver for Intel platforms with TI PCM512x codec,
  e.g. Up or Up2 with Hifiberry DAC+ HAT
 Default: SSP5 
 dai_link id is 1:1 mapped to the PCM device 
 name might be overridden during probe 
 HDMI is not supported by SOF on BaytrailCherryTrail 
 Speaker 
 digital mics 
 Don't need to add routes if widget addition failed 
 sof audio machine driver for pcm512x codec 
 codec SSP 
	
	  capture only supported with specific versions of the Hifiberry DAC+
 dmic 
 at least we have dmic01 
 set up 2 BE links at most 
 HDMI 
		
		  topology cannot be loaded if codec is missing, so
		  use the dummy codec if needed
 default quirk for legacy cpu 
 links are always present in topology 
 compute number of dai links 
 set platform name for each dailink 
 SPDX-License-Identifier: GPL-2.0-only
 Copyright(c) 2015-18 Intel Corporation.
  Machine Driver for SKL+ platforms with DSP and iDisp, HDA Codecs
 digital mics 
 CODEC BE connections 
 there are two routes per iDisp output 
 topology with iDisp as the only HDA codec 
		
		  rearrange the dai link array and make the
		  dmic dai links follow idsp dai links for only
		  num_links of dai links need to be registered
		  to ASoC.
 topology with external and iDisp HDA codecs 
			
			  all codecs are on the same bus, so it's sufficient
			  to look up only the first one
 hdmi codec dai name starts from index 1 
 Module information 
 SPDX-License-Identifier: GPL-2.0-only
   cht-bsw-rt5645.c - ASoc Machine driver for Intel Cherryview-based platforms
                      Cherrytrail and Braswell, with RT5645 codec.
   Copyright (C) 2015 Intel Corp
   Author: Fang, Yang A <yang.a.fang@intel.com>
 	        N,Harshapriya <harshapriya.n@intel.com>
   This file is modified from cht_bsw_rt5672.c
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 default is using AIF1  
		 Set codec sysclk source to its internal clock because codec PLL will
		  be off when idle and MCLK will also be off when codec is
		  runtime suspended. Codec needs clock for jack detection and button
		  press. MCLK is turned off with clock framework or ACPI.
 set codec PLL source to the 19.2MHz platform clock (MCLK) 
 Strago family Chromebooks 
 Select clk_i2s2_asrc as ASRC clock source 
 Select clk_i2s1_asrc as ASRC clock source 
	
	  The firmware might enable the clock at
	  boot (this information may or may not
	  be reflected in the enable clock register).
	  To change the rate we must disable the clock
	  first to cover these cases. Due to common
	  clock framework restrictions that do not allow
	  to disable a clock that has not been enabled,
	  we need to enable the clock first.
 The DSP will covert the FE rate to 48k, stereo, 24bits 
 set SSP0 to 16-bit 
		
		  Default mode for SSP configuration is TDM 4 slot, override config
		  with explicit setting to I2S 2ch 16-bit. The word length is set with
		  dai_set_tdm_slot() since there is no other API exposed
 set SSP2 to 24-bit 
		
		  Default mode for SSP configuration is TDM 4 slot
 TDM 4 slots 24 bit, set Rx & Tx bitmask to 4 active slots 
 CODEC<->CODEC link 
 back ends 
 use space before codec name to simplify card ID, and simplify driver name 
 card name 'sof-bytcht rt5645' 
 card name 'sof-bytcht rt5650' 
 card name will be used for driver name 
 SoC card 
 ACPICA seems to require 64 bit integers 
 1: AIF1, 2: AIF2 
 usually 25MHz (0x17d7940), ignored 
 set correct codec name 
 fixup codec name based on HID 
	
	  swap SSP0 if bytcr is detected
	  (will be overridden if DMI quirk is detected)
		
		  Baytrail CR platforms may have CHAN package in BIOS, try
		  to find relevant routing quirk based as done on Windows
		  platforms. We have to read the information directly from the
		  BIOS, at this stage the card is not created and the links
		  with the codec driverpdata are non-existent
 format specified: 2 64-bit integers 
 no BIOS indications, assume SSP0-AIF2 connection 
 check quirks before creating card 
 override plaform name, if required 
 set card and driver name 
 set pm ops 
 SPDX-License-Identifier: GPL-2.0-only
 Copyright(c) 2019 Intel Corporation.
  Intel SOF Machine driver for DA7219 + MAX98373MAX98360A codec
 For MAX98373 amp 
 digital mics 
 For MAX98360A amp 
 digital mics 
 Configure sysclk for codec 
	
	  Headset buttons map to the google Reference headset.
	  These can be configured by userspace.
 vmon_slot_no = 0 imon_slot_no = 1 for TX slots 
 vmon_slot_no = 2 imon_slot_no = 3 for TX slots 
 Left 	COMP_CODEC(MAXIM_DEV0_NAME, MAX98373_CODEC_DAI),
 Right 	COMP_CODEC(MAXIM_DEV1_NAME, MAX98373_CODEC_DAI)));
 subject to be overridden during probe 
 Back End DAI links 
 IV feedback 
 By default dais[0] is configured for max98373 
 Module information 
 SPDX-License-Identifier: GPL-2.0-only
   bytcht_es8316.c - ASoc Machine driver for Intel BaytrailCherrytrail
                     platforms with Everest ES8316 SoC
   Copyright (C) 2017 Endless Mobile, Inc.
   Authors: David Yang <yangxiaohua@everest-semi.com>,
            Daniel Drake <drake@endlessm.com>
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 jd-inv + terminating entry 
	
	  There is no separate speaker output instead the speakers are muxed to
	  the HP outputs. The mux is controlled by the "Speaker Power" supply.
	
	  The firmware might enable the clock at boot (this information
	  may or may not be reflected in the enable clock register).
	  To change the rate we must disable the clock first to cover these
	  cases. Due to common clock framework restrictions that do not allow
	  to disable a clock that has not been enabled, we need to enable
	  the clock first.
 The DSP will covert the FE rate to 48k, stereo 
 set SSP0 to 16-bit 
 set SSP2 to 24-bit 
	
	  Default mode for SSP configuration is TDM 4 slot, override config
	  with explicit setting to I2S 2ch 24-bit. The word length is set with
	  dai_set_tdm_slot() since there is no other API exposed
 back ends 
 SoC card 
 = "bytcht-es8316--spk--mic" 
 = "cfg-spk: cfg-mic: 
	
	  Some Cherry Trail boards with an ES8316 codec have a bug in their
	  ACPI tables where the MSSL1680 touchscreen's _PS0 and _PS3 methods
	  wrongly also set the speaker-enable GPIO to 10. Testing has shown
	  that this really is a bug and the GPIO has no influence on the
	  touchscreen at all.
	 
	  The silead.c touchscreen driver does not support runtime suspend, so
	  the GPIO can only be changed underneath us during a system suspend.
	  This resume() function runs from a pm complete() callback, and thus
	  is guaranteed to run after the touchscreen driverACPI-subsys has
	  brought the touchscreen back up again (and thus changed the GPIO).
	 
	  So to work around this we pass GPIOD_FLAGS_BIT_NONEXCLUSIVE when
	  requesting the GPIO and we set its value here to undo any changes
	  done by the touchscreen's broken _PS0 ACPI method.
 use space before codec name to simplify card ID, and simplify driver name 
 card name will be 'sof-bytcht es8316' 
 card name will be used for driver name 
 Please keep this list alphabetically sorted 
 Irbis NB41 
 Teclast X98 Plus II 
 fix index of codec dai 
 fixup codec name based on HID 
 override plaform name, if required 
 Check for BYTCR or other platform and setup quirks 
 On BYTCR default to SSP0, internal-mic-in2-map, mono-spk 
 Others default to internal-mic-in1-map, mono-speaker 
 get the clock 
 get speaker enable GPIO 
 see comment in byt_cht_es8316_resume() 
 set card and driver name 
 set pm ops 
 register the soc card 
 SPDX-License-Identifier: GPL-2.0-only
 Copyright (c) 2020 Intel Corporation
   sof_sdw_dmic - Helpers to handle dmic from generic machine driver
 digital mics 
 Don't need to add routes if widget addition failed 
 SPDX-License-Identifier: GPL-2.0-only
   bytcr_wm5102.c - ASoc Machine driver for Intel Baytrail platforms with a
                    Wolfson Microelectronics WM5102 codec
   Copyright (C) 2020 Hans de Goede <hdegoede@redhat.com>
   Loosely based on bytcr_rt5640.c which is:
   Copyright (C) 2014-2020 Intel Corp
   Author: Subhransu S. Prusty <subhransu.s.prusty@intel.com>
 max sysclk for 4K family 
 max sysclk for 11.025K family 
 Reset FLL1 
 Configure the FLL1 PLL before selecting it 
		
		  The WM5102 has a separate 32KHz clock for jack-detect
		  so we can disable the PLL, followed by disabling the
		  platform clock which is the source-clock for the PLL.
	
	  The Headset Mix uses MICBIAS1 or 2 depending on if a CTIAOMTP Headset
	  is connected, as the MICBIAS is applied after the CTIAOMTP cross-switch.
	
	  The firmware might enable the clock at boot (this information
	  may or may not be reflected in the enable clock register).
	  To change the rate we must disable the clock first to cover these
	  cases. Due to common clock framework restrictions that do not allow
	  to disable a clock that has not been enabled, we need to enable
	  the clock first.
 The DSP will covert the FE rate to 48k, stereo 
 set SSP0 to 16-bit 
	
	  Default mode for SSP configuration is TDM 4 slot, override config
	  with explicit setting to I2S 2ch 16-bit. The word length is set with
	  dai_set_tdm_slot() since there is no other API exposed
	
	  Note there is no need to overwrite the codec-name as is done in
	  other bytcr machine drivers, because the codec is a MFD child-dev.
 back ends 
		
		  This must be named SSP2-Codec even though this machine driver
		  always uses SSP0. Most machine drivers support both and dynamically
		  update the dailink to point to SSP0 or SSP2, while keeping the name
		  as "SSP2-Codec". The SOF tplg files hardcode the "SSP2-Codec" even
		  in the byt-foo-ssp0.tplg versions because the other machine-drivers
		  use "SSP2-Codec" even when SSP0 is used.
 use space before codec name to simplify card ID, and simplify driver name 
 card name will be 'sof-bytcht wm5102' 
 card name will be used for driver name 
 SoC card 
 Get MCLK 
	
	  Get speaker VDD enable GPIO:
	  1. Get codec-device-name
	  2. Get codec-device
	  3. Get GPIO from codec-device
 Note no devm_ here since we call gpiod_get on codec_dev rather then dev 
 override platform name, if required 
 set card and driver name and pm-ops 
 SPDX-License-Identifier: GPL-2.0-only
 Copyright(c) 2021 Intel Corporation.
  Intel SOF Machine Driver with es8336 Codec
	
	  There is no separate speaker output instead the speakers are muxed to
	  the HP outputs. The mux is controlled by the "Speaker Power" supply.
 digital mics 
 dai_link id is 1:1 mapped to the PCM device 
 machine stream operations 
 name might be overridden during probe 
 SoC card 
 sof- prefix added automatically 
 codec SSP 
 dmic 
 at least we have dmic01 
 set up 2 BE links at most 
 HDMI dai link starts at 3 according to current topology settings 
 HDMI 
 i2c-<HID>:00 with HID being 8 chars 
 fixup codec name based on HID 
 get speaker enable GPIO 
 SPDX-License-Identifier: GPL-2.0-only
   byt_cr_dpcm_rt5640.c - ASoc Machine driver for Intel Byt CR platform
   Copyright (C) 2014 Intel Corp
   Author: Subhransu S. Prusty <subhransu.s.prusty@intel.com>
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 default is single-ended 
 default is using AIF1  
 in-diff or dmic-pin + jdsrc + ovcd-th + -sf + jd-inv + terminating entry 
 Configure the PLL before selecting it 
 use bitclock as PLL input 
 2x16 bit slots on SSP0 
 2x15 bit slots on SSP2 
		
		  Set codec clock source to internal clock before
		  turning off the platform clock. Codec needs clock
		  for Jack detection and button press
	
	  On devices which use line-out as a second headphones output,
	  the codec's GPIO1 pin is used to enable an external HP-amp.
 The 2nd headset jack uses lineout with an external HP-amp 
 Please keep this list alphabetically sorted 
 Acer Iconia Tab 8 W1-810 
 Acer One 10 S1002 
 Chuwi Vi8 (CWI506) 
 The above are too generic, also match BIOS info 
 Chuwi Vi10 (CWI505) 
 Chuwi Hi8 (CWI509) 
 Connect Tablet 9 
 Estar Beauty HD MID 7316R 
 Glavey TM800A550L 
 Above strings are too generic, also match on BIOS version 
 HP Pavilion x2 10-k0XX, 10-n0XX 
 HP Pavilion x2 10-p0XX 
 HP Stream 7 
 I.T.Works TW891 
 Lamina I8270  T701BR.SE 
 Lenovo Miix 2 8 
 Lenovo Miix 3-830 
 Linx Linx7 tablet 
 Mele PCG03 Mini PC 
 MPMAN Converter 9, similar hw as the I.T.Works TW891 2-in-1 
 MPMAN MPWIN895CL 
 MSI S100 tablet 
 NuvisonTMax TM800W560 
 Onda v975w 
 The above are too generic, also match BIOS info 
 Pipo W4 
 The above are too generic, also match BIOS info 
 Point of View Mobii TAB-P800W (V2.0) 
 The above are too generic, also match BIOS info 
 Point of View Mobii TAB-P800W (V2.1) 
 The above are too generic, also match BIOS info 
 Point of View Mobii TAB-P1005W-232 (V2.0) 
 Prowise PT301 
 Teclast X89 
 Toshiba Satellite Click Mini L9W-B 
 Toshiba Encore WT8-A 
 Toshiba Encore WT10-A 
 Voyo Winpad A15 
 Above strings are too generic, also match on BIOS date 
 Catch-all for generic Insyde tablets, must be last 
  Note this MUST be called before snd_soc_register_card(), so that the props
  are in place before the codec component driver's probe function parses them.
 put_device() is handled in caller 
 Start with RC clk for jack-detect (we disable MCLK below) 
	
	  The firmware might enable the clock at boot (this information
	  may or may not be reflected in the enable clock register).
	  To change the rate we must disable the clock first to cover
	  these cases. Due to common clock framework restrictions that
	  do not allow to disable a clock that has not been enabled,
	  we need to enable the clock first.
 The DSP will covert the FE rate to 48k, stereo 
 set SSP0 to 16-bit 
 set SSP2 to 24-bit 
	
	  Default mode for SSP configuration is TDM 4 slot, override config
	  with explicit setting to I2S 2ch. The word length is set with
	  dai_set_tdm_slot() since there is no other API exposed
 overwritten for ssp0 routing 
 overwritten with HID  "i2c-10EC5640:00",
 changed w quirk 	"rt5640-aif1")));
 back ends 
 SoC card 
 = "bytcr-rt5640--spk--mic" 
 = "cfg-spk: cfg-mic: ..." 
 use space before codec name to simplify card ID, and simplify driver name 
 card name will be 'sof-bytcht rt5640' 
 card name will be used for driver name 
 ACPICA seems to require 64 bit integers 
 1: AIF1, 2: AIF2 
 usually 25MHz (0x17d7940), ignored 
 register the soc card 
 fix index of codec dai 
 fixup codec name based on HID 
	
	  swap SSP0 if bytcr is detected
	  (will be overridden if DMI quirk is detected)
		
		  Baytrail CR platforms may have CHAN package in BIOS, try
		  to find relevant routing quirk based as done on Windows
		  platforms. We have to read the information directly from the
		  BIOS, at this stage the card is not created and the links
		  with the codec driverpdata are non-existent
 format specified: 2 64-bit integers 
 no BIOS indications, assume SSP0-AIF2 connection 
 change defaults for Baytrail-CR capture 
 check quirks before creating card 
 Must be called before register_card, also see declaration comment. 
		
		  Fall back to bit clock usage when clock is not
		  available likely due to missing dependencies.
 override plaform name, if required 
 set card and driver name 
 set pm ops 
 SPDX-License-Identifier: GPL-2.0-only
  Intel Haswell Lynxpoint SST Audio
  Copyright (C) 2013, Intel Corporation. All rights reserved.
 Haswell ULT platforms have a Headphone and Mic jack 
 CODEC BE connections 
 The ADSP will covert the FE rate to 48k, stereo 
 set SSP0 to 16 bit 
 set correct codec filter for DAI format and clock config 
 Front End DAI links 
 Back End DAI links 
 SSP0 - Codec 
 audio machine driver for Haswell Lynxpoint DSP + RT5640 
 override plaform name, if required 
 Module information 
 SPDX-License-Identifier: GPL-2.0-only
  ASoC machine driver for Intel Broadwell platforms with RT5677 codec
  Copyright (c) 2014, The Chromium OS Authors.  All rights reserved.
 Speakers 
 Headset jack connectors 
	 Digital MICs
	  Local DMICs: the two DMICs on the mainboard
	  Remote DMICs: the two DMICs on the camera module
 CODEC BE connections 
 DSP Clock Connections 
 GPIO indexes defined by ACPI 
 The ADSP will covert the FE rate to 48k, stereo 
 set SSP0 to 16 bit 
 Board supports stereo configuration only 
	 Enable codec ASRC function for Stereo DACStereo1 ADCDMICI2S1.
	  The ASRC clock source is clk_i2s1_asrc.
	 Enable codec ASRC function for Mono ADC L.
	  The ASRC clock source is clk_sys2_asrc.
 Request rt5677 GPIO for headphone amp control 
 Create and initialize headphone jack 
 Create and initialize mic jack 
	
	  The .exit() can be reached without going through the .init()
	  so explicitly test if the gpiod is valid
 broadwell digital audio interface glue - connects codec <--> CPU 
 Wake on voice interface 
 Front End DAI links 
 Non-DPCM links 
 Back End DAI links 
 SSP0 - Codec 
 use space before codec name to simplify card ID, and simplify driver name 
 card name will be 'sof-bdw rt5677' 
 card name will be used for driver name 
 ASoC machine driver for Broadwell DSP + RT5677 
 Allocate driver private struct 
 override plaform name, if required 
 set card and driver name 
 Module information 
 SPDX-License-Identifier: GPL-2.0-only
 Copyright (c) 2020 Intel Corporation
   sof_sdw_rt700 - Helpers to handle RT700 from generic machine driver
 Headphones 
	
	  headset should be initialized once.
	  Do it with dai link for playback.
 SPDX-License-Identifier: GPL-2.0-only
 Copyright(c) 2018-19 Canonical Corporation.
  Intel Kabylake I2S Machine Driver with RT5660 Codec
  Modified from:
    Intel Kabylake I2S Machine driver supporting MAXIM98357a and
    DA7219 codecs
  Also referred to:
    Intel Broadwell I2S Machine driver supporting RT5677 codec
 other jacks 
 CODEC BE connections 
 The ADSP will convert the FE rate to 48k, stereo 
 set SSP0 to 24 bit 
 Request rt5660 GPIO for lineout mute control, return if fails 
 Create and initialize headphone jack, this jack is not mandatory, don't return if fails 
 Create and initialize mic jack, this jack is not mandatory, don't return if fails 
 Here we enable some dapms in advance to reduce the pop noise for recording via line-in 
	
	  The .exit() can be reached without going through the .init()
	  so explicitly test if the gpiod is valid
	
	  On this platform for PCM device we support,
	  48Khz
	  stereo
	  16 bit audio
 kabylake digital audio interface glue - connects rt5660 codec <--> CPU 
 Front End DAI links 
 Back End DAI links 
 SSP0 - Codec 
 kabylake audio machine driver for rt5660 
 Module information 
 SPDX-License-Identifier: GPL-2.0-only
  Intel Broxton-P I2S Machine Driver
  Copyright (C) 2014-2016, Intel Corporation. All rights reserved.
  Modified from:
    Intel Skylake I2S Machine driver
 Headset jack detection DAPM pins 
 speaker 
 HP jack connectors - unknown if we have jack detect 
 other jacks 
 digital mics 
 CODEC BE connections 
 speaker 
 HP jack connectors - unknown if we have jack detect 
 other jacks 
 digital mics 
 CODEC BE connections 
 The ADSP will covert the FE rate to 48k, stereo 
 set SSP5 to 24 bit 
	
	  on this platform for PCM device we support:
	       48Khz
	       stereo
	 	16-bit audio
 broxton digital audio interface glue - connects codec <--> CPU 
 Front End DAI links 
 Back End DAI links 
 SSP5 - Codec 
 broxton audio machine driver for SPT + RT298S 
 override plaform name, if required 
 Module information 
 SPDX-License-Identifier: GPL-2.0-only
  Intel Skylake I2S Machine Driver with MAXIM98357A
  and NAU88L25
  Copyright (C) 2015, Intel Corporation. All rights reserved.
 HP jack connectors - unknown if we have jack detection 
 speaker 
 other jacks 
 CODEC BE connections 
 DMIC 
 The ADSP will covert the FE rate to 48k, stereo 
 set SSP0 to 24 bit 
	
	  Headset buttons map to the google Reference headset.
	  These can be configured by userspace.
	
	  On this platform for PCM device we support,
	  48Khz
	  stereo
	  16 bit audio
 skylake digital audio interface glue - connects codec <--> CPU 
 Front End DAI links 
 Back End DAI links 
 SSP0 - Codec 
 SSP1 - Codec 
 skylake audio machine driver for SPT + NAU88L25 
 Module information 
 SPDX-License-Identifier: GPL-2.0-only
 Copyright(c) 2019 Intel Corporation. All rights reserved.
  Search card topology and return PCM device number
  matching Nth HDMI device (zero-based index).
  Search card topology and register HDMI PCM related controls
  to codec driver.
 SPDX-License-Identifier: GPL-2.0-only
  ASoC machine driver for Intel Broadwell platforms with RT5650 codec
  Copyright 2019, The Chromium OS Authors.  All rights reserved.
 Speakers 
 Headset jack connectors 
	 Digital MICs
	  DMIC Pair1 are the two DMICs connected on the DMICN1 connector.
	  DMIC Pair2 are the two DMICs connected on the DMICN2 connector.
	  Facing the camera, DMIC Pair1 are on the left side, DMIC Pair2
	  are on the right side.
 CODEC BE connections 
 The ADSP will covert the FE rate to 48k, max 4-channels 
 set SSP0 to 24 bit 
	 Workaround: set codec PLL to 19.2MHz that PLL source is
	  from MCLK(24MHz) to conform 2.4MHz DMIC clock.
	 The actual MCLK freq is 24MHz. The codec is told that MCLK is
	  24.576MHz to satisfy the requirement of rl6231_get_clk_info.
	  ASRC is enabled on AD and DA filters to ensure good audio quality.
 Board supports stereo and quad configurations for capture 
	 Enable codec ASRC function for Stereo DACStereo1 ADCDMICI2S1.
	  The ASRC clock source is clk_i2s1_asrc.
 TDM 4 slots 24 bit, set Rx & Tx bitmask to 4 active slots 
 Create and initialize headphone jack 
 Create and initialize mic jack 
 broadwell digital audio interface glue - connects codec <--> CPU 
 Front End DAI links 
 Back End DAI links 
 SSP0 - Codec 
 use space before codec name to simplify card ID, and simplify driver name 
 card name will be 'sof-bdw rt5650' 
 card name will be used for driver name 
 ASoC machine driver for Broadwell DSP + RT5650 
 Allocate driver private struct 
 override plaform name, if required 
 set card and driver name 
 Module information 
 SPDX-License-Identifier: GPL-2.0-only
  Intel Skylake I2S Machine Driver for NAU88L25+SSM4567
  Copyright (C) 2015, Intel Corporation. All rights reserved.
  Modified from:
    Intel Skylake I2S Machine Driver for NAU88L25 and SSM4567
    Copyright (C) 2015, Intel Corporation. All rights reserved.
 HP jack connectors - unknown if we have jack detection 
 speaker 
 other jacks 
 CODEC BE connections 
 IV feedback path 
 DMIC 
 Slot 1 for left 
 Slot 2 for right 
	
	  4 buttons here map to the google Reference headset
	  The use of these buttons can be decided by the user space.
	
	  on this platform for PCM device we support,
	 	48Khz
	 	stereo
	 	16 bit audio
 The ADSP will covert the FE rate to 48k, stereo 
 set SSP0 to 24 bit 
 Left 	COMP_CODEC("i2c-INT343B:00", SKL_SSM_CODEC_DAI),
 Right 	COMP_CODEC("i2c-INT343B:01", SKL_SSM_CODEC_DAI)));
 skylake digital audio interface glue - connects codec <--> CPU 
 Front End DAI links 
 Back End DAI links 
 SSP0 - Codec 
 SSP1 - Codec 
 skylake audio machine driver for SPT + NAU88L25 
 Module information 
 SPDX-License-Identifier: GPL-2.0-only
 Copyright (C) 2020 Intel Corporation.
 Intel KeemBay Platform driver.
  Convert to ADV7511 HDMI hardware format.
  ADV7511 HDMI chip need parity bit replaced by block start bit and
  with the preamble bits left out.
  ALSA IEC958 subframe format:
  bit 0-3  = preamble (0x8 = block start)
      4-7  = AUX (=0)
      8-27 = audio data (without AUX if 24bit sample)
      28   = validity
      29   = user data
      30   = channel status
      31   = parity
  ADV7511 IEC958 subframe format:
  bit 0-23  = audio data
      24    = validity
      25    = user data
      26    = channel status
      27    = block start
      28-31 = 0
  MSB to LSB bit reverse by software as hardware not supporting it.
 Replace parity with block start
 KMB i2s uses two separate LR FIFO 
 KMB i2s uses two separate LR FIFO 
 Disable all channels regardless of configuration
 Only check TX interrupt if TX is active 
	
	  Data available. Retrieve samples from FIFO
	
	  8 channel audio will have isr[0..2] triggered,
	  reading the specific isr based on the audio configuration,
	  to avoid reading the buffers too early.
		
		  Check if TX fifo is empty. If empty fill FIFO with samples
 Error Handling: TX 
 Error Handling: RX 
 Use SNDRV_DMA_TYPE_CONTINUOUS as KMB doesn't use PCI sg buffer 
 Enable DMA handshake for stream 
 Disable DMA handshake for stream 
 I2S Programming sequence in Keem_Bay_VPU_DB_v1.1 
 I2S Programming sequence in Keem_Bay_VPU_DB_v1.1 
		 Keep track of i2s activity before turn off
		  the i2s interface
		
		  Platform is not capable of providing clocks for
		  multi channel audio
		
		  Platform is only capable of providing clocks need for
		  2 channel master mode
 Only 2 ch supported in Master mode 
 I2S Programming sequence in Keem_Bay_VPU_DB_v1.1 
 Prepare the related clocks 
 To ensure none of the channels are enabled at boot up 
 SPDX-License-Identifier: GPL-2.0-only
 Copyright(c) 2020 Intel Corporation. All rights reserved.
 Author: Cezary Rojewski <cezary.rojewski@intel.com>
  Either engine 0 or 1 can be used for image loading.
  Align with Windows driver equivalent and stick to engine 1.
 enable demand mode for dma channel 
 regardless of status, disable access to HOST memory in demand mode 
	
	  Caller is responsible for putting device in D0 to allow
	  for IO and memory access before probing DW.
	
	  As do_dma_remove() juggles with pm_runtime_get_xxx() and
	  pm_runtime_put_xxx() while both ADSP and DW 'devices' are part of
	  the same module, caller makes sure pm_runtime_disable() is invoked
	  before removing DW to prevent postmortem resume and suspend.
 wait for SRAM power gating to propagate 
	
	  Dummy read as the very first access after block enable
	  to prevent byte loss in future operations.
 newly enabled: new bit=0 while old bit=1 
 flag all busy blocks 
 offset value given mask's start and invert it as ON=b0 
 disable core clock gating 
 enable core clock gating 
 wait for DSP to signal WAIT state 
 no signal - only high clock selection allowed 
 default to DSP core & audio fabric high clock 
 update PLL accordingly 
 bring registers to their defaults as HW won't reset itself 
 disable core clock gating 
 set 24Mhz clock for both SSPs 
 disable MCLK 
 switch clock gating 
 enable DTCGE separatelly 
 SRAM power gating all 
 give hw time to drop off 
 enable core clock gating 
 disable core clock gating 
 switch clock gating 
 SRAM power gating none 
 restore MCLK 
 set 24Mhz clock for both SSPs 
 enable core clock gating 
 generate int deassert msg to fix inversed int logic 
 account for header of each section and hash chunk 
 navigate to fifth info segment (fw hash) 
 info segments are separated by space each 
 SPDX-License-Identifier: GPL-2.0-only
 Copyright(c) 2020 Intel Corporation. All rights reserved.
 Author: Cezary Rojewski <cezary.rojewski@intel.com>
 FW load (200ms) plus operational delays 
 DRAM with module's initial state 
 advance to data area 
 calculate start offset of common data area 
 advance to data area 
 restore basefw image 
 then proceed with memory dumps 
 restore module state 
		
		  Save state window coordinates - these will be
		  used to capture module state on D0 exit.
 init module type static info 
 DSP expects address from module header substracted by 4 
 update sram pg & clock once done booting 
 restrict FW Core dump area 
 restrict entire area following BASE_FW - highest offset in DRAM 
 update dram pg for scratch and restricted regions 
 SPDX-License-Identifier: GPL-2.0-only
 Copyright(c) 2020 Intel Corporation. All rights reserved.
 Author: Cezary Rojewski <cezary.rojewski@intel.com>
 flex array with entries here 
 obsolete 
 re-arrange the input: account for flex array 'entries' 
 SPDX-License-Identifier: GPL-2.0-only
 Copyright(c) 2020 Intel Corporation. All rights reserved.
 Author: Cezary Rojewski <cezary.rojewski@intel.com>
 account for capture in bidirectional dais 
 incrementing by 2 on even and 3 on odd 
 only selected streams have individual controls 
 only offload is set_write_pos driven 
		
		  Dsp operates on buffer halves, thus max 2x set_write_pos
		  (entire buffer filled) prior to stream start.
 only offload is set_write_pos driven 
	
	  Dsp operates on buffer halves, thus on every notify position
	  (buffer half consumed) update wp to allow stream progression.
 200 ms for 2 32-bit channels at 48kHz (native format) 
 see if this is a new configuration 
 store device format set for given SSP 
 FE DAIs 
 BE DAIs 
 0db 
 Master volume (mixer stream) 
 Individual volume controls for offload and capture 
 Enable or disable WAVES module 
 WAVES module parameter control 
 allocate single scratch area for all modules 
 SPDX-License-Identifier: GPL-2.0-only
 Copyright(c) 2020 Intel Corporation. All rights reserved.
 Author: Cezary Rojewski <cezary.rojewski@intel.com>
	
	  Both tx and rx are put into and received from outbox. Inbox is
	  only used for notifications where payload size is known upfront,
	  thus no separate buffer is allocated for it.
 wait for delayed reply 
 TODO: attempt recovery 
 to fit 32b header original address is shifted right by 3 
 TODO: attempt recovery 
 signal completion of delayed reply 
 ensure there is delayed reply or notification to process 
 tell DSP processing is completed 
 unmask dsp BUSY interrupt 
 immediate reply 
 mask host DONE interrupt 
 tell DSP processing is completed 
 unmask host DONE interrupt 
 delayed reply or notification 
 mask dsp BUSY interrupt 
 SPDX-License-Identifier: GPL-2.0-only
 Copyright(c) 2020 Intel Corporation. All rights reserved.
 Author: Cezary Rojewski <cezary.rojewski@intel.com>
 SPDX-License-Identifier: GPL-2.0-only
 Copyright(c) 2020 Intel Corporation. All rights reserved.
 Author: Cezary Rojewski <cezary.rojewski@intel.com>
 Special thanks to:
    Marcin Barlik <marcin.barlik@intel.com>
    Piotr Papierkowski <piotr.papierkowski@intel.com>
 for sharing LPT-LP and WTP-LP AudioDSP architecture expertise and
 helping backtrack its historical background
 reconfigure SSP devices after Dx transition 
 machine board owned by CATPT is removed with this hook 
 reflect actual ADSP state in pm_runtime 
	
	  Mark both device formats as uninitialized. Once corresponding
	  cpu_dai's pcm is created, proper values are assigned.
 map DSP bar address 
 map PCI bar address 
 alloc buffer for storing DRAM context during dx transitions 
 SPDX-License-Identifier: GPL-2.0-only
   skl-nhlt.c - Intel SKL Platform NHLT parsing
   Copyright (C) 2015 Intel Corp
   Author: Sanjiv Kumar <sanjiv.kumar@intel.com>
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			
			  if link type is dmic ignore rate check as the blob is
			  generic for all rates
 do not check dev_type for DMIC link type 
  Queries NHLT for all the fmt configuration for a particular endpoint and
  stores all possible rates supported in a rate table for the corresponding
  sclksclkfs.
		
		  In case of TDM configuration on a ssp, there can
		  be more than one blob in which channel masks are
		  different for each usecase for a specific rate and bps.
		  But the sclk rate will be generated for the total
		  number of channels used for that endpoint.
		 
		  So for the given fs and bps, choose blob which has
		  the superset of all channels for that endpoint and
		  derive the rate.
 check if the rate is added already to the given SSP's sclk 
 Fill rate and parent for sclksclkfs 
 MCLK Divider Source Select 
			
			  Do not copy the config data if there is no parent
			  clock available for this clock source select
 MCLK Divider Source Select and divider 
 bypass divider 
 Divider is 2 + clkdiv 
 Calculate MCLK rate from source using div value 
 SPDX-License-Identifier: GPL-2.0-only
   skl-debug.c - Debugfs for skl driver
   Copyright (C) 2016-17 Intel Corp
 print newline for each offset 
 create the debugfs dir with platform component's debugfs as parent 
 now create the module dir 
 SPDX-License-Identifier: GPL-2.0-only
   bxt-sst.c - DSP library functions for BXT platform
   Copyright (C) 2015-16 Intel Corp
   Author:Rafal Redzimski <rafal.f.redzimski@intel.com>
 	   Jeeja KP <jeeja.kp@intel.com>
 Firmware status window 
 Delay before scheduling D0i3 entry 
 library indices start from 1 to N. 0 represents base FW 
  First boot sequence has some extra steps. Core 0 waits for power
  status on core 1, so power up core 1 also momentarily, keep it in
  resetstall and then turn it off
 Step 1: Power up core 0 and core1 
 Step 2: Purge FW request 
 Step 3: Unset core0 reset state & unstallrun core0 
 Step 4: Wait for DONE Bit 
 Step 5: power down core1 
 Step 6: Enable Interrupt 
 Step 7: Wait for ROM init 
 prase uuids on first boot 
  Decide the D0i3 state that can be targeted based on the usecase
  ref counts and DSP state
  Decision Matrix:  (X= dont care; state = target state)
  DSP state != SKL_DSP_RUNNING ; state = no d0i3
  DSP state == SKL_DSP_RUNNING , the following matrix applies
  non_d0i3 >0; streaming =X; non_streaming =X; state = no d0i3
  non_d0i3 =X; streaming =0; non_streaming =0; state = no d0i3
  non_d0i3 =0; streaming >0; non_streaming =X; state = streaming d0i3
  non_d0i3 =0; streaming =0; non_streaming =X; state = non-streaming d0i3
 D0i3 entry allowed only if core 0 alone is running 
 Set Vendor specific register D0I3C.I3 to enable D0i3
 Schedule D0i3 only if the usecase ref counts are appropriate 
 First Cancel any pending attempt to put DSP to D0i3 
 If DSP is currently in D0i3, bring it to D0i0 
 Clear Vendor specific register D0I3C.I3 to disable D0i3
 If core 0 is being turned on, turn on core 1 as well 
		
		  Enable interrupt after SPA is set and before
		  DSP is unstalled
 If core 1 was turned on for booting core 0, turn it off 
 Tell FW if additional core in now On 
		
		  In case of D3 failure, re-download the firmware, so set
		  fw_loaded to false.
 disable Interrupt 
 set the D0i3 check 
 SPDX-License-Identifier: GPL-2.0-only
  skl-sst.c - HDA DSP library functions for SKL platform
  Copyright (C) 2014-15, Intel Corporation.
  Author:Rafal Redzimski <rafal.f.redzimski@intel.com>
 	Jeeja KP <jeeja.kp@intel.com>
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 Intel HD Audio SRAM Window 0
 Firmware status window 
 prase uuids on first boot 
 check for extended manifest 
 enable Interrupt 
 check ROM Status 
 If core0 is being turned on, we need to load the FW 
 load libs as they are also lost on D3 
	
	  If any core other than core 0 is being moved to D0, enable the
	  core and send the set dx IPC for the core.
 disable Interrupt 
  since getset_module are called from DAPM context,
  we don't need lock for usage count
 get a module from it's unique ID 
 check is_module flag to load module or library 
	
	  if bytes_left > 0 then wait for BDL complete interrupt and
	  copy the next chunk till bytes_left is 0. if bytes_left is
	  zero, then wait for load module IPC reply
 library indices start from 1 to N. 0 represents base FW 
 guid str = 32 chars + 4 hyphens 
 if module is used by others return, no need to unload 
 SPDX-License-Identifier: GPL-2.0-only
  cnl-sst.c - DSP library functions for CNL platform
  Copyright (C) 2016-17, Intel Corporation.
  Author: Guneshwor Singh <guneshwor.o.singh@intel.com>
  Modified from:
 	HDA DSP library functions for SKL platform
 	Copyright (C) 2014-15, Intel Corporation.
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 Firmware status window 
 purge FW request 
 enable interrupt 
 parse uuids if first boot 
 enable interrupt 
 disable interrupts if core 0 
 here we handle ipc interrupts only 
 reply message from dsp 
 clear done bit - tell dsp operation is complete 
 unmask done interrupt 
 new message from dsp 
 Handle Immediate reply from DSP Core 
 clear busy interrupt 
 set done bit to ack dsp 
 continue to send any remaining messages 
	
	  overriding tx_msg and is_dsp_busy since
	  ipc registers are different for cnl
 SPDX-License-Identifier: GPL-2.0-only
  skl-sst-dsp.c - SKL SST library generic function
  Copyright (C) 2014-15, Intel Corporation.
  Author:Rafal Redzimski <rafal.f.redzimski@intel.com>
 	Jeeja KP <jeeja.kp@intel.com>
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 various timeout values 
  Initialize core power state and usage count. To be called after
  successful first boot. Hence core 0 will be running and other cores
  will be reset
 Get the mask for all enabled cores 
 Cores having CPA bit set 
 And cores having CRST bit cleared 
 And cores having CSTALL bit cleared 
 update bits 
 poll with timeout to check if operation successful 
 update bits 
 poll with timeout to check if operation successful 
 stall core 
 set reset state 
 unset reset state 
 run core 
 update bits 
 poll with timeout to check if operation successful 
 update bits 
 poll with timeout to check if operation successful 
 power up 
 power down core
  skl_dsp_get_coreskl_dsp_put_core will be called inside DAPM context
  within the dapm mutex. Hence no separate lock is used.
 Initialise SST Audio DSP 
 Register the ISR 
 SPDX-License-Identifier: GPL-2.0-only
   skl.c - Implementation of ASoC Intel SKL HD Audio driver
   Copyright (C) 2014-2015 Intel Corp
   Author: Jeeja KP <jeeja.kp@intel.com>
   Derived mostly from Intel HDA driver with following copyrights:
   Copyright (c) 2004 Takashi Iwai <tiwai@suse.de>
                      PeiSen Hou <pshou@realtek.com.tw>
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  initialize the PCI registers
	
	  Clear bits 0-2 of PCI register TCSEL (at offset 0x44)
	  TCSEL == Traffic Class Select Register, which sets PCI express QOS
	  Ensuring these bits are 0 clears playback static on some HD Audio
	  codecs.
	  The PCI register TCSEL is defined in the Intel manuals.
  skl_enable_miscbdcge - enabledsiable CGCTL.MISCBDCGE bits
  @dev: device pointer
  @enable: enabledisable flag
  skl_clock_power_gating: EnableDisable clock and power gating
  @dev: Device pointer
  @enable: EnableDisable flag
 Update PDCGE bit of CGCTL register 
 Update L1SEN bit of EM2 register 
 Update ADSPPGD bit of PGCTL register 
  While performing reset, controller may not come back properly causing
  issues, so recommendation is to set CGCTL.MISCBDCGE to 0 then do reset
  (init chip) and then again set CGCTL.MISCBDCGE to 1
 Reset stream-to-link mapping 
 Do not write to D0I3C until command in progress bit is cleared 
 Highly unlikely. But if it happens, flag error explicitly 
 Wait for cmd in progress to be cleared before exiting the function 
 Highly unlikely. But if it happens, flag error explicitly 
  skl_dum_set - set DUM bit in EM2 register
  @bus: HD-audio core bus
  Addresses incorrect position reporting for capture streams.
  Used on device power up.
 For the DUM bit to be set, CRST needs to be out of reset state 
 called from IRQ 
 clear rirb int 
  power management
	
	  Do not suspend if streams which are marked ignore suspend are
	  running, we need to save the state for these and continue
 turn off the links and stop the CORBRIRB DMA if it is On 
	
	  resume only when we are not in suspend active, otherwise need to
	  restore the device
		
		  turn On the links which are On before active suspend
		  and start the CORBRIRB DMA if On before
		  active suspend.
 turn off the links which are off before suspend 
 CONFIG_PM_SLEEP 
 CONFIG_PM 
  destructor
 to be sure 
  For each ssp there are 3 clocks (mclksclksclkfs).
  e.g. for ssp0, clocks will be named as
       "ssp0_mclk", "ssp0_sclk", "ssp0_sclkfs"
  So for skl+, there are 6 ssps, so 18 clocks will be created.
 point to common table 
 all entries in the machine table use the same firmware 
 SKL has one dmic port, so allocate dmic device for this 
 Query NHLT to fill the rates and parent 
 Register Platform device 
  load the legacy codec driver
 CONFIG_SND_SOC_INTEL_SKYLAKE_HDAUDIO_CODEC 
  Probe the given codec address
 use legacy bus only for HDA codecs, idisp uses ext bus 
 CONFIG_SND_SOC_INTEL_SKYLAKE_HDAUDIO_CODEC 
 Codec initialization 
 First try to probe all given codec slots 
				
				  Some BIOSen give you wrong codec addresses
				  that don't exist
				
				  More badly, accessing to a non-existing
				  codec often screws up the controller bus,
				  and disturbs the further communications.
				  Thus if an error occurs during probing,
				  better to reset the controller bus to get
				  back to the sanity state.
	
	  The HDMI codec is in GPU so we need to ensure that it is powered
	  up and ready for probe
 codec detection 
 create codec instances 
 register platform dai and controls 
	
	  we are done probing so decrement link counts
 configure PM 
  constructor
 check if PPCAP exists 
 read number of streams from GCAP register 
 allow 64bit DMA address if supported by HW 
 initialize streams 
 we use ext core ops, so provide NULL for ops here 
 create device for dsp clk 
 create device for soc dmic 
 codec removal, invoke bus_device_remove 
 PCI IDs 
 Sunrise Point-LP 
 BXT-P 
 KBL 
 GLK 
 CNL 
 CFL 
 CML-LP 
 CML-H 
 pci_driver definition 
 SPDX-License-Identifier: GPL-2.0-only
   skl-message.c - HDA DSP interface for FW registration, Pipe and Module
   configurations
   Copyright (C) 2015 Intel Corp
   Author:Rafal Redzimski <rafal.f.redzimski@intel.com>
 	   Jeeja KP <jeeja.kp@intel.com>
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 enabledisable SPIB for this hdac stream 
 set the spib value 
 assign decouple host dma channel 
 enable ppcap interrupt 
 read the BAR of the ADSP MMIO 
 disable  ppcap interrupt 
  In the case of "suspend_active" i.e, the Audio IP being active
  during system suspend, immediately excecute any pending D0i3 work
  before suspending. This is needed for the IP to work in low power
  mode during system suspend. In the case of normal suspend, cancel
  any pending D0i3 work.
 if ppcap is not supported return 0 
 disable ppcap interrupt 
 if ppcap is not supported return 0 
 enable ppcap interrupt 
 check if DSP 1st boot is done 
	
	  Disable dynamic clock and power gating during firmware
	  and library download
  Each module in DSP expects a base module configuration, which consists of
  PCM format information, which we calculate in driver and resource values
  which are read from widget information passed through topology binary
  This is send when we create a module with INIT_INSTANCE IPC msg
  Any module configuration begins with a base module configuration but
  can be followed by a generic extension containing audio format for all
  module's pins that are in use.
  Copies copier capabilities into copier module and updates copier module
  config size.
  Calculate the gatewat settings required for copier module, type of
  gateway and index of gateway to use
 fallback to 2ms default value 
	
	  if blob size zero, then return
	
	  NHLT blob may contain additional configs along with i2s blob.
	  firmware expects only the i2s blob size as the config_length.
	  So fix to i2s blob size.
	  size in dwords.
  DSP needs SRC module for frequency conversion, SRC takes base module
  configuration and the target frequency as extra parameter passed as src
  config
  DSP needs updown module to do channel conversion. updown module take base
  module configuration and channel configuration
  It also take coefficients and now we have defaults applied here
  'copier' is DSP internal module which copies data from Host DMA (HDA host
  dma) or link (hda link, SSP, PDM)
  Here we calculate the copier module parameters, like PCM format, output
  format, gateway settings
  copier_module_config is sent as input buffer with INIT_INSTANCE IPC msg
  Mic select module allows selecting one or many input channels, thus
  acting as a demux.
  Mic select module take base module configuration and out-format
  configuration
  DSP firmware supports various modules like copier, SRC, updown etc.
  These modules required various parameters to be calculated and sent for
  the module initialization to DSP. By default a generic module needs only
  base module format configuration
  Allocates queue for each module.
  if dynamic, the pin_index is allocated 0 to max_pin.
  In static, the pin_index is fixed based on module_id and instance id
	
	  if pin in dynamic, find first free pin
	  otherwise find match module and instance id pin as topology will
	  ensure a unique pin is assigned to this so no need to
	  allocatefree
 Module state will be set to unint, if all the out pin state is UNBIND 
  A module needs to be instanataited in DSP. A mdoule is present in a
  collection of module referred as a PIPE.
  We first calculate the module format, based on module type and then
  invoke the DSP by sending IPC INIT_INSTANCE using ipc helper
  On module freeup, we need to unbind the module with modules
  it is already bind.
  Find the pin allocated and unbind then using bind_unbind IPC
 get src queue index 
 get dst queue index 
 free queue only if unbind is success 
		
		  check only if src module bind state, bind is
		  always from src -> sink
  Once a module is instantiated it need to be 'bind' with other modules in
  the pipeline. For binding we need to find the module pins which are bind
  together
  This function finds the pins and then sends bund_unbind IPC message to
  DSP using IPC helper
	
	  Copier module requires the separate large_config_set_ipc to
	  configure the pins other than 0
 Input fmt is same as that of src module input cfg 
 error case , if IPC fails, clear the queue index 
  A pipeline is a collection of modules. Before a module in instantiated a
  pipeline needs to be created for it.
  This function creates pipeline, by sending create pipeline IPC messages
  to FW
  A pipeline needs to be deleted on cleanup. If a pipeline is running,
  then pause it first. Before actual deletion, pipeline should enter
  reset state. Finish the procedure by sending delete pipeline IPC.
  DSP will stop the DMA engines and release resources
 If pipe was not created in FW, do not try to delete it 
 If pipe is started, do stop the pipe in FW. 
 reset pipe state before deletion 
  A pipeline is also a scheduling entity in DSP which can be run, stopped
  For processing data the pipe need to be run by sending IPC set pipe state
  to DSP
 If pipe was not created in FW, do not try to pause or delete 
 Pipe has to be paused before it is started 
  Stop the pipeline by sending set pipe state IPC
  DSP doesnt implement stop so we always send pause message
 If pipe was not created in FW, do not try to pause or delete 
  Reset the pipeline by sending set pipe state IPC this will reset the DMA
  from the DSP side
 If pipe was not created in FW, do not try to pause or delete 
 Algo parameter set helper function 
 SPDX-License-Identifier: GPL-2.0-only
   skl-pcm.c -ASoC HDA Platform driver file implementing PCM functionality
   Copyright (C) 2014-2015 Intel Corp
   Author:  Jeeja KP <jeeja.kp@intel.com>
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 legacy 
 avoid wrap-around with wall-clock 
  check if the stream opened is marked as ignore_suspend by machine, if so
  then enable suspend_active refcount
  The count supend_active does not need lock as it is used in openclose
  and suspend context
	
	  The recommended SDxFMT programming sequence for BXT
	  platforms is to couple the stream before writing the format
	
	  disable WALLCLOCK timestamps for capture streams
	  until we figure out how to handle digital inputs
 legacy 
	
	  In case of XRUN recovery or in the case when the application
	  calls prepare another time, reset the FW pipe to clean state
	
	  now we should set this to NULL as we are freeing by the
	  dma_params
	
	  check if close is for "Reference Pin" and set back the
	  CGCTL.MISCBDCGE if disabled by driver
			
			  enable DMA Resume enable bit for the stream, set the
			  dpib & lpib position to resume before starting the
			  DMA
		
		  Start HOST DMA and Start FE Pipe.This is to make sure that
		  there are no underrunoverrun in the case when the FE
		  pipeline is started but there is a delay in starting the
		  DMA channel on the host.
		
		  Stop FE Pipe first and stop DMA. This is to make sure that
		  there are no underrunoverrun in the case if there is a delay
		  between the two operations.
 save the dpib and lpib positions 
 set the stream tag in the codec dai dma params  
 In case of XRUN recovery, reset the FW pipe to clean state 
 BE CPU  Dais 
 first, set SYNC bits of corresponding streams 
 reset SYNC bits 
	
	  Use DPIB for Playback stream as the periodic DMA Position-in-
	  Buffer Writes may be scheduled at the same time or later than
	  the MSI and does not guarantee to reflect the Position of the
	  last buffer that was transferred. Whereas DPIB register in
	  HAD space reflects the actual data that is transferred.
	  Use the position buffer for capture, as DPIB write gets
	  completed earlier than the actual data written to the DDR.
	 
	  For capture stream following workaround is required to fix the
	  incorrect position reporting.
	 
	  1. Wait for 20us before reading the DMA position in buffer once
	  the interrupt is generated for stream completion as update happens
	  on the HDA frame boundary i.e. 20.833uSec.
	  2. Read DPIB register to flush the DMA position value. This dummy
	  read is required to flush DMA position value.
	  3. Read the DMA Position-in-Buffer. This value now will be equal to
	  or greater than period boundary.
 can be optimized 
 rest of struct is valid 
 24MHzWallClk == 42ns resolution 
 buffer pre-allocation 
 init debugfs 
 load the firmwares, since all is set 
		
		  Disable dynamic clock and power gating during firmware
		  and library download
 increment refcount when a pcm is opened 
 SPDX-License-Identifier: GPL-2.0-only
  skl-sst-cldma.c - Code Loader DMA handler
  Copyright (C) 2015, Intel Corporation.
  Author: Subhransu S. Prusty <subhransu.s.prusty@intel.com>
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 waiting for hardware to report that the stream Run bit set 
 make sure Run bit is cleared before setting stream register 
 Code loader helper APIs 
  Setup controller
  Configure the registers to update the dma buffer address and
  enable interrupts.
  Note: Using the channel 1 for transfer
	
	  Check if the size exceeds buffer boundary. If it exceeds
	  max_buffer size, then copy till buffer size and then copy
	  remaining buffer from the start of ring buffer.
  The CL dma doesn't have any way to update the transfer status until a BDL
  buffer is fully transferred
  So Copying is divided in two parts.
  1. Interrupt on buffer done where the size to be transferred is more than
     ring buffer size.
  2. Polling on fw register to identify if data left to transferred doesn't
     fill the ring buffer. Caller takes care of polling the required status
     register to identify the transfer status.
  3. if wait flag is set, waits for DBL interrupt to copy the next chunk till
     bytes_left is 0.
     if wait flag is not set, doesn't wait for BDL interrupt. after ccopying
     the first chunk return the no of bytes_left to be copied.
			
			  dma transfers only till the write pointer as
			  updated in spib
 Allocate cl ops 
 Allocate buffer
 Setup Code loader BDL 
 Allocate BDLs 
 SPDX-License-Identifier: GPL-2.0-only
   skl-sst-utils.c - SKL sst utils functions
   Copyright (C) 2016 Intel Corp
 FW Extended Manifest Header id = $AE1 
  skl_get_pvt_id: generate a private id for use as module id
  @skl: driver context
  @uuid_mod: module's uuid
  @instance_id: module's instance id
  This generates a 128 bit private unique id for a module TYPE so that
  module instance is unique
  skl_put_pvt_id: free up the private id allocated
  @skl: driver context
  @uuid_mod: module's uuid
  @pvt_id: module pvt id
  This frees a 128 bit private unique id previously generated
  Parse the firmware binary to get the UUID, module id
  and loadable flags
 Get the FW pointer to derive ADSP header 
 check if we have enough space in file to move to header 
 check 1st module entry is in file 
 check all entries are in file 
	
	  Read the UUID(GUID) from FW Manifest.
	 
	  The 16 byte UUID format is: XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXX
	  Populate the UUID table to store module_id and loadable flags
	  for the module.
  some firmware binary contains some extended manifest. This needs
  to be stripped in that case before we load and use that image.
  Get the module id for the module by checking
  the table for the UUID for the module
 check if fw file is greater than header we are looking 
 library indices start from 1 to N. 0 represents base FW 
 SPDX-License-Identifier: GPL-2.0-only
  cnl-sst-dsp.c - CNL SST library generic function
  Copyright (C) 2016-17, Intel Corporation.
  Author: Guneshwor Singh <guneshwor.o.singh@intel.com>
  Modified from:
 	SKL SST library generic function
 	Copyright (C) 2014-15, Intel Corporation.
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 various timeout values 
 update bits 
 poll with timeout to check if operation successful 
 update bits 
 poll with timeout to check if operation successful 
 stall core 
 set reset state 
 unset reset state 
 run core 
 update bits 
 poll with timeout to check if operation successful 
 update bits 
 poll with timeout to check if operation successful 
 power up 
 power down core
 enable IPC DONE interrupt 
 enable IPC BUSY interrupt 
 disable IPC DONE interrupt 
 disable IPC BUSY interrupt 
 SPDX-License-Identifier: GPL-2.0-only
   skl-topology.c - Implements Platform component ALSA controlswidget
   handlers.
   Copyright (C) 2014-2015 Intel Corp
   Author: Jeeja KP <jeeja.kp@intel.com>
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  SKL DSP driver modelling uses only few DAPM widgets so for rest we will
  ignore. This helpers checks if the SKL driver handles this widget type
		
		  For 2 channels with starting slot as 0, slot map will
		  look like 0xFFFFFF10.
		
		  16 bit is 16 bit container whereas 24 bit is in 32 bit
		  container so update bit depth accordingly
  A pipeline may have modules which impact the pcm parameters, like SRC,
  channel converter, format converter.
  We need to calculate the output params by applying the 'fixup'
  Topology will tell driver which type of fixup is to be applied by
  supplying the fixup mask, so based on that we calculate the output
  Now In FE the pcm hw_params is sourcetarget format. Same is applicable
  for BE with its hw_params invoked.
  here based on FE, BE pipeline and direction we calculate the input and
  outfix and then apply that for a module
 Fixups will be applied to pin 0 only 
  A module needs input and output buffers, which are dependent upon pcm
  params, so once we have calculate params, we need buffer calculation as
  well.
	 Since fixups is applied to pin 0 only, ibs, obs needs
	  change for pin 0 only
 check if we already have blob 
 update the blob based on virtual bus_id and default params 
  some modules can have multiple params set from user control and
  need to be set after module is initialized. If set_param flag is
  set module params will be done after module is initialised.
  some module param can set from user control and this is required as
  when module is initailzed. if module param is required in init it is
  identifed by set_param flag. if set_param flag is not set, then this
  parameter needs to set as part of module init.
  Inside a pipe instance, we can have various modules. These modules need
  to instantiated in DSP by invoking INIT_MODULE IPC, which is achieved by
  skl_init_module() routine, so invoke that for all modules in a pipeline
 check if module ids are populated 
 prepare the DMA if the module is gateway cpr 
 update blob if blob is null for be with default value 
		
		  apply fixconversion to module params based on
		  FEBE params
 don't return; continue with other modules 
 no modules to unload in this path, so return 
  Here, we select pipe format based on the pipe type and pipe
  direction to determine the current config index for the pipeline.
  The config index is then used to select proper module resources.
  Intermediate pipes currently have a fixed format hence we select the
  0th configuratation by default for such pipes.
  Mixer module represents a pipeline. So in the Pre-PMU event of mixer we
  need create the pipeline. So we do following:
    - Create the pipeline
    - Initialize the modules in pipeline
    - finally bind all modules together
	
	  Create a list of modules for pipe.
	  This list contains modules from source to sink
 Init all pipe modules from source to sink 
 Bind modules from source to sink 
	
	  When the destination module is initialized, check for these modules
	  in deferred bind list. If found, bind them.
  Some modules require params to be set after the module is bound to
  all pins connected.
  The module provider initializes set_param flag for such modules and we
  send params after binding
	
	  check all outin pins are in bind state.
	  if so set the module param
  Retrieve the module id from UUID mentioned in the
  post bind params
	
	  Post bind params are used for only for KPB
	  to set copier instances to drain the data
	  in fast mode
 only supported for module with static pin connection 
		
		  here we will check widgets in sink pipelines, so that
		  can be any widgets type and we are only interested if
		  they are ones used for SKL so check that first
			
			  Modules other than PGA leaf can be connected
			  directly or via switch to a module in another
			  pipeline. EX: reference path
			  when the path is enabled, the dst module that needs
			  to be bound may not be initialized. if the module is
			  not initialized, add these modules in the deferred
			  bind list and when the dst module is initialised,
			  bind this module to the dst_module in deferred list.
 Bind source to sink, mixin is always source 
 set module params after bind 
 Start sinks pipe first 
  A PGA represents a module in a pipeline. So in the Pre-PMU event of PGA
  we need to do following:
    - Bind to sink pipeline
       Since the sink pipes can be running and we don't get mixer event on
       connect for already running mixer, we need to find the sink pipes
       here and bind to them. This way dynamic connect works.
    - Start sink pipeline, if not running
    - Then run current pipe
	
	  find which sink it is connected to, bind with the sink,
	  if sink is not started, start sink pipe first, then start
	  this pipe
 Start source pipe last after starting all sinks 
		
		  here we will check widgets in sink pipelines, so that can
		  be any widgets type and we are only interested if they are
		  ones used for SKL so check that first
  in the Post-PMU event of mixer we need to do following:
    - Check if this pipe is running
    - if not, then
 	- bind this pipeline to its source pipeline
 	  if source pipe is already running, this means it is a dynamic
 	  connection and we need to bind only to that pipe
 	- start this pipeline
	
	  If source pipe is already started, that means source is driving
	  one more sink before this sink got connected, Since source is
	  started, bind this sink to source and start this pipe.
		
		  check pipe state, then no need to bind or start the
		  pipe
 set module params after bind 
  in the Pre-PMD event of mixer we need to do following:
    - Stop the pipe
    - find the source connections and remove that from dapm_path_list
    - unbind with source pipelines if still connected
 Stop the pipe 
  in the Post-PMD event of mixer we need to do following:
    - Unbind the modules within the pipeline
    - Delete the pipeline (modules are not required to be explicitly
      deleted, pipeline delete is enough here
			
			  When the destination module is deleted, Unbind the
			  modules from deferred bind list.
			
			  When the source module is deleted, remove this entry
			  from the deferred bind list.
  in the Post-PMD event of PGA we need to do following:
    - Stop the pipeline
    - In source pipe is connected, unbind with source pipelines
 Stop the pipe since this is a mixin module 
			
			  This is a connecter and if path is found that means
			  unbind between source and sink has not happened yet
  In modelling, we assume there will be ONLY one mixer in a pipeline. If a
  second one is required that is created as another pipe entity.
  The mixer is responsible for pipe management and represent a pipeline
  instance
  In modelling, we assumed rest of the modules in pipeline are PGA. But we
  are interested in last PGA (leaf PGA) in a pipeline to disconnect with
  the sink when it is running (two FE to one BE or one FE to two BE)
  scenarios
 decrement size for TLV header 
 check size as we don't want to send kernel data 
 enum control index 0 is INVALID, so no channels to be set 
 No valid channel selection map for index 0, so offset by 1 
 channel type enum map to number of chanels for that type 
  Fill the dma id for host and link. In case of passthrough
  pipeline, this will both host and link in the same
  pipeline, so need to copy the link and host based on dev_type
  The FE params are passed by hw_params of the DAI.
  On hw_params, the params are stored in Gateway module of the FE and we
  need to calculate the format in DSP module configuration, that
  conversion is done here
 set the hw_params 
	
	  16 bit is 16 bit container whereas 24 bit is in 32 bit
	  container so update bit depth accordingly
  Query the module config for the FE DAI
  This is used to find the hw_params set for that DAI and apply to FE
  pipeline
  Fill the BE gateway parameters
  The BE gateway expects a blob of parameters which are kept in the ACPI
  NHLT blob, so query the blob for interface type (i2spdm) and instance.
  The port can have multiple settings so pick based on the pipeline
  parameters
 update the blob based on virtual bus_id
  BE hw_params can be a source parameters (capture) or sink parameters
  (playback). Based on sink and source we need to either find the source
  list or the sink list and set the pipeline parameters
  Add pipeline by parsing the relevant tokens
  Return an existing pipe if the pipe already exists.
  Parse for pin config specific tokens to fill up the
  module private data
  Fill up inputoutput module config format based
  on the direction
  Resource table in the manifest has pin specific resources
  like pin and pin buffer size
  Fill module specific resources from the manifest's resource
  table like CPS, DMA size, mem_pages.
 ignore unused tokens 
  Parse tokens to fill up the module private data
	
	  If the manifest structure contains no modules, fill all
	  the module data to 0th index.
	  res_idx and fmt_idx are default set to 0.
	
	  SKL_TKN_U32_DIR_PIN_COUNT token has the value for both
	  direction and the pin count. The first four bits represent
	  direction and next four the pin count.
  Parse the vendor array for specific tokens to construct
  module private data
  Every data block is preceded by a descriptor to read the number
  of data blocks, they type of the block and it's size
 Functions to parse private data from configuration file format v4 
  Add pipeline from topology binary into driver pipeline list
  If already added we return that instance
  Otherwise we create a new instance and add into driver list
  Parse the private data for the token and corresponding value.
  The private data can have multiple data blocks. So, a data block
  is preceded by a descriptor for number of blocks and a descriptor
  for the type and size of the suceeding data block.
	
	  v4 configuration files have a valid UUID at the start of
	  the widget's private data.
 Read the NUM_DATA_BLOCKS descriptor 
 Read the BLOCK_TYPE and BLOCK_SIZE descriptor 
  Topology core widget load callback
  This is used to save the private data for each widget which gives
  information to the driver about module and pipeline parameters which DSP
  FW expects like ids, resource values, formats etc
	
	  module binary can be loaded later, so set it to query when
	  module is load for a use case
 To provide backward compatibility, set default as SKL_PARAM_INIT 
 Parse private data for tuples 
 Fill private data 
		
		  now that the control initializations are done, remove
		  write permission for the DMIC configuration enums to
		  avoid conflicts between NHLT settings and user interaction
  Fill the manifest structure by parsing the tokens based on the
  type.
  Parse manifest private data for tokens. The private data block is
  preceded by descriptors for type and size of data block.
 Read the NUM_DATA_BLOCKS descriptor 
 Read the BLOCK_TYPE and BLOCK_SIZE descriptor 
 proceed only if we have private data defined 
  A pipe can have multiple modules, each of them will be a DAPM widget as
  well. While managing a pipeline we need to get the list of all the
  widgets in a pipelines, so this helper - skl_tplg_create_pipe_widget_list()
  helps to get the SKL type widgets in that pipeline
  SKL topology init routine
 clean up topology 
 SPDX-License-Identifier: GPL-2.0-only
 Copyright(c) 2015-17 Intel Corporation
   skl-ssp-clk.c - ASoC skylake ssp clock driver
 Remove TLV Header size 
 Remove TLV Header size 
 Sends dma control IPC to turn the clock ONOFF 
 1 to enable mclk, 0 to enable sclk 
 copy blob 
 copy additional dma controls information 
 Not supported by clk driver. Implemented to satisfy clk fw 
  prepareunprepare are used instead of enabledisable as IPC will be sent
  in non-atomic context.
 Register Parent clock 
 Assign fmt_config to clk_data 
 Register Parent clock 
		
		  Only register valid clocks
		  i.e. for which nhlt entry is present.
 SPDX-License-Identifier: GPL-2.0-only
  skl-sst-ipc.c - Intel skl IPC Support
  Copyright (C) 2014-15, Intel Corporation.
 Global Message - Generic 
 Global Message - Reply 
 Global Notification Message 
 Pipeline operations 
 Create pipeline message 
 Set pipeline state message 
 Module operations primary register 
 Init instance message extension register 
 BindUnbind message extension register 
 Load Module count 
 Save pipeline messgae extension register 
 Large Config message extension register 
 Set D0ix IPC extension register 
 Global Message Types 
 Retrieves firmware version 
 Maximum message number 
 Module Message Types 
 Lock to be held by caller 
 check D0i3 support 
 Attempt D0i0 or D0i3 based on state 
			
			  Per HW recomendation, After phrase detection,
			  clear the CGCTL.MISCBDCGE.
			 
			  This will be set back on stream closure
 first process the header 
 copy the rx data from the mailbox 
 Here we handle IPC interrupts only 
 reply message from DSP 
 clear DONE bit - tell DSP we have completed the operation 
 unmask Done interrupt 
 New message from DSP 
 Handle Immediate reply from DSP Core 
 clear  busy interrupt 
 continue to send any remaining messages... 
 enable IPC DONE interrupt 
 Enable IPC BUSY interrupt 
 disable IPC DONE interrupt 
 Disable IPC BUSY interrupt 
 Disable IPC DONE interrupt 
 Disable IPC BUSY interrupt 
 param_block_size must be in dwords 
  In order to load a module we need to send IPC to initiate that. DMA will
  performed to load the module memory. The FW supports multiple module load
  at single shot, so we can send IPC with N modules represented by
  module_cnt
 clear the fields 
 fill the fields 
	
	  Use the nopm IPC here as we dont want it checking for D0iX
 SPDX-License-Identifier: GPL-2.0-only
   sst-atom-controls.c - Intel MID Platform driver DPCM ALSA controls for Mrfld
   Copyright (C) 2013-14 Intel Corp
   Author: Omair Mohammed Abdullah <omair.m.abdullah@intel.com>
 	Vinod Koul <vinod.koul@intel.com>
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   In the dpcm driver modelling when a particular FEBEMixerPipe is active
   we forward the settings and parameters, rest we keep the values  in
   driver and forward when DAPM enables them
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  sst_fill_and_send_cmd - generate the IPC message and send it to the FW
  @drv: sst_data
  @ipc_msg: type of IPC (CMD, SET_PARAMS, GET_PARAMS)
  @block: block index
  @task_id: task index
  @pipe_id: pipe index
  @cmd_data: the IPC payload
  @len: length of data to be sent
  tx map value is a bitfield where each bit represents a FW channel
 			3 2 1 0		# 0 = codec0, 1 = codec1
 			RLRLRLRL	# 3, 4 = reserved
  e.g. slot 0 rx map =	00001100b -> data from slot 0 goes into codec_in1 L,R
 default rx map 
  rx map value is a bitfield where each bit represents a slot
 			  76543210	# 0 = slot 0, 1 = slot 1
  e.g. codec1_0 tx map = 00000101b -> data from codec_out1_0 goes into slot 0, 2
 default tx map 
  NOTE: this is invoked with lock held
  sst_slot_get - get the status of the interleaverdeinterleaver control
  @kcontrol: control pointer
  @ucontrol: User data
  Searches the map where the control status is stored, and gets the
  channelslot which is currently set for this enumerated control. Since it is
  an enumerated control, there is only one possible value.
 search which slotchannel has this bit set - there should be only one 
 sst_check_and_send_slot_map - helper for checking power state and sending
  slot map cmd
  called with lock held
  sst_slot_put - set the status of interleaverdeinterleaver control
  @kcontrol: control pointer
  @ucontrol: User data
  (de)interleaver controls are defined in opposite sense to be user-friendly
  Instead of the enum value being the value written to the register, it is the
  register address; and the kcontrol number (register num) is the value written
  to the register. This is so that there can be only one value for each
  slotchannel since there is only one control for each slotchannel.
  This means that whenever an enum is set, we need to clear the bit
  for that kcontrol_no for all the interleaver OR deinterleaver registers
 first clear all registers of this bit 
 kctl set to 'none' and we reset the bits so send IPC 
 offset by one to take "None" into account 
bc->max includes sizeof algos + length field
  sst_find_and_send_pipe_algo - send all the algo parameters for a pipe
  @drv: sst_data
  @pipe: string identifier
  @ids: list of algorithms
  The algos which are in each pipeline are sent to the firmware one by one
  Called with lock held
if pipe is enabled, need to send the algo params from here
  sst_send_gain_cmd - send the gain algorithm IPC to the FW
  @drv: sst_data
  @gv:the stored value of gain (also contains rampduration)
  @task_id: task index
  @loc_id: locationposition index
  @module_id: module index
  @mute: flag that indicates whether this was called from the
   digital_mute callback or directly. If called from the
   digital_mute callback, module will be mutedunmuted based on this
   flag. The flag is always 0 if called directly.
  Called with sst_data.lock held
  The user-set gain value is sent only if the user-controllable 'mute' control
  is OFF (indicated by gv->mute). Otherwise, the mute value (MIN value) is
  sent.
 we are with lock held, so call the unlocked api  to send 
 Look up table to convert MIXER SW bit regs to SWM inputs 
  fill_swm_input - fill in the SWM input ids given the register
  @cmpnt: ASoC component
  @swm_input: array of swm_input_ids
  @reg: the register value is a bit-field inicated which mixer inputs are ON.
  Use the lookup table to get the input-id and fill it in the
  structure.
  called with lock held
	
	  Identify which mixer input is on and send the bitmap of the
	  inputs as an IPC to the DSP.
 MMX_SET_SWM == SBA_SET_SWM 
 SBA mixers - 16 inputs 
 18 SBA mixers 
  sst_handle_vb_timer - StartStop the DSP scheduler
  The DSP expects first cmd to be SBA_VB_START, so at first startup send
  that.
  DSP expects last cmd to be SBA_VB_IDLE, so at last shutdown send that.
  Do refcount internally so that we send command only at first start
  and last end. Since SST driver does its own ref count, invoke sst's
  power ops always!
	
	  Send the command only if this call is the first enable or last
	  disable
  sst_ssp_config - contains SSP configuration for media UC
  this can be overwritten by set_dai_xxx APIs
 MMX_SET_MEDIA_PATH == SBA_SET_MEDIA_PATH 
 48khz 
 stereoMono 
 24bit left justified 
 Algo sequence: Gain - DRP - FIR - IIR 
 Media Paths 
 MediaX IN paths are set via ALLOC, so no SET_MEDIA_PATH command 
 SBA PCM Paths 
 SBA Loops 
 Media Mixers 
 SBA PCM mixers 
 SBA Loop mixers 
 SBA Backend mixers 
 not supported by FW 
 not supported by FW 
 Gain helper with minmax set 
 the SST_GAIN macro above will create three alsa controls for each
  instance invoked, gain, mute and ramp duration, which use the same gain
  cell sst_gain to keep track of data
  To calculate number of gain cell instances we need to device by 3 in
  below caulcation for gain cell memory.
  This gets rid of static number and issues while adding new controls
allocate space to cache the algo parameters in the driver
  sst_send_pipe_gains - send gains for the front-end DAIs
  @dai: front-end dai
  @stream: direction
  @mute: boolean indicating mute status
  The gains in the pipes connected to the front-ends are mutedunmuted
  automatically via the digital_mute() DAPM callback. This function sends the
  gains for the front-end pipes.
  sst_fill_module_list - populate the list of modulesgains for a pipe
  @kctl: kcontrol pointer
  @w: dapm widget
  @type: widget type
  Fills the widget pointer in the kcontrol private data, and also fills the
  kcontrol pointer in the widget private data.
  Widget pointer is used to send the algogain in the .put() handler if the
  widget is powerd on.
  Kcontrol pointer is used to send the algogain in the widget power ONOFF
  event handler. Each widget (pipe) has multiple algos stored in the algo_list.
  sst_fill_widget_module_info - fill list of gainsalgos for the pipe
  @w: pipe modeled as a DAPM widget
  @component: ASoC component
  Fill the list of gainsalgos for the widget by looking at all the card
  controls and comparing the name of the widget with the first part of control
  name. First part of control name contains the pipe name (widget name).
  sst_fill_linked_widgets - fill the parent pointer for the linked widget
  @component: ASoC component
  @ids: sst_ids array
  sst_map_modules_to_pipe - fill algogains list for all pipes
  @component: ASoC component
 fill linked widgets 
 Initialize algo control params 
 SPDX-License-Identifier: GPL-2.0-only
   sst_mfld_platform.c - Intel MID Platform driver
   Copyright (C) 2010-2014 Intel Corp
   Author: Vinod Koul <vinod.koul@intel.com>
   Author: Harsha Priya <priya.harsha@intel.com>
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 Reserved, not in use 
 helper functions 
 PCM stream via ALSA interface 
 index 0 is not used in stream map 
 For pcm streams 
 set codec params and inform SST driver the same 
 fill the device type and stream id to pass to SST driver 
 get the sst ops 
 allocate memory for SST API set 
	
	  Make sure the period to be multiple of 1ms to align the
	  design of firmware. Apply same rule to buffer size to make
	  sure alsa could always find a value for period size
	  regardless the buffer size given by user space.
 Make sure, that the period size is always even 
 BE CPU  Dais 
 suspend all pcms first 
 set the SSPs to idle 
 restart SSPs 
 SPDX-License-Identifier: GPL-2.0-only
   sst_mfld_platform.c - Intel MID Platform driver
   Copyright (C) 2010-2014 Intel Corp
   Author: Vinod Koul <vinod.koul@intel.com>
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 compress stream operations 
 get the sst ops 
 Turn on LPE 
 Turn off LPE 
need to check
 construct fw structure for this
 fill the device type and stream id to pass to SST driver 
 SPDX-License-Identifier: GPL-2.0-only
   sst.c - Intel SST Driver for audio engine
   Copyright (C) 2008-14	Intel Corp
   Authors:	Vinod Koul <vinod.koul@intel.com>
 		Harsha Priya <priya.harsha@intel.com>
 		Dharageswari R <dharageswari.r@intel.com>
 		KP Jeeja <jeeja.kp@intel.com>
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 Interrupt arrived, check src 
 Clear done bit 
 write 1 to clear status register ;
 we can send more messages to DSP so trigger work 
 message from dsp so copy that 
 pvt_id 0 reserved for async messages 
 we use memcpy, so set to 0 
 Register the ISR 
 default intr are unmasked so set this as masked 
	
	  For acpi devices, the actual physical device state is
	  initially active. So change the state to active before
	  enabling the pm
 save fw context 
 Move the SST state to Reset 
 check first if we are already in SW reset 
	
	  check if any stream is active and running
	  they should already by suspend by soc_suspend
 Move the SST state to Reset 
 tell DSP we are suspending 
 save the memories 
 we have to restore the memory saved 
 start and wait for ack 
 FW download failed due to timeout 
 SPDX-License-Identifier: GPL-2.0-only
   sst_stream.c - Intel SST Driver for audio engine
   Copyright (C) 2008-14 Intel Corp
   Authors:	Vinod Koul <vinod.koul@intel.com>
 		Harsha Priya <priya.harsha@intel.com>
 		Dharageswari R <dharageswari.r@intel.com>
 		KP Jeeja <jeeja.kp@intel.com>
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	
	  fill channel map params for multichannel support.
	  Ideally channel map should be received from upper layers
	  for multichannel support.
	  Currently hardcoding as per FW reqm.
  sst_realloc_stream - Send msg for (re-)allocating a stream using the
  @sst_drv_ctx: intel_sst_drv context pointer
  @str_id: stream ID
  Send a msg for (re-)allocating a stream using the parameters previously
  passed to sst_alloc_stream_mrfld() for the same stream ID.
  Return: 0 or negative errno value.
 alloc failed, so reset the state to uninit 
  sst_start_stream - Send msg for a starting stream
  @sst_drv_ctx: intel_sst_drv context pointer
  @str_id: stream ID
  This function is called by any function which wants to start
  a stream.
		
		  copy the reply and send back
		  we need to update only sz and payload
  sst_pause_stream - Send msg for a pausing stream
  @sst_drv_ctx: intel_sst_drv context pointer
  @str_id: stream ID
  This function is called by any function which wants to pause
  an already running stream.
  sst_resume_stream - Send msg for resuming stream
  @sst_drv_ctx: intel_sst_drv context pointer
  @str_id: stream ID
  This function is called by any function which wants to resume
  an already paused stream.
		
		  Stream was running before suspend and re-created on resume,
		  start it to get back to running state.
		
		  Stream was idle before suspend and re-created on resume,
		  keep it as is.
  sst_drop_stream - Send msg for stopping stream
  @sst_drv_ctx: intel_sst_drv context pointer
  @str_id: stream ID
  This function is called by any function which wants to stop
  a stream.
  sst_drain_stream - Send msg for draining stream
  @sst_drv_ctx: intel_sst_drv context pointer
  @str_id: stream ID
  @partial_drain: boolean indicating if a gapless transition is taking place
  This function is called by any function which wants to drain
  a stream.
	
	  with new non blocked drain implementation in core we dont need to
	  wait for respsonse, and need to only invoke callback for drain
	  complete
  sst_free_stream - Frees a stream
  @sst_drv_ctx: intel_sst_drv context pointer
  @str_id: stream ID
  This function is called by any function which wants to free
  a stream.
 SPDX-License-Identifier: GPL-2.0-only
   sst_pci.c - SST (LPE) driver init file for pci enumeration.
   Copyright (C) 2008-14	Intel Corp
   Authors:	Vinod Koul <vinod.koul@intel.com>
 		Harsha Priya <priya.harsha@intel.com>
 		Dharageswari R <dharageswari.r@intel.com>
 		KP Jeeja <jeeja.kp@intel.com>
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 map registers 
 DDR base 
 check that the relocated IMR base matches with FW Binary 
 SHIM 
 Shared SRAM 
 IRAM 
 DRAM 
  intel_sst_probe - PCI probe function
  @pci:	PCI device structure
  @pci_id: PCI device ID structure
 Init the device 
  intel_sst_remove - PCI remove function
  @pci:	PCI device structure
  This function is called by OS when a device is unloaded
  This frees the interrupt etc
 PCI Routines 
 SPDX-License-Identifier: GPL-2.0-only
   sst_drv_interface.c - Intel SST Driver for audio engine
   Copyright (C) 2008-14 Intel Corp
   Authors:	Vinod Koul <vinod.koul@intel.com>
 		Harsha Priya <priya.harsha@intel.com>
 		Dharageswari R <dharageswari.r@intel.com)
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 str_id is valid, so stream is alloacted 
  sst_get_sfreq - this function returns the frequency of the stream
  @str_param : stream params
  sst_get_num_channel - get number of channels for the stream
  @str_param : stream params
  sst_get_stream - this function prepares for stream allocation
  @str_param : stream param
 stream is not allocated, we are allocating 
 store sampling freq 
  sst_open_pcm_stream - Open PCM interface
  @str_param: parameters of pcm stream
  This function is called by MID sound card driver to open
  a new pcm interface
 update bytes sent 
 50KB 
 1024KB 
  sst_close_pcm_stream - Close PCM interface
  @str_id: stream id to be closed
  This function is called by MID sound card driver to close
  an existing pcm interface
  sst_set_byte_stream - Set generic params
  @cmd: control cmd to be set
  @arg: command argument
  This function is called by MID sound card driver to configure
  SST runtime params.
  sst_register - function to register DSP
  This functions registers DSP with the platform driver
 SPDX-License-Identifier: GPL-2.0-only
   sst_pvt.c - Intel SST Driver for audio engine
   Copyright (C) 2008-14	Intel Corp
   Authors:	Vinod Koul <vinod.koul@intel.com>
 		Harsha Priya <priya.harsha@intel.com>
 		Dharageswari R <dharageswari.r@intel.com>
 		KP Jeeja <jeeja.kp@intel.com>
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  sst_wait_interruptible - wait on event
  @sst_drv_ctx: Driver context
  @block: Driver block to wait on
  This function waits without a timeout (and is interruptable) for a
  given block event
 event wake 
  sst_wait_timeout - wait on event for timeout
  @sst_drv_ctx: Driver context
  @block: Driver block to wait on
  This function waits with a timeout value (and is not interruptible) on a
  given block event
	
	  NOTE:
	  Observed that FW processes the alloc msg and replies even
	  before the alloc thread has finished execution
 event wake 
  sst_create_ipc_msg - create a IPC message
  @arg: ipc message
  @large: large or short message
  this function allocates structures to send a large or short
  message to the firmware
  sst_create_block_and_ipc_msg - Creates IPC message and sst block
  @arg: passed to sst_create_ipc_message API
  @large: large or short message
  @sst_drv_ctx: sst driver context
  @block: return block allocated
  @msg_id: IPC
  @drv_id: stream id or private id
  sst_clean_stream - clean the stream context
  @stream: stream structure
  this function resets the stream contexts
  should be called in free
  sst_assign_pvt_id - assign a pvt id for stream
  @sst_drv_ctx : driver context
  this function assigns a private id for calls that dont have stream
  context yet, should be called with lock held
  uses bits for the id, and finds first free bits and assigns that
 find first zero index from lsb 
 toggle the index 
 Get the difference from 512MB aligned base addr 
 relocate the base 
 SPDX-License-Identifier: GPL-2.0-only
  sst_acpi.c - SST (LPE) driver init file for ACPI enumeration.
  Copyright (c) 2013, Intel Corporation.
   Authors:	Ramesh Babu K V <Ramesh.Babu@intel.com>
   Authors:	Omair Mohammed Abdullah <omair.m.abdullah@intel.com>
 LPE viewpoint addresses 
 virtual addr in LPE 
 BYTCR has different BIOS from BYT 
 Cherryview (Cherrytrail and Braswell) uses same mrfld dpcm fw as Baytrail,
  so pdata is same as Baytrail, minus the streams_lost_on_suspend quirk.
 All ACPI resource request here 
 Get Shim addr 
 reassign physical address to LPE viewpoint address 
 Get mailbox addr 
 reassign physical address to LPE viewpoint address 
 Find the IRQ 
 override resource info 
 update machine parameters 
	
	  Create platform device for sst machine driver,
	  pass machine info as pdata
 Fill sst platform data 
 sst_acpi_remove - remove function
 @pdev:	platform device structure
 This function is called by OS when a device is unloaded
 This frees the interrupt etc
 SPDX-License-Identifier: GPL-2.0-only
   sst_ipc.c - Intel SST Driver for audio engine
   Copyright (C) 2008-14 Intel Corporation
   Authors:	Vinod Koul <vinod.koul@intel.com>
 		Harsha Priya <priya.harsha@intel.com>
 		Dharageswari R <dharageswari.r@intel.com>
 		KP Jeeja <jeeja.kp@intel.com>
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  while handling the interrupts, we need to check for message status and
  then if we are blocking for a message
  here we are unblocking the blocked ones, this is based on id we have
  passed and search that for block threads.
  We will not find block in two cases
   a) when its small message and block in not there, so silently ignore
   them
   b) when we are actually not able to find the block (bug perhaps)
   Since we have bit of small messages we can spam kernel log with err
   print on above so need to keep as debug prints which should be enabled
   via dynamic debug while debugging IPC issues
 toggle the index position of pvt_id 
 queue is empty, nothing to send 
 copy msg from list 
 write 1 to clear
 Set IA done bit 
 un mask busy interrupt 
  process_fw_init - process the FW init msg
  @msg: IPC message mailbox data from FW
  This function processes the FW init msg from FW
  marks FW state and prints debug info of loaded FW
 Save FW version 
 If stream is dropped, skip processing this message
 Check for async messages first 
FW sent async large message
 FW sent short error response for an IPC 
 32-bit FW error code in msg_low 
	
	  Process all valid responses
	  if it is a large message, the payload contains the size to
	  copy from mailbox
 Copy command id so that we can use to put sst to reset 
 SPDX-License-Identifier: GPL-2.0-only
   sst_dsp.c - Intel SST Driver for audio engine
   Copyright (C) 2008-14	Intel Corp
   Authors:	Vinod Koul <vinod.koul@intel.com>
 		Harsha Priya <priya.harsha@intel.com>
 		Dharageswari R <dharageswari.r@intel.com>
 		KP Jeeja <jeeja.kp@intel.com>
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   This file contains all dsp controlling functions like firmware download,
  settingresetting dsp cores, etc
	 __iowrite32_copy uses 32-bit count values so divide by 4 for
	  right count in words
	 __ioread32_copy uses 32-bit count values so divide by 4 for
	  right count in words
  intel_sst_reset_dsp_mrfld - Resetting SST DSP
  @sst_drv_ctx: intel_sst_drv context pointer
  This resets DSP in case of MRFLD platfroms
  sst_start_mrfld - Start the SST DSP processor
  @sst_drv_ctx: intel_sst_drv context pointer
  This starts the DSP in MERRIFIELD platfroms
 Read the header information from the data pointer 
 verify FW 
 Invalid FW signature 
  sst_fill_memcpy_list - Fill the memcpy list
  @memcpy_list: List to be filled
  @destn: Destination addr to be filled in the list
  @src: Source addr to be filled in the list
  @size: Size to be filled in the list
  Adds the node to the list after required fields
  are populated in the node
  sst_parse_module_memcpy - Parse audio FW modules and populate the memcpy list
  @sst_drv_ctx		: driver context
  @module		: FW module header
  @memcpy_list	: Pointer to the list to be populated
  Create the memcpy list as the number of block to be copied
  returns error or 0 if module sizes are proper
  sst_parse_fw_memcpy - parse the firmware image & populate the list for memcpy
  @ctx			: pointer to drv context
  @size		: size of the firmware
  @fw_list		: pointer to list_head to be populated
  This function parses the FW image and saves the parsed image in the list
  for memcpy
  sst_do_memcpy - function initiates the memcpy
  @memcpy_list: Pter to memcpy list on which the memcpy needs to be initiated
  Triggers the memcpy
 Free the list 
  sst_request_fw - requests audio fw from kernel and saves a copy
  This function requests the SST FW from the kernel, parses it and
  saves a copy in the driver context
  Writing the DDR physical base to DCCM offset
  so that FW can use it to setup TLB
  sst_load_fw - function to load FW into DSP
  @sst_drv_ctx: intel_sst_drv context pointer
  Transfers the FW to DSP using dmamemcpy
 Prevent C-states beyond C6 
 Write the DRAMDCCM config before enabling FW 
 bring sst out of reset 
 FW download failed due to timeout 
 Re-enable Deeper C-states beyond C6 
 SPDX-License-Identifier: GPL-2.0-only
  STM32 ALSA SoC Digital Audio Interface (SPDIF-rx) driver.
  Copyright (C) 2017, STMicroelectronics - All Rights Reserved
  Author(s): Olivier Moysan <olivier.moysan@st.com> for STMicroelectronics.
 SPDIF-rx Register Map 
 Bit definition for SPDIF_CR register 
 Bit definition for SPDIFRX_IMR register 
 Bit definition for SPDIFRX_SR register 
 Bit definition for SPDIFRX_IFCR register 
 Bit definition for SPDIFRX_DR register (DRFMT = 0b00) 
 Bit definition for SPDIFRX_DR register (DRFMT = 0b01) 
 Bit definition for SPDIFRX_DR register (DRFMT = 0b10) 
 Bit definition for SPDIFRX_CSR register 
 Bit definition for SPDIFRX_DIR register 
 Bit definition for SPDIFRX_VERR register 
 Bit definition for SPDIFRX_IDR register 
 Bit definition for SPDIFRX_SIDR register 
 192 CS bits in SPDIF frame. i.e 24 CS bytes 
  CSR register is retrieved as a 32 bits word
  It contains 1 channel status byte and 2 user data bytes
  2 SPDIF frames are acquired to get all CSUB bits
  struct stm32_spdifrx_data - private data of SPDIFRX
  @pdev: device data pointer
  @base: mmio register base virtual address
  @regmap: SPDIFRX register map pointer
  @regmap_conf: SPDIFRX register map configuration pointer
  @cs_completion: channel status retrieving completion
  @kclk: kernel clock feeding the SPDIFRX clock generator
  @dma_params: dma configuration data for rx channel
  @substream: PCM substream data pointer
  @dmab: dma buffer info pointer
  @ctrl_chan: dma channel for SPDIF control bits
  @desc:dma async transaction descriptor
  @slave_config: dma slave channel runtime config pointer
  @phys_addr: SPDIFRX registers physical base address
  @lock: synchronization enabling lock
  @irq_lock: prevent race condition with IRQ on stream state
  @cs: channel status buffer
  @ub: user data buffer
  @irq: SPDIFRX interrupt line
  @refcount: keep count of opened DMA channels
 Sync enabling lock 
 Prevent race condition on stream state 
 Enable IRQs 
		
		  Start sync if SPDIFRX is still in idle state.
		  SPDIFRX reception enabled when sync done
		
		  SPDIFRX configuration:
		  Wait for activity before starting sync process. This avoid
		  to issue sync errors when spdif signal is missing on input.
		  Preamble, CS, user, validity and parity error bits not copied
		  to DR register.
 dummy read to clear CSRNE and RXNE in status register 
  By default CS bits are retrieved from channel A 
 Channel status control 
 User bits control 
 SERR, TERR, FERR IRQs are generated if IFEIE is set 
 Clear IRQs 
 Enable spdifrx 
 SPDIFRX is in STATE_STOP. Disable SPDIFRX to clear errors 
 If SPDIFRX was in STATE_SYNC, retry synchro 
	
	  Set buswidth to 4 bytes for all data formats.
	  Packed format: transfer 2 x 2 bytes samples
	  Left format: transfer 1 x 3 bytes samples + 1 dummy byte
 CONFIG_PM_SLEEP 
 SPDX-License-Identifier: GPL-2.0-only
   STM32 ALSA SoC Digital Audio Interface (I2S) driver.
  Copyright (C) 2017, STMicroelectronics - All Rights Reserved
  Author(s): Olivier Moysan <olivier.moysan@st.com> for STMicroelectronics.
 Bit definition for SPI2S_CR1 register 
 Bit definition for SPI_CFG2 register 
 Bit definition for SPI_CFG1 register 
 Bit definition for SPI2S_IER register 
 Bit definition for SPI2S_SR register 
 Bit definition for SPI_IFCR register 
 Bit definition for SPI_I2SCGFR register 
 Registers below apply to I2S version 1.1 and more 
 Bit definition for SPI_HWCFGR register 
 Bit definition for SPI_VERR register 
 Bit definition for SPI_IPIDR register 
 Bit definition for SPI_SIDR register 
  struct stm32_i2s_data - private data of I2S
  @regmap_conf: I2S register map configuration pointer
  @regmap: I2S register map pointer
  @pdev: device data pointer
  @dai_drv: DAI driver pointer
  @dma_data_tx: dma configuration data for tx channel
  @dma_data_rx: dma configuration data for tx channel
  @substream: PCM substream data pointer
  @i2sclk: kernel clock feeding the I2S clock generator
  @i2smclk: master clock from I2S mclk provider
  @pclk: peripheral clock driving bus interface
  @x8kclk: I2S parent clock for sampling frequencies multiple of 8kHz
  @x11kclk: I2S parent clock for sampling frequencies multiple of 11kHz
  @base:  mmio register base virtual address
  @phys_addr: I2S registers physical base address
  @lock_fd: lock to manage race conditions in full duplex mode
  @irq_lock: prevent race condition with IRQ
  @mclk_rate: master clock frequency (Hz)
  @fmt: DAI protocol
  @divider: prescaler division ratio
  @div: prescaler div field
  @odd: prescaler odd field
  @refcount: keep count of opened streams on I2S
  @ms_flg: master mode flag.
 Manage race conditions for full duplex 
 used to prevent race condition with IRQ 
 Check the parity of the divider 
 Compute the div prescaler 
 If div is 0 actual divider is 1 
 Division by three is not allowed by I2S prescaler 
	
	  Forge mclk clock name from parent clock name and suffix.
	  String after "_" char is stripped in parent name.
 register mclk provider 
	
	  winv = 0 : default behavior (highlow) for all standards
	  ckpol = 0 for all standards.
 DSP_B not mapped on I2S PCM long format. 1 bit offset does not fit 
 DAI clock strobing 
 DAI clock master masks 
 MCLK generation is available only in master mode 
 Assume shutdown if requested frequency is 0Hz 
 Release mclk rate only if rate was actually set 
 If master clock is used, set parent clock now 
	
	  mckl = mclk_ratio x ws
	    i2s mode : mclk_ratio = 256
	    dsp mode : mclk_ratio = 128
	 
	  mclk on
	    i2s mode : div = i2s_clk  (mclk_ratio  ws)
	    dsp mode : div = i2s_clk  (mclk_ratio  ws)
	  mclk off
	    i2s mode : div = i2s_clk  (nb_bits x ws)
	    dsp mode : div = i2s_clk  (nb_bits x ws)
 master clock not enabled 
 Set bitclock and frameclock to their inactive state 
 As data length is either 16 or 32 bits, fixch always set 
 Enable i2s 
 dummy write to gate bus clocks 
 Buswidth will be set by framework 
 Get clocks 
 Register mclk provider if requested 
 Get irqs 
 Reset 
 Set SPII2S in i2s mode 
 CONFIG_PM_SLEEP 
 SPDX-License-Identifier: GPL-2.0-only
  STM32 ALSA SoC Digital Audio Interface (SAI) driver.
  Copyright (C) 2016, STMicroelectronics - All Rights Reserved
  Author(s): Olivier Moysan <olivier.moysan@st.com> for STMicroelectronics.
  Default settings for stm32 H7 socs and next.
  These default settings will be overridden if the soc provides
  support of hardware configuration registers.
 Enable peripheral clock to allow GCR register access 
 Enable peripheral clock to allow GCR register access 
 Configure sync client 
 Configure sync provider 
 init irqs 
 reset 
 Enable peripheral clock to allow register access 
  When pins are shared by two sai sub instances, pins have to be defined
  in sai parent node. In this case, pins state is not managed by alsa fw.
  These pins are managed in suspendresume callbacks.
 CONFIG_PM_SLEEP 
 SPDX-License-Identifier: GPL-2.0-only
  STM32 ALSA SoC Digital Audio Interface (SAI) driver.
  Copyright (C) 2016, STMicroelectronics - All Rights Reserved
  Author(s): Olivier Moysan <olivier.moysan@st.com> for STMicroelectronics.
  struct stm32_sai_sub_data - private data of SAI sub block (block A or B)
  @pdev: device data pointer
  @regmap: SAI register map pointer
  @regmap_config: SAI sub block register map configuration pointer
  @dma_params: dma configuration data for rx or tx channel
  @cpu_dai_drv: DAI driver data pointer
  @cpu_dai: DAI runtime data pointer
  @substream: PCM substream data pointer
  @pdata: SAI block parent data pointer
  @np_sync_provider: synchronization provider node
  @sai_ck: kernel clock feeding the SAI clock generator
  @sai_mclk: master clock from SAI mclk provider
  @phys_addr: SAI registers physical base address
  @mclk_rate: SAI block master clock frequency (Hz). set at init
  @id: SAI sub block id corresponding to sub-block A or B
  @dir: SAI block direction (playback or capture). set at init
  @master: SAI block mode flag. (true=master, false=slave) set at init
  @spdif: SAI SPDIF iec60958 mode flag. set at init
  @fmt: SAI block format. relevant only for custom protocols. set at init
  @sync: SAI block synchronization mode. (none, internal or external)
  @synco: SAI block ext sync source (provider setting). (none, sub-block AB)
  @synci: SAI block ext sync source (client setting). (SAI sync provider index)
  @fs_length: frame synchronization length. depends on protocol settings
  @slots: rx or tx slot number
  @slot_width: rx or tx slot width in bits
  @slot_mask: rx or tx active slots mask. set at init or at runtime
  @data_size: PCM data width. corresponds to PCM substream width.
  @spdif_frm_cnt: SPDIF playback frame counter
  @iec958: iec958 data
  @ctrl_lock: control lock
  @irq_lock: prevent race condition with IRQ
 protect resources accessed by controls 
 used to prevent race condition with IRQ 
	
	  Forge mclk clock name from parent clock name and suffix.
	  String after "_" char is stripped in parent name.
 register mclk provider 
 Assume shutdown if requested frequency is 0Hz 
 Release mclk rate only if rate was actually set 
 If master clock is used, set parent clock now 
 txrx mask set in machine init, if slot number defined in DT 
 Do not generate master by default 
 SCK active high for all protocols 
 Left justified 
 Right justified 
 DAI clock strobing. Invert setting previously set 
 Invert fs & sck 
 DAI clock master masks 
 codec is master 
 Set slave mode if sub-block is synchronized with another SAI 
 Enable ITs 
	
	  DMA bursts increment is set to 4 words.
	  SAI fifo threshold is set to half fifo, to keep enough space
	  for DMA incoming bursts.
 DS bits in CR1 not set for SPDIF (size forced to 24 bits).
 Mode, data format and channel config 
	
	  If SLOTSZ is set to auto in SLOTR, align slot width on data size
	  By default slot width = data size, if not forced from DT
 Slot number is set to 2, if not specified in DT 
 The number of slots in the audio frame is equal to NBSLOT[3:0] + 1
 Set default slots mask if not already set from DT 
 Force the sample rate according to runtime rate 
		 mclk on (NODIV=0)
		    mclk_rate = 256  fs
		    MCKDIV = 0 if sai_ck < 32  mclk_rate
		    MCKDIV = sai_ck  (2  mclk_rate) otherwise
		  mclk off (NODIV=1)
		    MCKDIV ignored. sck = sai_ck
		
		  TDM mode :
		    mclk on
		       MCKDIV = sai_ck  (ws x 256)	(NOMCK=0. OSR=0)
		       MCKDIV = sai_ck  (ws x 512)	(NOMCK=0. OSR=1)
		    mclk off
		       MCKDIV = sai_ck  (frl x ws)	(NOMCK=1)
		  Note: NOMCKNODIV correspond to same bit.
 mclk-fs not set, master clock not active 
 Rate not already set in runtime structure 
 Enable SAI 
	
	  DMA supports 4, 8 or 16 burst sizes. Burst size 4 is the best choice,
	  as it allows bytes, half-word and words transfers. (See DMA fifos
	  constraints).
 Buswidth will be set by framework at runtime 
 Next settings are not relevant for spdif mode 
 Configure synchronization 
 Configure synchro client and provider 
 Set channel status bit 
 No support of mmap in SPDIF mode 
 5ms at 48kHz 
 avoid call to fmt_single_name() 
 DMA does not support 24 bits transfers 
 avoid call to fmt_single_name() 
 DMA does not support 24 bits transfers 
 Note: PDM registers not available for sub-block B 
	
	  Do not manage peripheral clock through regmap framework as this
	  can lead to circular locking issue with sai master clock provider.
	  Manage peripheral clock directly in driver instead.
 Get direction property 
 Get spdif iec60958 property 
 Get synchronization property 
 Register mclk provider if requested 
 CONFIG_PM_SLEEP 
 SPDX-License-Identifier: GPL-2.0
  This file is part of STM32 DFSDM ASoC DAI driver
  Copyright (C) 2017, STMicroelectronics - All Rights Reserved
  Authors: Arnaud Pouliquen <arnaud.pouliquen@st.com>
           Olivier Moysan <olivier.moysan@st.com>
 IIO 
 PCM buffer 
 protect against race condition on iio state 
 Set IIO frequency if CODEC is master as clock comes from SPI_IN 
	
	  This dummmy callback is requested by iio_channel_get_all_cb() API,
	  but the stm32_dfsdm_get_buff_cb() API is used instead, to optimize
	  DMA transfers.
 Associate iio channel 
 SPDX-License-Identifier: GPL-2.0-only
  ASoC driver for PROTO AudioCODEC (with a WM8731)
  Author:      Florian Meier, <koalo@koalo.de>
 	      Copyright 2013
 This is fixed on this board 
 Set proto sysclk 
 speaker connected to LHPOUTRHPOUT 
 mic is connected to Mic Jack, with WM8731 Mic Bias 
 audio machine driver 
 for cpuscodecsplatforms 
 SPDX-License-Identifier: GPL-2.0-or-later
 Atmel PDMIC driver
  Copyright (C) 2015 Atmel
  Author: Songjun Wu <songjun.wu@atmel.com>
 sentinel 
 cpu dai component 
 Clear all bits in the Control Register(PDMIC_CR) 
 Enable the overrun error interrupt 
 Disable the overrun error interrupt 
 Clean the PDMIC Converted Data Register 
 platform 
 codec 
 Mic Gain = dgain  2^(-scale) 
 range from -90 dB to 90 dB 
 -90, -84 dB 
 -81, -78, -75, -72 dB 
 -70, -68 dB 
 -65 ~ -62 dB 
 -61 ~ -58 dB 
 -57 ~ -54 dB 
 -53 ~ -50 dB 
 -49 ~ -46 dB 
 -45 ~ -42 dB 
 -41 ~ -38 dB 
 -37 ~ -34 dB 
 -33 ~ -30 dB 
 -29 ~ -26 dB 
 -25 ~ -22 dB 
 -21 ~ -18 dB 
 -17 ~ -14 dB 
 -13 ~ -10 dB 
  -9 ~ -6 dB 
  -5 ~ -2 dB 
  -1 ~ 2 dB 
   3 ~ 6 dB 
   7 ~ 10 dB 
  11 ~ 14 dB 
  15 ~ 18 dB 
  19 ~ 22 dB 
  23 ~ 26 dB 
  27 ~ 30 dB 
  31 ~ 34 dB 
  35 ~ 38 dB 
  39 ~ 42 dB 
  43 ~ 46 dB 
  47 ~ 50 dB 
  51 ~ 54 dB 
  55 ~ 58 dB 
  59 ~ 62 dB 
  63 ~ 66 dB 
  67 ~ 70 dB 
  71 ~ 74 dB 
  75 ~ 78 dB 
  79 ~ 82 dB 
  83 ~ 86 dB 
  87 ~ 90 dB 
 PRESCAL = SELCK(2f_pdmic) - 1
 ASoC sound card 
 PDMIC interrupt handler 
 regmap configuration 
	 The gclk clock frequency must always be three times
	  lower than the pclk clock frequency
 Get the minimal and maximal sample rate that the microphone supports 
 register cpu dai 
 register platform 
 register sound card 
 SPDX-License-Identifier: GPL-2.0
 Driver for Microchip I2S Multi-channel controller
 Copyright (C) 2018 Microchip Technology Inc. and its subsidiaries
 Author: Codrin Ciubotariu <codrin.ciubotariu@microchip.com>
  ---- I2S Controller Register map ----
 Control Register 
 Mode Register A 
 Mode Register B 
 Status Register 
 Interrupt Enable Register A 
 Interrupt Disable Register A 
 Interrupt Mask Register A 
 Interrupt Status Register A 
 Interrupt Enable Register B 
 Interrupt Disable Register B 
 Interrupt Mask Register B 
 Interrupt Status Register B 
 Receiver Holding Register 
 Transmitter Holding Register 
 Receiver Holding Left 0 Register 
 Receiver Holding Right 0 Register 
 Receiver Holding Left 1 Register 
 Receiver Holding Right 1 Register 
 Receiver Holding Left 2 Register 
 Receiver Holding Right 2 Register 
 Receiver Holding Left 3 Register 
 Receiver Holding Right 3 Register 
 Transmitter Holding Left 0 Register 
 Transmitter Holding Right 0 Register 
 Transmitter Holding Left 1 Register 
 Transmitter Holding Right 1 Register 
 Transmitter Holding Left 2 Register 
 Transmitter Holding Right 2 Register 
 Transmitter Holding Left 3 Register 
 Transmitter Holding Right 3 Register 
 Version Register 
  ---- Control Register (Write-only) ----
 Receiver Enable 
 Receiver Disable 
 Clock Enable 
 Clock Disable 
 Transmitter Enable 
 Transmitter Disable 
 Software Reset 
  ---- Mode Register A (ReadWrite) ----
 Left Justified 
 Transmitter uses one DMA channel ... 
 Left audio samples duplicated to right audio channel 
 I2SDO output of I2SC is internally connected to I2SDI input 
 Receiver uses one DMA channel ... 
 Left audio samples duplicated to right audio channel 
 x sample transmitted when underrun 
 Zero sample 
 Previous sample 
 select between peripheral clock and generated clock 
 Number of TDM Channels - 1 
 Selected Clock to I2SMCC Master Clock ratio 
 TDM Frame Synchronization 
 Selected Clock to I2SMC Serial Clock ratio 
 Master Clock mode 
 0: No master clock generated
 1: master clock generated (internally generated clock drives I2SMCK pin) 
 Slot Width 
 0: slot is 32 bits wide for DATALENGTH = 182024 bits. 
 1: slot is 24 bits wide for DATALENGTH = 182024 bits. 
  ---- Mode Register B (ReadWrite) ----
 all enabled I2S left channels are filled first, then I2S right channels 
  an enabled I2S left channel is filled, then the corresponding right
  channel, until all channels are filled
  ---- Status Registers (Read-only) ----
 Receiver Enabled 
 Transmitter Enabled 
  ---- Interrupt EnableDisableMaskStatus Registers A ----
  ---- Interrupt EnableDisableMaskStatus Registers B ----
  ---- Version Register (Read-only) ----
	
	  TxRx ready interrupts are enabled when stopping only, to assure
	  availability and to disable clocks if necessary
 We do not need SYSCLK 
 We don't support any kind of clock inversion 
 We can't generate only FSYNC 
 We can only reconfigure the IP when it's stopped 
 We do not support daisy chain 
 For code simplification 
	
	  MCLK is Selected CLK  (2  IMCKDIV),
	  BCLK is Selected CLK  (2  ISCKDIV);
	  if IMCKDIV or ISCKDIV are 0, MCLK or BCLK = Selected CLK
 check if clocks returned only errors 
 Configure divisors 
 cpu is BCLK and LRC master 
 cpu is BCLK master 
 cpu is slave 
 for I2S and LEFT_J one pin is needed for every 2 channels 
 enable for interleaved format 
				
				  Duplicate data for even-numbered channels
				  to odd-numbered channels
	
	  We must have the same burst size configured
	  in the DMA transfer and in out IP
 enable FIFO if available 
	
	  If we are already running, the wanted setup must be
	  the same with the one that's currently ongoing
 set the rate 
 Save the number of channels to know what interrupts to enable 
			
			  Enable Tx Ready interrupts on all channels
			  to assure all data is sent
			
			  Enable Rx Ready interrupts on all channels
			  to assure all data is received
 Software reset the IP if it's not running 
 sentinel  }
 Get the optional generated clock 
 Get IP version. 
 SPDX-License-Identifier: GPL-2.0-or-later
  atmel-pcm-dma.c  --  ALSA PCM DMA support for the Atmel SoC.
   Copyright (C) 2012 Atmel
  Author: Bo Shen <voice.shen@atmel.com>
  Based on atmel-pcm by:
  Sedji Gaouaou <sedji.gaouaou@atmel.com>
  Copyright 2008 Atmel
--------------------------------------------------------------------------\
  Hardware definition
 lighting DMA overhead 
 if 2 bytes format 
 no limit 
  atmel_pcm_dma_irq: SSC interrupt handler for DMAENGINE enabled SSC
  We use DMAENGINE to sendreceive data tofrom SSC so this ISR is only to
  check if any overrun occured.
 stop RX and capture: will be enabled again at restart 
 now drain RHR and read status to remove xrun condition 
 SPDX-License-Identifier: GPL-2.0-or-later
  sam9g20_wm8731  --  SoC audio for AT91SAM9G20-based
  			ATMEL AT91SAM9G20ek board.
   Copyright (C) 2005 SAN People
   Copyright (C) 2008 Atmel
  Authors: Sedji Gaouaou <sedji.gaouaou@atmel.com>
  Based on ati_b1_wm8731.c by:
  Frank Mandarino <fmandarino@endrelia.com>
  Copyright 2006 Endrelia Technologies Inc.
  Based on corgi.c by:
  Copyright 2005 Wolfson Microelectronics PLC.
  Copyright 2005 Openedhand Ltd.
  As shipped the board does not have inputs.  However, it is relatively
  straightforward to modify the board to hook them up so support is left
  in the driver.
 speaker connected to LHPOUTRHPOUT 
 mic is connected to Mic Jack, with WM8731 Mic Bias 
  Logic for a wm8731 as connected on a at91sam9g20ek board.
	
	  Codec MCLK is supplied by PCK0 - set it up.
 Parse device node info 
 Parse codec info 
 Parse dai and platform info 
 Module information 
 SPDX-License-Identifier: GPL-2.0-or-later
  sam9x5_wm8731   --	SoC audio for AT91SAM9X5-based boards
 			that are using WM8731 as codec.
   Copyright (C) 2011 Atmel,
 		  Nicolas Ferre <nicolas.ferre@atmel.com>
   Copyright (C) 2013 Paratronic,
 		  Richard Genoud <richard.genoud@gmail.com>
  Based on sam9g20_wm8731.c by:
  Sedji Gaouaou <sedji.gaouaou@atmel.com>
  Logic for a wm8731 as connected on a at91sam9x5ek based board.
 set the codec system clock for DAC and ADC 
  Audio paths on at91sam9x5ek board:
   |A| ------------> |      | ---R----> Headphone Jack
   |T| <----\        |  WM  | ---L--
   |9| ---> CLK <--> | 8731 | <--R----- Line In Jack
   |1| <------------ |      | <--L--
 Module information 
 SPDX-License-Identifier: GPL-2.0
 Driver for Microchip SPDIF TX Controller
 Copyright (C) 2020 Microchip Technology Inc. and its subsidiaries
 Author: Codrin Ciubotariu <codrin.ciubotariu@microchip.com>
  ---- SPDIF Transmitter Controller Register map ----
 Control Register 
 Mode Register 
 Common Data Register 
 Interrupt Enable Register 
 Interrupt Disable Register 
 Interrupt Mask Register 
 Interrupt Status Register 
 User Data 1 Register x 
 Channel Status 1 Register x 
  ---- Control Register (Write-only) ----
 Software Reset 
 FIFO clear 
  ---- Mode Register (ReadWrite) ----
 Transmit Enable 
 Multichannel Transfer 
 Data Word Endian Mode 
 Data Justification 
 Common Audio Register Transfer Mode 
 Valid Bits per Sample 
 Chunk Size 
 Validity Bits for Channels 1 and 2 
 Disable Null Frame on underrun 
 Bytes per Sample 
  ---- Interrupt EnableDisableMaskStatus Register (WriteRead-only) ----
 exclusive access to control data 
 Software reset the IP 
 Disable interrupts 
 do not startstop while channel status or user data is updated 
 Defaults: Toggle mode, justify to LSB, chunksize 1 
 Enable interrupts 
 don't enable IP while we copy the channel status 
			
			  if SPDIF is running, wait for interrupt to write
			  channel status
			
			  if SPDIF is running, wait for interrupt to write
			  user data
 Channel status controller 
 User bits controller 
 Add controls 
 sentinel  }
 Get memory for driver data. 
 Get hardware capabilities. 
 Map IO registers. 
 Request IRQ 
 Get the peripheral clock 
 Get the generic clock 
 Init channel status 
 SPDX-License-Identifier: GPL-2.0-or-later
  atmel-pcm.c  --  ALSA PCM interface for the Atmel atmel SoC.
   Copyright (C) 2005 SAN People
   Copyright (C) 2008 Atmel
  Authors: Sedji Gaouaou <sedji.gaouaou@atmel.com>
  Based on at91-pcm. by:
  Frank Mandarino <fmandarino@endrelia.com>
  Copyright 2006 Endrelia Technologies Inc.
  Based on pxa2xx-pcm.c by:
  Author:	Nicolas Pitre
  Created:	Nov 30, 2004
  Copyright:	(C) 2004 MontaVista Software, Inc.
--------------------------------------------------------------------------\
  Hardware definition
 TODO: These values were taken from the AT91 platform driver, check
 	 them against real values for AT32
--------------------------------------------------------------------------\
  Data types
 physical address of dma buffer 
 first address beyond DMA buffer 
 physical address of next period 
--------------------------------------------------------------------------\
  ISR
 re-start the PDC 
 Load the PDC next pointer and counter registers 
--------------------------------------------------------------------------\
  PCM operations
	 this may get called several times by oss emulation
 SNDRV_PCM_TRIGGER_START 
 ensure that buffer size is a multiple of period size 
 SPDX-License-Identifier: GPL-2.0
 Driver for Microchip SPDIF RX Controller
 Copyright (C) 2020 Microchip Technology Inc. and its subsidiaries
 Author: Codrin Ciubotariu <codrin.ciubotariu@microchip.com>
  ---- SPDIF Receiver Controller Register map ----
 Control Register 
 Mode Register 
 Interrupt Enable Register 
 Interrupt Disable Register 
 Interrupt Mask Register 
 Interrupt Status Register 
 Status Register 
 Holding Register 
 Channel x Status Registers 
 Channel x User Data Registers 
 Write Protection Mode Register 
 Write Protection Status Register 
 Version Register 
  ---- Control Register (Write-only) ----
 Software Reset 
  ---- Mode Register (ReadWrite) ----
 Receive Enable 
 SPDIF Receiver Disabled 
 SPDIF Receiver Enabled 
 Validity Bit Mode 
 Load sample regardless of validity bit value 
 Load sample only if validity bit is 0 
 Data Word Endian Mode 
 Little Endian Mode 
 Big Endian Mode 
 Parity Bit Mode 
 Parity Check Enabled 
 Parity Check Disabled 
 Sample Data Width 
 Packed Data Mode in Receive Holding Register 
 Start of Block Bit Mode 
 Consecutive Preamble Error Threshold Automatic Restart 
  ---- Interrupt EnableDisableMaskStatus Register (WriteRead-only) ----
  ---- Receiver Status Register (ReadWrite) ----
 Enable Status 
   ---- Version Register (Read-only) ----
 protect access to user data 
 protect access to blockend_refcount 
 called from non-atomic context only 
 don't enable BLOCKEND interrupt if it's already enabled 
 called from atomic context only 
 don't enable BLOCKEND interrupt if it's already enabled 
 enable overrun interrupts 
 disable overrun interrupts 
 check for new data available 
 IP might not be started or valid stream might not be present 
 IP might not be started or valid stream might not be present 
 if the receiver is not locked, ISF data is invalid 
 Channel status controller 
 User bits controller 
 Lock status 
 Bad format 
 Signal 
 Sampling rate 
 Software reset the IP 
 Default configuration 
 Add controls 
 Disable interrupts 
 sentinel  }
 Get memory for driver data. 
 Map IO registers. 
 Request IRQ. 
 Get the peripheral clock 
 Get the generated clock 
 SPDX-License-Identifier: GPL-2.0-only
  Driver for Atmel I2S controller
  Copyright (C) 2015 Atmel Corporation
  Author: Cyrille Pitchen <cyrille.pitchen@atmel.com>
  ---- I2S Controller Register map ----
 Control Register 
 Mode Register 
 Status Register 
 Status Clear Register 
 Status Set Register 
 Interrupt Enable Register 
 Interrupt Disable Register 
 Interrupt Mask Register 
 Receiver Holding Register 
 Transmitter Holding Register 
 Version Register 
  ---- Control Register (Write-only) ----
 Receiver Enable 
 Receiver Disable 
 Clock Enable 
 Clock Disable 
 Transmitter Enable 
 Transmitter Disable 
 Software Reset 
  ---- Mode Register (ReadWrite) ----
 Left Justified 
 Left audio samples duplicated to right audio channel 
 Receiver uses one DMA channel ... 
 for all audio channels 
 per audio channel 
 I2SDO output of I2SC is internally connected to I2SDI input 
 Left audio samples duplicated to right audio channel 
 Transmitter uses one DMA channel ... 
 for all audio channels 
 per audio channel 
 x sample transmitted when underrun 
 Zero sample 
 Previous sample 
 Audio Clock to I2SC Master Clock ratio 
 Master Clock to fs ratio 
 Master Clock mode 
 0: No master clock generated (selected clock drives I2SCK pin) 
 1: master clock generated (internally generated clock drives I2SMCK pin) 
 Slot Width 
 0: slot is 32 bits wide for DATALENGTH = 182024 bits. 
 1: slot is 24 bits wide for DATALENGTH = 182024 bits. 
  ---- Status Registers ----
 Receiver Enabled 
 Receive Ready 
 Receive Overrun 
 Transmitter Enabled 
 Transmit Ready 
 Transmit Underrun 
 Receive Overrun Channel 
 Transmit Underrun Channel 
  ---- Interrupt EnableDisableMask Registers ----
 mck = (32  (imckfs+1)  (imckdiv+1))  fs 
 mck = 12.288MHz 
 mck = 1536 fs 
 mck =  768 fs 
 mck =  512 fs 
 mck =  384 fs 
 mck =  256 fs 
 mck =  192 fs 
 mck =  128 fs 
 mck =   64 fs 
 mck = 11.2896MHz 
 mck = 1024 fs 
 mck =  512 fs 
 mck =  256 fs 
 mck =  128 fs 
 mck =   64 fs 
			
			  The RX Ready flag should not be set. However if here,
			  we flush (read) the Receive Holding Register to start
			  from a clean state.
	
	  Find the best possible settings to generate the I2S Master Clock
	  from the PLL Audio.
 codec is slave, so cpu is master 
 codec is master, so cpu is slave 
 Disable the I2S Master Clock generator. 
 Reset the I2S Master Clock generator settings. 
 Disableunprepare the PMC generated clock. 
 Update the Mode Register to generate the I2S Master Clock. 
 Finally enable the I2S Master Clock generator. 
 Read the Mode Register to retrieve the masterslave state. 
 If master starts, enable the audio clock. 
 If master stops, disable the audio clock. 
 muxclk is optional, so we return error for probe defer only 
 sentinel  }
 Get memory for driver data. 
 Get hardware capabilities. 
 Map IO registers. 
 Request IRQ. 
 Get the peripheral clock. 
 Get audio clock to generate the I2S Master Clock (I2S_MCK) 
 Master Mode not supported 
 Do hardware specific settings to initialize I2S_MCK generator 
 Enable the peripheral clock. 
 Get IP version. 
 Enable error interrupts. 
 Prepare DMA config. 
 SPDX-License-Identifier: GPL-2.0-or-later
  atmel_wm8904 - Atmel ASoC driver for boards with WM8904 codec.
  Copyright (C) 2012 Atmel
  Author: Bo Shen <voice.shen@atmel.com>
	
	  As here wm8904 use FLL output as its system clock
	  so calling set_sysclk won't care freq parameter
	  then we pass 0
 Module information 
 SPDX-License-Identifier: GPL-2.0
 TSE-850 audio - ASoC driver for the Axentia TSE-850 with a PCM5142 codec
 Copyright (C) 2016 Axentia Technologies AB
 Author: Peter Rosin <peda@axentia.se>
               loop1 relays
   IN1 +---o  +------------+  o---+ OUT1
            \                
             +              +
             |             |
             +--o  +--.     |
             |  add   |     |
             |        V     |
             |      .---.   |
   DAC +----------->|Sum|---+
             |      '---'   |
             |              |
             +              +
   IN2 +---o--+------------+--o---+ OUT2
               loop2 relays
 The 'loop1' gpio pin controls two relays, which are either in loop
 position, meaning that input and output are directly connected, or
 they are in mixer position, meaning that the signal is passed through
 the 'Sum' mixer. Similarly for 'loop2'.
 In the above, the 'loop1' relays are inactive, thus feeding IN1 to the
 mixer (if 'add' is active) and feeding the mixer output to OUT1. The
 'loop2' relays are active, short-cutting the TSE-850 from channel 2.
 IN1, IN2, OUT1 and OUT2 are TSE-850 connectors and DAC is the PCB name
 of the (filtered) output from the PCM5142 codec.
	
	  Hmmm, this gpiod_set_value_cansleep call should probably happen
	  inside snd_soc_dapm_mixer_update_power in the loop.
	
	  Map regulator output values like so:
	       -11.5V to "Low" (enum 0)
	  11.5V-12.5V to "12V" (enum 1)
	  12.5V-13.5V to "13V" (enum 2)
	      ...
	  18.5V-19.5V to "19V" (enum 8)
	  19.5V-      to "20V" (enum 9)
	
	  Map enum zero (Low) to 2 volts on the regulator, do this since
	  the ana regulator is supplied by the system 12V voltage and
	  requesting anything below the system voltage causes the system
	  voltage to be passed through the regulator. Also, the ana
	  regulator induces noise when requesting voltages near the
	  system voltage. So, by mapping Low to 2V, that noise is
	  eliminated when all that is needed is 12V (the system voltage).
  These connections are not entirely correct, since both IN1 and IN2
  are always fed to MIX (if the "IN switch" is set so), i.e. without
  regard to the loop1 and loop2 relays that according to this only
  control MUX1 and MUX2 but in fact also control how the input signals
  are routed.
  But, 1) I don't know how to do it right, and 2) it doesn't seem to
  matter in practice since nothing is powered in those sections anyway.
 connect board input to the codec left channel output pin 
 sentinel  }
 Module information 
 SPDX-License-Identifier: GPL-2.0-or-later
  atmel_ssc_dai.c  --  ALSA SoC ATMEL SSC Audio Layer Platform driver
  Copyright (C) 2005 SAN People
  Copyright (C) 2008 Atmel
  Author: Sedji Gaouaou <sedji.gaouaou@atmel.com>
          ATMEL CORP.
  Based on at91-ssc.c by
  Frank Mandarino <fmandarino@endrelia.com>
  Based on pxa2xx Platform drivers by
  Liam Girdwood <lrg@slimlogic.co.uk>
  SSC PDC registers required by the PCM DMA engine.
  SSC & PDC status bits for transmit and receive.
  DMA parameters.
  SSC interrupt handler.  Passes PDC interrupts to the DMA
  interrupt handler in the PCM driver.
	
	  Loop through the substreams attached to this SSC.  If
	  a DMA-related interrupt occurred on that substream, call
	  the DMA interrupt handler function, if one has been
	  registered in the dma_params structure by the PCM driver.
  When the bit clock is input, limit the maximum rate according to the
  Serial Clock Ratio Considerations section from the SSC documentation:
    The Transmitter and the Receiver can be programmed to operate
    with the clock signals provided on either the TK or RK pins.
    This allows the SSC to support many slave-mode data transfers.
    In this case, the maximum clock speed allowed on the RK pin is:
    - Peripheral clock divided by 2 if Receiver Frame Synchro is input
    - Peripheral clock divided by 3 if Receiver Frame Synchro is output
    In addition, the maximum clock speed allowed on the TK pin is:
    - Peripheral clock divided by 6 if Transmit Frame Synchro is input
    - Peripheral clock divided by 2 if Transmit Frame Synchro is output
  When the bit clock is output, limit the rate according to the
  SSC divider restrictions.
			 Receiver Frame Synchro (i.e. capture)
			  is output (format is _CFS) and the RK pin
			  is used for input (format is _CBM_).
			 Transmit Frame Synchro (i.e. playback)
			  is input (format is _CFM) and the TK pin
			  is used for input (format _CBM_ but not
			  using the RK pin).
-------------------------------------------------------------------------\
  DAI functions
  Startup.  Only that one substream allowed in each direction.
 Enable PMC peripheral clock for this SSC 
 Reset the SSC unless initialized to keep it in a clean state 
  Shutdown.  Clear DMA parameters and shutdown the SSC if there
  are no other substreams open.
 Reset the SSC 
 Clear the SSC dividers 
 Shutdown the SSC clock. 
  Record the DAI format for use in hw_params().
  Record SSC clock dividers for use in hw_params().
		
		  The same master clock divider is used for both
		  transmit and receive, so if a value has already
		  been set, it must match this value.
 Is the cpu-dai master of the frame clock? 
 Is the cpu-dai master of the bit clock? 
  Configure the SSC.
	
	  Currently, there is only one set of dma params for
	  each direction.  If more are added, this code will
	  have to be changed to select the proper set.
	
	  If the cpu dai should provide BCLK, but noone has provided the
	  divider needed for that to work, fall back to something sensible.
	
	  If the cpu dai should provide LRCLK, but noone has provided the
	  dividers needed for that to work, fall back to something sensible.
	
	  Determine sample size in bits and the PDC increment.
	
	  Compute SSC register settings.
		
		  DSPPCM Mode A format
		 
		  Data is transferred on first BCLK after LRC pulse rising
		  edge.If stereo, the right channel data is contiguous with
		  the left channel data.
		
		  SSC provides BCLK
		 
		  The SSC transmit and receive clocks are generated from the
		  MCK divider, and the BCLK signal is output
		  on the SSC TK line.
 set SSC clock mode register 
 set receive clock mode and format 
 set transmit clock mode and format 
 Save the status register before disabling transmit and receive 
 Save the current interrupt mask, then disable unmasked interrupts 
 restore SSC register settings 
 re-enable interrupts 
 Re-enable receive and transmit as appropriate 
 CONFIG_PM 
 CONFIG_PM 
  atmel_ssc_set_audio - Allocate the specified SSC for audio use.
  @ssc_id: SSD ID in [0, NUM_SSC_DEVICES[
 If we can grab the SSC briefly to parent the DAI device off it 
 Module information 
 SPDX-License-Identifier: GPL-2.0-or-later
 Atmel ALSA SoC Audio Class D Amplifier (CLASSD) driver
  Copyright (C) 2015 Atmel
  Author: Songjun Wu <songjun.wu@atmel.com>
 sentinel 
 cpu dai component 
 platform 
 codec 
 Closest match 
 ASoC sound card 
 regmap configuration 
 register sound card 
 SPDX-License-Identifier: GPL-2.0-or-later
 linuxsoundbcmbcm63xx-i2s-whistler.c
 BCM63xx whistler i2s driver
 Copyright (c) 2020 Broadcom Corporation
 Author: Kevin-Ke Li <kevin-ke.li@broadcom.com>
		 TX and RX block each have an independent bit to indicate
		  if it is generating the clock for the I2S bus. The bus
		  clocks need to be generated from either the TX or RX block,
		  but not both
 SPDX-License-Identifier: GPL-2.0-only
  ALSA SoC I2S Audio Layer for Broadcom BCM2835 SoC
  Author:	Florian Meier <florian.meier@koalo.de>
 		Copyright 2013
  Based on
 	Raspberry Pi PCM I2S ALSA Driver
 	Copyright (c) by Phil Poole 2013
 	ALSA SoC I2S (McBSP) Audio Layer for TI DAVINCI processor
       Vladimir Barinov, <vbarinov@embeddedalley.com>
 	Copyright (C) 2007 MontaVista Software, Inc., <source@mvista.com>
 	OMAP ALSA SoC DAI driver using McBSP port
 	Copyright (C) 2008 Nokia Corporation
 	Contact: Jarkko Nikula <jarkko.nikula@bitmer.com>
 		 Peter Ujfalusi <peter.ujfalusi@ti.com>
 	Freescale SSI ALSA SoC Digital Audio Interface (DAI) driver
 	Author: Timur Tabi <timur@freescale.com>
 	Copyright 2007-2010 Freescale Semiconductor, Inc.
 I2S registers 
 I2S register settings 
 Frame length register is 10 bit, maximum length 1024 
 General device struct 
 Backup the current state 
 Start clock if not running 
 Stop I2S module 
	
	  Clear the FIFOs
	  Requires at least 2 PCM clock cycles to take effect
 Wait for 2 PCM clock cycles 
	
	  Toggle the SYNC flag. After 2 PCM clock cycles it can be read back
	  FIXME: This does not seem to work for slave mode!
 Wait for the SYNC flag changing it's state 
 Stop clock if it was not running before 
 Restore I2S state 
 Limit masks to available slots 
		
		  The driver is limited to 2-channel setups.
		  Check that exactly 2 bits are set in the masks.
  Convert logical slot number into physical slot number.
  If odd_offset is 0 sequential number is identical to logical number.
  This is used for DSP modes with slot numbering 0 1 2 3 ...
  Otherwise odd_offset defines the physical offset for odd numbered
  slots. This is used for I2S and leftright justified modes to
  translate from logical slot numbers 0 1 2 3 ... into physical slot
  numbers 0 2 ... 3 4 ...
  Calculate channel position from mask and slot width.
  Mask must contain exactly 2 set bits.
  Lowest set bit is channel 1 position, highest set bit channel 2.
  The constant offset is added to both channel positions.
  If odd_offset is > 0 slot positions are translated to
  I2S-style TDM slot numbering ( 0 2 ... 3 4 ...) with odd
  logical slot numbers starting at physical slot odd_offset.
	
	  If a stream is already enabled,
	  the registers are already set properly.
 Check if data fits into slots 
 Check if CPU is bit clock provider 
 Check if CPU is frame sync provider 
 Clock should only be set up here if CPU is clock master 
 Setup the frame format 
 CH2 format is the same as for CH1 
 I2S mode needs an even number of slots 
		
		  Use I2S-style logical slot numbering: even slots
		  are in first half of frame, odd slots in second half.
 MSB starts one cycle after frame start 
 Setup frame sync signal for 50% duty cycle 
 Odd frame lengths aren't supported 
	
	  Transmitting data immediately after frame start, eg
	  in left-justified or DSP mode A, only works stable
	  if bcm2835 is the frame clock provider.
	
	  Set format for both streams.
	  We cannot set another frame length
	  (and therefore word length) anyway,
	  so the format will be the same.
 Setup the I2S mode 
		
		  Use frame packed mode (2 channels per 32 bit word)
		  We cannot set another frame length in the second stream
		  (and therefore word length) anyway,
		  so the format will be the same.
 CLKM selects bcm2835 clock slave mode 
 FSM selects bcm2835 frame sync slave mode 
 CLKI selects normal clocking mode, sampling on rising edge 
 FSI selects frame start on falling edge 
 Setup the DMA parameters 
 Clear FIFOs 
	
	  Clear both FIFOs if the one that should be started
	  is not empty at the moment. This should only happen
	  after overrun. Otherwise, hw_params would have cleared
	  the FIFO.
 Stop also the clock when not SND_SOC_DAIFMT_CONT 
 Should this still be running stop it 
 Enable PCM block 
	
	  Disable STBY.
	  Requires at least 4 PCM clock cycles to take effect.
 If both streams are stopped, disable module and clock 
 Disable the module 
	
	  Stopping clock is necessary, because stop does
	  not stop the clock when SND_SOC_DAIFMT_CONT
 get the clock 
 Request ioarea 
 Set the DMA address - we have to parse DT ourselves 
 Set the bus width 
 Set burst 
	
	  Set the PACK flag to enable S16_LE support (2 S16_LE values
	  packed into 32-bit transfers).
 Store the pdev 
  Copyright (C) 2014-2015 Broadcom Corporation
  This program is free software; you can redistribute it andor
  modify it under the terms of the GNU General Public License as
  published by the Free Software Foundation version 2.
  This program is distributed "as is" WITHOUT ANY WARRANTY of any
  kind, whether express or implied; without even the implied warranty
  of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
 Register offset needed for ASoC PCM module 
 Ring Buffer Ctrl Regs --- Start 
 AUD_FMM_BF_CTRL_SOURCECH_RINGBUF_X_RDADDR_REG_BASE 
 AUD_FMM_BF_CTRL_SOURCECH_RINGBUF_X_WRADDR_REG_BASE 
 AUD_FMM_BF_CTRL_SOURCECH_RINGBUF_X_BASEADDR_REG_BASE 
 AUD_FMM_BF_CTRL_SOURCECH_RINGBUF_X_ENDADDR_REG_BASE 
 AUD_FMM_BF_CTRL_SOURCECH_RINGBUF_X_FREE_MARK_REG_BASE 
 AUD_FMM_BF_CTRL_DESTCH_RINGBUF_X_RDADDR_REG_BASE 
 AUD_FMM_BF_CTRL_DESTCH_RINGBUF_X_WRADDR_REG_BASE 
 AUD_FMM_BF_CTRL_DESTCH_RINGBUF_X_BASEADDR_REG_BASE 
 AUD_FMM_BF_CTRL_DESTCH_RINGBUF_X_ENDADDR_REG_BASE 
 AUD_FMM_BF_CTRL_DESTCH_RINGBUF_X_FULL_MARK_REG_BASE 
 Ring Buffer Ctrl Regs --- End 
 Error Status Regs --- Start 
 AUD_FMM_BF_ESR_ESRX_STATUS_REG_BASE 
 AUD_FMM_BF_ESR_ESRX_STATUS_CLEAR_REG_BASE 
 AUD_FMM_BF_ESR_ESRX_MASK_REG_BASE 
 AUD_FMM_BF_ESR_ESRX_MASK_SET_REG_BASE 
 AUD_FMM_BF_ESR_ESRX_MASK_CLEAR_REG_BASE 
 Error Status Regs --- End 
 esr0 = fifo underflow 
 esr1 = ringbuf underflow 
 esr2 = ringbuf overflow 
 esr3 = freemark 
 esr4 = fullmark 
 Mask for R5F register.  Set all relevant interrupt for playback handler 
 Mask for R5F register.  Set all relevant interrupt for capture handler 
  PERIOD_BYTES_MIN is the number of bytes to at which the interrupt will tick.
  This number should be a multiple of 256. Minimum value is 256
 A period is basically an interrupt 
 period_minmax gives range of approx interrupts per buffer 
	
	  maximum buffer size in bytes = period_bytes_max  periods_max
	  We allocate this amount of data for each enabled channel
 free or full mark 
 Set the pointers to indicate full (flip uppermost bit) 
 Set the pointers to indicate empty 
	
	  The interrupt will fire when freefull mark is exceeded
	  The fmark value must be multiple of PERIOD_BYTES_MIN so set fmark
	  to be PERIOD_BYTES_MIN less than the period size.
 Map the ssp portnum to a set of ring buffers. 
 SPDIF 
 The port number maps to the bit position to be cleared 
 Clear interrupt status before enabling them 
 Unmask the interrupts of the given port
 The port number maps to the bit position to be set 
 Mask the interrupts of the given port
	
	  If freefull mark interrupt occurs, provide timestamp
	  to ALSA and update appropriate idx by period_bytes
 Set the ring buffer to full 
 Set the ring buffer to empty 
  ESR013 status  Description
   0x1	I2S0_out port caused interrupt
   0x2	I2S1_out port caused interrupt
   0x4	I2S2_out port caused interrupt
   0x8	SPDIF_out port caused interrupt
	
	  ESR status gets updates withwithout interrupts enabled.
	  So, check the ESR mask, which provides interrupt enable
	  disable status and use it to determine which ESR status
	  should be serviced.
		
		  Ringbuffer or FIFO underflow
		  If we get this interrupt then, it is also true that we have
		  not yet responded to the freemark interrupt.
		  Log a debug message.  The freemark handler below will
		  handle getting everything going again.
		
		  Freemark is hit. This is the normal interrupt.
		  In typical operation the read and write regs will be equal
 Clear ESR interrupt 
 Rearm freemark logic by writing 1 to the correct bit 
  ESR24 status  Description
   0x1	I2S0_in port caused interrupt
   0x2	I2S1_in port caused interrupt
   0x4	I2S2_in port caused interrupt
	
	  ESR status gets updates withwithout interrupts enabled.
	  So, check the ESR mask, which provides interrupt enable
	  disable status and use it to determine which ESR status
	  should be serviced.
		
		  Ringbuffer or FIFO overflow
		  If we get this interrupt then, it is also true that we have
		  not yet responded to the fullmark interrupt.
		  Log a debug message.  The fullmark handler below will
		  handle getting everything going again.
 Rearm fullmark logic by writing 1 to the correct bit 
	
	  R5 status bits	Description
	   0		ESR0 (playback FIFO interrupt)
	   1		ESR1 (playback rbuf interrupt)
	   2		ESR2 (capture rbuf interrupt)
	   3		ESR3 (Freemark play. interrupt)
	   4		ESR4 (Fullmark capt. interrupt)
 If playback interrupt happened 
 If  capture interrupt happened 
	
	  Keep track of which substream belongs to which port.
	  This info is needed by snd_pcm_period_elapsed() in irq_handler
	
	  Get the offset of the current read (for playack) or write
	  index (for capture).  Report this value back to the asoc framework.
	
	  Mask off the MSB of the rdaddr,wraddr and baseaddr
	  since MSB is not part of the address
 SPDX-License-Identifier: GPL-2.0-or-later
 linuxsoundbcmbcm63xx-pcm-whistler.c
 BCM63xx whistler pcm interface
 Copyright (c) 2020 Broadcom Corporation
 Author: Kevin-Ke Li <kevin-ke.li@broadcom.com>
 support S32 only 
 rx 
 Clear interrupt by writing 0 
 tx 
 Clear interrupt by writing 0 
  Copyright (C) 2014-2015 Broadcom Corporation
  This program is free software; you can redistribute it andor
  modify it under the terms of the GNU General Public License as
  published by the Free Software Foundation version 2.
  This program is distributed "as is" WITHOUT ANY WARRANTY of any
  kind, whether express or implied; without even the implied warranty
  of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
 Used with stream_on field to indicate which streams are active 
 Begin register offset defines 
 AUD_FMM_BF_CTRL_xxx regs 
 AUD_FMM_IOP_OUT_I2S_xxx regs 
 AUD_FMM_IOP_OUT_SPDIF_xxx regs 
 AUD_FMM_IOP_PLL_0_xxx regs 
 AUD_FMM_IOP_xxx regs 
 AUD_FMM_IOP_IN_I2S_xxx regs 
 AUD_FMM_IOP_MISC_xxx regs 
 End register offset defines 
 AUD_FMM_IOP_OUT_I2S_x_MCLK_CFG_0_REG 
 AUD_FMM_IOP_OUT_I2S_x_MCLK_CFG_REG 
 AUD_FMM_IOP_OUT_I2S_x_STREAM_CFG 
 AUD_FMM_IOP_IN_I2S_x_CAP 
 AUD_FMM_IOP_OUT_I2S_x_I2S_CFG_REG 
 AUD_FMM_BF_CTRL_SOURCECH_CFGx_REG 
 AUD_FMM_BF_CTRL_DESTCH_CFGx_REG 
 AUD_FMM_IOP_OUT_SPDIF_xxx 
 AUD_FMM_IOP_PLL_0_USER 
 AUD_FMM_IOP_PLL_0_ACTIVE 
  PLL has 3 output channels (1x, 2x, and 4x). Below are
  the common MCLK frequencies used by audio driver
 List of valid frame sizes for tdm mode 
 Set Group ID 
 Configure the AUD_FMM_IOP_OUT_I2S_x_STREAM_CFG reg 
 FCI ID is the port num 
 Configure the AUD_FMM_BF_CTRL_SOURCECH_CFGX reg 
 Configure the AUD_FMM_IOP_IN_I2S_x_CAP_STREAM_CFG_0 reg 
 Configure the AUD_FMM_BF_CTRL_DESTCH_CFGX_REG_BASE reg 
 Enable the transmit pin for this port 
 Enable and set the FCI ID for the SPDIF channel 
 FCI ID is the port num 
 Enable the spdif output pin 
 If both playback and capture are off 
 If both playback and capture are off 
 set group_sync_dis = 1 
 set group_sync_dis = 0 
 IOP SW INIT on OUT_I2S_x 
	
	  Check if the bit clock can be generated from the given MCLK.
	  MCLK must be a perfect multiple of bit clock and must be one of the
	  following values... (2,4,6,8,10,12,14)
 Set sclk rate 
 sclks_per_1fs_div = sclk cycles32 
 Set number of bitclks per frame 
 Set MCLK_RATE ssp port (spdif and ssp are the same) 
 I2S must be 64 bit per frame 
 32 bit mode is coded as 0 
  This function sets the mclk frequency for pll clock
  Bit    Update  Notes
  31     Yes     TDM Mode        (1 = TDM, 0 = i2s)
  30     Yes     Slave Mode	  (1 = Slave, 0 = Master)
  29:26  No      Sclks per frame
  25:18  Yes     FS Width
  17:14  No      Valid Slots
  13     No      Bits		  (1 = 16 bits, 0 = 32 bits)
  12:08  No     Bits per samp
  07     Yes     Justifcation    (1 = LSB, 0 = MSB)
  06     Yes     Alignment       (1 = Delay 1 clk, 0 = no delay
  05     Yes     SCLK polarity   (1 = Rising, 0 = Falling)
  04     Yes     LRCLK Polarity  (1 = High for left, 0 = Low for left)
  03:02  Yes     Reserved - write as zero
  01     No      Data Enable
  00     No      CLK Enable
 Input cfg is same as output, but the FS width is not a valid field 
 DSP_A = data after FS, DSP_B = data during FS 
	
	  SSP out cfg.
	  Retain bits we do not want to update, then OR in new bits
	
	  SSP in cfg.
	  Retain bits we do not want to update, then OR in new bits
	
	  Configure the word clk and bit clk as output or tristate
	  Each port has 4 bits for controlling its pins.
	  Shift the mask based upon port number.
 Set bit for tri-state 
 Clear bit for drive 
 default to 32-bits per slot 
 Slot value must be even 
 We encode 16 slots as 0 in the reg 
 Slot Width is either 16 or 32 
 Set capture side of ssp port 
 Set playback side of ssp port 
  Return < 0 if error
  Return 0 if disabled
  Return 1 if enabled and node is parsed successfully
 For the purposes of this code SPDIF can be I2S mode 
 Tri-state all controlable pins until we know that we need them 
 negative is err, 0 is active and good, 1 is disabled 
  ALSA SoC Synopsys I2S Audio Layer
  soundsocdwcdesignware_i2s.c
  Copyright (C) 2010 ST Microelectronics
  Rajeev Kumar <rajeevkumar.linux@gmail.com>
  This file is licensed under the terms of the GNU General Public
  License version 2. This program is licensed "as is" without any
  warranty of any kind, whether express or implied.
		
		  Check if TX fifo is empty. If empty fill FIFO with samples
		  NOTE: Only two channels supported
		
		  Data available. Retrieve samples from FIFO
		  NOTE: Only two channels supported
 Error Handling: TX 
 Error Handling: TX 
  The following tables allow a direct lookup of various parameters
  defined in the I2S block's configuration in terms of sound system
  parameters.  Each table is sized to the number of entries possible
  according to the number of configuration bits describing an I2S
  block parameter.
 Maximum bit resolution of a channel - not uniformly spaced 
 Width of (DMA) bus 
 PCM format to support channel resolution 
	
	  Read component parameter registers to extract
	  the I2S block's configuration.
 Set DMA slaves info 
  ALSA SoC Synopsys PIO PCM for I2S driver
  soundsocdwcdesignware_pcm.c
  Copyright (C) 2016 Synopsys
  Jose Abreu <joabreu@synopsys.com>
  This file is licensed under the terms of the GNU General Public
  License version 2. This program is licensed "as is" without any
  warranty of any kind, whether express or implied.
 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)
 This file is provided under a dual BSDGPLv2 license.  When using or
 redistributing this file, you may do so under either license.
 Copyright(c) 2018 Intel Corporation. All rights reserved.
 Author: Liam Girdwood <liam.r.girdwood@linux.intel.com>
  Helper function to determine the target DSP state during
  system suspend. This function only cares about the device
  D-states. Platform-specific substates, if any, should be
  handled by the platform-specific parts.
 DSP should be in D3 if the system is suspending to S3 
		
		  Currently, the only criterion for retaining the DSP in D0
		  is that there are streams that ignored the suspend trigger.
		  Additional criteria such Soundwire clock-stop mode and
		  device suspend latency considerations will be added later.
 This case would be during runtime suspend 
 configure ctx save ipc message 
 send ctx save ipc to dsp 
 nothing to do if debugfs buffer is not IO mem 
 cache memory that is only accessible in D0 
 do nothing if dsp resume callbacks are not set 
 DSP was never successfully started, nothing to resume 
	
	  if the runtime_resume flag is set, call the runtime_resume routine
	  or else call the system resume routine
	
	  Nothing further to be done for platforms that support the low power
	  D0 substate.
 load the firmware 
	
	  Boot the firmware. The FW boot status will be modified
	  in snd_sof_run_firmware() depending on the outcome.
 resume DMA trace, only need send ipc 
 non fatal 
 restore pipelines 
 notify DSP of system resume 
 do nothing if dsp suspend callback is not set 
 prepare for streams to be resumed properly upon resume 
 Skip to platform-specific suspend if DSP is entering D0 
 release trace 
 cache debugfs contents during runtime suspend 
 notify DSP of upcoming power down 
		
		  runtime PM has logic to handle -EBUSY-EAGAIN so
		  pass these errors up
 FW in unexpected state, continue to power down 
 return if the DSP was not probed successfully 
 platform-specific suspend 
 Do not reset FW state if DSP is in D0 
 reset FW state 
 Notify DSP of upcoming power down 
 will suspend to S3 by default 
 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)
 This file is provided under a dual BSDGPLv2 license.  When using or
 redistributing this file, you may do so under either license.
 Copyright(c) 2018 Intel Corporation. All rights reserved.
 Author: Liam Girdwood <liam.r.girdwood@linux.intel.com>
 allow runtime_pm 
	
	  runtime pm for pci device is "forbidden" by default.
	  so call pm_runtime_allow() to enable it.
 mark last_busy for pm_runtime to make sure not suspend immediately 
 follow recommendation in pci-driver.c to decrement usage counter 
	
	  for platforms using the SOF community key, change the
	  default path automatically to pick the right files from the
	  linux-firmware tree. This can be overridden with the
	  fw_path kernel parameter, e.g. for developers.
 alternate fw and tplg filenames ? 
 set callback to be called on successful device probe to enable runtime_pm 
 call sof helper for DSP hardware probe 
 call sof helper for DSP hardware remove 
 follow recommendation in pci-driver.c to increment usage counter 
 release pci regions and disable device 
 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)
 Copyright 2021 NXP
 Author: Daniel Baluta <daniel.baluta@nxp.com>
  sof compr fragment elapse, this could be called in irq thread context
 use the same workqueue-based solution as for PCM, cf. snd_sof_pcm_elapsed 
 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)
 Copyright 2019 NXP
 Author: Daniel Baluta <daniel.baluta@nxp.com>
 platform specific devices 
 allow runtime_pm 
 set callback to be called on successful device probe to enable runtime_pm 
 call sof helper for DSP hardware probe 
 call sof helper for DSP hardware remove 
 DT driver definition 
 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)
 This file is provided under a dual BSDGPLv2 license.  When using or
 redistributing this file, you may do so under either license.
 Copyright(c) 2019 Intel Corporation. All rights reserved.
 Author: Ranjani Sridharan <ranjani.sridharan@linux.intel.com>
 reset readback offset for scontrol 
 notify DSP of kcontrol values 
 set NONE flag to clear all previous settings 
 set up all controls for the widget 
 only free when use_count is 0 
 reset route setup status for all routes that contain this widget 
 skip if there is no private data 
 widget already set up 
 append extended data to the end of the component 
 restore kcontrols for widget 
 skip if there's no private data 
 nothing to do if route is already set up 
 send ipc 
 ignore routes involving virtual widgets in topology 
 find route matching source and sink widgets 
	
	  Set up connections between widgets in the sinksource paths based on direction.
	  Some non-SOF widgets exist in topology either for compatibility or for the
	  purpose of connecting a pipeline from a host to a DAI in order to receive the DAPM
	  events. But they are not handled by the firmware. So ignore them.
 nothing to set up 
 set up widgets in the list 
		
		  The scheduler widget for a pipeline is not part of the connected DAPM
		  widget list and it needs to be set up before the widgets in the pipeline
		  are set up. The use_count for the scheduler widget is incremented for every
		  widget in a given pipeline to ensure that it is freed only after the last
		  widget in the pipeline is freed.
 set up the widget 
	
	  error in setting pipeline connections will result in route status being reset for
	  routes that were successfully set up when the widgets are freed.
 complete pipelines 
 free all widgets that have been set up successfully 
 nothing to free 
	
	  Free widgets in the list. This can fail but continue freeing other widgets to keep
	  use_counts balanced.
		
		  free widget and its pipe_widget. Either of these can fail, but free as many as
		  possible before freeing the list and returning the error.
  helper to determine if there are only D0i3 compatible
  streams active
			
			  substream->runtime being not NULL indicates
			  that the stream is open. No need to check the
			  stream state.
	
	  SOF requires hw_params to be set-up internally upon resume.
	  So, set the flag to indicate this for those streams that
	  have been suspended.
			
			  do not reset hw_params upon resume for streams that
			  were kept running during suspend
 set internal flag for BE 
 restore pipeline components 
 only set up the widgets belonging to static pipelines 
 update DAI config. The IPC will be sent in sof_widget_setup() 
			
			  The link DMA channel would be invalidated for running
			  streams but not for streams that were in the PAUSED
			  state during suspend. So invalidate it here before setting
			  the dai config in the DSP.
 restore pipeline connections 
 only set up routes belonging to static pipelines 
 complete pipeline 
 only complete static pipelines 
  This function doesn't free widgets during suspend. It only resets the set up status for all
  routes and use_count for all widgets.
	
	  This function is called during suspend and for one-time topology verification during
	  first boot. In both cases, there is no need to protect swidget->use_count and
	  sroute->setup because during suspend all streams are suspended and during topology
	  loading the sound card unavailable to open PCMs.
  Generic object lookup APIs.
 match with PCM dai name 
 match with playback caps name if set 
 match with capture caps name if set 
 find widget by stream name and direction 
 use the tplg configured mclk if existed 
 not yet implemented for platforms other than the above 
  Helper to get SSP MCLK from a pcm_runtime.
  Return 0 if not exist.
  Helper to get SSP BCLK from a pcm_runtime.
  Return 0 if not exist.
  SOF Driver enumeration.
 find machine 
 select nocodec mode 
 register machine driver, pass machine info as pdata 
 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)
 This file is provided under a dual BSDGPLv2 license.  When using or
 redistributing this file, you may do so under either license.
 Copyright(c) 2018 Intel Corporation. All rights reserved.
 Author: Liam Girdwood <liam.r.girdwood@linux.intel.com>
 Generic firmware loader.
 keep a local copy of the data 
 create read-only cc_version debugfs to store compiler version info 
 use local copy of the cc_version to prevent data corruption 
 errors are only due to memory allocation, not debugfs 
 parse the extended FW boot data structures from FW boot message 
 get first header 
 read in ext structure 
 process structure data 
 They are supported but we don't do anything here 
 move to next header 
 log ABI versions and check FW compatibility 
 calculate elements counter 
 unused memory space is zero filled - mapped to EMPTY elements 
 TODO: use ipc msg size from config data 
	
	  assert fw size is big enough to contain extended manifest header,
	  it prevents from reading unallocated memory from `head` in following
	  step.
	
	  When fw points to extended manifest,
	  then first u32 must be equal SOF_EXT_MAN_MAGIC_NUMBER.
 otherwise given fw don't have an extended manifest 
 parse extended FW manifest data structures 
 Assert firmware starts with extended manifest 
 incompatible version 
 get first extended manifest element header 
 process structure data 
  IPC Firmware ready.
 check for ABI compatibility and create memory windows on first boot 
 mailbox must be on 4k boundary 
 no need to re-check versionABI for subsequent boots 
	
	  copy data from the DSP FW ready offset
	  Subsequent error handling is not needed for BLK_TYPE_SRAM
 make sure ABI version is compatible 
 now check for extended data 
 generic module parser for mmaped DSPs 
 module->size doesn't include header size 
 check for wrap 
 minus header size of block 
 not handled atm 
 checking block->size to avoid unaligned access 
 minus body size of block 
 next block 
 Read the header information from the data pointer 
 verify FW sig 
 check size is valid 
 parse each module 
 check for wrap 
 check for wrap 
 minus header size of module 
 module 
 minus body size of module 
 Don't request firmware again if firmware is already requested 
github.comthesofprojectsof-bin\n");
 check for extended manifest 
 when no error occurred, drop extended manifest 
 No extended manifest, so nothing to skip during FW load 
 make sure the FW header and file is valid 
 prepare the DSP for FW loading 
 parse and load firmware modules to DSP 
 (re-)enable dsp dump 
 create read-only fw_version debugfs to store boot version info 
 errors are only due to memory allocation, not debugfs 
 perform pre fw run operations 
 boot the firmware on the DSP 
	
	  now wait for the DSP to boot. There are 3 possible outcomes:
	  1. Boot wait times out indicating FW boot failure.
	  2. FW boots successfully and fw_ready op succeeds.
	  3. FW boots but fw_ready op fails.
 FW boots but fw_ready op failed 
 perform post fw run operations 
 TODO: support module unloading at runtime 
 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)
 This file is provided under a dual BSDGPLv2 license.  When using or
 redistributing this file, you may do so under either license.
 Copyright(c) 2018 Intel Corporation. All rights reserved.
 Author: Liam Girdwood <liam.r.girdwood@linux.intel.com>
  Constants used in the computation of linear volume gain
  from dB gain 20th root of 10 in Q1.16 fixed-point notation
 40th root of 10 in Q1.16 fixed-point notation
  Volume fractional word length define to 16 sets
  the volume linear gain value to use Qx.16 format
 0.5 dB step value in topology TLV 
 Full volume for default values 
 TLV data items 
 size of tplg abi in byte 
 send pcm params ipc 
 get runtime PCM params using widget's stream name 
 set IPC PCM params 
 set format 
 send IPC to the DSP 
 send stream trigger ipc 
 set IPC stream params 
 send IPC to the DSP 
 get runtime PCM params using widget's stream name 
 process events 
 set pcm params 
 start trigger 
 stop trigger 
 pcm free 
 event handlers for keyword detect component 
 we only support dB scale TLV type at the moment 
 min value in topology tlv data is multiplied by 100 
 volume steps 
 mute ONOFF 
  Function to truncate an unsigned 64-bit number
  by x bits and return 32-bit unsigned number. This
  function also takes care of rounding while truncating
 do not truncate more than 32 bits 
  Function to compute a ^ exp where,
  a is a fractional number represented by a fixed-point
  integer with a fractional world length of "fwl"
  exp is an integer
  fwl is the fractional word length
  Return value is a fractional number represented by a
  fixed-point integer with a fractional word length of "fwl"
 if exponent is 0, return 1 
 determine the number of iterations based on the exponent 
 mutiply a "iter" times to compute power 
		
		  Product of 2 Qx.fwl fixed-point numbers yields a Q2x.2fwl
		  Truncate product back to fwl fractional bits with rounding
 if exp is positive, return the result 
 if exp is negative, return the multiplicative inverse 
  Function to calculate volume gain from TLV data.
  This function can only handle gain steps that are multiples of 0.5 dB
 mute volume 
	
	  compute dB gain from tlv. tlv_step
	  in topology is multiplied by 100
	
	  compute linear gain represented by fixed-point
	  int with VOLUME_FWL fractional bits
 extract the fractional part of volume step 
 if volume step is an odd multiple of 0.5 dB 
  Set up volume table for kcontrols from tlv data
  "size" specifies the number of entries in the table
 init the volume table 
 populate the volume table 
  Supported Frame format types and lookup, add new ones to end of list.
 use s32le if nothing is specified 
  Topology Token Parsing.
  New tokens should be added to headers and parsing tables below.
 Buffers 
 DAI 
 BE DAI link 
 scheduling 
 volume 
 SRC 
 ASRC 
 Tone 
 EFFECT 
 PCM 
 PCM 
 Generic components 
 SSP 
 ALH 
 DMIC 
 ESAI 
 SAI 
 Core tokens 
 Component extended tokens 
  DMIC PDM Tokens
  SOF_TKN_INTEL_DMIC_PDM_CTRL_ID should be the first token
  as it increments the index while parsing the array of pdm tokens
  and determines the correct offset
 HDA 
 Leds 
 parse element by element 
 search for token 
 match token type 
 match token id 
 matched - now load token 
 parse element by element 
 search for token 
 match token type 
 match token id 
 matched - now load token 
 parse element by element 
 search for token 
 match token type 
 match token id 
 load token 
  sof_parse_token_sets - Parse multiple sets of tokens
  @scomp: pointer to soc component
  @object: target ipc struct for parsed values
  @tokens: token definition array describing what tokens to parse
  @count: number of tokens in definition array
  @array: source pointer to consecutive vendor arrays to be parsed
  @priv_size: total size of the consecutive source arrays
  @sets: number of similar token sets to be parsed, 1 set has count elements
  @object_size: offset to next target ipc struct with multiple sets
  This function parses multiple sets of tokens in vendor arrays into
  consecutive ipc structs.
 validate asize 
 FIXME: A zero-size array makes no sense 
 make sure there is enough data before parsing 
 call correct parser depending on type 
 next array 
 move to next target struct 
	
	  sof_parse_tokens is used when topology contains only a single set of
	  identical tuples arrays. So additional parameters to
	  sof_parse_token_sets are sets = 1 (only 1 set) and
	  object_size = 0 (irrelevant).
  Standard Kcontrols.
 validate topology data 
	
	  If control has more than 2 channels we need to override the info. This is because even if
	  ASoC layer has defined topology's max channel count to SND_SOC_TPLG_MAX_CHAN = 8, the
	  pre-defined dapm control types (and related functions) creating the actual control
	  restrict the channels only to mono or stereo.
 init the volume getput data 
 set cmd for mixer control 
 extract tlv data 
 set up volume table 
 set default volume values to 0dB in control 
 set up possible led control from mixer private data 
 validate topology data 
 init the enum getput data 
 init the getput bytes data 
 external kcontrol init - used for any driver specific init 
 send IPC to the DSP 
  DAI Topology
 Static DSP core power management so far, should be extended in the future 
 power up the core if it is host managed 
 Now notify DSP 
 power down core if it is host managed and return the original error if this fails too 
 First enable the pipeline core 
 does stream match DAI link ? 
				
				  Please create DAI widget in the right order
				  to ensure BE will connect to the right DAI
				  widget.
				
				  Please create DAI widget in the right order
				  to ensure BE will connect to the right DAI
				  widget.
 check we have a connection 
  sof_comp_alloc - allocate and initialize buffer for a new component
  @swidget: pointer to struct snd_sof_widget containing extended data
  @ipc_size: IPC payload size that will be updated depending on valid
   extended data.
  @index: ID of the pipeline the component belongs to
  Return: The pointer to the new allocated component, NULL if failed.
 only non-zero UUID is valid 
 configure comp new IPC message 
 handle the extended data if needed 
 append extended data to the end of the component 
 update ipc_size and return 
 configure dai IPC message 
		
		  copy only the sof_ipc_comp_dai to avoid collapsing
		  the snd_sof_dai, the extended data is kept in the
		  snd_sof_widget.
  Buffer topology
 configure dai IPC message 
 bind PCM ID to host component ID 
  PCM Topology
 configure host comp IPC message 
  Pipeline Topology
 configure dai IPC message 
 component at start of pipeline is our stream id 
  Mixer topology
 configure mixer IPC message 
  Mux topology
 configure mux IPC message 
  PGA Topology
 configure volume IPC message 
  SRC Topology
 configure src IPC message 
  ASRC Topology
 configure ASRC IPC message 
  Signal Generator Topology
 configure siggen IPC message 
 make sure data is valid - data can be updated at runtime 
 get data type 
 allocate struct for widget control data sizes and types 
 get possible component controls and get size of all pdata 
 we are exceeding max ipc size, config needs to be sent separately 
 configure iir IPC message 
	
	  found private data in control, so copy it.
	  get possible component controls - get size of all pdata,
	  then memcpy with headers
  Processing Component Topology - can be "effect", "codec", or general
  "processing".
 check we have some tokens - we need at least process type 
 get the process token 
 now load process specific data and send IPC 
 validate widget event type 
 only KEYWORD_DETECT comps should handle this 
 bind event to keyword detect comp 
 external widget init - used for any driver specific init 
 handle any special case widgets 
 check IPC reply 
 bind widget to external event 
 free sroute and its private data 
 free dai config 
 power down the pipeline schedule core 
		
		  Runtime PM should still function normally if topology loading fails and
		  it's components are unloaded. Do not power down the primary core so that the
		  CTX_SAVE IPC can succeed during runtime suspend.
 free private value 
 remove and free swidget object 
  DAI HW configuration.
 FE DAI - used for any driver specific init 
 nothing to do for BEs atm 
 do we need to allocate playback PCM DMA pages 
 allocate playback page table buffer 
 bind pcm to host comp 
 do we need to allocate capture PCM DMA pages 
 allocate capture page table buffer 
 bind pcm to host comp 
 free PCM DMA pages 
 remove from list and free spcm 
 clock directions wrt codec 
 codec is bclk provider 
 codec is bclk consumer 
 inverted clocks ? 
  Send IPC and set the same config for all DAIs with name matching the link
  name. Note that the function can only be used for the case that all DAIs
  have a common DAI config for now.
			
			  the same dai config will be applied to all DAIs in
			  the same dai link. We have to ensure that the ipc
			  dai config's dai_index match to the component's
			  dai_index.
	
	  machine driver may define a dai link with playback and capture
	  dai enabled, but the dai link in topology would support both, one
	  or none of them. Here print a warning message to notify user
	
	  Parse common data, we should have 1 common data per hw_config.
 process all possible hw configs 
 handle masterslave and inverted clocks 
 copy differentiating hw configs to ipc structs 
 validate SSP fsync rate and channel count 
 set config for all DAI's with name matching the link name 
 handle masterslave and inverted clocks 
 init IPC 
 set config for all DAI's with name matching the link name 
 handle masterslave and inverted clocks 
 init IPC 
 set config for all DAI's with name matching the link name 
 Ensure the entire DMIC config struct is zeros 
 get DMIC tokens 
 get DMIC PDM tokens 
 set IPC header size 
 debug messages 
	
	  this takes care of backwards compatible handling of fifo_bits_b.
	  It is deprecated since firmware ABI version 3.0.1.
 set config for all DAI's with name matching the link name 
 init IPC 
 get any bespoke DAI tokens 
 init IPC 
 set config for all DAI's with name matching the link name 
 DAI link - used for any driver specific init 
	
	  Set nonatomic property for FE dai links as their trigger action
	  involves IPC's.
		
		  set default trigger order for all links. Exceptions to
		  the rule will be handled in sof_pcm_dai_link_fixup()
		  For playback, the sequence is the following: start FE,
		  start BE, stop BE, stop FE; for Capture the sequence is
		  inverted start BE, start FE, stop FE, stop BE
 nothing more to do for FE dai links 
 check we have some tokens - we need at least DAI type 
 get any common DAI tokens 
	
	  DAI links are expected to have at least 1 hw_config.
	  But some older topologies might have no hw_config for HDA dai links.
 Reserve memory for all hw configs, eventually freed by widget 
 Copy common data to all config ipc structs 
 now load DAI specific data and send IPC - type comes from token 
 DAI link - used for any driver specific init 
 allocate memory for sroute and connect 
 source component 
	
	  Virtual widgets of type outputout_drv may be added in topology
	  for compatibility. These are not handled by the FW.
	  So, don't send routes whose sourcesink widget is of such types
	  to the DSP.
 sink component 
	
	  Don't send routes whose sink widget is of type
	  output or out_drv to the DSP
	
	  For virtual routes, both sink and source are not
	  buffer. Since only buffer linked to component is supported by
	  FW, others are reported as error, add check in route function,
	  do not send it to FW when both source and sink are not buffer
 add route to route list 
  sof_set_pipe_widget - Set pipe_widget for a component
  @sdev: pointer to struct snd_sof_dev
  @pipe_widget: pointer to struct snd_sof_widget of type snd_soc_dapm_scheduler
  @swidget: pointer to struct snd_sof_widget that has the same pipeline ID as @pipe_widget
  Return: 0 if successful, -EINVAL on error.
  The function checks if @swidget is associated with any volatile controls. If so, setting
  the dynamic_pipeline_widget is disallowed.
 dynamic widgets cannot have volatile kcontrols 
 set the pipe_widget and apply the dynamic_pipeline_widget_flag 
 completion - called at completion of firmware loading 
 set the pipe_widget and apply the dynamic_pipeline_widget_flag 
			
			  Apply the dynamic_pipeline_widget flag and set the pipe_widget field
			  for all widgets that have the same pipeline ID as the scheduler widget
 verify topology components loading including dynamic pipelines 
 set up static pipelines 
 manifest - optional to inform component of manifest 
 backward compatible with tplg without ABI info 
 vendor specific kcontrol handlers available for binding 
 vendor specific bytes ext handlers available for binding 
 external kcontrol init - used for any driver specific init 
 external kcontrol init - used for any driver specific init 
 external widget init - used for any driver specific init 
 .widget_load is not currently used 
 FE DAI - used for any driver specific init 
 DAI link - used for any driver specific init 
 completion - called at completion of firmware loading 
 manifest - optional to inform component of manifest 
 vendor specific kcontrol handlers available for binding 
 vendor specific bytes ext handlers available for binding 
github.comthesofprojectsof-bin\n");
 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)
 This file is provided under a dual BSDGPLv2 license.  When using or
 redistributing this file, you may do so under either license.
 Copyright(c) 2019-2021 Intel Corporation. All rights reserved.
 Author: Cezary Rojewski <cezary.rojewski@intel.com>
  sof_ipc_probe_init - initialize data probing
  @sdev:		SOF sound device
  @stream_tag:		Extractor stream tag
  @buffer_size:	DMA buffer size to set for extractor
  Host chooses whether extraction is supported or not by providing
  valid stream tag to DSP. Once specified, stream described by that
  tag will be tied to DSP for extraction for the entire lifetime of
  probe.
  Probing is initialized only once and each INIT request must be
  matched by DEINIT call.
  sof_ipc_probe_deinit - cleanup after data probing
  @sdev:	SOF sound device
  Host sends DEINIT request to free previously initialized probe
  on DSP side once it is no longer needed. DEINIT only when there
  are no probes connected and with all injectors detached.
  sof_ipc_probe_points_info - retrieve list of active probe points
  @sdev:	SOF sound device
  @desc:	Returned list of active probes
  @num_desc:	Returned count of active probes
  Host sends PROBE_POINT_INFO request to obtain list of active probe
  points, valid for disconnection when given probe is no longer
  required.
  sof_ipc_probe_points_add - connect specified probes
  @sdev:	SOF sound device
  @desc:	List of probe points to connect
  @num_desc:	Number of elements in @desc
  Dynamically connects to provided set of endpoints. Immediately
  after connection is established, host must be prepared to
  transfer data from or to target stream given the probing purpose.
  Each probe point should be removed using PROBE_POINT_REMOVE
  request when no longer needed.
  sof_ipc_probe_points_remove - disconnect specified probes
  @sdev:		SOF sound device
  @buffer_id:		List of probe points to disconnect
  @num_buffer_id:	Number of elements in @desc
  Removes previously connected probes from list of active probe
  points and frees all resources on DSP side.
 disconnect all probe points 
 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)
 This file is provided under a dual BSDGPLv2 license.  When using or
 redistributing this file, you may do so under either license.
 Copyright(c) 2018 Intel Corporation. All rights reserved.
 Author: Keyon Jie <yang.jie@linux.intel.com>
  Register IO
  The sof_io_xyz() wrappers are typically referenced in snd_sof_dsp_ops
  structures and cannot be inlined.
  IPC Mailbox IO
  Memory copy.
 __iowrite32_copy use 32bit size values so divide by 4 
		 first read the 32bit data of dest, then change affected
		  bytes, and write back to dest. For unaffected bytes, it
		  should not be changed
  Generic buffer page table creation.
  Take the each physical page address and drop the least significant unused
  bits from each (based on PAGE_SIZE). Then pack valid page address bits
  into compressed page table.
		
		  The number of valid address bits for each page is 20.
		  idx determines the byte position within page_table
		  where the current page's address is stored
		  in the compressed page_table.
		  This can be calculated by multiplying the page number by 2.5.
		
		  pagetable compression:
		  byte 0     byte 1     byte 2     byte 3     byte 4     byte 5
		  ___________pfn 0__________ __________pfn 1___________  _pfn 2...
		  .... ....  .... ....  .... ....  .... ....  .... ....  ....
		  It is created by:
		  1. set current location to 0, PFN index i to 0
		  2. put pfn[i] at current location in Little Endian byte order
		  3. calculate an intermediate value as
		     x = (pfn[i+1] << 4) | (pfn[i] & 0xf)
		  4. put x at offset (current location + 2) in LE byte order
		  5. increment current location by 5 bytes, increment i by 2
		  6. continue to (2)
 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)
 This file is provided under a dual BSDGPLv2 license.  When using or
 redistributing this file, you may do so under either license.
 Copyright(c) 2018 Intel Corporation. All rights reserved.
 Author: Liam Girdwood <liam.r.girdwood@linux.intel.com>
 PCM Layer, interface between ALSA and IPC.
 Create DMA buffer page table for DSP 
 validate offset 
  sof pcm period elapse work
  sof pcm period elapse, this could be called at irq thread context.
	
	  snd_pcm_period_elapsed() can be called in interrupt context
	  before IRQ_HANDLED is returned. Inside snd_pcm_period_elapsed(),
	  when the PCM is done draining or xrun happened, a STOP IPC will
	  then be sent and this IPC will hit IPC timeout.
	  To avoid sending IPC before the previous IPC is handled, we
	  schedule delayed work here to call the snd_pcm_period_elapsed().
 send IPC to the DSP 
 query DAPM for list of connected widgets and set them up 
 nothing to do for BE 
	
	  Handle repeated calls to hw_params() without free_pcm() in
	  between. At least ALSA OSS emulation depends on this.
 create compressed page table for audio firmware 
 number of pages should be rounded up 
 set IPC PCM parameters 
 container size 
 format 
 firmware already configured host stream 
 if this is a repeated hw_params without hw_free, skip setting up widgets 
 send hw_params IPC to the DSP 
 save pcm hw_params 
 nothing to do for BE 
 nothing to do for BE 
 set hw_params 
  FE dai link trigger actions are always executed in non-atomic context because
  they involve IPC's.
 nothing to do for BE 
			
			  this case will be triggered when INFO_RESUME is
			  supported, no need to resume streams that remained
			  enabled in D0ix.
 set up hw_params 
			
			  This case will be triggered when INFO_RESUME is
			  not supported, no need to re-start streams that
			  remained enabled in D0ix.
			
			  trap the event, not sending trigger stop to
			  prevent the FW pipelines from being stopped,
			  and mark the flag to ignore the upcoming DAPM
			  PM events.
	
	  DMA and IPC sequence is different for start and stop. Need to send
	  STOP IPC before stop DMA
 send IPC to the DSP 
 need to STOP DMA even if STOP IPC failed 
 free PCM if reset_hw_params is set and the STOP IPC is successful 
 free widget list only for SUSPEND trigger 
 nothing to do for BE 
 use dsp ops pointer callback directly if set 
 read position from DSP 
 nothing to do for BE 
 set runtime config 
 platform-specific 
 set any runtime constraints based on topology 
	
	  caps->buffer_size_min is not used since the
	  snd_pcm_hardware structure only defines buffer_bytes_max
 set wait time - TODO: come from topology 
 nothing to do for BE 
		
		  keep going, no point in preventing the close
		  from happening
  Pre-allocate playbackcapture audio buffer pages.
  no need to explicitly release memory preallocated by sof_pcm_new in pcm_free
  snd_pcm_lib_preallocate_free_for_all() is called by the core.
 find SOF PCM for this RTD 
 do we need to pre-allocate playback audio buffer pages 
 pre-allocate playback audio buffer pages 
 do we need to pre-allocate capture audio buffer pages 
 pre-allocate capture audio buffer pages 
	
	  Search for all matching DAIs as we can have both playback and capture DAI
	  associated with the same link.
 fixup the BE DAI link to match any values from topology 
 no topology exists for this BE, try a common configuration 
  set 48k, stereo, 16bits by default 
 read format from topology 
 read rate and channels from topology 
 search for config to pcm params match, if not found use default 
 DMIC only supports 16 or 32 bit formats 
		
		  HDAudio does not follow the default trigger
		  sequence due to firmware implementation
		
		  Dai could run with different channel count compared with
		  front end, so get dai channel count from topology
 load the default topology 
 remove topology 
 increment module refcount when a pcm is opened 
 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)
 This file is provided under a dual BSDGPLv2 license.  When using or
 redistributing this file, you may do so under either license.
 Copyright(c) 2018 Intel Corporation. All rights reserved.
 Author: Liam Girdwood <liam.r.girdwood@linux.intel.com>
 the sof- prefix is added by the core 
 set up BE dai_links 
 create dummy BE dai_links 
 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)
 This file is provided under a dual BSDGPLv2 license.  When using or
 redistributing this file, you may do so under either license.
 Copyright(c) 2018 Intel Corporation. All rights reserved.
 Author: Liam Girdwood <liam.r.girdwood@linux.intel.com>
 Generic IPC layer that can work over MMIO and SPII2C. PHY layer provided
 by platform driver code.
  IPC message TxRx message handling.
 SOF generic IPC data 
 protects messages and the disable flag 
 disables further sending of ipc's 
 wait for IPC message reply 
 wait for DSP IPC completion 
 copy the data returned from DSP 
 re-enable dumps after successful IPC tx 
 send IPC message from host to DSP 
	
	  The spin-lock is also still needed to protect message objects against
	  other atomic contexts.
 initialise the message 
 attach any data 
 Next reply that we receive will be related to this message 
 now wait for completion 
 send IPC message from host to DSP 
 ensure the DSP is in D0 before sending a new IPC 
  send IPC message from host to DSP without modifying the DSP state.
  This will be used for IPC's that can be handled by the DSP
  even in a low-power D0 substate.
 Serialise IPC TX 
 handle reply message from DSP 
 wake up and return the error if we have waiters on this message ? 
 read back full message 
 DSP firmware has sent host a message  
 read back header 
 check message type 
 check for FW boot completion 
 wake up firmware loader 
 need to pass msg id into the function 
  IPC trace mechanism.
 read back full message 
  IPC stream position.
 only inform ALSA for period_wakeup mode 
 DSP notifies host of an XRUN within FW 
 stop PCM on XRUN - used for pipeline debug 
 stream notifications from DSP FW 
 get msg cmd type and msd id 
 get stream position IPC - use faster MMIO method if available on platform 
 read position via slower IPC 
 send IPC to the DSP 
 calculate payload size and number of messages 
 allocate max ipc size because we have at least one 
 copy the header data 
 Serialise IPC TX 
 copy the payload data in a loop 
  IPC get()set() for kcontrols.
	
	  Volatile controls should always be part of static pipelines and the widget use_count
	  would always be > 0 in this case. For the others, just return the cached value if the
	  widget is not set up.
 read or write firmware volume 
 writeread value header via mmaped region 
 calculate header and data size 
 send normal size ipc in one part 
 data is bigger than max ipc size, chop into smaller pieces 
 large messages is only supported from ABI 3.3.0 onwards 
 copy the fw_version into debugfs at first boot 
 indicate that we aren't sending a message ATM 
 disable sending of ipc's 
 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)
 This file is provided under a dual BSDGPLv2 license.  When using or
 redistributing this file, you may do so under either license.
 Copyright(c) 2018 Intel Corporation. All rights reserved.
 Author: Liam Girdwood <liam.r.girdwood@linux.intel.com>
 This is for registers bits with attribute RWC 
 This is for registers bits with attribute RWC 
	
	  check if DSP is not ready and did not set the dsp_oops_offset.
	  if the dsp_oops_offset is not set, set it from the panic message.
	  Also add a check to memory window setting with panic message.
 We want to see the DSP panic! 
 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)
 This file is provided under a dual BSDGPLv2 license.  When using or
 redistributing this file, you may do so under either license.
 Copyright(c) 2018 Intel Corporation. All rights reserved.
 Author: Liam Girdwood <liam.r.girdwood@linux.intel.com>
 see SOF_DBG_ flags 
 SOF defaults if not provided by the platform in ms 
  FW Panicfault handling.
 standard FW panic types 
  helper to be called from .dbg_dump callbacks. No error code is
  provided, it's left as an exercise for the caller of .dbg_dump
  (typically IPC or loader)
 is firmware dead ? 
 no fault ? 
 unknown error 
 			FW Boot State Transition Diagram
     +-----------------------------------------------------------------------+
     |									      |
  ------------------	     ------------------				      |
  |		    |	     |		      |				      |
  |   BOOT_FAILED  |	     |  READY_FAILED  |-------------------------+     |
  |		    |	     |	              |				|     |
  ------------------	     ------------------				|     |
 	^			    ^					|     |
 	|			    |					|     |
  (FW Boot Timeout)		(FW_READY FAIL)				|     |
 	|			    |					|     |
 	|			    |					|     |
  ------------------		    |		   ------------------	|     |
  |		    |		    |		   |		    |	|     |
  |   IN_PROGRESS  |---------------+------------->|    COMPLETE    |	|     |
  |		    | (FW Boot OK)   (FW_READY OK) |		    |	|     |
  ------------------				   ------------------	|     |
 	^						|		|     |
 	|						|		|     |
  (FW Loading OK)			       (System SuspendRuntime Suspend)
 	|						|		|     |
 	|						|		|     |
  ------------------		------------------	|		|     |
  |		    |		|		 |<-----+		|     |
  |   PREPARE	    |		|   NOT_STARTED  |<---------------------+     |
  |		    |		|		 |<---------------------------+
  ------------------		------------------
     |	    ^			    |	   ^
     |	    |			    |	   |
     |	    +-----------------------+	   |
     |		(DSP Probe OK)		   |
     |					   |
     |					   |
     +------------------------------------+
 	(System SuspendRuntime Suspend)
 probe the DSP hardware 
 check machine info 
 set up platform component driver 
 register any debugtrace capabilities 
		
		  debugfs issues are suppressed in snd_sof_dbg_init() since
		  we cannot rely on debugfs
		  here we trap errors due to memory allocation only.
 init the IPC 
 load the firmware 
	
	  Boot the firmware. The FW boot status will be modified
	  in snd_sof_run_firmware() depending on the outcome.
 init DMA trace 
 non fatal 
 hereafter all FW boot flows are for PM reasons 
 now register audio DSP platform driver and dai 
	
	  Some platforms in SOF, ex: BYT, may not have their platform PM
	  callbacks set. Increment the usage count so as to
	  prevent the device from entering runtime suspend.
 all resources freed, update state to match 
 errors cannot be propagated, log 
 initialize sof device 
 initialize default DSP power state 
 check all mandatory ops 
 set default timeouts if none provided 
	
	  Unregister machine driver. This will unbind the snd_card which
	  will remove the component driver and unload the topology
	  before freeing the snd_card.
	
	  Unregistering the machine driver results in unloading the topology.
	  Some widgets, ex: scheduler, attempt to power down the core they are
	  scheduled on, when they are unloaded. Therefore, the DSP must be
	  removed only after the topology has been unloaded.
 release firmware 
 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)
 This file is provided under a dual BSDGPLv2 license.  When using or
 redistributing this file, you may do so under either license.
 Copyright(c) 2018 Intel Corporation. All rights reserved.
 Author: Liam Girdwood <liam.r.girdwood@linux.intel.com>
 Generic debug routines used to export DSP MMIO and memories to userspace
 for firmware debugging.
  strsplit_u32 - Split string into sequence of u32 tokens
  @buf:	String to split into tokens.
  @delim:	String containing delimiter characters.
  @tkns:	Returned u32 sequence pointer.
  @num_tkns:	Returned number of tokens obtained.
 add to dfsentry list 
 configure test IPC 
 set test end time for duration flood test 
 send test IPC's 
 compute min and max response times 
 sum up response times 
 test complete? 
 return if the first IPC fails 
 compute average response time 
 clear previous test output 
 format output string 
	
	  write op is only supported for ipc_flood_count or
	  ipc_flood_duration_ms debugfs entries atm.
	  ipc_flood_count floods the DSP with the number of IPC's specified.
	  ipc_duration_ms test floods the DSP for the time specified
	  in the debugfs entry.
 test completion criterion 
 limit max durationipc count for flood test 
 find the minimum. min() is not used to avoid warnings 
 find the minimum. min() is not used to avoid warnings 
 flood test 
 return size if test is successful 
 validate position & count 
 find the minimum. min() is not used since it adds sparse warnings 
 align io read start to u32 multiple 
 intermediate buffer size must be u32 multiple 
 if start position is unaligned, read extra u32 
		
		  If the DSP is active: copy from IO.
		  If the DSP is suspended:
		 	- Copy from IO if the memory is always accessible.
		 	- Otherwise, copy from cached buffer.
 if the DSP is in D3 
 copy to userspace 
 update count & position if copy succeeded 
 create FS entry for debug files that can expose DSP memories, registers 
	
	  allocate cache buffer that will be used to save the mem window
	  contents prior to suspend
 add to dfsentry list 
 create FS entry for debug files to expose kernel memory 
		
		  cache_buf is unused for SOF_DFSENTRY_TYPE_BUF debugfs entries.
		  So, use it to save the results of the last IPC flood test.
 add to dfsentry list 
 read memory info from FW only once for each file read 
 allocate buffer memory only in first open run, to save memory when unused 
 don't allocate buffer before first usage, to save memory when unused 
 add to dfsentry list 
 use "sof" as top level debugFS dir 
 init dfsentry list 
 create debugFS files for platform specific MMIODSP memories 
 errors are only due to memory allocation, not debugfs 
 create read-write ipc_flood_count debugfs entry 
 errors are only due to memory allocation, not debugfs 
 create read-write ipc_flood_duration_ms debugfs entry 
 errors are only due to memory allocation, not debugfs 
 should we prevent DSP entering D3 ? 
 dump vital information to the logs 
