 SPDX-License-Identifier: GPL-2.0-or-later
	FrontendCard driver for TwinHan DST Frontend
	Copyright (C) 2003 Jamie Honan
	Copyright (C) 2004, 2005 Manu Abraham (manu@kromtek.com)
 because complete disabling means no output, no need to do output packet 
	Vertical	
	Horizontal	
	ATSC	
	Digital	
	Inversion = Normal	
	Known cards list
	Satellite
	-------------------
		  200103A
	VP-1020   DST-MOT	LG(old), TS=188
	VP-1020   DST-03T	LG(new), TS=204
	VP-1022   DST-03T	LG(new), TS=204
	VP-1025   DST-03T	LG(new), TS=204
	VP-1030   DSTMCI,	LG(new), TS=188
	VP-1032   DSTMCI,	LG(new), TS=188
	Cable
	-------------------
	VP-2030   DCT-CI,	Samsung, TS=204
	VP-2021   DCT-CI,	Unknown, TS=204
	VP-2031   DCT-CI,	Philips, TS=188
	VP-2040   DCT-CI,	Philips, TS=188, with CA daughter board
	VP-2040   DCT-CI,	Philips, TS=204, without CA daughter board
	Terrestrial
	-------------------
	VP-3050  DTTNXT			 TS=188
	VP-3040  DTT-CI,	Philips, TS=188
	VP-3040  DTT-CI,	Philips, TS=204
	ATSC
	-------------------
	VP-3220  ATSCDI,		 TS=188
	VP-3250  ATSCAD,		 TS=188
	obsolete	
	obsolete	
	obsolete	
	obsolete	
	An OEM board	
 unknown to vendor	
	Write failed		
	Read failure		
	Unack'd write		
	DST not ready yet	
	Checksum failure	
	Card capabilities	
	Multiple tuners		
	STV0299 check	
	Single tuner		
dprintk("%s: Getting Signal strength and other parameters\n", __func__);
	if (state->type_flags & DST_TYPE_HAS_NEWTUNE) {
  line22k0    0x00, 0x09, 0x00, 0xff, 0x01, 0x00, 0x00, 0x00
  line22k1    0x00, 0x09, 0x01, 0xff, 0x01, 0x00, 0x00, 0x00
  line22k2    0x00, 0x09, 0x02, 0xff, 0x01, 0x00, 0x00, 0x00
  tone        0x00, 0x09, 0xff, 0x00, 0x01, 0x00, 0x00, 0x00
  data        0x00, 0x09, 0xff, 0x01, 0x01, 0x00, 0x00, 0x00
  power_off   0x00, 0x09, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00
  power_on    0x00, 0x09, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00
  Diseqc 1    0x00, 0x08, 0x04, 0xe0, 0x10, 0x38, 0xf0, 0xec
  Diseqc 2    0x00, 0x08, 0x04, 0xe0, 0x10, 0x38, 0xf4, 0xe8
  Diseqc 3    0x00, 0x08, 0x04, 0xe0, 0x10, 0x38, 0xf8, 0xe4
  Diseqc 4    0x00, 0x08, 0x04, 0xe0, 0x10, 0x38, 0xfc, 0xe0
		dst_get_signal(state);	
 check if the ASIC is there 
 determine settings based on type 
 create dvb_frontend 
	Manu (DST is a card not a frontend)	
     . symbol_rate_tolerance	=	???,
 SPDX-License-Identifier: GPL-2.0-or-later
  Bt8xx based DVB adapter driver
  Copyright (C) 2002,2003 Florian Schirmer <jolt@tuxbox.org>
 6  36.16666666667MHz 
 Hmm, n squared. Hope n is small 
 Hz, really 1.0111 MHz and a 10 prescaler 
 This is really the bit driving the tuner chip cx24108 
 kHz 
 satellite IF is 950..2150MHz 
 decide which VCO to use for the input frequency 
 the gain values must be set by SetSymbolrate 
	 compute the pll divider needed, from Conexant data sheet,
	   resolved for (n32+a), remember f(vco) is f(receive) 2 or 4,
	   depending on the divider bit. It is set to 4 on the 2 lowest
	 everything is shifted left 11 bits to left-align the bits in the
	 set vga and vca to their widest-band settings, as a precaution.
writereg(client,0x56,0x7f);
 output 
 relay on 
 relay off 
 Reset 
	 RESET DEVICE
	  reset is controlled by GPIO-0
	  when set to 0 causes reset and when to 1 for normal op
	  must remain reset for 128 clock cycles on a 50Mhz clock
	  also PRM1 PRM2 & PRM4 are controlled by GPIO-1,GPIO-2 & GPIO-4
	  We assume that the reset has be held low long enough or we
	  have been reset by a power on.  When the driver is unloaded
	  reset set to 0 so if reloaded we have been reset.
 reset & PRM1,2&4 are outputs 
 Reset 
 Now set for normal operation 
 wait for operation to begin 
	
	  Reset the frontend, must be called before trying
	  to initialise the MT352 or mt352_attach
	  will fail. Same goes for the nxt6000 frontend.
	 
 Pulse the reset line 
 High 
 Low  
 High 
 TPSERIAL for 3303 in TOP_CONTROL 
 Set pin 27 of the lgdt3303 chip high to reset the frontend 
 Pulse the reset line 
 High 
 Low  
 High 
		
		  It is possible to determine the correct frontend using the I2C bus (see the Nebula SDK);
		  this would be a cleaner solution than trying each frontend in turn.
 Old Nebula (marked (c)2003 on high profile pci card) has nxt6000 demod 
 New Nebula (marked (c)2005 on low profile pci card) has mt352 demod 
	DST is not a frontend driver !!!		
	Setup the Card					
	DST is not a frontend, attaching the ASIC	
	Attach other DST peripherals if any		
	Conditional Access device			
		 should be: BT878_A_GAIN=0,BT878_A_PWRDN,BT878_DA_DPM,BT878_DA_SBR,
		 26, 15, 14, 6, 5
		  A_PWRDN  DA_DPM DA_SBR DA_IOM_DA
 A_PWRDN DA_SBR DA_APP (high speed serial) 
case 0x07711461:
 A_PWRDN DA_SBR  DA_APP[0] PKTP=10 RISC_ENABLE FIFO_ENABLE
		 25,21,14,11,10,9,8,3,2 then
		  0x33 = 5,4,1,0
		  A_SEL=SML, DA_MLB, DA_SBR,
		  DA_SDR=f, fifo trigger = 32 DWORDS
		  IOM = 0 == audio AD
		  DPM = 0 == digital audio mode
		  == async data parallel port
		  then 0x33 (13 is set by start_capture)
		  DA_APP = async data parallel port,
		  ACAP_EN = 1,
	 FIXME:
	  .shutdown	= dvb_bt8xx_shutdown,
	  .suspend	= dvb_bt8xx_suspend,
	  .resume	= dvb_bt8xx_resume,
 SPDX-License-Identifier: GPL-2.0-or-later
	CA-driver for TwinHan DST FrontendCard
	Copyright (C) 2004, 2005 Manu Abraham (manu@kromtek.com)
	Try to make this dynamic	
 If error
 work required here.
 Transform dst message to correct application_info message
 First, the command and length fields
 Copy application_type, application_manufacturer and manufacturer_code
 Set string length and copy string
 Print raw data
 Set the command and length of the output
 Append to output
	Will implement the rest soon		
	Need some more work	
	Will implement the rest soon		
	MSB	
	LSB	
		
		 	Need to compute length for EN50221 section 8.3.2, for the time being
		 	assuming 8.3.2 is not applicable
	length is excluding tag & length	
	tags too	
	Board supports CA PMT reply ?		
	Do test board			
	Not there yet but soon		
	CA PMT Reply capable		
	Process CA PMT Reply		
	will implement soon		
	CA PMT Reply not capable	
	put a dummy message		
	EN50221 tag	
 code simplification started
      Have to handle the 2 basic types of cards here  
 only for debugging
	We have now only the standard ioctl's, the driver is upposed to handle internals.	
 SPDX-License-Identifier: GPL-2.0-or-later
    bttv-if.c  --  old gpio interface to other kernel modules
		   don't use in new code, will go away in 2.7
		   have a look at bttv-gpio.c instead.
    bttv - Bt848 frame grabber driver
    Copyright (C) 1996,97,98 Ralph  Metzler (rjkm@thp.uni-koeln.de)
			   & Marcus Metzler (mocm@thp.uni-koeln.de)
    (c) 1999-2003 Gerd Knorr <kraxel@bytesex.org>
 ----------------------------------------------------------------------- 
 Exported functions - for other modules which want to access the         
                      gpio ports (IR for example)                        
                      see bttv.h for comments                            
 prior setting BT848_GPIO_REG_INP is (probably) not needed
 prior setting BT848_GPIO_REG_INP is (probably) not needed
 SPDX-License-Identifier: GPL-2.0-only
  Linux driver the digital TV devices equipped with B2C2 FlexcopII(b)III
  flexcop-pci.c - covers the PCI part including DMA transfers
  see flexcop.c for copyright information
	 buffersize (at least for DMA1, need to be % 188 == 0,
 0 = addr0 of dma1; 1 = addr1 of dma1 
 position of the pointer last time the timerpacket irq occurred 
 When PID filtering is turned on, we use the timer IRQ, because small amounts
  of data need to be passed to the user space instantly as well. When PID
 errors 
		 for the timer IRQ we only can use buffer dmx feeding, because we don't have
		 buffer end was reached, restarted from the beginning
		  pass the data from last_cur_pos to the buffer end to the demux
 general flexcop init 
 bus specific part 
 init flexcop 
 init dma 
 in theory every _exit function should be called exactly two times,
  here and in the bail-out-part of the _init-function
 SPDX-License-Identifier: GPL-2.0
  Linux driver for digital TV devices equipped with B2C2 FlexcopII(b)III
  flexcop-dma.c - configuring and controlling the DMA of the FlexCop
  see flexcop.c for copyright information
 start the DMA transfers, but not the DMA IRQs 
 1 cycles = 1.97 msec 
 SPDX-License-Identifier: GPL-2.0-only
  ngene.c: nGene PCIe bridge driver
  Copyright (C) 2005-2007 Micronas
  Copyright (C) 2008-2009 Ralph Metzler <rjkm@metzlerbros.de>
                          Modifications for new nGene firmware,
                          support for EEPROM-copying,
                          support for new dual DVB-S2 card prototype
 nGene interrupt handler 
					
					   We didn't get data
					   Clear in service flag to make sure we
					   get called on next interrupt again.
					   leave fillempty (0x80) flag alone
					   to avoid hardware running out of
					   buffers during startup, we hold only
					   in run state ( the source may be late
					   delivering data )
 Stop processing stream 
					 We got a valid buffer,
 Stop processing stream 
 if (dev->channel[i].State>=KSSTATE_RUN) { 
 Request might have been processed by a previous call. 
 nGene command interface 
 Notify 8051. 
ngwritel(0, FORCE_NMI);
 02000640 is sample on rising edge.
 02000740 is sample on falling edge.
 02000040 is ignore "valid" signal
 0: FD_CTL1 Bit 7,6 must be 0,1
    7   disable(fw controlled)
    6   0-AUX,1-TS
    5   0-par,1-ser
    4   0-lsb1-msb
    3,2 reserved
    1,0 0-no sync, 1-use ext. start, 2-use 0x47, 3-both
 1: FD_CTL2 has 3-valid must be hi, 2-use valid, 1-edge
 2: FD_STA is read-only. 0-sync
 3: FD_INSYNC is number of 47s to trigger "in sync".
 4: FD_OUTSYNC is number of 47s to trigger "out of sync".
 5: FD_MAXBYTE1 is low-order of bytes per packet.
 6: FD_MAXBYTE2 is high-order of bytes per packet.
 7: Top byte is unused.
 DRXH 
 DRXHser 
 S2ser 
 LGDT3303 
 Set NGENE I2S Config to 16 bit packed 
 Set NGENE I2S Config to transport stream compatible mode 
 SDTV 
 HDTV 1080i50 
 HDTV 1080i60 
  50 48 60 gleich
  27p50 9f 00 22 80 42 69 18 ...
  27p60 93 00 22 80 82 69 1c ...
 Maxbyte to 1144 (for raw data) 
 clear_buffers(chan); 
	
	dev_info(pdev, "st %d\n", state);
	msleep(100);
		 dev_info(pdev, "lock=%08x\n",
 0x66666666 = 50MHz 2^33 250MHz 
		 else dev_info(pdev, "lock=%08x\n",
 nGene hardware init and release functions 
 Ring buffer handling 
 Last Buffer points back to first one 
	 Copy pointer to scatter gather list in TSRingbuffer
	   structure for buffer 2
	   Load number of buffer
 Point to first buffer entry 
 Loop through all buffer and set Buffer 2 pointers to TSIdlebuffer 
 enable MSI if kernel and card support it 
 release I2C client (tuner) if needed 
 for now only one mode 
 be sure this is set to zero 
 check for CXD2099AR presence before attaching 
 workaround for shutdown failure 
 device proberemove calls 
 Alloc buffers and start nGene 
 Register DVB adapters and devices for both channels 
 SPDX-License-Identifier: GPL-2.0-only
  ngene-cards.c: nGene PCIe bridge driver - card specific info
  Copyright (C) 2005-2007 Micronas
  Copyright (C) 2008-2009 Ralph Metzler <rjkm@metzlerbros.de>
                          Modifications for new nGene firmware,
                          support for EEPROM-copying,
                          support for new dual DVB-S2 card prototype
 demodstuners 
 I2C transfer functions used for demodtuner probing
 Demodtuner attachment 
 tuner 1+2: i2c adapter #0, tuner 3+4: i2c adapter #1 
	
	  due to a hardware quirk with the I2C gate on the stv0367+tda18212
	  combo, the tda18212 must be probed by reading it's id _twice_ when
	  cold started, or it very likely will fail.
 perform tuner probeinitattach 
 store channel info 
	
	  attach lnbh25 - leftshift by one as the lnbh25 driver expects 8bit
	  i2c addresses
 the cxd2841er driver expects 8bitshifted I2C addresses 
 attach frontend 
 XO2 related lists and functions 
 Enable tuner power, disable pll, reset demods 
 Release demod resets 
	
	  speed: 0=55,1=75,2=90,3=104 MBits
	  Note: The ngene hardware must be run at 75 MBits compared
	  to more modern ddbridge hardware which runs at 90 MBits,
	  else there will be issues with the data transport and non-
	  working secondaryslave demodstuners.
 Start XO2 PLL 
 Probing and portchannel handling 
 demod found, attach it 
 demod #2: reprogram outputs DPN1 & DPN2 
 PARALLEL 
 A single func to attach the demo and tuner, rather than
  use two sep funcs like the current design mandates.
 EEPROM TAGS 
 0x0001 - 0x000F reserved for housekeeping 
 0xFFFF - 0xFFFE reserved for housekeeping 
 Micronas assigned tags
 2 Bytes data 
 2 Bytes data 
 2 Bytes data 
 2 Bytes data 
 Tag range for OEMs 
	 Note: We write the data one byte at a time to avoid
	   issues with page sizes. (which are different for
	   each manufacture and eeprom size)
 Poll for finishing write cycle 
 Switch control (I2C gates, etc.) 
 Channel 0 is analog, which is currently unsupported 
 Ensure these are NULL else the frame will call them (as funcs) 
 A custom electrical interface config for the demod to bridge 
 PCI Subsystem ID 
 InitExit 
 pr_() since we don't have a device to use with dev_() yet 
 SPDX-License-Identifier: GPL-2.0-only
  ngene-dvb.c: nGene PCIe bridge driver - DVB functions
  Copyright (C) 2005-2007 Micronas
  Copyright (C) 2008-2009 Ralph Metzler <rjkm@metzlerbros.de>
                          Modifications for new nGene firmware,
                          support for EEPROM-copying,
                          support for new dual DVB-S2 card prototype
 COMMAND API interface 
 DVB functions and API interface 
 start of filler packet 
 blindly copy buffers if ci_tsfix is disabled 
 ci_tsfix = 1 
		
		  since the remainder of the TS packet which got cut off
		  in the previous tsin_exchange() run is at the beginning
		  of the new TS buffer, append this to the temp buffer and
		  send it to the DVB ringbuffer afterwards.
		
		  copy TS packets to the DVB ringbuffer and detect new offset
		  shifts by checking for a valid TS SYNC byte
				
				  no SYNC header, find new offset shift
				  (max. 188 bytes, tsoff will be mod 188)
					
					  offset corrected. re-check remaining
					  len for a full TS frame, break and
					  skip to fragment handling if < 188.
		
		  if a fragment is left, copy to temp buffer. The remainder
		  will be appended in the next tsin_exchange() iteration.
 SPDX-License-Identifier: GPL-2.0-only
  ngene-i2c.c: nGene PCIe bridge driver i2c functions
  Copyright (C) 2005-2007 Micronas
  Copyright (C) 2008-2009 Ralph Metzler <rjkm@metzlerbros.de>
                          Modifications for new nGene firmware,
                          support for EEPROM-copying,
                          support for new dual DVB-S2 card prototype
 FIXME - some of these can probably be removed 
 Firmware command for i2c operations 
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (C) 2010-2013 Bluecherry, LLC <https:www.bluecherrydvr.com>
  Original author:
  Ben Collins <bcollins@ubuntu.com>
  Additional work by:
  John Brooks <john.brooks@bluecherry.net>
 On 6110, initialize mozaic darkness strength 
 Load (blank) cursor bitmap mask (2bpp) 
 Border & background colors 
 Enable channels we support 
 First 8k is motion flag (512 bytes  16). Following that is an 8k+8k
  threshold and working table for each channel. At least that's what the
  spec says. However, this code (taken from rdk) has some mystery 8k
 Clear motion flag area 
 Clear working cache table 
 Set default threshold table 
 Default motion settings 
 | SOLO_VI_MOTION_INTR_START_STOP 
 Set default border 
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (C) 2010-2013 Bluecherry, LLC <https:www.bluecherrydvr.com>
  Original author:
  Ben Collins <bcollins@ubuntu.com>
  Additional work by:
  John Brooks <john.brooks@bluecherry.net>
 6010 M4V 
 6110 h.264 
 Some fixups for 6010M4V 
 Frame rate and interval 
 Now handle the jpeg header 
 Make sure to do a bandwidth check 
 Disable all encoding for this channel 
 Common for both std and ext encoding 
 Standard encoding only 
 Extended encoding only 
 Enables the standard encoder 
 Single shot 
 Buffer wrap 
 Build a descriptor queue out of an SG list and send it to the P2M for
 We assume this is smaller than the scatter size 
 Single descriptor 
 Buffer wrap 
			 XXX: Do these as separate DMA requests, to avoid
			   timeout errors triggered by awkwardly sized
			   descriptors. See
			   <https:github.combluecherrydvrsolo6x10issues8>
 Because we may use two descriptors per loop 
 Extract values from VOP header - VE_STATUSxx 
 If this is a key frame, add extra header 
 Now get the actual mpeg payload 
 V4L2_PIX_FMT_MJPEG 
 Check for motion flags 
 Check if the hardware has any new ones in the queue 
 FAIL... 
 Sanity check 
 V4L2_PIX_FMT_MJPEG 
 Default to CIF 12 size 
 Full frame 
 Just set these 
 This does not change the encoder at all 
	
	  More information is needed about these 'extended' types. As far
	  as I can tell these are basically additional video streams with
	  different MPEG encoding attributes that can run in parallel with
	  the main stream. If so, then this should be implemented as a
	  second video node. Abusing priv like this is certainly not the
	  right approach.
	if (pix->priv)
		solo_enc->type = SOLO_ENC_TYPE_EXT;
 XXX: Shouldn't we be able to getset this from videobuf? 
		 Allow for up to 30 events (1 second for NTSC) to be
 Input callbacks 
 Video capture format callbacks 
 Streaming IO 
 Frame size and interval 
 Video capture parameters 
 Logging and events 
 Motion Detection Threshold matrix 
 Initialize this per encoder 
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (C) 2010-2013 Bluecherry, LLC <https:www.bluecherrydvr.com>
  Original author:
  Ben Collins <bcollins@ubuntu.com>
  Additional work by:
  John Brooks <john.brooks@bluecherry.net>
 XXX: Undocumented bits at b17 and b24 
		 NOTE: Ref driver has (62 << 24) here as well, but it causes
 Set scale 1, 9 dimension 
 Set scale 2, 10 dimension 
 Set scale 3, 11 dimension 
 Set scale 4, 12 dimension 
 Set scale 5, 13 dimension 
 Progressive 
 Clear OSD 
 Clear OSG buffer 
 Should be called with enable_lock held 
 Disable OSD on this channel 
 Enable OSD on this channel 
  Set channel Quality Profile (0-3).
 Initialize Quality Profile for all channels 
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (C) 2010-2013 Bluecherry, LLC <https:www.bluecherrydvr.com>
  Original author:
  Ben Collins <bcollins@ubuntu.com>
  Additional work by:
  John Brooks <john.brooks@bluecherry.net>
 XXX: The SOLO6x10 i2c does not have separate interrupts for each i2c
  channel. The bus can only handle one i2c event at a time. The below handles
  this all wrong. We should be using the status registers to see if the bus
  is in use, and have a global lock to check the status register. Also,
  the bulk of the work should be handled out-of-interrupt. The ugly loops
  that occur during interrupt scare me. The ISR should merely signal
 XXX Right return value for failure? 
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (C) 2010-2013 Bluecherry, LLC <https:www.bluecherrydvr.com>
  Original author:
  Ben Collins <bcollins@ubuntu.com>
  Additional work by:
  John Brooks <john.brooks@bluecherry.net>
 Image size is two fields, SOLO_HW_BPL is one horizontal line in hardware 
 First time around, assert erase off 
 Keep the erasing flag on for 8 frames minimum 
 Here, we just keep windowchannel the same 
 Row 1 
 Row 2 
 4up's first 
 Remaining case is 16up for 16-port 
	 Only "break" from this loop if slock is held, otherwise
 first channel in the n-up 
	 Possible outputs:
	   Multi 4-up (cameras 1-4)
	   Multi 4-up (cameras 5-8)
	   Multi 4-up (cameras 9-12)
	   Multi 4-up (cameras 13-16)
	   Multi 16-up (cameras 1-16)
 We can only check this for normal inputs 
 Do nothing ;
	 For right now, if it doesn't match our running config,
 Make sure all video nodes are idle 
 Reconfigure for the new standard 
 Input callbacks 
 Video capture format callbacks 
 Streaming IO 
 Logging and events 
 Cycle all the channels and clear 
 Do nothing ;
 Set the default display channel 
 Do nothing ;
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (C) 2010-2013 Bluecherry, LLC <https:www.bluecherrydvr.com>
  Original author:
  Ben Collins <bcollins@ubuntu.com>
  Additional work by:
  John Brooks <john.brooks@bluecherry.net>
 0x00 
 0x10 
 0x20 
 0x30 
 0x40 
 0x50 
 0x60 
 0x70 
 0x80 
 0x90 
 0xa0 
 0xb0 
 0xc0 
 0xd0 
 0xe0 
 0xf0 
 0x00 
 0x10 
 0x20 
 0x30 
 0x40 
 0x50 
 0x60 
 0x70 
 0x80 
 0x90 
 0xa0 
 0xb0 
 0xc0 
 0xd0 
 0xe0 
 0xf0 
 0x00 
 0x10 
 0x20 
 0x30 
 0x40 
 0x50 
 0x60 
 0x70 
 0x80 
 0x90 
 0xa0 
 0xb0 
 0xc0 
 0xd0 
 0xe0 
 0xf0 
 0x00 
 0x10 
 0x20 
 0x30 
 0x40 
 0x50 
 0x60 
 0x70 
 0x80 
 0x90 
 0xa0 
 0xb0 
 0xc0 
 0xd0 
 0xe0 
 0xf0 
	printk("solo6x10tw28: Error writing register: %02x->%02x [%02x]\n", 
		addr, off, val); 
 ALINK Mode 
 Skip read only registers 
 IRQ Mode 
		 ALINK Mode. Assumes that the first tw28xx is a
 Skip read only registers 
 0x00 
 0x10 
 0x20 
 0x30 
 Horizontal Delay Control 
 Horizontal Active Control 
 Vertical Delay Control 
 Vertical Active Control 
 Horizontal Delay Control 
 Horizontal Active Control 
 Vertical Delay Control 
 Vertical Active Control 
 Dual ITU-R BT.656 format 
 Audio configuration 
 Output mode of R_ADATM pin (0 mixing, 1 record) 
 tbl_tw2815_sfr[0x63 - 0x40] |= 0 << 2; 
 8KHz, used to be 16KHz, but changed for remote client compat 
 Playback of right channel 
 Reserved value (XXX ??) 
 Analog output gain and mix ratio playback on full 
 Select playback audio and mute all except 
 End of audio configuration 
 read-only 
 Skip read-only and nop registers 
 Skip read-only registers 
 case 0x00 ... 0x25: 
 :0x26 
 :0x28 
 :0x2e XXX: read-only 
 :0x38 
 :0x40 
 :0x50 
 :0x60 
 :0x70 
 :0x26 
 :0x28 
 :0x2e XXX: read-only 
 :0x38 
 :0x40 
 :0x50 
 :0x60 
 :0x70 
 Detect techwell chip type(s) 
  We accessed the video status signal in the Techwell chip through
  iici2c because the video status reported by register REG_VI_STATUS1
  (address 0x012C) of the SOLO6010 chip doesn't give the correct video
  status signal values.
 Get the right chip and on-chip channel 
 Status of audio from up to 4 techwell chips are combined into 1 variable.
 Get the right chip and on-chip channel 
 Only 286x has sharpness 
 286x chips have a U and V component for saturation 
 Get the right chip and on-chip channel 
 Only 286x has sharpness 
  For audio output volume, the output channel is only 1. In this case we
  don't need to offset TW_CHIP_OFFSET_ADDR. The TW_CHIP_OFFSET_ADDR used
  is the base address of the techwell chip.
 Get the right chip and on-chip channel 
 Get the right chip and on-chip channel 
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (C) 2010-2013 Bluecherry, LLC <https:www.bluecherrydvr.com>
  Original author:
  Ben Collins <bcollins@ubuntu.com>
  Additional work by:
  John Brooks <john.brooks@bluecherry.net>
 Mutex must be held for p2m_id before calling this!! 
 Get next ID. According to Softlogic, 6110 has problems on !=0 P2M 
 For 6010 with more than one desc, we can do a one-shot 
 For single descriptors and 6110, we need to run each desc 
	 Don't write here for the no_desc_mode case, because config is 0.
 No need for desc_dma since we know it is a single-shot 
 Setup next descriptor 
 Find correct SDRAM size 
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (C) 2010-2013 Bluecherry, LLC <https:www.bluecherrydvr.com>
  Original author:
  Ben Collins <bcollins@ubuntu.com>
  Additional work by:
  John Brooks <john.brooks@bluecherry.net>
 Sets up channels 16-19 for decoding and 0-15 for encoding 
 The solo writes to 1k byte pages, 32 pages, in the dma. Each 1k page
  is broken down to 20  48 byte regions (one for each channel possible)
 0 - 4 
 This means open() hasn't been called on this one 
 Haven't triggered a start yet 
 If this is the first user, switch on interrupts 
 If this was our last user, switch them off 
 Allows for easier mapping between video and audio 
 Mixer controls 
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (C) 2010-2013 Bluecherry, LLC <https:www.bluecherrydvr.com>
  Original author:
  Ben Collins <bcollins@ubuntu.com>
  Additional work by:
  John Brooks <john.brooks@bluecherry.net>
 default is only top 64B 
 no overflow because we use monotonic timestamps 
 Acknowledge all interrupts immediately 
 Bring down the sub-devices first 
 Now cleanup the PCI device 
 Do nothing 
 Only for during init 
 RETRYTRDY Timeout disabled 
 Disable all interrupts to start 
 Initial global settings 
 PLL_RANGE 
 PLL_DIVR  
 PLL_FSEN );
 PLL locking time of 1ms 
 Handle this from the start 
 Setup the DMA engine 
 Undocumented crap 
 Disable watchdog 
 Initialize sub components 
 Now that init is over, set this lower 
 6010 based cards 
 6110 based cards 
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (C) 2010-2013 Bluecherry, LLC <https:www.bluecherrydvr.com>
  Original author:
  Ben Collins <bcollins@ubuntu.com>
  Additional work by:
  John Brooks <john.brooks@bluecherry.net>
 To set gpio 
 To set extended gpio - sensor 
 Enable GPIO[31:16] 
 Video reset 
	 Warning: Don't touch the next line unless you're sure of what
 We use bit 8-15 of SOLO_GPIO_CONFIG_0 for relay purposes 
 Initially set relay status to 0 
 Set input pins direction 
 Pins 0-7 are not exported, because it seems from code above they are
  used for internal purposes. So offset 0 corresponds to pin 8, therefore
  offsets 0-7 are relay GPIOs, 8-23 - input GPIOs.
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (C) 2010-2013 Bluecherry, LLC <https:www.bluecherrydvr.com>
  Original author:
  Ben Collins <bcollins@ubuntu.com>
  Additional work by:
  John Brooks <john.brooks@bluecherry.net>
 Control 
 Commands 
 SPDX-License-Identifier: GPL-2.0-or-later
    hexium_orion.c - v4l2 driver for the Hexium Orion frame grabber cards
    Visit http:www.mihu.delinuxsaa7146 and follow the link
    to "hexium" for further details about this card.
    Copyright (C) 2003 Michael Hunold <michael@mihu.de>
 global variables 
 current input 
 Philips SAA7110 decoder default registers 
00 0x4C,0x3C,0x0D,0xEF,0xBD,0xF0,0x00,0x00,
08 0xF8,0xF8,0x60,0x60,0x40,0x86,0x18,0x90,
10 0x00,0x2C,0x40,0x46,0x42,0x1A,0xFF,0xDA,
18 0xF0,0x8B,0x00,0x00,0x00,0x00,0x00,0x00,
20 0xD9,0x17,0x40,0x41,0x80,0x41,0x80,0x4F,
28 0xFE,0x01,0x0F,0x0F,0x03,0x01,0x81,0x03,
30 0x44,0x75,0x01,0x8C,0x03
 cvbs 1 
 0x16,
 ??
 0x03,
 cvbs 2 
 0x03,
 ?
 cvbs 3 
 0x05,
 ??
 0x03,
 cvbs 4 
 0x16,
 ??
 0x03,
 cvbs 5 
 0x05,
 ??
 0x03,
 cvbs 6 
 0x03
 ??
 yc 1 
 yc 2 
 yc 3 
 this is only called for old HV-PCI6Orion cards
 there are no hexium orion cards with revision 0 saa7146s 
 enable i2c-port pins 
 set SAA7110 control GPIO 0 
  set HWControl GPIO number 2 
 detect newer Hexium Orion cards by subsystem ids 
 we store the pointer in our private data field 
 we store the pointer in our private data field 
	 check if this is an old hexium Orion card by looking at
 we store the pointer in our private data field 
 bring hardware to a sane state. this has to be done, just in case someone
   wants to capture from this device before it has been properly initialized.
   the capture engine would badly fail, because no valid signal arrives on the
 initialize the helper ics to useful values 
 this function only gets called when the probing was successful 
 the rest 
 SAA7146_USE_I2C_IRQ,
 SPDX-License-Identifier: GPL-2.0-or-later
    mxb - v4l2 driver for the Multimedia eXtension Board
    Copyright (C) 1998-2006 Michael Hunold <michael@mihu.de>
    Visit http:www.themm.net~mihulinuxsaa7146mxb.html
    for further details about this card.
 global variable 
 initial frequence the tuner will be tuned to.
   in verden (lower saxony, germany) 4148 is a
 this array holds the information, which port of the saa7146 each
 this array holds the information of the audio source (mxb_audios),
 these are the available audio sources, which can switched
 These are the necessary input-output-pins for bringing one audio source
 Tuner 
 AUX 1 
 AUX 2 
 AUX 3 
 Radio 
 CD-Rom 
 Mute 
 These are the necessary input-output-pins for bringing one audio source
 Mute 
 current audio mode (mono, stereo, ...) 
 current input 
 current audio input 
 current mute status 
 current frequency the tuner is tuned to 
 switch the audio-source 
 check if all devices are present 
 all devices are present, probe was successful 
 we store the pointer in our private data field 
 some init data for the saa7740, the so-called 'sound arena module'.
 bring hardware to a sane state. this has to be done, just in case someone
   wants to capture from this device before it has been properly initialized.
   the capture engine would badly fail, because no valid signal arrives on the
 mute audio on tea6420s 
 select video mode in saa7111a 
 select tuner-output on saa7111a 
 select a tuner type 
 tune in some frequency on tuner 
 set a default video standard 
 These two gpio calls set the GPIO pins that control the tda9820 
 switch to tuner-channel on tea6415c 
 select tuner-output on multicable on tea6415c 
 the rest for mxb 
	 check if the saa7740 (aka 'sound arena module') is present
	   on the mxb. if so, we must initialize it. due to lack of
	   information about the saa7740, the values were reverse
		 the sound arena module is a pos, that's probably the reason
		   philips refuses to hand out a datasheet for the saa7740...
		   it seems to screw up the i2c bus, so we disable fast irq
		   based i2c transactions here and rely on the slow and safe
	 the rest for saa7146: you should definitely set some basic values
 ext->saa has been filled by the core driver 
 some stuff is done via variables 
 some stuff is done via direct write to the registers 
	 this is ugly, but because of the fact that this is completely
 interrupt-handler. this gets called when irq_mask is != 0.
void mxb_irq_bh(struct saa7146_dev dev, u32 irq_mask)
{
	struct mxb mxb = (struct mxb)dev->ext_priv;
}
	 prepare switching of tea6415c and saa7111a;
 connect tuner-output always to multicable 
		 nothing to be done here. aux3_yc is
		 nothing to be done here. aux3 is
 switch video in saa7111a 
 switch the audio-source only if necessary 
 tune in desired frequency 
 let the tuner subdev clamp the frequency to the tuner range 
 hack: changing the frequency should invalidate the vbi-counter (=> alevt) 
 this function only gets called when the probing was successful 
 initialization stuff (vbi) (only for revision > 0 and for extensions which want it)
 mute audio on tea6420s 
 These two gpio calls set the GPIO pins that control the tda9820 
 These two gpio calls set the GPIO pins that control the tda9820 
 SPDX-License-Identifier: GPL-2.0-or-later
    hexium_gemini.c - v4l2 driver for Hexium Gemini frame grabber cards
    Visit http:www.mihu.delinuxsaa7146 and follow the link
    to "hexium" for further details about this card.
    Copyright (C) 2003 Michael Hunold <michael@mihu.de>
 global variables 
 current input 
 current standard 
 Samsung KS0127B decoder default registers 
00 0x00,0x52,0x30,0x40,0x01,0x0C,0x2A,0x10,
08 0x00,0x00,0x00,0x60,0x00,0x00,0x0F,0x06,
10 0x00,0x00,0xE4,0xC0,0x00,0x00,0x00,0x00,
18 0x14,0x9B,0xFE,0xFF,0xFC,0xFF,0x03,0x22,
20 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
28 0x00,0x00,0x00,0x00,0x00,0x2C,0x9B,0x00,
30 0x00,0x00,0x10,0x80,0x80,0x10,0x80,0x80,
38 0x01,0x04,0x00,0x00,0x00,0x29,0xC0,0x00,
40 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
48 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
50 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
58 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
60 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
68 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
70 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
78 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
80 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
88 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
90 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
98 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
A0 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
A8 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
B0 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
B8 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
C0 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
C8 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
D0 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
D8 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
E0 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
E8 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
F0 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
F8 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
 fixme: h_offset = 0 for Hexium Gemini Dual, which
 bring hardware to a sane state. this has to be done, just in case someone
   wants to capture from this device before it has been properly initialized.
   the capture engine would badly fail, because no valid signal arrives on the
 initialize the helper ics to useful values 
 this function only gets called when the probing was successful 
 enable i2c-port pins 
  set HWControl GPIO number 2 
 the rest 
 SPDX-License-Identifier: GPL-2.0-or-later
  Device driver for GPIO attached remote control interfaces
  on Conexant 2388x based TVDVB cards.
  Copyright (c) 2003 Pavel Machek
  Copyright (c) 2004 Gerd Knorr
  Copyright (c) 2004, 2005 Chris Pascoe
 ---------------------------------------------------------------------- 
 sample from gpio pin 16 
 poll external decoder 
 debug level [IR] 
 ---------------------------------------------------------------------- 
 read gpio value 
		
		  This board apparently uses a combination of 2 GPIO
		  to represent the keys. Additionally, the second GPIO
		  can be used for parity.
		 
		  Example:
		 
		  for key "5"
		 	gpio = 0x758, auxgpio = 0xe5 or 0xf5
		  for key "Power"
		 	gpio = 0x758, auxgpio = 0xed or 0xfd
 Take out the parity part 
 extract data 
 bit cleared on keydown, NEC scancode, 0xAAAACC, A = 0x866b 
 bit set on keydown 
 bit cleared on keydown 
 can't distinguish keydownup :- 
 samplerate 
 enable 
 ---------------------------------------------------------------------- 
	u32 hardware_mask = 0;	 For devices with a hardware mask, when
				  used with a full-code IR table
 detect & configure 
 ms 
 address 
 ms 
 ms 
 ms 
		
		  It seems that this hardware is paired with NEC extended
		  address 0x866b. So, unfortunately, its usage with other
		  IR's with different address won't work. Still, there are
		  other IR's from the same manufacturer that works, like the
		  002-T mini RC, provided with newer PV hardware
 ms 
 Hardware returns only 6 bits from command part 
 ms 
 ms 
 ms 
 ms 
 ms 
 address 
 address 
 address 
 ms 
 ms 
 ms 
 address 
	
	  The usage of mask_keycode were very convenient, due to several
	  reasons. Among others, the scancode tables were using the scancode
	  as the index elements. So, the less bits it was used, the smaller
	  the table were stored. After the input changes, the better is to use
	  the full scancodes, since it allows replacing the IR remote by
	  another one. Unfortunately, there are still some hardware, like
	  Pixelview Ultra Pro, where only part of the scancode is sent via
	  GPIO. So, there's no way to get the full scancode. Due to that,
	  hardware_mask were introduced here: it represents those hardware
	  that has such limits.
 init input device 
 10 ms 
 all done 
 skip detach on non attached boards 
 done 
 ---------------------------------------------------------------------- 
	
	  Samples are stored in a 32 bit register, oldest sample in
	  the msb. A set bit represents space and an unset bit
	  represents a pulse.
 poll IR chip 
 key pressed ? 
 read actual key code 
 Instantiate the IR receiver device, if present 
	
	  We can't call i2c_new_scanned_device() because it uses
	  quick writes for probing and at least some RC receiver
	  devices only reply to reads.
	  Also, Hauppauge XVR needs to be specified, as address 0x71
	  conflicts with another remote type used with saa7134
 Hauppauge Z8F0811 
 ---------------------------------------------------------------------- 
 SPDX-License-Identifier: GPL-2.0-or-later
  device driver for Conexant 2388x based TV cards
  driver core
  (c) 2003 Gerd Knorr <kraxel@bytesex.org> [SuSE Labs]
  (c) 2005-2006 Mauro Carvalho Chehab <mchehab@kernel.org>
      - Multituner support
      - video_ioctl2 conversion
      - PALM fixes
 ------------------------------------------------------------------ 
  @lpi: lines per IRQ, or 0 to not generate irqs. Note: IRQ to be
  generated _after_ lpi lines are transferred.
 sync instruction 
 scan lines 
 fits into current chunk 
 scanline needs to be split 
	
	  estimate risc mem: worst case is one write per page border +
	  one write per scan line + syncs + jump (all 2 dwords).  Padding
	  can cause next bpl to start close to a page border.  First DMA
	  region may be smaller than PAGE_SIZE
 write risc instructions 
 save pointer to jmp instruction address 
	
	  estimate risc mem: worst case is one write per page border +
	  one write per scan line + syncs + jump (all 2 dwords).  Here
	  there is no padding and no sync.  First DMA region may be smaller
	  than PAGE_SIZE
 write risc instructions 
 save pointer to jmp instruction address 
  our SRAM memory layout
  we are going to put all thr risc programs into host memory, so we
  can use the whole SDRAM for the DMA fifos.  To simplify things, we
  use a static memory layout.  That surely will waste memory in case
  we don't use all DMA channels at the same time (which will be the
  case most of the time).  But that still gives us enough FIFO space
  to be able to deal with insane long pci latencies ...
  FIFO space allocations:
     channel  21    (y video)  - 10.0k
     channel  22    (u video)  -  2.0k
     channel  23    (v video)  -  2.0k
     channel  24    (vbi)      -  4.0k
     channels 25+26 (audio)    -  4.0k
     channel  28    (mpeg)     -  4.0k
     channel  27    (audio rds)-  3.0k
     TOTAL                     = 29.0k
  Every channel has 160 bytes control data (64 bytes instruction
  queue and 6 CDT entries), which is close to 2k total.
  Address layout:
     0x0000 - 0x03ff    CMDs  reserved
     0x0400 - 0x0bff    instruction queues + CDs
     0x0c00 -           FIFOs
 same as audio IN 
 same as audio IN 
 same as audio IN 
 alignment 
 write CDT 
 write CMDS 
 fill registers 
 ------------------------------------------------------------------ 
 debug helper code                                                  
 ------------------------------------------------------------------ 
 disable RISC controller + IRQs 
 stop dma transfers 
 stop interrupts 
 stop capturing 
 clear irq status 
 Clear PIV int
 Clear PCI int
 Clear RISC int
 wait a bit 
 init sram 
 misc init ... 
 agc enable
 agc gain
 adaptibe agc
 chroma agc
 ckillen
 setup image format 
 setup FIFO Thresholds 
 fixes flashing of image 
 Clear PIV int
 Clear PCI int
 Clear RISC int
 Reset on-board parts 
 ------------------------------------------------------------------ 
 3.575611 MHz
 3.582056 MHz
 All NTSCM and variants
 3.57954545 MHz +- 10 Hz
	
	  SECAM have also different sub carrier for chroma,
	  but step_db and step_dr, at cx88_set_tvnorm already handles that.
	 
	  The same FSC applies to PALBGDKIH, PAL60, NTSC4.43 and PALN
 4.43361875 MHz +- 5 Hz
 returns 4FSC  vtotal  frames per seconds 
 recalc H delay and scale registers
 recalc V scale Register (delay is constant)
 setup filters
 CFILT (default)
 VINT (interlaced vertical scaling)
 3-tap interpolation
 5-tap interpolation
 disable comb filter
 preserve PEAKEN, PSEL 
 constant 128 made buzz in analog Nicam-stereo for bigger fifo_size 
 If downstream RISC is enabled, bail out; ALSA is managing DMA 
 setup fifo + format 
 fifo bpl size 
 fifo bpl size 
 enable Up, Down and Audio RDS fifo 
 If downstream RISC is enabled, bail out; ALSA is managing DMA 
 stop dma 
 cx88_set_stereo(dev,V4L2_TUNER_MODE_STEREO); 
  This should be needed only on cx88-alsa. It seems that some cx88 chips have
  bugs and does require DMA enabled for it to work.
 PAL 
	
	  Chroma AGC must be disabled if SECAM is used, we enable it
	  by default on PAL and NTSC
 FIXME: as-is from DScaler
 MO_SCONV_REG = adc clock  video dec clock  2^17
 MO_SUB_STEP = 8  fsc  video dec clock  2^22
 MO_SUB_STEP_DR = 8  4406250  video dec clock  2^22
 bdelay + agcdelay
 htotal
 vbi stuff, set vbi offset to 10 (for 20 Clk2 pixels), this makes
 the effective vbi offset ~244 samples, the same as the Bt8x8
 this is needed as well to set all tvnorm parameter
 audio
 tell i2c chips
	
	  The chroma_agc control should be inaccessible
	  if the video format is SECAM
 done
 ------------------------------------------------------------------ 
	
	  The dev pointer of v4l2_device is NULL, instead we set the
	  video_device dev_parent pointer to the correct PCI bus device.
	  This driver is a rare example where there is one v4l2_device,
	  but the video nodes have different parent (PCI) devices.
 SPDX-License-Identifier: GPL-2.0-or-later
   Support for the mpeg transport stream transfers
   PCI function #2 of the cx2388x.
     (c) 2004 Jelle Foks <jelle@foks.us>
     (c) 2004 Chris Pascoe <c.pascoe@itee.uq.edu.au>
     (c) 2004 Gerd Knorr <kraxel@bytesex.org>
 ------------------------------------------------------------------ 
 CONFIG_MODULES 
 ------------------------------------------------------------------ 
 setup fifo + format 
 write TS length to chip 
	
	  FIXME: this needs a review.
	  also: move to cx88-blackbird + cx88-dvb source files?
 negedge driven & software reset 
 Enable MPEG parallel IO and video signal pins 
 Enable MPEG parallel IO and video signal pins 
 Enable MPEG parallel IO and video signal pins 
 enable MPEG parallel IO 
 punctured clock TS & posedge driven & software reset 
 mpeg start byte 
 punctured clock TS & posedge driven 
 reset counter 
 enable irqs 
 start dma 
 stop dma 
 disable irqs 
 Reset the controller 
 ------------------------------------------------------------------ 
 add jump to start 
 ----------------------------------------------------------- 
 risc op code error 
 risc1 y 
 other general errors 
 pci init 
 initialize driver struct 
 init dma queue 
 get irq 
 everything worked 
 unregister stuff 
 ----------------------------------------------------------- 
 stop mpeg dma 
 FIXME -- shutdown device 
 FIXME: re-initialize hardware 
 restart video+vbi capture 
 Driver asked for hardware access. 
 Fail a request for hardware if the device is busy. 
 When switching to DVB, always set the input to the tuner 
 Driver asked to release hardware. 
			
			  If the DVB driver is releasing, reset the input
			  state to the last configured analog input
 Bring up a new struct for each driver instance 
 Snapshot of the driver registration data 
 only unregister the correct driver type 
 ----------------------------------------------------------- 
 general setup 
 Maintain a reference so cx88-video can query the 8802 device. 
 now autoload cx88-dvb or cx88-blackbird 
 Destroy any 8802 reference. 
 common 
 --- end of list --- 
 SPDX-License-Identifier: GPL-2.0
 ------------------------------------------------------------------ 
 ntsc 
 pal 
 setup fifo + format 
 comb filter delay fixup 
 enable vbi capture 
 reset counter 
 enable irqs 
 enable capture 
 start dma 
 stop dma 
 disable capture 
 disable irqs 
 ------------------------------------------------------------------ 
 add jump to start 
 SPDX-License-Identifier: GPL-2.0-or-later
  device driver for Conexant 2388x based TV cards
  video4linux video interface
  (c) 2003-04 Gerd Knorr <kraxel@bytesex.org> [SuSE Labs]
  (c) 2005-2006 Mauro Carvalho Chehab <mchehab@kernel.org>
 	- Multituner support
 	- video_ioctl2 conversion
 	- PALM fixes
 ------------------------------------------------------------------ 
 ------------------------------------------------------------------- 
 static data                                                         
 ------------------------------------------------------------------- 
 control information 
 control register information 
 --- video --- 
		 strictly, this only describes only U saturation.
		  V saturation is handled specially through code.
		
		  NOTE: the value is converted and written to both even
		  and odd registers in the code
 --- audio --- 
 ------------------------------------------------------------------ 
 struct cx88_core core = dev->core; 
	
	  if there are audioroutes defined, we have an external
	  ADC to deal with audio
		
		  The wm8775 module has the "2" route hardwired into
		  the initialization. Some boards may use different
		  routes for different inputs. HVR-1300 surely does
		
		  cx2388's C-ADC is connected to the tuner only.
		  When used with S-Video, that ADC is busy dealing with
		  chroma, so an external must be used for baseband audio
 "I2S ADC mode" 
 Normal mode 
 ------------------------------------------------------------------ 
 setup fifo + format 
 reset counter 
 enable irqs 
	
	  Enables corresponding bits at PCI_INT_STAT:
	 	bits 0 to 4: video, audio, transport stream, VIP, Host
	 	bit 7: timer
	 	bits 8 and 9: DMA complete for: SRC, DST
	 	bits 10 and 11: BERR signal asserted for RISC: RD, WR
	 	bits 12 to 15: BERR signal asserted for: BRDG, SRC, DST, IPB
 enable capture 
 start dma 
 Planar Y and packed FIFO and RISC enable 
 stop dma 
 disable capture 
 disable irqs 
 ------------------------------------------------------------------ 
 add jump to start 
 ------------------------------------------------------------------ 
 "I2S ADC mode" 
 FM Mode 
 ------------------------------------------------------------------ 
 VIDEO CTRL IOCTLS                                                  
 special v_sat handling 
 For SECAM, both U and V sat should be equal 
 Keeps U Saturation proportional to V Sat 
 0b000, 0b100, 0b101, 0b110, or 0b111 
 needs to be set for both fields 
 Pass changes onto any WM8775 
 ------------------------------------------------------------------ 
 VIDEO IOCTLS                                                       
 only one input in this sample driver 
 When changing channels it is required to reset TVAUDIO 
 cx2388x has a 24-bit register space 
 ----------------------------------------------------------- 
 RADIO ESPECIFIC IOCTLS                                      
 ----------------------------------------------------------- 
 ----------------------------------------------------------- 
 risc op code error 
 risc1 y 
 risc1 vbi 
 ----------------------------------------------------------- 
 exported stuff                                              
 ----------------------------------------------------------- 
 pci init 
 print pci info 
 initialize driver struct 
 init video dma queues 
 init vbi dma queues 
 get irq 
 load and configure helper modules 
		
		  This probes for a tda9874 as is used on some
		  Pixelview Ultra boards.
 Sets device info at pci_dev 
 Maintain a reference so cx88-blackbird can query the 8800 device. 
 initial device configuration 
 register v4l devices 
 start tvaudio thread 
 stop thread 
 FIXME 
 unregister stuff 
 free memory 
 stop video+vbi capture 
 FIXME -- shutdown device 
 FIXME: re-initialize hardware 
 restart video+vbi capture 
 ----------------------------------------------------------- 
 --- end of list --- 
 SPDX-License-Identifier: GPL-2.0-or-later
  cx88-vp3054-i2c.c -- support for the secondary I2C bus of the
 			DNTV Live! DVB-T Pro (VP-3054), wired as:
 			GPIO[0] -> SCL, GPIO[1] -> SDA
  (c) 2005 Chris Pascoe <c.pascoe@itee.uq.edu.au>
 ----------------------------------------------------------------------- 
 SCL high 
 external pullup 
 SCL low 
 drive pin 
 SDA high 
 tristate pin 
 SDA low 
 drive pin 
 ----------------------------------------------------------------------- 
 ----------------------------------------------------------------------- 
 SPDX-License-Identifier: GPL-2.0-or-later
  device driver for Conexant 2388x based TV cards
  MPEG Transport Stream (DVB) routines
  (c) 2004, 2005 Chris Pascoe <c.pascoe@itee.uq.edu.au>
  (c) 2004 Gerd Knorr <kraxel@bytesex.org> [SuSE Labs]
 ------------------------------------------------------------------ 
 ------------------------------------------------------------------ 
 undefined or fe0 
 ------------------------------------------------------------------ 
 TPSERIAL for 3302 in TOP_CONTROL 
 TPSERIAL for 3303 in TOP_CONTROL 
 TPSERIAL for 3303 in TOP_CONTROL 
 Get the first frontend 
	
	  Some xc3028 devices may be hidden by an I2C gate. This is known
	  to happen with some s5h1409-based devices.
	  Now that I2C gate is open, sets up xc3028 configuration
 Get the first frontend 
 Reset the part 
 Put the cx24116 into reset 
 Take the cx24116 out of reset 
	demod_mode = 0,
 0-CLKI, 2-XTALI, else AUTO 
 23 PWM 
 0x60 
 2 Vpp 
 0xC4 
 bus not shared by default 
 Get the first frontend 
 multi-frontend gate control is undefined or defaults to fe0 
 Sets the gate control callback to be used by i2c command calls 
 init frontend(s) 
 MFE frontend 1 
 DVB-S init 
 MFE frontend 2 
 DVB-T init 
 ZL10353 replaces MT352 on later cards 
		
		  The tin box says DEE1601, but it seems to be DTT7579
		  compatible, with a slightly different MT352 AGC gain.
 ZL10353 replaces MT352 on later cards 
 MT352 is on a secondary I2C bus made from some GPIO lines 
		
		  On this board, the demod provides the I2C bus pullup.
		  We must not permit gate_ctrl to be performed, or
		  the xc3028 cannot communicate on the bus.
 Do a hardware reset of chip before using it. 
 Select RF connector callback 
 Do a hardware reset of chip before using it. 
 Do a hardware reset of chip before using it. 
 Do a hardware reset of chip before using it. 
 MFE frontend 1 
 DVB-SS2 Init 
 MFE frontend 2 
 DVB-T Init 
 define general-purpose callback pointer 
 Ensure all frontends negotiate bus access 
 Put the tuner in standby to keep it quiet 
 register everything 
 ----------------------------------------------------------- 
 CX8802 MPEG -> mini driver - We have been given the hardware 
		 We arrive here with either the cx23416 or the cx22702
		  on the bus. Take the bus from the cx23416 and enable the
		  cx22702 demod
 Toggle reset on cx22702 leaving i2c active 
 enable the cx22702 pins 
 Toggle reset on cx22702 leaving i2c active 
 DVB-SS2 Enabled 
 tri-state the cx22702 pins 
 Take the cx24116cx24123 out of reset 
 Parallel IO 
 DVB-T Enabled 
 Put the cx24116cx24123 into reset 
 enable the cx22702 pins 
 Serial IO 
 set RF input to AIR for DVB-T (GPIO 16) 
 CX8802 MPEG -> mini driver - We no longer have the hardware 
 Do Nothing, leave the cx22702 on the bus. 
 If vp3054 isn't enabled, a stub will just return 0 
 dvb stuff 
 init struct vb2_dvb 
 frontendsadapter de-allocated in dvb_register 
 SPDX-License-Identifier: GPL-2.0-or-later
  cx88-i2c.c  --  all the i2c code is here
  Copyright (C) 1996,97,98 Ralph  Metzler (rjkm@thp.uni-koeln.de)
 			   & Marcus Metzler (mocm@thp.uni-koeln.de)
  (c) 2002 Yurij Sysoev <yurij@naturesoft.net>
  (c) 1999-2003 Gerd Knorr <kraxel@bytesex.org>
  (c) 2005 Mauro Carvalho Chehab <mchehab@kernel.org>
 	- Multituner support and i2c address binding
 ----------------------------------------------------------------------- 
 ----------------------------------------------------------------------- 
 ----------------------------------------------------------------------- 
 init + register i2c adapter 
 Prevents usage of invalid delay values 
 SPDX-License-Identifier: GPL-2.0-or-later
  device driver for Conexant 2388x based TV cards
  card-specific stuff.
  (c) 2003 Gerd Knorr <kraxel@bytesex.org> [SuSE Labs]
 ------------------------------------------------------------------ 
 board config info                                                  
 If radio_type !=UNSET, radio_addr should be specified
 internal decoder
 mono from tuner chip
 internal decoder
 added gpio values thanks to Michal
 values for PAL from DScaler
 gpio values for PAL version from regspy by DScaler
 0x0000fda6 L,R RCA audio in?
 No analog tuner 
 mono from tuner chip
		
		  GPIO[0] resets DT3302 DTV receiver
		      0 - reset asserted
		      1 - normal operation
		  GPIO[1] mutes analog audio output connector
		      0 - enable selected source
		      1 - mute
		  GPIO[2] selects source for analog audio output connector
		      0 - analog audio input connector on tab
		      1 - analog DAC output from CX23881 chip
		  GPIO[3] selects RF input connector on tuner module
		      0 - RF connector labeled CABLE
		      1 - RF connector labeled ANT
		  GPIO[4] selects high RF for QAM256 mode
		      0 - normal RF
		      1 - high RF
 No analog tuner 
		 GPIO[2] = audio source for analog audio out connector
		   0 = analog audio input connector
		   1 = CX88 audio DACs
		 
		  GPIO[7] = input to CX88's audiochroma ADC
		   0 = FM 10.7 MHz IF
		   1 = Sound 4.5 MHz IF
		 
		  GPIO[1,5,6] = Oren 51132 pins 27,35,28 respectively
		 
		  GPIO[16] = Remote control input
 entry added by Kaustubh D. Bhalerao <bhalerao.1@osu.edu>
 GPIO values obtained from regspy, courtesy Sean Covel
 May be also TUNER_YMEC_TVF_5533MF for NTSCM or PALM 
		
		  Some variants use a tda9874 and so need the
		  tvaudio module.
 internal decoder 
 TDVS-H062F 
 Alexander Wold <awold@bigfoot.com> 
 2: Line-In 
 2: Line-In 
 2: Line-In 
 2: Line-In 
 2: Line-In 
 2: Line-In 
 fixme: Add radio support 
 fixme: Add radio support 
 Kworld V-stream Xpert DVB-T with Thomson tuner 
 DTT 7579 Conexant CX22702-19 Conexant CX2388x  
 Manenti Marco <marco_manenti@colman.it> 
 No analog tuner 
 TDVS-H064F 
		
		  FIXME: tested TV input only, disabled composite,
		  svideo and radio until they can be tested also.
 FIXME: SVideo, Composite and FM inputs are untested 
 Actually a TNF9535 
 1: TV Audio  FM Mono 
 2: Line-In 
 2: Line-In 
 4: FM Stereo (untested) 
		
		  gpio0 as reported by Mike Crash <mike AT mikecrash.com>
 1: TV Audio  FM Mono 
 2: Line-In 
 2: Line-In 
 4: FM Stereo (untested) 
 xc3008 tuner, digital only for now 
 Unconfirmed 
 Unconfirmed 
 Unconfirmed 
 Terry Wu <terrywu2009@gmail.com> 
 TV Audio :      set GPIO 2, 18, 19 value to 0, 1, 0 
 FM Audio :      set GPIO 2, 18, 19 value to 0, 0, 0 
 Line-in Audio : set GPIO 2, 18, 19 value to 0, 1, 1 
 Mute Audio :    set GPIO 2 value to 1               
 pin 2 = 0 
 pin 18 = 1, pin 19 = 0 
 pin 2 = 0 
 pin 18 = 1, pin 19 = 1 
 pin 2 = 0 
 pin 18 = 1, pin 19 = 1 
 pin 2 = 0 
 pin 18 = 0, pin 19 = 0 
 pin 2 = 0 
 pin 18 = 1, pin 19 = 0 
 pin 2 = 0 
 pin 18 = 1, pin 19 = 1 
 pin 2 = 0 
 pin 18 = 1, pin 19 = 1 
 pin 2 = 0 
 pin 18 = 0, pin 19 = 0 
 pin 2 = 0 
 pin 14 = 1, pin 13 = 0 
 pin 2 = 0 
 pin 14 = 1, pin 13 = 1 
 pin 2 = 0 
 pin 14 = 1, pin 13 = 1 
 pin 2 = 0 
 pin 14 = 1, pin 13 = 0 
 Long names may confuse LIRC. 
			
			  Due to the way the cx88 driver is written,
			  there is no way to deactivate audio pass-
			  through without this entry. Furthermore, if
			  the TV mux entry is first, you get audio
			  from the tuner on boot for a little while.
 Also PowerColor Real Angel 330 and Geniatech X800 OEM 
 if gpio1:bit9 is enabled, DVB-T won't work 
	
	  Both radio, analog and ATSC work with this board.
	  However, for analog to work, s5h1409 gate should be open,
	  otherwise, tuner-xc3028 won't be detected.
	  A proper fix require using the newer i2c methods to add
	  tuner-xc3028 without doing an i2c probe.
		
		  GPIO0 (WINTV2000)
		 
		  Analogue     SAT     DVB-T
		  Antenna      0xc4bf  0xc4bb
		  Composite    0xc4bf  0xc4bb
		  S-Video      0xc4bf  0xc4bb
		  Composite1   0xc4ff  0xc4fb
		  S-Video1     0xc4ff  0xc4fb
		 
		  BIT  VALUE   FUNCTION GP{x}_IO
		  0    1       I:?
		  1    1       I:?
		  2    1       O:MPEG PORT 0=DVB-T 1=DVB-S
		  3    1       I:?
		  4    1       I:?
		  5    1       I:?
		  6    0       O:INPUT SELECTOR 0=INTERNAL 1=EXPANSION
		  7    1       O:DVB-T DEMOD RESET LOW
		 
		  BIT  VALUE   FUNCTION GP{x}_OE
		  8    0       I
		  9    0       I
		  a    1       O
		  b    0       I
		  c    0       I
		  d    0       I
		  e    1       O
		  f    1       O
		 
		  WM8775 ADC
		 
		  1: TV Audio  FM Mono
		  2: Line-In
		  3: Line-In Expansion
		  4: FM Stereo
 1: TV Audio  FM Mono 
 2: Line-In 
 2: Line-In 
 4: FM Stereo 
		
		  GPIO setting
		 
		   2: mute (0=off,1=on)
		  12: tuner reset pin
		  13: audio source (0=tuner audio,1=line in)
		  14: FM (0=on,1=off ???)
 pin 2 = 0 
 pin 13 = 0, pin 14 = 1 
 pin 2 = 0 
 pin 13 = 1, pin 14 = 1 
 pin 2 = 0 
 pin 13 = 1, pin 14 = 1 
 pin 2 = 0 
 pin 13 = 0, pin 14 = 0 
		
		  GPIO setting
		 
		   2: mute (0=off,1=on)
		  12: tuner reset pin
		  13: audio source (0=tuner audio,1=line in)
		  14: FM (0=on,1=off ???)
 pin 2 = 0 
 pin 13 = 0, pin 14 = 1 
 pin 2 = 0 
 pin 13 = 1, pin 14 = 1 
 pin 2 = 0 
 pin 13 = 1, pin 14 = 1 
 pin 2 = 0 
 pin 13 = 0, pin 14 = 0 
		
		  GPIO
		    2: 1: mute audio
		   12: 0: reset XC4000
		   13: 1: audio input is line in (0: tuner)
		   14: 0: FM radio
		   16: 0: RF input is cable
 was 0x0407 
 was 0x0407 
 ------------------------------------------------------------------ 
 PCI subsystem IDs                                                  
 with mpeg encoder 
 NTSC 
 with mpeg encoder 
 HD-3000 card 
 Re-branded DViCO: DigitalNow DVB-T Dual 
 Re-branded DViCO: UltraView DVB-T Plus 
 FusionHDTV 3 Gold (original revision) 
 AverMedia M150-D 
 This board is known to work with the ASUS PVR416 config 
 Club3D Zap TV2100 
 ADS Tech InstantTV DVB-S 
 Also NotOnlyTV LV3H (version 1.11 is silkscreened on the board) 
 WinFast DTV1800 H with XC4000 tuner 
 PVR2000 PAL Model [107d:6630] 
 PVR2000 PAL Model [107d:6638] 
 PVR2000 NTSC Model [107d:6631] 
 PVR2000 NTSC Model [107d:6637] 
 PVR2000 NTSC Model [107d:663d] 
 DV2000 NTSC Model [107d:6621] 
 TV2000 XP Global [107d:6618]  
 TV2000 XP Global [107d:6618] 
 WinFast TV2000 XP Global with XC4000 tuner 
 WinFast TV2000 XP Global with XC4000 tuner and different GPIOs 
  some leadtek specific stuff
 Terry Wu <terrywu2009@gmail.com> 
 SSID 6613 for TV2000 XP Expert NTSC Model 
 SSID 6621 for DV2000 NTSC Model 
 SSID 6631 for PVR2000 NTSC Model 
 SSID 6637 for PVR2000 NTSC Model 
 SSID 6637 for PVR2000 NTSC Model 
 Make sure we support the board model 
 WinTV-HVR3000 (Retail, IR, bpanel video, 3.5mm audio in) 
 WinTV-HVR3000 (Retail, IR Blaster, bpanel video, 3.5mm audio in) 
 WinTV-HVR3000 (Retail, IR, bpanel video, 3.5mm audio in - 880 bridge) 
 WinTV-HVR3000 (Retail, IR, bpanel video, 3.5mm audio in - low profile) 
 WinTV-HVR3000 (Retail, IR, bpanel video, 3.5mm audio in - 880 bridge - LP) 
 WinTV-HVR3000 (OEM, no IR, bpanel video, 3.5mm audio in) 
 WinTV-HVR3000 (OEM, no IR, no back panel video) 
 WinTV-HVR3000 (OEM, no IR, bpanel video, RCA audio in - Low profile) 
 WinTV-HVR3000 (OEM, no IR, no bpanel video - Low profile) 
 WinTV-PVR 'Roslyn' (No IR) 
 WinTV-PCI-FM 
 WinTV-HVR4000 (DVBSS2T, Video and IR, back panel inputs) 
 WinTV-HVR4000LITE (DVBSS2, IR) 
 WinTV-HVR4000LITE (DVBSS2, No IR) 
 WinTV-HVR4000 (DVBSS2T, Video no IR, back panel inputs) 
 WinTV-HVR4000 (DVBSS2T, Video no IR) 
 Nova-T-PCI (9002) 
 Nova-S-Plus (Video and IR) 
 Nova-S-Plus (Video and IR) 
 Nova-T-PCI (9002 No RF out) 
 Nova-T-PCI (oem) 
 Nova-T-PCI (oemIR) 
 Nova-SE2 (OEM, No Video or IR) 
 WinTV-IROnly (No analog or digital Video inputs) 
 WinTV-HVR1100 (Video and IR Retail) 
 WinTV-HVR1100 (Video and IR OEM) 
 WinTV-HVR1300 (PAL Video, MPEG Video and IR RX) 
 WinTV-HVR1300 (PAL Video, MPEG Video and IR RXTX) 
 WinTV-HVR1300 (PAL Video, MPEG Video no IR) 
 WinTV-HVR1300 () 
 WinTV-HVR1300 () 
 WinTV-HVR1100LP (Video no IR, Retail - Low Profile) 
 known 
  some GDI (was: Modular Technology) specific stuff
  some Divco specific stuff
 GPIO-4 xc3028 tuner 
  some Geniatech specific stuff
 GPIO 12 (xc3028 tuner reset) 
 GPIO 12 (xc4000 tuner reset) 
  some Divco specific stuff
  some DViCO specific stuff
 Board-specific callbacks 
 Digital TV
 Analog TV 
 Board-specific callbacks 
  Tuner callback function. Currently only needed for the Pinnacle
  PCTV HD 800i with an xc5000 silicon tuner. This is used for both
  analog tuner attach (tuner-core.c) and dvb tuner attach (cx88-dvb.c)
 This is the reset command from xc5000 
			
			  djh - According to the engineer at PCTV Systems,
			  the xc5000 reset pin is supposed to be on GPIO12.
			  However, despite three nights of effort, pulling
			  that GPIO low didn't reset the xc5000.  While
			  pulling MO_SRST_IO low does reset the xc5000, this
			  also resets in the s5h1409 being reset as well.
			  This causes tuning to always fail since the internal
			  state of the s5h1409 does not match the driver's
			  state.  Given that the only two conditions in which
			  the driver performs a reset is during firmware load
			  and powering down the chip, I am taking out the
			  reset.  We know that the chip is being reset
			  when the cx88 comes online, and not being able to
			  do power management for this board is worse than
			  not having any tuning at all.
 This is the reset command from xc5000 
 Should never be here 
 ----------------------------------------------------------------------- 
		
		  Bring the 702 demod up before i2c scanningattach or
		  devices are hidden.
		 
		  We leave here with the 702 on the bus
		 
		  "reset the IR receiver on GPIO[3]"
		  Reported by Mike Crash <mike AT mikecrash.com>
 702 out of reset 
 Enable the xc5000 tuner 
 Init GPIO 
 702 out of reset 
  Sets board-dependent xc3028 configuration
 Now works with firmware version 2.7 
		
		  FIXME: For this board, the xc3028 never recovers after being
		  powered down (the reset GPIO probably is not set properly).
		  We don't have access to the hardware so we cannot determine
		  which GPIO is used for xc3028, so just disable power xc3028
		  power management for now
		
		  Those boards uses non-MTS firmware
 GPIO0:0 is hooked to demod reset 
 GPIO0:4 is hooked to xc3028 reset 
 GPIO0:6 is hooked to FX2 reset pin 
 GPIO0:0 is hooked to mt352 reset pin 
 enable tuner 
end switch() 
 Setup tuners 
 Fills device-dependent initialization parameters 
 Sends parameters to xc20283028 tuner 
 ------------------------------------------------------------------ 
 check pci quirks 
 check insmod options 
 apply stuff 
  Allocate and initialize the cx88 core struct.  One should hold the
  devlist mutex before calling this.
	
	  Note: Setting initial standard here would cause first call to
	  cx88_set_tvnorm() to return without programming any registers.  Leave
	  it blank for at this point and it will get set later in
	  cx8800_initdev()
 PCI stuff 
 board config 
 init hardware 
 load tuner module, if needed 
		
		  Ignore 0x6b and 0x6f on cx88 boards.
		  FusionHDTV5 RT Gold has an ir receiver at 0x6b
		  and an RTC at 0x6f which can get corrupted if probed.
 tda8290 
		
		  I don't trust the radio_type as is stored in the card
		  definitions, so we just probe for it.
		  The radio_type is sometimes missing, or set to UNSET but
		  later code configures a tea5767.
 SPDX-License-Identifier: GPL-2.0-or-later
   Support for a cx23416 mpeg encoder via cx2388x host port.
   "blackbird" reference design.
     (c) 2004 Jelle Foks <jelle@foks.us>
     (c) 2004 Gerd Knorr <kraxel@bytesex.org>
     (c) 2005-2006 Mauro Carvalho Chehab <mchehab@kernel.org>
         - video_ioctl2 conversion
   Includes parts from the ivtv driver <http:sourceforge.netprojectsivtv>
 ------------------------------------------------------------------ 
 defines below are from ivtv-driver.h 
 Firmware API commands 
 stop at the end of gop, generate irq 
 stop immediately, no irq 
 NTSC: 30fps 
 PAL: 25fps 
 239 
 240 
 261 
 239 
 240 
 262 
 Registers 
| IVTV_REG_OFFSET)
| IVTV_REG_OFFSET)
| IVTV_REG_OFFSET)
| IVTV_REG_OFFSET)
| IVTV_REG_OFFSET)
| IVTV_REG_OFFSET)
 ------------------------------------------------------------------ 
 toggle reset of the host 
 host port setup 
 ------------------------------------------------------------------ 
 Warning: address is dword address (4 bytes) 
 Warning: address is dword address (4 bytes) 
 ------------------------------------------------------------------ 
	
	  this may not be 100% safe if we can't read any memory location
	  without side effects
 tell 'em we're working on it 
 write command + args + fill remaining with zeros 
 command code 
 timeout 
 tell 'em we're done writing 
 wait for firmware to handle the API command 
 read output values 
 ------------------------------------------------------------------ 
  We don't need to call the API often, so using just one mailbox
  will probably suffice
 transfer to the chip 
 read back to verify with the checksum 
  Settings used by the windows tv app for PVR2000:
  =================================================================================================================
  Profile | Codec | Resolution | CBRVBR | Video Qlty   | V. Bitrate | Frmrate | Audio Codec | A. Bitrate | A. Mode
  -----------------------------------------------------------------------------------------------------------------
  MPEG-1  | MPEG1 | 352x288PAL | (CBR)   | 1000:Optimal | 2000 Kbps  | 25fps   | MPG1 Layer2 | 224kbps    | Stereo
  MPEG-2  | MPEG2 | 720x576PAL | VBR     | 600 :Good    | 4000 Kbps  | 25fps   | MPG1 Layer2 | 224kbps    | Stereo
  VCD     | MPEG1 | 352x288PAL | (CBR)   | 1000:Optimal | 1150 Kbps  | 25fps   | MPG1 Layer2 | 224kbps    | Stereo
  DVD     | MPEG2 | 720x576PAL | VBR     | 600 :Good    | 6000 Kbps  | 25fps   | MPG1 Layer2 | 224kbps    | Stereo
  DB DVD | MPEG2 | 720x576PAL | CBR     | 600 :Good    | 6000 Kbps  | 25fps   | MPG1 Layer2 | 224kbps    | Stereo
  =================================================================================================================
  [] DB: "DirectBurn"
 assign frame size 
 ping 
 ping was not successful, reset and upload firmware 
 SYS_RSTO=0 
 SYS_RSTO=1 
 ping 
 656-8bit IO and enable MPEG parallel IO 
 chroma subcarrier lock to normal? 
 no 656 mode, 8-bit pixels, disable VBI 
 Normal Y-limits to let the mpeg encoder sync 
 start capturing to the host interface 
 unmute audio source 
 initialize the video input 
 start capturing to the host interface 
 ------------------------------------------------------------------ 
 Make sure we can acquire the hardware 
 Make sure we release the hardware 
 ------------------------------------------------------------------ 
 ------------------------------------------------------------------ 
 The CX8802 MPEG API will call this when we can use the hardware 
		
		  By default, core setup will leave the cx22702 out of reset,
		  on the bus.
		  We left the hardware on power up with the cx22702 active.
		  We're being given access to re-arrange the GPIOs.
		  Take the bus off the cx22702 and put the cx23416 on it.
 Toggle reset on cx22702 leaving i2c active 
 tri-state the cx22702 pins 
 The CX8802 MPEG API will call this when we need to release the hardware 
 Exit leaving the cx23416 on the bus 
 ----------------------------------------------------------- 
 blackbird stuff 
 initial device configuration: needed ? 
	init_controls(core);
 blackbird 
 SPDX-License-Identifier: GPL-2.0-or-later
  cx88x-audio.c - Conexant CX2388023881 audio downstream driver driver
   (c) 2001 Michael Eskin, Tom Zakrajsek [Windows version]
   (c) 2002 Yurij Sysoev <yurij@naturesoft.net>
   (c) 2003 Gerd Knorr <kraxel@bytesex.org>
  -----------------------------------------------------------------------
  Lot of voodoo here.  Even the data sheet doesn't help to
  understand what is going on here, the documentation for the audio
  part of the cx2388x chip is very bad.
  Some of this comes from party done linux driver sources I got from
  [undocumented].
  Some comes from the dscaler sources, one of the dscaler driver guy works
  for Conexant ...
  -----------------------------------------------------------------------
 ----------------------------------------------------------- 
 mute 
 start programming 
 restart dma; This avoids buzz in NICAM and is good in others  
		
		  'pass-thru mode': this enables the i2s
		  output to the mpeg encoder
 cx_write(AUD_APB_IN_RATE_ADJ, 0); 
 finish programming 
 unmute 
 ----------------------------------------------------------- 
 end of list  },
 end of list  },
 end of list  },
 end of list  },
 end of list  },
 end of list  },
 end of list  },
 end of list  },
 end of list  },
 end of list  },
 end of list  },
 end of list  },
 TODO: eiaj register settings are not there yet ... 
 end of list  },
 end of list  },
 end of list  },
	
	  It is enough to leave default values?
	 
	  No, it's not!  The deemphasis registers are reset to the 75us
	  values by default.  Analyzing the spectrum of the decoded audio
	  reveals that "no deemphasis" is the same as 75 us, while the 50 us
	  setting results in less deemphasis.
 end of list  },
 ----------------------------------------------------------- 
 if bit1=1 then nicam is detected 
 wait a little bit for next reading status 
 prepare all dsp registers 
		
		  set nicam mode - otherwise
		  AUD_NICAM_STATUS2 contains wrong values
 fall back to fm  am mono 
		
		  SlavePhilipsAutobaud
		  NB on Nova-S bit1 NPhilipsSony appears to be inverted:
		 	0= Sony, 1=Philips
 Switch to "I2S ADC mode" 
 nothing 
 If software stereo detection is not supported... 
		
		  If the hardware itself detected stereo, also return
		  stereo as an available subchannel
 fall back to fm  am mono 
 TODO: Add A2 autodection 
 DO NOTHING 
 just monitor the audio status for now ... 
 manually set, don't do anything. 
 monitor signal and set stereo if available 
 automatically switch to best available mode 
			
			  stereo autodetection is supported by hardware so
			  we don't need to do it manually. Do nothing.
 SPDX-License-Identifier: GPL-2.0-or-later
   Stereo and SAP detection for cx88
   Copyright (c) 2009 Marton Balint <cus@fazekas.hu>
  We calculate the baseband frequencies of the carrier and the pilot tones
  based on the the sampling rate of the audio rds fifo.
  The frequencies below are from the reference driver. They probably need
  further adjustments, because they are not tested at all. You may even need
  to play a bit with the registers of the chip to select the proper signal
  for the input of the audio rds fifo, and measure it's sampling rate to
  calculate the proper baseband frequencies...
 5pi8  
 5pi8  
 7pi16 
 The spectrum of the signal should be empty between these frequencies. 
	
	  Now x is between 0 and INT_PI2.
	  To calculate cos(x) we use it's Taylor polinom.
	
	  We use the Goertzel algorithm to determine the power of the
	  given frequency in the signal
	
	  XXX: N must be low enough so that NN fits in s32.
	  Else we need two divisions.
 The last 192 samples are enough for noise detection 
 EIAJ checks may need adjustments 
			
			  For EIAJ the carrier is always present,
			  so we probably don't need noise detection
 FIXME: Currently not supported 
 If audio RDS fifo is disabled, we can't read the samples 
 Wait at least 500 ms after an audio standard change 
 SPDX-License-Identifier: GPL-2.0-or-later
   Support for audio capture
   PCI function #1 of the cx2388x.
     (c) 2007 Trent Piepho <xyzzy@speakeasy.org>
     (c) 2005,2006 Ricardo Cerqueira <v4l@cerqueira.org>
     (c) 2005 Mauro Carvalho Chehab <mchehab@kernel.org>
     Based on a dummy cx88 module by Gerd Knorr <kraxel@bytesex.org>
     Based on dummy.c by Jaroslav Kysela <perex@perex.cz>
  Data type declarations - Can be moded to a header file later
 pci io 
 audio controls 
  Module global static vars
 Index 0-MAX 
 ID for this card 
  Module macros
  Module specific functions
  BOARD Specific: Sets audio DMA
 Make sure RISCFIFO are off before changing FIFORISC settings 
 setup fifo + format - out channel 
 sets bpl size 
 reset counter 
 Enables corresponding bits at AUD_INT_STAT 
 Clean any pending interrupt bits already set 
 enable audio irqs 
 start dma 
 Enables Risc Processor 
 audio downstream FIFO and RISC enable 
  BOARD Specific: Resets audio DMA
 stop dma 
 disable irqs 
  BOARD Specific: IRQ dma bits
 0-2 
 reserved 
 4-6 
 reserved 
 8-10 
 reserved 
 12-14 
 reserved 
 16-18 
 19-21 
  BOARD Specific: Threats IRQ audio specific calls
 risc op code error 
 risc1 downstream 
 FIXME: Any other status should deserve a special handling? 
  BOARD Specific: Handles IRQ calls
  ALSA PCM Interface
  Digital hardware definition
	
	  Analog audio output will be full of clicks and pops if there
	  are not exactly four lines in the SRAM FIFO buffer.
  audio pcm capture open callback
 must be multiple of 8 
  audio close callback
  hw_params callback
 Loop back to start of program 
  hw free callback
  prepare callback
  trigger callback
 Local interrupts are already disabled by ALSA 
  pointer callback
	dprintk(2, "%s - count %d (+%u), period %d, frame %lu\n", __func__,
		count, new, count & (runtime->periods-1),
		runtime->period_size  (count & (runtime->periods-1)));
  page callback (needed for mmap)
  operators
  create a PCM device
  CONTROL INTERFACE
 Pass volume & balance onto any WM8775 
 OK - TODO: test it 
 Do we really know this will always be called with IRQs on? 
 Pass mute onto any WM8775 
  Basic Flow for Sound Devices
  PCI ID Table - 14f1:8801 and 14f1:8811 means function 1: Audio
  Only boards with eeprom and byte 1 at eeprom=1 have it
  Chip-specific destructor
  Component Destructor
  Alsa Constructor - Component probe
 pci init 
 get irq 
 print pci info 
 If there's a wm8775 then add a Line-In ALC switch 
  ALSA destructor
  PCI driver definition
 SPDX-License-Identifier: GPL-2.0
  Earthsoft PT3 driver
  Copyright (C) 2014 Akihiro Tsukada <tskd08@gmail.com>
  all 4 tuners in PT3 are packaged in a can module (Sharp VA4M6JC2103).
  it seems that they share the power lines and Amp power line and
  adaps[3] controls those powers.
 LNA is shared btw. 2 TERR-tuners 
 LNB power is shared btw. 2 SAT-tuners 
 register values used in pt3_fe_init() 
  pt3_fe_init: initialize demod sub modules and ISDB-T tuners all at once.
  As for demod IC (TC90522) and ISDB-T tuners (MxL301RF),
  the i2c sequences for init'ing them are not public and hidden in a ROM,
  and include the board specific configurations as well.
  They are stored in a lump and cannot be taken out  accessed separately,
  thus cannot be moved to the FEtuner driver.
 additional config? 
 output pin configuration 
 init and wake-up ISDB-S tuners 
	 Wake up all tuners and make an initial tuning,
	  in order to avoid interference among the tuners in the module,
	  according to the doc from the manufacturer.
 set only when called from pt3_probe(), not resume() 
 and sleep again, waiting to be opened by users. 
 start fetching thread 
 kill the fetching thread 
 stop demux kthread 
 CONFIG_PM_SLEEP 
 SPDX-License-Identifier: GPL-2.0
  Earthsoft PT3 driver
  Copyright (C) 2014 Akihiro Tsukada <tskd08@gmail.com>
 masks for I2C status register 
 translates msgs to internal commands for bit-banging 
 send [pre-]translated i2c msgs stored at addr 
 make sure that previous transactions had finished 
 wait for the current transaction to finish 
 init commands for each demod are combined into one transaction
   and hidden in ROM with the address PT3_CMD_ADDR_INIT_DEMOD.
 init commands for two ISDB-T tuners are hidden in ROM. 
  I2C algorithm
 SPDX-License-Identifier: GPL-2.0
  Earthsoft PT3 driver
  Copyright (C) 2014 Akihiro Tsukada <tskd08@gmail.com>
 mark the whole buffers as "not written yet" 
 build circular-linked pointers (xfer_desc) to the data buffers
 SPDX-License-Identifier: GPL-2.0-or-later
  dm1105.c - driver for DVB cards based on SDMC DM1105 PCI chip
  Copyright (C) 2008 Igor M. Liplianin <liplianin@me.by>
 ----------------------------------------------- 
  PCI ID's
 ----------------------------------------------- 
 sdmc dm1105 registers 
 TS Control 
 GPIO Interface 
 PID serial number 
 Odd-even secret key select 
 Host Command Interface 
 PCI Interface 
 CW Value 
 PID Value 
 IR Control 
 Unknown Values 
 I2C Interface 
 ----------------------------------------------- 
 Interrupt Mask Bits 
 Interrupt Status Bits 
 IR Control Bits 
 EEPROM addr 
 Max board count 
 GPIO's for LNB power control 
 GPIO's for LNB power control for Axess DM05 
 actually 13v 
 GPIO's for LNB power control for unbranded with I2C on GPIO 
 infrared remote control 
 pci 
 ir 
 dvb 
 i2c 
 irq 
 dma 
 The chip has 18 GPIOs. In HOST mode GPIO's used as 15 bit address lines,
 so we can use only 3 GPIO's from GPIO15 to GPIO17.
 Here I don't check whether HOST is enebled as it is not implemented yet.
 read bytes 
 prepared for cx24116 firmware 
 Write in small blocks 
 write bytes 
 ir work handler 
 FIXME: UNKNOWN because we don't generate a full NEC scancode (yet?) 
 work handler 
 bad packet found 
 Read-Write INSTS Ack's Interrupt for DM1105 chip 16.03.2008 
DATALEN 188,
TS_STRT TS_VALP MSBFIRST TS_MODE ALPAS TSPES
 map DMA and set address 
 big buffer 
 IR NEC mode enable 
 IR disable 
 board config 
 i2c 
 Raise SCL and SDA 
 dvb 
 empty 
 SPDX-License-Identifier: GPL-2.0-or-later
  Motion Eye video4linux driver for Sony Vaio PictureBook
  Copyright (C) 2001-2004 Stelian Pop <stelian@popies.net>
  Copyright (C) 2001-2002 Alcôve <www.alcove.com>
  Copyright (C) 2000 Andrew Tridgell <tridge@valinux.com>
  Earlier work by Werner Almesberger, Paul `Rusty' Russell and Paul Mackerras.
  Some parts borrowed from various video4linux drivers, especially
  bttv-driver.c and zoran.c, see original files for credits.
 number of grab buffers 
 size of a grab buffer 
 devvideoX registration number 
 driver structure - only one possible 
 Memory allocation routines (stolen from bttv-driver.c)                   
  return a page table pointing to N pages of locked memory
  NOTE: The meye device expects DMA addresses on 32 bits, we build
  a table of 1024 entries = 4 bytes  1024 = 4096 bytes.
 give only 32 bit DMA addresses 
 copy data from ptable into buf 
 JPEG tables at different qualities to load into the VRJ chip             
 return a set of quantisation tables based on a quality from 1 to 10 
 return a generic set of huffman tables 
 MCHIP low-level functions                                                
 returns the horizontal capture size 
 returns the vertical capture size 
 waits for a register to be available 
 sets a value into the register 
 get the register value 
 wait for a register to become a particular value 
 setup subsampling 
 set the framerate into the mchip 
 load some huffman and quantisation tables into the VRJ chip ready
 setup the VRJ parameters in the chip 
 sets the DMA parameters into the chip 
 setup for DMA transfers - also zeros the framebuffer 
 frees the DMA buffer 
 stop any existing HIC action and wait for any dma to complete then
 MCHIP frame processing functions                                         
 get the next ready frame from the dma engine 
 frees the current frame from the dma engine 
 read one frame from the framebuffer assuming it was captured using
 read a compressed frame from the framebuffer 
	 Some mchip generated jpeg frames are incorrect. In most
	  (all ?) of those cases, the final EOI (0xff 0xd9) marker
	  is not present at the end of the frame.
	 
	  Since adding the final marker is not enough to restore
	  the jpeg integrity, we drop the frame.
 take a picture into SDRAM 
 dma a previously taken picture into a buffer 
 start continuous dma capture 
 compress one frame into a buffer 
 uncompress one image into a buffer 
 start continuous compressed capture 
 Interrupt handling                                                       
 video4linux integration                                                  
 need restart 
 stop capture 
 standard YUV 422 capture 
 compressed MJPEG capture 
 already allocated, no modifications 
 lazy allocation 
 not IO memory 
 Ask the camera to perform a soft reset. 
 disable interrupts 
 SPDX-License-Identifier: GPL-2.0-or-later
   tw68_risc.c
   Part of the device driver for Techwell 68xx based cards
   Much of this code is derived from the cx88 and sa7134 drivers, which
   were in turn derived from the bt87x driver.  The original work was by
   Gerd Knorr; more recently the code was enhanced by Mauro Carvalho Chehab,
   Hans Verkuil, Andy Walls and many others.  Their work is gratefully
   acknowledged.  Full credit goes to them - any problems within this code
   are mine.
   Copyright (C) 2009  William M. Brack
   Refactored and updated to the latest v4l core frameworks:
   Copyright (C) 2014 Hans Verkuil <hverkuil@xs4all.nl>
  tw68_risc_field
   @rp:	pointer to current risc program position
   @sglist:	pointer to "scatter-gather list" of buffer pointers
   @offset:	offset to target memory buffer
   @sync_line:	0 -> no sync, 1 -> odd sync, 2 -> even sync
   @bpl:	number of bytes per scan line
   @padding:	number of bytes of padding to add
   @lines:	number of lines in field
   @jump:	insert a jump at the start
 sync instruction 
 scan lines 
 calculate next starting position 
 fits into current chunk 
 (offset<<12) |  bpl);
			
			  scanline needs to be split.  Put the start in
			  whatever memory remains using RISC_LINESTART,
			  then the remainder into following addresses
			  given by the scatter-gather list.
 one full line to be done 
 first fragment 
 succeeding fragments have no offset 
 final chunk - offset 0, count 'todo' 
  tw68_risc_buffer
 	This routine is called by tw68-video.  It allocates
 	memory for the dma controller "program" and then fills in that
 	memory with the appropriate "instructions".
 	@pci:		structure with info about the pci
 			slot which our device is in.
 	@buf:		structure with info about the memory
 			used for our controller program.
 	@sglist:	scatter-gather list entry
 	@top_offset:	offset within the risc program area for the
 			first odd frame line
 	@bottom_offset:	offset within the risc program area for the
 			first even frame line
 	@bpl:		number of data bytes per scan line
 	@padding:	number of extra bytes to add at end of line
 	@lines:		number of scan lines
	
	  estimate risc mem: worst case is one write per page border +
	  one write per scan line + syncs + 2 jumps (all 2 dwords).
	  Padding can cause next bpl to start close to a page border.
	  First DMA region may be smaller than PAGE_SIZE
 write risc instructions 
 generates SYNCO 
 generates SYNCE 
 save pointer to jmp instruction address 
 assure risc buffer hasn't overflowed 
 ------------------------------------------------------------------ 
 debug helper code                                                  
 SPDX-License-Identifier: GPL-2.0-or-later
   tw68 functions to handle video data
   Much of this code is derived from the cx88 and sa7134 drivers, which
   were in turn derived from the bt87x driver.  The original work was by
   Gerd Knorr; more recently the code was enhanced by Mauro Carvalho Chehab,
   Hans Verkuil, Andy Walls and many others.  Their work is gratefully
   acknowledged.  Full credit goes to them - any problems within this code
   are mine.
   Copyright (C) 2009  William M. Brack
   Refactored and updated to the latest v4l core frameworks:
   Copyright (C) 2014 Hans Verkuil <hverkuil@xs4all.nl>
 ------------------------------------------------------------------ 
 data structs for video                                             
  FIXME -
  Note that the saa7134 has formats, e.g. YUV420, which are classified
  as "planar".  These affect overlay mode, and are flagged with a field
  ".planar" in the format.  Do we need to implement this in this driver?
  The following table is searched by tw68_s_std, first for a specific
  match, then for an entry which contains the desired id.  The table
  entries should therefore be ordered in ascending order of specificity.
 autodetect 
 ------------------------------------------------------------------ 
  Note that the cropping rectangles are described in terms of a single
  frame, i.e. line positions are only 12 the interlaced equivalent
  tw68_set_scale
  Scaling and Cropping for video decoding
  We are working with 3 values for horizontal and vertical - scale,
  delay and active.
  HACTIVE represent the actual number of pixels in the "usable" image,
  before scaling.  HDELAY represents the number of pixels skipped
  between the start of the horizontal sync and the start of the image.
  HSCALE is calculated using the formula
 	HSCALE = (HACTIVE  (#pixels desired))  256
  The vertical registers are similar, except based upon the total number
  of lines in the image, and the first line of the image (i.e. ignoring
  vertical sync and VBI).
  Note that the number of bytes reaching the FIFO (and hence needing
  to be processed by the DMAP program) is completely dependent upon
  these values, especially HSCALE.
  Parameters:
 	@dev		pointer to the device structure, needed for
 			getting current norm (as well as debug print)
 	@width		actual image width (from user buffer)
 	@height		actual image height
 	@field		indicates Top, Bottom or Interlaced
 set individually for debugging clarity 
 if field is interlaced 
 we must set for 1-frame 
 ------------------------------------------------------------------ 
 Set cropping and scaling 
	
	   Set start address for RISC program.  Note that if the DMAP
	   processor is currently running, it must be stopped before
	   a new address can be set.
 Clear any pending interrupts 
 Enable the risc engine and the fifo 
 ------------------------------------------------------------------ 
 calc max # of buffers from size (must not exceed the 4MB virtual
 ------------------------------------------------------------- 
 vb2 queue operations                                          
	
	  We allow create_bufs, but only if the sizeimage is >= as the
	  current sizeimage. The tw68_buffer_count calculation becomes quite
	  difficult otherwise.
  The risc program for each buffers works as follows: it starts with a simple
  'JUMP to addr + 8', which is effectively a NOP. Then the program to DMA the
  buffer follows and at the end we have a JUMP back to the start + 8 (skipping
  the initial JUMP).
  This is the program of the first buffer to be queued if the active list is
  empty and it just keeps DMAing this buffer without generating any interrupts.
  If a new buffer is added then the initial JUMP in the program generates an
  interrupt as well which signals that the previous buffer has been DMAed
  successfully and that it can be returned to userspace.
  It also sets the final jump of the previous buffer to the start of the new
  buffer, thus chaining the new buffer into the DMA chain. This is a single
  atomic u32 write, so there is no race condition.
  The end-result of all this that you only get an interrupt when a buffer
  is ready, so the control flow is very easy.
 append a 'JUMP to start of buffer' to the buffer risc program 
  buffer_prepare
  Set the ancillary information into the buffer structure.  This
  includes generating the necessary risc program if it hasn't already
  been done for the current buffer format.
  The structure fh contains the details of the format requested by the
  user - type, width, height and #fields.  This is compared with the
  last format set for the current buffer.  If they differ, the risc
  code (which controls the filling of the buffer) is (re-)generated.
 Stop risc & fifo 
 ------------------------------------------------------------------ 
 ------------------------------------------------------------------ 
  Note that this routine returns what is stored in the fh structure, and
  does not interrogate any of the device registers.
  Note that tw68_s_fmt_vid_cap sets the information into the fh structure,
  and it will be used for all future new buffers.  However, there could be
  some number of buffers on the "active" chain which will be filled before
  the change takes place.
 If the query is for the current input, get live data 
 Look for match on complete norm id (may have mult bits) 
 If no exact match, look for norm which contains this one 
 If still not matched, give up 
 do the actual setting 
  Used strictly for internal development and debugging, this routine
  prints out the current register contents for the tw68xx device.
 First we do the PCI regs, 8 4-byte regs per line 
 j steps through the next 4 words 
 Next the control regs, which are single-byte, address mod 4 
 Print out 4 groups of 4 bytes 
 ------------------------------------------------------------------ 
 exported stuff                                                     
 NTSC only 
  tw68_irq_video_done
 reset interrupts handled by this routine 
	
	  Check most likely first
	 
	  DMAPI shows we have reached the end of the risc code
	  for the current buffer.
	
	  On TW6800, FDMIS is apparently generated if video input is switched
	  during operation.  Therefore, it is not enabled for that chip.
 probably a logic error 
 SPDX-License-Identifier: GPL-2.0-or-later
   tw68-core.c
   Core functions for the Techwell 68xx driver
   Much of this code is derived from the cx88 and sa7134 drivers, which
   were in turn derived from the bt87x driver.  The original work was by
   Gerd Knorr; more recently the code was enhanced by Mauro Carvalho Chehab,
   Hans Verkuil, Andy Walls and many others.  Their work is gratefully
   acknowledged.  Full credit goes to them - any problems within this code
   are mine.
   Copyright (C) 2009  William M. Brack
   Refactored and updated to the latest v4l core frameworks:
   Copyright (C) 2014 Hans Verkuil <hverkuil@xs4all.nl>
 ------------------------------------------------------------------ 
  Please add any new PCI IDs to: https:pci-ids.ucw.cz.  This keeps
  the PCI ID database up to date.  Note that the entries must be
  added under vendor 0x1797 (Techwell Inc.) as subsystem IDs.
 ------------------------------------------------------------------ 
  The device is given a "soft reset". According to the specifications,
  after this "all register content remain unchanged", so we also write
  to all specified registers manually as well (mostly to manufacturer's
  specified reset values)
 Assure all interrupts are disabled 
 020 
 Clear any pending interrupts 
 01C 
 Stop risc processor, set default buffer level 
 218	soft reset 
 208	mux0, 27mhz xtal 
 20C	analog line-lock 
 210	color-killer high sens 
 218	int vref #2, chroma adc off 
 21C	Hactive m.s. bits 
 220	Mfg specified reset value 
	tw_writeb(TW68_CNTRL1, 0xcd);	 230	Wide Chroma BPF BW
					 	Secam reduction, Adap comb for
 234 
 238 
 23c 
 240 
 244 
 248 
 24C 
 250 
 254 
 TODO - Check that none of these are set by control defaults 
 258	Mfg specified reset val 
 25C	Sharpness Coring val 8 
 260	CTI and Vert Peak coring 
 268	No power saving enabled 
 270	Enable shadow reg, auto-det 
 274	All stds recog, don't start 
 280	Clamp end at 40 sys clocks 
 284	Mfg specified reset val 
 288	AGC gain when loop disabled 
 28C	White peak threshold 
 290	Y channel clamp level 
	tw_writeb(TW68_SYNCT, 0x38);	
 294	Sync amplitude 
 298	Horiz sync, VCR detect sens 
 29C	Clamp pos from PLL sync 
 Bit DETV of VCNTL1 helps sync multi camschip board 
 2A0 
 2A4 
 2A8	Mfg specified reset val 
 2AC	Mfg specified reset val 
 2B0	Max positive luma delay 
 2B4	Mfg specified reset val 
 2B8	Mfg specified reset val 
 2BC	Enable colour killer 
 2C0 
 2CC	slice level auto, clamp med. 
	tw_writeb(TW68_IDCNTL, 0);	 2D0	Writing zero to this register
					 	selects NTSC ID detection,
					 	but doesn't change the
					 	sensitivity (which has a reset
					 	value of 1E).  Since we are
					 	not doing auto-detection, it
 2D4 
 010 
 040	Enable both even & odd flds 
 patch set had 0x2080 
 02C 
	
	  Some common boards, especially inexpensive single-chip models,
	  use the GPIO bits 0-3 to control an on-board video-output mux.
	  For these boards, we need to set up the GPIO register into
	  "normal" mode, set bits 0-3 as output, and then set those bits
	  zero.
	 
	  Eventually, it would be nice if we could identify these boards
	  uniquely, and only do this initialisation if the board has been
	  identify.  For the moment, however, it shouldn't hurt anything
	  to do these steps.
 Set the GPIO to "normal", no ints 
 Set bits 0-3 to "output" 
 Set all bits to low state 
 Initialize the device control structures 
 Initialize any subsystems 
 Check if anything to do 
 Nope - return 
 video interrupt 
 pci init 
 print pci info 
 TW6800 
 Video decoder for TW6802 
 Video decoder for TW6804 
 To be announced 
 get mmio 
 initialize hardware #1 
 Then do any initialisation wanted before interrupts are on 
 get irq 
	
	   Now do remainder of initialisation, first for
	   things unique for this card, then for general board
 initialise video function first 
 shutdown subsystems 
 unregister 
 release resources 
	 Do things that are done in tw68_initdev ,
resume unfinished buffer(s)
 ----------------------------------------------------------- 
 SPDX-License-Identifier: GPL-2.0-or-later
  handle saa7134 IR remotes via linux kernel input layer.
 Choose Pinnacle PCTV remote 
 Helper function for raw decoding at GPIO16 or GPIO18 
 -------------------- GPIO generic keycode builder -------------------- 
 here comes the additional handshake steps for some cards 
 rising SAA7134_GPIO_GPRESCAN reads the status 
 IRQ driven mode - handle key press and release in one go 
 --------------------- Chip specific I2C key builders ----------------- 
 We need this to access GPI Used by the saa_readl macro. 
 rising SAA7134_GPIGPRESCAN reads the status 
 No button press 
 poll IR chip 
 weak up the IR chip 
			
			  wait a bit for next attempt -
			  I don't know how make it better
 <dev> is needed to access GPIO. Used by the saa_readl macro. 
 rising SAA7134_GPIO_GPRESCAN reads the status 
	 GPIO&0x40 is pulsed low when a button is pressed. Don't do
 No button press 
 GPIO says there is a button press. Get it. 
 No button press 
 Button pressed 
 copied and modified from get_key_msi_tvanywhere_plus() 
 <dev> is needed to access GPIO. Used by the saa_readl macro. 
 rising SAA7134_GPIO_GPRESCAN reads the status 
	 GPIO&0x100 is pulsed low when a button is pressed. Don't do
 No button press 
 GPIO says there is a button press. Get it. 
 No button press 
 Button pressed 
 poll IR chip 
 no button press 
 repeating 
 rising SAA7134_GPIO_GPRESCAN reads the status 
 No button press 
 Common (grey or coloured) pinnacle PCTV remote handling
 poll IR chip 
 Empty Request 
 Repeating... 
	 drop special codes when a key is held down a long time for the grey controller
 The grey pinnacle PCTV remote
   There are one issue with this remote:
    - I2c packet does not change when the same key is pressed quickly. The workaround
      is to hold down each key for about half a second, so that another code is generated
      in the i2c packet, and the function can distinguish key presses.
  Sylvain Pasche <sylvain.pasche@gmail.com>
 The new pinnacle PCTV remote (with the colored buttons)
  Ricardo Cerqueira <v4l@cerqueira.org>
	 code_modulo parameter (0x88) is used to reduce code value to fit inside IR_KEYTAB_SIZE
	 
	  this is the only value that results in 42 unique
	  codes < 128
	 Moved here from saa7134_input_init1() because the latter
 Without this we won't receive key up events 
 Without this we won't receive key up events 
 Without this we won't receive key up events 
 detect & configure 
 ms
 ms
 ms
 GPIO stuff moved to saa7134_ir_open() 
 Enable GPIO18 line on both edges 
 ms
 GPIO stuff moved to saa7134_ir_open() 
 ms 
 GPIO stuff moved to saa7134_ir_open() 
 ms
 ms 
 ms 
 ms
 ms
 ms 
 GPIO stuff moved to saa7134_ir_open() 
 ms
 ms
 Enable GPIO18 line on both edges 
 ms
 Enable GPIO18 line on both edges 
ms
 ms 
 ms 
 ms 
 ms 
 Enable GPIO18 line on both edges 
 Enable GPIO18 line on both edges 
 init hardware-specific stuff 
 init input device 
		
		  MSI TV@nyware Plus requires more frequent polling
		  otherwise it will miss some keypresses
		 MSI TV@nywhere Plus controller doesn't seem to
		   respond to probes unless we read something from
		   an existing device. Weird...
		
		  MSI TV@nyware Plus requires more frequent polling
		  otherwise it will miss some keypresses
		
		  MSI TV@nywhere Plus controller doesn't seem to
		   respond to probes unless we read something from
		   an existing device. Weird...
		  REVISIT: might no longer be needed
 copied and modified from MSI TV@nywhere Plus 
		 MSI TV@nywhere Plus controller doesn't seem to
		   respond to probes unless we read something from
		   an existing device. Weird...
 Generate initial event 
 SPDX-License-Identifier: GPL-2.0-or-later
  (c) 2004 Gerd Knorr <kraxel@bytesex.org> [SuSE Labs]
   Extended 3  2005 by Hartmut Hackmann to support various
   cards with the tda10046 DVB-T channel decoder
 FIXME 
 ------------------------------------------------------------------
  mt352 based DVB-T cards
 set frequency (mt2050) 
 mt352 setup 
 Use tuner callback for AGC 
 ==================================================================
  tda1004x based DVB-T cards, helper functions
 ------------------------------------------------------------------
  these tuners are tu1216, td1316(a)
 determine charge pump 
 determine band 
 setup PLL filter 
	 calculate divisor
	  ((36166000+((10000006)2)) + Finput)(10000006)
 setup tuner buffer 
 setup PLL configuration 
 ------------------------------------------------------------------ 
 ------------------------------------------------------------------ 
 setup PLL configuration 
 switch the tuner to analog mode 
 ------------------------------------------------------------------ 
 switch the board to analog mode 
 ------------------------------------------------------------------
  tda 1004x based cards with philips silicon tuner
 Get the first frontend 
 ------------------------------------------------------------------ 
 ------------------------------------------------------------------ 
 ------------------------------------------------------------------
  special case: this card uses saa713x GPIO22 for the mode switch
 route TDA8275a AGC input to the channel decoder 
 route TDA8275a AGC input to the analog IF chip
 ==================================================================
  tda10086 based DVB-S cards, helper functions
 ------------------------------------------------------------------
  special case: lnb supply is connected to the gated i2c
 NOTE: this assumes that gpo1 is used, it might be bit 5 (gpo2) 
 ==================================================================
  nxt200x based ATSC cards, helper functions
 ------------------------------------------------------------------ 
 30.4 MHz 
 4.00 MHz 
 2.0 Vpp 
 Use tuner callback for AGC 
 Use tuner callback for AGC 
 ==================================================================
  Core code
 FIXME: add support for multi-frontend 
 init struct vb2_dvb 
			
			  The TV tuner on this board is actually NOT
			  behind the demod i2c gate.
			  However, the demod EEPROM is indeed there and it
			  conflicts with the SAA7134 chip config EEPROM
			  if the i2c gate is open (since they have same
			  bus addresses) resulting in card PCI SVID  SSID
			  being garbage after a reboot from time to time.
			 
			  Let's just leave the gate permanently closed -
			  saa7134_i2c_eeprom_md7134_gate() will close it for
			  us at probe time if it was open for some reason.
 terrestrial 
 satellite 
 terrestrial 
 satellite 
 we need to open the i2c gate (we know it exists) 
						 fire up the 2nd section of the LNB supply since
 Switch to digital mode 
 we need to open the i2c gate (we know it exists) 
 terrestrial 
 satellite 
 terrestrial 
 satellite 
 Zarlink ZL10313 
 Switch to digital mode 
 mb86a20s need to use the I2C gateway 
 Enable all DVB-S devices now 
 CE5039 DVB-S tuner SLEEP pin low 
 CE6313 DVB-S demod SLEEP pin low 
 CE6313 DVB-S demod RESET# pin high 
 define general-purpose callback pointer 
 register everything else 
	 this sequence is necessary to make the tda1004x load its firmware
	  and to enter analog mode of hybrid boards
 Get the first frontend 
	 FIXME: I suspect that this code is bogus, since the entry for
	   Pinnacle 300I DVB-T PAL already defines the proper init to allow
	   the detection of mt2032 (TDA9887_PORT2_INACTIVE)
 otherwise we don't detect the tuner on next insmod 
 turn off the 2nd lnb supply 
 SPDX-License-Identifier: GPL-2.0-or-later
  device driver for philips saa7134 based TV cards
  card-specific stuff.
  (c) 2001-04 Gerd Knorr <kraxel@bytesex.org> [SuSE Labs]
 Input names 
 ------------------------------------------------------------------ 
 board config info                                                  
 If radio_type !=UNSET, radio_addr should be specified
 me 
 "Marco d'Itri" <md@Linux.IT> 
 "TC Wan" <tcwan@cs.usm.my> 
 "Arnaud Quette" <aquette@free.fr> 
 LifeView FlyTV Platinum FM (LR214WF) 
 "Peter Missel <peter.missel@onlinehome.de> 
 Set GP16 and unused 15,14,13 to Output 
 GP16=1 selects TV input 
			.type = SAA7134_INPUT_TV_MONO,
			.vmux = 1,
			.amux = LINE2,
			.gpio = 0x0000,
		},{
			.gpio = 0x4000,         
			.gpio = 0x4000,         
			.gpio = 0x4000,         
 GP16=0 selects FM radio antenna 
 RoverMedia TV Link Pro FM (LR138 REV:I) 
 Eugene Yudin <Eugene.Yudin@gmail.com> 
 TCL MFPE05 2 
 "Gert Vervoort" <gert.vervoort@philips.com> 
 "K.Ohta" <alpha292@bremen.or.jp> 
 workaround for problems with normal TV sound 
 Typhoon TV Tuner RDS: Art.Nr. 50694 
 was: 0x00200000, 
 workaround for problems with normal TV sound 
 aka Typhoon "TV+Radio", Art.Nr 90031 
 Tom Zoerner <tomzo at users sourceforge net> 
 "lilicheng" <llc@linuxfans.org> 
 "Andrew de Quincey" <adq@lidskialf.net> 
 radio and probably mute is missing 
		
		gpio pins:
			0  .. 3   BASE_ID
			4  .. 7   PROTECT_ID
			8  .. 11  USER_OUT
			12 .. 13  USER_IN
			14 .. 15  VIDIN_SEL
 "Greg Wickham <greg.wickham@grangenet.net> 
		 probably wrong, the 7133 one is the NTSC version ...
 Ognjen Nastic <ognjen@logosoft.ba> 
 Ognjen Nastic <ognjen@logosoft.ba> UNTESTED 
 TransGear 3000TV 
 xtal 32.1 MHz 
 Barry Scott <barry.scott@onelan.co.uk> 
 Roman Pszonczenko <romka@kolos.math.uni.lodz.pl> 
 Michael Smith <msmith@cbnco.com> 
 Massimo Piccioni <dafastidio@libero.it> 
 toshii@netbsd.org 
 Vasiliy Temnikov <vaka@newmail.ru> 
 Norman Jonas <normanjonas@arcor.de> 
 Alain St-Denis <alain@topaze.homeip.net> 
 Michael Rodriguez-Torrent <mrtorrent@asu.edu> 
 Helge Jensen <helge.jensen@slog.dk> 
 "Matteo Az" <matte.az@nospam.libero.it> ;-) 
		
		Nickolay V. Shmyrev <nshmyrev@yandex.ru>
		Lots of thanks to Andrey Zolotarev <zolotarev_andrey@mail.ru>
 .gpiomask       = 0x8c240003, 
 Kees.Blom@cwi.nl 
 Oldrich Jedlicka <oldium.pro@seznam.cz> 
 Dylan Walkden <dylan_walkden@hotmail.com> 
 andreas.kretschmer@web.de 
		 much like the "studio" version but without radio
 LifeView FlyDVB-T DUO 
 "Nico Sabbi <nsabbi@tiscali.it>  Hartmut Hackmann hartmut.hackmann@t-online.de
 GPIO21=High for TV input 
 GPIO21=Low for FM radio antenna 
		
		Davydov Vladimir <vladimir@iqmedia.com>
 gpio by DScaler 
 GPIO21=High for TV input 
 GPIO21=Low for FM radio antenna 
		
		FIXME:
		- Remote control doesn't initialize properly.
		- Audio volume starts muted,
		then gradually increases after channel change.
		- Overlay scaling problems (application error?)
		- Composite S-Video untested.
		From: Konrad Rzepecki <hannibal@megapolis.pl>
 gpio by DScaler 
 radio unconfirmed 
 Kworld V-Stream Studio TV Terminator 
 "James Webb <jrwebb@qwest.net> 
		 FIXME:
		  S-Video and composite sources untested.
		  Radio not working.
		  Remote control not yet implemented.
tuner.beholder.ru>, Sergey <skiv@orel.ru> 
       Beholder Intl. Ltd. 2008      
Dmitry Belimov <d.belimov@gmail.com> 
 Mike Baikov <mike@baikov.com> 
 Andrey Cvetcov <ays14@yandex.ru> 
		 Michael Krufky <mkrufky@linuxtv.org>
		  Uses Alps Electric TDHU2, containing NXT2004 ATSC Decoder
		  AFAIK, there is no analog demod, thus,
		  no support for analog television.
 Paul Tom Zalac <pzalac@gmail.com> 
 Pavel Mihaylov <bin@bash.info> 
 SednaMuchTV (OEM) Cardbus TV Tuner 
 "Cyril Lacoux (Yack)" <clacoux@ifeelgood.org> 
 unconfirmed, taken from Philips driver 
 untested 
		 remote-control does not work. The signal about a
		   key press comes in via gpio, but the key code
		   doesn't. Neither does it have an i2c remote control
 NOT tested 
 LifeView LR319 FlyDVB Trio 
 Peter Missel <peter.missel@onlinehome.de> 
 Analog broadcastcable TV 
 GPIO21=High for TV input 
 GPIO21=Low for FM radio antenna 
 LifeView FlyDVB-T 
 Giampiero Giancipoli <gianci@libero.it> 
 Bit 21 0=Radio, Bit 22 0=TV 
 AVerMedia A169  
 Rickard Osser <ricky@osser.se>  
		 This card has two saa7134 chips on it,
 AVerMedia A169 
 Rickard Osser <ricky@osser.se> 
 9 is correct as S-VIDEO1 according to a169.inf! 
 The second saa7134 on this card only serves as DVB-S host bridge 
 Bit 21 0=Radio, Bit 22 0=TV 
 GPIO21=High for TV input 
 GPIO21=Low for FM radio antenna 
 "Zac Bowling" <zac@zacbowling.com> 
 LifeView FlyDVB-s 
 Igor M. Liplianin <liplianin@tut.by> 
 Petr Baudis <pasky@ucw.cz> 
 untested 
 untested 
 Mikhail Fedotov <mo_fedotov@mail.ru> 
 Francis Barber <fedora@barber-family.id.au> 
 Thomas Genty <tomlohave@gmail.com> 
 David Bentham <db260179@hotmail.com> 
 GPIO 21 is an INPUT 
 GPIO 23 HI for FM 
 GPIO 21 is an INPUT 
 GPIO 23 HI for FM 
	 Steven Walter <stevenrwalter@gmail.com>
			.gpio = 0x00300001,
	Juan Pablo Sormani <sorman@gmail.com> 
 Tony Wan <aloha_cn@hotmail.com> 
 FIXME: analog tv untested 
       Beholder Intl. Ltd. 2008      
Dmitry Belimov <d.belimov@gmail.com> 
       Beholder Intl. Ltd. 2008      
Dmitry Belimov <d.belimov@gmail.com> 
       Beholder Intl. Ltd. 2008      
Dmitry Belimov <d.belimov@gmail.com> 
       Beholder Intl. Ltd. 2008      
Dmitry Belimov <d.belimov@gmail.com> 
 Sergey <skiv@orel.ru> 
       Beholder Intl. Ltd. 2008      
Dmitry Belimov <d.belimov@gmail.com> 
       Beholder Intl. Ltd. 2008      
Dmitry Belimov <d.belimov@gmail.com> 
       Beholder Intl. Ltd. 2008      
Dmitry Belimov <d.belimov@gmail.com> 
       Beholder Intl. Ltd. 2008      
Dmitry Belimov <d.belimov@gmail.com> 
       Beholder Intl. Ltd. 2008      
Dmitry Belimov <d.belimov@gmail.com> 
       Beholder Intl. Ltd. 2008      
Dmitry Belimov <d.belimov@gmail.com> 
       Beholder Intl. Ltd. 2008      
Dmitry Belimov <d.belimov@gmail.com> 
       Beholder Intl. Ltd. 2008      
Dmitry Belimov <d.belimov@gmail.com> 
       Beholder Intl. Ltd. 2008      
Dmitry Belimov <d.belimov@gmail.com> 
       Beholder Intl. Ltd. 2008      
 Dmitry Belimov <d.belimov@gmail.com> 
 Andrey Melnikoff <temnota@kmv.ru> 
 Andrey Melnikoff <temnota@kmv.ru> 
 Andrey Melnikoff <temnota@kmv.ru> 
 Andrey Melnikoff <temnota@kmv.ru> 
 Andrey Melnikoff <temnota@kmv.ru> 
 Andrey Melnikoff <temnota@kmv.ru> 
 Andrey Melnikoff <temnota@kmv.ru> 
 Andrey Melnikoff <temnota@kmv.ru> 
 Igor Kuznetsov <igk@igk.ru> 
 Andrey Melnikoff <temnota@kmv.ru> 
 Beholder Intl. Ltd. Dmitry Belimov <d.belimov@gmail.com> 
 Alexey Osipov <lion-simba@pridelands.ru> 
 Igor Kuznetsov <igk@igk.ru> 
 Andrey Melnikoff <temnota@kmv.ru> 
 Beholder Intl. Ltd. Dmitry Belimov <d.belimov@gmail.com> 
 Igor Kuznetsov <igk@igk.ru> 
 Andrey Melnikoff <temnota@kmv.ru> 
 Beholder Intl. Ltd. Dmitry Belimov <d.belimov@gmail.com> 
 Alexey Osipov <lion-simba@pridelands.ru> 
 untested 
 Adrian Pardini <pardo.bsso@gmail.com> 
 John Newbigin <jn@it.swin.edu.au> 
 Matthias Schwarzott <zzam@gentoo.org> 
 Matthias Schwarzott <zzam@gentoo.org> 
 Igor Kuznetsov <igk@igk.ru> 
 FIXME 
 .gpiomask       = 0x8c240003, 
 Andy Shevchenko <andy@smile.org.ua> 
 Should be MK5 
 Jan D. Louw <jd.louw@mweb.co.za 
 Not tested 
 Beholder Intl. Ltd. Dmitry Belimov <d.belimov@gmail.com> 
 untested 
       Beholder Intl. Ltd. 2008      
Dmitry Belimov <d.belimov@gmail.com> 
 Hawell HW-404M7 & Hawell HW-808M7  
 Bogoslovskiy Viktor <bogovic@bk.ru> 
 Beholder Intl. Ltd. Dmitry Belimov <d.belimov@gmail.com> 
 Beholder Intl. Ltd. Dmitry Belimov <d.belimov@gmail.com> 
 Pavel Osnova <pvosnova@gmail.com> 
 Timothy Lee <timothy.lee@siriushk.com> 
       Beholder Intl. Ltd. 2010       
 Dmitry Belimov <d.belimov@gmail.com> 
       Beholder Intl. Ltd. 2010       
 Dmitry Belimov <d.belimov@gmail.com> 
 Hawell HW-9004V1 
 Vadim Frolov <fralik@gmail.com> 
		 much like the "studio" version but without radio
 ------------------------------------------------------------------ 
 PCI ids + subsystem IDs                                            
 "Typhoon PCI Capture TV Card" Art.No. 50673 
 Typhoon 
 LifeView FlyTV Prime30 OEM 
 minipci, LR212 
 minipci, LR1212 
 OEM minipci, LR212 
 Animation Technologies (LifeView) 
 Standard PCI, LR214 Rev E and earlier (SAA7135) 
 Animation Technologies (LifeView) 
 Standard PCI, LR214 Rev F onwards (SAA7131) 
 KYE 
 Genius VideoWonder ProTV 
 is an LR214WF actually 
 CTX946 analog TV, HW mpeg, DVB-T 
 only analog TV and DVB-T for now 
 Avermedia Technologies Inc 
 Avermedia Technologies Inc 
 Avermedia Technologies Inc 
 Avermedia Technologies Inc 
 Avermedia Technologies Inc 
 Avermedia Technologies Inc 
 Avermedia Technologies Inc 
 AVerMedia CardBus 
 Avermedia Technologies Inc 
 AVerMedia CardBus 
 Avermedia Technologies Inc 
 TransGear 3000TV 
 Avermedia Technologies Inc 
 Avermedia Technologies Inc 
 Avermedia Technologies Inc 
 Cardbus version 
 PCI version 
 Avermedia Technologies Inc 
 Avermedia Technologies Inc 
 Avermedia Technologies Inc 
 Avermedia Technologies Inc 
 PCI version 
 PCI version, new revision 
 cardbus version 
 cardbus version 
 Typhoon 
 LifeView LR502 OEM 
 mini pci NTSC version 
 mini pci PALSECAM version 
 It shouldn't break anything, since subdevice id seems unique 
 GoTView 
 tda8275a, ks003 IR 
 tda8275, ks003 IR 
 SAA 7131E 
 SAA7135HL 
 SAA7135HL 
 ATSC 115 
 SAA7135HL 
 LR300 
 Animation Technologies (LifeView) 
 what's the difference to 0x3306 ?
 FlyDVB-T Hybrid Mini PCI 
 triple CTX948_V1.1.1 
 Cardbus version 
 Philips Proteus PRO 2309 
 Avermedia Technologies Inc 
 Avermedia Technologies Inc 
 Avermedia Technologies Inc 
 MSI 
 TV@nywhere DUO 
 REV:1.00 
 SinoVideo PCI 2309 Proteus (7134) 
 OEM cardbus 
 Avermedia Technologies Inc 
 AVerTV DVB-T Super 007 
Twinhan Technology Co. Ltd
 Medion version CTX953_V.1.4.3 
 MSI 
 TV@nywhere AD v1.1 
 Avermedia Technologies Inc 
 Avermedia Technologies Inc 
 Avermedia Technologies Inc 
 SAA7135HL 
 Avermedia Technologies Inc 
 Avermedia Technologies Inc 
 REV:1.02G 
 Avermedia Technologies Inc 
 Beholder Intl. Ltd. 
 RoverMedia 
 LifeView FlyTV Prime30 OEM 
 Beholder Intl. Ltd. 
 Beholder Intl. Ltd. 
 Avermedia Technologies Inc 
 AverTV Satellite Hybrid+FM A706 
 WIS 
 Avermedia Technologies Inc 
 V One Multimedia PTE Ltd 
 --- boards without eeprom + subsystem ID --- 
 --- default catch --- 
 --- end of list --- 
 ----------------------------------------------------------- 
 flyvideo tweaks                                             
 Down and UP pheripherial RESET pin for reset all chips 
 switch LNA gain through GPIO 22
 vsync output at GPIO22. 50  60Hz 
 toggle AGC switch through GPIO 26 
 toggle AGC switch through GPIO 27 
 0 
 tda8290 + tda18271 
 tda8290 + tda827x 
 ----------------------------------------------------------- 
 Make sure we support the board model 
 WinTV-HVR1110 (Retail, IR Blaster, hybrid, FM, SVidComp, 3.5mm audio in) 
 WinTV-HVR1000 (Retail, IR Receive, analog, no FM, SVidComp, 3.5mm audio in) 
 WinTV-HVR1150 (Retail, IR Receive, hybrid, FM, SVidComp, 3.5mm audio in) 
 WinTV-HVR1000 (Retail, IR Receive, analog, no FM, SVidComp, 3.5mm audio in) 
 WinTV-HVR1110 (Retail, IR Receive, hybrid, FM, SVidComp, 3.5mm audio in) 
 WinTV-HVR1110 (OEM, no IR, hybrid, FM, SVidComp, RCA aud) 
 WinTV-HVR1110 (OEM, no IR, hybrid, FM) 
 WinTV-HVR1110 (OEM, no IR, hybrid, no FM) 
 WinTV-HVR1110 (OEM, no IR, hybrid, no FM, SVidComp, RCA aud) 
 WinTV-HVR1110 (OEM, no IR, hybrid, no FM, SVidComp, RCA aud) 
 WinTV-HVR1150 (OEM, no IR, hybrid, FM, SVidComp, RCA aud) 
 WinTV-HVR1110 (OEM, no IR, hybrid, FM, SVidComp, RCA aud) 
 ----------------------------------------------------------- 
 Always print gpio, often manufacturers encode tuner type and other info. 
      case SAA7134_BOARD_SABRENT_SBTTVFM:   
 power-up tuner chip 
 this turns the remote control chip off to work around a bug in it 
 power-up tuner chip 
 turn the fan on 
 power-down tuner chip 
 power-up tuner chip 
 power-down tuner chip 
 power-down tuner chip 
 power-up tuner chip 
 remote via GPIO 
		
		  Make sure Production Test Register at offset 0x1D1 is cleared
		  to take chip out of test mode.  Clearing bit 4 (TST_EN_AOUT)
		  prevents pin 105 from remaining low; keeping pin 105 low
		  continually resets the SAA6752 chip.
 GPIO 26 high for digital, low for analog 
 i2c remotes 
 enable tuner 
 write windows gpio values 
 radio antenna select: tristate both as in Windows driver 
 TV antenna 
 FM antenna 
		
		  Disable CE5039 DVB-S tuner now (SLEEP pin high) to prevent
		  it from interfering with analog tuner detection
 enable LGS-8G75 
 enable the analog tuner 
 stuff which needs working i2c 
	 Put here the code that enables the chips that are needed
	   for analog mode and doesn't depend on the tuner attachment.
	   It is also a good idea to get tuner type from eeprom, etc before
	   initializing tuner, since we can avoid loading tuner driver
	   on devices that has TUNER_ABSENT
		 Checks if the device has a tuner at 0x60 addr
		   If the device doesn't have a tuner, TUNER_ABSENT
		   will be used at tuner_type, avoiding loading tuner
		   without needing it
		 Retrieve device data from eeprom, checking for the
		   proper tuner_type.
 old config structure 
 new config structure 
 The tuner TUNER_PHILIPS_FMD1216ME_MK3 after hardware    
 start has disabled IF and enabled DVB-T. When saa7134   
 scan I2C devices it will not detect IF tda9887 and can`t
 watch TV without software reboot. To solve this problem 
 switch the tuner to analog TV mode manually.            
 Reconfigure board as Snake reference design 
		 The Philips EUROPA based hybrid boards have the tuner
		   connected through the channel decoder. We have to make it
		   transparent to find it
 The card below is detected as card=53, but is different 
			
			  IR init has already happened for other cards, so
			  we have to catch up.
		 this is a hybrid board, initialize to analog mode
		  and configure firmware eeprom address
		
		  send weak up message to pic16C505 chip
		  @ LifeView FlyDVB Trio
 initialize analog mode  
 initialize analog mode 
		 The T200 and the T200A share the same pci id.  Consequently,
		  we are going to query eeprom to try to find out which one we
		 Don't do this if the board was specifically selected with an
 Reconfigure board  as T200A 
 The tuner TUNER_PHILIPS_FMD1216MEX_MK3 after hardware    
 start has disabled IF and enabled DVB-T. When saa7134    
 scan I2C devices it not detect IF tda9887 and can`t      
 watch TV without software reboot. For solve this problem 
 switch the tuner to analog TV mode manually.             
 switch() 
 initialize tuner (don't do this when resuming) 
		 Note: radio tuner address is always filled in,
 set TEA5767(analog FM) defines 
 switch() 
 SPDX-License-Identifier: GPL-2.0-or-later
  (c) 2004 Gerd Knorr <kraxel@bytesex.org> [SuSE Labs]
 ------------------------------------------------------------------ 
 ------------------------------------------------------------------ 
	 If more cards start to need this, then this
 Unmute audio 
 Mute audio 
 ------------------------------------------------------------------ 
 ----------------------------------------------------------- 
	
	  Do not add VB2_USERPTR: the saa7134 DMA engine cannot handle
	  transfers that do not start at the beginning of a page. A USERPTR
	  can start anywhere in a page, so USERPTR support is a no-go.
 SPDX-License-Identifier: GPL-2.0-or-later
  device driver for philips saa7134 based TV cards
  video4linux video interface
  (c) 2001,02 Gerd Knorr <kraxel@bytesex.org> [SuSE Labs]
 ------------------------------------------------------------------ 
 ------------------------------------------------------------------ 
 setup video scaler 
 ------------------------------------------------------------------ 
 DMA: setup channel 2+3 (= VBI Task A+B) 
 start DMA 
 ------------------------------------------------------------------ 
 nothing 
 make sure we have seen both fields 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2005-2006 Micronas USA Inc.
#define GO7007_HPI_DEBUG
 000b 
 001b 
 010b 
 011b 
 100b 
 101b 
 110b 
 111b 
 Driver for GPIO HPI interface 
 Write HPI address 
 Write low byte 
 Write high byte 
 Write HPI address 
 Read low byte 
 Read high byte 
 Disable TS interface 
pr_debug("status is %s\n", saa_readb(SAA7134_GPIO_GPSTATUS2) & 0x40 ? "OK" : "not OK"); 
 enter command mode...(?) 
pr_info("gpio is %08x\n", saa_readl(SAA7134_GPIO_GPSTATUS0 >> 2)); 
 Wait for an interrupt to indicate successful hardware reset 
 XXX we need to wait if there is no interrupt available 
 Set HPI interface for video 
 Enable TS interface 
 Reset TS interface 
 Set up transfer block size 
 Enable video streaming mode 
 Enable TS FIFO 
 Enable DMA IRQ 
 Shut down TS FIFO 
 Disable DMA IRQ 
 Disable TS interface 
 --------------------------------------------------------------------------
 --------------------------------------------------------------------------
 Addremove functions 
 Init the subdevice interface 
 Allocate a couple pages for receiving the compressed stream 
 Boot the GO7007 
	 Do any final GO7007 initialization, then register the
 Register the subdevice interface with the go7007 device 
 SPDX-License-Identifier: GPL-2.0-or-later
  device driver for philips saa7134 based TV cards
  video4linux video interface
  (c) 2001-03 Gerd Knorr <kraxel@bytesex.org> [SuSE Labs]
 ------------------------------------------------------------------ 
 0 
 ------------------------------------------------------------------ 
 Defines for Video Output Port Register at address 0x191            
 Bit 0: VIP code T bit polarity 
 ------------------------------------------------------------------ 
 Defines for Video Output Port Register at address 0x195            
 Bit 2: Video output clock delay control 
 Bit 1: Video output clock invert control 
 ------------------------------------------------------------------ 
 Defines for Video Output Port Register at address 0x196            
 Bits 2 to 0: VSYNC pin video vertical sync type 
 ------------------------------------------------------------------ 
 data structs for video                                             
 autodetect 
 ------------------------------------------------------------------ 
 setup cropping 
 svideo 
 switch on auto standard detection 
 setup video decoder 
	 Set the correct norm for the saa6752hs. This function
 XPSC XACL XC2_1 XDCG VPFY 
 LPI 
 ACM 
 setup video scaler 
 deinterlace y offsets 
 ------------------------------------------------------------------ 
 Sort into smallest position first order 
 setup window + clipping 
 dma: setup channel 1 (= Video Task B) 
 start dma 
  Media Controller helper functions
	
	  This will find the tuner that is connected into the decoder.
	  Technically, this is not 100% correct, as the device may be
	  using an analog input instead of the tuner. However, as we can't
	  do DVB streaming while the DMA engine is being used for V4L2,
	  this should be enough for the actual needs.
 ------------------------------------------------------------------ 
 planar 
 DMA: setup channel 0 (= Video Task A0) 
 interlaced 
 non-interlaced 
 DMA: setup channel 4+5 (= planar task A) 
 interlaced 
 non-interlaced 
 start DMA 
  move buffer to hardware queue
	
	  Planar video capture and TS share the same DMA channel,
	  so only one can be active at a time.
	 The SAA7134 has a 1K FIFO; the datasheet suggests that when
	  configured conservatively, there's 22 usec of buffering for video.
	  We therefore request a DMA latency of 20 usec, giving us 2 usec of
	  margin in case the FIFO is configured differently to the datasheet.
	  Unfortunately, I lack register-level documentation to check the
	  Linux FIFO setup and confirm the perfect value.
 ------------------------------------------------------------------ 
 ------------------------------------------------------------------ 
 switch to radio mode 
 switch to videovbi mode 
 turn off overlay 
 ts-capture will not work in planar mode, so turn it off Hac: 04.05
 ------------------------------------------------------------------ 
 VBI_LINE_LENGTH ;
 VBI_UNSYNC VBI_INTERLACED 
		 Don't change the std from the mpeg device
 RDCAP == 0 
 check args 
 ok, accept it 
 ----------------------------------------------------------- 
 exported stuff                                              
 sanitycheck insmod options 
	
	  Do not add VB2_USERPTR unless explicitly requested: the saa7134 DMA
	  engine cannot handle transfers that do not start at the beginning
	  of a page. A user-provided pointer can start anywhere in a page, so
	  USERPTR support is a no-go unless the application knows about these
	  limitations and has special support for this.
 Don't add VB2_USERPTR, see comment above 
 free stuff 
 enable video output 
 Configure videoport 
 Start videoport 
 init video hw 
 no video signal -> mute audio 
 wake up tvaudio audio carrier scan thread 
 make sure we have seen both fields 
 SPDX-License-Identifier: GPL-2.0-only
    SAA713x ALSA support for V4L
  Configuration macros
 defaults 
 Index 0-MAX 
 ID for this card 
  Main chip structure
  PCM structure
  saa7134 DMA audio stop
    Called when the capture device is released or the buffer overflows
    - Copied verbatim from saa7134-oss's dsp_dma_stop.
  saa7134 DMA audio start
    Called when preparing the capture device for use
    - Copied verbatim from saa7134-oss's dsp_dma_start.
  saa7134 audio DMA IRQ handler
    Called whenever we get an SAA7134_IRQ_REPORT_DONE_RA3 interrupt
    Handles shifting between the 2 buffers, manages the read counters,
   and notifies ALSA when periods elapse
    - Mostly copied from saa7134-oss's saa7134_irq_oss_done.
 odd 
 even 
 next block addr 
 update status & wake waiting readers 
  IRQ request handler
    Runs along with saa7134's IRQ handler, discards anything that isn't
    DMA sound
  ALSA capture trigger
    - One of the ALSA capture callbacks.
    Called whenever a capture is started or stopped. Must be defined,
    but there's nothing we want to do here
 start dma 
 stop dma 
  DMA buffer initialization
    Uses V4L functions to initialize the DMA. Shouldn't be necessary in
   ALSA, but I was unable to use ALSA's own DMA, and had to force the
   usage of V4L's
    - Copied verbatim from saa7134-oss.
  DMA buffer release
    Called after closing the device, during snd_card_saa7134_capture_close
  Setting the capture source and updating the ALSA controls
 The active capture source cannot be deactivated 
 adc 
 Demodulator 
 DACs 
 aux1, aux1 
 aux2, aux2 
 output xbar always main channel 
 We've got data, turn the input on 
  ALSA PCM preparation
    - One of the ALSA capture callbacks.
    Called right after the capture device is opened, this function configures
   the buffer using the previously defined functions, allocates the memory,
   sets up the hardware registers, and then starts the DMA. When this function
   returns, the audio should be flowing.
 dma: setup channel 6 (= AUDIO) 
 Setup and update the cardALSA controls 
  ALSA pointer fetching
    - One of the ALSA capture callbacks.
    Called whenever a period elapses, it must return the current hardware
   position of the buffer.
    Also resets the read counter used to prevent overruns
  ALSA hardware capabilities definition
   Report only 32kHz for ALSA:
   - SAA713335 uses DDEP (DemDec Easy Programming mode), which works in 32kHz
     only
   - SAA7134 for TV mode uses DemDec mode (32kHz)
   - Radio works in 32kHz only
   - When recording 48kHz from Line1Line2, switching of capture source to TV
     means
     switching to 32kHz without any frequency translation
  ALSA hardware params
    - One of the ALSA capture callbacks.
    Called on initialization, right before the PCM preparation
 release the old buffer 
	 I should be able to use runtime->dma_addr in the control
	   byte, but it doesn't work. So I allocate the DMA using the
  ALSA hardware release
    - One of the ALSA capture callbacks.
    Called after closing the device, but before snd_card_saa7134_capture_close
    It stops the DMA audio and releases the buffers.
  ALSA capture finish
    - One of the ALSA capture callbacks.
    Called after closing the device.
  ALSA capture start
    - One of the ALSA capture callbacks.
    Called when opening the device. It creates and populates the PCM
   structure
  page callback (needed for mmap)
  ALSA capture callbacks definition
  ALSA PCM setup
    Called when initializing the board. Sets up the name and hooks up
   the callbacks
  ALSA mixer setup
    Called when initializing the board. Sets up the name and hooks up
   the callbacks
  ALSA initialization
    Called by the init routine, once for each saa7134 device present,
   it creates the basic structures and registers the ALSA devices
 Card "creation" 
 End of "creation" 
  Module initializer
  Loops through present saa7134 cards, and assigns an ALSA device
  to each one
  Module destructor
 We initialize this late, to make sure the sound system is up and running 
 SPDX-License-Identifier: GPL-2.0-or-later
  device driver for philips saa7134 based TV cards
  driver core
  (c) 2001-03 Gerd Knorr <kraxel@bytesex.org> [SuSE Labs]
 ------------------------------------------------------------------ 
 rising SAA7134_GPIO_GPRESCAN reads the status 
 static value 
 turn sync mode off if necessary 
 tristate 
 ------------------------------------------------------------------ 
 ----------------------------------------------------------- 
 delayed request_module                                      
 CONFIG_MODULES 
 ------------------------------------------------------------------ 
 nr of (saa7134-)pages for the given buffer size 
 for non-page-aligned buffers 
 calc max # of buffers from size (must not exceed the 4MB virtual
 ------------------------------------------------------------------ 
 ------------------------------------------------------------------ 
 finish current buffer 
 activate next one from queue 
 nothing to do -- just stop DMA 
 try to reset the hardware (SWRST) 
	 flag current buffer as failed,
 also calls del_timer(&q->timeout) 
 ------------------------------------------------------------------ 
 video capture -- dma 0 + video task A 
 video capture -- dma 1+2 (planar modes) 
 screen overlay -- dma 0 + video task B 
 vbi capture -- dma 0 + vbi task A+B 
 audio capture -- dma 3 
 TS capture -- dma 5 
 set task conditions + field handling 
 default config -- use full frames 
 split fields between tasks 
 odd A, even B, repeat 
 odd B, even A, repeat 
 irqs 
 ------------------------------------------------------------------ 
 IRQ handler + helpers                                              
		 If dmasound support is active and we get a sound report,
		  mask out the report and let the saa7134-alsa module deal
 FIXME: invoke I2C get_key() 
 GPIO16 not used by IR remote 
 FIXME: invoke I2C get_key() 
 GPIO18 not used by IR remote 
 disable all parity error 
 disable gpio16 IRQ 
 disable gpio18 IRQs 
 disable all irqs 
 ------------------------------------------------------------------ 
 early init (no i2c, no irq) 
 RAM FIFO config 
 enable audio + video processing 
	
	 Initialize OSS _after_ enabling audio clock PLL and audio processing.
	 OSS initialization writes to registers via the audio DSP; these
	 writes will fail unless the audio clock has been started.  At worst,
	 audio will not work.
 enable peripheral devices 
 set vertical line numbering start (vbi needs this) 
 Clear any stale IRQ reports 
 late init (with i2c + irq) 
 enable IRQ's 
 Allow enabling both IRQ edge triggers 
 shutdown 
 Check if it is using an external analog TV demod 
	
	  saa713x is not using an external ATV demod.
	  Register the internal one
 Initialize Video, VBI and Radio pads 
 Create entities for each input connector 
 This input uses the S-Video connector 
			
			  SAA7134_INPUT_TV and SAA7134_INPUT_TV_MONO.
			 
			  Please notice that neither SAA7134_INPUT_MUTE or
			  SAA7134_INPUT_RADIO are defined at
			  saa7134_board.input.
 Create input for Radio RF connector 
 pci init 
 pci quirks 
 print pci info 
 board config 
 get mmio 
 initialize hardware #1 
 get irq 
 wait a bit, register i2c bus 
 load i2c helpers 
 check for signal 
 register v4l devices 
 everything worked 
	
	  Do it at the end, to reduce dynamic configuration changes during
	  the device init. Yet, as request_modules() can be async, the
	  topology will likely change after load the saa7134 subdrivers.
 Release DMA sound modules if present 
 debugging ... 
 disable peripheral devices 
 shutdown hardware 
 shutdown subsystems 
 unregister 
	 the DMA sound modules should be unloaded before reaching
 release resources 
 free memory 
 resends a current buffer in queue after resume 
 disable overlay - apps should enable it explicitly on resume
 Disable interrupts, DMA, and rest of the chip
	 ACK interrupts once more, just in case,
	 Disable timeout timers - if we have active buffers, we will
	 Do things that are done in saa7134_initdev ,
 saa7134_hwinit1 
saa7134_hwinit2
resume unfinished buffer(s)
	 FIXME: Disable DMA audio sound - temporary till proper support
 start DMA now
 ----------------------------------------------------------- 
 ----------------------------------------------------------- 
 ----------------------------------------------------------- 
 ----------------- for the DMA sound modules --------------- 
 SPDX-License-Identifier: GPL-2.0-or-later
  device driver for philips saa7134 based TV cards
  i2c interface support
  (c) 2001,02 Gerd Knorr <kraxel@bytesex.org> [SuSE Labs]
 ----------------------------------------------------------- 
 ----------------------------------------------------------- 
 no I2C command pending
 I2C command done and STOP executed
 executing I2C command
 executing I2C command, time out on clock stretching
 time out on arbitration trial, still trying
 I2C command done and awaiting next write command
 I2C command done and awaiting next read command
 see 5, and time out on status echo
 see 6, and time out on status echo
 no acknowledge on device slave address
 no acknowledge after data byte transfer
 bus error
 arbitration lost during transfer
 erroneous programming sequence
 wrong status echoing
 software error
 no operation on I2C bus
 stop condition, no associated byte transfer
 continue with byte transfer
 start condition with byte transfer
 have to write both attr + data in one 32bit word 
 100 kHz 
	dword |= 0x40 << 16;   400 kHz 
 send address 
				 workaround for a saa7134 i2c bug
				  needed to talk to the mt352 demux
 read bytes 
			 discard mysterious extra byte when reading
			   from Samsung S5H1411.  i2c bus gets error
 write bytes 
 ensure that the bus is idle for at least one bit slot 
 ----------------------------------------------------------- 
 ----------------------------------------------------------- 
  On Medion 7134 reading the SAA7134 chip config EEPROM needs DVB-T
  demod i2c gate closed due to an address clash between this EEPROM
  and the demod one.
 Instantiate the IR receiver device, if present 
 SPDX-License-Identifier: GPL-2.0-or-later
  device driver for philips saa7134 based TV cards
  tv audio decoder (fm stereo, nicam, ...)
  (c) 2001-03 Gerd Knorr <kraxel@bytesex.org> [SuSE Labs]
 ------------------------------------------------------------------ 
 msecs 
 ------------------------------------------------------------------ 
 saa7134 code                                                       
 ------------------------------------------------------------------ 
 look what is to do ... 
		
		  7130 - we'll mute using some unconnected audio input
		  7134 - we'll probably should switch external mux with gpio
 7134 mute 
 switch internal audio mux 
 for oss, we need to change the clock configuration
 switch gpio-connected external audio mux 
 not implemented (yet) 
 not implemented (yet) 
 No nicam detected 
 ch1  
 auto 
 ch1  
 ch2  
 auto 
 nothing to do ... 
 Not implemented 
 give the tuner some time 
 only one candidate -- skip scan ;) 
 scan for the main carrier 
 found good carrier 
 no carrier -- try last detected one as fallback 
 no carrier + no fallback -- use default 
 find the exact tv audio norm 
 Note: at least the primary carrier is right here 
 ------------------------------------------------------------------ 
 saa7133  saa7135 code                                             
 switch gpio-connected external audio mux 
 insmod option override 
 set IF frequency to 5.5 MHz 
 (let chip) scan for sound carrier 
 all 
 kick automatic standard detection 
 setup crossbars 
 ------------------------------------------------------------------ 
 common stuff + external entry points                               
 configure GPIO for out 
 Set I2S format (SONY) 
 Start I2S 
 enable I2S audio output for the mpeg encoder 
 init all audio registers 
 frame locked audio is mandatory for NICAM 
 start tvaudio thread 
 XXX: missing error handling here 
 anything else to undo? 
 shutdown tvaudio thread 
 LINE1 
 SPDX-License-Identifier: GPL-2.0-or-later
  device driver for philips saa7134 based TV cards
  video4linux video interface
  (c) 2001,02 Gerd Knorr <kraxel@bytesex.org> [SuSE Labs]
 ------------------------------------------------------------------ 
 ------------------------------------------------------------------ 
 start DMA 
	
	  Planar video capture and TS share the same DMA channel,
	  so only one can be active at a time.
 ----------------------------------------------------------- 
 exported stuff                                              
 deactivate TS softreset 
 TSSOP high active, TSVAL high active, TSLOCK ignored 
 TSNOPIT=0, TSCOLAP=0 
 sanitycheck insmod options 
 init TS hw 
 Function for stop TS 
 Stop TS stream 
 Function for start TS 
 dma: setup channel 5 (= TS) 
 TSNOPIT=0, TSCOLAP=0 
 reset hardware TS buffers 
 TS clock non-inverted 
 Start TS stream 
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (c) 2004 Evgeniy Polyakov <zbr@ioremap.net>
 Default is continual scan 
	
	  We are in process context(kernel thread), so can sleep.
	 1 for w1_process to decrement
	  1 for __w1_remove_master_device to decrement
  w1_add_master_device() - registers a new master device
  @master:	master bus device to register
 validate minimum functionality 
 Lock until the device is added (or not) to w1_masters. 
 Search for the first available id (starting at 1). 
 Thread cleanup code, not required currently. 
  w1_remove_master_device() - unregister a master device
  @bm:	master bus device to remove
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (c) 2004 Evgeniy Polyakov <zbr@ioremap.net>
  w1_touch_bit() - Generates a write-0 or write-1 cycle and samples the level.
  @dev:	the master device
  @bit:	0 - write a 0, 1 - write a 0 read the level
  w1_write_bit() - Generates a write-0 or write-1 cycle.
  @dev:	the master device
  @bit:	bit to write
  Only call if dev->bus_master->touch_bit is NULL
  w1_pre_write() - pre-write operations
  @dev:	the master device
  Pre-write operation, currently only supporting strong pullups.
  Program the hardware for a strong pullup, if one has been requested and
  the hardware supports it.
  w1_post_write() - post-write options
  @dev:	the master device
  Post-write operation, currently only supporting strong pullups.
  If a strong pullup was requested, clear it if the hardware supports
  them, or execute the delay otherwise, in either case clear the request.
  w1_write_8() - Writes 8 bits.
  @dev:	the master device
  @byte:	the byte to write
  w1_read_bit() - Generates a write-1 cycle and samples the level.
  @dev:	the master device
  Only call if dev->bus_master->touch_bit is NULL
 sample timing is critical here 
  w1_triplet() -  Does a triplet - used for searching ROM addresses.
  @dev:	the master device
  @bdir:	the bit to write if both id_bit and comp_bit are 0
  Return bits:
   bit 0 = id_bit
   bit 1 = comp_bit
   bit 2 = dir_taken
  If both bits 0 & 1 are set, the search should be restarted.
  Return:        bit fields - see above
 error 
 Both bits are valid, take the direction given 
 Only one bit is valid, take that direction 
  w1_read_8() - Reads 8 bits.
  @dev:	the master device
  Return:        the byte read
  w1_write_block() - Writes a series of bytes.
  @dev:	the master device
  @buf:	pointer to the data to write
  @len:	the number of bytes to write
 calls w1_pre_write 
  w1_touch_block() - Touches a series of bytes.
  @dev:	the master device
  @buf:	pointer to the data to write
  @len:	the number of bytes to write
  w1_read_block() - Reads a series of bytes.
  @dev:	the master device
  @buf:	pointer to the buffer to fill
  @len:	the number of bytes to read
  Return:	the number of bytes read
  w1_reset_bus() - Issues a reset bus sequence.
  @dev:	the master device
  Return:	0=Device present, 1=No device present or error
		 minimum 480, max ? us
		  be nice and sleep, except 18b20 spec lists 960us maximum,
		  so until we can sleep with microsecond accuracy, spin.
		  Feel free to come up with some other way to give up the
		  cpu for such a short amount of time AND get it back in
		  the maximum amount of time.
		 minimum 70 (above) + 430 = 500 us
		  There aren't any timing requirements between a reset and
		  the following transactions.  Sleeping is safe here.
 w1_delay(430); min required time 
  w1_reset_select_slave() - reset and select a slave
  @sl:		the slave to select
  Resets the bus and then selects the slave by sending either a skip rom
  or a rom match.  A skip rom is issued if there is only one device
  registered on the bus.
  The w1 master lock must be held.
  Return:	0=success, anything else=error
  w1_reset_resume_command() - resume instead of another match ROM
  @dev:	the master device
  When the workflow with a slave amongst many requires several
  successive commands a reset between each, this function is similar
  to doing a reset then a match ROM for the last matched ROM. The
  advantage being that the matched ROM step is skipped in favor of the
  resume command. The slave must support the command of course.
  If the bus has only one slave, traditionnaly the match ROM is skipped
  and a "SKIP ROM" is done for efficiency. On multi-slave busses, this
  doesn't work of course, but the resume command is the next best thing.
  The w1 master lock must be held.
  w1_next_pullup() - register for a strong pullup
  @dev:	the master device
  @delay:	time in milliseconds
  Put out a strong pull-up of the specified duration after the next write
  operation.  Not all hardware supports strong pullups.  Hardware that
  doesn't support strong pullups will sleep for the given time after the
  write operation without a strong pullup.  This is a one shot request for
  the next write, specifying zero will clear a previous request.
  The w1 master lock must be held.
  Return:	0=success, anything else=error
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (c) 2004 Evgeniy Polyakov <zbr@ioremap.net>
  w1_register_family() - register a device family driver
  @newf:	family to register
 check default devices against the new set of drivers 
  w1_unregister_family() - unregister a device family driver
  @fent:	family to unregister
 deatch devices using this family code 
  Should be called under w1_flock held.
  0  
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (c) 2004 Evgeniy Polyakov <zbr@ioremap.net>
 for crc quirk 
 A search stops when w1_max_slave_count devices have been found in that
  search.  The next search will start over and detect the same set of devices
  on a static 1-wire bus.  Memory is not allocated based on this number, just
  on the number of devices known to the kernel.  Having a high number does not
  consume additional resources.  As a special case, if there is only one
  device on the network and w1_max_slave_count is set to 1, the device id can
  be read directly skipping the normal slower search process.
 Default family 
  0  
 Only wake if it is going to be searching. 
 allow each time the max_slave_count is updated 
	 The CRC value isn't read from the user because the sysfs directory
	  doesn't include it and most messages from the bus search don't
	  print it either.  It would be unreasonable for the user to then
	  provide it.
 Searches the slaves in the w1_master and returns a pointer or NULL.
  Note: must not hold list_mutex
	 It would be nice to do a targeted search one the one-wire bus
	  for the new device to see if it is out there or not.  But the
	  current search doesn't support that.
 refcnt 0 means it was detached in the call 
 if the family driver needs to initialize something... 
 suppress for w1_family_notify before sending KOBJ_ADD 
 slave modules need to be loaded in a context with unlocked mutex 
 Only detach a slave once as it decreases the refcnt each time. 
			 If it is a new family, slaves with the default
			  family driver and are that family will be
			  connected.  If the family is going away, devices
			  matching that family are reconneced.
				 If it was already in use let the automatic
				  scan pick it up again later.
	 quirk:
	    DS28E04 (1w eeprom) has strapping pins to change
	    address, but will not update the crc. So normal rules
	    for consistent w1 addresses are violated. We test
	    with the 7 LSBs of the address forced high.
	 
	    (char)&rn_le = { family, addr_lsb, ..., addr_msb, crc }.
  w1_search() - Performs a ROM Search & registers any devices found.
  @dev: The master device to search
  @search_type: W1_SEARCH to search all devices, or W1_ALARM_SEARCH
  to return only devices in the alarmed state
  @cb: Function to call when a device is found
  The 1-wire search is a simple binary tree search.
  For each bit of the address, we read two bits and write one bit.
  The bit written will put to sleep all devies that don't match that bit.
  When the two reads differ, the direction choice is obvious.
  When both bits are 0, we must choose a path to take.
  When we can scan all 64 bits without having to choose a path, we are done.
  See "Application note 187 1-wire search algorithm" at www.maxim-ic.com
		
		  Reset bus and all 1-wire device state machines
		  so they can respond to our requests.
		 
		  Return 0 - device(s) present, 1 - no devices present.
 Do fast search on single slave bus 
 Start the search 
 Determine the directionsearch bit 
 took the 0 path last time, so take the 1 path 
 take the 0 path on the next branch 
 Read two bits and write one bit 
 quit if no device responded 
 If both directions were valid, and we took the 0 path... 
 extract the direction taken & update the device number 
			 Only max_slave_count will be scanned in a search,
			  but it will start where it left off next search
			  until all ids are identified and then it will start
			  over.  A continued search will report the previous
			  last id as the first id (provided it is still on the
			  bus).
  w1_process_callbacks() - execute each dev->async_list callback entry
  @dev: w1_master device
  The w1 master list_mutex must be held.
  Return: 1 if there were commands to executed 0 otherwise
 The list can be added to in another thread, loop until it is empty 
			 drop the lock, if it is a search it can take a long
	 As long as w1_timeout is only set by a module parameter the sleep
	  time can be calculated in jiffies once.
 remainder if it woke up early 
		 Note, w1_process_callback drops the lock while processing,
		  but locks it again before returning.
			 a wake up is either to stop the thread, process
			  callbacks, or search, it isn't process callbacks, so
			  schedule a search.
		 hold list_mutex until after interruptible to prevent loosing
		  the wakeup signal when async_cmd is added.
 Only sleep when the search is active. 
 For undoing the slave register if there was a step after it. 
 Set netlink removal messages and some cleanup 
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (c) 2003 Evgeniy Polyakov <zbr@ioremap.net>
 Bundle together everything required to process a request in one memory
  allocation.
 Sending process port ID 
 maximum value for first_cn->len 
 pointers to building up the reply message 
 fixed once the structure is populated 
 advances as cn_msg is appeneded 
 advances as w1_netlink_msg is appened 
 advances as cmds are appened 
 currently message being processed 
 copy of the original request follows 
	 followed by variable length:
	  cn_msg, data (w1_netlink_msg and w1_netlink_cmd)
	  one or more struct w1_cb_node
	  reply first_cn, data (w1_netlink_msg and w1_netlink_cmd)
 pointers within w1_cb_block and cn data 
  w1_reply_len() - calculate current reply length, compare to maxlen
  @block: block to calculate
  Calculates the current message length including possible multiple
  cn_msg and data, excludes the first sizeof(struct cn_msg).  Direclty
  compariable to maxlen and usable to send the message.
  w1_reply_make_space() - send message if needed to make space
  @block: block to make space on
  @space: how many bytes requested
  Verify there is enough room left for the caller to add "space" bytes to the
  message, if there isn't send the message and reset.
 Early send when replies aren't bundled. 
  w1_netlink_setup_msg() - prepare to write block->msg
  @block: block to operate on
  @ack: determines if cn can be reused
  block->cn will be setup with the correct ack, advancing if needed
  block->cn->len does not include space for block->msg
  block->msg advances but remains uninitialized
 advance or set to data 
 Append cmd to msg, include cmd->data as well.  This is because
  any following data goes with the command and in the case of a read is
  the results.
	 There's a status message sent after each command, so no point
	  in trying to bundle this cmd after an existing one, because
	  there won't be one.  Allocate and copy over a new cn_msg.
 Append req_msg and req_cmd, no other commands and no data from req_cmd are
  copied.
  w1_netlink_send_error() - sends the error message now
  @cn: original cn_msg
  @msg: original w1_netlink_msg
  @portid: where to send it
  @error: error status
  Use when a block isn't available to queue the message to and cn, msg
  might not be contiguous.
  w1_netlink_send() - sends w1 netlink notifications
  @dev: w1_master the even is associated with or for
  @msg: w1_netlink_msg message to be sent
  This are notifications generated from the kernel.
 Add cmd back if the packet was sent 
 update kernel slave list 
 Get the current slave list, or search (with or without alarm) 
	 drop bus_mutex for search (does it's own locking), and addremove
	  which doesn't use the bus
	 ref taken in w1_search_slave or w1_search_master_id when building
	  the block
			 Bytes, and likely an overstimate, and if it isn't
			  the results can still be split between packets.
 search incremented it 
	 If any unknown flag is set let the application know, that way
	  applications can detect the absence of features in kernels that
	  don't know about them.  http:lwn.netArticles587527
	 Count the number of master or slave commands there are to allocate
	  space for one cb_node each.
		 count messages for nodes and allocate any additional space
		  required for slave lists
 bundling duplicats some of the messages 
		 allocate space for the block, a copy of the original message,
		  one node per cmd to point into the original message,
		  space for replies which is the original message size plus
		  space for any list slave data and status messages
		  cn->len doesn't include itself which is part of the block
 block + original message 
 space for nodes 
 replies 
			 if the system is already out of memory,
			  (A) will this work, and (B) would it be better
			  to not try?
		 Sneeky, when not bundling, reply_size is the allocated space
		  required for the reply, cn_msg isn't part of maxlen so
		  it should be reply_size - sizeof(struct cn_msg), however
		  when checking if there is enough space, w1_reply_make_space
		  is called with the full message size including cn_msg,
		  because it isn't known at that time if an additional cn_msg
		  will need to be allocated.  So an extra cn_msg is added
		  above in "size".
 execute on this thread, no need to process later 
		 All following message types require additional data,
		  check here before references are taken.
 both search calls take references 
		 Can't queue because that modifies block and another
		  thread could be processing the messages by now and
		  there isn't a lock, send directly.
		
		  Let's allow requests for nonexisting devices.
 SPDX-License-Identifier: GPL-2.0-or-later
 	ds2490.c  USB to one wire bridge
  Copyright (c) 2004 Evgeniy Polyakov <zbr@ioremap.net>
 USB Standard 
 USB Control request vendor type 
 COMMAND TYPE CODES 
 CONTROL COMMAND CODES 
 MODE COMMAND CODES 
 COMMUNICATION COMMAND CODES 
 Communication command bits 
 Status flags 
 Strong Pull-up is active 
 12V programming pulse is being generated 
 external 12V programming voltage is present 
 DS2490 powered from USB and external sources 
 DS2490 is currently halted 
 DS2490 is currently idle 
 Status transfer size, 16 bytes status, 16 byte result flags 
 Result Register flags 
 New device detected 
 Reset no presence or ... 
 short on reset or set path 
 alarming presence on reset 
 12V expected not seen 
 compare error 
 CRC error detected 
 redirected page 
 end of search error 
	 Strong PullUp
	  0: pullup not active, else duration in milliseconds
	 spu_bit contains COMM_SPU or 0 depending on if the strong pullup
	  should be active or not for writes.
	 Always allow strong pullup which allow individual writes to use
	  the strong pullup.
 Chip strong pullup time was cleared. 
 lower 4 bits are 0, see ds_set_pullup 
	 Careful on size.  If size is less than what is available in
	  the input buffer, the device fails the bulk transfer and
	  clears the input buffer.  It could read the maximum size of
	  the data buffer, but then do you return the first, last, or
	  some set of the middle size bytes?  As long as the rest of
	  the code is correct there will be size bytes waiting.  A
	  call to ds_wait_status will wait until the device is idle
	  and any data to be received would have been available.
  0  
 Always dump the device status. 
	 Dump the status for errors or if there is extended return data.
	  The extended status includes new device detection (maybe someone
	  can do something with it).
	 Extended data isn't an error.  Well, a short is, but the dump
	  would have already told the user that and we can't do anything
	  about it in software anyway.
	 Other potentionally interesting flags for reset.
	 
	  COMM_NTF: Return result register feedback.  This could be used to
	  detect some conditions such as short, alarming presence, or
	  detect if a new device was detected.
	 
	  COMM_SE which allows SPEED_NORMAL, SPEED_FLEXIBLE, SPEED_OVERDRIVE:
	  Select the data transfer rate.
  0  
 Just storing delay would not get the trunication and roundup. 
 Enable spu_bit if a delay is set. 
	 If delay is zero, it has already been disabled, if the time is
	  the same as the hardware was last programmed to, there is also
	  nothing more to do.  Compare with the recalculated value ms
	  rather than del or delay which can have a different value.
	 Set COMM_ICP to write without a readback.  Note, this will
	  produce one time slot, a down followed by an up with COMM_D
	  only determing the timing.
	 When starting with an existing id, the first id returned will
	  be that device (if it is still on the bus most likely).
	 
	  If the number of devices found is less than or equal to the
	  search_limit, that number of IDs will be returned.  If there are
	  more, search_limit IDs will be returned followed by a non-zero
	  discrepency value.
	 DS18b20 spec, 13.16 ms per device, 75 per second, sleep for
	  discovering 8 devices (1 bulk transfer and 12 FIFO size) at a time.
	 FIFO 128 bytes, bulk packet size 64, read a multiple of the
	  packet size.
	
	  We are holding the bus mutex during the scan, but adding devices via the
	  callback needs the bus to be unlocked. So we queue up found ids here.
 address to start searching at 
			 Bulk in can receive partial ids, but when it does
			  they fail crc and will be discarded anyway.
			  That has only been seen when status in buffer
			  is 0 and bulk is read anyway, so don't read
			  bulk without first checking if status says there
			  is data to read.
				 can't know if there will be a discrepancy
 only continue the search if some weren't found 
		 Only max_slave_count will be scanned in a search,
		  but it will start where it left off next search
		  until all ids are identified and then it will start
		  over.  A continued search will report the previous
		  last id as the first id (provided it is still on the
		  bus).
 run callback for all queued up IDs 
  FIXME: if this disabled code is ever used in the future all ds_send_data()
  calls must be changed to use a DMAable buffer.
  0  
	 Reset the device as it can be in a bad state.
	  This is necessary because a block write will wait for data
	  to be placed in the output buffer and block any later
	  commands which will keep accumulating and the device will
	  not be idle.  Another case is removing the ds2490 module
	  while a bus search is in progress, somehow a few commands
	  get through, but the input transfers fail leaving data in
	  the input buffer.  This will cause the next read to fail
	  see the note in ds_recv_data.
	 read_bit and write_bit in w1_bus_master are expected to set and
	  sample the line level.  For write_bit that means it is expected to
	  set it to that value and leave it there.  ds2490 only supports an
	  individual time slot at the lowest level.  The requirement from
	  pulling the bus state down to reading the state is 15us, something
	  that isn't realistic on the USB bus anyway.
	dev->master.read_bit	= &ds9490r_read_bit;
	dev->master.write_bit	= &ds9490r_write_bit;
 alternative 3, 1ms interrupt (greatly speeds search), 64 byte bulk 
	
	  This loop doesn'd show control 0 endpoint,
	  so we will fill only 1-3 endpoints entry.
 SPDX-License-Identifier: GPL-2.0-only
  ds2482.c - provides i2c to w1-master bridge(s)
  Copyright (C) 2005  Ben Gardner <bgardner@wabtec.com>
  The DS2482 is a sensor chip made by Dallas Semiconductor (Maxim).
  It is a I2C to 1-wire bridge.
  There are two variations: -100 and -800, which have 1 or 8 1-wire ports.
  The complete datasheet can be obtained from MAXIM's website at:
    http:www.maxim-ic.comquick_view2.cfmqv_pk4382
  Allow the active pullup to be disabled, default is enabled.
  Note from the DS2482 datasheet:
  The APU bit controls whether an active pullup (controlled slew-rate
  transistor) or a passive pullup (Rwpu resistor) will be used to drive
  a 1-Wire line from low to high. When APU = 0, active pullup is disabled
  (resistor mode). Active Pullup should always be selected unless there is
  only a single slave on the 1-Wire line.
 extra configurations - e.g. 1WS 
  The DS2482 registers - there are 3 registers that are addressed by a read
  pointer. The read pointer is set by the last command executed.
  To read the data, issue a register read for any address
 No param 
 Param: DS2482_PTR_CODE_xxx 
 Param: Channel byte - DS2482-800 only 
 Param: Config byte 
 Param: None 
 Param: Bit byte (bit7) 
 Param: Data byte 
 Param: None 
 Note to read the byte, Set the ReadPtr to Data then read (any addr) 
 Param: Dir byte (bit7) 
 Values for DS2482_CMD_SET_READ_PTR 
 DS2482-800 only 
  Configure Register bit definitions
  The top 4 bits always read 0.
  To write, the top nibble must be the 1's compl. of the low nibble.
 1-wire speed 
 strong pull-up 
 presence pulse masking 
 active pull-up 
  Write and verify codes for the CHANNEL_SELECT command (DS2482-800 only).
  To set the channel, write the value at the index of the channel.
  Read and compare against the corresponding value to verify the change.
  Status Register bit definitions (read only)
  Client data (each client gets its own)
 1-wire interface(s) 
 1 or 8 
 per-device values 
 see DS2482_PTR_CODE_xxx 
  ds2482_calculate_config - Helper to calculate values for configuration register
  @conf: the raw config value
  Return: the value w complements that can be written to register
  ds2482_select_register - Sets the read pointer.
  @pdev:		The ds2482 client pointer
  @read_ptr:	see DS2482_PTR_CODE_xxx above
  Return: -1 on failure, 0 on success
  ds2482_send_cmd - Sends a command without a parameter
  @pdev:	The ds2482 client pointer
  @cmd:	DS2482_CMD_RESET,
 		DS2482_CMD_1WIRE_RESET,
 		DS2482_CMD_1WIRE_READ_BYTE
  Return: -1 on failure, 0 on success
  ds2482_send_cmd_data - Sends a command with a parameter
  @pdev:	The ds2482 client pointer
  @cmd:	DS2482_CMD_WRITE_CONFIG,
 		DS2482_CMD_1WIRE_SINGLE_BIT,
 		DS2482_CMD_1WIRE_WRITE_BYTE,
 		DS2482_CMD_1WIRE_TRIPLET
  @byte:	The data to send
  Return: -1 on failure, 0 on success
 all cmds leave in STATUS, except CONFIG 
  1-Wire interface code
  ds2482_wait_1wire_idle - Waits until the 1-wire interface is idle (not busy)
  @pdev: Pointer to the device structure
  Return: the last value read from status or -1 (failure)
  ds2482_set_channel - Selects a w1 channel.
  The 1-wire interface must be idle before calling this function.
  @pdev:		The ds2482 client pointer
  @channel:		0-7
  Return:		-1 (failure) or 0 (success)
  ds2482_w1_touch_bit - Performs the touch-bit function, which writes a 0 or 1 and reads the level.
  @data:	The ds2482 channel pointer
  @bit:	The level to write: 0 or non-zero
  Return:	The level read: 0 or 1
 Select the channel 
 Send the touch command, wait until 1WB == 0, return the status 
  ds2482_w1_triplet - Performs the triplet function, which reads two bits and writes a bit.
  The bit written is determined by the two reads:
    00 => dbit, 01 => 0, 10 => 1
  @data:	The ds2482 channel pointer
  @dbit:	The direction to choose if both branches are valid
  Return:	b0=read1 b1=read2 b3=bit written
 Select the channel 
 Send the triplet command, wait until 1WB == 0, return the status 
 Decode the status 
  ds2482_w1_write_byte - Performs the write byte function.
  @data:	The ds2482 channel pointer
  @byte:	The value to write
 Select the channel 
 Send the write byte command 
  ds2482_w1_read_byte - Performs the read byte function.
  @data:	The ds2482 channel pointer
  Return:	The value read
 Select the channel 
 Send the read byte command 
 Wait until 1WB == 0 
 Select the data register 
 Read the data byte 
  ds2482_w1_reset_bus - Sends a reset on the 1-wire interface
  @data:	The ds2482 channel pointer
  Return:	0=Device present, 1=No device present or error
 Select the channel 
 Send the reset command 
 Wait until the reset is complete 
 If the chip did reset since detect, re-config it 
	 if delay is non-zero activate the pullup,
	  the strong pullup will be automatically deactivated
	  by the master, so do not explicitly deactive it
		 both waits are crucial, otherwise devices might not be
		  powered long enough, causing e.g. a w1_therm sensor to
		  provide wrong conversion results
 note: it seems like both SPU and APU have to be set! 
 Reset the device (sets the read_ptr to status) 
 Sleep at least 525ns to allow the reset to complete 
 Read the status byte - only reset bit and line should be set 
 Detect the 8-port version 
 Set all config items to 0 (off) 
 Register 1-wire interface(s) 
 Populate all the w1 bus master stuff 
 Unregister the 1-wire bridge(s) 
 Free the memory 
  Driver data (common to all clients)
  1-wire busmaster driver for DS1WM and ASICs with embedded DS1WMs
  such as HP iPAQs (including h5xxx, h2200, and devices with ASIC3
  like hx4700).
  Copyright (c) 2004-2005, Szabolcs Gyurko <szabolcs.gyurko@tlt.hu>
  Copyright (c) 2004-2007, Matt Reimer <mreimer@vpop.net>
  Use consistent with the GNU GPL is permitted,
  provided that this copyright notice is
  preserved in its entirety in all copies and derived works.
 RW 4 bits command 
 RW 8 bits, transmitreceive buffer 
 RW interrupt status 
 RW interrupt enable 
 RW 5 bits of divisor and pre-scale 
 RW master control register (not used yet) 
 force reset on 1-wire bus 
 enable Search ROM accelerator mode 
 write only - forces bus low 
 read only - reflects state of bus 
 software reset 
 overdrive 
 presence detect 
 presence detect result 
 tx buffer empty 
 tx shift register empty 
 rx buffer full 
 rx shift register full 
 enable presence detect int 
 INTR active state 
 enable tx buffer empty int 
 enable tx shift register empty int 
 enable rx buffer full int 
 enable rx shift register full int 
 enable direct bus driving ops 
 all but INTR active state 
 you can continue this table, consult the OPERATION - CLOCK DIVISOR
 # of shifts to calc register offsets 
 last byte received 
 byte to write that makes all intr disabled, 
 considering active_state (IAS) (optimization) 
 see ds1wm.h 
	 if no bits are set in int enable register (except the IAS)
 this read action clears the INTR and certain flags in ds1wm 
 this read clears the RBF flag 
 enable Presence detect only 
 Let the w1 clock stabilize. 
 Disable interrupts. 
 --------------------------------------------------------------------- 
 w1 methods 
 holds the progress of the search 
 we work one nibble at a time 
 each nibble is interleaved to form a byte 
 writes _r, then reads back: 
 start over 
		 any discrepency found which we already choose the
		   '1' branch is now is now irrelevant we reveal the
 find last bit set, i.e. the most signif. bit set 
		 prev_ms_discrep_bit = ms_discrep_bit;
 end while true 
 --------------------------------------------------------------------- 
 how many bits to shift register number to get register offset 
 make sure resource has space for 8 registers 
 Mask interrupts, set IAS before claiming interrupt 
 SPDX-License-Identifier: GPL-2.0
  sgi_w1.c - w1 master driver for one wire support in SGI ASICs
  this is the low level routine to
  reset the device on the One Wire interface
  on the hardware
 recovery time 
  this is the low level routine to readwrite a bit on the One Wire
  interface on the hardware. It does write 0 if parameter bit is set
  to 0, otherwise a write 1read.
 recovery 
  disassociate the w1 device from the driver
 SPDX-License-Identifier: GPL-2.0-or-later
 	matrox_w1.c
  Copyright (c) 2004 Evgeniy Polyakov <zbr@ioremap.net>
  Matrox G400 DDC registers.
  These functions read and write DDC Data bit.
  Using tristate pins, since i can't find any open-drain pin in whole motherboard.
  Unfortunately we can't connect to Intel's 82801xx IO controller
  since we don't know motherboard schema, which has pretty unused(may be not) GPIO.
  I've heard that PIIX also has open drain pin.
  Port mapping.
	
	  True for G400, for some other we need resource 0, see driversvideomatroxmatroxfb_base.c
 SPDX-License-Identifier: GPL-2.0-only
  w1-gpio - GPIO w1 bus master driver
  Copyright (C) 2007 Ville Syrjala <syrjala@sci.fi>
			
			  This will OVERRIDE open drain emulation and force-pull
			  the line high for some time.
			
			  This will simply set the line as input since we are doing
			  open drain emulation in the GPIO library.
 Enforce open drain mode by default 
		
		  This parameter means that something else than the gpiolib has
		  already set the line into open drain mode, so we should just
		  driver it highlow like we are in full control of the line and
		  open drain will happen transparently.
	
	  If we are using open drain emulation from the GPIO library,
	  we need to use this pullup function that hammers the line
	  high using a raw accessor to provide pull-up for the w1
	  line.
  driversw1mastersomap_hdq.c
  Copyright (C) 2007,2012 Texas Instruments, Inc.
  This file is licensed under the terms of the GNU General Public License
  version 2. This program is licensed "as is" without any warranty of any
  kind, whether express or implied.
 lock readwritebreak operations 
 interrupt status and a lock for it 
 mode: 0-HDQ 1-W1 
 HDQ register IO routines 
  Wait for one or more bits in flag change.
  HDQ_FLAG_SET: wait until any bit in the flag is set.
  HDQ_FLAG_CLEAR: wait until all bits in the flag are cleared.
  return 0 on success and -ETIMEDOUT in the case of timeout.
 wait for the flag clear 
 wait for the flag set 
 Clear saved irqstatus after using an interrupt 
 this is a read-modify-write 
 write out a byte and fill status with HDQ_INT_STATUS 
 set the GO bit 
 wait for the TXCOMPLETE bit 
 check irqstatus 
 wait for the GO bit return to zero 
 HDQ Interrupt service routine 
 wake up sleeping process 
 W1 search callback function  in HDQ mode 
	
	  HDQ might not obey truly the 1-wire spec.
	  So calculate CRC based on module parameter.
 Issue break pulse to the device 
 set the INIT and GO bit 
 wait for the TIMEOUT bit 
 check irqstatus 
	
	  check for the presence detect bit to get
	  set to show that the slave is responding
	
	  wait for both INIT and GO bits rerurn to zero.
	  zero wait time expected for interrupt mode.
		
		  The RX comes immediately after TX.
 check irqstatus 
 interrupt had occurred before hdq_read_byte was called 
 the data is ready. Read it in! 
  W1 triplet callback function - used for searching ROM addresses.
  Registered only when controller is in 1-wire mode.
 no slaves responded 
 read id_bit 
 Must clear irqstatus for another RXCOMPLETE interrupt 
 read comp_bit 
 Must clear irqstatus for another RXCOMPLETE interrupt 
 no slaves responded 
 Both bits are valid, take the direction given 
 Only one bit is valid, take that direction 
 write bdir bit 
 Must clear irqstatus for another TXCOMPLETE interrupt 
 reset callback 
 Read a byte of data from the device 
 Write a byte of data to the device 
	
	  We need to reset the slave before
	  issuing the SKIP ROM command, else
	  the slave will not work.
 select HDQ1W mode & enable clocks 
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright 2005-2008 Freescale Semiconductor, Inc. All Rights Reserved.
  Copyright 2008 Luotao Fu, kernel@pengutronix.de
  MXC W1 Register offsets
  this is the low level routine to
  reset the device on the One Wire interface
  on the hardware
 Wait for reset sequence 511+512us, use 1500us for sure 
 PST bit is valid after the RPP bit is self-cleared 
  this is the low level routine to readwrite a bit on the One Wire
  interface on the hardware. It does write 0 if parameter bit is set
  to 0, otherwise a write 1read.
 Wait for readwrite bit (60us, Max 120us), use 200us for sure 
 RDST bit is valid after the WR1RD bit is self-cleared 
 Software reset 1-Wire module 
  disassociate the w1 device from the driver
 sentinel  }
 SPDX-License-Identifier: GPL-2.0
  w1_ds250x.c - w1 family 090b8991 (DS250x) driver
 page already present 
 mark page present 
 page already present 
 redir, crc16 
 crc16 
 SPDX-License-Identifier: GPL-2.0-only
  w1_ds2805 - w1 family 0d (DS28E05) driver
  Copyright (c) 2016 Andrew Worsley amworsley@gmail.com
 Chip Status Ok 
  Check the file size bounds and adjusts count as needed.
  This would not be needed if the file size didn't reset to 0 after a write.
  Read a block from W1 ROM two times and compares the results.
  If they are equal they are returned, otherwise the read
  is repeated W1_F0D_READ_RETRIES times.
  count must not exceed W1_F0D_READ_MAXLEN.
 read directly from the EEPROM in chunks of W1_F0D_READ_MAXLEN 
  Writes to the scratchpad and reads it back for verification.
  Then copies the scratchpad to EEPROM.
  The data must be aligned at W1_F0D_SCRATCH_SIZE bytes and
  must be W1_F0D_SCRATCH_SIZE bytes long.
  The master must be locked.
  @param sl	The slave structure
  @param addr	Address for the write
  @param len   length must be <= (W1_F0D_PAGE_SIZE - (addr & W1_F0D_PAGE_MASK))
  @param data	The data to write
  @return	0=Success -1=failure
 Write the data to the scratchpad 
 ?? from Example 
 Compare what was read against the data written 
 Trigger write out to EEPROM 
 Sleep for tprog ms to wait for the write to complete 
 Check CS (Command Status) == 0xAA ? 
 Can only write data in blocks of the size of the scratchpad 
 if len too short or addr not aligned 
 read the block and update the parts to be written 
 copy at most to the boundary of the PAGE or len 
 SPDX-License-Identifier: GPL-2.0-only
  1-Wire implementation for the ds2438 chip
  Copyright (c) 2017 Mariusz Bialonczyk <manio@skyboo.net>
 Memory commands 
 Register commands 
 ms 
 Page #0 definitions 
 StatusConfiguration Register 
 Current AD Control Bit 
 Current Accumulator Configuration 
 Current Accumulator Shadow Selector bit 
 Voltage AD Input Select Bit 
 Temperature Busy Flag 
 Nonvolatile Memory Busy Flag 
 AD Converter Busy Flag 
 Page #1 definitions 
 check for correct CRC 
for CRC];
 reading one byte of result 
 if bit0=1, set a value to a mask for easy compare 
 already set as requested 
 changing bit 
for CRC];
 last register reserved 
 change only offset register 
 write to page 1 
for CRC];
for CRC];
 The voltage measured across current sense resistor RSENS. 
for CRC];
 Read no more than page0 size 
for CRC];
 Read no more than page1 size 
 real length varies );
 real length varies );
 real length varies );
 SPDX-License-Identifier: GPL-2.0-or-later
 	w1_ds2423.c
  Copyright (c) 2010 Mika Laitio <lamikr@pilppa.org>
  This driver will read and write the value of 4 counters to w1_slave file in
  sys filesystem.
  Inspired by the w1_therm and w1_ds2431 drivers.
			
			  1 byte for first bytes in ram page read
			  4 bytes for counter
			  4 bytes for zero bits
			  2 bytes for crc
			  31 remaining bytes from the ram page
					
					  DS2423 calculates crc from all bytes
					  read after the previous crc bytes.
 SPDX-License-Identifier: GPL-2.0-or-later
 	w1_therm.c
  Copyright (c) 2004 Evgeniy Polyakov <zbr@ioremap.net>
  Allow the strong pullup to be disabled, but default to enabled.
  If it was disabled a parasite powered device might not get the require
  current to do a temperature conversion.  If it is enabled parasite powered
  devices have a better chance of getting the current required.
  In case the parasite power-detection is not working (seems to be the case
  for some DS18S20) the strong pullup can also be forced, regardless of the
  power state of the devices.
  Summary of options:
  - strong_pullup = 0	Disable strong pullup completely
  - strong_pullup = 1	Enable automatic strong pullup detection
  - strong_pullup = 2	Force strong pullup
 Counter for devices supporting bulk reading 
 =0 as per C standard 
 This command should be in public header w1.h but is not 
 Nb of try for an operation 
 ms delay to retry bus mutex 
 delay in ms to write in EEPROM 
 cmd for write eeprom sysfs 
 cmd for read eeprom sysfs 
 cmd to trigger a bulk read 
 min temperature that can be measured 
 max temperature that can be measured 
 Allowed values for sysfs conv_time attribute 
 Bits in sysfs "features" value 
 Enable conversion success check 
 Poll for conversion completion 
 All values mask 
 Poll period in milliseconds. Should be less then a shortest operation on the device 
 Timeout for W1_CONVERT_TEMP, ms 
 Timeout for W1_RECALL_EEPROM, ms
 Masks for resolution functions, work with all devices 
 Bit mask for config register for all devices, bits 7,6,5 
 Bit offset of resolution in config register for all devices 
 Bit offset of resolution in config register for all devices 
 Add this to bit value to get resolution 
 Maximum allowed value 
 Helpers Macros 
  return a pointer on the slave w1_therm_family_converter struct:
  always test family data existence before using this macro
  return the power mode of the sl slave : 1-ext, 0-parasite, <0 unknown
  always test family data existence before using this macro
  return the resolution in bit of the sl slave : <0 unknown
  always test family data existence before using this macro
  return the conv_time_override of the sl slave
  always test family data existence before using this macro
  return the features of the sl slave
  always test family data existence before using this macro
  return whether or not a converT command has been issued to the slave
   0: no bulk read is pending
   -1: conversion is in progress
   1: conversion done, result to be read
 return the address of the refcnt in the family data 
 Structs definition 
  struct w1_therm_family_converter - bind device specific functions
  @broken: flag for non-registred families
  @reserved: not used here
  @f: pointer to the device binding structure
  @convert: pointer to the device conversion function
  @get_conversion_time: pointer to the device conversion time function
  @set_resolution: pointer to the device set_resolution function
  @get_resolution: pointer to the device get_resolution function
  @write_data: pointer to the device writing function (2 or 3 bytes)
  @bulk_read: true if device family support bulk read, false otherwise
  struct w1_therm_family_data - device data
  @rom: ROM device id (64bit Lasered ROM code + 1 CRC byte)
  @refcnt: ref count
  @external_powered:	1 device powered externally,
 				0 device parasite powered,
 				-x error or undefined
  @resolution: current device resolution
  @convert_triggered: conversion state of the device
  @conv_time_override: user selected conversion time or CONV_TIME_DEFAULT
  @features: bit mask - enable temperature validity check, poll for completion
  @specific_functions: pointer to struct of device specific function
  struct therm_info - store temperature reading
  @rom: read device data (8 data bytes + 1 CRC byte)
  @crc: computed crc from rom
  @verdict: 1 crc checked, 0 crc not matching
 Hardware Functions declaration 
  reset_select_slave() - reset and select a slave
  @sl: the slave to select
  Resets the bus and select the slave by sending a ROM MATCH cmd
  w1_reset_select_slave() from w1_io.c could not be used here because
  it sent a SKIP ROM command if only one device is on the line.
  At the beginning of the such process, sl->master->slave_count is 1 even if
  more devices are on the line, causing collision on the line.
  Context: The w1 master lock must be held.
  Return: 0 if success, negative kernel error code otherwise.
  convert_t() - Query the device for temperature conversion and read
  @sl: pointer to the slave to read
  @info: pointer to a structure to store the read results
  Return: 0 if success, -kernel error code otherwise
  read_scratchpad() - read the data in device RAM
  @sl: pointer to the slave to read
  @info: pointer to a structure to store the read results
  Return: 0 if success, -kernel error code otherwise
  write_scratchpad() - write nb_bytes in the device RAM
  @sl: pointer to the slave to write in
  @data: pointer to an array of 3 bytes, as 3 bytes MUST be written
  @nb_bytes: number of bytes to be written (2 for DS18S20, 3 otherwise)
  Return: 0 if success, -kernel error code otherwise
  copy_scratchpad() - Copy the content of scratchpad in device EEPROM
  @sl: slave involved
  Return: 0 if success, -kernel error code otherwise
  recall_eeprom() - Restore EEPROM data to device RAM
  @sl: slave involved
  Return: 0 if success, -kernel error code otherwise
  read_powermode() - Query the power mode of the slave
  @sl: slave to retrieve the power mode
  Ask the device to get its power mode (external or parasite)
  and store the power status in the &struct w1_therm_family_data.
  Return:
   0 parasite powered device
   1 externally powered device
   <0 kernel error code
  trigger_bulk_read() - function to trigger a bulk read on the bus
  @dev_master: the device master of the bus
  Send a SKIP ROM follow by a CONVERT T commmand on the bus.
  It also set the status flag in each slave &struct w1_therm_family_data
  to signal that a conversion is in progress.
  Return: 0 if success, -kernel error code otherwise
 Sysfs interface declaration 
 Attributes declarations 
 attribut at master level 
 Interface Functions declaration 
  w1_therm_add_slave() - Called when a new slave is discovered
  @sl: slave just discovered by the master.
  Called by the master when the slave is discovered on the bus. Used to
  initialize slave state before the beginning of any communication.
  Return: 0 - If success, negative kernel code otherwise
  w1_therm_remove_slave() - Called when a slave is removed
  @sl: slave to be removed.
  Called by the master when the slave is considered not to be on the bus
  anymore. Used to free memory.
 Family attributes 
 Attribute groups 
 Family operations 
 Family binding operations struct 
 Device dependent func 
 device unknown 
	 Return the conversion time, depending on resolution,
	  select maximum conversion time among all compatible devices
 GX20MH01 only. Datasheet says 500ms, but that's not enough. 
 GX20MH01 only. Datasheet says 1000ms - not enough 
 device unknown 
 default for DS18S20 
 No config register 
 DS18B20 resolution is 9 to 12 bits 
 GX20MH01 resolution is 9 to 14 bits 
 Calc bit value from resolution 
	
	  Read the scratchpad to change only the required bits
	  (bit5 & bit 6 from byte 4)
 Write data in the device RAM 
	 Have to read back the resolution to verify an actual value
	  GX20MH01 and DS18B20 are indistinguishable by family number, but resolutions differ
	  Some DS18B20 clones don't support resolution change
 Scratchpad read fail 
 Resolution verify error 
	 GX20MH01 has one special case:
	    >=14 means 14 bits when getting resolution from bit value.
	  Other devices have no more then 12 bits.
  w1_DS18B20_convert_temp() - temperature computation for DS18B20
  @rom: data read from device RAM (8 data bytes + 1 CRC byte)
  Can be called for any DS18B20 compliant device.
  Return: value in millidegrees Celsius.
 Signed 16-bit value to unsigned, cpu order 
 Config register bit R2 = 1 - GX20MH01 in 13 or 14 bit resolution mode 
 Insert two temperature bits from config register 
 Avoid arithmetic shift of signed value 
 Degrees, lowest bit is 2^-6 
 Sign-extend to int; millidegrees 
 Degrees, lowest bit is 2^-4 
 Sign-extend to int; millidegrees 
  w1_DS18S20_convert_temp() - temperature computation for DS18S20
  @rom: data read from device RAM (8 data bytes + 1 CRC byte)
  Can be called for any DS18S20 compliant device.
  Return: value in millidegrees Celsius.
 Device capability description 
 GX20MH01 device shares family number and structure with DS18B20 
 no config register 
 no config register 
 Also used for GX20MH01 
 Helpers Functions 
  device_family() - Retrieve a pointer on &struct w1_therm_family_converter
  @sl: slave to retrieve the device specific structure
  Return: pointer to the slaves's family converter, NULL if not known
  bus_mutex_lock() - Acquire the mutex
  @lock: w1 bus mutex to acquire
  It try to acquire the mutex W1_THERM_MAX_TRY times and wait
  W1_THERM_RETRY_DELAY between 2 attempts.
  Return: true is mutex is acquired and lock, false otherwise
 try to acquire the mutex, if not, sleep retry_delay before retry) 
 Didn't acquire the bus mutex 
  check_family_data() - Check if family data and specific functions are present
  @sl: W1 device data
  Return: 0 - OK, negative value - error
 No device family 
  bulk_read_support() - check if slave support bulk read
  @sl: device to check the ability
  Return: true if bulk read is supported, false if not or error
 No device family 
  conversion_time() - get the Tconv for the slave
  @sl: device to get the conversion time
  On device supporting resolution settings, conversion time depend
  on the resolution setting. This helper function get the slave timing,
  depending on its current setting.
  Return: conversion time in ms, negative values are kernel error code
 No device family 
  temperature_from_RAM() - Convert the read info to temperature
  @sl: device that sent the RAM data
  @rom: read value on the slave device RAM
  Device dependent, the function bind the correct computation method.
  Return: temperature in 11000degC, 0 on error.
 No device family 
  int_to_short() - Safe casting of int to short
  @i: integer to be converted to short
  Device register use 1 byte to store signed integer.
  This helper function convert the int in a signed short,
  using the minmax values that device can measure as limits.
  minmax values are defined by macro.
  Return: a short in the range of minmax value
 Prepare to cast to short by eliminating out of range values 
 Interface Functions 
 Allocate memory 
 Get a pointer to the device specific function struct 
 save this pointer to the device structure 
		
		  add the sys entry to trigger bulk_read
		  at master level only the 1st time
 Increment the counter 
 Getting the power mode of the device {external, parasite} 
 no error returned as device has been added 
 Getting the resolution of the device 
 no error returned as device has been added 
 Finally initialize convert_triggered flag 
 Delete the entry if no more device support the feature 
 Hardware Functions 
 Safe version of reset_select_slave - avoid using the one in w_io.c 
  w1_poll_completion - Poll for operation completion, with timeout
  @dev_master: the device master of the bus
  @tout_ms: timeout in milliseconds
  The device is answering 0's while an operation is in progress and 1's after it completes
  Timeout may happen if the previous command was not recognised due to a line noise
  Return: 0 - OK, negative error - timeout
 Delay is before poll, for device to recognize a command 
 Compare all 8 bits to mitigate a noise on the bus 
 get conversion duration device and id dependent 
 prevent the slave from going away in sleep 
 Didn't acquire the mutex 
 ret should be 0 
 safe version to select slave 
 750ms strong pullup (or delay) after the convert 
some device need pullup 
no device need pullup 
 Fixed delay 
 If enabled, check for conversion success 
				 Invalid reading (scratchpad byte 6 = 0xC)
				  due to insufficient conversion time
				  or power failure.
 prevent the slave from going away in sleep 
 Didn't acquire the mutex 
 ret should be 0 
 safe version to select slave 
no device need pullup 
 1.2x increase for variation and changes over temperature range 
 prevent the slave from going away in sleep 
 Didn't acquire the mutex 
 ret should be 0 
 safe version to select slave 
 CRC not checked 
 prevent the slave from going away in sleep 
 Didn't acquire the mutex 
 ret should be 0 
 safe version to select slave 
 prevent the slave from going away in sleep 
 Didn't acquire the mutex 
 ret should be 0 
 safe version to select slave 
 10ms strong pullup (or delay) after the convert 
 prevent the slave from going away in sleep 
 Didn't acquire the mutex 
 ret should be 0 
 safe version to select slave 
 prevent the slave from going away in sleep 
 Didn't acquire the mutex 
 safe version to select slave 
			
			  Emit a read time slot and read only one bit,
			  1 is externally powered,
			  0 is parasite powered
 ret should be either 1 either 0 
 used to iterate through slaves 
	
	  Check whether there are parasite powered device on the bus,
	  and compute duration of conversion for these devices
	  so we can apply a strong pullup if required
	
	  t_conv is the max conversion time required on the bus
	  If its 0, no device support the bulk read feature
 Didn't acquire the mutex 
 ret should be either 0 
 Just reset the bus 
 Apply pullup if required 
 set a flag to instruct that converT pending 
 some device need pullup 
 set a flag to register convsersion is done 
 Sysfs Interface definition 
 A bulk read has been issued, read the device RAM 
 converting user entry to int 
 conversion error 
 return size to avoid call back again 
 No device family 
 val=0 : trigger a EEPROM save 
 Propagate error to userspace 
 Reset the conversion time to default - it depends on resolution 
 always return size to avoid infinite calling 
 No device family 
 A bulk read has been issued, read the device RAM 
 No device family 
 Getting the power mode of the device {external, parasite} 
 No device family 
 get the correct function depending on the device 
 converting user entry to int 
 conversion error 
 return size to avoid call back again 
 No device family 
	
	  Don't deal with the val enterd by user,
	  only device knows what is correct or not
 get the correct function depending on the device 
 Reset the conversion time to default because it depends on resolution 
 Invalid argument 
 TH is byte 2 
 TL is byte 3 
 array of data to be written 
 1 byte per value + temp ring order 
 Safe string copys as buf is const 
 Split string using space char 
 Convert 1st entry to int 
 Split string using space char 
 Convert 2nd entry to int 
 Prepare to cast to short by eliminating out of range values 
 Reorder if required th and tl 
	
	  Read the scratchpad to change only the required bits
	  (th : byte 2 - tl: byte 3)
 Byte 2 
 Byte 3 
 Byte 4 
 Write data in the device RAM 
 free allocated memory 
 Invalid argument 
 continue to check other slaves 
 No device family 
 converting user entry to int 
 No device family 
 converting user entry to int 
 invalid number 
 Place all devices in CHAIN state 
 check for acknowledgment 
 In case the bus fails to send 0xFF, limit 
 check for acknowledgment 
 Exit from CHAIN state 
 check for acknowledgment 
 SPDX-License-Identifier: GPL-2.0-only
  w1_ds2413.c - w1 family 3a (DS2413) driver
  based on w1_ds2408.c by Jean-Francois Dagenais <dagenaisj@sonatest.com>
  Copyright (c) 2013 Mariusz Bialonczyk <manio@skyboo.net>
 complement is correct 
 slave didn't respond, try to select it again 
 unrecoverable error 
	 according to the DS2413 datasheet the most significant 6 bits
 unrecoverable error 
 SPDX-License-Identifier: GPL-2.0-only
 	w1_ds28e17.c - w1 family 19 (DS28E17) driver
  Copyright (c) 2016 Jan Kandziora <jjj@gmx.de>
 Module setup. 
 Default I2C speed to be set when a DS28E17 is detected. 
 Default I2C stretch value to be set when a DS28E17 is detected. 
 DS28E17 device command codes. 
 DS28E17 status bits 
  Maximum number of I2C bytes to transfer within one CRC16 protected onewire
  command.
 Maximum number of I2C bytes to read with one onewire command. 
 Constants for calculating the busy sleep. 
 Number of checks for the busy flag before timeout. 
 Slave specific data. 
 Wait a while until the busy flag clears. 
 Check the busy flag first in any case.
	
	  Do a generously long sleep in the beginning,
	  as we have to wait at least this time for all
	  the I2C bytes at the given speed to be transferred.
 Now continusly check the busy flag sent by the DS28E17. 
 Return success if the busy flag is cleared. 
 Wait one non-streched byte timeslot. 
 Timeout. 
 Utility function: result. 
 Warnings. 
 Check error conditions. 
 All ok. 
 Utility function: write data to I2C slave, single chunk. 
 Send command and I2C data to DS28E17. 
 Wait until busy flag clears (or timeout). 
 Read status from DS28E17. 
 Check error conditions. 
 Return number of bytes written. 
 Write data to I2C slave. 
 Check input. 
 Check whether we need multiple commands. 
		
		  Small data amount. Data can be sent with
		  a single onewire command.
 Send all data to DS28E17. 
 Large data amount. Data has to be sent in multiple chunks. 
 Send first chunk to DS28E17. 
 Resume to same DS28E17. 
 Next data chunk. 
 Send intermediate chunk to DS28E17. 
 Resume to same DS28E17. 
 Next data chunk. 
 Send final chunk to DS28E17. 
 Read data from I2C slave. 
 Check input. 
 Send command to DS28E17. 
 Wait until busy flag clears (or timeout). 
 Read status from DS28E17. 
 Check error conditions. 
 Read received I2C data from DS28E17. 
 Write to, then read data from I2C slave. 
 Check input. 
 Send command and I2C data to DS28E17. 
 Wait until busy flag clears (or timeout). 
 Read status from DS28E17. 
 Check error conditions. 
 Read received I2C data from DS28E17. 
 Do an I2C master transfer. 
 Start onewire transaction. 
 Select DS28E17. 
 Loop while there are still messages to transfer. 
		
		  Check for special case: Small write followed
		  by read to same I2C device.
			
			  The DS28E17 has a combined transfer
			  for small write+read.
			
			  Check if we should interpret the read data
			  as a length byte. The DS28E17 unfortunately
			  has no read without stop, so we can just do
			  another simple read in that case.
 Eat up read message, too. 
 Read transfer. 
			
			  Check if we should interpret the read data
			  as a length byte. The DS28E17 unfortunately
			  has no read without stop, so we can just do
			  another simple read in that case.
			
			  Write transfer.
			  Stop condition only for last
			  transfer.
 Next message. 
 Are there still messages to sendreceive? 
 Yes. Resume to same DS28E17. 
 End onewire transaction. 
 Return number of messages processed or error. 
 Get I2C adapter functionality. 
	
	  Plain I2C functions only.
	  SMBus is emulated by the kernel's I2C layer.
	  No "I2C_FUNC_SMBUS_QUICK"
	  No "I2C_FUNC_SMBUS_READ_BLOCK_DATA"
	  No "I2C_FUNC_SMBUS_BLOCK_PROC_CALL"
 I2C adapter quirks. 
 I2C algorithm. 
 Read I2C speed from DS28E17. 
 Start onewire transaction. 
 Select slave. 
 Read slave configuration byte. 
 Update speed in slave specific data. 
 End onewire transaction. 
 Set I2C speed on DS28E17. 
 Select slave. 
 Update speed in slave specific data. 
 Start onewire transaction. 
 Set I2C speed on DS28E17. 
 End onewire transaction. 
 Sysfs attributes. 
 I2C speed attribute for a single chip. 
 Read current speed from slave. Updates data->speed. 
 Return current speed value. 
 Valid values are: "100", "400", "900" 
 Set speed on slave. 
 Return bytes written. 
 Busy stretch attribute for a single chip. 
 Return current stretch value. 
 Valid values are '1' to '9' 
 Set busy stretch value. 
 Return bytes written. 
 All attributes. 
 Slave add and remove functions. 
 Allocate memory for slave specific data. 
 Setup default I2C speed on slave. 
		
		  A i2c_speed module parameter of anything else
		  than 100, 400, 900 means not to touch the
		  speed of the DS28E17.
		  We assume 400kBaud, the power-on value.
	
	  Setup default busy stretch
	  configuration for the DS28E17.
 Setup I2C adapter. 
 Delete I2C adapter. 
 Free slave specific data. 
 Declarations within the w1 subsystem. 
 SPDX-License-Identifier: GPL-2.0-only
  1-Wire implementation for the ds2780 chip
  Copyright (C) 2010 Indesign, LLC
  Author: Clifton Barnes <cabarnes@indesign-llc.com>
  Based on w1-ds2760 driver
 SPDX-License-Identifier: GPL-2.0-only
  w1_ds2431.c - w1 family 2d (DS2431) driver
  Copyright (c) 2008 Bernhard Weirich <bernhard.weirich@riedel.net>
  Heavily inspired by w1_DS2433 driver from Ben Gardner <bgardner@wabtec.com>
  Check the file size bounds and adjusts count as needed.
  This would not be needed if the file size didn't reset to 0 after a write.
  Read a block from W1 ROM two times and compares the results.
  If they are equal they are returned, otherwise the read
  is repeated W1_F2D_READ_RETRIES times.
  count must not exceed W1_F2D_READ_MAXLEN.
 read directly from the EEPROM in chunks of W1_F2D_READ_MAXLEN 
  Writes to the scratchpad and reads it back for verification.
  Then copies the scratchpad to EEPROM.
  The data must be aligned at W1_F2D_SCRATCH_SIZE bytes and
  must be W1_F2D_SCRATCH_SIZE bytes long.
  The master must be locked.
  @param sl	The slave structure
  @param addr	Address for the write
  @param len   length must be <= (W1_F2D_PAGE_SIZE - (addr & W1_F2D_PAGE_MASK))
  @param data	The data to write
  @return	0=Success -1=failure
 Write the data to the scratchpad 
 Read the scratchpad and verify 
 Compare what was read against the data written 
 Copy the scratchpad to EEPROM 
 Sleep for tprog ms to wait for the write to complete 
 Reset the bus to wake up the EEPROM  
 Can only write data in blocks of the size of the scratchpad 
 if len too short or addr not aligned 
 read the block and update the parts to be written 
 copy at most to the boundary of the PAGE or len 
 SPDX-License-Identifier: GPL-2.0-only
 	w1_ds28e04.c - w1 family 1C (DS28E04) driver
  Copyright (c) 2012 Markus Franke <franke.m@sebakmt.com>
 Allow the strong pullup to be disabled, but default to enabled.
  If it was disabled a parasite powered device might not get the required
  current to copy the data from the scratchpad to EEPROM.  If it is enabled
  parasite powered devices have a better chance of getting the current
  required.
 enabledisable CRC checking on DS28E04-100 memory accesses 
  Check the file size bounds and adjusts count as needed.
  This would not be needed if the file size didn't reset to 0 after a write.
 cache the block if the CRC is valid 
 read directly from the EEPROM 
  Writes to the scratchpad and reads it back for verification.
  Then copies the scratchpad to EEPROM.
  The data must be on one page.
  The master must be locked.
  @param sl	The slave structure
  @param addr	Address for the write
  @param len   length must be <= (W1_PAGE_SIZE - (addr & W1_PAGE_MASK))
  @param data	The data to write
  @return	0=Success -1=failure
 Write the data to the scratchpad 
 Read the scratchpad and verify 
 Compare what was read against the data written 
 Copy the scratchpad to EEPROM 
		 issue 10ms strong pullup (or delay) on the last byte
 invalidate cached data 
 Reset the bus to wake up the EEPROM (this may not be needed) 
 can only write full blocks in cached mode 
 make sure the block CRCs are valid 
 Can only write data to one page at a time 
 check arguments 
 check arguments 
 Write the PIO data 
 set bit 7..2 to value '1' 
 check for acknowledgement 
 convert to decimal 
 set the new value 
 SPDX-License-Identifier: GPL-2.0-or-later
 	w1_ds2405.c
  Copyright (c) 2017 Maciej S. Szmigiero <mail@maciej.szmigiero.name>
  Based on w1_therm.c copyright (c) 2004 Evgeniy Polyakov <zbr@ioremap.net>
	
	  We cannot use a normal Match ROM command
	  since doing so would toggle PIO state
 no devices found 
 wrong direction taken - no such device 
 "active" means PIO is low 
	
	  can't use w1_reset_select_slave() here since it uses Skip ROM if
	  there is only one device on bus
 SPDX-License-Identifier: GPL-2.0-only
 	w1_ds2408.c - w1 family 29 (DS2408) driver
  Copyright (c) 2010 Jean-Francois Dagenais <dagenaisj@sonatest.com>
 R 
 R 
 R 
 RW 
 RW 
 RW 
 also used to write the controlstatus reg (0x8D): 
 unrecoverable error 
 try again, the slave is ready for a command 
  Writing to the activity file resets the activity latches.
 success! 
  This is a special sequence we must do to ensure the P0 output is not stuck
  in test mode. This is described in rev 2 of the ds2408's datasheet
  (http:datasheets.maximintegrated.comendsDS2408.pdf) under
  "APPLICATION INFORMATIONPower-up timing".
 SPDX-License-Identifier: GPL-2.0-or-later
 	w1_smem.c
  Copyright (c) 2004 Evgeniy Polyakov <zbr@ioremap.net>
 SPDX-License-Identifier: GPL-2.0-only
  w1_ds2406.c - w1 family 12 (DS2406) driver
  based on w1_ds2413.c by Mariusz Bialonczyk <manio@skyboo.net>
  Copyright (c) 2014 Scott Alfter <scott@alfter.us>
 good read? 
 good read? 
 SPDX-License-Identifier: GPL-2.0-only
 	w1_ds2433.c - w1 family 23 (DS2433) driver
  Copyright (c) 2005 Ben Gardner <bgardner@wabtec.com>
  Check the file size bounds and adjusts count as needed.
  This would not be needed if the file size didn't reset to 0 after a write.
 cache the block if the CRC is valid 
 CONFIG_W1_SLAVE_DS2433_CRC 
 CONFIG_W1_SLAVE_DS2433_CRC 
 read directly from the EEPROM 
 CONFIG_W1_SLAVE_DS2433_CRC 
  Writes to the scratchpad and reads it back for verification.
  Then copies the scratchpad to EEPROM.
  The data must be on one page.
  The master must be locked.
  @param sl	The slave structure
  @param addr	Address for the write
  @param len   length must be <= (W1_PAGE_SIZE - (addr & W1_PAGE_MASK))
  @param data	The data to write
  @return	0=Success -1=failure
 Write the data to the scratchpad 
 Read the scratchpad and verify 
 Compare what was read against the data written 
 Copy the scratchpad to EEPROM 
 Sleep for 5 ms to wait for the write to complete 
 Reset the bus to wake up the EEPROM (this may not be needed) 
 can only write full blocks in cached mode 
 make sure the block CRCs are valid 
 CONFIG_W1_SLAVE_DS2433_CRC 
 Can only write data to one page at a time 
 CONFIG_W1_SLAVE_DS2433_CRC 
 CONFIG_W1_SLAVE_DS2433_CRC 
 SPDX-License-Identifier: GPL-2.0-only
  1-Wire implementation for the ds2781 chip
  Author: Renata Sayakhova <renata@oktetlabs.ru>
  Based on w1-ds2780 driver
 SPDX-License-Identifier: GPL-2.0-only
  w1_ds2430.c - w1 family 14 (DS2430) driver
  Copyright (c) 2019 Angelo Dureghello <angelo.dureghello@timesys.com>
  Cloned and modified from ds2431
  Copyright (c) 2008 Bernhard Weirich <bernhard.weirich@riedel.net>
  Check the file size bounds and adjusts count as needed.
  This would not be needed if the file size didn't reset to 0 after a write.
  Read a block from W1 ROM two times and compares the results.
  If they are equal they are returned, otherwise the read
  is repeated W1_F14_READ_RETRIES times.
  count must not exceed W1_F14_READ_MAXLEN.
 read directly from the EEPROM in chunks of W1_F14_READ_MAXLEN 
  Writes to the scratchpad and reads it back for verification.
  Then copies the scratchpad to EEPROM.
  The data must be aligned at W1_F14_SCRATCH_SIZE bytes and
  must be W1_F14_SCRATCH_SIZE bytes long.
  The master must be locked.
  @param sl	The slave structure
  @param addr	Address for the write
  @param len   length must be <= (W1_F14_PAGE_SIZE - (addr & W1_F14_PAGE_MASK))
  @param data	The data to write
  @return	0=Success -1=failure
 Write the data to the scratchpad 
 Read the scratchpad and verify 
	
	  Compare what was read against the data written
	  Note: on read scratchpad, device returns 2 bulk 0xff bytes,
	  to be discarded.
 Copy the scratchpad to EEPROM 
 Sleep for tprog ms to wait for the write to complete 
 Reset the bus to wake up the EEPROM  
 Can only write data in blocks of the size of the scratchpad 
 if len too short or addr not aligned 
 read the block and update the parts to be written 
 copy at most to the boundary of the PAGE or len 
 SPDX-License-Identifier: (GPL-2.0 OR BSD-3-Clause)
 Copyright(c) 2015-18 Intel Corporation.
   stream.c - SoundWire Bus stream operations.
  Array of supported rows and columns as per MIPI SoundWire Specification 1.1
  The rows are arranged as per the array index value programmed
  in register. The index 15 has dummy value 0 in order to fill hole.
 Program DPN_OffsetCtrl2 registers 
 Program DPN_BlockCtrl3 register 
	
	  Data ports are FULL, SIMPLE and REDUCED. This function handles
	  FULL and REDUCED only and beyond this point only FULL is
	  handled, so bail out if we are not FULL data port type
 Program DPN_SampleCtrl2 register 
 Program DPN_HCtrl register 
 Program DPN_PortCtrl register 
 Program DPN_BlockCtrl1 register 
 Program DPN_SampleCtrl1 register 
 Program DPN_OffsetCtrl1 registers 
 Program DPN_BlockCtrl2 register
 program DPN_LaneCtrl register 
	
	  we need to set transport and port parameters for the port.
	  Transport parameters refers to the sample interval, offsets and
	  hstartstop etc of the data. Port parameters refers to word
	  length, flow mode etc of the port
  sdw_program_port_params() - Programs transport parameters of Master(s)
  and Slave(s)
  @m_rt: Master stream runtime
 Program transport & port parameters for Slave(s) 
 Program transport & port parameters for Master(s) 
  sdw_enable_disable_slave_ports: Enabledisable slave data port
  @bus: bus instance
  @s_rt: slave runtime
  @p_rt: port runtime
  @en: enable or disable operation
  This function only sets the enabledisable bits in the relevant bank, the
  actual enabledisable is done with a bank switch
	
	  Since bus doesn't support sharing a port across two streams,
	  it is safe to reset this register
 Perform Master port channel(s) enabledisable 
  sdw_enable_disable_ports() - Enabledisable port(s) for Master and
  Slave(s)
  @m_rt: Master stream runtime
  @en: mode (enabledisable)
 EnableDisable Slave port(s) 
 EnableDisable Master port(s) 
	
	  Enable interrupt before Port prepare.
	  For Port de-prepare, it is assumed that port
	  was prepared earlier
 Inform slave about the impending port prepare 
 Prepare Slave port implementing CP_SM 
 Wait for completion on port ready 
 Inform slaves about ports prepared 
 Disable interrupt after Port de-prepare 
 PrepareDe-prepare 
 Pre-preparePre-deprepare port(s) 
  sdw_prep_deprep_ports() - PrepareDe-prepare port(s) for Master(s) and
  Slave(s)
  @m_rt: Master runtime handle
  @prep: Prepare or De-prepare
 PrepareDe-prepare Slave port(s) 
 PrepareDe-prepare Master port(s) 
  sdw_notify_config() - Notify bus configuration
  @m_rt: Master runtime handle
  This function notifies the Master(s) and Slave(s) of the
  new bus configuration.
  sdw_program_params() - Program transport and port parameters for Master(s)
  and Slave(s)
  @bus: SDW bus instance
  @prepare: true if sdw_program_params() is called by _prepare.
		
		  this loop walks through all master runtimes for a
		  bus, but the ports can only be configured while
		  explicitly preparing a stream or handling an
		  already-prepared stream otherwise.
 Enable port(s) on alternate bank for all active streams 
 Get row and column index to program register 
	
	  Set the multi_link flag only when both the hardware supports
	  and hardware-based sync is required
  sdw_ml_sync_bank_switch: Multilink register bank switch
  @bus: SDW bus instance
  Caller function should free the buffers on error
 Wait for completion of transfer 
 Pre-bank switch 
		
		  Perform Bank switch operation.
		  For multi link cases, the actual bank switch is
		  synchronized across all Masters and happens later as a
		  part of post_bank_switch ops.
	
	  For multi link cases, it is expected that the bank switch is
	  triggered by the post_bank_switch for the first Master in the list
	  and for the other Masters the post_bank_switch() should return doing
	  nothing.
 Post-bank switch 
 Set the bank switch timeout to default, if not set 
 Check if bank switch was successful 
  sdw_release_stream() - Free the assigned stream runtime
  @stream: SoundWire stream runtime
  sdw_release_stream should be called only once per stream
  sdw_alloc_stream() - Allocate and return stream runtime
  @stream_name: SoundWire stream name
  Allocates a SoundWire stream runtime instance.
  sdw_alloc_stream should be called only once per stream. Typically
  invoked from ALSAASoC machineplatform driver.
 Retrieve Bus handle if already available 
  sdw_alloc_master_rt() - Allocates and initialize Master runtime handle
  @bus: SDW bus instance
  @stream_config: Stream configuration
  @stream: Stream runtime handle.
  This function is to be called with bus_lock held.
	
	  check if Master is already allocated (as a result of Slave adding
	  it first), if so skip allocation and go to configure
 Initialization of Master runtime handle 
  sdw_alloc_slave_rt() - Allocate and initialize Slave runtime handle.
  @slave: Slave handle
  @stream_config: Stream configuration
  @stream: Stream runtime handle
  This function is to be called with bus_lock held.
  sdw_release_slave_stream() - Free Slave(s) runtime handle
  @slave: Slave handle.
  @stream: Stream runtime handle.
  This function is to be called with bus_lock held.
 Retrieve Slave runtime handle 
  sdw_release_master_stream() - Free Master runtime handle
  @m_rt: Master runtime node
  @stream: Stream runtime handle.
  This function is to be called with bus_lock held
  It frees the Master runtime handle and associated Slave(s) runtime
  handle. If this is called first then sdw_release_slave_stream() will have
  no effect as Slave(s) runtime handle would already be freed up.
  sdw_stream_remove_master() - Remove master from sdw_stream
  @bus: SDW Bus instance
  @stream: SoundWire stream
  This removes and frees port_rt and master_rt from a stream
  sdw_stream_remove_slave() - Remove slave from sdw_stream
  @slave: SDW Slave instance
  @stream: SoundWire stream
  This removes and frees port_rt and slave_rt from a stream
  sdw_config_stream() - Configure the allocated stream
  @dev: SDW device
  @stream: SoundWire stream
  @stream_config: Stream configuration for audio stream
  @is_slave: is API called from Slave or Master
  This function is to be called with bus_lock held.
	
	  Update the stream rate, channel and bps based on data
	  source. For more than one data source (multilink),
	  match the rate, bps, stream type and increment number of channels.
	 
	  If ratebps is zero, it means the values are not set, so skip
	  comparison and allow the value to be set and stored in stream
 TODO: Update this check during Device-device support 
 Iterate for number of ports to perform initialization 
		
		  TODO: Check port capabilities for requested
		  configuration (audio mode support)
 Iterate for number of ports to perform initialization 
		
		  TODO: Check valid port range as defined by DisCo
		  slave
		
		  TODO: Check port capabilities for requested
		  configuration (audio mode support)
  sdw_stream_add_master() - Allocate and add master runtime to a stream
  @bus: SDW Bus instance
  @stream_config: Stream configuration for audio stream
  @port_config: Port configuration for audio stream
  @num_ports: Number of ports
  @stream: SoundWire stream
	
	  For multi link streams, add the second master only if
	  the bus supports it.
	  Check if bus->multi_link is set
  sdw_stream_add_slave() - Allocate and add masterslave runtime to a stream
  @slave: SDW Slave instance
  @stream_config: Stream configuration for audio stream
  @stream: SoundWire stream
  @port_config: Port configuration for audio stream
  @num_ports: Number of ports
  It is expected that Slave is added before adding Master
  to the Stream.
	
	  If this API is invoked by Slave first then m_rt is not valid.
	  So, allocate m_rt and add Slave to it.
		
		  sdw_release_master_stream will release s_rt in slave_rt_list in
		  stream_error case, but s_rt is only added to slave_rt_list
		  when sdw_config_stream is successful, so free s_rt explicitly
		  when sdw_config_stream is failed.
	
	  Change stream state to CONFIGURED on first Slave add.
	  Bus is not aware of number of Slave(s) in a stream at this
	  point so cannot depend on all Slave(s) to be added in order to
	  change stream state to CONFIGURED.
	
	  we hit error so cleanup the stream, release all Slave(s) and
	  Master runtime
  sdw_get_slave_dpn_prop() - Get Slave port capabilities
  @slave: Slave handle
  @direction: Data direction.
  @port_num: Port number
  sdw_acquire_bus_lock: Acquire bus lock for all Master runtime(s)
  @stream: SoundWire stream
  Acquire bus_lock for each of the master runtime(m_rt) part of this
  stream to reconfigure the bus.
  NOTE: This function is called from SoundWire stream ops and is
  expected that a global lock is held before acquiring bus_lock.
 Iterate for all Master(s) in Master list 
  sdw_release_bus_lock: Release bus lock for all Master runtime(s)
  @stream: SoundWire stream
  Release the previously held bus_lock after reconfiguring the bus.
  NOTE: This function is called from SoundWire stream ops and is
  expected that a global lock is held before releasing bus_lock.
 Iterate for all Master(s) in Master list 
 Prepare  Master(s) and Slave(s) port(s) associated with stream 
 TODO: Support Asynchronous mode 
 Increment cumulative bus bandwidth 
 TODO: Update this during Device-Device support 
 Compute params 
 Program params 
 Prepare port(s) on the new clock configuration 
  sdw_prepare_stream() - Prepare SoundWire stream
  @stream: Soundwire stream
  Documentationdriver-apisoundwirestream.rst explains this API in detail
	
	  when the stream is DISABLED, this means sdw_prepare_stream()
	  is called as a result of an underflow or a resume operation.
	  In this case, the bus parameters shall not be recomputed, but
	  still need to be re-applied
 Enable Master(s) and Slave(s) port(s) associated with stream 
 Program params 
 Enable port(s) 
  sdw_enable_stream() - Enable SoundWire stream
  @stream: Soundwire stream
  Documentationdriver-apisoundwirestream.rst explains this API in detail
 Disable port(s) 
 Program params 
 make sure alternate bank (previous current) is also disabled 
 Disable port(s) 
  sdw_disable_stream() - Disable SoundWire stream
  @stream: Soundwire stream
  Documentationdriver-apisoundwirestream.rst explains this API in detail
 De-prepare port(s) 
 TODO: Update this during Device-Device support 
 Compute params 
 Program params 
  sdw_deprepare_stream() - Deprepare SoundWire stream
  @stream: Soundwire stream
  Documentationdriver-apisoundwirestream.rst explains this API in detail
 Set stream pointer on all DAIs 
  sdw_startup_stream() - Startup SoundWire stream
  @sdw_substream: Soundwire stream
  Documentationdriver-apisoundwirestream.rst explains this API in detail
  sdw_shutdown_stream() - Shutdown SoundWire stream
  @sdw_substream: Soundwire stream
  Documentationdriver-apisoundwirestream.rst explains this API in detail
 Find stream from first CPU DAI 
 release memory 
 clear DAI data 
 SPDX-License-Identifier: (GPL-2.0 OR BSD-3-Clause)
 Copyright(c) 2015-17 Intel Corporation.
  sdw_bus_master_add() - add a bus Master instance
  @bus: bus instance
  @parent: parent device
  @fwnode: firmware node handle
  Initializes the bus instance, read properties and create child
  devices.
	
	  Initialize multi_link flag
	  TODO: populate this flag by reading property from FW node
	
	  Device numbers in SoundWire are 0 through 15. Enumeration device
	  number (0), Broadcast device number (15), Group numbers (12 and
	  13) and Master device number (14) are not used for assignment so
	  mask these and other higher bits.
 Set higher order bits 
 Set enumuration device number and broadcast device number 
 Set group device numbers and master device number 
	
	  SDW is an enumerable bus, but devices can be powered off. So,
	  they won't be able to report as present.
	 
	  Create Slave devices based on Slaves described in
	  the respective firmware (ACPIDT)
 No ACPIDT so error out 
	
	  Initialize clock values based on Master properties. The max
	  frequency is read from max_clk_freq property. Current assumption
	  is that the bus will start at highest clock frequency when
	  powered on.
	 
	  Default active bank will be 0 as out of reset the Slaves have
	  to start with bank 0 (Table 40 of Spec)
 clear dev_num if assigned 
  sdw_bus_master_delete() - delete the bus master instance
  @bus: bus to be deleted
  Remove the instance, delete the child devices.
  SDW IO Calls
 if cmd is ok or ignored return 
 if cmd is ok or ignored return 
 if cmd is ok or ignored return 
  sdw_transfer() - Synchronous transfer message to a SDW Slave device
  @bus: SDW bus
  @msg: SDW message to be xfered
  sdw_transfer_defer() - Asynchronously transfer message to a SDW Slave device
  @bus: SDW bus
  @msg: SDW message to be xfered
  @defer: Defer block for signal completion
  Caller needs to hold the msg_lock lock while calling this
 addr is 16 bit and truncated here 
 no paging area 
 illegal addr 
 32k but no page 
 no need for else as that will fall-through to paging 
 paging mandatory 
  ReadWrite IO functions.
  no_pm versions can only be called by the bus, e.g. while enumerating or
  handling suspend-resume sequences.
  all clients need to use the pm versions
 Read-Modify-Write Slave register 
  sdw_nread() - Read "n" contiguous SDW Slave registers
  @slave: SDW Slave
  @addr: Register address
  @count: length
  @val: Buffer for values to be read
  sdw_nwrite() - Write "n" contiguous SDW Slave registers
  @slave: SDW Slave
  @addr: Register address
  @count: length
  @val: Buffer for values to be written
  sdw_read() - Read a SDW Slave register
  @slave: SDW Slave
  @addr: Register address
  sdw_write() - Write a SDW Slave register
  @slave: SDW Slave
  @addr: Register address
  @value: Register value
  SDW alert handling
 called with bus_lock held 
 called with bus_lock held 
	
	  Do not update dev_num in Slave data structure here,
	  Update once program dev_num is successful
 check first if device number is assigned, if so reuse that 
 Clear the slave->dev_num to transfer message on device 0 
 After xfer of msg, restore dev_num 
 No Slave, so use raw xfer api 
 end of device id reads 
		
		  Construct the addr and extract. Cast the higher shift
		  bits to avoid truncation due to size limit.
 Now compare with entries 
				
				  Assign a new dev_num to this Slave and
				  not mark it present. It will be marked
				  present after it reports ATTACHED on new
				  dev_num
 TODO: Park this device in Group 13 
			
			  add Slave device even if there is no platform
			  firmware description. There will be no driver probe
			  but the userintegration will be able to see the
			  device, enumeration status and device number in sysfs
		
		  Check till error out or retry (count) exhausts.
		  Device can drop off and rejoin during enumeration
		  so count till twice the bound.
  sdw_bus_prep_clk_stop: prepare Slave(s) for clock stop
  @bus: SDW bus instance
  Query Slave for clock stop mode and prepare for that mode.
	
	  In order to save on transition time, prepare
	  each Slave and then wait for all Slave(s) to be
	  prepared for clock stop.
	  If one of the Slave devices has lost sync and
	  replies with Command Ignored-ENODATA, we continue
	  the loop
 Identify if Slave(s) are available on Bus 
 Only prepare a Slave device if needed 
 Skip remaining clock stop preparation if no Slave is attached 
	
	  Don't wait for all Slaves to be ready if they follow the simple
	  state machine
		
		  if there are no Slave devices present and the reply is
		  Command_Ignored-ENODATA, we don't need to continue with the
		  flow and can just return here. The error code is not modified
		  and its handling left as an exercise for the caller.
 Inform slaves that prep is done 
  sdw_bus_clk_stop: stop bus clock
  @bus: SDW bus instance
  After preparing the Slaves for clock stop, stop the clock by broadcasting
  write to SCP_CTRL register.
	
	  broadcast clock stop now, attached Slaves will ACK this,
	  unattached will ignore
  sdw_bus_exit_clk_stop: Exit clock stop mode
  @bus: SDW bus instance
  This De-prepares the Slaves by exiting Clock Stop Mode 0. For the Slaves
  exiting Clock Stop Mode 1, they will be de-prepared after they enumerate
  back.
	
	  In order to save on transition time, de-prepare
	  each Slave and then wait for all Slave(s) to be
	  de-prepared after clock resume.
 Identify if Slave(s) are available on Bus 
 Only de-prepare a Slave device if needed 
 Skip remaining clock stop de-preparation if no Slave is attached 
	
	  Don't wait for all Slaves to be ready if they follow the simple
	  state machine
 SetClear port ready interrupt mask 
	
	  frequency base and scale registers are required for SDCA
	  devices. They may also be used for 1.2+non-SDCA devices,
	  but we will need a DisCo property to cover this case
	
	  map base frequency using Table 89 of SoundWire 1.2 spec.
	  The order of the tests just follows the specification, this
	  is not a selection between possible values or a search for
	  the best value but just a mapping.  Only one case per platform
	  is relevant.
	  Some BIOS have inconsistent values for mclk_freq but a
	  correct root so we force the mclk_freq to avoid variations.
	
	  map scale to Table 90 of SoundWire 1.2 spec - and check
	  that the scale is a power of two and maximum 64
 initialize scale for both banks 
 Clear bus clash interrupt before enabling interrupt mask 
 Clear parity interrupt before enabling interrupt mask 
	
	  Set SCP_INT1_MASK register, typically bus clash and
	  implementation-defined interrupt mask. The Parity detection
	  may not always be correct on startup so its use is
	  device-dependent, it might e.g. only be enabled in
	  steady-state after a couple of frames.
 Enable SCP interrupts 
 No need to continue if DP0 is not present 
 Enable DP0 interrupts 
		
		  Assumption: PORT_READY interrupt will be received only for
		  ports implementing Channel Prepare state machine (CP_SM)
 clear the interrupts but don't touch reserved and SDCA_CASCADE fields 
 Read DP0 interrupt again 
 filter to limit loop to interrupts identified in the first status read 
 we can get alerts while processing so keep retrying 
		
		  Assumption: PORT_READY interrupt will be received only
		  for ports implementing CP_SM.
 clear the interrupt but don't touch reserved fields 
 Read DPN interrupt again 
 filter to limit loop to interrupts identified in the first status read 
 we can get alerts while processing so keep retrying 
 Read Intstat 1, Intstat 2 and Intstat 3 registers 
		
		  Check parity, bus clash and Slave (impl defined)
		  interrupt
		
		  When bus clash or parity errors are detected, such errors
		  are unlikely to be recoverable errors.
		  TODO: In such scenario, reset bus. Make this configurable
		  via sysfs property with bus reset being the default.
 the SDCA interrupts are cleared in the codec driver .interrupt_callback() 
 Check port 0 - 3 interrupts 
 To get port number corresponding to bits, shift it 
 Check if cascade 2 interrupt is present 
 scp2 ports start from 4 
 now check last cascade 
 scp3 ports start from 11 
 Update the Slave driver 
 Ack interrupt 
 at this point all initial interrupt sources were handled 
		
		  Read status again to ensure no new interrupts arrived
		  while servicing interrupts.
		
		  Make sure no interrupts are pending, but filter to limit loop
		  to interrupts identified in the first status read
		
		  Exit loop if Slave is continuously in ALERT state even
		  after servicing the interrupt multiple times.
 we can get alerts while processing so keep retrying 
		
		  the slave status update is typically handled in an
		  interrupt thread, which can race with the driver
		  probe, e.g. when a module needs to be loaded.
		 
		  make sure the probe is complete before updating
		  status.
  sdw_handle_slave_status() - Handle Slave status
  @bus: SDW bus instance
  @status: Status for all Slave(s)
 first check if any Slaves fell off the bus 
		
		  programming a device number will have side effects,
		  so we deal with other devices at a later time
 Continue to check other slave statuses 
 Check all non-zero devices 
 keep track of request, used in pm_runtime resume 
 SPDX-License-Identifier: (GPL-2.0-only OR BSD-3-Clause)
 Copyright(c) 2015-2020 Intel Corporation.
  Bandwidth management algorithm based on 2^n gears
			
			  Slave devices were configured to access all channels
			  of the stream, which indicates that they operate in
			  'mirror mode'. Make sure we reset the port offset for
			  the next device in the list
 Check for first entry 
 Run loop for all groups to compute transport parameters 
 Calculate bandwidth per group 
  sdw_compute_port_params: Compute transport and port parameters
  @bus: SDW Bus instance
 Compute transport parameters for grouped streams 
  sdw_compute_bus_params: Compute bus parameters
  @bus: SDW Bus instance
		
		  TODO: Check all the Slave(s) port(s) audio modes and find
		  whether given clock rate is supported with glitchless
		  transition.
  sdw_compute_params: Compute bus, transport and port parameters
  @bus: SDW Bus instance
 Computes clock frequency, frame shape and frame frequency 
 Compute transport and port params 
 SPDX-License-Identifier: GPL-2.0-only
 Copyright(c) 2015-2020 Intel Corporation.
  Slave sysfs
  The sysfs for Slave reflects the MIPI description as given
  in the MIPI DisCo spec.
  status and device_number come directly from the MIPI SoundWire
  1.x specification.
  Base file is device
 	|---- status
 	|---- device_number
 	|---- modalias
 	|---- dev-properties
 		|---- mipi_revision
 		|---- wake_capable
 		|---- test_mode_capable
 		|---- clk_stop_mode1
 		|---- simple_clk_stop_capable
 		|---- clk_stop_timeout
 		|---- ch_prep_timeout
 		|---- reset_behave
 		|---- high_PHY_capable
 		|---- paging_support
 		|---- bank_delay_support
 		|---- p15_behave
 		|---- master_count
 		|---- source_ports
 		|---- sink_ports
 	|---- dp0
 		|---- max_word
 		|---- min_word
 		|---- words
 		|---- BRA_flow_controlled
 		|---- simple_ch_prep_sm
 		|---- imp_def_interrupts
 	|---- dpN_<sinksrc>
 		|---- max_word
 		|---- min_word
 		|---- words
 		|---- type
 		|---- max_grouping
 		|---- simple_ch_prep_sm
 		|---- ch_prep_timeout
 		|---- imp_def_interrupts
 		|---- min_ch
 		|---- max_ch
 		|---- channels
 		|---- ch_combinations
 		|---- max_async_buffer
 		|---- block_pack_mode
 		|---- port_encoding
  we don't use ATTRIBUTES_GROUP here since we want to add a subdirectory
  for device-level properties
  DP0 sysfs
  we don't use ATTRIBUTES_GROUP here since we want to add a subdirectory
  for dp0-level properties
  the status is shown in capital letters for UNATTACHED and RESERVED
  on purpose, to highligh users to the fact that these status values
  are not expected.
  we don't use ATTRIBUTES_GROUP here since the group is used in a
  separate file and can't be handled as a static.
 SPDX-License-Identifier: (GPL-2.0 OR BSD-3-Clause)
 Copyright(c) 2015-17 Intel Corporation.
 Initialize data structure 
 name shall be sdw:link:mfg:part:class 
 name shall be sdw:link:mfg:part:class:unique 
		
		  On err, don't free but drop ref as this will be freed
		  when release method is invoked.
 Extract link id from ADR, Bit 51 to 48 (included) 
 Check for link_id match 
  sdw_acpi_find_slaves() - Find Slave devices in Master ACPI node
  @bus: SDW bus instance
  Scans Master ACPI node for SDW child Slave devices and registers it.
 brute-force O(N^2) search for duplicates 
		
		  don't error check for sdw_slave_add as we want to continue
		  adding Slaves
  sdw_of_find_slaves() - Find Slave devices in master device tree node
  @bus: SDW bus instance
  Scans Master DT node for SDW child Slave devices and registers it.
 Check for link_id match 
 SPDX-License-Identifier: (GPL-2.0 OR BSD-3-Clause)
 Copyright(c) 2015-17 Intel Corporation.
  SDW Intel Init Routines
  Initializes and creates SDW devices based on ACPI and Hardware values
 alloc, init and add link devices 
 we don't use an IDA since we already have a link ID 
	
	  keep a handle on the allocated memory, to be used in all other functions.
	  Since the same pattern is used to skip links that are not enabled, there is
	  no need to check if ctx->ldev[i] is NULL later on.
 Add link information used in the driver probe 
 now follow the two-step initadd sequence 
 ldev will be freed with the put_device() and .release sequence 
  sdw_intel_enable_irq() - enabledisable Intel SoundWire IRQ
  @mmio_base: The mmio base of the control register
  @enable: true if enable
	
	  we need to allocfree memory manually and can't use devm:
	  this routine may be called from a workqueue, and not from
	  the parent .probe.
	  If devm_ was used, the memory might never be freed on errors.
	
	  allocate the array of pointers. The link-specific data is allocated
	  as part of the first loop below and released with the auxiliary_device_uninit().
	  If some links are disabled, the link pointer will remain NULL. Given that the
	  number of links is small, this is simpler than using a list to keep track of links.
		
		  init and add a device for each link
		 
		  The name of the device will be soundwire_intel.link.[i],
		  with the "soundwire_intel" module prefix automatically added
		  by the auxiliary bus core.
			
			  1 will be subtracted from i in the err label, but we need to call
			  intel_link_dev_unregister for this ldev, so plus 1 now
 Calculate number of slaves 
 Check SNDWLCAP.LCOUNT 
 Check HW supported vs property value 
 Startup SDW Master devices 
			
			  we need to prevent the parent PCI device
			  from entering pm_runtime suspend, so that
			  power rails to the SoundWire IP are not
			  turned off.
  sdw_intel_probe() - SoundWire Intel probe routine
  @res: resource data
  This registers an auxiliary device for each Master handled by the controller,
  and SoundWire Master and Slave devices will be created by the auxiliary
  device probe. All the information necessary is stored in the context, and
  the res argument pointer can be freed after this step.
  This function will be called after sdw_intel_acpi_scan() by SOF probe.
  sdw_intel_startup() - SoundWire Intel startup
  @ctx: SoundWire context allocated in the probe
  Startup Intel SoundWire controller. This function will be called after
  Intel Audio DSP is powered up.
  sdw_intel_exit() - SoundWire Intel exit
  @ctx: SoundWire context allocated in the probe
  Delete the controller instances created and cleanup
 Startup SDW Master devices 
 SPDX-License-Identifier: (GPL-2.0 OR BSD-3-Clause)
 Copyright(c) 2015-17 Intel Corporation.
  MIPI Discovery And Configuration (DisCo) Specification for SoundWire
  specifies properties to be implemented for SoundWire Masters and Slaves.
  The DisCo spec doesn't mandate these properties. However, SDW bus cannot
  work without knowing these values.
  The helper functions read the Master and Slave properties. Implementers
  of Master or Slave drivers can use any of the below three mechanisms:
     a) Use these APIs here as .read_prop() callback for Master and Slave
     b) Implement own methods and set those as .read_prop(), but invoke
     APIs in this file for generic read and override the values with
     platform specific data
     c) Implement ones own methods which do not use anything provided
     here
  sdw_master_read_prop() - Read Master properties
  @bus: SDW bus instance
 Find master handle 
	
	  Check the frequencies supported. If FW doesn't provide max
	  freq, then populate here by checking values.
 valid ports are 1 to 14 so apply mask 
 TODO: Read audio mode 
  sdw_slave_read_prop() - Read Slave properties
  @slave: SDW Slave
 Read dp0 properties 
	
	  Based on each DPn port, get source and sink dpn properties.
	  Also, some ports can operate as both source or sink.
 Allocate memory for set bits in port lists 
 Read dpn properties for source port(s) 
 Read dpn properties for sink port(s) 
 SPDX-License-Identifier: (GPL-2.0 OR BSD-3-Clause)
 Copyright(c) 2015-17 Intel Corporation.
  Cadence SoundWire Master module
  Used by Master driver
 Driver defaults 
  register accessor helpers
 Wait for bit to be set 
 Wait for bit to be self cleared 
  all changes to the MCP_CONFIG, MCP_CONTROL, MCP_CMDCTRL and MCP_PHYCTRL
  need to be confirmed with a write to MCP_CONFIG_UPDATE
  debugfs
 8 MCP registers 
 13 Status & Intr registers (offsets 0x70 and 0x74 not defined) 
 number of PDI and ports is interchangeable 
 Userspace changed the hardware state behind the kernel's back 
	
	  Resume Master device. If this results in a bus reset, the
	  Slave devices will re-attach and be re-enumerated.
	
	  wait long enough for Slave(s) to be in steady state. This
	  does not need to be super precise.
	
	  Take the bus lock here to make sure that any bus transactions
	  will be queued while we inject a parity error on a dummy read
 program hardware to inject parity error 
 commit changes 
 do a broadcast dummy read to avoid bus clashes 
 program hardware to disable parity error 
 commit changes 
 Continue bus operation with parity error injection disabled 
 Userspace changed the hardware state behind the kernel's back 
	
	  allow Master device to enter pm_runtime suspend. This may
	  also result in Slave devices suspending.
 Userspace changed the hardware state behind the kernel's back 
 Userspace changed the hardware state behind the kernel's back 
  sdw_cdns_debugfs_init() - Cadence debugfs init
  @cdns: Cadence instance
  @root: debugfs root
 CONFIG_DEBUG_FS 
  IO Calls
 check message response 
 fill response 
 Program the watermark level for RX FIFO 
 wait for timeout or response 
 Program the watermark level for RX FIFO 
 check response the writes 
 For NACK, NO ack, don't return err if we are in Broadcast mode 
 for defer only 1 message is supported 
 Create dummy message with valid device number 
  IRQ handling
 first check if Slave reported multiple status 
 check latest status extracted from PING commands 
  sdw_cdns_irq() - Cadence interrupt handler
  @irq: irq number
  @dev_id: irq context
 Check if the link is up 
 check for reserved values read as zero 
 Parity error detected by Master 
 Slave is driving bit slot during control word 
		
		  Multiple slaves trying to drive bit slot, or issue with
		  ownership of data bits or Slave gone bonkers
 just log which ports report an error 
 clear status w write1 
 Mask the Slave interrupt and wake thread 
		
		  Deal with possible race condition between interrupt
		  handling and disabling interrupts on suspend.
		 
		  If the master is in the process of disabling
		  interrupts, don't schedule a workqueue
  cdns_update_slave_status_work - update slave status in a work since we will need to handle
  other interrupts eg. CDNS_MCP_INT_RX_WL during the update slave
  process.
  @work: cdns worker thread
 combine the two status 
 clear and unmask Slave interrupt now 
 paranoia check to make sure self-cleared bits are indeed cleared 
 the following bits should be cleared immediately 
  init routines
  sdw_cdns_exit_reset() - Program reset parameters and start bus operations
  @cdns: Cadence instance
 keep reset delay unchanged to 4096 cycles 
 use hardware generated reset 
 commit changes 
 don't wait here 
  cdns_enable_slave_interrupts() - Enable SDW slave interrupts
  @cdns: Cadence instance
  @state: boolean for truefalse
  sdw_cdns_enable_interrupt() - Enable SDW interrupts
  @cdns: Cadence instance
  @state: True if we are trying to enable interrupt.
 enable detection of all slave state changes 
 enable detection of bus issues 
 port interrupt limited to test modes for now 
 enable detection of RX fifo level 
	
	  CDNS_MCP_INT_IRQ needs to be set otherwise all previous
	  settings are irrelevant
 parameter override 
 clear slave interrupt status before enabling interrupt 
	
	  Complete any on-going status updates before updating masks,
	  and cancel queued status updates.
	 
	  There could be a race with a new interrupt thrown before
	  the 3 mask updates below are complete, so in the interrupt
	  we use the 'interrupt_enabled' status to prevent new work
	  from being queued.
  sdw_cdns_pdi_init() - PDI initialization routine
  @cdns: Cadence instance
  @config: Stream configurations
 Allocate PDIs for PCMs 
 we allocate PDI0 and PDI1 which are used for Bulk 
 Update total number of PCM PDIs 
 Allocate PDIs for PDMs 
 Update total number of PDM PDIs 
 Set clock divider 
	
	  Frame shape changes after initialization have to be done
	  with the bank switch mechanism
 Set SSP interval to default value 
  sdw_cdns_init() - Cadence initialization
  @cdns: Cadence instance
 reset msg_count to default value of FIFOLEVEL 
 flush command FIFOs 
 Set cmd accept mode 
 Configure mcp config 
 enable bus operations with clock and data 
 Set cmd mode for Tx and Rx cmds 
 Disable sniffer mode 
 Disable auto bus release 
 Set Multi-master mode to take gsync into account 
 leave frame delay to hardware default of 0x1F 
 leave command retry to hardware default of 0 
 changes will be committed later 
 divider is 1(N+1) 
 use port params if there is no loopback, otherwise use source as is 
	
	  Note: Only full data port is supported on the Master side for
	  both PCM and PDM ports.
  sdw_cdns_is_clock_stop: Check clock status
  @cdns: Cadence instance
  sdw_cdns_clock_stop: Cadence clock stop configuration routine
  @cdns: Cadence instance
  @block_wake: prevent wakes if required by the platform
 Check suspend status 
	
	  Before entering clock stop we mask the Slave
	  interrupts. This helps avoid having to deal with e.g. a
	  Slave becoming UNATTACHED while the clock is being stopped
	
	  For specific platforms, it is required to be able to put
	  master into a state in which it ignores wake-up trials
	  in clock stop state
 commit changes 
 Prepare slaves for clock stop 
	
	  Enter clock stop mode and only report errors if there are
	  Slave devices present (ALERT or ATTACHED)
  sdw_cdns_clock_restart: Cadence PM clock restart configuration routine
  @cdns: Cadence instance
  @bus_reset: context may be lost while in low power modes and the bus
  may require a Severe Reset and re-enumeration after a wake.
 unmask Slave interrupts that were masked when stopping the clock 
 enable bus operations with clock and data 
  sdw_cdns_probe() - Cadence probe routine
  @cdns: Cadence instance
 first paranoia check 
 allocate and set dma info 
 for NULL stream we release allocated dma_data 
  cdns_find_pdi() - Find a free PDI
  @cdns: Cadence instance
  @offset: Starting offset
  @num: Number of PDIs
  @pdi: PDI instances
  @dai_id: DAI id
  Find a PDI for a given PDI array. The PDI num and dai_id are
  expected to match, return NULL otherwise.
  sdw_cdns_config_stream: Configure a stream
  @cdns: Cadence instance
  @ch: Channel count
  @dir: Data direction
  @pdi: PDI to be used
  sdw_cdns_alloc_pdi() - Allocate a PDI
  @cdns: Cadence instance
  @stream: Stream to be allocated
  @ch: Channel count
  @dir: Data direction
  @dai_id: DAI id
 check if we found a PDI, else find in bi-directional 
 SPDX-License-Identifier: GPL-2.0-only
 Copyright(c) 2017-2019 Intel Corporation.
 create the debugfs master-N 
 DP0 non-banked registers 
 DP0 Bank 0 registers 
 DP0 Bank 1 registers 
 SCP registers 
	
	  SCP Bank 01 registers are read-only and cannot be
	  retrieved from the Slave. The Master typically keeps track
	  of the current frame size so the information can be found
	  in other places
 DP1..14 registers 
 DPi registers 
 DPi Bank0 registers 
 DPi Bank1 registers 
 create the debugfs slave-name 
 SPDX-License-Identifier: (GPL-2.0 OR BSD-3-Clause)
 Copyright(c) 2021 Intel Corporation.
  Soundwire DMI quirks
  Some TigerLake devices based on an initial Intel BIOS do not expose
  the correct _ADR in the DSDT.
  Remap the bad _ADR values to the ones reported by hardware
  The initial version of the Dell SKU 0A3E did not expose the devices
  on the correct links.
 rt715 on link0 
 rt711 on link1 
 rt1308 on link2 
 quirk used for NUC15 'Bishop County' LAPBC510 and LAPBC710 skews 
 check if any address remap quirk applies 
 SPDX-License-Identifier: GPL-2.0-only
 Copyright(c) 2019-2020 Intel Corporation.
  The 3s value for autosuspend will only be used if there are no
  devices physically attached on a bus segment. In practice enabling
  the bus operation will result in children devices become active and
  the master device will only suspend when all its children are no
  longer active.
  The sysfs for properties reflects the MIPI description as given
  in the MIPI DisCo spec
  Base file is:
 	sdw-master-N
       |---- revision
       |---- clk_stop_modes
       |---- max_clk_freq
       |---- clk_freq
       |---- clk_gears
       |---- default_row
       |---- default_col
       |---- dynamic_shape
       |---- err_threshold
  sdw_master_device_add() - create a Linux Master Device representation.
  @bus: SDW bus instance
  @parent: parent device
  @fwnode: firmware node handle
		
		  On err, don't free but drop ref as this will be freed
		  when release method is invoked.
 add shortcuts to improve code readabilitycompactness 
  sdw_master_device_del() - delete a Linux Master Device representation.
  @bus: bus handle
  This function is the dual of sdw_master_device_add()
 SPDX-License-Identifier: GPL-2.0
 Copyright (c) 2019, Linaro Limited
 Port allocfree lock 
 pg register + offset 
 pg register + offset 
 write address register 
 Check for fifo underflow during read 
 Check if read data is available in read fifo 
 Check for fifo overflow during write 
 Check for space in write fifo before writing 
 Its assumed that write is okay as we do not get any status back 
 version 1.3 or less 
		
		  sleep for 10ms for MSM soundwire variant to allow broadcast
		  command to complete.
 wait for FIFO RD to complete to avoid overflow 
 wait for FIFO RD CMD complete to avoid overflow 
 wait 500 us before retry on fifo read failure 
SCP_Devid5 - Devid 4
SCP_Devid3 - DevId 2 Devid 1 Devid 0
 Now compare with entries 
 Clear Rows and Cols 
 Enable Auto enumeration 
 Mask soundwire interrupts 
 Configure No pings 
 Configure number of retries of a readwrite cmd 
 Only for versions >= 1.5.1 
 Set IRQ to PULSE 
 enable CPU IRQs 
 port config starts at offset 0 so -1 from actual port number 
 Port numbers start from 1 - 14
 hw parameters wil be ignored as we only support PDM 
 PDM dais are only tested for now 
 Valid port numbers are from 1-14, so mask out port 0 explicitly 
 Valid port number range is from 1-14 
 sentinel },
 SPDX-License-Identifier: GPL-2.0
 Copyright(c) 2015-17 Intel Corporation.
  sdw_get_device_id - find the matching SoundWire device id
  @slave: SoundWire Slave Device
  @drv: SoundWire Slave Driver
  The match is done by comparing the mfg_id and part_id from the
  struct sdw_device_id.
 modalias is sdw:m<mfg_id>p<part_id>v<version>c<class_id> 
	
	  fw description is mandatory to bind
	
	  attach to power domain but don't turn on (last arg)
 device is probed so let's read the properties now 
 init the sysfs as we have properties now 
	
	  Check for valid clk_stop_timeout, use DisCo worst case value of
	  300ms
	 
	  TODO: check the timeouts and driver removal case
  __sdw_register_driver() - register a SoundWire Slave driver
  @drv: driver to register
  @owner: owning moduledriver
  Return: zero on success, else a negative error code.
  sdw_unregister_driver() - unregisters the SoundWire Slave driver
  @drv: driver to unregister
 SPDX-License-Identifier: (GPL-2.0 OR BSD-3-Clause)
 Copyright(c) 2015-17 Intel Corporation.
  Soundwire Intel Master Driver
  debugconfig flags for the Intel SoundWire Master.
  Since we may have multiple masters active, we can have up to 8
  flags reused in each byte, with master0 using the ls-byte, etc.
  Read, write helpers for HW registers
  debugfs
		
		  the value 10 is the number of PDIs. We will need a
		  cleanup to remove hard-coded Intel configurations
		  from cadence_master.c
 Userspace changed the hardware state behind the kernel's back 
 Userspace changed the hardware state behind the kernel's back 
 CONFIG_DEBUG_FS 
  shim ops
	
	  The hardware relies on an internal counter, typically 4kHz,
	  to generate the SoundWire SSP - which defines a 'safe'
	  synchronization point between commands and audio transport
	  and allows for multi link synchronization. The SYNCPRD value
	  is only dependent on the oscillator clock provided to
	  the IP, so adjust based on _DSD properties reported in DSDT
	  tables. The values reported are based on either 24MHz
	  (CNLCML) or 38.4 MHz (ICLTGL+).
 we first need to program the SyncPRDCPU registers 
 set SyncPRD period 
 Set SyncCPU bit 
 Link power up sequence 
 only power-up enabled links 
 SyncCPU will change once link is active 
 this needs to be called with shim_lock 
 Switch to MIP from Glue logic 
 at this point Master IP has full control of the IOs 
 this needs to be called with shim_lock 
 Glue logic 
 at this point Integration Glue has full control of the IOs 
 Initialize Shim 
 Enable the wakeup 
 Disable the wake up interrupt 
 Clear wake status 
 Link power down sequence 
 only power-down enabled links 
			
			  we leave the sdw->cdns.link_up flag as false since we've disabled
			  the link at this point and cannot handle interrupts any longer.
 update SYNC register 
 Read SYNC register 
	
	  Set SyncGO bit to synchronously trigger a bank switch for
	  all the masters. A write to SYNCGO bit clears CMDSYNC bit for all
	  the Masters.
  PDI routines
 PCM Stream Capability 
 PDM Stream Capability 
		
		  WORKAROUND: on all existing Intel controllers, pdi
		  number 2 reports channel count as 1 even though it
		  supports 8 channels. Performing hardcoding for pdi
		  number 2.
 zero based values for channel count in register 
 First update PCM streams followed by PDM streams 
 the Bulk and PCM streams are not contiguous 
	
	  Program stream parameters to stream SHIM register
	  This is applicable for PCM stream only.
 the Bulk and PCM streams are not contiguous 
 Program Stream config ALH register 
  bank switch routines
 Write to register only for multi-link 
 Write to register only for multi-link 
 Read SYNC register 
	
	  post_bank_switch() ops is called from the bus in loop for
	  all the Masters in the steam with the expectation that
	  we trigger the bankswitch for the only first Master in the list
	  and do nothing for the other Masters
	 
	  So, set the SYNCGO bit only if CMDSYNC bit is set for any Master.
  DAI routines
 do run-time configurations for SHIM, ALH and PDIPORT 
 store pdi and hw_params, may be needed in prepare step 
 Inform DSP about PDI stream number 
 Port configuration 
		
		  .prepare() is called after system resume, where we
		  need to reinitialize the SHIMALHCadence IP.
		  .prepare() is also called to deal with underflows,
		  but in those cases we cannot touch ALHSHIM
		  registers
 configure stream 
 Inform DSP about PDI stream number 
	
	  The sdw stream state will transition to RELEASED when stream->
	  master_list is empty. So the stream state will transition to
	  DEPREPARED for the first cpu-dai and to RELEASED for the last
	  cpu-dai.
		
		  we don't have a .suspend dai_ops, and we don't have access
		  to the substream, so let's mark both capture and playback
		  DMA contexts as suspended
 TODO: Read supported ratesformats from hardware 
 DAIs are created based on total number of PDIs supported 
 Create PCM DAIs 
 Create PDM DAIs 
 Find master handle 
 the values reported by BIOS are the 2x clock, not the bus clock 
 Initialize with default handler to read all DisCo properties 
 read Intel-specific properties 
 Initialize shim and controller 
  probe and init (aux_dev_id argument is required by function prototype but not used)
 Set property read ops 
 set driver data, accessed by snd_soc_dai_get_drvdata() 
 use generic bandwidth allocation algorithm 
	
	  Ignore BIOS err_threshold, it's a really bad idea when dealing
	  with multiple hardware synchronized links
		
		  hardware-based synchronization is required regardless
		  of the number of segments used by a stream: SSP-based
		  synchronization is gated by gsync when the multi-master
		  mode is set.
 Initialize shim, controller 
 Read the PDI config and initialize cadence PDI 
	
	  follow recommended programming flows to avoid timeouts when
	  gsync is enabled
 Register DAIs 
 Enable runtime PM 
		
		  To keep the clock running we need to prevent
		  pm_runtime suspend from happening by increasing the
		  reference count.
		  This quirk is specified by the parent PCI device in
		  case of specific latency requirements. It will have
		  no effect if pm_runtime is disabled by the user via
		  a module parameter for testing purposes.
	
	  The runtime PM status of Slave devices is "Unsupported"
	  until they report as ATTACHED. If they don't, e.g. because
	  there are no Slave devices populated or if the power-on is
	  delayed or dependent on a power switch, the Master will
	  remain active and prevent its parent from suspending.
	 
	  Conditionally force the pm_runtime core to re-evaluate the
	  Master status in the absence of any Slave activity. A quirk
	  is provided to e.g. deal with Slaves that may be powered on
	  with a delay. A more complete solution would require the
	  definition of Master properties.
	
	  Since pm_runtime is already disabled, we don't decrease
	  the refcount when the clock_stop_quirk is
	  SDW_INTEL_CLK_STOP_NOT_ALLOWED
 disable WAKEEN interrupt ASAP to prevent interrupt flood 
	
	  resume the Master, which will generate a bus reset and result in
	  Slaves re-attaching and be re-enumerated. The SoundWire physical
	  device which generated the wake will trigger an interrupt, which
	  will in turn cause the corresponding Linux Slave device to be
	  resumed and the Slave codec driver to check the status.
  PM calls
		
		  if we've enabled clock stop, and the parent is suspended, the SHIM registers
		  are not accessible and the shim wake cannot be disabled.
		  The only solution is to resume the entire bus to full power
		
		  If any operation in this block fails, we keep going since we don't want
		  to prevent system suspend from happening and errors should be recoverable
		  on resume.
		
		  first resume the device for this link. This will also by construction
		  resume the PCI parent device.
		
		  Continue resuming the entire bus (parent + child devices) to exit
		  the clock stop mode. If there are no devices connected on this link
		  this is a no-op.
		  The resume to full power could have been implemented with a .prepare
		  step in SoundWire codec drivers. This would however require a lot
		  of code to handle an Intel-specific corner case. It is simpler in
		  practice to add a loop at the link level.
				
				  paranoia check: this should not happen with the .prepare
				  resume to full power
 follow required sequence from runtime_pm.rst 
	
	  make sure all Slaves are tagged as UNATTACHED and provide
	  reason for reinitialization
	
	  follow recommended programming flows to avoid timeouts when
	  gsync is enabled
	
	  after system resume, the pm_runtime suspend() may kick in
	  during the enumeration, before any children device force the
	  master device to remain active.  Using pm_runtime_get()
	  routines is not really possible, since it'd prevent the
	  master from suspending.
	  A reasonable compromise is to update the pm_runtime
	  counters and delay the pm_runtime suspend by several
	  seconds, by when all enumeration should be complete.
		
		  make sure all Slaves are tagged as UNATTACHED and provide
		  reason for reinitialization
		
		  follow recommended programming flows to avoid
		  timeouts when gsync is enabled
		
		  An exception condition occurs for the CLK_STOP_BUS_RESET
		  case if one or more masters remain active. In this condition,
		  all the masters are powered on for they are in the same power
		  domain. Master can preserve its context for clock stop0, so
		  there is no need to clear slave status and reset bus.
			
			  make sure all Slaves are tagged as UNATTACHED and
			  provide reason for reinitialization
			
			  follow recommended programming flows to avoid
			  timeouts when gsync is enabled
			
			  Re-initialize the IP since it was powered-off
 auxiliary_driver_register() sets .name to be the modname 
 SPDX-License-Identifier: GPL-2.0-only
 Copyright(c) 2015-2020 Intel Corporation.
  Since we can't use ARRAY_SIZE, hard-code number of dpN attributes.
  This needs to be updated when adding new attributes - an error will be
  flagged on a mismatch.
 allocate attributes, last one is NULL 
 paranoia check for editing mistakes 
 SPDX-License-Identifier: GPL-2.0
  Virtio-based remote processor messaging bus
  Copyright (C) 2011 Texas Instruments, Inc.
  Copyright (C) 2011 Google, Inc.
  Ohad Ben-Cohen <ohad@wizery.com>
  Brian Swetland <swetland@google.com>
  struct virtproc_info - virtual remote processor state
  @vdev:	the virtio device
  @rvq:	rx virtqueue
  @svq:	tx virtqueue
  @rbufs:	kernel address of rx buffers
  @sbufs:	kernel address of tx buffers
  @num_bufs:	total number of buffers for rx and tx
  @buf_size:   size of one rx or tx buffer
  @last_sbuf:	index of last tx buffer used
  @bufs_dma:	dma base addr of the buffers
  @tx_lock:	protects svq, sbufs and sleepers, to allow concurrent senders.
 		sending a message might require waking up a dozing remote
 		processor, which involves sleeping, hence the mutex.
  @endpoints:	idr of local endpoints, allows fast retrieval
  @endpoints_lock: lock of the endpoints set
  @sendq:	wait queue of sending contexts waiting for a tx buffers
  @sleepers:	number of senders that are waiting for a tx buffer
  This structure stores the rpmsg state of a given virtio remote processor
  device (there might be several virtio proc devices for each physical
  remote processor).
 The feature bitmap for virtio rpmsg 
 RP supports name service notifications 
  struct rpmsg_hdr - common header for all rpmsg messages
  @src: source address
  @dst: destination address
  @reserved: reserved for future use
  @len: length of payload (in bytes)
  @flags: message flags
  @data: @len bytes of message payload data
  Every message sent(received) on the rpmsg bus begins with this header.
  struct virtio_rpmsg_channel - rpmsg channel descriptor
  @rpdev: the rpmsg channel device
  @vrp: the virtio remote processor device this channel belongs to
  This structure stores the channel that links the rpmsg device to the virtio
  remote processor device.
  We're allocating buffers of 512 bytes each for communications. The
  number of buffers will be computed from the number of buffers supported
  by the vring, upto a maximum of 512 buffers (256 in each direction).
  Each buffer will have 16 bytes for the msg header and 496 bytes for
  the payload.
  This will utilize a maximum total space of 256KB for the buffers.
  We might also want to add support for user-provided buffers in time.
  This will allow bigger buffer size flexibility, and can also be used
  to achieve zero-copy messaging.
  Note that these numbers are purely a decision of this driver - we
  can change this without changing anything in the firmware of the remote
  processor.
  Local addresses are dynamically allocated on-demand.
  We do not dynamically assign addresses from the low 1024 range,
  in order to reserve that address range for predefined services.
  rpmsg_sg_init - initialize scatterlist according to cpu address location
  @sg: scatterlist to fill
  @cpu_addr: virtual address of the buffer
  @len: buffer length
  An internal function filling scatterlist according to virtual address
  location (in vmalloc or in kernel).
  __ept_release() - deallocate an rpmsg endpoint
  @kref: the ept's reference count
  This function deallocates an ept, and is invoked when its @kref refcount
  drops to zero.
  Never invoke this function directly!
	
	  At this point no one holds a reference to ept anymore,
	  so we can directly free it
 for more info, see below documentation of rpmsg_create_ept() 
 do we need to allocate a local address ? 
 bind the endpoint to an rpmsg address (and allocate one if needed) 
  __rpmsg_destroy_ept() - destroy an existing rpmsg endpoint
  @vrp: virtproc which owns this ept
  @ept: endpoing to destroy
  An internal function which destroy an ept without assuming it is
  bound to an rpmsg channel. This is needed for handling the internal
  name service endpoint, which isn't bound to an rpmsg channel.
  See also __rpmsg_create_ept().
 make sure new inbound messages can't find this ept anymore 
 make sure in-flight inbound messages won't invoke cb anymore 
 need to tell remote processor's name service about this channel ? 
 tell remote processor's name service we're removing this channel 
  create an rpmsg channel using its name and address info.
  this function will be used to create both static and dynamic
  channels.
 make sure a similar channel doesn't already exist 
 decrement the matched device's refcount back 
 Link the channel to our vrp 
 Assign public information to the rpmsg_device 
	
	  rpmsg server channels has predefined local address (for now),
	  and their existence needs to be announced remotely
 super simple buffer "allocator" that is just enough for now 
 support multiple concurrent senders 
	
	  either pick the next unused tx buffer
	  (half of our buffers are used for sending messages)
 or recycle a used one 
  rpmsg_upref_sleepers() - enable "tx-complete" interrupts, if needed
  @vrp: virtual remote processor state
  This function is called before a sender is blocked, waiting for
  a tx buffer to become available.
  If we already have blocking senders, this function merely increases
  the "sleepers" reference count, and exits.
  Otherwise, if this is the first sender to block, we also enable
  virtio's tx callbacks, so we'd be immediately notified when a tx
  buffer is consumed (we rely on virtio's tx callback in order
  to wake up sleeping senders as soon as a tx buffer is used by the
  remote processor).
 support multiple concurrent senders 
 are we the first sleeping context waiting for tx buffers ? 
 enable "tx-complete" interrupts before dozing off 
  rpmsg_downref_sleepers() - disable "tx-complete" interrupts, if needed
  @vrp: virtual remote processor state
  This function is called after a sender, that waited for a tx buffer
  to become available, is unblocked.
  If we still have blocking senders, this function merely decreases
  the "sleepers" reference count, and exits.
  Otherwise, if there are no more blocking senders, we also disable
  virtio's tx callbacks, to avoid the overhead incurred with handling
  those (now redundant) interrupts.
 support multiple concurrent senders 
 are we the last sleeping context waiting for tx buffers ? 
 disable "tx-complete" interrupts 
  rpmsg_send_offchannel_raw() - send a message across to the remote processor
  @rpdev: the rpmsg channel
  @src: source address
  @dst: destination address
  @data: payload of message
  @len: length of payload
  @wait: indicates whether caller should block in case no TX buffers available
  This function is the base implementation for all of the rpmsg sending API.
  It will send @data of length @len to @dst, and say it's from @src. The
  message will be sent to the remote processor which the @rpdev channel
  belongs to.
  The message is sent using one of the TX buffers that are available for
  communication with this remote processor.
  If @wait is true, the caller will be blocked until either a TX buffer is
  available, or 15 seconds elapses (we don't want callers to
  sleep indefinitely due to misbehaving remote processors), and in that
  case -ERESTARTSYS is returned. The number '15' itself was picked
  arbitrarily; there's little point in asking drivers to provide a timeout
  value themselves.
  Otherwise, if @wait is false, and there are no TX buffers available,
  the function will immediately fail, and -ENOMEM will be returned.
  Normally drivers shouldn't use this function directly; instead, drivers
  should use the appropriate rpmsg_{try}send{to, _offchannel} API
  (see includelinuxrpmsg.h).
  Returns 0 on success and an appropriate error value on failure.
 bcasting isn't allowed 
	
	  We currently use fixed-sized buffers, and therefore the payload
	  length is limited.
	 
	  One of the possible improvements here is either to support
	  user-provided buffers (and then we can also support zero-copy
	  messaging), or to improve the buffer allocator, to support
	  variable-length buffer sizes.
 grab a buffer 
 no free buffer ? wait for one (but bail after 15 seconds) 
 enable "tx-complete" interrupts, if not already enabled 
		
		  sleep until a free buffer is available or 15 secs elapse.
		  the timeout period is not configurable because there's
		  little point in asking drivers to specify that.
		  if later this happens to be required, it'd be easy to add.
 disable "tx-complete" interrupts if we're the last sleeper 
 timeout ? 
 add message to the remote processor's virtqueue 
		
		  need to reclaim the buffer here, otherwise it's lost
		  (memory won't leak, but rpmsg won't use it again for TX).
		  this will wait for a buffer management overhaul.
 tell the remote processor it has a pending message to read 
	
	  We currently use fixed-sized buffers, so trivially sanitize
	  the reported payload length.
 use the dst addr to fetch the callback of the appropriate user 
 let's make sure no one deallocates ept while we use it 
 make sure ept->cb doesn't go away while we use it 
 farewell, ept, we don't need you anymore 
 publish the real size of the buffer 
 add the buffer back to the remote processor's virtqueue 
 called when an rx buffer is used, and it's time to digest a message 
 tell the remote processor we added another available rx buffer 
  This is invoked whenever the remote processor completed processing
  a TX msg we just sent it, and the buffer is put back to the used ring.
  Normally, though, we suppress this "tx complete" interrupt in order to
  avoid the incurred overhead.
 wake up potential senders that are waiting for a tx buffer 
  Called to expose to user a devrpmsg_ctrlX interface allowing to
  create endpoint-to-endpoint communication without associated RPMsg channel.
  The endpoints are rattached to the ctrldev RPMsg device.
 Link the channel to the vrp 
 Assign public information to the rpmsg_device 
 We expect two virtqueues, rx and tx (and in this order) 
 we expect symmetric txrx vrings 
 we need less buffers if vrings are small 
 allocate coherent memory for the buffers 
 half of the buffers is dedicated for RX 
 and half is dedicated for TX 
 set up the receive buffers 
 sanity check; this can't really happen 
 suppress "tx-complete" interrupts 
 if supported by the remote processor, enable the name service 
 Link the channel to our vrp 
 Assign public information to the rpmsg_device 
	
	  Prepare to kick but don't notify yet - we can't do this before
	  device is ready.
 From this point on, we can notify and get callbacks. 
 tell the remote processor it can start sending messages 
	
	  this might be concurrent with callbacks, but we are only
	  doing notify, not a full kick here, so that's ok.
 SPDX-License-Identifier: GPL-2.0
 Copyright 2019 Google LLC.
  struct rpmsg_ns_msg - dynamic name service announcement message
  @name: name of remote service that is published
  @addr: address of remote service that is published
  This message is sent across to publish a new service. When we receive these
  messages, an appropriate rpmsg channel (i.e device) is created. In turn, the
  ->probe() handler of the appropriate rpmsg driver will be invoked
   (ifas-soon-as one is registered).
	
	  TODO: This currently is same as mtk_rpmsg_send, and wait until SCP
	  received the last command.
	
	  the name service ept does _not_ belong to a real rpmsg channel,
	  and is handled by the rpmsg bus itself.
	  for sanity reasons, make sure a valid rpdev has _not_ sneaked
	  in somehow.
 don't trust the remote processor for null terminating the name 
 a dedicated endpoint handles the name service msgs 
	
	  Destroy the name service endpoint here, to avoid new channel being
	  created after the rpmsg_unregister_device loop below.
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) STMicroelectronics 2020 - All Rights Reserved
  rpmsg_ns_register_device() - register name service device based on rpdev
  @rpdev: prepared rpdev to be used for creating endpoints
  This function wraps rpmsg_register_device() preparing the rpdev for use as
  basis for the rpmsg name service device.
 invoked when a name service announcement arrives 
 don't trust the remote processor for null terminating the name 
	
	  Create the NS announcement service endpoint associated to the RPMsg
	  device. The endpoint will be automatically destroyed when the RPMsg
	  device will be deleted.
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2014-2017, The Linux Foundation. All rights reserved.
  Copyright (c) 2017, Linaro Ltd.
  struct do_cleanup_msg - The data structure for an SSR do_cleanup message
  @version:	The G-Link SSR protocol version
  @command:	The G-Link SSR command - do_cleanup
  @seq_num:	Sequence number
  @name_len:	Length of the name of the subsystem being restarted
  @name:	G-Link edge name of the subsystem being restarted
  struct cleanup_done_msg - The data structure for an SSR cleanup_done message
  @version:	The G-Link SSR protocol version
  @response:	The G-Link SSR response to a do_cleanup command, cleanup_done
  @seq_num:	Sequence number
  G-Link SSR protocol commands
 Notifier list for all registered glink_ssr instances 
  qcom_glink_ssr_notify() - notify GLINK SSR about stopped remoteproc
  @ssr_name:	name of the remoteproc that has been stopped
 SPDX-License-Identifier: GPL-2.0
  Copyright (c) 2015, Sony Mobile Communications AB.
  Copyright (c) 2012-2013, The Linux Foundation. All rights reserved.
  The Qualcomm Shared Memory communication solution provides point-to-point
  channels for clients to send and receive streaming or packet based data.
  Each channel consists of a control item (channel info) and a ring buffer
  pair. The channel info carry information related to channel state, flow
  control and the offsets within the ring buffer.
  All allocated channels are listed in an allocation table, identifying the
  pair of items by name, type and remote processor.
  Upon creating a new channel the remote processor allocates channel info and
  ring buffer items from the smem heap and populate the allocation table. An
  interrupt is sent to the other end of the channel and a scan for new
  channels should be done. A channel never goes away, it will only change
  state.
  The remote processor signals it intent for bring up the communication
  channel by setting the state of its end of the channel to "opening" and
  sends out an interrupt. We detect this change and register a smd device to
  consume the channel. Upon finding a consumer we finish the handshake and the
  channel is up.
  Upon closing a channel, the remote processor will update the state of its
  end of the channel and signal us, we will then unregister any attached
  device and close our end of the channel.
  Devices attached to a channel can use the qcom_smd_send function to push
  data to the channel, this is done by copying the data into the tx ring
  buffer, updating the pointers in the channel info and signaling the remote
  processor.
  The remote processor does the equivalent when it transfer data and upon
  receiving the interrupt we check the channel info for new data and delivers
  this to the attached device. If the device is not ready to receive the data
  we leave it in the ring buffer for now.
  This lists the various smem heap items relevant for the allocation table and
  smd channel entries.
  struct qcom_smd_edge - representing a remote processor
  @dev:		device associated with this edge
  @name:		name of this edge
  @of_node:		of_node handle for information related to this edge
  @edge_id:		identifier of this edge
  @remote_pid:		identifier of remote processor
  @irq:		interrupt for signals on this edge
  @ipc_regmap:		regmap handle holding the outgoing ipc register
  @ipc_offset:		offset within @ipc_regmap of the register for ipc
  @ipc_bit:		bit in the register at @ipc_offset of @ipc_regmap
  @mbox_client:	mailbox client handle
  @mbox_chan:		apcs ipc mailbox channel handle
  @channels:		list of all channels detected on this edge
  @channels_lock:	guard for modifications of @channels
  @allocated:		array of bitmaps representing already allocated channels
  @smem_available:	last available amount of smem triggering a channel scan
  @new_channel_event:	wait queue for new channel events
  @scan_work:		work item for discovering new channels
  @state_work:		work item for edge state changes
  SMD channel states.
  struct qcom_smd_channel - smd channel struct
  @edge:		qcom_smd_edge this channel is living on
  @qsept:		reference to a associated smd endpoint
  @registered:		flag to indicate if the channel is registered
  @name:		name of the channel
  @state:		local state of the channel
  @remote_state:	remote state of the channel
  @state_change_event:	state change event
  @info:		byte aligned outgoingincoming channel info
  @info_word:		word aligned outgoingincoming channel info
  @tx_lock:		lock to make writes to the channel mutually exclusive
  @fblockread_event:	wakeup event tied to tx fBLOCKREADINTR
  @tx_fifo:		pointer to the outgoing ring buffer
  @rx_fifo:		pointer to the incoming ring buffer
  @fifo_size:		size of each ring buffer
  @bounce_buffer:	bounce buffer for reading wrapped packets
  @cb:			callback function registered for this channel
  @recv_lock:		guard for rx info modifications and cb pointer
  @pkt_size:		size of the currently handled packet
  @drvdata:		driver private data
  @list:		lite entry for @channels in qcom_smd_edge
  Format of the smd_info smem items, for byte aligned channels.
  Format of the smd_info smem items, for word aligned channels.
  struct qcom_smd_alloc_entry - channel allocation entry
  @name:	channel name
  @cid:	channel index
  @flags:	channel flags and edge id
  @ref_count:	reference count of the channel
  Each smd packet contains a 20 byte header, with the first 4 being the length
  of the packet.
  Signal the remote processor associated with 'channel'.
		
		  We can ignore a failing mbox_send_message() as the only
		  possible cause is that the FIFO in the framework is full of
		  other writes to the same bit.
  Initialize the tx channel info
  Set the callback for a channel, with appropriate locking
  Calculate the amount of data available in the rx fifo
  Set tx channel state and inform the remote processor
  Copy count bytes of data using 32bit accesses, if that's required.
  Copy count bytes of data using 32bit accesses, if that is required.
  Read count bytes of data from the rx fifo into buf, but don't advance the
  tail.
  Advance the rx tail by count bytes.
  Read out a single packet from the rx fifo and deliver it to the device
 Use bounce buffer if the data wraps 
 Only forward the tail if the client consumed the data 
  Per channel interrupt handling
 Handle state changes 
 Indicate that we have seen any state change 
 Signal waiting qcom_smd_send() about the interrupt 
 Don't consume any data until we've opened the channel 
 Indicate that we've seen the new data 
 Consume data 
 Indicate that we have seen and updated tail 
 Signal the remote that we've consumed the data (if requested) 
 Ensure ordering of channel info updates 
  The edge interrupts are triggered by the remote processor on state changes,
  channel info updates or when new channels are created.
	
	  Handle state changes or data on each of the channels on this edge
	
	  Creating a new channel requires allocating an smem entry, so we only
	  have to scan if the amount of available space in smem have changed
	  since last scan.
  Calculate how much space is available in the tx fifo.
  Write count bytes of data into channel, possibly wrapping in the ring buffer
  qcom_smd_send - write data to smd channel
  @channel:	channel handle
  @data:	buffer of data to write
  @len:	number of bytes to write
  @wait:	flag to indicate if write has ca wait
  This is a blocking write of len bytes into the channel's tx ring buffer and
  signal the remote end. It will sleep until there is enough space available
  in the tx buffer, utilizing the fBLOCKREADINTR signaling mechanism to avoid
  polling.
 Word aligned channels only accept word size aligned data 
 Reject packets that are too big 
 Highlight the fact that if we enter the loop below we might sleep 
 Wait without holding the tx_lock 
 Fail if the channel was closed 
 Ensure ordering of channel info updates 
  Helper for opening a channel
	
	  Packets are maximum 4k, but reduce if the fifo is smaller
 Wait for remote to enter opening or opened 
 Wait for remote to enter opened 
  Helper for closing and resetting a channel
 Wait up to HZ for the channel to appear 
  Finds the device_node for the smd child interested in this channel.
  Create a smd client device for channel that is being opened.
 Link qsdev to our SMD edge 
 Assign callbacks for rpmsg_device 
 Assign public information to the rpmsg_device 
  Allocate the qcom_smd_channel object for a newly found smd channel,
  retrieving and validating the smem items involved.
	
	  Use the size of the item to figure out which channel info struct to
	  use.
 The channel consist of a rx and tx fifo of equal size 
  Scans the allocation table for any newly allocated channels, calls
  qcom_smd_create_channel() to create representations of these and add
  them to the edge's list of channels.
  This per edge worker scans smem for any new channels and register these. It
  then scans all registered channels for state changes that should be handled
  by creating or destroying smd client devices for the registered channels.
  LOCKING: edge->channels_lock only needs to cover the list operations, as the
  worker is killed before any channels are deallocated
	
	  Register a device for any closed channel where the remote processor
	  is showing interest in opening the channel.
	
	  Unregister the device for any channel that is opened where the
	  remote processor is closing the channel.
  Parses an of_node describing an edge.
  Release function for an edge.
   Reset the state of each associated channel and free the edge context.
  qcom_smd_register_edge() - register an edge based on an device_node
  @parent:    parent device for the edge
  @node:      device_node describing the edge
  Returns an edge reference, or negative ERR_PTR() on failure.
  qcom_smd_unregister_edge() - release an edge and its children
  @edge:      edge reference acquired from qcom_smd_register_edge
 Wait for smem 
  Shut down all smd clients by making sure that each edge stops processing
  events and scanning for new channels, then call destroy on the devices.
 SPDX-License-Identifier: GPL-2.0
  Copyright (c) 2016, Linaro Ltd.
  Copyright (c) 2012, Michal Simek <monstr@monstr.eu>
  Copyright (c) 2012, PetaLogix
  Copyright (c) 2011, Texas Instruments, Inc.
  Copyright (c) 2011, Google, Inc.
  Based on rpmsg performance statistics driver by Michal Simek, which in turn
  was based on TI & Google OMX rpmsg driver.
  struct rpmsg_ctrldev - control device for instantiating endpoint devices
  @rpdev:	underlaying rpmsg device
  @cdev:	cdev for the ctrl device
  @dev:	device for the ctrl device
  struct rpmsg_eptdev - endpoint device context
  @dev:	endpoint device
  @cdev:	cdev for the endpoint device
  @rpdev:	underlaying rpmsg device
  @chinfo:	info used to open the endpoint
  @ept_lock:	synchronization of @ept modifications
  @ept:	rpmsg endpoint reference, when open
  @queue_lock:	synchronization of @queue operations
  @queue:	incoming message queue
  @readq:	wait object for incoming queue
 wake up any blocked readers 
 wake up any blocking processes, waiting for new data 
 Close the endpoint, if it's not already destroyed by the parent 
 Discard all SKBs 
 Wait for data in the queue 
 Wait until we get data or the endpoint goes away 
 We lost the endpoint while waiting 
 We can now rely on the release function for cleanup 
 We can now rely on the release function for cleanup 
 Destroy all endpoints 
 SPDX-License-Identifier: GPL-2.0
  remote processor messaging bus
  Copyright (C) 2011 Texas Instruments, Inc.
  Copyright (C) 2011 Google, Inc.
  Ohad Ben-Cohen <ohad@wizery.com>
  Brian Swetland <swetland@google.com>
  rpmsg_create_channel() - create a new rpmsg channel
  using its name and address info.
  @rpdev: rpmsg device
  @chinfo: channel_info to bind
  Returns a pointer to the new rpmsg device on success, or NULL on error.
  rpmsg_release_channel() - release a rpmsg channel
  using its name and address info.
  @rpdev: rpmsg device
  @chinfo: channel_info to bind
  Returns 0 on success or an appropriate error value.
  rpmsg_create_ept() - create a new rpmsg_endpoint
  @rpdev: rpmsg channel device
  @cb: rx callback handler
  @priv: private data for the driver's use
  @chinfo: channel_info with the local rpmsg address to bind with @cb
  Every rpmsg address in the system is bound to an rx callback (so when
  inbound messages arrive, they are dispatched by the rpmsg bus using the
  appropriate callback handler) by means of an rpmsg_endpoint struct.
  This function allows drivers to create such an endpoint, and by that,
  bind a callback, and possibly some private data too, to an rpmsg address
  (either one that is known in advance, or one that will be dynamically
  assigned for them).
  Simple rpmsg drivers need not call rpmsg_create_ept, because an endpoint
  is already created for them when they are probed by the rpmsg bus
  (using the rx callback provided when they registered to the rpmsg bus).
  So things should just work for simple drivers: they already have an
  endpoint, their rx callback is bound to their rpmsg address, and when
  relevant inbound messages arrive (i.e. messages which their dst address
  equals to the src address of their rpmsg channel), the driver's handler
  is invoked to process it.
  That said, more complicated drivers might need to allocate
  additional rpmsg addresses, and bind them to different rx callbacks.
  To accomplish that, those drivers need to call this function.
  Drivers should provide their @rpdev channel (so the new endpoint would belong
  to the same remote processor their channel belongs to), an rx callback
  function, an optional private data (which is provided back when the
  rx callback is invoked), and an address they want to bind with the
  callback. If @addr is RPMSG_ADDR_ANY, then rpmsg_create_ept will
  dynamically assign them an available rpmsg address (drivers should have
  a very good reason why not to always use RPMSG_ADDR_ANY here).
  Returns a pointer to the endpoint on success, or NULL on error.
  rpmsg_destroy_ept() - destroy an existing rpmsg endpoint
  @ept: endpoing to destroy
  Should be used by drivers to destroy an rpmsg endpoint previously
  created with rpmsg_create_ept(). As with other types of "free" NULL
  is a valid parameter.
  rpmsg_send() - send a message across to the remote processor
  @ept: the rpmsg endpoint
  @data: payload of message
  @len: length of payload
  This function sends @data of length @len on the @ept endpoint.
  The message will be sent to the remote processor which the @ept
  endpoint belongs to, using @ept's address and its associated rpmsg
  device destination addresses.
  In case there are no TX buffers available, the function will block until
  one becomes available, or a timeout of 15 seconds elapses. When the latter
  happens, -ERESTARTSYS is returned.
  Can only be called from process context (for now).
  Returns 0 on success and an appropriate error value on failure.
  rpmsg_sendto() - send a message across to the remote processor, specify dst
  @ept: the rpmsg endpoint
  @data: payload of message
  @len: length of payload
  @dst: destination address
  This function sends @data of length @len to the remote @dst address.
  The message will be sent to the remote processor which the @ept
  endpoint belongs to, using @ept's address as source.
  In case there are no TX buffers available, the function will block until
  one becomes available, or a timeout of 15 seconds elapses. When the latter
  happens, -ERESTARTSYS is returned.
  Can only be called from process context (for now).
  Returns 0 on success and an appropriate error value on failure.
  rpmsg_send_offchannel() - send a message using explicit srcdst addresses
  @ept: the rpmsg endpoint
  @src: source address
  @dst: destination address
  @data: payload of message
  @len: length of payload
  This function sends @data of length @len to the remote @dst address,
  and uses @src as the source address.
  The message will be sent to the remote processor which the @ept
  endpoint belongs to.
  In case there are no TX buffers available, the function will block until
  one becomes available, or a timeout of 15 seconds elapses. When the latter
  happens, -ERESTARTSYS is returned.
  Can only be called from process context (for now).
  Returns 0 on success and an appropriate error value on failure.
  rpmsg_trysend() - send a message across to the remote processor
  @ept: the rpmsg endpoint
  @data: payload of message
  @len: length of payload
  This function sends @data of length @len on the @ept endpoint.
  The message will be sent to the remote processor which the @ept
  endpoint belongs to, using @ept's address as source and its associated
  rpdev's address as destination.
  In case there are no TX buffers available, the function will immediately
  return -ENOMEM without waiting until one becomes available.
  Can only be called from process context (for now).
  Returns 0 on success and an appropriate error value on failure.
  rpmsg_trysendto() - send a message across to the remote processor, specify dst
  @ept: the rpmsg endpoint
  @data: payload of message
  @len: length of payload
  @dst: destination address
  This function sends @data of length @len to the remote @dst address.
  The message will be sent to the remote processor which the @ept
  endpoint belongs to, using @ept's address as source.
  In case there are no TX buffers available, the function will immediately
  return -ENOMEM without waiting until one becomes available.
  Can only be called from process context (for now).
  Returns 0 on success and an appropriate error value on failure.
  rpmsg_poll() - poll the endpoint's send buffers
  @ept:	the rpmsg endpoint
  @filp:	file for poll_wait()
  @wait:	poll_table for poll_wait()
  Returns mask representing the current state of the endpoint's send buffers
  rpmsg_trysend_offchannel() - send a message using explicit srcdst addresses
  @ept: the rpmsg endpoint
  @src: source address
  @dst: destination address
  @data: payload of message
  @len: length of payload
  This function sends @data of length @len to the remote @dst address,
  and uses @src as the source address.
  The message will be sent to the remote processor which the @ept
  endpoint belongs to.
  In case there are no TX buffers available, the function will immediately
  return -ENOMEM without waiting until one becomes available.
  Can only be called from process context (for now).
  Returns 0 on success and an appropriate error value on failure.
  rpmsg_get_mtu() - get maximum transmission buffer size for sending message.
  @ept: the rpmsg endpoint
  This function returns maximum buffer size available for a single outgoing message.
  Return: the maximum transmission size on success and an appropriate error
  value on failure.
  match a rpmsg channel with a channel info struct.
  this is used to make sure we're not creating rpmsg devices for channels
  that already exist.
 found a match ! 
 sysfs show configuration fields 
 for more info, see DocumentationABItestingsysfs-bus-rpmsg 
 rpmsg devices and drivers are matched using the service name 
 match rpmsg channel and rpmsg driver 
  when an rpmsg driver is probed with a channel, we seamlessly create
  it an endpoint, binding its rx callback to a unique local rpmsg
  address.
  if we need to, we also announce about this channel to the remote
  processor (needed in case the driver is exposing an rpmsg service).
  find an existing channel using its name + address properties,
  and destroy it
  __register_rpmsg_driver() - register an rpmsg driver with the rpmsg bus
  @rpdrv: pointer to a struct rpmsg_driver
  @owner: owning moduledriver
  Returns 0 on success, and an appropriate error value on failure.
  unregister_rpmsg_driver() - unregister an rpmsg driver from the rpmsg bus
  @rpdrv: pointer to a struct rpmsg_driver
  Returns 0 on success, and an appropriate error value on failure.
 SPDX-License-Identifier: GPL-2.0
  Copyright (c) 2016, Linaro Ltd
 size of struct read_notif_request 
 Ensure head is always aligned to 8 bytes 
 Ensure ordering of fifo and head update 
 SPDX-License-Identifier: GPL-2.0
  Copyright (c) 2016-2017, Linaro Ltd
 grt0 
 ap2r 
 r2ap 
 Header length comes from glink native and is always 4 byte aligned 
	
	  Move the unaligned tail of the message to the padding chunk, to
	  ensure word aligned accesses
 Pipe specific accessors 
 SPDX-License-Identifier: GPL-2.0
  Copyright (c) 2016-2017, Linaro Ltd
  struct glink_defer_cmd - deferred incoming control message
  @node:	list node
  @msg:	message header
  @data:	payload of the message
  Copy of a received control message, to be added to @rx_queue and processed
  by @rx_work of @qcom_glink.
  struct glink_core_rx_intent - RX intent
  RX intent
  @data: pointer to the data (may be NULL for zero-copy)
  @id: remote or local intent ID
  @size: size of the original intent (do not modify)
  @reuse: To mark if the intent can be reused after first use
  @in_use: To mark if intent is already in use for the channel
  @offset: next write offset (initially 0)
  @node:	list node
  struct qcom_glink - driver context, relates to one remote subsystem
  @dev:	reference to the associated struct device
  @mbox_client: mailbox client
  @mbox_chan:  mailbox channel
  @rx_pipe:	pipe object for receive FIFO
  @tx_pipe:	pipe object for transmit FIFO
  @irq:	IRQ for signaling incoming events
  @rx_work:	worker for handling received control messages
  @rx_lock:	protects the @rx_queue
  @rx_queue:	queue of received control messages to be processed in @rx_work
  @tx_lock:	synchronizes operations on the tx fifo
  @idr_lock:	synchronizes @lcids and @rcids modifications
  @lcids:	idr of all channels with a known local channel id
  @rcids:	idr of all channels with a known remote channel id
  @features:	remote features
  @intentless:	flag to indicate that there is no intent
  @tx_avail_notify: Waitqueue for pending tx tasks
  @sent_read_notify: flag to check cmd sent or not
  struct glink_channel - internal representation of a channel
  @rpdev:	rpdev reference, only used for primary endpoints
  @ept:	rpmsg endpoint this channel is associated with
  @glink:	qcom_glink context handle
  @refcount:	refcount for the channel object
  @recv_lock:	guard for @ept.cb
  @name:	unique channel nameidentifier
  @lcid:	channel id, in local space
  @rcid:	channel id, in remote space
  @intent_lock: lock for protection of @liids, @riids
  @liids:	idr of all local intents
  @riids:	idr of all remote intents
  @intent_work: worker responsible for transmitting rx_done packets
  @done_intents: list of intents that needs to be announced rx_done
  @buf:	receive buffer, for gathering fragments
  @buf_offset:	write offset in @buf
  @buf_size:	size of current @buf
  @open_ack:	completed once remote has acked the open-request
  @open_req:	completed once open-request has been received
  @intent_req_lock: Synchronises multiple intent requests
  @intent_req_result: Result of intent request
  @intent_req_comp: Completion for intent_req signalling
 Setup glink internal glink_channel data 
 cancel pending rx_done work 
 Free all non-reuse intents pending rx_done work 
 Reject packets that are too big 
 Wait without holding the tx_lock 
  qcom_glink_send_open_req() - send a RPM_CMD_OPEN request to the remote
  @glink: Ptr to the glink edge
  @channel: Ptr to the channel that the open req is sent
  Allocates a local channel id and sends a RPM_CMD_OPEN message to the remote.
  Will return with refcount held, regardless of outcome.
  Returns 0 on success, negative errno otherwise.
 We don't send RX_DONE to intentless systems 
 Take it off the tree of receive intents 
 Schedule the sending of a rx_done indication 
  qcom_glink_receive_version() - receive versionfeatures from remote system
  @glink:	pointer to transport interface
  @version:	remote version
  @features:	remote features
  This function is called in response to a remote-initiated versionfeature
  negotiation sequence.
  qcom_glink_receive_version_ack() - receive negotiation ack from remote system
  @glink:	pointer to transport interface
  @version:	remote version response
  @features:	remote features response
  This function is called in response to a local-initiated versionfeature
  negotiation sequence and is the counter-offer from the remote side based
  upon the initial version and feature set requested.
 Version negotiation failed 
  qcom_glink_send_intent_req_ack() - convert an rx intent request ack cmd to
  	wire format and transmit
  @glink:	The transport to transmit on.
  @channel:	The glink channel
  @granted:	The request response to encode.
  Return: 0 on success or standard Linux error code.
  qcom_glink_advertise_intent - convert an rx intent cmd to wire format and
 			   transmit
  @glink:	The transport to transmit on.
  @channel:	The local channel
  @intent:	The intent to pass on to remote.
  Return: 0 on success or standard Linux error code.
  qcom_glink_handle_intent_req() - Receive a request for rx_intent
 					    from remote side
  @glink:      Pointer to the transport interface
  @cid:	Remote channel ID
  @size:	size of the intent
  The function searches for the local channel to which the request for
  rx_intent has arrived and allocates and notifies the remote back
 Drop the message 
 Might have an ongoing, fragmented, message to append 
 The packet header lied, drop payload 
 Handle message when no fragments remain to be received 
 To wakeup any blocking writers 
 Locally initiated rpmsg_create_ept 
 qcom_glink_send_open_req() did register the channel in lcids
 Release qcom_glink_send_open_req() reference 
 Release qcom_glink_alloc_channel() reference 
 Remote initiated rpmsg_create_ept 
	
	  Send a close request to "undo" our open-ack. The close-ack will
	  release qcom_glink_send_open_req() reference and the last reference
	  will be relesed after receiving remote_close or transport unregister
	  by calling qcom_glink_native_remove().
 Channel is now open, advertise base set of intents 
 Decouple the potential rpdev from the channel 
 We found an available intent 
 Mark intent available if we failed 
 Mark intent available if we failed 
  Finds the device_node for the glink child interested in this channel.
 The opening dance was initiated by the remote 
 Release the reference, iff we took it 
 cancel pending rx_done work 
 To wakeup any blocking writers 
 Decouple the potential rpdev from the channel 
 cancel any pending deferred rx_work 
 Release qcom_glink_alloc_channel() reference 
 Release any defunct local channels, waiting for close-ack 
 Release any defunct local channels, waiting for close-req 
 SPDX-License-Identifier: GPL-2.0
  of_icc_bulk_get() - get interconnect paths
  @dev: the device requesting the path
  @num_paths: the number of icc_bulk_data
  @paths: the table with the paths we want to get
  Returns 0 on success or negative errno otherwise.
  icc_bulk_put() - put a list of interconnect paths
  @num_paths: the number of icc_bulk_data
  @paths: the icc_bulk_data table with the paths being put
  icc_bulk_set_bw() - set bandwidth to a set of paths
  @num_paths: the number of icc_bulk_data
  @paths: the icc_bulk_data table containing the paths and bandwidth
  Returns 0 on success or negative errno otherwise.
  icc_bulk_enable() - enable a previously disabled set of paths
  @num_paths: the number of icc_bulk_data
  @paths: the icc_bulk_data table containing the paths and bandwidth
  Returns 0 on success or negative errno otherwise.
  icc_bulk_disable() - disable a set of interconnect paths
  @num_paths: the number of icc_bulk_data
  @paths: the icc_bulk_data table containing the paths and bandwidth
 SPDX-License-Identifier: GPL-2.0
  Interconnect framework core driver
  Copyright (c) 2017-2019, Linaro Ltd.
  Author: Georgi Djakov <georgi.djakov@linaro.org>
 draw providers as cluster subgraphs 
 draw nodes 
 draw internal links 
 draw external links 
 reference to previous node was saved during path traversal 
 count the hops including the source 
 reset the traversed state 
  We want the path to honor all bandwidth requests, so the average and peak
  bandwidth requirements from each consumer are aggregated at each node.
  The aggregation is platform specific, so each platform can customize it by
  implementing its own aggregate() function.
 during boot use the initial bandwidth as a floor value 
 both endpoints should be valid master-slave pairs 
 set the constraints 
 of_icc_xlate_onecell() - Translate function using a single index.
  @spec: OF phandle args to map into an interconnect node.
  @data: private data (pointer to struct icc_onecell_data)
  This is a generic translate function that can be used to model simple
  interconnect providers that have one device tree node and provide
  multiple interconnect nodes. A single cell is used as an index into
  an array of icc nodes specified in the icc_onecell_data struct when
  registering the provider.
  of_icc_get_from_provider() - Look-up interconnect node
  @spec: OF phandle args to use for look-up
  Looks for interconnect provider under the node specified by @spec and if
  found, uses xlate function of the provider to map phandle args to node.
  Returns a valid pointer to struct icc_node_data on success or ERR_PTR()
  on failure.
  of_icc_get_by_index() - get a path handle from a DT node based on index
  @dev: device pointer for the consumer device
  @idx: interconnect path index
  This function will search for a path between two endpoints and return an
  icc_path handle on success. Use icc_put() to release constraints when they
  are not needed anymore.
  If the interconnect API is disabled, NULL is returned and the consumer
  drivers will still build. Drivers are free to handle this specifically,
  but they don't have to.
  Return: icc_path pointer on success or ERR_PTR() on error. NULL is returned
  when the API is disabled or the "interconnects" DT property is missing.
	
	  When the consumer DT node do not have "interconnects" property
	  return a NULL path to skip setting constraints.
	
	  We use a combination of phandle and specifier for endpoint. For now
	  lets support only global ids and extend this in the future if needed
	  without breaking DT compatibility.
  of_icc_get() - get a path handle from a DT node based on name
  @dev: device pointer for the consumer device
  @name: interconnect path name
  This function will search for a path between two endpoints and return an
  icc_path handle on success. Use icc_put() to release constraints when they
  are not needed anymore.
  If the interconnect API is disabled, NULL is returned and the consumer
  drivers will still build. Drivers are free to handle this specifically,
  but they don't have to.
  Return: icc_path pointer on success or ERR_PTR() on error. NULL is returned
  when the API is disabled or the "interconnects" DT property is missing.
	
	  When the consumer DT node do not have "interconnects" property
	  return a NULL path to skip setting constraints.
	
	  We use a combination of phandle and specifier for endpoint. For now
	  lets support only global ids and extend this in the future if needed
	  without breaking DT compatibility.
  icc_set_tag() - set an optional tag on a path
  @path: the path we want to tag
  @tag: the tag value
  This function allows consumers to append a tag to the requests associated
  with a path, so that a different aggregation could be done based on this tag.
  icc_get_name() - Get name of the icc path
  @path: reference to the path returned by icc_get()
  This function is used by an interconnect consumer to get the name of the icc
  path.
  Returns a valid pointer on success, or NULL otherwise.
  icc_set_bw() - set bandwidth constraints on an interconnect path
  @path: reference to the path returned by icc_get()
  @avg_bw: average bandwidth in kilobytes per second
  @peak_bw: peak bandwidth in kilobytes per second
  This function is used by an interconnect consumer to express its own needs
  in terms of bandwidth for a previously requested path between two endpoints.
  The requests are aggregated and each node is updated accordingly. The entire
  path is locked by a mutex to ensure that the set() is completed.
  The @path can be NULL when the "interconnects" DT properties is missing,
  which will mean that no constraints will be set.
  Returns 0 on success, or an appropriate error code otherwise.
 update the consumer request for this path 
 aggregate requests for this node 
  icc_get() - return a handle for path between two endpoints
  @dev: the device requesting the path
  @src_id: source device port id
  @dst_id: destination device port id
  This function will search for a path between two endpoints and return an
  icc_path handle on success. Use icc_put() to release
  constraints when they are not needed anymore.
  If the interconnect API is disabled, NULL is returned and the consumer
  drivers will still build. Drivers are free to handle this specifically,
  but they don't have to.
  Return: icc_path pointer on success, ERR_PTR() on error or NULL if the
  interconnect API is disabled.
  icc_put() - release the reference to the icc_path
  @path: interconnect path
  Use this function to release the constraints on a path when the path is
  no longer needed. The constraints will be re-aggregated.
 check if node already exists 
  icc_node_create() - create a node
  @id: node id
  Return: icc_node pointer on success, or ERR_PTR() on error
  icc_node_destroy() - destroy a node
  @id: node id
  icc_link_create() - create a link between two nodes
  @node: source node id
  @dst_id: destination node id
  Create a link between two nodes. The nodes might belong to different
  interconnect providers and the @dst_id node might not exist (if the
  provider driver has not probed yet). So just create the @dst_id node
  and when the actual provider driver is probed, the rest of the node
  data is filled.
  Return: 0 on success, or an error code otherwise
  icc_link_destroy() - destroy a link between two nodes
  @src: pointer to source node
  @dst: pointer to destination node
  Return: 0 on success, or an error code otherwise
  icc_node_add() - add interconnect node to interconnect provider
  @node: pointer to the interconnect node
  @provider: pointer to the interconnect provider
 get the initial bandwidth values and sync them with hardware 
  icc_node_del() - delete interconnect node from interconnect provider
  @node: pointer to the interconnect node
  icc_nodes_remove() - remove all previously added nodes from provider
  @provider: the interconnect provider we are removing nodes from
  Return: 0 on success, or an error code otherwise
  icc_provider_add() - add a new interconnect provider
  @provider: the interconnect provider that will be added into topology
  Return: 0 on success, or an error code otherwise
  icc_provider_del() - delete previously added interconnect provider
  @provider: the interconnect provider that will be removed from topology
  Return: 0 on success, or an error code otherwise
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) 2019 Brian Masney <masneyb@onstation.org>
  Based on MSM bus code from downstream MSM kernel sources.
  Copyright (c) 2012-2013 The Linux Foundation. All rights reserved.
  Based on qcs404.c
  Copyright (C) 2019 Linaro Ltd
  Here's a rough representation that shows the various buses that form the
  Network On Chip (NOC) for the msm8974:
                          Multimedia Subsystem (MMSS)
          |----------+-----------------------------------+-----------|
                     |                                   |
                     |                                   |
         Config      |                     Bus Interface | Memory Controller
        |------------+-+-----------|        |------------+-+-----------|
                       |                                   |
                       |                                   |
                       |             System                |
      |--------------+-+---------------------------------+-+-------------|
                     |                                   |
                     |                                   |
         Peripheral  |                           On Chip | Memory (OCMEM)
        |------------+-------------|        |------------+-------------|
  struct msm8974_icc_provider - Qualcomm specific interconnect provider
  @provider: generic interconnect provider
  @bus_clks: the clk_bulk_data table of bus clocks
  @num_clks: the total number of clk_bulk_data entries
  struct msm8974_icc_node - Qualcomm specific interconnect nodes
  @name: the node name used in debugfs
  @id: a unique node identifier
  @links: an array of nodes where we can go next while traversing
  @num_links: the total number of @links
  @buswidth: width of the interconnect between a node and the bus (bytes)
  @mas_rpm_id:	RPM ID for devices that are bus masters
  @slv_rpm_id:	RPM ID for devices that are bus slaves
  @rate: current bus clock rate in Hz
 Virtual NoC is needed for connection to OCMEM 
	
	  Setting the bandwidth requests for some nodes fails and this same
	  behavior occurs on the downstream MSM 3.4 kernel sources based on
	  errors like this in that kernel:
	 
	    msm_rpm_get_error_from_ack(): RPM NACK Unsupported resource
	    AXI: msm_bus_rpm_req(): RPM: Ack failed
	    AXI: msm_bus_rpm_commit_arb(): RPM: Req fail: mas:32, bw:240000000
	 
	  Since there's no publicly available documentation for this hardware,
	  and the bandwidth for some nodes in the path can be set properly,
	  let's not return an error.
 Set bandwidth on source node 
 Set bandwidth on destination node 
 wait for the RPM proxy 
 populate links 
 SPDX-License-Identifier: GPL-2.0
  Copyright (c) 2020, The Linux Foundation. All rights reserved.
 OSM Register offsets 
 EPSS Register offsets 
  struct qcom_osm_l3_node - Qualcomm specific interconnect nodes
  @name: the node name used in debugfs
  @links: an array of nodes where we can go next while traversing
  @id: a unique node identifier
  @num_links: the total number of @links
  @buswidth: width of the interconnect between a node and the bus
 HW should be in enabled state to proceed 
 Two of the same frequencies signify end of table 
 Cast away const and add it back in qcom_osm_l3_set() 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2019-2020, The Linux Foundation. All rights reserved.
  Copyright (c) 2021, Linaro Limited
 SPDX-License-Identifier: GPL-2.0
  Copyright (c) 2021, The Linux Foundation. All rights reserved.
 SPDX-License-Identifier: GPL-2.0
  Qualcomm SDX55 interconnect driver
  Author: Manivannan Sadhasivam <manivannan.sadhasivam@linaro.org>
  Copyright (c) 2021, Linaro Ltd.
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) 2019 Linaro Ltd
 SPDX-License-Identifier: GPL-2.0
  Copyright (c) 2018-2020, The Linux Foundation. All rights reserved.
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) 2020 Linaro Ltd
 BIMC QoS 
 NoC QoS 
 LIMITCMDS is not present on M_BKE_HEALTH_3 
	 QoS Priority: The QoS Health parameters are getting considered
	  only if we are NOT in Bypass Mode.
 Set BKE_EN to 1 when Fixed, Regulator or Limiter Mode 
 Must be updated one at a time, P1 first, P0 last 
 send bandwidth request message to the RPM processor 
 set bandwidth directly from the AP 
 wait for the RPM proxy 
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) 2018-2020 Linaro Ltd
  Author: Georgi Djakov <georgi.djakov@linaro.org>
 SPDX-License-Identifier: GPL-2.0
  Copyright (c) 2020-2021, The Linux Foundation. All rights reserved.
  struct bcm_voter - Bus Clock Manager voter
  @dev: reference to the device that communicates with the BCM
  @np: reference to the device node to match bcm voters
  @lock: mutex to protect commit and wakesleep lists in the voter
  @commit_list: list containing bcms to be committed to hardware
  @ws_list: list containing bcms that have different wakesleep votes
  @voter_node: list of bcm voters
  @tcs_wait: mask for which buckets require TCS completion
 Ensure that small votes aren't lost. 
	
	  Set the wait for completion flag on command that need to be completed
	  before the next command.
		
		  Batch the BCMs in such a way that we do not split them in
		  multiple payloads when they are under the same VCD. This is
		  to ensure that every BCM is committed since we only set the
		  commit bit on the last BCM request of every VCD.
  of_bcm_voter_get - gets a bcm voter handle from DT node
  @dev: device pointer for the consumer device
  @name: name for the bcm voter device
  This function will match a device_node pointer for the phandle
  specified in the device DT and return a bcm_voter handle on success.
  Returns bcm_voter pointer or ERR_PTR() on error. EPROBE_DEFER is returned
  when matching bcm voter is yet to be found.
  qcom_icc_bcm_voter_add - queues up the bcm nodes that require updates
  @voter: voter that the bcms are being added to
  @bcm: bcm to add to the commit and wake sleep list
  qcom_icc_bcm_voter_commit - generates and commits tcs cmds based on bcms
  @voter: voter that needs flushing
  This function generates a set of AMC commands and flushes to the BCM device
  associated with the voter. It conditionally generate WAKE and SLEEP commands
  based on deltas between WAKESLEEP requirements. The ws_list persists
  through multiple commit requests and bcm nodes are removed only when the
  requirements for WAKE matches SLEEP.
  Returns 0 on success, or an appropriate error code otherwise.
	
	  Pre sort the BCMs based on VCD for ease of generating a command list
	  that groups the BCMs with the same VCD together. VCDs are numbered
	  with lowest being the most expensive time wise, ensuring that
	  those commands are being sent the earliest in the queue. This needs
	  to be sorted every commit since we can't guarantee the order in which
	  the BCMs are added to the list.
	
	  Construct the command list based on a pre ordered list of BCMs
	  based on VCD.
		
		  Only generate WAKE and SLEEP commands if a resource's
		  requirements change as the execution environment transitions
		  between different power states.
 SPDX-License-Identifier: GPL-2.0
  RPM over SMD communication wrapper for interconnects
  Copyright (C) 2019 Linaro Ltd
  Author: Georgi Djakov <georgi.djakov@linaro.org>
 SPDX-License-Identifier: GPL-2.0
  Copyright (c) 2020, The Linux Foundation. All rights reserved.
  Copyright (c) 2021, Linaro Ltd.
 SPDX-License-Identifier: GPL-2.0
  Qualcomm SDM630SDM636SDM660 Network-on-Chip (NoC) QoS driver
  Copyright (C) 2020, AngeloGioacchino Del Regno <kholk11@gmail.com>
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) 2020 Linaro Ltd
  Author: Jun Nie <jun.nie@linaro.org>
  With reference of msm8916 interconnect driver of Georgi Djakov.
 SPDX-License-Identifier: GPL-2.0
  Copyright (c) 2020, The Linux Foundation. All rights reserved.
  qcom_icc_pre_aggregate - cleans up stale values from prior icc_set
  @node: icc node to operate on
  qcom_icc_aggregate - aggregate bw for buckets indicated by tag
  @node: node to aggregate
  @tag: tag to indicate which buckets to aggregate
  @avg_bw: new bw to sum aggregate
  @peak_bw: new bw to max aggregate
  @agg_avg: existing aggregate avg bw val
  @agg_peak: existing aggregate peak bw val
  qcom_icc_set - set the constraints based on path
  @src: source node for the path to set constraints on
  @dst: destination node for the path to set constraints on
  Return: 0 on success, or an error code otherwise
  qcom_icc_bcm_init - populates bcm aux data and connect qnodes
  @bcm: bcm to be initialized
  @dev: associated provider device
  Return: 0 on success, or an error code otherwise
 BCM is already initialised
 Link Qnodes to their respective BCMs 
 SPDX-License-Identifier: GPL-2.0
  Copyright (c) 2020, The Linux Foundation. All rights reserved.
 SPDX-License-Identifier: GPL-2.0
  Copyright (c) 2020, The Linux Foundation. All rights reserved.
 SPDX-License-Identifier: GPL-2.0
  Copyright (c) 2020, The Linux Foundation. All rights reserved.
 SPDX-License-Identifier: GPL-2.0-only
  Exynos generic interconnect provider driver
  Copyright (c) 2020 Samsung Electronics Co., Ltd.
  Authors: Artur Świgoń <a.swigon@samsung.com>
           Sylwester Nawrocki <s.nawrocki@samsung.com>
 One interconnect node per provider 
 parent nodes are optional 
 Get the interconnect target node 
	
	  Register a PM QoS request for the parent (devfreq) device.
 SPDX-License-Identifier: GPL-2.0
  Interconnect framework driver for i.MX SoC
  Copyright (c) 2019, BayLibre
  Copyright (c) 2019-2020, NXP
  Author: Alexandre Bailon <abailon@baylibre.com>
  Author: Leonard Crestez <leonard.crestez@nxp.com>
 private icc_node data 
 imx_icc_node_destroy() - Destroy an imx icc_node, including private data 
 Allow scaling to be disabled on a per-node basis 
 icc_onecell_data is indexed by node_id, unlike nodes param 
 SPDX-License-Identifier: GPL-2.0
  Interconnect framework driver for i.MX8MM SoC
  Copyright (c) 2019, BayLibre
  Copyright (c) 2019-2020, NXP
  Author: Alexandre Bailon <abailon@baylibre.com>
  Author: Leonard Crestez <leonard.crestez@nxp.com>
  Describe bus masters, slaves and connections between them
  This is a simplified subset of the bus diagram, there are several other
  PL301 nics which are skippedmerged into PL301_MAIN
 VPUMIX 
 GPUMIX 
 DISPLAYMIX 
 HSIO 
 Audio 
 Ethernet 
 Other 
 SPDX-License-Identifier: GPL-2.0
  Interconnect framework driver for i.MX8MQ SoC
  Copyright (c) 2019-2020, NXP
  Describe bus masters, slaves and connections between them
  This is a simplified subset of the bus diagram, there are several other
  PL301 nics which are skippedmerged into PL301_MAIN
 VPUMIX 
 GPUMIX 
 DISPMIX (only for DCSS) 
 USBMIX 
 PL301_DISPLAY (IPs other than DCSS, inside SUPERMIX) 
 AUDIO 
 ENET 
 OTHER 
 SPDX-License-Identifier: GPL-2.0
  Interconnect framework driver for i.MX8MN SoC
  Copyright (c) 2019-2020, NXP
  Describe bus masters, slaves and connections between them
  This is a simplified subset of the bus diagram, there are several other
  PL301 nics which are skippedmerged into PL301_MAIN
 GPUMIX 
 DISPLAYMIX 
 USB goes straight to NOC 
 Audio 
 Ethernet 
 Other 
  Timer device implementation for SGI UV platform.
  This file is subject to the terms and conditions of the GNU General Public
  License.  See the file "COPYING" in the main directory of this archive
  for more details.
  Copyright (c) 2009 Silicon Graphics, Inc.  All rights reserved.
 name of the device, usually in dev 
  Period in femtoseconds (10^-15 s)
  uv_mmtimer_ioctl - ioctl interface for devuv_mmtimer
  @file: file structure for the device
  @cmd: command to execute
  @arg: optional argument to command
  Executes the command specified by @cmd.  Returns 0 for success, < 0 for
  failure.
  Valid commands:
  %MMTIMER_GETOFFSET - Should return the offset (relative to the start
  of the page where the registers are mapped) for the counter in question.
  %MMTIMER_GETRES - Returns the resolution of the clock in femto (10^-15)
  seconds
  %MMTIMER_GETFREQ - Copies the frequency of the clock in Hz to the address
  specified by @arg
  %MMTIMER_GETBITS - Returns the number of bits in the clock's counter
  %MMTIMER_MMAPAVAIL - Returns 1 if registers can be mmap'd into userspace
  %MMTIMER_GETCOUNTER - Gets the current value in the counter and places it
  in the address specified by @arg.
 offset of the counter 
		
		  Starting with HUB rev 2.0, the UV RTC register is
		  replicated across all cachelines of it's own page.
		  This allows faster simultaneous reads from a given socket.
		 
		  The offset returned is in 64 bit units.
 resolution of the clock in 10^-15 s 
 frequency in Hz 
 number of bits in the clock 
  uv_mmtimer_mmap - maps the clock's registers into userspace
  @file: file structure for the device
  @vma: VMA to map the registers into
  Calls remap_pfn_range() to map the clock's registers into
  the calling process' address space.
  uv_mmtimer_init - device initialization routine
  Does initial setup for the uv_mmtimer device.
	
	  Sanity check the cyclessec variable
 SPDX-License-Identifier: GPL-2.0-only
  CMOSNV-RAM driver for Linux
  Copyright (C) 1997 Roman Hodek <Roman.Hodek@informatik.uni-erlangen.de>
  idea by and with help from Richard Jelinek <rj@suse.de>
  Portions copyright (c) 2001,2002 Sun Microsystems (thockin@sun.com)
  This driver allows you to access the contents of the non-volatile memory in
  the mc146818rtc.h real-time clock. This chip is built into all PCs and into
  many Atari machines. In the former it's called "CMOS-RAM", in the latter
  "NVRAM" (NV stands for non-volatile).
  The data are supplied as a (seekable) character device, devnvram. The
  size of this file is dependent on the controller.  The usual size is 114,
  the number of freely available bytes in the memory (i.e., not used by the
  RTC itself).
  Checksums over the NVRAM contents are managed by this driver. In case of a
  bad checksum, reads and writes return -EIO. The checksum can be initialized
  to a sane state either by ioctl(NVRAM_INIT) (clear whole NVRAM) or
  ioctl(NVRAM_SETCKS) (doesn't change contents, just makes checksum valid
  again; use with care!)
  	1.1	Cesar Barros: SMP locking fixes
  		added changelog
  	1.2	Erik Gilling: Cobalt Networks support
  		Tim Hockin: general cleanup, Cobalt support
  	1.3	Wim Van Sebroeck: convert PRINT_PROC to seq_file
 #times opened 
 special open modes 
 opened for writing (exclusive) 
 opened with O_EXCL 
  These functions are provided to be called internally or by other parts of
  the kernel. It's up to the caller to ensure correct checksum before reading
  or after writing (needs to be done only once).
  It is worth noting that these functions all access bytes of general
  purpose memory in the NVRAM - that is to say, they all add the
  NVRAM_FIRST_BYTE offset.  Pass them offsets into NVRAM as if you did not
  know about the RTC cruft.
 Note that all calls to CMOS_READ and CMOS_WRITE must be done with
  rtc_lock held. Due to the index-portdata-port design of the RTC, we
  don't want two different things trying to get to it at once. (e.g. the
  periodic 11 min sync from kerneltimentp.c vs. this driver.)
 This races nicely with trying to read with checksum checking (nvram_read) 
 On PCs, the checksum is built only over bytes 2..31 
 CONFIG_X86 
  The are the file operation function for user access to devnvram
 initialize NVRAM contents and checksum 
		 just set checksum, contents unchanged (maybe useful after
 CONFIG_X86 || CONFIG_M68K 
 Prevent multiple readerswriters if desired. 
 Prevent multiple writers if the set_checksum ioctl is implemented. 
 if only one instance is open, clear the EXCL bit 
 CONFIG_X86 && CONFIG_PROC_FS 
 SPDX-License-Identifier: GPL-2.0-or-later
 toshiba.c -- Linux driver for accessing the SMM on Toshiba laptops
  Copyright (c) 1996-2001  Jonathan A. Buzzard (jonathan@buzzard.org.uk)
  Valuable assistance and patches from:
      Tom May <tom@you-bastards.com>
      Rob Napier <rnapier@employees.org>
  Fn status port numbers for machine ID's courtesy of
      0xfc02: Scott Eisert <scott.e@sky-eye.com>
      0xfc04: Steve VanDevender <stevev@efn.org>
      0xfc08: Garth Berry <garth@itsbruce.net>
      0xfc0a: Egbert Eich <eich@xfree86.org>
      0xfc10: Andrew Lofthouse <Andrew.Lofthouse@robins.af.mil>
      0xfc11: Spencer Olson <solson@novell.com>
      0xfc13: Claudius Frankewitz <kryp@gmx.de>
      0xfc15: Tom May <tom@you-bastards.com>
      0xfc17: Dave Konrad <konrad@xenia.it>
      0xfc1a: George Betzos <betzos@engr.colostate.edu>
      0xfc1b: Munemasa Wada <munemasa@jnovel.co.jp>
      0xfc1d: Arthur Liu <armie@slap.mine.nu>
      0xfc5a: Jacques L'helgoualc'h <lhh@free.fr>
      0xfcd1: Mr. Dave Konrad <konrad@xenia.it>
  WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING
    This code is covered by the GNU GPL and you are free to make any
    changes you wish to it under the terms of the license. However the
    code has the potential to render your computer andor someone else's
    unusable. Please proceed with care when modifying the code.
  Note: Unfortunately the laptop hardware can close the System Configuration
        Interface on it's own accord. It is therefore necessary for all
        programs using this driver to be aware that any SCI call can fail at
        any time. It is up to any program to be aware of this eventuality
        and take appropriate steps.
  The information used to write this driver has been obtained by reverse
  engineering the software supplied by Toshiba for their portable computers in
  strict accordance with the European Council Directive 92250EEC on the legal
  protection of computer programs, and it's implementation into English Law by
  the Copyright (Computer Programs) Regulations 1992 (S.I. 1992 No.3233).
  Read the Fn key status
  For the Portage 610CT and the Tecra 700CS700CDT emulate the HCI fan function
 Portage 610CT 
 fan status 
 fan off 
 fan on 
 Tecra 700CSCDT 
 fan status 
 fan off 
 fan on 
  Put the laptop into System Management Mode
 block HCI calls to readwrite memory & PCI devices 
 do we need to emulate the fan ? 
  Print the information for proctoshiba
	 Arguments
	     0) Linux driver version (this will change if format changes)
	     1) Machine ID
	     2) SCI version
	     3) BIOS version (major, minor)
	     4) BIOS date (in SCI date format)
	     5) Fn Key status
  Determine which port to use for the Fn key status
  Get the machine identification number of the current model
 do we have a SCTTable machine identication number on our hands 
 start by getting a pointer into the BIOS 
		 At this point in the Toshiba routines under MS Windows
		   the bx register holds 0xe6f5. However my code is producing
		   a different value! For the time being I will just fudge the
		   value. This has been verified on a Satellite Pro 430CDT,
 now twiddle with our pointer a bit 
 now construct our machine identification number 
  Probe for the presence of a Toshiba laptop
    returns and non-zero if unable to detect the presence of a Toshiba
    laptop, otherwise zero and determines the Machine ID, BIOS version and
    date, and SCI version.
	 extra sanity check for the string "TOSHIBA" in the BIOS because
 call the Toshiba SCI support check routine 
 if this is not a Toshiba laptop carry flag is set and ah=0x86 
 if we get this far then we are running on a Toshiba (probably)! 
 next get the machine ID of the current laptop 
 get the BIOS version 
 get the BIOS date 
	 in theory we should check the ports we are going to use for the
	   fn key detection (and the fan on the Portage 610Tecra700), and
	   then request them to stop other drivers using them. However as
	   the keyboard driver grabs 0x60-0x6f and the pic driver grabs
	   0xa0-0xbf we can't. We just have to live dangerously and use the
 do we need to emulate the fan? 
 are we running on a Toshiba laptop 
 set the port to use for Fn status if not specified as a parameter 
 register the device file 
 SPDX-License-Identifier: GPL-2.0-only
 linuxdriverscharnsc_gpio.c
   National Semiconductor common GPIO device-fileVFS methods.
   Allows a user space process to control the GPIO pins.
   Copyright (c) 2001,2002 Christer Weinigel <wingel@nano-system.com>
   Copyright (c) 2005      Jim Cromie <jim.cromie@gmail.com>
 retrieve current config wo changing it 
 user requested via 'v' command, so its INFO 
 output-enabledtristate 
 push pull  open drain 
 pull up enableddisabled 
 locked  unlocked 
 leveledge input 
 trigger on risefall edge 
 debounce 
 View Current pin settings 
 end of settings string, do nothing 
 full string handled, report error 
 common file-ops routines for both scx200_gpio and pc87360_gpio 
 SPDX-License-Identifier: GPL-2.0-only
 linuxdriverscharpc8736x_gpio.c
   National Semiconductor PC8736x GPIO driver.  Allows a user space
   process to play with the GPIO pins.
   Copyright (c) 2005,2006 Jim Cromie <jim.cromie@gmail.com>
   adapted from linuxdriverscharscx200_gpio.c
   Copyright (c) 2001,2002 Christer Weinigel <wingel@nano-system.com>,
 default to dynamic major 
 1st command-reg to check 
 alt command-reg to check 
 SuperIO ID Register 
 Expected value in ID Register for PC87365 
 Expected value in ID Register for PC87366 
 chip config, bit0 is chip enable 
 ioaddr range 
 minors matching 4 8 bit ports 
 unit select reg 
 unit enable 
 unit number of GPIO 
 config-space addrs to readwrite each unit's runtime addr 
 GPIO config-space pin-control addresses 
 bogus start val 
 GPIO port runtime access, functionality 
 non-uniform offsets ! 
 static int event_capable[] = { 1, 1, 0, 0 };   ports 2,3 are hobbled 
 use in dev_() 
 try the 2 possible values, read a hardware reg to verify 
 select GPIO portpin from device minor number 
 read current config value 
 set new config 
 read the current values driven on the GPIO signals 
	 Verify that chip and it's GPIO unit are both enabled.
	   My BIOS does this, so I take minimum action here
 read the GPIO unit base addr that chip responds to 
 ignore minor errs, and succeed 
 SPDX-License-Identifier: GPL-2.0-only
 Derived from Applicom driver ac.c for SCO Unix                            
 Ported by David Woodhouse, Axiom (Cambridge) Ltd.                         
 dwmw2@infradead.org 30898                                               
 $Id: ac.c,v 1.30 20000322 16:03:57 dwmw2 Exp $			     
 This module is for Linux 2.1 and 2.2 series kernels.                      
 J PAGET 180294 passage V2.4.2 ioctl avec code 2 reset to les interrupt  
 ceci pour reseter correctement apres une sortie sauvage                   
 J PAGET 020594 passage V2.4.3 dans le traitement de d'interruption,     
 LoopCount n'etait pas initialise a 0.                                     
 F LAFORSE 040795 version V2.6.0 lecture bidon apres acces a une carte   
           pour liberer le bus                                             
 J.PAGET 191195 version V2.6.1 Nombre, addresse,irq n'est plus configure 
 et passe en argument a acinit, mais est scrute sur le bus pour s'adapter  
 au nombre de cartes presentes sur le bus. IOCL code 6 affichait V2.4.3    
 F.LAFORSE 281195 creation de fichiers acXX.o avec les differentes       
 addresses de base des cartes, IOCTL 6 plus complet                         
 J.PAGET le 190896 copie de la version V2.6 en V2.8.0 sans modification  
 de code autre que le texte V2.6.1 en V2.8.0                               
 NOTE: We use for loops with {write,read}b() instead of 
   memcpy_{from,to}io throughout this driver. This is because
   the board doesn't correctly handle word accesses - only
   bytes. 
 maximum of pc board possible 
 interrupt number IRQ       
 physical segment of board  
 number of installed boards 
 number of write error      
 number of read error       
 number of device error     
 dev_id for request_irq() 
 No mem and irq given - check for a PCI card 
 Enable interrupts. 
	 Finished with PCI cards. If none registered, 
 Now try the specified ISA cards 
 Board number 1 -> 8           
 Index board number 0 -> 7     
 Board TIC to send             
 Current priority              
 board number to send          
 tic number to send            
 Test octet ready correct 
 Place ourselves on the wait queue 
 Check whether the card is ready for us 
 It's busy. Sleep. 
 We may not have actually slept 
	 Which is best - lock down the pages with rawio and then
	   copy directly, or use bounce buffers? For now we do the latter 
 No need to ratelimit this. Only root can trigger it anyway 
 Stick ourself on the wait queue 
 Scan each board, looking for one which has a packet for us 
 Got a packet for us 
 Got an error 
 Nothing for us. Try the next board 
 per board 
 OK - No boards had data for us. Sleep now 
    printk("Applicom interrupt on IRQ %d occurred\n", vec);
 Skip if this board doesn't exist 
 Skip if this board doesn't want attention 
 mailbox sent by the card ?   
 ram io free for write by pc ? 
 process sleep during read ?    
 There's another int waiting on this card 
 @ ADG ou ATO selon le cas 
	 In general, the device is only openable by root anyway, so we're not
 SPDX-License-Identifier: GPL-2.0-only
                                              -- linux-c --
  dtlk.c - DoubleTalk PC driver for Linux
  Original author: Chris Pallotta <chris@allmedia.com>
  Current maintainer: Jim Van Zandt <jrv@vanzandt.mv.com>
  2000-03-18 Jim Van Zandt: Fix polling.
   Eliminate dtlk_timer_active flag and separate dtlk_stop_timer
   function.  Don't restart timer in dtlk_timer_tick.  Restart timer
   in dtlk_poll after every poll.  dtlk_poll returns mask (duh).
   Eliminate unused function dtlk_write_byte.  Misc. code cleanups.
 This driver is for the DoubleTalk PC, a speech synthesizer
   manufactured by RC Systems (http:www.rcsys.com).  It was written
   based on documentation in their User's Manual file and Developer's
   Tools disk.
   The DoubleTalk PC contains four voice synthesizers: text-to-speech
   (TTS), linear predictive coding (LPC), PCMADPCM, and CVSD.  It
   also has a tone generator.  Output data for LPC are written to the
   LPC port, and output data for the other modes are written to the
   TTS port.
   Two kinds of data can be read from the DoubleTalk: status
   information (in response to the "\001?" interrogation command) is
   read from the TTS port, and index markers (which mark the progress
   of the speech) are read from the LPC port.  Not all models of the
   DoubleTalk PC implement index markers.  Both the TTS and LPC ports
   can also display status flags.
   The DoubleTalk PC generates no interrupts.
   These characteristics are mapped into the Unix stream IO model as
   follows:
   "write" sends bytes to the TTS port.  It is the responsibility of
   the user program to switch modes among TTS, PCMADPCM, and CVSD.
   This driver was written for use with the text-to-speech
   synthesizer.  If LPC output is needed some day, other minor device
   numbers can be used to select among output modes.
   "read" gets index markers from the LPC port.  If the device does
   not implement index markers, the read will fail with error EINVAL.
   Status information is available using the DTLK_INTERROGATE ioctl.
 for -EBUSY 
 for request_region 
 for loops_per_jiffy 
 for inb_p, outb_p, inb, outb, etc. 
 for get_user, etc. 
 for wait_queue 
 for __init, module_{init,exit} 
 for EPOLLIN, etc. 
 local header file for DoubleTalk values 
 !TRACING 
 TRACING 
 prototypes for file_operations struct 
 local prototypes 
   static void dtlk_handle_error(char, char, unsigned int);
  printk("DoubleTalk PC - dtlk_read()\n"); 
        printk("dtlk_read() reads 0x%02x\n", ch); 
				 We yield our time until scheduled
				   again.  This reduces the transfer
				   rate to 500 bytessec, but that's
				   still enough to keep up with the
				 the RDY bit goes zero 2-3 usec
				   after writing, and goes 1 again
				   180-190 usec later.  Here, we wait
				   up to 250 usec for the RDY bit to
		if (++retries > 10  HZ) {  wait no more than 10 sec
	
	   static long int j;
	   printk(".");
	   printk("<%ld>", jiffies-j);
	   j=jiffies;
 there are no exception conditions 
 There won't be any interrupts, so we set a timer instead. 
 Note that nobody ever sets dtlk_busy... 
	msleep_interruptible(500);		 nap 0.50 sec but
						   could be awakened
						   earlier by
 ------------------------------------------------------------------------ 
 TRACE_TEXT(" dtlk_writeable"); 
                         put LPC port into known state, so
 INIT string and index marker 
			 posting an index takes 18 msec.  Here, we
			   wait up to 100 msec to see whether it
 This macro records ten samples read from the LPC port, for later display 
 INSCOPE 
 This macro records ten samples read from the TTS port, for later display 
 1 us  \
 10 ms 
 OUTSCOPE 
   static void dtlk_handle_error(char op, char rc, unsigned int minor)
   {
   printk(KERN_INFO"\nDoubleTalk PC - MINOR: %d, OPCODE: %d, ERROR: %d\n", 
   minor, op, rc);
   return;
   }
 interrogate the DoubleTalk PC and return its settings 
	
	   if (i==50) printk("interrogate() read overrun\n");
	   for (i=0; i<sizeof(buf); i++)
	   printk(" %02x", buf[i]);
	   printk("\n");
	status.serial_number = t[0] + t[1]  256;  serial number is
 verify DT is ready, read char, wait for ACK 
 input from TTS port 
 no need to test -- this is only called when the port is readable 
 input from LPC port 
	 acknowledging a read takes 3-4
	   usec.  Here, we wait up to 20 usec
 write n bytes to tts port 
  printk("dtlk_write_bytes(\"%-s\", %d)\n", n, buf, n); 
 no flow control for CLEAR command 
 DT ready? 
 output to TTS port 
	 the RDY bit goes zero 2-3 usec after writing, and goes
	   1 again 180-190 usec later.  Here, we wait up to 10
 SPDX-License-Identifier: GPL-2.0-only
  hangcheck-timer.c
  Driver for a little io fencing timer.
  Copyright (C) 2002, 2003 Oracle.  All rights reserved.
  Author: Joel Becker <joel.becker@oracle.com>
  The hangcheck-timer driver uses the TSC to catch delays that
  jiffies does not notice.  A timer is set.  When the timer fires, it
  checks whether it was delayed and if that delay exceeds a given
  margin of error.  The hangcheck_tick module parameter takes the timer
  duration in seconds.  The hangcheck_margin parameter defines the
  margin of error, in seconds.  The defaults are 60 seconds for the
  timer and 180 seconds for the margin of error.  IOW, a timer is set
  for 60 seconds.  When the timer fires, the callback checks the
  actual duration that the timer waited.  If the duration exceeds the
  allotted time and margin (here 60 + 180, or 240 seconds), the machine
  is restarted.  A healthy machine will have the duration match the
  expected timeout very closely.
 Default fudge factor, in seconds 
 Default timer timeout, in seconds 
 Defaults to not reboot 
 Defaults to not dumping SysRQ T 
 options - modular 
 options - nonmodular 
 not MODULE 
 Last time scheduled 
 or something 
 CONFIG_MAGIC_SYSRQ 
	
	  Enable to investigate delays in detail
 SPDX-License-Identifier: GPL-2.0-only
  	NetWinder Button Driver-
 	Copyright (C) Alex Holden <alex@linuxhacker.org> 1998, 1999.
 Tell the header file who we are 
 The count of button presses 
 Times for the end of a sequence 
 Used for blocking read 
 Stores data to write out of device 
 The number of bytes in the buffer 
 The delay, in jiffies 
 The callback list 
 The number of callbacks registered 
 Number of presses to reboot 
  This function is called by other drivers to register a callback function
  to be called when a particular number of button presses occurs.
  The callback list is a static array of 32 entries (I somehow doubt many
  people are ever going to want to register more than 32 different actions
  to be performed by the kernel on different numbers of button presses ;).
  However, if an attempt to register a 33rd entry (perhaps a stuck loop
  somewhere registering the same entry over and over?) it will fail to
  do so and return -ENOMEM. If an attempt is made to register a null pointer,
  it will fail to do so and return -EINVAL.
  Because callbacks can be unregistered at random the list can become
  fragmented, so we need to search through the list until we find the first
  free entry.
  FIXME: Has anyone spotted any locking functions int his code recently ??
  This function is called by other drivers to deregister a callback function.
  If you attempt to unregister a callback which does not exist, it will fail
  with -EINVAL. If there is more than one entry with the same address,
  because it searches the list from end to beginning, it will unregister the
  last one to be registered first (FILO- First In Last Out).
  Note that this is not necessarily true if the entries are not submitted
  at the same time, because another driver could have unregistered a callback
  between the submissions creating a gap earlier in the list, which would
  be filled first at submission time.
  This function is called by button_sequence_finished to search through the
  list of callback functions, and call any of them whose count argument
  matches the current count of button presses. It starts at the beginning
  of the list and works up to the end. It will refuse to follow a null
  pointer (which should never happen anyway).
  This function is called when the button_timer times out.
  ie. When you don't press the button for bdelay jiffies, this is taken to
  mean you have ended the sequence of key presses, and this function is
  called to wind things up (write the press_count out to devbutton, call
  any matching registered function callbacks, initiate reboot, etc.).
 Ask init to reboot us 
 Reset the button press counter 
   This handler is called when the orange button is pressed (GPIO 10 of the
   SuperIO chip, which maps to logical IRQ 26). If the press_count is 0,
   this is the first press, so it starts a timer and increments the counter.
   If it is higher than 0, it deletes the old timer, starts a new one, and
   increments the counter.
  This function is called when a user space program attempts to read
  devnwbutton. It puts the device to sleep on the wait queue until
  button_sequence_finished writes some data to the buffer and flushes
  the queue, at which point it writes the data out to the device and
  returns the number of characters it has written. This function is
  reentrant, so that many processes can be attempting to read from the
  device at any one time.
  This structure is the file operations structure, which specifies what
  callbacks functions the kernel should call when a user mode process
  attempts to perform these operations on the device.
  This structure is the misc device structure, which specifies the minor
  device number (158 in this case), the name of the device (for procmisc),
  and the address of the above file operations structure.
  This function is called to initialise the driver, either from misc.c at
  bootup if the driver is compiled into the kernel, or from init_module
  below at module insert time. It attempts to register the device node
  and the IRQ and fails with a warning message if either fails, though
  neither ever should because the device number and IRQ are unique to
  this driver.
 SPDX-License-Identifier: GPL-2.0
  Privileged ADI driver for sparc64
  Author: Tom Hromatka <tom.hromatka@oracle.com>
 unsupported 
  The DSP56001 Device Driver, saviour of the Free World(tm)
  Authors: Fredrik Noring   <noring@nocrew.org>
           lars brinkhoff   <lars@nocrew.org>
           Tomas Berndtsson <tomas@nocrew.org>
  First version May 1996
  History:
   97-01-29   Tomas Berndtsson,
                Integrated with Linux 2.1.21 kernel sources.
   97-02-15   Tomas Berndtsson,
                Fixed for kernel 2.1.26
  BUGS:
   Hmm... there must be something here :)
  Copyright (C) 1996,1997 Fredrik Noring, lars brinkhoff & Tomas Berndtsson
  This file is subject to the terms and conditions of the GNU General Public
  License.  See the file COPYING in the main directory of this archive
  for more details.
 guess what 
 For put_user and get_user 
 minor devices 
 The only device so far 
 Host port timeout in number of tries 
 Maximum number of words before sleep 
 Power down the DSP 
 Power up the DSP 
 tx_wait(10); 
 tx_wait(10); 
 Magic execute 
 Don't do anything if nothing is to be done 
 8 bit 
 16 bit 
 24 bit 
 32 bit 
 Don't do anything if nothing is to be done 
 8 bit 
 16 bit 
 24 bit 
 32 bit 
 nothing to upload?!? 
 As of 2.1.26 this should be dsp56k_poll,
  but how do I then check device minor number?
  Do I need this function at all???
 poll_wait(file, ???, wait); 
 Zero host flags 
 Init and module functions 
 SPDX-License-Identifier: GPL-2.0-only
 linuxdriverscharscx200_gpio.c
   National Semiconductor SCx200 GPIO driver.  Allows a user space
   process to play with the GPIO pins.
 default to dynamic major 
 64 later, when known ok 
 use 1 cdev for all pins 
 support dev_dbg() with pdev->dev 
 nsc_gpio uses dev_dbg(), so needs this 
 succeed 
 cdev_put(&scx200_gpio_cdev); 
 SPDX-License-Identifier: GPL-2.0-only
  OPAL Operator Panel Display Driver
  Copyright 2016, Suraj Jitindar Singh, IBM Corporation.
  This driver creates a character device (devop_panel) which exposes the
  operator panel (character LCD display) on IBM Power Systems machines
  with FSPs.
  A character buffer written to the device will be displayed on the
  operator panel.
 SPDX-License-Identifier: GPL-2.0-or-later
  Sony Programmable IO Control Device driver for VAIO
  Copyright (C) 2007 Mattia Dongili <malattia@linux.it>
  Copyright (C) 2001-2005 Stelian Pop <stelian@popies.net>
  Copyright (C) 2005 Narayanan R S <nars@kadamba.org>
  Copyright (C) 2001-2002 Alcôve <www.alcove.com>
  Copyright (C) 2001 Michael Ashley <m.ashley@unsw.edu.au>
  Copyright (C) 2001 Junichi Morita <jun1m@mars.dti.ne.jp>
  Copyright (C) 2000 Takaya Kinjo <t-kinjo@tc4.so-net.ne.jp>
  Copyright (C) 2000 Andrew Tridgell <tridge@valinux.com>
  Earlier work by Werner Almesberger, Paul `Rusty' Russell and Paul Mackerras.
 = 0 
 = 0 
 = 0 
 = 0 
 type1 models use those 
 type2 series specifics 
 type3 series specifics 
 16 bits 
 8 bits  
 battery  brightness addresses 
 FAN0 information (reverse engineered from ACPI tables) 
 ioports used for brightness and type2 events 
 The set of possible ioports 
 looks like the default on C1Vx 
 same as in type 2 models 
 The set of possible interrupts 
 IRQ 11, GO22=0,GO23=1 in AML 
 IRQ 10, GO22=1,GO23=0 in AML 
 IRQ  5, GO22=0,GO23=0 in AML 
 no IRQ, GO22=1,GO23=1 in AML 
 IRQ 11, 0x80 in SIRQ in AML 
 IRQ 10, 0x40 in SIRQ in AML 
 IRQ  9, 0x20 in SIRQ in AML 
 IRQ  6, 0x10 in SIRQ in AML 
 no IRQ, 0x00 in SIRQ in AML 
 same as in type2 models 
 the rest don't need a loop until not 0xff 
 Event masks 
 The set of possible button release events 
 The set of possible jogger events  
 The set of possible capture button events 
 The set of possible fnkeys events 
 The set of possible program key events 
 The set of possible bluetooth events 
 The set of possible wireless events 
 The set of possible back button events 
 The set of possible help button events 
 The set of possible lid events 
 The set of possible zoom events 
 The set of possible thumbphrase events 
 The set of possible motioneye camera events 
 The set of possible memorystick events 
 The set of possible battery events 
 Correspondance table between sonypi events and input layer events 
 CONFIG_ACPI 
 Initializes the device - this comes from the AML code in the ACPI bios 
	 This model type uses the same initialization of
 Initialization of PCI config space of the LPC interface bridge. 
 Disables the device - this comes from the AML code in the ACPI bios 
 Get brightness, hue etc. Unreliable... 
 Set brightness, hue etc 
 Tests if the camera is ready 
 Turns the camera off 
 Turns the camera on 
 sets the bluetooth subsystem power state 
 Nothing, not all VAIOs generate this event 
 Interrupt handler: some event is available 
	 We need to return IRQ_HANDLED here because there are
	  events belonging to the sonypi device we don't know about,
 Flush input queue on first open 
 FAN Controls 
 GET Temperature (useful under APM) 
 Enable ACPI mode to get Fn key events 
 make sure we don't get any more events 
 disable ACPI mode 
 Initialize the Input Drivers: special keys 
 Set to NULL so we don't free it again below 
	 try to detect if sony-laptop is being used and thus
	  has already requested one of the known ioports.
	  As in the deprecated check_region this is racy has we have
	  multiple ioports available and one of them can be requested
	  between this check and the subsequent request. Anyway, as an
	  attempt to be some more user-friendly as we currently are,
	  this is enough.
www.linux.it~malattiawikiindex.phpSony_drivers\n");
 SPDX-License-Identifier: GPL-2.0
  linuxdriverscharmisc.c
  Generic misc open routine by Johan Myreen
  Based on code from Linus
  Teemu Rantanen's Microsoft Busmouse support and Derrick Cole's
    changes incorporated into 0.97pl4
    by Peter Cervasio (pete%q106fm.uucp@wupost.wustl.edu) (08SEP92)
    See busmouse.c for particulars.
  Made things a lot mode modular - easy to compile in just one or two
  of the misc drivers, as they are now completely independent. Linus.
  Support for loadable modules. 8-Sep-95 Philip Blundell <pjb27@cam.ac.uk>
  Fixed a failing symbol register to free the device registration
 		Alan Cox <alan@lxorguk.ukuu.org.uk> 21-Jan-96
  Dynamic minors and procmice by Alessandro Rubini. 26-Mar-96
  Renamed to misc and miscdevice to be more accurate. Alan Cox 26-Mar-96
  Handling of mouse minor numbers for kerneld:
   Idea by Jacques Gelinas <jack@solucorp.qc.ca>,
   adapted by Bjorn Ekwall <bj0rn@blox.se>
   corrected by Alan Cox <alan@lxorguk.ukuu.org.uk>
  Changes for kmod (from kerneld):
 	Cyrus Durgin <cider@speakeasy.org>
  Added devfs support. Richard Gooch <rgooch@atnf.csiro.au>  10-Jan-1998
  Head entry for the doubly linked miscdevice list
  Assigned numbers, used for dynamic minors
 like dynamic majors 
	
	  Place the miscdevice in the file's
	  private_data so it can be used by the
	  file operations, including f_op->open below
 	misc_register	-	register a miscellaneous device
 	@misc: device structure
 	Register a miscellaneous device with the kernel. If the minor
 	number is set to %MISC_DYNAMIC_MINOR a minor number is assigned
 	and placed in the minor field of the structure. For other cases
 	the minor number requested is used.
 	The structure passed is linked into the kernel and may not be
 	destroyed until it has been unregistered. By default, an open()
 	syscall to the device sets file->private_data to point to the
 	structure. Drivers don't need open in fops for this.
 	A zero is returned on success and a negative errno code for
 	failure.
	
	  Add it to the front, so that later devices can "override"
	  earlier defaults
 	misc_deregister - unregister a miscellaneous device
 	@misc: device to unregister
 	Unregister a miscellaneous device that was previously
 	successfully registered with misc_register().
 SPDX-License-Identifier: GPL-2.0-or-later
  linuxdriverscharppdev.c
  This is the code behind devparport -- it allows a user-space
  application to use the parport subsystem.
  Copyright (C) 1998-2000, 2002 Tim Waugh <tim@cyberelk.net>
  A devparportx device node represents an arbitrary device
  on port 'x'.  The following operations are possible:
  open		do nothing, set up default IEEE 1284 protocol to be COMPAT
  close	release port and unregister device (if necessary)
  ioctl
    EXCL	register device exclusively (may fail)
    CLAIM	(register device first time) parport_claim_or_block
    RELEASE	parport_release
    SETMODE	set the IEEE 1284 protocol to use for readwrite
    SETPHASE	set the IEEE 1284 phase of a particular mode.  Not to be
               confused with ioctl(fd, SETPHASER, &stun). ;-)
    DATADIR	data_forward  data_reverse
    WDATA	write_data
    RDATA	read_data
    WCONTROL	write_control
    RCONTROL	read_control
    FCONTROL	frob_control
    RSTATUS	read_status
    NEGOT	parport_negotiate
    YIELD	parport_yield_blocking
    WCTLONIRQ	on interrupt, set control lines
    CLRIRQ	clear (and return) interrupt count
    SETTIME	sets device timeout (struct timeval)
    GETTIME	gets device timeout (struct timeval)
    GETMODES	gets hardware supported modes (unsigned int)
    GETMODE	gets the current IEEE1284 mode
    GETPHASE   gets the current IEEE1284 phase
    GETFLAGS   gets current (user-visible) flags
    SETFLAGS   sets current (user-visible) flags
  readwrite	read or write in current IEEE 1284 protocol
  select	wait for interrupt (in readfds)
  Changes:
  Added SETTIMEGETTIME ioctl, Fred Barnes, 1999.
  Arnaldo Carvalho de Melo <acme@conectiva.com.br> 20000825
  - On error, copy_from_user and copy_to_user do not return -EFAULT,
    They return the positive number of bytes not copied due to address
    space errors.
  Added GETMODESGETMODEGETPHASE ioctls, Fred Barnes <frmb2@ukc.ac.uk>, 03012001.
  Added GETFLAGSSETFLAGS ioctls, Fred Barnes, 042001
 should we use PARDEVICE_MAX here? 
 pp_struct.flags bitfields 
 Other constants 
 10s 
 define fixed sized ioctl cmd for y2038 migration 
 Don't have the port claimed 
 Trivial case. 
 various specials for EPP mode 
 Don't have the port claimed 
 do a fast EPP write 
 First handle the cases that don't take arguments. 
 Deferred device registration. 
		 For interrupt-reporting to work, we need to be
 We may need to fix up the state machine. 
 But it's not really an error. 
 There's no chance of making the driver happy. 
		 Just remember to register the device exclusively
 FIXME: validate mode 
 FIXME: validate phase 
 end switch() 
	 Everything else requires the port to be claimed, so check
 Save the state machine's state. 
 handshake failed, peripheral not IEEE 1284 
 handshake succeeded, peripheral rejected mode 
		 Remember what to set the control lines to, for next
 Keep the compiler happy 
	 Defer the actual device registration until the first claim.
	  That way, we know whether or not the driver wants to have
	  exclusive access to the port (PPEXCL).
 parport released, but not in compatibility mode 
 No kernel lock held - fine 
 Clean up all parport stuff 
 SPDX-License-Identifier: GPL-2.0-only
   linuxdriverscharttyprintk.c
   Copyright (C) 2010  Samo Pogacnik
  This pseudo device allows user to make printk messages. It is possible
  to store "console" messages inline with kernel messages for better analyses
  of the boot process, for example.
  Our simple preformatting supports transparent output of (time-stamped)
  printk messages (also suitable for logging service):
  - any cr is replaced by nl
  - adds a ttyprintk source tag in front of each line
  - too long message is fragmented, with '\'nl between fragments
  - TPK_STR_SIZE isn't really the write_room limiting factor, because
    it is emptied on the fly during preformatting.
 should be bigger then max expected line length 
 we could assume 4K for instance 
 end of tmp buffer reached: cut the message in two 
  TTY operations open function.
  TTY operations close function.
  TTY operations write function.
 exclusive use of tpk_printk within this tty 
  TTY operations write_room function.
  TTY operations hangup function.
  TTY port operations shutdown function.
 SPDX-License-Identifier: GPL-2.0-or-later
   Driver for TANBAC TB0219 base board.
   Copyright (C) 2005  Yoichi Yuasa <yuasa@linux-mips.org>
 default is dynamic major device number 
  Minor device number
 	 0 = 7 segment LED
 	16 = GPIO IN 0
 	17 = GPIO IN 1
 	18 = GPIO IN 2
 	19 = GPIO IN 3
 	20 = GPIO IN 4
 	21 = GPIO IN 5
 	22 = GPIO IN 6
 	23 = GPIO IN 7
 	32 = GPIO OUT 0
 	33 = GPIO OUT 1
 	34 = GPIO OUT 2
 	35 = GPIO OUT 3
 	36 = GPIO OUT 4
 	37 = GPIO OUT 5
 	38 = GPIO OUT 6
 	39 = GPIO OUT 7
 	48 = DIP switch 1
 	49 = DIP switch 2
 	50 = DIP switch 3
 	51 = DIP switch 4
 	52 = DIP switch 5
 	53 = DIP switch 6
 	54 = DIP switch 7
 	55 = DIP switch 8
 PCI Slot 1 
 PCI Slot 2 
 PCI Slot 3 
  random.c -- A strong random number generator
  Copyright (C) 2017 Jason A. Donenfeld <Jason@zx2c4.com>. All
  Rights Reserved.
  Copyright Matt Mackall <mpm@selenic.com>, 2003, 2004, 2005
  Copyright Theodore Ts'o, 1994, 1995, 1996, 1997, 1998, 1999.  All
  rights reserved.
  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions
  are met:
  1. Redistributions of source code must retain the above copyright
     notice, and the entire permission notice in its entirety,
     including the disclaimer of warranties.
  2. Redistributions in binary form must reproduce the above copyright
     notice, this list of conditions and the following disclaimer in the
     documentation andor other materials provided with the distribution.
  3. The name of the author may not be used to endorse or promote
     products derived from this software without specific prior
     written permission.
  ALTERNATIVELY, this product may be distributed under the terms of
  the GNU General Public License, in which case the provisions of the GPL are
  required INSTEAD OF the above restrictions.  (This clause is
  necessary due to a potential bad interaction between the GPL and
  the restrictions contained in a BSD-style copyright.)
  THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED
  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE, ALL OF
  WHICH ARE HEREBY DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE
  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
  OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
  BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
  USE OF THIS SOFTWARE, EVEN IF NOT ADVISED OF THE POSSIBILITY OF SUCH
  DAMAGE.
  (now, with legal B.S. out of the way.....)
  This routine gathers environmental noise from device drivers, etc.,
  and returns good random numbers, suitable for cryptographic use.
  Besides the obvious cryptographic uses, these numbers are also good
  for seeding TCP sequence numbers, and other places where it is
  desirable to have numbers which are not only random, but hard to
  predict by an attacker.
  Theory of operation
  ===================
  Computers are very predictable devices.  Hence it is extremely hard
  to produce truly random numbers on a computer --- as opposed to
  pseudo-random numbers, which can easily generated by using a
  algorithm.  Unfortunately, it is very easy for attackers to guess
  the sequence of pseudo-random number generators, and for some
  applications this is not acceptable.  So instead, we must try to
  gather "environmental noise" from the computer's environment, which
  must be hard for outside attackers to observe, and use that to
  generate random numbers.  In a Unix environment, this is best done
  from inside the kernel.
  Sources of randomness from the environment include inter-keyboard
  timings, inter-interrupt timings from some interrupts, and other
  events which are both (a) non-deterministic and (b) hard for an
  outside observer to measure.  Randomness from these sources are
  added to an "entropy pool", which is mixed using a CRC-like function.
  This is not cryptographically strong, but it is adequate assuming
  the randomness is not chosen maliciously, and it is fast enough that
  the overhead of doing it on every interrupt is very reasonable.
  As random bytes are mixed into the entropy pool, the routines keep
  an estimate of how many bits of randomness have been stored into
  the random number generator's internal state.
  When random bytes are desired, they are obtained by taking the SHA
  hash of the contents of the "entropy pool".  The SHA hash avoids
  exposing the internal state of the entropy pool.  It is believed to
  be computationally infeasible to derive any useful information
  about the input of SHA from its output.  Even if it is possible to
  analyze SHA in some clever way, as long as the amount of data
  returned from the generator is less than the inherent entropy in
  the pool, the output data is totally unpredictable.  For this
  reason, the routine decreases its internal estimate of how many
  bits of "true randomness" are contained in the entropy pool as it
  outputs random numbers.
  If this estimate goes to zero, the routine can still generate
  random numbers; however, an attacker may (at least in theory) be
  able to infer the future output of the generator from prior
  outputs.  This requires successful cryptanalysis of SHA, which is
  not believed to be feasible, but there is a remote possibility.
  Nonetheless, these numbers should be useful for the vast majority
  of purposes.
  Exported interfaces ---- output
  ===============================
  There are four exported interfaces; two for use within the kernel,
  and two or use from userspace.
  Exported interfaces ---- userspace output
  -----------------------------------------
  The userspace interfaces are two character devices devrandom and
  devurandom.  devrandom is suitable for use when very high
  quality randomness is desired (for example, for key generation or
  one-time pads), as it will only return a maximum of the number of
  bits of randomness (as estimated by the random number generator)
  contained in the entropy pool.
  The devurandom device does not have this limit, and will return
  as many bytes as are requested.  As more and more random bytes are
  requested without giving time for the entropy pool to recharge,
  this will result in random numbers that are merely cryptographically
  strong.  For many applications, however, this is acceptable.
  Exported interfaces ---- kernel output
  --------------------------------------
  The primary kernel interface is
  	void get_random_bytes(void buf, int nbytes);
  This interface will return the requested number of random bytes,
  and place it in the requested buffer.  This is equivalent to a
  read from devurandom.
  For less critical applications, there are the functions:
  	u32 get_random_u32()
  	u64 get_random_u64()
  	unsigned int get_random_int()
  	unsigned long get_random_long()
  These are produced by a cryptographic RNG seeded from get_random_bytes,
  and so do not deplete the entropy pool as much.  These are recommended
  for most in-kernel operations if the result is going to be stored in
  the kernel.
  Specifically, the get_random_int() family do not attempt to do
  "anti-backtracking".  If you capture the state of the kernel (e.g.
  by snapshotting the VM), you can figure out previous get_random_int()
  return values.  But if the value is stored in the kernel anyway,
  this is not a problem.
  It is safe to expose get_random_int() output to attackers (e.g. as
  network cookies); given outputs 1..n, it's not feasible to predict
  outputs 0 or n+1.  The only concern is an attacker who breaks into
  the kernel later; the get_random_int() engine is not reseeded as
  often as the get_random_bytes() one.
  get_random_bytes() is needed for keys that need to stay secret after
  they are erased from the kernel.  For example, any key that will
  be wrapped and stored encrypted.  And session encryption keys: we'd
  like to know that after the session is closed and the keys erased,
  the plaintext is unrecoverable to someone who recorded the ciphertext.
  But for network portscookies, stack canaries, PRNG seeds, address
  space layout randomization, session authentication keys, or other
  applications where the sensitive data is stored in the kernel in
  plaintext for as long as it's sensitive, the get_random_int() family
  is just fine.
  Consider ASLR.  We want to keep the address space secret from an
  outside attacker while the process is running, but once the address
  space is torn down, it's of no use to an attacker any more.  And it's
  stored in kernel data structures as long as it's alive, so worrying
  about an attacker's ability to extrapolate it from the get_random_int()
  CRNG is silly.
  Even some cryptographic keys are safe to generate with get_random_int().
  In particular, keys for SipHash are generally fine.  Here, knowledge
  of the key authorizes you to do something to a kernel object (inject
  packets to a network connection, or flood a hash table), and the
  key is stored with the object being protected.  Once it goes away,
  we no longer care if anyone knows the key.
  prandom_u32()
  -------------
  For even weaker applications, see the pseudorandom generator
  prandom_u32(), prandom_max(), and prandom_bytes().  If the random
  numbers aren't security-critical at all, these are far cheaper.
  Useful for self-tests, random error simulation, randomized backoffs,
  and any other application where you trust that nobody is trying to
  maliciously mess with you by guessing the "random" numbers.
  Exported interfaces ---- input
  ==============================
  The current exported interfaces for gathering environmental noise
  from the devices are:
 	void add_device_randomness(const void buf, unsigned int size);
  	void add_input_randomness(unsigned int type, unsigned int code,
                                 unsigned int value);
 	void add_interrupt_randomness(int irq, int irq_flags);
  	void add_disk_randomness(struct gendisk disk);
  add_device_randomness() is for adding data to the random pool that
  is likely to differ between two devices (or possibly even per boot).
  This would be things like MAC addresses or serial numbers, or the
  read-out of the RTC. This does not add any actual entropy to the
  pool, but it initializes the pool to different values for devices
  that might otherwise be identical and have very little entropy
  available to them (particularly common in the embedded world).
  add_input_randomness() uses the input layer interrupt timing, as well as
  the event type information from the hardware.
  add_interrupt_randomness() uses the interrupt timing as random
  inputs to the entropy pool. Using the cycle counters and the irq source
  as inputs, it feeds the randomness roughly once a second.
  add_disk_randomness() uses what amounts to the seek time of block
  layer request events, on a per-disk_devt basis, as input to the
  entropy pool. Note that high-speed solid state drives with very low
  seek times do not make for good sources of entropy, as their seek
  times are usually fairly consistent.
  All of these routines try to estimate how many bits of randomness a
  particular randomness source.  They do this by keeping track of the
  first and second order deltas of the event timings.
  Ensuring unpredictability at system startup
  ============================================
  When any operating system starts up, it will go through a sequence
  of actions that are fairly predictable by an adversary, especially
  if the start-up does not involve interaction with a human operator.
  This reduces the actual number of bits of unpredictability in the
  entropy pool below the value in entropy_count.  In order to
  counteract this effect, it helps to carry information in the
  entropy pool across shut-downs and start-ups.  To do this, put the
  following lines an appropriate script which is run during the boot
  sequence:
 	echo "Initializing random number generator..."
 	random_seed=varrunrandom-seed
 	# Carry a random seed from start-up to start-up
 	# Load and then save the whole entropy pool
 	if [ -f $random_seed ]; then
 		cat $random_seed >devurandom
 	else
 		touch $random_seed
 	fi
 	chmod 600 $random_seed
 	dd if=devurandom of=$random_seed count=1 bs=512
  and the following lines in an appropriate script which is run as
  the system is shutdown:
 	# Carry a random seed from shut-down to start-up
 	# Save the whole entropy pool
 	echo "Saving random seed..."
 	random_seed=varrunrandom-seed
 	touch $random_seed
 	chmod 600 $random_seed
 	dd if=devurandom of=$random_seed count=1 bs=512
  For example, on most modern systems using the System V init
  scripts, such code fragments would be found in
  etcrc.dinit.drandom.  On older Linux systems, the correct script
  location might be in etcrcb.drc.local or etcrc.drc.0.
  Effectively, these commands cause the contents of the entropy pool
  to be saved at shut-down time and reloaded into the entropy pool at
  start-up.  (The 'dd' in the addition to the bootup script is to
  make sure that etcrandom-seed is different for every start-up,
  even if the system crashes without executing rc.0.)  Even with
  complete knowledge of the start-up activities, predicting the state
  of the entropy pool requires knowledge of the previous history of
  the system.
  Configuring the devrandom driver under Linux
  ==============================================
  The devrandom driver under Linux uses minor numbers 8 and 9 of
  the devmem major number (#1).  So if your system does not have
  devrandom and devurandom created already, they can be created
  by using the commands:
  	mknod devrandom c 1 8
  	mknod devurandom c 1 9
  Acknowledgements:
  =================
  Ideas for constructing this random number generator were derived
  from Pretty Good Privacy's random number generator, and from private
  discussions with Phil Karn.  Colin Plumb provided a faster random
  number generator, which speed up the mixing function of the entropy
  pool, taken from PGPfone.  Dale Worley has also contributed many
  useful ideas and suggestions to improve this driver.
  Any flaws in the design are solely my responsibility, and should
  not be attributed to the Phil, Colin, or any of authors of PGP.
  Further background information on this topic may be obtained from
  RFC 1750, "Randomness Recommendations for Security", by Donald
  Eastlake, Steve Crocker, and Jeff Schiller.
 #define ADD_INTERRUPT_BENCH 
  Configuration information
  To allow fractional bits to be tracked, the entropy_count field is
  denominated in units of 18th bits.
  2(ENTROPY_SHIFT + poolbitshift) must <= 31, or the multiply in
  credit_entropy_bits() needs to be 64 bits wide.
  If the entropy count falls under this number of bits, then we
  should wake up processes which are selecting or polling on write
  access to devrandom.
  Originally, we used a primitive polynomial of degree .poolwords
  over GF(2).  The taps for various sizes are defined below.  They
  were chosen to be evenly spaced except for the last tap, which is 1
  to get the twisting happening as fast as possible.
  For the purposes of better mixing, we use the CRC-32 polynomial as
  well to make a (modified) twisted Generalized Feedback Shift
  Register.  (See M. Matsumoto & Y. Kurita, 1992.  Twisted GFSR
  generators.  ACM Transactions on Modeling and Computer Simulation
  2(3):179-194.  Also see M. Matsumoto & Y. Kurita, 1994.  Twisted
  GFSR generators II.  ACM Transactions on Modeling and Computer
  Simulation 4:254-266)
  Thanks to Colin Plumb for suggesting this.
  The mixing operation is much less sensitive than the output hash,
  where we use SHA-1.  All that we want of mixing operation is that
  it be a good non-cryptographic hash; i.e. it not produce collisions
  when fed "random" data of the sort we expect to see.  As long as
  the pool state differs for different inputs, we have preserved the
  input entropy and done a good job.  The fact that an intelligent
  attacker can construct inputs that will produce controlled
  alterations to the pool's state is not important because we don't
  consider such inputs to contribute any randomness.  The only
  property we need with respect to them is that the attacker can't
  increase hisher knowledge of the pool's state.  Since all
  additions are reversible (knowing the final state and the input,
  you can reconstruct the initial state), if an attacker has any
  uncertainty about the initial state, heshe can only shuffle that
  uncertainty about, but never cause any collisions (which would
  decrease the uncertainty).
  Our mixing functions were analyzed by Lacharme, Roeck, Strubel, and
  Videau in their paper, "The Linux Pseudorandom Number Generator
  Revisited" (see: http:eprint.iacr.org2012251.pdf).  In their
  paper, they point out that we are not using a true Twisted GFSR,
  since Matsumoto & Kurita used a trinomial feedback polynomial (that
  is, with only three taps, instead of the six that we are using).
  As a result, the resulting polynomial is neither primitive nor
  irreducible, and hence does not have a maximal period over
  GF(232).  They suggest a slight change to the generator
  polynomial which improves the resulting TGFSR polynomial to be
  irreducible, which we have made here.
 was: x^128 + x^103 + x^76 + x^51 +x^25 + x + 1 
 x^128 + x^104 + x^76 + x^51 +x^25 + x + 1 
  Static global variables
  crng_init =  0 --> Uninitialized
 		1 --> Initialized
 		2 --> Initialized from input_pool
  crng_init is protected by primary_crng->lock, and only increases
  its value (from 0->1->2).
  OS independent entropy store.   Here are the functions which handle
  storing entropy in an entropy pool.
 read-only data: 
 read-write data: 
  This function adds bytes into the entropy "pool".  It does not
  update the entropy estimate.  The caller should call
  credit_entropy_bits if this is appropriate.
  The pool is stirred with a primitive polynomial of the appropriate
  degree, and then twisted.  We twist by three bits at a time because
  it's cheap to do so and helps slightly in the expected case where
  the entropy is concentrated in the low-order bits.
 mix one byte at a time to simplify size handling and churn faster 
 XOR in the various taps 
 Mix the result back in with a twist 
		
		  Normally, we add 7 bits of rotation to the pool.
		  At the beginning of the pool, add an extra 7 bits
		  rotation, so that successive passes spread the
		  input bits across the pool evenly.
  This is a fast mixing routine used by the interrupt randomness
  collector.  It's hardcoded for an 128 bit pool and assumes that any
  locks that might be needed are taken by the caller.
  Credit (or debit) the entropy store with n bits of entropy.
  Use credit_entropy_bits_safe() if the value comes from userspace
  or otherwise should be checked for extreme values.
 Debit 
		
		  Credit: we have to account for the possibility of
		  overwriting already present entropy.	 Even in the
		  ideal case of pure Shannon entropy, new contributions
		  approach the full value asymptotically:
		 
		  entropy <- entropy + (pool_size - entropy) 
		 	(1 - exp(-add_entropypool_size))
		 
		  For add_entropy <= pool_size2 then
		  (1 - exp(-add_entropypool_size)) >=
		     (add_entropypool_size)0.7869...
		  so we can approximate the exponential with
		  34add_entropypool_size and still be on the
		  safe side by adding at most pool_size2 at a time.
		 
		  The use of pool_size-2 in the while statement is to
		  prevent rounding artifacts from making the loop
		  arbitrarily long; this limits the loop to log2(pool_size)2
		  turns no matter how large nbits is.
 The +2 corresponds to the 4 in the denominator 
 Cap the value to avoid overflows 
  CRNG using CHACHA20
  Hack to deal with crazy userspace progams when they are all trying
  to access devurandom in parallel.  The programs are almost
  certainly doing something terribly wrong, but we'll work around
  their brain damage.
  crng_fast_load() can be called by code in the interrupt service
  path.  So we can't afford to dilly-dally.
  crng_slow_load() is called by add_device_randomness, which has two
  attributes.  (1) We can't trust the buffer passed to it is
  guaranteed to be unpredictable (so it might not have any entropy at
  all), and (2) it doesn't have the performance constraints of
  crng_fast_load().
  So we do something more comprehensive which is guaranteed to touch
  all of the primary_crng's state, and which uses a LFSR with a
  period of 255 as part of the mixing algorithm.  Finally, we do
  not advance crng_init_cnt since buffer we may get may be something
  like a fixed DMI table (for example), which might very well be
  unique to the machine, but is otherwise unvarying.
  Use the leftover bytes from the CRNG block output (if there is
  enough) to mutate the CRNG key to provide backtracking protection.
 Wipe data just written to memory 
  Entropy input management
 There is one of these per entropy source 
  Add device- or boot-specific data to the input pool to help
  initialize it.
  None of this adds any entropy; it is meant to avoid the problem of
  the entropy pool having similar initial state across largely
  identical devices.
  This function adds entropy to the entropy "pool" by using timing
  delays.  It uses the timer_rand_state structure to make an estimate
  of how many bits of entropy this call has added to the pool.
  The number "num" is also added to the pool - it should somehow describe
  the type of event which just happened.  This is currently 0-255 for
  keyboard scan codes, and 256 upwards for interrupts.
	
	  Calculate number of bits of randomness we probably added.
	  We take into account the first, second and third-order deltas
	  in order to make our estimate.
	
	  delta is now minimum absolute delta.
	  Round down by 1 bit on general principles,
	  and limit entropy estimate to 12 bits.
 ignore autorepeat and the like 
 Exponential average factor k=1256 
 Use a weighted moving average 
 And average deviation 
 award one bit for the contents of the fast pool 
 first major is 1, so we get >= 0x200 here 
  Entropy extraction routines
  This function decides how many bytes to actually take from the
  given pool, and also debits the entropy count accordingly.
 Can we pull enough? 
 never pull more than available 
  This function does the actual extraction for extract_entropy.
  Note: we assume that .poolwords is a multiple of 16 words.
	
	  If we have an architectural hardware random number
	  generator, use it for SHA's initial vector
 Generate a hash across the pool, 16 words (512 bits) at a time 
	
	  We mix the hash back into the pool to prevent backtracking
	  attacks (where the attacker knows the state of the pool
	  plus the current outputs, and attempts to find previous
	  ouputs), unless the hash function can be inverted. By
	  mixing at least a SHA1 worth of hash data back, we make
	  brute-forcing the feedback as hard as brute-forcing the
	  hash.
	
	  In case the hash function has some recognizable output
	  pattern, we fold it in half. Thus, we always feed back
	  twice as much data as we output.
 Wipe data just returned from memory 
  This function extracts randomness from the "entropy pool", and
  returns it in a buffer.
  The min parameter specifies the minimum amount we can pull before
  failing to avoid races that defeat catastrophic reseeding while the
  reserved parameter indicates how much entropy we must leave in the
  pool after each pull to avoid starving other readers.
 if last_data isn't primed, we need EXTRACT_SIZE extra bytes 
  This function is the exported kernel interface.  It returns some
  number of good random numbers, suitable for key generation, seeding
  TCP sequence numbers, etc.  It does not rely on the hardware random
  number generator.  For random bytes direct from the hardware RNG
  (when available), use get_random_bytes_arch(). In order to ensure
  that the randomness provided by this function is okay, the function
  wait_for_random_bytes() should be called and return 0 at least once
  at any point prior.
  Each time the timer fires, we expect that we got an unpredictable
  jump in the cycle counter. Even if the timer is running on another
  CPU, the timer activity will be touching the stack of the CPU that is
  generating entropy..
  Note that we don't re-arm the timer in the timer itself - we are
  happy to be scheduled away, since that just makes the load more
  complex, but we do not want the timer to keep ticking unless the
  entropy loop is running.
  So the re-arming always happens in the entropy loop itself.
  If we have an actual cycle counter, see if we can
  generate enough entropy with timing noise
 Slow counter - or none. Don't even bother 
  Wait for the urandom pool to be seeded and thus guaranteed to supply
  cryptographically secure random numbers. This applies to: the devurandom
  device, the get_random_bytes function, and the get_random_{u32,u64,int,long}
  family of functions. Using any of these functions without first calling
  this function forfeits the guarantee of security.
  Returns: 0 if the urandom pool has been seeded.
           -ERESTARTSYS if the function was interrupted by a signal.
  Returns whether or not the urandom pool has been seeded and thus guaranteed
  to supply cryptographically secure random numbers. This applies to: the
  devurandom device, the get_random_bytes function, and the get_random_{u32,
  ,u64,int,long} family of functions.
  Returns: true if the urandom pool has been seeded.
           false if the urandom pool has not been seeded.
  Add a callback function that will be invoked when the nonblocking
  pool is initialised.
  returns: 0 if callback is successfully added
 	    -EALREADY if pool is already initialised (callback not called)
 	    -ENOENT if module for callback is not alive
  Delete a previously registered readiness callback function.
  This function will use the architecture-specific hardware random
  number generator if it is available.  The arch-specific hw RNG will
  almost certainly be faster than what we can do in software, but it
  is impossible to verify that it is implemented securely (as
  opposed, to, say, the AES encryption of a sequence number using a
  key known by the NSA).  So it's useful if we need the speed, but
  only if we're willing to trust the hardware manufacturer not to
  have put in a back door.
  Return number of bytes filled in.
  init_std_data - initialize pool with system data
  @r: pool to initialize
  This function clears the pool's entropy count and mixes some system
  data into the pool to prepare it for use. The pool is not cleared
  as that can only decrease the entropy in the pool.
  Note that setup_arch() may call add_device_randomness()
  long before we get here. This allows seeding of the pools
  with some platform dependent data very early in the boot
  process. But it limits our options here. We must use
  statically allocated structures that already have all
  initializations complete at compile time. We should also
  take care not to overwrite the precious per platform data
  we were given.
	
	  If kzalloc returns null, we just won't use that entropy
	  source.
 inherently racy, no point locking 
		
		  Clear the entropy pool counters. We no longer clear
		  the entropy pool, as that's silly.
	
	  Requesting insecure and blocking randomness at the same time makes
	  no sense.
  Sysctl interface
  This function is used to return both the bootid UUID, and random
  UUID.  The difference is in whether table->data is NULL; if it is,
  then a new UUID is generated and returned to the user.
  If the user accesses this via the proc interface, the UUID will be
  returned as an ASCII string in the standard UUID format; if via the
  sysctl system call, as 16 bytes of binary data.
  Return entropy available scaled to integral bits
 CONFIG_SYSCTL 
  Get a random word for internal kernel use only. The quality of the random
  number is good as devurandom, but there is no backtrack protection, with
  the goal of being quite fast and not depleting entropy. In order to ensure
  that the randomness provided by this function is okay, the function
  wait_for_random_bytes() should be called and return 0 at least once at any
  point prior.
 It's important to invalidate all potential batched entropy that might
  be stored before the crng is initialized, which we can do lazily by
  simply resetting the counter to zero so that it's re-extracted on the
  randomize_page - Generate a random, page aligned address
  @start:	The smallest acceptable address the caller will take.
  @range:	The size of the area, starting at @start, within which the
 		random address must fall.
  If @start + @range would overflow, @range is capped.
  NOTE: Historical use of randomize_range, which this replaces, presumed that
  @start was already page aligned.  We now align it regardless.
  Return: A page aligned address within [start, start + range).  On error,
  @start is returned.
 Interface for in-kernel drivers of true hardware RNGs.
  Those devices may produce endless random bits and will be throttled
  when our pool is full.
	 Suspend writing if we're above the trickle threshold.
	  We'll be woken up again once below random_write_wakeup_thresh,
	  or when the calling thread is about to terminate.
 Handle random seed passed by bootloader.
  If the seed is trustworthy, it would be regarded as hardware RNGs. Otherwise
  it would be regarded as device data.
  The decision is controlled by CONFIG_RANDOM_TRUST_BOOTLOADER.
 SPDX-License-Identifier: GPL-2.0-only
  Flash memory interface rev.5 driver for the Intel
  Flash chips used on the NetWinder.
  20082000	RMK	use __ioremap to map flash into virtual memory
 			make a few more places use "volatile"
  22052001	RMK	- Lock read against write
 			- merge printk level changes (with mods) from Alan Cox.
 			- use ppos as the file position, not file->f_pos.
 			- fix check for out of range pos and rw size
  Please note that we are tampering with the only flash chip in the
  machine, which contains the bootup code.  We therefore have the
  power to convert these machines into doorstops...
1 Meg
4 Meg
Intel flash
Intel flash 4Meg
if set - we will display progress msgs
	
	  try to get flash chip ID
	
	  on 4 Meg flash the second byte is actually at offset 2...
	
	  set it back to read mode
	
	  We now lock against reads and writes. --rmk
	
	  check for out of range pos or count
	
	  We now lock against reads and writes. --rmk
block # of 64K bytes
	
	  # of 64K blocks to erase and write
	
	  write ends at exactly 64k boundary?
		
		  first we have to erase the block(s), where we will write...
		
		  write_block will limit write to space left in this block
		
		  if somehow write verify failed? Can't happen??
			
			  retry up to 10 times
				
				  else quit with error...
  The memory devices use the full 3264 bits of the offset, and so we cannot
  check against negative addresses: they are ok. The return value is weird,
  though, in that case (0).
  also note that seeking relative to the "end of file" isn't supported:
  it has no meaning, so it returns -EINVAL.
  assume that main Write routine did the parameter checking...
  so just go ahead and erase, what requested!
	
	  reset footbridge to the correct offset 0 (...0..3)
	
	  dummy ROM read
	
	  reset status if old errors
	
	  erase a block...
	  aim at the middle of a current block...
	
	  dummy read
	
	  erase
	
	  confirm
	
	  wait 10 ms
	
	  wait while erasing in process (up to 10 sec)
		
		  read any address
              printk("Flash_erase: status=%X.\n",c1);
	
	  set flash for normal read access
      (volatile unsigned char)(FLASH_BASE+0x8000) = 0xFF;
back to normal operation
	
	  check if erase errors were reported
		
		  reset error
	
	  just to make sure - verify if erased OK...
  write_block will limit number of bytes written to the space in this block
	
	  check if write will end in this block....
	
	  wait up to 30 sec for this block
	  	
	  	  dummy read
		
		  kick open the write gate
		
		  program footbridge to the correct offset...0..3
		
		  write cmd
		
		  data to write
		
		  get status
		
		  wait up to 1 sec for this byte
		
		  while not ready...
		
		  if timeout getting status
			
			  reset err
		
		  switch on read access, as a default flash operation mode
		
		  read access
		
		  if hardware reports an error writing, and not timeout - 
		  reset the chip and retry
			
			  reset err
			
			  before timeout?
				
				  wait couple ms
				
				  return error -2
	
	  we want to write a bit pattern XXX1 to Xilinx to enable
	  the write gate, which will be open for about the next 2ms.
	
	  let the ISA bus to catch on...
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (C) 2006, 2007, 2009 Rusty Russell, IBM Corporation
  Copyright (C) 2009, 2010, 2011 Red Hat, Inc.
  Copyright (C) 2009, 2010, 2011 Amit Shah <amit.shah@redhat.com>
  This is a global struct for storing common data for all the devices
  this driver handles.
  Mainly, it has a linked list for all the consoles in one place so
  that callbacks from hvc for get_chars(), put_chars() work properly
  across multiple devices and multiple ports per device.
 Used for registering chardevs 
 Used for exporting per-port information to debugfs 
 List of all the devices we're handling 
	
	  This is used to keep track of the number of hvc consoles
	  spawned by this driver.  This number is given as the first
	  argument to hvc_alloc().  To correctly map an initial
	  console spawned via hvc_instantiate to the console being
	  hooked up via hvc_alloc, we need to pass the same vtermno.
	 
	  We also just assume the first console being initialised was
	  the first one that got used as the initial console.
 All the console devices handled by this driver 
 This struct holds information that's relevant only for console ports 
 We'll place all consoles in a list in the pdrvdata struct 
 The hvc device associated with this console port 
 The size of the console 
	
	  This number identifies the number that we used to register
	  with hvc in hvc_instantiate() and hvc_alloc(); this is the
	  number passed on by the hvc callbacks to us to
	  differentiate between the other console ports handled by
	  this driver
 size of the buffer in buf above 
 used length of the buffer 
 offset in the buf from which to consume data 
 DMA address of buffer 
 Device we got DMA memory from 
 List of pending dma buffers to free 
 If sgpages == 0 then buf is used 
 sg is used if spages > 0. sg must be the last in is struct 
  This is a per-device struct that stores data common to all the
  ports for that device (vdev->priv).
 Next portdev in the list, head is in the pdrvdata struct 
	
	  Workqueue handlers where we process deferred work after
	  notification
 To protect the list of ports 
 To protect the vq operations for the control channel 
 max. number of ports this device can hold 
 The virtio device we're associated with 
	
	  A couple of virtqueues for the control channel: one for
	  guest->host transfers, one for host->guest transfers
	
	  A control packet buffer for guest->host requests, protected
	  by c_ovq_lock.
 Array of per-port IO virtqueues 
 Major number for this device.  Ports will be created as minors. 
 This struct holds the per-port data 
 Next port in the list, head is in the ports_device 
 Pointer to the parent virtio_console device 
 The current buffer from which data has to be fed to readers 
	
	  To protect the operations on the in_vq associated with this
	  port.  Has to be a spinlock because it can be called from
	  interrupt context (get_char()).
 Protect the operations on the out_vq. 
 The IO vqs for this port 
 File in the debugfs directory that exposes this port's information 
	
	  Keep count of the bytes sent, received and discarded for
	  this port for accounting and debugging purposes.  These
	  counts are not reset across port open  close events.
	
	  The entries in this struct will be valid if this port is
	  hooked up to an hvc console
 Each port associates with a separate char device 
 Reference-counting to handle port hot-unplugs and file operations 
 A waitqueue for poll() or blocking read operations 
 The 'name' of the port that we expose via sysfs properties 
 We can notify apps of host connect  disconnect events via SIGIO 
 The 'id' to identify the port with the Host 
 Is the host device open 
 We should allow only one process to open a port 
 This is the very early arch-specified put chars function. 
	
	  This condition can be true when put_chars is called from
	  early_init
 dma_free_coherent requires interrupts to be enabled. 
 queue up dma-buffers to be freed later 
 Release device refcnt and allow it to be freed 
 Create a copy of the pending_free_dma_bufs while holding the lock 
 Release the dma buffers, without irqs enabled 
	
	  Allocate buffer and the sg list. The sg list array is allocated
	  directly after the port_buffer struct.
		
		  Allocate DMA memory from ancestor. When a virtio
		  device is created by remoteproc, the DMA memory is
		  associated with the parent device:
		  virtioY => remoteprocX#vdevYbuffer.
 Increase device refcnt to avoid freeing it 
 Callers should take appropriate locks 
  Create a scatter-gather list representing our input buffer and put
  it in the queue.
  Callers should take appropriate locks.
 Discard any unread data this port has. Callers lockers. 
 Device has been unplugged.  vqs are already gone. 
 Did the port get unplugged before userspace closed it? 
 Callers must take the port->outvq_lock 
 Device has been unplugged.  vqs are already gone. 
 Tell Host to go! 
	
	  Wait till the host acknowledges it pushed out the data we
	  sent.  This is done for data from the hvc_console; the tty
	  operations are performed with spinlocks held so we can't
	  sleep here.  An alternative would be to copy the data to a
	  buffer and relax the spinning requirement.  The downside is
	  we need to kmalloc a GFP_ATOMIC buffer each time the
	  console driver writes something out.
	
	  We're expected to return the amount of data we wrote -- all
	  of it
  Give out the data that's requested from the buffer that we have
  queued up.
		
		  We're done using all the data in this buffer.
		  Re-queue so that the Host can send us more data.
 Return the number of bytes actually copied 
 The condition that must be true for polling to end 
 Port got hot-unplugged. Let's exit. 
 Port got hot-unplugged. Let's exit. 
	
	  Check if the Host has consumed any buffers since we last
	  sent data (this is only applicable for nonblocking ports).
 Port is hot-unplugged. 
		
		  If nothing's connected on the host just return 0 in
		  case of list_empty; this tells the userspace app
		  that there's no connection
 Port got hot-unplugged while we were waiting above. 
	
	  We could've received a disconnection message while we were
	  waiting for more data.
	 
	  This check is not clubbed in the if() statement above as we
	  might receive some data as well as the host could get
	  disconnected after we got woken up from our wait.  So we
	  really want to give off whatever data we have and only then
	  check for host_connected.
 Port got hot-unplugged. 
 Userspace could be out to fool us 
	
	  We now ask send_buf() to not spin for generic ports -- we
	  can re-use the same code path that non-blocking file
	  descriptors take for blocking file descriptors since the
	  wait is already done and we're certain the write will go
	  through to the host.
 Try lock this page 
 Get reference and unlock page for moving 
 Failback to copying a page 
 Faster zero-copy write by splicing 
	
	  Rproc_serial does not yet support splice. To support splice
	  pipe_to_sg() must allocate dma-buffers and copy content from
	  regular pages to dma pages. And alloc_buf and free_buf must
	  support allocating and freeing such a list of dma-buffers.
 Port got unplugged 
 Notify host of port being closed 
	
	  Locks aren't necessary here as a port can't be opened after
	  unplug, and if a port isn't unplugged, a kref would already
	  exist for the port.  Plus, taking ports_lock here would
	  create a dependency on other locks taken by functions
	  inside remove_port if we're the last holder of the port,
	  creating many problems.
 We get the port with a kref here 
 Port was unplugged before we could proceed 
	
	  Don't allow opening of console port devices -- that's done
	  via devhvc
 Allow only one process to open a particular port at a time 
	
	  There might be a chance that we missed reclaiming a few
	  buffers in the window of the port getting previously closed
	  and opening now.
 Notify host of port being opened 
  The file operations that we support: programs in the guest can open
  a console device, read from it, write to it, poll for data and
  close it.  The devices are at
    devvport<device number>p<port number>
  The put_chars() callback is pretty straightforward.
  We turn the characters into a scatter-gather list, add it to the
  output queue and then kick the Host.  Then we sit here waiting for
  it to finish: inefficient in theory, but in practice
  implementations will do it immediately.
  get_chars() is the callback from the hvc_console infrastructure
  when an interrupt is received.
  We call out to fill_readbuf that gets us the required data from the
  buffers that are queued up.
 If we've not set up the port yet, we have no input to give. 
 If we don't have an input queue yet, we can't get input. 
 The port could have been hot-unplugged 
 Don't test F_SIZE at all if we're rproc: not a valid feature! 
 We set the configuration at this point, since we now have a tty 
 The operations for console ports. 
  Console drivers are initialized very early so boot messages can go
  out, so we do things slightly differently from the generic virtio
  initialization of the net and block drivers.
  At this stage, the console is output-only.  It's too early to set
  up a virtqueue, so we let the drivers do some boutique early-output
  thing.
	
	  The Host's telling us this port is a console port.  Hook it
	  up with an hvc console.
	 
	  To set up and manage our virtual console, we call
	  hvc_alloc().
	 
	  The first argument of hvc_alloc() is the virtual console
	  number.  The second argument is the parameter for the
	  notification mechanism (like irq number).  We currently
	  leave this as zero, virtqueues have implicit notifications.
	 
	  The third argument is a "struct hv_ops" containing the
	  put_chars() get_chars(), notifier_add() and notifier_del()
	  pointers.  The final argument is the output buffer size: we
	  can do any size, so we put PAGE_SIZE here.
	
	  Start using the new console output if this is the first
	  console to come up.
 Notify host of port being opened 
 put in device directory 
	 We can safely ignore ENOSPC because it means
	  the queue already has buffers. Buffers are removed
	  only by virtcons_remove(), not by unplug_port()
		
		  For rproc_serial assume remote processor is connected.
		  rproc_serial does not want the console port, only
		  the generic port implementation.
		
		  If we're not using multiport support,
		  this has to be a console port.
	
	  Tell the Host we're set so that it can send us various
	  configuration parameters for this port (eg, port name,
	  caching, whether this is a console port, etc.)
	
	  Finally, create the debugfs file that we can use to
	  inspect a port's state at any time
 The host might want to notify management sw about port add failure 
 No users remain, remove all port-specific data. 
 Remove unused data this port might have received. 
  Port got unplugged.  Remove port from portdev's list and drop the
  kref reference.  If no userspace has this port opened, it will
  result in immediate removal the port.
 Let the app know the port is going down. 
 Do this after sigio is actually sent 
	
	  We should just assume the device itself has gone off --
	  else a close on an open port later will try to send out a
	  control message.
	
	  Locks around here are not necessary - a port can't be
	  opened after we removed the port struct from ports_list
	  above.
 Any private messages that the Host and Guest want to share 
 No valid header at start of buffer.  Drop it. 
		
		  Could remove the port here in case init fails - but
		  have to notify the host first.
		
		  If the host port got closed and the host had any
		  unconsumed buffers, we'll be able to reclaim them
		  now.
		
		  If the guest is connected, it'll be interested in
		  knowing the host connection state changed.
		
		  If we woke up after hibernation, we can get this
		  again.  Skip it in that case.
		
		  Skip the size of the header and the cpkt to get the size
		  of the name that was sent
		
		  Since we only have one sysfs attribute, 'name',
		  create it only if we have a name for the port.
			
			  Generate a udev event so that appropriate
			  symlinks can be created based on udev
			  rules.
	
	  Normally the port should not accept data when the port is
	  closed. For generic serial ports, the host won't (shouldn't)
	  send data till the guest is connected. But this condition
	  can be reached when a console port is not yet connected (no
	  tty is spawned) and the other side sends out data over the
	  vring, or when a remote devices start sending data before
	  the ports are opened.
	 
	  A generic serial port will discard data if not connected,
	  while console ports and rproc-serial ports accepts data at
	  any time. rproc-serial is initiated with guest_connected to
	  false because port_fops_open expects this. Console ports are
	  hooked up with an HVC console and is initialized with
	  guest_connected to true.
 Send a SIGIO indicating new data in case the process asked for it 
		
		  We'll use this way of resizing only for legacy
		  support.  For newer userspace
		  (VIRTIO_CONSOLE_F_MULTPORT+), use control messages
		  to indicate console size changes so that it can be
		  done per-port.
	
	  For backward compat (newer host but older guest), the host
	  spawns a console port first and also inits the vqs for port
	  0 before others.
 Find the queues. 
 Disable interrupts for vqs 
 Finish up work that's lined up 
	
	  When yanking out a device, we immediately lose the
	  (device-side) queues.  So there's no point in keeping the
	  guest side around till we drop our final reference.  This
	  also means that any ports which are in an open state will
	  have to just stop using the port, as the vqs are going
	  away.
  Once we're further in boot, we get probed like any other virtio
  device.
  If the host also supports multiple console ports, we check the
  config space to see how many ports the host has spawned.  We
  initialize each port found.
 We only need a config space if features are offered 
 Ensure to read early_put_chars now 
 Attach this portdev to this virtio_device, and vice-versa. 
 Don't test MULTIPORT at all if we're rproc: not a valid feature! 
			
			  The host might want to notify mgmt sw about device
			  add failure.
 Device was functional: we need full cleanup. 
		
		  For backward compatibility: Create a console port
		  if we're running on older host.
	
	  If there was an early virtio console, assume that there are no
	  other consoles. We need to wait until the hvc_alloc matches the
	  hvc_instantiate, otherwise tty_open will complain, resulting in
	  a "Warning: unable to open an initial console" boot failure.
	  Without multiport this is done in add_port above. With multiport
	  this might take some host<->guest communication - thus we have to
	  wait.
	
	  Once more: if control_work_handler() was running, it would
	  enable the cb as the last step.
		
		  We'll ask the host later if the new invocation has
		  the port opened or closed.
 Get port openclose status on the host 
		
		  If a port was open at the time of suspending, we
		  have to let the host know that it's still open.
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2001-2006 Silicon Graphics, Inc.  All rights
  reserved.
  SN Platform Special Memory (mspec) Support
  This driver exports the SN special memory (mspec) facility to user
  processes.
  There are two types of memory made available thru this driver:
  uncached and cached.
  Uncached are used for memory write combining feature of the ia64
  cpu.
  Cached are used for areas of memory that are used as cached addresses
  on our partition and used as uncached addresses from other partitions.
  Due to a design constraint of the SN2 Shub, you can not have processors
  on the same FSB perform both a cached and uncached reference to the
  same cache line.  These special memory cached regions prevent the
  kernel from ever dropping in a TLB entry and therefore prevent the
  processor from ever speculating a cache line from this page.
  Page types allocated by the device.
  One of these structures is allocated when an mspec region is mmaped. The
  structure is pointed to by the vma->vm_private_data field in the vma struct.
  This structure is used to record the addresses of the mspec pages.
  This structure is shared by all vma's that are split off from the
  original vma when split_vma()'s are done.
  The refcnt is incremented atomically because mm->mmap_lock does not
  protect in fork case where multiple tasks share the vma_data.
 Number of vmas sharing the data. 
 Serialize access to this structure. 
 Number of pages allocated. 
 Type of pages allocated. 
 Original (unsplit) base. 
 Original (unsplit) end. 
 Array of MSPEC addresses. 
  mspec_open
  Called when a device mapping is created by a means other than mmap
  (via fork, munmap, etc.).  Increments the reference count on the
  underlying mspec data so it is not freed prematurely.
  mspec_close
  Called when unmapping a device mapping. Frees all mspec pages
  belonging to all the vma's sharing this vma_data structure.
		
		  Clear the page before sticking it back
		  into the pool.
  mspec_fault
  Creates a mspec page and maps it to user space.
  mspec_mmap
  Called when mmapping the device.  Initializes the vma with a fault handler
  and private data structure necessary to allocate, track, and free the
  underlying pages.
  mspec_init
  Called at boot time to initialize the mspec facility.
 SPDX-License-Identifier: GPL-2.0-only
  Intel & MS High Precision Event Timer Implementation.
  Copyright (C) 2003 Intel Corporation
 	Venki Pallipadi
  (c) Copyright 2004 Hewlett-Packard Development Company, L.P.
 	Bob Picco <robert.picco@hp.com>
  The High Precision Event Timer driver.
  This driver is closely modelled after the rtc.c driver.
  See HPET spec revision 1.
 from HPET spec 
 WARNING -- don't get confused.  These macros are never used
  to write the (single) counter, and rarely to read it.
  They're badly named; to fix, someday.
 replaces BKL 
 This clocksource driver currently only works on ia64 
 A lock for concurrent access by app and isr hpet activity. 
 interrupt enabled 
	
	  For non-periodic timers, increment the accumulator.
	  This has the effect of treating non-periodic like periodic.
		 The time for the next interrupt would logically be t + m,
		  however, if we are very unlucky and the interrupt is delayed
		  for longer than t then we will completely miss the next
		  interrupt if we set t + m and an application will hang.
		  Therefore we need to make a more complex computation assuming
		  that there exists a k for which the following is true:
		  k  t + base < mc + delta
		  (k + 1)  t + base > mc + delta
		  where t is the interval in hpet ticks for the given freq,
		  base is the theoretical start value 0 < base < t,
		  mc is the main counter value at the time of the interrupt,
		  delta is the time it takes to write the a value to the
		  comparator.
		  k may then be computed as (mc - base + delta)  t .
 we prefer level triggered mode 
	
	  In PIC mode, skip IRQ0-4, IRQ6-9, IRQ12-15 which is always used by
	  legacy device. In IO APIC mode, we skip all the legacy IRQS.
 FIXME: Setup interrupt source table 
			
			  To prevent the interrupt handler from seeing an
			  unwanted interrupt status bit, program the timer
			  so that it will not fire in the near future ...
 ... and clear any left-over status. 
	 64-bit comparators are not yet supported through the ioctls,
	  so force this into 32-bit mode if it supports both modes
		
		  NOTE: First we modify the hidden accumulator
		  register supported by periodic-capable comparators.
		  We never want to modify the (single) counter; that
		  would affect all the comparators. The value written
		  is the counter value when the first interrupt is due.
		
		  Then we modify the comparator, indicating the period
		  for subsequent interrupt.
 converts Hz to number of timer ticks 
 Hz 
 information 
  Adjustment for when arming the timer with
  initial conditions.  That is, main counter
  ticks expired before interrupts are enabled.
	
	  Try to calibrate until return value becomes stable small value.
	  If SMI interruption occurs in calibration loop, the return value
	  will be big. This avoids its impact.
	
	  hpet_alloc can be called by platform dependent code.
	  If platform dependent code has allocated the hpet that
	  ACPI has also reported, then we catch it here.
 fs, 10^-15 
 10^15 femtoseconds per second 
 round 
 ticks per second 
		
		  If the timer was reserved by platform code,
		  then make timer unavailable for opens.
 This clocksource driver currently only works on ia64 
MODULE_AUTHOR("Bob Picco <Robert.Picco@hp.com>");
MODULE_LICENSE("GPL");
 SPDX-License-Identifier: GPL-2.0-only
  PS3 FLASH ROM Storage Driver
  Copyright (C) 2007 Sony Computer Entertainment Inc.
  Copyright 2007 Sony Corp.
 Bounce buffer mutex 
 Start sector of buffer, -1 if invalid 
 Make kernel writes synchronous 
 use static buffer, kmalloc cannot allocate 256 KiB 
  Telecom Clock driver for Intel NetStructure(tm) MPCBL0010
  Copyright (C) 2005 Kontron Canada
  All rights reserved.
  This program is free software; you can redistribute it andor modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or (at
  your option) any later version.
  This program is distributed in the hope that it will be useful, but
  WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, GOOD TITLE or
  NON INFRINGEMENT.  See the GNU General Public License for more
  details.
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
  Send feedback to <sebastien.bouchard@ca.kontron.com> and the current
  Maintainer  <mark.gross@intel.com>
  Description : This is the TELECOM CLOCK module driver for the ATCA
  MPCBL0010 ATCA computer.
 printk() 
 everything... 
 error codes 
 inboutb 
Hardware Reset of the PLL 
 MODE SELECT 
 FILTER SELECT 
 SELECT REFERENCE FREQUENCY 
 Select primary or secondary redundant clock 
 CLOCK TRANSMISSION DEFINE 
 RECEIVED REFERENCE 
 HARDWARE SWITCHING DEFINE 
 HARDWARE SWITCHING MODE DEFINE 
 ALARMS DEFINE 
 INTERRUPT CAUSE DEFINE 
 Telecom clock IO register definition 
 0 = Dynamic allocation of the major device number 
 sysfs interface definition:
Upon loading the driver will create a sysfs directory under
sysdevicesplatformtelco_clock.
This directory exports the following interfaces.  There operation is
documented in the MCPBL0010 TPS under the Telecom Clock API section, 11.4.
alarms				:
current_ref			:
received_ref_clk3a		:
received_ref_clk3b		:
enable_clk3a_output		:
enable_clk3b_output		:
enable_clka0_output		:
enable_clka1_output		:
enable_clkb0_output		:
enable_clkb1_output		:
filter_select			:
hardware_switching		:
hardware_switching_mode		:
telclock_version		:
mode_select			:
refalign			:
reset				:
select_amcb1_transmit_clock	:
select_amcb2_transmit_clock	:
select_redundant_clock		:
select_ref_frequency		:
All sysfs interfaces are integers in hex format, i.e echo 99 > refalign
has the same effect as echo 0x99 > refalign.
 Event that generate a interrupt 
 if events processing have been done 
		 this legacy device is always one per system and it doesn't
		  know how to handle multiple concurrent clients.
	 Make sure there is no interrupt pending while
	 This device is wired through the FPGA IO space of the ATCA blade
 Clear interrupt events 
 put in device directory 
 Read telecom clock IRQ number (Set by BIOS) 
 not MCPBL0010 ? 
 Alarm processing is done, wake up read task 
 Read and clear interrupt events 
 Primary_Los changed from 0 to 1 ? 
 Primary_Los changed from 1 to 0 ? 
 Secondary_Los changed from 0 to 1 ? 
 Secondary_Los changed from 1 to 0 ? 
 Holdover changed from 0 to 1 ? 
 TIMEOUT in ~10ms 
 SPDX-License-Identifier: GPL-2.0
   linuxdriverscharmem.c
   Copyright (C) 1991, 1992  Linus Torvalds
   Added devfs support.
     Jan-11-1998, C. Scott Ananian <cananian@alumni.princeton.edu>
   Shared devzero mmapping support, Feb 2000, Kanoj Sarcar <kanoj@sgi.com>
  This funcion reads the physical memory. The f_pos points directly to the
  memory location.
 we don't have page 0 mapped on sparc and m68k.. 
 Show zeros for restricted memory. 
			
			  On ia64 if a page has been mapped somewhere as
			  uncached, then it must also be accessed uncached
			  by the kernel or data corruption may occur.
 we don't have page 0 mapped on sparc and m68k.. 
 Hmm. Do something? 
 Skip actual writing when a page is marked as restricted. 
			
			  On ia64 if a page has been mapped somewhere as
			  uncached, then it must also be accessed uncached
			  by the kernel or data corruption may occur.
  Architectures vary in how they handle caching for addresses
  outside of main memory.
	
	  On ia64, we ignore O_DSYNC because we cannot tolerate memory
	  attribute aliases.
	
	  Accessing memory above the top the kernel knows about or through a
	  file pointer
	  that was marked O_DSYNC will be done non-cached.
 permit direct mmap, for read, write or exec 
 can't do an in-place private mapping if there's no MMU 
 Does it even fit in phys_addr_t? 
 It's illegal to wrap around the end of the physical address space. 
 Remap-pfn-range will mark the range VM_IO 
 Just for latency reasons 
		
		  mmap_zero() will call shmem_zero_setup() to create a file,
		  so use shmem's get_unmapped_area in case it can be huge;
		  and pass NULL for file as in mmap.c's get_unmapped_area(),
		  so as not to confuse shmem with our handle on "devzero".
 Otherwise flags & MAP_PRIVATE: with no shmem object beneath it 
  Special lseek() function for devnull and devzero.  Most notably, you
  can fopen() both devices with "a" now.  This was previously impossible.
  -- SRB.
  The memory devices use the full 3264 bits of the offset, and so we cannot
  check against negative addresses: they are ok. The return value is weird,
  though, in that case (0).
  also note that seeking relative to the "end of file" isn't supported:
  it has no meaning, so it returns -EINVAL.
 to avoid userland mistaking f_pos=-9 as -EBADF=-9 
	
	  Use a unified address space to have a single point to manage
	  revocations when drivers want to take over a devmem mapped
	  range.
		
		  Create devport?
 SPDX-License-Identifier: GPL-2.0-only
  Generic parallel printer driver
  Copyright (C) 1992 by Jim Weigand and Linus Torvalds
  Copyright (C) 1992,1993 by Michael K. Johnson
  - Thanks much to Gunter Windau for pointing out to me where the error
    checking ought to be.
  Copyright (C) 1993 by Nigel Gamble (added interrupt code)
  Copyright (C) 1994 by Alan Cox (Modularised it)
  LPCAREFUL, LPABORT, LPGETSTATUS added by Chris Metcalf, metcalf@lcs.mit.edu
  Statistics and support for slow printers by Rob Janssen, rob@knoware.nl
  "lp=" command line parameters added by Grant Guenther, grant@torque.net
  lp_read (Status readback) support added by Carsten Gross,
                                              carsten@sol.wohnheim.uni-ulm.de
  Support for parport by Philip Blundell <philb@gnu.org>
  Parport sharing hacking by Andrea Arcangeli
  Fixed kernel_(tofrom)_user memory copy to check for errors
  				by Riccardo Facchetti <fizban@tin.it>
  22-JAN-1998  Added support for devfs  Richard Gooch <rgooch@atnf.csiro.au>
  Redesigned interrupt handling for handle printers with buggy handshake
 				by Andrea Arcangeli, 11 May 1998
  Full efficient handling of printer with buggy irq handshake (now I have
  understood the meaning of the strange handshake). This is done sending new
  characters if the interrupt is just happened, even if the printer say to
  be still BUSY. This is needed at least with Epson Stylus Color. To enable
  the new TRUST_IRQ mode read the `LP OPTIMIZATION' section below...
  Fixed the irq on the rising edge of the strobe case.
  Obsoleted the CAREFUL flag since a printer that doesn' t work with
  CAREFUL will block a bit after in lp_check_status().
 				Andrea Arcangeli, 15 Oct 1998
  Obsoleted and removed all the lowlevel stuff implemented in the last
  month to use the IEEE1284 functions (that handle the _new_ compatibilty
  mode fine).
 This driver should, in theory, work with any parallel port that has an
  appropriate low-level driver; all IO is done through the parport
  abstraction layer.
  If this driver is built into the kernel, you can configure it using the
  kernel command-line.  For example:
 	lp=parport1,none,parport2	(bind lp0 to parport1, disable lp1 and
 					 bind lp2 to parport2)
 	lp=auto				(assign lp devices to all ports that
 				         have printers attached, as determined
 					 by the IEEE-1284 autoprobe)
 	lp=reset			(reset the printer during
 					 initialisation)
 	lp=off				(disable the printer driver entirely)
  If the driver is loaded as a module, similar functionality is available
  using module parameters.  The equivalent of the above commands would be:
 	# insmod lp.o parport=1,none,2
 	# insmod lp.o parport=auto
 	# insmod lp.o reset=1
 COMPATIBILITY WITH OLD KERNELS
  Under Linux 2.0 and previous versions, lp devices were bound to ports at
  particular IO addresses, as follows:
 	lp0		0x3bc
 	lp1		0x378
 	lp2		0x278
  The new driver, by default, binds lp devices to parport devices as it
  finds them.  This means that if you only have one port, it will be bound
  to lp0 regardless of its IO address.  If you need the old behaviour, you
  can force it using the parameters described above.
  The new interrupt handling code take care of the buggy handshake
  of some HP and Epson printer:
  ___
  ACK    _______________    ___________
                        |__|
  ____
  BUSY   _________              _______
                  |____________|
  I discovered this using the printer scanner that you can find at:
 	ftp:e-mind.compublinuxpscan
 					11 May 98, Andrea Arcangeli
  My printer scanner run on an Epson Stylus Color show that such printer
  generates the irq on the _rising_ edge of the STROBE. Now lp handle
  this case fine too.
 					15 Oct 1998, Andrea Arcangeli
  The so called `buggy' handshake is really the well documented
  compatibility mode IEEE1284 handshake. They changed the well known
  Centronics handshake acking in the middle of busy expecting to not
  break drivers or legacy application, while they broken linux lp
  until I fixed it reverse engineering the protocol by hand some
  month ago...
                                      14 Dec 1998, Andrea Arcangeli
  Copyright (C) 2000 by Tim Waugh (added LPSETTIMEOUT ioctl)
 if you have more than 8 printers, remember to increase LP_NO 
 CONFIG_LP_CONSOLE 
 Bits used to manage claiming the parport device 
 --- low-level port access ----------------------------------- 
 Claim the parport or block trying unless we've already claimed it 
 Claim the parport or block trying unless we've already claimed it 
  Try to negotiate to a new mode; if unsuccessful negotiate to
  compatibility mode.  Return the mode we ended up in.
 No error. 
		last = 0;  Come here if LP_CAREFUL is set and no
 If we're not in compatibility mode, we're ready now! 
 Need to copy the data from user-space. 
	 Claim Parport or sleep until it becomes available
 Go to the proper mode. 
 Write the data. 
 incomplete write -> check error ! 
 Status readback conforming to ieee1284 
 Wait for data. 
 IEEE 1284 support 
	 If ABORTOPEN is set and the printer is offline or out of paper,
	   we may still want to open it to perform ioctl()s.  Therefore we
	   have commandeered O_NONBLOCK, even though it is being used in
	   a non-standard manner.  This is strictly a Linux hack, and
 Determine if the peripheral supports ECP mode 
 Leave peripheral in compatibility mode 
 Convert to jiffies, place in lp_table 
	
	  we used to not check, so let's not make this fatal,
	  but deal with user space passing a 32-bit tv_nsec in
	  a 64-bit field, capping the timeout to 1 second
	  worth of microseconds, and capping the total at
	  MAX_JIFFY_OFFSET.
 sparc64 suseconds_t is 32-bit only 
 for 64-bit 
 for x32 mode 
 FIXME: add an implementation if you set LP_STATS 
 --- support for console on the line printer ----------------- 
 If the printer is out of paper, we can either lose the messages or
  stall until the printer is happy again.  Define CONSOLE_LP_STRICT
 The console must be locked when we get here. 
 Nothing we can do. 
 Go to compatibility mode. 
 Write the data, converting LF->CRLF as we go. 
 Dodge the original '\n', and put '\r\n' instead. 
 console on line printer 
 --- initialisation code ------------------------------------- 
 disable driver on "lp=" or "lp=0" 
 Write this some day. 
 CONFIG_LP_CONSOLE 
 The user gave some parameters.  Let's see what they were.  
 SPDX-License-Identifier: GPL-2.0-or-later
 IBM POWER Barrier Synchronization Register Driver
  Copyright IBM Corporation 2008
  Author: Sonny Rao <sonnyrao@us.ibm.com>
 This driver exposes a special register which can be used for fast
 synchronization across a large SMP machine.  The hardware is exposed
 as an array of bytes where each process will write to one of the bytes to
 indicate it has finished the current stage and this update is broadcast to
 all processors without having to bounce a cacheline between them. In
 POWER5 and POWER6 there is one of these registers per SMP,  but it is
 presented in two forms; first, it is given as a whole and then as a number
 of smaller registers which alias to parts of the single whole register.
 This can potentially allow multiple groups of processes to each have their
 own private synchronization device.
 Note that this hardware must be written to using only single byte writes.
 It may be read using 1, 2, 4, or 8 byte loads which must be aligned since
 this region is treated as cache-inhibited  processes should also use a
 full sync before and after writing to the BSR to ensure all stores and
 the BSR update have made it to all chips in the system
 This is arbitrary number, up to Power6 it's been 17 or fewer  
 Real address 
 length of mem region we can map 
 size of the BSR reg itself 
 interval at which BSR repeats in the page 
 maps to enum below 
 bsr id number for its type 
 check for the case of a small BSR device and map one 4k page for it
 if we have a bsr_len of > 4k and less then PAGE_SIZE (64k pages) 
 we can only map 4k of it, so only advertise the 4k in sysfs 
 SPDX-License-Identifier: GPL-2.0-only
  linuxdriverschards1620.c: Dallas Semiconductors DS1620
    thermometer driver (as used in the Rebel.com NetWinder)
 define for proc interface 
 Definitions for DS1620 chip 
  Start of NetWinder specifics
   Note!  We have to hold the gpio lock with IRQs disabled over the
   whole of our transaction to the Dallas chip, since there is a
   chance that the WaveArtist driver could touch these bits to
   enable or disable the speaker.
  End of NetWinder specifics
 convert to Fahrenheit, as per wdt.c 
	
	  Trigger the fan to start by setting
	  temperature high point low.  This kicks
	  the fan into action.
 SPDX-License-Identifier: GPL-2.0-only
  bios-less APM driver for ARM Linux
   Jamey Hicks <jamey@crl.dec.com>
   adapted from the APM BIOS driver for Linux by Stephen Rothwell (sfr@linuxcare.com)
  APM 1.2 Reference:
    Intel Corporation, Microsoft Corporation. Advanced Power Management
    (APM) BIOS Interface Specification, Revision 1.2, February 1996.
  This document is available from Microsoft at:
     http:www.microsoft.comwhdcarchiveamp_12.mspx
  One option can be changed at boot time as follows:
 	apm=onoff			enabledisable APM
  Maximum number of events stored
  thread states (for threads using a writable devapm_bios fd):
  SUSPEND_NONE:	nothing happening
  SUSPEND_PENDING:	suspend event queued for thread and pending to be read
  SUSPEND_READ:	suspend event read, pending acknowledgement
  SUSPEND_ACKED:	acknowledgement received from thread (via ioctl),
 			waiting for resume
  SUSPEND_ACKTO:	acknowledgement timeout
  SUSPEND_DONE:	thread had acked suspend and is now notified of
 			resume
  SUSPEND_WAIT:	this thread invoked suspend and is waiting for resume
  A thread migrates in one of three paths:
 	NONE -1-> PENDING -2-> READ -3-> ACKED -4-> DONE -5-> NONE
 				    -6-> ACKTO -7-> NONE
 	NONE -8-> WAIT -9-> NONE
  While in PENDING or READ, the thread is accounted for in the
  suspend_acks_pending counter.
  The transitions are invoked as follows:
 	1: suspend event is signalled from the core PM code
 	2: the suspend event is read from the fd by the userspace thread
 	3: userspace thread issues the APM_IOC_SUSPEND ioctl (as ack)
 	4: core PM code signals that we have resumed
 	5: APM_IOC_SUSPEND ioctl returns
 	6: the notifier invoked from the core PM code timed out waiting
 	   for all relevant threds to enter ACKED state and puts those
 	   that haven't into ACKTO
 	7: those threads issue APM_IOC_SUSPEND ioctl too late,
 	   get an error
 	8: userspace thread issues the APM_IOC_SUSPEND ioctl (to suspend),
 	   ioctl code invokes pm_suspend()
 	9: pm_suspend() returns indicating resume
  The per-file APM data
  Local variables
  This is a list of everyone who has opened devapm_bios
  kapmd info.  kapmd provides us a process context to handle
  "APM" events within - specifically necessary if we're going
  to be suspending the system.
 no spaces 
  Compatibility cruft until the IPAQ people move over to the new
  interface.
  This allows machines to provide their own "apm get power status" function.
  APM event queue management.
  apm_ioctl - handle APM ioctl
  APM_IOC_SUSPEND
    This IOCTL is overloaded, and performs two functions.  It is used to:
      - initiate a suspend
      - acknowledge a suspend read from devapm_bios.
    Only when everyone who has opened devapm_bios with write permission
    has acknowledge does the actual suspend happen.
			
			  If we read a suspend command from devapm_bios,
			  then the corresponding APM_IOC_SUSPEND ioctl is
			  interpreted as an acknowledge.
			
			  suspend_acks_pending changed, the notifier needs to
			  be woken up for this
			
			  Wait for the suspendresume to complete.  If there
			  are pending acknowledges, we wait here for them.
			  wait_event_freezable() is interruptible and pending
			  signal can cause busy looping.  We aren't doing
			  anything critical, chill a bit on each iteration.
			
			  Otherwise it is a request to suspend the system.
			  Just invoke pm_suspend(), we'll handle it from
			  there via the notifier.
	
	  We are now unhooked from the chain.  As far as new
	  events are concerned, we no longer exist.
		
		  XXX - this is a tiny bit broken, when we consider BSD
		  process accounting. If the device is opened by root, we
		  instantly flag that we used superuser privs. Who knows,
		  we might close the device immediately without doing a
		  privileged operation -- cevans
  Arguments, with symbols from linuxapm_bios.h.
    0) Linux driver version (this will change if format changes)
    1) APM BIOS Version.  Usually 1.0, 1.1 or 1.2.
    2) APM flags from APM Installation Check (0x00):
 	bit 0: APM_16_BIT_SUPPORT
 	bit 1: APM_32_BIT_SUPPORT
 	bit 2: APM_IDLE_SLOWS_CLOCK
 	bit 3: APM_BIOS_DISABLED
 	bit 4: APM_BIOS_DISENGAGED
    3) AC line status
 	0x00: Off-line
 	0x01: On-line
 	0x02: On backup power (BIOS >= 1.1 only)
 	0xff: Unknown
    4) Battery status
 	0x00: High
 	0x01: Low
 	0x02: Critical
 	0x03: Charging
 	0x04: Selected battery not present (BIOS >= 1.2 only)
 	0xff: Unknown
    5) Battery flag
 	bit 0: High
 	bit 1: Low
 	bit 2: Critical
 	bit 3: Charging
 	bit 7: No system battery
 	0xff: Unknown
    6) Remaining battery life (percentage of charge):
 	0-100: valid
 	-1: Unknown
    7) Remaining battery life (time units):
 	Number of remaining minutes or seconds
 	-1: Unknown
    8) min = minutes; sec = seconds
 short-cut emergency suspends 
		
		  Queue an event to all "writer" users that we want
		  to suspend and need their ack.
		
		  Wait for the the suspend_acks_pending variable to drop to
		  zero, meaning everybody acked the suspend event (or the
		  process was killed.)
		 
		  If the app won't answer within a short while we assume it
		  locked up and ignore it.
 timed out 
			
			  Move anybody who timed out to "ack timeout" state.
			 
			  We could time out and the userspace does the ACK
			  right after we time out but before we enter the
			  locked section here, but that's fine.
 let suspend proceed 
 interrupted by signal 
		
		  Anyone on the APM queues will think we're still suspended.
		  Send a message so everyone knows we're now awake again.
		
		  Finally, wake up anyone who is sleeping on the suspend.
				
				  TODO: maybe grab error code, needs core
				  changes to push the error to the notifier
				  chain (could use the second parameter if
				  implemented)
  apm_queue_event - queue an APM event for kapmd
  @event: APM event
  Queue an APM event for kapmd to process and ultimately take the
  appropriate action.  Only a subset of events are handled:
    %APM_LOW_BATTERY
    %APM_POWER_STATUS_CHANGE
    %APM_USER_SUSPEND
    %APM_SYS_SUSPEND
    %APM_CRITICAL_SUSPEND
 SPDX-License-Identifier: GPL-2.0-only
  linuxdriversmiscxillybus_pcie.c
  Copyright 2011 Xillybus Ltd, http:xillybus.com
  Driver for the Xillybus FPGAhost framework using PCI Express.
 End: all zeroes  }
 L0s has caused packet drops. No power saving, thank you. 
 Set up a single MSI interrupt 
	
	  Some (old and buggy?) hardware drops 64-bit addressed PCIe packets,
	  even when the PCIe driver claims that a 64-bit mask is OK. On the
	  other hand, on some architectures, 64-bit addressing is mandatory.
	  So go for the 64-bit mask only when failing is the other option.
 SPDX-License-Identifier: GPL-2.0-only
  Copyright 2021 Xillybus Ltd, http:xillybus.com
  Driver for the Xillybus class
 kobject_put() is normally done by cdev_del() 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright 2020 Xillybus Ltd, http:xillybus.com
  Driver for the XillyUSB FPGAhost framework.
  This driver interfaces with a special IP core in an FPGA, setting up
  a pipe between a hardware FIFO in the programmable logic and a device
  file in the host. The number of such pipes and their attributes are
  set up on the logic. This driver detects these automatically and
  creates the device files accordingly.
 In bytes, always a power of 2 
 Lazy: Equals bufsize  bufnum 
 Number of bytes in the FIFO 
 serialize operations on endpoint 
 protect these two lists 
 protect @out_ep, @in_fifo, bit fields below 
 serialize fops on FPGA to host stream 
 serialize fops on host to FPGA stream 
 EOF not arrived (yet) 
 Bit fields protected by @lock except for initialization 
 For dev_err() and such 
 protect @error 
 serialize opcode transmission 
 synchronize wakeup_all() 
 FPGA to host opcodes 
 Host to FPGA opcodes 
  fifo_write() and fifo_read() are NOT reentrant (i.e. concurrent multiple
  calls to each on the same FIFO is not allowed) however it's OK to have
  threads calling each of the two functions once on the same FIFO, and
  at the same time.
	
	  The spinlock here is necessary, because otherwise fifo->fill
	  could have been increased by fifo_write() after writing data
	  to the buffer, but this data would potentially not have been
	  visible on this thread at the time the updated fifo->fill was.
	  That could lead to reading invalid data.
  These three wrapper functions are used as the @copier argument to
  fifo_write() and fifo_read(), so that they can work directly with
  user memory as well.
  When endpoint_quiesce() returns, the endpoint has no URBs submitted,
  won't accept any new URB submissions, and its related work item doesn't
  and won't run anymore.
  Note that endpoint_dealloc() also frees fifo memory (if allocated), even
  though endpoint_alloc doesn't allocate that memory.
 Join @filled_buffers with @buffers to free these entries too 
 Argument may be NULL, and that's fine 
  @process_in_mutex is taken to ensure that bulk_in_work() won't call
  process_bulk_in() after wakeup_all()'s execution: The latter zeroes all
  @read_data_ok entries, which will make process_bulk_in() report false
  errors if executed. The mechanism relies on that xdev->error is assigned
  a non-zero value by report_io_error() prior to queueing wakeup_all(),
  which prevents bulk_in_work() from calling process_bulk_in().
  The fact that wakeup_all() and bulk_in_work() are queued on the same
  workqueue makes their concurrent execution very unlikely, however the
  kernel's API doesn't seem to ensure this strictly.
			
			  Fake an EOF: Even if such arrives, it won't be
			  processed.
 xdev is used by work item 
  safely_assign_in_fifo() changes the value of chan->in_fifo and ensures
  the previous pointer is never used after its return.
 This just decrements reference count 
		
		  Race conditions might have the FIFO filled while the
		  endpoint is marked as drained here. That doesn't matter,
		  because the sole purpose of @drained is to ensure that
		  certain data has been sent on the USB channel before
		  shutting it down. Hence knowing that the FIFO appears
		  to be empty with no outstanding URBs at some moment
		  is good enough.
		
		  xilly_memcpy always returns 0 => fifo_read can't fail =>
		  count > 0
 This just decrements reference count 
		
		  A write memory barrier ensures that the FIFO's fill level
		  is visible before read_data_ok turns zero, so the data in
		  the FIFO isn't missed by the consumer.
 We got really unexpected data 
	
	  The wait queue is woken with the interruptible variant, so the
	  wait function matches, however returning because of an interrupt
	  will mess things up considerably, in particular when the caller is
	  the release method. And the xdev->error part prevents being stuck
	  forever in the event of a bizarre hardware bug: Pull the USB plug.
 Empty loop 
  Note that flush_downstream() merely waits for the data to arrive to
  the application logic at the FPGA -- unlike PCIe Xillybus' counterpart,
  it does nothing to make it happen (and neither is it necessary).
  This function is not reentrant for the same @chan, but this is covered
  by the fact that for any given @chan, it's called either by the open,
  write, llseek and flush fops methods, which can't run in parallel (and the
  write + flush and llseek method handlers are protected with out_mutex).
  chan->flushed is there to avoid multiple flushes at the same position,
  in particular as a result of programs that close the file descriptor
  e.g. after a dup2() for redirection.
 Only real error, never -EINTR 
 Ignoring interrupts. Cancellation must be handled 
	
	  The checkpoint is given in terms of data elements, not bytes. As
	  a result, if less than an element's worth of data is stored in the
	  FIFO, it's not flushed, including the flush before closing, which
	  means that such data is lost. This is consistent with PCIe Xillybus.
 Only real error, never -EINTR 
 request_read_anything(): Ask the FPGA for any little amount of data 
		
		  Sending a flush request to a previously closed stream
		  effectively opens it, and also waits until the command is
		  confirmed by the FPGA. The latter is necessary because the
		  data is sent through a separate BULK OUT endpoint, and the
		  xHCI controller is free to reorder transmissions.
		 
		  This can't go wrong unless there's a serious hardware error
		  (or the computer is stuck for 500 ms?)
 Failure guarantees that opcode wasn't sent 
		
		  In non-blocking mode, request the FPGA to send any data it
		  has right away. Otherwise, the first read() will always
		  return -EAGAIN, which is OK strictly speaking, but ugly.
		  Checking and unrolling if this fails isn't worth the
		  effort -- the error is propagated to the first read()
		  anyhow.
		
		  Some 32-bit arithmetic that may wrap. Note that
		  complete_checkpoint is rounded up to the closest element
		  boundary, because the read() can't be completed otherwise.
		  fifo_checkpoint_bytes is rounded down, because it protects
		  in_fifo from overflowing.
		
		  To prevent flooding of OPCODE_SET_CHECKPOINT commands as
		  data is consumed, it's issued only if it moves the
		  checkpoint by at least an 8th of the FIFO's size, or if
		  it's necessary to complete the number of bytes requested by
		  the read() call.
		 
		  chan->read_data_ok is checked to spare an unnecessary
		  submission after receiving EOF, however it's harmless if
		  such slips away.
		
		  Reaching here means that the FIFO was empty when
		  fifo_read() returned, but not necessarily right now. Error
		  and EOF are checked and reported only now, so that no data
		  that managed its way to the FIFO is lost.
 FPGA has sent EOF 
 Has data slipped into the FIFO since fifo_read()? 
			
			  Note that when xdev->error is set (e.g. when the
			  device is unplugged), read_data_ok turns zero and
			  fifo->waitq is awaken.
			  Therefore no special attention to xdev->error.
 bytes_done == 0 
 Tell FPGA to send anything it has 
	
	  One second's timeout on flushing. Interrupts are ignored, because if
	  the user pressed CTRL-C, that interrupt will still be in flight by
	  the time we reach here, and the opportunity to flush is lost.
 The things you do to use dev_warn() and not pr_warn() 
		
		  If rc_read is nonzero, xdev->error indicates a global
		  device error. The error is reported later, so that
		  resources are freed.
		 
		  Looping on wait_event_interruptible() kinda breaks the idea
		  of being interruptible, and this should have been
		  wait_event(). Only it's being waken with
		  wake_up_interruptible() for the sake of other uses. If
		  there's a global device error, chan->read_data_ok is
		  deasserted and the wait queue is awaken, so this is covered.
 Empty loop 
		
		  chan->flushing isn't zeroed. If the pre-release flush timed
		  out, a cancel request will be sent before the next
		  OPCODE_SET_CHECKPOINT (i.e. when the file is opened again).
		  This is despite that the FPGA forgets about the checkpoint
		  request as the file closes. Still, in an exceptional race
		  condition, the FPGA could send an OPCODE_REACHED_CHECKPOINT
		  just before closing that would reach the host after the
		  file has re-opened.
 See comments on rc_read above 
  Xillybus' API allows device nodes to be seekable, giving the user
  application access to a RAM array on the FPGA (or logic emulating it).
	
	  Take both mutexes not allowing interrupts, since it seems like
	  common applications don't expect an -EINTR here. Besides, multiple
	  access to a single file descriptor on seekable devices is a mess
	  anyhow.
 Going to the end => to the beginning 
 In any case, we must finish on an element boundary 
 Return error after releasing mutexes 
	
	  If this is the first time poll() is called, and the file is
	  readable, set the relevant flag. Also tell the FPGA to send all it
	  has, to kickstart the mechanism that ensures there's always some
	  data in in_fifo unless the stream is dry end-to-end. Note that the
	  first poll() may not return a EPOLLIN, even if there's data on the
	  FPGA. Rather, the data will arrive soon, and trigger the relevant
	  wait queue.
	
	  poll() won't play ball regarding read() channels which
	  are synchronous. Allowing that will create situations where data has
	  been delivered at the FPGA, and users expecting select() to wake up,
	  which it may not. So make it never work.
 8 kiB 
 8 bytes granularity 
 Also frees FIFO mem if allocated 
 Entry is valid 
		
		  A downstream channel should never exist above index 13,
		  as it would request a nonexistent BULK endpoint > 15.
		  In the peculiar case that it does, it's ignored silently.
 Entry is valid 
 Phase I: Set up one fake upstream channel and obtain IDT 
 Set up a fake IDT with one async IN stream 
 Interrupt on probe method? Interesting. 
 Phase II: Set up the streams as defined in IDT 
 Exclude CRC 
	
	  Except for wildly misbehaving hardware, or if it was disconnected
	  just after responding with the IDT, there is no reason for any
	  work item to be running now. To be sure that xdev->channels
	  is updated on anything that might run in parallel, flush the
	  workqueue, which rarely does anything.
	
	  Try to send OPCODE_QUIESCE, which will fail silently if the device
	  was disconnected, but makes sense on module unload.
	
	  If the device has been disconnected, sending the opcode causes
	  a global device error with xdev->error, if such error didn't
	  occur earlier. Hence timing out means that the USB link is fine,
	  but somehow the message wasn't sent. Should never happen.
 Discourage further activity 
	
	  This device driver is declared with soft_unbind set, or else
	  sending OPCODE_QUIESCE above would always fail. The price is
	  that the USB framework didn't kill outstanding URBs, so it has
	  to be done explicitly before returning from this call.
		
		  Lock taken to prevent chan->out_ep from changing. It also
		  ensures xillyusb_open() and xillyusb_flush() don't access
		  xdev->dev after being nullified below.
 SPDX-License-Identifier: GPL-2.0-only
  linuxdriversmiscxillybus_of.c
  Copyright 2011 Xillybus Ltd, http:xillybus.com
  Driver for the Xillybus FPGAhost framework using Open Firmware.
 Match table for of_platform binding 
 Deprecated 
 SPDX-License-Identifier: GPL-2.0-only
  linuxdriversmiscxillybus_core.c
  Copyright 2011 Xillybus Ltd, http:xillybus.com
  Driver for the Xillybus FPGAhost framework.
  This driver interfaces with a special IP core in an FPGA, setting up
  a pipe between a hardware FIFO in the programmable logic and a device
  file in the host. The number of such pipes and their attributes are
  set up on the logic. This driver detects these automatically and
  creates the device files accordingly.
 General timeout is 100 ms, rx timeout is 10 ms 
  Locking scheme: Mutexes protect invocations of character device methods.
  If both locks are taken, wr_mutex is taken first, rd_mutex second.
  wr_spinlock protects wr__buf_idx, wr_empty, wr_sleepy, wr_ready and the
  buffers' end_offset fields against changes made by IRQ handler (and in
  theory, other file request handlers, but the mutex handles that). Nothing
  else.
  They are held for short direct memory manipulations. Needless to say,
  no mutex locking is allowed when a spinlock is held.
  rd_spinlock does the same with rd__buf_idx, rd_empty and end_offset.
  register_mutex is endpoint-specific, and is held when non-atomic
  register operations are performed. wr_mutex and rd_mutex may be
  held when register_mutex is taken, but none of the spinlocks. Note that
  register_mutex doesn't protect against sporadic buf_ctrl_reg writes
  which are unrelated to buf_offset_reg, since they are harmless.
  Blocking on the wait queues is allowed with mutexes held, but not with
  spinlocks.
  Only interruptible blocking is allowed on mutexes and wait queues.
  All in all, the locking order goes (with skips allowed, of course):
  wr_mutex -> rd_mutex -> register_mutex -> wr_spinlock -> rd_spinlock
  xillybus_isr assumes the interrupt is allocated exclusively to it,
  which is the natural case MSI and several other hardware-oriented
  interrupts. Sharing is not allowed.
 Message NACK 
 Last message 
 Scan through messages 
 Write channel 
 Read channel 
 For select() 
 Message ACK 
  A few trivial memory management functions.
  NOTE: These functions are used only on probe and remove, and therefore
  no locks are applied!
 Init to silence warning 
 Not the message buffer 
		
		  Buffers are expected in descending size order, so there
		  is either enough space for this buffer or none at all.
 Not the message buffer 
 Channel 0 is message buf. 
 Initialize all channels with defaults 
 NULL for msg channel 
 Do nothing, just scan thru string ;
 This should be generated ad-hoc 
 Opcode 3 for channel 0 = Send IDT 
 Check version number. Reject anything above 0x82. 
 Initializations are there only to silence warnings 
 Note that we may drop mutex within this loop 
 Update wr_host_ to its post-operation state 
		
		  Marking our situation after the possible changes above,
		  for use after releasing the spinlock.
		 
		  empty = empty before change
		  exhasted = empty after possible change
 Go on, now without the spinlock 
 Position zero means it's virgin 
				
				  Tell FPGA the buffer is done with. It's an
				  atomic operation to the FPGA, so what
				  happens with other channels doesn't matter,
				  and the certain channel is protected with
				  the channel-specific mutex.
 This includes a zero-count return = EOF 
 More in RAM buffer(s)? Just go on. 
		
		  Nonblocking read: The "ready" flag tells us that the FPGA
		  has data to send. In non-blocking mode, if it isn't on,
		  just return. But if there is, we jump directly to the point
		  where we ask for the FPGA to send all it has, and wait
		  until that data arrives. So in a sense, we do block in
		  nonblocking mode, but only for a very short time.
			
			  Note that in case of an element-misaligned read
			  request, offsetlimit will include the last element,
			  which will be partially read from.
			
			  In synchronous mode, always send an offset limit.
			  Just don't send a value too big.
 Don't request more than one buffer 
 Don't request more than all buffers 
			
			  In asynchronous mode, force early flush of a buffer
			  only if that will allow returning a full count. The
			  "offsetlimit < ( ... )" rather than "<=" excludes
			  requesting a full buffer, which would obviously
			  cause a buffer transmission anyhow
 2 = offset limit 
		
		  If partial completion is disallowed, there is no point in
		  timeout sleeping. Neither if no_time_left is set and
		  there's no data.
			
			  This do-loop will run more than once if another
			  thread reasserted wr_sleepy before we got the mutex
			  back, so we try again.
 Mutex is not held if got here 
 Don't admit snoozing 
		
		  If our time is out, skip the waiting. We may miss wr_sleepy
		  being deasserted but hey, almost missing the train is like
		  missing it.
 wr_sleepy deasserted 
 Interrupt 
 We're out of sleeping time. Desperate! 
			
			  Reaching here means that we allow partial return,
			  that we've run out of time, and that we have
			  nothing to return.
			  So tell the FPGA to send anything it has or gets.
 Opcode 3, flush it all! 
		
		  Reaching here means that we do have data in the buffer,
		  but the "partial" flag disallows returning less than
		  required. And we don't have as much. So loop again,
		  which is likely to end up blocking indefinitely until
		  enough data has arrived.
  The timeout argument takes values as follows:
   >0 : Flush with timeout
  ==0 : Flush, and wait idefinitely for the flush to complete
   <0 : Autoflush: Flush only if there's a single buffer occupied
	
	  Don't flush a closed channel. This can happen when the work queued
	  autoflush thread fires off after the file has closed. This is not
	  an error, just something to dismiss.
 Submit the current buffer if it's nonempty 
 Copy  unflushed data, so we can put it in next buffer 
 Autoflush only if a single buffer is occupied 
			
			  A new work item may be queued by the ISR exactly
			  now, since the execution of a work item allows the
			  queuing of a new one while it's running.
 The 4th element is never needed for data, so it's a flag 
 Set up rd_full to reflect a certain moment's state 
 Channel ID 
 Opcode 2, submit buffer 
 Autoflush 
	
	  bufidx is now the last buffer written to (or equal to
	  rd_fpga_buf_idx if buffer was never written to), and
	  channel->rd_host_buf_idx the one after it.
	 
	  If bufidx == channel->rd_fpga_buf_idx we're either empty or full.
 Loop waiting for draining of buffers 
			channel->rd_full = 1; 
					        Not really full,
					        but needs waiting.
		
		  Indefinite sleep with mutex taken. With data waiting for
		  flushing user should not be surprised if open() for write
		  sleeps.
 1 second timeout 
 Initializations are there only to silence warnings 
			
			  Update rd_host_ to its state after this operation.
			  count=0 means committing the buffer immediately,
			  which is like flushing, but not necessarily block.
		
		  Marking our situation after the possible changes above,
		  for use  after releasing the spinlock.
		 
		  full = full before change
		  exhasted = full after possible change
 Go on, now without the spinlock 
 Zero means it's virgin 
 Virgin, but leftovers are due 
 Clear flag 
 2 = submit buffer 
 If there's more space, just go on 
		
		  Indefinite sleep with mutex taken. With data waiting for
		  flushing, user should not be surprised if open() for write
		  sleeps.
 No timeout 
	
	  It gets complicated because:
	  1. We don't want to take a mutex we don't have to
	  2. We don't want to open one direction if the other will fail.
	
	  Note: open() may block on getting mutexes despite O_NONBLOCK.
	  This shouldn't occur normally, since multiple open of the same
	  file descriptor is almost always prohibited anyhow
	  (_exclusive_open is normally set in real-life systems).
 First open of file 
 Move the host to first buffer 
 Opcode 4, open channel 
 First open of file 
 Move the host to first buffer 
 No leftovers. 
 Opcode 4, open channel 
			
			  We rely on the kernel calling flush()
			  before we get here.
 Channel ID 
 Opcode 5, close channel 
 Opcode 5, close channel 
			
			  This is crazily cautious: We make sure that not
			  only that we got an EOF (be it because we closed
			  the channel or because of a user's EOF), but verify
			  that it's one beyond the last buffer arrived, so
			  we have no leftover buffers pending before wrapping
			  up (which can only happen in asynchronous channels,
			  BTW)
				
				  Check if eof points at the buffer after
				  the last one the FPGA submitted. Note that
				  no EOF is marked by negative eof.
				
				  Steal extra 100 ms if awaken by interrupt.
				  This is a simple workaround for an
				  interrupt pending when entering, which would
				  otherwise result in declaring the hardware
				  non-responsive.
	
	  Take both mutexes not allowing interrupts, since it seems like
	  common applications don't expect an -EINTR here. Besides, multiple
	  access to a single file descriptor on seekable devices is a mess
	  anyhow.
 Going to the end => to the beginning 
 In any case, we must finish on an element boundary 
 Opcode 6, set address 
 Return error after releasing mutexes 
	
	  Since seekable devices are allowed only when the channel is
	  synchronous, we assume that there is no data pending in either
	  direction (which holds true as long as no concurrent access on the
	  file descriptor takes place).
	  The only thing we may need to throw away is leftovers from partial
	  write() flush.
	
	  poll() won't play ball regarding read() channels which
	  aren't asynchronous and support the nonempty message. Allowing
	  that will create situations where data has been delivered at
	  the FPGA, and users expecting select() to wake up, which it may
	  not.
			
			  Not EPOLLHUP, because its behavior is in the
			  mist, and EPOLLIN does what we want: Wake up
			  the read file descriptor so it sees EOF.
	
	  If partial data write is disallowed on a write() channel,
	  it's pointless to ever signal OK to write, because is could
	  block despite some space being available.
	
	  The bogus IDT is used during bootstrap for allocating the initial
	  message buffer, and then the message buffer and space for the IDT
	  itself. The initial message buffer is of a single page's size, but
	  it's soon replaced with a more modest one (and memory is freed).
	
	  Writing the value 0x00000001 to Endianness register signals which
	  endianness this processor is using, so the FPGA can swap words as
	  necessary.
 Bootstrap phase I: Allocate temporary message buffer 
 Clear the message subsystem (and counter in particular) 
	
	  Set DMA 3264 bit mode, quiesce the device (?!) and get IDT
	  buffer size.
 Enable DMA 
 Bootstrap phase II: Allocate buffer for IDT and obtain it 
 Bootstrap phase III: Allocate buffers according to IDT 
	
	  Flushing is done upon endpoint release to prevent access to memory
	  just about to be released. This makes the quiesce complete.
 flush_workqueue() was called for each endpoint released 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2014, 2015 Intel Corporation
  Authors:
  Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
  Maintained by: <tpmdd-devel@lists.sourceforge.net>
  This file contains TPM2 protocol implementations of the commands
  used by the kernel internally.
 Fixed timeouts for TPM2 
 PTP spec timeouts 
 Key creation commands long timeouts 
  tpm2_ordinal_duration_index() - returns an index to the chip duration table
  @ordinal: TPM command ordinal.
  The function returns an index to the chip duration table
  (enum tpm_duration), that describes the maximum amount of
  time the chip could take to return the result for a  particular ordinal.
  The values of the MEDIUM, and LONG durations are taken
  from the PC Client Profile (PTP) specification (750, 2000 msec)
  LONG_LONG is for commands that generates keys which empirically takes
  a longer time on some systems.
  Return:
   TPM_MEDIUM
   TPM_LONG
   TPM_LONG_LONG
   TPM_UNDEFINED
 Startup 
 144 
 143 
 17B 
 15C 
 13E 
 185 
 186 
 177 
 182 
 121 
 129 
 17A 
 14E 
 131 
 153 
 191 
  tpm2_calc_ordinal_duration() - calculate the maximum command duration
  @chip:    TPM chip to use.
  @ordinal: TPM command ordinal.
  The function returns the maximum amount of time the chip could take
  to return the result for a particular ordinal in jiffies.
  Return: A maximal duration time for an ordinal in jiffies.
  tpm2_pcr_read() - read a PCR value
  @chip:	TPM chip to use.
  @pcr_idx:	index of the PCR to read.
  @digest:	PCR bank and buffer current PCR value is written to.
  @digest_size_ptr:	pointer to variable that stores the digest size.
  Return: Same as with tpm_transmit_cmd.
  tpm2_pcr_extend() - extend a PCR value
  @chip:	TPM chip to use.
  @pcr_idx:	index of the PCR.
  @digests:	list of pcr banks and corresponding digest values to extend.
  Return: Same as with tpm_transmit_cmd.
  tpm2_get_random() - get random bytes from the TPM RNG
  @chip:	a &tpm_chip instance
  @dest:	destination buffer
  @max:	the max number of random bytes to pull
  Return:
    size of the buffer on success,
    -errno otherwise (positive TPM return codes are masked to -EIO)
  tpm2_flush_context() - execute a TPM2_FlushContext command
  @chip:	TPM chip to use
  @handle:	context handle
  tpm2_get_tpm_pt() - get value of a TPM_CAP_TPM_PROPERTIES type property
  @chip:		a &tpm_chip instance
  @property_id:	property ID.
  @value:		output variable.
  @desc:		passed to tpm_transmit_cmd()
  Return:
    0 on success,
    -errno or a TPM return code otherwise
  tpm2_shutdown() - send a TPM shutdown command
  Sends a TPM shutdown command. The shutdown command is used in call
  sites where the system is going down. If it fails, there is not much
  that can be done except print an error message.
  @chip:		a &tpm_chip instance
  @shutdown_type:	TPM_SU_CLEAR or TPM_SU_STATE.
  tpm2_do_selftest() - ensure that all self tests have passed
  @chip: TPM chip to use
  Return: Same as with tpm_transmit_cmd.
  The TPM can either run all self tests synchronously and then return
  RC_SUCCESS once all tests were successful. Or it can choose to run the tests
  asynchronously and return RC_TESTING immediately while the self tests still
  execute in the background. This function handles both cases and waits until
  all tests have completed.
  tpm2_probe() - probe for the TPM 2.0 protocol
  @chip:	a &tpm_chip instance
  Send an idempotent TPM 2.0 command and see whether there is TPM2 chip in the
  other end based on the response tag. The flag TPM_CHIP_FLAG_TPM2 is set by
  this function if this is the case.
  Return:
    0 on success,
    -errno otherwise
 We ignore TPM return codes on purpose. 
	
	  Avoid unnecessary PCR read operations to reduce overhead
	  and obtain identifiers of the crypto subsystem.
  tpm2_startup - turn on the TPM
  @chip: TPM chip to use
  Normally the firmware should start the TPM. This function is provided as a
  workaround if this does not happen. A legal case for this could be for
  example when a TPM emulator is used.
  Return: same as tpm_transmit_cmd()
  tpm2_auto_startup - Perform the standard automatic TPM initialization
                      sequence
  @chip: TPM chip to use
  Returns 0 on success, < 0 in case of fatal error.
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2014 Intel Corporation
  Authors:
  Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
  Maintained by: <tpmdd-devel@lists.sourceforge.net>
  This device driver implements the TPM interface as defined in
  the TCG CRB 2.0 TPM specification.
  __crb_go_idle - request tpm crb device to go the idle state
  @dev:  crb device
  @priv: crb private data
  Write CRB_CTRL_REQ_GO_IDLE to TPM_CRB_CTRL_REQ
  The device should respond within TIMEOUT_C by clearing the bit.
  Anyhow, we do not wait here as a consequent CMD_READY request
  will be handled correctly even if idle was not completed.
  The function does nothing for devices with ACPI-start method
  or SMC-start method.
  Return: 0 always
 mask ,
 value 
  __crb_cmd_ready - request tpm crb device to enter ready state
  @dev:  crb device
  @priv: crb private data
  Write CRB_CTRL_REQ_CMD_READY to TPM_CRB_CTRL_REQ
  and poll till the device acknowledge it by clearing the bit.
  The device should respond within TIMEOUT_C.
  The function does nothing for devices with ACPI-start method
  or SMC-start method.
  Return: 0 on success -ETIME on timeout;
 mask ,
 value 
	 A sanity check that the upper layer wants to get at least the header
	  as that is the minimum size for any TPM response.
	 If this bit is set, according to the spec, the TPM is in
	  unrecoverable condition.
	 Read the first 8 bytes in order to get the length of the response.
	  We read exactly a quad word in order to make sure that the remaining
	  reads will be aligned.
  This is a TPM Command Response Buffer start method that invokes a
  Secure Monitor Call to requrest the firmware to execute or cancel
  a TPM 2.0 command.
	 Zero the cancel register so that the next command will not get
	  canceled.
 Make sure that cmd is populated before issuing start. 
	 The reason for the extra quirk is that the PTT in 4th Gen Core CPUs
	  report only ACPI start but in practice seems to require both
	  CRB start, hence invoking CRB start method if hid == MSFT0101.
 Detect a 64 bit address on a 32 bit system 
  Work around broken BIOSs that return inconsistent values from the ACPI
  region vs the registers. Trust the ACPI region. Such broken systems
  probably cannot send large TPM commands since the buffer will be truncated.
	 The ACPI IO region starts at the head area and continues to include
	  the control area, as one nice sane region except for some older
	  stuff that puts the control area outside the ACPI IO region.
	
	  PTT HW bug wa: wake up the device to access
	  possibly not retained registers.
	 According to the PTP specification, overlapping command and response
	  buffer sizes must be identical.
 Should the FIFO driver handle this? 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2016 Intel Corporation
  Authors:
  Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
  Maintained by: <tpmdd-devel@lists.sourceforge.net>
  This file contains TPM2 protocol implementations of the commands
  used by the kernel internally.
 Prevent caller getting a dangling pointer. 
		
		  TPM_RC_HANDLE means that the session context can't
		  be loaded because of an internal counter mismatch
		  that makes the TPM think there might have been a
		  replay.  This might happen if the context was saved
		  and loaded outside the space.
		 
		  TPM_RC_REFERENCE_H0 means the session has been
		  flushed outside the space
 sanity check, should never happen 
 load failed, just forget session 
 sanity check, should never happen 
 handle error saving session, just forget it 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2004 IBM Corporation
  Copyright (C) 2014 Intel Corporation
  Authors:
  Leendert van Doorn <leendert@watson.ibm.com>
  Dave Safford <safford@watson.ibm.com>
  Reiner Sailer <sailer@watson.ibm.com>
  Kylene Hall <kjhall@us.ibm.com>
  Maintained by: <tpmdd-devel@lists.sourceforge.net>
  Device driver for TCGTCPA TPM (trusted platform module).
  Specifications at www.trustedcomputinggroup.org
  Note, the TPM chip is not interrupt driven (only polling)
  and can have very long timeouts (minutes!). Hence the unusual
  calls to msleep.
  Bug workaround - some TPM's don't flush the most
  recently changed pcr on suspend, so force the flush
  with an extend to the selected _unused_ non-volatile pcr.
  tpm_calc_ordinal_duration() - calculate the maximum command duration
  @chip:    TPM chip to use.
  @ordinal: TPM command ordinal.
  The function returns the maximum amount of time the chip could take
  to return the result for a particular ordinal in jiffies.
  Return: A maximal duration time for an ordinal in jiffies.
	 A sanity check. send() should just return zero on success e.g.
	  not the command length.
  tpm_transmit - Internal kernel interface to transmit TPM commands.
  @chip:	a TPM chip to use
  @buf:	a TPM command buffer
  @bufsiz:	length of the TPM command buffer
  A wrapper around tpm_try_transmit() that handles TPM2_RC_RETRY returns from
  the TPM and retransmits the command after a delay up to a maximum wait of
  TPM2_DURATION_LONG.
  Note that TPM 1.x never returns TPM2_RC_RETRY so the retry logic is TPM 2.0
  only.
  Return:
   The response length	- OK
   -errno			- A system error
 space for header and handles 
 the command code is where the return code will be 
	
	  Subtlety here: if we have a space, the handles will be
	  transformed, so when we restore the header we also have to
	  restore the handles.
		
		  return immediately if self test returns test
		  still running to shorten boot time.
  tpm_transmit_cmd - send a tpm command to the device
  @chip:			a TPM chip to use
  @buf:			a TPM command buffer
  @min_rsp_body_length:	minimum expected length of response body
  @desc:			command description used in the error message
  Return:
   0		- OK
   -errno	- A system error
   TPM_RC	- A TPM error
  tpm_is_tpm2 - do we a have a TPM2 chip?
  @chip:	a &struct tpm_chip instance, %NULL for the default chip
  Return:
  1 if we have a TPM2 chip.
  0 if we don't have a TPM2 chip.
  A negative number for system errors (errno).
  tpm_pcr_read - read a PCR value from SHA1 bank
  @chip:	a &struct tpm_chip instance, %NULL for the default chip
  @pcr_idx:	the PCR to be retrieved
  @digest:	the PCR bank and buffer current PCR value is written to
  Return: same as with tpm_transmit_cmd()
  tpm_pcr_extend - extend a PCR value in SHA1 bank.
  @chip:	a &struct tpm_chip instance, %NULL for the default chip
  @pcr_idx:	the PCR to be retrieved
  @digests:	array of tpm_digest structures used to extend PCRs
  Note: callers must pass a digest for every allocated PCR bank, in the same
  order of the banks in chip->allocated_banks.
  Return: same as with tpm_transmit_cmd()
  tpm_send - send a TPM command
  @chip:	a &struct tpm_chip instance, %NULL for the default chip
  @cmd:	a TPM command buffer
  @buflen:	the length of the TPM command buffer
  Return: same as with tpm_transmit_cmd()
  We are about to suspend. Save the TPM state
  so that it can be restored.
  Resume from a power safe. The BIOS already restored
  the TPM state.
  tpm_get_random() - get random bytes from the TPM's RNG
  @chip:	a &struct tpm_chip instance, %NULL for the default chip
  @out:	destination buffer for the random bytes
  @max:	the max number of bytes to write to @out
  Return: number of random bytes read or a negative error value.
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2017 James.Bottomley@HansenPartnership.com
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2004 IBM Corporation
  Authors:
  Leendert van Doorn <leendert@watson.ibm.com>
  Dave Safford <safford@watson.ibm.com>
  Reiner Sailer <sailer@watson.ibm.com>
  Kylene Hall <kjhall@us.ibm.com>
  Copyright (C) 2013 Obsidian Research Corp
  Jason Gunthorpe <jgunthorpe@obsidianresearch.com>
  Device file system interface to the TPM
	 If the command is not implemented by the TPM, synthesize a
	  response with a TPM2_RC_COMMAND_CODE return for user-space.
	 Cannot perform a write until the read has cleared either via
	  tpm_read or a user_read_timer timeout. This also prevents split
	  buffered writes from blocking here.
	
	  If in nonblocking mode schedule an async job to send
	  the command return the size.
	  In case of error the err code will be returned in
	  the subsequent read call.
	 atomic tpm command send and result receive. We only hold the ops
	  lock during this period so that the tpm can be unregistered even if
	  the char dev is held open.
	
	  The response_length indicates if there is still response
	  (or part of it) to be consumed. Partial reads decrease it
	  by the number of bytes read, and write resets it the zero.
  Called on file close
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2004 IBM Corporation
  Authors:
  Leendert van Doorn <leendert@watson.ibm.com>
  Dave Safford <safford@watson.ibm.com>
  Reiner Sailer <sailer@watson.ibm.com>
  Kylene Hall <kjhall@us.ibm.com>
  Maintained by: <tpmdd-devel@lists.sourceforge.net>
  Device driver for TCGTCPA TPM (trusted platform module).
  Specifications at www.trustedcomputinggroup.org	 
 National definitions 
 status bits 
 output buffer full 
 input buffer full 
 F0 
 A2 
 ready to receive command 
 ready to receive data 
 command bits 
 normal mode 
  Wait for a certain status to appear
 status immediately available check 
 wait for status 
 status immediately available check 
 wait for status 
 read the whole packet 
	
	  If we hit the chip with back to back commands it locks up
	  and never set IBF. Hitting it with this "hammer" seems to
	  fix it. Not sure why this is needed, we followed the flow
	  chart in the manual to the letter.
 verify that it is a National part (SID) 
 enable the DPM module 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2004 IBM Corporation
  Authors:
  Leendert van Doorn <leendert@watson.ibm.com>
  Dave Safford <safford@watson.ibm.com>
  Reiner Sailer <sailer@watson.ibm.com>
  Kylene Hall <kjhall@us.ibm.com>
  Copyright (C) 2013 Obsidian Research Corp
  Jason Gunthorpe <jgunthorpe@obsidianresearch.com>
  sysfs filesystem inspection interface to the TPM
 TPM 1.2 
 TPM 1.1 
 should never happen 
  The following set of defines represents all the magic to build
  the per hash attribute groups for displaying each bank of PCRs.
  The only slight problem with this approach is that every PCR is
  hard coded to be present, so you don't know if an PCR is missing
  until a cat of the file returns -EINVAL
  Also note you must ignore checkpatch warnings in this macro
  code. This is deep macro magic that checkpatch.pl doesn't
  understand.
 Note, this must match TPM2_PLATFORM_PCR which is fixed at 24. 
 ignore checkpatch warning about trailing ; in macro. 
 ignore checkpatch warning about trailing , in macro. 
  End of macro structure to build an attribute group containing 24
  PCR value files for each supported hash algorithm
  The next set of macros implements the cleverness for each hash to
  build a static attribute group called pcr_group_<hash> which can be
  added to chip->groups[].
  The first argument is the TPM algorithm id and the second is the
  hash used as both the suffix and the group name.  Note: the group
  name is a directory in the top level tpm class with the name
  pcr-<hash>, so it must not clash with any other names already
  in the sysfs directory.
 add one group for each bank hash 
			
			  If triggers, send a patch to add both a
			  PCR_ATTR_BUILD() macro above for the
			  missing algorithm as well as an additional
			  case in this switch statement.
	
	  This will only trigger if someone has added an additional
	  hash to the tpm_algorithms enum without incrementing
	  TPM_MAX_HASHES.
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2004 IBM Corporation
  Authors:
  Leendert van Doorn <leendert@watson.ibm.com>
  Dave Safford <safford@watson.ibm.com>
  Reiner Sailer <sailer@watson.ibm.com>
  Kylene Hall <kjhall@us.ibm.com>
  Copyright (C) 2013 Obsidian Research Corp
  Jason Gunthorpe <jgunthorpe@obsidianresearch.com>
  Device file system interface to the TPM
	 It's assured that the chip will be opened just once,
	  by the check of is_open variable, which is protected
  Called on file close
 SPDX-License-Identifier: GPL-2.0-or-later
  ATMEL I2C TPM AT97SC3204T
  Copyright (C) 2012 V Lab Technologies
   Teddy Reed <teddy@prosauce.org>
  Copyright (C) 2013, Obsidian Research Corp.
   Jason Gunthorpe <jgunthorpe@obsidianresearch.com>
  Device driver for ATMEL I2C TPMs.
  Teddy Reed determined the basic I2C command flow, unlike other I2C TPM
  devices the raw TCG formatted TPM command data is written via I2C and then
  raw TCG formatted TPM command data is returned via I2C.
  TGC statuslocalityetc functions seen in the LPC implementation do not
  seem to be present.
 ms 
 2 sec 
	 This is the amount we read on the first try. 25 was chosen to fit a
	  fair number of read responses in the buffer so a 2nd retry can be
 The upper layer does not support incomplete sends. 
	 Get the message size from the message header, if we didn't get the
	  whole message in read_status then we need to re-read the
	 The TPM fails the I2C read until it is ready, so we do the entire
	  transfer here and buffer it locally. This way the common code can
	 Once the TPM has completed the command the command remains readable
 Default timeouts 
	 There is no known way to probe for this device, and all version
	  information seems to be read via TPM commands. Thus we rely on the
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) Microsoft Corporation
  Implements a firmware TPM as described here:
  https:www.microsoft.comen-usresearchpublicationftpm-software-implementation-tpm-chip
  A reference implementation is available here:
  https:github.commicrosoftms-tpm-20-reftreemasterSamplesARM32-FirmwareTPMoptee_tafTPM
  TA_FTPM_UUID: BC50D971-D4C9-42C4-82CB-343FB7F37896
  Randomly generated, and must correspond to the GUID on the TA side.
  Defined here in the reference implementation:
  https:github.commicrosoftms-tpm-20-refblobmasterSamplesARM32-FirmwareTPMoptee_tafTPMincludefTPM.h#L42
  ftpm_tee_tpm_op_recv() - retrieve fTPM response.
  @chip:	the tpm_chip description as specified in driverchartpmtpm.h.
  @buf:	the buffer to store data.
  @count:	the number of bytes to read.
  Return:
 	In case of success the number of bytes received.
 	On failure, -errno.
  ftpm_tee_tpm_op_send() - send TPM commands through the TEE shared memory.
  @chip:	the tpm_chip description as specified in driverchartpmtpm.h
  @buf:	the buffer to send.
  @len:	the number of bytes to send.
  Return:
 	In case of success, returns 0.
 	On failure, -errno
 Invoke FTPM_OPTEE_TA_SUBMIT_COMMAND function of fTPM TA 
 Fill FTPM_OPTEE_TA_SUBMIT_COMMAND parameters 
 sanity check resp_len 
 sanity checks look good, cache the response 
 not supported 
  Check whether this driver supports the fTPM TA in the TEE instance
  represented by the params (verdata) to this function.
	
	  Currently this driver only support GP Complaint OPTEE based fTPM TA
  ftpm_tee_probe() - initialize the fTPM
  @pdev: the platform_device description.
  Return:
 	On success, 0. On failure, -errno.
 Open context with TEE driver 
 Open a session with fTPM TA 
 Allocate dynamic shared memory with fTPM TA 
 Allocate new struct tpm_chip instance 
 Create a character device for the fTPM 
  ftpm_tee_remove() - remove the TPM device
  @pdev: the platform_device description.
  Return:
 	0 always.
 Release the chip 
 frees chip 
 Free the shared memory pool 
 close the existing session with fTPM TA
 close the context with TEE driver 
 memory allocated with devm_kzalloc() is freed automatically 
  ftpm_tee_shutdown() - shutdown the TPM device
  @pdev: the platform_device description.
 UUID of the fTPM TA 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2015 Infineon Technologies AG
  Copyright (C) 2016 STMicroelectronics SAS
  Authors:
  Peter Huewe <peter.huewe@infineon.com>
  Christophe Ricard <christophe-h.ricard@st.com>
  Maintained by: <tpmdd-devel@lists.sourceforge.net>
  Device driver for TCGTCPA TPM (trusted platform module).
  Specifications at www.trustedcomputinggroup.org
  This device driver implements the TPM interface as defined in
  the TCG TPM Interface Spec version 1.3, revision 27 via _rawnative
  SPI access_.
  It is based on the original tpm_tis device driver from Leendert van
  Dorn and Kyleen Hall and Jarko Sakkinnen.
  TCG SPI flow control is documented in section 6.4 of the spec[1]. In short,
  keep trying to read from the device until MISO goes high indicating the
  wait state has ended.
  [1] https:trustedcomputinggroup.orgresourcepc-client-platform-tpm-profile-ptp-specification
 handle SPI wait states
 Flow control transfers are receive only 
 If the SPI device has an IRQ then use that 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2012-2014 Intel Corporation
  Authors:
  Xiaoyan Zhang <xiaoyan.zhang@intel.com>
  Jiang Liu <jiang.liu@linux.intel.com>
  Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
  Maintained by: <tpmdd-devel@lists.sourceforge.net>
  This file contains implementation of the sysfs interface for PPI.
 PPI 1.3 for TPM 2 
	
	  output.pointer should be of package type, including two integers.
	  The first is function return code, 0 means success and 1 means
	  error. The second is pending TPM operation requested by the OS, 0
	  means none and >0 means operation value.
	
	  the function to submit TPM operation request to pre-os environment
	  is updated with function index from SUBREQ to SUBREQ2 since PPI
	  version 1.1
	
	  PPI spec defines params[3].type as ACPI_TYPE_PACKAGE. Some BIOS
	  accept bufferstringinteger type, but some BIOS accept buffer
	  stringpackage type. For PPI version 1.0 and 1.1, use buffer type
	  for compatibility, and use package type since 1.2 according to spec.
	
	  PPI spec defines params[3].type as empty package, but some platforms
	  (e.g. Capella with PPI 1.0) need integerstringbuffer type, so for
	  compatibility, define params[3].type as buffer, if PPI version < 1.2
	
	  parameter output.pointer should be of package type, including
	  3 integers. The first means function return code, the second means
	  most recent TPM operation request, and the last means response to
	  the most recent TPM operation request. Only if the first is 0, and
	  the second integer is not 0, the response makes sense.
 Cache PPI version string. 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2004 IBM Corporation
  Authors:
  Leendert van Doorn <leendert@watson.ibm.com>
  Dave Safford <safford@watson.ibm.com>
  Reiner Sailer <sailer@watson.ibm.com>
  Kylene Hall <kjhall@us.ibm.com>
  Maintained by: <tpmdd-devel@lists.sourceforge.net>
  Device driver for TCGTCPA TPM (trusted platform module).
  Specifications at www.trustedcomputinggroup.org	 
 write status bits 
 read status bits 
 start reading header 
 size of the data received 
 clear the waiting data anyway 
 read all the data available 
 make sure data available is gone 
 SPDX-License-Identifier: GPL-2.0
  Copyright 2020 Google Inc.
  Based on Infineon TPM driver by Peter Huewe.
  cr50 is a firmware for H1 secure modules that requires special
  handling for the I2C interface.
  - Use an interrupt for transaction status instead of hardcoded delays.
  - Must use write+wait+read read protocol.
  - All 4 bytes of status register must be readwritten at once.
  - Burst count max is 63 bytes, and burst count behaves slightly differently
    than other I2C TPMs.
  - When reading from FIFO the full burstcnt must be read instead of just
    reading header and determining the remainder.
 Short timeout during transactions 
 Timeout for TPM ready without IRQ 
 Device and vendor ID reg value 
 Max retries due to I2C errors 
 Min usecs between retries on I2C 
 Max usecs between retries on I2C 
  struct tpm_i2c_cr50_priv_data - Driver private data.
  @irq:	Irq number used for this chip.
 		If irq <= 0, then a fixed timeout is used instead of waiting for irq.
  @tpm_ready:	Struct used by irq handler to signal RW readiness.
  @buf:	Buffer used for i2c writes, with i2c address prepended to content.
  Private driver struct used by kernel threads and interrupt context.
  tpm_cr50_i2c_int_handler() - cr50 interrupt handler.
  @dummy:	Unused parameter.
  @tpm_info:	TPM chip information.
  The cr50 interrupt handler signals waiting threads that the
  interrupt has been asserted. It does not do any interrupt triggered
  processing but is instead used to avoid fixed delays.
  Return:
 	IRQ_HANDLED signifies irq was handled by this device.
  tpm_cr50_i2c_wait_tpm_ready() - Wait for tpm to signal ready.
  @chip: A TPM chip.
  Wait for completion interrupt if available, otherwise use a fixed
  delay for the TPM to be ready.
  Return:
  - 0:		Success.
  - -errno:	A POSIX error code.
 Use a safe fixed delay if interrupt is not supported 
 Wait for interrupt to indicate TPM is ready to respond 
  tpm_cr50_i2c_enable_tpm_irq() - Enable TPM irq.
  @chip: A TPM chip.
  tpm_cr50_i2c_disable_tpm_irq() - Disable TPM irq.
  @chip: A TPM chip.
  tpm_cr50_i2c_transfer_message() - Transfer a message over i2c.
  @dev:	Device information.
  @adapter:	I2C adapter.
  @msg:	Message to transfer.
  Call unlocked i2c transfer routine with the provided parameters and
  retry in case of bus errors.
  Return:
  - 0:		Success.
  - -errno:	A POSIX error code.
 Successfully transferred the message 
 No i2c message transferred 
  tpm_cr50_i2c_read() - Read from TPM register.
  @chip:	A TPM chip.
  @addr:	Register address to read from.
  @buffer:	Read destination, provided by caller.
  @len:	Number of bytes to read.
  Sends the register address byte to the TPM, then waits until TPM
  is ready via interrupt signal or timeout expiration, then 'len'
  bytes are read from TPM response into the provided 'buffer'.
  Return:
  - 0:		Success.
  - -errno:	A POSIX error code.
 Prepare for completion interrupt 
 Send the register address byte to the TPM 
 Wait for TPM to be ready with response data 
 Read response data from the TPM 
  tpm_cr50_i2c_write()- Write to TPM register.
  @chip:	A TPM chip.
  @addr:	Register address to write to.
  @buffer:	Data to write.
  @len:	Number of bytes to write.
  The provided address is prepended to the data in 'buffer', the
  cobined address+data is sent to the TPM, then wait for TPM to
  indicate it is done writing.
  Return:
  - 0:		Success.
  - -errno:	A POSIX error code.
 Prepend the 'register address' to the buffer 
 Prepare for completion interrupt 
 Send write request buffer with address 
 Wait for TPM to be ready, ignore timeout 
  tpm_cr50_check_locality() - Verify TPM locality 0 is active.
  @chip: A TPM chip.
  Return:
  - 0:		Success.
  - -errno:	A POSIX error code.
  tpm_cr50_release_locality() - Release TPM locality.
  @chip:	A TPM chip.
  @force:	Flag to force release if set.
  tpm_cr50_request_locality() - Request TPM locality 0.
  @chip: A TPM chip.
  Return:
  - 0:		Success.
  - -errno:	A POSIX error code.
  tpm_cr50_i2c_tis_status() - Read cr50 tis status.
  @chip: A TPM chip.
  cr50 requires all 4 bytes of status register to be read.
  Return:
 	TPM status byte.
  tpm_cr50_i2c_tis_set_ready() - Set status register to ready.
  @chip: A TPM chip.
  cr50 requires all 4 bytes of status register to be written.
  tpm_cr50_i2c_get_burst_and_status() - Get burst count and status.
  @chip:	A TPM chip.
  @mask:	Status mask.
  @burst:	Return value for burst.
  @status:	Return value for status.
  cr50 uses bytes 3:2 of status register for burst count and
  all 4 bytes must be read.
  Return:
  - 0:		Success.
  - -errno:	A POSIX error code.
 wait for burstcount 
  tpm_cr50_i2c_tis_recv() - TPM reception callback.
  @chip:	A TPM chip.
  @buf:	Reception buffer.
  @buf_len:	Buffer length to read.
  Return:
  - >= 0:	Number of read bytes.
  - -errno:	A POSIX error code.
 Read first chunk of burstcnt bytes 
 Determine expected data in the return buffer 
 Now read the rest of the data 
 Read updated burst count and check status 
 Ensure TPM is done reading data 
 Abort current transaction if still pending 
  tpm_cr50_i2c_tis_send() - TPM transmission callback.
  @chip:	A TPM chip.
  @buf:	Buffer to send.
  @len:	Buffer length.
  Return:
  - 0:		Success.
  - -errno:	A POSIX error code.
 Wait until TPM is ready for a command 
 Wait for data if this is not the first chunk 
 Read burst count and check status 
		
		  Use burstcnt - 1 to account for the address byte
		  that is inserted by tpm_cr50_i2c_write()
 Ensure TPM is not expecting more data 
 Start the TPM command 
 Abort current transaction if still pending 
  tpm_cr50_i2c_req_canceled() - Callback to notify a request cancel.
  @chip:	A TPM chip.
  @status:	Status given by the cancel callback.
  Return:
 	True if command is ready, False otherwise.
  tpm_cr50_i2c_probe() - Driver probe function.
  @client:	I2C client information.
  @id:		I2C device id.
  Return:
  - 0:		Success.
  - -errno:	A POSIX error code.
 cr50 is a TPM 2.0 chip 
 Default timeouts 
 Read four bytes from DID_VID register 
  tpm_cr50_i2c_remove() - Driver remove function.
  @client: I2C client information.
  Return:
  - 0:		Success.
  - -errno:	A POSIX error code.
 SPDX-License-Identifier: GPL-2.0-or-later
  Nuvoton TPM I2C Device Driver Interface for WPCT301NPCT501NPCT6XX,
  based on the TCG TPM Interface Spec version 1.2.
  Specifications at www.trustedcomputinggroup.org
  Copyright (C) 2011, Nuvoton Technology Corporation.
   Dan Morav <dan.morav@nuvoton.com>
  Copyright (C) 2013, Obsidian Research Corp.
   Jason Gunthorpe <jgunthorpe@obsidianresearch.com>
  Nuvoton contact information: APC.Support@nuvoton.com
 I2C interface offsets 
  I2C bus device maximum buffer size wo counting I2C address or command
  i.e. max size required for I2C write is 34 = addr, command, 32 bytes data
 usec 
 usec 
 usec 
 usec 
 bit2...bit0 reads always 0 
 ms 
 2 sec 
 read TPM_STS register 
 write byte to TPM_STS register 
 this causes the current command to be aborted 
 write commandReady to TPM_STS register 
 this causes the current command to be aborted 
 read burstCount field from TPM_STS register
 wait for burstcount to be non-zero 
 in I2C burstCount is 1 byte 
  WPCT301NPCT501NPCT6XX SINT# supports only dataAvail
  any call to this function which is not waiting for dataAvail will
  set queue to NULL to avoid waiting for interrupt
		 At this point we know that the SINT pin is asserted, so we
 check current status 
 use polling to wait for the event 
 wait for dataAvail field to be set in the TPM_STS register 
 Read @count bytes into @buf from TPM_RD_FIFO register 
 Read TPM command results 
 return to idle 
 if this is not the first trial, set responseRetry 
		
		  read first available (> 10 bytes), including:
		  tag, paramsize, and result
		
		  convert number of expected bytes field from big endian 32 bit
		  to machine native
  Send TPM command.
  If interrupts are used (signaled by an irq set in the vendor structure)
  tpm.c can skip polling for the data to be available as the interrupt is
  waited for here
 write last byte 
 retries == TPM_RETRY 
 execute the TPM command 
 The only purpose for the handler is to signal to any waiting threads that
  the interrupt is currently being asserted. The driver does not do any
  processing triggered by interrupts, and the chip provides no way to mask at
  the source (plus that would be slow over I2C). Run the IRQ as a one-shot,
 check WPCT301 values - ignore RID 
		
		  fw rev 2.81 has an issue where the VID_DID_RID is not
		  reporting the right value. so give it another chance at
		  offset 0x20 (FIFO_W).
 check WPCT301 values - ignore RID 
 Default timeouts 
	
	  I2C intfcaps (interrupt capabilitieis) in the chip are hard coded to:
	    TPM_INTF_INT_LEVEL_LOW | TPM_INTF_DATA_AVAIL_INT
	  The IRQ should be set in the i2c_board_info (which is done
 Clear any pending interrupt 
 - wait for TPM_STS==0xA0 (stsValid, commandReady) 
				
				  TIS is in ready state
				  write dummy byte to enter reception state
				  TPM_DATA_FIFO_W <- rc (0)
 TPM_STS <- 0x40 (commandReady) 
				
				  timeout_b reached - command was
				  aborted. TIS should now be in idle state -
				  only TPM_STS_VALID should be set
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2004 IBM Corporation
  Copyright (C) 2014 Intel Corporation
  Authors:
  Jarkko Sakkinen <jarkko.sakkinen@linux.intel.com>
  Leendert van Doorn <leendert@watson.ibm.com>
  Dave Safford <safford@watson.ibm.com>
  Reiner Sailer <sailer@watson.ibm.com>
  Kylene Hall <kjhall@us.ibm.com>
  Maintained by: <tpmdd-devel@lists.sourceforge.net>
  TPM chip management routines.
  tpm_chip_start() - power on the TPM
  @chip:	a TPM chip to use
  Return:
   The response length	- OK
   -errno			- A system error
  tpm_chip_stop() - power off the TPM
  @chip:	a TPM chip to use
  Return:
   The response length	- OK
   -errno			- A system error
  tpm_try_get_ops() - Get a ref to the tpm_chip
  @chip: Chip to ref
  The caller must already have some kind of locking to ensure that chip is
  valid. This function will lock the chip so that the ops member can be
  accessed safely. The locking prevents tpm_chip_unregister from
  completing, so it should not be held for long periods.
  Returns -ERRNO if the chip could not be got.
  tpm_put_ops() - Release a ref to the tpm_chip
  @chip: Chip to put
  This is the opposite pair to tpm_try_get_ops(). After this returns chip may
  be kfree'd.
  tpm_default_chip() - find a TPM chip and get a reference to it
  tpm_find_get_ops() - find and reserve a TPM chip
  @chip:	a &struct tpm_chip instance, %NULL for the default chip
  Finds a TPM chip and reserves its class device and operations. The chip must
  be released with tpm_put_ops() after use.
  This function is for internal use only. It supports existing TPM callers
  by accepting NULL, but those callers should be converted to pass in a chip
  directly.
  Return:
  A reserved &struct tpm_chip instance.
  %NULL if a chip is not found.
  %NULL if the chip is not available.
 release additional reference we got from tpm_default_chip() 
  tpm_dev_release() - free chip memory and the device number
  @dev: the character device for the TPM chip
  This is used as the release function for the character device.
 release the master device reference 
  tpm_class_shutdown() - prepare the TPM device for loss of power.
  @dev: device to which the chip is associated.
  Issues a TPM2_Shutdown command prior to loss of power, as required by the
  TPM 2.0 spec. Then, calls bus- and device- specific shutdown code.
  Return: always 0 (i.e. success)
  tpm_chip_alloc() - allocate a new struct tpm_chip instance
  @pdev: device to which the chip is associated
         At this point pdev mst be initialized, but does not have to
         be registered
  @ops: struct tpm_class_ops instance
  Allocates a new struct tpm_chip instance and assigns a free
  device number for it. Must be paired with put_device(&chip->dev).
	 get extra reference on main device to hold on
	  behalf of devs.  This holds the chip structure
	  while cdevs is in use.  The corresponding put
	  is in the tpm_devs_release (TPM2 only)
  tpmm_chip_alloc() - allocate a new struct tpm_chip instance
  @pdev: parent device to which the chip is associated
  @ops: struct tpm_class_ops instance
  Same as tpm_chip_alloc except devm is used to do the put_device
 Make the chip available. 
 Make the chip unavailable. 
 Make the driver uncallable. 
 For compatibility with legacy sysfs paths we provide symlinks from the
  parent dev directory to selected names within the tpm chip directory. Old
  kernel versions created these files directly under the parent.
 All the names from tpm-sysfs 
  tpm_chip_register() - create a character device for the TPM chip
  @chip: TPM chip to use.
  Creates a character device for the TPM chip and adds sysfs attributes for
  the device. As the last step this function adds the chip to the list of TPM
  chips available for in-kernel use.
  This function should be only called after the chip initialization is
  complete.
  tpm_chip_unregister() - release the TPM driver
  @chip: TPM chip to use.
  Takes the chip first away from the list of available TPM chips and then
  cleans up all the resources reserved by tpm_chip_register().
  Once this function returns the driver call backs in 'op's will not be
  running and will no longer start.
  NOTE: This function should be only called before deinitializing chip
  resources.
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2005, 2006 IBM Corporation
  Copyright (C) 2014, 2015 Intel Corporation
  Authors:
  Leendert van Doorn <leendert@watson.ibm.com>
  Kylene Hall <kjhall@us.ibm.com>
  Maintained by: <tpmdd-devel@lists.sourceforge.net>
  Device driver for TCGTCPA TPM (trusted platform module).
  Specifications at www.trustedcomputinggroup.org
  This device driver implements the TPM interface as defined in
  the TCG TPM Interface Spec version 1.2, revision 1.0.
 check current status 
 Before we attempt to access the TPM we must see that the valid bit is set.
  The specification says that this bit is 0 at reset and remains 0 until the
  'TPM has gone through its self test and initialization and has established
  correct values in the other bits.'
 wait for burstcount 
			
			  If this trips, the chances are the read is
			  returning 0xff because the locality hasn't been
			  acquired.  Usually because tpm_try_get_ops() hasn't
			  been called before doing a TPM operation.
			
			  Dump stack for forensics, as invalid TPM_STS.x could be
			  potentially triggered by impaired tpm_try_get_ops() or
			  tpm_find_get_ops().
 this causes the current command to be aborted 
 wait for burstcount 
 read first 10 bytes, including tag, paramsize, and result 
 retry? 
  If interrupts are used (signaled by an irq set in the vendor structure)
  tpm.c can skip polling for the data to be available as the interrupt is
  waited for here
 write last byte 
  If interrupts are used (signaled by an irq set in the vendor structure)
  tpm.c can skip polling for the data to be available as the interrupt is
  waited for here
 go and do it 
 Verify receipt of the expected IRQ 
 STMicroelectronics 0x104a 
 Try to get a TPM version 1.2 or 1.1 TPM_CAP_VERSION_INFO 
 Atmel 3204 
  Early probing for iTPM with STS_DATA_EXPECT flaw.
  Try sending command without itpm flag set and if that
  fails, repeat with itpm flag set.
 probe only iTPMS 
 Clear interrupts handled with TPM_EOI 
 Register the IRQ and issue a command that will cause an interrupt. If an
  irq is seen then leave the chip setup for IRQ operation, otherwise reverse
  everything and leave in polling mode. Returns 0 on success.
 Clear all existing 
 Turn on 
	 Generate an interrupt by having the core call through to
	  tpm_tis_send
	 tpm_tis_send will either confirm the interrupt is working or it
	  will call disable_irq which undoes all of the above.
 Try to find the IRQ the TPM is using. This is for legacy x86 systems that
  do not have ACPIetc. We typically expect the interrupt to be declared if
  present.
  tpm_tis_clkrun_enable() - Keep clkrun protocol disabled for entire duration
                            of a single TPM command
  @chip:	TPM chip to use
  @value:	1 - Disable CLKRUN protocol, so that clocks are free running
 		0 - Enable CLKRUN protocol
  Call this function directly in tpm_tis_remove() in error or driver removal
  path, since the chip->ops is set to NULL in tpm_chip_unregister().
 Disable LPC CLKRUN# 
		
		  Write any random value on port 0x80 which is on LPC, to make
		  sure LPC clock is running before sending any TPM command.
 Enable LPC CLKRUN# 
		
		  Write any random value on port 0x80 which is on LPC, to make
		  sure LPC clock is running before sending any TPM command.
 Maximum timeouts 
 Check if CLKRUN# is already not enabled in the LPC bus 
 Take control of the TPM's interrupt hardware and shut it off 
 Figure out the capabilities 
 INTERRUPT Setup 
		
		  Before doing irq testing issue a command to the TPM in polling mode
		  to make sure it works. May as well use that command to set the
		  proper timeouts for the driver.
	 reenable interrupts that device may have lost or
	  BIOSfirmware may have disabled
	
	  TPM 1.2 requires self-test on resume. This function actually returns
	  an error code but for unknown reason it isn't handled.
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) 2004 IBM Corporation
  Copyright (C) 2014 Intel Corporation
  Authors:
  Leendert van Doorn <leendert@watson.ibm.com>
  Dave Safford <safford@watson.ibm.com>
  Reiner Sailer <sailer@watson.ibm.com>
  Kylene Hall <kjhall@us.ibm.com>
  Device driver for TCGTCPA TPM (trusted platform module).
  Specifications at www.trustedcomputinggroup.org
  Array with one entry per ordinal defining the maximum amount
  of time the chip could take to return the result.  The ordinal
  designation of short, medium or long is defined in a table in
  TCG Specification TPM Main Part 2 TPM Structures Section 17. The
  values of the SHORT, MEDIUM, and LONG durations are retrieved
  from the chip during initialization with a call to tpm_get_timeouts.
 0 
 5 
 10 
 15 
 20 
 25 
 30 
 35 
 40 
 45 
 50 
 55 
 60 
 65 
 70 
 75 
 80 
 85 
 90 
 95 
 100 
 105 
 110 
 115 
 120 
 125 
 130 
 135 
 140 
 145 
 150 
 155 
 160 
 165 
 170 
 175 
 180 
 185 
 190 
 195 
 200 
 205 
 210 
 215 
 220 
 225 
 230 
 235 
 240 
  tpm1_calc_ordinal_duration() - calculate the maximum command duration
  @chip:    TPM chip to use.
  @ordinal: TPM command ordinal.
  The function returns the maximum amount of time the chip could take
  to return the result for a particular ordinal in jiffies.
  Return: A maximal duration time for an ordinal in jiffies.
	
	  We only have a duration table for protected commands, where the upper
	  16 bits are 0. For the few other ordinals the fallback will be used.
  tpm1_startup() - turn on the TPM
  @chip: TPM chip to use
  Normally the firmware should start the TPM. This function is provided as a
  workaround if this does not happen. A legal case for this could be for
  example when a TPM emulator is used.
  Return: same as tpm_transmit_cmd()
	
	  Provide ability for vendor overrides of timeout values in case
	  of misreporting.
 Restore default if chip reported 0 
 timeouts in msec rather usec 
 Report adjusted timeouts 
 not used under 1.2 
	
	  Provide the ability for vendor overrides of duration values in case
	  of misreporting.
	 The Broadcom BCM0102 chipset in a Dell Latitude D820 gets the above
	  value wrong and apparently reports msecs rather than usecs. So we
	  fix up the resulting too-small TPM_SHORT value to make things work.
	  We also scale the TPM_MEDIUM and -_LONG values by 1000.
  tpm1_get_random() - get random bytes from the TPM's RNG
  @chip:	a &struct tpm_chip instance
  @dest:	destination buffer for the random bytes
  @max:	the maximum number of bytes to write to @dest
  Return:
    number of bytes read
   -errno (positive TPM return codes are masked to -EIO)
  tpm1_continue_selftest() - run TPM's selftest
  @chip: TPM chip to use
  Returns 0 on success, < 0 in case of fatal error or a value > 0 representing
  a TPM error code.
  tpm1_do_selftest - have the TPM continue its selftest and wait until it
                    can receive further commands
  @chip: TPM chip to use
  Returns 0 on success, < 0 in case of fatal error or a value > 0 representing
  a TPM error code.
	 This may fail if there was no TPM driver during a suspendresume
	  cycle; some may return 10 (BAD_ORDINAL), others 28 (FAILEDSELFTEST)
 Attempt to read a PCR value 
		 Some buggy TPMs will not respond to tpm_tis_ready() for
		  around 300ms while the self test is ongoing, keep trying
		  until the self test duration expires.
			 TPM is disabled andor deactivated; driver can
			  proceed and TPM does handle commands for
			  suspendresume correctly
  tpm1_auto_startup - Perform the standard automatic TPM initialization
                      sequence
  @chip: TPM chip to use
  Returns 0 on success, < 0 in case of fatal error.
  tpm1_pm_suspend() - pm suspend handler
  @chip: TPM chip to use.
  @tpm_suspend_pcr: flush pcr for buggy TPM chips.
  The functions saves the TPM state to be restored on resume.
  Return:
   0 on success,
   < 0 on error.
 for buggy tpm, flush pcrs with extend to selected dummy 
 now do the actual savestate 
		
		  If the TPM indicates that it is too busy to respond to
		  this command then retry before giving up.  It can take
		  several seconds for this TPM to be ready.
		 
		  This can happen if the TPM has already been sent the
		  SaveState command before the driver has loaded.  TCG 1.2
		  specification states that any communication after SaveState
		  may cause the TPM to invalidate previously saved state.
  tpm1_get_pcr_allocation() - initialize the allocated bank
  @chip: TPM chip to use.
  The function initializes the SHA1 allocated bank to extend PCR
  Return:
   0 on success,
   < 0 on error.
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2012,2013 Infineon Technologies
  Authors:
  Peter Huewe <peter.huewe@infineon.com>
  Device driver for TCGTCPA TPM (trusted platform module).
  Specifications at www.trustedcomputinggroup.org
  This device driver implements the TPM interface as defined in
  the TCG TPM Interface Spec version 1.2, revision 1.0 and the
  Infineon I2C Protocol Stack Specification v0.20.
  It is based on the original tpm_tis device driver from Leendert van
  Dorn and Kyleen Hall.
 max. number of iterations after I2C NAK 
 max. number of iterations after I2C NAK for 'long' commands
  we need this especially for sending TPM_READY, since the cleanup after the
  transtion to the ready state may take some time, but it is unpredictable
  how long it will take.
 After sending TPM_READY to 'reset' the TPM we have to sleep even longer 
 we want to use usleep_range instead of msleep for the 5ms TPM_TIMEOUT 
 expected value for DIDVID register 
	 In addition to the data itself, the buffer must fit the 7-bit I2C
	  address and the direction bit.
  iic_tpm_read() - read from TPM register
  @addr: register address to read from
  @buffer: provided by caller
  @len: number of bytes to read
  Read len bytes from TPM register and put them into
  buffer (little-endian format, i.e. first byte is put into buffer[0]).
  NOTE: TPM is big-endian for multi-byte values. Multi-byte
  values have to be swapped.
  NOTE: We can't unfortunately use the combined readwrite functions
  provided by the i2c core as the TPM currently does not support the
  repeated start condition and due to it's special requirements.
  The i2c_smbus functions do not work for this chip.
  Return -EIO on error, 0 on success.
 Lock the adapter for the duration of the whole sequence. 
		 use a combined read for newer chips
		  unfortunately the smbus functions are not suitable due to
		  the 32 byte limit of the smbus.
		  retries should usually not be needed, but are kept just to
		  be on the safe side.
 break here to skip sleep 
		 Expect to send one command message and one data message, but
		  support looping over each or both if necessary.
 slb9635 protocol should work in all cases 
 break here to skip sleep 
			 After the TPM has successfully received the register
			  address it needs some time, thus we're sleeping here
			  again, before retrieving the data
					 Since len is unsigned, make doubly
					  sure we do not underflow it.
				 If the I2C adapter rejected the request (e.g
				  when the quirk read_max_len < len) fall back
				  to a sane minimum value and try again.
 take care of 'guard time' 
	 __i2c_transfer returns the number of successfully transferred
	  messages.
	  So rc should be greater than 0 here otherwise we have an error.
 prepend the 'register address' to the buffer 
	
	  NOTE: We have to use these special mechanisms here and unfortunately
	  cannot rely on the standard behavior of i2c_transfer.
	  Even for newer chips the smbus functions are not
	  suitable due to the 32 byte limit of the smbus.
 take care of 'guard time' 
	 __i2c_transfer returns the number of successfully transferred
	  messages.
	  So rc should be greater than 0 here otherwise we have an error.
  iic_tpm_write() - write to TPM register
  @addr: register address to write to
  @buffer: containing data to be written
  @len: number of bytes to write
  Write len bytes from provided buffer to TPM register (little
  endian format, i.e. buffer[0] is written as first byte).
  NOTE: TPM is big-endian for multi-byte values. Multi-byte
  values have to be swapped.
  NOTE: use this function instead of the iic_tpm_write_generic function.
  Return -EIO on error, 0 on success
  This function is needed especially for the cleanup situation after
  sending TPM_READY
 ms 
 2 sec 
 implementation similar to tpm_tis 
 wait for burstcount 
 NOTE: since I2C read may fail, return 0 in this case --> time-out 
 if locallity is set STS should not be 0xFF 
 this causes the current command to be aborted 
 wait for burstcount 
 which timeout value, spec has 2 answers (c & d) 
 Note: STS is little endian 
 check current status 
 since we just checked the status, give the TPM some time 
 burstcnt < 0 = TPM is busy 
 limit received data to max. left 
 avoid endless loop in case of broken HW 
 read first 10 bytes, including tag, paramsize, and result 
 retry? 
	 The TPM needs some time to clean up here,
	  so we sleep rather than keeping the bus busy
 burstcnt < 0 = TPM is busy 
 avoid endless loop in case of broken HW 
 write last byte 
 go and do it 
	 The TPM needs some time to clean up here,
	  so we sleep rather than keeping the bus busy
 Default timeouts 
 read four bytes from DID_VID register 
 We only support one client 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2012-2020 IBM Corporation
  Author: Ashley Lai <ashleydlai@gmail.com>
  Maintained by: <tpmdd-devel@lists.sourceforge.net>
  Device driver for TCGTCPA TPM (trusted platform module).
  Specifications at www.trustedcomputinggroup.org
  ibmvtpm_send_crq_word() - Send a CRQ request
  @vdev:	vio device struct
  @w1:		pre-constructed first word of tpm crq (second word is reserved)
  Return:
 	0 - Success
 	Non-zero - Failure
  ibmvtpm_send_crq() - Send a CRQ request
  @vdev:	vio device struct
  @valid:	Valid field
  @msg:	Type field
  @len:	Length field
  @data:	Data field
  The ibmvtpm crq is defined as follows:
  Byte  |   0   |   1   |   2   |   3   |   4   |   5   |   6   |   7
  -----------------------------------------------------------------------
  Word0 | Valid | Type  |     Length    |              Data
  -----------------------------------------------------------------------
  Word1 |                Reserved
  -----------------------------------------------------------------------
  Which matches the following structure (on bigendian host):
  struct ibmvtpm_crq {
          u8 valid;
          u8 msg;
          __be16 len;
          __be32 data;
          __be64 reserved;
  } __attribute__((packed, aligned(8)));
  However, the value is passed in a register so just compute the numeric value
  to load into the register avoiding byteswap altogether. Endian only affects
  memory loads and stores - registers are internally represented the same.
  Return:
 	0 (H_SUCCESS) - Success
 	Non-zero - Failure
  tpm_ibmvtpm_recv - Receive data after send
  @chip:	tpm chip struct
  @buf:	buffer to read
  @count:	size of buffer
  Return:
 	Number of bytes read
  ibmvtpm_crq_send_init - Send a CRQ initialize message
  @ibmvtpm:	vtpm device struct
  Return:
 	0 on success.
 	Non-zero on failure.
  tpm_ibmvtpm_resume - Resume from suspend
  @dev:	device struct
  Return: Always 0.
  tpm_ibmvtpm_send() - Send a TPM command
  @chip:	tpm chip struct
  @buf:	buffer contains data to send
  @count:	size of buffer
  Return:
    0 on success,
    -errno on error
 wait for previous command to finish 
	
	  set the processing flag before the Hcall, since we may get the
	  result (interrupt) before even being able to check rc.
		
		  H_CLOSED can be returned after LPM resume.  Call
		  tpm_ibmvtpm_resume() to re-enable the CRQ then retry
		  ibmvtpm_send_crq() once before failing.
  ibmvtpm_crq_get_rtce_size - Send a CRQ request to get rtce size
  @ibmvtpm:	vtpm device struct
  Return:
 	0 on success.
 	Non-zero on failure.
  ibmvtpm_crq_get_version - Send a CRQ request to get vtpm version
 			   - Note that this is vtpm version and not tpm version
  @ibmvtpm:	vtpm device struct
  Return:
 	0 on success.
 	Non-zero on failure.
  ibmvtpm_crq_send_init_complete - Send a CRQ initialize complete message
  @ibmvtpm:	vtpm device struct
  Return:
 	0 on success.
 	Non-zero on failure.
  tpm_ibmvtpm_remove - ibm vtpm remove entry point
  @vdev:	vio device struct
  Return: Always 0.
 For tpm_ibmvtpm_get_desired_dma 
  tpm_ibmvtpm_get_desired_dma - Get DMA size needed by this driver
  @vdev:	vio device struct
  Return:
 	Number of bytes the driver needs to DMA map.
	
	  ibmvtpm initializes at probe time, so the data we are
	  asking for may not be set yet. Estimate that 4K required
	  for TCE-mapped buffer in addition to CRQ.
  tpm_ibmvtpm_suspend - Suspend
  @dev:	device struct
  Return: Always 0.
  ibmvtpm_reset_crq - Reset CRQ
  @ibmvtpm:	ibm vtpm struct
  Return:
 	0 on success.
 	Non-zero on failure.
  ibmvtpm_crq_get_next - Get next responded crq
  @ibmvtpm:	vtpm device struct
  Return: vtpm crq pointer or NULL.
  ibmvtpm_crq_process - Process responded crq
  @crq:	crq to be processed
  @ibmvtpm:	vtpm device struct
 len of the data in rtce buffer 
  ibmvtpm_interrupt -	Interrupt handler
  @irq:		irq number to handle
  @vtpm_instance:	vtpm that received interrupt
  Returns:
 	IRQ_HANDLED
	 while loop is needed for initial setup (get version and
	  get rtce_size). There should be only one tpm request at any
	  given time.
  tpm_ibmvtpm_probe - ibm vtpm initialize entry point
  @vio_dev:	vio device struct
  @id:		vio device id struct
  Return:
 	0 on success.
 	Non-zero on failure.
  ibmvtpm_module_init - Initialize ibm vtpm module.
  Return:
 	0 on success.
 	Non-zero on failure.
  ibmvtpm_module_exit - Tear down ibm vtpm module.
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2015, 2016 IBM Corporation
  Copyright (C) 2016 Intel Corporation
  Author: Stefan Berger <stefanb@us.ibm.com>
  Maintained by: <tpmdd-devel@lists.sourceforge.net>
  Device driver for vTPM (vTPM proxy driver)
 public API flags 
 protect buffer and flags 
 internal state 
 waiting for emulator response 
 sending a driver specific command 
 length of queued TPM request 
 length of queued TPM response 
 requestresponse buffer 
 task that retrieves TPM timeouts 
 all supported flags 
  Functions related to 'server side'
  vtpm_proxy_fops_read - Read TPM commands on 'server side'
  @filp: file pointer
  @buf: read buffer
  @count: number of bytes to read
  @off: offset
  Return:
 	Number of bytes read or negative error code
  vtpm_proxy_fops_write - Write TPM responses on 'server side'
  @filp: file pointer
  @buf: write buffer
  @count: number of bytes to write
  @off: offset
  Return:
 	Number of bytes read or negative error value
  vtpm_proxy_fops_poll - Poll status on 'server side'
  @filp: file pointer
  @wait: poll table
  Return: Poll flags
  vtpm_proxy_fops_open - Open vTPM device on 'server side'
  @filp: file pointer
  Called when setting up the anonymous file descriptor
  vtpm_proxy_fops_undo_open - counter-part to vtpm_fops_open
        Call to undo vtpm_proxy_fops_open
 @proxy_dev: tpm proxy device
 no more TPM responses -- wake up anyone waiting for them 
  vtpm_proxy_fops_release - Close 'server side'
  @inode: inode
  @filp: file pointer
  Return:
       Always returns 0.
  Functions invoked by the core TPM driver to send TPM commands to
  'server side' and receive responses from there.
  Called when core TPM driver reads TPM responses from 'server side'
  @chip: tpm chip to use
  @buf: receive buffer
  @count: bytes to read
  Return:
       Number of TPM response bytes read, negative error value otherwise
 process gone ? 
  Called when core TPM driver forwards TPM requests to 'server side'.
  @chip: tpm chip to use
  @buf: send buffer
  @count: bytes to send
  Return:
       0 in case of success, negative error value otherwise.
 not supported 
  Code related to the startup of the TPM 2 and startup of TPM 1.2 +
  retrieval of timeouts and durations.
  vtpm_proxy_work_stop: make sure the work has finished
  This function is useful when user space closed the fd
  while the driver still determines timeouts.
  vtpm_proxy_work_start: Schedule the work for TPM 1.2 & 2 initialization
  Code related to creation and deletion of device pairs
  Undo what has been done in vtpm_create_proxy_dev
 frees chip 
  Create a devtpm%d and 'server side' file descriptor pair
  Return:
       Returns file pointer on success, an error value otherwise
 setup an anonymous file for the server-side 
 from now on we can unwind with put_unused_fd() + fput() 
 simulate an open() on the server side 
  Counter part to vtpm_create_device.
	
	  A client may hold the 'ops' lock, so let it know that the server
	  side shuts down before we try to grab the 'ops' lock when
	  unregistering the chip.
  Code related to the control device devvtpmx
  vtpmx_ioc_new_dev - handler for the %VTPM_PROXY_IOC_NEW_DEV ioctl
  @file:	devvtpmx
  @ioctl:	the ioctl number
  @arg:	pointer to the struct vtpmx_proxy_new_dev
  Creates an anonymous file that is used by the process acting as a TPM to
  communicate with the client processes. The function will also add a new TPM
  device through which data is proxied to this TPM acting process. The caller
  will be provided with a file descriptor to communicate with the clients and
  major and minor numbers for the TPM device.
  vtpmx_fops_ioctl: ioctl on devvtpmx
  Return:
       Returns 0 on success, a negative error code otherwise.
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) 2016 Google, Inc
  This device driver implements a TCG PTP FIFO interface over SPI for chips
  with Cr50 firmware.
  It is based on tpm_tis_spi driver by Peter Huewe and Christophe Ricard.
  Cr50 timing constants:
  - can go to sleep not earlier than after CR50_SLEEP_DELAY_MSEC.
  - needs up to CR50_WAKE_START_DELAY_USEC to wake after sleep.
  - requires waiting for "ready" IRQ, if supported; or waiting for at least
    CR50_NOIRQ_ACCESS_DELAY_MSEC between transactions, if IRQ is not supported.
  - waits for up to CR50_FLOW_CONTROL for flow control 'ready' indication.
  The cr50 interrupt handler just signals waiting threads that the
  interrupt was asserted.  It does not do any processing triggered
  by interrupts but is instead used to avoid fixed delays.
  Cr50 needs to have at least some delay between consecutive
  transactions. Make sure we wait.
	
	  Note: There is a small chance, if Cr50 is not accessed in a few days,
	  that time_in_range will not provide the correct result after the wrap
	  around for jiffies. In this case, we'll have an unneeded short delay,
	  which is fine.
  Cr50 might go to sleep if there is no SPI activity for some time and
  miss the first few bitsbytes on the bus. In such case, wake it up
  by asserting CS and give it time to start up.
	
	  Note: There is a small chance, if Cr50 is not accessed in a few days,
	  that time_in_range will not provide the correct result after the wrap
	  around for jiffies. In this case, we'll probably timeout or read
	  incorrect value from TPM_STS and just retry the operation.
 Assert CS, wait 1 msec, deassert CS 
 Wait for it to fully wake 
 Reset the time when we need to wake Cr50 again 
  Flow control: clock the bus and wait for cr50 to set LSB before
  sendingreceiving data. TCG PTP spec allows it to happen during
  the last byte of header, but cr50 never does that in practice,
  and earlier versions had a bug when it was set too early, so don't
  check for it during header transfer.
	
	  Do this outside of spi_bus_lock in case cr50 is not the
	  only device on that spi bus.
	
	  Write anything to TPM_CR50_FW_VER to start from the beginning
	  of the version string
 Read the string, 4 bytes at a time, until we get '\0' 
			
			  This is not fatal, the driver will fall back to
			  delays automatically, since ready will never
			  be completed without a registered irq handler.
			  So, just fall through.
			
			  IRQ requested, let's verify that it is actually
			  triggered, before relying on it.
	
	  Jiffies not increased during suspend, so we need to reset
	  the time to wake Cr50 after resume.
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2005, 2006 IBM Corporation
  Copyright (C) 2014, 2015 Intel Corporation
  Authors:
  Leendert van Doorn <leendert@watson.ibm.com>
  Kylene Hall <kjhall@us.ibm.com>
  Maintained by: <tpmdd-devel@lists.sourceforge.net>
  Device driver for TCGTCPA TPM (trusted platform module).
  Specifications at www.trustedcomputinggroup.org
  This device driver implements the TPM interface as defined in
  the TCG TPM Interface Spec version 1.2, revision 1.0.
	 irq > 0 means: use irq $irq;
	  irq = 0 means: autoprobe for an irq;
	  irq = -1 means: no irq support
	 If the ACPI TPM2 signature is matched then a global ACPI_SIG_TPM2
	  table is mandatory
 The tpm2_crb driver handles this device 
  There is a known bug caused by 93e1b7d42e1e ("[PATCH] tpm: add HID module
  parameter"). This commit added IFX0102 device ID, which is also used by
  tpm_infineon but ignored to add quirks to probe which driver ought to be
  used.
 TPM 
 Atmel 
 Infineon 
 Broadcom 
 Broadcom 
 National 
 Intel 
 Add new here 
 User Specified 
 Terminator 
 When forcing auto probe the IRQ 
	 The driver core will match the name tpm_tis of the device to
	  the tpm_tis platform driver and complete the setup via
	  tpm_tis_plat_probe
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) 2020 Linaro Ltd.
  This device driver implements MMIO TPM on SynQuacer Platform.
  irq > 0 means: use irq $irq;
  irq = 0 means: autoprobe for an irq;
  irq = -1 means: no irq support
	
	  Due to the limitation of SPI controller on SynQuacer,
	  1632 bits access must be done in byte-wise and descending order.
	
	  Due to the limitation of SPI controller on SynQuacer,
	  1632 bits access must be done in byte-wise and descending order.
	
	  Due to the limitation of SPI controller on SynQuacer,
	  1632 bits access must be done in byte-wise and descending order.
 SPDX-License-Identifier: GPL-2.0-only
  Implementation of the Xen vTPM device frontend
  Author:  Daniel De Graaf <dgdegra@tycho.nsa.gov>
 check current status 
 cancel requested, not yet canceled 
 Wait for completion of any existing command or cancellation 
 got a signal or timeout, try to cancel 
 In theory the wait at the end of _send makes this one unnecessary 
 caller must clean up in case of errors 
 A suspendresumemigrate will interrupt a vTPM anyway 
 SPDX-License-Identifier: GPL-2.0-only
  Description:
  Device Driver for the Infineon Technologies
  SLD 9630 TT 1.1 and SLB 9635 TT 1.2 Trusted Platform Module
  Specifications at www.trustedcomputinggroup.org
  Copyright (C) 2005, Marcel Selhorst <tpmdd@selhorst.net>
  Sirrix AG - security technologies <tpmdd@sirrix.com> and
  Applied Data Security Group, Ruhr-University Bochum, Germany
  Project-Homepage: http:www.trust.rub.deprojectslinux-device-driver-infineon-tpm 
 Infineon specific definitions 
 maximum number of WTX-packages 
 msleep-Time for WTX-packages 
 msleep-Time --> Interval to check status register 
 gives number of max. msleep()-calls before throwing timeout 
 MMIO ioremap'd addr 
 phys MMIO base 
 MMIO region size 
 index register offset 
 Data registers 
 IO Port config index reg 
 TPM header definitions 
 some outgoing values 
	 Note: The values which are currently in the FIFO of the TPM
	   are thrown away since there is no usage for them. Usually,
	   this has nothing to say, since the TPM will give its answer
	   immediately or will be aborted anyway, so the data here is
	   usually garbage and useless.
	   We have to clean this, because the next communication with
	   the TPM would be rubbish, if there is still some old data
	   in the Read FIFO.
 check the status-register if wait_for_bit is set 
 timeout occurs 
     Note: WTX means Waiting-Time-Extension. Whenever the TPM needs more
       calculation time, it sends a WTX-package, which has to be acknowledged
       or aborted. This usually occurs if you are hammering the TPM with key
       creation. Set the maximum number of WTX-packages in the definitions
       above, if the number is reached, the waiting-time will be denied
       and the TPM command has to be resend.
 start receiving header 
 size of the data received 
 Disabling Reset, LP and IRQC 
 Sending Header 
 Sending Data Header 
 Sending Data 
	
	   Since we are using the legacy mode to communicate
	   with the TPM, we have no cancel functions, but have
	   a workaround for interrupting the TPM through WTX.
 Infineon TPMs 
 read IO-ports through PnP 
 publish my base address and request region 
 publish my base address and request region 
		
		  The only known MMIO based Infineon TPM system provides
		  a single large mem region with the device config
		  registers at the default TPM_ADDR.  The data registers
		  seem like they could be placed anywhere within the MMIO
		  region, but lets just put them at zero offset.
 query chip for its vendor, its version number a.s.o. 
 configure TPM with IO-ports 
 control if IO-ports are set correctly 
 activate register 
 disable RESET, LP and IRQC 
 Finally, we're done, print some infos 
 Re-configure TPM after suspending 
 activate register 
 disable RESET, LP and IRQC 
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (C) 2017 Google
  Authors:
       Thiebaud Weksteen <tweek@google.com>
 read binary bios log from EFI configuration table 
 malloc EventLog space 
	
	  The 'final events log' size excludes the 'final events preboot log'
	  at its beginning.
	
	  Allocate memory for the 'combined log' where we will append the
	  'final events log' to.
	
	  Append any of the 'final events log' that didn't also end up in the
	  'main log'. Events can be logged in both if events are generated
	  between GetEventLog() and ExitBootServices().
	
	  The size of the 'combined log' is the size of the 'main log' plus
	  the size of the 'final events log'.
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (C) 2016 IBM Corporation
  Authors:
       Nayna Jain <nayna@linux.vnet.ibm.com>
  Access to TPM 2.0 event log as written by Firmware.
  It assumes that writer of event log has followed TCG Specification
  for Family "2.0" and written the event data in little endian.
  With that, it doesn't need any endian conversion for structure
  content.
  calc_tpm2_event_size() - calculate the event size, where event
  is an entry in the TPM 2.0 event log. The event is of type Crypto
  Agile Log Entry Format as defined in TCG EFI Protocol Specification
  Family "2.0".
  @event: event whose size is to be calculated.
  @event_header: the first event in the event log.
  Returns size of the event. If it is an invalid event, returns 0.
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright 2012 IBM Corporation
  Author: Ashley Lai <ashleydlai@gmail.com>
          Nayna Jain <nayna@linux.vnet.ibm.com>
  Maintained by: <tpmdd-devel@lists.sourceforge.net>
  Read the event log created by the firmware on PPC64
	
	  For both vtpmtpm, firmware has log addr and log size in big
	  endian format. But in case of vtpm, there is a method called
	  sml-handover which is run during kernel init even before
	  device tree is setup. This sml-handover function takes care
	  of endianness and writes to sml-base and sml-size in little
	  endian format. For this reason, vtpm doesn't need conversion
	  but physical tpm needs the conversion.
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (C) 2005, 2012 IBM Corporation
  Authors:
 	Kent Yoder <key@linux.vnet.ibm.com>
 	Seiji Munetoh <munetoh@jp.ibm.com>
 	Stefan Berger <stefanb@us.ibm.com>
 	Reiner Sailer <sailer@watson.ibm.com>
 	Kylene Hall <kjhall@us.ibm.com>
 	Nayna Jain <nayna@linux.vnet.ibm.com>
  Maintained by: <tpmdd-devel@lists.sourceforge.net>
  Access to the event log created by a system's firmware  BIOS
 returns pointer to start of pos. entry of tcg log 
 read over pos measurements 
 check if current entry is valid 
 now check if current entry is valid 
 41 so there is room for 40 data and 1 nul 
 ToDo Row data -> Base64 
 hash data 
 convert raw integers for endianness 
 1st: PCR 
 2nd: SHA1 
 3rd: event type identifier 
 4th: eventname <= max + \'0' delimiter 
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (C) 2005 IBM Corporation
  Authors:
 	Seiji Munetoh <munetoh@jp.ibm.com>
 	Stefan Berger <stefanb@us.ibm.com>
 	Reiner Sailer <sailer@watson.ibm.com>
 	Kylene Hall <kjhall@us.ibm.com>
 	Nayna Jain <nayna@linux.vnet.ibm.com>
  Maintained by: <tpmdd-devel@lists.sourceforge.net>
  Access to the event log extended by the TCG BIOS of PC platform
 Check that the given log is indeed a TPM2 log. 
 read binary bios log 
	 Unfortuntely ACPI does not associate the event log with a specific
	  TPM, like PPI. Thus all ACPI TPMs will read the same log.
 Find TCPA entry in RSDT (ACPI_LOGICAL_ADDRESSING) 
 malloc EventLog space 
 try EFI log next 
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (C) 2005, 2012 IBM Corporation
  Authors:
 	Kent Yoder <key@linux.vnet.ibm.com>
 	Seiji Munetoh <munetoh@jp.ibm.com>
 	Stefan Berger <stefanb@us.ibm.com>
 	Reiner Sailer <sailer@watson.ibm.com>
 	Kylene Hall <kjhall@us.ibm.com>
 	Nayna Jain <nayna@linux.vnet.ibm.com>
  Access to the event log created by a system's firmware  BIOS
 now register seq file 
  tpm_bios_log_setup() - Read the event log from the firmware
  @chip: TPM chip to use.
  If an event log is found then the securityfs files are setup to
  export it to userspace, otherwise nothing is done.
	 NOTE: securityfs_create_dir can return ENODEV if securityfs is
	  compiled out. The caller should ignore the ENODEV return code.
	 securityfs_remove currently doesn't take care of handling sync
	  between removal and opening of pseudo files. To handle this, a
	  workaround is added by making i_private = NULL here during removal
	  and to check it during open(), both within inode_lock()unlock().
	  This design ensures that open() either safely gets kref or fails.
 SPDX-License-Identifier: GPL-2.0-or-later
  STMicroelectronics TPM Linux driver for TPM ST33ZP24
  Copyright (C) 2009 - 2016 STMicroelectronics
  clear_interruption clear the pending interrupt.
  @param: tpm_dev, the tpm device device.
  @return: the interrupt status value.
 clear_interruption() 
  st33zp24_cancel, cancel the current command execution or
  set STS to COMMAND READY.
  @param: chip, the tpm_chip description as specified in driverchartpmtpm.h
 st33zp24_cancel() 
  st33zp24_status return the TPM_STS register
  @param: chip, the tpm chip description
  @return: the TPM_STS register value.
 st33zp24_status() 
  check_locality if the locality is active
  @param: chip, the tpm chip description
  @return: true if LOCALITY0 is active, otherwise false
 check_locality() 
  request_locality request the TPM locality
  @param: chip, the chip description
  @return: the active locality or negative value.
 Request locality is usually effective after the request 
 could not get locality 
 request_locality() 
  release_locality release the active locality
  @param: chip, the tpm chip description.
  get_burstcount return the burstcount value
  @param: chip, the chip description
  return: the burstcount or negative value.
 get_burstcount() 
  wait_for_tpm_stat_cond
  @param: chip, chip description
  @param: mask, expected mask value
  @param: check_cancel, does the command expected to be canceled ?
  @param: canceled, did we received a cancel request ?
  @return: true if status == mask or if the command is canceled.
  false in other cases.
  wait_for_stat wait for a TPM_STS value
  @param: chip, the tpm chip description
  @param: mask, the value mask to wait
  @param: timeout, the timeout
  @param: queue, the wait queue.
  @param: check_cancel, does the command can be cancelled ?
  @return: the tpm status, 0 if success, -ETIME if timeout is reached.
 check current status 
 wait_for_stat() 
  recv_data receive data
  @param: chip, the tpm chip description
  @param: buf, the buffer where the data are received
  @param: count, the number of data to receive
  @return: the number of bytes read from TPM FIFO.
  tpm_ioserirq_handler the serirq irq handler
  @param: irq, the tpm chip description
  @param: dev_id, the description of the chip
  @return: the status of the handler.
 tpm_ioserirq_handler() 
  st33zp24_send send TPM commands through the I2C bus.
  @param: chip, the tpm_chip description as specified in driverchartpmtpm.h
  @param: buf,	the buffer to send.
  @param: count, the number of bytes to send.
  @return: In case of success the number of bytes sent.
 			In other case, a < 0 value describing the issue.
  st33zp24_recv received TPM response through TPM phy.
  @param: chip, the tpm_chip description as specified in driverchartpmtpm.h.
  @param: buf,	the buffer to store datas.
  @param: count, the number of bytes to send.
  @return: In case of success the number of bytes received.
 	    In other case, a < 0 value describing the issue.
  st33zp24_req_canceled
  @param: chip, the tpm_chip description as specified in driverchartpmtpm.h.
  @param: status, the TPM status.
  @return: Does TPM ready to compute a new command ? true.
  st33zp24_probe initialize the TPM device
  @param: client, the i2c_client description (TPM I2C description).
  @param: id, the i2c_device_id struct.
  @return: 0 in case of success.
 	 -1 in other case.
 INTERRUPT Setup 
  st33zp24_remove remove the TPM device
  @param: tpm_data, the tpm phy.
  @return: 0 in case of success.
  st33zp24_pm_suspend suspend the TPM device
  @param: tpm_data, the tpm phy.
  @param: mesg, the power management message.
  @return: 0 in case of success.
 st33zp24_pm_suspend() 
  st33zp24_pm_resume resume the TPM device
  @param: tpm_data, the tpm phy.
  @return: 0 in case of success.
 st33zp24_pm_resume() 
 SPDX-License-Identifier: GPL-2.0-or-later
  STMicroelectronics TPM SPI Linux driver for TPM ST33ZP24
  Copyright (C) 2009 - 2016 STMicroelectronics
  TPM command can be up to 2048 byte, A TPM response can be up to
  1024 byte.
  Between command and response, there are latency byte (up to 15
  usually on st33zp24 2 are enough).
  Overall when sending a command and expecting an answer we need if
  worst case:
  2048 (for the TPM command) + 1024 (for the TPM answer).  We need
  some latency byte before the answer is available (max 15).
  We have 2048 + 1024 + 15.
  st33zp24_spi_send
  Send byte to the TIS register according to the ST33ZP24 SPI protocol.
  @param: phy_id, the phy description
  @param: tpm_register, the tpm tis register where the data should be written
  @param: tpm_data, the tpm_data to write inside the tpm_register
  @param: tpm_size, The length of the data
  @return: should be zero if success else a negative error code.
 Pre-Header 
 st33zp24_spi_send() 
  st33zp24_spi_read8_recv
  Recv byte from the TIS register according to the ST33ZP24 SPI protocol.
  @param: phy_id, the phy description
  @param: tpm_register, the tpm tis register where the data should be read
  @param: tpm_data, the TPM response
  @param: tpm_size, tpm TPM response size to read.
  @return: should be zero if success else a negative error code.
 Pre-Header 
 header + status byte + size of the data + status byte 
 st33zp24_spi_read8_reg() 
  st33zp24_spi_recv
  Recv byte from the TIS register according to the ST33ZP24 SPI protocol.
  @param: phy_id, the phy description
  @param: tpm_register, the tpm tis register where the data should be read
  @param: tpm_data, the TPM response
  @param: tpm_size, tpm TPM response size to read.
  @return: number of byte read successfully: should be one if success.
 st33zp24_spi_recv() 
 evaluate_latency() 
 Get LPCPD GPIO from ACPI 
		
		  lpcpd pin is not specified. This is not an issue as
		  power management can be also managed by TPM specific
		  commands. So leave with a success status code.
 Get GPIO from device tree 
		
		  lpcpd pin is not specified. This is not an issue as
		  power management can be also managed by TPM specific
		  commands. So leave with a success status code.
 GPIO request and configuration 
 store for late use 
  st33zp24_spi_probe initialize the TPM device
  @param: dev, the spi_device description (TPM SPI description).
  @return: 0 in case of success.
 	 or a negative value describing the error.
 Check SPI platform functionnalities 
  st33zp24_spi_remove remove the TPM device
  @param: client, the spi_device description (TPM SPI description).
  @return: 0 in case of success.
 SPDX-License-Identifier: GPL-2.0-or-later
  STMicroelectronics TPM I2C Linux driver for TPM ST33ZP24
  Copyright (C) 2009 - 2016 STMicroelectronics
  write8_reg
  Send byte to the TIS register according to the ST33ZP24 I2C protocol.
  @param: tpm_register, the tpm tis register where the data should be written
  @param: tpm_data, the tpm_data to write inside the tpm_register
  @param: tpm_size, The length of the data
  @return: Returns negative errno, or else the number of bytes written.
 write8_reg() 
  read8_reg
  Recv byte from the TIS register according to the ST33ZP24 I2C protocol.
  @param: tpm_register, the tpm tis register where the data should be read
  @param: tpm_data, the TPM response
  @param: tpm_size, tpm TPM response size to read.
  @return: number of byte read successfully: should be one if success.
 read8_reg() 
  st33zp24_i2c_send
  Send byte to the TIS register according to the ST33ZP24 I2C protocol.
  @param: phy_id, the phy description
  @param: tpm_register, the tpm tis register where the data should be written
  @param: tpm_data, the tpm_data to write inside the tpm_register
  @param: tpm_size, the length of the data
  @return: number of byte written successfully: should be one if success.
  st33zp24_i2c_recv
  Recv byte from the TIS register according to the ST33ZP24 I2C protocol.
  @param: phy_id, the phy description
  @param: tpm_register, the tpm tis register where the data should be read
  @param: tpm_data, the TPM response
  @param: tpm_size, tpm TPM response size to read.
  @return: number of byte read successfully: should be one if success.
 Get LPCPD GPIO from ACPI 
		
		  lpcpd pin is not specified. This is not an issue as
		  power management can be also managed by TPM specific
		  commands. So leave with a success status code.
 Get GPIO from device tree 
		
		  lpcpd pin is not specified. This is not an issue as
		  power management can be also managed by TPM specific
		  commands. So leave with a success status code.
 GPIO request and configuration 
 store for late use 
  st33zp24_i2c_probe initialize the TPM device
  @param: client, the i2c_client description (TPM I2C description).
  @param: id, the i2c_device_id struct.
  @return: 0 in case of success.
 	 -1 in other case.
  st33zp24_i2c_remove remove the TPM device
  @param: client, the i2c_client description (TPM I2C description).
  @return: 0 in case of success.
   A driver for the PCMCIA Smartcard Reader "Omnikey CardMan Mobile 4000"
   cm4000_cs.c support.linux@omnikey.com
   Tue Oct 23 11:32:43 GMT 2001 herp - cleaned up header files
   Sun Jan 20 10:11:15 MET 2002 herp - added modversion header files
   Thu Nov 14 16:34:11 GMT 2002 mh   - added PPS functionality
   Tue Nov 19 16:36:27 GMT 2002 mh   - added SUSPENDRESUME functionailty
   Wed Jul 28 12:55:01 CEST 2004 mh  - kernel 2.6 adjustments
   current version: 2.4.0gm4
   (C) 2000,2001,2002,2003,2004 Omnikey AG
   (C) 2005-2006 Harald Welte <laforge@gnumonks.org>
   	- Adhere to Kernel processcoding-style.rst
   	- Port to 2.6.13 "new" style PCMCIA
   	- Check for copy_{from,to}_user return values
   	- Use nonseekable_open()
   	- add class interface for udev device creation
   All rights reserved. Licensed under dual BSDGPL license.
 #define ATR_CSUM 
 n (debug level) is ignored 
 additional debug output may be enabled by re-compiling with
 #define CM4000_DEBUG 
 major number we get from the kernel 
 note: the first state has to have number 0 always 
	wait_queue_head_t devq;		 when removing cardman must not be
 if IO is locked, wait on this Q 
 wait for ATR valid 
 used by write to wake blk.read 
	 warning: do not move this struct group.
 bytes avail. after write 
 latest read pos. write zeroes 
 T=0 procedure byte 
 state of card monitor 
 slow down warning 
 cardman IO-flags 0 
 cardman IO-flags 1 
 variable monitor speeds, in jiffies 
 baud value for speed 
 T=0, T=1, ... 
	unsigned long flags;	 lock+flags (MONITOR,IO,ATR)  for concurrent
 used to keep monitor running 
 This table doesn't use spaces after the comma between fields and thus
  violates processcoding-style.rst.  However, I don't really think wrapping it around will
FI     00   01   02   03   04   05   06   07   08   09   10   11   12   13 
DI 
 0  {0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11},
 1  {0x01,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x91,0x11,0x11,0x11,0x11},
 2  {0x02,0x12,0x22,0x32,0x11,0x11,0x11,0x11,0x11,0x92,0xA2,0xB2,0x11,0x11},
 3  {0x03,0x13,0x23,0x33,0x43,0x53,0x63,0x11,0x11,0x93,0xA3,0xB3,0xC3,0xD3},
 4  {0x04,0x14,0x24,0x34,0x44,0x54,0x64,0x11,0x11,0x94,0xA4,0xB4,0xC4,0xD4},
 5  {0x00,0x15,0x25,0x35,0x45,0x55,0x65,0x11,0x11,0x95,0xA5,0xB5,0xC5,0xD5},
 6  {0x06,0x16,0x26,0x36,0x46,0x56,0x66,0x11,0x11,0x96,0xA6,0xB6,0xC6,0xD6},
 7  {0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11,0x11},
 8  {0x08,0x11,0x28,0x38,0x48,0x58,0x68,0x11,0x11,0x98,0xA8,0xB8,0xC8,0xD8},
 9  {0x09,0x19,0x29,0x39,0x49,0x59,0x69,0x11,0x11,0x99,0xA9,0xB9,0xC9,0xD9}
 FI 
 DI 
 XXX PROTO 
 defaults to 9600 baud 
 read first interface byte and TA1 is present 
 TA(2) 
 no of int.face chars 
 ATRLENCK(dev,ix); 
 TDi 
 compute csum 
 XXX PROTO 
 ACOS 
 Motorola 
 ISO default 
 set baudrate 
 set stopbits 
 Fill PTS structure 
 Set new protocol 
 Correct FiDi according to CM4000 FiDi table 
 set FiDi according to ATR TA(1) 
 Calculate PCK character 
 check card convention 
 reset SM 
 Enable access to the message buffer 
 T_Active 
 inv parity 
 MSB-baud 
 write challenge to the buffer 
 buf data 
 set number of bytes to write 
 Trigger CARDMAN CONTROLLER 
 Monitor progress 
 wait for xmit done 
 check whether it is a short PTS reply? 
 Read PPS reply 
 CM4000_DEBUG 
 Compare ptsreq and ptsreply 
 setcardparameter according to PPS 
 short PTS reply, set card parameter to default values 
 note: statemachine is assumed to be reset 
 detect CMM = 1 -> failure 
 xoutb(0x40, REG_FLAGS1(iobase)); detectCMM 
 detect CMM=0 -> failure 
 clear detectCMM again by restoring original flags1 
	 tell the monitor to stop and wait until
	  it terminates.
	 now, LOCK_MONITOR has been set.
	  allow a last cycle in the monitor.
	  the monitor will indicate that it has
	  finished by clearing this bit.
  monitor the card every 50msec. as a side-effect, retrieve the
  atr once a card is inserted. another side-effect of retrieving the
  atr is that the card will be powered on, so there is no need to
  power on the card explicitly from the application: the driver
  is already doing that for you.
 if someone has set the lock for us: we're done! 
 no 
 close et al. are sleeping on devq, so wake it 
 try to lock io: if it is already locked, just add another timer 
 is a carda reader inserted at all ? 
 no smartcard inserted 
 no cardman inserted 
 no 
 only keep IO and MONITOR locks 
		 cardman and card present but cardman was absent before
 wait until Flags0 indicate power is off 
			 Flags0 indicate power off and no card inserted now;
			 prepare for fetching ATR again: after card off ATR
 minimal gap between CARDOFF and read ATR is 50msec 
 9600 
 stopbits=2 
 baud value 
		xoutb(0x21, REG_FLAGS1(iobase));	 T_Active=1, baud
 warm start vs. power on: 
 numRecBytes 
 infinite loop possible, since there is no timeout 
 + XX msec 
 set new timeout 
 reset SM 
 Deactivate T_Active flags 
 atr is present (which doesn't mean it's valid) 
 atr invalid 
 if ta1 == 0x11, no PPS necessary (default values) 
 do not do PPS with multi protocol cards 
 prepare for repowering  
				 for cards which use slightly different
 slow down warning, but prompt immediately after insertion 
 wake open 
 nothing 
 whoever needs IO 
 Interface to userland (file_operations) 
 according to manpage 
 device removed 
 also see the note about this in cmm_write 
 this one implements blocking IO 
 lock io 
 no smartcard inserted 
 no cardman inserted 
 MSB buf addr set 
 Clear T1Active 
 clear detectCMM 
 last check before exit 
 according to manpage 
 T0 must have at least 4 bytes 
 max bytes to write 
 device removed 
	
	  wait for atr to become valid.
	  note: it is important to lock this code. if we dont, the monitor
	  could be run between test_bit and the call to sleep on the
	  atr-queue.  if then the monitor detects atr valid, it will wake up
	  any process on the atr-queue, but since we have been interrupted,
	  we do not yet sleep on this queue. this would result in a missed
	  wake_up and the calling process would sleep forever (until
	  interrupted).  also, do not restore_flags before sleep_on, because
	  this could result in the same situation!
 invalid atr 
 lock io 
 no smartcard inserted 
 no cardman inserted 
 reset SM  
 reflect T=0 sendread mode in flags1 
 dummy read, reset flag procedure received 
 T_Active 
 inverse parity  
 MSB-Baud 
 xmit data 
 T_Active 
 SendT0 
 inverse parity: 
 MSB-Baud 
 set address high 
 T=0 proto: 0 byte reply  
 numSendBytes 
 T0: output procedure byte 
 SM_Active 
 power on if needed 
 T=1T=0 
 MSB numSendBytes  );
 SM_Active 
 power on if needed 
 T=1T=0 
 MSB numSendBytes 
 wait for xmit done 
 T=1: wait for infoLen 
 wait until infoLen is valid 
 max waiting time of 1 min 
 numRecBytes | bit9 of numRecytes 
 max waiting time of 2 sec 
 numRecBytes | bit9 of numRecytes 
 reset timeout 
		 T=0: we are done when numRecBytes doesn't
		       increment any more and NoProcedureByte
		       is set and numRecBytes == bytes sent + 6
		       (header bytes + data + 1 for sw2)
		       except when the card replies an error
		       which means, no data will be sent back.
 no procedure byte received since last read 
 i=0; 
 procedure byte received since last read 
 resettimeout 
 T=1: read offset=zero, T=0: read offset=after challenge 
 reset SM 
 tell read we have data 
 ITSEC E2: clear write buffer 
 return error or actually written bytes 
 reset monitor SM 
			 clear other bits, but leave inserted & powered as
 allow nonblocking io and being interrupted 
 is a card inserted and powered? 
 get IO lock 
 Set Flags0 = 0x42 
 release lock 
 wait for ATR to get valid 
 get IO lock 
 auto power_on again 
 release lock 
	 init device variables, they may be "polluted" after close
	  or, the device may never have been closed (i.e. open failed)
	 opening will always block since the
	  monitor will be started by open, which
	  means we have to wait for ATR becoming
	  valid = block until valid (or card
	  inserted)
 start monitoring the cardstatus 
 only one open per device 
 only one open per device 
 socket removed? 
	 dont terminate the monitor, rather rely on
	  close doing that for us.
		 note: don't interrupt us:
		  close the applications which own
		  the devices _first_ !
 dev->devq=NULL;	this cannot be zeroed earlier 
==== Interface to PCMCIA Layer =======================================
 read the config-tuples 
 delay release until device closed 
 create a new cm4000_cs device 
 find device 
 SPDX-License-Identifier: GPL-2.0-or-later
  SCR24x PCMCIA Smart Card Reader Driver
  Copyright (C) 2005-2006 TL Sudheendran
  Copyright (C) 2016 Lubomir Rintel
  Derived from "scr24x_v4.2.6_Release.tar.gz" driver by TL Sudheendran.
	 We must not take the dev->lock here as scr24x_delete()
	  might be called to remove the dev structure altogether.
	  We don't need the lock anyway, since after the reference
	  acquired in probe() is released in remove() the chrdev
	  is already unregistered and noone can possibly acquire
  linuxdriverscharpcmciasynclink_cs.c
  $Id: synclink_cs.c,v 4.34 20050908 13:20:54 paulkf Exp $
  Device driver for Microgate SyncLink PC Card
  multiprotocol serial adapter.
  written by Paul Fulghum for Microgate Corporation
  paulkf@microgate.com
  Microgate and SyncLink are trademarks of Microgate Corporation
  This code is released under the GNU General Public License (GPL)
  THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED
  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
  OF THE POSSIBILITY OF SUCH DAMAGE.
 unsigned long mode 
 unsigned char loopback; 
 unsigned short flags; 
 unsigned char encoding; 
 unsigned long clock_speed; 
 unsigned char addr_filter; 
 unsigned short crc_type; 
 unsigned char preamble_length; 
 unsigned char preamble; 
 unsigned long data_rate; 
 unsigned char data_bits; 
 unsigned char stop_bits; 
 unsigned char parity; 
 The queue of BH actions to be performed 
  Device instance data structure
 General purpose pointer (used by SPPP) 
 xonxoff character 
 circular list of fixed length rx buffers 
 memory allocated for all rx buffers 
 size of memory allocated for rx buffers 
 index of next empty rx buffer 
 index of next full rx buffer 
 size in bytes of single rx buffer 
 total number of rx buffers 
 number of full rx buffers 
 HDLC transmit timeout timer 
 device list link 
 task structure for scheduling bh 
 check counts to prevent 
 too many IRQs if a signal 
 is floating 
 serial interface selection (RS-232, v.35 etc) 
 device instance name 
 base IO address of adapter 
 communications parameters 
 current serial signal states 
 for diagnostics use 
 startup error (DIAGS)	
 PCMCIA support 
 SPPPCisco HDLC device parts 
  The size of the serial xmit buffer is 1 page, or 4096 bytes
 channel A offset 
 channel B offset 
   FIXME: PPC has PVR defined in asmreg.h.  For now we just undef it.
 IMRISR
 rx break detected
 receive data overflow
 all sent
 transmit data underrun
 timer interrupt
 CTS status change
 tx message repeat
 transmit pool ready
 receive message end
 receive frame start
 rx char timeout
 carrier detect status change
 receive frame overflow
 receive pool full
 STAR
 transmit FIFO write enable
 command executing
 CTS state
 0010b 
 1110b 
 0100b 
 Register access functions 
  interrupt enabledisable routines
  Bottom half interrupt handlers
  ioctl handlers
  Set this param to non-zero to load eax with the
  .text section address and breakpoint on module load.
  This is useful for use with gdb and add-symbol-file command.
  Driver major number, defaults to zero to get auto
  assigned major number. May be forced as module parameter.
 number of characters left in xmit buffer before we ask for more 
 PCMCIA prototypes 
  1st function defined in .text section. Calling this function in
  init_module() followed by a breakpoint allows a remote debugger
  (gdb) to get the .text address for the add-symbol-file command.
  This allows remote debugging of dynamically loadable modules.
  line discipline callback wrappers
  The wrappers maintain line discipline references
  while calling into the line discipline.
  ldisc_receive_buf  - pass receive data to line discipline
 Initialize the struct pcmcia_device structure 
 Card has been inserted.
 Card has been removed.
  Unregister device and release PCMCIA configuration.
  If device is open, postpone until it is closed.
 release current rx FIFO
 receiver reset
 release current tx FIFO
 transmit end message
 transmit reset
 wait for command completion 
 Return next bottom half action to perform.
  or 0 if nothing to do.
 Mark BH routine as complete 
 Process work item 
 unknown work item ID 
 eom: non-zero = end of frame 
 no more free buffers 
 end of frame, get FIFO count from RBCL register 
 frame too large, reset receiver and reset current buffer 
 early termination, get FIFO count from RBCL register 
		 Zero fifo count could mean 0 or 32 bytes available.
		  If BIT5 of STAR is set then at least 1 byte is available.
 Flush received async data to receive data buffer. 
 if no frameingcrc error then save data
 BIT7:parity error
 BIT6:framing error
 discard char if tty control flags say so 
 Interrupt service routine entry point.
  Arguments:
  irq     interrupt number that caused interrupt
  dev_id  device ID supplied during interrupt registration
 receive IRQs 
 transmit IRQs 
	 Request bottom half processing if there's something
	  for it to do and the bh is not already running
 Initialize and start device.
 allocate a page of memory for a transmit buffer 
 Allocate and claim adapter resources 
 perform existence check and diagnostics 
 program hardware for current parameters 
 Called by mgslpc_close() and mgslpc_hangup() to shutdown hardware
 clear status wait queue because status changes 
 can't happen after shutting down the hardware 
 TODO:disable interrupts instead of reset to preserve signal states 
 Reconfigure adapter based on new parameters
 if B0 rate (hangup) specified then negate RTS and DTR 
 otherwise assert RTS and DTR 
 byte size and parity 
	 calculate number of jiffies to transmit a full
	  FIFO (32 bytes) at specified data rate
	 if port data rate is set to 460800 or less then
	  allow tty settings to override, otherwise keep the
	  current data rate.
 Add .02 seconds of slop 
 process tty input control flags 
 Add a character to the transmit buffer
 Enable transmitter so remaining characters in the
  transmit buffer are sent.
 Send a block of data
  Arguments:
  tty        pointer to tty information structure
  buf	      pointer to buffer containing send data
  count      size of send data in bytes
  Returns: number of characters written
 Return the count of free bytes in transmit buffer
 HDLC (frame oriented) mode 
 Return the count of bytes in transmit buffer
 Discard all data in the send buffer
 Send a high-priority XONXOFF character
 Signal remote device to throttle send data (our receive data)
 Signal remote device to stop throttling send data (our receive data)
 get the current serial statistics
 get the current serial parameters
 set the serial parameters
  Arguments:
 	info		pointer to device instance data
 	new_params	user buffer containing new serial params
  Returns:	0 if success, otherwise error code
		 clear data count so FIFO is not filled on next IRQ.
		  This results in underrun and abort transmission.
 wait for specified event to occur
  Arguments:		info	pointer to device instance data
 			mask	pointer to bitmask of events to wait for
  Return Value:	0	if successful and bit mask updated with
 				of events triggerred,
 			otherwise error code
 return immediately if state matches requested events 
 save current irq counts 
 get current irq counts 
 if no change, wait aborted for some reason 
 save current irq counts 
 get new irq counts 
 if no change, wait aborted for some reason 
 check for change in caller specified modem input 
 return the state of the serial control and status signals
 set modem control signals (DTRRTS)
 Set or clear transmit break condition
  Arguments:		tty		pointer to tty instance data
 			break_state	-1=set break condition, 0=clear
 kernel counter temps 
 Service an IOCTL request
  Arguments:
 	tty	pointer to tty instance data
 	cmd	IOCTL command code
 	arg	command argumentcontext
  Return Value:	0 if success, otherwise error code
 Set new termios settings
  Arguments:
 	tty		pointer to tty structure
 	termios		pointer to buffer to hold returned old termios
 just return if nothing has changed 
 Handle transition to B0 status 
 Handle transition away from B0 status 
 Handle turning off CRTSCTS 
 Wait until the transmitter is empty.
	 Set check interval to 15 of estimated time to
	  send a character, and make it at least 1. The check
	  interval should also be less than the timeout.
	  Note: use tight timings here to satisfy the NIST-PCTS.
 Called by tty_hangup() when a hangup is signaled.
  This is the same as closing all open files for the port.
 verify range of specified line number 
 find the info structure for the specified line 
 1st open on this device, init hardware 
  proc fs routines....
 output current serial signal states 
 Append serial signal status to end 
 Called to print information about devices
 each buffer has header and data 
 calculate total allocation size for 8 buffers 
 limit total allocated memory 
 calculate number of buffers 
 unused flag buffer to satisfy receive_buf calling interface 
 Add the specified device instance data structure to the
  global linked list of devices and increment the device count.
  Arguments:		info	pointer to device instance data
 Initialize the tty_driver structure 
	 note:standard BRG mode is broken in V3.2 chip
	  so enhanced mode is always used
		 BGR[5..0] = N
		  BGR[9..6] = M
		  BGR[7..0] contained in BGR register
		  BGR[9..8] contained in CCR2[7..6]
		  divisor = (N+1)2^M
		 
		  Note: M must not be zero (causes asymetric duty cycle)
 Enabled the AUX clock output at the specified frequency.
	 MODE
	 
	  07..06  MDS[1..0] 10 = transparent HDLC mode
	  05      ADM Address Mode, 0 = no addr recognition
	  04      TMD Timer Mode, 0 = external
	  03      RAC Receiver Active, 0 = inactive
	  02      RTS 0=RTS active during xmit, 1=RTS always active
	  01      TRS Timer Resolution, 1=512
	  00      TLP Test Loop, 0 = no loop
	 
	  1000 0010
 channel B RTS is used to enable AUXCLK driver on SP505 
	 CCR0
	 
	  07      PU Power Up, 1=active, 0=power down
	  06      MCE Master Clock Enable, 1=enabled
	  05      Reserved, 0
	  04..02  SC[2..0] Encoding
	  01..00  SM[1..0] Serial Mode, 00=HDLC
	 
	  11000000
	 CCR1
	 
	  07      SFLG Shared Flag, 0 = disable shared flags
	  06      GALP Go Active On Loop, 0 = not used
	  05      GLP Go On Loop, 0 = not used
	  04      ODS Output Driver Select, 1=TxD is push-pull output
	  03      ITF Interframe Time Fill, 0=mark, 1=flag
	  02..00  CM[2..0] Clock Mode
	 
	  0001 0111
	 CCR2 (Channel B)
	 
	  07..06  BGR[9..8] Baud rate bits 9..8
	  05      BDF Baud rate divisor factor, 0=1, 1=BGR value
	  04      SSEL Clock source select, 1=submode b
	  03      TOE 0=TxCLK is input, 1=TxCLK is output
	  02      RWX ReadWrite Exchange 0=disabled
	  01      C32, CRC select, 0=CRC-16, 1=CRC-32
	  00      DIV, data inversion 0=disabled, 1=enabled
	 
	  0011 1000
	 CCR4
	 
	  07      MCK4 Master Clock Divide by 4, 1=enabled
	  06      EBRG Enhanced Baud Rate Generator Mode, 1=enabled
	  05      TST1 Test Pin, 0=normal operation
	  04      ICD Ivert Carrier Detect, 1=enabled (active low)
	  03..02  Reserved, must be 0
	  01..00  RFT[1..0] RxFIFO Threshold 00=32 bytes
	 
	  0101 0000
	 if auxclk not enabled, set internal BRG so
	  CTS transitions can be detected (requires TxC)
 CCR1:02..00  CM[2..0] Clock Mode = 111 (clock mode 7) 
 CCR2:04 SSEL Clock source select, 1=submode b 
 set LinkSpeed if available, otherwise default to 2Mbps 
 MODE:00 TLP Test Loop, 1=loopback enabled 
 disable all interrupts 
 assume clock mode 0a, rcv=RxC xmt=TxC 
 clock mode 7a, rcv = DPLL, xmt = DPLL 
 clock mode 7b, rcv = BRG, xmt = BRG 
 clock mode 6b, rcv = DPLL, xmt = BRG16 
 clock mode 6a, rcv = DPLL, xmt = TxC 
 clock mode 0b, rcv = RxC, xmt = BRG 
	 MODE
	 
	  07..06  MDS[1..0] 10 = transparent HDLC mode
	  05      ADM Address Mode, 0 = no addr recognition
	  04      TMD Timer Mode, 0 = external
	  03      RAC Receiver Active, 0 = inactive
	  02      RTS 0=RTS active during xmit, 1=RTS always active
	  01      TRS Timer Resolution, 1=512
	  00      TLP Test Loop, 0 = no loop
	 
	  1000 0010
 preserve RTS state 
	 CCR0
	 
	  07      PU Power Up, 1=active, 0=power down
	  06      MCE Master Clock Enable, 1=enabled
	  05      Reserved, 0
	  04..02  SC[2..0] Encoding
	  01..00  SM[1..0] Serial Mode, 00=HDLC
	 
	  11000000
 FM0
 FM1
 Manchester
	 CCR1
	 
	  07      SFLG Shared Flag, 0 = disable shared flags
	  06      GALP Go Active On Loop, 0 = not used
	  05      GLP Go On Loop, 0 = not used
	  04      ODS Output Driver Select, 1=TxD is push-pull output
	  03      ITF Interframe Time Fill, 0=mark, 1=flag
	  02..00  CM[2..0] Clock Mode
	 
	  0001 0000
	 CCR2
	 
	  07..06  BGR[9..8] Baud rate bits 9..8
	  05      BDF Baud rate divisor factor, 0=1, 1=BGR value
	  04      SSEL Clock source select, 1=submode b
	  03      TOE 0=TxCLK is input, 0=TxCLK is input
	  02      RWX ReadWrite Exchange 0=disabled
	  01      C32, CRC select, 0=CRC-16, 1=CRC-32
	  00      DIV, data inversion 0=disabled, 1=enabled
	 
	  0000 0000
	 CCR3
	 
	  07..06  PRE[1..0] Preamble count 00=1, 01=2, 10=4, 11=8
	  05      EPT Enable preamble transmission, 1=enabled
	  04      RADD Receive address pushed to FIFO, 0=disabled
	  03      CRL CRC Reset Level, 0=FFFF
	  02      RCRC Rx CRC 0=On 1=Off
	  01      TCRC Tx CRC 0=On 1=Off
	  00      PSD DPLL Phase Shift Disable
	 
	  0000 0000
 PRE - Preamble pattern 
	 CCR4
	 
	  07      MCK4 Master Clock Divide by 4, 1=enabled
	  06      EBRG Enhanced Baud Rate Generator Mode, 1=enabled
	  05      TST1 Test Pin, 0=normal operation
	  04      ICD Ivert Carrier Detect, 1=enabled (active low)
	  03..02  Reserved, must be 0
	  01..00  RFT[1..0] RxFIFO Threshold 00=32 bytes
	 
	  0101 0000
	 RLCR Receive length check register
	 
	  7     1=enable receive length check
	  6..0  Max frame length = (RL + 1)  32
	 XBCH Transmit Byte Count High
	 
	  07      DMA mode, 0 = interrupt driven
	  06      NRM, 0=ABM (ignored)
	  05      CAS Carrier Auto Start
	  04      XC Transmit Continuously (ignored)
	  03..00  XBC[10..8] Transmit byte count bits 10..8
	 
	  0000 0000
 PVR[3] 1=AUTO CTS active 
 clear pending IRQs 
	 Master clock mode enabled above to allow reset commands
	  to complete even if no data clocks are present.
	 
	  Disable master clock mode for normal communications because
	  V3.2 of the ESCC2 has a bug that prevents the transmit all sent
	  IRQ when in master clock mode.
	 
	  Leave master clock mode enabled for IRQ test because the
	  timer IRQ used by the test can only happen in master clock mode.
 MODE:03 RAC Receiver Active, 0=inactive 
 MODE:03 RAC Receiver Active, 1=active 
 If auto RTS enabled and RTS is inactive, then assert 
 RTS and set a flag indicating that the driver should 
 negate RTS when the transmission completes. 
 Reset the adapter to a known state and prepare it for further use.
 power up both channels (set BIT7) 
 disable all interrupts 
	 PCR Port Configuration Register
	 
	  07..04  DEC[3..0] Serial IF select outputs
	  03      output, 1=AUTO CTS control enabled
	  02      RI Ring Indicator input 0=active
	  01      DSR input 0=active
	  00      DTR output 0=active
	 
	  0000 0110
	 PVR Port Value Register
	 
	  07..04  DEC[3..0] Serial IF select (0000=disabled)
	  03      AUTO CTS output 1=enabled
	  02      RI Ring Indicator input
	  01      DSR input
	  00      DTR output (1=inactive)
	 
	  0000 0001
	write_reg(info, PVR, PVR_DTR);
	 IPC Interrupt Port Configuration
	 
	  07      VIS 1=Masked interrupts visible
	  06..05  Reserved, 0
	  04..03  SLA Slave address, 00 ignored
	  02      CASM Cascading Mode, 1=daisy chain
	  01..00  IC[1..0] Interrupt Config, 01=push-pull output, active low
	 
	  0000 0101
 disable all interrupts 
	 MODE
	 
	  07      Reserved, 0
	  06      FRTS RTS State, 0=active
	  05      FCTS Flow Control on CTS
	  04      FLON Flow Control Enable
	  03      RAC Receiver Active, 0 = inactive
	  02      RTS 0=Auto RTS, 1=manual RTS
	  01      TRS Timer Resolution, 1=512
	  00      TLP Test Loop, 0 = no loop
	 
	  0000 0110
 preserve RTS state 
	 CCR0
	 
	  07      PU Power Up, 1=active, 0=power down
	  06      MCE Master Clock Enable, 1=enabled
	  05      Reserved, 0
	  04..02  SC[2..0] Encoding, 000=NRZ
	  01..00  SM[1..0] Serial Mode, 11=Async
	 
	  1000 0011
	 CCR1
	 
	  07..05  Reserved, 0
	  04      ODS Output Driver Select, 1=TxD is push-pull output
	  03      BCR Bit Clock Rate, 1=16x
	  02..00  CM[2..0] Clock Mode, 111=BRG
	 
	  0001 1111
	 CCR2 (channel A)
	 
	  07..06  BGR[9..8] Baud rate bits 9..8
	  05      BDF Baud rate divisor factor, 0=1, 1=BGR value
	  04      SSEL Clock source select, 1=submode b
	  03      TOE 0=TxCLK is input, 0=TxCLK is input
	  02      RWX ReadWrite Exchange 0=disabled
	  01      Reserved, 0
	  00      DIV, data inversion 0=disabled, 1=enabled
	 
	  0001 0000
	 CCR3
	 
	  07..01  Reserved, 0
	  00      PSD DPLL Phase Shift Disable
	 
	  0000 0000
	 CCR4
	 
	  07      MCK4 Master Clock Divide by 4, 1=enabled
	  06      EBRG Enhanced Baud Rate Generator Mode, 1=enabled
	  05      TST1 Test Pin, 0=normal operation
	  04      ICD Ivert Carrier Detect, 1=enabled (active low)
	  03..00  Reserved, must be 0
	 
	  0101 0000
	 DAFO Data Format
	 
	  07      Reserved, 0
	  06      XBRK transmit break, 0=normal operation
	  05      Stop bits (0=1, 1=2)
	  04..03  PAR[1..0] Parity (01=odd, 10=even)
	  02      PAREN Parity Enable
	  01..00  CHL[1..0] Character Length (00=8, 01=7)
	 
 7 bits 
 Parity enable 
	 RFC Rx FIFO Control
	 
	  07      Reserved, 0
	  06      DPS, 1=parity bit not stored in data byte
	  05      DXS, 0=all data stored in FIFO (including XONXOFF)
	  04      RFDF Rx FIFO Data Format, 1=status byte stored in FIFO
	  03..02  RFTH[1..0], rx threshold, 11=16 status + 16 data byte
	  01      Reserved, 0
	  00      TCDE Terminate Char Detect Enable, 0=disabled
	 
	  0101 1100
	 RLCR Receive length check register
	 
	  Max frame length = (RL + 1)  32
	 XBCH Transmit Byte Count High
	 
	  07      DMA mode, 0 = interrupt driven
	  06      NRM, 0=ABM (ignored)
	  05      CAS Carrier Auto Start
	  04      XC Transmit Continuously (ignored)
	  03..00  XBC[10..8] Transmit byte count bits 10..8
	 
	  0000 0000
 MODE:03 RAC Receiver Active, 1=active 
 PVR[3] 1=AUTO CTS active 
 clear pending IRQs 
 Set the HDLC idle mode for the transmitter.
 Note: ESCC2 only supports flags and one idle modes 
 get state of the V24 status (input) signals.
 preserve RTS and DTR 
 Set the state of RTS and DTR based on contents of
  serial_signals member of device extension.
 Attempt to return a received HDLC frame
  Only frames received without errors are returned.
  Returns true if frame returned, otherwise false
	 07  VFR  1=valid frame
	  06  RDO  1=data overrun
	  05  CRC  1=OK, 0=error
	  04  RAB  1=frame aborted
 init hdlc mode 
 512 cycles 
 HDLC frame time out
  update stats and do tx completion processing
  called by generic HDLC layer when protocol selected (PPP, frame relay, etc.)
  set encoding and frame check sequence (FCS) options
  dev       pointer to network device structure
  encoding  serial encoding setting
  parity    FCS setting
  returns 0 if success, otherwise error code
 return error if TTY interface open 
 if network interface up, reprogram hardware 
  called by generic HDLC layer to send frame
  skb  socket buffer containing HDLC frame
  dev  pointer to network device structure
 stop sending until this frame completes 
 copy data to device buffers 
 update network statistics 
 done with socket buffer, so free it 
 save start time for transmit timeout detection 
 start hardware transmitter if necessary 
  called by network layer when interface enabled
  claim resources and initialize hardware
  dev  pointer to network device structure
  returns 0 if success, otherwise error code
 generic HDLC layer open processing 
 arbitrate between network and tty opens 
 claim resources and init adapter 
 assert RTS and DTR, apply hardware settings 
 enable network layer transmit 
 inform generic HDLC layer of current DCD status 
  called by network layer when interface is disabled
  shutdown hardware and release resources
  dev  pointer to network device structure
  returns 0 if success, otherwise error code
 shutdown adapter and release resources 
  called by network layer to process IOCTL call to network device
  dev  pointer to network device structure
  ifs  pointer to network interface settings structure
  returns 0 if success, otherwise error code
 return error if TTY interface open 
 return current sync_serial_settings 
 data size wanted 
 set sync_serial_settings 
 if network interface up, reprogram hardware 
  called by network layer when transmit timeout is detected
  dev  pointer to network device structure
  called by device driver when transmit completes
  reenable network layer transmit if stopped
  info  pointer to device instance information
  called by device driver when frame received
  pass frame to network layer
  info  pointer to device instance information
  buf   pointer to buffer contianing frame data
  size  count of data bytes in buf
  called by device driver when adding device instance
  do generic HDLC initialization
  info  pointer to device instance information
  returns 0 if success, otherwise error code
 allocate and initialize network and HDLC layer objects 
 for network layer reporting purposes only 
 network layer callbacks and settings 
 generic HDLC layer callbacks and settings 
 register objects with HDLC layer 
  called by device driver when removing device instance
  do generic HDLC cleanup
  info  pointer to device instance information
 CONFIG_HDLC 
  A driver for the Omnikey PCMCIA smartcard reader CardMan 4040
  (c) 2000-2004 Omnikey AG (http:www.omnikey.com)
  (C) 2005-2006 Harald Welte <laforge@gnumonks.org>
  	- add support for poll()
  	- driver cleanup
  	- add waitqueues
  	- adhere to linux kernel coding style and policies
  	- support 2.6.13 "new style" pcmcia interface
  	- add class interface for udev device creation
  The device basically is a USB CCID compliant device that has been
  attached to an IO-Mapped FIFO.
  All rights reserved, Dual BSDGPL Licensed.
 n (debug level) is ignored 
 additional debug output may be enabled by re-compiling with
 #define CM4040_DEBUG 
 how often to poll for fifo status change 
 poll the device fifo status register.  not to be confused with
 Write to Sync Control Register 
 find device 
 SPDX-License-Identifier: GPL-2.0
 Copyright (C) 2019-2020 ARM Limited or its affiliates. 
 data circular buffer in words must be:
   - of a power-of-2 size (limitation of circ_buf.h macros)
   - at least 6, the size generated in the EHR according to HW implementation
 The timeout for the TRNG operation should be calculated with the formula:
  Timeout = EHR_NUM  VN_COEFF  EHR_LENGTH  SAMPLE_CNT  SCALE_VALUE
  while:
   - SAMPLE_CNT is input value from the characterisation process
   - all the rest are constants
	 Sampling interval for each ring oscillator:
	  count of ring oscillator cycles between consecutive bits sampling.
	  Value of 0 indicates non-valid rosc
 pending_hw - 1 when HW is pending, 0 when it is idle 
 protects against multiple concurrent consumers of data_buf 
 functions for writeread CC registers 
 pm_runtime_get_sync() can return 1 as a valid return code 
 must be before the enabling to avoid redundant suspending 
 set us as active - note we won't do PM ops until cc_trng_pm_go()! 
 enable the PM module
 ret will be set to 0 if at least one rosc has (sampling ratio > 0) 
 arm,rosc-ratio was not found in device tree 
 verify that at least one rosc has (sampling ratio > 0) 
 Set watchdog threshold to maximal allowed time (in CPU cycles) 
 enable the RND source 
 unmask RNG interrupts 
 increase circular data buffer index (headtail) 
 current implementation ignores "wait" 
 concurrent consumers from data_buf cannot be served 
 copy till end of data buffer (without wrap back) 
 copy rest of data in data buffer 
 re-check space in buffer to avoid potential race 
 increment device's usage counter 
				 schedule execution of deferred work handler
				  for filling of data buffer
 enable the HW RND clock 
 do software reset 
	 in order to verify that the reset has completed,
	  the sample count need to be verified
 enable the HW RND clock   
 set sampling ratio (rng_clocks) between consecutive bits 
 read the sampling ratio  
 disable the RND source for setting new parameters in HW 
 Debug Control register: set to 0 - no bypasses 
 stop DMA and the RNG source 
 read RNG_ISR and check for errors 
 FIPS error is fatal 
 Clear all pending RNG interrupts 
 in case of AUTOCORRTIMEOUT error, try the next ROSC 
 in case of VN error, ignore it 
 read EHR data from registers 
 calc word ptr in data_buf 
		 EHR_DATA registers are cleared on read. In case 0 value was
		  returned, restart the entropy collection.
 continue to fill data buffer if needed 
 Re-enable rnd source 
 trigger trng hw with next rosc 
 if driver suspended return, probably shared interrupt 
 read the interrupt status 
 Probably shared interrupt line 
 clear interrupt - must be before processing events 
 RNG interrupt - most probable 
 Mask RNG interrupts - will be unmasked in deferred work 
		 We clear RNG interrupt here,
		  to avoid it from firing as we'll unmask RNG interrupts.
 schedule execution of deferred work handler 
 Just warning 
 Then IRQ 
 parse sampling rate from device tree 
 register the driver isr function 
 Clear all pending interrupts 
 unmask HOST RNG interrupt 
 init PM 
 increment device's usage counter 
 set pending_hw to verify that HW won't be triggered from read 
 registration of the hwrng device 
 trigger HW to start generate data 
 All set, we can allow auto-suspend 
		 in cc7x3 NVM_IS_IDLE indicates that CC reset is
		   completed and device is fully functional
 hw indicate reset completed 
 allow scheduling other process on the processor 
 reset not completed 
 Enables the device source clk 
 wait for Cryptocell reset completion 
 unmask HOST RNG interrupt 
 Compile time assertion checks 
 Module description 
 SPDX-License-Identifier: GPL-2.0
  Ingenic Random Number Generator driver
  Copyright (c) 2017 PrasannaKumar Muralidharan <prasannatsmkumar@gmail.com>
  Copyright (c) 2020 周琰杰 (Zhou Yanjie) <zhouyanjie@wanyeetech.com>
 RNG register offsets 
 bits within the ERND register 
 Device associated memory 
		
		  A delay is required so that the current RNG data is not bit shifted
		  version of previous RNG data which could happen if random data is
		  read continuously from this device.
 sentinel  }
 SPDX-License-Identifier: GPL-2.0-or-later
  APM X-Gene SoC RNG Driver
  Copyright (c) 2014, Applied Micro Circuits Corporation
  Author: Rameshwar Prasad Sahu <rsahu@apm.com>
 	   Shamal Winchurkar <swinchurkar@apm.com>
 	   Feng Kan <fkan@apm.com>
 RNG  Registers 
 Failure count last minute 
 First failure timestamp 
 Clear failure counter as timer expired 
  Initialize or reinit free running oscillators (FROs)
		
		  LFSR detected an out-of-bounds number of 1s after
		  checking 20,000 bits (test T1 as specified in the
		  AIS-31 standard)
		
		  LFSR detected an out-of-bounds value in at least one
		  of the 16 poker_count_X counters or an out of bounds sum
		  of squares value after checking 20,000 bits (test T2 as
		  specified in the AIS-31 standard)
		
		  LFSR detected a sequence of 34 identical bits
		  (test T4 as specified in the AIS-31 standard)
		
		  LFSR detected an outof-bounds value for at least one
		  of the running counters after checking 20,000 bits
		  (test T3 as specified in the AIS-31 standard)
 LFSR detected a sequence of 48 identical bits 
		
		  Detected output data registers generated same value twice
		  in a row
 FROs shut down after a second error event. Try recover. 
 1st time, just recover 
			
			  We must start a timer to clear out this error
			  in case the system timer wrap around
 2nd time failure in lesser than 1 minute? 
 2nd time failure after 1 minutes, recover 
				
				  We must start a timer to clear out this
				  error in case the system timer wrap
				  around
 Clear them all 
 RNG Alarm Counter overflow 
 Clear ready bit to start next transaction 
 Enable IP clock 
 SPDX-License-Identifier: GPL-2.0-or-later
  Nomadik RNG support
   Copyright 2009 Alessandro Rubini
	
	  The register is 32 bits and gives 16 random bits (low half).
	  A subsequent read will delay the core for 400ns, so we just read
	  once and accept the very unlikely very small delay, even if wait==0.
 we have at most one RNG per machine, granted 
 top bits are rev and cfg: accept all 
 SPDX-License-Identifier: GPL-2.0-or-later
  Driver for Mediatek Hardware Random Number Generator
  Copyright (C) 2017 Sean Wang <sean.wang@mediatek.com>
 Runtime PM autosuspend timeout: 
 CONFIG_PM 
 CONFIG_PM 
  Hardware Random Number Generator support for Cavium Networks
  Octeon processor family.
  This file is subject to the terms and conditions of the GNU General Public
  License.  See the file "COPYING" in the main directory of this archive
  for more details.
  Copyright (C) 2009 Cavium Networks
 Enable the entropy source.  
 Enable the RNG hardware.  
 Disable everything.  
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2010 Michael Neuling IBM Corporation
  Driver for the pseries hardware RNG for POWER7+ and above
 The hypervisor interface returns 64 bits 
  pseries_rng_get_desired_dma - Return desired DMA allocate for CMO operations
  This is a required function for a driver to operate in a CMO environment
  but this device does not make use of DMA allocations, return 0.
  Return value:
 	Number of bytes of IO data the driver will need to perform well -> 0
 SPDX-License-Identifier: GPL-2.0-only
 n2-drv.c: Niagara-2 RNG driver.
  Copyright (C) 2008, 2011 David S. Miller <davem@davemloft.net>
 The Niagara2 RNG provides a 64-bit read-only random number
  register, plus a control register.  Access to the RNG is
  virtualized through the hypervisor so that both guests and control
  nodes can access the device.
  The entropy source consists of raw entropy sources, each
  constructed from a voltage controlled oscillator whose phase is
  jittered by thermal noise sources.
  The oscillator in each of the three raw entropy sources run at
  different frequencies.  Normally, all three generator outputs are
  gathered, xored together, and fed into a CRC circuit, the output of
  which is the 64-bit read-only register.
  Some time is necessary for all the necessary entropy to build up
  such that a full 64-bits of entropy are available in the register.
  In normal operating mode (RNG_CTL_LFSR is set), the chip implements
  an interlock which blocks register reads until sufficient entropy
  is available.
  A control register is provided for adjusting various aspects of RNG
  operation, and to enable diagnostic modes.  Each of the three raw
  entropy sources has an enable bit (RNG_CTL_ES{1,2,3}).  Also
  provided are fields for controlling the minimum time in cycles
  between read accesses to the register (RNG_CTL_WAIT, this controls
  the interlock described in the previous paragraph).
  The standard setting is to have the mode bit (RNG_CTL_LFSR) set,
  all three entropy sources enabled, and the interlock time set
  appropriately.
  The CRC polynomial used by the chip is:
  P(X) = x64 + x61 + x57 + x56 + x52 + x51 + x50 + x48 + x47 + x46 +
         x43 + x42 + x41 + x39 + x38 + x37 + x35 + x32 + x28 + x25 +
         x22 + x21 + x17 + x15 + x13 + x12 + x11 + x7 + x5 + x + 1
  The RNG_CTL_VCO value of each noise cell must be programmed
  separately.  This is why 4 control register values must be provided
  to the hypervisor.  During a write, the hypervisor writes them all,
  one at a time, to the actual RNG_CTL register.  The first three
  values are used to setup the desired RNG_CTL_VCO for each entropy
  source, for example:
 	control 0: (1 << RNG_CTL_VCO_SHIFT) | RNG_CTL_ES1
 	control 1: (2 << RNG_CTL_VCO_SHIFT) | RNG_CTL_ES2
 	control 2: (3 << RNG_CTL_VCO_SHIFT) | RNG_CTL_ES3
  And then the fourth value sets the final chip state and enables
  desired.
 In multi-socket situations, the hypervisor might need to
  queue up the RNG control register write if it's for a unit
  that is on a cpu socket other than the one we are executing on.
  We poll here waiting for a successful read of that control
  register to make sure the write has been actually performed.
 Just try to see if we can successfully access the control register
  of the RNG on the domain on which we are currently executing.
		 We purposefully give invalid arguments, HV_NOACCESS
		  is higher priority than the errors we'd get from
		  these other cases, and that's the error we are
		  truly interested in.
	 Not in the control domain, that's OK we are only a consumer
	  of the RNG data, we don't setup and program it.
 On a guest node, just make sure we can read random data properly.
  If a control node reboots or reloads it's n2rng driver, this won't
  work during that time.  So we have to keep probing until the device
  becomes usable.
 Purposefully skip over the first word.  
 yes, m4 uses the old value 
 The sanity checks passed, install the final configuration into the
  chip, it's ready to use.
		 XXX This isn't the best.  We should fetch a bunch
		  XXX of words using each entropy source combined XXX
		  with each VCO setting, and see which combinations
		  XXX give the best random data.
 SPDX-License-Identifier: GPL-2.0-only
  PIC32 RNG driver
  Joshua Henderson <joshua.henderson@microchip.com>
  Copyright (C) 2016 Microchip Technology Inc.  All rights reserved.
  The TRNG can generate up to 24Mbps. This is a timeout that should be safe
  enough given the instructions in the loop and that the TRNG may not always
  be at maximum rate.
 TRNG value comes through the seed registers 
 enable TRNG in enhanced mode 
 sentinel  }
  Hardware Random Number Generator support for Cavium Inc.
  Thunder processor family.
  This file is subject to the terms and conditions of the GNU General Public
  License.  See the file "COPYING" in the main directory of this archive
  for more details.
  Copyright (C) 2016 Cavium, Inc.
 Enable the RNG hardware and activate the VF 
Map the RNG control 
 Enable the RNG hardware and entropy source 
 Enable the Cavium RNG as a VF 
 Disable the RNG hardware and entropy source 
 Disable VF and RNG Hardware 
 Remove the VF 
 Disable the RNG hardware and entropy source 
 Thunder RNM 
  RNG driver for Intel RNGs
  Copyright 2005 (c) MontaVista Software, Inc.
  with the majority of the code coming from:
  Hardware driver for the IntelAMDVIA Random Number Generators (RNG)
  (c) Copyright 2003 Red Hat Inc <jgarzik@redhat.com>
  derived from
  Hardware driver for the AMD 768 Random Number Generator (RNG)
  (c) Copyright 2001 Red Hat Inc
  derived from
  Hardware driver for Intel i810 Random Number Generator (RNG)
  Copyright 2000,2001 Jeff Garzik <jgarzik@pobox.com>
  Copyright 2000,2001 Philipp Rumpf <prumpf@mandrakesoft.com>
  This file is licensed under  the terms of the GNU General Public
  License version 2. This program is licensed "as is" without any
  warranty of any kind, whether express or implied.
  RNG registers
  Magic address at which Intel PCI bridges locate the RNG
  LPC bridge PCI config space registers
 high byte of 16-bit register 
  Magic address at which Intel Firmware Hubs get accessed
  Intel Firmware Hub command codes (write to any address inside the device)
 aka READ_ARRAY 
  Intel Firmware Hub Read ID command result addresses
  Intel Firmware Hub Read ID command result values
  Data for PCI driver interface
  This data only exists for exporting the supported
  PCI ids via MODULE_DEVICE_TABLE.  We do not actually
  register a pci_driver, because someone else might one day
  want to register another driver on the same PCI id.
 AA
 AA 
 AB
 AB 
 ??
 BAM, CAM, DBM, FBM, GxM
 BAM 
 CAM 
 DBM 
 FBM 
 GxM 
 GxM DH 
 BA, CA, DB, Ex, 6300, Fx, 631x632x, Gx
 BA 
 CA 
 DB 
 Ex 
 6300 
 Fx 
 631x632x 
 631x632x 
 631x632x 
 631x632x 
 631x632x 
 631x632x 
 631x632x 
 631x632x 
 631x632x 
 631x632x 
 631x632x 
 631x632x 
 631x632x 
 631x632x 
 631x632x 
 631x632x 
 Gx 
 E
 E  
 terminate list 
 turn RNG hw on, if it's off 
 interrupts disabled in stop_machine call 
 Check for Intel 82802 
const char warning[] =
 Device not found. 
	
	  Since the BIOS codedata is going to disappear from its normal
	  location with the Read ID command, all activity on the system
	  must be stopped until the state is back to normal.
	 
	  Use stop_machine because IPIs can be blocked by disabling
	  interrupts.
 Check for Random Number Generator 
  Hardware Random Number Generator support for Cavium, Inc.
  Thunder processor family.
  This file is subject to the terms and conditions of the GNU General Public
  License.  See the file "COPYING" in the main directory of this archive
  for more details.
  Copyright (C) 2016 Cavium, Inc.
 Read data from the RNG unit 
 Map Cavium RNG to an HWRNG object 
 Map the RNG result 
 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause
  Copyright (c) 2016 BayLibre, SAS.
  Author: Neil Armstrong <narmstrong@baylibre.com>
  Copyright (C) 2014 Amlogic, Inc.
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2006-2007 PA Semi, Inc
  Maintained by: Olof Johansson <olof@lixom.net>
  Driver for the PWRficient onchip rng
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2016 HiSilicon Co., Ltd.
 get a random number as initial seed 
	
	  The seed is reload periodically, there are two choice
	  of seeds, default seed using the value from LFSR, or
	  will use seed generated by ring oscillator.
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (c) 2015, Daniel Thompson
 Manage timeout which is based on timer and take 
 care of initial delay time when enabling rng	
 If error detected or data not ready... 
 clear error indicators 
  omap3-rom-rng.c - RNG driver for TI OMAP3 CPU family
  Copyright (C) 2009 Nokia Corporation
  Author: Juha Yrjola <juha.yrjola@solidboot.com>
  Copyright (C) 2013 Pali Rohár <pali@kernel.org>
  This file is licensed under  the terms of the GNU General Public
  License version 2. This program is licensed "as is" without any
  warranty of any kind, whether express or implied.
 sentinel  },
 SPDX-License-Identifier: GPL-2.0-or-later
  RNG driver for Freescale RNGA
  Copyright 2008-2009 Freescale Semiconductor, Inc. All Rights Reserved.
  Author: Alan Carvalho de Assis <acassis@gmail.com>
  This driver is based on other RNG drivers.
 RNGA Registers 
 RNGA Registers Range 
 RNGA Control Register 
 RNGA Status Register 
 how many random numbers are in FIFO? [0-16] 
 retrieve a random number from FIFO 
 some error while reading this random number? 
 if error: clear error interrupt, but doesn't return random number 
 wake up 
 verify if oscillator is working 
 go running 
 stop rnga 
 sentinel  },
 SPDX-License-Identifier: GPL-2.0-only
  Random Number Generator driver for the Keystone SOC
  Copyright (C) 2016 Texas Instruments Incorporated - https:www.ti.com
  Authors:	Sandeep Nair
 		Vitaly Andrianov
 TRNG enable control in SA System module
 TRNG start control in TRNG module 
 Data ready indicator in STATUS register 
 Data ready clear control in INTACK register 
  Number of samples taken to gather entropy during startup.
  If value is 0, the number of samples is 2^24 else
  equals value times 2^8.
  Minimum number of samples taken to regenerate entropy
  If value is 0, the number of samples is 2^24 else
  equals value times 2^6.
  Maximum number of samples taken to regenerate entropy
  If value is 0, the number of samples is 2^24 else
  equals value times 2^8.
 Number of CLK input cycles between samples 
 Maximum retries to get rng data 
 Delay between retries (in usecs) 
 Enable RNG module 
 Configure RNG module 
 Disable all interrupts from TRNG 
 Enable RNG 
 Disable RNG 
 Read random data 
 Max delay expected here is 81920000 ns 
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) 2018-2019 Linaro Ltd.
  TA_CMD_GET_ENTROPY - Get Entropy from RNG
  param[0] (inout memref) - Entropy buffer memory reference
  param[1] unused
  param[2] unused
  param[3] unused
  Result:
  TEE_SUCCESS - Invoke command success
  TEE_ERROR_BAD_PARAMETERS - Incorrect input param
  TEE_ERROR_NOT_SUPPORTED - Requested entropy size greater than size of pool
  TEE_ERROR_HEALTH_TEST_FAIL - Continuous health testing failed
  TA_CMD_GET_RNG_INFO - Get RNG information
  param[0] (out value) - value.a: RNG data-rate in bytes per second
                         value.b: QualityEntropy per 1024 bit of data
  param[1] unused
  param[2] unused
  param[3] unused
  Result:
  TEE_SUCCESS - Invoke command success
  TEE_ERROR_BAD_PARAMETERS - Incorrect input param
  struct optee_rng_private - OP-TEE Random Number Generator private data
  @dev:		OP-TEE based RNG device.
  @ctx:		OP-TEE context handler.
  @session_id:		RNG TA session identifier.
  @data_rate:		RNG data rate.
  @entropy_shm_pool:	Memory pool shared with RNG device.
  @optee_rng:		OP-TEE RNG driver structure.
 Invoke TA_CMD_GET_ENTROPY function of Trusted App 
 Fill invoke cmd params 
 Invoke TA_CMD_GET_RNG_INFO function of Trusted App 
 Fill invoke cmd params 
 Open context with TEE driver 
 Open session with hwrng Trusted App 
 SPDX-License-Identifier: GPL-2.0-only
  ST Random Number Generator Driver ST's Platforms
  Author: Pankaj Dev: <pankaj.dev@st.com>
          Lee Jones <lee.jones@linaro.org>
  Copyright (C) 2015 STMicroelectronics (R&D) Limited
 Registers 
 Registers fields 
 2 Byte (16bit) samples 
  Samples are documented to be available every 0.667us, so in theory
  the 4 sample deep FIFO should take 2.668us to fill.  However, during
  thorough testing, it became apparent that filling the FIFO actually
  takes closer to 12us.  We then multiply by 2 in order to account for
  the lack of udelay()'s reliability, suggested by Russell King.
 Wait until FIFO is full - max 4uS
 No of bytes read 
 SPDX-License-Identifier: GPL-2.0-only
  driverscharhw_randomtimeriomem-rng.c
  Copyright (C) 2009 Alexander Clouter <alex@digriz.org.uk>
  Derived from driverscharhw_randomomap-rng.c
    Copyright 2005 (c) MontaVista Software, Inc.
    Author: Deepak Saxena <dsaxena@plexity.net>
  Overview:
    This driver is useful for platforms that have an IO range that provides
    periodic random data from a single IO memory address.  All the platform
    has to do is provide the address and 'wait time' that new data becomes
    available.
  TODO: add support for reading sizes other than 32bits and masking
	
	  There may not have been enough time for new data to be generated
	  since the last request.  If the caller doesn't want to wait, let them
	  bail out.  Otherwise, wait for the completion.  If the new data has
	  already been generated, the completion should already be available.
		
		  After the first read, all additional reads will need to wait
		  for the RNG to generate new data.  Since the period can have
		  a wide range of values (1us to 1s have been observed), allow
		  for 1% tolerance in the sleep time rather than a fixed value.
	
	  Block any new callers until the RNG has had time to generate new
	  data.
 Allocate memory for the device structure (and zero it) 
 Assume random data is already available. 
  Copyright (c) 2011 Peter Korsgaard <jacmet@sunsite.dk>
  This file is licensed under  the terms of the GNU General Public
  License version 2. This program is licensed "as is" without any
  warranty of any kind, whether express or implied.
 RNG 
 generate RN every 168 cycles 
 data ready? 
		
		  ensure data ready is only set again AFTER the next data
		  word is ready in case it got set between checking ISR
		  and reading ODATA, so we don't risk re-reading the
		  same word
 if peripheral clk is above 100MHz, set HALFR 
 CONFIG_PM 
 sentinel 
 CONFIG_PM 
  RNG driver for AMD RNGs
  Copyright 2005 (c) MontaVista Software, Inc.
  with the majority of the code coming from:
  Hardware driver for the IntelAMDVIA Random Number Generators (RNG)
  (c) Copyright 2003 Red Hat Inc <jgarzik@redhat.com>
  derived from
  Hardware driver for the AMD 768 Random Number Generator (RNG)
  (c) Copyright 2001 Red Hat Inc
  derived from
  Hardware driver for Intel i810 Random Number Generator (RNG)
  Copyright 2000,2001 Jeff Garzik <jgarzik@pobox.com>
  Copyright 2000,2001 Philipp Rumpf <prumpf@mandrakesoft.com>
  This file is licensed under  the terms of the GNU General Public
  License version 2. This program is licensed "as is" without any
  warranty of any kind, whether express or implied.
  Data for PCI driver interface
  This data only exists for exporting the supported
  PCI ids via MODULE_DEVICE_TABLE.  We do not actually
  register a pci_driver, because someone else might one day
  want to register another driver on the same PCI id.
 terminate list 
 We will wait at maximum one time per read 
	
	  RNG data is available when RNGDONE is set to 1
	  New random numbers are generated approximately 128 microseconds
	  after RNGDATA is read
 Delay given by datasheet 
 RNG on 
 PMIO enable 
 RNG off 
 Device not found. 
 SPDX-License-Identifier: GPL-2.0
 Copyright (c) 2019 Nuvoton Technology corporation.
 Control and status register 
 Data register 
 Mode register 
 20-25 MHz 
  omap-rng.c - RNG driver for TI OMAP CPU family
  Author: Deepak Saxena <dsaxena@plexity.net>
  Copyright 2005 (c) MontaVista Software, Inc.
  Mostly based on original driver:
  Copyright (C) 2005 Nokia Corporation
  Author: Juha Yrjölä <juha.yrjola@nokia.com>
  This file is licensed under  the terms of the GNU General Public
  License version 2. This program is licensed "as is" without any
  warranty of any kind, whether express or implied.
  EIP76 RNG takes approx. 700us to produce 16 bytes of output data
  as per testing results. And to account for the lack of udelay()'s
  reliability, we keep the timeout as 1000us.
  struct omap_rng_pdata - RNG IP block-specific data
  @regs: Pointer to the register offsets structure.
  @data_size: No. of bytes in RNG output.
  @data_present: Callback to determine if data is available.
  @init: Callback for IP specific initialization sequence.
  @cleanup: Callback for IP specific cleanup sequence.
 Return if RNG is already running. 
	  Number of 512 bit blocks of raw Noise Source output data that must
	   be processed by either the Conditioning Function or the
	   SP 800-90 DRBG ‘BC_DF’ functionality to yield a ‘full entropy’
	   output value.
	 Number of FRO samples that are XOR-ed together into one bit to be
	  shifted into the main shift register
 Enable all available FROs 
 Enable TRNG 
 Return if RNG is already running. 
	
	  Interrupt raised by a fro shutdown threshold, do the following:
	  1. Clear the alarm events.
	  2. De tune the FROs which are shutdown.
	  3. Re enable the shutdown FROs.
		
		  On OMAP4, enabling the shutdown_oflo interrupt is
		  done in the interrupt mask register. There is no
		  such register on EIP76, and it's enabled by the
		  same bit in the control register
 Only OMAP23 can be non-DT 
 SPDX-License-Identifier: GPL-2.0
 Copyright (C) 2020 Xiphera Ltd. 
 trng statuses 
 check for data 
			
			  Inform the trng of the read
			  and re-enable it to produce a new random number
	
	  the trng needs to be reset first which might not happen in time,
	  hence we incorporate a small delay to ensure proper behaviour
		
		  there is a small chance the trng is just not ready yet,
		  so we try one more time. If the second time fails, we give up
	
	  once again, to ensure proper behaviour we sleep
	  for a while after zeroizing the trng
 diagnose the reason for the failure 
 SPDX-License-Identifier: GPL-2.0-or-later
  RNG driver for Freescale RNGC
  Copyright (C) 2008-2012 Freescale Semiconductor, Inc.
  Copyright (C) 2017 Martin Kaiser <martin@kaiser.cx>
 the fields in the ver id register 
 the rng_type field 
 3 sec 
	
	  err_reg is written only by the irq handler and read only
	  when interrupts are masked, we need no spinlock
 mask interrupts 
	
	  CLR_INT clears the interrupt only if there's no error
	  CLR_ERR clear the interrupt and the error register if there
	  is an error
 run self test 
 is there some error while reading this random number? 
 how many random numbers are in FIFO? [0-16] 
 retrieve a random number from FIFO 
	
	  clearing the interrupt will also clear the error register
	  read error and status before clearing
 clear error 
 create seed, repeat while there is some statistical error 
 seed creation 
	
	  enable automatic seeding, the rngc creates a new seed automatically
	  after serving 2^20 random 160-bit words
	
	  if initialisation was successful, we keep the interrupt
	  unmasked until imx_rngc_cleanup is called
	  we mask the interrupt ourselves if we return an error
	
	  This driver supports only RNGC and RNGB. (There's a different
	  driver for RNGA.)
 sentinel  }
  RNG driver for AMD Geode RNGs
  Copyright 2005 (c) MontaVista Software, Inc.
  with the majority of the code coming from:
  Hardware driver for the IntelAMDVIA Random Number Generators (RNG)
  (c) Copyright 2003 Red Hat Inc <jgarzik@redhat.com>
  derived from
  Hardware driver for the AMD 768 Random Number Generator (RNG)
  (c) Copyright 2001 Red Hat Inc
  derived from
  Hardware driver for Intel i810 Random Number Generator (RNG)
  Copyright 2000,2001 Jeff Garzik <jgarzik@pobox.com>
  Copyright 2000,2001 Philipp Rumpf <prumpf@mandrakesoft.com>
  This file is licensed under  the terms of the GNU General Public
  License version 2. This program is licensed "as is" without any
  warranty of any kind, whether express or implied.
  Data for PCI driver interface
  This data only exists for exporting the supported
  PCI ids via MODULE_DEVICE_TABLE.  We do not actually
  register a pci_driver, because someone else might one day
  want to register another driver on the same PCI id.
 terminate list 
 Device not found. 
 SPDX-License-Identifier: GPL-2.0-or-later
  Randomness driver for virtio
   Copyright (C) 2007, 2008 Rusty Russell IBM Corporation
 data transfer 
 minimal size returned by rng_buffer_size() 
 We can get spurious callbacks, e.g. shared IRQs + virtio_pci. 
 There should always be room for one buffer. 
 copy available data 
	 We have already copied available entropy,
	  so either size is 0 or data_avail is 0
 data_avail is 0 but a request is pending 
		 if vi->data_avail is 0, we have been interrupted
		  by a cleanup, but buffer stays in the queue
 We expect a single virtqueue. 
 we always have a pending entropy request 
		
		  Set hwrng_removed to ensure that virtio_read()
		  does not block waiting for data before the
		  registration is complete.
 SPDX-License-Identifier: GPL-2.0
  Copyright (c) 2010-2012 Broadcom. All rights reserved.
  Copyright (c) 2013 Lubomir Rintel
 enable rng 
 the initial numbers generated are "less random" so will be discarded 
	 MIPS chips strapped for BE will automagically configure the
	  peripheral registers for CPU-native byte order.
 mask the interrupt 
 set warm-up count & enable 
 disable rng hardware 
 map peripheral 
 Clock is optional on most platforms 
 Check for rng init function, execute it 
 register driver 
 sentinel  }
 SPDX-License-Identifier: GPL-2.0
  Ingenic True Random Number Generator driver
  Copyright (c) 2019 漆鹏振 (Qi Pengzhen) <aric.pzqi@ingenic.com>
  Copyright (c) 2020 周琰杰 (Zhou Yanjie) <zhouyanjie@wanyeetech.com>
 DTRNG register offsets 
 bits within the CFG register 
 bits within the STATUS register 
 sentinel  }
 SPDX-License-Identifier: GPL-2.0
 Copyright (c) 2020 Silex Insight
 usec 
 usec 
 usec 
 usec 
 Disable interrupts, random generation and enable the softreset 
 Wait until the state changed 
 sentinel  }
 SPDX-License-Identifier: GPL-2.0
  Randomness driver for the ARM SMCCC TRNG Firmware Interface
  https:developer.arm.comdocumentationden0098latest
   Copyright (C) 2020 Arm Ltd.
  The ARM TRNG firmware interface specifies a protocol to read entropy
  from a higher exception level, to abstract from any machine specific
  implemenations and allow easier use in hypervisors.
  The firmware interface is realised using the SMCCC specification.
 We don't want to allow the firmware to stall us forever. 
  hw_randomcore.c: HWRNG core API
  Copyright 2006 Michael Buesch <m@bues.ch>
  Copyright 2005 (c) MontaVista Software, Inc.
  Please read Documentationadmin-guidehw_random.rst for details on use.
  This software may be used and distributed according to the terms
  of the GNU General Public License, incorporated herein by reference.
 the current rng has been explicitly chosen by user via sysfs 
 list of registered rngs, sorted decending by quality 
 Protects rng_list and current_rng 
 Protects rng read functions, data_avail, rng_buffer and rng_fillbuf 
 = 0; default to "off" 
 decrease last reference for triggering the cleanup 
 Returns ERR_PTR(), NULL or refcounted hwrng 
	
	  Hold rng_mutex here so we serialize in case they set_current_rng
	  on rng again immediately.
 enforce read-only access to this chrdev 
 rng_list is sorted by quality, use the best (=first) one 
 Outside lock, sure, but y'know: randomness. 
 Must not register two RNGs with the same name. 
 rng_list is sorted by decreasing quality 
		
		  Set new rng as current as the new rng source
		  provides better entropy quality and was not
		  chosen by userspace.
		 to use current_rng in add_early_randomness() we need
		  to take a ref
		
		  Use a new device's input to add some randomness to
		  the system.  If this rng device isn't going to be
		  used right away, its init function hasn't been
		  called yet by set_current_rng(); so only use the
		  randomness from devices that don't need an init callback
 kmalloc makes this safe for virt_to_page() in virtio_rng.c 
  RNG driver for TX4939 Random Number Generators (RNG)
  Copyright (C) 2009 Atsushi Nemoto <anemo@mba.ocn.ne.jp>
  This file is subject to the terms and conditions of the GNU General Public
  License.  See the file "COPYING" in the main directory of this archive
  for more details.
	
	  readq is reading a 64-bit register using a 64-bit load.  On
	  a 32-bit kernel however interrupts or any other processor
	  exception would clobber the upper 32-bit of the processor
	  register so interrupts need to be disabled.
 Start RNG 
 90 bus clock cycles by default for generation 
 Reset RNG 
 Start RNG 
	
	  Drop first two results.  From the datasheet:
	  The quality of the random numbers generated immediately
	  after reset can be insufficient.  Therefore, do not use
	  random numbers obtained from the first and second
	  generations; use the ones from the third or subsequent
	  generation.
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright 2013 Michael Ellerman, Guo Chao, IBM Corp.
 We rely on rng_buffer_size() being >= sizeof(unsigned long) 
 We only register one device, ignore any others 
 SPDX-License-Identifier: GPL-2.0
  driverscharhw_randomixp4xx-rng.c
  RNG driver for Intel IXP4xx family of NPUs
  Author: Deepak Saxena <dsaxena@plexity.net>
  Copyright 2005 (c) MontaVista Software, Inc.
  Fixes by Michael Buesch
 includes IXP455 
  RNG driver for VIA RNGs
  Copyright 2005 (c) MontaVista Software, Inc.
  with the majority of the code coming from:
  Hardware driver for the IntelAMDVIA Random Number Generators (RNG)
  (c) Copyright 2003 Red Hat Inc <jgarzik@redhat.com>
  derived from
  Hardware driver for the AMD 768 Random Number Generator (RNG)
  (c) Copyright 2001 Red Hat Inc
  derived from
  Hardware driver for Intel i810 Random Number Generator (RNG)
  Copyright 2000,2001 Jeff Garzik <jgarzik@pobox.com>
  Copyright 2000,2001 Philipp Rumpf <prumpf@mandrakesoft.com>
  This file is licensed under  the terms of the GNU General Public
  License version 2. This program is licensed "as is" without any
  warranty of any kind, whether express or implied.
 64 rand bits, 64 stored bits 
 32 rand bits, 32 stored bits 
 16 rand bits, 32 stored bits 
 8 rand bits, 32 stored bits 
  Investigate using the 'rep' prefix to obtain 32 bits of random data
  in one insn.  The upside is potentially better performance.  The
  downside is that the instruction becomes no longer atomic.  Due to
  this, just like familiar issues with devrandom itself, the worst
  case of a 'rep xstore' could potentially pause a cpu for an
  unreasonably long time.  In practice, this condition would likely
  only occur when the hardware is failing.  (or so we hope :))
  Another possible performance boost may come from simply buffering
  until we have 4 bytes, thus returning a u32 at a time,
  instead of the current u8-at-a-time.
  Padlock instructions can generate a spurious DNA fault, but the
  kernel doesn't use CR0.TS, so this doesn't matter.
 xstore %%edi (addr=%0) "
	 We choose the recommended 1-byte-per-instruction RNG rate,
	  for greater randomness at the expense of speed.  Larger
	  values 2, 4, or 8 bytes-per-instruction yield greater
	  speed at lesser randomness.
	 
	  If you change this to another VIA_CHUNK_n, you must also
	  change the ->n_bytes values in rng_vendor_ops[] tables.
	  VIA_CHUNK_8 requires further code changes.
	 
	  A copy of MSR_VIA_RNG is placed in eax_out when xstore
	  completes.
 paranoia, not really necessary 
	 VIA Nano CPUs don't have the MSR_VIA_RNG anymore.  The RNG
	  is always enabled if CPUID rng_en is set.  There is no
	  RNG configuration like it used to be the case in this
	 Control the RNG via MSR.  Tread lightly and pay very close
	  close attention to values written, as the reserved fields
	  are documented to be "undefined and unpredictable"; but it
	  does not say to write them as zero, so I make a guess that
	  we restore the values we find in the register.
 Enable secondary noise source on CPUs where it is present. 
 Nehemiah stepping 8 and higher 
 Esther 
	 perhaps-unnecessary sanity check; remove after testing if
 Copyright (C) 2015 Broadcom Corporation
 This program is free software; you can redistribute it andor
 modify it under the terms of the GNU General Public License as
 published by the Free Software Foundation version 2.
 This program is distributed "as is" WITHOUT ANY WARRANTY of any
 kind, whether express or implied; without even the implied warranty
 of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
  DESCRIPTION: The Broadcom iProc RNG200 Driver
 Registers 
 Clear all interrupt status 
 Reset RNG and RBG 
 Is RNG sane? If not, reset it. 
 Are there any random numbers available? 
 Buffer has room to store entire word 
 Buffer can only store partial word 
 Reset the IDLE timeout 
 Cannot wait, return immediately 
 Can wait, give others chance to run 
 Map peripheral 
 Register driver 
 SPDX-License-Identifier: GPL-2.0-only
  s390 TRNG device driver
  Driver for the TRNG (true random number generation) command
  available via CPACF extension MSA 7 on the s390 arch.
  Copyright IBM Corp. 2017
  Author(s): Harald Freudenberger <freude@de.ibm.com>
 trng related debug feature things 
 trng helpers 
 file io functions 
	
	  use buf for requests <= sizeof(buf),
	  otherwise allocate one page and fetch
	  pagewise.
 sysfs 
 hwrng_register 
  hwrng register struct
  The trng is supposed to have 100% entropy, and thus we register with a very
  high quality value. If we ever have a better driver in the future, we should
  change this value again when we merge this driver.
 init and exit 
 check if subfunction CPACF_PRNO_TRNG is available 
 SPDX-License-Identifier: GPL-2.0
  RNG driver for Exynos TRNGs
  Author: Łukasz Stelmach <l.stelmach@samsung.com>
  Copyright 2017 (c) Samsung Electronics Software, Inc.
  Based on the Exynos PRNG driver driverscryptoexynos-rng by
  Krzysztof Kozłowski <krzk@kernel.org>
	
	  For most TRNG circuits the clock frequency of under 500 kHz
	  is safe.
 Enable the generator. 
	
	  Disable post-processing. devhwrng is supposed to deliver
	  unprocessed data.
 smapi.c -- SMAPI interface routines
 Written By: Mike Sullivan IBM Corporation
 Copyright (C) 1999 IBM Corporation
 This program is free software; you can redistribute it andor modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 (at your option) any later version.
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 NO WARRANTY
 THE PROGRAM IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OR
 CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED INCLUDING, WITHOUT
 LIMITATION, ANY WARRANTIES OR CONDITIONS OF TITLE, NON-INFRINGEMENT,
 MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Each Recipient is
 solely responsible for determining the appropriateness of using and
 distributing the Program and assumes all risks associated with its
 exercise of rights under this Agreement, including but not limited to
 the risks and costs of program errors, damage to or loss of data,
 programs or equipment, and unavailability or interruption of operations.
 DISCLAIMER OF LIABILITY
 NEITHER RECIPIENT NOR ANY CONTRIBUTORS SHALL HAVE ANY LIABILITY FOR ANY
 DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 DAMAGES (INCLUDING WITHOUT LIMITATION LOST PROFITS), HOWEVER CAUSED AND
 ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
 TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
 USE OR DISTRIBUTION OF THE PROGRAM OR THE EXERCISE OF ANY RIGHTS GRANTED
 HEREUNDER, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES
 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 10232000 - Alpha Release
	First release to the public
 CMOS defines 
 check for illegal values 
 check for illegal values 
 Check serial port A 
 bRC == 0 
 serial port A is present 
 serial port is enabled 
 Check serial port B 
 bRC == 0 
 serial port B is present 
 serial port is enabled 
 Check IR port 
 bRC == 0 
 IR port not disabled 
 normal exit: 
 Message has already been printed 
  0  
SmapiQuerySystemID();
 mwavedd.c -- mwave device driver
 Written By: Mike Sullivan IBM Corporation
 Copyright (C) 1999 IBM Corporation
 This program is free software; you can redistribute it andor modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 (at your option) any later version.
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 NO WARRANTY
 THE PROGRAM IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OR
 CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED INCLUDING, WITHOUT
 LIMITATION, ANY WARRANTIES OR CONDITIONS OF TITLE, NON-INFRINGEMENT,
 MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Each Recipient is
 solely responsible for determining the appropriateness of using and
 distributing the Program and assumes all risks associated with its
 exercise of rights under this Agreement, including but not limited to
 the risks and costs of program errors, damage to or loss of data,
 programs or equipment, and unavailability or interruption of operations.
 DISCLAIMER OF LIABILITY
 NEITHER RECIPIENT NOR ANY CONTRIBUTORS SHALL HAVE ANY LIABILITY FOR ANY
 DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 DAMAGES (INCLUDING WITHOUT LIMITATION LOST PROFITS), HOWEVER CAUSED AND
 ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
 TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
 USE OR DISTRIBUTION OF THE PROGRAM OR THE EXERCISE OF ANY RIGHTS GRANTED
 HEREUNDER, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES
 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 10232000 - Alpha Release
	First release to the public
 These parameters support the setting of MWave resources. Note that no
 checks are made against other devices (ie. superio) for conflicts.
 We'll depend on users using the tpctl utility to do that for now
 check whether an event was signalled by 
 the interrupt handler while we were gone 
 first int has occurred (race condition) 
 first int has been handled 
 either 1st int has not yet occurred, or we have already handled the first int 
 switch 
 OK 
 switch 
 port is okay 
 OK 
 switch 
 irq is okay 
 totally b0rked 
  sysfs support <paulsch@us.ibm.com>
 Prevent code redundancy, create a macro for mwave_show_ functions. 
 All of our attributes are read attributes. 
 mwave_init is called on module load
 mwave_exit is called on module unload
 mwave_exit is also used to clean up after an aborted mwave_init
 no ints received yet 
 uart is registered 
 sysfs 
 SUCCESS! 
 clean up 
 3780i.c -- helper routines for the 3780i DSP
 Written By: Mike Sullivan IBM Corporation
 Copyright (C) 1999 IBM Corporation
 This program is free software; you can redistribute it andor modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 (at your option) any later version.
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 NO WARRANTY
 THE PROGRAM IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OR
 CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED INCLUDING, WITHOUT
 LIMITATION, ANY WARRANTIES OR CONDITIONS OF TITLE, NON-INFRINGEMENT,
 MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Each Recipient is
 solely responsible for determining the appropriateness of using and
 distributing the Program and assumes all risks associated with its
 exercise of rights under this Agreement, including but not limited to
 the risks and costs of program errors, damage to or loss of data,
 programs or equipment, and unavailability or interruption of operations.
 DISCLAIMER OF LIABILITY
 NEITHER RECIPIENT NOR ANY CONTRIBUTORS SHALL HAVE ANY LIABILITY FOR ANY
 DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 DAMAGES (INCLUDING WITHOUT LIMITATION LOST PROFITS), HOWEVER CAUSED AND
 ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
 TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
 USE OR DISTRIBUTION OF THE PROGRAM OR THE EXERCISE OF ANY RIGHTS GRANTED
 HEREUNDER, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES
 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 10232000 - Alpha Release
	First release to the public
 cond_resched() 
  0  
 Issue a soft reset to the chip 
	 Note: Since we may be coming in with 3780i clocks suspended, we must keep
	 soft-reset active for 10ms.
 Program our general configuration registers 
 Mask DSP to PC interrupt 
 Reset the core via the boot domain register 
 Reset all the chiplets and then reactivate them 
 Transition the core to a running state 
 Enable DSP to PC interrupt 
 Set the initial MSA address. No adjustments need to be made to data store addresses 
 Transfer the memory block 
 Set the initial MSA address. No adjustments need to be made to data store addresses 
 Transfer the memory block 
 Set the initial MSA address. No adjustments need to be made to data store addresses 
 Transfer the memory block 
	
	 Set the initial MSA address. To convert from an instruction store
	 address to an MSA address
	 shift the address two bits to the left and set bit 22
 Transfer the memory block 
	
	 Set the initial MSA address. To convert from an instruction store
	 address to an MSA address
	 shift the address two bits to the left and set bit 22
 Transfer the memory block 
	
	 Disable DSP to PC interrupts, read the interrupt register,
	 clear the pending IPC bits, and reenable DSP to PC interrupts
 tp3780i.c -- board driver for 3780i on ThinkPads
 Written By: Mike Sullivan IBM Corporation
 Copyright (C) 1999 IBM Corporation
 This program is free software; you can redistribute it andor modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2 of the License, or
 (at your option) any later version.
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 NO WARRANTY
 THE PROGRAM IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OR
 CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED INCLUDING, WITHOUT
 LIMITATION, ANY WARRANTIES OR CONDITIONS OF TITLE, NON-INFRINGEMENT,
 MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Each Recipient is
 solely responsible for determining the appropriateness of using and
 distributing the Program and assumes all risks associated with its
 exercise of rights under this Agreement, including but not limited to
 the risks and costs of program errors, damage to or loss of data,
 programs or equipment, and unavailability or interruption of operations.
 DISCLAIMER OF LIABILITY
 NEITHER RECIPIENT NOR ANY CONTRIBUTORS SHALL HAVE ANY LIABILITY FOR ANY
 DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 DAMAGES (INCLUDING WITHOUT LIMITATION LOST PROFITS), HOWEVER CAUSED AND
 ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
 TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
 USE OR DISTRIBUTION OF THE PROGRAM OR THE EXERCISE OF ANY RIGHTS GRANTED
 HEREUNDER, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES
 You should have received a copy of the GNU General Public License
 along with this program; if not, write to the Free Software
 Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 10232000 - Alpha Release
	First release to the public
 try next IPC 
 Sanity check 
 no conflict just release 
 @BUG @TBD EnableSRAM(pBDData);
 fill out standard constant fields 
 fill out dynamically determined fields 
 Fill out Mwave OS and BIOS task names 
  Transmeta's Efficeon AGPGART driver.
  Based upon a diff by Linus around November '02.
  Ported to the 2.6 kernel by Carlos Puchol <cpglinux@puchol.com>
  and H. Peter Anvin <hpa@transmeta.com>.
  NOTE-cpg-040217:
    - when compiled as a module, after loading the module,
      it will refuse to unload, indicating it is in use,
      when it is not.
    - no s3 (suspend to ram) testing.
    - tested on the efficeon integrated nothbridge for tens
      of iterations of starting x and glxgears.
    - tested with radeon 9000 and radeon mobility m9 cards
    - tested with c3c4 enabled (with the mobility m9 card)
  The real differences to the generic AGP code is
  in the GART mappings - a two-level setup with the
  first level being an on-chip 64-entry table.
  The page array is filled through the ATTPAGE register
  (Aperture Translation Table Page Register) at 0xB8. Bits:
   31:20: physical page address
    11:9: Page Attribute Table Index (PATI)
 	   must match the PAT index for the
 	   mapped pages (the 2nd level page table pages
 	   themselves should be just regular WB-cacheable,
 	   so this is normally zero.)
       8: Present
     7:6: reserved, write as zero
     5:0: GATT directory index: which 1st-level entry
  The Efficeon AGP spec requires pages to be WB-cacheable
  but to be explicitly CLFLUSH'd after any changes.
 Number of PDE pages 
 This function does the same thing as mask_memory() for this chipset... 
  Control interfaces are largely identical to
  the legacy Intel 440BX..
 aperture size 
 address to map to 
 agpctrl 
 paccfgnbxcfg 
 clear any possible error conditions 
  Since we don't need contiguous memory we just try
  to get the gatt table once
 There are 2^10 PTE pages per PDE page 
 clflush is slow, so don't clflush until we have to 
 Efficeon-specific GATT table setup  populate  teardown
 true might be faster?
 Generic
 Probe for Efficeon controller 
	
	 If the device has not been properly setup, the following will catch
	 the problem and should stop the system from crashing.
	 20030610 - hamish@zot.org
	
	 The following fixes the case where the BIOS has "forgotten" to
	 provide an address range for the GART.
	 20030610 - hamish@zot.org
 Fill in the mode register 
  Nvidia AGPGART routines.
  Based upon a 2.4 agpgart diff by the folks from NVIDIA, and hacked up
  to work in 2.5 by Dave Jones.
 NVIDIA registers 
 Find the iorr that is already used for the base 
 If not found, determine the uppermost available iorr 
 aperture size 
 address to map to 
 directory size is 64k 
 attbase 
 gtlb control 
 gart control 
 map aperture 
 gart control 
 gtlb control 
 unmap aperture 
 restore previous aperture size 
 restore iorr for previous aperture size 
  Note we can't use the generic routines, even though they are 99% the same.
  Aperture sizes <64M still requires a full 64k GART directory, but
  only use the portion of the TLB entries that correspond to the apertures
  alignment inside the surrounding 64M block.
 PCI Posting. 
 flush chipset 
 flush TLB entries 
 The 32M mode still requires a 64k gatt 
 Fill in the mode register 
 set power state 0 and restore PCI space 
 reconfigure AGP hardware again 
 SPDX-License-Identifier: GPL-2.0-only
  VIA AGPGART routines.
 aperture size 
 address to map to 
 GART control register 
 attbase - aperture GATT base 
	 Do not disable by writing 0 to VIA_ATTBASE, it screws things up
	  during reinitialization.
 address to map to 
 attbase - aperture GATT base 
	 1. Enable GTLB in RX90<7>, all AGP aperture access needs to fetch
	     translation table first.
	  2. Enable AGP aperture in RX91<0>. This bit controls the enabling of the
	     graphics AGP aperture for the AGP3.0 port.
 VT8601 
 VT82C693A  VT28C694T 
 VT8633 
 VT8361 
 VT8365  VT8362 
 VT8753A 
 VT8366 
 VT8633 (for CuMine Celeron) 
 KM266  PM266 
 CLE266 
	 VT8604  VT8605  VT8603
 P4M266xP4N266 
 VT8754 
 P4X600 
 KM400 
 PT880 
 PT880 Ultra 
 PT890 
 PM800PN800PM880PN880 
 KT880 
 KTxxxPx8xx 
 P4M800 
 P4M800CE 
 VT3324  CX700 
	 VT3336 - this is a chipset for AMD AthlonK8 CPU. Due to K8's unique
	  architecture, the AGP resource and behavior are different from
	  the traditional AGP which resides only in chipset. AGP is used
	  by 3D driver which wasn't available for the VT3336 and VT3364
	  generation until now.  Unfortunately, by testing, VT3364 works
	  but VT3336 doesn't. - explanation from via, just leave this as
	  as a placeholder to avoid future patches adding it back in.
 P4M890 
 P4M900 
 dummy final entry, always present 
  VIA's AGP3 chipsets do magick to put the AGP bridge compliant
  with the same standards version as the graphics card.
 Check AGP 2.0 compatibility mode. 
	
	  Garg, there are KT400s with KT266 IDs.
 Is there a KT400 subsystem ? 
 If this is an AGP3 bridge, check which mode its in and adjust. 
 Fill in the mode register 
 CONFIG_PM 
 must be the same order as name table above 
  ALi AGPGART routines.
 PAGE_SIZE 
 clear tag
 aperture size and gatt addr 
 tlb control 
 address to map to 
enable TLB
 is this really needed?  --hch 
 Setup function 
 dummy final entry, always present 
 probe for known chipsets 
 Fill in the mode register 
 SPDX-License-Identifier: GPL-2.0
  Setup routines for AGP 3.5 compliant bridges.
 Generic AGP 3.5 enabling routines 
  Initialize all isochronous transfer parameters for an AGP 3.0
  node (i.e. a host bridge in combination with the adapters
  lying behind it...)
	
	  Convenience structure to make the calculations clearer
	  here.  The field names come straight from the AGP 3.0 spec.
	
	  We'll work with an array of isoch_data's (one for each
	  device in dev_list) throughout this function.
	
	  Sort the device list by maxbw.  We need to do this because the
	  spec suggests that the devices with the smallest requirements
	  have their resources allocated first, with all remaining resources
	  falling to the device with the largest requirement.
	 
	  We don't exactly do this, we divide target resources by ndevs
	  and split them amongst the AGP 3.0 devices.  The remainder of such
	  division operations are dropped on the last device, sort of like
	  the spec mentions it should be done.
	 
	  We can't do this sort when we initially construct the dev_list
	  because we don't know until this function whether isochronous
	  transfers are enabled and consequently whether maxbw will mean
	  anything.
 Extract power-on defaults from the target 
	
	  Extract power-on defaults for each device in dev_list.  Along
	  the way, calculate the total isochronous bandwidth required
	  by these devices and the largest requested payload size.
 Check if this configuration has any chance of working 
	
	  Write the calculated payload size into the target's NICMD
	  register.  Doing this directly effects the ISOCH_N value
	  in the target's NISTAT register, so we need to do this now
	  to get an accurate value for ISOCH_N later.
 Reread the target's ISOCH_N 
 Calculate the minimum ISOCH_N needed by each master 
	 Exit if the minimal ISOCH_N allocation among the masters is more
	 Calculate left over ISOCH_N capability in the target.  We'll give
	
	  Calculate the minimum isochronous RQ depth needed by each master.
	  Along the way, distribute the extra ISOCH_N capability calculated
	  above.
		
		  This is a little subtle.  If ISOCH_Y > 64B, then ISOCH_Y
		  byte isochronous writes will be broken into 64B pieces.
		  This means we need to budget more RQ depth to account for
		  these kind of writes (each isochronous write is actually
		  many writes on the AGP bus).
	 Figure the number of isochronous and asynchronous RQ slots the
	 Exit if the minimal RQ needs of the masters exceeds what the target
	 Calculate asynchronous RQ capability in the target (per master) as
	 Distribute the extra RQ slots calculated above and write our
  This function basically allocates request queue slots among the
  AGP 3.0 systems in nonisochronous nodes.  The algorithm is
  pretty stupid, divide the total number of RQ slots provided by the
  target by ndevs.  Distribute this many slots to each AGP 3.0 device,
  giving any left over slots to the last device in dev_list.
  Fully configure and enable an AGP 3.0 host bridge and all the devices
  lying behind it.
 Extract some power-on defaults from the target 
 isoch xfers not available, bail out. 
	
	  Allocate a head for our AGP 3.5 device list
	  (multiple AGP v3 devices are allowed behind a single bridge).
 Find all AGP devices, and add them to dev_list. 
 Bridge 
 Skip bridges. We should call this function for each one. 
 Unclassified device 
 Don't know what this is, but log it for investigation. 
 Display controller 
 Multimedia controller 
	
	  Take an initial pass through the devices lying behind our host
	  bridge.  Make sure each one is actually an AGP 3.0 device, otherwise
	  exit with an error message.  Along the way store the AGP 3.0
	  cap_ptr for each device
	
	  Call functions to divide target resources amongst the AGP 3.0
	  masters.  This process is dramatically different depending on
	  whether isochronous transfers are supported.
 Be sure to free the dev_list 
  AGPGART driver frontend compatibility ioctls
  Copyright (C) 2004 Silicon Graphics, Inc.
  Copyright (C) 2002-2003 Dave Jones
  Copyright (C) 1999 Jeff Hartmann
  Copyright (C) 1999 Precision Insight, Inc.
  Copyright (C) 1999 Xi Graphics, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included
  in all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  JEFF HARTMANN, OR ANY OTHER CONTRIBUTORS BE LIABLE FOR ANY CLAIM,
  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
  OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 remove a client 
 client is already removed 
 Create the client and add the segment 
 Will never really happen 
		 Use the original pid of the controller,
  AGPGART driver.
  Copyright (C) 2004 Silicon Graphics, Inc.
  Copyright (C) 2002-2005 Dave Jones.
  Copyright (C) 1999 Jeff Hartmann.
  Copyright (C) 1999 Precision Insight, Inc.
  Copyright (C) 1999 Xi Graphics, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included
  in all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  JEFF HARTMANN, OR ANY OTHER CONTRIBUTORS BE LIABLE FOR ANY CLAIM,
  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
  OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  TODO:
  - Allocate more than order 0 pages to avoid too much linear map splitting.
  Needed by the Nforce GART driver for the time being. Would be
  nice to do this some other way instead of needing this export.
  Generic routines for handling agp_memory structures -
  They use the basic page allocation routines to do the brunt of the work.
  Use kmalloc if possible for the page list. Otherwise fall back to
  vmalloc. This speeds things up and also saves memory for small AGP
  regions.
 	agp_free_memory - free memory associated with an agp_memory pointer.
 	@curr:		agp_memory pointer to be freed.
 	It is the only function that can be called when the backend is not owned
 	by the caller.  (So it can free memory on client death.)
 	agp_allocate_memory  -  allocate a group of pages of a certain type.
 	@bridge: an agp_bridge_data struct allocated for the AGP host bridge.
 	@page_count:	size_t argument of the number of pages
 	@type:	u32 argument of the type of memory to be allocated.
 	Every agp bridge device will allow you to allocate AGP_NORMAL_MEMORY which
 	maps to physical ram.  Any other type is device dependent.
 	It returns NULL whenever memory is unavailable.
 End - Generic routines for handling agp_memory structures 
 	agp_copy_info  -  copy bridge state information
 	@bridge: an agp_bridge_data struct allocated for the AGP host bridge.
 	@info:		agp_kern_info pointer.  The caller should insure that this pointer is valid.
 	This function copies information about the agp bridge device and the state of
 	the agp backend into an agp_kern_info pointer.
 End - Routine to copy over information structure 
  Routines for handling swapping of agp_memory into the GATT -
  These routines take agp_memory and insert them into the GATT.
  They call device specific routines to actually write to the GATT.
 	agp_bind_memory  -  Bind an agp_memory structure into the GATT.
 	@curr:		agp_memory pointer
 	@pg_start:	an offset into the graphics aperture translation table
 	It returns -EINVAL if the pointer == NULL.
 	It returns -EBUSY if the area of the table requested is already in use.
 	agp_unbind_memory  -  Removes an agp_memory structure from the GATT
  @curr:	agp_memory pointer to be removed from the GATT.
  It returns -EINVAL if this piece of agp_memory is not currently bound to
  the graphics aperture translation table or if the agp_memory pointer == NULL
 End - Routines for handling swapping of agp_memory into the GATT 
 Generic Agp routines - Start 
	
	  Some dumb bridges are programmed to disobey the AGP2 spec.
	  This is likely a BIOS misprogramming rather than poweron default, or
	  it would be a lot more common.
	  https:bugs.freedesktop.orgshow_bug.cgi?id=8816
	  AGPv2 spec 6.1.9 states:
	    The RATE field indicates the data transfer rates supported by this
	    device. A.G.P. devices must report all that apply.
	  Fix them up as best we can.
 Check the speed bits make sense. Only one should be set. 
 rate=2 
 rate=4
 disable SBA if it's not supported 
 Set rate 
 Now we know what mode it should be, clear out the unwanted bits. 
 4X 
 2X 
 1X 
 Apply any errata. 
 If we've dropped down to 1X, disable fast writes. 
  requested_mode = Mode requested by (typically) X.
  bridge_agpstat = PCI_AGP_STATUS from agp bridge.
  vga_agpstat = PCI_AGP_STATUS from graphic card.
 Check the speed bits make sense. 
	 ARQSZ - Set the value to the maximum one.
	 Calibration cycle.
 SBA must be supported for AGP v3 
	
	  Set speed.
	  Check for invalid speeds. This can happen when applications
	  written before the AGP 3.0 standard pass AGP2.x modes to AGP3 hardware
		
		  Caller hasn't a clue what it is doing. Bridge is in 3.0 mode,
		  have been passed a 3.0 mode, but with 2.x speed bits set.
		  AGP2.x 4x -> AGP3.0 4x.
		
		  The caller doesn't know what they are doing. We are in 3.0 mode,
		  but have been passed an AGP 2.x mode.
		  Convert AGP 1x,2x,4x -> AGP 3.0 4x.
 All set, bridge & device can do AGP x8
		
		  If we didn't specify an AGP mode, we see if both
		  the graphics card, and the bridge can do x8, and use if so.
		  If not, we fall back to x4 mode.
 Apply any errata. 
  agp_collect_device_status - determine correct agp_cmd from various agp_stat's
  @bridge: an agp_bridge_data struct allocated for the AGP host bridge.
  @requested_mode: requested agp_stat from userspace (Typically from X)
  @bridge_agpstat: current agp_stat from AGP bridge.
  This function will hunt for an AGP graphics card, and try to match
  the requested mode to the capabilities of both the bridge and the card.
	
	  Ok, here we have a AGP device. Disable impossible
	  settings, and adjust the readqueue to the minimum.
 adjust RQ depth 
 disable FW if it's not supported 
 Check to see if we are operating in 3.0 mode 
 Exit early if already set by errata workarounds. 
 Something bad happened. FIXME: Return error code? 
 Do AGP version specific frobbing. 
 If we have 3.5, we can do the isoch stuff. 
 Disable calibration cycle in RX91<1> when not in AGP3.0 mode of operation.
 AGP v<3 
 The generic routines can't handle 2 level gatt's 
 This case will never really happen. 
 These cases will never really happen. 
 AK: bogus, should encode addresses > 4GB 
 PCI Posting. 
 The generic routines can't deal with 2 level gatt's 
	 Do not worry about freeing memory, because if this is
	  called, then all agp memory is deallocated and removed
 The generic routines can't deal with 2 level gatt's 
 The generic routines know nothing of memory types 
 PCI Posting. 
 The generic routines know nothing of memory types 
 AK: bogus, should encode addresses > 4GB 
 PCI Posting. 
  Basic Page Allocation Routines -
  These routines handle page allocation and by default they reserve the allocated
  memory.  They also handle incrementing the current_memory_agp value, Which is checked
  against a maximum value.
 agp_free_memory() needs gart address 
 End Basic Page Allocation Routines 
  agp_enable  -  initialise the agp point-to-point connection.
  @bridge: an agp_bridge_data struct allocated for the AGP host bridge.
  @mode:	agp mode register value to configure with.
 When we remove the global variable agp_bridge from all drivers
  then agp_alloc_bridge and agp_generic_find_bridge need to be updated
 memory type is ignored in the generic routine 
  These functions are implemented according to the AGPv3 spec,
  which covers implementation details that had previously been
  left open.
 set aperture size 
 set gart pointer 
 enable aperture and GTLB 
  For documentation on the i460 AGP interface, see Chapter 7 (AGP Subsystem) of
  the "Intel 460GTX Chipset Software Developer's Manual":
  http:www.intel.comdesignarchivesitaniumdownloads248704.htm 
  460GX support by Chris Ahna <christopher.j.ahna@intel.com>
  Clean up & simplification by David Mosberger-Tang <davidm@hpl.hp.com>
  The i460 can operate with large (4MB) pages, but there is no sane way to support this
  within the current kernelDRM environment, so we disable the relevant code for now.
  See also comments in ia64_alloc_page()...
 Control bits for Out-Of-GART coherency and Burst Write Combining 
  gatt_table entries are 32-bits wide on the i460; the generic code ought to declare the
  gatt_table and gatt_table_real pointers a "void "...
  The 460 spec says we have to read the last location written to make sure that all
  writes have taken effect
 ioremap'd GATT area 
 i460 supports multiple GART page sizes, so GART pageshift is dynamic: 
 BIOS configures chipset to one of 2 possible apbase values: 
 structure for tracking partial use of 4MB GART pages: 
 bitmap of kernel-pages in use 
 number of kernel pages using the large page 
 physical address of large page 
 page pointer 
	
	  The 32GB aperture is only available with a 4M GART page size.  Due to the
	  dynamic GART page size, we can't figure out page_order or num_entries until
	  runtime.
 Determine the GART page size 
 Exit now if the IO drivers for the GART SRAMS are turned off 
 Make sure we don't try to create an 2 ^ 23 entry GATT 
 Determine the proper APBASE register 
		
		  Dynamically calculate the proper num_entries and page_order values for
		  the define aperture sizes. Take care not to shift off the end of
		  values[i].size.
 Neglect control bits when matching up size_value 
 There isn't anything to do here since 460 has no GART TLB. 
  This utility function is needed to prevent corruption of the control bits
  which are stored along with the aperture size in 460's AGPSIZ register
	
	  Do the necessary rigmarole to read all eight bytes of APBASE.
	  This has to be done since the AGP aperture can be above 4GB on
	  460 based systems.
 Clear BAR control bits 
	
	  Initialize partial allocation trackers if a GART page is bigger than a kernel
	  page.
	
	  Load up the fixed address of the GART SRAMS which hold our GATT table.
 These are no good, the should be removed from the agp_bridge strucure... 
  The following functions are called when the IO (GART) page size is smaller than
  PAGE_SIZE.
  These functions are called when the IO (GART) page size exceeds PAGE_SIZE.
  This situation is interesting since AGP memory allocations that are smaller than a
  single GART page are possible.  The i460.lp_desc array tracks partial allocation of the
  large GART pages to work around this issue.
  i460.lp_desc[pg_num].refcount tracks the number of kernel pages in use within GART page
  pg_num.  i460.lp_desc[pg_num].paddr is the physical address of the large page and
  i460.lp_desc[pg_num].alloced_map is a bitmap of kernel pages that are in use (allocated).
 Figure out what pg_start means in terms of our large GART pages 
 Check if the requested region of the aperture is free 
 OK, the entire large page is available... 
 Allocate new GART pages... 
 Figure out what pg_start means in terms of our large GART pages 
 Free GART pages if they are unused 
 Wrapper routines to call the approriate {small_io_page,large_io_page} function 
  If the IO (GART) page size is bigger than the kernel page size, we don't want to
  allocate memory until we know where it is to be bound in the aperture (a
  multi-kernel-page alloc might fit inside of an already allocated GART page).
  Let's just hope nobody counts on the allocated AGP memory being there before bind time
  (I don't think current drivers do)...
 Returning NULL would cause problems 
 AK: really dubious code. 
 I460_LARGE_IO_PAGES 
 Make sure the returned address is a valid GATT entry 
  ATi AGPGART routines.
 PCI Posting. 
 PCI Posting. 
 Write back the previous size and disable gart translation 
 Get the memory mapped registers 
 address to map to 
	
	agp_bridge.gart_bus_addr = pci_bus_address(agp_bridge.dev,
						   AGP_APERTURE_BAR);
	printk(KERN_INFO PFX "IGP320 gart_bus_addr: %x\n", agp_bridge.gart_bus_addr);
 PCI Posting.
 SIGNALED_SYSTEM_ERROR @ NB_STATUS 
 Write out the address of the gatt table 
 PCI Posting. 
 Since we don't need contiguous memory we just try
  to get the gatt table once
CACHE_FLUSH(); 
 PCI posting 
 PCI posting 
 Write out the size register 
	
	  Get the address for the gart region.
	  This is a bus address even on the alpha, bc its
	  used to program the agp master not the cpu
 Calculate the agp offset 
 PCI Posting. 
 dummy final entry, always present 
 probe for known chipsets 
 Fill in the mode register 
  AGPGART driver backend routines.
  Copyright (C) 2004 Silicon Graphics, Inc.
  Copyright (C) 2002-2003 Dave Jones.
  Copyright (C) 1999 Jeff Hartmann.
  Copyright (C) 1999 Precision Insight, Inc.
  Copyright (C) 1999 Xi Graphics, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included
  in all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  JEFF HARTMANN, DAVE JONES, OR ANY OTHER CONTRIBUTORS BE LIABLE FOR ANY CLAIM,
  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
  OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  TODO:
  - Allocate more than order 0 pages to avoid too much linear map splitting.
 Due to XFree86 brain-damage, we can't go to 1.0 until they
  fix some real stupidity. It's only by chance we can bump
 	agp_backend_acquire  -  attempt to acquire an agp backend.
 	agp_backend_release  -  release the lock on the agp backend.
 	The caller must insure that the graphics aperture translation table
 	is read for use by another entity.
 	(Ensure that all memory it bound is unbound.)
 FIXME vmalloc'd memory not guaranteed contiguous 
 cannot be __exit bc as it could be called from __init code 
 When we remove the global variable agp_bridge from all drivers
  then agp_alloc_bridge and agp_generic_find_bridge need to be updated
 Grab reference on the chipset driver. 
  AGPGART driver frontend
  Copyright (C) 2004 Silicon Graphics, Inc.
  Copyright (C) 2002-2003 Dave Jones
  Copyright (C) 1999 Jeff Hartmann
  Copyright (C) 1999 Precision Insight, Inc.
  Copyright (C) 1999 Xi Graphics, Inc.
  Permission is hereby granted, free of charge, to any person obtaining a
  copy of this software and associated documentation files (the "Software"),
  to deal in the Software without restriction, including without limitation
  the rights to use, copy, modify, merge, publish, distribute, sublicense,
  andor sell copies of the Software, and to permit persons to whom the
  Software is furnished to do so, subject to the following conditions:
  The above copyright notice and this permission notice shall be included
  in all copies or substantial portions of the Software.
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
  JEFF HARTMANN, OR ANY OTHER CONTRIBUTORS BE LIABLE FOR ANY CLAIM,
  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
  OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 Check to see if this is even in the memory pool 
 This is the first item on the list 
  Routines for managing each client's segment list -
  These routines handle adding and removing segments
  to each auth'ed client.
 End - Routines for managing each client's segment list 
 This function must only be called when current_controller != NULL 
 File private list routines 
 End - File flag list routines 
  Wrappers for agp_free_memory & agp_allocate_memory
  These make sure that internal lists are kept updated.
 Routines for managing the list of controllers -
  These routines manage the current controller, and the list of
  controllers
  Routines for managing client lists -
  These routines are for managing the list of auth'ed clients.
 End - Routines for managing client lists 
 File Operations 
 Root priv, can be controller 
 remove a client 
 client is already removed 
 Create the client and add the segment 
 Will never really happen 
 This function is not currently implemented 
		 Use the original pid of the controller,
  Serverworks AGPGART routines.
 Memory mapped registers 
 device one 
 Red Pen: Everyone else does pci posting flush here 
 Create a fake scratch directory 
	 Get the address for the gart region.
	  This is a bus address even on the alpha, bc its
	  used to program the agp master not the cpu
 Calculate the agp offset 
  This routine could be implemented by taking the addresses
  written to the GATT, and flushing them individually.  However
  currently it just flushes the whole table.  Which is probably
  more efficient, since agp_memory blocks can be a large number of
  entries.
 Get the memory mapped registers 
 PCI Posting. 
 PCI Posting. 
 Agp Enable bit 
 Fill in the mode register 
 disable FW 
 Everything is on func 1 here so we are hardcoding function one 
  SiS AGPGART routines.
		
		  Weird: on some sis chipsets any rate change in the target
		  command register triggers a 5ms screwup during which the master
		  cannot be configured
 chipsets that require the 'delay hack'
 terminator
 sis chipsets that indicate less than agp3.5
 are not actually fully agp3 compliant
 Fill in the mode register 
 CONFIG_PM 
  Intel AGPGART routines.
	 Intel 815 chipsets have a _weird_ APSIZE register with only
 aperture size 
 address to map to 
 attbase - aperture base 
 agpctrl 
 paccfgnbxcfg 
 clear any possible error conditions 
 attbase - aperture base 
	 the Intel 815 chipset spec. says that bits 29-31 in the
 aperture size 
 address to map to 
 agpctrl 
 apcont 
 clear any possible error conditions 
 Oddness : this chipset seems to have no ERRSTS register ! 
 aperture size 
 address to map to 
 attbase - aperture base 
 agpctrl 
 global enable aperture access 
 This flag is not accessed through MCHCFG register as in 
 i850 chipset. 
 clear any possible AGP-related error conditions 
 aperture size 
 address to map to 
 attbase - aperture base 
 agpctrl 
 mcgcfg 
 clear any possible error conditions 
 aperture size 
 address to map to 
 attbase - aperture base 
 agpctrl 
 agpm 
 clear any possible error conditions 
 aperture size 
 address to map to 
 attbase - aperture base 
 agpctrl 
 mcgcfg 
 clear any possible AGP-related error conditions 
 aperture size 
 address to map to 
 attbase - aperture base 
 agpctrl 
 mcgcfg 
 clear any possible AGP-related error conditions 
 aperture size 
 address to map to 
 attbase - aperture base 
 agpctrl 
 gmch 
 clear any possible AGP-related error conditions 
 aperture size 
 address to map to 
 attbase - aperture base 
 agpctrl 
 mchcfg 
 Setup function 
 Table to describe Intel GMCH and AGPPCIE GART drivers.  At least one of
  driver and gmch_driver must be non-null, and find_gmch will determine
  which one should be used if a gmch_chip_id is present.
		 In case that multiple models of gfx chip may
		   stand on same host bridge type, this can be
	
	 The following fixes the case where the BIOS has "forgotten" to
	 provide an address range for the GART.
	 20030610 - hamish@zot.org
	 This happens before pci_enable_device() intentionally;
	 calling pci_enable_device() before assigning the resource
	 will result in the GART being disabled on machines with such
	 BIOSs (the GART ends up with a BAR starting at 0, which
	 conflicts a lot of other devices).
	
	 If the device has not been properly setup, the following will catch
	 the problem and should stop the system from crashing.
	 20030610 - hamish@zot.org
 Fill in the mode register 
 for HAS2 support 
 SPDX-License-Identifier: GPL-2.0-only
  HP zx1 AGPGART routines.
  (c) Copyright 2002, 2003 Hewlett-Packard Development Company, L.P.
 	Bjorn Helgaas <bjorn.helgaas@hp.com>
 ACPI reports SBA, we want IOC 
 HP ZX1 IOC registers 
 AGP bridge need not be PCI device, but DRM thinks it is. 
 filled in by hp_zx1_fetch_size() 
 PDIR for entire IOVA
 PDIR just for GART (subset of above)
 do we own it, or share it with sba_iommu?
 IOC ps config
	
	  IOC already configured by sba_iommu module; just use
	  its setup.  We assume:
	 	- IOVA space is 1Gb in size
	 	- first 512Mb is IOMMU, second 512Mb is GART
 Normal case when no AGP device in system 
	
	  Select an IOV page size no larger than system page size.
	
	  If the IOTLB is currently disabled, we can take it over.
	  Otherwise, we have to share with sba_iommu.
 keep looking for another bridge 
 Look for an enclosing IOC scope and find its CSR space 
 TBD check _CID also 
 found no enclosing IOC 
 we only support one bridge; quit looking 
  AMD K7 AGPGART routines.
 In mmio region (16-bit register) 
 In mmio region (32-bit register) 
 In mmio region (32-bit register) 
 In mmio region (32-bit register) 
 PCI Posting. 
 Since we don't need contiguous memory we just try
  to get the gatt table once
	 Get the address for the gart region.
	  This is a bus address even on the alpha, bc its
	  used to program the agp master not the cpu
 Calculate the agp offset 
 PCI Posting. 
 PCI Posting. 
 Get the memory mapped registers 
 Write out the address of the gatt table 
 PCI Posting. 
 Write the Sync register 
 Set indexing mode 
 Write the enable register 
 PCI Posting. 
 Write out the size register 
 Flush the tlb 
 PCI Posting.
 PCI Posting. 
 Write back the previous size and disable gart translation 
  This routine could be implemented by taking the addresses
  written to the GATT, and flushing them individually.  However
  currently it just flushes the whole table.  Which is probably
  more efficient, since agp_memory blocks can be a large number of
  entries.
 PCI Posting. 
 PCI Posting. 
 PCI Posting. 
 dummy final entry, always present 
	 751 Errata (22564_B-1.PDF)
	   erratum 20: strobe glitch with Nvidia NV10 GeForce cards.
	   system controller may experience noise due to strong drive strengths
		 With so many variants of NVidia cards, it's simpler just
		   to blacklist them all, and then whitelist them as needed
	 761 Errata (23613_F.pdf)
	  Revisions B0B1 were a disaster.
	  erratum 44: SYSCLKAGPCLK skew causes 2X failures -- Force mode to 1X
	  erratum 45: Timing problem prevents fast writes -- Disable fast write.
	  erratum 46: Setup violation on AGP SBA pins - Disable side band addressing.
 Fill in the mode register 
 CONFIG_PM 
 must be the same order as name table above 
 SPDX-License-Identifier: GPL-2.0-only
  HP Quicksilver AGP GART routines
  Copyright (c) 2006, Kyle McMartin <kyle@parisc-linux.org>
  Based on driverscharagpgarthp-agp.c which is
  (c) Copyright 2002, 2003 Hewlett-Packard Development Company, L.P.
 	Bjorn Helgaas <bjorn.helgaas@hp.com>
 filled in by parisc_agp_fetch_size() 
 flush 
 Find our parent Pluto 
 Now search our Pluto for our precious AGP device... 
 w00t, let's go find our cookies... 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright 2001-2003 SuSE Labs.
  Distributed under the GNU public license, v2.
  This is a GART driver for the AMD OpteronAthlon64 on-CPU northbridge.
  It also includes support for the AMD 8151 AGP bridge,
  although it doesn't actually do much, as all the real
  work is done in the northbridge(s).
 PAGE_SIZE 
 NVIDIA K8 registers 
 ULi K8 registers 
 Make sure we can fit the range in the gatt table. 
 FIXME: could wrap 
 gatt table should be empty. 
 PCI Posting. 
  This hack alters the order element according
  to the size of a long. It sucks. I totally disown this, even
  though it does appear to work for the most part.
  Get the current Aperture size from the x86-64.
  Note, that there may be multiple x86-64's, but we just return
  the value from the first one we find. The set_size functions
  keep the rest coherent anyway. Or at least should do.
  In a multiprocessor x86-64 system, this function gets
  called once for each CPU.
 Address to map to 
 0 0 0 0 0 0 
 1 0 0 0 0 0 
 1 1 0 0 0 0 
 1 1 1 0 0 0 
 1 1 1 1 0 0 
 1 1 1 1 1 0 
 1 1 1 1 1 1 
 Configure AGP regs in each x86-64 host bridge. 
 disable gart translation 
 Some basic sanity checks for the aperture. 
	 Request the Aperture. This catches cases when someone else
	   already put a mapping in there - happens with some very broken BIOS
	   Maybe better to use pci_assign_resourcepci_enable_device instead
  Ws centric BIOS sometimes only set up the aperture in the AGP
  bridge, not the northbridge. On AMD64 this is handled early
  in aperture.c, but when IOMMU is not enabled or we run
  on a 32bit kernel this needs to be redone.
  Unfortunately it is impossible to fix the aperture here because it's too late
  to allocate that much memory. But at least error out cleanly instead of
  crashing.
 Northbridge seems to contain crap. Try the AGP bridge. 
 Some BIOS use weird encodings not in the AGPv3 table. 
	
	  On some sick chips APSIZE is 0. This means it wants 4G
	  so let double check that order, and lets trust the AMD NB settings
 should port this to i386 
 Handle AMD 8151 quirks 
	
	  Work around errata.
	  Chips before B2 stepping incorrectly reporting v3.5
 shadow x86-64 registers into ULi registers 
 if x86-64 aperture base is beyond 4G, exit here 
 Handle shadow device of the Nvidia NForce3 
 CHECK-ME original 2.4 version set up some IORRs. Check if that is needed. 
 shadow x86-64 registers into NVIDIA registers 
 if x86-64 aperture base is beyond 4G, exit here 
 The Highlander principle 
 Could check for AGPv3 here 
 Fill in the mode register 
 CONFIG_PM 
 ULi M1689 
 VIA K8T800Pro 
 VIA K8T800 
 VIA K8M800  K8N800 
 VIA K8M890  K8N890 
 VIA K8T890 
 VIA K8T800K8M800K8N800 
 NForce3 
 SIS 755 
 SIS 760 
 ALIULI M1695 
 Not static due to IOMMU code calling it early. 
 First check that we have at least one AMD64 NB 
 Look for any AGP bridge 
 SPDX-License-Identifier: GPL-2.0-only
  UniNorth AGPGART routines.
  NOTES for uninorth3 (G5 AGP) supports :
  There maybe also possibility to have bigger cache line size for
  agp (see pmac_pci.c and look for cache line). Need to be investigated
  by someone.
  PAGE size are hardcoded but this may change, see asmpage.h.
  Jerome Glisse <j.glisse@gmail.com>
 aperture size and gatt addr 
	 HACK ALERT
	  UniNorth seem to be buggy enough not to handle properly when
	  the AGP aperture isn't mapped at bus physical address 0
 Assume U3 or later on PPC64 systems 
 high 4 bits of GART physical address go in UNI_N_CFG_AGP_BASE 
 We know nothing of memory types 
 We know nothing of memory types 
		
		  Darwin disable AGP 4x on this revision, thus we
		  may assume it's broken. This is an AGP2 controller.
		
		  We need to set REQ_DEPTH to 7 for U3 versions 1.0, 2.1,
		  2.2 and 2.3, Darwin do so.
 This is an AGP V3 
 AGP V2 
  These Power Management routines are _not_ called by the normal PCI PM layer,
  but directly by the video driver through function pointers in the device
  tree.
 Only one suspend supported 
 turn off AGP on the video chip, if it was enabled 
 Don't touch the bridge yet, device first 
		 Only deal with devices on the same bus here, no Mac has a P2P
		  bridge on the AGP port, and mucking around the entire PCI
		  tree is source of problems on some machines because of a bug
		  in some versions of pci_find_capability() when hitting a dead
		  device
 turn off AGP on the bridge 
 turn off the GART 
 CONFIG_PM 
 We can't handle 2 level gatt's 
 Need to clear out any dirty data still sitting in caches 
	 Do not worry about freeing memory, because if this is
	  called, then all agp memory is deallocated and removed
	  from the table.
 Setup function 
  Not sure that u3 supports that high aperture sizes but it
  would strange if it did not :)
 probe for known chipsets 
 Set revision to 0 if we could not read it. 
 Locate core99 Uni-N 
 Locate G5 u3 
 Inform platform of our suspendresume caps 
 Allocate & setup our driver 
 Fill in the mode register 
 Inform platform of our suspendresume caps 
 no translation 
	
	  Get the page, inc the use count, and return it
 filled in by alpha_core_agp_setup 
 faked 
	
	  Build the aperture size descriptor
	
	  Build a fake pci_dev struct
 only 1 size 
  Intel GTT (Graphics Translation Table) routines
  Caveat: This driver implements the linux agp interface, but this is far from
  a agp driver! GTT support ended up here for purely historical reasons: The
  old userspace intel graphics drivers needed an interface to map memory into
  the GTT. And the drm provides a default interface for graphic devices sitting
  on an agp port. So it made sense to fake the GTT support as an agp port to
  avoid having to create a new api.
  With gem this does not make much sense anymore, just needlessly complicates
  the code. But as long as the old graphics stack is still support, it's stuck
  here.
  fairy-tale-mode off
  If we have Intel graphics, we're not going to have anything other than
  an Intel IOMMU. So make the correct use of the PCI DMA API contingent
  on the Intel IOMMU support (CONFIG_INTEL_IOMMU).
  Only newer chipsets need to bother with this, of course.
 Chipset specific GTT setup 
	 This should undo anything done in ->setup() save the unmapping
	 Flags is a more or less chipset specific opaque value.
	  For chipsets that need to support old ums (non-gem) code, this
 device one 
 I915G 
 on first access via agp, fill with scratch 
 Whether i915 needs to use the dmar apis or not. 
  Size of memory reserved for graphics by the BIOS 
 Total number of gtt entries. 
	 Part of the gtt that is mappable by the cpu, for those chips where
 Exists to support ARGB cursors 
 i81x does not preallocate the gtt. It's always 64kb in size. 
  The i810i830 requires a physical address to program its mouse
  pointer into hardware.
  However the Xserver still writes to it through the agp aperture.
 kludge to get 4 physical pages for ARGB cursor 
 kludge to get 4 physical pages for ARGB cursor 
 no stolen mem on i81x 
 ensure that ppgtt is disabled 
 write the new ggtt size 
 GTT pagetable sizes bigger than 512KB are not possible on G33! 
		 On previous hardware, the GTT size was just what was
		  required to map the aperture.
 9xx supports large sizes, just look at the length 
 Certain Gen5 chipsets require require idling the GPU before
  unmapping anything from the GTT when VT-d is enabled.
	 Query intel_iommu to see if we need the workaround. Presumably that
	  was loaded first.
 Reports of major corruption with ILK vt'd enabled 
 save the PGETBL reg for resume 
 we only ever restore the register when enabling the PGTBL... 
 FIXME: ? 
 The chipset_flush interface needs to get data that has already been
  flushed out of the CPU all the way out to main memory, because the GPU
  doesn't snoop those buffers.
  The 8xx series doesn't have the same lovely interface for flushing the
  chipset write buffers that the later chips do. According to the 865
  specs, it's 64 octwords, or 1KB.  So, to get those previous things in
  that buffer out, we just fill 1KB and clflush it out, on the assumption
  that it'll push whatever was in there out.  It appears to work.
	 Forcibly evict everything from the CPU write buffers.
	  clflush appears to be insufficient.
	 Now we've only seen documents for this magic bit on 855GM,
	  we hope it exists for the other gen2 chipsets...
	 
	  Also works as advertised on my 845G.
	 On the resume path we may be adjusting the PGTBL value, so
	  be paranoid and flush all chipset write buffers...
	 sg may merge pages, but we have to separate
 always return NULL for other allocation types for now 
 some BIOSes reserve this area in a pnp some don't 
 some BIOSes reserve this area in a pnp some don't 
 return if already configured 
 setup a resource for this object 
 Setup chipset flush for 915 
 Shift high bits down 
 i945 is the last gpu to need phys mem (for overlay and cursors). 
 Table to describe Intel GMCH and AGPPCIE GART drivers.  At least one of
  driver and gmch_driver must be non-null, and find_gmch will determine
  which one should be used if a gmch_chip_id is present.
	
	  Can be called from the fake agp driver but also directly from
	  drmi915.ko. Hence we need to check whether everything is set up
	  already.
      Author: Xilinx, Inc.
      This program is free software; you can redistribute it andor modify it
      under the terms of the GNU General Public License as published by the
      Free Software Foundation; either version 2 of the License, or (at your
      option) any later version.
      XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS"
      AS A COURTESY TO YOU, SOLELY FOR USE IN DEVELOPING PROGRAMS AND
      SOLUTIONS FOR XILINX DEVICES.  BY PROVIDING THIS DESIGN, CODE,
      OR INFORMATION AS ONE POSSIBLE IMPLEMENTATION OF THIS FEATURE,
      APPLICATION OR STANDARD, XILINX IS MAKING NO REPRESENTATION
      THAT THIS IMPLEMENTATION IS FREE FROM ANY CLAIMS OF INFRINGEMENT,
      AND YOU ARE RESPONSIBLE FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE
      FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY DISCLAIMS ANY
      WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE
      IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR
      REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF
      INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
      FOR A PARTICULAR PURPOSE.
      (c) Copyright 2002 Xilinx Inc., Systems Engineering Group
      (c) Copyright 2004 Xilinx Inc., Systems Engineering Group
      (c) Copyright 2007-2008 Xilinx Inc.
      All rights reserved.
      You should have received a copy of the GNU General Public License along
      with this program; if not, write to the Free Software Foundation, Inc.,
      675 Mass Ave, Cambridge, MA 02139, USA.
  This is the code behind devicap -- it allows a user-space
  application to use the Xilinx ICAP subsystem.
  The following operations are possible:
  open         open the port and initialize for access.
  release      release port
  write        Write a bitstream to the configuration processor.
  read         Read a data stream from the configuration processor.
  After being opened, the port is initialized and accessed to avoid a
  corrupted first read which may occur with some hardware.  The port
  is left in a desynched state, requiring that a synch sequence be
  transmitted before any valid configuration data.  A user will have
  exclusive access to the device while it remains open, and the state
  of the ICAP cannot be guaranteed after the device is closed.  Note
  that a complete reset of the core and the state of the ICAP cannot
  be performed on many versions of the cores, hence users of this
  device should avoid making inconsistent accesses to the device.  In
  particular, accessing the read interface, without first generating
  a write containing a readback packet can leave the ICAP in an
  inaccessible state.
  Note that in order to use the read interface, it is first necessary
  to write a request packet to the write interface.  i.e., it is not
  possible to simply readback the bitstream (or any configuration
  bits) from a device without specifically requesting them first.
  The code to craft such packets is intended to be part of the
  user-space application code that uses this device.  The simplest
  way to use this interface is simply:
  cp foo.bit devicap0
  Note that unless foo.bit is an appropriately constructed partial
  bitstream, this has a high likelihood of overwriting the design
  currently programmed in the FPGA.
 For open firmware. 
 An array, which is set to true when the device is registered. 
  hwicap_command_desync - Send a DESYNC command to the ICAP port.
  @drvdata: a pointer to the drvdata.
  Returns: '0' on success and failure value on error
  This command desynchronizes the ICAP After this command, a
  bitstream containing a NULL packet, followed by a SYNCH packet is
  required before the ICAP will recognize commands.
	
	  Create the data to be written to the ICAP.
	
	  Write the data to the FIFO and intiate the transfer of data present
	  in the FIFO to the ICAP device.
  hwicap_get_configuration_register - Query a configuration register.
  @drvdata: a pointer to the drvdata.
  @reg: a constant which represents the configuration
  register value to be returned.
  Examples: XHI_IDCODE, XHI_FLR.
  @reg_data: returns the value of the register.
  Returns: '0' on success and failure value on error
  Sends a query packet to the ICAP and then receives the response.
  The icap is left in Synched state.
	
	  Create the data to be written to the ICAP.
	
	  Write the data to the FIFO and initiate the transfer of data present
	  in the FIFO to the ICAP device.
 If the syncword was not found, then we need to start over. 
	
	  Write the data to the FIFO and intiate the transfer of data present
	  in the FIFO to the ICAP device.
	
	  Read the configuration register
	 Abort any current transaction, to make sure we have the
	  ICAP in a good state.
	 Attempt to read the IDCODE from ICAP.  This
	  may not be returned correctly, due to the design of the
	  hardware.
 If there are leftover bytes in the buffer, just 
 return them and don't try to read more from the 
 ICAP device. 
 Return the data currently in the read buffer. 
 Get new data from the ICAP, and return was was requested. 
 The ICAP device is only able to read complete 
 words.  If a number of bytes that do not correspond 
 to complete words is requested, then we read enough 
 words to get the required number of bytes, and then 
 save the remaining bytes for the next read. 
 Determine the number of words to read, rounding up 
 if necessary. 
 Ensure we only read a complete number of words. 
 If we didn't read correctly, then bail out. 
 If we fail to return the data to the user, then bail out. 
 Only write multiples of 4 bytes. 
 only write multiples of 4 bytes, so there might 
 be as many as 3 bytes left (at the end). 
 Flush write buffer. 
 success 
 success 
	 It's most likely that we're using V4, if the family is not
	  specified
 CONFIG_OF 
	 It's most likely that we're using V4, if the family is not
	  specified
 Match table for device tree binding 
      Author: Xilinx, Inc.
      This program is free software; you can redistribute it andor modify it
      under the terms of the GNU General Public License as published by the
      Free Software Foundation; either version 2 of the License, or (at your
      option) any later version.
      XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS"
      AS A COURTESY TO YOU, SOLELY FOR USE IN DEVELOPING PROGRAMS AND
      SOLUTIONS FOR XILINX DEVICES.  BY PROVIDING THIS DESIGN, CODE,
      OR INFORMATION AS ONE POSSIBLE IMPLEMENTATION OF THIS FEATURE,
      APPLICATION OR STANDARD, XILINX IS MAKING NO REPRESENTATION
      THAT THIS IMPLEMENTATION IS FREE FROM ANY CLAIMS OF INFRINGEMENT,
      AND YOU ARE RESPONSIBLE FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE
      FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY DISCLAIMS ANY
      WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE
      IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR
      REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF
      INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
      FOR A PARTICULAR PURPOSE.
      (c) Copyright 2007-2008 Xilinx Inc.
      All rights reserved.
      You should have received a copy of the GNU General Public License along
      with this program; if not, write to the Free Software Foundation, Inc.,
      675 Mass Ave, Cambridge, MA 02139, USA.
 Register offsets for the XHwIcap device. 
 Device Global Interrupt Enable Reg 
 Interrupt Status Register 
 Interrupt Enable Register 
 Write FIFO 
 Read FIFO 
 Size Register 
 Control Register 
 Status Register 
 Write FIFO Vacancy Register 
 Read FIFO Occupancy Register 
 Device Global Interrupt Enable Register (GIER) bit definitions 
 Global Interrupt enable Mask 
  HwIcap Device Interrupt StatusEnable Registers
  Interrupt Status Register (IPISR) : This register holds the
  interrupt status flags for the device. These bits are toggle on
  write.
  Interrupt Enable Register (IPIER) : This register is used to enable
  interrupt sources for the device.
  Writing a '1' to a bit enables the corresponding interrupt.
  Writing a '0' to a bit disables the corresponding interrupt.
  IPISRIPIER registers have the same bit definitions and are only defined
  once.
 Read FIFO Full 
 Write FIFO Empty 
 Read FIFO half full 
 Write FIFO half full 
 Mask of all interrupts 
 Control Register (CR) 
 SW Reset Mask 
 FIFO Clear Mask 
 Read from ICAP to FIFO 
 Write from FIFO to ICAP 
 Max Write FIFO Vacancy, in words 
 Max Read FIFO Occupancy, in words 
 The maximum amount we can request from fifo_icap_get_configuration
  fifo_icap_fifo_write - Write data to the write FIFO.
  @drvdata: a pointer to the drvdata.
  @data: the 32-bit value to be written to the FIFO.
  This function will silently fail if the fifo is full.
  fifo_icap_fifo_read - Read data from the Read FIFO.
  @drvdata: a pointer to the drvdata.
  This function will silently fail if the fifo is empty.
  fifo_icap_set_read_size - Set the the size register.
  @drvdata: a pointer to the drvdata.
  @data: the size of the following read transaction, in words.
  fifo_icap_start_config - Initiate a configuration (write) to the device.
  @drvdata: a pointer to the drvdata.
  fifo_icap_start_readback - Initiate a readback from the device.
  @drvdata: a pointer to the drvdata.
  fifo_icap_get_status - Get the contents of the status register.
  @drvdata: a pointer to the drvdata.
  The status register contains the ICAP status and the done bit.
  D8 - cfgerr
  D7 - dalign
  D6 - rip
  D5 - in_abort_l
  D4 - Always 1
  D3 - Always 1
  D2 - Always 1
  D1 - Always 1
  D0 - Done bit
  fifo_icap_busy - Return true if the ICAP is still processing a transaction.
  @drvdata: a pointer to the drvdata.
  fifo_icap_write_fifo_vacancy - Query the write fifo available space.
  @drvdata: a pointer to the drvdata.
  Return the number of words that can be safely pushed into the write fifo.
  fifo_icap_read_fifo_occupancy - Query the read fifo available data.
  @drvdata: a pointer to the drvdata.
  Return the number of words that can be safely read from the read fifo.
  fifo_icap_set_configuration - Send configuration data to the ICAP.
  @drvdata: a pointer to the drvdata.
  @frame_buffer: a pointer to the data to be written to the
 		ICAP device.
  @num_words: the number of words (32 bit) to write to the ICAP
 		device.
  This function writes the given user data to the Write FIFO in
  polled mode and starts the transfer of the data to
  the ICAP device.
	
	  Check if the ICAP device is Busy with the last ReadWrite
	
	  Set up the buffer pointer and the words to be transferred.
		
		  Wait until we have some data in the fifo.
		
		  Write data into the Write FIFO.
 Start pushing whatever is in the FIFO into the ICAP. 
 Wait until the write has finished. 
	
	  If the requested number of words have not been read from
	  the device then indicate failure.
  fifo_icap_get_configuration - Read configuration data from the device.
  @drvdata: a pointer to the drvdata.
  @data: Address of the data representing the partial bitstream
  @size: the size of the partial bitstream in 32 bit words.
  This function reads the specified number of words from the ICAP device in
  the polled mode.
	
	  Check if the ICAP device is Busy with the last WriteRead
		 The hardware has a limit on the number of words
 Wait until we have some data in the fifo. 
 Read the data from the Read FIFO. 
  buffer_icap_reset - Reset the logic of the icap device.
  @drvdata: a pointer to the drvdata.
  This function forces the software reset of the complete HWICAP device.
  All the registers will return to the default value and the FIFO is also
  flushed as a part of this software reset.
	
	  Reset the device by settingclearing the RESET bit in the
	  Control Register.
  fifo_icap_flush_fifo - This function flushes the FIFOs in the device.
  @drvdata: a pointer to the drvdata.
	
	  Flush the FIFO by settingclearing the FIFO Clear bit in the
	  Control Register.
      Author: Xilinx, Inc.
      This program is free software; you can redistribute it andor modify it
      under the terms of the GNU General Public License as published by the
      Free Software Foundation; either version 2 of the License, or (at your
      option) any later version.
      XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS"
      AS A COURTESY TO YOU, SOLELY FOR USE IN DEVELOPING PROGRAMS AND
      SOLUTIONS FOR XILINX DEVICES.  BY PROVIDING THIS DESIGN, CODE,
      OR INFORMATION AS ONE POSSIBLE IMPLEMENTATION OF THIS FEATURE,
      APPLICATION OR STANDARD, XILINX IS MAKING NO REPRESENTATION
      THAT THIS IMPLEMENTATION IS FREE FROM ANY CLAIMS OF INFRINGEMENT,
      AND YOU ARE RESPONSIBLE FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE
      FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY DISCLAIMS ANY
      WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE
      IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR
      REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF
      INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
      FOR A PARTICULAR PURPOSE.
      (c) Copyright 2003-2008 Xilinx Inc.
      All rights reserved.
      You should have received a copy of the GNU General Public License along
      with this program; if not, write to the Free Software Foundation, Inc.,
      675 Mass Ave, Cambridge, MA 02139, USA.
 Indicates how many bytes will fit in a buffer. (1 BRAM) 
 File access and error constants 
 Constants for checking transfer status 
 buffer_icap register offsets 
 Size of transfer, read & write 
 offset into bram, read & write 
 Read not Configure, direction of transfer.  Write only 
 Indicates transfer complete. Read only 
 Constants for setting the RNC register 
 Constants for the Done register 
  buffer_icap_get_status - Get the contents of the status register.
  @drvdata: a pointer to the drvdata.
  The status register contains the ICAP status and the done bit.
  D8 - cfgerr
  D7 - dalign
  D6 - rip
  D5 - in_abort_l
  D4 - Always 1
  D3 - Always 1
  D2 - Always 1
  D1 - Always 1
  D0 - Done bit
  buffer_icap_get_bram - Reads data from the storage buffer bram.
  @base_address: contains the base address of the component.
  @offset: The word offset from which the data should be read.
  A bram is used as a configuration memory cache.  One frame of data can
  be stored in this "storage buffer".
  buffer_icap_busy - Return true if the icap device is busy
  @base_address: is the base address of the device
  The queries the low order bit of the status register, which
  indicates whether the current configuration or readback operation
  has completed.
  buffer_icap_set_size - Set the size register.
  @base_address: is the base address of the device
  @data: The size in bytes.
  The size register holds the number of 8 bit bytes to transfer between
  bram and the icap (or icap to bram).
  buffer_icap_set_offset - Set the bram offset register.
  @base_address: contains the base address of the device.
  @data: is the value to be written to the data register.
  The bram offset register holds the starting bram address to transfer
  data from during configuration or write data to during readback.
  buffer_icap_set_rnc - Set the RNC (Readback not Configure) register.
  @base_address: contains the base address of the device.
  @data: is the value to be written to the data register.
  The RNC register determines the direction of the data transfer.  It
  controls whether a configuration or readback take place.  Writing to
  this register initiates the transfer.  A value of 1 initiates a
  readback while writing a value of 0 initiates a configuration.
  buffer_icap_set_bram - Write data to the storage buffer bram.
  @base_address: contains the base address of the component.
  @offset: The word offset at which the data should be written.
  @data: The value to be written to the bram offset.
  A bram is used as a configuration memory cache.  One frame of data can
  be stored in this "storage buffer".
  buffer_icap_device_read - Transfer bytes from ICAP to the storage buffer.
  @drvdata: a pointer to the drvdata.
  @offset: The storage buffer start address.
  @count: The number of words (32 bit) to read from the
            device (ICAP).
 setSize count4 to get bytes. 
  buffer_icap_device_write - Transfer bytes from ICAP to the storage buffer.
  @drvdata: a pointer to the drvdata.
  @offset: The storage buffer start address.
  @count: The number of words (32 bit) to read from the
            device (ICAP).
 setSize count4 to get bytes. 
  buffer_icap_reset - Reset the logic of the icap device.
  @drvdata: a pointer to the drvdata.
  Writing to the status register resets the ICAP logic in an internal
  version of the core.  For the version of the core published in EDK,
  this is a noop.
  buffer_icap_set_configuration - Load a partial bitstream from system memory.
  @drvdata: a pointer to the drvdata.
  @data: Kernel address of the partial bitstream.
  @size: the size of the partial bitstream in 32 bit words.
 Loop through all the data 
 Copy data to bram 
 Write data to ICAP 
 abort. 
 Write unwritten data to ICAP 
 Write data to ICAP 
 abort. 
  buffer_icap_get_configuration - Read configuration data from the device.
  @drvdata: a pointer to the drvdata.
  @data: Address of the data representing the partial bitstream
  @size: the size of the partial bitstream in 32 bit words.
 Loop through all the data 
 Read data from ICAP 
 abort. 
 Copy data from bram 
 SPDX-License-Identifier: GPL-2.0+
  There can be 4 IO ports passed in (with or without IRQs), 4 addresses,
  a default IO port, and 1 ACPISPMI address.  That sets SI_MAX_DRIVERS.
 Parse out the si_type string into its components. 
  Returns true of the given address exists as a hardcoded address,
  false if not.
 SPDX-License-Identifier: GPL-2.0+
  Add an IPMI platform device.
 Last entry must be left NULL to terminate it. 
 An invalid or SSIF interface, no resources. 
	
	  Register spacing is derived from the resources in
	  the IPMI platform code.
