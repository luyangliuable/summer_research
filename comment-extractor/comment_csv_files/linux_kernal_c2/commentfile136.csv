 SPDX-License-Identifier: GPL-2.0-or-later
  vpx3220a, vpx3216b & vpx3214c video decoder driver version 0.0.1
  Copyright (C) 2001 Laurent Pinchart <lpinchart@freegates.be>
 ----------------------------------------------------------------------- 
 ----------------------------------------------------------------------- 
 Write the 16-bit address to the FPWR register 
 Write the 16-bit data to the FPDAT register 
 Write the 16-bit address to the FPRD register 
 Read the 16-bit data from the FPDAT register 
 ---------------------------------------------------------------------- 
 NTSC tint angle 
 Window 1 vertical 
 Vertical lines in 
 Vertical lines out 
 Horizontal begin 
 Horizontal length 
 Number of pixels 
 Disable window 2 
	0xf0, 0x73,		 13.5 MHz transport, Forced
 NTSC M, composite input 
	0xe7, 0x1e1,		 Enable vertical standard
 Window 1 vertical begin 
	0x89, 288,		 Vertical lines in (16 lines
	0x8a, 288,		 Vertical lines out (16 lines
 Horizontal begin 
 Horizontal length 
	0x8d, 784,		 Number of pixels
 Disable window 2 
	0xf0, 0x77,		 13.5 MHz transport, Forced
 PAL B,G,H,I, composite input 
 PALSECAM set to 288 lines 
 Window 1 vertical begin 
	0x89, 288,		 Vertical lines in (16 lines
	0x8a, 288,		 Vertical lines out (16 lines
 Horizontal begin 
 Horizontal length 
	0x8d, 784,		 Number of pixels
 Disable window 2 
	0xf0, 0x77,		 13.5 MHz transport, Forced
 SECAM, composite input 
 PALSECAM set to 288 lines 
 Disable all outputs 
	0x33, 0x0d,		 Luma : VIN2, Chroma : CIN
	0xd8, 0xa8,		 HREFVREF active high, VREF
 IF compensation 0dBoct 
 Open up all comparators 
 Brightness set to 0 
	0xe7, 0xe0,		 Contrast to 1.0, noise shaping
	0xe8, 0xf8,		 YUV422, CbCr binary offset,
	0xea, 0x18,		 LLC2 connected, output FIFO
	0xf0, 0x8a,		 Half full level to 10, bus
	0xf1, 0x18,		 Single clock, sync mode, no
	0xf8, 0x12,		 Port A, PIXCLK, HF# & FE#
	0xf9, 0x24,		 Port B, HREF, VREF, PREF &
 ACC reference 
 PLL gain 
	 Here we back up the input selection because it gets
	   overwritten when we fill the registers with the
 And here we set the backed up video input again 
	 RJ:   input = 0: ST8 (PCTV) input
		 input = 1: COMPOSITE  input
 0x0010 is required to latch the setting 
 Bit 7 and 8 is for noise shaping 
 ----------------------------------------------------------------------- 
 -----------------------------------------------------------------------
  Client management code
 Check if the adapter supports the needed features 
 Default to PAL 
 SPDX-License-Identifier: GPL-2.0-only
  adv7183.c Analog Devices ADV7183 video decoder driver
  Copyright (c) 2011 Analog Devices Inc.
 Current set standard 
 EXAMPLES USING 27 MHz CLOCK
  Mode 1 CVBS Input (Composite Video on AIN5)
  All standards are supported through autodetect, 8-bit, 4:2:2, ITU-R BT.656 output on P15 to P8.
 CVBS input on AIN5 
 Slow down digital clamps 
 Set CSFM to SH1 
 Power down ADC 1 and ADC 2 
 Set DNR threshold to 4 for flat response 
 ADI recommended programming sequence 
 wait 5ms before any further i2c writes are performed 
 enable autodetection block 
 wait autodetection switch 
 get autodetection result 
 after std detection, write back user set std 
 Check if the adapter supports the needed features 
 hook the control handler into the driver 
 v4l2 doesn't support an autodetect standard, pick PAL as default 
 reset chip 
 reset pulse width at least 5ms 
 wait 5ms before any further i2c writes are performed 
 initialize the hardware to the default control values 
 SPDX-License-Identifier: GPL-2.0
  Driver for the OV7251 camera sensor.
  Copyright (c) 2017-2018, The Linux Foundation. All rights reserved.
  Copyright (c) 2017-2018, Linaro Ltd.
 Cached register values 
 lock to protect power state, ctrls and mode 
 pll2 pre divider 
 pll2 multiplier 
 pll2 sys divider 
 pll2 adc divider 
 pll2 divider 
 pll1 pix divider 
 pll1 divider 
 pll1 multiplier 
 pll1 pre divider 
 pll1 mipi divider 
 width high 
 width low 
 height high 
 height low 
 total horiz timing high 
 total horiz timing low 
 total vertical timing high 
 total vertical timing low 
 pll2 pre divider 
 pll2 multiplier 
 pll2 sys divider 
 pll2 adc divider 
 pll2 divider 
 pll1 pix divider 
 pll1 divider 
 pll1 multiplier 
 pll1 pre divider 
 pll1 mipi divider 
 width high 
 width low 
 height high 
 height low 
 total horiz timing high 
 total horiz timing low 
 total vertical timing high 
 total vertical timing low 
 pll2 pre divider 
 pll2 multiplier 
 pll2 sys divider 
 pll2 adc divider 
 pll2 divider 
 pll1 pix divider 
 pll1 divider 
 pll1 multiplier 
 pll1 pre divider 
 pll1 mipi divider 
 width high 
 width low 
 height high 
 height low 
 total horiz timing high 
 total horiz timing low 
 total vertical timing high 
 total vertical timing low 
 an index in link_freq[] 
 an index in link_freq[] 
 an index in link_freq[] 
	 OV7251 power up sequence requires core regulator
	  to be enabled not earlier than io regulator
 goes to OV7251_AEC_EXPO_0 
 goes to OV7251_AEC_EXPO_1 
 goes to OV7251_AEC_EXPO_2 
 goes to OV7251_AEC_AGC_ADJ_0 
 goes to OV7251_AEC_AGC_ADJ_1 
 wait at least 65536 external clock cycles 
 If the power state is not modified - no work to do. 
 v4l2_ctrl_lock() locks our mutex 
 get system clock (xclk) 
 external clock must be 24MHz, allow 1% tolerance 
 sentinel  }
 SPDX-License-Identifier: GPL-2.0-or-later
 cx25840 firmware functions
  Mike Isely <isely@pobox.com> - The FWSEND parameter controls the
  size of the firmware chunks sent down the I2C bus to the chip.
  Previously this had been set to 1024 but unfortunately some I2C
  implementations can't transfer data in such big gulps.
  Specifically, the pvrusb2 driver has a hard limit of around 60
  bytes, due to the encapsulation there of I2C traffic into USB
  messages.  So we have to significantly reduce this parameter.
 DL_ADDR_LB=0 DL_ADDR_HB=0 
 DL_MAP=3 DL_AUTO_INC=0 DL_ENABLE=1
 AUTO_INC_DIS=1 
 AUTO_INC_DIS=0 
 DL_ENABLE=0 
 DL_ADDR_HB DL_ADDR_LB 
 Preserve the GPIO OE and output bits 
 cx231xx cannot accept more than 16 bytes at a time 
 Restore GPIO configuration after fw load 
 SPDX-License-Identifier: GPL-2.0-or-later
 cx25840 - Conexant CX25840 audiovideo decoder driver
  Copyright (C) 2004 Ulf Eklund
  Based on the saa7115 driver and on the first version of Chris Kennedy's
  cx25840 driver.
  Changes by Tyler Trafford <tatrafford@comcast.net>
     - cleanuprewrite for V4L2 API (2005)
  VBI support by Hans Verkuil <hverkuil@xs4all.nl>.
  NTSC sliced VBI support by Christopher Neufeld <television@cneufeld.ca>
  with additional fixes by Hans Verkuil <hverkuil@xs4all.nl>.
  CX23885 support by Steven Toth <stoth@linuxtv.org>.
  CX2388[578] IRQ handling, IO Pin mux configuration and other small fixes are
  Copyright (C) 2010 Andy Walls <awalls@md.metrocast.net>
  CX23888 DIF support for the HVR1850
  Copyright (C) 2011 Steven Toth <stoth@kernellabs.com>
  CX2584x pin to pad mapping and output format configuration support are
  Copyright (C) 2011 Maciej S. Szmigiero <mail@maciej.szmigiero.name>
 ----------------------------------------------------------------------- 
 Write register address 
 Read data from register 
 Write register address 
 Read data from registers 
 ----------------------------------------------------------------------- 
 ----------------------------------------------------------------------- 
 GPIO16 
 IRQ_N 
 IR_RX 
 GPIO19 
 IR_TX 
 GPIO20 
 I2S_SDAT 
 TODO: Input or Output config 
 GPIO21 
 I2S_WCLK 
 TODO: Input or Output config 
 GPIO22 
 I2S_BCLK 
 TODO: Input or Output config 
 GPIO23 
 CX25840_PIN_DRIVE_MEDIUM 
 CX25840_PIN_DRIVE_MEDIUM 
 ----------------------------------------------------------------------- 
	
	  This is the Hauppauge sequence used to
	  initialize the Delay Lock Loop 1 (ADC DLL).
	
	  This is the Hauppauge sequence used to
	  initialize the Delay Lock Loop 2 (ADC DLL).
	
	 reset configuration is described on page 3-77
	  of the CX25836 datasheet
 2. 
 3a. 
 3b. 
 3c. 
 3d. 
 3e. 
 3f. 
 3g. 
 3h. 
 apply current vconfig to hardware regs 
 zero 
 zero 
 datasheet startup in numbered steps, refer to page 3-77 
 2. 
	
	  The default of this register should be 4, but I get 0 instead.
	  Set this register to 4 manually.
 3. 
 4. 
 5. 
	
	  Do the firmware load in a work handler to prevent.
	  Otherwise the kernel is blocked waiting for the
	  bit-banging i2c interface to finish uploading the
	  firmware.
 6. 
 7. 
 8. 
 steps 8c and 8d are done in change_input() 
 10. 
 trial and error says these are needed to get audio 
 stereo preferred 
 AC97 shift 
 (re)set input 
 start microcontroller 
 cx23885 sets hostdata to clk_freq pointer 
	
	  Come out of digital power down
	  The CX23888, at least, needs this, otherwise registers aside from
	  0x0-0x2 can't be read or written.
 Internal Reset 
 Stop microcontroller 
 DIF in reset? 
	
	  Trust the default xtal, no division
	  '885: 28.636363... MHz
	  '887: 25.000000 MHz
	  '888: 50.000000 MHz
 Power up all the PLL's and DLL 
 Sys PLL 
		
		  50.0 MHz  (0xb + 0xe8ba260x2000000)4 = 5  28.636363 MHz
		  572.73 MHz before post divide
 888ImpactVCBe or 25Mhz xtal 
 nothing to do 
 HVR1850 or 50MHz xtal 
		
		  25.0 MHz  (0x16 + 0x1d1744c0x2000000)4 = 5  28.636363 MHz
		  572.73 MHz before post divide
		
		  28.636363 MHz  (0x14 + 0x00x2000000)4 = 5  28.636363 MHz
		  572.73 MHz before post divide
 Disable DIF bypass 
 DIF Src phase inc 
	
	  Vid PLL
	  Setup for a BT.656 pixel clock of 13.5 Mpixelssecond
	 
	  28.636363 MHz  (0xf + 0x02be2c90x2000000)4 = 8  13.5 MHz
	  432.0 MHz before post divide
 HVR1850 
 888ImpactVCBe or 25MHz xtal 
 888HVR1250 or 50MHz xtal 
 Luma 
 Chroma 
	
	  Aux PLL
	  Initial setup for audio sample clock:
	  48 ksps, 16 bitssample, x160 multiplier = 122.88 MHz
	  Initial I2S outputmaster clock(?):
	  48 ksps, 16 bitssample, x16 multiplier = 12.288 MHz
		
		  50.0 MHz  (0x7 + 0x0bedfa40x2000000)3 = 122.88 MHz
		  368.64 MHz before post divide
		  122.88 MHz  0xa = 12.288 MHz
 HVR1850 or 50MHz xtal or 25MHz xtal 
		
		  25.0 MHz  (0xe + 0x17dbf480x2000000)3 = 122.88 MHz
		  368.64 MHz before post divide
		  122.88 MHz  0xa = 12.288 MHz
		
		  28.636363 MHz  (0xc + 0x1bf0c9e0x2000000)3 = 122.88 MHz
		  368.64 MHz before post divide
		  122.88 MHz  0xa = 12.288 MHz
 ADC2 input select 
 VIN1 & VIN5 
 Enable format auto detect 
 Fast subchroma lock 
 White crush, Chroma AGC & Chroma Killer enabled 
 Select AFE clock pad output source 
	 Drive GPIO2 direction and values for HVR1700
	  where an onboard mux selects the output of demodulator
	  vs the 417. Failure to set this results in no DTV.
	  It's safe to set this across all Hauppauge boards
	  currently, regardless of the board type.
	
	  Do the firmware load in a work handler to prevent.
	  Otherwise the kernel is blocked waiting for the
	  bit-banging i2c interface to finish uploading the
	  firmware.
	
	  Call the cx23888 specific std setup func, we no longer rely on
	  the generic cx24840 func.
 (re)set input 
 start microcontroller 
 Disable and clear video interrupts - we don't use them 
 Disable and clear audio interrupts - we don't use them 
 CC raw enable 
	
	   - VIP 1.1 control codes - 10bit, blue field enable.
	   - enable raw data during vertical blanking.
	   - enable ancillary Data insertion for 656 or VIP.
 CC on  - VBI_LINE_CTRL3, FLD_VBI_MD_LINE12 
 HVR-1250  HVR1850 DIF related 
 Power everything up 
 SRC_COMB_CFG 
 AFE_CLK_OUT_CTRL - Select the clock output source as output 
	 I2C_OUT_CTL - I2S output configuration as
	  Master, Sony, Left justified, left sample on WS=1
 AFE_DIAG_CTRL1 
 AFE_DIAG_CTRL3 - Inverted Polarity for Audio and Video 
 ----------------------------------------------------------------------- 
 Internal Reset 
 Stop microcontroller 
 DIF in reset? 
 Trust the default xtal, no division 
 This changes for the cx23888 products 
 Bring down the regulator for AUX clk 
 Disable DIF bypass 
 DIF Src phase inc 
 Luma 
 Chroma 
 ADC2 input select 
 VIN1 & VIN5 
 Enable format auto detect 
 Fast subchroma lock 
 White crush, Chroma AGC & Chroma Killer enabled 
	
	  Do the firmware load in a work handler to prevent.
	  Otherwise the kernel is blocked waiting for the
	  bit-banging i2c interface to finish uploading the
	  firmware.
 (re)set input 
 start microcontroller 
 CC raw enable 
 CC on 
 ----------------------------------------------------------------------- 
 datasheet startup, step 8d 
 generic mode uses the values that the chip autoconfig would set 
 DEBUG: Displays configured PLL frequency 
 Sets horizontal blanking delay and active lines 
 Sets burst gate delay 
 Sets vertical blanking delay and active duration 
 Sets src decimation rate 
 Sets Luma and UV Low pass filters 
 Enables comb filters 
 Sets SC Step
 Sets VBI parameters 
 ----------------------------------------------------------------------- 
 Follow step 8c and 8d of section 3.16 in the cx25840 datasheet 
 Don't write into audio registers on cx2583x chips 
		
		  Certain Hauppauge PVR150 models have a hardware bug
		  that causes audio to drop out. For these models the
		  audio standard must be set explicitly.
		  To be precise: it affects cards with tuner models
		  85, 99 and 112 (model numbers from tveeprom).
 Japan uses EIAJ audio standard 
 South Korea uses A2 audio standard 
 Others use the BTSC audio standard 
 Autodetect audio standard and audio system 
		
		  Since system PAL-L is pretty much non-existent and
		  not used by any public broadcast network, force
		  6.5 MHz carrier to be interpreted as System DK,
		  this avoids DK audio detection instability
 Autodetect audio standard and audio system 
		
		  If only one of SECAM-DK  SECAM-L is required, then force
		  6.5MHz carrier, else autodetect it
 6.5 MHz carrier to be interpreted as System DK 
 6.5 MHz carrier to be interpreted as System L 
 6.5 MHz carrier to be autodetected 
	 The caller has previously prepared the correct routing
	  configuration in reg (for the cx23885) so we have no
	  need to attempt to flip bits for earlier av decoders.
 do nothing, use serial audio input 
 Set INPUT_MODE to Composite, S-Video or Component 
 Enable or disable the DIF for tuner use 
 Set of defaults for NTSC and PAL 
			 18271 IF - Nobody else yet uses a different
			  tuner with the DIF, so these are reasonable
			  assumptions (HVR1250 and HVR1850 specific).
 888 MISC_TIM_CTRL 
 888 FIELD_COUNT 
 888 VSCALE_CTRL 
 888 DFE_CTRL1 
 888 DFE_CTRL2 
 888 DFE_CTRL3 
 888 PLL_CTRL 
 888 HTL_CTRL 
 DIF BYPASS 
 Reset the DIF 
 Set CH_SEL_ADC2 to 1 if input comes from CH3 
 Set DUAL_MODE_ADC2 to 1 if input comes from both CH2&CH3 
 Set DUAL_MODE_ADC2 to 1 if component
 ADC2 input select channel 2 
 S-Video 
 ADC2 input select channel 3 
 ADC2 input select channel 2 
 cx23885  SVIDEO 
 YC 
 Chroma in select 
			 Clear VGA_SEL_CH2 and VGA_SEL_CH3 (bits 7 and 8).
			  This sets them to use video rather than audio.
			  Only one of the two will be in use.
 Audio channel 1 src : Parallel 1 
 Select AFE clock pad output source 
 I2S_IN_CTL: I2S_IN_SONY_MODE, LEFT SAMPLE on WS=1 
		 I2S_OUT_CTL:
		  I2S_IN_SONY_MODE, LEFT SAMPLE on WS=1
		  I2S_OUT_MASTER_MODE = Master
 Audio channel 1 src : Parallel 1 
 I2S_IN_CTL: I2S_IN_SONY_MODE, LEFT SAMPLE on WS=1 
		 I2S_OUT_CTL:
		  I2S_IN_SONY_MODE, LEFT SAMPLE on WS=1
		  I2S_OUT_MASTER_MODE = Master
 Configure audio from LR1 or LR2 input 
 Configure audio from tunersif input 
		
		  HVR1850
		 
		  AUD_IO_CTRL - I2S Input, Parallel1
		   - Channel 1 src - Parallel1 (Merlin out)
		   - Channel 2 src - Parallel2 (Merlin out)
		   - Channel 3 src - Parallel3 (Merlin AC97 out)
		   - I2S source and dir - Merlin, output
			
			  Stop microcontroller if we don't need it
			  to avoid audio popping on svideocomposite use.
 ----------------------------------------------------------------------- 
 zero is autodetect 
 First tests should be against specific std 
 Then, test against generic ones 
	
	  Follow step 9 of section 3.16 in the cx25840 datasheet.
	  Without this PAL may display a vertical ghosting effect.
	  This happens for example with the Yuan MPC622.
 Set format to NTSC-M 
 Turn off LCOMB 
 ----------------------------------------------------------------------- 
 ----------------------------------------------------------------------- 
		
		  cx23888 in 525-line mode is programmed for 486 active lines
		  while other chips use 487 active lines.
		 
		  See reg 0x428 bits [21:12] in cx23888_std_setup() vs
		  vactive in cx25840_std_setup().
		
		  that's the best we can do since the output picture
		  size is completely unknown in this case
 HSCALE=hsc 
 VSCALE=vsc VS_INTRLACE=1 VFILT=filter 
 VSCALE=vsc 
 VS_INTRLACE=1 VFILT=filter 
 ----------------------------------------------------------------------- 
 ----------------------------------------------------------------------- 
 apply incoming options to the current vconfig 
 ----------------------------------------------------------------------- 
  Initializes the device in the generic mode.
  For cx2584x chips also adds additional video output settings provided
  in @val parameter (CX25840_VCONFIG_).
  The generic mode disables some of the ivtv-related hacks in this driver.
  For cx2584x chips it also enables setting video output configuration while
  setting it according to datasheet defaults by default.
 set datasheet video output defaults 
 add additional settings 
 TODO: generic mode needs to be developed for other chips 
  This load_fw operation must be called to load the driver's firmware.
  This will load the firmware on the first invocation (further ones are NOP).
  Without this the audio standard detection will fail and you will
  only get mono.
  Alternatively, you can call the reset operation instead of this one.
  Since loading the firmware is often problematic when the driver is
  compiled into the kernel I recommend postponing calling this function
  until the first open of the video device. Another reason for
  postponing it is that loading this firmware takes a long time (seconds)
  due to the slow i2c bus speed. So it will speed up the boot process if
  you can avoid loading the fw as long as the video device isn't used.
 initialize and load firmware 
	
	  It's not clear what should be done for these devices.
	  The original code used the same addresses as for the cx25840, but
	  those addresses do something else entirely on the cx2388x and
	  cx231xx. Since it never did anything in the first place, just do
	  nothing.
 Query the current detected video format 
 0000  V4L2_STD_UNKNOWN,
 0001  V4L2_STD_NTSC_M,
 0010  V4L2_STD_NTSC_M_JP,
 0011  V4L2_STD_NTSC_443,
 0100  V4L2_STD_PAL,
 0101  V4L2_STD_PAL_M,
 0110  V4L2_STD_PAL_N,
 0111  V4L2_STD_PAL_Nc,
 1000  V4L2_STD_PAL_60,
 1001  V4L2_STD_UNKNOWN,
 1010  V4L2_STD_UNKNOWN,
 1011  V4L2_STD_UNKNOWN,
 1100  V4L2_STD_SECAM,
 1101  V4L2_STD_UNKNOWN,
 1110  V4L2_STD_UNKNOWN,
 1111  V4L2_STD_UNKNOWN
	
	  A limited function that checks for signal status and returns
	  the state.
 Check for status of Horizontal lock (SRC lock isn't reliable) 
 get rxsubchans and audmode 
		
		  mono      -> mono
		  stereo    -> mono
		  bilingual -> lang1
		
		  mono      -> mono
		  stereo    -> stereo
		  bilingual -> lang1
		
		  mono      -> mono
		  stereo    -> stereo
		  bilingual -> lang1lang2
		
		  mono      -> mono
		  stereo    -> stereo
		  bilingual -> lang2
 Only support the CX2388[578] AV Core for now 
 ----------------------------------------------------------------------- 
 Assuming TV 
 Calculate the PLL frequency word based on the adjusted ifHz 
 Round down to the nearest 100KHz 
 Horiz  vert timing 
 DIF NTSC 
 DIF IF 
 Horiz  vert timing 
 DIF 
 DIF IF 
	 Explicitly ensure the inputs are reconfigured after
	  a standard change.
 ----------------------------------------------------------------------- 
 calling the (optional) init op will turn on the generic mode 
 ----------------------------------------------------------------------- 
 Come out of digital power down 
	
	  Detecting whether the part is cx2388578 is more
	  difficult than it needs to be. No ID register. Instead we
	  probe certain registers indicated in the datasheets to look
	  for specific defaults that differ between the silicon designs.
 It's either 8857 if the IR Tx Clk Divider register exists 
		
		  CX23885 returns bogus repetitive byte values for the DIF,
		  which doesn't exist for it. (Ex. 8a8a8a8a or 31313131)
 No DIF 
			
			  CX23887 has a broken DIF, but the registers
			  appear valid (but unused), good enough to detect.
 DIF PLL Freq Word reg exists; chip must be a CX23888 
 Back into digital power down 
 Check if the adapter supports the needed features 
	
	  The high byte of the device ID should be
	  0x83 for the cx2583x and 0x84 for the cx2584x
 The CX23100 (0x5A3C = 23100) doesn't have an AV decoder 
	
	  TODO: add media controller support for analog video inputs like
	  composite, svideo, etc.
	  A real input pad for this analog demod would be like:
	                  ___________
	  TUNER --------> |         |
	 		   |         |
	  SVIDEO .......> | cx25840 |
	 		   |         |
	  COMPOSITE1 ...> |_________|
	 
	  However, at least for now, there's no much gain on modelling
	  those extra inputs. So, let's add it only when needed.
		
		  Note: revision '(device_id & 0x0f) == 2' was never built.
		  The marking skips from 0x1 == 22 to 0x3 == 23.
		
		  Enforce the legacy PVR-350MSP3400 to PVR-150CX25843 volume
		  scale mapping limits to avoid -ERANGE errors when
		  initializing the volume control
 Bottom out at -96 dB, v4l2 vol range 0x2e00-0x2fff 
 Top out at + 8 dB, v4l2 vol range 0xfe00-0xffff 
 SPDX-License-Identifier: GPL-2.0-or-later
 cx25840 audio functions
  Note: The PLL and SRC parameters are based on a reference frequency that
  would ideally be:
  NTSC Color subcarrier freq  8 = 4.5 MHz286  4552  8 = 28.63636363... MHz
  However, it's not the exact reference frequency that matters, only that the
  firmware and modules that comprise the driver for a particular board all
  use the same value (close to the ideal value).
  Comments below will note which reference frequency is assumed for various
  parameters.  They will usually be one of
 	ref_freq = 28.636360 MHz
 		or
 	ref_freq = 28.636363 MHz
			
			  VID_PLL Integer = 0x0f, VID_PLL Post Divider = 0x04
			  AUX_PLL Integer = 0x06, AUX PLL Post Divider = 0x10
			
			  VID_PLL Fraction (register 0x10c) = 0x2be2fe
			  28636360  0xf.15f17f04 = 108 MHz
			  432 MHz pre-postdivide
			
			  AUX_PLL Fraction = 0x1bb39ee
			  28636363  0x6.dd9cf700x10 = 32000  384
			  196.6 MHz pre-postdivide
			  FIXME < 200 MHz is out of specified valid range
			  FIXME 28636363 ref_freq doesn't match VID PLL ref
			
			  SA_MCLK_SEL = 1
			  SA_MCLK_DIV = 0x10 = 384384  AUX_PLL post dvivider
 src346_ctl 
 0x1.f77f = (4  286363608  2455)  32000 
			
			  VID_PLL Integer = 0x0f, VID_PLL Post Divider = 0x04
			  AUX_PLL Integer = 0x09, AUX PLL Post Divider = 0x10
			
			  VID_PLL Fraction (register 0x10c) = 0x2be2fe
			  28636360  0xf.15f17f04 = 108 MHz
			  432 MHz pre-postdivide
			
			  AUX_PLL Fraction = 0x0ec6bd6
			  28636363  0x9.7635eb00x10 = 44100  384
			  271 MHz pre-postdivide
			  FIXME 28636363 ref_freq doesn't match VID PLL ref
			
			  SA_MCLK_SEL = 1
			  SA_MCLK_DIV = 0x10 = 384384  AUX_PLL post dvivider
 src346_ctl 
 0x1.6d59 = (4  286363608  2455)  44100 
			
			  VID_PLL Integer = 0x0f, VID_PLL Post Divider = 0x04
			  AUX_PLL Integer = 0x0a, AUX PLL Post Divider = 0x10
			
			  VID_PLL Fraction (register 0x10c) = 0x2be2fe
			  28636360  0xf.15f17f04 = 108 MHz
			  432 MHz pre-postdivide
			
			  AUX_PLL Fraction = 0x098d6e5
			  28636363  0xa.4c6b7280x10 = 48000  384
			  295 MHz pre-postdivide
			  FIXME 28636363 ref_freq doesn't match VID PLL ref
			
			  SA_MCLK_SEL = 1
			  SA_MCLK_DIV = 0x10 = 384384  AUX_PLL post dvivider
 src346_ctl 
 0x1.4faa = (4  286363608  2455)  48000 
			
			  VID_PLL Integer = 0x0f, VID_PLL Post Divider = 0x04
			  AUX_PLL Integer = 0x08, AUX PLL Post Divider = 0x1e
			
			  VID_PLL Fraction (register 0x10c) = 0x2be2fe
			  28636360  0xf.15f17f04 = 108 MHz
			  432 MHz pre-postdivide
			
			  AUX_PLL Fraction = 0x12a0869
			  28636363  0x8.95043480x1e = 32000  256
			  246 MHz pre-postdivide
			  FIXME 28636363 ref_freq doesn't match VID PLL ref
			
			  SA_MCLK_SEL = 1
			  SA_MCLK_DIV = 0x14 = 256384  AUX_PLL post dvivider
 src1_ctl 
 0x1.0000 = 3200032000 
 src346_ctl 
 0x2.0000 = 2  (3200032000) 
			
			  VID_PLL Integer = 0x0f, VID_PLL Post Divider = 0x04
			  AUX_PLL Integer = 0x09, AUX PLL Post Divider = 0x18
			
			  VID_PLL Fraction (register 0x10c) = 0x2be2fe
			  28636360  0xf.15f17f04 = 108 MHz
			  432 MHz pre-postdivide
			
			  AUX_PLL Fraction = 0x0ec6bd6
			  28636363  0x9.7635eb00x18 = 44100  256
			  271 MHz pre-postdivide
			  FIXME 28636363 ref_freq doesn't match VID PLL ref
			
			  SA_MCLK_SEL = 1
			  SA_MCLK_DIV = 0x10 = 256384  AUX_PLL post dvivider
 src1_ctl 
 0x1.60cd = 4410032000 
 src346_ctl 
 0x1.7385 = 2  (3200044100) 
			
			  VID_PLL Integer = 0x0f, VID_PLL Post Divider = 0x04
			  AUX_PLL Integer = 0x0a, AUX PLL Post Divider = 0x18
			
			  VID_PLL Fraction (register 0x10c) = 0x2be2fe
			  28636360  0xf.15f17f04 = 108 MHz
			  432 MHz pre-postdivide
			
			  AUX_PLL Fraction = 0x098d6e5
			  28636363  0xa.4c6b7280x18 = 48000  256
			  295 MHz pre-postdivide
			  FIXME 28636363 ref_freq doesn't match VID PLL ref
			
			  SA_MCLK_SEL = 1
			  SA_MCLK_DIV = 0x10 = 256384  AUX_PLL post dvivider
 src1_ctl 
 0x1.8000 = 4800032000 
 src346_ctl 
 0x1.5555 = 2  (3200048000) 
			 We don't have register values
 FIXME return -EINVAL; 
			 We don't have register values
 FIXME return -EINVAL; 
 src1_ctl 
 0x1.867c = 48000  (2  286363608  2455) 
 src346_ctl 
 0x1.4faa = (4  286363608  2455)  48000 
 src346_ctl 
 0x1.f77f = (4  286363608  2455)  32000 
 src346_ctl 
 0x1.6d59 = (4  286363608  2455)  44100 
 src346_ctl 
 0x1.4faa = (4  286363608  2455)  48000 
 FIXME These cases make different assumptions about audclk 
 src1_ctl 
 0x1.0000 = 3200032000 
 src346_ctl 
 0x2.0000 = 2  (3200032000) 
 src1_ctl 
 0x1.60cd = 4410032000 
 src346_ctl 
 0x1.7385 = 2  (3200044100) 
 src1_ctl 
 0x1.867c = 48000  (2  286363608  2455) 
 src346_ctl 
 0x1.4faa = (4  286363608  2455)  48000 
 assert soft reset 
 stop microcontroller 
 Mute everything to prevent the PFFT! 
 Set Path1 to Serial Audio Input 
			 The microcontroller should not be started for the
			  non-tuner inputs: autodetection is specific for
 Set Path1 to Analog Demod Main Channel 
			 When the microcontroller detects the
 deassert soft reset 
 Ensure the controller is running when we exit 
 Convert the volume to msp3400 values (0-127) 
	 now scale it up to cx25840 values
	  -114dB to -96dB maps to 0
 PATH1_VOLUME 
 PATH1_BAL_LEFT 
 PATH1_BAL_LEVEL 
 PATH1_BAL_LEFT 
 PATH1_BAL_LEVEL 
 PATH1_EQ_BASS_VOL 
 PATH1_EQ_TREBLE_VOL 
 SPDX-License-Identifier: GPL-2.0-or-later
 cx25840 VBI functions
 1 
 4 
 6 
 9 
 we're done if raw VBI is active 
 TODO: this will have to be changed for generic_mode VBI 
 Setup standard 
 VBI Offset 
 TODO: this will have to be changed for generic_mode VBI 
 Setup standard 
 Sliced VBI 
 TODO: this will have to be changed for generic_mode VBI 
 Ancillary data 
 TODO: this will have to be changed for generic_mode VBI 
 SPDX-License-Identifier: GPL-2.0-or-later
   Driver for the Conexant CX2584x AudioVideo decoder chip and related cores
   Integrated Consumer Infrared Controller
   Copyright (C) 2010  Andy Walls <awalls@md.metrocast.net>
 108 MHz, BT.656 
  We use this union internally for convenience, but callers to tx_write
  and rx_read will be expecting records of type struct ir_raw_event.
  Always ensure the size of this union is dictated by struct ir_raw_event.
 protects Rx parameter settings cache 
 protect Rx data kfifo 
 protects Tx parameter settings cache 
  Rx and Tx Clock Divider register computations
  Note the largest clock divider value of 0xffff corresponds to:
 	(0xffff + 1)  1000  1082 MHz = 1,213,629.629... ns
  which fits in 21 bits, so we'll use unsigned int for time arguments.
 Period of the Rx or Tx clock in ns 
  Low Pass Filter register calculations
  Note the largest count value of 0xffff corresponds to:
 	0xffff  1000  1082 MHz = 1,213,611.11... ns
  which fits in 21 bits, so we'll use unsigned int for time arguments.
 Duration of the Low Pass Filter rejection window in ns 
 Duration of the Low Pass Filter rejection window in us 
  FIFO register pulse width count computations
	
	  Resolution is the duration of 1 tick of the readable portion of
	  of the pulse width counter as read from the FIFO.  The two lsb's are
	  not readable, hence the << 2.  This function returns ns.
	
	  The 2 lsb's of the pulse width timer count are not readable, hence
	  the (count << 2) | 0x3
 millicycles 
  MHz => ns 
 Keep as we will need this for Transmit functionality 
	
	  The 2 lsb's of the pulse width timer count are not accessible, hence
	  the (1 << 2)
 millicycles 
 millicyclescount 
	
	  The 2 lsb's of the pulse width timer count are not readable, hence
	  the (count << 2) | 0x3
 cycles      
  MHz => us 
  Pulse Clocks computations: Combined Pulse Width Count & Rx Clock Counts
  The total pulse clock count is an 18 bit pulse width timer count as the most
  significant part and (up to) 16 bit clock divider count as a modulus.
  When the Rx clock divider ticks down to 0, it increments the 18 bit pulse
  width timer count's least significant bit.
 millicycles  
 1000 = cycles 
 net result needs to be rounded down and decremented by 1 
  IR Control Register helpers
  IR Rx & Tx Clock Register helpers
  IR Tx Carrier Duty Cycle register helpers
 16ths of 100% 
  IR Filter Register helpers
  IR IRQ Enable Register helpers
  V4L2 Subdevice IR Ops
 Only support the IR controller for the CX2388[57] AV Core for now 
 Tx FIFO Service Request 
 Rx FIFO Service Request 
 Rx Pulse Width Timer Time Out 
 Rx FIFO Over Run 
 Tx FIFO Service Request IRQ Enable 
 Rx FIFO Service Request IRQ Enable 
 Rx Pulse Width Timer Time Out IRQ Enable 
 Rx FIFO Over Run IRQ Enable 
	
	  Transmitter interrupt service
		
		  TODO:
		  Check the watermark threshold setting
		  Pull FIFO_TX_DEPTH or FIFO_TX_DEPTH2 entries from tx_kfifo
		  Push the data to the hardware FIFO.
		  If there was nothing more to send in the tx_kfifo, disable
		 	the TSR IRQ and notify the v4l2_device.
		  If there was something in the tx_kfifo, check the tx_kfifo
		       level and notify the v4l2_device, if it is low.
 For now, inhibit TSR interrupt until Tx is implemented 
	
	  Receiver interrupt service
		
		  Receive data on RSR to clear the STATS_RSR.
		  Receive data on RTO, since we may not have yet hit the RSR
		  watermark when we receive the RTO.
 rx_kfifo over run 
		
		  The RX FIFO Enable (CNTRL_RFE) must be toggled to clear
		  the Rx FIFO Over Run status (STATS_ROR)
		
		  The IR Receiver Enable (CNTRL_RXE) must be toggled to clear
		  the Rx Pulse Width Timer Time Out (STATS_RTO)
 Clear STATS_ROR & STATS_RTO as needed by resetting hardware 
 Receiver 
 Assume RTO was because of no IR light input 
 Disable or slow down all IR Rx circuits and counters 
 Before we tweak the hardware, we have to disable the receiver 
 FIXME - make this dependent on resolution for better performance 
 Transmitter 
	
	  FIXME - the code below is an incomplete and untested sketch of what
	  may need to be done.  The critical part is to get 4 (or 8) pulses
	  from the tx_kfifo, or converted from ns to the proper units from the
	  input, and push them off to the hardware Tx FIFO right away, if the
	  HW TX fifo needs service.  The rest can be pushed to the tx_kfifo in
	  a less critical timeframe.  Also watch out for overruning the
	  tx_kfifo - don't let it happen and let the caller know not all his
	  pulses were written.
 Compute how much we can fit in the tx kfifo 
	 FIXME - turn on Tx Fifo service interrupt
	  check hardware fifo level, and other stuff
 For now enable the Tx FIFO Service interrupt & pretend we did work 
 Disable or slow down all IR Tx circuits and counters 
 Before we tweak the hardware, we have to disable the transmitter 
 FIXME - make this dependent on resolution for better performance 
	
	  FIXME: we don't have hardware help for IO pin level inversion
	  here like we have on the CX23888.
	  Act on this with some mix of logical inversion of data levels,
	  carrier polarity, and carrier duty cycle.
 reset tx_fifo here 
  V4L2 Subdevice Core Ops support
 The CX23888 chip doesn't have an IR controller on the AV core 
 36 kHz - RC-5, and RC-6 carrier 
 RC-5: 666,667 ns = 136 kHz  32 cycles  1 mark  0.75 
 RC-6: 333,333 ns = 136 kHz  16 cycles  1 mark  0.75 
 ns 
 36 kHz - RC-5 carrier 
 25 %   - RC-5 carrier 
 Only init the IR controller for the CX2388[57] AV Core for now 
 Ensure no interrupts arrive yet 
 SPDX-License-Identifier: GPL-2.0-or-later
  Driver for M-5MOLS 8M Pixel camera sensor with ISP
  Copyright (C) 2011 Samsung Electronics Co., Ltd.
  Author: HeungJun Kim <riverful.kim@samsung.com>
  Copyright (C) 2009 Samsung Electronics Co., Ltd.
  Author: Dongsoo Nathaniel Kim <dongsoo45.kim@samsung.com>
 The regulator consumer names for external voltage regulators 
 ARM core power, 1.2V 
 digital power 1, 1.8V 
 sensor power 1, 1.8V 
 digital power 2, 2.8V 
 analog power 
 digital power 3, 1.2V 
 SUB-QCIF 
 QQVGA 
 QCIF 
 QVGA 
 QVGA 
 WQVGA 
 WQVGA 
 CIF 
 qHD 
 VGA 
 WVGA 
 SVGA 
 HD 
 1080p 
 2.63fps 8M 
 AHS_MON debug 
 QVGA 
 WQVGA 
 qHD 
 VGA 
 WVGA 
 HD 
 1M 
 2M 
 Full-HD 
 3Mega 
 4Mega 
 5Mega 
 6Mega 
 8Mega 
  m5mols_swap_byte - an byte array to integer conversion function
  @data: byte array
  @length: size in bytes of I2C packet defined in the M-5MOLS datasheet
  Convert I2C data byte array with performing any required byte
  reordering to assure proper values for each data type, regardless
  of the architecture endianness.
  m5mols_read -  I2C read function
  @sd: sub-device, as pointed by struct v4l2_subdev
  @size: desired size of I2C packet
  @reg: combination of size, category and command for the I2C packet
  @val: read value
  Returns 0 on success, or else negative errno.
 minimum stabilization time 
  m5mols_write - I2C command write function
  @sd: sub-device, as pointed by struct v4l2_subdev
  @reg: combination of size, category and command for the I2C packet
  @val: value to write
  Returns 0 on success, or else negative errno.
 minimum stabilization time 
  m5mols_busy_wait - Busy waiting with I2C register polling
  @sd: sub-device, as pointed by struct v4l2_subdev
  @reg: the I2C_REG() address of an 8-bit status register to check
  @value: expected status register value
  @mask: bit mask for the read status register value
  @timeout: timeout in milliseconds, or -1 for default timeout
  The @reg register value is ORed with @mask before comparing with @value.
  Return: 0 if the requested condition became true within less than
          @timeout ms, or else negative errno.
  m5mols_enable_interrupt - Clear interrupt pending bits and unmask interrupts
  @sd: sub-device, as pointed by struct v4l2_subdev
  @reg: combination of size, category and command for the I2C packet
  Before writing desired interrupt value the INT_FACTOR register should
  be read to clear pending interrupts.
  m5mols_reg_mode - Write the mode and check busy status
  @sd: sub-device, as pointed by struct v4l2_subdev
  @mode: the required operation mode
  It always accompanies a little delay changing the M-5MOLS mode, so it is
  needed checking current busy status to guarantee right mode.
  m5mols_set_mode - set the M-5MOLS controller mode
  @info: M-5MOLS driver data structure
  @mode: the required operation mode
  The commands of M-5MOLS are grouped into specific modes. Each functionality
  can be guaranteed only when the sensor is operating in mode which a command
  belongs to.
  m5mols_get_version - retrieve full revisions information of M-5MOLS
  @sd: sub-device, as pointed by struct v4l2_subdev
  The version information includes revisions of hardware and firmware,
  AutoFocus alghorithm version and the version string.
  __find_restype - Lookup M-5MOLS resolution type according to pixel code
  @code: pixel code
  __find_resolution - Lookup preset and type of M-5MOLS's resolution
  @sd: sub-device, as pointed by struct v4l2_subdev
  @mf: pixel format to findnegotiate the resolution preset for
  @type: M-5MOLS resolution type
  @resolution:	M-5MOLS resolution preset register value
  Find nearest resolution matching resolution preset and adjust mf
  to supported values.
	
	  .get_frame_desc is only used for compressed formats,
	  thus we always return the capture frame parameters here.
  m5mols_restore_controls - Apply current control values to the registers
  @info: M-5MOLS driver data structure
  m5mols_do_scenemode() handles all parameters for which there is yet no
  individual control. It should be replaced at some point by setting each
  control individually, in required register set up order.
  m5mols_start_monitor - Start the monitor mode
  @info: M-5MOLS driver data structure
  Before applying the controls setup the resolution and frame rate
  in PARAMETER mode, and then switch over to MONITOR mode.
 m5mols_update_fw - optional firmware update routine 
  m5mols_fw_start - M-5MOLS internal ARM controller initialization
  @sd: sub-device, as pointed by struct v4l2_subdev
  Execute the M-5MOLS internal ARM controller initialization sequence.
  This function should be called after the supply voltage has been
  applied and before any requests to the device are made.
 Wait until I2C slave is initialized in Flash Writer mode 
 Execute the lens soft-landing algorithm 
  m5mols_s_power - Main sensor power control function
  @sd: sub-device, as pointed by struct v4l2_subdev
  @on: if true, powers on the device; powers off otherwise.
  To prevent breaking the lens when the sensor is powered off the Soft-Landing
  algorithm is called where available. The Soft-Landing algorithm availability
  dependends on the firmware provider.
  V4L2 subdev internal operations
 Static name; NEVER use in new drivers! 
 SPDX-License-Identifier: GPL-2.0-or-later
  The Capture code for Fujitsu M-5MOLS ISP
  Copyright (C) 2011 Samsung Electronics Co., Ltd.
  Author: HeungJun Kim <riverful.kim@samsung.com>
  Copyright (C) 2009 Samsung Electronics Co., Ltd.
  Author: Dongsoo Nathaniel Kim <dongsoo45.kim@samsung.com>
  m5mols_read_rational - I2C read of a rational number
  @sd: sub-device, as pointed by struct v4l2_subdev
  @addr_num: numerator register
  @addr_den: denominator register
  @val: place to store the division result
  Read numerator and denominator from registers @addr_num and @addr_den
  respectively and return the division result in @val.
  m5mols_capture_info - Gather captured image information
  @info: M-5MOLS driver data structure
  For now it gathers only EXIF information and file size.
	
	  Synchronize the controls, set the capture frame resolution and color
	  format. The frame capture is initiated during switching from Monitor
	  to Capture mode.
 Wait until a frame is captured to ISP internal memory 
	
	  Initiate the captured data transfer to a MIPI-CSI receiver.
 Wait for the capture completion interrupt 
 SPDX-License-Identifier: GPL-2.0-or-later
  Controls for M-5MOLS 8M Pixel camera sensor with ISP
  Copyright (C) 2011 Samsung Electronics Co., Ltd.
  Author: HeungJun Kim <riverful.kim@samsung.com>
  Copyright (C) 2009 Samsung Electronics Co., Ltd.
  Author: Dongsoo Nathaniel Kim <dongsoo45.kim@samsung.com>
  m5mols_do_scenemode() - Change current scenemode
  @info: M-5MOLS driver data structure
  @mode:	Desired mode of the scenemode
  WARNING: The execution order is important. Do not change the order.
 Unlock auto exposure 
	
	  If needed, defer restoring the controls until
	  the device is fully initialized.
 Supported manual ISO values 
 AE_ISO: 0x01...0x07 (ISO: 50...3200) 
 Supported Exposure Bias values, -2.0EV...+2.0EV 
 AE_INDEX: 0x00...0x08 
 Determine the firmware dependent control range and step values 
 Exposure control cluster 
 ISO control cluster 
 SPDX-License-Identifier: GPL-2.0+
  Driver for Analog Devices ADV748X HDMI receiver with AFE
  Copyright (C) 2017 Renesas Electronics Corp.
  Authors:
 	Koji Matsuoka <koji.matsuoka.xm@renesas.com>
 	Niklas Söderlund <niklas.soderlund@ragnatech.se>
 	Kieran Bingham <kieran.bingham@ideasonboard.com>
 -----------------------------------------------------------------------------
  Register manipulation
 adv748x_write_block(): Write raw data with a maximum of I2C_SMBUS_BLOCK_MAX
  size to one or more registers.
  A value of zero will be returned on success, a negative errno will
  be returned in error cases.
  struct adv748x_reg_value - Register write instruction
  @page:		Regmap page identifier
  @reg:		I2C register
  @value:		value to write to @page at @reg
 -----------------------------------------------------------------------------
  TXA and TXB
 Enable n-lane MIPI 
 Set Auto DPHY Timing 
 ADI Required Write 
 i2c_dphy_pwdn - 1'b0 
 ADI Required Writes
 i2c_mipi_pll_en - 1'b1 
 Power-up CSI-TX 
 ADI Required Writes 
 ADI Required Writes 
 Enable n-lane MIPI 
 i2c_mipi_pll_en - 1'b1 
 ADI Required Write 
	
	  This test against BIT(6) is not documented by the datasheet, but was
	  specified in the downstream driver.
	  Track with a WARN_ONCE to determine if it is ever set by HW.
 -----------------------------------------------------------------------------
  Media Operations
 Refuse to enable multiple links to the same TX at the same time. 
 Set or clear the source (HDMI or AFE) and the current TX. 
 AFE Requires TXA enabled, even when output to TXB 
			
			  Output from the SD-core (480i and 576i) from the TXA
			  interface requires reducing the number of enabled
			  data lanes in order to guarantee a valid link
			  frequency.
 TXB has a single data lane, no need to adjust. 
		
		  Restore the number of active lanes, in case we have gone
		  through an AFE->TXA streaming sessions.
 -----------------------------------------------------------------------------
  HW setup
 Initialize CP Core with RGB888 format. 
 Disable chip powerdown & Enable HDMI Rx block 
 Enable HDCP 1.1 
 Foreground Channel = A 
 ADI Required Write 
 ADI Required Write 
 ADI Required Write 
 ADI Required Write 
 ADI Required Write 
 ADI Required Write 
 ADI Required Write 
 ADI Required Write 
 ADI Required Write 
 ADI Required Write 
 ADI Required Write 
 ADI Required Write 
 ADI Required Write 
 ADI Required Write 
 Enable All Terminations 
 ADI Required Write 
 ADI Required Write 
 HPA Manual Enable 
 HPA Asserted 
 Audio Mute Speed Set to Fastest 
 (Smallest Step Size) 
 RGB Out of CP 
 CSC Depends on ip Packets, SDR 444 
 Luma & Chroma can reach 254d 
 CP-Insert_AV_Code 
 ADI Required Write 
 Enable LLC_DLL & Double LLC Timing 
 LLCPIXSPI PINS TRISTATED AUD 
 End of register table 
 Initialize AFE core with YUV8 format. 
 Disable chip powerdown Rx 
 Enable I2C Read Auto-Increment 
 LLCPIXAUDSPI PINS TRISTATED 
 Exit Power Down Mode 
 ADI Required Write 
 ADI Required Write 
 ADI Required Write 
 ADI Required Write 
 ADI Required Write 
 ADI recommended writes for improved video quality 
 ADI Required Write 
 ADI Required Write 
 ADI Required Write 
 Tri-S Output , PwrDwn 656 pads 
 ITU-R BT.656-4 compatible 
 ADI Required Write 
 Select SH1 
 ADI Required Write 
 V bit end pos manually in NTSC 
 End of register table 
 Disable CEC Wakeup from power-down mode 
 Enable I2C Read Auto-Increment for consecutive reads 
 Initialize CP and AFE cores. 
 Reset TXA and TXB 
 Disable chip powerdown & Enable HDMI Rx block 
 Conditionally enable TXa and TXb. 
 Use vid_std and v_freq as freerun resolution for CP 
 -----------------------------------------------------------------------------
  Suspend  Resume
 -----------------------------------------------------------------------------
  i2c driver
 the owner is the same as the i2c_client's driver owner 
 initialize name 
		
		  At least one input endpoint and one output endpoint shall
		  be defined.
 Store number of CSI-2 lanes used for TXA and TXB. 
 Check if the adapter supports the needed features 
	
	  We can not use container_of to get back to the state with two TXs;
	  Initialize the TXs's fields unconditionally on the endpoint
	  presence to access them later.
 Discover and process ports declared by the Device tree endpoints 
 Configure IO Regmap region 
 Configure remaining pages as I2C clients with regmap access 
 SW reset ADV748X to its default values 
 Initialise HDMI 
 Initialise AFE 
 Initialise TXA 
 Initialise TXB 
 SPDX-License-Identifier: GPL-2.0+
  Driver for Analog Devices ADV748X CSI-2 Transmitter
  Copyright (C) 2017 Renesas Electronics Corp.
  adv748x_csi2_register_link : Register and link internal entities
  @tx: CSI2 private entity
  @v4l2_dev: Video registration device
  @src: Source subdevice to establish link
  @src_pad: Pad number of source to link to this @tx
  @enable: Link enabled flag
  Ensure that the subdevice is registered against the v4l2_device, and link the
  source pad to the sink pad of the CSI2 bus entity.
 -----------------------------------------------------------------------------
  v4l2_subdev_internal_ops
  We use the internal registered operation to be able to ensure that our
  incremental subdevices (not connected in the forward path) can be registered
  against the resulting video path and media device.
	
	  Link TXA to AFE and HDMI, and TXB to AFE only as TXB cannot output
	  HDMI.
	 
	  The HDMI->TXA link is enabled by default, as is the AFE->TXB one.
 TXB can output AFE signals only. 
 Register link to HDMI for TXA only. 
 The default HDMI output is TXA. 
 -----------------------------------------------------------------------------
  v4l2_subdev_video_ops
 -----------------------------------------------------------------------------
  v4l2_subdev_pad_ops
  The CSI2 bus pads are ignorant to the data sizes or formats.
  But we must support setting the pad formats for format propagation.
 -----------------------------------------------------------------------------
  v4l2_subdev_ops
 -----------------------------------------------------------------------------
  Subdev module and controls
 Ensure that matching is based upon the endpoint fwnodes 
 Register internal ops for incremental subdev registration 
 SPDX-License-Identifier: GPL-2.0+
  Driver for Analog Devices ADV748X HDMI receiver and Component Processor (CP)
  Copyright (C) 2017 Renesas Electronics Corp.
 -----------------------------------------------------------------------------
  HDMI and CP
 V4L2_DV_BT_CEA_720X480I59_94 - 0.5 MHz 
 V4L2_DV_BT_DMT_1600X1200P60 
 keep this initialization for compatibility with GCC < 4.4.6 
 SVGA 
 SXGA 
 VGA 
 XGA 
 UXGA 
 TODO: The colorspace depends on the AVI InfoFrame contents 
 Check that VERT_FILTER and DE_REGEN is locked 
	
	  The high 9 bits store TMDS frequency measurement in MHz
	  The low 7 bits of TMDS_2 store the 7-bit TMDS fractional frequency
	  measurement in 1128 MHz
  adv748x_hdmi_set_de_timings: Adjust horizontal picture offset through DE
  HDMI CP uses a Data Enable synchronisation timing reference
  Vary the leading and trailing edge position of the DE signal output by the CP
  core. Values are stored as signed-twos-complement in one-pixel-clock units
  The start and end are shifted equally by the 10-bit shift value.
 POS_HIGH stores bits 8 and 9 of both the start and end 
 The sequence of the writes is important and must be followed 
	
	  When setting cp_vid_std to either 720p, 1080i, or 1080p, the video
	  will get shifted horizontally to the left in active video mode.
	  The de_h_start and de_h_end controls are used to centre the picture
	  correctly
 720p 
 1080i 
 1080p 
 -----------------------------------------------------------------------------
  v4l2_subdev_video_ops
	
	  No interrupt handling is implemented yet.
	  There should be an IRQ when a cable is plugged and the new timings
	  should be figured out and stored to state.
 -----------------------------------------------------------------------------
  v4l2_subdev_pad_ops
 Fall back to a 16:9 aspect ratio 
 Disable the EDID 
 -----------------------------------------------------------------------------
  v4l2_subdev_ops
 -----------------------------------------------------------------------------
  Controls
 Enable video adjustment first 
 Pattern is 0-indexed. Ctrl Menu is 1-indexed 
 Use our mutex for the controls 
	
	  Todo: V4L2_CID_DV_RX_POWER_PRESENT should also be supported when
	  interrupts are handled correctly
 Initialise a default 16:9 aspect ratio 
 SPDX-License-Identifier: GPL-2.0+
  Driver for Analog Devices ADV748X 8 channel analog front end (AFE) receiver
  with standard definition processor (SDP)
  Copyright (C) 2017 Renesas Electronics Corp.
 -----------------------------------------------------------------------------
  SDP
 Select SDP Read-Only Main Map 
 Read status from reg 0x10 of SDP RO Map 
 Standard not valid if there is no signal 
 Field height 
 -----------------------------------------------------------------------------
  v4l2_subdev_video_ops
 Set auto detect mode 
 Read detected standard 
 Restore original state 
 -----------------------------------------------------------------------------
  v4l2_subdev_pad_ops
	
	  The ADV748x ADC sampling frequency is twice the externally supplied
	  clock whose frequency is required to be 28.63636 MHz. It oversamples
	  with a factor of 4 resulting in a pixel rate of 14.3180180 MHz.
 It makes no sense to get the format of the analog sink pads 
 It makes no sense to get the format of the analog sink pads 
 -----------------------------------------------------------------------------
  v4l2_subdev_ops
 -----------------------------------------------------------------------------
  Controls
 Hue is inverted according to HSL chart 
 EnableDisable Color bar test patterns 
 Use our mutex for the controls 
 Identify the first connector found as a default input if set 
 Inputs and ports are 1-indexed to match the data sheet 
 Entity pads and sinks are 0-indexed to match the pads 
 SPDX-License-Identifier: GPL-2.0-only
  driversmediai2cccsccs-core.c
  Generic driver for MIPI CCSSMIASMIA++ compliant camera sensors
  Copyright (C) 2020 Intel Corporation
  Copyright (C) 2010--2012 Nokia Corporation
  Contact: Sakari Ailus <sakari.ailus@linux.intel.com>
  Based on smiapp driver by Vimarsh Zutshi
  Based on jt8ev1.c by Vimarsh Zutshi
  Based on smia-sensor.c by Tuukka Toivonen <tuukkat76@gmail.com>
  ccs_module_idents - supported camera modules
  Dynamic Capability Identification
 Handle row descriptors 
 Lane op clock ratio does not apply here. 
  V4L2 Controls handling
  Order matters.
  1. Bits-per-pixel, descending.
  2. Bits-per-pixel compressed, descending.
  3. Pixel order, same as in pixel_order_str. Formats for all four pixel
     orders must be defined.
 For v4l2_ctrl_s_ctrl_int64() used internally. 
 Exposure limits will be updated soon, use just something here. 
  For controls that require information on available media bus codes
  and linke frequencies.
 Figure out which BPP values can be used with which formats. 
 Output from pixel array, including blanking 
  SMIA++ NVM handling
  SMIA++ CCI address control
 verify addr change went ok 
  SMIA++ Mode Control
	
	  How to calculate registers related to strobe length. Please
	  do not change, or if you do at least know what you're
	  doing. :-)
	 
	  Sakari Ailus <sakari.ailus@linux.intel.com> 2010-10-25
	 
	  flash_strobe_length [us]  10^6 = (tFlash_strobe_width_ctrl
	 	 EXTCLK freq [Hz])  flash_strobe_adjustment
	 
	  tFlash_strobe_width_ctrl E N, [1 - 0xffff]
	  flash_strobe_adjustment E N, [1 - 0xff]
	 
	  The formula above is written as below to keep it on one
	  line:
	 
	  l  10^6 = w  e  a
	 
	  Let's mark w  a by x:
	 
	  x = w  a
	 
	  Thus, we get:
	 
	  x = l  e  10^6
	 
	  The strobe width must be at least as long as requested,
	  thus rounding upwards is needed.
	 
	  x = (l  e + 10^6 - 1)  10^6
	  -----------------------------
	 
	  Maximum possible accuracy is wanted at all times. Thus keep
	  a as small as possible.
	 
	  Calculate a, assuming maximum w, with rounding upwards:
	 
	  a = (x + (2^16 - 1) - 1)  (2^16 - 1)
	  -------------------------------------
	 
	  Thus, we also get w, with that a, with rounding upwards:
	 
	  w = (x + a - 1)  a
	  -------------------
	 
	  To get limits:
	 
	  x E [1, (2^16 - 1)  (2^8 - 1)]
	 
	  Substituting maximum x to the original formula (with rounding),
	  the maximum l is thus
	 
	  (2^16 - 1)  (2^8 - 1)  10^6 = l  e + 10^6 - 1
	 
	  l = (10^6  (2^16 - 1)  (2^8 - 1) - 10^6 + 1)  e
	  --------------------------------------------------
	 
	  flash_strobe_length must be clamped between 1 and
	  (10^6  (2^16 - 1)  (2^8 - 1) - 10^6 + 1)  EXTCLK freq.
	 
	  Then,
	 
	  flash_strobe_adjustment = ((flash_strobe_length 
	 	EXTCLK freq + 10^6 - 1)  10^6 + (2^16 - 1) - 1)  (2^16 - 1)
	 
	  tFlash_strobe_width_ctrl = ((flash_strobe_length 
	 	EXTCLK freq + 10^6 - 1)  10^6 +
	 	flash_strobe_adjustment - 1)  flash_strobe_adjustment
 -----------------------------------------------------------------------------
  Power management
	
	  The sub-device related to the I2C device is always the
	  source one, i.e. ssds[0].
	
	  Failures to respond to the address change command have been noticed.
	  Those failures seem to be caused by the sensor requiring a longer
	  boot time than advertised. An additional 10ms delay seems to work
	  around the issue, but the SMIA++ I2C write retry hack makes the delay
	  unnecessary. The failures need to be investigated to find a proper
	  fix, and a delay will likely need to be added here if the I2C write
	  retry hack is reverted before the root cause of the boot time issue
	  is found.
	
	  Currently powerclock to lens are enabledisabled separately
	  but they are essentially the same signals. So if the sensor is
	  powered off while the lens is powered on the sensor does not
	  really see a power off and next time the cci address change
	  will fail. So do a soft reset explicitly here.
 -----------------------------------------------------------------------------
  Video stream management
 Binning configuration 
 Set up PLL 
 Analog crop start coordinates 
 Analog crop end coordinates 
	
	  Output from pixel array, including blanking, is set using
	  controls below. No need to set here.
 Digital crop 
 Scaling 
 Output size from sensor 
 -----------------------------------------------------------------------------
  V4L2 subdev video operations
	
	  It can't use pm_runtime_resume_and_get() here, as the driver
	  relies at the returned value to detect if the device was already
	  active or not.
 Device was already active, so don't set controls 
 Restore V4L2 controls to the previously suspended device 
 Keep PM runtime usage_count incremented on success 
 Changes require propagation only on sink pad. 
	
	  Media bus code is changeable on src subdev's source pad. On
	  other source pads we just get format here.
 Sink pad. Width and height are changeable here. 
  Calculate goodness of scaled image size compared to expected image
  size and flags provided.
  Calculate best scaling ratio and mode for given output resolution.
  Try all of these: horizontal ratio, vertical ratio and smallest
  size possible (horizontally).
  Also try whether horizontal scaler or full scaler gives a better
  result.
 We're only called on source pads. This function sets scaling. 
 We only implement crop in three places. 
 -----------------------------------------------------------------------------
  sysfs attributes
	
	  NVM is still way below a PAGE_SIZE, so we can safely
	  assume this for now.
 -----------------------------------------------------------------------------
  V4L2 subdev core operations
 Module info 
 Sensor info 
 SMIA 
	
	  Some modules have bad data in the lvalues below. Hope the
	  rvalues have better stuff. The lvalues are module
	  parameters whereas the rvalues are sensor parameters.
 -----------------------------------------------------------------------------
  I2C Driver
 save state for resume 
	
	  Note that we do need to rely on detecting the bus type between CSI-2
	  D-PHY and CCP2 as the old bindings did not require it.
 guardian ,
 Support old users that may have used "xshutdown" property. 
	
	  Handle Sensor Module orientation on the board.
	 
	  The application of H-FLIP and V-FLIP on the sensor is modified by
	  the sensor orientation on the board.
	 
	  For CCS_BOARD_SENSOR_ORIENT_180 the default behaviour is to set
	  both H-FLIP and V-FLIP for normal operation which also implies
	  that a setunset operation for user space HFLIP and VFLIP v4l2
	  controls will need to be internally inverted.
	 
	  Rotation also changes the bayer pattern.
 No OP clock branch 
 We have a scaler or digital crop. 
 prepare PLL configuration input values 
 Use sensor default in PLL mode selection 
 SPDX-License-Identifier: GPL-2.0-only
  driversmediai2cccsccs-quirk.c
  Generic driver for MIPI CCSSMIASMIA++ compliant camera sensors
  Copyright (C) 2020 Intel Corporation
  Copyright (C) 2011--2012 Nokia Corporation
  Contact: Sakari Ailus <sakari.ailus@linux.intel.com>
 Below 24 gain doesn't have effect at all, 
 but ~59 is needed for full dynamic range 
 Output port control : LVDS ports only 
 0x0307 pll_multiplier maximum value on PLL input 9.6MHz ( 19.2MHz is divided on pre_pll_div) 
 0x0307 pll_multiplier maximum value on PLL input 9.6MHz ( 19.2MHz is divided on pre_pll_div) 
 Adjusting Processing Image Size to Scaler Toshiba Recommendation Setting 
 Horizontal Noise Reduction Control Toshiba Recommendation Setting 
 Horizontal Noise Reduction Control Toshiba Recommendation Setting 
 Analog Gain Control Toshiba Recommendation Setting 
 Analog Gain Control Toshiba Recommendation Setting 
 Analog Gain Control Toshiba Recommendation Setting 
 Pixel Reference Voltage Control Toshiba Recommendation Setting 
 Pixel Reference Voltage Control Toshiba Recommendation Setting 
 Pixel Reference Voltage Control Toshiba Recommendation Setting 
 Pixel Reference Voltage Control Toshiba Recommendation Setting 
 Black Hole Sun Correction Control Toshiba Recommendation Setting 
 Black Hole Sun Correction Control Toshiba Recommendation Setting 
 Black Hole Sun Correction Control Toshiba Recommendation Setting 
 Black Hole Sun Correction Control Toshiba Recommendation Setting 
 Black Hole Sun Correction Control Toshiba Recommendation Setting 
 Read Out Timing Control Toshiba Recommendation Setting 
 Read Out Timing Control Toshiba Recommendation Setting 
 Read Out Timing Control Toshiba Recommendation Setting 
 Black Hole Sun Correction Control Toshiba Recommendation Setting 
 Horizontal Noise Reduction Control Toshiba Recommendation Setting 
 Taken from v03. No idea what the rest are. 
 Taken from v02. No idea what the other two are. 
		
		  0x3302: clk during frame blanking:
		  0x00 - HS mode, 0x01 - LP11
 For digital binning (EQ_MONI) 
 FLASH STROBE enable 
 For control of pulse timing for ADC 
 For analog bias for sensor 
 Adjust the FBC speed 
 Adjust the parameter for logic function 
 For Black sun 
 Ugh. No idea what's this. 
 For control of ADC clock 
 Workaround: allows fast standby to work properly 
 Wait for 1 ms + one line => 2 ms is likely enough 
 Restore it 
 SPDX-License-Identifier: GPL-2.0-only
  driversmediai2cccsccs-reg-access.c
  Generic driver for MIPI CCSSMIASMIA++ compliant camera sensors
  Copyright (C) 2020 Intel Corporation
  Copyright (C) 2011--2012 Nokia Corporation
  Contact: Sakari Ailus <sakari.ailus@linux.intel.com>
 Inf. 
 Valid cases begin here 
 Valid zero 
 larger than 4294967295 
	
	  Unbias exponent (note how phloat is now guaranteed to
	  have 0 in the high bit)
 Extract mantissa, add missing '1' bit and it's in MHz 
 Remove mantissa bias 
  Read a 81632-bit i2c register.  The value is returned in 'val'.
  Returns zero if successful, or non-zero otherwise.
 Read a register using 8-bit access only. 
  Read a 81632-bit i2c register.  The value is returned in 'val'.
  Returns zero if successful, or non-zero otherwise.
		
		  Due to unknown reason sensor stops responding. This
		  loop is a temporaty solution until the root cause
		  is found.
 Write 
  Write to a 816-bit register.
  Returns zero if successful, or non-zero otherwise.
 \0 ] = { 0 };
 SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause
  CCS static data binary parser library
  Copyright 2019--2020 Intel Corporation
 Size of a single rule 
 Also check there is no extra data 
  ccs_data_parse - Parse a CCS static data file into a usable in-memory
 		    data structure
  @ccsdata:	CCS static data in-memory data structure
  @data:	CCS static data binary
  @len:	Length of @data
  @dev:	Device the data is related to (used for printing debug messages)
  @verbose:	Whether to be verbose or not
 SPDX-License-Identifier: GPL-2.0-only OR BSD-3-Clause
 Copyright (C) 2019--2020 Intel Corporation 
  Generated by Documentationdriver-apimediadriversccsmk-ccs-regs;
  do not modify.
 Guardian 
 SPDX-License-Identifier: GPL-2.0-only
  et8ek8_mode.c
  Copyright (C) 2008 Nokia Corporation
  Contact: Sakari Ailus <sakari.ailus@iki.fi>
           Tuukka Toivonen <tuukkat76@gmail.com>
  Stingray sensor mode settings for Scooby
 Mode1_poweron_Mode2_16VGA_2592x1968_12.07fps 
 (without the +1)
  SPCK       = 80 MHz
  CCP2       = 640 MHz
  VCO        = 640 MHz
  VCOUNT     = 84 (2016)
  HCOUNT     = 137 (3288)
  CKREF_DIV  = 2
  CKVAR_DIV  = 200
  VCO_DIV    = 0
  SPCK_DIV   = 7
  MRCK_DIV   = 7
  LVDSCK_DIV = 0
 .max_gain = 0, 
 Need to set firstly 
 Strobe and Data of CCP2 delay are minimized. 
 Refined value of Min H_COUNT  
 Frequency of SPCK setting (SPCK=MRCK) 
 From parallel out to serial out 
 From w embedded data to wo embedded data 
 CCP2 out is from STOP to ACTIVE 
 Initial setting for improvement2 of lower frequency noise 
 Switch of Preset-White-balance (0d:disable  1d:enable) 
 Switch of blemish correction (0d:disable  1d:enable) 
 Switch of auto noise correction (0d:disable  1d:enable) 
 CCP_LVDS_MODE  
 Mode1_16VGA_2592x1968_13.12fps_DPCM10-8 
 (without the +1)
  SPCK       = 80 MHz
  CCP2       = 560 MHz
  VCO        = 560 MHz
  VCOUNT     = 84 (2016)
  HCOUNT     = 128 (3072)
  CKREF_DIV  = 2
  CKVAR_DIV  = 175
  VCO_DIV    = 0
  SPCK_DIV   = 6
  MRCK_DIV   = 7
  LVDSCK_DIV = 0
 .max_gain = 0, 
 <-changed to v14 7E->80 
 CCP_LVDS_MODE  
 Mode3_4VGA_1296x984_29.99fps_DPCM10-8 
 (without the +1)
  SPCK       = 96.5333333333333 MHz
  CCP2       = 579.2 MHz
  VCO        = 579.2 MHz
  VCOUNT     = 84 (2016)
  HCOUNT     = 133 (3192)
  CKREF_DIV  = 2
  CKVAR_DIV  = 181
  VCO_DIV    = 0
  SPCK_DIV   = 5
  MRCK_DIV   = 7
  LVDSCK_DIV = 0
 .max_gain = 0, 
 CCP_LVDS_MODE  
 Mode4_SVGA_864x656_29.88fps 
 (without the +1)
  SPCK       = 80 MHz
  CCP2       = 320 MHz
  VCO        = 640 MHz
  VCOUNT     = 84 (2016)
  HCOUNT     = 166 (3984)
  CKREF_DIV  = 2
  CKVAR_DIV  = 200
  VCO_DIV    = 0
  SPCK_DIV   = 7
  MRCK_DIV   = 7
  LVDSCK_DIV = 1
 .max_gain = 0, 
 CCP_LVDS_MODE  
 Mode5_VGA_648x492_29.93fps 
 (without the +1)
  SPCK       = 80 MHz
  CCP2       = 320 MHz
  VCO        = 640 MHz
  VCOUNT     = 84 (2016)
  HCOUNT     = 221 (5304)
  CKREF_DIV  = 2
  CKVAR_DIV  = 200
  VCO_DIV    = 0
  SPCK_DIV   = 7
  MRCK_DIV   = 7
  LVDSCK_DIV = 1
 .max_gain = 0, 
 CCP_LVDS_MODE  
 Mode2_16VGA_2592x1968_3.99fps 
 (without the +1)
  SPCK       = 80 MHz
  CCP2       = 640 MHz
  VCO        = 640 MHz
  VCOUNT     = 254 (6096)
  HCOUNT     = 137 (3288)
  CKREF_DIV  = 2
  CKVAR_DIV  = 200
  VCO_DIV    = 0
  SPCK_DIV   = 7
  MRCK_DIV   = 7
  LVDSCK_DIV = 0
 .max_gain = 0, 
 Mode_648x492_5fps 
 (without the +1)
  SPCK       = 13.3333333333333 MHz
  CCP2       = 53.3333333333333 MHz
  VCO        = 640 MHz
  VCOUNT     = 84 (2016)
  HCOUNT     = 221 (5304)
  CKREF_DIV  = 2
  CKVAR_DIV  = 200
  VCO_DIV    = 5
  SPCK_DIV   = 7
  MRCK_DIV   = 7
  LVDSCK_DIV = 1
 .max_gain = 0, 
 CCP_LVDS_MODE  
 Mode3_4VGA_1296x984_5fps 
 (without the +1)
  SPCK       = 49.4 MHz
  CCP2       = 395.2 MHz
  VCO        = 790.4 MHz
  VCOUNT     = 250 (6000)
  HCOUNT     = 137 (3288)
  CKREF_DIV  = 2
  CKVAR_DIV  = 247
  VCO_DIV    = 1
  SPCK_DIV   = 7
  MRCK_DIV   = 7
  LVDSCK_DIV = 0
 .max_gain = 0, 
 CCP_LVDS_MODE  
 Mode_4VGA_1296x984_25fps_DPCM10-8 
 (without the +1)
  SPCK       = 84.2666666666667 MHz
  CCP2       = 505.6 MHz
  VCO        = 505.6 MHz
  VCOUNT     = 88 (2112)
  HCOUNT     = 133 (3192)
  CKREF_DIV  = 2
  CKVAR_DIV  = 158
  VCO_DIV    = 0
  SPCK_DIV   = 5
  MRCK_DIV   = 7
  LVDSCK_DIV = 0
 .max_gain = 0, 
 SPDX-License-Identifier: GPL-2.0-only
  et8ek8_driver.c
  Copyright (C) 2008 Nokia Corporation
  Contact: Sakari Ailus <sakari.ailus@iki.fi>
           Tuukka Toivonen <tuukkat76@gmail.com>
           Pavel Machek <pavel@ucw.cz>
  Based on code from Toni Leinonen <toni.leinonen@offcode.fi>.
  This driver is based on the Micron MT9T012 camera imager driver
  (C) Texas Instruments.
  This table describes what should be written to the sensor register
  for each gain value. The gain(index in the table) is in terms of
  0.1EV, i.e. 10 indexes in the table give 2 time more gain [0] in
  the analog gain, [1] in the digital gain
  Analog gain [dB] = 20log10(regvalue32); 0x20..0x100
 x1 
 x2 
 x4 
 x8 
 x16 
 Register definitions 
 msec delay bw accesses 
  Register access helpers
  Read a 81632-bit i2c register.  The value is returned in 'val'.
  Returns zero if successful, or non-zero otherwise.
 high byte goes out first 
 high byte comes first 
 Write 
 high byte goes out first 
  A buffered write method that puts the wanted register write
  commands in smaller number of message lists and passes the lists to
  the i2c framework
 Create new write messages for all writes 
 Update write count 
  Write a list of registers to i2c device.
  The list of registers is terminated by ET8EK8_REG_TERM.
  Returns zero if successful, or non-zero otherwise.
 Initialize list pointers to the start of the list 
		
		  We have to go through the list to figure out how
		  many regular writes we have in a row
			
			  Here we check that the actual length fields
			  are valid
			
			  Increment count of successive writes and
			  read pointer
 Now we start writing ... 
 ... and then check that everything was OK 
		
		  If we ran into a sleep statement when going through
		  the list, this is where we snooze for the required time
			
			  ZZZ ...
			  Update list pointers and cnt and start over ...
  Write to a 816-bit register.
  Returns zero if successful, or non-zero otherwise.
	
	  Find the mode with the closest image size. The distance between
	  image sizes is the size in pixels of the non-overlapping regions
	  between the requested size and the frame-specified size.
	 
	  Store both the closest mode that matches the requested format, and
	  the closest mode for all other formats. The best match is returned
	  if found, otherwise the best mode with a non-matching format is
	  returned.
 Put real modes in the beginning. 
 Descending width. 
 Called to change the V4L2 gain control value. This function
  rounds and clamps the given value and updates the V4L2 control value.
  If power is on, also updates the sensor analog and digital gains.
  gain is in 0.1 EV (exposure value) units.
 FIXME: optimise I2C writes! 
 Values for normal mode 
 Test pattern mode 
 -----------------------------------------------------------------------------
  V4L2 controls
 V4L2_CID_GAIN 
 V4L2_CID_PIXEL_RATE 
 V4L2_CID_TEST_PATTERN 
	
	  Calculate average pixel clock per line. Assume buffers can spread
	  the data over horizontal blanking time. Rounding upwards.
	  Formula taken from stock Nokia N900 kernel.
	 Controls set while the power to the sensor is turned off are saved
	  but not applied to the hardware. Now that we're about to start
	  streaming apply all the current values to the hardware.
 --------------------------------------------------------------------------
  V4L2 subdev operations
 I wish this is a good value 
 Wait 5000 cycles 
 TODO get crc setting from DT 
 --------------------------------------------------------------------------
  V4L2 subdev video operations
 Assume that the modes are grouped by frame size. 
 Read the EEPROM window-by-window, each window 8 bytes 
 Set the current window 
 Wait for status bit 
 Read window, 8 bytes at once, and copy to user space 
 Offset within this window 
 Needed to be able to read EEPROM 
 --------------------------------------------------------------------------
  sysfs attributes
 --------------------------------------------------------------------------
  V4L2 subdev core operations
	 If the power count is modified from 0 to != 0 or from != 0 to 0,
	  update the power state.
 Update the power count. 
 --------------------------------------------------------------------------
  I2C driver
 SPDX-License-Identifier: GPL-2.0-only
  Samsung LSI S5C73M3 8M pixel camera driver
  Copyright (C) 2012, Samsung Electronics, Co., Ltd.
  Sylwester Nawrocki <s.nawrocki@samsung.com>
  Andrzej Hajda <a.hajda@samsung.com>
 Set exposure meteringexposure bias 
 V4L2_SCENE_MODE_NONE 
 V4L2_SCENE_MODE_BACKLIGHT 
 V4L2_SCENE_MODE_BEACH_SNOW 
 V4L2_SCENE_MODE_CANDLE_LIGHT 
 V4L2_SCENE_MODE_DAWN_DUSK 
 V4L2_SCENE_MODE_FALL_COLORS 
 V4L2_SCENE_MODE_FIREWORKS 
 V4L2_SCENE_MODE_LANDSCAPE 
 V4L2_SCENE_MODE_NIGHT 
 V4L2_SCENE_MODE_PARTY_INDOOR 
 V4L2_SCENE_MODE_PORTRAIT 
 V4L2_SCENE_MODE_SPORTS 
 V4L2_SCENE_MODE_SUNSET 
 V4L2_SCENE_MODE_TEXT 
	
	  If the device is not powered up by the host driver do
	  not apply any controls to HW at this time. Instead
	  the controls will be restored right after power-up.
 Supported manual ISO values 
 COMM_ISO: 0x0001...0x0004 
 Supported exposure bias values (-2.0EV...+2.0EV) 
 COMM_EV: 0x0000...0x0008 
 White balance 
 Exposure (only automatic exposure) 
 Auto focus 
 ISO sensitivity 
 SPDX-License-Identifier: GPL-2.0-only
  Samsung LSI S5C73M3 8M pixel camera driver
  Copyright (C) 2012, Samsung Electronics, Co., Ltd.
  Sylwester Nawrocki <s.nawrocki@samsung.com>
  Andrzej Hajda <a.hajda@samsung.com>
 Digital Core supply (1.2V), CAM_ISP_CORE_1.2V 
 Analog Core supply (1.2V), CAM_SENSOR_CORE_1.2V 
 Regulator input supply (2.8V), CAM_SENSOR_A2.8V 
	"vddio-host",	 Digital Host IO power supply (1.8V...2.8V),
	"vddio-cis",	 Digital CIS IO power (1.2V...1.8V),
 Lens, CAM_AF_2.8V 
 30 fps 
	
	  Issue repeated START after writing 2 address bytes and
	  just one STOP only after reading the data bytes.
 Run ARM MCU 
 Check booting status 
 P,M,S and Boot Mode 
 Check SPI status 
 Firmware download over SPI 
 MCU reset 
 Remap 
 MCU restart 
 Run ARM MCU 
 Check booting status 
 Change IO Driver Current in order to read from F-ROM 
 Offset Setting 
 P,M,S and Boot Mode 
 Check SPI status 
 ARM reset 
 Remap 
 Run ARM MCU 
 Check booting status 
 Check the binary read status 
 ARM reset 
 Remap 
 MCU re-start 
	
	  Number of MIPI CSI-2 data lanes is currently not configurable,
	  always a default value of 4 lanes is used.
 Static name; NEVER use in new drivers! 
 SPDX-License-Identifier: GPL-2.0-only
  Samsung LSI S5C73M3 8M pixel camera driver
  Copyright (C) 2012, Samsung Electronics, Co., Ltd.
  Sylwester Nawrocki <s.nawrocki@samsung.com>
  Andrzej Hajda <a.hajda@samsung.com>
 SPDX-License-Identifier: GPL-2.0-or-later
  stv6110.c
  Driver for ST STV6110 satellite tuner IC.
  Copyright (C) 2009 NetUP Inc.
  Copyright (C) 2009 Igor M. Liplianin <liplianin@netup.ru>
 Max transfer size done by I2C transfer functions 
BW2 max=31+5=36 mhz for r8=31
 BW2 min=5Mhz for F=0 
if 5 < BW2 < 36
 ctrl3, RCCLKOFF = 0 Activate the calibration Clock 
 ctrl3, CF = r8 Set the LPF value 
 stat1, CALRCSTRT = 1 Start LPF auto calibration
 Wait for CALRCSTRT == 0 
 wait for LPF auto calibration 
 RCCLKOFF = 1 calibration done, deactivate the calibration Clock 
 K = (Reference  1000000) - 16 
 divisor value for the output clock 
N
R
p
 K = (Reference  1000000) - 16 
 BB_GAIN = db2 
 DIV4SEL = p
 PRESC32ON = presc 
 P = 2 or P = 4 
 RDIV = r_div_opt 
 NDIV_MSB = MSB(divider) 
 NDIV_LSB, LSB(divider) 
 CALVCOSTRT = 1 VCO Auto Calibration 
 Wait for CALVCOSTRT == 0 
 wait for VCO auto calibration 
 CF 
 x2 for ZIF tuner BW2 = F+5 Mhz 
 divisor value for the output clock 
 SPDX-License-Identifier: GPL-2.0-or-later
  Montage Technology M88DS3103M88RS6000 demodulator driver
  Copyright (C) 2013 Antti Palosaari <crope@iki.fi>
 write single register with mask 
 no need for read if whole reg is written 
 write reg val table using reg addr auto increment 
  m88ds3103b demod has an internal device related to clocking. First the i2c
  gate must be opened, for one transaction, then writes will be allowed.
  m88ds3103b demod has an internal device related to clocking. First the i2c
  gate must be opened, for two transactions, then reads will be allowed.
  Get the demodulator AGC PWM voltage setting supplied to the tuner.
 CNR 
 more iterations for more accurate estimation 
 use of single register limits max value to 15 dB 
 SNR(X) dB = 10  ln(X)  ln(10) dB 
 [13:6] 
  [5:0] 
 SNR(X) dB = 10  log10(X) dB 
 BER 
 measurement ready? 
 restart measurement 
 enough data? 
 TODO: FEC 
 restart measurement 
 TODO: IS THIS NECESSARY ? 
 Write to registers 
reg15 &= 0x01;
reg15 |= (pll_div_fb >> 8) & 0x01;
reg16 = pll_div_fb & 0xFF;
 silence compiler warning 
 reset 
 Disable demod clock path 
 program tuner 
		
		  Use nominal target frequency as tuner driver does not provide
		  actual frequency used. Carrier offset calculation is not
		  valid.
 set M88RS6000DS3103B demod main mclk and ts mclk from tuner die 
 Enable demod clock path 
 set M88DS3103 mclk and ts mclk. 
 0b10 
 0b01 
 0b00 
 0b01 
 0b11 
 0b00 
 program init table 
 TS mode 
 u8tmp1[5:2] => fe[3:0], u8tmp1[1:0] => ea[7:6] 
 u8tmp2[5:0] => ea[5:0] 
 enabledisable 192M LDPC clock 
 Use 32-bit calc as there is no s64 version of DIV_ROUND_CLOSEST() 
 set cold state by default 
 wake up device from sleep 
 firmware status 
 global reset, global diseqc reset, global fec reset 
 cold state - try to download firmware 
 request the firmware, this will block and timeout 
 warm state 
 init stats here in order signal app which stats are supported 
 TS Hi-Z 
 sleep 
 output pin polarity 
 wait DiSEqC TX ready 
 DiSEqC message period is 13.5 ms per byte 
 wait DiSEqC TX ready 
 DiSEqC ToneBurst period is 12.5 ms 
 Open tuner I2C repeater for 1 xfer, closes automatically 
  XXX: That is wrapper to m88ds3103_probe() via driver core in order to provide
  proper I2C client for legacy media attach binding.
  New users must use I2C client binding directly!
 create regmap 
 0x00: chip id[6:0], 0x01: chip ver[7:0], 0x02: chip ver[15:8] 
 0x29 register is defined differently for m88rs6000. 
 set internal tuner address to 0x21 
 sleep 
 create mux i2c adapter for tuner 
 create dvb_frontend 
 setup callbacks 
 enable i2c repeater for tuner 
 get frontend address 
 SPDX-License-Identifier: GPL-2.0-or-later
    Driver for Zarlink VP310MT312ZL10313 Satellite Channel Decoder
    Copyright (C) 2003 Andreas Oberritter <obi@linuxtv.org>
    Copyright (C) 2008 Matthias Schwarzott <zzam@gentoo.org>
    References:
    http:products.zarlink.comproduct_profilesMT312.htm
    http:products.zarlink.comproduct_profilesSL1935.htm
 Max transfer size done by I2C transfer functions 
 configuration settings 
 10 MHz 
 10.111 MHz 
 see gcc.gnu.orgbugzillashow_bug.cgi?id=81715 
 auto inversion was used 
 symbol rate search was used 
 wake up 
 wait at least 150 usec 
 full reset 
 Per datasheet, write correct values. 092803 ACCJr.
 enable ADC 
 configure ZL10313 for optimal ADC performance 
 enable MPEG output and ADCs 
 SYS_CLK 
 DISEQC_RATIO 
 different MOCLK polarity 
 TS_SW_LIM 
 is there a better way to wait for message to be transmitted 
 set DISEQC_MODE[2:0] to zero if a return message is expected 
 signal noise ratio 
 qpsk carrier lock 
 viterbi lock 
 byte align lock 
 qpsk lock 
	 For now we will do this only for the VP310.
	  It should be better for the mt312 as well,
	  but tuning will be slower. ACCJr 092903
 Note that 30MSs should use 90MHz 
 We are running 60MHz 
 We are running 90MHz 
 sr = (u16)(sr  256.0  1000000.0) 
 SYM_RATE 
 VIT_MODE 
 QPSK_CTRL 
 swap I and Q before QPSK demodulation 
 use afc mode 
 GO 
 preserve this bit to not accidentally shutdown ADC 
 reset all registers to defaults 
 reset ADC 
 full shutdown of ADCs, mpeg bus tristated 
 enter standby 
 90 MHz 
 FIXME: adjust freq to real used xtal 
 FIXME as above 
 allocate memory for the internal state 
 setup the state 
 check if the demod is there 
 create dvb_frontend 
 SPDX-License-Identifier: GPL-2.0-or-later
     Driver for Philips tda1004xh OFDM Demodulator
     (c) 2003, 2004 Andrew de Quincey & Robert Schlabbach
  This driver needs external firmware. Please use the commands
  "<kerneldir>scriptsget_dvb_firmware tda10045",
  "<kerneldir>scriptsget_dvb_firmware tda10046" to
  downloadextract them, and then copy them to usrlibhotplugfirmware
  or libfirmware (depending on configuration of firmware hotplug).
 read a byte and check
 mask if off
 write it out again
 clear code counter 
 work out how much to send this time
 send the chunk
 give the DSP a chance to settle 031005 Hac 
 check upload was OK
 we want to read from the DSP
 don't re-upload unless necessary 
 request the firmware, this will block until someone uploads it 
 reset chip 
 set parameters 
 wait for DSP to initialise 
 DSPREADY doesn't seem to work on the TDA10045H 
 PLL M = 8
 PLL M = 3
 PLL P = N = 0
 PLL P = 0, N = 3
 Note clock frequency is handled implicitly 
 default bandwidth 8 MHz 
 let the PLLs settle 
 reset + wake up chip 
 set GPIO 1 and 3 
 let the clocks recover from sleep 
 The PLLs need to be reprogrammed after sleep 
 don't re-upload unless necessary 
	
	   For i2c normal work, we need to slow down the bus speed.
	   However, the slow down breaks the eeprom firmware load.
	   So, use normal speed for eeprom booting and then restore the
	   i2c speed after that. Tested with MSI TV @nyware AD board,
	   that comes with firmware version 29 inside their eeprom.
	   It should also be noticed that no other I2C transfer should
	   be in course while booting from eeprom, otherwise, tda10046
	   goes into an instable state. So, proper locking are needed
	   at the i2c bus master.
 Checks if eeprom firmware went without troubles 
 eeprom firmware didn't work. Load one manually. 
 request the firmware, this will block until someone uploads it 
 remain compatible to old bug: try to load with tda10045 image name 
 going to boot from HOST
 convert known FEC values
 unsupported
 convert known FEC values
 unsupported
 wake up the ADC
 tda setup
 disable DSP watchdog timer
 select HP stream
 set polarity of VAGC signal
 enable pulse killer
 enable auto offset
 no frequency offset
 setup MPEG2 TS interface
 setup MPEG2 TS interface
 10^6 VBER measurement bits
 VAGC polarity
 tda setup
 disable DSP watchdog timer
 100 ppm crystal, select HP stream
 enable pulse killer
 AGC setup
 set AGC polarities
 AGC setup
 set AGC polarities
 AGC setup
 set AGC polarities
 AGC setup
 AGC Threshold
 Gain Renormalize
 set AGC polarities
 Turn IF AGC output on
 }
 } AGC minmax values
 }
 }
 IF gain 2, TUN gain 1
 10^6 VBER measurement bits
 MPEG2 interface config
 MPEG2 interface config
 tda1004x_write_mask(state, 0x50, 0x80, 0x80);         
 setup auto offset
 disable agc_conf[2]
 set frequency
 Hardcoded to use auto as much as possible on the TDA10045 as it
 is very unreliable if AUTO mode is _not_ used.
 Set standard params.. or put them to auto
 enable auto
 turn off modulation bits 
 turn off hierarchy bits
 turn off FEC bits
 disable auto
 set HP FEC
 set LP FEC
 set modulation 
 set hierarchy
 set bandwidth
 set inversion
 set guard interval
 set transmission mode
 start the lock
 Only update the properties cache if device is locked 
 inversion status
 bandwidth
 FEC
 modulation 
 transmission mode
 guard interval
 hierarchy
 read status
 decode
 if we don't already have VITERBI (i.e. not LOCKED), see if the viterbi
 is getting anything valid
 read the CBER
 The address 0x20 should be read to cope with a TDA10046 bug
 if we DO have some valid VITERBI output, but don't already have SYNC
 bytes (i.e. not LOCKED), see if the RS decoder is getting anything valid.
 read the VBER
 The CVBER_LUT should be read to cope with TDA10046 hardware bug
 if RS has passed some valid TS packets, then we must be
 getting some SYNC bytes
 success
 determine the register to use
 read it
 read it
 read the UCBLOCKS and reset
 read it in
 The address 0x20 should be read to cope with a TDA10046 bug
 set outputs to tristate 
 invert GPIO 1 and 3 if desired
 Drift compensation makes no sense for DVB-T 
 allocate memory for the internal state 
 setup the state 
 check if the demod is there 
 create dvb_frontend 
 allocate memory for the internal state 
 setup the state 
 check if the demod is there 
 create dvb_frontend 
 SPDX-License-Identifier: GPL-2.0-or-later
  CIMaX SP2SP2HF (Atmel T90FJR) CI driver
  Copyright (C) 2014 Olli Salonen <olli.salonen@iki.fi>
  Heavily based on CIMax2(R) SP2 driver in conjunction with NetUp Dual
  DVB-S2 CI card (cimax2) with following copyrights:
   Copyright (C) 2009 NetUP Inc.
   Copyright (C) 2009 Igor M. Liplianin <liplianin@netup.ru>
   Copyright (C) 2009 Abylay Ospan <aospan@netup.ru>
	
	  change module access type between IO space and attribute memory
	  when needed
 implementation of ci_op_cam is device specific 
 RST on 
 RST off 
 not implemented 
 disable bypass and enable TS 
	
	  CAM module INSERTREMOVE processing. Slow operation because of i2c
	  transfers. Throttle read to one per sec.
 module A control
 auto select mask high A 
 auto select mask low A 
 auto select pattern high A 
 auto select pattern low A 
 memory access time A, 600 ns 
 invert input A 
 RFU 
 RFU 
 module B control
 auto select mask high B 
 auto select mask low B 
 auto select pattern high B 
 auto select pattern low B 
 memory access time B, 600 ns 
 invert input B 
 RFU 
 RFU 
 auto select mask high Ext 
 auto select mask low Ext 
 auto select pattern high Ext 
 auto select pattern low Ext 
 RFU 
 destination - module A 
 power control reg, VCC power on 
 RFU 
 int status read only 
 Interrupt Mask Register 
 EXTINT=active-high, INT=push-pull 
 USCG1 
 ack active low 
 LOCK = 0 
 unknown 
 synchronization? 
 initialize all regs 
 lock registers 
 power on slots 
 SPDX-License-Identifier: GPL-2.0-or-later
     Support for Legend Silicon GB20600 (a.k.a DMB-TH) demodulator
     LGS8913, LGS8GL5, LGS8G75
     experimental support LGS8G42, LGS8G52
     Copyright (C) 2007-2009 David T.L. Wong <davidtlwong@gmail.com>
     Copyright (C) 2008 Sirius International (Hong Kong) Limited
     Timothy Lee <timothy.lee@siriushk.com> (for initial work on LGS8GL5)
 LGS8GXX internal helper functions 
 AGC output on, RF_AGC output off; 
 Baseband 
in kHz)
 clear FEC self reset 
 FEC auto detect 
 BER test mode 
 turn off auto-detect; manual settings 
 Wait for Code Acquisition Lock 
 Guard Interval 
 Apply detected parameters 
 Fix 8913 time interleaver detection bug 
 lgs8gxx_soft_reset(priv); 
 Enter manual mode 
 AD input peak-to-peak voltage range 
 LGS8913 demod frontend functions 
 LGS8913 specific 
 LGS8913 specific 
 Setup MPEG output format 
 set frequency 
 start auto lock 
 TODO: get real readings from device 
 bandwidth 
 transmission mode 
 guard interval 
 hierarchy 
 FIXME: copy from tda1004x.c 
 success 
 check if the demod is there 
 SPDX-License-Identifier: GPL-2.0-or-later
  E3C EC100 demodulator driver
  Copyright (C) 2009 Antti Palosaari <crope@iki.fi>
 write single register 
 read single register 
 program tuner 
	 regbw |   6  |   7  |   8
	   -------+------+------+------
	   A 0x1b | 0xa1 | 0xe7 | 0x2c
	   A 0x1c | 0x55 | 0x63 | 0x72
	   -------+------+------+------
	   B 0x1b | 0xb7 | 0x00 | 0x49
 if freq 
 if freq 
 go 
 go 
 bit7 set - have lock 
 bit4 set - have signal 
 bit0 clear - have ~valid signal 
 if counter overflow or clear 
 allocate memory for the internal state 
 setup the state 
 check if the demod is there 
 create dvb_frontend 
 SPDX-License-Identifier: GPL-2.0-or-later
    Auvitek AU8522 QAM8VSB demodulator driver
    Copyright (C) 2008 Steven Toth <stoth@linuxtv.org>
    Copyright (C) 2008 Devin Heitmueller <dheitmueller@linuxtv.org>
    Copyright (C) 2005-2008 Auvitek International, Ltd.
    Copyright (C) 2012 Michael Krufky <mkrufky@linuxtv.org>
 Despite the name "hybrid_tuner", the framework works just as well for
 16 bit registers, 8 bit values 
		 We're being asked to manage the gate even though we're
		   not in digital mode.  This can occur if we get switched
		   over to analog mode before the dvb_frontend kernel thread
 Reset the demod hardware and reset all of the configuration registers
 bail out if we can't control an LED 
 enable GPIO output 
 disable GPIO output 
 led = 0 | off
  led = 1 | signal ok
  led = 2 | signal strong
  led < 0 | only light led if leds are currently off
 bail out if we can't control an LED 
 if LED is already lit, then leave it as-is 
 toggle LED if changing state 
 start with all leds off 
 set selected LED state 
	 Clear out any state associated with the digital side of the
	   chip, so that when it gets powered back up it won't think
 Only power down if the digital side is currently using the chip 
		 We're not in one of the expected power modes, which means
		   that the DVB thread is probably telling us to go to sleep
		   even though the analog frontend has already started using
 turn off led 
 Power down the chip 
 SPDX-License-Identifier: GPL-2.0-or-later
  Realtek RTL2832 DVB-T demodulator driver
  Copyright (C) 2012 Thomas Mair <thomas.mair86@gmail.com>
  Copyright (C) 2012-2014 Antti Palosaari <crope@iki.fi>
	
	 PSET_IFFREQ = - floor((IfFreqHz % CrystalFreqHz)  pow(2, 22)
			 CrystalFreqHz)
 initialization values for the demodulator registers 
 load tuner specific settings 
 init stats here in order signal app which stats are supported 
 6 MHz bandwidth 
  7 MHz bandwidth 
  8 MHz bandwidth 
 program tuner 
 If the frontend has get_if_frequency(), use it 
	 calculate and set resample ratio
	 RSAMP_RATIO = floor(CrystalFreqHz  7  pow(2, 22)
		 ConstWithBandwidthMode)
	 calculate and set cfreq off ratio
	 CFREQ_OFF_RATIO = - floor(ConstWithBandwidthMode  pow(2, 20)
		 (CrystalFreqHz  7))
 soft reset 
 signal strength 
 read digital AGC 
 CNR 
 [3:2] 
 [6:4] 
 BER 
 report SNR in resolution of 0.1 dB 
  I2C gatemuxrepeater logic
  There is delay mechanism to avoid unneeded I2C gate open  close. Gate close
  is delayed here a little bit in order to see if there is sequence of I2C
  messages sent to same I2C bus.
 close gate 
 terminate possible gate closing 
 open gate 
 enable  disable PID filter 
 skip invalid PIDs (0x2000) 
 enable  disable PIDs 
 add PID 
 allocate memory for the internal state 
 setup the state 
 create regmap 
 check if the demod is there 
 create muxed i2c adapter for demod tuner bus 
 create dvb_frontend 
 setup callbacks 
 SPDX-License-Identifier: GPL-2.0-only
  Linux-DVB Driver for DiBcom's second generation DiB7000P (PC).
  Copyright (C) 2005-7 DiBcom (http:www.dibcom.fr)
 for the I2C transfer 
 for DVBv5 stats 
 dib7090 specific functions 
 0x0400 
 0x0440 
 0x0480 
 0x0500 
 synchronous fread 
 P_Div_active 
 P_dvsy_sync_mode = 0, P_dvsy_sync_enable=1, P_dvcb_comb_mode=2 
 by default everything is powered off 
 now, depending on the requested mode, we power on 
 power up everything in the demod 
 dem, cfg, iqc, sad, agc 
 nud 
 Dout 
 just leave power on the control-interfaces: GPIO and (I2C or SDIO) 
 TODO power up either SDIO or I2C 
 TODO following stuff is just converted from the dib7000-driver - check when is used what 
 en_slowAdc = 1 & reset_sladc = 1 
 read access to make it works... strange ... 
 en_slowAdc = 1 & reset_sladc = 0 
 ref = Vin1 => Vbg ; sel = Vin0 or Vin3 ; (Vin2 = Vcm) 
 reset_sladc = 1 en_slowAdc = 0 
	dprintk( "908: %x, 909: %x\n", reg_908, reg_909);
 store the current bandwidth for later use
 internal 
 do the calibration 
 force PLL bypass 
 P_pll_cfg 
 get back old values 
 write new system clk into P_sec_len 
 new internal 
 reset the GPIOs 
 TODO 1031 is P_gpio_od 
 reset the direction bit 
 set the new direction 
 reset the direction bit 
 set the new value 
 auto search configuration
 Equal Lock 
 set ADC level to -16 
 disable power smoothing 
 restart all parts 
 default 
 impulse noise 
 P_iqc_thsat_ipc = 1 ; P_iqc_win2 = 3 
-300 fag P_iqc_dect_min = -280 
 300 fag P_iqc_dect_min = +280 
 unforce divstr regardless whether i2c enumeration was done or not 
 P_iqc_impnc_on =1 & P_iqc_corr_inh = 1 for impulsive noise 
 P_restart_iqc & P_restart_agc
 AGC 
 Demod AGC loop configuration
 AGC continued 
 226  Fsampling is the unit 1KHz offset 
 IF tuner 
 100 because of 100 on the unit_khz_dds_val line calc for better accuracy 
 Max dds offset is the half of the demod freq 
 lsb 
 enable adc i & q 
 we are using the wbd - so slow AGC startup 
 force 0 split on WBD and restart AGC 
 default AGC startup 
 wait AGC rough lock time 
 fast split search path after 5sec 
 freeze AGC loop 
 fast split search 0.25kHz 
 split search ended 
 store the split value for the next time 
 set AGC gain start value 
 std AGC loop 
 standard split search 
 LNA startup 
 nfft, guard, qam, alpha 
 do not force tps, search list 0 
 P_dintl_native, P_dintlv_inv, P_hrch, P_code_rate, P_select_hp 
 offset loop parameters 
 P_dvsy_sync_wait 
 deactivate the possibility of diversity reception if extended interleaver 
 channel estimation fine configuration 
 P_adp_regul_cnt 0.04 
 P_adp_noise_cnt -0.002 
 P_adp_regul_ext 0.02 
 P_adp_noise_ext -0.001 
 P_adp_regul_cnt 0.07 
 P_adp_noise_cnt -0.004 
 P_adp_regul_ext 0.02 
 P_adp_noise_ext -0.002 
 P_adp_regul_cnt 0.3 
 P_adp_noise_cnt -0.01 
 P_adp_regul_ext 0.1 
 P_adp_noise_ext -0.002 
 restart demod
 P_ctrl_inh_cor=0, P_ctrl_alpha_cor=4, P_ctrl_inh_isi=0, P_ctrl_alpha_isi=3, P_ctrl_inh_cor4=1, P_ctrl_alpha_cor4=3 
 never achieved a lock with that bandwidth so far - wait for osc-freq to update
 offset loop parameters 
 P_timf_alpha, P_corm_alpha=6, P_corm_thres=0x80 
 timf_a(6xxx) 
 P_ctrl_freeze_pha_shift=0, P_ctrl_pha_off_max 
 P_ctrl_sfreq_inh=0, P_ctrl_sfreq_step 
 restart the fec 
 we achieved a lock - it's time to update the osc freq
 P_timf_alpha += 2 
 case 2: fep->transmission_mode = TRANSMISSION_MODE_4K; break; 
 as long as the frontend_param structure is fixed for hierarchical transmission I refuse to use it 
 (tps >> 13) & 0x1 == hrch is used, (tps >> 10) & 0x7 == alpha 
 native interleaver: (dib7000p_read_word(state, 464) >>  5) & 0x1 
 maybe the parameter has been changed 
 start up the AGC 
 make this a config parameter 
  Table to estimate signal strength in dBm.
  This table should be empirically determinated by measuring the signal
  strength generated by a RF generator directly connected into
  a device.
  This table was determinated by measuring the signal strength generated
  by a DTA-2111 RF generator directly connected into a dib7000p device
  (a Hauppauge Nova-TD stick), using a good quality 3 meters length
  RC6 cable and good RC6 connectors, connected directly to antenna 1.
  As the minimum output power of DTA-2111 is -31dBm, a 16 dBm attenuator
  were used, for the lower power values.
  The real value can actually be on other devices, or even at the
  second antena input, depending on several factors, like if LNA
  is enabled or not, if diversity is enabled, type of connectors, etc.
  Yet, it is better to use this measure in dB than a random non-linear
  percentage value, especially for antenna adjustments.
  On my tests, the precision of the measure using this table is about
  0.5 dB, with sounds reasonable enough to adjust antennas.
 If value is identical, no need to interpolate 
 Linear interpolation between the two (x,y) points 
 FIXME: may require changes - this one was borrowed from dib8000 
	
	  FIXME: check if the math makes sense. If so, fill the
	  interleaving var.
 If calculus gets wrong, wait for 1s for the next stats 
 Estimate the period for the total bit rate 
 Get Signal strength 
 UCBBERCNR measures require lock 
 Check if time for stats was elapsed 
 Get SNR 
 Get UCB measures 
 Estimate the number of packets based on bitrate 
 Get post-BER measures 
 Get PER measures 
 designated i2c address 
 sram lead in, rdy 
 sram lead in, rdy 
 start diversity to pull_down div_str - just for i2c-enumeration 
 set new i2c address and force divstart 
 unforce divstr
 deactivate div - it was just for i2c-enumeration 
 index of the LUT 
 else = Tuner regs to ignore : DIG_CFG, CTRL_RF_LT, PLL_CFG, PWM1_REG, ADCCLK, DIG_CFG_3; SLEEP_EN... 
 write 
 read 
 write 
 write 
 Set the proper input 
 RW access via APB 
 RW access via SERPAR  
 drive host bus 2, 3, 4 
 drive host bus 5,6 
 drive host bus 7, 8, 9 
 drive host bus 10, 11 
 drive host bus 12, 13, 14 
 If the input mode is MPEG do not divide the serial clock 
 only use the internal way - not the diversity input 
 Do not divide the serial clock of MPEG MUX 
 in SERIAL MODE in case input mode MPEG is used 
 enSerialClkDiv2 == 1 ? 
 force enSerialClkDiv2 = 0 
 both ways 
 only the diversity input 
 Use Smooth block 
 Use Smooth block 
 Using Smooth block only 
 Using Smooth block because not supported by new Mpeg Mux bloc 
 synchronous fread 
	 Ensure the output mode remains at the previous default if it's
	  not specifically set by the caller.
 sram lead in, rdy 
	 FIXME: make sure the dev.parent field is initialized, or else
	   request_firmware() will hit an OOPS (this should be moved somewhere
 init 7090 tuner adapter 
 SPDX-License-Identifier: GPL-2.0-or-later
  Linux-DVB Driver for DiBcom's DiB0070 base-band RF Tuner.
  Copyright (C) 2005-9 DiBcom (http:www.dibcom.fr)
  This code is more or less generated from another driver, please
  excuse some codingstyle oddities.
 for the captrim binary search 
 for the I2C transfer 
 sharpen the BB filter in ISDB-T to have higher immunity to adjacent channels 
 for every frequency less than or equal to that field: this information is correct 
 for every frequency less than or equal to that field: this information is correct 
 UHF 
 LBAND 
 SBAND 
 FM below 92MHz cannot be tuned 
 VHF 
 UHF 
 LBAND or everything higher than UHF 
 VHF 
 UHF 
 LBAND or everything higher than UHF 
 VHF 
 UHF 
 LBAND or everything higher than UHF 
 1ms is the default delay most of the time 
 find the right one 
 find the right one 
 we are already tuned to this frequency - the configuration is correct  
 wakeup time 
 find the right one 
 tuner finished, time to call again infinite 
 find the right one 
 P1F or not 
      .get_bandwidth = dib0070_get_bandwidth
 SPDX-License-Identifier: GPL-2.0-only
  drxd_firm.c : DRXD firmware tables
  Copyright (C) 2006-2007 Micronas
 TODO: generate this file with a script from a settings file 
 Contains A2 firmware version: 1.4.2
  Contains B1 firmware version: 3.3.33
  Contains settings from driver 1.4.23
 Is written via block write, must be little endian 
 HI firmware patches 
 size of this function in instruction words 
 0         -> ring.rdy;           
 r0rami.dt -> ring.xba;           
 r0rami.dt -> ring.xad;           
 HI_RA_RAM_USR_BEGIN -> ring.iad; 
 (long immediate)                 
 r0rami.dt -> ring.len;           
 r0rami.dt -> ring.ctl;           
 0         -> ring.rdy;           
 0         -> jumps.ad;           
 Pins D0 and D1 of the parallel MPEG output can be used
 size of this function in instruction words 
 D0 Version 
 MASK      -> reg0.dt;                        
 (EC__BLK << 6) + EC_OC_REG__BNK -> ring.xba; 
 EC_OC_REG_OC_MPG_SIO__A -> ring.xad;         
 M_BNK_ID_DAT -> ring.iba;                    
 &data     -> ring.iad;                       
 0         -> ring.len;                       
 M_RC_CTR_SWAP | M_RC_CTR_READ -> ring.ctl;   
 0         -> ring.rdy;                       
 &data+1   -> w0ram.ad;                       
 -1        -> w0ram.dt;                       
 &data+1   -> ring.iad;                       
 M_RC_CTR_SWAP | M_RC_CTR_WRITE -> ring.ctl;  
 0         -> ring.rdy;                       
 EC_OC_REG_OCR_MPG_USR_DAT__A -> ring.xad;    
 M_RC_CTR_SWAP | M_RC_CTR_READ -> ring.ctl;   
 0         -> ring.rdy;                       
 EC_OC_REG_OC_MPG_SIO__A -> ring.xad;         
 &data     -> ring.iad;                       
 M_RC_CTR_SWAP | M_RC_CTR_WRITE -> ring.ctl;  
 0         -> ring.rdy;                       
 &data+1   -> w0ram.ad;                       
 r0ram.dt  -> and.op;                         
 reg0.dt   -> and.tr;                         
 and.rs    -> add.op;                         
 DEF_DEV_ID -> add.tr;                        
 add.rs    -> add.tr;                         
 add.rs    -> reg0.dt;                        
 reg0.dt   -> w0ram.dt;                       
 SLV0_BASE -> w0rami.ad;                      
 0         -> w0rami.dt;                      
 reg0.dt   -> w0rami.dt;                      
 SLV1_BASE -> w0rami.ad;                      
 0         -> w0rami.dt;                      
 reg0.dt   -> w0rami.dt;                      
 CMD_BASE  -> w0rami.ad;                      
 0         -> w0rami.dt;                      
 0         -> w0rami.dt;                      
 0         -> w0rami.dt;                      
 M_IC_SEL_PT1 -> i2c.sel;                     
 M_IC_CMD_RESET -> i2c.cmd;                   
 M_IC_SEL_PT0 -> i2c.sel;                     
 M_IC_CMD_RESET -> i2c.cmd;                   
 0x2F      -> jumps.ad;                       
 Force quick and dirty reset 
 D0,D1 Version 
 MASK      -> reg0.dt;                        
 (EC__BLK << 6) + EC_OC_REG__BNK -> ring.xba; 
 EC_OC_REG_OC_MPG_SIO__A -> ring.xad;         
 M_BNK_ID_DAT -> ring.iba;                    
 &data     -> ring.iad;                       
 0         -> ring.len;                       
 M_RC_CTR_SWAP | M_RC_CTR_READ -> ring.ctl;   
 0         -> ring.rdy;                       
 &data+1   -> w0ram.ad;                       
 -1        -> w0ram.dt;                       
 &data+1   -> ring.iad;                       
 M_RC_CTR_SWAP | M_RC_CTR_WRITE -> ring.ctl;  
 0         -> ring.rdy;                       
 EC_OC_REG_OCR_MPG_USR_DAT__A -> ring.xad;    
 M_RC_CTR_SWAP | M_RC_CTR_READ -> ring.ctl;   
 0         -> ring.rdy;                       
 EC_OC_REG_OC_MPG_SIO__A -> ring.xad;         
 &data     -> ring.iad;                       
 M_RC_CTR_SWAP | M_RC_CTR_WRITE -> ring.ctl;  
 0         -> ring.rdy;                       
 &data+1   -> w0ram.ad;                       
 r0ram.dt  -> and.op;                         
 reg0.dt   -> and.tr;                         
 and.rs    -> add.op;                         
 DEF_DEV_ID -> add.tr;                        
 add.rs    -> add.tr;                         
 add.rs    -> reg0.dt;                        
 reg0.dt   -> w0ram.dt;                       
 SLV0_BASE -> w0rami.ad;                      
 0         -> w0rami.dt;                      
 reg0.dt   -> w0rami.dt;                      
 SLV1_BASE -> w0rami.ad;                      
 0         -> w0rami.dt;                      
 reg0.dt   -> w0rami.dt;                      
 CMD_BASE  -> w0rami.ad;                      
 0         -> w0rami.dt;                      
 0         -> w0rami.dt;                      
 0         -> w0rami.dt;                      
 M_IC_SEL_PT1 -> i2c.sel;                     
 M_IC_CMD_RESET -> i2c.cmd;                   
 M_IC_SEL_PT0 -> i2c.sel;                     
 M_IC_CMD_RESET -> i2c.cmd;                   
 0x2F      -> jumps.ad;                       
 Force quick and dirty reset 
 CE_REG_FR_TREAL00__A 
 CE_REG_FR_TIMAG00__A 
 CE_REG_FR_TREAL01__A 
 CE_REG_FR_TIMAG01__A 
 CE_REG_FR_TREAL02__A 
 CE_REG_FR_TIMAG02__A 
 CE_REG_FR_TREAL03__A 
 CE_REG_FR_TIMAG03__A 
 CE_REG_FR_TREAL04__A 
 CE_REG_FR_TIMAG04__A 
 CE_REG_FR_TREAL05__A 
 CE_REG_FR_TIMAG05__A 
 CE_REG_FR_TREAL06__A 
 CE_REG_FR_TIMAG06__A 
 CE_REG_FR_TREAL07__A 
 CE_REG_FR_TIMAG07__A 
 CE_REG_FR_TREAL08__A 
 CE_REG_FR_TIMAG08__A 
 CE_REG_FR_TREAL09__A 
 CE_REG_FR_TIMAG09__A 
 CE_REG_FR_TREAL10__A 
 CE_REG_FR_TIMAG10__A 
 CE_REG_FR_TREAL11__A 
 CE_REG_FR_TIMAG11__A 
 CE_REG_FR_MID_TAP__A 
 CE_REG_FR_SQS_G00__A 
 CE_REG_FR_SQS_G01__A 
 CE_REG_FR_SQS_G02__A 
 CE_REG_FR_SQS_G03__A 
 CE_REG_FR_SQS_G04__A 
 CE_REG_FR_SQS_G05__A 
 CE_REG_FR_SQS_G06__A 
 CE_REG_FR_SQS_G07__A 
 CE_REG_FR_SQS_G08__A 
 CE_REG_FR_SQS_G09__A 
 CE_REG_FR_SQS_G10__A 
 CE_REG_FR_SQS_G11__A 
 CE_REG_FR_SQS_G12__A 
 CE_REG_FR_RIO_G00__A 
 CE_REG_FR_RIO_G01__A 
 CE_REG_FR_RIO_G02__A 
 CE_REG_FR_RIO_G03__A 
 CE_REG_FR_RIO_G04__A 
 CE_REG_FR_RIO_G05__A 
 CE_REG_FR_RIO_G06__A 
 CE_REG_FR_RIO_G07__A 
 CE_REG_FR_RIO_G08__A 
 CE_REG_FR_RIO_G09__A 
 CE_REG_FR_RIO_G10__A 
 CE_REG_FR_MODE__A     
 CE_REG_FR_SQS_TRH__A  
 CE_REG_FR_RIO_GAIN__A 
 CE_REG_FR_BYPASS__A   
 CE_REG_FR_PM_SET__A   
 CE_REG_FR_ERR_SH__A   
 CE_REG_FR_MAN_SH__A   
 CE_REG_FR_TAP_SH__A   
 FE_AD_REG_PD__A          
 FE_AD_REG_INVEXT__A      
 FE_AD_REG_CLKNEG__A      
 FE_AG_REG_DCE_AUR_CNT__A 
 FE_AG_REG_DCE_RUR_CNT__A 
 FE_AG_REG_ACE_AUR_CNT__A 
 FE_AG_REG_ACE_RUR_CNT__A 
 FE_AG_REG_EGC_FLA_RGN__A 
 FE_AG_REG_EGC_SLO_RGN__A 
 FE_AG_REG_EGC_JMP_PSN__A 
 FE_AG_REG_EGC_FLA_INC__A 
 FE_AG_REG_EGC_FLA_DEC__A 
 FE_AG_REG_GC1_AGC_MAX__A 
 FE_AG_REG_GC1_AGC_MIN__A 
 FE_AG_REG_IND_WIN__A     
 FE_AG_REG_IND_THD_LOL__A 
 FE_AG_REG_IND_THD_HIL__A 
 FE_AG_REG_IND_DEL__A     don't care 
 FE_AG_REG_IND_PD1_WRI__A 
 FE_AG_REG_PDA_AUR_CNT__A 
 FE_AG_REG_PDA_RUR_CNT__A 
 FE_AG_REG_PDA_AVE_DAT__A don't care  
 FE_AG_REG_PDC_RUR_CNT__A 
 FE_AG_REG_PDC_SET_LVL__A 
 FE_AG_REG_PDC_FLA_RGN__A 
 FE_AG_REG_PDC_JMP_PSN__A don't care  
 FE_AG_REG_PDC_FLA_STP__A 
 FE_AG_REG_PDC_SLO_STP__A 
 FE_AG_REG_PDC_PD2_WRI__A don't care  
 FE_AG_REG_PDC_MAP_DAT__A don't care  
 FE_AG_REG_PDC_MAX__A     
 FE_AG_REG_TGA_AUR_CNT__A 
 FE_AG_REG_TGA_RUR_CNT__A 
 FE_AG_REG_TGA_AVE_DAT__A don't care  
 FE_AG_REG_TGC_RUR_CNT__A 
 FE_AG_REG_TGC_SET_LVL__A 
 FE_AG_REG_TGC_FLA_RGN__A 
 FE_AG_REG_TGC_JMP_PSN__A don't care  
 FE_AG_REG_TGC_FLA_STP__A 
 FE_AG_REG_TGC_SLO_STP__A 
 FE_AG_REG_TGC_MAP_DAT__A don't care  
 FE_AG_REG_FGA_AUR_CNT__A 
 FE_AG_REG_FGA_RUR_CNT__A 
 FE_AG_REG_BGC_FGC_WRI__A 
 FE_AG_REG_BGC_CGC_WRI__A 
 FE_FD_REG_SCL__A         
 FE_FD_REG_MAX_LEV__A     
 FE_FD_REG_NR__A          
 FE_CF_REG_SCL__A         
 FE_CF_REG_MAX_LEV__A     
 FE_CF_REG_NR__A          
 FE_CF_REG_IMP_VAL__A     
 FE_CF_REG_MEAS_VAL__A    
 FE_CU_REG_FRM_CNT_RST__A 
 FE_CU_REG_FRM_CNT_STR__A 
 with PGA 
   WR16COND( DRXD_WITH_PGA, FE_AG_REG_AG_PGA_MODE__A   , 0x0004), 
 without PGA 
   WR16COND( DRXD_WITHOUT_PGA, FE_AG_REG_AG_PGA_MODE__A   , 0x0001), 
   WR16(FE_AG_REG_AG_AGC_SIO__A,  (extAttr -> FeAgRegAgAgcSio), 0x0000 );
   WR16(FE_AG_REG_AG_PWD__A        ,(extAttr -> FeAgRegAgPwd), 0x0000 );
 Activate measurement, activate scale 
 with PGA 
      WR16(B_FE_AG_REG_AG_PGA_MODE__A   , 0x0000, 0x0000); 
 without PGA 
      WR16(B_FE_AG_REG_AG_PGA_MODE__A   ,
added HS 23-05-2005 
added HS 23-05-2005 
   WR16(B_FE_AG_REG_AG_PWD__A    ,(extAttr -> FeAgRegAgPwd), 0x0000 );
 RF-AGC setup 
 CP_REG_BR_SPL_OFFSET__A  
 CP_REG_BR_STR_DEL__A     
 CP_REG_RT_ANG_INC0__A    
 CP_REG_RT_ANG_INC1__A    
 CP_REG_RT_DETECT_ENA__A  
 CP_REG_RT_DETECT_TRH__A  
 CP_REG_AC_NEXP_OFFS__A   
 CP_REG_AC_AVER_POW__A    
 CP_REG_AC_MAX_POW__A     
 CP_REG_AC_WEIGHT_MAN__A  
 CP_REG_AC_WEIGHT_EXP__A  
 CP_REG_AC_AMP_MODE__A    
 CP_REG_AC_AMP_FIX__A     
 CE_REG_AVG_POW__A        
 CE_REG_MAX_POW__A        
 CE_REG_ATT__A            
 CE_REG_NRED__A           
 CE_REG_NE_ERR_SELECT__A  
 CE_REG_NE_TD_CAL__A      
 CE_REG_NE_MIXAVG__A      
 CE_REG_NE_NUPD_OFS__A    
 CE_REG_PE_NEXP_OFFS__A   
 CE_REG_PE_TIMESHIFT__A   
 CE_REG_TP_A0_TAP_NEW__A       
 CE_REG_TP_A0_TAP_NEW_VALID__A 
 CE_REG_TP_A0_MU_LMS_STEP__A   
 CE_REG_TP_A1_TAP_NEW__A        
 CE_REG_TP_A1_TAP_NEW_VALID__A  
 CE_REG_TP_A1_MU_LMS_STEP__A    
 CE_REG_FI_SHT_INCR__A          
 CE_REG_FI_EXP_NORM__A          
 CE_REG_IR_INPUTSEL__A          
 CE_REG_IR_STARTPOS__A          
 CE_REG_IR_NEXP_THRES__A        
 EQ_REG_OT_QNT_THRES0__A        
 EQ_REG_OT_QNT_THRES1__A        
 EQ_REG_OT_CSI_STEP__A          
 EQ_REG_OT_CSI_OFFSET__A        
 Reset packet sync bytes in EC_VD ram 
 Reset packet sync bytes in EC_RS ram 
 EC_SB_REG_CSI_HI__A            
 EC_SB_REG_CSI_LO__A            
 EC_SB_REG_SMB_TGL__A           
 EC_SB_REG_SNR_HI__A            
 EC_SB_REG_SNR_MID__A           
 EC_SB_REG_SNR_LO__A            
 EC_RS_REG_REQ_PCK_CNT__A       
 EC_RS_REG_VAL__A               
 EC_OC_REG_TMD_TOP_MODE__A      
 EC_OC_REG_TMD_TOP_CNT__A       
 EC_OC_REG_TMD_HIL_MAR__A       
 EC_OC_REG_TMD_LOL_MAR__A       
 EC_OC_REG_TMD_CUR_CNT__A       
 EC_OC_REG_AVR_ASH_CNT__A       
 EC_OC_REG_AVR_BSH_CNT__A       
 EC_OC_REG_RCN_MODE__A          
 EC_OC_REG_RCN_CRA_LOP__A       
 EC_OC_REG_RCN_CRA_HIP__A       
 EC_OC_REG_RCN_CST_LOP__A       
 EC_OC_REG_RCN_CST_HIP__A       
 EC_OC_REG_RCN_SET_LVL__A       
 EC_OC_REG_RCN_GAI_LVL__A       
 EC_OC_REG_RCN_CLP_LOP__A       
 EC_OC_REG_RCN_CLP_HIP__A       
 Output zero on monitorbus pads, power saving 
   CHK_ERROR(ResetECRAM(demod)); 
 Reset packet sync bytes in EC_VD ram 
 Reset packet sync bytes in EC_RS ram 
 Needed because shadow registers do not have correct default value 
   CHK_ERROR(ResetECRAM(demod)); 
 Reset packet sync bytes in EC_VD ram 
 Reset packet sync bytes in EC_RS ram 
 EC_OC_REG_TMD_TOP_MODE__A      
 EC_OC_REG_TMD_TOP_CNT__A       
 EC_OC_REG_TMD_HIL_MAR__A       
 EC_OC_REG_TMD_LOL_MAR__A       
 EC_OC_REG_TMD_CUR_CNT__A       
 EC_OC_REG_AVR_ASH_CNT__A       
 EC_OC_REG_AVR_BSH_CNT__A       
 EC_OC_REG_RCN_MODE__A          
 EC_OC_REG_RCN_CRA_LOP__A       
 EC_OC_REG_RCN_CRA_HIP__A       
 EC_OC_REG_RCN_CST_LOP__A       
 EC_OC_REG_RCN_CST_HIP__A       
 EC_OC_REG_RCN_SET_LVL__A       
 EC_OC_REG_RCN_GAI_LVL__A       
 EC_OC_REG_RCN_CLP_LOP__A       
 EC_OC_REG_RCN_CLP_HIP__A       
 Output zero on monitorbus pads, power saving 
   CHK_ERROR(ResetECRAM(demod)); 
 Reset packet sync bytes in EC_VD ram 
 Reset packet sync bytes in EC_RS ram 
 SC is not started, this is done in SetChannels() 
 Diversity settings 
 Start demod  RF in , diversity out  
 CE to PASS mux 
 CE to PASS mux 
 End demod  combining RF in and diversity in, MPEG TS out  
 disable nearfar; switch on timing slave mode 
 MV from CtrlDiversity 
 combining disabled 
 Start demod, RF in and diversity out, no combining 
 EQ to MB out 
 CE to PASS mux 
 End demod, combining RF in and diversity in, MPEG TS out 
 disable impulse noise cruncher 
 clock inversion (for sohard board) 
 apparently no mb delay matching is best 
 org = 0x81 combining enabled 
 also used ok for 7 MHz 
 SPDX-License-Identifier: GPL-2.0-or-later
	TDA665x tuner driver
	Copyright (C) Manu Abraham (abraham.manu@gmail.com)
 restore frequency 
 VHF-L 
 fc, Low Band, 47 - 153 MHz 
 83uA 
 122uA 
 163uA 
 254uA 
 VHF-H 
 fc, Mid Band, 153 - 438 MHz 
 UHF 
 fc, High Band, 438 - 862 MHz 
 Set params 
 sleep for some time 
 check status 
 cache successful state 
 SPDX-License-Identifier: GPL-2.0-or-later
  horus3a.h
  Sony Horus3A DVB-SS2 tuner driver
  Copyright 2012 Sony Corporation
  Copyright (C) 2014 NetUP Inc.
  Copyright (C) 2014 Sergey Kozlov <serjk@netup.ru>
  Copyright (C) 2014 Abylay Ospan <aospan@netup.ru>
 see gcc.gnu.orgbugzillashow_bug.cgi?id=81715 
 IQ Generator disable 
 MDIV_EN = 0 
 VCO disable preparation 
 VCO buffer disable 
 VCO calibration disable 
 Power save setting (xtal is not stopped) 
 LNA is Disabled 
 0x11 - 0x12 
 Leave power save 
 LNA is Disabled 
 0x11 - 0x12 
 VCO buffer enable 
 VCO calibration enable 
 MDIV_EN = 1 
 frequency should be X MHz (X : integer) 
 Assumed that fREF == 1MHz (1000kHz) 
 15 bit 
 F_CTL=11100 G_CTL=001 
 F_CTL=11000 G_CTL=010 
 F_CTL=10100 G_CTL=010 
 F_CTL=10000 G_CTL=011 
 F_CTL=01100 G_CTL=100 
 F_CTL=01010 G_CTL=100 
 F_CTL=00111 G_CTL=101 
 F_CTL=00100 G_CTL=010 
 F_CTL=00010 G_CTL=001 
 F_CTL=00000 G_CTL=000 
 LPF cutoff frequency setting 
		
		  rolloff = 0.35
		  SR <= 4.3
		  fc_lpf = 5
		  4.3 < SR <= 10
		  fc_lpf = SR  (1 + rolloff)  2 + SR  2 =
		 	SR  1.175 = SR  (4740)
		  10 < SR
		  fc_lpf = SR  (1 + rolloff)  2 + 5 =
		 	SR  0.675 + 5 = SR  (2740) + 5
		  NOTE: The result should be round up.
 5 <= fc_lpf <= 36 
		
		  SR <= 4.5:
		  fc_lpf = 5
		  4.5 < SR <= 10:
		  fc_lpf = SR  (1 + rolloff)  2 + SR  2
		  10 < SR:
		  fc_lpf = SR  (1 + rolloff)  2 + 5
		  NOTE: The result should be round up.
 5 <= fc_lpf <= 36 is valid 
 0x00 - 0x04 
 Write G_CTL, F_CTL 
 Write LPF cutoff frequency 
 Start Calibration 
 IQ Generator enable 
 tuner stabilization time 
 Store tuned frequency to the struct 
 wait 4ms after power on 
 IQ Generator disable 
 REF_R = Xtal Frequency 
 0x6 - 0x8 
 IQ Out = Single Ended 
 SPDX-License-Identifier: GPL-2.0-or-later
  stv0367.c
  Driver for ST STV0367 DVB-T & DVB-C demodulator IC.
  Copyright (C) ST Microelectronics.
  Copyright (C) 2010,2011 NetUP Inc.
  Copyright (C) 2010,2011 Igor M. Liplianin <liplianin@netup.ru>
 Max transfer size done by I2C transfer functions 
 DVB-C 
 results 
 channel found		
 found frequency (in kHz)	
 found symbol rate (in Bds)	
 Spectrum Inversion	
 status reg to poll for FEC Lock 
 DVB-T 
 mode 2K or 8K 
  current search spectrum 
 force modeguard 
 channel width 6, 7 or 8 in MHz 
 channel width used during previous lock 
 echo position 
 config settings 
 DVB-C 
 DVB-T 
 flags for operation control 
 RF Level (for RF AGC->AGC1) Lookup Table, depends on the board and tuner.
AGC1
RF(dbm)
 RF Level (for IF AGC->AGC2) Lookup Table, depends on the board and tuner.
AGC2
RF(dbm)
 see gcc.gnu.orgbugzillashow_bug.cgi?id=81715 
 Currently, unused 
	 note on regs: R367TER_ and R367CAB_ defines each point to
	  0xf0d8, so just use R367TER_ for both cases
 PLLMDIV: 27, PLLNDIV: 232 
 set internal freq to 53.125MHz 
 hz -> khz 
 CELL 1 COEFFS 27M
 CELL 2 COEFFS 
 CELL 3 COEFFS 
 CELL 4 COEFFS 
 CELL 5 COEFFS 
 CELL 6 COEFFS 
 CELL 1 COEFFS 25M
 CELL 6 COEFFS 
 30M 
 CELL 1 COEFFS 27M
 CELL 2 COEFFS 
 CELL 3 COEFFS 
 CELL 4 COEFFS 
 CELL 5 COEFFS 
 CELL 6 COEFFS 
25M
 30M 
 CELL 1 COEFFS 27M
 CELL 2 COEFFS 
 CELL 3 COEFFS 
 CELL 4 COEFFS 
 CELL 5 COEFFS 
 CELL 6 COEFFS 
25M
 30M 
 master clock frequency (Hz) 
 equivalent to Xtal 25M on 362
 equivalent to Xtal 27M on 362
 equivalent to Xtal 30M on 362
 Lock detect 1 
 Lock detect 2 
 Lock detect 3 
 Lock detect 4 
	msleep(local_tempo);  
2k mode
8k mode
4k mode
drives to NOCPAMP	
dprintk("CPAMPvalue= %d at wd=%d\n",CPAMPvalue,wd); 
 suggest 2k 14 
		else { 
			if chip locked on wrong mode first try,
guard=stv0367_readbits(state,F367TER_SYR_GUARD); 
	suppress EPQ auto for SYR_GARD 116 or 132
reset fec an reedsolo FOR 367 only
	u_var4=stv0367_readbits(state,F367TER_TSFIFO_LINEOK); 
while ( ((!u_var1)||(!u_var2)||(!u_var3)||(!u_var4))  && (wd>=0)) 
u_var4=stv0367_readbits(state, F367TER_TSFIFO_LINEOK); 
stv0367_writereg(state,R367TER_CHC_CTL, 0x1);
stv0367_writereg(state,R367TER_CHC_CTL, 0x11);
 apply Sfec workaround if 8K 64QAM CR!=12
 for 367 leave COM_N at 0x7 for IQ_mode
	if(ter_state->if_iq_mode!=FE_TER_NORMAL_IF_TUNER) {
		tempo=0;
		while ((stv0367_readbits(state,F367TER_COM_USEGAINTRK)!=1) &&
		(stv0367_readbits(state,F367TER_COM_AGCLOCK)!=1)&&(tempo<100)) {
			ChipWaitOrAbort(state,1);
			tempo+=1;
		}
		stv0367_writebits(state,F367TER_COM_N,0x17);
for removing warning :default we can assume in parallel mode
case FE_TER_CLOCK_POLARITY_DEFAULT:
Set TS1 and TS2 to serial or parallel mode 
constell, counter;
 Normal IF mode 
 Long IF mode 
 IQ mode 
set fine agc target to 180 for LPIF or IQ mode
 set Q_AGCTarget 
stv0367_writebits(state,AUT_AGC_TARGET_LSB,0x04); 
 set Q_AGCTarget 
stv0367_writebits(state,AUT_AGC_TARGET_LSB,0x04); 
set IIR filter once for 6,7 or 8MHz BW
 liplianin 
 liplianin 
 we know sense now :) 
 Carrier offset calculation 
 1 FFT BIN=4.464khz
 1 FFT BIN=2.23khz
 1 FFT BIN=1.1khz
 exit even if timing_offset stays null 
was 20ms  
 fine tuning of timing offset if required 
	 unlocks could happen in case of trl centring big step,
u8 trials[2]; 
	case TRANSMISSION_MODE_4K:
		pLook.mode = FE_TER_MODE_4K;
 invert spectrum sense 
wait for counting completion
 snr = 0, Data = 0;
 Get the Hierarchical mode 
 error 
 Get the FEC Rate 
 error 
	case FE_TER_MODE_4K:
		p->transmission_mode = TRANSMISSION_MODE_4K;
cut 1.0 cut 1.1
cu2.0
average on 10 values
wait for counting completion
measurement not completed, load previous value
if (Errors<4294967) 2^22 max error
 still to 10 
 Byte error
tber=Errors(8(1 <<14));
tber=Errors(8(1 <<16));
tber=Errors(8(1 <<18));
tber=Errors(8(1 <<20));
tber=Errors(8(1 <<22));
 should not pass here
 save actual value 
if(Errors<=429496)  2^16 errors max
 pkt error
Per=Errors(1 << 8);
Per=Errors(1 << 10);
Per=Errors(1 << 12);
Per=Errors(1 << 14);
Per=Errors(1 << 16);
 save actual value 
 too slow 
	.read_signal_strength = stv0367_read_signal_strength,
 allocate memory for the internal state 
 setup the state 
 demod operation options 
 check if the demod is there 
 master clock frequency (Hz) 
 Set QAM size 
 Set Registers settings specific to the QAM size 
 ZIF operation 
 Set Correction factor of SRC gain 
 Transfer ratio calculation 
 Symbol rate and SRC gain calculation 
 TRL works at half the system clock 
 2097152 = 2^21 
 Symbol rate calculation 
 2048 = 2^11 
 16384 = 2^14 
 125 = 10002^3 
 8 = 2^3 
 SRC Gain Calculation 
 22^10 
 2878 
 2^8 
 (AdpClk in kHz) 
 1000corr factor 
 4194304 = 222 
 Symbol rate calculation 
 1024 = 210 
 16384 = 214 
 125 = 100023 
 16 = 24 
 SRC Gain Calculation 
 22^9 
 2878 
 2^8 
 (AdpClk in kHz)
 1000corr factor 
 8388607 = 223 
 Symbol rate calculation 
 512 = 29 
 16384 = 214 
 125 = 100023 
 32 = 25 
 SRC Gain Calculation 
 22^8 
 2878 
 2^8 
 (AdpClk in kHz) 
 1000corr factor 
 Symbol rate calculation 
 256 = 28 
 16384 = 213 
 125 = 100023 
 64 = 26 
 SRC Gain Calculation 
 22^7 
 2878 
 2^8 
 (AdpClk in kHz) 
 1000corr factor 
	 Filters' coefficients are calculated and written
		 AllPass filter must be enabled
		 AllPass filter must be disabled
 TRL works at half the system clock 
 134217728L = 227
 32 = 25 
 32768L = 215 
 AdpClk in kHz 
 128 = 27 
 125 = 100023 
 2048 = 211	
 268435456L = 228 
 16 = 24 
 32768L = 215 
 AdpClk in kHz 
 128 = 27 
 125 = 100023
 256 = 210
 536870912L = 229
 8 = 23 
 32768L = 215 
 AdpClk in kHz 
 128 = 27 
 125 = 100023 
 128 = 29 
 4 = 22 
 32768L = 215 
 AdpClk in kHz 
 128 = 27 
 125 = 100023 
 64 = 28 
 update cab_state->state from QAM_FSM_STATUS 
PLL enabled and used 
 Timeouts calculation 
 A max lock time of 25 ms is allowed for delayed AGC 
 100000 symbols needed by the TRL as a maximum value 
	 CRLSymbols is the needed number of symbols to achieve a lock
	   within [-4%, +4%] of the symbol rate.
	   CRL timeout is calculated
	   for a lock within [-search_range, +search_range].
	   EQL timeout can be changed depending on
	   the micro-reflections we want to handle.
	   A characterization must be performed
	   with these echoes to get new timeout values.
 Timeouts below 50ms are coerced 
	 A maximum of 100 TS packets is needed to get FEC lock even in case
	the spectrum inversion needs to be changed.
	   This is equal to 20 ms in case of the lowest symbol rate of 0.87Msps
	 Reset the TRL to ensure nothing starts until the
	   AGC is stable which ensures a better lock time
	 Set AGC accumulation time to minimum and lock threshold to maximum
 Modulus Mapper is disabled 
 Disable the sweep function 
 The sweep function is never used, Sweep rate must be set to 0 
 Set the derotator frequency in Hz 
 Disable the Allpass Filter when the symbol rate is out of range 
 Check if the tuner is locked 
 Release the TRL to start demodulator acquisition 
 Wait for QAM lock 
			
			  We don't wait longer, the frequencyphase offset
			  must be too big
			
			  We don't wait longer, either there is no signal or
			  it is not the right symbol rate or it is an analog
			  carrier
 Wait for FEC lock 
 not clear for me 
 stv0367_setbits(state, F367CAB_AGC_ACCUMRSTSEL,7);
 Set the AGC control values to tracking values 
 Tuner Frequency Setting 
 Search algorithm launch, [-1.1RangeOffset, +1.1RangeOffset] scan 
 For DTT75467 on NIM 
if IF AGC>10
 table values, not needed to calculate logarithms 
 FE_CAN_QAM_4 
	.read_ber				= stv0367cab_read_ber, 
 allocate memory for the internal state 
 setup the state 
 demod operation options 
 check if the demod is there 
  Functions for operation on Digital Devices hardware
 R367CAB_CTRL_1 
 R367CAB_CTRL_2 
 Tuner Setup 
 Buffer Q disabled, I Enabled, unsigned ADC 
 ADCQ disabled 
 Clock setup 
 PLL bypassed and disabled 
 Set OFDM 
 IC runs at 54 MHz with a 27 MHz crystal 
 PLL enabled and used 
 R367CAB_CTRL_1 
 R367CAB_CTRL_2 
 Tuner Setup 
 Buffer Q disabled, I Enabled, signed ADC 
 ADCQ disabled 
 Clock setup 
 PLL bypassed and disabled 
 Set QAM 
 IC runs at 58 MHz with a 27 MHz crystal 
 PLL enabled and used 
 protect against division error oopses 
 prevent division by zero 
 stop and report on _read_status failure 
 read carriernoise when a carrier is detected 
 read uncorrected blocks on FE_HAS_LOCK 
 OFDM TS Setup 
 Fixed at 54 MHz 
 Also needed for QAM 
 AGC Pin setup 
 QAM TS setup, note exact format also depends on descrambler 
 settings 
 Inverted Clock, Swap, serial 
 Clock setup (PLL bypassed and disabled) 
 IC runs at 58 MHz with a 27 MHz crystal 
 Tuner setup 
 Buffer Q disabled, I Enabled, signed ADC 
 ADCQ disabled 
 Improves the CN lock limit 
 ZIFIF Automatic mode 
 Improving burst noise performances 
 Improving ACI performances 
 PLL enabled and used 
 DVB-C 
 FE_CAN_QAM_4 
 DVB-T 
 valid for TER and CAB 
 allocate memory for the internal state 
 setup the state 
 demod operation options 
 check if the demod is there 
 SPDX-License-Identifier: GPL-2.0-or-later
   Driver for Zarlink ZL10039 DVB-S tuner
   Copyright 2007 Jan D. Louw <jd.louw@mweb.co.za>
 Max transfer size done by I2C transfer functions 
 Write register address 
 Read count bytes 
 Success 
 Write register address and data in one go 
 Success 
 see gcc.gnu.orgbugzillashow_bug.cgi?id=81715 
 Reset logic 
 Wake up 
 Assumed 10.111 MHz crystal oscillator 
 Cancelled numden 80 to prevent overflow 
 Cancelled numden 10 to prevent overflow 
PLL divider
Reference divider
 Select reference ratio of 80 
PLL test modes
RF Control register
 Bypass enable 
Baseband filter cutoff 
 Open i2c gate 
 BR = 10, Enable filter adjustment 
 Write new config values 
 BR = 10, Disable filter adjustment 
 Close i2c gate 
 Open i2c gate 
 check if this is a valid tuner 
 Close i2c gate 
 Close i2c gate 
 SPDX-License-Identifier: GPL-2.0-or-later
     Support for AltoBeam GB20600 (a.k.a DMB-TH) demodulator
     ATBM8830, ATBM8831
     Copyright (C) 2009 David T.L. Wong <davidtlwong@gmail.com>
 Lock register latch so that multi-register read is atomic 
in kHz)
 0x100000  freq  30.4MHz 
in kHz)
 2  PI  (freq - fs)  fs  (2 ^ 22) 
 Zero IF 
 no effect if both min and max are zero 
 For single carrier 
 frame_count_max0 
 frame_count_max1 
Set parallelserial ts mode
Set ts sampling edge
Set ts clock freerun
Set oscillator frequency
Set IF frequency
Set AGC Config
Set static channel mode
Turn off DSP reset
SW version test
 Run 
 set frequency 
 start auto lock 
 TODO: get real readings from device 
 inversion status 
 bandwidth 
 transmission mode 
 guard interval 
 hierarchy 
 check if the demod is there 
  Support for the Broadcom BCM3510 ATSC demodulator (1st generation Air2PC)
   Copyright (C) 2001-5, B2C2 inc.
   GPLLinux driver written by Patrick Boettcher <patrick.boettcher@posteo.de>
   This driver is "hard-coded" to be used with the 1st generation of
   TechnisatB2C2's Air2PC ATSC PCIUSB cardsboxes. The pll-programming
   (Panasonic CT10S) is located here, which is actually wrong. Unless there is
   another device with a BCM3510, this is no problem.
   The driver works also with QAM64 DVB-C, but had an unreasonable high
   UNC. (Tested with the Air2PC ATSC 1st generation)
   You'll need a firmware for this driver in order to get it running. It is
   called "dvb-fe-bcm3510-01.fw".
  This program is free software; you can redistribute it andor modify it
  under the terms of the GNU General Public License as published by the Free
  Software Foundation; either version 2 of the License, or (at your option)
  any later version.
  This program is distributed in the hope that it will be useful, but WITHOUT
  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
  more details.
  You should have received a copy of the GNU General Public License along with
  this program; if not, write to the Free Software Foundation, Inc., 675 Mass
  Ave, Cambridge, MA 02139, USA.
 Max transfer size done by bcm3510_do_hab_cmd() function 
 demodulator private data 
 transfer functions 
 Host Access Buffer transfers 
 Check if any previous HAB request still needs to be serviced by the
		return -EBUSY;
 Send the start HAB Address (automatically incremented after write of
 Set the HABR bit to indicate AP request in progress (LBHABR allows HABR to
 Polling method: Wait until the AP finishes processing the HAB request 
 not needed, we use a semaphore to prevent HAB races 
 clear residual bit counter TODO  
 more frequently checks if no lock has been achieved yet 
 normalize if necessary 
 tuner frontend programming 
 I2C Mode disabled,  set 16 control  Data pairs 
 CS1, CS0, DATA, CLK bits control the tuner RF_AGC_SEL pin is set to
 Set duration of the initial state of TUNCTL = 3.34 micro Sec 
 PRESCALER DIVIDE RATIO | BC1_2_3_4; (band switch), 1stosc REFERENCE COUNTER REF_S12 and REF_S11 
 Control DATA pin, 1stosc REFERENCE COUNTER REF_S10 to REF_S3 
 set CONTROL BIT 1 to 1, 1stosc REFERENCE COUNTER REF_S2 to REF_S1 
 control CS0 pin, pulse byte ? 
 PGM_S18 to PGM_S11 
 PGM_S10 to PGM_S8, SWL_S7 to SWL_S3 
 SWL_S2 and SWL_S1, set CONTROL BIT 2 to 0 
 control CS0 pin, pulse byte ? 
 PRESCALER DIVIDE RATIO, 2ndosc REFERENCE COUNTER REF_S12 and REF_S11 
 2ndosc REFERENCE COUNTER REF_S10 to REF_S3 
 set CONTROL BIT 1 to 1, 2ndosc REFERENCE COUNTER REF_S2 to REF_S1 
 pulse byte 
 PGM_S18 to PGM_S11 
 PGM_S10 to PGM_S8 and SWL_S7 to SWL_S3 
 SWL_S2 and SWL_S1 and set CONTROL BIT 2 to 0 
 Pulse Byte 
 set Band Switch 
	if (enableOffset) {
		cmd.IF_OFFSET0 = xx;
		cmd.IF_OFFSET1 = xx;
		cmd.SYM_OFFSET0 = xx;
		cmd.SYM_OFFSET1 = xx;
		if (enableNtscSweep) {
			cmd.NTSC_OFFSET0;
			cmd.NTSC_OFFSET1;
		}
 doing it with different MSGIDs, data book and source differs 
 Give the AP some time 
 firmware download:
  firmware file is build up like this:
  16bit addr, 16bit length, 8byte of length
 (un)resetting the AP 
 verify that reset is cleared 
 read Acquisation Processor status register and check it is not in RUN mode 
 tri-state 
 anything left here to Let the acquisition processor begin execution at program counter 0000 ??? 
 allocate memory for the internal state 
 setup the state 
 create dvb_frontend 
 cold 
 warm 
 SPDX-License-Identifier: GPL-2.0-or-later
   Driver for Silicon Labs Si2161 DVB-T and Si2165 DVB-C-T Demodulator
   Copyright (C) 2013-2017 Matthias Schwarzott <zzam@gentoo.org>
   References:
   https:www.silabs.comSupport%20DocumentsTechnicalDocsSi2165-short.pdf
  Hauppauge WinTV-HVR-930C-HD B130  PCTV QuatroStick 521e 1113xx
  uses 16 MHz xtal
  Hauppauge WinTV-HVR-930C-HD B131  PCTV QuatroStick 522e 1114xx
  uses 24 MHz clock provided by tuner
 calculated by xtal and div settings 
 DVBv3 stats 
 1..7 
 only 1 or 4 
 1..63 
	
	  hardcoded values can be deleted if calculation is verified
	  or it yields the same values as the windows driver
 ref_freq  divr must be between 4 and 16 MHz 
		
		  now select divn and divp such that
		  fvco is in 1624..1824 MHz
 is this already correct regarding rounding? 
 adc_clk and sys_clk depend on xtal and pll settings 
 write all 4 pll registers 0x00a0..0x00a3 at once 
 assume Oversampling mode Ovr4 is used 
 int ret; 
 revision D 
 request the firmware, this will block and timeout 
 check header (8 bytes) 
 start uploading fw 
 bootwdog status 
 reset 
 bootwdog status 
 enable reset on error 
 start right after the header 
 reset crc 
 read crc 
 reset watchdog error register 
 enable reset on error 
 powerup 
 dsp_clock_enable 
 verify chip_mode 
 agc 
 rssi pad 
 enable chip_init 
 set start_init 
 disable chip_init 
 ber_pkt - default 65535 
 dsp_addr_jump 
 bootwdog status 
 ts output config 
 dsp clock disable 
 chip mode 
 check fast signal type 
 searching 
 nothing 
 digital signal 
 check packet sync lock 
 check fec_lock 
 CNR 
		
		  svalue =
		  1000  c_ndB =
		  1000  10  log10(2^24  regval) =
		  1000  10  (log10(2^24) - log10(regval)) =
		  1000  10  (intlog10(2^24) - intlog10(regval))  2^24
		 
		  intlog10(x) = log10(x)  2^24
		  intlog10(2^24) = log10(2^24)  2^24 = 121210686
 BER 
 start new sampling period to get rid of old data
 set scale to enter read code on next call 
			
			  reset DVBv3 value to deliver a good result
			  for the first call
 start new sampling period 
 if_freq_shift, usbdump contained 0x023ee08f; 
 standard = DVB-T 
 impulsive_noise_remover 
 agc2 
 agc 
 agc 
 freq_sync_range 
 gp_reg0 
 no bandwidth auto-detection 
 bandwidth in 10KHz steps 
 standard = DVB-C 
 agc2 
 agc 
 agc 
 Oversampling 
 initial setting of if freq shift 
 dsp_addr_jump 
 recalc if_freq_shift if IF might has changed 
 bootwdog status 
 reset all 
 gp_reg0 
 write adc values after each reset
 start_synchro 
 bootwdog status 
 For DVB-C 
 For DVB-T 
 allocate memory for the internal state 
 create regmap 
 setup the state 
 create dvb_frontend 
 powerup 
 powerdown 
 return fe pointer 
 SPDX-License-Identifier: GPL-2.0-or-later
  Realtek RTL2830 DVB-T demodulator driver
  Copyright (C) 2011 Antti Palosaari <crope@iki.fi>
 Our regmap is bypassing I2C adapter lock, thus we do it! 
 TODO: spec init 
 soft reset 
 init stats here in order signal app which stats are supported 
 6 MHz 
 7 MHz 
 8 MHz 
 6 MHz 
 7 MHz 
 8 MHz 
 program tuner 
 program if frequency 
 [7:6] 
 12 split I2C write 
 22 split I2C write 
 [6:3] 
 Signal strength 
 Read IF AGC 
 CNR 
 [3:2] 
 [6:4] 
 BER 
 enable  disable PID filter 
 skip invalid PIDs (0x2000) 
 enable  disable PIDs 
 add PID 
  I2C gatemuxrepeater logic
  We must use unlocked __i2c_transfer() here (through regmap) because of I2C
  adapter lock is already taken by tuner driver.
  Gate is closed automatically after single I2C transfer.
 open I2C repeater for 1 transfer, closes automatically 
 XXX: regmap_update_bits() does not lock I2C adapter 
  We implement own I2C access routines for regmap in order to get manual access
  to I2C adapter lock, which is needed for I2C mux adapter.
 allocate memory for the internal state 
 setup the state 
 check if the demod is there 
 create muxed i2c adapter for tuner 
 create dvb frontend 
 setup callbacks 
 SPDX-License-Identifier: GPL-2.0-or-later
	STB6100 Silicon Tuner
	Copyright (C) Manu Abraham (abraham.manu@gmail.com)
	Copyright (C) ST Microelectronics
 Max transfer size done by I2C transfer functions 
 Register names for easy debugging.	
 Template for normalisation, i.e. setting unused or undocumented
  bits as required according to the documentation.
  Currently unused. Some boards might need it in the future
 see gcc.gnu.orgbugzillashow_bug.cgi?id=81715 
 x2 for ZIF	
 ZIF 
 F[4:0] BW2 max =31+5=36 mhz for F=31	
 bw2 min = 5Mhz for F=0			
 if 5 < bw2 < 36				
	 Turn on LPF bandwidth setting clock control,
	  set bandwidth, wait 10ms, turn off.
  This is dangerous as another (related) thread may start 
  This is dangerous as another (related) thread may start 
 Set up tuner cleanly, LPF calibration on 
 allow LPF calibration 
 PLL Loop disabled, bias on, VCO on, synth on 
 Program the registers with their data values 
 VCO divide ratio (LO divide ratio, VCO prescaler enable).	
 VCO enabled, search clock off as per LL3.7, 3.4.1 
 OSM	
 F(VCO) = F(LO)  (ODIV == 0 ? 2 : 4)			
 N(I) = floor(f(VCO)  (f(XTAL)  (PSD2 ? 2 : 1)))	
 N(F) = round(f(VCO)  f(XTAL)  (PSD2 ? 2 : 1) - N(I))  2 ^ 9	
 NI 
 NF 
 K 
 G Baseband gain. 
  +4 dB 
  +8 dB 
 +14 dB 
 mask GCT 
 2Vp-p Mode 
 F we don't write as it is set up in BW set 
 DLB set DC servo loop BW to 160Hz (LLA 3.8  2.1) 
 Set up the test registers 
 Bring up tuner according to LLA 3.7 3.4.1, step 2 
 PLL Loop enabled, bias on, VCO on, synth on 
 Bring up tuner according to LLA 3.7 3.4.1, step 3 
 VCO fast search		
  This is dangerous as another (related) thread may start  
 vco search disabled		
 search clock off		
 Stop LPF calibration 
  This is dangerous as another (related) thread may start 
 wait for stabilisation, (should not be necessary)		
 TODO: power down	
 Hz 
	
	  iqsense = 1
	  tunerstep = 125000
 Hz	
 kHz	
 Set default bandwidth. Modified, PN 13-May-10	
 kHz 
 SPDX-License-Identifier: GPL-2.0-or-later
	Driver for ST STV0288 demodulator
	Copyright (C) 2006 Georg Acher, BayCom GmbH, acher (at) baycom (dot) de
		for Reel Multimedia
	Copyright (C) 2008 TurboSight.com, Bob Liu <bob@turbosight.com>
	Copyright (C) 2008 Igor M. Liplianin <liplianin@me.by>
		Removed stb6000 specific tuner code and revised some
		procedures.
	2010-09-01 Josef Pavlik <josef@pavlik.it>
		Fixed diseqc_msg, diseqc_burst and set_tone problems
 SFRH 
 SFRM 
 SFRL 
 modulated mode, single shot 
 burst mode, single shot 
 cont carrier 
 burst mode off
 we have default inittab 
 only frequency & symbol_rate are used for tuner
 Carrier lock control register 
 CFRL 
 Viterbi status 
 ppm 
 allocate memory for the internal state 
 setup the state 
 register 0x00 contains 0x11 for STV0288  
 create dvb_frontend 
 SPDX-License-Identifier: GPL-2.0-or-later
    Conexant cx24120cx24118 - DVBSS2 Satellite demodtuner driver
    Copyright (C) 2008 Patrick Boettcher <pb@linuxtv.org>
    Copyright (C) 2009 Sergey Tyurin <forum.free-x.de>
    Updated 2012 by Jannis Achstetter <jannis_achstetter@web.de>
    Copyright (C) 2015 Jemma Denson <jdenson@gmail.com>
	April 2015
	    Refactored & simplified driver
	    Updated to work with delivery system supplied by DVBv5
	    Add frequency, fec & pilot to get_frontend
	Cards supported: Technisat Skystar S2
 cx24120 i2c registers  
 write cmd_id 
 write command arguments 
 write 0x01 for end 
 frequency 
 FEC status 
 Tuner status 
 Signal strength high 
 Signal strength low byte 
 SNR high byte 
 SNR low byte 
 BER high byte of high word 
 BER low byte of high word 
 BER high byte of low word 
 BER low byte of low word 
 UCB high byte 
 UCB low byte  
 Chip revision (ro) 
 Command messages 
 cmd.len = 12; 
 cmd.len = 15; 
 cmd.len = 4; 
 cmd.len = 7; 
 cmd.len = 12; 
 read clock 
 cmd.len = 10; 
 cmd.len = 11; 
 cmd.len = d->msg_len + 6; 
 cmd.len = 2; 
 cmd.len = 4; 
 cmd.len not used !!! 
 Read signal strength 
 ??? 
 cmd.len = 0x03; 
 pilot mask 
 signal status 
 ber window 
 The DemodTuner can't easily provide these, we cache them 
 Demod values 
 Private state 
 current and next tuning parameters 
 dvbv5 stats calculations 
 Command message to firmware 
 Read single register 
 Write single register 
 Write multiple registers in chunks of i2c_wr_max-sized buffers 
 data length revers counter 
 incr data pointer 
 don't forget the addr byte 
 setup the state 
 check if the demod is present and has proper type 
 create dvb_frontend 
 Check if we're running a command that needs to disable mpeg out 
 Old driver would do a msleep(100) here 
 Send a message to the firmware 
 Disable mpeg out on certain commands 
 Send a message and fill arg[] with the results 
 Read numreg registers starting from register cmd->len 
 sequental number - can be 0,1,2 
	
	  Yes, cmd.len is set to zero. The old driver
	  didn't specify any len, but also had a
	  memset 0 before every use of the cmd struct
	  which would have set it to zero.
	  This quite probably needs looking into.
 signal strength 
 raw 
 cooked 
 CNR 
 guessed - seems about right 
 BER & UCB require lock 
 BER 
 UCB 
 handle reset 
 Read current tuning status 
	
	  TODO: is FE_HAS_SYNC in the right place?
	  Other cx241xx drivers have this slightly
	  different
 Set the clock once tuned in 
 Set clock ratios 
 Old driver would do a msleep(200) here 
 Renable mpeg output 
  FEC & modulation lookup table
  Used for decoding the REG_FECMODE register
  once tuned in.
delsys     mod    fec       val 
 Retrieve current fec, modulation & pilot values 
 Lower 6 bits 
 found 
 save values back to cache 
 Calculate ber window time 
	
	  Calculate bitrate from rate in the clock ratios table.
	  This isn't exactly right but close enough.
 usecs per ber window 
  Clock ratios lookup table
  Values obtained from much larger table in old driver
  which had numerous entries which would never match.
  There's probably some way of calculating these but I
  can't determine the pattern
delsys     pilot      mod    fec       m_rat    n_rat   rate 
 Set clock ratio from lookup table 
 Find fec, modulation, pilot 
 Find the clock ratios in the lookup table 
 found 
 Read current values? 
 in cmd[0]-[5] - result 
 Set the clock 
 Calculate ber window rates for stat work 
 Set inversion value 
 FEC lookup table for tuning 
delsys     mod    fec       val 
 Set fec_val & fec_mask values from delsys, modulation & fec 
 Lookup fec_val from modfec table 
 found 
 DVBS2 auto is 0x000x00 
 Set DVB-S to auto 
 Set pilot 
 Pilot only valid in DVBS2 
 Set symbol rate 
 Check symbol rate 
 Overwrite the current tuning params, we are about to tune 
 discard the 'current' tuning parameters and prepare to tune 
 Flag that clock needs to be set after tune 
 Tune in 
 maybe rolloff? 
 Send tune command 
 Write symbol rate values 
 Set vco from config 
 ???? 
 firmware_size in bytes 
 fw 1st byte 
 fw 2d byte 
 fw before last byte 
 fw last byte 
 Check final byte matches final byte of firmware 
 Start tuner 
 Set VCO 
 set bandwidth 
 Initialise mpeg outputs 
 Set size of BER window 
 Firmware CMD 35: Get firmware version 
 init stats here in order signal app which stats are supported 
 TODO: Do we need to set delay? 
 don't return empty data if we're not tuned in 
 Get frequency 
 Get modulation, fec, pilot 
 SPDX-License-Identifier: GPL-2.0-or-later
  ascot2e.c
  Sony Ascot3E DVB-TT2CC2 tuner driver
  Copyright 2012 Sony Corporation
  Copyright (C) 2014 NetUP Inc.
  Copyright (C) 2014 Sergey Kozlov <serjk@netup.ru>
  Copyright (C) 2014 Abylay Ospan <aospan@netup.ru>
 see gcc.gnu.orgbugzillashow_bug.cgi?id=81715 
 IF_OUT_SEL  AGC_SEL setting 
 AGC pin setting from parameter table 
 IFOUT pin setting from parameter table 
 Set bit[4:2] only 
 0x06 - 0x0F 
 REF_R setting (0x06) 
 xtal, xtal2 
 xtal8, xtal4 
 XOSC_SEL=100uA 
 KBW setting (0x08), KC0 setting (0x09), KC1 setting (0x0A) 
 ORDERR2_RANGER2_BANKC2_BANK setting (0x0B) 
 Set MIX_OLL (0x0C) value from parameter table 
 Set RF_GAIN (0x0D) setting from parameter table 
 RF_GAIN auto control enable 
 RF_GAIN Default value 
 RF_GAIN auto control disable 
 Set IF_BPF_GCFIF_OFFSET (0x0E) value from parameter table 
 Set BW_OFFSET (0x0F) value from parameter table 
	
	  0x45 - 0x47
	  LNA optimization setting
	  RF_LNA_DIST1-5, RF_LNA_CM
	 0x49 - 0x4A
 Set IF_BPF_F0 value from parameter table 
	
	  Tune now
	  RFAGC fast mode  RFAGC auto control enable
	  (set bit[7], bit[5:4] only)
	  vco_cal = 1, set MIX_OL_CPU_EN
 Logic wake up, CPU wake up 
 0x10 - 0x14 
 0x10: FRF_L 
 0x11: FRF_M 
 0x12: FRF_H (bit[3:0]) 
 0x12: BW (bit[5:4]) 
 0x13: VCO calibration enable 
 0x14: Analog block enable 
 Tune (Burst write) 
 CPU deep sleep 
 Logic sleep 
 RFAGC normal mode (set bit[5:4] only) 
 16 MHz xTal frequency 
 VCO current setting 
 Logic wake up, CPU boot 
 RFVGA optimization setting (RF_DIST0 - RF_DIST2) 
 PLL mode setting 
 RSSI setting 
 TODO check CPU HW error state here 
 Xtal oscillator current control setting 
 XOSC_SEL=100uA 
 CPU deep sleep 
 Logic sleep 
 Power save setting 
 SPDX-License-Identifier: GPL-2.0-or-later
    NXP TDA10048HN DVB OFDM demodulator driver
    Copyright (C) 2009 Steven Toth <stoth@kernellabs.com>
 Register name definitions 
 We'll cache and update the attach config settings 
 PHY2 = (if2fs)  2^15 
 PHY2 = ((IF1-fs)fs)  2^15 
 WREF = (B  (7  fs))  2^31 
 avoid warning: this decimal constant is unsigned only in ISO C90 
 t = 2147483648 on 32bit platforms 
 INVWREF = ((7  fs)  B)  2^5 
 Bandwidth setting may need to be adjusted 
 based on target bandwidth and clk we calculate pll factors 
 Calculate the sample frequency 
 Update the IF 
 request the firmware, this will block and timeout 
 Soft reset 
 Put the demod into host download mode 
 Boot the DSP 
 Prepare for download 
 Download the firmware payload 
 Wait up to 250ms for the DSP to boot 
 Retrieve the demod settings 
 Make sure the TPS regs are valid 
 Ensure pins are out of tri-state 
 Talk to the demod, set the FEC, GUARD, QAM settings etc 
 TODO: Support manual tuning with specific params 
 Update the IF pll's if the bandwidth changes 
 Enable demod TPS auto detection and begin acquisition 
 trigger cber and vber acquisition 
 Establish sane defaults and load firmware. 
 PLL 
 Apply register defaults 
 Set either serial or parallel 
 Set inversion 
 Establish default RF values 
 Ensure we leave the gate closed 
 update cber on interrupt 
 retrigger cber acquisition 
 actual cber is (ber)1e8 
 SNR lookup table 
 clear the uncorrected TS packets counter when saturated 
 Validatedefault the config 
 allocate memory for the internal state 
 setup the state and clone the config 
 check if the demod is present 
 create dvb_frontend 
 set pll 
 Establish any defaults the the user didn't pass 
 Set the xtal and freq defaults 
 Default bandwidth 
 Leave the gate closed 
 SPDX-License-Identifier: GPL-2.0-or-later
  Afatech AF9013 demodulator driver
  Copyright (C) 2007 Antti Palosaari <crope@iki.fi>
  Copyright (C) 2011 Antti Palosaari <crope@iki.fi>
  Thanks to Afatech who kindly provided information.
 RF and IF AGC limits used for signal strength calc 
	
	  GPIO0 & GPIO1 0xd735
	  GPIO2 & GPIO3 0xd736
 program tuner 
 program CFOE coefficients 
 Return an error if can't find bandwidth or the right clock 
 program frequency control 
 get used IF frequency 
 clear TPS lock flag 
 clear MPEG2 lock flag 
 empty channel function 
 empty DVB-T channel function 
 transmission parameters 
 Use HP. How and which case we can switch to LP? 
 clear easy mode flag 
 set easy mode flag 
 Reset FSM 
	
	  Return status from the cache if it is younger than 2000ms with the
	  exception of last tune is done during 4000ms.
 MPEG2 lock 
 TPS lock 
 Signal strength 
 Check if we support signal strength 
 Read agc values for signal strength estimation 
 Signal strength is not supported 
 Read value 
		
		  Construct line equation from tuner dependent -80-50 dBm agc
		  limits and use it to map current agc value to dBm estimate
 Convert [-90, -30] dBm to [0x0000, 0xffff] for dvbv3 
 CNR 
 Check if cnr ready 
 Read value 
 Read current modulation 
			
			  QPSK
			  CNR[dB] 13  -log10((1690000 - value)  value) + 2.6
			  value [653799, 1689999], 2.6  13 = 3355443
			
			  QAM-16
			  CNR[dB] 6  log10((value - 370000)  (828000 - value)) + 15.7
			  value [371105, 827999], 15.7  6 = 43900382
			
			  QAM-64
			  CNR[dB] 8  log10((value - 193000)  (425000 - value)) + 23.8
			  value [193246, 424999], 23.8  8 = 49912218
 BER  PER 
 Check if ber  ucb is ready 
 Read value 
 Use 10000 TS packets for measure 
 Reset ber  ucb counter 
 ADC on 
 Clear reset 
 Disable reset 
 write API version to firmware 
 program ADC control 
 28.800 MHz 
 20.480 MHz 
 28.000 MHz 
 25.000 MHz 
 Demod core settings 
 Demod tuner specific settings 
 TS interface 
 enable lock led 
 disable lock led 
 Enable reset 
 Start reset execution 
 Wait reset performs 
 ADC off 
 Check whether firmware is already running 
 Request the firmware, will block and timeout 
 Write firmware checksum & size 
 Download firmware 
 Boot firmware 
 Check firmware status. 0c=OK, 04=fail 
 0x2000 is kernel virtual pid for whole ts (all pids) 
  XXX: Hackish solution. We use virtual register, reg bit 16, to carry info
  about i2c adapter locking. Own locking is needed because i2c mux call has
  already locked i2c adapter.
 Own I2C access routines needed for regmap as chip uses extra command byte 
 Firmware download 
 Actual reg is 16 bits, see i2c adapter lock 
 Setup the state 
 Create mux i2c adapter 
 Download firmware 
 Firmware version 
 Set GPIOs 
 Create dvb frontend 
 Setup callbacks 
 Init stats to indicate which stats are supported 
 SPDX-License-Identifier: GPL-2.0-or-later
  Driver for Zarlink DVB-T ZL10353 demodulator
  Copyright (C) 2006, 2007 Christopher Pascoe <c.pascoe@itee.uq.edu.au>
 Dump all registers. 
 45.056 MHz 
 45.056  MHz 
 36.1667 MHz 
 These are extrapolated from the 7 and 8MHz values 
 Hint at TPS settings 
	
	  If there is no tuner attached to the secondary I2C bus, we call
	  set_params to program a potential tuner attached somewhere else.
	  Otherwise, we update the PLL registers via calc_regs.
 If no attached tuner or invalid PLL registers, just start the FSM. 
 no FE or TPS lock 
 Do a "hard" reset if not already done 
 No tuner attached to the internal I2C bus 
 If set enable I2C bridge, the main I2C bus stopped hardly 
 allocate memory for the internal state 
 setup the state 
 check if the demod is there 
 create dvb_frontend 
 SPDX-License-Identifier: GPL-2.0-only
  Linux-DVB Driver for DiBcom's DiB7000M and
               first generation DiB7000P-demodulator-family.
  Copyright (C) 2005-7 DiBcom (http:www.dibcom.fr)
 offset is 1 in case of the 7000MC 
 for the I2C transfer 
 compensate for 7000MC
 by default SRAM output is disabled 
 STBs with parallel gated clock
 0x0400 
 STBs with parallel continues clock
 0x0440 
 STBs with serial input
 0x0482 
 0x0500 
 e.g. USB feeding
 disable
 synchronous fread 
 P_O_CLK_en
 by default everything is going to be powered off 
 now, depending on the requested mode, we power on 
 power up everything in the demod 
 just leave power on the control-interfaces: GPIO and (I2C or SDIO or SRAM) 
 TODO power up either SDIO or I2C or SRAM 
 always power down unused parts 
 P_sdio_select_clk = 0 on MC and after
 workaround for PAMA
 power-up ADC
 power-down bandgag
 leave the VBG voltage on
	dprintk("913: %x, 914: %x\n", reg_913, reg_914);
 store the current bandwidth for later use
 internal 
	dib7000m_write_word(state, 928, (3 << 14) | (1 << 12) | (524 << 0)); 
 0.6253.3  4096
 do the calibration 
 default 
 for this oscillator frequency should be 30 MHz for the Master (default values in the board_parameters give that value)
 this is only working only for 30 MHz crystals
 forcing the predivider to 1
 if the previous front-end is baseband, its output frequency is 15 MHz (prev freq divided by 2)
 otherwise the previous front-end puts out its input (default 30MHz) - no extra division necessary
 pll cfg
 clk cfg0
 clk_cfg1
 clk_cfg0
 clk_cfg1
dib7000m_write_word(state, 908, (1 << 14) | (3 << 12) |(0 << 11) |
 smpl_cfg
 reset the GPIOs 
 TODO 782 is P_gpio_od 
 auto search configuration
 P_corm_thres Lock algorithms configuration
 P_palf_alpha_regul, P_palf_filter_freeze, P_palf_filter_on
 P_fft_nb_to_cut
 P_pha3_thres
 P_cti_use_cpe, P_cti_use_prog
 P_cspu_regul, P_cspu_win_cut
 P_adp_regul_cnt
 P_adp_noise_cnt
 P_adp_regul_ext
 P_adp_noise_ext
 P_adp_fil
 P_2d_byp_ti_num
 P_equal_thres_wgn
 P_fec_
 P_smo_mode, P_smo_rs_discard, P_smo_fifo_flush, P_smo_pid_parse, P_smo_error_discard
 set ADC level to -16 
 Tuner IO bank: max drive (14mA)
 always leave the VBG voltage on - it consumes almost nothing but takes a long time to start 
 restart all parts 
 unforce divstr regardless whether i2c enumeration was done or not 
 select DVB-T output
 P_iqc_alpha_pha, P_iqc_alpha_amp, P_iqc_dcc_alpha, ...
 P_divclksel=3 P_divbitsel=1
 P_restart_iqc & P_restart_agc
 n_agc_global
 P_agc_force_split and P_agc_split_offset
 read dyn_gain here (because it is demod-dependent and not fe)
 LNA has changed
 AGC 
 Demod AGC loop configuration
 AGC continued 
 use default
 settings for the MC
		dprintk("929: %x %d %d\n",
			(dib7000m_read_word(state, 929) & 0xffe3) | (agc->wbd_inv << 4) | (agc->wbd_sel << 2), agc->wbd_inv, agc->wbd_sel);
 wrong default values
 set power-up level: interf+analog+AGC
 ADC power up 
 AGC initialization 
 we are using the wbd - so slow AGC startup 
 force 0 split on WBD and restart AGC 
 default AGC startup 
 wait AGC rough lock time 
 fast split search path after 5sec 
 freeze AGC loop 
 fast split search 0.25kHz 
 split search ended 
 store the split value for the next time 
 set AGC gain start value 
 std AGC loop 
 standard split search 
 LNA startup 
 wait AGC accurate lock time 
 wait only AGC rough lock time
 nfft, guard, qam, alpha 
 P_dintl_native, P_dintlv_inv, P_hrch, P_code_rate, P_select_hp 
 offset loop parameters 
 P_timf_alpha = 6, P_corm_alpha=6, P_corm_thres=0x80 
 P_ctrl_inh_cor=0, P_ctrl_alpha_cor=4, P_ctrl_inh_isi=1, P_ctrl_alpha_isi=3, P_ctrl_inh_cor4=1, P_ctrl_alpha_cor4=3 
 P_ctrl_freeze_pha_shift=0, P_ctrl_pha_off_max=3 
 P_ctrl_sfreq_inh=0, P_ctrl_sfreq_step=5 
 P_dvsy_sync_wait 
 add 50% SFN margin + compensate for one DVSY-fifo TODO
 deactivate the possibility of diversity reception if extended interleave - not for 7000MC 
 P_dvsy_sync_mode = 0, P_dvsy_sync_enable=1, P_dvcb_comb_mode=2 
 channel estimation fine configuration 
 P_adp_regul_cnt 0.04 
 P_adp_noise_cnt -0.002 
 P_adp_regul_ext 0.02 
 P_adp_noise_ext -0.001 
 P_adp_regul_cnt 0.07 
 P_adp_noise_cnt -0.004 
 P_adp_regul_ext 0.02 
 P_adp_noise_ext -0.002 
 P_adp_regul_cnt 0.3 
 P_adp_noise_cnt -0.01 
 P_adp_regul_ext 0.1 
 P_adp_noise_ext -0.002 
 set power-up level: autosearch
 always use the setting for 8MHz here lock_time for 7,6 MHz are longer
 lock0 wait time
 lock0 wait time
 lock1 wait time
 lock1 wait time
 lock2 wait time
 lock2 wait time
 start search
 clear n_irq_pending 
 failed
 succeeded
 still pending
 we are already tuned - just resuming from suspend
 restart demod
 P_ctrl_inh_cor=0, P_ctrl_alpha_cor=4, P_ctrl_inh_isi=0, P_ctrl_alpha_isi=3, P_ctrl_inh_cor4=1, P_ctrl_alpha_cor4=3 
 never achieved a lock before - wait for timfreq to update
dump_reg(state);
 P_timf_alpha, P_corm_alpha=6, P_corm_thres=0x80 
 P_ctrl_freeze_pha_shift=0, P_ctrl_pha_off_max 
 P_ctrl_sfreq_inh=0, P_ctrl_sfreq_step 
 we achieved a lock - it's time to update the timf freq
 protect this driver to be used with 7000PC 
 case 2: fep->transmission_mode = TRANSMISSION_MODE_4K; break; 
 as long as the frontend_param structure is fixed for hierarchical transmission I refuse to use it 
 (tps >> 13) & 0x1 == hrch is used, (tps >> 10) & 0x7 == alpha 
 native interleaver: (dib7000m_read_word(state, 481) >>  5) & 0x1 
 start up the AGC 
 no channel found
 make this a config parameter 
 used with some prototype boards 
 designated i2c address 
 start diversity to pull_down div_str - just for i2c-enumeration 
 select DVB-T output
 set new i2c address and force divstart 
 unforce divstr
 deactivate div - it was just for i2c-enumeration 
 SPDX-License-Identifier: GPL-2.0-or-later
    Conexant 22702 DVB OFDM demodulator driver
    based on:
	Alps TDMB7 DVB OFDM demodulator driver
    Copyright (C) 2001-2002 Convergence Integrated Media GmbH
	  Holger Waechtler <holger@convergence.de>
    Copyright (C) 2004 Steven Toth <stoth@linuxtv.org>
 configuration settings 
 previous uncorrected block counter 
 Register values to initialise the demod 
 Stop acquisition 
 Retrieve the demod settings 
 Make sure the TPS regs are valid 
 Talk to the demod, set the FEC, GUARD, QAM settings etc 
 set inversion 
 set bandwidth 
 temp hack as manual not working 
 use auto configuration? 
 TPS Source - use hardware driven values 
 Begin acquisition 
 manually programmed values 
 mask 0x18 
 mask 0x07 
 mask 0x38 
 mask 0x07 
 mask 0x0c 
 mask 0x03 
 Begin channel acquisition 
 Reset the demod hardware and reset all of the configuration registers
 Realtime statistics 
 Averagtine statistics 
	
	  Experience suggests that the strength signal register works as
	  follows:
	  - In the absence of signal, value is 0xff.
	  - In the presence of a weak signal, bit 7 is set, not sure what
	    the lower 7 bits mean.
	  - In the presence of a strong signal, the register holds a 7-bit
	    value (bit 7 is cleared), with greater values standing for
	    weaker signals.
 Scale to 16 bit 
 Realtime statistics 
 Averagine statistics 
 RS Uncorrectable Packet Count then reset 
 allocate memory for the internal state 
 setup the state 
 check if the demod is there 
 create dvb_frontend 
 SPDX-License-Identifier: GPL-2.0-or-later
    Driver for ST STV0299 demodulator
    Copyright (C) 2001-2002 Convergence Integrated Media GmbH
	<ralph@convergence.de>,
	<holger@convergence.de>,
	<js@convergence.de>
    Philips SU1278SH
    Copyright (C) 2002 by Peter Schildmann <peter.schildmann@web.de>
    LG TDQF-S001F
    Copyright (C) 2002 Felix Domke <tmbinc@elitedvb.net>
		     & Andreas Oberritter <obi@linuxtv.org>
    Support for Samsung TBMU24112IMB used on Technisat SkyStar2 rev. 2.6B
    Copyright (C) 2003 Vadim Catana <skystar@moldova.cc>:
    Support for Philips SU1278 on Technotrend hardware
    Copyright (C) 2004 Andrew de Quincey <adq_dvb@lidskialf.net>
 check rate is within limits
 calculate value to program
 round correctly
 DiSEqC mode 
 burst mode 
	
	   HV switching over OP0, OP1 and OP2 are LNB power enable bits
 OP1 off, OP0 on 
 OP1 on, OP0 off 
 OP1 on, OP0 on 
 LNB power off! 
 set LNB to 18V 
 set voltage to (last ? 13V : 18V) 
 set the inversion
 allocate memory for the internal state 
 setup the state 
 check if the demod is there 
 standby off 
 register 0x00 contains 0xa1 for STV0299 and STV0299B 
 register 0x00 might contain 0x80 when returning from standby 
 create dvb_frontend 
 ppm 
 SPDX-License-Identifier: GPL-2.0-or-later
  Afatech AF9033 demodulator driver
  Copyright (C) 2009 Antti Palosaari <crope@iki.fi>
  Copyright (C) 2012 Antti Palosaari <crope@iki.fi>
 for old read_ber we return (curr - prev) 
 Write reg val table using reg addr auto increment 
 Main clk control 
 ADC clk control 
 Config register table 
 Demod clk output 
 TS interface 
 Demod core settings 
 Demod tuner specific settings 
 Force to program all parameters 
 Init stats here in order signal app which stats are supported 
 Prevent current leak by setting TS interface to parallel mode 
 Enable parallel TS 
 800 => 2000 because IT9135 v2 is slow to gain lock 
 Check bandwidth 
 Program tuner 
 Coefficients 
 IF frequency control 
 Get used IF frequency 
 VHF 
 UHF 
 Reset FSM 
 Read all needed TPS registers 
 Radio channel status: 0=no result, 1=has signal, 2=no signal 
 Has signal 
 TPS lock 
 Full lock 
 Signal strength 
 CNR 
 Read raw SNR value 
 Read superframe number 
 Read current transmission mode 
 2k 
 8k 
 4k 
 Read current modulation 
			
			  QPSK
			  CNR[dB] 13  -log10((1690000 - value)  value) + 2.6
			  value [653799, 1689999], 2.6  13 = 3355443
			
			  QAM-16
			  CNR[dB] 6  log10((value - 370000)  (828000 - value)) + 15.7
			  value [371105, 827999], 15.7  6 = 43900382
			
			  QAM-64
			  CNR[dB] 8  log10((value - 193000)  (425000 - value)) + 23.8
			  value [193246, 424999], 23.8  8 = 49912218
 UCBPERBER 
 Outer FEC, 204 byte packets 
 Inner FEC, bits 
		
		  Packet count used for measurement is 10000
		  (rsd_packet_count). Maybe it should be increased?
 Use DVBv5 CNR 
 Return 0.1 dB for AF9030 and 0-0xffff for IT9130. 
 1000x => 10x (0.1 dB) 
 1000x => 1x (1 dB) 
 Read current modulation 
 scale value to 0x0000-0xffff 
 Read signal strength of 0-100 scale 
 Scale value to 0x0000-0xffff 
 VHF 
 UHF 
 Scale value to 0x0000-0xffff 
 Allocate memory for the internal state 
 Setup the state 
 USB mode for AF9035 
 Create regmap 
 Firmware version 
 Sleep as chip seems to be partly active by default 
 IT9135 did not like to sleep at that early 
 Create dvb frontend 
 SPDX-License-Identifier: GPL-2.0-or-later
     Support for OR51132 (pcHDTV HD-3000) - VSBQAM
     Copyright (C) 2007 Trent Piepho <xyzzy@speakeasy.org>
     Copyright (C) 2005 Kirk Lapray <kirk_lapray@bigfoot.com>
     Based on code from Jack Kelliher (kelliher@xmission.com)
                            Copyright (C) 2002 & pcHDTV, inc.
  This driver needs two external firmware files. Please copy
  "dvb-fe-or51132-vsb.fw" and "dvb-fe-or51132-qam.fw" to
  usrlibhotplugfirmware or libfirmware
  (depending on configuration of firmware hotplug).
 Configuration settings 
 Demodulator private data 
 Result of last SNR calculation 
 Tuner private data 
 Write buffer to demod 
 msleep(20);  
 Write constant bytes, e.g. or51132_writebytes(state, 0x04, 0x42, 0x00);
   Less code and more efficient that loading a buffer on the stack with
 Read data from demod into buffer.  Returns 0 on success. 
 msleep(20);  
 Reads a 16-bit demod register.  Returns <0 on error. 
 Get size of firmware A and B 
 Upload firmware 
 50ms for operation to begin 
 Read back ucode version to besure we loaded correctly and are really up and running 
 Get uCode version 
		 Once upon a time, this command might have had something
		   to do with getting the firmware version, but it's
		   not used anymore:
 Read 8 bytes, two bytes at a time 
 Auto CH, Auto NTSC rej, MPEGser, MPEG2tr, phase noise-high 
 REC MODE inv IF spectrum, Normal 
 Channel MODE ATSCVSB8 
	 All QAM modes are:
	   Auto-deinterleave; MPEGser, MPEG2tr, phase noise-high
 Channel MODE Auto QAM64256 
 Channel MODE QAM256 
 Channel MODE QAM64 
 Set Receiver 1 register 
 Set operation mode in Receiver 6 register 
 Some modulations use the same firmware.  This classifies modulations
 Upload new firmware only if we need a different one 
 Set non-punctured clock for VSB 
 Set punctured clock for QAM 
 Change only if we are actually changing the modulation 
 Set to current mode 
 Update current frequency 
 Receiver Status 
 FIXME: Read frequency from frontend, take AFC into account 
 FIXME: How to read inversion setting? Receiver 6 register? 
 Receiver Status 
 Receiver Lock 
 Calculate SNR estimation (scaled by 2^24)
   8-VSB SNR and QAM equations from Oren datasheets
   For 8-VSB:
     SNR[dB] = 10  log10(897152044.8282  MSE^2 ) - K
     Where K = 0 if NTSC rejection filter is OFF; and
	   K = 3 if NTSC rejection filter is ON
   For QAM64:
     SNR[dB] = 10  log10(897152044.8282  MSE^2 )
   For QAM256:
     SNR[dB] = 10  log10(907832426.314266   MSE^2 )
   We re-write the snr equation as:
     SNR  2^24 = 10(c - 2intlog10(MSE))
   Where for QAM256, c = log10(907832426.314266)  2^24
 No signal 
		 Negative SNR, which is possible, but realisticly the
		demod will lose lock before the signal gets this bad.  The
 SNR after Equalizer 
	 Read status, contains modulation type for QAM_AUTO and
 QAM64 
 Calculate SNR using noise, c, and NTSC rejection correction 
 Calculate Strength from SNR up to 35dB 
 Even though the SNR can go higher than 35dB, there is some comfort 
 factor in having a range of strong signals that can show at 100%   
 Rather than use the 8.8 value snr, use state->snr which is 8.24 
 scale the range 0 - 352^24 into 0 - 65535 
 Allocate memory for the internal state 
 Setup the state 
 Create dvb_frontend 
 SPDX-License-Identifier: GPL-2.0-or-later
    Samsung S5H1411 VSBQAM demodulator driver
    Copyright (C) 2008 Steven Toth <stoth@linuxtv.org>
 configuration settings 
 Register values to initialise the demod, defaults to VSB 
 VSB SNR lookup table 
 QAM64 SNR lookup table 
 QAM256 SNR lookup table 
 8 bit registers, 16 bit values 
 Configure MPEG Signal Timing charactistics 
 Inverted 
 Talk to the demod, set the FEC, GUARD, QAM settings etc 
	 Issue a reset to the demod so it knows to resync against the
 Reset the demod hardware and reset all of the configuration registers
 The datasheet says that after initialisation, VSB is default 
	 Although the datasheet says it's in VSB, empirical evidence
	   shows problems getting lock on the first tuning request.  Make
 Serial 
 Parallel 
 Note: Leaving the I2C gate closed. 
 Register F2 bit 15 = Master Lock, removed 
 QAM FEC Lock 
 QAM EQ Lock 
 FEC Lock 
 EQ Lock 
 AFC Lock 
 Get the tuner status 
	 borrowed from lgdt330x.c
	 
	  Calculate strength from SNR up to 35dB
	  Even though the SNR can go higher than 35dB,
	  there is some comfort factor in having a range of
	  strong signals that can show at 100%
		 The following calculation method was chosen
		  purely for the sake of code re-use from the
 Convert from SNR in dB  10 to 8.24 fixed-point 
		 Convert from 8.24 fixed-point to
 allocate memory for the internal state 
 setup the state 
 check if the demod exists 
 create dvb_frontend 
 Note: Leaving the I2C gate open here. 
 Put the device into low-power mode until first use 
 SPDX-License-Identifier: GPL-2.0-or-later
  stv0900_sw.c
  Driver for ST STV0900 satellite demodulator IC.
  Copyright (C) ST Microelectronics.
  Copyright (C) 2009 NetUP Inc.
  Copyright (C) 2009 Igor M. Liplianin <liplianin@netup.ru>
 cut 3.0 
cut 3.0 
cut 2.0 and 1.x
cut 1.x and 2.0
cut 1.x and 2.0
cut 2.0
cut 3.0
 SPDX-License-Identifier: GPL-2.0-only
  tda18271c2dd: Driver for the TDA18271C2 tuner
  Copyright (C) 2010 Digital Devices GmbH
 Max transfer size done by I2C transfer functions 
 Tracking filter settings for band 0..6 
 Calibration temperature 
 true to use Pin 8 for FM Radio 
 Send in stdb, but leave osc on 
 Thermometer off 
 CAL_mode = 0 ????????? 
 PD_AGC1_Det = 0 
 AGC1_loop_off = 0, AGC1_Gain = 6 dB 
 AGC2_Gain = -6 dB 
 ForceLP_Fc2_En = 0, LP_Fc[2] = 0 
 CalDiv = u32( OscFreq  16384  16000000 ); 
 CAL_mode = 0 
 AGC1_Gain = 3 
 Switching off LT (as datasheet says) causes calibration on C1 to fail 
 (Readout of Cprog is always 255) 
 C1: ID == 83, C2: ID == 84 
 SM_LT = 1 
 LO_ForceSrce = 1 
 CAL_ForceSrce = 1 
 RFC_Cprog = 0 
 ForceLock = 0; 
 CAL_Mode = 3 
 LO_ForceSrce = 0 
 CAL_ForceSrce = 0 
 ForceLock = 1; 
 CAL_Mode = 0 
 SM_LT = 0 
 AGC1_Gain = 0 
 state->m_RF_A1[RF_Band] = ???? 
 CAL_mode = 1 
 Launch power measurement 
 Chip version, (needed for C1 workaround in CalibrateRF) 
 Launch power measurement 
 If level = 0, Cal mode = 0 
 AGC 1 Gain = 0 
 AGC 2 Gain = 0 (Datasheet = 3) 
 ForceLP_Fc2_En = 1, LPFc[2] = 1 
 Temperature stabilisation 
 also switches off Cal mode !!! 
 AGC1 gain setup 
 IRC Cal Low band 
 diff between sw and datasheet (ep3-md3) 
 missing in sw 
 IRC Cal mid band 
 Datasheet = 0xA9 
 IRC Cal high band 
 Datasheet = 0x91 
 Back to normal 
 m_bInitDone = true; 
 Power up 
 TODO Temperature compensation. There is defenitely a scale factor 
      missing in the datasheet, so leave it out for now.           
 printk("tda18271c2dd: %s Freq = %d Standard = %d IF = %d\n", __func__, Frequency, Standard, IntermediateFrequency); 
 get values from tables 
 switch RFAGC to high speed mode 
 m_EP4 default for XToutOn, CAL_Mode (0) 
 state->m_Regs[EP4] = state->m_EP4 | state->m_IFLevelDigital; 
 Add IF_notch for digital 
 Note: This is missing from flowchart in TDA18271 specification ( 1.5 MHz cutoff for FM ) 
 ForceLP_Fc2_En = 1, LPFc[2] = 1 
 ForceLP_Fc2_En = 0, LPFc[2] = 0 
 Dis_Power_level = 1, Filter 
 CALVCO_FortLOn = MS 
 AGC1_always_master = 0 
 AGC_firstn = 0 
 LO_forceSrce = 1 
 LO_forceSrce = 0 
 CAL_forceSrce = 1 
 CAL_forceSrce = 0 
 RFAGC to normal mode 
 Allow AGC's to settle down 
 Scale this from 0 to 50000 
 Scale range 500-1500 to 50000-80000 
 struct tda_state state = fe->tuner_priv; 
 bandwidth = priv->bandwidth; 
 SPDX-License-Identifier: GPL-2.0-or-later
 DVB compliant Linux driver for the DVB-S si21092110 demodulator
 Copyright (C) 2008 Igor M. Liplianin (liplianin@me.by)
Sampling rate of the ADC in MHz
	register default initialization 
 set i2c_inc_disable 
	low level readwrites 
 = { reg1, data };
fill the FIFO
 begin LNB signaling 
	30.06.2008 
DVB QPSK SYSTEM MODE REG
transport stream config
	
	mode = PARALLEL;
	sdata_form = LSB_FIRST;
	clk_edge = FALLING_EDGE;
	clk_mode = CLK_GAPPED_MODE;
	strt_len = BYTE_WIDE;
	sync_pol = ACTIVE_HIGH;
	val_pol = ACTIVE_HIGH;
	err_pol = ACTIVE_HIGH;
	sclk_rate = 0x00;
	parity = 0x00 ;
	data_delay = 0x00;
	clk_delay = 0x00;
	pclk_smooth = 0x00;
		sclk_rate + (parity << 2)
		+ (data_delay << 3) + (clk_delay << 4)
		+ (pclk_smooth << 5);
	status = si21_readreg(state, ANALOG_AGC_POWER_LEVEL_REG,
	initiates a channel acquisition sequence
 write code rates to use in the Viterbi search 
 clear acq_start bit 
 use new Carrier Frequency Offset Estimator (QuickLock) 
 start automatic acq 
	 freq		Channel carrier frequency in KHz (i.e. 1550000 KHz)
 in MHz 
 boolean 
 INTERMEDIATE VALUES 
 MHz 
 MHz 
 allowable sample rates for ADC in MHz 
 in MHz 
 in MHz 
ADC MHz
 ppm 
 allocate memory for the internal state 
 setup the state 
 check if the demod is there 
 standby off 
	 register 0x00 contains:
		0x34 for SI2107
		0x24 for SI2108
		0x14 for SI2109
		0x04 for SI2110
 create dvb_frontend 
 SPDX-License-Identifier: GPL-2.0-only
   Driver for the Spase sp887x demodulator
  This driver needs external firmware. Please use the command
  "<kerneldir>scriptsget_dvb_firmware sp887x" to
  downloadextract it, and then copy it to usrlibhotplugfirmware
  or libfirmware (depending on configuration of firmware hotplug).
 demodulator private data 
		
		   in case of soft reset we ignore ACK errors...
 microcontroller STOP 
 microcontroller START 
 setup AGC parameters 
   load firmware and setup MPEG interface...
 ignore the first 10 bytes, then we expect 0x4000 bytes of firmware 
 soft reset 
 setup write pointer to -1 (end of memory) 
 bit 0x8000 in address is set to enable 13bit mode 
 dummy write (wrap around to start of memory) 
 bit 0x8000 in address is set to enable 13bit mode 
 bit 0x4000 enables multibyte readwrite transfers 
 write register is 0xf0a 
 don't write RS bytes between packets 
 suppress clock if (!data_valid) 
 setup MPEG interface... 
 parallel mode (serial mode == 1) 
 ADC mode, 2 for MT8872, 3 for SP8870SP8871 
 bit 0x010: enable data valid signal 
 use specified parameters 
 enable autoprobing 
   estimates division of two 24bit numbers,
   derived from the ves1820stv0299 driver code
[kHz]
 sample rate correction 
 carrier offset correction 
 setup the PLL 
 read status reg in order to clear <pending irqs 
 filter for 678 Mhz channel 
 scan order: 2k first = 0, 8k first = 1 
	 enable OFDM and SAW bits as lock indicators in sync register 0xf17,
	  optimize algorithm for given bandwidth...
if (sync0x200 & 0x004)
	status |= FE_HAS_SYNC | FE_HAS_CARRIER;
if (sync0x200 & 0x008)
	status |= FE_HAS_VITERBI;
 tuner adjustment requested...
 tristate TS output and disable interface pins 
 request the firmware, this will block until someone uploads it 
 enable TS output and interface pins 
 allocate memory for the internal state 
 setup the state 
 check if the demod is there 
 create dvb_frontend 
 SPDX-License-Identifier: GPL-2.0-or-later
	STB0899 Multistandard Frontend driver
	Copyright (C) Manu Abraham (abraham.manu@gmail.com)
	Copyright (C) ST Microelectronics
 Max transfer size done by I2C transfer functions 
1;
 CN in dB10, NIRMNIRL 
 DVB-S AGCIQ_VALUE vs. signal level in dBm10.
  As measured, connected to a modulator.
  -8.0 to -50.0 dBm directly connected,
  -52.0 to -74.8 with extra attenuation.
  Cut-off to AGCIQ_VALUE = 0x80 below -74.8dBm.
  Crude linear extrapolation below -84.8dBm and above -8.0dBm.
 DVB-S2 IF_AGC_GAIN vs. signal level in dBm10.
  As measured, connected to a modulator.
  -8.0 to -50.1 dBm directly connected,
  -53.0 to -76.6 with extra attenuation.
  Cut-off to IF_AGC_GAIN = 0x3fff below -76.6dBm.
  Crude linear extrapolation below -76.6dBm and above -8.0dBm.
 DVB-S2 EsN0 quant in dB100 vs read value  100
 DVB-S2 EsN0 estimate in dB100 vs read value 
	
	  Bug ID 9:
	  access to 0xf2xx0xf6xx
	  must be followed by read from 0xf2ff0xf6ff.
 0xf3	S2 Base Address (MSB)	
 0xfc	S2 Base Address (LSB)	
 0x00	Base Address (LSB)	
 0x04	Base Address (LSB)	
 0x00	Base Address (MSB)	
 0x00	Base Address (MSB)	
 0xf3	Reg Offset	
 0x44	Reg Offset	
 Dummy	
 Actual	
 Base Address Setup	
 0xf3	S2 Base Address (MSB)	
 0xfc	S2 Base Address (LSB)	
 0x00	Base Address (LSB)	
 0x04	Base Address (LSB)	
 0x00	Base Address (MSB)	
 0x00	Base Address (MSB)	
 0xf3	Reg Offset	
 0x44	Reg Offset	
 data			
 data			
 data			
 data			
	
	  Bug ID 9:
	  access to 0xf2xx0xf6xx
	  must be followed by read from 0xf2ff0xf6ff.
	
	  Bug ID 9:
	  access to 0xf2xx0xf6xx
	  must be followed by read from 0xf2ff0xf6ff.
  stb0899_get_mclk
  Get STB0899 master clock frequency
  ExtClk: external clock frequency (Hz)
  stb0899_set_mclk
  Set STB0899 master Clock frequency
  Mclk: demodulator master clock
  ExtClk: external clock frequency (Hz)
 post process event 
 post process event 
  stb0899_get_alpha
  return: rolloff
  stb0899_init_calc
 Read registers (in burst mode)	
 AGC1R and AGC2O	
 Initial calculations	
 DVBS2 Initial calculations	
 Set AGC value to the middle	
	if ((pParams->SpectralInv == FE_IQ_NORMAL) || (pParams->SpectralInv == FE_IQ_AUTO))
		pParams->IQLocked = 0;
	else
		pParams->IQLocked = 1;
 enable FIFO precharge	
 wait for FIFO empty	
 extract data 
 wait for diseqc idle	
 set to burst mode	
 unmodulated	
 modulated	
 wait for diseqc idle	
 restore state	
	struct dvb_diseqc_slave_reply rx_data;
 count = 0, i; 
 disable Tx spy	
 DiSEqC Tx freq	
	u8 reg;
 post process event 
 Activate all clocks; DVB-S2 registers are inaccessible otherwise. 
 post process event 
 init device		
 init S2 demod	
 init S1 demod	
 init S2 fec		
 init test		
 CN = 30.1 dB 
 CN = 27.0 dB 
 quantn = 100  log(quant^2) 
 estn = 100  log(est) 
 snr(dBm10) = -10(log(est)-log(quant^2)) => snr(dBm10) = (100log(quant^2)-100log(est))10 
 post process event 
 post process event 
  stb0899_get_error
  viterbi error for DVB-SDSS
  packet error for DVB-S2
  Bit Error Rate or Packet Error Rate  10 ^ 7
 Viterbi Check	
 Error Rate		
 ber = ber  10 ^ 7	
 ber = ber  10 ^ 7	
 wait for diseqc idle	
 FECMViterbi ON	
 FECMViterbi OFF	
 FECMViterbi ON	
  stb0899_set_iterations
  set the LDPC iteration scale function
 checking Search Range is meaningless for a fixed 3 Mhz			
 15Mb < srate < 45Mb, gain = 8dB	
  5Mb < srate < 15Mb, gain = 12dB	
  1Mb < srate <  5Mb, gain = 14db	
			
			  search = user search range +
			 	    500Khz +
			 	    2  Tuner_step_size +
			 	    10% of the symbol rate
 What to do for tuners having no bandwidth setup ?	
 enable tuner IO 
 disable tuner IO 
 Set DVB-S1 AGC		
 Run the search algorithm	
				stb0899_write_reg(state, STB0899_ERRCTRL1, 0x3d);  Viterbi Errors	
				internal->v_status = stb0899_read_reg(state, STB0899_VSTATUS);
				internal->err_ctrl = stb0899_read_reg(state, STB0899_ERRCTRL1);
				dprintk(state->verbose, FE_DEBUG, 1, "VSTATUS=0x%02x", internal->v_status);
				dprintk(state->verbose, FE_DEBUG, 1, "ERR_CTRL=0x%02x", internal->err_ctrl);
 enable tuner IO 
 disable tuner IO 
			pParams->SpectralInv		= pSearch->IQ_Inversion;
 Set DVB-S2 AGC		
 Set IterScale =f(MCLK,SYMB)	
 Run the search algorithm	
				stb0899_write_reg(state, STB0899_ERRCTRL1, 0xb6);  Packet Errors	
				internal->v_status = stb0899_read_reg(state, STB0899_VSTATUS);
				internal->err_ctrl = stb0899_read_reg(state, STB0899_ERRCTRL1);
	.wakeup				= stb0899_wakeup,
 use configured inversion as default -- we'll later autodetect inversion 
 SPDX-License-Identifier: GPL-2.0-or-later
  Panasonic MN88473 DVB-TT2C demodulator driver
  Copyright (C) 2014 Antti Palosaari <crope@iki.fi>
 Program tuner 
 Calculate IF registers 
 PLP 
 Reset FSM 
 Lock detection 
 Signal strength 
 AGCRD[15:6] gives us a 10bit value ([5:0] are always 0) 
 CNR 
 DVB-T CNR 
 CNR[dB]: 10  (log10(65536  value) + 0.2) 
 log10(65536) = 80807124, 0.2 = 3355443 
 DVB-T2 CNR 
 0=SISO, 1=MISO 
 CNR[dB]: 10  (log10(16384  value) - 0.6) 
 log10(16384) = 70706234, 0.6 = 10066330 
 CNR[dB]: 10  (log10(65536  value) + 0.2) 
 log10(65536) = 80807124, 0.2 = 3355443 
 DVB-C CNR 
 signal 
 noise 
 CNR[dB]: 10  log10(8  (signal  noise)) 
 log10(8) = 15151336 
 BER 
 DVB-T & DVB-C BER 
 PER 
 Check if firmware is already running 
 Request the firmware, this will block and timeout 
 Parity check of firmware 
 TS config 
 init stats here to indicate which stats are supported 
 Caller really need to provide pointer for frontend we create 
	
	  Chip has three I2C addresses for different register banks. Used
	  addresses are 0x18, 0x1a and 0x1c. We register two dummy clients,
	  0x1a and 0x1c, in order to get own I2C client for each register bank.
	 
	  Also, register bank 2 do not support sequential IO. Only single
	  register write or read is allowed to that bank.
 Check demod answers with correct chip id 
 Sleep because chip is active by default 
 Create dvb frontend 
 SPDX-License-Identifier: GPL-2.0-or-later
     Support for LGDT3306A - 8VSBQAM-B
     Copyright (C) 2013 Fred Richter <frichter@hauppauge.com>
     - driver structure based on lgdt3305.[ch] by Michael Krufky
     - code based on LG3306_V0.35 API by LG Electronics Inc.
  Older drivers treated QAM64 and QAM256 the same; that is the HW always
  used "Auto" mode during detection.  Setting "forced_manual"=1 allows
  the user to treat these modes as separate.  For backwards compatibility,
  it's off by default.  QAM_AUTO can now be specified to achive that
  effect even if "forced_manual"=1
 FGR - comment out to remove dump code 
  LG3306A Register Usage
   (LG does not really name the registers, so this code does not either)
  0000 -> 00FF Common control and status
  1000 -> 10FF Synchronizer control and status
  1F00 -> 1FFF Smart Antenna control and status
  2100 -> 21FF VSB Equalizer control and status
  2800 -> 28FF QAM Equalizer control and status
  3000 -> 30FF FEC control and status
 ------------------------------------------------------------------------ 
 transport packet format - TPSENB=0x80 
	
	  start of packet signal duration
	  TPSSOPBITEN=0x40; 0=byte duration, 1=bit duration
 TPCLKSUPB=0x10 
 TPCLKPOL=0x04, TPVALPOL=0x02 
		
		  Tristate bus; TPOUTEN=0x80, TPCLKOUTEN=0x20,
		  TPDATAOUTEN=0x08
 AGCIFOUTENB=0x40; 1=Disable IFAGC pin 
 enable IFAGC pin 
 enable bus 
 into reset 
 power down 
 out of reset 
 power up 
 0. Spectrum inversion detection manual; spectrum inverted 
 SPECINVAUTO Off 
 SPECINV On 
 1. Selection of standard mode(0x08=QAM, 0x80=VSB) 
 2. Bandwidth mode for VSB(6MHz) 
 STDOPDETTMODE[2:0]=3 
 3. QAM mode detection mode(None) 
 STDOPDETCMODE[1:0]=0 
 4. ADC sampling frequency rate(2x sampling) 
 SAMPLING4XFEN=0 
 FGR - disable any AICC filtering, testing only 
 AICCFIXFREQ0 NT N-1(Video rejection) 
 AICCFIXFREQ1 NT N-1(Audio rejection) 
 AICCFIXFREQ2 NT Co-Channel(Video rejection) 
 AICCFIXFREQ3 NT Co-Channel(Audio rejection) 
 FGR - this works well for HVR-1955,1975 
 5. AICCOPMODE  NT N-1 Adj. 
 AICCFIXFREQ0 NT N-1(Video rejection) 
 AICCFIXFREQ1 NT N-1(Audio rejection) 
 AICCFIXFREQ2 NT Co-Channel(Video rejection) 
 AICCFIXFREQ3 NT Co-Channel(Audio rejection) 
 6. EQ step size 
 7. Reset 
 1. Selection of standard mode(0x08=QAM, 0x80=VSB) 
 1a. Spectrum inversion detection to Auto 
 SPECINV Off 
 SPECINVAUTO On 
 2. Bandwidth mode for QAM 
 STDOPDETTMODE[2:0]=0 VSB Off 
 3. : 64QAM256QAM detection(manual, auto) 
 Check for forced Manual modulation modes; otherwise always "auto" 
 STDOPDETCMODE[1:0]= 1=Manual 
 STDOPDETCMODE[1:0]= 2=Auto 
 3a. : 64QAM256QAM selection for manual 
 QMDQMODE[2:0]=2=QAM64 
 QMDQMODE[2:0]=4=QAM256 
 4. ADC sampling frequency rate(4x sampling) 
 SAMPLING4XFEN=1 
 5. No AICC operation in QAM mode 
 5.1 V0.36 SRDCHKALWAYS : For better QAM detection 
 5.2 V0.36 Control of "no signal" detector function 
 5.3 Fix for Blonder Tongue HDE-2H-QAM and AQM modulators 
 SELFSYNCFINDEN_CQS=0; disable auto reset 
 6. Reset 
 ------------------------------------------------------------------------ 
 TODO: anything we want to do here??? 
 ------------------------------------------------------------------------ 
 0=Manual 1=Auto(QAM only) - SPECINVAUTO=0x04 
 3.25Mhz 
 3.50Mhz 
 4.00Mhz 
 5.00Mhz 
 5.38Mhz 
 ------------------------------------------------------------------------ 
 NI2CRPTEN=0x80 
 force re-tune, when we wake 
 disable data bus 
 power down 
 1. Normal operation mode 
 SIMFASTENB=0x01 
 2. Spectrum inversion auto detection (Not valid for VSB) 
 3. Spectrum inversion(According to the tuner configuration) 
 4. Peak-to-peak voltage of ADC input signal 
 ADCSEL1V=0x80=1Vpp; 0x00=2Vpp 
 5. ADC output data capture clock phase 
 0=same phase as ADC clock 
 5a. ADC sampling clock source 
 ADCCLKPLLSEL=0x08; 0=use ext clock, not PLL 
 6. Automatic PLL set 
 PLLSETAUTO=0x40; 0=off 
 24MHz 
 7. Frequency for PLL output(0x2564 for 192MHz for 24MHz) 
 8. ADC sampling frequency(0x180000 for 24MHz sampling) 
 25MHz 
 7. Frequency for PLL output 
 8. ADC sampling frequency(0x190000 for 25MHz sampling) 
 9. Center frequency of input signal of ADC 
 3.25MHz 
 10. Fixed gain error value 
 gain error=0 
 10a. VSB TR BW gear shift initial step 
 SAMGSAUTOSTL_V[3:0] = 2 
 10b. Timing offset calibration in low temperature for VSB 
 10c. Timing offset calibration in low temperature for QAM 
 11. Using the imaginary part of CIR in CIR loading 
 do not use imaginary of CIR 
 12. Control of no signal detector function 
 NOUSENOSIGDET=0, enable no signal detector 
 FGR - put demod in some known mode 
 13. TP stream format 
 14. disable output buses 
 15. Sleep (in reset) 
 power up 
 spectral_inversion defaults already set for VSB and QAM 
 enable data bus 
 ------------------------------------------------------------------------ 
 Carrier offset sub loop bandwidth 
 SNR is over 18dB and no ghosting 
 final bandwidth = 0 
 final bandwidth = 4 
 Adjust Notch Filter 
 Turn on the Notch Filter 
 VSB Timing Recovery output normalization 
 Channel variation 
 SNR of Frame sync 
 Strong Main CIR 
 Dynamic ghost exists 
 Weak ghost or static channel 
 signal error 
 log(1)=0 
 x > 10 
 was our input an exact multiple of 10 
 don't need to interpolate 
 find our place on the log curve 
 do a linear interpolation to get in-between values 
 Mean-Square Error 
 Constelation power 
 no signal 
 report SNR in dB  10 
	
	  Calculate some sort of "strength" from SNR
 snr_x10 
 snr100 
 16dB 
 need to know actual modulation to set proper SNR baseline 
 QAM-256 28dB 
 QAM-64  22dB 
 65% 
 78%-100% 
 ------------------------------------------------------------------------ 
	 FGR - FIXME - I don't know what value is expected by dvb_core
 NBERVALUE[24-31] 
 NBERVALUE[16-23] 
 NBERVALUE[8-15] 
 NBERVALUE[0-7] 
	 FGR - FIXME - I don't know what value is expected by dvb_core
 TPIFTPERRCNT[0-7] 
 force re-tune 
 set frontend 
 check if we have a valid signal 
 verify that we're talking to a lg3306a 
	 FGR - NOTE - there is no obvious ChipId to check; we check
 FIXME - re-enable when we know this is right 
 FIXME - re-enable when we know this is right 
 FIXME - re-enable when we know this is right 
 SOFTRSTB 1'b1 1'b1 1'b1 ADCPDB 1'b1 PLLPDB GBBPDB 11111111 
 1'b1 1'b1 1'b0 1'b0 AUTORPTRS 
 NI2CRPTEN 1'b0 1'b0 1'b0 SPECINVAUT 
 AGCRFOUT 
 ADCSEL1V ADCCNT ADCCNF ADCCNS ADCCLKPLL 
 PLLINDIVSE 
 PLLCTRL[7:0] 11100001 
 SYSINITWAITTIME[7:0] (msec) 00001000 
 STDOPMODE[7:0] 10000000 
 1'b0 1'b0 1'b0 STDOPDETTMODE[2:0] STDOPDETCMODE[1:0] 00011110 
 DAFTEN 1'b1 x x SCSYSLOCK 
 SCSYSLOCKCHKTIME[7:0] (10msec) 01100100 
 x SAMPLING4 
 SAMFREQ[15:8] 00000000 
 SAMFREQ[7:0] 00000000 
 IFFREQ[15:8] 01100000 
 IFFREQ[7:0] 00000000 
 AGCEN AGCREFMO 
 AGCRFFIXB AGCIFFIXB AGCLOCKDETRNGSEL[1:0] 1'b1 1'b0 1'b0 1'b0 11101000 
 AGCFIXVALUE[7:0] 01111111 
 AGCREF[15:8] 00001010 
 AGCREF[7:0] 11100100 
 AGCDELAY[7:0] 00100000 
 AGCRFBW[3:0] AGCIFBW[3:0] 10001000 
 AGCUDOUTMODE[1:0] AGCUDCTRLLEN[1:0] AGCUDCTRL 
 1'b1 PFEN MFEN AICCVSYNC 
 1'b0 1'b1 1'b0 1'b1 AICCVSYNC 
 AICCALPHA[3:0] 1'b1 1'b0 1'b1 1'b0 01111010 
 AICCDETTH[19:16] AICCOFFTH[19:16] 00000000 
 AICCDETTH[15:8] 01111100 
 AICCDETTH[7:0] 00000000 
 AICCOFFTH[15:8] 00000101 
 AICCOFFTH[7:0] 11100000 
 AICCOPMODE3[1:0] AICCOPMODE2[1:0] AICCOPMODE1[1:0] AICCOPMODE0[1:0] 00000000 
 AICCFIXFREQ3[23:16] 00000000 
 AICCFIXFREQ3[15:8] 00000000 
 AICCFIXFREQ3[7:0] 00000000 
 AICCFIXFREQ2[23:16] 00000000 
 AICCFIXFREQ2[15:8] 00000000 
 AICCFIXFREQ2[7:0] 00000000 
 AICCFIXFREQ1[23:16] 00000000 
 AICCFIXFREQ1[15:8] 00000000 
 AICCFIXFREQ1[7:0] 00000000 
 AICCFIXFREQ0[23:16] 00000000 
 AICCFIXFREQ0[15:8] 00000000 
 AICCFIXFREQ0[7:0] 00000000 
 1'b0 1'b1 1'b0 1'b0 x DAGC1STER 
 DAGC1STEN DAGC1STER 
 DAGC1STREF[15:8] 00001010 
 DAGC1STREF[7:0] 11100100 
 DAGC2NDE 
 DAGC2NDREF[15:8] 00001010 
 DAGC2NDREF[7:0] 10000000 
 DAGC2NDLOCKDETRNGSEL[1:0] 
 1'b1 SAMGEARS 
 SAMLFGMA 
 SAMLFBWM 
 1'b1 CRGEARSHE 
 CRLFGMAN 
 CFLFBWMA 
 CRLFGMAN 
 x x x x CRLFGSTEP_VS[3:0] xxxx1001 
 CRLFBWMA 
 CRLFBWMA 
 1'b0 1'b1 1'b1 1'b0 MSECALCDA 
 TPOUTEN TPIFEN TPCLKOUTE 
 TPSENB TPSSOPBITE 
 TP47HINS x x CHBERINT PERMODE[1:0] PERINT[1:0] 1xx11100 
 x x x x x IQSWAPCTRL[2:0] xxxxx000 
 NBERCON NBERST NBERPOL NBERWSYN 
 x NBERLOSTTH[2:0] NBERACQTH[3:0] x0000000 
 NBERPOLY[31:24] 00000000 
 NBERPOLY[23:16] 00000000 
 NBERPOLY[15:8] 00000000 
 NBERPOLY[7:0] 00000000 
 NBERPED[31:24] 00000000 
 NBERPED[23:16] 00000000 
 NBERPED[15:8] 00000000 
 NBERPED[7:0] 00000000 
 x AGCLOCK DAGCLOCK SYSLOCK x x NEVERLOCK[1:0] 
 SPECINVST 
 SYSLOCKTIME[15:8] 
 SYSLOCKTIME[7:0] 
 FECLOCKTIME[15:8] 
 FECLOCKTIME[7:0] 
 AGCACCOUT[15:8] 
 AGCACCOUT[7:0] 
 AICCREJSTATUS[3:0] AICCREJBUSY[3:0] 
 AICCVSYNC 
 CARRFREQOFFSET[15:8] 
 CARRFREQOFFSET[7:0] 
 SAMFREQOFFSET[23:16] 
 SAMFREQOFFSET[15:8] 
 SAMFREQOFFSET[7:0] 
 SYNCLOCK SYNCLOCKH 
 covered elsewhere 
 CONSTPWR[15:8] 
 CONSTPWR[7:0] 
 BMSE[15:8] 
 BMSE[7:0] 
 MSE[15:8] 
 MSE[7:0] 
 CONSTI[7:0] 
 CONSTQ[7:0] 
 TPIFTPERRCNT[7:0] 
 TPCORREC 
 VBBER[15:8] 
 VBBER[7:0] 
 VABER[15:8] 
 VABER[7:0] 
 TPERRCNT[7:0] 
 NBERLOCK x x x x x x x 
 NBERVALUE[31:24] 
 NBERVALUE[23:16] 
 NBERVALUE[15:8] 
 NBERVALUE[7:0] 
 1'b0 WODAGCOU 
 x x 1'b1 1'b1 x SRD_Q_QM 
 SRDWAITTIME[7:0] (10msec) 00100011 
 SRDWAITTIME_CQS[7:0] (msec) 01100100 
 x 1'b1 1'b0 1'b0 x QMDQAMMODE[2:0] x100x010 
 1'b0 1'b1 1'b0 1'b0 SAMGSEND_CQS[3:0] 01001110 
 SAMGSAUTOSTL_V[3:0] SAMGSAUTOEDL_V[3:0] 01000110 
 1'b1 1'b1 SAMCNORMBP_V[1:0] 1'b0 1'b0 SAMMODESEL_V[1:0] 11100001 
 SAMZTEDSE 
 EQSTATUSE 
 x PMAPG2_V[2:0] x DMAPG2_V[2:0] x001x011 
 1'b1 EQSTATUSE 
 CRMAPBWSTL_V[3:0] CRMAPBWEDL_V[3:0] 00000100 
 1'b0 x CRMODE_V[1:0] 1'b1 x 1'b1 x 0x111x1x 
 1'b0 1'b0 1'b1 1'b0 1'b1 PNBOOSTSE 
 CREPHNGAIN2_V[3:0] CREPHNPBW_V[3:0] 10010001 
 x x x x x CREPHNEN_ 
 CREPHNTH_V[7:0] 00010101 
 CRSWEEPN 
 CRPGAIN_V[3:0] x x 1'b1 1'b1 1001xx11 
 CRPBW_V[3:0] x x 1'b1 1'b1 0001xx11 
 DAFTSTATUS[1:0] x x x x x x 
 SRDSTATUS[1:0] x x x x x SRDLOCK 
 EQSTATUS_CQS[1:0] x x x x x x 
 EQSTATUS_V[1:0] x x x x x x 
 SMART_ANT 
 MODEDETE 
 x x x x x x x SFNRST xxxxxxx0 
 NUMOFANT[7:0] 10000000 
 x SELMASK[6:0] x0000000 
 x SETMASK[6:0] x0000000 
 x TXDATA[6:0] x0000000 
 x CHNUMBER[6:0] x0000000 
 AGCTIME[23:16] 10011000 
 AGCTIME[15:8] 10010110 
 AGCTIME[7:0] 10000000 
 ANTTIME[31:24] 00000000 
 ANTTIME[23:16] 00000011 
 ANTTIME[15:8] 10010000 
 ANTTIME[7:0] 10010000 
 SYNCTIME[23:16] 10011000 
 SYNCTIME[15:8] 10010110 
 SYNCTIME[7:0] 10000000 
 SNRTIME[31:24] 00000001 
 SNRTIME[23:16] 01111101 
 SNRTIME[15:8] 01111000 
 SNRTIME[7:0] 01000000 
 FECTIME[23:16] 00000000 
 FECTIME[15:8] 01110010 
 FECTIME[7:0] 01110000 
 FECTHD[7:0] 00000011 
 SNRTHD[23:16] 00001000 
 SNRTHD[15:8] 01111111 
 SNRTHD[7:0] 10000101 
 IRQFLG x x SFSDRFLG MODEBFLG SAVEFLG SCANFLG TRACKFLG 
 x SYNCCON SNRCON FECCON x STDBUSY SYNCRST AGCFZCO 
 x x x SCANOPCD[4:0] 
 x x x x MAINOPCD[3:0] 
 x x RXDATA[13:8] 
 RXDATA[7:0] 
 x x SDTDATA[13:8] 
 SDTDATA[7:0] 
 ANTSNR[23:16] 
 ANTSNR[15:8] 
 ANTSNR[7:0] 
 x x x x ANTFEC[13:8] 
 ANTFEC[7:0] 
 MAXCNT[7:0] 
 SCANCNT[7:0] 
 MAXPW[23:16] 
 MAXPW[15:8] 
 MAXPW[7:0] 
 CURPWMSE[23:16] 
 CURPWMSE[15:8] 
 CURPWMSE[7:0] 
 SMART_ANT 
 1'b1 1'b1 1'b1 CIRQEN x x 1'b0 1'b0 1111xx00 
 EQAUTOST 
 CHFAST[7:0] 01100000 
 FFFSTEP_V[3:0] x FBFSTEP_V[2:0] 0001x001 
 PHDEROTBWSEL[3:0] 1'b1 1'b1 1'b1 1'b0 10001110 
 1'b1 1'b1 1'b1 1'b1 x x TPIFLOCKS 
 DYNTRACKFDEQ[3:0] x 1'b0 1'b0 1'b0 1010x000 
 TRMODE[1:0] 1'b1 1'b1 1'b0 1'b1 1'b1 1'b1 01110111 
 AICCCTRLE 
 PHNCNFCNT[7:0] 00000100 
 1'b0 1'b0 1'b0 1'b1 x BADSINGLEDYNTRACKFBF[2:0] 0001x001 
 1'b0 1'b0 1'b0 1'b1 x BADSLOWSINGLEDYNTRACKFBF[2:0] 0001x001 
 CNFCNTTPIF[7:0] 00001000 
 TPERRCNTTPIF[7:0] 00000001 
 x x x x x x FBDLYCIR[9:8] 
 FBDLYCIR[7:0] 
 MAXPWRMAIN[7:0] 
 NCOMBDET x x x x x x x 
 x MAINSTRON 
 FFFEQSTEPOUT_V[3:0] FBFSTEPOUT_V[2:0] 
 x x SNRREF[5:0] 
 1'b0 1'b1 x x FFFSTEP_CQS[1:0] FFFCENTERTAP[1:0] 01xx1110 
 1'b0 x 1'b0 1'b1 FBFSTEP_CQS[1:0] 1'b1 1'b0 0x011110 
 ENNOSIGDE 
 1'b1 1'b1 NOUSENOSI 
 EQINITWAITTIME[7:0] 01100100 
 1'b1 1'b1 1'b1 x x x 1'b0 RPTRSTM 
 RPTRSTWAITTIME[7:0] (100msec) 00110010 
 FRAMELOC 
 1'b1 1'b0 1'b0 1'b0 x x FRAMELOCKMODE_CQS[1:0] 1000xx11 
 VDLOCK_Q FRAMELOCK 
 MPEGLOCK 
 suppress DBG_REG during reg dump 
 DBG_DUMP 
 if this is set, it overrides the default swzigzag 
 create mux i2c adapter for tuner 
 create dvb_frontend 
 SPDX-License-Identifier: GPL-2.0-or-later
  Sony CXD2820R demodulator driver
  Copyright (C) 2010 Antti Palosaari <crope@iki.fi>
 Write register table 
 update GPIOs only when needed 
 enable  disable 
 input  output 
 high  low 
 write bits [7:2] 
 write bits [5:0] 
 switch between DVB-T and DVB-T2 when tune fails 
 set frontend 
 frontend lock wait loop count 
 wait frontend lock 
 check if we have a valid signal 
 default: DVB-TT2 
  XXX: That is wrapper to cxd2820r_probe() via driver core in order to provide
  proper I2C client for legacy media attach binding.
  New users must use I2C client binding directly!
 Check demod answers with correct chip id 
	
	  Chip has two I2C addresses for different register banks. We register
	  one dummy I2C client in in order to get own I2C client for each
	  register bank.
 Add GPIOs 
 Dynamic allocation 
		
		  Use static GPIO configuration if GPIOLIB is undefined.
		  This is fallback condition.
 Create dvb frontend 
 Setup callbacks 
 SPDX-License-Identifier: GPL-2.0-or-later
     Support for LGDT3302 and LGDT3303 - VSBQAM
     Copyright (C) 2005 Wilson Michaels <wilsonmichaels@earthlink.net>
                       NOTES ABOUT THIS DRIVER
  This Linux driver supports:
    DViCO FusionHDTV 3 Gold-Q
    DViCO FusionHDTV 3 Gold-T
    DViCO FusionHDTV 5 Gold
    DViCO FusionHDTV 5 Lite
    DViCO FusionHDTV 5 USB Gold
    Air2PCAirStar 2 ATSC 3rd generation (HD5000)
    pcHDTV HD5500
 Use Equalizer Mean Squared Error instead of Phaser Tracker MSE 
 #define USE_EQMSE 
 Configuration settings 
 Demodulator private data 
 Result of last SNR calculation 
 Tuner private data 
 data bytes to send 
 number of bytes to send )
  This routine writes the register (reg) to the demod bus
  then reads the data returned for (len) bytes.
 Software reset 
		
		  bit 6 is active low software reset
		  bits 5-0 are 1 to mask interrupts
 force reset high (inactive) and unmask interrupts 
 bit 0 is active low software reset 
 force reset high (inactive) 
	
	  Array of byte pairs <address, value>
	  to initialize each different chip
 Use 50MHz param values from spec sheet since xtal is 50 
		
		  Change the value of NCOCTFV[25:0] of carrier
		  recovery center frequency register
		
		  Change the TPCLK pin polarity
		  data is valid on falling clock
		
		  Change the value of IFBW[11:0] of
		  AGC IFRF loop filter bandwidth register
		
		  Change the value of bit 6, 'nINAGCBY' and
		  'NSSEL[1:0] of ACG function control register 2
		
		  Change the value of bit 6 'RFFIX'
		  of AGC function control register 3
		
		  Set the value of 'INLVTHD' register 0x2a0x2c
		  to 0x7fe
		
		  Change the value of IAGCBW[15:8]
		  of inner AGC loop filter bandwidth
	
	  Hardware reset is done using gpio[0] of cx23880x chip.
	  I'd like to do it here, but don't know how to find chip address.
	  cx88-cards.c arranges for the reset bit to be inactive (high).
	  Maybe there needs to be a callable function in cx88-core or
	  the caller of this function needs to do it.
	
	  Array of byte pairs <address, value>
	  to initialize 8VSB for lgdt3303 chip 50 MHz IF
	
	  Array of byte pairs <address, value>
	  to initialize QAM for lgdt3303 chip
 Change only if we are actually changing the modulation 
 Select VSB mode 
 Select ANT connector if supported by card 
 Select QAM_64 mode 
 Select CABLE connector if supported by card 
 Select QAM_256 mode 
 Select CABLE connector if supported by card 
		
		  select serial or parallel MPEG hardware interface
		  Serial:   0x04 for LGDT3302 or 0x40 for LGDT3303
		  Parallel: 0x00
 Select the requested mode 
 Tune to the specified frequency 
 Keep track of the new frequency 
	
	  FIXME this is the wrong way to do this...
	  The tuner is shared with the video4linux analog API
  Calculate SNR estimation (scaled by 2^24)
  8-VSB SNR equations from LGDT3302 and LGDT3303 datasheets, QAM
  equations from LGDT3303 datasheet.  VSB is the same between the '02
  and '03, so maybe QAM is too?  Perhaps someone with a newer datasheet
  that has QAM information could verify?
  For 8-VSB: (two ways, take your pick)
  LGDT3302:
    SNR_EQ = 10  log10(25  24^2  EQ_MSE)
  LGDT3303:
    SNR_EQ = 10  log10(25  32^2  EQ_MSE)
  LGDT3302 & LGDT3303:
    SNR_PT = 10  log10(25  32^2  PT_MSE)  (we use this one)
  For 64-QAM:
    SNR    = 10  log10( 688128    MSEQAM)
  For 256-QAM:
    SNR    = 10  log10( 696320    MSEQAM)
  We re-write the snr equation as:
    SNR  2^24 = 10(c - intlog10(MSE))
  Where for 256-QAM, c = log10(696320)  2^24, and so on.
 No signal 
		
		  Negative SNR, which is possible, but realisticly the
		  demod will lose lock before the signal gets this bad.
		  The API only allows for unsigned values, so just return 0
 read data buffer 
 noise value 
 per-modulation SNR calculation constant 
 Use Equalizer Mean-Square Error Register 
 SNR for ranges from -15.61 to +41.58 
 log10(2524^2)2^24 
 Use Phase Tracker Mean-Square Error Register 
 SNR for ranges from -13.11 to +44.08 
 log10(2532^2)2^24 
 log10(688128)2^24 and log10(696320)2^24 
 return -EDRIVER_IS_GIBBERED; 
 read data buffer 
 noise value 
 per-modulation SNR calculation constant 
 Use Equalizer Mean-Square Error Register 
 SNR for ranges from -16.12 to +44.08 
 log10(2532^2)2^24 
 Use Phase Tracker Mean-Square Error Register 
 SNR for ranges from -13.11 to +44.08 
 log10(2532^2)2^24 
 log10(688128)2^24 and log10(696320)2^24 
 return -EDRIVER_IS_GIBBERED; 
 Convert from 8.24 fixed-point to 8.8 
 Calculate Strength from SNR up to 35dB 
	
	  Even though the SNR can go higher than 35dB, there is some comfort
	  factor in having a range of strong signals that can show at 100%
 Rather than use the 8.8 value snr, use state->snr which is 8.24 
 scale the range 0 - 352^24 into 0 - 65535 
 Reset status result 
 AGC status register 
		
		  Test signal does not exist flag
		  as well as the AGC lock flag.
	
	  You must set the Mask bits to 1 in the IRQ_MASK in order
	  to see that status bit in the IRQ_STATUS register.
	  This is done in SwReset();
 signal status 
 sync status 
 FEC error status 
 Carrier Recovery Lock Status Register 
 Need to understand why there are 3 lock levels here 
 FIXME: what's the basis for block count 
 Reset status result 
 lgdt3303 AGC status register 
		
		  Test input signal does not exist flag
		  as well as the AGC lock flag.
 Carrier Recovery Lock Status Register 
 Need to understand why there are 3 lock levels here 
 FIXME: what's the basis for block count 
 I have no idea about this - it may not be needed 
 Allocate memory for the internal state 
 Setup the state 
 Create dvb_frontend 
 Setup get frontend callback 
 Verify communication with demod chip 
 QAM 64 
 VSB 8  
 QAM 64 
 VSB 8  
 SPDX-License-Identifier: GPL-2.0-or-later
    cx24110 - Single Chip Satellite Channel Receiver driver module
    Copyright (C) 2002 Peter Hettkamp <peter.hettkamp@htp-tel.de> based on
    work
    Copyright (C) 1999 Convergence Integrated Media GmbH <ralph@convergence.de>
		       Comments beginning with @ denote this value should
 SoftResetAll 
 release reset 
 MSB of code rate 27.5MSs 
 middle byte " 
 LSB         " 
 @ DVB mode, standard code rate 34 
 @ PLL 60MHz 
 @ Fclk, i.e. sampling clock, 60MHz 
 @ partial chip disables, do not set 
	 {0x0b,0x01},  set output clock in gapped mode, start signal low
 no parity bytes, large hold time, serial data out 
 @ RS SyncUnsync thresholds 
	 {0x10,0x40},  chip doc is misleading here: write bit 6 as 1
			 to avoid starting the BER counter. Reset the
	 {0x15,0xff},  @ size of the limited time window for RS BER
			 estimation. It is <value>256 RS blocks, this
 @ enable all RS output ports 
 @ time window allowed for the RS to sync 
	 {0x18,0xae},  @ allow all standard DVB code rates to be scanned
		       leave the current code rate and normalization
	 {0x21,0x10},  @ during AutoAcq, search each viterbi setting
	 {0x23,0x18},  @ size of the limited time window for Viterbi BER
			 estimation. It is <value>65536 channel bits, i.e.
 do not trigger Viterbi CRC test. Finite count window 
 leave front-end AGC parameters at default values 
 leave decimation AGC parameters at default values 
 disable all interrupts. They are not connected anyway 
 clear all interrupt pending flags 
 @ fully enable AutoAcqq state machine 
 @ enable fade recovery, but not autostart AutoAcq 
 leave the equalizer parameters on their default values 
 leave the final AGC parameters on their default values 
 @ MSB of front-end derotator frequency 
 @ middle bytes " 
 @ LSB          " 
 leave the carrier tracking loop parameters on default 
 leave the bit timing loop parameters at default 
 set the filtune voltage to 2.7V, as recommended by 
 the cx24108 data sheet for symbol rates above 15MSs 
 @ Filter sigma delta enabled, positive 
 GPIO pins 1-4 have special function 
 GPIO pin 5 has special function, pin 6 is GPIO 
 All GPIO pins use CMOS output characteristics 
 GPIO 6 is input, all others are outputs 
 tuner auto mode clock freq 62kHz 
 use auto mode, tuner word is 21 bits long 
 @ disable several demod bypasses 
 @  " 
 @  " 
 the remaining registers are for SEC 
 fixme (low): error handling 
 AcqSpectrInvDis on. No idea why someone should want this 
 Initial value 0 at start of acq 
 current value 0 
		 The cx24110 manual tells us this reg is read-only.
 AcqSpectrInvDis on. No idea why someone should want this 
 Initial value 1 at start of acq 
 current value 1 
 AcqSpectrInvDis off. Leave initial & current states as is 
	 Well, the AutoAcq engine of the cx24106 and 24110 automatically
	   searches all enabled viterbi rates, and can handle non-standard
 (re-)establish AutoAcq behaviour 
 clear AcqVitDis bit 
 allow all DVB standard code rates 
 set nominal Viterbi rate 34 
 set current Viterbi rate 34 
 set the puncture registers for code rate 34 
 set AcqVitDis bit 
 set nominal Viterbi rate 
 set current Viterbi rate 
 not sure if this is the right way: I always used AutoAcq mode 
 fixme (low): a special code rate has been selected. In theory, we need to
   return a denominator value, a numerator value, and a pair of puncture
   maps to correctly describe this mode. But this should never happen in
 fixme (low): add error handling 
	 first, check which sample rate is appropriate: 45, 60 80 or 90 MHz,
	   and set the PLL accordingly (R07[1:0] Fclk, R06[7:4] PLLmult,
 sample rate 45MHz
 sample rate 60MHz 
 sample rate 80MHz 
 sample rate 90MHz 
	 we need to divide two integers with approx. 27 bits in 32 bit
	 the maximum dividend is 909990002, 0x02b6446c, this number is
	   also the most complex divisor. Hence, the dividend has,
	   assuming 32bit unsigned arithmetic, 6 clear bits on top, the
	   divisor 2 unused bits at the bottom. Also, the quotient is
 tuner data is 21 bits long, must be left-aligned in data 
 tuner cx24108 is written through a dedicated 3wire interface on the demod chip 
 FIXME (low): add error handling, avoid infinite loops if HW fails... 
 auto mode at 62kHz 
 auto mode 21 bits 
 if the auto tuner writer is still busy, clear it out 
 write the topmost 8 bits 
 wait for the send to be completed 
 send another 8 bytes 
 and the topmost 5 bits of this byte 
 now strobe the enable line once 
 fixme (low): error handling 
 wait for LNB ready 
 not implemented 
 reportedly fixes switching problems 
 wait for LNB ready 
 fixme (maybe): value range is 16 bit. Scale? 
 the Viterbi error counter has finished one counting window 
 select the ber reg 
 start new count window 
 no provision in hardware. Read the frontend AGC accumulator. No idea how to scale this, but I know it is 2s complement 
 no provision in hardware. Can be computed from the EsN0 estimator, but I don't know how. 
 the EsN0 error counter has finished one counting window 
 start new count window 
 the RS error counter has finished one counting window 
 select the byer reg 
 select the bler reg 
 start new count window 
 start acquisition 
 cannot read back tuner settings (freq). Need to have some private storage 
 ok, real AFC (FEDR) freq. is afc2^24fsamp, fsamp=45608090MHz.
 allocate memory for the internal state 
 setup the state 
 check if the demod is there 
 create dvb_frontend 
 SPDX-License-Identifier: GPL-2.0
  Toshiba TC90522 Demodulator
  Copyright (C) 2014 Akihiro Tsukada <tskd08@gmail.com>
  NOTICE:
  This driver is incomplete and lacks initconfig of the chips,
  as the necessary info is not disclosed.
  It assumes that users of this driver (such as a PCI bridge of
  DTV receiver cards) properly init and configure the chip
  via I2C before calling this driver's init() function.
  Currently, PT3 driver is the only one that uses this driver,
  and contains initconfig code in its firmware.
  Thus some part of the code might be dependent on PT3 specific config.
 frontend ops 
 input level under min ? 
 carrier? 
 unused 
 for BPSK 
 for QPSK 
 for 8PSK. (trellis code) 
 highsingle layer 
 slots 
 low layer 
 no low layer 
 slots 
		
		  actually, BPSK if v==1, but not defined in
		  enum fe_modulation
 statistics 
 let the connected tuner set RSSI property cache 
 cndat: 4.12 fixed point float 
		
		  cnr[mdB] = -1634.6  P^5 + 14341  P^4 - 50259  P^3
		                  + 88977  P^2 - 89565  P + 58857
		   (P = sqrt(cndat)  64)
 p := sqrt(cndat) << 8 = P << 14, 2.14 fixed  point float 
 cn = cnr << 3 
 per-layer post viterbi BER (or PER? config dependent?) 
 layer A 
 layer B 
 layer C 
 statistics 
 let the connected tuner set RSSI property cache 
		
		  cnr[mdB] = 0.024 P^4 - 1.6 P^3 + 39.8 P^2 + 549.1 P + 3096.5
		  (P = 10log10(5505024cndat))
 cn = cnr << 3 (61.3 fixed point float 
 p = 10log10(5505024cndat) << 24  (8.24 fixed point float)
 per-layer post viterbi BER (or PER? config dependent?) 
	
	  Because the init sequence is not public,
	  the parent devicedriver should have init'ed the device before.
	  just wake up the device here.
 prefer 'all-layers' to 'none' as a default 
  tuner I2C adapter functions
		
		  Split transactions at each I2C_M_RD message.
		  Some of the parent device require this,
		  such as Friio (see. dvb-usb-gl861).
  I2C driver functions
 SPDX-License-Identifier: GPL-2.0-or-later
    TDA10023  - DVB-C decoder
    (as used in Philips CU1216-3 NIM and the Reelbox DVB-C tuner card)
    Copyright (C) 2005 Georg Acher, BayCom GmbH (acher at baycom dot de)
    Copyright (c) 2006 Hartmut Birr (e9hack at gmail dot com)
    Remotely based on tda10021.c
    Copyright (C) 1999 Convergence Integrated Media GmbH <ralph@convergence.de>
    Copyright (C) 2004 Markus Schulz <msc@antzsystem.de>
		   Support for TDA10021
 configuration settings 
 clock settings 
get access to tuner
release access from tuner
	 avoid floating point operations multiplying syscloc and divider
 BDRX=SYSCLK; 
        reg  mask val 
 000  0x2a, 0xff, 0x02,  
 003  0xff, 0x64, 0x00,  
 006  0x2a, 0xff, 0x03,  
 009  0xff, 0x64, 0x00,  
 PLL1 
 012  0x28, 0xff, (state->pll_m-1),
 PLL2 
 015  0x29, 0xff, ((state->pll_p-1)<<6)|(state->pll_n-1),
 GPR FSAMPLING=1 
 018  0x00, 0xff, REG0_INIT_VAL,
 021  0x2a, 0xff, 0x08,  
 024  0xff, 0x64, 0x00,  
 027  0x1f, 0xff, 0x00,  
 030  0xff, 0x64, 0x00,  
 033  0xe6, 0x0c, 0x04,  
 036  0x10, 0xc0, 0x80,  
 039  0x0e, 0xff, 0x82,  
 042  0x03, 0x08, 0x08,  
 045  0x2e, 0xbf, 0x30,   AGCCONF2 TRIAGC=0,POSAGC=ENAGCIF=1
 048  0x01, 0xff, 0x30,  
 051  0x1e, 0x84, 0x84,  
 054  0x1b, 0xff, 0xc8,  
 057  0x3b, 0xff, 0xff,  
 060  0x3c, 0xff, 0x00,  
 063  0x34, 0xff, 0x00,  
 066  0x35, 0xff, 0xff,  
 069  0x36, 0xff, 0x00,  
 072  0x06, 0xff, 0x7f,  
 075  0x1c, 0x30, 0x30,  
 078  0x37, 0xff, 0xf6,  
 081  0x38, 0xff, 0xff,  
 084  0x02, 0xff, 0x93,  
 087  0x2d, 0xff, 0xf6,  
 090  0x04, 0x10, 0x00,  
 093  0x12, 0xff, TDA10023_OUTPUT_MODE_PARALLEL_B, 
 096  0x2b, 0x01, 0xa1,  
 099  0x20, 0xff, 0x04,  
 102  0x2c, 0xff, 0x0d,  
 105  0xc4, 0xff, 0x00,
 108  0xc3, 0x30, 0x00,
 111  0xb5, 0xff, 0x19,  
 114  0x00, 0x03, 0x01,  
 117  0x00, 0x03, 0x03,  
 120  0xff, 0x64, 0x00,  
 123  0xff, 0xff, 0xff
 override default values if set in config 
 Modulation  QAM    LOCKTHR   MSETH   AREF AGCREFNYQ ERAGCNYQ_THD 
	
	  gcc optimizes the code below the same way as it would code:
	 		 "if (qam > 5) return -EINVAL;"
	  Yet, the code is clearer, as it shows what QAM standards are
	  supported by the driver, and avoids the usage of magic numbers on
	  it.
0x11[1] == CARLOCK -> Carrier locked
0x11[2] == FSYNC -> Frame synchronisation
0x11[3] == FEL -> Front End locked
0x11[6] == NODVB -> DVB Mode Information
 Max raw value is about 0xb0 -> Normalize to >0xf0 after 0x90
 AFC only valid when carrier has been recovered 
 pdown ADC 
 standby 
 allocate memory for the internal state 
 setup the state 
 wakeup if in standby 
 check if the demod is there 
 create dvb_frontend 
 set default values if not defined in config 
 calc sysclk 
 set in tda10023_attach 
 set in tda10023_attach 
FE_CAN_QAM_4
 SPDX-License-Identifier: GPL-2.0-only
  drxk_hard: DRX-K DVB-CT demodulator driver
  Copyright (C) 2010-2011 Digital Devices GmbH
 32-28 == 4 shifts possible at max 
	Q1 = a  c;		
				  integer part, only the 4 least significant
				  bits will be visible in the result
 division using radix 16, 7 nibbles in the result 
 rounding 
 I2C 
 Make sure all clk domains are active 
 Enable pll lock tests 
	
	  FIXME: most (all?) of the values below should be moved into
	  struct drxk_config, as they are probably board-specific
 io_pad_cfg register (8 bit reg.) MSB bit is 1 (default value) 
 io_pad_cfg_mode output mode is drive always 
 io_pad_cfg_drive is set to power 2 (23 mA) 
 real system clock frequency in kHz 
 Timing div, 250nsPsys 
 Timing div, = (delay (nano seconds)  sysclk (kHz)) 1000 
 Clipping 
 portbridgepower down ctrl 
 Init AGC and PGA parameters 
 VSB IF 
 VSB RF 
 ATV IF 
 ATV RF 
 DVBT RF 
 DVBT IF 
 state->m_dvbtPgaCfg = 140; 
 QAM RF 
 QAM IF 
 MPEG output configuration 
 If TRUE; enable MPEG output 
 If TRUE; insert RS byte 
 If TRUE; invert DATA signals 
 If TRUE; invert ERR signal 
 If TRUE; invert STR signals 
 If TRUE; invert VAL signals 
 If TRUE; invert CLK signals 
	 If TRUE; static MPEG clockrate will be used;
 Maximum bitrate in bs in case static clockrate is selected 
 QAM defaults 
 fecRsPlen  annex A 
 stop lock indicator process 
 Check device id 
 driver 0.9.0 
 stop lock indicator process 
 ignore (bypass ?) 
 27 MHz 
 20.25 MHz 
 4 MHz 
	
		Determine device capabilities
		Based on pinning v14
 driver 0.9.0 
 typeId = DRX3913K_TYPE_ID 
 typeId = DRX3915K_TYPE_ID 
 typeId = DRX3916K_TYPE_ID 
 typeId = DRX3918K_TYPE_ID 
 typeId = DRX3921K_TYPE_ID 
 typeId = DRX3923K_TYPE_ID 
 typeId = DRX3925K_TYPE_ID 
 typeId = DRX3926K_TYPE_ID 
 Write command 
 Wait until command rdy 
 portbridgepower down ctrl 
 stop lock indicator process 
  MPEG TS pad configuration 
  Set MPEG TS pads to inputmode 
 Enable MPEG output 
 parallel -> enable MD1 to MD7 
 serial -> disable MD1 to MD7 
  Enable MB output over MPEG pads and ctl input 
  Write nomagic word to enable pdr reg write 
 down the drain (we don't care about MAGIC_WORD) 
 For future reference 
 For future reference 
 For future reference 
 tokenring already has correct status 
 Disableenable dvbt tokenring bridge   
 Graceful shutdown (byte boundaries) 
 Suppress MCLK during absence of data 
	 assume that the command register is ready
 Wait until SCU has processed command 
 read results 
 Check if an error was reported by SCU 
 check for the known error codes 
 Other negative values are errors 
 Configure IQM 
 Check arguments 
 Unknow sleep mode 
 If already in requested power mode, do nothing 
 For next steps make sure to start from DRX_POWER_UP mode 
 Restore analog & pin configuration 
 Power down to requested mode 
 Backup some register settings 
		 Set pins with possible pull-ups connected
 Analog power down 
 ADC power down 
 Power down device 
 stop all comm_exec 
 Stop and power down previous standard 
 Send OFDM stop command 
 Send OFDM reset command 
 Reset datapath for OFDM, processors first 
 powerdown AFE                   
 powerdown to OFDM mode          
	
	   Stop and power down previous standard
	   TODO investigate total power down instead of partial
	   power down depending on "previous" standard.
 disable HW lock indicator 
 Device is already at the required mode 
 OM_NONE was added for start up 
	
		Power up new standard
 define the SCU command code 
 Allow OC to sync again 
 Rate integration settings 
 Additional configuration 
 FEC_OC_MODE       register value 
 FEC_OC_IPR_MODE   register value 
 FEC_OC_IPR_INVERT register value 
 FEC_OC_IPR_INVERT register value 
 FEC_OC_IPR_INVERT register value 
 FEC_OC_IPR_INVERT register value 
 FEC_OC_IPR_INVERT register value 
 Check insertion of the Reed-Solomon parity bytes 
 enable parity symbol forward 
 MVAL disable during parity bytes 
 TS burst length to 204 
 Check serial or parallel output 
 MPEG data output is serial -> set ipr_mode[0] 
 good for >63 Mbs 
 switch (standard) 
 Configure DTO's 
		 Rational DTO for MCLK source (static MCLK rate),
			Dynamic DTO for optimal grouping
			(avoid intra-packet gaps),
 Check user defined bitrate 
 max is 75.9 Mbs 
		 Rational DTO period:
			dto_period = (Fsys  bitrate) - 2
			result should be floored,
			to make sure >= requested bitrate
 (commonAttr->static_clk == false) => dynamic mode 
 Write appropriate registers with requested configuration 
 Rate integration settings 
 Data mask for the output data byte 
 Control selective inversion of output bits 
 Enable RF AGC DAC 
 Enable SCU RF AGC loop 
 Polarity 
 Set speed (using complementary reduction value) 
 Set TOP, only if IF-AGC is in AUTO mode 
 Cut-Off current 
 Max. output level 
 Enable RF AGC DAC 
 Disable SCU RF AGC loop 
 SCU c.o.c. to 0, enabling full control range 
 Write value to output pin 
 Disable RF AGC DAC 
 Disable SCU RF AGC loop 
 Enable IF AGC DAC 
 Enable SCU IF AGC loop 
 Polarity 
 Set speed (using complementary reduction value) 
 Restore TOP 
 Enable IF AGC DAC 
 Disable SCU IF AGC loop 
 Polarity 
 Write value to output pin 
 Disable If AGC DAC 
 Disable SCU IF AGC loop 
 switch (agcSettingsIf->ctrl_mode) 
	 always set the top to support
	u16 qam_sl_err_power = 0;	 accum. error between
	u32 qam_sl_sig_power = 0;	 used for MER, depends of
 QAM MER 
 MER calculation 
 get the register value needed for MER 
 Extend SQR_ERR_I operational range 
 Extend SQR_ERR_Q operational range 
 Check input data for MER 
 MER calculation (in 0.1 dB) without math.h 
		 No error at all, this must be the HW reset value
			 Apparently no first measurement yet
		 IMER = 100  log10 (x)
			where x = (eq_reg_td_tps_pwr_ofs^2 
			eq_reg_td_req_smb_cnt  tps_cnt)sqr_err_iq
			=> IMER = a + b -c
			where a = 100  log10 (eq_reg_td_tps_pwr_ofs^2)
			b = 100  log10 (eq_reg_td_req_smb_cnt  tps_cnt)
			c = 100  log10 (sqr_err_iq)
 log(x) x = 9bits  9bits->18 bits  
 log(x) x = 16bits  7bits->23 bits  
 log(x) x = (16bits + 16bits) << 15 ->32 bits  
 SNR Values for quasi errorfree reception rom Nordig 2.2 
 QPSK 12 
 QPSK 23 
 QPSK 34 
 QPSK 56 
 QPSK 78 
 16-QAM 12 
 16-QAM 23 
 16-QAM 34 
 16-QAM 56 
 16-QAM 78 
 64-QAM 12 
 64-QAM 23 
 64-QAM 34 
 64-QAM 56 
 64-QAM 78 
 Not in NorDig 
 Free data ram in SIO HI 
 start measurement 
 Try sampling on a different edge 
	
	   Program frequency shifter
	   No need to account for mirroring on RF
 tuner doesn't mirror 
 tuner mirrors 
 adc mirrors 
 adc doesn't mirror 
 Program frequency shifter with tuner offset compensation 
 frequency_shift += tuner_freq_offset; TODO 
 Common settings 
 AGCInit() not available for DVBT; init done in microcode 
 FIXME: Analog TV AGC require different settings 
 Standard specific settings 
 Initialize inner-loop KI gain factors 
 SC is not running 
 Wait until sc is ready to receive command 
 Write sub-command 
 All commands using sub-cmd 
 Do nothing 
 Write needed parameters and the command 
 All commands using 5 parameters 
 All commands using 4 parameters 
 All commands using 3 parameters 
 All commands using 2 parameters 
 All commands using 1 parameters 
 All commands using 0 parameters 
 Write command 
 Unknown command 
 Wait until sc is ready processing command 
 Check for illegal cmd 
 illegal command 
 Retrieve results parameters from SC 
 All commands yielding 5 results 
 All commands yielding 4 results 
 All commands yielding 3 results 
 All commands yielding 2 results 
 All commands yielding 1 result 
 All commands yielding 0 results 
 Unknown command 
 switch (cmd->cmd) 
 write mask to 1 
 write mask to 0 
============================================================================
 \brief Activate DVBT specific presets
 \param demod instance of demodulator.
 \return DRXStatus_t.
 Called in DVBTSetStandard
============================================================================
 \brief Initialize channelswitch-independent settings for DVBT.
 \param demod instance of demodulator.
 \return DRXStatus_t.
 For ROM code channel filter taps are loaded from the bootloader. For microcode
 the DVB-T taps from the drxk_filters.h are used.
 added antenna switch 
 send OFDM reset command 
 send OFDM setenv command 
 reset datapath for OFDM, processors first 
 IQM setup 
 synchronize on ofdstate->m_festart 
 window size for clipping ADC detection 
 window size for for sense pre-SAW detection 
 sense threshold for sense pre-SAW detection 
 Impulse noise cruncher setup 
 crunch in IQM_CF 
 detect in IQM_CF 
 peak detector window length 
 enable output 2 
 decimate output 2 
 virtual clipping threshold for clipping ADC detection 
 crunching threshold 
 peak detector threshold 
 enable power measurement interrupt 
 IQM will not be reset from here, sync ADC and updateinit AGC 
 Halt SCU to enable safe non-atomic accesses 
 Set Noise Estimation notch width and enable DC fix 
 Activate SCU to enable SCU commands 
 AGCInit() is not done for DVBT, so set agcfast_clip_ctrl_delay  
 OFDM_SC setup 
 FEC setup 
 OFDM input 
 Setup MPEG bus 
 Set DVBT Presets 
============================================================================
 \brief start dvbt demodulating for channel.
 \param demod instance of demodulator.
 \return DRXStatus_t.
 drxk_ofdm_sc_cmd_t scCmd; 
 start correct processes to get in lock 
 DRXK: OFDM_SC_RA_RAM_PROC_LOCKTRACK is no longer in mapfile! 
 start FEC OC 
============================================================================
 \brief Set up dvbt demodulator for channel.
 \param demod instance of demodulator.
 \return DRXStatus_t.
  original DVBTSetChannel()
 Halt SCU to enable safe non-atomic accesses 
 Stop processors 
	 Mandatory fix, always stop CP, required to set spl offset back to
== Write channel settings to device ================================
 mode 
 try first guess DRX_FFTMODE_8K 
 guard 
 try first guess DRX_GUARD_1DIV4 
 hierarchy 
 try first guess SC_RA_RAM_OP_PARAM_HIER_NO 
 transmission_params |= OFDM_SC_RA_RAM_OP_PARAM_HIER_NO; 
 modulation 
 try first guess DRX_CONSTELLATION_QAM64 
 No hierarchical channels support in BDA 
 Priority (only for hierarchical channels) 
 Set Priority high 
 coderate 
 try first guess DRX_CODERATE_2DIV3 
	
	  SAW filter selection: normally not necessary, but if wanted
	  the application can select a SAW filter via the driver by
	  using UIOs
 First determine real bandwidth (Hz) 
 Also set delay for impulse noise cruncher 
	
	  Also set parameters for EC_OC fix, note EC_OC_REG_TMD_HIL_MAR is
	  changed by SC for fix for some 8K,18 guard but is restored by
	  InitEC and ResetEC functions
 cochannel protection for PAL 8 MHz 
 cochannel protection for PAL 7 MHz 
 cochannel protection for NTSC 6 MHz 
		 Now compute IQM_RC_RATE_OFS
			(((SysFreqBandWidth)2)2) -1)  2^23)
			=>
			((SysFreq  BandWidth)  (2^21)) - (2^23)
 (SysFreq  BandWidth)  (2^28)  
		
		  assert (MAX(sysClk)MIN(bandwidth) < 16)
		 	=> assert(MAX(sysClk) < 16MIN(bandwidth))
		 	=> assert(109714272 > 48000000) = true
		  so Frac 28 can be used
 (SysFreq  BandWidth)  (2^21), rounding before truncating 
 ((SysFreq  BandWidth)  (2^21)) - (2^23)  
 Bandwidth setting done 
== start SC, write channel settings to SC ==========================
 Activate SCU to enable SCU commands 
 Enable SC after setting all other parameters 
 Write SC parameter registers, set all AUTO flags in operation mode 
============================================================================
 \brief Retrieve lock status .
 \param demod    Pointer to demodulator instance.
 \param lockStat Pointer to lock status structure.
 \return DRXStatus_t.
 driver 0.9.0 
 Check if SC is running 
 Power Down QAM 
		
			STOP demodulator
			QAM and HW blocks
 stop all comstate->m_exec 
 powerdown AFE                   
============================================================================
 \brief Setup of the QAM Measurement intervals for signal quality
 \param demod instance of demod.
 \param modulation current modulation.
 \return DRXStatus_t.
  NOTE:
  Take into account that for certain settings the errorcounters can overflow.
  The implementation does not check this.
 BER accounting period 
 Total period 
 ReedSolomon Measurement Prescale 
 Value for corresponding I2C register 
	 fec_bits_desired = symbol_rate [kHz] 
		FrameLenght [ms] 
		(modulation + 1) 
		SyncLoss (== 1) 
		ViterbiLoss (==1)
 symbol_rate [Hz] -> symbol_rate [kHz] 
 meas. period [ms] 
 Annex AC: bitsRsPeriod = 204  8 = 1632 
 fec_rs_period_total = fec_bits_desired  1632 
 roughly ceil 
 fec_rs_period_total =  fec_rs_prescale  fec_rs_period  
 Divide by zero (though impossible) 
 write corresponding registers 
 QAM Equalizer Setup 
 Equalizer 
 Decision Feedback Equalizer 
 QAM Slicer Settings 
 QAM Loop Controller Coeficients 
 QAM State Machine (FSM) Thresholds 
 QAM FSM Tracking Parameters 
============================================================================
 \brief QAM32 specific setup
 \param demod instance of demod.
 \return DRXStatus_t.
 QAM Equalizer Setup 
 Equalizer 
 Decision Feedback Equalizer 
 QAM Slicer Settings 
 QAM Loop Controller Coeficients 
 QAM State Machine (FSM) Thresholds 
 QAM FSM Tracking Parameters 
============================================================================
 \brief QAM64 specific setup
 \param demod instance of demod.
 \return DRXStatus_t.
 QAM Equalizer Setup 
 Equalizer 
 Decision Feedback Equalizer 
 QAM Slicer Settings 
 QAM Loop Controller Coeficients 
 QAM State Machine (FSM) Thresholds 
 QAM FSM Tracking Parameters 
============================================================================
 \brief QAM128 specific setup
 \param demod: instance of demod.
 \return DRXStatus_t.
 QAM Equalizer Setup 
 Equalizer 
 Decision Feedback Equalizer 
 QAM Slicer Settings 
 QAM Loop Controller Coeficients 
 QAM State Machine (FSM) Thresholds 
 QAM FSM Tracking Parameters 
============================================================================
 \brief QAM256 specific setup
 \param demod: instance of demod.
 \return DRXStatus_t.
 QAM Equalizer Setup 
 Equalizer 
 Decision Feedback Equalizer 
 QAM Slicer Settings 
 QAM Loop Controller Coeficients 
 QAM State Machine (FSM) Thresholds 
 QAM FSM Tracking Parameters 
============================================================================
 \brief Reset QAM block.
 \param demod:   instance of demod.
 \param channel: pointer to channel data.
 \return DRXStatus_t.
 Stop QAM comstate->m_exec 
============================================================================
 \brief Set QAM symbolrate.
 \param demod:   instance of demod.
 \param channel: pointer to channel data.
 \return DRXStatus_t.
 Select & calculate correct IQM rate 
	
		IqmRcRate = ((Fadc  (symbolrate  (4<<ratesel))) - 1)  (1<<23)
 Divide by zero 
	
		LcSymbFreq = round (.125   symbolrate  adc_freq  (1<<15))
 Divide by zero 
============================================================================
 \brief Get QAM lock status.
 \param demod:   instance of demod.
 \param channel: pointer to channel data.
 \return DRXStatus_t.
 0x0000 NOT LOCKED 
 0x4000 DEMOD LOCKED 
 0x8000 DEMOD + FEC LOCKED (system lock) 
 0xC000 NEVER LOCKED 
 (system will never be able to lock to the signal) 
		
		  TODO: check this, intermediate & standard specific lock
		  states are not taken into account here
 modulation     
 interleave mode   
 Env parameters 
 check for LOCKRANGE Extended 
 set_param_parameters[3] |= QAM_LOCKRANGE_NORMAL; 
	
	  STEP 1: reset demodulator
	 	resets FEC DI and FEC RS
	 	resets QAM block
	 	resets SCU variables
	
	  STEP 2: configure demodulator
	 	-set params; resets IQM,QAM,FEC HW; initializes some
	        SCU variables
 Set params 
	 Use the 4-parameter if it's requested or we're probing for
	 Use the 2-parameter command if it was requested or if we're
	  probing for the correct command and the 4-parameter command
		
		  One of our commands was successful. We don't need to
		  auto-probe anymore, now that we got the correct command.
	
	  STEP 3: enable the system in a mode where the ADC provides valid
	  signal setup modulation independent registers
 Setup BER measurement 
 Reset default values 
 Reset default LC values 
 Mirroring, QAM-block starting point not inverted 
 Halt SCU to enable safe non-atomic accesses 
 STEP 4: modulation specific setup 
 Activate SCU to enable SCU commands 
 Re-configure MPEG output, requires knowledge of channel bitrate 
 extAttr->currentChannel.modulation = channel->modulation; 
 extAttr->currentChannel.symbolrate    = channel->symbolrate; 
 start processes 
 STEP 5: start QAM demodulator (starts FEC, QAM and IQM HW) 
 update global DRXK data container 
?     extAttr->qamInterleaveMode = DRXK_QAM_I12_J17; 
 added antenna switch 
 Ensure correct power-up mode 
 Reset QAM block 
 Setup IQM 
	 Upload IQM Channel Filter settings by
 IQM Impulse Noise Processing Unit 
 turn on IQMAF. Must be done before setAgc() 
 IQM will not be reset from here, sync ADC and updateinit AGC 
 Set the FSM step period 
 Halt SCU to enable safe non-atomic accesses 
	 No more resets of the IQM, current standard correctly set =>
 Configure AGC's 
 Activate SCU to enable SCU commands 
 stop lock indicator process 
  Write magic word to enable pdr reg write               
 UIO-1 
 write to io pad configuration register - output mode 
 use corresponding bit in io data output registar 
 write zero to 15th bit - 1st UIO 
 write one to 15th bit - 1st UIO 
 write back to io data output register 
 UIO-2 
 write to io pad configuration register - output mode 
 use corresponding bit in io data output registar 
 write zero to 14th bit - 2st UIO 
 write one to 14th bit - 2st UIO 
 write back to io data output register 
 UIO-3 
 write to io pad configuration register - output mode 
 use corresponding bit in io data output registar 
 write zero to 2nd bit - 3rd UIO 
 write one to 2nd bit - 3rd UIO 
 write back to io data output register 
  Write magic word to disable pdr reg write               
 Antenna is on DVB-T mode. Switch 
 Antenna is on DVB-C mode. Switch 
 Power down to requested mode 
 Backup some register settings 
 Set pins with possible pull-ups connected to them in input mode 
 Analog power down 
 ADC power down 
 Power down device 
 Open I2C bridge before power down of DRXK 
 driver 0.9.0 
 Soft reset of OFDM-, sys- and osc-clockdomain 
		
		  TODO is this needed? If yes, how much delay in
		  worst case scenario
 Bridge delay, uses oscilator clock 
 Delay = (delay (nano seconds)  oscclk (kHz)) 1000 
 SDA brdige delay 
 Clipping 
 SCL bridge delay, same as SDA for now 
 disable various processes 
 disable MPEG port 
 Stop AUD and SCU 
 enable token-ring bus through OFDM block for possible ucode upload 
 include boot loader section 
 disable token-ring bus through OFDM block for possible ucode upload 
 Run SCU for a little while to initialize microcode version numbers 
 added for test 
		 Stamp driver version number in SCU data RAM in BCD code
			Done to enable field application engineers to retrieve drxdriver version
			via I2C from SCU RAM.
			Not using SCU command interface for SCU register access since no
			microcode may be present.
		
		  Dirty fix of default values for ROMPATCH microcode
		  Dirty because this fix makes it impossible to setup
		  suitable values before calling DRX_Open. This solution
		  requires changes to RF AGC speed to be done via the CTRL
		  function after calling DRX_Open
 m_dvbt_rf_agc_cfg.speed = 3; 
 Reset driver debug flags to 0 
 driver 0.9.0 
		 Setup FEC OC:
 MPEGTS functions are still the same 
 added: configure GPIO 
 Initialize the supported delivery systems 
		
		  As firmware is now load asynchronous, it is not possible
		  anymore to fail at frontend attach. We might silently
		  return here, and hope that the driver won't crash.
		  We might also change all DVB callbacks to return -ENODEV
		  if the device is not initialized.
		  As the DRX-K devices have their own internal firmware,
		  let's just hope that it will match a firmware revision
		  compatible with this driver and proceed.
 After set_frontend, stats aren't available 
 printk(KERN_DEBUG "drxk: %s IF=%d done\n", __func__, IF); 
 FIXME: those are part of the tuner presets 
 Default value on az6007 driver 
 Default value on az6007 driver 
 SCU output_level 
 SCU c.o.c. 
 Take RF gain into account 
 clip output value 
 Take IF gain into account 
 clip output value 
	
	  Convert to 0..65535 scale.
	  If it can't be measured (AGC is disabled), just show 100%.
 get status 
	
	  Estimate signal strength from AGC
 Get post BER 
 BER measurement is valid if at least FEC lock is achieved 
	
	  OFDM_EC_VD_REQ_SMB_CNT__A andor OFDM_EC_VD_REQ_BIT_CNT can be
	  written to set nr of symbols or bits over which to measure
	  EC_VD_REG_ERR_BIT_CNT__A . See CtrlSetCfg().
 Read registers for postpreViterbi BER calculation 
 Number of bit-errors 
 Store the results 
 No negative SNR, clip to zero 
 .delsys will be filled dynamically 
 For DVB-C 
 For DVB-T 
 NOTE: as more UIO bits will be used, add them to the mask 
 Default gpio to DVB-C 
 Load firmware and initialize DRX-K 
 Initialize stats 
 SPDX-License-Identifier: GPL-2.0-or-later
	Fujitsu MB86A16 DVB-SDSS DC Receiver driver
	Copyright (C) Manu Abraham (abraham.manu@gmail.com)
 tuning parameters 
 Internal stuff 
 Frequency Set 
 kHz 
 MHz 
 MHz 
 kHz 
 positive v (case 1) 
 (case 2) 
 (case 3) 
 (case 4) 
 Negative v (case 1) 
 (case 2) 
 (case 3) 
 (case 4) 
 (case 5) 
 (case 6) 
 SLOCK0 = 0 
 Viterbi Rate, IQ Settings 
	unsigned char S2T, S3T; 
	int freq_err; 
 (0, 0) 
 (1, smrt) = (1, symbolrate) 
 (0, 1, 2) 
 (0, 0) 
 Upper bound 
 Lower bound 
 changed 
 delay 4~200 
 FOS 
 56 
 12, 23, 34, 78 
 BER monitor invalid when BER_EN = 0	
 coarse, fast calculation	
			
			  BER_SEL = 1, The monitored BER is the estimated
			  value with a Reed-Solomon decoder error amount at
			  the deinterleaver output.
			  monitored BER is expressed as a 20 bit output in total
 ber_rst == 3 
			
			  BER_SEL = 0, The monitored BER is the estimated
			  value with a Viterbi decoder error amount at the
			  QPSK demodulator output.
			  monitored BER is expressed as a 24 bit output in total
 ber_tim == 1 
 SPDX-License-Identifier: GPL-2.0-only
  Frontend driver for the GENPIX 8pksqpskDCII USB2.0 DVB-S module
  Copyright (C) 2006,2007 Alan Nisota (alannisota@gmail.com)
  Copyright (C) 2006,2007 Genpix Electronics (genpix@genpix-electronics.com)
  Thanks to GENPIX for the sample code used to implement this module.
  This module is based off the vp7045 and vp702x modules
 not supported by this Frontend 
 not supported by this Frontend 
 snr is reported in dBu256 
 snr is reported in dBu256 
 snr  38.4 ~= 100% strength 
 snr  17 returns 100% strength as 65535 
 snr17 
 backwards compatibility: DVB-S + 8-PSK were used for Turbo-FEC 
 kept for backwards compatibility 
 PSK_8 is for compatibility with DN 
 QAM_16 is for compatibility with DN 
 Unknown modulation 
 These commands are certainly wrong 
 ppm 
			
			  FE_CAN_QAM_16 is for compatibility
			  (Myth incorrectly detects Turbo-QPSK as plain QAM-16)
 SPDX-License-Identifier: GPL-2.0-or-later
  lnbp22.h - driver for lnb supply and control ic lnbp22
  Copyright (C) 2006 Dominik Kuhlen
  Based on lnbp21 driver
  the project's page is at https:linuxtv.org
 Power down 
 LNBP power off 
 free data 
 default configuration 
 ? 
 ? 
 ? 
 Power down 
 detect if it is present or not 
 install release callback 
 override frontend ops 
 SPDX-License-Identifier: GPL-2.0-or-later
  stv0900_core.c
  Driver for ST STV0900 satellite demodulator IC.
  Copyright (C) ST Microelectronics.
  Copyright (C) 2009 NetUP Inc.
  Copyright (C) 2009 Igor M. Liplianin <liplianin@netup.ru>
 internal params node 
 pointer for internal params, one for each pair of demods 
 first internal params 
 find chip by i2c adapter and i2c address 
		
		 Search of the last stv0900 chip or
 deallocating chip 
 allocating new chip 
Startup sequence
 preserve SELOSCI bit 
Set the DiseqC frequency to 22KHz 
	
		Formula:
		DiseqC_TX_Freq= MasterClock(32F22TX_Reg)
		DiseqC_RX_Freq= MasterClock(32F22RX_Reg)
		Formulat :
	Tuner_Frequency(MHz)	= Regs  64
	Tuner_granularity(MHz)	= Regs  2048
	real_Tuner_Frequency	= Tuner_Frequency(MHz) - Tuner_granularity(MHz)
	 Formulat:
	Tuner_frequency_reg= Frequency(MHz)64
 Low Pass Filter = BW 2 (MHz)
 Tuner Write trig 
 DVB-S2 delineator errors count 
 retrieving number for errnous headers 
 retrieving number for errnous packets 
cut 3.0 above
cut 3.0
 tuner init 
FE_AUTO_STB6100:
 27MHz 
 case FE_SW_TUNER: 
 hw tuner 
 tuner init 
FE_AUTO_STB6100:
 27MHz 
 case FE_SW_TUNER: 
 hw tuner 
 Print TS bitrate 
 Formula Bit rate = Mclk  px_tsfifo_bitrate  16384 
 Speeds up DVB-S searching 
 checkpatch complains 
 Unmodulated 
 Modulated 
Set the DiseqC mode to 22Khz _continues_ tone
release DiseqC reset to enable the 22KHz tone
		return diseqc mode to config->diseqc_mode.
maintain the DiseqC reset to disable the 22KHz tone
 SPDX-License-Identifier: GPL-2.0-or-later
  NXP TDA10071 + Conexant CX24118A DVB-SS2 demodulator + tuner driver
  Copyright (C) 2011 Antti Palosaari <crope@iki.fi>
  XXX: regmap_update_bits() does not fit our needs as it does not support
  partially volatile registers. Also it performs register read even mask is as
  wide as register value.
 write single register with mask 
 no need for read if whole reg is written 
 execute firmware command 
 write cmd and args for firmware 
 start cmd execution 
 wait cmd execution terminate 
 wait LNB TX 
 wait LNB RX 
 reply len 
 [4:0] 
 truncate API max 
 read reply 
 wait LNB TX 
 0x39[0] tuner PLL 
 demod PLL 
 viterbi or LDPC
 RS or BCH 
 signal strength 
 input power estimate dBm 
 CNR 
 EsNo 
 UCBPERBER 
 TODO: report total bitspackets 
 -75dBm - -20dBm 
 scale value to 0x0000-0xffff 
		 2 = auto; try first on then off
 warm state - wake up device from sleep 
 cold state - try to download firmware 
 request the firmware, this will block and timeout 
 init 
  download firmware 
 do not download last byte 
 wait firmware start 
 firmware status 
 init stats here in order signal app which stats are supported 
 chip ID 
 chip type 
 chip version 
 create dvb_frontend 
 setup callbacks 
 SPDX-License-Identifier: GPL-2.0-or-later
  cxd2841er.c
  Sony digital demodulator driver for
 	CXD2841ER - DVB-SS2TT2CC2
 	CXD2854ER - DVB-SS2TT2CC2, ISDB-TS
  Copyright 2012 Sony Corporation
  Copyright (C) 2014 NetUP Inc.
  Copyright (C) 2014 Sergey Kozlov <serjk@netup.ru>
  Copyright (C) 2014 Abylay Ospan <aospan@netup.ru>
 DVB-C constellation 
 see gcc.gnu.orgbugzillashow_bug.cgi?id=81715 
	
	  regValue = (symbolRateKSps  2^14  1000) + 0.5
	           = ((symbolRateKSps  2^14) + 500)  1000
	           = ((symbolRateKSps  16384) + 500)  1000
 Set SLV-T Bank : 0xAE 
 Set demod mode 
 Set SLV-X Bank : 0x00 
 DVB-SS2 
 Set SLV-T Bank : 0x00 
 Enable SS2 auto detection 1 
 Set SLV-T Bank : 0xAE 
 Enable SS2 auto detection 2 
 Set SLV-T Bank : 0x00 
 Enable demod clock 
 Enable ADC clock 
 Enable ADC 1 
 Enable ADC 2 
 Set SLV-X Bank : 0x00 
 Enable ADC 3 
 Set SLV-T Bank : 0xA3 
 Set SLV-T Bank : 0xAB 
 Set demod parameter 
 Set SLV-T Bank : 0x00 
 disable Hi-Z setting 1 
 disable Hi-Z setting 2 
 Set SLV-T Bank : 0x00 
 disable TS output 
 Set SLV-T Bank : 0x00 
 disable TS output 
 enable Hi-Z setting 1 
 enable Hi-Z setting 2 
 Set SLV-X Bank : 0x00 
 disable ADC 1 
 Set SLV-T Bank : 0x00 
 disable ADC clock 
 disable ADC 2 
 disable ADC 3 
 SADC Bias ON 
 disable demod clock 
 Set SLV-T Bank : 0xAE 
 disable SS2 auto detection1 
 Set SLV-T Bank : 0x00 
 disable SS2 auto detection2 
 Set SLV-T Bank : 0x00 
 Disable DSQOUT 
 Disable DSQIN 
 Set SLV-X Bank : 0x00 
 Disable oscillator 
 Set demod mode 
 Set SLV-X Bank : 0x00 
 Disable oscillator 
 Set demod mode 
 Set SLV-T Bank : 0x00 
 disable TS output 
 enable Hi-Z setting 1 
 enable Hi-Z setting 2 
 Set SLV-X Bank : 0x00 
 disable ADC 1 
 Set SLV-T Bank : 0x00 
 Disable ADC 2 
 Disable ADC 3 
 Disable ADC clock 
 Disable RF level monitor 
 Disable demod clock 
 Set SLV-T Bank : 0x00 
 disable TS output 
 enable Hi-Z setting 1 
 enable Hi-Z setting 2 
 Cancel DVB-T2 setting 
 Set SLV-X Bank : 0x00 
 disable ADC 1 
 Set SLV-T Bank : 0x00 
 Disable ADC 2 
 Disable ADC 3 
 Disable ADC clock 
 Disable RF level monitor 
 Disable demod clock 
 Set SLV-T Bank : 0x00 
 disable TS output 
 enable Hi-Z setting 1 
 enable Hi-Z setting 2 
 Cancel DVB-C setting 
 Set SLV-X Bank : 0x00 
 disable ADC 1 
 Set SLV-T Bank : 0x00 
 Disable ADC 2 
 Disable ADC 3 
 Disable ADC clock 
 Disable RF level monitor 
 Disable demod clock 
 Set SLV-T Bank : 0x00 
 disable TS output 
 enable Hi-Z setting 1 
 enable Hi-Z setting 2 
 TODO: Cancel demod parameter 
 Set SLV-X Bank : 0x00 
 disable ADC 1 
 Set SLV-T Bank : 0x00 
 Disable ADC 2 
 Disable ADC 3 
 Disable ADC clock 
 Disable RF level monitor 
 Disable demod clock 
 Set SLV-X Bank : 0x00 
 Clear all demodulator registers 
 Set SLV-X Bank : 0x00 
 Set demod SW reset 
 Select demod frequency 
 Set demod mode 
 Clear demod SW reset 
 Set SLV-T Bank : 0x00 
 enable DSQOUT 
 enable DSQIN 
 TADC Bias On 
 SADC Bias On 
 Set SLV-X Bank : 0x00 
 Clear all demodulator registers 
 Set SLV-X Bank : 0x00 
 Set demod SW reset 
 Select ADC clock mode 
 Select demod frequency 
 Clear demod SW reset 
 Set SLV-T Bank : 0x00 
 TADC Bias On 
 SADC Bias On 
 Set SLV-T Bank : 0x00 
 SW Reset 
 Enable TS output 
 Set TS parallel mode 
 Set SLV-T Bank : 0x00 
	
	  slave    Bank    Addr    Bit    default    Name
	  <SLV-T>  00h     C4h     [1:0]  2'b??      OSERCKMODE
	
	  slave    Bank    Addr    Bit    default    Name
	  <SLV-T>  00h     D1h     [1:0]  2'b??      OSERDUTYMODE
	
	  slave    Bank    Addr    Bit    default    Name
	  <SLV-T>  00h     D9h     [7:0]  8'h08      OTSCKPERIOD
	
	  Disable TS IF Clock
	  slave    Bank    Addr    Bit    default    Name
	  <SLV-T>  00h     32h     [0]    1'b1       OREG_CK_TSIF_EN
	
	  slave    Bank    Addr    Bit    default    Name
	  <SLV-T>  00h     33h     [1:0]  2'b01      OREG_CKSEL_TSIF
	
	  Enable TS IF Clock
	  slave    Bank    Addr    Bit    default    Name
	  <SLV-T>  00h     32h     [0]    1'b1       OREG_CK_TSIF_EN
 Enable parity period for DVB-T 
 Enable parity period for DVB-C 
 Set SLV-T Bank : 0xA0 
	
	   slave     Bank      Addr      Bit      Signal name
	  <SLV-T>    A0h       11h       [2]      ITSLOCK
 Set SLV-T Bank : 0x10 
 Set SLV-T Bank : 0x20 
 Set SLV-T Bank : 0x60 
	
	  Get High Sampling Rate mode
	   slave     Bank      Addr      Bit      Signal name
	  <SLV-T>    A0h       10h       [0]      ITRL_LOCK
		
		   slave     Bank      Addr      Bit      Signal name
		  <SLV-T>    A0h       50h       [4]      IHSMODE
	
	   slave     Bank      Addr      Bit      Signal name
	  <SLV-T>    A0h       45h       [4:0]    ICFRL_CTRLVAL[20:16]
	  <SLV-T>    A0h       46h       [7:0]    ICFRL_CTRLVAL[15:8]
	  <SLV-T>    A0h       47h       [7:0]    ICFRL_CTRLVAL[7:0]
 Layer A 
 Layer B 
 Layer C 
 Set SLV-T Bank : 0xA0 
	
	   slave     Bank      Addr      Bit      Signal name
	  <SLV-T>    A0h       35h       [0]      IFVBER_VALID
	  <SLV-T>    A0h       36h       [5:0]    IFVBER_BITERR[21:16]
	  <SLV-T>    A0h       37h       [7:0]    IFVBER_BITERR[15:8]
	  <SLV-T>    A0h       38h       [7:0]    IFVBER_BITERR[7:0]
	  <SLV-T>    A0h       3Dh       [5:0]    IFVBER_BITNUM[21:16]
	  <SLV-T>    A0h       3Eh       [7:0]    IFVBER_BITNUM[15:8]
	  <SLV-T>    A0h       3Fh       [7:0]    IFVBER_BITNUM[7:0]
 Set SLV-T Bank : 0xB2 
	
	   slave     Bank      Addr      Bit      Signal name
	  <SLV-T>    B2h       30h       [0]      IFLBER_VALID
	  <SLV-T>    B2h       31h       [3:0]    IFLBER_BITERR[27:24]
	  <SLV-T>    B2h       32h       [7:0]    IFLBER_BITERR[23:16]
	  <SLV-T>    B2h       33h       [7:0]    IFLBER_BITERR[15:8]
	  <SLV-T>    B2h       34h       [7:0]    IFLBER_BITERR[7:0]
 Bit error count 
 Set SLV-T Bank : 0xA0 
 Measurement period 
	
	  FIXME: the right thing would be to return bit_error untouched,
	  but, as we don't know the scale returned by the counters, let's
	  at least preserver BER = bit_errorbit_count.
	
	  FIXME: the right thing would be to return bit_error untouched,
	  but, as we don't know the scale returned by the counters, let's
	  at least preserver BER = bit_errorbit_count.
	
	  Freeze registers: ensure multiple separate register reads
	  are from the same snapshot
	
	  un-freeze registers
 Set SLV-T Bank : 0xA1 
	
	   slave     Bank      Addr      Bit     Signal name
	  <SLV-T>    A1h       10h       [0]     ICPM_QUICKRDY
	  <SLV-T>    A1h       11h       [4:0]   ICPM_QUICKCNDT[12:8]
	  <SLV-T>    A1h       12h       [7:0]   ICPM_QUICKCNDT[7:0]
 SNR(dB) = -9.50  ln(IREG_SNR_ESTIMATE  (24320)) 
 SNR(dB) = -8.75  ln(IREG_SNR_ESTIMATE  (20800)) 
 Set SLV-T Bank : 0xA0 
	
	   slave     Bank      Addr      Bit       Signal name
	  <SLV-T>    A0h       1Fh       [4:0]     IRFAGC_GAIN[12:8]
	  <SLV-T>    A0h       20h       [7:0]     IRFAGC_GAIN[7:0]
 Formula was empirically determinated @ 410 MHz 
 Code moved out of the function 
		
		  Formula was empirically determinated via linear regression,
		  using frequencies: 175 MHz, 410 MHz and 800 MHz, and a
		  stream modulated with QAM64
		
		  Formula was empirically determinated via linear regression,
		  using frequencies: 175 MHz, 410 MHz and 800 MHz.
 Set early unlock time 
 Set early unlock time 
 Set early unlock time 
 Set SLV-T Bank : 0x2E 
 Set profile and tune mode 
 Set SLV-T Bank : 0x2B 
 Set early unlock detection time 
 Set SLV-T Bank : 0x23 
 Manual PLP selection mode. Set the data PLP Id. 
 Auto PLP select (Scanning mode = 0x00). Data PLP select = 0x01. 
 TRCG Nominal Rate [37:0] 
 20.5MHz XTal 
 24MHz XTal 
 41MHz XTal 
 TRCG Nominal Rate [37:0] 
 20.5MHz XTal 
 24MHz XTal 
 41MHz XTal 
 TRCG Nominal Rate [37:0] 
 20.5MHz XTal 
 24MHz XTal 
 41MHz XTal 
 TRCG Nominal Rate [37:0] 
 20.5MHz XTal 
 24MHz XTal 
 41MHz XTal 
 TRCG Nominal Rate [37:0] 
 20.5MHz XTal 
 24MHz XTal 
 41MHz XTal 
 20.5MHz XTal 
 24MHz XTal   
 41MHz XTal   
 20.5MHz XTal 
 24MHz XTal   
 41MHz XTal   
 20.5MHz XTal 
 24MHz XTal   
 41MHz XTal   
 20.5MHz XTal 
 24MHz XTal   
 41MHz XTal   
 20.5MHz XTal 
 24MHz XTal   
 41MHz XTal   
 Set SLV-T Bank : 0x20 
 <Timing Recovery setting> 
 Set SLV-T Bank : 0x27 
 Set SLV-T Bank : 0x10 
		 Group delay equaliser settings for
		  ASCOT2D, ASCOT2E and ASCOT3 tuners
 <IF freq setting> 
 System bandwidth setting 
 <Timing Recovery setting> 
 Set SLV-T Bank : 0x27 
 Set SLV-T Bank : 0x10 
		 Group delay equaliser settings for
		  ASCOT2D, ASCOT2E and ASCOT3 tuners
 <IF freq setting> 
 System bandwidth setting 
 <Timing Recovery setting> 
 Set SLV-T Bank : 0x27 
 Set SLV-T Bank : 0x10 
		 Group delay equaliser settings for
		  ASCOT2D, ASCOT2E and ASCOT3 tuners
 <IF freq setting> 
 System bandwidth setting 
 <Timing Recovery setting> 
 Set SLV-T Bank : 0x27 
 Set SLV-T Bank : 0x10 
		 Group delay equaliser settings for
		  ASCOT2D, ASCOT2E and ASCOT3 tuners
 <IF freq setting> 
 System bandwidth setting 
 <Timing Recovery setting> 
 Set SLV-T Bank : 0x27 
 Set SLV-T Bank : 0x10 
		 Group delay equaliser settings for
		  ASCOT2D, ASCOT2E and ASCOT3 tuners
 <IF freq setting> 
 System bandwidth setting 
 TRCG Nominal Rate [37:0] 
 20.5MHz XTal 
 24MHz XTal 
 41MHz XTal 
 TRCG Nominal Rate [37:0] 
 20.5MHz XTal 
 24MHz XTal 
 41MHz XTal 
 TRCG Nominal Rate [37:0] 
 20.5MHz XTal 
 24MHz XTal 
 41MHz XTal 
 TRCG Nominal Rate [37:0] 
 20.5MHz XTal 
 24MHz XTal 
 41MHz XTal 
 20.5MHz XTal 
 24MHz XTal   
 41MHz XTal   
 20.5MHz XTal 
 24MHz XTal   
 41MHz XTal   
 20.5MHz XTal 
 24MHz XTal   
 41MHz XTal   
 20.5MHz XTal 
 24MHz XTal   
 41MHz XTal   
 Set SLV-T Bank : 0x13 
 Echo performance optimization setting 
 Set SLV-T Bank : 0x10 
 <Timing Recovery setting> 
		 Group delay equaliser settings for
		  ASCOT2D, ASCOT2E and ASCOT3 tuners
 <IF freq setting> 
 System bandwidth setting 
 Demod core latency setting 
 Notch filter setting 
 <Timing Recovery setting> 
		 Group delay equaliser settings for
		  ASCOT2D, ASCOT2E and ASCOT3 tuners
 <IF freq setting> 
 System bandwidth setting 
 Demod core latency setting 
 Notch filter setting 
 <Timing Recovery setting> 
		 Group delay equaliser settings for
		  ASCOT2D, ASCOT2E and ASCOT3 tuners
 <IF freq setting> 
 System bandwidth setting 
 Demod core latency setting 
 Notch filter setting 
 <Timing Recovery setting> 
		 Group delay equaliser settings for
		  ASCOT2D, ASCOT2E and ASCOT3 tuners
 <IF freq setting> 
 System bandwidth setting 
 Demod core latency setting 
 Notch filter setting 
 TRCG Nominal Rate 
 20.5MHz XTal 
 24MHz XTal 
 41MHz XTal 
 20.5MHz XTal 
 24MHz XTal 
 41MHz XTal 
 20.5MHz XTal 
 24MHz XTal 
 41MHz XTal 
 20.5MHz XTal 
 24MHz Xtal 
 41MHz XTal   
 20.5MHz XTal 
 24MHz Xtal 
 41MHz XTal   
 20.5MHz XTal 
 24MHz Xtal   
 41MHz XTal   
 Set SLV-T Bank : 0x10 
	  20.541MHz Xtal support is not available
	   on ISDB-T 7MHzBW and 8MHzBW
 TRCG Nominal Rate 
  Group delay equaliser settings for ASCOT tuners optimized 
 IF freq setting 
 System bandwidth setting 
 Demod core latency setting 
 Acquisition optimization setting 
 TRCG Nominal Rate 
  Group delay equaliser settings for ASCOT tuners optimized 
 IF freq setting 
 System bandwidth setting 
 Demod core latency setting 
 Acquisition optimization setting 
 TRCG Nominal Rate 
  Group delay equaliser settings for ASCOT tuners optimized 
 IF freq setting 
 System bandwidth setting 
 Demod core latency setting 
 Acquisition optimization setting 
 <IF freq setting> 
 Set SLV-T Bank : 0x11 
 Set SLV-T Bank : 0x40 
 Set SLV-X Bank : 0x00 
 Set demod mode 
 Set SLV-T Bank : 0x00 
 Enable demod clock 
 Disable RF level monitor 
 Enable ADC clock 
 Enable ADC 1 
 Enable ADC 2 & 3 
 Enable ADC 4 
 Set SLV-T Bank : 0x10 
 IFAGC gain settings 
 Set SLV-T Bank : 0x11 
 BBAGC TARGET level setting 
 Set SLV-T Bank : 0x10 
 ASCOT setting 
 Set SLV-T Bank : 0x18 
 Pre-RS BER monitor setting 
 FEC Auto Recovery setting 
 Set SLV-T Bank : 0x00 
 TSIF setting 
 Set SLV-T Bank : 0x10 
 Set SLV-T Bank : 0x00 
 Disable HiZ Setting 1 
 Disable HiZ Setting 2 
 Set SLV-X Bank : 0x00 
 Set demod mode 
 Set SLV-T Bank : 0x00 
 Enable demod clock 
 Disable RF level monitor 
 Enable ADC clock 
 Enable ADC 1 
 Enable ADC 4 
 Set SLV-T Bank : 0x10 
 IFAGC gain settings 
 Set SLV-T Bank : 0x11 
 BBAGC TARGET level setting 
 Set SLV-T Bank : 0x10 
 ASCOT setting 
 Set SLV-T Bank : 0x20 
 Acquisition optimization setting 
 Set SLV-T Bank : 0x2b 
 Set SLV-T Bank : 0x23 
 L1 Control setting 
 Set SLV-T Bank : 0x00 
 TSIF setting 
 DVB-T2 initial setting 
 Set SLV-T Bank : 0x2a 
 Set SLV-T Bank : 0x2b 
 24MHz Xtal setting 
 Set SLV-T Bank : 0x11 
 Set SLV-T Bank : 0x20 
 Set SLV-T Bank : 0x24 
 Set SLV-T Bank : 0x25 
 Set SLV-T Bank : 0x27 
 Set SLV-T Bank : 0x2B 
 Set SLV-T Bank : 0x2D 
 Set SLV-T Bank : 0x5E 
 Set SLV-T Bank : 0x00 
 Disable HiZ Setting 1 
 Disable HiZ Setting 2 
 ISDB-Tb part 
 Set SLV-X Bank : 0x00 
 Set demod mode 
 Set SLV-T Bank : 0x00 
 Enable demod clock 
 Enable RF level monitor 
 Enable ADC clock 
 Enable ADC 1 
 xtal freq 20.5MHz or 24M 
 Enable ADC 4 
 ASCOT setting 
 FEC Auto Recovery setting 
 ISDB-T initial setting 
 Set SLV-T Bank : 0x00 
 Set SLV-T Bank : 0x10 
 Set SLV-T Bank : 0x15 
 Set SLV-T Bank : 0x1E 
 Set SLV-T Bank : 0x63 
 for xtal 24MHz 
 Set SLV-T Bank : 0x10 
 Set SLV-T Bank : 0x60 
 Set SLV-T Bank : 0x00 
 Disable HiZ Setting 1 
 Disable HiZ Setting 2 
 Set SLV-X Bank : 0x00 
 Set demod mode 
 Set SLV-T Bank : 0x00 
 Enable demod clock 
 Disable RF level monitor 
 Enable ADC clock 
 Enable ADC 1 
 xtal freq 20.5MHz 
 Enable ADC 4 
 Set SLV-T Bank : 0x10 
 IFAGC gain settings 
 Set SLV-T Bank : 0x11 
 BBAGC TARGET level setting 
 Set SLV-T Bank : 0x10 
 ASCOT setting 
 Set SLV-T Bank : 0x40 
 Demod setting 
 Set SLV-T Bank : 0x00 
 TSIF setting 
 Set SLV-T Bank : 0x00 
 Disable HiZ Setting 1 
 Disable HiZ Setting 2 
 Prevent retrieving stats faster than once per second 
 Reset stats 
 Reset the wait for jiffies logic 
 deconfigureput demod to sleep on delsys switch if active 
 correct bandwidth 
 DiDEqC enable 
 cmd1 length & data 
 repeat count for cmd1 
 repeat count for cmd2: always 0 
 start transmit 
 wait for 1 sec timeout 
 sanity. force demod to SHUTDOWN state 
 SONY_DEMOD_CONFIG_SAT_IFAGCNEG set to 1 
 SONY_DEMOD_CONFIG_IFAGCNEG = 1 (0 for NO_AGCNEG 
 SONY_DEMOD_CONFIG_IFAGC_ADC_FS = 0 
 SONY_DEMOD_CONFIG_PARALLEL_SEL = 1 
 clear TSCFG bits 3+4 
 allocate memory for the internal state 
 create dvb_frontend 
 will set in attach function 
 SPDX-License-Identifier: GPL-2.0-or-later
	STB0899 Multistandard Frontend driver
	Copyright (C) Manu Abraham (abraham.manu@gmail.com)
	Copyright (C) ST Microelectronics
 wrap do_div() for ease of use 
 These functions are currently unused 
  stb0899_calc_srate
  Compute symbol rate
 srate = (SFR  master_clk) >> 20 
 sfr is of size 20 bit, stored with an offset of 4 bit 
  stb0899_get_srate
  Get the current symbol rate
  stb0899_set_srate
  Set symbol frequency
  MasterClock: master clock frequency (hz)
  SymbolRate: symbol rate (bauds)
  return symbol frequency
	
	  in order to have the maximum precision, the symbol rate entered into
	  the chip is computed as the closest value of the "true value".
	  In this purpose, the symbol rate value is rounded (1 is added on the bit
	  below the LSB )
	 
	  srate = (SFR  master_clk) >> 20
	       <=>
	    SFR = srate << 20  master_clk
	 
	  rounded:
	    SFR = (srate << 21 + master_clk)  (2  master_clk)
	 
	  stored as 20 bit number with an offset of 4 bit:
	    sfr = SFR << 4;
  stb0899_calc_derot_time
  Compute the amount of time needed by the derotator to lock
  SymbolRate: Symbol rate
  return: derotator time constant (ms)
  stb0899_carr_width
  Compute the width of the carrier
  return: width of carrier (kHz or Mhz)
  stb0899_first_subrange
  Compute the first subrange of the search
  stb0899_check_tmg
  check for timing lock
  internal.Ttiming: time to wait for loop lock
  stb0899_search_tmg
  perform a fs2 zig-zag to find timing
 timing loop computation & symbol rate optimisation	
 next derot zig zag position	
 derotator frequency		
 Change zigzag direction		
 get derotator frequency		
  stb0899_check_carrier
  Check for carrier found
 wait for derotator ok	
  stb0899_search_carrier
  Search for a QPSK carrier with the derotator
 next zig zag derotator position 
 derotator frequency	
 Change zigzag direction 
 get derotator frequency 
  stb0899_check_data
  Check for data found
 RESET FEC	
 clear previous failed END_LOOPVIT 
 force search loop	
 WARNING! VIT LOCKED has to be tested before VIT_END_LOOOP	
 DATA LOCK indicator	
  stb0899_search_data
  Search for a QPSK carrier with the derotator
 next zig zag derotator position 
 derotator frequency	
 change zig zag direction 
 get derotator frequency 
 store autodetected IQ swapping as default for DVB-S2 tuning 
  stb0899_check_range
  check if the found frequency is in the correct range
  NextSubRange
  Compute the next subrange of the search
  stb0899_dvbs_algo
  Search for a signal, timing, carrier and data for a
  given frequency in a given range
 BETA values rated @ 99MHz	
  5   10   20   30MBps 
 QPSK 12	
 QPSK 23	
 QPSK 34	
 QPSK 56	
 QPSK 78	
 Carrier loop optimization versus symbol rate for acquisition
 Set the timing loop to acquisition	
	 !! WARNING !!
	  Do not read any status variables while acquisition,
	  If any needed, read before the acquisition starts
	  querying status while acquiring causes the
	  acquisition to go bad and hence no locks.
 Initial calculations	
 DerotStep1000  Fsymbol	
 RESET Stream merger	
	
	  Set KDIVIDER to an intermediate value between
	  12 and 78 for acquisition
 Equalizer OFF while acquiring 
 Initialisations 
 RESET derotator frequency	
 enable tuner IO 
 Move tuner to frequency 
 AGC1, AGC2 and timing loop	
 There is signal in the band	
 disable tuner IO 
 For low rates (SCPC)	
 For high rates (MCPC)	
 Search for carrier	
 Check for data	
 Set the timing loop to tracking	
 if locked and range ok, set Kdiv	
 Equalizer OFF while acquiring	
 SN to b'11 for acquisition		
		
		  Carrier loop optimization versus
		  symbol RatePuncture Rate for Tracking
 13	
 18	
 21	
 24	
 25	
 26	
 release stream merger RESET	
 disable carrier detector	
  stb0899_dvbs2_config_uwp
  Configure UWP state machine
  stb0899_dvbs2_config_csm_auto
  Set CSM to AUTO mode
  stb0899_dvbs2_calc_srate
  compute BTR_NOM_FREQ for the symbol rate
  stb0899_dvbs2_calc_dev
  compute the correction to be applied to symbol rate
 for integer Calculation
 for integer Calculation
  stb0899_dvbs2_set_srate
  Set DVBS2 symbol rate
set decimation to 1
 (FSampFsymbol 100) for integer Calculation 
 don't band limit signal going into btr block
 band limit signal going into btr block
 scale UWP+CSM frequency to sample rate
  stb0899_dvbs2_set_btr_loopbw
  set bit timing loop bandwidth as a percentage of the symbol rate
k=k 10^-8
wn =wn 10^-8
kindirect = kindirect 10^-6
kDirect = kDirect 10^-2
- 2;
  stb0899_dvbs2_set_carr_freq
  set nominal frequency for carrier search
  stb0899_dvbs2_init_calc
  Initialize DVBS2 UWP, CSM, carrier and timing loops
 config uwp and csm 
 initialize BTR	
Set Carrier Search params (zigzag, num steps and freq step size
  stb0899_dvbs2_btr_init
  initialize the timing loop
 set enable BTR loopback	
 fix btr freq accum at 0	
 fix btr freq accum at 0	
  stb0899_dvbs2_reacquire
  trigger a DVB-S2 acquisition
 demod soft reset	
Reset Timing Loop	
 reset Carrier loop	
release demod soft reset	
 start acquisition process	
 equalizer Init	
Start equilizer	
 RESET Packet delineator	
  stb0899_dvbs2_get_dmd_status
  get DVB-S2 Demod LOCK status
  stb0899_dvbs2_get_data_lock
  get FEC status
  stb0899_dvbs2_get_fec_status
  get DVB-S2 FEC LOCK status
  stb0899_dvbs2_init_csm
  set parameters for manual mode
  stb0899_dvbs2_get_srate
  get DVB-S2 Symbol Rate
 only for integer calculation	
symbrate = (btrnomfreq_register_valMasterClock)2^(27+decim_rate_field) 
  stb0899_dvbs2_algo
  Search for signal, timing, carrier and data for a given
  frequency in a given range
 5000 ms max time to lock UWP and CSM, SYMB <= 2Mbs		
 350  ms max time to lock FEC, SYMB <= 2Mbs			
 2500 ms max time to lock UWP and CSM, 2Mbs < SYMB <= 5Mbs	
 170  ms max time to lock FEC, 2Mbs< SYMB <= 5Mbs		
 1500 ms max time to lock UWP and CSM, 5Mbs <SYMB <= 10Mbs	
 80  ms max time to lock FEC, 5Mbs< SYMB <= 10Mbs		
 500 ms max time to lock UWP and CSM, 10Mbs <SYMB <= 15Mbs	
 50  ms max time to lock FEC, 10Mbs< SYMB <= 15Mbs		
 300 ms max time to lock UWP and CSM, 15Mbs < SYMB <= 20Mbs	
 50  ms max time to lock FEC, 15Mbs< SYMB <= 20Mbs		
 250 ms max time to lock UWP and CSM, 20 Mbs < SYMB <= 25Mbs	
 25 ms max time to lock FEC, 20Mbs< SYMB <= 25Mbs		
 150 ms max time to lock UWP and CSM, SYMB > 25Mbs		
 20 ms max time to lock FEC, 20Mbs< SYMB <= 25Mbs		
 Maintain Stream Merger in reset during acquisition	
 enable tuner IO 
 Move tuner to frequency	
 disable tuner IO 
 Set IF AGC to acquisition	
 Initialisation	
 Wait for demod lock (UWP and CSM)	
 Demod Locked, check FEC status	
If false lock (UWP and CSM Locked but no FEC) try 3 time max
	Read the frequency offset
 Set the Nominal frequency to the found frequency offset for the next reacquire
 IQ Spectrum Inversion	
 start acquistion process	
 Wait for demod lock (UWP and CSM)	
 Demod Locked, check FEC	
try thrice for false locks, (UWP and CSM Locked but no FEC)	
	Read the frequency offset
 Set the Nominal frequency to the found frequency offset for the next reacquire
		if (pParams->DVBS2State == FE_DVBS2_FEC_LOCKED)
			pParams->IQLocked = !iqSpectrum;
 Wait for UWP,CSM and data LOCK 20ms max	
 Equalizer Disable update	 
 slow down the Equalizer once locked	
 Store signal parameters	
 store current inversion for next run 
 Set IF AGC to tracking	
 if QPSK 12,QPSK 35 or QPSK 23 set IF AGC reference to 16 otherwise 32
 Release Stream Merger Reset		
 SPDX-License-Identifier: GPL-2.0-or-later
    Auvitek AU8522 QAM8VSB demodulator driver
    Copyright (C) 2008 Steven Toth <stoth@linuxtv.org>
 default to on 
 VSB SNR lookup table 
 QAM64 SNR lookup table 
 QAM256 SNR lookup table 
 VSB Modulation table 
 QAM64 Modulation table 
 QAM256 Modulation table 
 Talk to the demod, set the FEC, GUARD, QAM settings etc 
 Allow the tuner to settle 
 Get the tuner status 
 turn on LED, if it isn't on already 
 turn off LED 
 bail out if we can't control an LED 
 (state->current_modulation == VSB_8) 
		 snr didn't change enough to bother
 VSB_8 
	 borrowed from lgdt330x.c
	 
	  Calculate strength from SNR up to 35dB
	  Even though the SNR can go higher than 35dB,
	  there is some comfort factor in having a range of
	  strong signals that can show at 100%
		 The following calculation method was chosen
		  purely for the sake of code re-use from the
 Convert from SNR in dB  10 to 8.24 fixed-point 
		 Convert from 8.24 fixed-point to
 allocate memory for the internal state 
 new demod instance 
 existing demod instance 
 setup the state 
 create dvb_frontend 
 Note: Leaving the I2C gate open here. 
 SPDX-License-Identifier: GPL-2.0-only
    Fujitu mb86a20s ISDB-TISDB-Tsb Module driver
    Copyright (C) 2010-2013 Mauro Carvalho Chehab
    Copyright (C) 2009-2010 Douglas Landgraf <dougsland@redhat.com>
 Seconds 
  Initialization sequence: Use whatevere default values that PV SBTVD
  does on its initialisation, obtained via USB snoop
	
	  On this demod, when the bit count reaches the count below,
	  it collects the bit error count. The bit counters are initialized
	  to 65535 here. This warrants that all of them will be quickly
	  calculated when device gets locked. As TMCC is parsed, the values
	  will be adjusted later in the driver's code.
 Turn on BER before Viterbi 
	
	  On this demod, post BER counts blocks. When the count reaches the
	  value below, it collects the block error count. The block counters
	  are initialized to 127 here. This warrants that all of them will be
	  quickly calculated when device gets locked. As TMCC is parsed, the
	  values will be adjusted later in the driver's code.
 Turn on BER after Viterbi 
	
	  On this demod, when the block count reaches the count below,
	  it collects the block error count. The block counters are initialized
	  to 127 here. This warrants that all of them will be quickly
	  calculated when device gets locked. As TMCC is parsed, the values
	  will be adjusted later in the driver's code.
 Enable PER 
 MER manual mode 
 MER symbol 4 
 CN symbol 4 
 CN manual mode 
 pre BER Counter reset 
 post BER Counter reset 
 PER Counter reset 
  I2C readwrite functions and macros
  Ancillary internal routines (likely compiled inlined)
  The functions below assume that gateway lock has already obtained
	
	  Actually, on state S8, it starts receiving TS, but the TS
	  output is only on normal state after the transition to S9.
 Reset its value if an error happen 
 Does a binary search to get RF strength 
 Rescale it from 2^12 (4096) to 2^16 
 Layer A 
 Layer B 
 Layer C 
 Layer A 
 Layer B 
 Layer C 
 Layer A 
 Layer B 
 Layer C 
 Layer A 
 Layer B 
 Layer C 
 Fixed parameters 
 Initialize values that will be later autodetected 
  Estimates the bit rate using the per-segment bit rate given by
  ABNTNBR 15601 spec (table 4).
 DQPSKQPSK 
 12 
 23 
 34 
 56 
 78 
 QAM16 
 12 
 23 
 34 
 56 
 78 
 QAM64 
 12 
 23 
 34 
 56 
 78 
	
	  If modulationfecguard is not detected, the default is
	  to consider the lowest bit rate, to avoid taking too long time
	  to get BER.
 Reset frontend cache to default values 
 Check for partial reception 
 Get per-layer data 
 Avoids sampling too quickly or to overflow the register 
 At least, one segment should exist 
 Get transmission mode and guard interval 
 Only modes 2 and 3 are supported 
 Guard interval 132 is not supported 
 per-layer info is incomplete; discard all per-layer 
 Reset the counters, if the channel changed 
 Clear status for most stats 
 BERPER counter reset 
 CNR counter reset 
 MER counter reset 
 Check if the BER measures are already available 
 Check if data is available for that layer 
 Read Bit Error Count 
 Read Bit Count 
	
	  As we get TMCC data from the frontend, we can better estimate the
	  BER bit counters, in order to do the BER measure during a longer
	  time. Use those data, if available, to update the bit count
	  measure.
 Turn off BER before Viterbi 
 Update counter for this layer 
 Turn on BER before Viterbi 
 Reset all preBER counters 
 Reset counter to collect new data 
 Check if the BER measures are already available 
 Check if data is available for that layer 
 Read Bit Error Count 
 Read Bit Count 
	
	  As we get TMCC data from the frontend, we can better estimate the
	  BER bit counters, in order to do the BER measure during a longer
	  time. Use those data, if available, to update the bit count
	  measure.
 Turn off BER after Viterbi 
 Update counter for this layer 
 Turn on BER after Viterbi 
 Reset all preBER counters 
 Reset counter to collect new data 
 Check if the PER measures are already available 
 Check if data is available for that layer 
 Read Packet error Count 
 Read Bit Count 
	
	  As we get TMCC data from the frontend, we can better estimate the
	  BER bit counters, in order to do the BER measure during a longer
	  time. Use those data, if available, to update the bit count
	  measure.
 Stop PER measurement 
 Update this layer's counter 
 start PER measurement 
 Reset all counters to collect new data 
 Reset counter to collect new data 
  All tables below return a dB1000 measurement
 If value is identical, no need to interpolate 
 Linear interpolation between the two (x,y) points 
 Check if CNR is available 
 CNR counter reset 
 Check if the measures are already available 
 Check if data is available 
 Read all layers 
 Start a new MER measurement 
 MER counter reset 
 Fill the length of each status counter 
 Only global stats 
 Per-layer stats - 3 layers + global 
 Signal is always available 
 Put all of them at FE_SCALE_NOT_AVAILABLE 
 Get per-layer stats 
	
	  At state 7, only CNR is available
	  For BER measures, state=9 is required
	  FIXME: we may get MER measures with state=8
 Layer is active and has rc segments 
 Handle BER before vterbi 
				
					 If an IO error happened,
					 measures are now unavailable
 Handle BER post vterbi 
				
					 If an IO error happened,
					 measures are now unavailable
 Handle Block errors for PERUCB reports 
				
					 If an IO error happened,
					 measures are now unavailable
 Update total preBER 
 Update total postBER 
 Update total PER 
	
	  Start showing global count if at least one error count is
	  available.
		
		  At least one per-layer BER measure was read. We can now
		  calculate the total BER
		 
		  Total Bit ErrorCount is calculated as the sum of the
		  bit errors on all active layers.
	
	  Start showing global count if at least one error count is
	  available.
		
		  At least one per-layer BER measure was read. We can now
		  calculate the total BER
		 
		  Total Bit ErrorCount is calculated as the sum of the
		  bit errors on all active layers.
		
		  At least one per-layer UCB measure was read. We can now
		  calculate the total UCB
		 
		  Total block ErrorCount is calculated as the sum of the
		  block errors on all active layers.
  The functions below are called via DVB callbacks, so they need to
  properly use the I2C gate control
 Initialize the frontend 
 Adjust IF frequency to match tuner 
 pll = freq[Hz]  2^2410^6  16.285714286 
	
	  Gate should already be opened, but it doesn't hurt to
	  double-check
	
	  Make it more reliable: if, for some reason, the initial
	  device initialization doesn't happen, initialize it when
	  a SBTVD parameters are adjusted.
	 
	  Unfortunately, due to a hard to track bug at tda829xtda18271,
	  the agc callback logic is not called during DVB attach time,
	  causing mb86a20s to not be initialized with Kworld SBTVD.
	  So, this hack is needed, in order to make Kworld SBTVD to work.
	 
	  It is also needed to change the IF after the initial init.
	 
	  HACK: Always init the frontend when set_frontend is called:
	  it was noticed that, on some devices, it fails to lock on a
	  different channel. So, it is better to reset everything, even
	  wasting some time, than to loose channel lock.
 Get lock 
 Get signal strength 
 Status is OK 
 Get TMCC info
 Status is OK 
 Get statistics 
 Don't return EBUSY to userspace 
 allocate memory for the internal state 
 setup the state 
 create dvb_frontend 
 Check if it is a mb86a20s frontend 
 Use dib8000 values per default 
 Actually, those values depend on the used tuner 
 SPDX-License-Identifier: GPL-2.0-or-later
	STV6110(A) Silicon tuner driver
	Copyright (C) Manu Abraham <abraham.manu@gmail.com>
	Copyright (C) ST Microelectronics
 Max transfer size done by I2C transfer functions 
 see gcc.gnu.orgbugzillashow_bug.cgi?id=81715 
 VCO Auto calibration 
 LPF 
 LPF 
 LPF 
 cal. clk activated 
 LPF auto cal 
 cal. done 
 setup divider 
 setup callbacks 
 SPDX-License-Identifier: GPL-2.0-or-later
  Abilis Systems Single DVB-T Receiver
  Copyright (C) 2008 Pierrick Hascoet <pierrick.hascoet@abilis.com>
  Copyright (C) 2010 Devin Heitmueller <dheitmueller@kernellabs.com>
 signal strength 
 bit error rate 
 set frequency 
 fix interleaving_mode 
	
	  Detect a hierarchy selection
	  if HPLP are both set to FEC_NONE, HP will be selected.
 Set frontend arguments 
 send abilis command: GET_TPS 
 extract constellation 
 extract hierarchy 
 extract code rate HP 
 extract code rate LP 
 extract guard interval 
 extract transmission mode 
 send abilis command: GET_TUNE_STATUS 
  Note:
  - in AS102 SNR=MER
    - the SNR will be returned in linear terms, i.e. not in dB
    - the accuracy equals ±2dB for a SNR range from 4dB to 30dB
    - the accuracy is >2dB for SNR values outside this range
 init frontend callback ops 
 SPDX-License-Identifier: GPL-2.0-or-later
  isl6405.c - driver for dual lnb supply and control ic ISL6405
  Copyright (C) 2008 Hartmut Hackmann
  Copyright (C) 2006 Oliver Endriss
  the project's page is at https:linuxtv.org
 power off 
 free 
 default configuration 
 bits which should be forced to '1' 
 bits which should be forced to '0' 
 detect if it is present or not 
 install release callback 
 override frontend ops 
 SPDX-License-Identifier: GPL-2.0-or-later
  Allegro A8293 SEC driver
  Copyright (C) 2011 Antti Palosaari <crope@iki.fi>
 ENB=0 
 VSEL0=1, VSEL1=0, VSEL2=0, VSEL3=0, ENB=1
 VSEL0=0, VSEL1=0, VSEL2=0, VSEL3=1, ENB=1
 TMODE=0, TGATE=1 
 check if the SEC is there 
 override frontend ops 
 SPDX-License-Identifier: GPL-2.0-or-later
	STV09000903 Multistandard Broadcast Frontend driver
	Copyright (C) Manu Abraham <abraham.manu@gmail.com>
	Copyright (C) ST Microelectronics
 for demodulator internal modes 
 Max transfer size done by I2C transfer functions 
 internal params node 
 pointer for internal params, one for each pair of demods 
 first internal params 
 find chip by i2c adapter and i2c address 
	
	 Search of the last stv0900 chip or
 deallocating chip 
 allocating new chip 
 append to list 
 DVBS1 and DSS CN Lookup table 
  0.0dB 
  0.5dB 
  1.0dB 
  1.5dB 
  2.0dB 
  2.5dB 
  3.0dB 
  3.5dB 
  4.0dB 
  4.5dB 
  5.0dB 
  5.5dB 
  6.0dB 
  6.5dB 
  7.0dB 
  7.5dB 
  8.0dB 
  8.5dB 
  9.0dB 
  9.5dB 
 10.0dB 
 10.5dB 
 11.0dB 
 11.5dB 
 12.0dB 
 12.5dB 
 13.0dB 
 13.5dB 
 14.0dB 
 14.5dB 
 15.0dB 
 16.0dB 
 17.0dB 
 18.0dB 
 19.0dB 
 20.0dB 
 21.0dB 
 22.0dB 
 23.0dB 
 24.0dB 
 25.0dB 
 26.0dB 
 27.0dB 
 28.0dB 
 29.0dB 
 30.0dB 
 31.0dB 
 32.0dB 
 33.0dB 
 40.0dB 
 45.0dB 
 50.0dB 
 DVBS2 CN Lookup table 
 -3.0dB 
 -2d.0B 
 -1.0dB 
 -0.0dB 
  0.5dB 
  1.0dB 
  1.5dB 
  2.0dB 
  2.5dB 
  3.0dB 
  3.5dB 
  4.0dB 
  4.5dB 
  5.0dB 
  5.5dB 
  6.0dB 
  6.5dB 
  7.0dB 
  7.5dB 
  8.0dB 
  8.5dB 
  9.0dB 
  9.5dB 
 10.0dB 
 10.5dB 
 11.0dB 
 11.5dB 
 12.0dB 
 12.5dB 
 13.0dB 
 13.5dB 
 14.0dB 
 14.5dB 
 15.0dB 
 16.0dB 
 17.0dB 
 18.0dB 
 19.0dB 
 20.0dB 
 21.0dB 
 22.0dB 
 23.0dB 
 24.0dB 
 25.0dB 
 26.0dB 
 27.0dB 
 28.0dB 
 29.0dB 
 30.0dB 
 31.0dB 
 32.0dB 
 33.0dB 
 40.0dB 
 45.0dB 
 50.0dB 
 RF level CN lookup table 
  -5dBm 
 -10dBm 
 -15dBm 
 -20dBm 
 -25dBm 
 -30dBm 
 -35dBm 
 -40dBm 
 -45dBm 
 -50dBm 
 -55dBm 
 -60dBm 
 -65dBm 
 -70dBm 
 disable DSS modes 
 disable DSS modes 
 disable PR 67 
 disable PR 67 
disable the DSS mode 
disable puncture rate 67
 Cut 2.0 Long Frame Tracking CR loop 
 MODCOD  2MPon 2MPoff 5MPon 5MPoff 10MPon 10MPoff 20MPon 20MPoff 30MPon 30MPoff 
 Cut 3.0 Long Frame Tracking CR loop 
 MODCOD  2MPon 2MPoff 5MPon 5MPoff 10MPon 10MPoff 20MPon 20MPoff 30MPon 30MPoff 
 Cut 2.0 Long Frame Tracking CR Loop 
 MODCOD  2MPon 2MPoff 5MPon 5MPoff 10MPon 10MPoff 20MPon 20MPoff 30MPon 30MPoff 
 Cut 3.0 Long Frame Tracking CR Loop 
 MODCOD  2MPon 2MPoff 5MPon 5MPoff 10MPon 10MPoff 20MPon 20MPoff 30MPon 30MPoff 
 MODCOD  2MPon 2MPoff 5MPon 5MPoff 10MPon 10MPoff 20MPon 20MPoff 30MPon 30MPoff 
 MODCOD  2MPon 2MPoff 5MPon 5MPoff 10MPon 10MPoff 20MPon 20MPoff 30MPon 30MPoff 
 Cut 2.0 Short Frame Tracking CR Loop 
 MODCOD	  2M    5M    10M   20M   30M 
 Cut 3.0 Short Frame Tracking CR Loop 
 MODCOD	  2M	5M    10M   20M	  30M 
 see gcc.gnu.orgbugzillashow_bug.cgi?id=81715 
	
	  NOTE! A lock is used as a FSM to control the state in which
	  access is serialized between two tuners on the same demod.
	  This has nothing to do with a lock to protect a critical section
	  which may in some other cases be confused with protecting IO
	  access to the demodulator gate.
	  In case of any error, the lock is unlocked and exit within the
	  relevant operations themselves.
10Msps< SR <=15Msps
10Msps< SR <=15Msps
SR >20Msps
SR <=1Msps
1Msps < SR <= 2Msps 
2Msps < SR <= 5Msps 
5Msps < SR <= 10Msps 
10Msps < SR <= 20Msps 
SR >20Msps
 SR  2^16  master_clk 
 MSB 
 LSB 
 SR  2^16  master_clk 
 MSB 
 LSB 
 MSB 
 LSB 
 SR  2^16  master_clk 
 MSB 
 LSB 
 DVB-S and DVB-S2 
 all puncture rate 
 disable DSS 
 all 
 12, 23, 67 
 Set ACLC BCLC optimised value vs SR 
 Cut 2.0 
		 Activate Viterbi decoder in legacy search,
		  do not use FRESVIT1, might impact VITERBI2
 disable DVB-S2 
 stop DVB-S CR loop 
 enable S2 carrier loop 
 > Cut 3: Stop carrier 3 
 Cut 2: enable link during search 
			 Single demodulator
			  Authorize SHORT and LONG frames,
			  QPSK, 8PSK, 16APSK and 32APSK
 enable DVB-S2 and DVB-S2 in Auto MODE 
 enable S2 carrier loop 
 > Cut 3: Stop carrier 3 
 Cut 2: enable link during search 
			 Single demodulator
			  Authorize SHORT and LONG frames,
			  QPSK, 8PSK, 16APSK and 32APSK
 Reset demodulator 
enlarge the timing bandwidth for Low SR
			 If the symbol rate is >5 Msps
reduce the timing bandwidth for high SR
 >= Cut 3 
 enlarge the timing bandwidth for Low SR 
 reduce timing bandwidth for high SR 
 Set CFR min and max to manual mode 
			 WARM Start
			  CFR min = -1MHz,
			  CFR max = +1MHz
			 COLD Start
			  CFR min =- (SearchRange  2 + 600KHz)
			  CFR max = +(SearchRange  2 + 600KHz)
			  (600KHz for the tuner step size)
Frequency offset detector setting
 Cut 2 
 Cut 3 
		 The symbol rate and the exact
		  carrier Frequency are known
 The symbol rate is known 
 SR = 65 Msps Max 
 SR= 400 ksps Min 
 stop acq @ coarse carrier state 
 Demod RESET 
 Demod RESET 
 Demod RESET 
 Demod RESET 
 trigger acquisition 
 Setup tuner 
 SFRUP = SFR + 30% 
 Demod RESET 
 SFRUP = SFR + 30% 
 SFRLOW = SFR - 30% 
 SFRUP = SFR + 30% 
 SFRLOW = SFR - 30% 
 trigger acquisition 
 searching 
 first PLH detected 
 DVB-S2 mode 
 DVB-S1legacy mode 
 > Cut 3 
 set viterbi hysteresis 
 stop carrier offset search 
 set car ofset to 0 
 trigger acquisition 
 DVB-S1 timing 
 DVB-S2 timing 
 cold start wait 
 Setup tuner 
 maxcarrier should be<= +-14 Mclk 
 freq step = 3% of srate 
 increment <= 18 Mclk 
 27.5 Msps reference 
 min steps = 3 
 max steps <= 100 
 10% margin 
 stop DVB-S2 packet delin 
 get params 
 accelerate the frequency detector 
 accelerate the frequency detector 
run the SW search 2 times maximum
Check if the demod is not losing lock in DVBS2
Check if the demod is not losing lock in DVBS2
if correct frames is decrementing 
FALSE lock, The demod is losing lock 
 in Hz 
 carrier_frequency = MasterClock  Reg  2^24 
 2's complement 
 >= Cut 3 
 16APSK and 32APSK 
		
		  This should never happen in practice, except if
		  something is really wrong at the car_loop table.
 Cut 3.0 and up 
 Cut 2.0 and up: we don't support cuts older than 2.0 
Carrier loop setting for short frame
 PER 
 AUTO tracking MODE 
 AUTO tracking MODE 
 update initial carrier freq with the found freq offset 
 blind search: wait 50ms for SR stabilization 
 searching 
 first PLH detected 
 DVB-S2 mode 
 DVB-S1legacy mode 
 rolloff to auto mode if DVBS2 
 DVB-S2 rolloff to auto mode if DVBS2 
 Stop path 1 stream merger 
 Demod stop 
 wide bw for unknown srate 
 wider srate scan 
 initial srate = 1Msps 
 known srate 
 SR < 2MSPS 
 SR >= 2Msps 
		 if cold start or warm  (Symbolrate is known)
		  use a Narrow symbol rate scan range
 narrow srate scan 
 Setup tuner 
 default: 10dB 
		 If AGC1 integrator value is 0
		  then read POWERI, POWERQ
 rolloff to auto mode if DVBS2 
 DVB-S2 rolloff to auto mode if DVBS2 
 signal within Range 
			 >= Cut 2.0 :release TS reset after
			  demod lock and optimized Tracking
 release merger reset 
 merger reset 
 release merger reset 
 Reset DVBS2 packet delinator error counter 
 PER 
 Reset the Total packet counter 
 Reset the packet Error counter2 
 searching 
 first PLH detected 
 DVB-S2 mode 
 DVB-S1legacy mode 
 Max PER 
 Counter 2 
 power off ADC 1 
 power off DiSEqC 1 
		 check whether path 2 is already sleeping, that is when
 stop clocks 
 packet delineator 1 clock 
 ADC 1 clock 
		 FEC clock is shared between the two paths, only stop it
 sampling 1 clock 
 viterbi 1 clock 
		 TS clock is shared between the two paths, only stop it
 power off ADC 2 
 power off DiSEqC 2 
		 check whether path 1 is already sleeping, that is when
 stop clocks 
 packet delineator 2 clock 
 ADC 2 clock 
		 FEC clock is shared between the two paths, only stop it
 sampling 2 clock 
 viterbi 2 clock 
		 TS clock is shared between the two paths, only stop it
 general power off 
 general power on 
 power on ADC 1 
 power on DiSEqC 1 
 activate clocks 
 packet delineator 1 clock 
 ADC 1 clock 
 FEC clock 
 sampling 1 clock 
 viterbi 1 clock 
 TS clock 
 power on ADC 2 
 power on DiSEqC 2 
 activate clocks 
 packet delineator 2 clock 
 ADC 2 clock 
 FEC clock 
 sampling 2 clock 
 viterbi 2 clock 
 TS clock 
 set LDPC to dual mode 
 path 2 
 path 1 
 return (Hz), clk in Hz
 kHz 
Set the DiseqC frequency to 22KHz 
 Mux'd stream mode 
		 call tuner init to configure the tuner's clock output
		   divider directly before setting up the master clock of
 135 Mhz 
 STV090x init 
 Stop Demod 
 Set No Tuner Mode 
 I2C repeater OFF 
 set PLL divider 
 141 oversampling 
 enable PLL 
 write initval 
 write cut20_val
 we shouldn't bail out from here 
 ADC1 range 
 ADC2 range 
 workaround for stuck DiSEqC output 
 Single or Dual mode 
 default 
 setup callbacks 
 Single or Dual mode 
 default 
 SPDX-License-Identifier: GPL-2.0
  Driver for the MaxLinear MxL5xx family of tunersdemods
  Copyright (C) 2014-2015 Ralph Metzler <rjkm@metzlerbros.de>
                          Marcus Metzler <mocm@metzlerbros.de>
                          developed for Digital Devices GmbH
  based on code:
  Copyright (c) 2011-2013 MaxLinear, Inc. All rights reserved
  which was released under GPL V2
 do nothing 
 init fe stats 
 Release one frontend, two more shall take its place! 
struct mxl state = fe->demodulator_priv;
CfgDemodAbortTune(state);
 CfgDemodAbortTune(state); 
 fix scale 
 signal statistics 
 signal strength is always available 
 25  4 bytes 
 read demod channel parameters 
 4 bytes 
	
	  p->delivery_system =
	 	(MXL_HYDRA_BCAST_STD_E) regData[DMD_STANDARD_ADDR];
	  p->inversion =
	 	(MXL_HYDRA_SPECTRUM_E) regData[DMD_SPECTRUM_INVERSION_ADDR];
	  freqSearchRangeKHz =
	 	(regData[DMD_FREQ_SEARCH_RANGE_IN_KHZ_ADDR]);
 put CPU into reset 
 Reset TX FIFO's, BBAND, XBAR 
	 Disable clock to Baseband, Wideband, SerDes,
	  Alias ext & Transport modules
 Clear Software & Host interrupt status - (Clear on read) 
 bring XCPU out of reset 
 Enable XCPU UART message processing in MCPU 
 Bring CPU out of reset 
 Wait until FW boots 
 Initialize XPT XBAR 
	 sometimes register values are wrong shortly
	  after first heart beats
 Reg Addr 
 LSB pos 
 Num of bits 
 Data 
  supports only (0-104&139)MHz 
 139; 
 MXL_HYDRA_MPEG_CLK_GAPPED; 
 SPDX-License-Identifier: GPL-2.0-or-later
  ZyDAS ZD1301 driver (demodulator)
  Copyright (C) 2015 Antti Palosaari <crope@iki.fi>
 Program tuner 
 ~180ms seems to be enough 
	
	  Interesting registers here are:
	  0x6a05: get some gain value
	  0x6a06: get about same gain value than set to 0x6a43
	  0x6a07: get some gain value
	  0x6a43: set gain value by driver
	  0x6a24: get demod lock bits (FSM stage?)
	 
	  Driver should implement some kind of algorithm to calculate suitable
	  value for register 0x6a43, based likely values from register 0x6a05
	  and 0x6a07. Looks like gain register 0x6a43 value could be from
	  range 0x00 - 0x70.
 Poll xfer ready 
 Poll xfer ready 
 Platform driver interface 
 Setup the state 
 Sleep 
 Create I2C adapter 
 Create dvb frontend 
 SPDX-License-Identifier: GPL-2.0-or-later
    Conexant cx22700 DVB OFDM demodulator driver
    Copyright (C) 2001-2002 Convergence Integrated Media GmbH
	Holger Waechtler <holger@convergence.de>
 use user tps parameters 
 restart acquisition 
  tps valid? 
  soft reset 
 XXX CHECKME: soft reset
 PAL loop filter off 
 restart acquire 
 allocate memory for the internal state 
 setup the state 
 check if the demod is there 
 create dvb_frontend 
 SPDX-License-Identifier: GPL-2.0-or-later
  Sony CXD2820R demodulator driver
  Copyright (C) 2010 Antti Palosaari <crope@iki.fi>
 program tuner 
 tune stops BER counter 
 program IF frequency 
 Lock detection 
 Signal strength 
 Scale value to 0x0000-0xffff 
 CNR 
 log2(e) << 24 
 BER 
 no zigzag 
 SPDX-License-Identifier: GPL-2.0-only
  Linux-DVB Driver for DiBcom's DiB9000 and demodulator-family.
  Copyright (C) 2005-10 DiBcom (http:www.dibcom.fr)
 common for all chips 
 to protect readwrite operations 
 to protect the whole mailbox handling 
 to protect the memory accesses 
 to protect the memory-based mailbox 
 common for all platforms 
 for the I2C transfer 
 -1: empty list; -2: do not use the list 
 memory_access requests 
      dprintk("%d memcmd: %d %d %d\n", state->fe_id, addr, addr+len, len); 
      b[0] = 0 << 7; 
      b[2] = 0; 
      b[3] = 0; 
      b[10] = 0; 
      b[11] = 0; 
      b[6] = 0; 
      b[7] = 0; 
 if it was called directly reset it - to force a future setup-call to set it 
 decide whether we need to "refresh" the memory controller 
 same command 
 and we do not want to read something with less than 67 bytes looping - working around a bug in the memory controller 
 config crtl reg 
 Reset mailbox  
 Read reset status 
dprintk( "MBX: size: %d\n", size); 
 byte-order conversion - works on big (where it is not necessary) or little endian 
 write msg 
 update register nb_mes_in_RX 
 Length and type in the first word 
 Initial word already read 
 to word conversion 
 Initial word already read 
 Update register nb_mes_in_TX 
 Bullet proof the buffer 
 find a free slot 
                      dprintk( "MBX: fetched %04x message to cache\n", block); 
 debug-messages are going to be printed right away 
 free the block 
 FE-TRACE 
 5 bit field 
 7 bit field 
 1=RiscB 
 Clear the IRQ 
      if (tmp) 
              dprintk( "cleared IRQ: %x\n", tmp); 
 dib9000_mbx_get_from_cache(); 
 free the block 
 signal that we found a message 
 try to fetch one message - if any 
 Reconfig pool mac ram 
 A: 8k C, 4 k D - B: 32k C 6 k D - IRAM 96k 
 Toggles IP crypto to Host APB interface. 
 Set jump and no jump in the dma box 
 Set MAC as APB Master. 
 Reset the RISCs 
 Run the RISCs 
 protect this driver to be used with 7000PC 
 by default everything is going to be powered off 
 keep settings for RISC 
 now, depending on the requested mode, we power on 
 power up everything in the demod 
 just leave power on the control-interfaces: GPIO and (I2C or SDIO or SRAM) 
 TODO power up either SDIO or I2C or SRAM 
 always power down unused parts 
 P_sdio_select_clk = 0 on MC and after 
 reset the i2c-master to use the host interface 
 unforce divstr regardless whether i2c enumeration was done or not 
 restart all parts 
 dprintk( "APB access through rd fw %d %x\n", address, attribute); 
 dprintk( "APB access through wr fw %d %x\n", address, attribute); 
 initialize the firmware 
 subband 
 type == 0 -> GPIO - PWM not yet supported 
 fe_id 
 0 - id, 1 - no_of_frontends 
 0 = i2c-address demod, 0 = tuner 
 do not wait for CELL ID when doing autosearch 
 write the channel context - a channel is initialized to 0, so it is OK 
 something happened 
 tps locks are "slower" than MPEG locks -> even in autosearch data is OK here 
 0x0400 
 0x0440 
 0x0482 
 0x0500 
 read 
 start read 
 start write 
 I2C 
 SCL frequency 
 scl 
 write-part 
 do the transaction 
 read back any possible result 
 reset the direction bit 
 set the new direction 
 reset the direction bit 
 set the new value 
 postpone the pid filtering cmd 
 postpone the pid filtering cmd 
 synchronize the cache with the other frontends 
 get the channel from master chip 
 synchronize the cache with the other frontends 
 check that the correct parameters are set 
 postpone the pid filtering cmd 
 set the master status 
 no channel specified, autosearch the channel 
 set mode and status for the different frontends 
 synchronization of the cache 
 actual tune 
 0: tune pending; 1: tune failed; 2:tune success 
 tune success 
 some frontends are still tuning 
 if all tune are done and no success, exit: tune failed 
 check the tune result 
 tune failed 
 tune failed; put all the pid filtering cmd to junk 
 synchronize all the channel cache 
 retune the other frontends with the found channel 
 only retune the frontends which was not tuned success 
 some frontends are still tuning 
 set the output mode 
 turn off the diversity for the last frontend 
 do not postpone any more the pid filtering 
 designated i2c address 
	 Ensure the output mode remains at the previous default if it's
	  not specifically set by the caller.
 SPDX-License-Identifier: GPL-2.0-or-later
	TDA8261 8PSKQPSK tuner driver
	Copyright (C) Manu Abraham (abraham.manu@gmail.com)
 state cache 
 kHz 
	
	  N = Max VCO Frequency  Channel Spacing
	  Max VCO Frequency = VCO frequency + (channel spacing - 1)
	  (to account for half channel spacing on either side)
 Set params 
 sleep for some time 
 check status 
 cache successful state 
 SPDX-License-Identifier: GPL-2.0-or-later
	Driver for M88RS2000 demodulator and tuner
	Copyright (C) 2012 Malcolm Priestley (tvboxspy@gmail.com)
	Beta Driver
	Include various calculation code from DS3000 driver.
	Copyright (C) 2009 Konstantin Dimitrov.
 Must not be 0x00 or 0xff 
 Carrier Offset 
 TODO complete this section 
 set voltage pin always set 1
 bit0 VH, bit1 offon 
 Setup frontend from shutdowncold 
 Shutdown the frondend 
 needs twice 
 needs two times 
 Set Tuner 
 default mclk value 96.4285  2  1000 = 192857 
 Reset demod by symbol rate 
 Set FEC 
 Set Symbol Rate 
 Set up Demod 
 Unknown suspect SNR level 
 ppm 
 allocate memory for the internal state 
 setup the state 
 create dvb_frontend 
 SPDX-License-Identifier: GPL-2.0-or-later
  Driver for
     Samsung S5H1420 and
     PnpNetwork PN1010 QPSK Demodulator
  Copyright (C) 2005 Andrew de Quincey <adq_dvb@lidskialf.net>
  Copyright (C) 2005-8 Patrick Boettcher <pb@linuxtv.org>
	 FIXME: ugly workaround for flexcop's incapable i2c-controller
	  it does not support repeated-start, workaround: write addr-1
	  and then read
 dprintk("rd(%02x): %02x %02x\n", state->config->demod_address, reg, b[0]); 
 dprintk("wr(%02x): %02x %02x\n", state->config->demod_address, reg, data); 
 setup for DISEQC 
 write the DISEQC command bytes 
 kick off transmission 
 wait for transmission to complete 
 restore original settings 
 setup for DISEQC receive 
 FIXME: guess - do we need to set DIS_RDY(0x08) in receive mode? 
 wait for reception to complete 
 FIXME: do we test DIS_RDY(0x08) or RCV_EN(0x80)? 
	 check error flag - FIXME: not sure what this does - docs do not describe
 check length 
 extract data 
 restore original settings 
 setup for tone burst 
 set value for B position if requested 
 start transmission 
 wait for transmission to complete 
 restore original settings 
 determine lock state 
	 fix for FEC 56 inversion issue - if it doesn't quite lock, invert
 wait a bit then update lock status 
 perform post lock setup 
 calculate the data rate 
 set the MPEG_CLK_INTL for the calculated data rate 
 Enable "MPEG_Out" 
 kicker disable 
 DC freeze TODO it was never activated by default or it can stay activated 
 post-lock processing has been done! 
	 remember freqoffset is in kHz, but the chip wants the offset in Hz, so
	 remember freqoffset is in kHz, but the chip wants the offset in Hz, so
 check if we should do a fast-tune 
 first of all, software reset 
 set s5h1420 fclk PLL according to desired symbol rate 
 TODO DC offset removal, config parameter ? 
 set misc registers 
 e7 for s5h1420 
 78 for s5h1420 
 unfreeze DC compensation 
 Parallel output more, disabled -> enabled later 
 0x1d for s5h1420 
 0x8e for s5h1420 
 Tuner i2c address - for the gate controller 
 set tuner PLL 
 set the reset of the parameters 
 start QPSK 
 disable power down and do reset 
 repeater stops once there was a stop condition 
 allocate memory for the internal state 
 setup the state 
 check if the demod is there + identify it 
 create dvb_frontend 
 create tuner i2c adapter 
  .symbol_rate_tolerance  = ???,
 SPDX-License-Identifier: GPL-2.0-or-later
     Driver for Philips tda8262tda8263 DVBS Silicon tuners
     (c) 2006 Andrew de Quincey
 i2c details 
 BW = ((1 + RO)  SR2 + 5)  1.3      [SR in MSPS, BW in MHz] 
 with R0 = 0.35 and some transformations: 
 subaddress
 powerdown RSSI + the magic value 1
 power down loopthrough if not needed
 1Mhz + 0.45 VCO
 baseband cut-off 
 baseband gain 9 db + no RF attenuation
 charge pumps at high, tests off
 recommended value 4 for AMPVCO + disable ports.
 normal caltime + recommended values for SELTH + SELVTL
 recommended value 13 for BBIAS + unknown bit set on
 SPDX-License-Identifier: GPL-2.0-or-later
  Auvitek AU8522 QAM8VSB demodulator driver and video decoder
  Copyright (C) 2009 Devin Heitmueller <dheitmueller@linuxtv.org>
  Copyright (C) 2005-2008 Auvitek International, Ltd.
 Developer notes:
  Enough is implemented here for CVBS and S-Video inputs, but the actual
   analog demodulator code isn't implemented (not needed for xc5000 since it
   has its own demodulator and outputs CVBS)
 Video Decoder Filter Coefficients
   The values are as follows from left to right
   0="ATV RF" 1="ATV RF13" 2="CVBS" 3="S-Video" 4="PAL" 5=CVBS13" 6="SVideo13"
 Registers 0x060b through 0x0652 are the LP Filter coefficients
   The values are as follows from left to right
   0="SIF" 1="ATVRFATVRF13"
   Note: the "ATVRFATVRF13" mode has never been tested
 Provide reasonable defaults for picture tuning values 
 Other decoder registers 
 NTSC 
	
	  Despite what the table says, for the HVR-950q we still need
	  to be in CVBS mode for the S-Video input (reason unknown).
 filter_coef_type = 3; 
 Load the Video Decoder Filter Coefficients 
	 It's not clear what these registers are for, but they are always
 here we're going to try the pre-programmed route 
 PGA in automatic mode 
 Enable clamping control 
 here we're going to try the pre-programmed route 
	 It's not clear why we have to have the PGA in automatic mode while
 Enable clamping control 
 Disable automatic PGA (since the CVBS is coming from the tuner) 
 Set input mode to CVBS on channel 4 with SIF audio input enabled 
 Set input to Y on Channe1, C on Channel 3 
 PGA in automatic mode 
 Enable clamping control 
 ----------------------------------------------------------------------- 
 0=disable, 1=SIF 
	 Note that this function needs to be used in conjunction with setting
 The caller asked for a mode we don't currently support 
 Load the Audio Decoder Filter Coefficients 
 Set the volume 
 Not sure what this does 
 Setup the audio mode to stereo DBX 
 Start the audio processing module 
 Set the audio frequency to 48 KHz 
 Set the I2S parameters (WS, LSB, mode, sample rate 
 Enable the I2S output 
 ----------------------------------------------------------------------- 
 ----------------------------------------------------------------------- 
		
		  Clear out any state associated with the digital side of the
		  chip, so that when it gets powered back up it won't think
		  that it is already tuned
		 This does not completely power down the device
 Interrogate the decoder to see if we are getting a real signal 
 ----------------------------------------------------------------------- 
 ----------------------------------------------------------------------- 
 Check if the adapter supports the needed features 
 allocate memory for the internal state 
 new demod instance 
 existing demod instance 
 Jam open the i2c gate to the tuner 
 SPDX-License-Identifier: GPL-2.0-or-later
    Montage Technology TS2020 - Silicon Tuner driver
    Copyright (C) 2009-2012 Konstantin Dimitrov <kosio.dimitrov@gmail.com>
    Copyright (C) 2009-2012 TurboSight.com
 in kHz 
 i2c details 
 LO output divider switch frequency 
 actual used LO frequency 
 XXX: probably wrong 
 stop statistics polling 
 Initialise v5 stats here 
 Start statistics polling by invoking the work function 
	
	  Integer-N PLL synthesizer
	  kHz is used for all calculations to keep calculations within 32-bit
 select LO output divider 
 Tuner RF 
 FIXME: ~always too wide filter 
 Zero-IF 
  Get the tuner gain.
  @fe: The front end for which we're determining the gain
  @v_agc: The voltage of the AGC from the demodulator (0-2600mV)
  @_gain: Where to store the gain (in 0.001dB units)
  Returns 0 or a negative error code.
 Read the RF gain 
 Read the baseband gain 
 gain in range -19600 to -116850 in units of 0.001dB 
 gain in range -47320 to -158950 in units of 0.001dB 
  Get the AGC information from the demodulator and use that to calculate the
  tuner gain.
 Read the AGC PWM rate from the demodulator 
  Gather statistics on a regular basis
  Read TS2020 signal strength in v3 format.
 Calculate the signal strength based on the total gain of the tuner 
 0%: no signal or weak signal 
 0% - 60%: weak signal 
 60% - 90%: normal signal 
 90% - 99%: strong signal 
 This is only used by ts2020_probe() so can be on the stack 
  We implement own regmap locking due to legacy DVB attach which uses frontend
  gate control callback to control I2C bus access. We can open  close gate and
  serialize whole open  I2C-operation  close sequence at the same.
 create regmap 
 check if the tuner is there 
 sleep 
 stop statistics polling 
 SPDX-License-Identifier: GPL-2.0-or-later
   Samsung s5h1432 DVB-T demodulator driver
   Copyright (C) 2009 Bill Liu <Bill.Liu@Conexant.com>
 configuration settings 
 Register [0x2E] bit 3:2 : 8MHz = 0; 7MHz = 1; 6MHz = 2 
 Talk to the demod, set the FEC, GUARD, QAM settings etc 
current_frequency = p->frequency; 
state->current_frequency = p->frequency; 
fe->ops.tuner_ops.set_params(fe); 
Soft Reset chip
fe->ops.tuner_ops.set_params(fe); 
Soft Reset chip
Set VSB mode as default, this also does a soft reset 
Initialize registers 
 s5h1432_writereg(state, S5H1432_I2C_TOP_ADDR, 0xf4, 0xa1); 
For NXP tuner
Set 3.3MHz as default IF frequency 
 Set reg 0x1E to get the full dynamic range 
 Mode setting in demod 
 Serial mode 
 Soft Reset chip 
 allocate memory for the internal state 
 setup the state 
 create dvb_frontend 
 SPDX-License-Identifier: GPL-2.0-or-later
    Conexant cx24123cx24109 - DVB QPSK Satellite demodtuner driver
    Copyright (C) 2005 Steven Toth <stoth@linuxtv.org>
    Support for KWorld DVB-S 100 by Vadim Catana <skystar@moldova.cc>
    Support for CX24123CX24113-NIM by Patrick Boettcher <pb@linuxtv.org>
 Some PLL specifics for tuning 
 The DemodTuner can't easily provide these, we cache them 
 Various tuner defaults need to be established for a given symbol rate Sps 
		 the specs recommend other values for VGA offsets,
 0.41 V 
 0.90 V 
 2.70 V 
  Various tuner defaults need to be established for a given frequency kHz.
  fixme: The bounds on the bands do not match the doc in real life.
  fixme: Some of them have been moved, other might need adjustment.
 band 1 
 band 2 
 band 3 
 band 4 
 band 5 
 band 6 
 band 7 
 band 8 
 band 9 
 Reset system 
 Clear reset 
 QPSK, DVB, Auto Acquisition (default) 
 MPEG 
 MPEG 
 MPEG (default) 
 Freq search start point (default) 
 Demodulator sample gain (default) 
 Force driver to shift until the maximum (+-10 MHz) 
 Default non-inverted, FEC 34 (default) 
 FEC search mask (all supported codes) 
 Default search inversion, no repeat (default) 
 Enable reading of frequency 
 Enable EsNO Ready Counter 
 Enable error counter 
 Tuner burst clock rate = 500KHz 
 Tuner burst mode, word length = 0x15 
 Enable FILTERV with positive pol., DiSEqC 2.x off 
 DiSEqC LNB_DC off 
 DiSEqC Parameters (default) 
 DiSEqC Tone Frequency (default) 
 DiSEqC Message (0x2c - 0x31) 
 DiSEqC Parameters (default) 
 Interrupts off (0x33 - 0x34) 
 DiSEqC Tone Amplitude (default) 
 DiSEqC Parameters (default) 
 DiSEqC Parameters (default) 
 Enable AGC accumulator (for signal strength) 
 Constellation (default) 
 Symbol count (default) 
 Symbol rate estimator on (default) 
 Error Counter = Viterbi BER 
 Error Counter Window (default) 
 Acquisition AFC Expiration window (default is 0x10) 
 Non-DCII symbol clock 
 printk(KERN_DEBUG "wr(%02x): %02x %02x\n", i2c_addr, reg, data); 
 printk(KERN_DEBUG "rd(%02x): %02x %02x\n", i2c_addr, reg, b); 
 Set the soft decision threshold 
 this can happen when there's no lock 
 Approximation of closest integer of log2(ab). It actually gives the
  check if symbol rate is within limits 
	 choose the sampling rate high enough for the required operation,
 SYSSymbolRate[21:0] = (srate << 23)  sample_rate 
 also set the demodulator sample gain 
  Based on the required frequency and symbolrate, the tuner AGC has
  to be configured and the correct band selected.
  Calculate those values.
 Defaults for low freq, low rate 
	 For the given symbol rate, determine the VCA, VGA and
 determine the band to use 
 determine the charge pump current 
 Determine the NA dividers for the requested lband freq (in kHz). 
	 Note: the reference divider R=10, frequency is in KHz,
	 control bits 11, refdiv 11, charge pump polarity 1,
  Tuner data is 21 bits long, must be left-aligned in data.
  Tuner cx24109 is written through a dedicated 3wire interface
  on the demod chip.
 align the 21 bytes into to bit23 boundary 
 Reset the demod pll word length to 0x15 bits 
 write the msb 8 bits, wait for the send to be completed 
 send another 8 bytes, wait for the send to be completed 
	 send the lower 5 bits of this byte, padded with 3 LBB,
 Trigger the demod to configure the tuner 
 Write the new VCOVGA 
 Write the new bandselect and pll args 
 set the FILTUNE voltage 
  0x23:
     [7:7] = BTI enabled
     [6:6] = I2C repeater enabled
     [5:5] = I2C repeater start
     [0:0] = BTI start
 mode == 1 -> i2c-repeater, 0 -> bti 
 Configure the demod to a good set of defaults 
 Set the LNB polarity 
 already handled in cx88-dvb 
 wait for diseqc queue to become ready (or timeout) 
 stop continuous tone if enabled 
 wait for diseqc queue ready 
 select tone mode 
 wait for diseqc message to finish sending 
 restart continuous tone if enabled 
 stop continuous tone if enabled 
 wait for diseqc queue ready 
 select tone mode 
 restart continuous tone if enabled 
 Phase locked 
 Reed-Solomon Status 
Full Sync 
  Configured to return the measurement of errors in blocks,
  because no UCBLOCKS value is available, so this value doubles up
  to satisfy both measurements.
	 The true bit error rate is this value divided by
 larger = better 
	 Inverted raw EsN0 count, totally bogus but better than the
 Enable automatic acquisition and reset cycle 
 wait for diseqc queue ready 
 this repeater closes after the first stop 
 allocate memory for the internal state 
 setup the state 
 check if the demod is there 
 create dvb_frontend 
 create tuner i2c adapter 
 SPDX-License-Identifier: GPL-2.0-or-later
     Support for LG Electronics LGDT3304 and LGDT3305 - VSBQAM
     Copyright (C) 2008, 2009, 2010 Michael Krufky <mkrufky@linuxtv.org>
     LGDT3304 support by Jarod Wilson <jarod@redhat.com>
 ------------------------------------------------------------------------ 
 FIXME: verify & document the LGDT3304 registers 
 ------------------------------------------------------------------------ 
 ------------------------------------------------------------------------ 
		 FIXME: investigate optimal ifbw & rfbw values for the
 (state->cfg->demod_chip == LGDT3305) 
 rf agc loop filter bandwidth 
 if agc loop filter bandwidth 
 control agc function 
 ------------------------------------------------------------------------ 
 ------------------------------------------------------------------------ 
 hold in software reset while sleeping 
 tristate the IF-AGC pin 
 tristate the RF-AGC pin 
 disable vsbqam module 
 disable adc module 
 reg 0x030d is 3304-only... seen in vsb and qam usbsnoops... 
 lgdt3305_mpeg_mode_polarity calls lgdt3305_soft_reset 
 low if 
 lgdt3305_mpeg_mode_polarity calls lgdt3305_soft_reset 
 ------------------------------------------------------------------------ 
 signal bit is unreliable on the DT3304 in QAM mode 
 ------------------------------------------------------------------------ 
 borrowed from lgdt330x.c 
 no signal 
		 Negative SNR, which is possible, but realisticly the
		demod will lose lock before the signal gets this bad.  The
 noise value 
 per-modulation SNR calculation constant 
 Use Phase Tracker Mean-Square Error Register 
 SNR for ranges from -13.11 to +44.08 
 log10(2532^2)2^24 
 Use Equalizer Mean-Square Error Register 
 SNR for ranges from -16.12 to +44.08 
 log10(2532^2)2^24 
 log10(688128)2^24 and log10(696320)2^24 
 report SNR in dB  10 
	 borrowed from lgdt330x.c
	 
	  Calculate strength from SNR up to 35dB
	  Even though the SNR can go higher than 35dB,
	  there is some comfort factor in having a range of
	  strong signals that can show at 100%
 Rather than use the 8.8 value snr, use state->snr which is 8.24 
 scale the range 0 - 352^24 into 0 - 65535 
 ------------------------------------------------------------------------ 
 verify that we're talking to a lg dt33045 
 SPDX-License-Identifier: GPL-2.0-or-later
  Sony CXD2820R demodulator driver
  Copyright (C) 2010 Antti Palosaari <crope@iki.fi>
 6 MHz 
 7 MHz 
 8 MHz 
 6 MHz 
 7 MHz 
 8 MHz 
 program tuner 
 tune stops BER counter 
 program IF frequency 
 Lock detection 
 Signal strength 
 Scale value to 0x0000-0xffff 
 CNR 
 BER 
 SPDX-License-Identifier: GPL-2.0-or-later
  Linux-DVB Driver for DiBcom's DiB0090 base-band RF Tuner.
  Copyright (C) 2005-9 DiBcom (http:www.dibcom.fr)
  This code is more or less generated from another driver, please
  excuse some codingstyle oddities.
 not in the 0x24 reg, only in 0x1b 
 Calibration defines 
 Use those defines to identify SOC version 
 else use thos ones to check 
 Single 90908096 
 Single Sband 
 Dual diversity VHF-UHF-LBAND 
 Dual diversity 29098 CBAND-UHF-LBAND-SBAND 
 for every frequency less than or equal to that field: this information is correct 
 for every frequency less than or equal to that field: this information is correct 
 in dB 
 take-over-point: where to split between bb and rf gain 
 keeps the currently programmed gain 
 new binary search 
 for channel monitoring 
 for the software AGC ramps 
 for the captrimdc-offset search 
 for the I2C transfer 
 for the I2C transfer 
 without PLL lock info 
 without PLL lock info 
 PLL, DIG_CLK and CRYSTAL remain 
 adcClkOutRatio=8->7, release reset 
 Read Pll current config  
 Reconfigure PLL if current setting is different from default setting 
 Set Bypass mode 
 Set Reset Pll 
 Set new Pll configuration in bypass and reset state 
 Remove Reset Pll 
 Wait for PLL lock 
 Finally Remove Bypass mode 
 PLL, DIG_CLK and CRYSTAL remain 
 Read Pll current config  
 Reconfigure PLL if current setting is different from default setting 
 Set Bypass mode 
 Set Reset Pll 
 Set new Pll configuration in bypass and reset state 
 Remove Reset Pll 
 Wait for PLL lock 
 Finally Remove Bypass mode 
 enable dataTX in case we have been restarted in the wrong moment 
 max BB gain in 10th of dB 
 ramp_slope = 1dB of gain -> clock_ticks_per_db = clk_khz  ramp_slope -> BB_RAMP2 
 BB_RAMP3 = 26dB 
 BB_RAMP4 
 BB_RAMP5 = 29dB 
 BB_RAMP6 
 max RF gain in 10th of dB 
 ramp_slope = 1dB of gain -> clock_ticks_per_db = clk_khz  ramp_slope -> RF_RAMP2 
 ramp_max = maximum X used on the ramp 
 RF_RAMP5, LNA 1 = 8dB 
 RF_RAMP6, LNA 1 
 RF_RAMP7, LNA 2 = 7.7dB 
 RF_RAMP8, LNA 2 
 GAIN_4_1, LNA 3 = 6.8dB 
 GAIN_4_2, LNA 3 
 RF_RAMP3, LNA 4 = 6.2dB 
 RF_RAMP4, LNA 4 
 max RF gain in 10th of dB 
 ramp_slope = 1dB of gain -> clock_ticks_per_db = clk_khz  ramp_slope -> RF_RAMP2 
 ramp_max = maximum X used on the ramp 
 RF_RAMP5, LNA 1 = 10dB 
 RF_RAMP6, LNA 1 
 RF_RAMP7, LNA 2 = 0 dB 
 RF_RAMP8, LNA 2 
 GAIN_4_1, LNA 3 = 6.8dB  
 GAIN_4_2, LNA 3 
 RF_RAMP3, LNA 4 = 6.2dB  
 RF_RAMP4, LNA 4 
 max RF gain in 10th of dB 
 ramp_slope = 1dB of gain -> clock_ticks_per_db = clk_khz  ramp_slope -> RF_RAMP2 
 ramp_max = maximum X used on the ramp 
 RF_RAMP5, LNA 1 = 8dB  
 RF_RAMP6, LNA 1 
 RF_RAMP7, LNA 2 = 0 dB 
 RF_RAMP8, LNA 2 
 GAIN_4_1, LNA 3 = 6.8dB  
 GAIN_4_2, LNA 3 
 RF_RAMP3, LNA 4 = 6.2dB  
 RF_RAMP4, LNA 4 
 max RF gain in 10th of dB 
 ramp_slope = 1dB of gain -> clock_ticks_per_db = clk_khz  ramp_slope -> RF_RAMP2 
 ramp_max = maximum X used on the ramp 
 RF_RAMP3, LNA 1 = 8dB 
 RF_RAMP4, LNA 1 
 RF_RAMP5, LNA 2 = 9.5dB 
 RF_RAMP6, LNA 2 
 RF_RAMP7, LNA 3 = 10.5dB 
 RF_RAMP8, LNA 3 
 GAIN_4_1, LNA 4 = 7dB 
 GAIN_4_2, LNA 4 
 max RF gain in 10th of dB 
 ramp_slope = 1dB of gain -> clock_ticks_per_db = clk_khz  ramp_slope -> RF_RAMP2 
 ramp_max = maximum X used on the ramp 
 RF_RAMP3, LNA 1 = 14.7dB 
 RF_RAMP4, LNA 1 
 RF_RAMP5, LNA 2 = 8dB 
 RF_RAMP6, LNA 2 
 RF_RAMP7, LNA 3 = 6.8dB 
 RF_RAMP8, LNA 3 
 GAIN_4_1, LNA 4 = 11.5dB 
 GAIN_4_2, LNA 4 
 max RF gain in 10th of dB 
 ramp_slope = 1dB of gain -> clock_ticks_per_db = clk_khz  ramp_slope -> RF_RAMP2 
 ramp_max = maximum X used on the ramp 
 RF_RAMP3, LNA 1 = 14.7dB 
 RF_RAMP4, LNA 1 
 RF_RAMP5, LNA 2 = 8dB 
 RF_RAMP6, LNA 2 
 RF_RAMP7, LNA 3 = 6dB 
 RF_RAMP8, LNA 3 
 GAIN_4_1, LNA 4 = 11.5dB 
 GAIN_4_2, LNA 4 
 GENERAL PWM ramp definition for all other Krosus 
 max BB gain in 10th of dB 
 ramp_slope = 1dB of gain -> clock_ticks_per_db = clk_khz  ramp_slope -> BB_RAMP2 
 BB_RAMP3 = 21dB 
 BB_RAMP4 
 BB_RAMP5 = 29dB 
 BB_RAMP6 
 Currently unused 
 max BB gain in 10th of dB 
 ramp_slope = 1dB of gain -> clock_ticks_per_db = clk_khz  ramp_slope -> BB_RAMP2 
 BB_RAMP3 = 26dB 
 BB_RAMP4 
 BB_RAMP5 = 29dB 
 BB_RAMP6 
 max RF gain in 10th of dB 
 ramp_slope = 1dB of gain -> clock_ticks_per_db = clk_khz  ramp_slope -> RF_RAMP2 
 ramp_max = maximum X used on the ramp 
 RF_RAMP3, LNA 1 = 0dB 
 RF_RAMP4, LNA 1 
 RF_RAMP5, LNA 2 = 0dB 
 RF_RAMP6, LNA 2 
 RF_RAMP7, LNA 3 = 0dB 
 RF_RAMP8, LNA 3 
 GAIN_4_1, LNA 4 = 0dB 
 GAIN_4_2, LNA 4 
 max RF gain in 10th of dB 
 ramp_slope = 1dB of gain -> clock_ticks_per_db = clk_khz  ramp_slope -> RF_RAMP2 
 ramp_max = maximum X used on the ramp 
 RF_RAMP3, LNA 1 = 13.2dB 
 RF_RAMP4, LNA 1 
 RF_RAMP5, LNA 2 = 10.5dB 
 RF_RAMP6, LNA 2 
 RF_RAMP7, LNA 3 = 5dB 
 RF_RAMP8, LNA 3 
 GAIN_4_1, LNA 4 = 12.5dB 
 GAIN_4_2, LNA 4 
 max RF gain in 10th of dB 
 ramp_slope = 1dB of gain -> clock_ticks_per_db = clk_khz  ramp_slope -> RF_RAMP2 
 ramp_max = maximum X used on the ramp 
 RF_RAMP3, LNA 1 = 13.2dB 
 RF_RAMP4, LNA 1 
 RF_RAMP5, LNA 2 = 10.5dB 
 RF_RAMP6, LNA 2 
 RF_RAMP7, LNA 3 = 5dB 
 RF_RAMP8, LNA 3 
 GAIN_4_1, LNA 4 = 12.5dB 
 GAIN_4_2, LNA 4 
 Currently unused 
 max RF gain in 10th of dB 
 ramp_slope = 1dB of gain -> clock_ticks_per_db = clk_khz  ramp_slope -> RF_RAMP2 
 RF_RAMP3, LNA 1 = 14.1dB 
 RF_RAMP4, LNA 1 
 RF_RAMP5, LNA 2 = 11.2dB 
 RF_RAMP6, LNA 2 
 RF_RAMP7, LNA 3 = 0dB 
 RF_RAMP8, LNA 3 
 GAIN_4_1, LNA 4 = 0dB 
 GAIN_4_2, LNA 4 
 -64,-52: offset -   65 
 -52,-35: 65     -  665 
 -45,-10: 665    - 835 
 -64dB is the floor 
 TODO : DAB digital N+-1 interferer perfs : offset = 10 
 overflow 
underflow 
 use gain as a temporary variable and correct current_gain 
 overflow 
 cannot be less than 0 (only if gain_delta is less than 0 we can have current_gain < 0) 
 now split total gain to rf and bb gain 
 requested gain is bigger than rf gain limit - ACIWBD adjustment 
 high signal level -> all gains put on RF 
 software ramp 
 Start with RF gains 
 point on RF LNA1 max gain 
 Go over all amplifiers => 5RF amps + 2 BB amps = 7 amps 
 if total gain of the current amp is null or this amp is not concerned because it starts to work from an higher gain value 
 force the gain to write for the current amp to be null 
 Gain to set is higher than the high working point of this amp 
 force this amp to be full gain 
 compute the value to set to this amp because we are somewhere in his range 
 LNA 1 reg mapping 
 LNA 2 reg mapping 
 LNA 3 reg mapping 
 LNA 4 reg mapping 
 CBAND LNA reg mapping 
 BB gain 1 reg mapping 
 BB gain 2 reg mapping 
 go to next gain bloc 
 When RF is finished, start with BB 
 point on BB gain 1 max gain 
 Write the amplifier regs 
 we want the boost if the gain is higher that 50dB 
 we want the boost if the gain is higher that 50dB 
 default baseband config 
 reset the AGC 
 rf_ramp = &rf_ramp_pwm_vhf_socs;  
 activate the ramp generator using PWM control 
 Set fast servo cutoff to start AGC; 0 = 1KHz ; 1 = 50Hz ; 2 = 150Hz ; 3 = 50KHz ; 4 = servo fast
 0 gain by default 
 in case of CBAND tune reduce first the lt_gain2 before adjusting the RF gain 
 reduce in 3 steps from 7 to 0 
 calc the adc power 
 included in [0:-700] 
 quickly go to the correct range of the ADC power 
 cap value = 63 : narrow BB filter : Fc = 1.8MHz 
0 = 1KHz ; 1 = 150Hz ; 2 = 50Hz ; 3 = 50KHz ; 4 = servo fast 
 everything higher than or equal to CT_AGC_STOP means tracking 
 10ms interval 
 apply gain 
 Remove the redundancy  
 Load the BB_2 
 it is P1B - reset is already done 
 charge pump current = 0 
 Update the efuse : Only available for KROSUS > P1C  and SOC as well
 Congigure in function of the crystal 
 enable iq-offset-calibration and wbd-calibration when tuning next time 
 Turns to positive 
 Turns to negative 
 Step1 BB gain1= 26 with boost 1, gain 2 = 0 
 Step 2 BB gain 1 = 26 with boost = 1 & gain 2 = 29 
 Step1 BB gain1= 26 with boost 1, gain 2 = 0 
 addr ; trim reg offset ; pga ; CTRL_BB1 value ; i or q 
 Step 2 BB gain 1 = 26 with boost = 1 & gain 2 = 29 
 force vcm2 = 0.8V 
 the LNA AND LO are off 
 shutdown lna and lo 
 found an offset 
 first turn for this frequency 
 Look for a change of Sign in the Adc_diff.min_adc_diff is used to STORE the setp N-1 
 stop search when the delta the sign is changing and Steps =15 and Step=0 is force for continuance 
 the minimum was what we have seen in the step before 
 done 
 reset done -> real tuning can now begin 
 the WBD calibration has already been done 
 wait for the WBDMUX to switch and for the ADC to sample 
 reset done -> real tuning can now begin 
 be sure that we have the right bb-filter 
 = 0x6008 : vcm3_trim = 1 ; filter2_gm1_trim = 8 ; filter2_cutoff_freq = 0 
 0 = 1KHz ; 1 = 50Hz ; 2 = 150Hz ; 3 = 50KHz ; 4 = servo fast 
 attenuator_ibias_tri = 2 ; input_stage_ibias_tr = 1 ; nc = 11 ; ext_gm_trim = 1 ; obuf_ibias_trim = 4 ; filter13_gm2_ibias_t = 15 
 22 = cap_value 
 = 0xabcd : attenuator_ibias_tri = 2 ; input_stage_ibias_tr = 2 ; nc = 11 ; ext_gm_trim = 1 ; obuf_ibias_trim = 4 ; filter13_gm2_ibias_t = 13 
 prepare a complete captrim 
 we are already tuned to this frequency - the configuration is correct  
 do a minimal captrim even if the frequency has not changed 
 MERGE for all krosus before P1G 
 Just for 8090P SOCS where auto captrim HW bug : TO CHECK IN ACI for SOCS !!! if 400 for 8090p SOC => tune issue !!! 
 this step is only used by krosus < P1G 
write the final cptrim config 
 wait for the WBDMUX to switch and for the ADC to sample 
 write back original WBDMUX 
 1 1 1 1 0000 0 0 1 
 1ms is the default delay most of the time 
 VCO 
 Default values for FG                                 
 from these are needed :                               
 Cp,HFdiv,VCOband,SD,Num,Den,FB and REFDiv             
 in any case we first need to do a calibration if needed 
 deactivate DataTX before some calibrations 
 Activate DataTX in case a calibration has been done before 
 if soc and AGC pwm control, disengage mux to be able to RW access to 0x01 register to set the right filter (cutoff_freq_select) during the tune sequence, otherwise, SOC SERPAR error when accessing to 0x01 
 in ISDB-T 1seg we shift tuning frequency 
 Use the CBAND input for all band 
 Use the CBAND input for all band under UHF 
 CBAND tuner version for VHF 
 Force CBAND 
 Look for the interval 
			 external loop filter, otherwise:
			  lo5 = (0 << 15) | (0 << 12) | (0 << 11) | (3 << 9) | (4 << 6) | (3 << 4) | 4;
 Bias is done automatically in P1G 
 bit 15 is the split to the slave, we do not do it here 
 captrim search now 
 Warning : because of captrim cal, if you change this step, change it also in _cal.c file because it is the step following captrim cal state machine 
 1 1 1 1 0000 0 0 1 
 initialize the lt gain register 
		
		  Despite dib0090_tune returns time at a 0.1 ms range,
		  the actual sleep time depends on CONFIG_HZ. The worse case
		  is when CONFIG_HZ=100. In such case, the minimum granularity
		  is 10ms. On some real field tests, the tuner sometimes don't
		  lock when this timer is lower than 10ms. So, enforce a 10ms
		  granularity and use usleep_range() instead of msleep().
 SPDX-License-Identifier: GPL-2.0
 Driver for LNB supply and control IC STMicroelectronics LNBH29
 Copyright (c) 2018 Socionext Inc.
  struct lnbh29_priv - LNBH29 driver private data
  @i2c:         Pointer to the I2C adapter structure
  @i2c_address: I2C address of LNBH29 chip
  @config:      Registers configuration
                offset 0: 1st register address, always 0x01 (DATA)
                offset 1: DATA register value
 Min: 13.188V, Typ: 13.667V, Max:14V 
 Min: 18.158V, Typ: 18.817V, Max:19.475V 
 Soft-start time (Vout 0V to 18V) is Typ. 6ms. 
 SPDX-License-Identifier: GPL-2.0-or-later
   Driver for the Integrant ITD1000 "Zero-IF Tuner IC for Direct Broadcast Satellite"
   Copyright (c) 2007-8 Patrick Boettcher <pb@linuxtv.org>
 Max transfer size done by I2C transfer functions 
 don't write more than one byte with flexcop behind 
 itd_dbg("wr %02x: %02x\n", reg, v[0]); 
 ugly flexcop workaround 
 see gcc.gnu.orgbugzillashow_bug.cgi?id=81715 
 PLLFH 
 BBGVMIN 
 not sure what is that ? - starting to download the table 
 this is intentional. 
 reserved bit again (reset ?) 
 RFTR, RFST1 - RFST9 
 Compute the factional part times 1000 
 PLLNH 
 Register does not change 
 Bits [7:6] do not change 
 No such regsister defined 
 No such regsister defined 
 No such regsister defined 
 No such regsister defined 
 SPDX-License-Identifier: GPL-2.0-or-later
  lnbp21.c - driver for lnb supply and control ic lnbp21
  Copyright (C) 2006, 2009 Oliver Endriss <o.endriss@gmx.de>
  Copyright (C) 2009 Igor M. Liplianin <liplianin@netup.ru>
  the project's page is at https:linuxtv.org
 LNBP power off 
 free data 
 default configuration 
 bits which should be forced to '1' 
 bits which should be forced to '0' 
 detect if it is present or not 
 install release callback 
 override frontend ops 
22kHz logic controlled by demod
 SPDX-License-Identifier: GPL-2.0-or-later
    Conexant cx24116cx24118 - DVBSS2 Satellite demodtuner driver
    Copyright (C) 2006-2008 Steven Toth <stoth@hauppauge.com>
    Copyright (C) 2006-2007 Georg Acher
    Copyright (C) 2007-2008 Darron Broad
	March 2007
	    Fixed some bugs.
	    Added diseqc support.
	    Added corrected signal strength support.
	August 2007
	    Sync with legacy version.
	    Some clean ups.
    Copyright (C) 2008 Igor Liplianin
	September, 9th 2008
	    Fixed locking on high symbol rates (>30000).
	    Implement MPEG initialization parameter.
	January, 17th 2009
	    Fill set_voltage with actually control voltage code.
	    Correct set tone to not affect voltage.
 known registers 
 command args 0x00..0x1e 
 execute command 
 FW or multipurpose mailbox? 
 reset status > 0     
 signal low           
 signal high  status 
 configured fec (not tuned) or actual FEC (tuned) 1=12 2=23 etc 
 FECSTATUS bits 
 mask to determine configured fec (not tuned) or actual fec (tuned) 
 Select DVB-S demodulator, else DVB-S2 
 Unknownunused 
 Pilot mode requested when tuning else always reset when tuned 
 arg buffer size 
 rolloff 
 pilot bit 
 signal status 
 toneburst never sent 
 toneburst cached     
 message cached       
 arg offset for DiSEqC 
 unknown value=2 
 unknown value=0 
 unknown value=0 
 DiSEqC burst 
 DiSEqC tone burst 
 SNR measurements 
 Formerly CMD_SEND_DISEQC 
 Unknown 
 The DemodTuner can't easily provide these, we cache them 
 Demod values 
 Basic commands that are sent to the firmware 
 Bulk byte writes to a single I2C address, for 32k firmware load 
  modfec (modulation and FEC)
  ===========================
  MOD          FEC             maskval    standard
  ----         --------        ----------- --------
  QPSK         FEC_1_2         0x02 0x02+X DVB-S
  QPSK         FEC_2_3         0x04 0x02+X DVB-S
  QPSK         FEC_3_4         0x08 0x02+X DVB-S
  QPSK         FEC_4_5         0x10 0x02+X DVB-S (?)
  QPSK         FEC_5_6         0x20 0x02+X DVB-S
  QPSK         FEC_6_7         0x40 0x02+X DVB-S
  QPSK         FEC_7_8         0x80 0x02+X DVB-S
  QPSK         FEC_8_9         0x01 0x02+X DVB-S (?) (NOT SUPPORTED?)
  QPSK         AUTO            0xff 0x02+X DVB-S
  For DVB-S high byte probably represents FEC
  and low byte selects the modulator. The high
  byte is search range mask. Bit 5 may turn
  on DVB-S and remaining bits represent some
  kind of calibration (howwhat i do not know).
  Eg.(23) szap "Zone Horror"
  maskval = 0x04, 0x20
  status 1f | signal c3c0 | snr a333 | ber 00000098 | unc 0 | FE_HAS_LOCK
  maskval = 0x04, 0x30
  status 1f | signal c3c0 | snr a333 | ber 00000000 | unc 0 | FE_HAS_LOCK
  After tuning FECSTATUS contains actual FEC
  in use numbered 1 through to 8 for 12 .. 23 etc
  NBC=NOTNON BACKWARD COMPATIBLE WITH DVB-S (DVB-S2 only)
  NBC-QPSK     FEC_1_2         0x00, 0x04      DVB-S2
  NBC-QPSK     FEC_3_5         0x00, 0x05      DVB-S2
  NBC-QPSK     FEC_2_3         0x00, 0x06      DVB-S2
  NBC-QPSK     FEC_3_4         0x00, 0x07      DVB-S2
  NBC-QPSK     FEC_4_5         0x00, 0x08      DVB-S2
  NBC-QPSK     FEC_5_6         0x00, 0x09      DVB-S2
  NBC-QPSK     FEC_8_9         0x00, 0x0a      DVB-S2
  NBC-QPSK     FEC_9_10        0x00, 0x0b      DVB-S2
  NBC-8PSK     FEC_3_5         0x00, 0x0c      DVB-S2
  NBC-8PSK     FEC_2_3         0x00, 0x0d      DVB-S2
  NBC-8PSK     FEC_3_4         0x00, 0x0e      DVB-S2
  NBC-8PSK     FEC_5_6         0x00, 0x0f      DVB-S2
  NBC-8PSK     FEC_8_9         0x00, 0x10      DVB-S2
  NBC-8PSK     FEC_9_10        0x00, 0x11      DVB-S2
  For DVB-S2 low bytes selects both modulator
  and FEC. High byte is meaningless here. To
  set pilot, bit 6 (0x40) is set. When inspecting
  FECSTATUS bit 7 (0x80) represents the pilot
  selection whilst not tuned. When tuned, actual FEC
  in use is found in FECSTATUS as per above. Pilot
  value is reset.
 A table of modulation, fec and configuration bytes for the demod.
  Not all S2 mmodulation schemes are support and not all rates with
  a scheme are support. Especially, no auto detect when in S2 mode.
 In DVBS mode this is used to autodetect 
 Passed to the firmware to indicate mode selection 
 QPSK. For unknown rates we set hardware to auto detect 0xfe 0x30 
mod   fec       mask  val 
 00000010 00101110 
 00000100 00101111 
 00001000 00110000 
 000?0000 ?        
 00100000 00110001 
 0?000000 ?        
 10000000 00110010 
 0000000? ?        
 NBC-QPSK 
 8PSK 
   `val' can be found in the FECSTATUS register when tuning.
   FECSTATUS will give the actual FEC in use if tuning was successful.
  check if symbol rate is within limits 
 Load firmware 
 request the firmware, this will block until loaded 
		 Make sure we don't recurse back through here
 Ensure firmware is always loaded if required 
 Take a basic firmware command structure, format it
  and forward it for processing
 Load the firmware if required 
 Write the command 
 Start execution and wait for cmd to terminate 
			 Avoid looping forever if the firmware does
 Toggle 88x SRST pin to reset demod 
 Begin the firmware load process 
 Prepare the demod, load the firmware, cleanup after load 
 Init PLL 
 Start PLL 
 Unknown 
 Unknown 
	 Split firmware to the max I2C write len and write.
 enough for 32k firmware 
 Firmware CMD 10: VCO config 
 Firmware CMD 14: Tuner config 
 Firmware CMD 13: MPEG config 
 Firmware CMD 35: Get firmware version 
 TODO Determine function and scale appropriately 
 Firmware CMD 19: Get AGC 
 SNR (0..100)% = (sig & 0xf0)  10 + (sig & 0x0f)  10  16 
 10 x Table (rounded up) 
 100% )
 The reelbox patches show the value in the registers represents
  ESNO, from 0->30db (values 0->300). We provide this value by
  default.
 Overwrite the current tuning params, we are about to tune 
 Wait for LNB 
 Wait for up to 300 ms 
 -EBUSY ? 
 Wait for LNB ready 
 Wait for voltagemin repeat delay 
 Min delay time before DiSEqC send 
 Wait for LNB ready 
 Min delay time after DiSEqC send 
 XXX determine is FW does this, see send_diseqcburst 
 Now we set the tone 
 Min delay time before DiSEqC send 
 XXX determine is FW does this, see send_diseqcburst 
 Initialise DiSEqC 
 Firmware CMD 20: LNBDiSEqC config 
 Prepare a DiSEqC command 
 DiSEqC burst 
 Unknown 
 Continuation flag? 
 DiSEqC message length 
 Command length 
 Send DiSEqC message with derived burst (hack) || previous burst 
 Validate length 
 Dump DiSEqC message 
 DiSEqC message 
 DiSEqC message length 
 Command length 
 DiSEqC toneburst 
 Message is cached 
 Message is sent without burst 
		
		  Message is sent with derived else cached burst
		 
		  WRITE PORT GROUP COMMAND 38
		 
		  0AA: E0 10 38 F0..F3
		  1BB: E0 10 38 F4..F7
		  2CA: E0 10 38 F8..FB
		  3DB: E0 10 38 FC..FF
		 
		  databyte[3]= 8421:8421
		               ABCD:WXYZ
		               CLR :SET
		 
		               WX= PORT SELECT 0..3    (X=TONEBURST)
		               Y = VOLTAGE             (0=13V, 1=18V)
		               Z = BAND                (0=LOW, 1=HIGH(22K))
 Wait for LNB ready 
 Wait for voltagemin repeat delay 
 Command 
	
	  Wait for send
	 
	  Eutelsat spec:
	  >15ms delay          + (XXX determine if FW does this, see set_tone)
	   13.5ms per byte     +
	  >15ms delay          +
	   12.5ms burst        +
	  >15ms delay            (XXX determine if FW does this, see set_tone)
 Send DiSEqC burst 
 DiSEqC burst 
 DiSEqC toneburst 
 Burst is cached 
 Burst is to be sent with cached message 
 Wait for LNB ready 
 Wait for voltagemin repeat delay 
 Command 
	
	  Wait for send
	 
	  Eutelsat spec:
	  >15ms delay          + (XXX determine if FW does this, see set_tone)
	   13.5ms per byte     +
	  >15ms delay          +
	   12.5ms burst        +
	  >15ms delay            (XXX determine if FW does this, see set_tone)
 allocate memory for the internal state 
 check if the demod is present 
 create dvb_frontend 
  Initialise or wake up device
  Power config will reset and load initial firmware if required
 Power on 
 Firmware CMD 36: Power config 
 HVR-4000 needs this 
  Put device to sleep
 Firmware CMD 36: Power config 
 Power off (Shutdown clocks) 
 dvb-core told us to tune, the tv property cache will be complete,
  it's safe for is to pull values and use them for tuning purposes.
 Only QPSK is supported for DVB-S 
 Pilot doesn't exist in DVB-S, turn bit off 
 DVB-S only supports 0.35 
		
		  NBC 8PSKQPSK with DVB-S is supported for DVB-S2,
		  but not hardware auto detection
 Not supported but emulated 
 Rolloff must be explicit 
 FEC_NONEAUTO for DVB-S2 is not supported and detected here 
 discard the 'current' tuning parameters and prepare to tune 
 This is also done in adviseacquire on HVR4000 but not on LITE 
 SetReset BW 
 Prepare a tune request 
 Frequency 
 Symbol Rate 
 Automatic Inversion 
 Modulation  FEC  Pilot 
	 We need to support pilot and non-pilot tuning in the
	  driver automatically. This is a workaround for because
	  the demod does not support autodetect.
 Reset status register 
 Tune 
		
		  Wait for up to 500 ms before retrying
		 
		  If we are able to tune then generally it occurs within 100ms.
		  If it takes longer, try a different toneburst setting.
 Toggle pilot bit when in auto-pilot 
 SetReset BW 
	
	  It is safe to discard "params" here, as the DVB core will sync
	  fe->dtv_property_cache with fepriv->parameters_in, where the
	  DVBv3 params are stored. The only practical usage for it indicate
	  that re-tuning is needed, e. g. (fepriv->state & FESTATE_RETUNE) is
	  true.
 SPDX-License-Identifier: GPL-2.0-or-later
     Support for LG2160 - ATSCMH
     Copyright (C) 2010 Michael Krufky <mkrufky@linuxtv.org>
 ------------------------------------------------------------------------ 
 ------------------------------------------------------------------------ 
 ------------------------------------------------------------------------ 
 if NOT zero IF, 6 MHz is the default 
 ------------------------------------------------------------------------ 
 FIXME: needs sanity check 
 ------------------------------------------------------------------------ 
 invalid value 
 invalid value 
 invalid value 
 invalid value 
 invalid value 
 invalid value 
 ------------------------------------------------------------------------ 
 ------------------------------------------------------------------------ 
 ------------------------------------------------------------------------ 
 #else 
 no fix needed here (as far as we know) 
 be tuned before this point 
 ------------------------------------------------------------------------ 
 ------------------------------------------------------------------------ 
 BCD 
	 borrowed from lgdt330x.c
	 
	  Calculate strength from SNR up to 35dB
	  Even though the SNR can go higher than 35dB,
	  there is some comfort factor in having a range of
	  strong signals that can show at 100%
 Rather than use the 8.8 value snr, use state->snr which is 8.24 
 scale the range 0 - 352^24 into 0 - 65535 
 ------------------------------------------------------------------------ 
 parade 1 by default 
 SPDX-License-Identifier: GPL-2.0-or-later
    Driver for STV0297 demodulator
    Copyright (C) 2004 Andrew de Quincey <adq_dvb@lidskialf.net>
    Copyright (C) 2003-2004 Dennis Noermann <dennis.noermann@noernet.de>
 this device needs a STOP between the register and data
 this device needs a STOP between the register and data
 131072 = 2^17  
 14 = 2^-2 
 8192 = 2^13 
 262144 = 218 
 1024 = 210   
 adjust
 symrate is hardcoded to 10000 
 (228)10000 
static long stv0297_get_carrieroffset(struct stv0297_state state)
{
	s64 tmp;
	stv0297_writereg(state, 0x6B, 0x00);
	tmp = stv0297_readreg(state, 0x66);
	tmp |= (stv0297_readreg(state, 0x67) << 8);
	tmp |= (stv0297_readreg(state, 0x68) << 16);
	tmp |= (stv0297_readreg(state, 0x69) & 0x0F) << 24;
	tmp = stv0297_get_symbolrate(state);
	tmp >>= 28;
	return (s32) tmp;
}
 load init table 
 freeze the counters 
 clear the counters 
 re-enable the counters 
 determine inversion dependent parameters
 clear software interrupts 
 set initial demodulation frequency 
 setup AGC 
 setup STL 
 disable frequency sweep 
 reset deinterleaver 
 ??? 
 reset equaliser 
 data comes from internal AD 
 clear phase registers 
 set parameters 
 kick off lock 
 Disable corner detection for higher QAMs 
 wait for WGAGC lock 
 wait for equaliser partial convergence 
 wait for equaliser full convergence 
 disable sweep 
 wait for main lock 
 is it still locked after that delay? 
 success!! 
 allocate memory for the internal state 
 setup the state 
 check if the demod is there 
 create dvb_frontend 
 SPDX-License-Identifier: GPL-2.0
 Socionext MN88443x series demodulator driver for ISDB-SISDB-T.
 Copyright (c) 2018 Socionext Inc.
 ISDB-S registers 
 Primary ISDB-T 
 Secondary ISDB-T (for MN884434 only) 
 ISDB-T registers 
 512  63 MHz 
 Common 
 ISDB-S 
 ISDB-T 
 Sync detection 
 Signal strength 
 CN rate 
 CNR[dB]: 10  log10(D) - 30.74  D^3 - 3 
   D = x^2  (2^15  y - x^2) 
 (2^4  D)^3 = 2^12  D^3 
 3.074  2^(12 + 24) = 211243671486 
 0.3  2^24 = 5033164 
 BER 
 Clock buffer (but not supported) or XTAL 
 Direct IF or Low IF 
 Level of IF 
 Polarity of AGC 
 Lower output level of AGC 
 Sync detection 
 Signal strength 
 CN rate 
 CNR[dB]: 10  (log10(65536  value) + 0.2) 
 intlog10(65536) = 80807124, 0.2  2^24 = 3355443 
 BER 
	
	  Chip has two I2C addresses for each satelliteterrestrial system.
	  ISDB-T uses address ISDB-S + 4, so we register a dummy client.
 SPDX-License-Identifier: GPL-2.0-or-later
  helene.c
  Sony HELENE DVB-SS2 DVB-TT2 DVB-CC2 ISDB-TS tuner driver (CXD2858ER)
  Copyright 2012 Sony Corporation
  Copyright (C) 2014 NetUP Inc.
  Copyright (C) 2014 Abylay Ospan <aospan@netup.ru>
 Terrestrial Analog 
< System-M (Japan) (IF: Fp=5.75MHz in default) 
< System-M (US)    (IF: Fp=5.75MHz in default) 
< System-M (Korea) (IF: Fp=5.9MHz in default) 
< System-BG       (IF: Fp=7.3MHz in default) 
< System-I         (IF: Fp=7.85MHz in default) 
< System-DK       (IF: Fp=7.85MHz in default) 
< System-L         (IF: Fp=7.85MHz in default) 
< System-L DASH    (IF: Fp=2.2MHz in default) 
 TerrestrialCable Digital 
< ATSC 8VSB        (IF: Fc=3.7MHz in default) 
< US QAM           (IF: Fc=3.7MHz in default) 
< ISDB-T 6MHzBW    (IF: Fc=3.55MHz in default) 
< ISDB-T 7MHzBW    (IF: Fc=4.15MHz in default) 
< ISDB-T 8MHzBW    (IF: Fc=4.75MHz in default) 
< DVB-T 5MHzBW     (IF: Fc=3.6MHz in default) 
< DVB-T 6MHzBW     (IF: Fc=3.6MHz in default) 
< DVB-T 7MHzBW     (IF: Fc=4.2MHz in default) 
< DVB-T 8MHzBW     (IF: Fc=4.8MHz in default) 
< DVB-T2 1.7MHzBW  (IF: Fc=3.5MHz in default) 
< DVB-T2 5MHzBW    (IF: Fc=3.6MHz in default) 
< DVB-T2 6MHzBW    (IF: Fc=3.6MHz in default) 
< DVB-T2 7MHzBW    (IF: Fc=4.2MHz in default) 
< DVB-T2 8MHzBW    (IF: Fc=4.8MHz in default) 
< DVB-C 6MHzBW     (IF: Fc=3.7MHz in default) 
< DVB-C 8MHzBW     (IF: Fc=4.9MHz in default) 
< DVB-C2 6MHzBW    (IF: Fc=3.7MHz in default) 
< DVB-C2 8MHzBW    (IF: Fc=4.9MHz in default) 
< DTMB             (IF: Fc=5.1MHz in default) 
 Satellite 
< ISDB-S 
< DVB-S 
< DVB-S2 
< Minimum analog terrestrial system 
< Maximum analog terrestrial system 
< Minimum digital terrestrial system 
< Maximum digital terrestrial system 
< Number of supported terrestrial broadcasting system 
< Minimum satellite system 
< Maximum satellite system 
	 < Addr:0x69 Bit[6:4] : RFVGA gain.
	  0xFF means Auto. (RF_GAIN_SEL = 1)
	 < Addr:0x69 Bit[3:0] : IF_BPF gain.
	 < Addr:0x6B Bit[3:0] : RF overload
	  RF input detect level. (FRF <= 172MHz)
	 < Addr:0x6B Bit[3:0] : RF overload
	  RF input detect level. (172MHz < FRF <= 464MHz)
	 < Addr:0x6B Bit[3:0] : RF overload
	  RF input detect level. (FRF > 464MHz)
	 < Addr:0x6C Bit[2:0] :
	  Internal RFAGC detect level. (FRF <= 172MHz)
	 < Addr:0x6C Bit[2:0] :
	  Internal RFAGC detect level. (172MHz < FRF <= 464MHz)
	 < Addr:0x6C Bit[2:0] :
	  Internal RFAGC detect level. (FRF > 464MHz)
	 < Addr:0x6D Bit[5:4] :
	  IF filter center offset.
	 < Addr:0x6D Bit[1:0] :
	  6MHzBW(0x00) or 7MHzBW(0x01)
	  or 8MHzBW(0x02) or 1.7MHzBW(0x03)
	 < Addr:0x6E Bit[4:0] :
	  5bit signed. IF offset (kHz) = FIF_OFFSET x 50
	 < Addr:0x6F Bit[4:0] :
	  5bit signed. BW offset (kHz) =
	  BW_OFFSET x 50 (BW_OFFSET x 10 in 1.7MHzBW)
	 < Addr:0x9C Bit[0]   :
	  Local polarity. (0: Upper Local, 1: Lower Local)
< SONY_HELENE_TV_SYSTEM_UNKNOWN 
 Analog 
< SONY_HELENE_ATV_MN_EIAJ   (System-M (Japan)) 
< SONY_HELENE_ATV_MN_SAP    (System-M (US)) 
< SONY_HELENE_ATV_MN_A2     (System-M (Korea)) 
< SONY_HELENE_ATV_BG        (System-BG) 
< SONY_HELENE_ATV_I         (System-I) 
< SONY_HELENE_ATV_DK        (System-DK) 
< SONY_HELENE_ATV_L         (System-L) 
< SONY_HELENE_ATV_L_DASH    (System-L DASH) 
 Digital 
< SONY_HELENE_DTV_8VSB      (ATSC 8VSB) 
< SONY_HELENE_DTV_QAM       (US QAM) 
< SONY_HELENE_DTV_ISDBT_6   (ISDB-T 6MHzBW) 
< SONY_HELENE_DTV_ISDBT_7   (ISDB-T 7MHzBW) 
< SONY_HELENE_DTV_ISDBT_8   (ISDB-T 8MHzBW) 
< SONY_HELENE_DTV_DVBT_5    (DVB-T 5MHzBW) 
< SONY_HELENE_DTV_DVBT_6    (DVB-T 6MHzBW) 
< SONY_HELENE_DTV_DVBT_7    (DVB-T 7MHzBW) 
< SONY_HELENE_DTV_DVBT_8    (DVB-T 8MHzBW) 
< SONY_HELENE_DTV_DVBT2_1_7 (DVB-T2 1.7MHzBW) 
< SONY_HELENE_DTV_DVBT2_5   (DVB-T2 5MHzBW) 
< SONY_HELENE_DTV_DVBT2_6   (DVB-T2 6MHzBW) 
< SONY_HELENE_DTV_DVBT2_7   (DVB-T2 7MHzBW) 
< SONY_HELENE_DTV_DVBT2_8   (DVB-T2 8MHzBW) 
< SONY_HELENE_DTV_DVBC_6    (DVB-C 6MHzBW) 
< SONY_HELENE_DTV_DVBC_8    (DVB-C 8MHzBW) 
< SONY_HELENE_DTV_DVBC2_6   (DVB-C2 6MHzBW) 
< SONY_HELENE_DTV_DVBC2_8   (DVB-C2 8MHzBW) 
< SONY_HELENE_DTV_DTMB      (DTMB) 
 see gcc.gnu.orgbugzillashow_bug.cgi?id=81715 
 Standby setting for CPU 
 Standby setting for internal logic block 
 Standby setting for internal logic block 
 Standby setting for CPU 
 RF switch turn to satellite 
 Disable IF signal output 
 RFIN matching in power save (Sat) reset 
 Analog block setting (0x6A, 0x6B) 
 Tuning setting for CPU (0x61) 
 Satellite mode select (0x01) 
 Clock enable for internal logic block, CPU wake-up (0x04, 0x05) 
 Setting for analog block (0x07). LOOPFILTER INTERNAL 
	 Tuning setting for analog block
	  (0x08, 0x09, 0x0A, 0x0B). LOOPFILTER INTERNAL
 Enable for analog block (0x0C, 0x0D, 0x0E). SAT LNA ON 
 POWERSAVE_TERR_RF_ACTIVE 
 Setting for LPF cutoff frequency (0x0F) 
 22MHz 
 5 <= lpf_cutoff <= 36 is valid 
 5 <= lpf_cutoff <= 36 is valid 
 RF tuning frequency setting (0x10, 0x11, 0x12) 
 FRF_L 
 FRF_M 
 FRF_H (bit[3:0]) 
 Tuning command (0x13) 
 Setting for IQOUT_LIMIT (0x14) 0.75Vpp 
 Enable IQ output (0x15) 
 mode select 
 Disable IF signal output 
 Initial setting for internal analog block (0x91, 0x92) 
 Setting for analog block 
 Setting for local polarity (0x9D) 
 Enable for analog block 
 Tuning setting for CPU 
 Setting for PLL reference divider for xtal=24MHz 
 Tuning setting for analog block 
 LT_AMP_EN should be 0 
 Setting for IFOUT_LIMIT 
 1.5Vpp 
 RF_GAIN setting 
 RF_GAIN_SEL = 1 
 IF_BPF_GC setting 
 Setting for internal RFAGC (0x6A, 0x6B, 0x6C) 
 Setting for IF frequency and bandwidth 
 IF filter center frequency offset (IF_BPF_F0) (0x6D) 
 IF filter band width (BW) (0x6D) 
 IF frequency offset value (FIF_OFFSET) (0x6E) 
 IF band width offset value (BW_OFFSET) (0x6F) 
 RF tuning frequency setting (0x70, 0x71, 0x72) 
 FRF_L 
 FRF_M 
 FRF_H (bit[3:0]) 
 Tuning command 
 Enable IF output, AGC and IFOUT pin selection (0x74) 
 power-on tuner
  call once after reset
 RFIN matching in power save (terrestrial) = ACTIVE 
 RFIN matching in power save (satellite) = ACTIVE 
 SAT_RF_ACTIVE = true, lnaOff = false, terrRfActive = true 
 mode select 
 Initial setting for internal logic block 
 0x81 - 0x94 
 xtal 16 MHz 
 xtal 24 MHz 
 4 x 25 = 100uA 
 38 x 0.25 = 9.5pF 
 REFOUT signal output 500mVpp 
 GPIO settings 
 GPIO settings 
 Clock enable for internal logic block 
 Start CPU boot-up 
 For burst-write 
 Setting for internal RFAGC 
 Setting for analog block 
 Initial setting for internal analog block 
 Setting for internal RFAGC 
 Check CPU_STTCPU_ERR 
 VCO current setting 
 Disable IF signal output 
 Standby setting for CPU 
 Standby setting for internal logic block 
 Load capacitance control setting for crystal oscillator 
 Satellite initial setting 
 SPDX-License-Identifier: GPL-2.0-or-later
  isl6421.h - driver for lnb supply and control ic ISL6421
  Copyright (C) 2006 Andrew de Quincey
  Copyright (C) 2006 Oliver Endriss
  the project's page is at https:linuxtv.org
	
	  If LNBf were not powered on, disable dynamic current limit, as,
	  according with datasheet, highly capacitive load on the output may
	  cause a difficult start-up.
 Store off status now in case future commands fail 
 On overflow, the device will try again after 900 ms (typically) 
 Re-enable dynamic current limit 
 Check if overload flag is active. If so, disable power 
 power off 
 free 
 default configuration 
 bits which should be forced to '1' 
 bits which should be forced to '0' 
 detect if it is present or not 
 install release callback 
 override frontend ops 
 SPDX-License-Identifier: GPL-2.0-only
 i2c timed out 
 no acknowledge 
 start 
 stop 
 start 
 stop 
 bit 7 = use master or not, if 0, the gate is open
 open the gate 
 close the gate 
 open the gate 
 close the gate 
 initialize the i2c-master by closing the gate 
 the first time force a select of the I2C
 initialize the i2c-master by closing the gate 
 SPDX-License-Identifier: GPL-2.0-or-later
  Driver for Infineon tua6100 pll.
  (c) 2006 Andrew de Quincey
  Based on code found in budget-av.c, which has the following:
  Compiled from various sources by Michael Hunold <michael@mihu.de>
  CI interface support (c) 2004 Olivier Gournet <ogournet@anevia.com> &
                                Andrew de Quincey <adq_dvb@lidskialf.net>
  Copyright (C) 2002 Ralph Metzler <rjkm@metzlerbros.de>
  Copyright (C) 1999-2002 Ralph  Metzler
                        & Marcus Metzler for convergence integrated media GmbH
 i2c details 
 setup register 0
 setup register 1
 register 2
	
	  The N divisor ratio (note: c->frequency is in kHz, but we
	  need it in Hz)
 Finally, calculate and store the value for A
 SPDX-License-Identifier: GPL-2.0-only
  Linux-DVB Driver for DiBcom's DiB8000 chip (ISDB-T).
  Copyright (C) 2009 DiBcom (http:www.dibcom.fr)
 #define DIB8000_AGC_FREEZE 
 for the I2C transfer 
 for DVBv5 stats 
 by default SDRAM deintlv is enabled 
 STBs with parallel gated clock
 0x0400 
 STBs with parallel continues clock
 0x0440 
 STBs with serial input
 0x0482 
 0x0500 
 e.g. USB feeding
 disable
 synchronous fread 
dvsy_off_lmod4 = 1
 sync_enable = 1; comb_mode = 2
dvsy_off_lmod4 = 0
 sync_enable = 0; comb_mode = 0
 only use the internal way - not the diversity input 
 both ways 
 only the diversity input 
 by default everything is going to be powered off 
 now, depending on the requested mode, we power on 
 power up everything in the demod 
 en_slowAdc = 1 & reset_sladc = 1 
 read access to make it works... strange ... 
 en_slowAdc = 1 & reset_sladc = 0 
			 ref = Vin1 => Vbg ; sel = Vin0 or Vin3 ;
 reset_sladc = 1 en_slowAdc = 0 
 leave the VBG voltage on
 internal 
 do the calibration 
 smpl_cfg: P_refclksel=2, P_ensmplsel=1 nodivsmpl=1 
 Force clk out pll 2 
 get back old values 
 disable PLL 
 write new system clk into P_sec_len 
 enable PLL 
 verify 
 Bandwidth change => force PLL update 
 Full PLL change only if prediv is changed 
 full update => bypass and reconfigure 
 bypass PLL 
 sad 
 ratio update => only change ratio 
 only the PLL ratio is updated. 
 reset the GPIOs 
 TODO 782 is P_gpio_od 
 reset the direction bit 
 set the new direction 
 reset the direction bit 
 set the new value 
	 auto search configuration - lock0 by default waiting
	1, 32,
 P_corm_thres Lock algorithms configuration 
 set ADC level to -16 
 P_fft_nb_to_cut
 P_coff_corthres_ ( 2k 4k 8k ) 0x2800
 P_coff_cpilthres_ ( 2k 4k 8k ) 0x2800
 P_pha3_thres
 P_cti_use_cpe, P_cti_use_prog
 P_cspu_regul, P_cspu_win_cut
 P_des_shift_work
 P_adp_regul_cnt
 P_adp_noise_cnt
 P_adp_regul_ext
 P_adp_noise_ext
 P_adp_fil
 P_2d_byp_ti_num
P_equal_thres_wgn
 P_equal_ctrl_synchro, P_equal_speedmode
 P_div_lock0_wait
p_fec_
 P_smo_mode, P_smo_rs_discard, P_smo_fifo_flush, P_smo_pid_parse, P_smo_error_discard 
 P_ctrl_corm_thres4pre_freq_inh=1
 P_ctrl_pre_freq_inh=0 
 P_ctrl_pre_freq_step=3 
 P_pre_freq_win_len=1 
because of glitches sometimes
 sram lead in, rdy 
 always leave the VBG voltage on - it consumes almost nothing but takes a long time to start 
 restart all parts 
 restart sad 
 sad
 drives 
 min drive SDRAM - not optimal - adjust 
 P_iqc_alpha_pha, P_iqc_alpha_amp, P_iqc_dcc_alpha, ...
 P_iqc_ca2 = 0; P_iqc_impnc_on = 0; P_iqc_mode = 0; 
 P_iqc_corr_inh = 0 enable IQcorr block 
 P_iqc_corr_inh = 1 disable IQcorr block 
div_cfg override for special configs
 unforce divstr regardless whether i2c enumeration was done or not 
 ber_rs_len = 3 
 P_restart_iqc & P_restart_agc
 read dyn_gain here (because it is demod-dependent and not tuner)
 AGC 
 Demod AGC loop configuration
 AGC continued 
 use default
 n_agc_global
 P_agc_force_split and P_agc_split_offset
 set power-up level: interf+analog+AGC
 bit 14 = enDemodGain 
 enable adc i & q 
AGC initialization
 wait AGC rough lock time
 wait AGC accurate lock time
 wait only AGC rough lock time
 drive host bus 2, 3, 4 
 drive host bus 5,6 
 drive host bus 7, 8, 9 
 drive host bus 10, 11 
 drive host bus 12, 13, 14 
 If the input mode is MPEG do not divide the serial clock 
 only use the internal way - not the diversity input 
 outputRate = 8 
			 Do not divide the serial clock of MPEG MUX in
 enSerialClkDiv2 == 1 ? 
 force enSerialClkDiv2 = 0 
 both ways 
 only the diversity input 
 Use Smooth block 
 Use Smooth block 
 Using Smooth block only 
			 Using Smooth block because not supported
 synchronous fread 
 write 
 read 
 write 
 get sad sel request 
 write 
 in the VGAMODE Sel are located on bit 01 
 Set the proper input 
 RW access via APB 
 RW access via SERPAR  
 LNAs and MIX are ON and therefore it is a valid configuration 
 index of the LUT 
 P_adp_regul_cnt 0.04, P_adp_noise_cnt -0.002, P_adp_regul_ext 0.02, P_adp_noise_ext -0.001 
 P_adp_regul_cnt 0.07, P_adp_noise_cnt -0.004, P_adp_regul_ext 0.02, P_adp_noise_ext -0.002 
 P_adp_regul_cnt 0.3,  P_adp_noise_cnt -0.01,  P_adp_regul_ext 0.1,  P_adp_noise_ext -0.002 
 channel estimation fine configuration 
 update ADC target depending on ana_gain 
 set -16dB ADC target for ana_gain=-1 
 set -22dB ADC target for ana_gain=0 
 All 13 segments enabled 
 ---- COFF ---- Carloff, the most robust --- 
 if not Sound Broadcasting mode : put default values for 13 segments 
 P_ctrl_corm_thres4pre_freq_inh=1, P_ctrl_pre_freq_mode_sat=1 
 P_ctrl_pre_freq_mode_sat=1, P_ctrl_pre_freq_inh=0, P_ctrl_pre_freq_step = 3, P_pre_freq_win_len=1 
 P_ctrl_pre_freq_win_len=8, P_ctrl_pre_freq_thres_lockin=6 
 P_ctrl_pre_freq_thres_lockout=4, P_small_use_tmccaccp=1 
 default value 
 default value 
 init value 
	
	  make the cpil_coff_lock more robust but slower p_coff_winlen
	  6bits; p_coff_thres_lock 6bits (for coff lock if needed)
 P_equal_noise_seg_inh 
 ADDR 1 
 P_small_coef_ext_enable=ISDB-Tsb, P_small_narrow_band=ISDB-Tsb, P_small_last_seg=13, P_small_offset_num_car=5 
 ---- SMALL ---- 
 1-seg 
 DQPSK 
 QPSK or QAM 
 3-segments 
 DQPSK on central segment 
 DQPSK on external segments 
 QPSK or QAM on external segments 
 QPSK or QAM on central segment 
 DQPSK on external segments 
 QPSK or QAM on external segments 
 1-seg 
 DQPSK 
 QPSK or QAM 
 3-segments 
 DQPSK on central segment 
 DQPSK on external segments 
 QPSK or QAM on external segments 
 QPSK or QAM on central segment 
 DQPSK on external segments 
 QPSK or QAM on external segments 
 1-seg 
 DQPSK 
 QPSK or QAM 
 3-segments 
 DQPSK on central segment 
 DQPSK on external segments 
 QPSK or QAM on external segments 
 QPSK or QAM on central segment 
 DQPSK on external segments 
 QPSK or QAM on external segments 
 adp_pass =1 
 pha3_force_pha_shift = 1 
 adp_pass =0 
 pha3_force_pha_shift = 0 
 3-segments 
 1-segment 
 ---- COFF ---- Carloff, the most robust --- 
 P_coff_cpil_alpha=4, P_coff_inh=0, P_coff_cpil_winlen=64, P_coff_narrow_band=1, P_coff_square_val=1, P_coff_one_seg=~partial_rcpt, P_coff_use_tmcc=1, P_coff_use_ac=1 
 P_ctrl_pre_freq_win_len=16, P_ctrl_pre_freq_thres_lockin=8 
 P_ctrl_pre_freq_thres_lockout=6, P_small_use_tmccaccp=1 
 Sound Broadcasting mode 1 seg 
 P_coff_winlen=63, P_coff_thres_lock=15, P_coff_one_seg_width = (P_mode == 3) , P_coff_one_seg_sym = (P_mode-1) 
 P_ctrl_corm_thres4pre_freq_inh=1,P_ctrl_pre_freq_mode_sat=1, P_ctrl_pre_freq_inh=0, P_ctrl_pre_freq_step = 5, P_pre_freq_win_len=4 
 Sound Broadcasting mode 3 seg 
 P_ctrl_corm_thres4pre_freq_inh = 1, P_ctrl_pre_freq_mode_sat=1, P_ctrl_pre_freq_inh=0, P_ctrl_pre_freq_step = 4, P_pre_freq_win_len=4 
 P_2d_mode_byp=1 
 P_cspu_win_cut = 0 
 P_equal_noise_sel = 15 
 Write COFF thres 
	
	  make the cpil_coff_lock more robust but slower p_coff_winlen
	  6bits; p_coff_thres_lock 6bits (for coff lock if needed)
 P_equal_noise_seg_inh 
 P_fft_powrange = 64 
 P_fft_powrange = 32 
 P_mode 
 init mode 
 set guard 
 signal optimization parameter 
init value 
 WRITE: Mode & Diff mask 
 channel estimation fine configuration 
 update ana_gain depending on max constellation 
 ---- ANA_FE ---- 
 3-segments 
 1-segment 
 TSB or ISDBT ? apply it now 
 SMALL 
 ---- CHAN_BLK ---- 
 p_cfr_left_edge 
 p_cfr_right_edge 
 "P_cspu_left_edge" & "P_cspu_right_edge" not used => do not care 
 P_lmod4_seg_inh 
 P_pha3_seg_inh 
 P_tac_seg_inh 
 P_tmcc_seg_eq_inh 
disable equalisation of the tmcc when autosearch to be able to find the DQPSK channels. 
 P_des_seg_enabled 
 P_tmcc_seg_inh 
 P_fft_powrange = 32 
 ---- TMCC ---- 
 Quantif of "P_tmcc_dec_thres_?k" is (0, 5+mode, 9); 
 Threshold is set at 14 of max power. 
 P_tmcc_dec_thres_2k 
 P_tmcc_dec_thres_4k 
 P_tmcc_dec_thres_8k 
dib8000_write_word(state, 287, (1 << 13) | 0x1000 ); 
 ---- PHA3 ---- 
 p_2d_hspeed_thr0 
 P_search_end0 wait time 
 P_search_end0 start addr 
 P_ctrl_pha_off_max default values 
 P_ana_gain to 0 
 P_mode = 0, P_restart_search=1 
 P_guard = 0 
 P_lock0_mask = 0 
 P_lock1_mask = 0 
 P_lock2_mask = 0 
 P_search_list=16, P_search_maxtrial=0 
 time in ms configure P_search_end0 P_search_end1 P_search_end2 
 time in ms configure P_search_end0 P_search_end1 P_search_end2 
 P_search_rstst = 200 
 P_search_rstend = 400 
 P_search_checkst 
 P_corm_alpha = 0 
 P_corm_alpha = 3 
 P_search_param_max = 2 
 P_search_param_select = (1 | 1<<4 | 1 << 8) 
 P_restart_ccg = 1 
 P_restart_ccg = 0 
 P_restart_search = 0; 
 set lock_mask values 
 tmcc_dec_lock, tmcc_sync_lock, tmcc_data_lock, tmcc_bch_uncor 
 set lock_mask wait time values 
 time in ms configure P_search_end0 P_search_end1 P_search_end2 
 time in ms configure P_search_end0 P_search_end1 P_search_end2 
 P_search_param_max = 3 
 P_search_param_select = 0xf; look for the 4 different guard intervals 
 reset the INT. n_irq_pending 
 choose the right list, in sb, always do everything 
 P_mode = 1 to have autosearch start ok with mode2 
 P_mode = 1 
 set lock_mask values 
 set lock_mask wait time values 
 time in ms configure P_search_end0 P_search_end1 P_search_end2 
 time in ms configure P_search_end0 P_search_end1 P_search_end2 
 reset the INT. n_irq_pending 
 failed 
 succeeded 
 still pending
 start P_restart_chd : channel_decoder 
 stop P_restart_chd : channel_decoder 
 IF tuner 
 Max dds offset is the half of the demod freq 
 P_dds_invspec 
 low if tuner 
 apply dds offset now 
 P_timf_alpha = (11-P_mode), P_corm_alpha=6, P_corm_thres=0x40 
 P_ctrl_pha_off_max=3   P_ctrl_sfreq_inh =0  P_ctrl_sfreq_step = (10-P_mode)  
 Sound Broadcasting mode 3 seg 
 P_timf_alpha = (10-P_mode), P_corm_alpha=6, P_corm_thres=0x60 
 P_ctrl_pha_off_max=3   P_ctrl_sfreq_inh =0  P_ctrl_sfreq_step = (9-P_mode)  
 13-seg start conf offset loop parameters 
 P_timf_alpha = (9-P_mode, P_corm_alpha=6, P_corm_thres=0x80 
 P_ctrl_pha_off_max=3   P_ctrl_sfreq_inh =0  P_ctrl_sfreq_step = 9  
 Sound Broadcasting mode 1 seg 
 P_timf_alpha = (13-P_mode) , P_corm_alpha=6, P_corm_thres=0x40
 Sound Broadcasting mode 3 seg 
 P_timf_alpha = (12-P_mode) , P_corm_alpha=6, P_corm_thres=0x60 
 13 seg 
 P_timf_alpha = 8 , P_corm_alpha=6, P_corm_thres=0x80 
 P_dvsy_sync_wait - reuse mode 
 add 50% SFN margin + compensate for one DVSY-fifo 
 add 50% SFN margin + compensate for DVSY-fifo 
 P_dintlv_delay_ram = 7 because of MobileSdram 
 force restart P_restart_sdram 
 release restart P_restart_sdram 
  is_manual_mode - Check if TMCC should be used for parameters settings
  @c:	struct dvb_frontend_properties
  By default, TMCC table should be used for parameter settings on most
  usercases. However, sometimes it is desirable to lock the demod to
  use the manual parameters.
  On manual mode, the current dib8000_tune state machine is very restrict:
  It requires that both per-layer and per-transponder parameters to be
  properly specified, otherwise the device won't lock.
  Check if all those conditions are properly satisfied before allowing
  the device to use the manual frequency lock mode.
 Use auto mode on DVB-T compat mode 
	
	  Transmission mode is only detected on auto mode, currently
	
	  Guard interval is only detected on auto mode, currently
	
	  If no layer is enabled, assume auto mode, as at least one
	  layer should be enabled
	
	  Check if the per-layer parameters aren't auto and
	  disable a layer if segment count is 0 or invalid.
	
	  Userspace specified a wrong number of segments.
	 	fallback to auto mode.
 Everything looks ok for manual mode 
 1 symbol duration (in 100us unit) delay most of the time 
 30 
 force chan dec in restart 
 Layer monitor 
 The channel struct is unknown, search it ! 
 we already know the channel struct so TUNE only ! 
 51 
 31 
 fail 
 else we are done here 
 Success 
 signal to the upper layer, that there was a channel found and the parameters can be read 
 Autosearch FFT max correlation endded 
 searching for the correct FFT 
 dprintk("corm fft: %u %u %u\n", corm[0], corm[1], corm[2]); 
 dprintk("Autosearch FFT has found Mode %d\n", max_value + 1); 
 searching for the correct guard interval 
 dprintk("guard interval found=%i\n", state->found_guard); 
 the demod should never be in this state 
 else we are done here 
 33 
 setting the known channel parameters here 
 (34) 
 P_coff_winlen ? 
 coff should lock over P_coff_winlen ofdm symbols : give 3 times this length to lock 
 (35) 
 coff-lock and off_cpil_lock achieved 
 we achieved a coff_cpil_lock - it's time to update the timf 
 2 times lmod4_win_len + 10 symbols (pipe delay after coff + nb to compute a 1st correlation) 
 goto check for diversity input connection 
 (36)  if there is an input (diversity) 
 if there is a diversity fe in input and this fe is has not already failed : wait here until this this fe has succedeed or failed 
 Something is locked on the input fe 
 go for mpeg 
 fe in input failed also, break the current one 
 else we are done here ; step 8 will close the loops and exit 
 start viterbi chandec 
 start viterbi chandec 
 else we are done here ; step 8 will close the loops and exit 
 37 
 lmod4_lock 
 wait for 14 symbols 
 goto check for diversity input connection 
 38 
 start viterbi chandec 
 mpeg will never lock on this condition because init_prbs is not set : search for it !
 39 
 fe capable of deinterleaving : esram 
 defines timeout for mpeg lock depending on interleaver length of longest layer 
 valid layer 
 locks is the tmp local variable name 
 because of diversity sync 
 give the mpeg lock 800ms if sram is present 
 40 
 mpeg lock : check the longest one 
 signal to the upper layer, that there was a channel found and the parameters can be read 
 continue to try init prbs autosearch 
 we are done mpeg of the longest interleaver xas not locking but let's try if an other layer has locked in the same time 
 41 : init prbs autosearch 
 tuning is finished - cleanup the demod 
 (42) 
 at least one symbol 
	
	  If called to early, get_frontend makes dib8000_tune to either
	  not lock or not sync. This causes dvbv5-scandvbv5-zap to fail.
	  So, let's just return if frontend 0 has not locked.
 synchronize the cache with the other frontends 
 Interleaving can be 0, 1, 2 or 4 
 synchronize the cache with the other frontends 
 synchronization of the cache 
 set output mode and diversity input 
 tune the tuner 
 turn off the diversity of the last chip 
 start up the AGC 
		
		  Despite dib8000_agc_startup returns time at a 0.1 ms range,
		  the actual sleep time depends on CONFIG_HZ. The worse case
		  is when CONFIG_HZ=100. In such case, the minimum granularity
		  is 10ms. On some real field tests, the tuner sometimes don't
		  lock when this timer is lower than 10ms. So, enforce a 10ms
		  granularity.
 we are in autosearch 
 searching 
 we read the channel parameters from the frontend which was successful 
 and for all frontend except the successful one 
 tuning is done when the master frontend is done (failed or success) 
 we need to wait for all frontends to be finished 
 set output mode 
 Equal 
 TMCC_SYNC 
 FEC MPEG 
 Viterbi Layer A 
 Viterbi Layer B 
 Viterbi Layer C 
 13 segments 
 packet error on 13 seg 
  Table to estimate signal strength in dBm.
  This table was empirically determinated by measuring the signal
  strength generated by a DTA-2111 RF generator directly connected into
  a dib8076 device (a PixelView PV-D231U stick), using a good quality
  3 meters RC6 cable and good RC6 connectors.
  The real value can actually be different on other devices, depending
  on several factors, like if LNA is enabled or not, if diversity is
  enabled, type of connectors, etc.
  Yet, it is better to use this measure in dB than a random non-linear
  percentage value, especially for antenna adjustments.
  On my tests, the precision of the measure using this table is about
  0.5 dB, with sounds reasonable enough.
 -22.5 dBm 
 -35 dBm 
 -51 dBm 
 If value is identical, no need to interpolate 
 Linear interpolation between the two (x,y) points 
 If all goes wrong, wait for 1s for the next stats 
 Estimate the period for the total bit rate 
 Get Signal strength 
 UCBBERCNR measures require lock 
 Check if time for stats was elapsed 
 Get SNR 
 Get UCB measures 
 Estimate the number of packets based on bitrate 
 Get post-BER measures 
 designated i2c address 
 sram lead in, rdy 
 sram lead in, rdy 
 start diversity to pull_down div_str - just for i2c-enumeration 
 set new i2c address and force divstart 
 unforce divstr
 deactivate div - it was just for i2c-enumeration 
	 Ensure the output mode remains at the previous default if it's
	  not specifically set by the caller.
 init 8096p tuner adapter 
 ber_rs_len = 3 
 SPDX-License-Identifier: GPL-2.0-or-later
	Intersil ISL6423 SEC and LNB Power supply controller
	Copyright (C) Manu Abraham <abraham.manu@gmail.com>
 EN = 1, VSPEN = 1, VBOT = 1 
 EN = 1, VSPEN = 1, VBOT = 0 
 EN = 0 
 EN = 1, VSPEN = 1, VTOP = 0, VBOT = 0 
 EN = 1, VSPEN = 1, VTOP = 1, VBOT = 0 
 275mA 
 ISELH = 0, ISELL = 0 
 515mA 
 ISELH = 0, ISELL = 1 
 635mA 
 ISELH = 1, ISELL = 0 
 800mA 
 ISELH = 1, ISELL = 1 
 DCL = 0 
 DCL = 1 
 SR3H = 0, SR3M = 1, SR3L = 0 
 SR4H = 0, SR4M = 1, SR4L = 1 
 SPDX-License-Identifier: GPL-2.0-or-later
    driver for LSI L64781 COFDM demodulator
    Copyright (C) 2001 Holger Waechtler for Convergence Integrated Media GmbH
		       Marko Kohtala <marko.kohtala@luukku.com>
 private demodulator data 
	 This here is a little bit questionable because it enables
	   the automatic update of TPS registers. I think we'd need to
	   handle the IRQ from FE to update some other registers as
	   well, or at least implement some magic to tuning to correct
	 Set AFC stall for the AFC_INIT_FRQ setting, TIM_STALL for
 stall AFC 
 AFC INIT FREQ 
 AGC gain to zero in beginning 
 stall TIM 
 TIM_OFFSET_LSB 
 NOTE: this is correct in writing to address 0x00
 The coderates for FEC_NONE, FEC_4_5 and FEC_FEC_6_7 are arbitrary 
 QPSK, QAM_16, QAM_64 
 The Grundig 29504-401.04 Tuner comes with 18.432MHz crystal. 
	u32 ddfs_offset_variable = 0x6000-((1000000UL+ppm) 
			bw_tab[p->bandWidth]<<10)15625; 
 This works up to 20000 ppm, it overflows if too large ppm! 
 SPI bias calculation is slightly modified to fit in 32bit 
 will work for high ppm only... 
 Technical manual section 2.6.1, TIM_IIR_GAIN optimal values 
  clear interrupt registers... 
  dto. 
  clear interrupt registers... 
  dto. 
 VCXO locked, this criteria should be ok 
	   XXX FIXME: set up counting period (reg 0x26...0x28)
 not exact, but...
 Power down 
 Power up 
 Reset hard 
 Set tuner specific things 
 AFC_POL, set also in reset_afc 
 Use internal ADC 
 AGC loop gain, and polarity is positive 
 Internal ADC outputs two's complement 
	 With ppm=8000, it seems the DTR_SENSITIVITY will result in
	   value of 2 with all possible bandwidths and guard
l64781_writereg (state, 0x19, 0x92);
 Everything is two's complement, soft bit and CSI_OUT too 
 delay a bit after first init attempt 
 allocate memory for the internal state 
 setup the state 
	
	   the L64781 won't show up before we send the reset_and_configure()
	   broadcast. If nothing responds there is no L64781 on the bus...
 The chip always responds to reads 
 Save current register contents for bailout 
 Reading the POWER_DOWN register always returns 0 
 Turn the chip off 
 Responds to all reads with 0 
 Turn the chip on 
 Responds with register default value 
 create dvb_frontend 
 restore reg 0x3e 
	.frequency_min_hz = ???,
	.frequency_max_hz = ???,
      .symbol_rate_tolerance = ???,
 SPDX-License-Identifier: GPL-2.0-only
  drxd_hard.c: DVB-T Demodulator Micronas DRX3975D-A2,DRX397xD-B1
  Copyright (C) 2003-2007 Micronas
 range [0, ... , 1023], 1n of fullscale range 
 range [0, ... , 1023], 1n of fullscale range 
 range [0, ... , 1023], 1n of fullscale range 
 range [0, ... , 1023], 1n of fullscale range 
 range [0, ... , 1023], 1n of fullscale range 
 I2C 
 start ce 
 Store output configuration 
 CHK_ERROR(Read16(EC_OC_REG_OC_MODE_LOP__A, &ocModeLop)); 
 m_EcOcRegOcModeLop = ocModeLop; 
 Flush FIFO (byte-boundary) at fixed rate 
 Output pins to '0' 
 Force the OC out of sync 
 Magically-out-of-sync 
 Stop OC 
 Restore output configuration 
 Output pins active again 
 Start OC 
 == Mode == 
 == Settle level == 
 == MinMax == 
 == Speed == 
				
				   fastInc = default 
				   (2^(fineSpeedfineSteps))
				   => range[default...2default>
				   slowInc = default 
				   (2^(fineSpeedfineSteps))
 No OFF mode for IF control 
==== Mode ====
 Powerdown PD2, WRI source 
 enable AGC2 pin 
 Automatic control 
 Powerup PD2, AGC2 as output, TGC source 
 Settle level 
 Minmax: don't care 
 Speed: TODO 
 enable AGC2 pin 
 No RF AGC control 
 Powerdown PD2, AGC2 as output, WRI source 
 set FeAgRegAgAgcSio AGC2 (RF) as input 
			           3.3V
			   |
			   R1
			   |
			   Vin - R3 -  -- Vout
			   |
			   R2
			   |
			   GND
 We're not using Flags 
 Flags = (pSrc[0] << 8) | pSrc[1]; 
 We're not using Flags 
 u16 Flags = (pSrc[0] << 8) | pSrc[1]; 
 We're not using BlockCRC 
 u16 BlockCRC = (pSrc[0] << 8) | pSrc[1]; 
 portbridgepower down ctrl 
 Parameter check 
 Instruct HI to read n bytes 
 TODO use proper names forthese egisters 
 disable? monitor bus observe @ EC_OC 
 do inverse broadcast, followed by explicit write to HI 
 Configure PGA switch 
 PGA on 
 fine gain 
 coarse gain 
			 enable fine and coarse gain, enable AAF,
 PGA off, bypass 
 fine gain 
 coarse gain 
			 disable fine and coarse gain, enable AAF,
	
	   norm OFFSET,  MB says =2 voor 8K en =3 voor 2K waarschijnlijk
	   SC stuff
CHK_ERROR(Read16(state, EC_OC_REG_OC_MODE_LOP__A, &EcOcRegOcModeLop, 0)); 
 Don't Insert RS Byte 
 Mode = Parallel 
 Invert Data 
 EcOcRegIprInvMpg |= 0x00FF; 
 Invert Error ( we don't use the pin ) 
  EcOcRegIprInvMpg |= 0x0100; 
 Invert Start ( we don't use the pin ) 
 EcOcRegIprInvMpg |= 0x0200; 
 Invert Valid ( we don't use the pin ) 
 EcOcRegIprInvMpg |= 0x0400; 
 Invert Clock 
 EcOcRegIprInvMpg |= 0x0800; 
 EcOcRegOcModeLop =0x05; 
 TODO: why twice? 
 on A2 only 3975 available 
 Init Table selection 
 in kHz 
 Retrieve bandwidth and incr, sanity check 
		 These accesses should be AtomicReadReg32, but that
		 Compute new sysclock value
 rounding 
 Compute clock deviation in ppm 
printk(KERN_INFO "sysclockdiff=%d\n", Diff); 
 switch OFF SRMM scan in SC 
			 overrule FE_IF internal value for
 Stop relevant processors off the device 
 Stop all processors except HI & CC & FE 
 Currently unused 
			 We need to check how to
  combining enabled 
	 Handle all mirroring
	 
	  Note: ADC mirroring (aliasing) is implictly handled by limiting
	  feFsRegAddInc to 28 bits below
	  (if the result before masking is more than 28 bits, this means
	   that the ADC is mirroring.
	  The masking is in fact the aliasing of the ADC)
	 
 Compute register value, unsigned computation 
 Remove integer part 
	 Save the frequency shift without tunerOffset compensation
 Remove integer part 
 Restore current IF & RF AGC settings 
 Not set, detect it automatically 
 try first guess DRX_FFTMODE_8K 
 Not set, detect it automatically 
 try first guess 14 
 Not set, detect it automatically, start with none 
 try first guess DRX_CONSTELLATION_QAM64 
 First determine real bandwidth (Hz) 
 Also set delay for impulse noise cruncher (only A2) 
		 Also set parameters for EC_OC fix, note
		   EC_OC_REG_TMD_HIL_MAR is changed
		   by SC for fix for some 8K,18 guard but is restored by
		   InitEC and ResetEC
 (647)(88)1000000 
 (647)(78)1000000 
binary:0100 1000 0000 0111 
 (647)(68)1000000 
binary: 0000 1111 0000 0111 
			 enable SLAVE mode in 2k 132 to
 enable slave 
 disable slave 
 switch on SRMM scan in SC 
            CHK_ERROR(Write16(SC_RA_RAM_SAMPLE_RATE_STEP__A, DRXD_OSCDEV_STEP, 0x0000));
 Now compute FE_IF_REG_INCR 
		((( SysFreqBandWidth)2)2) -1)  2^23) =>
 Bandwidth setting done 
 Mirror & frequency offset 
 Start SC, write channel settings to SC 
 Enable SC after setting all other parameters 
 Write SC parameter registers, operation mode 
 Start correct processes to get in lock 
 Optimum value for MT2060 
 Currently unused 
 Currently unused 
 Currently unused 
2;   Off 
 Auto 
 Dynamic DTO source 
 rest of the RFAgcCfg structure currently unused 
 discrete filter 
 SAW filter 
 modify tuner and clock attributes 
 expected system clock frequency in kHz 
 real system clock frequency in kHz 
 modify MPEG output attributes 
 Timing div, 250nsPsys 
 Timing div, = ( delay (nano seconds)  sysclk (kHz) ) 1000 
 Bridge delay, uses oscilator clock 
 Delay = ( delay (nano seconds)  oscclk (kHz) ) 1000 
 state->m_FeAgRegAgPwd = DRXD_DEF_AG_PWD_PRO; 
 Apply I2c address patch to B1 
			 HI firmware patch for UIO readout,
 Handle clock deviation 
 deviation in kHz 
 rounding, signed 
 add +1 or -1 
 PGA = 0 dB 
if (pLockStatus&DRX_LOCK_MPEG) 
 Get status again, in case we have MPEG lock now 
DRX_GetLockStatus(state, pLockStatus); 
 No MPEG lock in V255 firmware, bug ? 
 add few initialization to allow gate control 
 SPDX-License-Identifier: GPL-2.0-or-later
    Driver for VES1893 and VES1993 QPSK Demodulators
    Copyright (C) 1999 Convergence Integrated Media GmbH <ralph@convergence.de>
    Copyright (C) 2001 Ronny Strutz <3des@elitedvb.de>
    Copyright (C) 2002 Dennis Noermann <dennis.noermann@noernet.de>
    Copyright (C) 2002-2003 Andreas Oberritter <obi@linuxtv.org>
 configuration settings 
 previous uncorrected block counter 
	
	  inversion onoff are interchanged because i and q seem to
	  be swapped on the hardware
FCONF	 = 0x80 | ((FNR & 0x01) << 5) | (((FNR > 1) & 0x03) << 3) | ((FNR >> 1) & 0x07);
 ves1993 hates this, will lose lock 
 invert PWM 
	
	  The ves1893 sometimes returns sync values that make no sense,
	  because, e.g., the SIGNAL bit is 0, while some of the higher
	  bits are 1 (and how can there be a CARRIER wo a SIGNAL?).
	  Tests showed that the VITERBI and SYNC bits are returned
	  reliably, while the SIGNAL and CARRIER bits ar sometimes wrong.
	  If such a case occurs, we read the value again, until we get a
	  valid value.
 just for safety - let's not get stuck here 
 counter overflow... 
 reset the counter 
 dto. 
	
	  inversion indicator is only valid
	  if auto inversion was used
  XXX FIXME: timing offset !! 
 allocate memory for the internal state 
 setup the state 
 check if the demod is there + identify it 
 VES1893A rev1 
 VES1893A rev2 
 VES1993 
 create dvb_frontend 
	.symbol_rate_tolerance	=	???,
 SPDX-License-Identifier: GPL-2.0-or-later
    Conexant cx24117cx24132 - Dual DVBSS2 Satellite demodtuner driver
    Copyright (C) 2013 Luis Alves <ljalvs@gmail.com>
	July, 6th 2013
	    First release based on cx24116 driver by:
	    Steven Toth and Georg Acher, Darron Broad, Igor Liplianin
	    Cards currently supported:
		TBS6980 - Dual DVBSS2 PCIe card
		TBS6981 - Dual DVBSS2 PCIe card
 known registers 
 command buffer 
 execute command 
 frequency 
 demod0 signal high  status 
 +-freq 
 +- 1000  srate 
 frequency 
 demod1 signal high  status 
 +- freq 
 arg buffer size 
 rolloff 
 pilot bit 
 signal status 
 arg offset for DiSEqC 
 unknown value=2 
 unknown value=0 
 unknown value=0 
 DiSEqC burst 
 0 disabled  2 enabled 
 0 disabled  1 enabled 
 The DemodTuner can't easily provide these, we cache them 
 Demod values 
 Basic commands that are sent to the firmware 
 common to both fe's 
 Used for sharing this struct between demods 
 one per each fe 
 modfec (modulation and FEC) lookup table 
 Check cx24116.c for a detailed description of each field 
 In DVBS mode this is used to autodetect 
 Passed to the firmware to indicate mode selection 
 QPSK. For unknown rates we set hardware to auto detect 0xfe 0x30 
mod   fec       mask  val 
 00000010 00101110 
 00000100 00101111 
 00001000 00110000 
 000?0000 ?        
 00100000 00110001 
 0?000000 ?        
 10000000 00110010 
 0000000? ?        
 NBC-QPSK 
 8PSK 
	
	  'val' can be found in the FECSTATUS register when tuning.
	  FECSTATUS will give the actual FEC in use if tuning was successful.
 check if firmware is already running 
 Load firmware 
 request the firmware, this will block until loaded 
		 Make sure we don't recurse back through here
 Ensure firmware is always loaded if required 
 Take a basic firmware command structure, format it
  and forward it for processing
 Load the firmware if required 
 Write the command 
 Start execution and wait for cmd to terminate 
			 Avoid looping forever if the firmware does
 fw upload reg 
 prepare i2c message to send 
 send fw 
 Init demodulator 
 Set VCO frequency 
 Tuner init 
 Global MPEG config 
 MPEG config for each demod 
 Get firmware version 
 Read AGC accumulator register 
 Overwrite the current tuning params, we are about to tune 
 Wait for LNB 
 Wait for up to 300 ms 
 -EBUSY ? 
 Prepare a set GPIO logic level CMD 
 mask 
 power on LNB 
 Wait for voltagemin repeat delay 
 Set 13V18V select pin 
 Min delay time before DiSEqC send 
 power off LNB 
 Wait for LNB ready 
 Min delay time after DiSEqC send 
 Set the tone 
 Initialise DiSEqC 
 Prepare a DiSEqC command 
 demod 
 DiSEqC burst 
 Unknown 
 Continuation flag? 
 DiSEqC message length 
 Command length 
 Send DiSEqC message 
 Dump DiSEqC message 
 Validate length 
 DiSEqC message 
 DiSEqC message length 
 Command length 
	
	  Message is sent with derived else cached burst
	 
	  WRITE PORT GROUP COMMAND 38
	 
	  0AA: E0 10 38 F0..F3
	  1BB: E0 10 38 F4..F7
	  2CA: E0 10 38 F8..FB
	  3DB: E0 10 38 FC..FF
	 
	  databyte[3]= 8421:8421
	               ABCD:WXYZ
	               CLR :SET
	 
	               WX= PORT SELECT 0..3    (X=TONEBURST)
	               Y = VOLTAGE             (0=13V, 1=18V)
	               Z = BAND                (0=LOW, 1=HIGH(22K))
 Wait for LNB ready 
 Wait for voltagemin repeat delay 
 Command 
	
	  Wait for send
	 
	  Eutelsat spec:
	  >15ms delay          + (XXX determine if FW does this, see set_tone)
	   13.5ms per byte     +
	  >15ms delay          +
	   12.5ms burst        +
	  >15ms delay            (XXX determine if FW does this, see set_tone)
 Send DiSEqC burst 
 DiSEqC burst 
 get the common data struct for both demods 
 new priv instance 
 existing priv instance 
 allocate memory for the internal state 
 create dvb_frontend 
  Initialise or wake up device
  Power config will reset and load initial firmware if required
 Set sleep mode off 
 Set BER control 
 Set RS correction (enabledisable) 
 Set GPIO direction 
 Set as output - controls LNB power onoff 
  Put device to sleep
 Set sleep mode on 
 dvb-core told us to tune, the tv property cache will be complete,
  it's safe for is to pull values and use them for tuning purposes.
 Only QPSK is supported for DVB-S 
 Pilot doesn't exist in DVB-S, turn bit off 
 DVB-S only supports 0.35 
		
		  NBC 8PSKQPSK with DVB-S is supported for DVB-S2,
		  but not hardware auto detection
 soft-auto rolloff 
 discard the 'current' tuning parameters and prepare to tune 
 Prepare a tune request 
 demod 
 Frequency 
 Symbol Rate 
 Automatic Inversion 
 Modulation  FEC  Pilot 
 Reset status register 
 Tune 
		
		  Wait for up to 500 ms before retrying
		 
		  If we are able to tune then generally it occurs within 100ms.
		  If it takes longer, try a different rolloff setting.
 try next rolloff value 
 Read current tune parameters 
 read all required regs at once 
 get spectral inversion 
 modulation and fec 
 frequency 
 symbol rate 
 SPDX-License-Identifier: GPL-2.0-or-later
    VES1820  - Single Chip Cable Channel Receiver driver module
    Copyright (C) 1999 Convergence Integrated Media GmbH <ralph@convergence.de>
 configuration settings 
 private demodulator data 
 yeuch! 
 XXX FIXME! 
 reset uncorrected block counter 
 AFC only valid when carrier has been recovered 
 pdown ADC 
 standby 
 allocate memory for the internal state 
 setup the state 
 check if the demod is there 
 create dvb_frontend 
 SACLK64 == (XIN2)64 
 SACLK4 
 SPDX-License-Identifier: GPL-2.0-only
  Driver for Sharp IX2505V (marked B0017) DVB-S silicon tuner
  Copyright (C) 2010 Malcolm Priestley
   Data read format of the Sharp IX2505V B0017
   byte1:   1   |   1   |   0   |   0   |   0   |  MA1  |  MA0  |  1
   byte2:  POR  |   FL  |  RD2  |  RD1  |  RD0  |   X   |   X   |  X
   byte1 = address
   byte2;
 	POR = Power on Reset (VCC H=<2.2v L=>2.2v)
 	FL  = Phase Lock (H=lock L=unlock)
 	RD0-2 = Reserved internal operations
  Only POR can be used to check the tuner is present
  Caution: after byte2 the I2C reverts to write mode continuing to read
           may corrupt tuning data.
   Data write format of the Sharp IX2505V B0017
   byte1:   1   |   1   |   0   |   0   |   0   | 0(MA1)| 0(MA0)|  0
   byte2:   0   |  BG1  |  BG2  |   N8  |   N7  |   N6  |  N5   |  N4
   byte3:   N3  |   N2  |   N1  |   A5  |   A4  |   A3  |   A2  |  A1
   byte4:   1   | 1(C1) | 1(C0) |  PD5  |  PD4  |   TM  | 0(RTS)| 1(REF)
   byte5:   BA2 |   BA1 |  BA0  |  PSC  |  PD3  |PD2TS2|DIVTS1|PD0TS0
   byte1 = address
   Write order
   1) byte1 -> byte2 -> byte3 -> byte4 -> byte5
   2) byte1 -> byte4 -> byte5 -> byte2 -> byte3
   3) byte1 -> byte2 -> byte3 -> byte4
   4) byte1 -> byte4 -> byte5 -> byte2
   5) byte1 -> byte2 -> byte3
   6) byte1 -> byte4 -> byte5
   7) byte1 -> byte2
   8) byte1 -> byte4
   Recommended Setup
   1 -> 8 -> 6
 REF =1 
 PSC = 0 
 local osc = 4Mhz 
PD5,PD4 & TM = 0|C1,C0|REF=1
frequency up to 2150000
 all other bits set 0 
 set TM = 1 other bits same 
 write byte 4 only 
 lpf 
 write byte 4 & 5 
 SPDX-License-Identifier: GPL-2.0-or-later
   Driver for Zarlink DVB-T MT352 demodulator
   Written by Holger Waechtler <holger@qanu.de>
 	 and Daniel Mack <daniel@qanu.de>
   AVerMedia AVerTV DVB-T 771 support by
        Wolfram Joost <dbox2@frokaschwei.de>
   Support for Samsung TDTC9251DH01C(M) tuner
   Copyright (C) 2004 Antonio Mancuso <antonio.mancuso@digitaltelevision.it>
                      Amauri  Celani  <acelani@essegi.net>
   DVICO FusionHDTV DVB-T1 and DVICO FusionHDTV DVB-T Lite support by
        Christopher Pascoe <c.pascoe@itee.uq.edu.au>
 configuration settings 
 20.340 MHz 
 20.480000 MHz 
 36.166667 MHz 
 TPS_GIVEN_1 and following registers 
 TPS_GIVEN_(1|0) 
 old
	buf[3] = 0xf4;  
	 Use TPS_RECEIVED-registers, not the TPS_CURRENT-registers because
	  the mt352 sometimes works with the wrong parameters
	 FIXME:
	 
	  The MT352 design manual from Zarlink states (page 46-47):
	 
	  Notes about the TUNER_GO register:
	 
	  If the Read_Tuner_Byte (bit-1) is activated, then the tuner status
	  byte is copied from the tuner to the STATUS_3 register and
	  completion of the read operation is indicated by bit-5 of the
	  INTERRUPT_3 register.
 align the 12 bit AGC gain with the most significant bits 
 inverse of gain is signal strength 
 Do a "hard" reset 
 allocate memory for the internal state 
 setup the state 
 check if the demod is there 
 create dvb_frontend 
 SPDX-License-Identifier: GPL-2.0-or-later
  Silicon Labs Si2168 DVB-TT2C demodulator driver
  Copyright (C) 2014 Antti Palosaari <crope@iki.fi>
 execute firmware command 
 write cmd and args for firmware 
 wait cmd execution terminate 
 firmware ready? 
 error bit set? 
 set manual value 
 set TS_MODE property 
 BER 
		
		  Firmware returns [0, 255] mantissa and [0, 8] exponent.
		  Convert to DVB API: mantissa  10^(8 - exponent)  10^8
 10^8 
 UCB 
 Sometimes firmware returns bogus value 
 program tuner 
 that has no big effect 
 select PLP 
 set DVB-C symbol rate 
 enable ts bus 
 initialize 
 resume 
 power up 
 request the firmware, this will block and timeout 
 fallback mechanism to handle old name for Si2168 B40 fw 
 firmware is in the new format 
 firmware is in the old format 
 bad or unknown firmware format 
 query firmware version 
 set ts mode 
 Init stats here to indicate which stats are supported 
 tri-state data bus 
 Firmware later than B 4.0-11 loses warm state during sleep 
 open I2C gate 
 close I2C gate 
 Initialize 
 Power up 
 Query chip revision 
 create mux i2c adapter for tuner 
 create dvb_frontend 
 SPDX-License-Identifier: GPL-2.0-or-later
    Montage Technology DS3000 - DVBSS2 Demodulator driver
    Copyright (C) 2009-2012 Konstantin Dimitrov <kosio.dimitrov@gmail.com>
    Copyright (C) 2009-2012 TurboSight.com
 as of March 2009 current DS3000 firmware version is 1.78 
 DS3000 FW v1.78 MD5: a32d17910c4f370073f9346e71d34b80 
 in kHz 
 Register values to initialise the demod in DVB-S mode 
 Register values to initialise the demod in DVB-S2 mode 
 previous uncorrected block counter for DVB-S2 
 I2C write for 8k firmware load 
 Load firmware 
 request the firmware, this will block until someone uploads it 
 Begin the firmware load process 
 write the entire firmware 
 bit0 VH, bit1 offon 
 read DS3000 BER value 
		 set the number of bytes checked during
 read BER estimation status 
 check if BER estimation is ready 
			 this is the number of error bits,
			to calculate the bit error rate
 start counting error bits 
			 need to be set twice
			 used to indicate that BER estimation
 read the number of LPDC decoded frames 
 read the number of packets with bad CRC 
 clear LPDC frame counters 
 clear bad packets counter 
 enable bad packets counter 
 enable LPDC frame counters 
			 used to indicate that BER estimation is not ready,
 calculate DS3000 snr value in dB 
 20 x Table (rounded up) 
 80 x Table (rounded up) 
			 cook the value to be suitable for szap-s2
			 cook the value to be suitable for szap-s2
			 cook the value to be suitable for szap-s2
 read DS3000 uncorrected blocks 
 clear packet counters 
 enable packet counters 
 Dump DiSEqC message 
 enable DiSEqC message send pin 
 DiSEqC message 
	 clear DiSEqC message length and status,
	 set DiSEqC mode, modulation active during 33 pulses,
 wait up to 150ms for DiSEqC transmission to complete 
 DiSEqC timeout after 150ms 
 Send DiSEqC burst 
 DiSEqC burst 
 Unmodulated tone burst 
 Modulated tone burst 
 allocate memory for the internal state 
 check if the demod is present 
	
	  Some devices like T480 starts with voltage on. Be sure
	  to turn voltage off during init, as this can otherwise
	  interfere with Unicable SCR systems.
 Tune 
 ds3000 global reset 
 ds3000 built-in uC reset 
 ds3000 software reset 
 initialise the demod in DVB-S mode 
 initialise the demod in DVB-S2 mode 
 enable 27MHz clock output 
 enable ac coupling 
 enhance symbol rate performance 
 normalized symbol rate rounded to the closest integer 
 co-channel interference cancellation disabled 
 equalizer disabled 
	ds3000_writereg(state, 0x08, 0x03);
	ds3000_writereg(state, 0xfd, 0x22);
	ds3000_writereg(state, 0x08, 0x07);
	ds3000_writereg(state, 0xfd, 0x42);
 ds3000 out of software reset 
 start ds3000 built-in uC 
  Initialise or wake up device
  Power config will reset and load initial firmware if required
 hard reset 
 Load the firmware if required 
 SPDX-License-Identifier: GPL-2.0-or-later
	NxtWave Communications - NXT6000 demodulator driver
    Copyright (C) 2002-2003 Florian Schirmer <jolt@tuxbox.org>
    Copyright (C) 2003 Paul Andreassen <paul@andreassen.com.au>
 configuration settings 
(1 << 2) |  (0x01 << 1) | 0x01);
 BER Timer = 0x000200  256 = 131072 bits
 Enable BER interrupts
 Enable BER measurement
 CHECKME 
 Strange magic required to gain access to RF_AGC_STATUS 
 Clear BER Done interrupts
 allocate memory for the internal state 
 setup the state 
 check if the demod is there 
 create dvb_frontend 
 FIXME: 12% of SR 
 FIXME: 12% of SR 
 FIXME 
 FIXME 
 SPDX-License-Identifier: GPL-2.0-or-later
     Driver for Philips tda10086 DVBS Demodulator
     (c) 2006 Andrew de Quincey
 private demod data 
 read a byte and check 
 mask if off 
 write it out again 
 reset 
 misc setup 
 NOTE: TT drivers appear to disable CSWP 
 noise threshold 
 misc 
 acquisition period length 
 irq off 
 setup AFC 
 setup PLL (this assumes SACLK = 96MHz) 
 misc PLL setup 
 M=12 
 P=2 
 M=24 
 P=1 
 powerup PLL 
 setup TS interface 
 parallel mode A + MSBFIRST 
 powerdown WPLL - unused in the mode we use 
 bypass WPLL - unused in the mode we use 
 setup ADC 
 ADC setup 
 powerup ADC 
 setup AGC 
 NOTE: flydvb varies it 
 setup viterbi 
 VBER 10^6, DVB, QPSK 
 setup carrier recovery 
 setup SEC 
 all SEC off, 22k tone 
 setup the decimation and anti-aliasing filters.. 
 calculate BDR 
 calculate BDRI 
 modify parameters for tuning 
 set params 
 calculate the frequency offset (in Hz not kHz) 
 soft reset + disable TS output until lock 
 check for invalid symbol rate 
 calculate the updated frequency (note: we convert from Hz->kHz) 
 the inversion 
 calculate the updated symbol rate 
 the FEC 
 modify parameters for stable reception 
 read it 
 reset counter 
 read it 
 allocate memory for the internal state 
 setup the state 
 check if the demod is there 
 create dvb_frontend 
 SPDX-License-Identifier: GPL-2.0-or-later
     Support for NXT2002 and NXT2004 - VSBQAM
     Copyright (C) 2005 Kirk Lapray <kirk.lapray@gmail.com>
     Copyright (C) 2006-2014 Michael Krufky <mkrufky@linuxtv.org>
     based on nxt2002 by Taylor Jacob <rtjacob@earthlink.net>
     and nxt2004 by Jean-Francois Thibert <jeanfrancois@sagetv.com>
                       NOTES ABOUT THIS DRIVER
  This Linux driver supports:
    B2C2BBTI Technisat Air2PC - ATSC (NXT2002)
    AverTVHD MCE A180 (NXT2004)
    ATI HDTV Wonder (NXT2004)
  This driver needs external firmware. Please use the command
  "<kerneldir>scriptsget_dvb_firmware nxt2002" or
  "<kerneldir>scriptsget_dvb_firmware nxt2004" to
  downloadextract the appropriate firmware, and then copy it to
  usrlibhotplugfirmware or libfirmware
  (depending on configuration of firmware hotplug).
 Max transfer size done by I2C transfer functions 
 demodulator private data 
 set multi register register 
 send the actual data 
 probably not right, but gives correct values 
 set write bit 
 set multi register length 
 toggle the multireg write bit 
 set multi register register 
 set multi register length 
 read the actual data 
 probably not right, but gives correct values 
 set multi register length 
 toggle the multireg bit
 read the actual data 
 set correct stop value 
	 if NXT2004, write directly to tuner. if NXT2002, write through NXT chip.
 wait until we have a lock 
 set the i2c transfer speed to the tuner 
 setup to transfer 4 bytes via i2c 
 write actual tuner bytes 
 set tuner i2c address 
 write UC Opmode to begin transfer 
 Get the RAM base for this nxt2002 
 Hold the micro in reset while loading firmware 
 write starting address 
 write remaining bytes of firmware 
 write crc 
 do a read to stop things 
 set transfer mode to complete 
 set rambase 
 hold the micro in reset while loading firmware 
 calculate firmware CRC 
 write starting address 
 write crc 
 do a read to stop things 
 set transfer mode to complete 
 stop the micro first 
 make sure demod is set to digital 
 set additional params 
 Set punctured clock for QAM 
 This is just a guess since I am unable to test it 
 Set non-punctured clock for VSB 
 get tuning information 
 write frequency information 
 reset the agc now that tuning has been completed 
 set target power level 
 configure sdm 
 write sdm1 input 
 write sdmx input 
 write adc power lpf fc 
 write ??? 
 write accumulator2 input 
 write kg1 
 write sdm12 lpf fc 
 write agc control reg 
 soft reset? 
 write agc ucgp0 
 write agc control reg 
 write accumulator2 input 
 write agc control reg 
 ???? 
	 adjacent channel detection should be done here, but I don't
 setup to read cluster variance 
 get multreg val 
 setup to read cluster variance 
 get multreg val from 0xA6 
 snr will be in db 
 the value reported back from the frontend will be FFFF=32db 0000=0db 
 request the firmware, this will block until someone uploads it 
 Put the micro into reset 
 ensure transfer is complete 
 Put the micro into reset for real this time 
 soft reset everything (agc,frontend,eq,fec)
 write agc sdm configure 
 write mod output format 
 write fec mpeg mode 
 write mux selection 
 ??? 
 request the firmware, this will block until someone uploads it 
 ensure transfer is complete 
 soft reset everything (agc,frontend,eq,fec)
 write agc sdm configure 
 ???
 ???
 ???
 write fec mpeg mode 
 write mux selection 
 ???
 soft reset? 
 ???
 soft reset? 
 initialize tuner 
 allocate memory for the internal state 
 setup the state 
 read card id 
 set demod chip 
 make sure demod chip is supported 
 device id 
 fab id 
 month 
 year msb 
 year lsb 
 device id 
 create dvb_frontend 
 stepsize is just a guess 
 SPDX-License-Identifier: GPL-2.0-or-later
  lnbh25.c
  Driver for LNB supply and control IC LNBH25
  Copyright (C) 2014 NetUP Inc.
  Copyright (C) 2014 Sergey Kozlov <serjk@netup.ru>
  Copyright (C) 2014 Abylay Ospan <aospan@netup.ru>
  struct lnbh25_priv - LNBH25 driver private data
  @i2c:		pointer to the I2C adapter structure
  @i2c_address:	I2C address of LNBH25 SEC chip
  @config:		Registers configuration:
 			offset 0: 1st register address, always 0x02 (DATA1)
 			offset 1: DATA1 register value
 			offset 2: DATA2 register value
 SPDX-License-Identifier: GPL-2.0-or-later
  Panasonic MN88472 DVB-TT2C demodulator driver
  Copyright (C) 2013 Antti Palosaari <crope@iki.fi>
 Signal strength 
 CNR 
 DVB-T CNR 
 CNR[dB]: 10  log10(65536  value) + 2 
 log10(65536) = 80807124, 0.2 = 3355443 
 DVB-T2 CNR 
 0=SISO, 1=MISO 
 CNR[dB]: 10  log10(16384  value) - 6 
 log10(16384) = 70706234, 0.6 = 10066330 
 CNR[dB]: 10  log10(65536  value) + 2 
 log10(65536) = 80807124, 0.2 = 3355443 
 DVB-C CNR 
 signal 
 noise 
 CNR[dB]: 10  log10(8  (signal  noise)) 
 log10(8) = 15151336 
 PER 
 Program tuner 
 IF 
 Bandwidth 
 Reset FSM 
 Power up 
 Check if firmware is already running 
 Parity check of firmware 
 TS config 
 Power down 
	
	  Chip has three I2C addresses for different register banks. Used
	  addresses are 0x18, 0x1a and 0x1c. We register two dummy clients,
	  0x1a and 0x1c, in order to get own I2C client for each register bank.
	 
	  Also, register bank 2 do not support sequential IO. Only single
	  register write or read is allowed to that bank.
 Check demod answers with correct chip id 
 Sleep because chip is active by default 
 Create dvb frontend 
 Init stats to indicate which stats are supported 
 Setup callbacks 
 SPDX-License-Identifier: GPL-2.0
  Driver for the MaxLinear MxL69x family of combo tunersdemods
  Copyright (C) 2020 Brad Love <brad@nextdimension.cc>
  based on code:
  Copyright (c) 2016 MaxLinear, Inc. All rights reserved
  which was released under GPL V2
 i2c command mutex 
 do nothing 
 skip API header 
 no swapping - all get opcodes 
 ATSCOOB no swapping 
 skip API header 
 no swapping - all set opcodes 
 4 byte alignment 
 4 byte alignment 
 4 byte alignment 
 4 byte alignment 
 Read in 4 byte chunks 
 cksum is big endian 
 send Tx message 
 receive Rx message (polling) 
 cksum is big endian 
 DRAM 
 IRAM 
 release CPU from reset 
 verify FW is alive 
 legacy i2c override 
 verify sku 
 configure main regulator according to the power supply source 
 configure digital regulator to high current mode 
 set XTAL capacitance 
 set CLK OUT 
 set CLK OUT divider 
 set XTAL sharing 
 enabledisable XTAL calibration, based on masterslave device 
 enable XTAL calibration and set XTAL amplitude to a higher value 
 disable XTAL calibration 
 set XTAL bias value 
 start XTAL calibration 
 was 1000! 
 Config Device Power Mode 
 was 500! 
 Init stats here to indicate which stats are supported 
 was 500! 
 was 500! 
 was 500! 
 ber 
 ucb 
 No lock, reset all statistics 
 SPDX-License-Identifier: GPL-2.0-or-later
   Driver for Dummy Frontend
   Written by Emard <emard@softhome.net>
  Should only be implemented if it actually reads something from the hardware.
  Also, it should check for the locks, in order to avoid report wrong data
  to userspace.
 allocate memory for the internal state 
 create dvb_frontend 
 allocate memory for the internal state 
 create dvb_frontend 
 allocate memory for the internal state 
 create dvb_frontend 
 symbol_rate_min: SACLK64 == (XIN2)64 
 SACLK4 
 SPDX-License-Identifier: GPL-2.0
  Driver for the ST STV0910 DVB-SS2 demodulator.
  Copyright (C) 2014-2015 Ralph Metzler <rjkm@metzlerbros.de>
                          Marcus Metzler <mocm@metzlerbros.de>
                          developed for Digital Devices GmbH
 shared I2C access protect 
 shared register write protect 
 CN=   0dB 
 CN= 0.5dB 
 CN= 1.0dB 
 CN= 1.5dB 
 CN= 2.0dB 
 CN= 2.5dB 
 CN= 3.0dB 
 CN= 3.5dB 
 CN= 4.0dB 
 CN= 4.5dB 
 CN= 5.0dB 
 CN= 5.5dB 
 CN= 6.0dB 
 CN= 6.5dB 
 CN= 7.0dB 
 CN= 7.5dB 
 CN= 8.0dB 
 CN= 8.5dB 
 CN= 9.0dB 
 CN= 9.5dB 
 CN=10.0dB 
 CN=10.5dB 
 CN=11.0dB 
 CN=11.5dB 
 CN=12.0dB 
 CN=12.5dB 
 CN=13.0dB 
 CN=13.5dB 
 CN=14.0dB 
 CN=14.5dB 
 CN=15.0dB 
 CN=16.0dB 
 CN=17.0dB 
 CN=18.0dB 
 CN=19.0dB 
 CN=20.0dB 
 CN=21.0dB 
 CN=22.0dB 
 CN=23.0dB 
 CN=24.0dB 
 CN=25.0dB 
 CN=26.0dB 
 CN=27.0dB 
 CN=28.0dB 
 CN=29.0dB 
 CN=30.0dB 
 CN=31.0dB 
 CN=32.0dB 
 CN=33.0dB 
 CN=33.0dB 
 CN=40.0dB 
 CN=45.0dB 
 CN=50.0dB 
 CN=51.0dB 
 CN=-2.5dB 
 CN=-2.5dB 
 CN=-2.0dB 
 CN=-1.5dB 
 CN=-1.0dB 
 CN=-0.5dB 
 CN=   0dB 
 CN= 0.5dB 
 CN= 1.0dB 
 CN= 1.5dB 
 CN= 2.0dB 
 CN= 2.5dB 
 CN= 3.0dB 
 CN= 3.5dB 
 CN= 4.0dB 
 CN= 4.5dB 
 CN= 5.0dB 
 CN= 5.5dB 
 CN= 6.0dB 
 CN= 6.5dB 
 CN= 7.0dB 
 CN= 7.5dB 
 CN= 8.0dB 
 CN= 8.5dB 
 CN= 9.0dB 
 CN= 9.5dB 
 CN=10.0dB 
 CN=10.5dB 
 CN=11.0dB 
 CN=11.5dB 
 CN=12.0dB 
 CN=12.5dB 
 CN=13.0dB 
 CN=13.5dB 
 CN=14.0dB 
 CN=14.5dB 
 CN=15.0dB 
 CN=16.0dB 
 CN=17.0dB 
 CN=18.0dB 
 CN=19.0dB 
 CN=20.0dB 
 CN=21.0dB 
 CN=22.0dB 
 CN=23.0dB 
 CN=24.0dB 
 CN=25.0dB 
 CN=26.0dB 
 CN=27.0dB 
 CN=28.0dB 
 CN=29.0dB 
 CN=30.0dB 
 CN=31.0dB 
 CN=32.0dB 
 CN=33.0dB 
 CN=35.0dB 
 CN=40.0dB 
 CN=45.0dB 
 CN=50.0dB 
 CN=51.0dB 
 PADC= +0dBm 
 PADC= -1dBm 
 PADC= -2dBm 
 PADC= -3dBm 
 PADC= -4dBm 
 PADC= -5dBm 
 PADC= -6dBm 
 PADC= -7dBm 
 PADC= -9dBm 
 PADC=-11dBm 
 PADC=-13dBm 
 PADC=-15dBm 
 PADC=-17dBm 
 PADC=-19dBm 
 PADC=-20dBm 
 PADC=-21dBm 
  Tracking carrier loop carrier QPSK 14 to 8PSK 910 long Frame
	
	  Modcod  2MPon 2MPoff 5MPon 5MPoff 10MPon 10MPoff
	  20MPon 20MPoff 30MPon 30MPoff
 FE_QPSK_14  
 FE_QPSK_13  
 FE_QPSK_25  
 FE_QPSK_12  
 FE_QPSK_35  
 FE_QPSK_23  
 FE_QPSK_34  
 FE_QPSK_45  
 FE_QPSK_56  
 FE_QPSK_89  
 FE_QPSK_910 
 FE_8PSK_35  
 FE_8PSK_23  
 FE_8PSK_34  
 FE_8PSK_56  
 FE_8PSK_89  
 FE_8PSK_910 
	
	  Tracking carrier loop carrier 16APSK 23 to 32APSK 910 long Frame
	
	  Modcod 2MPon  2MPoff 5MPon 5MPoff 10MPon 10MPoff 20MPon
	  20MPoff 30MPon 30MPoff
 FE_16APSK_23  
 FE_16APSK_34  
 FE_16APSK_45  
 FE_16APSK_56  
 FE_16APSK_89  
 FE_16APSK_910 
 FE_32APSK_34  
 FE_32APSK_45  
 FE_32APSK_56  
 FE_32APSK_89  
 FE_32APSK_910 
 Sign extent 
 Disable Reed-Solomon 
 Assumes Table[0].RegValue > Table[imax].RegValue 
 DUMMY_PLF   
 QPSK_1_4,   
 QPSK_1_3,   
 QPSK_2_5,   
 QPSK_1_2,   
 QPSK_3_5,   
 QPSK_2_3,   
 QPSK_3_4,   
 QPSK_4_5,   
 QPSK_5_6,   
 QPSK_8_9,   
 QPSK_9_10,  
 8PSK_3_5,   
 8PSK_2_3,   
 8PSK_3_4,   
 8PSK_5_6,   
 8PSK_8_9,   
 8PSK_9_10,  
 16APSK_2_3, 
 16APSK_3_4, 
 16APSK_4_5, 
 16APSK_5_6, 
 16APSK_8_9, 
 16APSK_9_10 
 32APSK_3_4, 
 32APSK_4_5, 
 32APSK_5_6, 
 32APSK_8_9, 
 32APSK_9_10 
 release reset DVBS2 packet delin 
 Blind optim
 Stop the demod 
 PLROOT2 bit 2 = gold code 
 CN= 1.5dB 
 CN= 4.5dB 
 CN= 6.5dB 
 CN= 8.5dB 
 CN=10.5dB 
 Demod Stop 
 SR <=1Msps 
 1Msps < SR <=2Msps 
 2Msps< SR <=5Msps 
 5Msps< SR <=10Msps 
 10Msps< SR <=20Msps 
 SR >=20Msps 
 Set the Init Symbol rate 
 FE_STV0910_SetSearchStandard 
 Disable DSS 
 8PSK 35, 8PSK 23 Poff tracking optimization WA 
	
	  Reset CAR3, bug DVBS2->DVBS1 lock
	  Note: The bit is only pulsed -> no lock on shared register needed
 Reset demod 
 CFR Low Setting 
 init the demod frequency offset to 0 
 Trigger acq 
 Address offset 
 Disable receiver 
 Reset = 1 
 Reset = 0 
 Configure the I2C repeater to off 
 Configure the I2C repeater to off 
 Set the I2C to oversampling ratio 
 state->i2ccfg 
 OUTCFG 
 RFAGC Pads Dev = 05 
 SYNTCTRL 
 TSGENERAL 
 CFGEXT 
 GENCFG 
 GENCFG 
 IQSWAP = 0 
 IQSWAP = 1 
 LDPC Reset 
 TS output 
 Manual speed 
 Manual speed 
 Reset stream merger 
	
	  mutex_lock note: Concurrent I2C gate bus accesses must be
	  prevented (STV0910 = dual demod on a single IC with a single I2C
	  gatebus, and two tuners attached), similar to most (if not all)
	  other I2C host interfacesbuses.
	 
	  enable=1 (open I2C gate) will grab the lock
	  enable=0 (close I2C gate) releases the lock
 don't hold the I2C bus lock on failure 
 fix scale 
 reset signal statistics 
				
				  FSTV0910_P2_MANUALSX_ROLLOFF,
				  FSTV0910_P2_MANUALS2_ROLLOFF = 0
 reset DVBS2 packet delinator error counter 
 reset DVBS2 packet delinator error counter 
 force to PRE BCH Rate 
 force to PRE RS Rate 
 Reset the Total packet counter 
			
			  Reset the packet Error counter2 (and Set it to
			  infinite error count mode)
 Use highest signaled ModCod for quality 
 read signal statistics 
 read signal strength 
 read carriernoise on FE_HAS_CARRIER 
 read ber 
 use safe tsspeed value if unspecified through stv0910_cfg 
 Inversion : Auto with reset to 0 
 SPDX-License-Identifier: GPL-2.0-or-later
  Sony CXD2820R demodulator driver
  Copyright (C) 2010 Antti Palosaari <crope@iki.fi>
 5 MHz 
 6 MHz 
 7 MHz 
 8 MHz 
 program tuner 
 program IF frequency 
 PLP filtering 
 Lock detection 
 Signal strength 
 Scale value to 0x0000-0xffff 
 CNR 
 log10(8) << 24 
 BER 
 SPDX-License-Identifier: GPL-2.0-or-later
   Driver for Conexant CX24113CX24128 Tuner (Satellite)
   Copyright (C) 2007-8 Patrick Boettcher <pb@linuxtv.org>
   Developed for BBTI  Technisat
 nothing to be done 
 did something 
 calculate tuner PLL settings: 
 For round up. 
 do_div needs an u64 as first argument 
 or 2 
 The need for this sleep is not clear. But helps in some cases 
 to force a gain-setting initialization 
 for a ROLL-OFF factor of 0.35, 0.2: 600, 0.25: 625 
 this only works with the current CX24123 implementation 
 allocate memory for the internal state 
 setup the state 
	 making a dummy read, because of some expected troubles
 create dvb_frontend 
 SPDX-License-Identifier: GPL-2.0-or-later
    Samsung S5H1409 VSBQAM demodulator driver
    Copyright (C) 2006 Steven Toth <stoth@linuxtv.org>
 configuration settings 
 previous uncorrected block counter 
 QAM tuning state goes through the following state transitions 
 Register values to initialise the demod, this will set VSB by default 
 VSB SNR lookup table 
 QAM64 SNR lookup table 
 QAM256 SNR lookup table 
 8 bit registers, 16 bit values 
 Inverted 
 Normal 
		 We should not perform amhum optimization until
		 We've already reached the maximum optimization level, so
 QAM EQ lock check 
 QAM EQ lock check 
 We've done the optimization already 
 Master lock 
 Master lock 
 Talk to the demod, set the FEC, GUARD, QAM settings etc 
	 Issue a reset to the demod so it knows to resync against the
 Optimize the demod for QAM 
		 This almost certainly applies to all boards, but for now
		   only do it for the HVR-1600.  Once the other boards are
 Configure MPEG Signal Timing charactistics 
 Reset the demod hardware and reset all of the configuration registers
 The datasheet says that after initialisation, VSB is default 
	 Optimize for the HVR-1600 if appropriate.  Note that some of these
	   may get folded into the generic case after testing with other
 VSB AGC REF 
 Unknown but Windows driver does it... 
 QAM AGC REF 
 Serial 
 Parallel 
 Note: Leaving the I2C gate closed. 
 Optimize the demod for QAM 
		 This almost certainly applies to all boards, but for now
		   only do it for the HVR-1600.  Once the other boards are
 Get the demodulator status 
 Get the tuner status 
	 borrowed from lgdt330x.c
	 
	  Calculate strength from SNR up to 35dB
	  Even though the SNR can go higher than 35dB,
	  there is some comfort factor in having a range of
	  strong signals that can show at 100%
		 The following calculation method was chosen
		  purely for the sake of code re-use from the
 Convert from SNR in dB  10 to 8.24 fixed-point 
		 Convert from 8.24 fixed-point to
 allocate memory for the internal state 
 setup the state 
 check if the demod exists 
 create dvb_frontend 
 Note: Leaving the I2C gate open here. 
 SPDX-License-Identifier: GPL-2.0-only
  Driver for DiBcom DiB3000MCP-demodulator.
  Copyright (C) 2004-7 DiBcom (http:www.dibcom.fr)
  Copyright (C) 2004-5 Patrick Boettcher (patrick.boettcher@posteo.de)
  This code is partially based on the previous dib3000mc.c .
 default value for 8MHz
 first time we do an update
 keep the pid_parse bit 
 disable
 STBs with parallel gated clock
 STBs with parallel continues clock
 STBs with serial input
 e.g. USB feeding
			ADDR @ 206 :
			P_smo_error_discard  [1;6:6] = 0
			P_smo_rs_discard     [1;5:5] = 0
			P_smo_pid_parse      [1;4:4] = 0
			P_smo_fifo_flush     [1;3:3] = 0
			P_smo_mode           [2;2:1] = 11
			P_smo_ovf_prot       [1;0:0] = 0
 P_smo_rs_discard     [1;5:5] = 1
smo_ mode
 synchronous fread 
 P_out_cfg 
 settings here are for 27.7MHz 
 P_sec_len
 Timing configuration
 Restart Configuration
 power up the demod + mobility configuration
 P_clk_cfg
 other configurations
 P_ctrl_sfreq
 Phase noise control
 P_fft_phacor_inh, P_fft_phacor_cpe, P_fft_powrange
 P_agc_global
 agc setup misc
 P_agc_counter_lock
 P_agc_counter_unlock
 agc 
 set_agc_loop_Bw
 Begin: TimeOut registers
 P_pha3_thres
 P_timf_alpha = 6, P_corm_alpha = 6, P_corm_thres = 0x80
 lock_mask0
 lock_mask1
 lock_mask2
 P_search_maxtrial=1
 div_lock_mask
 Spurious rm cfg
 P_cspu_regul, P_cspu_win_cut
 P_adp_selec_monit
 Fec cfg
 diversity register: P_dvsy_sync_wait..
 Impulse noise configuration
 output mode set-up
 close the i2c-gate 
Default cfg isi offset adp
 diversity synchro delay add 50% SFN margin
 restart demod
	u32 val;
 TODO what is that ? 
 a channel for autosearch 
 failed
 succeeded
 still pending
  configure demod 
 activates isi
 P_pha3_force_pha_shift
 P_pha3_force_pha_shift
 as long as the frontend_param structure is fixed for hierarchical transmission I refuse to use it 
 (tps >> 12) & 0x1 == hrch is used, (tps >> 9) & 0x7 == alpha 
 maybe the parameter has been changed 
 no channel found
 make this a config parameter 
 designated i2c address 
 set new i2c address and force divstr (Bit 1) to value 0 (Bit 0)
 turn off data output 
 SPDX-License-Identifier: GPL-2.0-or-later
     Support for OR51211 (pcHDTV HD-2000) - VSB
     Copyright (C) 2005 Kirk Lapray <kirk_lapray@bigfoot.com>
     Based on code from Jack Kelliher (kelliher@xmission.com)
                            Copyright (C) 2002 & pcHDTV, inc.
  This driver needs external firmware. Please use the command
  "<kerneldir>scriptsget_dvb_firmware or51211" to
  downloadextract it, and then copy it to usrlibhotplugfirmware
  or libfirmware (depending on configuration of firmware hotplug).
 ATSC
 Configuration settings 
 Demodulator private data 
 Result of last SNR calculation 
 Tuner private data 
 Get eprom data 
 Create firmware buffer 
 Wait at least 5 msec 
 Wait at least 5 msec 
	 Set operation mode in Receiver 1 register;
	  type 1:
	  data 0x50h  Automatic sets receiver channel conditions
	              Automatic NTSC rejection filter
	              Enable  MPEG serial data output
	              MPEG2tr
	              High tuner phase noise
	              normal +-150kHz Carrier acquisition range
 Change only if we are actually changing the channel 
 Set to ATSC mode 
 Update current frequency 
 Receiver Status 
 Receiver Lock 
 Calculate SNR estimation (scaled by 2^24)
   8-VSB SNR equation from Oren datasheets
   For 8-VSB:
     SNR[dB] = 10  log10(219037.9454  MSE^2 )
   We re-write the snr equation as:
     SNR  2^24 = 10(c - 2intlog10(MSE))
 No signal 
		 Negative SNR, which is possible, but realisticly the
		demod will lose lock before the signal gets this bad.  The
 SNR after Equalizer 
 Calculate Strength from SNR up to 35dB 
 Even though the SNR can go higher than 35dB, there is some comfort 
 factor in having a range of strong signals that can show at 100%   
 Rather than use the 8.8 value snr, use state->snr which is 8.24 
 scale the range 0 - 352^24 into 0 - 65535 
 Request the firmware, this will block until it uploads 
		 Set operation mode in Receiver 1 register;
		  type 1:
		  data 0x50h  Automatic sets receiver channel conditions
		              Automatic NTSC rejection filter
		              Enable  MPEG serial data output
		              MPEG2tr
		              High tuner phase noise
		              normal +-150kHz Carrier acquisition range
 Read back ucode version to besure we loaded correctly 
 and are really up and running 
 If we didn't receive the right index, try again 
 Allocate memory for the internal state 
 Setup the state 
 Create dvb_frontend 
 SPDX-License-Identifier: GPL-2.0-or-later
  descriptions + helper functions for simple dvb plls.
  (c) 2004 Gerd Knorr <kraxel@bytesex.org> [SuSE Labs]
 pll number 
 i2c details 
 the PLL descriptor 
 cached frequencybandwidth 
 ----------------------------------------------------------- 
 ----------------------------------------------------------- 
 descriptions                                                
 used by dntv live dvb-t 
 Infineon TUA6010XS
  used in Thomson Cable Tuner
 Panasonic env57h1xd5 (some Philips PLL ?) 
 Philips TDA6650TDA6651
  used in Panasonic ENV77H11D5
 011 0 0 0  01  },
 101 0 0 0  01  },
 101 0 0 0  01  },
 110 0 0 0  10  },
 011 0 0 0  10  },
 101 0 0 0  10  },
 110 0 0 0  10  },
 110 0 0 1  00  },
 011 0 0 1  00  },
 101 0 0 1  00  },
 110 0 0 1  00  },
 111 0 0 1  00  },
 Infineon TUA6034
  used in LG TDTP E102P
 ALPS TDED4
  used in Nebula-Cards and USB boxes
 ALPS TDHU2
  used in AverTVHD MCE A180
 Samsung TBMV30111IN  TBMV30712IN1
  used in Air2PC ATSC - 2nd generation (nxt2002)
  Philips SD1878 Tuner.
 zero-IF, offset 249 is to round up 
 Flip bits 3-5 
 Set lpf 
 unknown pll used in Samsung DTOS403IH102A DVB-C tuner 
 Samsung TDTC9251DH0 DVB-T NIM, as used on AirStar 2 
 Samsung TBDU18132 DVB-S NIM with TSA5059 PLL, used in SkyStar2 DVB-S 2.3 
 guesses 
	 TSA5059 PLL has a 17 bit divisor rather than the 15 bits supported
	  by this driver.  The two extra bits are 0x60 in the third byte.  15
	  bits is enough for over 4 GHz, which is enough to cover the range
	  of this tuner.  We could use the additional divisor bits by adding
	  more entries, e.g.
	 { 0x0ffff  125 + 1252, 125, 0x84 | 0x20, },
	 { 0x17fff  125 + 1252, 125, 0x84 | 0x40, },
 Samsung TBMU24112 DVB-S NIM with SL1935 zero-IF tuner 
 guesses 
 Alps TDEE4 DVB-C NIM, used on Cablestar 2 
 byte 4 : 1        AGD R3  R2  R1  R0
  byte 5 : C1    RE  RTS BS4 BS3 BS2 BS1
  AGD = 1, R3 R2 R1 R0 = 0 1 0 1 => byte 4 = 110101 = 0x95
  Range(MHz)  C1   RE RTS BS4 BS3 BS2 BS1  Byte 5
   47 - 153   0    0   0   0   0   0   1   0x01
  153 - 430   0    0   0   0   0   1   0   0x02
  430 - 822   0    0   0   1   0   0   0   0x08
 Infineon TUA6034 ISDB-T, used in Friio 
 CP cur. 50uA, AGC takeover: 103dBuV, PORT3 on 
 Philips TDA6651 ISDB-T, used in Earthsoft PT1 
 ----------------------------------------------------------- 
 ----------------------------------------------------------- 
 code                                                        
 calculate the frequency we set it to
 Shouldn't be called when initdata is NULL, maybe BUG()? 
 Shouldn't be called when initdata is NULL, maybe BUG()? 
	
	  Unset tuner_ops.release (== dvb_pll_release)
	  which has been just set in the above dvb_pll_attach(),
	  because if tuner_ops.release was left defined,
	  this module would be 'put' twice on exit:
	  once by dvb_frontend_detach() and another by dvb_module_release().
	 
	  dvb_pll_release is instead executed in the i2c driver's .remove(),
	  keeping dvb_pll_attach untouched for legacy (dvb_attach) drivers.
 SPDX-License-Identifier: GPL-2.0-or-later
     Driver for ST STB6000 DVBS Silicon tuner
     Copyright (C) 2008 Igor M. Liplianin (liplianin@me.by)
 i2c details 
 vco=lo4 
 vco=lo2 
 is some i2c device here ? 
 SPDX-License-Identifier: GPL-2.0-only
    Sharp VA3A5JZ921 One Seg Broadcast Module driver
    This device is labeled as just S. 921 at the top of the frontend can
    Copyright (C) 2009-2010 Mauro Carvalho Chehab
    Copyright (C) 2009-2010 Douglas Landgraf <dougsland@redhat.com>
    Developed for Leadership SBTVD 1seg device sold in Brazil
    Frontend module based on cx24123 driver, getting some info from
 	the old s921 driver.
    FIXME: Need to port to DVB v5.2 API
 The Demod can't easily provide these, we cache them 
  Various tuner defaults need to be established for a given frequency kHz.
  fixme: The bounds on the bands do not match the doc in real life.
  fixme: Some of them have been moved, other might need adjustment.
 Probably, a reset sequence 
 Full Sync - We don't know what each bit means on regs 0x810x82 
 This is close to Full Sync, but not enough to get useful info 
 FIXME: Use the proper register for it... 0x80? 
 FIXME: We don't know how to use non-auto mode 
 FIXME: Probably it is possible to get it from regs f1 and f2 
 allocate memory for the internal state 
 setup the state 
 create dvb_frontend 
 Use dib8000 values per default 
		
		  Max should be 770MHz instead, according with Sharp docs,
		  but Leadership doc says it works up to 806 MHz. This is
		  required to get channel 69, used in Brazil
 SPDX-License-Identifier: GPL-2.0-or-later
    TDA10021  - Single Chip Cable Channel Receiver driver module
	       used on the Siemens DVB-C cards
    Copyright (C) 1999 Convergence Integrated Media GmbH <ralph@convergence.de>
    Copyright (C) 2004 Markus Schulz <msc@antzsystem.de>
		   Support for TDA10021
 configuration settings 
 Don't print an error message if the id is read.
get access to tuner
release access from tuner
_tda10021_writereg (fe, 0, 0);
Comment by markus
0x2A[3-0] == PDIV -> P multiplaying factor (P=PDIV+1)(default 0)
0x2A[4] == BYPPLL -> Power down mode (default 1)
0x2A[5] == LCK -> PLL Lock Flag
0x2A[6] == POLAXIN -> Polarity of the input reference clock (default 0)
Activate PLL
 Modulation  Conf  AGCref  LTHR  MSETH  AREF 
	
	  gcc optimizes the code below the same way as it would code:
	            "if (qam > 5) return -EINVAL;"
	  Yet, the code is clearer, as it shows what QAM standards are
	  supported by the driver, and avoids the usage of magic numbers on
	  it.
printk("tda10021: set frequency to %d qam=%d symrate=%d\n", p->frequency,qam,p->symbol_rate);
	
	  Bit 0 == 0 means roll-off = 0.15 (Annex A)
	 	 == 1 means roll-off = 0.13 (Annex C)
0x11[0] == EQALGO -> Equalizer algorithms state
0x11[1] == CARLOCK -> Carrier locked
0x11[2] == FSYNC -> Frame synchronisation
0x11[3] == FEL -> Front End locked
0x11[6] == NODVB -> DVB Mode Information
 the agc value is inverted 
 reset uncorrected block counter 
 AFC only valid when carrier has been recovered 
 pdown ADC 
 standby 
 allocate memory for the internal state 
 setup the state 
 check if the demod is there 
 Don't claim TDA10023 
 create dvb_frontend 
 SACLK64 == (XIN2)64 
 SACLK4 
 ppm   
FE_CAN_QAM_4
 SPDX-License-Identifier: GPL-2.0-or-later
    Legend Silicon LGS-8GL5 DMB-TH OFDM demodulator driver
    Copyright (C) 2008 Sirius International (Hong Kong) Limited
	Timothy Lee <timothy.lee@siriushk.com>
 Writes into demod's register 
 Reads from demod's register 
 Writes into alternate device's register 
 TODO:  Find out what that device is for! 
 Starts demodulation 
 Wait for carrier 
 Wait for lock 
 lgs8gl5_set_inversion(state, p->inversion); 
 Allocate memory for the internal state 
 Setup the state 
 Check if the demod is there 
 Create dvb_frontend 
 SPDX-License-Identifier: GPL-2.0
  Driver for the ST STV6111 tuner
  Copyright (C) 2014 Digital Devices GmbH
 Reg 
 reg 
 reg 
  This table is 6 dB too low comapred to the others (probably created with
  a different BB_MAG setting)
 reg 
 reg 
 LNA IIP3 Mode 
 Start cal vco,CF 
 LNA NF Mode 
 Assumes Table[0].RegValue < Table[imax].RegValue 
 RF Mode, Read AGC ADC 
 NF 
 IIP3 
 Channel Mode 
 NF 
 IIP3 
 Tilt correction ( 0.00016 dBMHz ) 
 + (BBGain  10); 
 SPDX-License-Identifier: GPL-2.0-or-later
  Realtek RTL2832U SDR driver
  Copyright (C) 2013 Antti Palosaari <crope@iki.fi>
  GNU Radio plugin "gr-kernel" for device usage will be on:
  https:git.linuxtv.organttipgr-kernel.git
 Original macro does not contain enough null pointer checks for our need 
 stream formats 
 intermediate buffers with raw data from the USB device 
 common v4l buffer stuff -- must be first 
 BIT(0) 
 BIT(1) 
 videobuf2 queue and queued buffers list 
 Protects queued_bufs 
 buffer sequence counter 
 Note if taking both locks v4l2_lock must always be locked first! 
 Protects everything else 
 Protects vb_queue and capt_file 
 Pointer to our usb_device, will be NULL after unplug 
 Both mutexes most be hold when setting! 
 vb is full and packets dropped 
 Controls 
 for sample rate calc 
 Private functions 
 native stream, no need to convert 
 convert u8 to u16 
 calculate sample rate and output it in 10 seconds intervals 
 total number of I+Q pairs 
  This gets called for the bulk stream pipe. This is done in interrupt
  time, so it has to be fast, not crash, and not stall. Neat.
 success 
 NAK 
 kill 
 error 
 get free framebuffer 
 fill framebuffer 
 stop the URB 
 free the URBs 
 allocate the URBs 
 Must be called with vb_queue_lock hold 
 Videobuf2 operations 
 Need at least 8 buffers 
 Don't allow queueing new buffers after device disconnection 
 Check the device has not disconnected between prep and queuing 
 get IF from tuner 
 program IF 
 BB  IF mode 
 POR: 0x1b1=0x1f, 0x008=0x0d, 0x006=0x80 
 disable Zero-IF 
 enable ADC I 
 enable Zero-IF, DC, IQ 
 enable ADC I, ADC Q 
 program sampling rate (resampling down) 
 low-pass filter 
 mode 
 FSM 
 PID filter 
 used RF tuner based settings 
 software reset 
 PID filter 
 mode 
 FSM 
	
	  tuner RF (Hz)
	
	  bandwidth (Hz)
 enable ADC 
 wake-up tuner 
 sleep tuner 
 disable ADC 
 ADC band midpoints 
 TODO: these controls should be moved to tuner drivers 
 Round towards the closest legal value 
 Platform driver interface 
 try to refcount host drv since we are the consumer 
 setup the state 
 Init videobuf2 queue structure 
 Register controls 
 Init video_device structure 
 Register the v4l2_device structure 
 No need to keep the urbs around after disconnection 
 SPDX-License-Identifier: GPL-2.0-only
  Driver for Zarlink zl10036 DVB-S silicon tuner
  Copyright (C) 2006 Tino Reichardt
  Copyright (C) 2007-2009 Matthias Schwarzott <zzam@gentoo.de>
  The data sheet for this tuner can be found at:
     http:www.mcmilk.deprojectsdvb-carddatasheetsZL10036.pdf
  This one is working: (at my Avermedia DVB-S Pro)
  - zl10036 (40pin, FTA)
  A driver for zl10038 should be very similar.
 This driver assumes the tuner is driven by a 10.111MHz Cristal 
 Some of the possible dividers:
    64, (write 0x05 to reg), freq step size   158kHz
    10, (write 0x0a to reg), freq step size 1.011kHz (used here)
     5, (write 0x09 to reg), freq step size 2.022kHz
 Power on Reset 
 Frequency & Phase Lock 
 readwrite for zl10036 and zl10038 
		 every 8bit-value satisifes this!
 regs 1213 
 open i2c_gate 
 close i2c_gate 
  register map of the ZL10036ZL10038
  reg[default] content
   2[0x00]:   0 | N14 | N13 | N12 | N11 | N10 |  N9 |  N8
   3[0x00]:  N7 |  N6 |  N5 |  N4 |  N3 |  N2 |  N1 |  N0
   4[0x80]:   1 |   0 | RFG | BA1 | BA0 | BG1 | BG0 | LEN
   5[0x00]:  P0 |  C1 |  C0 |  R4 |  R3 |  R2 |  R1 |  R0
   6[0xc0]:   1 |   1 |   0 |   0 | RSD |   0 |   0 |   0
   7[0x20]:  P1 | BF6 | BF5 | BF4 | BF3 | BF2 | BF1 |   0
   8[0xdb]:   1 |   1 |   0 |   1 |   0 |  CC |   1 |   1
   9[0x30]: VSD |  V2 |  V1 |  V0 |  S3 |  S2 |  S1 |  S0
  10[0xe1]:   1 |   1 |   1 |   0 |   0 | LS2 | LS1 | LS0
  11[0xf5]:  WS | WH2 | WH1 | WH0 | WL2 | WL1 | WL0 | WRE
  12[0xf0]:   1 |   1 |   1 |   1 |   0 |   0 |   0 |   0
  13[0x28]:  PD | BR4 | BR3 | BR2 | BR1 | BR0 | CLR |  TL
 fbw is measured in kHz 
   67: rsd=0 bf=0 
 1213: br=0xa clr=0 tl=0
 set RSD=1 
 ensure correct values 
 _XTAL  575kHz = 17 
 <= 28,82 MHz 
		
		   f(bw)=34,6MHz f(xtal)=10.111MHz
		   br = (1011134600)  63  1K = 14;
 ensure correct values 
	
	  k = 1.257
 ensure correct values 
 time = br(32 fxtal) 
		 minimal sleep time to be calculated
 default values 
 enable when using an lna 
 reg 4 
 P0=0 
	 ensure correct values
	
	  alpha = 1.35 for dvb-s
	  fBW = (alphasymbolrate)(20.8)
	  1.35  (20.8) = 27  32
 scale to kHz 
 Add safe margin of 3MHz 
 setting the charge pump - guessed values 
 open i2c_gate 
 wait for tuner lock - no idea if this is really needed 
 check Frequency & Phase Lock Bit 
 close i2c_gate 
 could also be one block from reg 2 to 13 and additional 1011 
   23: div=0x400 - arbitrary value 
   45: rfg=0 ba=1 bg=1 len=? 
        p0=0 c=0 r=_RDIV_REG 
   67: rsd=0 bf=0x10 
   89: from datasheet 
 1011: lock window level 
 1213: br=0xa clr=0 tl=0
 1011: unlock window level 
 invalid values to trigger writing 
 open i2c_gate 
 Only init if Power-on-Reset bit is set? 
 close i2c_gate 
 open i2c_gate 
 close i2c_gate 
 SPDX-License-Identifier: GPL-2.0-or-later
    Driver for Philips TDA8083 based QPSK Demodulator
    Copyright (C) 2001 Convergence Integrated Media GmbH
    written by Ralph Metzler <ralph@convergence.de>
    adoption to the new DVB frontend API and diagnostic ioctl's
    by Holger Waechtler <holger@convergence.de>
 configuration settings 
  XXX FIXME: implement other modes than FEC_AUTO 
 send burst A 
 send B 
 enable 
 send!! 
 frontend can not lock 
  FIXME: get symbolrate & frequency offset...
p->frequency = ???;
p->symbol_rate = tda8083_get_symbolrate (state);
 allocate memory for the internal state 
 setup the state 
 check if the demod is there 
 create dvb_frontend 
 TDA8060 
 TDA8060 
      .symbol_rate_tolerance	= ???,
 SPDX-License-Identifier: GPL-2.0-only
  Frontend driver for mobile DVB-T demodulator DiBcom 3000M-B
  DiBcom (http:www.dibcom.fr)
  Copyright (C) 2004-5 Patrick Boettcher (patrick.boettcher@posteo.de)
  based on GPL code from DibCom, which has
  Copyright (C) 2004 Amaury Demol for DiBcom
  Acknowledgements
   Amaury Demol from DiBcom for providing specs and driver
   sources, on which this driver (and the dvb-dibusb) are based.
  see Documentationdriver-apimediadriversdvb-usb.rst for more information
 Version information 
 auto search succeeded
 auto search failed
 auto search failed
 try again
 for auto search 
 fft,gua,   inv   
 fft 
 gua 
  0   0   { 0,1 } 
  0   1   { 0,1 } 
  1   0   { 0,1 } 
  1   1   { 0,1 } 
 wait for AGC lock 
 something has to be auto searched 
	stat = FE_HAS_SIGNAL | FE_HAS_CARRIER | FE_HAS_VITERBI | FE_HAS_SYNC | FE_HAS_LOCK;
	return 0;
}
static int dib3000mb_read_ber(struct dvb_frontend fe, u32 ber)
{
	struct dib3000_state state = fe->demodulator_priv;
	ber = ((rd(DIB3000MB_REG_BER_MSB) << 16) | rd(DIB3000MB_REG_BER_LSB));
	return 0;
}
 see dib3000-watch dvb-apps for exact calcuations of signal_strength and snr 
static int dib3000mb_read_signal_strength(struct dvb_frontend fe, u16 strength)
{
	struct dib3000_state state = fe->demodulator_priv;
	strength = rd(DIB3000MB_REG_SIGNAL_POWER)  0xffff  0x170;
	return 0;
}
static int dib3000mb_read_snr(struct dvb_frontend fe, u16 snr)
{
	struct dib3000_state state = fe->demodulator_priv;
	short sigpow = rd(DIB3000MB_REG_SIGNAL_POWER);
	int icipow = ((rd(DIB3000MB_REG_NOISE_POWER_MSB) & 0xff) << 16) |
		rd(DIB3000MB_REG_NOISE_POWER_LSB);
	snr = (sigpow << 8)  ((icipow > 0) ? icipow : 1);
	return 0;
}
static int dib3000mb_read_unc_blocks(struct dvb_frontend fe, u32 unc)
{
	struct dib3000_state state = fe->demodulator_priv;
	unc = rd(DIB3000MB_REG_PACKET_ERROR_RATE);
	return 0;
}
static int dib3000mb_sleep(struct dvb_frontend fe)
{
	struct dib3000_state state = fe->demodulator_priv;
	deb_info("dib3000mb is going to bed.\n");
	wr(DIB3000MB_REG_POWER_CONTROL, DIB3000MB_POWER_DOWN);
	return 0;
}
static int dib3000mb_fe_get_tune_settings(struct dvb_frontend fe, struct dvb_frontend_tune_settings tune)
{
	tune->min_delay_ms = 800;
	return 0;
}
static int dib3000mb_fe_init_nonmobile(struct dvb_frontend fe)
{
	return dib3000mb_fe_init(fe, 0);
}
static int dib3000mb_set_frontend_and_tuner(struct dvb_frontend fe)
{
	return dib3000mb_set_frontend(fe, 1);
}
static void dib3000mb_release(struct dvb_frontend fe)
{
	struct dib3000_state state = fe->demodulator_priv;
	kfree(state);
}
 pid filter and transfer stuff 
static int dib3000mb_pid_control(struct dvb_frontend fe,int index, int pid,int onoff)
{
	struct dib3000_state state = fe->demodulator_priv;
	pid = (onoff ? pid | DIB3000_ACTIVATE_PID_FILTERING : 0);
	wr(index+DIB3000MB_REG_FIRST_PID,pid);
	return 0;
}
static int dib3000mb_fifo_control(struct dvb_frontend fe, int onoff)
{
	struct dib3000_state state = fe->demodulator_priv;
	deb_xfer("%s fifo\n",onoff ? "enabling" : "disabling");
	if (onoff) {
		wr(DIB3000MB_REG_FIFO, DIB3000MB_FIFO_ACTIVATE);
	} else {
		wr(DIB3000MB_REG_FIFO, DIB3000MB_FIFO_INHIBIT);
	}
	return 0;
}
static int dib3000mb_pid_parse(struct dvb_frontend fe, int onoff)
{
	struct dib3000_state state = fe->demodulator_priv;
	deb_xfer("%s pid parsing\n",onoff ? "enabling" : "disabling");
	wr(DIB3000MB_REG_PID_PARSE,onoff);
	return 0;
}
static int dib3000mb_tuner_pass_ctrl(struct dvb_frontend fe, int onoff, u8 pll_addr)
{
	struct dib3000_state state = fe->demodulator_priv;
	if (onoff) {
		wr(DIB3000MB_REG_TUNER, DIB3000_TUNER_WRITE_ENABLE(pll_addr));
	} else {
		wr(DIB3000MB_REG_TUNER, DIB3000_TUNER_WRITE_DISABLE(pll_addr));
	}
	return 0;
}
static const struct dvb_frontend_ops dib3000mb_ops;
struct dvb_frontend dib3000mb_attach(const struct dib3000_config config,
				      struct i2c_adapter i2c, struct dib_fe_xfer_ops xfer_ops)
{
	struct dib3000_state state = NULL;
	 allocate memory for the internal state 
	state = kzalloc(sizeof(struct dib3000_state), GFP_KERNEL);
	if (state == NULL)
		goto error;
	 setup the state 
	state->i2c = i2c;
	memcpy(&state->config,config,sizeof(struct dib3000_config));
	 check for the correct demod 
	if (rd(DIB3000_REG_MANUFACTOR_ID) != DIB3000_I2C_ID_DIBCOM)
		goto error;
	if (rd(DIB3000_REG_DEVICE_ID) != DIB3000MB_DEVICE_ID)
		goto error;
	 create dvb_frontend 
	memcpy(&state->frontend.ops, &dib3000mb_ops, sizeof(struct dvb_frontend_ops));
	state->frontend.demodulator_priv = state;
	 set the xfer operations 
	xfer_ops->pid_parse = dib3000mb_pid_parse;
	xfer_ops->fifo_ctrl = dib3000mb_fifo_control;
	xfer_ops->pid_ctrl = dib3000mb_pid_control;
	xfer_ops->tuner_pass_ctrl = dib3000mb_tuner_pass_ctrl;
	return &state->frontend;
error:
	kfree(state);
	return NULL;
}
static const struct dvb_frontend_ops dib3000mb_ops = {
	.delsys = { SYS_DVBT },
	.info = {
		.name			= "DiBcom 3000M-B DVB-T",
		.frequency_min_hz	=  44250  kHz,
		.frequency_max_hz	= 867250  kHz,
		.frequency_stepsize_hz	= 62500,
		.caps = FE_CAN_INVERSION_AUTO |
				FE_CAN_FEC_1_2 | FE_CAN_FEC_2_3 | FE_CAN_FEC_3_4 |
				FE_CAN_FEC_5_6 | FE_CAN_FEC_7_8 | FE_CAN_FEC_AUTO |
				FE_CAN_QPSK | FE_CAN_QAM_16 | FE_CAN_QAM_64 | FE_CAN_QAM_AUTO |
				FE_CAN_TRANSMISSION_MODE_AUTO |
				FE_CAN_GUARD_INTERVAL_AUTO |
				FE_CAN_RECOVER |
				FE_CAN_HIERARCHY_AUTO,
	},
	.release = dib3000mb_release,
	.init = dib3000mb_fe_init_nonmobile,
	.sleep = dib3000mb_sleep,
	.set_frontend = dib3000mb_set_frontend_and_tuner,
	.get_frontend = dib3000mb_get_frontend,
	.get_tune_settings = dib3000mb_fe_get_tune_settings,
	.read_status = dib3000mb_read_status,
	.read_ber = dib3000mb_read_ber,
	.read_signal_strength = dib3000mb_read_signal_strength,
	.read_snr = dib3000mb_read_snr,
	.read_ucblocks = dib3000mb_read_unc_blocks,
};
MODULE_AUTHOR(DRIVER_AUTHOR);
MODULE_DESCRIPTION(DRIVER_DESC);
MODULE_LICENSE("GPL");
EXPORT_SYMBOL(dib3000mb_attach);
 SPDX-License-Identifier: GPL-2.0
  cxd2099.c: Driver for the Sony CXD2099AR Common Interface Controller
  Copyright (C) 2010-2013 Digital Devices GmbH
 device access lock 
 IO mem 
 ATT mem 
		 TOSTRT = 8, Mode B (gated clock), falling Edge,
		  Serial, POL=HIGH, MSB
 bitrate2^13 72000 
 D 
 C 
 Put TS in bypass 
 Reset CAM Mode 
 Clear IO Mode 
 read it anyway or cxd may hang 
  Copyright (c), 2004-2005,2007-2010 Trident Microsystems, Inc.
  All rights reserved.
  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:
   Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimer.
   Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
	andor other materials provided with the distribution.
   Neither the name of Trident Microsystems nor Hauppauge Computer Works
    nor the names of its contributors may be used to endorse or promote
	products derived from this software without specific prior written
	permission.
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  POSSIBILITY OF SUCH DAMAGE.
  DRXJ specific implementation of DRX driver
  authors: Dragan Savic, Milos Nikolic, Mihajlo Katona, Tao Ding, Paul Janssen
  The Linux DVB Driver for Micronas DRX39xx family (drx3933j) was
  written by Devin Heitmueller <devin.heitmueller@kernellabs.com>
  This program is free software; you can redistribute it andor modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
-----------------------------------------------------------------------------
INCLUDE FILES
============================================================================
=== DEFINES ================================================================
============================================================================
 \brief Maximum u32 value.
 Customer configurable hardware settings, etc 
 START DJCOMBO patches to DRXJ registermap constants 
 registermap 200706071303 from drxj 
 END DJCOMBO patches to DRXJ registermap 
 #define DRX_DEBUG 
-----------------------------------------------------------------------------
ENUMS
-----------------------------------------------------------------------------
DEFINES
 \def DRXJ_DEF_I2C_ADDR
 \brief Default I2C address of a demodulator instance.
 \def DRXJ_DEF_DEMOD_DEV_ID
 \brief Default device identifier of a demodultor instance.
 \def DRXJ_SCAN_TIMEOUT
 \brief Timeout value for waiting on demod lock during channel scan (millisec).
 \def HI_I2C_DELAY
 \brief HI timing delay for I2C timing (in nano seconds)
  Used to compute HI_CFG_DIV
 \def HI_I2C_BRIDGE_DELAY
 \brief HI timing delay for I2C timing (in nano seconds)
  Used to compute HI_CFG_BDL
 \brief Time Window for MER and SER Measurement in Units of Segment duration.
 \brief bit rate and segment rate constants used for SER and BER.
 values taken from the QAM microcode 
 \brief Min supported symbolrates.
 \brief Max supported symbolrates.
 \def DRXJ_QAM_MAX_WAITTIME
 \brief Maximal wait time for QAM auto constellation in ms
 \def SCU status and results
 \brief SCU
 ms 
 1 sec 
 n sec 
 \def DRX_AUD_MAX_DEVIATION
 \brief Needed for calculation of prescale feature in AUD
 kHz 
 \brief Needed for calculation of NICAM prescale feature in AUD
 dB 
 \brief Needed for calculation of NICAM prescale feature in AUD
 ms 
 ATV config changed flags 
 UIO define 
  MICROCODE RELATED DEFINES
 Magic word for checking correct Endianness of microcode data 
 CRC flag in ucode header, flags field. 
  Maximum size of buffer used to verify the microcode.
  Must be an even number
  Power mode macros
 Pin safe mode macro 
============================================================================
=== GLOBAL VARIABLEs =======================================================
============================================================================
 \brief Temporary register definitions.
        (register definitions that are not yet available in register master)
 Audio block 0x103 is write only. To avoid shadowing in driver accessing   
 RAM addresses directly. This must be READ ONLY to avoid problems.         
 Writing to the interface addresses are more than only writing the RAM     
 locations                                                                 
 \brief RAM location of MODUS registers
 \brief RAM location of I2S config registers
 \brief RAM location of DCO config registers
 \brief RAM location of Threshold registers
 \brief RAM location of Carrier Threshold registers
 \brief FM Matrix register fix
============================================================================
 \brief Defines required for audio
 \brief Needed for calculation of prescale feature in AUD
 kHz 
 \brief Needed for calculation of NICAM prescale feature in AUD
 dB 
============================================================================
 Values for I2S MasterSlave pin configurations 
============================================================================
=== REGISTER ACCESS MACROS =================================================
============================================================================
 This macro is used to create byte arrays for block writes.
 Block writes speed up I2C traffic between host and demod.
 The macro takes care of the required byte order in a 16 bits word.
 x -> lowbyte(x), highbyte(x)
 This macro is used to convert byte array to 16 bit register value for block read.
 Block read speed up I2C traffic between host and demod.
 The macro takes care of the required byte order in a 16 bits word.
============================================================================
=== MISC DEFINES ===========================================================
============================================================================
============================================================================
=== HI COMMAND RELATED DEFINES =============================================
============================================================================
 \brief General maximum number of retries for ucode command interfaces
============================================================================
=== STANDARD RELATED MACROS ================================================
============================================================================
-----------------------------------------------------------------------------
GLOBAL VARIABLES
  DRXJ DAP structures
 has_lna : true if LNA (aka PGA) present      
 has_oob : true if OOB supported              
 has_ntsc: true if NTSC supported             
 has_btsc: true if BTSC supported             
 has_smatx: true if SMA_TX pin is available   
 has_smarx: true if SMA_RX pin is available   
 has_gpio : true if GPIO pin is available     
 has_irqn : true if IRQN pin is available     
 mfx A1A2A... 
 tuner settings 
 tuner mirrors RF signal    
 standardchannel settings 
 current standard           
 constellation              
 frequency in KHz           
 curr_bandwidth              
 mirror                     
 signal quality information: 
 default values taken from the QAM Programming guide 
   fec_bits_desired should not be less than 4000000    
 fec_bits_desired    
 fec_vd_plen         
 qam_vd_prescale     
 qamVDPeriod       
 fec_rs_plen annex A 
 fec_rs_prescale     
 fec_rs_period     
 reset_pkt_err_acc    
 pkt_err_acc_start    
 HI configuration 
 hi_cfg_timing_div    
 hi_cfg_bridge_delay  
 hi_cfg_wake_up_key    
 hi_cfg_ctrl         
 HICfgTimeout      
 UIO configuration 
 uio_sma_rx_mode      
 uio_sma_tx_mode      
 uioASELMode       
 uio_irqn_mode       
 FS setting 
 iqm_fs_rate_ofs      
 pos_image          
 RC setting 
 iqm_rc_rate_ofs      
 AUD information 
   false,                   flagSetAUDdone    
   false,                   detectedRDS       
   true,                    flagASDRequest    
   false,                   flagHDevClear     
   false,                   flagHDevSet       
   (u16) 0xFFF,           rdsLastCount      
 ATV configuration 
 flags cfg changes 
 shadow of ATV_TOP_EQU0__A 
 shadow of ATV_TOP_EQU1__A 
 shadow of ATV_TOP_EQU2__A 
 shadow of ATV_TOP_EQU3__A 
 flag: true=bypass             
 shadow of ATV_TOP_VID_PEAK__A 
 shadow of ATV_TOP_NOISE_TH__A 
 flag CVBS output enable       
 flag SIF output enable        
 current SIF att setting       
 qam_rf_agc_cfg 
 standard            
 ctrl_mode            
 output_level         
 min_output_level      
 max_output_level      
 speed               
 top                 
 c.o.c.              
 qam_if_agc_cfg 
 standard            
 ctrl_mode            
 output_level         
 min_output_level      
 max_output_level      
 speed               
 top    (don't care) 
 c.o.c. (don't care) 
 vsb_rf_agc_cfg 
 standard       
 ctrl_mode       
 output_level    
 min_output_level 
 max_output_level 
 speed          
 top    (don't care) 
 c.o.c. (don't care) 
 vsb_if_agc_cfg 
 standard       
 ctrl_mode       
 output_level    
 min_output_level 
 max_output_level 
 speed          
 top    (don't care) 
 c.o.c. (don't care) 
 qam_pga_cfg 
 vsb_pga_cfg 
 qam_pre_saw_cfg 
 standard  
 reference 
 use_pre_saw 
 vsb_pre_saw_cfg 
 standard  
 reference 
 use_pre_saw 
 Version information 
 human readable version microcode             
 human readable version device specific code  
 struct drx_version for microcode                   
 struct drx_version for device specific code 
 struct drx_version_list for microcode 
 struct drx_version_list for device specific code 
 smart_ant_inverted 
 Tracking filter setting for OOB  
 oob_power_on           
 mpeg_ts_static_bitrate  
 disable_te_ihandling   
 bit_reverse_mpeg_outout 
 mpeg_output_clock_rate 
 mpeg_start_width 
 Pre SAW & Agc configuration for ATV 
 standard     
 reference    
 use_pre_saw    
 ATV RF-AGC 
 standard              
 ctrl_mode              
 output_level           
 min_output_level (d.c.) 
 max_output_level (d.c.) 
 speed                 
 top                   
 cut-off current       
 ATV IF-AGC 
 standard              
 ctrl_mode              
 output_level           
 min_output_level (d.c.) 
 max_output_level (d.c.) 
 speed                 
 top                   
 c.o.c.         (d.c.) 
 ATV PGA config 
 curr_symbol_rate 
 pdr_safe_mode     
 pdr_safe_restore_val_gpio  
 pdr_safe_restore_val_v_sync 
 pdr_safe_restore_val_sma_rx 
 pdr_safe_restore_val_sma_tx 
 oob_pre_saw            
 oob_lo_pow             
 aud_data, only first member 
 \var drxj_default_addr_g
 \brief Default I2C address and device identifier.
 i2c address 
 device id 
 \var drxj_default_comm_attr_g
 \brief Default common attributes of a drxj demodulator instance.
 ucode file           
 ucode verify switch  
 version record       
 IF in kHz in case no tuner instance is used  
 system clock frequency in kHz                
 oscillator frequency kHz                     
 oscillator deviation in ppm, signed          
 If true mirror frequency spectrum            
 MPEG output configuration 
 If true, enable MPEG output   
 If true, insert RS byte       
 If true, parallel out otherwise serial 
 If true, invert DATA signals  
 If true, invert ERR signal    
 If true, invert STR signals   
 If true, invert VAL signals   
 If true, invert CLK signals   
	 true,			 If true, static MPEG clockrate will
				   be used, otherwise clockrate will
	 19392658UL,		 Maximum bitrate in bs in case
 MPEG Start width in clock cycles 
	 Initilisations below can be omitted, they require no user input and
	   are initially 0, NULL or false. The compiler will initialize them to these
 is_opened 
 SCAN 
 no scan params yet               
 current scan index               
 next scan frequency              
 scan ready flag                  
 max channels to scan             
 nr of channels scanned           
 default scan function            
 default context pointer          
 millisec to wait for demod lock  
 desired lock               
 Power management 
 Tuner 
 nr of I2C port to which tuner is    
 minimum RF input frequency, in kHz  
 maximum RF input frequency, in kHz  
 Rf Agc Polarity                     
 If Agc Polarity                     
 tuner slow mode                     
 current channel (all 0)             
 channel.frequency 
 current standard 
 previous standard 
 di_cache_standard   
 use_bootloader 
 capabilities 
 mfx 
 \var drxj_default_demod_g
 \brief Default drxj demodulator instance.
 i2c address & device id 
 demod common attributes 
 demod device specific attributes 
 \brief Default audio data structure for DRK demodulator instance.
 This structure is DRXK specific.
 audio_is_active 
 audio_standard  
 i2sdata 
 output_enable   
 frequency      
 mode           
 word_length     
 polarity       
 format         
 volume            
 mute;          
 volume         
 avc_mode        
 avc_ref_level    
 avc_max_gain     
 avc_max_atten    
 strength_left   
 strength_right  
 auto_sound 
  ass_thresholds 
 A2    
 BTSC  
 NICAM 
 carrier 
 a 
 thres 
 opt   
 shift 
 dco   
 b 
 thres 
 opt   
 shift 
 dco   
 mixer 
 source_i2s 
 matrix_i2s 
 matrix_fm  
 deviation 
 av_sync 
 prescale 
 fm_deviation 
 nicam_gain 
 deemph 
 btsc_detect 
 rds_data_counter 
 rds_data_present 
-----------------------------------------------------------------------------
STRUCTURES
 HI command 
============================================================================
=== MICROCODE RELATED STRUCTURES ===========================================
============================================================================
  struct drxu_code_block_hdr - Structure of the microcode block headers
  @addr:	Destination address of the data in this block
  @size:	Size of the block data following this header counted in
 		16 bits words
  @CRC:	CRC value of the data block, only valid if CRC flag is
 		set.
-----------------------------------------------------------------------------
FUNCTIONS
 Some prototypes 
============================================================================
============================================================================
==                          HELPER FUNCTIONS                              ==
============================================================================
============================================================================
============================================================================
 \fn u32 frac28(u32 N, u32 D)
 \brief Compute: (1<<28)ND
 \param N 32 bits
 \param D 32 bits
 \return (1<<28)ND
 This function is used to avoid floating-point calculations as they may
 not be present on the target platform.
 frac28 performs an unsigned 2828 bits division to 32-bit fixed point
 fraction used for setting the Frequency Shifter registers.
 N and D can hold numbers up to width: 28-bits.
 The 4 bits integer part and the 28 bits fractional part are calculated.
 Usage condition: ((1<<28)n)d < ((1<<32)-1) => (nd) < 15.999
 N: 0...(1<<28)-1 = 268435454
 D: 0...(1<<28)-1
 Q: 0...(1<<32)-1
 32-28 == 4 shifts possible at max 
	Q1 = N  D;		 integer part, only the 4 least significant bits
 division using radix 16, 7 nibbles in the result 
 rounding 
 \fn u32 log1_times100( u32 x)
 \brief Compute: 100log10(x)
 \param x 32 bits
 \return 100log10(x)
 100log10(x)
 = 100(log2(x)log2(10)))
 = (100(2^15)log2(x))((2^15)log2(10))
 = ((200(2^15)log2(x))((2^15)log2(10)))2
 = ((200(2^15)(log2(xy)+log2(y)))((2^15)log2(10)))2
 = ((200(2^15)log2(xy))+(200(2^15)log2(y)))((2^15)log2(10)))2
 where y = 2^k and 1<= (xy) < 2
	
	   log2lut[n] = (1<<scale)  200  log2( 1.0 + ( (1.0(1<<INDEXWIDTH))  n ))
	   0 <= n < ((1<<INDEXWIDTH)+1)
 0.000000 
 290941.300628 
 573196.476418 
 847269.179851 
 1113620.489452 
 1372673.576986 
 1624817.752104 
 1870411.981536 
 2109787.962654 
 2343252.817465 
 2571091.461923 
 2793568.696416 
 3010931.055901 
 3223408.452106 
 3431215.635215 
 3634553.498355 
 3833610.244726 
 4028562.434393 
 4219575.925308 
 4406806.721144 
 4590401.736809 
 4770499.491025 
 4947230.734179 
 5120719.018555 
 5291081.217197 
 5458427.996830 
 5622864.249668 
 5784489.488298 
 5943398.207380 
 6099680.215452 
 6253420.939751 
 6404701.706649 
 6553600.000000 
 Scale x (normalize) 
 computing y in log(xy) = log(x) - log(y) 
	
	   Now x has binary point between bit[scale] and bit[scale-1]
 correction for division: log(x) = log(xy)+log(y) 
 remove integer part 
 get index 
 compute delta (x-a) 
 compute log, multiplication ( d (.. )) must be within range ! 
 Conver to log10() 
 (log2(10) << scale) 
 rounding 
 \fn u32 frac_times1e6( u16 N, u32 D)
 \brief Compute: (ND)  1000000.
 \param N nominator 16-bits.
 \param D denominator 32-bits.
 \return u32
 \retval ((ND)  1000000), 32 bits
 No check on D=0!
	
	   frac = (N  1000000)  D
	   To let it fit in a 32 bits computation:
	   frac = (N  (1000000 >> 4))  (D >> 4)
	   This would result in a problem in case D < 16 (div by 0).
	   So we do it more elaborate as shown below.
============================================================================
 \brief Values for NICAM prescaler gain. Computed from dB to integer
        and rounded. For calc used formula: 1610^(prescaleGain[dB]20).
 Currently, unused as we lack support for analog TV 
============================================================================
==                        END HELPER FUNCTIONS                            ==
============================================================================
============================================================================
============================================================================
==                      DRXJ DAP FUNCTIONS                                ==
============================================================================
============================================================================
   This layer takes care of some device specific register access protocols:
   -conversion to short address format
   -access to audio block
   This layer is placed between the drx_dap_fasi and the rest of the drxj
   specific implementation. This layer can use address map knowledge whereas
   dap_fasi may not use memory map knowledge.
    For audio currently only 16 bits read and write register access is
     supported. More is not needed. RMW and 32 or 8 bit access on audio
     registers will have undefined behaviour. Flags (RMW, CRC reset, broadcast
     singlemulti master) will be ignored.
   TODO: check ignoring singlemultimaster is ok for AUD access ?
 millisec 
============================================================================
 \fn bool is_handled_by_aud_tr_if( u32 addr )
 \brief Check if this address is handled by the audio token ring interface.
 \param addr
 \return bool
 \retval true  Yes, handled by audio token ring interface
 \retval false No, not handled by audio token ring interface
============================================================================
 Read only 
 Write only 
 Both write and read 
============================================================================
 int drxdap_fasi_read_block (
      struct i2c_device_addr dev_addr,      -- address of I2C device
      u32 addr,         -- address of chip registermemory
      u16            datasize,     -- number of bytes to read
      u8 data,         -- data to receive
      u32 flags)        -- special device flags
 Read block data from chip address. Because the chip is word oriented,
 the number of bytes to read must be even.
 Make sure that the buffer to receive the data is large enough.
 Although this function expects an even number of bytes, it is still byte
 oriented, and the data read back is NOT translated to the endianness of
 the target platform.
 Output:
 - 0     if reading was successful
                  in that case: data read is in data.
 - -EIO  if anything went wrong
 Check parameters  
 ReadModifyWrite & mode flag bits are not allowed 
 Read block from I2C  
 short format address preferred but long format otherwise 
		
		  In single master mode, split the read and write actions.
		  No special action is needed for write chunks here.
 In multi master mode, do everything in one RW action 
 int drxdap_fasi_read_reg16 (
     struct i2c_device_addr dev_addr, -- address of I2C device
     u32 addr,    -- address of chip registermemory
     u16 data,    -- data to receive
     u32 flags)   -- special device flags
 Read one 16-bit register or memory location. The data received back is
 converted back to the target platform's endianness.
 Output:
 - 0     if reading was successful
                  in that case: read data is at data
 - -EIO  if anything went wrong
 int drxdap_fasi_read_reg32 (
     struct i2c_device_addr dev_addr, -- address of I2C device
     u32 addr,    -- address of chip registermemory
     u32 data,    -- data to receive
     u32 flags)   -- special device flags
 Read one 32-bit register or memory location. The data received back is
 converted back to the target platform's endianness.
 Output:
 - 0     if reading was successful
                  in that case: read data is at data
 - -EIO  if anything went wrong
 int drxdap_fasi_write_block (
      struct i2c_device_addr dev_addr,    -- address of I2C device
      u32 addr,       -- address of chip registermemory
      u16            datasize,   -- number of bytes to read
      u8 data,       -- data to receive
      u32 flags)      -- special device flags
 Write block data to chip address. Because the chip is word oriented,
 the number of bytes to write must be even.
 Although this function expects an even number of bytes, it is still byte
 oriented, and the data being written is NOT translated from the endianness of
 the target platform.
 Output:
 - 0     if writing was successful
 - -EIO  if anything went wrong
 Check parameters  
 Write block to I2C  
 Buffer device address 
 short format address preferred but long format otherwise 
		
		   In single master mode block_size can be 0. In such a case this I2C
		   sequense will be visible: (1) write address {i2c addr,
		   4 bytes chip address} (2) write data {i2c addr, 4 bytes data }
		   (3) write address (4) write data etc...
		   Address must be rewritten because HI is reset after data transport and
		   expects an address.
 write device address 
 at the end, return the first error encountered 
 write (address if can do and) data 
 at the end, return the first error encountered 
 int drxdap_fasi_write_reg16 (
     struct i2c_device_addr dev_addr, -- address of I2C device
     u32 addr,    -- address of chip registermemory
     u16            data,    -- data to send
     u32 flags)   -- special device flags
 Write one 16-bit register or memory location. The data being written is
 converted from the target platform's endianness to little endian.
 Output:
 - 0     if writing was successful
 - -EIO  if anything went wrong
 int drxdap_fasi_read_modify_write_reg16 (
      struct i2c_device_addr dev_addr,   -- address of I2C device
      u32 waddr,     -- address of chip registermemory
      u32 raddr,     -- chip address to read back from
      u16            wdata,     -- data to send
      u16 rdata)     -- data to receive back
 Write 16-bit data, then read back the original contents of that location.
 Requires long addressing format to be allowed.
 Before sending data, the data is converted to little endian. The
 data received back is converted back to the target platform's endianness.
 WARNING: This function is only guaranteed to work if there is one
 master on the I2C bus.
 Output:
 - 0     if reading was successful
                  in that case: read back data is at rdata
 - -EIO  if anything went wrong
 int drxdap_fasi_write_reg32 (
     struct i2c_device_addr dev_addr, -- address of I2C device
     u32 addr,    -- address of chip registermemory
     u32            data,    -- data to send
     u32 flags)   -- special device flags
 Write one 32-bit register or memory location. The data being written is
 converted from the target platform's endianness to little endian.
 Output:
 - 0     if writing was successful
 - -EIO  if anything went wrong
============================================================================
 \fn int drxj_dap_rm_write_reg16short
 \brief Read modify write 16 bits audio register using short format only.
 \param dev_addr
 \param waddr    Address to write to
 \param raddr    Address to read from (usually SIO_HI_RA_RAM_S0_RMWBUF__A)
 \param wdata    Data to write
 \param rdata    Buffer for data to read
 \return int
 \retval 0 Success
 \retval -EIO Timeout, I2C error, illegal bank
 16 bits register read modify write access using short addressing format only.
 Requires knowledge of the registermap, thus device dependent.
 Using DAP FASI directly to avoid endless recursion of RMWs to audio registers.
 TODO correct define should be #if ( DRXDAPFASI_SHORT_ADDR_ALLOWED==1 )
 Set RMW flag 
 Write new data: triggers RMW 
 Read old data 
 Reset RMW flag 
============================================================================
	 TODO: correct shortlong addressing format decision,
	   now long format has higher prio then short because short also
============================================================================
 \fn int drxj_dap_read_aud_reg16
 \brief Read 16 bits audio register
 \param dev_addr
 \param addr
 \param data
 \return int
 \retval 0 Success
 \retval -EIO Timeout, I2C error, illegal bank
 16 bits register read access via audio token ring interface.
 No read possible for bank 3, return with error 
 Force reset write bit 
 Set up read 
 RMW to aud TR IF until request is granted or timeout 
 if ( DRXDAP_FASI_ADDR2BANK(addr)!=3 ) 
 Wait for read ready status or timeout 
 while ( ... ) 
 Read value 
============================================================================
 Check param 
============================================================================
 \fn int drxj_dap_write_aud_reg16
 \brief Write 16 bits audio register
 \param dev_addr
 \param addr
 \param data
 \return int
 \retval 0 Success
 \retval -EIO Timeout, I2C error, illegal bank
 16 bits register write access via audio token ring interface.
 No write possible for bank 2, return with error 
 Force write bit 
 RMW to aud TR IF until request is granted or timeout 
 if ( DRXDAP_FASI_ADDR2BANK(addr)!=2 ) 
============================================================================
 Check param 
============================================================================
 Free data ram in SIO HI 
 \fn int drxj_dap_atomic_read_write_block()
 \brief Basic access routine for atomic read or write access
 \param dev_addr  pointer to i2c dev address
 \param addr     destinationsource address
 \param datasize size of data buffer in bytes
 \param data     pointer to data buffer
 \return int
 \retval 0 Success
 \retval -EIO Timeout, I2C error, illegal bank
 Parameter check 
 Set up HI parameters to read or write n bytes 
 write data to buffer 
 read data from buffer 
============================================================================
 \fn int drxj_dap_atomic_read_reg32()
 \brief Atomic read of 32 bits words
============================================================================
============================================================================
==                        END DRXJ DAP FUNCTIONS                          ==
============================================================================
============================================================================
============================================================================
==                      HOST INTERFACE FUNCTIONS                          ==
============================================================================
============================================================================
 \fn int hi_cfg_command()
 \brief Configure HI with settings stored in the demod structure.
 \param demod Demodulator.
 \return int.
 This routine was created because to much orthogonal settings have
 been put into one HI API function (configure). Especially the I2C bridge
 enabledisable should not need re-configuration of the HI.
 Reset power down flag (set one call only) 
 \fn int hi_command()
 \brief Configure HI with settings stored in the demod structure.
 \param dev_addr I2C address.
 \param cmd HI command.
 \param result HI command result.
 \return int.
 Sends command to HI
 Write parameters 
 No parameters 
 Write command 
 Detect power down to omit reading result 
 Wait until command rdy 
 Read result 
 if ( powerdown_cmd == true ) 
 \fn int init_hi( const struct drx_demod_instance demod )
 \brief Initialise and configurate HI.
 \param demod pointer to demod data.
 \return int Return status.
 \retval 0 Success.
 \retval -EIO Failure.
 Needs to know Psys (System Clock period) and Posc (Osc Clock period)
 Need to store configuration in driver because of the way I2C
 bridging is controlled.
 PATCH for bug 5003, HI ucode v3.1.0 
 Timing div, 250nsPsys 
 Timing div, = ( delay (nano seconds)  sysclk (kHz) ) 1000 
 Clipping 
 Bridge delay, uses oscilator clock 
 Delay = ( delay (nano seconds)  oscclk (kHz) ) 1000 
 SDA brdige delay 
 Clipping 
 SCL bridge delay, same as SDA for now 
	 Wakeup key, setting the read flag (as suggest in the documentation) does
	   not always result into a working solution (barebones worked VI2C failed).
 portbridgepower down ctrl 
 transit mode time out delay and watch dog divider 
============================================================================
==                   END HOST INTERFACE FUNCTIONS                         ==
============================================================================
============================================================================
============================================================================
==                        AUXILIARY FUNCTIONS                             ==
============================================================================
============================================================================
 \fn int get_device_capabilities()
 \brief Get and store device capabilities.
 \param demod  Pointer to demodulator instance.
 \return int.
 \return 0    Success
 \retval -EIO Failure
 Depending on pulldowns on MDx pins the following internals are set:
   common_attr->osc_clock_freq
   ext_attr->has_lna
   ext_attr->has_ntsc
   ext_attr->has_btsc
   ext_attr->has_oob
 ignore (bypass ?) 
 27 MHz 
 20.25 MHz 
 4 MHz 
	
	   Determine device capabilities
	   Based on pinning v47
 Unknown device variant 
 \fn int power_up_device()
 \brief Power up device.
 \param demod  Pointer to demodulator instance.
 \return int.
 \return 0    Success
 \retval -EIO Failure, I2C or max retries reached
	
	  I2C access may fail in this case: no ack
	  dummy write must be used to wake uop device, dummy read must be used to
	  reset HI state machine (avoiding actual writes)
 Need some recovery time .... 
----------------------------------------------------------------------------
 MPEG Output Configuration Functions - begin                                
----------------------------------------------------------------------------
 \fn int ctrl_set_cfg_mpeg_output()
 \brief Set MPEG output configuration of the device.
 \param devmod  Pointer to demodulator instance.
 \param cfg_data Pointer to mpeg output configuaration.
 \return int.
  Configure MPEG output parameters.
 data mask for the output data byte 
 check arguments 
		 quick and dirty patch to set MPEG in case current std is not
 2048 bytes fifo ram 
 Low Water Mark for synchronization  
 High Water Mark for synchronization 
 ext_attr->constellation 
 max_bit_rate = symbol_rate  nr_bits  coef 
 coef = 188204                          
 as bc Annex AC need following settings 
 switch (standard) 
 Check insertion of the Reed-Solomon parity bytes 
 enable parity symbol forward 
 MVAL disable during parity bytes 
 insert_rs_byte = true -> coef = 188188 -> 1, RS bits are in MPEG output 
 ext_attr->standard 
 insert_rs_byte == false 
 disable parity symbol forward 
 MVAL enable during parity bytes 
 insert_rs_byte = false -> coef = 188204, RS bits not in MPEG output 
 ext_attr->standard 
 MPEG data output is parallel -> clear ipr_mode[0] 
 MPEG data output is serial -> set ipr_mode[0] 
 Control slective inversion of output bits 
 Static mode 
 Dynamic mode 
 Write appropriate registers with requested configuration 
 enabling for both parallel and serial now 
  Write magic word to enable pdr reg write 
  Set MPEG TS pads to outputmode 
 MPEG data output is parallel -> set MD1 to MD7 to output mode 
 MPEG data output is serial -> set MD1 to MD7 to tri-state 
  Enable Monitor Bus output over MPEG pads and ctl input 
  Write nomagic word to enable pdr reg write 
  Write magic word to enable pdr reg write 
  Set MPEG TS pads to inputmode 
 Enable Monitor Bus output over MPEG pads and ctl input 
 Write nomagic word to enable pdr reg write 
 save values for restore after re-acquire 
----------------------------------------------------------------------------
----------------------------------------------------------------------------
 MPEG Output Configuration Functions - end                                  
----------------------------------------------------------------------------
----------------------------------------------------------------------------
 miscellaneous configurations - begin                           
----------------------------------------------------------------------------
 \fn int set_mpegtei_handling()
 \brief Activate MPEG TEI handling settings.
 \param devmod  Pointer to demodulator instance.
 \return int.
 This routine should be called during a set channel of QAMVSB
 reset to default, allow TEI bit to be changed 
 do not change TEI bit 
----------------------------------------------------------------------------
 \fn int bit_reverse_mpeg_output()
 \brief Set MPEG output bit-endian settings.
 \param devmod  Pointer to demodulator instance.
 \return int.
 This routine should be called during a set channel of QAMVSB
 reset to default (normal bit order) 
----------------------------------------------------------------------------
 \fn int set_mpeg_start_width()
 \brief Set MPEG start width.
 \param devmod  Pointer to demodulator instance.
 \return int.
 This routine should be called during a set channel of QAMVSB
----------------------------------------------------------------------------
 miscellaneous configurations - end                             
----------------------------------------------------------------------------
----------------------------------------------------------------------------
 UIO Configuration Functions - begin                                        
----------------------------------------------------------------------------
 \fn int ctrl_set_uio_cfg()
 \brief Configure modus oprandi UIO.
 \param demod Pointer to demodulator instance.
 \param uio_cfg Pointer to a configuration setting for a certain UIO.
 \return int.
  Write magic word to enable pdr reg write               
====================================================================
 DRX_UIO1: SMA_TX UIO-1 
 pad configuration register is set 0 - input mode 
 switch ( uio_cfg->mode ) 
====================================================================
 DRX_UIO2: SMA_RX UIO-2 
 pad configuration register is set 0 - input mode 
 switch ( uio_cfg->mode ) 
====================================================================
 DRX_UIO3: GPIO UIO-3 
 pad configuration register is set 0 - input mode 
 switch ( uio_cfg->mode ) 
====================================================================
 DRX_UIO4: IRQN UIO-4 
 pad configuration register is set 0 - input mode 
 switch ( uio_cfg->mode ) 
====================================================================
 switch ( uio_cfg->uio ) 
  Write magic word to disable pdr reg write               
 \fn int ctrl_uio_write()
 \brief Write to a UIO.
 \param demod Pointer to demodulator instance.
 \param uio_data Pointer to data container for a certain UIO.
 \return int.
  Write magic word to enable pdr reg write               
====================================================================
 DRX_UIO1: SMA_TX UIO-1 
 io_pad_cfg register (8 bit reg.) MSB bit is 1 (default value) 
 io_pad_cfg_mode output mode is drive always 
 io_pad_cfg_drive is set to power 2 (23 mA) 
 write to io pad configuration register - output mode 
 use corresponding bit in io data output registar 
 write zero to 15th bit - 1st UIO 
 write one to 15th bit - 1st UIO 
 write back to io data output register 
======================================================================
 DRX_UIO2: SMA_RX UIO-2 
 io_pad_cfg register (8 bit reg.) MSB bit is 1 (default value) 
 io_pad_cfg_mode output mode is drive always 
 io_pad_cfg_drive is set to power 2 (23 mA) 
 write to io pad configuration register - output mode 
 use corresponding bit in io data output registar 
 write zero to 14th bit - 2nd UIO 
 write one to 14th bit - 2nd UIO 
 write back to io data output register 
====================================================================
 DRX_UIO3: ASEL UIO-3 
 io_pad_cfg register (8 bit reg.) MSB bit is 1 (default value) 
 io_pad_cfg_mode output mode is drive always 
 io_pad_cfg_drive is set to power 2 (23 mA) 
 write to io pad configuration register - output mode 
 use corresponding bit in io data output registar 
 write zero to 2nd bit - 3rd UIO 
 write one to 2nd bit - 3rd UIO 
 write back to io data output register 
=====================================================================
 DRX_UIO4: IRQN UIO-4 
 io_pad_cfg register (8 bit reg.) MSB bit is 1 (default value) 
 io_pad_cfg_mode output mode is drive always 
 io_pad_cfg_drive is set to power 2 (23 mA) 
 write to io pad configuration register - output mode 
 use corresponding bit in io data output registar 
 write zero to 12th bit - 4th UIO 
 write one to 12th bit - 4th UIO 
 write back to io data output register 
=====================================================================
 switch ( uio_data->uio ) 
  Write magic word to disable pdr reg write               
---------------------------------------------------------------------------
 UIO Configuration Functions - end                                         
---------------------------------------------------------------------------
----------------------------------------------------------------------------
 I2C Bridge Functions - begin                                               
----------------------------------------------------------------------------
 \fn int ctrl_i2c_bridge()
 \brief Open or close the I2C switch to tuner.
 \param demod Pointer to demodulator instance.
 \param bridge_closed Pointer to bool indication if bridge is closed not.
 \return int.
 check arguments 
----------------------------------------------------------------------------
 I2C Bridge Functions - end                                                 
----------------------------------------------------------------------------
----------------------------------------------------------------------------
 Smart antenna Functions - begin                                            
----------------------------------------------------------------------------
 \fn int smart_ant_init()
 \brief Initialize Smart Antenna.
 \param pointer to struct drx_demod_instance.
 \return int.
  Write magic word to enable pdr reg write               
 init smart antenna 
 config SMA_TX pin to smart antenna mode 
  Write magic word to disable pdr reg write               
 Check param 
 Wait until SCU command interface is ready to receive command 
 do nothing 
 this number of parameters is not supported 
 Wait until SCU has processed command 
 read results 
 do nothing 
 this number of parameters is not supported 
 Check if an error was reported by SCU 
 check a few fixed error codes 
 here it is assumed that negative means error, and positive no error 
 \fn int DRXJ_DAP_SCUAtomicReadWriteBlock()
 \brief Basic access routine for SCU atomic read or write access
 \param dev_addr  pointer to i2c dev address
 \param addr     destinationsource address
 \param datasize size of data buffer in bytes
 \param data     pointer to data buffer
 \return int
 \retval 0 Success
 \retval -EIO Timeout, I2C error, illegal bank
 max 30 bytes because the limit of SCU parameter 
 Parameter check 
 read 
 read data from buffer 
============================================================================
 \fn int DRXJ_DAP_AtomicReadReg16()
 \brief Atomic read of 16 bits words
============================================================================
 \fn int drxj_dap_scu_atomic_write_reg16()
 \brief Atomic read of 16 bits words
 -------------------------------------------------------------------------- 
 \brief Measure result of ADC synchronisation
 \param demod demod instance
 \param count (returned) count
 \return int.
 \retval 0    Success
 \retval -EIO Failure: I2C error
 Start measurement 
 Wait at least 3128(1sysclk) <<< 1 millisec 
 \brief Synchronize analog and digital clock domains
 \param demod demod instance
 \return int.
 \retval 0    Success
 \retval -EIO Failure: I2C error or failure to synchronize
 An IQM reset will also reset the results of this synchronization.
 After an IQM reset this routine needs to be called again.
 Try sampling on a different edge 
 TODO: implement fallback scenarios 
============================================================================
==                      END AUXILIARY FUNCTIONS                           ==
============================================================================
============================================================================
============================================================================
==                8VSB & QAM COMMON DATAPATH FUNCTIONS                    ==
============================================================================
============================================================================
 \fn int init_agc ()
 \brief Initialize AGC for all standards.
 \param demod instance of demodulator.
 \param channel pointer to channel data.
 \return int.
 for new AGC interface 
 Gain fed from inner to outer AGC 
 set to p_agc_settings->top before 
 Setrestore Ki DGAIN factor 
 \fn int set_frequency ()
 \brief Set frequency shift.
 \param demod instance of demodulator.
 \param channel pointer to channel data.
 \param tuner_freq_offset residual frequency from tuner.
 \return int.
	
	   Program frequency shifter
	   No need to account for mirroring on RF
		 After IQM FS sound carrier must appear at 4 Mhz in spect.
		   Sound carrier is already 3Mhz above centre frequency due
 adc mirrors 
 adc doesn't mirror 
 Program frequency shifter with tuner offset compensation 
 frequency_shift += tuner_freq_offset; TODO 
 \fn int get_acc_pkt_err()
 \brief Retrieve signal strength for VSB and QAM.
 \param demod Pointer to demod instance
 \param packet_err Pointer to packet error
 \return int.
 \retval 0 sig_strength contains valid data.
 \retval -EINVAL sig_strength is NULL.
 \retval -EIO Erroneous data, sig_strength contains invalid data.
============================================================================
 \fn int set_agc_rf ()
 \brief Configure RF AGC
 \param demod instance of demodulator.
 \param agc_settings AGC configuration structure
 \return int.
 Configure AGC only if standard is currently active 
 Enable RF AGC DAC 
 Enable SCU RF AGC loop 
 Set speed ( using complementary reduction value ) 
 Set TOP, only if IF-AGC is in AUTO mode 
 Cut-Off current 
 Enable RF AGC DAC 
 Disable SCU RF AGC loop 
 Write value to output pin 
 Disable RF AGC DAC 
 Disable SCU RF AGC loop 
 switch ( agcsettings->ctrl_mode ) 
 Store rf agc settings 
 \fn int set_agc_if ()
 \brief Configure If AGC
 \param demod instance of demodulator.
 \param agc_settings AGC configuration structure
 \return int.
 Configure AGC only if standard is currently active 
 Enable IF AGC DAC 
 Enable SCU IF AGC loop 
 Set speed (using complementary reduction value) 
 Restore TOP 
 Enable IF AGC DAC 
 Disable SCU IF AGC loop 
 Write value to output pin 
 Disable If AGC DAC 
 Disable SCU IF AGC loop 
 switch ( agcsettings->ctrl_mode ) 
 always set the top to support configurations without if-loop 
 Store if agc settings 
 \fn int set_iqm_af ()
 \brief Configure IQM AF registers
 \param demod instance of demodulator.
 \param active
 \return int.
 Configure IQM 
============================================================================
==              END 8VSB & QAM COMMON DATAPATH FUNCTIONS                  ==
============================================================================
============================================================================
============================================================================
==                       8VSB DATAPATH FUNCTIONS                          ==
============================================================================
============================================================================
 \fn int power_down_vsb ()
 \brief Powr down QAM related blocks.
 \param demod instance of demodulator.
 \param channel pointer to channel data.
 \return int.
 command      0,
 parameter_len  0,
 result_len     0,
 parameter    NULL,
 result       NULL
	
	   STOP demodulator
	   reset of FEC and VSB HW
 stop all comm_exec 
 \fn int set_vsb_leak_n_gain ()
 \brief Set ATSC demod.
 \param demod instance of demodulator.
 \return int.
 FFETRAINLKRATIO1  
 FFETRAINLKRATIO2  
 FFETRAINLKRATIO3  
 FFETRAINLKRATIO4  
 FFETRAINLKRATIO5  
 FFETRAINLKRATIO6  
 FFETRAINLKRATIO7  
 FFETRAINLKRATIO8  
 FFETRAINLKRATIO9  
 FFETRAINLKRATIO10  
 FFETRAINLKRATIO11 
 FFETRAINLKRATIO12 
 FFERCA1TRAINLKRATIO1 
 FFERCA1TRAINLKRATIO2 
 FFERCA1TRAINLKRATIO3 
 FFERCA1TRAINLKRATIO4 
 FFERCA1TRAINLKRATIO5 
 FFERCA1TRAINLKRATIO6 
 FFERCA1TRAINLKRATIO7 
 FFERCA1TRAINLKRATIO8 
 FFERCA1TRAINLKRATIO9 
 FFERCA1TRAINLKRATIO10 
 FFERCA1TRAINLKRATIO11 
 FFERCA1TRAINLKRATIO12 
 FFERCA1DATALKRATIO1 
 FFERCA1DATALKRATIO2 
 FFERCA1DATALKRATIO3 
 FFERCA1DATALKRATIO4 
 FFERCA1DATALKRATIO5 
 FFERCA1DATALKRATIO6 
 FFERCA1DATALKRATIO7 
 FFERCA1DATALKRATIO8 
 FFERCA1DATALKRATIO9 
 FFERCA1DATALKRATIO10 
 FFERCA1DATALKRATIO11 
 FFERCA1DATALKRATIO12 
 FFERCA2TRAINLKRATIO1 
 FFERCA2TRAINLKRATIO2 
 FFERCA2TRAINLKRATIO3 
 FFERCA2TRAINLKRATIO4 
 FFERCA2TRAINLKRATIO5 
 FFERCA2TRAINLKRATIO6 
 FFERCA2TRAINLKRATIO7 
 FFERCA2TRAINLKRATIO8 
 FFERCA2TRAINLKRATIO9 
 FFERCA2TRAINLKRATIO10 
 FFERCA2TRAINLKRATIO11 
 FFERCA2TRAINLKRATIO12 
 FFERCA2DATALKRATIO1 
 FFERCA2DATALKRATIO2 
 FFERCA2DATALKRATIO3 
 FFERCA2DATALKRATIO4 
 FFERCA2DATALKRATIO5 
 FFERCA2DATALKRATIO6 
 FFERCA2DATALKRATIO7 
 FFERCA2DATALKRATIO8 
 FFERCA2DATALKRATIO9 
 FFERCA2DATALKRATIO10 
 FFERCA2DATALKRATIO11 
 FFERCA2DATALKRATIO12 
 FFEDDM1TRAINLKRATIO1 
 FFEDDM1TRAINLKRATIO2 
 FFEDDM1TRAINLKRATIO3 
 FFEDDM1TRAINLKRATIO4 
 FFEDDM1TRAINLKRATIO5 
 FFEDDM1TRAINLKRATIO6 
 FFEDDM1TRAINLKRATIO7 
 FFEDDM1TRAINLKRATIO8 
 FFEDDM1TRAINLKRATIO9 
 FFEDDM1TRAINLKRATIO10 
 FFEDDM1TRAINLKRATIO11 
 FFEDDM1TRAINLKRATIO12 
 FFEDDM1DATALKRATIO1 
 FFEDDM1DATALKRATIO2 
 FFEDDM1DATALKRATIO3 
 FFEDDM1DATALKRATIO4 
 FFEDDM1DATALKRATIO5 
 FFEDDM1DATALKRATIO6 
 FFEDDM1DATALKRATIO7 
 FFEDDM1DATALKRATIO8 
 FFEDDM1DATALKRATIO9 
 FFEDDM1DATALKRATIO10 
 FFEDDM1DATALKRATIO11 
 FFEDDM1DATALKRATIO12 
 FFEDDM2TRAINLKRATIO1 
 FFEDDM2TRAINLKRATIO2 
 FFEDDM2TRAINLKRATIO3 
 FFEDDM2TRAINLKRATIO4 
 FFEDDM2TRAINLKRATIO5 
 FFEDDM2TRAINLKRATIO6 
 FFEDDM2TRAINLKRATIO7 
 FFEDDM2TRAINLKRATIO8 
 FFEDDM2TRAINLKRATIO9 
 FFEDDM2TRAINLKRATIO10 
 FFEDDM2TRAINLKRATIO11 
 FFEDDM2TRAINLKRATIO12 
 FFEDDM2DATALKRATIO1 
 FFEDDM2DATALKRATIO2 
 FFEDDM2DATALKRATIO3 
 FFEDDM2DATALKRATIO4 
 FFEDDM2DATALKRATIO5 
 FFEDDM2DATALKRATIO6 
 FFEDDM2DATALKRATIO7 
 FFEDDM2DATALKRATIO8 
 FFEDDM2DATALKRATIO9 
 FFEDDM2DATALKRATIO10 
 FFEDDM2DATALKRATIO11 
 FFEDDM2DATALKRATIO12 
 FIRTRAINGAIN1 
 FIRTRAINGAIN2 
 FIRTRAINGAIN3 
 FIRTRAINGAIN4 
 FIRTRAINGAIN5 
 FIRTRAINGAIN6 
 FIRTRAINGAIN7 
 FIRTRAINGAIN8 
 FIRTRAINGAIN9 
 FIRTRAINGAIN10 
 FIRTRAINGAIN11 
 FIRTRAINGAIN12 
 FIRRCA1GAIN1 
 FIRRCA1GAIN2 
 FIRRCA1GAIN3 
 FIRRCA1GAIN4 
 FIRRCA1GAIN5 
 FIRRCA1GAIN6 
 FIRRCA1GAIN7 
 FIRRCA1GAIN8 
 FIRRCA1GAIN9 
 FIRRCA1GAIN10 
 FIRRCA1GAIN11 
 FIRRCA1GAIN12 
 FIRRCA2GAIN1 
 FIRRCA2GAIN2 
 FIRRCA2GAIN3 
 FIRRCA2GAIN4 
 FIRRCA2GAIN5 
 FIRRCA2GAIN6 
 FIRRCA2GAIN7 
 FIRRCA2GAIN8 
 FIRRCA2GAIN9 
 FIRRCA2GAIN10 
 FIRRCA2GAIN11 
 FIRRCA2GAIN12 
 FIRDDM1GAIN1 
 FIRDDM1GAIN2 
 FIRDDM1GAIN3 
 FIRDDM1GAIN4 
 FIRDDM1GAIN5 
 FIRDDM1GAIN6 
 FIRDDM1GAIN7 
 FIRDDM1GAIN8 
 FIRDDM1GAIN9 
 FIRDDM1GAIN10 
 FIRDDM1GAIN11 
 FIRDDM1GAIN12 
 FIRDDM2GAIN1 
 FIRDDM2GAIN2 
 FIRDDM2GAIN3 
 FIRDDM2GAIN4 
 FIRDDM2GAIN5 
 FIRDDM2GAIN6 
 FIRDDM2GAIN7 
 FIRDDM2GAIN8 
 FIRDDM2GAIN9 
 FIRDDM2GAIN10 
 FIRDDM2GAIN11 
 FIRDDM2GAIN12 
 DFETRAINLKRATIO 
 DFERCA1TRAINLKRATIO 
 DFERCA1DATALKRATIO 
 DFERCA2TRAINLKRATIO 
 DFERCA2DATALKRATIO 
 DFEDDM1TRAINLKRATIO 
 DFEDDM1DATALKRATIO 
 DFEDDM2TRAINLKRATIO 
 DFEDDM2DATALKRATIO 
 DFETRAINGAIN 
 DFERCA1GAIN 
 DFERCA2GAIN 
 DFEDDM1GAIN 
 DFEDDM2GAIN 
 \fn int set_vsb()
 \brief Set 8VSB demod.
 \param demod instance of demodulator.
 \return int.
 re0  
 re1  
 re2  
 re3  
 re4  
 re5  
 re6  
 re7  
 re8  
 re9  
 re10 
 re11 
 re12 
 re13 
 re14 
 re15 
 re16 
 re17 
 re18 
 re19 
 re20 
 re21 
 re22 
 re23 
 re24 
 re25 
 re26 
 re27 
 stop all comm_exec 
 reset demodulator 
 set higher threshold 
 burst detection on   
 drop thresholds by 1 dB 
 drop thresholds by 2 dB 
 cma on               
 GPIO               
 Initialize the FEC Subsystem 
 output data even when not locked 
 set clip 
 no transparent, no A&C framing; parity is set in mpegoutput 
 timeout counter for restarting 
 bypass disabled 
 initialize RS packet error measurement parameters 
 init measurement period of MERSER 
 B-Input to ADC, PGA+filter in standby 
 turn on IQMAF. It has to be in front of setAgc() 
		 TODO fix this, store a struct drxj_cfg_afe_gain structure in struct drxj_data instead
 Mpeg output has to be in front of FEC active 
 TODO: move to set_standard after hardware reset value problem is solved 
 Configure initial MPEG output 
 TBD: what parameters should be set 
 Default mode AGC on, etc 
 start demodulator 
 \fn static short get_vsb_post_rs_pck_err(struct i2c_device_addr dev_addr, u16 PckErrs)
 \brief Get the values of packet error in 8VSB mode
 \return Error code
 packet error rate = (error packet number) per second 
 77.3 us is time for per packet 
 \fn static short GetVSBBer(struct i2c_device_addr dev_addr, u32 ber)
 \brief Get the values of ber in VSB mode
 \return Error code
 \fn static short get_vs_bpre_viterbi_ber(struct i2c_device_addr dev_addr, u32 ber)
 \brief Get the values of ber in VSB mode
 \return Error code
 \fn static int get_vsbmer(struct i2c_device_addr dev_addr, u16 mer)
 \brief Get the values of MER
 \return Error code
============================================================================
==                     END 8VSB DATAPATH FUNCTIONS                        ==
============================================================================
============================================================================
============================================================================
==                       QAM DATAPATH FUNCTIONS                           ==
============================================================================
============================================================================
 \fn int power_down_qam ()
 \brief Powr down QAM related blocks.
 \param demod instance of demodulator.
 \param channel pointer to channel data.
 \return int.
 command       0,
 parameter_len  0,
 result_len     0,
 parameter    NULL,
 result       NULL
	
	   STOP demodulator
	   resets IQM, QAM and FEC HW blocks
 stop all comm_exec 
============================================================================
 \fn int set_qam_measurement ()
 \brief Setup of the QAM Measuremnt intervals for signal quality
 \param demod instance of demod.
 \param constellation current constellation.
 \return int.
  NOTE:
  Take into account that for certain settings the errorcounters can overflow.
  The implementation does not check this.
  TODO: overriding the ext_attr->fec_bits_desired by constellation dependent
  constants to get a measurement period of approx. 1 sec. Remove fec_bits_desired
  field ?
 device address for I2C writes 
 Global data container for DRXJ specific data 
 BER accounting period 
 defines RS BER measurement period 
 ReedSolomon Measurement Prescale 
 Value for corresponding I2C register 
 Actual precise amount of bits 
 Value for corresponding I2C register 
 Value for corresponding I2C register 
 Actual precise amount of bits 
 no of trellis symbols: VD SER measur period 
 Viterbi Measurement Prescale 
 Parameters for Reed-Solomon Decoder 
 fecrs_period = (int)ceil(FEC_BITS_DESIRED(fecrs_prescaleplen)) 
 rs_bit_cnt   = fecrs_periodfecrs_prescaleplen                  
     result is within 32 bit arithmetic ->                        
     no need for mult or frac functions                           
 TODO: use constant instead of calculation and remove the fec_rs_plen in ext_attr 
 for getSigQual 
 temp storage   
 ceil 
 limit to max 16 bit value (I2C register width) if needed 
 write corresponding registers 
 Parameters for Viterbi Decoder 
 qamvd_period = (int)ceil(FEC_BITS_DESIRED                      
                    (qamvd_prescaleplen(qam_constellation+1))) 
 vd_bit_cnt   = qamvd_periodqamvd_prescaleplen                 
     result is within 32 bit arithmetic ->                       
     no need for mult or frac functions                          
 a(8 bit)  b(8 bit) = 16 bit result => mult32 not needed 
 temp storage 
 a(16 bit)  b(4 bit) = 20 bit result => mult32 not needed 
 a(16 bit)  b(5 bit) = 21 bit result => mult32 not needed 
 limit to max 16 bit value (I2C register width) if needed 
 a(16 bit)  b(16 bit) = 32 bit result => mult32 not needed 
============================================================================
 \fn int set_qam16 ()
 \brief QAM16 specific setup
 \param demod instance of demod.
 \return int.
 fun0  
 fun1  
 fun2  
 fun3  
 fun4  
 fun5  
 RAD0  
 RAD1  
 RAD2  
 RAD3  
 RAD4  
 RAD5  
============================================================================
 \fn int set_qam32 ()
 \brief QAM32 specific setup
 \param demod instance of demod.
 \return int.
 fun0  
 fun1  
 fun2  
 fun3  
 fun4  
 fun5  
 RAD0  
 RAD1  
 RAD2  
 RAD3  
 RAD4  
 RAD5  
============================================================================
 \fn int set_qam64 ()
 \brief QAM64 specific setup
 \param demod instance of demod.
 \return int.
 this is hw reset value. no necessary to re-write 
 fun0  
 fun1  
 fun2  
 fun3  
 fun4  
 fun5  
 RAD0  
 RAD1  
 RAD2  
 RAD3  
 RAD4  
 RAD5  
============================================================================
 \fn int set_qam128 ()
 \brief QAM128 specific setup
 \param demod: instance of demod.
 \return int.
 fun0  
 fun1  
 fun2  
 fun3  
 fun4  
 fun5  
 RAD0  
 RAD1  
 RAD2  
 RAD3  
 RAD4  
 RAD5  
============================================================================
 \fn int set_qam256 ()
 \brief QAM256 specific setup
 \param demod: instance of demod.
 \return int.
 fun0  
 fun1  
 fun2  
 fun3  
 fun4  
 fun5  
 RAD0  
 RAD1  
 RAD2  
 RAD3  
 RAD4  
 RAD5  
============================================================================
 \fn int set_qam ()
 \brief Set QAM demod.
 \param demod:   instance of demod.
 \param channel: pointer to channel data.
 \return int.
 command       0,
 parameter_len  0,
 result_len     0,
 parameter     NULL,
 result        NULL
 re0  
 re1  
 re2  
 re3  
 re4  
 re5  
 re6  
 re7  
 re8  
 re9  
 re10 
 re11 
 re12 
 re13 
 re14 
 re15 
 re16 
 re17 
 re18 
 re19 
 re20 
 re21 
 re22 
 re23 
 re24 
 re25 
 re26 
 re27 
 re0  
 re1  
 re2  
 re3  
 re4  
 re5  
 re6  
 re7  
 re8  
 re9  
 re10 
 re11 
 re12 
 re13 
 re14 
 re15 
 re16 
 re17 
 re18 
 re19 
 re20 
 re21 
 re22 
 re23 
 re24 
 re25 
 re26 
 re27 
 re0  
 re1  
 re2  
 re3  
 re4  
 re5  
 re6  
 re7  
 re8  
 re9  
 re10 
 re11 
 re12 
 re13 
 re14 
 re15 
 re16 
 re17 
 re18 
 re19 
 re20 
 re21 
 re22 
 re23 
 re24 
 re25 
 re26 
 re27 
 re0  
 re1  
 re2  
 re3  
 re4  
 re5  
 re6  
 re7  
 re8  
 re9  
 re10 
 re11 
 re12 
 re13 
 re14 
 re15 
 re16 
 re17 
 re18 
 re19 
 re20 
 re21 
 re22 
 re23 
 re24 
 re25 
 re26 
 re27 
 annex             
 constellation     
 interleave mode   
 annex             
 constellation     
 interleave mode   
 annex             
 constellation     
 interleave mode   
		
		   STEP 1: reset demodulator
		   resets IQM, QAM and FEC HW blocks
		   resets SCU variables
 stop all comm_exec 
		
		   STEP 2: configure demodulator
		   -set env
		   -set params (resets IQM,QAM,FEC HW; initializes some SCU variables )
 set symbol rate 
	 STEP 3: enable the system in a mode where the ADC provides valid signal
 from qam_cmd.py script (qam_driver_b) 
 TODO: remove re-writes of HW reset values 
 scu temporary shut down agc 
! reset default val ! 
! reset default val ! 
! reset default val ! 
! reset default val ! 
! reset default val ! 
! reset default val ! 
 switch 
! reset default val ! 
		 No more resets of the IQM, current standard correctly set =>
 turn on IQMAF. It has to be in front of setAgc() 
			 TODO fix this, store a struct drxj_cfg_afe_gain structure in struct drxj_data instead
 SETP 4: constellation specific setup 
 switch 
 Mpeg output has to be in front of FEC active 
 TODO: move to set_standard after hardware reset value problem is solved 
 Configure initial MPEG output 
 STEP 5: start QAM demodulator (starts FEC, QAM and IQM HW) 
============================================================================
 Silence the controlling of lc, equ, and the acquisition state machine 
 freeze the frequency control loop 
 freeze dqfq updating 
 lc_cp  _ci  _ca 
 flip the spec 
 freeze dqfq updating 
 \fn int qam64auto ()
 \brief auto do sync pattern switching and mirroring.
 \param demod:   instance of demod.
 \param channel: pointer to channel data.
 \param tuner_freq_offset: tuner frequency offset.
 \param lock_status: pointer to lock status.
 \return int.
 external attributes for storing acquired channel constellation 
 some delay to see if fec_lock possible TODO find the right value 
 see something, waiting longer 
 still demod_lock in 150ms 
 flip sync pattern back 
 flip spectrum 
 reset timer TODO: still need 500ms? 
 no need to wait lock 
 still demod_lock in 150ms 
 no need to wait lock 
 Returning control to application ... 
 \fn int qam256auto ()
 \brief auto do sync pattern switching and mirroring.
 \param demod:   instance of demod.
 \param channel: pointer to channel data.
 \param tuner_freq_offset: tuner frequency offset.
 \param lock_status: pointer to lock status.
 \return int.
 external attributes for storing acquired channel constellation 
 see something, wait longer 
 reset timer TODO: still need 300ms? 
 \fn int set_qam_channel ()
 \brief Set QAM channel according to the requested constellation.
 \param demod:   instance of demod.
 \param channel: pointer to channel data.
 \return int.
 external attributes for storing acquired channel constellation 
 set QAM channel constellation 
 for channel scan 
 try to lock default QAM constellation: QAM256 
 QAM254 not locked. Try QAM64 constellation 
 force to rate hunting 
 force to rate hunting 
 restore starting value 
============================================================================
 \fn static short get_qamrs_err_count(struct i2c_device_addr dev_addr)
 \brief Get RS error count in QAM mode (used for post RS BER calculation)
 \return Error code
 precondition: measurement period & measurement prescale must be set
 check arguments 
 all reported errors are received in the  
 most recently finished measurement period 
   no of pre RS bit errors 
   no of symbol errors      
   no of packet errors      
   no of failures to decode 
   no of post RS bit erros  
 TODO: NOTE 
 These register values are fetched in non-atomic fashion           
 It is possible that the read values contain unrelated information 
============================================================================
  \fn int get_sig_strength()
  \brief Retrieve signal strength for VSB and QAM.
  \param demod Pointer to demod instance
  \param u16-t Pointer to signal strength data; range 0, .. , 100.
  \return int.
  \retval 0 sig_strength contains valid data.
  \retval -EINVAL sig_strength is NULL.
  \retval -EIO Erroneous data, sig_strength contains invalid data.
 \fn int ctrl_get_qam_sig_quality()
 \brief Retrieve QAM signal quality from device.
 \param devmod Pointer to demodulator instance.
 \param sig_quality Pointer to signal quality data.
 \return int.
 \retval 0 sig_quality contains valid data.
 \retval -EINVAL sig_quality is NULL.
 \retval -EIO Erroneous data, sig_quality contains invalid data.
  Pre-condition: Device must be started and in lock.
 pre RedSolomon Bit Error Rate 
 post RedSolomon Bit Error Rate 
 no of packet errors in RS 
 accumulated error between raw and sliced symbols 
 quadrature symbol errors in QAM_VD 
 SNC sync failure measurement period 
 ReedSolomon Measurement Prescale 
 Value for corresponding I2C register 
 calculation constants 
 RedSolomon Bit Count 
 used for MER, depends of QAM constellation 
 intermediate results 
 exponent value used for QAM BERSER 
 mantisa value used for QAM BERSER 
 BER count 
 signal quality info 
 QAM MER 
 Pre RedSolomon BER 
 Post RedSolomon BER 
 ViterbiDecoder SER 
 Viterbi Measurement Prescale 
 Viterbi Measurement period 
 ViterbiDecoder Bit Count 
 read the physical registers 
   Get the RS error data 
 get the register value needed for MER 
 get the register value needed for post RS BER 
 get constants needed for signal quality calculation 
 DRXJ_QAM_SL_SIG_POWER_QAMxxx   4     
 ------------------------------ 
 MER Calculation                
 ------------------------------ 
 MER is good if it is above 27.5 for QAM256 or 21.5 for QAM64 
 10.0log10(qam_sl_sig_power  4.0  qam_sl_err_power); 
 ----------------------------------------- 
 Pre Viterbi Symbol Error Rate Calculation 
 ----------------------------------------- 
 pre viterbi SER is good if it is below 0.025 
 get the register value 
   no of quadrature symbol errors 
 Extract the Exponent and the Mantisa  
 of number of quadrature symbol errors 
 --------------------------------------- 
 pre and post RedSolomon BER Calculation 
 --------------------------------------- 
 pre RS BER is good if it is below 3.5e-4 
 get the register values 
 Extract the Exponent and the Mantisa of the 
 pre Reed-Solomon bit error count            
qam_pre_rs_ber = frac_times1e6( ber_cnt, rs_bit_cnt ); 
 post RS BER = 1000000 (11.17  FEC_OC_SNC_FAIL_COUNT__A)   
               (1504.0  FEC_OC_SNC_FAIL_PERIOD__A)  
	
	   => c = (100000010011.17)1504 =
	   post RS BER = (( c FEC_OC_SNC_FAIL_COUNT__A) 
	   (100  FEC_OC_SNC_FAIL_PERIOD__A)
	   100 and 100 is for more precision.
	   => (20 bits  12 bits) (16 bits  7 bits)  => safe in 32 bits computation
	   Precision errors still possible.
 fill signal quality data structure 
 #ifndef DRXJ_VSB_ONLY 
============================================================================
==                     END QAM DATAPATH FUNCTIONS                         ==
============================================================================
============================================================================
============================================================================
==                       ATV DATAPATH FUNCTIONS                           ==
============================================================================
============================================================================
   Implementation notes.
   NTSCFM AGCs
      Four AGCs are used for NTSC:
      (1) RF (used to attenuate the input signal in case of to much power)
      (2) IF (used to attenuate the input signal in case of to much power)
      (3) Video AGC (used to amplify the output signal in case input to low)
      (4) SIF AGC (used to amplify the output signal in case input to low)
      Video AGC is coupled to RF and IF. SIF AGC is not coupled. It is assumed
      that the coupling between Video AGC and the RF and IF AGCs also works in
      favor of the SIF AGC.
      Three AGCs are used for FM:
      (1) RF (used to attenuate the input signal in case of to much power)
      (2) IF (used to attenuate the input signal in case of to much power)
      (3) SIF AGC (used to amplify the output signal in case input to low)
      The SIF AGC is now coupled to the RFIF AGCs.
      The SIF AGC is needed for both SIF output and the internal SIF signal to
      the AUD block.
      RF and IF AGCs DACs are part of AFE, Video and SIF AGC DACs are part of
      the ATV block. The AGC control algorithms are all implemented in
      microcode.
   ATV SETTINGS
      (Shadow settings will not be used for now, they will be implemented
       later on because of the schedule)
      Several HWSCU "settings" can be used for ATV. The standard selection
      will reset most of these settings. To avoid that the end user application
      has to perform these settings each time the ATV or FM standards is
      selected the driver will shadow these settings. This enables the end user
      to perform the settings only once after a drx_open(). The driver must
      write the shadow settings to HWSCU in case:
	 ( setstandard FMATV) ||
	 ( settings have changed && FMATV standard is active)
      The shadow settings will be stored in the device specific data container.
      A set of flags will be defined to flag changes in shadow settings.
      A routine will be implemented to write all changed shadow settings to
      HWSCU.
      The "settings" will consist of: AGC settings, filter settings etc.
      Disadvantage of use of shadow settings:
      Direct changes in HWSCU registers will not be reflected in the
      shadow settings and these changes will be overwritten during a next
      update. This can happen during evaluation. This will not be a problem
      for normal customer usage.
 -------------------------------------------------------------------------- 
 \fn int power_down_atv ()
 \brief Power down ATV.
 \param demod instance of demodulator
 \param standard either NTSC or FM (sub strandard for ATV )
 \return int.
  Stops and thus resets ATV and IQM block
  SIF and CVBS ADC are powered down
  Calls audio power down
 command       0,
 parameter_len  0,
 result_len     0,
 parameter    NULL,
 result       NULL
 ATV NTSC 
 Stop ATV SCU (will reset ATV and IQM hardware 
 Disable ATV outputs (ATV reset enables CVBS, undo this) 
============================================================================
 \brief Power up AUD.
 \param demod instance of demodulator
 \return int.
 \fn int set_orx_nsu_aox()
 \brief Configure OrxNsuAox for OOB
 \param demod instance of demodulator.
 \param active
 \return int.
 Configure NSU_AOX 
 \fn int ctrl_set_oob()
 \brief Set OOB channel to be used.
 \param demod instance of demodulator
 \param oob_param OOB parameters for channel setting.
 \frequency should be in KHz
 \return int.
 Accepts  only. Returns error otherwise.
 Demapper value is written after scu_command START
 because START command causes COMM_EXEC transition
 from 0 to 1 which causes all registers to be
 overwritten with initial value
 Nyquist filter impulse response 
sqrt raised-cosine filter with alpha=0.3 
sqrt raised-cosine filter with alpha=0.5 
full raised-cosine filter with alpha=0.5 (receiver only) 
 Coefficients for the nyquist filter (total: 27 taps) 
 KHz 
 Target Mode 0 
 Target Mode 1 
 Target Mode 2 
 Target Mode 3 
 TARGET_MODE = 0:     PFI_A = -2332; PFI_B = -5432;  PFI_C = 2532; fg = 0.5 MHz (Att=26dB) 
 TARGET_MODE = 1:     PFI_A = -1632; PFI_B = -4032;  PFI_C = 2032; fg = 1.0 MHz (Att=28dB) 
 TARGET_MODE = 2, 3:  PFI_A = -2032; PFI_B = -4932;  PFI_C = 2332; fg = 0.8 MHz (Att=25dB) 
 TARGET_MODE = 2, 3:  PFI_A = -2032; PFI_B = -4932;  PFI_C = 2332; fg = 0.8 MHz (Att=25dB) 
 Check parameters 
 power off oob module  
 Stop  
 Reset 
 SET_ENV 
 set frequency, spectrum inversion and data rate 
 1-data rate;2-frequency 
 signal is transmitted inverted 
 and tuner is not mirroring the signal 
 or 
 signal is transmitted noninverted 
 and tuner is mirroring the signal 
 signal is transmitted inverted 
 and tuner is not mirroring the signal 
 or 
 signal is transmitted noninverted 
 and tuner is mirroring the signal 
 signal is transmitted inverted 
 and tuner is not mirroring the signal 
 or 
 signal is transmitted noninverted 
 and tuner is mirroring the signal 
  Write magic word to enable pdr reg write  
  Write magic word to disable pdr reg write 
 ddc 
 nsu 
 initialization for target mode 
 Reset bits for timing and freq. recovery 
 AGN_LOCK = {2048>>3, -2048, 8, -8, 0, 1}; 
 DGN_LOCK = {10, -2048, 8, -8, 0, 1<<1}; 
 FRQ_LOCK = {15,-2048, 8, -8, 0, 1<<2}; 
 PHA_LOCK = {5000, -2048, 8, -8, 0, 1<<3}; 
 TIM_LOCK = {300,      -2048, 8, -8, 0, 1<<4}; 
 EQU_LOCK = {20,      -2048, 8, -8, 0, 1<<5}; 
 PRE-Filter coefficients (PFI) 
 NYQUIST-Filter coefficients (NYQ) 
 Start 
============================================================================
==                     END OOB DATAPATH FUNCTIONS                         ==
============================================================================
=============================================================================
  ===== MC command related functions ==========================================
=============================================================================
  ===== ctrl_set_channel() ==========================================================
 \fn int ctrl_set_channel()
 \brief Select a new transmission channel.
 \param demod instance of demod.
 \param channel Pointer to channel data.
 \return int.
 In case the tuner module is not used and in case of NTSCFM the pogrammer
 must tune the tuner to the centre frequency of the NTSCFM channel.
== check arguments ======================================================
 check valid standards 
 DRXJ_VSB_ONLY 
 check bandwidth QAM annex B, NTSC and 8VSB 
	 For QAM annex A and annex C:
	   -check symbolrate and constellation
	   -derive bandwidth from symbolrate (input bandwidth is ignored)
 config SMA_TX pin to SAW switch mode 
	 For QAM annex B:
	   -check constellation
 SAW SW, user UIO is used for switchable SAW 
 DRXJ_VSB_ONLY 
== Setup demod for specific standard ====================================
 flag the packet error counter reset 
=============================================================================
  ===== SigQuality() ==========================================================
 \fn int ctrl_sig_quality()
 \brief Retrieve signal quality form device.
 \param devmod Pointer to demodulator instance.
 \param sig_quality Pointer to signal quality data.
 \return int.
 \retval 0 sig_quality contains valid data.
 \retval -EINVAL sig_quality is NULL.
 \retval -EIO Erroneous data, sig_quality contains invalid data.
 PostViterbi is compute in steps of 10^(-6) 
============================================================================
 \fn int ctrl_lock_status()
 \brief Retrieve lock status .
 \param dev_addr Pointer to demodulator device address.
 \param lock_stat Pointer to lock status structure.
 \return int.
 command       0,
 parameter_len  0,
 result_len     0,
 parameter    NULL,
 result       NULL
 check arguments 
 define the SCU command code 
 define the SCU command parameters and execute the command 
 set the lock status 
 0x0000 NOT LOCKED 
 0x8000 DEMOD + FEC LOCKED (system lock) 
 0xC000 NEVER LOCKED 
 (system will never be able to lock to the signal) 
============================================================================
 \fn int ctrl_set_standard()
 \brief Set modulation standard to be used.
 \param standard Modulation standard.
 \return int.
 Setup stuff for the desired demodulation standard.
 Disable and power down the previous selected demodulation standard
 check arguments 
	
	   Stop and power down previous standard
 Do nothing 
	
	   Initialize channel independent registers
	   Power up new standard
 Don't know what the standard is now ... try again 
============================================================================
 Initialize default AFE configuration for QAM 
 IF AGC off, PGA active 
 IF AGC on, PGA not active 
 TODO: remove min_output_level and max_output_level for both QAM and VSB after 
 mc has not used them 
 Initialize default AFE configuration for VSB 
 \fn int ctrl_power_mode()
 \brief Set the power mode of the device to the specified power mode
 \param demod Pointer to demodulator instance.
 \param mode  Pointer to new power mode.
 \return int.
 \retval 0          Success
 \retval -EIO       I2C error or other failure
 \retval -EINVAL Invalid mode argument.
 Check arguments 
 If already in requested power mode, do nothing 
 Unknow sleep mode 
 Check if device needs to be powered up 
 Restore analog & pin configuration 
 Initialize default AFE configuration for VSB 
 Power down to requested mode 
 Backup some register settings 
 Set pins with possible pull-ups connected to them in input mode 
 Analog power down 
 ADC power down 
 Power down device 
 stop all comm_exec 
		
		   Stop and power down previous standard
 Do nothing 
 Initialize HI, wakeup key especially before put IC to sleep 
============================================================================
== CTRL SetGet Config related functions ===================================
============================================================================
 \fn int ctrl_set_cfg_pre_saw()
 \brief Set Pre-saw reference.
 \param demod demod instance
 \param u16 
 \return int.
 Check arguments
 Dispatch handling to standard specific function.
 check arguments 
 Only if standard is currently active 
 Store pre-saw settings 
============================================================================
 \fn int ctrl_set_cfg_afe_gain()
 \brief Set AFE Gain.
 \param demod demod instance
 \param u16 
 \return int.
 Check arguments
 Dispatch handling to standard specific function.
 check arguments 
 Do nothing 
	 TODO PGA gain is also written by microcode (at least by QAM and VSB)
 Only if standard is currently active 
 Store AFE Gain settings 
============================================================================
=============================================================================
 \fn drxj_open()
 \brief Open the demod instance, configure device, configure drxdriver
 \return Status_t Return status.
 drxj_open() can be called with a NULL ucode image => no ucode upload.
 This means that drxj_open() must NOT contain SCU commands or, in general,
 rely on SCU or AUD ucode to be present.
 Check arguments 
 has to be in front of setIqmAf and setOrxNsuAox 
	
	  Soft reset of sys- and osc-clockdomain
	 
	  HACK: On windows, it writes a 0x07 here, instead of just 0x03.
	  As we didn't load the firmware here yet, we should do the same.
	  Btw, this is coherent with DRX-K, where we send reset codes
	  for modulation (OFTM, in DRX-k), SYS and OSC clock domains.
 TODO first make sure that everything keeps working before enabling this 
 PowerDownAnalogBlocks() 
 disable mpegoutput pins 
 Stop AUD Inform SetAudio it will need to do all setting 
 Stop SCU 
 Upload microcode 
		 Dirty trick to use common ucode upload & verify,
 Run SCU for a little while to initialize microcode version numbers 
 Initialize scan timeout 
	 Stamp driver version number in SCU data RAM in BCD code
	   Done to enable field application engineers to retrieve drxdriver version
	   via I2C from SCU RAM
 refresh the audio data structure with default 
============================================================================
 \fn drxj_close()
 \brief Close the demod instance, power down the device
 \return Status_t Return status.
 power up 
  Microcode related functions
  drx_u_code_compute_crc	- Compute CRC of block of microcode data.
  @block_data: Pointer to microcode data.
  @nr_words:   Size of microcode block (number of 16 bits words).
  returns The computed CRC residue.
  drx_check_firmware - checks if the loaded firmware is valid
  @demod:	demod structure
  @mc_data:	pointer to the start of the firmware
  @size:	firmware size
	
	  Scan microcode blocks first for version info
	  and firmware check
 Clear version block 
 Process block header 
 Aux block. Check type 
  drx_ctrl_u_code - Handle microcode upload or verify.
  @dev_addr: Address of device.
  @mc_info:  Pointer to information about microcode data.
  @action:  Either UCODE_UPLOAD or UCODE_VERIFY
  This function returns:
 	0:
 		- In case of UCODE_UPLOAD: code is successfully uploaded.
                - In case of UCODE_VERIFY: image on device is equal to
 		  image provided to this control function.
 	-EIO:
 		- In case of UCODE_UPLOAD: I2C error.
 		- In case of UCODE_VERIFY: I2C error or image on device
 		  is not equal to image provided to this control function.
 	-EINVAL:
 		- Invalid arguments.
 		- Provided image is corrupt
 Check arguments 
 Check data 
 Process microcode blocks 
 Process block header 
		 Check block header on:
		   - data larger than 64Kb
		   - if CRC enabled check CRC
 Wrong data ! 
 Perform the desired action 
 Upload microcode 
 Verify uploaded microcode 
 caller is expected to check if lna is supported before enabling 
 Configure user-IO #3: enable readwrite 
  The Linux DVB Driver for Micronas DRX39xx family (drx3933j)
  Written by Devin Heitmueller <devin.heitmueller@kernellabs.com>
 frequency       0,
 bandwidth       DRX_BANDWIDTH_6MHZ,
 mirror          DRX_MIRROR_NO,
 constellation   DRX_CONSTELLATION_AUTO,
 hierarchy       DRX_HIERARCHY_UNKNOWN,
 priority        DRX_PRIORITY_UNKNOWN,
 coderate        DRX_CODERATE_UNKNOWN,
 guard           DRX_GUARD_UNKNOWN,
 fftmode         DRX_FFTMODE_UNKNOWN,
 classification  DRX_CLASSIFICATION_AUTO,
 symbolrate      5057000,
 interleavemode  DRX_INTERLEAVEMODE_UNKNOWN,
 ldpc            DRX_LDPC_UNKNOWN,
 carrier         DRX_CARRIER_UNKNOWN,
 frame mode      DRX_FRAMEMODE_UNKNOWN
 Bring the demod out of sleep 
 Set tuner to desired frequency and standard 
 Use the tuner's IF 
 Set the standard (will be powered up if necessary 
 set channel parameters 
 program channel 
 Just for giggles, let's shut off the LNA again.... 
 After set_frontend, except for strength, stats aren't available 
 power-down the demodulator 
 We're already in the desired state 
 so drxj_open() does what it needs to do 
 if device is removed don't access it 
 allocate memory for the internal state 
 setup the state 
 setup the demod data 
 create dvb_frontend 
 Initialize stats - needed for DVBv5 stats to work 
 SPDX-License-Identifier: GPL-2.0
  cxd2880_devio_spi.c
  Sony CXD2880 DVB-T2T tuner + demodulator driver
  IO interface via SPI
  Copyright (C) 2016, 2017, 2018 Sony Semiconductor Solutions Corporation
 SPDX-License-Identifier: GPL-2.0
  cxd2880_top.c
  Sony CXD2880 DVB-T2T tuner + demodulator driver
  Copyright (C) 2016, 2017, 2018 Sony Semiconductor Solutions Corporation
 For SPI access exclusive control 
	
	  level should be between -105dBm and -30dBm.
	  E.g. they should be between:
	  -105000125 = -840 and -30000125 = -240
 scale value to 0x0000-0xffff 
 Low priority 
 High priority 
 SPDX-License-Identifier: GPL-2.0
  cxd2880_integ.c
  Sony CXD2880 DVB-T2T tuner + demodulator driver
  integration layer common functions
  Copyright (C) 2016, 2017, 2018 Sony Semiconductor Solutions Corporation
 SPDX-License-Identifier: GPL-2.0
  cxd2880_tnrdmd_dvbt.c
  Sony CXD2880 DVB-T2T tuner + demodulator driver
  control functions for DVB-T
  Copyright (C) 2016, 2017, 2018 Sony Semiconductor Solutions Corporation
 SPDX-License-Identifier: GPL-2.0
  cxd2880_tnrdmd_dvbt_mon.c
  Sony CXD2880 DVB-T2T tuner + demodulator driver
  DVB-T monitor functions
  Copyright (C) 2016, 2017, 2018 Sony Semiconductor Solutions Corporation
 SPDX-License-Identifier: GPL-2.0
  cxd2880_io.c
  Sony CXD2880 DVB-T2T tuner + demodulator driver
  register IO interface functions
  Copyright (C) 2016, 2017, 2018 Sony Semiconductor Solutions Corporation
 SPDX-License-Identifier: GPL-2.0
  cxd2880_spi_device.c
  Sony CXD2880 DVB-T2T tuner + demodulator driver
  SPI access functions
  Copyright (C) 2016, 2017, 2018 Sony Semiconductor Solutions Corporation
 SPDX-License-Identifier: GPL-2.0
  cxd2880_tnrdmd_dvbt2_mon.c
  Sony CXD2880 DVB-T2T tuner + demodulator driver
  DVB-T2 monitor functions
  Copyright (C) 2016, 2017, 2018 Sony Semiconductor Solutions Corporation
 SPDX-License-Identifier: GPL-2.0
  cxd2880_tnrdmd_mon.c
  Sony CXD2880 DVB-T2T tuner + demodulator driver
  common monitor functions
  Copyright (C) 2016, 2017, 2018 Sony Semiconductor Solutions Corporation
 SPDX-License-Identifier: GPL-2.0
  cxd2880_tnrdmd_dvbt2.c
  Sony CXD2880 DVB-T2T tuner + demodulator driver
  control functions for DVB-T2
  Copyright (C) 2016, 2017, 2018 Sony Semiconductor Solutions Corporation
 SPDX-License-Identifier: GPL-2.0
  cxd2880_common.c
  Sony CXD2880 DVB-T2T tuner + demodulator driver
  common functions
  Copyright (C) 2016, 2017, 2018 Sony Semiconductor Solutions Corporation
 SPDX-License-Identifier: GPL-2.0
  cxd2880_tnrdmd.c
  Sony CXD2880 DVB-T2T tuner + demodulator driver
  common control functions
  Copyright (C) 2016, 2017, 2018 Sony Semiconductor Solutions Corporation
  dmxdev.c - DVB demultiplexer device
  Copyright (C) 2000 Ralph Metzler & Marcus Metzler
 		      for convergence integrated media GmbH
  This program is free software; you can redistribute it andor
  modify it under the terms of the GNU Lesser General Public License
  as published by the Free Software Foundation; either version 2.1
  of the License, or (at your option) any later version.
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
	
	  The logic here is a little tricky due to the ifdef.
	 
	  The ringbuffer is used for both read and mmap.
	 
	  It is not needed, however, on two situations:
	 	- Write devices (access with O_WRONLY);
	 	- For duplex device nodes, opened with O_RDWR.
memory barrier
 TODO 
 reset and not flush in case the buffer shrinks 
 reset and not flush in case the buffer shrinks 
 stop feed but only mark the specified filter as stopped (state set) 
 start feed associated with the specified filter 
 restart section feed if it has filters left associated with it,
 delete all PIDs 
 find active filterfeed with same PID 
 if no feed found, try to allocate new one 
 only TS packet filters may have multiple PIDs 
  dvbdev.c
  Copyright (C) 2000 Ralph  Metzler <ralph@convergence.de>
                   & Marcus Metzler <marcus@convergence.de>
                     for convergence integrated media GmbH
  This program is free software; you can redistribute it andor
  modify it under the terms of the GNU Lesser General Public License
  as published by the Free Software Foundation; either version 2.1
  of the License, or (at your option) any later version.
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
 Due to enum tuner_pad_index 
		
		  We should be creating entities for the MPEULE
		  decapsulation hardware (or software implementation).
		 
		  However, the number of for the MPEULE decaps may not be
		  fixed. As we don't have yet dynamic support for PADs at
		  the Media Controller, let's not create the decap
		  entities yet.
 Should never happen, as the first switch prevents it 
	
	  Create the "obvious" link, e. g. the ones that represent
	  a direct association between an interface and an entity.
	  Other links should be created elsewhere, like:
	 		DVB FE intf    -> tuner
	 		DVB demux intf -> dvr
	
	  Prepare to signalize to media_create_pad_links() that multiple
	  entities of the same type exists and a 1:n or n:1 links need to be
	  created.
	  NOTE: if both tuner and demod have multiple instances, it is up
	  to the caller driver to create such links.
 NOTE: first found tuner source pad presumed correct 
 Create demux links for each ringbufferpad 
 Create interface links for FE->tuner, DVR->demux and CA->ca 
		
		  Indirect link - let's not create yet, as we don't know how
		 		   to handle indirect links, nor if this will
		 		   actually be needed.
 use the one the driver asked for 
 if the miracle happens and "generic_usercopy()" is included into
   the kernel, then this can vanish. please don't make the mistake and
   define this as video_usercopy(). this will introduce a dependency
   to the v4l "videodev.o" module, which is unnecessary for some
  Copy arguments into temp kernel buffer  
		
		  For this command, the pointer is actually an integer
		  argument.
 some v4l ioctls are marked wrong ... 
 too big to allocate from stack 
 call driver 
  Copy results into user buffer  
 SPDX-License-Identifier: GPL-2.0
  dvb-vb2.c - dvb-vb2
  Copyright (C) 2015 Samsung Electronics
  Author: jh1009.sung@samsung.com
  This program is free software; you can redistribute it andor modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation.
	
	  videobuf2-vmalloc allocator is context-less so no need to set
	  alloc_ctxs array.
  Videobuf operations
capture type
only mmap is supported currently
	
	  normal case: This func is called twice from demux driver
	  one with valid src pointer, second time with NULL pointer
 Fill buffer 
 Adjust size to a sane value 
 FIXME: round req->size to a 188 or 204 multiple 
 SPDX-License-Identifier: GPL-2.0-or-later
  dvb_ca.c: generic DVB functions for EN50221 CAM interfaces
  Copyright (C) 2004 Andrew de Quincey
  Parts of this file were based on sources as follows:
  Copyright (C) 2003 Ralph Metzler <rjkm@metzlerbros.de>
  based on code:
  Copyright (C) 1999-2002 Ralph  Metzler
                        & Marcus Metzler for convergence integrated media GmbH
 Host control 
 Size write 
 Size read 
 Reset interface 
 Enable FR interrupt 
 Enable DA interrupt 
 read error 
 write error 
 module free 
 data available 
 Information on a CA slot 
 current state of the CAM 
 mutex used for serializing access to one CI slot 
 Number of CAMCHANGES that have occurred since last processing 
 Type of last CAMCHANGE 
 base address of CAM config 
 value to write into Config Control register 
 if 1, the CAM supports DA IRQs 
 size of the buffer to use when talking to the CAM 
 buffer for incoming packets 
 timer used during various states of the slot 
 Private CA-interface information 
 pointer back to the public data structure 
 the DVB device 
 Flags describing the interface (DVB_CA_FLAG_) 
 number of slots supported by this CA interface 
 information on each slot 
 wait queues for read() and write() operations 
 PID of the monitoring thread 
 Flag indicating if the CA device is open 
 Flag indicating the thread should wake up now 
 Delay the main thread should use 
	
	  Slot to start looking for data to read from in the next user-space
	  read operation
 mutex serializing ioctls 
  findstr - Safely find needle in haystack.
  @haystack: Buffer to look in.
  @hlen: Number of bytes in haystack.
  @needle: Buffer to find.
  @nlen: Number of bytes in needle.
  return: Pointer into haystack needle was found at, or NULL if not found.
 EN50221 physical interface functions 
  dvb_ca_en50221_check_camstatus - Check CAM status.
 IRQ mode 
 poll mode 
 move to validate state if reset is completed 
  dvb_ca_en50221_wait_if_status - Wait for flags to become set on the STATUS
 	 register on a CAM interface, checking for errors and timeout.
  @ca: CA instance.
  @slot: Slot on interface.
  @waitfor: Flags to wait for.
  @timeout_hz: Timeout in milliseconds.
  return: 0 on success, nonzero on error.
 loop until timeout elapsed 
 read the status and check for error 
 if we got the flags, it was successful! 
 check for timeout 
 wait for a bit 
 if we get here, we've timed out 
  dvb_ca_en50221_link_init - Initialise the link layer connection to a CAM.
  @ca: CA instance.
  @slot: Slot id.
  return: 0 on success, nonzero on failure.
 we'll be determining these during this function 
	
	  set the host link buffer size temporarily. it will be overwritten
	  with the real negotiated size later.
 read the buffer size from the CAM 
	
	  store it, and choose the minimum of our buffer and the CAM's buffer
	  size
 write the buffer size to the CAM 
 success 
  dvb_ca_en50221_read_tuple - Read a tuple from attribute memory.
  @ca: CA instance.
  @slot: Slot id.
  @address: Address to read from. Updated.
  @tuple_type: Tuple id byte. Updated.
  @tuple_length: Tuple length. Updated.
  @tuple: Dest buffer for tuple (must be 256 bytes). Updated.
  return: 0 on success, nonzero on error.
 grab the next tuple length and type 
 read in the whole tuple 
 success 
  dvb_ca_en50221_parse_attributes - Parse attribute memory of a CAM module,
 	extracting Config register, and checking it is a DVB CAM module.
  @ca: CA instance.
  @slot: Slot id.
  return: 0 on success, <0 on failure.
 CISTPL_DEVICE_0A 
 CISTPL_DEVICE_0C 
 CISTPL_VERS_1 
 CISTPL_MANFID 
 CISTPL_CONFIG 
 extract the configbase 
 check it contains the correct DVB string 
 is it a version we support? 
 process the CFTABLE_ENTRY tuples, and any after those 
 CISTPL_CFTABLE_ENTRY 
 if we've already parsed one, just use it 
 get the config option 
 OK, check it contains the correct strings 
 CISTPL_NO_LINK 
 CISTPL_END 
 Unknown tuple type - just skip this tuple 
 success! 
  dvb_ca_en50221_set_configoption - Set CAM's configoption correctly.
  @ca: CA instance.
  @slot: Slot containing the CAM.
 set the config option 
 check it 
 fine! 
  dvb_ca_en50221_read_data - This function talks to an EN50221 CAM control
 	interface. It reads a buffer of data from the CAM. The data can either
 	be stored in a supplied buffer, or automatically be added to the slot's
 	rx_buffer.
  @ca: CA instance.
  @slot: Slot to read from.
  @ebuf: If non-NULL, the data will be written to this buffer. If NULL,
 	  the data will be added into the buffering system as a normal
 	  fragment.
  @ecount: Size of ebuf. Ignored if ebuf is NULL.
  return: Number of bytes read, or < 0 on error
 check if we have space for a link buf in the rx_buffer 
 check if there is data available 
 no data 
 read the amount of data 
 check it will fit 
 fill the buffer 
 read byte and check 
 OK, store it in the buffer 
 check for read error (RE should now be 0) 
	
	  OK, add it to the receive buffer, or copy into external buffer if
	  supplied
 wake up readers when a last_fragment is received 
  dvb_ca_en50221_write_data - This function talks to an EN50221 CAM control
 				interface. It writes a buffer of data to a CAM.
  @ca: CA instance.
  @slot: Slot to write to.
  @buf: The data in this buffer is treated as a complete link-level packet to
 	 be written.
  @bytes_write: Size of ebuf.
  return: Number of bytes written, or < 0 on error.
 sanity check 
	
	  it is possible we are dealing with a single buffer implementation,
	  thus if there is data available for read or if there is even a read
	  already in progress, we do nothing but awake the kernel thread to
	  process the data if necessary.
 OK, set HC bit 
 check if interface is still free 
 it wasn't free => try again later 
	
	  It may need some time for the CAM to settle down, or there might
	  be a race condition between the CAM, writing HC and our last
	  check for DA. This happens, if the CAM asserts DA, just after
	  checking DA before we are setting HC. In this case it might be
	  a bug in the CAM to keep the FR bit, the lower layerHW
	  communication requires a longer timeout or the CAM needs more
	  time internally. But this happens in reality!
	  We need to read the status from the HW again and do the same
	  we did for the previous check for DA
 send the amount of data 
 send the buffer 
 check for write error (WE should now be 0) 
 EN50221 higher level functions 
  dvb_ca_en50221_slot_shutdown - A CAM has been removed => shut it down.
  @ca: CA instance.
  @slot: Slot to shut down.
	
	  need to wake up all processes to check if they're now trying to
	  write to a defunct CAM
 success 
  dvb_ca_en50221_camchange_irq - A CAMCHANGE IRQ has occurred.
  @pubca: CA instance.
  @slot: Slot concerned.
  @change_type: One of the DVB_CA_CAMCHANGE_ values.
  dvb_ca_en50221_camready_irq - A CAMREADY IRQ has occurred.
  @pubca: CA instance.
  @slot: Slot concerned.
  dvb_ca_en50221_frda_irq - An FR or DA IRQ has occurred.
  @pubca: CA instance.
  @slot: Slot concerned.
 EN50221 thread functions 
  dvb_ca_en50221_thread_wakeup - Wake up the DVB CA thread
  @ca: CA instance.
  dvb_ca_en50221_thread_update_delay - Update the delay used by the thread.
  @ca: CA instance.
	
	  Beware of too high polling frequency, because one polling
	  call might take several hundred milliseconds until timeout!
 60s 
 5s 
 60s 
 100ms 
 100ms 
 60s 
 100ms 
 100ms 
  dvb_ca_en50221_poll_cam_gone - Poll if the CAM is gone.
  @ca: CA instance.
  @slot: Slot to process.
  return:: 0 .. no change
           1 .. CAM state changed
	
	  we need this extra check for annoying interfaces like the
	  budget-av
  dvb_ca_en50221_thread_state_machine - Thread state machine for one CA slot
 	to perform the data transfer.
  @ca: CA instance.
  @slot: Slot to process.
 check the cam status + deal with CAMCHANGEs 
 clear down an old CI slot if necessary 
 if a CAM is NOW present, initialise it 
 we've handled one CAMCHANGE 
 CAM state machine 
 no action needed 
		
		  no other action needed; will automatically change state when
		  ready
 poll slots for data 
			
			  if a CAMCHANGE occurred at some point, do not do any
			  more processing of this slot
				
				  we don't want to sleep on the next iteration
				  so we can handle the cam change
 check if we've hit our limit this time 
				
				  don't sleep; there is likely to be more data
				  to read
  Kernel thread which monitors CA slots for CAM changes, and performs data
  transfers.
 choose the correct initial delay 
 main loop 
 sleep for a bit 
 go through all the slots processing them 
 EN50221 IO interface functions 
  dvb_ca_en50221_io_do_ioctl - Real ioctl implementation.
  @file: File concerned.
  @cmd: IOCTL command.
  @parg: Associated argument.
  NOTE: CA_SEND_MSGCA_GET_MSG ioctls have userspace buffers passed to them.
  return: 0 on success, <0 on error.
  dvb_ca_en50221_io_ioctl - Wrapper for ioctl implementation.
  @file: File concerned.
  @cmd: IOCTL command.
  @arg: Associated argument.
  return: 0 on success, <0 on error.
  dvb_ca_en50221_io_write - Implementation of write() syscall.
  @file: File structure.
  @buf: Source buffer.
  @count: Size of source buffer.
  @ppos: Position in file (ignored).
  return: Number of bytes read, or <0 on error.
	
	  Incoming packet has a 2 byte header.
	  hdr[0] = slot_id, hdr[1] = connection_id
 extract slot & connection id 
 check if the slot is actually running 
 fragment the packets & store in the buffer 
			
			  check the CAM hasn't been removedreset in the
			  meantime
  Condition for waking up in dvb_ca_en50221_io_read_condition
  dvb_ca_en50221_io_read - Implementation of read() syscall.
  @file: File structure.
  @buf: Destination buffer.
  @count: Size of destination buffer.
  @ppos: Position in file (ignored).
  return: Number of bytes read, or <0 on error.
	
	  Outgoing packet has a 2 byte header.
	  hdr[0] = slot_id, hdr[1] = connection_id
 wait for some data 
 if we're in nonblocking mode, exit immediately 
 wait for some data 
  dvb_ca_en50221_io_open - Implementation of file open syscall.
  @inode: Inode concerned.
  @file: File concerned.
  return: 0 on success, <0 on failure.
				
				  it is safe to call this here without locks
				  because ca->open == 0. Data is not read in
				  this case
  dvb_ca_en50221_io_release - Implementation of file close syscall.
  @inode: Inode concerned.
  @file: File concerned.
  return: 0 on success, <0 on failure.
 mark the CA device as closed 
  dvb_ca_en50221_io_poll - Implementation of poll() syscall.
  @file: File concerned.
  @wait: poll wait table.
  return: Standard poll mask.
 if there is something, return now 
 Initialisationshutdown functions 
  dvb_ca_en50221_init - Initialise a new DVB CA EN50221 interface device.
  @dvb_adapter: DVB adapter to attach the new CA device to.
  @pubca: The dvb_ca instance.
  @flags: Flags describing the CA device (DVB_CA_FLAG_).
  @slot_count: Number of slots supported.
  return: 0 on success, nonzero on failure
 initialise the system data 
 register the DVB device 
 now initialise each slot 
 create a kthread for monitoring this CA device 
  dvb_ca_en50221_release - Release a DVB CA EN50221 interface device.
  @pubca: The associated dvb_ca instance.
 shutdown the thread if there was one 
  dvb_demux.c - DVB kernel demux API
  Copyright (C) 2000-2001 Ralph  Metzler <ralph@convergence.de>
 		       & Marcus Metzler <marcus@convergence.de>
 			 for convergence integrated media GmbH
  This program is free software; you can redistribute it andor
  modify it under the terms of the GNU Lesser General Public License
  as published by the Free Software Foundation; either version 2.1
  of the License, or (at your option) any later version.
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
  static inlined helper functions
 no payload?
 adaptation field?
 corrupted data?
  Software filter functions
 PUSI ?
		
		  Section padding is done with 0xff bytes entirely.
		  Due to speed reasons, we won't check all of them
		  but just first and last.
  Losless Section Demux 1.4.1 by Emard
  Valsecchi Patrick:
   - middle of section A  (no PUSI)
   - end of section A and start of section B
     (with PUSI pointing to the start of the second section)
   In this case, without feed->pusi_seen you'll receive a garbage section
   consisting of the end of section A. Basically because tsfeedp
   is incemented and the use=0 condition is not raised
   when the second packet arrives.
  Fix:
  when demux is started, let feed->pusi_seen = false to
  prevent initial feeding of garbage from the end of
  previous section. When you for the first time see PUSI=1
  then set feed->pusi_seen = true
	
	  Dump all the sections we can find in the data (Emard)
 internal error should never happen 
 to be sure always set secbuf 
 dump [secbuf .. secbuf+seclen) 
 secbufp and secbuf moving together is 
 redundant but saves pointer arithmetic 
 count == 0 if no payload or out of range 
 payload start 
 adaption field present, check for discontinuity_indicator 
		
		  those bytes under some circumstances will again be reported
		  in the following dvb_dmx_swfilter_section_new
		
		  Discontinuity detected. Reset pusi_seen to
		  stop feeding of suspicious data until next PUSI=1 arrives
		 
		  FIXME: does it make sense if the MPEG-TS is the one
		 	reporting discontinuity?
 PUSI=1 (is set), section boundary is here 
 before start of new section, set pusi_seen 
 PUSI=0 (is not set), no section boundary 
 Used only on full-featured devices 
 show speed every SPEED_PKTS_INTERVAL packets 
 convert to 1024 basis 
		 data in this packet can't be trusted - drop it unless
 if TEI bit is set, pid may be wrong- skip pkt counter 
 check pkt counter 
 end check 
		 copy each packet only once to the dvr device, even
 This garbage is part of a valid packet? 
 Filter all pktsize= 188 or 204 sized packets and skip garbage. 
 tsbuf[0] is now 0x47. 
 double check 
  dmx_section_feed API calls
		 release dvbdmx->mutex as far as it is
  dvb_demux kernel data API calls
FIXME: release any unneeded resources if users==0
  dvb-math provides some complex fixed-point math
  operations shared between the dvb related stuff
  Copyright (C) 2006 Christoph Pfister (christophpfister@gmail.com)
  This library is free software; you can redistribute it andor modify
  it under the terms of the GNU Lesser General Public License as
  published by the Free Software Foundation; either version 2.1 of
  the License, or (at your option) any later version.
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU Lesser General Public License for more details.
	
	 	returns: log2(value)  2^24
	 	wrong result if value = 0 (log2(0) is undefined)
 first detect the msb (count begins at 0) 
	
	 	now we use a logtable after the following method:
	 
	 	log2(2^x  y)  2^24 = x  2^24 + log2(y)  2^24
	 	where x = msb and therefore 1 <= y < 2
	 	first y is determined by shifting the value left
	 	so that msb is bit 31
	 		0x00231f56 -> 0x8C7D5800
	 	the result is y  2^31 -> "significand"
	 	then the highest 9 bits are used for a table lookup
	 	the highest bit is discarded because it's always set
	 	the highest nine bits in our example are 100011000
	 	so we would use the entry 0x18
	
	 	last step we do is interpolation because of the
	 	limitations of the log table the error is that part of
	 	the significand which isn't used for lookup then we
	 	compute the ratio between the error and the next table entry
	 	and interpolate it between the log table entry used and the
	 	next one the biggest error possible is 0x7fffff
	 	(in our example it's 0x7D5800)
	 	needed value for next table entry is 0x800000
	 	so the interpolation is
	 	(error  0x800000)  (logtable_next - logtable_current)
	 	in the implementation the division is moved to the end for
	 	better accuracy there is also an overflow correction if
	 	logtable_next is 256
 now we return the result 
	
	 	returns: log10(value)  2^24
	 	wrong result if value = 0 (log10(0) is undefined)
	
	 	we use the following method:
	 	log10(x) = log2(x)  log10(2)
 SPDX-License-Identifier: GPL-2.0-or-later
  dvb_net.c
  Copyright (C) 2001 Convergence integrated media GmbH
                     Ralph Metzler <ralph@convergence.de>
  Copyright (C) 2002 Ralph Metzler <rjkm@metzlerbros.de>
  ULE Decapsulation code:
  Copyright (C) 2003, 2004 gcs - Global Communication & Services GmbH.
                       and Department of Scientific Computing
                           Paris Lodron University of Salzburg.
                           Hilmar Linder <hlinder@cosy.sbg.ac.at>
                       and Wolfram Stering <wstering@cosy.sbg.ac.at>
  ULE Decaps according to RFC 4326.
  ULE ChangeLog:
  Feb 2004: hlws v1: Implementing draft-fair-ipdvb-ule-01.txt
  Dec 2004: hlws v2: Implementing draft-ietf-ipdvb-ule-03.txt:
                        ULE Extension header handling.
                      Bugreports by Moritz Vieth and Hanno Tersteegen,
                        Fraunhofer Institute for Open Communication Systems
                        Competence Center for Advanced Satellite Communications.
                      Bugfixes and robustness improvements.
                      Filtering on dest MAC addresses, if present (D-Bit = 0)
                      DVB_ULE_DEBUG compile-time option.
  Apr 2006: cp v3:    Bugfixes and compliency with RFC 4326 (ULE) by
                        Christian Praehauser <cpraehaus@cosy.sbg.ac.at>,
                        Paris Lodron University of Salzburg.
  FIXME  TODO (dvb_net.c):
  Unloading does not work for 2.6.9 kernels: a refcount doesn't go to zero.
  The code inside DVB_ULE_DEBUG keeps a history of the
  last 100 TS cells processed.
 Either FEED_TYPE_ or FEED_TYPE_ULE 
 Set to 1, if synchronization on PUSI required. 
 TS continuity counter after sync on PUSI. 
 ULE SNDU decodes into this buffer. 
 Pointer into skb to next ULE extension header. 
 ULE SNDU length in bytes, wo D-Bit. 
 ULE SNDU type field, complete. 
 ULE SNDU type field, if split across 2 TS cells. 
	unsigned char ule_dbit;			 Whether the DestMAC address present
 Whether the ULE_BRIDGED extension header was found. 
 Nr. of bytes still required for current ULE SNDU. 
 Current ts cell counter. 
 	Determine the packet's protocol ID. The rule here is that we
 	assume 802.3 if the type field is short enough to be a length.
 	This is normal practice and works for any 'now in use' protocol.
   stolen from eth.c out of the linux kernel, hacked for dvb-device
   by Michael Holzt <kju@debian.org>
	
	 	This is a magic hack to spot IPX packets. Older Novell breaks
	 	the protocol design and runs IPX over 802.3 without an 802.2 LLC
	 	layer. We look for FFFF which isn't a used 802.2 SSAPDSAP. This
	 	won't work for fault tolerant netware but does for the rest.
	
	 	Real 802.2 LLC
 ULE Extension Header handlers. 
 A frame Type < ETH_P_802_3_MIN for a bridged frame, introduces a LLC Length field. 
	 Note:
	  From RFC4326:
	   "A bridged SNDU is a Mandatory Extension Header of Type 1.
	    It must be the final (or only) extension header specified in the header chain of a SNDU."
	  The 'ule_bridged' flag will cause the extension header processing loop to terminate.
  Handle ULE extension headers.
   Function is called after a successful CRC32 verification of an ULE SNDU to complete its decoding.
   Returns: >= 0: nr. of bytes consumed by next extension header
 	     -1:   Mandatory extension header that is not recognized or TEST SNDU; discard.
 Table of mandatory extension header handlers.  The header type is the index. 
 Table of optional extension header handlers.  The header type is the index. 
 Discriminate mandatory and optional extension headers. 
 Mandatory extension header 
 This assures the extension handling loop will terminate. 
 else: extension handler failed or SNDU should be discarded
 SNDU has to be discarded. 
 Optional extension header.  Calculate the length. 
 Process the optional extension header according to its type. 
		
		  note: the length of the next header type is included in the
		  length of THIS optional extension header
 Stop extension header processing and discard SNDU. 
 Prepare for a new ULE SNDU: reset the decoder state. 
  Decode ULE SNDUs according to draft-ietf-ipdvb-ule-03.txt from a sequence of
  TS cells of a single PID.
 We are about to process a new TS cell. 
	
	  Check TS h->error conditions: sync_byte, transport_error_indicator,
	  scrambling_control .
 Drop partly decoded SNDU, reset state, resync on PUSI. 
 Prepare for next SNDU. 
 Continue with next TS cell. 
 Find beginning of first ULE SNDU in current TS cell. 
 Synchronize continuity counter. 
 There is a pointer field here. 
 Skip to destination of pointer field. 
 Check continuity counter. 
 TS discontinuity handling: 
 Drop partly decoded SNDU, reset state, resync on PUSI. 
 Prepare for next SNDU. 
 reset_ule(h->priv);  moved to below.
 skip to next PUSI. 
	
	  If we still have an incomplete payload, but PUSI is
	  set; some TS cells are missing.
	  This is only possible here, if we missed exactly 16 TS
	  cells (continuity counter wrap).
				
				  Pointer field is invalid.
				  Drop this TS cell and any started ULE SNDU.
				
				  Drop partly decoded SNDU, reset state,
				  resync on PUSI.
			
			  Skip pointer field (we're processing a
			  packed payload).
			
			  Current SNDU lacks more data than there
			  could be available in the current TS cell.
 Prepare for next SNDU. 
			
			  Resync: go to where pointer field points to:
			  start of next ULE SNDU.
  Start a new payload with skb.
  Find ULE header.  It is only guaranteed that the
  length field (2 bytes) is contained in the current
  TS.
  Check h.ts_remain has to be >= 2 here.
 Got at least two bytes, thus extrace the SNDU length. 
 D-Bit is set: no dest mac present. 
 consume the 2 bytes SNDU length. 
	
	  State of current TS:
	    h->ts_remain (remaining bytes in the current TS cell)
	    0	ule_type is not available now, we need the next TS cell
	    1	the first byte of the ule_type is present
	  >=2	full ULE header present, maybe some payload data as well.
 first byte of ule_type is set. 
 complete ULE header is present in current TS. 
 Extract ULE type field. 
 points to payload start. 
 Complete type is present in new TS. 
 points to payload start. 
	
	  Allocate the skb (decoder target buffer) with the correct size,
	  as follows:
	 
	  prepare for the largest case: bridged SNDU with MAC address
	  (dbit = 0).
 This includes the CRC32 _and_ dest mac, if !dbit. 
	
	  Leave space for Ethernet or bridged SNDU header
	  (eth hdr plus one MAC addr).
	
	  The destination MAC address is the next data in the skb.  It comes
	  before any extension headers.
	 
	  Check if the payload of this SNDU should be passed up the stack.
 multicast or broadcast 
 multicast 
 no broadcast; 
			
			  else:
			  all multicast mode: accept all multicast packets
 else: broadcast 
 CRC32 verified OK. 
 CRC32 was OK, so remove it from skb. 
 dest_addr buffer is only valid if h->priv->ule_dbit == 0 
 Handle ULE Extension Headers. 
 There is an extension header.  Handle it accordingly. 
			
			  Mandatory extension header unknown or TEST SNDU.
			  Drop it.
 pr_warn("Dropping SNDU, extension headers.\n" );
	
	  Constructassure correct ethernet header.
	  Note: in bridged mode (h->priv->ule_bridged != 0)
	  we already have the (original) ethernet
	  header at the start of the payload (after
	  optional dest. address and any extension
	  headers).
 else:  skb is in correct state; nothing to do. 
 Stuff into kernel's protocol stack. 
	
	  If D-bit is set (i.e. destination MAC address not present),
	  receive the packet anyhow.
	
	  For all TS cells in current buffer.
	  Appearently, we are called for every single TS cell.
 no incr. ) {
 We are about to process a new TS cell. 
 Synchronize on PUSI, if required. 
 Check if new payload needs to be started. 
 Copy data into our current skb. 
 Check for complete payload. 
 Check CRC32, we've got it in our skb already. 
				 Set D-bit for CRC32 verification,
 Prepare for next SNDU. 
 More data in current TS (look at the bytes following the CRC32)? 
 Next ULE SNDU starts right there. 
 pr_warn("More data in current TS: [%#x %#x %#x %#x]\n",
	(h.from_where + 0), (h.from_where + 1),
	(h.from_where + 2), (h.from_where + 3));
 pr_warn("h.ts @ %p, stopped @ %p:\n", h.ts, h.from_where + 0);
 hexdump(h.ts, 188);
 for all available TS cells 
	 pr_info("TS callback: %u bytes, %u TS cells @ %p.\n",
 note: pkt_len includes a 32bit checksum 
 it seems some ISPs manage to screw up here, so we have to
 drop scrambled or broken packets 
 drop scrambled 
 handle LLCSNAP, see rfc-1042 
 FIXME: assemble datagram from multiple sections 
	 we have 14 byte ethernet header (ip header follows);
	  12 byte MPE header; 4 byte checksum; + 2 byte alignment, 8 byte LLCSNAP
pr_notice("%s: Memory squeeze, dropping packet.\n", dev->name);
 longword align L3 header 
 copy L3 payload 
 create ethernet header: 
		 protocol numbers are from rfc-1700 or
		  http:www.iana.orgassignmentsethernet-numbers
 version field from IP header 
 IPv6 
 IPv4 
	
	  we rely on the DVB API definition where exactly one complete
	  section is delivered in buffer1
 we have payloads encapsulated in TS 
 Set netdevice pointer for ts decaps callback. 
 pid 
 type 
 pes type 
 timeout 
 compatibility fix to keep dvb0_0 format 
 binary compatibility cruft 
 SPDX-License-Identifier: GPL-2.0-or-later
  dvb_frontend.c: DVB frontend tuning interfacethread
  Copyright (C) 1999-2001 Ralph  Metzler
 			   Marcus Metzler
 			   Holger Waechtler
 				      for convergence integrated media GmbH
  Copyright (C) 2004 Andrew de Quincey (tuning thread cleanup)
 Enables DVBv3 compatibility bits at the headers 
  FESTATE_IDLE. No tuning parameters have been supplied and the loop is idling.
  FESTATE_RETUNE. Parameters have been supplied, but we have not yet performed the first tune.
  FESTATE_TUNING_FAST. Tuning parameters have been supplied and fast zigzag scan is in progress.
  FESTATE_TUNING_SLOW. Tuning parameters have been supplied. Fast zigzag failed, so we're trying again, but slower.
  FESTATE_TUNED. The frontend has successfully locked on.
  FESTATE_ZIGZAG_FAST. The lock has been lost, and a fast zigzag has been initiated to try and regain it.
  FESTATE_ZIGZAG_SLOW. The lock has been lost. Fast zigzag has been failed, so we're trying again, but slower.
  FESTATE_DISEQC. A DISEQC command has just been issued.
  FESTATE_WAITFORLOCK. When we're waiting for a lock.
  FESTATE_SEARCHING_FAST. When we're searching for a signal using a fast zigzag scan.
  FESTATE_SEARCHING_SLOW. When we're searching for a signal using a slow zigzag scan.
  FESTATE_LOSTLOCK. When the lock has been lost, and we're searching it again.
 threadfrontend values 
 swzigzag values 
 call detach before dropping the reference count 
	
	  Check if the frontend was registered, as otherwise
	  kref was not initialized yet.
  Due to DVBv3 API calls, a delivery system should be mapped into one of
  the 4 DVBv3 delivery systems (FE_QPSK, FE_QAM, FE_OFDM or FE_ATSC),
  otherwise, a DVBv3 call will fail.
		
		  Doesn't know how to emulate those types andor
		  there's no frontend driver from this type yet
		  with some emulation code, so, we're not sure yet how
		  to handle them, or they're not compatible with a DVBv3 call.
  dvb_frontend_swzigzag_autotune - Performs automatic twiddling of frontend
 	parameters.
  @fe: The frontend concerned.
  @check_wrapped: Checks if an iteration has completed.
 		   DO NOT SET ON THE FIRST ATTEMPT.
  return: Number of complete iterations that have been performed.
 are we using autoinversion? 
 setup parameters correctly 
 calculate the lnb_drift 
 wrap the auto_step if we've exceeded the maximum drift 
 perform inversion and +- zigzag 
 try with the current inversion and current drift setting 
 it'll be incremented to 0 in a moment 
	 if this attempt would hit where we started, indicate a complete
 set the frontend itself 
 if we've got no parameters, just keep idling 
 in SCAN mode, we just set the frontend when asked and leave it alone 
 get the frontend status 
 if we're not tuned, and we have a lock, move to the TUNED state 
 if we're tuned, then we have determined the correct inversion 
 if we are tuned already, check we're still locked 
 we're tuned, and the lock is still good... 
 if we _WERE_ tuned, but now don't have a lock 
	 don't actually do anything if we're in the LOSTLOCK state,
	 don't do anything if we're in the DISEQC state, since this
	  might be someone with a motorized dish controlled by DISEQC.
	 if we're in the RETUNE state, set everything up for a brand
	  new scan, keeping the current inversion setting, as the next
 fast zigzag. 
 perform a tune 
			 OK, if we've run out of trials at the fast speed.
		 if we've just re-tuned, enter the ZIGZAG_FAST state.
		  This ensures we cannot return from an
		  FE_SET_FRONTEND ioctl before the first frontend tune
 slow zigzag 
		 Note: don't bother checking for wrapping; we stay in this
 is locked when we enter the thread... 
 got signal or quitting 
 do an iteration of the tuning loop 
				 Case where we are going to search for a carrier
				  User asked us to retune again for some reason, possibly
				  requesting a search with a new set of parameters
						 We did do a search as was requested, the flags are
						  now unset as well and has the flags wrt to search.
 Track the carrier if the search was successful 
 update event list 
 paranoia check in case a signal arrived 
  Sleep for the amount of time given by add_usec parameter
  This needs to be as precise as possible, as it affects the detection of
  the dish tone command at the satellite subsystem. The precision is improved
  by using a scheduled msleep followed by udelay for the remainder.
 If the standard is for satellite, convert frequencies to kHz 
 range check: frequency 
 range check: symbol rate 
 AUTO 
 All layers (A,B,C) 
 default sequence 
 implied for DVB-S in legacy API 
 implied for DVB-S 
 Set 
 Get 
 Statistics API 
 Synchronise the legacy tuning parameters into the cache, so that demodulator
  drivers can use a single set_frontend tuning function, regardless of whether
  it's being used for the legacy or new API, reducing code and complexity.
 Ensure the cached values are set correctly in the frontend
  legacy tuning structures, for the advanced tuning API.
  dtv_get_frontend - calls a callback for retrieving DTV parameters
  @fe:		struct dvb_frontend pointer
  @c:		struct dtv_frontend_properties pointer (DVBv5 cache)
  @p_out:	struct dvb_frontend_parameters pointer (DVBv3 FE struct)
  This routine calls either the DVBv3 or DVBv5 get_frontend call.
  If c is not null, it will update the DVBv5 cache struct pointed by it.
  If p_out is not null, it will update the DVBv3 params pointed by it.
 As everything is in cache, get_frontend fops are always supported 
 ISDB-T Support here 
 Multistream support 
 Physical layer scrambling support 
 ATSC-MH 
 Fill quality measures 
  emulate_delivery_system - emulate a DVBv5 delivery system with a DVBv3 type
  @fe:			struct frontend;
  @delsys:			DVBv5 type that will be used for emulation
  Provides emulation for delivery systems that are compatible with the old
  DVBv3 call. Among its usages, it provices support for ISDB-T, and allows
  using a DVB-S2 only frontend just like it were a DVB-S, if the frontend
  parameters are compatible with DVB-S spec.
	
	  If the call is for ISDB-T, put it into full-seg, auto mode, TV
  dvbv5_set_delivery_system - Sets the delivery system for a DVBv5 API call
  @fe:			frontend struct
  @desired_system:	delivery system requested by the user
  A DVBv5 call know what's the desired system it wants. So, set it.
  There are, however, a few known issues with early DVBv5 applications that
  are also handled by this logic:
  1) Some early apps use SYS_UNDEFINED as the desired delivery system.
     This is an API violation, but, as we don't want to break userspace,
     convert it to the first supported delivery system.
  2) Some apps might be using a DVBv5 call in a wrong way, passing, for
     example, SYS_DVBT instead of SYS_ISDBT. This is because early usage of
     ISDB-T provided backward compat with DVB-T.
	
	  It was reported that some old DVBv5 applications were
	  filling delivery_system with SYS_UNDEFINED. If this happens,
	  assume that the application wants to use the first supported
	  delivery system.
	
	  This is a DVBv5 call. So, it likely knows the supported
	  delivery systems. So, check if the desired delivery system is
	  supported
	
	  The requested delivery system isn't supported. Maybe userspace
	  is requesting a DVBv3 compatible delivery system.
	 
	  The emulation only works if the desired system is one of the
	  delivery systems supported by DVBv3 API
	
	 Get the last non-DVBv3 delivery system that has the same type
	 of the desired system
 There's nothing compatible with the desired delivery system 
  dvbv3_set_delivery_system - Sets the delivery system for a DVBv3 API call
  @fe:	frontend struct
  A DVBv3 call doesn't know what's the desired system it wants. It also
  doesn't allow to switch between different types. Due to that, userspace
  should use DVBv5 instead.
  However, in order to avoid breaking userspace API, limited backward
  compatibility support is provided.
  There are some delivery systems that are incompatible with DVBv3 calls.
  This routine should work fine for frontends that support just one delivery
  system.
  For frontends that support multiple frontends:
  1) It defaults to use the first supported delivery system. There's an
     userspace application that allows changing it at runtime;
  2) If the current delivery system is not compatible with DVBv3, it gets
     the first one that it is compatible.
  NOTE: in order for this to work with applications like Kaffeine that
 	uses a DVBv5 call for DVB-S2 and a DVBv3 call to go back to
 	DVB-S, drivers that support both DVB-S and DVB-S2 should have the
 	SYS_DVBS entry before the SYS_DVBS2, otherwise it won't switch back
 	to DVB-S.
 If not set yet, defaults to the first supported delivery system 
	
	  Trivial case: just use the current one, if it already a DVBv3
	  delivery system
	
	  Seek for the first delivery system that it is compatible with a
	  DVBv3 standard
 get frontend-specific tuning settings 
 default values 
			
			  FIXME: This sounds wrong! if freqency_stepsize is
			  defined by the frontend, why not use it???
 no zigzag 
  dtv_property_process_set -  Sets a single DTV property
  @fe:		Pointer to &struct dvb_frontend
  @file:	Pointer to &struct file
  @cmd:	Digital TV command
  @data:	An unsigned 32-bits number
  This routine assigns the property
  value to the corresponding member of
  &struct dtv_frontend_properties
  Returns:
  Zero on success, negative errno on failure.
 Dump DTV command name and value
		
		  Reset a cache of data specific to the frontend here. This does
		  not effect hardware.
		
		  Use the cached Digital TV properties to tune the
		  frontend
 ISDB-T Support here 
 Multistream support 
 Physical layer scrambling support 
 ATSC-MH 
	
	  If the frontend is opened in read-only mode, only the ioctls
	  that don't interfere with the tune logic should be accepted.
	  That allows an external application to monitor the DVB QoS and
	  statistics parameters.
	 
	  That matches all _IOR() ioctls, except for two special cases:
	    - FE_GET_EVENT is part of the tuning logic on a DVB application;
	    - FE_DISEQC_RECV_SLAVE_REPLY is part of DiSEqC 2.0
	      setup
	  So, those two ioctls should also return -EPERM, as otherwise
	  reading from them would interfere with a DVB tune application
		
		  Put an arbitrary limit on the number of messages that can
		  be sent at once
		
		  Put an arbitrary limit on the number of messages that can
		  be sent at once
		
		  Let's use our own copy of property cache, in order to
		  avoid mangling with DTV zigzag logic, as drivers might
		  return crap, if they don't check if the data is available
		  before updating the properties cache.
	
	  Initialize output parameters to match the values given by
	  the user. FE_SET_FRONTEND triggers an initial frontend event
	  with status = 0, which copies output parameters to userspace.
	
	  Be sure that the bandwidth will be filled for all
	  non-satellite systems, as tuners need to know what
	  low passNyquist half filter should be applied, in
	  order to avoid inter-channel noise.
	 
	  ISDB-T and DVB-TT2 already sets bandwidth.
	  ATSC and DVB-C don't set, so, the core should fill it.
	 
	  On DVB-C Annex A and C, the bandwidth is a function of
	  the roll-off and symbol rate. Annex B defines different
	  roll-off factors depending on the modulation. Fortunately,
	  Annex B is only used with 6MHz, so there's no need to
	  calculate it.
	 
	  While not officially supported, a side effect of handling it at
	  the cache level is that a program could retrieve the bandwidth
	  via DTV_BANDWIDTH_HZ, which may be useful for test programs.
 force auto frequency inversion if requested 
	
	  without hierarchical coding code_rate_LP is irrelevant,
	  so we tolerate the otherwise invalid FEC_NONE setting
 Request the search algorithm to search 
	
	  Put an arbitrary limit on the number of messages that can
	  be sent at once
	
	  Let's use our own copy of property cache, in order to
	  avoid mangling with DTV zigzag logic, as drivers might
	  return crap, if they don't check if the data is available
	  before updating the properties cache.
	
	  Let's use our own copy of property cache, in order to
	  avoid mangling with DTV zigzag logic, as drivers might
	  return crap, if they don't check if the data is available
	  before updating the properties cache.
		
		  Put an arbitrary limit on the number of messages that can
		  be sent at once
		
		  Associate the 4 delivery systems supported by DVBv3
		  API with their DVBv5 counterpart. For the other standards,
		  use the closest type, assuming that it would hopefully
		  work with a DVBv3 application.
		  It should be noticed that, on multi-frontend devices with
		  different types (terrestrial and cable, for example),
		  a pure DVBv3 application won't be able to use all delivery
		  systems. Yet, changing the DVBv5 cache to the other delivery
		  system should be enough for making it work.
 Set CAN_INVERSION_AUTO bit on in other than oneshot mode 
		 if retune was requested but hasn't occurred yet, prevent
 DEPRECATED dish control ioctls 
			
			  NOTE: This is a fallback condition.  Some frontends
			  (stv0299 for instance) take longer than 8msec to
			  respond to a set_voltage command.  Those switches
			  need custom routines to switch properly.  For all
			  other frontends, the following should work ok.
			  Dish network legacy switches (as used by Dish500)
			  are controlled by sending 9-bit command words
			  spaced 8msec apart.
			  the actual command word is switchport dependent
			  so it is up to the userspace application to send
			  the right command.
			  The command must always start with a '0' after
			  initialization, so parg is 8 bits and does not
			  include the initialization or start bit
			 before sending a command, initialize by sending
			  a 32ms 18V to the switch
 set voltage to (last ? 13V : 18V) 
 DEPRECATED statistics ioctls 
 DEPRECATED DVBv3 ioctls 
 switch 
		 If we took control of the bus, we need to force
		   reinitialization.  This is because many ts_bus_ctrl()
		   functions strobe the RESET pin on the demod, and if the
		   frontend thread already exists then the dvb_init() routine
		   won't get called (which is what usually does initial
 normal tune mode when opened RW 
  empty event queue 
	
	  After initialization, there need to be two references: one
	  for dvb_unregister_frontend(), and another one for
	  dvb_frontend_detach().
	
	  Initialize the cache to the proper values according with the
	  first supported delivery system (ops->delsys[0])
 fe is invalid now 
  dvb_ringbuffer.c: ring buffer implementation for the dvb driver
  Copyright (C) 2003 Oliver Endriss
  Copyright (C) 2004 Andrew de Quincey
  based on code originally found in av7110.c & dvb_ci.c:
  Copyright (C) 1999-2003 Ralph  Metzler
                        & Marcus Metzler for convergence integrated media GmbH
  This program is free software; you can redistribute it andor
  modify it under the terms of the GNU Lesser General Public License
  as published by the Free Software Foundation; either version 2.1
  of the License, or (at your option) any later version.
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.
	 smp_load_acquire() to load write pointer on reader side
	  this pairs with smp_store_release() in dvb_ringbuffer_write(),
	  dvb_ringbuffer_write_user(), or dvb_ringbuffer_reset()
	 
	  for memory barriers also see Documentationcore-apicircular-buffers.rst
	 READ_ONCE() to load read pointer on writer side
	  this pairs with smp_store_release() in dvb_ringbuffer_read(),
	  dvb_ringbuffer_read_user(), dvb_ringbuffer_flush(),
	  or dvb_ringbuffer_reset()
	 smp_load_acquire() to load write pointer on reader side
	  this pairs with smp_store_release() in dvb_ringbuffer_write(),
	  dvb_ringbuffer_write_user(), or dvb_ringbuffer_reset()
	 dvb_ringbuffer_flush() counts as read operation
	  smp_load_acquire() to load write pointer
	  smp_store_release() to update read pointer, this ensures that the
	  correct pointer is visible for subsequent dvb_ringbuffer_free()
	  calls on other cpu cores
	 dvb_ringbuffer_reset() counts as read and write operation
	  smp_store_release() to update read pointer
 smp_store_release() to update write pointer 
		 smp_store_release() for read pointer update to ensure
		  that buf is not overwritten until read is complete,
		  this pairs with READ_ONCE() in dvb_ringbuffer_free()
 smp_store_release() to update read pointer, see above 
		 smp_store_release() for read pointer update to ensure
		  that buf is not overwritten until read is complete,
		  this pairs with READ_ONCE() in dvb_ringbuffer_free()
 smp_store_release() to update read pointer, see above 
		 smp_store_release() for write pointer update to ensure that
		  written data is visible on other cpu cores before the pointer
		  update, this pairs with smp_load_acquire() in
		  dvb_ringbuffer_empty() or dvb_ringbuffer_avail()
 smp_store_release() for write pointer update, see above 
		 smp_store_release() for write pointer update to ensure that
		  written data is visible on other cpu cores before the pointer
		  update, this pairs with smp_load_acquire() in
		  dvb_ringbuffer_empty() or dvb_ringbuffer_avail()
 smp_store_release() for write pointer update, see above 
 clean up disposed packets
 first packet is not disposed, so we stop cleaning now
 no packets available
 SPDX-License-Identifier: GPL-2.0-only
  Driver for the VIA Chrome integrated camera controller.
  Copyright 2009,2010 Jonathan Corbet <corbet@lwn.net>
  This work was supported by the One Laptop Per Child project
  The structure describing our camera.
	
	  GPIO info for powerreset management
	
	  IO memory stuff.
 Where the registers live 
 Frame buffer memory 
 Reserved memory offset (FB) 
	
	  Capture buffers and related.	 The controller supports
	  up to three, so that's what we have here.  These buffers
	  live in frame buffer memory, so we don't call them "DMA".
 offsets into fb mem 
 Kernel-space addresses 
 How many are we using? 
	
	  Video format information.  sensor_format is kept in a form
	  that we can use to pass to the sensor.  We always run the
	  sensor in VGA resolution, though, and let the controller
	  downscale things if need be.	 So we keep the "real
	  dimensions separately.
 buffer for one video frame 
 common v4l buffer stuff -- must be first 
  Yes, this is a hack, but there's only going to be one of these
  on any system we know of.
  Flag values, manipulated with bitops
 A frame is incoming 
 Must configure hardware 
  Nasty ugly v4l2 boilerplate.
  Debugging and related.
  Format handling.  This is ripped almost directly from Hans's changes
  to cafe_ccic.c.  It's a little unfortunate; until this change, we
  didn't need to know anything about the format except its byte depth;
  now this information must be managed at this level too.
 Bytes per pixel 
	 RGB444 and Bayer should be doable, but have never been
	   tested with this driver. RGB565 seems to work at the default
	   resolution, but results in color corruption when being scaled by
 Not found? Then return the first format. 
--------------------------------------------------------------------------
  Sensor powerreset management.  This piece is OLPC-specific for
  sure; other configurations will have things connected differently.
  Power up the sensor and perform the reset dance.
 Probably excessive 
 --------------------------------------------------------------------------
 Sensor ops 
  Manage the ov7670 "flip" bit, which needs special help.
  Configure the sensor.  It's up to the caller to ensure
  that the camera is in the correct operating state.
	
	  OV7670 does weird things if flip is set before format...
 --------------------------------------------------------------------------
  Some simple register accessors; they assume that the lock is held.
  Should we want to support the second capture engine, we could
  hide the register difference by adding 0x1000 to registers in the
  0x300-350 range.
 --------------------------------------------------------------------------
 Interrupt management and handling 
	
	  All we do here is to clear the interrupts and tell
	  the handler thread to wake up.
  Find the next buffer which has somebody waiting on it.
  The threaded IRQ handler.
	
	  If there is no place to put the data frame, don't bother
	  with anything else.
	
	  Figure out which buffer we just completed.
	
	  Copy over the data and let any waiters know.
  These functions must mess around with the general interrupt
  control register, which is relevant to much more than just the
  camera.  Nothing else uses interrupts, though, as of this writing.
  Should that situation change, we'll have to improve support at
  the via-core level.
 --------------------------------------------------------------------------
 Controller operations 
  Set up our capture buffers in framebuffer memory.
	
	  See how many buffers we can work with.
	
	  Set them up.
  Set the scaling register for downscaling the image.
  This register works like this...  Vertical scaling is enabled
  by bit 26; if that bit is set, downscaling is controlled by the
  value in bits 16:25.	 Those bits are divided by 1024 to get
  the scaling factor; setting just bit 25 thus cuts the height
  in half.
  Horizontal scaling works about the same, but it's enabled by
  bit 11, with bits 0:10 giving the numerator of a fraction
  (over 2048) for the scaling value.
  This function is naive in that, if the user departs from
  the 3x4 VGA scaling factor, the image will distort.	We
  could work around that if it really seemed important.
  Configure image-related information into the capture engine.
	
	  Disable clock before messing with stuff - from the via
	  sample driver.
	
	  Set up the controller for VGA resolution, modulo magic
	  offsets from the via sample driver.
	
	  Image size info.
	
	  Set up the capture interface control register,
	  everything but the "go" bit.
	 
	  The FIFO threshold is a bit of a magic number; 8 is what
	  VIA's sample code uses.
 FIFO threshold 
 OLPC-specific? 
 OLPC-specific? 
 Capture both fields 
	
	  YUV formats need different byte swapping than RGB.
  Make it start grabbing data.
 Force post 
 Force post 
 --------------------------------------------------------------------------
 vb2 callback ops 
	
	  Configure things if need be.
	
	  If the CPU goes into C3, the DMA transfer gets corrupted and
	  users start filing unsightly bug reports.  Put in a "latency"
	  requirement which will keep the CPU out of the deeper sleep
	  states.
 --------------------------------------------------------------------------
 File operations 
	
	  Note the new user.  If this is the first one, we'll also
	  need to power up the sensor.
	
	  Last one out needs to turn out the lights.
----------------------------------------------------------------------------
  The long list of v4l2 ioctl ops
  Only one input.
  Video format stuff.	Here is our default format until
  user space messes with things.
  Figure out proper image dimensions, but always force the
  sensor to VGA.
  The real work of figuring out a workable format.
	
	  Camera must be idle or we can't mess with the
	  video setup.
	
	  Let the sensor code look over and tweak the
	  requested formatting.
	
	  OK, let's commit to the new format.
 GS_PARM 
----------------------------------------------------------------------------
  Power management.
 So resume restarts 
	
	  Get back to a reasonable operating state.
	
	  Make sure the sensor's power state is correct
	
	  If it was operating, try to restart it.
 CONFIG_PM 
  Setup stuff.
 Check this 
  The OLPC folks put the serial port on the same pin as
  the camera.	They also get grumpy if we break the
  serial port and keep them from using it.  So we have
  to check the serial enable bit and not step on it.
 Not enabled 
 The XO-1.5 (only known user) clocks the camera at 90MHz. 
	
	  Note that there are actually two capture channels on
	  the device.	We only deal with one for now.	That
	  is encoded here; nothing else assumes it's dealing with
	  a unique capture device.
	
	  Ensure that frame buffer memory has been set aside for
	  this purpose.  As an arbitrary limit, refuse to work
	  with less than two frames of VGA 16-bit data.
	 
	  If we ever support the second port, we'll need to set
	  aside more memory.
	
	  Basic structure initialization.
	
	  Tell V4L that we exist.
	
	  Convince the system that we can do DMA.
	
	  Fire up the capture port.  The write to 0x78 looks purely
	  OLPCish; any system will need to tweak 0x1e.
	
	  Get the sensor powered up.
	
	  See if we can't find it on the bus.	The VIA_PORT_31 assumption
	  is OLPC-specific.  0x42 assumption is ov7670-specific.
	
	  Get the IRQ.
	
	  Tell V4l2 that we exist.
	
	  Hook into PM events
 Power the sensor down until somebody opens the device 
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) 2021 Renesas Electronics Corp.
  Driver for Renesas R-Car ISP Channel Selector
  The ISP hardware is capable of more than just channel selection, features
  such as demosaicing, white balance control and color space conversion are
  also possible. These more advanced features are not supported by the driver
  due to lack of documentation.
 Protects mf and stream_count. 
 Select CSI-2 input source. 
 Configure Channel Selector. 
 Setup processing method. 
 Start ISP. 
 Stop ISP. 
 -----------------------------------------------------------------------------
  Async handling and registration of subdevices and links
 -----------------------------------------------------------------------------
  Platform Device Driver
 sentinel  },
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright 2008-2010 Freescale Semiconductor, Inc. All Rights Reserved.
   Freescale VIU video driver
   Authors: Hongjun Chen <hong-jun.chen@freescale.com>
 	     Porting to 2.6.35 by DENX Software Engineering,
 	     Anatolij Gustschin <agust@denx.de>
 0.5 seconds 
 Video memory limit, in Mb 
 I2C address of video decoder chip is 0x4A 
  Basic structures
 v4l2 format id 
 buffer for one video frame 
 common v4l buffer stuff -- must be first 
 various device info 
 Hardware register area 
 Interrupt vector 
 video overlay 
 crop 
 clock pointer 
 decoder 
 must remain the first field of this struct 
 video capture 
 spinlock for the videobuf queue 
 video overlay 
 video capture 
  Macro definitions of VIU registers
 STATUS_CONFIG register 
 Error code mask 
 No error 
 DMA in vertical active 
 DMA in vertical blanking 
 Line too long 
 Too many lines in field 
 Line too short 
 Not enough lines in field 
 FIFO overflow 
 FIFO underflow 
 One bit ECC error 
 Twomore bits ECC error 
 Enable field interrupt 
 Enable vsync interrupt 
 Enable hsync interrupt 
 Enable vstart interrupt 
 Enable DMA end interrupt 
 Enable error interrupt 
 Enable ECC interrupt 
 field interrupt status 
 vsync interrupt status 
 hsync interrupt status 
 vstart interrupt status 
 DMA end interrupt status 
 error interrupt status 
 Enable DMA transfer 
 Field number 
 Dithering is on 
 Round is on 
	MODE_32BIT		= 1UL << 31,	 Data in RGBa888,
						  0 in RGB565
 Enable DMA operation 
 Clear pending interrupts 
 timed out, issue soft reset 
 clear DMA_END and other pending irqs 
 cancel all outstanding capture requests 
  Videobuf operations
 setup the DMA base address 
 interlace is on by default, set horizontal DMA increment 
 setup picture_count register 
 reset dma increment if needed 
  IOCTL vidioc handling
 setup window 
 setup color depth and dma increment 
 setup the base address of the overlay buffer 
 start dma 
 check args 
 ok, accept it 
 only one input in this driver 
 launch another DMA operation for an activequeued buffer 
 setup buffer address for next dma operation 
 activate next dma buffer 
 Clear interrupt error bit and error flags 
 clear all pending irqs 
 Capture mode 
  File operations for the device
 allocate and initialize per filehandle data 
 V4L2 ioctl handler 
 request mem region 
 remap registers 
 Prepare our private structure 
 init video dma queues 
	 This control handler will inherit the control(s) from the
 Allocate memory for video device 
 initialize locks 
 enable VIU clock 
 reset VIU module 
 install interrupt handler 
  Initialization and module stuff
 SPDX-License-Identifier: GPL-2.0-or-later
  V4L2 deinterlacing support.
  Copyright (c) 2012 Vista Silicon S.L.
  Javier Martin <javier.martin@vista-silicon.com>
 Flags that indicate a format can be used for captureoutput 
 Types the format can be used for 
 Per-queue, driver-specific private data 
 Source and destination queue data 
 Abort requested by m2m 
  mem2mem callbacks
 Common parameters for al transfers 
	
	  4 possible field conversions are possible at the moment:
	   V4L2_FIELD_SEQ_TB --> V4L2_FIELD_INTERLACED_TB:
	 	two separate fields in the same input buffer are interlaced
	 	in the output buffer using weaving. Top field comes first.
	   V4L2_FIELD_SEQ_TB --> V4L2_FIELD_NONE:
	 	top field from the input buffer is copied to the output buffer
	 	using line doubling. Bottom field from the input buffer is discarded.
	  V4L2_FIELD_SEQ_BT --> V4L2_FIELD_INTERLACED_BT:
	 	two separate fields in the same input buffer are interlaced
	 	in the output buffer using weaving. Bottom field comes first.
	  V4L2_FIELD_SEQ_BT --> V4L2_FIELD_NONE:
	 	bottom field from the input buffer is copied to the output buffer
	 	using line doubling. Top field from the input buffer is discarded.
  video ioctls
 index-th format of type type found ? 
			 Correct type but haven't reached our index yet,
 Format found 
 Format not found 
 Check that src and dst queues have the same pix format 
 Check that input and output deinterlacing types are compatible 
  Queue operations
  File operations
 SPDX-License-Identifier: GPL-2.0+
  i.MX Pixel Pipeline (PXP) mem-to-mem scalerCSCrotator driver
  Copyright (c) 2018 Pengutronix, Philipp Zabel
  based on vim2m
  Copyright (c) 2009-2010 Samsung Electronics Co., Ltd.
  Pawel Osciak, <pawel@osciak.com>
  Marek Szyprowski, <m.szyprowski@samsung.com>
 8x8 pixel blocks 
 Flags that indicate a format can be used for captureoutput 
 Flags that indicate processing mode 
 Types the format can be used for 
 Both capture and output format 
 Capture-only format 
 Output-only format 
 Per-queue, driver-specific private data 
 Abort requested by m2m 
 Processing mode 
 Source and destination queue data 
 Missing V4L2 pixel formats for ARGB1555 and ARGB4444 
		
		  CSC1 YUVYCbCr to RGB conversion is implemented as follows:
		 
		  |R|   |C0 0  C1|   |Y  + Yoffset |
		  |G| = |C0 C3 C2|  |Cb + UVoffset|
		  |B|   |C0 C4 0 |   |Cr + UVoffset|
		 
		  Results are clamped to 0..255.
		 
		  BT.601 limited range:
		 
		  |R|   |1.1644  0.0000  1.5960|   |Y  - 16 |
		  |G| = |1.1644 -0.3917 -0.8129|  |Cb - 128|
		  |B|   |1.1644  2.0172  0.0000|   |Cr - 128|
  1.1641 (-0.03 %) 
  1.5938 (-0.23 %) 
  2.0156 (-0.16 %) 
 -0.8125 (+0.04 %) 
 -0.3906 (+0.11 %) 
		
		  BT.601 full range:
		 
		  |R|   |1.0000  0.0000  1.4020|   |Y  + 0  |
		  |G| = |1.0000 -0.3441 -0.7141|  |Cb - 128|
		  |B|   |1.0000  1.7720  0.0000|   |Cr - 128|
  1.0000 (+0.00 %) 
  1.3984 (-0.36 %) 
  1.7695 (-0.25 %) 
 -0.7109 (+0.32 %) 
 -0.3438 (+0.04 %) 
		
		  Rec.709 limited range:
		 
		  |R|   |1.1644  0.0000  1.7927|   |Y  - 16 |
		  |G| = |1.1644 -0.2132 -0.5329|  |Cb - 128|
		  |B|   |1.1644  2.1124  0.0000|   |Cr - 128|
  1.1641 (-0.03 %) 
  1.7891 (-0.37 %) 
  2.1094 (-0.30 %) 
 -0.5312 (+0.16 %) 
 -0.2109 (+0.23 %) 
		
		  Rec.709 full range:
		 
		  |R|   |1.0000  0.0000  1.5748|   |Y  + 0  |
		  |G| = |1.0000 -0.1873 -0.4681|  |Cb - 128|
		  |B|   |1.0000  1.8556  0.0000|   |Cr - 128|
  1.0000 (+0.00 %) 
  1.5742 (-0.06 %) 
  1.8555 (-0.01 %) 
 -0.4648 (+0.33 %) 
 -0.1836 (+0.37 %) 
		
		  BT.2020 limited range:
		 
		  |R|   |1.1644  0.0000  1.6787|   |Y  - 16 |
		  |G| = |1.1644 -0.1874 -0.6505|  |Cb - 128|
		  |B|   |1.1644  2.1418  0.0000|   |Cr - 128|
  1.1641 (-0.03 %) 
  1.6758 (-0.29 %) 
  2.1406 (-0.11 %) 
 -0.6484 (+0.20 %) 
 -0.1836 (+0.38 %) 
		
		  BT.2020 full range:
		 
		  |R|   |1.0000  0.0000  1.4746|   |Y  + 0  |
		  |G| = |1.0000 -0.1646 -0.5714|  |Cb - 128|
		  |B|   |1.0000  1.8814  0.0000|   |Cr - 128|
  1.0000 (+0.00 %) 
  1.4727 (-0.19 %) 
  1.8789 (-0.25 %) 
 -0.5703 (+0.11 %) 
 -0.1641 (+0.05 %) 
		
		  SMPTE 240m limited range:
		 
		  |R|   |1.1644  0.0000  1.7937|   |Y  - 16 |
		  |G| = |1.1644 -0.2565 -0.5427|  |Cb - 128|
		  |B|   |1.1644  2.0798  0.0000|   |Cr - 128|
  1.1641 (-0.03 %) 
  1.7930 (-0.07 %) 
  2.0781 (-0.17 %) 
 -0.5391 (+0.36 %) 
 -0.2539 (+0.26 %) 
		
		  SMPTE 240m full range:
		 
		  |R|   |1.0000  0.0000  1.5756|   |Y  + 0  |
		  |G| = |1.0000 -0.2253 -0.4767|  |Cb - 128|
		  |B|   |1.0000  1.8270  0.0000|   |Cr - 128|
  1.0000 (+0.00 %) 
  1.5742 (-0.14 %) 
  1.8242 (-0.28 %) 
 -0.4766 (+0.01 %) 
 -0.2227 (+0.26 %) 
		
		  CSC2 RGB to YUVYCbCr conversion is implemented as follows:
		 
		  |Y |   |A1 A2 A3|   |R|   |D1|
		  |Cb| = |B1 B2 B3|  |G| + |D2|
		  |Cr|   |C1 C2 C3|   |B|   |D3|
		 
		  Results are clamped to 0..255.
		 
		  BT.601 limited range:
		 
		  |Y |   | 0.2568  0.5041  0.0979|   |R|   |16 |
		  |Cb| = |-0.1482 -0.2910  0.4392|  |G| + |128|
		  |Cr|   | 0.4392  0.4392 -0.3678|   |B|   |128|
  0.5039 (-0.02 %) 
  0.2539 (-0.29 %) 
 -0.1445 (+0.37 %) 
  0.0977 (-0.02 %) 
  0.4375 (-0.17 %) 
 -0.2891 (+0.20 %) 
 -0.3672 (+0.06 %) 
  0.4375 (-0.17 %) 
 -0.0703 (+0.11 %) 
		
		  BT.601 full range:
		 
		  |Y |   | 0.2990  0.5870  0.1140|   |R|   |0  |
		  |Cb| = |-0.1687 -0.3313  0.5000|  |G| + |128|
		  |Cr|   | 0.5000  0.5000 -0.4187|   |B|   |128|
  0.5859 (-0.11 %) 
  0.2969 (-0.21 %) 
 -0.1680 (+0.07 %) 
  0.1133 (-0.07 %) 
  0.5000 (+0.00 %) 
 -0.3281 (+0.32 %) 
 -0.4180 (+0.07 %) 
  0.5000 (+0.00 %) 
 -0.0781 (+0.32 %) 
		
		  Rec.709 limited range:
		 
		  |Y |   | 0.1826  0.6142  0.0620|   |R|   |16 |
		  |Cb| = |-0.1007 -0.3385  0.4392|  |G| + |128|
		  |Cr|   | 0.4392  0.4392 -0.3990|   |B|   |128|
  0.6133 (-0.09 %) 
  0.1797 (-0.29 %) 
 -0.0977 (+0.30 %) 
  0.0586 (-0.34 %) 
  0.4375 (-0.17 %) 
 -0.3359 (+0.26 %) 
 -0.3984 (+0.05 %) 
  0.4375 (-0.17 %) 
 -0.0391 (+0.12 %) 
		
		  Rec.709 full range:
		 
		  |Y |   | 0.2126  0.7152  0.0722|   |R|   |0  |
		  |Cb| = |-0.1146 -0.3854  0.5000|  |G| + |128|
		  |Cr|   | 0.5000  0.5000 -0.4542|   |B|   |128|
  0.7148 (-0.04 %) 
  0.2109 (-0.17 %) 
 -0.1133 (+0.13 %) 
  0.0703 (-0.19 %) 
  0.5000 (+0.00 %) 
 -0.3828 (+0.26 %) 
 -0.4531 (+0.11 %) 
  0.5000 (+0.00 %) 
 -0.0430 (+0.28 %) 
		
		  BT.2020 limited range:
		 
		  |Y |   | 0.2256  0.5823  0.0509|   |R|   |16 |
		  |Cb| = |-0.1226 -0.3166  0.4392|  |G| + |128|
		  |Cr|   | 0.4392  0.4392 -0.4039|   |B|   |128|
  0.5820 (-0.03 %) 
  0.2227 (-0.30 %) 
 -0.1211 (+0.15 %) 
  0.0508 (-0.01 %) 
  0.4375 (-0.17 %) 
 -0.3164 (+0.02 %) 
 -0.4023 (+0.16 %) 
  0.4375 (-0.17 %) 
 -0.0352 (+0.02 %) 
		
		  BT.2020 full range:
		 
		  |Y |   | 0.2627  0.6780  0.0593|   |R|   |0  |
		  |Cb| = |-0.1396 -0.3604  0.5000|  |G| + |128|
		  |Cr|   | 0.5000  0.5000 -0.4598|   |B|   |128|
  0.6758 (-0.22 %) 
  0.2617 (-0.10 %) 
 -0.1367 (+0.29 %) 
  0.0586 (-0.07 %) 
  0.5000 (+0.00 %) 
 -0.3594 (+0.10 %) 
 -0.4570 (+0.28 %) 
  0.5000 (+0.00 %) 
 -0.0391 (+0.11 %) 
		
		  SMPTE 240m limited range:
		 
		  |Y |   | 0.1821  0.6020  0.0747|   |R|   |16 |
		  |Cb| = |-0.1019 -0.3373  0.4392|  |G| + |128|
		  |Cr|   | 0.4392  0.4392 -0.3909|   |B|   |128|
  0.6016 (-0.05 %) 
  0.1797 (-0.24 %) 
 -0.1016 (+0.03 %) 
  0.0742 (-0.05 %) 
  0.4375 (-0.17 %) 
 -0.3359 (+0.14 %) 
 -0.3906 (+0.03 %) 
  0.4375 (-0.17 %) 
 -0.0469 (+0.14 %) 
		
		  SMPTE 240m full range:
		 
		  |Y |   | 0.2120  0.7010  0.0870|   |R|   |0  |
		  |Cb| = |-0.1160 -0.3840  0.5000|  |G| + |128|
		  |Cr|   | 0.5000  0.5000 -0.4450|   |B|   |128|
  0.6992 (-0.18 %) 
  0.2109 (-0.11 %) 
 -0.1133 (+0.27 %) 
  0.0859 (-0.11 %) 
  0.5000 (+0.00 %) 
 -0.3828 (+0.12 %) 
 -0.4414 (+0.36 %) 
  0.5000 (+0.00 %) 
 -0.0547 (+0.03 %) 
 Rotation disabled, 8x8 block size 
 Always write alpha value as V4L2_CID_ALPHA_COMPONENT 
 PS covers whole output 
 no AS 
 In grayscale mode, ps_vbuf contents are reused as CbCr 
			
			  This avoids sampling past the right edge for
			  horizontally chroma subsampled formats.
 skip STAT 
 disable processed surface color keying 
 disable alpha surface color keying 
 setup CSC 
 bypass LUT 
 ungate, enable PSASOUT and PXP operation 
  mem2mem callbacks
 Will cancel the transaction in the next interrupt handler 
  interrupt handler
 we expect x = 0, y = height, irq0 = 1 
  video ioctls
 index-th format of type type found ? 
			
			  Correct type but haven't reached our index yet,
			  just increment per-type index
 Format found 
 Format not found 
		
		  There is no support for conversion between different YCbCr
		  encodings or between RGB limited and full range.
  Queue operations
  File operations
 SPDX-License-Identifier: GPL-2.0-or-later
  Support eMMa-PrP through mem2mem framework.
  eMMa-PrP is a piece of HW that allows fetching buffers
  from one memory location and do several operations on
  them such as scaling or format conversion giving, as a result
  a new processed buffer in another memory location.
  Based on mem2mem_testdev.c by Pawel Osciak.
  Copyright (c) 2011 Vista Silicon S.L.
  Javier Martin <javier.martin@vista-silicon.com>
 multiple of 2 
 multiple of 8 
 multiple of 4 
 multiple of 2 
 Flags that indicate a format can be used for captureoutput 
 In bytes, per queue 
 EMMA PrP 
 IRQ Enable and status register 
 Types the format can be used for 
 Per-queue, driver-specific private data 
 Abort requested by m2m 
  mem2mem callbacks
 Input frame parameters 
 Output frame parameters 
 IRQ configuration 
 Enable transfer 
 Check irq flags and clear irq 
 buffer ready 
  video ioctls
 index-th format of type type found ? 
			 Correct type but haven't reached our index yet,
 Format found 
 Format not found 
 YUYV 
	 V4L2 specification suggests the driver corrects the format struct
 YUYV 
  Queue operations
  File operations
 SPDX-License-Identifier: GPL-2.0
  V4L2 Driver for Renesas Capture Engine Unit (CEU) interface
  Copyright (C) 2017-2018 Jacopo Mondi <jacopo+renesas@jmondi.org>
  Based on soc-camera driver "soc_camerash_mobile_ceu_camera.c"
  Copyright (C) 2008 Magnus Damm
  Based on V4L2 Driver for PXA camera host - "pxa_camera.c",
  Copyright (C) 2006, Sascha Hauer, Pengutronix
  Copyright (C) 2008, Guennadi Liakhovetski <kernel@pengutronix.de>
 CEU registers offsets and masks. 
 Capture start register			
 Capture control register		
 Capture interface control register	
 Capture interface offset register	
 Capture interface width register	
 Capture interface input format register 
 CEU register control register		
 CEU register forcible control register	
 Capture filter control register		
 Capture filter size clip register	
 Capture destination width register	
 Capture data address Y register		
 Capture data address C register		
 Firewall operation control register	
 Capture data output control register	
 Capture event interrupt enable register	
 Capture event flag clear register	
 Capture status register			
 Capture software reset register		
 Data synchronous fetch mode. 
 Input components ordering: CEU_CAMCR.DTARY field. 
 TODO: input components ordering for 16 bits input. 
 Bus transfer MTU. 
 Bus width configuration. 
 No downsampling to planar YUV420 in image fetch mode. 
 Swap all input data in 8-bit, 16-bits and 32-bits units (Figure 46.45). 
 Capture reset and enable bits. 
 CEU operating flag bit. 
 Platform specific IRQ source flags. 
 Prohibited register access interrupt bit. 
 One-frame capture end interrupt. 
 VBP error. 
  ceu_bus_fmt - describe a 8-bits yuyv format the sensor can produce
  @mbus_code: bus format code
  @fmt_order: CEU_CAMCR.DTARY ordering of input components (Y, Cb, Cr)
  @fmt_order_swap: swapped CEU_CAMCR.DTARY ordering of input components
 		    (Y, Cr, Cb)
  @swapped: does Cr appear before Cb?
  @bps: number of bits sent over bus for each sample
  @bpp: number of bits per pixels unit
  ceu_buffer - Link vb2 buffer to the list of available buffers.
  ceu_subdev - Wraps v4l2 sub-device and provides async subdevice.
 per-subdevice mbus configuration options 
  ceu_device - CEU device instance
 subdevices descriptors 
 the subdevice currently in use 
 platform specific mask with all IRQ sources flagged 
 currently configured field and pixel format 
 async subdev notification helpers 
 vb2 queue, capture buffer list and active buffer pointer 
 mlock - lock access to interface reset and vb2 queue 
 lock - lock access to capture buffer queue and active buffer 
 base - CEU memory base address 
 --- CEU memory output formats --- 
  ceu_fmt - describe a memory output format supported by CEU interface.
  @fourcc: memory layout fourcc format code
  @bpp: number of bits for each pixel stored in memory
  ceu_format_list - List of supported memory output formats
  If sensor provides any YUYV bus format, all the following planar memory
  formats are available thanks to CEU re-ordering and sub-sampling
  capabilities.
 --- CEU HW operations --- 
  ceu_soft_reset() - Software reset the CEU interface.
  @ceu_device: CEU device.
  Returns 0 for success, -EIO for error.
 If we get here, CEU has not reset properly. 
 --- CEU Capture Operations --- 
  ceu_hw_config() - Configure CEU interface registers.
 Start configuring CEU registers 
 Set the frame capture period for both image capture and data sync. 
	
	  Swap input data endianness by default.
	  In data fetch mode bytes are received in chunks of 8 bytes.
	  D0, D1, D2, D3, D4, D5, D6, D7 (D0 received first)
	  The data is however by default written to memory in reverse order:
	  D7, D6, D5, D4, D3, D2, D1, D0 (D7 written to lowest byte)
	 
	  Use CEU_CDOCR[2:0] to swap data ordering.
	
	  Configure CAMCR and CDOCR:
	  match input components ordering with memory output format and
	  handle downsampling to YUV420.
	 
	  If the memory output planar format is 'swapped' (Cr before Cb) and
	  input format is not, use the swapped version of CAMCR.DTARY.
	 
	  If the memory output planar format is not 'swapped' (Cb before Cr)
	  and input format is, use the swapped version of CAMCR.DTARY.
	 
	  CEU by default downsample to planar YUV420 (CDCOR[4] = 0).
	  If output is planar YUV422 set CDOCR[4] = 1
	 
	  No downsample for data fetch sync mode.
 Data fetch sync mode 
 Non-swapped planar image capture mode. 
 Swapped planar image capture mode. 
 TODO: handle 16 bit bus width with DTIF bit in CAMCR 
	
	  TODO: make CAMOR offsets configurable.
	  CAMOR wants to know the number of blanks between a VSHS signal
	  and valid data. This value should actually come from the sensor...
 TODO: 16 bit bus width require re-calculation of cdwdr and cfzsr 
  ceu_capture() - Trigger start of a capture sequence.
  Program the CEU DMA registers with addresses where to transfer image data.
 Ignore CbCr plane for non multi-planar image formats. 
	
	  Trigger new capture start: once for each frame, as we work in
	  one-frame capture mode.
 Clean interrupt status. 
 Unexpected interrupt. 
 Stale interrupt from a released buffer, ignore it. 
	
	  When a VBP interrupt occurs, no capture end interrupt will occur
	  and the image of that frame is not captured correctly.
 Prepare to return the 'previous' buffer. 
 Prepare a new 'active' buffer and trigger a new capture. 
 Return the 'previous' buffer. 
 Return the 'previous' buffer and all queued ones. 
 --- CEU Videobuf2 operations --- 
  ceu_calc_plane_sizes() - Fill per-plane 'struct v4l2_plane_pix_format'
 			    information according to the currently configured
 			    pixel format.
  @ceu_device: CEU device.
  @ceu_fmt: Active image format.
  @pix: Pixel format information (store line width and image sizes)
  ceu_vb2_setup() - is called to check whether the driver can accept the
 		     requested number of buffers and to fill in plane sizes
 		     for the current frame format, if required.
 num_planes is set: just check plane sizes. 
 num_planes not set: called from REQBUFS, just set plane sizes. 
 Program the CEU interface according to the CEU image format. 
 Grab the first available buffer and trigger the first capture. 
 Clean and program interrupts for first capture. 
 Clean and disable interrupt sources. 
 Release all queued buffers. 
 --- CEU image formats handling --- 
  __ceu_try_fmt() - test format on CEU and sensor
  @ceudev: The CEU device.
  @v4l2_fmt: format to test.
  @sd_mbus_code: the media bus code accepted by the subdevice; output param.
  Returns 0 for success, < 0 for errors.
	
	  Set format on sensor sub device: bus format used to produce memory
	  format is selected depending on YUV component ordering or
	  at initialization time.
 CFSZR requires height and width to be 4-pixel aligned. 
	
	  Try with the mbus_code matching YUYV components ordering first,
	  if that one fails, fallback to default selected at initialization
	  time.
 fallback 
 Apply size returned by sensor as the CEU can't scale. 
 Calculate per-plane sizes based on image format. 
 Report to caller the configured mbus format. 
  ceu_try_fmt() - Wrapper for __ceu_try_fmt; discard configured mbus_fmt
  ceu_set_fmt() - Apply the supplied format to both sensor and CEU
	
	  Set format on sensor sub device: bus format used to produce memory
	  format is selected at initialization time.
  ceu_set_default_fmt() - Apply default NV16 memory output format with VGA
 			   sizes.
  ceu_init_mbus_fmt() - Query sensor for supported formats and initialize
 			 CEU media bus format used to produce memory formats.
  Find out if sensor can produce a permutation of 8-bits YUYV bus format.
  From a single 8-bits YUYV bus format the CEU can produce several memory
  output formats:
  - NV[12|21|16|61] through image fetch mode;
  - YUYV422 if sensor provides YUYV422
  TODO: Other YUYV422 permutations through data fetch sync mode and DTARY
  TODO: Binary data (eg. JPEG) and raw formats through data fetch sync mode
 Find out if sensor can produce any permutation of 8-bits YUYV422. 
			
			  Only support 8-bits YUYV bus formats at the moment;
			 
			  TODO: add support for binary formats (data sync
			  fetch mode).
	
	  Save the first encountered YUYV format as "mbus_fmt" and use it
	  to output all planar YUV422 and YUV420 (NV) formats to memory as
	  well as for data synch fetch mode (YUYV - YVYU etc. ).
 Annotate the selected bus format components ordering. 
 --- Runtime PM Handlers --- 
  ceu_runtime_resume() - soft-reset the interface and turn sensor power on.
  ceu_runtime_suspend() - disable capture and interrupts and soft-reset.
 			   Turn sensor power off.
 --- File Operations --- 
 Causes soft-reset and sensor power on on first open 
 Causes soft-reset and sensor power down on last close 
 --- Video Device IOCTLs --- 
	
	  Make sure we can generate output image formats and apply
	  default one.
 Now that we're sure we can use the sensor, power off the old one. 
 Just check if user supplied pixel format is supported. 
 Just check if user supplied pixel format is supported. 
  ceu_vdev_release() - release CEU video device memory when last reference
 			to this driver is closed
 Initialize vb2 queue. 
	
	  Make sure at least one sensor is primary and use it to initialize
	  ceu formats.
 Register the video device. 
  ceu_init_async_subdevs() - Initialize CEU subdevices and async_subdevs in
                            ceu device. Both DT and platform data parsing use
                            this routine.
  Returns 0 for success, -ENOMEM for failure.
 Reserve memory for 'n_sd' ceu_subdev descriptors. 
  ceu_parse_platform_data() - Initialize async_subdevices using platform
 			       device provided data.
 Setup the ceu subdevice and the async subdevice. 
  ceu_parse_dt() - Initialize async_subdevs parsing device tree graph.
 Setup the ceu subdevice and the async subdevice. 
  struct ceu_data - Platform specific CEU data
  @irq_mask: CETCR mask with all interrupt sources enabled. The mask differs
 	      between SH4 and RZ platforms.
 Assume SH4 if booting with platform data. 
 SPDX-License-Identifier: GPL-2.0+
  rcar-fcp.c  --  R-Car Frame Compression Processor Driver
  Copyright (C) 2016 Renesas Electronics Corporation
  Contact: Laurent Pinchart (laurent.pinchart@ideasonboard.com)
 -----------------------------------------------------------------------------
  Public API
  rcar_fcp_get - Find and acquire a reference to an FCP instance
  @np: Device node of the FCP instance
  Search the list of registered FCP instances for the instance corresponding to
  the given device node.
  Return a pointer to the FCP instance, or an ERR_PTR if the instance can't be
  found.
  rcar_fcp_put - Release a reference to an FCP instance
  @fcp: The FCP instance
  Release the FCP instance acquired by a call to rcar_fcp_get().
  rcar_fcp_enable - Enable an FCP
  @fcp: The FCP instance
  Before any memory access through an FCP is performed by a module, the FCP
  must be enabled by a call to this function. The enable calls are reference
  counted, each successful call must be followed by one rcar_fcp_disable()
  call when no more memory transfer can occur through the FCP.
  Return 0 on success or a negative error code if an error occurs. The enable
  reference count isn't increased when this function returns an error.
  rcar_fcp_disable - Disable an FCP
  @fcp: The FCP instance
  This function is the counterpart of rcar_fcp_enable(). As enable calls are
  reference counted a disable call may not disable the FCP synchronously.
 -----------------------------------------------------------------------------
  Platform Driver
 SPDX-License-Identifier: GPL-2.0+
  R-Car Gen3 Digital Radio Interface (DRIF) driver
  Copyright (C) 2017 Renesas Electronics Corporation
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
  The R-Car DRIF is a receive only MSIOF like controller with an
  external master device driving the SCK. It receives data into a FIFO,
  then this driver uses the SYS-DMAC engine to move the data from
  the device to memory.
  Each DRIF channel DRIFx (as per datasheet) contains two internal
  channels DRIFx0 & DRIFx1 within itself with each having its own resources
  like module clk, register set, irq and dma. These internal channels share
  common CLK & SYNC from master. The two data pins D0 & D1 shall be
  considered to represent the two internal channels. This internal split
  is not visible to the master device.
  Depending on the master device, a DRIF channel can use
   (1) both internal channels (D0 & D1) to receive data in parallel (or)
   (2) one internal channel (D0 or D1) to receive data
  The primary design goal of this controller is to act as a Digital Radio
  Interface that receives digital samples from a tuner device. Hence the
  driver exposes the device as a V4L2 SDR device. In order to qualify as
  a V4L2 SDR device, it should possess a tuner interface as mandated by the
  framework. This driver expects a tuner driver (sub-device) to bind
  asynchronously with this device and the combined drivers shall expose
  a V4L2 compliant SDR device. The DRIF driver is independent of the
  tuner vendor.
  The DRIF hw can support I2S mode and Frame start synchronization pulse mode.
  This driver is tested for I2S mode only because of the availability of
  suitable master devices. Hence, not all configurable options of DRIF hw
  like lsbmsb first, syncdl, dtdl etc. are exposed via DT and I2S defaults
  are used. These can be exposed later if needed after testing.
 DRIF register offsets 
 Receive FIFO overflow 
 Receive FIFO underflow 
 Receive frame sync error 
 Frame reception end 
 Receive data xfer req 
 Receive FIFO full 
 SIRMDR1 
 Hidden Transmit register that controls CLK & SYNC 
 Constants 
 Internal buffer status flags 
 DMA completed 
 Overflow detected 
 Debug 
 Stream formats 
 Format descriptions for capture 
 Buffer for a received frame from one or both internal channels 
 Common v4l buffer stuff -- must be first 
 OF graph endpoint's V4L2 async data 
 Async matched subdev 
 DMA buffer 
 CPU-side address 
 Buffer status flags 
 Internal channel 
 Group device 
 Channel's pdev 
 Base register address 
 IO resource offset 
 Reserved DMA channel 
 Module clock 
 HW bufs 
 Handle for all bufs 
 Channel number 
 Channel acting as SDR device 
 DRIF V4L2 SDR 
 Platform device 
 V4L2 SDR device 
 V4L2 device 
 Videobuf2 queue and queued buffers list 
 Protects queued_bufs 
 To serialize DMA cb of channels 
 To serialize ioctls 
 To serialize streaming ioctls 
 SDR control handler 
 For subdev (tuner) 
 Endpoint V4L2 async data 
 Current V4L2 SDR format ptr 
 Device tree SYNC properties 
 Internals 
 DRIFx0,1 
 Enabled channels per DT 
 Used channels for an SDR FMT 
 Num of DT enabled channels 
 Num of used channels 
 Each DMA buffer size 
 Buffers produced by sdr dev 
 Register access functions 
 Release DMA channels 
 Allocate DMA channels 
 Configure slave 
 Release queued vb2 buffers 
 Set MDR defaults 
 Set defaults for enabled internal channels 
 Refer MSIOF section in manual for this register setting 
 Setup MDR1 value 
 Set DRIF receive format 
 Sanity check 
 Setup group, bitlen & wdcnt 
 Two groups 
 Release DMA buffers 
 First entry contains the dma buf ptr 
 Request DMA buffers 
 Allocate DMA buffers 
 Split the chunk and populate bufctxt 
 Setup vb_queue minimum buffer requirements 
 Need at least 16 buffers 
 Enqueue buffer 
 Get a frame buf from list 
		
		  App is late in enqueing buffers. Samples lost & there will
		  be a gap in sequence number when app recovers
 Helpers to setclear buf pair status 
 Channel DMA complete 
 Check for DRIF errors 
 Writing the same clears it 
 Overflow: some samples are lost 
 DMA callback for each stage 
 DMA can be terminated while the callback was waiting on lock 
 Check if both DMA buffers are done 
 Clear buf done status 
 Clear the flag in status 
 Clear the flag in status 
 Buffer produced for consumption 
 Get fbuf 
 Set error state on overflow 
 Setup cyclic DMA with given buffers 
 Submit descriptor 
 Enable reception 
	
	  When both internal channels are enabled, they can be synchronized
	  only by the master
 Enable receive 
 Check receive enabled 
 Disable reception 
 Disable receive 
 Check receive disabled 
 Stop channel 
 Disable DMA receive interrupt 
 Terminate all DMA transfers 
 Stop receive operation 
 Disable Rx 
 Start channel 
 Reset receive 
 Queue buffers for DMA 
 Clear status register flags 
 Enable DMA receive interrupt 
 Start receive operation 
 Start streaming 
 Set default MDRx settings 
 Set new format 
 Alloc DMA channel 
 Request buffers 
 Start Rx 
 Stop streaming 
 Stop hardware streaming 
 Return all queued buffers to vb2 
 Release buf 
 Release DMA channel resources 
 Vb2 ops 
 Matching fmt based on required channels is set as default 
 Set the 1st format as default on no match 
	
	  If a format demands one channel only out of two
	  enabled channels, pick the 0th channel.
 Tuner subdev ioctls 
 Init video_device structure 
 Register V4L2 SDR device 
 Sub-device bound callback 
 Sub-device unbind callback 
 Free ctrl handler if initialized 
 Sub-device registered notification callback 
	
	  The subdev tested at this point uses 4 controls. Using 10 as a worst
	  case scenario hint. When less controls are needed there will be some
	  unused memory and when more controls are needed the framework uses
	  hash to manage controls within this number.
 Read endpoint properties 
 Set the I2S defaults for SIRMDR1
 Parse sync polarity from endpoint 
 default 
 Parse sub-devs (tuner) to find a matching device 
 Get the endpoint properties 
 Check if the given device is the primary bond 
 Check if both devices of the bond are enabled 
 Check if the bonded device is probed 
 Update sdr data in the bonded device 
 Update sdr with bonded device data 
 Defer 
 V4L2 SDR device probe 
 Validate any supported format for enabled channels 
 Set defaults 
 Init videobuf2 queue structure 
 Init videobuf2 queue 
 Register the v4l2_device 
	
	  Parse subdevs after v4l2_device_register because if the subdev
	  is already probed, bound and complete will be called immediately
 Register notifier 
 V4L2 SDR device remove 
 DRIF channel probe 
 Reserve memory for enabled channel 
 Module clock 
 Register map 
 Check if both channels of the bond are enabled 
 Check if current channel acting as primary-bond 
 Primary bond is channel 0 always 
 Reserve memory for SDR structure 
 Establish links between SDR and channel(s) 
 Check if bonded device is ready 
 DRIF channel remove 
 Channel 0 will be the SDR instance 
 SDR instance 
 FIXME: Implement suspendresume support 
 SPDX-License-Identifier: GPL-2.0-or-later
  video stream multiplexer controlled via mux control
  Copyright (C) 2013 Pengutronix, Sascha Hauer <kernel@pengutronix.de>
  Copyright (C) 2016-2017 Pengutronix, Philipp Zabel <kernel@pengutronix.de>
	
	  The mux state is determined by the enabled sink pad link.
	  Enabling or disabling the source pad link has no effect.
 Propagate the active format to the source 
 No size limitations except V4L2 compliance requirements 
 All formats except LVDS and vendor specific formats are acceptable 
 Source pad mirrors active sink pad, no limitations on sink pads 
 Propagate the format from an active sink to source 
 Skip dangling endpoints for backwards compatibility 
 OK if asd already exists 
	
	  The largest numbered port is the output port. It determines
	  total number of pads.
 sentinel  }
 SPDX-License-Identifier: GPL-2.0-or-later
  V4L2 Driver for PXA camera host
  Copyright (C) 2006, Sascha Hauer, Pengutronix
  Copyright (C) 2008, Guennadi Liakhovetski <kernel@pengutronix.de>
  Copyright (C) 2016, Robert Jarzmik <robert.jarzmik@free.fr>
 Camera Interface 
 DMA request enable 
 Parity enable 
 Capture enable for slave mode 
 Camera interface enable 
 Camera interface disable 
 Sensor interface mode mask 
 Time-out mask 
 Receive-data-available mask 
 FIFO-empty mask 
 End-of-line mask 
 Parity-error mask 
 Quick-disable mask 
 Disable-done mask 
 Start-of-frame mask 
 End-of-frame mask 
 FIFO-overrun mask 
 Transparency bit 
 RGBT conversion mask 
 Pixels per line mask 
 RGB conversion mask 
 RGB format 
 YCbCr format 
 RGB bis per pixel mask 
 Raw bis per pixel mask 
 Color space mask 
 Data width mask 
#define CICR2_BLW	(0xff << 24)	 Beginning-of-line pixel clock
#define CICR2_ELW	(0xff << 16)	 End-of-line pixel clock
 Horizontal sync pulse width mask 
#define CICR2_BFPW	(0x3f << 3)	 Beginning-of-frame pixel clock
#define CICR2_FSW	(0x7 << 0)	 Frame stabilization
#define CICR3_BFW	(0xff << 24)	 Beginning-of-frame line clock
#define CICR3_EFW	(0xff << 16)	 End-of-frame line clock
 Vertical sync pulse width mask 
#define CICR3_BFPW	(0x3f << 3)	 Beginning-of-frame pixel clock
 Lines per frame mask 
 MCLK Data Capture Delay mask 
 Pixel clock enable 
 Pixel clock polarity 
 Horizontal sync polarity 
 Vertical sync polarity 
 MCLK enable 
 Frame rate mask 
 Clock divisor mask 
 FIFO time-out 
 Channel 2 receive data available 
 Channel 1 receive data available 
 Channel 0 receive data available 
 Channel 2 FIFO empty 
 Channel 1 FIFO empty 
 Channel 0 FIFO empty 
 End of line 
 Parity error 
 Camera interface quick disable 
 Camera interface disable done 
 Start of frame 
 End of frame 
 FIFO overrun for Channel 2 
 FIFO overrun for Channel 1 
 FIFO overrun for Channel 0 
 FIFO 2 level mask 
 FIFO 1 level mask 
 FIFO 0 level mask 
 Threshold Level for Channel 0 FIFO 
 Reset input FIFOs 
 FIFO enable for channel 2 
 FIFO enable for channel 1 
 FIFO enable for channel 0 
 Data bus width 
 Pixels per line 
 color space 
 bpp for rgb 
 rgbt conv 
 Beginning-of-line pixel clock wait count 
 End-of-line pixel clock wait count 
 Horizontal sync pulse width 
 Beginning-of-frame pixel clock wait count 
 Frame stabilization wait count 
 Beginning-of-frame line clock wait count  
 End-of-frame line clock wait count 
 Vertical sync pulse width 
 Lines per frame 
  Format handling
  enum pxa_mbus_packing - data packing types on the media-bus
  @PXA_MBUS_PACKING_NONE:	no packing, bit-for-bit transfer to RAM, one
 				sample represents one pixel
  @PXA_MBUS_PACKING_2X8_PADHI:	16 bits transferred in 2 8-bit samples, in the
 				possibly incomplete byte high bits are padding
  @PXA_MBUS_PACKING_EXTEND16:	sample width (e.g., 10 bits) has to be extended
 				to 16 bits
  enum pxa_mbus_order - sample order on the media bus
  @PXA_MBUS_ORDER_LE:		least significant sample first
  @PXA_MBUS_ORDER_BE:		most significant sample first
  enum pxa_mbus_layout - planes layout in memory
  @PXA_MBUS_LAYOUT_PACKED:		color components packed
  @PXA_MBUS_LAYOUT_PLANAR_2Y_U_V:	YUV components stored in 3 planes (4:2:2)
  @PXA_MBUS_LAYOUT_PLANAR_2Y_C:	YUV components stored in a luma and a
 					chroma plane (C plane is half the size
 					of Y plane)
  @PXA_MBUS_LAYOUT_PLANAR_Y_C:		YUV components stored in a luma and a
 					chroma plane (C plane is the same size
 					as Y plane)
  struct pxa_mbus_pixelfmt - Data format on the media bus
  @name:		Name of the format
  @fourcc:		Fourcc code, that will be obtained if the data is
 			stored in memory in the following way:
  @packing:		Type of sample-packing, that has to be used
  @order:		Sample order when storing in memory
  @layout:		Planes layout in memory
  @bits_per_sample:	How many bits the bridge has to sample
  struct pxa_mbus_lookup - Lookup FOURCC IDs by mediabus codes for pass-through
  @code:	mediabus pixel-code
  @fmt:	pixel format description
  struct pxa_camera_format_xlate - match between host and sensor formats
  @code: code of a sensor provided format
  @host_fmt: host format after host translation from code
  Host and sensor translation structure. Used in table of host and sensor
  formats matchings in pxa_camera_device. A host can override the generic list
  generation by implementing get_formats(), and use it for format checks and
  format setup.
  Structures
 buffer for one video frame 
 common v4l buffer stuff -- must be first 
 our descriptor lists for Y, U and V channels 
	
	  PXA27x is only supposed to handle one camera on its Quick Capture
	  interface. If anyone ever builds hardware to enable more than
	  one camera, they will have to modify this driver too
 max 10 bits 
  Format translation functions
	
	  First pass - only count formats this host-sensor
	  configuration can provide
 Second pass - actually fill data formats 
   Videobuf operations
  pxa_init_dma_channel - init dma descriptors
  @pcdev: pxa camera device
  @buf: pxa camera buffer
  @channel: dma channel (0 => 'Y', 1 => 'U', 2 => 'V')
  @sg: dma scatter list
  @sglen: dma scatter list length
  Prepares the pxa dma descriptors to transfer one camera channel.
  Returns 0 if success or -ENOMEM if no memory is available
  pxa_dma_start_channels - start DMA channel for active buffer
  @pcdev: pxa camera device
  Initialize DMA channels to the beginning of the active video buffer, and
  start these channels.
  pxa_camera_start_capture - start video capturing
  @pcdev: camera device
  Launch capturing. DMA channels should not be active yet. They should get
  activated at the end of frame interrupt, to capture only whole frames, and
  never begin the capture of a partial frame.
 Enable End-Of-Frame Interrupt 
 _init is used to debug races, see comment in pxa_camera_reqbufs() 
  pxa_camera_check_link_miss - check missed DMA linking
  @pcdev: camera device
  @last_submitted: an opaque DMA cookie for last submitted
  @last_issued: an opaque DMA cookie for last issued
  The DMA chaining is done with DMA running. This means a tiny temporal window
  remains, where a buffer is queued on the chain, while the chain is already
  stopped. This means the tailed buffer would never be transferred by DMA.
  This function restarts the capture for this corner case, where :
   - DADR() == DADDR_STOP
   - a videobuffer is queued on the pcdev->capture list
  Please check the "DMA hot chaining timeslice issue" in
    Documentationdriver-apimediadriverspxa_camera.rst
  Context: should only be called within the dma irq handler
	
	  pcdev->active should not be NULL in DMA irq handler.
	 
	  But there is one corner case : if capture was stopped due to an
	  overrun of channel 1, and at that same channel 2 was completed.
	 
	  When handling the overrun in DMA irq for channel 1, we'll stop the
	  capture and restart it (and thus set pcdev->active to NULL). But the
	  DMA irq handler will already be pending for channel 2. So on entering
	  the DMA irq handler for channel 2 there will be no active buffer, yet
	  that is normal.
	
	  It's normal if the last frame creates an overrun, as there
	  are no more DMA descriptors to fetch from QCI fifos
 mclk <= ciclk  4 (27.4.2) 
 We verify mclk != 0, so if anyone breaks it, here comes their Oops 
 If we're not supplying MCLK, leave it at 0 
 We want a timeout > 1 pixel time, not ">=" 
 disable all interrupts 
 Initialise the timeout under the assumption pclk = mclk 
 "Safe default" - 13MHz 
 Reset the FIFOs 
	
	  Datawidth is now guaranteed to be equal to one of the three values.
	  We fix bit-per-pixel equal to data-width...
		
		  Actually it can only be 8 now,
		  default is just to silence compiler warnings
		
		  Normally, pxa bus wants as input UYVY format. We allow all
		  reorderings of the YUV422 format, as no processing is done,
		  and the YUV stream is just passed through without any
		  transformation. Note that UYVY is the only format that
		  should be used if pxa framebuffer Overlay2 is used.
 CIF interrupts are not used, only DMA 
  Videobuf2 section
  Please check the DMA prepared buffer structure in :
    Documentationdriver-apimediadriverspxa_camera.rst
  Please check also in pxa_camera_check_link_miss() to understand why DMA chain
  modification while DMA chain is running will work anyway.
	
	  This can be useful if you want to see if we actually fill
	  the buffer with something
	
	  I think, in buf_prepare you only have to protect global data,
	  the actual buffer is yours
	
	  Called from VIDIOC_REQBUFS or in compatibility mode For YUV422P
	  format, even if there are 3 planes Y, U and V, we reply there is only
	  one plane, containing Y, U and V data, one after the other.
  Video ioctls section
 Make choices, based on platform preferences 
	
	  If the requested media bus configuration has not been fully applied
	  make sure it is supported by the platform.
	 
	  PXA does not support V4L2_MBUS_DATA_ACTIVE_LOW and the bus mastering
	  roles should match.
 This will be corrected as we get more formats 
 No more formats 
 Generic pass-through 
 limit to pxa hardware capabilities 
	
	  Limit to pxa hardware capabilities.  YUV422P planar format requires
	  images size to be a multiple of 16 bytes.  If not, zeros will be
	  inserted between Y and U planes, and U and V planes, which violates
	  the YUV422P standard.
 Only progressive video supported so far 
 TODO: support interlaced at least in pass-through mode 
 disable capture, disable interrupts 
 Stop DMA engine 
  Driver probe, remove, suspend and resume operations
 Restart frame capture if active buffer exists 
		
		  Platform hasn't set available data widths. This is bad.
		  Warn and use a default.
	
	  Request the regions.
 request dma 
 request irq 
 SPDX-License-Identifier: GPL-2.0-or-later
 Copyright 2020 IBM Corp.
 Copyright (c) 2019-2020 Intel Corporation
 1024  768 
 1920  1200, 32bpp 
 512  12  4 
 v4l2 and videobuf2 lock 
 buffer list lock 
 640 x 480 x 24Hz 
 1920 x 1200 x 60Hz 
 AST HW requires this header spacing 
 just update jpeg dct table per 420444
 AST HW requires this header spacing 
 Enable mode detect interrupts 
 Trigger mode detect 
 Disable interrupts 
 Turn off the relevant clocks 
 Turn on the relevant clocks 
	
	  Hardware sometimes asserts interrupts that we haven't actually
	  enabled; ignore them if so.
	
	  Resolution changed or signal was lost; reset the engine and
	  re-initialize
			
			  Signal acquired while NOT doing resolution
			  detection; reset the engine and re-initialize
  Get the minimum HW-supported compression buffer size for the frame size.
  Assume worst-case JPEG compression size is 18 raw size. This should be
  plenty even for maximum quality; any worse and the engine will simply return
  incomplete JPEGs.
 4bpp  8 
 Disable mode detect in order to re-trigger 
	
	  Enable mode-detect watchdog, resolution-change watchdog and
	  automatic compression after frame capture.
 Set capturecompression frame sizes 
		
		  This is a workaround to fix a silicon bug on A1 and A2
		  revisions. Since it doesn't break capturing operation of
		  other revisions, use it for all revisions without checking
		  the revision ID. It picked 1728 which is a very next
		  64-pixels aligned value to 1680 to minimize memory bandwidth
		  and to get better access speed from video engine.
 Don't use direct mode below 1024 x 768 (irqs don't fire) 
 Unlock VE registers 
 Disable interrupts 
 Clear the offset 
 Set control registers 
 Don't downscale 
 Set mode detection defaults 
 Resolution set to 640x480 if no signal found 
 Set timings since the device is being opened for the first time 
	
	  This blocks only if the driver is currently in the process of
	  detecting a new resolution; in the event of no signal or timeout
	  this function is woken up.
 Exit early in case no clients remain 
 No resolution change so just restart streaming 
		
		  Need to force stop any DMA and try and get HW into a good
		  state for future calls to start streaming again.
 CONFIG_DEBUG_FS 
 SPDX-License-Identifier: GPL-2.0+
  Renesas R-Car Fine Display Processor
  Video format converter and frame deinterlacer device.
  Author: Kieran Bingham, <kieran@bingham.xyz>
  Copyright (c) 2016 Renesas Electronics Corporation.
  This code is developed and inspired from the vim2m, rcar_jpu,
  m2m-deinterlace, and vsp1 drivers.
 Minimum and maximum frame widthheight 
 Flags that indicate a format can be used for captureoutput 
 Number of Job's to have available on the processing queue 
  FDP1 registers and bits
 FDP1 start register - Imm 
 Sync generator register - Imm 
 Register set end register - Imm 
 Channel activation register - Vupdt 
 Operation Mode Register - Vupdt 
 Software reset register 
 Control status register (V-update-status) 
 Interrupt enable register 
 Interrupt status register 
 Interrupt control register 
 Common IRQ Bit settings 
 RPF 
 RPF0 Source Component Y Address register 
 RPF1 Current Picture Registers 
 RPF2 next picture register 
 WPF 
 WPF Destination picture 
 WPFRPF Common 
 IPC 
 DLI registers 
 Sensor registers 
 Line memory pixel number register 
 Internal Data (HW Version) 
 LUTs 
  struct fdp1_fmt - The FDP1 internal format data
  @fourcc: the fourcc code, to match the V4L2 API
  @bpp: bits per pixel per plane
  @num_planes: number of planes
  @hsub: horizontal subsampling factor
  @vsub: vertical subsampling factor
  @fmt: 7-bit format code for the fdp1 hardware
  @swap_yc: the Y and C components are swapped (Y comes before C)
  @swap_uv: the U and V components are swapped (V comes before U)
  @swap: swap register control
  @types: types of queue this format is applicable to
 RGB formats are only supported by the Write Pixel Formatter 
 YUV Formats are supported by Read and Write Pixel Formatters 
 Last RGB code 
  FDP1 Lookup tables range from 0...255 only
  Each table must be less than 256 entries, and all tables
  are padded out to 256 entries by duplicating the last value.
 Per-queue, driver-specific private data 
 Must be zero when !deinterlacing 
  FDP1 operates on potentially 3 fields, which are tracked
  from the VB buffers using this context structure.
  Will always be a field or a full frame, never two fields.
 Should be NONE:TOP:BOTTOM only 
 Flag to indicate this is the last field in the vb 
 Buffer queue lists 
 A job can only be on one list at a time 
 Job Queues 
 Processed buffers in this transaction 
 Transaction length (i.e. how many buffers per transaction) 
 Abort requested by m2m 
 Deinterlace processing mode 
	
	  Adaptive 2D3D mode uses a shared mask
	  This is allocated at streamon, if the ADAPT2D3D mode
	  is requested
	 Capture pipeline, can specify an alpha value
	  for supported formats. 0-255 only
 Source and destination queue data 
 HW Source 
 HW Destination 
	
	  Field Queues
	  Interlaced fields are used on 3 occasions, and tracked in this list.
	 
	  V4L2 Buffers are tracked inside the fdp1_buffer
	  and released when the last 'field' completes
	
	  For de-interlacing we need to track our previous buffer
	  while preparing our job lists.
  list_remove_job: Take the first item off the specified job list
  Returns: pointer to a job, or NULL if the list is empty.
  list_add_job: Add a job to the specified job list
  Returns: void - always succeeds
 Ensure that all residue from previous jobs is gone 
  Buffer lists handling
 job->previous may be on the first field 
  Return the next field in the queue - or NULL,
  without removing the item from the list
 IPC registers are to be programmed with constant values 
  fdp1_write_lut: Write a padded LUT to the hw
  FDP1 uses constant data for de-interlacing processing,
  with large tables. These hardware tables are all 256 bytes
  long, however they often contain repeated data at the end.
  The last byte of the table is written to all remaining entries.
 Tables larger than the hw are clipped 
 Tables are padded with the last entry 
 Picture size is common to Source and Destination frames 
 Strides 
 Format control 
 Set for Bottom field 
 Deint mode is non-zero when deinterlacing 
 Previous Field Channel (CH0) 
 Current Field Channel (CH1) 
 Next Field  Channel (CH2) 
 Output Format Code 
 Enable Colour Space conversion 
 Set WRTM 
 Set an alpha value into the Pad Value 
 Determine picture rounding and clipping 
 Rounding Off 
 WPF Swap needs both ISWAP and OSWAP setting 
 Always set 
 Always on 
 De-interlacing Mode 
 Except for first and last frame, enable all channels 
 No extra channels enabled 
 Previous 
 Next 
  fdp1_device_process() - Run the hardware
  Configure and start the hardware to generate a single frame
  of output given our input parameters.
 Get a job to process 
		
		  VINT can call us to see if we can queue another job.
		  If we have no work to do, we simply return.
 First Frame only? ... 
 Set the mode, and configuration 
 DLI Static Configuration 
 Sensor Configuration 
 Setup the source picture 
 Setup the destination picture 
 Line Memory Pixel Number Register for linear access 
 Enable Interrupts 
 Finally, the Immediate Registers 
 This job is now in the HW queue 
 Start the command 
 Registers will update to HW at next VINT 
 Enable VINT Generator 
  mem2mem callbacks
  job_ready() - check whether an instance is ready to be scheduled to run
 One output buffer is required for each field 
 Will cancel the transaction in the next interrupt handler 
 Immediate abort sequence 
  fdp1_prepare_job: Prepare and queue a new job for a single action of work
  Prepare the next field, (or frame in progressive) and an output
  buffer for the hardware to perform a single operation.
 Buffer check should prevent this ever happening 
	 Source buffers have been prepared on our buffer_queue
	  Prepare our Output buffer
 Active buffer becomes the next job's previous buffer 
 Must be called after 'active' is dequeued 
 Transfer timestamps and flags from src->dst 
	 Ideally, the frame-end function will just 'check' to see
	  if there are more jobs instead
 Finally, Put this job on the processing queue 
 fdp1_m2m_device_run() - prepares and starts the device for an M2M task
  A single input buffer is taken and serialised into our fdp1_buffer
  queue. The queue is then processed to create as many jobs as possible
  from our available input.
 Get our incoming buffer of either one or two fields, or one frame 
 Queue as many jobs as our data provides for 
 Kick the job processing action 
  device_frame_end:
  Handles the M2M level after a buffer completion event.
	
	  fdp1_field_complete will call buf_done only when the last vb2_buffer
	  reference is complete
 Move this job back to the free job list 
		
		  For pipelined performance support, this would
		  be called from a VINT handler
  video ioctls
 Format not found 
 Format found 
 Compute and clamp the stride and image size. 
 From VSP : TODO: Confirm alignment limits for FDP1 
 The two chroma planes must have the same stride. 
 Validate the pixel format to ensure the output queue supports it. 
	
	  Progressive video and all interlaced field orders are acceptable.
	  Default to V4L2_FIELD_INTERLACED.
	
	  The deinterlacer doesn't care about the colorspace, accept all values
	  and default to V4L2_COLORSPACE_SMPTE170M. The YUV to RGB conversion
	  at the output of the deinterlacer supports a subset of encodings and
	  quantization methods and will only be available when the colorspace
	  allows it.
	
	  Align the width and height for YUV 4:2:2 and 4:2:0 formats and clamp
	  them to the supported frame size range. The height boundary are
	  related to the full frame, divide them by two when the format passes
	  fields in separate buffers.
	
	  Validate the pixel format. We can only accept RGB output formats if
	  the input encoding and quantization are compatible with the format
	  conversions supported by the hardware. The supported combinations are
	 
	  V4L2_YCBCR_ENC_601 + V4L2_QUANTIZATION_LIM_RANGE
	  V4L2_YCBCR_ENC_601 + V4L2_QUANTIZATION_FULL_RANGE
	  V4L2_YCBCR_ENC_709 + V4L2_QUANTIZATION_LIM_RANGE
	
	  The colorspace on the capture queue is copied from the output queue
	  as the hardware can't change the colorspace. It can convert YCbCr to
	  RGB though, in which case the encoding and quantization are set to
	  default values as anything else wouldn't make sense.
	
	  The frame width is identical to the output queue, and the height is
	  either doubled or identical depending on whether the output queue
	  field order contains one or two fields per frame.
 Adjust strides for interleaved buffers 
 Propagate the format from the output node to the capture node. 
		
		  Copy the format, clear the per-plane bytes per line and image
		  size, override the field and double the height if needed.
  Queue operations
		
		  Interlaced means bottom-top for 60Hz TV standards (NTSC) and
		  top-bottom for 50Hz. As TV standards are not applicable to
		  the mem-to-mem API, use the height as a heuristic.
 Buffer is completed 
 Adjust buffer addresses for second field 
 Validate the buffer field. 
 Validate the planes sizes. 
 We have known size formats all around 
		
		  Force our deint_mode when we are progressive,
		  ignoring any setting on the device from the user,
		  Otherwise, lock in the requested de-interlace mode.
 bytes per pixel 
 Empty Output queues 
 Empty our internal queues 
 Free any queued buffers 
 Free smsk_data 
 Empty Capture queues (Jobs) 
 Free any held buffer in the ctx 
  File operations
 Initialise Queues 
 Initialise controls 
 Configure default parameters. 
 Perform any power management required 
 Clear interrupts 
 Spurious interrupt 
 Work completed, release the frame 
 Initialise the jobs on the free list 
 Memory-mapped registers 
 Interrupt service routine registration 
 FCP 
 Determine our clock rate 
 V4L2 device registration 
 M2M registration 
 Video registration 
 Power up the cells to read HW 
 Allow the hw to sleep until an open call puts it to use 
 Program in the static LUTs 
 SPDX-License-Identifier: GPL-2.0
  Author: Mikhail Ulyanov
  Copyright (C) 2014-2015 Cogent Embedded, Inc.  <source@cogentembedded.com>
  Copyright (C) 2014-2015 Renesas Electronics Corporation
  This is based on the driversmediaplatforms5p-jpeg driver by
  Andrzej Pietrasiewicz and Jacek Anaszewski.
  Some portions of code inspired by VSP1 driver by Laurent Pinchart.
  TODO in order of priority:
       1) Rotation
       2) Cropping
       3) V4L2_CID_JPEG_ACTIVE_MARKER
  Align JPEG header end to cache line to make sure we will not have any issues
  with cache; additionally to requirement (33.3.27 R01UH0501EJ0100 Rev.1.00)
 16 bit precision format 
 SOI + SOF + EOI 
 JPEG markers 
 ms 
 ms 
 Flags that indicate a format can be used for captureoutput 
  JPEG registers and bits
 JPEG code mode register 
 JPEG code command register 
 JPEG code quantization table number register 
 JPEG code Huffman table number register 
 JPEG code vertical size upper register 
 JPEG code vertical size lower register 
 JPEG code horizontal size upper register 
 JPEG code horizontal size lower register 
 JPEG code hv size register contains only 1 byte
 JPEG code data count upper register 
 JPEG code data count middle register 
 JPEG code data count lower register 
 JPEG interrupt enable register 
 INT5 + INT6 + INT7 
 JPEG interrupt status register 
 JPEG code decode error register 
 JPEG code decode error register mask
 JPEG interface encoding 
 to JPU 
 encode source Y address register 1 
 encode source C address register 1 
 encode source Y address register 2 
 encode source C address register 2 
 encode source memory width register 
 encode source vertical size register 
 encode source horizontal size register 
 encode destination address register 1 
 encode destination address register 2 
 JPEG decoding control register 
 from JPU 
 decode source address register 1 
 decode destination  memory width register 
 decode destination  vert. size register 
 decode destination  horiz. size register 
 decode destination  Y address register 1 
 decode destination  C address register 1 
 quantization tables regs 
 Huffman table DC regs 
 Huffman table AC regs 
  struct jpu - JPEG IP abstraction
  @mutex: the mutex protecting this structure
  @lock: spinlock protecting the device contexts
  @v4l2_dev: v4l2 device for mem2mem mode
  @vfd_encoder: video device node for encoder mem2mem mode
  @vfd_decoder: video device node for decoder mem2mem mode
  @m2m_dev: v4l2 mem2mem device data
  @curr: pointer to current context
  @regs: JPEG IP registers mapping
  @irq: JPEG IP irq
  @clk: JPEG IP clock
  @dev: JPEG IP struct device
  @ref_count: reference counter
  struct jpu_buffer - driver's specific video buffer
  @buf: m2m buffer
  @compr_quality: destination image quality in compression mode
  @subsampling: source image subsampling in decompression mode
  struct jpu_fmt - driver's internal format data
  @fourcc: the fourcc code, 0 if not applicable
  @colorspace: the colorspace specifier
  @bpp: number of bits per pixel per plane
  @h_align: horizontal alignment order (align to 2^h_align)
  @v_align: vertical alignment order (align to 2^v_align)
  @subsampling: (horizontal:4 | vertical:4) subsampling factor
  @num_planes: number of planes
  @types: types of queue this format is applicable to
  struct jpu_q_data - parameters of one queue
  @fmtinfo: driver-specific format of this queue
  @format: multiplanar format of this queue
  @sequence: sequence number
  struct jpu_ctx - the device context data
  @jpu: JPEG IP device for this context
  @encoder: compression (encode) operation or decompression (decode)
  @compr_quality: destination image quality in compression (encode) mode
  @out_q: source (output) queue information
  @cap_q: destination (capture) queue information
  @fh: file handler
  @ctrl_handler: controls handler
  jpeg_buffer - description of memory containing input JPEG data
  @end: end position in the buffer
  @curr: current position in the buffer
  Start of image; Quantization tables
  SOF0 (17 bytes payload) is Baseline DCT - Sample precision, height, width,
  Number of image components, (Ci:8 - Hi:4 - Vi:4 - Tq:8)  3 - Y,Cb,Cr;
  Huffman tables; Padding with 0xff (33.3.27 R01UH0501EJ0100 Rev.1.00)
  ============================================================================
  video ioctl operations
  ============================================================================
	
	  basic size check and EOI - we don't want to let JPU cross
	  buffer bounds in any case. Hope it's stopping by EOI.
 skip preceding filler bytes 
 SOF0: baseline JPEG 
 segment length and bpp 
 YCbCr only 
 ignore userspaces's sizeimage for encoding 
  V4L2 controls
 maybe we can return -EPIPE here? 
  ============================================================================
  Queue operations
  ============================================================================
 decoder capture queue 
 check if JPEG data basic parsing was successful 
		
		  keep subsampling in buffer to check it
		  for compatibility in device_run
  ============================================================================
  Device file operations
  ============================================================================
 ...issue software reset 
  ============================================================================
  mem2mem callbacks
  ============================================================================
 remove current buffers and finish job 
 ...and give it a chance on next run 
 ...wait until module reset completes; we have mutex locked here 
 only no marker mode works for encoding 
 Y and C components source addresses 
 memory width 
 ...set up decoder operation 
 ...enable interrupts on transfer completion and d-g error 
 ...set sourcedestination addresses of encoded data 
 ...start encoderdecoder operation 
  ============================================================================
  IRQ handler
  ============================================================================
 ...spurious interrupt 
 ...clear interrupts 
 ...instance is not running 
 ...reset JPU after completion 
  ============================================================================
  Driver basic infrastructure
  ============================================================================
 H2 
 M2-W 
 V2H 
 M2-N 
 memory-mapped registers 
 interrupt service routine registration 
 clocks 
 v4l2 device 
 mem2mem device 
 fill in quantization and Huffman tables for encoder 
 SPDX-License-Identifier: GPL-2.0
  SuperH Video Output Unit (VOU) driver
  Copyright (C) 2010, Guennadi Liakhovetski <g.liakhovetski@gmx.de>
 Mirror addresses are not available for all registers 
 State information 
 Register access routines for sides A, B and mirror addresses 
 Further pixel formats can be added 
 Locking: caller holds fop_lock mutex 
 User buffer too small 
 Locking: caller holds fop_lock mutex and vq->irqlock spinlock 
 Start from side A: we use mirror addresses, so, set B 
 Second buffer - initialise register side B 
 Register side switching with frame VSYNC 
 Enable End-of-Frame (VSYNC) interrupts 
 Two buffers on the queue - activate the hardware 
 disable output 
 ...but the current frame will complete 
 Video IOCTLs 
 Enumerate formats, that the device can accept from the user 
 height_max = 262; 
 height_max = 312; 
	
	  Cropping scheme: max useful image is 720x480, and the total video
	  area is 858x525 (NTSC) or 864x625 (PAL). AK8813  8814 starts
	  sampling data beginning with fixed 276th (NTSC)  288th (PAL) clock,
	  of which the first 33  25 clocks HSYNC must be held active. This
	  has to be configured in CR[HW]. 1 pixel equals 2 clock periods.
	  This gives CR[HW] = 16  12, VPR[HVP] = 138  144, which gives
	  exactly 858 - 138 = 864 - 144 = 720! We call the out-of-display area,
	  beyond DSR, specified on the left and top by the VPR register "black
	  pixels" and out-of-image area (DPR) "background pixels." We fix VPR
	  at 138  144 : 20, because that's the HSYNC timing, that our first
	  client requires, and that's exactly what leaves us 720 pixels for the
	  image; we leave VPR[VVP] at default 20 for now, because the client
	  doesn't seem to have any special requirements for it. Otherwise we
	  could also set it to max - 240 = 22  72. Thus VPR depends only on
	  the selected standard, and DPR and DSR are selected according to
	  cropping. Q: how does the client detect the first valid line? Does
	  HSYNC stay inactive during invalid (black) lines?
 VOUISR height - half of a frame height in frame mode 
	
	  if necessary, we could set VOUHIR to
	  max(black_left + dsr_h, width_max) here
 To produce a colour bar for testing set bit 23 of VOUVCR 
  Find input geometry, that we can use to produce output, closest to the
  requested rectangle, using VOU scaling
 The compiler cannot know, that best and idx will indeed be set 
 Image width must be a multiple of 4 
 Select scales to come as close as possible to the output image 
 scales increase 
 This loop can be replaced with one division 
 scales increase 
  Find output geometry, that we can produce, using VOU scaling, closest to
  the requested rectangle
 Select scales to come as close as possible to the output image 
 scales increase 
 This loop can be replaced with one division 
 scales increase 
 Revisit: is this the correct code? 
 Must be implemented, so, don't check for -ENOIOCTLCMD 
 Sanity checks 
 We tried to preserve output rectangle, but it could have changed 
 Shall we continue, if the subdev doesn't support .s_std_output()? 
 Assume a dull encoder, do all the work ourselves. 
 Revisit: is this the correct code? 
 Configure the encoder one-to-one, position at 0, ignore errors 
	
	  We first issue a S_SELECTION, so that the subsequent S_FMT delivers the
	  final encoder configuration.
 Must be implemented, so, don't check for -ENOIOCTLCMD 
 Sanity checks 
	
	  No down-scaling. According to the API, current call has precedence:
	  https:linuxtv.orgdownloadsv4l-dvb-apisuapiv4lcrop.html#cropping-structures
 We tried to preserve output rectangle, but it could have changed 
 Just ack: buf_release will disable further interrupts 
 side = vou_status & 0x10000; 
 Clear only set interrupts 
 Keep cycling while no next buffer is available 
 Keep cycling while no next buffer is available 
 Disable all IRQs 
 Reset VOU interfaces - registers unaffected 
 Manual register side switching at first 
 Default - fixed HSYNC length, can be made configurable is required 
 File operations 
 First open 
 Last close 
 sh_vou display ioctl operations 
 PAL only supported in 8-bit non-bt656 mode 
 Fill in defaults 
 Initialize the vb2 queue 
 SPDX-License-Identifier: GPL-2.0-only
  TI Camera Access Layer (CAL) - CAMERARX
  Copyright (c) 2015-2020 Texas Instruments Inc.
  Authors:
 	Benoit Parrot <bparrot@ti.com>
 	Laurent Pinchart <laurent.pinchart@ideasonboard.com>
 ------------------------------------------------------------------
 	IO Register Accessors
  ------------------------------------------------------------------
 ------------------------------------------------------------------
 	CAMERARX Management
  ------------------------------------------------------------------
		
		  Every lane are one nibble apart starting with the
		  clock followed by the data lanes so shift masks by 4.
 Always enable all lanes at the phy control level 
 F_CSI_MODE is not present on every architecture 
  TCLK values are OK at their reset values
 DPHY timing configuration 
 THS_TERM: Programmed value = floor(20 nsDDRClk period) 
 THS_SETTLE: Programmed value = floor(105 nsDDRClk period) + 4 
 Enable CIO & VC error IRQs. 
 Disable CIO error irqs 
	
	  CSI-2 PHY Link Initialization Sequence, according to the DRA74xP 
	  DRA75xP  DRA76xP  DRA77xP TRM. The DRA71x  DRA72x and the AM65x 
	  DRA80xM TRMs have a a slightly simplified sequence.
	
	  1. Configure all CSI-2 low level protocol registers to be ready to
	     receive signalsdata from the CSI-2 PHY.
	 
	     i.-v. Configure the lanes position and polarity.
	
	     vi.-vii. Configure D-PHY mode, enable the required lanes and
	              enable the CAMERARX clock.
	
	  2. CSI PHY and link initialization sequence.
	 
	     a. Deassert the CSI-2 PHY reset. Do not wait for reset completion
	        at this point, as it requires the external source to send the
	        CSI-2 HS clock.
 Dummy read to allow SCP reset to complete. 
 Program the PHY timing parameters. 
	
	     b. Assert the FORCERXMODE signal.
	 
	  The stop-state-counter is based on fclk cycles, and we always use
	  the x16 and x4 settings, so stop-state-timeout =
	  fclk-cycle  16  4  counter.
	 
	  Stop-state-timeout must be more than 100us as per CSI-2 spec, so we
	  calculate a timeout that's 100us (rounding up).
 Assert the FORCERXMODE signal. 
	
	  c. Connect pull-down on CSI-2 PHY link (using pad control).
	 
	  This is not required on DRA71x, DRA72x, AM65x and DRA80xM. Not
	  implemented.
	
	  d. Power up the CSI-2 PHY.
	  e. Check whether the state status reaches the ON state.
	
	  Start the source to enable the CSI-2 HS clock. We can now wait for
	  CSI-2 PHY reset to complete.
 f. Wait for STOPSTATE=1 for all enabled lane modules. 
	
	  g. Disable pull-down on CSI-2 PHY link (using pad control).
	 
	  This is not required on DRA71x, DRA72x, AM65x and DRA80xM. Not
	  implemented.
 Finally, enable the PHY Protocol Interface (PPI). 
 Assert Complex IO Reset 
 Disable the phy 
    Errata i913: CSI2 LDO Needs to be disabled when module is powered on
    Enabling CSI2 LDO shorts it to core supply. It is crucial the 2 CSI2
    LDOs on the device are disabled if CSI-2 module is powered on
    (0x4845 B304 | 0x4845 B384 [28:27] = 0x1) or in ULPS (0x4845 B304
    | 0x4845 B384 [28:27] = 0x2) mode. Common concerns include: high
    current draw on the module supply in active mode.
    Errata does not apply when CSI-2 module is powered off
    (0x4845 B304 | 0x4845 B384 [28:27] = 0x0).
  SW Workaround:
 	Set the following register bits to disable the LDO,
 	which is essentially CSI2 REG10 bit 6:
 		Core 0:  0x4845 B828 = 0x0000 0040
 		Core 1:  0x4845 B928 = 0x0000 0040
		
		  Here we update the reg offset with the
		  value found in DT
	
	  Find the endpoint node for the port corresponding to the PHY
	  instance, and parse its CSI-2-related properties.
		
		  The endpoint is not mandatory, not all PHY instances need to
		  be connected in DT.
 Retrieve the connected device and store it for later use. 
 ------------------------------------------------------------------
 	V4L2 Subdev Operations
  ------------------------------------------------------------------
 No transcoding, source and sink codes must match. 
 No transcoding, source and sink formats must match. 
 No transcoding, source and sink formats must match. 
	
	  Default to the first format if the requested media bus code isn't
	  supported.
 Clamp the size, update the code. The colorspace is accepted as-is. 
 Store the format and propagate it to the source pad. 
 ------------------------------------------------------------------
 	Create and Destroy
  ------------------------------------------------------------------
 Initialize the V4L2 subdev and media entity. 
 SPDX-License-Identifier: GPL-2.0-only
  TI VPE mem2mem driver, based on the virtual v4l2-mem2mem example driver
  Copyright (c) 2013 Texas Instruments Inc.
  David Griego, <dagriego@biglakesoftware.com>
  Dale Farnsworth, <dale@farnsworth.org>
  Archit Taneja, <archit@ti.com>
  Copyright (c) 2009-2010 Samsung Electronics Co., Ltd.
  Pawel Osciak, <pawel@osciak.com>
  Marek Szyprowski, <m.szyprowski@samsung.com>
  Based on the virtual v4l2-mem2mem example device
 minimum and maximum frame sizes 
 required alignments 
 multiple of 1 
 multiple of 2 
 flags that indicate a format can be used for captureoutput 
 used as plane indices 
 per m2m context info 
 need 3 src fields to de-interlace 
 default one buffer per batch job 
  each VPE context can need up to 3 config descriptors, 7 input descriptors,
  3 output descriptors, and 10 control descriptors
  Default upsampler coefficients
 Coefficients for progressive input 
 Coefficients for Top Field Interlaced input 
 Coefficients for Bottom Field Interlaced input 
  the following registers are for configuring some of the parameters of the
  motion and edge detection blocks inside DEI, these generally remain the same,
  these could be passed later via userspace if some one needs to tweak these.
 VPE_DEI_REG2 
 VPE_DEI_REG3 
 VPE_DEI_REG4 
 VPE_DEI_REG5 
 VPE_DEI_REG6 
 VPE_DEI_REG7 
  default expert DEI register values, unlikely to be modified.
  The port_data structure contains per-port data.
 VPDMA channel 
 input frame f, f-1, f-2 index 
 plane index for co-panar formats 
  Define indices into the port_data tables
 driver info for each of the supported video formats 
 standard format identifier 
 CAPTURE andor OUTPUT 
 set for unpacked Luma and Chroma 
 vpdma format info for each plane 
  per-queue, driver-specific private data.
  there is one source queue and one destination queue for each m2m context.
 current v4l2 format info 
 cropcompose rectangle 
 format info 
 vpe_q_data flag bits 
 find our format description corresponding to the passed v4l2_format 
  there is one vpe_dev structure in the driver, it is shared by
  all instances.
 count of driver instances 
 shadow mmrs in device 
 vpdma data handle 
 scaler data handle 
 csc data handle 
  There is one vpe_ctx structure for each m2m context.
 current field 
 current framefield seq 
 abort after next irq 
 input buffers per batch 
 bufs done in this batch 
 src & dst queue data 
 dma addrs of motion vector inout bufs 
 virtual addrs of motion vector bufs 
 current motion vector buffer size 
 shadow reg addrdata block 
 h coeff buffer 
 v coeff buffer 
 DMA descriptor list 
 using de-interlacer 
 have new shadow reg values 
  M2M devices get 2 queues.
  Return the queue given the type.
 register field readwrite helpers 
  DMA addressdata block for the shadow registers
  Set the headers for all of the addressdata block structures.
  Allocate or re-allocate the motion vector DMA buffers
  There are two buffers, one for input and one for output.
  However, the roles are reversed after each field is processed.
  In other words, after each field is processed, the previous
  output (dst) MV buffer becomes the new input (src) MV buffer.
  While de-interlacing, we keep the two most recent input buffers
  around.  This function frees those two buffers when we have
  finished processing the current stream.
  Enable or disable the VPE clocks
  Load the correct of upsampler coefficients into the shadow MMRs
 interlaced 
  Set the upsampler config mode and the VPDMA line mode in the shadow MMRs.
	
	  Cfg Mode 0: YUV420 source, enable upsampler, DEI is de-interlacing.
	  Cfg Mode 1: YUV422 source, disable upsampler, DEI is de-interlacing.
 double lines to line buffer 
 regs for now 
 frame start for input luma 
 frame start for input chroma 
 frame start for MV in client 
  Set the shadow registers that are modified when the source
  format changes.
  Set the shadow registers that are modified when the destination
  format changes.
	
	  the source of CHR_DS and CSC is always the scaler, irrespective of
	  whether it's used or not
  Set the de-interlacer shadow register values
	
	  according to TRM, we should set DEI in progressive bypass mode when
	  the input content is progressive, however, DEI is bypassed correctly
	  for both progressive and interlace content in interlace bypass mode.
	  It has been recommended not to use progressive bypass mode.
 EDI_ENABLE_3D 
 EDI_CHROMA_3D  
  Set the shadow registers whose values are modified when either the
  source or destination format is changed.
		
		  we make sure that the source image has a 16 byte aligned
		  stride, we need to do the same for the motion vector buffer
		  by aligning it's stride to the next 16 byte boundary. this
		  extra space will not be used by the de-interlacer, but will
		  ensure that vpdma operates correctly
  mem2mem callbacks
  job_ready() - check whether an instance is ready to be scheduled to run
	
	  This check is needed as this might be called directly from driver
	  When called by m2m framework, this will always satisfy, but when
	  called from vpe_irq, this might fail. (src stream with zero buffers)
 Will cancel the transaction in the next interrupt handler 
 to incorporate interleaved formats 
		
		  If we are using a single plane buffer and
		  we need to set a separate vpdma chroma channel.
 Compute required offset 
 Use address as is, no offset 
 Apply the offset 
 to incorporate interleaved formats 
		
		  If we are using a single plane buffer and
		  we need to set a separate vpdma chroma channel.
 Compute required offset 
 Use address as is, no offset 
 Apply the offset 
		
		  field used in VPDMA desc  = 0 (top)  1 (bottom)
		  Use top or bottom field from same vb alternately
		  For each de-interlacing operation, f,f-1,f-2 should be one
		  of TBT or BTB
 Select initial value based on format 
 Toggle for each vb_index and each operation 
  Enable the expected IRQ sources
 device_run() - prepares and starts the device
  This function is only called when both the source and destination
  buffers are in place.
		 When using SEQ_XX type buffers, each buffer has two fields
		  each buffer has two fields (top & bottom)
		  Removing one buffer is actually getting two fields
		  Alternate between two operations:-
		  Even : consume one field but DO NOT REMOVE from queue
		  Odd : consume other field and REMOVE from queue
		
		  we have output the first 2 frames through line average, we
		  now switch to EDI de-interlacer
 EDI (Y + UV) 
 config descriptors 
 output data descriptors 
 input data descriptors 
 sync on channel control descriptors for input ports 
 sync on channel control descriptors for output ports 
	
	  Setup next operation only when list complete IRQ occurs
	  otherwise, skip the following code
 the previous dst mv buffer becomes the next src mv buffer 
		
		  Allow source buffer to be dequeued only if it won't be used
		  in the next iteration. All vbs are initialized to first
		  buffer and we are shifting buffers every iteration, for the
		  first two iterations, no buffer will be dequeued.
		  This ensures that driver will keep (n-2)th (n-1)th and (n)th
		  field when deinterlacing is enabled
	
	  Since the vb2_buf_done has already been called fir therse
	  buffer we can now NULL them out so that we won't try
	  to clean out stray pointer later on.
  video ioctls
 get colorimetry from the source queue 
	
	  the line stride should 16 byte aligned for VPDMA to work, based on
	  the bytes per pixel, figure out how much the width should be aligned
	  to make sure line stride is 16 byte aligned
		
		  if bpp is 3(as in some RGB formats), the pixel width doesn't
		  really help in ensuring line stride is 16 byte aligned
		
		  for the remainder bpp(4, 2 and 1), the pixel width alignment
		  can ensure a line stride alignment of 16 bytes. For example,
		  if bpp is 2, then the line stride can be 16 byte aligned if
		  the width is 8 byte aligned
		
		  HACK: using order_base_2() here causes lots of asm output
		  errors with smatch, on i386:
		  .archx86includeasmbitops.h:457:22:
		 		 warning: asm output is not an lvalue
		  Perhaps some gcc optimization is doing the wrong thing
		  there.
		  Let's get rid of them by doing the calculus on two steps
	
	  For the actual image parameters, we need to consider the field
	  height of the image for SEQ_XX buffers.
 HD 
 SD 
 i == VIP_CHROMA 
 the crop height is halved for the case of SEQ_XX buffers 
		
		  COMPOSE target is only valid for capture buffer type, return
		  error for output buffer type
		
		  CROP target is only valid for output buffer type, return
		  error for capture buffer type
	
	  bound and default cropcompose targets are invalid targets to
	  tryset
	
	  For SEQ_XX buffers, crop height should be less than the height of
	  the field height, not the buffer height
 adjust lefttop if cropping rectangle is out of bounds 
		
		  for CROPCOMPOSE target type, return c_rect params from the
		  respective buffer type
		
		  for DEFAULTBOUNDS target type, return width and height from
		  S_FMT of the respective buffer type
  defines number of buffersframes a context can process with VPE before
  switching to a different context. default value is 1 buffer per context
  Queue operations
	
	  Cleanup the in-transit vb2 buffers that have been
	  removed from their respective queue already but for
	  which procecessing has not been completed yet.
 Check any of the size exceed maximum scaling sizes 
  File operations
	
	  for now, just report the creation of the first instance, we can later
	  optimize the driver to enable or disable clocks when the first
	  instance is created or the last instance released
	
	  for now, just report the release of the last instance, we can later
	  optimize the driver to enable or disable clocks when the first
	  instance is created or the last instance released
	
	  HACK: we get resource info from device tree in the form of a list of
	  VPE sub blocks, the driver currently uses only the base of vpe_top
	  for register access, the driver should be changed later to access
	  registers based on the sub block base addresses
 Perform clk enable followed by reset 
 SPDX-License-Identifier: GPL-2.0-only
  TI Camera Access Layer (CAL) - Video Device
  Copyright (c) 2015-2020 Texas Instruments Inc.
  Authors:
 	Benoit Parrot <bparrot@ti.com>
 	Laurent Pinchart <laurent.pinchart@ideasonboard.com>
  Print Four-character-code (FOURCC) 
 ------------------------------------------------------------------
 	V4L2 Common IOCTLs
  ------------------------------------------------------------------
 ------------------------------------------------------------------
 	V4L2 Video Node Centric IOCTLs
  ------------------------------------------------------------------
	
	  Maximum width is bound by the DMA max width in bytes.
	  We need to recalculate the actual maxi width depending on the
	  number of bytes per pixels required.
 Just get the first one enumerated 
 check forfind a valid widthheight 
 use existing values as default 
	
	  Use current colorspace for now, it will get
	  updated properly during s_fmt
 Just double check nothing has gone wrong 
 check for valid format 
 timeperframe is arbitrary and continuous 
 ------------------------------------------------------------------
 	V4L2 Media Controller Centric IOCTLs
  ------------------------------------------------------------------
	
	  Default to the first format if the requested pixel format code isn't
	  supported.
	
	  Clamp the size, update the pixel format. The field and colorspace are
	  accepted as-is, except for V4L2_FIELD_ANY that is turned into
	  V4L2_FIELD_NONE.
	
	  Calculate the number of bytes per line and the image size. The
	  hardware stores the stride as a number of 16 bytes words, in a
	  signed 15-bit value. Only 14 bits are thus usable.
 ------------------------------------------------------------------
 	videobuf2 Common Operations
  ------------------------------------------------------------------
 recheck locking 
 Release all queued buffers. 
 ------------------------------------------------------------------
 	videobuf2 Operations
  ------------------------------------------------------------------
	
	  Verify that the currently configured format matches the output of
	  the connected CAMERARX.
 ------------------------------------------------------------------
 	V4L2 Initialization and Registration
  ------------------------------------------------------------------
 V4L2 ioctl handler 
 Enumerate sub device formats and enable all matching local formats 
 Save current format 
 Save current format 
 Initialize the vb2 queue. 
 Initialize the video device and media entity. 
 Initialize the control handler. 
 SPDX-License-Identifier: GPL-2.0-only
  TI Camera Access Layer (CAL) - Driver
  Copyright (c) 2015-2020 Texas Instruments Inc.
  Authors:
 	Benoit Parrot <bparrot@ti.com>
 	Laurent Pinchart <laurent.pinchart@ideasonboard.com>
 ------------------------------------------------------------------
 	Format Handling
  ------------------------------------------------------------------
 gggbbbbb rrrrrggg 
 rrrrrggg gggbbbbb 
 gggbbbbb arrrrrgg 
 arrrrrgg gggbbbbb 
 rgb 
 bgr 
 argb 
 ------------------------------------------------------------------
 	Platform Data
  ------------------------------------------------------------------
 ------------------------------------------------------------------
 	IO Register Accessors
  ------------------------------------------------------------------
 ------------------------------------------------------------------
 	Context Management
  ------------------------------------------------------------------
	
	  DT type: MIPI CSI-2 Specs
	    0x1: All - DT filter is disabled
	   0x24: RGB888 1 pixel  = 3 bytes
	   0x2B: RAW10  4 pixels = 5 bytes
	   0x2A: RAW8   1 pixel  = 1 byte
	   0x1E: YUV422 2 pixels = 4 bytes
		
		  If you see this warning then it means that you added
		  some new entry in the cal_formats[] array with a different
		  bit per pixel values then the one supported below.
		  Either add support for the new bpp value below or adjust
		  the new entry to use one of the value below.
		 
		  Instead of failing here just use 8 bpp as a default.
 64 bit word means no skipping 
	
	  The XSIZE field is expressed in 64-bit units and prevents overflows
	  in case of synchronization issues by limiting the number of bytes
	  written per line.
 Configure the CSI-2, pixel processing and write DMA contexts. 
 Enable IRQ_WDMA_END and IRQ_WDMA_START. 
	
	  Request DMA stop and wait until it completes. If completion times
	  out, forcefully disable the DMA.
 Disable IRQ_WDMA_END and IRQ_WDMA_START. 
 Disable CSI2 context 
 Disable pix proc 
 ------------------------------------------------------------------
 	IRQ Handling
  ------------------------------------------------------------------
		
		  If a stop is requested, disable the write DMA context
		  immediately. The CAL_WR_DMA_CTRL_j.MODE field is shadowed,
		  the current frame will complete and the DMA will then stop.
		
		  Otherwise, if a new buffer is available, queue it to the
		  hardware.
 If the DMA context was stopping, it is now stopped. 
 If a new buffer was queued, complete the current buffer. 
 Check which DMA just finished 
 Clear Interrupt status 
 Check which DMA just started 
 Clear Interrupt status 
 ------------------------------------------------------------------
 	Asynchronous V4L2 subdev binding
  ------------------------------------------------------------------
 Must be first 
 ------------------------------------------------------------------
 	Media and V4L2 device handling
  ------------------------------------------------------------------
  Register user-facing devices. To be called at the end of the probe function
  when all resources are initialized and ready.
	
	  Register the async notifier. This may trigger registration of the
	  V4L2 video devices if all subdevs are ready.
  Unregister the user-facing devices, but don't free memory yet. To be called
  at the beginning of the remove function, to disallow access from userspace.
 Unregister all the V4L2 video devices. 
  Initialize the in-kernel objects. To be called at the beginning of the probe
  function, before the V4L2 device is used by the driver.
	
	  Initialize the V4L2 device (despite the function name, this performs
	  initialization, not registration).
  Cleanup the in-kernel objects, freeing memory. To be called at the very end
  of the remove sequence, when nothing (including userspace) can access the
  objects anymore.
 ------------------------------------------------------------------
 	Initialization and module stuff
  ------------------------------------------------------------------
 Get hardware revision and info. 
	
	  Backward DTS compatibility. If syscon entry is not present then
	  check if the camerrx_control resource is present.
	
	  In this case the base already point to the direct CM register so no
	  need for an offset.
 Acquire resources: clocks, CAMERARX regmap, IO memory and IRQ. 
 Read the revision and hardware info to verify hardware access. 
 Initialize the media device. 
 Create CAMERARX PHYs. 
 Create contexts. 
 Register the media device. 
		
		  Apply errata on both port everytime we (re-)enable
		  the clock
	
	  Enable global interrupts that are not related to a particular
	  CAMERARAX or context.
 SPDX-License-Identifier: GPL-2.0-only
  Scaler library
  Copyright (c) 2013 Texas Instruments Inc.
  David Griego, <dagriego@biglakesoftware.com>
  Dale Farnsworth, <dale@farnsworth.org>
  Archit Taneja, <archit@ti.com>
  set the horizontal scaler coefficients according to the ratio of output to
  input widths, after accounting for up to two levels of decimation
 first level decimation 
 second level decimation 
		
		  for each phase, the scaler expects space for 8 coefficients
		  in it's memory. For the horizontal scaler, we copy the first
		  7 coefficients and skip the last slot to move to the next
		  row to hold coefficients for the next phase
  set the vertical scaler coefficients according to the ratio of output to
  input heights
		
		  for the vertical scaler, we copy the first 5 coefficients and
		  skip the last 3 slots to move to the next row to hold
		  coefficients for the next phase
	
	  location of SC register in payload memory with respect to the first
	  register in the mmr address data block
 clear all the features(they may get enabled elsewhere later) 
 we only support linear scaling for now 
 configure horizontal scaler 
 enable 2X or 4X decimation 
 configure vertical scaler 
 use RAV for vertical scaler if vertical downscaling is > 4x 
 use RAV 
 use polyphase 
 SPDX-License-Identifier: GPL-2.0-only
  VPDMA helper library
  Copyright (c) 2013 Texas Instruments Inc.
  David Griego, <dagriego@biglakesoftware.com>
  Dale Farnsworth, <dale@farnsworth.org>
  Archit Taneja, <archit@ti.com>
  To handle RAW format we are re-using the CBY422
  vpdma data type so that we use the vpdma to re-order
  the incoming bytes, as the parser assumes that the
  first byte presented on the bus is the MSB of a 2
  bytes value.
  RAW8 handles from 1 to 8 bits
  RAW16 handles from 9 to 16 bits
 VPDMA channel number 
 client CSTAT register offset 
	
	  dumping registers of only group0 and group3, because VPE channels
	  lie within group0 and group3 registers
	
	  these are registers specific to VPE clients, we can make this
	  function dump client registers specific to VPE or VIP based on
	  who is using it
  Allocate a DMA buffer
  map descriptorpayload DMA buffer, enabling DMA access
  unmap descriptorpayload DMA buffer, disabling DMA access and
  allowing the main processor to access the data
  Cleanup all pending descriptors of a list
  First, stop the current list being processed.
  If the VPDMA was busy, this step makes vpdma to accept post lists.
  To cleanup the internal FSM, post abort list descriptor for all the
  channels from @channels array of size @size.
  create a descriptor list, the user of this list will append configuration,
  control and data descriptors to this list, this list will be submitted to
  VPDMA. VPDMA's list parser will go through each descriptor and perform the
  required DMA operations
  once a descriptor list is parsed by VPDMA, we reset the list by emptying it,
  to allow new descriptors to be added to the list.
  free the buffer allocated for the VPDMA descriptor list, this should be
  called when the user doesn't want to use VPDMA any more.
  submit a list of DMA descriptors to the VPE VPDMA, do not wait for completion
 16-byte granularity 
	 Calculate write address from the offset of write_dtd from start
	  of the list->buf
  append a configuration descriptor to the given descriptor list, where the
  payload is in the form of a simple data block specified in the descriptor
  header, this is used to upload scaler coefficients to the scaler module
  append a configuration descriptor to the given descriptor list, where the
  payload is in the address data block format, this is used to a configure a
  discontiguous set of MMRs
  control descriptor format change based on what type of control descriptor it
  is, we only use 'sync on channel' control descriptors for now, so assume it's
  that
  append a 'sync on channel' type control descriptor to the given descriptor
  list, this descriptor stalls the VPDMA list till the time DMA is completed
  on the specified channel
  append an 'abort_channel' type control descriptor to the given descriptor
  list, this descriptor aborts any DMA transaction happening using the
  specified channel
  append an outbound data transfer descriptor to the given descriptor list,
  this sets up a 'client to memory' VPDMA transfer for the given VPDMA channel
  @list: vpdma desc list to which we add this descriptor
  @width: width of the image in pixels in memory
  @c_rect: compose params of output image
  @fmt: vpdma data format of the buffer
  dma_addr: dma address as seen by VPDMA
  max_width: enum for maximum width of data transfer
  max_height: enum for maximum height of data transfer
  chan: VPDMA channel
  flags: VPDMA flags to configure some descriptor fields
  append an inbound data transfer descriptor to the given descriptor list,
  this sets up a 'memory to client' VPDMA transfer for the given VPDMA channel
  @list: vpdma desc list to which we add this descriptor
  @width: width of the image in pixels in memory(not the cropped width)
  @c_rect: crop params of input image
  @fmt: vpdma data format of the buffer
  dma_addr: dma address as seen by VPDMA
  chan: VPDMA channel
  field: top or bottom field info of the input image
  flags: VPDMA flags to configure some descriptor fields
  frame_widthheight: the complete widthheight of the image presented to the
 			client (this makes sense when multiple channels are
 			connected to the same client, forming a larger frame)
  start_h, start_v: position where the given channel starts providing pixel
 			data to the client (makes sense when multiple channels
 			contribute to the client)
 set or clear the mask for list complete interrupt 
 get the LIST_STAT register 
 get the LIST_MASK register 
 clear previously occurred list interrupts in the LIST_STAT register 
  configures the output mode of the line buffer for the given client, the
  line buffer content can either be mirrored(each line repeated twice) or
  passed to the client as is
  configures the event which should trigger VPDMA transfer for the given
  client
 already initialized 
 max 1 second 
 SPDX-License-Identifier: GPL-2.0-only
  Color space converter library
  Copyright (c) 2013 Texas Instruments Inc.
  David Griego, <dagriego@biglakesoftware.com>
  Dale Farnsworth, <dale@farnsworth.org>
  Archit Taneja, <archit@ti.com>
  12 coefficients in the order:
  a0, b0, c0, a1, b1, c1, a2, b2, c2, d0, d1, d2
 default colorspace coefficients 
 SDTV 
 SDTV 
 HDTV 
 HDTV 
 SDTV 
 SDTV 
 HDTV 
 HDTV 
  set the color space converter coefficient shadow register values
 Y2R 
		
		  These are not the standard default values but are
		  set this way for historical compatibility
 Should never reach this, but it keeps gcc happy 
 R2Y 
		
		  These are not the standard default values but are
		  set this way for historical compatibility
 Should never reach this, but it keeps gcc happy 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2012-2016, The Linux Foundation. All rights reserved.
  Copyright (C) 2017 Linaro Ltd.
 non fatal session errors 
 missing property data 
 bad packet 
 bad packet 
 bad packet 
		
		  Event of type HFI_EVENT_SYS_ERROR will not have any session
		  associated with it
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2020, The Linux Foundation. All rights reserved.
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2012-2016, The Linux Foundation. All rights reserved.
  Copyright (C) 2017 Linaro Ltd.
  Three resons to keep MPLANE formats (despite that the number of planes
  currently is one):
  - the MPLANE formats allow only one plane to be used
  - the downstream driver use MPLANE formats too
  - future firmware versions could add support for >1 planes
 framerate is reported in 165535 fps unit 
		 IDR periodicity, n:
		  n = 0 - only the first I-frame is IDR frame
		  n = 1 - all I-frames will be IDR frames
		  n > 1 - every n-th I-frame will be IDR frame
	
	  create m2m device for every instance, the m2m context scheduling
	  is made by firmware side so we do not need to care about.
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2012-2016, The Linux Foundation. All rights reserved.
  Copyright (C) 2017 Linaro Ltd.
 Profile not supported, falling back to high 
 Level not supported, falling back to 1 
		 We'll be packing in the qp, so make sure we
		  won't be losing data when masking
		 When creating the packet, pack the qp value as
		  0xiippbb, where ii = qp range for I-frames,
		  pp = qp range for P-frames, etc.
 FOLLOWING PROPERTIES ARE NOT IMPLEMENTED IN CORE YET 
	
	  Any session set property which is different in 3XX packetization
	  should be added as a new case below. All unchanged session set
	  properties will be handled in the default case.
 for 3xx fw version session_continue is used 
	
	  Any session set property which is different in 3XX packetization
	  should be added as a new case below. All unchanged session set
	  properties will be handled in the default case.
 not implemented on Venus 4xx 
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) 2019 Linaro Ltd.
  Author: Stanimir Varbanov <stanimir.varbanov@linaro.org>
	
	  keep minimum bandwidth vote for "video-mem" path,
	  so that clks can be disabled during vdec_session_release().
	  Actual bandwidth drop will be done during device supend
	  so that device can power down without any warnings.
TODO : divide this inst->load by work_route 
TODO : divide this inst->load by work_route 
 Move current instance to LP and return 
 Move all instances to LP mode and return 
 Attach the power domain for setting performance state 
 Drop the performance state vote 
 21  20 is overhead factor 
 10  7 is overhead factor 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2020, The Linux Foundation. All rights reserved.
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2012-2016, The Linux Foundation. All rights reserved.
  Copyright (C) 2017 Linaro Ltd.
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2012-2016, The Linux Foundation. All rights reserved.
  Copyright (C) 2017 Linaro Ltd.
 no need to allocate dpb buffers 
	
	  v4 doesn't send BUFFER_ALLOC_MODE_SUPPORTED property and supports
	  dynamic buffer mode by default for HFI_BUFFER_OUTPUTOUTPUT2.
 the encoder has only one output 
 Skip processing queued capture buffers after LAST flag 
			
			  Hard-code DPB buffers to be 10bit UBWC and decoder
			  output buffers in 8bit NV12 until V4L2 is able to
			  expose compressedtiled formats to applications.
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2012-2016, The Linux Foundation. All rights reserved.
  Copyright (C) 2017 Linaro Ltd.
		
		  In video firmware, 8x8 transform is supported only for
		  high profile(HP) and constrained high profile(CHP).
		  If client wants to disable 8x8 transform for HPCHP,
		  it is better to set profile as main profile(MP).
		  Because there is no difference between HP and MP
		  if we disable 8x8 transform for HP.
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2017 Linaro Ltd.
 Bring XTSS out of reset 
 Bring ARM9 out of reset 
 Assert the reset to XTSS 
 Assert the reset to ARM9 
 Make sure reset is asserted before the mapping is removed 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2020, The Linux Foundation. All rights reserved.
 ((5760  2880)  256) 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2012-2016, The Linux Foundation. All rights reserved.
  Copyright (C) 2017 Linaro Ltd.
 1920x1088 @ 30 + 1280x720 @ 30 
 1920x1088 @ 30 
 1280x720 @ 30 
 720p@30 + 1080p@30 
 4k UHD @ 60 (decode only) 
 4k UHD @ 30 
 1080p @ 60 
 1080p @ 30 
 720p @ 30 
 4k UHD @ 30 
 720p @ 240 
 1080p @ 60 
 720p @ 120 
 1080p @ 30 
 720p @ 60 
 720p @ 30 
 4k UHD @ 30 
 720p @ 240 
 1080p @ 60 
 720p @ 120 
 1080p @ 30 
 720p @ 60 
 720p @ 30 
 4096x2160@90 
 4096x2160@60 
 3840x2160@60 
 3840x2160@30 
 1920x1080@60 
 1920x1080@30 
 3840x2160@60 
 3840x2160@30 
 1920x1080@60 
 1920x1080@30 
 4096x2160@60 
 4096x2160@30 
 1920x1080@60 
 1920x1080@30 
 4096x2160@90 
 4096x2160@90 
 3840x2160@30 
 1920x1080@60 
 1920x1080@30 
 4096x2160@30 
 1920x1080@60 
 1920x1080@30 
 3840x2160@60 
 3840x2160@30 
 1920x1080@60 
 1920x1080@30 
 4096x2160@60 
 4096x2160@30 
 1920x1080@60 
 1920x1080@30 
 3840x2160@60 
 3840x2160@30 
 1920x1080@60 
 1920x1080@30 
 4096x2160@60 
 4096x2160@30 
 1920x1080@60 
 1920x1080@30 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2012-2016, The Linux Foundation. All rights reserved.
  Copyright (C) 2017 Linaro Ltd.
 device address 
 kernel virtual address 
 serialize read  write to the shared memory 
 ensure rdwr indices's are read from memory 
 ensure tx_req is updated in memory 
 ensure tx_req is updated in memory 
 make sure packet is written before updating the write index 
 make sure write index is updated before an interrupt is raised 
 make sure data is valid before using it 
	
	  Do not set receive request for debug queue, if set, Venus generates
	  interrupt for debug messages even when there is no response message
	  available. In general debug queue will not become full as it is being
	  emptied out for every interrupt from Venus. Venus will anyway
	  generates interrupt if it is full.
 update rx_req field in memory 
 bad packet received, dropping 
 ensure the packet is read before updating read index 
 ensure updating read index 
 ensure rdwr indices are read from memory 
 ensure rx_req is stored to memory and tx_req is loaded from memory 
		
		  Inform video hardware to raise interrupt for synchronous
		  commands
 ensure rx_req is updated in memory 
	
	  Re-program all of the registers that get reset as a result of
	  regulator_disable() and _enable()
 Halt AXI and AXI IMEM VBIF Access 
 Request for AXI bus port halt 
	
	  Set receive request to zero on debug queue as there is no
	  need of interrupt from video hardware for debug messages
 ensure table and queue header structs are settled in memory 
	
	  Idle indicator is disabled by default on some 4xx firmware versions,
	  enable it explicitly in order to make suspend functional by checking
	  WFI (wait-for-interrupt) bit.
	
	  SFR isn't guaranteed to be NULL terminated since SYS_ERROR indicates
	  that Venus is in the process of crashing.
	
	  Power collapse sequence for Venus 3xx and 4xx versions:
	  1. Check for ARM9 and video core to be idle by checking WFI bit
	     (bit 0) in CPU status register and by checking Idle (bit 30) in
	     Control status register for video core.
	  2. Send a command to prepare for power collapse.
	  3. Check for WFI and PC_READY bits.
	
	  Set receive request to zero on debug queue as there is no
	  need of interrupt from video hardware for debug messages
 ensure table and queue header structs are settled in memory 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2020 Linaro Ltd.
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) 2018 Linaro Ltd.
  Author: Stanimir Varbanov <stanimir.varbanov@linaro.org>
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2012-2016, The Linux Foundation. All rights reserved.
  Copyright (C) 2017 Linaro Ltd.
	
	  If core shutdown is in progress or if we are in system
	  recovery, return an error as during system error recovery
	  session_init() can't pass successfully
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2020, The Linux Foundation. All rights reserved.
 8K256 
 sizeof(h264d_buftab_t) aligned to 256 
 sizeof(h264d_hw_pic_t) aligned to 32 
 Line Buffer definitions, One for Luma and 12 for each Chroma 
  Some content need more bin buffer, but limit buffer
  size for high resolution
  Some content need more bin buffer, but limit buffer size
  for high resolution
 small line 
 in Bytes 
	
	  Encoder output size calculation: 32 Align widthheight
	  For resolution < 720p : YUVsize  4
	  For resolution > 720p & <= 4K : YUVsize  2
	  For resolution > 4k : YUVsize  4
	  Initially frame_size = YUVsize  2;
	
	  In case of opaque color format bitdepth will be known
	  with first ETB, buffers allocated already with 8 bit
	  won't be sufficient for 10 bit
	  calculate size considering 10-bit by default
	  For 10-bit cases size = size  1.25
 multiply by max numtilescol 
	
	  Decoder input size calculation:
	  If clip is 8k buffer size is calculated for 8k : 8k mbs4
	  For 8k cases we expect widthheight to be set always.
	  In all other cases size is calculated for 4k:
	  4k mbs for VP8VP9 and 4k2 for remaining codecs
 multiply by 108 (1.25) to get size for 10 bit case 
 Max of driver and FW count 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2012-2016, The Linux Foundation. All rights reserved.
  Copyright (C) 2017 Linaro Ltd.
  Three resons to keep MPLANE formats (despite that the number of planes
  currently is one):
  - the MPLANE formats allow only one plane to be used
  - the downstream driver use MPLANE formats too
  - future firmware versions could add support for >1 planes
	
	  The code snippet below is a workaround for backward compatibility
	  with applications which doesn't support V4L2 events. It will be
	  dropped in future once those applications are fixed.
		
		  Implement V4L2_DEC_CMD_STOP by enqueue an empty buffer on
		  decoder input to signal EOS.
 Force searching UBWC formats for bigger then HD resolutions 
 For Venus v4v6 UBWC format is mandatory 
	
	  Some versions of the firmware do not report crop information for
	  all codecs. For these cases, set the crop to the coded resolution.
 overwriting this to 11 for vp9 due to fw bug 
	
	  The assumption is that the firmware have to return the last buffer
	  before this event is received in the v4l2 driver. Also the firmware
	  itself doesn't mark the last decoder output buffer with HFI EOS flag.
	
	  create m2m device for every instance, the m2m context scheduling
	  is made by firmware side so we do not need to care about.
 SPDX-License-Identifier: GPL-2.0
  camss-csid.c
  Qualcomm MSM Camera Subsystem - CSID (CSI Decoder) Module
  Copyright (c) 2011-2015, The Linux Foundation. All rights reserved.
  Copyright (C) 2015-2018 Linaro Ltd.
  csid_set_clock_rates - Calculate and set clock rates on CSID module
  @csiphy: CSID device
 if sensor pixel clock is not available 
 set highest possible CSID clock rate 
  csid_set_power - Power onoff CSID module
  @sd: CSID V4L2 subdevice
  @on: Requested power state
  Return 0 on success or a negative error code otherwise
  csid_set_stream - Enabledisable streaming on CSID module
  @sd: CSID V4L2 subdevice
  @enable: Requested streaming state
  Main configuration of CSID module is also done here.
  Return 0 on success or a negative error code otherwise
  __csid_get_format - Get pointer to format structure
  @csid: CSID device
  @cfg: V4L2 subdev pad configuration
  @pad: pad from which format is requested
  @which: TRY or ACTIVE format
  Return pointer to TRY or ACTIVE format structure
  csid_try_format - Handle try format by pad subdev method
  @csid: CSID device
  @cfg: V4L2 subdev pad configuration
  @pad: pad on which format is requested
  @fmt: pointer to v4l2 format structure
  @which: wanted subdev format
 Set format on sink pad 
 If not found, use UYVY as default 
 Test generator is disabled, 
 keep pad formats in sync 
 Test generator is enabled, set format on source 
 pad to allow test generator usage 
 If not found, use UYVY as default 
  csid_enum_mbus_code - Handle pixel format enumeration
  @sd: CSID V4L2 subdevice
  @cfg: V4L2 subdev pad configuration
  @code: pointer to v4l2_subdev_mbus_code_enum structure
  return -EINVAL or zero on success
  csid_enum_frame_size - Handle frame size enumeration
  @sd: CSID V4L2 subdevice
  @cfg: V4L2 subdev pad configuration
  @fse: pointer to v4l2_subdev_frame_size_enum structure
  return -EINVAL or zero on success
  csid_get_format - Handle get format by pads subdev method
  @sd: CSID V4L2 subdevice
  @cfg: V4L2 subdev pad configuration
  @fmt: pointer to v4l2 subdev format structure
  Return -EINVAL or zero on success
  csid_set_format - Handle set format by pads subdev method
  @sd: CSID V4L2 subdevice
  @cfg: V4L2 subdev pad configuration
  @fmt: pointer to v4l2 subdev format structure
  Return -EINVAL or zero on success
 Propagate the format from sink to source 
  csid_init_formats - Initialize formats on all pads
  @sd: CSID V4L2 subdevice
  @fh: V4L2 subdev file handle
  Initialize all pad formats with default values.
  Return 0 on success or a negative error code otherwise
  csid_set_test_pattern - Set test generator's pattern mode
  @csid: CSID device
  @value: desired test pattern mode
  Return 0 on success or a negative error code otherwise
 If CSID is linked to CSIPHY, do not allow to enable test generator 
  csid_s_ctrl - Handle set control subdev method
  @ctrl: pointer to v4l2 control structure
  Return 0 on success or a negative error code otherwise
  msm_csid_subdev_init - Initialize CSID device structure and resources
  @csid: CSID device
  @res: CSID module resources table
  @id: CSID module id
  Return 0 on success or a negative error code otherwise
 Memory 
 Interrupt 
 Clocks 
 Regulator 
  msm_csid_get_csid_id - Get CSID HW module id
  @entity: Pointer to CSID media entity structure
  @id: Return CSID HW module id here
  csid_get_lane_assign - Calculate CSI2 lane assign configuration parameter
  @lane_cfg - CSI2 lane configuration
  Return lane assign
  csid_link_setup - Setup CSID connections
  @entity: Pointer to media entity structure
  @local: Pointer to local pad
  @remote: Pointer to remote pad
  @flags: Link flags
  Return 0 on success
 If test generator is enabled 
 do not allow a link from CSIPHY to CSID 
 If a sensor is not linked to CSIPHY 
 do no allow a link from CSIPHY to CSID 
 Reset format on source pad to sink pad format 
  msm_csid_register_entity - Register subdev node for CSID module
  @csid: CSID device
  @v4l2_dev: V4L2 device
  Return 0 on success or a negative error code otherwise
  msm_csid_unregister_entity - Unregister CSID module subdev node
  @csid: CSID device
 SPDX-License-Identifier: GPL-2.0
  camss-video.c
  Qualcomm MSM Camera Subsystem - V4L2 device node
  Copyright (c) 2013-2015, The Linux Foundation. All rights reserved.
  Copyright (C) 2015-2018 Linaro Ltd.
  struct camss_format_info - ISP media bus format information
  @code: V4L2 media bus format code
  @pixelformat: V4L2 pixel format FCC identifier
  @planes: Number of planes
  @hsub: Horizontal subsampling (for each plane)
  @vsub: Vertical subsampling (for each plane)
  @bpp: Bits per pixel when stored in memory (for each plane)
 -----------------------------------------------------------------------------
  Helper functions
  video_mbus_to_pix_mp - Convert v4l2_mbus_framefmt to v4l2_pix_format_mplane
  @mbus: v4l2_mbus_framefmt format (input)
  @pix: v4l2_pix_format_mplane format (output)
  @f: a pointer to formats array element to be used for the conversion
  @alignment: bytesperline alignment value
  Fill the output pix structure with information from the input mbus format.
  Return 0 on success or a negative error code otherwise
 -----------------------------------------------------------------------------
  Video queue operations
 -----------------------------------------------------------------------------
  V4L2 ioctls
	
	  Find index "i" of "k"th unique pixelformat in formats array.
	 
	  If f->mbus_code passed to video_enum_fmt() is not zero, a device
	  with V4L2_CAP_IO_MC capability restricts enumeration to only the
	  pixel formats that can be produced from that media bus code.
	  This is implemented by skipping video->formats[] entries with
	  code != f->mbus_code (if f->mbus_code is not zero).
	  If the f->mbus_code passed to video_enum_fmt() is not supported,
	  -EINVAL is returned.
	  If f->mbus_code is zero, all the pixel formats are enumerated.
		
		  All the unique pixel formats matching the arguments
		  have been enumerated (k >= 0 and f->index > 0), or
		  no pixel formats match the non-zero f->mbus_code (k == -1).
 Only accept pixel format present in the formats[] table 
 default format 
 -----------------------------------------------------------------------------
  V4L2 file operations
 -----------------------------------------------------------------------------
  CAMSS video core
  msm_video_init_format - Helper function to initialize format
  @video: struct camss_video
  Initialize pad format with default value.
  Return 0 on success or a negative error code otherwise
  msm_video_register - Register a video device node
  @video: struct camss_video
  @v4l2_dev: V4L2 device
  @name: name to be used for the video device node
  Initialize and register a video device node to a V4L2 device. Also
  initialize the vb2 queue.
  Return 0 on success or a negative error code otherwise
 SPDX-License-Identifier: GPL-2.0
  camss-vfe.c
  Qualcomm MSM Camera Subsystem - VFE (Video Front End) Module
  Copyright (c) 2013-2015, The Linux Foundation. All rights reserved.
  Copyright (C) 2015-2018 Linaro Ltd.
 VFE reset timeout 
  vfe_get_bpp - map media bus format to bits per pixel
  @formats: supported media bus formats array
  @nformats: size of @formats array
  @code: media bus format code
  Return number of bits per pixel
  vfe_buf_flush_pending - Flush all pending buffers.
  @output: VFE output
  @state: vb2 buffer state
  vfe_isr_comp_done() - Process composite image done interrupt
  @vfe: VFE Device
  @comp: Composite image id
  vfe_set_clock_rates - Calculate and set clock rates on VFE module
  @vfe: VFE device
  Return 0 on success or a negative error code otherwise
 if sensor pixel clock is not available 
 set highest possible VFE clock rate 
  vfe_check_clock_rates - Check current clock rates on VFE module
  @vfe: VFE device
  Return 0 if current clock rates are suitable for a new pipeline
  or a negative error code otherwise
  vfe_get - Power up and reset VFE module
  @vfe: VFE Device
  Return 0 on success or a negative error code otherwise
  vfe_put - Power down VFE module
  @vfe: VFE Device
  vfe_flush_buffers - Return all vb2 buffers
  @vid: Video device structure
  @state: vb2 buffer state of the returned buffers
  Return all buffers to vb2. This includes queued pending buffers (still
  unused) and any buffers given to the hardware but again still not used.
  Return 0 on success or a negative error code otherwise
  vfe_set_power - Power onoff VFE module
  @sd: VFE V4L2 subdevice
  @on: Requested power state
  Return 0 on success or a negative error code otherwise
  vfe_set_stream - Enabledisable streaming on VFE module
  @sd: VFE V4L2 subdevice
  @enable: Requested streaming state
  Main configuration of VFE module is triggered here.
  Return 0 on success or a negative error code otherwise
  __vfe_get_format - Get pointer to format structure
  @line: VFE line
  @cfg: V4L2 subdev pad configuration
  @pad: pad from which format is requested
  @which: TRY or ACTIVE format
  Return pointer to TRY or ACTIVE format structure
  __vfe_get_compose - Get pointer to compose selection structure
  @line: VFE line
  @cfg: V4L2 subdev pad configuration
  @which: TRY or ACTIVE format
  Return pointer to TRY or ACTIVE compose rectangle structure
  __vfe_get_crop - Get pointer to crop selection structure
  @line: VFE line
  @cfg: V4L2 subdev pad configuration
  @which: TRY or ACTIVE format
  Return pointer to TRY or ACTIVE crop rectangle structure
  vfe_try_format - Handle try format by pad subdev method
  @line: VFE line
  @cfg: V4L2 subdev pad configuration
  @pad: pad on which format is requested
  @fmt: pointer to v4l2 format structure
  @which: wanted subdev format
 Set format on sink pad 
 If not found, use UYVY as default 
 Set and return a format same as sink pad 
  vfe_try_compose - Handle try compose selection by pad subdev method
  @line: VFE line
  @cfg: V4L2 subdev pad configuration
  @rect: pointer to v4l2 rect structure
  @which: wanted subdev format
  vfe_try_crop - Handle try crop selection by pad subdev method
  @line: VFE line
  @cfg: V4L2 subdev pad configuration
  @rect: pointer to v4l2 rect structure
  @which: wanted subdev format
 wm in line based mode writes multiple of 16 horizontally 
  vfe_enum_mbus_code - Handle pixel format enumeration
  @sd: VFE V4L2 subdevice
  @cfg: V4L2 subdev pad configuration
  @code: pointer to v4l2_subdev_mbus_code_enum structure
  return -EINVAL or zero on success
  vfe_enum_frame_size - Handle frame size enumeration
  @sd: VFE V4L2 subdevice
  @cfg: V4L2 subdev pad configuration
  @fse: pointer to v4l2_subdev_frame_size_enum structure
  Return -EINVAL or zero on success
  vfe_get_format - Handle get format by pads subdev method
  @sd: VFE V4L2 subdevice
  @cfg: V4L2 subdev pad configuration
  @fmt: pointer to v4l2 subdev format structure
  Return -EINVAL or zero on success
  vfe_set_format - Handle set format by pads subdev method
  @sd: VFE V4L2 subdevice
  @cfg: V4L2 subdev pad configuration
  @fmt: pointer to v4l2 subdev format structure
  Return -EINVAL or zero on success
 Propagate the format from sink to source 
 Reset sink pad compose selection 
  vfe_get_selection - Handle get selection by pads subdev method
  @sd: VFE V4L2 subdevice
  @cfg: V4L2 subdev pad configuration
  @sel: pointer to v4l2 subdev selection structure
  Return -EINVAL or zero on success
  vfe_set_selection - Handle set selection by pads subdev method
  @sd: VFE V4L2 subdevice
  @cfg: V4L2 subdev pad configuration
  @sel: pointer to v4l2 subdev selection structure
  Return -EINVAL or zero on success
 Reset source crop selection 
 Reset source pad format width and height 
  vfe_init_formats - Initialize formats on all pads
  @sd: VFE V4L2 subdevice
  @fh: V4L2 subdev file handle
  Initialize all pad formats with default values.
  Return 0 on success or a negative error code otherwise
  msm_vfe_subdev_init - Initialize VFE device structure and resources
  @vfe: VFE device
  @res: VFE module resources table
  Return 0 on success or a negative error code otherwise
 Memory 
 Interrupt 
 Clocks 
  msm_vfe_get_vfe_id - Get VFE HW module id
  @entity: Pointer to VFE media entity structure
  @id: Return CSID HW module id here
  msm_vfe_get_vfe_line_id - Get VFE line id by media entity
  @entity: Pointer to VFE media entity structure
  @id: Return VFE line id here
  vfe_link_setup - Setup VFE connections
  @entity: Pointer to media entity structure
  @local: Pointer to local pad
  @remote: Pointer to remote pad
  @flags: Link flags
  Return 0 on success
  msm_vfe_register_entities - Register subdev node for VFE module
  @vfe: VFE device
  @v4l2_dev: V4L2 device
  Initialize and register a subdev node for the VFE module. Then
  call msm_video_register() to register the video device node which
  will be connected to this subdev node. Then actually create the
  media link between them.
  Return 0 on success or a negative error code otherwise
  msm_vfe_unregister_entities - Unregister VFE module subdev node
  @vfe: VFE device
 SPDX-License-Identifier: GPL-2.0
  camss-vfe-4-8.c
  Qualcomm MSM Camera Subsystem - VFE (Video Front End) Module v4.8
  Copyright (c) 2013-2015, The Linux Foundation. All rights reserved.
  Copyright (C) 2015-2021 Linaro Ltd.
 Enforce barrier between IRQ mask setup and global reset 
 Enforce barrier between any outstanding register write 
 Use barrier to make sure bus reload is issued before anything else 
 Enforce barrier between line update and commit 
 Make sure register update is issued before further reg writes 
 empty 
 Make sure camif command is issued written before it is changed again 
  vfe_isr - VFE module interrupt handler
  @irq: Interrupt line
  @dev: VFE device
  Return IRQ_HANDLED on success
 On VFE4.8 the ub-size is the same on both instances 
 The WM must be enabled before sending other commands 
 Enforce barrier between local & global IRQ clear 
  vfe_pm_domain_off - Disable power domains specific to this VFE.
  @vfe: VFE Device
  vfe_pm_domain_on - Enable power domains specific to this VFE.
  @vfe: VFE Device
 SPDX-License-Identifier: GPL-2.0
  camss-csiphy.c
  Qualcomm MSM Camera Subsystem - CSIPHY Module
  Copyright (c) 2011-2015, The Linux Foundation. All rights reserved.
  Copyright (C) 2016-2018 Linaro Ltd.
  csiphy_get_bpp - map media bus format to bits per pixel
  @formats: supported media bus formats array
  @nformats: size of @formats array
  @code: media bus format code
  Return number of bits per pixel
  csiphy_set_clock_rates - Calculate and set clock rates on CSIPHY module
  @csiphy: CSIPHY device
 if sensor pixel clock is not available 
 set highest possible CSIPHY clock rate 
  csiphy_set_power - Power onoff CSIPHY module
  @sd: CSIPHY V4L2 subdevice
  @on: Requested power state
  Return 0 on success or a negative error code otherwise
  csiphy_get_lane_mask - Calculate CSI2 lane mask configuration parameter
  @lane_cfg - CSI2 lane configuration
  Return lane mask
  csiphy_stream_on - Enable streaming on CSIPHY module
  @csiphy: CSIPHY device
  Helper function to enable streaming on CSIPHY module.
  Main configuration of CSIPHY module is also done here.
  Return 0 on success or a negative error code otherwise
 Enforce reg write ordering between clk mux & lane enabling 
  csiphy_stream_off - Disable streaming on CSIPHY module
  @csiphy: CSIPHY device
  Helper function to disable streaming on CSIPHY module
  csiphy_set_stream - Enabledisable streaming on CSIPHY module
  @sd: CSIPHY V4L2 subdevice
  @enable: Requested streaming state
  Return 0 on success or a negative error code otherwise
  __csiphy_get_format - Get pointer to format structure
  @csiphy: CSIPHY device
  @cfg: V4L2 subdev pad configuration
  @pad: pad from which format is requested
  @which: TRY or ACTIVE format
  Return pointer to TRY or ACTIVE format structure
  csiphy_try_format - Handle try format by pad subdev method
  @csiphy: CSIPHY device
  @cfg: V4L2 subdev pad configuration
  @pad: pad on which format is requested
  @fmt: pointer to v4l2 format structure
  @which: wanted subdev format
 Set format on sink pad 
 If not found, use UYVY as default 
 Set and return a format same as sink pad 
  csiphy_enum_mbus_code - Handle pixel format enumeration
  @sd: CSIPHY V4L2 subdevice
  @cfg: V4L2 subdev pad configuration
  @code: pointer to v4l2_subdev_mbus_code_enum structure
  return -EINVAL or zero on success
  csiphy_enum_frame_size - Handle frame size enumeration
  @sd: CSIPHY V4L2 subdevice
  @cfg: V4L2 subdev pad configuration
  @fse: pointer to v4l2_subdev_frame_size_enum structure
  return -EINVAL or zero on success
  csiphy_get_format - Handle get format by pads subdev method
  @sd: CSIPHY V4L2 subdevice
  @cfg: V4L2 subdev pad configuration
  @fmt: pointer to v4l2 subdev format structure
  Return -EINVAL or zero on success
  csiphy_set_format - Handle set format by pads subdev method
  @sd: CSIPHY V4L2 subdevice
  @cfg: V4L2 subdev pad configuration
  @fmt: pointer to v4l2 subdev format structure
  Return -EINVAL or zero on success
 Propagate the format from sink to source 
  csiphy_init_formats - Initialize formats on all pads
  @sd: CSIPHY V4L2 subdevice
  @fh: V4L2 subdev file handle
  Initialize all pad formats with default values.
  Return 0 on success or a negative error code otherwise
  msm_csiphy_subdev_init - Initialize CSIPHY device structure and resources
  @csiphy: CSIPHY device
  @res: CSIPHY module resources table
  @id: CSIPHY module id
  Return 0 on success or a negative error code otherwise
 Memory 
 Interrupt 
 Clocks 
  csiphy_link_setup - Setup CSIPHY connections
  @entity: Pointer to media entity structure
  @local: Pointer to local pad
  @remote: Pointer to remote pad
  @flags: Link flags
  Rreturn 0 on success
  msm_csiphy_register_entity - Register subdev node for CSIPHY module
  @csiphy: CSIPHY device
  @v4l2_dev: V4L2 device
  Return 0 on success or a negative error code otherwise
  msm_csiphy_unregister_entity - Unregister CSIPHY module subdev node
  @csiphy: CSIPHY device
 SPDX-License-Identifier: GPL-2.0
  camss-csiphy-3ph-1-0.c
  Qualcomm MSM Camera Subsystem - CSIPHY Module 3phase v1.0
  Copyright (c) 2011-2015, The Linux Foundation. All rights reserved.
  Copyright (C) 2016-2018 Linaro Ltd.
  csiphy_reset - Perform software reset on CSIPHY module
  @csiphy: CSIPHY device
  csiphy_settle_cnt_calc - Calculate settle count value
  Helper function to calculate settle count value. This is
  based on the CSI2 T_hs_settle parameter which in turn
  is calculated based on the CSI2 transmitter link frequency.
  Return settle count value or 0 if the CSI2 link frequency
  is not available
 ps 
 ps 
 ps 
 ps 
 SPDX-License-Identifier: GPL-2.0
  camss-vfe-4-7.c
  Qualcomm MSM Camera Subsystem - VFE (Video Front End) Module v4.7
  Copyright (c) 2013-2015, The Linux Foundation. All rights reserved.
  Copyright (C) 2015-2018 Linaro Ltd.
 Enforce barrier between IRQ mask setup and global reset 
 Enforce barrier between any outstanding register write 
 Use barrier to make sure bus reload is issued before anything else 
 Enforce barrier between line update and commit 
 Make sure register update is issued before further reg writes 
 empty 
 Make sure camif command is issued written before it is changed again 
  vfe_isr - VFE module interrupt handler
  @irq: Interrupt line
  @dev: VFE device
  Return IRQ_HANDLED on success
 Enforce barrier between local & global IRQ clear 
  vfe_pm_domain_off - Disable power domains specific to this VFE.
  @vfe: VFE Device
  vfe_pm_domain_on - Enable power domains specific to this VFE.
  @vfe: VFE Device
 SPDX-License-Identifier: GPL-2.0
  camss-vfe-170.c
  Qualcomm MSM Camera Subsystem - VFE (Video Front End) Module v170
  Copyright (C) 2020-2021 Linaro Ltd.
 WM_CLIENT_BUF_DONE defined for buffers 0:19 
 Make sure IRQ mask has been written before resetting 
Set Debug Registers
 BUS_WM_INPUT_IF_ADDR_SYNC_FRAME_HEADER 
 no clock gating at bus input 
 if addr_no_sync has default value then config the addr no sync reg 
 XXX 1 for PLAIN8?
 Configure stride for RDIs 
 Enable WM 
 Disable WM 
 Enforce ordering between previous reg writes and reg update 
 Enforce ordering between reg update and subsequent reg writes 
 Enforce ordering between IRQ Clear and Global IRQ Clear 
  vfe_isr - VFE module interrupt handler
  @irq: Interrupt line
  @dev: VFE device
  Return IRQ_HANDLED on success
 Enforce ordering between IRQ reading and interpretation 
  vfe_halt - Trigger halt on VFE module and wait to complete
  @vfe: VFE device
  Return 0 on success or a negative error code otherwise
 Max frame skip is 29 frames 
  vfe_enable - Enable streaming on VFE line
  @line: VFE line
  Return 0 on success or a negative error code otherwise
  vfe_disable - Disable streaming on VFE line
  @line: VFE line
  Return 0 on success or a negative error code otherwise
  vfe_isr_sof - Process start of frame interrupt
  @vfe: VFE Device
  @line_id: VFE line
 nop 
  vfe_isr_reg_update - Process reg update interrupt
  @vfe: VFE Device
  @line_id: VFE line
  vfe_isr_wm_done - Process write master done interrupt
  @vfe: VFE Device
  @wm: Write master id
  vfe_pm_domain_off - Disable power domains specific to this VFE.
  @vfe: VFE Device
 nop 
  vfe_pm_domain_on - Enable power domains specific to this VFE.
  @vfe: VFE Device
  vfe_queue_buffer - Add empty buffer
  @vid: Video device structure
  @buf: Buffer to be enqueued
  Add an empty buffer - depending on the current number of buffers it will be
  put in pending buffer queue or directly given to the hardware to be filled.
  Return 0 on success or a negative error code otherwise
 SPDX-License-Identifier: GPL-2.0
  camss.c
  Qualcomm MSM Camera Subsystem - Core
  Copyright (c) 2015, The Linux Foundation. All rights reserved.
  Copyright (C) 2015-2018 Linaro Ltd.
 CSIPHY0 
 CSIPHY1 
 CSID0 
 CSID1 
 ISPIF 
 VFE0 
 CSIPHY0 
 CSIPHY1 
 CSIPHY2 
 CSID0 
 CSID1 
 CSID2 
 CSID3 
 ISPIF 
 VFE0 
 VFE1 
 CSIPHY0 
 CSIPHY1 
 CSIPHY2 
 CSID0 
 CSID1 
 CSID2 
 CSID3 
 ISPIF 
 VFE0 
 VFE1 
 CSIPHY0 
 CSIPHY1 
 CSIPHY2 
 CSIPHY3 
 CSID0 
 CSID1 
 CSID2 
 VFE0 
 VFE1 
 VFE-lite 
  camss_add_clock_margin - Add margin to clock frequency rate
  @rate: Clock frequency rate
  When making calculations with physical clock frequency values
  some safety margin must be added. Add it.
  camss_enable_clocks - Enable multiple clocks
  @nclocks: Number of clocks in clock array
  @clock: Clock array
  @dev: Device
  Return 0 on success or a negative error code otherwise
  camss_disable_clocks - Disable multiple clocks
  @nclocks: Number of clocks in clock array
  @clock: Clock array
  camss_find_sensor - Find a linked media entity which represents a sensor
  @entity: Media entity to start searching from
  Return a pointer to sensor media entity or NULL if not found
  camss_get_link_freq - Get link frequency from sensor
  @entity: Media entity in the current pipeline
  @bpp: Number of bits per pixel for the current format
  @lanes: Number of lanes in the link to the sensor
  Return link frequency on success or a negative error code otherwise
  camss_get_pixel_clock - Get pixel clock rate from sensor
  @entity: Media entity in the current pipeline
  @pixel_clock: Received pixel clock value
  Return 0 on success or a negative error code otherwise
  camss_of_parse_endpoint_node - Parse port endpoint node
  @dev: Device
  @node: Device node to be parsed
  @csd: Parsed data from port endpoint node
  Return 0 on success or a negative error code on failure
  camss_of_parse_ports - Parse ports node
  @dev: Device
  @notifier: v4l2_device notifier data
  Return number of "port" nodes found in "ports" node
  camss_init_subdevices - Initialize subdev structures and resources
  @camss: CAMSS device
  Return 0 on success or a negative error code on failure
 Titan VFEs don't have an ISPIF  
  camss_register_entities - Register subdev nodes and create links
  @camss: CAMSS device
  Return 0 on success or a negative error code on failure
  camss_unregister_entities - Unregister subdev nodes
  @camss: CAMSS device
  Return 0 on success or a negative error code on failure
  camss_probe - Probe CAMSS platform device
  @pdev: Pointer to CAMSS platform device
  Return 0 on success or a negative error code on failure
  camss_remove - Remove CAMSS platform device
  @pdev: Pointer to CAMSS platform device
  Always returns 0.
 SPDX-License-Identifier: GPL-2.0
  camss-csid-4-1.c
  Qualcomm MSM Camera Subsystem - CSID (CSI Decoder) Module
  Copyright (C) 2020 Linaro Ltd.
 Virtual Channel 0 
 id of Virtual Channel and Data Type set 
 Config Test Generator 
 31:24 V blank, 23:13 H blank, 3:2 num of active DT 
 1:0 VC 
 28:16 bytes per lines, 12:0 num of lines 
 5:0 data type 
 2:0 output test pattern 
 Config LUT 
 SPDX-License-Identifier: GPL-2.0
  camss-csid-4-7.c
  Qualcomm MSM Camera Subsystem - CSID (CSI Decoder) Module
  Copyright (C) 2020 Linaro Ltd.
 The CSID 2 IP-block is different from the others,
  and is of a bare-bones Lite version, with no PIX
  interface support. As a result of that it has an
  alternate register layout.
 Virtual Channel 0 
 Config Test Generator 
 configure one DT, infinite frames 
 CSID_TIMESTAMP_STB_POST_IRQ 
 csi2_vc_mode_shift_val ?
 error irqs start at BIT(11) 
 RDI irq 
  csid_hw_version - CSID hardware version query
  @csid: CSID device
  Return HW version or error
  csid_isr - CSID module interrupt service routine
  @irq: Interrupt line
  @dev: CSID device
  Return IRQ_HANDLED on success
  csid_reset - Trigger reset on CSID module and wait to complete
  @csid: CSID device
  Return 0 on success or a negative error code otherwise
 preserve registers 
 SPDX-License-Identifier: GPL-2.0
  camss-csiphy-2ph-1-0.c
  Qualcomm MSM Camera Subsystem - CSIPHY Module 2phase v1.0
  Copyright (c) 2011-2015, The Linux Foundation. All rights reserved.
  Copyright (C) 2016-2018 Linaro Ltd.
  csiphy_reset - Perform software reset on CSIPHY module
  @csiphy: CSIPHY device
  csiphy_settle_cnt_calc - Calculate settle count value
  Helper function to calculate settle count value. This is
  based on the CSI2 T_hs_settle parameter which in turn
  is calculated based on the CSI2 transmitter link frequency.
  Return settle count value or 0 if the CSI2 link frequency
  is not available
 ps 
 ps 
 ps 
 ps 
 ps 
  csiphy_isr - CSIPHY module interrupt handler
  @irq: Interrupt line
  @dev: CSIPHY device
  Return IRQ_HANDLED on success
 SPDX-License-Identifier: GPL-2.0
  camss-vfe-4-1.c
  Qualcomm MSM Camera Subsystem - VFE (Video Front End) Module v4.1
  Copyright (c) 2013-2015, The Linux Foundation. All rights reserved.
  Copyright (C) 2015-2018 Linaro Ltd.
 On current devices output->wm_num is always <= 2 
 empty 
 empty 
  vfe_isr - VFE module interrupt handler
  @irq: Interrupt line
  @dev: VFE device
  Return IRQ_HANDLED on success
  vfe_pm_domain_off - Disable power domains specific to this VFE.
  @vfe: VFE Device
 nop 
  vfe_pm_domain_on - Enable power domains specific to this VFE.
  @vfe: VFE Device
 SPDX-License-Identifier: GPL-2.0
  camss-csid-4-7.c
  Qualcomm MSM Camera Subsystem - CSID (CSI Decoder) Module
  Copyright (C) 2020 Linaro Ltd.
 Virtual Channel 0 
 id of Virtual Channel and Data Type set 
 Config Test Generator 
 31:24 V blank, 23:13 H blank, 3:2 num of active DT 
 1:0 VC 
 28:16 bytes per lines, 12:0 num of lines 
 5:0 data type 
 2:0 output test pattern 
 Config LUT 
  isr - CSID module interrupt service routine
  @irq: Interrupt line
  @dev: CSID device
  Return IRQ_HANDLED on success
  csid_reset - Trigger reset on CSID module and wait to complete
  @csid: CSID device
  Return 0 on success or a negative error code otherwise
 SPDX-License-Identifier: GPL-2.0
  camss-ispif.c
  Qualcomm MSM Camera Subsystem - ISPIF (ISP Interface) Module
  Copyright (c) 2013-2015, The Linux Foundation. All rights reserved.
  Copyright (C) 2015-2018 Linaro Ltd.
 PACK_CFG registers are 8x96 only 
  ispif_isr_8x96 - ISPIF module interrupt handler for 8x96
  @irq: Interrupt line
  @dev: ISPIF device
  Return IRQ_HANDLED on success
  ispif_isr_8x16 - ISPIF module interrupt handler for 8x16
  @irq: Interrupt line
  @dev: ISPIF device
  Return IRQ_HANDLED on success
  ispif_reset - Trigger reset on ISPIF module and wait to complete
  @ispif: ISPIF device
  Return 0 on success or a negative error code otherwise
  ispif_set_power - Power onoff ISPIF module
  @sd: ISPIF V4L2 subdevice
  @on: Requested power state
  Return 0 on success or a negative error code otherwise
 Power is already on 
  ispif_select_clk_mux - Select clock for PIXRDI interface
  @ispif: ISPIF device
  @intf: VFE interface
  @csid: CSID HW module id
  @vfe: VFE HW module id
  @enable: enable or disable the selected clock
  ispif_validate_intf_status - Validate current status of PIXRDI interface
  @ispif: ISPIF device
  @intf: VFE interface
  @vfe: VFE HW module id
  Return 0 when interface is idle or -EBUSY otherwise
  ispif_wait_for_stop - Wait for PIXRDI interface to stop
  @ispif: ISPIF device
  @intf: VFE interface
  @vfe: VFE HW module id
  Return 0 on success or a negative error code otherwise
  ispif_select_csid - Select CSID HW module for input from
  @ispif: ISPIF device
  @intf: VFE interface
  @csid: CSID HW module id
  @vfe: VFE HW module id
  @enable: enable or disable the selected input
  ispif_select_cid - Enabledisable desired CID
  @ispif: ISPIF device
  @intf: VFE interface
  @cid: desired CID to enabledisable
  @vfe: VFE HW module id
  @enable: enable or disable the desired CID
  ispif_config_irq - Enabledisable interrupts for PIXRDI interface
  @ispif: ISPIF device
  @intf: VFE interface
  @vfe: VFE HW module id
  @enable: enable or disable
  ispif_config_pack - Config packing for PRDI mode
  @ispif: ISPIF device
  @code: media bus format code
  @intf: VFE interface
  @cid: desired CID to handle
  @vfe: VFE HW module id
  @enable: enable or disable
  ispif_set_intf_cmd - Set command to enabledisable interface
  @ispif: ISPIF device
  @cmd: interface command
  @intf: VFE interface
  @vfe: VFE HW module id
  @vc: virtual channel
  ispif_set_stream - Enabledisable streaming on ISPIF module
  @sd: ISPIF V4L2 subdevice
  @enable: Requested streaming state
  Main configuration of ISPIF module is also done here.
  Return 0 on success or a negative error code otherwise
 Virtual Channel 0 
 id of Virtual Channel and Data Type set 
 Config 
  __ispif_get_format - Get pointer to format structure
  @ispif: ISPIF line
  @cfg: V4L2 subdev pad configuration
  @pad: pad from which format is requested
  @which: TRY or ACTIVE format
  Return pointer to TRY or ACTIVE format structure
  ispif_try_format - Handle try format by pad subdev method
  @ispif: ISPIF line
  @cfg: V4L2 subdev pad configuration
  @pad: pad on which format is requested
  @fmt: pointer to v4l2 format structure
  @which: wanted subdev format
 Set format on sink pad 
 If not found, use UYVY as default 
 Set and return a format same as sink pad 
  ispif_enum_mbus_code - Handle pixel format enumeration
  @sd: ISPIF V4L2 subdevice
  @cfg: V4L2 subdev pad configuration
  @code: pointer to v4l2_subdev_mbus_code_enum structure
  return -EINVAL or zero on success
  ispif_enum_frame_size - Handle frame size enumeration
  @sd: ISPIF V4L2 subdevice
  @cfg: V4L2 subdev pad configuration
  @fse: pointer to v4l2_subdev_frame_size_enum structure
  return -EINVAL or zero on success
  ispif_get_format - Handle get format by pads subdev method
  @sd: ISPIF V4L2 subdevice
  @cfg: V4L2 subdev pad configuration
  @fmt: pointer to v4l2 subdev format structure
  Return -EINVAL or zero on success
  ispif_set_format - Handle set format by pads subdev method
  @sd: ISPIF V4L2 subdevice
  @cfg: V4L2 subdev pad configuration
  @fmt: pointer to v4l2 subdev format structure
  Return -EINVAL or zero on success
 Propagate the format from sink to source 
  ispif_init_formats - Initialize formats on all pads
  @sd: ISPIF V4L2 subdevice
  @fh: V4L2 subdev file handle
  Initialize all pad formats with default values.
  Return 0 on success or a negative error code otherwise
  msm_ispif_subdev_init - Initialize ISPIF device structure and resources
  @ispif: ISPIF device
  @res: ISPIF module resources table
  Return 0 on success or a negative error code otherwise
 Number of ISPIF lines - same as number of CSID hardware modules 
 Memory 
 Interrupt 
 Clocks 
  ispif_get_intf - Get ISPIF interface to use by VFE line id
  @line_id: VFE line id that the ISPIF line is connected to
  Return ISPIF interface to use
  ispif_link_setup - Setup ISPIF connections
  @entity: Pointer to media entity structure
  @local: Pointer to local pad
  @remote: Pointer to remote pad
  @flags: Link flags
  Return 0 on success
 MEDIA_PAD_FL_SOURCE 
  msm_ispif_register_entities - Register subdev node for ISPIF module
  @ispif: ISPIF device
  @v4l2_dev: V4L2 device
  Return 0 on success or a negative error code otherwise
  msm_ispif_unregister_entities - Unregister ISPIF module subdev node
  @ispif: ISPIF device
 SPDX-License-Identifier: GPL-2.0
  camss-vfe-gen1.c
  Qualcomm MSM Camera Subsystem - VFE Common functionality for Gen 1 versions of hw (4.1, 4.7..)
  Copyright (C) 2020 Linaro Ltd.
 Max number of frame drop updates per frame 
  vfe_gen1_disable - Disable streaming on VFE line
  @line: VFE line
  Return 0 on success or a negative error code otherwise
 We need to toggle update period to be valid on next frame 
 Max frame skip is 29 frames 
  vfe_isr_halt_ack - Process halt ack
  @vfe: VFE Device
  vfe_isr_sof - Process start of frame interrupt
  @vfe: VFE Device
  @line_id: VFE line
  vfe_isr_reg_update - Process reg update interrupt
  @vfe: VFE Device
  @line_id: VFE line
 Release last buffer when hw is idle 
 Buffers received in stopping state are queued in 
 dma pending queue, start next capture here 
  vfe_isr_wm_done - Process write master done interrupt
  @vfe: VFE Device
  @wm: Write master id
 Get next buffer 
 No next buffer - set same address 
  vfe_queue_buffer - Add empty buffer
  @vid: Video device structure
  @buf: Buffer to be enqueued
  Add an empty buffer - depending on the current number of buffers it will be
  put in pending buffer queue or directly given to the hardware to be filled.
  Return 0 on success or a negative error code otherwise
 SPDX-License-Identifier: GPL-2.0+
  Driver for Renesas R-Car VIN
  Copyright (C) 2016 Renesas Electronics Corp.
  Copyright (C) 2011-2013 Renesas Solutions Corp.
  Copyright (C) 2013 Cogent Embedded, Inc., <source@cogentembedded.com>
  Copyright (C) 2008 Magnus Damm
  Based on the soc-camera rcar_vin driver
  The companion CSI-2 receiver driver (rcar-csi2) is known
  and we know it has one source pad (pad 0) and four sink
  pads (pad 1-4). So to translate a pad on the remote
  CSI-2 receiver tofrom the VIN internal channel number simply
  subtractadd one from the padchannel number.
  Not all VINs are created equal, master VINs control the
  routing for other VIN's. We can figure out which VIN is
  master by looking at a VINs id.
 -----------------------------------------------------------------------------
  Gen3 Group Allocator
 FIXME:  This should if we find a system that supports more
  than one group for the whole system be replaced with a linked
  list of groups. And eventually all of this should be replaced
  with a global device allocator API.
  But for now this works as on all supported systems there will
  be only one group for all instances.
 Count number of VINs in the system 
 Make sure VIN id is present and sane 
 Join or create a VIN group 
 Add VIN to group 
 group lock should be held when calling this function. 
 Register all video nodes for the group. 
 If not all VIN's are registered don't register the notifier. 
	
	  Some subdevices may overlap but the parser function can handle it and
	  each subdevice will only be registered once with the group notifier.
 -----------------------------------------------------------------------------
  Controls
 The VIN directly deals with alpha component. 
 For the non-MC mode add controls from the subdevice. 
 -----------------------------------------------------------------------------
  Async notifier
 -----------------------------------------------------------------------------
  Parallel async notifier
 The vin lock should be held when calling the subdevice attach and detach 
 Find source and sink pad of remote subdevice 
 Find compatible subdevices mbus format 
 Read tvnorms 
 Read standard 
 Add the controls 
 If we're running with media-controller, link the subdevs. 
 -----------------------------------------------------------------------------
  CSI-2
  Link setup for the links between a VIN and a CSI-2 receiver is a bit
  complex. The reason for this is that the register controlling routing
  is not present in each VIN instance. There are special VINs which
  control routing for themselves and other VINs. There are not many
  different possible links combinations that can be enabled at the same
  time, therefor all already enabled links which are controlled by a
  master VIN need to be taken into account when making the decision
  if a new link can be enabled or not.
  1. Find out which VIN the link the user tries to enable is connected to.
  2. Lookup which master VIN controls the links for this VIN.
  3. Start with a bitmask with all bits set.
  4. For each previously enabled link from the master VIN bitwise AND its
     route mask (see documentation for mask in struct rvin_group_route)
     with the bitmask.
  5. Bitwise AND the mask for the link the user tries to enable to the bitmask.
  6. If the bitmask is not empty at this point the new link can be enabled
     while keeping all previous links enabled. Update the CHSEL value of the
     master VIN and inform the user that the link could be enabled.
  Please note that no link can be enabled if any VIN in the group is
  currently open.
 Only care about link enablement for VIN nodes. 
	
	  Don't allow link changes if any entity in the graph is
	  streaming, modifying the CHSEL register fields can disrupt
	  running streams.
 Find the master VIN that controls the routes. 
 Build a mask for already enabled links. 
 Get remote CSI-2, if any. 
 Add the new link to the existing mask and check if it works. 
		
		  Make sure the source entity subdevice is registered as
		  a parallel input of one of the enabled VINs if it is not
		  one of the CSI-2 subdevices.
		 
		  No hardware configuration required for parallel inputs,
		  we can return here.
 New valid CHSEL found, set the new value. 
 Create all media device links between VINs and CSI-2's. 
 Check that VIN is part of the group. 
 Check that VIN' master is part of the group. 
 Check that CSI-2 is part of the group. 
 Skip if link already exists. 
 It's OK to not have a parallel subdevice. 
 -----------------------------------------------------------------------------
  ISP
 Create all media device links between VINs and ISP's. 
 Check that ISP is part of the group. 
 Skip if link already exists. 
 -----------------------------------------------------------------------------
  Suspend  Resume
	
	  Restore group master CHSEL setting.
	 
	  This needs to be done by every VIN resuming not only the master
	  as we don't know if and in which order the master VINs will
	  be resumed.
 -----------------------------------------------------------------------------
  Platform Device Driver
 Sentinel  }
 Sentinel  }
 Sentinel  }
 Sentinel  }
 Sentinel  }
 Sentinel  }
 Sentinel  }
 Sentinel  }
 Sentinel  }
 Sentinel  },
 Sentinel  }
	
	  Special care is needed on r8a7795 ES1.x since it
	  uses different routing than r8a7795 ES2.0.
 SPDX-License-Identifier: GPL-2.0
  Driver for Renesas R-Car MIPI CSI-2 Receiver
  Copyright (C) 2018 Renesas Electronics Corp.
 Register offsets and bits 
 Control Timing Select 
 Software Reset 
 PHY Operation Control 
 Checksum Control 
  Channel Data Type Select
  VCDT[0-15]:  Channel 0 VCDT[16-31]:  Channel 1
  VCDT2[0-15]: Channel 2 VCDT2[16-31]: Channel 3
 Frame Data Type Select 
 Field Detection Control 
 Automatic Standby Control 
 Long Data Type Setting 0 
 Long Data Type Setting 1 
 Interrupt Enable 
 Interrupt Source Mask 
 Interrupt Status Monitor 
 Interrupt Error Status Monitor 
 Short Packet Data 
 Short Packet Count 
 LINK Operation Control 
 Lane Swap 
 PHY Test Interface Write Register 
 sentinel  },
 sentinel  },
 sentinel  },
 PHY Test Interface Clear 
 PHY Frequency Control 
 sentinel  },
 sentinel  },
 sentinel  },
 PHY ESC Error Monitor 
 PHY Clock Lane Monitor 
 PHY Data Lane Monitor 
 CSI0CLK Frequency Configuration Preset Register 
 Protects mf and stream_count. 
 Wait for the clock and data lanes to enter LP-11 state. 
 Read the pixel rate control from remote. 
	
	  Calculate the phypll in mbps.
	  link_freq = (pixel_rate  bits_per_sample)  (2  nr_of_lanes)
	  bps = link_freq  2
 Code is validated in set_fmt. 
	
	  Enable all supported CSI-2 channels with virtual channel and
	  data type matching.
	 
	  NOTE: It's not possible to get individual datatype for each
	        source virtual channel. Once this is possible in V4L2
	        it should be used here.
 Store in correct reg and offset. 
	
	  Get the number of active data lanes inspecting the remote mbus
	  configuration.
 Enable interrupts. 
 Init 
 Configure 
 Lanes are zero indexed. 
 Start 
 Run post PHY start initialization, if needed. 
 Clear Ultra Low Power interrupt. 
 -----------------------------------------------------------------------------
  Async handling and registration of subdevices and links.
 Only port 0 endpoint 0 is valid. 
 Check for valid lane number. 
 -----------------------------------------------------------------------------
  PHTW initialization sequences.
  NOTE: Magic values are from the datasheet and lack documentation.
 Wait for DWEN and CWEN to be cleared by hardware. 
 sentinel  },
 sentinel  },
 sentinel  },
 In case of 1500Mbps or less 
 sentinel  },
 sentinel  },
 In case of 1500Mbps or less 
 sentinel  },
 sentinel  },
 -----------------------------------------------------------------------------
  Platform Device Driver.
 sentinel  },
 sentinel  },
	
	  The different ES versions of r8a7795 (H3) behave differently but
	  share the same compatible string.
 SPDX-License-Identifier: GPL-2.0+
  Driver for Renesas R-Car VIN
  Copyright (C) 2016 Renesas Electronics Corp.
  Copyright (C) 2011-2013 Renesas Solutions Corp.
  Copyright (C) 2013 Cogent Embedded, Inc., <source@cogentembedded.com>
  Copyright (C) 2008 Magnus Damm
  Based on the soc-camera rcar_vin driver
 -----------------------------------------------------------------------------
  HW Functions
 Register offsets for R-Car VIN 
 Video n Main Control Register 
 Video n Module Status Register 
 Video n Frame Capture Register 
 Video n Start Line Pre-Clip Register 
 Video n End Line Pre-Clip Register 
 Video n Start Pixel Pre-Clip Register 
 Video n End Pixel Pre-Clip Register 
 Video n Image Stride Register 
 Video n Memory Base m Register 
 Video n Interrupt Enable Register 
 Video n Interrupt Status Register 
 Video n Scanline Interrupt Register 
 Video n Memory Transfer Control Register 
 Video n Data Mode Register 
 Video n Data Mode Register 2 
 Video n UV Address Offset Register 
 Register offsets specific for Gen2 
 Video n Start Line Post-Clip Register 
 Video n End Line Post-Clip Register 
 Video n Start Pixel Post-Clip Register 
 Video n End Pixel Post-Clip Register 
 Video n Y Scale Register 
 Video n X Scale Register 
 Video n Coefficient Set C1A Register 
 Video n Coefficient Set C1B Register 
 Video n Coefficient Set C1C Register 
 Video n Coefficient Set C2A Register 
 Video n Coefficient Set C2B Register 
 Video n Coefficient Set C2C Register 
 Video n Coefficient Set C3A Register 
 Video n Coefficient Set C3B Register 
 Video n Coefficient Set C3C Register 
 Video n Coefficient Set C4A Register 
 Video n Coefficient Set C4B Register 
 Video n Coefficient Set C4C Register 
 Video n Coefficient Set C5A Register 
 Video n Coefficient Set C5B Register 
 Video n Coefficient Set C5C Register 
 Video n Coefficient Set C6A Register 
 Video n Coefficient Set C6B Register 
 Video n Coefficient Set C6C Register 
 Video n Coefficient Set C7A Register 
 Video n Coefficient Set C7B Register 
 Video n Coefficient Set C7C Register 
 Video n Coefficient Set C8A Register 
 Video n Coefficient Set C8B Register 
 Video n Coefficient Set C8C Register 
 Register offsets specific for Gen3 
 Video n CSI2 Interface Mode Register 
 Register bit fields for R-Car VIN 
 Video n Main Control Register bits 
 Gen3 specific 
 Gen3 specific 
 Video n Module Status Register bits 
 Video n Frame Capture Register bits 
 Video n Interrupt Enable Register bits 
 Video n Data Mode Register bits 
 Video n Data Mode Register 2 bits 
 Video n CSI2 Interface Mode Register (Gen3) 
 -----------------------------------------------------------------------------
  Crop and Scaling Gen2
 Look for suitable coefficient values 
 Use previous value if its XS value is closer 
 Set coefficient registers 
 Set scaling coefficient 
 Horizontal upscaling is up to double size 
 Horizontal upscaling is done out by scaling down from double size 
 Set StartEnd PixelLine Post-Clip 
 Set StartEnd PixelLine Pre-Clip 
 TODO: Add support for the UDS scaler. 
	 For RAW8 format bpp is 1, but the hardware process RAW8
	  format in 2 pixel unit hence configure VNIS_REG as stride  2.
 -----------------------------------------------------------------------------
  Hardware setup
 Default to TB 
 Use BT if video standard can be read and is 60 Hz format 
	
	  Input interface
 BT.601BT.1358 16bit YCbCr422 
 BT.656 8bit YCbCr422 or BT.601 8bit YCbCr422 
 BT.656 10bit YCbCr422 or BT.601 10bit YCbCr422 
 Enable VSYNC Field Toggle mode after one VSYNC input 
 Hsync Signal Polarity Select 
 Vsync Signal Polarity Select 
 Data Enable Polarity Select 
	
	  Output format
 Note: not supported on M1 
 Always update on field change 
 If input and output use the same colorspace, use bypass mode 
 Select between CSI-2 and parallel input 
 Progressive or interlaced mode 
 Ack interrupts 
 Enable interrupts 
 Start capturing 
 Enable module 
 If FS is set it is an Even field. 
	
	  There is no HW support for composition do the beast we can
	  by modifying the buffer offset
	
	  The address needs to be 128 bytes aligned. Driver should never accept
	  settings that do not satisfy this in the first place...
  Moves a buffer from the queue to the HW slot. If no buffer is
  available use the scratch buffer. The scratch buffer is never
  returned to userspace, its only function is to enable the capture
  loop to keep running.
 A already populated slot shall never be overwritten. 
 Keep track of buffer we give to HW 
 Setup DMA 
 Continuous Frame Capture Mode 
 Set continuous & single transfer off 
 Disable module 
 -----------------------------------------------------------------------------
  DMA Functions
 Nothing to do if capture status is 'STOPPED' 
 Prepare for capture and update state 
	
	  To hand buffers back in a known order to userspace start
	  to capture first from slot 0.
 Capture frame 
		
		  Nothing to do but refill the hardware slot if
		  capture only filled first half of vb2 buffer.
 Scratch buffer was used, dropping frame. 
 Prepare for next frame 
 Make sure the image size is large enough. 
 Supported natively 
 Use VIN hardware to combine the two fields 
 No media controller used, simply pass operation to subdevice. 
	
	  The graph lock needs to be taken to protect concurrent
	  starts of multiple VIN instances as they might share
	  a common subdevice down the line and then should use
	  the same pipe.
 Allocate scratch buffer. 
 Wait until only scratch buffer is used, max 3 interrupts. 
 Wait for streaming to stop 
 Check if HW is stopped 
		
		  If this happens something have gone horribly wrong.
		  Set state to stopped to prevent the interrupt handler
		  to make things worse...
 disable interrupts 
 Free scratch buffer. 
 Initialize the top-level structure 
 buffer queue 
 irq 
 -----------------------------------------------------------------------------
  Gen3 CHSEL manipulation
  There is no need to have locking around changing the routing
  as it's only possible to do so when no VIN in the group is
  streaming so nothing can race with the VNMC register.
 Make register writes take effect immediately. 
	
	  Set data expansion mode to "pad with 0s" by inspecting the routes
	  table to find out which bit fields are available in the IFMD
	  register. IFMD_DES1 controls data expansion mode for CSI2021,
	  IFMD_DES0 controls data expansion mode for CSI4041.
 Restore VNMC. 
 SPDX-License-Identifier: GPL-2.0+
  Driver for Renesas R-Car VIN
  Copyright (C) 2016 Renesas Electronics Corp.
  Copyright (C) 2011-2013 Renesas Solutions Corp.
  Copyright (C) 2013 Cogent Embedded, Inc., <source@cogentembedded.com>
  Copyright (C) 2008 Magnus Damm
  Based on the soc-camera rcar_vin driver
 -----------------------------------------------------------------------------
  Format Conversions
		
		  If NV12 is supported it's only supported on channels 0, 1, 4,
		  5, 8, 9, 12 and 13.
 HW limit width to a multiple of 32 (2^5) for NV1216 else 2 (2^1) 
 Limit to VIN capabilities 
 -----------------------------------------------------------------------------
  V4L2
  Make use of the hardware interlacer by default. 
 Allow the video device to override field and to scale 
	
	  If mbus_code is set only enumerate supported pixel formats for that
	  bus code. Converting from YCbCr to RGB and RGB to YCbCr is possible
	  with VIN, so all supported YCbCr and RGB media bus codes can produce
	  all of the related pixel formats. If mbus_code is not set enumerate
	  all possible pixelformats.
	 
	  TODO: Once raw MEDIA_BUS_FMT_SRGGB12_1X12 format is added to the
	  driver this needs to be extended so raw media bus code only result in
	  raw pixel format.
 Can't crop outside of source input 
 Make sure compose rect fits inside output format 
		
		  Composing is done by adding a offset to the buffer address,
		  the HW wants this address to be aligned to HW_BUFFER_MASK.
		  Make sure the top and left values meets this requirement.
 HW supports modifying configuration while running 
 Changing the standard will change the widthheight 
 Changing the timings will change the widthheight 
 -----------------------------------------------------------------------------
  V4L2 Media Controller
	
	  The V4L2 specification clearly documents the colorspace fields
	  as being set by drivers for capture devices. Using the values
	  supplied by userspace thus wouldn't comply with the API. Until
	  the API is updated force fixed values.
 -----------------------------------------------------------------------------
  File Operations
 Save the singular status before we call the clean-up helper 
 the release helper will cleanup any on-going streaming 
 Checks internally if vdev have been init or not 
 If no media controller, no need to route the event. 
 video node 
 Set a default format 
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (C) 2020 BayLibre, SAS
  Author: Neil Armstrong <narmstrong@baylibre.com>
  Missing features:
  - Scaling
  - Simple 12 vertical scaling
  - YUV input support
  - Source global alpha
  - Colorspace conversion
 Image Format 
 Crop 
 Image format 
 Control values 
 vb2 queue lock 
 TOFIX Handle the YUV input formats 
  FOURCC Alpha  HW FMT  HW MAP 
	
	  TRY_FMTS_FMT should never return an error when the requested format
	  is not supported. Drivers should always return a valid format,
	  preferably a format that is as widely supported by applications as
	  possible.
 This should never happen, warn and return OUTPUT frame 
 Reset 
 Implement CANVAS for non-AXG 
 Color, no blend, use source color 
 Take source alpha 
 Set alpha to 0 
 Keep original alpha 
 Start 
		
		  COMPOSE target is only valid for capture buffer type, return
		  error for output buffer type
		
		  CROP target is only valid for output buffer type, return
		  error for capture buffer type
	
	  bound and default cropcompose targets are invalid targets to
	  tryset
	 Adjust all values accordingly to the hardware capabilities
	  and chosen format.
 Reset crop settings 
	 Adjust all values accordingly to the hardware capabilities
	  and chosen format.
 Reset crop settings 
 Propagate settings to capture 
		
		  If the rotation parameter changes the OUTPUT frames
		  parameters, take them in account
 Set default formats 
 Write the default values to the ctx struct 
 SPDX-License-Identifier: GPL-2.0
  Xilinx Video DMA
  Copyright (C) 2013-2015 Ideas on Board
  Copyright (C) 2013-2015 Xilinx, Inc.
  Contacts: Hyun Kwon <hyun.kwon@xilinx.com>
            Laurent Pinchart <laurent.pinchart@ideasonboard.com>
 Minimum and maximum widths are expressed in bytes 
 -----------------------------------------------------------------------------
  Helper functions
 -----------------------------------------------------------------------------
  Pipeline Stream Management
  xvip_pipeline_start_stop - Start ot stop streaming on a pipeline
  @pipe: The pipeline
  @start: Start (when true) or stop (when false) the pipeline
  Walk the entities chain starting at the pipeline output video node and start
  or stop all of them.
  Return: 0 if successful, or the return value of the failed video::s_stream
  operation otherwise.
  xvip_pipeline_set_stream - Enabledisable streaming on a pipeline
  @pipe: The pipeline
  @on: Turn the stream on when true or off when false
  The pipeline is shared between all DMA engines connect at its input and
  output. While the stream state of DMA engines can be controlled
  independently, pipelines have a shared stream state that enable or disable
  all entities in the pipeline. For this reason the pipeline uses a streaming
  counter that tracks the number of DMA engines that have requested the stream
  to be enabled.
  When called with the @on argument set to true, this function will increment
  the pipeline streaming count. If the streaming count reaches the number of
  DMA engines in the pipeline it will enable all entities that belong to the
  pipeline.
  Similarly, when called with the @on argument set to false, this function will
  decrement the pipeline streaming count and disable all entities in the
  pipeline when the streaming count reaches zero.
  Return: 0 if successful, or the return value of the failed video::s_stream
  operation otherwise. Stopping the pipeline never fails. The pipeline state is
  not updated when the operation fails.
 Walk the graph to locate the video nodes. 
 We need exactly one output and zero or one input. 
  xvip_pipeline_cleanup - Cleanup the pipeline after streaming
  @pipe: the pipeline
  Decrease the pipeline use count and clean it up if we were the last user.
 If we're the last user clean up the pipeline. 
  xvip_pipeline_prepare - Prepare the pipeline for streaming
  @pipe: the pipeline
  @dma: DMA engine at one end of the pipeline
  Validate the pipeline if no user exists yet, otherwise just increase the use
  count.
  Return: 0 if successful or -EPIPE if the pipeline is not valid.
 If we're the first user validate and initialize the pipeline. 
 -----------------------------------------------------------------------------
  videobuf2 queue operations
  struct xvip_dma_buffer - Video DMA buffer
  @buf: vb2 buffer base object
  @queue: buffer list entry in the DMA engine queued buffers list
  @dma: DMA channel that uses the buffer
 Make sure the image size is large enough. 
	
	  Start streaming on the pipeline. No link touching an entity in the
	  pipeline can be activated or deactivated once streaming is started.
	 
	  Use the pipeline object embedded in the first DMA object that starts
	  streaming.
	 Verify that the configured format matches the output of the
	  connected subdev.
	 Start the DMA engine. This must be done before starting the blocks
	  in the pipeline to avoid DMA synchronization issues.
 Start the pipeline. 
 Give back all queued buffers to videobuf2. 
 Stop the pipeline. 
 Stop and reset the DMA engine. 
 Cleanup the pipeline and mark it as being stopped. 
 Give back all queued buffers to videobuf2. 
 -----------------------------------------------------------------------------
  V4L2 ioctls
 FIXME: without this callback function, some applications are not configured
  with correct formats, and it results in frames in wrong format. Whether this
  callback needs to be required is not clearly defined, so it should be
  clarified through the mailing list.
	 Retrieve format information and select the default format if the
	  requested format isn't supported.
	 The transfer alignment requirements are expressed in bytes. Compute
	  the minimum and maximum values, clamp the requested width and convert
	  it back to pixels.
	 Clamp the requested bytes per line value. If the maximum bytes per
	  line value is zero, the module doesn't support user configurable line
	  sizes. Override the requested value with the minimum in that case.
 -----------------------------------------------------------------------------
  V4L2 file operations
 -----------------------------------------------------------------------------
  Xilinx Video DMA Core
 Initialize the media entity... 
 ... and the video node... 
 ... and the buffers queue... 
	 Don't enable VB2_READ and VB2_WRITE, as using the read() and write()
	  V4L2 APIs would be inefficient. Testing on the command line with a
	  'cat devvideo?' thus won't be possible, but given that the driver
	  anyway requires a test tool to setup the pipeline before any video
	  stream can be started, requiring a specific V4L2 test tool as well
	  instead of 'cat' isn't really a drawback.
 ... and the DMA channel. 
 SPDX-License-Identifier: GPL-2.0
  Driver for Xilinx MIPI CSI-2 Rx Subsystem
  Copyright (C) 2016 - 2020 Xilinx, Inc.
  Contacts: Vishal Sagar <vishal.sagar@xilinx.com>
 Register register map 
  Removed VCXFE mask as it doesn't exist in IER
  Removed STOP state irq as this will keep driver in irq handler only
  Sink pad connected to sensor source pad.
  Source pad connected to next module like demosaic.
 MIPI CSI-2 Data Types from spec 
 There are 2 events frame sync and frame level error per VC 
  struct xcsi2rxss_event - Event log structure
  @mask: Event mask
  @name: Name of the event
  This table provides a mapping between CSI-2 Data type
  and media bus formats
  struct xcsi2rxss_state - CSI-2 Rx Subsystem device structure
  @subdev: The v4l2 subdev structure
  @format: Active V4L2 formats on each pad
  @default_format: Default V4L2 format
  @events: counter for events
  @vcx_events: counter for vcx_events
  @dev: Platform structure
  @rsubdev: Remote subdev connected to sink pad
  @rst_gpio: reset to video_aresetn
  @clks: array of clocks
  @iomem: Base address of subsystem
  @max_num_lanes: Maximum number of lanes present
  @datatype: Data type filter
  @lock: mutex for accessing this structure
  @pads: media pads
  @streaming: Flag for storing streaming state
  @enable_active_lanes: If number of active lanes can be modified
  @en_vcx: If more than 4 VC are enabled
  This structure contains the device driver related parameters
 used to protect access to this struct 
  Register related operations
  This function returns the nth mbus for a data type.
  In case of error, mbus code returned is 0.
 This returns the data type for a media bus format else 0 
  xcsi2rxss_soft_reset - Does a soft reset of the MIPI CSI-2 Rx Subsystem
  @state: Xilinx CSI-2 Rx Subsystem structure pointer
  Core takes less than 100 video clock cycles to reset.
  So a larger timeout value is chosen for margin.
  Return: 0 - on success OR -ETIME if reset times out
 us 
 minimum of 40 dphy_clk_200M cycles 
 Print event counters 
  xcsi2rxss_log_status - Logs the status of the CSI-2 Receiver
  @sd: Pointer to V4L2 subdevice structure
  This function prints the current status of Xilinx MIPI CSI-2
  Return: 0 on success
 Clk & Lane Info  
 Virtual Channel Image Information 
 Get line and byte count from VCXINFR1 Register 
 Get data type from VCXINFR2 Register 
 Move to next pair of VC Info registers 
 enable core 
 enable interrupts 
 disable interrupts 
 disable core 
 disable interrupts 
 disable core 
  xcsi2rxss_irq_handler - Interrupt handler for CSI-2
  @irq: IRQ number
  @data: Pointer to device state
  In the interrupt handler, a list of event counters are updated for
  corresponding interrupts. This is useful to get status  debug.
  Return: IRQ_HANDLED after handling interrupts
 Received a short packet 
		
		  Drain generic short packet FIFO by reading max 31
		  (fifo depth) short packets from fifo or till fifo is empty.
 Short packet FIFO overflow 
	
	  Stream line buffer full
	  This means there is a backpressure from downstream IP
 disable interrupts 
 disable core 
		
		  The IP needs to be hard reset before it can be used now.
		  This will be done in streamoff.
		
		  TODO: Notify the whole pipeline with v4l2_subdev_notify() to
		  inform userspace.
 Increment event counters 
  xcsi2rxss_s_stream - It is used to startstop the streaming.
  @sd: V4L2 Sub device
  @enable: Flag (True  False)
  This function controls the start or stop of streaming for the
  Xilinx MIPI CSI-2 Rx Subsystem.
  Return: 0 on success, errors otherwise
  xcsi2rxss_init_cfg - Initialise the pad format config to default
  @sd: Pointer to V4L2 Sub device structure
  @sd_state: Pointer to sub device state structure
  This function is used to initialize the pad format with the default
  values.
  Return: 0 on success
  xcsi2rxss_get_format - Get the pad format
  @sd: Pointer to V4L2 Sub device structure
  @sd_state: Pointer to sub device state structure
  @fmt: Pointer to pad level media bus format
  This function is used to get the pad format information.
  Return: 0 on success
  xcsi2rxss_set_format - This is used to set the pad format
  @sd: Pointer to V4L2 Sub device structure
  @sd_state: Pointer to sub device state structure
  @fmt: Pointer to pad level media bus format
  This function is used to set the pad format. Since the pad format is fixed
  in hardware, it can't be modified on run time. So when a format set is
  requested by application, all parameters except the format type is saved
  for the pad and the original pad format is sent back to the application.
  Return: 0 on success
	
	  Only the format->code parameter matters for CSI as the
	  CSI format cannot be changed at runtime.
	  Ensure that format to set is copied to over to CSI pad format
 only sink pad format can be updated 
	
	  RAW8 is supported in all datatypes. So if requested media bus format
	  is of RAW8 type, then allow to be set. In case core is configured to
	  other RAW, YUV422 810 or RGB888, set appropriate media bus format.
 set the default format for the data type 
  xcsi2rxss_enum_mbus_code - Handle pixel format enumeration
  @sd: pointer to v4l2 subdev structure
  @cfg: V4L2 subdev pad configuration
  @code: pointer to v4l2_subdev_mbus_code_enum structure
  Return: -EINVAL or zero on success
 RAW8 dt packets are available in all DT configurations 
 -----------------------------------------------------------------------------
  Media Operations
 Reset GPIO 
 TODO: Enabledisable clocks at stream onoff time. 
 Initialize V4L2 subdevice and media entity 
 Initialize the default format 
 Initialize V4L2 subdevice and media entity 
 SPDX-License-Identifier: GPL-2.0
  Xilinx Test Pattern Generator
  Copyright (C) 2013-2015 Ideas on Board
  Copyright (C) 2013-2015 Xilinx, Inc.
  Contacts: Hyun Kwon <hyun.kwon@xilinx.com>
            Laurent Pinchart <laurent.pinchart@ideasonboard.com>
  The minimum blanking value is one clock cycle for the front porch, one clock
  cycle for the sync pulse and one clock cycle for the back porch.
  struct xtpg_device - Xilinx Test Pattern Generator device structure
  @xvip: Xilinx Video IP device
  @pads: media pads
  @npads: number of pads (1 or 2)
  @has_input: whether an input is connected to the sink pad
  @formats: active V4L2 media bus format for each pad
  @default_format: default V4L2 media bus format
  @vip_format: format information corresponding to the active format
  @bayer: boolean flag if TPG is set to any bayer format
  @ctrl_handler: control handler
  @hblank: horizontal blanking control
  @vblank: vertical blanking control
  @pattern: test pattern control
  @streaming: is the video stream active
  @vtc: video timing controller
  @vtmux_gpio: video timing mux GPIO
	
	  If the TPG has no sink pad or no input connected to its sink pad
	  passthrough mode can't be enabled.
 If passthrough mode is allowed unmask bit 0. 
 If test pattern mode is allowed unmask all other bits. 
 -----------------------------------------------------------------------------
  V4L2 Subdevice Video Operations
	
	  Configure the bayer phase and video timing mux based on the
	  operation mode (passthrough or test pattern generation). The test
	  pattern can be modified by the control set handler, we thus need to
	  take the control lock here to avoid races.
	
	  Switching between passthrough and test pattern generation modes isn't
	  allowed during streaming, update the control range accordingly.
	
	  For TPG v5.0, the bayer phase needs to be off for the pass through
	  mode, otherwise the external input would be subsampled.
 -----------------------------------------------------------------------------
  V4L2 Subdevice Pad Operations
	 In two pads mode the source pad format is always identical to the
	  sink pad format.
 Bayer phase is configurable at runtime 
 Propagate the format to the source pad. 
 -----------------------------------------------------------------------------
  V4L2 Subdevice Operations
	 Min  max values for pad 0 is always fixed in both one and two pads
	  modes. In two pads mode, the source pad(= 1) size is identical to
  Control Config
 -----------------------------------------------------------------------------
  Media Operations
 -----------------------------------------------------------------------------
  Power Management
 -----------------------------------------------------------------------------
  Platform Device Driver
 Get and check the format description 
 Count the number of ports. 
 Reset and initialize the core 
	 Initialize V4L2 subdevice and media entity. Pad numbers depend on the
	  number of pads.
 Initialize the default format 
 Initialize V4L2 subdevice and media entity 
 SPDX-License-Identifier: GPL-2.0
  Xilinx Video IP Core
  Copyright (C) 2013-2015 Ideas on Board
  Copyright (C) 2013-2015 Xilinx, Inc.
  Contacts: Hyun Kwon <hyun.kwon@xilinx.com>
            Laurent Pinchart <laurent.pinchart@ideasonboard.com>
 -----------------------------------------------------------------------------
  Helper functions
  xvip_get_format_by_code - Retrieve format information for a media bus code
  @code: the format media bus code
  Return: a pointer to the format information structure corresponding to the
  given V4L2 media bus format @code, or ERR_PTR if no corresponding format can
  be found.
  xvip_get_format_by_fourcc - Retrieve format information for a 4CC
  @fourcc: the format 4CC
  Return: a pointer to the format information structure corresponding to the
  given V4L2 format @fourcc. If not found, return a pointer to the first
  available format (V4L2_PIX_FMT_YUYV).
  xvip_of_get_format - Parse a device tree node and return format information
  @node: the device tree node
  Read the xlnx,video-format, xlnx,video-width and xlnx,cfa-pattern properties
  from the device tree @node passed as an argument and return the corresponding
  format information.
  Return: a pointer to the format information structure corresponding to the
  format name and width, or ERR_PTR if no corresponding format can be found.
  xvip_set_format_size - Set the media bus frame format size
  @format: V4L2 frame format on media bus
  @fmt: media bus format
  Set the media bus frame format size. The width  height from the subdevice
  format are set to the given media bus format. The new format size is stored
  in @format. The width and height are clamped using default min  max values.
  xvip_clr_or_set - Clear or set the register with a bitmask
  @xvip: Xilinx Video IP device
  @addr: address of register
  @mask: bitmask to be set or cleared
  @set: boolean flag indicating whether to set or clear
  Clear or set the register at address @addr with a bitmask @mask depending on
  the boolean flag @set. When the flag @set is true, the bitmask is set in
  the register, otherwise the bitmask is cleared from the register
  when the flag @set is false.
  Fox example, this function can be used to set a control with a boolean value
  requested by users. If the caller knows whether to set or clear in the first
  place, the caller should call xvip_clr() or xvip_set() directly instead of
  using this function.
  xvip_clr_and_set - Clear and set the register with a bitmask
  @xvip: Xilinx Video IP device
  @addr: address of register
  @clr: bitmask to be cleared
  @set: bitmask to be set
  Clear a bit(s) of mask @clr in the register at address @addr, then set
  a bit(s) of mask @set in the register after.
 -----------------------------------------------------------------------------
  Subdev operations handlers
  xvip_enum_mbus_code - Enumerate the media format code
  @subdev: V4L2 subdevice
  @sd_state: V4L2 subdev state
  @code: returning media bus code
  Enumerate the media bus code of the subdevice. Return the corresponding
  pad format code. This function only works for subdevices with fixed format
  on all pads. Subdevices with multiple format should have their own
  function to enumerate mbus codes.
  Return: 0 if the media bus code is found, or -EINVAL if the format index
  is not valid.
	 Enumerating frame sizes based on the active configuration isn't
	  supported yet.
  xvip_enum_frame_size - Enumerate the media bus frame size
  @subdev: V4L2 subdevice
  @sd_state: V4L2 subdev state
  @fse: returning media bus frame size
  This function is a drop-in implementation of the subdev enum_frame_size pad
  operation. It assumes that the subdevice has one sink pad and one source
  pad, and that the format on the source pad is always identical to the
  format on the sink pad. Entities with different requirements need to
  implement their own enum_frame_size handlers.
  Return: 0 if the media bus frame size is found, or -EINVAL
  if the index or the code is not valid.
	 Enumerating frame sizes based on the active configuration isn't
	  supported yet.
		 The size on the source pad is fixed and always identical to
		  the size on the sink pad.
 SPDX-License-Identifier: GPL-2.0
  Xilinx Video IP Composite Device
  Copyright (C) 2013-2015 Ideas on Board
  Copyright (C) 2013-2015 Xilinx, Inc.
  Contacts: Hyun Kwon <hyun.kwon@xilinx.com>
            Laurent Pinchart <laurent.pinchart@ideasonboard.com>
  struct xvip_graph_entity - Entity in the video graph
  @asd: subdev asynchronous registration information
  @entity: media entity, from the corresponding V4L2 subdev
  @subdev: V4L2 subdev
 must be first 
 -----------------------------------------------------------------------------
  Graph Management
 Get the next endpoint and parse its link. 
		 Skip sink ports, they will be processed from the other end of
		  the link.
 Skip DMA engines, they will be processed separately. 
 Find the remote entity. 
 Create the media link. 
 Get the next endpoint and parse its link. 
 Find the DMA engine. 
 Find the remote entity. 
 Create the media link. 
 Create links for every entity. 
 Create links for DMA channels. 
	 Locate the entity corresponding to the bound subdev and store the
	  subdev pointer.
 Skip entities that we have already processed. 
	
	  Walk the links to parse the full graph. Start by parsing the
	  composite node and then parse entities in turn. The list_for_each
	  loop will handle entities added at the end of the list while walking
	  the links.
 Init the DMA channels. 
 Parse the graph to extract a list of subdevice DT nodes. 
 Register the subdevices notifier. 
 -----------------------------------------------------------------------------
  Media Controller and V4L2
 -----------------------------------------------------------------------------
  Platform Device Driver
 SPDX-License-Identifier: GPL-2.0
  Xilinx Video Timing Controller
  Copyright (C) 2013-2015 Ideas on Board
  Copyright (C) 2013-2015 Xilinx, Inc.
  Contacts: Hyun Kwon <hyun.kwon@xilinx.com>
            Laurent Pinchart <laurent.pinchart@ideasonboard.com>
  The following registers exist in two blocks, one at 0x0020 for the detector
  and one at 0x0060 for the generator.
  struct xvtc_device - Xilinx Video Timing Controller device structure
  @xvip: Xilinx Video IP device
  @list: entry in the global VTC list
  @has_detector: the VTC has a timing detector
  @has_generator: the VTC has a timing generator
  @config: generator timings configuration
 -----------------------------------------------------------------------------
  Generator Operations
	 We don't care about the chroma active signal, encoding parameters are
	  not important for now.
	 Hardcode the polarity to active high, as required by the video in to
	  AXI4-stream core.
	 Configure the timings. The VBLANK and VSYNC signals assertion and
	  deassertion are hardcoded to the first pixel of the line.
	 Enable the generator. Set the source of all generator parameters to
	  generator registers.
 -----------------------------------------------------------------------------
  Registration and Unregistration
 -----------------------------------------------------------------------------
  Platform Device Driver
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2015-2016 MediaTek Inc.
  Author: Houlong Wei <houlong.wei@mediatek.com>
          Ming Hsiu Tsai <minghsiu.tsai@mediatek.com>
 mapping VPU address to kernel virtual address 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2015-2016 MediaTek Inc.
  Author: Houlong Wei <houlong.wei@mediatek.com>
          Ming Hsiu Tsai <minghsiu.tsai@mediatek.com>
 Mediatek proprietary format 
 Set input pixel offset 
 Set input cropped size 
 Set input original size 
 MDP will calculate it by color format. 
 MDP will calculate it by color format. 
 MDP will calculate it by color format. 
 MDP will calculate it by color format. 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2015-2016 MediaTek Inc.
  Author: Houlong Wei <houlong.wei@mediatek.com>
          Ming Hsiu Tsai <minghsiu.tsai@mediatek.com>
 MDP debug log level (0-3). 3 shows all the logs. 
 Old dts had the components as child nodes 
 Iterate over sibling MDP function blocks 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2016 MediaTek Inc.
  Author: Ming Hsiu Tsai <minghsiu.tsai@mediatek.com>
 Only RDMA needs two clocks 
 Only DMA capable components need the LARB property 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2015-2016 MediaTek Inc.
  Author: Houlong Wei <houlong.wei@mediatek.com>
          Ming Hsiu Tsai <minghsiu.tsai@mediatek.com>
   struct mtk_mdp_pix_limit - image pixel size limits
   @org_w: source pixel width
   @org_h: source pixel height
   @target_rot_dis_w: pixel dst scaled width with the rotator is off
   @target_rot_dis_h: pixel dst scaled height with the rotator is off
   @target_rot_en_w: pixel dst scaled width with the rotator is on
   @target_rot_en_h: pixel dst scaled height with the rotator is on
 align size for normal raster scan pixel format 
 use default alignment 
	
	  To check if image size is modified to adjust parameter against
	  hardware abilities
 adjust lefttop if cropping rectangle is out of bounds 
 Need to add code to algin left value with 2's multiple 
 The color format (num_planes) must be already configured. 
 Check to see if scaling ratio is within supported range 
 Use separate control handler per file handle 
 Default format 
  omap_voutlib.c
  Copyright (C) 2005-2010 Texas Instruments.
  This file is licensed under the terms of the GNU General Public License
  version 2. This program is licensed "as is" without any warranty of any
  kind, whether express or implied.
  Based on the OMAP2 camera driver
  Video-for-Linux (Version 2) camera capture driver for
  the OMAP24xx camera controller.
  Author: Andy Lowe (source@mvista.com)
  Copyright (C) 2004 MontaVista Software, Inc.
  Copyright (C) 2010 Texas Instruments.
 Return the default overlay cropping rectangle in crop given the image
  size in pix and the video display size in fbuf.  The default
  cropping rectangle is the largest rectangle no larger than the capture size
  that will fit on the display.  The default cropping rectangle is centered in
  the image.  All dimensions and offsets are rounded down to even numbers.
 Given a new render window in new_win, adjust the window to the
  nearest supported configuration.  The adjusted window parameters are
  returned in new_win.
  Returns zero if successful, or -EINVAL if the requested window is
  impossible and cannot reasonably be adjusted.
 make a working copy of the new_win rectangle 
	 adjust the preview window so it fits on the display by clipping any
	  offscreen areas
 We now have a valid preview window, so go with it 
 Given a new render window in new_win, adjust the window to the
  nearest supported configuration.  The image cropping window in crop
  will also be adjusted if necessary.  Preference is given to keeping the
  the window as close to the requested configuration as possible.  If
  successful, new_win, vout->win, and crop are updated.
  Returns zero if successful, or -EINVAL if the requested preview window is
  impossible and cannot reasonably be adjusted.
 update our preview window 
 Adjust the cropping window to allow for resizing limitation 
 For 24xx limit is 8x to 12x scaling. 
			 The OMAP2420 vertical resizing line buffer is 768
			  pixels wide. If the cropped image is wider than
			  768 pixels then it cannot be vertically resized.
 For 34xx limit is 8x to 14x scaling. 
 Given a new cropping rectangle in new_crop, adjust the cropping rectangle to
  the nearest supported configuration.  The image render window in win will
  also be adjusted if necessary.  The preview window is adjusted such that the
  horizontal and vertical rescaling ratios stay constant.  If the render
  window would fall outside the display boundaries, the cropping rectangle
  will also be adjusted to maintain the rescaling ratios.  If successful, crop
  and win are updated.
  Returns zero if successful, or -EINVAL if the requested cropping rectangle is
  impossible and cannot reasonably be adjusted.
 make a working copy of the new_crop rectangle 
 adjust the cropping rectangle so it fits in the image 
			 If we're resizing vertically, we can't support a
			  crop width wider than 768 pixels.
 vertical resizing 
		 We made the preview window extend below the bottom of the
		  display, so clip it to the display boundary and resize the
		  cropping height to maintain the vertical resizing ratio.
 horizontal resizing 
		 We made the preview window extend past the right side of the
		  display, so clip it to the display boundary and resize the
		  cropping width to maintain the horizontal resizing ratio.
			 The OMAP2420 vertical resizing line buffer is
			  768 pixels wide.  If the cropped image is wider
			  than 768 pixels then it cannot be vertically resized.
 update our cropping rectangle and we're done 
 Given a new format in pix and fbuf,  crop and win
  structures are initialized to default values. crop
  is initialized to the largest window size that will fit on the display.  The
  crop window is centered in the image. win is initialized to
  the same size as crop and is centered on the display.
  All sizes and offsets are constrained to be even numbers.
	 crop defines the preview source window in the image capture
	  buffer
 win defines the preview target window on the display 
  Allocate buffers
  Free buffers
  omap_vout.c
  Copyright (C) 2005-2010 Texas Instruments.
  This file is licensed under the terms of the GNU General Public License
  version 2. This program is licensed "as is" without any warranty of any
  kind, whether express or implied.
  Leveraged code from the OMAP2 camera driver
  Video-for-Linux (Version 2) camera capture driver for
  the OMAP24xx camera controller.
  Author: Andy Lowe (source@mvista.com)
  Copyright (C) 2004 MontaVista Software, Inc.
  Copyright (C) 2010 Texas Instruments.
  History:
  20-APR-2006 Khasim		Modified VRFB based Rotation,
 				The image data is always read from 0 degree
 				view and written
 				to the virtual space of desired rotation angle
  4-DEC-2006  Jian		Changed to support better memory management
  17-Nov-2008 Hardik		Changed driver to use video_ioctl2
  23-Feb-2010 Vaibhav H	Modified to use new DSS2 interface
 Driver Configuration macros 
 Variables configurable through module params
 Module parameters 
 list of image formats supported by OMAP2 video pipelines 
		 Note:  V4L2 defines RGB565 as:
		 
		       Byte 0                    Byte 1
		       g2 g1 g0 r4 r3 r2 r1 r0   b4 b3 b2 b1 b0 g5 g4 g3
		 
		  We interpret RGB565 as:
		 
		       Byte 0                    Byte 1
		       g2 g1 g0 b4 b3 b2 b1 b0   r4 r3 r2 r1 r0 g5 g4 g3
		 Note:  V4L2 defines RGB32 as: RGB-8-8-8-8  we use
		   this for RGB24 unpack mode, the last 8 bits are ignored
		 Note:  V4L2 defines RGB24 as: RGB-8-8-8  we use
		         this for RGB24 packed mode
		 
  Try format
  Convert V4L2 rotation to DSS rotation
 	V4L2 understand 0, 90, 180, 270.
 	Convert to 0, 1, 2 and 3 respectively for DSS
  Convert V4L2 pixel format to DSS pixel format
  Setup the overlay
	 Setup the input plane parameters according to
	  rotation value selected.
  Initialize the overlay structure
			 Invert the height and width for 90
			  and 270 degree rotation
  Apply the changes set the go bit of DSS
 get the display device attached to the overlay 
 First save the configuration in ovelray structure 
 Enable the pipeline and set the Go bit 
  V4L2 ioctls
 get the display device attached to the overlay 
 get the display device attached to the overlay 
	 We don't support RGB24-packed mode if vrfb rotation
 get the framebuffer parameters 
 change to smaller size is OK 
 try & set the new output format 
 If YUYV then vrfb bpp is 2, for  others its 1 
 set default crop and win 
 Video1 plane does not support global alpha on OMAP3 
 Width and height are always even 
 get the display device attached to the overlay 
 Get the next frame from the buffer queue 
 Remove buffer from the buffer queue 
 Initialize field_id and started member 
 First save the configuration in overlay structure 
 Enable the pipeline and set the Go bit 
 Turn of the pipeline 
 Turn of the pipeline 
	 OMAP DSS doesn't support Source and Destination color
	 OMAP DSS Doesn't support the Destination color key
 enable this only if there is no zorder cap 
 get the display device attached to the overlay 
 Init functions used during driver initialization 
 Initial setup of video_data 
 set the default pix 
 Set the default picture of QVGA  
 Default pixel format is RGB 5-6-5 
 Set the data structures for the overlay parameters
 initialize the video_device struct 
 Setup video buffers 
 Create video out devices 
 Select video2 if only 1 overlay is controlled by V4L2 
 Else select video1 and video2 one by one. 
		
		  Set the framebuffer base, this allows applications to find
		  the fb corresponding to this overlay.
		 
		  To be precise: fbuf.base should match smem_start of
		  struct fb_fix_screeninfo.
 Set VRFB as rotation_type for omap2 and omap3 
		 Setup the default configuration for the video devices
		 Allocate default number of buffers for the video streaming
		  and reserve the VRFB space for rotation
		 Register the Video device with V4L2
 Driver functions 
			
			  The device was never registered, so release the
			  video_device struct directly.
			
			  The unregister function will release the video_device
			  struct as well as unregistering it.
		 Free the VRFB buffer if allocated
		  init time
	 Get the Video1 overlay and video2 overlay.
	  Setup the Display attached to that overlays
				 Here we are not considering a error
				   as display may be enabled by frame
				   buffer driver
  omap_vout_vrfb.c
  Copyright (C) 2010 Texas Instruments.
  This file is licensed under the terms of the GNU General Public License
  version 2. This program is licensed "as is" without any warranty of any
  kind, whether express or implied.
  Function for allocating video buffers
  Wakes up the application once the DMA transfer to VRFB space is completed.
  Free VRFB buffers
 Calculate VRFB memory size 
 allocate for worst case size 
	
	  Request and Initialize DMA, for DMA based VRFB transfer
	
	  statically allocated the VRFB buffer is done through
	  command line arguments
  Release the VRFB context once the module exits
  Allocate the buffers for the VRFB space.  Data is copied from V4L2
  buffers to the VRFB buffers using the DMA engine.
 If rotation is enabled, allocate memory for VRFB space also 
	 Allocate the VRFB buffers only if the buffers are not
	  allocated during init time.
	 If rotation is enabled, copy input buffer into VRFB
	  memory space using DMA. We are copying input buffer
	  into VRFB memory space of desired angle and DSS will
	  read image VRFB memory for 0 degree angle
	 Store buffers physical address into an array. Addresses
  Calculate the buffer offsets from which the streaming should
  start. This offset calculation is mainly required because of
  the VRFB 32 pixels alignment with rotation.
			
			  ps    - Actual pixel size for YUYVUYVY for
			          VRFBMirroring is 4 bytes
			  vr_ps - Virtually pixel size for YUYVUYVY is
			          2 bytes
 otherwise the pixel size is 2 byte 
 SPDX-License-Identifier: GPL-2.0-only
  isp.c
  TI OMAP3 ISP - Core
  Copyright (C) 2006-2010 Nokia Corporation
  Copyright (C) 2007-2009 Texas Instruments, Inc.
  Contacts: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
 	     Sakari Ailus <sakari.ailus@iki.fi>
  Contributors:
 	Laurent Pinchart <laurent.pinchart@ideasonboard.com>
 	Sakari Ailus <sakari.ailus@iki.fi>
 	David Cohen <dacohen@gmail.com>
 	Stanimir Varbanov <svarbanov@mm-sol.com>
 	Vimarsh Zutshi <vimarsh.zutshi@gmail.com>
 	Tuukka Toivonen <tuukkat76@gmail.com>
 	Sergio Aguirre <saaguirre@ti.com>
 	Antti Koskipaa <akoskipa@gmail.com>
 	Ivan T. Ivanov <iivanov@mm-sol.com>
 	RaniSuneela <r-m@ti.com>
 	Atanas Filipov <afilipov@mm-sol.com>
 	Gjorgji Rosikopulos <grosikopulos@mm-sol.com>
 	Hiroshi DOYU <hiroshi.doyu@nokia.com>
 	Nayden Kanchev <nkanchev@mm-sol.com>
 	Phil Carmody <ext-phil.2.carmody@nokia.com>
 	Artem Bityutskiy <artem.bityutskiy@nokia.com>
 	Dominic Curran <dcurran@ti.com>
 	Ilkka Myllyperkio <ilkka.myllyperkio@sofica.fi>
 	Pallavi Kulkarni <p-kulkarni@ti.com>
 	Vaibhav Hiremath <hvaibhav@ti.com>
 	Mohit Jalori <mjalori@ti.com>
 	Sameer Venkatraman <sameerv@ti.com>
 	Senthilvadivu Guruswamy <svadivu@ti.com>
 	Thara Gopinath <thara@ti.com>
 	Toni Leinonen <toni.leinonen@nokia.com>
 	Troy Laramy <t-laramy@ti.com>
 first MMIO area 
 base, len 0x0070 
 ccp2, len 0x01f0 
 ccdc, len 0x00a8 
 hist, len 0x0048 
 h3a, len 0x0060 
 preview, len 0x00a0 
 resizer, len 0x00ac 
 sbl, len 0x00fc 
 second MMIO area 
 csi2a, len 0x0170 
 csiphy2, len 0x000c 
 first MMIO area 
 base, len 0x0070 
 ccp2, len 0x01f0 
 ccdc, len 0x00a8 
 hist, len 0x0048 
 h3a, len 0x0060 
 preview, len 0x00a0 
 resizer, len 0x00ac 
 sbl, len 0x00fc 
 second MMIO area 
 csi2a, len 0x0170 (1st area) 
 csiphy2, len 0x000c 
 csi2a, len 0x0040 (2nd area) 
 csi2c, len 0x0170 (1st area) 
 csiphy1, len 0x000c 
 csi2c, len 0x0040 (2nd area) 
 Structure for savingrestoring ISP module registers 
  omap3isp_flush - Post pending L3 bus writes by doing a register readback
  @isp: OMAP3 ISP device
  In order to force posting of pending writes, we need to write and
  readback the same register, in this case the revision register.
  See this link for reference:
    https:www.mail-archive.comlinux-omap@vger.kernel.orgmsg08149.html
 -----------------------------------------------------------------------------
  XCLK
		
		  The first argument is NULL in order to avoid circular
		  reference, as this driver takes reference on the
		  sensor subdevice modules and the sensors would take
		  reference on this module through clk_get().
 -----------------------------------------------------------------------------
  Interrupts
  isp_enable_interrupts - Enable ISP interrupts.
  @isp: OMAP3 ISP device
  isp_disable_interrupts - Disable ISP interrupts.
  @isp: OMAP3 ISP device
  isp_core_init - ISP core settings
  @isp: OMAP3 ISP device
  @idle: Consider idle state.
  Set the power settings for the ISP and SBL bus and configure the HSVS
  interrupt source.
  We need to configure the HSVS interrupt source before interrupts get
  enabled, as the sensor might be free-running and the ISP default setting
  (HS edge) would put an unnecessary burden on the CPU.
  Configure the bridge and lane shifter. Valid inputs are
  CCDC_INPUT_PARALLEL: Parallel interface
  CCDC_INPUT_CSI2A: CSI2a receiver
  CCDC_INPUT_CCP2B: CCP2b receiver
  CCDC_INPUT_CSI2C: CSI2c receiver
  The bridge and lane shifter are configured according to the selected input
  and the ISP platform data.
 Histogram cannot be enabled in this frame anymore 
	
	  Handle shared buffer logic overflows for video buffers.
	  ISPSBL_PCR_CCDCPRV_2_RSZ_OVF can be safely ignored.
  isp_isr - Interrupt Service Routine for Camera ISP module.
  @irq: Not used currently.
  @_isp: Pointer to the OMAP3 ISP device
  Handles the corresponding callback if plugged in.
 -----------------------------------------------------------------------------
  Pipeline stream management
  isp_pipeline_enable - Enable streaming on a pipeline
  @pipe: ISP pipeline
  @mode: Stream mode (single shot or continuous)
  Walk the entities chain starting at the pipeline output video node and start
  all modules in the chain in the given mode.
  Return 0 if successful, or the return value of the failed video::s_stream
  operation otherwise.
	 Refuse to start streaming if an entity included in the pipeline has
	  crashed. This check must be performed before the loop below to avoid
	  starting entities if the pipeline won't start anyway (those entities
	  would then likely fail to stop, making the problem worse).
 Stop at the first external sub-device. 
  isp_pipeline_disable - Disable streaming on a pipeline
  @pipe: ISP pipeline
  Walk the entities chain starting at the pipeline output video node and stop
  all modules in the chain. Wait synchronously for the modules to be stopped if
  necessary.
  Return 0 if all modules have been properly stopped, or -ETIMEDOUT if a module
  can't be stopped (in which case a software reset of the ISP is probably
  necessary).
	
	  We need to stop all the modules after CCDC first or they'll
	  never stop since they may not get a full frame from CCDC.
 Stop at the first external sub-device. 
		 Handle stop failures. An entity that fails to stop can
		  usually just be restarted. Flag the stop failure nonetheless
		  to trigger an ISP reset the next time the device is released,
		  just in case.
		 
		  The preview engine is a special case. A failure to stop can
		  mean a hardware crash. When that happens the preview engine
		  won't respond to readwrite operations on the L4 bus anymore,
		  resulting in a bus fault and a kernel oops next time it gets
		  accessed. Mark it as crashed to prevent pipelines including
		  it from being started.
  omap3isp_pipeline_set_stream - Enabledisable streaming on a pipeline
  @pipe: ISP pipeline
  @state: Stream state (stopped, single shot or continuous)
  Set the pipeline to the given stream state. Pipelines can be started in
  single-shot or continuous mode.
  Return 0 if successful, or the return value of the failed video::s_stream
  operation otherwise. The pipeline state is not updated when the operation
  fails, except when stopping the pipeline.
  omap3isp_pipeline_cancel_stream - Cancel stream on a pipeline
  @pipe: ISP pipeline
  Cancelling a stream mark all buffers on all video nodes in the pipeline as
  erroneous and makes sure no new buffer can be queued. This function is called
  when a fatal error that prevents any further operation on the pipeline
  occurs.
  isp_pipeline_resume - Resume streaming on a pipeline
  @pipe: ISP pipeline
  Resume video output and input and re-enable pipeline.
  isp_pipeline_suspend - Suspend streaming on a pipeline
  @pipe: ISP pipeline
  Suspend pipeline.
  isp_pipeline_is_last - Verify if entity has an enabled link to the output
 			  video node
  @me: ISP module's media entity
  Returns 1 if the entity has an enabled link to the output video node or 0
  otherwise. It's true only while pipeline can have no more than one output
  node.
  isp_suspend_module_pipeline - Suspend pipeline to which belongs the module
  @me: ISP module's media entity
  Suspend the whole pipeline if module's entity has an enabled link to the
  output video node. It works only while pipeline can have no more than one
  output node.
  isp_resume_module_pipeline - Resume pipeline to which belongs the module
  @me: ISP module's media entity
  Resume the whole pipeline if module's entity has an enabled link to the
  output video node. It works only while pipeline can have no more than one
  output node.
  isp_suspend_modules - Suspend ISP submodules.
  @isp: OMAP3 ISP device
  Returns 0 if suspend left in idle state all the submodules properly,
  or returns 1 if a general Reset is required to suspend the submodules.
  isp_resume_modules - Resume ISP submodules.
  @isp: OMAP3 ISP device
  isp_reset - Reset ISP with a timeout wait for idle.
  @isp: OMAP3 ISP device
  isp_save_context - Saves the values of the ISP module registers.
  @isp: OMAP3 ISP device
  @reg_list: Structure containing pairs of register address and value to
             modify on OMAP.
  isp_restore_context - Restores the values of the ISP module registers.
  @isp: OMAP3 ISP device
  @reg_list: Structure containing pairs of register address and value to
             modify on OMAP.
  isp_save_ctx - Saves ISP, CCDC, HIST, H3A, PREV, RESZ & MMU context.
  @isp: OMAP3 ISP device
  Routine for saving the context of each module in the ISP.
  CCDC, HIST, H3A, PREV, RESZ and MMU.
  isp_restore_ctx - Restores ISP, CCDC, HIST, H3A, PREV, RESZ & MMU context.
  @isp: OMAP3 ISP device
  Routine for restoring the context of each module in the ISP.
  CCDC, HIST, H3A, PREV, RESZ and MMU.
 -----------------------------------------------------------------------------
  SBL resources management
  isp_module_sync_idle - Helper to sync module with its idle state
  @me: ISP submodule's media entity
  @wait: ISP submodule's wait queue for streamoffinterrupt synchronization
  @stopping: flag which tells module wants to stop
  This function checks if ISP submodule needs to wait for next interrupt. If
  yes, makes the caller to sleep while waiting for such event.
	
	  atomic_set() doesn't include memory barrier on ARM platform for SMP
	  scenario. We'll call it here to avoid race conditions.
	
	  If module is the last one, it's writing to memory. In this case,
	  it's necessary to check if the module is already paused due to
	  DMA queue underrun or if it has to wait for next interrupt to be
	  idle.
	  If it isn't the last one, the function won't sleep but stopping
	  will still be set to warn next submodule caller's interrupt the
	  module wants to be idle.
  omap3isp_module_sync_is_stopping - Helper to verify if module was stopping
  @wait: ISP submodule's wait queue for streamoffinterrupt synchronization
  @stopping: flag which tells module wants to stop
  This function checks if ISP submodule was stopping. In case of yes, it
  notices the caller by setting stopping to 0 and waking up the wait queue.
  Returns 1 if it was stopping or 0 otherwise.
 --------------------------------------------------------------------------
  Clock management
 AEWB and AF share the same clock. 
	 NOTE: For CCDC & Preview submodules, we need to affect internal
	        RAM as well.
  isp_enable_clocks - Enable ISP clocks
  @isp: OMAP3 ISP device
  Return 0 if successful, or clk_prepare_enable return value if any of them
  fails.
  isp_disable_clocks - Disable ISP clocks
  @isp: OMAP3 ISP device
  omap3isp_get - Acquire the ISP resource.
  Initializes the clocks for the first acquire.
  Increment the reference count on the ISP. If the first reference is taken,
  enable clocks and power-up all submodules.
  Return a pointer to the ISP device structure, or NULL if an error occurred.
 We don't want to restore context before saving it! 
  omap3isp_put - Release the ISP
  Decrement the reference count on the ISP. If the last reference is released,
  power-down all submodules, disable clocks and free temporary buffers.
		 Reset the ISP if an entity has failed to stop. This is the
		  only way to recover from such conditions.
 --------------------------------------------------------------------------
  Platform device driver
  omap3isp_print_status - Prints the values of the ISP Control Module registers
  @isp: OMAP3 ISP device
  Power management support.
  As the ISP can't properly handle an input video stream interruption on a non
  frame boundary, the ISP pipelines need to be stopped before sensors get
  suspended. However, as suspending the sensors can require a running clock,
  which can be provided by the ISP, the ISP can't be completely suspended
  before the sensor.
  To solve this problem power management support is split into preparecomplete
  and suspendresume operations. The pipelines are stopped in prepare() and the
  ISP clocks get disabled in suspend(). Similarly, the clocks are re-enabled in
  resume(), and the the pipelines are restarted in complete().
  TODO: PM dependencies between the ISP and sensors are not modelled explicitly
  yet.
 CONFIG_PM 
	 Connect the sensor to the correct interface module.
	  Parallel sensors are connected directly to the CCDC, while
	  serial sensors are connected to the CSI2a, CCP2b or CSI2c
	  receiver through CSIPHY1 or CSIPHY2.
	
	  Not all interfaces are available on all revisions of the
	  ISP. The sub-devices of those interfaces aren't initialised
	  in such a case. Check this by ensuring the num_pads is
	  non-zero.
 Register internal entities 
  isp_create_links() - Create links for internal and external ISP entities
  @isp : Pointer to ISP device
  This function creates all links between ISP internal and external entities.
  Return: A negative error code on failure or zero on success. Possible error
  codes are those returned by media_create_pad_link().
 Create links between entities and video nodes. 
 Create links between entities. 
	
	  Create the ARM mapping, used by the ARM DMA mapping core to allocate
	  VAs. This will allocate a corresponding IOMMU domain.
 Attach the ARM VA mapping to the device. 
  isp_remove - Remove ISP platform device
  @pdev: Pointer to ISP platform device
  Always returns 0.
	
	  FIXME: now we assume the CRC is always there. Implement a way to
	  obtain this information from the sensor. Frame descriptors, perhaps?
  isp_probe - Probe ISP platform device
  @pdev: Pointer to ISP platform device
  Returns 0 if successful,
    -ENOMEM if no memory available,
    -ENODEV if no platform device resources found
      or no space for remapping registers,
    -EINVAL if couldn't install ISR,
    or clk_get return error value.
 Regulators 
	 Clocks
	 
	  The ISP clock tree is revision-dependent. We thus need to enable ICLK
	  manually to read the revision before calling __omap3isp_get().
	 
	  Start by mapping the ISP MMIO area, which is in two pieces.
	  The ISP IOMMU is in between. Map both now, and fill in the
	  ISP revision specific portions a little later in the
	  function.
 Memory resources 
 IOMMU 
 Interrupt 
 Entities 
 SPDX-License-Identifier: GPL-2.0-only
  ispcsiphy.c
  TI OMAP3 ISP - CSI PHY module
  Copyright (C) 2010 Nokia Corporation
  Copyright (C) 2009 Texas Instruments, Inc.
  Contacts: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
 	     Sakari Ailus <sakari.ailus@iki.fi>
 Should not happen in practice, but let's keep the compiler happy. 
 Select dataclock or datastrobe mode for CCP2 
 Only the CCP2B on PHY1 is configurable. 
  Configure OMAP 3 CSI PHY routing.
  @phy: relevant phy device
  @iface: ISP_INTERFACE_
  @on: power on or off
  @ccp2_strobe: false: dataclock, true: datastrobe
  Note that the underlying routing configuration registers are part of the
  control (SCM) register space and part of the CORE power domain on both 3430
  and 3630, so they will not hold their contents in off-mode. This isn't an
  issue since the MPU power domain is forced on whilst the ISP is in use.
  csiphy_power_autoswitch_enable
  @enable: Sets or clears the autoswitch function enable flag.
  csiphy_set_power
  @power: Power state to be set.
  Returns 0 if successful, or -EBUSY if the retry count is exceeded.
  TCLK values are OK at their reset values
 Clock and data lanes verification 
	
	  The PHY configuration is lost in off mode, that's not an
	  issue since the MPU power domain is forced on whilst the
	  ISP is in use.
 DPHY timing configuration 
 CSI-2 is DDR and we only count used lanes. 
 THS_TERM: Programmed value = ceil(12.5 nsDDRClk period) - 1. 
 THS_SETTLE: Programmed value = ceil(90 nsDDRClk period) + 3. 
 DPHY lane configuration 
  omap3isp_csiphy_init - Initialize the CSI PHY frontends
 SPDX-License-Identifier: GPL-2.0-only
  ispresizer.c
  TI OMAP3 ISP - Resizer module
  Copyright (C) 2010 Nokia Corporation
  Copyright (C) 2009 Texas Instruments, Inc
  Contacts: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
 	     Sakari Ailus <sakari.ailus@iki.fi>
  Resizer Constants
  Resizer Use Constraints
  "TRM ES3.1, table 12-46"
  Constants for ratio calculation
  Default (and only) configuration of filter coefficients.
  7-tap mode is for scale factors 0.25x to 0.5x.
  4-tap mode is for scale factors 0.5x to 4.0x.
  There shouldn't be any reason to recalculate these, EVER.
 For 8-phase 4-tap horizontal filter: 
 For 8-phase 4-tap vertical filter: 
 For 4-phase 7-tap horizontal filter: 
 For 4-phase 7-tap vertical filter: 
	
	  The dummy padding is required in 7-tap mode because of how the
	  registers are arranged physically.
  __resizer_get_format - helper function for getting resizer format
  @res   : pointer to resizer private structure
  @pad   : pad number
  @cfg: V4L2 subdev pad configuration
  @which : wanted subdev format
  return zero
  __resizer_get_crop - helper function for getting resizer crop rectangle
  @res   : pointer to resizer private structure
  @cfg: V4L2 subdev pad configuration
  @which : wanted subdev crop rectangle
  resizer_set_filters - Set resizer filters
  @res: Device context.
  @h_coeff: horizontal coefficient
  @v_coeff: vertical coefficient
  Return none
  resizer_set_bilinear - Chrominance horizontal algorithm select
  @res: Device context.
  @type: Filtering interpolation type.
  Filtering that is same as luminance processing is
  intended only for downsampling, and bilinear interpolation
  is intended only for upsampling.
  resizer_set_ycpos - Luminance and chrominance order
  @res: Device context.
  @pixelcode: pixel code.
  resizer_set_phase - Setup horizontal and vertical starting phase
  @res: Device context.
  @h_phase: horizontal phase parameters.
  @v_phase: vertical phase parameters.
  Horizontal and vertical phase range is 0 to 7
  resizer_set_luma - Setup luminance enhancer parameters
  @res: Device context.
  @luma: Structure for luminance enhancer parameters.
  Algorithm select:
   0x0: Disable
   0x1: [-1  2 -1]2 high-pass filter
   0x2: [-1 -2  6 -2 -1]4 high-pass filter
  Maximum gain:
   The data is coded in U4Q4 representation.
  Slope:
   The data is coded in U4Q4 representation.
  Coring offset:
   The data is coded in U8Q0 representation.
  The new luminance value is computed as:
   Y += HPF(Y) x max(GAIN, (HPF(Y) - CORE) x SLOP + 8) >> 4.
  resizer_set_source - Input source select
  @res: Device context.
  @source: Input source type
  If this field is set to RESIZER_INPUT_VP, the resizer input is fed from
  PreviewCCDC engine, otherwise from memory.
  resizer_set_ratio - Setup horizontal and vertical resizing value
  @res: Device context.
  @ratio: Structure for ratio parameters.
  Resizing range from 64 to 1024
 prepare horizontal filter coefficients 
 prepare vertical filter coefficients 
  resizer_set_dst_size - Setup the output height and width
  @res: Device context.
  @width: Output width.
  @height: Output height.
  Width :
   The value must be EVEN.
  Height:
   The number of bytes written to SDRAM must be
   a multiple of 16-bytes if the vertical resizing factor
   is greater than 1x (upsizing)
  resizer_set_output_offset - Setup memory offset for the output lines.
  @res: Device context.
  @offset: Memory offset.
  The 5 LSBs are forced to be zeros by the hardware to align on a 32-byte
  boundary; the 5 LSBs are read-only. For optimal use of SDRAM bandwidth,
  the SDRAM line offset must be set on a 256-byte boundary
  resizer_set_start - Setup vertical and horizontal start position
  @res: Device context.
  @left: Horizontal start position.
  @top: Vertical start position.
  Vertical start line:
   This field makes sense only when the resizer obtains its input
   from the preview engineCCDC
  Horizontal start pixel:
   Pixels are coded on 16 bits for YUV and 8 bits for color separate data.
   When the resizer gets its input from SDRAM, this field must be set
   to <= 15 for YUV 16-bit data and <= 31 for 8-bit color separate data
  resizer_set_input_size - Setup the input size
  @res: Device context.
  @width: The range is 0 to 4095 pixels
  @height: The range is 0 to 4095 lines
  resizer_set_src_offs - Setup the memory offset for the input lines
  @res: Device context.
  @offset: Memory offset.
  The 5 LSBs are forced to be zeros by the hardware to align on a 32-byte
  boundary; the 5 LSBs are read-only. This field must be programmed to be
  0x0 if the resizer input is from preview engineCCDC.
  resizer_set_intype - Input type select
  @res: Device context.
  @type: Pixel format type.
  __resizer_set_inaddr - Helper function for set input address
  @res : pointer to resizer private data structure
  @addr: input address
  return none
  The data rate at the horizontal resizer output must not exceed half the
  functional clock or 100 MPs, whichever is lower. According to the TRM
  there's no similar requirement for the vertical resizer output. However
  experience showed that vertical upscaling by 4 leads to SBL overflows (with
  data rates at the resizer output exceeding 300 MPs). Limiting the resizer
  output data rate to the functional clock or 200 MPs, whichever is lower,
  seems to get rid of SBL overflows.
  The maximum data rate at the output of the horizontal resizer can thus be
  computed with
  max intermediate rate <= L3 clock  input height  output height
  max intermediate rate <= L3 clock  2
  The maximum data rate at the resizer input is then
  max input rate <= max intermediate rate  input width  output width
  where the input width and height are the resizer input crop rectangle size.
  The TRM doesn't clearly explain if that's a maximum instant data rate or a
  maximum average data rate.
  When the resizer processes images from memory, the driver must slow down read
  requests on the input to at least comply with the internal data rate
  requirements. If the application real-time requirements can cope with slower
  processing, the resizer can be slowed down even more to put less pressure on
  the overall system.
  When the resizer processes images on the fly (either from the CCDC or the
  preview module), the same data rate requirements apply but they can't be
  enforced at the resizer level. The image input module (sensor, CCP2 or
  preview module) must not provide image data faster than the resizer can
  process.
  For live image pipelines, the data rate is set by the frame format, size and
  rate. The sensor output frame rate must not exceed the maximum resizer data
  rate.
  The resizer slows down read requests by inserting wait cycles in the SBL
  requests. The maximum number of 256-byte requests per second can be computed
  as (the data rate is multiplied by 2 to convert from pixels per second to
  bytes per second)
  request per second = data rate  2  256
  cycles per request = cycles per second  requests per second
  The number of cycles per second is controlled by the L3 clock, leading to
  cycles per request = L3 frequency  2  256  data rate
	 Compute the minimum number of cycles per request, based on the
	  pipeline maximum data rate. This is an absolute lower bound if we
	  don't want SBL overflows, so round the value up.
	 Compute the maximum number of cycles per request, based on the
	  requested frame rate. This is a soft upper bound to achieve a frame
	  rate equal or higher than the requested value, so round the value
	  down.
  omap3isp_resizer_busy - Checks if ISP resizer is busy.
  Returns busy field from ISPRSZ_PCR register.
  resizer_set_inaddr - Sets the memory address of the input frame.
  @addr: 32bit memory address aligned on 32byte boundary.
 This will handle crop settings in stream off state 
  Configures the memory address to which the output frame is written.
  @addr: 32bit memory address aligned on 32byte boundary.
  Note: For SBL efficiency reasons the address should be on a 256-byte
  boundary.
	
	  Set output address. This needs to be in its own function
	  because it changes often.
  resizer_print_status - Prints the values of the resizer module registers.
  resizer_calc_ratios - Helper function for calculating resizer ratios
  @res: pointer to resizer private data structure
  @input: input frame size
  @output: output frame size
  @ratio : return calculated ratios
  return none
  The resizer uses a polyphase sample rate converter. The upsampling filter
  has a fixed number of phases that depend on the resizing ratio. As the ratio
  computation depends on the number of phases, we need to compute a first
  approximation and then refine it.
  The inputoutputratio relationship is given by the OMAP34xx TRM:
  - 8-phase, 4-tap mode (RSZ = 64 ~ 512)
 	iw = (32  sph + (ow - 1)  hrsz + 16) >> 8 + 7
 	ih = (32  spv + (oh - 1)  vrsz + 16) >> 8 + 4
  - 4-phase, 7-tap mode (RSZ = 513 ~ 1024)
 	iw = (64  sph + (ow - 1)  hrsz + 32) >> 8 + 7
 	ih = (64  spv + (oh - 1)  vrsz + 32) >> 8 + 7
  iw and ih are the input width and height after cropping. Those equations need
  to be satisfied exactly for the resizer to work correctly.
  The equations can't be easily reverted, as the >> 8 operation is not linear.
  In addition, not all input sizes can be achieved for a given output size. To
  get the highest input size lower than or equal to the requested input size,
  we need to compute the highest resizing ratio that satisfies the following
  inequality (taking the 4-tap mode width equation as an example)
 	iw >= (32  sph + (ow - 1)  hrsz + 16) >> 8 - 7
  (where iw is the requested input width) which can be rewritten as
 	  iw - 7            >= (32  sph + (ow - 1)  hrsz + 16) >> 8
 	 (iw - 7) << 8      >=  32  sph + (ow - 1)  hrsz + 16 - b
 	((iw - 7) << 8) + b >=  32  sph + (ow - 1)  hrsz + 16
  where b is the value of the 8 least significant bits of the right hand side
  expression of the last inequality. The highest resizing ratio value will be
  achieved when b is equal to its maximum value of 255. That resizing ratio
  value will still satisfy the original inequality, as b will disappear when
  the expression will be shifted right by 8.
  The reverted equations thus become
  - 8-phase, 4-tap mode
 	hrsz = ((iw - 7)  256 + 255 - 16 - 32  sph)  (ow - 1)
 	vrsz = ((ih - 4)  256 + 255 - 16 - 32  spv)  (oh - 1)
  - 4-phase, 7-tap mode
 	hrsz = ((iw - 7)  256 + 255 - 32 - 64  sph)  (ow - 1)
 	vrsz = ((ih - 7)  256 + 255 - 32 - 64  spv)  (oh - 1)
  The ratios are integer values, and are rounded down to ensure that the
  cropped input size is not bigger than the uncropped input size.
  As the number of phasestaps, used to select the correct equations to compute
  the ratio, depends on the ratio, we start with the 4-tap mode equations to
  compute an approximation of the ratio, and switch to the 7-tap mode equations
  if the approximation is higher than the ratio threshold.
  As the 7-tap mode equations will return a ratio smaller than or equal to the
  4-tap mode equations, the resulting ratio could become lower than or equal to
  the ratio threshold. This 'equations loop' isn't an issue as long as the
  correct equations are used to compute the final input size. Starting with the
  4-tap mode equations ensure that, in case of values resulting in a 'ratio
  loop', the smallest of the ratio values will be used, never exceeding the
  requested input size.
  We first clamp the output size according to the hardware capability to avoid
  auto-cropping the input more than required to satisfy the TRM equations. The
  minimum output size is achieved with a scaling factor of 1024. It is thus
  computed using the 7-tap equations.
 	min ow = ((iw - 7)  256 - 32 - 64  sph)  1024 + 1
 	min oh = ((ih - 7)  256 - 32 - 64  spv)  1024 + 1
  Similarly, the maximum output size is achieved with a scaling factor of 64
  and computed using the 4-tap equations.
 	max ow = ((iw - 7)  256 + 255 - 16 - 32  sph)  64 + 1
 	max oh = ((ih - 4)  256 + 255 - 16 - 32  spv)  64 + 1
  The additional +255 term compensates for the round down operation performed
  by the TRM equations when shifting the value right by 8 bits.
  We then compute and clamp the ratios (x14 ~ x4). Clamping the output size to
  the maximum value guarantees that the ratio value will never be smaller than
  the minimum, but it could still slightly exceed the maximum. Clamping the
  ratio will thus result in a resizing factor slightly larger than the
  requested value.
  To accommodate that, and make sure the TRM equations are satisfied exactly, we
  compute the input crop rectangle as the last step.
  As if the situation wasn't complex enough, the maximum output width depends
  on the vertical resizing ratio.  Fortunately, the output height doesn't
  depend on the horizontal resizing ratio. We can then start by computing the
  output height and the vertical ratio, and then move to computing the output
  width and the horizontal ratio.
	
	  Clamp the output height based on the hardware capabilities and
	  compute the vertical resizing ratio.
	
	  Compute the minimum and maximum output widths based on the hardware
	  capabilities. The maximum depends on the vertical resizing ratio.
	
	  The output width must be even, and must be a multiple of 16 bytes
	  when upscaling vertically. Clamp the output width to the valid range.
	  Take the alignment into account (the maximum width in 7-tap mode on
	  ES2 isn't a multiple of 8) and align the result up to make sure it
	  won't be smaller than the minimum.
 Center the new crop rectangle. 
  resizer_set_crop_params - Setup hardware with cropping parameters
  @res : resizer private structure
  @input : format on sink pad
  @output : format on source pad
  return none
 Set chrominance horizontal algorithm 
 Calculate additional offset for crop 
		
		  Write lowest 4 bits of horizontal pixel offset (in pixels),
		  vertical start must be 0.
		
		  Set start (read) address for cropping, in bytes.
		  Lowest 5 bits must be zero.
		
		  Set vertical start line and horizontal starting pixel.
		  If the input is from CCDCPREV, horizontal start field is
		  in bytes (twice number of pixels).
 Input address and offset must be 0 for previewccdc input 
 Set the input size 
 RESZ_PAD_SINK 
 YUV422 interleaved, default phase, no luma enhancement 
 RESZ_PAD_SOURCE 
 -----------------------------------------------------------------------------
  Interrupt handling
	
	  If ISP_VIDEO_DMAQUEUE_QUEUED is set, DMA queue had an underrun
	  condition, the module was paused and now we have a buffer queued
	  on the output again. Restart the pipeline if running in continuous
	  mode.
	 Complete the output buffer and, if reading from memory, the input
	  buffer.
		 If an underrun occurs, the video queue operation handler will
		  restart the resizer. Otherwise restart it immediately.
  omap3isp_resizer_isr - ISP resizer interrupt handler
  Manage the resizer video buffers and configure shadowed and busy-locked
  registers.
 -----------------------------------------------------------------------------
  ISP video operations
	
	  We now have a buffer queued on the output. Despite what the
	  TRM says, the resizer can't be restarted immediately.
	  Enabling it in one shot mode in the middle of a frame (or at
	  least asynchronously to the frame) results in the output
	  being shifted randomly leftright and updown, as if the
	  hardware didn't synchronize itself to the beginning of the
	  frame correctly.
	 
	  Restart the resizer on the next sync interrupt if running in
	  continuous mode or when starting the stream.
 -----------------------------------------------------------------------------
  V4L2 subdev operations
  resizer_set_stream - EnableDisable streaming on resizer subdev
  @sd: ISP resizer V4L2 subdev
  @enable: 1 == Enable, 0 == Disable
  The resizer hardware can't be enabled without a memory buffer to write to.
  As the s_stream operation is called in response to a STREAMON call without
  any buffer queued yet, just update the state field and return immediately.
  The resizer will be enabled in resizer_video_queue().
  resizer_try_crop - mangles crop parameters.
	 Crop rectangle is constrained by the output size so that zoom ratio
	  cannot exceed +-4.0.
 Crop can not go beyond of the input rectangle 
  resizer_get_selection - Retrieve a selection rectangle on a pad
  @sd: ISP resizer V4L2 subdevice
  @cfg: V4L2 subdev pad configuration
  @sel: Selection rectangle
  The only supported rectangles are the crop rectangles on the sink pad.
  Return 0 on success or a negative error code otherwise.
  resizer_set_selection - Set a selection rectangle on a pad
  @sd: ISP resizer V4L2 subdevice
  @cfg: V4L2 subdev pad configuration
  @sel: Selection rectangle
  The only supported rectangle is the actual crop rectangle on the sink pad.
  FIXME: This function currently behaves as if the KEEP_CONFIG selection flag
  was always set.
  Return 0 on success or a negative error code otherwise.
	 Clamp the crop rectangle to the bounds, and then mangle it further to
	  fulfill the TRM equations. Store the clamped but otherwise unmangled
	  rectangle to avoid cropping the input multiple times: when an
	  application sets the output format, the current crop rectangle is
	  mangled during crop rectangle computation, which would lead to a new,
	  smaller input crop rectangle every time the output size is set if we
	  stored the mangled rectangle.
	 Update the source format, resizing ratios and crop rectangle. If
	  streaming is on the IRQ handler will reprogram the resizer after the
	  current frame. We thus we need to protect against race conditions.
 resizer pixel formats 
  resizer_try_format - Handle try format by pad subdev method
  @res   : ISP resizer device
  @cfg: V4L2 subdev pad configuration
  @pad   : pad num
  @fmt   : pointer to v4l2 format structure
  @which : wanted subdev format
  resizer_enum_mbus_code - Handle pixel format enumeration
  @sd     : pointer to v4l2 subdev structure
  @cfg: V4L2 subdev pad configuration
  @code   : pointer to v4l2_subdev_mbus_code_enum structure
  return -EINVAL or zero on success
  resizer_get_format - Handle get format by pads subdev method
  @sd    : pointer to v4l2 subdev structure
  @cfg: V4L2 subdev pad configuration
  @fmt   : pointer to v4l2 subdev format structure
  return -EINVAL or zero on success
  resizer_set_format - Handle set format by pads subdev method
  @sd    : pointer to v4l2 subdev structure
  @cfg: V4L2 subdev pad configuration
  @fmt   : pointer to v4l2 subdev format structure
  return -EINVAL or zero on success
 reset crop rectangle 
 Propagate the format from sink to source 
		 Compute and store the active crop rectangle and resizer
		  ratios. format already points to the source pad active
		  format.
  resizer_init_formats - Initialize formats on all pads
  @sd: ISP resizer V4L2 subdevice
  @fh: V4L2 subdev file handle
  Initialize all pad formats with default values. If fh is not NULL, try
  formats are initialized on the file handle. Otherwise active formats are
  initialized on the device.
 subdev video operations 
 subdev pad operations 
 subdev operations 
 subdev internal operations 
 -----------------------------------------------------------------------------
  Media entity operations
  resizer_link_setup - Setup resizer connections.
  @entity : Pointer to media entity structure
  @local  : Pointer to local pad array
  @remote : Pointer to remote pad array
  @flags  : Link flags
  return -EINVAL or zero on success
 FIXME: this is actually a hack! 
 read from memory 
 read from ccdc or previewer 
 resizer always write to memory 
 media operations 
 Register the subdev and video nodes. 
 -----------------------------------------------------------------------------
  ISP resizer initialization and cleanup
  resizer_init_entities - Initialize resizer subdev and media entity.
  @res : Pointer to resizer device structure
  return -ENOMEM or zero on success
 group ID for isp subdevs 
  isp_resizer_init - Resizer initialization.
  @isp : Pointer to ISP device
  return -ENOMEM or zero on success
 SPDX-License-Identifier: GPL-2.0-only
  isph3a_af.c
  TI OMAP3 ISP - H3A AF module
  Copyright (C) 2010 Nokia Corporation
  Copyright (C) 2009 Texas Instruments, Inc.
  Contacts: David Cohen <dacohen@gmail.com>
 	     Laurent Pinchart <laurent.pinchart@ideasonboard.com>
 	     Sakari Ailus <sakari.ailus@iki.fi>
 Linux specific include files 
 Configure Hardware Registers 
 Set height in AFPAX1 
 Configure AFPAX2 Register 
 Set Line Increment in AFPAX2 Register 
 Set Vertical Count 
 Set Horizontal Count 
 Configure PAXSTART Register 
Configure Horizontal Start 
 Configure Vertical Start 
SetIIRSH Register 
Set IIR Filter0 Coefficients 
Set IIR Filter1 Coefficients 
 set AFCOEF0010 Register 
 set AFCOEF1010 Register 
 PCR Register 
 Set RGB Position 
 Set Accumulator Mode 
 Set A-law 
 HMF Configurations 
 Enable HMF 
 Set Median Threshold 
 Set PCR Register 
 Function to check paxel parameters 
 Check horizontal Count 
 Check Vertical Count 
 Check width 
 Check Line Increment 
 Check Horizontal Start 
 Check IIR 
 Hack: If paxel size is 12, the 10th AF window may be corrupted 
 User buf_size request wasn't enough 
 Update local parameters 
 alaw 
 hmf 
 rgbpos 
 iir 
 paxel 
 af_mode 
		
		  User might be asked for a bigger buffer than necessary for
		  this configuration. In order to return the right amount of
		  data during buffer request, let's calculate the size here
		  instead of stick with user_cfg->buf_size.
 Function to register the AF character device driver. 
 Set recover state configuration 
 SPDX-License-Identifier: GPL-2.0-only
  ispvideo.c
  TI OMAP3 ISP - Generic video node
  Copyright (C) 2009-2010 Nokia Corporation
  Contacts: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
 	     Sakari Ailus <sakari.ailus@iki.fi>
 -----------------------------------------------------------------------------
  Helper functions
  NOTE: When adding new media bus codes, always remember to add
  corresponding in-memory formats to the table below!!!
	 Empty entry to catch the unsupported pixel code (0) used by the CCDC
	  module and avoid NULL pointer dereferences.
  isp_video_mbus_to_pix - Convert v4l2_mbus_framefmt to v4l2_pix_format
  @video: ISP video instance
  @mbus: v4l2_mbus_framefmt format (input)
  @pix: v4l2_pix_format format (output)
  Fill the output pix structure with information from the input mbus format.
  The bytesperline and sizeimage fields are computed from the requested bytes
  per line value in the pix format and information from the video instance.
  Return the number of padding bytes at end of line.
	 Clamp the requested bytes per line value. If the maximum bytes per
	  line value is zero, the module doesn't support user configurable line
	  sizes. Override the requested value with the minimum in that case.
	 Skip the last format in the loop so that it will be selected if no
	  match is found.
 Return a pointer to the ISP video instance at the far end of the pipeline. 
 -----------------------------------------------------------------------------
  Video queue operations
	 Refuse to prepare the buffer is the video node has registered an
	  error. We don't need to take any lock here as the operation is
	  inherently racy. The authoritative check will be performed in the
	  queue handler, which can't return an error, this check is just a best
	  effort to notify userspace as early as possible.
  isp_video_buffer_queue - Add buffer to streaming queue
  @buf: Video buffer
  In memory-to-memory mode, start streaming on the pipeline if buffers are
  queued on both the input and the output, if the pipeline isn't already busy.
  If the pipeline is busy, it will be restarted in the output module interrupt
  handler.
  omap3isp_video_return_buffers - Return all queued buffers to videobuf2
  @video: ISP video object
  @state: new state for the returned buffers
  Return all buffers queued on the video node to videobuf2 in the given state.
  The buffer state should be VB2_BUF_STATE_QUEUED if called due to an error
  when starting the stream, or VB2_BUF_STATE_ERROR otherwise.
  The function must be called with the video irqlock held.
	 In sensor-to-memory mode, the stream can be started synchronously
	  to the stream on command. In memory-to-memory mode, it will be
	  started when buffers are queued on both the input and output.
  omap3isp_video_buffer_next - Complete the current buffer and return the next
  @video: ISP video object
  Remove the current video buffer from the DMA queue and fill its timestamp and
  field count before handing it back to videobuf2.
  For capture video nodes the buffer state is set to VB2_BUF_STATE_DONE if no
  error has been flagged in the pipeline, or to VB2_BUF_STATE_ERROR otherwise.
  For video output nodes the buffer state is always set to VB2_BUF_STATE_DONE.
  The DMA queue is expected to contain at least one buffer.
  Return a pointer to the next buffer in the DMA queue, or NULL if the queue is
  empty.
	 Do frame number propagation only if this is the output video node.
	  Frame number either comes from the CSI receivers or it gets
	  incremented here if H3A is not active.
	  Note: There is no guarantee that the output buffer will finish
	  first, so the input number might lag behind by 1 in some cases.
 Report pipeline errors to userspace on the capture device side. 
  omap3isp_video_cancel_stream - Cancel stream on a video node
  @video: ISP video object
  Cancelling a stream returns all buffers queued on the video node to videobuf2
  in the erroneous state and makes sure no new buffer can be queued.
  omap3isp_video_resume - Perform resume operation on the buffers
  @video: ISP video object
  @continuous: Pipeline is in single shot mode if 0 or continuous mode otherwise
  This function is intended to be used on suspendresume scenario. It
  requests video queue layer to discard buffers marked as DONE if it's in
  continuous mode and requests ISP modules to queue again the ACTIVE buffer
  if there's any.
 -----------------------------------------------------------------------------
  V4L2 ioctls
 Replace unsupported field orders with sane defaults. 
 Progressive is supported everywhere. 
 ALTERNATE is not supported on output nodes. 
		 The ISP has no concept of video standard, select the
		  top-bottom order when the unqualified interlaced order is
		  requested.
 Interlaced orders are only supported at the CCDC output. 
		 All other field orders are currently unsupported, default to
		  progressive.
	 Fill the bytesperline and sizeimage fields by converting to media bus
	  format and back to pixel format.
	 Try the get selection operation first and fallback to get format if not
	  implemented.
 Memory-to-memory pipelines have no external subdev. 
 Is the entity part of the pipeline? 
 ISP entities have always sink pad == 0. Find source. 
		
		  Check that maximum allowed CCDC pixel rate isn't
		  exceeded by the pixel rate.
  Stream management
  Every ISP pipeline has a single input and a single output. The input can be
  either a sensor or a video node. The output is always a video node.
  As every pipeline has an output video node, the ISP video objects at the
  pipeline output stores the pipeline state. It tracks the streaming state of
  both the input and output, as well as the availability of buffers.
  In sensor-to-memory mode, frames are always available at the pipeline input.
  Starting the sensor usually requires I2C transfers and must be done in
  interruptible context. The pipeline is started and stopped synchronously
  to the stream onoff commands. All modules in the pipeline will get their
  subdev set stream handler called. The module at the end of the pipeline must
  delay starting the hardware until buffers are available at its output.
  In memory-to-memory mode, startingstopping the stream requires
  synchronization between the input and output. ISP modules can't be stopped
  in the middle of a frame, and at least some of the modules seem to become
  busy as soon as they're started, even if they don't receive a frame start
  event. For that reason frames need to be processed in single-shot mode. The
  driver needs to wait until a frame is completely processed and written to
  memory before restarting the pipeline for the next frame. Pipelined
  processing might be possible but requires more testing.
  Stream start must be delayed until buffers are available at both the input
  and output. The pipeline must be started in the videobuf queue callback with
  the buffers queue spinlock held. The modules subdev set stream operation must
  not sleep.
	 Start streaming on the pipeline. No link touching an entity in the
	  pipeline can be activated or deactivated once streaming is started.
 TODO: Implement PM QoS 
	 Verify that the currently configured format matches the output of
	  the connected subdev.
	 Set the maximum time per frame as the value requested by userspace.
	  This is a soft limit that can be overridden if the hardware doesn't
	  support the request limit.
 TODO: Implement PM QoS 
	 The DMA queue must be emptied here, otherwise CCDC interrupts that
	  will get triggered the next time the CCDC is powered up will try to
	  access buffers that might have been freed but still present in the
	  DMA queue. This can easily get triggered if the above
	  omap3isp_pipeline_set_stream() call fails on a system with a
	  free-running sensor.
 Make sure we're not streaming yet. 
 Update the pipeline state. 
 Stop the stream. 
 TODO: Implement PM QoS 
 -----------------------------------------------------------------------------
  V4L2 file operations
 If this is the first user, initialise the pipeline. 
 Disable streaming and free the buffers queue resources. 
 Release the file handle. 
 -----------------------------------------------------------------------------
  ISP video core
 Initialize the video device. 
 SPDX-License-Identifier: GPL-2.0-only
  isppreview.c
  TI OMAP3 ISP driver - Preview module
  Copyright (C) 2010 Nokia Corporation
  Copyright (C) 2009 Texas Instruments, Inc.
  Contacts: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
 	     Sakari Ailus <sakari.ailus@iki.fi>
 Default values in Office Fluorescent Light for RGBtoRGB Blending 
 RGB-RGB Matrix 
 RGB Offset 
 Default values in Office Fluorescent Light for RGB to YUV Conversion
 CSC Coef Matrix 
 CSC Offset 
 Default values in Office Fluorescent Light for CFA Gradient
 Default values in Office Fluorescent Light for Chroma Suppression
 Default values in Office Fluorescent Light for Noise Filter
 Default values for White Balance 
 Default values in Office Fluorescent Light for Black Adjustment
  Margins and image size limits.
  The preview engine crops several rows and columns internally depending on
  which filters are enabled. To avoid format changes when the filters are
  enabled or disabled (which would prevent them from being turned on or off
  during streaming), the driver assumes all filters that can be configured
  during streaming are enabled when computing sink crop and source format
  limits.
  If a filter is disabled, additional cropping is automatically added at the
  preview engine input by the driver to avoid overflow at line and frame end.
  This is completely transparent for applications.
  Median filter		4 pixels
  Noise filter,
  Faulty pixels correction	4 pixels, 4 lines
  Color suppression		2 pixels
  or luma enhancement
  -------------------------------------------------------------
  Maximum total		10 pixels, 4 lines
  The color suppression and luma enhancement filters are applied after bayer to
  YUV conversion. They thus can crop one pixel on the left and one pixel on the
  right side of the image without changing the color pattern. When both those
  filters are disabled, the driver must crop the two pixels on the same side of
  the image to avoid changing the bayer pattern. The left margin is thus set to
  6 pixels and the right margin to 4 pixels.
  Coefficient Tables for the submodules in Preview.
  Array is initialised with the values from.the tables text file.
  CFA Filter Coefficient Table
  Default Gamma Correction Table - All components
  Noise Filter Threshold table
  Luminance Enhancement Table
  preview_config_luma_enhancement - Configure the Luminance Enhancement table
  preview_enable_luma_enhancement - Enabledisable Luminance Enhancement
  preview_enable_invalaw - Enabledisable Inverse A-Law decompression
  preview_config_hmed - Configure the Horizontal Median Filter
  preview_enable_hmed - Enabledisable the Horizontal Median Filter
  preview_config_cfa - Configure CFA Interpolation for Bayer formats
  The CFA table is organised in four blocks, one per Bayer component. The
  hardware expects blocks to follow the Bayer order of the input data, while
  the driver stores the table in GRBG order in memory. The blocks need to be
  reordered to support non-GRBG Bayer patterns.
 GRBG 
 RGGB 
 BGGR 
 GBRG 
  preview_config_chroma_suppression - Configure Chroma Suppression
  preview_enable_chroma_suppression - Enabledisable Chrominance Suppression
  preview_config_whitebalance - Configure White Balance parameters
  Coefficient matrix always with default values.
  preview_config_blkadj - Configure Black Adjustment
  preview_config_rgb_blending - Configure RGB-RGB Blending
  preview_config_csc - Configure Color Space Conversion (RGB to YCbYCr)
  preview_config_yc_range - Configure the max and min Y and C values
  preview_config_dcor - Configure Couplet Defect Correction
  preview_enable_dcor - Enabledisable Couplet Defect Correction
  preview_enable_drkframe_capture - Enabledisable Dark Frame Capture
  preview_enable_drkframe - Enabledisable Dark Frame Subtraction
  preview_config_noisefilter - Configure the Noise Filter
  preview_enable_noisefilter - Enabledisable the Noise Filter
  preview_config_gammacorrn - Configure the Gamma Correction tables
  preview_enable_gammacorrn - Enabledisable Gamma Correction
  When gamma correction is disabled, the module is bypassed and its output is
  the 8 MSB of the 10-bit input .
  preview_config_contrast - Configure the Contrast
  Value should be programmed before enabling the module.
  preview_config_brightness - Configure the Brightness
  preview_update_contrast - Updates the contrast.
  @contrast: Pointer to hold the current programmed contrast value.
  Value should be programmed before enabling the module.
  preview_update_brightness - Updates the brightness in preview module.
  @brightness: Pointer to hold the current programmed brightness value.
 Mark all shadow parameters we are going to touch as busy. 
 Mark all active parameters we are going to touch as busy. 
		 Set the update flag for shadow parameters that have been
		  updated and clear the busy flag for all shadow parameters.
		 Clear the update flag for active parameters that have been
		  applied and the busy flag for all active parameters.
	 Switch active parameters with updated shadow parameters when the
	  shadow parameter has been updated and neither the active not the
	  shadow parameter is busy.
	 Remove the update flag for the shadow copy of parameters we have
	  switched.
 preview parameters update structure 
 Keep the array indexed by the OMAP3ISP_PREV_ bit number. 
 OMAP3ISP_PREV_LUMAENH  {
 OMAP3ISP_PREV_INVALAW  {
 OMAP3ISP_PREV_HRZ_MED  {
 OMAP3ISP_PREV_CFA  {
 OMAP3ISP_PREV_CHROMA_SUPP  {
 OMAP3ISP_PREV_WB  {
 OMAP3ISP_PREV_BLKADJ  {
 OMAP3ISP_PREV_RGB2RGB  {
 OMAP3ISP_PREV_COLOR_CONV  {
 OMAP3ISP_PREV_YC_LIMIT  {
 OMAP3ISP_PREV_DEFECT_COR  {
 Previously OMAP3ISP_PREV_GAMMABYPASS, not used anymore  {
 OMAP3ISP_PREV_DRK_FRM_CAPTURE  {
 OMAP3ISP_PREV_DRK_FRM_SUBTRACT  {
 OMAP3ISP_PREV_LENS_SHADING  {
 OMAP3ISP_PREV_NF  {
 OMAP3ISP_PREV_GAMMA  {
 OMAP3ISP_PREV_CONTRAST  {
 OMAP3ISP_PREV_BRIGHTNESS  {
  preview_config - Copy and update local structure with userspace preview
                   configuration.
  @prev: ISP preview engine
  @cfg: Configuration
  Return zero if success or -EFAULT if the configuration can't be copied from
  userspace.
 Mark the shadow parameters we're going to update as busy. 
  preview_setup_hw - Setup preview registers andor internal memory
  @prev: pointer to preview private structure
  @update: Bitmask of parameters to setup
  @active: Bitmask of parameters active in set 0
  Note: can be called from interrupt context
  Return none
  preview_config_ycpos - Configure byte layout of YUV image.
  @prev: pointer to previewer private structure
  @pixelcode: pixel code
  preview_config_averager - Enable  disable  configure averager
  @average: Average value to be configured.
  preview_config_input_format - Configure the input format
  @prev: The preview engine
  @info: Sink pad format information
  Enable and configure CFA interpolation for Bayer formats and disable it for
  greyscale formats.
  The CFA table is organised in four blocks, one per Bayer component. The
  hardware expects blocks to follow the Bayer order of the input data, while
  the driver stores the table in GRBG order in memory. The blocks need to be
  reordered to support non-GRBG Bayer patterns.
 Disable CFA for non-Bayer formats. 
  preview_config_input_size - Configure the input frame size
  The preview engine crops several rows and columns internally depending on
  which processing blocks are enabled. The driver assumes all those blocks are
  enabled when reporting source pad formats to userspace. If this assumption is
  not true, rows and columns must be manually cropped at the preview engine
  input to avoid overflows at the end of lines and frames.
  See the explanation at the PREV_MARGIN_ definitions for more details.
  preview_config_inlineoffset - Configures the Read address line offset.
  @prev: Preview module
  @offset: Line offset
  According to the TRM, the line offset must be aligned on a 32 bytes boundary.
  However, a hardware bug requires the memory start address to be aligned on a
  64 bytes boundary, so the offset probably should be aligned on 64 bytes as
  well.
  preview_set_inaddr - Sets memory address of input frame.
  @addr: 32bit memory address aligned on 32byte boundary.
  Configures the memory address from which the input frame is to be read.
  preview_config_outlineoffset - Configures the Write address line offset.
  @offset: Line Offset for the preview output.
  The offset must be a multiple of 32 bytes.
  preview_set_outaddr - Sets the memory address to store output frame
  @addr: 32bit memory address aligned on 32byte boundary.
  Configures the memory address to which the output frame is written.
	 Compute the minimum number of cycles per request, based on the
	  pipeline maximum data rate. This is an absolute lower bound if we
	  don't want SBL overflows, so round the value up.
	 Compute the maximum number of cycles per request, based on the
	  requested frame rate. This is a soft upper bound to achieve a frame
	  rate equal or higher than the requested value, so round the value
	  down.
  omap3isp_preview_busy - Gets busy state of preview module.
  omap3isp_preview_restore_context - Restores the values of preview registers
  preview_print_status - Dump preview module registers to the kernel log
  preview_init_params - init image processing parameters.
  @prev: pointer to previewer private structure
 Init values 
  preview_max_out_width - Handle previewer hardware output limitations
  @prev: pointer to previewer private structure
  returns maximum width output for current isp revision
 Mark all active parameters we are going to touch as busy. 
 PREV_PAD_SINK 
 PREV_PAD_SOURCE 
 -----------------------------------------------------------------------------
  Interrupt handling
	 The PCR.SOURCE bit is automatically reset to 0 when the PCR.ENABLE
	  bit is set. As the preview engine is used in single-shot mode, we
	  need to set PCR.SOURCE before enabling the preview engine.
	
	  If ISP_VIDEO_DMAQUEUE_QUEUED is set, DMA queue had an underrun
	  condition, the module was paused and now we have a buffer queued
	  on the output again. Restart the pipeline if running in continuous
	  mode.
		 If an underrun occurs, the video queue operation handler will
		  restart the preview engine. Otherwise restart it immediately.
  omap3isp_preview_isr - ISP preview engine interrupt handler
  Manage the preview engine video buffers and configure shadowed registers.
 -----------------------------------------------------------------------------
  ISP video operations
 -----------------------------------------------------------------------------
  V4L2 subdev operations
  preview_s_ctrl - Handle set control subdev method
  @ctrl: pointer to v4l2 control structure
  preview_ioctl - Handle preview module private ioctl's
  @sd: pointer to v4l2 subdev structure
  @cmd: configuration command
  @arg: configuration argument
  return -EINVAL or zero on success
  preview_set_stream - EnableDisable streaming on preview subdev
  @sd    : pointer to v4l2 subdev structure
  @enable: 1 == Enable, 0 == Disable
  return -EINVAL or zero on success
 previewer format descriptions 
  preview_try_format - Validate a format
  @prev: ISP preview engine
  @cfg: V4L2 subdev pad configuration
  @pad: pad number
  @fmt: format to be validated
  @which: tryactive format selector
  Validate and adjust the given format for the given pad based on the preview
  engine limits and the format and crop rectangles on other pads.
		 When reading data from the CCDC, the input size has already
		  been mangled by the CCDC output pad so it can be accepted
		  as-is.
		 
		  When reading data from memory, clamp the requested width and
		  height. The TRM doesn't specify a minimum input height, make
		  sure we got enough lines to enable the noise filter and color
		  filter array interpolation.
 If not found, use SGRBG10 as default 
		 The preview module output size is configurable through the
		  averager (horizontal scaling by 11, 12, 14 or 18). This
		  is not supported yet, hardcode the output size to the crop
		  rectangle size.
  preview_try_crop - Validate a crop rectangle
  @prev: ISP preview engine
  @sink: format on the sink pad
  @crop: crop rectangle to be validated
  The preview engine crops lines and columns for its internal operation,
  depending on which filters are enabled. Enforce minimum crop margins to
  handle that transparently for userspace.
  See the explanation at the PREV_MARGIN_ definitions for more details.
	 When processing data on-the-fly from the CCDC, at least 2 pixels must
	  be cropped from the left and right sides of the image. As we don't
	  know which filters will be enabled, increase the left and right
	  margins by two.
	 The CFA filter crops 4 lines and 4 columns in Bayer mode, and 2 lines
	  and no columns in other modes. Increase the margins based on the sink
	  format.
 Restrict lefttop to even values to keep the Bayer pattern. 
  preview_enum_mbus_code - Handle pixel format enumeration
  @sd     : pointer to v4l2 subdev structure
  @cfg: V4L2 subdev pad configuration
  @code   : pointer to v4l2_subdev_mbus_code_enum structure
  return -EINVAL or zero on success
  preview_get_selection - Retrieve a selection rectangle on a pad
  @sd: ISP preview V4L2 subdevice
  @cfg: V4L2 subdev pad configuration
  @sel: Selection rectangle
  The only supported rectangles are the crop rectangles on the sink pad.
  Return 0 on success or a negative error code otherwise.
  preview_set_selection - Set a selection rectangle on a pad
  @sd: ISP preview V4L2 subdevice
  @cfg: V4L2 subdev pad configuration
  @sel: Selection rectangle
  The only supported rectangle is the actual crop rectangle on the sink pad.
  Return 0 on success or a negative error code otherwise.
 The crop rectangle can't be changed while streaming. 
	 Modifying the crop rectangle always changes the format on the source
	  pad. If the KEEP_CONFIG flag is set, just return the current crop
	  rectangle.
 Update the source format. 
  preview_get_format - Handle get format by pads subdev method
  @sd : pointer to v4l2 subdev structure
  @cfg: V4L2 subdev pad configuration
  @fmt: pointer to v4l2 subdev format structure
  return -EINVAL or zero on success
  preview_set_format - Handle set format by pads subdev method
  @sd : pointer to v4l2 subdev structure
  @cfg: V4L2 subdev pad configuration
  @fmt: pointer to v4l2 subdev format structure
  return -EINVAL or zero on success
 Propagate the format from sink to source 
 Reset the crop rectangle. 
 Update the source format. 
  preview_init_formats - Initialize formats on all pads
  @sd: ISP preview V4L2 subdevice
  @fh: V4L2 subdev file handle
  Initialize all pad formats with default values. If fh is not NULL, try
  formats are initialized on the file handle. Otherwise active formats are
  initialized on the device.
 subdev core operations 
 subdev video operations 
 subdev pad operations 
 subdev operations 
 subdev internal operations 
 -----------------------------------------------------------------------------
  Media entity operations
  preview_link_setup - Setup previewer connections.
  @entity : Pointer to media entity structure
  @local  : Pointer to local pad array
  @remote : Pointer to remote pad array
  @flags  : Link flags
  return -EINVAL or zero on success
 FIXME: this is actually a hack! 
 read from memory 
 read from ccdc 
	
	  The ISP core doesn't support pipelines with multiple video outputs.
	  Revisit this when it will be implemented, and return -EBUSY for now.
 write to memory 
 write to resizer 
 media operations 
 Register the subdev and video nodes. 
 -----------------------------------------------------------------------------
  ISP previewer initialisation and cleanup
  preview_init_entities - Initialize subdev and media entity.
  @prev : Pointer to preview structure
  return -ENOMEM or zero on success
 group ID for isp subdevs 
	 According to the OMAP34xx TRM, video buffers need to be aligned on a
	  32 bytes boundary. However, an undocumented hardware bug requires a
	  64 bytes boundary at the preview engine input.
  omap3isp_preview_init - Previewer initialization.
  @isp : Pointer to ISP device
  return -ENOMEM or zero on success
 SPDX-License-Identifier: GPL-2.0-only
  ispstat.c
  TI OMAP3 ISP - Statistics core
  Copyright (C) 2010 Nokia Corporation
  Copyright (C) 2009 Texas Instruments, Inc
  Contacts: David Cohen <dacohen@gmail.com>
 	     Laurent Pinchart <laurent.pinchart@ideasonboard.com>
 	     Sakari Ailus <sakari.ailus@iki.fi>
  MAGIC_SIZE must always be the greatest common divisor of
  AEWB_PACKET_SIZE and AF_PAXEL_SIZE.
 HACK: AF module seems to be writing one more paxel data than it should. 
  HACK: H3A modules go to an invalid state after have a SBL overflow. It makes
  the next buffer to start to be written in the same point where the overflow
  occurred instead of the configured address. The only known way to make it to
  go back to a valid state is having a valid buffer processing. Of course it
  requires at least a doubled buffer size to avoid an access to invalid memory
  region. But it does not fix everything. It may happen more than one
  consecutive SBL overflows. In that case, it might be unpredictable how many
  buffers the allocated memory should fit. For that case, a recover
  configuration was created. It produces the minimum buffer size for each H3A
  module and decrease the change for more SBL overflows. This recover state
  will be enabled every time a SBL overflow occur. As the output buffer size
  isn't big, it's possible to have an extra size able to fit many recover
  buffers making it extreamily unlikely to have an access to invalid memory
  region.
  HACK: Because of HW issues the generic layer sometimes need to have
  different behaviour for different statistic modules.
 Sync the initial and final magic words. 
 Checking initial magic numbers. They shouldn't be here anymore. 
 Checking magic numbers at the end. They must be still here. 
	
	  Inserting MAGIC_NUM at the beginning and end of the buffer.
	  buf->buf_size is set only after the buffer is queued. For now the
	  right buf_size for the current configuration is pointed by
	  stat->buf_size.
		
		  Don't select the buffer which is being copied to
		  userspace or used by the module.
 Don't select uninitialised buffers if it's not required 
 Pick uninitialised buffer over anything else if look_empty 
 Choose the oldest buffer 
 Get next free buffer to write the statistics to and mark it active. 
 Overwriting unused active buffer 
 Get buffer to userspace. 
 Mark empty because it doesn't have valid data. 
 Buffer isn't corrupted. 
  The device passed to the DMA API depends on whether the statistics block uses
  ISP DMA, external DMA or PIO to transfer data.
  The first case (for the AEWB and AF engines) passes the ISP device, resulting
  in the DMA buffers being mapped through the ISP IOMMU.
  The second case (for the histogram engine) should pass the DMA engine device.
  As that device isn't accessible through the OMAP DMA engine API the driver
  passes NULL instead, resulting in the buffers being mapped directly as
  physical pages.
  The third case (for the histogram engine) doesn't require any mapping. The
  buffers could be allocated with kmallocvmalloc, but we still use
  dma_alloc_coherent() for consistency purpose.
 Are the old buffers big enough? 
  omap3isp_stat_request_statistics - Request statistics.
  @data: Pointer to return statistics data.
  Returns 0 if successful.
  omap3isp_stat_config - Receives new statistic engine configuration.
  @new_conf: Pointer to config structure.
  Returns 0 if successful, -EINVAL if new_conf pointer is NULL, -ENOMEM if
  was unable to allocate memory for the buffer, or other errors if parameters
  are invalid.
	
	  Hack: H3A modules may need a doubled buffer size to avoid access
	  to a invalid memory address after a SBL overflow.
	  The buffer size is always PAGE_ALIGNED.
	  Hack 2: MAGIC_SIZE is added to buf_size so a magic word can be
	  inserted at the end to data integrity check purpose.
	  Hack 3: AF module writes one paxel data more than it should, so
	  the buffer allocation must consider it to avoid invalid memory
	  access.
	  Hack 4: H3A need to allocate extra space for the recover state.
			
			  Adding one extra paxel data size for each recover
			  buffer + 2 regular ones.
 Histogram 
	
	  Returning the right future config_counter for this setup, so
	  userspace can know when it has been applied.
 Module has a valid configuration. 
  isp_stat_buf_process - Process statistic buffers.
  @buf_state: points out if buffer is ready to be processed. It's necessary
 	       because histogram needs to copy the data from internal memory
 	       before be able to process the buffer.
  isp_stat_pcr_enable - DisablesEnables statistic engines.
  @pcr_enable: 01 - DisablesEnables the engine.
  Must be called from ISP driver when the module is idle and synchronized
  with CCDC.
 Userspace has disabled the module. Aborting. 
 Module will be re-enabled with its pipeline 
 driver wasn't initialised 
		
		  Userspace's requested to enable the engine but it wasn't yet.
		  Let's do that now.
		
		  H3A module has some hw issues which forces the driver to
		  ignore next buffers even if it was disabled in the meantime.
		  On the other hand, Histogram shouldn't ignore buffers anymore
		  if it's being enabled.
	
	  Due to a H3A hw issue which prevents the next buffer to start from
	  the correct memory address, 2 buffers must be ignored.
	
	  If more than one SBL overflow happen in a row, H3A module may access
	  invalid memory region.
	  stat->sbl_ovl_recover is set to tell to the driver to temporarily use
	  a soft configuration which helps to avoid consecutive overflows.
  omap3isp_stat_enable - DisableEnable statistic engine as soon as possible
  @enable: 01 - DisablesEnables the engine.
  Client should configure all the module registers before this.
  This function can be called from a userspace request.
 Prevent enabling while configuring 
 Previous disabling request wasn't done yet 
 Module is now being enabled 
 Previous enabling request wasn't done yet 
 Module is now being disabled 
		
		  Only set enable PCR bit if the module was previously
		  enabled through ioctl.
 Disable PCR bit and config enable field 
		
		  If module isn't busy, a new interrupt may come or not to
		  set the state to DISABLED. As Histogram needs to read its
		  internal memory to clear it, let interrupt handler
		  responsible of changing state to DISABLED. If the last
		  interrupt is coming, it's still safe as the handler will
		  ignore the second time when state is already set to DISABLED.
		  It's necessary to synchronize Histogram with streamoff, once
		  the module may be considered idle before last SDMA transfer
		  starts if we return here.
  __stat_isr - Interrupt handler for statistic drivers
	
	  stat->buf_processing must be set before disable module. It's
	  necessary to not inform too early the buffers aren't busy in case
	  of SDMA is going to be used.
			
			  Interrupt handler was called from streamoff when
			  the module wasn't busy anymore to ensure it is being
			  disabled after process last buffer. If such buffer
			  processing has already started, no need to do
			  anything else.
 If it's busy we can't process this buffer anymore 
 Module still need to copy data to buffer. 
 Buffer is not ready yet 
		
		  Histogram needs to read its internal memory to clear it
		  before be disabled. For that reason, common statistic layer
		  can return only after call stat's buf_process() operator.
		
		  Before this point, 'ret' stores the buffer's status if it's
		  ready to be processed. Afterwards, it holds the status if
		  it was processed successfully.
			
			  Using recover config to increase the chance to have
			  a good buffer processing and make the H3A module to
			  go back to a valid state.
			
			  Set 'update' in case of the module needs to use
			  regular configuration after next buffer.
		
		  Hack: H3A modules may access invalid memory address or send
		  corrupted data to userspace if more than 1 SBL overflow
		  happens in a row without re-writing its buffer's start memory
		  address in the meantime. Such situation is avoided if the
		  module is not immediately re-enabled when the ISR misses the
		  timing to process the buffer and to setup the registers.
		  Because of that, pcr_enable(1) was moved to inside this 'if'
		  block. But the next interruption will still happen as during
		  pcr_enable(0) the module was busy.
		
		  If a SBL overflow occurs and the H3A driver misses the timing
		  to process the buffer, stat->buf_err is set and won't be
		  cleared now. So the next buffer will be correctly ignored.
		  It's necessary due to a hw issue which makes the next H3A
		  buffer to start from the memory address where the previous
		  one stopped, instead of start where it was configured to.
		  Do not "stat->buf_err = 0" here.
			
			  Driver may need to erase current data prior to
			  process a new buffer. If it misses the timing, the
			  next buffer might be wrong. So should be ignored.
			  It happens only for Histogram.
 group ID for isp subdevs 
 SPDX-License-Identifier: GPL-2.0-only
  isphist.c
  TI OMAP3 ISP - Histogram module
  Copyright (C) 2010 Nokia Corporation
  Copyright (C) 2009 Texas Instruments, Inc.
  Contacts: David Cohen <dacohen@gmail.com>
 	     Laurent Pinchart <laurent.pinchart@ideasonboard.com>
 	     Sakari Ailus <sakari.ailus@iki.fi>
  hist_reset_mem - clear Histogram memory before start stats engine.
	
	  By setting it, the histogram internal buffer is being cleared at the
	  same time it's being read. This bit must be cleared afterwards.
	
	  We'll clear 4 words at each iteration for optimization. It avoids
	  34 of the jumps. We also know HIST_MEM_SIZE is divisible by 4.
  hist_setup_regs - Helper function to update Histogram registers.
 Regions size and position 
 OMAP3ISP_HIST_BINS_32 
 FIXME: The DMA engine API can't report transfer errors :- 
	
	  By setting it, the histogram internal buffer is being cleared at the
	  same time it's being read. This bit must be cleared just after all
	  data is acquired.
	
	  We'll read 4 times a 4-bytes-word at each iteration for
	  optimization. It avoids 34 of the jumps. We also know buf_size is
	  divisible by 16.
  hist_buf_process - Callback from ISP driver for HIST interrupt.
  hist_validate_params - Helper function to check user given params.
  @new_conf: Pointer to user configuration structure.
  Returns 0 on success configuration.
 Regions size and position 
 Regions 
 3 or 4 
 User's buf_size request wasn't enough 
 Regions 
  hist_update_params - Helper function to check and store user given params.
  @new_conf: Pointer to user configuration structure.
		
		  User might be asked for a bigger buffer than necessary for
		  this configuration. In order to return the right amount of
		  data during buffer request, let's calculate the size here
		  instead of stick with user_cfg->buf_size.
  omap3isp_hist_init - Module Initialization.
		
		  We need slave capable channel without DMA request line for
		  reading out the data.
		  For this we can use dma_request_chan_by_mask() as we are
		  happy with any channel as long as it is capable of slave
		  configuration.
  omap3isp_hist_cleanup - Module cleanup.
 SPDX-License-Identifier: GPL-2.0-only
  ispccdc.c
  TI OMAP3 ISP - CCDC module
  Copyright (C) 2009-2010 Nokia Corporation
  Copyright (C) 2009 Texas Instruments, Inc.
  Contacts: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
 	     Sakari Ailus <sakari.ailus@iki.fi>
  ccdc_print_status - Print current CCDC Module register values.
  @ccdc: Pointer to ISP CCDC device.
  Also prints other debug information stored in the CCDC module.
  omap3isp_ccdc_busy - Get busy state of the CCDC.
  @ccdc: Pointer to ISP CCDC device.
 -----------------------------------------------------------------------------
  Lens Shading Compensation
  ccdc_lsc_validate_config - Check that LSC configuration is valid.
  @ccdc: Pointer to ISP CCDC device.
  @lsc_cfg: the LSC configuration to check.
  Returns 0 if the LSC configuration is valid, or -EINVAL if invalid.
 Calculate minimum bytesize for validation 
  ccdc_lsc_program_table - Program Lens Shading Compensation table address.
  @ccdc: Pointer to ISP CCDC device.
  ccdc_lsc_setup_regs - Configures the lens shading compensation module
  @ccdc: Pointer to ISP CCDC device.
 timeout 1 ms 
  __ccdc_lsc_enable - EnablesDisables the Lens Shading Compensation module.
  @ccdc: Pointer to ISP CCDC device.
  @enable: 0 Disables LSC, 1 Enables LSC.
  __ccdc_lsc_configure - Apply a new configuration to the LSC engine
  @ccdc: Pointer to ISP CCDC device
  @req: New configuration request
  ccdc_lsc_error_handler - Handle LSC prefetch error scenario.
  @ccdc: Pointer to ISP CCDC device.
  Disables LSC, and defers enablement to shadow registers update time.
	
	  From OMAP3 TRM: When this event is pending, the module
	  goes into transparent mode (output =input). Normal
	  operation can be resumed at the start of the next frame
	  after:
	   1) Clearing this event
	   2) Disabling the LSC module
	   3) Enabling it
  ccdc_lsc_config - Configure the LSC module from a userspace request
  Store the request LSC configuration in the LSC engine request pointer. The
  configuration will be applied to the hardware when the CCDC will be enabled,
  or at the next LSC interrupt if the CCDC is already running.
 -----------------------------------------------------------------------------
  Parameters configuration
  ccdc_configure_clamp - Configure optical-black or digital clamping
  @ccdc: Pointer to ISP CCDC device.
  The CCDC performs either optical-black or digital clamp. Configure and enable
  the selected clamp method.
  ccdc_configure_fpc - Configure Faulty Pixel Correction
  @ccdc: Pointer to ISP CCDC device.
 The FPNUM field must be set before enabling FPC. 
  ccdc_configure_black_comp - Configure Black Level Compensation.
  @ccdc: Pointer to ISP CCDC device.
  ccdc_configure_lpf - Configure Low-Pass Filter (LPF).
  @ccdc: Pointer to ISP CCDC device.
  ccdc_configure_alaw - Configure A-law compression.
  @ccdc: Pointer to ISP CCDC device.
  ccdc_config_imgattr - Configure sensor image specific attributes.
  @ccdc: Pointer to ISP CCDC device.
  @colptn: Color pattern of the sensor.
  ccdc_config - Set CCDC configuration from userspace
  @ccdc: Pointer to ISP CCDC device.
  @ccdc_struct: Structure containing CCDC configuration sent from userspace.
  Returns 0 if successful, -EINVAL if the pointer to the configuration
  structure is null, or the copy_from_user function fails to copy user space
  memory to kernel space memory.
			
			  The table address must be 64-bytes aligned, which is
			  guaranteed by dma_alloc_coherent().
  omap3isp_ccdc_restore_context - Restore values of the CCDC module registers
  @isp: Pointer to ISP device
 -----------------------------------------------------------------------------
  Format- and pipeline-related configuration helpers
  ccdc_config_vp - Configure the Video Port.
  @ccdc: Pointer to ISP CCDC device.
		 Disable the video port when the input format isn't supported.
		  This is indicated by a pixel code set to 0.
  ccdc_config_outlineoffset - Configure memory saving output line offset
  @ccdc: Pointer to ISP CCDC device.
  @bpl: Number of bytes per line when stored in memory.
  @field: Field order when storing interlaced formats in memory.
  Configure the offsets for the line output control:
  - The horizontal line offset is defined as the number of bytes between the
    start of two consecutive lines in memory. Set it to the given bytes per
    line value.
  - The field offset value is defined as the number of lines to offset the
    start of the field identified by FID = 1. Set it to one.
  - The line offset values are defined as the number of lines (as defined by
    the horizontal line offset) between the start of two consecutive lines for
    all combinations of oddeven lines in oddeven fields. When interleaving
    fields set them all to two lines, and to one line otherwise.
		 When interleaving fields in memory offset field one by one
		  line and set the line offset to two lines.
 In all other cases set the line offsets to one line. 
  ccdc_set_outaddr - Set memory address to save output image
  @ccdc: Pointer to ISP CCDC device.
  @addr: ISP MMU Mapped 32-bit memory address aligned on 32 byte boundary.
  Sets the memory address where the output will be saved.
  omap3isp_ccdc_max_rate - Calculate maximum input data rate based on the input
  @ccdc: Pointer to ISP CCDC device.
  @max_rate: Maximum calculated data rate.
  Returns in max_rate less value between calculated and passed
	
	  TRM says that for parallel sensors the maximum data rate
	  should be 90% form L32 clock, otherwise just L32.
  ccdc_config_sync_if - Set CCDC sync interface configuration
  @ccdc: Pointer to ISP CCDC device.
  @parcfg: Parallel interface platform data (may be NULL)
  @data_size: Data size
		 According to the OMAP3 TRM the input mode only affects SYNC
		  mode, enabling BT.656 mode should take precedence. However,
		  in practice setting the input mode to YCbCr data on 8 bits
		  seems to be required in BT.656 mode. In SYNC mode set it to
		  YCbCr on 16 bits as the bridge is enabled in that case.
	 The polarity of the vertical sync signal output by the BT.656
	  decoder is not documented and seems to be active low.
	 The CCDC_CFG.Y8POS bit is used in YCbCr8 input mode only. The
	  hardware seems to ignore it in all other input modes.
	 Enable or disable BT.656 mode, including error correction for the
	  synchronization codes.
 CCDC formats descriptions 
 CCDC_PAD_SINK 
	 Compute the lane shifter shift value and enable the bridge when the
	  input format is a non-BT.656 YUV variant.
 Configure the sync interface. 
	 Use the raw, unprocessed data when writing to memory. The H3A and
	  histogram modules are still fed with lens shading corrected data.
 Mosaic filter 
 Use GRBG 
	 Generate VD0 on the last line of the image and VD1 on the
	  23 height line.
 CCDC_PAD_SOURCE_OF 
	 The horizontal coordinates are expressed in pixel clock cycles. We
	  need two cycles per pixel in BT.656 mode, and one cycle per pixel in
	  SYNC mode regardless of the format as the bridge is enabled for YUV
	  formats in that case.
	 When interleaving fields enable processing of the field input signal.
	  This will cause the line output control module to apply the field
	  offset to field 1.
	 The CCDC outputs data in UYVY order by default. Swap bytes to get
	  YUYV.
	 Use PACK8 mode for 1byte per pixel formats. Check for BT.656 mode
	  explicitly as the driver reports 1X16 instead of 2X8 at the OF pad
	  for simplicity.
 CCDC_PAD_SOURCE_VP 
 Lens shading correction. 
	 Get last good LSC configuration. If it is not supported for
	  the current active resolution discard it.
 Avoid restarting the CCDC when streaming is stopping. 
 -----------------------------------------------------------------------------
  Interrupt handling
  ccdc_sbl_busy - Poll idle state of CCDC and related SBL memory write bits
  @ccdc: Pointer to ISP CCDC device.
  Returns zero if the CCDC is idle and the image has been written to
  memory, too.
  ccdc_sbl_wait_idle - Wait until the CCDC and related SBL are idle
  @ccdc: Pointer to ISP CCDC device.
  @max_wait: Max retry count in us for wait for idlebusy transition.
 10 ms 
 ccdc_handle_stopping - Handle CCDC andor LSC stopping sequence
  @ccdc: Pointer to ISP CCDC device.
  @event: Pointing which event trigger handler
  Return 1 when the event and stopping request combination is satisfied,
  zero otherwise.
 Frame number propagation 
  ccdc_lsc_isr - Handle LSC events
  @ccdc: Pointer to ISP CCDC device.
  @events: LSC events
	 LSC_DONE interrupt occur, there are two cases
	  1. stopping for reconfiguration
	  2. stopping because of STREAM OFF command
 LSC is in STOPPING state, change to the new state 
	 This is an exception. Start of frame and LSC_DONE interrupt
	  have been received on the same time. Skip this event and wait
	  for better times.
	 The LSC engine is stopped at this point. Enable it if there's a
	  pending request.
  Check whether the CCDC has captured all fields necessary to complete the
  buffer.
 When the input is progressive fields don't matter. 
 Read the current field identifier. 
	 When capturing fields in alternate order just store the current field
	  identifier in the pipeline.
 The format is interlaced. Make sure we've captured both fields. 
	 Verify that the field just captured corresponds to the last field
	  needed based on the desired field order.
 The buffer can be completed, reset the fields for the next buffer. 
	 The CCDC generates VD0 interrupts even when disabled (the datasheet
	  doesn't explicitly state if that's supposed to happen or not, so it
	  can be considered as a hardware bug or as a feature, but we have to
	  deal with it anyway). Disabling the CCDC when no buffer is available
	  would thus not be enough, we need to handle the situation explicitly.
	 We're in continuous mode, and memory writes were disabled due to a
	  buffer underrun. Re-enable them now that we have a buffer. The buffer
	  address has been set in ccdc_video_queue.
 Wait for the CCDC to become idle. 
 Don't restart CCDC if we're just about to stop streaming. 
  ccdc_vd0_isr - Handle VD0 event
  @ccdc: Pointer to ISP CCDC device.
  Executes LSC deferred enablement before next frame starts.
	 In BT.656 mode the CCDC doesn't generate an HSVS interrupt. We thus
	  need to increment the frame counter here.
	 Emulate a VD1 interrupt for BT.656 mode, as we can't stop the CCDC in
	  the VD1 interrupt handler in that mode without risking a CCDC stall
	  if a short frame is received.
  ccdc_vd1_isr - Handle VD1 event
  @ccdc: Pointer to ISP CCDC device.
	 In BT.656 mode the synchronization signals are generated by the CCDC
	  from the embedded sync codes. The VD0 and VD1 interrupts are thus
	  only triggered when the CCDC is enabled, unlike external sync mode
	  where the line counter runs even when the CCDC is stopped. We can't
	  disable the CCDC at VD1 time, as no VD0 interrupt would be generated
	  for a short frame, which would result in the CCDC being stopped and
	  no VD interrupt generated anymore. The CCDC is stopped from the VD0
	  interrupt handler instead for BT.656.
	
	  Depending on the CCDC pipeline state, CCDC stopping should be
	  handled differently. In SINGLESHOT we emulate an internal CCDC
	  stopping because the CCDC hw works only in continuous mode.
	  When CONTINUOUS pipeline state is used and the CCDC writes it's
	  data to memory the CCDC and LSC are stopped immediately but
	  without change the CCDC stopping state machine. The CCDC
	  stopping state machine should be used only when user request
	  for stopping is received (SINGLESHOT is an exception).
	
	  LSC need to be reconfigured. Stop it here and on next LSC_DONE IRQ
	  do the appropriate changes in registers
 LSC has been in STOPPED state, enable it 
  omap3isp_ccdc_isr - Configure CCDC during interframe time.
  @ccdc: Pointer to ISP CCDC device.
  @events: CCDC events
 -----------------------------------------------------------------------------
  ISP video operations
	 We now have a buffer queued on the output, restart the pipeline
	  on the next CCDC interrupt if running in continuous mode (or when
	  starting the stream) in external sync mode, or immediately in BT.656
	  sync mode as no CCDC interrupt is generated when the CCDC is stopped
	  in that case.
 -----------------------------------------------------------------------------
  V4L2 subdev operations
  ccdc_ioctl - CCDC module private ioctl's
  @sd: ISP CCDC V4L2 subdevice
  @cmd: ioctl command
  @arg: ioctl argument
  Return 0 on success or a negative error code otherwise.
 line number is zero at frame start 
  ccdc_set_stream - EnableDisable streaming on the CCDC module
  @sd: ISP CCDC V4L2 subdevice
  @enable: Enabledisable stream
  When writing to memory, the CCDC hardware can't be enabled without a memory
  buffer to write to. As the s_stream operation is called in response to a
  STREAMON call without any buffer queued yet, just update the enabled field
  and return immediately. The CCDC will be enabled in ccdc_isr_buffer().
  When not writing to memory enable the CCDC immediately.
  ccdc_try_format - Try video format on a pad
  @ccdc: ISP CCDC device
  @cfg : V4L2 subdev pad configuration
  @pad: Pad number
  @fmt: Format
 If not found, use SGRBG10 as default 
 Clamp the input size. 
 Default to progressive field order. 
		 In SYNC mode the bridge converts YUV formats from 2X8 to
		  1X16. In BT.656 no such conversion occurs. As we don't know
		  at this point whether the source will use SYNC or BT.656 mode
		  let's pretend the conversion always occurs. The CCDC will be
		  configured to pack bytes in BT.656, hiding the inaccuracy.
		  In all cases bytes can be swapped.
 Use the user requested format if YUV. 
 Hardcode the output size to the crop rectangle size. 
		 When input format is interlaced with alternating fields the
		  CCDC can interleave the fields.
 The video port interface truncates the data to 10 bits. 
 YUV formats are not supported by the video port. 
		 The number of lines that can be clocked out from the video
		  port output must be at least one line less than the number
		  of input lines.
	 Data is written to memory unpacked, each 10-bit or 12-bit pixel is
	  stored on 2 bytes.
  ccdc_try_crop - Validate a crop rectangle
  @ccdc: ISP CCDC device
  @sink: format on the sink pad
  @crop: crop rectangle to be validated
	 For Bayer formats, restrict lefttop and widthheight to even values
	  to keep the Bayer pattern.
	 The data formatter truncates the number of horizontal output pixels
	  to a multiple of 16. To avoid clipping data, allow callers to request
	  an output size bigger than the input size up to the nearest multiple
	  of 16.
 Odd widthheight values don't make sense for Bayer formats. 
  ccdc_enum_mbus_code - Handle pixel format enumeration
  @sd     : pointer to v4l2 subdev structure
  @cfg : V4L2 subdev pad configuration
  @code   : pointer to v4l2_subdev_mbus_code_enum structure
  return -EINVAL or zero on success
 In YUV mode the CCDC can swap bytes. 
			 In raw mode, no configurable format confversion is
			  available.
		 The CCDC supports no configurable format conversion
		  compatible with the video port. Enumerate a single output
		  format code.
		 A pixel code equal to 0 means that the video port doesn't
		  support the input format. Don't enumerate any pixel code.
  ccdc_get_selection - Retrieve a selection rectangle on a pad
  @sd: ISP CCDC V4L2 subdevice
  @cfg: V4L2 subdev pad configuration
  @sel: Selection rectangle
  The only supported rectangles are the crop rectangles on the output formatter
  source pad.
  Return 0 on success or a negative error code otherwise.
  ccdc_set_selection - Set a selection rectangle on a pad
  @sd: ISP CCDC V4L2 subdevice
  @cfg: V4L2 subdev pad configuration
  @sel: Selection rectangle
  The only supported rectangle is the actual crop rectangle on the output
  formatter source pad.
  Return 0 on success or a negative error code otherwise.
 The crop rectangle can't be changed while streaming. 
	 Modifying the crop rectangle always changes the format on the source
	  pad. If the KEEP_CONFIG flag is set, just return the current crop
	  rectangle.
 Update the source format. 
  ccdc_get_format - Retrieve the video format on a pad
  @sd : ISP CCDC V4L2 subdevice
  @cfg: V4L2 subdev pad configuration
  @fmt: Format
  Return 0 on success or -EINVAL if the pad is invalid or doesn't correspond
  to the format type.
  ccdc_set_format - Set the video format on a pad
  @sd : ISP CCDC V4L2 subdevice
  @cfg: V4L2 subdev pad configuration
  @fmt: Format
  Return 0 on success or -EINVAL if the pad is invalid or doesn't correspond
  to the format type.
 Propagate the format from sink to source 
 Reset the crop rectangle. 
 Update the source formats. 
  Decide whether desired output pixel code can be obtained with
  the lane shifter by shifting the input pixel code.
  @in: input pixelcode to shifter
  @out: output pixelcode from shifter
  @additional_shift: # of bits the sensor's LSB is offset from CAMEXT[0]
  return true if the combination is possible
  return false otherwise
 Check if the two ends match 
 We've got a parallel sensor here. 
 Lane shifter may be used to drop bits on CCDC sink pad 
  ccdc_init_formats - Initialize formats on all pads
  @sd: ISP CCDC V4L2 subdevice
  @fh: V4L2 subdev file handle
  Initialize all pad formats with default values. If fh is not NULL, try
  formats are initialized on the file handle. Otherwise active formats are
  initialized on the device.
 V4L2 subdev core operations 
 V4L2 subdev video operations 
 V4L2 subdev pad operations 
 V4L2 subdev operations 
 V4L2 subdev internal operations 
 -----------------------------------------------------------------------------
  Media entity operations
  ccdc_link_setup - Setup CCDC connections
  @entity: CCDC media entity
  @local: Pad at the local end of the link
  @remote: Pad at the remote end of the link
  @flags: Link flags
  return -EINVAL or zero on success
 FIXME: this is actually a hack! 
		 Read from the sensor (parallel interface), CCP2, CSI2a or
		  CSI2c.
	
	  The ISP core doesn't support pipelines with multiple video outputs.
	  Revisit this when it will be implemented, and return -EBUSY for now.
		 Write to preview engine, histogram and H3A. When none of
		  those links are active, the video port can be disabled.
 Write to memory 
 Write to resizer 
 media operations 
 Register the subdev and video node. 
 -----------------------------------------------------------------------------
  ISP CCDC initialisation and cleanup
  ccdc_init_entities - Initialize V4L2 subdev and media entity
  @ccdc: ISP CCDC module
  Return 0 on success and a negative error code on failure.
 group ID for isp subdevs 
  omap3isp_ccdc_init - CCDC module initialization.
  @isp: Device pointer specific to the OMAP3 ISP.
  TODO: Get the initialisation values from platform data.
  Return 0 on success or a negative error code otherwise.
  omap3isp_ccdc_cleanup - CCDC module cleanup.
  @isp: Device pointer specific to the OMAP3 ISP.
	 Free LSC requests. As the CCDC is stopped there's no active request,
	  so only the pending request and the free queue need to be handled.
 SPDX-License-Identifier: GPL-2.0-only
  isph3a.c
  TI OMAP3 ISP - H3A module
  Copyright (C) 2010 Nokia Corporation
  Copyright (C) 2009 Texas Instruments, Inc.
  Contacts: David Cohen <dacohen@gmail.com>
 	     Laurent Pinchart <laurent.pinchart@ideasonboard.com>
 	     Sakari Ailus <sakari.ailus@iki.fi>
  h3a_aewb_update_regs - Helper function to update h3a registers.
 Converting config metadata into reg values 
 Number of configured windows + extra row for black data 
	
	  Unsaturated block counts for each 8 windows.
	  1 extra for the last (win_count % 8) windows if win_count is not
	  divisible by 8.
  h3a_aewb_set_params - Helper function to check & store user given params.
  @new_conf: Pointer to AE and AWB parameters struct.
  As most of them are busy-lock registers, need to wait until AEW_BUSY = 0 to
  program them during ISR.
  omap3isp_h3a_aewb_init - Module Initialisation.
 Set recover state configuration 
  omap3isp_h3a_aewb_cleanup - Module exit.
 SPDX-License-Identifier: GPL-2.0-only
  ispcsi2.c
  TI OMAP3 ISP - CSI2 module
  Copyright (C) 2010 Nokia Corporation
  Copyright (C) 2009 Texas Instruments, Inc.
  Contacts: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
 	     Sakari Ailus <sakari.ailus@iki.fi>
  csi2_if_enable - Enable CSI2 Receiver interface.
  @enable: enable flag
  csi2_recv_config - CSI2 receiver module configuration.
  @currctrl: isp_csi2_ctrl_cfg structure
 To set the format on the CSI2 requires a mapping function that takes
  the following inputs:
  - 3 different formats (at this time)
  - 2 destinations (mem, vp+mem) (vp only handled separately)
  - 2 decompression options (on, off)
  - 2 isp revisions (certain format must be handled differently on OMAP3630)
  Output should be CSI2 frame format code
  Array indices as follows: [format][dest][decompr][is_3630]
  Not all combinations are valid. 0 means invalid.
 RAW10 formats 
 Output to memory 
 No DPCM decompression 
 DPCM decompression 
 Output to both 
 No DPCM decompression 
 DPCM decompression 
 RAW10 DPCM8 formats 
 Output to memory 
 No DPCM decompression 
 DPCM decompression 
 Output to both 
 No DPCM decompression 
 DPCM decompression 
 YUYV8 2X8 formats 
 Output to memory 
 No DPCM decompression 
 DPCM decompression 
 Output to both 
 No DPCM decompression 
 DPCM decompression 
  csi2_ctx_map_format - Map CSI2 sink media bus format to CSI2 format ID
  @csi2: ISP CSI2 device
  Returns CSI2 physical format id
 Neither output enabled is a valid combination 
	 If we need to skip frames at the beginning of the stream disable the
	  video port to avoid sending the skipped frames to the CCDC.
  csi2_set_outaddr - Set memory address to save output image
  @csi2: Pointer to ISP CSI2a device.
  @addr: ISP MMU Mapped 32-bit memory address aligned on 32 byte boundary.
  Sets the memory address where the output will be saved.
  Returns 0 if successful, or -EINVAL if the address is not in the 32 byte
  boundary.
  is_usr_def_mapping - Checks whether USER_DEF_MAPPING should
 			be enabled by CSI2.
  @format_id: mapped format id
  csi2_ctx_enable - Enable specified CSI2 context
  @ctxnum: Context number, valid between 0 and 7 values.
  @enable: enable
  csi2_ctx_config - CSI2 context configuration.
  @ctx: context configuration
 Set up CSI2_CTx_CTRL1 
 Set up CSI2_CTx_CTRL2 
 Set up CSI2_CTx_CTRL3 
 Set up CSI2_CTx_DAT_OFST 
  csi2_timing_config - CSI2 timing configuration.
  @timing: csi2_timing_cfg structure
  csi2_irq_ctx_set - Enables CSI2 Context IRQs.
  @enable: Enabledisable CSI2 Context interrupts
  csi2_irq_complexio1_set - Enables CSI2 ComplexIO IRQs.
  @enable: Enabledisable CSI2 ComplexIO #1 interrupts
  csi2_irq_status_set - Enables CSI2 Status IRQs.
  @enable: Enabledisable CSI2 Status interrupts
  omap3isp_csi2_reset - Resets the CSI2 module.
  Must be called with the phy lock held.
  Returns 0 if successful, or -EBUSY if power command didn't respond.
	
	  CSI2 fields that can be updated while the context has
	  been enabled or the interface has been enabled are not
	  updated dynamically currently. So we do not allow to
	  reconfigure if either has been enabled
	
	  The CSI2 receiver can't do any format conversion except DPCM
	  decompression, so every set_format call configures both pads
	  and enables DPCM decompression as a special case:
	
	  Enable end of frame and end of line signals generation for
	  context 0. These signals are generated from CSI2 receiver to
	  qualify the last pixel of a frame and the last pixel of a line.
	  Without enabling the signals CSI2 receiver writes data to memory
	  beyond buffer size andor data line offset is not handled correctly.
 Set configuration (timings, format and links) 
  csi2_print_status - Prints CSI2 debug information.
 -----------------------------------------------------------------------------
  Interrupt handling
  csi2_isr_buffer - Does buffer handling at end-of-frame
  when writing to memory.
	
	  Let video queue operation restart engine if there is an underrun
	  condition.
	 Skip interrupts until we reach the frame skip count. The CSI2 will be
	  automatically disabled, as the frame skip count has been programmed
	  in the CSI2_CTx_CTRL1::COUNT field, so re-enable it.
	 
	  It would have been nice to rely on the FRAME_NUMBER interrupt instead
	  but it turned out that the interrupt is only generated when the CSI2
	  writes to memory (the CSI2_CTx_CTRL1::COUNT field is decreased
	  correctly and reaches 0 when data is forwarded to the video port only
	  but no interrupt arrives). Maybe a CSI2 hardware bug.
  omap3isp_csi2_isr - CSI2 interrupt handling.
 Failure Cases 
 Successful cases 
 -----------------------------------------------------------------------------
  ISP video operations
  csi2_queue - Queues the first buffer when using memory output
  @video: The video node
  @buffer: buffer to queue
	
	  If streaming was enabled before there was a buffer queued
	  or underrun happened in the ISR, the hardware was not enabled
	  and DMA queue flag ISP_VIDEO_DMAQUEUE_UNDERRUN is still set.
	  Enable it now.
 Enable  disable context 0 and IRQs 
 -----------------------------------------------------------------------------
  V4L2 subdev operations
 Clamp the width and height to valid range (1-8191). 
 If not found, use SGRBG10 as default 
		 Source format same as sink format, except for DPCM
		  compression.
		
		  Only Allow DPCM decompression, and check that the
		  pattern is preserved
 RGB, non-interlaced 
  csi2_enum_mbus_code - Handle pixel format enumeration
  @sd     : pointer to v4l2 subdev structure
  @cfg: V4L2 subdev pad configuration
  @code   : pointer to v4l2_subdev_mbus_code_enum structure
  return -EINVAL or zero on success
 Passthrough sink pad code 
 Uncompressed code 
  csi2_get_format - Handle get format by pads subdev method
  @sd : pointer to v4l2 subdev structure
  @cfg: V4L2 subdev pad configuration
  @fmt: pointer to v4l2 subdev format structure
  return -EINVAL or zero on success
  csi2_set_format - Handle set format by pads subdev method
  @sd : pointer to v4l2 subdev structure
  @cfg: V4L2 subdev pad configuration
  @fmt: pointer to v4l2 subdev format structure
  return -EINVAL or zero on success
 Propagate the format from sink to source 
  csi2_init_formats - Initialize formats on all pads
  @sd: ISP CSI2 V4L2 subdevice
  @fh: V4L2 subdev file handle
  Initialize all pad formats with default values. If fh is not NULL, try
  formats are initialized on the file handle. Otherwise active formats are
  initialized on the device.
  csi2_set_stream - EnableDisable streaming on the CSI2 module
  @sd: ISP CSI2 V4L2 subdevice
  @enable: ISP pipeline stream state
  Return 0 on success or a negative error code otherwise.
		
		  When outputting to memory with no buffer available, let the
		  buffer queue handler start the hardware. A DMA queue flag
		  ISP_VIDEO_DMAQUEUE_QUEUED will be set as soon as there is
		  a buffer available.
 Enable context 0 and IRQs 
 subdev video operations 
 subdev pad operations 
 subdev operations 
 subdev internal operations 
 -----------------------------------------------------------------------------
  Media entity operations
  csi2_link_setup - Setup CSI2 connections.
  @entity : Pointer to media entity structure
  @local  : Pointer to local pad array
  @remote : Pointer to remote pad array
  @flags  : Link flags
  return -EINVAL or zero on success
	
	  The ISP core doesn't support pipelines with multiple video outputs.
	  Revisit this when it will be implemented, and return -EBUSY for now.
 FIXME: this is actually a hack! 
 Link from camera to CSI2 is fixed... 
 media operations 
 Register the subdev and video nodes. 
 -----------------------------------------------------------------------------
  ISP CSI2 initialisation and cleanup
  csi2_init_entities - Initialize subdev and media entity.
  @csi2: Pointer to csi2 structure.
  return -ENOMEM or zero on success
 group ID for isp subdevs 
 Video device node 
  omap3isp_csi2_init - Routine for module driver init
  omap3isp_csi2_cleanup - Routine for module driver cleanup
 SPDX-License-Identifier: GPL-2.0-only
  ispccp2.c
  TI OMAP3 ISP - CCP2 module
  Copyright (C) 2010 Nokia Corporation
  Copyright (C) 2010 Texas Instruments, Inc.
  Contacts: Laurent Pinchart <laurent.pinchart@ideasonboard.com>
 	     Sakari Ailus <sakari.ailus@iki.fi>
 Number of LCX channels 
 MaxMin size for CCP2 video port 
 MaxMin size for CCP2 memory channel 
 Set only the required bits 
  ccp2_print_status - Print current CCP2 module register values.
  ccp2_reset - Reset the CCP2
  @ccp2: pointer to ISP CCP2 device
 Reset the CSI1CCP2B and wait for reset to complete 
 try read 10 times 
  ccp2_pwr_cfg - Configure the power mode settings
  @ccp2: pointer to ISP CCP2 device
  ccp2_if_enable - Enable CCP2 interface.
  @ccp2: pointer to ISP CCP2 device
  @enable: enabledisable flag
 EnableDisable all the LCx channels 
 EnableDisable ccp2 interface in ccp2 mode 
  ccp2_mem_enable - Enable CCP2 memory interface.
  @ccp2: pointer to ISP CCP2 device
  @enable: enabledisable flag
 EnableDisable ccp2 interface in ccp2 mode 
  ccp2_phyif_config - Initialize CCP2 phy interface config
  @ccp2: Pointer to ISP CCP2 device
  @buscfg: CCP2 platform data
  Configure the CCP2 physical interface module from platform data.
  Returns -EIO if strobe is chosen in CSI1 mode, or 0 on success.
 Datastrobe physical layer 
 Strobe mode requires CCP2 
  ccp2_vp_config - Initialize CCP2 video port interface.
  @ccp2: Pointer to ISP CCP2 device
  @vpclk_div: Video port divisor
  Configure the CCP2 video port with the given clock divisor. The valid divisor
  values depend on the ISP revision:
  - revision 1.0 and 2.0	1 to 4
  - revision 15.0		1 to 65536
  The exact divisor value used might differ from the requested value, as ISP
  revision 15.0 represent the divisor by 65536 divided by an integer.
 ISPCCP2_CTRL Video port 
 Disable the memory write port 
  ccp2_lcx_config - Initialize CCP2 logical channel interface.
  @ccp2: Pointer to ISP CCP2 device
  @config: Pointer to ISP LCx config structure.
  This will analyze the parameters passed by the interface config
  and configure CSI1CCP2 logical channel
 RAW10+VP 
 ISPCCP2_LCx_CTRL logical channel #0 
 Region 
 CRC 
 Format = RAW10+VP or RAW8+DPCM10+VP
 ISPCCP2_DAT_START for logical channel #0 
 ISPCCP2_DAT_SIZE for logical channel #0 
 Enable error IRQs for logical channel #0 
  ccp2_if_configure - Configure ccp2 with data from sensor
  @ccp2: Pointer to ISP CCP2 device
  Return 0 on success or a negative error code
	 Compute the minimum clock divisor, based on the pipeline maximum
	  data rate. This is an absolute lower bound if we don't want SBL
	  overflows, so round the value up.
	 Compute the maximum clock divisor, based on the requested frame rate.
	  This is a soft lower bound to achieve a frame rate equal or higher
	  than the requested value, so round the value down.
  ccp2_mem_configure - Initialize CCP2 memory inputoutput interface
  @ccp2: Pointer to ISP CCP2 device
  @config: Pointer to ISP mem interface config structure
  This will analyze the parameters passed by the interface config
  structure, and configure the respective registers for proper
  CSI1CCP2 memory input.
 Hsize, Skip 
 Vsize, no. of lines 
 Source and Destination formats 
 source format is RAW8 
 RAW8 + DPCM10 - simple predictor 
 enable source DPCM decompression 
 source format is RAW10 
 Burst size to 32x64 
 Prefetch setup 
 Video port 
 Clear LCM interrupts 
 Enable LCM interrupts 
  ccp2_set_inaddr - Sets memory address of input frame.
  @ccp2: Pointer to ISP CCP2 device
  @addr: 32bit memory address aligned on 32byte boundary.
  Configures the memory address from which the input frame is to be read.
 -----------------------------------------------------------------------------
  Interrupt handling
  omap3isp_ccp2_isr - Handle ISP CCP2 interrupts
  @ccp2: Pointer to ISP CCP2 device
  This will handle the CCP2 interrupts
 First clear the interrupts 
 Errors 
 Handle queued buffers on frame end interrupts 
 -----------------------------------------------------------------------------
  V4L2 subdev operations
  __ccp2_get_format - helper function for getting ccp2 format
  @ccp2  : Pointer to ISP CCP2 device
  @cfg: V4L2 subdev pad configuration
  @pad   : pad number
  @which : wanted subdev format
  return format structure or NULL on error
  ccp2_try_format - Handle try format by pad subdev method
  @ccp2  : Pointer to ISP CCP2 device
  @cfg: V4L2 subdev pad configuration
  @pad   : pad num
  @fmt   : pointer to v4l2 mbus format structure
  @which : wanted subdev format
		 Source format - copy sink format and change pixel code
		  to SGRBG10_1X10 as we don't support CCP2 write to memory.
		  When CCP2 write to memory feature will be added this
		  should be changed properly.
  ccp2_enum_mbus_code - Handle pixel format enumeration
  @sd     : pointer to v4l2 subdev structure
  @cfg: V4L2 subdev pad configuration
  @code   : pointer to v4l2_subdev_mbus_code_enum structure
  return -EINVAL or zero on success
  ccp2_get_format - Handle get format by pads subdev method
  @sd    : pointer to v4l2 subdev structure
  @cfg: V4L2 subdev pad configuration
  @fmt   : pointer to v4l2 subdev format structure
  return -EINVAL or zero on success
  ccp2_set_format - Handle set format by pads subdev method
  @sd    : pointer to v4l2 subdev structure
  @cfg: V4L2 subdev pad configuration
  @fmt   : pointer to v4l2 subdev format structure
  returns zero
 Propagate the format from sink to source 
  ccp2_init_formats - Initialize formats on all pads
  @sd: ISP CCP2 V4L2 subdevice
  @fh: V4L2 subdev file handle
  Initialize all pad formats with default values. If fh is not NULL, try
  formats are initialized on the file handle. Otherwise active formats are
  initialized on the device.
  ccp2_s_stream - EnableDisable streaming on ccp2 subdev
  @sd    : pointer to v4l2 subdev structure
  @enable: 1 == Enable, 0 == Disable
  return zero
 Enable CSI1CCP2 interface 
 Disable CSI1CCP2 interface 
 subdev video operations 
 subdev pad operations 
 subdev operations 
 subdev internal operations 
 --------------------------------------------------------------------------
  ISP ccp2 video device node
  ccp2_video_queue - Queue video buffer.
  @video : Pointer to isp video structure
  @buffer: Pointer to isp_buffer structure
  return -EIO or zero on success
 -----------------------------------------------------------------------------
  Media entity operations
  ccp2_link_setup - Setup ccp2 connections.
  @entity : Pointer to media entity structure
  @local  : Pointer to local pad array
  @remote : Pointer to remote pad array
  @flags  : Link flags
  return -EINVAL on error or zero on success
 FIXME: this is actually a hack! 
 read from memory 
 read from sensorphy 
 write to video portccdc 
 media operations 
  omap3isp_ccp2_unregister_entities - Unregister media entities: subdev
  @ccp2: Pointer to ISP CCP2 device
  omap3isp_ccp2_register_entities - Register the subdev media entity
  @ccp2: Pointer to ISP CCP2 device
  @vdev: Pointer to v4l device
  return negative error code or zero on success
 Register the subdev and video nodes. 
 -----------------------------------------------------------------------------
  ISP ccp2 initialisation and cleanup
  ccp2_init_entities - Initialize ccp2 subdev and media entity.
  @ccp2: Pointer to ISP CCP2 device
  return negative error code or zero on success
 group ID for isp subdevs 
	
	  The CCP2 has weird line alignment requirements, possibly caused by
	  DPCM8 decompression. Line length for data read from memory must be a
	  multiple of 128 bits (16 bytes) in continuous mode (when no padding
	  is present at end of lines). Additionally, if padding is used, the
	  padded line length must be a multiple of 32 bytes. To simplify the
	  implementation we use a fixed 32 bytes alignment regardless of the
	  input format and width. If strict 128 bits alignment support is
	  required ispvideo will need to be made aware of this special dual
	  alignment requirements.
  omap3isp_ccp2_init - CCP2 initialization.
  @isp : Pointer to ISP device
  return negative error code or zero on success
	
	  On the OMAP34xx the CSI1 receiver is operated in the CSIb IO
	  complex, which is powered by vdds_csib power rail. Hence the
	  request for the regulator.
	 
	  On the OMAP36xx, the CCP2 uses the CSI PHY1 or PHY2, shared with
	  the CSI2c or CSI2a receivers. The PHY then needs to be explicitly
	  configured.
	 
	  TODO: Don't hardcode the usage of PHY1 (shared with CSI2c).
  omap3isp_ccp2_cleanup - CCP2 un-initialization
  @isp : Pointer to ISP device
 SPDX-License-Identifier: GPL-2.0-only
 linuxdriversmediaplatformexynos3250-jpegjpeg-hw.h
  Copyright (c) 2014 Samsung Electronics Co., Ltd.
 		http:www.samsung.com
  Author: Jacek Anaszewski <j.anaszewski@samsung.com>
 no other way but polling for when JPEG IP becomes operational 
 this driver uses table 0 for all color components 
 this driver uses table 0 for all color components 
 Currently unused 
 SPDX-License-Identifier: GPL-2.0-only
 Copyright (c) 2013 Samsung Electronics Co., Ltd.
 		http:www.samsung.com
  Author: Jacek Anaszewski <j.anaszewski@samsung.com>
  Register interface file for JPEG driver on Exynos4x12.
 set exynos4_jpeg mod register 
 encode 
 disable both 
 clear except enc format 
 clear enc format 
 clear 
 SPDX-License-Identifier: GPL-2.0-only
 linuxdriversmediaplatforms5p-jpegjpeg-core.c
  Copyright (c) 2011-2014 Samsung Electronics Co., Ltd.
 		http:www.samsung.com
  Author: Andrzej Pietrasiewicz <andrzejtp2010@gmail.com>
  Author: Jacek Anaszewski <j.anaszewski@samsung.com>
level 0 - high compression quality 
 level 1 
 level 2 
 level 3 - low compression quality 
level 0 - high compression quality 
 level 1 
 level 2 
 level 3 - low compression quality 
  Fourcc downgrade schema lookup tables for 422 and 420
  chroma subsampling - fourcc on each position maps on the
  fourcc from the table fourcc_to_dwngrd_schema_id which allows
  to get the most suitable fourcc counterpart for the given
  downgraded subsampling property.
  Lookup table for translation of a fourcc to the position
  of its downgraded counterpart in the fourcc_dwngrd_schema
  tables.
 parsed from header 
 this driver fills quantisation table 0 with data for luma 
 this driver fills quantisation table 1 with data for chroma 
 this driver fills table 0 for this component 
 this driver fills table 0 for this component 
 this driver fills table 0 for this component 
 this driver fills table 0 for this component 
 this driver fills quantisation table 0 with data for luma 
 this driver fills quantisation table 1 with data for chroma 
	
	  class: 0 - DC, 1 - AC
	  id: 0 - Y, 1 - CbCr
 class == 0 
 Ls 
 P, Y, X 
 nonzero means extended mode - not supported 
  ============================================================================
  Device file operations
  ============================================================================
 Use separate control handler per file handle 
  ============================================================================
  video ioctl operations
  ============================================================================
		
		  4:1:1 subsampling only supported by 3250, 5420, and 5433
		  variants
 JPEG_MARKER_SOF0: baseline JPEG 
 after 0xffc0 
 after 0xffdb 
 after 0xffc4 
 0xffda 
 skip payload-less markers 
 skip uninteresting payload markers 
 index-th format of type type found ? 
			 Correct type but haven't reached our index yet,
			  just increment per-type index
 Format not found 
		
		  Rightmost and bottommost pixels are cropped by the
		  Exynos3250compatible JPEG IP for RGB formats, for the
		  specific width and height values respectively. This
		  assignment will result in v4l_bound_align_image returning
		  dimensions reduced by 1 for the aforementioned cases.
	 V4L2 specification suggests the driver corrects the format struct
	  if any of the dimensions is unsupported
 planar 
 packed 
	
	  The exynos4x12 device requires resulting YUV image
	  subsampling not to be lower than the input jpeg subsampling.
	  If this requirement is not met then downgrade the requested
	  capture format to the one with subsampling equal to the input jpeg.
	
	  Decompression of a JPEG file with 4:2:0 subsampling and odd
	  width to the YUV 4:2:0 compliant formats produces a raw image
	  with broken luma component. Adjust capture format to RGB565
	  in such a case.
		
		  During encoding Exynos4x12 SoCs access wider memory area
		  than it results from Image_x and Image_y values written to
		  the JPEG_IMAGE_SIZE register. In order to avoid sysmmu
		  page fault calculate proper buffer size in such a case.
	
	  For decoding init crop_rect with capture buffer dimmensions which
	  contain aligned dimensions of the input JPEG image and do it only
	  if crop rectangle hasn't been altered by the user space e.g. with
	  S_SELECTION ioctl. For encoding assign output buffer dimensions.
	
	  Prevent downscaling to YUV420 format by more than 2
	  for Exynos3250compatible SoC as it produces broken raw image
	  in such cases.
 Align scale ratio to the nearest power of 2 
  V4L2 controls
 For JPEG blob active == default == bounds 
  V4L2 controls
		
		  The exynos3250compatible device can produce JPEG image only
		  of 4:4:4 subsampling when given RGB32 source image.
		
		  The exynos4x12 device requires input raw image fourcc
		  to be V4L2_PIX_FMT_GREY if gray jpeg format
		  is to be set.
	
	  The exynos4x12 and exynos3250compatible devices require resulting
	  jpeg subsampling not to be lower than the input raw image
	  subsampling.
 444, 422, 420, GRAY 
 422, 420 
  ============================================================================
  mem2mem callbacks
  ============================================================================
 ultimately comes from sizeimage from userspace 
 JPEG RGB to YCbCr conversion matrix 
		
		  JPEG IP allows storing 4 quantization tables
		  We fill table 0 for luma and table 1 for chroma
 use table 0 for Y 
 use table 1 for Cb and Cr
 Y, Cb, Cr use Huffman table 0 
 S5P_JPEG_DECODE 
		
		  JPEG IP allows storing 4 quantization tables
		  We fill table 0 for luma and table 1 for chroma
		
		  JPEG IP allows storing 4 quantization tables
		  We fill table 0 for luma and table 1 for chroma
 use table 0 for Y 
 use table 1 for Cb and Cr
		
		  Some SoCs require setting Huffman tables before each run
 Y, Cb, Cr use Huffman table 0 
 ultimately comes from sizeimage from userspace 
 JPEG RGB to YCbCr conversion matrix 
		
		  We have only one input buffer and one output buffer. If there
		  is a resolution change event, no need to continue decoding.
  ============================================================================
  Queue operations
  ============================================================================
	
	  header is parsed during decoding and parsed information stored
	  in the context so we do not allow another buffer to overwrite it
	
	  This call to jpeg_bound_align_image() takes care of width and
	  height values alignment when user space calls the QBUF of
	  OUTPUT buffer after the S_FMT of CAPTURE buffer.
	  Please note that on Exynos4x12 SoCs, resigning from executing
	  S_FMT on capture buffer for each JPEG image can result in a
	  hardware hangup if subsampling is lower than the one of input
	  JPEG.
		
		  If there is a resolution change event, only update capture
		  queue when it is not streaming. Otherwise, update it in
		  STREAMOFF. See s5p_jpeg_stop_streaming for detail.
	
	  STREAMOFF is an acknowledgment for resolution change event.
	  Before STREAMOFF, we still have to return the old resolution and
	  subsampling. Update capture queue when the stream is off.
  ============================================================================
  ISR
  ============================================================================
  ============================================================================
  Driver basic infrastructure
  ============================================================================
 JPEG IP abstraction struct 
 memory-mapped registers 
 interrupt service routine registration 
 clocks 
 v4l2 device 
 mem2mem device 
 JPEG encoder devvideoX node 
 JPEG decoder devvideoX node 
 final statements & power management 
	
	  JPEG IP allows storing two Huffman tables for each component.
	  We fill table 0 for each component and do this here only
	  for S5PC210 and Exynos3250 SoCs. Exynos4x12 and Exynos542x SoC
	  require programming their Huffman tables each time the encoding
	  process is initialized, and thus it is accomplished in the
	  device_run callback of m2m_ops.
 CONFIG_PM 
 intentionally 3250 
 intentionally 3250 
 intentionally 3250 
 SPDX-License-Identifier: GPL-2.0-only
 linuxdriversmediaplatforms5p-jpegjpeg-hw.h
  Copyright (c) 2011 Samsung Electronics Co., Ltd.
 		http:www.samsung.com
  Author: Andrzej Pietrasiewicz <andrzejtp2010@gmail.com>
 no other way but polling for when JPEG IP becomes operational 
 this driver uses table 0 for all color components 
 this driver uses table 0 for all color components 
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (c) 2011 - 2012 Samsung Electronics Co., Ltd.
 		http:www.samsung.com
  Samsung EXYNOS5 SoC series G-Scaler driver
 Set input pixel offset 
 Set input original size 
 Set input cropped size 
 Set output original size 
 Set output scaled size 
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (c) 2011 - 2012 Samsung Electronics Co., Ltd.
 		http:www.samsung.com
  Samsung EXYNOS5 SoC series G-Scaler driver
 Reconfigure hardware if the context has changed. 
 update shadow registers 
 The source and target color format need to be set 
 Return 1 if rectangle a is enclosed in rectangle b, or 0 otherwise. 
 Check to see if scaling ratio is within supported range 
 Use separate control handler per file handle 
 Default color format 
 Setup the device context for mem2mem mode. 
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (c) 2011 - 2012 Samsung Electronics Co., Ltd.
 		http:www.samsung.com
  Samsung EXYNOS5 SoC series G-Scaler driver
	 To check if image size is modified to adjust parameter against
 Packed 
 Planar 
 adjust lefttop if cropping rectangle is out of bounds 
 Need to add code to algin left value with 2's multiple 
 The color format (num_comp, num_planes) must be already configured. 
 decompose Y into YCb 
 decompose Y into YCbCr 
 422 
 wake_up job_abort, stop_streaming 
 yuv420 : 16, others : 8 
 yuv420422 : 2, others : 1 
 yuv420422 : 4~16, others : 2~8 
 yuv420 : 4~16, others : 1 
 yuv420422 : 2, others : 1 
 yuv420 : 2, others : 1 
 Clear for full HW setup in first run after resume 
 SPDX-License-Identifier: GPL-2.0
  The Marvell camera core.  This device appears in a number of settings,
  so it needs platform-specific support outside of the core.
  Copyright 2011 Jonathan Corbet corbet@lwn.net
  Copyright 2018 Lubomir Rintel <lkundrak@v3.sk>
  Internal DMA buffer management.  Since the controller cannot do SG IO,
  we must have physically contiguous buffers to bring frames into.
  These parameters control how many buffers we use, whether we
  allocate them at load time (better chance of success, but nails down
  memory) or when somebody tries to use the camera (riskier), and,
  for load-time allocation, how big they should be.
  The controller can cycle through three buffers.  We could use
  more by flipping pointers around, but it probably makes little
  sense.
 Worst case 
 MCAM_MODE_VMALLOC 
 Used by SG_PARM 
 MCAM_MODE_VMALLOC 
  Status flags.  Always manipulated with bit operations.
 Buffers valid - first three 
 A frame is incoming 
 Must configure hardware 
 Running with a single buffer 
 SG restart needed 
 Frame 0 started 
 Bytes per pixel 
 Not found? Then return the first format. 
  The default format we use until somebody says otherwise.
  The two-word DMA descriptor format used by the Armada 610 and like.  There
  Is a three-word format as well (set C1_DESC_3WORD) where the third
  word is a pointer to the next descriptor, but we don't use it.  Two-word
  descriptors have to be contiguous in memory.
  Our buffer type for working with videobuf2.  Note that the vb2
  developers have decreed that struct vb2_v4l2_buffer must be at the
  beginning of this structure.
 Descriptor virtual address 
 Descriptor physical address 
  Hand a completed buffer back to user space.
  Debugging and related.
  Flag manipulation helpers
 ------------------------------------------------------------------- 
  Make the controller start grabbing images.  Everything must
  be set up before doing this.
	 set_bit performs a read, so no other barrier should be
 Using MIPI mode and enable MIPI 
 set the default value 
		
		  0x41 actives 1 lane
		  0x43 actives 2 lanes
		  0x45 actives 3 lanes (never happen)
		  0x47 actives 4 lanes
 Using Parallel mode or disable MIPI 
 ------------------------------------------------------------------- 
  Code specific to the vmalloc buffer mode.
  Allocate in-kernel DMA buffers for vmalloc mode.
  Set up DMA buffers when operating in vmalloc mode
	
	  Store the first two YUV buffers. Then either
	  set the third if it exists, or tell the controller
	  to just use two.
 32 bits only 
  Copy data out to user space in the vmalloc case
 IO got stopped 
 Leave it valid, hope for better later 
		
		  Drop the lock during the big copy.  This should be safe...
  Make sure our allocated buffers are up to the task.
 MCAM_MODE_VMALLOC 
 MCAM_MODE_VMALLOC 
 ---------------------------------------------------------------------- 
  DMA-contiguous code.
  Set up a contiguous buffer for the given frame.  Here also is where
  the underrun strategy is set: if there is no buffer available, reuse
  the buffer from the other BAR and set the CF_SINGLE_BUFFER flag to
  keep the interrupt handler from giving that buffer back to user
  space.  In this way, we always have a buffer to DMA to and don't
  have to try to play games stopping and restarting the controller.
	
	  If there are no available buffers, go into single mode
		
		  OK, we have a buffer we can use.
  Initial B_DMA_contig setup.
  Frame completion handling.
 MCAM_MODE_DMA_CONTIG 
 ---------------------------------------------------------------------- 
  Scattergather-specific code.
  Set up the next buffer for SG IO; caller should be sure that
  the controller is stopped and a buffer is available.
	
	  Very Bad Not Good Things happen if you don't clear
	  C1_DESC_ENA before making any descriptor changes.
  Initial B_DMA_sg setup
	
	  The list-empty condition can hit us at resume time
	  if the buffer list was empty when the system was suspended.
  Frame completion with SG is trickier.  We can't muck with
  a descriptor chain on the fly, since the controller buffers it
  internally.  So we have to actually stop and restart; Marvell
  says this is the way to do it.
  Of course, stopping is easier said than done; experience shows
  that the controller can start a frame after C0_ENABLE has been
  cleared.  So when running in SG mode, the controller is "stopped"
  on receipt of the start-of-frame interrupt.  That means we can
  safely change the DMA descriptor array here and restart things
  (assuming there's another buffer waiting to go).
	
	  If we're no longer supposed to be streaming, don't do anything.
	
	  If we have another buffer available, put it in and
	  restart the engine.
	
	  Otherwise set CF_SG_RESTART and the controller will
	  be restarted once another buffer shows up.
	
	  Now we can give the completed frame back to user space.
  Scattergather mode requires stopping the controller between
  frames so we can put in a new DMA descriptor array.  If no new
  buffer exists at frame completion, the controller is left stopped;
  this function is charged with getting things going again.
 MCAM_MODE_DMA_SG 
 MCAM_MODE_DMA_SG 
 ---------------------------------------------------------------------- 
  Buffer-mode-independent controller code.
  Image format setup
	
	  Tell the controller about the image format we are using.
	
	  Make sure it knows we want to use hsyncvsync.
  Configure the controller for operation; caller holds the
  device mutex.
	
	  Clear any pending interrupts, since we do not
	  expect to have IO active prior to enabling.
  Stop the controller, and don't return until we're really sure that no
  further DMA is going on.
	
	  Theory: stop the camera controller (whether it is operating
	  or not).  Delay briefly just in case we race with the SOF
	  interrupt, then wait until no DMA is active.
	
	  This is a brutally long sleep, but experience shows that
	  it can take the controller a while to get the message that
	  it needs to stop grabbing frames.  In particular, we can
	  sometimes (on mmp) get a frame at the end WITHOUT the
	  start-of-frame indication.
 This would be bad news - what now? 
  Power up and down.
	
	  School of hard knocks department: be sure we do any register
	  twiddling on the controller before calling the platform
	  power down routine.
 ---------------------------------------------------------------------- 
  Master sensor clock.
	
	  Clock the sensor appropriately.  Controller clock should
	  be 48MHz, sensor "typical" value is half that.
 -------------------------------------------------------------------- 
  Communications with the sensor.
  We have found the sensor on the i2c.  Let's try to have a
  conversation.
 Getset parameters? 
  Configure the sensor to match the parameters we have.  Caller should
  hold s_mutex
	
	  OV7670 does weird things if flip is set before format...
  Get everything ready, and start grabbing frames.
	
	  Configuration.  If we still don't have DMA buffers,
	  make one last, desperate attempt.
	
	  Turn it loose.
 ----------------------------------------------------------------------- 
  Videobuf2 interface code.
 Someday we have to support planar formats... 
  These need to be called with the mutex held from vb2
	
	  Videobuf2 sneakily hoards all the buffers and won't
	  give them to us until after streaming starts.  But
	  we can't actually start streaming until we have a
	  destination.  So go into a wait state and hope they
	  give us buffers soon.
	
	  Ensure clear the left over frame flags
	  before every really start streaming
 They never gave us buffers 
	
	  VB2 reclaims the buffers, so we need to forget
	  about them.
  Scattergather mode uses all of the above functions plus a
  few extras to deal with DMA mapping.
 MCAM_MODE_DMA_SG 
 ---------------------------------------------------------------------- 
  The long list of V4L2 ioctl() operations.
	
	  Can't do anything if the device is not idle
	  Also can't if there are streaming buffers in place.
	
	  See if the formatting works in principle.
	
	  Now we start to change things for real, so let's do it
	  under lock.
	
	  Make sure we have appropriate DMA buffers.
  Return our stored notion of how the camera isshould be configured.
  The V4l2 spec wants us to be smarter, and actually get this from
  the camera (and not mess with it at open time).  Someday.
  We only have one input - the sensor - so minimize the nonsense here.
  GS_PARM.  Most of this is done by the sensor, but we are
  the level which controls the number of read buffers.
 ---------------------------------------------------------------------- 
  Our various file operations.
  This template device holds all of those v4l2 methods; we
  clone it for specific real devices.
 ---------------------------------------------------------------------- 
  Interrupt handler stuff
	
	  Basic frame housekeeping.
	
	  "This should never happen"
	
	  Process the frame and set up the next one.
  The interrupt handler; this needs to be called from the
  platform irq handler with the lock held.
 Clear'em all 
	
	  Handle any frame completions.  There really should
	  not be more than one of these, or we have fallen
	  far behind.
	 
	  When running in SG mode, the frame number lacks any
	  real meaning - there's only one descriptor array - but
	  the controller still picks a different one to signal
	  each time.
	
	  If a frame starts, note that we have DMA active.  This
	  code assumes that we won't get multiple frame interrupts
	  at once; may want to rethink that.
 ---------------------------------------------------------------------- 
  Registration and such.
	
	  Get the v4l2 setup done.
	
	  Validate the requested buffer mode.
	
	  Register with V4L
	
	  Register sensor master clock.
	
	  If so requested, try to get our DMA buffers now.
	
	  If we have no users (and we really, really should have no
	  users) the device will already be powered down.  Trying to
	  take it down again will wedge the machine, which is frowned
	  upon.
  Power management
		
		  If there was a buffer in the DMA engine at suspend
		  time, put it back on the queue or we'll forget about it.
 SPDX-License-Identifier: GPL-2.0-only
  Support for the camera device found on Marvell MMP processors; known
  to work with the Armada 610 as used in the OLPC 1.75 system.
  Copyright 2011 Jonathan Corbet <corbet@lwn.net>
  Copyright 2018 Lubomir Rintel <lkundrak@v3.sk>
  calc the dphy register values
  There are three dphy registers being used.
  dphy[0] - CSI2_DPHY3
  dphy[1] - CSI2_DPHY5
  dphy[2] - CSI2_DPHY6
  CSI2_DPHY3 and CSI2_DPHY6 can be set with a default value
  or be calculated dynamically
	
	  If CSI2_DPHY3 is calculated dynamically,
	  pdata->lane_clk should be already set
	  either in the board driver statically
	  or in the sensor driver dynamically.
	
	  dphy[0] - CSI2_DPHY3:
	   bit 0 ~ bit 7: HS Term Enable.
	    defines the time that the DPHY
	    wait before enabling the data
	    lane termination after detecting
	    that the sensor has driven the data
	    lanes to the LP00 bridge state.
	    The value is calculated by:
	    (Max T(D_TERM_EN)Period(DDR)) - 1
	   bit 8 ~ bit 15: HS_SETTLE
	    Time interval during which the HS
	    receiver shall ignore any Data Lane
	    HS transitions.
	    The value has been calibrated on
	    different boards. It seems to work well.
	 
	   More detail please refer
	   MIPI Alliance Spectification for D-PHY
	   document for explanation of HS-SETTLE
	   and D-TERM-EN.
		
		  Calculate CSI2_DPHY3 algo for PXA910
		
		  Calculate CSI2_DPHY3 algo for PXA2128
		
		  Use default CSI2_DPHY3 value for PXA688PXA988
	
	  mipi_clk will never be changed, it is a fixed value on MMP
 get the escape clk, this is hard coded 
	
	  dphy[2] - CSI2_DPHY6:
	  bit 0 ~ bit 7: CK Term Enable
	   Time for the Clock Lane receiver to enable the HS line
	   termination. The value is calculated similarly with
	   HS Term Enable
	  bit 8 ~ bit 15: CK Settle
	   Time interval during which the HS receiver shall ignore
	   any Clock Lane HS transitions.
	   The value is calibrated on the boards.
			 Some clks are not necessary on some boards
			  We still try to run even it fails getting clk
		
		  These are values that used to be hardcoded in mcam-core and
		  work well on a OLPC XO 1.75 with a parallel bus sensor.
		  If it turns out other setups make sense, the values should
		  be obtained from the device tree.
	
	  Get our IO memory.
	
	  Create a match of the sensor against its OF node.
	
	  Register the device with the core.
	
	  Add OF clock provider.
	
	  Finally, set up our IRQ now that the core is ready to
	  deal with it.
  Suspendresume support.
 SPDX-License-Identifier: GPL-2.0-only
  A driver for the CMOS camera controller in the Marvell 88ALP01 "cafe"
  multifunction chip.  Currently works with the Omnivision OV7670
  sensor.
  The data sheet for this device can be found at:
     http:wiki.laptop.orgimages55c88ALP01_Datasheet_July_2007.pdf
  Copyright 2006-11 One Laptop Per Child Association, Inc.
  Copyright 2006-11 Jonathan Corbet <corbet@lwn.net>
  Copyright 2018 Lubomir Rintel <lkundrak@v3.sk>
  Written by Jonathan Corbet, corbet@lwn.net.
  v4l2_devicev4l2_subdev conversion by:
  Copyright (C) 2009 Hans Verkuil <hverkuil@xs4all.nl>
  Parameters.
 Fully initialized? 
 Waiting on i2c events 
  Most of the camera controller registers are defined in mcam-core.h,
  but the Cafe platform has some additional registers of its own;
  they are described here.
  "General purpose register" has a couple of GPIOs used for sensor
  power and reset on OLPC XO 1.0 systems.
 Pad 1 (power down) enable 
 Pad 0 (reset) enable 
 Control 1 value 
  Control 0 is wired to reset on OLPC machines.  For ov7x sensors,
  it is active low.
 Control 0 value 
  These registers control the SMBUS module for communicating
  with the sensor.
 TWSI (smbus) control 0 
 TWSI enable 
 1 = 16-bit, 0 = 8-bit 
 Slave ID 
  Subtle trickery: the slave ID field starts with bit 2.  But the
  Linux i2c stack wants to treat the bottommost bit as a separate
  readwrite bit, which is why slave ID's are usually presented
  >>1.  For consistency with that behavior, we shift over three
  bits instead of two.
 Clock divider 
 Mask ack from sensor 
 Make it work on OV sensors 
 TWSI control 1 
 Data tofrom camchip 
 Address (register) 
 Set for read op 
 Write status 
 Read data valid 
 Something screwed up 
  Here's the weird global control registers
 Controlstatus register 
 SW Reset set 
 SW Reset clear 
 Master reset set 
 HW Reset clear 
 CCIC Clock enable 
 Interrupt mask register 
 CCIC Interrupt enable 
 GPIO functional control register 
 Camera GPIO enabled 
 GPIO register 
 GPIO output 
 Output pin value 
  Debugging and related.
 -------------------------------------------------------------------- 
  The I2CSMBUS interface to the camera itself starts here.  The
  controller handles SMBUS itself, presenting a relatively simple register
  interface; all we have to do is to tell it where to route the data.
 generous 
	
	  We must delay after the interrupt, or the controller gets confused
	  and never does give us good status.  Fortunately, we don't do this
	  often.
 Make OV sensors work 
	
	  Marvell sez set clkdiv to all 1's for now.
 force write 
	 Unfortunately, reading TWSIC1 too soon after sending a command
	  causes the device to die.
	  Use a busy-wait because we often send a large quantity of small
	  commands at-once; using msleep() would cause a lot of context
	  switches which take longer than 2ms, resulting in a noticeable
	  boot-time and capture-start delays.
	
	  Another sad fact is that sometimes, commands silently complete but
	  cafe_smbus_write_done() never becomes aware of this.
	  This happens at random and appears to possible occur with any
	  command.
	  We don't understand why this is. We work around this issue
	  with the timeout in the wait below, assuming that all commands
	  complete within the timeout.
	
	  We must delay after the interrupt, or the controller gets confused
	  and never does give us good status.  Fortunately, we don't do this
	  often.
 Make OV sensors work 
	
	  Marvel sez set clkdiv to all 1's for now.
 force write 
  Perform a transfer over SMBUS.  This thing is called under
  the i2c bus lock, so we shouldn't race with ourselves...
	
	  This interface would appear to only do byte data ops.  OK
	  it can do word too, but the cam chip has no use for that.
  Controller-level stuff
	
	  Added magic to bring up the hardware on the B-Test board
	
	  Go through the dance needed to wake the device up.
	  Note that these registers are global and shared
	  with the NAND and SD devices.  Interaction between the
	  three still needs to be examined.
 Needed? 
	
	  Here we must wait a bit for the controller to come around.
	
	  Mask all interrupts.
	
	  Part one of the sensor dance: turn the global
	  GPIO signal on.
	
	  Put the sensor into operational mode (assumes OLPC-style
	  wiring).  Control 0 is reset - set to 1 to operate.
	  Control 1 is power down, set to 0 to operate.
 pwr up, reset 
  The platform interrupt handler.
 -------------------------------------------------------------------------- 
	
	  Exclude QCIF mode, because it only captures a tiny portion
	  of the sensor FOV
	
	  Set the clock speed for the XO 1; I don't believe this
	  driver has ever run anywhere else.
 -------------------------------------------------------------------------- 
  PCI interface stuff.
	
	  Start putting together one of our big camera structures.
	
	  Vmalloc mode for buffers is traditional with this driver.
	  We might be able to run DMA_contig, especially on a system
	  with CMA in it.
	
	  Get set up on the PCI bus.
	
	  Initialize the controller.
	
	  Set up I2CSMBUS communications.  We have to drop the mutex here
	  because the sensor could attach in this call chain, leading to
	  unsightly deadlocks.
  Shut down an initialized device
  Basic power management.
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (C) 2006-2009 Texas Instruments Inc
  CCDC hardware module for DM6446
  ------------------------------
  This module is for configuring CCD controller of DM6446 VPFE to capture
  Raw yuv or Bayer RGB data from a decoder. CCDC has several modules
  such as Defect Pixel Correction, Color Space Conversion etc to
  pre-process the Raw Bayer RGB data, before writing it to SDRAM.
  This file is named DM644x so that other variants such DM6443
  may be supported using the same module.
  TODO: Test Raw bayer parameter settings and bayer capture
 	 Split module parameter structure to module specific ioctl structs
 	 investigate if enum used for user space type definition
 	 to be replaced by #defines or integer
 CCDC interface type 
 Raw Bayer configuration 
 YCbCr configuration 
 ccdc base address 
 Raw configurations 
 Raw Bayer formats 
 Raw YUV formats 
 CCDC SaveRestore context 
 register access routines 
 enable video port 
  ccdc_setwin()
  This function will configure the window size
  to be capture in CCDC reg
	
	  ppc - per pixel count. indicates how many pixels per cell
	  output to SDRAM. example, for ycbcr, it is one y and one c, so 2.
	  raw capture this is 1
 Since first line doesn't have any data 
 configure VDINT0 
 Since first line doesn't have any data 
		
		  configure VDINT0 and VDINT1. VDINT1 will be at half
		  of image height
  ccdc_restore_defaults()
  This function will write defaults to all CCDC registers
 disable CCDC 
 set all registers to default value 
  ccdc_config_ycbcr()
  This function will configure CCDC for YCbCr video capture
	
	  first restore the CCDC registers to default values
	  This is important since we assume default values to be set in
	  a lot of registers that we didn't touch
	
	  configure pixel format, frame format, configure video frame
	  format, enable output to SDRAM, enable internal timing generator
	  and 8bit pack mode
 setup BT.656 sync mode 
		
		  configure the FID, VD, HD pin polarity,
		  fld,hd pol positive, vd negative, 8-bit data
 yc external sync mode 
 configure video window 
	
	  configure the order of y cb cr in SDRAM, and disable latch
	  internal register on vsync
	
	  configure the horizontal line offset. This should be a
	  on 32 byte boundary. So clear LSB 5 bits
 configure the memory line offset 
 two fields are interleaved in memory 
 configure DCSub 
	
	  Configure gain,  Start pixel, No of line to be avg,
	  No of pixelline to be avg, & Enable the Black clamping
 If Black clamping is enable then make dcsub 0 
  ccdc_config_raw()
  This function will configure CCDC for Raw capture mode
      Reset CCDC 
 Disable latching function registers on VSYNC  
	
	  Configure the vertical sync polarity(SYN_MODE.VDPOL),
	  horizontal sync polarity (SYN_MODE.HDPOL), frame id polarity
	  (SYN_MODE.FLDPOL), frame format(progressive or interlace),
	  data size(SYNMODE.DATSIZ), &pixel format (Input mode), output
	  SDRAM, enable internal timing generator
 Enable and configure aLaw register if needed 
 Configure video window 
 Configure Black Clamp 
 Configure Black level compensation 
 If data size is 8 bit then pack the data 
 disable video port 
 Write value in FMTCFG 
 Configure the color pattern according to mt9t001 sensor 
	
	  Configure Data formatter(Video port) pixel selection
	  (FMT_HORZ, FMT_VERT)
	
	  Configure Horizontal offset register. If pack 8 is enabled then
	  1 pixel will take 1 byte
 else one pixel will take 2 byte 
 Set value for SDOFST 
 For intelace inverse mode 
 For intelace non inverse mode 
	
	  Configure video port pixel selection (VPOUT)
	  Here -1 is to make the height value less than FMT_VERT.FMTLNV
 misc operations 
 TODO add support for raw bayer here 
	
	  first try to register with vpfe. If not correct platform, then we
	  don't have to iomap
 Save CCDC context 
 Disable CCDC 
 Restore CCDC context 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2010 Texas Instruments Inc
  vpbe_current_encoder_info - Get config info for current encoder
  @vpbe_dev: vpbe device ptr
  Return ptr to current encoder config info
  vpbe_find_encoder_sd_index - Given a name find encoder sd index
  @cfg: ptr to vpbe cfg
  @index: index used by application
  Return sd index of the encoder
 Venc is always first	
  vpbe_enum_outputs - enumerate outputs
  @vpbe_dev: vpbe device ptr
  @output: ptr to v4l2_output structure
  Enumerates the outputs available at the vpbe display
  returns the status, -EINVAL if end of output list
 Get std by std id 
  vpbe_set_output - Set output
  @vpbe_dev: vpbe device ptr
  @index: index of output
  Set vpbe output to the output specified by the index
	
	  Currently we switch the encoder based on output selected
	  by the application. If media controller is implemented later
	  there is will be an API added to setup_link between venc
	  and external encoder. So in that case below comparison always
	  match and encoder will not be switched. But if application
	  chose not to use media controller, then this provides current
	  way of switching encoder at the venc output.
 Need to switch the encoder at the output 
 Set output at the encoder 
	
	  It is assumed that venc or external encoder will set a default
	  mode in the sub device. For external encoder or LCD pannel output,
	  we also need to set up the lcd port for the required mode. So setup
	  the lcd port for the default mode that is configured in the board
	  archarmmach-davinciboard-dm355-evm.setup file for the external
	  encoder.
  vpbe_get_output - Get output
  @vpbe_dev: vpbe device ptr
  return current vpbe output to the the index
  vpbe_s_dv_timings - Set the given preset timings in the encoder
  Sets the timings if supported by the current encoder. Return the status.
  0 - success & -EINVAL on error
 Call amplifier subdevice 
 set the lcd controller output for the given mode 
  vpbe_g_dv_timings - Get the timings in the current encoder
  Get the timings in the current encoder. Return the status. 0 - success
  -EINVAL on error
  vpbe_enum_dv_timings - Enumerate the dv timings in the current encoder
  Get the timings in the current encoder. Return the status. 0 - success
  -EINVAL on error
  vpbe_s_std - Set the given standard in the encoder
  Sets the standard if supported by the current encoder. Return the status.
  0 - success & -EINVAL on error
 set the lcd controller output for the given mode 
  vpbe_g_std - Get the standard in the current encoder
  Get the standard in the current encoder. Return the status. 0 - success
  -EINVAL on error
  vpbe_set_mode - Set mode in the current encoder using mode info
  Use the mode string to decide what timings to set in the encoder
  This is typically useful when fbset command is used to change the current
  timings by specifying a string to indicate the timings.
			
			  it may be one of the 3 timings type. Check and
			  invoke right API
 Only custom timing should reach here 
 set the default mode in the encoder 
  vpbe_initialize() - Initialize the vpbe display controller
  @dev: Master and slave device ptr
  @vpbe_dev: vpbe device ptr
  Master frame buffer device drivers calls this to initialize vpbe
  display controller. This will then registers v4l2 device and the sub
  devices and sets a current encoder sub device for display. v4l2 display
  device driver is the master and frame buffer display device driver is
  the slave. Frame buffer display driver checks the initialized during
  probe and exit if not initialized. Returns status.
	
	  v4l2 abd FBDev frame buffer devices will get the vpbe_dev pointer
	  from the platform device by iteration of platform drivers and
	  matching with device name
 We have dac clock available for platform 
 first enable vpss clocks 
 First register a v4l2 device 
 register venc sub device 
 initialize osd device 
	
	  Register any external encoders that are configured. At index 0 we
	  store venc sd index.
 venc is at index 0 
 Add amplifier subdevice for dm365 
 set the current encoder and output to that of venc by default 
 TBD handling of bootargs for default output and mode 
  vpbe_deinitialize() - de-initialize the vpbe display controller
  @dev: Master and slave device ptr
  @vpbe_dev: vpbe device ptr
  vpbe_master and slave frame buffer devices calls this to de-initialize
  the display controller. It is called when master and slave device
  driver modules are removed and no longer requires the display controller.
 disable vpss clocks 
 set the driver data in platform device 
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (C) 2008-2009 Texas Instruments Inc
  Image Sensor Interface (ISIF) driver
  This driver is for configuring the ISIF IP available on DM365 or any other
  TI SoCs. This is used for capturing yuv or bayer video or image data
  from a decoder or sensor. This IP is similar to the CCDC IP on DM355
  and DM6446, but with enhanced or additional ip blocks. The driver
  configures the ISIF upon commands from the vpfe bridge driver through
  ccdc_hw_device interface.
  TODO: 1) Raw bayer parameter settings and bayer capture
 	 2) Add support for control ioctl
 Defaults for module configuration parameters 
 ISIF operation configuration 
 ISIF base address 
 ISIF Linear Table 0 
 ISIF Linear Table 1 
 Raw Bayer formats 
 Raw YUV formats 
 register access routines 
 reg_modify() - read, modify and write register 
 disable BC 
 disable vdfc 
 disable CSC 
 disable linearization 
 disable other modules here as they are supported 
 Before disable isif, disable all ISIF modules 
		
		  wait for next VD. Assume lowest scan rate is 12 Hz. So
		  100 msec delay is good enough
 Horizontal pattern 
 vertical pattern 
 LPF 
 Enable clock to ISIF, IPIPEIF and BL 
 Set default offset and gain 
 This function will configure the window size to be capture in ISIF reg 
	
	  ppc - per pixel count. indicates how many pixels per cell
	  output to SDRAM. example, for ycbcr, it is one y and one c, so 2.
	  raw capture this is 1
 Writing the horizontal info into the registers 
 To account for VD since line 0 doesn't have any data 
 To account for VD since line 0 doesn't have any data 
 configure VDINT0 and VDINT1 
	
	  DC Offset is always added to image data irrespective of bc enable
	  status
 Enable BC and horizontal clamp calculation parameters 
			
			  Window count for calculation
			  Base window selection
			  pixel limit
			  Horizontal size of window
			  vertical size of the window
			  Horizontal start position of the window
			  Vertical start position of the window
 vertical clamp calculation parameters 
 Reset clamp value sel for previous line 
 Optical Black horizontal start position 
 Optical Black vertical start position 
 Optical Black vertical size for calculation 
 Vertical start position for BC subtraction 
 shift value for correction & enable linearization (set lsb) 
 Scale factor 
 initialize retries to loop for max ~ 250 usec 
 Correction mode 
 Correct whole line or partial 
 level shift value 
 Defect saturation level 
 set DFCMARST and set DFCMWR 
 clear DFCMARST and set DFCMWR 
 Extra cycle needed 
 enable VDFC 
 CSCM - LSB 
 CSCM - MSB 
 program the active area 
	
	  one extra pixel as required for CSC. Actually number of
	  pixel - 1 should be configured in this register. So we
	  need to subtract 1 before writing to FMTSPH, but we will
	  not do this since csc requires one extra pixel
	
	  one extra line as required for CSC. See reason documented for
	  num_pixels
 Enable CSC 
	
	  Configure CCDCFG register:-
	  Set CCD Not to swap input since input is RAW data
	  Set FID detection function to Latch at V-Sync
	  Set WENLOG - isif valid area
	  Set TRGSEL
	  Set EXTRG
	  Packed to 8 or 16 bits
	
	  Configure the vertical sync polarity(MODESET.VDPOL)
	  Configure the horizontal sync polarity (MODESET.HDPOL)
	  Configure frame id polarity (MODESET.FLDPOL)
	  Configure data polarity
	  Configure External WEN Selection
	  Configure frame format(progressive or interlace)
	  Configure pixel format (Input mode)
	  Configure the data shift
	
	  Configure GAMMAWD register
	  CFA pattern setting
 Gamma msb 
 Configure DPCM compression settings 
 Configure Gain & Offset 
 Configure Color pattern 
 Configure HSIZE register  
 calculate line offset in 32 bytes based on pack value 
 Configure SDOFST register  
 For interlace inverse mode 
 For interlace non inverse mode 
 For progressive inverse mode 
 For progressive non inverse mode 
 Configure video window 
 Configure Black Clamp 
 Configure Vertical Defection Pixel Correction 
 Configure Color Space Conversion 
 Configure Culling 
 Configure horizontal and vertical offsets(DFC,LSC,Gain) 
 Setup test pattern if enabled 
 Use the HDVD pol settings from user 
 misc operations 
 This function will configure ISIF for YCbCr parameters. 
 configure pixel format or input mode 
 pack the data to 8-bit ISIFCFG 
 setup BT.656, embedded sync  
 enable 10 bit mode in ccdcfg 
 should never come here 
 Set up pix order 
 configure video window 
	
	  configure the horizontal line offset
	  this is done by rounding up width to a multiple of 16 pixels
	  and multiply by two to account for y:cb:cr 4:2:2 data
 configure the memory line offset 
 two fields are interleaved in memory 
 copy defaults to module params 
 Platform data holds setup_pinmux function ptr 
	
	  first try to register with vpfe. If not correct platform, then we
	  don't have to iomap
	
	  setup Mux configuration for ccdc which may be different for
	  different SoCs using this CCDC
 Get the ISIF base address, linearization table0 and table1 addr. 
 ISIF base address 
 ISIF linear tbl0 address 
 ISIF linear tbl0 address 
  vpif - Video Port Interface driver
  VPIF is a receiver and transmitter for video data. It has two channels(0, 1)
  that receiving video byte stream and two channels(2, 3) for video output.
  The hardware supports SDTV, HDTV formats, raw data capture.
  Currently, the driver supports NTSC and PAL standards.
  Copyright (C) 2009 Texas Instruments Incorporated - https:www.ti.com
  This program is free software; you can redistribute it andor
  modify it under the terms of the GNU General Public License as
  published by the Free Software Foundation version 2.
  This program is distributed .as is. WITHOUT ANY WARRANTY of any
  kind, whether express or implied; without even the implied warranty
  of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
  vpif_ch_params: video standard configuration parameters for vpif
  The table must include all presets from supported subdevices.
 HDTV formats 
 SDTV formats 
 This structure is used to keep track of VPIF size register's offsets 
 Channel0 
 Channel1 
 Channel2 
 Channel3 
 vpif_set_mode_info:
  This function is used to set horizontal and vertical config parameters
  As per the standard in the channel, configure the values of L1, L3,
  L5, L7  L9, L11 in VPIF Register , also write width and height
 config_vpif_params
  Function to set the parameters of a channel
  Mainly modifies the channel ciontrol register
  It sets frame format, yc mux mode
 Set raster scanning SDR Format 
 Set the Pixel enable bit 
 Set the polarity of various pins 
 Set data width 
 Write the pitch in the driver 
 vpif_set_video_params
  This function is used to set video parameters in VPIF register
 YC are on separate channels (HDTV formats) 
	
	  If VPIF Node has endpoints, assume "new" DT support,
	  where capture and display drivers don't have DT nodes
	  so their devices need to be registered manually here
	  for their legacy platform_drivers to work.
	
	  For DT platforms, manually create platform_devices for
	  capturedisplay drivers.
 sentinel  },
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2010 Texas Instruments Incorporated - https:www.ti.com
 Make cur_frm pointing to next_frm 
	
	  one field is displayed configure
	  the next frame if it is available
	  otherwise hold on current frame
	  Get next from the buffer queue
 Remove that from the buffer queue 
 Mark state of the frame to active 
 interrupt service routine 
		
		 If the display is non-interlaced, then we need to flag the
		 end-of-frame event at every interrupt regardless of the
		 value of the FIDST bit.  We can conclude that the display is
		 non-interlaced if the value of the FIDST bit is unchanged
		 from the previous interrupt.
 end-of-frame for interlaced display 
 Check the field format 
 Progressive mode 
 Interlaced mode 
			
			 If field id does not match with store
			 field id
 Make them in sync 
			
			 device field id and local field id are
			 in sync. If this is even field
 odd field 
  vpbe_buffer_prepare()
  This is the callback function called from vb2_qbuf() function
  the buffer is prepared and user space virtual address is converted into
  physical address
  vpbe_buffer_setup()
  This function allocates memory for the buffers
 Get the file handle object and layer object 
 Store number of buffers allocated in numbuffer member 
  vpbe_buffer_queue()
  This function adds the buffer to DMA queue
 Get the file handle object and layer object 
 add the buffer to the DMA queue 
 Get the next frame from the buffer queue 
 Remove buffer from the buffer queue 
 Mark state of the current frame to active 
 Initialize field_id and started member 
 Set parameters in OSD and VENC 
	
	  if request format is yuv420 semiplanar, need to
	  enable both video windows
 release all active buffers 
 Set address in the display registers 
 Enable the window 
	
	  Application initially set the image format. Current display
	  size is obtained from the vpbe display controller. expected_xsize
	  and expected_ysize are set through S_SELECTION ioctl. Based on this,
	  driver will calculate the scale factors for vertical and
	  horizontal direction so that the image is displayed scaled
	  and expanded. Application uses expansion to display the image
	  in a square pixel. Otherwise it is displayed using displays
	  pixel aspect ratio.It is expected that application chooses
	  the crop coordinates for cropped or scaled display. if crop
	  size is less than the image size, it is displayed cropped or
	  it is displayed scaled andor expanded.
	 
	  to begin with, set the crop window same as expected. Later we
	  will override with scaled window size
 no horizontal zoom 
 no horizontal zoom 
 no horizontal zoom 
 no horizontal zoom 
 no scaling, only cropping. Set display area to crop area 
 no scaling, only cropping. Set display area to crop area 
 window height must be even for interlaced display 
  vpbe_try_format()
  If user application provides width and height, and have bytesperline set
  to zero, driver calculates bytesperline and sizeimage based on hardware
  limits.
 choose default as V4L2_PIX_FMT_UYVY 
 Check the field format 
 Make the bytesperline 32 byte aligned 
 apply zooming and h or v expansion 
 Enable expansion filter 
 If buffer type is video output 
 Fill in the information about format 
 Fill in the information about format 
 Check for valid pixel format 
	 YUV420 is requested, check availability of the
		 if other layer is available, only
		  claim it, do not configure it
 Get osd layer config 
 Store the pixel format in the layer object 
 Change of the default pixel format for both video windows 
 Set the layer config in the osd window 
 Readback and fill the local copy of current pix format 
 Check for valid field format 
  vpbe_display_s_std - Set the given standard in the encoder
  Sets the standard if supported by the current encoder. Return the status.
  0 - success & -EINVAL on error
  vpbe_display_g_std - Get the standard in the current encoder
  Get the standard in the current encoder. Return the status. 0 - success
  -EINVAL on error
 Get the standard from the current encoder 
  vpbe_display_enum_output - enumerate outputs
  Enumerates the outputs available at the vpbe display
  returns the status, -EINVAL if end of output list
 Enumerate outputs 
  vpbe_display_s_output - Set output to
  the output specified by the index
  vpbe_display_g_output - Get output from subdevice
  for a given by the index
 Get the standard from the current encoder 
  vpbe_display_enum_dv_timings - Enumerate the dv timings
  enum the timings in the current encoder. Return the status. 0 - success
  -EINVAL on error
 Enumerate outputs 
  vpbe_display_s_dv_timings - Set the dv timings
  Set the timings in the current encoder. Return the status. 0 - success
  -EINVAL on error
 Set the given standard in the encoder 
  vpbe_display_g_dv_timings - Set the dv timings
  Get the timings in the current encoder. Return the status. 0 - success
  -EINVAL on error
 Get the given standard in the encoder 
  vpbe_display_open()
  It creates object of file handle structure and stores it in private_data
  member of filepointer
 creating context for file descriptor 
 leaving if layer is already initialized 
 First claim the layer for this device 
 Couldn't get layer 
 Increment layer usrs counter 
  vpbe_display_release()
  This function deletes buffer queue, frees the buffers and the davinci
  display file  handle
 Decrement layer usrs counter 
 If this file handle has initialize encoder device, reset it 
 vpbe capture ioctl operations 
 Allocate memory for four plane display objects 
 Get the pointer to the layer object 
 Initialize field of video device 
 set the driver data in platform device 
  vpbe_display_probe()
  This function creates device entries by register itself to the V4L2 driver
  and initializes fields of each layer objects
 Allocate memory for vpbe_display 
	
	  Scan all the platform devices to find the vpbe
	  controller device and get the vpbe_dev object
 Initialize the vpbe display controller 
 initialize vb2 queue 
 Unregister video device 
  vpbe_display_remove()
  It un-register hardware layer from V4L2 driver
 deinitialize the vpbe display controller 
 un-register device 
 Get the pointer to the layer object 
 Unregister video device 
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (C) 2008-2009 Texas Instruments Inc
  Driver name : VPFE Capture driver
     VPFE Capture driver allows applications to capture and stream video
     frames on DaVinci SoCs (DM6446, DM355 etc) from a YUV source such as
     TVP5146 or  Raw Bayer RGB image data from an image sensor
     such as Microns' MT9T001, MT9T031 etc.
     These SoCs have, in common, a Video Processing Subsystem (VPSS) that
     consists of a Video Processing Front End (VPFE) for capturing
     videoraw image data and Video Processing Back End (VPBE) for displaying
     YUV data through an in-built analog encoder or Digital LCD port. This
     driver is for capture through VPFE. A typical EVM using these SoCs have
     following high level configuration.
     decoder(TVP5146		YUV
 	     MT9T001)   -->  Raw Bayer RGB ---> MUX -> VPFE (CCDCISIF)
 				data input              |      |
 							V      |
 						      SDRAM    |
 							       V
 							   Image Processor
 							       |
 							       V
 							     SDRAM
     The data flow happens from a decoder connected to the VPFE over a
     YUV embedded (BT.656BT.1120) or separate sync or raw bayer rgb interface
     and to the input of VPFE through an optional MUX (if more inputs are
     to be interfaced on the EVM). The input data is first passed through
     CCDC (CCD Controller, a.k.a Image Sensor Interface, ISIF). The CCDC
     does very little or no processing on YUV data and does pre-process Raw
     Bayer RGB data through modules such as Defect Pixel Correction (DFC)
     Color Space Conversion (CSC), data gainoffset etc. After this, data
     can be written to SDRAM or can be connected to the image processing
     block such as IPIPE (on DM355 only).
     Features supported
 		- MMAP IO
 		- Capture using TVP5146 over BT.656
 		- support for interfacing decoders using sub device model
 		- Work with DM355 or DM6446 CCDC to do Raw Bayer RGBYUV
 		  data capture to SDRAM.
     TODO list
 		- Support multiple REQBUF after open
 		- Support for de-allocating buffers through REQBUF
 		- Support for Raw Bayer RGB capture
 		- Support for chaining Image Processor
 		- Support for static allocation of buffers
 		- Support for USERPTR IO
 		- Support for STREAMON before QBUF
 		- Support for control ioctls
 standard information 
 0 - progressive, 1 - interlaced 
 ccdc configuration 
 This make sure vpfe is probed and ready to go 
 name of ccdc device 
 data structures 
 ccdc device registered 
 lock for accessing ccdc information 
 ccdc configuration 
 Used when raw Bayer image from ccdc is directly captured to SDRAM 
  vpfe_lookup_pix_format()
  lookup an entry in the vpfe pix format table based on pix_format
  vpfe_register_ccdc_device. CCDC module calls this to
  register with vpfe capture
		
		  TODO. Will this ever happen? if so, we need to fix it.
		  Probably we need to add the request to a linked list and
		  walk through it during vpfe probe
 ignore this ccdc 
  vpfe_unregister_ccdc_device. CCDC module calls this to
  unregister with vpfe capture
 ignore this ccdc 
  vpfe_config_ccdc_image_format()
  For a pix format, configure ccdc to setup the capture
 configure the image window 
 do nothing, since it is default 
 buffer type only applicable for interlaced scan 
 set the frame format 
  vpfe_config_image_format()
  For a given standard, this functions sets up the default
  pix format & crop values in the vpfe device and ccdc.  It first
  starts with defaults based values from the standard table.
  It then checks if sub device supports get_fmt and then override the
  values based on that.Sets crop values to match with scan resolution
  starting at 0,0. It calls vpfe_config_ccdc_image_format() set the
  values in ccdc
 first field and frame format based on standard frame format 
 assume V4L2_PIX_FMT_UYVY as default 
 assume V4L2_PIX_FMT_SBGGR8 
 if sub device supports get_fmt, override the defaults 
 Sets the values in CCDC 
 Update the values of sizeimage and bytesperline 
 set first input of current subdevice as the current input 
 set default standard 
 Configure the default format information 
 now open the ccdc device to initialize it 
 Clear all VPFECCDC interrupts 
  vpfe_open : It creates object of file handle structure and
  stores it in private_data  member of filepointer
 Allocate memory for the file handle object 
 store pointer to fh in private_data member of file 
 If decoder is not initialized. initialize it 
 Increment device usrs counter 
 Set io_allowed member to false 
 ISR for VINT0
 if streaming not started, don't do anything 
 only for 6446 this will be applicable 
 handle progressive frame capture 
 interlaced or TB capture check which field we are in hardware 
 switch the software maintained field id 
 we are in-sync here,continue 
			
			  One frame is just being captured. If the next frame
			  is available, release the current frame and move on
			
			  based on whether the two fields are stored
			  interleavely or separately in memory, reconfigure
			  the CCDC memory address
		
		  if one field is just being captured configure
		  the next frame get the next frame from the empty
		  queue if no frame is available hold on to the
		  current buffer
		
		  out of sync. Recover from any hardware out-of-sync.
		  May loose one frame
 vdint1_isr - isr handler for VINT1 interrupt 
 if streaming not started, don't do anything 
 vpfe_stop_ccdc_capture: stop streaming in ccdcisif 
  vpfe_release : This function deletes buffer queue, frees the
  buffers and the vpfe file  handle
 Get the device lock 
 if this instance is doing IO 
 Decrement device usrs counter 
 If this is the last file handle 
 Free memory allocated to file handle object 
  vpfe_mmap : It is used to map kernel space buffers
  into user spaces
 Get the device object and file handle object 
  vpfe_poll: It is used for selectpoll system call
 vpfe capture driver file operations 
  vpfe_check_format()
  This function adjust the input pixel format as per hardware
  capabilities and update the same in pixfmt.
  Following algorithm used :-
 	If given pixformat is not in the vpfe list of pix formats or not
 	supported by the hardware, current value of pixformat in the device
 	is used
 	If given field is not supported, then current field is used. If field
 	is different from current, then it is matched with that from sub device.
 	Minimum height is 2 lines for interlaced or tb field and 1 line for
 	progressive. Maximum height is clamped to active active lines of scan
 	Minimum width is 32 bytes in memory and width is clamped to active
 	pixels of scan.
 	bytesperline is a multiple of 32.
		
		  use current pixel format in the vpfe device. We
		  will find this pix format in the table
 check if hw supports it 
 use current pixel format 
		
		  Since this is currently used in the vpfe device, we
		  will find this pix format in the table
 check what field format is supported 
 if field is any, use current value as default 
	
	  if field is not same as current field in the vpfe device
	  try matching the field with the sub device field
		
		  If field value is not in the supported fields, use current
		  field used in the device as default
 if sub device is supporting progressive, use that 
 use current field as default 
 Now adjust image resolutions supported 
 If interlaced, adjust height to be a multiple of 2 
	
	  recalculate bytesperline and sizeimage since width
	  and height might have changed
 Fill in the information about format 
 Fill in the information about format 
 If streaming is started, return error 
 Check for valid frame format 
 store the pixel format in the device  object 
 First detach any IRQ if currently attached 
 set image capture parameters in the ccdc 
  vpfe_get_subdev_input_index - Get subdev index and subdev input index for a
  given app input index
  vpfe_get_app_input - Get app input index for a given subdev input index
  driver stores the input index of the current sub device and translate it
  when application request the current input
	
	  If streaming is started return device busy
	  error
 set the businterface parameter for the sub device in ccdc 
 set the default image parameters in the device 
 Call querystd function of decoder device 
 Call decoder driver function to set the standard 
 If streaming is started, return device busy error 
   Videobuf operations
 If buffer is not initialized, initialize it 
 Make sure user addresses are aligned to 32 bytes 
 Get the file handle object and device object 
 add the buffer to the DMA queue 
 Change state of the buffer 
	
	  We need to flush the buffer from the dma queue since
	  they are de-allocated
  vpfe_reqbufs. currently support REQBUF only once opening
  the device.
 Call videobuf_querybuf to get information 
	
	  If this file handle is not allowed to do IO,
	  return error
  vpfe_calculate_offsets : This function calculates buffers offset
  for top and bottom field
 vpfe_start_ccdc_capture: start streaming in ccdcisif 
  vpfe_streamon. Assume the DMA queue is not empty.
  application is expected to call QBUF before calling
  this ioctl. If not, driver returns error
 If file handle is not allowed IO, return error 
 If buffer queue is empty, return error 
 Call videobuf_streamon to start streaming  in videobuf 
 Get the next frame from the buffer queue 
 Remove buffer from the buffer queue 
 Mark state of the current frame to active 
 Initialize field_id and started member 
 Calculate field offset 
 If io is allowed for this file handle, return error 
 If streaming is not started, return error 
 If std_index is invalid, then just return (== 1:1 aspect) 
 make sure streaming is not started 
 adjust the width to 16 pixel boundary 
 make sure parameters are valid 
 vpfe capture ioctl operations 
 Default number of buffers should be 3 
	
	  Set buffer size to min buffers size if invalid buffer size is
	  given
 Allocate memory for device objects 
  vpfe_probe : This function creates device entries by register
  itself to the V4L2 driver and initializes fields of each
  device objects
 Get the pointer to the device object 
 Allocate memory for ccdc configuration 
 Get VINT0 irq resource 
 Get VINT1 irq resource 
 Initialize field of video device 
 Initialize field of the device objects 
 register video device 
 set the driver data in platform device 
 set driver private data 
 Load up the subdevice 
 update tvnorms from the sub devices 
 set first sub device as current one 
 We have at least one sub device to work with 
  vpfe_remove : It un-register device from V4L2 driver
  vpif-display - VPIF display driver
  Display driver for TI DaVinci VPIF
  Copyright (C) 2009 Texas Instruments Incorporated - https:www.ti.com
  Copyright (C) 2014 Lad, Prabhakar <prabhakar.csengg@gmail.com>
  This program is free software; you can redistribute it andor
  modify it under the terms of the GNU General Public License as
  published by the Free Software Foundation version 2.
  This program is distributed .as is. WITHOUT ANY WARRANTY of any
  kind, whether express or implied; without even the implied warranty
  of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
 Is set to 1 in case of SDTV formats, 2 in case of HDTV formats. 
  vpif_buffer_prepare :  callback function for buffer prepare
  @vb: ptr to vb2_buffer
  This is the callback function for buffer prepare when vb2_qbuf()
  function is called. The buffer is prepared and user space virtual address
  or user address is converted into  physical address
  vpif_buffer_queue_setup : Callback function for buffer setup.
  @vq: vb2_queue ptr
  @nbuffers: ptr to number of buffers requested by application
  @nplanes: contains number of distinct video planes needed to hold a frame
  @sizes: contains the size (in bytes) of each plane.
  @alloc_devs: ptr to allocation context
  This callback function is called when reqbuf() is called to adjust
  the buffer count and buffer size
 Calculate the offset for Y and C data  in the buffer 
  vpif_buffer_queue : Callback function to add buffer to DMA queue
  @vb: ptr to vb2_buffer
  This callback function queues the buffer to DMA engine
 add the buffer to the DMA queue 
  vpif_start_streaming : Starts the DMA engine for streaming
  @vq: ptr to vb2_buffer
  @count: number of buffers
 Initialize field_id 
 clock settings 
 set the parameters and addresses 
 Get the next frame from the buffer queue 
	
	  Set interrupt for both the fields in VPIF
	  Register enable channel in VPIF register
  vpif_stop_streaming : Stop the DMA engine
  @vq: ptr to vb2_queue
  This callback stops the DMA engine and any remaining buffers
  in the DMA queue are released.
 Disable channel 
 release all active buffers 
 Get the next buffer from buffer queue 
 Remove that buffer from the buffer queue 
 Set top and bottom field addrs in VPIF registers 
 device field id and local field id are in sync 
 If this is even field 
		 one frame is displayed If next frame is
 Copy frame display time 
 Change status of the cur_frm 
 Make cur_frm pointing to next_frm 
 odd field 
		 one field is displayed configure the next
		  frame if it is available else hold on current
 Get next from the buffer queue 
  vpif_channel_isr: It changes status of the displayed buffer, takes next
  buffer from the queue and sets its address in VPIF registers
 If streaming is started in this channel 
 Progressive mode 
				 Mark status of the cur_frm to
 Make cur_frm pointing to next_frm 
 Interlaced mode 
 If it is first interrupt, ignore it 
 Get field id from VPIF registers 
 If fid does not match with stored field id 
 Make them in sync 
 Set height and width paramateres 
  vpif_calculate_offsets: This function calculates buffers offset for Y and C
  in the top and bottom field
 functions implementing ioctls 
  vpif_querycap() - QUERYCAP handler
  @file: file ptr
  @priv: file handle
  @cap: ptr to v4l2_capability structure
 Fill in the information about format 
 Check the validity of the buffer type 
	
	  to suppress v4l-compliance warnings silently correct
	  the pixelformat
 store the pix format in the channel object 
 store the format in the channel object 
 Call encoder subdevice function to set the standard 
 Get the information about the standard 
  vpif_output_to_subdev() - Maps output to sub device
  @vpif_cfg: global config ptr
  @chan_cfg: channel config ptr
  @index: Given output index from application
  lookup the sub device information for a given output index.
  we report all the output to application. output table also
  has sub device name for the each output
 loop through the sub device list to get the sub device info 
  vpif_set_output() - Select an output
  @vpif_cfg: global config ptr
  @ch: channel
  @index: Given output index from application
  Select the given output.
 update tvnorms from the sub device output info 
  vpif_enum_dv_timings() - ENUM_DV_TIMINGS handler
  @file: file ptr
  @priv: file handle
  @timings: input timings
  vpif_s_dv_timings() - S_DV_TIMINGS handler
  @file: file ptr
  @priv: file handle
  @timings: digital video timings
 Configure subdevice timings, if any 
 Configure video port timings 
  vpif_g_dv_timings() - G_DV_TIMINGS handler
  @file: file ptr
  @priv: file handle
  @timings: digital video timings
  vpif_log_status() - Status information
  @file: file ptr
  @priv: file handle
  Returns zero.
 status for sub devices 
 vpif display ioctl operations 
Configure the channels, buffer sizei, request irq 
 Allocate memory for six channel objects 
 If memory allocation fails, return error 
 Initialize field of the channel objects 
 select output 0 
 set initial format 
 Initialize vb2 queue 
 register video device 
 Initialize the video_device structure 
  vpif_probe: This function creates device entries by register itself to the
  V4L2 driver and initializes fields of each channel objects
  vpif_remove: It un-register channels from V4L2 driver
 un-register device 
 Get the pointer to the channel object 
 Unregister video device 
 Get the pointer to the channel object 
 Disable channel 
 Get the pointer to the channel object 
 Enable channel 
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (C) 2009 Texas Instruments.
  common vpss system module platform driver for all video drivers.
 DM644x defines 
 vpss BL register offsets 
 vpss CLK register offsets 
 masks and shifts 
  VDINT0 - vpss_int0, VDINT1 - vpss_int1, H3A - vpss_int4,
  IPIPE_INT1_SDR - vpss_int5
 VENCINT - vpss_int8 
  vpss interrupts. VDINT0 - vpss_int0, VDINT1 - vpss_int1,
  AF - vpss_int3
 AEW - vpss_int6, RSZ_INT_DMA - vpss_int5 
 VENC - vpss_int8 
 masks and shifts for DM365
 Different SoC platforms supported by this driver 
  vpss operations. Depends on platform. Not all functions are available
  on all platforms. The api, first check if a function is available before
  invoking it. In the probe, the function ptrs are initialized based on
  vpss name. vpss name can be "dm355_vpss", "dm644x_vpss" etc.
 enable clock 
 select input to ccdc 
 clear wbl overflow bit 
 set sync polarity 
 set the PG_FRAME_SIZE register
 check and clear interrupt if occurred 
 vpss configuration 
 register access routines 
 For DM365 only 
 For DM365 only 
 if we are using pattern generator, enable it 
 writing a 0 clear the overflow 
   dm355_enable_clock - Enable VPSS Clock
   @clock_sel: Clock to be enableddisabled
   @en: enabledisable flag
   This is called to enable or disable a vpss clock
 nothing since lsb 
 Setup vpss interrupts 
 Setup vpss interrupts 
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (C) 2009 Texas Instruments Inc
  Copyright (C) 2014 Lad, Prabhakar <prabhakar.csengg@gmail.com>
  TODO : add support for VBI & HBI data service
 	  add static buffer allocation
 global variables 
 Is set to 1 in case of SDTV formats, 2 in case of HDTV formats. 
  vpif_buffer_prepare :  callback function for buffer prepare
  @vb: ptr to vb2_buffer
  This is the callback function for buffer prepare when vb2_qbuf()
  function is called. The buffer is prepared and user space virtual address
  or user address is converted into  physical address
  vpif_buffer_queue_setup : Callback function for buffer setup.
  @vq: vb2_queue ptr
  @nbuffers: ptr to number of buffers requested by application
  @nplanes: contains number of distinct video planes needed to hold a frame
  @sizes: contains the size (in bytes) of each plane.
  @alloc_devs: ptr to allocation context
  This callback function is called when reqbuf() is called to adjust
  the buffer count and buffer size
 Calculate the offset for Y and C data in the buffer 
  vpif_buffer_queue : Callback function to add buffer to DMA queue
  @vb: ptr to vb2_buffer
 add the buffer to the DMA queue 
  vpif_start_streaming : Starts the DMA engine for streaming
  @vq: ptr to vb2_buffer
  @count: number of buffers
 Initialize field_id 
 configure 1 or 2 channel mode 
 Call vpif_set_params function to set the parameters and addresses 
 Get the next frame from the buffer queue 
 Remove buffer from the buffer queue 
	
	  Set interrupt for both the fields in VPIF Register enable channel in
	  VPIF register
  vpif_stop_streaming : Stop the DMA engine
  @vq: ptr to vb2_queue
  This callback stops the DMA engine and any remaining buffers
  in the DMA queue are released.
 Disable channel as per its device type and channel id 
 release all active buffers 
  vpif_process_buffer_complete: process a completed buffer
  @common: ptr to common channel object
  This function time stamp the buffer and mark it as DONE. It also
  wake up any process waiting on the QUEUE and set the next buffer
  as current
 Make curFrm pointing to nextFrm 
  vpif_schedule_next_buffer: set next buffer address for capture
  @common : ptr to common channel object
  This function will get next buffer from the dma queue and
  set the buffer address in the vpif register for capture.
  the buffer is marked active
 Remove that buffer from the buffer queue 
 Set top and bottom field addresses in VPIF registers 
  vpif_channel_isr : ISR handler for vpif capture
  @irq: irq number
  @dev_id: dev_id ptr
  It changes status of the captured buffer, takes next buffer from the queue
  and sets its address in VPIF registers
 skip If streaming is not started in this channel 
 Check the field format 
 Progressive mode 
			
			  Interlaced mode. If it is first interrupt, ignore
			  it
 Get field id from VPIF registers 
					
					  If field id does not match stored
					  field id, make them in sync
 device field id and local field id are in sync 
 this is even field 
 mark the current buffer as done 
 odd field 
  vpif_update_std_info() - update standard related info
  @ch: ptr to channel object
  For a given standard selected by application, update values
  in the device data structures
	
	  if called after try_fmt or g_fmt, there will already be a size
	  so use that by default.
 10 bitspixel.  
		
		  For raw formats from camera sensors, we don't need
		  the std_info from table lookup, so nothing else to do here.
 CCDraw mode 
 standard not found 
  vpif_calculate_offsets : This function calculates buffers offsets
  @ch : ptr to channel object
  This function calculates buffer offsets for Y and C in the top and
  bottom field
 Calculate offsets for Y top, Y Bottom, C top and C Bottom 
 Calculate offsets for Y top, Y Bottom, C top and C Bottom 
 Calculate offsets for Y top, Y Bottom, C top and C Bottom 
  vpif_get_default_field() - Get default field type based on interface
  @iface: ptr to vpif interface
  vpif_config_addr() - function to configure buffer address in vpif
  @ch: channel ptr
  @muxmode: channel mux mode
  vpif_input_to_subdev() - Maps input to sub device
  @vpif_cfg: global config ptr
  @chan_cfg: channel config ptr
  @input_index: Given input index from application
  lookup the sub device information for a given input index.
  we report all the inputs to application. inputs table also
  has sub device name for the each input
 loop through the sub device list to get the sub device info 
  vpif_set_input() - Select an input
  @vpif_cfg: global config ptr
  @ch: channel
  @index: Given input index from application
  Select the given input.
 no subdevice, no input to setup 
 first setup input path from sub device to vpif 
 copy interface parameters to vpif 
 update tvnorms from the sub device input info 
  vpif_querystd() - querystd handler
  @file: file ptr
  @priv: file handle
  @std_id: ptr to std id
  This function is called to detect standard at the selected input
 Call querystd function of decoder device 
  vpif_g_std() - get STD handler
  @file: file ptr
  @priv: file handle
  @std: ptr to std id
  vpif_s_std() - set STD handler
  @file: file ptr
  @priv: file handle
  @std_id: ptr to std id
 Call encoder subdevice function to set the standard 
 Get the information about the standard 
 set standard in the sub device 
  vpif_enum_input() - ENUMINPUT handler
  @file: file ptr
  @priv: file handle
  @input: ptr to input structure
  vpif_g_input() - Get INPUT handler
  @file: file ptr
  @priv: file handle
  @index: ptr to input index
  vpif_s_input() - Set INPUT handler
  @file: file ptr
  @priv: file handle
  @index: input index
  vpif_enum_fmt_vid_cap() - ENUM_FMT handler
  @file: file ptr
  @priv: file handle
  @fmt: ptr to V4L2 format descriptor
 Fill in the information about format 
  vpif_try_fmt_vid_cap() - TRY_FMT handler
  @file: file ptr
  @priv: file handle
  @fmt: ptr to v4l2 format structure
  vpif_g_fmt_vid_cap() - Set INPUT handler
  @file: file ptr
  @priv: file handle
  @fmt: ptr to v4l2 format structure
 Check the validity of the buffer type 
 By default, use currently set fmt 
 If subdev has get_fmt, use that to override 
 e.g. mt9v032 
 e.g. tvp514x 
  vpif_s_fmt_vid_cap() - Set FMT handler
  @file: file ptr
  @priv: file handle
  @fmt: ptr to v4l2 format structure
 store the format in the channel object 
  vpif_querycap() - QUERYCAP handler
  @file: file ptr
  @priv: file handle
  @cap: ptr to v4l2_capability structure
  vpif_enum_dv_timings() - ENUM_DV_TIMINGS handler
  @file: file ptr
  @priv: file handle
  @timings: input timings
  vpif_query_dv_timings() - QUERY_DV_TIMINGS handler
  @file: file ptr
  @priv: file handle
  @timings: input timings
  vpif_s_dv_timings() - S_DV_TIMINGS handler
  @file: file ptr
  @priv: file handle
  @timings: digital video timings
 Configure subdevice timings, if any 
 Configure video port timings 
  vpif_g_dv_timings() - G_DV_TIMINGS handler
  @file: file ptr
  @priv: file handle
  @timings: digital video timings
  vpif_log_status() - Status information
  @file: file ptr
  @priv: file handle
  Returns zero.
 status for sub devices 
 vpif capture ioctl operations 
 vpif file operations 
  initialize_vpif() - Initialize vpif data structures
  Allocate memory for data structures and initialize them
 Allocate memory for six channel objects 
 If memory allocation fails, return error 
 select input 0 
 set initial format 
 Initialize vb2 queue 
 Initialize the video_device structure 
 Get the pointer to the channel object 
 Unregister video device 
	
	  DT boot: OF node from parent device contains
	  video ports & endpoints data.
  vpif_probe : This function probes the vpif capture driver
  @pdev: platform device pointer
  This creates device entries by register itself to the V4L2 driver and
  initializes fields of each channel objects
 free sub devices memory 
  vpif_remove() - driver remove handler
  @device: ptr to platform device structure
  The vidoe device is unregistered
 un-register device 
 Get the pointer to the channel object 
 Unregister video device 
  vpif_suspend: vpif device suspend
  @dev: pointer to &struct device
 Get the pointer to the channel object 
 Disable channel 
  vpif_resume: vpif device suspend
 Get the pointer to the channel object 
 Enable channel 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2010 Texas Instruments Inc
 sentinel 
 This function sets the dac of the VPBE for various outputs
 disable VCLK output pin enable 
 Disable output sync pins 
 Disable DCLOCK 
 Disable LCD output control (accepting default polarity) 
 Set OSD clock and OSD Sync Adavance registers 
  setting NTSC mode
 Setup clock at VPSS & VENC for SD 
 to set VENC CLK DIV to 1 - final clock is 54 MHz 
 Set REC656 Mode 
  setting PAL mode
 Setup clock at VPSS & VENC for SD 
 to set VENC CLK DIV to 1 - final clock is 54 MHz 
 Set REC656 Mode 
  venc_set_480p59_94
  This function configures the video encoder to EDTV(525p) component setting.
 Setup clock at VPSS & VENC for SD 
  venc_set_625p
  This function configures the video encoder to HDTV(625p) component setting
 Setup clock at VPSS & VENC for SD 
  venc_set_720p60_internal - Setup 720p60 in venc for dm365 only
 DM365 component HD mode 
  venc_set_1080i30_internal - Setup 1080i30 in venc for dm365 only
 DM365 component HD mode 
 TBD setup internal 720p mode here 
 for DM365 VPBE, there is DAC inside 
 TBD setup internal 1080i mode here 
 for DM365 VPBE, there is DAC inside 
 Set default to output to composite and std to NTSC 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2007-2010 Texas Instruments Inc
  Copyright (C) 2007 MontaVista Software, Inc.
  Andy Lowe (alowe@mvista.com), MontaVista Software
  - Initial version
  Murali Karicheri (mkaricheri@gmail.com), Texas Instruments Ltd.
  - ported to sub device interface
 sentinel 
 register access routines 
 define some macros for layer and pixfmt classification 
  _osd_dm6446_vid0_pingpong() - field inversion fix for DM6446
  @sd: ptr to struct osd_state
  @field_inversion: inversion flag
  @fb_base_phys: frame buffer address
  @lconfig: ptr to layer config
  This routine implements a workaround for the field signal inversion silicon
  erratum described in Advisory 1.3.8 for the DM6446.  The fb_base_phys and
  lconfig parameters apply to the vid0 window.  This routine should be called
  whenever the vid0 layer configuration or start address is modified, or when
  the OSD field inversion setting is modified.
  Returns: 1 if the ping-pong buffers need to be toggled in the vsync isr, or
           0 otherwise
 caller must ensure that OSD1 is configured in attribute mode 
 disable attribute mode as well as disabling the window 
 enable attribute mode for OSD1 
 enable OSD1 and disable attribute mode 
	
	  use otherwin flag to know this is the other vid window
	  in YUV420 mode, if is, skip this check
		
		  DM365: start address is 27-bit long address b26 - b23 are
		  in offset register b12 - b9, and  bit 26 has to be '1'
 Y is in VID0 
 CbCr is in VID1 
  try_layer_config() - Try a specific configuration for the layer
  @sd: ptr to struct osd_state
  @layer: layer to configure
  @lconfig: layer configuration to try
  If the requested lconfig is completely rejected and the value of lconfig on
  exit is the current lconfig, then try_layer_config() returns 1.  Otherwise,
  try_layer_config() returns 0.  A return value of 0 does not necessarily mean
  that the value of lconfig on exit is identical to the value of lconfig on
  entry, but merely that it represents a change from the current lconfig.
 verify that the pixel format is compatible with the layer 
		
		  The requested pixel format is incompatible with the layer,
		  so keep the current layer configuration.
 DM6446: 
 only one OSD window at a time can use RGB pixel formats 
			
			  The other OSD window is already configured for an
			  RGB, so keep the current layer configuration.
 DM6446: only one video window at a time can use RGB888 
			
			  The other video window is already configured for
			  RGB888, so keep the current layer configuration.
 window dimensions must be non-zero 
 round line_length up to a multiple of 32 
 ysize and ypos must be even for interlaced displays 
	
	  The DM6446 supports RGB888 pixel format in a single video window.
	  This routine disables RGB888 pixel format for both video windows.
	  The caller must ensure that neither video window is currently
	  configured for RGB888 pixel format.
	
	  The DM6446 supports RGB888 pixel format in a single video window.
	  This routine enables RGB888 pixel format for the specified video
	  window.  The caller must ensure that the other video window is not
	  currently configured for RGB888 pixel format, as this routine will
	  disable RGB888 pixel format for the other window.
	
	  The caller must ensure that all windows using YC pixfmt use the same
	  CbCr order.
		
		  For YUV420P format the register contents are
		  duplicated in both VID registers
 other window also 
			
			   if NV21 pixfmt and line length not 32B
			   aligned (e.g. NTSC), Need to set window
			   X pixel size to be 32B aligned as well
		
		  The caller must ensure that OSD1 is disabled prior to
		  switching from a normal mode to attribute mode or from
		  attribute mode to a normal mode.
		
		  For YUV420P format the register contents are
		  duplicated in both VID registers
 other window also 
 update the current CbCr order 
	
	  If we are switching OSD1 from normal mode to attribute mode or from
	  attribute mode to normal mode, then we must disable the window.
			
			  We just switched OSD1 from attribute mode to normal
			  mode, so we must initialize the CLUT select, the
			  blend factor, transparency colorkey enable, and
			  attenuation enable (DM6446 only) bits in the
			  OSDWIN1MD register.
			
			  We just switched OSD1 from normal mode to attribute
			  mode, so we must initialize the blink enable and
			  blink interval bits in the OSDATRMD register.
	
	  If we just switched to a 1-, 2-, or 4-bits-per-pixel bitmap format
	  then configure a default palette map.
		
		  The default palette map maps the pixel value to the clut
		  index, i.e. pixel value 0 maps to clut entry 0, pixel value
		  1 maps to clut entry 1, etc.
 DM6446: configure the RGB888 enable and window selection 
		
		  Other code relies on the fact that OSD windows default to a
		  bitmap pixel format when they are deallocated, so don't
		  change this default pixel format.
 set default CbCr order 
		
		  ROM CLUT1 on the DM355 is similar (identical?) to ROM CLUT0
		  on the DM6446, so make ROM_CLUT1 the default on the DM355.
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (C) 2005-2009 Texas Instruments Inc
  CCDC hardware module for DM355
  ------------------------------
  This module is for configuring DM355 CCD controller of VPFE to capture
  Raw yuv or Bayer RGB data from a decoder. CCDC has several modules
  such as Defect Pixel Correction, Color Space Conversion etc to
  pre-process the Bayer RGB data, before writing it to SDRAM.
  TODO: 1) Raw bayer parameter settings and bayer capture
 	 2) Split module parameter structure to module specific ioctl structs
 	 3) add support for lense shading correction
 	 4) investigate if enum used for user space type definition
 	    to be replaced by #defines or integer
 CCDC interface type 
 Raw Bayer configuration 
 YCbCr configuration 
 ccdc base address 
 Raw configurations 
 YCbCr configuration 
 Raw Bayer formats 
 Raw YUV formats 
 register access routines 
 configure gain 
 configure offset 
  ccdc_restore_defaults()
  This function restore power on defaults in the ccdc registers
 set all registers to zero 
 now override the values with power on defaults in registers 
 no culling support 
 Set default Gain and Offset 
 select ccdc input 
 select ccdc clock 
 disable clock 
 do nothing for now 
  ccdc_setwin()
  This function will configure the window size to
  be capture in CCDC reg.
	
	  ppc - per pixel count. indicates how many pixels per cell
	  output to SDRAM. example, for ycbcr, it is one y and one c, so 2.
	  raw capture this is 1
 Writing the horizontal info into the registers 
 Since first line doesn't have any data 
 configure VDINT0 and VDINT1 
 Since first line doesn't have any data 
 configure VDINT0 and VDINT1 
 This function will configure CCDC for YCbCr video capture 
 first set the CCDC power on defaults values in all registers 
 configure pixel format & video frame format 
 setup BT.656 sync mode 
		
		  configure the FID, VD, HD pin polarity fld,hd pol positive,
		  vd negative, 8-bit pack mode
 yc external sync mode 
 pack the data to 8-bit 
 configure video window 
 configure the order of y cb cr in SD-RAM 
	
	  configure the horizontal line offset. This is done by rounding up
	  width to a multiple of 16 pixels and multiply by two to account for
	  y:cb:cr 4:2:2 data
 configure the memory line offset 
 two fields are interleaved in memory 
  ccdc_config_black_clamp()
  configure parameters for Optical Black Clamp
 configure DCSub 
 Enable the Black clamping, set sample lines and pixels 
 If Black clamping is enable then make dcsub 0 
  ccdc_config_black_compense()
  configure parameters for Black Compensation
  ccdc_write_dfc_entry()
  write an entry in the dfc table.
 TODO This is to be re-visited and adjusted 
 set WR bit to write 
	
	  Assume, it is very short. If we get an error, we need to
	  adjust this value
	
	  TODO We expect the count to be non-zero to be successful. Adjust
	  the count if write requires more time
  ccdc_config_vdfc()
  configure parameters for Vertical Defect Correction
 Configure General Defect Correction. The table used is from IPIPE 
 Configure Vertical Defect Correction if needed 
 Enable only General Defect Correction 
 clear address ptr to offset 0 
 write defect table entries 
 increment address for non zero index 
 update saturation level and enable dfc 
  ccdc_config_csc()
  configure parameters for color space conversion
  Each register CSCM0-7 has two values in S8Q5 format.
 Enable the CSC sub-module 
 Converting the co-eff as per the format of the register 
 CSCM - LSB 
			
			  convert decimal part to binary. Use 2 decimal
			  precision, user values range from .00 - 0.99
 CSCM - MSB 
  ccdc_config_color_patterns()
  configure parameters for color patterns
 This function will configure CCDC for Raw mode image capture 
 restore power on defaults to register 
	 CCDCFG register:
	  set CCD Not to swap input since input is RAW data
	  set FID detection function to Latch at V-Sync
	  set WENLOG - ccdc valid area to AND
	  set TRGSEL to WENBIT
	  set EXTRG to DISABLE
	  disable latching function on VSYNC - shadowed registers
	
	  Set VDHD direction to input,  input type to raw input
	  normal data polarity, do not use external WEN
	
	  Configure the vertical sync polarity (MODESET.VDPOL), horizontal
	  sync polarity (MODESET.HDPOL), field id polarity (MODESET.FLDPOL),
	  frame format(progressive or interlace), & pixel format (Input mode)
 set pack for alaw compression 
 Configure for LPF 
 Configure the data shift 
 Configure the Median Filter threshold 
 Configure GAMMAWD register. defaur 11-2, and Mosaic cfa pattern 
 Enable and configure aLaw register if needed 
 Configure Median filter1 & filter2 
 configure video window 
 Optical Clamp Averaging 
 Black level compensation 
 Vertical Defect Correction if needed 
 color space conversion 
 color pattern 
 Configure the Gain  & offset control 
 Configure DATAOFST  register 
 configuring HSIZE register 
 If pack 8 is enable then 1 pixel will take 1 byte 
 adjust to multiple of 32 
 else one pixel will take 2 byte 
 Configure SDOFST register 
 For interlace inverse mode 
 For interlace non inverse mode 
 For progessive inverse mode 
 For progessive non inverse mode 
 misc operations 
 TODO add support for raw bayer here 
	
	  first try to register with vpfe. If not correct platform, then we
	  don't have to iomap
 Platform data holds setup_pinmux function ptr 
	
	  setup Mux configuration for ccdc which may be different for
	  different SoCs using this CCDC
 SPDX-License-Identifier: GPL-2.0-or-later
  linuxdriversmediaplatforms5p-mfcs5p_mfc_cmd_v5.c
  Copyright (C) 2011 Samsung Electronics Co., Ltd.
 		http:www.samsung.com
 This function is used to send a command to the MFC 
 wait until host to risc command register becomes 'H2R_CMD_EMPTY' 
 Issue the command 
 Initialize the MFC 
 Suspend the MFC hardware 
 Wake up the MFC hardware 
 Preparing decoding - getting instance number 
 no crc & no pixelcache 
 Closing decoding instance  
 Initialize cmd function pointers for MFC v5 
 SPDX-License-Identifier: GPL-2.0-only
  driversmediaplatformsamsungmfc5s5p_mfc_opr_v5.c
  Samsung MFC (Multi Function Codec - FIMV) driver
  This file contains hw related functions.
  Kamil Debski, Copyright (c) 2011 Samsung Electronics
  http:www.samsung.com
 Allocate temporary buffers for decoding 
 Release temporary buffers for decoding 
 Allocate codec buffers 
 Codecs have different memory requirements 
 Allocate only if memory from bank 1 is necessary 
 Allocate only if memory from bank 2 is necessary 
 Release buffers allocated for codec 
 Allocate memory for instance data buffer 
 Zero content of the allocated memory 
 Initialize shared memory 
 shared memory offset only keeps the offset from base (port a) 
 Release instance buffer 
 NOP 
 NOP 
 Set registers for decoding temporary buffers 
 Set registers for shared buffer 
 Set registers for decoding stream buffer 
 Set decoding frame buffer 
 Bank2 
 Set registers for encoding stream buffer 
 Set encoding ref & codec buffer 
 width 
 height 
 pictype : enable, IDR period 
 multi-slice control 
 multi-slice MB number or bit size 
 cyclic intra refresh 
 memory structure cur. frame 
 padding control & value 
 enable 
 cr value 
 cb value 
 y value 
 disable & all value clear 
 rate control config. 
 frame-level rate control 
 bit rate 
 reaction coefficient 
 seq header ctrl 
 frame skip mode 
 fixed target bit 
 pictype : number of B 
 num_b_frame - 0 ~ 2 
 profile & level 
 level 
 profile - 0 ~ 2 
 interlace  
 height 
 loopfilter ctrl 
 loopfilter alpha offset 
 loopfilter beta offset 
 entropy coding mode 
 number of ref. picture 
 num of ref. pictures of P 
 max number of ref. pictures 
 8x8 transform enable 
 rate control config. 
 macroblock level rate control 
 frame QP 
 frame rate 
 max & min value of QP 
 max QP 
 min QP 
 macroblock adaptive scaling features 
 dark region 
 smooth region 
 static region 
 high activity region 
 extended encoder ctrl 
 AR VUI control 
 aspect ration IDC 
 sample  AR info 
 intra picture period for H.264 
 control 
 value 
 extended encoder ctrl 
 vbv buffer size 
 pictype : number of B 
 num_b_frame - 0 ~ 2 
 profile & level 
 level 
 profile - 0 ~ 2 
 quarter_pixel 
 qp 
 frame rate 
 rate control config. 
 frame QP 
 max & min value of QP 
 max QP 
 min QP 
 extended encoder ctrl 
 vbv buffer size 
 qp 
 frame rate 
 rate control config. 
 frame QP 
 max & min value of QP 
 max QP 
 min QP 
 extended encoder ctrl 
 vbv buffer size 
 Initialize decoding 
 Setup loop filter, for decoding this is only valid for MPEG4 
 Decode a single frame 
	 Issue different commands to instance basing on whether it
 Encode a single frame 
 memory structure cur. frame 
 Frames are being decoded 
 Get the next source buffer 
 send null frame 
 send null frame 
 Initializing decoding - parsing header 
	
	  Header was parsed now starting processing
	  First set the output frame buffers
 Try running an operation on hardware 
 Check whether hardware is not running 
 This is perfectly ok, the scheduled ctx should wait 
 Choose the context to run 
 No contexts to run 
 Got context to run in ctx 
	
	  Last frame has already been sent to MFC.
	  Now obtaining frames from MFC buffer
 Free hardware lock 
		 This is indeed important, as no operation has been
		  scheduled, reduce the clock count as no one will
		  ever do this, because no interrupt related to this try_run
 NOP 
 Initialize opr function pointers for MFC v5 
 SPDX-License-Identifier: GPL-2.0-or-later
  Samsung S5P Multi Format Codec v 5.1
  Copyright (c) 2011 Samsung Electronics Co., Ltd.
  Kamil Debski, <k.debski@samsung.com>
 Helper functions for interrupt processing 
 Remove from hw execution round robin 
 Add to hw execution round robin 
 Remove from hw execution round robin 
 Add to hw execution round robin 
 Wake up context wait_queue 
 Wake up device wait_queue 
		 This means that hw is busy and no interrupts were
		  generated by hw for the Nth time of running this
		  watchdog timer. This usually means a serious hw
		  error. Now it is time to kill all instances and
	 Lock the mutex that protects open and release.
 De-init MFC 
	 Double check if there is at least one instance running.
 Make sure we actually have a new frame before continuing. 
	 Copy timestamp  timecode from decoded src to dst and set
				 Don't know how to handle
 If frame is same as previous then skip and do not dequeue 
	 The MFC returns address of the buffer, now we have to
 Check if this is the buffer we're looking for 
 Handle frame decoding interrupt 
 All frames remaining in the buffer have been extracted  
 A frame has been decoded and is in the buffer  
 Mark source buffer as complete 
 Run MFC again on the same buffer 
 if suspending, wake up device and do not try_run again
 Error handling for interrupt 
 Error recovery is dependent on the state of context 
			 It is highly probable that an error occurred
 Mark all dst buffers as having an error 
 Mark all src buffers as having an error 
 Header parsing interrupt handling 
 Header parsing interrupt handling 
 Interrupt processing 
 Reset the timeout watchdog 
 Get the reason of interrupt and the error code 
 An error has occurred 
 Open an MFC node 
 It is guarded by mfc_mutex in vfd 
 Allocate memory for context 
 Get context number 
 Mark context as idle 
 Setup ctrl handler 
 only for encoder 
 Setup ctrl handler 
 Load firmware if this is the first instance 
 Init the FW 
 Init videobuf2 queue for CAPTURE 
	
	  We'll do mostly sequential access, so sacrifice TLB efficiency for
	  faster allocation.
 Init videobuf2 queue for OUTPUT 
	 One way to indicate end-of-stream for MFC is to set the
	  bytesused == 0. However by default videobuf2 handles bytesused
	  equal to 0 as a special case and changes its value to the size
	  of the buffer. Set the allow_zero_bytesused flag so that videobuf2
	  will keep the value of bytesused intact.
	
	  We'll do mostly sequential access, so sacrifice TLB efficiency for
	  faster allocation.
 Deinit when failure occurred 
 Release MFC context 
 if dev is null, do cleanup that doesn't need dev 
 Mark context as idle 
		
		  If instance was initialised and not yet freed,
		  return instance and free resources
 hardware locking scheme 
 vdev is gone if dev is null 
 Poll 
	
	  There has to be at least one buffer queued on each queued_list, which
	  means either in driver already or waiting for driver to claim it
	  and start processing.
 Mmap 
 capture 
 v4l2 ops 
 DMA memory related helper functions 
	
	  The memdevs are not proper OF platform devices, so in order for them
	  to be treated as valid DMA masters we need a bit of a hack to force
	  them to inherit the MFC node's DMA configuration.
	
	  Create and initialize virtual devices for accessing
	  reserved memory regions.
 Allocate memory for firmware and initialize both banks addresses 
	 Valid buffers passed to MFC encoder with LAST_FRAME command
	  should not have address of bank2 - MFC will treat it as a null frame.
	  To avoid such situation we set bank2 address below the pool address.
	
	  MFC hardware cannot handle 0 as a base address, so mark first 128K
	  as used (to keep required base alignment) and adjust base address
 Firmware allocation cannot fail in this case 
 MFC probe function 
	
	  Load fails if fs isn't mounted. Try loading anyway.
	  _open() will load it, it it fails now. Ignore failure.
 decoder 
 encoder 
 Initialize HW ops and commands based on MFC version 
 Register decoder and encoder 
 Deinit MFC if probe had failed 
 Remove the driver 
	
	  Clear ctx dev pointer to avoid races between s5p_mfc_remove()
	  and s5p_mfc_release() and s5p_mfc_release() accessing ctx->dev
	  after s5p_mfc_remove() is run during unbind.
 clear ctx->dev 
 Check if we're processing then wait if it necessary. 
 Try and lock the HW 
 Wait on the interrupt waitqueue 
 Power management 
	
	  v6-v2 firmware contains bug fixes and interface change
	  for init buffer command
 SPDX-License-Identifier: GPL-2.0-or-later
  linuxdriversmediaplatforms5p-mfcs5p_mfc_ctrl.c
  Copyright (c) 2010 Samsung Electronics Co., Ltd.
 		http:www.samsung.com
 Allocate memory for firmware 
 Load firmware 
	 Firmware has to be present as a separate file or compiled
 Release firmware memory 
	 Before calling this function one has to make sure
 Reset 
 Check bus status 
 Reset the device 
 Zero Initialization of MFC registers 
 check bus reset control before reset 
		 Reset
		  set RISC_ON to 0 during power_on & wake_up.
		  V6 needs RISC_ON set to 0 during reset also.
 Stop procedure 
  reset RISC 
  All reset except for MC 
 Check MC status 
		 Zero initialization should be done before RESET.
 Initialize hardware 
 0. MFC reset 
 1. Set DRAM base Addr 
 2. Initialize registers of channel IF 
 3. Release reset signal to the RISC 
 4. Initialize firmware 
 Failure. 
 Deinitialize hardware 
 Failure. 
 Release reset signal to the RISC 
 Send MFC wakeup command 
 Release reset signal to the RISC 
 0. MFC reset 
 1. Set DRAM base Addr 
 2. Initialize registers of channel IF 
 3. Send MFC wakeup command and wait for completion
 Failure. 
 Error or timeout 
 Wait until instance is returned or timeout occurred 
 Free resources 
 SPDX-License-Identifier: GPL-2.0-only
  driversmediaplatforms5p-mfcs5p_mfc_opr_v6.c
  Samsung MFC (Multi Function Codec - FIMV) driver
  This file contains hw related functions.
  Copyright (c) 2012 Samsung Electronics Co., Ltd.
 		http:www.samsung.com
 #define S5P_MFC_DEBUG_REGWRITE  
 S5P_MFC_DEBUG_REGWRITE 
 Allocate temporary buffers for decoding 
 NOP 
 Release temporary buffers for decoding 
 NOP 
 Allocate codec buffers 
 Codecs have different memory requirements 
 Allocate only if memory from bank 1 is necessary 
 Release buffers allocated for codec 
 Allocate memory for instance data buffer 
 Release instance buffer 
 Allocate context buffers for SYS_INIT 
 Release context buffers for SYS_INIT 
 MFCv8 needs additional 64 bytes for luma,chroma dpb
 MFCv7 needs pad bytes for Luma and Chroma 
 Set registers for decoding stream buffer 
 Set decoding frame buffer 
 Bank2 
 To test alignment 
 Set registers for encoding stream buffer 
 16B align 
 Set encoding ref & codec buffer 
 start address of per buffer is aligned 
 multi-slice control 
 multi-slice MB number or bit size 
 width 
 16 align 
 height 
 16 align 
 cropped width 
 cropped height 
 cropped offset 
 pictype : IDR period 
 multi-slice control 
 multi-slice MB number or bit size 
 cyclic intra refresh 
 'NON_REFERENCE_STORE_ENABLE' for debugging 
 memory structure cur. frame 
 0: Linear, 1: 2D tiled
 0: NV12(CbCr), 1: NV21(CrCb) 
 0: Linear, 1: 2D tiled
 0: NV12(CbCr), 1: NV21(CrCb) 
 0: Linear, 1: 2D tiled
 0: NV12(CbCr), 1: NV21(CrCb) 
 memory structure recon. frame 
 0: Linear, 1: 2D tiled 
 padding control & value 
 enable 
 cr value 
 cb value 
 y value 
 rate control config. 
 frame-level rate control 
 bit rate 
 reaction coefficient 
 tight CBR 
 loose CBR 
 seq header ctrl 
 frame skip mode 
 'DROP_CONTROL_ENABLE', disable 
 setting for MV range [16, 256] 
 pictype : number of B 
 profile & level 
 level 
 profile - 0 ~ 3 
 rate control config. 
 macroblock level rate control 
 frame QP 
 max & min value of QP 
 max QP 
 min QP 
 other QPs 
 frame rate 
 vbv buffer size 
 interlace 
 height 
 32 align 
 cropped height 
 loop filter ctrl 
 loopfilter alpha offset 
 loopfilter beta offset 
 entropy coding mode 
 number of ref. picture 
 8x8 transform enable 
 macroblock adaptive scaling features 
 dark region 
 smooth region 
 static region 
 high activity region 
 aspect ratio VUI 
 aspect ration IDC 
 extended SAR 
 intra picture period for H.264 open GOP 
 control 
 value 
 'WEIGHTED_BI_PREDICTION' for B is disable 
 'CONSTRAINED_INTRA_PRED_ENABLE' is disable 
 ASO 
 hier qp enable 
 QP value for each layer 
 number of coding layer should be zero when hierarchical is disable 
 frame packing SEI generation 
 current frame0 flag 
 arrangement type 
 the valid range is 0 ~ number of macroblocks -1 
 pictype : number of B 
 profile & level 
 level 
 profile - 0 ~ 1 
 rate control config. 
 macroblock level rate control 
 frame QP 
 max & min value of QP 
 max QP 
 min QP 
 other QPs 
 frame rate 
 vbv buffer size 
 Disable HEC 
 profile & level 
 profile 
 rate control config. 
 macroblock level rate control 
 frame QP 
 max & min value of QP 
 max QP 
 min QP 
 other QPs 
 frame rate 
 vbv buffer size 
 pictype : number of B 
 profile - 0 ~ 3 
 rate control config. 
 macroblock level rate control 
 frame rate 
 frame QP 
 other QPs 
 max QP 
 min QP 
 vbv buffer size 
 VP8 specific params 
 pictype : number of B 
 num_b_frame - 0 ~ 2 
 UHD encoding case 
 this tier can be changed 
 tier & level 
 profile 
 level 
 tier - 0 ~ 1 
 max partition depth 
 refresh period 
 loop filter setting 
 hier qp enable 
 QP value for each layer 
 rate control config. 
 macroblock level rate control 
 frame QP 
 frame rate 
 max & min value of QP 
 max QP 
 min QP 
 Initialize decoding 
 FMO_ASO_CTRL - 0: Enable, 1: Disable 
 Setup loop filter, for decoding this is only valid for MPEG4 
 0: NV12(CbCr), 1: NV21(CrCb) 
 sei parse 
 Decode a single frame 
	 Issue different commands to instance basing on whether it
 Set stride lengths for v7 & above 
 Encode a single frame 
 memory structure cur. frame 
 Frames are being decoded 
 Get the next source buffer 
	
	unsigned int src_y_size, src_c_size;
 send null frame 
 Initializing decoding - parsing header 
	 Header was parsed now start processing
	  First set the output frame buffers
 Try running an operation on hardware 
 Check whether hardware is not running 
 This is perfectly ok, the scheduled ctx should wait 
 Choose the context to run 
 No contexts to run 
 Got context to run in ctx 
	 Last frame has already been sent to MFC
 Free hardware lock 
		 This is in deed imporant, as no operation has been
		  scheduled, reduce the clock count as no one will
		  ever do this, because no interrupt related to this try_run
 Initialize registers for MFC v6 onwards 
 codec common registers 
 decoder registers 
 encoder registers 
 Initialize registers used in MFC v7+ 
	 Initialize registers used in MFC v8 only.
	  Also, over-write the registers which have
 encoder registers 
	 Initialize registers used in MFC v10 only.
	  Also, over-write the registers which have
	  a different offset for MFC v10.
 decoder registers 
 encoder registers 
 Initialize opr function pointers for MFC v6 
 SPDX-License-Identifier: GPL-2.0-or-later
  linuxdriversmediaplatforms5p-mfcs5p_mfc_cmd.c
  Copyright (C) 2012 Samsung Electronics Co., Ltd.
 		http:www.samsung.com
 SPDX-License-Identifier: GPL-2.0-or-later
  linuxdriversmediaplatforms5p-mfcs5p_mfc_pm.c
  Copyright (c) 2010 Samsung Electronics Co., Ltd.
 		http:www.samsung.com
 clock control 
 additional clocks are optional 
 clock control 
 prepare for software clock gating 
 finish software clock gating 
 SPDX-License-Identifier: GPL-2.0-or-later
  linuxdriversmediaplatforms5p-mfcs5p_mfc_enc.c
  Copyright (c) 2010-2011 Samsung Electronics Co., Ltd.
 		http:www.samsung.com
  Jeongtae Park	<jtp.park@samsung.com>
  Kamil Debski		<k.debski@samsung.com>
 context is ready to make header 
 context is ready to encode a frame 
 context is ready to encode remaining frames 
 move buffers in ref queue to src queue 
 Query capabilities of the device 
 This is run on output (encoder dest) 
 This is run on capture (encoder src) 
 dst_fmt is validated by call to vidioc_try_fmt 
 src_fmt is validated by call to vidioc_try_fmt 
 if memory is not mmp or userptr return error 
 Check for min encoder buffers 
 if memory is not mmp or userptr return error 
 Queue a buffer 
 Dequeue a buffer 
 Export DMA buffer 
 Stream on 
 Stream off, which equals to a pause 
 V4L2_MPEG_VIDEO_H264_LEVEL_1_0    10,
 V4L2_MPEG_VIDEO_H264_LEVEL_1B     9,
 V4L2_MPEG_VIDEO_H264_LEVEL_1_1    11,
 V4L2_MPEG_VIDEO_H264_LEVEL_1_2    12,
 V4L2_MPEG_VIDEO_H264_LEVEL_1_3    13,
 V4L2_MPEG_VIDEO_H264_LEVEL_2_0    20,
 V4L2_MPEG_VIDEO_H264_LEVEL_2_1    21,
 V4L2_MPEG_VIDEO_H264_LEVEL_2_2    22,
 V4L2_MPEG_VIDEO_H264_LEVEL_3_0    30,
 V4L2_MPEG_VIDEO_H264_LEVEL_3_1    31,
 V4L2_MPEG_VIDEO_H264_LEVEL_3_2    32,
 V4L2_MPEG_VIDEO_H264_LEVEL_4_0    40,
 V4L2_MPEG_VIDEO_MPEG4_LEVEL_0     0,
 V4L2_MPEG_VIDEO_MPEG4_LEVEL_0B    9,
 V4L2_MPEG_VIDEO_MPEG4_LEVEL_1     1,
 V4L2_MPEG_VIDEO_MPEG4_LEVEL_2     2,
 V4L2_MPEG_VIDEO_MPEG4_LEVEL_3     3,
 V4L2_MPEG_VIDEO_MPEG4_LEVEL_3B    7,
 V4L2_MPEG_VIDEO_MPEG4_LEVEL_4     4,
 V4L2_MPEG_VIDEO_MPEG4_LEVEL_5     5,
 V4L2_MPEG_VIDEO_HEVC_LEVEL_1     10,
 V4L2_MPEG_VIDEO_HEVC_LEVEL_2     20,
 V4L2_MPEG_VIDEO_HEVC_LEVEL_2_1   21,
 V4L2_MPEG_VIDEO_HEVC_LEVEL_3     30,
 V4L2_MPEG_VIDEO_HEVC_LEVEL_3_1   31,
 V4L2_MPEG_VIDEO_HEVC_LEVEL_4     40,
 V4L2_MPEG_VIDEO_HEVC_LEVEL_4_1   41,
 V4L2_MPEG_VIDEO_HEVC_LEVEL_5     50,
 V4L2_MPEG_VIDEO_HEVC_LEVEL_5_1   51,
 V4L2_MPEG_VIDEO_HEVC_LEVEL_5_2   52,
 V4L2_MPEG_VIDEO_HEVC_LEVEL_6     60,
 V4L2_MPEG_VIDEO_HEVC_LEVEL_6_1   61,
 V4L2_MPEG_VIDEO_HEVC_LEVEL_6_2   62,
 V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_UNSPECIFIED      0,
 V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_1x1              1,
 V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_12x11            2,
 V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_10x11            3,
 V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_16x11            4,
 V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_40x33            5,
 V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_24x11            6,
 V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_20x11            7,
 V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_32x11            8,
 V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_80x33            9,
 V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_18x11            10,
 V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_15x11            11,
 V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_64x33            12,
 V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_160x99           13,
 V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_4x3              14,
 V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_3x2              15,
 V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_2x1              16,
 V4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_EXTENDED         255,
  Update range of all HEVC quantization parameter controls that depend on the
  V4L2_CID_MPEG_VIDEO_HEVC_MIN_QP, V4L2_CID_MPEG_VIDEO_HEVC_MAX_QP controls.
 Should wait for the header to be produced 
 If context is ready then dev = work->data;schedule it to run 
 Mark destination as available for use by MFC 
 SPDX-License-Identifier: GPL-2.0-or-later
  linuxdriversmediaplatforms5p-mfcs5p_mfc_dec.c
  Copyright (C) 2011 Samsung Electronics Co., Ltd.
 		http:www.samsung.com
  Kamil Debski, <k.debski@samsung.com>
 Find selected format description 
 Check whether a context should be run on hardware 
 Context is to parse header 
 Context is to decode a frame 
 Context is to return last frame 
 Context is to set buffers 
 Resolution change 
 Query capabilities of the device 
 Enumerate format 
 Get format 
		 If the MFC is parsing the header,
 This is run on CAPTURE (decode output) 
		 Width and height are set to the dimensions
		   of the movie, the buffer is bigger and
		   further processing stages should crop to this
		 Set pixelformat to the format in which MFC
		 This is run on OUTPUT
		   The buffer contains compressed image
 Try format 
 Set format 
 dst_fmt is validated by call to vidioc_try_fmt 
 src_fmt is validated by call to vidioc_try_fmt 
 Can only request buffers when we have a valid format set. 
 Request buffers 
 Query buffer 
 Queue a buffer 
 Dequeue a buffer 
 Export DMA buffer 
 Stream on 
 Stream off, which equals to a pause 
 Set controls - v4l2 control framework 
 Should wait for the header to be parsed 
 Get compose information 
 v4l2_ioctl_ops 
	 Video output for decoding (source)
 A single plane is required for input 
	 Video capture for decoding (destination)
 Output plane count is 2 - one for Y and one for CbCr 
 Setup buffer count 
 If context is ready then dev = work->data;schedule it to run 
 Mark destination as available for use by MFC 
 SPDX-License-Identifier: GPL-2.0-only
  driversmediaplatforms5p-mfcs5p_mfc_opr.c
  Samsung MFC (Multi Function Codec - FIMV) driver
  This file contains hw related functions.
  Kamil Debski, Copyright (c) 2012 Samsung Electronics Co., Ltd.
  http:www.samsung.com
 SPDX-License-Identifier: GPL-2.0-or-later
  linuxdriversmediaplatforms5p-mfcs5p_mfc_cmd_v6.c
  Copyright (c) 2012 Samsung Electronics Co., Ltd.
 		http:www.samsung.com
 Reset RISC2HOST command 
 Issue the command 
 Open a new instance and get its number 
 no crc 
 Close instance 
 Initialize cmd function pointers for MFC v6 
 SPDX-License-Identifier: GPL-2.0-only
  driversmediaplatformsamsungmfc5s5p_mfc_intr.c
  C file for Samsung MFC (Multi Function Codec - FIMV) driver
  This file contains functions used to wait for command completion.
  Kamil Debski, Copyright (C) 2011 Samsung Electronics Co., Ltd.
  http:www.samsung.com
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) Fuzhou Rockchip Electronics Co.Ltd
  Author: Jacob Chen <jacob-chen@iotwrt.com>
 Set default formats 
 Write the default values to the ctx struct 
	 Adjust all values accordingly to the hardware capabilities
	  and chosen format.
 Reset crop settings 
		
		  COMPOSE target is only valid for capture buffer type, return
		  error for output buffer type
		
		  CROP target is only valid for output buffer type, return
		  error for capture buffer type
	
	  bound and default cropcompose targets are invalid targets to
	  tryset
 Create CMD buffer 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) Fuzhou Rockchip Electronics Co.Ltd
  Author: Jacob Chen <jacob-chen@iotwrt.com>
	
	  The rga hw scaling factor is a normalized inverse of the
	  scaling factor.
	  For example: When source width is 100 and destination width is 200
	  (scaling of 2x), then the hw factor is NC  100  200.
	  The normalization factor (NC) is 2^16 = 0x10000.
	
	  CSC mode must only be set when the colorspace families differ between
	  input and output. It must remain unset (zeroed) if both are the same.
	
	  Calculate the updown scaling modefactor.
	 
	  RGA used to scale the picture first, and then rotate second,
	  so we need to swap the wh when rotate degree is 90270.
	
	  Calculate the framebuffer virtual strides and active size,
	  note that the step of vir_stride  vir_width is 4 byte words
	
	  Calculate the source framebuffer base address with offset pixel.
	
	  Configure the dest framebuffer base address with pixel offset.
 disable alpha blending 
	
	  Due to hardware bug,
	  src1 mmu also should be configured when using alpha blending.
 sync CMD buf for RGA 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2017 Fuzhou Rockchip Electronics Co.Ltd
  Author: Jacob Chen <jacob-chen@iotwrt.com>
 RGA MMU is a 1-Level MMU, so it can't be used through the IOMMU API.
  We use it more like a scatter-gather list.
 Create local MMU table for RGA 
 sync local MMU table for RGA 
 SPDX-License-Identifier: (GPL-2.0+ OR MIT)
  Rockchip ISP1 Driver - Base driver
  Copyright (C) 2019 Collabora, Ltd.
  Based on Rockchip ISP1 driver by Rockchip Electronics Co., Ltd.
  Copyright (C) 2017 Rockchip Electronics Co., Ltd.
  ISP Details
  -----------
  ISP Comprises with:
 	MIPI serial camera interface
 	Image Signal Processing
 	Many Image Enhancement Blocks
 	Crop
 	Resizer
 	RBG display ready image
 	Image Rotation
  ISP Block Diagram
  -----------------
                                                              rkisp1-resizer.c          rkisp1-capture.c
                                                           |====================|  |=======================|
                                 rkisp1-isp.c                              Main Picture Path
                         |==========================|      |===============================================|
                         +-----------+  +--+--+--+--+      +--------+  +--------+              +-----------+
                         |           |  |  |  |  |  |      |        |  |        |              |           |
  +--------+    |\       |           |  |  |  |  |  |   -->|  Crop  |->|  RSZ   |------------->|           |
  |  MIPI  |--->|  \     |           |  |  |  |  |  |   |  |        |  |        |              |           |
  +--------+    |   |    |           |  |IE|IE|IE|IE|   |  +--------+  +--------+              |  Memory   |
                |MUX|--->|    ISP    |->|0 |1 |2 |3 |---+                                      | Interface |
  +--------+    |   |    |           |  |  |  |  |  |   |  +--------+  +--------+  +--------+  |           |
  |Parallel|--->|       |           |  |  |  |  |  |   |  |        |  |        |  |        |  |           |
  +--------+    |       |           |  |  |  |  |  |   -->|  Crop  |->|  RSZ   |->|  RGB   |->|           |
                         |           |  |  |  |  |  |      |        |  |        |  | Rotate |  |           |
                         +-----------+  +--+--+--+--+      +--------+  +--------+  +--------+  +-----------+
                                                ^
  +--------+                                    |          |===============================================|
  |  DMA   |------------------------------------+                          Self Picture Path
  +--------+
          rkisp1-stats.c        rkisp1-params.c
        |===============|      |===============|
        +---------------+      +---------------+
        |               |      |               |
        |      ISP      |      |      ISP      |
        |               |      |               |
        +---------------+      +---------------+
  Media Topology
  --------------
       +----------+     +----------+
       | Sensor 2 |     | Sensor X |
       ------------ ... ------------
       |    0     |     |    0     |
       +----------+     +----------+      +-----------+
                   \      |               |  params   |
                    \     |               | (output)  |
     +----------+    \    |               +-----------+
     | Sensor 1 |     v   v                     |
     ------------      +------+------+          |
     |    0     |----->|  0   |  1   |<---------+
     +----------+      |------+------|
                       |     ISP     |
                       |------+------|
         +-------------|  2   |  3   |----------+
         |             +------+------+          |
         |                |                     |
         v                v                     v
   +- ---------+    +-----------+         +-----------+
   |     0     |    |     0     |         |   stats   |
   -------------    -------------         | (capture) |
   |  Resizer  |    |  Resizer  |         +-----------+
   ------------|    ------------|
   |     1     |    |     1     |
   +-----------+    +-----------+
         |                |
         v                v
   +-----------+    +-----------+
   | selfpath  |    | mainpath  |
   | (capture) |    | (capture) |
   +-----------+    +-----------+
 ----------------------------------------------------------------------------
  Sensor DT bindings
 sensor links 
 create ISP->RSZ->CAP links 
 params links 
 3A stats links 
 ----------------------------------------------------------------------------
  Power
 ----------------------------------------------------------------------------
  Core
	
	  Call rkisp1_capture_isr() first to handle the frame that
	  potentially completed using the current frame_sequence number before
	  it is potentially incremented by rkisp1_isp_isr() in the vertical
	  sync.
 SPDX-License-Identifier: (GPL-2.0+ OR MIT)
  Rockchip ISP1 Driver - Stats subdevice
  Copyright (C) 2017 Rockchip Electronics Co., Ltd.
 for ISP statistics 
 ISP video device IOCTLs 
 Protect against concurrent access from ISR? 
 Protect against concurrent access from ISR? 
 get one empty buffer 
 SPDX-License-Identifier: (GPL-2.0+ OR MIT)
  Rockchip ISP1 Driver - ISP Subdevice
  Copyright (C) 2019 Collabora, Ltd.
  Based on Rockchip ISP1 driver by Rockchip Electronics Co., Ltd.
  Copyright (C) 2017 Rockchip Electronics Co., Ltd.
  NOTE: MIPI controller and input MUX are also configured in this file.
  This is because ISP Subdev describes not only ISP submodule (input size,
  format, output size, format), but also a virtual route device.
  There are many variables named with formatframe in below code,
  please see here for their meaning.
  Cropping in the sink pad defines the image region from the sensor.
  Cropping in the source pad defines the region for the Image Stabilizer (IS)
  Cropping regions of ISP
  +---------------------------------------------------------+
  | Sensor image                                            |
  | +---------------------------------------------------+   |
  | | CIF_ISP_ACQ (for black level)                     |   |
  | | sink pad format                                   |   |
  | | +--------------------------------------------+    |   |
  | | |    CIF_ISP_OUT                             |    |   |
  | | |    sink pad crop                           |    |   |
  | | |    +---------------------------------+     |    |   |
  | | |    |   CIF_ISP_IS                    |     |    |   |
  | | |    |   source pad crop and format    |     |    |   |
  | | |    +---------------------------------+     |    |   |
  | | +--------------------------------------------+    |   |
  | +---------------------------------------------------+   |
  +---------------------------------------------------------+
 ----------------------------------------------------------------------------
  Helpers
 ----------------------------------------------------------------------------
  Camera Interface registers configurations
  Image Stabilization.
  This should only be called when configuring CIF
  or at the frame end interrupt
 IS(Image Stabilization) is always on, working as output crop 
  configure ISP blocks with input format, size......
 Set up input acquisition properties 
 Acquisition Size 
 ISP Out Area 
 V12 could also use a newer csi2-host, but we don't want that yet 
 Configure Data Type and Virtual Channel 
 Clear MIPI interrupts 
	
	  Disable RKISP1_CIF_MIPI_ERR_DPHY interrupt here temporary for
	  isp bus may be dead when switch isp.
 Configure MUX 
 Hardware configure Entry 
	
	  ISP(mi) stop in mi frame end -> Stop ISP(mipi) ->
	  Stop ISP(isp) ->wait for ISP isp off
 stop and clear MI, MIPI, and ISP interrupts 
 stop ISP 
 ensure sp and mp can run at the same time in V12 
 Activate MIPI 
 Activate ISP 
	
	  CIF spec says to wait for sufficient time after enabling
	  the MIPI interface and before starting the sensor output.
 ----------------------------------------------------------------------------
  Subdev pad operations
	
	  The CSC API is used to allow userspace to force full
	  quantization on YUV formats.
 Propagate to out format 
 Propagate to out crop 
 Propagate to in crop 
 ----------------------------------------------------------------------------
  Stream operations
 V4L2_EVENT_FRAME_SYNC doesn't require an id, so zero should be set 
 ----------------------------------------------------------------------------
  Interrupt handlers
	
	  Disable DPHY errctrl interrupt, because this dphy
	  erctrl signal is asserted until the next changes
	  of line state. This time is may be too long and cpu
	  is hold in this interrupt.
	
	  Enable DPHY errctrl interrupt again, if mipi have receive
	  the whole frame without any error.
		
		  Enable DPHY errctrl interrupt again, if mipi have receive
		  the whole frame without any error.
 Vertical sync signal, starting generating new frame 
 Clear pic_size_error 
 keep track of data_loss in debugfs 
 New frame from the sensor received 
		
		  Then update changed configs. Some of them involve
		  lot of register writes. Do those only one per frame.
		  Do the updates in the order of the processing flow.
 SPDX-License-Identifier: (GPL-2.0+ OR MIT)
  Rockchip ISP1 Driver - V4l capture device
  Copyright (C) 2019 Collabora, Ltd.
  Based on Rockchip ISP1 driver by Rockchip Electronics Co., Ltd.
  Copyright (C) 2017 Rockchip Electronics Co., Ltd.
  NOTE: There are two capture video devices in rkisp1, selfpath and mainpath.
  differences between selfpath and mainpath
  available mp sink input: isp
  available sp sink input : isp, dma(TODO)
  available mp sink pad fmts: yuv422, raw
  available sp sink pad fmts: yuv422, yuv420......
  available mp source fmts: yuv, raw, jpeg(TODO)
  available sp source fmts: yuv, rgb
  @fourcc: pixel format
  @fmt_type: helper filed for pixel format
  @uv_swap: if cb cr swapped, for yuv
  @write_format: defines how YCbCr self picture data is written to memory
  @output_format: defines sp output format
  @mbus: the mbus code on the src resizer pad that matches the pixel format
  The supported pixel formats for mainpath. NOTE, pixel formats with identical 'mbus'
  are grouped together. This is assumed and used by the function rkisp1_cap_enum_mbus_codes
 yuv422 
 yuv400 
 yuv420 
 raw 
  The supported pixel formats for selfpath. NOTE, pixel formats with identical 'mbus'
  are grouped together. This is assumed and used by the function rkisp1_cap_enum_mbus_codes
 yuv422 
 yuv400 
 rgb 
 yuv420 
	
	  initialize curr_mbus to non existing mbus code 0 to ensure it is
	  different from fmts[0].mbus
 ----------------------------------------------------------------------------
  Stream operations for self-picture path (sp) and main-picture path (mp)
	
	  If packed format, then plane_fmt[0].sizeimage is the sum of all
	  components, so we need to calculate just the size of Y component.
	  See rkisp1_fill_pixfmt().
 set uv swapping for semiplanar formats 
 set uv swapping for semiplanar formats 
 YUV 
 ----------------------------------------------------------------------------
  Frame buffer operations
 The driver never access vaddr, no mapping is required 
		
		  Use the dummy space allocated by dma_alloc_coherent to
		  throw data if there is no available buffer.
 Set plane offsets 
  This function is called when a frame end comes. The next frame
  is processing and we should set up buffer for next-next frame,
  otherwise it will overflow.
		
		  Make sure stream is actually stopped, whose state
		  can be read from the shadow register, before
		  wake_up() thread which would immediately free all
		  frame buffers. stop() takes effect at the next
		  frame end that sync the configurations to shadow
		  regs.
 ----------------------------------------------------------------------------
  Vb2 operations
 Convert to non-MPLANE 
	
	  uv swap can be supported for planar formats by switching
	  the address of cb and cr
  Most registers inside the rockchip ISP1 have shadow register since
  they must not be changed while processing a frame.
  Usually, each sub-module updates its shadow register after
  processing the last pixel of a frame.
 Setup a buffer for the next frame 
	 It's safe to configure ACTIVE and SHADOW registers for the
	  first stream. While when the second is starting, do NOT
	  force update because it also updates the first one.
	 
	  The latter case would drop one more buffer(that is 2) since
	  there's no buffer in a shadow register when the second FE received.
	  This's also required because the second FE maybe corrupt
	  especially when run at 120fps.
 force cfg update 
 Stream should stop in interrupt. If it doesn't, stop it by force. 
  rkisp1_pipeline_stream_disable - disable nodes in the pipeline
  Call s_stream(false) in the reverse order from
  rkisp1_pipeline_stream_enable() and disable the DMA engine.
  Should be called before media_pipeline_stop()
	
	  If the other capture is streaming, isp and sensor nodes shouldn't
	  be disabled, skip them.
  rkisp1_pipeline_stream_enable - enable nodes in the pipeline
  Enable the DMA Engine and call s_stream(true) through the pipeline.
  Should be called after media_pipeline_start()
	
	  If the other capture is streaming, isp and sensor nodes are already
	  enabled, skip them.
 ----------------------------------------------------------------------------
  IOCTLs operations
 Self path supports custom stride but Main path doesn't 
 normalize stride to pixels per line 
 bytesperline for other components derive from Y component 
	
	  If pixfmt is packed, then plane_fmt[0] should contain the total size
	  considering all components. plane_fmt[i] for i > 0 should be ignored
	  by userspace as mem_planes == 1, but we are keeping information there
	  for convenience.
 SP supports custom stride in number of pixels of the Y plane 
 ----------------------------------------------------------------------------
  core functions
 SPDX-License-Identifier: (GPL-2.0+ OR MIT)
  Rockchip ISP1 Driver - V4l resizer device
  Copyright (C) 2019 Collabora, Ltd.
  Based on Rockchip ISP1 driver by Rockchip Electronics Co., Ltd.
  Copyright (C) 2017 Rockchip Electronics Co., Ltd.
 YUV422 
 YUV420 
 constrains 
 registers 
 constraints 
 registers 
 constraints 
 registers 
 ----------------------------------------------------------------------------
  Dual crop hw configs
 configure dual-crop unit 
 ----------------------------------------------------------------------------
  Resizer hw configs
 No phase offset 
 Linear interpolation 
	
	  The resizer only works on yuv formats,
	  so return if it is bayer format.
	
	  The resizer is used not only to change the dimensions of the frame
	  but also to change the scale for YUV formats,
	  (4:2:2 -> 4:2:0 for example). So the widthheight of the CbCr
	  streams should be set according to the media bus format in the src pad.
 set values in the hw 
 ----------------------------------------------------------------------------
  Subdev pad operations
 supported mbus codes on the src are the same as in the capture 
	
	  The selfpath capture doesn't support bayer formats. Therefore the selfpath resizer
	  should support only YUV422 on the sink pad
 supported mbus codes on the sink pad are the same as isp src pad 
 restore pad 
 NOTE: there is no crop in the source pad, only in the sink 
 for YUV formats, userspace can change the mbus code on the src pad if it is supported 
 Not crop for MP bayer raw data 
 Propagete to source pad 
 Update sink crop 
 ----------------------------------------------------------------------------
  Stream operations
 SPDX-License-Identifier: (GPL-2.0+ OR MIT)
  Rockchip ISP1 Driver - Params subdevice
  Copyright (C) 2017 Rockchip Electronics Co., Ltd.
 for ISP params 
 ISP BP interface function 
 avoid to override the old enable value 
 ISP black level subtraction interface function 
 avoid to override the old enable value 
 fixed subtraction values 
 ISP LS correction interface function 
 RKISP1_CIF_ISP_LSC_TABLE_ADDRESS_153 = ( 17  18 ) >> 1 
 program data tables (table size is 9  17 = 153) 
		
		  17 sectors with 2 values in one DWORD = 9
		  DWORDs (2nd value of last DWORD unused)
 RKISP1_CIF_ISP_LSC_TABLE_ADDRESS_153 = ( 17  18 ) >> 1 
 program data tables (table size is 9  17 = 153) 
		
		  17 sectors with 2 values in one DWORD = 9
		  DWORDs (2nd value of last DWORD unused)
 To config must be off , store the current status firstly 
 program x size tables 
 program x grad tables 
 program y size tables 
 program y grad tables 
 restore the lsc ctrl status 
 ISP Filtering function 
 avoid to override the old enable value 
 ISP demosaic interface function 
 avoid to override the old enable value 
 set demosaic threshold 
 ISP GAMMA correction interface function 
 ISP GAMMA correction interface function 
 ISP Cross Talk 
 Write back the default values. 
 ISP White Balance Mode 
 based on the mode,configure the awb module 
 Reference Cb and Cr 
 Yc Threshold 
 window offset 
 AWB window size 
 Number of frames 
 based on the mode,configure the awb module 
 Reference Cb and Cr 
 Yc Threshold 
 window offset 
 AWB window size 
 switch off 
 Measurements require AWB block be active. 
 switch off 
 Measurements require AWB block be active. 
 avoid to override the old enable value 
 avoid to override the old enable value 
 avoid to override the old enable value 
 now we just support 9x9 window 
 avoid to override the old enable value 
 Switch off to configure. 
 restore afm status 
 Switch off to configure. 
 restore afm status 
		
		  Color selection is similar to water color(AQUA):
		  grayscale + selected color w threshold
 ISP De-noise Pre-Filter(DPF) function 
 update dpc config 
 update bls config 
 update sdg config 
 update lsc config 
 update awb gains 
 update bdm config 
 update filter config 
 update ctk config 
 update goc config 
 update cproc config 
 update ie config 
 update dpf config 
 update dpf strength config 
 update awb config 
 update afc config 
 update hst config 
 update aec config 
 update shadow register immediately 
	
	  This isr is called when the ISR finishes processing a frame (RKISP1_CIF_ISP_FRAME).
	  Configurations performed here will be applied on the next frame.
	  Since frame_sequence is updated on the vertical sync signal, we should use
	  frame_sequence + 1 here to indicate to userspace on which frame these parameters
	  are being applied.
 To be filled in with 0x01 at runtime. 
 set the  range 
 apply the first buffer if there is one already 
  Not called when the camera is active, therefore there is no need to acquire
  a lock.
 ISP params video device IOCTLs 
	
	  we first move the buffers into a local list 'tmp_list'
	  and then we can iterate it and call vb2_buffer_done
	  without holding the lock
	
	  Provide a mutex to v4l2 core. It will be used
	  to protect all fops and v4l2 ioctls.
 SPDX-License-Identifier: (GPL-2.0+ OR MIT)
  Rockchip ISP1 Driver - Common definitions
  Copyright (C) 2019 Collabora, Ltd.
 SPDX-License-Identifier: GPL-2.0
  Driver for STM32 Digital Camera Memory Interface
  Copyright (C) STMicroelectronics SA 2017
  Authors: Yannick Fertre <yannick.fertre@st.com>
           Hugues Fruchet <hugues.fruchet@st.com>
           for STMicroelectronics.
  This driver is based on atmel_isi.c
 Registers offset for DCMI 
 Control Register 
 Status Register 
 Raw Interrupt Status register 
 Interrupt Enable Register 
 Masked Interrupt Status register 
 Interrupt Clear Register 
 Embedded Synchronization Code Register 
 Embedded Synchronization Unmask Register 
 Crop Window STaRT 
 Crop Window SIZE 
 Data Register 
 IDentifier Register 
 Bits definition for control register (DCMI_CR) 
 Bits definition for status register (DCMI_SR) 
  Bits definition for interrupt registers
  (DCMI_RIS, DCMI_IER, DCMI_MIS, DCMI_ICR)
 Protects the access of variables shared within the interrupt 
 Protect this data structure 
 Ensure DMA operations atomicity 
 Restart a new DMA transfer with next buffer 
 Check DMA status 
 Return buffer to V4L2 in error state 
 Return buffer to V4L2 
 Restart capture 
 Configure DMA channel 
	
	  Avoid call of dmaengine_terminate_sync() between
	  dmaengine_prep_slave_single() and dmaengine_submit()
	  by locking the whole DMA submission sequence
 Prepare a DMA transaction 
 Set completion callback routine for notification 
 Push current DMA transaction in the pending queue 
 Enable capture 
 Crop resolution 
 Crop start point 
 Enable crop 
	
	  Because of variable JPEG buffer size sent by sensor,
	  DMA transfer never completes due to transfer size never reached.
	  In order to ensure that all the JPEG data are transferred
	  in active buffer memory, DMA is drained.
	  Then DMA tx status gives the amount of data transferred
	  to memory, which is then returned to V4L2 through the active
	  buffer payload.
 Drain DMA 
 Get DMA residue to get JPEG size 
 Return JPEG buffer to V4L2 with received JPEG buffer size 
 Return JPEG buffer to V4L2 in ERROR state 
 Abort DMA operation 
 Restart capture 
 JPEG received 
 Clear interrupt 
 Make sure the image size is large enough 
 Get memory addresses 
 Enqueue to video buffers list 
 Walk searching for entity having no sink 
	
	  Starting from sensor subdevice, walk within
	  pipeline and set format on each subdevice
 Search if current entity has a source pad 
 Propagate format on sink pad if any, otherwise source pad 
 Walk to next entity 
 Startstop all entities within pipeline 
 Set bus width 
 Set bus width to 8 bits by default 
 Set vertical synchronization polarity 
 Set horizontal synchronization polarity 
 Set pixel clock polarity 
	
	  BT656 embedded synchronisation bus mode.
	 
	  Default SAVEAV mode is supported here with default codes
	  SAV=0xff000080 & EAV=0xff00009d.
	  With DCMI this means LSC=SAV=0x80 & LEC=EAV=0x9d.
 Unmask all codes 
 FEC:LEC:LSC:FSC 
 Trig on LSC=0x80 & LEC=0x9d codes, ignore FSC and FEC 
 FEC:LEC:LSC:FSC 
 Set crop 
 Enable jpeg capture 
 Snapshot mode 
 Enable dcmi 
	
	  Start transfer if at least one buffer has been queued,
	  otherwise transfer is deferred at buffer queueing
 Enable interruptions 
	
	  Return all buffers to vb2 in QUEUED state.
	  This will give ownership back to userspace
 Disable interruptions 
 Disable DCMI 
 Return all queued buffers to vb2 in ERROR state 
 Stop all pending DMA operations 
 Limit to hardware capabilities 
 No crop if JPEG is requested 
		
		  If crop is requested and sensor have discrete frame sizes,
		  select the frame size that is just larger than request
 Update pix regarding to what sensor can do 
 Save resolution that sensor can actually do 
		
		  Adjust crop by making the intersection between
		  format resolution request and crop request
 Adjust format resolution request to crop 
	
	  Try format, fmt.widthheight could have been changed
	  to match sensor capability or crop request
	  sd_format & sd_framesize will contain what subdev
	  can do for this request.
 Disable crop if JPEG is requested or BT656 bus is selected 
 pix to mbus format 
	
	  Get sensor bounds first
	
	  If selection is not implemented,
	  fallback by enumerating sensor frame sizes
	  and take the largest one
	
	  If frame sizes enumeration is not implemented,
	  fallback by getting current sensor frame size
 Reset sensor resolution to max resolution 
	
	  Make the intersection between
	  sensor resolution
	  and crop request
 Crop if request is different than sensor resolution 
 Disable crop 
 end node  },
  FIXME: For the time being we only support subdevices
  which expose RGB & YUV "parallel form" mbus code (_2X8).
  Nevertheless, this allows to support serial source subdevices
  and serial to parallel bridges which conform to this.
 Exclude JPEG if BT656 bus is selected 
 Code supported, have we got this fourcc yet? 
 Already available 
 New 
 Allocate discrete framesizes array 
 Fill array with sensor supported framesizes 
	
	  Now that the graph is complete,
	  we search for the source subdevice
	  in order to expose it through V4L2 interface
 Checks internally if vdev has been init or not 
	
	  Link this sub-device to DCMI, it could be
	  a parallel camera sensor or a bridge
 Get bus characteristics from devicetree 
 Initialize media device 
 Initialize the top-level structure 
 Video node 
 Media entity pads 
 Buffer queue 
 Reset device 
 disable clock 
 change pinctrl state 
 restore pinctl default state 
 clock enable 
 SPDX-License-Identifier: GPL-2.0-only
  s3c24xxs3c64xx SoC series Camera Interface (CAMIF) driver
  Copyright (C) 2012 Sylwester Nawrocki <sylvester.nawrocki@gmail.com>
  Copyright (C) 2012 Tomasz Figa <tomasz.figa@gmail.com>
  Based on driversmediaplatforms5p-fimc,
  Copyright (C) 2010 - 2012 Samsung Electronics Co., Ltd.
 Locking: called with vp->camif->slock spinlock held 
 Locking: called with camif->slock spinlock held 
  Initialize the video path, only up from the scaler stage. The camera
  input interface set up is skipped. This is useful to enable one of the
  video paths when the other is already running.
  Locking: called with camif->slock spinlock held.
  Reinitialize the driver so it is ready to start streaming again.
  Return any buffers to vb2, perform CAMIF software reset and
  turn off streaming at the data pipeline (sensor) if required.
 Release unused buffers 
 Timed out, forcibly stop capture 
 decompose Y into YCb 
 decompose Y into YCbCr 
 420 
 Last IRQ 
 Disable capture, enable last IRQ 
		
		  Get previous DMA write buffer index:
		  0 => DMA buffer 0, 2;
		  1 => DMA buffer 1, 3.
 Dequeue a filled buffer 
 Set up an empty buffer at the DMA engine 
 Scheduled in HW, add to the queue 
	
	  We assume the codec capture path is always activated
	  first, before the preview path starts streaming.
	  This is required to avoid internal FIFO overflow and
	  a need for CAMIF software reset.
 Schedule an empty buffer in HW 
  Video node IOCTLs
	
	  Calculate minimum width and height according to the configured
	  camera input interface crop rectangle and the resizer's capabilities.
 Reset composition rectangle 
 Only check pixel formats at the sensor and the camif subdev pads 
 Retrieve format at the sensor subdev source pad 
 s3c244x doesn't support composition 
 TODO: s3c64xx 
  Video node controls
 Codec and preview video node control ops 
 Media bus pixel formats supported at the camif input 
   Camera input interface subdev operations
 full camera input pixel size 
 crop rectangle at camera interface input 
 FIXME: constraints against codec or preview path ? 
	
	  No pixel format change at the camera input is allowed
	  while streaming.
 Reset sink crop rectangle. 
		
		  Reset source format (the camif's crop rectangle)
		  and the video output resolution.
 Pixel format can be only changed on the sink pad. 
 crop bounds 
	
	  Following constraints must be met:
	   - r->width + 2  r->left = mf->width;
	   - r->height + 2  r->top = mf->height;
	   - crop rectangle size and position must be aligned
	     to 8 or 2 pixels, depending on SoC version.
	
	  Make sure we either downscale or upscale both the pixel
	  width and height. Just return current crop rectangle if
	  this scaler constraint is not met.
 Set Cb, Cr 
 for V4L2_COLORFX_BW and others 
 Return if not registered 
 Scaler is always enabled 
 SPDX-License-Identifier: GPL-2.0-or-later
  s3c24xxs3c64xx SoC series Camera Interface (CAMIF) driver
  Copyright (C) 2012 Sylwester Nawrocki <sylvester.nawrocki@gmail.com>
  Copyright (C) 2012 Tomasz Figa <tomasz.figa@gmail.com>
 HCLK CAMIF clock 
 CAMIF  external camera sensor master clock 
  s3c_camif_find_format() - lookup camif color format by fourcc or an index
  @vp: video path (DMA) description (codecpreview)
  @pixelformat: fourcc to match, ignored if null
  @index: index to the camif_formats array, ignored if negative
 Get initial pixel format and set it at the camif sink pad 
  Media device
  The CAMIF device has two relatively independent data processing paths
  that can source data from memory or the common camera input frontend.
  Register interrupts for each data processing path (camif_vp).
	
	  Set initial pixel format, resolution and crop rectangle.
	  Must be done before a sensor subdev is registered as some
	  settings are overrode with values from sensor subdev.
 null op on s3c244x 
 null op on s3c244x 
 sentinel  },
 SPDX-License-Identifier: GPL-2.0-only
  Samsung s3c24xxs3c64xx SoC CAMIF driver
  Copyright (C) 2012 Sylwester Nawrocki <sylvester.nawrocki@gmail.com>
  Copyright (C) 2012 Tomasz Figa <tomasz.figa@gmail.com>
 SW reset 
  Sets video test pattern (off, color bar, horizontal or vertical gradient).
  External sensor pixel clock must be active for the test pattern to work.
 Set effect 
 Set both paths 
 Set camera input pixel format and resolution 
 Set the camera host input window offsets (cropping) 
 Note: s3c244x requirement: left = f_width - rect.width  2 
 CIWDOFST_CLROVPRFIY |  CIWDOFST_CLROVPRFICB |
 Set video bus signals polarity 
	
	  HREF is normally high during frame active data
	  transmission and low during horizontal synchronization
	  period. Thus HREF active high means HSYNC active low.
 HREF active low 
 Set the input dma offsets. 
 Configure DMA burst values 
 We currently support only YCbCr 4:2:2 at the camera input 
 Rotation is only supported by s3c64xx 
 Target area, output pixel width  height 
 SPDX-License-Identifier: GPL-2.0-only
  Microchip Image Sensor Controller (ISC) common driver base
  Copyright (C) 2016-2019 Microchip Technology, Inc.
  Author: Songjun Wu
  Author: Eugen Hristev <eugen.hristev@microchip.com>
 In here we set the v4l2 controls w.r.t. our pipeline config 
 In here we set our actual hw pipeline config 
 gains have a fixed point at 9 decimals 
 offsets are in 2's complements 
	
	  In case the sensor is not RAW, it will output a pixel (12-16 bits)
	  with two samples on the ISC Data bus (which is 8-12)
	  ISC will count each sample, so, we need to multiply these values
	  by two, to get the real number of samples for the required pixels.
	
	  We limit the columnrow count that the ISC will output according
	  to the configured resolution that we want.
	  This will avoid the situation where the sensor is misconfigured,
	  sending more data, and the ISC will just take it and DMA to memory,
	  causing corruption.
 WB-->CFA-->CC-->GAM-->CSC-->CBC-->SUB422-->SUB420 
 Set the pipeline 
	
	  The current implemented histogram is available for RAW R, B, GB, GR
	  channels. We need to check if sensor is outputting RAW BAYER
 Update profile 
 Enable stream on the sub device 
 Enable DMA interrupt 
 if we streaming from RAW, we can do one-shot white balance adj 
 Wait until the end of the current frame 
 Disable DMA interrupt 
 Disable stream on the sub device 
 Release all active buffers 
  Checks the current configured format, if ISC can output it,
  considering which type of format the ISC receives from the sensor
 all formats supported by the RLP module are OK 
 any other different formats are not supported 
 we cannot output RAW if we do not receive RAW 
 we cannot output GREY if we do not receive RAWGREY 
  Configures the RLP and DMA modules, depending on the output format
  configured for the ISC.
  If direct_dump == true, just dump raw data 816 bits depending on format.
  Configuring pipeline modules, depending on which format the ISC outputs
  and considering which format it has as input from the sensor.
 if sensor format is RAW, we convert inside ISC 
 if sensor format is RAW, we convert inside ISC 
 if sensor format is RAW, we convert inside ISC 
 if sensor format is RAW, we convert inside ISC 
 if sensor format is RAW, we convert inside ISC 
 Tune the pipeline to product specific 
	
	  If we do not know yet which format the subdev is using, we cannot
	  do anything.
	
	  Attempt to obtain format size from subdev. If not available,
	  just use the maximum ISC can receive.
 Step 1: find a RAW format that is supported 
	 Step 2: We can continue with this RAW format, or we can look
	  for better: maybe sensor supports directly what we need.
	 Step 3: We have both. We decide given the module parameter which
	  one to use.
 Step 4: we do not have RAW but we have a direct format. Use it. 
	 Step 5: if we are using a direct format, we need to package
	  everything as 8 bit data and just dump it
	 Step 6: We have no format. This can happen if the userspace
	  requests some weirdinvalid format.
	  In this case, default to whatever we have
 Step 7: Print out what we decided for debugging 
 Step 8: at this moment we decided which format the subdev will use 
 Limit to Atmel ISC hardware capabilities 
	
	  The mbus format is the one the subdev outputs.
	  The pixels will be transferred in this format Sensor -> ISC
	
	  Validate formats. If the required format is not OK, default to raw.
 Re-try to validate the new format 
 Obtain frame sizes if possible to have crop requirements ready 
 Limit to Atmel ISC hardware capabilities 
 Limit to Atmel ISC hardware capabilities 
 make the try configuration active 
	
	  we deliberately ignore the end of the histogram,
	  the most white pixels
 We compute two gains, stretch gain and grey world gain 
	
	  According to Grey World, we need to set gains for RB to normalize
	  them towards the green channel.
	  Thus we want to keep Green as fixed and adjust only RedBlue
	  Compute the average of the both green channels first
 Green histogram is null, nothing to do 
		
		  the color offset is the minimum value of the histogram.
		  we stretch this color to the full range by substracting
		  this value from the color component.
		
		  The offset is always at least 1. If the offset is 1, we do
		  not need to adjust it, so our result must be zero.
		  the offset is computed in a histogram on 9 bits (0..512)
		  but the offset in register is based on
		  12 bits pipeline (0..4096).
		  we need to shift with the 3 bits that the histogram is
		  ignoring
		
		  the offset is then taken and converted to 2's complements,
		  and must be negative, as we subtract this value from the
		  color components
		
		  the stretch gain is the total number of histogram bins
		  divided by the actual range of color component (Max - Min)
		  If we compute gain like this, the actual color component
		  will be stretched to the full histogram.
		  We need to shift 9 bits for precision, we have 9 bits for
		  decimals
		
		  Now we have to compute the gain w.r.t. the average.
		  Addlose gain to the component towards the average.
		  If it happens that the component is zero, use the
		  fixed point value : 1.0 gain.
 multiply both gains and adjust for decimals 
 streaming is not active anymore 
	
	  only update if we have all the required histograms and controls
	  if awb has been disabled, we need to reset registers as well.
		
		  It may happen that DMA Done IRQ will trigger while we are
		  updating white balance registers here.
		  In that case, only parts of the controls have been updated.
		  We can avoid that by locking the section.
		
		  if we are doing just the one time white balance adjustment,
		  we are basically done.
 update the v4l2 controls values 
 if awb has been disabled, we don't need to start another histogram 
 we did not configure ISC yet 
 configure the controls with new values from v4l2 
			
			  If we are streaming, we can update profile to
			  have the new settings in place.
			
			  The auto cluster will activate automatically this
			  control. This has to be deactivated when not
			  streaming.
 if we have autowhitebalance on, start histogram procedure 
		
		  for one time whitebalance adjustment, check the button,
		  if it's pressed, perform the one time operation.
 being a cluster, this id will be called for every control 
 Initialize product specific controls. For example, contrast 
 do_white_balance is a button, so min,max,step,default are ignored 
	
	  The cluster is in auto mode with autowhitebalance enabled
	  and manual mode otherwise.
 Initialize videobuf2 queue 
 Init video dma queues 
 Register video device 
	
	  DPCEN-->GDCEN-->BLCEN-->WB-->CFA-->CC-->
	  GAM-->VHXS-->CSC-->CBC-->SUB422-->SUB420
 regmap configuration 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2011 Atmel Corporation
  Josh Wu, <josh.wu@atmel.com>
  Based on previous work by Lars Haring, <lars.haring@atmel.com>
  and Sedji Gaouaou
  Based on the bttv driver for Bt848 with respective copyright holders
 Frame buffer descriptor 
 Physical address of the frame buffer 
 DMA Control Register(only in HISI2) 
 Physical address of the next fbd 
 Frame buffer data 
  struct isi_format - ISI media bus format information
  @fourcc:		Fourcc code for this format
  @mbus_code:		V4L2 media bus format code.
  @bpp:		Bytes per pixel (when stored in memory)
  @swap:		Byte swap configuration value
  @support:		Indicates format supported by subdev
  @skip:		Skip duplicate format supported by subdev
 Protects the access of variables shared with the ISR 
 Allocate descriptors for dma buffer use 
 ISI peripheral clock 
 max 12 bits 
 According to sensor's output format to set cfg2 
 Set width 
 Set height 
 No down sampling, preview size equal to sensor output size 
 start next dma frame. 
 ISI interrupt service routine 
	
	  The reset or disable will only succeed if we have a
	  pixel clock from the camera.
 ------------------------------------------------------------------
	Videobuf operations
 Make sure the image size is large enough. 
 Get an available descriptor 
 Delete the descriptor since now it is used 
 Initialize the dma descriptor 
 This descriptor is available now and we add to head list 
 Enable irq: cxfr for the codec path, pxfr for the preview path 
 Check if already in a frame 
 Enable linked list 
 Enable ISI 
 Enable stream on the sub device 
 Reset ISI 
 Disable all interrupts 
 Clear any pending interrupt 
 Release all active buffers 
 abort streaming and wait for last buffer 
 Disable stream on the sub device 
 Release all active buffers 
 Wait until the end of the current frame. 
 Disable interrupts 
 Disable ISI and wait for it is done 
	
	  Attempt to obtain format size from subdev. If not available,
	  just use the maximum ISI can receive.
 Limit to Atmel ISI hardware capabilities 
 set bus param for ISI 
 Enable PM and peripheral clock before operate isi registers 
 -----------------------------------------------------------------------
 Default settings for ISI 
 Code supported, have we got this fourcc yet? 
 Already available 
 new 
 Checks internally if vdev have been init or not 
 Initialize the top-level structure 
 video node 
 buffer queue 
 CONFIG_PM 
 SPDX-License-Identifier: GPL-2.0
  Microchip eXtended Image Sensor Controller (XISC) driver
  Copyright (C) 2019-2021 Microchip Technology, Inc. and its subsidiaries
  Author: Eugen Hristev <eugen.hristev@microchip.com>
  Sensor-->PFE-->DPC-->WB-->CFA-->CC-->GAM-->VHXS-->CSC-->CBHS-->SUB-->RLP-->DMA-->HIS
  ISC video pipeline integrates the following submodules:
  PFE: Parallel Front End to sample the camera sensor input stream
  DPC: Defective Pixel Correction with black offset correction, green disparity
       correction and defective pixel correction (3 modules total)
   WB: Programmable white balance in the Bayer domain
  CFA: Color filter array interpolation module
   CC: Programmable color correction
  GAM: Gamma correction
 VHXS: Vertical and Horizontal Scaler
  CSC: Programmable color space conversion
 CBHS: Contrast Brightness Hue and Saturation control
  SUB: This module performs YCbCr444 to YCbCr420 chrominance subsampling
  RLP: This module performs rounding, range limiting
       and packing of the incoming data
  DMA: This module performs DMA master accesses to write frames to external RAM
  HIS: Histogram module performs statistic counters on the frames
 This is a list of the formats that the ISC can output 
 This is a list of formats that the ISC can receive as input 
 Convert RGB to YUV 
 Configure what is set via v4l2 ctrls 
 Configure Hue and Saturation as neutral midpoint 
 Configure each register at the neutral fixed point 1.0 or 0.0 
 Gamma table with gamma 12.2 
 index 0 --> gamma bipartite 
 sama7g5-isc RAM access port is full AXI4 - 32 bits per beat 
 sama7g5-isc : ISPCK does not exist, ISC is clocked by MCK 
 SPDX-License-Identifier: GPL-2.0
  Microchip Image Sensor Controller (ISC) driver
  Copyright (C) 2016-2019 Microchip Technology, Inc.
  Author: Songjun Wu
  Author: Eugen Hristev <eugen.hristev@microchip.com>
  Sensor-->PFE-->WB-->CFA-->CC-->GAM-->CSC-->CBC-->SUB-->RLP-->DMA
  ISC video pipeline integrates the following submodules:
  PFE: Parallel Front End to sample the camera sensor input stream
   WB: Programmable white balance in the Bayer domain
  CFA: Color filter array interpolation module
   CC: Programmable color correction
  GAM: Gamma correction
  CSC: Programmable color space conversion
  CBC: Contrast and Brightness control
  SUB: This module performs YCbCr444 to YCbCr420 chrominance subsampling
  RLP: This module performs rounding, range limiting
       and packing of the incoming data
 This is a list of the formats that the ISC can output 
 This is a list of formats that the ISC can receive as input 
 Convert RGB to YUV 
 Configure each register at the neutral fixed point 1.0 or 0.0 
 This module is not present on sama5d2 pipeline 
 No specific gamma configuration 
	
	  In sama5d2, the YUV planar modes and the YUYV modes are treated
	  in the same way in RLP register.
	  Normally, YYCC mode should be Luma(n) - Color B(n) - Color R (n)
	  and YCYC should be Luma(n + 1) - Color B (n) - Luma (n) - Color R (n)
	  but in sama5d2, the YCYC mode does not exist, and YYCC must be
	  selected for both planar and interleaved modes, as in fact
	  both modes are supported.
	 
	  Thus, if the YCYC mode is selected, replace it with the
	  sama5d2-compliant mode which is YYCC .
 Gamma table with gamma 12.2 
 0 --> gamma 11.8 
 1 --> gamma 12 
 2 --> gamma 12.2 
 sama5d2-isc - 8 bits per beat 
 sama5d2-isc : ISPCK is required and mandatory 
 ispck should be greater or equal to hclock 
 SPDX-License-Identifier: GPL-2.0-or-later
  Samsung S5P G2D - 2D Graphics Accelerator Driver
  Copyright (c) 2011 Samsung Electronics Co., Ltd.
  Kamil Debski, <k.debski@samsung.com>
 Set default formats 
 Write the default values to the ctx struct 
	 Adjust all values accordingly to the hardware capabilities
 Reset crop settings 
 Revision 3.0 for S5PV210 and Exynos4210 
 Revision 4.1 for Exynos4X12 and Exynos5 
 SPDX-License-Identifier: GPL-2.0-or-later
  Samsung S5P G2D - 2D Graphics Accelerator Driver
  Copyright (c) 2011 Samsung Electronics Co., Ltd.
  Kamil Debski, <k.debski@samsung.com>
 g2d_reset clears all g2d registers 
 inversed scaling factor: src is numerator 
 Clear cache 
 Enable interrupt 
 Start G2D engine 
 SPDX-License-Identifier: GPL-2.0-only
 Copyright (c) 2016 MediaTek Inc.
 Author: Andrew-CT Chen <andrew-ct.chen@mediatek.com>
  VPU (video processor unit) is a tiny processor controlling video hardware
  related to video codec, scaling and color format converting.
  VPU interfaces with other blocks by share memory and interrupt.
 maximum programdata TCM (Tightly-Coupled Memory) size 
 the offset to get data tcm address 
 daynamic allocated maximum extended memory size 
 maximum binary firmware size 
 the size of share buffer between Host and  VPU 
 binary firmware name 
 vpu inter-processor communication interrupt 
 vpu idle state 
  enum vpu_fw_type - VPU firmware type
  @P_FW: program firmware
  @D_FW: data firmware
  struct vpu_mem - VPU extended programdata memory information
  @va:		the kernel virtual memory address of VPU extended memory
  @pa:		the physical memory address of VPU extended memory
  struct vpu_regs - VPU TCM and configuration registers
  @tcm:	the register for VPU Tightly-Coupled Memory
  @cfg:	the register for VPU configuration
  @irq:	the irq number for VPU interrupt
  struct vpu_wdt_handler - VPU watchdog reset handler
  @reset_func:	reset handler
  @priv:	private data
  struct vpu_wdt - VPU watchdog workqueue
  @handler:	VPU watchdog reset handler
  @ws:		workstruct for VPU watchdog
  @wq:		workqueue for VPU watchdog
  struct vpu_run - VPU initialization status
  @signaled:		the signal of vpu initialization completed
  @fw_ver:		VPU firmware version
  @dec_capability:	decoder capability which is not used for now and
 			the value is reserved for future use
  @enc_capability:	encoder capability which is not used for now and
 			the value is reserved for future use
  @wq:			wait queue for VPU initialization status
  struct vpu_ipi_desc - VPU IPI descriptor
  @handler:	IPI handler
  @name:	the name of IPI handler
  @priv:	the private data of IPI handler
  struct share_obj - DTCM (Data Tightly-Coupled Memory) buffer shared with
 		      AP and VPU
  @id:		IPI id
  @len:	share buffer length
  @share_buf:	share buffer data
  struct mtk_vpu - vpu driver data
  @extmem:		VPU extended memory information
  @reg:		VPU TCM and configuration registers
  @run:		VPU initialization status
  @wdt:		VPU watchdog workqueue
  @ipi_desc:		VPU IPI descriptor
  @recv_buf:		VPU DTCM share buffer for receiving. The
 			receive buffer is only accessed in interrupt context.
  @send_buf:		VPU DTCM share buffer for sending
  @dev:		VPU struct device
  @clk:		VPU clock onoff
  @fw_loaded:		indicate VPU firmware loaded
  @enable_4GB:		VPU 4GB mode onoff
  @vpu_mutex:		protect mtk_vpu (except recv_buf) and ensure only
 			one client to use VPU service at a time. For example,
 			suppose a client is using VPU to decode VP8.
 			If the other client wants to encode VP8,
 			it has to wait until VP8 decode completes.
  @wdt_refcnt:		WDT reference count to make sure the watchdog can be
 			disabled if no other client is using VPU service
  @ack_wq:		The wait queue for each codec and mdp. When sleeping
 			processes wake up, they will check the condition
 			"ipi_id_ack" to run the corresponding action or
 			go back to sleep.
  @ipi_id_ack:		The ACKs for registered IPI function sending
 			interrupt to VPU
 for protecting vpu data data structure 
 Disable VPU watchdog 
 Enable VPU watchdog 
 Wait until VPU receives the last command 
 send the command to VPU 
 wait for VPU's ACK 
 load vpu programdata memory 
 reset VPU 
 handle extended firmware size 
 download to extended memory if need 
 Downloading program firmware to device
 Downloading data firmware to device 
 boot up vpu 
 vpu register status 
 CONFIG_DEBUG_FS 
 Disable extend0. Enable extend1 
 Disable VPU to host interrupt 
 shared buffer initialization 
	
	  Clock should have been enabled already.
	  Enable again in case vpu_ipi_send times out
	  and has disabled the clock.
 VPU won't send another interrupt until we set VPU_TO_HOST to 0. 
 Get VPU clock 
 VPU watchdog 
 register vpu initialization IPI 
 Set PTCM to 96K and DTCM to 32K 
 continue to use dynamic allocation if failed 
 disable vpu timer interrupt 
 check if vpu is idle for system suspend 
 enable vpu timer interrupt 
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) 2019-2020 Pengutronix, Michael Tretter <kernel@pengutronix.de>
  Convert NAL units between raw byte sequence payloads (RBSP) and C structs.
  The conversion is defined in "ITU-T Rec. H.265 (022018) high efficiency
  video coding". Decoder drivers may use the parser to parse RBSP from
  encoded streams and configure the hardware, if the hardware is not able to
  parse RBSP itself. Encoder drivers may use the generator to generate the
  RBSP for VPSSPSPPS nal units and add them to the encoded stream if the
  hardware does not generate the units.
  See Rec. ITU-T H.265 (022018) Table 7-1 - NAL unit type codes and NAL unit
  type classes
 Keep 1 byte extra for terminating the NAL unit 
  nal_hevc_write_vps() - Write PPS NAL unit into RBSP format
  @dev: device pointer
  @dest: the buffer that is filled with RBSP data
  @n: maximum size of @dest in bytes
  @vps: &struct nal_hevc_vps to convert to RBSP
  Convert @vps to RBSP data and write it into @dest.
  The size of the VPS NAL unit is not known in advance and this function will
  fail, if @dest does not hold sufficient space for the VPS NAL unit.
  Return: number of bytes written to @dest or negative error code
 NAL unit header 
  nal_hevc_read_vps() - Read VPS NAL unit from RBSP format
  @dev: device pointer
  @vps: the &struct nal_hevc_vps to fill from the RBSP data
  @src: the buffer that contains the RBSP data
  @n: size of @src in bytes
  Read RBSP data from @src and use it to fill @vps.
  Return: number of bytes read from @src or negative error code
  nal_hevc_write_sps() - Write SPS NAL unit into RBSP format
  @dev: device pointer
  @dest: the buffer that is filled with RBSP data
  @n: maximum size of @dest in bytes
  @sps: &struct nal_hevc_sps to convert to RBSP
  Convert @sps to RBSP data and write it into @dest.
  The size of the SPS NAL unit is not known in advance and this function will
  fail, if @dest does not hold sufficient space for the SPS NAL unit.
  Return: number of bytes written to @dest or negative error code
 NAL unit header 
  nal_hevc_read_sps() - Read SPS NAL unit from RBSP format
  @dev: device pointer
  @sps: the &struct nal_hevc_sps to fill from the RBSP data
  @src: the buffer that contains the RBSP data
  @n: size of @src in bytes
  Read RBSP data from @src and use it to fill @sps.
  Return: number of bytes read from @src or negative error code
  nal_hevc_write_pps() - Write PPS NAL unit into RBSP format
  @dev: device pointer
  @dest: the buffer that is filled with RBSP data
  @n: maximum size of @dest in bytes
  @pps: &struct nal_hevc_pps to convert to RBSP
  Convert @pps to RBSP data and write it into @dest.
  The size of the PPS NAL unit is not known in advance and this function will
  fail, if @dest does not hold sufficient space for the PPS NAL unit.
  Return: number of bytes written to @dest or negative error code
 NAL unit header 
  nal_hevc_read_pps() - Read PPS NAL unit from RBSP format
  @dev: device pointer
  @pps: the &struct nal_hevc_pps to fill from the RBSP data
  @src: the buffer that contains the RBSP data
  @n: size of @src in bytes
  Read RBSP data from @src and use it to fill @pps.
  Return: number of bytes read from @src or negative error code
 NAL unit header 
  nal_hevc_write_filler() - Write filler data RBSP
  @dev: device pointer
  @dest: buffer to fill with filler data
  @n: size of the buffer to fill with filler data
  Write a filler data RBSP to @dest with a size of @n bytes and return the
  number of written filler data bytes.
  Use this function to generate dummy data in an RBSP data stream that can be
  safely ignored by hevc decoders.
  The RBSP format of the filler data is specified in Rec. ITU-T H.265
  (022018) 7.3.2.8 Filler data RBSP syntax.
  Return: number of filler data bytes (including marker) or negative error
  nal_hevc_read_filler() - Read filler data RBSP
  @dev: device pointer
  @src: buffer with RBSP data that is read
  @n: maximum size of src that shall be read
  Read a filler data RBSP from @src up to a maximum size of @n bytes and
  return the size of the filler data in bytes including the marker.
  This function is used to parse filler data and skip the respective bytes in
  the RBSP data.
  The RBSP format of the filler data is specified in Rec. ITU-T H.265
  (022018) 7.3.2.8 Filler data RBSP syntax.
  Return: number of filler data bytes (including marker) or negative error
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) 2019 Pengutronix, Michael Tretter <kernel@pengutronix.de>
  Helper functions for handling messages that are send via mailbox to the
  Allegro VCU firmware.
	
	  Version >= MCU_MSG_VERSION_2019_2 is handled in
	  allegro_decode_config_blob().
  allegro_encode_mail() - Encode allegro messages to firmware format
  @dst: Pointer to the memory that will be filled with data
  @msg: The allegro message that will be encoded
	
	  The encoded messages might have different length depending on
	  the firmware version or certain fields. Therefore, we have to
	  set the body length after encoding the message.
  allegro_decode_mail() - Parse allegro messages from the firmware.
  @msg: The mcu_msg_response that will be filled with parsed values.
  @src: Pointer to the memory that will be parsed
  The message format in the mailbox depends on the firmware. Parse the
  different formats into a uniform message format that can be used without
  taking care of the firmware version.
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) 2019 Pengutronix, Michael Tretter <kernel@pengutronix.de>
  Allegro DVT video encoder driver
  Support up to 4k video streams. The hardware actually supports higher
  resolutions, which are specified in PG252 June 6, 2018 (H.264H.265 Video
  Codec Unit v1.1) Chapter 3.
  MCU Control Registers
  The Zynq UltraScale+ Devices Register Reference documents the registers
  with an offset of 0x9000, which equals the size of the SRAM and one page
  gap. The driver handles SRAM and registers separately and, therefore, is
  oblivious of the offset.
  The MCU accesses the system memory with a 2G offset compared to CPU
  physical addresses.
  The driver needs to reserve some space at the beginning of capture buffers,
  because it needs to write SPSPPS NAL units. The encoder writes the actual
  frame data after the offset.
 Encoding options 
  This control allows applications to explicitly disable the encoder buffer.
  This value is Allegro specific.
 protect mailbox from simultaneous accesses 
 mutex protecting vb2_queue structure 
 The mailbox interface 
	
	  The downstream driver limits the users to 64 users, thus I can use
	  a bitfield for the user_ids that are in use. See also user_id in
	  struct allegro_channel.
 Maximum range for motion estimation 
 Size limits of coding unit 
 Size limits of transform unit 
 video bitrate mode control cluster 
 user_id is used to identify the channel during CREATE_CHANNEL 
 not sure, what to set here and if this is actually required 
 channel_id is set by the mcu and used by all later commands 
 protect shadow lists of buffers passed to firmware 
 Helper functions for channel and user operations 
	
	  The level limits are specified in Rec. ITU-T H.264 Annex A.3.1 and
	  also specify limits regarding bit rate and CBP size. Only approximate
	  the levels using the frame size.
	 
	  Level 5.1 allows up to 4k video resolution.
	
	  See Rec. ITU-T H.265 v5 (022018), A.4.2 Profile-specific level
	  limits for the video profiles.
  Buffers that are used internally by the MCU.
  Mailbox interface to send messages to the MCU.
 Assume that the header does not wrap. 
	
	  The message might wrap within the mailbox. If the message does not
	  wrap, the first read will read the entire message, otherwise the
	  first read will read message until the end of the mailbox and the
	  second read will read the remaining bytes from the beginning of the
	  mailbox.
	 
	  Skip the header, as was already read to get the size of the body.
  allegro_mbox_send() - Send a message via the mailbox
  @mbox: the mailbox which is used to send the message
  @msg: the message to send
  allegro_mbox_notify() - Notify the mailbox about a new message
  @mbox: The allegro_mbox to notify
 We don't support the encoder buffer pre Firmware version 2019.2 
 The firmware expects the encoder buffer size in bits. 
 AL_420_8BITS: 0x100 -> NV12, 0x88 -> 8 bit 
 UNKNOWN 
	
	  The mcu expects the CPB size in units of a 90 kHz clock, but the
	  channel follows the V4L2_CID_MPEG_VIDEO_H264_CPB_SIZE and stores
	  the CPB size in kilobytes.
 HEVC always uses CABAC, but this has to be explicitly set 
 Shall be ]0;cpb_size in 90 kHz units]. Use maximum value. 
 copied to mcu_msg_encode_frame_response 
 qp are relative to 26 
 copied to mcu_msg_encode_frame_response 
 src_handle is copied to mcu_msg_encode_frame_response 
 Calculation of crop units in Rec. ITU-T H.264 (042017) p. 76 
 unspecified 
 See Rec. ITU-T H.264 (042017) p. 410 E-53 
 See Rec. ITU-T H.264 (042017) p. 410 E-54 
 Only 4:2:0 sampling supported 
 unspecified 
	
	  The payload must include the data before the partition offset,
	  because we will put the sps and pps data there.
 Handled successfully, error is passed via channel->error 
	
	  The firmware is initialized after the mailbox is setup. We further
	  check the AL5_ITC_CPU_IRQ_STA register, if the firmware actually
	  triggered the interrupt. Although this should not happen, make sure
	  that we ignore interrupts, if the mailbox is not initialized.
	
	  The downstream allocates 600 KB for the codec firmware to have some
	  extra space for "possible extensions." My tests were fine with
	  allocating just enough memory for the actual firmware, but I am not
	  sure that the firmware really does not use the remaining space.
  Control functions for the MCU
	
	  Ensure that the AL5_MCU_WAKEUP bit is set to 0 otherwise the mcu
	  does not go to sleep after the reset.
  Create the MCU channel
  After the channel has been created, the picture size, format, colorspace
  and framerate are fixed. Also the codec, profile, bitrate, etc. cannot be
  changed anymore.
  The channel can be created only once. The MCU will accept source buffers
  and stream buffers only after a channel has been created.
  allegro_channel_adjust() - Adjust channel parameters to current format
  @channel: the channel to adjust
  Various parameters of a channel and their limits depend on the currently
  set format. Adjust the parameters after a format change in one go.
 Modify range automatically updates the value 
	
	  The firmware of the Allegro codec handles the padding internally
	  and expects the visual frame size when configuring a channel.
	  Therefore, unlike other encoder drivers, this driver does not round
	  up the width and height to macroblock alignment and does not
	  implement the selection api.
 The mcu sends INIT after reset. 
 Ensure that the mcu is sleeping at the reset vector 
 sentinel  }
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) 2019 Pengutronix, Michael Tretter <kernel@pengutronix.de>
  Convert NAL units between raw byte sequence payloads (RBSP) and C structs
  The conversion is defined in "ITU-T Rec. H.264 (042017) Advanced video
  coding for generic audiovisual services". Decoder drivers may use the
  parser to parse RBSP from encoded streams and configure the hardware, if
  the hardware is not able to parse RBSP itself.  Encoder drivers may use the
  generator to generate the RBSP for SPSPPS nal units and add them to the
  encoded stream if the hardware does not generate the units.
  See Rec. ITU-T H.264 (042017) Table 7-1 - NAL unit type codes, syntax
  element categories, and NAL unit type classes
 Keep 1 byte extra for terminating the NAL unit 
 more_rbsp_data()  false) {
  nal_h264_write_sps() - Write SPS NAL unit into RBSP format
  @dev: device pointer
  @dest: the buffer that is filled with RBSP data
  @n: maximum size of @dest in bytes
  @sps: &struct nal_h264_sps to convert to RBSP
  Convert @sps to RBSP data and write it into @dest.
  The size of the SPS NAL unit is not known in advance and this function will
  fail, if @dest does not hold sufficient space for the SPS NAL unit.
  Return: number of bytes written to @dest or negative error code
  nal_h264_read_sps() - Read SPS NAL unit from RBSP format
  @dev: device pointer
  @sps: the &struct nal_h264_sps to fill from the RBSP data
  @src: the buffer that contains the RBSP data
  @n: size of @src in bytes
  Read RBSP data from @src and use it to fill @sps.
  Return: number of bytes read from @src or negative error code
  nal_h264_write_pps() - Write PPS NAL unit into RBSP format
  @dev: device pointer
  @dest: the buffer that is filled with RBSP data
  @n: maximum size of @dest in bytes
  @pps: &struct nal_h264_pps to convert to RBSP
  Convert @pps to RBSP data and write it into @dest.
  The size of the PPS NAL unit is not known in advance and this function will
  fail, if @dest does not hold sufficient space for the PPS NAL unit.
  Return: number of bytes written to @dest or negative error code
 NAL unit header 
  nal_h264_read_pps() - Read PPS NAL unit from RBSP format
  @dev: device pointer
  @pps: the &struct nal_h264_pps to fill from the RBSP data
  @src: the buffer that contains the RBSP data
  @n: size of @src in bytes
  Read RBSP data from @src and use it to fill @pps.
  Return: number of bytes read from @src or negative error code
 NAL unit header 
  nal_h264_write_filler() - Write filler data RBSP
  @dev: device pointer
  @dest: buffer to fill with filler data
  @n: size of the buffer to fill with filler data
  Write a filler data RBSP to @dest with a size of @n bytes and return the
  number of written filler data bytes.
  Use this function to generate dummy data in an RBSP data stream that can be
  safely ignored by h264 decoders.
  The RBSP format of the filler data is specified in Rec. ITU-T H.264
  (042017) 7.3.2.7 Filler data RBSP syntax.
  Return: number of filler data bytes (including marker) or negative error
  nal_h264_read_filler() - Read filler data RBSP
  @dev: device pointer
  @src: buffer with RBSP data that is read
  @n: maximum size of src that shall be read
  Read a filler data RBSP from @src up to a maximum size of @n bytes and
  return the size of the filler data in bytes including the marker.
  This function is used to parse filler data and skip the respective bytes in
  the RBSP data.
  The RBSP format of the filler data is specified in Rec. ITU-T H.264
  (042017) 7.3.2.7 Filler data RBSP syntax.
  Return: number of filler data bytes (including marker) or negative error
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) 2019-2020 Pengutronix, Michael Tretter <kernel@pengutronix.de>
  Helper functions to generate a raw byte sequence payload from values.
  When reading or writing, the emulation_prevention_three_byte is detected
  only when the 2 one bits need to be inserted. Therefore, we are not
  actually adding the 0x3 byte, but the 2 one bits and the six 0 bits of the
  next byte.
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) STMicroelectronics SA 2015
  Authors: Yannick Fertre <yannick.fertre@st.com>
           Hugues Fruchet <hugues.fruchet@st.com>
 return  hva buffer to user 
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) STMicroelectronics SA 2015
  Authors: Yannick Fertre <yannick.fertre@st.com>
           Hugues Fruchet <hugues.fruchet@st.com>
 video max size
 macroBlocs number (width & height) 
 formula to get temporal or spatial data size 
 source buffer copy in YUV 420 MB-tiled format with size=1625632 
  4 lines of pixels (in Luma, Chroma blue and Chroma red) of top MB
  for deblocking with size=416MBx2
 factor for bitrate and cpb buffer size max values if profile >= high 
 factor for bitrate and cpb buffer size max values if profile < high 
 number of bytes for NALU_TYPE_FILLER_DATA header and footer 
  stereo Video Info struct
  struct hva_h264_td
  @frame_width: width in pixels of the buffer containing the input frame
  @frame_height: height in pixels of the buffer containing the input frame
  @frame_num: the parameter to be written in the slice header
  @picture_coding_type: type I, P or B
  @pic_order_cnt_type: POC mode, as defined in H264 std : can be 0,1,2
  @first_picture_in_sequence: flag telling to encoder that this is the
 			       first picture in a video sequence.
 			       Used for VBR
  @slice_size_type: 0 = no constraint to close the slice
 		     1= a slice is closed as soon as the slice_mb_size limit
 			is reached
 		     2= a slice is closed as soon as the slice_byte_size limit
 			is reached
 		     3= a slice is closed as soon as either the slice_byte_size
 			limit or the slice_mb_size limit is reached
  @slice_mb_size: defines the slice size in number of macroblocks
 		   (used when slice_size_type=1 or slice_size_type=3)
  @ir_param_option: defines the number of macroblocks per frame to be
 		     refreshed by AIR algorithm OR the refresh period
 		     by CIR algorithm
  @intra_refresh_type: enables the adaptive intra refresh algorithm.
 			Disable=0  Adaptative=1 and Cycle=2 as intra refresh
  @use_constrained_intra_flag: constrained_intra_pred_flag from PPS
  @transform_mode: controls the use of 4x48x8 transform mode
  @disable_deblocking_filter_idc:
 		     0: specifies that all luma and chroma block edges of
 			the slice are filtered.
 		     1: specifies that deblocking is disabled for all block
 			edges of the slice.
 		     2: specifies that all luma and chroma block edges of
 			the slice are filtered with exception of the block edges
 			that coincide with slice boundaries
  @slice_alpha_c0_offset_div2: to be written in slice header,
 				controls deblocking
  @slice_beta_offset_div2: to be written in slice header,
 			    controls deblocking
  @encoder_complexity: encoder complexity control (IME).
 		     0 = I_16x16, P_16x16, Full ME Complexity
 		     1 = I_16x16, I_NxN, P_16x16, Full ME Complexity
 		     2 = I_16x16, I_NXN, P_16x16, P_WxH, Full ME Complexity
 		     4 = I_16x16, P_16x16, Reduced ME Complexity
 		     5 = I_16x16, I_NxN, P_16x16, Reduced ME Complexity
 		     6 = I_16x16, I_NXN, P_16x16, P_WxH, Reduced ME Complexity
   @chroma_qp_index_offset: coming from picture parameter set
 			     (PPS see [H.264 STD] 7.4.2.2)
   @entropy_coding_mode: entropy coding mode.
 			  0 = CAVLC
 			  1 = CABAC
  @brc_type: selects the bit-rate control algorithm
 		     0 = constant Qp, (no BRC)
 		     1 = CBR
 		     2 = VBR
  @quant: Quantization param used in case of fix QP encoding (no BRC)
  @non_VCL_NALU_Size: size of non-VCL NALUs (SPS, PPS, filler),
 		       used by BRC
  @cpb_buffer_size: size of Coded Picture Buffer, used by BRC
  @bit_rate: target bitrate, for BRC
  @qp_min: min QP threshold
  @qp_max: max QP threshold
  @framerate_num: target framerate numerator , used by BRC
  @framerate_den: target framerate denomurator , used by BRC
  @delay: End-to-End Initial Delay
  @strict_HRD_compliancy: flag for HDR compliancy (1)
 			   May impact quality encoding
  @addr_source_buffer: address of input frame buffer for current frame
  @addr_fwd_Ref_Buffer: address of reference frame buffer
  @addr_rec_buffer: address of reconstructed frame buffer
  @addr_output_bitstream_start: output bitstream start address
  @addr_output_bitstream_end: output bitstream end address
  @addr_external_sw : address of external search window
  @addr_lctx : address of context picture buffer
  @addr_local_rec_buffer: address of local reconstructed buffer
  @addr_spatial_context: address of spatial context buffer
  @bitstream_offset: offset in bits between aligned bitstream start
 		      address and first bit to be written by HVA.
 		      Range value is [0..63]
  @sampling_mode: Input picture format .
 		     0: YUV420 semi_planar Interleaved
 		     1: YUV422 raster Interleaved
  @addr_param_out: address of output parameters structure
  @addr_scaling_matrix: address to the coefficient of
 			 the inverse scaling matrix
  @addr_scaling_matrix_dir: address to the coefficient of
 			     the direct scaling matrix
  @addr_cabac_context_buffer: address of cabac context buffer
  @GmvX: Input information about the horizontal global displacement of
 	  the encoded frame versus the previous one
  @GmvY: Input information about the vertical global displacement of
 	  the encoded frame versus the previous one
  @window_width: width in pixels of the window to be encoded inside
 		  the input frame
  @window_height: width in pixels of the window to be encoded inside
 		   the input frame
  @window_horizontal_offset: horizontal offset in pels for input window
 			      within input frame
  @window_vertical_offset: vertical offset in pels for input window
 			    within input frame
  @addr_roi: Map of QP offset for the Region of Interest algorithm and
 	      also used for Error map.
 	      Bit 0-6 used for qp offset (value -64 to 63).
 	      Bit 7 used to force intra
  @addr_slice_header: address to slice header
  @slice_header_size_in_bits: size in bits of the Slice header
  @slice_header_offset0: Slice header offset where to insert
 			  first_Mb_in_slice
  @slice_header_offset1: Slice header offset where to insert
 			  slice_qp_delta
  @slice_header_offset2: Slice header offset where to insert
 			  num_MBs_in_slice
  @slice_synchro_enable: enable "slice ready" interrupt after each slice
  @max_slice_number: Maximum number of slice in a frame
 		      (0 is strictly forbidden)
  @rgb2_yuv_y_coeff: Four coefficients (C0C1C2C3) to convert from RGB to
 		      YUV for the Y component.
 		      Y = C0R + C1G + C2B + C3 (C0 is on byte 0)
  @rgb2_yuv_u_coeff: four coefficients (C0C1C2C3) to convert from RGB to
 		      YUV for the Y component.
 		      Y = C0R + C1G + C2B + C3 (C0 is on byte 0)
  @rgb2_yuv_v_coeff: Four coefficients (C0C1C2C3) to convert from RGB to
 		      YUV for the U (Cb) component.
 		      U = C0R + C1G + C2B + C3 (C0 is on byte 0)
  @slice_byte_size: maximum slice size in bytes
 		     (used when slice_size_type=2 or slice_size_type=3)
  @max_air_intra_mb_nb: Maximum number of intra macroblock in a frame
 			 for the AIR algorithm
  @brc_no_skip: Disable skipping in the Bitrate Controller
  @addr_brc_in_out_parameter: address of static buffer for BRC parameters
  struct hva_h264_slice_po
  @ slice_size: slice size
  @ slice_start_time: start time
  @ slice_stop_time: stop time
  @ slice_num: slice number
  struct hva_h264_po
  @ bitstream_size: bitstream size
  @ dct_bitstream_size: dtc bitstream size
  @ stuffing_bits: number of stuffing bits inserted by the encoder
  @ removal_time: removal time of current frame (nb of ticks 1framerate)
  @ hvc_start_time: hvc start time
  @ hvc_stop_time: hvc stop time
  @ slice_count: slice count
  struct hva_h264_ctx
  @seq_info:  sequence information buffer
  @ref_frame: reference frame buffer
  @rec_frame: reconstructed frame buffer
  @task:      task descriptor
	
	  with this HVA hardware version, part of the slice header is computed
	  on host and part by hardware.
	  The part of host is precomputed and available through this array.
 toggle the I frame 
		
		  update slice header with P frame order
		  frame order is limited to 16 (coded on 4bits only)
 start code 
 nal_unit_type 
 start code 
 nal_unit_type 
 payload type 
 set to topbottom frame packing arrangement 
 payload size 
 payload 
 check width and height parameters 
 set frame alignment 
 pic_order_cnt_type hard coded to '2' as only I & P frames 
 useConstrainedIntraFlag set to false for better coding efficiency 
 set framerate, framerate = 1 n time per frame 
		
		  due to a hardware bug, framerate denominator can't exceed
		  536 (BRC overflow). Compute nearest framerate
		
		  update bitrate to introduce a correction due to
		  the new framerate
		  new bitrate = (old bitrate  new framerate)  old framerate
 compute maximum bitrate depending on profile 
 check if bitrate doesn't exceed max size 
 convert cpb_buffer_size in bits 
 compute maximum cpb buffer size depending on profile 
 check if cpb buffer size doesn't exceed max size 
 enable skipping in the Bitrate Controller 
 initial delay 
	
	  fill matrix color converter (RGB to YUV)
	  Y = 0,299 R + 0,587 G + 0,114 B
	  Cb = -0,1687 R -0,3313 G + 0,5 B + 128
	  Cr = 0,5 R - 0,4187 G - 0,0813 B + 128
 enabledisable transform mode 
 encoder complexity fix to 2, ENCODE_I_16x16_I_NxN_P_16x16_P_WxH 
 quant fix to 28, default VBR value 
 if automatic framerate, deactivate bitrate controller 
 compliancy fix to true 
 set minimum & maximum quantizers 
 swap spatial and temporal context 
 fill the slice header part 
	
	  check the spspps header size for key frame only
	  spspps header was previously fill by libv4l
	  during qbuf of stream buffer
 add SEI nal (video stereo info) 
 fill size of non-VCL NAL units (SPS, PPS, filler and SEI) 
 compute bitstream offset & new start address of bitstream 
 check esram size necessary to encode a frame 
 allocate context for codec 
 allocate sequence info buffer 
 allocate reference frame buffer 
 allocate reconstructed frame buffer 
 allocate task descriptor 
 switch reference & reconstructed frame 
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) STMicroelectronics SA 2015
  Authors: Yannick Fertre <yannick.fertre@st.com>
           Hugues Fruchet <hugues.fruchet@st.com>
  performance debug info
 encoding period 
		
		  minimum and maximum bitrates are based on the
		  encoding period values upon a window of 32 samples
			
			  bitrate in kbps = (size  8  1000) 
			                    (duration  10000)
			                  = size  80  duration
	
	  filter sequences valid for performance:
	  - beginbegin (no stream available) is an invalid sequence
	  - beginend is a valid sequence
 stream bytesused and timestamp in us 
 encoding duration 
	
	  the average bitrate is based on the total stream size
	  and the total encoding periods
		
		  bitrate in kbps = (video size  8  1000) 
		                    (video duration  10000)
		                  = video size  80  video duration
  device debug info
  context (instance) debug info
 save context before removing 
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) STMicroelectronics SA 2015
  Authors: Yannick Fertre <yannick.fertre@st.com>
           Hugues Fruchet <hugues.fruchet@st.com>
 HVA requires a 16x16 pixels alignment for frames 
 registry of available encoders 
 multiple of 2 
	
	  HVA only encodes in YUV420 format, whatever the frame format.
	  A compression ratio of 2 is assumed: thus, the maximum size
	  of a stream is estimated to ((width x height x 3  2)  2)
 find an encoder which can deal with these formats 
 update instance name 
 open encoder instance 
  V4L2 ioctl operations
		
		  if the frame resolution is already fixed, only allow the
		  same stream resolution
 adjust width & height 
 adjust width & height 
		
		  depending on the targeted compressed video format, the
		  capture buffer might contain headers (e.g. H.264 SPSPPS)
		  filled in by the driver client; the size of these data is
		  copied from the bytesused field of the V4L2 buffer in the
		  payload field of the hva stream buffer
 V4L2 ioctl ops 
  V4L2 control operations
 V4L2 control ops 
 set default time per frame 
  mem-to-mem operations
 protect instance against reentrancy 
 propagate frame timestamp 
 mem-to-mem ops 
  VB2 queue operations
 only one plane supported 
 get memory addresses 
 get memory addresses 
 open encoder when both start_streaming have been called 
 store the instance context in the instances array 
 save the context identifier in the context 
 return of all pending buffers to vb2 (in queued state) 
 return of all pending buffers to vb2 (in queued state) 
 return of all pending buffers to vb2 (in error state) 
 return of all pending buffers to vb2 (in error state) 
 close encoder when both stop_streaming have been called 
 clear instance context in instances array 
 VB2 queue ops 
  V4L2 file operations
 set the instance name 
 default parameters for frame and stream 
 clear instance context in instances array 
 trace a summary of instance before closing (debug purpose) 
 V4L2 file ops 
  Platform device operations
 probe hardware 
 register all available encoders 
 register all supported formats 
 register on V4L2 
 register device 
 PM ops 
 end node  }
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) STMicroelectronics SA 2015
  Authors: Yannick Fertre <yannick.fertre@st.com>
           Hugues Fruchet <hugues.fruchet@st.com>
 HVA register offsets 
 define value for version id register (HVA_HIF_REG_VERSION) 
 define values for BSM register (HVA_HIF_REG_BSM) 
 define values for memory interface register (HVA_HIF_REG_MIF_CFG) 
 define value for HEC memory interface register (HVA_HIF_REG_MIF_CFG) 
  Bits definition for clock gating register (HVA_HIF_REG_CLK_GATING) 
 fix hva clock rate 
 fix delay for pmruntime 
  hw encode error values
  NO_ERROR: Success, Task OK
  H264_BITSTREAM_OVERSIZE: VECH264 Bitstream size > bitstream buffer
  H264_FRAME_SKIPPED: VECH264 Frame skipped (refers to CPB Buffer Size)
  H264_SLICE_LIMIT_SIZE: VECH264 MB > slice limit size
  H264_MAX_SLICE_NUMBER: VECH264 max slice number reached
  H264_SLICE_READY: VECH264 Slice ready
  TASK_LIST_FULL: HVAFPC task list full
		   (discard latest transform command)
  UNKNOWN_COMMAND: Transform command not known by HVAFPC
  WRONG_CODEC_OR_RESOLUTION: Wrong Codec or Resolution Selection
  NO_INT_COMPLETION: Time-out on interrupt completion
  LMI_ERR: Local Memory Interface Error
  EMI_ERR: External Memory Interface Error
  HECMI_ERR: HEC Memory Interface Error
 read status registers 
 acknowledge interruption 
	
	  status: task_id[31:16] client_id[15:8] status[7:0]
	  the context identifier is retrieved from the client identifier
 read status registers 
 read error registers 
 acknowledge interruption 
	
	  status: task_id[31:16] client_id[15:8] status[7:0]
	  the context identifier is retrieved from the client identifier
 get memory for registers 
 get memory for esram 
 get clock resource 
 get status interruption resource 
 get error interruption resource 
 initialise protection mutex 
 initialise completion signal 
 initialise runtime power management 
 check IP hardware version 
 enable irqs 
 byte swap config 
 define Max Opcode Size and Max Message Size for LMI and EMI 
	
	  command FIFO: task_id[31:16] client_id[15:8] command_type[7:0]
	  the context identifier is provided as client identifier to the
	  hardware, and is retrieved in the interrupt functions from the
	  status register
 get encoding status 
 SPDX-License-Identifier: GPL-2.0
   c8sectpfe-dvb.c - C8SECTPFE STi DVB driver
  Copyright (c) STMicroelectronics 2015
   Author Peter Griffin <peter.griffin@linaro.org>
		
		  init the demod so that i2c gate_ctrl
		  to the tuner works correctly
 Allocate the tda18212 structure 
 attach tuner 
 SPDX-License-Identifier: GPL-2.0
  c8sectpfe-debugfs.c - C8SECTPFE STi DVB driver
  Copyright (c) STMicroelectronics 2015
  Author: Peter Griffin <peter.griffin@linaro.org>
 SPDX-License-Identifier: GPL-2.0
  c8sectpfe-core.c - C8SECTPFE STi DVB driver
  Copyright (c) STMicroelectronics 2015
    Author:Peter Bennett <peter.bennett@st.com>
 	    Peter Griffin <peter.griffin@linaro.org>
 hw requires minimum of 8PACKET_SIZE and padded to 8byte boundary 
 iterate through input block channels 
 is this descriptor initialised and TP enabled 
 has it wrapped 
 manage cache so data is visible to CPU 
 advance the read pointer 
 8192 is a special PID 
 manage cache so PID bitmap is visible to HW 
 Reset the internal inputblock sram pointers 
 reset read  write memdma ptrs for this channel 
 Issue a reset and enable InputBlock 
 and enable the tp 
 manage cache so data is visible to HW 
 TP re-configuration on page 168 of functional spec 
 disable IB (prevents more TS data going to memdma) 
 disable this channels descriptor 
 now request memdma channel goes idle 
 wait for idle irq handler to signal completion 
 reset read  write ptrs for this channel 
 turn off all PIDS in the bitmap 
 manage cache so data is visible to HW 
	 page 168 of functional spec: Clear the idle request
 signal idle completion 
 Ensure backbuffer is 32byte aligned 
	
	  The pid buffer can be configured (in hw) for byte or bit
	  per pid. By powers of deduction we conclude stih407 family
	  is configured (at SoC design stage) for bit per pid.
	
	  PID buffer needs to be aligned to size of the pid table
	  which at bit per pid is 1024 bytes (8192 pids  8).
	  PIDF_BASE register enforces this alignment when writing
	  the register.
 manage cache so pid bitmap is visible to HW 
 Enable this input block 
 Place the FIFO's at the end of the irec descriptors 
 Configure and enable HW PID filtering 
	
	  The PID value is created by assembling the first 8 bytes of
	  the TS packet into a 64-bit word in big-endian format. A
	  slice of that 64-bit word is taken from
	  (PID_OFFSET+PID_NUM_BITS-1) to PID_OFFSET.
 Get base addpress of pointer record block from DMEM 
 fill out pointer record data structure 
 advance pointer record block to our channel 
 readwrite pointers with physical bus address 
 initialize tasklet 
	
	  TODO FIXME we should detect some error conditions here
	  and ideally do something about them!
 Allocate the c8sectpfei structure 
 to save power disable all IP's (on by default) 
 Enable memdma clock 
 clear internal sram 
 sanity check value 
 toggle reset lines 
 Setup timer interrupt 
 Get the configuration information about the tuners 
	
	  Now loop through and un-configure each of the InputBlock resources
 unclock all internal IP's 
 iterate round each tsin and configure memdma descriptor and IB hw 
 We only support ELF32 at this point 
 Check ELF magic 
	
	  For IMEM segments, the segment contains 24-bit
	  instructions which must be padded to 32-bit
	  instructions before being written. The written
	  segment is padded with NOP instructions.
		 Every 3 bytes, add an additional
	
	  For DMEM segments copy the segment data from the ELF
	  file and pad segment with zeroes
 go through the available ELF segments 
 Only consider LOAD segments 
		
		  Check segment is contained within the fw->data buffer
		
		  MEMDMA IMEM has executable flag set, otherwise load
		  this segment into DMEM.
		 
			
			  The Slim ELF file uses 32-bit word addressing for
			  load offsets.
			
			  The Slim ELF file uses 32-bit word addressing for
			  load offsets.
 now the firmware is loaded configure the input blocks 
	
	  STBus target port can access IMEM and DMEM ports
	  without waiting for CPU
 sentinel  },
 SPDX-License-Identifier: GPL-2.0
  c8sectpfe-common.c - C8SECTPFE STi DVB driver
  Copyright (c) STMicroelectronics 2015
    Author: Peter Griffin <peter.griffin@linaro.org>
 we take a all or nothing approach 
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) STMicroelectronics SA 2015
  Authors: Hugues Fruchet <hugues.fruchet@st.com>
           Fabrice Lecoultre <fabrice.lecoultre@st.com>
           for STMicroelectronics.
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) STMicroelectronics SA 2015
  Author: Hugues Fruchet <hugues.fruchet@st.com> for STMicroelectronics.
  IPC shared memory (@ipc_buf_size, @ipc_buf_paddr) is sent to copro
  at each instance opening. This memory is allocated by IPC client
  and given through delta_ipc_open(). All messages parameters
  (open, set_stream, decode) will have their phy address within
  this IPC shared memory, avoiding de-facto recopies inside delta-ipc.
  All the below messages structures are used on both host and firmware
  side and are packed (use only of 32 bits size fields in messages
  structures to ensure packing):
  - struct delta_ipc_open_msg
  - struct delta_ipc_set_stream_msg
  - struct delta_ipc_decode_msg
  - struct delta_ipc_close_msg
  - struct delta_ipc_cb_msg
 init 
	
	  allocation of contiguous buffer for
	  data of commands exchanged between
	  host and firmware coprocessor
 build rpmsg message 
 send it 
 wait for acknowledge 
 command completed, check error 
 build rpmsg message 
 send it 
 wait for acknowledge 
 command completed, check status 
 build rpmsg message 
 send it 
 wait for acknowledge 
 command completed, check status 
 build rpmsg message 
 send it 
 wait for acknowledge 
 command completed, check status 
 sanity check 
	
	  if not already known, save copro instance context
	  to ensure re-entrance on copro side
	
	  all is fine,
	  update status & complete command
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) STMicroelectronics SA 2013
  Author: Hugues Fruchet <hugues.fruchet@st.com> for STMicroelectronics.
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) STMicroelectronics SA 2015
  Author: Hugues Fruchet <hugues.fruchet@st.com> for STMicroelectronics.
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) STMicroelectronics SA 2013
  Author: Hugues Fruchet <hugues.fruchet@st.com> for STMicroelectronics.
 jpeg header 
 ipc 
 decoded output frame 
	
	  !WARNING!
	  the NV12 decoded frame is only available
	  on decimated output when enabling flag
	  "JPEG_ADDITIONAL_FLAG_420MB"...
	  the non decimated output gives YUV422SP
 status 
 check firmware decoding status 
 progressive stream 
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) STMicroelectronics SA 2015
  Authors: Hugues Fruchet <hugues.fruchet@st.com>
           Jean-Christophe Trotin <jean-christophe.trotin@st.com>
           for STMicroelectronics.
 registry of available decoders 
 dump first & last 10 bytes 
 dump first 10 bytes 
 decoded frame is now output to user 
 ignore EOS 
 requeue all free frames 
 recycle frame on decoder side 
 this frame is no more output 
 requeue free frame 
 reset other frame fields 
	
	  protected by global lock acquired
	  by V4L2 when calling delta_vb2_au_queue
	
	  protected by global lock acquired
	  by V4L2 when calling delta_vb2_au_queue
	
	  protected by global lock acquired
	  by V4L2 when calling delta_vb2_au_queue
 free all pending dts 
 reset list 
 multiple of 2 
	
	  for a MJPEG stream encoded from YUV422 pixel format,
	  assuming a compression ratio of 2, the maximum size
	  of an access unit is (width x height x 2)  2,
	  so (width x height)
 update instance name 
 open decoder instance 
  V4L2 ioctl operations
 align colorspace & friends on stream ones if any set 
 adjust width & height 
 adjust width & height 
 default decoder alignment constraint 
		
		  decoder not yet opened and valid stream header not found,
		  could not negotiate format with decoder, check at least
		  pixel format & negotiate resolution boundaries
		  and alignment...
 set frame information to decoder 
 then get what decoder can really do 
 default to video dimensions 
 visible area inside video 
 up to aligned dimensions 
	
	  Send EOS to user:
	  - by returning an empty frame flagged to V4L2_BUF_FLAG_LAST
	  - and then send EOS event
 empty frame 
 set the last buffer flag 
 release frame to user 
 send EOS event 
 drain the decoder 
 release to user drained frames 
 no more decoded frames 
 pop timestamp and mark frame with it 
 release decoded frame to user 
 try to complete EOS 
 new frame available, EOS can now be completed 
	
	  EOS completion from driver is delayed because
	  we don't have a free empty frame available.
	  EOS completion is so delayed till next frame_queue() call
	  to be sure to have a free empty frame available.
 v4l2 ioctl ops 
  mem-to-mem operations
 protect instance against reentrancy 
 dump access unit 
 enable the hardware 
 decode this access unit 
	
	  if the (-ENODATA) value is returned, it refers to the interlaced
	  stream case for which 2 access units are needed to get 1 frame.
	  So, this returned value doesn't mean that the decoding fails, but
	  indicates that the timestamp information of the access unit shall
	  not be taken into account, and that the V4L2 buffer associated with
	  the access unit shall be flagged with V4L2_BUF_FLAG_ERROR to inform
	  the user of this situation
 disable the hardware 
 disable the hardware 
 push au timestamp in FIFO 
 get available decoded frames 
 no more decoded frames 
 pop timestamp and mark frame with it 
 release decoded frame to user 
 mem-to-mem ops 
  VB2 queue operations
 get memory addresses 
 setup frame on decoder side 
  default implementation of get_frameinfo decoder ops
  matching frame information from stream information
  & with default pixel format & default alignment.
  default implementation of recycle decoder ops
  consisting to relax the "decoded" frame state
 enable the hardware 
 open decoder if not yet done 
	
	  first buffer should contain stream header,
	  decode it to get the infos related to stream
	  such as width, height, dpb, ...
 dump access unit 
 decode this access unit 
	
	  return all buffers to vb2 in QUEUED state.
	  This will give ownership back to userspace
 return all buffers to vb2 in ERROR state 
	
	  the number of output buffers needed for decoding =
	  user need (num_buffers given, usually for display pipeline) +
	  stream need (streaminfo->dpb) +
	  decoding peak smoothing (depends on DELTA IP perf)
 single plane for Y and CbCr 
 update V4L2 fields for user 
 new frame available, EOS can now be completed 
 return, no need to recycle this buffer to decoder 
 recycle this frame 
	
	  return all buffers to vb2 in ERROR state
	  & reset each frame state to OUT
 VB2 queue ops 
  V4L2 file operations
 setup vb2 queue for stream input 
 overload vb2 buf with private au struct 
 setup vb2 queue for frame output 
 overload vb2 buf with private frame struct 
	
	  wait stream format to determine which
	  decoder to open
 set the instance name 
 default parameters for frame and stream 
 enable ST231 clocks 
 enable FLASH_PROMIP clock 
 close decoder 
	
	  trace a summary of instance
	  before closing (debug purpose)
 disable ST231 clocks 
 disable FLASH_PROMIP clock 
 V4L2 file ops 
  Platform device operations
 get clock resources 
 init pm_runtime used for power management 
 init firmware ipc channel 
 register all available decoders 
 register all supported formats 
 register on V4L2 
 register device 
 PM ops 
 end node 
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) STMicroelectronics SA 2014
  Authors: Fabien Dessenne <fabien.dessenne@st.com> for STMicroelectronics.
 Max width of the source frame in a single node 
 Reset & boot poll config 
 RGB - YUV conversion 
 Horizontal flip 
 Vertical flip 
 Wide (>MAX_SRC_WIDTH) 
 Scale 
 Horizontal increment in 6.10 format 
 Vertical increment in 6.10 format 
 is the src an interlaced buffer 
 nb of planes of the src 
 is the src a YUV color format 
 is the src 4:2:0 chroma subsampled 
 nb of planes of the dst 
 is the dst a YUV color format 
 is the dst 4:2:0 chroma subsampled 
 Filter min scale factor (6.10 fixed point) 
 Filter max scale factor (6.10 fixed point) 
 Virtual address for filter table 
 Physical address for filter table 
  bdisp_hw_reset
  @bdisp:      bdisp entity
  Resets HW
  RETURNS:
  0 on success.
 Mask Interrupt 
 Reset 
 Wait for reset done 
  bdisp_hw_get_and_clear_irq
  @bdisp:      bdisp entity
  Read then reset interrupt status
  RETURNS:
  0 if expected interrupt was raised.
 Check for the only expected IT: LastNode of AQ1 
 Clear and mask 
  bdisp_hw_free_nodes
  @ctx:        bdisp context
  Free node memory
  RETURNS:
  None
  bdisp_hw_alloc_nodes
  @ctx:        bdisp context
  Allocate dma memory for nodes
  RETURNS:
  0 on success
 Allocate all the nodes within a single memory page 
  bdisp_hw_free_filters
  @dev:        device
  Free filters memory
  RETURNS:
  None
  bdisp_hw_alloc_filters
  @dev:        device
  Allocate dma memory for filters
  RETURNS:
  0 on success
 Allocate all the filters within a single memory page 
 Setup filter addresses 
  bdisp_hw_get_hf_addr
  @inc:        resize increment
  Find the horizontal filter table that fits the resize increment
  RETURNS:
  table physical address
  bdisp_hw_get_vf_addr
  @inc:        resize increment
  Find the vertical filter table that fits the resize increment
  RETURNS:
  table physical address
  bdisp_hw_get_inc
  @from:       input size
  @to:         output size
  @inc:        resize increment in 6.10 format
  Computes the increment (inverse of scale) in 6.10 format
  RETURNS:
  0 on success
 overflow (downscale x 63) or too small (upscale x 1024) 
  bdisp_hw_get_hv_inc
  @ctx:        device context
  @h_inc:      horizontal increment
  @v_inc:      vertical increment
  Computes the horizontal & vertical increments (inverse of scale)
  RETURNS:
  0 on success
  bdisp_hw_get_op_cfg
  @ctx:        device context
  @c:          operation configuration
  Check which blitter operations are expected and sets the scaling increments
  RETURNS:
  0 on success
 Deinterlacing adjustment : stretch a field to a frame 
  bdisp_hw_color_format
  @pixelformat: v4l2 pixel format
  v4l2 to bdisp pixel format convert
  RETURNS:
  bdisp pixel format
 This V4L format actually refers to xRGB 
 RGB888 format 
 This V4L format actually refers to ARGB 
  bdisp_hw_build_node
  @ctx:        device context
  @cfg:        operation configuration
  @node:       node to be set
  @t_plan:     whether the node refers to a RGBY or a CbCr plane
  @src_x_offset: x offset in the source image
  Build a node
  RETURNS:
  None
 Adjust src and dst areas wrt src_x_offset 
 General 
 Src2 = RGB  Src1 = Src3 = off 
		 Src3 = Y
		  Src2 = CbCr or ColorFill if writing the Y plane
		 Src3 = Y
		  Src2 = Cb or ColorFill if writing the Y plane
 Color convert 
 Scale needed if scaling OR 4:2:0 updownsampling 
 Target 
 420 chroma downsampling 
 handle only the top field which is half height of a frame 
 Src 2 : RGB 
 Src 2 : Cb or CbCr 
 420 chroma upsampling 
 Src 1 : Cr 
 Src 3 : Y 
 No chroma upsampling for output RGB  Y plane 
 No need to read Y (Src3) when writing Chroma 
 Resize (scale OR 4:2:0: chroma updownsampling) 
 no need to compute Y when writing CbCr from RGB input 
 FCTL 
 RSF - Chroma may need to be updownsampled 
 RGB to 4:2:0 for Chroma: downsample 
 4:2:0: to RGB: upsample
 RZI 
 Filter table physical addr 
 Y version 
 Versatile matrix for RGB  YUV conversion 
  bdisp_hw_build_all_nodes
  @ctx:        device context
  Build all the nodes for the blitter operation
  RETURNS:
  0 on success
 Get configuration (scale, flip, ...) 
 Split source in vertical strides (HW constraint) 
 Build RGBY node and link it to the previous node 
 Build additional Cb(Cr) node, link it to the previous one 
 Next stride until full width covered 
 Mark last node as the last 
  bdisp_hw_save_request
  @ctx:        device context
  Save a copy of the request and of the built nodes
  RETURNS:
  None
 Request copy 
 Nodes copy 
 Allocate memory if not done yet 
  bdisp_hw_update
  @ctx:        device context
  Send the request to the HW
  RETURNS:
  0 on success
 build nodes 
 Save a copy of the request 
 Configure interrupt to 'Last Node Reached for AQ1' 
 Write first node addr 
 Find and write last node addr : this starts the HW processing 
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) STMicroelectronics SA 2014
  Authors: Fabien Dessenne <fabien.dessenne@st.com> for STMicroelectronics.
 User configuration change 
 Config updated 
 Source set 
 Destination set 
 Stop request 
 Abort while device run 
 Driver opened 
 HW device running 
 Driver suspended 
 Driver being suspended 
 ARGB888. [31:0] A:R:G:B 8:8:8:8 little endian 
 is actually ARGB 
 XRGB888. [31:0] x:R:G:B 8:8:8:8 little endian 
 is actually xRGB 
 RGB565. [15:0] R:G:B 5:6:5 little endian 
 NV12. YUV420SP - 1 plane for Y + 1 plane for (CbCr) 
 RGB888. [23:0] B:G:R 8:8:8 little endian 
	 YU12. YUV420P - 1 plane for Y + 1 plane for Cb + 1 plane for Cr
	  To keep as the LAST element of this table (no support on capture)
 Default format : HD ARGB32
 UV (NV12) or U (420P) 
 V (420P) 
 return to V4L2 any 0-size buffer so it can be dequeued by user 
 Allocate memory for both context and node 
 Use separate control handler per file handle 
 Default format 
 Setup the device context for mem2mem mode. 
 YUV420P only supported for VIDEO_OUTPUT 
 Field (interlaced only supported on OUTPUT) 
 Adjust width & height 
 cropped frame 
 complete frame 
 composed (cropped) frame 
 complete frame 
 Return 1 if a is enclosed in b, or 0 otherwise. 
 Align and check origin 
 Align and check size 
 Checks adjust constraints flags 
 get resources 
 v4l2 register 
 Debug 
 Power management 
 Filters 
 Register 
 end node  }
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) STMicroelectronics SA 2014
  Authors: Fabien Dessenne <fabien.dessenne@st.com> for STMicroelectronics.
 Not dumping all fields, focusing on significant ones 
 Color Fill not dumped 
 Clipping not dumped 
 CLUT not dumped 
 PMK not dumped 
 Flicker not dumped 
 Color key not dumped 
 Reserved not dumped 
 Static Address & User not dumped 
 Output Versatile Matrix not dumped 
 Pace not dumped 
 VC1R & DEI not dumped 
 Gradient Fill not dumped 
 SPDX-License-Identifier: GPL-2.0+
  vsp1_entity.c  --  R-Car VSP1 Base Entity
  Copyright (C) 2013-2014 Renesas Electronics Corporation
  Contact: Laurent Pinchart (laurent.pinchart@ideasonboard.com)
		
		  The HGO is a special case, its routing is configured on the
		  sink pad.
		
		  The HGT is a special case, its routing is configured on the
		  sink pad.
	
	  The ILV and BRS share the same data path route. The extra BRSSEL bit
	  selects between the ILV and BRS.
 -----------------------------------------------------------------------------
  V4L2 Subdevice Operations
  vsp1_entity_get_pad_config - Get the pad configuration for an entity
  @entity: the entity
  @sd_state: the TRY state
  @which: configuration selector (ACTIVE or TRY)
  When called with which set to V4L2_SUBDEV_FORMAT_ACTIVE the caller must hold
  the entity lock to access the returned configuration.
  Return the pad configuration requested by the which argument. The TRY
  configuration is passed explicitly to the function through the cfg argument
  and simply returned when requested. The ACTIVE configuration comes from the
  entity structure.
  vsp1_entity_get_pad_format - Get a pad format from storage for an entity
  @entity: the entity
  @sd_state: the state storage
  @pad: the pad number
  Return the format stored in the given configuration for an entity's pad. The
  configuration can be an ACTIVE or TRY configuration.
  vsp1_entity_get_pad_selection - Get a pad selection from storage for entity
  @entity: the entity
  @sd_state: the state storage
  @pad: the pad number
  @target: the selection target
  Return the selection rectangle stored in the given configuration for an
  entity's pad. The configuration can be an ACTIVE or TRY configuration. The
  selection target can be COMPOSE or CROP.
  vsp1_entity_init_cfg - Initialize formats on all pads
  @subdev: V4L2 subdevice
  @cfg: V4L2 subdev pad configuration
  Initialize all pad formats with default values in the given pad config. This
  function can be used as a handler for the subdev pad::init_cfg operation.
  vsp1_subdev_get_pad_format - Subdev pad get_fmt handler
  @subdev: V4L2 subdevice
  @cfg: V4L2 subdev pad configuration
  @fmt: V4L2 subdev format
  This function implements the subdev get_fmt pad operation. It can be used as
  a direct drop-in for the operation handler.
  vsp1_subdev_enum_mbus_code - Subdev pad enum_mbus_code handler
  @subdev: V4L2 subdevice
  @cfg: V4L2 subdev pad configuration
  @code: Media bus code enumeration
  @codes: Array of supported media bus codes
  @ncodes: Number of supported media bus codes
  This function implements the subdev enum_mbus_code pad operation for entities
  that do not support format conversion. It enumerates the given supported
  media bus codes on the sink pad and reports a source pad format identical to
  the sink pad.
		
		  The entity can't perform format conversion, the sink format
		  is always identical to the source format.
  vsp1_subdev_enum_frame_size - Subdev pad enum_frame_size handler
  @subdev: V4L2 subdevice
  @cfg: V4L2 subdev pad configuration
  @fse: Frame size enumeration
  @min_width: Minimum image width
  @min_height: Minimum image height
  @max_width: Maximum image width
  @max_height: Maximum image height
  This function implements the subdev enum_frame_size pad operation for
  entities that do not support scaling or cropping. It reports the given
  minimum and maximum frame width and height on the sink pad, and a fixed
  source pad size identical to the sink pad.
		
		  The size on the source pad are fixed and always identical to
		  the size on the sink pad.
  vsp1_subdev_set_pad_format - Subdev pad set_fmt handler
  @subdev: V4L2 subdevice
  @cfg: V4L2 subdev pad configuration
  @fmt: V4L2 subdev format
  @codes: Array of supported media bus codes
  @ncodes: Number of supported media bus codes
  @min_width: Minimum image width
  @min_height: Minimum image height
  @max_width: Maximum image width
  @max_height: Maximum image height
  This function implements the subdev set_fmt pad operation for entities that
  do not support scaling or cropping. It defaults to the first supplied media
  bus code if the requested code isn't supported, clamps the size to the
  supplied minimum and maximum, and propagates the sink pad format to the
  source pad.
 The output format can't be modified. 
	
	  Default to the first media bus code if the requested format is not
	  supported.
 Propagate the format to the source pad. 
 Reset the crop and compose rectangles. 
 -----------------------------------------------------------------------------
  Media Operations
		
		  Fan-out is limited to one for the normal data path plus
		  optional HGO and HGT. We ignore the HGO and HGT here.
 Fan-in is limited to one. 
  vsp1_entity_remote_pad - Find the pad at the remote end of a link
  @pad: Pad at the local end of the link
  Search for a remote pad connected to the given pad by iterating over all
  links originating or terminating at that pad until an enabled link is found.
  Our link setup implementation guarantees that the output fan-out will not be
  higher than one for the data pipelines, except for the links to the HGO and
  HGT that can be enabled in addition to a regular data link. When traversing
  outgoing links this function ignores HGO and HGT entities and should thus be
  used in place of the generic media_entity_remote_pad() function to traverse
  data pipelines.
  Return a pointer to the pad at the remote end of the first found enabled
  link, or NULL if no enabled link has been found.
 If we're the sink the source will never be an HGO or HGT. 
 If the sink isn't a subdevice it can't be an HGO or HGT. 
 -----------------------------------------------------------------------------
  Initialization
 Named UIF4 in the documentation 
 Named UIF5 in the documentation 
 Allocate and initialize pads. 
 Single-pad entities only have a sink. 
 Initialize the media entity. 
 Initialize the V4L2 subdev. 
	
	  Allocate the pad configuration to store formats and selection
	  rectangles.
 SPDX-License-Identifier: GPL-2.0+
  vsp1_lif.c  --  R-Car VSP1 LCD Controller Interface
  Copyright (C) 2013-2014 Renesas Electronics Corporation
  Contact: Laurent Pinchart (laurent.pinchart@ideasonboard.com)
 -----------------------------------------------------------------------------
  Device Access
 -----------------------------------------------------------------------------
  V4L2 Subdevice Operations
 -----------------------------------------------------------------------------
  VSP1 Entity Operations
	
	  On R-Car V3M the LIF0 buffer attribute register has to be set to a
	  non-default value to guarantee proper operation (otherwise artifacts
	  may appear on the output). The value required by the manual is not
	  explained but is likely a buffer size or threshold.
 -----------------------------------------------------------------------------
  Initialization and Cleanup
	
	  The LIF is never exposed to userspace, but media entity registration
	  requires a function to be set. Use PROC_VIDEO_PIXEL_FORMATTER just to
	  avoid triggering a WARN_ON(), the value won't be seen anywhere.
 SPDX-License-Identifier: GPL-2.0+
  vsp1_pipe.c  --  R-Car VSP1 Pipeline
  Copyright (C) 2013-2015 Renesas Electronics Corporation
  Contact: Laurent Pinchart (laurent.pinchart@ideasonboard.com)
 -----------------------------------------------------------------------------
  Helper Functions
  vsp1_get_format_info - Retrieve format information for a 4CC
  @vsp1: the VSP1 device
  @fourcc: the format 4CC
  Return a pointer to the format information structure corresponding to the
  given V4L2 format 4CC, or NULL if no corresponding format can be found.
 Special case, the VYUY and HSV formats are supported on Gen2 only. 
 -----------------------------------------------------------------------------
  Pipeline Management
 Must be called with the pipe irqlock held. 
		
		  When using display lists in continuous frame mode the only
		  way to stop the pipeline is to reset the hardware.
 Otherwise just request a stop and wait. 
	
	  If the DL commit raced with the frame end interrupt, the commit ends
	  up being postponed by one frame. The returned flags tell whether the
	  active frame was finished or postponed.
	
	  Regardless of frame completion we still need to notify the pipe
	  frame_end to account for vblank events.
  Propagate the alpha value through the pipeline.
  As the UDS has restricted scaling capabilities when the alpha component needs
  to be scaled, we disable alpha scaling when the UDS input has a fixed alpha
  value. The UDS then outputs a fixed alpha value which needs to be programmed
  from the input RPF alpha.
	
	  The BRU and BRS background color has a fixed alpha value set to 255,
	  the output alpha value is thus always equal to 255.
  Propagate the partition calculations through the pipeline
  Work backwards through the pipe, allowing each entity to update the partition
  parameters based on its configuration, and the entity connected to its
  source. Each entity must produce the partition required for the previous
  entity in the pipeline.
 SPDX-License-Identifier: GPL-2.0+
  vsp1_hgo.c  --  R-Car VSP1 Histogram Generator 1D
  Copyright (C) 2016 Renesas Electronics Corporation
  Contact: Laurent Pinchart (laurent.pinchart@ideasonboard.com)
 -----------------------------------------------------------------------------
  Device Access
 -----------------------------------------------------------------------------
  Frame End Handler
 -----------------------------------------------------------------------------
  Controls
 -----------------------------------------------------------------------------
  VSP1 Entity Operations
 -----------------------------------------------------------------------------
  Initialization and Cleanup
 Initialize the control handler. 
 Initialize the video device and queue for statistics data. 
 SPDX-License-Identifier: GPL-2.0+
  vsp1_video.c  --  R-Car VSP1 Video Node
  Copyright (C) 2013-2015 Renesas Electronics Corporation
  Contact: Laurent Pinchart (laurent.pinchart@ideasonboard.com)
 -----------------------------------------------------------------------------
  Helper functions
	
	  Backward compatibility: replace deprecated RGB formats by their XRGB
	  equivalent. This selects the format older userspace applications want
	  while still exposing the new format.
	
	  Retrieve format information and select the default format if the
	  requested format isn't supported.
 Align the width and height for YUV 4:2:2 and 4:2:0 formats. 
 Clamp the width and height. 
	
	  Compute and clamp the stride and image size. While not documented in
	  the datasheet, strides not aligned to a multiple of 128 bytes result
	  in image corruption.
 The second and third planes must have the same stride. 
 -----------------------------------------------------------------------------
  VSP1 Partition Algorithm support
  vsp1_video_calculate_partition - Calculate the active partition output window
  @pipe: the pipeline
  @partition: partition that will hold the calculated values
  @div_size: pre-determined maximum partition division size
  @index: partition index
	
	  Partitions are computed on the size before rotation, use the format
	  at the WPF sink.
 A single partition simply processes the output size in full. 
 Initialise the partition with sane starting conditions. 
	
	  We need to prevent the last partition from being smaller than the
	  minimum width of the hardware capabilities.
	 
	  If the modulus is less than half of the partition size,
	  the penultimate partition is reduced to half, which is added
	  to the final partition: |1234|1234|1234|12|341|
	  to prevent this:        |1234|1234|1234|1234|1|.
		
		  pipe->partitions is 1 based, whilst index is a 0 based index.
		  Normalise this locally.
 Halve the penultimate partition. 
 Increase the final partition. 
	
	  Partitions are computed on the size before rotation, use the format
	  at the WPF sink.
	
	  Only Gen3 hardware requires image partitioning, Gen2 will operate
	  with a single partition that covers the whole output.
 -----------------------------------------------------------------------------
  Pipeline Management
  vsp1_video_complete_buffer - Complete the current buffer
  @video: the video node
  This function completes the current buffer by filling its sequence number,
  time stamp and payload size, and hands it back to the videobuf core.
  Return the next queued buffer or NULL if the queue is empty.
	
	  If the VSP hardware isn't configured yet (which occurs either when
	  processing the first frame or after a system suspendresume), add the
	  cached stream configuration to the display list to perform a full
	  initialisation.
 Run the first partition. 
 Process consecutive partitions as necessary. 
		
		  An incomplete chain will still function, but output only
		  the partitions that had a dl available. The frame end
		  interrupt will be marked on the last dl in the chain.
 Complete, and commit the head display list. 
 M2M Pipelines should never call here with an incomplete frame. 
 Complete buffers on all video nodes. 
	
	  If a stop has been requested, mark the pipeline as stopped and
	  return. Otherwise restart the pipeline if ready.
	
	  The main data path doesn't include the HGO or HGT, use
	  vsp1_entity_remote_pad() to traverse the graph.
 We've reached a video node, that shouldn't have happened. 
		
		  A BRU or BRS is present in the pipeline, store its input pad
		  number in the input RPF for use when configuring the RPF.
 BRU and BRS can't be chained. 
 We've reached the WPF, we're done. 
 Ensure the branch has no loop. 
 UDS can't be chained. 
 Follow the source link, ignoring any HGO or HGT. 
 The last entity must be the output WPF. 
 Walk the graph to locate the entities and video nodes. 
 We need one output and at least one input. 
	
	  Follow links downstream for each input and make sure the graph
	  contains no loop and that all branches end at the output WPF.
	
	  Get a pipeline object for the video node. If a pipeline has already
	  been allocated just increment its reference count and return it.
	  Otherwise allocate a new pipeline and initialize it, it will be freed
	  when the last reference is released.
 -----------------------------------------------------------------------------
  videobuf2 Queue Operations
 Determine this pipelines sizes for image partitioning support. 
		
		  If a BRU or BRS is present in the pipeline before the UDS,
		  the alpha component doesn't need to be scaled as the BRU and
		  BRS output alpha value is fixed to 255. Otherwise we need to
		  scale the alpha component only when available at the input
		  RPF.
	
	  Compute and cache the stream configuration into a body. The cached
	  body will be added to the display list by vsp1_video_pipeline_run()
	  whenever the pipeline needs to be fully reconfigured.
 Remove all buffers from the IRQ queue. 
 Release any cached configuration from our output video. 
 Release our partition table allocation. 
	
	  vsp1_pipeline_ready() is not sufficient to establish that all streams
	  are prepared and the pipeline is configured, as multiple streams
	  can race through streamon with buffers already queued; Therefore we
	  don't even attempt to start the pipeline until the last stream has
	  called through here.
	
	  Clear the buffers ready flag to make sure the device won't be started
	  by a QBUF on the video node on the other side of the pipeline.
 Stop the pipeline. 
 -----------------------------------------------------------------------------
  V4L2 ioctls
	
	  Get a pipeline for the video node and start streaming on it. No link
	  touching an entity in the pipeline can be activated or deactivated
	  once streaming is started.
	
	  Verify that the configured format matches the output of the connected
	  subdev.
 Start the queue. 
 -----------------------------------------------------------------------------
  V4L2 File Operations
 -----------------------------------------------------------------------------
  Suspend and Resume
	
	  To avoid increasing the system suspend time needlessly, loop over the
	  pipelines twice, first to set them all to the stopping state, and
	  then to wait for the stop to complete.
 Resume all running pipelines. 
		
		  The hardware may have been reset during a suspend and will
		  need a full reconfiguration.
 -----------------------------------------------------------------------------
  Initialization and Cleanup
 Initialize the media entity... 
 ... and the format ... 
 ... and the video node... 
 ... and register the video device. 
 SPDX-License-Identifier: GPL-2.0+
  vsp1_brx.c  --  R-Car VSP1 Blend ROP Unit (BRU and BRS)
  Copyright (C) 2013 Renesas Corporation
  Contact: Laurent Pinchart (laurent.pinchart@ideasonboard.com)
 -----------------------------------------------------------------------------
  Device Access
 -----------------------------------------------------------------------------
  Controls
 -----------------------------------------------------------------------------
  V4L2 Subdevice Operations
  The BRx can't perform format conversion, all sink and source formats must be
  identical. We pick the format on the first sink pad (pad 0) and propagate it
  to all other pads.
 Default to YUV if the requested format is not supported. 
 The BRx can't perform format conversion. 
 Reset the compose rectangle. 
 Propagate the format code to all pads. 
	
	  The compose rectangle top left corner must be inside the output
	  frame.
	
	  Scaling isn't supported, the compose rectangle size must be identical
	  to the sink format size.
 -----------------------------------------------------------------------------
  VSP1 Entity Operations
	
	  The hardware is extremely flexible but we have no userspace API to
	  expose all the parameters, nor is it clear whether we would have use
	  cases for all the supported modes. Let's just hardcode the parameters
	  to sane default values for now.
	
	  Disable dithering and enable color data normalization unless the
	  format at the pipeline output is premultiplied.
	
	  Set the background position to cover the whole output image and
	  configure its color.
	
	  Route BRU input 1 as SRC input to the ROP unit and configure the ROP
	  unit with a NOP operation to make BRU input 1 available as the
	  BlendROP unit B SRC input. Only needed for BRU, the BRS has no ROP
	  unit.
		
		  Configure all BlendROP units corresponding to an enabled BRx
		  input for alpha blending. BlendROP units corresponding to
		  disabled BRx inputs are used in ROP NOP mode to ignore the
		  SRC input.
		
		  Select the virtual RPF as the BlendROP unit A DST input to
		  serve as a background color.
		
		  Route inputs 0 to 3 as SRC inputs to BlendROP units A to D
		  in that order. In the BRU the BlendROP unit B SRC is
		  hardwired to the ROP unit output, the corresponding register
		  bits must be set to 0. The BRS has no ROP unit and doesn't
		  need any special processing.
		
		  Hardcode the blending formula to
		 
		 	DSTc = DSTc  (1 - SRCa) + SRCc  SRCa
		 	DSTa = DSTa  (1 - SRCa) + SRCa
		 
		  when the SRC input isn't premultiplied, and to
		 
		 	DSTc = DSTc  (1 - SRCa) + SRCc
		 	DSTa = DSTa  (1 - SRCa) + SRCa
		 
		  otherwise.
 -----------------------------------------------------------------------------
  Initialization and Cleanup
 Initialize the control handler. 
 SPDX-License-Identifier: GPL-2.0+
  vsp1_uif.c  --  R-Car VSP1 User Logic Interface
  Copyright (C) 2017-2018 Laurent Pinchart
  Contact: Laurent Pinchart (laurent.pinchart@ideasonboard.com)
 -----------------------------------------------------------------------------
  Device Access
 -----------------------------------------------------------------------------
  V4L2 Subdevice Pad Operations
 The crop rectangle must be inside the input frame. 
 Store the crop rectangle. 
 -----------------------------------------------------------------------------
  V4L2 Subdevice Operations
 -----------------------------------------------------------------------------
  VSP1 Entity Operations
 On M3-W the horizontal coordinates are twice the register value. 
 -----------------------------------------------------------------------------
  Initialization and Cleanup
 sentinel  }
 The datasheet names the two UIF instances UIF4 and UIF5. 
 SPDX-License-Identifier: GPL-2.0+
  vsp1_clu.c  --  R-Car VSP1 Cubic Look-Up Table
  Copyright (C) 2015-2016 Renesas Electronics Corporation
  Contact: Laurent Pinchart (laurent.pinchart@ideasonboard.com)
 -----------------------------------------------------------------------------
  Device Access
 -----------------------------------------------------------------------------
  Controls
 -----------------------------------------------------------------------------
  V4L2 Subdevice Pad Operations
 -----------------------------------------------------------------------------
  V4L2 Subdevice Operations
 -----------------------------------------------------------------------------
  VSP1 Entity Operations
	
	  The yuv_mode can't be changed during streaming. Cache it internally
	  for future runtime configuration calls.
 2D mode can only be used with the YCbCr pixel encoding. 
 Release our local reference. 
 -----------------------------------------------------------------------------
  Initialization and Cleanup
	
	  Pre-allocate a body pool, with 3 bodies allowing a userspace update
	  before the hardware has committed a previous set of tables, handling
	  both the queued and pending dl entries. One extra entry is added to
	  the CLU_SIZE to allow for the VI6_CLU_ADDR header.
 Initialize the control handler. 
 SPDX-License-Identifier: GPL-2.0+
  vsp1_uds.c  --  R-Car VSP1 Up and Down Scaler
  Copyright (C) 2013-2014 Renesas Electronics Corporation
  Contact: Laurent Pinchart (laurent.pinchart@ideasonboard.com)
 -----------------------------------------------------------------------------
  Device Access
 -----------------------------------------------------------------------------
  Scaling Computation
  uds_output_size - Return the output size for an input size and scaling ratio
  @input: input size in pixels
  @ratio: scaling ratio in U4.12 fixed-point format
 Down-scaling 
 Up-scaling 
  uds_output_limits - Return the min and max output sizes for an input size
  @input: input size in pixels
  @minimum: minimum output size (returned)
  @maximum: maximum output size (returned)
  uds_passband_width - Return the passband filter width for a scaling ratio
  @ratio: scaling ratio in U4.12 fixed-point format
 Down-scaling 
 Up-scaling 
 TODO: This is an approximation that will need to be refined. 
 -----------------------------------------------------------------------------
  V4L2 Subdevice Pad Operations
 Default to YUV if the requested format is not supported. 
 The UDS scales but can't perform format conversion. 
 Propagate the format to the source pad. 
 -----------------------------------------------------------------------------
  V4L2 Subdevice Operations
 -----------------------------------------------------------------------------
  VSP1 Entity Operations
	
	  Multi-tap scaling can't be enabled along with alpha scaling when
	  scaling down with a factor lower than or equal to 12 in either
	  direction.
 Set the scaling ratios. 
 Input size clipping. 
 Output size clipping. 
	
	  The maximum width of the UDS is 304 pixels. These are input pixels
	  in the event of up-scaling, and output pixels in the event of
	  downscaling.
	 
	  To support overlapping partition windows we clamp at units of 256 and
	  the remaining pixels are reserved.
 -----------------------------------------------------------------------------
  Partition Algorithm Support
 Initialise the partition state. 
 -----------------------------------------------------------------------------
  Initialization and Cleanup
 SPDX-License-Identifier: GPL-2.0+
  vsp1_wpf.c  --  R-Car VSP1 Write Pixel Formatter
  Copyright (C) 2013-2014 Renesas Electronics Corporation
  Contact: Laurent Pinchart (laurent.pinchart@ideasonboard.com)
 -----------------------------------------------------------------------------
  Device Access
 -----------------------------------------------------------------------------
  Controls
	
	  Only consider the 0°180° fromto 90°270° modifications, the rest
	  is taken care of by the flipping configuration.
 Changing rotation isn't allowed when buffers are allocated. 
 Update the rotation. 
	
	  Compute the flip value resulting from all three controls, with
	  rotation by 180° flipping the image in both directions. Store the
	  result in the pending flip field for the next frame that will be
	  processed.
 Only WPF0 supports flipping. 
		
		  When horizontal flip is supported the WPF implements three
		  controls (horizontal flip, vertical flip and rotation).
		
		  When only vertical flip is supported the WPF implements a
		  single control (vertical flip).
 Otherwise flipping is not supported. 
 -----------------------------------------------------------------------------
  V4L2 Subdevice Core Operations
	
	  Write to registers directly when stopping the stream as there will be
	  no pipeline run to apply the display list.
 -----------------------------------------------------------------------------
  V4L2 Subdevice Operations
 -----------------------------------------------------------------------------
  VSP1 Entity Operations
 Format 
 Destination stride and byte swapping. 
	
	  Sources. If the pipeline has a single input and BRx is not used,
	  configure it as the master layer. Otherwise configure all
	  inputs as sub-layers and select the virtual RPF as the master
	  layer.
 Enable interrupts. 
	
	  Configure writeback for display pipelines (the wpf writeback flag is
	  never set for memory-to-memory pipelines). Start by adding a chained
	  display list to disable writeback after a single frame, and process
	  to enable writeback. If the display list allocation fails don't
	  enable writeback as we wouldn't be able to safely disable it,
	  resulting in possible memory corruption.
	
	  Cropping. The partition algorithm can split the image into
	  multiple slices.
	
	  For display pipelines without writeback enabled there's no memory
	  address to configure, return now.
	
	  Update the memory offsets based on flipping configuration.
	  The destination addresses point to the locations where the
	  VSP starts writing to memory, which can be any corner of the
	  image depending on the combination of flipping and rotation.
	
	  First take the partition left coordinate into account.
	  Compute the offset to order the partitions correctly on the
	  output based on whether flipping is enabled. Consider
	  horizontal flipping when rotation is disabled but vertical
	  flipping when rotation is enabled, as rotating the image
	  switches the horizontal and vertical directions. The offset
	  is applied horizontally or vertically accordingly.
		
		  When rotating the output (after rotation) image
		  height is equal to the partition width (before
		  rotation). Otherwise it is equal to the output
		  image height.
		
		  Compute the output coordinate. The partition
		  horizontal (left) offset becomes a vertical offset.
	
	  On Gen3 hardware the SPUVS bit has no effect on 3-planar
	  formats. Swap the U and V planes manually in that case.
	
	  Writeback operates in single-shot mode and lasts for a single frame,
	  reset the writeback flag to false for the next frame.
 -----------------------------------------------------------------------------
  Initialization and Cleanup
 Initialize the display list manager. 
 Initialize the control handler. 
 SPDX-License-Identifier: GPL-2.0+
  vsp1_hsit.c  --  R-Car VSP1 Hue Saturation value (Inverse) Transform
  Copyright (C) 2013 Renesas Corporation
  Contact: Laurent Pinchart (laurent.pinchart@ideasonboard.com)
 -----------------------------------------------------------------------------
  Device Access
 -----------------------------------------------------------------------------
  V4L2 Subdevice Operations
		
		  The HST and HSI output format code and resolution can't be
		  modified.
 Propagate the format to the source pad. 
 -----------------------------------------------------------------------------
  VSP1 Entity Operations
 -----------------------------------------------------------------------------
  Initialization and Cleanup
 SPDX-License-Identifier: GPL-2.0+
  vsp1_histo.c  --  R-Car VSP1 Histogram API
  Copyright (C) 2016 Renesas Electronics Corporation
  Copyright (C) 2016 Laurent Pinchart
  Contact: Laurent Pinchart (laurent.pinchart@ideasonboard.com)
 -----------------------------------------------------------------------------
  Buffer Operations
	
	  The pipeline pointer is guaranteed to be valid as this function is
	  called from the frame completion interrupt handler, which can only
	  occur when video streaming is active.
 -----------------------------------------------------------------------------
  videobuf2 Queue Operations
 Remove all buffers from the IRQ queue. 
 Wait for the buffer being read out (if any) to complete. 
 -----------------------------------------------------------------------------
  V4L2 Subdevice Operations
 The crop rectangle must be inside the input frame. 
 Set the crop rectangle and reset the compose rectangle. 
	
	  The compose rectangle is used to configure downscaling, the top left
	  corner is fixed to (0,0) and the size to 12 or 14 of the crop
	  rectangle.
	
	  Clamp the width and height to acceptable values first and then
	  compute the closest rounded dividing ratio.
	 
	  Ratio	Rounded ratio
	  --------------------------
	  [1.0 1.5[	1
	  [1.5 3.0[	2
	  [3.0 4.0]	4
	 
	  The rounded ratio can be computed using
	 
	  1 << (ceil(ratio  2)  3)
 -----------------------------------------------------------------------------
  V4L2 ioctls
 -----------------------------------------------------------------------------
  V4L2 File Operations
 Initialize the VSP entity... 
 ... and the media entity... 
 ... and the video node... 
 ... and the buffers queue... 
 ... and register the video device. 
 SPDX-License-Identifier: GPL-2.0+
  vsp1_dl.c  --  R-Car VSP1 Display List
  Copyright (C) 2015 Renesas Corporation
  Contact: Laurent Pinchart (laurent.pinchart@ideasonboard.com)
  struct vsp1_dl_ext_header - Extended display list header
  @padding: padding zero bytes for alignment
  @pre_ext_dl_num_cmd: number of pre-extended command bodies to parse
  @flags: enables or disables execution of the pre and post command
  @pre_ext_dl_plist: start address of pre-extended display list bodies
  @post_ext_dl_num_cmd: number of post-extended command bodies to parse
  @post_ext_dl_plist: start address of post-extended display list bodies
	
	  The datasheet represents flags as stored before pre_ext_dl_num_cmd,
	  expecting 32-bit accesses. The flags are appropriate to the whole
	  header, not just the pre_ext command, and thus warrant being
	  separated out. Due to byte ordering, and representing as 16 bit
	  values here, the flags must be positioned after the
	  pre_ext_dl_num_cmd.
  struct vsp1_pre_ext_dl_body - Pre Extended Display List Body
  @opcode: Extended display list command operation code
  @flags: Pre-extended command flags. These are specific to each command
  @address_set: Source address set pointer. Must have 16-byte alignment
  @reserved: Zero bits for alignment.
  struct vsp1_dl_body - Display list body
  @list: entry in the display list list of bodies
  @free: entry in the pool free body list
  @refcnt: reference tracking for the body
  @pool: pool to which this body belongs
  @entries: array of entries
  @dma: DMA address of the entries
  @size: size of the DMA memory in bytes
  @num_entries: number of stored entries
  @max_entries: number of entries available
  struct vsp1_dl_body_pool - display list body pool
  @dma: DMA address of the entries
  @size: size of the full DMA memory pool in bytes
  @mem: CPU memory pointer for the pool
  @bodies: Array of DLB structures for the pool
  @free: List of free DLB entries
  @lock: Protects the free list
  @vsp1: the VSP1 device
 DMA allocation 
 Body management 
  struct vsp1_dl_cmd_pool - Display List commands pool
  @dma: DMA address of the entries
  @size: size of the full DMA memory pool in bytes
  @mem: CPU memory pointer for the pool
  @cmds: Array of command structures for the pool
  @free: Free pool entries
  @lock: Protects the free list
  @vsp1: the VSP1 device
 DMA allocation 
  struct vsp1_dl_list - Display list
  @list: entry in the display list manager lists
  @dlm: the display list manager
  @header: display list header
  @extension: extended display list header. NULL for normal lists
  @dma: DMA address for the header
  @body0: first display list body
  @bodies: list of extra display list bodies
  @pre_cmd: pre command to be issued through extended dl header
  @post_cmd: post command to be issued through extended dl header
  @has_chain: if true, indicates that there's a partition chain
  @chain: entry in the display list partition chain
  @flags: display list flags, a combination of VSP1_DL_FRAME_END_
  struct vsp1_dl_manager - Display List manager
  @index: index of the related WPF
  @singleshot: execute the display list in single-shot mode
  @vsp1: the VSP1 device
  @lock: protects the free, active, queued, and pending lists
  @free: array of all free display lists
  @active: list currently being processed (loaded) by hardware
  @queued: list queued to the hardware (written to the DL registers)
  @pending: list waiting to be queued to the hardware
  @pool: body pool for the display list bodies
  @cmdpool: commands pool for extended display list
 -----------------------------------------------------------------------------
  Display List Body Management
  vsp1_dl_body_pool_create - Create a pool of bodies from a single allocation
  @vsp1: The VSP1 device
  @num_bodies: The number of bodies to allocate
  @num_entries: The maximum number of entries that a body can contain
  @extra_size: Extra allocation provided for the bodies
  Allocate a pool of display list bodies each with enough memory to contain the
  requested number of entries plus the @extra_size.
  Return a pointer to a pool on success or NULL if memory can't be allocated.
	
	  TODO: 'extra_size' is only used by vsp1_dlm_create(), to allocate
	  extra memory for the display list header. We need only one header per
	  display list, not per display list body, thus this allocation is
	  extraneous and should be reworked in the future.
  vsp1_dl_body_pool_destroy - Release a body pool
  @pool: The body pool
  Release all components of a pool allocation.
  vsp1_dl_body_get - Obtain a body from a pool
  @pool: The body pool
  Obtain a body from the pool without blocking.
  Returns a display list body or NULL if there are none available.
  vsp1_dl_body_put - Return a body back to its pool
  @dlb: The display list body
  Return a body back to the pool, and reset the num_entries to clear the list.
  vsp1_dl_body_write - Write a register to a display list body
  @dlb: The body
  @reg: The register address
  @data: The register value
  Write the given register and value to the display list body. The maximum
  number of entries that can be written in a body is specified when the body is
  allocated by vsp1_dl_body_alloc().
 -----------------------------------------------------------------------------
  Display List Extended Command Management
  vsp1_dl_cmd_pool_create - Create a pool of commands from a single allocation
  @vsp1: The VSP1 device
  @type: The command pool type
  @num_cmds: The number of commands to allocate
  Allocate a pool of commands each with enough memory to contain the private
  data of each command. The allocation sizes are dependent upon the command
  type.
  Return a pointer to the pool on success or NULL if memory can't be allocated.
 data_offset must be 16 byte aligned for DMA. 
		
		  TODO: Auto-disp can utilise more than one extended body
		  command per cmd.
 Reset flags, these mark data usage. 
 ----------------------------------------------------------------------------
  Display List Transaction Management
 Get a default body for our list. 
  vsp1_dl_list_get - Get a free display list
  @dlm: The display list manager
  Get a display list from the pool of free lists and return it.
  This function must be called without the display list manager lock held.
		
		  The display list chain must be initialised to ensure every
		  display list can assert list_empty() if it is not in a chain.
 This function must be called with the display list manager lock held.
	
	  Release any linked display-lists which were chained for a single
	  hardware operation.
	
	  body0 is reused as as an optimisation as presently every display list
	  has at least one body, thus we reinitialise the entries list.
  vsp1_dl_list_put - Release a display list
  @dl: The display list
  Release the display list and return it to the pool of free lists.
  Passing a NULL pointer to this function is safe, in that case no operation
  will be performed.
  vsp1_dl_list_get_body0 - Obtain the default body for the display list
  @dl: The display list
  Obtain a pointer to the internal display list body allowing this to be passed
  directly to configure operations.
  vsp1_dl_list_add_body - Add a body to the display list
  @dl: The display list
  @dlb: The body
  Add a display list body to a display list. Registers contained in bodies are
  processed after registers contained in the main display list, in the order in
  which bodies are added.
  Adding a body to a display list passes ownership of the body to the list. The
  caller retains its reference to the body when adding it to the display list,
  but is not allowed to add new entries to the body.
  The reference must be explicitly released by a call to vsp1_dl_body_put()
  when the body isn't needed anymore.
  vsp1_dl_list_add_chain - Add a display list to a chain
  @head: The head display list
  @dl: The new display list
  Add a display list to an existing display list chain. The chained lists
  will be automatically processed by the hardware without intervention from
  the CPU. A display list end interrupt will only complete after the last
  display list in the chain has completed processing.
  Adding a display list to a chain passes ownership of the display list to
  the head display list item. The chain is released when the head dl item is
  put back with __vsp1_dl_list_put().
	
	  Fill the header with the display list bodies addresses and sizes. The
	  address of the first body has already been filled when the display
	  list was allocated.
	
	  Enable the interrupt for the end of each frame. In continuous mode
	  chained lists are used with one list per frame, so enable the
	  interrupt for each list. In singleshot mode chained lists are used
	  to partition a single frame, so enable the interrupt for the last
	  list only.
	
	  In continuous mode enable auto-start for all lists, as the VSP must
	  loop on the same list until a new one is queued. In singleshot mode
	  enable auto-start for all lists but the last to chain processing of
	  partitions without software intervention.
		
		  If this is not the last display list in the chain, queue the
		  next item for automatic processing by the hardware.
		
		  if the display list manager works in continuous mode, the VSP
		  should loop over the display list continuously until
		  instructed to do otherwise.
	
	  Check whether the VSP1 has taken the update. The hardware indicates
	  this by clearing the UPDHDR bit in the CMD register.
	
	  Program the display list header address. If the hardware is idle
	  (single-shot mode or first frame in continuous mode) it will then be
	  started independently. If the hardware is operating, the
	  VI6_DL_HDR_REF_ADDR register will be updated with the display list
	  address.
	
	  If a previous display list has been queued to the hardware but not
	  processed yet, the VSP can start processing it at any time. In that
	  case we can't replace the queued list by the new one, as we could
	  race with the hardware. We thus mark the update as pending, it will
	  be queued up to the hardware by the frame end interrupt handler.
	 
	  If a display list is already pending we simply drop it as the new
	  display list is assumed to contain a more recent configuration. It is
	  an error if the already pending list has the
	  VSP1_DL_FRAME_END_INTERNAL flag set, as there is then a process
	  waiting for that list to complete. This shouldn't happen as the
	  waiting process should perform proper locking, but warn just in
	  case.
	
	  Pass the new display list to the hardware and mark it as queued. It
	  will become active when the hardware starts processing it.
	
	  When working in single-shot mode, the caller guarantees that the
	  hardware is idle at this point. Just commit the head display list
	  to hardware. Chained lists will be started automatically.
 Fill the header for the head and chained display lists. 
 -----------------------------------------------------------------------------
  Display List Manager
  vsp1_dlm_irq_frame_end - Display list handler for the frame end interrupt
  @dlm: the display list manager
  Return a set of flags that indicates display list completion status.
  The VSP1_DL_FRAME_END_COMPLETED flag indicates that the previous display list
  has completed at frame end. If the flag is not returned display list
  completion has been delayed by one frame because the display list commit
  raced with the frame end interrupt. The function always returns with the flag
  set in single-shot mode as display list processing is then not continuous and
  races never occur.
  The following flags are only supported for continuous mode.
  The VSP1_DL_FRAME_END_INTERNAL flag indicates that the display list that just
  became active had been queued with the internal notification flag.
  The VSP1_DL_FRAME_END_WRITEBACK flag indicates that the previously active
  display list had been queued with the writeback flag.
	
	  The mem-to-mem pipelines work in single-shot mode. No new display
	  list can be queued, we don't have to do anything.
	
	  If the commit operation raced with the interrupt and occurred after
	  the frame end event but before interrupt processing, the hardware
	  hasn't taken the update into account yet. We have to skip one frame
	  and retry.
	
	  Progressive streams report only TOP fields. If we have a BOTTOM
	  field, we are interlaced, and expect the frame to complete on the
	  next frame end interrupt.
	
	  If the active display list has the writeback flag set, the frame
	  completion marks the end of the writeback capture. Return the
	  VSP1_DL_FRAME_END_WRITEBACK flag and reset the display list's
	  writeback flag.
	
	  The device starts processing the queued display list right after the
	  frame end interrupt. The display list thus becomes active.
	
	  Now that the VSP has started processing the queued display list, we
	  can queue the pending display list to the hardware if one has been
	  prepared.
 Hardware Setup 
	
	  Initialize the display list body and allocate DMA memory for the body
	  and the header. Both are allocated together to avoid memory
	  fragmentation, with the header located right after the body in
	  memory. An extra body is allocated on top of the prealloc to account
	  for the cached body used by the vsp1_pipeline object.
 The extended header immediately follows the header. 
 SPDX-License-Identifier: GPL-2.0+
  vsp1_hgt.c  --  R-Car VSP1 Histogram Generator 2D
  Copyright (C) 2016 Renesas Electronics Corporation
  Contact: Niklas Söderlund (niklas.soderlund@ragnatech.se)
 -----------------------------------------------------------------------------
  Device Access
 -----------------------------------------------------------------------------
  Frame End Handler
 -----------------------------------------------------------------------------
  Controls
	
	  The hardware has constraints on the hue area boundaries beyond the
	  control min, max and step. The values must match one of the following
	  expressions.
	 
	  0L <= 0U <= 1L <= 1U <= 2L <= 2U <= 3L <= 3U <= 4L <= 4U <= 5L <= 5U
	  0U <= 1L <= 1U <= 2L <= 2U <= 3L <= 3U <= 4L <= 4U <= 5L <= 5U <= 0L
	 
	  Start by verifying the common part...
 ... and handle 0L separately. 
 -----------------------------------------------------------------------------
  VSP1 Entity Operations
 -----------------------------------------------------------------------------
  Initialization and Cleanup
 Initialize the control handler. 
 Initialize the video device and queue for statistics data. 
 SPDX-License-Identifier: GPL-2.0+
  vsp1_lut.c  --  R-Car VSP1 Look-Up Table
  Copyright (C) 2013 Renesas Corporation
  Contact: Laurent Pinchart (laurent.pinchart@ideasonboard.com)
 -----------------------------------------------------------------------------
  Device Access
 -----------------------------------------------------------------------------
  Controls
 -----------------------------------------------------------------------------
  V4L2 Subdevice Pad Operations
 -----------------------------------------------------------------------------
  V4L2 Subdevice Operations
 -----------------------------------------------------------------------------
  VSP1 Entity Operations
 Release our local reference. 
 -----------------------------------------------------------------------------
  Initialization and Cleanup
	
	  Pre-allocate a body pool, with 3 bodies allowing a userspace update
	  before the hardware has committed a previous set of tables, handling
	  both the queued and pending dl entries.
 Initialize the control handler. 
 SPDX-License-Identifier: GPL-2.0+
  vsp1_drm.c  --  R-Car VSP1 DRMKMS Interface
  Copyright (C) 2015 Renesas Electronics Corporation
  Contact: Laurent Pinchart (laurent.pinchart@ideasonboard.com)
 -----------------------------------------------------------------------------
  Interrupt Handling
 -----------------------------------------------------------------------------
  Pipeline Configuration
  Insert the UIF in the pipeline between the prev and next entities. If no UIF
  is available connect the two entities directly.
		
		  If there's no UIF to be inserted, connect the previous and
		  next entities directly.
	
	  The UIF doesn't mangle the format between its sink and source pads,
	  so there is no need to retrieve the format on its source pad.
 Setup one RPF and the connected BRx sink pad. 
	
	  Configure the format on the RPF sink pad and propagate it up to the
	  BRx sink pad.
	
	  RPF source, hardcode the format to ARGB8888 to turn on format
	  conversion if needed.
 Insert and configure the UIF if available. 
 BRx sink, propagate the format from the RPF source. 
 Setup the BRx source pad. 
	
	  Pick a BRx:
	  - If we need more than two inputs, use the BRU.
	  - Otherwise, if we are not forced to release our BRx, keep it.
	  - Else, use any free BRx (randomly starting with the BRU).
 Switch BRx if needed. 
 Release our BRx if we have one. 
			
			  The BRx might be acquired by the other pipeline in
			  the next step. We must thus remove it from the list
			  of entities for this pipeline. The other pipeline's
			  hardware configuration will reconfigure the BRx
			  routing.
			 
			  However, if the other pipeline doesn't acquire our
			  BRx, we need to keep it in the list, otherwise the
			  hardware configuration step won't disconnect it from
			  the pipeline. To solve this, store the released BRx
			  pointer to add it back to the list of entities later
			  if it isn't acquired by the other pipeline.
		
		  If the BRx we need is in use, force the owner pipeline to
		  switch to the other BRx and wait until the switch completes.
		
		  If the BRx we have released previously hasn't been acquired
		  by the other pipeline, add it back to the entities list (with
		  the pipe pointer NULL) to let vsp1_du_pipeline_configure()
		  disconnect it from the hardware pipeline.
 Add the BRx to the pipeline. 
	
	  Configure the format on the BRx source and verify that it matches the
	  requested format. We don't set the media bus code as it is configured
	  on the BRx sink pad 0 and propagated inside the entity, not on the
	  source pad.
 Setup the input side of the pipeline (RPFs and BRx). 
 Count the number of enabled inputs and sort them by Z-order. 
 Insert the RPF in the sorted RPFs array. 
	
	  Setup the BRx. This must be done before setting up the RPF input
	  pipelines as the BRx sink compose rectangles depend on the BRx source
	  format.
 Setup the RPF input pipeline for every enabled input. 
 Insert and configure the UIF at the BRx output if available. 
 If the DRM pipe does not have a UIF there is nothing we can update. 
	
	  If the UIF is not in use schedule it for removal by setting its pipe
	  pointer to NULL, vsp1_du_pipeline_configure() will remove it from the
	  hardware pipeline and from the pipeline's list of entities. Otherwise
	  make sure it is present in the pipeline's list of entities if it
	  wasn't already.
 Setup the output side of the pipeline (WPF and LIF). 
	
	  Verify that the format at the output of the pipeline matches the
	  requested frame size and media bus code.
 Configure all entities in the pipeline. 
 Disconnect unused entities from the pipeline. 
	
	  Only formats with three planes can affect the chroma planes pitch.
	  All formats with two planes have a horizontal subsampling value of 2,
	  but combine U and V in a single chroma plane, which thus results in
	  the luma plane and chroma plane having the same pitch.
 -----------------------------------------------------------------------------
  DU Driver API
  vsp1_du_setup_lif - Setup the output part of the VSP pipeline
  @dev: the VSP device
  @pipe_index: the DRM pipeline index
  @cfg: the LIF configuration
  Configure the output part of VSP DRM pipeline for the given frame @cfg.width
  and @cfg.height. This sets up formats on the BRx source pad, the WPF sink and
  source pads, and the LIF sink pad.
  The @pipe_index argument selects which DRM pipeline to setup. The number of
  available pipelines depend on the VSP instance.
  As the media bus code on the blend unit source pad is conditioned by the
  configuration of its sink 0 pad, we also set up the formats on all blend unit
  sinks, even if the configuration will be overwritten later by
  vsp1_du_setup_rpf(). This ensures that the blend unit configuration is set to
  a well defined state.
  Return 0 on success or a negative error code on failure.
		
		  NULL configuration means the CRTC is being disabled, stop
		  the pipeline and turn the light off.
			
			  Remove the RPF from the pipe and the list of BRx
			  inputs.
 Setup formats through the pipeline. 
 Enable the VSP1. 
	
	  Register a callback to allow us to notify the DRM driver of frame
	  completion events.
 Disable the display interrupts. 
 Configure all entities in the pipeline. 
 Start the pipeline. 
  vsp1_du_atomic_begin - Prepare for an atomic update
  @dev: the VSP device
  @pipe_index: the DRM pipeline index
  vsp1_du_atomic_update - Setup one RPF input of the VSP pipeline
  @dev: the VSP device
  @pipe_index: the DRM pipeline index
  @rpf_index: index of the RPF to setup (0-based)
  @cfg: the RPF configuration
  Configure the VSP to perform image composition through RPF @rpf_index as
  described by the @cfg configuration. The image to compose is referenced by
  @cfg.mem and composed using the @cfg.src crop rectangle and the @cfg.dst
  composition rectangle. The Z-order is configurable with higher @zpos values
  displayed on top.
  If the @cfg configuration is NULL, the RPF will be disabled. Calling the
  function on a disabled RPF is allowed.
  Image format as stored in memory is expressed as a V4L2 @cfg.pixelformat
  value. The memory pitch is configurable to allow for padding at end of lines,
  or simply for images that extend beyond the crop rectangle boundaries. The
  @cfg.pitch value is expressed in bytes and applies to all planes for
  multiplanar formats.
  The source memory buffer is referenced by the DMA address of its planes in
  the @cfg.mem array. Up to two planes are supported. The second plane DMA
  address is ignored for formats using a single plane.
  This function isn't reentrant, the caller needs to serialize calls.
  Return 0 on success or a negative error code on failure.
		
		  Remove the RPF from the pipeline's inputs. Keep it in the
		  pipeline's entity list to let vsp1_du_pipeline_configure()
		  remove it from the hardware pipeline.
	
	  Store the format, stride, memory buffer address, crop and compose
	  rectangles and Z-order position and for the input.
  vsp1_du_atomic_flush - Commit an atomic update
  @dev: the VSP device
  @pipe_index: the DRM pipeline index
  @cfg: atomic pipe configuration
	
	  As all the buffers allocated by the DU driver are coherent, we can
	  skip cache sync. This will need to be revisited when support for
	  non-coherent buffers will be added to the DU driver.
 -----------------------------------------------------------------------------
  Initialization
 Create one DRM pipeline per LIF. 
		
		  The output side of the DRM pipeline is static, add the
		  corresponding entities manually.
		
		  CRC computation is initially disabled, don't add the UIF to
		  the pipeline.
 Disable all RPFs initially. 
 SPDX-License-Identifier: GPL-2.0+
  vsp1_rwpf.c  --  R-Car VSP1 Read and Write Pixel Formatters
  Copyright (C) 2013-2014 Renesas Electronics Corporation
  Contact: Laurent Pinchart (laurent.pinchart@ideasonboard.com)
 -----------------------------------------------------------------------------
  V4L2 Subdevice Pad Operations
 Default to YUV if the requested format is not supported. 
		
		  The RWPF performs format conversion but can't scale, only the
		  format code can be changed on the source pad.
 Update the sink crop rectangle. 
 Propagate the format to the source pad. 
	
	  Cropping is only supported on the RPF and is implemented on the sink
	  pad.
	
	  Cropping is only supported on the RPF and is implemented on the sink
	  pad.
 Make sure the crop rectangle is entirely contained in the image. 
	
	  Restrict the crop rectangle coordinates to multiples of 2 to avoid
	  shifting the color plane.
 Propagate the format to the source pad. 
 -----------------------------------------------------------------------------
  Controls
 SPDX-License-Identifier: GPL-2.0+
  vsp1_sru.c  --  R-Car VSP1 Super Resolution Unit
  Copyright (C) 2013 Renesas Corporation
  Contact: Laurent Pinchart (laurent.pinchart@ideasonboard.com)
 -----------------------------------------------------------------------------
  Device Access
 -----------------------------------------------------------------------------
  Controls
 -----------------------------------------------------------------------------
  V4L2 Subdevice Operations
 Default to YUV if the requested format is not supported. 
 The SRU can't perform format conversion. 
		
		  We can upscale by 2 in both direction, but not independently.
		  Compare the input and output rectangles areas (avoiding
		  integer overflows on the output): if the requested output
		  area is larger than 1.5^2 the input area upscale by two,
		  otherwise don't scale.
 Propagate the format to the source pad. 
 -----------------------------------------------------------------------------
  VSP1 Entity Operations
	
	  The maximum input width of the SRU is 288 input pixels, but 32
	  pixels are reserved to support overlapping partition windows when
	  scaling.
 Adapt if SRUx2 is enabled. 
 -----------------------------------------------------------------------------
  Initialization and Cleanup
 Initialize the control handler. 
 SPDX-License-Identifier: GPL-2.0+
  vsp1_rpf.c  --  R-Car VSP1 Read Pixel Formatter
  Copyright (C) 2013-2014 Renesas Electronics Corporation
  Contact: Laurent Pinchart (laurent.pinchart@ideasonboard.com)
 Pre extended display list command data structure. 
 -----------------------------------------------------------------------------
  Device Access
 -----------------------------------------------------------------------------
  V4L2 Subdevice Operations
 -----------------------------------------------------------------------------
  VSP1 Entity Operations
 Stride 
	
	  pstride has both STRIDE_Y and STRIDE_C, but multiplying the whole
	  of pstride by 2 is conveniently OK here as we are multiplying both
	  values.
 Format 
 Output location. 
	
	  On Gen2 use the alpha channel (extended to 8 bits) when available or
	  a fixed alpha value set through the V4L2_CID_ALPHA_COMPONENT control
	  otherwise.
	 
	  The Gen3 RPF has extended alpha capability and can both multiply the
	  alpha channel by a fixed global alpha value, and multiply the pixel
	  components to convert the input to premultiplied alpha.
	 
	  As alpha premultiplication is available in the BRx for both Gen2 and
	  Gen3 we handle it there and use the Gen3 alpha multiplier for global
	  alpha multiplication only. This however prevents conversion to
	  premultiplied alpha if no BRx is present in the pipeline. If that use
	  case turns out to be useful we will revisit the implementation (for
	  Gen3 only).
	 
	  We enable alpha multiplication on Gen3 using the fixed alpha value
	  set through the V4L2_CID_ALPHA_COMPONENT control when the input
	  contains an alpha channel. On Gen2 the global alpha is ignored in
	  that case.
	 
	  In all cases, disable color keying.
			
			  When the input contains an alpha channel enable the
			  alpha multiplier. If the input is premultiplied we
			  need to multiply both the alpha channel and the pixel
			  components by the global alpha value to keep them
			  premultiplied. Otherwise multiply the alpha channel
			  only.
			
			  When the input doesn't contain an alpha channel the
			  global alpha value is applied in the unpacking unit,
			  the alpha multiplier isn't needed and must be
			  disabled.
 Re-index our auto_fld to match the current RPF. 
	
	  Source size and crop offsets.
	 
	  The crop offsets correspond to the location of the crop
	  rectangle top left corner in the plane buffer. Only two
	  offsets are needed, as planes 2 and 3 always have identical
	  strides.
	
	  Partition Algorithm Control
	 
	  The partition algorithm can split this frame into multiple
	  slices. We must scale our partition window based on the pipe
	  configuration to match the destination partition window.
	  To achieve this, we adjust our crop to provide a 'sub-crop'
	  matching the expected partition window. Only 'left' and
	  'width' need to be adjusted.
	
	  On Gen3 hardware the SPUVS bit has no effect on 3-planar
	  formats. Swap the U and V planes manually in that case.
	
	  Interlaced pipelines will use the extended pre-cmd to process
	  SRCM_ADDR_{Y,C0,C1}.
 -----------------------------------------------------------------------------
  Initialization and Cleanup
 Initialize the control handler. 
 SPDX-License-Identifier: GPL-2.0+
  vsp1_drv.c  --  R-Car VSP1 Driver
  Copyright (C) 2013-2015 Renesas Electronics Corporation
  Contact: Laurent Pinchart (laurent.pinchart@ideasonboard.com)
 -----------------------------------------------------------------------------
  Interrupt Handling
 -----------------------------------------------------------------------------
  Entities
  vsp1_create_sink_links - Create links from all sources to the given sink
  This function creates media links from all valid sources to the given sink
  pad. Links that would be invalid according to the VSP1 hardware capabilities
  are skipped. Those include all links
  - from a UDS to a UDS (UDS entities can't be chained)
  - from an entity to itself (no loops are allowed)
  Furthermore, the BRS can't be connected to histogram generators, but no
  special check is currently needed as all VSP instances that include a BRS
  have no histogram generator.
		
		  Connect the video device to the WPF. All connections are
		  immutable.
	
	  Don't perform link validation when the userspace API is disabled as
	  the pipeline is configured internally by the driver in that case, and
	  its configuration can thus be trusted.
 Instantiate all the entities. 
	
	  The LIFs are only supported when used in conjunction with the DU, in
	  which case the userspace API is disabled. If the userspace API is
	  enabled skip the LIFs, even when present.
 Register all subdevs. 
	
	  Create links and register subdev nodes if the userspace API is
	  enabled or initialize the DRM pipeline otherwise.
 Reset any channel that might be running. 
  vsp1_device_get - Acquire the VSP1 device
  Make sure the device is not suspended and initialize it if needed.
  Return 0 on success or a negative error code otherwise.
  vsp1_device_put - Release the VSP1 device
  Decrement the VSP1 reference count and cleanup the device if the last
  reference is released.
 -----------------------------------------------------------------------------
  Power Management
	
	  When used as part of a display pipeline, the VSP is stopped and
	  restarted explicitly by the DU.
	
	  When used as part of a display pipeline, the VSP is stopped and
	  restarted explicitly by the DU.
 -----------------------------------------------------------------------------
  Platform Driver
 IO and IRQ resources (clock managed by the clock PM domain). 
 FCP (optional). 
		
		  When the FCP is present, it handles all bus master accesses
		  for the VSP and must thus be used in place of the VSP device
		  to map DMA buffers.
 Configure device parameters based on the version register. 
 Instantiate entities. 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2016 MediaTek Inc.
  Author: Ming Hsiu Tsai <minghsiu.tsai@mediatek.com>
          Rick Chang <rick.chang@mediatek.com>
          Xia Jiang <xia.jiang@mediatek.com>
 Source size must be aligned to 128 
 other fourcc 
	
	  STREAMOFF is an acknowledgment for source change event.
	  Before STREAMOFF, we still have to return the old resolution and
	  subsampling. Update capture queue when the stream is off.
	
	  Resetting the hardware every frame is to ensure that all the
	  registers are cleared. This is a hardware requirement.
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2016 MediaTek Inc.
  Author: Ming Hsiu Tsai <minghsiu.tsai@mediatek.com>
          Rick Chang <rick.chang@mediatek.com>
 length 
 precision 
 sampling 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2016 MediaTek Inc.
  Author: Ming Hsiu Tsai <minghsiu.tsai@mediatek.com>
          Rick Chang <rick.chang@mediatek.com>
 output format is 420422 
 They must be equal in frame mode. 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2019 MediaTek Inc.
  Author: Xia Jiang <xia.jiang@mediatek.com>
	    
	      Total 8 x 8 block number of luma and chroma.
	      The number of blocks is counted from 0.
 4:2:0 
 4:2:2 
 SPDX-License-Identifier: GPL-2.0
  V4L2 driver for the JPEG encoderdecoder from i.MX8QXPi.MX8QM application
  processors.
  The multi-planar buffers API is used.
  Baseline and extended sequential jpeg decoding is supported.
  Progressive jpeg decoding is not supported by the IP.
  Supports encode and decode of various formats:
      YUV444, YUV422, YUV420, RGB, ARGB, Gray
  YUV420 is the only multi-planar format supported.
  Minimum resolution is 64 x 64, maximum 8192 x 8192.
  To achieve 8192 x 8192, modify in defconfig: CONFIG_CMA_SIZE_MBYTES=320
  The alignment requirements for the resolution depend on the format,
  multiple of 16 resolutions should work for all formats.
  Special workarounds are made in the driver to support NV12 1080p.
  When decoding, the driver detects image resolution and pixel format
  from the jpeg stream, by parsing the jpeg markers.
  The IP has 4 slots available for context switching, but only slot 0
  was fully tested to work. Context switching is not used by the driver.
  Each driver instance (context) allocates a slot for itself, but this
  is postponed until device_run, to allow unlimited opens.
  The driver submits jobs to the IP by setting up a descriptor for the
  used slot, and then validating it. The encoder has an additional descriptor
  for the configuration phase. The driver expects FRM_DONE interrupt from
  IP to mark the job as finished.
  The decoder IP has some limitations regarding the component ID's,
  but the driver works around this by replacing them in the jpeg stream.
  A module parameter is available for debug purpose (jpeg_tracing), to enable
  it, enable dynamic debug for this module and:
  echo 1 > sysmodulemxc_jpeg_encdecparametersjpeg_tracing
  This is inspired by the driversmediaplatforms5p-jpeg driver
  Copyright 2018-2019 NXP
RGBRGB packed format
 ARGBARGB packed format 
 1st plane = Y, 2nd plane = UV 
 6 bytes (4Y + UV) for 4 pixels 
 1 plane Y, 1 plane UV interleaved 
 YUYV 
 YUVYUV 
 Gray (Y8Y12) or Single Comp 
  default configuration stream, 64x64 yuv422
  split by JPEG marker, so it's easier to modify & use
 common v4l buffer stuff -- must be first 
 mxc-jpeg specific 
 index-th format of searched type found ? 
			 Correct type but haven't reached our index yet,
			  just increment per-type index
 Format not found 
 >=n when there are no more free slots 
 already allocated, reuse it 
 allocate descriptor for decodingencoding phase 
 allocate descriptor for configuration phase (encoder only) 
 allocate configuration stream 
 free descriptor for decodingencoding phase 
 free descriptor for encoder configuration phase  decoder DHT 
 free configuration stream 
 soft reset only resets internal state, not registers 
 clear all interrupts 
 TODO investigate when adding multi-instance support 
 w1c 
 short preview of the results 
 unused, but don't free 
 TODO allow 812 bit precision
 not swaped 
 SOS ignorable bytes, not so ignorable after all 
 not swaped 
 skip marker ID 
 skip marker ID 
 setup the decoding descriptor 
 end of chain 
 clear image format 
 validate the decoding descriptor 
	
	  if a default huffman table is needed, use the config descriptor to
	  inject a DHT, by chaining it before the decoding descriptor
 validate the configuration descriptor 
 chain the config descriptor with the encoding descriptor 
 no output expected 
 end of chain 
 use adjusted resolution for CAST IP job 
 validate the configuration descriptor 
 start config phase 
 No more src bufs, notify app EOS 
 will send EOS later
 No more src bufs, notify app EOS 
 will send EOS later
 Handle CREATE_BUFS situation - nplanes != 0 
 Handle REQBUFS situation 
 Release all active buffers 
	
	  there's a limitation in the IP that the component IDs must be
	  between 0..4, if they are not, let's patch them
 patch all comp IDs if at least one is invalid 
	
	  If the transform flag from APP14 marker is 0, images that are
	  encoded with 3 components have RGB colorspace, see Recommendation
	  ITU-T T.872 chapter 6.5.3 APP14 marker segment for colour encoding
 Bytes distance between the leftmost pixels in two adjacent lines 
 bytesperline unused for compressed formats 
		 When the image format is planar the bytesperline value
		  applies to the first plane and is divided by the same factor
		  as the width field for the other planes
 single plane formats 
 if no sizeimage from user, assume worst jpeg compression 
 jpeg stream size must be multiple of 1K 
 if DHT marker present, no need to inject default one 
 check and, if necessary, patch component IDs
	
	  set-up the capture queue with the pixelformat and resolution
	  detected from the jpeg output stream
	
	  align up the resolution for CAST IP,
	  but leave the buffer resolution unchanged
 adjust up 
 adjust up 
 setup bytesperlinesizeimage for capture queue 
	
	  if the CAPTURE format was updated with new values, regardless of
	  whether they match the values set by the client or not, signal
	  a source change event
 for V4L2_BUF_TYPE_VIDEO_OUTPUT_MPLANE 
 keep old userspace apps working 
 slot not allocated yet 
	
	  use MXC_JPEG_H_ALIGN instead of fmt->v_align, for vertical
	  alignment, to loosen up the alignment to multiple of 8,
	  otherwise NV12-1080p fails as 1080 is not a multiple of 16
 adjust downwards
 adjust downwards
 negotiate the width 
 negotiate the height 
 get user input into the tmp_q 
 calculate bytesperline & sizeimage into the tmp_q 
 adjust user format according to our calculations 
 fix colorspace information to sRGB for both output & capture 
	
	  this hardware does not change the range of the samples
	  but since inside JPEG the YUV quantization is full-range,
	  this driver will always use full-range for the raw frames, too
		
		  align up the resolution for CAST IP,
		  but leave the buffer resolution unchanged
 adjust upwards 
 adjust upwards 
		
		  align down the resolution for CAST IP,
		  but leave the buffer resolution unchanged
 adjust downwards
 adjust downwards
 fix colorspace information to sRGB for both output & capture 
 No more src bufs, notify app EOS 
 Get clocks 
 v4l2 
 lock for ioctl serialization 
 SPDX-License-Identifier: GPL-2.0
  i.MX8QXPi.MX8QM JPEG encoderdecoder v4l2 driver
  Copyright 2018-2019 NXP
	
	  engine soft reset, internal state machine reset
	  this will not reset registers, however, it seems
	  the registers may remain inconsistent with the internal state
	  so, on purpose, at least let GLB_CTRL bits clear after this reset
	
	  "Config_Mode" enabled, "Config_Mode auto clear enabled",
 all markers and segments 
 quality factor 
	
	  "GO" enabled, "GO bit auto clear" enabled
 clear 
 set 
 SPDX-License-Identifier: GPL-2.0-or-later
  Coda multi-standard codec IP - BIT processor functions
  Copyright (C) 2012 Vista Silicon S.L.
     Javier Martin, <javier.martin@vista-silicon.com>
     Xavier Duret
  Copyright (C) 2012-2014 Philipp Zabel, Pengutronix
 0.75  32768 
 Restore context related registers to CODA 
		
		  Add padding after the first buffer, if it is too small to be
		  fetched by the CODA, by repeating the headers. Without
		  repeated headers, or the first frame already queued, decoder
		  sequence initialization fails with error code 0x2000 on i.MX6
		  or error code 0x1 on i.MX51.
 Add padding before the first buffer, if it is too small 
 Sync read pointer to device 
 Set the stream-end flag after the last buffer is queued 
		
		  Only queue two JPEGs into the bitstream buffer to keep
		  latency low. We need at least one complete buffer and the
		  header of another buffer (for prescan) in the bitstream.
			
			  If we managed to fill in at least a full reorder
			  window of buffers (num_internal_frames is a
			  conservative estimate for this) and the bitstream
			  prefetcher has at least 2 256 bytes periods beyond
			  the first buffer to fetch, we can safely stop queuing
			  in order to limit the decoder drain latency.
 Drop frames that do not startend with a SOIEOI markers 
 Dump empty buffers 
 Buffer start position 
			
			  Source buffer is queued in the bitstream ringbuffer;
			  queue the timestamp and mark source buffer as done
 If this context is currently running, update the hardware flag 
 Allocate frame buffers 
 Add space for mvcol buffers 
 Register frame buffers in the parameter buffer 
 Start addresses of Y, Cb, Cr planes 
 Packed 20-bit MSB of base addresses 
 YYYYYCCC, CCyyyyyc, cccc.... 
 mvcol buffer for h.264 and mpeg4 
 worst case slice size 
 CODA_DX6 
 Prioritize in case IRAM is too small for everything 
 Only H.264BP and H.263P3 are considered 
 OVL and BTP disabled for encoder 
 OVL and BTP unused as there is no VC1 support yet 
 TODO - Enabling these causes picture errors on CODA7541 
 fw 1.4.50 
 fw 13.4.29 
 Check we are compatible with the loaded firmware 
 Luma 2x0 page, 2x6 cache, chroma 2x0 page, 2x4 cache size 
 Luma 0x2 page, 4x4 cache, chroma 0x2 page, 4x3 cache size 
  Encoder context operations
 Configure the coda 
 Could set rotation here if needed 
	
	  slice mode and GOP size registers are used for thumb sizeoffset
	  in JPEG mode
 Rate control enabled 
 disable autoskip 
 FIXME 
 Save stream headers 
		
		  Get SPS in the first frame and copy it to an
		  intermediate buffer.
		
		  If visible width or height are not aligned to macroblock
		  size, the crop_right and crop_bottom SPS fields must be set
		  to the difference between visible and coded size.  This is
		  only supported by CODA960 firmware. All others do not allow
		  writing frame cropping parameters, so we have to manually
		  fix up the SPS RBSP (Sequence Parameter Set Raw Byte
		  Sequence Payload) ourselves.
		
		  Get PPS in the first frame and copy it to an
		  intermediate buffer.
		
		  Length of H.264 headers is variable and thus it might not be
		  aligned for the coda to append the encoded frame. In that is
		  the case a filler NAL must be added to header 2.
		
		  Get VOS in the first frame and copy it to an
		  intermediate buffer
 No more formats need to save headers at the moment 
	
	  Workaround coda firmware BUG that only marks the first
	  frame as IDR. This is a problem for some decoders that can't
	  recover when a frame is lost.
	
	  Copy headers in front of the first frame and forced I frames for
	  H.264 only. In MPEG4 they are already copied by the CODA.
 submit 
FIXME: 0, CODA9_CMD_ENC_PIC_SRC_INDEX);
 After streamoff on the output side, set stream end flag 
	
	  Lock to make sure that an encoder stop command running in parallel
	  will either already have marked src_buf as last, or it will wake up
	  the capture queue after the buffers are returned.
 Get results from the coda 
 Calculate bytesused field 
	
	  FIXME: Sometimes h.264 encoding fails with 8-byte sequences missing
	  from the output stream after the h.264 decoder has run. Resetting the
	  hardware after the decoder has finished seems to help.
  Decoder context operations
 Baseline profile does not support reordering 
	
	  All metas that end at or before the RD pointer (fifo out),
	  are now consumed by the VPU and should be released.
 Start decoding 
 Update coda bitstream read and write pointers from kfifo 
 Update kfifo out pointer from coda bitstream read pointer 
	
	  After updating the read pointer, we need to check if
	  any metas are consumed and should be released.
	
	  If the VDOA is used, the decoder needs one additional frame,
	  because the frames are freed when the next frame is decoded.
	  Otherwise there are visible errors in the decoded frames (green
	  regions in displayed frames) and a broken order of frames (earlier
	  frames are sporadically displayed after later frames).
 Tell the decoder how many frame buffers we allocated. 
 Set secondary AXI IRAM 
 Try to copy source buffer contents into the bitstream ringbuffer 
 Run coda_start_decoding (again) if not yet initialized 
			
			  It was previously assumed that the CODA960 has an
			  internal list of 64 buffer entries that contains
			  both the registered internal frame buffers as well
			  as the rotator buffer output, and that the ROT_INDEX
			  register must be set to a value between the last
			  internal frame buffers' index and 64.
			  At least on firmware version 3.1.1 it turns out that
			  setting ROT_INDEX to any value >= 32 causes CODA
			  hangups that it can not recover from with the SRC VPU
			  reset.
			  It does appear to work however, to just set it to a
			  fixed value in the [ctx->num_internal_frames, 31]
			  range, for example CODA_MAX_FRAMEBUFFERS.
 TBD 
 'hardcode to use interrupt disable mode'? 
 If this is the last buffer in the bitstream, add padding 
 Pad to multiple of 256 and then add 256 more 
 Clear decode success flag 
 Clear error return value 
 Update kfifo out pointer from coda bitstream read pointer 
	
	  in stream-end mode, the read pointer can overshoot the write pointer
	  by up to 512 bytes
 frame crop information 
 Keep current crop information 
 no cropping 
 not enough bitstream data 
 Wait until the VDOA finished writing the previous display frame 
 The previous display frame was copied out and can be overwritten 
	
	  The index of the last decoded frame, not necessarily in
	  display order, and the index of the next display frame.
	  The latter could have been decoded in a previous run.
 no frame was decoded, but we might have a display frame 
 no frame was decoded, we still return remaining buffers 
			
			  Clamp counters to 16 bits for comparison, as the HW
			  counter rolls over at this point for h.264. This
			  may be different for other formats, but using 16 bits
			  should be enough to detect most errors and saves us
			  from doing different things based on the format.
		
		  no more frames to be decoded, but there could still
		  be rotator output to dequeue
 possibly prescan failure 
 If a frame was copied out, return it 
			
			  If this was the last decoded frame, and reordering
			  is disabled, this will be the last display frame.
			
			  If there is no designated presentation frame anymore,
			  this frame has to be the last one.
 The rotator will copy the current display frame next time 
	
	  The current decode run might have brought the bitstream fill level
	  below the size where we can start the next decode run. As userspace
	  might have filled the output queue completely and might thus be
	  blocked, we can't rely on the next qbuf to trigger the bitstream
	  refill. Check if we have data to refill the bitstream now.
	
	  For now this only handles the case where we would deadlock with
	  userspace, i.e. userspace issued DEC_CMD_STOP and waits for EOS,
	  but after a failed decode run we would hold the context and wait for
	  userspace to queue more buffers.
 read status register to attend the IRQ 
 SPDX-License-Identifier: GPL-2.0-or-later
  Coda multi-standard codec IP
  Copyright (C) 2012 Vista Silicon S.L.
     Javier Martin, <javier.martin@vista-silicon.com>
     Xavier Duret
 multiple of 2 
 multiple of 2 
 multiple of 2 
 Fallthrough: IN -H264-> CODA -NV12 MB-> VDOA -YUYV-> OUT 
 Switch Cb and Cr for YVU420 format 
  Arrays of codecs supported by each given version of Coda:
   i.MX27 -> codadx6
   i.MX51 -> codahx4
   i.MX53 -> coda7
   i.MX6  -> coda960
  Use V4L2_PIX_FMT_YUV420 as placeholder for all supported YUV 4:2:0 variants
		
		  If V4L2_PIX_FMT_YUYV should be default,
		  set_default_params() must be adjusted.
  Normalize all supported YUV 4:2:0 formats to the value used in the codec
  tables.
  V4L2 ioctl() operations.
		
		  If the source format is already fixed, only allow the same
		  chroma subsampling.
 Skip YUYV if the vdoa is not available 
 Skip YUYV if the vdoa is not available 
 Fall back to currently set pixelformat 
	
	  This is a rough estimate for sensible compressed buffer
	  sizes (between 1 and 16 bits per pixel). This could be
	  improved by better format specific worst case estimates.
	 V4L2 specification suggests the driver corrects the format struct
		
		  Frame stride must be at least multiple of 8,
		  but multiple of 16 for h.264 or JPEG 4:2:x
	
	  If the source format is already fixed, only allow the same output
	  resolution. When decoding JPEG images, we also have to make sure to
	  use the same chroma subsampling.
 The decoders always write complete macroblocks or MCUs 
 Setting the coded format determines the selected codec 
 Setting the coded format determines the selected codec 
	
	  Setting the capture queue format is not possible while the capture
	  queue is still busy. This is not an error, but the user will have to
	  make sure themselves that the capture format is set correctly before
	  starting the output queue again.
	
	  Allow to allocate instance specific per-context buffers, such as
	  bitstream ringbuffer, slice buffer, work buffer, etc. if needed.
 v4l2-compliance expects this to fail for read-only targets 
		
		  If the last output buffer is still on the queue, make sure
		  that decoder finish_run will see the last flag and report it
		  to userspace.
 Set the stream-end flag on this context 
		
		  If the last output buffer has already been taken from the
		  queue, wake up the capture queue and signal end of stream
		  via the -EPIPE mechanism.
 Mark last buffer 
 Set the stream-end flag on this context 
 If there is no buffer in flight, wake up 
 Disallow YUYV if the vdoa is not available 
  Approximate timeperframe v4l2_fract with values that can be written
  into the 16-bit CODA_FRATE_DIV and CODA_FRATE_RES fields.
 Lower bound is 165535 
 Upper bound is 655361 
 Reduce fraction to lowest terms 
 Find successive convergents from continued fraction expansion 
 Stop when f2 exactly equals timeperframe 
  Mem-to-mem operations.
 job_finish scheduled by prepare_decode 
	
	  For both 'P' and 'key' frame cases 1 picture
	  and 1 frame are needed. In the decoder case,
	  the compressed frame can be in the bitstream.
 Default formats for output and input queues 
	
	  Since the RBC2AXI logic only supports a single chroma plane,
	  macroblock tiling only works for to NV12 pixel format.
  Queue operations
	
	  Extend the control range if the parsed stream contains a known but
	  unsupported value or level.
	
	  In the decoder case, immediately try to copy the buffer into the
	  bitstream ringbuffer and mark it as ready to be dequeued.
		
		  For backwards compatibility, queuing an empty buffer marks
		  the stream end
			
			  Unless already done, try to obtain profile_idc and
			  level_idc from the SPS header. This allows to decide
			  whether to enable reordering during sequence
			  initialization.
 This set buf->sequence = ctx->qsequence++ 
			
			  Run sequence initialization in case the queued
			  buffer contained headers.
 copy the buffers that were queued before streamon 
 Run sequence initialization 
		
		  Check the first input JPEG buffer to determine chroma
		  subsampling.
 Don't start the coda unless both queues are on 
 Allow BIT decoder device_run with no new buffers queued 
 Only decoders have this control 
 TODO: switch between baseline and constrained baseline 
 nothing to do, this is set by the encoder 
 nothing to do, these are fixed 
	
	  The maximum VBV size value is 0x7fffffff bits,
	  one bit less than 262144 KiB
	 One way to indicate end-of-stream for coda is to set the
	  bytesused == 0. However by default videobuf2 handles bytesused
	  equal to 0 as a special case and changes its value to the size
	  of the buffer. Set the allow_zero_bytesused flag, so
	  that videobuf2 will keep the value of bytesused intact.
	
	  We might be fine with no buffers on some of the queues, but that
	  would need to be reflected in job_ready(). Currently we expect all
	  queues to have at least one buffer queued.
  File operations
		
		  Enabling the BWB when decoding can hang the firmware with
		  certain streams. The issue was tracked as ENGR00293425 by
		  Freescale. As a workaround, disable BWB for all decoders.
		  The enable_bwb module parameter allows to override this.
 Power up and upload firmware if necessary 
 If this instance is running, call .job_abort and wait for it to end 
 In case the instance was not running, we still need to call SEQ_END 
	
	  Copy the first CODA_ISRAM_SIZE in the internal SRAM.
	  The 16-bit chars in the code buffer are in memory access
	  order, re-sort them to CODA order for register download.
	  Data in this SRAM survives a reboot.
 Clear registers 
 Tell the BIT where to find everything it needs 
 Set default values 
 Reset VPU and start processor 
 Not applicable, use the selection API instead 
 Check if the firmware has a 16-byte Freescale header, skip it 
	
	  Check whether the firmware is in native order or pre-reordered for
	  memory access. The first instruction opcode always is 0xe40e.
 Firmware in native order, reorder while copying 
 Copy the already reordered firmware image 
		
		  Since we can't suppress warnings for failed asynchronous
		  firmware requests, report that the fallback firmware was
		  found.
 allocate auxiliary per-device code buffer for the BIT processor 
 leave 4k for suspend code 
 sentinel  }
 Get  memory for physical registers 
 IRQ 
 JPEG IRQ 
 Get IRAM pool from device tree 
 Get vdoa_data if supported by the platform 
 allocate auxiliary per-device buffers for the BIT processor 
	
	  Start activated so we can directly call coda_hw_init in
	  coda_fw_callback regardless of whether CONFIG_PM is
	  enabled or whether the device is associated with a PM domain.
 SPDX-License-Identifier: GPL-2.0-only
  i.MX6 Video Data Order Adapter (VDOA)
  Copyright (C) 2014 Philipp Zabel
  Copyright (C) 2016 Pengutronix, Michael Tretter <kernel@pengutronix.de>
 Disable interrupts 
 Progressive, no sync, 1 frame per run 
 Enable interrupts and start transfer 
 If no context is passed, only check if the format is valid 
 SPDX-License-Identifier: GPL-2.0-or-later
  Coda multi-standard codec IP
  Copyright (C) 2014 Philipp Zabel, Pengutronix
  RA[15:0], CA[15:8] are hardwired to contain the 24-bit macroblock
  start offset (macroblock size is 16x16 for luma, 16x8 for chroma).
  Bits CA[4:0] are set using XY2CA above. BA[3:0] seems to be unused.
 SPDX-License-Identifier: GPL-2.0-or-later
  Coda multi-standard codec IP - MPEG-4 helper functions
  Copyright (C) 2019 Pengutronix, Philipp Zabel
  Check if the buffer starts with the MPEG-4 visual object sequence and visual
  object headers, for example:
    00 00 01 b0 f1
    00 00 01 b5 a9 13 00 00 01 00 00 00 01 20 08
                d4 8d 88 00 f5 04 04 08 14 30 3f
  Returns the detected header size in bytes or 0.
 SPDX-License-Identifier: GPL-2.0-or-later
  Coda multi-standard codec IP - JPEG support functions
  Copyright (C) 2014 Philipp Zabel, Pengutronix
 DC Luma, DC Chroma, AC Luma, AC Chroma 
  Typical Huffman tables for 8-bit precision luminance and
  chrominance from JPEG ITU-T.81 (ISOIEC 10918-1) Annex K.3
 bits 
 values 
 bits 
 values 
 bits 
 values 
 padded to 32-bit 
 bits 
 values 
 padded to 32-bit 
  Quantization tables for luminance and chrominance components in
  zig-zag scan order from the Freescale i.MX VPU libraries
 Write huffman tables to parameter memory 
 Write Q-matrix to parameter memory 
 check frame header 
 install quantization tables 
 install Huffman tables 
 AC tables should be between 17 -> 178, DC between 17 -> 28 
 check scan header 
 Generate Huffman table information 
 start of entropy coded segment 
 MIN Tables 
 MAX Tables 
 PTR Tables 
 VAL Tables: DC Luma, DC Chroma, AC Luma, AC Chroma 
 Leave 3 256-byte page margin to avoid a BBC interrupt 
  Convert Huffman table specifcations to tables of codes and code lengths.
  For reference, see JPEG ITU-T.81 (ISOIEC 10918-1) [1]
  [1] https:www.w3.orgGraphicsJPEGitu-t81.pdf
 Figure C.1 - Generation of table of Huffman code sizes 
 Figure C.2 - Generation of table of Huffman codes 
 Figure C.3 - Ordering procedure for encoding procedure code tables 
 DCAC Luma, DCAC Chroma -> DC LumaChroma, AC LumaChroma 
 Generate all four (lumachroma DCAC) codesize lookup tables 
 Store Huffman lookup tables in AC0, AC1, DC0, DC1 order 
 DC tables only have 16 entries 
 Write Huffman sizecode lookup tables in AC0, AC1, DC0, DC1 order 
 Start Of Image 
 Define Restart Interval 
 Define Quantization Tables 
 Define Huffman Tables 
 Start Of Frame 
 Component identifier, matches SOS 
 Chroma table index 
 Pad to multiple of 8 bytes 
  Scale quantization table using nonlinear scaling factor
  u8 qtab[64], scale [50,190]
 Clip quality setting to [5,100] interval 
	
	  Non-linear scaling factor:
	  [5,50] -> [1000..100], [51,100] -> [98..0]
  Encoder context operations
 Round image dimensions to multiple of MCU size 
 64 words per 256-byte page 
 These need to be multiples of MCU size 
 The content of this register seems to be irrelevant: 
	
	  Lock to make sure that an encoder stop command running in parallel
	  will either already have marked src_buf as last, or it will wake up
	  the capture queue after the buffers are returned.
	
	  Set plane payload to the number of bytes written out
	  by the JPEG processing unit
	
	  Reset JPEG processing unit after each encode run to work
	  around hangups when switching context between encoder and
	  decoder.
  Decoder context operations
 nothing more to do here 
	 TODO: we could already scan the first header to get the chroma
	  format.
 Round image dimensions to multiple of MCU size 
	
	  Lock to make sure that a decoder stop command running in parallel
	  will either already have marked src_buf as last, or it will wake up
	  the capture queue after the buffers are returned.
	
	  Reset JPEG processing unit after each decode run to work
	  around hangups when switching context between encoder and
	  decoder.
 non-bitstream operation 
 SPDX-License-Identifier: GPL-2.0-or-later
  Coda multi-standard codec IP - MPEG-2 helper functions
  Copyright (C) 2019 Pengutronix, Philipp Zabel
  Check if the buffer starts with the MPEG-2 sequence header (with or without
  quantization matrix) and extension header, for example:
    00 00 01 b3 2d 01 e0 34 08 8b a3 81
                10 11 11 12 12 12 13 13 13 13 14 14 14 14 14 15
                15 15 15 15 15 16 16 16 16 16 16 16 17 17 17 17
                17 17 17 17 18 18 18 19 18 18 18 19 1a 1a 1a 1a
                19 1b 1b 1b 1b 1b 1c 1c 1c 1c 1e 1e 1e 1f 1f 21
    00 00 01 b5 14 8a 00 01 00 00
  or:
    00 00 01 b3 08 00 40 15 ff ff e0 28
    00 00 01 b5 14 8a 00 01 00 00
  Returns the detected header size in bytes or 0.
 SPDX-License-Identifier: GPL-2.0-or-later
  Coda multi-standard codec IP - H.264 helper functions
  Copyright (C) 2012 Vista Silicon S.L.
     Javier Martin, <javier.martin@vista-silicon.com>
     Xavier Duret
 Find SPS header 
 Add rbsp stop bit and trailing at the end 
  coda_h264_sps_fixup - fixes frame cropping values in h.264 SPS
  @ctx: encoder context
  @width: visible width
  @height: visible height
  @buf: buffer containing h.264 SPS RBSP, starting with NAL header
  @size: modified RBSP size return value
  @max_size: available size in buf
  Rewrites the frame cropping values in an h.264 SPS RBSP correctly for the
  given visible width and height.
 Skip NAL header 
 Skip constraint_set[0-5]_flag, reserved_zero_2bits 
 Skip level_idc 
 seq_parameter_set_id 
 log2_max_frame_num_minus4 
 log2_max_pic_order_cnt_lsb_minus4 
 delta_pic_order_always_zero_flag 
 offset_for_non_ref_pic 
 offset_for_top_to_bottom_field 
 offset_for_ref_frame 
 max_num_ref_frames 
 gaps_in_frame_num_value_allowed_flag 
 mb_adaptive_frame_field_flag 
 direct_8x8_inference_flag 
 Mark position of the frame cropping flag 
 crop_left 
 crop_top 
 vui_parameters_present_flag 
 SPDX-License-Identifier: GPL-2.0
  Allwinner sun8i deinterlacer with scaler driver
  Copyright (C) 2019 Jernej Skrabec <jernej.skrabec@siol.net>
  Based on vim2m driver.
 Will cancel the transaction in the next interrupt handler 
 neutral filter coefficients 
 luma 
 chroma 
 Propagate colorspace information to capture. 
 default output format 
 default capture format 
 sentinel  }
 SPDX-License-Identifier: GPL-2.0+
  Copyright (c) 2011-2018 Magewell Electronics Co., Ltd. (Nanjing)
  All rights reserved.
  Author: Yong Deng <yong.deng@magewell.com>
 TODO add 10&12 bit YUV, RGB support 
	
	  Some video receivers have the ability to be compatible with
	  8bit and 16bit bus width.
	  Identify the media bus format from device tree.
 non-YUV 
 not support YUV420 input format yet 
 Input sequence does not apply to non-YUV formats 
 No need to configure DATA_WIDTH for 16bit 
 raw 
 -----------------------------------------------------------------------------
  Media Controller and V4L2
 -----------------------------------------------------------------------------
  Resources and IRQ
 SPDX-License-Identifier: GPL-2.0+
  Copyright (c) 2011-2018 Magewell Electronics Co., Ltd. (Nanjing)
  All rights reserved.
  Author: Yong Deng <yong.deng@magewell.com>
 This is got from BSP sources. 
	
	  CSI will lookup the next dma buffer for next frame before the
	  the current frame done IRQ triggered. This is not documented
	  but reported by Ondřej Jirman.
	  The BSP code has workaround for this too. It skip to mark the
	  first buffer as frame done for VB2 and pass the second buffer
	  to CSI in the first frame done ISR call. Then in second frame
	  done ISR call, it mark the first buffer as frame done for VB2
	  and pass the third buffer to CSI. And so on. The bad thing is
	  that the first buffer will be written twice and the first frame
	  is dropped even the queued buffer is sufficient.
	  So, I make some improvement here. Pass the next buffer to CSI
	  just follow starting the CSI. In this case, the first frame
	  will be stored in first buffer, second frame in second buffer.
	  This method is used to avoid dropping the first frame, it
	  would also drop frame when lacking of queued buffer.
 Release all active buffers 
	 If a new buffer (#next_buf) had not been queued to CSI, the old
	  buffer (#buf) is still holding by CSI for storing the next
	  frame. So, we queue a new buffer (#next_buf) to CSI then wait
	  for next ISR call.
 Prepare buffer for next frame but one.  
 -----------------------------------------------------------------------------
  V4L2 file operations
 check if already powered 
 -----------------------------------------------------------------------------
  Media Operations
 Initialize the media entity... 
 Setup default format 
 Initialize videobuf2 queue 
 Make sure non-dropped frame 
 Register video device 
 SPDX-License-Identifier: GPL-2.0+
  Copyright (C) 2016 NextThing Co
  Copyright (C) 2016-2019 Bootlin
  Author: Maxime Ripard <maxime.ripard@bootlin.com>
 Create link from subdev to main device 
 Initialize subdev 
 Sentinel  }
 SPDX-License-Identifier: GPL-2.0+
  Copyright (C) 2016 NextThing Co
  Copyright (C) 2016-2019 Bootlin
  Author: Maxime Ripard <maxime.ripard@bootlin.com>
 YUV422 inputs 
 Align the width and height on the subsampling 
 Clamp the width and height to our capabilities 
 We can only set the format on the sink pad 
 It's the sink, only allow changing the frame size 
 Set a default format 
 SPDX-License-Identifier: GPL-2.0+
  Copyright (C) 2016 NextThing Co
  Copyright (C) 2016-2019 Bootlin
  Author: Maxime Ripard <maxime.ripard@bootlin.com>
	
	  We should never end up in a situation where we overwrite an
	  already filled slot.
 Our next buffer is not the current buffer 
 Report the previous buffer as done 
 Put a new buffer in there 
	
	  We need a scratch buffer in case where we'll not have any
	  more buffer queued so that we don't error out. One of those
	  cases is when you end up at the last frame to capture, you
	  don't havea any buffer queued any more, and yet it doesn't
	  really matter since you'll never reach the next buffer.
	 
	  Since we support the multi-planar API, we need to have a
	  buffer for each plane. Allocating a single one large enough
	  to hold all the buffers is simpler, so let's go for that.
 Setup timings 
	
	  This hardware uses [HV]REF instead of [HV]SYNC. Based on the
	  provided timing diagrams in the manual, positive polarity
	  equals active high [HV]REF.
	 
	  When the back porch is 0, [HV]REF is more or less equivalent
	  to [HV]SYNC inverted.
 Setup buffer length 
 Prepare our buffers in hardware 
 Enable double buffering 
 Clear the pending interrupts 
 Enable frame done interrupt 
 Release all active buffers 
 Acknowledge the interrupts 
 SPDX-License-Identifier: GPL-2.0
  Allwinner sun8i DE2 rotation driver
  Copyright (C) 2020 Jernej Skrabec <jernej.skrabec@siol.net>
 clear flag and disable irq 
 all pitches have to be 16 byte aligned 
	
	  Capture queue has to be also checked, because format and size
	  depends on output format and size.
 Propagate colorspace information to capture. 
 Check if capture format needs to be changed 
 default output format 
 default capture format 
 sentinel  }
 SPDX-License-Identifier: GPL-2.0
 Copyright (C) 2020 Jernej Skrabec <jernej.skrabec@siol.net> 
  Formats not included in array:
  ROTATE_FORMAT_BGR565
  ROTATE_FORMAT_VYUV
 not all formats can be used for capture buffers 
 SPDX-License-Identifier: GPL-2.0-only
  Samsung S5PEXYNOS SoC series MIPI-CSI receiver driver
  Copyright (C) 2011 - 2013 Samsung Electronics Co., Ltd.
  Author: Sylwester Nawrocki <s.nawrocki@samsung.com>
 Register map definition 
 CSIS global control 
 D-PHY control 
 User defined formats, x = 1...4 
 Interrupt mask 
 Interrupt source 
 Pixel resolution 
 Non-image packet data buffers 
 CSIS Core (1.0V, 1.1V or 1.2V) suppply 
 CSIS IO and PLL (1.8V) supply 
 Errors 
 Non-image data receive events 
 Frame startend 
 Mask of all used interrupts in S5PCSIS_INTMSK register 
  struct csis_state - the driver's internal state data structure
  @lock: mutex serializing the subdev and power management operations,
         protecting @format and @flags members
  @pads: CSIS pads array
  @sd: v4l2_subdev associated with CSIS device instance
  @index: the hardware instance index
  @pdev: CSIS platform device
  @phy: pointer to the CSIS generic PHY
  @regs: mmapped IO registers memory
  @supplies: CSIS regulator supplies
  @clock: CSIS clocks
  @irq: requested s5p-mipi-csis irq number
  @interrupt_mask: interrupt mask of the all used interrupts
  @flags: the state variable for power and streaming control
  @clk_frequency: device bus clock frequency
  @hs_settle: HS-RX settle time
  @num_lanes: number of MIPI-CSI data lanes used
  @max_num_lanes: maximum number of MIPI-CSI data lanes supported
  @wclk_ext: CSI wrapper clock: 0 - bus clock, 1 - external SCLK_CAM
  @csis_fmt: current CSIS pixel format
  @format: common media bus format for the source and sink pad
  @slock: spinlock protecting structure members below
  @pkt_buf: the frame embedded (non-image) data buffer
  @events: MIPI-CSIS event (error) counters
  struct csis_pix_format - CSIS pixel format description
  @pix_width_alignment: horizontal pixel alignment, width will be
                        multiple of 2^pix_width_alignment
  @code: corresponding media bus code
  @fmt_reg: S5PCSIS_CONFIG register value
  @data_alignment: MIPI-CSI data alignment in bits
 Called with the state.lock mutex held 
 Color format 
 Pixel resolution 
 24-bits 
 Update the shadow register. 
  V4L2 subdev operations
 Update the eventerror counters 
 Get port node and validate MIPI-CSI channel id. 
 Get MIPI CSI-2 bus configuration from the endpoint node. 
 This allows to retrieve the platform device id by the host driver 
 .. and a pointer to the subdev. 
 sentinel  },
 SPDX-License-Identifier: GPL-2.0-or-later
  Samsung S5PEXYNOS4 SoC series FIMC (video postprocessor) driver
  Copyright (C) 2012 - 2013 Samsung Electronics Co., Ltd.
  Sylwester Nawrocki <s.nawrocki@samsung.com>
 Complete the transaction which has been scheduled for execution. 
 Prepare the DMA offsets for scaler 
 Reconfigure hardware if the context has changed. 
	
	  Return number of non-contiguous planes (plane buffers)
	  depending on the configured color format.
  V4L2 ioctl handlers
 64 x 32 pixels tile 
 Update RGB Alpha control state and value range 
 Get pixel alignment constraints. 
 adjust lefttop if cropping rectangle is out of bounds 
 Check to see if scaling ratio is within supported range 
	
	  Don't allow simultaneous open() of the mem-to-mem and the
	  capture video node that belong to same FIMC IP instance.
 Default color format 
 Use separate control handler per file handle 
 Setup the device context for memory-to-memory mode 
 SPDX-License-Identifier: GPL-2.0-only
  Register interface file for Samsung Camera Interface (FIMC) driver
  Copyright (C) 2010 - 2013 Samsung Electronics Co., Ltd.
  Sylwester Nawrocki <s.nawrocki@samsung.com>
 Software reset. 
	
	  The input and output rotator cannot work simultaneously.
	  Use the output rotator in output DMA mode or the input rotator
	  in direct fifo output mode.
 LCD FIFO path 
 Select color space conversion equation (HDSD size).
 HD 
 SD 
 Set the input dma offsets. 
 Configure chroma components order. 
 Set the pixel offsets. 
 Input original and real size. 
 Use DMA autoload only in FIFO mode. 
 Set the input DMA to process single frame only. 
 Inputoutput DMA lineartiled mode. 
 else defaults to ITU-R BT.656 8-bit 
 Anything to do here ? 
 See CIWDOFSTn register description in the datasheet for details. 
 Select ITU B interface, disable Writeback path and test pattern. 
 TODO: add remaining supported formats. 
 ITU-A, ITU-B: 0, 1 
 Return an index to the buffer actually being written. 
 Return an index to the buffer being written previously. 
 Locking: the caller holds fimc->slock 
 SPDX-License-Identifier: GPL-2.0-or-later
  Samsung S5PEXYNOS4 SoC series FIMC (CAMIF) driver
  Copyright (C) 2010-2012 Samsung Electronics Co., Ltd.
  Sylwester Nawrocki <s.nawrocki@samsung.com>
 plane 1 holds frame meta data 
 check to see if input and output sizeformat differ 
 The color format (colplanes, memplanes) must be already configured. 
 decompose Y into YCb 
 decompose Y into YCbCr 
 422 
 Set order for 1 and 2 plane YCBCR 4:2:2 formats. 
 The one only mode supported in SoC. 
 Set order for 1 plane input formats. 
  V4L2 controls handling
 Update maximum value of the alpha color control 
  fimc_adjust_mplane_format - adjust bytesperlinesizeimage for each plane
  @fmt: fimc pixel format description (input)
  @width: requested pixel width
  @height: requested pixel height
  @pix: multi-plane format to adjust
 Planar 
 Packed 
		
		  Currently bytesperline for each plane is same, except
		  V4L2_PIX_FMT_YUV420M format. This calculation may need
		  to be changed when other multi-planar formats are added
		  to the fimc_formats[] array.
 Ensure full last row for tiled formats 
 64  32  plane_fmt->bytesperline  64 
  fimc_find_format - lookup fimc color format by fourcc or media bus format
  @pixelformat: fourcc to match, ignored if null
  @mbus_code: media bus code to match, ignored if null
  @mask: the color flags to match
  @index: offset in the fimc_formats array, ignored if negative
 Clear for full HW setup in first run after resume 
 CONFIG_PM 
 Enable clocks and perform basic initialization 
 Resume the capture or mem-to-mem device 
 Do not resume if the device was idle before system suspend 
 CONFIG_PM_SLEEP 
 S5PV210, S5PC110 
 EXYNOS4210, S5PV310, S5PC210 
 EXYNOS4412 
 sentinel  },
 SPDX-License-Identifier: GPL-2.0-only
  Samsung EXYNOS FIMC-LITE (camera host interface) driver
  Copyright (C) 2012 - 2013 Samsung Electronics Co., Ltd.
  Author: Sylwester Nawrocki <s.nawrocki@samsung.com>
  fimc_lite_find_format - lookup fimc color format by fourcc or media bus code
  @pixelformat: fourcc to match, ignored if null
  @mbus_code: media bus code to match, ignored if null
  @mask: the color format flags to match
  @index: index to the fimc_lite_formats array, ignored if negative
 Get sensor configuration data from the sensor subdev 
  Reinitialize the driver so it is ready to start the streaming again.
  Set fimc->state to indicate stream off and the hardware shut down state.
  If not suspending (@suspend is false), return any buffers to videobuf2.
  Otherwise put any owned buffers onto the pending buffers queue, so they
  can be re-spun when the device is being resumed. Also perform FIMC
  software reset and disable streaming on the whole pipeline if required.
 Release unused buffers 
 If suspending put unused buffers onto pending queue 
 200 ms 
 Must be called  with fimc.slock spinlock held. 
 Mark video pipeline ending at this video node as in use. 
  Format and crop negotiation helpers
 Allow changing format only on sink pad 
 Adjust lefttop if cropping rectangle got out of bounds 
	 Scaling is not supported so we enforce compose rectangle size
 Adjust lefttop if the composing rectangle got out of bounds 
  Video node ioctl operations
	
	  We allow some flexibility only for YUV formats. In case of raw
	  raw Bayer the FIMC-LITE's output format must match its camera
	  interface input format.
 Retrieve format at the sink pad 
 Don't call FIMC subdev operation to avoid nested locking 
 Retrieve format at the source pad 
 Capture subdev media entity operations 
 full camera input frame size 
 crop size 
 Set sink crop rectangle 
 Reset source format and crop rectangle 
 Same crop rectangle on the source pad 
	
	  Find sensor subdev linked to FIMC-LITE directly or through
	  MIPI-CSIS. This is required for configuration where FIMC-LITE
	  is used as a subdev only and feeds data internally to FIMC-IS.
	  The pipeline links are protected through entity.stream_count
	  so there is no need to take the media graph mutex here.
 The video node will be created within the subdev's registered() op 
 CONFIG_PM_SLEEP 
 EXYNOS4412 
 EXYNOS5250 
 sentinel  },
 SPDX-License-Identifier: GPL-2.0-only
  Samsung EXYNOS4x12 FIMC-IS (Imaging Subsystem) driver
  Copyright (C) 2013 Samsung Electronics Co., Ltd.
  Author: Sylwester Nawrocki <s.nawrocki@samsung.com>
  An empty algorithm is used as the actual I2C bus controller driver
  is implemented in the FIMC-IS subsystem firmware and the host CPU
  doesn't access the I2C bus controller.
	
	  Client drivers of this adapter don't do any I2C transfers as that
	  is handled by the ISP firmware.  But we rely on the runtime PM
	  state propagation from the clients up to the adapter driver so
	  clear the ignore_children flags here.  PM rutnime calls are not
	  used in probe() handler of clients of this adapter so there is
	  no issues with clearing the flag right after registering the I2C
	  adapter.
 SPDX-License-Identifier: GPL-2.0-only
  Samsung Exynos4 SoC series FIMC-IS slave interface driver
  Error log interface functions
  Copyright (C) 2011 - 2013 Samsung Electronics Co., Ltd.
  Authors: Younghwan Joo <yhwan.joo@samsung.com>
           Sylwester Nawrocki <s.nawrocki@samsung.com>
 Sensor Error(100~199) 
 ISP Error (200~299) 
 DRC Error (300~399) 
 FD Error  (400~499) 
 General 
 Sensor 
 ISP 
 DRC 
 FD 
 SPDX-License-Identifier: GPL-2.0-only
  Samsung EXYNOS4x12 FIMC-IS (Imaging Subsystem) driver
  Copyright (C) 2013 Samsung Electronics Co., Ltd.
  Author: Sylwester Nawrocki <s.nawrocki@samsung.com>
 SPDX-License-Identifier: GPL-2.0-only
  Samsung EXYNOS4x12 FIMC-IS (Imaging Subsystem) driver
  Copyright (C) 2013 Samsung Electronics Co., Ltd.
  Authors: Sylwester Nawrocki <s.nawrocki@samsung.com>
           Younghwan Joo <yhwan.joo@samsung.com>
 Use MIPI-CSIS channel id to determine the ISP I2C bus index. 
 Disable watchdog 
 Cortex-A5 start address setting 
 Enable and start Cortex-A5 
 A5 power off 
 Wait until @bit of @is->state is set to @state in the interrupt handler. 
 Allocate working memory for the FIMC-IS CPU. 
 Read firmware description. 
	
	  FIXME: The firmware is not being released for now, as it is
	  needed around for copying to the IS working memory every
	  time before the Cortex-A5 is restarted.
 General IS interrupt handler 
 Get CAC margin 
	
	  Some user space use cases hang up here without this
	  empirically chosen delay.
 Sensor initialization. Only one sensor is currently supported. 
 Get the setfile address. 
 Load the setfile. 
 Check magic number. 
 Stream off. 
 Preserve previous mode. 
 Set initial parameter values. 
	
	  Register FIMC-IS V4L2 subdevs to this driver. The video nodes
	  will be created within the subdev's registered() callback.
 TODO: 
 TODO: 
 CONFIG_PM_SLEEP 
 sentinel  },
 SPDX-License-Identifier: GPL-2.0-only
  Register interface file for EXYNOS FIMC-LITE (camera interface) driver
  Copyright (C) 2012 Samsung Electronics Co., Ltd.
  Author: Sylwester Nawrocki <s.nawrocki@samsung.com>
 in ms 
 Select interrupts to be enabled for each output mode 
 An output to the FIMC-IS 
  Test pattern (color bars) enabledisable. External sensor
  pixel clock must be active for the test pattern to work.
 Set camera input pixel format and resolution 
 Set the camera host input window offsets (cropping) 
 Select camera port (A, B) 
 Select serial or parallel bus, camera port (A,B) and set signals polarity 
 Maximum output pixel size 
 DMA offsets 
 Enabledisable output DMA, set output pixel size and offsets (composition) 
 SPDX-License-Identifier: GPL-2.0-only
  Samsung EXYNOS4x12 FIMC-IS (Imaging Subsystem) driver
  Copyright (C) 2013 Samsung Electronics Co., Ltd.
  Authors: Sylwester Nawrocki <s.nawrocki@samsung.com>
           Younghwan Joo <yhwan.joo@samsung.com>
  fimc_isp_find_format - lookup color format by fourcc or media bus code
  @pixelformat: fourcc to match, ignored if null
  @mbus_code: media bus code to match, ignored if null
  @index: index to the fimc_isp_formats array, ignored if negative
 Capture subdev media entity operations 
 ISP OTF input image format 
 ISP OTF output image format 
 Allow changing format only on sink pad 
 Propagate format to the source pads 
 Close sensor 
 SUB IP power off 
 Use pipeline object allocated by the media device. 
 Supported manual ISO values 
 TODO ,	 ISP_IMAGE_EFFECT_NEGATIVE_COLOR },
 ISO sensitivity 
 TODO: Add support for NEGATIVE_COLOR option 
 SPDX-License-Identifier: GPL-2.0-only
  Samsung EXYNOS4x12 FIMC-IS (Imaging Subsystem) driver
  FIMC-IS ISP video input and video output DMA interface driver
  Copyright (C) 2013 Samsung Electronics Co., Ltd.
  Author: Sylwester Nawrocki <s.nawrocki@samsung.com>
  The hardware handling code derived from a driver written by
  Younghwan Joo <yhwan.joo@samsung.com>.
 Check if we get one of the already known buffers. 
  FIMC-IS ISP input and output DMA interface interrupt handler.
  Locking: called with is->slock spinlock held.
 TODO: Ensure the DMA is really stopped in stop_streaming callback 
 Mark the video pipeline as in use. 
  Video node ioctl operations
	
	  TODO: double check with the docmentation these widthheight
	  constraints are correct.
  Check for sourcesink format differences at each link.
  Return 0 if the formats match or -EPIPE otherwise.
 Retrieve format at the sink pad 
 Retrieve format at the source pad 
 SPDX-License-Identifier: GPL-2.0-only
  Samsung S5PEXYNOS4 SoC Camera Subsystem driver
  Copyright (C) 2013 Samsung Electronics Co., Ltd.
  Author: Sylwester Nawrocki <s.nawrocki@samsung.com>
 Called with the media graph mutex held or entity->stream_count > 0. 
 source pad 
 sink pad 
 SPDX-License-Identifier: GPL-2.0-only
  Samsung EXYNOS4x12 FIMC-IS (Imaging Subsystem) driver
  Copyright (C) 2013 Samsung Electronics Co., Ltd.
  Authors: Younghwan Joo <yhwan.joo@samsung.com>
           Sylwester Nawrocki <s.nawrocki@samsung.com>
 Update isp size info (OTF only) 
 Update drc size info (OTF only) 
 Update fd size info (OTF only) 
 Update field 
 Global 
 ISP 
 Sensor 
 DRC 
 FD 
 SPDX-License-Identifier: GPL-2.0-only
  Samsung EXYNOS4x12 FIMC-IS (Imaging Subsystem) driver
  Copyright (C) 2012 - 2013 Samsung Electronics Co., Ltd.
  Authors: Younghwan Joo <yhwan.joo@samsung.com>
           Sylwester Nawrocki <s.nawrocki@samsung.com>
 SPDX-License-Identifier: GPL-2.0-only
  Samsung S5PEXYNOS4 SoC series camera interface (camera capture) driver
  Copyright (C) 2010 - 2012 Samsung Electronics Co., Ltd.
  Sylwester Nawrocki <s.nawrocki@samsung.com>
  Reinitialize the driver so it is ready to start the streaming again.
  Set fimc->state to indicate stream off and the hardware shut down state.
  If not suspending (@suspend is false), return any buffers to videobuf2.
  Otherwise put any owned buffers onto the pending buffers queue, so they
  can be re-spun when the device is being resumed. Also perform FIMC
  software reset and disable streaming on the whole pipeline if required.
 Release unused buffers 
 If suspending put unused buffers onto pending queue 
 200 ms 
  fimc_capture_config_update - apply the camera interface configuration
  @ctx: FIMC capture context
  To be called from within the interrupt handler with fimc.slock
  spinlock held. It updates the camera pixel crop, rotation and
  image flip in HW.
 Move the buffer to the capture active queue 
	
	  Set up a buffer at MIPI-CSIS if current image format
	  requires the frame embedded data capture.
 Setup the buffer directly for processing. 
  Format and crop negotiation helpers
 Conversion fromto JPEG or User Defined format is not supported 
 Apply the camera input interface pixel constraints 
 Can't scale or crop in transparent (JPEG) transfer mode 
 Apply the scaler and the output DMA constraints 
 In JPEG transparent transfer mode cropping is not supported 
	
	  For the compose rectangle the following constraints must be met:
	  - it must fit in the sink pad format rectangle (f_widthf_height);
	  - maximum downscaling ratio is 64;
	  - maximum crop size depends if the rotator is used or not;
	  - the sink pad format widthheight must be 4 multiple of the
	    prescaler ratios determined by sink pad size and source pad crop,
	    the prescaler ratio is returned by fimc_get_scaler_factor().
 Adjust lefttop if cropcompose rectangle is out of bounds 
  The video node ioctl operations
  fimc_pipeline_try_format - negotiate andor set formats at pipeline
                             elements
  @ctx: FIMC capture context
  @tfmt: media bus format to tryset on subdevs
  @fmt_id: fimc pixel format id corresponding to returned @tfmt (output)
  @set: true to set format on subdevs, false to try only
			
			  Notify user-space if common pixel code for
			  host and sensor does not exist.
 set format on all pipeline subdevs 
  fimc_get_sensor_frame_desc - query the sensor for media bus frame parameters
  @sensor: pointer to the sensor subdev
  @plane_fmt: provides plane sizes corresponding to the frame layout entries
  @num_planes: number of planes
  @try: true to set the frame parameters, false to query only
  This function is used by this driver only for compressedblob data formats.
  Try or set format on the fimc.X.capture video node and additionally
  on the whole pipeline if @try is false.
  Locking: the caller must _not_ hold the graph mutex.
 Pre-configure format at the camera input interface, for JPEG only 
 Try the format at the scaler and the DMA output 
 Restore image widthheight for JPEG (no resizing supported). 
 Try to match format at the host and the sensor 
 Update RGB Alpha control state and value range 
 Reset the composition rectangle if not yet configured 
 Reset cropping and set format at the camera interface input 
  fimc_pipeline_validate - check for formats inconsistencies
                           between source and sink pad of each link
  @fimc:	the FIMC device this context applies to
  Return 0 if all formats match or -EPIPE otherwise.
		
		  Find current entity sink pad and any remote sink pad linked
		  to it. We stop if there is no sink pad in current entity or
		  it is not linked to any other remote entity.
 Don't call FIMC subdev operation to avoid nested locking 
 Retrieve format at the source pad 
	
	  Save configuration data related to currently attached image
	  sensor or other data source, e.g. FIMC-IS.
 Capture subdev media entity operations 
 Inherit V4L2 controls from the image sensor subdev. 
  fimc_sensor_notify - v4l2_device notification from a sensor subdev
  @sd: pointer to a subdev generating the notification
  @notification: the notification type, must be S5P_FIMC_TX_END_NOTIFY
  @arg: pointer to an u32 type integer that stores the frame payload value
  The End Of Frame notification sent by sensor subdev in its still capture
  mode. If there is only a single VSYNC generated by the sensor at the
  beginning of a frame transmission, FIMC does not issue the LastIrq
  (end of frame) interrupt. And this notification is used to complete the
  frame capture and returning a buffer to user-space. Subdev drivers should
  call this notification from their last 'End of frame capture' interrupt.
 Sink pads crop rectangle size 
 There must be a bug in the driver if this happens 
 Update RGB Alpha control state and value range 
 Sink pads crop rectangle size 
 Reset the crop rectangle if required. 
 Set default format at the sensor and host interface 
 fimc->lock must be already initialized 
 Default format configuration 
 SPDX-License-Identifier: GPL-2.0-or-later
  S5PEXYNOS4 SoC series camera host interface media device driver
  Copyright (C) 2011 - 2013 Samsung Electronics Co., Ltd.
  Author: Sylwester Nawrocki <s.nawrocki@samsung.com>
 Set up image sensor subdev -> FIMC capture node notifications. 
  fimc_pipeline_prepare - update pipeline information with subdevice pointers
  @p: fimc pipeline
  @me: media entity terminating the pipeline
  Caller holds the graph mutex.
 Find remote source pad 
  __subdev_set_power - change power state of a single subdev
  @sd: subdevice to change power state for
  @on: 1 to enable power or 0 to disable
  Return result of s_power subdev operation or -ENXIO if sd argument
  is NULL. Return 0 if the subdevice does not implement s_power.
  fimc_pipeline_s_power - change power state of all pipeline subdevs
  @p: fimc device terminating the pipeline
  @on: true to power on, false to power off
  Needs to be called with the graph mutex held.
  __fimc_pipeline_enable - enable power of all pipeline subdevs
 			    and the sensor clock
  @ep: video pipeline structure
  @fmd: fimc media device
  Called with the graph mutex held.
 Enable PXLASYNC clock if this pipeline includes FIMC-IS 
  __fimc_pipeline_open - update the pipeline information, enable power
                         of all pipeline subdevs and the sensor clock
  @ep: fimc device terminating the pipeline
  @me: media entity to start graph walk with
  @prepare: true to walk the current pipeline and acquire all subdevs
  Called with the graph mutex held.
		
		  Pipeline open cannot fail so as to make it possible
		  for the user space to configure the pipeline.
  __fimc_pipeline_close - disable the sensor clock and pipeline power
  @ep: fimc device terminating the pipeline
  Disable power of all subdevs and turn the external sensor clock off.
 Disable PXLASYNC clock if this pipeline includes FIMC-IS 
  __fimc_pipeline_s_stream - call s_stream() on pipeline subdevs
  @ep: video pipeline structure
  @on: passed as the s_stream() callback argument
			
			  If neither CSIS nor FIMC was set up,
			  it's impossible to have any sensors
			
			  Sensor must be already discovered if we
			  aren't in the user_subdev_api mode
 Get pipeline sink entity 
		
		  Sensor could have been linked between open and STREAMON -
		  check if this is the case.
 Media pipeline operations for the FIMCFIMC-LITE video device driver 
		
		  MIPI CSI-2: only input mux selection and
		  the sensor's clock frequency is needed.
	
	  For FIMC-IS handled sensors, that are placed under i2c-isp device
	  node, FIMC is connected to the FIMC-IS through its ISP Writeback
	  input. Sensors are attached to the FIMC-LITE hostdata interface
	  directly or through MIPI-CSIS, depending on the external media bus
	  used. This needs to be handled in a more reliable way, not by just
	  checking parent's node name.
 Parse port node and register as a sub-device any sensor specified there. 
 Register all SoC external sub-devices 
	
	  Runtime resume one of the FIMC entities to make sure
	  the sclk_cam clocks are not globally disabled.
 Attach sensors linked to MIPI CSI-2 receivers 
 The csis node can have only port subnode. 
 Attach sensors listed in the parallel-ports node 
  MIPI-CSIS, FIMC and FIMC-LITE platform devices registration.
 Allocate pipeline object for the ISP capture video node. 
 Lock to ensure dev->driver won't change. 
 Some subdev didn't probe successfully id drvdata is NULL 
 Register FIMC, FIMC-LITE and CSIS media entities 
 If driver of any entity isn't ready try all again later. 
  __fimc_md_create_fimc_sink_links - create links to all FIMC entities
  @fmd: fimc media device
  @source: the source entity to create links to all fimc entities from
  @sensor: sensor subdev linked to FIMC[fimc_id] entity, may be null
  @pad: the source entity pad index
  @link_mask: bitmask of the fimc devices for which link should be enabled
 Skip direct FIMC links in the logical FIMC-IS sensor path 
		
		  Some FIMC variants are not fitted with camera capture
		  interface. Skip creating a link from sensor for those.
 Notify FIMC capture subdev entity 
 Notify FIMC-LITE subdev entity 
 Create links from FIMC-LITE source pads to other entities 
 FIMC-LITE's subdev and video node 
 Link from FIMC-LITE to IS-ISP subdev 
 Create FIMC-IS links 
 Link from FIMC-IS-ISP subdev to FIMC 
 Link from FIMC-IS-ISP subdev to fimc-is-isp.capture video node 
 Skip this link if the fimc-is-isp video node driver isn't built-in 
  fimc_md_create_links - create default links between registered entities
  @fmd: fimc media device
  Parallel interface sensor entities are connected directly to FIMC capture
  entities. The sensors using MIPI CSIS bus are connected through immutable
  link with CSI receiver entity specified by mux_id. Any registered CSIS
  entity has a link to each registered FIMC capture entity. Enabled links
  are created by default between each subsequent registered sensor and
  subsequent FIMC capture entity. The number of default active links is
  determined by the number of available sensors or FIMC entities,
  whichever is less.
 Create immutable links between each FIMC's subdev and video node 
  The peripheral sensor and CAM_BLK (PIXELASYNCMx) clocks management.
 Writeback (PIXELASYNCMx) clocks 
	
	  For now get only PIXELASYNCM1 clock (Writeback BISP),
	  leave PIXELASYNCM0 out for the LCD Writeback driver.
	
	  Nothing to do if we are disabling the pipeline, some link
	  has been disconnected and p->subdevs array is cleared now.
 Locking: called with entity->graph_obj.mdev->graph_mutex mutex held. 
	
	  Walk current graph and call the pipeline openclose routine for each
	  opened video node that belongs to the graph of entities connected
	  through active links. This is needed as we cannot power onoff the
	  subdevs in random order.
 Before link disconnection 
 TODO: Link state change validation 
 After link activation 
  This device attribute is to select video pipeline configuration method.
  There are following valid values:
   vid-dev - for V4L2 video node API only, subdevice will be configured
   by the host driver.
   sub-dev - for media controller API, subdevs must be configured in user
   space before starting streaming.
 It's safe since clk_register() will duplicate the string. 
 Find platform data for this sensor subdev 
	
	  FIMC platform devices need to be registered before the sclk_cam
	  clocks provider, as one of these devices needs to be activated
	  to enable the clock.
 SPDX-License-Identifier: GPL-2.0
 Copyright (c) 2016 MediaTek Inc.
 Author: Tiffany Lin <tiffany.lin@mediatek.com>
 timeout 
 SPDX-License-Identifier: GPL-2.0
 SPDX-License-Identifier: GPL-2.0
  Copyright (c) 2016 MediaTek Inc.
  Author: PC Chen <pc.chen@mediatek.com>
          Tiffany Lin <tiffany.lin@mediatek.com>
 Use M2M stateless helper if relevant 
 Use M2M stateless helper if relevant 
		
		  Find next closer width align 64, heign align 64, size align
		  64 rectangle
		  Note: This only get default value, the real HW needed value
		        only available when ctx in MTK_STATE_HEADER state
 set to default value if header info not ready yet
 set to default value if header info not ready yet
	
	  Setting OUTPUT format after OUTPUT buffers are allocated is invalid
	  if using the stateful API.
	
	  Setting CAPTURE format after CAPTURE buffers are allocated is
	  invalid.
	
	  If using the stateless API, S_FMT should have the effect of setting
	  the CAPTURE queue resolution no matter which queue it was called on.
		 Until STREAMOFF is called on the CAPTURE queue
		  (acknowledging the event), the driver operates as if
		  the resolution hasn't changed yet.
		  So we just return picinfo yet, and update picinfo in
		  stop_streaming hook function
		
		  Width and height are set to the dimensions
		  of the movie, the buffer is bigger and
		  further processing stages should crop to this
		  rectangle.
		
		  Set pixelformat to the format in which mt vcodec
		  outputs the decoded frame
		
		  This is run on OUTPUT
		  The buffer contains compressed image
		  so width and height have no meaning.
		  Assign value here to pass v4l2-compliance test
		 Until STREAMOFF is called on the CAPTURE queue
		  (acknowledging the event), the driver operates
		  as if the resolution hasn't changed yet, i.e.
		  VIDIOC_G_FMT< etc. return previous resolution.
		  So we update picinfo here
 SPDX-License-Identifier: GPL-2.0
	
	  The handler we receive takes a void  as its first argument. We
	  cannot change this because it needs to be passed down to the rproc
	  subsystem when SCP is used. VPU takes a const argument, which is
	  more constrained, so the conversion below is safe.
 SPDX-License-Identifier: GPL-2.0
 SPDX-License-Identifier: GPL-2.0
  Copyright (c) 2016 MediaTek Inc.
  Author: PC Chen <pc.chen@mediatek.com>
          Tiffany Lin <tiffany.lin@mediatek.com>
 SPDX-License-Identifier: GPL-2.0
 Copyright (c) 2016 MediaTek Inc.
 Author: PC Chen <pc.chen@mediatek.com>
	Tiffany Lin <tiffany.lin@mediatek.com>
 For encoder, this will enable logs in venc
bool mtk_vcodec_dbg;
EXPORT_SYMBOL(mtk_vcodec_dbg);
 The log level of v4l2 encoder or decoder driver.
int mtk_v4l2_dbg_level;
EXPORT_SYMBOL(mtk_v4l2_dbg_level);
void __iomem mtk_vcodec_get_reg_addr(struct mtk_vcodec_ctx data,
					unsigned int reg_idx)
{
	struct mtk_vcodec_ctx ctx = (struct mtk_vcodec_ctx )data;
	if (!data || reg_idx >= NUM_MAX_VCODEC_REG_BASE) {
		mtk_v4l2_err("Invalid arguments, reg_idx=%d", reg_idx);
		return NULL;
	}
	return ctx->dev->reg_base[reg_idx];
}
EXPORT_SYMBOL(mtk_vcodec_get_reg_addr);
int mtk_vcodec_mem_alloc(struct mtk_vcodec_ctx data,
			struct mtk_vcodec_mem mem)
{
	unsigned long size = mem->size;
	struct mtk_vcodec_ctx ctx = (struct mtk_vcodec_ctx )data;
	struct device dev = &ctx->dev->plat_dev->dev;
	mem->va = dma_alloc_coherent(dev, size, &mem->dma_addr, GFP_KERNEL);
	if (!mem->va) {
		mtk_v4l2_err("%s dma_alloc size=%ld failed!", dev_name(dev),
			     size);
		return -ENOMEM;
	}
	mtk_v4l2_debug(3, "[%d]  - va      = %p", ctx->id, mem->va);
	mtk_v4l2_debug(3, "[%d]  - dma     = 0x%lx", ctx->id,
		       (unsigned long)mem->dma_addr);
	mtk_v4l2_debug(3, "[%d]    size = 0x%lx", ctx->id, size);
	return 0;
}
EXPORT_SYMBOL(mtk_vcodec_mem_alloc);
void mtk_vcodec_mem_free(struct mtk_vcodec_ctx data,
			struct mtk_vcodec_mem mem)
{
	unsigned long size = mem->size;
	struct mtk_vcodec_ctx ctx = (struct mtk_vcodec_ctx )data;
	struct device dev = &ctx->dev->plat_dev->dev;
	if (!mem->va) {
		mtk_v4l2_err("%s dma_free size=%ld failed!", dev_name(dev),
			     size);
		return;
	}
	mtk_v4l2_debug(3, "[%d]  - va      = %p", ctx->id, mem->va);
	mtk_v4l2_debug(3, "[%d]  - dma     = 0x%lx", ctx->id,
		       (unsigned long)mem->dma_addr);
	mtk_v4l2_debug(3, "[%d]    size = 0x%lx", ctx->id, size);
	dma_free_coherent(dev, size, mem->va, mem->dma_addr);
	mem->va = NULL;
	mem->dma_addr = 0;
	mem->size = 0;
}
EXPORT_SYMBOL(mtk_vcodec_mem_free);
void mtk_vcodec_set_curr_ctx(struct mtk_vcodec_dev dev,
	struct mtk_vcodec_ctx ctx)
{
	unsigned long flags;
	spin_lock_irqsave(&dev->irqlock, flags);
	dev->curr_ctx = ctx;
	spin_unlock_irqrestore(&dev->irqlock, flags);
}
EXPORT_SYMBOL(mtk_vcodec_set_curr_ctx);
struct mtk_vcodec_ctx mtk_vcodec_get_curr_ctx(struct mtk_vcodec_dev dev)
{
	unsigned long flags;
	struct mtk_vcodec_ctx ctx;
	spin_lock_irqsave(&dev->irqlock, flags);
	ctx = dev->curr_ctx;
	spin_unlock_irqrestore(&dev->irqlock, flags);
	return ctx;
}
EXPORT_SYMBOL(mtk_vcodec_get_curr_ctx);
MODULE_LICENSE("GPL v2");
MODULE_DESCRIPTION("Mediatek video codec driver");
 SPDX-License-Identifier: GPL-2.0
  Copyright (c) 2016 MediaTek Inc.
  Author: PC Chen <pc.chen@mediatek.com>
          Tiffany Lin <tiffany.lin@mediatek.com>
 Wake up context wait_queue 
 check if HW active or not 
 clear interrupt 
		
		  Does nothing if firmware was already loaded.
			
			  Return 0 if downloading firmware successfully,
			  otherwise it is failed
 Deinit when failure occurred 
	
	  Call v4l2_m2m_ctx_release before mtk_vcodec_dec_release. First, it
	  makes sure the worker thread is not running after vdec_if_deinit.
	  Second, the decoder will be flushed and all the buffers will be
	  returned in stop_streaming.
 SPDX-License-Identifier: GPL-2.0
  Copyright (c) 2016 MediaTek Inc.
  Author: PoChun Lin <pochun.lin@mediatek.com>
 Firmware version field value is unspecified on MT8173. 
 Check firmware version. 
 SPDX-License-Identifier: GPL-2.0
  struct mtk_stateless_control  - CID control type
  @cfg: control configuration
  @codec_type: codec type (V4L2 pixel format) for CID control type
 Apply request controls. 
 If an OUTPUT buffer, we may need to update the state 
 We expect exactly one buffer with the request 
 Support request api for output plane 
 SPDX-License-Identifier: GPL-2.0
  Copyright (c) 2016 MediaTek Inc.
  Author: Daniel Hsiao <daniel.hsiao@mediatek.com>
 	Jungchang Tsao <jungchang.tsao@mediatek.com>
 	Tiffany Lin <tiffany.lin@mediatek.com>
 SPDX-License-Identifier: GPL-2.0
 Copyright (c) 2016 MediaTek Inc.
 Author: Tiffany Lin <tiffany.lin@mediatek.com>
 SPDX-License-Identifier: GPL-2.0
  Copyright (c) 2016 MediaTek Inc.
  Author: Tiffany Lin <tiffany.lin@mediatek.com>
 SPDX-License-Identifier: GPL-2.0
 Copyright (c) 2016 MediaTek Inc.
 Author: PC Chen <pc.chen@mediatek.com>
	Tiffany Lin <tiffany.lin@mediatek.com>
 Wake up context wait_queue 
	
	  Use simple counter to uniquely identify this context. Only
	  used for logging.
		
		  load fireware to checks if it was loaded already and
		  does nothing in that case
			
			  Return 0 if downloading firmware successfully,
			  otherwise it is failed
 Deinit when failure occurred 
 allocate video device for encoder and register it 
 SPDX-License-Identifier: GPL-2.0
  Copyright (c) 2016 MediaTek Inc.
  Author: PC Chen <pc.chen@mediatek.com>
 mapping VPU address to kernel virtual address 
 the content in vsi is initialized to 0 in VPU 
 Set default ABI version if dealing with unversioned firmware. 
	
	  Instance ID is only used if ABI version >= 2. Initialize it with
	  garbage by default.
 Firmware version field does not exist on MT8173. 
 Check firmware version. 
  vpu_dec_ipi_handler - Handler for VPU ipi message.
  @data: ipi message
  @len : length of ipi message
  @priv: callback private data which is passed by decoder when register.
  This function runs in interrupt context and it means there's an IPI MSG
  from VPU.
 SPDX-License-Identifier: GPL-2.0
 Copyright (c) 2016 MediaTek Inc.
 Author: PC Chen <pc.chen@mediatek.com>
         Tiffany Lin <tiffany.lin@mediatek.com>
 V4L2 specification suggests the driver corrects the format struct if any of
  the dimensions is unsupported
		 find next closer width align 16, heign align 32, size align
		  64 rectangle
 Config visible resolution 
 Config coded resolution 
 Only support crop from (0,0) 
	
	  Complete flush if the user dequeued the 0-payload LAST buffer.
	  We check the payload because a buffer with the LAST flag can also
	  be seen during resolution changes. If we happen to be flushing at
	  that time, the last buffer before the resolution changes could be
	  misinterpreted for the buffer generated by the flush and terminate
	  it earlier than we want.
		
		  Last CAPTURE buffer is dequeued, we can allow another flush
		  to take place.
 Calling START or STOP is invalid if a flush is in progress 
	 Once state turn into MTK_STATE_ABORT, we need stop_streaming
	   to clear it
 Do the initialization when both start_streaming have been called 
		
		  FIXME: This check is not needed as only active buffers
		  can be marked as done.
 STREAMOFF on the CAPTURE queue completes any ongoing flush 
			
			  STREAMOFF could be called before the flush buffer is
			  dequeued. Check whether empty flush buf is still in
			  queue before removing it.
			
			  If we are in the middle of a flush, put the flush
			  buffer back into the queue so the next CAPTURE
			  buffer gets returned with the LAST flag set.
 Release the encoder if both streams are stopped. 
 Don't upcast the empty flush buffer 
  v4l2_m2m_streamoff() holds dev_mutex and waits mtk_venc_worker()
  to call v4l2_m2m_job_finish().
  If mtk_venc_worker() tries to acquire dev_mutex, it will deadlock.
  So this function must not try to acquire dev->dev_mutex.
  This means v4l2 ioctls and mtk_venc_worker() can run at the same time.
  mtk_venc_worker() should be carefully implemented to avoid bugs.
	 check dst_buf, dst_buf may be removed in device_run
	  to stored encdoe header so we need check dst_buf and
	  call job_finish here to prevent recursion
	
	  If we see the flush buffer, send an empty buffer with the LAST flag
	  to the client. is_flushing will be reset at the time the buffer
	  is dequeued.
 encode h264 spspps header 
	 Note: VB2_USERPTR works with dma-contig because mt8173
	  support iommu
	  https:patchwork.kernel.orgpatch8335461
	  https:patchwork.kernel.orgpatch7596181
 SPDX-License-Identifier: GPL-2.0
  This function tries to clean all display buffers, the buffers will return
  in display order.
  Note the buffers returned from codec driver may still be in driver's
  reference list.
  This function tries to clean all capture buffers that are not used as
  reference buffers by codec driver any more
  In this case, we need re-queue buffer to vb2 buffer if user space
  already returns this buffer to v4l2 or this buffer is just the output of
  previous spsppsresolution change decode, or do nothing if user
  space still owns this buffer
			
			  After decode spspps or non-display buffer, we don't
			  need to return capture buffer to user space, but
			  just re-queue this capture buffer to vb2 queue.
			  This reduce overheads that dqq unused capture
			  buffer. In this case, queued_in_vb2 = true.
			
			  If buffer in v4l2 driver but not in vb2 queue yet,
			  and we get this buffer from free_list, it means
			  that codec driver do not use this buffer as
			  reference buffer anymore. We should q buffer to vb2
			  queue, so later work thread could get this buffer
			  for decode. In this case, queued_in_vb2 = false
			  means this buffer is not from previous decode
			  output.
			
			  Codec driver do not need to reference this capture
			  buffer and this buffer is not in v4l2 driver.
			  Then we don't need to do any thing, just add log when
			  we need to debug buffer flow.
			  When this buffer q from user space, it could
			  directly q to vb2 buffer
 update dst buf status 
		
		  we only return src buffer with VB2_BUF_STATE_DONE
		  when decode success without resolution change
		
		  On encountering a resolution change in the stream.
		  The driver must first process and decode all
		  remaining buffers from before the resolution change
		  point, so call flush decode here
		
		  After all buffers containing decoded frames from
		  before the resolution change point ready to be
		  dequeued on the CAPTURE queue, the driver sends a
		  V4L2_EVENT_SOURCE_CHANGE event for source change
		  type V4L2_EVENT_SRC_CH_RESOLUTION
	
	  check if this buffer is ready to be used after decode
 This shouldn't happen. Just in case. 
		
		  fb == NULL means to parse SPSPPS header or
		  resolution info in src_mem. Decode can fail
		  if there is no SPS header or picture info
		  in bs
	
	  H264. Baseline  Extended decoding is not supported.
 SPDX-License-Identifier: GPL-2.0
  Copyright (c) 2016 MediaTek Inc.
  Author: Daniel Hsiao <daniel.hsiao@mediatek.com>
          PoChun Lin <pochun.lin@mediatek.com>
 This ac_tag is vp8 frame tag. 
  enum venc_vp8_vpu_work_buf - vp8 encoder buffer index
  struct venc_vp8_vpu_config - Structure for vp8 encoder configuration
                               AP-WR : AP is writerreader on this item
                               VPU-WR: VPU is writereader on this item
  @input_fourcc: input fourcc
  @bitrate: target bitrate (in bps)
  @pic_w: picture width. Picture size is visible stream resolution, in pixels,
          to be used for display purposes; must be smaller or equal to buffer
          size.
  @pic_h: picture height
  @buf_w: buffer width (with 16 alignment). Buffer size is stream resolution
          in pixels aligned to hardware requirements.
  @buf_h: buffer height (with 16 alignment)
  @gop_size: group of picture size (key frame)
  @framerate: frame rate in fps
  @ts_mode: temporal scalability mode (0: disable, 1: enable)
 	     support three temporal layers - 0: 7.5fps 1: 7.5fps 2: 15fps.
  struct venc_vp8_vpu_buf - Structure for buffer information
                            AP-WR : AP is writerreader on this item
                            VPU-WR: VPU is writereader on this item
  @iova: IO virtual address
  @vpua: VPU side memory addr which is used by RC_CODE
  @size: buffer size (in bytes)
  struct venc_vp8_vsi - Structure for VPU driver control and info share
                        AP-WR : AP is writerreader on this item
                        VPU-WR: VPU is writereader on this item
  This structure is allocated in VPU side and shared to AP side.
  @config: vp8 encoder configuration
  @work_bufs: working buffer information in VPU side
  The work_bufs here is for storing the 'size' info shared to AP side.
  The similar item in struct venc_vp8_inst is for memory allocation
  in AP side. The AP driver will copy the 'size' from here to the one in
  struct mtk_vcodec_mem, then invoke mtk_vcodec_mem_alloc to allocate
  the buffer. After that, bypass the 'dma_addr' to the 'iova' field here for
  register setting in VPU side.
  struct venc_vp8_inst - vp8 encoder AP driver instance
  @hw_base: vp8 encoder hardware register base
  @work_bufs: working buffer
  @work_buf_allocated: working buffer allocated flag
  @frm_cnt: encoded frame count, it's used for I-frame judgement and
 	     reset when force intra cmd received.
  @ts_mode: temporal scalability mode (0: disable, 1: enable)
 	     support three temporal layers - 0: 7.5fps 1: 7.5fps 2: 15fps.
  @vpu_inst: VPU instance to exchange information between AP and VPU
  @vsi: driver structure allocated by VPU side and shared to AP side for
 	 control and info share
  @ctx: context for v4l2 layer integration
 Buffers need to be freed by AP. 
		
		  This 'wb' structure is set by VPU side and shared to AP for
		  buffer allocation and IO virtual addr mapping. For most of
		  the buffers, AP will allocate the buffer according to 'size'
		  field and store the IO virtual addr in 'iova' field. For the
		  RC_CODEx buffers, they are pre-allocated in the VPU side
		  because they are inside VPU SRAM, and save the VPU addr in
		  the 'vpua' field. The AP will translate the VPU addr to the
		  corresponding IO virtual addr and store in 'iova' field.
		
		  This RC_CODEx is pre-allocated by VPU and saved in VPU addr.
		  So we need use memcpy to copy RC_CODEx from VPU addr into IO
		  virtual addr in 'iova' field for reg setting in VPU side.
  Compose ac_tag, bitstream header and bitstream payload into
  one bitstream buffer.
 if a frame is key frame, not_key is 0 
 key frame 
	
	 (1) The vp8 bitstream header and body are generated by the HW vp8
	 encoder separately at the same time. We cannot know the bitstream
	 header length in advance.
	 (2) From the vp8 spec, there is no stuffing byte allowed between the
	 ac tag, bitstream header and bitstream body.
	
	  VENC_SET_PARAM_TS_MODE must be called before VENC_SET_PARAM_ENC
 SPDX-License-Identifier: GPL-2.0
  Copyright (c) 2016 MediaTek Inc.
  Author: Jungchang Tsao <jungchang.tsao@mediatek.com>
          Daniel Hsiao <daniel.hsiao@mediatek.com>
          PoChun Lin <pochun.lin@mediatek.com>
  enum venc_h264_frame_type - h264 encoder output bitstream frame type
  enum venc_h264_vpu_work_buf - h264 encoder buffer index
  enum venc_h264_bs_mode - for bs_mode argument in h264_enc_vpu_encode
  struct venc_h264_vpu_config - Structure for h264 encoder configuration
                                AP-WR : AP is writerreader on this item
                                VPU-WR: VPU is writereader on this item
  @input_fourcc: input fourcc
  @bitrate: target bitrate (in bps)
  @pic_w: picture width. Picture size is visible stream resolution, in pixels,
          to be used for display purposes; must be smaller or equal to buffer
          size.
  @pic_h: picture height
  @buf_w: buffer width. Buffer size is stream resolution in pixels aligned to
          hardware requirements.
  @buf_h: buffer height
  @gop_size: group of picture size (idr frame)
  @intra_period: intra frame period
  @framerate: frame rate in fps
  @profile: as specified in standard
  @level: as specified in standard
  @wfd: WFD mode 1:on, 0:off
  struct venc_h264_vpu_buf - Structure for buffer information
                             AP-WR : AP is writerreader on this item
                             VPU-WR: VPU is writereader on this item
  @iova: IO virtual address
  @vpua: VPU side memory addr which is used by RC_CODE
  @size: buffer size (in bytes)
  struct venc_h264_vsi - Structure for VPU driver control and info share
                         AP-WR : AP is writerreader on this item
                         VPU-WR: VPU is writereader on this item
  This structure is allocated in VPU side and shared to AP side.
  @config: h264 encoder configuration
  @work_bufs: working buffer information in VPU side
  The work_bufs here is for storing the 'size' info shared to AP side.
  The similar item in struct venc_h264_inst is for memory allocation
  in AP side. The AP driver will copy the 'size' from here to the one in
  struct mtk_vcodec_mem, then invoke mtk_vcodec_mem_alloc to allocate
  the buffer. After that, bypass the 'dma_addr' to the 'iova' field here for
  register setting in VPU side.
  struct venc_h264_inst - h264 encoder AP driver instance
  @hw_base: h264 encoder hardware register base
  @work_bufs: working buffer
  @pps_buf: buffer to store the pps bitstream
  @work_buf_allocated: working buffer allocated flag
  @frm_cnt: encoded frame count
  @prepend_hdr: when the v4l2 layer send VENC_SET_PARAM_PREPEND_HEADER cmd
   through h264_enc_set_param interface, it will set this flag and prepend the
   spspps in h264_enc_encode function.
  @vpu_inst: VPU instance to exchange information between AP and VPU
  @vsi: driver structure allocated by VPU side and shared to AP side for
 	 control and info share
  @ctx: context for v4l2 layer integration
	 Except the SKIP_FRAME buffers,
	  other buffers need to be freed by AP.
		
		  This 'wb' structure is set by VPU side and shared to AP for
		  buffer allocation and IO virtual addr mapping. For most of
		  the buffers, AP will allocate the buffer according to 'size'
		  field and store the IO virtual addr in 'iova' field. There
		  are two exceptions:
		  (1) RC_CODE buffer, it's pre-allocated in the VPU side, and
		  save the VPU addr in the 'vpua' field. The AP will translate
		  the VPU addr to the corresponding IO virtual addr and store
		  in 'iova' field for reg setting in VPU side.
		  (2) SKIP_FRAME buffer, it's pre-allocated in the VPU side,
		  and save the VPU addr in the 'vpua' field. The AP will
		  translate the VPU addr to the corresponding AP side virtual
		  address and do some memcpy access to move to bitstream buffer
		  assigned by v4l2 layer.
			
			  This RC_CODE is pre-allocated by VPU and saved in VPU
			  addr. So we need use memcpy to copy RC_CODE from VPU
			  addr into IO virtual addr in 'iova' field for reg
			  setting in VPU side.
 the pps_buf is used by AP side only 
 IDR frame 
 I frame 
 Note: B frames are not supported 
	
	  skip frame case: The skip frame buffer is composed by vpu side only,
	  it does not trigger the hw, so skip the wait interrupt operation.
 SPDX-License-Identifier: GPL-2.0
  Copyright (c) 2016 MediaTek Inc.
  Author: Daniel Hsiao <daniel.hsiao@mediatek.com>
 	Kai-Sean Yang <kai-sean.yang@mediatek.com>
 	Tiffany Lin <tiffany.lin@mediatek.com>
  struct vp9_dram_buf - contains buffer info for vpu
  @va : cpu address
  @pa : iova address
  @sz : buffer size
  @padding : for 64 bytes alignment
  struct vp9_fb_info - contains frame buffer info
  @fb : frmae buffer
  @reserved : reserved field used by vpu
  struct vp9_ref_cnt_buf - contains reference buffer information
  @buf : referenced frame buffer
  @ref_cnt : referenced frame buffer's reference count.
 	When reference count=0, remove it from reference list
  struct vp9_ref_buf - contains current frame's reference buffer information
  @buf : reference buffer
  @idx : reference buffer index to frm_bufs
  @reserved : reserved field used by vpu
  struct vp9_sf_ref_fb - contains frame buffer info
  @fb : super frame reference frame buffer
  @used : this reference frame info entry is used
  @padding : for 64 bytes size align
  struct vdec_vp9_vsi - shared buffer between host and VPU firmware
 	AP-WR : AP is writerreader on this item
 	VPU-WR: VPU is writereader on this item
  @sf_bs_buf : super frame backup buffer (AP-W, VPU-R)
  @sf_ref_fb : record supoer frame reference buffer information
 	(AP-RW, VPU-RW)
  @sf_next_ref_fb_idx : next available super frame (AP-W, VPU-R)
  @sf_frm_cnt : super frame count, filled by vpu (AP-R, VPU-W)
  @sf_frm_offset : super frame offset, filled by vpu (AP-R, VPU-W)
  @sf_frm_sz : super frame size, filled by vpu (AP-R, VPU-W)
  @sf_frm_idx : current super frame (AP-R, VPU-W)
  @sf_init : inform super frame info already parsed by vpu (AP-R, VPU-W)
  @fb : capture buffer (AP-W, VPU-R)
  @bs : bs buffer (AP-W, VPU-R)
  @cur_fb : current show capture buffer (AP-RW, VPU-RW)
  @pic_w : picture width (AP-R, VPU-W)
  @pic_h : picture height (AP-R, VPU-W)
  @buf_w : codec width (AP-R, VPU-W)
  @buf_h : coded height (AP-R, VPU-W)
  @buf_sz_y_bs : ufo compressed y plane size (AP-R, VPU-W)
  @buf_sz_c_bs : ufo compressed cbcr plane size (AP-R, VPU-W)
  @buf_len_sz_y : size used to store y plane ufo info (AP-R, VPU-W)
  @buf_len_sz_c : size used to store cbcr plane ufo info (AP-R, VPU-W)
  @profile : profile sparsed from vpu (AP-R, VPU-W)
  @show_frame : [BIT(0)] display this frame or not (AP-R, VPU-W)
 	[BIT(1)] reset segment data or not (AP-R, VPU-W)
 	[BIT(2)] trig decoder hardware or not (AP-R, VPU-W)
 	[BIT(3)] ask VPU to set bits(0~4) accordingly (AP-W, VPU-R)
 	[BIT(4)] do not reset segment data before every frame (AP-R, VPU-W)
  @show_existing_frame : inform this frame is show existing frame
 	(AP-R, VPU-W)
  @frm_to_show_idx : index to show frame (AP-R, VPU-W)
  @refresh_frm_flags : indicate when frame need to refine reference count
 	(AP-R, VPU-W)
  @resolution_changed : resolution change in this frame (AP-R, VPU-W)
  @frm_bufs : maintain reference buffer info (AP-RW, VPU-RW)
  @ref_frm_map : maintain reference buffer map info (AP-RW, VPU-RW)
  @new_fb_idx : index to frm_bufs array (AP-R, VPU-W)
  @frm_num : decoded frame number, include sub-frame count (AP-R, VPU-W)
  @mv_buf : motion vector working buffer (AP-W, VPU-R)
  @frm_refs : maintain three reference buffer info (AP-RW, VPU-RW)
  @seg_id_buf : segmentation map working buffer (AP-W, VPU-R)
  struct vdec_vp9_inst - vp9 decode instance
  @mv_buf : working buffer for mv
  @seg_id_buf : working buffer for segmentation map
  @dec_fb : vdec_fb node to link fb to different fb_xxx_list
  @available_fb_node_list : current available vdec_fb node
  @fb_use_list : current used or referenced vdec_fb
  @fb_free_list : current available to free vdec_fb
  @fb_disp_list : current available to display vdec_fb
  @cur_fb : current frame buffer
  @ctx : current decode context
  @vpu : vpu instance information
  @vsi : shared buffer between host and VPU firmware
  @total_frm_cnt : total frame count, it do not include sub-frames in super
 	    frame
  @mem : instance memory information
 For each sub-frame except the last one, the driver will dynamically
  allocate reference buffer by calling vp9_get_sf_ref_fb()
  The last sub-frame will use the original fb provided by the
  vp9_dec_decode() interface
 Set the va again 
 Set the va again 
 If any buffer updating is signaled it should be done here. 
		 This frame is show exist frame and no decode output
		  copy frame data from frm_to_show to current CAPTURE
		  buffer
			 After resolution change case, current CAPTURE buffer
			  may have less buffer size than frm_to_show buffer
			  size
	 when ref_cnt ==0, move this fb to fb_free_list. v4l2 driver will
	  clean fb_free_list
	 if this super frame and it is not last sub-frame, get next fb for
	  sub-frame decode
 Set the va again, since vpu_dec_reset will clear mv_buf in vpu 
 Set the va again, since vpu_dec_reset will clear seg_id_buf in vpu 
		 VPU assign the buffer pointer in its address space,
		  reassign here
 SPDX-License-Identifier: GPL-2.0
  Copyright (c) 2016 MediaTek Inc.
  Author: PC Chen <pc.chen@mediatek.com>
 motion vector size (bytes) for every macro block 
  struct h264_fb - h264 decode frame buffer information
  @vdec_fb_va  : virtual address of struct vdec_fb
  @y_fb_dma    : dma address of Y frame buffer (luma)
  @c_fb_dma    : dma address of C frame buffer (chroma)
  @poc         : picture order count of frame buffer
  @reserved    : for 8 bytes alignment
  struct h264_ring_fb_list - ring frame buffer list
  @fb_list   : frame buffer array
  @read_idx  : read index
  @write_idx : write index
  @count     : buffer count in list
  @reserved  : for 8 bytes alignment
  struct vdec_h264_dec_info - decode information
  @dpb_sz		: decoding picture buffer size
  @resolution_changed  : resolution change happen
  @realloc_mv_buf	: flag to notify driver to re-allocate mv buffer
  @reserved		: for 8 bytes alignment
  @bs_dma		: Input bit-stream buffer dma address
  @y_fb_dma		: Y frame buffer dma address
  @c_fb_dma		: C frame buffer dma address
  @vdec_fb_va		: VDEC frame buffer struct virtual address
  struct vdec_h264_vsi - shared memory for decode information exchange
                         between VPU and Host.
                         The memory is allocated by VPU then mapping to Host
                         in vpu_dec_init() and freed in vpu_dec_deinit()
                         by VPU.
                         AP-WR : AP is writerreader on this item
                         VPU-WR: VPU is writereader on this item
  @hdr_buf      : Header parsing buffer (AP-W, VPU-R)
  @pred_buf_dma : HW working predication buffer dma address (AP-W, VPU-R)
  @mv_buf_dma   : HW working motion vector buffer dma address (AP-W, VPU-R)
  @list_free    : free frame buffer ring list (AP-WR, VPU-W)
  @list_disp    : display frame buffer ring list (AP-R, VPU-W)
  @dec          : decode information (AP-R, VPU-W)
  @pic          : picture information (AP-R, VPU-W)
  @crop         : crop information (AP-R, VPU-W)
  struct vdec_h264_inst - h264 decoder instance
  @num_nalu : how many nalus be decoded
  @ctx      : point to mtk_vcodec_ctx
  @pred_buf : HW working predication buffer
  @mv_buf   : HW working motion vector buffer
  @vpu      : VPU instance
  @vsi      : VPU shared information
 bs NULL means flush decoder 
 wait decoder done interrupt 
 SPDX-License-Identifier: GPL-2.0
  Copyright (c) 2016 MediaTek Inc.
  Author: Jungchang Tsao <jungchang.tsao@mediatek.com>
 	   PC Chen <pc.chen@mediatek.com>
 Decoding picture buffer size (3 reference frames plus current frame) 
 HW working buffer size (bytes) 
 HW control register address 
 required buffer size (bytes) to store decode information 
  struct vdec_vp8_dec_info - decode misc information
  @working_buf_dma   : working buffer dma address
  @prev_y_dma        : previous decoded frame buffer Y plane address
  @cur_y_fb_dma      : current plane Y frame buffer dma address
  @cur_c_fb_dma      : current plane C frame buffer dma address
  @bs_dma	      : bitstream dma address
  @bs_sz	      : bitstream size
  @resolution_changed: resolution change flag 1 - changed,  0 - not change
  @show_frame	      : display this frame or not
  @wait_key_frame    : wait key frame coming
  struct vdec_vp8_vsi - VPU shared information
  @dec			: decoding information
  @pic			: picture information
  @dec_table		: decoder coefficient table
  @segment_buf		: segmentation buffer
  @load_data		: flag to indicate reload decode data
  struct vdec_vp8_hw_reg_base - HW register base
  @sys		: base address for sys
  @misc	: base address for misc
  @ld		: base address for ld
  @top		: base address for top
  @cm		: base address for cm
  @hwd		: base address for hwd
  @hwb		: base address for hwb
  struct vdec_vp8_vpu_inst - VPU instance for VP8 decode
  @wq_hd	: Wait queue to wait VPU message ack
  @signaled	: 1 - Host has received ack message from VPU, 0 - not receive
  @failure	: VPU execution result status 0 - success, others - fail
  @inst_addr	: VPU decoder instance address
 frame buffer (fb) list
  [available_fb_node_list]  - decode fb are initialized to 0 and populated in
  [fb_use_list]  - fb is set after decode and is moved to this list
  [fb_free_list] - fb is not needed for reference will be moved from
 		     [fb_use_list] to [fb_free_list] and
 		     once user remove fb from [fb_free_list],
 		     it is circulated back to [available_fb_node_list]
  [fb_disp_list] - fb is set after decode and is moved to this list
                    once user remove fb from [fb_disp_list] it is
                    circulated back to [available_fb_node_list]
  struct vdec_vp8_inst - VP8 decoder instance
  @cur_fb		   : current frame buffer
  @dec_fb		   : decode frame buffer node
  @available_fb_node_list : list to store available frame buffer node
  @fb_use_list		   : list to store frame buffer in use
  @fb_free_list	   : list to store free frame buffer
  @fb_disp_list	   : list to store display ready frame buffer
  @working_buf		   : HW decoder working buffer
  @reg_base		   : HW register base address
  @frm_cnt		   : decode frame count
  @ctx			   : V4L2 context
  @vpu			   : VPU instance for decoder
  @vsi			   : VPU share information
 reset HW and enable HW readwrite data function 
 read total 11 bytes 
 put last decode ok frame to fb_free_list 
 available_fb_node_list -> fb_use_list 
 available_fb_node_list -> fb_disp_list 
 bs NULL means flush decoder 
 retrieve widthhight and scale info from header 
 wait decoder done interrupt 
 SPDX-License-Identifier: GPL-2.0
 get used parameters for spspps 
 motion vector size (bytes) for every macro block 
  struct mtk_h264_dpb_info  - h264 dpb information
  @y_dma_addr: Y bitstream physical address
  @c_dma_addr: CbCr bitstream physical address
  @reference_flag: reference picture flag (shortlong term reference picture)
  @field: field picture flag
  struct mtk_h264_sps_param  - parameters for sps
  struct mtk_h264_pps_param  - parameters for pps
 Note that field is indicated by v4l2_buffer.field 
 V4L2_H264_DPB_ENTRY_FLAG_ 
  struct slice_api_h264_decode_param - parameters for decode.
 V4L2_H264_DECODE_PARAM_FLAG_ 
  struct mtk_h264_dec_slice_param  - parameters for decode current frame
  struct h264_fb - h264 decode frame buffer information
  @vdec_fb_va  : virtual address of struct vdec_fb
  @y_fb_dma    : dma address of Y frame buffer (luma)
  @c_fb_dma    : dma address of C frame buffer (chroma)
  @poc         : picture order count of frame buffer
  @reserved    : for 8 bytes alignment
  struct vdec_h264_dec_info - decode information
  @dpb_sz		: decoding picture buffer size
  @resolution_changed  : resoltion change happen
  @realloc_mv_buf	: flag to notify driver to re-allocate mv buffer
  @cap_num_planes	: number planes of capture buffer
  @bs_dma		: Input bit-stream buffer dma address
  @y_fb_dma		: Y frame buffer dma address
  @c_fb_dma		: C frame buffer dma address
  @vdec_fb_va		: VDEC frame buffer struct virtual address
  struct vdec_h264_vsi - shared memory for decode information exchange
                         between VPU and Host.
                         The memory is allocated by VPU then mapping to Host
                         in vpu_dec_init() and freed in vpu_dec_deinit()
                         by VPU.
                         AP-WR : AP is writerreader on this item
                         VPU-WR: VPU is writereader on this item
  @pred_buf_dma : HW working predication buffer dma address (AP-W, VPU-R)
  @mv_buf_dma   : HW working motion vector buffer dma address (AP-W, VPU-R)
  @dec          : decode information (AP-R, VPU-W)
  @pic          : picture information (AP-R, VPU-W)
  @crop         : crop information (AP-R, VPU-W)
  @h264_slice_params : the parameters that hardware use to decode
  struct vdec_h264_slice_inst - h264 decoder instance
  @num_nalu : how many nalus be decoded
  @ctx      : point to mtk_vcodec_ctx
  @pred_buf : HW working predication buffer
  @mv_buf   : HW working motion vector buffer
  @vpu      : VPU instance
  @vsi_ctx  : Local VSI data for this decoding context
  @h264_slice_param : the parameters that hardware use to decode
  @dpb : decoded picture buffer used to store reference buffer information
 1 for short term reference, 2 for long term reference 
	
	  num_slices is a leftover from the old H.264 support and is ignored
	  by the firmware.
  Move DPB entries of dec_param that refer to a frame already existing in dpb
  into the already existing slot in dpb, and move other entries into new slots.
  This function is an adaptation of the similarly-named function in
  hantro_h264.c.
 Disable all entries by default, and mark the ones in use. 
 Try to match new DPB entries with existing ones by their POCs. 
		
		  To cut off some comparisons, iterate only on target DPB
		  entries were already used.
 Don't reiterate on this one. 
 For entries that could not be matched, use remaining free slots. 
		
		  Both arrays are of the same sizes, so there is no way
		  we can end up with no space in target array, unless
		  something is buggy.
  The firmware expects unused reflist entries to have the value 0x20.
 Build the reference lists 
 Adapt the built lists to the firmware's expectations 
 bs NULL means flush decoder 
	
	  Reconstruct the first byte of the NAL unit, as the firmware requests
	  that information to be passed even though it is present in the stream
	  itself...
 wait decoder done interrupt 
 SPDX-License-Identifier: GPL-2.0+
  Driver for Cadence MIPI-CSI2 RX Controller v1.3
  Copyright (C) 2017 Cadence Design Systems Inc.
	
	  Used to prevent race conditions between multiple,
	  concurrent calls to start and stop.
 Remote source 
	
	  Even the unused lanes need to be mapped. In order to avoid
	  to map twice to the same physical lane, keep the lanes used
	  in the previous loop, and only map unused physical lanes to
	  the rest of our logical lanes.
	
	  Create a static mapping between the CSI virtual channels
	  and the output stream.
	 
	  This should be enhanced, but v4l2 lacks the support for
	  changing that mapping dynamically.
	 
	  We also cannot enable and disable independent streams here,
	  hence the reference counting.
		
		  If we're not the first users, there's no need to
		  enable the whole controller.
		
		  Let the last user turn off the lights.
	
	  FIXME: Once we'll have external D-PHY support, the check
	  will need to be removed.
	
	  FIXME: Once we'll have internal D-PHY support, the check
	  will need to be removed.
 Create our media pads 
 SPDX-License-Identifier: GPL-2.0+
  Driver for Cadence MIPI-CSI2 TX Controller
  Copyright (C) 2017-2019 Cadence Design Systems Inc.
 CSI2TX V2 Registers 
 CSI2TX Variant Operations 
	
	  Used to prevent race conditions between multiple,
	  concurrent calls to start and stop.
 Multiplexed pad? 
 Multiplexed pad? 
 Set Wake Up value in the D-PHY 
  Finishes the D-PHY initialization
  reg dphy cfg value to be used
 Enable our (clock and data) lanes 
 Switch to HS mode 
 Configures D-PHY in CSIv1.3 
 Put our lanes (clock and data) out of reset 
 Configures D-PHY in CSIv2 
 Put our lanes (clock and data) out of reset 
	
	  Create a static mapping between the CSI virtual channels
	  and the input streams.
	 
	  This should be enhanced, but v4l2 lacks the support for
	  changing that mapping dynamically at the moment.
	 
	  We're protected from the userspace setting up links at the
	  same time by the upper layer having called
	  media_pipeline_start().
 Only consider our enabled input pads 
		
		  We use the stream ID there, but it's wrong.
		 
		  A stream could very well send a data type that is
		  not equal to its stream ID. We need to find a
		  proper way to address it.
		
		  TODO: This needs to be calculated based on the
		  output CSI2 clock rate.
 Disable the configuration mode 
		
		  If we're not the first users, there's no need to
		  enable the whole controller.
		
		  Let the last user turn off the lights.
 Create our media pads 
	
	  Only the input pads are considered to have a format at the
	  moment. The CSI link can multiplex various streams with
	  different formats, and we can't expose this in v4l2 right
	  now.
 SPDX-License-Identifier: GPL-2.0-only
  TI VPFE capture Driver
  Copyright (C) 2013 - 2014 Texas Instruments, Inc.
  Benoit Parrot <bparrot@ti.com>
  Lad, Prabhakar <prabhakar.csengg@gmail.com>
 standard information 
  Print Four-character-code (FOURCC) 
	
	  ppc - per pixel count. indicates how many pixels per cell
	  output to SDRAM. example, for ycbcr, it is one y and one c, so 2.
	  raw capture this is 1
 configure VDINT0 
		
		  configure VDINT0 and VDINT1. VDINT1 will be at half
		  of image height
  vpfe_ccdc_restore_defaults()
  This function will write defaults to all CCDC registers
 Disable CCDC 
 set all registers to default value 
 Disable CCDC by resetting all register to default POR values 
 Disabled the module at the CONFIG level 
  vpfe_ccdc_config_ycbcr()
  This function will configure CCDC for YCbCr video capture
	
	  first restore the CCDC registers to default values
	  This is important since we assume default values to be set in
	  a lot of registers that we didn't touch
	
	  configure pixel format, frame format, configure video frame
	  format, enable output to SDRAM, enable internal timing generator
	  and 8bit pack mode
 setup BT.656 sync mode 
		
		  configure the FID, VD, HD pin polarity,
		  fld,hd pol positive, vd negative, 8-bit data
 yc external sync mode 
 configure video window 
	
	  configure the order of y cb cr in SDRAM, and disable latch
	  internal register on vsync
	
	  configure the horizontal line offset. This should be a
	  on 32 byte boundary. So clear LSB 5 bits
 configure the memory line offset 
 two fields are interleaved in memory 
 configure DCSub 
	
	  Configure gain,  Start pixel, No of line to be avg,
	  No of pixelline to be avg, & Enable the Black clamping
 If Black clamping is enable then make dcsub 0 
  vpfe_ccdc_config_raw()
  This function will configure CCDC for Raw capture mode
 Reset CCDC 
 Disable latching function registers on VSYNC  
	
	  Configure the vertical sync polarity(SYN_MODE.VDPOL),
	  horizontal sync polarity (SYN_MODE.HDPOL), frame id polarity
	  (SYN_MODE.FLDPOL), frame format(progressive or interlace),
	  data size(SYNMODE.DATSIZ), &pixel format (Input mode), output
	  SDRAM, enable internal timing generator
 Enable and configure aLaw register if needed 
 Configure video window 
 Configure Black Clamp 
 Configure Black level compensation 
 If data size is 8 bit then pack the data 
	
	  Configure Horizontal offset register. If pack 8 is enabled then
	  1 pixel will take 1 byte
 Set value for SDOFST 
 For interlace inverse mode 
 For interlace non inverse mode 
		
		  Need to clear it in case it was left on
		  after the last capture.
 VD0 interrupt 
 VD1 interrupt 
 VD2 interrupt 
 Clear all interrupts 
 Clear specific VDINT from the status register 
 Acknowledge that we are done with all interrupts 
  vpfe_get_ccdc_image_format - Get image parameters based on CCDC settings
 configure the image window 
 do nothing, since it is default 
 buffer type only applicable for interlaced scan 
  vpfe_config_image_format()
  For a given standard, this functions sets up the default
  pix format & crop values in the vpfe device and ccdc.  It first
  starts with defaults based values from the standard table.
  It then checks if sub device supports get_fmt and then override the
  values based on that.Sets crop values to match with scan resolution
  starting at 0,0. It calls vpfe_config_ccdc_image_format() set the
  values in ccdc
 Save current subdev format 
 Update the crop window based on found values 
 Configure the default format information 
 Clear all VPFE interrupts 
  vpfe_release : This function is based on the vb2_fop_release
  helper function.
  It has been augmented to handle module power management,
  by disablingenabling hw module fcntl clock when necessary.
 Save the singular status before we call the clean-up helper 
 the release helper will cleanup any on-going streaming 
	
	  If this was the last open file.
	  Then de-initialize hw module.
  vpfe_open : This function is based on the v4l2_fh_open helper function.
  It has been augmented to handle module power management,
  by disablingenabling hw module fcntl clock when necessary.
  vpfe_schedule_next_buffer: set next buffer address for capture
  @vpfe : ptr to vpfe device
  This function will get next buffer from the dma queue and
  set the buffer address in the vpfe register for capture.
  the buffer is marked active
  vpfe_process_buffer_complete: process a completed buffer
  @vpfe : ptr to vpfe device
  This function time stamp the buffer and mark it as DONE. It also
  wake up any process waiting on the QUEUE and set the next buffer
  as current
	 interlaced or TB capture check which field
	  we are in hardware
 switch the software maintained field id 
 we are in-sync here,continue 
			
			  One frame is just being captured. If the
			  next frame is available, release the
			  current frame and move on
			
			  based on whether the two fields are stored
			  interleave or separately in memory,
			  reconfigure the CCDC memory address
			
			  if one field is just being captured configure
			  the next frame get the next frame from the empty
			  queue if no frame is available hold on to the
			  current buffer
		
		  out of sync. Recover from any hardware out-of-sync.
		  May loose one frame
  vpfe_isr : ISR handler for vpfe capture (VINT0)
  @irq: irq number
  @dev_id: dev_id ptr
  It changes status of the captured buffer, takes next buffer from the queue
  and sets its address in VPFE registers
 get the format set at output pad of the adjacent subdev 
 set the format at output pad of the adjacent subdev 
 pitch should be 32 bytes aligned 
 default to first entry 
 check forfind a valid widthheight 
 use existing values as default 
	
	  Use current colorspace for now, it will get
	  updated properly during s_fmt
 If streaming is started, return error 
 Just double check nothing has gone wrong 
 Update the crop window based on found values 
 set image capture parameters in the ccdc 
 check for valid format 
  vpfe_get_subdev_input_index - Get subdev index and subdev input index for a
  given app input index
  vpfe_get_app_input - Get app input index for a given subdev input index
  driver stores the input index of the current sub device and translate it
  when application request the current input
 Assumes caller is holding vpfe_dev->lock 
 If streaming is started, return error 
 set the businterface parameter for the sub device in ccdc 
 set the default image parameters in the device 
 Call querystd function of decoder device 
 if trying to set the same std then nothing to do 
 If streaming is started, return error 
  vpfe_calculate_offsets : This function calculates buffers offset
  for top and bottom field
  vpfe_queue_setup - Callback function for buffer setup.
  @vq: vb2_queue ptr
  @nbuffers: ptr to number of buffers requested by application
  @nplanes:: contains number of distinct video planes needed to hold a frame
  @sizes[]: contains the size (in bytes) of each plane.
  @alloc_devs: ptr to allocation context
  This callback function is called when reqbuf() is called to adjust
  the buffer count and buffer size
 Calculate field offset 
  vpfe_buffer_prepare :  callback function for buffer prepare
  @vb: ptr to vb2_buffer
  This is the callback function for buffer prepare when vb2_qbuf()
  function is called. The buffer is prepared and user space virtual address
  or user address is converted into  physical address
  vpfe_buffer_queue : Callback function to add buffer to DMA queue
  @vb: ptr to vb2_buffer
 add the buffer to the DMA queue 
  vpfe_start_streaming : Starts the DMA engine for streaming
  @vb: ptr to vb2_buffer
  @count: number of buffers
 Get the next frame from the buffer queue 
 Remove buffer from the buffer queue 
  vpfe_stop_streaming : Stop the DMA engine
  @vq: ptr to vb2_queue
  This callback stops the DMA engine and any remaining buffers
  in the DMA queue are released.
 Wait for the last frame to be captured 
 release all active buffers 
 If streaming is started, return error 
 If streaming is started, return error 
 vpfe capture driver file operations 
 vpfe capture ioctl operations 
 set first sub device as current one 
 Initialize videobuf2 queue as per the buffer type 
 we only support camera 
  vpfe_probe : This function creates device entries by register
  itself to the V4L2 driver and initializes fields of each
  device objects
 set the driver data in platform device 
 Enabling module functional clock 
 for now just enable it here instead of waiting for the open 
  vpfe_remove : It un-register device from V4L2 driver
 only do full suspend if streaming has started 
		
		  ignore RPM resume errors here, as it is already too late.
		  A check like that should happen earlier, either at
		  open() or just before start streaming.
 Save VPFE context 
 Disable CCDC 
 Disable both master and slave clock 
 Select sleep pin state 
 only do full resume if streaming has started 
 Enable both master and slave clock 
 Restore VPFE context 
 Select default pin state 
 sentinel  },
 SPDX-License-Identifier: GPL-2.0-only
  Framework for ISA radio drivers.
  This takes care of all the V4L2 scaffolding, allowing the ISA drivers
  to concentrate on the actual hardware operation.
  Copyright (C) 2012 Hans Verkuil <hans.verkuil@cisco.com>
 SPDX-License-Identifier: GPL-2.0-only
 SF16-FMR2 and SF16-FMD2 radio driver for Linux
  Copyright (c) 2011 Ondrej Zary
  Original driver was (c) 2000-2002 Ziglio Frediano, freddy77@angelfire.com
  but almost nothing remained here after conversion to generic TEA575x
  implementation
 Modules			
 Initdata			
 request_region		
 outb, outb_p			
 these cards can only use two different ports (0x384 and 0x284) 
 the port is hardwired on SF16-FMR2 
 TEA575x tuner pins 
 PT2254ATC9154A volume control pins 
 volume control presence pin 
 WRITE_ENABLE is inverted, DATA must be high during read 
 TC9154APT2254A volume control 
 18-bit shift register bit definitions 
 bit 12 is ignored 
 bits 15, 16, 17 must be 0 
 write 18-bit shift register, LSB first 
 latch register data 
 FMR2 can have volume control, FMD2 can't (uses SB16 mixer) 
 tuner subdevice of SF16-FMD2 
 avoid errors if a card was already registered at given port 
 SPDX-License-Identifier: GPL-2.0-only
  GemTek radio card driver
  Copyright 1998 Jonas Munsin <jmunsin@iki.fi>
  GemTek hasn't released any specs on the card, so the protocol had to
  be reverse engineered with dosemu.
  Besides the protocol changes, this is mostly a copy of:
     RadioTrack II driver for Linux radio support (C) 1998 Ben Pfaff
     Based on RadioTrack IRadioReveal (C) 1997 M. Kirkwood
     Converted to new API by Alan Cox <alan@lxorguk.ukuu.org.uk>
     Various bugfixes and enhancements by Russell Kroll <rkroll@exploits.org>
  Converted to the radio-isa framework by Hans Verkuil <hans.verkuil@cisco.com>
  Converted to V4L2 API by Mauro Carvalho Chehab <mchehab@kernel.org>
  Note: this card seems to swap the left and right audio channels!
  Fully tested with the Keene USB FM Transmitter and the v4l2-compliance tool.
 Modules			
 Initdata			
 request_region		
 udelay			
 kernel radio structs		
 outb, outb_p			
  Module info.
  Module params.
  Frequency calculation constants.  Intermediate frequency 10.52 MHz (nominal
  value 10.7 MHz), reference divisor 6.39 kHz (nominal 6.25 kHz).
 Clock signal			
 Serial data			
 Chip enable			
 No signal			
 Line mute			
 Standard frequency 3.125 kHz	
 PLL off			
 BU2614  BU2614FS bus size		
 usec 
 usec 
 D0..D15, Frequency data		
 P0..P2, Output port control data	
 unused				
 CT, Frequency measurement beginning data 
 R0..R2, Standard frequency data	
 S, Switch between FMIN  AMIN	
 PS, Swallow counter division (AMIN only)
 unused				
 GT, Frequency measurement time & unlock 
 TS, Test data is input		
  Set data which will be sent to BU2614FS.
  Transmit settings to BU2614FS over GemTek IC.
  Calculate divisor from FM-frequency for BU2614FS (3.125 KHz STDF expected).
  Set FM-frequency.
 FM-mode	
 GT bit set	
  Set mute flag.
 Turn off PLL, disable data output 
 CT bit off	
 FM-mode	
 GT bit off	
 Read bus contents (CE, CK and DA). 
 Write it back with mute flag set. 
  Check if requested card acts like GemTek Radio card.
 Read bus contents before probing. 
	 Try to turn on CE, CK and DA respectively and check if card responds
 Write bus contents back. 
 AOpen FX-3DPro Radio 
 Turn off PLL 
 SPDX-License-Identifier: GPL-2.0-only
  radio-timb.c Timberdale FPGA Radio driver
  Copyright (c) 2009 Intel Corporation
 SPDX-License-Identifier: GPL-2.0-only
  AimsLab RadioTrack (aka RadioVeveal) driver
  Copyright 1997 M. Kirkwood
  Converted to the radio-isa framework by Hans Verkuil <hans.verkuil@cisco.com>
  Converted to V4L2 API by Mauro Carvalho Chehab <mchehab@kernel.org>
  Converted to new API by Alan Cox <alan@lxorguk.ukuu.org.uk>
  Various bugfixes and enhancements by Russell Kroll <rkroll@exploits.org>
  Notes on the hardware (reverse engineered from other peoples'
  reverse engineering of AIMS' code :-)
   Frequency control is done digitally -- ie out(port,encodefreq(95.8));
   The signal strength query is unsurprisingly inaccurate.  And it seems
   to indicate that (on my card, at least) the frequency setting isn't
   too great.  (I have to tune up .025MHz from what the freq should be
   to get a report that the thing is tuned.)
   Volume control is (ugh) analogue:
    out(port, start_increasing_volume);
    wait(a_wee_while);
    out(port, stop_changing_the_volume);
  Fully tested with the Keene USB FM Transmitter and the v4l2-compliance tool.
 Modules			
 Initdata			
 request_region		
 msleep			
 kernel radio structs		
 outb, outb_p			
 bit 5 is not connected 
 active low 
 active low 
 bit set = no signal present 
 volume steady + sigstr + off	
 volume = 0 means mute the card 
 volume down but still "on"	
 make sure it's totally down	
 volume up + sigstr + on	
 volume down + sigstr + on	
 volume steady + sigstr + on	
 Mute card - prevents noisy bootups 
 this ensures that the volume is all the way up  
 volume up but still "on"	
 make sure it's totally up	
 steady volume, mute card	
 SPDX-License-Identifier: GPL-2.0-only
 SF16-FMI, SF16-FMP and SF16-FMD radio driver for Linux radio support
  heavily based on rtrack driver...
  (c) 1997 M. Kirkwood
  (c) 1998 Petr Vandrovec, vandrove@vc.cvut.cz
  Fitted to new interface by Alan Cox <alan@lxorguk.ukuu.org.uk>
  Made working and cleaned up functions <mikael.hedin@irf.se>
  Support for ISAPnP by Ladislav Michl <ladis@psi.cz>
  Notes on the hardware
   Frequency control is done digitally -- ie out(port,encodefreq(95.8));
   No volume control - only muteunmute - you have to use line volume
   control on SB-part of SF16-FMISF16-FMPSF16-FMD
  Converted to V4L2 API by Mauro Carvalho Chehab <mchehab@kernel.org>
 __setup			
 Modules			
 Initdata			
 request_region		
 udelay			
 kernel radio structs		
 outb, outb_p			
 freq in kHz 
 muteunmute 
 was schedule_timeout(HZ7) 
	 rounding in steps of 800 to match the freq
 ladis: this is my card. does any other types exist? 
 SF16-FMI 
 SF16-FMD 
 mute card and set default frequency 
 SPDX-License-Identifier: GPL-2.0-or-later
  A driver for the AverMedia MR 800 USB FM radio. This device plugs
  into both the USB and an analog audio input, so this thing
  only deals with initialization and frequency setting, the
  audio data has to be handled by a sound driver.
  Copyright (c) 2008 Alexey Klimov <klimov.linux@gmail.com>
  Big thanks to authors and contributors of dsbr100.c and radio-si470x.c
  When work was looked pretty good, i discover this:
  http:av-usbradio.sourceforge.netindex.php
  http:sourceforge.netprojectsav-usbradio
  Latest release of theirs project was in 2005.
  Probably, this driver could be improved through using their
  achievements (specifications given).
  Also, Faidon Liambotis <paravoid@debian.org> wrote nice driver for this radio
  in 2007. He allowed to use his driver to improve current mr800 radio driver.
  http:www.spinics.netlistslinux-usb-develmsg10109.html
  Version 0.01:	First working version.
 			It's required to blacklist AverMedia USB Radio
 			in usbhidhid-quirks.c
  Version 0.10:	A lot of cleanups and fixes: unpluging the device,
 			few mutex locks were added, codinstyle issues, etc.
 			Added stereo support. Thanks to
 			Douglas Schilling Landgraf <dougsland@gmail.com> and
 			David Ellingsworth <david@identd.dyndns.org>
 			for discussion, help and support.
  Version 0.11:	Converted to v4l2_device.
  Many things to do:
 	- Correct power management of device (suspend & resume)
 	- Add code for scanning and smooth tuning
 	- Add code for sensitivity value
 	- Correct mistakes
 	- In Japan another FREQ_MIN and FREQ_MAX
 kernel includes 
 driver and module definitions 
 dev_warn macro with driver name 
 Probably USB_TIMEOUT should be modified in module parameter 
 Frequency limits in MHz -- these are European values.  For Japanese
  Commands that device should understand
  List isn't full and will be updated with implementation of new functions
 Comfortable defines for amradio_set_stereo 
 module parameter 
 Data for one (physical) device 
 reference to USB and video device 
 buffer locking 
 switch onoff the radio. Send 8 bytes to device 
 set a frequency, freq is defined by v4l's TUNER_LOW, i.e. 116th kHz 
 we need to be sure that frequency isn't out of range 
 frequency is calculated from freq_send and placed in first 2 bytes 
 Handle unplugging the device.
  We call video_unregister_device in any case.
  The last function called in this procedure is
  usb_amradio_device_release.
 vidioc_querycap - query device capabilities 
 vidioc_g_tuner - get tuner attributes 
 vidioc_s_tuner - set tuner attributes 
 monostereo selector 
 vidioc_s_frequency - set tuner radio frequency 
 vidioc_g_frequency - get tuner radio frequency 
 To check: sometimes radio->curfreq is set to out of range value 
 Suspend device - stop device. Need to be checked and fixed 
 Resume device - start device. Need to be checked and fixed 
 File system interface 
 free rest memory 
 check if the device is present and register with v4l and usb if it is 
 USB Device ID List 
 Terminating entry 
 USB subsystem interface 
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (c) 2012 Hans Verkuil <hverkuil@xs4all.nl>
 kernel includes 
 driver and module definitions 
 Actually, it advertises itself as a Logitech 
 Probably USB_TIMEOUT should be modified in module parameter 
 Frequency limits in MHz 
 USB Device ID List 
 Terminating entry 
 Set frequency (if non-0), PA, mute and turn onoff the FM transmitter. 
	 If bit 4 is set, then tune to the frequency.
	   If bit 3 is set, then unmute; if bit 2 is set, then mute.
	   If bit 1 is set, then enter idle mode; if bit 0 is set,
	   then enter transmit mode.
 Set TX, stereo and preemphasis mode (50 us vs 75 us). 
	 If bit 0 is set, then transmit mono, otherwise stereo.
	   If bit 2 is set, then enable 75 us preemphasis, otherwise
 Handle unplugging the device.
  We call video_unregister_device in any case.
  The last function called in this procedure is
  usb_keene_device_release.
	 -15,  -12,   -9,   -6,   -3,    0 dB 
	   3,    6,    9,   12,   15,   18 dB 
		 To go from dBuV to the register value we apply the
 File system interface 
 free rest memory 
 check if the device is present and register with v4l and usb if it is 
	
	  The Keene FM transmitter USB device has the same USB ID as
	  the Logitech AudioHub Speaker, but it should ignore the hid.
	  Check if the name is that of the Keene device.
	  If not, then someone connected the AudioHub and we shouldn't
	  attempt to handle this driver.
	  For reference: the product name of the AudioHub is
	  "AudioHub Speaker".
 at least 11ms is needed in order to settle hardware 
 USB subsystem interface 
 SPDX-License-Identifier: GPL-2.0-only
  Zoltrix Radio Plus driver
  Copyright 1998 C. van Schaik <carl@leg.uct.ac.za>
  BUGS
   Due to the inconsistency in reading from the signal flags
   it is difficult to get an accurate tuned signal.
   It seems that the card is not linear to 0 volume. It cuts off
   at a low volume, and it is not possible (at least I have not found)
   to get fine volume control over the low volume range.
   Some code derived from code by Romolo Manfredini
 				   romolo@bicnet.it
  1999-05-06 - (C. van Schaik)
 	      - Make signal strength and stereo scans
 		kinder to cpu while in delay
  1999-01-05 - (C. van Schaik)
 	      - Changed tuning to 1160Mhz accuracy
 	      - Added stereo support
 		(card defaults to stereo)
 		(can explicitly force mono on the card)
 		(can detect if station is in stereo)
 	      - Added unmute function
 	      - Reworked ioctl functions
  2002-07-15 - Fix Stereo typo
  2006-07-24 - Converted to V4L2 API
 		by Mauro Carvalho Chehab <mchehab@kernel.org>
  Converted to the radio-isa framework by Hans Verkuil <hans.verkuil@cisco.com>
  Note that this is the driver for the Zoltrix Radio Plus.
  This driver does not work for the Zoltrix Radio Plus 108 or the
  Zoltrix Radio Plus for Windows.
  Fully tested with the Keene USB FM Transmitter and the v4l2-compliance tool.
 Modules                        
 Initdata                       
 request_region		  
 udelay, msleep                 
 kernel radio structs           
 outb, outb_p                   
 Zoltrix needs to be read to confirm 
 tunes the radio to the desired frequency 
 Zoltrix needs to be read to confirm 
 termination sequence 
 Get signal strength 
 This stuff I found to do nothing 
 This stuff I found to do nothing 
 I found this out by playing with a binary scanner on the card io 
 SPDX-License-Identifier: GPL-2.0-only
  Guillemot Maxi Radio FM 2000 PCI radio card driver for Linux
  (C) 2001 Dimitromanolakis Apostolos <apdim@grecian.net>
  Based in the radio Maestro PCI driver. Actually it uses the same chip
  for radio but different pci controller.
  I didn't have any specs I reversed engineered the protocol from
  the windows driver (radio.dll).
  The card uses the TEA5757 chip that includes a search function but it
  is useless as I haven't found any way to read back the frequency. If
  anybody does please mail me.
  For the pdf file see:
  http:www.nxp.comacrobat_download2expired_datasheetsTEA5757_5759_3.pdf
  CHANGES:
    0.75b
      - better pci interface thanks to Francois Romieu <romieu@cogenit.fr>
    0.75      Sun Feb  4 22:51:27 EET 2001
      - tiding up
      - removed support for multiple devices as it didn't work anyway
  BUGS:
    - card unmutes if you change frequency
  (c) 2006, 2007 by Mauro Carvalho Chehab <mchehab@kernel.org>:
 	- Conversion to V4L2 API
       - Uses video_ioctl2 for parsing and to add debug support
 TEA5757 pin mappings 
 base of radio io 
 Note: this card cannot read out the data of the shift registers,
	 The data pin cannot be read. This may be a hardware limitation, or
 Turn off power 
 SPDX-License-Identifier: GPL-2.0-only
  saa7706.c Philips SAA7706H Car Radio DSP driver
  Copyright (c) 2009 Intel Corporation
 the I2C memory map looks like this
	$1C00 - $FFFF Not Used
	$2200 - $3FFF Reserved YRAM (DSP2) space
	$2000 - $21FF YRAM (DSP2)
	$1FF0 - $1FFF Hardware Registers
	$1280 - $1FEF Reserved XRAM (DSP2) space
	$1000 - $127F XRAM (DSP2)
	$0FFF        DSP CONTROL
	$0A00 - $0FFE Reserved
	$0980 - $09FF Reserved YRAM (DSP1) space
	$0800 - $097F YRAM (DSP1)
	$0200 - $07FF Not Used
	$0180 - $01FF Reserved XRAM (DSP1) space
	$0000 - $017F XRAM (DSP1)
 newer versions of the chip requires a small sleep after reset 
  Generic i2c probe
  concerning the addresses: i2c wants 7 bit (without the rw bit), so '>>1'
 Check if the adapter supports the needed features 
 check the rom versions 
 startup in a muted state 
 SPDX-License-Identifier: GPL-2.0-or-later
    ALSA driver for TEA57575759 Philips AMFM radio tuner chips
 	Copyright (c) 2004 Jaroslav Kysela <perex@perex.cz>
  definitions
 1 = search action, 0 = tuned 
 0 = search down, 1 = search up 
 0 = stereo, 1 = mono 
 user bit 
 user bit 
 search level 
 FM >5uV, AM >28uV 
 FM >10uV, AM > 40uV 
 FM >30uV, AM > 63uV 
 FM > 150uV, AM > 1000uV 
 buffer 
  lowlevel part
 shift data 
 shift data 
 freq = 12.5 
 crystal fixup 
 freq = 12.5 
 crystal fixup 
 crystal fixup 
 from kHz 
 to kHz 
 crystal fixup 
 freq = 12.5 
 crystal fixup 
 freq = 12.5 
 crystal fixup 
  Linux Video interface
 Only apply changes if currently tuning FM 
 No matching band found 
 kHz 
 clear the frequency, HW will fill it in 
 some signal arrived, stop search 
 Found a frequency, wait until it can be read 
 available 
 shouldn't happen 
			
			  if we moved by less than the spacing, or in the
			  wrong direction, continue seeking
	 Not all devices can or know how to read the data back.
 90.5Mhz default 
 disable hw_freq_seek if we can't use it 
 SPDX-License-Identifier: GPL-2.0-only
 radio-trust.c - Trust FM Radio card driver for Linux 2.2
  by Eric Lammerts <eric@scintilla.utwente.nl>
  Based on radio-aztech.c. Original notes:
  Adapted to support the Video for Linux API by
  Russell Kroll <rkroll@exploits.org>.  Based on original tuner code by:
  Quay Ly
  Donald Song
  Jason Lewis      (jlewis@twilight.vtc.vsc.edu)
  Scott McGrath    (smcgrath@twilight.vtc.vsc.edu)
  William McGrath  (wmcgrath@twilight.vtc.vsc.edu)
  Converted to V4L2 API by Mauro Carvalho Chehab <mchehab@kernel.org>
 acceptable ports: 0x350 (JP3 shorted), 0x358 (JP3 open) 
 i2c addresses 
 start condition 
 acknowledge bit 
 stop condition 
 Convert to 10 kHz units	
 Add 10.7 MHz IF		
 speaker att. LF = 0 dB 
 speaker att. RF = 0 dB 
 speaker att. LR = 0 dB 
 speaker att. RR = 0 dB 
 stereo 1 input, gain = 18.75 dB 
 SPDX-License-Identifier: GPL-2.0-only
  tef6862.c Philips TEF6862 Car Radio Enhanced Selectivity Tuner
  Copyright (c) 2009 Intel Corporation
 Write mode sub addresses 
 Different modes of the MSA register 
 only support FM for now 
  Generic i2c probe
  concerning the addresses: i2c wants 7 bit (without the rw bit), so '>>1'
 Check if the adapter supports the needed features 
 SPDX-License-Identifier: GPL-2.0-only
  RadioTrack II driver
  Copyright 1998 Ben Pfaff
  Based on RadioTrack IRadioReveal (C) 1997 M. Kirkwood
  Converted to new API by Alan Cox <alan@lxorguk.ukuu.org.uk>
  Various bugfixes and enhancements by Russell Kroll <rkroll@exploits.org>
  Converted to the radio-isa framework by Hans Verkuil <hans.verkuil@cisco.com>
  Converted to V4L2 API by Mauro Carvalho Chehab <mchehab@kernel.org>
  Fully tested with actual hardware and the v4l2-compliance tool.
 Modules			
 Initdata			
 request_region		
 udelay			
 kernel radio structs		
 outb, outb_p			
 bit set = no signal present	
 SPDX-License-Identifier: GPL-2.0-only
  radio-aztech.c - Aztech radio card driver
  Converted to the radio-isa framework by Hans Verkuil <hans.verkuil@xs4all.nl>
  Converted to V4L2 API by Mauro Carvalho Chehab <mchehab@kernel.org>
  Adapted to support the Video for Linux API by
  Russell Kroll <rkroll@exploits.org>.  Based on original tuner code by:
  Quay Ly
  Donald Song
  Jason Lewis      (jlewis@twilight.vtc.vsc.edu)
  Scott McGrath    (smcgrath@twilight.vtc.vsc.edu)
  William McGrath  (wmcgrath@twilight.vtc.vsc.edu)
  Fully tested with the Keene USB FM Transmitter and the v4l2-compliance tool.
 Modules			
 Initdata			
 request_region		
 udelay			
 kernel radio structs		
 outb, outb_p			
 acceptable ports: 0x350 (JP3 shorted), 0x358 (JP3 open) 
 bit definitions for register read 
 bit definitions for register write 
 bits 0 and 2 are volume control, bits 3..5 are not connected 
 SPDX-License-Identifier: GPL-2.0-only
 Terratec ActiveRadio ISA Standalone card driver for Linux radio support
  (c) 1999 R. Offermanns (rolf@offermanns.de)
  based on the aimslab radio driver from M. Kirkwood
  many thanks to Michael Becker and Friedhelm Birth (from TerraTec)
  History:
  1999-05-21	First preview release
   Notes on the hardware:
   There are two "main" chips on the card:
   - Philips OM5610 (http:www-us.semiconductors.philips.comacrobatdatasheetsOM5610_2.pdf)
   - Philips SAA6588 (http:www-us.semiconductors.philips.comacrobatdatasheetsSAA6588_1.pdf)
   (you can get the datasheet at the above links)
   Frequency control is done digitally -- ie out(port,encodefreq(95.8));
   Volume Control is done digitally
  Converted to the radio-isa framework by Hans Verkuil <hans.verkuil@cisco.com>
  Converted to V4L2 API by Mauro Carvalho Chehab <mchehab@kernel.org>
 Modules			
 Initdata			
 request_region		
 kernel radio structs		
 outb, outb_p			
 Note: there seems to be only one possible port (0x590), but without
   hardware this is hard to verify. For now, this is the only one we will
 change both channels 
 this is the worst part in this driver 
 many more or less strange things are going on here, but hey, it works :) 
 we have to bit shift 25 registers 
 convert the freq. to a nice to handle value 
 I once had understood what is going on here 
 maybe some wise guy (friedhelm?) can comment this stuff 
 bit shift the values to the radiocard 
 bit set = no signal present	
 SPDX-License-Identifier: GPL-2.0-only
 radio-cadet.c - A video4linux driver for the ADS Cadet AMFM Radio Card
  by Fred Gleason <fredg@wava.com>
  Version 0.3.3
  (Loosely) based on code for the Aztech radio card by
  Russell Kroll    (rkroll@exploits.org)
  Quay Ly
  Donald Song
  Jason Lewis      (jlewis@twilight.vtc.vsc.edu)
  Scott McGrath    (smcgrath@twilight.vtc.vsc.edu)
  William McGrath  (wmcgrath@twilight.vtc.vsc.edu)
  History:
  2000-04-29	Russell Kroll <rkroll@exploits.org>
 		Added ISAPnP detection for Linux 2.32.4
  2001-01-10	Russell Kroll <rkroll@exploits.org>
 		Removed dead CONFIG_RADIO_CADET_PORT code
 		PnP detection on load is now default (no args necessary)
  2002-01-17	Adam Belay <ambx1@neo.rr.com>
 		Updated to latest pnp code
  2003-01-31	Alan Cox <alan@lxorguk.ukuu.org.uk>
 		Cleaned up locking, delay code, general odds and ends
  2006-07-30	Hans J. Koch <koch@hjk-az.de>
 		Changed API to V4L2
 Modules			
 Initdata			
 request_region		
 udelay			
 V4L2 API defs		
 outb, outb_p			
 default to isapnp activation 
  Signal Strength Threshold Values
  The V4L API spec does not define any particular unit for the signal
  strength value.  These values are in microvolts of RF at the tuner's input.
 520 kHz 
 1650 kHz 
 87.5 MHz 
 108.0 MHz 
 Only FM has stereo capability! 
 Select tuner control 
	
	  Prepare for read
 Select tuner control 
 Save current volumemute setting 
 Ensure WRITE-ENABLE is LOW 
	
	  Read the shift register
	
	  Restore volumemute setting
	
	  Read current tuning
	
	  Convert to actual frequency
 AM 
 IF frequency is 10.7 MHz 
 Make it 116 kHz 
 Select tuner control 
	
	  Write the shift register
 Align data for SDO 
 SDM=1, SWE=1, SEN=1, SCK=0 
 Select tuner control 
 Initialize for write 
 Toggle SCK High 
 Toggle SCK Low 
 Prepare the next bit 
	
	  Formulate a fifo command
 FM 
 Make it kHz 
 IF is 10700 kHz 
 AM 
 Make it kHz 
 Select AM Band 
	
	  Save current volumemute setting
 Select tuner control 
	
	  Tune the card
 Select tuner control 
 Tuned 
 Service the RDS fifo 
 Select RDS Decoder Control 
 Select RDS fifo 
	
	  Service pending read
	
	  Clean up and exit
 Select RDS fifo 
 520 kHz (start of AM band) 
 108.0 MHz (end of FM band) 
 520 kHz 
 1650 kHz 
 We might need to modify scaling of this 
 Select tuner control 
 ADS Cadet AMFM Radio Card 
 only support one device 
  io should only be set if the user has used something like
  isapnp (the userspace program) to initialize this card for us
 If a probe was requested then probe ISAPnP first (safest) 
 If that fails then probe unsafely if probe is requested 
 Else we bail out 
 Mute 
 SPDX-License-Identifier: GPL-2.0-only
  Miro PCM20 radio driver for Linux radio support
  (c) 1998 Ruurd Reitsma <R.A.Reitsma@wbmt.tudelft.nl>
  Thanks to Norberto Pellici for the ACI device interface specification
  The API part is based on the radiotrack driver by M. Kirkwood
  This driver relies on the aci mixer provided by the snd-miro
  ALSA driver.
  Look there for further info...
  From the original miro RDS sources:
   (c) 2001 Robert Siemer <Robert.Siemer@gmx.de>
   Many thanks to Fred Seidel <seidel@metabox.de>, the
   designer of the RDS decoder hardware. With his help
   I was able to code this driver.
   Thanks also to Norberto Pellicci, Dominic Mounteney
   <DMounteney@pinnaclesys.com> and www.teleauskunft.de
   for good hints on finding Fred. It was somewhat hard
   to locate him here in Germany... [:
  This code has been reintroduced and converted to use
  the new V4L2 RDS API by:
  Hans Verkuil <hans.verkuil@cisco.com>
 Bit 2 
 Bit 4 
 Bit 3 
 thread for periodic RDS status checking 
	
	  It's magic, but without this the data that you read later on
	  is unreliable and full of bit errors. With this 1 usec delay
	  everything is fine.
 ACK  
 NACK 
 RDS_RESET doesn't need further processing 
	 to be able to use rds_readcycle_nowait()
		freq = 10;   I don't know exactly which version
	 Note: stereo detection does not work if the audio is muted,
			
			  No RDS seen for no_rds_start_counter  sleep_msecs
			  milliseconds, clear all RDS controls to their
			  default values.
 SPDX-License-Identifier: GPL-2.0-or-later
  drivermediaradioradio-tea5764.c
  Driver for TEA5764 radio chip for linux 2.6.
  This driver is for TEA5764 chip from NXP, used in EZX phones from Motorola.
  The I2C protocol is used for communicate with chip.
  Based in radio-tea5761.c Copyright (C) 2005 Nokia Corporation
   Copyright (c) 2008 Fabio Belavenuto <belavenuto@gmail.com>
  History:
  2008-12-06   Fabio Belavenuto <belavenuto@gmail.com>
               initial code
  TODO:
   add platform_data support for IRQs platform dependencies
   add RDS support
 Initdata			
 kernel radio structs		
 I2C				
 Frequency limits in MHz -- these are European values.  For Japanese
 TEA5764 registers 
 INTFLAG & INTMSK 
 FRQSETMSB & FRQSETLSB 
 TNCTRL1 & TNCTRL2 
 FRQCHKMSB & FRQCHKLSB 
 IFCHK & LEVCHK 
 TESTBITS & TESTMODE 
 RDSSTAT1 & RDSSTAT2 
 RDSLBMSB & RDSLBLSB 
 RDSPBMSB & RDSPBLSB 
 RDSBBC & RDSGBC 
 RDSCTRL1 & RDSCTRL2 
 PAUSEDET & RDSBBL 
 MANID1 & MANID2 
 CHIPID1 & CHIPID2 
 INTMSK 
 FRQSETMSB & FRQSETLSB 
 TNCTRL1 & TNCTRL2 
 TESTBITS & TESTMODE 
 RDSCTRL1 & RDSCTRL2 
 PAUSEDET & RDSBBL 
 I2C code related 
 formula: (freq [+ or -] 225000)  8192 
 tune an frequency, freq is defined by v4l's TUNER_LOW, i.e. 116th kHz 
 V4L2 vidioc 
 We special case this as a power down control. 
		 Yes, that's what is returned in this case. This
		   whole special case is non-compliant and should really
		   be replaced with something better, but changing this
		   might well break code that depends on this behavior.
 File system interface 
 V4L2 interface 
 I2C probe: check if the device exists and register with v4l if it is 
 initialize and power off the chip 
 I2C subsystem interface 
 Terminating entry 
  Linux V4L2 radio driver for the Griffin radioSHARK2 USB radio receiver
  Note the radioSHARK2 offers the audio through a regular USB audio device,
  this driver only handles the tuning.
  The info necessary to drive the shark2 was taken from the small userspace
  shark2.c program by Hisaaki Shibata, which he kindly placed in the Public
  Domain.
  Copyright (c) 2012 Hans de Goede <hdegoede@redhat.com>
  This program is free software; you can redistribute it andor modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
 Write register command 
 Specify the bcdDevice value, as the radioSHARK and radioSHARK2 share ids 
 SPDX-License-Identifier: GPL-2.0-only
  driversmediaradioradio-si476x.c -- V4L2 driver for SI476X chips
  Copyright (C) 2012 Innovative Converged Devices(ICD)
  Copyright (C) 2013 Andrey Smirnov
  Author: Andrey Smirnov <andrew.smirnov@gmail.com>
	
	  SI476X during its station seeking(or tuning) process uses several
	  parameters to determine if "the station" is valid:
	 
	 	- Signal's SNR(in dBuV) must be lower than
	 	#V4L2_CID_SI476X_SNR_THRESHOLD
	 	- Signal's RSSI(in dBuV) must be greater than
	 	#V4L2_CID_SI476X_RSSI_THRESHOLD
	 	- Signal's frequency deviation(in units of 2ppm) must not be
	 	more than #V4L2_CID_SI476X_MAX_TUNE_ERROR
	
	  #V4L2_CID_SI476X_HARMONICS_COUNT -- number of harmonics
	  built-in power-line noise supression filter is to reject
	  during AM-mode operation.
	
	  #V4L2_CID_SI476X_DIVERSITY_MODE -- configuration which
	  two tuners working in diversity mode are to work in.
	 
	   - #SI476X_IDX_PHDIV_DISABLED diversity mode disabled
	   - #SI476X_IDX_PHDIV_PRIMARY_COMBINING diversity mode is
	   on, primary tuner's antenna is the main one.
	   - #SI476X_IDX_PHDIV_PRIMARY_ANTENNA diversity mode is
	   off, primary tuner's antenna is the main one.
	   - #SI476X_IDX_PHDIV_SECONDARY_ANTENNA diversity mode is
	   off, secondary tuner's antenna is the main one.
	   - #SI476X_IDX_PHDIV_SECONDARY_COMBINING diversity mode is
	   on, secondary tuner's antenna is the main one.
	
	  #V4L2_CID_SI476X_INTERCHIP_LINK -- inter-chip link in
	  diversity mode indicator. Allows user to determine if two
	  chips working in diversity mode have established a link
	  between each other and if the system as a whole uses
	  signals from both antennas to receive FM radio.
  struct si476x_radio_ops - vtable of tuner functions
  This table holds pointers to functions implementing particular
  operations depending on the mode in which the tuner chip was
  configured to start. If the function is not supported
  corresponding element is set to #NULL.
  @tune_freq: Tune chip to a specific frequency
  @seek_start: Star station seeking
  @rsq_status: Get Received Signal Quality(RSQ) status
  @rds_blckcnt: Get received RDS blocks count
  @phase_diversity: Change phase diversity mode of the tuner
  @phase_div_status: Get phase diversity mode status
  @acf_status: Get the status of Automatically Controlled
  Features(ACF)
  @agc_status: Get Automatic Gain Control(AGC) status
  struct si476x_radio - radio device
  @v4l2dev: Pointer to V4L2 device created by V4L2 subsystem
  @videodev: Pointer to video device created by V4L2 subsystem
  @ctrl_handler: V4L2 controls handler
  @core: Pointer to underlying core device
  @ops: Vtable of functions. See struct si476x_radio_ops for details
  @debugfs: pointer to &strucd dentry for debugfs
  @audmode: audio mode, as defined for the rxsubchans field
 	     at videodev2.h
  core structure is the radio device is being used
 This field should not be accesses unless core lock is held 
  si476x_vidioc_querycap - query device capabilities
 AMFM tuners -- all bands are supported 
		 FM companion tuner chips -- only FM bands are
	tuner->capability = V4L2_TUNER_CAP_LOW  Measure frequencies
						  in multiples of
		
		  tuner->signal value range: 0x0000 .. 0xFFFF,
		  report.rssi: -128 .. 127
 regcache_mark_dirty(radio->core->regmap); 
	
	  Is there any point in restoring SNR and the like
	  when switching between AMFM?
	
	  Since powerup down is a very time consuming operation,
	  try to avoid doing it if the requested mode matches the one
	  the tuner is in
		
		  OK, if the chip does not want to play nice let's
		  try to reset it in more brutal way
	
	  Set the desired radio tuner function
	
	  No need to do the rest of manipulations for the bootlader
	  mode
		
		  It looks like RDS related properties are
		  inaccessible when tuner is in AM mode, so cache the
		  changes
 Drain RDS FIFO before enabling RDS processing 
			
			  Diversity cannot be configured while tuner
			  is in AM mode so save the changes and carry on.
Must be done after si476x_core_unlock to prevent a deadlock
 block if no new data available 
 register video device 
 SPDX-License-Identifier: GPL-2.0-or-later
 A driver for the D-Link DSB-R100 USB radio and Gemtek USB Radio 21.
  The device plugs into both the USB and an analog audio input, so this thing
  only deals with initialisation and frequency setting, the
  audio data has to be handled by a sound driver.
  Major issue: I can't find out where the device reports the signal
  strength, and indeed the windows software appearantly just looks
  at the stereo indicator as well.  So, scanning will only find
  stereo stations.  Sad, but I can't help it.
  Also, the windows program sends oodles of messages over to the
  device, and I couldn't figure out their meaning.  My suspicion
  is that they don't have any:-)
  You might find some interesting stuff about this module at
  http:unimut.fsk.uni-heidelberg.deunimutdemidsbr
  Fully tested with the Keene USB FM Transmitter and the v4l2-compliance tool.
  Copyright (c) 2000 Markus Demleitner <msdemlei@cl.uni-heidelberg.de>
  Version Information
 Commands the device appears to understand 
 Frequency limits in MHz -- these are European values.  For Japanese
 Data for one (physical) device 
 Low-level device interface begins here 
 set a frequency, freq is defined by v4l's TUNER_LOW, i.e. 116th kHz 
 switch on radio 
 switch off radio 
 return the device status.  This is, in effect, just whether it
 We can't get the signal strength 
 USB subsystem interface begins here 
  Handle unplugging of the device.
  We call video_unregister_device in any case.
  The last function called in this procedure is
  usb_dsbr100_video_device_release
	
	  Disconnect is also called on unload, and in that case we need to
	  mute the device. This call will silently fail if it is called
	  after a physical disconnect.
 Suspend device - stop device. 
 Resume device - start device. 
 free data structures 
 File system interface 
 check if the device is present and register with v4l and usb if it is 
 Terminating entry 
 USB subsystem interface 
 SPDX-License-Identifier: GPL-2.0-or-later
  Driver for the MasterKit MA901 USB FM radio. This device plugs
  into the USB port and an analog audio input or headphones, so this thing
  only deals with initialization, frequency setting, volume.
  Copyright (c) 2012 Alexey Klimov <klimov.linux@gmail.com>
 dev_warn macro with driver name 
 Probably USB_TIMEOUT should be modified in module parameter 
 Commands that device should understand
  List isn't full and will be updated with implementation of new functions
 Comfortable defines for ma901radio_set_stereo 
 module parameter 
 Data for one (physical) device 
 reference to USB and video device 
 buffer locking 
 set a frequency, freq is defined by v4l's TUNER_LOW, i.e. 116th kHz 
 Handle unplugging the device.
  We call video_unregister_device in any case.
  The last function called in this procedure is
  usb_ma901radio_device_release.
 vidioc_querycap - query device capabilities 
 vidioc_g_tuner - get tuner attributes 
	 TODO: the same words like in _probe() goes here.
	  When receiving of stats will be implemented then we can call
	  ma901radio_get_stat().
	  retval = ma901radio_get_stat(radio, &is_stereo, &v->signal);
 v->rxsubchans = is_stereo ? V4L2_TUNER_SUB_STEREO : V4L2_TUNER_SUB_MONO; 
 vidioc_s_tuner - set tuner attributes 
 monostereo selector 
 vidioc_s_frequency - set tuner radio frequency 
 vidioc_g_frequency - get tuner radio frequency 
 set volume 
 TODO: Should we really need to implement suspend and resume functions?
  Radio has it's own memory and will continue playing if power is present
  on usb port and on resume it will start to play again based on freq, volume
  values in device memory.
 File system interface 
 check if the device is present and register with v4l and usb if it is 
	 Masterkit MA901 usb radio has the same USB ID as many others
	  Atmel V-USB devices. Let's make additional checks to be sure
	  that this is our device.
	 TODO:It looks like this radio doesn't have muteunmute control
	  and windows program just emulate it using volume control.
	  Let's plan to do the same in this driver.
	 
	  v4l2_ctrl_new_std(&radio->hdl, &usb_ma901radio_ctrl_ops,
	 		  V4L2_CID_AUDIO_MUTE, 0, 1, 1, 1);
	 TODO: we can get some statistics (freq, volume) from device
	  but it's not implemented yet. After insertion in usb-port radio
	  setups frequency and starts playing without any initialization.
	  So we don't call usb_ma901radio_initget_stat() here.
	  retval = usb_ma901radio_init(radio);
 USB Device ID List 
 Terminating entry 
 USB subsystem interface 
 SPDX-License-Identifier: GPL-2.0-only
 Typhoon Radio Card driver for radio support
  (c) 1999 Dr. Henrik Seidel <Henrik.Seidel@gmx.de>
  Notes on the hardware
  This card has two output sockets, one for speakers and one for line.
  The speaker output has volume control, but only in four discrete
  steps. The line output has neither volume control nor mute.
  The card has auto-stereo according to its manual, although it all
  sounds mono to me (even with the WinDOS drivers). Maybe it's my
  antenna - I really don't know for sure.
  Frequency control is done digitally.
  Volume control is done digitally, but there are only four different
  possible values. So you should better always turn the volume up and
  use line control. I got the best results by connecting line output
  to the sound card microphone input. For such a configuration the
  volume control has no effect, since volume control only influences
  the speaker output.
  There is no explicit muteunmute. So I set the radio frequency to a
  value where I do expect just noise and turn the speaker volume down.
  The frequency change is necessary since the card never seems to be
  completely silent.
  Converted to V4L2 API by Mauro Carvalho Chehab <mchehab@kernel.org>
 Modules                        
 Initdata                       
 request_region		  
 kernel radio structs           
 outb, outb_p                   
	
	  The frequency transfer curve is not linear. The best fit I could
	  get is
	 
	  outval = -155 + exp((f + 15.55)  0.057))
	 
	  where frequency f is in MHz. Since we don't have exp in the kernel,
	  I approximate this function by a third order polynomial.
	 
 Map 16 bit to 2 bit 
 Set the volume, high bit. 
 Set the volume, low bit. 
 SPDX-License-Identifier: GPL-2.0-or-later
    v4l2 driver for TEA5777 Philips AMFM radio tuner chips
 	Copyright (c) 2012 Hans de Goede <hdegoede@redhat.com>
    Based on the ALSA driver for TEA57575759 Philips AMFM radio tuner chips:
 	Copyright (c) 2004 Jaroslav Kysela <perex@perex.cz>
 kHz 
 kHz 
 kHz 
 kHz 
 Write reg, common bits 
 Write reg, FM specific bits 
 50k steps, 150k IF 
 Write reg, AM specific bits 
 Read reg, common bits 
 Read reg, FM specific bits 
 Never reached 
 to kHz 
  Linux Video interface
 shift - 12 to convert 4-bits (0-15) scale to 16-bits (0-65535) 
 Invalidate read_reg, so that next call we return up2date signal 
 No matching band found 
 kHz 
		
		  Note we use tea->freq to track how far we've searched sofar
		  this is necessary to ensure we continue seeking at the right
		  point, in the write_before_read case.
 Force read_reg update 
 90.5Mhz default 
 SPDX-License-Identifier: GPL-2.0-only
  Driver for the Texas Instruments WL1273 FM radio.
  Copyright (C) 2011 Nokia Corporation
  Author: Matti J. Aaltonen <matti.j.aaltonen@nokia.com>
  static int radio_nr - The number of the radio device
  The default is 0.
 RDS 
 for serializing fm radio operations 
 Selected interrupts 
  static unsigned int rds_buf - the number of RDS buffer blocks used.
  The default number is 100.
 Last transfer always fails. 
 RDS decoder not synchronized 
 copy all four RDS blocks to internal buffer 
 copy bits 0-2 (the block ID) to bits 3-5 
 copy the error bits to standard positions 
 copy RDS block to internal buffer 
 wrap write pointer 
 check for overflow & start over 
 wake up read queue 
			
			   The driver works better with this msleep,
			   the documentation doesn't mention it.
	
	   The driver works better with this sleep,
	   the documentation doesn't mention it.
 Set the current tx channel 
 wait for the FR IRQ 
 Enable the output power 
 wait for the POWER_ENB IRQ 
  wl1273_fm_upload_firmware_patch() -	Upload the firmware.
  @radio:				A pointer to the device struct.
  The firmware file consists of arrays of bytes where the first byte
  gives the array length. The first byte in the file gives the
  number of these arrays.
	
	  Uploading the firmware patch is not always necessary,
	  so we only print an info message.
 ignore possible error here 
 If this fails try again 
 rds buffer configuration 
 If this fails try again once 
		
		  Sometimes the chip is in a wrong power state at this point.
		  So we set the power once again.
 Cannot go from OFF to SUSPENDED 
 remember previous settings 
 wait for the FR IRQ 
 Wrap around 
 wait for the FR IRQ 
  wl1273_fm_get_tx_ctune() -	Get the TX tuning capacitor value.
  @radio:			A pointer to the device struct.
  wl1273_fm_set_preemphasis() - Set the TX pre-emphasis value.
  @radio:			 A pointer to the device struct.
  @preemphasis:		 The new pre-amphasis value.
  Possible pre-emphasis values are: V4L2_PREEMPHASIS_DISABLED,
  V4L2_PREEMPHASIS_50_uS and V4L2_PREEMPHASIS_75_uS.
 Service pending read 
	
	  Multiple processes can open the device, but only
	  one gets to write to it.
 Manual Mode 
	
	  Multiple processes can open the device, but only
	  one at a time gets read access.
 block if no new data available 
 calculate block count from byte count 
 copy RDS blocks from the internal buffer and to user buffer 
 always transfer complete RDS blocks 
 increment and wrap the read pointer 
 increment counters 
  wl1273_fm_set_tx_power() -	Set the transmission power value.
  @radio:			A pointer to the device struct.
  @power:			The new power value.
 Convert the dBuV value to chip presentation 
 RDS buffer allocation 
 V4L2 configuration 
 add in ascending ID order 
 register video device 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright 2013 Cisco Systems, Inc. andor its affiliates. All rights reserved.
  'Thanko's Raremono' is a Japanese si4734-based AMFMSW USB receiver:
  http:www.raremono.jpproduct484.html
  The USB protocol has been reversed engineered using wireshark, initially
  by Dinesh Ram <dinesh.ram@cern.ch> and finished by Hans Verkuil
  <hverkuil@xs4all.nl>.
  Sadly the firmware used in this product hides lots of goodies since the
  si4734 has more features than are supported by the firmware. Oh well...
 driver and module definitions 
  The Device announces itself as Cygnal Integrated Products, Inc.
  The vendor and product IDs (and in fact all other lsusb information as
  well) are identical to the si470x Silicon Labs USB FM Radio Reference
  Design board, even though this card has a si4734 device. Clearly the
  designer of this product never bothered to change the USB IDs.
 USB Device ID List 
 Terminating entry 
 Timeout is set to a high value, could probably be reduced. Need more tests 
 Frequency limits in KHz 
 Band FM 
 Band AM 
 Band SW 
 Set frequency. 
 Handle unplugging the device.
  We call video_unregister_device in any case.
  The last function called in this procedure is
  usb_raremono_device_release.
  Linux Video interface
 File system interface 
 check if the device is present and register with v4l and usb if it is 
	
	  This device uses the same USB IDs as the si470x SiLabs reference
	  design. So do an additional check: attempt to read the device ID
	  from the si470x: the lower 12 bits are 0x0242 for the si470x. The
	  Raremono always returns 0x0800 (the meaning of that is unknown, but
	  at least it works).
	 
	  We use this check to determine which device we are dealing with.
 USB subsystem interface 
  Linux V4L2 radio driver for the Griffin radioSHARK USB radio receiver
  Note the radioSHARK offers the audio through a regular USB audio device,
  this driver only handles the tuning.
  The info necessary to drive the shark was taken from the small userspace
  shark.c program by Michael Rolig, which he kindly placed in the Public
  Domain.
  Copyright (c) 2012 Hans de Goede <hdegoede@redhat.com>
  This program is free software; you can redistribute it andor modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
  Version Information
 0 = stereo, 1 = mono 
 Note BLUE_IS_PULSE comes after NO_LEDS as it is a status bit, not a LED 
 Avoid unnecessary (slow) USB transfers 
 Write shift register command 
	
	  The shark does not allow actually reading the stereo  mono pin :(
	  So assume that when we're tuned to an FM station and mono has not
	  been requested, that we're receiving stereo.
 Specify the bcdDevice value, as the radioSHARK and radioSHARK2 share ids 
 SPDX-License-Identifier: GPL-2.0-or-later
   driversmediaradiosi470xradio-si470x-usb.c
   USB driver for radios with Silicon Labs Si470x FM Radio Receivers
   Copyright (c) 2009 Tobias Lorenz <tobias.lorenz@gmx.net>
  ToDo:
  - add firmware downloadupdate support
 driver definitions 
 kernel includes 
 USB Device ID List 
 Silicon Labs USB FM Radio Reference Design 
 ADSTech FM Radio Receiver (formerly Instant FM Music) 
 KWorld USB FM Radio SnapMusic Mobile 700 (FM700) 
 Sanei Electric, Inc. FM USB Radio (sold as DealExtreme.com PCear) 
 Axentia ALERT FM USB Receiver 
 Terminating entry 
  Module Parameters
 Radio Nr 
 USB timeout 
 RDS buffer blocks 
 RDS maximum block errors 
 0 means   0  errors requiring correction 
 1 means 1-2  errors requiring correction (used by original USBRadio.exe) 
 2 means 3-5  errors requiring correction 
 3 means   6+ errors or errors in checkword, correction not possible 
  USB HID Reports
 Reports 1-16 give direct readwrite access to the 16 Si470x registers 
 with the (REPORT_ID - 1) corresponding to the register address across USB 
 endpoint 0 using GET_REPORT and SET_REPORT 
 Report 17 gives direct readwrite access to the entire Si470x register 
 map across endpoint 0 using GET_REPORT and SET_REPORT 
 Report 18 is used to send the lowest 6 Si470x registers up the HID 
 interrupt endpoint 1 to Windows every 20 milliseconds for status 
 Report 19: LED state 
 Report 19: stream 
 Report 20: scratch 
 Reports 19-22: flash upgrade of the C8051F321 
 Report 23: currently unused, but can accept 60 byte reports on the HID 
 interrupt out endpoint 2 every 1 millisecond 
  SoftwareHardware Versions from Scratch Page
  LED State Definitions
 streaming state 
 connect state 
 disconnect state 
 tuningseeking state 
 bootload state 
  Stream State Definitions
  Bootloader  Flash Commands
 unique id sent to bootloader and required to put into a bootload state 
 mask for the flash data 
 bootloader commands 
 bootloader command responses 
  General Driver Functions - REGISTER_REPORTs
  si470x_get_report - receive a HID report
  si470x_set_report - send a HID report
  si470x_get_register - read register
  si470x_set_register - write register
  General Driver Functions - ENTIRE_REPORT
  si470x_get_all_registers - read entire registers
  General Driver Functions - LED_REPORT
  si470x_set_led_state - sets the led state
  General Driver Functions - SCRATCH_REPORT
  si470x_get_scratch_versions - gets the scratch page and version infos
  RDS Driver Functions
  si470x_int_in_callback - rds callback and processing function
  TODO: do we need to use mutex locks in some sections?
 rds block errors 
 Maybe we can recover. 
 Sometimes the device returns len 0 packets 
 Update RDS registers with URB data 
 get rds blocks 
 No RDS group ready, better luck next time 
 RDS decoder not synchronized 
 Fill the V4L2 RDS buffer 
 offset name 
 received offset 
 uncorrectable errors 
 corrected error(s) 
 copy RDS block to internal buffer 
 wrap write pointer 
 check for overflow 
 increment and wrap read pointer 
 Resubmit if we're still running. 
  Video4Linux Interface
  si470x_vidioc_querycap - query device capabilities
 initialize interrupt urb 
 start radio 
  USB Interface
  si470x_usb_driver_probe - probe for the device
 private data allocation and initialization 
 Default to 76 - 108 MHz 
 Set up interrupt endpoint information. 
	
	  The si470x SiLabs reference design uses the same USB IDs as
	  'Thanko's Raremono' si4734 based receiver. So check here which we
	  have: attempt to read the device ID from the si470x: the lower 12
	  bits should be 0x0242 for the si470x.
	 
	  We use this check to determine which device we are dealing with.
 get device and chip versions 
 get software and hardware versions 
 give out version warning 
 set led to connect state 
 rds buffer allocation 
 rds buffer configuration 
 start radio 
 set initial frequency 
 available in all regions 
 register video device 
  si470x_usb_driver_suspend - suspend the device
 shutdown interrupt handler 
 cancel read processes 
 stop radio 
  si470x_usb_driver_resume - resume the device
 start radio 
  si470x_usb_driver_disconnect - disconnect the device
  si470x_usb_driver - usb driver interface
  A note on suspendresume: this driver had only empty suspendresume
  functions, and when I tried to test suspendresume it always disconnected
  instead of resuming (using my ADS InstantFM stick). So I've decided to
  remove these callbacks until someone else with better hardware can
  implement and test this.
 SPDX-License-Identifier: GPL-2.0-or-later
   driversmediaradiosi470xradio-si470x-common.c
   Driver for radios with Silicon Labs Si470x FM Radio Receivers
   Copyright (c) 2009 Tobias Lorenz <tobias.lorenz@gmx.net>
   Copyright (c) 2012 Hans de Goede <hdegoede@redhat.com>
  History:
  2008-01-12	Tobias Lorenz <tobias.lorenz@gmx.net>
 		Version 1.0.0
 		- First working version
  2008-01-13	Tobias Lorenz <tobias.lorenz@gmx.net>
 		Version 1.0.1
 		- Improved error handling, every function now returns errno
 		- Improved multi user access (startmutestop)
 		- Channel doesn't get lost anymore after startmutestop
 		- RDS support added (polling mode via interrupt EP 1)
 		- marked default module parameters with value
 		- switched from bit structs to bit masks
 		- header file cleaned and integrated
  2008-01-14	Tobias Lorenz <tobias.lorenz@gmx.net>
 		Version 1.0.2
 		- hex values are now lower case
 		- commented USB ID for ADSTech moved on todo list
 		- blacklisted si470x in hid-quirks.c
 		- rds buffer handling functions integrated into _work, _read
 		- rds_command in si470x_poll exchanged against simple retval
 		- check for firmware version 15
 		- code order and prototypes still remain the same
 		- spacing and bottom of band codes remain the same
  2008-01-16	Tobias Lorenz <tobias.lorenz@gmx.net>
 		Version 1.0.3
 		- code reordered to avoid function prototypes
 		- switchcase defaults are now more user-friendly
 		- unified comment style
 		- applied all checkpatch.pl v1.12 suggestions
 		  except the warning about the too long lines with bit comments
 		- renamed FMRADIO to RADIO to cut line length (checkpatch.pl)
  2008-01-22	Tobias Lorenz <tobias.lorenz@gmx.net>
 		Version 1.0.4
 		- avoid poss. locking when doing copy_to_user which may sleep
 		- RDS is automatically activated on read now
 		- code cleaned of unnecessary rds_commands
 		- USB VendorProduct ID for ADSTech FM Radio Receiver verified
 		  (thanks to Guillaume RAMOUSSE)
  2008-01-27	Tobias Lorenz <tobias.lorenz@gmx.net>
 		Version 1.0.5
 		- number of seek_retries changed to tune_timeout
 		- fixed problem with incomplete tune operations by own buffers
 		- optimization of variables and printf types
 		- improved error logging
  2008-01-31	Tobias Lorenz <tobias.lorenz@gmx.net>
 		Oliver Neukum <oliver@neukum.org>
 		Version 1.0.6
 		- fixed coverity checker warnings in _usb_driver_disconnect
 		- probe()open() race by correct ordering in probe()
 		- DMA coherency rules by separate allocation of all buffers
 		- use of endianness macros
 		- abuse of spinlock, replaced by mutex
 		- racy handling of timer in disconnect,
 		  replaced by delayed_work
 		- racy interruptible_sleep_on(),
 		  replaced with wait_event_interruptible()
 		- handle signals in read()
  2008-02-08	Tobias Lorenz <tobias.lorenz@gmx.net>
 		Oliver Neukum <oliver@neukum.org>
 		Version 1.0.7
 		- usb autosuspend support
 		- unplugging fixed
  2008-05-07	Tobias Lorenz <tobias.lorenz@gmx.net>
 		Version 1.0.8
 		- hardware frequency seek support
 		- afc indication
 		- more safety checks, let si470x_get_freq return errno
 		- vidioc behavior corrected according to v4l2 spec
  2008-10-20	Alexey Klimov <klimov.linux@gmail.com>
 		- add support for KWorld USB FM Radio FM700
 		- blacklisted KWorld radio in hid-core.c and hid-ids.h
  2008-12-03	Mark Lord <mlord@pobox.com>
 		- add support for DealExtreme USB Radio
  2009-01-31	Bob Ross <pigiron@gmx.com>
 		- correction of stereo detectionsetting
 		- correction of signal strength indicator scaling
  2009-01-31	Rick Bronson <rick@efn.org>
 		Tobias Lorenz <tobias.lorenz@gmx.net>
 		- add LED status output
 		- get HWSW version from scratchpad
  2009-06-16   Edouard Lafargue <edouard@lafargue.name>
 		Version 1.0.10
 		- add support for interrupt mode for RDS endpoint,
                 instead of polling.
                 Improves RDS reception significantly
 kernel includes 
  Module Parameters
 Spacing (kHz) 
 0: 200 kHz (USA, Australia) 
 1: 100 kHz (Europe, Japan) 
 2:  50 kHz 
 De-emphasis 
 0: 75 us (USA) 
 1: 50 us (Europe, Australia, Japan) 
 Tune timeout 
 Seek timeout 
  Generic Functions
  si470x_set_band - set the band
  si470x_set_chan - set the channel
 start tuning 
 wait till tune operation has completed 
 stop tuning 
  si470x_get_step - get channel spacing
 Spacing (kHz) 
 0: 200 kHz (USA, Australia) 
 1: 100 kHz (Europe, Japan) 
 2:  50 kHz 
  si470x_get_freq - get the frequency
 read channel 
 Frequency (MHz) = Spacing (kHz) x Channel + Bottom of Band (MHz) 
  si470x_set_freq - set the frequency
 Chan = [ Freq (Mhz) - Bottom of Band (MHz) ]  Spacing (kHz) 
  si470x_set_seek - set seek
 set band 
 No matching band found 
 If nothing is specified seek 76 - 108 Mhz 
 start seeking 
 wait till tune operation has completed 
 stop seeking 
 try again, if timed out 
  si470x_start - switch on radio
 powercfg 
 sysconfig 1 
 sysconfig 2 
 SEEKTH 
 BAND 
 SPACE 
 VOLUME (max) 
 reset last channel 
  si470x_stop - switch off radio
 sysconfig 1 
 powercfg 
 POWERCFG_ENABLE has to automatically go low 
  si470x_rds_on - switch on rds reception
 sysconfig 1 
  File Operations Interface
  si470x_fops_read - read RDS data
 switch on rds reception 
 block if no new data available 
 calculate block count from byte count 
 copy RDS block out of internal buffer and to user buffer 
 always transfer rds complete blocks 
 retval = -EFAULT; 
 increment and wrap read pointer 
 increment counters 
  si470x_fops_poll - poll RDS data
 switch on rds reception 
  si470x_fops_release - file release
  si470x_fops - file operations interface
  Video4Linux Interface
  si470x_vidioc_g_tuner - get tuner attributes
 driver constants 
 stereo indicator == stereo (instead of mono) 
	 If there is a reliable method of detecting an RDS channel,
	   then this code should check for that before setting this
 monostereo selector 
 min is worst, max is best; signal:0..0xffff; rssi: 0..0xff 
 measured in units of dbµV in 1 db increments (max at ~75 dbµV) 
 the ideal factor is 0xffff75 = 873,8 
 automatic frequency control: -1: freq to low, 1 freq to high 
 AFCRL does only indicate that freq. differs, not if too lowhigh 
  si470x_vidioc_s_tuner - set tuner attributes
 monostereo selector 
 force mono 
 try stereo 
  si470x_vidioc_g_frequency - get tuner or modulator radio frequency
  si470x_vidioc_s_frequency - set tuner or modulator radio frequency
 Switch to band 1 which covers everything we support 
  si470x_vidioc_s_hw_freq_seek - set hardware frequency seek
  si470x_vidioc_enum_freq_bands - enumerate supported bands
  si470x_ioctl_ops - video device ioctl operations
  si470x_viddev_template - video device interface
 SPDX-License-Identifier: GPL-2.0-or-later
  driversmediaradiosi470xradio-si470x-i2c.c
  I2C driver for radios with Silicon Labs Si470x FM Radio Receivers
  Copyright (c) 2009 Samsung Electronics Co.Ltd
  Author: Joonyoung Shim <jy0922.shim@samsung.com>
 driver definitions 
 kernel includes 
 I2C Device ID List 
 Generic Entry 
 Terminating entry 
  Module Parameters
 Radio Nr 
 RDS buffer blocks 
 RDS maximum block errors 
 0 means   0  errors requiring correction 
 1 means 1-2  errors requiring correction (used by original USBRadio.exe) 
 2 means 3-5  errors requiring correction 
 3 means   6+ errors or errors in checkword, correction not possible 
  I2C Definitions
 Write starts with the upper byte of register 0x02 
 Read starts with the upper byte of register 0x0a 
  General Driver Functions - REGISTERs
  si470x_get_register - read register
  si470x_set_register - write register
  General Driver Functions - ENTIRE REGISTERS
  si470x_get_all_registers - read entire registers
  File Operations Interface
  si470x_fops_open - file open
 start radio 
 enable RDS  STC interrupt 
  si470x_fops_release - file release
 stop radio 
  Video4Linux Interface
  si470x_vidioc_querycap - query device capabilities
  I2C Interface
  si470x_i2c_interrupt - interrupt handler
 rds block errors 
 check SeekTune Complete 
 safety checks 
 Update RDS registers 
 get rds blocks 
 No RDS group ready, better luck next time 
 Fill the V4L2 RDS buffer 
 offset name 
 received offset 
 uncorrectable errors 
 corrected error(s) 
 copy RDS block to internal buffer 
 wrap write pointer 
 check for overflow 
 increment and wrap read pointer 
  si470x_i2c_probe - probe for the device
 private data allocation and initialization 
 Default to 76 - 108 MHz 
 video device initialization 
 power up : need 110ms 
 get device and chip versions 
 give out version warning 
 set initial frequency 
 available in all regions 
 rds buffer allocation 
 rds buffer configuration 
 register video device 
  si470x_i2c_remove - remove the device
  si470x_i2c_suspend - suspend the device
 power down 
  si470x_i2c_resume - resume the device
 power up : need 110ms 
  si470x_i2c_driver - i2c driver interface
 SPDX-License-Identifier: GPL-2.0-only
  Copyright 2013 Cisco Systems, Inc. andor its affiliates.
  All rights reserved.
 kernel includes 
 V4l includes 
 driver and module definitions 
 The Device announces itself as Cygnal Integrated Products, Inc. 
 USB Device ID List 
 Terminating entry 
 File system interface 
  This command sequence emulates the behaviour of the Windows driver.
  The structure of these commands was determined by sniffing the
  usb traffic of the device during startup.
  Most likely, these commands make some queries to the device.
  Commands are sent to enquire parameters like the bus mode,
  component revision, boot mode, the device serial number etc.
  These commands are necessary to be sent in this order during startup.
  The device fails to powerup if these commands are not sent.
  The complete list of startup commands is given in the start_seq table below.
 send the command 
 receive the response 
			 USB traffic sniffing showed that some commands require
  Some of the startup commands that could be recognized are :
  (0x03): Get serial number of the board (Response : CB000-00-00)
  (0x06, 0x03, 0x03, 0x08, 0x01, 0x0f) : Get Component revision
	 Commands that are sent after pressing the 'Initialize'
  Structure of a command :
 	Byte 1 : 0x3f (always)
 	Byte 2 : 0x06 (send a command)
 	Byte 3 : Unknown
 	Byte 4 : Number of arguments + 1 (for the command byte)
 	Byte 5 : Number of response bytes
 send the command 
 receive the response 
		
		  Check that we get a valid reply back (buffer[1] == 0) and
		  that CTS is set before returning, otherwise we wait and try
		  again. The i2c driver also does the CTS check, but the timeouts
		  used there are much too small for this USB driver, so we wait
		  for it here.
 Zero the status value, ensuring CTS isn't set 
 This name value shows up in the sysfs filename associated
 set up sysfs linkage to our parent device 
 check if the device is present and register with v4l and usb if it is 
 Initialize local device structure 
 USB subsystem interface 
 SPDX-License-Identifier: GPL-2.0-or-later
  driversmediaradioradio-si4713.c
  Platform Driver for Silicon Labs Si4713 FM Radio Transmitter:
  Copyright (c) 2008 Instituto Nokia de Tecnologia - INdT
  Contact: Eduardo Valentin <eduardo.valentin@nokia.com>
 module parameters 
 radio device minor (-1 ==> auto assign) 
 Driver state struct 
 radio_si4713_fops - file operations interface 
 Note: locking is done at the subdev level in the i2c driver. 
 Video4Linux Interface 
 radio_si4713_querycap - query device capabilities 
  v4l2 ioctl call backs.
  we are just a wrapper for v4l2_sub_devs.
 radio_si4713_vdev_template - video device interface 
 Platform driver interface 
 radio_si4713_pdriver_probe - probe for the device 
 Serialize all access to the si4713 
 radio_si4713_pdriver_remove - remove the device 
 SPDX-License-Identifier: GPL-2.0-or-later
  driversmediaradiosi4713-i2c.c
  Silicon Labs Si4713 FM Radio Transmitter I2C commands.
  Copyright (c) 2009 Nokia Corporation
  Contact: Eduardo Valentin <eduardo.valentin@nokia.com>
 module parameters 
 frequency domain transformation (using times 10 to avoid floats) 
 mute definition 
  Values for limiter release time (sorted by second column)
 	device	release
 	value	time (us)
  Values for audio compression release time (sorted by second column)
 	device	release
 	value	time (us)
  Values for preemphasis (sorted by second column)
 	device	preemphasis
 	value	value (v4l2)
 si4713_handler: IRQ handler, just complete work 
  si4713_send_command - sends a command to si4713 and waits its response
  @sdev: si4713_device structure for the device we are communicating
  @command: command id
  @args: command arguments we are sending (up to 7)
  @argn: actual size of @args
  @response: buffer to place the expected response from the device (up to 15)
  @respn: actual size of @response
  @usecs: amount of time to wait before reading the response (in usecs)
 First send the command and its arguments 
 Wait response from interrupt 
  si4713_read_property - reads a si4713 property
  @sdev: si4713_device structure for the device we are communicating
  @prop: property identification number
  @pv: property value to be returned on success
	
	 	.First byte = 0
	 	.Second byte = property's MSB
	 	.Third byte = property's LSB
  si4713_write_property - modifies a si4713 property
  @sdev: si4713_device structure for the device we are communicating
  @prop: property identification number
  @val: new value for that property
	
	 	.First byte = 0
	 	.Second byte = property's MSB
	 	.Third byte = property's LSB
	 	.Fourth byte = value's MSB
	 	.Fifth byte = value's LSB
	
	  As there is no command response for SET_PROPERTY,
	  wait Tcomp time to finish before proceed, in order
	  to have property properly set.
  si4713_powerup - Powers the device up
  @sdev: si4713_device structure for the device we are communicating
	
	 	.First byte = Enabled interrupts and boot function
	 	.Second byte = Input operation mode
  si4713_powerdown - Powers the device down
  @sdev: si4713_device structure for the device we are communicating
  si4713_checkrev - Checks if we are treating a device with the correct rev.
  @sdev: si4713_device structure for the device we are communicating
  si4713_wait_stc - Waits STC interrupt and clears status bits. Useful
 		     for TX_TUNE_POWER, TX_TUNE_FREQ and TX_TUNE_MEAS
  @sdev: si4713_device structure for the device we are communicating
  @usecs: timeout to wait for STC interrupt signal
 Clear status bits 
		 The USB device returns errors when it waits for the
		 We sleep here for 3-4 ms in order to avoid flooding the device
		  with USB requests. The si4713 USB driver was developed
		  by reverse engineering the Windows USB driver. The windows
  si4713_tx_tune_freq - Sets the state of the RF carrier and sets the tuning
 			frequency between 76 and 108 MHz in 10 kHz units and
 			steps of 50 kHz.
  @sdev: si4713_device structure for the device we are communicating
  @frequency: desired frequency (76 - 108 MHz, unit 10 KHz, step 50 kHz)
	
	 	.First byte = 0
	 	.Second byte = frequency's MSB
	 	.Third byte = frequency's LSB
  si4713_tx_tune_power - Sets the RF voltage level between 88 and 120 dBuV in
 			1 dB units. A value of 0x00 indicates off. The command
 			also sets the antenna tuning capacitance. A value of 0
 			indicates autotuning, and a value of 1 - 191 indicates
 			a manual override, which results in a tuning
 			capacitance of 0.25 pF x @antcap.
  @sdev: si4713_device structure for the device we are communicating
  @power: tuning power (88 - 120 dBuV, unitstep 1 dB)
  @antcap: value of antenna tuning capacitor (0 - 191)
	
	 	.First byte = 0
	 	.Second byte = 0
	 	.Third byte = power
	 	.Fourth byte = antcap
 Map power values 1-87 to MIN_POWER (88) 
  si4713_tx_tune_measure - Enters receive mode and measures the received noise
 			level in units of dBuV on the selected frequency.
 			The Frequency must be between 76 and 108 MHz in 10 kHz
 			units and steps of 50 kHz. The command also sets the
 			antenna	tuning capacitance. A value of 0 means
 			autotuning, and a value of 1 to 191 indicates manual
 			override.
  @sdev: si4713_device structure for the device we are communicating
  @frequency: desired frequency (76 - 108 MHz, unit 10 KHz, step 50 kHz)
  @antcap: value of antenna tuning capacitor (0 - 191)
	
	 	.First byte = 0
	 	.Second byte = frequency's MSB
	 	.Third byte = frequency's LSB
	 	.Fourth byte = antcap
  si4713_tx_tune_status- Returns the status of the tx_tune_freq, tx_tune_mea or
 			tx_tune_power commands. This command return the current
 			frequency, output voltage in dBuV, the antenna tunning
 			capacitance value and the received noise level. The
 			command also clears the stcint interrupt bit when the
 			first bit of its arguments is high.
  @sdev: si4713_device structure for the device we are communicating
  @intack: 0x01 to clear the seektune complete interrupt status indicator.
  @frequency: returned frequency
  @power: returned power
  @antcap: returned antenna capacitance
  @noise: returned noise level
	
	 	.First byte = intack bit
  si4713_tx_rds_buff - Loads the RDS group buffer FIFO or circular buffer.
  @sdev: si4713_device structure for the device we are communicating
  @mode: the buffer operation mode.
  @rdsb: RDS Block B
  @rdsc: RDS Block C
  @rdsd: RDS Block D
  @cbleft: returns the number of available circular buffer blocks minus the
           number of used circular buffer blocks.
  si4713_tx_rds_ps - Loads the program service buffer.
  @sdev: si4713_device structure for the device we are communicating
  @psid: program service id to be loaded.
  @pschar: assumed 4 size char array to be loaded into the program service
 We want to clear the whole thing 
 Write the new ps name and clear the padding 
 Setup the size to be sent 
		 RDS spec says that if the last block isn't used,
		  then apply a carriage return
  si4713_update_tune_status - update properties from tx_tune_status
  command. Must be called with sdev->mutex held.
  @sdev: si4713_device structure for the device we are communicating
	TODO: check that power_level and antenna_capacitor really are not
	changed by the hardware. If they are, then these controls should become
	volatiles.
	sdev->power_level = p;
 FM_TX class controls 
  si4713_setup - Sets the device up with current configuration.
  @sdev: si4713_device structure for the device we are communicating
 Device procedure needs to set frequency first 
  si4713_initialize - Sets the device up with default configuration.
  @sdev: si4713_device structure for the device we are communicating
 si4713_s_ctrl - set the value of a control 
			 don't handle this control if we force setting all
			  controls since in that case it will be handled by
 Make sure we don't set this twice 
 si4713_ioctl - deal with private ioctls (only rnl for now) 
 Set desired measurement frequency 
 get results from tune status 
 nothing 
 si4713_g_modulator - get modulator attributes 
 Report current frequency range limits 
 Report current audio mode: mono or stereo 
 Report rds feature status 
 si4713_s_modulator - set modulator attributes 
 Set audio mode: mono or stereo 
 si4713_g_frequency - get tuner or modulator radio frequency 
 si4713_s_frequency - set tuner or modulator radio frequency 
 Check frequency range 
  I2C driver interface
 si4713_probe - probe for the device 
	
	  Report step as 8. From RDS spec, psname
	  should be 8. But there are receivers which scroll strings
	  sized as 8xN.
	
	  Report step as 32 (2A block). From RDS spec,
	  radio text should be 32 for 2A block. But there are receivers
	  which scroll strings sized as 32xN. Setting default to 32.
 si4713_remove - remove the device 
 si4713_i2c_driver - i2c driver interface 
 SPDX-License-Identifier: GPL-2.0-only
   FM Driver for Connectivity chip of Texas Instruments.
   This sub-module of FM driver is common for FM RX and TX
   functionality. This module is responsible for:
   1) Forming group of Channel-8 commands to perform particular
      functionality (eg., frequency set require more than
      one Channel-8 command to be sent to the chip).
   2) Sending each Channel-8 command to the chip and reading
      response back over Shared Transport.
   3) Managing TX and RX Queues and Tasklets.
   4) Handling FM Interrupt packet and taking appropriate action.
   5) Loading FM firmware to the chip (common, FM TX, and FM RX
      firmware files based on mode selection)
   Copyright (C) 2011 Texas Instruments
   Author: Raja Mani <raja_mani@ti.com>
   Author: Manjunatha Halli <manjunatha_halli@ti.com>
 Region info 
 EuropeUS 
 87.5 MHz 
 108 MHz 
 Japan 
 76 MHz 
 90 MHz 
 Band selection 
 EuropeUS 
 RDS buffer blocks 
 Radio Nr 
 FM irq handlers forward declaration 
  When FM common module receives interrupt packet, following handlers
  will be executed one after another to service the interrupt(s)
 HW malfunction irq handler 
 RDS threshold reached irq handler 
 Tune operation ended irq handler 
 TX power enable irq handler 
 Low RSSI irq handler 
 Interrupt process post action 
 FM interrupt handler table 
 RDS threshold reached irq handler 
 TX power enable irq handler 
 Interrupt process post action 
 Continue next function in interrupt handler table 
 To dump outgoing FM Channel-8 packets 
 To dump incoming FM Channel-8 packets 
  FM common sub-module will schedule this tasklet whenever it receives
  FM packet from ST driver.
 Process all packets in the RX queue 
 FM interrupt packet? 
 FM interrupt handler started already? 
				
				  Execute first function in interrupt handler
				  table.
 Anyone waiting for this with completion handler? 
 Is this for interrupt handler? 
 Execute interrupt handler where state index points 
		
		  Check flow control field. If Num_FM_HCI_Commands field is
		  not zero, schedule FM TX tasklet.
 FM send tasklet: is scheduled when FM packet has to be sent to chip 
 Check, is there any timeout happened to last transmitted packet 
 Send queued FM TX packets 
 Write FM packet to ST driver 
  Queues FM Channel-8 packet to FM TX queue and schedules FM TX tasklet for
  transmission
	
	  Don't fill FM header info for the commands which come from
	  FM firmware file.
 Fill command header info 
 0x08 
 3 (fm_opcode,rd_wr,dlen) + payload len) 
 FM opcode 
 readwrite type 
		
		  If firmware download has finished and the command is
		  not a read command then payload is != NULL - a write
		  command with u16 payload - convert to be16
 Sends FM Channel-8 command to the chip and waits for the response 
 Send response data to caller 
 Skip header info and copy only response data 
 --- Helper functions used in FM interrupt handlers ---
  Interrupt process timeout handler.
  One of the irq handler did not get proper response from the chip. So take
  recovery action here. FM interrupts are disabled in the beginning of
  interrupt process. Therefore reset stage index to re-enable default
  interrupts. So that next interrupt will be processed as usual.
		 Stop recovery action (interrupt reenable process) and
 --------- FM interrupt handlers ------------
 Send FLAG_GET command , to know the source of interrupt 
 Skip header info and copy only response data 
 Continue next function in interrupt handler table 
 Continue next function in interrupt handler table 
 Continue next function in interrupt handler table 
 Send the command to read RDS data from the chip 
 Keeps track of current RX channel AF (Alternate Frequency) 
 First AF indicates the number of AF follows. Reset the list 
 Do check in AF cache 
 Reached the limit of the list - ignore the next AF 
	
	  If we reached the end of the list then this AF is not
	  in the list - add it.
  Converts RDS buffer data from big endian format
  to little endian format.
	
	  Since in Orca the 2 RDS Data bytes are in little endian and
	  in Dolphin they are in big endian, the parsing of the RDS data
	  is chip dependent
 Skip header info 
 Parse the RDS data 
 Get the type: 0=A, 1=B, 2=C, 3=C', 4=D, 5=E 
 Transform the blk type into index sequence (0, 1, 2, 3, 4) 
 Skip checkword (control) byte and copy only data byte 
 If completed a whole group then handle it 
			
			  Extract PI code and store in local cache.
			  We need this during AF switch processing.
 Copy raw rds data to internal rds buffer 
		
		  Fill RDS buffer as per V4L2 specification.
		  Store control byte
 Offset name 
 Received offset 
 Store data byte 
 Check for overflow & start over 
 Wakeup read queue 
 Disable further low RSSI interrupts 
 Continue next function in interrupt handler table 
 Set PI code - must be updated if the AF list is not empty 
  Set PI mask.
  0xFFFF = Enable PI code matching
  0x0000 = Disable PI code matching
 Enable FR (tuning operation ended) interrupt 
 Skip header info and copy only response data 
 If the frequency was changed the jump succeeded 
 AF feature is on, enable low level RSSI interrupt 
 jump to the next freq in the AF list 
 If we reached the end of the list - stop searching 
 AF List is not over - try next one 
 Re-enable FM interrupts 
	
	  This is last function in interrupt table to be executed.
	  So, reset stage index to 0.
 Start processing any pending interrupt 
 Returns availability of RDS data in internal buffer 
 Copies RDS data from internal buffer to user buffer 
 Calculate block count from byte count 
 TODO : Change this later 
 Sends power off command to the chip 
 Reads init command from FM firmware file and loads to the chip 
 Skip file header info , we already verified it 
 Send 
 Delay 
 Loads default RX configuration to the chip 
 Does FM power on sequence 
	
	  Initialize FM common module. FM GPIO toggling is
	  taken care in Shared Transport driver.
 Allow the chip to settle down in Channel-8 mode 
 Set FM Modes(TX, RX, OFF) 
 OFF Mode 
 TX Mode 
 RX Mode 
 Power down before switching to TX or RX mode 
 Set default configuration 
 Returns current FM mode (TX, RX, OFF) 
 Called by ST layer when FM packet is available 
  Called by ST layer to indicate protocol registration completion
  status.
  This function will be called from FM V4L2 open function.
  Register with ST driver and initialize driver data.
 TI ST driver will fill write pointer 
 Initialize TX queue and TX tasklet 
 Initialize RX Queue and RX tasklet 
TODO: add FM_STIC_EVENT later 
 Region info 
  This function will be called from FM V4L2 release function.
  Unregister from ST driver.
 Service pending read 
  Module init function. Ask FM V4L module to register video device.
  Allocate memory for FM driver context and RX RDS buffer.
 Module exit function. Ask FM V4L module to unregister video device 
 ------------- Module Info ------------- 
 SPDX-License-Identifier: GPL-2.0-only
   FM Driver for Connectivity chip of Texas Instruments.
   This file provides interfaces to V4L2 subsystem.
   This module registers with V4L2 subsystem as Radio
   data system interface (devradio). During the registration,
   it will expose two set of function pointers.
     1) File operation related API (open, close, read, write, poll...etc).
     2) Set of V4L2 IOCTL complaint API.
   Copyright (C) 2011 Texas Instruments
   Author: Raja Mani <raja_mani@ti.com>
   Author: Manjunatha Halli <manjunatha_halli@ti.com>
 -- V4L2 RADIO (devradioX) device file operation interfaces --- 
 Read RX RDS data 
 Turn on RDS mode if it is disabled 
 Copy RDS data from internal buffer to user buffer 
 Write TX RDS data 
  Handle open request for "devradioX" device.
  Start with FM RX mode as default.
 Don't allow multiple open 
 V4L2 RADIO (devradioX) device IOCTL interfaces 
 set volume 
 set mute 
 set TX power level - ext control 
 Get tuner attributes. If current mode is NOT RX, return error 
 Store rangelow and rangehigh freq in unit of 62.5 Hz 
	
	  Actual rssi value lies in between -128 to +127.
	  Convert this range from 0 to 255 by adding +128
	
	  Return signal strength value should be within 0 to 65535.
	  Find out correct signal radio by multiplying (65535255) = 257
  Set tuner attributes. If current mode is NOT RX, set to RX.
  Currently, we set only audio mode (monostereo) and RDS state (onoff).
  Should we set other tuner attributes, too?
 Get tuner or modulator radio frequency 
 Frequency unit of 62.5 Hz
 Set tuner or modulator radio frequency 
	
	  As V4L2_TUNER_CAP_LOW is set 1 user sends the frequency
	  in units of 62.5 Hz.
 Set hardware frequency seek. If current mode is NOT RX, set it RX. 
 Get modulator attributes. If mode is not TX, return no attributes. 
 Set modulator attributes. If mode is not TX, set to TX. 
 V4L2 RADIO device parent structure 
	
	  To ensure both the tuner and modulator ioctls are accessible we
	  set the vfl_dir to M2M to indicate this.
	 
	  It is not really a mem2mem device of course, but it can both receive
	  and transmit using the same radio device. It's the only radio driver
	  that does this and it should really be split in two radio devices,
	  but that would affect applications using this driver.
 Init mutex for core locking 
 Setup FM driver's V4L2 properties 
 Register with V4L2 subsystem as RADIO device 
 Register to v4l2 ctrl handler framework 
	
	  Following controls are handled by V4L2 control framework.
	  Added in ascending ID order.
 Unregister to v4l2 ctrl handler framework
 Unregister RADIO device from V4L2 subsystem 
 SPDX-License-Identifier: GPL-2.0-only
   FM Driver for Connectivity chip of Texas Instruments.
   This sub-module of FM driver implements FM TX functionality.
   Copyright (C) 2011 Texas Instruments
 Set StereoMono mode 
 Scroll mode 
 Setting unique PI TODO: how unique? 
 Set decoder id 
 TODO: RDS_MODE_GET? 
 TODO: LENGTH_GET? 
 Set RDS length 
 Set RDS text 
 Set RDS mode 
 Send command to enable RDS 
 Set RDS length 
 Set RDS text 
 Set RDS length 
 Set RDS text 
 Set RDS mode 
 Send command to set the band 
 Set TX Audio IO 
 Set Audio IO Enable 
 TODO: is audio set? 
 Start TX Transmission 
 Enable POWER_ENB interrupts 
 Set Power Enable 
 Wait for Power Enabled 
 Set TX power level 
 If the core isn't ready update global variable 
	 Set power level: Application will specify power level value in
	  units of dBuV, whereas range and step are specific to FM chip.
	  For TI's WL chips, convert application specified power level value
	  to chip specific value by subtracting 122 from it. Refer to TI FM
	  data sheet for details.
 TODO: is the power level set? 
  Sets FM TX pre-emphasis filter value (OFF, 50us, or 75us)
  Convert V4L2 specified filter values to chip specific filter values.
 Get the TX tuning capacitor value.
 Set TX Frequency 
 Enable FR, BL interrupts 
 Set current tuner channel 
 I2S 
 Enable transmission 
 SPDX-License-Identifier: GPL-2.0-only
   FM Driver for Connectivity chip of Texas Instruments.
   This sub-module of FM driver implements FM RX functionality.
   Copyright (C) 2011 Texas Instruments
   Author: Raja Mani <raja_mani@ti.com>
   Author: Manjunatha Halli <manjunatha_halli@ti.com>
 Set audio enable 
 Set hilo to automatic selection 
 Calculate frequency index and set
 Read flags - just to clear any pending interrupts if we had 
 Enable FR, BL interrupts 
 Start tune 
 Wait for tune ended interrupt 
 Read freq back to confirm 
 Update local cache  
 Re-enable default FM interrupts 
 Reset RDS cache and current station pointers 
 set channel spacing 
 Set channel spacing 
 Read the current frequency from chip 
 Check the offset in order to be aligned to the channel spacing
 Seek Up  :
 Seek Down  ;
	
	  Add or subtract offset in order to stay aligned to the channel
	  spacing.
 Set calculated next frequency to perform seek 
 Set search direction (0:Seek Down, 1:Seek Up) 
 Read flags - just to clear any pending interrupts if we had 
 Enable FR, BL interrupts 
 Start seek 
 Wait for tune endedband limit reached interrupt 
 Re-enable default FM interrupts 
 Calculate frequency index to write 
 Read freq to know where operation tune operation stopped 
 Reset RDS cache and current station pointers 
 Get volume 
 To get current band's bottom and top frequency 
 Returns current band index (0-EuropeUS; 1-Japan) 
 Sets band (0-EuropeUS; 1-Japan) 
 Send cmd to set the band  
 Check whether current RX frequency is within band boundary 
 Current RX frequency is not in range. So, update it 
 Reads current mute mode (Mute OffOnAttenuate)
 Configures mute mode (Mute OffOnAttenuate) 
 Gets RF dependent soft mute mode enabledisable status 
 Sets RF dependent soft mute mode 
 Returns the signal strength level of current channel 
 Read current RSSI level 
  Sets the signal strength level that once reached
  will stop the auto search process
 Returns current RX RSSI threshold value 
 Sets RX stereomono modes 
 Set stereomono mode 
 Set stereo blending mode 
 Gets current RX stereomono mode 
 Choose RX de-emphasis filter mode (50us75us) 
 Gets current RX de-emphasis filter mode 
 EnableDisable RX RDS 
 Turn on RX RDS and RDS circuit 
 Clear and reset RDS FIFO 
 Read flags - just to clear any pending interrupts. 
 Set RDS FIFO threshold value 
 Enable RDS interrupt 
 Update our local flag 
 Turn off RX RDS 
 Reset RDS pointers 
 Update RDS local cache 
 Returns current RX RDS enabledisable status 
 Sets RDS operation mode (RDSRDBS) 
 Set RDS operation mode 
 Configures Alternate Frequency switch mode 
 Enabledisable low RSSI interrupt based on af_mode 
 Returns Alternate Frequency switch status 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (c) 2014 Linaro Ltd.
  Copyright (c) 2014 HiSilicon Limited.
 interrupt mask 
 IR_ENABLE register bits 
 only support raw mode 
 symbol start from low to high, symbol stream end at high
 Need to set extra bit for enabling IR 
 Now only support raw mode, with symbol start from low to high 
 write arbitrary value to start  
		
		  we must read IR_DATAL first, then we can clean up
		  IR_INTS availably since logic would not clear
		  fifo when overflow, drv do the job
 Empty software fifo 
 SPDX-License-Identifier: GPL-2.0-or-later
   winbond-cir.c - Driver for the Consumer IR functionality of Winbond
                   SuperIO chips.
   Currently supports the Winbond WPCD376i chip (PNP id WEC1022), but
   could probably support others (Winbond WEC102X, NatSemi, etc)
   with minor modifications.
   Original Author: David Härdeman <david@hardeman.nu>
      Copyright (C) 2012 Sean Young <sean@mess.org>
      Copyright (C) 2009 - 2011 David Härdeman <david@hardeman.nu>
   Dedicated to my daughter Matilda, without whose loving attention this
   driver would have been finished in half the time and with a fraction
   of the bugs.
   Written using:
     o Winbond WPCD376I datasheet helpfully provided by Jesse Barnes at Intel
     o NatSemi PC87338PC97338 datasheet (for the serial port stuff)
     o DSDT dumps
   Supported features:
     o IR Receive
     o IR Transmit
     o Wake-On-CIR functionality
     o Carrier detection
 CEIR Wake-Up Registers, relative to data->wbase                      
 CEIR Receiver Control		
 CEIR Receiver Status		
 CEIR Receiver Event Enable	
 CEIR Receiver Counter Low	
 CEIR Receiver Counter High	
 CEIR Receiver Index		
 CEIR Receiver Data		
 CEIR Re. Compare Strlen		
 CEIR Re. Configuration 1	
 CEIR Re. Configuration 2	
 CEIR Enhanced Functionality Registers, relative to data->ebase       
 Enhanced IR Control Status	
 Infrared Counter Control	
 Infrared Counter LSB		
 Infrared Counter MSB		
 Infrared Emitter Status		
 SP3 Banked Registers, relative to data->sbase                        
 Bank Select, all banks		
 Bank 0				
 FIFO RX data (r)		
 FIFO TX data (w)		
 Interrupt Enable		
 Event Identification (r)	
 FIFO Control (w)		
 Mode Control			
 Link Status			
 Modem Status			
 Aux Status and Control		
 Bank 2				
 Baud Divisor LSB		
 Baud Divisor MSB		
 Extended Control 1		
 Extended Control 2		
 TX FIFO Level			
 RX FIFO Level			
 Bank 3				
 Module Identification		
 LCR Shadow			
 FCR Shadow			
 Bank 4				
 Infrared Control 1		
 Bank 5				
 Infrared Control 2		
 Bank 6				
 Infrared Control 3		
 SIR Pulse Width			
 Bank 7				
 IR RX Demod Control		
 IR TX Mod Control		
 CEIR Config			
 Infrared Config 1		
 Infrared Config 4		
  Magic values follow
 No interrupts for WBCIR_REG_SP3_IER and WBCIR_REG_SP3_EIR 
 RX data bit for WBCIR_REG_SP3_IER and WBCIR_REG_SP3_EIR 
 TX data low bit for WBCIR_REG_SP3_IER and WBCIR_REG_SP3_EIR 
 OverUnder-flow bit for WBCIR_REG_SP3_IER and WBCIR_REG_SP3_EIR 
 TX data empty bit for WBCEIR_REG_SP3_IER and WBCIR_REG_SP3_EIR 
 Led enabledisable bit for WBCIR_REG_ECEIR_CTS 
 RX data available bit for WBCIR_REG_SP3_LSR 
 RX data overrun error bit for WBCIR_REG_SP3_LSR 
 TX End-Of-Transmission bit for WBCIR_REG_SP3_ASCR 
 RX disable bit for WBCIR_REG_SP3_ASCR 
 TX data underrun error bit for WBCIR_REG_SP3_ASCR 
 Extended mode enable bit for WBCIR_REG_SP3_EXCR1 
 Select compare register in WBCIR_REG_WCEIR_INDEX (bits 5 & 6) 
 Select mask register in WBCIR_REG_WCEIR_INDEX (bits 5 & 6) 
 Starting address of selected register in WBCIR_REG_WCEIR_INDEX 
 Enable carrier counter 
 Reset carrier counter 
 Invert TX 
 Receiver oversampling 
 Valid banks for the SP3 UART 
 Supported power-on IR Protocols 
 Possible states for IR reception 
 Possible states for IR transmission 
 Misc 
 Family ID for the WPCD376I	
 Chip ID for the WPCD376I	
 Wake-Up IO Reg Len		
 Enhanced Func IO Reg Len	
 Serial Port 3 (IR) Reg Len	
 Per-device data 
 Wake-Up Baseaddr		
 Enhanced Func. Baseaddr	
 Serial Port Baseaddr	
 Serial Port IRQ		
 RX state 
 TX state 
 default = 0 
 default = 0 
  UTILITY FUNCTIONS
 Caller needs to hold wbcir_lock 
 Selects the register bank for the serial port 
 Manchester encodes bits to RC6 message cells (see wbcir_shutdown) 
  INTERRUPT FUNCTIONS
 reset and restart the counter 
 Tell hardware to go idle by setting RXINACTIVE 
 Since RXHDLEV is set, at least 8 bytes are in the FIFO 
 TX FIFO empty 
 TX FIFO low (3 bytes or less) 
	
	  TX data is run-length coded in bytes: YXXXXXXX
	  Y = space (1) or pulse (0)
	  X = duration, encoded as (X + 1)  10us (i.e 10 to 1280 us)
 pulsespace 
 Finished 
 Clear TX underrun bit 
 At the end of transmission, tell the hw before last byte 
 More data to follow... 
 RX overflow? (read clears bit) 
 TX underflow? 
  RC-CORE INTERFACE FUNCTIONS
 Set a higher sampling resolution if carrier reports are enabled 
 Enable oversampling if carrier reports are enabled 
 return the number of transmitters 
 Four outputs, only one output can be enabled at a time 
 Convert values to multiples of 10us 
 Not sure if this is possible, but better safe than sorry 
 Fill the TX fifo once, the irq handler will do the rest 
 We're done 
  SETUPINITSUSPENDRESUME FUNCTIONS
 Mask = 13 bits, ex toggle 
 2nd start bit  
 6 command bits 
 2 address bits 
 3 address bits 
 2nd start bit  
 Command 
 Address 
 Header 
 mode1 = mode0 = 0, ignore toggle 
 start bit = 1, mode2 = 0 
 Command 
 Address + Toggle 
 Customer bits 7 - 0 
 Customer range bit and bits 15 - 8 
 Header 
 mode1 = mode0 = 1, submode = 0 
 start bit = 1, mode2 = 1 
 Set compare and compare mask 
 RC6 Compare String Len 
 Clear status bits NEC_REP, BUFF, MSG_END, MATCH 
 Clear BUFF_EN, Clear END_EN, Set MATCH_EN 
 Set CEIR_EN 
 Clear BUFF_EN, Clear END_EN, Clear MATCH_EN 
 Clear CEIR_EN 
	
	  ACPI will set the HW disable bit for SP3 which means that the
	  output signals are left in an undefined state which may cause
	  spurious interrupts which we need to ignore until the hardware
	  is reinitialized.
  Wakeup handling is done on shutdown.
 Disable interrupts 
 Set RX_INV, Clear CEIR_EN (needed for the led) 
 Clear status bits NEC_REP, BUFF, MSG_END, MATCH 
 Clear BUFF_EN, Clear END_EN, Clear MATCH_EN 
 Set RC5 cell time to correspond to 36 kHz 
 Set IRTX_INV 
	
	  Clear IR LED, set SP3 clock to 24Mhz, set TX mask to IRTX1,
	  set SP3_IRRX_SW to binary 01, helpfully not documented
 Enable extended mode 
	
	  Configure baud generator, IR data will be sampled at
	  a bitrate of: (24Mhz  prescaler)  (divisor  16).
	 
	  The ECIR registers include a flag to change the
	  24Mhz clock freq to 48Mhz.
	 
	  It's not documented in the specs, but fifo levels
	  other than 16 seems to be unsupported.
 prescaler 1.0, txrx fifo lvl 16 
 Set baud divisor to sample every 10 us 
 Set CEIR mode 
 Clear LSR 
 Clear MSR 
 Disable RX demod, enable run-length encdec, set freq span 
 Disable timer 
 Disable MSR interrupt, clear AUX_IRX, mask RX during TX? 
 Disable CRC 
 Set RX demodulation freq, not really used 
 Set TX modulation, 36kHz, 7us pulse width 
 Set invert and pin direction 
 Set FIFO thresholds (RX = 8, TX = 3), reset RXTX 
 Clear AUX status bits 
 Clear RX state 
 Clear TX state 
 Enable interrupts 
 Disable interrupts 
 Clear status bits NEC_REP, BUFF, MSG_END, MATCH 
 Clear CEIR_EN 
 Clear BUFF_EN, END_EN, MATCH_EN 
 This is ok since &data->led isn't actually used 
 SPDX-License-Identifier: GPL-2.0-or-later
  IguanaWorks USB IR Transceiver support
  Copyright (C) 2012 Sean Young <sean@mess.org>
 receiver support 
 transmit support 
 if we sent an nop packet, do not expect a response 
	
	  On cold boot, the iguanair initializes on the first packet
	  received but does not process that packet. Send an empty
	  packet.
  The iguanair creates the carrier by busy spinning after each half period.
  This is counted in CPU cycles, with the CPU running at 24MHz. It is
  broken down into 7-cycles and 4-cyles delays, with a preference for
  4-cycle delays, minus the overhead of the loop itself (cycle_overhead).
		
		  Calculate minimum number of 7 cycles needed so
		  we are left with a multiple of 4; so we want to have
		  (sevens  7) & 3 == cycles & 3
		
		  The firmware interprets these values as a relative offset
		  for a branch. Immediately following the branches, there
		  4 instructions of 7 cycles (2 bytes each) and 110
		  instructions of 4 cycles (1 byte each). A relative branch
		  of 0 will execute all of them, branch further for less
		  cycle burning.
 convert from us to carrier periods 
 we want to disable receiver on unbind 
 SPDX-License-Identifier: GPL-2.0-or-later
   Copyright (C) 2008 Nokia Corporation
   Based on lirc_serial.c
 carrier frequency 
 carrier duty cycle 
	
	  If we happen to hit an odd latency spike, loop through the
	  pulses until we catch up.
 Stop TX here 
 Wait any pending transfers to finish 
 Insert termination mark 
	
	  REVISIT: Adjust latency requirements so the device doesn't go in too
	  deep sleep states with pm_qos_add_request().
	
	  Don't return back to the userspace until the transfer has
	  finished
 REVISIT: Remove pm_qos constraint, we can sleep again 
	
	  In case the device is still open, do not suspend. Normally
	  this should not be a problem as lircd only keeps the device
	  open only for short periods of time. We also don't want to
	  get involved with race conditions that might happen if we
	  were in a middle of a transmit. Thus, we defer any suspend
	  actions until transmit has completed.
 CONFIG_PM 
 Use default, in case userspace does not set the carrier 
 SPDX-License-Identifier: GPL-2.0-or-later
  driver for ENE KB3926 BCDEF CIR (pnp id: ENE0XXX)
  Copyright (C) 2010 Maxim Levitsky <maximlevitsky@gmail.com>
  Special thanks to:
    Sami R. <maesesami@gmail.com> for lot of help in debugging and therefore
     bringing to life support for transmission & learning mode.
    Charlie Andrews <charliethepilot@googlemail.com> for lots of help in
    bringing up the support of new firmware buffer that is popular
    on latest notebooks
    ENE for partial device documentation
 read a hardware register 
 write a hardware register 
 Set bits in hardware register 
 Clear bits in hardware register 
 A helper to setclear a bit in register according to boolean variable 
 detect hardware features 
 detect features hardware supports 
 Read properties of hw sample buffer 
 Restore the pointers to extra buffers - to make module reload work
 Read hardware write pointer 
 Gets address of next sample from HW ring buffer 
 Sense current received carrier 
 this enablesdisables the CIR RX engine 
 this selects input for CIR engine. Ether GPIO 0A or GPIO40
  this enables alternative input via fan tachometer sensor and bypasses
  the hw CIR engine
 setup the receiver for RX
 This selects RLC input and clears CFG2 settings 
 set sample period
 revB doesn't support inputs 
		 Enable the opposite of the normal input
		That means that if GPIO40 is normally used, use GPIO0A
		and vice versa.
		This input will carry non demodulated
 Enable carrier demodulation 
 Enable carrier detection 
 Disable carrier detection & demodulation 
		 Fan input doesn't support timeouts, it just ends the
		 Theoreticly timeout is unlimited, but we cap it
		  because it was seen that on one device, it
		  would stop sending spaces after around 250 msec.
		  Besides, this is close to 2^32 anyway and timeout is u32.
 Enable the device for receive 
 Enable system interrupt 
 Enable inputs 
 ack any pending irqs - just in case 
 enable firmware bits 
 enter idle mode 
 Enable the device for receive - wrapper to track the state
 Disable the device receiver 
 disable inputs 
 disable hardware IRQ and firmware flag 
 Disable the device receiver - wrapper to track the state 
 This resets the receiver. Useful to stop stream of spaces at end of
  transmission
 Set up the TX carrier frequency and duty cycle 
 Enabledisable transmitters 
 prepare transmission 
 Show information about currently connected transmitter jacks 
 disable receive on revc 
 Enable TX engine 
 end transmission 
 TX one sample - must be called with dev->hw_lock
 Grab next TX sample 
 simulate TX done interrupt 
 timer to simulate tx done interrupt 
 read irq status and ack it 
 original driver does that twice - a workaround ? 
 check RX interrupt 
 check TX interrupt 
 interrupt handler 
	 On hardware that don't support extra buffer we need to trust
 read high part of the sample 
 clear space bit, and other unused bits 
 Initialize default settings 
%
 Set reasonable default timeout 
 Upload all hardware settings at once. Used at load and resume time 
 outside interface: called on first open
 outside interface: called on device close
 outside interface: set transmitter mask 
 invalid txmask 
 return count of transmitters 
 outside interface : set tx carrier 
outside interface : set tx duty cycle 
 outside interface: enable learning mode 
 outside interface: enable or disable idle mode 
 outside interface: transmit 
 Transmit first two samples 
 probe entry 
 allocate memory 
 validate resources 
 init these to -1, as 0 is valid for both 
 don't allow too shortlong sample periods 
 detect hardware version and features 
 claim the resources 
 main unload function 
 enable wake on IR (wakes on specific button on original remote) 
 SPDX-License-Identifier: GPL-2.0-only
 ir-xmp-decoder.c - handle XMP IR PulseSpace protocol
  Copyright (C) 2014 by Marcel Mol
  - Based on info from http:www.hifi-remote.com
  - Ignore Toggle=9 frames
  - Ignore XMP-1 XMP-2 difference, always store 16 bit OBC
 us 
 us 
 us 
 us 
 should be 80ms but not all duration supliers can go that high 
  ir_xmp_decode() - Decode one XMP pulse or space
  @dev:	the struct rc_dev descriptor of the device
  @ev:		the struct ir_raw_event descriptor of the pulsespace
  This function returns -EINVAL if the pulse violates the state machine
			
			  the 4th nibble should be 15 so base the divider on this
			  to transform durations into nibbles. Subtract 2000 from
			  the divider to compensate for fluctuations in the signal
 convert to nibbles and do some sanity checks 
 Expect 8 or 16 nibble pulses. 16 in case of 'final' frame 
				
				  TODO: for now go back to half frame position
				 	 so trailer can be found and key press
				 	 can be handled.
 store nibble raw data, decode after trailer 
www.mesa.nl)");
 SPDX-License-Identifier: GPL-2.0
 SPI driven IR LED device driver
 Copyright (c) 2016 Samsung Electronics Co., Ltd.
 Copyright (c) Andi Shyti <andi@etezian.org>
 convert the pulsespace signal to raw binary signal 
		
		  the first value in buffer is a pulse, so that 0, 2, 4, ...
		  contain a pulse duration. On the contrary, 1, 3, 5, ...
		  contain a space duration.
	 ir_spi_set_duty_cycle cannot fail,
	  it returns int to be compatible with the
	  rc->s_tx_duty_cycle function
 SPDX-License-Identifier: GPL-2.0-or-later
  Infrared Toy and IR Droid RC core driver
  Copyright (C) 2020 Sean Young <sean@mess.org>
  http:dangerousprototypes.comdocsUSB_IR_Toy:_Sampling_mode
  This driver is based on the lirc driver which can be found here:
  https:sourceforge.netplircgitcimastertreepluginsirtoy.c
  Copyright (C) 2011 Peter Kooiman <pkooiman@gmail.com>
 End transmit and repeat reset command so we exit sump mode
 send next part of tx buffer
 get version
 enter sample mode
  When sending IR, it is imperative that we send the IR data as quickly
  as possible to the device, so it does not run out of IR data and
  introduce gaps. Allocate the buffer here, and then feed the data from
  the urb callback handler.
 There is an issue where if the unit is receiving IR while the
 first TXSTART command is sent, the device might end up hanging
 with its led on. It does not respond to any command when this
 happens. To work around this, re-enter sample mode.
 not sure what state the device is in, reset it
 not sure what state the device is in, reset it
	
	  end of transmission is detected by absence of a usb packet
	  with more pulsespaces. However, each usb packet sent can
	  contain 32 pulsespaces, which can be quite lengthy, so there
	  can be a delay between usb packets. For example with nec there is a
	  17ms gap between packets.
	 
	  So, make timeout a largish minimum which works with most protocols.
 SPDX-License-Identifier: GPL-2.0-only
 ir-jvc-decoder.c - handle JVC IR PulseSpace protocol
  Copyright (C) 2010 by David Härdeman <david@hardeman.nu>
 dev(8) + func(8) 
 us 
 lack of header -> repeat 
  ir_jvc_decode() - Decode one JVC pulse or space
  @dev:	the struct rc_dev descriptor of the device
  @ev:   the struct ir_raw_event descriptor of the pulsespace
  This function returns -EINVAL if the pulse violates the state machine
  ir_jvc_encode() - Encode a scancode as a stream of raw events
  @protocol:	protocol to encode
  @scancode:	scancode to encode
  @events:	array of raw ir events to write into
  @max:	maximum size of @events
  Returns:	The number of events written.
 		-ENOBUFS if there isn't enough space in the array to fit the
 		encoding. In this case all @max events will have been written.
 SPDX-License-Identifier: GPL-2.0
 bpf-lirc.c - handles bpf
 Copyright (C) 2018 Sean Young <sean@mess.org>
  BPF interface for raw IR
 rc_repeat is EXPORT_SYMBOL_GPL 
 rc_keydown is EXPORT_SYMBOL_GPL 
 We have one field of u32 
	
	  Do not use bpf_prog_array_delete_safe() as we would end up
	  with a dummy entry in the array, and the we would free the
	  dummy in lirc_bpf_free()
  This should be called once the rc thread has been stopped, so there can be
  no concurrent bpf execution.
  Should be called with the ir_raw_handler_lock held.
 SPDX-License-Identifier: GPL-2.0-or-later
  IgorPlug-USB IR Receiver
  Copyright (C) 2014 Sean Young <sean@mess.org>
  Supports the standard homebrew IgorPlugUSB receiver with Igor's firmware.
  See http:www.cesko.host.skIgorPlugUSBIgorPlug-USB%20(AVR)_eng.htm
  Based on the lirc_igorplugusb.c driver:
 	Copyright (C) 2004 Jan M. Hochstein
 	<hochstein@algo.informatik.tu-darmstadt.de>
	
	  If more than 36 pulses and spaces follow each other, the igorplugusb
	  overwrites its buffer from the beginning. The overflow value is the
	  last offset which was not overwritten. Everything from this offset
	  onwards occurred before everything until this offset.
 add a trailing space 
 request IR 
	
	  This device can only store 36 pulses + spaces, which is not enough
	  for the NEC protocol and many others.
 Igor Plug USB (Atmel's Manufact. ID) 
 Fit PC2 Infrared Adapter 
 Terminating entry 
 SPDX-License-Identifier: GPL-2.0-or-later
  USB RedRat3 IR Transceiver rc-core driver
  Copyright (c) 2011 by Jarod Wilson <jarod@redhat.com>
   based heavily on the work of Stephen Cox, with additional
   help from RedRat Ltd.
  This driver began life based on an old version of the first-generation
  lirc_mceusb driver from the lirc 0.7.2 distribution. It was then
  significantly rewritten by Stephen Cox with the aid of RedRat Ltd's
  Chris Dodge.
  The driver was then ported to rc-core and significantly rewritten again,
  by Jarod, using the in-kernel mceusb driver as a guide, after an initial
  port effort was started by Stephen.
  TODO LIST:
  - fix lirc not showing repeats properly
  --
  The RedRat3 is a USB transceiver with both send & receive,
  with 2 separate sensors available for receive to enable
  both good long range reception for general use, and good
  short range reception when required for learning a signal.
  http:www.redrat.co.uk
  It uses its own little protocol to communicate, the required
  parts of which are embedded within this driver.
  --
 Driver Information 
 bulk data transfer types 
 Get the RR firmware version 
 Send encoded signal bulk-sent earlier
 Blink the red LED on the device 
 Read serial number of device 
 Start capture with the RC receiver 
 Stop capture with the RC receiver 
 Start capture with the wideband receiver 
 Return the status of RC detector capture 
 Reset redrat 
 Max number of lengths in the signal. 
 Periods to measure mod. freq. 
 Size of memory for main signal data 
 Delta value when measuring lengths 
 Timeout for end of signal detection 
 Minimum value for pause recognition. 
 Clock freq. of EZ-USB chip 
 Clock periods per timer count 
 (RR3_CLK  RR3_CLK_PER_COUNT) 
 USB bulk-in wideband IR data endpoint address 
 USB bulk-in narrowband IR data endpoint address 
 Size of the fixed-length portion of the signal 
 The 8051's CPUCS Register address 
  The redrat3 encodes an IR signal as set of different lengths and a set
  of indices into those lengths. This sets how much two lengths must
  differ before they are considered distinct, the value is specified
  in microseconds.
  Default 5, value 0 to 127.
  When receiving a continuous ir stream (for example when a user is
  holding a button down on a remote), this specifies the minimum size
  of a space when the redrat3 sends a irdata packet to the host. Specified
  in milliseconds. Default value 18ms.
  The value can be between 2 and 30 inclusive.
  The carrier frequency is measured during the first pulse of the IR
  signal. The larger the number of periods used To measure, the more
  accurate the result is likely to be, however some signals have short
  initial pulses, so in some case it may be necessary to reduce this value.
  Default 8, value 1 to 255.
 sending and receiving irdata 
 not aligned 
 firmware errors 
 table of devices that work with this driver 
 Original version of the RedRat3 
 Second Versionrelease of the RedRat3 - RetRat3-II 
 Terminating entry 
 Structure to hold all of our device specific stuff 
 core device bits 
 led control 
 learning 
 save off the usb device pointer 
 the receive endpoint 
 the buffer to receive data 
 urb used to read ir data 
 the send endpoint 
 usb dma 
 Is the device currently transmitting?
 store for current packet 
 Codes 0x20 through 0x2f are IR Firmware Errors 
 Codes 0x30 through 0x3f are USB Firmware Errors 
	
	  Other error codes... These are primarily errors that can occur in
	  the control messages sent to the redrat
 this function scales down the figures for the same result... 
 don't allow zero lengths to go back, breaks lirc 
  convert us back into redrat3 lengths
  length  1000   length  1000000
  ------------- = ---------------- = micro
  rr3clk  1000       rr3clk
  6  2       4  3        micro  rr3clk          micro  rr3clk  1000
  ----- = 4   ----- = 6    -------------- = len    ---------------------
    3           2             1000000                    1000
 don't allow zero lengths to go back, breaks lirc 
 process each rr3 encoded byte into an int 
 we should always get pulsespacepulsespace samples 
 cap the value to IR_MAX_DURATION 
 add a trailing space 
 Util fn to send rr3 cmds 
 Enables the long range detector and starts async receive 
 a sane default, if things go haywire 
 grab the Length and type of transfer 
 gather IR data from incoming urb, process it when we have enough 
 we're still accumulating data 
 if we get here, we've got IR data to decode 
 callback function from USB when async USB request has completed 
 no error, prepare to read more 
 Clk used in mod. freq. generation is CLK244. 
 rr3 will disable rc detector on transmit 
				 now convert the value to a proper
 fill in our packet header 
 now tell the hardware to transmit what we sent it 
 rr3 re-enables rc detector because it was enabled before 
 find our bulk-in and bulk-out endpoints 
 data comes in on 0x82, 0x81 is for learning 
 allocate memory for our device state and initialize it 
 set up bulk-in endpoint 
 default.. will get overridden by any sends with a freq defined 
 learn urb 
 setup packet is 'c0 b2 0000 0000 0001' 
 setup packet is 'c0 b9 0000 0000 0001' 
 led control 
 might be all we need to do? 
 we can register the device now, as it is ready 
 SPDX-License-Identifier: GPL-2.0-only
 ir-sharp-decoder.c - handle Sharp IR PulseSpace protocol
  Copyright (C) 2013-2014 Imagination Technologies Ltd.
  Based on NEC decoder:
  Copyright (C) 2010 by Mauro Carvalho Chehab
 us 
 320us 
 1ms (680us space) 
 2ms (1680ms space) 
 40 ms 
 5 ms (even longer) 
  ir_sharp_decode() - Decode one Sharp pulse or space
  @dev:	the struct rc_dev descriptor of the device
  @ev:		the struct ir_raw_event descriptor of the pulsespace
  This function returns -EINVAL if the pulse violates the state machine
 exp,chk bits should be 1,0 
 DENON variant, both chk bits 0 
 Validate - command, ext, chk should be inverted in 2nd 
  ir_sharp_encode() - Encode a scancode as a stream of raw events
  @protocol:	protocol to encode
  @scancode:	scancode to encode
  @events:	array of raw ir events to write into
  @max:	maximum size of @events
  Returns:	The number of events written.
 		-ENOBUFS if there isn't enough space in the array to fit the
 		encoding. In this case all @max events will have been written.
 SPDX-License-Identifier: GPL-2.0
 rc-ir-raw.c - handle IR pulsespace events
 Copyright (C) 2010 by Mauro Carvalho Chehab
 Used to keep track of IR raw clients, protected by ir_raw_handler_lock 
 Used to handle IR raw handler extensions 
  ir_raw_event_store() - pass a pulsespace duration to the raw ir decoders
  @dev:	the struct rc_dev device descriptor
  @ev:		the struct ir_raw_event descriptor of the pulsespace
  This routine (which may be called from an interrupt context) stores a
  pulsespace duration for the raw ir decoding state machines. Pulses are
  signalled as positive values and spaces as negative values. A zero value
  will reset the decoding state machines.
  ir_raw_event_store_edge() - notify raw ir decoders of the start of a pulsespace
  @dev:	the struct rc_dev device descriptor
  @pulse:	true for pulse, false for space
  This routine (which may be called from an interrupt context) is used to
  store the beginning of an ir pulse or space (or the startend of ir
  reception) for the raw ir decoding state machines. This is used by
  hardware which does not provide durations directly but only interrupts
  (or similar events) on state change.
  ir_raw_event_store_with_timeout() - pass a pulsespace duration to the raw
 				       ir decoders, schedule decoding and
 				       timeout
  @dev:	the struct rc_dev device descriptor
  @ev:		the struct ir_raw_event descriptor of the pulsespace
  This routine (which may be called from an interrupt context) stores a
  pulsespace duration for the raw ir decoding state machines, schedules
  decoding and generates a timeout.
 timer could be set to timeout (125ms by default) 
  ir_raw_event_store_with_filter() - pass next pulsespace to decoders with some processing
  @dev:	the struct rc_dev device descriptor
  @ev:		the event that has occurred
  This routine (which may be called from an interrupt context) works
  in similar manner to ir_raw_event_store_edge.
  This routine is intended for devices with limited internal buffer
  It automerges samples of same type, and handles timeouts. Returns non-zero
  if the event was added, and zero if the event was ignored due to idle
  processing.
 Ignore spaces in idle mode 
 Enter idle mode if necessary 
  ir_raw_event_set_idle() - provide hint to rc-core when the device is idle or not
  @dev:	the struct rc_dev device descriptor
  @idle:	whether the device is idle or not
  ir_raw_event_handle() - schedules the decoding of stored ir data
  @dev:	the struct rc_dev device descriptor
  This routine will tell rc-core to start decoding stored ir data.
 used internally by the sysfs interface 
  ir_raw_gen_manchester() - Encode data with Manchester (bi-phase) modulation.
  @ev:		Pointer to pointer to next free event. @ev is incremented for
 		each raw event filled.
  @max:	Maximum number of raw events to fill.
  @timings:	Manchester modulation timings.
  @n:		Number of bits of data.
  @data:	Data bits to encode.
  Encodes the @n least significant bits of @data using Manchester (bi-phase)
  modulation with the timing characteristics described by @timings, writing up
  to @max raw IR events using the @ev pointer.
  Returns:	0 on success.
 		-ENOBUFS if there isn't enough space in the array to fit the
 		full encoded data. In this case all @max events will have been
 		written.
 continue existing signal 
 from here on ev will point to the last event rather than the next 
 point to the next event rather than last event before returning 
  ir_raw_gen_pd() - Encode data to raw events with pulse-distance modulation.
  @ev:		Pointer to pointer to next free event. @ev is incremented for
 		each raw event filled.
  @max:	Maximum number of raw events to fill.
  @timings:	Pulse distance modulation timings.
  @n:		Number of bits of data.
  @data:	Data bits to encode.
  Encodes the @n least significant bits of @data using pulse-distance
  modulation with the timing characteristics described by @timings, writing up
  to @max raw IR events using the @ev pointer.
  Returns:	0 on success.
 		-ENOBUFS if there isn't enough space in the array to fit the
 		full encoded data. In this case all @max events will have been
 		written.
  ir_raw_gen_pl() - Encode data to raw events with pulse-length modulation.
  @ev:		Pointer to pointer to next free event. @ev is incremented for
 		each raw event filled.
  @max:	Maximum number of raw events to fill.
  @timings:	Pulse distance modulation timings.
  @n:		Number of bits of data.
  @data:	Data bits to encode.
  Encodes the @n least significant bits of @data using space-distance
  modulation with the timing characteristics described by @timings, writing up
  to @max raw IR events using the @ev pointer.
  Returns:	0 on success.
 		-ENOBUFS if there isn't enough space in the array to fit the
 		full encoded data. In this case all @max events will have been
 		written.
  ir_raw_encode_scancode() - Encode a scancode as raw events
  @protocol:		protocol
  @scancode:		scancode filter describing a single scancode
  @events:		array of raw events to write into
  @max:		max number of raw events
  Attempts to encode the scancode as raw events.
  Returns:	The number of events written.
 		-ENOBUFS if there isn't enough space in the array to fit the
 		encoding. In this case all @max events will have been written.
 		-EINVAL if the scancode is ambiguous or invalid, or if no
 		compatible encoder was found.
  ir_raw_edge_handle() - Handle ir_raw_event_store_edge() processing
  @t:		timer_list
  This callback is armed by ir_raw_event_store_edge(). It does two things:
  first of all, rather than calling ir_raw_event_handle() for each
  edge and waking up the rc thread, 15 ms after the first edge
  ir_raw_event_handle() is called. Secondly, generate a timeout event
  no more IR is received after the rc_dev timeout.
  ir_raw_encode_carrier() - Get carrier used for protocol
  @protocol:		protocol
  Attempts to find the carrier for the specified protocol
  Returns:	The carrier in Hz
 		-EINVAL if the protocol is invalid, or if no
 		compatible encoder was found.
  Used to (un)register raw event clients
	
	  A user can be calling bpf(BPF_PROG_{QUERY|ATTACH|DETACH}), so
	  ensure that the raw member is null on unlock; this is how
	  "device gone" is checked.
  Extension interface - used to register the IR decoders
 SPDX-License-Identifier: GPL-2.0+
 ir-rcmm-decoder.c - A decoder for the RCMM IR protocol
 Copyright (C) 2018 by Patrick Lerda <patrick9876@free.fr>
 microseconds 
 166.6666666666662.5 
 166.666666666666(1+23) 
 166.666666666666(2+23) 
 166.666666666666(3+23) 
 166.666666666666(4+23) 
  ir_rcmm_decode() - Decode one RCMM pulse or space
  @dev:	the struct rc_dev descriptor of the device
  @ev:		the struct ir_raw_event descriptor of the pulsespace
  This function returns -EINVAL if the pulse violates the state machine
 SPDX-License-Identifier: GPL-2.0+
 ir-imon-decoder.c - handle iMon protocol
 Copyright (C) 2018 by Sean Young <sean@mess.org>
 us 
  This protocol has 30 bits. The format is one IMON_UNIT header pulse,
  followed by 30 bits. Each bit is one IMON_UNIT check field, and then
  one IMON_UNIT field with the actual bit (1=space, 0=pulse).
  The check field is always space for some bits, for others it is pulse if
  both the preceding and current bit are zero, else space. IMON_CHKBITS
  defines which bits are of type check.
  There is no way to distinguish an incomplete message from one where
  the lower bits are all set, iow. the last pulse is for the lowest
  bit which is 0.
 KeyboardMouse toggle 
 KEY_DOWN 
 KEY_UP 
 KEY_RIGHT 
 KEY_LEFT 
  ir_imon_decode() - Decode one iMON pulse or space
  @dev:	the struct rc_dev descriptor of the device
  @ev:		the struct ir_raw_event descriptor of the pulsespace
  This function returns -EINVAL if the pulse violates the state machine
	
	  Since iMON protocol is a series of bits, if at any point
	  we encounter an error, make sure that any remaining bits
	  aren't parsed as a scancode made up of less bits.
	 
	  Note that if the stick is held, then the remote repeats
	  the scancode with about 12ms between them. So, make sure
	  we have at least 10ms of space after an error. That way,
	  we're at a new scancode.
  ir_imon_encode() - Encode a scancode as a stream of raw events
  @protocol:	protocol to encode
  @scancode:	scancode to encode
  @events:	array of raw ir events to write into
  @max:	maximum size of @events
  Returns:	The number of events written.
 		-ENOBUFS if there isn't enough space in the array to fit the
 		encoding. In this case all @max events will have been written.
 SPDX-License-Identifier: GPL-2.0-only
  meson-ir-tx.c - Amlogic Meson IR TX driver
  Copyright (c) 2021, SberDevices. All Rights Reserved.
  Author: Viktor Prutyanov <viktor.prutyanov@phystech.edu>
 IRCTRL_IR_BLASTER_ADDR0 
 IRCTRL_IR_BLASTER_ADDR2 
 IRCTRL_IR_BLASTER_ADDR2 
 IRCTRL_IR_BLASTER_ADDR3 
 Locks buf 
	
	  Disable the TX, set modulator clock tick and set initialize
	  output to be high. Set up carrier frequency and duty cycle. Then
	  unset initialize output. Enable FIFO interrupt, set FIFO interrupt
	  threshold. Finally, enable the transmitter back.
		
		  Max space timebase is 100 us.
		  Pulse timebase equals to carrier period.
 SPDX-License-Identifier: GPL-2.0-or-later
  Loopback driver for rc-core,
  Copyright (c) 2010 David Härdeman <david@hardeman.nu>
  This driver receives TX data and passes it back as RX data,
  which is useful for (scripted) debugging of rc-core without
  having to use actual hardware.
 Fake a silence long enough to cause us to go idle 
 fine to disable filter 
 encode the specified filter and loop it back 
 still loop back the partial raw IR even if it's incomplete 
 do the loopback 
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (C) 2013 STMicroelectronics Limited
  Author: Srinivas Kandagatla <srinivas.kandagatla@st.com>
 Register base address 
 RX Register base address 
 Registers 
 sample freq divisor
 clock select       
 clock status       
 IRB IRUHF receiver registers 
 pulse time capture 
 sym period capture 
 IRQ enable (RW)   
 IRQ status (RW)   
 Receive enable     
 max sym value      
 overrun status     
 receive status     
 noise suppression  
 polarity inverter  
  IRQ set: Enable full FIFO                 1  -> bit  3;
           Enable overrun IRQ               1  -> bit  2;
           Enable last symbol IRQ           1  -> bit  1:
           Enable RX interrupt              1  -> bit  0;
 maximum symbol period (microsecs),timeout to detect end of symbol train 
  RX graphical example to better understand the difference between ST IR block
  output and standard definition used by LIRC (and most of the world!)
            mark                                     mark
       |-IRB_RX_ON-|                            |-IRB_RX_ON-|
       ___  ___  ___                            ___  ___  ___             _
       | |  | |  | |                            | |  | |  | |             |
       | |  | |  | |         space 0            | |  | |  | |   space 1   |
  _____| |__| |__| |____________________________| |__| |__| |_____________|
       |--------------- IRB_RX_SYS -------------|------ IRB_RX_SYS -------|
       |------------- encoding bit 0 -----------|---- encoding bit 1 -----|
  ST hardware returns mark (IRB_RX_ON) and total symbol time (IRB_RX_SYS), so
  convert to standard markspace we have to calculate space=(IRB_RX_SYS-mark)
  The mark time represents the amount of time the carrier (usually 36-40kHz)
  is detected.The above examples shows Pulse Width Modulation encoding where
  bit 0 is represented by space>mark.
 FIXME: is 10ms good enough ? 
 discard the entire collection in case of errors!  
 Ignore any noise 
 adjustments to timings 
 Empty software fifo 
 Enable the IP 
 IRB input pins are inverted internally from high to low. 
 over clocking, workout the adjustment factors 
 enable interrupts and receiver 
 disable interrupts and receiver 
 rx sampling rate is 10Mhz 
 enable wake via this device 
	
	  for LIRC_MODE_MODE2 or LIRC_MODE_PULSE or LIRC_MODE_RAW
	  lircd expects a long space first before a signal train to sync.
 SPDX-License-Identifier: GPL-2.0-or-later
  LIRC base driver
  by Artur Lipowski <alipowski@interia.pl>
 Used to keep track of allocated lirc devices 
 Only used for sysfs but defined to void otherwise 
  lirc_raw_event() - Send raw IR data to lirc to be relayed to userspace
  @dev:	the struct rc_dev descriptor of the device
  @ev:		the struct ir_raw_event descriptor of the pulsespace
 Packet start 
		
		  Userspace expects a long space event before the start of
		  the signal to use as a sync.  This may be done with repeat
		  packets and normal samples.  But if a reset has been sent
		  then we assume that a long time has passed, so we send a
		  space with the maximum time value.
 Carrier reports 
 Packet end 
 Normal sample 
 Cap by LIRC_VALUE_MASK 
	
	  bpf does not care about the gap generated above; that exists
	  for backwards compatibility
  lirc_scancode_event() - Send scancode data to lirc to be relayed to
 		userspace. This can be called in atomic context.
  @dev:	the struct rc_dev descriptor of the device
  @lsc:	the struct lirc_scancode describing the decoded scancode
 signal duration in us 
 We only have encoders for 32-bit protocols. 
	
	  The lircd gap calculation expects the write function to
	  wait for the actual IR signal to be transmitted before
	  returning.
 mode support 
 TX settings 
 RX settings 
 Generic timeout support 
 LIRC_MODE_SCANCODE 
 SPDX-License-Identifier: GPL-2.0-or-later
  serial_ir.c
  serial_ir - Device driver that records pulse- and pause-lengths
 	       (space-lengths) between DDCD event on a serial port.
  Copyright (C) 1996,97 Ralph Metzler <rjkm@thp.uni-koeln.de>
  Copyright (C) 1998 Trent Piepho <xyzzy@u.washington.edu>
  Copyright (C) 1998 Ben Pfaff <blp@gnu.org>
  Copyright (C) 1999 Christoph Bartelmus <lirc@bartelmus.de>
  Copyright (C) 2007 Andrei Tanas <andrei@tanas.ca> (suspendresume support)
  Copyright (C) 2016 Sean Young <sean@mess.org> (port to rc-core)
 module parameters 
 -1 = auto, 0 = active high, 1 = active low 
 0 = active high, 1 = active low 
 forward declarations 
 fetch serial input packet (1 byte) from register offset 
 the register is memory-mapped 
 write serial output packet (1 byte) of value to register offset 
 the register is memory-mapped 
 how many bits have to be sent ? 
	
	  delta should never exceed 4 seconds and on m68k
	  ndelay(s64) does not compile; so use s32 rather than s64.
 Ensure the dividend fits into 32 bit 
 simple noise filter 
 not our interrupt 
 get current time 
			
			  The driver needs to know if your receiver is
			  active high or active low, or the spacepulse
			  sense could be inverted.
 calc time since last interrupt in nanoseconds 
 really long time 
 sanity check 
					
					  detecting pulse while this
					  MUST be a space!
 still pending ? 
	
	  This is a simple port existence test, borrowed from the autoconfig
	  function in driversttyserial82508250_port.c
 we fail, there's nothing here 
 Set DLAB 0. 
 First of all, disable all interrupts 
 Clear registers. 
 Set line for power source 
 Clear registers again to be sure. 
 setup port to 7N1 @ 115200 Baud 
 7N1+start = 9 bits at 115200 ~ 3 bits at 38kHz 
 Set DLAB 1. 
 Set divisor to 1 => 115200 Baud 
 Set DLAB 0 +  7N1 
 THR interrupt already disabled at this point 
 Needed by serial_ir_probe() 
 Reserve io region. 
 Initialize pulsespace widths 
 If pin is high, then this must be an active low receiver. 
 wait 12 sec for the power supply 
		
		  probe 9 times every 0.04s, collect "votes" for
		  active highlow
 initialize timestamp 
 Set DLAB 0. 
 Set DLAB 0. 
 First of all, disable all interrupts 
 DTR, RTS down 
 Set DLAB 0. 
 Disable all interrupts 
 Clear registers. 
 Enable Interrupt 
 if nothing specified, use ttyS0com1 and irq 4 
 make sure sense is either -1, 0, or 1 
 some architectures (e.g. intel xscale) have memory mapped registers 
  some architectures (e.g. intel xscale) align the 8bit serial registers
  on 32bit word boundaries.
  See linux-kerneldriversttyserial82508250.c serial_in()out()
 SPDX-License-Identifier: GPL-2.0+
 Driver for Xbox DVD Movie Playback Kit
 Copyright (c) 2018 by Benjamin Valentin <benpicco@googlemail.com>
   Xbox DVD Movie Playback Kit USB IR dongle support
   The driver was derived from the ati_remote driver 2.2.1
           and used information from lirc_xbox.c
           Copyright (c) 2011, 2012 Anssi Hannula <anssi.hannula@iki.fi>
           Copyright (c) 2004 Torrey Hoffman <thoffman@arnor.net>
           Copyright (c) 2002 Vladimir Dergachev
           Copyright (c) 2003-2004 Paul Miller <pmiller9@users.sourceforge.net>
  Module and Version Information
 size of product name, path buffers 
 size of URB data buffers 
  USB vendor ids for XBOX DVD Dongles
 Gamester Xbox DVD Movie Playback Kit IR 
 Microsoft Xbox DVD Movie Playback Kit IR 
 Terminating entry 
 On first open, submit the read urb which was set up previously. 
  xbox_remote_report_input
	
	  data[0] = 0x00
	  data[1] = length - always 0x06
	  data[2] = the key code
	  data[3] = high part of key code
	  data[4] = last_press_ms (low)
	  data[5] = last_press_ms (high)
 Deal with strange looking inputs 
  xbox_remote_irq_in
 success 
 unlink 
 error 
 Set up irq_urb 
  xbox_remote_probe
 why is there also a device with no endpoints?
 Allocate URB buffer 
 default map 
 Device Hardware Initialization 
 Set up and register rc device 
  xbox_remote_disconnect
 usb specific object to register with the usb subsystem 
 SPDX-License-Identifier: GPL-2.0-only
 ir-sony-decoder.c - handle Sony IR PulseSpace protocol
  Copyright (C) 2010 by David Härdeman <david@hardeman.nu>
 us 
 minimum 
  ir_sony_decode() - Decode one Sony pulse or space
  @dev:	the struct rc_dev descriptor of the device
  @ev:         the struct ir_raw_event descriptor of the pulsespace
  This function returns -EINVAL if the pulse violates the state machine
  ir_sony_encode() - Encode a scancode as a stream of raw events
  @protocol:	protocol to encode
  @scancode:	scancode to encode
  @events:	array of raw ir events to write into
  @max:	maximum size of @events
  Returns:	The number of events written.
 		-ENOBUFS if there isn't enough space in the array to fit the
 		encoding. In this case all @max events will have been written.
 SPDX-License-Identifier: GPL-2.0-or-later
  Streamzap Remote Control driver
  Copyright (c) 2005 Christoph Bartelmus <lirc@bartelmus.de>
  Copyright (c) 2010 Jarod Wilson <jarod@wilsonet.com>
  This driver was based on the work of Greg Wickham and Adrian
  Dewhurst. It was substantially rewritten to support correct signal
  gaps and now maintains a delay buffer, which is used to present
  consistent timing behaviour to user space applications. Without the
  delay buffer an ugly hack would be required in lircd, which can
  cause sluggish signal decoding in certain situations.
  Ported to in-kernel ir-core interface by Jarod Wilson
  This driver is based on the USB skeleton driver packaged with the
  kernel; copyright (C) 2001-2003 Greg Kroah-Hartman (greg@kroah.com)
 table of devices that work with this driver 
 Streamzap Remote Control 
 Terminating entry 
 number of samples buffered 
 structure to hold our device specific stuff 
 ir-core 
 core device info 
 usb 
 buffer & dma 
 track what state we're in 
 tracks whether we are currently receiving some signal 
 sum of signal lengths received since signal start 
 start time of signal; necessary for gap tracking 
 local function prototypes 
 usb specific object needed to register this driver with the usb subsystem 
 really long time 
  streamzap_callback - usb IRQ handler callback
  This procedure is invoked on reception of data from
  the usb remote.
		
		  this urb is terminated, clean up.
		  sz might already be invalid at this point
 	streamzap_probe
 	Called by usb-core to associated with a candidate device
 	On any failure the return value is the ERROR
 	On success return 0
 Allocate space for device driver specific data 
 Check to ensure endpoint information matches requirements 
 Allocate the USB buffer and IRQ URB 
 FIXME: don't yet have a way to set this 
 not yet supported, depends on patches from maxim 
 see also: LIRC_GET_REC_RESOLUTION and LIRC_SET_REC_TIMEOUT 
 Complete final initialisations 
  streamzap_disconnect
  Called by the usb core when the device is removed from the system.
  This routine guarantees that the driver will not submit any more urbs
  by clearing dev->usbdev.  It is also supposed to terminate any currently
  active urbs.  Unfortunately, usb_bulk_msg(), used in streamzap_read(),
  does not provide any way to do this.
 SPDX-License-Identifier: GPL-2.0+
 Copyright (C) 2018 Sean Young <sean@mess.org>
 Each bit is 250us 
  The first 5 bytes of data represent IR pulse or space. Each bit, starting
  from highest bit in the first byte, represents 250µs of data. It is 1
  for space and 0 for pulse.
  The station sends 10 packets, and the 7th byte will be number 1 to 10, so
  when we receive 10 we assume all the data has arrived.
	
	  Only the first 5 bytes contain IR data. Right shift so we move
	  the IR bits to the lower 40 bits.
		
		  Find highest set bit which is less or equal to offset
		 
		  offset is the bit above (base 0) where we start looking.
		 
		  data & (BIT_ULL(offset) - 1) masks off any unwanted bits,
		  so we have just bits less than offset.
		 
		  fls will tell us the highest bit set plus 1 (or 0 if no
		  bits are set).
 SoundGraph iMON (IR only) -- sg_imon.inf 
 SPDX-License-Identifier: GPL-2.0-or-later
  Driver for USB Windows Media Center Ed. eHome Infrared Transceivers
  Copyright (c) 2010-2011, Jarod Wilson <jarod@redhat.com>
  Based on the original lirc_mceusb and lirc_mceusb2 drivers, by Dan
  Conti, Martin Blatter and Daniel Melander, the latter of which was
  in turn also based on the lirc_atiusb driver by Paul Miller. The
  two mce drivers were merged into one by Jarod Wilson, with transmit
  support for the 1st-gen device added primarily by Patrick Calhoun,
  with a bit of tweaks by Jarod. Debugging improvements and proper
  support for what appears to be 3rd-gen hardware added by Jarod.
  Initial port from lirc driver to ir-core drivery by Jarod, based
  partially on a port to an earlier proposed IR infrastructure by
  Jon Smirl, which included enhancements and simplifications to the
  incoming IR buffer parsing routines.
  Updated in July of 2011 with the aid of Microsoft's official
  remotetransceiver requirements and specification document, found at
  download.microsoft.com, title
  Windows-Media-Center-RC-IR-Collection-Green-Button-Specification-03-08-2011-V2.pdf
 in milliseconds 
 Size of usb ctrl msg on gen1 hw 
 Init messages on gen1 hw to throw out 
 MCE constants 
 TX IR buffer length 
 Approx 50us resolution 
 Max length of packet (with header) 
 Actual format is 0x80 + num_bytes 
 End of IR data 
 Two transmitters, hardware dependent? 
 Vals: TX1=0x01, TX2=0x02, ALL=0x03 
 Pulse bit, MSB set == PULSE else SPACE 
 Pulse mask 
 Longest transmittable pulse symbol 
  The interface between the host and the IR hardware is command-response
  based. All commands and responses have a consistent format, where a lead
  byte always identifies the type of data following it. The lead byte has
  a port value in the 3 highest bits and a length value in the 5 lowest
  bits.
  The length field is overloaded, with a value of 11111 indicating that the
  following byte is a command or response code, and the length of the entire
  message is determined by the code. If the length field is not 11111, then
  it specifies the number of bytes of port data that follow.
 (0x4 << 5) | MCE_CMD = 0x9f 
 (0x7 << 5) | MCE_CMD = 0xff 
 0xc0 through 0xdf flush & 0x1f bytes 
 Mask out command bits 
 Command port headers 
 IR-related cmdrsp 
 System (non-IR) device cmdrsp 
 Commands that set device state  (2-4 bytes in length) 
 Reset device, 2 bytes 
 Resume device after error, 2 bytes 
 Set tx carrier, 4 bytes 
 Set timeout, 4 bytes 
 Set tx ports, 3 bytes 
 Set rx ports, 3 bytes 
 Flash receiver LED, 2 bytes 
 Commands that query device state (all 2 bytes, unless noted) 
 Get carrier 
 Get timeout 
 Get tx ports 
 Get rx ports 
 Get tx port status, 3 bytes 
 Get number of ports 
 Get wake source 
 Get emulator interface version 
 Get device details (em ver2 only) 
 Get wake details (em ver2 only) 
 Get wake pattern (em ver2 only) 
 Misc commands 
 No operation 
 Responses to commands (non-error cases) 
 tx carrier, 4 bytes 
 rx timeout, 4 bytes 
 wake source, 3 bytes 
 tx port mask, 3 bytes 
 rx port mask, 3 bytes 
 tx port status, 7 bytes 
 rx carrier count, 4 bytes 
 number of ports, 4 bytes 
 wake capabilities, 3 bytes 
 wake pattern details, 6 bytes 
 device capabilities, 3 bytes 
 emulator interface ver, 3 bytes 
 success flashing LED, 2 bytes 
 Responses to error cases, must send MCE_CMD_RESUME to clear them 
 illegal command for port, 2 bytes 
 tx timed out, 2 bytes 
 Misc commandsresponses not defined in the MCE remotetransceiver spec 
 End of signal 
 Ping device 
 Unknown 
 Unknown 
 Unknown 
 Unknown 
 Get hwsw revision 
 Unknown 
 Unknown 
 Unknown 
 Unknown 
 These show up various places... 
 if buf[i] & MCE_PORT_MASK == 0x80 and buf[i] != MCE_CMD_PORT_IR,
 Packet length mask 
 Most boards 
	
	  2nd IR receiver (short-range, wideband) for learning mode:
	      0, absent 2nd receiver (rx2)
	      1, rx2 present
	      2, rx2 which under counts IR carrier cycles
 Allow specify a per-board map 
 per-board name 
		
		  In fact, the EVK is shipped without
		  remotes, but we should have something handy,
		  to allow testing it
 tx isn't wired up at all 
 eeprom says it has no tx 
 Original Microsoft MCE IR Transceiver (often HP-branded) 
 Philips Infrared Transceiver - Sahara branded 
 Philips Infrared Transceiver - HP branded 
 Philips SRM5100 
 Philips Infrared Transceiver - Omaura 
 Philips Infrared Transceiver - Spinel plus 
 Philips eHome Infrared Transceiver 
 PhilipsSpinel plus IR transceiver for ASUS 
 PhilipsSpinel plus IR transceiver for ASUS 
 Philips IR transceiver (Dell branded) 
 Realtek MCE IR Receiver and card reader 
 SMKToshiba G83C0004D410 
 SMK eHome Infrared Transceiver (Sony VAIO) 
 bundled with Hauppauge PVR-150 
 SMK eHome Infrared Transceiver 
 SMKI-O Data GV-MC7RCKIT Receiver 
 SMK RXX6000 Infrared Receiver 
 Tatung eHome Infrared Transceiver 
 Shuttle eHome Infrared Transceiver 
 Shuttle eHome Infrared Transceiver 
 Gateway eHome Infrared Transceiver 
 Mitsumi 
 Topseed eHome Infrared Transceiver 
 Topseed HP eHome Infrared Transceiver 
 Topseed eHome Infrared Transceiver 
 Topseed eHome Infrared Transceiver 
 Topseed eHome Infrared Transceiver 
 Topseed eHome Infrared Transceiver 
 Ricavision internal Infrared Transceiver 
 Itron ione Libra Q-11 
 FIC eHome Infrared Transceiver 
 LG eHome Infrared Transceiver 
 Microsoft MCE Infrared Transceiver 
 Formosa eHome Infrared Transceiver 
 Formosa21  eHome Infrared Receiver 
 Formosa aim  Trust MCE Infrared Receiver 
 Formosa Industrial Computing  Beanbag Emulation Device 
 Formosa21  eHome Infrared Receiver 
 Formosa Industrial Computing AIM IR605A 
 Formosa Industrial Computing 
 Formosa Industrial Computing 
 Fintek eHome Infrared Transceiver (HP branded) 
 Fintek eHome Infrared Transceiver 
 Fintek eHome Infrared Transceiver (in the AOpen MP45) 
 Pinnacle Remote Kit 
 Elitegroup Computer Systems IR 
 Wistron Corp. eHome Infrared Receiver 
 Compro K100 
 Compro K100 v2 
 Northstar Systems, Inc. eHome Infrared Transceiver 
 TiVo PC IR Receiver 
 Conexant Hybrid TV "Shelby" Polaris SDK 
 Conexant Hybrid TV RDU253S Polaris 
 Twisted Melon Inc. - Manta Mini Receiver 
 Twisted Melon Inc. - Manta Pico Receiver 
 Twisted Melon Inc. - Manta Transceiver 
 Hauppauge WINTV-HVR-HVR 930C-HD - based on cx231xx 
 Hauppauge WinTV-HVR-935C - based on cx231xx 
 Hauppauge WinTV-HVR-955Q - based on cx231xx 
 Hauppauge WinTV-HVR-975 - based on cx231xx 
 Adaptec  HP eHome Receiver 
 Evromedia USB Full Hybrid Full HD 
 Astrometa T2hybrid 
 Terminating entry 
 data structure for each usb transceiver 
 ir-core bits 
 optional features we can enable 
 aka learning mode, short-range rx 
 core device bits 
 usb 
 buffers and dma 
 Remaining IR data bytes in packet 
 transmit support 
 flag to issue a device resume cmd 
 emulator interface version 
 number of transmit ports 
 number of receive sensors 
 bitmask of transmitters with cable 
 bitmask of active receive sensors 
 wideband rx is active 
 receiver carrier frequency detection support 
 IR pulse "on" cumulative time units 
 pulse "on" count in measurement interval 
	
	  support for async error handler mceusb_deferred_kevent()
	  where usb_clear_halt(), usb_reset_configuration(),
	  usb_reset_device(), etc. must be done in process context
 MCE Device Command Strings, generally a port and command pair 
 sub in desired values in lower byte or bytes for full command 
 FIXME: make use of these for transmit.
static char SET_CARRIER_FREQ[]	= {MCE_CMD_PORT_IR,
				   MCE_CMD_SETIRCFS, 0x00, 0x00};
static char SET_TX_BITMASK[]	= {MCE_CMD_PORT_IR, MCE_CMD_SETIRTXPORTS, 0x00};
static char SET_RX_TIMEOUT[]	= {MCE_CMD_PORT_IR,
				   MCE_CMD_SETIRTIMEOUT, 0x00, 0x00};
static char SET_RX_SENSOR[]	= {MCE_CMD_PORT_IR,
				   MCE_RSP_EQIRRXPORTEN, 0x00};
 Trace meaningless 0xb1 0x60 header bytes on original receiver 
 Trace IR data header or trailer 
 Unexpected end of buffer? 
 Decode MCE commandresponse 
 We use data1 + 1 here, to match hw labels 
 prescaler should make sense
 value is in units of 50us, so x501000 ms 
 aka MCE_RSP_EQIRRXCFCNT 
  Schedule work that can't be done in interrupt handlers
  (mceusb_dev_recv() and mce_write_callback()) nor tasklets.
  Invokes mceusb_deferred_kevent() for recovering from
  error events specified by the kevent bit field.
  Write (TXsend) data to MCE device USB endpoint out.
  Used for IR blaster TX and MCE device commands.
  Return: The number of bytes written (> 0) or errno (< 0).
 outbound data 
 bytes written 
 success 
  Transmit IR out the MCE device IR blaster port(s).
  Convert IR pulsespace sequence from LIRC to MCE format.
  Break up a long IR sequence into multiple parts (MCE IR data packets).
  u32 txbuf[] consists of IR pulse, space, ..., and pulse times in usec.
  Pulses and spaces are implicit by their position.
  The first IR sample, txbuf[0], is always a pulse.
  u8 irbuf[] consists of multiple IR data packets for the MCE device.
  A packet is 1 u8 MCE_IRDATA_HEADER and up to 30 u8 IR samples.
  An IR sample is 1-bit pulsespace flag with 7-bit time
  in MCE time units (50usec).
  Return: The number of IR samples sent (> 0) or errno (< 0).
 Send the set TX ports command 
 Generate mce IR data packet 
 loop to support long pulsesspaces > 6350us (12750us) 
 Insert IR header every 30th entry 
 Room for IR header and one IR sample? 
 Send near full buffer 
 Insert IR sample 
			
			  Even i = IR pulse
			  Odd  i = IR space
 IR buffer full? 
 Fix packet length in last header 
 Send full buffer 
 after for loop, 0 <= ircount < MCE_IRBUF_SIZE 
 Fix packet length in last header 
 Append IR trailer (0x80) to final partial (or empty) IR buffer 
 Send final buffer 
 Sets active IR outputs -- mce devices typically have two 
 return number of transmitters 
 Sets the send carrier frequency and mode 
 Carrier has changed 
 Transmit new carrier to mce device 
 get receiver timeout value 
  Select or deselect the 2nd receiver port.
  Second receiver is learning mode, wide-band, short-range receiver.
  Only one receiver (long or short range) may be active at a time.
 port 2 is short range receiver 
 port 1 is long range receiver 
 response from device sets ir->learning_active 
  Enabledisable receiver carrier frequency pass through reporting.
  Only the short-range receiver has carrier frequency measuring capability.
  Implicitly select this receiver when enabling carrier frequency reporting.
 port 2 is short range receiver 
		
		  Revert to normal (long-range) receiver only if the
		  wideband (short-range) receiver wasn't explicitly
		  enabled.
 port 1 is long range receiver 
  Handle PORT_SYSIR command response received from the MCE device.
  Assumes single response with all its data (not truncated)
  in buf_in[]. The response itself determines its total length
  (mceusb_cmd_datasize() + 2) and hence the minimum size of buf_in[].
  We don't do anything but print debug spew for many of the command bits
  we receive from the hardware, but some of them are useful information
  we want to store so that we can use them.
 read only when required 
 read only when required 
 the one and only 5-byte return value command 
 1-byte return value commands 
 No return value commands 
 2-byte return value commands 
		
		  The carrier cycle counter can overflow and wrap around
		  without notice from the device. So frequency measurement
		  will be inaccurate with long duration IR.
		 
		  The long-range (non learning) receiver always reports
		  zero count so we always ignore its report.
			
			  Adjust carrier cycle count by adding
			  1 missed count per pulse "on"
 1-byte return value commands 
 No return value commands 
 skip meaningless 0xb1 0x60 header bytes on orig receiver 
 if there's no data, just return now 
				
				  got PORT_SYS, PORT_IR, or unknown
				  command response prefix
			
			  got IR data prefix (0x80 + num_bytes)
			  decode MCE packets of the form {0x83, AA, BB, CC}
			  IR data packets can span USB messages
	
	  Accept IR data spanning multiple rx buffers.
	  Reject MCE command response spanning multiple rx buffers.
 success 
 If we get no reply or an illegal command reply, its ver 1, says MS 
	
	  This is a strange one. Windows issues a set address to the device
	  on the receive control pipe and expect a certain value pair back
 set feature: bit rate 38400 bps 
 bRequest 4: set char length to 8 bits 
 bRequest 2: set handshaking to use DTRDSR 
 device resume 
 get hwsw revision? 
 device resume 
 get wake version (protocol, key, address) 
 unknown what this one actually returns... 
 defaults, if the hardware doesn't support querying 
 get number of tx and rx ports 
 get the carrier and frequency 
 get the transmitter bitmask 
 get receiver timeout value 
 get receiver sensor setting 
  Workqueue function
  for resetting or recovering device after occurrence of error events
  specified in ir->kevent bit field.
  Function runs (via schedule_work()) in non-interrupt context, for
  calls here (such as usb_clear_halt()) requiring non-interrupt context.
			
			  Unable to clear RX haltstall.
			  Will need to call usb_reset_device().
 Cancel all other error events and handlers 
			
			  Unable to clear TX haltstall.
			  Will need to call usb_reset_device().
 Cancel all other error events and handlers 
		
		  If we can't set the timeout using CMD_SETIRTIMEOUT, we can
		  rely on software timeouts for timeouts < 100ms.
 There are multi-function devices with non-IR interfaces 
 step through the endpoints to find first bulk in and out endpoint 
 Saving usb interface data for use by the transmitter routine 
	
	  Initialize async USB error handler before registering
	  or activating any mceusb RX and TX functions
 wire up inbound data handler 
 flush buffers on the device 
 figure out which firmwareemulator version this hardware has 
 initialize device 
 enable wake via this device 
 Error-handling path 
 SPDX-License-Identifier: GPL-2.0
 ir-rc5-decoder.c - decoder for RC5(x) and StreamZap protocols
 Copyright (C) 2010 by Mauro Carvalho Chehab
 Copyright (C) 2010 by Jarod Wilson <jarod@redhat.com>
  This decoder handles the 14 bit RC5 protocol, 15 bit "StreamZap" protocol
  and 20 bit RC5x protocol.
 us 
 In reality, approx 100 
  ir_rc5_decode() - Decode one RC-5 pulse or space
  @dev:	the struct rc_dev descriptor of the device
  @ev:		the struct ir_raw_event descriptor of the pulsespace
  This function returns -EINVAL if the pulse violates the state machine
 RC5X 
 RC5 
 RC5 StreamZap 
  ir_rc5_encode() - Encode a scancode as a stream of raw events
  @protocol:	protocol variant to encode
  @scancode:	scancode to encode
  @events:	array of raw ir events to write into
  @max:	maximum size of @events
  Returns:	The number of events written.
 		-ENOBUFS if there isn't enough space in the array to fit the
 		encoding. In this case all @max events will have been written.
 		-EINVAL if the scancode is ambiguous or invalid.
 Detect protocol and convert scancode to raw data 
 decode scancode 
 encode data 
 First bit is encoded by leader_pulse 
 decode scancode 
 encode data 
 First bit is encoded by leader_pulse 
 RC5-SZ scancode is raw enough for Manchester as it is 
 First bit is encoded by leader_pulse 
www.redhat.com)");
 SPDX-License-Identifier: GPL-2.0-or-later
    imon.c:	input and display driver for SoundGraph iMON IRVFDLCD
    Copyright(C) 2010  Jarod Wilson <jarod@wilsonet.com>
    Portions based on the original lirc_imon driver,
 	Copyright(C) 2004  Venky Raju(dev@venky.ws)
    Huge thanks to R. Geoff Newbury for invaluable debugging on the
    0xffdc iMON devices, and for sending me one to hack on, without
    which the support for them wouldn't be nearly as good. Thanks
    also to the numerous 0xffdc device owners that tested auto-config
    support for me and provided debug dumps from their devices.
 each bit received is 250us 
 P R O T O T Y P E S 
 USB Callback prototypes 
 suspendresume support 
 Display file_operations function prototypes 
 VFD write operation 
 LCD file_operations override function prototypes 
 G L O B A L S 
 Newer devices have two interfaces 
 not all controllers do 
 display port has been opened 
 true if iMON 2.4G LTDT RF device 
 RF remote associating 
 USB device presence, interface 0 
 USB device presence, interface 1 
 to lock this object 
 For unexpected USB disconnects 
 user data buffer 
 wait for write to finish 
 write in progress 
 status of tx completion 
 usb vendor ID 
 usb product ID 
 rc-core device for remote 
 input device for panel & IR mouse 
 input device for touchscreen 
 make sure we get keycodes right 
 current input keycode 
 last reported input keycode 
 the computed remote scancode 
 the computed remote toggle bit 
 iMON or MCE (RC6) IR protocol? 
 some keys send a release code 
 store the display type 
 toggle kbd(0)mouse(1) mode 
 rc input device name 
 rc input device phys path 
 input device name 
 input device phys path 
 touch screen name 
 touch screen phys path 
 touch screen timer 
 x coordinate on touchscreen 
 y coordinate on touchscreen 
 device description with key 
 table for front panels 
 vfd character device file operations 
 lcd character device file operations 
 imon receiver front panelknob key table 
 Go 
 0xffdc iMON MCE VFD 
 iMON Knob values 
 Go 
 0xffdc iMON MCE VFD 
 iMON Knob values 
 imon receiver front panelknob key table for DH102
 imon ultrabay front panel key table 
 Go 
 Music 
 Movie 
 Photo 
 DVD 
 TV 
 Previous 
 Next 
  USB Device ID for iMON USB Control Boards
  The Windows drivers contain 6 different inf files, more or less one for
  each new device until the 0x0034-0x0046 devices, which all use the same
  driver. Some of the devices in the 34-46 range haven't been definitively
  identified yet. Early devices have either a TriGem Computer, Inc. or a
  Samsung vendor ID (0x0aa8 and 0x04e8 respectively), while all later
  devices use the SoundGraph vendor ID (0x15c2). This driver only supports
  the ffdc and later devices, which do onboard decoding.
	
	  Several devices with this same device ID, all use iMON_PAD.inf
	  SoundGraph iMON PAD (IR & VFD)
	  SoundGraph iMON PAD (IR & LCD)
	  SoundGraph iMON Knob (IR only)
	
	  Newer devices, all driven by the latest iMON Windows driver, full
	  list of device IDs extracted via 'strings Setupdata1.hdr |grep 15c2'
	  Need user input to fill in details on unknown devices.
 SoundGraph iMON OEM Touch LCD (IR & 7" VGA LCD) 
 SoundGraph iMON OEM Touch LCD (IR & 4.3" VGA LCD) 
 SoundGraph iMON OEM VFD (IR & VFD) 
 device specifics unknown 
 SoundGraph iMON OEM LCD (IR & LCD) 
 SoundGraph iMON UltraBay (IR & LCD) 
 device specifics unknown 
 device specifics unknown 
 SoundGraph iMON OEM Inside (IR only) 
 device specifics unknown 
 device specifics unknown 
 device specifics unknown 
 device specifics unknown 
 SoundGraph iMON MINI (IR only) 
 Antec Veris Multimedia Station EZ External (IR only) 
 Antec Veris Multimedia Station Basic Internal (IR only) 
 Antec Veris Multimedia Station Elite (IR & VFD) 
 Antec Veris Multimedia Station Premiere (IR & LCD) 
 device specifics unknown 
 USB Device data 
 to prevent races between open() and disconnect(), probing, etc 
 Module bookkeeping bits 
 lcd, vfd, vga or none? should be auto-detected, but can be overridden... 
  In certain use cases, mouse mode isn't really helpful, and could actually
  cause confusion, so allow disabling it when the IR device is open.
 threshold at which a pad push registers as an arrow key in kbd mode 
  Called when the Display device (e.g. devlcd0)
  is opened by the application.
 prevent races with disconnect 
  Called when the display device (e.g. devlcd0)
  is closed by the application.
  Sends a packet to the device -- this function must be called with
  ictx->lock held, or its unlocklock sequence while waiting for tx
  to complete canwill lead to a deadlock.
 Check if we need to use control or interrupt urb 
 fill request into kmalloc'ed space: 
 setup packet is '21 09 0200 0001 0008' 
 control pipe is endpoint 0x00 
 build the control urb 
 ensure later readers know we're busy 
 ensure later readers know we're not busy 
 Wait for transmission to complete (or abort) 
	
	  Induce a mandatory delay before returning, as otherwise,
	  send_packet can get called so rapidly as to overwhelm the device,
	  particularly on faster systems andor those with quirky usb.
  Sends an associate packet to the iMON 2.4G.
  This might not be such a good idea, since it has an id collision with
  some versions of the "IR & VFD" combo. The only way to determine if it
  is an RF version is to look at the product description string. (Which
  we currently do not fetch).
  Sends packets to setup and show clock on iMON display
  Arguments: year - last 2 digits of year, month - 1..12,
  day - 1..31, dow - day of the week (0-Sun...6-Sat),
  hour - 0..23, minute - 0..59, second - 0..59
  These are the sysfs functions to handle the association on the iMON 2.4G LT.
www.lirc.orghtmlimon-24g.html for instructions on how to associate your iMON 2.4G DTLT remote\n");
  sysfs functions to control internal imon clock
  Writes data to the VFD.  The iMON VFD is 2x16 characters
  and requires data in 5 consecutive USB interrupt packets,
  each packet but the last carrying 7 bytes.
  I don't know if the VFD board supports features such as
  scrolling, clearing rows, blanking, etc. so at
  the caller must provide a full screen of data.  If fewer
  than 32 bytes are provided spaces will be appended to
  generate a full screen.
 Pad with spaces 
 Send packet #6 
  Writes data to the LCD.  The iMON OEM LCD screen expects 8-byte
  packets. We accept data as 16 hexadecimal digits, followed by a
  newline (to make it easy to drive the device from a command-line
  -- even though the actual binary data is a bit complicated).
  The device itself is not a "traditional" text-mode display. It's
  actually a 16x96 pixel bitmap display. That means if you want to
  display text, you've got to have your own "font" and translate the
  text into bitmaps for display. This is really flexible (you can
  display whatever diacritics you need, and so on), but it's also
  a lot more complicated than most LCDs...
  Callback function for USB core API: transmit data
 notify waiters that write has finished 
 ensure later readers know we're not busy 
  report touchscreen input
  iMON IR receivers support two different signal sets -- those used by
  the iMON remotes, and those used by the Windows MCE remotes (which is
  really just RC-6), but only one or the other at a time, as the signals
  are decoded onboard the receiver.
  This function gets called two different ways, one way is from
  rc_register_device, for initial protocol selectionsetup, and the other is
  via a userspace-initiated protocol change request, either by direct sysfs
  prodding or by something like ir-keytable. In the rc_register_device case,
  the imon context lock is already held, but when initiated from userspace,
  it is not, so we must acquire it prior to calling send_packet, which
  requires that the lock is held.
 already the default 
 already the default 
  The directional pad behaves a bit differently, depending on whether this is
  one of the older ffdc devices or a newer device. Newer devices appear to
  have a higher resolution matrix for more precise mouse movement, but it
  makes things overly sensitive in keyboard mode, so we do some interesting
  contortions to make it less touchy. Older devices run through the same
  routine with shorter timeout and a smaller threshold.
 Look for the initial press of a button 
 Look for the release of a button 
	
	  On some receivers, mce keys decode to 0x8000f04xx and 0x8000f84xx
	  (the toggle bit flipping between alternating key presses), while
	  on other receivers, we see 0x8000f74xx and 0x8000ff4xx. To keep
	  the table trim, we always or in the bits to look up 0x8000ff4xx,
	  but we can't or them into all codes, as some keys are decoded in
	  a different way wo the same use of the toggle bit...
 not used in mce mode, but make sure we know its false 
 newer iMON device PAD or mouse button 
 0xffdc iMON PAD or mouse button input 
 some ffdc devices decode mouse buttons differently... 
 ch+- buttons, which we use for an emulated scroll wheel 
	
	  The imon directional pad functions more like a touchpad. Bytes 3 & 4
	  contain a position coordinate (x,y), with each component ranging
	  from -14 to 14. We want to down-sample this to only 4 discrete values
	  for updownleftright arrow keys. Also, when you get too close to
	  diagonals, it has a tendency to jump back and forth, so lets try to
	  ignore when they get too close.
 first, pad to 8 bytes so it conforms with everything else 
 in msecs 
 (2threshold) x (2threshold) square 
			
			  Hack alert: instead of using keycodes, we have
			  to use hard-coded scancodes here...
 KEY_DOWN 
 KEY_UP 
 KEY_RIGHT 
 KEY_LEFT 
	
	  Handle on-board decoded pad events for e.g. older VFDiMON-Pad
	  device (15c2:ffdc). The remote generates various codes from
	  0x68nnnnB7 to 0x6AnnnnB7, the left mouse button generates
	  0x688301b7 and the right one 0x688481b7. All other keys generate
	  0x2nnnnnnn. Position coordinate is encoded in buf[1] and buf[2] with
	  reversed endianness. Extract direction from buffer, rotate endianness,
	  adjust sign and feed the values into stabilize(). The resulting codes
	  will be 0x01008000, 0x01007F00, which match the newer devices.
 in msecs 
 (2threshold) x (2threshold) square 
 buf[1] is x 
 buf[2] is y 
			
			  Hack alert: instead of using keycodes, we have
			  to use hard-coded scancodes here...
 KEY_DOWN 
 KEY_UP 
 KEY_RIGHT 
 KEY_LEFT 
  figure out if these is a press or a release. We don't actually
  care about repeats, as those will be auto-generated within the IR
  subsystem for repeating scancodes.
 key release of 0x02XXXXXX key 
 mouse button release on (some) 0xffdc devices 
 mouse button release on (some other) 0xffdc devices 
 mce-specific button handling, no keyup events 
 incoherent or irrelevant data 
 key release of 0xXXXXXXb7 key 
 this is a button press 
  Process the incoming packet
 filter out junk data on the older 0xffdc imon devices 
 Figure out what key was pressed 
 keyboardmouse mode toggle button 
 send touchscreen events through input subsystem if touchpad data 
 look for mouse events with pad in mouse mode 
 Now for some special handling to convert pad input to arrow keys 
 Only panel type events left to process now 
 KEY repeats from knob and panel that need to be suppressed 
 panel keys don't generate a release 
 iMON 2.4G associate frame 
 REFID 
 iMON 2.4G 
 LT 
 DT 
  Callback function for USB core API: receive data
	
	  if we get a callback before we're done configuring the hardware, we
	  can't yet process the data, as there's nowhere to send it, but we
	  still need to submit a new rx URB to avoid wedging the hardware
 usbcore unlink successful! 
 transport endpoint was shut down 
	
	  if we get a callback before we're done configuring the hardware, we
	  can't yet process the data, as there's nowhere to send it, but we
	  still need to submit a new rx URB to avoid wedging the hardware
 usbcore unlink successful! 
 transport endpoint was shut down 
  The 0x15c2:0xffdc device ID was used for umpteen different imon
  devices, and all of them constantly spew interrupts, even when there
  is no actual data to report. However, byte 6 of this buffer looks like
  its unique across device variants, so we're trying to key off that to
  figure out which display type (if any) and what IR protocol the device
  actually supports. These devices have their IR protocol hard-coded into
  their firmware, they can't be changed on the fly like the newer hardware.
 iMON Knob, no display, iMON IR + vol knob 
 iMON 2.4G LT (usb stick), no display, iMON RF 
 iMON VFD, no IR (does have vol knob tho) 
 iMON VFD, iMON IR 
 iMON VFD, MCE IR 
 iMON VFD, iMON or MCE IR 
 iMON LCD, MCE IR 
 no display, iMON IR 
 Soundgraph iMON UltraBay 
		
		  We don't know which one it is, allow user to set the
		  RC6 one from userspace if IMON wasn't correct.
	
	  Try to auto-detect the type of display if the user hasn't set
	  it by hand via the display_type modparam. Default is VFD.
 set in imon_get_ffdc_type() 
 iMON PAD or MCE 
 Enable front-panel buttons andor knobs 
 Not fatal, but warn about it 
 panel andor knob code support 
	
	  Scan the endpoint list and set:
	 	first input endpoint = IR endpoint
	 	first output endpoint = display endpoint
		
		  tx is used to send characters to lcdvfd, associate RF
		  remotes, set IR protocol, and maybe more...
	
	  If we didn't find a display endpoint, this is probably one of the
	  newer iMON devices that use control urb instead of interrupt
	
	  Some iMON receivers have no display. Unfortunately, it seems
	  that SoundGraph recycles device IDs between devices both with
	  and without... :\
	
	  iMON Touch devices have a VGA touchscreen, but no "display", as
	  that refers to e.g. devlcd0 (a character device LCD or VFD).
 Input endpoint is mandatory 
 save drive info for later accessing the panelknob key table 
 default send_packet delay is 5ms but some devices need more 
 set up sysfs entry for built-in clock 
 Not a fatal error, so ignore 
  Callback function for USB core API: Probe
 prevent races probing devices wmultiple interfaces 
 this is the secondary interface on the device 
 fail early if first intf failed to register 
  Callback function for USB core API: disconnect
 prevent races with multi-interface device probing and display_open 
	
	  sysfs_remove_group is safe to call even if sysfs_create_group
	  hasn't been called
 Abort ongoing write 
 SPDX-License-Identifier: GPL-2.0-or-later
  Driver for Allwinner sunXi IR controller
  Copyright (C) 2014 Alexsey Shestacov <wingrime@linux-sunxi.org>
  Copyright (C) 2014 Alexander Bersenev <bay@hackerdom.ru>
  Based on sun5i-ir.c:
  Copyright (C) 2007-2012 Daniel Wang
  Allwinner Technology Co., Ltd. <www.allwinnertech.com>
 Registers 
 IR Control 
 Global Enable 
 RX block enable 
 CIR mode 
 Rx Config 
 Pulse Polarity Invert flag 
 Rx Data 
 Rx Interrupt Enable 
 Rx FIFO Overflow Interrupt Enable 
 Rx Packet End Interrupt Enable 
 Rx FIFO Data Available Interrupt Enable 
 Rx FIFO available byte level 
 Rx Interrupt Status 
 Rx FIFO Overflow 
 Rx Packet End 
 Rx FIFO Data Available 
 RX FIFO Get Available Counter 
 Clear all interrupt status value 
 IR Sample Config 
 CIR_REG register noise threshold 
 CIR_REG register idle threshold 
 Required frequency for IR0 or IR1 clock in CIR mode (default) 
 Noise threshold in samples  
  struct sunxi_ir_quirks - Differences between SoC variants.
  @has_reset: SoC needs reset deasserted.
  @fifo_size: size of the fifo.
 clean all pending statuses 
 How many messages in fifo 
 Sanity check 
 If we have data 
 for each bit in fifo 
 Convert idle threshold to usec 
 Convert usec to idle threshold 
 make sure we don't end up with a timeout less than requested 
 Set noise threshold and idle threshold 
 Enable CIR Mode 
 Set noise threshold and idle threshold 
 Invert Input Signal 
 Clear All Rx Interrupt Status 
	
	  Enable IRQ on overflow, packet end, FIFO available with trigger
	  level
 Enable IR Module 
 Clock 
 Base clock frequency (optional) 
 Reset 
 IO 
 Frequency after IR internal divider with sample period in us 
 IRQ 
 SPDX-License-Identifier: GPL-2.0
 ir-nec-decoder.c - handle NEC IR PulseSpace protocol
 Copyright (C) 2010 by Mauro Carvalho Chehab
 us 
 Less common NEC variant 
 even longer in reality 
  ir_nec_decode() - Decode one NEC pulse or space
  @dev:	the struct rc_dev descriptor of the device
  @ev:		the struct ir_raw_event descriptor of the pulsespace
  This function returns -EINVAL if the pulse violates the state machine
  ir_nec_scancode_to_raw() - encode an NEC scancode ready for modulation.
  @protocol:	specific protocol to use
  @scancode:	a single NEC scancode.
 32-bit NEC (used by Apple and TiVo remotes) 
 scan encoding: aaAAddDD 
 Extended NEC 
 scan encoding AAaaDD 
 Normal NEC 
 scan encoding: AADD 
 raw encoding: ddDDaaAA 
  ir_nec_encode() - Encode a scancode as a stream of raw events
  @protocol:	protocol to encode
  @scancode:	scancode to encode
  @events:	array of raw ir events to write into
  @max:	maximum size of @events
  Returns:	The number of events written.
 		-ENOBUFS if there isn't enough space in the array to fit the
 		encoding. In this case all @max events will have been written.
 Convert a NEC scancode to raw NEC data 
 Modulate the raw data using a pulse distance modulation 
www.redhat.com)");
 SPDX-License-Identifier: GPL-2.0
  Driver for Amlogic Meson IR remote receiver
  Copyright (C) 2014 Beniamino Galvani <b.galvani@gmail.com>
 valid on all Meson platforms 
 only available on Meson 8b and newer 
 Meson 6b uses REG1 to configure the mode 
 Meson 8b  GXBB use REG2 to configure the mode 
 us 
 Reset the decoder 
 Set general operation mode (= rawsoftware decoding) 
 Set rate 
 IRQ on rising and falling edges 
 Enable the decoder 
 Disable the decoder 
	
	  Set operation mode to NEChardware decoding to give
	  bootloader a chance to power the system back on
 Set rate to default value 
 SPDX-License-Identifier: GPL-2.0-only
 ir-mce_kbd-decoder.c - A decoder for the RC6-ish keyboardmouse IR protocol
  used by the Microsoft Remote Keyboard for Windows Media Center Edition,
  referred to by Microsoft's Windows Media Center remote specification docs
  as "an internal protocol called MCIR-2".
  Copyright (C) 2011 by Jarod Wilson <jarod@redhat.com>
  This decoder currently supports:
  - MCIR-2 29-bit IR signals used for mouse movement and buttons
  - MCIR-2 32-bit IR signals used for standard keyboard keys
  The media keys on the keyboard send RC-6 signals that are indistinguishable
  from the keys of the same name on the stock MCE remote, and will be handled
  by the standard RC-6 decoder, and be made available to the system via the
  input device for the remote, rather than the keyboardmouse one.
 us 
 for the header bits 
 raw mouse coordinates 
 mouse buttons 
  ir_mce_kbd_decode() - Decode one mce_kbd pulse or space
  @dev:	the struct rc_dev descriptor of the device
  @ev:		the struct ir_raw_event descriptor of the pulsespace
  This function returns -EINVAL if the pulse violates the state machine
		 Note: larger margin on first pulse since each MCIR2_UNIT
		   is quite short and some hardware takes some time to
 Pass data to keyboard buffer parser 
 Pass data to mouse buffer parser 
  ir_mce_kbd_encode() - Encode a scancode as a stream of raw events
  @protocol:   protocol to encode
  @scancode:   scancode to encode
  @events:     array of raw ir events to write into
  @max:        maximum size of @events
  Returns:     The number of events written.
               -ENOBUFS if there isn't enough space in the array to fit the
               encoding. In this case all @max events will have been written.
 SPDX-License-Identifier: GPL-2.0-or-later
  TechnoTrend USB IR Receiver
  Copyright (C) 2012 Sean Young <sean@mess.org>
  The Windows driver uses 8 URBS, the original lirc drivers has a
  configurable amount (2 default, 4 max). This device generates about 125
  messages per second (!), whether IR is idle or not.
  The urb cannot be reused until the urb completes
  The data is one bit per sample, a set bit signifying silence and samples
  being MSB first. Bit 0 can contain garbage so take it to be whatever
  bit 1 is, so we don't have unexpected edges.
 one edge per byte 
 don't wakeup when there's nothing to do 
 find the correct alt setting 
	
	  The precision is US_PER_BIT, but since every 8th bit can be
	  overwritten with garbage the accuracy is at best 2  US_PER_BIT.
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (C) 2017 Sean Young <sean@mess.org>
	
	  delta should never exceed 0.5 seconds (IR_MAX_DURATION) and on
	  m68k ndelay(s64) does not compile; so use s32 rather than s64.
 Ensure the dividend fits into 32 bit 
 space
 pulse
 SPDX-License-Identifier: GPL-2.0-only
 Copyright (c) 2012, Code Aurora Forum. All rights reserved.
	
	  For some cpuidle systems, not all:
	  Respond to interrupt taking more latency when cpu in idle.
	  Invoke asynchronous pm runtime get from interrupt context,
	  this may introduce a millisecond delay to call resume callback,
	  where to disable cpuilde.
	 
	  Two issues lead to fail to decode first frame, one is latency to
	  respond to interrupt, another is delay introduced by async api.
 Just try again if this happens 
 SPDX-License-Identifier: GPL-2.0-or-later
  Driver for Mediatek IR Receiver Controller
  Copyright (C) 2017 Sean Wang <sean.wang@mediatek.com>
 Register to enable PWM and IR 
 Bit to enable IR pulse width detection 
  Register to setting ok count whose unit based on hardware sampling period
  indicating IR receiving completion and then making IRQ fires
 Bit to enable IR hardware function 
 Bit to restart IR receiving 
 Fields containing pulse width data 
 IR threshold 
 Bit to enable interrupt 
 Bit to clear interrupt status 
 Maximum count of samples 
 Indicate the end of IR message 
 Number of registers to record the pulse width 
 Sample period in us 
 Register to setting software sampling period 
 Register to setting hardware sampling period 
 Register to clear state of state machine 
 Register containing pulse width data 
 Register to enable IR interrupt 
 Register to ack IR interrupt 
  struct mtk_ir_data -	This is the structure holding all differences among
			various hardwares
  @regs:		The pointer to the array holding registers offset
  @fields:		The pointer to the array holding fields location
  @div:		The internal divisor for the based reference clock
  @ok_count:		The count indicating the completion of IR data
 			receiving when count is reached
  @hw_period:		The value indicating the hardware sampling period
  struct mtk_ir -	This is the main datasructure for holding the state
 			of the driver
  @dev:		The device pointer
  @rc:			The rc instrance
  @base:		The mapped register io base
  @irq:		The IRQ that we are using
  @clk:		The clock that IR internal is using
  @bus:		The clock that software decoder is using
  @data:		Holding specific data for vaious platform
	
	  Period for software decoder used in the
	  unit of raw software sampling
	
	  Reset decoder state machine explicitly is required
	  because 1) the longest duration for space MTK IR hardware
	  could record is not safely long. e.g  12ms if rx resolution
	  is 46us by default. There is still the risk to satisfying
	  every decoder to reset themselves through long enough
	  trailing spaces and 2) the IRQ handler guarantees that
	  start of IR message is always contained in and starting
	  from register mtk_chkdata_reg(ir, i).
 First message must be pulse 
 Handle all pulse and space IR controller captures 
	
	  The maximum number of edges the IR controller can
	  hold is MTK_CHKDATA_SZ  4. So if received IR messages
	  is over the limit, the last incomplete IR message would
	  be appended trailing space and still would be sent into
	  ir-rc-raw to decode. That helps it is possible that it
	  has enough information to decode a scancode even if the
	  trailing end of the message is missing.
	
	  Restart controller for the next receive that would
	  clear up all CHKDATA registers
 Clear interrupt status 
		
		  For compatibility with older device trees try unnamed
		  ir->bus uses the same clock as ir->clock.
	
	  Enable interrupt after proper hardware
	  setup and IRQ handler registration
	
	  Setup software sample period as the reference of software decoder
	
	  Setup hardware sampling period used to setup the proper timeout for
	  indicating end of IR receiving completion
 Set de-glitch counter 
 Enable IR and PWM 
	
	  Avoid contention between remove handler and
	  IRQ handler so that disabling IR interrupt and
	  waiting for pending IRQ handler to complete
 SPDX-License-Identifier: GPL-2.0-or-later
   USB ATI Remote support
                 Copyright (c) 2011, 2012 Anssi Hannula <anssi.hannula@iki.fi>
   Version 2.2.0 Copyright (c) 2004 Torrey Hoffman <thoffman@arnor.net>
   Version 2.1.1 Copyright (c) 2002 Vladimir Dergachev
   This 2.2.0 version is a rewrite  cleanup of the 2.1.1 driver, including
   porting to the 2.6 kernel interfaces, along with other modification
   to better match the style of the existing usbinput drivers.  However, the
   protocol and hardware handling is essentially unchanged from 2.1.1.
   The 2.1.1 driver was derived from the usbati_remote and usbkbd drivers by
   Vojtech Pavlik.
   Changes:
   Feb 2004: Torrey Hoffman <thoffman@arnor.net>
             Version 2.2.0
   Jun 2004: Torrey Hoffman <thoffman@arnor.net>
             Version 2.2.1
             Added key repeat support contributed by:
                 Vincent Vanackere <vanackere@lif.univ-mrs.fr>
             Added support for the "Lola" remote contributed by:
                 Seth Cohn <sethcohn@yahoo.com>
  Hardware & software notes
  These remote controls are distributed by ATI as part of their
  "All-In-Wonder" video card packages.  The receiver self-identifies as a
  "USB Receiver" with manufacturer "X10 Wireless Technology Inc".
  The "Lola" remote is available from X10.  See:
     http:www.x10.comproductslola_sg1.htm
  The Lola is similar to the ATI remote but has no mouse support, and slightly
  different keys.
  It is possible to use multiple receivers and remotes on multiple computers
  simultaneously by configuring them to use specific channels.
  The RF protocol used by the remote supports 16 distinct channels, 1 to 16.
  Actually, it may even support more, at least in some revisions of the
  hardware.
  Each remote can be configured to transmit on one channel as follows:
    - Press and hold the "hand icon" button.
    - When the red LED starts to blink, let go of the "hand icon" button.
    - When it stops blinking, input the channel code as two digits, from 01
      to 16, and press the hand icon again.
  The timing can be a little tricky.  Try loading the module with debug=1
  to have the kernel print out messages about the remote control number
  and mask.  Note: debugging prints remote numbers as zero-based hexadecimal.
  The driver has a "channel_mask" parameter. This bitmask specifies which
  channels will be ignored by the module.  To mask out channels, just add
  all the 2^channel_number values together.
  For instance, set channel_mask = 2^4 = 16 (binary 10000) to make ati_remote
  ignore signals coming from remote controls transmitting on channel 4, but
  accept all other channels.
  Or, set channel_mask = 65533, (0xFFFD), and all channels except 1 will be
  ignored.
  The default is 0 (respond to all channels). Bit 0 and bits 17-32 of this
  parameter are unused.
  Module and Version Information, Module Parameters
 size of product name, path buffers 
 size of URB data buffers 
  Duplicate event filtering time.
  Sequential, identical KIND_FILTERED inputs with less than
  FILTER_TIME milliseconds between them are considered as repeat
  events. The hardware generates 5 events for the first keypress
  and we have to take this into account for an accurate repeat
  behaviour.
 msec 
 msec 
 either default_keymap or get_default_keymap should be set 
	
	  There are many different Medion remotes shipped with a receiver
	  with the same usb id, but the receivers have subtle differences
	  in the USB descriptors allowing us to detect them.
 Terminating entry 
 Get hi and low bytes of a 16-bits int 
 Device initialization strings 
 Detect duplicate events 
 handle acceleration 
 0-2, users are rc and input 
 "Kinds" of messages sent from the hardware to the driver. 
 Simply pass to input system as EV_KEY 
 Add artificial key-up events, drop keyrepeats 
 Translate to EV_REL mouse-move events 
 Translation table from hardware messages to input events. 
 Raw key code from remote 
 Input layer translation 
 Directional control pad axes.  Code is xxyy 
 left 
 right 
 up 
 down 
 Directional control pad diagonals 
 left up 
 right up 
 left down 
 right down 
	 "Mouse button" buttons.  The code below uses the fact that the
 left btn down 
 left btn up 
 right btn down 
 right btn up 
	 Artificial "double-click" events are generated by the hardware.
 left dblclick 
 right dblclick 
 Non-mouse events are handled by rc-core 
  ati_remote_dump_input
  ati_remote_open
 one was already active 
 On first open, submit the read urb which was set up previously. 
  ati_remote_close
  ati_remote_irq_out
  ati_remote_sendpacket
  Used to send device initialization strings
 Set up out_urb 
  ati_remote_compute_accel
  Implements acceleration curve for directional control pad
  If elapsed time since last event is > 14 second, user "stopped",
  so reset acceleration. Otherwise, user is probably holding the control
  pad down, so we increase acceleration, ramping up over two seconds to
  a maximum speed.
  ati_remote_report_input
	
	  data[0] = 0x14
	  data[1] = data[2] + data[3] + 0xd5 (a checksum byte)
	  data[2] = the key code (with toggle bit in MSB with some models)
	  data[3] = channel << 4 (the low 4 bits must be zero)
 Deal with strange looking inputs 
 Mask unwanted remote channels.  
 note: remote_num is 0-based, channel 1 on remote == 0 here 
	
	  MSB is a toggle code, though only used by some devices
	  (e.g. SnapStream Firefly)
		
		  This is either a mouse or scrollwheel event, depending on
		  the remotekeymap.
		  Get the keycode assigned to scancode 0x780x70. If it is
		  set, assume this is a scrollwheel updown event.
 scrollwheel was not mapped, assume mouse 
			 Look up event code index in the mouse translation
			  table.
		
		  The lsbit of the raw key code is a downup flag.
		  Invert it to match the input layer's conventions.
 Filter duplicate events which happen "too close" together. 
		 Ensure we skip at least the 4 first duplicate events
		  (generated by a single keypress), and continue skipping
		  until repeat_delay msecs have passed.
 Not a mouse event, hand it to rc-core. 
				
				  This is a scrollwheel event, send the
				  scroll up (0x78)  down (0x70) scancode
				  repeatedly as many times as indicated by
				  rest of the scancode.
				
				 We don't use the rc-core repeat handling yet as
				 it would cause ghost repeats which would be a
				 regression for this driver.
		
		  Other event kinds are from the directional control pad, and
		  have an acceleration factor applied to them.  Without this
		  acceleration, the control pad is mostly unusable.
  ati_remote_irq_in
 success 
 unlink 
 error 
  ati_remote_alloc_buffers
  ati_remote_free_buffers
 Set up irq_urb 
 Set up out_urb 
 send initialization strings 
  ati_remote_probe
 Allocate URB buffers, URBs 
 default map 
 set default keymap according to receiver model 
 Device Hardware Initialization - fills in ati_remote->idev from udev. 
 Set up and register rc device 
 Set up and register mouse input device 
  ati_remote_disconnect
 usb specific object to register with the usb subsystem 
 SPDX-License-Identifier: GPL-2.0
 ir-sanyo-decoder.c - handle SANYO IR PulseSpace protocol
 Copyright (C) 2011 by Mauro Carvalho Chehab
 This protocol uses the NEC protocol timings. However, data is formatted as:
	13 bits Custom Code
	13 bits NOT(Custom Code)
	8 bits Key data
	8 bits NOT(Key data)
 According with LIRC, this protocol is used on Sanyo, Aiwa and Chinon
 Information for this protocol is available at the Sanyo LC7461 datasheet.
 us 
 in fact, 42 
  ir_sanyo_decode() - Decode one SANYO pulse or space
  @dev:	the struct rc_dev descriptor of the device
  @ev:		the struct ir_raw_event descriptor of the pulsespace
  This function returns -EINVAL if the pulse violates the state machine
 not_address = bitrev16((data->bits >> 16) & 0x1fff) >> 3; 
  ir_sanyo_encode() - Encode a scancode as a stream of raw events
  @protocol:	protocol to encode
  @scancode:	scancode to encode
  @events:	array of raw ir events to write into
  @max:	maximum size of @events
  Returns:	The number of events written.
 		-ENOBUFS if there isn't enough space in the array to fit the
 		encoding. In this case all @max events will have been written.
www.redhat.com)");
 SPDX-License-Identifier: GPL-2.0-or-later
  Driver for ITE Tech Inc. IT8712FIT8512 CIR
  Copyright (C) 2010 Juan Jesús García de Soria <skandalfo@gmail.com>
  Inspired by the original lirc_it87 and lirc_ite8709 drivers, on top of the
  skeleton provided by the nuvoton-cir driver.
  The lirc_it87 driver was originally written by Hans-Gunter Lutke Uphues
  <hg_lu@web.de> in 2001, with enhancements by Christoph Bartelmus
  <lirc@bartelmus.de>, Andrew Calkin <r_tay@hotmail.com> and James Edwards
  <jimbo-lirc@edwardsclan.net>.
  The lirc_ite8709 driver was written by Grégory Lardière
  <spmf2004-lirc@yahoo.fr> in 2008.
 module parameters 
 default sample period 
 override detected model id 
 HW-independent code functions 
 check whether carrier frequency is high frequency 
 get the bits required to program the carrier frequency in CFQ bits,
 trim to limits 
 convert to kHz and subtract the base freq 
 get the bits required to program the pulse with in TXMPW 
 sanitize freq into range 
 decode raw bytes as received by the hardware, and push them to the ir-core
 set all the rxtx carrier parameters; this must be called with the device
 we don't need no stinking calculations 
 don't demodulate 
 calculate the middle freq 
 calculate the allowance 
 set the carrier parameters in a device-dependent way 
 interrupt service routine for incoming and outgoing CIR data 
 grab the spinlock 
 read the interrupt flags 
 Check for RX overflow 
 check for the receive interrupt 
 read the FIFO bytes 
			 drop the spinlock, since the ir-core layer
			  may call us back again through
 decode the data we've just received 
 reacquire the spinlock 
 mark the interrupt as serviced 
 FIFO space available interrupt 
 wake any sleeping transmitter 
 mark the interrupt as serviced 
 drop the spinlock 
 set the rx carrier freq range, guess it's in Hz... 
 set the tx carrier freq, guess it's in Hz... 
 set the tx duty cycle by controlling the pulse width 
 transmit out IR pulses; what you get here is a batch of alternating
  pulsespacepulsespace lengths that we should write out completely through
 clear the array just in case 
 let everybody know we're now transmitting 
 and set the carrier values for transmission 
 calculate how much time we can send in one byte 
 disable the receiver 
	 this is where we'll begin filling in the FIFO, until it's full.
	  then we'll just activate the interrupt, wait for it to wake us up
	  again, disable it, continue filling the FIFO... until everything
 transmit the next sample 
 repeat while the pulse is non-zero length 
 check what's the length we have to pump out 
 put it into the sent buffer 
 encode it for 7 bits 
 take into account pulsespace prefix 
			
			  if we get to 0 available, read again, just in case
			  some other slot got freed
 if it's still full 
 enable the tx interrupt 
 drop the spinlock 
 wait for the FIFO to empty enough 
 get the spinlock again 
 disable the tx interrupt again. 
 now send the byte through the FIFO 
	 wait and don't return until the whole FIFO has been sent out;
	  otherwise we could configure the RX carrier params instead of the
 drop the spinlock while we sleep 
 sleep remaining_us microseconds 
 reacquire the spinlock 
 now we're not transmitting anymore 
 and set the carrier values for reception 
 re-enable the receiver 
 notify transmission end 
 idle the receiver if needed 
 IT8712F HW-specific functions 
 retrieve a bitmask of the current causes for a pending interrupt; this may
  be composed of ITE_IRQ_TX_FIFO, ITE_IRQ_RX_FIFO and ITE_IRQ_RX_FIFO_OVERRUN
 read the interrupt flags 
 set the carrier parameters; to be called with the spinlock held 
 program the RCR register 
 program the TCR2 register 
 read up to buf_size bytes from the RX FIFO; to be called with the spinlock
 read how many bytes are still in the FIFO 
 return how many bytes are still in the FIFO; this will be called
  with the device spinlock NOT HELD while waiting for the TX FIFO to get
 put a byte to the TX fifo; this should be called with the spinlock held 
 idle the receiver so that we won't receive samples until another
 disable streaming by clearing RXACT writing it as 1 
 clear the FIFO 
 disable the receiver; this must be called with the device spinlock held 
 disable the receiver interrupts 
 disable the receiver 
	 clear the FIFO and RXACT (actually RXACT should have been cleared
 enable the receiver; this must be called with the device spinlock held 
 enable the receiver by setting RXEN 
 just prepare it to idle for the next reception 
 enable the receiver interrupts and master enable flag 
 disable the transmitter interrupt; this must be called with the device
 disable the transmitter interrupts 
 enable the transmitter interrupt; this must be called with the device
 enable the transmitter interrupts and master enable flag 
 disable the device; this must be called with the device spinlock held 
 clear out all interrupt enable flags 
 disable the receiver 
 erase the FIFO 
 initialize the hardware 
	 enable just the baud rate divisor register,
 write out the baud rate divisor 
 disable the baud rate divisor register again 
 program the RCR register defaults 
 program the TCR1 register 
 program the carrier parameters 
 IT8512F on ITE8708 HW-specific functions 
 retrieve a bitmask of the current causes for a pending interrupt; this may
  be composed of ITE_IRQ_TX_FIFO, ITE_IRQ_RX_FIFO and ITE_IRQ_RX_FIFO_OVERRUN
 read the interrupt flags 
 set the carrier parameters; to be called with the spinlock held 
 program the C0CFR register, with HRAE=1 
 program the C0RCR register 
 program the C0TCR register 
 read up to buf_size bytes from the RX FIFO; to be called with the spinlock
 read how many bytes are still in the FIFO 
 return how many bytes are still in the FIFO; this will be called
  with the device spinlock NOT HELD while waiting for the TX FIFO to get
 put a byte to the TX fifo; this should be called with the spinlock held 
 idle the receiver so that we won't receive samples until another
 disable streaming by clearing RXACT writing it as 1 
 clear the FIFO 
 disable the receiver; this must be called with the device spinlock held 
 disable the receiver interrupts 
 disable the receiver 
	 clear the FIFO and RXACT (actually RXACT should have been cleared
 enable the receiver; this must be called with the device spinlock held 
 enable the receiver by setting RXEN 
 just prepare it to idle for the next reception 
 enable the receiver interrupts and master enable flag 
 disable the transmitter interrupt; this must be called with the device
 disable the transmitter interrupts 
 enable the transmitter interrupt; this must be called with the device
 enable the transmitter interrupts and master enable flag 
 disable the device; this must be called with the device spinlock held 
 clear out all interrupt enable flags 
 disable the receiver 
 erase the FIFO 
 initialize the hardware 
 disable all the interrupts 
 program the baud rate divisor 
 program the C0MSTCR register defaults 
 program the C0RCR register defaults 
 program the C0TCR register defaults 
 program the carrier parameters 
 IT8512F on ITE8709 HW-specific functions 
 read a byte from the SRAM module 
 write a byte to the SRAM module 
	
	  loop until device tells it's ready to continue
	  iterations count is usually ~750 but can sometimes achieve 13000
 read the value of a CIR register 
 just wait in case the previous access was a write 
 wait for the read data to be available 
 return the read value 
 write the value of a CIR register 
	 we wait before writing, and not afterwards, since this allows us to
 retrieve a bitmask of the current causes for a pending interrupt; this may
  be composed of ITE_IRQ_TX_FIFO, ITE_IRQ_RX_FIFO and ITE_IRQ_RX_FIFO_OVERRUN
 read the interrupt flags 
 set the carrier parameters; to be called with the spinlock held 
 program the C0RCR register 
 program the C0TCR register 
 read up to buf_size bytes from the RX FIFO; to be called with the spinlock
 read how many bytes are still in the FIFO 
	 'clear' the FIFO by setting the writing index to 0; this is
	  completely bound to be racy, but we can't help it, since it's a
 return how many bytes are still in the FIFO; this will be called
  with the device spinlock NOT HELD while waiting for the TX FIFO to get
 put a byte to the TX fifo; this should be called with the spinlock held 
 idle the receiver so that we won't receive samples until another
 disable streaming by clearing RXACT writing it as 1 
 clear the FIFO 
 disable the receiver; this must be called with the device spinlock held 
 disable the receiver interrupts 
 disable the receiver 
	 clear the FIFO and RXACT (actually RXACT should have been cleared
 enable the receiver; this must be called with the device spinlock held 
 enable the receiver by setting RXEN 
 just prepare it to idle for the next reception 
 enable the receiver interrupts and master enable flag 
 disable the transmitter interrupt; this must be called with the device
 disable the transmitter interrupts 
 enable the transmitter interrupt; this must be called with the device
 enable the transmitter interrupts and master enable flag 
 disable the device; this must be called with the device spinlock held 
 clear out all interrupt enable flags 
 disable the receiver 
 erase the FIFO 
 initialize the hardware 
 disable all the interrupts 
 program the baud rate divisor 
 program the C0MSTCR register defaults 
 program the C0RCR register defaults 
 program the C0TCR register defaults 
 program the carrier parameters 
 generic hardware setupteardown code 
 activate the device for use 
 enable the receiver 
 deactivate the device for use 
 wait for any transmission to end 
 supported models and their parameters 
 0: ITE8704 
 operations 
 1: ITE8713 
 operations 
 2: ITE8708 
 operations 
 3: ITE8709 
 operations 
 Default model 
 CIR found in EEEBox 1501U 
 Bridged IT8512 
 SRAM-Bridged IT8512 
 allocate memory, probe hardware, and initialize everything 
 input device for IR remote (and tx) 
 get the model number 
 get the description for the device 
 validate pnp resources 
 store resource values 
 initialize spinlocks 
 set driver data into the pnp device 
 initialize waitqueues for transmission 
 Set model-specific parameters 
 set up hardware initial state 
 set up ir-core props 
 FIFO threshold is 17 bytes, so 17  8 samples minimum 
 set up transmitter related values 
 now claim resources 
 disable hardware 
 free resources 
 wait for any transmission to end 
 disable all interrupts 
 reinitialize hardware config registers 
 enable the receiver 
 disable all interrupts 
 SPDX-License-Identifier: GPL-2.0
 rc-main.c - Remote Controller core module
 Copyright (C) 2009-2010 by Mauro Carvalho Chehab
 Sizes are in bytes, 256 bytes allows for 32 entries on x64 
 Used to keep track of known keymaps 
 Used to keep track of rc devices 
 Give some time for IR to register 
 Legacy IR type 
  scancode_to_u64() - converts scancode in &struct input_keymap_entry
  @ke: keymap entry containing scancode to be converted.
  @scancode: pointer to the location where converted scancode should
 	be stored.
  This function is a version of input_scancode_to_scalar specialized for
  rc-core.
  ir_create_table() - initializes a scancode table
  @dev:	the rc_dev device
  @rc_map:	the rc_map to initialize
  @name:	name to assign to the table
  @rc_proto:	ir type to assign to the new table
  @size:	initial size of the table
  This routine will initialize the rc_map and will allocate
  memory to hold at least the specified number of elements.
  return:	zero on success or a negative error code
  ir_free_table() - frees memory allocated by a scancode table
  @rc_map:	the table whose mappings need to be freed
  This routine will free memory alloctaed for key mappings used by given
  scancode table.
  ir_resize_table() - resizes a scancode table if necessary
  @dev:	the rc_dev device
  @rc_map:	the rc_map to resize
  @gfp_flags:	gfp flags to use when allocating memory
  This routine will shrink the rc_map if it has lots of
  unused entries and grow it if it is full.
  return:	zero on success or a negative error code
 All entries in use -> grow keytable 
 Less than 13 of entries in use -> shrink keytable 
  ir_update_mapping() - set a keycode in the scancode->keycode table
  @dev:	the struct rc_dev device descriptor
  @rc_map:	scancode table to be adjusted
  @index:	index of the mapping that needs to be updated
  @new_keycode: the desired keycode
  This routine is used to update scancode->keycode mapping at given
  position.
  return:	previous keycode assigned to the mapping
 Did the user wish to remove the mapping? 
 A previous mapping was updated... 
 ... but another scancode might use the same keycode 
 Possibly shrink the keytable, failure is not a problem 
  ir_establish_scancode() - set a keycode in the scancode->keycode table
  @dev:	the struct rc_dev device descriptor
  @rc_map:	scancode table to be searched
  @scancode:	the desired scancode
  @resize:	controls whether we allowed to resize the table to
 		accommodate not yet present scancodes
  This routine is used to locate given scancode in rc_map.
  If scancode is not yet present the routine will allocate a new slot
  for it.
  return:	index of the mapping containing scancode in question
 		or -1U in case of failure.
	
	  Unfortunately, some hardware-based IR decoders don't provide
	  all bits for the complete IR code. In general, they provide only
	  the command part of the IR code. Yet, as it is possible to replace
	  the provided IR with another one, it is needed to allow loading
	  IR tables from other remotes. So, we support specifying a mask to
	  indicate the valid bits of the scancodes.
 First check if we already have a mapping for this ir command 
 Keytable is sorted from lowest to highest scancode 
 No previous mapping found, we might need to grow the table 
 i is the proper index to insert our new keycode 
  ir_setkeycode() - set a keycode in the scancode->keycode table
  @idev:	the struct input_dev device descriptor
  @ke:		Input keymap entry
  @old_keycode: result
  This routine is used to handle evdev EVIOCSKEY ioctl.
  return:	-EINVAL if the keycode could not be inserted, otherwise zero.
  ir_setkeytable() - sets several entries in the scancode->keycode table
  @dev:	the struct rc_dev device descriptor
  @from:	the struct rc_map to copy entries from
  This routine is used to handle table initialization.
  return:	-ENOMEM if all keycodes could not be inserted, otherwise zero.
  ir_lookup_by_scancode() - locate mapping by scancode
  @rc_map:	the struct rc_map to search
  @scancode:	scancode to look for in the table
  This routine performs binary search in RC keykeymap table for
  given scancode.
  return:	index in the table, -1U if not found
  ir_getkeycode() - get a keycode from the scancode->keycode table
  @idev:	the struct input_dev device descriptor
  @ke:		Input keymap entry
  This routine is used to handle evdev EVIOCGKEY ioctl.
  return:	always returns zero.
		
		  We do not really know the valid range of scancodes
		  so let's respond with KEY_RESERVED to anything we
		  do not have mapping for [yet].
  rc_g_keycode_from_table() - gets the keycode that corresponds to a scancode
  @dev:	the struct rc_dev descriptor of the device
  @scancode:	the scancode to look for
  This routine is used by drivers which need to convert a scancode to a
  keycode. Normally it should not be used since drivers should have no
  interest in keycodes.
  return:	the corresponding keycode, or KEY_RESERVED
  ir_do_keyup() - internal function to signal the release of a keypress
  @dev:	the struct rc_dev descriptor of the device
  @sync:	whether or not to call input_sync
  This function is used internally to release a keypress, it must be
  called with keylock held.
  rc_keyup() - signals the release of a keypress
  @dev:	the struct rc_dev descriptor of the device
  This routine is used to signal that a key has been released on the
  remote control.
  ir_timer_keyup() - generates a keyup event after a timeout
  @t:		a pointer to the struct timer_list
  This routine will generate a keyup event some time after a keydown event
  is generated when no further activity has been detected.
	
	  ir->keyup_jiffies is used to prevent a race condition if a
	  hardware interrupt occurs at this point and the keyup timer
	  event is moved further into the future as a result.
	 
	  The timer will then be reactivated and this function called
	  again in the future. We need to exit gracefully in that case
	  to allow the input subsystem to do its auto-repeat magic or
	  a keyup event might follow immediately after the keydown.
  ir_timer_repeat() - generates a repeat event after a timeout
  @t:		a pointer to the struct timer_list
  This routine will generate a soft repeat event every REP_PERIOD
  milliseconds.
  rc_repeat() - signals that a key is still pressed
  @dev:	the struct rc_dev descriptor of the device
  This routine is used by IR decoders when a repeat message which does
  not include the necessary bits to reproduce the scancode has been
  received.
  ir_do_keydown() - internal function to process a keypress
  @dev:	the struct rc_dev descriptor of the device
  @protocol:	the protocol of the keypress
  @scancode:   the scancode of the keypress
  @keycode:    the keycode of the keypress
  @toggle:     the toggle value of the keypress
  This function is used internally to register a keypress, it must be
  called with keylock held.
 Register a keypress 
	
	  For CEC, start sending repeat messages as soon as the first
	  repeated message is sent, as long as REP_DELAY = 0 and REP_PERIOD
	  is non-zero. Otherwise, the input layer will generate repeat
	  messages.
  rc_keydown() - generates input event for a key press
  @dev:	the struct rc_dev descriptor of the device
  @protocol:	the protocol for the keypress
  @scancode:	the scancode for the keypress
  @toggle:     the toggle value (protocol dependent, if the protocol doesn't
               support toggle values, this should be set to zero)
  This routine is used to signal that a key has been pressed on the
  remote control.
  rc_keydown_notimeout() - generates input event for a key press without
                           an automatic keyup event at a later time
  @dev:	the struct rc_dev descriptor of the device
  @protocol:	the protocol for the keypress
  @scancode:	the scancode for the keypress
  @toggle:     the toggle value (protocol dependent, if the protocol doesn't
               support toggle values, this should be set to zero)
  This routine is used to signal that a key has been pressed on the
  remote control. The driver must manually call rc_keyup() at a later stage.
  rc_validate_scancode() - checks that a scancode is valid for a protocol.
 	For nec, it should do the opposite of ir_nec_bytes_to_scancode()
  @proto:	protocol
  @scancode:	scancode
	
	  NECX has a 16-bit address; if the lower 8 bits match the upper
	  8 bits inverted, then the address would match regular nec.
	
	  NEC32 has a 16 bit address and 16 bit command. If the lower 8 bits
	  of the command match the upper 8 bits inverted, then it would
	  be either NEC or NECX.
	
	  If the customer code (top 32-bit) is 0x800f, it is MCE else it
	  is regular mode-6a 32 bit
  rc_validate_filter() - checks that the scancode and mask are valid and
 			  provides sensible defaults
  @dev:	the struct rc_dev descriptor of the device
  @filter:	the scancode and mask
  return:	0 or -EINVAL if the filter is not valid
	
	  If we have to raw encode the IR for wakeup, we cannot have a mask
 class for sysclassrc 
  These are the protocol textual descriptions that are
  used by the sysfs protocols file. Note that the order
  of the entries is relevant.
  struct rc_filter_attribute - Device attribute relating to a filter type.
  @attr:	Device attribute.
  @type:	Filter type.
  @mask:	false for filter value, true for filter mask.
  show_protocols() - shows the current IR protocol(s)
  @device:	the device descriptor
  @mattr:	the device attribute struct
  @buf:	a pointer to the output buffer
  This routine is a callback routine for input read the IR protocol type(s).
  it is triggered by reading sysclassrcrc?protocols.
  It returns the protocol names of supported protocols.
  Enabled protocols are printed in brackets.
  dev->lock is taken to guard against races between
  store_protocols and show_protocols.
  parse_protocol_change() - parses a protocol change request
  @dev:	rc_dev device
  @protocols:	pointer to the bitmask of current protocols
  @buf:	pointer to the buffer with a list of changes
  Writing "+proto" will add a protocol to the protocol mask.
  Writing "-proto" will remove a protocol from protocol mask.
  Writing "proto" will enable only "proto".
  Writing "none" will disable all protocols.
  Returns the number of changes performed or a negative error code.
  store_protocols() - changes the currentwakeup IR protocol(s)
  @device:	the device descriptor
  @mattr:	the device attribute struct
  @buf:	a pointer to the input buffer
  @len:	length of the input buffer
  This routine is for changing the IR protocol type.
  It is triggered by writing to sysclassrcrc?[wakeup_]protocols.
  See parse_protocol_change() for the valid commands.
  Returns @len on success or a negative error code.
  dev->lock is taken to guard against races between
  store_protocols and show_protocols.
	
	  If a protocol change was attempted the filter may need updating, even
	  if the actual protocol mask hasn't changed (since the driver may have
	  cleared the filter).
	  Try setting the same filter with the new protocol (if any).
	  Fall back to clearing the filter.
  show_filter() - shows the current scancode filter value or mask
  @device:	the device descriptor
  @attr:	the device attribute struct
  @buf:	a pointer to the output buffer
  This routine is a callback routine to read a scancode filter value or mask.
  It is triggered by reading sysclassrcrc?[wakeup_]filter[_mask].
  It prints the current scancode filter value or mask of the appropriate filter
  type in hexadecimal into @buf and returns the size of the buffer.
  Bits of the filter value corresponding to set bits in the filter mask are
  compared against input scancodes and non-matching scancodes are discarded.
  dev->lock is taken to guard against races between
  store_filter and show_filter.
  store_filter() - changes the scancode filter value
  @device:	the device descriptor
  @attr:	the device attribute struct
  @buf:	a pointer to the input buffer
  @len:	length of the input buffer
  This routine is for changing a scancode filter value or mask.
  It is triggered by writing to sysclassrcrc?[wakeup_]filter[_mask].
  Returns -EINVAL if an invalid filter value for the current protocol was
  specified or if scancode filtering is not supported by the driver, otherwise
  returns @len.
  Bits of the filter value corresponding to set bits in the filter mask are
  compared against input scancodes and non-matching scancodes are discarded.
  dev->lock is taken to guard against races between
  store_filter and show_filter.
		
		  Refuse to set a filter unless a protocol is enabled
		  and the filter is valid for that protocol
 refuse to set a filter unless a protocol is enabled 
  show_wakeup_protocols() - shows the wakeup IR protocol
  @device:	the device descriptor
  @mattr:	the device attribute struct
  @buf:	a pointer to the output buffer
  This routine is a callback routine for input read the IR protocol type(s).
  it is triggered by reading sysclassrcrc?wakeup_protocols.
  It returns the protocol names of supported protocols.
  The enabled protocols are printed in brackets.
  dev->lock is taken to guard against races between
  store_wakeup_protocols and show_wakeup_protocols.
  store_wakeup_protocols() - changes the wakeup IR protocol(s)
  @device:	the device descriptor
  @mattr:	the device attribute struct
  @buf:	a pointer to the input buffer
  @len:	length of the input buffer
  This routine is for changing the IR protocol type.
  It is triggered by writing to sysclassrcrc?wakeup_protocols.
  Returns @len on success or a negative error code.
  dev->lock is taken to guard against races between
  store_wakeup_protocols and show_wakeup_protocols.
  Static device attribute struct with the sysfs attributes for IR's
	 kfree(dev) will be called by the callback function
 Keyboard events 
 Pointermouse events 
 rc_open will be called here 
	
	  Default delay of 250ms is too short for some protocols, especially
	  since the timeout is currently set to 250ms. Increase it to 500ms,
	  to avoid wrong repetition of the keycodes. Note that this must be
	  set after the call to input_register_device().
	
	  As a repeat event on protocols like RC-5 and NEC take as long as
	  110114ms, using 33ms as a repeat period is not the right thing
	  to do.
	
	  once the input device is registered in rc_setup_rx_device,
	  userspace can open the input device and rc_open() will be called
	  as a result. This results in driver code being allowed to submit
	  keycodes with rc_keydown, so lirc must be registered first.
	
	  lirc device should be freed with dev->registered = false, so
	  that userspace polling will get notified.
  Initexit code for the module. Basically, createsremoves sysclassrc
 SPDX-License-Identifier: GPL-2.0-or-later
  Driver for Feature Integration Technology Inc. (aka Fintek) LPC CIR
  Copyright (C) 2011 Jarod Wilson <jarod@redhat.com>
  Special thanks to Fintek for providing hardware and spec sheets.
  This driver is based upon the nuvoton, ite and ene drivers for
  similar hardware.
 write val to config reg 
 read val from config reg 
 update config register bit without changing other bits 
 enter config mode 
 Enabling Config Mode explicitly requires writing 2x 
 exit config mode 
  When you want to address a specific logical device, write its logical
  device number to GCR_LOGICAL_DEV_NO
 write val to cir config register 
 read val from cir config register 
 dump current cir register contents 
 detect hardware features 
 Check if we're using config port 0x4e or 0x2e 
	
	  Newer reviews of this chipset uses port 8 instead of 5
 Select CIR logical device and enable 
 Write allocated CIR address and IRQ information to hardware 
 enable CIR interrupts 
 clear any and all stray interrupts 
 and finally, enable interrupts 
 Allow CIR PME's to wake system 
 Enable CIR PME's 
 Clear CIR PME status register 
 Save state 
 process ir data stored in driver buffer 
 copy data from hardware rx register into driver buffer 
	
	  We must read data from CIR_RX_DATA until the hardware IR buffer
	  is empty and clears the RX_TIMEOUT andor RX_RECEIVE flags in
	  the CIR_STATUS register
 interrupt service routine for incoming and outgoing CIR data 
	
	  Get IR Status register contents. Write 1 to ackclear
	 
	  bit: reg name    - description
	    3: TX_FINISH   - TX is finished
	    2: TX_UNDERRUN - TX underrun
	    1: RX_TIMEOUT  - RX data timeout
	    0: RX_RECEIVE  - RX data received
 ackclear all irq flags we've got 
 set IRQ enabled 
 enable the CIR logical device 
 clear all pending interrupts 
 enable interrupts 
 disable the CIR logical device 
 Allocate memory, probe hardware, and initialize everything 
 input device for IR remote (and tx) 
 validate pnp resources 
 Initialize CIR & CIR Wake Logical Devices 
 Initialize CIR & CIR Wake Config Registers 
 Set up the rc device 
 rx resolution is hardwired to 50us atm, 1, 25, 100 also possible 
 now claim resources 
 disable CIR 
 enable CIR Wake (for IR power-on) 
 free resources 
 disable all CIR interrupts 
 disable cir logical dev 
 make sure wake is enabled 
 open interrupt 
 Enable CIR logical device 
 CIR 
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (C) 2017 Sean Young <sean@mess.org>
 space
 SPDX-License-Identifier: GPL-2.0-only
 ir-rc6-decoder.c - A decoder for the RC6 IR protocol
  Copyright (C) 2010 by David Härdeman <david@hardeman.nu>
  This decoder currently supports:
  RC6-0-16	(standard toggle bit in header)
  RC6-6A-20	(no toggle bit)
  RC6-6A-24	(no toggle bit)
  RC6-6A-32	(MCE version with toggle bit in body)
 microseconds 
 not including toggle bit 
 Variable 8..128 
 for the header bits 
 for the header bits 
 for the body bits 
 RC6-6A-32 long customer code mask 
 MCE customer code 
 Zotac customer code 
 Kathrein RCU-676 customer code 
 Normally in <limits.h> 
  ir_rc6_decode() - Decode one RC6 pulse or space
  @dev:	the struct rc_dev descriptor of the device
  @ev:		the struct ir_raw_event descriptor of the pulsespace
  This function returns -EINVAL if the pulse violates the state machine
		 Note: larger margin on first pulse since each RC6_UNIT
		   is quite short and some hardware takes some time to
 Discard LSB's that won't fit in data->body 
  ir_rc6_encode() - Encode a scancode as a stream of raw events
  @protocol:	protocol to encode
  @scancode:	scancode to encode
  @events:	array of raw ir events to write into
  @max:	maximum size of @events
  Returns:	The number of events written.
 		-ENOBUFS if there isn't enough space in the array to fit the
 		encoding. In this case all @max events will have been written.
 		-EINVAL if the scancode is ambiguous or invalid.
 Modulate the header (Start Bit & Mode-0) 
 Modulate Trailer Bit 
 Modulate rest of the data 
 Modulate the header (Start Bit & Header-version 6 
 Modulate Trailer Bit 
 Modulate rest of the data 
  Driver for Nuvoton Technology Corporation w83667hgw83677hg-i CIR
  Copyright (C) 2010 Jarod Wilson <jarod@redhat.com>
  Copyright (C) 2009 Nuvoton PS Team
  Special thanks to Nuvoton for providing hardware, spec sheets and
  sample code upon which portions of this driver are based. Indirect
  thanks also to Maxim Levitsky, whose ene_ir driver this driver is
  modeled after.
  This program is free software; you can redistribute it andor
  modify it under the terms of the GNU General Public License as
  published by the Free Software Foundation; either version 2 of the
  License, or (at your option) any later version.
  This program is distributed in the hope that it will be useful, but
  WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  General Public License for more details.
 write val to config reg 
 read val from config reg 
 update config register bit without changing other bits 
 enter extended function mode 
 Enabling Extended Function Mode explicitly requires writing 2x 
 exit extended function mode 
  When you want to address a specific logical device, write its logical
  device number to CR_LOGICAL_DEV_SEL, then enabledisable by writing
  0x10x0 respectively to CR_LOGICAL_DEV_EN.
 select and enable logical device with setting EFM mode
 select and disable logical device with setting EFM mode
 write val to cir config register 
 read val from cir config register 
 write val to cir wake register 
 read val from cir wake config register 
 don't override io address if one is set already 
 hardcode the tolerance to 10% 
 enable writes to wake fifo 
 go to first element to be read 
 sequence must start with a pulse 
 dump current cir register contents 
 dump current cir wake register contents 
 detect hardware features 
 Check if we're wired for the alternate EFER setup 
 warn, but still let the driver load, if we don't know this chip 
 output pin selection: enable CIR, with WB sensor enabled 
 Select CIR logical device 
 Select ACPI logical device and anable it 
 Enable CIR Wake via PSOUT# (Pin60) 
 enable pme interrupt of cir wakeup event 
 Select CIR Wake logical device 
 clear out the hardware's cir rx fifo 
 clear out the hardware's cir wake rx fifo 
 clearing wake fifo works in learning mode only 
 clear out the hardware's cir tx fifo 
 enable RX Trigger Level Reach and Packet End interrupts 
 set sample limit count (PE interrupt raised when reached) 
 set fifo irq trigger levels 
 clear hardware rx and tx fifos 
	
	  Disable RX, set specific carrier on = low, off = high,
	  and sample period (currently 50us)
 clear any and all stray interrupts 
 Currently unused 
 rx carrier detect only works in learning mode, must be called wlock 
 Require mask to be set 
 Inspect the ir samples 
 Split too large values into several smaller ones 
 Skip last value for better comparison tolerance 
 Clamp values to BUF_LEN_MASK at most 
 dump contents of the last rx buffer we got from the hw rx fifo 
  Process raw data in rx driver buffer, store it in raw IR event kfifo,
  trigger decode when appropriate.
  We get IR data samples one byte at a time. If the msb is set, its a pulse,
  otherwise its a space. The lower 7 bits are the count of SAMPLE_PERIOD
  (default 50us) intervals for that pulsespace. A discrete signal is
  followed by a series of 0x7f packets, then either 0x7<something> or 0x80
  to signal more IR coming (repeats) or end of IR, respectively. We store
  sample data in the raw event kfifo until we see 0x7<something> (except f)
  or 0x80, at which time, we trigger a decode operation.
 copy data from hardware rx fifo into driver buffer 
 Get count of how many bytes to read from RX FIFO 
 Read fifocount bytes from CIR Sample RX FIFO register 
 interrupt service routine for incoming and outgoing CIR data 
	
	  Get IR Status register contents. Write 1 to ackclear
	 
	  bit: reg name      - description
	    7: CIR_IRSTS_RDR - RX Data Ready
	    6: CIR_IRSTS_RTR - RX FIFO Trigger Level Reach
	    5: CIR_IRSTS_PE  - Packet End
	    4: CIR_IRSTS_RFO - RX FIFO Overrun (RDR will also be set)
	    3: CIR_IRSTS_TE  - TX FIFO Empty
	    2: CIR_IRSTS_TTR - TX FIFO Trigger Level Reach
	    1: CIR_IRSTS_TFU - TX FIFO Underrun
	    0: CIR_IRSTS_GH  - Min Length Detected
	 At least NCT6779D creates a spurious interrupt when the
	  logical device is being disabled.
	 IRQ may be shared with CIR WAKE, therefore check for each
	  status bit whether the related interrupt source is enabled
 ackclear all irq flags we've got 
 enable the CIR logical device 
	
	  Enable TX and RX, specify carrier on = low, off = high, and set
	  sample period (currently 50us)
 clear all pending interrupts 
 enable interrupts 
 disable CIR interrupts 
 clear any and all pending interrupts 
 clear all function enable flags 
 clear hardware rx and tx fifos 
 disable the CIR logical device 
 Allocate memory, probe hardware, and initialize everything 
 input device for IR remote 
 activate pnp device 
 validate pnp resources 
 Initialize CIR & CIR Wake Logical Devices 
	
	  Initialize CIR & CIR Wake Config Registers
	  and enable logical devices
 Set up the rc device 
 rx resolution is hardwired to 50us atm, 1, 25, 100 also possible 
 now claim resources 
 enable CIR Wake (for IR power-on) 
 make sure wake is enabled 
 CIR 
 CIR for new chip's pnp id
 SPDX-License-Identifier: GPL-2.0-or-later
  ImgTec IR Decoder setup for Sony (SIRC) protocol.
  Copyright 2012-2014 Imagination Technologies Ltd.
 Convert Sony data to a scancode 
 first 7 bits 
 next 5 bits 
 first 7 bits 
 next 8 bits 
 first 7 bits 
 next 5 bits 
 next 8 bits 
 Convert NEC scancode to NEC data filter 
	
	  If only one bit is set, we were requested to do an exact
	  protocol. This should be the case for wakeup filters; for
	  normal filters, guess the protocol from the scancode.
 can't encode subdev and higher device bits 
		
		  The hardware mask cannot distinguish high device bits and low
		  extended bits, so logically AND those bits of the masks
		  together.
 ensure there aren't any bits straying between fields 
 write the hardware filter 
  Sony SIRC decoder
  See also http:www.sbprojects.comknowledgeirsirc.php
           http:picprojects.org.ukprojectssircsonysirc.pdf
 main timings 
 600 us 
 leader symbol 
 2.4 ms  },
 600 us  },
 0 symbol 
 600 us  },
 600 us  },
 1 symbol 
 1.2 ms  },
 600 us  },
 free time 
 6 ms 
 scancode logic 
 SPDX-License-Identifier: GPL-2.0-or-later
  ImgTec IR Decoder setup for JVC protocol.
  Copyright 2012-2014 Imagination Technologies Ltd.
 Convert JVC data to a scancode 
 Convert JVC scancode to JVC data filter 
  JVC decoder
  See also http:www.sbprojects.comknowledgeirjvc.php
           http:support.jvc.comconsumersupportdocumentsRemoteCodes.pdf
 main timings 
 527.5 us 
 leader symbol 
 8.44 ms  },
 4.22 ms  },
 0 symbol 
 527.5 us +-60 us  },
 527.5 us  },
 1 symbol 
 527.5 us +-60 us  },
 1.5825 ms +-40 us  },
 free time 
 5.275 ms 
 scancode logic 
 SPDX-License-Identifier: GPL-2.0-or-later
  ImgTec IR Hardware Decoder found in PowerDown Controller.
  Copyright 2010-2014 Imagination Technologies Ltd.
  This ties into the input subsystem using the RC-core. Protocol support is
  provided in separate modules which provide the parameters and scancode
  translation functions to set up the hardware decoder and interpret the
  resulting input.
 Decoders lock (only modified to preprocess them) 
 enable filtering 
 enable waking 
 code type quirks 
 Decode is broken 
 Bit length needs increment 
  The decoder generates rapid interrupts without actually having
  received any new data after an incomplete IR code is decoded.
 functions for preprocessing timings, ensuring max is set 
 multiply by unit and convert to microseconds 
 round up 
 default s10 and s11 to s00 and s01 if no leader 
 multiply by unit and convert to microseconds (round up) 
 functions for filling empty fields with defaults 
 functions for converting timings to register values 
  img_ir_control() - Convert control struct to control register value.
  @control:	Control data
  Returns:	The control register value equivalent of @control.
  img_ir_timing_range_convert() - Convert microsecond range.
  @out:	Output timing range in clock cycles with a shift.
  @in:		Input timing range in microseconds.
  @tolerance:	Tolerance as a fraction of 128 (roughly percent).
  @clock_hz:	IR clock rate in Hz.
  @shift:	Shift of output units.
  Converts min and max from microseconds to IR clock cycles, applies a
  tolerance, and shifts for the register, rounding in the right direction.
  Note that in and out can safely be the same object.
 add a tolerance 
 convert from microseconds into clock cycles 
 round up 
 apply shift and copy to output 
 round up 
  img_ir_symbol_timing() - Convert symbol timing struct to register value.
  @timing:	Symbol timing data
  @tolerance:	Timing tolerance where 0-128 represents 0-100%
  @clock_hz:	Frequency of source clock in Hz
  @pd_shift:	Shift to apply to symbol period
  @w_shift:	Shift to apply to symbol width
  Returns:	Symbol timing register value based on arguments.
 we calculate period in hw_period, then convert in place 
 construct register value 
  img_ir_free_timing() - Convert free time timing struct to register value.
  @timing:	Free symbol timing data
  @clock_hz:	Source clock frequency in Hz
  Returns:	Free symbol timing register value.
 minlen is only 5 bits, and round minlen to multiple of 2 
 maxlen has maximum value of 48, and round maxlen to multiple of 2 
 convert and shift ft_min, rounding upwards 
 construct register value 
  img_ir_free_timing_dynamic() - Update free time register value.
  @st_ft:	Static free time register value from img_ir_free_timing.
  @filter:	Current filter which may additionally restrict minmax len.
  Returns:	Updated free time register value based on the current filter.
 round minlen, maxlen to multiple of 2 
 extract minmax len from register 
 if the new values are more restrictive, update the register value 
  img_ir_timings_convert() - Convert timings to register values
  @regs:	Output timing register values
  @timings:	Input timing data
  @tolerance:	Timing tolerance where 0-128 represents 0-100%
  @clock_hz:	Source clock frequency in Hz
 leader symbol timings are divided by 16 
 other symbol timings, pd fields only are divided by 2 
  img_ir_decoder_preprocess() - Preprocess timings in decoder.
  @decoder:	Decoder to be preprocessed.
  Ensures that the symbol timing ranges are valid with respect to ordering, and
  does some fixed conversion on them.
 default tolerance 
 percent 
 and convert tolerance to fraction out of 128 
 fill in implicit fields 
 do the same for repeat timings if applicable 
  img_ir_decoder_convert() - Generate internal timings in decoder.
  @decoder:	Decoder to be converted to internal timings.
  @reg_timings: Timing register values.
  @clock_hz:	IR clock rate in Hz.
  Fills out the repeat timings and timing register values for a specific clock
  rate.
 calculate control value 
 fill in implicit fields and calculate register values 
 do the same for repeat timings if applicable 
  img_ir_write_timings() - Write timings to the hardware now
  @priv:	IR private data
  @regs:	Timing register values to write
  @type:	RC filter type (RC_FILTER_)
  Write timing register values @regs to the hardware, taking into account the
  current filter which may impose restrictions on the length of the expected
  data.
 filter may be more restrictive to minlen, maxlen 
 write to registers 
 caller must have lock 
 Only use the match interrupt 
 Only use the valid interrupt 
 clear any interrupts we're enabling so we don't handle old ones 
 caller must have lock 
 Enable wake, and copy filter for later 
 Disable wake 
 Callback for setting scancode filter 
 filtering can always be disabled 
 current decoder must support scancode filtering 
 convert scancode filter to raw filter 
 guess scancode from protocol 
 for wakeup user provided exact protocol variant 
 apply raw filters 
  img_ir_set_decoder() - Set the current decoder.
  @priv:	IR private data.
  @decoder:	Decoder to use with immediate effect.
  @proto:	Protocol bitmap (or 0 to use decoder->type).
	
	  First record that the protocol is being stopped so that the end timer
	  isn't restarted while we're trying to stop it.
	
	  Release the lock to stop the end timer, since the end timer handler
	  acquires the lock and we don't want to deadlock waiting for it.
 switch off and disable interrupts 
 ack any data already detected 
 always read data to clear buffer if IR wakes the device 
 switch back to normal mode 
 clear the wakeup scancode filter 
 clear raw filters 
 clear the enabled protocols 
 switch decoder 
 set the enabled protocols 
 write the new timings 
 set up and enable 
  img_ir_decoder_compatible() - Find whether a decoder will work with a device.
  @priv:	IR private data.
  @dec:	Decoder to check.
  Returns:	true if @dec is compatible with the device @priv refers to.
 don't accept decoders using code types which aren't supported 
  img_ir_allowed_protos() - Get allowed protocols from global decoder list.
  @priv:	IR private data.
  Returns:	Mask of protocols supported by the device @priv refers to.
 Callback for changing protocol using sysfs 
 disable all protocols 
	
	  Only allow matching wakeup protocols for now, and only if filtering
	  is supported.
 Changes ir-core protocol device attribute 
 Set up IR decoders 
  img_ir_enable_wake() - Switch to wake mode.
  @priv:	IR private data.
  Returns:	non-zero if the IR can wake the system.
 interrupt only on a match 
  img_ir_disable_wake() - Switch out of wake mode.
  @priv:	IR private data
  Returns:	1 if the hardware should be allowed to wake from a sleep state.
 		0 otherwise.
 restore normal filtering 
 CONFIG_PM_SLEEP 
 lock must be held 
 switch to repeat timings 
 lock must be held 
 switch to normal timings 
 lock must be held 
 we mustn't update the end timer while trying to stop it 
 update timer, but allowing for 18th tolerance 
 timer function to end waiting for repeat. 
  Timer function to re-enable the current protocol after it had been
  cleared when invalid interrupts were generated due to a quirk in the
  img-ir decoder.
	
	  Don't overwrite enabled validmatch IRQs if they have already been
	  changed by e.g. a filter change.
 enable 
 refresh current timings 
 CONFIG_COMMON_CLK 
 called with priv->lock held 
 use the current decoder 
		
		  The below functionality is added as a work around to stop
		  multiple Interrupts generated when an incomplete IR code is
		  received by the decoder.
		  The decoder generates rapid interrupts without actually
		  having received any new data. After a single interrupt it's
		  expected to clear up, but instead multiple interrupts are
		  rapidly generated. only way to get out of this loop is to
		  reset the control register after a short delay.
 Timer activated to re-enable the protocol. 
 some versions report wrong length for certain code types 
 Use the first available decoder (or disable stuff if NULL) 
  img_ir_probe_hw_caps() - Probe capabilities of the hardware.
  @priv:	IR private data.
	
	  When a version of the block becomes available without these quirks,
	  they'll have to depend on the core revision.
 Ensure hardware decoders have been preprocessed 
 Probe hardware capabilities 
 Set up the end timer 
 Register a clock notifier 
 Allocate hardware decoder 
 Register hardware decoder 
	
	  Set this after rc_register_device as no protocols have been
	  registered yet.
 CONFIG_PM_SLEEP 
 SPDX-License-Identifier: GPL-2.0-or-later
  ImgTec IR Decoder setup for NEC protocol.
  Copyright 2010-2014 Imagination Technologies Ltd.
 Convert NEC data to a scancode 
 a repeat code has no data 
 raw encoding: ddDDaaAA 
 32-bit NEC (used by Apple and TiVo remotes) 
 scan encoding: as transmitted, MSBit = first received bit 
 Extended NEC 
 scan encoding: AAaaDD 
 Normal NEC 
 scan encoding: AADD 
 Convert NEC scancode to NEC data filter 
	
	  If only one bit is set, we were requested to do an exact
	  protocol. This should be the case for wakeup filters; for
	  normal filters, guess the protocol from the scancode.
 32-bit NEC (used by Apple and TiVo remotes) 
 scan encoding: as transmitted, MSBit = first received bit 
 Extended NEC 
 scan encoding AAaaDD 
 Normal NEC 
 scan encoding: AADD 
 raw encoding: ddDDaaAA 
  NEC decoder
  See also http:www.sbprojects.comknowledgeirnec.php
         http:wiki.altium.comdisplayADOHNEC+Infrared+Transmission+Protocol
 main timings 
 562.5 us 
 leader symbol 
 9ms  },
 4.5ms  },
 0 symbol 
 562.5 us  },
 562.5 us  },
 1 symbol 
 562.5 us  },
 1687.5 us  },
 free time 
 5.625 ms 
 repeat codes 
 108 ms 
 leader symbol 
 2.25 ms  },
 free time 
 repeat code has no data 
 scancode logic 
 SPDX-License-Identifier: GPL-2.0-or-later
  ImgTec IR Decoder setup for Philips RC-6 protocol.
  Copyright 2012-2014 Imagination Technologies Ltd.
 Convert RC6 data to a scancode 
	
	  Due to a side effect of the decoder handling the double length
	  Trailer bit, the header information is a bit scrambled, and the
	  raw data is shifted incorrectly.
	  This workaround effectively recovers the header bits.
	 
	  The Header field should look like this:
	 
	  StartBit ModeBit2 ModeBit1 ModeBit0 TrailerBit
	 
	  But what we get is:
	 
	  ModeBit2 ModeBit1 ModeBit0 TrailerBit1 TrailerBit2
	 
	  The start bit is not important to recover the scancode.
	
	  Due to the above explained irregularity the trailer bits cannot
	  have the same value.
 Only mode 0 supported for now 
 Convert RC6 scancode to RC6 data filter 
 Not supported by the hw. 
  RC-6 decoder
  see http:www.sbprojects.comknowledgeirrc6.php
 main timings 
	
	  Due to a quirk in the img-ir decoder, default header values do
	  not work, the values described below were extracted from
	  successful RTL test cases.
 leader symbol 
 0 symbol 
 01 symbol 
 free time 
 2.666 ms 
 scancode logic 
 SPDX-License-Identifier: GPL-2.0-or-later
  ImgTec IR Decoder found in PowerDown Controller.
  Copyright 2010-2014 Imagination Technologies Ltd.
  This contains core img-ir code for setting up the driver. The two interfaces
  (raw and hardware decode) are handled separately.
 we have to clear irqs before reading 
 don't handle valid data irqs if we're only interested in matches 
 hand off edge interrupts to raw decode handler 
 hand off hardware match interrupts to hardware decode handler 
 start off with interrupts disabled 
 Get resources from platform device 
 Private driver data 
 Ioremap the registers 
 Get core clock 
 Get sys clock 
	
	  Enabling the system clock before the register interface is
	  accessed. ISR shouldn't get called with Sys Clock disabled,
	  hence exiting probe with an error.
 Set up raw & hw decoder 
 Get the IRQ 
 SPDX-License-Identifier: GPL-2.0-or-later
  ImgTec IR Decoder setup for Sharp protocol.
  Copyright 2012-2014 Imagination Technologies Ltd.
 Convert Sharp data to a scancode 
 validate data 
 probably the second half of the message 
 Convert Sharp scancode to Sharp data filter 
 if filtering commands, we can only match the first part 
  Sharp decoder
  See also http:www.sbprojects.comknowledgeirsharp.php
 main timings 
 20% 
 0 symbol 
 320 us  },
 1 ms period  },
 1 symbol 
 320 us  },
 2 ms period  },
 free time 
 5 ms 
 scancode logic 
 SPDX-License-Identifier: GPL-2.0-or-later
  ImgTec IR Decoder setup for Sanyo protocol.
  Copyright 2012-2014 Imagination Technologies Ltd.
  From ir-sanyo-decoder.c:
  This protocol uses the NEC protocol timings. However, data is formatted as:
 	13 bits Custom Code
 	13 bits NOT(Custom Code)
 	8 bits Key data
 	8 bits NOT(Key data)
  According with LIRC, this protocol is used on Sanyo, Aiwa and Chinon
  Information for this protocol is available at the Sanyo LC7461 datasheet.
 Convert Sanyo data to a scancode 
 a repeat code has no data 
 Validate data 
 Validate address 
 Normal Sanyo 
 Convert Sanyo scancode to Sanyo data filter 
 Sanyo decoder 
 main timings 
 562.5 us 
 leader symbol 
 9ms  },
 4.5ms  },
 0 symbol 
 562.5 us  },
 562.5 us  },
 1 symbol 
 562.5 us  },
 1687.5 us  },
 free time 
 5.625 ms 
 repeat codes 
 108 ms 
 leader symbol 
 2.25 ms  },
 free time 
 repeat code has no data 
 scancode logic 
 SPDX-License-Identifier: GPL-2.0-or-later
  ImgTec IR Raw Decoder found in PowerDown Controller.
  Copyright 2010-2014 Imagination Technologies Ltd.
  This ties into the input subsystem using the RC-core in raw mode. Raw IR
  signal edges are reported and decoded by generic software decoders.
 ms between echos 
 must be called with priv->lock held 
 find whether both rise and fall was detected 
	
	  If so, we need to see if the level has actually changed.
	  If it's just noise that we didn't have time to process,
	  there's no point reporting it.
 report the edge to the IR raw decoders 
 low 
 high 
 called with priv->lock held 
 check not removing 
 start  push back the echo timer 
  Echo timer callback function.
  The raw decoders expect to get a final sample even if there are no edges, in
  order to be assured of the final space. If there are no edges for a certain
  time we use this timer to emit a final sample to satisfy them.
 check not removing 
		
		  It's safe to pass irq_status=0 since it's only used to check
		  for double edges.
 clear and enable edge interrupts 
 Set up the echo timer 
 Allocate raw decoder 
 Register raw decoder 
 switch off and disable raw (edge) interrupts 
 SPDX-License-Identifier: GPL-2.0-or-later
  ImgTec IR Decoder setup for Philips RC-5 protocol.
  Copyright 2012-2014 Imagination Technologies Ltd.
 Convert RC5 data to a scancode 
 Quirk in the decoder shifts everything by 2 to the left. 
	
	  12th bit is used to extend the command in extended RC5 and has
	  no effect on standard RC5.
 Convert RC5 scancode to RC5 data filter 
 Not supported by the hw. 
  RC-5 decoder
  see http:www.sbprojects.comknowledgeirrc5.php
 main timings 
 136k32=888.888microseconds 
 10 symbol 
 11 symbol 
 free time 
 scancode logic 
 SPDX-License-Identifier: GPL-2.0-or-later
  A-Link DTU(m) remote controller keytable
  Copyright (C) 2010 Antti Palosaari <crope@iki.fi>
 A-Link DTU(m) slim remote, 6 rows, 3 columns. 
 symbol: PIP 
 JUMP 
 SPDX-License-Identifier: GPL-2.0+
 pinnacle-grey.h - Keytable for pinnacle_grey Remote Controller
 keymap imported from ir-keymaps.c
 Copyright (c) 2010 by Mauro Carvalho Chehab
 Legacy IR type 
 SPDX-License-Identifier: GPL-2.0+
 tevii-nec.h - Keytable for tevii_nec Remote Controller
 keymap imported from ir-keymaps.c
 Copyright (c) 2010 by Mauro Carvalho Chehab
 Legacy IR type 
 SPDX-License-Identifier: GPL-2.0+
 behold-columbus.h - Keytable for behold_columbus Remote Controller
 keymap imported from ir-keymaps.c
 Copyright (c) 2010 by Mauro Carvalho Chehab
 Beholder Intl. Ltd. 2008
  Dmitry Belimov d.belimov@google.com
  Keytable is used by BeholdTV Columbus
  The "ascii-art picture" below (in comments, first row
  is the keycode in hex, and subsequent row(s) shows
  the button labels (several variants when appropriate)
  helps to decide which keycodes to assign to the buttons.
	  0x13   0x11   0x1C   0x12  
	   Mute  Source  TVFM  Power 
 KEY_TVKEY_RADIO	
	  0x01    0x02    0x03  0x0D    
	    1       2       3   Stereo   
	 				  
	   0x04    0x05    0x06  0x19    
	    4       5       6   Snapshot 
	 				  
	   0x07    0x08    0x09  0x10    
	    7       8       9    Zoom	  
 Setup key 
 Snapshot key 
	  0x0A    0x00    0x0B       0x0C   
	  RECALL    0    ChannelUp  VolumeUp 
	   0x1B      0x1D      0x15        0x18     
	  Timeshift  Record  ChannelDown  VolumeDown 
	   0x0E   0x1E     0x0F     0x1A  
	    Stop   Pause  Previous   Next  
 Legacy IR type 
 SPDX-License-Identifier: GPL-2.0+
 genius-tvgo-a11mce.h - Keytable for genius_tvgo_a11mce Remote Controller
 keymap imported from ir-keymaps.c
 Copyright (c) 2010 by Mauro Carvalho Chehab
  Remote control for the Genius TVGO A11MCE
  Adrian Pardini <pardo.bsso@gmail.com>
 Keys 0 to 9 
 recording 
 mute 
 recall 
 channel  program + 
 channel  program - 
 also labeled as Pause 
 full screen and Stop
 AV Source or Rewind
 --- 
 small arrows above numbers 
 also Fast Forward 
 also Rewind 
	 these are in a rather non standard layout and have
 Video Setting 
 Video Default 
 Snapshot 
 Hide Panel 
 Four buttons without label 
 Legacy IR type 
 SPDX-License-Identifier: GPL-2.0-or-later
  Anysee remote controller keytable
  Copyright (C) 2010 Antti Palosaari <crope@iki.fi>
 [red power button] 
 [] MODE 
 [symbol counterclockwise arrow] 
 [>>|] 
 MENU 
 [EPG] 
 EXIT 
 [symbol TVradio] 
 [i] 
 [|<<] 
 FAV. 
 Subtitle 
 [symbol camera] 
 [symbol Second Audio Program] 
 Sleep 
 16:9  4:3 
 SIZE 
 [F1] 
 [F2] 
 symbol mute 
 TEXT 
 SPDX-License-Identifier: GPL-2.0+
 rc-dvb0700-big.c - Keytable for devices in dvb0700
 Copyright (c) 2010 by Mauro Carvalho Chehab
 TODO: This table is a real mess, as it merges RC codes from several
 devices into a big table. It also has both RC-5 and NEC codes inside.
 It should be broken into small tables, and the protocols should properly
 be identificated.
 The table were imported from dib0700_devices.c.
 Key codes for the tiny Pinnacle remote
 Pinnacle logo 
 'Square' key 
 'T' key 
 '?' key 
 Key codes for the Terratec Cinergy DT XS Diversity, similar to cinergyT2.c 
 DVD Menu 
 Teletext 
 Music 
 Pic 
 Key codes for the Haupauge WinTV Nova-TD, copied from nova-t-usb2.c (Nova-T USB2) 
 # 
 Skip backwards 
 Key codes for the Leadtek Winfast DTV Dongle 
 PREVIEW 
 full screen toggle
 frequency 
 show channel number 
 recall 
 PIP button
 SNAPSHOT 
 TIMESHIFT 
 Key codes for Nova-TD "credit card" remote control. 
 SPDX-License-Identifier: GPL-2.0-or-later
  MSI DIGIVOX mini III remote controller keytable
  Copyright (C) 2013 Antti Palosaari <crope@iki.fi>
  Derived from MSI DIGIVOX mini III remote (rc-msi-digivox-iii.c)
  Differences between these remotes are:
  1) scancode 0x61d601 is mapped to different button:
     MSI DIGIVOX mini III   "Source" = KEY_VIDEO
     Reddo                     "EPG" = KEY_EPG
  2) Reddo remote has less buttons. Missing buttons are: colored buttons,
     navigation buttons and main power button.
 EPG 
 CH- 
 CH+ 
 Zoom 
 Vol+ 
 [back up arrow] 
 [enter arrow] 
 Vol- 
 Rec 
 Stop 
 Play 
 Mute 
 [red power button] 
 SPDX-License-Identifier: GPL-2.0-or-later
 rc-technisat-ts35.c - Keytable for TechniSat TS35 remote
  Copyright (c) 2013 by Jan Klötzke <jan@kloetzke.net>
 SPDX-License-Identifier: GPL-2.0+
 Keytable for Xbox 360 Universal Media remote
 Copyright (c) 2021 Bastien Nocera <hadess@hadess.net>
  Manual for remote available at:
  http:download.microsoft.comdownloadbcebce76f3f-db51-4c98-b79d-b3d21e90ccc1universalmediaremote_na_0609.pdf
 "Display" 
 "DVD Menu" 
 "Title" 
 TV key doesn't light the IR LED 
 "100" 
 SPDX-License-Identifier: GPL-2.0+
 adstech-dvb-t-pci.h - Keytable for adstech_dvb_t_pci Remote Controller
 keymap imported from ir-keymaps.c
 Copyright (c) 2010 by Mauro Carvalho Chehab
 ADS Tech Instant TV DVB-T PCI Remote 
 Keys 0 to 9 
 Guide 
 Enter 
 Live 
 1 
 2 
 3 
 Photo 
 Music 
 Legacy IR type 
 SPDX-License-Identifier: GPL-2.0+
 avermedia-dvbt.h - Keytable for avermedia_dvbt Remote Controller
 keymap imported from ir-keymaps.c
 Copyright (c) 2010 by Mauro Carvalho Chehab
 Matt Jesson <dvb@jesson.eclipse.co.uk 
 '0'  'enter' 
 '1' 
 '2'  'up arrow' 
 '3' 
 '4'  'left arrow' 
 '5' 
 '6'  'right arrow' 
 '7' 
 '8'  'down arrow' 
 '9' 
 'source' 
 'teletext' 
 'power' 
 'audio' 
 'full screen' 
 'display' 
 'loop' 
 'preview' 
 'backward <<' 
 'forward >>' 
 'capture' 
 'mute' 
 'record' 
 'pause' 
 'stop' 
 'play' 
 'red' 
 'blue'  'cancel' 
 'yellow'  'ok' 
 'green' 
 'channel -' 
 'channel +' 
 'volume -' 
 'volume +' 
 Legacy IR type 
 SPDX-License-Identifier: GPL-2.0+
 fusionhdtv-mce.h - Keytable for fusionhdtv_mce Remote Controller
 keymap imported from ir-keymaps.c
 Copyright (c) 2010 by Mauro Carvalho Chehab
 DViCO FUSION HDTV MCE remote 
 Labeled DTV on remote 
 Labeled CPF on remote 
 TV OnOff button on remote 
 Labeled Guide on remote 
 Labeled MORE on remote 
 Labeled DVDMENU on remote 
 Labeled ALT-TAB on remote 
 Labeled |<< REPLAY on remote 
 Labeled >>| SKIP on remote 
	{ 0x42, KEY_ENTER },		 Labeled START with a green
 4:3 16:9 select 
 Legacy IR type 
 SPDX-License-Identifier: GPL-2.0+
 Copyright (C) 2019 Christian Hewitt <christianshewitt@gmail.com>
 Keytable for the HardKernel ODROID remote control
 SPDX-License-Identifier: GPL-2.0-only
  keymap imported from cxusb.c
  Copyright (C) 2016 Sean Young
 Replay 
 Skip 
 WindowsStart 
 Live 
 Aspect 
 SPDX-License-Identifier: GPL-2.0+
 manli.h - Keytable for manli Remote Controller
 keymap imported from ir-keymaps.c
 Copyright (c) 2010 by Mauro Carvalho Chehab
 Michael Tokarev <mjt@tls.msk.ru>
   keytable is used by MANLI MTV00[0x0c] and BeholdTV 40[13] at
   least, and probably other cards too.
   The "ascii-art picture" below (in comments, first row
   is the keycode in hex, and subsequent row(s) shows
   the button labels (several variants when appropriate)
   helps to decide which keycodes to assign to the buttons.
	  0x1c            0x12  
	  FUNCTION         POWER 
	    FM              (|)  
XXX
	  0x01    0x02    0x03  
	    1       2       3    
	                         
	   0x04    0x05    0x06  
	    4       5       6    
	                         
	   0x07    0x08    0x09  
	    7       8       9    
	  0x0a    0x00    0x17  
	  RECALL    0      +100  
	                   PLUS  
XXX KEY_REWIND? 
XXX
	  0x14            0x10  
	   MENU            INFO  
	          0x0b          
	            Up           
	                         
	   0x18    0x16    0x0c  
	   Left     Ok     Right 
	                         
	          0x015          
	          Down           
XXX KEY_SELECT? KEY_ENTER? 
	  0x11            0x0d  
	   TVAV           MODE  
	   SOURCE         STEREO 
XXX
XXX there's no KEY_STEREO	
	  0x0f    0x1b    0x1a  
	   AUDIO   Vol+    Chan+ 
	         TIMESHIFT???    
	                         
	   0x0e    0x1f    0x1e  
	   SLEEP   Vol-    Chan- 
	         0x13     0x19  
	          MUTE   SNAPSHOT
 0x1d unused ? 
 Legacy IR type 
 SPDX-License-Identifier: GPL-2.0+
 nec-terratec-cinergy-xs.h - Keytable for nec_terratec_cinergy_xs Remote Controller
 keymap imported from ir-keymaps.c
 Copyright (c) 2010 by Mauro Carvalho Chehab
 Terratec Cinergy Hybrid T USB XS FM
   Mauro Carvalho Chehab
 Terratec Grey IR, with most keys in orange 
 DVD menu 
 Teletext 
 AV 
 A.B 
 Music 
 PIC 
 Terratec Black IR, with most keys in black 
 TXT 
 Refresh 
 SPDX-License-Identifier: GPL-2.0+
 asus-pc39.h - Keytable for asus_pc39 Remote Controller
 keymap imported from ir-keymaps.c
 Copyright (c) 2010 by Mauro Carvalho Chehab
  Marc Fargas <telenieko@telenieko.com>
  this is the remote control that comes with the asus p7131
  which has a label saying is "Model PC-39"
 Keys 0 to 9 
 radio 
 dvdmenu 
 video 
 music 
 tv 
 back 
 channel  program + 
 channel  program - 
 enter 
 playpause 
 rew 
 forward 
 backward << 
 forward >> 
 recording 
 the button that reads "close" 
 full screen 
 recall 
 home 
 picture 
 mute 
 dvd 
 SPDX-License-Identifier: GPL-2.0-or-later
 rc5-imon-pad.c - Keytable for SoundGraph iMON PAD and Antec Veris
  RM-200 Remote Control
  Copyright (c) 2010 by Jarod Wilson <jarod@redhat.com>
  standard imon remote key table, which isn't really entirely
  "standard", as different receivers decode the same key on the
  same remote to different hex codes, and the silkscreened names
  vary a bit between the SoundGraph and Antec remotes... ugh.
 keys sorted mostly by frequency of use to optimize lookups 
 SelectSpace 
 SelectSpace 
 the Menu key between DVD and Subtitle on the RM-200... 
 Thumbnail 
 FullScreen 
 TaskSwitcher 
 Timer 
 the one next to play 
 eject (by TaskSw) 
 Left Menu 
 Left Menu
 RightMenu 
 RightMenu 
 Go or MultiMon 
 AppLauncher 
 SPDX-License-Identifier: GPL-2.0+
 avermedia-a16d.h - Keytable for avermedia_a16d Remote Controller
 keymap imported from ir-keymaps.c
 Copyright (c) 2010 by Mauro Carvalho Chehab
 Legacy IR type 
 SPDX-License-Identifier: GPL-2.0+
 kworld-plus-tv-analog.h - Keytable for kworld_plus_tv_analog Remote Controller
 keymap imported from ir-keymaps.c
 Copyright (c) 2010 by Mauro Carvalho Chehab
 Kworld Plus TV Analog Lite PCI IR
   Mauro Carvalho Chehab <mchehab@kernel.org>
 Kworld key 
 -> ) 
 Two keys have the same code: 3 and left 
 Two keys have the same code: 4 and right 
	 Couldn't map key leftkey right since those
	   conflict with '3' and '4' scancodes
	   I dunno what the original driver does
	 The lower part of the IR
	   There are several duplicated keycodes there.
	   Most of them conflict with digits.
	   Add mappings just to the unused scancodes.
	   Somehow, the original driver has a way to know,
	   but this doesn't seem to be on some GPIO.
	   Also, it is not related to the time between keyup
	   and keydown.
 Timeshift 
 (()) 
 snapshot 
 B 
 C 
 Legacy IR type 
 SPDX-License-Identifier: GPL-2.0-or-later
 Keytable for the CEC remote control
  This keymap is unusual in that it can't be built as a module,
  instead it is registered directly in rc-main.c if CONFIG_MEDIA_CEC_RC
  is set. This is because it can be called from drm_dp_cec_set_edid() via
  cec_register_adapter() in an asynchronous context, and it is not
  allowed to use request_module() to load rc-cec.ko in that case.
  Since this keymap is only used if CONFIG_MEDIA_CEC_RC is set, we
  just compile this keymap into the rc-core module and never as a
  separate module.
  Copyright (c) 2015 by Kamil Debski
  CEC Spec "High-Definition Multimedia Interface Specification" can be obtained
  here: http:xtreamerdev.googlecode.comfilesCEC_Specs.pdf
  The list of control codes is listed in Table 27: User Control Codes p. 95
 CEC Spec: Device Root Menu - see Note 2 
	
	  Note 2: This is the initial display that a device shows. It is
	  device-dependent and can be, for example, a contents menu, setup
	  menu, favorite menu or other menu. The actual menu displayed
	  may also depend on the device's current state.
 CEC Spec: Contents Menu 
 CEC Spec: Favorite Menu 
 0x0e-0x0f: Reserved 
 0x12-0x1c: Reserved 
 CEC Spec: selecttoggle a Number Entry Mode 
 0x20-0x29: Keys 0 to 9 
 0x2d-0x2e: Reserved 
 CEC Spec: Next Favorite 
 CEC Spec: Previous Channel 
 CEC Spec: Sound Select 
 0x34: CEC Spec: Input Select 
 CEC Spec: Display Information 
 0x39-0x3f: Reserved 
 CEC Spec: Eject 
 CEC Spec: Stop-Record 
 CEC Spec: Pause-Record 
 0x4f: Reserved 
 CEC Spec: Video on Demand 
 CEC Spec: Timer 
	
	  The following codes are hard to implement at this moment, as they
	  carry an additional additional argument. Most likely changes to RC
	  framework are necessary.
	  For now they are interpreted by the CEC framework as non keycodes
	  and are passed as messages enabling user application to parse them.
 0x56: CEC Spec: Select Broadcast Type 
 0x57: CEC Spec: Select Sound presentation 
 CEC 2.0 and up 
 CEC 2.0 and up 
 CEC 2.0 and up 
 0x5b-0x5f: Reserved 
 CEC Spec: Play Function 
 CEC Spec: Pause-Play Function 
 Spec: Record Function 
 CEC Spec: Pause-Record Function 
 CEC Spec: Stop Function 
 CEC Spec: Mute Function 
 CEC Spec: Restore the volume 
	
	  The following codes are hard to implement at this moment, as they
	  carry an additional additional argument. Most likely changes to RC
	  framework are necessary.
	  For now they are interpreted by the CEC framework as non keycodes
	  and are passed as messages enabling user application to parse them.
 0x67: CEC Spec: Tune Function 
 0x68: CEC Spec: Seleect Media Function 
 0x69: CEC Spec: Select AV Input Function 
 0x6a: CEC Spec: Select Audio Input Function 
 CEC Spec: Power Toggle Function 
 CEC Spec: Power Off Function 
 CEC Spec: Power On Function 
 0x6e-0x70: Reserved 
 CEC Spec: F1 (Blue) 
 CEC Spec: F2 (Red) 
 CEC Spec: F3 (Green) 
 CEC Spec: F4 (Yellow) 
 CEC Spec: Data - see Note 3 
	
	  Note 3: This is used, for example, to enter or leave a digital TV
	  data broadcast application.
 0x77-0xff: Reserved 
 SPDX-License-Identifier: GPL-2.0-or-later
 keytable for Terratec Cinergy S2 HD Remote Controller
 >| 
 |< 
 >> 
 << 
 Back 
 Video-Menu 
 DVD-Menu 
 A<=>B 
 AV 
 Legacy IR type 
 SPDX-License-Identifier: GPL-2.0+
 pctv-sedna.h - Keytable for pctv_sedna Remote Controller
 keymap imported from ir-keymaps.c
 Copyright (c) 2010 by Mauro Carvalho Chehab
 Mapping for the 28 key remote control as seen at
   http:www.sednacomputer.comphotocardbus-tv.jpg
   Pavel Mihaylov <bin@bash.info>
 Recall 
 Stereo 
 Source 
 Snapshot 
 Time Shift 
 FM Radio 
 additional codes for Kozumi's remote 
 OSD 
 OK 
 Plus 
 Play 
 Legacy IR type 
 SPDX-License-Identifier: GPL-2.0-or-later
  SnapStream Firefly X10 RF remote keytable
  Copyright (C) 2011 Anssi Hannula <anssi.hannula@?ki.fi>
 Maximize 
 ent 
 firefly 
 Music 
 Photos 
 Mouse 
 SPDX-License-Identifier: GPL-2.0+
 encore-enltv2.h - Keytable for encore_enltv2 Remote Controller
 keymap imported from ir-keymaps.c
 Copyright (c) 2010 by Mauro Carvalho Chehab
 Encore ENLTV2-FM  - silver plastic - "Wand Media" written at the botton
 +100 
 Recall 
 Video Source 
 Stereo 
 Snapshot 
 Timeshift 
 PIP 
 Legacy IR type 
 SPDX-License-Identifier: GPL-2.0+
 evga-indtube.h - Keytable for evga_indtube Remote Controller
 keymap imported from ir-keymaps.c
 Copyright (c) 2010 by Mauro Carvalho Chehab
 EVGA inDtube
   Devin Heitmueller <devin.heitmueller@gmail.com>
 TV 
 PIP 
 Legacy IR type 
 SPDX-License-Identifier: GPL-2.0-or-later
 Keytable for Wideview WT-220U.
  Copyright (c) 2016 Jonathan McDowell <noodles@earth.li>
 key list for the tiny remote control (Yakumo, don't know about the others) 
 SPDX-License-Identifier: GPL-2.0+
 Copyright (C) 2021 Christian Hewitt <christianshewitt@gmail.com>
 Keytable for the Minix NEO remote control
 SPDX-License-Identifier: GPL-2.0+
 cinergy-1400.h - Keytable for cinergy_1400 Remote Controller
 keymap imported from ir-keymaps.c
 Copyright (c) 2010 by Mauro Carvalho Chehab
 Cinergy 1400 DVB-T 
 Legacy IR type 
 SPDX-License-Identifier: GPL-2.0-or-later
  TwinHan AzureWave AD-TU700(704J) remote controller keytable
  Copyright (C) 2010 Antti Palosaari <crope@iki.fi>
 Tab 
 Record List 
 Hibernate 
 AV 
 Cancel 
 Recall 
 Teletext 
 FF >> 
 Back 
 [red power button] 
 Favorite List 
 InfoEPG 
 FR << 
 Replay 
 Skip 
 Subtitle  CC 
 Zoom+ 
 Zoom- 
 PIP 
 Preview 
 LR 
 Clear 
 up arrow 
 Full Screen 
 left arrow 
 Enter  ok 
 SAP 
 down arrow 
 right arrow 
 Capture 
 SPDX-License-Identifier: GPL-2.0-or-later
  Digittrade DVB-T USB Stick remote controller keytable
  Copyright (C) 2010 Antti Palosaari <crope@iki.fi>
 Digittrade DVB-T USB Stick remote controller. 
 Imported from af9015.h.
 Digittrade DVB-T USB Stick 
 EPG 
 Vol Dn 
 TELETEXT 
 MUTE 
 POWER 
 FULLSCREEN 
 RECORD 
 SUBTITLE 
 STOP 
 RETURN 
 Ch Dn 
 CH Up 
 PAUSE 
 DUAL SOUND 
 PLAY 
 SNAPSHOT 
 Vol Up 
 TIMESHIFT 
 SPDX-License-Identifier: GPL-2.0-or-later
 ITE Generic remotes Version 1
  Copyright (C) 2012 Malcolm Priestley (tvboxspy@gmail.com)
 Type 1 
 Source 
 ShutDown 
 CH- 
 CH+ 
 Zoom 
 Vol+ 
 [back up arrow] 
 [enter arrow] 
 Vol- 
 Rec 
 Stop 
 Play 
 Mute 
 [red power button] 
 Type 2 - 20 buttons 
 Recall 
 Timeshift 
 2 x -+ Keys not marked 
 Volume defined as right hand
 SPDX-License-Identifier: GPL-2.0+
 norwood.h - Keytable for norwood Remote Controller
 keymap imported from ir-keymaps.c
 Copyright (c) 2010 by Mauro Carvalho Chehab
 Norwood Micro (non-Pro) TV Tuner
   By Peter Naulls <peter@chocky.org>
 Keys 0 to 9 
 Video Source        
 OpenClose software 
 2 Digit Select      
 Recall              
 Brightness increase 
 Brightness decrease 
 (not named >>>>>)   
 (not named <<<<<)   
 Mute                
 Volume up           
 Volume down         
 Channel up          
 Channel down        
 Record              
 Play                
 Pause               
 Stop                
 Forward              
 Rewind              
 Auto Scan           
 Capture Video       
 ShowHide Control   
 Full Screen         
 FM                  
 Computer power      
 Legacy IR type 
 SPDX-License-Identifier: GPL-2.0+
 avermedia-m135a.c - Keytable for Avermedia M135A Remote Controllers
 Copyright (c) 2010 by Mauro Carvalho Chehab
 Copyright (c) 2010 by Herton Ronaldo Krzesinski <herton@mandriva.com.br>
  Avermedia M135A with RM-JX and RM-K6 remote controls
  On Avermedia M135A with IR model RM-JX, the same codes exist on both
  Positivo (BR) and original IR, initial version and remote control codes
  added by Mauro Carvalho Chehab <mchehab@kernel.org>
  Positivo also ships Avermedia M135A with model RM-K6, extra control
  codes added by Herton Ronaldo Krzesinski <herton@mandriva.com.br>
 RM-JX 
 '.' 
 TVFM or SOURCE 
 -> or L 
 <- or R 
 Capturar Imagem or Snapshot 
 Amostra or 16 chan prev 
 Full Screen 
 Teletext 
 TV2 or PIP 
 RM-K6 
 TVFM 
 '.' 
 RefreshReload 
 Full Screen toggle 
 PIP 
 Snapshot 
 SPDX-License-Identifier: GPL-2.0+
 Keytable for Xbox DVD remote
 Copyright (c) 2018 by Benjamin Valentin <benpicco@googlemail.com>
 based on lircd.conf.xbox 
 SPDX-License-Identifier: GPL-2.0+
 cinergy.h - Keytable for cinergy Remote Controller
 keymap imported from ir-keymaps.c
 Copyright (c) 2010 by Mauro Carvalho Chehab
 app 
 zoomfullscreen 
 channel 
 channel- 
 AV 
 --- 
 audio 
 text 
 Legacy IR type 
 SPDX-License-Identifier: GPL-2.0+
 proteus-2309.h - Keytable for proteus_2309 Remote Controller
 keymap imported from ir-keymaps.c
 Copyright (c) 2010 by Mauro Carvalho Chehab
 Michal Majchrowicz <mmajchrowicz@gmail.com> 
 numeric 
 power       
 full screen 
 recall      
 mute        
 record      
 stop        
 off         
 channel -   
 channel +   
 volume -    
 volume +    
 Legacy IR type 
 SPDX-License-Identifier: GPL-2.0+
 ati-tv-wonder-hd-600.h - Keytable for ati_tv_wonder_hd_600 Remote Controller
 keymap imported from ir-keymaps.c
 Copyright (c) 2010 by Mauro Carvalho Chehab
 ATI TV Wonder HD 600 USB
   Devin Heitmueller <devin.heitmueller@gmail.com>
 Row 1 
 Row 2 
 Row 3 
 Row 4 
 Row 5 
 Row 6 
 Legacy IR type 
 SPDX-License-Identifier: GPL-2.0-or-later
 ITE Generic remotes Version 2
  Copyright (C) 2012 Malcolm Priestley (tvboxspy@gmail.com)
 Type 1 
 9005 remote 
 Power (RED POWER BUTTON)
 Source 
 Mute 
 Record 
 Channel+ 
 TimeShift 
 Volume- 
 FullScreen 
 Volume- 
 0 
 Channel- 
 Recall 
 1 
 2 
 3 
 4 
 5 
 6 
 7 
 8 
 9 
 Type 2 
 keys stereo, snapshot unassigned 
 Recall 
 SPDX-License-Identifier: GPL-2.0+
 purpletv.h - Keytable for purpletv Remote Controller
 keymap imported from ir-keymaps.c
 Copyright (c) 2010 by Mauro Carvalho Chehab
 Recall 
 100+ 
 Video source 
 Snapshot 
 MTS Select 
 Auto Scan 
 Pause 
 Time Shift 
 SURF CH 
 Forward ? 
 Backward ? 
 Legacy IR type 
 SPDX-License-Identifier: GPL-2.0+
 pixelview-new.h - Keytable for pixelview_new Remote Controller
 keymap imported from ir-keymaps.c
 Copyright (c) 2010 by Mauro Carvalho Chehab
   Mauro Carvalho Chehab <mchehab@kernel.org>
   present on PV MPEG 8000GT
 Timeshift 
 LOOP	
 Source 
 +100 
 SNAPSHOT 
 scan 
 << 
 o (red) 
 >> 
 square 
 > 
 || 
 Legacy IR type 
 SPDX-License-Identifier: GPL-2.0+
 tt-1500.h - Keytable for tt_1500 Remote Controller
 keymap imported from ir-keymaps.c
 Copyright (c) 2010 by Mauro Carvalho Chehab
 for the Technotrend 1500 bundled remotes (grey and black): 
 ? double-arrow key 
 ? TVRadio 
 these keys are only in the black remote 
 SPDX-License-Identifier: GPL-2.0+
 Copyright (C) 2019 Christian Hewitt <christianshewitt@gmail.com>
  Keytable for the Khadas VIMEDGE SBC remote control
 mouse
 SPDX-License-Identifier: GPL-2.0+
 dntv-live-dvb-t.h - Keytable for dntv_live_dvb_t Remote Controller
 keymap imported from ir-keymaps.c
 Copyright (c) 2010 by Mauro Carvalho Chehab
 DigitalNow DNTV Live DVB-T Remote 
 'go up a level?' 
 Keys 0 to 9 
 tvfm 
 scan 
 source 
 backward << 
 snap 
 stereo 
 reset 
 full screen 
 forward >> 
 preview 
 record 
 Legacy IR type 
 SPDX-License-Identifier: GPL-2.0+
 encore-enltv.h - Keytable for encore_enltv Remote Controller
 keymap imported from ir-keymaps.c
 Copyright (c) 2010 by Mauro Carvalho Chehab
 Encore ENLTV-FM  - black plastic, white front cover with white glowing buttons
	 Power button does nothing, neither in Windows app,
 music 
 picture 
 --- 
 recall 
 win start menu 
 exit 
 UP 
 DOWN 
 RIGHT 
 LEFT 
 OK 
 desktop 
 switch 
 fullscreen 
 time shift 
 source 
 playpause 
 camera icon 
 tv wall 
 DVD sound 
 DVD lang 
 DVD text 
 shutdown 
 stereo > main 
 stereo > sap 
 teletext 
 AP1 
 AP2 
 AP3 
 AP4 
 Legacy IR type 
 SPDX-License-Identifier: GPL-2.0+
 avermedia.h - Keytable for avermedia Remote Controller
 keymap imported from ir-keymaps.c
 Copyright (c) 2010 by Mauro Carvalho Chehab
 Alex Hermann <gaaf@gmx.net> 
 TVFM 
 CD 
 TELETEXT 
 POWER 
 VIDEO 
 AUDIO 
 FULL SCREEN 
 DISPLAY 
 LOOP	
 PREVIEW 
 AUTOSCAN 
 FREEZE 
 SNAPSHOT 
 MUTE 
 RECORD 
 PAUSE 
 STOP 
 PLAY 
 RED 
 GREEN 
 YELLOW 
 BLUE 
 VOLUME- 
 VOLUME+ 
 CHANNELPAGE- 
 CHANNELPAGE+ 
 Legacy IR type 
 SPDX-License-Identifier: GPL-2.0+
 tbs-nec.h - Keytable for tbs_nec Remote Controller
 keymap imported from ir-keymaps.c
 Copyright (c) 2010 by Mauro Carvalho Chehab
 power 
 mute 
 10+ 
 10- 
 ch+ 
 ch- 
 vol+ 
 vol- 
 rec 
 pause, yellow 
 ok 
 snapshot 
 blue 
 green 
 red 
 Legacy IR type 
 SPDX-License-Identifier: GPL-2.0-or-later
 rc-rc6-mce.c - Keytable for Windows Media Center RC-6 remotes for use
  with the Media Center Edition eHome Infrared Transceiver.
  Copyright (c) 2010 by Jarod Wilson <jarod@redhat.com>
  See http:mediacenterguides.combookexporthtml31 for details on
  key mappings.
 Formerly PC Power 
 Windows MCE button 
 LiveTV 
 Guide 
 Aspect 
 Visualization 
 Slide Show 
 My Music 
 RecordedTV 
 Print - HP OEM version of remote 
 CaptionTeletext 
 TV Power 
 Start media application (NEW) 
 SPDX-License-Identifier: GPL-2.0-or-later
  Total Media In Hand remote controller keytable
  Copyright (C) 2010 Antti Palosaari <crope@iki.fi>
 Uses NEC extended 0x02bd 
 yellow, [min  max] 
 TV  AV 
 TimeShift 
 right arrow 
 left arrow 
 up arrow 
 down arrow 
 [red] 
 OK 
 Snapshot 
 Esc 
 FF >> 
 FR << 
 [window + mouse pointer] 
 Shuffle 
 [red (I)] 
 SPDX-License-Identifier: GPL-2.0-or-later
 rc-su3000.h - Keytable for Geniatech HDStar Remote Controller
  Copyright (c) 2013 by Evgeny Plehov <Evgeny Plehov@ukr.net>
 right-bottom Red 
 --- 
 CH+ 
 CH+ 
 Brightness Up 
 Brightness Down 
 >> 
 << 
 Mute 
 VOL- 
 VOL+ 
 button under 9 
 TTX 
 EPG 
 OSD 
 Window 
 button under << 
 bottom yellow button 
 Snapshot 
 TVRadio 
 upper Red button 
 SPDX-License-Identifier: GPL-2.0+
 em-terratec.h - Keytable for em_terratec Remote Controller
 keymap imported from ir-keymaps.c
 Copyright (c) 2010 by Mauro Carvalho Chehab
 Legacy IR type 
 SPDX-License-Identifier: GPL-2.0+
 Copyright (C) 2021 Christian Hewitt <christianshewitt@gmail.com>
 Keytable for the Mecool Kiii Pro remote control
 AUDIO
 RADIO
 MOUSE
 PAGE_UP
 PAGE_DOWN
 SPDX-License-Identifier: GPL-2.0+
 dntv-live-dvbt-pro.h - Keytable for dntv_live_dvbt_pro Remote Controller
 keymap imported from ir-keymaps.c
 Copyright (c) 2010 by Mauro Carvalho Chehab
 DigitalNow DNTV Live! DVB-T Pro Remote 
 live tv 
 digital Radio 
 FM radio 
 dvd menu 
 replay |< 
 skip >| 
 capture 
 sap 
 pip 
 lr 
 av 
 recall 
 zoom + 
 zoom - 
 Legacy IR type 
 SPDX-License-Identifier: GPL-2.0+
 kaiomy.h - Keytable for kaiomy Remote Controller
 keymap imported from ir-keymaps.c
 Copyright (c) 2010 by Mauro Carvalho Chehab
 Kaiomy TVnPC U2
   Mauro Carvalho Chehab <mchehab@kernel.org>
 Legacy IR type 
 SPDX-License-Identifier: GPL-2.0+
 iodata-bctv7e.h - Keytable for iodata_bctv7e Remote Controller
 keymap imported from ir-keymaps.c
 Copyright (c) 2010 by Mauro Carvalho Chehab
 IO-DATA BCTV7E Remote 
 FM 
 Keys 0 to 9 
 10 
 Live 
 Time Shift 
 Play 
 11 
 12 
 Multi 
 SVIDEO 
 || (red) 
 recording 
 backward << 
 forward >> 
 skip >| 
 Legacy IR type 
 SPDX-License-Identifier: GPL-2.0+
 budget-ci-old.h - Keytable for budget_ci_old Remote Controller
 keymap imported from ir-keymaps.c
 Copyright (c) 2010 by Mauro Carvalho Chehab
  From reading the following remotes:
  Zenith Universal 7  TV Mode 807  VCR Mode 837
  Hauppauge (from NOVA-CI-s box product)
  This is a "middle of the road" approach, differences are noted
 RADIO on Hauppauge 
 TV on Hauppauge 
 RESERVED on Hauppauge 
 Prev Ch on Zenith, SOURCE on Hauppauge 
 MINIMIZE on Hauppauge 
 VCR mode on Zenith 
 FULL SCREEN on Hauppauge 
 VCR mode on Zenith 
 TVVCR on Zenith 
 Legacy IR type 
 SPDX-License-Identifier: GPL-2.0+
 Copyright (C) 2019 Christian Hewitt <christianshewitt@gmail.com>
 Keytable for the X96-max STB remote control
  TV CONTROL 
 SET
 AVTV
 POWER
 VOLUME UP
 VOLUME DOWN
 config
 mouse
 @ key
 SPDX-License-Identifier: GPL-2.0-or-later
  Medion X10 RF remote keytable (Digitainer variant)
  Copyright (C) 2012 Anssi Hannula <anssi.hannula@iki.fi>
  This keymap is for a variant that has a distinctive scrollwheel instead of
  updown buttons (tested with PN 40009936  20018268), reportedly
  originally shipped with Medion Digitainer but now sold separately simply as
  an "X10" remote.
 CDDVD 
 "teletext" icon, i.e. a screen with lines 
 a screen with an open book 
 Photo 
 scrollwheel up 1 notch 
 0x79..0x7f: 2-8 notches, driver repeats 0x78 entry 
 scrollwheel down 1 notch 
 0x71..0x77: 2-8 notches, driver repeats 0x70 entry 
 scrollwheel press 
 also has "U" rotated 90 degrees CCW 
 also Audio 
 also Subtitle 
 also Angle 
 also Title 
	 these do not actually exist on this remote, but these scancodes
	  exist on all other Medion X10 remotes and adding them here allows
	  such remotes to be adequately usable with this keymap in case
	  this keymap is wrongly used with them (which is quite possible as
 SPDX-License-Identifier: GPL-2.0+
 gotview7135.h - Keytable for gotview7135 Remote Controller
 keymap imported from ir-keymaps.c
 Copyright (c) 2010 by Mauro Carvalho Chehab
 Mike Baikov <mike@baikov.com> 
 LOOP 
 PREVIEW 
 SCAN 
 SNAPSHOT 
FULL
 LIVE TIMESHIFT 
 MIN TIMESHIFT 
 TIMESHIFT 
 NORMAL TIMESHIFT 
 Legacy IR type 
 SPDX-License-Identifier: GPL-2.0-only
 SPDX-License-Identifier: GPL-2.0+
 pv951.h - Keytable for pv951 Remote Controller
 keymap imported from ir-keymaps.c
 Copyright (c) 2010 by Mauro Carvalho Chehab
 Mark Phalan <phalanm@o2.ie> 
 CH +- 
 CC 
 TTX 
 AIRCBL 
 PCTV 
 CH RTN 
 FUNC 
 AUTOSCAN 
 Not sure what to do with these ones! 
 SOURCE 
 +100 
 SYNC 
 PCTV 
 Legacy IR type 
 SPDX-License-Identifier: GPL-2.0-or-later
 LME2510 remote control
  Copyright (C) 2010 Malcolm Priestley (tvboxspy@gmail.com)
 Type 1 - 26 buttons 
 Type 2 - 20 buttons 
 Recall 
 Timeshift 
 2 x -+ Keys not marked 
 Volume defined as right hand
 Type 3 - 20 buttons 
 Recall 
 Timeshift 
 2 x -+ Keys not marked 
 Volume defined as right hand
 SPDX-License-Identifier: GPL-2.0+
 encore-enltv-fm53.h - Keytable for encore_enltv_fm53 Remote Controller
 keymap imported from ir-keymaps.c
 Copyright (c) 2010 by Mauro Carvalho Chehab
 Encore ENLTV-FM v5.3
   Mauro Carvalho Chehab <mchehab@kernel.org>
 --- 
 recall 
 TVAV 
 SNAPSHOT 
 UP 
 DOWN 
 RIGHT 
 LEFT 
 OK 
 pause 
 video setting 
 <- 
 -> 
 video default 
 hide pannel 
 shutdown 
 Legacy IR type 
 SPDX-License-Identifier: GPL-2.0-or-later
  Medion X10 RF remote keytable
  Copyright (C) 2011 Anssi Hannula <anssi.hannula@?ki.fi>
  This file is based on a keytable provided by
  Jan Losinski <losinski@wh2.tu-dresden.de>
 TV 
 VCR 
 DVD 
 MUSIC 
 RADIO 
 PHOTO 
 TV-PREVIEW 
 CHANNEL-LST 
 SETUP 
 VIDEO DESKTOP 
 VOL - 
 VOL + 
 CHAN + 
 CHAN - 
 MUTE 
 red 
 green 
 yellow 
 blue 
 TXT 
 TVRAD, CH SRC 
 DELETE 
 RENAME 
 SNAPSHOT 
 up 
 down 
 left 
 right 
 OK 
 ACQUIRE IMAGE 
 EDIT IMAGE 
 rewind  (<<) 
 play    ( >) 
 forward (>>) 
 record  ( o) 
 stop    ([]) 
 pause   ('') 
 prev 
 F SCR 
 next 
 MENU 
 AUDIO 
 POWER 
 SPDX-License-Identifier: GPL-2.0+
 winfast-usbii-deluxe.h - Keytable for winfast_usbii_deluxe Remote Controller
 keymap imported from ir-keymaps.c
 Copyright (c) 2010 by Mauro Carvalho Chehab
 Leadtek Winfast TV USB II Deluxe remote
   Magnus Alm <magnus.alm@gmail.com>
 SNAPSHOT 
 RECORD 
 TIMESHIFT 
 VOLUMEUP 
 VOLUMEDOWN 
 MUTE 
 SURF 
 CHANNELUP 
 CHANNELDOWN 
 LAST CHANNEL (RECALL) 
 INPUT MODES (TVFM) 
 TV ONOFF 
 MINIMIZE (BOSS) 
 PIP 
 FULLSECREEN 
 OSD (DISPLAY) 
 '.' 
 ENTER 
 Legacy IR type 
 SPDX-License-Identifier: GPL-2.0+
 Copyright (C) 2019 Christian Hewitt <christianshewitt@gmail.com>
 Keytable for the Tronsmart Vega S9x remote control
 mouse
 SPDX-License-Identifier: GPL-2.0+
 Copyright (C) 2021 Christian Hewitt <christianshewitt@gmail.com>
 Keytable for the Mecool Kii Pro remote control
 AUDIO
 APPS
 MOUSE
 PAGE_UP
 PAGE_DOWN
 SPDX-License-Identifier: GPL-2.0+
 Copyright (c) 2018 Christian Hewitt
  Keymap for the Tanix TX5 max STB remote control
 mouse
 SPDX-License-Identifier: GPL-2.0+
 msi-tvanywhere-plus.h - Keytable for msi_tvanywhere_plus Remote Controller
 keymap imported from ir-keymaps.c
 Copyright (c) 2010 by Mauro Carvalho Chehab
  Keycodes for remote on the MSI TV@nywhere Plus. The controller IC on the card
  is marked "KS003". The controller is I2C at address 0x30, but does not seem
  to respond to probes until a read is performed from a valid device.
  I don't know why...
  Note: This remote may be of similar or identical design to the
  Pixelview remote (?).  The raw codes and duplicate button codes
  appear to be the same.
  Henry Wong <henry@stuffedcow.net>
  Some changes to formatting and keycodes by Mark Schultz <n9xmj@yahoo.com>
  ---- Remote Button Layout ----
    POWER   SOURCE  SCAN    MUTE
    TVFM   1       2       3
    |>      4       5       6
    <|      7       8       9
    ^^UP    0       +       RECALL
    vvDN    RECORD  STOP    PLAY
	MINIMIZE          ZOOM
		  CH+
      VOL-                   VOL+
		  CH-
	SNAPSHOT           MTS
     <<      FUNC    >>     RESET
 1 
 2 
 3 
 4 
 5 
 6 
 7 
 8 
 9 
 0 
 + 
 Recall 
 Power 
 Source 
 Scan 
 Mute 
 TVFM 
	 The next four keys are duplicates that appear to send the
	   same IR code as Ch+, Ch-, >>, and << .  The raw code assigned
	   to them is the actual code + 0x20 - they will never be
	   detected as such unless some way is discovered to distinguish
 |> and Ch+ 
 <| and Ch- 
 ^^Up and >> 
 vvDn and << 
 Record 
 Stop 
 Play 
 Minimize 
 Zoom 
 Snapshot 
 MTS 
 Vol- 
 Vol+ 
 Ch- 
 Ch+ 
 << 
 Function 
 >> 
 Reset 
 Legacy IR type 
 SPDX-License-Identifier: GPL-2.0-or-later
  TerraTec remote controller keytable
  Copyright (C) 2010 Antti Palosaari <crope@iki.fi>
 TerraTec slim remote, 7 rows, 4 columns. 
 Uses NEC extended 0x02bd. 
 symbol: PIP 
 snapshot 
 [red power button] 
 SPDX-License-Identifier: GPL-2.0-or-later
  LeadTek Y04G0051 remote controller keytable
  Copyright (C) 2010 Antti Palosaari <crope@iki.fi>
 1st ok 
 2nd ok 
 2nd video 
 2nd stop 
 1st stop 
 1st video 
 SPDX-License-Identifier: GPL-2.0-only
  keymap imported from cxusb.c
  Copyright (C) 2016 Sean Young
 Profile 
 Replay 
 ATVDTV 
 Aspect 
 INPUT 
 HD 
 SPDX-License-Identifier: GPL-2.0+
 behold.h - Keytable for behold Remote Controller
 keymap imported from ir-keymaps.c
 Copyright (c) 2010 by Mauro Carvalho Chehab
  Igor Kuznetsov <igk72@ya.ru>
  Andrey J. Melnikov <temnota@kmv.ru>
  Keytable is used by BeholdTV 60x series, M6 series at
  least, and probably other cards too.
  The "ascii-art picture" below (in comments, first row
  is the keycode in hex, and subsequent row(s) shows
  the button labels (several variants when appropriate)
  helps to decide which keycodes to assign to the buttons.
	  0x1c            0x12  
	   TVFM          POWER  
 XXX KEY_TV  KEY_RADIO 
	  0x01    0x02    0x03  
	    1       2       3    
	                         
	   0x04    0x05    0x06  
	    4       5       6    
	                         
	   0x07    0x08    0x09  
	    7       8       9    
	  0x0a    0x00    0x17  
	  RECALL    0      MODE  
	  0x14          0x10    
	  ASPECT      FULLSCREEN 
	          0x0b          
	            Up           
	                         
	   0x18    0x16    0x0c  
	   Left     Ok     Right 
	                         
	          0x015          
	          Down           
 XXX KEY_ENTER 
	  0x11            0x0d  
	   MUTE            INFO  
	  0x0f    0x1b    0x1a  
	  RECORD PLAYPAUSE STOP 
	                         
	   0x0e    0x1f    0x1e  
	 TELETEXT  AUDIO  SOURCE 
	            RED   YELLOW 
XXX KEY_AUDIO	
	  0x1d   0x13     0x19  
	  SLEEP  PREVIEW   DVB   
	          GREEN    BLUE  
 XXX KEY_SAT	
	  0x58           0x5c   
	  FREEZE        SNAPSHOT 
 SPDX-License-Identifier: GPL-2.0-or-later
  Toshiba CT-90405 remote controller keytable
  Copyright (C) 2021 Alexander Voronov <avv.0@ya.ru>
 SPDX-License-Identifier: GPL-2.0+
 Copyright (c) 2019 Clément Péron
  Keymap for the Beelink GS1 remote control
	
	  TV Keys (Power, Learn and Volume)
	  { 0x40400d, KEY_TV },
	  { 0x80f1, KEY_TV },
	  { 0x80f3, KEY_TV },
	  { 0x80f4, KEY_TV },
 Web 
 Media 
 # Input Method 
 SPDX-License-Identifier: GPL-2.0+
 Copyright (c) 2018 Christian Hewitt
  Keymap for the Tanix TX3 mini STB remote control
 mouse
 1a
 SPDX-License-Identifier: GPL-2.0+
 dm1105-nec.h - Keytable for dm1105_nec Remote Controller
 keymap imported from ir-keymaps.c
 Copyright (c) 2010 by Mauro Carvalho Chehab
 DVBWorld remotes
   Igor M. Liplianin <liplianin@me.by>
 power 
 mute 
 ch+ 
 ch- 
 vol+ 
 vol- 
 rec 
 fav 
 rewind 
 fast 
 pause 
 cancel 
 tab 
 up 
 ok 
 down 
 cap 
 stop 
 full 
 tvmode 
 recall 
 Legacy IR type 
 SPDX-License-Identifier: GPL-2.0-or-later
 rc-tivo.c - Keytable for TiVo remotes
  Copyright (c) 2011 by Jarod Wilson <jarod@redhat.com>
  Initial mapping is for the TiVo remote included in the Nero LiquidTV bundle,
  which also ships with a TiVo-branded IR transceiver, supported by the mceusb
  driver. Note that the remote uses an NEC-ish protocol, but instead of having
  a commandnot_command pair, it has a vendor ID of 0x3085, but some keys, the
  NEC extended checksums do pass, so the table presently has the intended
  values and the checksum-passed versions for those keys.
 TiVo Button 
 TV Power 
 Live TVSwap 
 TV Input 
 Window 
 Guide 
 Red Thumbs Down 
 Green Thumbs Up 
 ->| 
 Aspect 
 DVD Menu 
 SPDX-License-Identifier: GPL-2.0+
 rc-pixelview-mk12.h - Keytable for pixelview Remote Controller
 keymap imported from ir-keymaps.c
 Copyright (c) 2010 by Mauro Carvalho Chehab
  Keytable for MK-F12 IR remote provided together with Pixelview
  Ultra Pro Remote Controller. Uses NEC extended format.
 Timeshift 
 power 
 loop 
 +100 
 source 
 mute 
 snapshot 
 scan 
 chn + 
 chn - 
 vol + 
 vol - 
 zoom 
 FM 
 SPDX-License-Identifier: GPL-2.0+
 kworld-315u.h - Keytable for kworld_315u Remote Controller
 keymap imported from ir-keymaps.c
 Copyright (c) 2010 by Mauro Carvalho Chehab
 Kworld 315U
 source 
 shutdown 
 SPDX-License-Identifier: GPL-2.0-or-later
  AverMedia RM-KS remote controller keytable
  Copyright (C) 2010 Antti Palosaari <crope@iki.fi>
 Initial keytable is from Jose Alberto Reguero <jareguero@telefonica.net>
 Keytable fixed by Philippe Valembois <lephilousophe@users.sourceforge.net> 
 Power (RED POWER BUTTON) 
 Channel+ 
 Channel- 
 Volume+ 
 Volume- 
 Mute 
 Recall 
 Source 
 1 
 2 
 3 
 4 
 5 
 6 
 7 
 8 
 9 
 0 
 Audio 
 EPG 
 PlayPause 
 Record 
 Stop 
 << 
 >> 
 Display information 
 Fullscreen 
 SPDX-License-Identifier: GPL-2.0+
 avertv-303.h - Keytable for avertv_303 Remote Controller
 keymap imported from ir-keymaps.c
 Copyright (c) 2010 by Mauro Carvalho Chehab
 AVERTV STUDIO 303 Remote 
 Legacy IR type 
 SPDX-License-Identifier: GPL-2.0-or-later
  ATI X10 RF remote keytable
  Copyright (C) 2011 Anssi Hannula <anssi.hannula@?ki.fi>
  This file is based on the static generic keytable previously found in
  ati_remote.c, which is
  Copyright (c) 2004 Torrey Hoffman <thoffman@arnor.net>
  Copyright (c) 2002 Vladimir Dergachev
  Intended usage comments below are from vendor-supplied
  Source: ATI REMOTE WONDER™ Installation Guide
  http:www2.ati.commanualsremctrl.pdf
  Scancodes were in strict left-right, top-bottom order on the
  original ATI Remote Wonder, but were moved on later models.
  Keys A-F are intended to be user-programmable.
 keyboard - Above the cursor pad 
 Power 
 TV 
 DVD 
 WEB 
 "book": Open Media Library 
 "hand": Toggle left mouse button (grab) 
 Mouse emulation pad goes here, handled by driver separately 
 VOL + 
 VOL - 
 MUTE  
 CH + 
 CH - 
	
	  We could use KEY_NUMERIC_x for these, but the X11 protocol
	  has problems with keycodes greater than 255, so avoid those high
	  keycodes in default maps.
 "menu": DVD root menu 
 KEY_NUMERIC_STAR? 
 "check": DVD setup menu 
 KEY_NUMERIC_POUND? 
 DVD navigation buttons 
 up 
 "timer" Should be Data On Screen 
 Symbol is "circle nailed to box" 
 left 
 "OK" 
 right 
 "max" (X11 warning: 0x177) 
				   Should be AC View Toggle, but
				     that's not in <inputinput.h>.
 down 
 Playstoppause buttons 
 (<<) Rewind 
 ( >) Play (KEY_PLAYCD?) 
 (>>) Fast forward 
 ( o) red 
 ([]) Stop  (KEY_STOP is something else!) 
 ('') Pause (KEY_PAUSECD?) 
 Extra keys, not on the original ATI remote 
 (>+) 
 (<-) 
 PLAYING  (X11 warning: 0x166) 
 TOP 
 END 
 SELECT  (X11 warning: 0x161) 
 SPDX-License-Identifier: GPL-2.0+
 real-audio-220-32-keys.h - Keytable for real_audio_220_32_keys Remote Controller
 keymap imported from ir-keymaps.c
 Copyright (c) 2010 by Mauro Carvalho Chehab
 Zogis Real Audio 220 - 32 keys IR 
 Source 
 stereo 
 Prev 
 Timeshift 
 Next 
 Pause 
 Snapshot 
 Legacy IR type 
 SPDX-License-Identifier: GPL-2.0-or-later
  TerraTec remote controller keytable
  Copyright (C) 2011 Martin Groszhauser <mgroszhauser@gmail.com>
  Copyright (C) 2011 Antti Palosaari <crope@iki.fi>
  TerraTec slim remote, 6 rows, 3 columns.
  Keytable from Martin Groszhauser <mgroszhauser@gmail.com>
 MUTE 
 [fullscreen] 
 [two arrows forming a circle] 
 [red power button] 
 SPDX-License-Identifier: GPL-2.0-or-later
 rc5-imon-mce.c - Keytable for Windows Media Center RC-6 remotes for use
  with the SoundGraph iMONAntec Veris hardware IR decoder
  Copyright (c) 2010 by Jarod Wilson <jarod@redhat.com>
 mce-mode imon mce remote key table 
 keys sorted mostly by frequency of use to optimize lookups 
 0x800ff40b also KEY_NUMERIC_POUND on some receivers 
 the OK and Enter buttons decode to the same value on some remotes
 0x800ff40a also KEY_NUMERIC_STAR on some receivers 
 0x800ff41d also KEY_BLUE on some receivers 
 0x800ff41c also KEY_PREVIOUS on some receivers 
 My Music 
 RecordedTV 
 0x800ff424 also KEY_MENU on some receivers 
 0x800ff425 also KEY_GREEN on some receivers 
 LiveTV 
 Aspect 
 { 0x800ff425, KEY_GREEN }, 
 { 0x800ff41d, KEY_BLUE }, 
 Guide 
 CaptionTeletext 
 Windows MCE button 
 its RC6, but wa hardware decoder 
 SPDX-License-Identifier: GPL-2.0+
 flyvideo.h - Keytable for flyvideo Remote Controller
 keymap imported from ir-keymaps.c
 Copyright (c) 2010 by Mauro Carvalho Chehab
 AirCable 
 Video 
 Audio 
 Power 
 AV Source 
 Fullscreen 
 Stereo 
 Mute 
 Volume + 
 Volume - 
 Channel + 
 Channel - 
 Recall 
 Enter 
 Rewind  ( <<< ) 
 Forward ( >>> ) 
 no label, may be used as the PAUSE button 
 Legacy IR type 
 SPDX-License-Identifier: GPL-2.0+
 msi-tvanywhere.h - Keytable for msi_tvanywhere Remote Controller
 keymap imported from ir-keymaps.c
 Copyright (c) 2010 by Mauro Carvalho Chehab
 MSI TV@nywhere MASTER remote 
 Keys 0 to 9 
 Full Screen 
 Function 
 Time shift 
 MTS 
 backward << 
 Return 
 forward >> 
 Legacy IR type 
 SPDX-License-Identifier: GPL-2.0+
 npgtech.h - Keytable for npgtech Remote Controller
 keymap imported from ir-keymaps.c
 Copyright (c) 2010 by Mauro Carvalho Chehab
 switch inputs 
 --- 
 Pointing arrow 
 MaximizeMinimize (yellow) 
 Legacy IR type 
 SPDX-License-Identifier: GPL-2.0-or-later
  DigitalNow TinyTwin remote controller keytable
  Copyright (C) 2010 Antti Palosaari <crope@iki.fi>
 [symbol speaker] 
 TV [power button] 
 [] 
 [#] 
 [right arrow] 
 [symbol home] Start 
 [red] Videos 
 PC [power button] 
 [yellow] Pictures 
 [down arrow] 
 [green] Music 
 BACK 
 MORE 
 [up arrow] 
 [left arrow] 
 OK 
 [blue] MyTV 
 REW [<<] 
 PLAY 
 STOP 
 PAUSE 
 Aspect 
 FWD [>>] 
 SKIP 
 RECORD 
 RTV 
 Guide 
 Help 
 Radio 
 DVD 
 Audio 
 Title 
 [symbol PIP?] 
 Mouse 
 REPLAY 
 SPDX-License-Identifier: GPL-2.0+
 eztv.h - Keytable for eztv Remote Controller
 keymap imported from ir-keymaps.c
 Copyright (c) 2010 by Mauro Carvalho Chehab
 Alfons Geser <a.geser@cox.net>
 DVR 
 DVD 
 music 
 DVR mode  DVD mode  music mode 
 mute 
 MTSSAP  audio  autoseek 
 closed captioning  subtitle  seek 
 full screen 
 video source  eject  delall 
 playback  angle  del 
 scan  menu  playlist 
 CH surfing  bookmark  memo 
 help 
 nummemo 
 cancel 
 up 
 down 
 left 
 right 
 select 
 rewind 
 playpause 
 forward 
 repeat 
 recording 
 stop 
 play 
 snapshot  shuffle 
 CH.tracking up 
 CH.tracking down 
 enter 
 . (decimal dot) 
 Legacy IR type 
 SPDX-License-Identifier: GPL-2.0+
 pinnacle-pctv-hd.h - Keytable for pinnacle_pctv_hd Remote Controller
 keymap imported from ir-keymaps.c
 Copyright (c) 2010 by Mauro Carvalho Chehab
 Pinnacle PCTV HD 800i mini remote 
 Key codes for the tiny Pinnacle remote
 Pinnacle logo 
 'Square' key 
 'T' key 
 '?' key 
 SPDX-License-Identifier: GPL-2.0+
 powercolor-real-angel.h - Keytable for powercolor_real_angel Remote Controller
 keymap imported from ir-keymaps.c
 Copyright (c) 2010 by Mauro Carvalho Chehab
  Remote control for Powercolor Real Angel 330
  Daniel Fraga <fragabr@gmail.com>
 switch inputs 
 Turn ONOFF App 
 single, double, triple digit 
 previous channel 
 stereomono 
 teletext 
 channel up 
 channel down 
 volume up 
 volume down 
 autoscan 
 snapshot 
 full screen 
 FM radio 
 power 
 Legacy IR type 
 SPDX-License-Identifier: GPL-2.0+
 apac-viewcomp.h - Keytable for apac_viewcomp Remote Controller
 keymap imported from ir-keymaps.c
 Copyright (c) 2010 by Mauro Carvalho Chehab
 Attila Kondoros <attila.kondoros@chello.hu> 
 +100 
 recall 
 TVFM 
 scan 
 power 
 vol up 
 vol down 
 chn up 
 chn down 
 video 
 full screen 
 muteunmute 
 min 
 freeze 
 record 
 stop 
 play 
 osd 
 default 
 fine tune >>>> 
 fine tune <<<< 
 Legacy IR type 
 SPDX-License-Identifier: GPL-2.0-or-later
 kworld-pc150u.c - Keytable for kworld_pc150u Remote Controller
  keymap imported from ir-keymaps.c
  Copyright (c) 2010 by Kyle Strickland
    (based on kworld-plus-tv-analog.c by
     Mauro Carvalho Chehab)
 Kworld PC150-U
   Kyle Strickland <kyle@kyle.strickland.name>
 Kworld key 
 -> ) 
 Timeshift 
 (()) 
 display ratio 
 snapshot 
 sleep timer 
 switch theater mode 
 A 
 B 
 C 
 Legacy IR type 
 SPDX-License-Identifier: GPL-2.0+
 avermedia-cardbus.h - Keytable for avermedia_cardbus Remote Controller
 keymap imported from ir-keymaps.c
 Copyright (c) 2010 by Mauro Carvalho Chehab
 Oldrich Jedlicka <oldium.pro@seznam.cz> 
 TVFM 
 Teletext 
 Full screen 
 16-CH PREV 
 CH RTN - channel return 
 Autoscan 
 Screenshot 
 Sleep 
 Aspect 
 Pos 
 Size 
 Select 
 BluePicture 
 Back 
 PIP (Picture-in-picture) 
 Live TV 
 Clear 
 RedTV 
 Home 
 GreenVideo 
 YellowMusic 
 Ok 
 Next 
 Previous 
 Channel down 
 Channel up 
 Legacy IR type 
 SPDX-License-Identifier: GPL-2.0+
 terratec-cinergy-xs.h - Keytable for terratec_cinergy_xs Remote Controller
 keymap imported from ir-keymaps.c
 Copyright (c) 2010 by Mauro Carvalho Chehab
 Terratec Cinergy Hybrid T USB XS
   Devin Heitmueller <dheitmueller@linuxtv.org>
 Legacy IR type 
 SPDX-License-Identifier: GPL-2.0+
 rc-dvb0700-big.c - Keytable for devices in dvb0700
 Copyright (c) 2010 by Mauro Carvalho Chehab
 TODO: This table is a real mess, as it merges RC codes from several
 devices into a big table. It also has both RC-5 and NEC codes inside.
 It should be broken into small tables, and the protocols should properly
 be identificated.
 The table were imported from dib0700_devices.c.
 Key codes for the Pixelview SBTVD remote 
 Key codes for the EvolutePC TVWay+ remote 
 Key codes for the Elgato EyeTV Diversity silver remote 
 Skip backwards 
 Skip forward 
 Live 
 'Reveal' for Teletext 
 KEY_TEXT for Teletext 
 Font 'Size' for Teletext 
  Full screen toggle, 'Hold' for Teletext 
 Select video input, 'Select' for Teletext 
 SPDX-License-Identifier: GPL-2.0-only
  keymap imported from cxusb.c
  Copyright (C) 2016 Sean Young
 TVAV 
 Time Shift 
 Snapshot 
 Mouse Cursor 
 MinimizeMaximize 
 Shuffle 
 Legacy IR type 
 SPDX-License-Identifier: GPL-2.0-or-later
  Total Media In Hand_02 remote controller keytable for Mygica X8507
  Copyright (C) 2012 Alfredo J. Delaiti <alfredodelaiti@netscape.net>
 Stop 
 Turn onoff application 
 OK 
 Snapshot 
 Full ScreenRestore 
 Right arrow 
 Left arrow 
 Play 
 Time Shift 
 Turn off computer 
 FR << 
 FF >> 
 CH Surfing 
 TVAVS-VideoYPbPr 
 SPDX-License-Identifier: GPL-2.0+
 rc-hauppauge.c - Keytable for Hauppauge Remote Controllers
 keymap imported from ir-keymaps.c
 This map currently contains the code for four different RCs:
	- New Hauppauge Gray;
	- Old Hauppauge Gray (with a golden screen for media keys);
	- Hauppauge Black;
	- DSR-0112 remote bundled with Haupauge MiniStick.
 Copyright (c) 2010-2011 by Mauro Carvalho Chehab
  Hauppauge:the newer, gray remotes (seems there are multiple
  slightly different versions), shipped with cx88+ivtv cards.
  This table contains the complete RC5 code, instead of just the data part
	
	  Remote Controller Hauppauge Gray found on modern devices
	  Keycodes start with address = 0x1e
 GO  house symbol 
 system power (green button) 
 Videos 
 Music 
 Pictures 
 Guide 
 OK 
 backexit 
 previous channel 
 channel  program + 
 channel  program - 
 recording 
 backward << 
 forward >> 
 replay |< 
 pause 
 skip >| 
 keypad asterisk as well 
 also the Pound key (#) 
 red button 
 green button 
 yellow key 
 blue key 
	
	  Old Remote Controller Hauppauge Gray with a golden screen
	  Keycodes start with address = 0x1f
 system power (green button) 
 GO 
 Keys 0 to 9 
 backexit 
 channel  program + 
 channel  program - 
 OK 
 red button 
 green button 
 yellow key 
 blue key 
 There's no indicator on this key 
 full 
 backward << 
 forward >> 
 recording 
 pause 
 replay |< 
 skip >| 
	
	  Keycodes for DSR-0112 remote bundled with Haupauge MiniStick
	  Keycodes start with address = 0x1d
 Prev.Ch .. ??? 
 >|             
 <|             
	
	  Keycodes for PT# R-005 remote bundled with Haupauge HVR-930C
	  Keycodes start with address = 0x1c
 BACK 
 Prev 
 <|             
 >|             
 CC 
	
	  Keycodes for the old Black Remote Controller
	  This one also uses RC-5 protocol
	  Keycodes start with address = 0x00
 full screen 
 source 
 Reserved 
 Minimize 
 SPDX-License-Identifier: GPL-2.0+
 videomate-tv-pvr.h - Keytable for videomate_tv_pvr Remote Controller
 keymap imported from ir-keymaps.c
 Copyright (c) 2010 by Mauro Carvalho Chehab
 Legacy IR type 
 SPDX-License-Identifier: GPL-2.0+
 Copyright (c) 2020 Christian Hewitt
  KHAMSIN is an IRBluetooth RCU supplied with the SmartLabs
  SML-5442TW DVB-SVOD box. The RCU has separate IR (TV) and
  BT (STB) modes. This keymap suppors the IR controls.
 source
 back
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2017 Sanechips Technology Co., Ltd.
  Copyright 2017 Linaro Ltd.
 Input method 
 Application 
 Location 
 SPDX-License-Identifier: GPL-2.0-or-later
  TrekStor remote controller keytable
  Copyright (C) 2010 Antti Palosaari <crope@iki.fi>
 TrekStor DVB-T USB Stick remote controller. 
 Imported from af9015.h.
 Mute 
 Home 
 Up 
 OK 
 Right 
 Fast forward 
 Volume + 
 Down 
 PlayPause 
 Stop 
 InfoEPG 
 Channel - 
 Channel + 
 Volume - 
 TV 
 Record 
 Rewind 
 Left 
 SPDX-License-Identifier: GPL-2.0-or-later
  Keytable for remote controller of HiSilicon poplar board.
  Copyright (c) 2017 HiSilicon Technologies Co., Ltd.
 SPDX-License-Identifier: GPL-2.0-or-later
  Keytable for remote controller of HiSilicon tv demo board.
  Copyright (c) 2017 HiSilicon Technologies Co., Ltd.
 SPDX-License-Identifier: GPL-2.0+
 Copyright (c) 2018 Christian Hewitt
  This keymap is used with the WeTek Hub STB.
 mouse
 SPDX-License-Identifier: GPL-2.0-or-later
  MSI DIGIVOX mini III remote controller keytable
  Copyright (C) 2010 Antti Palosaari <crope@iki.fi>
 MSI DIGIVOX mini III 
 Uses NEC extended 0x61d6. 
 This remote seems to be same as rc-kworld-315u.c. Anyhow, add new remote
 Source 
 ShutDown 
 CH- 
 CH+ 
 Zoom 
 Vol+ 
 [back up arrow] 
 [enter arrow] 
 Vol- 
 Rec 
 Stop 
 Play 
 Mute 
 [red power button] 
 SPDX-License-Identifier: GPL-2.0+
 Keytable for the Pine64 IR Remote Controller
 Copyright (c) 2017 Jonas Karlman
 mouse
 SPDX-License-Identifier: GPL-2.0+
 nebula.h - Keytable for nebula Remote Controller
 keymap imported from ir-keymaps.c
 Copyright (c) 2010 by Mauro Carvalho Chehab
 labelled 'Picture' 
 16:9 
 14:9 
 AD 
 chapter 
 picture in picture 
 zoom in 
 zoom out 
 capture 
 web 
 SPDX-License-Identifier: GPL-2.0+
 Copyright (C) 2018 Sean Young <sean@mess.org>
 Note that this remote has a stick which its own IR protocol,
 with 16 directions. This is supported by the imon_rsc BPF decoder
 in v4l-utils.
 Screensaver 
 Timer 
 Desktop 
 Maximise 
 Windows key 
 app launcher 
 shift tab 
 drag and drop 
 full screen 
 SPDX-License-Identifier: GPL-2.0+
 pinnacle-color.h - Keytable for pinnacle_color Remote Controller
 keymap imported from ir-keymaps.c
 Copyright (c) 2010 by Mauro Carvalho Chehab
 Legacy IR type 
 SPDX-License-Identifier: GPL-2.0+
 flydvb.h - Keytable for flydvb Remote Controller
 keymap imported from ir-keymaps.c
 Copyright (c) 2010 by Mauro Carvalho Chehab
 Full Screen 
 Power 
 Recall 
 Mute 
 TVRadio 
 SAP (Second Audio Program) 
 VOL+ 
 VOL- 
 CH+ 
 CH- 
 Enter 
 PIP 
 Source 
 RecordPause 
 Swap (no label on key) 
 TimeshiftPause 
 Rewind << 
 PlayPause 
 Forward >> 
 Back |<< 
 Stop 
 End >>| 
 Legacy IR type 
 SPDX-License-Identifier: GPL-2.0+
 Copyright (C) 2019 Christian Hewitt <christianshewitt@gmail.com>
 Keytable for the WeTek Play 2 STB remote control
 tv
 outer ring clockwide from top
 mouse
 square
 inner ring
 txt
 SPDX-License-Identifier: GPL-2.0-or-later
 avermedia-m733a-rm-k6.h - Keytable for avermedia_m733a_rm_k6 Remote Controller
  Copyright (c) 2010 by Herton Ronaldo Krzesinski <herton@mandriva.com.br>
  Avermedia M733A with IR model RM-K6
  This is the stock remote controller used with Positivo machines with M733A
  Herton Ronaldo Krzesinski <herton@mandriva.com.br>
 TVFM 
 '.' 
 RefreshReload 
 Full Screen toggle 
 PIP 
 Snapshot 
 SPDX-License-Identifier: GPL-2.0+
 winfast.h - Keytable for winfast Remote Controller
 keymap imported from ir-keymaps.c
 Copyright (c) 2010 by Mauro Carvalho Chehab
 Table for Leadtek Winfast Remote Controls - used by both bttv and cx88 
 Keys 0 to 9 
 Audio Source 
 TVFM, not on Y0400052 
 Video Source 
 Display information 
 fullscreen 
 closed captionteletext 
 boss key 
 fine tune + , not on Y040052 
 fine tune - , not on Y040052 
 PIP (Picture in picture 
 Recall (last channel 
 Time Shifting 
 Screenshot 
 Channel Surf 
 FM 
 change to MCE mode on Y04G0051 
 MCE +VOL, on Y04G0033 
 MCE -VOL, on Y04G0033 
 MCE +CH,  on Y04G0033 
 MCE -CH,  on Y04G0033 
 Legacy IR type 
 SPDX-License-Identifier: GPL-2.0-or-later
 rc-streamzap.c - Keytable for Streamzap PC Remote, for use
  with the Streamzap PC Remote IR Receiver.
  Copyright (c) 2010 by Jarod Wilson <jarod@redhat.com>
  The Streamzap remote is almost, but not quite, RC-5, as it has an extra
  bit in it.
 SPDX-License-Identifier: GPL-2.0-or-later
  MSI DIGIVOX mini II remote controller keytable
  Copyright (C) 2010 Antti Palosaari <crope@iki.fi>
 up 
 down 
 SPDX-License-Identifier: GPL-2.0-or-later
  Medion X10 OR22OR24 RF remote keytable
  Copyright (C) 2012 Anssi Hannula <anssi.hannula@iki.fi>
  This keymap is for several Medion X10 remotes that have the Windows MCE
  button. This has been tested with a "RF VISTA Remote Control", OR24V,
  PN 20035335, but should work with other variants that have the same
  buttons, such as OR22V and OR24E.
 "T" in a box, for teletext 
 record symbol inside a tv symbol 
 disc symbol 
 a tv schedule symbol 
 play symbol inside a tv symbol 
 Windows MCE button 
 SPDX-License-Identifier: GPL-2.0+
 gadmei-rm008z.h - Keytable for gadmei_rm008z Remote Controller
 keymap imported from ir-keymaps.c
 Copyright (c) 2010 by Mauro Carvalho Chehab
 GADMEI UTV330+ RM008Z remote
   Shine Liu <shinel@foxmail.com>
 POWER OFF 
 MUTE 
 TV 
 AV 
 SV 
 FM 
 OSD 
 LAST 
 PLAY 
 SNAPSHOT 
 RECORD 
 STOP 
 UP 
 DOWN 
 BACK 
 FULLSECREEN 
 VOLUMEUP 
 VOLUMEDOWN 
 CHANNELUP 
 CHANNELDOWN 
 OK 
 Legacy IR type 
 SPDX-License-Identifier: GPL-2.0-or-later
 keytable for Terratec Cinergy C PCI Remote Controller
  Copyright (c) 2010 by Igor M. Liplianin <liplianin@me.by>
 AV 
 DVD Menu 
 Teletext 
 Music 
 Pic 
 Legacy IR type 
 SPDX-License-Identifier: GPL-2.0+
 pixelview.h - Keytable for pixelview Remote Controller
 keymap imported from ir-keymaps.c
 Copyright (c) 2010 by Mauro Carvalho Chehab
 power 
 source 
 scan 
 TVFM 
 freeze 
 zoom 
 min 
 +100 
 recall 
 chn down 
 chn up 
 vol down 
 vol up 
 <<< 
 function 
 >>> 
 mts 
 reset 
 muteunmute 
 Legacy IR type 
 SPDX-License-Identifier: GPL-2.0-or-later
 keytable for Twinhan DTV CAB CI Remote Controller
  Copyright (c) 2010 by Igor M. Liplianin <liplianin@me.by>
 Preview 
 Record List 
 Replay |< 
 Skip   >| 
 Capture 
 SAP 
 PIP 
 Full screen 
 LR 
 Hibernate 
 AV 
 Recall 
 Zoom+ 
 Zoom- 
 Legacy IR type 
 SPDX-License-Identifier: GPL-2.0+
 Copyright (C) 2019 Mohammad Rasim <mohammad.rasim96@gmail.com>
 Keytable for the Videostrong KII Pro STB remote control
KEY_F5?
 DTV ?
 KEY_OK ?
 mouse
 KEY_CHANNELUP ?
 KEY_CHANNELDOWN ?
 KEY_F7
 SPDX-License-Identifier: GPL-2.0+
 videomate-s350.h - Keytable for videomate_s350 Remote Controller
 keymap imported from ir-keymaps.c
 Copyright (c) 2010 by Mauro Carvalho Chehab
 TVVideo 
 Recall 
 CC 
 MTS 
 SURF 
 Snapshot 
 Legacy IR type 
 SPDX-License-Identifier: GPL-2.0-or-later
 rc-delock-61959.c - Keytable for Delock
  Copyright (c) 2013 by Jakob Haufe <sur5r@sur5r.net>
  Keytable for remote provided with Delock 61959
 Power 
 Shut Down 
 Full Screen 
 Photo 
 circular arrow  Recall 
 Back 
 >>  FWD 
 <<  REW 
 rc-technisat-usb2.c - Keytable for SkyStar HD USB
  Copyright (C) 2010 Patrick Boettcher,
                     Kernel Labs Inc. PO Box 745, St James, NY 11780
  Development was sponsored by Technisat Digital UK Limited, whose
  registered office is Witan Gate House 500 - 600 Witan Gate West,
  Milton Keynes, MK9 1SH
  This program is free software; you can redistribute it andor
  modify it under the terms of the GNU General Public License as
  published by the Free Software Foundation; either version 2 of the
  License, or (at your option) any later version.
  THIS PROGRAM IS PROVIDED "AS IS" AND BOTH THE COPYRIGHT HOLDER AND
  TECHNISAT DIGITAL UK LTD DISCLAIM ALL WARRANTIES WITH REGARD TO
  THIS PROGRAM INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY OR
  FITNESS FOR A PARTICULAR PURPOSE.  NEITHER THE COPYRIGHT HOLDER
  NOR TECHNISAT DIGITAL UK LIMITED SHALL BE LIABLE FOR ANY SPECIAL,
  DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER
  RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
  OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR
  IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS PROGRAM. See the
  GNU General Public License for more details.
 EXT 
 HOOK 
 SPDX-License-Identifier: GPL-2.0-or-later
 videomate-k100.h - Keytable for videomate_k100 Remote Controller
  keymap imported from ir-keymaps.c
  Copyright (c) 2010 by Pavel Osnova <pvosnova@gmail.com>
 TV record button 
 '...' button 
 WIN key 
  key 
 # key 
 Legacy IR type 
 SPDX-License-Identifier: GPL-2.0+
 asus-ps3-100.h - Keytable for asus_ps3_100 Remote Controller
 Copyright (c) 2012 by Mauro Carvalho Chehab
 Based on a previous patch from Remi Schwartz <remi.schwartz@gmail.com>
 home 
 tv 
 teletext 
 close 
 red 
 yellow 
 blue 
 green 
 Keys 0 to 9 
 channel  program + 
 channel  program - 
 enter 
 back 
 recall 
 TV audio 
 snapshot 
 full screen 
 mute 
 backward << 
 recording 
 forward >> 
 rew 
 pause 
 play 
 forward 
 SPDX-License-Identifier: GPL-2.0-only
  Keytable for the Astrometa T2hybrid remote controller
  Copyright (C) 2017 Oleh Kravchenko <oleg@kaa.org.ua>
 Source 
 Timeshift 
 Fullscreen 
 Recall 
 SPDX-License-Identifier: GPL-2.0+
 rc-pixelview-mk12.h - Keytable for pixelview Remote Controller
 keymap imported from ir-keymaps.c
 Copyright (c) 2010 by Mauro Carvalho Chehab
  Keytable for 002-T IR remote provided together with Pixelview
  SBTVD Hybrid Remote Controller. Uses NEC extended format.
 power 
 vol + 
 vol - 
 snapshot 
 zoom 
 SPDX-License-Identifier: GPL-2.0-or-later
 rc-dvbsky.c - Keytable for DVBSky Remote Controllers
  keymap imported from ir-keymaps.c
  Copyright (c) 2010-2012 by Nibble Max <nibble.max@gmail.com>
  This table contains the complete RC5 code, instead of just the data part
Snap shot
PIP
Info
 SPDX-License-Identifier: GPL-2.0-only
  Keytable for the GeekBox remote controller
  Copyright (C) 2017 Martin Blumenstingl <martin.blumenstingl@googlemail.com>
 SPDX-License-Identifier: GPL-2.0-or-later
  FireDTV driver (formerly known as FireSAT)
  Copyright (C) 2004 Andreas Monitzer <andy@monitzer.com>
 fixed table with older keycodes, geared towards MythTV 
 code from device: 0x4501...0x451f 
 code from device: 0x4540...0x4542 
 user-modifiable table for a remote as sold in 2008 
 code from device: 0x0300...0x031f 
 "OSD" - fixme 
 "16:9" - fixme 
 "FULL" - fixme 
 code from device: 0x0340...0x0354 
 "4:3" - fixme 
 "CH.LIST" 
 "CI" - fixme 
 SPDX-License-Identifier: GPL-2.0-or-later
  FireDTV driver (formerly known as FireSAT)
  Copyright (C) 2004 Andreas Monitzer <andy@monitzer.com>
  Copyright (C) 2008 Ben Backx <ben@bbackx.com>
  Copyright (C) 2008 Henrik Kurelid <henrik@kurelid.se>
 OUI of Digital Everywhere 
 for DVB-S 
 for DVB-S2 
  This is a workaround since there is no vendor specific command to retrieve
  ca_info using AVC. If this parameter is not used, ca_system_id will be
  filled with application_manufacturer from ca_app_info.
  Digital Everywhere have said that adding ca_info is on their TODO list.
		
		  AVC specs say that answers should be sent within 150 ms.
		  Time out after 200 ms.
 flowfunction relay 
 dsd_sel_spec_valid_flags -> PID 
 tableID 
 filter_length 
  tuning command for setting the relative LNB frequency
  (not supported by the AVC standard)
 polarisation 
 band 
 case ROLLOFF_NONE:	c->operand[14] = 0xff; break; 
 auto modulation 
 disable rolloff 
 disable pilot 
 source plug 
 subfunction replace 
 system id = DVB 
 antenna number 
 system_specific_multiplex selection_length 
 multiplex_valid_flags, high byte 
 reserved 
 Polarisation 
 Orbital_Pos 
 Frequency 
 Symbol_Rate 
 FEC_outer 
 multiplex_valid_flags, low byte 
 NetworkID 
 reserved  ;
 source plug 
 subfunction replace 
 system id = DVB 
 antenna number 
 system_specific_multiplex selection_length 
 multiplex_valid_flags, high byte 
 reserved 
 CenterFrequency 
 multiplex_valid_flags, low byte 
 NetworkID 
 OtherFrequencyFlag 
 reserved  ;
 not defined by AVC spec 
 network_ID[0] 
 network_ID[1] 
	
	  FIXME:
	  u8 status was an out-parameter of avc_tuner_dsd, unused by caller.
	  Check for AVC_RESPONSE_ACCEPTED here instead?
 source plug 
 subfunction replace 
 system id = DVB 
 antenna number 
 system_specific_multiplex selection_length 
 Nr_of_dsd_sel_specs 
 flowfunction relay 
 dsd_sel_spec_valid_flags -> PID 
 tableID 
 filter_length 
 FIXME: check response code? 
 source plug 
 subfunction replace 
 status 
 system id = DVB 
 antenna number 
 system_specific_search_flags 
 system_specific_multiplex selection_length 
	
	  operand[7]: valid_flags[0]
	  operand[8]: valid_flags[1]
	  operand[7 + sl]: nr_of_dsit_sel_specs (always 0)
 FIXME: check response code? 
 length highbyte 
 length lowbyte  
 offset highbyte 
 offset lowbyte  
 padding 
 read_result_status 
	
	  operand[2]: reserved
	  operand[3]: SIZEOF_ANTENNA_INPUT_INFO >> 8
	  operand[4]: SIZEOF_ANTENNA_INPUT_INFO & 0xff
 padding 
 FIXME: check response code? 
 Should it be rescheduled in failure cases? 
 FIXME: unused 
 slot 
 ca tag 
 FIXME: check response code? 
 Check length of length field 
 FIXME: unused 
 slot 
 ca tag 
 FIXME: check response code and validate response data 
 slot 
 ca tag 
 FIXME: check response code and validate response data 
 slot 
 ca tag 
 morelast 
 length 
 force hardware reset 
 FIXME: check response code? 
 We take the cmd_id from the programme level only! 
 Remove pmt_cmd_id 
 slot 
 ca tag 
 morelast 
 Use three bytes for length field in case length > 127 
 pmt_cmd=OK_descramble 
 TS program map table 
 Table id=2 
 Section syntax + length 
 Program number 
 Version number and currentnext 
 Section number=0 
 Last section number=0 
 PCR_PID=1FFF 
 Program info length 
 CA descriptors at programme level 
 Remove pmt_cmd_id 
 CRC 
 slot 
 ca tag 
 FIXME: check response code and validate response data 
 slot 
 FIXME: check response code? 
 slot 
 FIXME: check response code and validate response data 
 We don't allocate isochronous resources. 
 S400 
 FIXME: this is for the worst case - optimize 
 FIXME: allocate isochronous channel and bandwidth at IRM 
		
		  FIXME: if old_opcr.P2P_Connections > 0,
		  deallocate isochronous channel and bandwidth at IRM
 arbitrary limit 
		
		  FIXME: if old_opcr.P2P_Connections == 1, i.e. we were last
		  owner, deallocate isochronous channel and bandwidth at IRM
		  if (...)
		 	fdtv->backend->dealloc_resources(fdtv, channel, bw);
 arbitrary limit 
 SPDX-License-Identifier: GPL-2.0-only
  FireDTV driver -- firewire IO backend
 node_id vs. generation 
 776, rounded up to 2^n 
 buffer size 
 node_id vs. generation 
 Adjust the template string if models with longer names appear. 
 FloppyDTV SCI and FloppyDTV S2 
 FloppyDTV TCI 
 FloppyDTV CCI 
 FireDTV SCI and FloppyDTV S2 
 FireDTV TCI 
 FireDTV CCI 
 SPDX-License-Identifier: GPL-2.0-or-later
  FireDTV driver (formerly known as FireSAT)
  Copyright (C) 2004 Andreas Monitzer <andy@monitzer.com>
  Copyright (C) 2008 Henrik Kurelid <henrik@kurelid.se>
 FIXME - allocate free channel at IRM 
 CN[dB] = -10  log10(snr  65535) 
 SPDX-License-Identifier: GPL-2.0-or-later
  FireDTV driver (formerly known as FireSAT)
  Copyright (C) 2004 Andreas Monitzer <andy@monitzer.com>
  Copyright (C) 2008 Henrik Kurelid <henrik@kurelid.se>
DMX_TS_FILTERING | DMX_SECTION_FILTERING
 SPDX-License-Identifier: GPL-2.0-or-later
  FireDTV driver (formerly known as FireSAT)
  Copyright (C) 2004 Andreas Monitzer <andy@monitzer.com>
  Copyright (C) 2008 Henrik Kurelid <henrik@kurelid.se>
 Do we need a semaphore for this? 
 handled in ca_get_msg 
 handled in ca_get_msg 
 FIXME Is this necessary? 
 SPDX-License-Identifier: GPL-2.0-or-later
  GS1662 device registration.
  Copyright (C) 2015-2016 Nexvision
  Author: Charles-Antoine Couret <charles-antoine.couret@nexvision.fr>
 Default value: keep this field before 0xC 
	 Implement following timings before enable it.
	  Because of we don't have access to these theoretical timings yet.
	  Workaround: use functions to get and set registers for these formats.
 SMPTE 274M 
 SMPTE 274M 
 SMPTE 274M 
 SMPTE 260M 
 SMPTE 125M 
 SMPTE 125M 
 SMPTE 428.1M 
 keep this initialization for compatibility with GCC < 4.4.6 
	
	  Check if the component detect a line, a frame or something else
	  which looks like a video signal activity.
 If no register reports a video signal 
 To force the specific format 
 To renable auto-detection mode 
	
	  Check if the component detect a line, a frame or something else
	  which looks like a video signal activity.
 If no register reports a video signal 
 V4L2 core operation handlers 
 V4L2 top level operation handlers 
 Set H_CONFIG to SMPTE timings 
 SPDX-License-Identifier: GPL-2.0
  cxd2880-spi.c
  Sony CXD2880 DVB-T2T tuner + demodulator driver
  SPI adapter
  Copyright (C) 2016, 2017, 2018 Sony Semiconductor Solutions Corporation
 For SPI access exclusive control 
		
		  Special PID case.
		  Number of 0x2000 feed request was stored
		  in dvb_spi->all_pid_feed_count.
 sentinel  }
 sentinel  }
 SPDX-License-Identifier: GPL-2.0-or-later
	Mantis PCI bridge driver
	Copyright (C) Manu Abraham (abraham.manu@gmail.com)
 Error conditions ..	
 mantis_ca_exit(mantis); 
 SPDX-License-Identifier: GPL-2.0-or-later
	Mantis VP-1033 driver
	Copyright (C) Manu Abraham (abraham.manu@gmail.com)
 SPDX-License-Identifier: GPL-2.0-or-later
	Mantis VP-3030 driver
	Copyright (C) Manu Abraham (abraham.manu@gmail.com)
 16 MHz 
 16 MHz 
 SPDX-License-Identifier: GPL-2.0-or-later
	Mantis PCI bridge driver
	Copyright (C) Manu Abraham (abraham.manu@gmail.com)
 upper limit: 4095 bytes. 
 MANTIS_BUF_SIZE  MANTIS_DMA_TR_UNITS must not exceed MANTIS_RISC_SIZE (4k RISC cmd buffer) 
 RISC program must fit here. 
 Stop RISC Engine 
 SPDX-License-Identifier: GPL-2.0-or-later
	Mantis PCI bridge driver
	Copyright (C) Manu Abraham (abraham.manu@gmail.com)
 temporary due to physical layer stuff 
  If Slot state is already PLUG_IN event and we are called
  again, definitely it is jitter alone
  If Slot state is already UN_PLUG event and we are called
  again, definitely it is jitter alone
 SPDX-License-Identifier: GPL-2.0-or-later
	Mantis VP-2033 driver
	Copyright (C) Manu Abraham (abraham.manu@gmail.com)
 wait for the pll lock 
 switch the charge pump to the lower current 
 SPDX-License-Identifier: GPL-2.0-or-later
	Mantis PCI bridge driver
	Copyright (C) Manu Abraham (abraham.manu@gmail.com)
 SPDX-License-Identifier: GPL-2.0-or-later
	Mantis PCI bridge driver
	Copyright (C) Manu Abraham (abraham.manu@gmail.com)
 get data 
	
	  MANTIS_UART_RXFIFO_DATA is only set if at least
	  config->bytes + 1 bytes are in the FIFO.
 FIXME: is 10ms good enough ? 
 re-enable UART (RX) interrupt 
 default parity: 
 disable interrupt 
 default 1 byte 
 flush buffer 
 enable interrupt 
 disable interrupt 
 SPDX-License-Identifier: GPL-2.0-or-later
	Mantis VP-2040 driver
	Copyright (C) Manu Abraham (abraham.manu@gmail.com)
 wait for the pll lock 
 switch the charge pump to the lower current 
 SPDX-License-Identifier: GPL-2.0-or-later
	Mantis PCI bridge driver
	Copyright (C) Manu Abraham (abraham.manu@gmail.com)
 temporary due to physical layer stuff 
 Slot0 alone for now 
 SPDX-License-Identifier: GPL-2.0-or-later
	Mantis VP-1041 driver
	Copyright (C) Manu Abraham (abraham.manu@gmail.com)
 SYSREG 
 SYSREG 
 SYSREG ? 
 0x11 
 AGCBB2CFG 
 AGCBB1CFG 
 0x15 = 27 Mhz Clock, F3 = 198MHz, F6 = 99MHz 
 0x00 = CLK from CLKI, 0x02 = CLK from XTALI 
 DVB = 0xb1, DSS = 0xa1 
 0x0d for CAM 
  0xd0 >> 1 
 SPDX-License-Identifier: GPL-2.0-or-later
	Hopper PCI bridge driver
	Copyright (C) Manu Abraham (abraham.manu@gmail.com)
 SPDX-License-Identifier: GPL-2.0-or-later
	Hopper VP-3028 driver
	Copyright (C) Manu Abraham (abraham.manu@gmail.com)
 SPDX-License-Identifier: GPL-2.0-or-later
	Mantis PCI bridge driver
	Copyright (C) Manu Abraham (abraham.manu@gmail.com)
 wait for xfer completion 
 wait for xfer completion 
 wait for xfer completion 
 wait for xfer completion 
 Byte MODE 
 Read operation 
 wait for xfer completion 
 check for xfer completion 
 check xfer was acknowledged 
 IO error 
 IO error 
 WriteRead operation in one go 
 SPDX-License-Identifier: GPL-2.0-or-later
	Mantis PCI bridge driver
	Copyright (C) Manu Abraham (abraham.manu@gmail.com)
 Turn the given bit on or off. 
 SPDX-License-Identifier: GPL-2.0-or-later
	Mantis PCI bridge driver
	Copyright (C) Manu Abraham (abraham.manu@gmail.com)
 SPDX-License-Identifier: GPL-2.0-or-later
	Mantis PCI bridge driver
	Copyright (C) Manu Abraham (abraham.manu@gmail.com)
 Wait.. 
 Leading edge assert 
 Trailing edge deassert 
 register CA interface 
 SPDX-License-Identifier: GPL-2.0-or-later
	Mantis VP-1034 driver
	Copyright (C) Manu Abraham (abraham.manu@gmail.com)
 SPDX-License-Identifier: GPL-2.0-or-later
	Mantis PCI bridge driver
	Copyright (C) Manu Abraham (abraham.manu@gmail.com)
 Error conditions 
 SPDX-License-Identifier: GPL-2.0-or-later
	Mantis PCI bridge driver
	Copyright (C) Manu Abraham (abraham.manu@gmail.com)
 SPDX-License-Identifier: GPL-2.0-only
   cobalt driver initialization and card probing
   Derived from cx18-driver.c
   Copyright 2012-2015 Cisco Systems, Inc. andor its affiliates.
   All rights reserved.
 add your revision and whatnot here 
 Clear any existing interrupts 
		 PIO Core interrupt mask register.
 Disable all ADV7604 interrupts 
 Device 
 Link 
 Bus 
 Slot 
 Reset the video inputs before enabling any interrupts 
	 Disable interrupts to prevent any spurious interrupts
 Register IRQ 
		 The Memory DMA channels will always get a lower channel
		  number than the FIFO DMA. Video input should map to the
		  stream 0-3. The other can use stream struct from 4 and
 FIXME: Memory DMA for debug purpose 
 Reset channel video module 
 0x39 or 0x3d 
 Reset channel video module 
 A transmitter is hooked up, so we can set this bit 
 FIXME - module parameter arrays constrain max instances 
 PCI Device Setup 
 Show HDL version info 
 define a pci_driver for card detection 
 SPDX-License-Identifier: GPL-2.0-only
   Cobalt CPLD functions
   Copyright 2012-2015 Cisco Systems, Inc. andor its affiliates.
   All rights reserved.
 List all possible multipliers (= hsdiv  n1). There are lots of duplicates,
   which are all removed in this list to keep the list as short as possible.
   The values for hsdiv and n1 are the actual values, not the register values.
 xtal for si598 
	 The sequence of clock_ctrl flags to set is very weird. It looks
	   like I have to reset it, then set the new frequency and reset it
	   again. It shouldn't be necessary to do a reset, but if I don't,
	   then a strange frequency is set (156.412034 MHz, or register values
	   0x01, 0xc7, 0xfc, 0x7f, 0x53, 0x62).
 SPDX-License-Identifier: GPL-2.0-only
   Omnitek Scatter-Gather DMA Controller
   Copyright 2012-2015 Cisco Systems, Inc. andor its affiliates.
   All rights reserved.
 descriptor 
 controlstatus register 
 Must be 4-byte aligned 
 PCIe address 
		 If dma_addr_t is 32 bits, then addr >> 32 is actually the
 Sync to start of streaming frame 
 Transfer bytes 
				 Make sure there are always at least two
 PCIe address 
				 If dma_addr_t is 32 bits, then addr >> 32
				  is actually the equivalent of addr >> 0 in
 Sync to start of streaming frame 
 Next descriptor + control bits 
 Loopback to the first descriptor 
 SPDX-License-Identifier: GPL-2.0-only
   Cobalt NOR flash functions
   Copyright 2012-2015 Cisco Systems, Inc. andor its affiliates.
   All rights reserved.
 16 bits 
 64MB 
 offset  
 SPDX-License-Identifier: GPL-2.0-only
   cobalt V4L2 API
   Derived from ivtv-ioctl.c and cx18-fileops.c
   Copyright 2012-2015 Cisco Systems, Inc. andor its affiliates.
   All rights reserved.
 vb2 DMA streaming ops 
 Prepare new buffer 
 Set up FDMA packer 
 1080p60 
 Set up FDMA packer 
	 The lower bound for the clock frequency is 0.5% lower as is
 will be enabled after the first frame has been received 
 Try to stop the DMA engine gracefully 
 Stop DMA after this descriptor chain 
 Wait 100 millisecond for DMA to finish, abort on timeout. 
 Return all buffers to user space 
 V4L2 ioctls 
 Check for min (QCIF) and max (Full HD) size 
 Make width multiple of 4 
 Make height multiple of 2 
 Generator => fixed format only 
 Check for min (QCIF) and max (Full HD) size 
 Make width multiple of 4 
 Make height multiple of 2 
 Test Pattern Generator 
 Register device nodes 
 Audio frames are just 4 lines of 1920 bytes 
 Initialize v4l2 variables and register v4l2 devices 
 Setup V4L2 Devices 
 Unregister v4l2 devices 
 Teardown all streams 
 SPDX-License-Identifier: GPL-2.0-only
   ALSA interface to cobalt PCM capture streams
   Copyright 2014-2015 Cisco Systems, Inc. andor its affiliates.
   All rights reserved.
 sc->driver is used by alsa-lib's configurator: simple, unique 
 sc->shortname is a symlink in procasound: COBALT-M -> cardN 
 sc->longname is read from procasoundcards 
 Numbrs steps from "Writing an ALSA Driver" by Takashi Iwai 
 (1) Check and increment the device index 
 This is a no-op for us.  We'll use the cobalt->instance 
 (2) Create a card instance 
 (3) Create a main component 
 (4) Set the driver ID and name strings 
 FIXME - proc files 
 (7) Set the driver data and return 0 
 We do this out of normal order for PCI drivers to avoid races 
 (6) Register the card instance 
 SPDX-License-Identifier: GPL-2.0-only
   ALSA PCM device for the
   ALSA interface to cobalt PCM capture streams
   Copyright 2014-2015 Cisco Systems, Inc. andor its affiliates.
   All rights reserved.
 5 ms of data 
 1 sample = 8  4 bytes 
 5 ms of 8 channel data 
 5 ms of data 
 1 sample = 8  4 bytes 
 5 ms of 8 channel data 
 PCM device 0, the only one for this card 
 0 playback substreams 
 1 capture substream 
 PCM device 0, the only one for this card 
 0 playback substreams 
 1 capture substream 
 SPDX-License-Identifier: GPL-2.0-only
   cobalt interrupt handling
   Copyright 2012-2015 Cisco Systems, Inc. andor its affiliates.
   All rights reserved.
	 Give the fresh filled up buffer to the user.
	  Note that the interrupt is only sent if the DMA can continue
	  with a new buffer, so it is always safe to return this buffer
	 TODO: the sequence number should be read from the FPGA so we
 Clear DMA interrupt 
			 Give fresh buffer to user and chain newly
 SPDX-License-Identifier: GPL-2.0-only
   cobalt I2C functions
   Derived from cx18-i2c.c
   Copyright 2012-2015 Cisco Systems, Inc. andor its affiliates.
   All rights reserved.
 Clock prescaler register lo-byte 
 Clock prescaler register high-byte 
 Control register 
 TransmitReceive register 
 Command and Status register 
 CTR[7:0] - Control register 
 I2C Core enable bit 
 I2C Core interrupt enable bit 
 CR[7:0] - Command register 
 I2C start condition 
 I2C stop condition 
 I2C read from slave 
 I2C write to slave 
 I2C ack 
 I2C Interrupt ack 
 SR[7:0] - Status register 
 Receive acknowledge from slave 
 Busy, I2C bus busy (as defined by start  stop bits) 
 Arbitration lost - core lost arbitration 
 Transfer in progress 
 Interrupt flag 
 Frequency, in Hz 
 Do low-level i2c byte transfer.
  Returns -1 in case of an error or 0 otherwise.
 Setup data 
 Setup command 
 Write + Start 
 Write + Stop 
 Write only 
 Execute command 
 Wait for transfer to complete (TIP = 0) 
 Verify ACK 
 NO ACK! 
 Verify arbitration 
 Arbitration lost! 
 Do low-level i2c byte read.
  Returns -1 in case of an error or 0 otherwise.
 Setup command 
 Read + Start 
 Read + Stop 
 Read only 
 Last byte to read, no ACK 
 Execute command 
 Wait for transfer to complete (TIP = 0) 
 Verify arbitration 
 Arbitration lost! 
 Store data 
 Generate stop condition on i2c bus.
  The m00018 stop isn't doing the right thing (wrong timing).
  So instead send a start condition, 8 zeroes and a stop condition.
 read bytes into buffer 
 write bytes from buffer 
 template for i2c-bit-algo 
 set by i2c-algo-bit 
 filled from template 
 init + register i2c algo-bit adapter 
 Define I2C clock prescaler 
 Disable I2C 
 Disable I2C 
 Calculate i2c prescaler 
 Enable I2C, interrupts disabled 
 Setup algorithm for adapter 
 SPDX-License-Identifier: GPL-2.0-or-later
  driver for Earthsoft PT1PT2
  Copyright (C) 2009 HIRANO Takahito <hiranotaka@zng.info>
  based on pt1dvr - http:pt1dvr.sourceforge.jp
 	by Tomoaki Ishikawa <tomy@users.sourceforge.jp>
 PT1 
 PT2 
 frontend init 
  Init registers for (each pair of) terrestrialsatellite block in demod.
  Note that resetting terr. block also resets its peer sat. block as well.
  This function must be called before configuring any demod block
  (before pt1_wakeup(), fe->ops.init()).
 reset all terr. & sat. pairs first 
 actually 11V 
 actually 15V 
 XXX: The bits should be changed depending on adap->sleep. 
 itself );
 resume anyway 
 CONFIG_PM_SLEEP 
 SPDX-License-Identifier: GPL-2.0-or-later
    Copyright (C) 2006-2010 by Marin Mitov                                
    mitov@issp.bas.bg                                                     
  read_i2c_reg - reads an internal i2c register
  @addr:	dt3155 mmio base address
  @index:	index (internal address) of register to read
  @data:	pointer to byte the read data will be placed in
  returns:	zero on success or error code
  This function starts reading the specified (by index) register
  and busy waits for the process to finish. The result is placed
  in a byte pointed by data.
 wait at least 43 usec for NEW_CYCLE to clear 
 error: NEW_CYCLE not cleared 
 reset DIRECT_ABORT bit 
 error: DIRECT_ABORT set 
  write_i2c_reg - writes to an internal i2c register
  @addr:	dt3155 mmio base address
  @index:	index (internal address) of register to read
  @data:	data to be written
  returns:	zero on success or error code
  This function starts writing the specified (by index) register
  and busy waits for the process to finish.
 wait at least 63 usec for NEW_CYCLE to clear 
 error: NEW_CYCLE not cleared 
 reset DIRECT_ABORT bit 
 error: DIRECT_ABORT set 
  write_i2c_reg_nowait - writes to an internal i2c register
  @addr:	dt3155 mmio base address
  @index:	index (internal address) of register to read
  @data:	data to be written
  This function starts writing the specified (by index) register
  and then returns.
  wait_i2c_reg - waits the readwrite to finish
  @addr:	dt3155 mmio base address
  returns:	zero on success or error code
  This function waits readingwriting to finish.
 wait at least 63 usec for NEW_CYCLE to clear 
 error: NEW_CYCLE not cleared 
 reset DIRECT_ABORT bit 
 error: DIRECT_ABORT set 
 enable interrupts, clear all irq flags 
  start the board  
 stop the board 
 disable interrupts, clear all irq flags 
	
	  It is not clear whether the DMA stops at once or whether it
	  will finish the current frame or field first. To be on the
	  safe side we wait a bit.
  pd->vidq.streaming = 1 when dt3155_buf_queue() is invoked  
 not our irq 
 start of field irq 
 enable interrupts, clear all irq flags 
 dt3155 needs it 
  resetting the adapter  
  initializing adapter registers  
 verifying that we have a DT3155 board (not just a SAA7116 chip) 
 initialize AD LUT 
 initialize ADC references 
 FIXME: pos_ref & neg_ref depend on VT_50HZ 
 initialize PM LUT 
  ACQ_MODE_EVEN  
 select channel 1 for input and set sync level 
 disable all irqs, clear all irq flags 
 for use in video_fops 
 for locking v4l2_file_operations 
 for locking v4l2_file_operations 
   success   
 zero marks the end  },
 SPDX-License-Identifier: GPL-2.0-or-later
   TW5864 driver - video encoding functions
   Copyright (C) 2016 Bluecherry, LLC <maintainers@bluecherrydvr.com>
 channel id 
 analog input width  4 
 output width  4 
	
	  Crop width from 720 to 704.
	  Above register settings need value 720 involved.
 Produce I-frame 
 Produce P-frame 
 SRCH_OPT default );
 input->md_threshold_grid_ctrl->p_new.p_u16 contains data 
		
		  Allow for up to 30 events (1 second for NTSC) to be stored.
	
	  This register value seems to follow such approach: In each second
	  interval, when processing Nth frame, it checks Nth bit of register
	  value and, if the bit is 1, it processes the frame, otherwise the
	  frame is discarded.
	  So unary representation would work, but more or less equal gaps
	  between the frames should be preserved.
	 
	  For 1 FPS - 0x00000001
	  00000000 00000000 00000000 00000001
	 
	  For max FPS - set all 2530 lower bits:
	  00111111 11111111 11111111 11111111 (NTSC)
	  00000001 11111111 11111111 11111111 (PAL)
	 
	  For half of max FPS - use such pattern:
	  00010101 01010101 01010101 01010101 (NTSC)
	  00000001 01010101 01010101 01010101 (PAL)
	 
	  Et cetera.
	 
	  The value supplied to hardware is capped by mask of 2530 lower bits.
 Motion Detection Threshold matrix 
 See tw5864_md_metric_from_mvd() 
 Picture is distorted without this block 
 use falling edge to sample 54M to 108M 
 video input reset 
	
	  Select Part A mode for all channels.
	  tw_setl instead of tw_clearl for Part B mode.
	 
	  I guess "Part B" is primarily for downscaled version of same channel
	  which goes in Part A of same bus
	
	  Quote from Intersil (manufacturer):
	  0x0038 is managed by HW, and by default it won't pass the pointer set
	  at 0x0010. So if you don't do encoding, 0x0038 should stay at '3'
	  (with 4 frames in buffer). If you encode one frame and then move
	  0x0010 to '1' for example, HW will take one more frame and set it to
	  buffer #0, and then you should see 0x0038 is set to '0'.  There is
	  only one HW encoder engine, so 4 channels cannot get encoded
	  simultaneously. But each channel does have its own buffer (for
	  original frames and reconstructed frames). So there is no problem to
	  manage encoding for 4 channels at same time and no need to force
	  I-frames in switching channels.
	  End of quote.
	 
	  If we set 0x0010 (TW5864_ENC_BUF_PTR_REC1) to 0 (for any channel), we
	  have no "rolling" (until we change this value).
	  If we set 0x0010 (TW5864_ENC_BUF_PTR_REC1) to 0x3, it starts to roll
	  continuously together with 0x0038.
 setup video buffers queue 
 Initialize the device control structures 
	
	  Set default video standard. Doesn't matter which, the detected value
	  will be found out by VIDIOC_QUERYSTD handler.
 to initiate auto format recognition 
	
	  Low-level bitstream writing functions don't have a fine way to say
	  correctly that supplied buffer is too small. So we just check there
	  and warn, and don't care at lower level.
	  Currently all headers take below 32 bytes.
	  The buffer is supposed to have plenty of free space at this point,
	  anyway.
	
	  Generate H264 headers:
	  If this is first frame, put SPS and PPS
 Put slice header 
  Returns heuristic motion detection metric value from known components of
  hardware-provided Motion Vector Data.
	
	  Format of motion vector data exposed by tw5864, according to
	  manufacturer:
	  mv_x 10 bits
	  mv_y 10 bits
	  non_zero_members 8 bits
	  mb_type 3 bits
	  reserved 1 bit
	 
	  non_zero_members: number of non-zero residuals in each macro block
	  after quantization
	 
	  unsigned int reserved = mvd >> 31;
	  unsigned int mb_type = (mvd >> 28) & 0x7;
	  unsigned int non_zero_members = (mvd >> 20) & 0xff;
 heuristic: 
 Gone because of disabling 
	
	  Check for space.
	  Mind the overhead of startcode emulation prevention.
 H.264 startcode emulation prevention 
 Check for motion flags 
 P-frame  &&
 SPDX-License-Identifier: GPL-2.0-or-later
   TW5864 driver - core functions
   Copyright (C) 2016 Bluecherry, LLC <maintainers@bluecherrydvr.com>
  BEWARE OF KNOWN ISSUES WITH VIDEO QUALITY
  This driver was developed by Bluecherry LLC by deducing behaviour of
  original manufacturer's driver, from both source code and execution traces.
  It is known that there are some artifacts on output video with this driver:
   - on all known hardware samples: random pixels of wrong color (mostly
     white, red or blue) appearing and disappearing on sequences of P-frames;
   - on some hardware samples (known with H.264 core version e006:2800):
     total madness on P-frames: blocks of wrong luminance; blocks of wrong
     colors "creeping" across the picture.
  There is a workaround for both issues: avoid P-frames by setting GOP size
  to 1. To do that, run this command on device files created by this driver:
  v4l2-ctl --device devvideoX --set-ctrl=video_gop_size=1
  These issues are not decoding errors; all produced H.264 streams are decoded
  properly. Streams without P-frames don't have these artifacts so it's not
  analog-to-digital conversion issues nor internal memory errors; we conclude
  it's internal H.264 encoder issues.
  We cannot even check the original driver's behaviour because it has never
  worked properly at all in our development environment. So these issues may
  be actually related to firmware or hardware. However it may be that there's
  just some more register settings missing in the driver which would please
  the hardware.
  Manufacturer didn't help much on our inquiries, but feel free to disturb
  again the support of Intersil (owner of former Techwell).
 take first free devvideoX indexes by default 
  Please add any new PCI IDs to: https:pci-ids.ucw.cz.  This keeps
  the PCI ID database up to date.  Note that the entries must be
  added under vendor 0x1797 (Techwell Inc.) as subsystem IDs.
 Additional ack for this interrupt 
 Additional ack for this interrupt 
	
	  Traversing inputs in round-robin fashion, starting from next to the
	  last processed one
 id of internal buf with last raw frame 
 Check if new raw frame is available 
 No new raw frame; check if channel is stuck 
 If stuck, request new raw frames again 
 pci init 
 get mmio 
 get irq 
 shutdown subsystems 
 unregister 
 release resources 
 SPDX-License-Identifier: GPL-2.0
 SPDX-License-Identifier: GPL-2.0-or-later
   TW5864 driver - H.264 headers generation functions
   Copyright (C) 2016 Bluecherry, LLC <maintainers@bluecherrydvr.com>
  Exponential-Golomb coding functions
  These functions are used for generation of H.264 bitstream headers.
  This code is derived from tw5864 reference driver by manufacturers, which
  itself apparently was derived from x264 project.
 Bitstream writing context 
 pointer to buffer beginning 
 pointer to buffer end 
 pointer to current byte in buffer 
 number of available bits in current byte 
 H.264 headers generation functions 
 profile_idc, baseline 
 constraint_set0_flag 
 constraint_set1_flag 
 constraint_set2_flag 
 reserved_zero_5bits 
 level_idc 
 seq_parameter_set_id 
 log2_max_frame_num_minus4 
 pic_order_cnt_type 
 log2_max_pic_order_cnt_lsb_minus4 
 num_ref_frames 
 gaps_in_frame_num_value_allowed_flag 
 pic_width_in_mbs_minus1 
 pic_height_in_map_units_minus1 
 frame_mbs_only_flag 
 direct_8x8_inference_flag 
 frame_cropping_flag 
 vui_parameters_present_flag 
 pic_parameter_set_id 
 seq_parameter_set_id 
 entropy_coding_mode_flag 
 pic_order_present_flag 
 num_slice_groups_minus1 
 i_num_ref_idx_l0_active_minus1 
 i_num_ref_idx_l1_active_minus1 
 weighted_pred_flag 
 weighted_bipred_idc 
 pic_init_qp_minus26 
 pic_init_qs_minus26 
 chroma_qp_index_offset 
 deblocking_filter_control_present_flag 
 constrained_intra_pred_flag 
 redundant_pic_cnt_present_flag 
 first_mb_in_slice 
 slice_type - I or P 
 pic_parameter_set_id 
 frame_num 
 pic_order_cnt_lsb 
 no_output_of_prior_pics_flag 
 long_term_reference_flag 
 num_ref_idx_active_override_flag 
 ref_pic_list_reordering_flag_l0 
 adaptive_ref_pic_marking_mode_flag 
 slice_qp_delta 
 SPS 
 SPS NAL header 
 PPS 
 PPS NAL header 
 Frame NAL header 
 SPDX-License-Identifier: GPL-2.0-or-later
  netup_unidvb_core.c
  Main module for NetUP Universal Dual DVB-CI
  Copyright (C) 2014 NetUP Inc.
  Copyright (C) 2014 Sergey Kozlov <serjk@netup.ru>
  Copyright (C) 2014 Abylay Ospan <aospan@netup.ru>
 Avalon-MM PCI-E registers 
 GPIO registers 
 GPIO bits 
 DMA base address 
 8 DMA blocks  128 packets  188 bytes
 DMA status bits 
  struct netup_dma_regs - the map of DMA module registers
  @ctrlstat_set:	Control register, write to set control bits
  @ctrlstat_clear:	Control register, write to clear control bits
  @start_addr_lo:	DMA ring buffer start address, lower part
  @start_addr_hi:	DMA ring buffer start address, higher part
  @size:		DMA ring buffer size register
 			 Bits [0-7]:	DMA packet size, 188 bytes
 			 Bits [16-23]:	packets count in block, 128 packets
 			 Bits [24-31]:	blocks count, 8 blocks
  @timeout:		DMA timeout in units of 8ns
 			For example, value of 375000000 equals to 3 sec
  @curr_addr_lo:	Current ring buffer head address, lower part
  @curr_addr_hi:	Current ring buffer head address, higher part
  @stat_pkt_received:	Statistic register, not tested
  @stat_pkt_accepted:	Statistic register, not tested
  @stat_pkt_overruns:	Statistic register, not tested
  @stat_pkt_underruns:	Statistic register, not tested
  @stat_fifo_overruns:	Statistic register, not tested
 inverted tuner control in hw rev. 1.4 
 enable PCI-E interrupts 
 unreset frontends bits[0:1] 
 clear IRQ 
 sanity check 
 disable interrupts 
 check IRQ source 
 IRQ is being signaled 
 re-enable interrupts 
 Init videobuf2 queue structure 
 DVB-TT2 frontend 
 Check card revision 
www.netup.tv\n");
 allocate device context 
 detect hardware revision 
 PCI init 
 read PCI info 
 Clear "no snoop" and "relaxed ordering" bits, use default MRRS. 
 Adjust PCIe completion timeout. 
 enable I2C IRQs 
 hw rev. 1.3 
 hw rev. 1.4 
 SPDX-License-Identifier: GPL-2.0-or-later
  netup_unidvb_ci.c
  DVB CAM support for NetUP Universal Dual DVB-CI
  Copyright (C) 2014 NetUP Inc.
  Copyright (C) 2014 Sergey Kozlov <serjk@netup.ru>
  Copyright (C) 2014 Abylay Ospan <aospan@netup.ru>
 CI slot 0 base address 
 CI slot 1 base address 
 ctrlstat registers 
 register bits 
 BIT_CAM_BYPASS bit shift for SLOT 1 
 pass data to CAM module 
 start reset 
 wait until reset done 
 SPDX-License-Identifier: GPL-2.0-or-later
  netup_unidvb_spi.c
  Internal SPI driver for NetUP Universal Dual DVB-CI
  Copyright (C) 2014 NetUP Inc.
  Copyright (C) 2014 Sergey Kozlov <serjk@netup.ru>
  Copyright (C) 2014 Abylay Ospan <aospan@netup.ru>
 16MB 
 reset CS 
 SPDX-License-Identifier: GPL-2.0-or-later
  netup_unidvb_i2c.c
  Internal I2C bus driver for NetUP Universal Dual DVB-CI
  Copyright (C) 2014 NetUP Inc.
  Copyright (C) 2014 Sergey Kozlov <serjk@netup.ru>
  Copyright (C) 2014 Abylay Ospan <aospan@netup.ru>
 twi_ctrl0_stat reg bits 
 twi_addr_ctrl1 reg bits
 twi_clkdiv reg value 
 fifo_stat_ctrl reg bits 
 FIFO size 
 remove adapter 
 SPDX-License-Identifier: GPL-2.0-or-later
    buffer queues.
    Copyright (C) 2003-2004  Kevin Thayer <nufan_wfk at yahoo.com>
    Copyright (C) 2004  Chris Kennedy <c@groovy.org>
    Copyright (C) 2005-2007  Hans Verkuil <hverkuil@xs4all.nl>
 clear the buffer if it is going to be enqueued to the free queue 
 special handling for q_free 
 Move 'needed_bytes' worth of buffers from queue 'from' into queue 'to'.
   If 'needed_bytes' == 0, then move all buffers from 'from' into 'to'.
   If 'steal' != NULL, then buffers may also taken from that queue if
   needed, but only if 'from' is the free queue.
   The buffer is automatically cleared if it goes to the free queue. It is
   also cleared if buffers need to be taken from the 'steal' queue and
   the 'from' queue is the free queue.
   When 'from' is q_free, then needed_bytes is compared to the total
   available buffer length, otherwise needed_bytes is compared to the
   bytesused value. For the 'steal' queue the total available buffer
   length is always used.
   -ENOMEM is returned if the buffers could not be obtained, 0 if all
   buffers where obtained from the 'from' list and if non-zero then
		 move buffers from the tail of the 'steal' queue to the tail of the
		   'from' queue. Always copy all the buffers with the same dma_xfer_cnt
		   value, this ensures that you do not end up with partial frame data
 allocate stream buffers. Initially all buffers are in q_free. 
 move all buffers to q_free 
 empty q_free 
 Free SG ArrayLists 
 SPDX-License-Identifier: GPL-2.0-or-later
    Audiovideo-routing-related ivtv functions.
    Copyright (C) 2003-2004  Kevin Thayer <nufan_wfk at yahoo.com>
    Copyright (C) 2005-2007  Hans Verkuil <hverkuil@xs4all.nl>
 Selects the audio input and output according to the current
 Determine which input to use 
 handle muxer chips 
 Selects the video input and output according to the current
 Tuner 
 S-Video 
 Composite 
 Composite: GR on, connect to 3DYCS 
 S-Video: GR bypassed, turn it off 
			 S-Video uses YCNR mode and internal Y-ADC, the
			 Use upd64031a output for tuner and
 SPDX-License-Identifier: GPL-2.0-or-later
    Functions to query card hardware
    Copyright (C) 2003-2004  Kevin Thayer <nufan_wfk at yahoo.com>
    Copyright (C) 2005-2007  Hans Verkuil <hverkuil@xs4all.nl>
 usual i2c tuner addresses to probe 
 as above, but with possible radio tuner 
 using the tda8290+75a combo 
 card configuration 
 Please add new PCI IDs to: https:pci-ids.ucw.cz
   This keeps the PCI ID database up to date. Note that the entries
   must be added under vendor 0x4444 (Conexant) as subsystem IDs.
 Hauppauge PVR-250 cards 
 Note: for Hauppauge cards the tveeprom information is used instead of PCI IDs 
 ------------------------------------------------------------------------- 
 Hauppauge PVR-350 cards 
 Outputs for Hauppauge PVR350 cards 
 PVR-350 V1 boards have a different audio tuner input and use a
   saa7114 instead of a saa7115.
   Note that the info below comes from a pre-production model so it may
 ------------------------------------------------------------------------- 
 Hauppauge PVR-150PVR-500 cards 
 apparently needed for the IR blaster 
 ------------------------------------------------------------------------- 
 AVerMedia M179 cards 
 As far as we know all M179 cards use this tuner 
 ------------------------------------------------------------------------- 
 Yuan MPG600Kuroutoshikou ITVC16-STVLP cards 
 The PAL tuner is confirmed 
 ------------------------------------------------------------------------- 
 Yuan MPG160Kuroutoshikou ITVC15-STVLP cards 
 ------------------------------------------------------------------------- 
 Yuan PG600Diamond PVR-550 cards 
 ------------------------------------------------------------------------- 
 Adaptec VideOh! AVC-2410 card 
	 This card has no eeprom and in fact the Windows driver relies
	   on the countryregion setting of the user to decide which tuner
 ------------------------------------------------------------------------- 
 Adaptec VideOh! AVC-2010 card 
 Does not have a tuner 
 ------------------------------------------------------------------------- 
 Nagase Transgear 5000TV card 
 ------------------------------------------------------------------------- 
 AOpen VA2000MAX-SNT6 card 
 ------------------------------------------------------------------------- 
 Yuan MPG600GRKuroutoshikou CX23416GYC-STVLP cards 
 ------------------------------------------------------------------------- 
 IO Data GV-MVPRX & GV-MVPRX2W (dual tuner) cards 
 2W unit #1 
 2W unit #2 
 This card has the Panasonic VP27 tuner 
 ------------------------------------------------------------------------- 
 IO Data GV-MVPRX2E card 
 This card has the Panasonic VP27 tuner 
 ------------------------------------------------------------------------- 
 GotVIEW PCI DVD card 
 pin 116 
 pin 114109 
 pin 118 
 This card has a Philips FQ1216ME MK3 tuner 
 ------------------------------------------------------------------------- 
 GotVIEW PCI DVD2 Deluxe card 
 This card has a Philips FQ1216ME MK5 tuner 
 ------------------------------------------------------------------------- 
 Yuan MPC622 miniPCI card 
 This card has the TDA8290TDA8275 tuner chips 
 ------------------------------------------------------------------------- 
 DIGITAL COWBOY DCT-MTVP1 card 
 ------------------------------------------------------------------------- 
 Yuan PG600-2GotView PCI DVD Lite cards 
	 XC2028 support apparently works for the Yuan, it's still
 ------------------------------------------------------------------------- 
 Club3D ZAP-TV1x01 cards 
 ------------------------------------------------------------------------- 
 AVerTV MCE 116 Plus (M116) card 
 enable line-in 
 ------------------------------------------------------------------------- 
 AVerMedia PVR-150 Plus  AVerTV M113 cards with a DaewooPartsnic Tuner 
 NTSC 
 NTSC FM 
 The 74HC4052 Dual 4:1 multiplexer is controlled by 2 GPIO lines 
 Subsystem ID's 0xc03[45] have a Partsnic PTI-5NF05 tuner 
 Subsystem ID 0xc035 has a TEA5767(?) FM tuner, 0xc034 does not 
 ------------------------------------------------------------------------- 
 AVerMedia UltraTV 1500 MCE (newer non-cx88 version, M113 variant) card 
 NTSC 
 PALSECAM 
 The 74HC4052 Dual 4:1 multiplexer is controlled by 2 GPIO lines 
 The UltraTV 1500 MCE has a Philips FM1236 MK5 TVFM tuner 
 ------------------------------------------------------------------------- 
 AVerMedia EZMaker PCI Deluxe card 
 Does not have a tuner 
 ------------------------------------------------------------------------- 
 ASUS Falcon2 
 ------------------------------------------------------------------------- 
 AVerMedia M104 miniPCI card 
IVTV_CAP_ENCODER,
 enable line-in + reset tuner 
 ------------------------------------------------------------------------- 
 Buffalo PC-MV5LPCI cards 
 ------------------------------------------------------------------------- 
 Sony Kikyou 
 0x200? Disable for now. 
 SAP 
	 Variations of standard cards but with the same PCI IDs.
 SPDX-License-Identifier: GPL-2.0-or-later
    Vertical Blank Interval support functions
    Copyright (C) 2004-2007  Hans Verkuil <hverkuil@xs4all.nl>
	 When using a 50 Hz system, always turn on the
	   wide screen signal with 4x3 ratio as the default.
	   Turning this signal on and off can confuse certain
	   TVs. As far as I can tell there is no reason not to
 4x3 full format 
 start of vbi data 
		 All lines are used, so there is no space for the linemask
		   (the max size of the VBI data is 36  43 + 4 bytes).
 unknown VBI data, convert to empty VBI frame 
 Compress raw VBI format, removes leading SAV codes and surplus space after the
   field.
 Look for SAV code 
 Compressed VBI format, all found sliced blocks put next to one another
 find the first valid line 
 Look for SAV code  
 Raw VBI data 
 second field of the frame? 
			 Dirty hack needed for backwards
 Sliced VBI data with data insertion 
 first field 
 second field 
		 experimentation shows that the second half does not always begin
 always return at least one empty line 
 Sliced VBI re-inserted from an MPEG stream 
		 If the size is not 4-byte aligned, then the starting address
		   for the swapping is also shifted. After swapping the data the
		   real start address of the VBI data is exactly 4 bytes after the
		   original start. It's a bit fiddly but it works like a charm.
		   Non-4-byte alignment happens when an lseek is done on the input
		   mpeg file to a non-4-byte aligned position. So on arrival here
 Swap Buffer 
 Lock 
 4x3 full format 
 SPDX-License-Identifier: GPL-2.0-or-later
   ALSA interface to ivtv PCM capture streams
   Copyright (C) 2009,2012  Andy Walls <awalls@md.metrocast.net>
   Copyright (C) 2009  Devin Heitmueller <dheitmueller@kernellabs.com>
   Portions of this work were sponsored by ONELAN Limited for the cx18 driver
 FIXME - take any other stopping actions needed 
 sc->driver is used by alsa-lib's configurator: simple, unique 
 sc->shortname is a symlink in procasound: IVTV-M -> cardN 
 sc->longname is read from procasoundcards 
 Numbrs steps from "Writing an ALSA Driver" by Takashi Iwai 
 (1) Check and increment the device index 
 This is a no-op for us.  We'll use the itv->instance 
 (2) Create a card instance 
 use first available id if not specified otherwise
 xid from end of shortname
 (3) Create a main component 
 (4) Set the driver ID and name strings 
 (5) Create other components: PCM, & proc files 
 FIXME - proc files 
 (7) Set the driver data and return 0 
 We do this out of normal order for PCI drivers to avoid races 
 (6) Register the card instance 
 FIXME - pointer checks & shutdown itvsc 
 suppress compiler warning 
    initstartstopexit stream functions
    Copyright (C) 2003-2004  Kevin Thayer <nufan_wfk at yahoo.com>
    Copyright (C) 2004  Chris Kennedy <c@groovy.org>
    Copyright (C) 2005-2007  Hans Verkuil <hverkuil@xs4all.nl>
    This program is free software; you can redistribute it andor modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 License: GPL
  Author: Kevin Thayer <nufan_wfk at yahoo dot com>
  This file will hold API related functions, both internal (firmware api)
  and external (v4l2, etc)
  -----
  MPG600MPG160 support by  T.Adachi <tadachi@tadachi-net.com>
                       and Takeru KOMORIYA<komoriya@paken.org>
  AVerMedia M179 GPIO info by Chris Pinkham <cpinkham@bc2va.org>
                 using information provided by Jiun-Kuei Jung @ AVerMedia.
 for ivtv_default() 
 for ivtv_default() 
 for ivtv_default() 
 offset from 0 to register decoder mpg v4l2 minors on 
 offset from 0 to register pcm v4l2 minors on 
 offset from 0 to register yuv v4l2 minors on 
 offset from 0 to register decoder yuv v4l2 minors on 
 offset from 0 to register decoder vbi input v4l2 minors on 
 offset from 0 to register vbi output v4l2 minors on 
 IVTV_ENC_STREAM_TYPE_MPG 
 IVTV_ENC_STREAM_TYPE_YUV 
 IVTV_ENC_STREAM_TYPE_VBI 
 IVTV_ENC_STREAM_TYPE_PCM 
 IVTV_ENC_STREAM_TYPE_RAD 
 IVTV_DEC_STREAM_TYPE_MPG 
 IVTV_DEC_STREAM_TYPE_VBI 
 IVTV_DEC_STREAM_TYPE_VOUT 
 IVTV_DEC_STREAM_TYPE_YUV 
 we need to keep vdev, so restore it afterwards 
 initialize ivtv_stream fields 
	 These four fields are always initialized. If vdev.v4l2_dev == NULL, then
	   this stream is not in use. In that case no other fields but these
 Check whether the radio is supported 
	 User explicitly selected 0 buffers for these streams, so don't
 Initialize v4l2 variables and prepare v4l2 devices 
 Setup V4L2 Devices 
 Prepare device 
 Allocate Stream 
 One or more streams could not be initialized. Clean 'em all up. 
 card number + user defined offset + device offset 
 Register device. First try the desired minor, then any free one. 
 Register v4l2 devices 
 Register V4L2 devices 
 One or more streams could not be initialized. Clean 'em all up. 
 Unregister v4l2 devices 
 Teardown all streams 
 Reset VBI 
 setup VBI registers 
	 determine number of lines and total number of VBI bytes.
	   A raw line takes 1443 bytes: 2  720 + 4 byte frame header - 1
	   The '- 1' byte is probably an unused U or V byte. Or something...
	   A sliced line takes 51 bytes: 4 byte frame header, 4 byte internal
	 Note: sliced vs raw flag doesn't seem to have any effect
 Every X number of frames a VBI interrupt arrives (frames as in 25 or 30 fps) 
 The VBI frames are stored in a ringbuffer with this size (with a VBI frame as unit) 
	 The startstop codes determine which VBI lines end up in the raw VBI data area.
	   The codes are from table 24 in the saa7115 datasheet. Each rawslicedvideo line
	   is framed with codes FF0000XX where XX is the SAVEAV (StartEnd of Active Video)
	   code. These values for raw VBI are obtained from a driver disassembly. The sliced
	   startstop codes was deduced from this, but they do not appear in the driver.
	   Other code pairs that I found are: 0x250E62490x13545454 and 0x252562620x38137F54.
 Setup VBI for the cx25840 digitizer 
 Lines per frame 
 bytes per line 
 Setup VBI for the saa7115 digitizer 
 Lines per frame 
 bytes per line 
 returns the VBI encoder memory area. 
	 select VBI lines.
	 Remaining VBI questions:
	   - Is it possible to select particular VBI lines only for inclusion in the MPEG
	   stream? Currently you can only get the first X lines.
	   - Is mixed raw and sliced VBI possible?
	   - What's the meaning of the rawsliced flag?
 Stop Passthrough 
 video+audio+decoder 
 Clear Streamoff flags in case left from last capture 
		 Always use frame based mode. Experiments have demonstrated that byte
		   stream based mode results in dropped frames and corruption. Not often,
		   but occasionally. Many thanks go to Leonard Orb who spent a lot of
 1 frame per DMA 
ivtv_vapi(itv, CX2341X_ENC_SET_DMA_BLOCK_SIZE, 2, 128, 0); 
 Stuff from Windows, we don't know what it is 
		 According to the docs, this should be correct. However, this is
		   untested. I don't dare enable this without having tested it.
		   Only very few old cards actually have this hardware combination.
		ivtv_vapi(itv, CX2341X_ENC_SET_VERT_CROP_LINE, 1,
			((itv->hw_flags & IVTV_HW_SAA7114) && itv->is_60hz) ? 10001 : 0);
 assign placeholder 
 cx25840 
 Setup VBI 
 assign program index info. Mask 7: select IPB, Num_req: 400 max 
 Setup API for Stream 
 mute if capturing radio 
 Vsync Setup 
 event notification (on) 
 Clear all Pending Interrupts 
 Initialize Digitizer for Capture 
 Avoid tinny audio problem - ensure audio clocks are going 
 Avoid unpredictable PCI bus hang - disable video clocks 
 begin_capture 
 Start Passthrough 
 you're live! sit back and await interrupts :) 
 set audio mode to leftstereo  for dualstereo mode. 
 set number of internal decoder buffers 
 prebuffering 
 extract from user packets 
 set decoder source settings 
	 Data type: 0 = mpeg from host,
	   1 = yuv from encoder,
 Fake size to avoid switching video standard 
 Decoder sometimes dies here, so wait a moment 
 Known failure point for firmware, so check 
 already started 
 set dma size to 65536 bytes 
 Clear Streamoff 
 Zero out decoder counters 
 turn on notification of dualstereo mode change 
 start playback 
 Let things settle before we actually start 
 Clear the following Interrupt mask bits for decoding 
 you're live! sit back and await interrupts :) 
	 This function assumes that you are allowed to stop the capture
 Stop Capture Mode 
 end_capture 
 when: 0 =  end of GOP  1 = NOW!, type: 0 = mpeg, subtype: 3 = video+audio 
 only run these if we're shutting down the last cap 
 wait 2s for EOS interrupt 
			 To convert jiffies to ms, we must multiply by 1000
			  and divide by HZ.  To avoid runtime division, we
			  convert this to multiplication by 1000HZ.
			  Since integer division truncates, we get the best
			  accuracy if we do a rounding calculation of the constant.
			  Think of the case where HZ is 1024.
 Handle any pending interrupts 
 Clear capture and no-read bits 
 Set the following Interrupt mask bits for capture 
 event notification (off) 
 type: 0 = refresh 
 onoff: 0 = off, intr: 0x10000000, mbox_id: -1: none 
	 Raw-passthrough is implied on start. Make sure it's stopped so
 Stop Decoder 
 Wait until the decoder is no longer running 
 turn off notification of dualstereo mode change 
 decoder needs time to settle 
 decrement decoding 
 wake up wait queues 
	 Prevent others from startingstopping streams while we
 Fully initialize stream, and then unflag init 
 Setup YUV Decoder 
 Start Decoder 
 Setup capture if not already done 
 Start Passthrough Mode 
 Stop Passthrough Mode 
 SPDX-License-Identifier: GPL-2.0-or-later
    file operation functions
    Copyright (C) 2003-2004  Kevin Thayer <nufan_wfk at yahoo.com>
    Copyright (C) 2004  Chris Kennedy <c@groovy.org>
    Copyright (C) 2005-2007  Hans Verkuil <hverkuil@xs4all.nl>
 This function tries to claim the stream for a specific file descriptor.
   If no one else is using this stream then the stream is claimed and
   associated VBI streams are also automatically claimed.
   Possible error returns: -EBUSY if someone else has claimed
 someone already claimed this stream 
 yes, this file descriptor did. So that's OK. 
			 VBI is handled already internally, now also assign
			   the file descriptor to this stream for external
 someone else is using this stream already 
 Enable reinsertion interrupt 
	 IVTV_DEC_STREAM_TYPE_MPG needs to claim IVTV_DEC_STREAM_TYPE_VBI,
	   IVTV_ENC_STREAM_TYPE_MPG needs to claim IVTV_ENC_STREAM_TYPE_VBI
	   (provided VBI insertion is on and sliced VBI is selected), for all
 Enable reinsertion interrupt 
 mark that it is used internally 
 This function releases a previously claimed stream. It will take into
 this stream is still in use internally 
 disable reinsertion interrupt 
	 IVTV_DEC_STREAM_TYPE_MPG needs to release IVTV_DEC_STREAM_TYPE_VBI,
	   IVTV_ENC_STREAM_TYPE_MPG needs to release IVTV_ENC_STREAM_TYPE_VBI,
 clear internal use flag 
 was already cleared 
 VBI stream still claimed by a file descriptor 
 disable reinsertion interrupt 
 1=I, 2=P, 4=B
 Process pending program info updates and pending VBI data 
 byteswap and process VBI data 
 do we have leftover data? 
 do we have new data? 
 byteswap MPG data 
 byteswap and process VBI data 
 return if end of stream 
 return if file was opened with O_NONBLOCK 
 wait for more data to arrive 
 New buffers might have become available before we were added to the waitqueue 
 return if a signal was received 
 all stuffing bytes must be 0xff 
	IVTV_INFO("copied %lld %d %d %d %d %d vbi %d\n", itv->mpg_data_received, len, ucount,
			buf->readpos, buf->bytesused, buf->bytesused - buf->readpos - len,
 shouldn't happen 
	 Each VBI buffer is one frame, the v4l2 API says that for VBI the frames should
 if there is no data available... 
 if we got data, then return that regardless 
 EOS condition 
 set errno 
 you cannot read from these stream types. 
 Try to claim this stream. 
 This stream does not need to start capturing 
	 If capture is already in progress, then we also have to
 Start VBI capture if required 
		 Note: the IVTV_ENC_STREAM_TYPE_VBI is claimed
		   automatically when the MPG stream is claimed.
 Failure, clean up and return an error 
 also releases the associated VBI stream 
 Tell the card to start capturing 
 We're done 
 Resume a possibly paused encoder 
 failure, clean up 
	 Note: the IVTV_ENC_STREAM_TYPE_VBI is released
	   automatically when the MPG stream is released.
 someone else is using this stream already 
 not decoder streams 
 Try to claim this stream 
 This stream does not need to start any decoding 
 Start decoder (returns 0 if already started) 
 failure, clean up 
	 If possible, just DMA the entire frame - Check the data transfer size
 Gather buffers 
 New buffers might have become free before we were added to the waitqueue 
 copy user data into buffers 
		 yuv is a pain. Don't copy more data than needed for a single
 Make sure we really got all the user data 
 If we have a complete yuv frame, break loop now 
 incomplete, leave in q_io for next time 
 Byteswap MPEG buffer 
	 more user data is available, wait until buffers become free
 add stream's waitq to the poll list 
	 If there are subscribed events, then only use the new event
 Turn off the old-style vsync events 
		 This is the old-style API which is here only for backwards
 Allow write if buffers are available for writing 
 Start a capture if there is none 
 add stream's waitq to the poll list 
 'Unclaim' this stream 
 Stop capturing 
		 Special case: a running VBI capture for VBI insertion
 Also used internally, don't stop capturing 
 Restore registers we've changed & clean up any mess 
 Stop decoding 
 Stop radio 
 Closing radio device, return to TV mode 
 Mark that the radio is no longer in use 
 Switch tuner to TV 
 Select correct audio input (i.e. TV tuner or Line in) 
 Undo video mute 
 Done! Unmute and continue. 
 Easy case first: this stream was never claimed by us 
 'Unclaim' this stream 
		 If all output streams are closed, and if the user doesn't have
 disable CC on TV-out 
 Unless ivtv_fw_debug is set, error out if firmware dead. 
 return -ENODEV; 
 Allocate memory 
				 switching to radio while capture is
 Mark that the radio is being used. 
 We have the radio 
 Switch tuner to radio 
 Select the correct audio input (i.e. radio tuner) 
 Done! Unmute and continue. 
 YUV or MPG Decoding Mode? 
 For yuv, we need to know the dma size before we start 
 SPDX-License-Identifier: GPL-2.0-or-later
 interrupt handling
    Copyright (C) 2003-2004  Kevin Thayer <nufan_wfk at yahoo.com>
    Copyright (C) 2004  Chris Kennedy <c@groovy.org>
    Copyright (C) 2005-2007  Hans Verkuil <hverkuil@xs4all.nl>
 Pass the PCM data to ivtv-alsa 
		
		  Users should not be using both the ALSA and V4L2 PCM audio
		  capture interfaces at the same time.  If the user is doing
		  this, there maybe a buffer in q_io to grab, use, and put
		  back in rotation.
 trigger PIO complete user interrupt 
 Copy the data from the card to the buffer 
 Determine the required DMA size, setup enough buffers in the predma queue and
   actually copy the data from the card to the buffers in case a PIO transfer is
   required for this stream.
 sanity checks 
 determine offset, size and PTS for the various streams 
 shouldn't happen 
 if this is the start of the DMA then fill in the magic cookie 
		 The size for the Y samples needs to be rounded upwards to a
		   multiple of the buf_size. The UV samples then start in the
 Insufficient buffers 
 got the buffers, now fill in sg_pending 
 Sync SG buffers 
 YUV 
 process the UV section 
 Sync Buffer 
 flag byteswap ABCD -> DCBA for MPG & VBI data outside irq 
 Parse and Groom VBI Data 
		
		  Set up the work handler to pass the data to ivtv-alsa.
		 
		  We just use q_full and let the work handler race with users
		  making ivtv-fileops.c calls on the PCM device node.
		 
		  Users should not be using both the ALSA and V4L2 PCM audio
		  capture interfaces at the same time.  If the user does this,
		  fragments of data will just go out each interface as they
		  race for PCM data.
 Insert buffer block for YUV if needed 
 YUV UV Offset from Y Buffer 
 Sync SG buffers 
 Sync Hardware SG List of buffers 
 Sync Hardware SG List of buffers 
 Sync Hardware SG List of buffers 
 start the encoder DMA 
	 If this is an MPEG stream, and VBI data is also pending, then append the
	   VBI DMA to the MPEG DMA and transfer both sets of data at once.
	   VBI DMA is a second class citizen compared to MPEG and mixing them together
	   will confuse the firmware (the end of a VBI DMA is seen as the end of a
	   MPEG DMA, thus effectively dropping an MPEG frame). So instead we make
	   sure we only use the MPEG DMA to transfer the VBI DMA if both are in
 Too many retries, give up on this frame 
				 Retry, starting with the first xfer segment.
 DMA next buffer 
		 For some reason must kick the firmware, like PIO mode,
		   I think this tells the firmware we are done and the size
		   of the xfer so it can calculate what we need next.
		   I think we can do this part ourselves but would have to
		   fully calculate xfer info ourselves and not use interrupts
 Free last DMA call 
 Too many retries, give up on this frame 
			 Retry, starting with the first xfer segment.
 DMA next buffer 
	
	  We do not write back to the IVTV_REG_DMASTATUS register to
	  clear the error status, if either the encoder write (0x02) or
	  decoder read (0x01) bus master DMA operation do not indicate
	  completed.  We can race with the DMA engine, which may have
	  transitioned to completed status after we read the register.
	  Setting a IVTV_REG_DMASTATUS flag back to "busy" status, after the
	  DMA engine has completed, will cause the DMA engine to stop working.
 retry 
			
			  FIXME - handle cases of DMA error similar to
			  encoder below, except conditioned on status & 0x1
				
				  CX2341x Bus Master DMA write is ongoing.
				  Reset the timer and let it complete.
				
				  CX2341x Bus Master DMA write has ended.
				  Retry the write, starting with the first
				  xfer segment. Just retrying the current
				  segment is not sufficient.
 Too many retries, give up on this one 
 Get DMA destination and size arguments from card 
 YUV or MPG 
	 The vsync interrupt is unusual in that it won't clear until
	  the end of the first line for the current field, at which
	  point it clears itself. This can result in repeated vsync
	  interrupts, or a missed vsync. Read some of the registers
	  to determine the line being displayed and ensure we handle
	  one vsync per frame.
 Send VBI to saa7127 
 Check if we need to update the yuv registers 
 get contents of irq status register 
 Clear out IRQ 
		 The vsync interrupt is unusual and clears itself. If we
		  took too long, we may have missed it. Do some checks
 vsync is enabled, see if we're in a new field 
 New field, looks like we missed it 
 No Vsync expected, wasn't for us 
	 Exclude interrupts noted below from the output, otherwise the log is flooded with
 Decoder Vertical Sync - We can't rely on 'combo', so check if vsync enabled 
ivtv_vapi(itv, CX2341X_ENC_REFRESH_INPUT, 0); 
	 If we've just handled a 'forced' vsync, it's safest to say it
	  wasn't ours. Another device may have triggered it at just
	  the right time.
 SPDX-License-Identifier: GPL-2.0-or-later
    ivtv firmware functions.
    Copyright (C) 2003-2004  Kevin Thayer <nufan_wfk at yahoo.com>
    Copyright (C) 2004  Chris Kennedy <c@groovy.org>
    Copyright (C) 2005-2007  Hans Verkuil <hverkuil@xs4all.nl>
 Encoderdecoder firmware sizes 
			 Due to race conditions in firmware loading (esp. with udev <0.95)
			   the wrong file was sometimes loaded. So we check filesizes to
			   see if at least the right-sized file was loaded. If not, then we
 no need for endianness conversion on the ppc 
 Encoder 
 Decoder 
	 mailbox is preceded by a 16 byte 'magic cookie' starting at a 256-byte
 load firmware 
 start firmware 
 find mailboxes and ping firmware 
 Firmware okay, so check yuv output filter table 
 YUV source width 
	data[3] = itv->cxhdl.audio_properties;	 Audio settings to use,
 Try to restart the card & restore previous settings 
 Display test image during restart 
 Allow settings to reload 
 Restore encoder video standard 
 Restore decoder video standard 
 Restore framebuffer if active 
 Restore alpha settings 
 Restore normal output 
 Check firmware running state. The checks fall through
 Check encoder is still running 
 Also check audio. Only check if not in use & encoder is okay 
 Second audio check. Skip if audio already failed 
 Wait & try again to be certain. 
 Check decoder is still running 
 If something failed & currently idle, try to reload 
		
		  Even if restarted ok, still signal a problem had occurred.
		  The caller can come through this function again to check
		  if things are really ok after the restart.
 SPDX-License-Identifier: GPL-2.0-or-later
    ioctl system call
    Copyright (C) 2003-2004  Kevin Thayer <nufan_wfk at yahoo.com>
    Copyright (C) 2005-2007  Hans Verkuil <hverkuil@xs4all.nl>
 No change? 
 Single step video and no need to change direction 
 Need to change direction 
 If not decoding, just change speed setting 
 Stop all DMA and decoding activity 
 Wait for any DMA to finish 
 Change Speed safely 
 forces ivtv_set_speed to be called 
 YUV size is (Y=(h720) + UV=(h(7202))) 
 YUV size is (Y=(hw) + UV=(h(w2))) 
 YUV height must be a multiple of 32 
 set sliced VBI capture format 
	 Why can the height be 576 even when the output is NTSC?
	   Internally the buffers of the PVR350 are always set to 720x576. The
	   decoded video frame will always be placed in the top left corner of
	   this buffer. For any video which is not 720x576, the buffer will
	   then be cropped to remove the unused right and lower areas, with
	   the remaining image being scaled by the hardware to fit the display
	   area. The video can be scaled both up and down, so a 720x480 video
	   can be displayed full-screen on PAL and a 720x576 video can be
	   displayed without cropping on NTSC.
	   Note that the scaling only occurs on the video stream, the osd
	   resolution is locked to the broadcast standard and not scaled.
 Return now if we already have some frame data 
 set it to defaults from our table 
 set it to defaults from our table 
	 Set the audio input to whatever is appropriate for the
	 prevent others from messing with the streams until
 Tuner 
 set display standard 
	
	  The next firmware call is time sensitive. Time it to
	  avoid risk of a hard lock, by trying to ensure the call
	  happens within the first 100 lines of the top field.
	  Make 4 attempts to sync to the decoder before giving up.
		 Switching standard would mess with already running
 Uses a 256-entry RGB colormap 
 Uses a 256-entry YUV colormap 
 no local alpha for RGB565 or unknown formats 
 16-bit formats have inverted local alpha 
 16-bit formats have inverted local alpha 
 Mark that this file handle started the UDMA_YUV mode 
 SPDX-License-Identifier: GPL-2.0-or-later
    ioctl control functions
    Copyright (C) 2003-2004  Kevin Thayer <nufan_wfk at yahoo.com>
    Copyright (C) 2005-2007  Hans Verkuil <hverkuil@xs4all.nl>
 First try to allocate sliced VBI buffers if needed. 
 Yuck, hardcoded. Needs to be a define 
 Need sliced data for mpeg insertion 
 fix videodecoder resolution 
	 The audio clock of the digitizer must match the codec sample
timing->scr = (u64) (((u64) data[4] << 32) | (u64) (data[3]));
	 V4L2_CID_MPEG_VIDEO_DEC_PTS and V4L2_CID_MPEG_VIDEO_DEC_FRAME
	 V4L2_CID_MPEG_AUDIO_DEC_PLAYBACK and MULTILINGUAL_PLAYBACK
 SPDX-License-Identifier: GPL-2.0-or-later
    mailbox functions
    Copyright (C) 2003-2004  Kevin Thayer <nufan_wfk at yahoo.com>
    Copyright (C) 2004  Chris Kennedy <c@groovy.org>
    Copyright (C) 2005-2007  Hans Verkuil <hverkuil@xs4all.nl>
 Firmware mailbox flags
 Firmware mailbox standard timeout 
 Allow the command to be stored in the cache 
 Allow 1 second for this cmd to end 
 Allow 0.1 second for this cmd to end 
 DMA mailbox, has special handling 
 High volume command (i.e. called during encoding or decoding) 
 Command may not wait for a free mailbox 
 Command may not wait for the result 
 Avoid pointless polling 
 Flags, see above 
 The name of the command 
 MPEG encoder API 
 Obsolete PULLDOWN API command 
 MPEG decoder API 
| API_NO_WAIT_RES),
 OSD API 
 if the mailbox is free, then try to claim it 
 Try to find a free mailbox. Note mailbox 0 is reserved for DMA and so is not
	 All slow commands use the same mailbox, serializing them and also
 find free non-DMA mailbox 
 Sleep before a retry, if not atomic 
 sanity checks 
 clear possibly uninitialized part of data array 
	 If this command was issued within the last 30 minutes and with identical
	   data, then just return 0 as there is no need to issue this command again.
 Get results 
 First try to poll, then switch to delays 
 reset the mailbox, but it is likely too late already 
	 Allow a single retry, probably already too late though.
	   If there is no free mailbox then that is usually an indication
 This one is for stuff that can't sleep.. irq handlers, etc.. 
 Wipe api cache 
 SPDX-License-Identifier: GPL-2.0-or-later
    User DMA
    Copyright (C) 2003-2004  Kevin Thayer <nufan_wfk at yahoo.com>
    Copyright (C) 2004  Chris Kennedy <c@groovy.org>
    Copyright (C) 2005-2007  Hans Verkuil <hverkuil@xs4all.nl>
 Fill SG Array with new values 
 User DMA Buffers 
 Map DMA Page Array Buffer 
 Still in USE 
 Pin user pages for DMA Xfer 
 Fill SG List with new values 
 Map SG List 
 Fill SG Array with new values 
 Tag SG Array with Interrupt Bit 
 Nothing to free 
 Unmap Scatterlist 
 sync DMA 
 Unmap SG Array 
 Unmap Scatterlist 
 SPDX-License-Identifier: GPL-2.0-or-later
    yuv support
    Copyright (C) 2007  Ian Armstrong <ian@iarmst.demon.co.uk>
 YUV buffer offsets 
 Still in USE 
 Pin user pages for DMA Xfer 
 silence gcc. value is set and consumed only if: 
			
			  Inherit the -EFAULT from rc's
			  initialization, but allow it to be
			  overridden by uv_pages above if it was an
			  actual errno.
 Fill & map SG List 
 Fill SG Array with new values 
 If we've offset the y plane, ensure top area is blanked 
 Tag SG Array with Interrupt Bit 
 We rely on a table held in the firmware - Quick check. 
 If any filter is -1, then don't update it 
 How wide is the src image 
 Set the display width 
 Set the display position 
 Index into the image horizontally 
	 2870 is normally fudged to align video coords with osd coords.
	   If running full screen, it causes an unwanted left shift
	   Remove the fudge if we almost fill the screen.
	   Gradually adjust the offset to avoid the video 'snapping'
	   leftright if it gets dragged through this region.
 We're also using 2870 to shift the image left (src_x & negative dst_x) 
		 We also need to factor in the scaling
 Select the horizontal filter 
 An exact size match uses filter 0 
 Figure out which filter to use 
 Only an exact size match can use filter 0 
 Only update the filter if we really need to 
 What scaling mode is being used... 
 What is the source video being treated as... 
	 We offset into the image using two different index methods, so split
	 FIXME These registers change depending on scaled  unscaled output
 The first line to be displayed 
	 How much of the source to decode.
 Calculate correct value for register 2964 
	 Okay, we've wasted time working out the correct value,
	   but if we use it, it fouls the the window alignment.
	 Deviate further from what it should be. I find the flicker headache
	   inducing so try to reduce it slightly. Leave 2968 as-is otherwise
 Select the vertical filter 
 An exact size match uses filter 01 
 Figure out which filter to use 
 Only an exact size match can use filter 0 
 Ensure 2970 is 0 (does it ever change ?) 
	write_reg(0,0x02970); 
	IVTV_DEBUG_YUV("Update reg 0x2970 %08x->%08x\n", yi->reg_2970, 0); 
 Only update filter 1 if we really need to 
 Only update filter 2 if we really need to 
 Modify the supplied coordinate information to fit the visible osd area 
 Sorry, but no negative coords for src 
 Can only reduce width down to 14 original size 
 Can only reduce height down to 14 original size 
		 Overflow may be because we're running progressive,
 Make sure we're still within limits for interlace 
 If we reach here we'll have to force the height. 
 If there's nothing to safe to display, we may as well stop now 
 Ensure video remains inside OSD area 
 Falls off the upper edge - crop 
 Falls off the lower edge - crop 
 Fall off the left edge - crop 
 Falls off the right edge - crop 
 The OSD can be moved. Track to it 
	 Width & height for both src & dst must be even.
	 Due to rounding, we may have reduced the output size to <14 of
	   the source. Check again, but this time just resize. Don't change
 Check again. If there's nothing to safe to display, stop now 
 Both x offset & width are linked, so they have to be done together 
 Update the scaling register to the requested value 
 Snapshot the osd pan info 
 Not tracking the osd, so assume full screen 
 Calculate the display window coordinates. Exit if nothing left 
 Take a snapshot of the current register settings 
 Set some valid size info 
	 Bit 2 of reg 2878 indicates current decoder output format
 If no visible size set, assume full size 
			 If output video standard has changed, requested height may
 We need a buffer for blanking when Y plane is offset - non-fatal if we can't get one 
 Enable YUV decoder output 
 Get next available yuv buffer on PVR350 
 Set up frame according to ivtv_dma_frame parameters 
 Preserve old update flag in case we're overwriting a queued frame 
 Take a snapshot of the yuv coordinate information 
 Are we going to offset the Y plane 
 Work out the lace settings 
 Progressive mode 
 Interlace mode 
 Frame is complete & ready for display 
 DMA the frame 
	 if no UDMA is pending and no UDMA is in progress, then the DMA
		 don't interrupt if the DMA is in progress but break off
 Unmap Last DMA Xfer 
 Setup frame according to V4L2 parameters 
 Copy V4L2 parameters to an ivtv_dma_frame struct... 
 ... and use the same setup routine as ivtv_yuv_prep_frame 
 Attempt to dma a frame from a user buffer 
 We only need to supply source addresses for this 
	 Wait for frame DMA. Note that serialize_lock is locked,
	   so to allow other processes to access the driver while
 IVTV_IOC_DMA_FRAME ioctl handler 
	IVTV_DEBUG_INFO("yuv_prep_frame\n"); 
	 Wait for frame DMA. Note that serialize_lock is locked,
	   so to allow other processes to access the driver while
 Reset registers we have changed so mpeg playback works 
	 If we fully restore this register, the display may remain active.
	   Restore, but set one bit to blank the video. Firmware will always
 Prepare to restore filters 
 First the horizontal filter 
 An exact size match uses filter 0 
 Figure out which filter to use 
 Only an exact size match can use filter 0. 
 Now the vertical filter 
 An exact size match uses filter 01 
 Figure out which filter to use 
 Only an exact size match can use filter 0 
 Now restore the filters 
 and clear a few registers 
 Release the blanking buffer 
 Invalidate the old dimension information 
 All done. 
    ivtv driver initialization and card probing
    Copyright (C) 2003-2004  Kevin Thayer <nufan_wfk at yahoo.com>
    Copyright (C) 2004  Chris Kennedy <c@groovy.org>
    Copyright (C) 2005-2007  Hans Verkuil <hverkuil@xs4all.nl>
    This program is free software; you can redistribute it andor modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 Main Driver file for the ivtv project:
  Driver for the Conexant CX23415CX23416 chip.
  Author: Kevin Thayer (nufan_wfk at yahoo.com)
  License: GPL
  -----
  MPG600MPG160 support by  T.Adachi <tadachi@tadachi-net.com>
                       and Takeru KOMORIYA<komoriya@paken.org>
  AVerMedia M179 GPIO info by Chris Pinkham <cpinkham@bc2va.org>
                 using information provided by Jiun-Kuei Jung @ AVerMedia.
  Kurouto Sikou CX23416GYC-STVLP tested by K.Ohta <alpha292@bremen.or.jp>
                 using information from T.Adachi,Takeru KOMORIYA and others :-)
  Nagase TRANSGEAR 5000TV, Aopen VA2000MAX-STN6 and IO data GV-MVPRX
                 version by T.Adachi. Special thanks  Mr.Suzuki
 If you have already X v4l cards, then set this to X. This way
   the device numbers stay matched. Example: you have a WinTV card
   without radio and a PVR-350 with. Normally this would give a
   video1 device together with a radio0 device for the PVR. By
 Callback for registering extensions 
 add your revision and whatnot here 
 ivtv instance counter 
 Parameter declarations 
 Buffers 
 DMA Buffers, Default size in MB allocated 
 Exception: size in kB for this stream (MB is overkill) 
 Exception: size in kB for this stream (MB is way overkill) 
 Make sure ivtv-alsa module is loaded 
 Initialize ivtv-alsa for this instance of the cx18 device 
 CONFIG_MODULES 
 Generic utility functions 
 Release ioremapped memory 
 Release registers memory 
 Release io memory 
 Release io memory 
 Hauppauge card? get values from tveeprom 
	 Many thanks to Steven Toth from Hauppauge for providing the
		 In a few cases the PCI subsystem IDs do not correctly
		   identify the card. A better method is to check the
 Low profile PVR250 
 48??? range are PVR250s with a cx23415 
 PVR500 
 Low profile PVR150 
 Regular PVR150 
		 Old style PVR350 (with an saa7114) uses this input for
	 If this is a PVR500 then it should be possible to detect whether it is the
	   first or second unit by looking at the subsystem device ID: is bit 4 is
	   set, then it is the second unit (according to info from Hauppauge).
	   However, while this works for most cards, I have seen a few PVR500 cards
	   where both units have the same subsystem ID.
	   So instead I look at the reported 'PCI slot' (which is the slot on the PVR500
	   PCI bridge) and if it is 8, then it is assumed to be the first unit, otherwise
	   it is the second unit. It is possible that it is a different slot when ivtv is
	   used in Xen, in that case I ignore this card here. The worst that can happen
	   is that the card presents itself with a non-working radio device.
	   This detection is needed since the eeprom reports incorrectly that a radio is
 only enable newi2c if an IR blaster is present 
 user specified tuner standard 
 autodetect tuner standard 
 no match found 
 Precondition: the ivtv structure has been memset to 0. Only
   the dev and num fields have been filled in.
   No assumptions on the card type may be made here (see ivtv_init_struct2
   for that).
 the encoder has 3 mailboxes (0-2) 
 the decoder has 2 mailboxes (0-1) 
 must use the FIFO scheduler as it is realtime sensitive 
 Initial settings 
 Ctrls 
 VBI 
 Init the sg table for osdyuv output 
 OSD 
 YUV 
 Second initialization part. Here the card type has been
 multiple of 16, real size = 284 
 multiple of 16, real size = 52 
 Find tuner input 
 Check for bus mastering 
	 This config space value relates to DMA latencies. The
	   default value 0x8080 is too low however and will lead
	   to DMA errors. 0xffff is the max value which solves
 check which i2c devices are actually found 
 GPIO and TVEEPROM do not use i2c probing 
 probe for legacy IR controllers that aren't in card definitions 
		 Several variations of this card exist, detect which card
 The crystal frequency of GVMVPRX is 24.576MHz 
 determine the exact saa711x model 
 VBI is not yet supported by the saa7114 driver. 
 PCI Device Setup 
 map io memory 
 map registers memory 
 active i2c  
		 Based on the model number the cardtype may be changed.
 card was detected but is not supported 
 if no tuner was found, then pick the first tuner in the card list 
	 The card is now fully identified, continue with card-specific
	 Setup VBI Raw Size. Should be big enough to hold PAL.
	   It is possible to switch between PAL and NTSC, so we need to
 1456 is multiple of 16, real size = 1444 
	 We use a buffer size of 12 of the total size needed for a
	   frame. This is actually very useful, since we now receive
	   a field at a time and that makes 'compressing' the raw data
	   down to size by stripping off the SAV codes a lot easier.
	   Note: having two different buffer sizes prevents standard
 matches TV tuners 
	 The tuner is fixed to the standard. The other inputs (e.g. S-Video)
		 Note: V4L2_MPEG_AUDIO_DEC_PLAYBACK_AUTO is not supported,
		 Turn off the output signal. The mpeg decoder is not yet
		   active so without this you would get a green image until the
 clear interrupt mask, effectively disabling interrupts 
 Register IRQ 
 Load ivtv submodules (ivtv-alsa) 
 Needed to call ioctls later 
 load firmware 
 Try and get firmware versions 
 the tuner 'baseline' frequency 
	 Set initial frequency. For PALSECAM broadcasts no
 ch. 1 91250161000 
 ch. 4 67250161000 
 Force update of input 
	 Let the VIDIOC_S_STD ioctl do all the work, keeps the code
 Force full standard initialization 
		 Turn on the TV-out: ivtv_init_mpeg_decoder() initializes
		   the mpeg decoder so now the saa7127 receives a proper
 On a cx23416 this seems to be able to enable DMA to the chip? 
	 Default interrupts enabled. For the PVR350 this includes the
	   decoder VSYNC interrupt, which is always on. It is not only used
	   during decoding but also by the OSD.
	   Some old PVR250 cards had a cx23415, so testing for that is too
 Setup initial controls 
 Stop all captures 
 Stop all decoding 
 Turn off the TV-out 
 Interrupts 
 Kill irq worker 
 define a pci_driver for card detection 
 Validate parameters 
 Note: These symbols are exported because they are used by the ivtvfb
 SPDX-License-Identifier: GPL-2.0-or-later
    I2C functions
    Copyright (C) 2003-2004  Kevin Thayer <nufan_wfk at yahoo.com>
    Copyright (C) 2005-2007  Hans Verkuil <hverkuil@xs4all.nl>
    This file includes an i2c implementation that was reverse engineered
    from the Hauppauge windows driver.  Older ivtv versions used i2c-algo-bit,
    which whilst fine under most circumstances, had trouble with the Zilog
    CPU on the PVR-150 which handles IR functions (occasional inability to
    communicate with the chip until it was reset) and also with the i2c
    bus being completely unreachable when multiple PVR cards were present.
    The implementation is very similar to i2c-algo-bit, but there are enough
    subtle differences that the two are hard to merge.  The general strategy
    employed by i2c-algo-bit is to use udelay() to implement the timing
    when putting out bits on the sclsda lines.  The general strategy taken
    here is to poll the lines for state changes (see ivtv_waitscl and
    ivtv_waitsda).  In addition there are small delays at various locations
    which poll the SCL line 5 times (ivtv_scldelay).  I would guess that
    since this is memory mapped IO that the length of those delays is tied
    to the PCI bus clock.  There is some extra code to do with recovery
    and retries.  Since it is not known what causes the actual i2c problems
    in the first place, the only goal if one was to attempt to use
    i2c-algo-bit would be to try to make it follow the same code path.
    This would be a lot of work, and I'm also not convinced that it would
    provide a generic benefit to i2c-algo-bit.  Therefore consider this
    an engineering solution -- not pretty, but it works.
    Some more general comments about what we are doing:
    The i2c bus is a 2 wire serial bus, with clock (SCL) and data (SDA)
    lines.  To communicate on the bus (as a master, we don't act as a slave),
    we first initiate a start condition (ivtv_start).  We then write the
    address of the device that we want to communicate with, along with a flag
    that indicates whether this is a read or a write.  The slave then issues
    an ACK signal (ivtv_ack), which tells us that it is ready for reading 
    writing.  We then proceed with reading or writing (ivtv_readivtv_write),
    and finally issue a stop condition (ivtv_stop) to make the bus available
    to other masters.
    There is an additional form of transaction where a write may be
    immediately followed by a read.  In this case, there is no intervening
    stop condition.  (Only the msp3400 chip uses this method of data transfer).
 i2c implementation for cx234156 chip, ivtv project.
  Author: Kevin Thayer (nufan_wfk at yahoo.com)
 i2c stuff 
 This array should match the IVTV_HW_ defines 
 IVTV_HW_GPIO dummy driver ID 
 IVTV_HW_I2C_IR_RX_AVER 
 IVTV_HW_I2C_IR_RX_HAUP_EXT 
 IVTV_HW_I2C_IR_RX_HAUP_INT 
 IVTV_HW_Z8F0811_IR_HAUP 
 IVTV_HW_I2C_IR_RX_ADAPTEC 
 This array should match the IVTV_HW_ defines 
 saa7127 or saa7129 
 IVTV_HW_I2C_IR_RX_AVER 
 IVTV_HW_I2C_IR_RX_HAUP_EXT 
 IVTV_HW_I2C_IR_RX_HAUP_INT 
 IVTV_HW_Z8F0811_IR_HAUP 
 IVTV_HW_I2C_IR_RX_ADAPTEC 
 poll IR chip 
 key pressed ? 
 remove repeat bit 
 Only allow one IR receiver to be registered per board 
 Our default information for ir-kbd-i2c.c to use 
 Default to grey remote 
 FIXME: The protocol and RC_MAP needs to be corrected 
 Instantiate the IR receiver device using probing -- undesirable 
	
	  The external IR receiver is at i2c address 0x34.
	  The internal IR receiver is at i2c address 0x30.
	 
	  In theory, both can be fitted, and Hauppauge suggests an external
	  overrides an internal.  That's why we probe 0x1a (~0x34) first. CB
	 
	  Some of these addresses we probe may collide with other i2c address
	  allocations, so this function must be called after all other i2c
	  devices we care about are registered.
 Hauppauge IR external - collides with WM8739 
 Hauppauge IR internal 
 special tuner handling 
 Is it not an I2C device or one we do not wish to register? 
 It's an I2C device other than an analog tuner or IR chip 
 Set the serial clock line to the desired state 
 write them out 
 write bits are inverted 
 Set the serial data line to the desired state 
 write them out 
 write bits are inverted 
 Read the serial clock line 
 Read the serial data line 
 Implement a short delay by polling the serial clock line 
 Wait for the serial clock line to become set to a specific value 
 Wait for the serial data line to become set to a specific value 
 Wait for the slave to issue an ACK 
 Write a single byte to the i2c bus and wait for the slave to ACK 
 Read a byte from the i2c bus and send a NACK if applicable (i.e. for the
 Issue a start condition on the i2c bus to alert slaves to prepare for
 Issue a stop condition on the i2c bus to release it 
 Write a message to the given i2c slave.  do_stop may be 0 to prevent
 Read data from the given i2c slave.  A stop condition is always issued. 
 Kernel i2c transfer implementation.  Takes a number of messages to be read
   or written.  If a read follows a write, this will occur without an
 if followed by a read, don't stop 
 Kernel i2c capabilities 
 template for our-bit banger 
 filled from template 
 write them out 
 write bits are inverted 
 write them out 
 write bits are inverted 
 template for i2c-bit-algo 
 set by i2c-algo-bit 
 filled from template 
 seconds 
 microseconds 
 jiffies 
 init + register i2c adapter 
	 Sanity checks for the I2C hardware arrays. They must be the
	  same size.
 SPDX-License-Identifier: GPL-2.0-or-later
    gpio functions.
    Merging GPIO support into driver:
    Copyright (C) 2004  Chris Kennedy <c@groovy.org>
    Copyright (C) 2005-2007  Hans Verkuil <hverkuil@xs4all.nl>
  GPIO assignment of Yuan MPG600MPG160
     bit 15  14  13  12 |  11  10   9   8 |   7   6   5   4 |   3   2   1   0
  OUTPUT         IN1 IN0                                       AM3 AM2 AM1 AM0
   INPUT                   DM1         DM0
    IN : Input selection
           IN1 IN0
            1   1  NA
            1   0  Line
            0   1  NA
            0   0  Tuner
    AM : Audio Mode
           AM3  0: Normal        1: Mixed(Sub+Main channel)
           AM2  0: Subchannel    1: Main channel
           AM1  0: Stereo        1: Mono
           AM0  0: Normal        1: Mute
    DM : Detected tuner audio Mode
           DM1  0: Stereo        1: Mono
           DM0  0: Multiplex     1: Normal
  GPIO Initial Settings
            MPG600   MPG160
      DIR   0x3080   0x7080
   OUTPUT   0x000C   0x400C
   Special thanks to Makoto Iguchi <iguchi@tahoo.org> and Mr. Anonymous
   for analyzing GPIO of MPG160.
  GPIO assignment of Avermedia M179 (per information direct from AVerMedia)
     bit 15  14  13  12 |  11  10   9   8 |   7   6   5   4 |   3   2   1   0
  OUTPUT IN0 AM0 IN1               AM1 AM2       IN2     BR0   BR1
   INPUT
    IN : Input selection
           IN0 IN1 IN2
               1     Mute
            0   0   0  Line-In
            1   0   0  TV Tuner Audio
            0   0   1  FM Audio
            1   0   1  Mute
    AM : Audio Mode
           AM0 AM1 AM2
            0   0   0  TV Tuner Audio: L_OUT=(L+R)2, R_OUT=SAP
            0   0   1  TV Tuner Audio: L_OUT=R_OUT=SAP   (SAP)
            0   1   0  TV Tuner Audio: L_OUT=L, R_OUT=R   (stereo)
            0   1   1  TV Tuner Audio: mute
            1        TV Tuner Audio: L_OUT=R_OUT=(L+R)2   (mono)
    BR : Audio Sample Rate (BR stands for bitrate for some reason)
           BR0 BR1
            0   0   32 kHz
            0   1   44.1 kHz
            1   0   48 kHz
    DM : Detected tuner audio Mode
          Unknown currently
  Special thanks to AVerMedia Technologies, Inc. and Jiun-Kuei Jung at
  AVerMedia for providing the GPIO information used to add support
  for the M179 cards.
 GPIO stuffs 
 GPIO registers 
 We could use something else for smaller time 
 Xceive tuner reset function 
 0:Tuner 1:Composite 2:S-Video 
 init output data then direction 
 SPDX-License-Identifier: GPL-2.0-or-later
    On Screen Display cx23415 Framebuffer driver
    This module presents the cx23415 OSD (onscreen display) framebuffer memory
    as a standard Linux devfb style framebuffer device. The framebuffer has
    support for 8, 16 & 32 bpp packed pixel formats with alpha channel. In 16bpp
    mode, there is a choice of a three color depths (12, 15 or 16 bits), but no
    local alpha. The colorspace is selectable between rgb & yuv.
    Depending on the TV standard configured in the ivtv module at load time,
    the initial resolution is either 640x400 (NTSC) or 640x480 (PAL) at 8bpp.
    Video timings are locked to ensure a vertical refresh rate of 50Hz (PAL)
    or 59.94 (NTSC)
    Copyright (c) 2003 Matt T. Yourst <yourst@yourst.com>
    Derived from driversvideovesafb.c
    Portions (c) 1998 Gerd Knorr <kraxel@goldbach.in-berlin.de>
    2.6 kernel port:
    Copyright (C) 2004 Matthias Badaire
    Copyright (C) 2004  Chris Kennedy <c@groovy.org>
    Copyright (C) 2006  Ian Armstrong <ian@iarmst.demon.co.uk>
 card parameters 
 Why upper, left, xres, yres, depth, laced ? To match terminology used
   by fbset.
 --------------------------------------------------------------------- 
 Standard kernel messages 
 --------------------------------------------------------------------- 
 Physical base address 
 Relative base address (relative to start of decoder memory) 
 Mapped base address 
 Buffer size 
 video_base rounded down as required by hardware MTRRs 
 video_base rounded up as required by hardware MTRRs 
 Store the buffer offset 
 Current dimensions (NOT VISIBLE SIZE!) 
 Current bits per pixel 
 Frame buffer stuff 
 Used for a warm start 
 --------------------------------------------------------------------- 
 ivtv API calls for framebuffer related support 
 Only fail if resolution too high, otherwise fudge the start coords. 
 Ensure we don't exceed display limits 
 Set the OSD origin 
 How much to display 
 Pass this info back the yuv handler 
 Map User DMA 
 pin_user_pages must have failed completely 
	 if no UDMA is pending and no UDMA is in progress, then the DMA
		 don't interrupt if the DMA is in progress but break off
 Unmap Last DMA Xfer 
 Nothing to do 
 Check Total FB Size 
 Not fatal, but will have undesirable results 
 Check Source 
 OSD Address to send DMA to 
 Fill Buffers 
	 If transfer size > threshold and both srcdst
 Odd address = can't DMA. Align 
 DMA resolution is 32 bits 
 DMA the data 
 Copy any leftover data 
 Framebuffer device handling 
 Select color space 
 YUV 
 RGB  
 Set the color mode 
	 Set video mode. Although rare, the display can become scrambled even
 Set the flicker filter 
 Filter on 
 Filter off 
 Read the current osd info 
 Now set the OSD to the size we want 
	 Can't seem to find the right API combo for this.
 Minimum margin cannot be 0, as X won't allow such a mode 
 Pass screen size back to yuv handler 
 Force update of yuv registers 
 Keep a copy of these settings 
 Check the requested display mode, returning -EINVAL if we can't
 Set base references for mode calcs. 
 To find out the true mode, check green length 
 Check the resolution 
 Max horizontal size is 1023 @ 32bpp, 2046 & 16bpp, 4092 @ 8bpp 
 Some extra checks if in 8 bit mode 
 Width must be a multiple of 4 
 Width must be a multiple of 2 
 Now check the offsets 
 Check pixel format 
 Check video mode 
	 Check the left & upper margins
	   If the margins are too large, just center the screen
 Maintain overall 'size' for a constant refresh rate 
 Fixed sync times 
	 Non-interlaced  interlaced mode is used to switch the OSD filter
	   on or off. Adjust the clock timings to maintain a constant
 Pass this info back the yuv handler 
 Force update of yuv registers 
 Remember this value 
 We don't really support blanking. All this does is enable or
 Restore hardware after firmware restart 
 Initialization 
 Setup our initial video mode 
 Color mode 
 Horizontal size & position 
 Must be a multiple of 4 for 8bpp & 2 for 16bpp 
 Check horizontal start (osd_left). 
 Hardware coords start at 0, user coords start at 1. 
 Vertical size & position 
 Check vertical start (osd_upper). 
 Hardware coords start at 0, user coords start at 1. 
 Generate a valid fb_var_screeninfo 
	 We've filled in the most data, let the usual mode check
 Generate valid fb_fix_screeninfo 
 Generate valid fb_info 
 Supply some monitor specs. Bogus values will do for now 
 Allocate color map 
 Allocate the pseudo palette 
 Find OSD buffer base & size. Add to mtrr. Zero osd buffer. 
 Find the largest power of two that maps the whole buffer 
	 The osd buffer size depends on the number of video buffers allocated
	   on the PVR350 itself. For now we'll hardcode the smallest osd buffer
 Blank the entire osd. 
 Release any memory we've grabbed & remove mtrr entry 
 Release cmap 
 Release pseudo palette 
 Initialize the specified card 
 Find & setup the OSD buffer 
 Set the startup video mode information 
 Register the framebuffer 
 Set the card to the requested mode 
 Set color 0 to black 
 Enable the osd 
 Enable restart 
 Allocate DMA 
 suppress compiler warning 
 suppress compiler warning 
 SPDX-License-Identifier: GPL-2.0-or-later
   ALSA PCM device for the
   ALSA interface to ivtv PCM capture streams
   Copyright (C) 2009,2012  Andy Walls <awalls@md.metrocast.net>
   Copyright (C) 2009  Devin Heitmueller <dheitmueller@kernellabs.com>
   Portions of this work were sponsored by ONELAN Limited for the cx18 driver
 just about the value in usbaudio.c 
 125442, 
 12544, 
 Instruct the CX2341[56] to start sending packets 
 See if the stream is available 
 No, it's already in use 
 We're already streaming.  No additional action required 
 Not currently streaming, so start it up 
 Instruct the ivtv to stop sending packets 
 PCM device 0, the only one for this card 
 0 playback substreams 
 1 capture substream 
 SPDX-License-Identifier: GPL-2.0-or-later
   Driver for the Conexant CX25821 PCIe bridge
   Copyright (C) 2009 Conexant Systems Inc.
   Authors  <shu.lin@conexant.com>, <hiep.huynh@conexant.com>
 	Based on Steven Toth <stoth@linuxtv.org> cx23885 driver
 board config info 
 Ensure safe default for unknown boards 
 SPDX-License-Identifier: GPL-2.0-only
   Driver for the Conexant CX25821 PCIe bridge
   Copyright (C) 2009 Conexant Systems Inc.
   Authors  <shu.lin@conexant.com>, <hiep.huynh@conexant.com>
 	Based on SAA713x ALSA driver and CX88 driver
	Data type declarations - Can be moded to a header file later
 pci io 
 audio controls 
			Module global static vars
 Index 0-MAX 
 ID for this card 
				Module macros
			Module specific functions
 Constants taken from cx88-reg.h 
 yes, 3 is skipped 
  BOARD Specific: Sets audio DMA
 enable output on the GPIO 0 for the MCLK ADC (Audio) 
 Make sure RISCFIFO are off before changing FIFORISC settings 
 setup fifo + format - out channel 
 sets bpl size 
 reset counter 
 GP_COUNT_CONTROL_RESET = 0x3 
 Set the input mode to 16-bit 
	
	pr_info("DEBUG: Start audio DMA, %d Bline, cmds_start(0x%x)= %d linesFIFO, %d periods, %d byte buffer\n",
		buf->bpl, audio_ch->cmds_start,
		cx_read(audio_ch->cmds_start + 12)>>1,
		chip->num_periods, buf->bpl  chip->num_periods);
 Enables corresponding bits at AUD_INT_STAT 
 Clean any pending interrupt bits already set 
 enable audio irqs 
 Turn on audio downstream fifo and risc enable 0x101 
  BOARD Specific: Resets audio DMA
 stop dma 
 disable irqs 
  BOARD Specific: IRQ dma bits
 0-2 
 reserved 
 4-6 
 reserved 
 8-10 
 reserved 
 12-14 
 reserved 
 16-18 
 19-21 
  BOARD Specific: Threats IRQ audio specific calls
 risc op code error 
 risc1 downstream 
  BOARD Specific: Handles IRQ calls
				ALSA PCM Interface
  Digital hardware definition
	 Analog audio output will be full of clicks and pops if there
 128  128 = 16384 = 1024  16 
  audio pcm capture open callback
 since there are 3 audio Clusters 
 must be multiple of 8 
  audio close callback
  hw_params callback
 Loop back to start of program 
 bits 63-32 
  hw free callback
  prepare callback
  trigger callback
 Local interrupts are already disabled by ALSA 
  pointer callback
  page callback (needed for mmap)
  operators
  ALSA create a PCM device:  Called when initializing the board.
  Sets up the name and hooks up the callbacks
			Basic Flow for Sound Devices
  PCI ID Table - 14f1:8801 and 14f1:8811 means function 1: Audio
  Only boards with eeprom and byte 1 at eeprom=1 have it
  Alsa Constructor - Component probe
 Card "creation" 
				LINUX MODULE INIT
  Module initializer
  Loops through present saa7134 cards, and assigns an ALSA device
  to each one
 SPDX-License-Identifier: GPL-2.0-or-later
   Driver for the Conexant CX25821 PCIe bridge
   Copyright (C) 2009 Conexant Systems Inc.
   Authors  <shu.lin@conexant.com>, <hiep.huynh@conexant.com>
  medusa_enable_bluefield_output()
  Enable the generation of blue filed output if no video
 clear BLUE_FIELD_EN 
 set BLUE_FIELD_EN 
 set BLUE_FIELD_EN 
 set video format NTSC-M 
 enable the fast locking mode bit[16] 
 resolution NTSC 720x480 
 vblank_cnt + 2 to get camera ID 
 chroma subcarrier step size 
 enable VIP optional active 
 enable VIP optional active (VIP_OPT_AL) for direct output. 
		
		  clear VPRES_VERT_EN bit, fixes the chroma run away problem
		  when the input switching rate < 16 fields
 disable special play detection 
 set vbi_gate_en to 0 
 Enable the generation of blue field output if no video 
 NTSC hclock 
 burst begin and burst end 
 set NTSC vblank, no phase alternation, 7.5 IRE pedestal 
 Subcarrier Increment 
 set picture resolutions 
 0 - 720 
 0 - 480 
 set Bypass input format to NTSC 525 lines 
 Setup for 2D threshold 
 Setup flat chroma and luma thresholds 
 set comb 2D blend 
 COMB MISC CONTROL 
 set video format PAL-BDGHI 
 enable the fast locking mode bit[16] 
 resolution PAL 720x576 
 vblank656_cnt=x26, vactive_cnt=240h, vblank_cnt=x24 
 vblank_cnt + 2 to get camera ID 
 chroma subcarrier step size 
 enable VIP optional active 
 enable VIP optional active (VIP_OPT_AL) for direct output. 
		
		  clear VPRES_VERT_EN bit, fixes the chroma run away problem
		  when the input switching rate < 16 fields
 disable special play detection 
 set vbi_gate_en to 0 
 Enable the generation of blue field output if no video 
 PAL hclock 
 burst begin and burst end 
 hblank and vactive 
 set PAL vblank, phase alternation, 0 IRE pedestal 
 Subcarrier Increment 
 set picture resolutions 
 0 - 720 
 0 - 576 
 set Bypass input format to PAL 625 lines 
 Enable DENC_A output 
 Enable DENC_B output 
 validate the width 
 720 
 write scaling values for each decoder 
 no support 
 update hardware 
 EVEN decoder 
 Map to Medusa register setting 
	
	  This is the overall expression used:
	  dstVal =
	    (srcVal - srcMin)(dstMax - dstMin)  (srcMax - srcMin) + dstMin;
	  but we need to account for rounding so below we use the modulus
	  operator to find the remainder and increment if necessary.
 Program the display sequence and monitor output. 
 disable Auto source selection on all video decoders 
 Turn off Master source switch enable 
	
	  FIXME: due to a coding bug the duration was always 0. It's
	  likely that it really should be something else, but due to the
	  lack of documentation I have no idea what it should be. For
	  now just fill in 0 as the duration.
 Select monitor as DENC A input, power up the DAC 
 set en_active 
 enable input is VIP656 
 enable VIP 
 select AFE clock to output mode 
 Turn on all of the data out and control output pins. 
		
		  Note: The octal board does not support control pins(bit16-19)
		  These bits are ignored in the octal board.
		 
		  disable VDEC A-C port, default to Mobilygen Interface
 disable VDEC A-C port, default to Mobilygen Interface 
 SPDX-License-Identifier: GPL-2.0-or-later
   Driver for the Conexant CX25821 PCIe bridge
   Copyright (C) 2009 Conexant Systems Inc.
   Authors  <shu.lin@conexant.com>, <hiep.huynh@conexant.com>
 GPIO stuffs 
 Check for valid pinNumber 
	 Here we will make sure that the GPIOs 0 and 1 are output. keep the
 Check for valid pinNumber 
 change to output direction 
 set GPIO 5 to select the path for MedusaAthena 
 SPDX-License-Identifier: GPL-2.0-or-later
   Driver for the Conexant CX25821 PCIe bridge
   Copyright (C) 2009 Conexant Systems Inc.
   Authors  <shu.lin@conexant.com>, <hiep.huynh@conexant.com>
   Based on Steven Toth <stoth@linuxtv.org> cx23885 driver
 enable RUN_RISC in Pecos 
	 Set the master PCI interrupt masks to enable video, audio, MBIF,
	  and GPIO interrupts
 Clear the RCB_CK_EN bit 
 PLL-A setting for the Audio Master Clock 
 PLL_A_POST = 0x1C, PLL_A_OUT_TO_PIN = 0x1 
 clear reset bit [31] 
 PLL-B setting for Mobilygen Host Bus Interface 
 PLL_B_POST = 0xD, PLL_B_OUT_TO_PIN = 0x0 
 clear reset bit [31] 
 PLL-C setting for video upstream channel 
 PLL_C_POST = 0x3, PLL_C_OUT_TO_PIN = 0x0 
 clear reset bit [31] 
 PLL-D setting for audio upstream channel 
 PLL_D_POST = 0x13, PLL_D_OUT_TO_PIN = 0x0 
 clear reset bit [31] 
	 This selects the PLL C clock source for the video upstream channel
	 656VIP SRC Upstream Channel I & J and 7 - Host Bus Interface for
	  channel A-C
 cx_write( VID_CH_MODE_SEL, tmp | 0x1B0001FF); 
 enables 656 port I and J as output 
 use external ALT_PLL_REF pin as its reference clock instead 
 alignment 
 write CDT 
 init the first cdt buffer 
 write CMDS 
 64 bits 63-32 
 fill registers 
 alignment 
 for AUDIO 
 write CDT 
 write CMDS 
 64 bits 63-32 
 IQ size 
 zero out 
 fill registers 
 No consideration for bits 63-32 
 No consideration for bits 63-32 
 read data from the first cdt buffer 
 disable RISC controller 
 Disable Video AB activity 
 Disable Audio activity 
 Disable Serial port 
 Disable Interrupts 
 for I2C 
 init Pecos registers 
 Probably only affect Downstream 
 Releasing IO memory 
 Apply a sensible clock frequency for the PCIe bridge 
 board config 
 card[dev->nr]; 
 External Master 1 Bus 
 1.95MHz 
 PCIe stuff 
 init hardware 
  cx25821_i2c_register(&dev->i2c_bus[1]);
 audio channel 
		
		  TODO: enable when video output is properly
		  supported.
		if (i == SRAM_CH09 || i == SRAM_CH10)
			cx25821_free_mem_upstream(&dev->channels[i]);
 bits 63-32 
 sync instruction 
 scan lines 
 fits into current chunk 
 bits 63-32 
 scanline needs to be split 
 bits 63-32 
 bits 63-32 
 bits 63-32 
	 estimate risc mem: worst case is one write per page border +
	   one write per scan line + syncs + jump (all 3 dwords).  Padding
	   can cause next bpl to start close to a page border.  First DMA
 write and jump need and extra dword 
 write risc instructions 
 save pointer to jmp instruction address 
 sync instruction 
 scan lines 
 fits into current chunk 
 bits 63-32 
 scanline needs to be split 
 bits 63-32 
 bits 63-32 
 bits 63-32 
	 estimate risc mem: worst case is one write per page border +
	   one write per scan line + syncs + jump (all 2 dwords).  Here
	   there is no padding and no sync.  First DMA region may be smaller
 Jump and write need an extra dword 
 write risc instructions 
 save pointer to jmp instruction address 
 pci init 
 print pci info 
 unregister stuff 
 CX25821 Athena 
 CX25821 No Brand 
 --- end of list --- 
 SPDX-License-Identifier: GPL-2.0-or-later
   Driver for the Conexant CX25821 PCIe bridge
   Copyright (C) 2009 Conexant Systems Inc.
   Authors  <shu.lin@conexant.com>, <hiep.huynh@conexant.com>
   Based on Steven Toth <stoth@linuxtv.org> cx25821 driver
   Parts adaptedtaken from Eduardo Moscoso Rubino
   Copyright (C) 2009 Eduardo Moscoso Rubino <moscoso@TopoLogica.com>
 setup fifo + format 
 reset counter 
 enable irq 
 start dma 
 FIFO and RISC enable 
 make sure upstream setting if any is reversed 
 risc op code error 
 risc1 y 
 Default 
 All other formats are top field first 
 bits 63-32 
 FIFO and RISC disable 
 VIDEO IOCTLS 
 check if cif resolution 
 initial device configuration 
 audio channel 
 register v4l devices 
 set PCI interrupt 
 SPDX-License-Identifier: GPL-2.0-or-later
   Driver for the Conexant CX25821 PCIe bridge
   Copyright (C) 2009 Conexant Systems Inc.
   Authors  <shu.lin@conexant.com>, <hiep.huynh@conexant.com>
 	Based on Steven Toth <stoth@linuxtv.org> cx23885 driver
 Deal with i2c probe functions with zero payload 
 dev, reg + first byte 
 following bytes 
 Deal with i2c probe functions with zero payload 
 read 
 write then read from same address 
 write 
 init + register i2c adapter 
 set up the I2c 
 Currently unused 
 write 0 to bus 2 addr 0x144 via i2x_xfer() 
 Register 0x144 
 SPDX-License-Identifier: GPL-2.0-or-later
  budget-ci.c: driver for the SAA7146 based Budget DVB cards
  Compiled from various sources by Michael Hunold <michael@mihu.de>
      msp430 IR support contributed by Jack Thomasson <jkt@Helius.COM>
      partially based on the Siemens DVB driver by Ralph+Marcus Metzler
  CI interface support (c) 2004 Andrew de Quincey <adq_dvb@lidskialf.net>
  the project's page is at https:linuxtv.org
  Regarding DEBIADDR_IR:
  Some CI modules hang if random addresses are read.
  Using address 0x4000 for the IR read means that we
  use the same address as for CI version, which should
  be a safe default.
 RC5 device wildcard 
 40 + 32 for (struct saa7146_dev).name 
 Outputs a full RC5 code 
 used for philips_tdm1316l configs 
	
	  The msp430 chip can generate two different bytes, command and device
	 
	  type1: X1CCCCCC, C = command bits (0 - 63)
	  type2: X0TDDDDD, D = device bits (0 - 31), T = RC5 toggle bit
	 
	  Each signal from the remote control can generate one or more command
	  bytes and one or more device bytes. For the repeated bytes, the
	  highest bit (X) is set. The first command byte is always generated
	  before the first device byte. Other than that, no specific order
	  seems to apply. To make life interesting, bytes can also be lost.
	 
	  Only when we have a command and device byte, a keypress is
	  generated.
 Remove repeat bit, we use every command 
 Is this a RC5 command byte? 
 It's a RC5 device byte 
 FIXME: We should generate complete scancodes for all devices 
 Select keymap and address 
 The hauppauge keymap is a superset of these remotes 
 for the Technotrend 1500 bundled remote 
 unknown remote 
 trigger on RISING edge during reset so we know when READY is re-asserted
 ensure we don't get spurious IRQs during initialisation
 read the CAM status
 GPIO should be set to trigger on falling edge if a CAM is present
 CAM insertion IRQ
 CAM ready (reset completed)
 FRDA IRQ
 trigger on rising edge if a CAM is not present - when a CAM is inserted, we
 only want to get the IRQ when it sets READY. If we trigger on the falling edge,
 the CAM might not actually be ready yet.
 generate a CAM removal IRQ if we haven't already
 CAM removal IRQ
 ensure we don't get spurious IRQs during initialisation
 read the CAM status
 mark it as present if it wasn't before
 during a RESET, we check if we can read from IO memory to see when CAM is ready
 enable DEBI pins
 test if it is there
 determine whether a CAM is present or not
 version 0xa2 of the CI firmware doesn't generate interrupts
 register CI interface
 Setup CI slot IRQ
 enable interface
 success!
 forge a fake CI IRQ so the CAM state is setup correctly
 disable CI interrupts
 reset interface
 disable TS data stream to CI interface
 release the CA device
 disable DEBI pins
 round correctly 
 setup PLL configuration
 disable the mc44BC374c (do not check for errors)
 determine charge pump
 determine band
 setup PLL filter and TDA9889
 calculate divisor
 ((36130000+((10000006)2)) + Finput)(10000006)
 setup tuner buffer
 determine charge pump
 assume PLL filter should always be 8MHz for the moment.
 calculate divisor
 setup tuner buffer
 TT S2-3200 DVB-S (STB0899) Inittab 
 12k Pullup, Repeater=16, Stop=disabled 
 0x11 
 AGCBB2CFG 
 AGCBB1CFG 
 0x15 = 27 Mhz Clock, F3 = 198MHz, F6 = 99MHz 
 0x00 = CLK from CLKI, 0x02 = CLK from XTALI 
 DVB = 0xb1, DSS = 0xa1 
 0x0d for CAM 
 HauppaugeTT Nova-CI budget (stv0299ALPS BSRU6(tsa5059))
 HauppaugeTT Nova-CI budget (stv0299bPhilips su1278(tsa5059))
 TT DVB-C CI budget (stv0297Philips tdm1316l(tda6651tt))
 HauppaugeTT Nova-T budget (tda10045Philips tdm1316l(tda6651tt) + TDA9889)
 TT DVB-T CI budget (tda10046Philips tdm1316l(tda6651tt))
 TT S-1500 PCI
 TT Budget-C-1501 (philips tda10023philips tda8274A) 
 TT S-1500B (BSBE1-D01A - STV0288STB6000LNBP21) 
 TT S2-3200 PCI
		
		  NOTE! on some STB0899 versions, the internal PLL takes a longer time
		  to settle, aka LOCK. On the older revisions of the chip, we don't see
		  this, as a result on the newer chips the entire clock tree, will not
		  be stable after a freshly POWER 'ed up situation.
		  In this case, we should RESET the STB0899 (Active LOW) and wait for
		  PLL stabilization.
		 
		  On the TT S2 3200 and clones, the STB0899 demodulator's RESETB is
		  connected to the SAA7146 GPIO, GPIO2, Pin 142
 Reset Demodulator 
 Wait for everything to die 
 Pull it up out of Reset state 
 Wait for PLL to stabilize 
		
		  PLL state should be stable now. Ideally, we should check
		  for PLL LOCK status. But well, never mind!
 disable frontend and CI interface
 SPDX-License-Identifier: GPL-2.0-or-later
  budget.c: driver for the SAA7146 based Budget DVB cards
  Compiled from various sources by Michael Hunold <michael@mihu.de>
  Copyright (C) 2002 Ralph Metzler <rjkm@metzlerbros.de>
  Copyright (C) 1999-2002 Ralph  Metzler
                        & Marcus Metzler for convergence integrated media GmbH
  26feb2004 Support for FS Activy Card (Grundig tuner) by
            Michael Dreher <michael@5dot1.de>,
            Oliver Endriss <o.endriss@gmx.de> and
            Andreas 'randy' Weinberger
  the project's page is at https:linuxtv.org
 Diseqc functions only for TT Budget card 
 taken from the Skyvision DVB driver by
    Routines for the Fujitsu Siemens Activy budget card
    22 kHz tone and DiSEqC are handled by the frontend.
    Voltage must be set here.
    GPIO 1: LNBP EN, GPIO 2: LNBP VSEL
 NOTE: since we're using a prescaler of 2, we set the
 divisor frequency to 62.5kHz and divide by 125 above
 avoid warning 
 HauppaugeTT Nova budget (stv0299ALPS BSRU6(tsa5059) OR ves1893ALPS BSRV2(sp5659))
 try the ALPS BSRV2 first of all
 try the ALPS BSRU6 now
 HauppaugeTT DVB-C budget (ves1820ALPS TDBE2(sp5659))
 HauppaugeTT Nova-T budget (L64781Grundig 29504-401(tsa5060))
 Cards based on Philips Semi Sylt PCI ref. design 
 Fujitsu Siemens Activy Budget-S PCI rev AL (stv0299tsa5059) 
 fixme: find a better way to identify the card 
 assume ALPS BSRU6 
 assume ALPS BSBE1 
 reset tuner 
 Fujitsu Siemens Activy Budget-S PCI rev GR (tda8083Grundig 29504-451(tsa5522))
 Fujitsu Siemens Activy Budget-T PCI rev AL (tda10046ALPS TDHD1-204A) 
 Fujitsu Siemens Activy Budget-T PCI rev GR (L64781Grundig 29504-401(tsa5060)) 
 HauppaugeTT Nova-S SE (samsung s5h1420????(tda8260))
 TT Budget-S-1401 (philips tda10086philips tda8262)
 gpio2 is connected to CLB - reset it + leave it high
 TT S2-1600 
					 call the init function once to initialize
					   tuner's clock output divider and demod's
 Omicom S2 
					 call the init function once to initialize
					   tuner's clock output divider and demod's
 SPDX-License-Identifier: GPL-2.0-or-later
  budget-core.c: driver for the SAA7146 based Budget DVB cards
  Compiled from various sources by Michael Hunold <michael@mihu.de>
  Copyright (C) 2002 Ralph Metzler <rjkm@metzlerbros.de>
  Copyright (C) 1999-2002 Ralph  Metzler
 			 & Marcus Metzler for convergence integrated media GmbH
  26feb2004 Support for FS Activy Card (Grundig tuner) by
 	     Michael Dreher <michael@5dot1.de>,
 	     Oliver Endriss <o.endriss@gmx.de>,
 	     Andreas 'randy' Weinberger
  the project's page is at https:linuxtv.org
  TT budget  WinTV Nova
 DMA3 off
 DMA3 off
	
	   Signal path on the Activy:
	 
	   tuner -> SAA7146 port A -> SAA7146 BRS -> SAA7146 DMA3 -> memory
	 
	   Since the tuner feeds 204 bytes packets into the SAA7146,
	   DMA3 is configured to strip the trailing 16 FEC bytes:
	       Pitch: 188, NumBytes3: 188, NumLines3: 1024
 using oddeven buffers
 using a single buffer
 VPE 
 VPE 
 DMA3 on 
 Ensure streamed PCI data is synced to CPU 
 nearest lower position divisible by 188 
 no wraparound, dump olddma..newdma 
 wraparound, dump olddma..buflen and 0..newdma 
  DVB API SECTION
 have a clean section start 
 set dd1 stream a & b 
	 the Siemens DVB needs this if you want to have the i2c chips
 GPIO 3 = 1 
 upload all 
 frontend power on 
 Everything OK 
 An error occurred, cleanup resources 
 SPDX-License-Identifier: GPL-2.0-or-later
  budget-av.c: driver for the SAA7146 based Budget DVB cards
               with analog video in
  Compiled from various sources by Michael Hunold <michael@mihu.de>
  CI interface support (c) 2004 Olivier Gournet <ogournet@anevia.com> &
                                Andrew de Quincey <adq_dvb@lidskialf.net>
  Copyright (C) 2002 Ralph Metzler <rjkm@metzlerbros.de>
  Copyright (C) 1999-2002 Ralph  Metzler
                        & Marcus Metzler for convergence integrated media GmbH
  the project's page is at https:linuxtv.org
 GPIO Connections:
  0 - VccReset (Reset is controlled by capacitor). Resets the frontend AS WELL!
  1 - CI memory select 0=>IO memory, 1=>Attribute Memory
  2 - CI Card Enable (Active Low)
  3 - CI Card Detect
  INITIALIZATION
 disable card 
 Vcc off 
 Vcc on 
 20 ms Vcc settling time 
 enable card 
 reinitialise the frontend if necessary 
	 test the card detect line - needs to be done carefully
	 We also try and read from IO memory to work round the above detection bug. If
	  there is no CAM, we will get a timeout. Only done if there is no cam
	  present, since this test actually breaks some cams :(
	 
	  if the CI interface is not open, we also do the above test since we
 read from attribute memory in resetready state to know when the CAM is ready 
 work out correct return code 
 Enable DEBI pins 
 register CI interface 
 release the CA device 
 disable DEBI pins 
 round correctly 
 F22FR = 0x7d, F22 = f_VCO  128  0x7d = 22 kHz 
 I2CT = 0, SCLT = 1, SDAT = 1 
 DAC not used, set to high impendance mode 
 DAC LSB 
 DiSEqC off 
 FIFO 
 OP1 ctl = Normal, OP1 val = 1 (LNB Power ON) 
 DC offset compensation = ON, beta_agc1 = 2 
 alpha_tmg = 2, beta_tmg = 3 
 AGC2  0x3d
 lock detector threshold
 out imp: normal  out type: parallel FEC mode:0
 12 threshold
 23 threshold
 34 threshold
 56 threshold
 78 threshold
 test all FECs
 viterbi and synchro search
 rs control
 error control
 wait for the pll lock 
 switch the charge pump to the lower current 
 setup PLL configuration
 determine charge pump
 determine band
 setup PLL filter
 calculate divisor
 ((36166000+((10000006)2)) + Finput)(10000006)
 setup tuner buffer
 KNC1 DVB-S (STB0899) Inittab	
 Repeater=8, Stop=disabled 
 0x1c 
 AGCBB2CFG 
 AGCBB1CFG 
 0x15 = 27 Mhz Clock, F3 = 198MHz, F6 = 99MHz 
 0x00 = CLK from CLKI, 0x02 = CLK from XTALI 
 DVB = 0xb1, DSS = 0xa1 
 0x0d for CAM 
 STB0899 demodulator config for the KNC1 and clones 
	.ts_output_mode		= STB0899_OUT_PARALLEL,	 types = SERIALPARALLEL	
 DSS, SYNC_FORCEDUNSYNCED	
	.ts_pfbit_toggle	= STB0899_MPEG_NORMAL,	 DirecTV, MPEG toggling seq	
  SD1878SHA tuner config
  1F, Single IP, Horizontal mount, High Sensitivity
	.name		= "SD1878SHA",
 kHz 
 Enable  PowerON Frontend 
 Wait for PowerON 
 additional setup necessary for the PLUS cards 
		
		  maybe that setting is needed for other dvb-s cards as well,
		  but so far it has been only confirmed for this type
 knc1 initialization 
 fixme: proper cleanup here 
 fixme: proper cleanup here 
 beware: this modifies dev->vv ... 
 fixme: find some sane values here... 
 perhaps later: V4L2_CAP_VBI_CAPTURE, but that need tweaking with the saa7113
 SPDX-License-Identifier: GPL-2.0-only
  This is the driver for the STA2x11 Video Input Port.
  Copyright (C) 2012       ST Microelectronics
      author: Federico Vaga <federico.vaga@gmail.com>
  Copyright (C) 2010       WindRiver Systems, Inc.
      authors: Andreas Kies <andreas.kies@windriver.com>
               Vlad Lungu   <vlad.lungu@windriver.com>
Register offsets
Register fields
  struct sta2x11_vip - All internal data for one instance of device
  @v4l2_dev: device registered in v4l layer
  @video_dev: properties of our device
  @pdev: PCI device
  @adapter: contains I2C adapter information
  @register_save_area: All relevant register are saved here during suspend
  @decoder: contains information about video DAC
  @ctrl_hdl: handler for control framework
  @format: pixel format, fixed UYVY
  @std: video standard (e.g. PALNTSC)
  @input: input line for video signal ( 0 or 1 )
  @disabled: Device is in power down state
  @slock: for excluse access of registers
  @vb_vidq: queue maintained by videobuf2 layer
  @buffer_list: list of buffer in use
  @sequence: sequence number of acquired buffer
  @active: current active buffer
  @lock: used in videobuf2 callback
  @v4l_lock: serialize its video4linux ioctls
  @tcount: Number of top frames
  @bcount: Number of bottom frames
  @overflow: Number of FIFO overflows
  @iomem: hardware base address
  @config: I2C and gpio config from platform
  All non-local data is accessed via this structure.
 current active buffer 
 Used in videobuf2 callback 
 Interrupt counters 
 IO Memory 
PAL interlaced 
PAL top 
PAL bottom 
NTSC interlaced 
NTSC top 
NTSC bottom 
 Write VIP register 
 Read VIP register 
 Start DMA acquisition 
 Enable acquisition 
 Set Top and Bottom Field memory address 
 Fetch the next buffer to activate 
 Get the next buffer 
 No available buffer 
 Reset Top and Bottom counter 
 streaming is on 
 start dma capture 
 Videobuf2 Operations 
 No active buffer, active the first one 
 streaming is on 
 start dma capture 
 Buffer handled, remove it from the list 
 Enable interrupt VSYNC Top and Bottom
 abort streaming and wait for last buffer 
 Disable acquisition 
 Disable all interrupts 
 Release all active buffers 
 File Operations 
  vidioc_querycap - return capabilities of device
  @file: descriptor of device
  @cap: contains return values
  @priv: unused
  the capabilities of the device are returned
  return value: 0, no error.
  vidioc_s_std - set video standard
  @file: descriptor of device
  @std: contains standard to be set
  @priv: unused
  the video standard is set
  return value: 0, no error.
  -EIO, no input signal detected
  other, returned from video DAC.
	
	  This is here for backwards compatibility only.
	  The use of V4L2_STD_ALL to trigger a querystd is non-standard.
  vidioc_g_std - get video standard
  @file: descriptor of device
  @priv: unused
  @std: contains return values
  the current video standard is returned
  return value: 0, no error.
  vidioc_querystd - get possible video standards
  @file: descriptor of device
  @priv: unused
  @std: contains return values
  all possible video standards are returned
  return value: delivered by video DAC routine.
  vidioc_s_input - set input line
  @file: descriptor of device
  @priv: unused
  @i: new input line number
  the current active input line is set
  return value: 0, no error.
  -EINVAL, line number out of range
  vidioc_g_input - return input line
  @file: descriptor of device
  @priv: unused
  @i: returned input line number
  the current active input line is returned
  return value: always 0.
  vidioc_enum_fmt_vid_cap - return video capture format
  @file: descriptor of device
  @priv: unused
  @f: returned format information
  returns name and format of video capture
  Only UYVY is supported by hardware.
  return value: always 0.
  vidioc_try_fmt_vid_cap - set video capture format
  @file: descriptor of device
  @priv: unused
  @f: new format
  new video format is set which includes width and
  field type. width is fixed to 720, no scaling.
  Only UYVY is supported by this hardware.
  the minimum height is 200, the maximum is 576 (PAL)
  return value: 0, no error
  -EINVAL, pixel or field format not supported
 It is the only supported format 
  vidioc_s_fmt_vid_cap - set current video format parameters
  @file: descriptor of device
  @priv: unused
  @f: returned format information
  set new capture format
  return value: 0, no error
  other, delivered by video DAC routine.
 Can't change format during acquisition 
 Y-X Top Field Offset 
 Y-X Bottom Field Offset 
 Y-X Top Field Stop
 Y-X Bottom Field Stop 
 Video Memory Pitch 
  vidioc_g_fmt_vid_cap - get current video format parameters
  @file: descriptor of device
  @priv: unused
  @f: contains format information
  returns current video format parameters
  return value: 0, always successful
 FMT handling 
 Buffer handlers 
 Stream onoff 
 Standard handling 
 Input handling 
 Log status ioctl 
 Event handling 
  vip_irq - interrupt routine
  @irq: Number of interrupt ( not used, correct number is assumed )
  @vip: local data structure containing all information
  check for both frame interrupts set ( top and bottom ).
  check FIFO overflow, but limit number of log messages after open.
  signal a complete buffer if done
  return value: IRQ_NONE, interrupt was not generated by VIP
  IRQ_HANDLED, interrupt done.
 No interrupt to handle 
		 this is bad, we are too slow, hope the condition is gone
 Acquisition is over on this buffer 
 Disable acquisition 
 Remove the active buffer from the list 
 Register initialization 
 Clean interrupt 
 Enable Half Line per vertical 
 Reset VIP control 
 Clear VIP control 
 Disable interrupt 
 Reset VIP Control 
 Clear VIP Control 
 Clean VIP Interrupt 
	
	  Inititialize an empty control so VIP can inerithing controls
	  from ADV7180
  vip_gpio_reserve - reserve gpio pin
  @dev: device
  @pin: GPIO pin number
  @dir: direction, input or output
  @name: GPIO pin name
  vip_gpio_release - release gpio pin
  @dev: device
  @pin: GPIO pin number
  @name: GPIO pin name
  sta2x11_vip_init_one - init one instance of video device
  @pdev: PCI device
  @ent: (not used)
  allocate reset pins for DAC.
  Reset video DAC, this is done via reset line.
  allocate memory for managing device
  request interrupt
  map IO region
  register device
  find and initialize video DAC
  return value: 0, no error
  -ENOMEM, no memory
  -ENODEV, device could not be detected or registered
 Check if hardware support 26-bit DMA 
 Enable PCI 
 Get VIP platform data 
 Power configuration 
 Datasheet says 5ms between PWR and RST 
 Datasheet says 5ms between PWR and RST 
 Allocate a new VIP instance 
 Initialize buffer 
 Initialize and register video device 
 Get ADV7180 subdevice 
	
	  do not call pci_disable_device on sta2x11 because it break all
	  other Bus masters on this EP
  sta2x11_vip_remove_one - release device
  @pdev: PCI device
  Undo everything done in .._init_one
  unregister video device
  free interrupt
  unmap ioadresses
  free memory
  free GPIO pins
	
	  do not call pci_disable_device on sta2x11 because it break all
	  other Bus masters on this EP
  sta2x11_vip_suspend - set device into power save mode
  @dev_d: PCI device
  all relevant registers are saved and an attempt to set a new state is made.
  return value: 0 always indicate success,
  even if device could not be disabled. (workaround for hardware problem)
  sta2x11_vip_resume - resume device operation
  @dev_d : PCI device
  return value: 0, no error.
  other, could not set device to power on state.
 SPDX-License-Identifier: GPL-2.0-or-later
  SMI PCIe driver for DVBSky cards.
  Copyright (C) 2014 Max nibble <nibble.max@gmail.com>
 ir functions call by main driver.
 init input device 
 SPDX-License-Identifier: GPL-2.0-or-later
  SMI PCIe driver for DVBSky cards.
  Copyright (C) 2014 Max nibble <nibble.max@gmail.com>
 set port mux.
 set DTV register.
 Port A 
 Port B 
 disable and clear interrupt.
 reset demod.
 i2c bit bus.
 disable output.
 reset and software mode.
 set as input.
 set as output.
 set as input.
 set as output.
 set as input.
 set as input.
 i2c 0.
 i2c 1.
 i2c bus 0 
 Raise SCL and SDA 
 i2c bus 1 
 Raise SCL and SDA 
 ts port interrupt operations 
 tasklet handler: DMA data to dmx.
 CH-0 DMA interrupt.
		 value of DMA_PORT0_CHAN0_TRANS_STATE register [21:0]
		  indicate dma total transfer length and
		  zero of [21:0] indicate dma total transfer length
		dvb_dmx_swfilter(&port->demux,
 CH-1 DMA interrupt.
		 value of DMA_PORT0_CHAN0_TRANS_STATE register [21:0]
		  indicate dma total transfer length and
		  zero of [21:0] indicate dma total transfer length
		dvb_dmx_swfilter(&port->demux,
 restart DMA.
 Re-enable interrupts 
 Port A 
 Port B 
 ts0 interrupt.
 ts1 interrupt.
 ir interrupt.
 tuner I2C module 
 attach demod 
 attach tuner 
 delegate signal strength measurement to tuner 
 tuner I2C module 
 attach demod 
 attach tuner 
 delegate signal strength measurement to tuner 
 select i2c bus 
 attach demod 
 attach tuner 
 register dvb frontend 
 init MAC.
 remove I2C demod and tuner 
 Setup Channel-0 
 write DMA register, start DMA engine 
 Setup Channel-1 
 write DMA register, start DMA engine 
 port init.
 dvb init.
 fe init.
 should we set to 32bit DMA? 
 to do msi interrupt.???
 DVBSky cards 
 PCI IDs 
 SPDX-License-Identifier: GPL-2.0-or-later
  pluto2.c - Satelco Easywatch Mobile Terrestrial Receiver [DVB-T]
  Copyright (C) 2005 Andreas Oberritter <obi@linuxtv.org>
  based on pluto2.c 1.10 - http:instinct-wp8.no-ip.orgpluto
 	by Dany Salman <salmandany@yahoo.fr>
 	Copyright (c) 2004 TDF
 PID n pattern registers 
 PC address register 
 TS ctrl & status 
 miscellaneous 
 MSB MAC address 
 ISB MAC address 
 LSB MAC address 
 SPI data 
 serial links ctrlstatus 
 pci 
 dvb 
 i2c 
 irq 
 dma 
 set the number of packets 
	 try to detect i2c_inb() to workaround hardware bug:
 enable PID filtering 
 disable PID filtering 
	 synchronize the DMA transfer with the CPU
	 Workaround for broken hardware:
	  [1] On startup NBPACKETS seems to contain an uninitialized value,
	      but no packets have been transferred.
	  [2] Sometimes (actually very often) NBPACKETS stays at zero
	      although one packet has been transferred.
	  [3] Sometimes (actually rarely), the card gets into an erroneous
	      mode where it continuously generates interrupts, claiming it
	      has received nbpackets>TS_DMA_PACKETS packets, but no packet
	      has been transferred. Only a reset seems to solve this
	 clear the dma buffer. this is needed to be able to identify
 reset the dma address 
 sync the buffer and give it back to the card 
 check whether an interrupt occurred on this device 
 It's dead Jim 
 dma end interrupt 
 overflow interrupt 
 ACK the interrupt 
 disable AFUL and LOCK interrupts 
 enable DMA and OVERFLOW interrupts 
 clear pending interrupts 
 disable all interrupts 
 clear pending interrupts 
 set automatic LED control by FPGA 
 set data endianness 
 map DMA and set address 
 enable interrupts 
 reset TS logic 
 disable interrupts 
 LED: disable automatic control, enable yellow, disable green 
 unmap DMA 
 LG Innotek TDTE-E001P (Infineon TUA6034) 
 Fref = 166.667 Hz
 Fref  3 = 500.000 Hz
 IF = 36166667
 IF  Fref = 217
div = divide(p->frequency + 36166667, 166667);
 VHF: 174-230 MHz
 center: 350 MHz
 UHF: 470-862 MHz
 enable interrupts 
 i2c 
 Raise SCL and SDA 
 dvb 
 empty 
 SPDX-License-Identifier: GPL-2.0-or-later
   Driver for the Conexant CX23885 PCIe bridge
   Copyright (c) 2006 Steven Toth <stoth@linuxtv.org>
 Deal with i2c probe functions with zero payload 
 dev, reg + first byte 
 following bytes 
 Deal with i2c probe functions with zero payload 
 read 
 write then read from same address 
 write 
 ----------------------------------------------------------------------- 
 init + register i2c adapter 
 Instantiate the IR receiver device, if present 
		 Use quick read command for probe, some IR chips don't
 write 0 to bus 2 addr 0x144 via i2x_xfer() 
 Register 0x144 
 SPDX-License-Identifier: GPL-2.0-or-later
   Driver for the Conexant CX23885 PCIe bridge
   Copyright (c) 2006 Steven Toth <stoth@linuxtv.org>
 ------------------------------------------------------------------ 
 board config info                                                  
 Ensure safe default for unknown boards 
 0x84 >> 1 
 0x84 >> 1 
 0xc2 >> 1 
 0x84 >> 1 
 0x84 >> 1 
 0x84 >> 1 
 0xc0 >> 1 
 0xc2 >> 1 
 ------------------------------------------------------------------ 
 PCI subsystem IDs                                                  
 HVR1215 
 HVR1215 
 HVR1215 
 Hauppauge WinTV HVR-4400 (Model 121xxx, Hybrid DVB-TS2, IR) 
 Hauppauge WinTV HVR-5500 (Model 121xxx, Hybrid DVB-TCS2, IR) 
 Hauppauge WinTV Starburst (Model 121x00, DVB-S2, IR) 
 Hauppauge WinTV HVR-5500 (Model 121xxx, Hybrid DVB-TCS2, IR) 
 Tuner Pair 1 
 Tuner Pair 2 
 Tuner Pair 1 
 Tuner Pair 2 
 Hauppauge WinTV HVR-1265 (Model 161xx1, Hybrid ATSCQAM-B) 
 The serial number record begins with tag 0x59 
 Make sure we support the board model 
		 WinTV-HVR1270 (PCIe, Retail, half height)
		 WinTV-HVR1210 (PCIe, Retail, half height)
		 WinTV-HVR1270 (PCIe, Retail, half height)
		 WinTV-HVR1210 (PCIe, Retail, half height)
		 WinTV-HVR1275 (PCIe, Retail, half height)
		 WinTV-HVR1210 (PCIe, Retail, half height)
		 WinTV-HVR1270 (PCIe, Retail, full height)
		 WinTV-HVR1210 (PCIe, Retail, full height)
		 WinTV-HVR1270 (PCIe, Retail, full height)
		 WinTV-HVR1210 (PCIe, Retail, full height)
		 WinTV-HVR1275 (PCIe, Retail, full height)
		 WinTV-HVR1210 (PCIe, Retail, full height)
		 WinTV-HVR1200 (PCIe, Retail, full height)
		 WinTV-ImpactVCB-e (PCIe, Retail, half height)
		 WinTV-HVR1200 (PCIe, OEM, half height)
		 WinTV-HVR1200 (PCIe, OEM, half height)
		 WinTV-HVR1200 (PCIe, OEM, full height)
		 WinTV-HVR1200 (PCIe, OEM, half height)
		 WinTV-HVR1200 (PCIe, OEM, full height)
		 WinTV-HVR1200 (PCIe, OEM, full height)
		 WinTV-HVR1200 (PCIe, OEM, half height)
		 WinTV-HVR1200 (PCIe, OEM, full height)
		 WinTV-HVR1800lp (PCIe, Retail, No IR, Dual
		 WinTV-HVR1500 (Express Card, OEM, No IR, ATSC
		 WinTV-HVR1500 (Express Card, Retail, No IR, ATSC
		 WinTV-HVR1500Q (Express Card, OEM, No IR, ATSCQAM
		 WinTV-HVR1500Q (Express Card, Retail, No IR, ATSCQAM
		 WinTV-HVR1800 (PCIe, Retail, 3.5mm in, IR, No FM,
		 WinTV-HVR1800 (PCIe, OEM, RCA in, No IR, FM,
		 WinTV-HVR1800 (PCIe, OEM, RCA in, No IR, FM,
		 WinTV-HVR1800 (PCIe, OEM, RCA in, No IR, No FM,
		 WinTV-HVR1800 (PCIe, OEM, No IR, No FM,
		 WinTV-HVR1250 (PCIe, Retail, IR, full height,
		 WinTV-HVR1250 (PCIe, Retail, IR, half height,
		 WinTV-HVR1250 (PCIe, No IR, half height,
		 WinTV-HVR1250 (PCIe, OEM, No IR, half height,
		 WinTV-HVR1250 (PCIe, OEM, No IR, full height,
		 WinTV-HVR1250 (PCIe, OEM, No IR, half height,
		 WinTV-HVR1400 (Express Card, Retail, IR,
		 WinTV-HVR1700 (PCIe, OEM, No IR, half height)
		 WinTV-HVR1700 (PCIe, OEM, No IR, full height)
		 WinTV-HVR1850 (PCIe, Retail, 3.5mm in, IR, FM,
		 WinTV-HVR1290 (PCIe, OEM, RCA in, IR,
 WinTV-HVR4400 (PCIe, DVB-S2, DVB-CT) 
 WinTV-HVR5500 (PCIe, DVB-S2, DVB-CT) 
 WinTV-HVR5525 (PCIe, DVB-SS2, DVB-TT2C) 
 WinTV-HVR-1265 K4 (PCIe, AnalogATSCQAM-B) 
 888 version, hybrid 
 885 version, DVB only 
		 WinTV-QuadHD (DVB) Tuner Pair 1 (PCIe, IR, half height,
 888 version, hybrid 
 885 version, DVB only 
		 WinTV-QuadHD (DVB) Tuner Pair 2 (PCIe, IR, half height,
 888 version, hybrid 
 885 version, digital only 
		 WinTV-QuadHD (ATSC) Tuner Pair 1 (PCIe, IR, half height,
 888 version, hybrid 
 885 version, digital only 
		 WinTV-QuadHD (ATSC) Tuner Pair 2 (PCIe, IR, half height,
 Some TBS cards require initing a chip using a bitbanged SPI attached
   to the cx23885 gpio's. If this chip doesn't get init'ed the demod
 Tuner Reset Command 
		 Two identical tuners on two different i2c buses,
 Tuner Reset Command 
 XC3028L Reset Command 
 Drive the tuner into reset and back out 
 GPIO-0 cx24227 demodulator reset 
 Bring the part out of reset 
 GPIO-0 cx24227 demodulator 
 GPIO-2 xc3028 tuner 
 Put the parts into reset 
 Bring the parts out of reset 
 GPIO-0 cx24227 demodulator reset 
 GPIO-2 xc5000 tuner reset 
 Bring the part out of reset 
 GPIO-0 656_CLK 
 GPIO-1 656_D0 
 GPIO-2 8295A Reset 
 GPIO-3-10 cx23417 data0-7 
 GPIO-11-14 cx23417 addr0-3 
 GPIO-15-18 cx23417 READY, CS, RD, WR 
 GPIO-19 IR_RX 
 CX23417 GPIO's 
 EIO15 Zilog Reset 
 EIO14 S5H1409CX24227 Reset 
 Put the demod into reset and protect the eeprom 
 Bring the demod and blaster out of reset 
 Force the TDA8295A into reset and back 
 GPIO-0 tda10048 demodulator reset 
 GPIO-2 tda18271 tuner reset 
 Put the parts into reset and back 
 GPIO-0 TDA10048 demodulator reset 
 GPIO-2 TDA8295A Reset 
 GPIO-3-10 cx23417 data0-7 
 GPIO-11-14 cx23417 addr0-3 
 GPIO-15-18 cx23417 READY, CS, RD, WR 
 The following GPIO's are on the interna AVCore (cx25840) 
 GPIO-19 IR_RX 
 GPIO-20 IR_TX 416DVBT Select 
 GPIO-21 IIS DAT 
 GPIO-22 IIS WCLK 
 GPIO-23 IIS BCLK 
 Put the parts into reset and back 
 GPIO-0  Dibcom7000p demodulator reset 
 GPIO-2  xc3028L tuner reset 
 GPIO-13 LED 
 Put the parts into reset and back 
 GPIO-0 xc5000 tuner reset i2c bus 0 
 GPIO-1 s5h1409 demod reset i2c bus 0 
 GPIO-2 xc5000 tuner reset i2c bus 1 
 GPIO-3 s5h1409 demod reset i2c bus 0 
 Put the parts into reset and back 
 GPIO-0 portb xc3028 reset 
 GPIO-1 portb zl10353 reset 
 GPIO-2 portc xc3028 reset 
 GPIO-3 portc zl10353 reset 
 Put the parts into reset and back 
 GPIO-2  xc3028 tuner reset 
 The following GPIO's are on the internal AVCore (cx25840) 
 GPIO-?  zl10353 demod reset 
 Put the parts into reset and back 
		 GPIO-0 INTA from CiMax1
		   GPIO-1 INTB from CiMax2
		   GPIO-2 reset chips
		   GPIO-3 to GPIO-10 dataaddr for CA
		   GPIO-11 ~CS0 to CiMax1
		   GPIO-12 ~CS1 to CiMax2
		   GPIO-13 ADL0 load LSB addr
		   GPIO-14 ADL1 load MSB addr
		   GPIO-15 ~RDY from CiMax
		   GPIO-17 ~RD to CiMax
		   GPIO-18 ~WR to CiMax
 GPIO as out 
 GPIO1 and GPIO2 as INTA and INTB from CiMaxes, reset low 
 reset delay 
 GPIO as out, reset high 
 enable GPIO3-18 pins 
 GPIO-15 IN as ~ACK, rest as OUT 
 ~RD, ~WR high; ADL0, ADL1 low; ~CS0, ~CS1 high 
 enable irq 
 INTERRUPTS active low
 GPIO-5 RF Control: 0 = RF1 Terrestrial, 1 = RF2 Cable 
 GPIO-6 I2C Gate which can isolate the demod from the bus 
 GPIO-9 Demod reset 
 Put the parts into reset and back 
 GPIO-0 (0)Analog  (1)Digital TV 
 GPIO-1 reset XC5000 
 GPIO-2 demod reset 
 GPIO-0 reset first ATBM8830 
 GPIO-1 reset second ATBM8830 
 GPIO-0 656_CLK 
 GPIO-1 656_D0 
 GPIO-2 Wake# 
 GPIO-3-10 cx23417 data0-7 
 GPIO-11-14 cx23417 addr0-3 
 GPIO-15-18 cx23417 READY, CS, RD, WR 
 GPIO-19 IR_RX 
 GPIO-20 C_IR_TX 
 GPIO-21 I2S DAT 
 GPIO-22 I2S WCLK 
 GPIO-23 I2S BCLK 
 ALT GPIO: EXP GPIO LATCH 
 CX23417 GPIO's 
 GPIO-14 S5H1411CX24228 Reset 
 GPIO-13 EEPROM write protect 
 Put the demod into reset and protect the eeprom 
 Bring the demod out of reset 
 CX24228 GPIO 
 Connected to IF  Mux 
 Bring the part out of reset 
		 GPIO-0 ~INT in
		   GPIO-1 TMS out
		   GPIO-2 ~reset chips out
		   GPIO-3 to GPIO-10 dataaddr for CA inout
		   GPIO-11 ~CS out
		   GPIO-12 ADDR out
		   GPIO-13 ~WR out
		   GPIO-14 ~RD out
		   GPIO-15 ~RDY in
		   GPIO-16 TCK out
		   GPIO-17 TDO in
		   GPIO-18 TDI out
 GPIO-1,2 as out 
 GPIO-0 as INT, reset & TMS low 
 reset delay 
 reset high 
 enable GPIO-3..18 pins 
 GPIO-17 is TDO in, GPIO-15 is ~RDY in, rest is out 
 ~RD, ~WR high; ADDR low; ~CS high 
 enable irq 
 INTERRUPTS active low
 GPIO-8 tda10071 demod reset 
 GPIO-9 si2165 demod reset (only HVR4400HVR5500)
 Put the parts into reset and back 
 GPIO-0,1,2 setup direction as output 
 AF9013 demod reset 
 demod tune? 
 XC3028L tuner reset 
 enable GPIO3-18 pins 
		
		  GPIO-0 INTA from CiMax, input
		  GPIO-1 reset CiMax, output, high active
		  GPIO-2 reset demod, output, low active
		  GPIO-3 to GPIO-10 dataaddr for CAM
		  GPIO-11 ~CS0 to CiMax1
		  GPIO-12 ~CS1 to CiMax2
		  GPIO-13 ADL0 load LSB addr
		  GPIO-14 ADL1 load MSB addr
		  GPIO-15 ~RDY from CiMax
		  GPIO-17 ~RD to CiMax
		  GPIO-18 ~WR to CiMax
 GPIO 12 as output 
 GPIO 0 as input 
 reset delay 
 GPIO as out, reset high 
 enable GPIO3-18 pins 
 GPIO-15 IN as ~ACK, rest as OUT 
 ~RD, ~WR high; ADL0, ADL1 low; ~CS0, ~CS1 high 
 enable irq 
 INTERRUPTS active low 
		
		  HVR5525 GPIO Details:
		   GPIO-00 IR_WIDE
		   GPIO-02 wake#
		   GPIO-03 VAUX Pres.
		   GPIO-07 PROG#
		   GPIO-08 SAT_RESN
		   GPIO-09 TER_RESN
		   GPIO-10 B2_SENSE
		   GPIO-11 B1_SENSE
		   GPIO-15 IR_LED_STATUS
		   GPIO-19 IR_NARROW
		   GPIO-20 Blauster1
		   ALTGPIO VAUX_SWITCH
		   AUX_PLL_CLK : Blaster2
 Put the parts into reset and back 
		 For documentation purposes, it's worth noting that this
		  card does not have any GPIO's connected to subcomponents.
		
		  GPIO-08 TER1_RESN
		  GPIO-09 TER2_RESN
 Put the parts into reset and back 
 FIXME: Implement me 
		
		  For these boards we need to invert the Tx output via the
		  IR controller to have the LED off while idle
 sd_ir is a duplicate pointer to the AV Core, just clear it 
TMS
TDI
TDO
TCK
 Defaults for VID B 
 Parallel 
 Enable TS_CLK 
 Defaults for VID C 
 DREQ_POL, SMODE, PUNC_CLK, MCLK_POL Serial bus + punc clk 
 Enable TS_CLK 
 Serial bus + punctured clock 
 Enable TS_CLK 
 Serial bus + punctured clock 
 Enable TS_CLK 
 Defaults for VID B - Analog encoder 
 DREQ_POL, SMODE, PUNC_CLK, MCLK_POL Serial bus + punc clk 
 Enable TS_CLK 
 APB_TSVALERR_POL (active low)
 Defaults for VID C 
 Serial bus + punctured clock 
 Enable TS_CLK 
 Parallel 
 Enable TS_CLK 
 Parallel 
 Enable TS_CLK 
 Serial bus + punctured clock 
 Enable TS_CLK 
 Serial bus + punctured clock 
 Enable TS_CLK 
 Serial bus + punctured clock 
 Enable TS_CLK 
 Serial bus + punctured clock 
 Enable TS_CLK 
 Parallel 
 Enable TS_CLK 
 Parallel 
 Enable TS_CLK 
 Serial bus + punctured clock 
 Enable TS_CLK 
 Serial bus + punctured clock 
 Enable TS_CLK 
 Serial bus + punctured clock 
 Enable TS_CLK 
 Serial bus + punctured clock 
 Enable TS_CLK 
 Parallel 
 Enable TS_CLK 
 Serial bus 
 Enable TS_CLK 
 Parallel 
 Enable TS_CLK 
 Serial bus 
 Enable TS_CLK 
 Parallel 
 Enable TS_CLK 
 Serial bus + punctured clock 
 Enable TS_CLK 
 Serial bus + punctured clock 
 Enable TS_CLK 
 Serial bus + punctured clock 
 Enable TS_CLK 
 Serial bus + punctured clock 
 Enable TS_CLK 
	 Certain boards support analog, or require the avcore to be
	  loaded, ensure this happens.
 Currently only enabled for the integrated IR controller 
 set host data for clk_freq configuration 
 This cs3308 controls the audio from the breakout cable 
 This cs3308 controls the audio from the onboard header 
 AUX-PLL 27MHz CLK 
 SPDX-License-Identifier: GPL-2.0-or-later
   Driver for the Conexant CX2388578 PCIe bridge
   Infrared remote control input device
   Most of this file is
   Copyright (C) 2009  Andy Walls <awalls@md.metrocast.net>
   However, the cx23885_input_{init,fini} functions contained herein are
   derived from Linux kernel files linuxmediavideo......-input.c marked as:
   Copyright (C) 2008 <srinivasa.deevi at conexant dot com>
   Copyright (C) 2005 Ludovico Cavedon <cavedon@sssup.it>
 		       Markus Rechberger <mrechberger@gmail.com>
 		       Mauro Carvalho Chehab <mchehab@kernel.org>
 		       Sascha Sommer <saschasommer@freenet.de>
   Copyright (C) 2004, 2005 Chris Pascoe
   Copyright (C) 2003, 2004 Gerd Knorr
   Copyright (C) 2003 Pavel Machek
		
		  The only boards we handle right now.  However other boards
		  using the CX2388x integrated IR controller should be similar
 If there was a FIFO overrun, stop the device 
 Mitigate race with cx23885_input_ir_stop() 
 If there was a FIFO overrun, clear & restart the device 
 Mitigate race with cx23885_input_ir_stop() 
		
		  The IR controller on this board only returns pulse widths.
		  Any other mode setting will fail to set up the device.
 Setup for baseband compatible with both RC-5 and RC-6A 
 RC-5:  2,222,222 ns = 136 kHz  32 cycles  2 marks  1.25
 RC-6A: 3,333,333 ns = 136 kHz  16 cycles  6 marks  1.25
 ns 
 RC-5:    666,667 ns = 136 kHz  32 cycles  1 mark  0.75 
 RC-6A:   333,333 ns = 136 kHz  16 cycles  1 mark  0.75 
 ns 
		
		  This board has inverted receive sense:
		  mark is received as low logic level;
		  falling edges are detected as rising edges; etc.
		
		  The IR controller on this board only returns pulse widths.
		  Any other mode setting will fail to set up the device.
 Setup for a standard NEC protocol 
 Hz, 455 kHz12 for NEC 
 Hz 
 Hz 
 percent, 33 percent for NEC 
		
		  NEC max pulse width: (643)(455 kHz12)  16 nec_units
		  (643)(455 kHz12)  16 nec_units  1.375 = 12378022 ns
 ns 
		
		  NEC noise filter min width: (643)(455 kHz12)  1 nec_unit
		  (643)(455 kHz12)  1 nec_units  0.625 = 351648 ns
 ns 
	
	  Stop the sd_ir subdevice from generating notifications and
	  scheduling work.
	  It is shutdown this way in order to mitigate a race with
	  cx23885_input_rx_work_handler() in the overrun case, which could
	  re-enable the subdevice.
	
	  If the IR device (hardware registers, chip, GPIO lines, etc.) isn't
	  encapsulated in a v4l2_subdev, then I'm not going to deal with it.
 Integrated CX2388[58] IR controller 
 The grey Hauppauge RC-5 remote 
 Integrated CX23885 IR controller 
 The grey Terratec remote with orange buttons 
 Integrated CX23885 IR controller 
 A guess at the remote 
 Integrated CX23885 IR controller 
 A guess at the remote 
 Integrated CX23885 IR controller 
 A guess at the remote 
 Integrated CX23885 IR controller 
 Integrated CX23885 IR controller 
 cx23885 board instance kernel IR state 
 input device 
 Go 
 Always stop the IR hardware from generating interrupts 
 SPDX-License-Identifier: GPL-2.0-or-later
   Driver for the Conexant CX23885 PCIe bridge
   Copyright (c) 2007 Steven Toth <stoth@linuxtv.org>
 ------------------------------------------------------------------ 
 ------------------------------------------------------------------- 
 static data                                                         
 ------------------------------------------------------------------- 
 8 bit registers, 8 bit values 
 8 bit registers, 8 bit values 
 Enable clock to delta-sigma and dec filter 
 Wake up 
 Select Analog TV 
 Tell the internal AV decoder 
 Configure audio routing 
	 The baseband video core of the cx23885 has two audio inputs.
	  LR1 and LR2. In almost every single case so far only HVR1xxx
	  cards we've only ever supported LR1. Time to support LR2,
	  which is available via the optional white breakout header on
	  the board.
	  We'll use a could of existing enums in the card struct to allow
	  devs to specify which baseband input they need, or just default
	  to what we've always used.
 Not specifically defined, assume the default. 
 ------------------------------------------------------------------ 
 Stop the dmafifo before we tamper with it's risc programs 
 setup fifo + format 
 reset counter 
 enable irq 
 start dma 
 FIFO and RISC enable 
 NTSC or  
 PAL  SECAM OR 888 in NTSC MODE 
 cx25840 transmits NTSC bottom field first 
 All other formats are top field first 
  The risc program for each buffer works as follows: it starts with a simple
  'JUMP to addr + 12', which is effectively a NOP. Then the code to DMA the
  buffer follows and at the end we have a JUMP back to the start + 12 (skipping
  the initial JUMP).
  This is the risc program of the first buffer to be queued if the active list
  is empty and it just keeps DMAing this buffer without generating any
  interrupts.
  If a new buffer is added then the initial JUMP in the code for that buffer
  will generate an interrupt which signals that the previous buffer has been
  DMAed successfully and that it can be returned to userspace.
  It also sets the final jump of the previous buffer to the start of the new
  buffer, thus chaining the new buffer into the DMA chain. This is a single
  atomic u32 write, so there is no race condition.
  The end-result of all this that you only get an interrupt when a buffer
  is ready, so the control flow is very easy.
 add jump to start 
 bits 63-32 
 ------------------------------------------------------------------ 
 VIDEO IOCTLS                                                       
 set_fmt overwrites f->fmt.pix.field, restore it 
 i2c device tuners 
 Two selectable audio inputs for non-tv inputs 
		 enum'd input matches our configured input.
		  Ask the video decoder to process the call
		  and give it an oppertunity to update the
		  status field.
 By default establish the default audio input for the card also 
 Caller is free to use VIDIOC_S_AUDIO to override afterwards 
	 Skip the audio defaults from the cards struct, caller wants
 i2c device tuners 
 i2c device tuners 
 Update the AV core 
 i2c device tuners 
 i2c device tuners 
 I need to mute audio here 
 When changing channels it is required to reset TVAUDIO 
 I need to unmute audio here 
 I need to mute audio here 
 If HVR1850 
 When changing channels it is required to reset TVAUDIO 
 I need to unmute audio here 
 ----------------------------------------------------------- 
 risc op code error, fifo overflow or line sync detection error 
 Video 
 Allow the VBI framework to process it's payload 
 ----------------------------------------------------------- 
 exported stuff                                              
 Initialize VBI template 
 init video dma queues 
 init vbi dma queues 
 initial device configuration 
 register Video device 
 i2c device tuners 
 register VBI device 
 i2c device tuners 
 Register ALSA audio device 
 SPDX-License-Identifier: GPL-2.0-or-later
   Driver for the Conexant CX2388578 PCIe bridge
   Infrared device support routines - non-input, non-vl42_subdev routines
   Copyright (C) 2009  Andy Walls <awalls@md.metrocast.net>
 Possibly called in an IRQ context 
	
	  For the integrated AV core, we are already in a workqueue context.
	  For the CX23888 integrated IR, we are in an interrupt context.
 Possibly called in an IRQ context 
	
	  For the integrated AV core, we are already in a workqueue context.
	  For the CX23888 integrated IR, we are in an interrupt context.
 SPDX-License-Identifier: GPL-2.0-or-later
  netup-init.c
  NetUP Dual DVB-S2 CI driver
  Copyright (C) 2009 NetUP Inc.
  Copyright (C) 2009 Igor M. Liplianin <liplianin@netup.ru>
  Copyright (C) 2009 Abylay Ospan <aospan@netup.ru>
 set 27MHz on AUX_CLK 
 Stop microcontroller 
 Aux PLL frac for 27 MHz 
 Aux PLL int for 27 MHz 
 start microcontroller 
 SPDX-License-Identifier: GPL-2.0-or-later
  cimax2.c
  CIMax2(R) SP2 driver in conjunction with NetUp Dual DVB-S2 CI card
  Copyright (C) 2009 NetUP Inc.
  Copyright (C) 2009 Igor M. Liplianin <liplianin@netup.ru>
  Copyright (C) 2009 Abylay Ospan <aospan@netup.ru>
 Max transfer size done by I2C transfer functions 
 Bit definitions for MC417_RWD and MC417_OEN registers  
  bits 31-16
+-----------+
| Reserved  |
+-----------+
  bit 15  bit 14  bit 13 bit 12  bit 11  bit 10  bit 9   bit 8
+-------+-------+-------+-------+-------+-------+-------+-------+
|  WR#  |  RD#  |       |  ACK# |  ADHI |  ADLO |  CS1# |  CS0# |
+-------+-------+-------+-------+-------+-------+-------+-------+
 bit 7   bit 6   bit 5   bit 4   bit 3   bit 2   bit 1   bit 0
+-------+-------+-------+-------+-------+-------+-------+-------+
|  DATA7|  DATA6|  DATA5|  DATA4|  DATA3|  DATA2|  DATA1|  DATA0|
+-------+-------+-------+-------+-------+-------+-------+-------+
 MC417 
 stores all private variables for communication with CI 
 write addr 
 data in 
 data out 
 choose chip 
 readwrite 
 not implemented 
 work handler 
 CAM module IRQ processing. fast operation 
	 CAM module INSERTREMOVE processing. slow operation because of i2c
 CI irq handler 
 module A control
 auto select mask high A 
 auto select mask low A 
 auto select pattern high A 
 auto select pattern low A 
 memory access time A 
 invert input A 
 RFU 
 RFU 
 module B control
 auto select mask high B 
 auto select mask low B 
 auto select pattern high B 
 auto select pattern low B 
 memory access time B 
 invert input B 
 RFU 
 RFU 
 auto select mask high Ext 
 auto select mask low Ext 
 auto select pattern high Ext 
 auto select pattern low Ext 
 RFU 
 destination - module A 
 power on (use it like store place) 
 RFU 
 int status read only 
 DETAM, IRQAM unmasked 
 EXTINT=active-high, INT=push-pull 
 USCG1 
 ack active low 
 LOCK = 0 
 serial mode, rising in, rising out, MSB first
 synchronization 
 lock registers 
 power on slots 
 flags  0,
 n_slots  1);
 SPDX-License-Identifier: GPL-2.0-or-later
   Driver for the Conexant CX23885 PCIe bridge
   Copyright (c) 2006 Steven Toth <stoth@linuxtv.org>
  Some platforms have been found to require periodic resetting of the DMA
  engine. Ryzen and XEON platforms are known to be affected. The symptom
  encountered is "mpeg risc op code error". Only Ryzen platforms employ
  this workaround if the option equals 1. The workaround can be explicitly
  disabled for all platforms by setting to 0, the workaround can be forced
  on for any platform by setting to 2.
 FIXME, these allocations will change when
  analog arrives. The be reviewed.
  CX23887 Assumptions
  1 line = 16 bytes of CDT
  cmds size = 80
  cdt size = 16  linesize
  iqsize = 64
  maxlines = 6
  Address Space:
  0x00000000 0x00008fff FIFO clusters
  0x00010000 0x000104af Channel Management Data Structures
  0x000104b0 0x000104ff Free
  0x00010500 0x000108bf 15 channels  iqsize
  0x000108c0 0x000108ff Free
  0x00010900 0x00010e9f IQ's + Cluster Descriptor Tables
                        15 channels  (iqsize + (maxlines  linesize))
  0x00010ea0 0x00010xxx Free
 service maximum five buffers 
 count register is 16 bits so apply modulo appropriately 
 alignment 
 write CDT 
 write CMDS 
 64 bits 63-32 
 fill registers 
 No consideration for bits 63-32 
 read-only 
 disable RISC controller 
 Disable all IR activity 
 Disable Video AB activity 
 Disable Audio activity 
 Disable Serial port 
 Disable Interrupts 
 clear dma in progress 
 clear dma in progress 
	 The cx23885 bridge has a weird bug which causes NMI to be asserted
	  when DMA begins if RDR_TLCTL0 bit4 is not cleared. It does not
	  occur on the cx23887 bridge.
 clear dma in progress 
 Transport bus init dma queue  - Common settings 
 Enable RISC controller and Fifo 
 TS port bits for RISC 
	 This should be hardcoded allow a single frontend
	  attachment to this tsport, keeping the -dvb.c
	  code clean and safe.
 VID_B 
 VID_B bit1 
 VID_C 
 VID_C bit2 
 cx23885 
 CX23885-12Z 
 CX23885-13Z14Z 
 CX23888-21Z22Z 
 CX23885-14Z 
 CX23888-31Z 
 CX23885-15Z, CX23888-31Z 
 CX23887-15Z 
 CX23887-14Z 
 Find the first v4l2_subdev member of the group id in hw 
 Configure the internal memory 
 Could be 887 or 888, assume an 888 default 
 Apply a sensible clock frequency for the PCIe bridge 
 Apply a sensible clock frequency for the PCIe bridge 
 board config 
 no DIF on cx23885, so no analog tuner support possible 
 If the user specific a clk freq override, apply it 
		 Hauppauge ImpactVCBe device ID 0x7137 is populated
		  with an 888, and a 25Mhz crystal, instead of the
		  usual third overtone 50Mhz. The default clock rate must
		  be overridden so the cx25840 is properly configured
 External Master 1 Bus 
 100kHz 
 External Master 2 Bus 
 100kHz 
 Internal Master 3 Bus 
 1.95MHz 
 PCIe stuff 
 Assume some sensible defaults 
	 The cx23417 encoder has GPIO's that need to be initialised
	  before DVB, so that demodulators and tuners are out of
	  reset before DVB uses them.
 init hardware 
		
		  GPIOs 98 are input detection bits for the breakout video
		  (gpio 8) and audio (gpio 9) cables. When they're attached,
		  this gpios are pulled high. Make sure these GPIOs are marked
		  as inputs.
 disable MSI for NetUP cards, otherwise CI is not working 
 bits 63-32 
 sync instruction 
 scan lines 
 fits into current chunk 
 bits 63-32 
 scanline needs to be split 
 bits 63-32 
 bits 63-32 
 bits 63-32 
	 estimate risc mem: worst case is one write per page border +
	   one write per scan line + syncs + jump (all 2 dwords).  Padding
	   can cause next bpl to start close to a page border.  First DMA
 write and jump need and extra dword 
 write risc instructions 
 save pointer to jmp instruction address 
	 estimate risc mem: worst case is one write per page border +
	   one write per scan line + syncs + jump (all 2 dwords).  Here
	   there is no padding and no sync.  First DMA region may be smaller
 Jump and write need an extra dword 
 write risc instructions 
 save pointer to jmp instruction address 
	 estimate risc mem: worst case is one write per page border +
	   one write per scan line + syncs + jump (all 2 dwords).  Padding
	   can cause next bpl to start close to a page border.  First DMA
 write and jump need and extra dword 
 write risc instructions 
	 Sync to line 6, so US CC line 21 will appear in line '12'
 save pointer to jmp instruction address 
 clear dma in progress 
 Stop the fifo and risc engine for this port 
 setup fifo + format 
 write TS length to chip 
 If the port supports SRC SELECT, configure it 
 NOTE: this is 2 (reserved) for portb, does it matter? 
 reset counter to zero 
 Set VIDB pins to input 
 Clear TS1_OE & TS1_SOP_OE 
 Set VIDC pins to input 
 Clear TS2_SOP_OE 
 Clear TS1_OE 
 FIXME, bit 2 writing here is questionable 
 set TS1_SOP_OE and TS1_OE_HI 
 Sets MOE_CLK_DIS to disable MoE clock 
 sets MCLK_DLY_SELBCLK_DLY_SEL to 1 buffer delay each 
		 ALT_GPIO_ALT_SET: GPIO[0]
		  IR_ALT_TX_SEL: GPIO[1]
		  GPIO1_ALT_SEL: VIP_656_DATA[0]
		  GPIO0_ALT_SEL: VIP_656_CLK
 enable irqs 
 clear dma in progress 
 clear dma in progress 
 clear dma in progress 
 Enable RISC controller 
 clear dma in progress 
 clear dma in progress 
 Stop interrupts and DMA 
 just in case wait for any dma to complete before allowing dealloc 
 Set TS1_OE 
 clear TS1_SOP_OE and TS1_OE_HI 
 ------------------------------------------------------------------ 
  The risc program for each buffer works as follows: it starts with a simple
  'JUMP to addr + 12', which is effectively a NOP. Then the code to DMA the
  buffer follows and at the end we have a JUMP back to the start + 12 (skipping
  the initial JUMP).
  This is the risc program of the first buffer to be queued if the active list
  is empty and it just keeps DMAing this buffer without generating any
  interrupts.
  If a new buffer is added then the initial JUMP in the code for that buffer
  will generate an interrupt which signals that the previous buffer has been
  DMAed successfully and that it can be returned to userspace.
  It also sets the final jump of the previous buffer to the start of the new
  buffer, thus chaining the new buffer into the DMA chain. This is a single
  atomic u32 write, so there is no race condition.
  The end-result of all this that you only get an interrupt when a buffer
  is ready, so the control flow is very easy.
 bits 63-32 
 ----------------------------------------------------------- 
 FIXME: port1 assumption here. 
 Possibly called in an IRQ context 
 Possibly called in an IRQ context 
 Mask represents 32 different GPIOs, GPIO's are split into multiple
  registers depending on the board configuration (and whether the
  417 encoder (wi it's own GPIO's) are present. Each GPIO bit will
  be pushed into the correct hardware register, regardless of the
  physical location. Certain registers are shared so we sanity check
  and report errors if we think we're tampering with a GPIo that might
  be assigned to the encoder (and used for the host bus).
  GPIO  2 through  0 - On the cx23885 bridge
  GPIO 18 through  3 - On the cx23417 host bus interface
  GPIO 23 through 19 - On the cx25840 av core
 TODO: 23-19 
 TODO: 23-19 
 TODO: 23-19 
 MC417_OEN is active low for output, write 1 for an input 
 TODO: 23-19 
	 According with
	  https:openbenchmarking.orgsystem1703021-RI-AMDZEN08075Ryzen%207%201800Xlspci,
	  0x1451 is PCI ID for the IOMMU found on Ryzen
	 According to sudo lspci -nn,
	  0x1423 is the PCI ID for the IOMMU found on Kaveri
	 0x1481 is the PCI ID for the IOMMU found on StarshipMatisse
	 0x1419 is the PCI ID for the IOMMU found on 15h (Models 10h-1fh) family
	 0x5a23 is the PCI ID for the IOMMU found on RD890SRD990
 Prepare to handle notifications from subdevices 
 pci init 
 print pci info 
	
	  The CX2388[58] IR controller can start firing interrupts when
	  enabled, so these have to take place after the cx23885_irq() handler
	  is hooked up by the call to request_irq() above.
 unregister stuff 
 CX23885 
 CX23887 Rev 2 
 --- end of list --- 
 SPDX-License-Identifier: GPL-2.0-or-later
  altera-ci.c
   CI driver in conjunction with NetUp Dual DVB-TC RF CI card
  Copyright (C) 2010,2011 NetUP Inc.
  Copyright (C) 2010,2011 Igor M. Liplianin <liplianin@netup.ru>
  currently cx23885 GPIO's used.
  GPIO-0 ~INT in
  GPIO-1 TMS out
  GPIO-2 ~reset chips out
  GPIO-3 to GPIO-10 dataaddr for CA inout
  GPIO-11 ~CS out
  GPIO-12 AD_RG out
  GPIO-13 ~WR out
  GPIO-14 ~RD out
  GPIO-15 ~RDY in
  GPIO-16 TCK out
  GPIO-17 TDO in
  GPIO-18 TDI out
   Bit definitions for MC417_RWD and MC417_OEN registers
  bits 31-16
  +-----------+
  | Reserved  |
  +-----------+
    bit 15  bit 14  bit 13 bit 12  bit 11  bit 10  bit 9   bit 8
  +-------+-------+-------+-------+-------+-------+-------+-------+
  |  TDI  |  TDO  |  TCK  |  RDY# |  #RD  |  #WR  | AD_RG |  #CS  |
  +-------+-------+-------+-------+-------+-------+-------+-------+
   bit 7   bit 6   bit 5   bit 4   bit 3   bit 2   bit 1   bit 0
  +-------+-------+-------+-------+-------+-------+-------+-------+
  |  DATA7|  DATA6|  DATA5|  DATA4|  DATA3|  DATA2|  DATA1|  DATA0|
  +-------+-------+-------+-------+-------+-------+-------+-------+
 FPGA regs 
 const for ci op 
 two CI's on the same fpga 
 stores all private variables for communication with CI 
 stores all private variables for hardware pid filtering 
 save old functions 
 internal params node 
 pointer for internal params, one for each pair of CI's 
 first internal params 
 find chip by dev 
	
	 Search for the last fpga CI chip or
 check demux 
 find chip by demux 
	
	  Search of the last fpga CI chip or
	  find it by demux
 deallocating chip 
 allocating new chip 
 flag - memio, read - readwrite 
 reasonable timeout for CI reset is 10 seconds 
 not implemented 
 work handler 
 ack' irq 
 CI irq handler 
 stored old feed controls 
 pid 0-0x1f always enabled, don't touch them 
 0 - on, 1 - off 
 0 - on, 1 - off 
 ignore pid 
 enable pid 
 pid 0-0x1f always enabled 
 call old feed proc's 
 store old feed controls 
 replace with new feed controls 
 flags  0,
 n_slots  1);
 Enable div 
 enable TS out 
 enable irq 
 SPDX-License-Identifier: GPL-2.0-or-later
   Driver for the Conexant CX23885 PCIe bridge
   Copyright (c) 2007 Steven Toth <stoth@linuxtv.org>
 ------------------------------------------------------------------ 
 ntsc 
 pal 
 We're given the Video Interrupt status register.
  The cx23885_video_irq() func has already validated
  the potential error bits, we just need to
  deal with vbi payload and return indication if
  we actually processed any payload.
 setup fifo + format 
 reset counter 
 enable irq 
 start dma 
 FIFO and RISC enable 
 ------------------------------------------------------------------ 
  The risc program for each buffer works as follows: it starts with a simple
  'JUMP to addr + 12', which is effectively a NOP. Then the code to DMA the
  buffer follows and at the end we have a JUMP back to the start + 12 (skipping
  the initial JUMP).
  This is the risc program of the first buffer to be queued if the active list
  is empty and it just keeps DMAing this buffer without generating any
  interrupts.
  If a new buffer is added then the initial JUMP in the code for that buffer
  will generate an interrupt which signals that the previous buffer has been
  DMAed successfully and that it can be returned to userspace.
  It also sets the final jump of the previous buffer to the start of the new
  buffer, thus chaining the new buffer into the DMA chain. This is a single
  atomic u32 write, so there is no race condition.
  The end-result of all this that you only get an interrupt when a buffer
  is ready, so the control flow is very easy.
 bits 63-32 
 FIFO and RISC enable 
 SPDX-License-Identifier: GPL-2.0-or-later
   Driver for the Conexant CX2388578 PCIe bridge
   AV device support routines - non-input, non-vl42_subdev routines
   Copyright (C) 2010  Andy Walls <awalls@md.metrocast.net>
	 Getting here with the interrupt not handled
	   then probbaly flatiron does have pending interrupts.
 clear left and right adc channel interrupt request flag 
 SPDX-License-Identifier: GPL-2.0-or-later
   Driver for the Conexant CX2388578 PCIe bridge
   Various common ioctl() support functions
   Copyright (c) 2009 Andy Walls <awalls@md.metrocast.net>
 V4L2 spec, but -EREMOTEIO really 
 V4L2 spec, but -EREMOTEIO really 
 SPDX-License-Identifier: GPL-2.0-or-later
  netup-eeprom.c
  24LC02 EEPROM driver in conjunction with NetUP Dual DVB-S2 CI card
  Copyright (C) 2009 NetUP Inc.
  Copyright (C) 2009 Abylay Ospan <aospan@netup.ru>
 Read from EEPROM 
 Write into EEPROM 
 prophylactic delay, datasheet write cycle time = 5 ms 
 SPDX-License-Identifier: GPL-2.0-or-later
   Support for CX23885 analog audio capture
     (c) 2008 Mijhail Moreyra <mijhail.moreyra@gmail.com>
     Adapted from cx88-alsa.c
     (c) 2009 Steven Toth <stoth@kernellabs.com>
			Module global static vars
			Board specific functions
 Constants taken from cx88-reg.h 
 yes, 3 is skipped 
  BOARD Specific: Sets audio DMA
 Make sure RISCFIFO are off before changing FIFORISC settings 
 setup fifo + format - out channel 
 sets bpl size 
 This is required to get good audio (1 seems to be ok) 
 reset counter 
 Enables corresponding bits at AUD_INT_STAT 
 Clean any pending interrupt bits already set 
 enable audio irqs 
 start dma 
 Enables Risc Processor 
	cx_set(AUD_INT_DMA_CTL, 0x11);  audio downstream FIFO and
  BOARD Specific: Resets audio DMA
 stop dma 
 disable irqs 
  BOARD Specific: Handles audio IRQ
 risc op code error 
 risc1 downstream 
 FIXME: Any other status should deserve a special handling? 
				ALSA PCM Interface
  Digital hardware definition
	 Analog audio output will be full of clicks and pops if there
  audio pcm capture open callback
 must be multiple of 8 
  audio close callback
  hw_params callback
 Loop back to start of program 
 bits 63-32 
  hw free callback
  prepare callback
  trigger callback
 Local interrupts are already disabled by ALSA 
  pointer callback
  page callback (needed for mmap)
  operators
  create a PCM device
			Basic Flow for Sound Devices
  Alsa Constructor - Component probe
  ALSA destructor
 SPDX-License-Identifier: GPL-2.0-or-later
   Support for a cx23417 mpeg encoder via cx23885 host port.
     (c) 2004 Jelle Foks <jelle@foks.us>
     (c) 2004 Gerd Knorr <kraxel@bytesex.org>
     (c) 2008 Steven Toth <stoth@linuxtv.org>
       - CX2388578 support
   Includes parts from the ivtv driver <http:sourceforge.netprojectsivtv>
 ------------------------------------------------------------------ 
 stop at the end of gop, generate irq 
 stop immediately, no irq 
 NTSC: 30fps 
 PAL: 25fps 
 239 
 240 
 261 
 239 
 240 
 262 
 defines below are from ivtv-driver.h 
 Firmware API commands 
 Registers 
 IVTV_REG_OFFSET 
 Bit definitions for MC417_RWD and MC417_OEN registers  
  bits 31-16
+-----------+
| Reserved  |
+-----------+
  bit 15  bit 14  bit 13 bit 12  bit 11  bit 10  bit 9   bit 8
+-------+-------+-------+-------+-------+-------+-------+-------+
| MIWR# | MIRD# | MICS# |MIRDY# |MIADDR3|MIADDR2|MIADDR1|MIADDR0|
+-------+-------+-------+-------+-------+-------+-------+-------+
 bit 7   bit 6   bit 5   bit 4   bit 3   bit 2   bit 1   bit 0
+-------+-------+-------+-------+-------+-------+-------+-------+
|MIDATA7|MIDATA6|MIDATA5|MIDATA4|MIDATA3|MIDATA2|MIDATA1|MIDATA0|
+-------+-------+-------+-------+-------+-------+-------+-------+
 MIADDR nibble definitions 
 Read and write modes 
 Bit definitions for MC417_CTL register 
 bits 31-6   bits 5-4   bit 3    bits 2-1       Bit 0
+--------+-------------+--------+--------------+------------+
|Reserved|MC417_SPD_CTL|Reserved|MC417_GPIO_SEL|UART_GPIO_EN|
+--------+-------------+--------+--------------+------------+
 Values for speed control 
 b'1x, but we use b'11 
 Values for GPIO select 
 Configure MC417_CTL register to defaults. 
 Configure MC417_OEN to defaults. 
 Configure MC417_RWD to defaults. 
	 Enable MC417 GPIO outputs except for MC417_MIRDY,
	  which is an input.
 Write data byte 0 
 Transition CSWR to effect write transaction across bus. 
 Write data byte 1 
 Write data byte 2 
 Write data byte 3 
 Write address byte 0 
 Write address byte 1 
 Indicate that this is a write. 
 Wait for the trans to complete (MC417_MIRDY asserted). 
	 Enable MC417 GPIO outputs except for MC417_MIRDY,
	  which is an input.
 Write address byte 0 
 Write address byte 1 
 Indicate that this is a register read. 
 Wait for the trans to complete (MC417_MIRDY asserted). 
 switch the DAT0-7 GPIO[10:3] to input mode 
 Read data byte 0 
	 Transition RD to effect read transaction across bus.
	  Transition 0x5000 -> 0x9000 correct (RDRDY -> WRRDY)?
	  Should it be 0x9000 -> 0xF000 (also why is RDY being set, its
	  input only...)
 Collect byte 
 Bring CS and RD high. 
 Read data byte 1 
 Read data byte 2 
 Read data byte 3 
	 Enable MC417 GPIO outputs except for MC417_MIRDY,
	  which is an input.
 Write data byte 0 
 Transition CSWR to effect write transaction across bus. 
 Write data byte 1 
 Write data byte 2 
 Write data byte 3 
 Write address byte 2 
 Write address byte 1 
 Write address byte 0 
 Wait for the trans to complete (MC417_MIRDY asserted). 
	 Enable MC417 GPIO outputs except for MC417_MIRDY,
	  which is an input.
 Write address byte 2 
 Write address byte 1 
 Write address byte 0 
 Wait for the trans to complete (MC417_MIRDY asserted). 
 switch the DAT0-7 GPIO[10:3] to input mode 
 Read data byte 3 
 Transition RD to effect read transaction across bus. 
 Collect byte 
 Bring CS and RD high. 
 Read data byte 2 
 Read data byte 1 
 Read data byte 0 
 Set the gpio value 
 Clear the gpio value 
 Enable GPIO direction bits 
 ------------------------------------------------------------------ 
 MPEG encoder API 
	 this may not be 100% safe if we can't read any memory location
	 This read looks at 32 bits, but flag is only 8 bits.
	  Seems we also bail if CMD or TIMEOUT bytes are set???
 tell 'em we're working on it 
 write command + args + fill remaining with zeros 
 command code 
 timeout 
 tell 'em we're done writing 
 wait for firmware to handle the API command 
 read output values 
 We don't need to call the API often, so using just one
  mailbox will probably suffice
 Save GPIO settings before reset of APU 
 transfer to the chip 
 read back to verify with the checksum 
 FW power up disturbs the GPIOs, restore state 
 Hardcoded GPIO's here 
 Dynamically change the height based on video standard 
 assign frame size 
 ping 
 Setup to capture VBI 
 frames per interrupt 
 total bufs 
 start codes 
 stop codes 
 lines 
 BPL 
 initialize the video input 
 Enable VIP style pixel invalidation so we work with scaled mode 
 start capturing to the host interface 
 ------------------------------------------------------------------ 
 stop mpeg capture 
 ------------------------------------------------------------------ 
 Update the AV core 
 FIXME: Port1 hardcoded here 
 Set default TV standard 
 Allocate and initialize V4L video device 
	 ST: Configure the encoder parameters, but don't begin
	  encoding, this resolves an issue where the first time the
	  encoder is started video can be choppy.
 SPDX-License-Identifier: GPL-2.0-or-later
  Driver for Silicon Labs C8051F300 microcontroller.
  It is used for LNB power control in TeVii S470,
  TBS 6920 PCIe DVB-S2 cards.
  Microcontroller connected to cx23885 GPIO pins:
  GPIO0 - data		- P0.3 F300
  GPIO1 - reset	- P0.2 F300
  GPIO2 - clk		- P0.1 F300
  GPIO3 - busy		- P0.0 F300
  Copyright (C) 2009 Igor M. Liplianin <liplianin@me.by>
 msb first 
 msb first 
 get check sum 
 question: 
 begin to send data 
 the slave address is 0xe0, write 
 sent data over 
 answer: 
 timeout, the slave no response 
 the slave not busy, prepare for getting data 
ready...
 0xe1 is Read 
get the data length 
 get data to empty buffer 
 received data over 
 write port 
 A port, lnb power 
 power on 
 B port, HV 
13V v
 18V h
 power off 
 SPDX-License-Identifier: GPL-2.0-or-later
   Driver for the Conexant CX2388578 PCIe bridge
   CX23888 Integrated Consumer Infrared Controller
   Copyright (C) 2009  Andy Walls <awalls@md.metrocast.net>
  These CX23888 register offsets have a straightforward one to one mapping
  to the CX23885 register offsets of 0x200 through 0x218
 CX23888 specific control flag 
 This register doesn't follow the pattern; it's 0x23C on a CX23885 
 CX23888 unique registers 
 108 MHz, BT.656 
  We use this union internally for convenience, but callers to tx_write
  and rx_read will be expecting records of type struct ir_raw_event.
  Always ensure the size of this union is dictated by struct ir_raw_event.
  IR register block read and write functions
  Rx and Tx Clock Divider register computations
  Note the largest clock divider value of 0xffff corresponds to:
 	(0xffff + 1)  1000  1082 MHz = 1,213,629.629... ns
  which fits in 21 bits, so we'll use unsigned int for time arguments.
  Low Pass Filter register calculations
  Note the largest count value of 0xffff corresponds to:
 	0xffff  1000  1082 MHz = 1,213,611.11... ns
  which fits in 21 bits, so we'll use unsigned int for time arguments.
 Duration of the Low Pass Filter rejection window in ns 
 Duration of the Low Pass Filter rejection window in us 
  FIFO register pulse width count computations
	
	  Resolution is the duration of 1 tick of the readable portion of
	  of the pulse width counter as read from the FIFO.  The two lsb's are
	  not readable, hence the << 2.  This function returns ns.
	
	  The 2 lsb's of the pulse width timer count are not readable, hence
	  the (count << 2) | 0x3
 millicycles 
  MHz => ns 
	
	  The 2 lsb's of the pulse width timer count are not readable, hence
	  the (count << 2) | 0x3
 cycles      
  MHz => us 
  Pulse Clocks computations: Combined Pulse Width Count & Rx Clock Counts
  The total pulse clock count is an 18 bit pulse width timer count as the most
  significant part and (up to) 16 bit clock divider count as a modulus.
  When the Rx clock divider ticks down to 0, it increments the 18 bit pulse
  width timer count's least significant bit.
 millicycles  
 1000 = cycles 
 net result needs to be rounded down and decremented by 1 
  IR Control Register helpers
  IR Rx & Tx Clock Register helpers
  IR Tx Carrier Duty Cycle register helpers
 16ths of 100% 
  IR Filter Register helpers
  IR IRQ Enable Register helpers
  V4L2 Subdevice IR Ops
 Tx FIFO Service Request 
 Rx FIFO Service Request 
 Rx Pulse Width Timer Time Out 
 Rx FIFO Over Run 
 Tx FIFO Service Request IRQ Enable 
 Rx FIFO Service Request IRQ Enable 
 Rx Pulse Width Timer Time Out IRQ Enable 
 Rx FIFO Over Run IRQ Enable 
	
	  Transmitter interrupt service
		
		  TODO:
		  Check the watermark threshold setting
		  Pull FIFO_TX_DEPTH or FIFO_TX_DEPTH2 entries from tx_kfifo
		  Push the data to the hardware FIFO.
		  If there was nothing more to send in the tx_kfifo, disable
		 	the TSR IRQ and notify the v4l2_device.
		  If there was something in the tx_kfifo, check the tx_kfifo
		       level and notify the v4l2_device, if it is low.
 For now, inhibit TSR interrupt until Tx is implemented 
	
	  Receiver interrupt service
		
		  Receive data on RSR to clear the STATS_RSR.
		  Receive data on RTO, since we may not have yet hit the RSR
		  watermark when we receive the RTO.
 rx_kfifo over run 
		
		  The RX FIFO Enable (CNTRL_RFE) must be toggled to clear
		  the Rx FIFO Over Run status (STATS_ROR)
		
		  The IR Receiver Enable (CNTRL_RXE) must be toggled to clear
		  the Rx Pulse Width Timer Time Out (STATS_RTO)
 Clear STATS_ROR & STATS_RTO as needed by resetting hardware 
 Receiver 
 Assume RTO was because of no IR light input 
 Disable or slow down all IR Rx circuits and counters 
 Before we tweak the hardware, we have to disable the receiver 
 FIXME - make this dependent on resolution for better performance 
 reset tx_fifo too if there is one... 
 Transmitter 
 For now enable the Tx FIFO Service interrupt & pretend we did work 
 Disable or slow down all IR Tx circuits and counters 
 Before we tweak the hardware, we have to disable the transmitter 
 FIXME - make this dependent on resolution for better performance 
  V4L2 Subdevice Core Ops
 36 kHz - RC-5, RC-6, and RC-6A carrier 
 RC-5:    666,667 ns = 136 kHz  32 cycles  1 mark  0.75 
 RC-6A:   333,333 ns = 136 kHz  16 cycles  1 mark  0.75 
 ns 
 36 kHz - RC-5 carrier 
 25 %   - RC-5 carrier 
 FIXME - fix the formatting of dev->v4l2_dev.name and use it 
		
		  Ensure no interrupts arrive from '888 specific conditions,
		  since we ignore them in this driver to have commonality with
		  similar IR controller cores.
 Nothing more to free() as state held the actual v4l2_subdev object 
 SPDX-License-Identifier: GPL-2.0-or-later
   Driver for the Conexant CX23885 PCIe bridge
   Copyright (c) 2006 Steven Toth <stoth@linuxtv.org>
 ------------------------------------------------------------------ 
 ------------------------------------------------------------------ 
 undefined or fe0 
 band_caps 
	 P_agc_use_sd_mod1=0, P_agc_use_sd_mod2=0, P_agc_freq_pwm_div=0,
	  P_agc_inv_pwm1=0, P_agc_inv_pwm2=0,
	  P_agc_inh_dc_rv_est=0, P_agc_time_est=3, P_agc_freeze=0,
	  P_agc_nb_est=2, P_agc_write=0
 setup 
 inv_gain 
 time_stabiliz 
 alpha_level 
 thlock 
 wbd_inv 
 wbd_ref 
 wbd_sel 
 wbd_alpha 
 agc1_max 
 agc1_min 
 agc2_max 
 agc2_min 
 agc1_pt1 
 agc1_pt2 
 agc1_pt3 
 agc1_slope1 
 agc1_slope2 
 agc2_pt1 
 agc2_pt2 
 agc2_slope1 
 agc2_slope2 
 alpha_mant 
 alpha_exp 
 beta_mant 
 beta_exp 
 perform_agc_softsplit 
 PLL Configuration for COFDM BW_MHz = 8.000000
 internal 
 sampling 
 pll_cfg: prediv 
 pll_cfg: ratio 
 pll_cfg: range 
 pll_cfg: reset 
 pll_cfg: bypass 
 misc: refdiv 
 misc: bypclk_div 
 misc: IO_CLK_en_core 
 misc: ADClkSrc 
 misc: modulo 
 sad_cfg: refsel, sel, freq_15k 
 ifreq = 5.200000 MHz 
 timf 
 xtal_hz 
 terminate 
 dual 
 0-CLKI, 2-XTALI, else AUTO 
 23 PWM 
 0x60 
 0x63 
 1 Vpp 
 1 Vpp 
 +16 dB  - maximum gain 
 +16 dB  - maximum gain 
 30.4 MHz 
 5.38 MHz 
 Disabled 
 Disabled 
 24 or 25 
 Disabled 
 Disabled 
 24 or 25 
 call the frontend set_voltage function 
 call the frontend set_voltage function 
 MC417 
 write addr 
 data in 
 data out 
 chip select 0 
 readwrite 
 wait for a maximum of 1 msec 
 Select Digital TV 
 Call the real set_frontend 
 30.4 MHz 
 6.50 MHz 
 1.6 Vpp 
 in kHz 
 zero IF 
 in kHz 
 zero IF 
 40.444 MHz 
 Disabled 
 Disabled 
 24 or 25 
 D0-D7 out 
 start RW cycle 
 .flip_chip = 1, 
 DIB7070 generic 
	
	  P_agc_use_sd_mod1=0, P_agc_use_sd_mod2=0, P_agc_freq_pwm_div=5,
	  P_agc_inv_pwm1=0, P_agc_inv_pwm2=0, P_agc_inh_dc_rv_est=0,
	  P_agc_time_est=3, P_agc_freeze=0, P_agc_nb_est=5, P_agc_write=0
 refsel, sel, freq_15k 
 .output_mode = OUTMODE_MPEG2_FIFO, 
 .output_mode = OUTMODE_MPEG2_PAR_GATED_CLK, 
 DIB7000P_GPIO_DEFAULT_DIRECTIONS, 
 DIB7000P_GPIO_DEFAULT_VALUES, 
 magic number to identify
 for CI 
 for hw pid filter 
 24C02 i2c eeprom 
 Read entire EEPROM 
 24C02 i2c eeprom 
 Read entire EEPROM 
 24C02 i2c eeprom 
 attach CI 
 Read entire EEPROM 
 bus not shared by default 
 Get the first frontend 
 init struct vb2_dvb 
 multi-frontend gate control is undefined or defaults to fe0 
 Sets the gate control callback to be used by i2c command calls 
 init frontend 
				 This is true for all demods with
 cxusb_ctrl_msg(adap->dev, CMD_DIGITAL, NULL, 0, NULL, 0); 
 cxusb_bluebird_gpio_pulse(adap->dev, 0x02, 1); 
 PORT B 
 PORT C 
 port B 
 port C 
 port B 
 port C 
 MFE 
 not clear for me yet 
 ports B, C 
 MFE frontend 1 DVB-T 
 load xc5000 firmware 
 MFE frontend 2 
 DVB-C init 
 port b 
 port c 
 port b 
 attach demod + tuner combo 
 attach SEC 
 port c 
 attach frontend 
 attach demod + tuner combo 
 attach SEC 
 port b - satellite 
 attach frontend 
 attach tuner 
 delegate signal strength measurement to tuner 
			
			  for setting the voltage we need to set GPIOs on
			  the card.
 port c - terrestrialcable 
 attach frontend 
 attach tuner 
 attach frontend 
 attach tuner 
 attach frontend 
 attach tuner 
 delegate signal strength measurement to tuner 
 attach frontend 
 port b 
 port c 
 attach tuner 
 delegate signal strength measurement to tuner 
		
		  for setting the voltage we need to set GPIOs on
		  the card.
 port b 
 port c 
 attach frontend 
 attach tuner 
 port b - satellite 
 attach frontend 
 attach SEC 
 attach tuner 
 delegate signal strength measurement to tuner 
 port c - terrestrialcable 
 attach frontend 
 attach tuner 
 port b - Terrestrialcable 
 attach frontend 
 attach tuner 
 we only attach tuner for analog on the 888 version 
 port c - terrestrialcable 
 attach frontend 
 attach tuner 
 port b - Terrestrialcable 
 attach frontend 
 attach tuner 
 we only attach tuner for analog on the 888 version 
 port c - terrestrialcable 
 attach frontend 
 attach tuner 
 port c - Terrestrialcable 
 attach frontend 
 attach tuner 
 define general-purpose callback pointer 
 Ensure all frontends negotiate bus access 
 Put the tuner in standby to keep it quiet 
 register everything 
 remove I2C client for SEC 
 remove I2C client for tuner 
 remove I2C client for demodulator 
	 Here we need to allocate the correct number of frontends,
	  as reflected in the cards struct. The reality is that currently
	  no cx23885 boards support this - yet. But, if we don't modify this
	  code then the second frontend would never be allocated (later)
	  and fail with error before the attach in dvb_register().
	  Without these changes we risk an OOPS later. The changes here
	  are for safety, and should provide a good foundation for the
	  future addition of any multi-frontend cx23885 based boards.
 dvb stuff 
 We have to init the queue for each frontend on a port. 
 remove I2C client for CI 
 remove I2C client for SEC 
 remove I2C client for tuner 
 remove I2C client for demodulator 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2015 VanguardiaSur - www.vanguardiasur.com.ar
  Based on original driver by Krzysztof Ha?asa:
  Copyright (C) 2015 Industrial Research Institute for Automation
  and Measurements PIAP
  Notes
  -----
  1. Under stress-testing, it has been observed that the PCIe link
  goes down, without reason. Therefore, the driver takes special care
  to allow device hot-unplugging.
  2. TW686X devices are capable of setting a few different DMA modes,
  including: scatter-gather, field and frame modes. However,
  under stress testings it has been found that the machine can
  freeze completely if DMA registers are programmed while streaming
  is active.
  Therefore, driver implements a dma_mode called 'memcpy' which
  avoids cycling the DMA buffers, and insteads allocates extra DMA buffers
  and then copies into vmalloc'ed user buffers.
  In addition to this, when streaming is on, the driver tries to access
  hardware registers as infrequently as possible. This is done by using
  a timer to limit the rate at which DMA is reset on DMA channels error.
  This module parameter allows to control the DMA_TIMER_INTERVAL value.
  The DMA_TIMER_INTERVAL register controls the minimum DMA interrupt
  time span (iow, the maximum DMA interrupt rate) thus allowing for
  IRQ coalescing.
  The chip datasheet does not mention a time unit for this value, so
  users wanting fine-grain control over the interrupt rate should
  determine the desired value through testing.
 Must remove it from pending too 
 Stop DMA if no channels are enabled 
  The purpose of this awful hack is to avoid enabling the DMA
  channels "too fast" which makes some TW686x devices very
  angry and freeze the CPU (see note 1).
	
	  Save pending register status, the timer will
	  restore them.
 Disable the reset channels 
 cleared on read 
 INT_STATUS does not include FIFO_STATUS errors! 
 Mask of channels with signal and FIFO errors 
 Coalesce video frameerror events 
 Reset all subsystems 
 Disable the DMA engine 
 Enable DMA FIFO overflow and pointer check 
	
	  This must be set right before initializing v4l2_dev.
	  It's used to release resources after the last handle
	  held is released.
	 This guarantees the IRQ handler is no longer running,
	  which means we can kiss good-bye some resources.
	
	  Setting pci_dev to NULL allows to detect hardware is no longer
	  available and will be used by vb2_ops. This is required because
	  the device sometimes hot-unplugs itself as the result of a PCIe
	  link down.
	  The lock is really important here.
	
	  This calls tw686x_dev_release if it's the last reference.
	  Otherwise, release is postponed until there are no users left.
  On TW6864 and TW6868, all channels share the pair of video DMA SG tables,
  with 10-bit start_idx and end_idx determining start and end of frame buffer
  for particular channel.
  TW6868 with all its 8 channels would be problematic (only 127 SG entries per
  channel) but we support only 4 channels on this chip anyway (the first
  4 channels are driven with internal video decoder, the other 4 would require
  an external TW286x part).
  On TW6865 and TW6869, each channel has its own DMA SG table, with indexes
  starting with 0. Both chips have complete sets of internal video decoders
  (respectively 4 or 8-channel).
  All chips have separate SG tables for two video frames.
 driver_data is number of AV channels 
 not tested 
	
	  TW6868 supports 8 AV channels with an external TW2865 chip;
	  not supported by the driver.
 not tested 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2015 VanguardiaSur - www.vanguardiasur.com.ar
  Based on original driver by Krzysztof Ha?asa:
  Copyright (C) 2015 Industrial Research Institute for Automation
  and Measurements PIAP
 PAL 720x576 needs 203 4-KB pages 
  We can call this even when alloc_dma failed for the given channel
 Check device presence. Shouldn't really happen! 
 Clear the scatter-gather table 
		
		  TW6865TW6869: each channel needs a pair of
		  P-B descriptor tables.
		
		  TW6864TW6868: we need to allocate a pair of
		  P-B descriptor tables, common for all channels.
		  Each table will be bigger than 4 KB.
	
	  bit 31 enables selecting the field control register
	  bits 0-29 are a bitmask with fields that will be output.
	  For NTSC (and PAL-M, PAL-60), all 30 bits are used.
	  For other PAL standards, only the first 25 bits are used.
 output all fields 
 2 fps (60Hz), 2 fps (50Hz) 
 4 fps (60Hz), 4 fps (50Hz) 
 6 fps (60Hz), 6 fps (50Hz) 
 8 fps (60Hz), 8 fps (50Hz) 
 10 fps (60Hz), 8 fps (50Hz) 
 12 fps (60Hz), 10 fps (50Hz) 
 14 fps (60Hz), 12 fps (50Hz) 
 16 fps (60Hz), 14 fps (50Hz) 
 18 fps (60Hz), 16 fps (50Hz) 
 20 fps (60Hz), 16 fps (50Hz) 
 22 fps (60Hz), 18 fps (50Hz) 
 24 fps (60Hz), 20 fps (50Hz) 
 26 fps (60Hz), 22 fps (50Hz) 
 28 fps (60Hz), 24 fps (50Hz) 
 First guess 
 Minimal possible framerate is 2 frames per second 
 Check if the difference is bigger than abs(1) and adjust 
 Max framerate 
	
	  Let's request at least three buffers: two for the
	  DMA engine and one for userspace.
 Check device presence 
 Check device presence 
 Sanity check 
 Check device presence 
 We need new DMA buffers if the framesize has changed 
 Program the DMA scatter-gather 
 Program the DMA frame size 
	
	  Adjust format after V4L2_STD_525_60V4L2_STD_625_50 change,
	  calling g_fmt and s_fmt will sanitize the height
	  according to the standard.
	
	  Frame decimation depends on the chosen standard,
	  so reset it to the current value.
 Enable and start standard detection 
 Exit if still busy 
	
	  Not sure we are able to support on the fly input change
		
		  This can either be a blue frame (with signal-lost bit set)
		  or a good frame (with signal-lost bit clear). If we have just
		  got signal, then this channel needs resetting.
 Check FIFO errors only if there's signal 
 Mark this channel for reset 
 Mark this channel for reset 
 Initialize vc->dev and vc->ch for the error path 
 default settings 
 SPDX-License-Identifier: GPL-2.0-only
  Copyright (C) 2015 VanguardiaSur - www.vanguardiasur.com.ar
  Based on the audio support from the tw6869 driver:
  Copyright 2015 www.starterkit.ru <info@starterkit.ru>
  Based on:
  Driver for Intersil|Techwell TW6869 based DVR cards
  (c) 2011-12 liran <jli11@intersil.com> [Intersil|Techwell China]
 Sanity check 
		
		  Checking for a non-nil dma_desc[pb]->virt buffer is
		  the same as checking for memcpy DMA mode.
  Audio parameters are global and shared among all
  capture channels. The driver prevents changes to
  the parameters if any audio channel is capturing.
	
	  Given the audio parameters are global (i.e. shared across
	  DMA channels), we need to check new params are allowed.
	
	  In the memcpy DMA mode we allocate a coherent buffer
	  and use it for the DMA capture. Otherwise, DMA
	  acts on the ALSA buffers as received in pcm_prepare.
 Enable external audio 
 SPDX-License-Identifier: GPL-2.0-or-later
   ALSA PCM device for the
   ALSA interface to cx18 PCM capture streams
   Copyright (C) 2009  Andy Walls <awalls@md.metrocast.net>
   Copyright (C) 2009  Devin Heitmueller <dheitmueller@kernellabs.com>
   Portions of this work were sponsored by ONELAN Limited.
 just about the value in usbaudio.c 
 125442, 
 12544, 
 Instruct the cx18 to start sending packets 
 See if the stream is available 
 No, it's already in use 
 We're already streaming.  No additional action required 
 Not currently streaming, so start it up 
 Instruct the cx18 to stop sending packets 
 PCM device 0, the only one for this card 
 0 playback substreams 
 1 capture substream 
 SPDX-License-Identifier: GPL-2.0-or-later
   cx18 ADEC audio functions
   Derived from cx25840-audio.c
   Copyright (C) 2007  Hans Verkuil <hverkuil@xs4all.nl>
   Copyright (C) 2008  Andy Walls <awalls@md.metrocast.net>
	
	  The PLL parameters are based on the external crystal frequency that
	  would ideally be:
	 
	  NTSC Color subcarrier freq  8 =
	 	4.5 MHz286  4552  8 = 28.63636363... MHz
	 
	  The accidents of history and rationale that explain from where this
	  combination of magic numbers originate can be found in:
	 
	  [1] Abrahams, I. C., "Choice of Chrominance Subcarrier Frequency in
	  the NTSC Standards", Proceedings of the I-R-E, January 1954, pp 79-80
	 
	  [2] Abrahams, I. C., "The 'Frequency Interleaving' Principle in the
	  NTSC Standards", Proceedings of the I-R-E, January 1954, pp 81-83
	 
	  As Mike Bradley has rightly pointed out, it's not the exact crystal
	  frequency that matters, only that all parts of the driver and
	  firmware are using the same value (close to the ideal value).
	 
	  Since I have a strong suspicion that, if the firmware ever assumes a
	  crystal value at all, it will assume 28.636360 MHz, the crystal
	  freq used in calculations in this driver will be:
	 
	 	xtal_freq = 28.636360 MHz
	 
	  an error of less than 0.13 ppm which is way, way better than any off
	  the shelf crystal will have for accuracy anyway.
	 
	  Below I aim to run the PLLs' VCOs near 400 MHz to minimize error.
	 
	  Many thanks to Jeff Campbell and Mike Bradley for their extensive
	  investigation, experimentation, testing, and suggested solutions of
	  of audiovideo sync problems with SVideo and CVBS captures.
			
			  VID_PLL Integer = 0x0f, VID_PLL Post Divider = 0x04
			  AUX_PLL Integer = 0x0d, AUX PLL Post Divider = 0x20
 VID_PLL Fraction = 0x2be2fe 
 xtal  0xf.15f17f04 = 108 MHz: 432 MHz pre-postdiv
 AUX_PLL Fraction = 0x176740c 
 xtal  0xd.bb3a0600x20 = 32000  384: 393 MHz p-pd
 src346_ctl 
 0x1.f77f = (4  xtal82455)  32000 
 SA_MCLK_SEL=1, SA_MCLK_DIV=0x20 
 AUD_COUNT = 0x2fff = 8 samples  4  384 - 1 
			
			  EN_AV_LOCK = 0
			  VID_COUNT = 0x0d2ef8 = 107999.000  8 =
			   ((8 samples32,000)  (13,500,000  8)  4 - 1)  8
			
			  VID_PLL Integer = 0x0f, VID_PLL Post Divider = 0x04
			  AUX_PLL Integer = 0x0e, AUX PLL Post Divider = 0x18
 VID_PLL Fraction = 0x2be2fe 
 xtal  0xf.15f17f04 = 108 MHz: 432 MHz pre-postdiv
 AUX_PLL Fraction = 0x062a1f2 
 xtal  0xe.3150f900x18 = 44100  384: 406 MHz p-pd
 src346_ctl 
 0x1.6d59 = (4  xtal82455)  44100 
 SA_MCLK_SEL=1, SA_MCLK_DIV=0x18 
 AUD_COUNT = 0x92ff = 49 samples  2  384 - 1 
			
			  EN_AV_LOCK = 0
			  VID_COUNT = 0x1d4bf8 = 239999.000  8 =
			   ((49 samples44,100)  (13,500,000  8)  2 - 1)  8
			
			  VID_PLL Integer = 0x0f, VID_PLL Post Divider = 0x04
			  AUX_PLL Integer = 0x0e, AUX PLL Post Divider = 0x16
 VID_PLL Fraction = 0x2be2fe 
 xtal  0xf.15f17f04 = 108 MHz: 432 MHz pre-postdiv
 AUX_PLL Fraction = 0x05227ad 
 xtal  0xe.2913d680x16 = 48000  384: 406 MHz p-pd
 src346_ctl 
 0x1.4faa = (4  xtal82455)  48000 
 SA_MCLK_SEL=1, SA_MCLK_DIV=0x16 
 AUD_COUNT = 0x5fff = 4 samples  16  384 - 1 
			
			  EN_AV_LOCK = 0
			  VID_COUNT = 0x1193f8 = 143999.000  8 =
			   ((4 samples48,000)  (13,500,000  8)  16 - 1)  8
			
			  VID_PLL Integer = 0x0f, VID_PLL Post Divider = 0x04
			  AUX_PLL Integer = 0x0d, AUX PLL Post Divider = 0x30
 VID_PLL Fraction = 0x2be2fe 
 xtal  0xf.15f17f04 = 108 MHz: 432 MHz pre-postdiv
 AUX_PLL Fraction = 0x176740c 
 xtal  0xd.bb3a0600x30 = 32000  256: 393 MHz p-pd
 src1_ctl 
 0x1.0000 = 3200032000 
 src346_ctl 
 0x2.0000 = 2  (3200032000) 
 SA_MCLK_SEL=1, SA_MCLK_DIV=0x30 
 AUD_COUNT = 0x1fff = 8 samples  4  256 - 1 
			
			  EN_AV_LOCK = 0
			  VID_COUNT = 0x0d2ef8 = 107999.000  8 =
			   ((8 samples32,000)  (13,500,000  8)  4 - 1)  8
			
			  VID_PLL Integer = 0x0f, VID_PLL Post Divider = 0x04
			  AUX_PLL Integer = 0x0e, AUX PLL Post Divider = 0x24
 VID_PLL Fraction = 0x2be2fe 
 xtal  0xf.15f17f04 = 108 MHz: 432 MHz pre-postdiv
 AUX_PLL Fraction = 0x062a1f2 
 xtal  0xe.3150f900x24 = 44100  256: 406 MHz p-pd
 src1_ctl 
 0x1.60cd = 4410032000 
 src346_ctl 
 0x1.7385 = 2  (3200044100) 
 SA_MCLK_SEL=1, SA_MCLK_DIV=0x24 
 AUD_COUNT = 0x61ff = 49 samples  2  256 - 1 
			
			  EN_AV_LOCK = 0
			  VID_COUNT = 0x1d4bf8 = 239999.000  8 =
			   ((49 samples44,100)  (13,500,000  8)  2 - 1)  8
			
			  VID_PLL Integer = 0x0f, VID_PLL Post Divider = 0x04
			  AUX_PLL Integer = 0x0d, AUX PLL Post Divider = 0x20
 VID_PLL Fraction = 0x2be2fe 
 xtal  0xf.15f17f04 = 108 MHz: 432 MHz pre-postdiv
 AUX_PLL Fraction = 0x176740c 
 xtal  0xd.bb3a0600x20 = 48000  256: 393 MHz p-pd
 src1_ctl 
 0x1.8000 = 4800032000 
 src346_ctl 
 0x1.5555 = 2  (3200048000) 
 SA_MCLK_SEL=1, SA_MCLK_DIV=0x20 
 AUD_COUNT = 0x3fff = 4 samples  16  256 - 1 
			
			  EN_AV_LOCK = 0
			  VID_COUNT = 0x1193f8 = 143999.000  8 =
			   ((4 samples48,000)  (13,500,000  8)  16 - 1)  8
 stop microcontroller 
 assert soft reset 
 Mute everything to prevent the PFFT! 
 Set Path1 to Serial Audio Input 
		 The microcontroller should not be started for the
		  non-tuner inputs: autodetection is specific for
 Set Path1 to Analog Demod Main Channel 
 deassert soft reset 
		 When the microcontroller detects the
 First convert the volume to msp3400 values (0-127) 
	 now scale it up to cx18_av values
	  -114dB to -96dB maps to 0
 PATH1_VOLUME 
 PATH1_EQ_BASS_VOL 
 PATH1_EQ_TREBLE_VOL 
 PATH1_BAL_LEFT 
 PATH1_BAL_LEVEL 
 PATH1_BAL_LEFT 
 PATH1_BAL_LEVEL 
		 Must turn off microcontroller in order to mute sound.
		  Not sure if this is the best method, but it does work.
		  If the microcontroller is running, then it will undo any
 disable microcontroller 
 enable microcontroller 
 SRC1_MUTE_EN 
 SPDX-License-Identifier: GPL-2.0-or-later
   cx18 ioctl system call
   Derived from ivtv-ioctl.c
   Copyright (C) 2007  Hans Verkuil <hverkuil@xs4all.nl>
   Copyright (C) 2008  Andy Walls <awalls@md.metrocast.net>
 Check if VBI services are allowed on the (field, line) for the video std 
  For a (field, line, std) and inbound potential set of services for that line,
  return the first valid service of those passed in the incoming set for that
  line in priority order:
  CC, VPS, or WSS over TELETEXT for well known lines
  TELETEXT, before VPS, before CC, before WSS, for other lines
  Expand the service_set of fmt into valid service_lines for the std,
  and clear the passed in fmt->service_set
  Sanitize the service_lines in fmt per the video std, and return 1
  if any service_line is left as valid after santization
 Compute the service_set from the assumed valid service_lines of fmt 
 FIXME - slightly wrong for both 50 & 60 Hz 
 sane, V4L2 spec compliant, defaults 
	
	  Fetch the configured service_lines and total service_set from the
	  digitizerslicer.  Note, cx18_av_vbi() wipes the passed in
	  fmt->fmt.sliced under valid calling conditions
 YUV height must be a multiple of 32 
 If given a service set, expand it validly & clear passed in set 
 Sanitize the service_lines, and compute the new set if any valid 
	 HM12 YUV size is (Y=(h720) + UV=(h(7202)))
 First plane 
 Packed 
	
	  Changing the Encoder's Raw VBI parameters won't have any effect
	  if any analog capture is ongoing
	
	  Set the digitizer registers for raw active VBI.
	  Note cx18_av_vbi_wipes out a lot of the passed in fmt under valid
	  calling conditions
 Store our new v4l2 (non-)sliced VBI state 
	
	  Changing the Encoder's Raw VBI parameters won't have any effect
	  if any analog capture is ongoing
	
	  Set the service_lines requested in the digitizerslicer registers.
	  Note, cx18_av_vbi() wipes some "impossible" service lines in the
	  passed in fmt->fmt.sliced under valid calling conditions
 Store our current v4l2 sliced VBI settings 
 set it to defaults from our table 
 Set the audio input to whatever is appropriate for the input type. 
	 prevent others from messing with the streams until
		 Switching standard would turn off the radio or mess
		   with already running streams, prevent that by
 Tuner 
				
				  We can find all v4l2 supported vbi services
				  for the standard, on a valid line for the std
 Frame type lookup: 1=I, 2=P, 4=B 
	
	  Assumption here is that a buf holds an integral number of
	  struct cx18_enc_idx_entry objects and is properly aligned.
	  This is enforced by the module options on IDX buffer sizes.
 Swallow any partial entries at the end, if there are any 
		
		  For some reason we've exhausted the buffers, but the MDL
		  object still said some data was unread.
		  Fix that and bail out.
 Skip any empty buffers in the MDL 
 exit when MDL drained or request satisfied 
 Module options inhibited IDX stream 
 Compute the best case number of entries we can buffer 
 Fill out the header of the return structure 
 Pull IDX MDLs and buffers from q_full and populate the entries 
 No more IDX data right now 
 Extract the Index entry data from the MDL and buffers 
 We finished with data remaining, push the MDL back 
 We drained this MDL, schedule it to go to the firmware 
 Tell the work handler to send free IDX MDLs to the firmware 
 Start the hardware only if we're the video device 
 Establish a buffer timeout 
 Start the hardware only if we're the video device 
 SPDX-License-Identifier: GPL-2.0-or-later
   cx18 interrupt handling
   Copyright (C) 2007  Hans Verkuil <hverkuil@xs4all.nl>
   Copyright (C) 2008  Andy Walls <awalls@md.metrocast.net>
	
	  SW1 responses have to happen first.  The sending XPU times out the
	  incoming mailboxes on us rather rapidly.
	 To do: interrupt-based I2C handling
	if (hw2 & (HW2_I2C1_INT|HW2_I2C2_INT)) {
	}
 SPDX-License-Identifier: GPL-2.0-or-later
   cx18 driver PCI memory mapped IO access routines
   Copyright (C) 2007  Hans Verkuil <hverkuil@xs4all.nl>
   Copyright (C) 2008  Andy Walls <awalls@md.metrocast.net>
 Align writes on the CX23418's addresses 
 SPDX-License-Identifier: GPL-2.0-or-later
   cx18 System Control Block initialization
   Copyright (C) 2007  Hans Verkuil <hverkuil@xs4all.nl>
   Copyright (C) 2008  Andy Walls <awalls@md.metrocast.net>
 SPDX-License-Identifier: GPL-2.0-or-later
   ALSA interface to cx18 PCM capture streams
   Copyright (C) 2009  Andy Walls <awalls@md.metrocast.net>
   Copyright (C) 2009  Devin Heitmueller <dheitmueller@kernellabs.com>
   Portions of this work were sponsored by ONELAN Limited.
 FIXME - take any other stopping actions needed 
 sc->driver is used by alsa-lib's configurator: simple, unique 
 sc->shortname is a symlink in procasound: CX18-M -> cardN 
 sc->longname is read from procasoundcards 
 Numbrs steps from "Writing an ALSA Driver" by Takashi Iwai 
 (1) Check and increment the device index 
 This is a no-op for us.  We'll use the cx->instance 
 (2) Create a card instance 
 use first available id 
 xid from end of shortname
 (3) Create a main component 
 (4) Set the driver ID and name strings 
 FIXME - proc files 
 (7) Set the driver data and return 0 
 We do this out of normal order for PCI drivers to avoid races 
 (6) Register the card instance 
 FIXME - pointer checks & shutdown cxsc 
 suppress compiler warning 
 SPDX-License-Identifier: GPL-2.0-or-later
   cx18 ADEC audio functions
   Derived from cx25840-core.c
   Copyright (C) 2007  Hans Verkuil <hverkuil@xs4all.nl>
   Copyright (C) 2008  Andy Walls <awalls@md.metrocast.net>
	
	  The crystal freq used in calculations in this driver will be
	  28.636360 MHz.
	  Aim to run the PLLs' VCOs near 400 MHz to minimize errors.
	
	  VDCLK  Integer = 0x0f, Post Divider = 0x04
	  AIMCLK Integer = 0x0e, Post Divider = 0x16
 VDCLK Fraction = 0x2be2fe 
 xtal  0xf.15f17f04 = 108 MHz: 432 MHz before post divide 
 AIMCLK Fraction = 0x05227ad 
 xtal  0xe.2913d680x16 = 48000  384: 406 MHz pre post-div
 SA_MCLK_SEL=1, SA_MCLK_DIV=0x16 
 Stop 8051 code execution 
 initialize the PLL by toggling sleep bit 
 enable sleep mode - register appears to be read only... 
 disable sleep mode 
 initialize DLLs 
 disable FLD 
 enable FLD 
 disable FLD 
 enable FLD 
 set analog bias currents. Set Vreg to 1.20V. 
 enable TUNE_FIL_RST 
 disable TUNE_FIL_RST 
 enable 656 output 
 video output drive strength 
 reset video 
	
	  Disable Video Auto-config of the Analog Front End and Video PLL.
	 
	  Since we only use BT.656 pixel mode, which works for both 525 and 625
	  line systems, it's just easier for us to set registers
	  0x102 (CXADEC_CHIP_CTRL), 0x104-0x106 (CXADEC_AFE_CTRL),
	  0x108-0x109 (CXADEC_PLL_CTRL1), and 0x10c-0x10f (CXADEC_VID_PLL_FRAC)
	  ourselves, than to run around cleaning up after the auto-config.
	 
	  (Note: my CX23418 chip doesn't seem to let the ACFG_DIS bit
	  get set to 1, but OTOH, it doesn't seem to do AFE and VID PLL
	  autoconfig either.)
	 
	  As a default, also turn off Dual mode for ADC2 and set ADC2 to CH3.
 Setup the Video and and AuxAudio PLLs 
 set video to auto-detect 
 Clear bits 11-12 to enable slow locking mode.  Set autodetect mode 
 set the comb notch = 1 
 Enable wtw_en in CRUSH_CTRL (Set bit 22) 
 Enable maj_sel in CRUSH_CTRL (Set bit 20) 
 Set VGA_TRACK_RANGE to 0x20 
	
	  Initial VBI setup
	  VIP-1.1, 10 bit mode, enable Raw, disable sliced,
	  don't clamp raw samples when codes are in use, 1 byte user D-words,
	  IDID0 has line #, RP code V bit transition on VBLANK, data during
	  blanking intervals
	 Set the video input.
 EncSetSignalStd(dwDevNum, pEnc->dwSigStd); 
 EncSetVideoInput(dwDevNum, pEnc->VidIndSelection); 
	
	  Analog Front End (AFE)
	  Default to luma on ch1ADC1, chroma on ch2ADC2, SIF on ch3ADC2
	   bypass_ch[1-3]     use filter
	   droop_comp_ch[1-3] disable
	   clamp_en_ch[1-3]   disable
	   aud_in_sel         ADC2
	   luma_in_sel        ADC1
	   chroma_in_sel      ADC2
	   clamp_sel_ch[2-3]  midcode
	   clamp_sel_ch1      video decoder
	   vga_sel_ch3        audio decoder
	   vga_sel_ch[1-2]    video decoder
	   half_bw_ch[1-3]    disable
	   +12db_ch[1-3]      disable
	if(dwEnable && dw3DCombAvailable) { 
		CxDevWrReg(CXADEC_SRC_COMB_CFG, 0x7728021F); 
    } else { 
		CxDevWrReg(CXADEC_SRC_COMB_CFG, 0x6628021F); 
    } 
	
	  Enforce the legacy volume scale mapping limits to avoid
	  -ERANGE errors when initializing the volume control
 Bottom out at -96 dB, v4l2 vol range 0x2e00-0x2fff 
 Top out at + 8 dB, v4l2 vol range 0xfe00-0xffff 
 initialize on first use 
	
	  Video ADC crystal clock to pixel clock SRC decimation ratio
	  28.636360 MHz13.5 Mpps  256 = 0x21f.07b
 datasheet startup, step 8d 
	
	  Note: At the end of a field, there are 3 sets of half line duration
	  (double horizontal rate) pulses:
	 
	  5 (625) or 6 (525) half-lines to blank for the vertical retrace
	  5 (625) or 6 (525) vertical sync pulses of half line duration
	  5 (625) or 6 (525) half-lines of equalization pulses
		
		  The following relationships of half line counts should hold:
		  625 = vblank656 + vactive
		  10 = vblank656 - vblank = vsync pulses + equalization pulses
		 
		  vblank656: half lines after line 625mid-313 of blanked video
		  vblank:    half lines, after line 5317, of blanked video
		  vactive:   half lines of active video +
		 		5 half lines after the end of active video
		 
		  As far as I can tell:
		  vblank656 starts counting from the falling edge of the first
		 	vsync pulse (start of line 1 or mid-313)
		  vblank starts counting from the after the 5 vsync pulses and
		 	5 or 4 equalization pulses (start of line 6 or 318)
		 
		  For 625 line systems the driver will extract VBI information
		  from lines 6-23 and lines 318-335 (but the slicer can only
		  handle 17 lines, not the 18 in the vblank region).
		  In addition, we need vblank656 and vblank to be one whole
		  line longer, to cover line 24 and 336, so the SAVEAV RP
		  codes get generated such that the encoder can actually
		  extract line 23 & 335 (WSS).  We'll lose 1 line in each field
		  at the top of the screen.
		 
		  It appears the 5 half lines that happen after active
		  video must be included in vactive (579 instead of 574),
		  otherwise the colors get badly displayed in various regions
		  of the screen.  I guess the chroma comb filter gets confused
		  without them (at least when a PVR-350 is the PAL source).
 lines  1 -  24  &  313 - 336 
 lines  6 -  24  &  318 - 336 
 lines 24 - 313  &  337 - 626 
		
		  For a 13.5 Mpps clock and 15,625 Hz line rate, a line is
		  is 864 pixels = 720 active + 144 blanking.  ITU-R BT.601
		  specifies 12 luma clock periods or ~ 0.9  13.5 Mpps after
		  the end of active video to start a horizontal line, so that
		  leaves 132 pixels of hblank to ignore.
		
		  Burst gate delay (for 625 line systems)
		  Hsync leading edge to color burst rise = 5.6 us
		  Color burst width = 2.25 us
		  Gate width = 4 pixel clocks
		  (5.6 us + 2.252 us)  13.5 Mpps + 42 clocks = 92.79 clocks
 sc = 4433618.75  src_decimation28636360  2^13 
 sc = 3582056.25  src_decimation28636360  2^13 
 SECAM 
 (fr + fb)2 = (4406260 + 4250000)2 = 4328130 
 sc = 4328130  src_decimation28636360  2^13 
		
		  The following relationships of half line counts should hold:
		  525 = prevsync + vblank656 + vactive
		  12 = vblank656 - vblank = vsync pulses + equalization pulses
		 
		  prevsync:  6 half-lines before the vsync pulses
		  vblank656: half lines, after line 3mid-266, of blanked video
		  vblank:    half lines, after line 9272, of blanked video
		  vactive:   half lines of active video
		 
		  As far as I can tell:
		  vblank656 starts counting from the falling edge of the first
		 	vsync pulse (start of line 4 or mid-266)
		  vblank starts counting from the after the 6 vsync pulses and
		 	6 or 5 equalization pulses (start of line 10 or 272)
		 
		  For 525 line systems the driver will extract VBI information
		  from lines 10-21 and lines 273-284.
 lines  4 -  22  &  266 - 284 
 lines 10 -  22  &  272 - 284 
 lines 23 - 263  &  285 - 525 
		
		  For a 13.5 Mpps clock and 15,734.26 Hz line rate, a line is
		  is 858 pixels = 720 active + 138 blanking.  The Hsync leading
		  edge should happen 1.2 us  13.5 Mpps ~= 16 pixels after the
		  end of active video, leaving 122 pixels of hblank to ignore
		  before active video starts.
		
		  Burst gate delay (for 525 line systems)
		  Hsync leading edge to color burst rise = 5.3 us
		  Color burst width = 2.5 us
		  Gate width = 4 pixel clocks
		  (5.3 us + 2.52 us)  13.5 Mpps + 42 clocks = 90.425 clocks
 sc = 4433618.75  src_decimation28636360  2^13 
 The 97 needs to be verified against PAL-M timings 
 sc = 3575611.49  src_decimation28636360  2^13 
 sc = 3579545.45..  src_decimation28636360  2^13 
 DEBUG: Displays configured PLL frequency 
 Sets horizontal blanking delay and active lines 
 Sets burst gate delay 
 Sets vertical blanking delay and active duration 
 Sets src decimation rate 
 Sets Luma and UV Low pass filters 
 Enables comb filters 
 Sets SC Step
 Follow step 8c and 8d of section 3.16 in the cx18_av datasheet 
 Japan uses EIAJ audio standard 
 South Korea uses A2 audio standard 
 Others use the BTSC audio standard 
 Follow tuner change procedure for PAL 
 Select autodetect for SECAM 
 restart audio decoder microcontroller 
 do nothing, use serial audio input 
 Set up analog front end multiplexers 
 Set INPUT_MODE to Composite, S-Video, or Component 
 Set CH_SEL_ADC2 to 1 if input comes from CH3 
 No sig on CH3, set ADC2 to CH2 for input 
 Signal on CH3, set ADC2 to CH3 for input 
 Set DUAL_MODE_ADC2 to 1 if input comes from both CH2 and CH3 
 Set dual mode 
 Clear dual mode 
 Configure the analog front end 
 CHROMA_IN, AUD_IN: ADC2; LUMA_IN: ADC1 
 half_bw_ch[2-3] since in dual mode 
 CLAMP_SEL = Fixed to midcode clamp level 
 LUMA_IN_SEL: ADC2 
 CLAMP_SEL = Fixed to midcode clamp level 
 CHROMA_IN_SEL ADC1 
			
			  VGA_GAIN_SEL = Audio Decoder
			  CLAMP_SEL = Fixed to midcode clamp level
 AUD_IN_SEL ADC1 
 get rxsubchans and audmode 
		 mono      -> mono
		   stereo    -> mono
		 mono      -> mono
		   stereo    -> stereo
		 mono      -> mono
		   stereo    -> stereo
		 mono      -> mono
		   stereo    -> stereo
 zero is autodetect 
 First tests should be against specific std 
 Then, test against generic ones 
	 Follow step 9 of section 3.16 in the cx18_av datasheet.
	   Without this PAL may display a vertical ghosting effect.
 Set format to NTSC-M 
 Turn off LCOMB 
	
	  This adjustment reflects the excess of vactive, set in
	  cx18_av_std_setup(), above standard values:
	 
	  480 + 1 for 60 Hz systems
	  576 + 3 for 50 Hz systems
	
	  Invalid height and width scaling requests are:
	  1. width less than 116 of the source width
	  2. width greater than the source width
	  3. height less than 18 of the source height
	  4. height greater than the source height
 HSCALE=HSC 
 VSCALE=VSC 
 VS_INTRLACE=1 VFILT=filter 
 SPDX-License-Identifier: GPL-2.0-or-later
   cx18 file operation functions
   Derived from ivtv-fileops.c
   Copyright (C) 2007  Hans Verkuil <hverkuil@xs4all.nl>
   Copyright (C) 2008  Andy Walls <awalls@md.metrocast.net>
 This function tries to claim the stream for a specific file descriptor.
   If no one else is using this stream then the stream is claimed and
   associated VBI and IDX streams are also automatically claimed.
   Possible error returns: -EBUSY if someone else has claimed
 Nothing should ever try to directly claim the IDX stream 
 someone already claimed this stream 
 yes, this file descriptor did. So that's OK. 
			 VBI is handled already internally, now also assign
			   the file descriptor to this stream for external
 someone else is using this stream already 
	
	  CX18_ENC_STREAM_TYPE_MPG needs to claim:
	  CX18_ENC_STREAM_TYPE_VBI, if VBI insertion is on for sliced VBI, or
	  CX18_ENC_STREAM_TYPE_IDX, if VBI insertion is off for sliced VBI
	  (We don't yet fix up MPEG Index entries for our inserted packets).
	 
	  For all other streams we're done.
 mark that it is used internally 
 This function releases a previously claimed stream. It will take into
		
		  The IDX stream is only used internally, and can
		  only be indirectly unclaimed by unclaiming the MPG stream.
 this stream is still in use internally 
	
	  CX18_ENC_STREAM_TYPE_MPG needs to release the
	  CX18_ENC_STREAM_TYPE_VBI andor CX18_ENC_STREAM_TYPE_IDX streams.
	 
	  For all other streams we're done.
 Unclaim the associated MPEG Index stream 
 Unclaim the associated VBI stream 
			
			  The VBI stream is not still claimed by a file
			  descriptor, so completely unclaim it.
 Process pending program updates and VBI data 
 byteswap and process VBI data 
 do we have new data? 
 byteswap MPG data 
 byteswap and process VBI data 
 return if end of stream 
 return if file was opened with O_NONBLOCK 
 wait for more data to arrive 
		 New buffers might have become available before we were added
 return if a signal was received 
		
		  Try to find a good splice point in the PS, just before
		  an MPEG-2 Program Pack start code, and provide only
		  up to that point to the user, so it's easy to insert VBI data
		  the next time around.
		 
		  This will not work for an MPEG-2 TS and has only been
		  verified by analysis to work for an MPEG-2 PS.  Helen Buus
		  pointed out this works for the CX23416 MPEG-2 DVD compatible
		  stream, and research indicates both the MPEG 2 SVCD and DVD
		  stream types use an MPEG-2 PS container.
		
		  An MPEG-2 Program Stream (PS) is a series of
		  MPEG-2 Program Packs terminated by an
		  MPEG Program End Code after the last Program Pack.
		  A Program Pack may hold a PS System Header packet and any
		  number of Program Elementary Stream (PES) Packets
 Scan for a 0 to find a potential MPEG-2 start code 
			
			  Keep looking if not a
			  MPEG-2 Pack header start code:  0x00 0x00 0x01 0xba
			  or MPEG-2 video PES start code: 0x00 0x00 0x01 0xe0
 If expecting the primary video PES 
 Continue if it couldn't be a PES packet 
 Check if a PTS or PTS & DTS follow 
 PTS only 
 PTS only 
 PTS & DTS 
 DTS follows 
 Assume we found the video PES hdr 
 next want a Program Pack
 Skip this video PES hdr 
 We may have found a Program Pack start code 
 Get the count of stuffing bytes & verify them 
 all stuffing bytes must be 0xff 
 right number of stuffing bytes
 marker check 
 marker check 
 PES Pack or Sys Hdr 
 We declare we actually found a Program Pack
 expect vid PES 
		
		  For some reason we've exhausted the buffers, but the MDL
		  object still said some data was unread.
		  Fix that and bail out.
 Forced stopping point for VBI insertion 
 Reader request satisfied 
 MDL buffers drained 
 shouldn't happen 
	 Each VBI buffer is one frame, the v4l2 API says that for VBI the
	   frames should arrive one-by-one, so make sure we never output more
 if there is no data available... 
 if we got data, then return that regardless 
 EOS condition 
 set errno 
 you cannot read from these stream types. 
 Try to claim this stream. 
	 If capture is already in progress, then we also have to
 Start associated VBI or IDX stream capture if required 
		
		  The VBI and IDX streams should have been claimed
		  automatically, if for internal use, when the MPG stream was
		  claimed.  We only need to start these streams capturing.
 Tell the card to start capturing 
 We're done 
 Resume a possibly paused encoder 
	
	  The associated VBI and IDX streams for internal use are released
	  automatically when the MPG stream is released.  We only need to stop
	  the associated stream.
 Stop the IDX stream which is always for internal use 
 Stop the VBI stream, if only running for internal use 
 Also releases associated streams 
 Start a capture if there is none 
 add stream's waitq to the poll list 
 Start a capture if there is none 
	 Return all of the buffers in error state, so the vbivid inode
	  can return from blocking.
 'Unclaim' this stream 
 Stop capturing 
 Stop internal use associated VBI and IDX streams 
 Also used internally, don't stop capturing 
 Stop radio 
 Closing radio device, return to TV mode 
 Mark that the radio is no longer in use 
 Switch tuner to TV 
 Select correct audio input (i.e. TV tuner or Line in) 
 Undo video mute 
 Done! Unmute and continue. 
 'Unclaim' this stream 
 Allocate memory 
				 switching to radio while capture is
 Mark that the radio is being used. 
 We have the radio 
 Switch tuner to radio 
 Select the correct audio input (i.e. radio tuner) 
 Done! Unmute and continue. 
 SPDX-License-Identifier: GPL-2.0-or-later
   cx18 initstartstopexit stream functions
   Derived from ivtv-streams.c
   Copyright (C) 2007  Hans Verkuil <hverkuil@xs4all.nl>
   Copyright (C) 2008  Andy Walls <awalls@md.metrocast.net>
 offset from 0 to register ts v4l2 minors on 
 offset from 0 to register pcm v4l2 minors on 
 offset from 0 to register yuv v4l2 minors on 
 CX18_ENC_STREAM_TYPE_MPG 
 CX18_ENC_STREAM_TYPE_TS 
 CX18_ENC_STREAM_TYPE_YUV 
 CX18_ENC_STREAM_TYPE_VBI 
 CX18_ENC_STREAM_TYPE_PCM 
 CX18_ENC_STREAM_TYPE_IDX 
 CX18_ENC_STREAM_TYPE_RAD 
 check settings 
 alloc + fill struct (if changed) 
		 HM12 YUV size is (Y=(h720) + UV=(h(7202)))
		 HM12 YUV size is (Y=(h720) + UV=(h(7202)))
 VB_MIN_BUFSIZE is lcm(1440  480, 1440  576)
   1440 is a single line of 4:2:2 YUV at 720 luma samples wide
 initialize cx18_stream fields 
 Assume the previous pixel default 
	
	  These five fields are always initialized.
	  For analog capture related streams, if video_dev.v4l2_dev == NULL then the
	  stream is not in use.
	  For the TS stream, if dvb == NULL then the stream is not in use.
	  In those cases no other fields but these four can be used.
 Check whether the radio is supported 
 Check whether VBI is supported 
	 User explicitly selected 0 buffers for these streams, so don't
 Allocate the cx18_dvb struct only for the TS on cards with DTV 
 Don't need buffers for the TS, if there is no DVB 
 initialize the v4l2 video device structure 
 Initialize v4l2 variables and register v4l2 devices 
 Setup V4L2 Devices 
 Prepare device 
 Allocate Stream 
 One or more streams could not be initialized. Clean 'em all up. 
 device capabilities 
 card number + user defined offset + device offset 
 Register device. First try the desired minor, then any free one. 
 Register v4l2 devices 
 Register V4L2 devices 
 One or more streams could not be initialized. Clean 'em all up. 
 Unregister v4l2 devices 
 Teardown all streams 
 The TS has a cx18_dvb structure, not a video_device 
 No struct video_device, but can have buffers allocated 
 If the module params didn't inhibit IDX ... 
				
				  Before calling cx18_stream_free(),
				  check if the IDX stream was actually set up.
				  Needed, since the cx18_probe() error path
				  exits through here as well as normal clean up
 If struct video_device exists, can have buffers allocated 
 PALSECAM 
 setup VBI registers 
	
	  Send the CX18_CPU_SET_RAW_VBI_PARAM API command to setup Encoder Raw
	  VBI when the first analog capture channel starts, as once it starts
	  (e.g. MPEG), we can't effect any change in the Encoder Raw VBI setup
	  (i.e. for the VBI capture channels).  We also send it for each
	  analog capture channel anyway just to make sure we get the proper
	  behavior
		
		  For 52560 systems, according to the VIP 2 & BT.656 std:
		  The EAV RP code's Field bit toggles on line 4, a few lines
		  after the Vertcal Blank bit has already toggled.
		  Tell the encoder to capture 21-4+1=18 lines per field,
		  since we want lines 10 through 21.
		 
		  For 62550 systems, according to the VIP 2 & BT.656 std:
		  The EAV RP code's Field bit toggles on line 1, a few lines
		  after the Vertcal Blank bit has already toggled.
		  (We've actually set the digitizer so that the Field bit
		  toggles on line 2.) Tell the encoder to capture 23-2+1=22
		  lines per field, since we want lines 6 through 23.
 Lines per field 
 bytes per line 
	 Every X number of frames a VBI interrupt arrives
	
	  Set the SAVEAV RP codes to look for as startstop points
	  when in VIP-1.1 mode
		
		  Start codes for beginning of "active" line in vertical blank
		  0x20 (               VerticalBlank                )
		  0x60 (     EvenField VerticalBlank                )
		
		  End codes for end of "active" raw lines and regular lines
		  0x30 (               VerticalBlank HorizontalBlank)
		  0x70 (     EvenField VerticalBlank HorizontalBlank)
		  0x90 (Task                         HorizontalBlank)
		  0xd0 (Task EvenField               HorizontalBlank)
		
		  End codes for active video, we want data in the hblank region
		  0xb0 (Task         0 VerticalBlank HorizontalBlank)
		  0xf0 (Task EvenField VerticalBlank HorizontalBlank)
		 
		  Since the V bit is only allowed to toggle in the EAV RP code,
		  just before the first active region line, these two
		  are problematic:
		  0x90 (Task                         HorizontalBlank)
		  0xd0 (Task EvenField               HorizontalBlank)
		 
		  We have set the digitzer such that we don't have to worry
		  about these problem codes.
		
		  Start codes for beginning of active line in vertical blank
		  0xa0 (Task           VerticalBlank                )
		  0xe0 (Task EvenField VerticalBlank                )
 Return if the firmware is not running low on MDLs 
 Return if there are no MDLs to rotate back to the firmware 
	
	  Take the oldest IDX MDL still holding data, and discard its index
	  entries by scheduling the MDL to go back to the firmware
 Don't give it to the firmware, if we're not running a capture 
 The firmware has the max MDLs it can handle 
 Move from q_free to q_busy notifying the firmware, until the limit 
		
		  Height should be a multiple of 32 lines.
		  Set the MDL size to the exact size needed for one frame.
		  Use enough buffers per MDL to cover the MDL size
			
			  See comment in cx18_vbi_setup() below about the
			  extra lines we capture in sliced VBI mode due to
			  the lines on which EAV RP codes toggle.
		
		  Currently we set things up so that Sliced VBI from the
		  digitizer is handled as Raw VBI by the encoder
 Clear Streamoff flags in case left from last capture 
	
	  For everything but CAPTURE_CHANNEL_TYPE_TS, play it safe and
	  set up all the parameters, as it is not obvious which parameters the
	  firmware shares across capture channel types and which it does not.
	 
	  Some of the cx18_vapi() calls below apply to only certain capture
	  channel types.  We're hoping there's no harm in calling most of them
	  anyway, as long as the values are all consistent.  Setting some
	  shared parameters will have no effect once an analog capture channel
	  has started streaming.
		
		  Audio related reset according to
		  Documentationdriver-apimediadriverscx2341x-devel.rst
		
		  Number of lines for Field 1 & Field 2 according to
		  Documentationdriver-apimediadriverscx2341x-devel.rst
		  Field 1 is 312 for 625 line systems in BT.656
		  Field 2 is 313 for 625 line systems in BT.656
		
		  Select to receive I, P, and B frame index entries, if the
		  index stream is enabled.  Otherwise disable index entry
		  generation.
 Call out to the common CX2341x API setup for user controls 
		
		  When starting a capture and we're set for radio,
		  ensure the video is muted, despite the user control.
		 Enable the Video Format Converter for UYVY 4:2:2 support,
		  rather than the default HM12 Macroblovk 4:2:0 support.
 If in doubt, default to HM12 
 Init all the cpu_mdls for this stream 
 begin_capture 
 Ensure we're really not capturing before releasing MDLs 
 FIXME - CX18_F_S_STREAMOFF as well? 
 you're live! sit back and await interrupts :) 
	 This function assumes that you are allowed to stop the capture
 Clear capture and no-read bits 
 Tell the CX23418 it can't use our buffers anymore 
 find first available handle to be used for global settings 
 SPDX-License-Identifier: GPL-2.0-or-later
   cx18 gpio functions
   Derived from ivtv-gpio.c
   Copyright (C) 2007  Hans Verkuil <hverkuil@xs4all.nl>
   Copyright (C) 2008  Andy Walls <awalls@md.metrocast.net>
 GPIO stuffs 
 GPIO registers 
  HVR-1600 GPIO pins, courtesy of Hauppauge:
  gpio0: zilog ir process reset pin
  gpio1: zilog programming pin (you should never use this)
  gpio12: cx24227 reset pin
  gpio13: cs5345 reset pin
  File scope utility functions
	
	  Assuming that active_hi and active_lo are a subsets of the bits in
	  gpio_dir.  Also assumes that active_lo and active_hi don't overlap
	  in any bit position
 Assert 
 Deassert 
  GPIO Multiplexer - logical device
	
	  FIXME - work out the cx->activeaudio_input mess - this is
	  intended to handle the switch to radio mode and set the
	  audio routing, but we need to update the state in cx
		
		  FIXME - work out the cx->activeaudio_input mess - this is
		  intended to handle the switch from radio mode and set the
		  audio routing, but we need to update the state in cx
  GPIO Reset Controller - logical device
		
		  Assert timing for the Z8F0811 on HVR-1600 boards:
		  1. Assert RESET for min of 4 clock cycles at 18.432 MHz to
		     initiate
		  2. Reset then takes 66 WDT cycles at 10 kHz + 16 xtal clock
		     cycles (6,601,085 nanoseconds ~= 7 milliseconds)
		  3. DBG pin must be high before chip exits reset for normal
		     operation.  DBG is open drain and hopefully pulled high
		     since we don't normally drive it (GPIO 1?) for the
		     HVR-1600
		  4. Z8F0811 won't exit reset until RESET is deasserted
		  5. Zilog comes out of reset, loads reset vector address and
		     executes from there. Required recovery delay unknown.
  External entry points
 This symbol is exported for use by lirc_pvr150 for the IR-blaster 
 Xceive tuner reset function 
 SPDX-License-Identifier: GPL-2.0-or-later
   cx18 functions to query card hardware
   Derived from ivtv-cards.c
   Copyright (C) 2007  Hans Verkuil <hverkuil@xs4all.nl>
   Copyright (C) 2008  Andy Walls <awalls@md.metrocast.net>
 card configuration 
 usual i2c tuner addresses to probe 
  usual i2c tuner addresses to probe with additional demod address for
  an NXP TDA8295 at 0x42 (N.B. it can possibly be at 0x4b or 0x4c too).
 Please add new PCI IDs to: https:pci-ids.ucw.cz
   This keeps the PCI ID database up to date. Note that the entries
   must be added under vendor 0x4444 (Conexant) as subsystem IDs.
 Hauppauge HVR-1600 cards 
 Note: for Hauppauge cards the tveeprom information is used instead
 ESMT M13S128324A-5B memory 
 ESMT M13S128324A-5B memory 
 Samsung K4D263238G-VC33 memory 
 ------------------------------------------------------------------------- 
 Compro VideoMate H900: note that this card is analog only! 
 EtronTech EM6A9160TS-5G memory 
 ------------------------------------------------------------------------- 
 Yuan MPC718: not working at the moment! 
 XC3028 tuner 
 FIXME - the FM radio is just a guess and driver doesn't use SIF 
 Hynix HY5DU283222B DDR RAM 
 FIXME - these GPIO's are just guesses 
 ------------------------------------------------------------------------- 
 GoTView PCI 
 XC3028 tuner 
 FIXME - the FM radio is just a guess and driver doesn't use SIF 
 Hynix HY5DU283222B DDR RAM 
 ------------------------------------------------------------------------- 
 Conexant Raptor PALSECAM: note that this card is analog only! 
 MT 46V16M16 memory 
 LED D1  Tuner AF  
 LED D2  Line In 1 
 LED D3  Tuner AF  
 ------------------------------------------------------------------------- 
 Toshiba Qosmio laptop internal DVB-TAnalog Hybrid Tuner 
 ------------------------------------------------------------------------- 
 Leadtek WinFast PVR2100 
 PVR2100   
 XC2028 tuner 
 Pointer to proper DDR config values provided by Terry Wu 
 ------------------------------------------------------------------------- 
 Leadtek WinFast DVR3100 H 
 DVR3100 H 
 XC3028 tuner 
 Pointer to proper DDR config values provided by Terry Wu 
 ------------------------------------------------------------------------- 
 SPDX-License-Identifier: GPL-2.0-or-later
   cx18 I2C functions
   Derived from ivtv-i2c.c
   Copyright (C) 2007  Hans Verkuil <hverkuil@xs4all.nl>
   Copyright (C) 2008  Andy Walls <awalls@md.metrocast.net>
 This array should match the CX18_HW_ defines 
 CX18_HW_TUNER 
 CX18_HW_TVEEPROM 
 CX18_HW_CS5345 
 CX18_HW_DVB 
 CX18_HW_418_AV 
 CX18_HW_GPIO_MUX 
 CX18_HW_GPIO_RESET_CTRL 
 CX18_HW_Z8F0811_IR_HAUP 
 This array should match the CX18_HW_ defines 
 This might well become a card-specific array 
 CX18_HW_TUNER 
 CX18_HW_TVEEPROM 
 CX18_HW_CS5345 
 CX18_HW_DVB 
 CX18_HW_418_AV 
 CX18_HW_GPIO_MUX 
 CX18_HW_GPIO_RESET_CTRL 
 CX18_HW_Z8F0811_IR_HAUP 
 This array should match the CX18_HW_ defines 
 Our default information for ir-kbd-i2c.c to use 
 special tuner group handling 
 Is it not an I2C device or one we do not wish to register? 
 It's an I2C device other than an analog tuner or IR chip 
 Find the first member of the subdev group id in hw 
 template for i2c-bit-algo 
 set by i2c-algo-bit 
 filled from template 
 usecs. 10 usec is period for a 100 KHz clock 
 seconds 
 12 clock period in usec
 jiffies 
 init + register i2c adapter 
 Setup algorithm for adapter 
 Setup adapter 
 ResetUnreset I2C hardware block 
 Clock select 220MHz 
 Clock Enable 
 courtesy of Steven Toth <stoth@hauppauge.com> 
 Set to edge-triggered intrs. 
 Clear any stale intrs 
 Hw I2C1 Clock Freq ~100kHz 
 Hw I2C2 Clock Freq ~100kHz 
   Hauppauge HVR1600 should have:
   32 cx24227
   98 unknown
   a0 eeprom
   c2 tuner
   e? zilog ir
 SPDX-License-Identifier: GPL-2.0-or-later
   cx18 audio-related functions
   Derived from ivtv-audio.c
   Copyright (C) 2007  Hans Verkuil <hverkuil@xs4all.nl>
 Selects the audio input and output according to the current
 Determine which input to use 
 handle muxer chips 
 FIXME - this internal mux should be abstracted to a subdev 
 force a toggle of some AI1 MUX control bits 
 SPDX-License-Identifier: GPL-2.0-or-later
   cx18 ADEC firmware functions
   Copyright (C) 2007  Hans Verkuil <hverkuil@xs4all.nl>
   Copyright (C) 2008  Andy Walls <awalls@md.metrocast.net>
 Ensure we put the 8051 in reset and enable firmware upload mode 
 Read and auto increment until at address 0x0000 
 ignore top 2 bits of address 
	 The firmware load often has byte errors, so allow for several
 cx25843 
 Reset the Mako core, Register is alias of CXADEC_CHIP_CTRL 
 cx25843 
 Put the 8051 in reset and enable firmware upload 
				 Check if we can correct the byte by changing
				   the address.  We can only write the lower
 Output to the 416 
 Audio input control 1 set to Sony mode 
 Audio output input 2 is 0 for slave operation input 
 0xC4000914[5]: 0 = left sample on WS=0, 1 = left sample on WS=1 
	 0xC4000914[7]: 0 = Philips mode, 1 = Sony mode (1st SCK rising edge
 Audio output control 1 is set to Sony mode 
 Audio output control 2 is set to 1 for master mode 
 0xC4000918[5]: 0 = left sample on WS=0, 1 = left sample on WS=1 
	 0xC4000918[7]: 0 = Philips mode, 1 = Sony mode (1st SCK rising edge
	 0xC4000918[8]: 0 = slave operation, 1 = master (SCK_OUT and WS_OUT
	 set alt I2s master clock to 0x16 and enable alt divider i2s
 CxDevWrReg(CXADEC_STD_DET_CTL, 0x000000FF); 
 Set bit 0 in register 0x9CC to signify that this is MiniMe. 
	 Register 0x09CC is defined by the Merlin firmware, and doesn't
 If bit 11 is 1, clear bit 10 
 Toggle the AI1 MUX 
 Switch to I2S1 
 Switch back to the AV decoder core I2S output 
 Switch to the AV decoder core I2S output 
 Switch back to I2S1 or I2S2 
 Enable WW auto audio standard detection 
 Auto by default 
 Stereo by default 
 SPDX-License-Identifier: GPL-2.0-or-later
   cx18 buffer queues
   Derived from ivtv-queue.c
   Copyright (C) 2007  Hans Verkuil <hverkuil@xs4all.nl>
   Copyright (C) 2008  Andy Walls <awalls@md.metrocast.net>
 clear the mdl if it is not to be enqueued to the full queue 
 q_busy is restricted to a max buffer count imposed by firmware 
 LIFO 
 FIFO 
	
	  We don't have to acquire multiple q locks here, because we are
	  serialized by the single threaded work handler.
	  MDLs from the firmware will thus remain in order as
	  they are moved from q_busy to q_full or to the dvb ring buffer.
		
		  We should find what the firmware told us is done,
		  right at the front of the queue.  If we don't, we likely have
		  missed an mdl done message from the firmware.
		  Once we skip an mdl repeatedly, relative to the size of
		  q_busy, we have high confidence we've missed it.
 mdl must have fallen out of rotation 
 Sweep it up to put it back into rotation 
		
		  We pull the desired mdl off of the queue here.  Something
		  will have to put it back on a queue later.
	
	  We found the mdl for which we were looking.  Get it ready for
	  the caller to put on q_full or in the dvb ring buffer.
 0'ed readpos, m_flags & curr_buf when mdl went on q_busy 
 Put any mdls the firmware is ignoring back into normal rotation 
 Move all mdls of a queue, while flushing the mdl 
 It only makes sense to flush to q_free or q_idle 
  Note, s->buf_pool is not protected by a lock,
  the stream better not have anything going on when calling this
 Move all MDLS to q_idle 
 Reset MDL id's and move all buffers back to the stream's buf_pool 
 reset id to a "safe" value 
 all other mdl fields were cleared by cx18_queue_flush() 
  Note, s->buf_pool is not protected by a lock,
  the stream better not have anything going on when calling this
	
	  Attach buffers to MDLs, give the MDLs ids, and add MDLs to q_free
	  Excess MDLs are left on q_idle
	  Excess buffers are left in buf_pool andor on an MDL in q_idle
 update the firmware's MDL array with this buffer 
			
			  The encoder doesn't honor s->mdl_size.  So in the
			  case of a non-integral number of buffers to meet
			  mdl_size, we lie about the size of the last buffer
			  in the MDL to get the encoder to really only send
			  us mdl_size bytes per MDL transfer.
 Not enough buffers for this MDL; we won't use it 
 allocate stream buffers and MDLs 
 1 MDL per buffer to handle the worst & also default case 
 a somewhat safe value 
 move all buffers to buf_pool and all MDLs to q_idle 
 empty q_idle 
 empty buf_pool 
 SPDX-License-Identifier: GPL-2.0-or-later
   cx18 driver initialization and card probing
   Derived from ivtv-driver.c
   Copyright (C) 2007  Hans Verkuil <hverkuil@xs4all.nl>
   Copyright (C) 2008  Andy Walls <awalls@md.metrocast.net>
 If you have already X v4l cards, then set this to X. This way
   the device numbers stay matched. Example: you have a WinTV card
   without radio and a Compro H900 with. Normally this would give a
   video1 device together with a radio0 device for the Compro. By
 Callback for registering extensions 
 add your revision and whatnot here 
 Parameter declarations 
 Buffers 
 Make sure cx18-alsa module is loaded 
 Initialize cx18-alsa for this instance of the cx18 device 
 CONFIG_MODULES 
 Generic utility functions 
 Release ioremapped memory 
 Release io memory 
 Hauppauge card? get values from tveeprom 
	 Many thanks to Steven Toth from Hauppauge for providing the
	 Note: the Samsung memory models cannot be reliably determined
	   from the model number. Use the cardtype module option if you
 Retail models 
 OEM models 
 Digital side is s5h1411tda18271 
 Retail models 
 OEM models 
 Digital side is s5h1409mxl5005s 
 user specified tuner standard 
 autodetect tuner standard 
 no match found 
 control only 
 control, no data 
 control no data 
 Ensure stream_buffers & stream_buf_size are valid 
 User said 0 buffers 
 User said 0 MB total 
 User said buf size 0 
		
		  YUV is a special case where the stream_buf_size needs to be
		  an integral multiple of 33.75 kB (storage for 32 screens
		  lines to maintain alignment in case of lost buffers).
		 
		  IDX is a special case where the stream_buf_size should be
		  an integral multiple of 1.5 kB (storage for 64 index entries
		  to maintain alignment in case of lost buffers).
		 
		
		  YUV and IDX are special cases where the stream_buf_size is
		  now in bytes.
		  VBI is a special case where the stream_buf_size is fixed
		  and already in bytes
 N.B. This might round down to 0 
 All other streams have stream_buf_size in kB here 
 N.B. This might round down to 0 
 convert from kB to bytes 
 Precondition: the cx18 structure has been memset to 0. Only
   the dev and instance fields have been filled in.
   No assumptions on the card type may be made here (see cx18_init_struct2
   for that).
 start counting open_id at 1 
 Initial settings 
 VBI 
 IVTV style VBI insertion into MPEG streams 
 Second initialization part. Here the card type has been
 Find tuner input 
 Enable bus mastering and memory mapped IO for the CX23418 
 These subordinate devices do not use probing 
 The AV decoder gets probed earlier to set PLLs 
 Just note that the card uses it (i.e. has analog) 
			
			  The Reset Controller gets probed and added to
			  hw_flags earlier for i2c adapterbus initialization
 FIXME - module parameter arrays constrain max instances 
 PCI Device Setup 
 map io memory 
 Initialize integrated AV decoder early to set PLLs, just in case 
 Initialize GPIO Reset Controller to do chip resets during i2c init 
 active i2c  
		 Based on the model number the cardtype may be changed.
 Changed the cardtype; re-reset the I2C chips 
 Register IRQ 
 if no tuner was found, then pick the first tuner in the card list 
	 The card is now fully identified, continue with card-specific
 matches TV tuners 
	 The tuner is fixed to the standard. The other inputs (e.g. S-Video)
 Load cx18 submodules (cx18-alsa) 
 load firmware 
	
	  Init the firmware twice to work around a silicon bug
	  with the digital TS.
	 
	  The second firmware load requires us to normalize the APU state,
	  or the audio for the first analog capture will be badly incorrect.
	 
	  I can't seem to call APU_RESETAI and have it succeed without the
	  APU capturing audio, so we start and stop it here to do the reset
 MPEG Encoding, 224 kbps, MPEG Layer II, 48 ksps 
 load firmware 
	
	  The second firmware load requires us to normalize the APU state,
	  or the audio for the first analog capture will be badly incorrect.
	 
	  I can't seem to call APU_RESETAI and have it succeed without the
	  APU capturing audio, so we start and stop it here to do the reset
 MPEG Encoding, 224 kbps, MPEG Layer II, 48 ksps 
 Init the AV decoder, if it hasn't been already 
 the tuner 'baseline' frequency 
	 Set initial frequency. For PALSECAM broadcasts no
 ch. 1 91250161000 
 ch. 4 67250161000 
 Force update of input 
	 Let the VIDIOC_S_STD ioctl do all the work, keeps the code
 Force full standard initialization 
 Stop all captures 
 Stop interrupts that cause incoming work to be queued 
 Incoming work can cause outgoing work, so clean up incoming first 
 Stop ack interrupts that may have been needed for work to finish 
 define a pci_driver for card detection 
 Validate parameters 
 SPDX-License-Identifier: GPL-2.0-or-later
   cx18 ADEC VBI functions
   Derived from cx25840-vbi.c
   Copyright (C) 2007  Hans Verkuil <hverkuil@xs4all.nl>
  For sliced VBI output, we set up to use VIP-1.1, 8-bit mode,
  NN counts 1 byte Dwords, an IDID with the VBI line # in it.
  Thus, according to the VIP-2 Spec, our VBI ancillary data lines
  (should!) look like:
 	4 byte EAV code:          0xff 0x00 0x00 0xRP
 	unknown number of possible idle bytes
 	3 byte Anc data preamble: 0x00 0xff 0xff
 	1 byte data identifier:   ne010iii (parity bits, 010, DID bits)
 	1 byte secondary data id: nessssss (parity bits, SDID bits)
 	1 byte data word count:   necccccc (parity bits, NN Dword count)
 	2 byte Internal DID:	  VBI-line-# 0x80
 	NN data bytes
 	1 byte checksum
 	Fill bytes needed to fil out to 4NN bytes of payload
  The RP codes for EAVs when in VIP-1.1 mode, not in raw mode, &
  in the vertical blanking interval are:
 	0xb0 (Task         0 VerticalBlank HorizontalBlank 0 0 0 0)
 	0xf0 (Task EvenField VerticalBlank HorizontalBlank 0 0 0 0)
  Since the V bit is only allowed to toggle in the EAV RP code, just
  before the first active region line and for active lines, they are:
 	0x90 (Task         0 0 HorizontalBlank 0 0 0 0)
 	0xd0 (Task EvenField 0 HorizontalBlank 0 0 0 0)
  The user application DID bytes we care about are:
 	0x91 (1 0 010        0 !ActiveLine AncDataPresent)
 	0x55 (0 1 010 2ndField !ActiveLine AncDataPresent)
 u8 eav[4]; 
 u8 idle[]; Variable number of idle bytes 
 data_count of payload 
 u8 checksum; 
 u8 fill[]; Variable number of fill bytes 
 1 
 4 
 6 
 9 
 we're done if raw VBI is active 
 Setup standard 
 VBI Offset 
 Setup standard 
 Sliced VBI 
 Ancillary data 
 Force impossible lines to 0 
 Build register values for requested service lines 
 Should match vblank set in cx18_av_std_setup() 
	
	  Check for the ancillary data header for sliced VBI
 Decode the SDID set by the slicer 
 SPDX-License-Identifier: GPL-2.0-or-later
   cx18 Vertical Blank Interval support functions
   Derived from ivtv-vbi.c
   Copyright (C) 2007  Hans Verkuil <hverkuil@xs4all.nl>
  Raster ReferenceProtection (RP) bytes, used in StartEnd Active
  Video codes emitted from the digitzer in VIP 1.x mode, that flag the start
  of VBI sample or VBI ancillary data regions in the digital ratser line.
  Task FieldEven VerticalBlank HorizontalBlank 0 0 0 0
 __V_, _FV_ 
 T_VH, TFVH 
 MPEG-2 Program Pack 
 Prog Pack start code 
 SCR, SCR Ext, markers 
 Mux Rate, markers 
 Res, Suff cnt, Stuff 
 MPEG-2 Private Stream 1 PES Packet 
 Priv Stream 1 start 
 length 
 flags, hdr data len 
 PTS, markers 
 stuffing 
 start of vbi data 
		 All lines are used, so there is no space for the linemask
		   (the max size of the VBI data is 36  43 + 4 bytes).
 Compress raw VBI format, removes leading SAV codes and surplus space
 FIXME - this function ignores the input size. 
 Skip the header 
 Look for SAV code 
 last line is hdr_size bytes short - extrapolate it 
 find the first valid line 
	
	  The last line is short by hdr_size bytes, but for the remaining
	  checks against size, we pretend that it is not, by counting the
	  header bytes we knowingly skipped
 Look for EAV code  
	
	  The CX23418 provides a 12 byte header in its raw VBI buffers to us:
	  0x3fffffff [4 bytes of something] [4 byte presentation time stamp]
	
	  The CX23418 sends us data that is 32 bit little-endian swapped,
	  but we want the raw VBI bytes in the order they were in the raster
	  line.  This has a side effect of making the header big endian
 Raw VBI data 
		
		  Hack needed for compatibility with old VBI software.
		  Write the frame # at the last 4 bytes of the frame
 Sliced VBI data with data insertion 
 always return at least one empty line 
	
	  Big assumption here:
	  Every buffer hooked to the MDL's buf_list is a complete VBI frame
	  that ends at the end of the buffer.
	 
	  To assume anything else would make the code in this file
	  more complex, or require extra memcpy()'s to make the
	  buffers satisfy the above assumption.  It's just simpler to set
	  up the encoder buffer transfers to make the assumption true.
 SPDX-License-Identifier: GPL-2.0-or-later
   cx18 firmware functions
   Copyright (C) 2007  Hans Verkuil <hverkuil@xs4all.nl>
   Copyright (C) 2008  Andy Walls <awalls@md.metrocast.net>
 "mgeS" 
 "rdeH" 
 no need for endianness conversion on the ppc 
 no need for endianness conversion on the ppc 
 power-down Spare and AOM PLLs 
 power-up fast, slow and mpeg PLLs 
 ADEC out of sleep 
	
	  The PLL parameters are based on the external crystal frequency that
	  would ideally be:
	 
	  NTSC Color subcarrier freq  8 =
	 	4.5 MHz286  4552  8 = 28.63636363... MHz
	 
	  The accidents of history and rationale that explain from where this
	  combination of magic numbers originate can be found in:
	 
	  [1] Abrahams, I. C., "Choice of Chrominance Subcarrier Frequency in
	  the NTSC Standards", Proceedings of the I-R-E, January 1954, pp 79-80
	 
	  [2] Abrahams, I. C., "The 'Frequency Interleaving' Principle in the
	  NTSC Standards", Proceedings of the I-R-E, January 1954, pp 81-83
	 
	  As Mike Bradley has rightly pointed out, it's not the exact crystal
	  frequency that matters, only that all parts of the driver and
	  firmware are using the same value (close to the ideal value).
	 
	  Since I have a strong suspicion that, if the firmware ever assumes a
	  crystal value at all, it will assume 28.636360 MHz, the crystal
	  freq used in calculations in this driver will be:
	 
	 	xtal_freq = 28.636360 MHz
	 
	  an error of less than 0.13 ppm which is way, way better than any off
	  the shelf crystal will have for accuracy anyway.
	 
	  Below I aim to run the PLLs' VCOs near 400 MHz to minimize errors.
	 
	  Many thanks to Jeff Campbell and Mike Bradley for their extensive
	  investigation, experimentation, testing, and suggested solutions of
	  of audiovideo sync problems with SVideo and CVBS captures.
 the fast clock is at 200245 MHz 
 1  xtal_freq  0x0d.f7df9b8  2 = 200 MHz: 400 MHz pre post-divide
 1  xtal_freq  0x11.1c71eb8  2 = 245 MHz: 490 MHz pre post-divide
 set slow clock to 125120 MHz 
 xtal_freq  0x0d.1861a20  3 = 125 MHz: 375 MHz before post-divide 
 xtal_freq  0x0c.92493f8  3 = 120 MHz: 360 MHz before post-divide 
 mpeg clock pll 54MHz 
 xtal_freq  0xf.15f17f0  8 = 54 MHz: 432 MHz before post-divide 
 Defaults 
 APU = SC or SC2 = 12562.5 
 EPU = SC = 125 
 DDR = FC = 180 
 ENC = SC = 125 
 AI1 = SC = 125 
 VIM2 = disabled 
 PCI = FC2 = 90 
 AI2 = disabled 
 DEMUX = disabled 
 AO = SC2 = 62.5 
 SER = 54MHz 
 VFC = disabled 
 USB = disabled 
 This doesn't explicitly set every clock select 
 Initialize DQS pad time 
 use power-down mode when idle 
 AO 
 AI2 
 VIM1 
 AI1 
 3D comb 
 ME 
 ENC 
 PK 
 RC 
 AVO 
 Allow chip to control CLKRUN 
 Stop the firmware 
 If the CPU is still running 
 The SCB & IPC area must be correct before starting the firmwares 
 Start the CPU. The CPU will take care of the APU for us. 
 Wait up to 500 ms for the APU to come out of reset 
	
	  The CPU had once before set up to receive an interrupt for it's
	  outgoing IRQ_CPU_TO_EPU_ACK to us.  If it ever does this, we get an
	  interrupt when it sends us an ack, but by the time we process it,
	  that flag in the SW2 status register has been cleared by the CPU
	  firmware.  We'll prevent that not so useful condition from happening
	  by clearing the CPU's interrupt enables for Ack IRQ's we want to
	  process.
 Try a benign command to see if the CPU is alive and well 
 initialize GPIO 
 SPDX-License-Identifier: GPL-2.0-or-later
   cx18 video interface functions
   Copyright (C) 2007  Hans Verkuil <hverkuil@xs4all.nl>
 SPDX-License-Identifier: GPL-2.0-or-later
   cx18 mailbox functions
   Copyright (C) 2007  Hans Verkuil <hverkuil@xs4all.nl>
   Copyright (C) 2008  Andy Walls <awalls@md.metrocast.net>
 FIXME make configurable 
 Short timeout 
 Additional 300ms timeout 
 Flags, see above 
 Processing unit 
 The name of the command 
 MPEG encoder API 
 Call with buf of n11+1 bytes 
 kernel snprintf() appends '\0' always 
  Functions that run in a work_queue work handling context
 We ignore mdl and buf readpos accounting here - it doesn't matter 
 The likely case 
 Acquire a videobuf buffer, clone to and and release it 
 If we've filled the buffer as per the callers res then dispatch it 
 We ignore mdl and buf readpos accounting here - it doesn't matter 
 The likely case 
		
		  Simple integrity check for processing a stale (and possibly
		  inconsistent mailbox): make sure the MDL id is in the
		  valid range for the stream.
		 
		  We go through the trouble of dealing with stale mailboxes
		  because most of the time, the mailbox data is still valid and
		  unchanged (and in practice the firmware ping-pongs the
		  two mdl_ack buffers so mdl_acks are not stale).
		 
		  There are occasions when we get a half changed mailbox,
		  which this check catches for a handle & id mismatch.  If the
		  handle and id do correspond, the worst case is that we
		  completely lost the old MDL, but pick up the new MDL
		  early (but the new mdl_ack is guaranteed to be good in this
		  case as the firmware wouldn't point us to a new mdl_ack until
		  it's filled in).
		 
		  cx18_queue_get_mdl() will detect the lost MDLs
		  and send them back to q_free for fw rotation eventually.
 Pass the data to cx18-alsa 
 Put as many MDLs as possible back into fw use 
  Functions that run in an interrupt handling context
 Don't ack if the RPU has gotten impatient and timed us out 
		
		  We only need "pending" atomic to inspect its contents,
		  and need not do a check and set because:
		  1. Any work handler thread only clears "pending" and only
		  on one, particular work order at a time, per handler thread.
		  2. "pending" is only set here, and we're serialized because
		  we're called in an IRQ handler context.
 mb->cmd and mb->args[0] through mb->args[2] 
 mb->request and mb->ack.  N.B. we want to read mb->ack last 
	
	  Individual EPU command processing is responsible for ack-ing
	  a non-stale mailbox as soon as possible
  Functions called from a non-interrupt, non work_queue context
 only call u32arr2hex if needed 
	
	  Wait for an in-use mailbox to complete
	 
	  If the XPU is responding with Ack's, the mailbox shouldn't be in
	  a busy state, since we serialize access to it on our end.
	 
	  If the wait for ack after sending a previous command was interrupted
	  by a signal, we may get here and find a busy mailbox.  After waiting,
	  mark it "not busy" from our end, if the XPU hasn't ack'ed it still.
 waited long enough, make the mbox "not busy" from our end 
 Build the outgoing mailbox 
 ensure ack & req are distinct 
	
	  Notify the XPU and wait for it to send an Ack back
 So we don't miss the wakeup, prepare to wait before notifying fw 
 Timed out 
 Collect data returned by the XPU 
	
	  Wait for XPU to perform extra actions for the caller in some cases.
	  e.g. CX18_CPU_DE_RELEASE_MDL will cause the CPU to send all MDLs
	  back in a burst shortly thereafter
 SPDX-License-Identifier: GPL-2.0-or-later
   cx18 ioctl control functions
   Derived from ivtv-controls.c
   Copyright (C) 2007  Hans Verkuil <hverkuil@xs4all.nl>
 Only IVTV fmt VBI insertion & only MPEG-2 PS type streams 
 Allocate sliced VBI buffers if needed. 
	
	  If our current settings have no lines set for capture, store a valid,
	  default set of service lines to capture, in our current settings.
 fix videodecoder resolution 
	 The audio clock of the digitizer must match the codec sample
 SPDX-License-Identifier: GPL-2.0-or-later
   cx18 functions for DVB support
   Copyright (c) 2008 Steven Toth <stoth@linuxtv.org>
   Copyright (C) 2008  Andy Walls <awalls@md.metrocast.net>
  CX18_CARD_HVR_1600_ESMT
  CX18_CARD_HVR_1600_SAMSUNG
  CX18_CARD_HVR_1600_S5H1411
  CX18_CARD_LEADTEK_DVR3100H
 Informationconfirmation of proper config values provided by Terry Wu 
 Datasheet suggested straps 
 4.560 MHz IF from the XC3028 
 Not a serial TS 
 XC3028 is not behind the gate 
 Disable the I2C gate 
  CX18_CARD_YUAN_MPC718
  Due to
  1. an absence of information on how to program the MT352
  2. the Linux mt352 module pushing MT352 initialization off onto us here
  We have to use an init sequence that you must extract from the Windows
  driver (yuanrap.sys) and which we load as a firmware.
  If someone can provide me with a Zarlink MT352 (Intel CE6352?) Design Manual
  with chip programming details, then I can remove this annoyance.
 Loop through all the register-value pairs in the firmware file 
 Intercept a few registers we want to set ourselves 
 Set our custom OFDM bandwidth in the case below 
 6 MHz: 647  68  20.48  2^16 = 0x55b6.db6 
 7 MHz: 647  78  20.48  2^16 = 0x6400 
 8 MHz: 647  88  20.48  2^16 = 0x7249.249 
 Set our custom IF in the case below 
 4.56 MHz IF: (20.48 - 4.56)20.48  2^14 = 0x31c0 
 Pass through the register-value pair from the fw 
 Go 
 20.480 MHz 
  4.560 MHz 
 XC3028 is not behind the gate 
 Datasheet suggested straps 
 4.560 MHz IF from the XC3028 
 Not a serial TS 
 XC3028 is not behind the gate 
 Disable the I2C gate 
 Datasheet suggested straps 
 4.560 MHz IF from the XC3028 
 Not a serial TS 
 XC3028 is not behind the gate 
 Disable the I2C gate 
 Kernel DVB framework calls this when the feed needs to start.
  The CX18 framework should enable the transport DMA handling
  and queue processing.
 Serial Mode 
 Data Length - Byte 
 Error - Polarity 
 Error - Passthru 
 Error - Ignore 
		 Assumption - Parallel transport - Signalling
		  undefined or default.
 Kernel DVB framework calls this when the feed needs to stop. 
 All the DVB attach calls go here, this function gets modified
  for each new card. cx18_dvb_start_feed() will also need changes.
		
		  TODO
		  Apparently, these cards also could instead have a
		  DiBcom demod supported by one of the db7000 drivers
 No Digital Tv Support 
	
	  The firmware seems to enable the TS DMUX clock
	  under various circumstances.  However, since we know we
	  might use it, let's just turn it on ourselves here.
 SPDX-License-Identifier: GPL-2.0
 Author: Dan Scally <djrscally@gmail.com> 
  Extend this array with ACPI Hardware IDs of devices known to be working
  plus the number of link-frequencies expected by their drivers, along with
  the frequency values in hertz. This is somewhat opportunistic way of adding
  support for this for now in the hopes of a better source for the information
  (possibly some encoded value in the SSDB buffer that we're unaware of)
  becoming apparent in the future.
  Do not add an entry for a sensor that is not actually supported.
 Omnivision OV5693 
 Omnivision OV2680 
 Always port 0 
 And endpoint 0 
	
	  Map the lane arrangement, which is fixed for the IPU3 (meaning we
	  only need one, rather than one per sensor). We include it as a
	  member of the struct cio2_bridge rather than a global variable so
	  that it survives if the module is unloaded along with the rest of
	  the struct.
 SPDX-License-Identifier: GPL-2.0
  Copyright (C) 2017,2020 Intel Corporation
  Based partially on Intel IPU4 driver written by
   Sakari Ailus <sakari.ailus@linux.intel.com>
   Samu Onkalo <samu.onkalo@intel.com>
   Jouni Högander <jouni.hogander@intel.com>
   Jouni Ukkonen <jouni.ukkonen@intel.com>
   Antti Laakso <antti.laakso@intel.com>
  et al.
  These are raw formats used in Intel's third generation of
  Image Processing Unit known as IPU3.
  10bit raw bayer packed, 32 bytes for every 25 pixels,
  last LSB 6 bits unused.
 put default entry at beginning 
  cio2_find_format - lookup color format by fourcc orand media bus code
  @pixelformat: fourcc to match, ignored if null
  @mbus_code: media bus code to match, ignored if null
	
	  64 bytes for every 50 pixels, the line length
	  in bytes is multiple of 64 (line end alignment).
 FBPT operations 
	
	  List of Pointers(LOP) contains 1024x32b pointers to 4KB page each
	  Initialize each entry to dummy_page bus base address.
	
	  The CPU first initializes some fields in fbpt, then sets
	  the VALID bit, this barrier is to ensure that the DMA(device)
	  does not see the VALID bit enabled before other fields are
	  initialized; otherwise it could lead to havoc.
	
	  Request interrupts for start and completion
	  Valid bit is applicable only to 1st entry
 Initialize fpbt entries to point to dummy frame 
 Initialize fpbt entries to point to a given buffer 
	
	  last_page_available_bytes has the offset of the last byte in the
	  last page which is still accessible by DMA. DMA cannot access
	  beyond this point. Valid range for this is from 0 to 4095.
	  0 indicates 1st byte in the page is DMA accessible.
	  4095 (PAGE_SIZE - 1) means every single byte in the last page
	  is available for DMA transfer.
 Fill FBPT 
	
	  The first not meaningful FBPT entry should point to a valid LOP
 CSI2 hardware setup 
  The CSI2 receiver has several parameters affecting
  the receiver timings. These depend on the MIPI bus frequency
  F in Hz (sensor transmitter rate) as follows:
      register value = (A1e9 + B  UI)  COUNT_ACC
  where
       UI = 1  (2  F) in seconds
       COUNT_ACC = counter accuracy in seconds
       For IPU3 COUNT_ACC = 0.0625
  A and B are coefficients from the table below,
  depending whether the register minimum or maximum value is
  calculated.
                                      Minimum     Maximum
  Clock lane                          A     B     A     B
  reg_rx_csi_dly_cnt_termen_clane     0     0    38     0
  reg_rx_csi_dly_cnt_settle_clane    95    -8   300   -16
  Data lanes
  reg_rx_csi_dly_cnt_termen_dlane0    0     0    35     4
  reg_rx_csi_dly_cnt_settle_dlane0   85    -2   145    -6
  reg_rx_csi_dly_cnt_termen_dlane1    0     0    35     4
  reg_rx_csi_dly_cnt_settle_dlane1   85    -2   145    -6
  reg_rx_csi_dly_cnt_termen_dlane2    0     0    35     4
  reg_rx_csi_dly_cnt_settle_dlane2   85    -2   145    -6
  reg_rx_csi_dly_cnt_termen_dlane3    0     0    35     4
  reg_rx_csi_dly_cnt_settle_dlane3   85    -2   145    -6
  We use the minimum values of both A and B.
  shift for keeping value range suitable for 32-bit integer arithmetic
 invert of counter resolution 
 1e9  2 
	
	  b could be 0, -2 or -8, so |accinv  b| is always
	  less than (1 << ds) and thus |r| < 500000000.
 max value of a is 95 
 Calculate the delay value for termination enable of clock lane HS Rx 
 Stream id 
 Configure MIPI backend 
 There are 16 short packet LUT entry 
 Enable DMA 
 Clear interrupts 
 Enable devices, starting from the last device in the pipe 
 Disable CSI receiver and MIPI backend devices 
 Halt DMA 
 Find out which buffer(s) are ready 
	
	  For the user space camera control algorithms it is essential
	  to know when the reception of a frame has begun. That's often
	  the best timing information to get from the hardware.
		
		  Interrupt on Output Error:
		  1) SRAM is full and FS received, or
		  2) An invalid bit detected by DMA.
 DMA IO done -- frame ready 
 DMA IO starts or reached specified line 
 CSI2 receiver (error) interrupt 
 Videobuf2 interface 
 Initialize buffer queue 
 Called after each buffer is allocated 
 Should never happen 
 Allocate LOP table 
 Fill LOP 
 Transfer buffer ownership to cio2 
	
	  This code queues the buffer to the CIO2 DMA engine, which starts
	  running once streaming has started. It is possible that this code
	  gets pre-empted due to increased CPU load. Upon this, the driver
	  does not get an opportunity to queue new buffers to the CIO2 DMA
	  engine. When the DMA engine encounters an FBPT entry without the
	  VALID bit set, the DMA engine halts, which requires a restart of
	  the DMA engine and sensor, to continue streaming.
	  This is not desired and is highly unlikely given that there are
	  32 FBPT entries that the DMA engine needs to process, to run into
	  an FBPT entry, without the VALID bit set. We try to mitigate this
	  by disabling interrupts for the duration of this queueing.
	
	  fbpt_rp is the fbpt entry that the dma is currently working
	  on, but since it could jump to next entry at any time,
	  assume that we might already be there.
 Buffers were drained 
		
		  We have allocated CIO2_MAX_BUFFERS circularly for the
		  hw, the user has requested N buffer queue. The driver
		  ensures N <= CIO2_MAX_BUFFERS and guarantees that whenever
		  user queues a buffer, there necessarily is a free buffer.
 Called when each buffer is freed 
 Free LOP table 
 Start streaming on sensor 
 V4L2 interface 
 The format is validated in cio2_video_link_validate() 
 Only supports up to 4224x3136 
 use default 
 Line number. For now only zero accepted. 
 Initialize try_fmt 
 same as sink 
  cio2_subdev_get_fmt - Handle get format by pads subdev method
  @sd : pointer to v4l2 subdev structure
  @cfg: V4L2 subdev pad config
  @fmt: pointer to v4l2 subdev format structure
  return -EINVAL or zero on success
  cio2_subdev_set_fmt - Handle set format by pads subdev method
  @sd : pointer to v4l2 subdev structure
  @cfg: V4L2 subdev pad config
  @fmt: pointer to v4l2 subdev format structure
  return -EINVAL or zero on success
	
	  Only allow setting sink pad format;
	  source always propagates from sink
 V4L2 sub-device asynchronous registration callbacks
 The .bound() notifier callback when a match is found 
 The .unbind callback 
 .complete() is called after all subdevices have been located 
	
	  Proceed even without sensors connected to allow the device to
	  suspend.
 Queue initialization 
 Initialize miscellaneous variables 
 Initialize formats to default values 
 Initialize fbpt 
 Initialize media entities 
 Initialize subdev 
 Initialize vbq 
 Initialize vdev 
 Create link from CIO2 subdev to output node 
 PCI interface 
	
	  On some platforms no connections to sensors are defined in firmware,
	  if the device has no endpoints then we can try to build those as
	  software_nodes parsed from SSDB.
 Register notifier for subdevices we care 
  Helper function to advance all the elements of a circular buffer by "start"
  positions
 Loop as long as we have out-of-place entries 
		
		  Find the number of entries that can be arranged on this
		  iteration.
 Swap the entries in two parts of the array. 
 The end of the first array remains unarranged. 
			
			  The first array is fully arranged so we proceed
			  handling the next one.
	
	  DMA clears the valid bit when accessing the buffer.
	  When stopping stream in suspend callback, some of the buffers
	  may be in invalid state. After resume, when DMA meets the invalid
	  buffer, it will halt and stop receiving new data.
	  To avoid DMA halting, set the valid bit for all buffers in FBPT.
 Stop stream 
	
	  Upon resume, hw starts to process the fbpt entries from beginning,
	  so relocate the queued buffs to the fbpt head before suspend.
 Start stream 
 SPDX-License-Identifier: GPL-2.0
  ddbridge-core.c: Digital Devices bridge core functions
  Copyright (C) 2010-2017 Digital Devices GmbH
                          Marcus Metzler <mocm@metzlerbros.de>
                          Ralph Metzler <rjkm@metzlerbros.de>
  This program is free software; you can redistribute it andor
  modify it under the terms of the GNU General Public License
  version 2 only, as published by the Free Software Foundation.
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
	 dev_info(port->dev->dev,
	  "unredirect %d.%d\n", port->dev->nr, port->nr);
 NCO 
 Divider and gap 
 96 MBits and gap 
 enable gap 
 Disable gap 
 attach frontend 
 the cxd2841er driver expects 8bitshifted I2C addresses 
 attach frontend 
	 due to a hardware quirk with the I2C gate on the stv0367+tda18212
	  combo, the tda18212 must be probed by reading it's id _twice_ when
	  cold started, or it very likely will fail.
 perform tuner probeinitattach 
	 attach lnbh25 - leftshift by one as the lnbh25 driver expects 8bit
	  i2c addresses
	
	  Determine if bridges with stv0910 demods can run with fast TS and
	  thus support high bandwidth transponders.
	  STV0910_PR and STV0910_P tuner types covers all relevant bridges,
	  namely the CineS2 V7(A) and the Octopus CI S2 ProAdvanced. All
	  DuoFlex S2 V4(A) have type=DDB_TUNER_DVBS_STV0910 without any suffix
	  and are limited by the serial link to the bridge, thus won't work
	  in fast TS mode.
 fast TS on port 0 requires FPGA version >= 1.7 
 return error from ret if set 
 Enable tuner power, disable pll, reset demods 
 Release demod resets 
 speed: 0=55,1=75,2=90,3=104 MBits 
 Start XO2 PLL 
 Enable both CI 
 speed: 0=55,1=75,2=90,3=104 MBits 
 Handle missing ports and ports without I2C 
 Probe ports with I2C 
dev_info(dev->dev, "XO2 ID %02x\n", id);
 Copy input DMA pointers to output DMA and ACK. 
	
	  if there also is an output connected, do not ACK.
	  input_write_output will ACK.
 dev_err(dev->dev, "Overflow dma %d\n", dma->nr); 
 FIXME: check for big-endian 
  TODOFIXME: addimplement IOCTLs from upstream driver
 serial number at 0x100-0x11f 
 in case it is not terminated on EEPROM 
 in case it is not terminated on EEPROM 
 in case it is not terminated on EEPROM 
 SPDX-License-Identifier: GPL-2.0
  ddbridge.c: Digital Devices PCIe bridge driver
  Copyright (C) 2010-2017 Digital Devices GmbH
                          Ralph Metzler <rjkm@metzlerbros.de>
                          Marcus Metzler <mocm@metzlerbros.de>
  This program is free software; you can redistribute it andor
  modify it under the terms of the GNU General Public License
  version 2 only, as published by the Free Software Foundation.
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
 module parameters 
 SPDX-License-Identifier: GPL-2.0
  ddbridge-mci.c: Digital Devices microcode interface
  Copyright (C) 2017-2018 Digital Devices GmbH
                          Ralph Metzler <rjkm@metzlerbros.de>
                          Marcus Metzler <mocm@metzlerbros.de>
  This program is free software; you can redistribute it andor
  modify it under the terms of the GNU General Public License
  version 2 only, as published by the Free Software Foundation.
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.
 1= no internal init 
 SPDX-License-Identifier: GPL-2.0
  ddbridge-sx8.c: Digital Devices MAX SX8 driver
  Copyright (C) 2018 Digital Devices GmbH
                     Marcus Metzler <mocm@metzlerbros.de>
                     Ralph Metzler <rjkm@metzlerbros.de>
  This program is free software; you can redistribute it andor
  modify it under the terms of the GNU General Public License
  version 2 only, as published by the Free Software Foundation.
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU General Public License for more details.
		 uncomment whenever these modulations hit the DVB API
		 	case APSK_256:
		 		mask = 0x7f;
		 		break;
		 	case APSK_128:
		 		mask = 0x3f;
		 		break;
		 	case APSK_64:
		 		mask = 0x1f;
		 		break;
 SPDX-License-Identifier: GPL-2.0
  ddbridge-hw.c: Digital Devices bridge hardware maps
  Copyright (C) 2010-2017 Digital Devices GmbH
                          Ralph Metzler <rjkm@metzlerbros.de>
                          Marcus Metzler <mocm@metzlerbros.de>
  This program is free software; you can redistribute it andor
  modify it under the terms of the GNU General Public License
  version 2 only, as published by the Free Software Foundation.
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
 PCIe devices 
 SPDX-License-Identifier: GPL-2.0
  ddbridge-i2c.c: Digital Devices bridge i2c driver
  Copyright (C) 2010-2017 Digital Devices GmbH
                          Ralph Metzler <rjkm@metzlerbros.de>
                          Marcus Metzler <mocm@metzlerbros.de>
  This program is free software; you can redistribute it andor
  modify it under the terms of the GNU General Public License
  version 2 only, as published by the Free Software Foundation.
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
 + i2c->bsize  2 
 SPDX-License-Identifier: GPL-2.0-or-later
   Driver for Dummy Frontend
   Written by Emard <emard@softhome.net>
  Should only be implemented if it actually reads something from the hardware.
  Also, it should check for the locks, in order to avoid report wrong data
  to userspace.
 allocate memory for the internal state 
 create dvb_frontend 
 symbol_rate_min: SACLK64 == (XIN2)64 
 SACLK4 
 SPDX-License-Identifier: GPL-2.0
  ddbridge-max.c: Digital Devices bridge MAX card support
  Copyright (C) 2010-2017 Digital Devices GmbH
                          Ralph Metzler <rjkm@metzlerbros.de>
                          Marcus Metzler <mocm@metzlerbros.de>
  This program is free software; you can redistribute it andor
  modify it under the terms of the GNU General Public License
  version 2 only, as published by the Free Software Foundation.
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
 MaxS48 related modparams 
 MAX MCI related functions 
 SPDX-License-Identifier: GPL-2.0
  ddbridge-ci.c: Digital Devices bridge CI (DuoFlex, CI Bridge) support
  Copyright (C) 2010-2017 Digital Devices GmbH
                          Marcus Metzler <mocm@metzlerbros.de>
                          Ralph Metzler <rjkm@metzlerbros.de>
  This program is free software; you can redistribute it andor
  modify it under the terms of the GNU General Public License
  version 2 only, as published by the Free Software Foundation.
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
 Octopus CI internal CI interface 
 DuoFlex Dual CI support 
 free alloc'ed memory if needed 
 SPDX-License-Identifier: GPL-2.0-or-later
   Driver for the NXP SAA7164 PCIe bridge
   Copyright (c) 2010-2015 Steven Toth <stoth@kernellabs.com>
 addr is in the card struct, get it from there 
 Disabled 
 Disabled 
 24 or 25 
 Disabled 
 Disabled 
 24 or 25 
 Firmware is very windows centric, meaning you have to transition
  the part through AVStream  KS Windows stages, forwards or backwards.
  States are: stopped, acquired (hw), paused, started.
 Mark the hardware buffers as free 
 Acquire the hardware 
 Stop the hardware, regardless 
 Pause the hardware 
 Stop the hardware, regardless 
 Start the hardware 
 Stop the hardware, regardless 
 Start transport 
 Stop transport 
 Sanity check that the PCI configuration space is active 
 Init and establish defaults 
 Allocate the PCI resources 
 register adapter 
 register frontend 
 register demux stuff 
 register network adapter 
 Remove any allocated buffers 
 remove I2C client for tuner 
 remove I2C client for demodulator 
 All the DVB attach calls go here, this function gets modified
  for each new card.
 init frontend 
 TODO: addr is in the card struct 
 TODO: addr is in the card struct 
 Master TDA18271 
 TODO: addr is in the card struct 
 Slave TDA18271 
 attach frontend 
 attach tuner 
 attach frontend 
 attach tuner 
 register everything 
 SPDX-License-Identifier: GPL-2.0-or-later
   Driver for the NXP SAA7164 PCIe bridge
   Copyright (c) 2010-2015 Steven Toth <stoth@kernellabs.com>
  This is a dummy non-zero value for the sizeimage field of v4l2_pix_format.
  It is not actually used for anything since this driver does not support
  stream IO, only read(), and because this driver produces an MPEG stream
  and not discrete frames. But the V4L2 spec doesn't allow for this value
  to be 0, so set it to 0x10000 instead.
  If we ever change this driver to support stream IO, then this field
  will be the size of the streaming buffers.
 Take the encoder configuration form the port struct and
  flush it to the hardware.
 Set up the DIF (enable it) for analog mode by default 
 Configure the correct video standard 
 Ensure the audio decoder is correct configured 
 Remove any allocated buffers 
 Dynamic buffer switch at encoder start time 
 Init and establish defaults 
 Allocate the PCI resources, buffers (hard) 
	 Allocate some kernel buffers for copying
	  to userpsace.
 -- V4L2 --------------------------------------------------------- 
	 Update the audio decoder while is not running in
	  auto detect mode.
 Update the AV core 
 TODO: Pull this for the std 
 Stop the encoder 
 Update the hardware 
 Firmware is very windows centric, meaning you have to transition
  the part through AVStream  KS Windows stages, forwards or backwards.
  States are: stopped, acquired (hw), paused, started.
  We have to leave here will all of the soft buffers on the free list,
  else the cfg_post() func won't have soft buffers to correctly configure.
 Reset the state of any allocated buffer resources 
 Reset the hard and soft buffer state 
 Free any allocated resources 
	 allocate all of the PCIe DMA buffer resources on the fly,
	  allowing switching between TS and PS payloads without
	  requiring a complete driver reload.
 Configure the encoder with any cache values 
 Place the empty buffers on the hardware 
 Acquire the hardware 
 Stop the hardware, regardless 
 Pause the hardware 
 Stop the hardware, regardless 
 Start the hardware 
 Stop the hardware, regardless 
 allocate + initialize per filehandle data 
 Shut device down on last close 
 stop mpeg capture then cancel buffers 
 blocking wait for buffer 
 Pull the first buffer from the used list 
 set remaining bytes to copy 
 finished with current buffer, take next buffer 
 Requeue the buffer on the free list 
 Dequeue next 
 Pull the first buffer from the used list 
 Sanity check that the PCI configuration space is active 
 Establish encoder defaults here 
 Set default TV standard 
 Composite 
 Allocate and register the video device node 
 Configure the hardware defaults 
 Disable audio standard detection, it's buggy 
 SPDX-License-Identifier: GPL-2.0-or-later
   Driver for the NXP SAA7164 PCIe bridge
   Copyright (c) 2010-2015 Steven Toth <stoth@kernellabs.com>
 The Bridge API needs to understand register widths (in bytes) for the
  attached I2C devices, so we can simplify the virtual i2c mechansms
  and keep the -i2c.c implementation clean.
		 Bridge will not load any firmware, without knowing
 Bridge will load the v2 fw and dump descriptors 
 Required during new board bringup 
 Bridge will load the v2 fw and dump descriptors 
 Required during new board bringup 
 ------------------------------------------------------------------ 
 PCI subsystem IDs                                                  
		 Prototype card left here for documentation purposes.
		.card      = SAA7164_BOARD_HAUPPAUGE_HVR2255proto,
 TODO: clean this define up into the -cards.c structs 
		
		HVR2200  HVR2250
		GPIO 2: s5h1411  tda10048-1 demod reset
		GPIO 3: s5h1411  tda10048-2 demod reset
		GPIO 7: IRBlaster Zilog reset
		 HVR2255
		  GPIO 2: lgdg3306-1 demod reset
		  GPIO 3: lgdt3306-2 demod reset
		 HVR2205
		  GPIO 2: si2168-1 demod reset
		  GPIO 3: si2168-2 demod reset
 Reset parts by going in and out of reset 
 Make sure we support the board model 
 Development board - Limit circulation 
		 WinTV-HVR2250 (PCIe, Retail, full-height bracket)
		 WinTV-HVR2250 (PCIe, Retail, full-height bracket)
		 WinTV-HVR2250 (PCIe, Retail, full-height bracket)
		 WinTV-HVR2250 (PCIe, Retail, full-height bracket)
		 WinTV-HVR2200 (PCIe, Retail, full-height)
		 WinTV-HVR2200 (PCIe, Retail, half-height)
 First production board rev B2I6 
		 WinTV-HVR2205 (PCIe, Retail, full-height bracket)
 First production board rev B2I6 
		 WinTV-HVR2205 (PCIe, Retail, half-height bracket)
 First production board rev B1I6 
		 WinTV-HVR2255 (PCIe, Retail, full-height bracket)
 With most other drivers, the kernel expects to communicate with subdrivers
  through i2c. This bridge does not allow that, it does not expose any direct
  access to I2C. Instead we have to communicate through the device fw for
  register access to 'processing units'. Each unit has a unique
  id, regardless of how the physical implementation occurs across
  the three physical i2c buses. The being said if we want leverge of
  the existing kernel drivers for tuners and demods we have to 'speak i2c',
  to this bridge implements 3 virtual i2c buses. This is a helper function
  for those.
  Description: Translate the kernels notion of an i2c address and bus into
  the appropriate unitid.
	 For a given bus and i2c device address, return the saa7164 unique
 The 7164 API needs to know the i2c register length in advance.
  this is a helper function. Based on a specific chip addr and bus return the
  reg length.
	 For a given bus and i2c device address, return the
	  saa7164 registry address width. < 0 on error
 TODO: implement a 'findeeprom' functio like the above and fix any other
  eeprom related todo's in -api.c.
 Translate a unitid into a x readable device name, for display purposes.  
 SPDX-License-Identifier: GPL-2.0-or-later
   Driver for the NXP SAA7164 PCIe bridge
   Copyright (c) 2010-2015 Steven Toth <stoth@kernellabs.com>
 Retrieve current state 
 set new state 
 Probe, see if it can support this format 
 See of the format change was successful 
 Compare requested vs received, should be same 
 Ask the device to select the negotiated format 
 Resolution 
 Establish video bitrates 
 Establish audio bitrates 
 Aspect Ratio 
 Aspect Ratio 
 Audio Mute 
 Video Mux 
 Audio Mux 
 Audio UnMute 
 0 = silence, 0xff = full 
 Obtain the minmax ranges 
 Left 
 Right 
 Establish default levels 
 Manually select the appropriate TV audio standard 
 Disable TV Audio autodetect if not already set (buggy) 
 Disable the IF block AGC controls 
 Video Standard 
 Video Standard 
 Video Standard 
 Video Standard 
 Video Standard 
 Video Standard 
 Video Standard 
 Video Standard 
 Unknown standard, assume DTV 
 Undefinded Video Standard 
 AGC Functions 1 
 AGC Output Disable 
 CVBS EQ 
 Active 
 Active (again) 
 Ensure the dif is in the correct state for the operating mode
  (analog  dtv). We only configure the diff through the analog encoder
  so when we're in digital mode we need to find the appropriate encoder
  and use it to configure the DIF.
		 Pick any analog standard to init the diff.
		  we'll come back during encoder_init'
		  and set the correct standard if required.
 Assumption: Hauppauge eeprom is at 0xa0 on on bus 0 
 TODO: Pull the details from the boards struct 
 Cache the hardware configuration in the port 
 Cache the hardware configuration in the port 
 Cache the hardware configuration in the port 
 TODO: CHECK THIS in the port config 
 Get the total descriptor length 
 Allocate enough storage for all of the descs 
 Retrieve them 
 Prepare the send buffer 
	 Bytes 00-03 source register length
	        04-07 source bytes to read
	        08... register address
 For a given 8 bit i2c address device, write the buffer 
 Prepare the send buffer 
	 Bytes 00-03 dest register length
	        04-07 dest bytes to write
	        08... register address
 SPDX-License-Identifier: GPL-2.0-or-later
   Driver for the NXP SAA7164 PCIe bridge
   Copyright (c) 2010-2015 Steven Toth <stoth@kernellabs.com>
 Take the encoder configuration from the port struct and
  flush it to the hardware.
 Set up the DIF (enable it) for analog mode by default 
 Remove any allocated buffers 
 Dynamic buffer switch at vbi start time 
 TODO: NTSC SPECIFIC 
 Init and establish defaults 
 Allocate the PCI resources, buffers (hard) 
	 Allocate some kernel buffers for copying
	  to userpsace.
 -- V4L2 --------------------------------------------------------- 
 Firmware is very windows centric, meaning you have to transition
  the part through AVStream  KS Windows stages, forwards or backwards.
  States are: stopped, acquired (hw), paused, started.
  We have to leave here will all of the soft buffers on the free list,
  else the cfg_post() func won't have soft buffers to correctly configure.
 Reset the state of any allocated buffer resources 
 Reset the hard and soft buffer state 
 Free any allocated resources 
	 allocate all of the PCIe DMA buffer resources on the fly,
	  allowing switching between TS and PS payloads without
	  requiring a complete driver reload.
 Configure the encoder with any cache values 
 Place the empty buffers on the hardware 
 Negotiate format 
 Acquire the hardware 
 Pause the hardware 
 Stop the hardware, regardless 
 Start the hardware 
 Stop the hardware, regardless 
 ntsc 
 allocate + initialize per filehandle data 
 Shut device down on last close 
 stop vbi capture then cancel buffers 
 blocking wait for buffer 
 Pull the first buffer from the used list 
 set remaining bytes to copy 
 finished with current buffer, take next buffer 
 Requeue the buffer on the free list 
 Dequeue next 
 blocking wait for buffer 
 Pull the first buffer from the used list 
 Sanity check that the PCI configuration space is active 
 Establish VBI defaults here 
 Allocate and register the video device node 
		 TODO: We're going to leak here if we don't dealloc
		 The buffers above. The unreg function can't deal wit it.
 Configure the hardware defaults 
 SPDX-License-Identifier: GPL-2.0-or-later
   Driver for the NXP SAA7164 PCIe bridge
   Copyright (c) 2010-2015 Steven Toth <stoth@kernellabs.com>
 The PCI address space for buffer handling looks like this:
  +-u32 wide-------------+
  |                      +
  +-u64 wide------------------------------------+
  +                                             +
  +----------------------+
  | CurrentBufferPtr     + Pointer to current PCI buffer >-+
  +----------------------+                                 |
  | Unused               +                                 |
  +----------------------+                                 |
  | Pitch                + = 188 (bytes)                   |
  +----------------------+                                 |
  | PCI buffer size      + = pitch  number of lines (312) |
  +----------------------+                                 |
  |0| Buf0 Write Offset  +                                 |
  +----------------------+                                 v
  |1| Buf1 Write Offset  +                                 |
  +----------------------+                                 |
  |2| Buf2 Write Offset  +                                 |
  +----------------------+                                 |
  |3| Buf3 Write Offset  +                                 |
  +----------------------+                                 |
  ... More write offsets                                   |
  +---------------------------------------------+          |
  +0| set of ptrs to PCI pagetables             +          |
  +---------------------------------------------+          |
  +1| set of ptrs to PCI pagetables             + <--------+
  +---------------------------------------------+
  +2| set of ptrs to PCI pagetables             +
  +---------------------------------------------+
  +3| set of ptrs to PCI pagetables             + >--+
  +---------------------------------------------+    |
  ... More buffer pointers                           |  +----------------+
 						    +->| pt[0] TS data  |
 						    |  +----------------+
 						    |
 						    |  +----------------+
 						    +->| pt[1] TS data  |
 						    |  +----------------+
 						    | etc
 Format the Page Table Entries to point into the data buffer 
 Allocate a new buffer structure and associated PCI space in bytes.
  len must be a multiple of sizeof(u64)
 TODO: arg len is being ignored 
 Allocate contiguous memory 
 init the buffers to a known pattern, easier during debugging 
 Format the Page Table Entries to point into the data buffer 
 TODO 
 Write a buffer into the hardware 
 Note of which buffer list index position we occupy 
 TODO: Review this in light of 32v64 assignments 
 Poke the buffers and offsets into PCI space 
 Place the buffer in the hw queue 
 Don't exceed the device maximum # bufs 
 SPDX-License-Identifier: GPL-2.0-or-later
   Driver for the NXP SAA7164 PCIe bridge
   Copyright (c) 2010-2015 Steven Toth <stoth@kernellabs.com>
 Commands to the fw get marshelled tofrom this code then onto the PCI
 While any outstand message on the bus exists... 
 Peek the msg bus 
 Clean the bus 
 Someone else already fetched the response 
		 It's unlikely to have more than 4 or 5 pending messages,
		  ensure we exit at some point regardless.
 Commands to the fw get marshelled tofrom this code then onto the PCI
 Clean the bus 
 Someone else already fetched the response 
 Split the request into smaller chunks 
 If not the last command... 
 Wait for a signal event, without holding a mutex. Either return TIMEOUT if
  the event never occurred, or SAA_OK if it was signaled during the wait.
 If we haven't been signalled we need to wait 
 Wait for signalled to be flagged or timeout 
			 In a highly stressed system this can easily extend
			  into multiple seconds before the deferred worker
			  is scheduled, and we're woken up via signal.
			  We typically are signalled in < 50ms but it can
			  take MUCH longer.
 Prepare some basic commandresponse structures 
 Allocate a unique sequence number 
 Send Command 
			 Flag a timeout, because at least one
 With split responses we have to collect the msgs piece by piece 
 if power is down and this is not a power command ... 
 Peek response 
 Check if the response was for our command 
 Map error codes 
 See of other commands are on the bus 
 If response is invalid 
 Invalid 
 See of other commands are on the bus 
 OK, now we're actually getting out correct response 
 See of other commands are on the bus 
 (loop) 
 Release the sequence number allocation 
 if powerdown signal all pending commands 
 See of other commands are on the bus 
 SPDX-License-Identifier: GPL-2.0-or-later
   Driver for the NXP SAA7164 PCIe bridge
   Copyright (c) 2010-2015 Steven Toth <stoth@kernellabs.com>
   1 Basic
   2
   4 i2c
   8 api
  16 cmd
  32 bus
 TODO: Query pid lower 8 bits, ignoring upper bits intensionally 
	 Only report errors if we've been through this function at least
	  once already and the cached cc values are primed. First time through
	  always generates errors.
 First 30ms x 1ms 
 30 - 200ms x 10ms  
 200 - 2000ms x 100ms  
 Catch all massive value (2secs) 
 Catch all massive value (4secs) 
 Catch all massive value (8secs) 
 Catch all massive value (15secs) 
 Catch all massive value (30secs) 
 Catch all massive value (60secs) 
 Catch all massive value (5mins) 
 Catch all massive value (15mins) 
 Catch all massive values (1hr) 
 Found the buffer, deal with it 
 Throw a new checksum on the dma buffer 
 Validate the incoming buffer content 
 find a free user buffer and clone to it 
 Pull the first buffer from the used list 
 Throw a new checksum on the read buffer 
 Requeue the buffer on the free list 
 Flag any userland waiters 
			 Ensure offset into buffer remains 0, fill buffer
			  with known bad data. We check for this data at a later point
 Throw yet aanother new checksum on the dma buffer 
 Current write position 
 Most current complete buffer 
 TODO: Convert this into a procsaa7164 style readable file 
 TODO: fix this to preserve any previous state 
 Current write position 
 Most current complete buffer 
 TODO: Convert this into a procsaa7164 style readable file 
 TODO: fix this to preserve any previous state 
 Wake up any complete commands 
 Feed the transport payload into the kernel demux 
 Store old time 
 Collect new stats 
 Calculate stats 
 Tis calls the vbi irq handler 
 Store old time 
 Collect new stats 
 Calculate stats 
 Find the current write point from the hardware 
 Find the previous buffer to the current write point 
 Lookup the WP in the buffer list 
 TODO: turn this into a worker thread 
 Found the buffer, deal with it 
 Primary IRQ handler and dispatch mechanism 
	 Check that the hardware is accessible. If the status bytes are
	  0xFF then the device is not accessible, the the IRQ belongs
	  to another driver.
	  4 x u32 interrupt registers.
 TODO: Convert into saa7164_readl() 
 Read the 4 hardware interrupt registers 
 For each of the HW interrupt registers 
			 Each function of the board has it's own interruptid.
			  Find the function that triggered then call
			  it's handler.
 Calculate the interrupt id (0x00 to 0x7f) 
 A response to an cmdapi call 
 Transport path 1 
 Transport path 2 
 Encoder path 1 
 Encoder path 2 
 VBI path 1 
 VBI path 2 
 Find the function 
 Ack it 
 TODO: Debugging func, remove 
 Much of the hardware configuration and PCI registers are configured
  dynamically depending on firmware. We have to cache some initial
  structures then use these to locate other important structures
  from PCI space.
 We need a deferred interrupt handler for cmd handling 
 We need a deferred interrupt handler for cmd handling 
 Init all the critical resources 
 board config 
 I2C Defaults  setup 
 Transport + Encoder ports 1, 2, 3, 4 - Defaults  setup 
 PCIe allocations 
 Interrupt and ack register locations offset of bmmio 
 Lock the bus from any other access 
 Dump the firmware debug message to console 
 Polling this costs us 1-2% of the arm CPU 
 convert this into a respnde to interrupt 0x7a 
 Monitor CPU load every 1 second 
 ms ) < jiffies_to_msecs(jiffies)) {
 no error - so request an msi interrupt 
 fall back to legacy interrupt 
 pci init 
 print pci info 
 TODO 
 irq bit 
		 if we have an error (i.e. we don't have an interrupt)
 Init the internal command list 
 We need a deferred interrupt handler for cmd handling 
 Only load the firmware if we know the board 
		 Ping the running firmware via the command bus and get the
		  firmware version, this checks the bus is running OK.
 Bring up the I2C buses 
		 Parse the dynamic device configuration, find various
		  media endpoints (MPEG, WMV, PS, TS) and cache their
		  configuration details into the driver, so we can
		  reference them later during simething_register() func,
		  interrupt handlers, deferred work handlers etc.
 Begin to create the video sub-systems and register funcs 
 != BOARD_UNKNOWN 
 unregister stuff 
 SAA7164 
 --- end of list --- 
 SPDX-License-Identifier: GPL-2.0-or-later
   Driver for the NXP SAA7164 PCIe bridge
   Copyright (c) 2010-2015 Steven Toth <stoth@kernellabs.com>
 reglen ,
 reg , msgs[i].len, msgs[i].buf);
 write then read from same address 
 write 
 ----------------------------------------------------------------------- 
 SPDX-License-Identifier: GPL-2.0-or-later
   Driver for the NXP SAA7164 PCIe bridge
   Copyright (c) 2010-2015 Steven Toth <stoth@kernellabs.com>
 TODO: move dlflags into dev-> and change to writereadlb 
 TODO: Excessive levels of debug 
 Indicate download start 
 Ack download start, then wait for wait 
 Deal with the raw firmware, in the appropriate chunk size 
 Flag the data as ready 
 Wait for indication data was received 
 Write last block to the device 
 Flag the data as ready 
 Checkpatch throws a < 20ms warning 
 TODO: Excessive debug 
 Load the firmware. Optionally it can be in ROM or newer versions
 u32 second_timeout = 60  SAA_DEVICE_TIMEOUT; 
 Checkpatch throws a < 20ms warning 
 While != Booting 
 Checkpatch throws a < 20ms warning 
 err_flags != SAA_DEVICE_IMAGE_BOOTING 
 err_flags == SAA_DEVICE_IMAGE_BOOTING 
		 It's possible for both firmwares to have booted,
		  but that doesn't mean they've finished booting yet.
 Checkpatch throws a < 20ms warning 
 version == 0 
 Has the firmware really booted? 
 Tell the second stage loader we have a deadlock 
 Load the firmware from the disk if required 
 Retrieve bootloader if reqd 
 Second bootloader in the firmware file 
 Get bootloader (if reqd) and firmware header 
 Second boot loader is required 
 Get the loader header 
 Calculate offset to firmware header 
 No second boot loader 
 No download, firmware already on board 
 Get ready to upload the bootloader 
 TODO: fix this bounds overrun here with old fws 
 No bootloader update reqd, download firmware only 
 SPDX-License-Identifier: GPL-2.0-or-later
   Driver for the NXP SAA7164 PCIe bridge
   Copyright (c) 2010-2015 Steven Toth <stoth@kernellabs.com>
 The message bus tofrom the firmware is a ring buffer in PCI address
  space. Establish the defaults.
 Intensionally throw a BUG() if the state of the message bus looks corrupt 
 Ensure we get the bus dump 
 Ensure we get the bus dump 
  Places a command or a response on the bus. The implementation does not
  know if it is a command or a response it just places the data on the
  bus depending on the bus information given in the struct tmComResBusInfo
  structure. If the command or response does not fit into the bus ring
  buffer it will be refused.
  Return Value:
   SAA_OK     The function executed successfully.
   < 0        One or more members are not initialized.
 Lock the bus from any other access 
 Deal with ring wrapping issues 
 Deal with the wrapped ring 
 The ring has not wrapped yet 
 Process the msg and write the content onto the bus 
 TODO: Review this delay, efficient? 
 Wait, allowing the hardware fetch time 
 Check the space usage again 
 Deal with ring wrapping issues 
 Deal with the wrapped ring 
 Read didn't wrap around the buffer 
 Calculate the new write position 
	
	  Make a copy of msg->size before it is converted to le16 since it is
	  used in the code below.
 Convert to le16le32 
 Mental Note: line 462 tmmhComResBusPCIe.cpp 
 Check if we're going to wrap again 
 Ring wraps 
 Split the msg into pieces as the ring wraps 
 Additional data at the beginning of the ring 
 Additional data wraps around the ring 
 (new_swp > bus->m_dwSizeSetRing) 
 The ring buffer doesn't wrap, two simple copies 
 Update the bus write position 
 Convert back to cpu after writing the msg to the ringbuffer. 
  Receive a command or a response from the bus. The implementation does not
  know if it is a command or a response it simply dequeues the data,
  depending on the bus information given in the struct tmComResBusInfo
  structure.
  Return Value:
   0          The function executed successfully.
   < 0        One or more members are not initialized.
	 Peek the bus to see if a msg exists, if it's not what we're expecting
	  then return cleanly else read the message from the bus.
 Calculate write distance to current read position 
 Write doesn't wrap around the ring 
 Write wraps around the ring 
 Calculate the new read position 
 Ring wraps 
 No wrapping 
 Convert from little endian to CPU 
 No need to update the read positions, because this was a peek 
 If the caller specifically want to peek, return 
 Check if the commandresponse matches what is expected 
 Get the actual command and response from the bus 
 Calculate write distance to current read position 
 Write doesn't wrap around the ring 
 Write wraps around the ring 
 Calculate the new read position 
 Ring wraps 
 Additional data wraps around the ring 
 No wrapping 
 Update the read positions, adjusting the ring 
 SPDX-License-Identifier: GPL-2.0-or-later
    bttv-gpio.c  --  gpio sub drivers
    sysfs-based sub driver interface for bttv
    mainly intended for gpio access
    Copyright (C) 1996,97,98 Ralph  Metzler (rjkm@thp.uni-koeln.de)
			   & Marcus Metzler (mocm@thp.uni-koeln.de)
    (c) 1999-2003 Gerd Knorr <kraxel@bytesex.org>
 ----------------------------------------------------------------------- 
 internal: the bttv "bus"                                                
 ----------------------------------------------------------------------- 
 external: sub-driver registerunregister                                
 ----------------------------------------------------------------------- 
 external: gpio access functions                                         
 SPDX-License-Identifier: GPL-2.0-or-later
    bttv-risc.c  --  interfaces to other kernel modules
    bttv risc code handling
	- memory management
	- generation
    (c) 2000-2003 Gerd Knorr <kraxel@bytesex.org>
 ---------------------------------------------------------- 
 risc code generators                                       
	 estimate risc mem: worst case is one write per page border +
	   one write per scan line + sync + jump (all 2 dwords).  padding
	   can cause next bpl to start close to a page border.  First DMA
 sync instruction 
 scan lines 
 fits into current chunk 
 scanline needs to be split 
 save pointer to jmp instruction address 
	 estimate risc mem: worst case is one write per page border +
	   one write per scan line (5 dwords)
 sync instruction 
 scan lines 
 go to next sg entry if needed 
 calculate max number of bytes we can write 
 write risc instruction 
 save pointer to jmp instruction address 
 skip list for window clipping 
	 estimate risc mem: worst case is (1.5clip+1)  lines instructions
 sync instruction 
 scan lines 
 calculate clipping 
 write out risc code 
 save pointer to jmp instruction address 
 ---------------------------------------------------------- 
 see PAL-Nc et al )
	 For bug compatibility the image size checks permit scale
 Even to store Cb first, odd for Cr. 
 ---------------------------------------------------------- 
 risc group  risc main loop  dma management               
 capture  
 vbi data 
 top field 
 bottom field 
 jump back to top field 
 VDELAY is start of video, end of VBI capturing. 
 video capture 
 ---------------------------------------------------------- 
 calculate geometry, build risc code 
 packed pixel modes 
 offset  0,bpl,
 padding  0,
 planar modes 
 calculate chroma offsets 
 Y-Cr-Cb plane order 
 Y-Cb-Cr plane order 
 both_fields  0,
 raw data 
 build risc code 
 offset  0, RAW_BPL, 
 skip_lines  0, RAW_LINES);
 copy format info 
 ---------------------------------------------------------- 
 calculate geometry, build risc code 
 check interleave, bottom+top fields 
 calculate geometry 
 build risc code 
 copy format info 
 SPDX-License-Identifier: GPL-2.0-or-later
    bttv - Bt848 frame grabber driver
    vbi interface
    (c) 2002 Gerd Knorr <kraxel@bytesex.org>
    Copyright (C) 2005, 2006 Michael H. Schimek <mschimek@gmx.at>
    Sponsored by OPQ Systems AB
 Offset from line sync pulse leading edge (0H) to start of VBI capture,
   in fCLKx2 pixels.  According to the datasheet, VBI capture starts
   VBI_HDELAY fCLKx1 pixels from the tailing edgeof HRESET, and HRESET
   is 64 fCLKx1 pixels wide.  VBI_HDELAY is set to 0, so this should be
   (64 + 0)  2 = 128 fCLKx2 pixels.  But it's not!  The datasheet is
   Just Plain Wrong.  The real value appears to be different for
   different revisions of the bt8x8 chips, and to be affected by the
   horizontal scaling factor.  Experimentally, the value is measured
 2048 for compatibility with earlier driver versions. The driver
   really stores 1024 + tvnorm->vbipack  4 samples per line in the
   buffer. Note tvnorm->vbipack is <= 0xFF (limit of VBIPACK_LO + HI
   is 0x1FF DWORDs) and VBI read()s store a frame counter in the last
 Compatibility. 
 ----------------------------------------------------------------------- 
 vbi risc code + mm                                                      
	 There's no VBI_VDELAY register, RISC must skip the lines
	   we don't want. With default parameters we skip zero lines
	   as earlier driver versions did. The driver permits video
	   standard changes while capturing, so we use vbi_fmt.tvnorm
	   instead of btv->tvnorm to skip zero lines after video
 max. vbipack 
 offset  0, bpl,
	 VBI capturing ends at VDELAY, start of video capturing,
	   no matter where the RISC program ends. VDELAY minimum is 2,
	   bounds.top is the corresponding first field line number
 For bttv_buffer_activate_vbi(). 
 ----------------------------------------------------------------------- 
	 For compatibility with earlier driver versions we must pretend
	   the VBI and video capture window may overlap. In reality RISC
	   magic aborts VBI capturing at the first line of video capturing,
	   leaving the rest of the buffer unchanged, usually all zero.
	   VBI capturing must always start before video capturing. >> 1
			 No data from this field. We leave f->start[i]
			   alone because VIDIOCSVBIFMT is wo and EINVALs
			   when a driver does not support exactly the
 s64 to prevent overflow. 
 As in earlier driver versions. 
	 First possible line of video capturing. Should be
	   max(f->start[0] + f->count[0], start1 + f->count[1])  2
	   when capturing both fields. But for compatibility we must
	   pretend the VBI and video capture window may overlap,
	   so end = start + 1, the lowest possible value, times two
		 As in vbi_buffer_prepare() this imitates the
		   behaviour of earlier driver versions after video
	 For compatibility the buffer size must be 2  VBI_DEFLINES 
 See bttv_vbi_fmt_set(). 
 SPDX-License-Identifier: GPL-2.0-or-later
    btcx-risc.c
    bt848bt878cx2388x risc code generator.
    (c) 2000-03 Gerd Knorr <kraxel@bytesex.org> [SuSE Labs]
 ---------------------------------------------------------- 
 allocatefree risc memory                                  
 ---------------------------------------------------------- 
 screen overlay helpers                                     
 left 
 right 
 top 
 bottom 
 fixup window 
 fixup clips 
 sanity checks 
 vertical range 
 horizontal range 
 new one 
 overlaps -- expand last one 
 SPDX-License-Identifier: GPL-2.0-or-later
    bttv-cards.c
    this file has configuration information - card-specific stuff
    like the big tvcards array for the most part
    Copyright (C) 1996,97,98 Ralph  Metzler (rjkm@thp.uni-koeln.de)
			   & Marcus Metzler (mocm@thp.uni-koeln.de)
    (c) 1999-2001 Gerd Knorr <kraxel@goldbach.in-berlin.de>
 fwd decl 
 config variables 
 insmod options 
 I2C addresses list 
 ----------------------------------------------------------------------- 
 list of card IDs for bt878+ cards                                       
 some cards ship with byteswapped IDs ... 
 this seems to happen as well ... 
	 clashes with FlyVideo
 LR102 
 ?? 
 ?? 
	 likely broken, vendor id doesn't match the other magic views ...
	 Duplicate PCI ID, reconfigure for this board during the eeprom read.
 DVB cards (using pci function .1 for mpeg data xfer) 
 ----------------------------------------------------------------------- 
 array with description for bt848  bt878 tvgrabber cards               
 ---- card 0x00 ---------------------------------- 
 .audio_inputs= 1, 
 .audio_inputs= 1, 
 .audio_inputs= 1, 
 ---- card 0x04 ---------------------------------- 
 .audio_inputs= 0, 
 .audio_inputs= 1, 
 .audio_inputs= 1, 
                0x04 for some cards ?? 
 .audio_inputs= 1, 
 ---- card 0x08 ---------------------------------- 
 .audio_inputs= 1, 
 .audio_inputs= 1, 
 .audio_inputs= 1, 
 old: 7 
 .audio_inputs= 1, 
 ---- card 0x0c ---------------------------------- 
 .audio_inputs= 1, 
 .audio_inputs= 4, 
 .audio_inputs= 1, 
 old: {0, 1, 2, 3, 4} 
 .audio_inputs= 1, 
 ---- card 0x10 ---------------------------------- 
 .audio_inputs= 1, 
 2003-10-20 by "Anton A. Arapov" <arapov@mail.ru> 
 .audio_inputs= 1, 
 .audio_inputs= 2, 
 .audio_inputs= 1, 
 ---- card 0x14 ---------------------------------- 
 .audio_inputs= 3, 
 .audio_inputs= 2,  tuner, line in 
 .audio_inputs= 1, 
 .audio_inputs= 1, 
 input 2 is digital 
 .digital_mode= DIGITAL_MODE_CAMERA, 
 ---- card 0x18 ---------------------------------- 
 .audio_inputs= 1, 
 not every card has radio 
 .audio_inputs= 1, 
 .audio_inputs= 1, 
 .audio_inputs= 2, 
 ---- card 0x1c ---------------------------------- 
 .audio_inputs= 1, 
		 GPIO wiring:
		External 20 pin connector (for Active Radio Upgrade board)
		gpio00: i2c-sda
		gpio01: i2c-scl
		gpio02: om5610-data
		gpio03: om5610-clk
		gpio04: om5610-wre
		gpio05: om5610-stereo
		gpio06: rds6588-davn
		gpio07: Pin 7 n.c.
		gpio08: nIOW
		gpio09+10: nIOR, nSEL ?? (bt878)
			gpio09: nIOR (bt848)
			gpio10: nSEL (bt848)
		Sound Routing:
		gpio16: u2-A0 (1st 4052bt)
		gpio17: u2-A1
		gpio18: u2-nEN
		gpio19: u4-A0 (2nd 4052)
		gpio20: u4-A1
			u4-nEN - GND
		Btspy:
			00000 : Cdrom (internal audio input)
			10000 : ext. Video audio input
			20000 : TV Mono
			a0000 : TV Mono2
		1a0000 : TV Stereo
			30000 : Radio
			40000 : Mute
 Jannik Fritsch <jannik@techfak.uni-bielefeld.de> 
 .audio_inputs= 1, 
 was: 4 
 .audio_inputs= 1, 
 0x8dfe00 
 .audio_inputs= 1, 
 ---- card 0x20 ---------------------------------- 
 .audio_inputs= 0, 
 .audio_inputs= 1, 
 .audio_inputs= 1, 
 TV, CVid, SVid, CVid over SVid connector 
 Alexander Varakin <avarakin@hotmail.com> [stereo version] 
		 Audio Routing for "WinFast 2000 XP" (no tv stereo !)
			gpio23 -- hef4052:nEnable (0x800000)
			gpio12 -- hef4052:A1
			gpio13 -- hef4052:A0
		0x0000: external audio
		0x1000: FM
		0x2000: TV
		0x3000: n.c.
		Note: There exists another variant "Winfast 2000" with tv stereo !?
		Note: eeprom only contains FF and pci subsystem id 107d:6606
 default for now, gpio reads BFFF06 for Pal bg+dk 
 .audio_inputs= 3, 
 ---- card 0x24 ---------------------------------- 
 .audio_inputs= 3, 
 .audio_inputs= 1, 
 .audio_inputs= 1, 
 .audio_inputs= 1, 
 ---- card 0x28 ---------------------------------- 
 .audio_inputs= 1, 
 .audio_inputs= 4, 
 pic16c54 
 .audio_inputs= 1, 
 .audio_inputs= 1, 
 ---- card 0x2c ---------------------------------- 
 .audio_inputs= 1, 
 .audio_inputs= 1, 
 .audio_inputs= 1, 
 .audio_inputs= 1, 
 ---- card 0x30 ---------------------------------- 
 .audio_inputs= 1, 
 .audio_inputs= 1, 
 .audio_inputs= 1, 
 in 4 is digital 
 .digital_mode= DIGITAL_MODE_CAMERA, 
		 GPIO wiring: (different from Rev.4C !)
			GPIO17: U4.A0 (first hef4052bt)
			GPIO19: U4.A1
			GPIO20: U5.A1 (second hef4052bt)
			GPIO21: U4.nEN
			GPIO22: BT832 Reset Line
			GPIO23: A5,A0, U5,nEN
		Note: At i2c=0x8a is a Bt832 chip, which changes to 0x88 after being reset via GPIO22
 .audio_inputs= 1, 
 TUNER_ALPS_TMDH2_NTSC ,
 ---- card 0x34 ---------------------------------- 
 David Härdeman <david@2gen.com> 
 .audio_inputs= 1, 
				 sound path (5 sources):
				MUX1 (mask 0x03), Enable Pin 0x08 (0=enable, 1=disable)
					0= ext. Audio IN
					1= from MUX2
					2= Mono TV sound from Tuner
					3= not connected
				MUX2 (mask 0x30000):
					0,2,3= from MSP34xx
		 Claas Langbehn <claas@bigfoot.com>,
 .audio_inputs= 3, 
		 Tim Röstermundt <rosterm@uni-muenster.de>
		in de.comp.os.unix.linux.hardware:
			options bttv card=0 pll=1 radio=1 gpiomask=0x18e0
			gpiomux =0x44c71f,0x44d71f,0,0x44d71f,0x44dfff
 .audio_inputs= 1, 
			 For cards with tda9820tda9821:
				0x0000: Tuner normal stereo
				0x0080: Tuner A2 SAP (second audio program = Zweikanalton)
		 Miguel Angel Alvarez <maacruz@navegalia.com>
 .audio_inputs= 1, 
 ---- card 0x38 ---------------------------------- 
 Gordon Heydon <gjheydon@bigfoot.com ('98) 
 .audio_inputs= 3, 
		 This is the ultimate cheapo capture card
		 just a BT848A on a small PCB!
 .audio_inputs= 0, 
 Daniel Herrington <daniel.herrington@home.com> 
 .audio_inputs= 1, 
 Matti Mottus <mottus@physic.ut.ee> 
 .audio_inputs= 1, 
 ---- card 0x3c ---------------------------------- 
 Philip Blundell <philb@gnu.org> 
 .audio_inputs= 2, 
 Adrian Cox <adrian@humboldt.co.uk 
 .audio_inputs= 0, 
		 Miguel Angel Alvarez <maacruz@navegalia.com>
		new Easy TV BT878 version (model CPH061)
 .audio_inputs= 2, 
 Lukas Gebauer <geby@volny.cz> 
 .audio_inputs= 1, 
 ---- card 0x40 ---------------------------------- 
 Lukas Gebauer <geby@volny.cz> 
 .audio_inputs= 1, 
 DeeJay <deejay@westel900.net (2000S) 
 .audio_inputs= 3, 
				 Radio changed from 1e80 to 0x800 to make
 -dk-???: set mute=0x1800 for tda9874h daughterboard 
 .audio_inputs= 1, 
 TANAKA Kei <peg00625@nifty.com> 
 .audio_inputs= 1, 
 ---- card 0x44 ---------------------------------- 
		 try "insmod msp3400 simple=0" if you have
 .audio_inputs= 1, 
		 0x100000: 1=MSP enabled (0=disable again)
		 tvtuner, radio,   external,internal, mute,  stereo
		 try "insmod msp3400 simple=0" if you have
 .audio_inputs= 1, 
		 0x100000: 1=MSP enabled (0=disable again)
		 tvtuner, radio,   external,internal, mute,  stereo
 Philip Blundell <pb@nexus.co.uk> 
 .audio_inputs= 0, 
 Tomasz Pyra <hellfire@sedez.iq.pl> 
 .audio_inputs= 4, 
 TV and Radio with same GPIO ! 
		 GPIO wiring:
			GPIO0: U4.A0 (hef4052bt)
			GPIO1: U4.A1
			GPIO2: U4.A1 (second hef4052bt)
			GPIO3: U4.nEN, U5.A0, A5.nEN
			GPIO8-15: vrd866b ?
 .audio_inputs= 0, 
 AV1, AV2, SVHS, CVid adapter on SVHS 
 ---- card 0x48 ---------------------------------- 
 Dariusz Kowalewski <darekk@automex.pl> 
 .audio_inputs= 1, 
 Note: not all cards have stereo 
 Note: not all cards have radio 
		 GPIO wiring:
			GPIO0: A0 hef4052
			GPIO1: A1 hef4052
			GPIO3: nEN hef4052
			GPIO8-15: vrd866b
			GPIO20,22,23: R30,R29,R28
 Clay Kunz <ckunz@mail.arc.nasa.gov> 
 you must jumper JP5 for the 311 card (PC104+) to work 
 .audio_inputs= 0, 
 Miguel Freitas <miguel@cetuc.puc-rio.br> 
 .audio_inputs= 0, 
 .audio_inputs= 2, 
 Bit0-2: Audio select, 8-12:remote control 14:remote valid 15:remote reset 
 ---- card 0x4c ---------------------------------- 
 Masaki Suzuki <masaki@btree.org> 
 .audio_inputs= 1, 
 .audio_inputs= 0, 
 .audio_inputs= 3, 
 Tuner, SVid, SVHS, SVid to SVHS connector 
		.gpiomux        = { 0, 0, 4, 4 }, Yes, this tuner uses the same audio output for TV and FM radio!
						 This card lacks external Audio In, so we mute it on Ext. & Int.
						 The PCB can take a sbx1637sbx1673, wiring unknown.
						 This card lacks PCI subsystem ID, sigh.
						 gpiomux =1: lower volume, 2+3: mute
						 btwincap uses 0x800000x80003
		 Samsung TCPA9095PC27A (BG+DK), philips compatible, wFM, stereo and
		 GPIO Info:
			GPIO0,1:   HEF4052 A0,A1
			GPIO2:     HEF4052 nENABLE
			GPIO3-7:   n.c.
			GPIO8-13:  IRDC357 data0-5 (data6 n.c. ?) [chip not present on my card]
			GPIO14,15: ??
			GPIO16-21: n.c.
			GPIO22,23: ??
 Arthur Tetzlaff-Deas, DSP Design Ltd <software@dspdesign.com> 
 ---- card 0x50 ---------------------------------- 
 .audio_inputs= 1, 
 .audio_inputs= 1, 
 0x1(2|3)-45C6-C1 
 id-inputs-clock 
 .audio_inputs= 0, 
 0x04-54C0-C1 & older boards 
 .audio_inputs= 0, 
 ---- card 0x54 ---------------------------------- 
 0x05-40C0-C1 
 .audio_inputs= 0, 
 0x1(4|5)-0004-C4 
 .audio_inputs= 0, 
 0x(16|17|20)-00C4-C1 
 .audio_inputs= 0, 
 0x1(8|9|E|F)-0004-C4 
 .audio_inputs= 1, 
 ---- card 0x58 ---------------------------------- 
 0x1(A|B)-00C4-C1 
 .audio_inputs= 1, 
 0x1(A|B)-04C0-C1 
 .audio_inputs= 1, 
 500 
 .audio_inputs= 1, 
 540 
 .audio_inputs= 1, 
 ---- card 0x5C ---------------------------------- 
 2000 
 .audio_inputs= 1, 
 must avoid, conflicts with the bt860 
 M G Berberich <berberic@forwiss.uni-passau.de> 
 .audio_inputs= 0, 
 .audio_inputs= 0, 
 .audio_inputs= 1, 
 TV, Comp1, Composite over SVID con, SVID 
	 sound routing:
		GPIO=0x00,0x01,0x03: mute (?)
		0x02: both TV and radio (tuner: FM1216I)
		The card has onboard audio connectors labeled "cdrom" and "board",
		not soldered here, though unknown wiring.
		Card lacks: external audio in, pci subsystem id.
 ---- card 0x60 ---------------------------------- 
 .audio_inputs= 1, 
 .audio_inputs= 0, 
 Luc Van Hoeylandt <luc@e-magic.be> 
 0x4f 
 .audio_inputs= 0, 
 Hiroshi Takekawa <sian@big.or.jp> 
 This card lacks subsystem ID 
 0x63 
 .audio_inputs= 1, 
                  Tuner, Radio, external, internal, off,  on 
 ---- card 0x64 ---------------------------------- 
 .audio_inputs= 1, 
		 Notes:
		- card lacks subsystem ID
		- stereo variant w daughter board with tda9874a @0xb0
		- Audio Routing:
			always from tda9874 independent of GPIO (?)
			external line in: unknown
		- Other chips: em78p156elp @ 0x96 (probably IR remote control)
			hef4053 (instead 4052) for unknown function
 .audio_inputs= 1, 
 Tuner, CVid, SVid, CVid over SVid connector 
		 Bt878, Bt832, FI1246 tuner; no pci subsystem id
		only internal line out: (4pin header) RGGL
		
		.digital_mode   = DIGITAL_MODE_CAMERA,  todo!
 Chris Willing <chris@vislab.usyd.edu.au> 
 .audio_inputs= 0, 
 .audio_inputs= 0, 
 .audio_inputs= 0, 
 ---- card 0x68 ---------------------------------- 
 Jorge Boncompte - DTI2 <jorge@dti2.net> 
 .audio_inputs= 0, 
 M.Klahr@phytec.de 
 .audio_inputs= 0, 
 card has no audio 
 .audio_inputs= 0, 
 card has no audio 
 ---- card 0x6c ---------------------------------- 
 .audio_inputs= 0, 
 used for external video mux 
 card has no audio 
 .audio_inputs= 0, 
 used for external video mux 
 card has no audio 
 .audio_inputs= 0, 
 IVC-120G - Alan Garfield <alan@fromorbit.com> 
 .audio_inputs= 0, 
 card has no svhs 
 ---- card 0x70 ---------------------------------- 
 .audio_inputs= 1, 
 .audio_inputs= 0, 
 Vid In, SVid In, Vid over SVid in connector 
 .audio_inputs= 1, 
 ---- card 0x74 ---------------------------------- 
 .audio_inputs= 0, 
 Carlos Silva r3pek@r3pek.homelinux.org || card 0x75 
linuxmedialabs.com 
 IN1,IN2,IN3,IN4 
 .audio_inputs= 0, 
 Helmroos Harri <harri.helmroos@pp.inet.fi> 
 .audio_inputs= 1, 
 ---- card 0x78 ---------------------------------- 
 Javier Cendan Ares <jcendan@lycos.es> 
 bt878 TV + FM without subsystem ID 
 .audio_inputs= 1, 
Eric DEBIEF <debief@telemsa.com>
EURESYS Picolo Tetra : 4 Conexant Fusion 878A, no audio, video input set with analog multiplexers GPIO controlled
adds picolo_tetra_muxsel(), picolo_tetra_init(), the following declaration
structure and #define BTTV_BOARD_PICOLO_TETRA_CHIP 0x79 in bttv.h
 .audio_inputs= 0, 
Set the GPIO[18]->GPIO[21] as output pin.==> drive the video inputs through analog multiplexers
878A input is always MUX0, see above.
 card has no audio 
Required as it doesn't follow the classic input selection policy
spiritmodems.com.au 
 Stafford Goodsell <surge@goliath.homeunix.org> 
 .audio_inputs= 1, 
 Wolfram Joost <wojo@frokaschwei.de> 
 ---- card 0x7c ---------------------------------- 
 Matt Jesson <dvb@jesson.eclipse.co.uk> 
 Based on the Nebula card data - added remote and new card number - BTTV_BOARD_AVDVBT_761, see also ir-kbd-gpio.c 
 Comp0, S-Video, ?, ? 
 andre.schwarz@matrix-vision.de 
 .audio_inputs= 0, 
 andre.schwarz@matrix-vision.de 
 .audio_inputs= 0, 
 BTTV_BOARD_APAC_VIEWCOMP 
 Attila Kondoros <attila.kondoros@chello.hu> 
 bt878 TV + FM 0x00000000 subsystem ID 
 .audio_inputs= 1, 
 miniremote works, see ir-kbd-gpio.c 
 not every card has radio 
 ---- card 0x80 ---------------------------------- 
 Chris Pascoe <c.pascoe@itee.uq.edu.au> 
 Steven <photon38@pchome.com.tw> 
 .audio_inputs= 1, 
 Rick C <cryptdragoon@gmail.com> 
 .audio_inputs= 1, 
 Chris Fanning <video4linux@haydon.net> 
 .audio_inputs= 0, 
 Bill Brack <wbrack@mmm.com.hk> 
		
		 Note that, because of the card's wiring, the "master"
		 BT878A chip (i.e. the one which controls the analog switch
		 and must use this card type) is the 2nd one detected.  The
		 other 3 chips should use card type 0x85, whose description
		 follows this one.  There is a EEPROM on the card (which is
		 connected to the I2C of one of those other chips), but is
		 not currently handled.  There is also a facility for a
		 "monitor", which is also not currently implemented.
 .audio_inputs= 0, 
		 GPIO bits 0-9 used for analog switch:
		   00 - 03:	camera selector
		   04 - 06:	channel (controller) selector
		   07:	data (1->on, 0->off)
		   08:	strobe
		   09:	reset
		 bit 16 is input from sync separator for the channel
 Bill Brack <wbrack@mmm.com.hk> 
		 Note that, for reasons unknown, the "master" BT878A chip (i.e. the
		 one which controls the analog switch, and must use the card type)
		 is the 2nd one detected.  The other 3 chips should use this card
		 type
 .audio_inputs= 0, 
 ---- card 0x86---------------------------------- 
 Michael Henson <mhenson@clarityvi.com> 
 Adlink RTV24 with special unlock codes 
 .audio_inputs= 1, 
 ---- card 0x87---------------------------------- 
 Michael Krufky <mkrufky@linuxtv.org> 
 TDVS-H064F 
 .audio_inputs= 1, 
 ---- card 0x88---------------------------------- 
 Mauro Carvalho Chehab <mchehab@kernel.org> 
 .audio_inputs= 1, 
 ---- card 0x89 ---------------------------------- 
 .audio_inputs= 1, 
 ---- card 0x8a ---------------------------------- 
 .audio_inputs= 1, 
 in 4 is digital 
 .digital_mode= DIGITAL_MODE_CAMERA, 
 ---- card 0x8b ---------------------------------- 
 Sérgio Fortier <sergiofortier@yahoo.com.br> 
 .audio_inputs= 1, 
 ---- card 0x8c ---------------------------------- 
	 Has four Bt878 chips behind a PCI bridge, each chip has:
	     one external BNC composite input (mux 2)
	     three internal composite inputs (unknown muxes)
	     an 18-bit stereo AD (CS5331A), which has:
	       one external stereo unbalanced (RCA) audio connection
	       one (or 3?) internal stereo balanced (XLR) audio connection
	       input is selected via gpio to a 14052B mux
		 (mask=0x300, unbal=0x000, bal=0x100, ??=0x200,0x300)
	       gain is controlled via an X9221A chip on the I2C bus @0x28
	       sample rate is controlled via gpio to an MK1413S
		 (mask=0x3, 32kHz=0x0, 44.1kHz=0x1, 48kHz=0x2, ??=0x3)
 .audio_inputs= 2, 
 3,0,1 are guesses 
 int + 32kHz 
 ---- card 0x8d ---------------------------------- 
 .audio_inputs= 1, 
 ---- card 0x8e ---------------------------------- 
 .audio_inputs= 1, 
 ---- card 0x8f ---------------------------------- 
 .audio_inputs= 0, 
 old: 7 
 Composite 0-3 
		 Julian Calaby <julian.calaby@gmail.com>
		  Slightly different from original MachTV definition (0x60)
		  FIXME: RegSpy says gpiomask should be "0x001c800f", but it
		  stuffs up remote chip. Bug is a pin on the jaecs is not set
 rebranded MachTV 
 .audio_inputs= 1, 
 .audio_inputs= 0, 
 .audio_inputs= 0, 
 ---- card 0x94---------------------------------- 
 .audio_inputs= 1, 
 ---- card 0x95---------------------------------- 
 .audio_inputs= 1, 
 emhn@usb.ve 
 .audio_inputs= 0, 
		 Mauro Lacy <mauro@lacy.com.ar>
 .audio_inputs= 1, 
 CONTVFMi 
 CONTVFMi 
 TCL MK3 
		 Encore TV Tuner Pro ENL TV-FM-2
 .audio_inputs= 1, 
		 bit 6          -> IR disabled
		   bit 1817 = 00 -> mute
			       01 -> enable external audio input
			       10 -> internal audio input (mono?)
			       11 -> internal audio input
 D.Heer@Phytec.de 
 .audio_inputs= 0, 
 card has no audio 
 D.Heer@Phytec.de 
 .audio_inputs= 0, 
 card has no audio 
 D.Heer@Phytec.de 
 .audio_inputs= 0, 
 card has no audio 
		 Bruno Christo <bchristo@inf.ufsm.br>
		 
		  GeoVision GV-800(S) has 4 Conexant Fusion 878A:
		 	1 audio input  per BT878A = 4 audio inputs
		 	4 video inputs per BT878A = 16 video inputs
		  This is the first BT878A chip of the GV-800(S). It's the
		  "master" chip and it controls the video inputs through an
		  analog multiplexer (a CD22M3494) via some GPIO pins. The
		  slaves should use card type 0x9e (following this one).
		  There is a EEPROM on the card which is currently not handled.
		  The audio input is not working yet.
 .audio_inputs= 1, 
		 Bruno Christo <bchristo@inf.ufsm.br>
		 
		  GeoVision GV-800(S) has 4 Conexant Fusion 878A:
		 	1 audio input  per BT878A = 4 audio inputs
		 	4 video inputs per BT878A = 16 video inputs
		  The 3 other BT878A chips are "slave" chips of the GV-800(S)
		  and should use this card type.
		  The audio input is not working yet.
 .audio_inputs= 1, 
 0x9f 
 .audio_inputs= 0, 
 ---- card 0xa0---------------------------------- 
 Adlink MPG24 
 .audio_inputs= 1, 
 .audio_inputs= 0, 
 Pojar George <geoubuntu@gmail.com> 
 .audio_inputs= 1, 
 ---- card 0xa6---------------------------------- 
 PCI-8604PW with special unlock sequence 
 .audio_inputs= 0, 
		 The second input is available on CN4, if populated.
		  The other 5x2 header (CN2?) connects to the same inputs
 ----------------------------------------------------------------------- 
  identify card
 read PCI subsystem ID 
 look for the card 
 found it 
 404 
 let the user override the autodetected type 
 print which card config we are using 
 overwrite gpio stuff ?? 
  (most) board specific initialisations goes here
 Some Modular Technology cards have an eeprom, but no subsystem ID 
 old bt848 
 without this we would see the 0x1800 mask 
 FIXME: must restore OUR_EN ??? 
	 all cards provide GPIO info, some have an additional eeprom
	  LR50: GPIO coding can be found lower right CP1 .. CP9
	        CP9=GPIO23 .. CP1=GPIO15; when OPEN, the corresponding GPIO reads 1.
	        GPIO14-12: n.c.
	  LR90: GP9=GPIO23 .. GP1=GPIO15 (right above the bt878)
	  lowest 3 bytes are remote control codes (no handshake needed)
	  xxxFFF: No remote control chip soldered
	  xxxF00(LR26LR50), xxxFE0(LR90): Remote control chip (LVA001 or CF45) soldered
	  Note: Some bits are Audio_Mask !
 NTSC, e.g. TPI8NSR11P 
 LG NTSC (newer TAPC series) TAPC-H701P 
 Philips PAL TPI8PSB02P, TPI8PSB12P, TPI8PSB12D or FI1216, FM1216 
 LG PAL (newer TAPC series) TAPC-G702P 
 Philips SECAM(+PAL) FQ1216ME or FI1216MF 
	   unknown                   0x200000;
 GPIO15 
 else LR26LR50 (LR38LR51 f. capture only) 
	
 No tuner present 
 only set if known tuner autodetected, else let insmod option through 
	 LR90 Audio Routing is done by 2 hef4052, so Audio_Mask has 4 bits: 0x001c80
	  LR26LR50 only has 1 hef4052, Audio_Mask 0x000c00
 todo: if(has_tda9874) btv->audio_mode_gpio = fv2000s_audio; 
 new cards with microtune tuner 
 GPIO21   L: Buffer aktiv, H: Buffer inaktiv 
 flash strobe inverter ?! 
 switch sync drive off 
 set BT848 muxel to 2 
 Muxsel helper for the IDS Eagle.
  the eagles does not use the standard muxsel-bits but
 composite 
 set chroma ADC to sleep 
 set to composite video 
 switch sync drive off 
 LMLBT4x initialization - to allow access to GPIO bits for sensors input and
   alarms output
   GPIObit    | 10 | 9 | 8 | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |
   assignment | TI | O3|INx| O2| O1|IN4|IN3|IN2|IN1|   |   |
   IN - sensor inputs, INx - sensor inputs and TI XORed together
   O1,O2,O3 - alarm outputs (relays)
   OUT ENABLE   1    1   0  . 1  1   0   0 . 0   0   0    0   = 0x6C0
  The TD3116 has 2 74HC4051 muxes wired to the MUX0 input of a bt878.
  The first 74HC4051 has the lower 8 inputs, the second one the higher 8.
  The muxes are controlled via a 74HC373 latch which is connected to
  GPIOs 0-7. GPIO 18 is connected to the LE signal of the latch.
  Q0 of the latch is connected to the Enable (~E) input of the first
  74HC4051. Q1 - Q3 are connected to S0 - S2 of the same 74HC4051.
  Q4 - Q7 are connected to the second 74HC4051 in the same way.
 Disable outputs and set value in the mux 
 Disable outputs 
 Enable the correct output 
 ----------------------------------------------------------------------- 
	
	  BT878A has a audio-reset register.
	  1. This register is an audio reset function but it is in
	     function-0 (video capture) address space.
	  2. It is enough to do this once per power-up of the card.
	  3. There is a typo in the Conexant doc -- it is not at
	     0x5B, but at 0x058. (B is an odd-number, obviously a typo!).
	  --Shrikumar 030609
 initialization part one -- before registering i2c bus 
 initialization part two -- after registering i2c bus 
 miropinnacle 
 pick up some config infos from the eeprom 
			 Fix up entry for 3DFX VoodooTV 100,
 pll configuration 
 defaults from card list 
 insmod options can override 
 none 
 28 MHz 
 35 MHz 
 14 MHz 
 tuner configuration (from card list  autodetect  insmod option) 
 no tuner or related drivers to load 
 Probe for RDS receiver chip 
 try to detect audiofader chips 
	 First check if the user specified the audio chip via a module
 do not load any audio module 
 autodetect 
 The user specified that we should probe for msp3400 
 The user specified that we should probe for tda7432 
 The user specified that we should probe for tvaudio 
	 There were no overrides, so now we try to discover this through the
	 probe for msp3400 first: this driver can detect whether or not
	   it really is a msp3400, so it will return NULL when the device
 If we found a msp34xx, then we're done. 
 Now see if we can find one of the tvaudio devices. 
		 There may be two tvaudio chips on the card, so try to
 it might also be a tda7432. 
 initialize the tuner 
 Load tuner module before issuing tuner config call! 
 ----------------------------------------------------------------------- 
	
	  Some of the 878 boards have duplicate PCI IDs. Switch the board
	  type based on model #.
 The 61334 needs the msp3410 to do the radio demod to get sound 
 ----------------------------------------------------------------------- 
 IOW and CSEL active 
 all inactive 
 IOR and CSEL active 
 all inactive 
 ----------------------------------------------------------------------- 
 ----------------------------------------------------------------------- 
  minimal bootstrap for the WinTVPVR -- upload altera firmware.
  The hcwamc.rbf firmware file is on the Hauppauge driver CD.  Have
  a look at Pvrpvr45xxx.EXE (self-extracting zip archive, can be
  unpacked with unzip).
 begin Altera init loop (Not necessary,but doesn't hurt) 
 ----------------------------------------------------------------------- 
 some osprey specific stuff                                              
 This code will never actually get called in this case.... 
 this might be an antique... check for MMAC label in eeprom 
 found a valid descriptor 
 848 based 
 878 based 
 bttv_osprey_540_init(btv); 
 enable output on select control lines 
 unknown...leave generic, but get serial # 
 card type isn't set correctly 
 ----------------------------------------------------------------------- 
 AVermedia specific stuff, from  bktr_card.c                             
 PAL-BG,
 PAL-I,
 TUNER_TEMIC_SECAM 
 TAPC-G702P 
  For Voodoo TVFM and Voodoo 200.  These cards' tuners use a TDA9880
  analog demod, which is not I2C controlled like the newer and more common
  TDA9887 series.  Instead it has two tri-state input pins, S0 and S1,
  that control the IF for the video and audio.  Apparently, bttv GPIO
  0x10000 is connected to S0.  S0 low selects a 38.9 MHz VIF for BGDKI
  (i.e., PAL) while high selects 45.75 MHz for MN (i.e., NTSC).
  resetenable the MSP on some Hauppauge cards
  Thanks to Kyösti Mälkki (kmalkki@cc.hut.fi)!
  Hauppauge:  pin  5
  Voodoo:     pin 20
 ----------------------------------------------------------------------- 
  Imagenation L-Model PXC200 Framegrabber 
  This is basically the same procedure as
   used by Alessandro Rubini in his pxc200
 Initialise GPIO-connected stuff 
	 GPIO inputs are pulled up, so no need to drive
	  we couldshould try and resetcontrol the AD pots? but
	    right now  we simply  turned off the crushing.  Without
	    this the AGC drifts drifts
	    remember the EN is reverse logic -->
	    setting BT848_ADC_AGC_EN disable the AGC
	    tboult@eecs.lehigh.edu
	Initialise MAX517 DAC 
	Initialise 12C508 PIC 
		The I2CWrite and I2CRead commands are actually to the
	 	same chips - but the RW bit is included in the address
 First of all, enable the clock line. This is used in the PXC200-F 
	 Then, push to 0 the reset pin long enough to reset the 
	  device same as above for the reset line, but not the same
	  value sent to the GPIO-connected stuff
 ----------------------------------------------------------------------- 
   The Adlink RTV-24 (aka Angelo) has some special initialisation to unlock
   it. This apparently involves the following procedure for each 878 chip:
   1) write 0x00C3FEFF to the GPIO_OUT_EN register
   2)  write to GPIO_DATA
       - 0x0E
       - sleep 1ms
       - 0x10 + 0x0E
       - sleep 10ms
       - 0x0E
      read from GPIO_DATA into buf (uint_32)
       - if ( data>>18 & 0x01 != 0) || ( buf>>19 & 0x01 != 1 )
                  error. ERROR_CPLD_Check_Failed stop.
   3) write to GPIO_DATA
       - write 0x4400 + 0x0E
       - sleep 10ms
       - write 0x4410 + 0x0E
       - sleep 1ms
       - write 0x0E
      read from GPIO_DATA into buf (uint_32)
       - if ( buf>>18 & 0x01 ) || ( buf>>19 & 0x01 != 0 )
                 error. ERROR_CPLD_Check_Failed.
 ----------------------------------------------------------------------- 
 ----------------------------------------------------------------------- 
   The PCI-8604PW contains a CPLD, probably an ispMACH 4A, that filters
   the PCI REQ signals coming from the four BT878 chips. After power
   up, the CPLD does not forward requests to the bus, which prevents
   the BT878 from fetching RISC instructions from memory. While the
   CPLD is connected to most of the GPIOs of PCI device 0xD, only
   five appear to play a role in unlocking the REQ signal. The following
   sequence has been determined by trial and error without access to the
   original driver.
   Eight GPIOs of device 0xC are provided on connector CN4 (4 in, 4 out).
   Devices 0xE and 0xF do not appear to have anything connected to their
   GPIOs.
   The correct GPIO_OUT_EN value might have some more bits set. It should
   be possible to derive it from a boundary scan of the CPLD. Its JTAG
   pins are routed to test points.
 ----------------------------------------------------------------------- 
			 FIXME: If we are in state 7 and toggle GPIO[19] one
			   more time, the CPLD goes into state 0, where PCI bus
			   mastering is inhibited again. We have not managed to
		 The transition from state 7 to state 0 is, as explained
		   above, valid but undesired and with this code impossible
		   as we exit as soon as we are in state 7.
 RemoteVision MX (rv605) muxsel helper [Miguel Freitas]
  This is needed because rv605 don't use a normal multiplex, but a crosspoint
  switch instead (CD22M3494E). This IC can have multiple active connections
  between Xn (input) and Yn (output) pins. We need to clear any existing
  connection prior to establish a new one, pulsing the STROBE pin.
  The board hardwire Y0 (xpoint) to MUX1 and MUXOUT to Yin.
  GPIO pins are wired as:
   GPIO[0:3] - AX[0:3] (xpoint) - P1[0:3] (microcontroller)
   GPIO[4:6] - AY[0:2] (xpoint) - P1[4:6] (microcontroller)
   GPIO[7]   - DATA (xpoint)    - P1[7] (microcontroller)
   GPIO[8]   -                  - P3[5] (microcontroller)
   GPIO[9]   - RESET (xpoint)   - P3[6] (microcontroller)
   GPIO[10]  - STROBE (xpoint)  - P3[7] (microcontroller)
   GPINTR    -                  - P3[4] (microcontroller)
  The microcontroller is a 80C32 like. It should be possible to change xpoint
  configuration either directly (as we are doing) or using the microcontroller
  which is also wired to I2C interface. I have no further info on the
  microcontroller features, one would need to disassembly the firmware.
  note: the vendor refused to give any information on this product, all
        that stuff was found using a multimeter! :)
 reset all connections 
 create a new connection 
 Tibet Systems 'Progress DVR' CS16 muxsel helper [Chris Fanning]
  The CS16 (available on eBay cheap) is a PCI board with four Fusion
  878A chips, a PCI bridge, an Atmel microcontroller, four sync separator
  chips, ten eight input analog multiplexors, a not chip and a few
  other components.
  16 inputs on a secondary bracket are provided and can be selected
  from each of the four capture chips.  Two of the eight input
  multiplexors are used to select from any of the 16 input signals.
  Unsupported hardware capabilities:
   . A video output monitor on the secondary bracket can be selected from
     one of the 878A chips.
   . Another passthrough but I haven't spent any time investigating it.
   . Digital IO (logic level connected to GPIO) is available from an
     onboard header.
  The on chip input mux should always be set to 2.
  GPIO[16:19] - Video input selection
  GPIO[0:3]   - Video output monitor select (only available from one 878A)
  GPIO[?:?]   - Digital IO.
  There is an ATMEL microcontroller with an 8031 core on board.  I have not
  determined what function (if any) it provides.  With the microcontroller
  and sync separator chips a guess is that it might have to do with video
  switching and maybe some digital IO.
 video mux 
 enable gpio bits, mask obtained via btSpy 
  The following routines for the Kodicom-4400r get a little mind-twisting.
  There is a "master" controller and three "slave" controllers, together
  an analog switch which connects any of 16 cameras to any of the BT87A's.
  The analog switch is controlled by the "master", but the detection order
  of the four BT878A chips is in an order which I just don't understand.
  The "master" is actually the second controller to be detected.  The
  logic on the board uses logical numbers for the 4 controllers, but
  those numbers are different from the detection sequence.  When working
  with the analog switch, we need to "map" from the detection sequence
  over to the board's logical controller number.  This mapping sequence
  is {3, 0, 2, 1}, i.e. the first controller to be detected is logical
  unit 3, the second (which is the master) is logical unit 0, etc.
  We need to maintain the status of the analog switch (which of the 16
  cameras is connected to which of the 4 controllers) in sw_status array.
  First a routine to set the analog switch, which controls which camera
  is routed to which controller.  The switch comprises an X-address
  (gpio bits 0-3, representing the camera, ranging from 0-15), and a
  Y-address (gpio bits 4-6, representing the controller, ranging from 0-3).
  A data value (gpio bit 7) of '1' enables the switch, and '0' disables
  the switch.  A STROBE bit (gpio bit 8) latches the data value into the
  specified address.  The idea is to set the address and data, then bring
  STROBE high, and finally bring STROBE back to low.
 write ADDR and DAT 
 strobe high 
 strobe low 
  Next the mux select.  Both the "master" and "slave" 'cards' (controllers)
  use this routine.  The routine finds the "master" for the card, maps
  the controller number from the detected position over to the logical
  number, writes the appropriate data to the analog switch, and housekeeps
  the local copy of the switch information.  The parameter 'input' is the
  requested camera number (0 - 15).
 ignore if master not yet detected 
 the '&' is for safety 
 Check if the controllercamera pair has changed, else ignore 
 "open" the old switch, "close" the new one, save the new 
  During initialisation, we need to reset the analog switch.  We
  also preset the switch to map the 4 connectors on the card to the
  user's (see above description of kodicom4400r_muxsel) channels
  0 through 3
 reset MUX 
 Preset camera 0 to the 4 controllers 
	
	  Since this is the "master", we need to set up the
	  other three controller chips' pointers to this structure
	  for later use in the muxsel routine.
 The Grandtec X-Guard framegrabber card uses two Dual 4-channel
  video multiplexers to provide up to 16 video inputs. These
  multiplexers are controlled by the lower 8 GPIO pins of the
  bt878. The multiplexers probably Pericom PI5V331Q or similar.
  xxx0 is pin xxx of multiplexer U5,
  yyy1 is pin yyy of multiplexer U2
This is the video input redirection functionality : I DID NOT USE IT. 
GPIO[19] [==> 4053 B+C] set to 1 
GPIO[18] [==> 4053 A]  set to 1
Just set the right path in the analog multiplexers : channel 1 -> 4 ==> Analog Mux ==> MUX0
GPIO[20]&GPIO[21] used to choose the right input
  ivc120_muxsel [Added by Alan Garfield <alan@fromorbit.com>]
  The IVC120G security card has 4 i2c controlled TDA8540 matrix
  switchers to provide 16 channels to MUX0. The TDA8540's have
  4 independent outputs and as such the IVC120G also has the
  optional "Monitor Out" bus. This allows the card to be looking
  at one input while the monitor is looking at another.
  Since I've couldn't be bothered figuring out how to add an
  independent muxsel for the monitor bus, I've just set it to
  whatever the card is looking at.
   OUT0 of the TDA8540's is connected to MUX0         (0x03)
   OUT1 of the TDA8540's is connected to "Monitor Out"        (0x0C)
   TDA8540_ALT3 IN0-3 = Channel 13 - 16       (0x03)
   TDA8540_ALT4 IN0-3 = Channel 1 - 4         (0x03)
   TDA8540_ALT5 IN0-3 = Channel 5 - 8         (0x03)
   TDA8540_ALT6 IN0-3 = Channel 9 - 12                (0x03)
 All 7 possible sub-ids for the TDA8540 Matrix Switcher 
 Simple maths 
 Handles the input selection on the TDA8540's 
 Handles the output enables on the TDA8540's 
 13 - 16 
 1-4 
 5-8 
 9-12 
 878's MUX0 is already selected for input via muxsel values 
 PXC200 muxsel helper
  luke@syseng.anu.edu.au
  another transplant
  from Alessandro Rubini (rubini@linux.it)
  There are 4 kinds of cards:
  PXC200L which is bt848
  PXC200F which is bt848 with PIC controlling mux
  PXC200AL which is bt878
  PXC200AF which is bt878 with PIC controlling mux
 a pxc200A is bt-878 based 
 Read PIC config to determine if this is a PXC200F 
 PX_I2C_CMD_CFG
 not PXC ? do nothing 
 The multiplexer in the 200F is handled by the GPIO port 
 get correct mapping between inputs  
  mux = bttv_tvcards[btv->type].muxsel[input] & 3; 
  not needed!?   
 make sure output pins are enabled 
 bitmask=0x30f; 
 check whether we have a PXC200A 
 use 7 and 9, not 8 and 9 
 the DAC 
 older device 
	
	  Was "to be safe, set the bt848 to input 0"
	  Actually, since it's ok at load time, better not messing
	  with these bits (on PXC200AF you need to set mux 2 here)
	 
	  needed because bttv-driver sets mux before calling this function
 older device 
  GeoVision GV-800(S) functions
  Bruno Christo <bchristo@inf.ufsm.br>
 This is a function to control the analog switch, which determines which
  camera is routed to which controller.  The switch comprises an X-address
  (gpio bits 0-3, representing the camera, ranging from 0-15), and a
  Y-address (gpio bits 4-6, representing the controller, ranging from 0-3).
  A data value (gpio bit 18) of '1' enables the switch, and '0' disables
  the switch.  A STROBE bit (gpio bit 17) latches the data value into the
  specified address. There is also a chip select (gpio bit 16).
  The idea is to set the address and chip select together, bring
  STROBE high, write the data, and finally bring STROBE back to low.
	 On the "master" 878A:
	 GPIO bits 0-9 are used for the analog switch:
	   00 - 03:	camera selector
	   04 - 06:	878A (controller) selector
	   16:		cselect
	   17:		strobe
	   18:		data (1->on, 0->off)
	   19:		reset
 write ADDRESS and CSELECT 
 STROBE high 
 write DATA 
 STROBE low 
  GeoVision GV-800(S) muxsel
  Each of the 4 cards (controllers) use this function.
  The controller using this function selects the input through the GPIO pins
  of the "master" card. A pointer to this card is stored in master[btv->c.nr].
  The parameter 'input' is the requested camera number (0-4) on the controller.
  The map array has the address of each input. Note that the addresses in the
  array are in the sequence the original GeoVision driver uses, that is, set
  every controller to input 0, then to input 1, 2, 3, repeat. This means that
  the physical "camera 1" connector corresponds to controller 0 input 0,
  "camera 2" corresponds to controller 1 input 0, and so on.
  After getting the input address, the function then writes the appropriate
  data to the analog switch, and housekeeps the local copy of the switch
  information.
 do nothing until the "master" is detected 
 Check if the controllercamera pair has changed, ignore otherwise 
 disable the old switch, enable the new one and save status 
 GeoVision GV-800(S) "master" chip init 
 reset the analog MUX 
 Preset camera 0 to the 4 controllers 
 Inputs on the "master" controller need this brightness fix 
	
	  Store the "master" controller pointer in the master
	  array for later use in the muxsel function.
 ----------------------------------------------------------------------- 
 motherboard chipset specific stuff                                      
 should check if target is AGP 
 print warnings about any quirks found 
 bt848 (mis)uses a bit in the irq mask for etbf 
 bt878 has a bit in the pci config space for it 
 SPDX-License-Identifier: GPL-2.0-or-later
    bttv-i2c.c  --  all the i2c code is here
    bttv - Bt848 frame grabber driver
    Copyright (C) 1996,97,98 Ralph  Metzler (rjkm@thp.uni-koeln.de)
			   & Marcus Metzler (mocm@thp.uni-koeln.de)
    (c) 1999-2003 Gerd Knorr <kraxel@bytesex.org>
    (c) 2005 Mauro Carvalho Chehab <mchehab@kernel.org>
	- Multituner support and i2c address binding
 ----------------------------------------------------------------------- 
 I2C functions - bitbanging adapter (software i2c)                       
 ----------------------------------------------------------------------- 
 I2C functions - hardware i2c                                            
 timeout 
 sanity checks 
 start, address + first byte 
 following bytes 
 read 
 write 
 ----------------------------------------------------------------------- 
 I2C functions - common stuff                                            
 read I2C 
 write I2C 
 read EEPROM content 
 init + register i2c adapter 
 bt878 
 bt848 
 Prevents usage of invalid delay values 
 SPDX-License-Identifier: GPL-2.0-or-later
  Copyright (c) 2003 Gerd Knorr
  Copyright (c) 2003 Pavel Machek
 ---------------------------------------------------------------------- 
 read gpio value 
 extract data 
		 HACK: Probably, ir->mask_keydown is missing
 read gpio value 
 extract data 
 Check if it is keyup 
  FIXME: Nebula digi uses the legacy way to decode RC5, instead of relying
  on the rc-core way. As we need to be sure that both IRQ transitions are
  properly triggered, Better to touch it only with this hardware for
  testing.
 decode raw bit pattern to RC5 code 
 get time 
 avoid overflow with gap >1s 
 signal we're ready to start a new code 
 Allow some timer jitter (RC5 is ~24ms anyway so this is ok) 
 ignore spurious codes (caused by lightother remotes) 
 read gpio port 
 get time of bit 
 avoid overflow with gap >1s 
 remote IRQ? 
 active code => add bit 
		 only if in the code (otherwise spurious IRQ or timer
 starting new code 
 toggle GPIO pin 4 to reset the irq 
 ---------------------------------------------------------------------- 
 set timer_end for code completion 
  Get_key functions used by I2C remotes
 poll IR chip 
 ignore 0xaa 
	
	  NOTE:
	  lirc_i2c maps the pv951 code as:
	 	addr = 0x61D6
	 	cmd = bit_reverse (b)
	  So, it seems that this device uses NEC extended
	  I decided to not fix the table, due to two reasons:
	 	1) Without the actual device, this is only a guess;
	 	2) As the addr is not reported via I2C, nor can be changed,
	 	   the device is bound to the vendor-provided RC.
 Instantiate the I2C IR receiver device, if present 
		
		  The external IR receiver is at i2c address 0x34 (0x35 for
		  reads).  Future Hauppauge cards will have an internal
		  receiver at 0x30 (0x31 for reads).  In theory, both can be
		  fitted, and Hauppauge suggest an external overrides an
		  internal.
		  That's why we probe 0x1a (~0x34) first. CB
 detect & configure 
 ms
 ms
 ms
 ms
 ms
 ms
 ms 
 ms 
 ms 
 enable remote irq 
 init hardware-specific stuff 
 init input device 
 all done 
 SPDX-License-Identifier: GPL-2.0
  Handlers for board audio hooks, split from bttv-cards
  Copyright (c) 2006 Mauro Carvalho Chehab <mchehab@kernel.org>
 ----------------------------------------------------------------------- 
 winview                                                                 
 PT2254A programming Jon Tombs, jon@gte.esi.us.es 
 32 levels logarithmic 
 units 
 tens 
 ----------------------------------------------------------------------- 
 monostereo control for various cards (which don't use i2c chips but    
 connect something to the GPIO pins                                      
 Not much to do here 
  Mario Medina Nussbaum <medisoft@alohabbs.org.mx>
   I discover that on BT848_GPIO_DATA address a byte 0xcce enable stereo,
   0xdde enables mono and 0xccd enables sap
  Petr Vandrovec <VANDROVE@vc.cvut.cz>
   P.S.: At least mask in line above is wrong - GPIO pins 3,2 select
   inputoutput sound connection, so both must be set for output mode.
  Looks like it's needed only for the "tvphone", the "tvphone 98"
  handles this with a tda9840
 Not much to do here 
 SAP 
 Not much to do here 
 SAP 
 Lifetec 9415 handling 
 Not much to do here 
 A2 SAP 
 A2 stereo 
 TDA9821 on TerraTV+ Bt848, Bt878 
 Not much to do here 
 Not much to do here 
btor (0xc32000, BT848_GPIO_OUT_EN);
 SAP 
  Dariusz Kowalewski <darekk@automex.pl>
  sound control for Prolink PV-BT878P+9B (PixelView PlayTV Pro FM+NICAM
  revision 9B has on-board TDA9874A sound decoder).
  Note: There are card variants without tda9874a. Forcing the "stereo sound route"
        will mute this cards.
 Not much to do here 
  Dariusz Kowalewski <darekk@automex.pl>
  sound control for FlyVideo 2000S (with tda9874 decoder)
  based on pvbt878p9b_audio() - this is not tested, please fix!!!
 Not much to do here 
-dk-???: 0x0880, 0x0080, 0x1800 ... 
  sound control for Canopus WinDVR PCI
  Masaki Suzuki <masaki@btree.org>
 Not much to do here 
  sound control for AD-TVK503
  Hiroshi Takekawa <sian@big.or.jp>
 btaor(0x1e0000, ~0x1e0000, BT848_GPIO_OUT_EN); 
 Not much to do here 
 btor(, BT848_GPIO_OUT_EN); 
 SPDX-License-Identifier: GPL-2.0-or-later
  bt878.c: part of the driver for the Pinnacle PCTV Sat DVB PCI card
  Copyright (C) 2002 Peter Hettkamp <peter.hettkamp@htp-tel.de>
  large parts based on the bttv driver
  Copyright (C) 1996,97,98 Ralph  Metzler (rjkm@metzlerbros.de)
                         & Marcus Metzler (mocm@metzlerbros.de)
  (c) 1999,2000 Gerd Knorr <kraxel@goldbach.in-berlin.de>
 Miscellaneous utility  definitions 
 RISC instructions 
 RISC bits 
 At the beginning of every block we issue an IRQ with previous (finished) block number set
 StartStop grabbing funcs 
	 complete the writing of the risc dma program now we have
	  the card specifics
	 original int mask had :
	     6    2    8    4    0
	  1111 1111 1000 0000 0000
	  SCERR|OCERR|PABORT|RIPERR|FDSR|FTRGT|FBUS|RISCI
	  Hacked for DST to:
	  SCERR | OCERR | FDSR | FTRGT | FBUS | RISCI
 ignore pesky bits 
 Interrupt service routine 
 this interrupt is not for me 
		dprintk("bt878(%d) debug: irq count %d, stat 0x%8.8x, mask 0x%8.8x\n",bt->nr,count,stat,mask); 
 try to clear interrupt condition 
 special gpio signal 
 dprintk("dvb_bt8xx: dst enable mask 0x%02x enb 0x%02x \n", mp->dstg.enb.mask, mp->dstg.enb.enable);
 dprintk("dvb_bt8xx: dst write gpio mask 0x%02x out 0x%02x\n", mp->dstg.outp.mask, mp->dstg.outp.highvals);
 read 
 dprintk("dvb_bt8xx: dst read gpio 0x%02x\n", (unsigned)mp->dstg.rd.value);
 Set packet size 
 PCI device handling 
 clear interrupt mask 
 turn off all capturing, DMA and IRQs 
 first disable interrupts before unmapping the memory! 
 disable PCI bus-mastering 
 Should this be &=~ ?? 
	 wake up any waiting processes
	   because shutdown flag is set, no new processes (in this queue)
	   are expected
 Module management functions 
 SPDX-License-Identifier: GPL-2.0-or-later
    bttv - Bt848 frame grabber driver
    Copyright (C) 1996,97,98 Ralph  Metzler <rjkm@thp.uni-koeln.de>
			   & Marcus Metzler <mocm@thp.uni-koeln.de>
    (c) 1999-2002 Gerd Knorr <kraxel@bytesex.org>
    some v4l2 code lines are taken from Justin's bttv2 driver which is
    (c) 2000 Justin Schoeman <justin@suntiger.ee.up.ac.za>
    V4L1 removal from:
    (c) 2005-2006 Nickolay V. Shmyrev <nshmyrev@yandex.ru>
    Fixes to be fully V4L2 compliant by
    (c) 2006 Mauro Carvalho Chehab <mchehab@kernel.org>
    Cropping and overscan support
    Copyright (C) 2005, 2006 Michael H. Schimek <mschimek@gmx.at>
    Sponsored by OPQ Systems AB
 number of Bt848s in use 
 config variables 
 options 
 API features (turn onoff stuff for testing) 
 insmod args 
 ----------------------------------------------------------------------- 
 sysfs                                                                   
 ----------------------------------------------------------------------- 
 dvb auto-load setup                                                     
 CONFIG_MODULES 
 ----------------------------------------------------------------------- 
 static data                                                             
 special timing tables from conexant... 
 PAL digital input over GPIO[7:0] 
 45 bytes following
 NTSC digital input over GPIO[7:0] 
 51 bytes following
 TGB_NTSC392 
 This table has been modified to be used for Fusion Rev D
 size of table = 42
 minhdelayx1	first video pixel we can capture on a line and
   hdelayx1	start of active video, both relative to rising edge of
		HRESET pulse (0H) in 1  fCLKx1.
   swidth	width of active video and
   totalwidth	total line width, both in 1  fCLKx1.
   sqwidth	total line width in square pixels.
   vdelay	start of active video in 2  field lines relative to
		trailing edge of VRESET pulse (VDELAY register).
   sheight	height of active video in 2  field lines.
   extraheight	Added to sheight for cropcap.bounds.height only
   videostart0	ITU-R frame line number of the line corresponding
  2 because vertically we count field lines times two, 	 \
 e.g. 23  2 to 23  2 + 576 in PAL-BGHI defrect. 		 \
 4 is a safety margin at the end of the line. 		 \
 PAL-BDGHI 
 max. active video is actually 922, but 924 is divisible by 4 and 3! 
 actually, max active PAL with HSCALE=0 is 948, NTSC is 768 - nil 
 min (2048  4, 0x1ff) & 0xff 
		 ITU-R frame line number of the first VBI line
		   we can capture, of the first and second field.
 minhdelayx1  68,
 hdelayx1  186,
			 Should be (768  1135 + 944  2)  944.
			   cropcap.defrect is used for image width
 swidth  924,
 totalwidth  1135,
 sqwidth  944,
 vdelay  0x20,
 sheight  576,
			 bt878 (and bt848?) can capture another
 extraheight  2,
 videostart0  23)
 min (1600  4, 0x1ff) & 0xff 
 minhdelayx1  68,
 hdelayx1  128,
 Should be (640  910 + 780  2)  780? 
 swidth  768,
 totalwidth  910,
 sqwidth  780,
 vdelay  0x1a,
 sheight  480,
 extraheight  0,
 videostart0  23)
 like PAL, correct? 
 minhdelayx1  68,
 hdelayx1  186,
 swidth  924,
 totalwidth  1135,
 sqwidth  944,
 vdelay  0x20,
 sheight  576,
 extraheight  0,
 videostart0  23)
 minhdelayx1  68,
 hdelayx1  130,
 swidth  (640  910 + 780  2)  780,
 totalwidth  910,
 sqwidth  780,
 vdelay  0x1a,
 sheight  576,
 extraheight  0,
 videostart0  23)
 minhdelayx1  68,
 hdelayx1  135,
 swidth  (640  910 + 780  2)  780,
 totalwidth  910,
 sqwidth  780,
 vdelay  0x1a,
 sheight  480,
 extraheight  0,
 videostart0  23)
 minhdelayx1  68,
 hdelayx1  186,
 swidth  (768  1135 + 944  2)  944,
 totalwidth  1135,
 sqwidth  944,
 vdelay  0x20,
 sheight  576,
 extraheight  0,
 videostart0  23)
 minhdelayx1  68,
 hdelayx1  135,
 swidth  (640  910 + 780  2)  780,
 totalwidth  910,
 sqwidth  780,
 vdelay  0x16,
 sheight  480,
 extraheight  0,
 videostart0  23)
		 that one hopefully works with the strange timing
		  which video recorders produce when playing a NTSC
 minhdelayx1  68,
 hdelayx1  186,
 swidth  924,
 totalwidth  1135,
 sqwidth  944,
 vdelay  0x1a,
 sheight  480,
 extraheight  0,
 videostart0  23)
 ----------------------------------------------------------------------- 
 bttv format list
 byteswap 
 byteswap 
 byte+word swap 
 byteswap 
 ----------------------------------------------------------------------- 
 resource management                                                     
   RESOURCE_    allocated by                freed by
   VIDEO_READ   bttv_read 1)                bttv_read 2)
   VIDEO_STREAM VIDIOC_STREAMON             VIDIOC_STREAMOFF
		 VIDIOC_QBUF 1)              bttv_release
		 VIDIOCMCAPTURE 1)
   OVERLAY	 VIDIOCCAPTURE on            VIDIOCCAPTURE off
		 VIDIOC_OVERLAY on           VIDIOC_OVERLAY off
		 3)                          bttv_release
   VBI		 VIDIOC_STREAMON             VIDIOC_STREAMOFF
		 VIDIOC_QBUF 1)              bttv_release
		 bttv_read, bttv_poll 1) 4)
   1) The resource must be allocated when we enter buffer prepare functions
      and remain allocated while buffers are in the DMA queue.
   2) This is a single frame read.
   3) VIDIOC_S_FBUF and VIDIOC_S_FMT (OVERLAY) still work when
      RESOURCE_OVERLAY is allocated.
   4) This is a continuous read, implies VIDIOC_STREAMON.
   Note this driver permits video input and standard changes regardless if
   resources are allocated.
 mutual exclusive resources 
 have it already allocated 
 is it free? 
 no, someone else uses it 
 Do crop - use current, don't - use default parameters. 
		 We cannot capture the same line as video and VBI data.
 Claim scan lines above fh->vbi_fmt.end. 
 it's free, grab it 
 Call with btv->lock down. 
 Call with btv->lock down. 
	 VBI capturing ends at VDELAY, start of video capturing, no
	   matter how many lines the VBI RISC program expects. When video
	   capturing is off, it shall no longer "preempt" VBI capturing,
 trying to free resources not allocated by us ... 
 ----------------------------------------------------------------------- 
 If Bt848a or Bt849, use PLL for PALSECAM and crystal for NTSC          
 Frequency = (F_input  PLL_X)  PLL_I.PLL_FPLL_C
   PLL_X = Reference pre-divider (0=1, 1=2)
   PLL_C = Post divider (0=6, 1=4)
   PLL_I = Integer input
   PLL_F = Fractional input
   F_input = 28.636363 MHz:
   PAL (CLKx2 = 35.46895 MHz): PLL_X = 1, PLL_I = 0x0E, PLL_F = 0xDCF9, PLL_C = 0
 prevent overflows 
 no PLL needed 
  Let other people run while the PLL stabilizes 
 used to switch between the bt848's analogdigital video capture modes 
 timing change...reset timing generator address 
 ----------------------------------------------------------------------- 
 printk("set bright: %d\n", bright); 
 We want -128 to 127 we get 0-65535 
 -128 to 127 
 0-511 
 0-511 for the color 
 ----------------------------------------------------------------------- 
 needed by RemoteVideo MX 
 card specific hook 
 automute 
		 Note: the inputs tunerradioexternintern are translated
		   to msp routings. This assumes common behavior for all msp3400
		   based TV cards. When this assumption fails, then the
		   specific MSP routing must be added to the card table.
 Some boards need the msp do to the radio demod 
			 Yes, this is the same input as for RADIO. I doubt
			   if this is ever used. The only board with an INTERN
			   input is the BTTV_BOARD_AVERMEDIA98. I wonder how
			   that was tested. My guess is that the whole INTERN
			 This is the only card that uses TUNER2, and afaik,
			   is the only difference between the VOODOOTV_FM
	 Scale factor min. 1:1, max. 16:1. Min. image size
		 For bug compatibility with VIDIOCGCAP and image
 Call with btv->lock down. 
 current = default 
 Call with btv->lock down. 
 active capture -> delayed input switch 
 clear status 
 i2c only 
 full video 
 very basic init only 
 set planar and packed mode trigger points and         
 set rising edge of inverted GPINTR pin as irq trigger 
 interrupt 
 ----------------------------------------------------------------------- 
 ----------------------------------------------------------------------- 
 start field counter 
 stop field counter 
 ----------------------------------------------------------------------- 
 misc helpers                                                            
 ----------------------------------------------------------------------- 
 video4linux (1) interface                                               
 check settings 
		 Make sure tvnorm and vbi_end remain consistent
		 In this mode capturing always starts at defrect.top
			 btv->crop counts frame lines. Max. scale
 alloc + fill struct bttv_buffer (if changed) 
 alloc risc memory 
 Switch to the radio tuner 
	 s_frequency may clamp the frequency, so get the actual
 bt848 has a 12-bit register space 
 bt848 has a 12-bit register space 
 Given cropping boundaries b and the scaled width and height of a
   single field or frame, which must not exceed hardware limits, this
 Max. hor. scale factor 16:1. 
 Min. hor. scale factor 1:1. 
 Max. vert. scale factor 16:1, single fields 8:1. 
		 Min. vert. scale factor 1:1.
 Returns an error if scaling to a frame or single field with the given
   width and height is not possible with the current cropping parameters
   and width aligned according to width_mask. If adjust_size is TRUE the
   function may adjust the width andor height instead, rounding width
   to (width + width_bias) & width_mask. If adjust_crop is TRUE it may
   also adjust the current cropping parameters to get closer to the
	 Make sure tvnorm, vbi_end and the current cropping parameters
 Do crop - use current, don't - use default parameters. 
		 We cannot scale up. When the scaled image is larger
		   than crop.rect we adjust the crop.rect as required
		 We cannot capture the same line as video and VBI data.
		   Note btv->vbi_end is really a minimum, see
 Max. scale factor is 16:1 for frames, 8:1 for fields. 
 Min. scale factor is 1:1. 
 Round after clamping to avoid overflow. 
 Move the crop window out of the way. 
 success 
 Returns an error if the given overlay window dimensions are not
   possible with the current cropping parameters. If adjust_size is
   TRUE the function may adjust the window width andor height
   instead, however it always rounds the horizontal position and
   width as btcx_align() does. If adjust_crop is TRUE the function
   may also adjust the current cropping parameters to get closer
 4-byte alignment. 
 width_bias: round down  0,
 adjust_size  fixup,
 adjust_crop  fixup);
	 copy clips  --  luckily v4l1 + v4l2 are binary
 clip against screen 
 4-byte alignments 
 no alignment fixups needed 
 update overlay if needed 
 ----------------------------------------------------------------------- 
 Y plane 
 width must be a multiple of 16 pixels 
 nearest 
 width must be a multiple of 4 pixels 
 nearest 
 FIELD_ANY case 
 adjust_size  1,
 adjust_crop  0);
 update data for the application 
 adjust_size  1,
 adjust_crop  0);
 adjust_size  1,
 adjust_crop  1);
 update our state information 
	
	  No need to lock here: those vars are initialized during board
	  probe and remains untouched during the rest of the driver lifecycle
 verify args 
 switch over 
 check args 
 width_mask  ~3,
 width_bias  2,
 adjust_size  0,
 adjust_crop  0);
 ok, accept it 
 defrect and bounds are set via g_selection 
		
		  No fh->do_crop = 1; because btv->crop[1] may be
		  inconsistent with fh->width or fh->height and apps
		  do not expect a change here.
	 Make sure tvnorm, vbi_end and the current cropping
	   parameters remain consistent until we're done. Note
 Min. scaled size 48 x 32. 
 Top and height must be a multiple of two. 
			 VIDEO_READ in use by another fh,
 streaming capture 
 read() capture 
 need to capture a new frame 
 allocate per filehandle data 
	 The V4L2 spec requires one global set of cropping parameters
	   which only change on request. These are stored in btv->crop[1].
	   However for compatibility with V4L apps and cropping unaware
	   V4L2 apps we now reset the cropping parameters as seen through
	   this fh, which is to say VIDIOC_G_SELECTION and scaling limit checks
	   will use btv->crop[0], the default cropping parameters for the
	   current video standard, and VIDIOC_S_FMT will not implicitly
	   change the cropping parameters until VIDIOC_S_SELECTION has been
 module parameter 
	 Likewise there should be one global set of VBI capture
	   parameters, but for compatibility with V4L apps and earlier
 turn off overlay 
 stop video capture 
 stop vbi capture 
 free stuff 
 ----------------------------------------------------------------------- 
 radio interface                                                         
 allocate per filehandle data 
 ----------------------------------------------------------------------- 
 some debug code                                                         
 ----------------------------------------------------------------------- 
 irq handler                                                             
 format change detected (525 vs. 625)
 vertical sync (new field)
 horizontal sync
 chromaluma AGC overflow
 horizontal lock changed
 video presence changed
 hw irc operation finished
 gpio port triggered irq
 risc instruction triggered irq
 pixel data fifo dropped data (high pci bus latencies)
 pixel data fifo overrun
 fifo data stream resyncronisation
 parity error (data transfer)
 parity error (read risc instructions)
 pci abort
 risc instruction error
 syncronisation error
 capture request ? 
 capture request for other field ? 
			 Mike Isely <isely@pobox.com> - Only check
			  and set up the bottom field in the logic
			  below.  Don't ever do the top field.  This
			  of course means that if we set up the
			  bottom field in the above code that we'll
			  actually skip a field.  But that's OK.
			  Having processed only a single buffer this
			  time, then the next time around the first
			  available buffer should be for a top field.
			  That will then cause us here to set up a
			  top then a bottom field in the normal way.
			  The alternative to this understanding is
			  that we set up the second available buffer
			  as a top field, but that's out of order
			  since this driver always processes the top
			  field first - the effect will be the two
			  buffers being returned in the wrong order,
			  with the second buffer also being delayed
			  by one field time (owing to the fifo nature
			  of videobuf).  Worse still, we'll be stuck
			  doing fields out of order now every time
			  until something else causes a field to be
			  dropped.  By effectively forcing a field to
			  drop this way then we always get back into
			  sync within a single frame time.  (Out of
			  order fields can screw up deinterlacing
 screen overlay ? 
 deactivate stuff 
 wake up 
 cancel all outstanding capture  vbi requests 
 new buffer set 
 switch over 
 switch input 
 wake up finished buffers 
 switch 
 getclear interrupt status bits 
 get device status bits 
 trigger automute 
 ----------------------------------------------------------------------- 
 initialization                                                          
 register video4linux devices 
 video 
 vbi 
 radio 
 all done 
 on OpenFirmware machines (PowerMac at least), PCI memory cycle 
 response on cards with no firmware is not enabled by OF 
 initialize structs  fill in defaults 
 pci stuff (init, get irqmmio, ... 
 identify card 
 disable irqs, register irq handler 
 init options from insmod args 
 fill struct bttv with some useful defaults 
 initialize hardware 
 gpio 
 needs to be done before i2c is registered 
 register i2c + gpio 
 some card-specific stuff (needs working i2c) 
 90.5Mhz default 
 mute device 
 register video4linux + input 
 current = default 
 add subdevices and autoload dvb-bt8xx if needed 
 everything is fine 
 shutdown everything (DMA+IRQs) 
 tell gpio modules we are leaving ... 
 unregister i2c_bus + input 
 unregister video4linux 
 free allocated memory 
 free resources 
 stop dma + irqs 
 save bt878 state 
 restore bt878 state 
 restart dma 
